[
    {
        "number": 4000,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    from itertools import combinations\n    n = int(stdin.strip())\n    a = list(map(int,stdin.split()))\n    edges = []\n    for i in range(1, n - 1):\n        for combi in combinations(a, i):\n            edges.append(list(combi))\n    if len(edges) == 1:\n        return \"1\" + \" \" * (n - 1)\n    a = sorted(edges, key=lambda x: len(x))\n    a = a[0]\n    a = a[1:]\n    if len(a) == 0:\n        return \"1\" + \" \" * (n - 1)\n    for i in a:\n        i = str(i)\n        if \".\" in i:\n            return \"1\" + \" \" * (n - 1)\n        if len(i) == 1:\n            return \"1\" + \" \" * (n - 1)\n    if len(a) == 2:\n        return \"1\" + \" \" * (n - 1)\n    for i in a:\n        i = str(i)\n        if \"-\" in i:\n            return \"1\" + \" \" * (n - 1)\n        if len(i) == 1:\n            return \"1\" + \" \" * (n - 1)\n    if len(a) == 3:\n        return \"1\" + \" \" * (n - 1)\n    if len(a) == 4:\n        return \"1\" + \" \" * (n - 1)\n    if len(a) == 5:\n        return \"1\" + \" \" * (n - 1)\n    if len(a) == 6:\n        return \"1\" + \" \" * (n - 1)\n    if len(a) == 7:\n        return \"1\" + \" \" * (n - 1)\n    if len(a) == 8:\n        return \"1\" + \" \" * (n - 1)\n    if len(a) == 9:\n        return \"1\" + \" \" * (n - 1)\n    if len(a) == 10:\n        return \"1\" + \" \" * (n - 1)\n    return \"1\" + \" \" * (n - 1)\n    \n"
    },
    {
        "number": 4000,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = [int(stdin.strip()) for stdin in stdin.split()]\n    b = sorted(a)\n    c = sorted(b, key=lambda x: (x[0], x[1]))\n    print(c)\n    print(len(c))\n    count = 0\n    for i in range(n-1):\n        if c[i][0] == c[i+1][0] and c[i][1] < c[i+1][1]:\n            count += 1\n    print(count)\n    return \"5\"\n\n\n-----Constraints-----\n\n1 <= stdin.length <= 105\n0 <= N <= 105\n\n----------Result Details----------\nRuntime: 232 ms, faster than 13.42% of Python3 online submissions for Simple Paths Between N Vertices.\nMemory Usage: 16.7 MB, less than 57.74% of Python3 online submissions for Simple Paths Between N Vertices.\n\n\"\"\"\n\nclass Solution:\n    def maxPathSum(self, A: List[List[int]]) -> int:\n        n = len(A)\n        A.sort()\n        max_sum = 0\n        for i in range(n):\n            max_sum += A[i][0]\n            for j in range(i+1, n):\n                if A[j][0] < A[i][0] + A[j][1]:\n                    max_sum = max(max_sum, A[j][0] + A[i][1] + A[j][2])\n                else:\n                    max_sum = max(max_sum, A[j][0] + A[i][1] + A[j][2])\n        return max_sum"
    },
    {
        "number": 4000,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c, *path = map(int, stdin.split())\n    if n!= 1 or not all(1 <= a <= b <= n or a!= b or not a <= c <= b or c <= a or a!= c):\n        return 'No'\n    ans = 'Yes'\n    for i in range(path[0], path[-1] + 1):\n        if a in [i, i - 1]:\n            continue\n        if b in [i, i - 1]:\n            continue\n        if c in [i, i - 1]:\n            continue\n        ans = max(ans, len(list(set(path) & set(paths))))\n    return ans\n\n-----Constraints-----\n1 <= n <= 1e5\n0 <= a, b, c <= n\nn = a, b, c\n1 <= a <= b <= n\n-10^5 <= a_i, b_i <= 10^5\n\"\"\"\nimport collections\n\ndef"
    },
    {
        "number": 4000,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(max(int(x) for x in stdin.splitlines()[1:]))"
    },
    {
        "number": 4000,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    l = [int(i) for i in stdin.strip().split()]\n    a = []\n    for i in range(n):\n        a.append(l[i * 2] - l[i * 2 + 1])\n    b = []\n    for i in range(n - 1):\n        b.append(a[i * 2] - a[i * 2 + 1])\n    c = []\n    for i in range(n):\n        c.append(a[i] - b[i])\n    if any(a > n for a in a):\n        a.sort()\n    if any(b > n for b in b):\n        b.sort()\n    if any(c > n for c in c):\n        c.sort()\n    res = []\n    a.sort()\n    b.sort()\n    c.sort()\n    for i in range(n):\n        if a[i] > n or b[i] > n or c[i] > n:\n            continue\n        res.append(a[i] - b[i] - c[i])\n    res.sort()\n    if n % 3 == 1:\n        if n / 3 == 1:\n            return str(sum(res))\n        return str(res[n // 3])\n    return str(res[n // 3]) + str(res[n % 3])\n\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n\n\n\n-----Brute Force-----\n\ndef"
    },
    {
        "number": 4000,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    arr = []\n    for i in range(0, n - 1):\n        temp = stdin.strip().split()\n        if i == 0:\n            for j in range(0, n - 1):\n                arr.append((j + 1, int(temp[j]), int(temp[j + 1])))\n            arr.sort()\n        else:\n            for j in range(0, n - 1):\n                arr.append((int(temp[j]), int(temp[j + 1]), int(temp[j + 2])))\n    arr.sort()\n    for i in range(0, len(arr)):\n        if i == 0:\n            res = arr[i][2] - arr[i][1]\n            for j in range(0, n - 1):\n                if arr[j][2] - arr[j][1] == res:\n                    res = arr[j][2] - arr[j][1]\n        else:\n            if arr[i][2] - arr[i][1] == res:\n                res = arr[i][2] - arr[i][1]\n            elif arr[i - 1][2] - arr[i - 1][1] == res:\n                res = arr[i][2] - arr[i - 1][1]\n        if res < 0:\n            break\n    return str(abs(res)) + \" \" + str(res)\n\n\nInput\n2\n3 2\n2\n4 4\n3\nInput\n3\n1 2\n1 4\n1 2\n2\nOutput\n2\n2\n2\n2\n1\n1\n1\n\n\nOutput\n1\n1\n1\n\n'''\nimport sys\nimport math\nimport heapq\n\ndef"
    },
    {
        "number": 4000,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    edges = set(map(int, stdin.split()))\n    edges = edges.union({a, b})\n    edges = edges.union({a, b, c})\n    edges = edges.union({a, b, c, a, c})\n    edges = edges.union({a, b, c, a, c, b, c})\n    return max(edges)\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4000,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n    C = list(map(int, input().split()))\n    answer = \"\"\n    for i in range(n-1):\n        if A[i]!= A[i+1] and A[i]!= B[i] and A[i]!= C[i]:\n            answer += str(A[i]) + \",\"\n            answer += str(B[i]) + \",\"\n            answer += str(C[i]) + \",\"\n            answer += str(A[i+1]) + \",\"\n            answer += str(C[i+1]) + \",\"\n    answer = answer[:-1]\n    if answer == \"\":\n        answer = \"0\"\n    print(answer)\n"
    },
    {
        "number": 4000,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, *paths = map(int, stdin.split())\n    for path in paths:\n        for index in range(len(path) - 1):\n            if path[index] == path[index + 1]:\n                path.remove(path[index])\n                path.remove(path[index + 1])\n                break\n    if len(paths)!= N:\n        return \"Impossible\"\n    return \"\".join(paths)"
    },
    {
        "number": 4000,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"5\"\n    if n == 2:\n        return \"8\"\n    res = \"0\"\n    a = b = c = 0\n    for i in range(n):\n        a, b, c = [int(x) for x in stdin.split()]\n        res = max(res, 1 + (a - b) * c)\n    return str(res)\n\n\"\"\"\ndef"
    },
    {
        "number": 4001,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    result = []\n    a = 1\n    b = 1\n    for i in range(1, n+1):\n        if a > b:\n            result.append(a)\n            a = 1\n            b = b + 1\n        elif a == b:\n            result.append(b)\n            b = b + 1\n        else:\n            a = a + 1\n            if a == b:\n                result.append(b)\n                b = 1\n    result = result + [i for i in range(1, b+1)]\n    return \"\".join(str(i) for i in result)\n\n\nprint(solution())\n"
    },
    {
        "number": 4001,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    list_x = list(map(int, stdin.split()))\n    list_y = list(map(int, stdin.split()))\n    x = 0\n    y = 0\n    for i in list_y:\n        while list_y[x]!= list_x[x] + i:\n            x += 1\n            if x > (len(list_x) - 1):\n                x = 0\n        while x < (len(list_x)):\n            y += 1\n            if y > (len(list_y) - 1):\n                y = 0\n            if list_y[y]!= list_x[x] + i:\n                y += 1\n            if y > (len(list_y) - 1):\n                y = 0\n        x += 1\n        y += 1\n    return str(list_x[x]) + str(list_y[y])\n"
    },
    {
        "number": 4001,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    answer = []\n    answer.append(x)\n    answer.append(y)\n    x, y = x//2, y//2\n    for i in range(x, -1, -1):\n        answer.append(i)\n        answer.append(i + y)\n    for i in range(y, 0, -1):\n        answer.append(i)\n        answer.append(i + x)\n    print(' '.join(map(str, answer)))\n    return answer\n\ndef"
    },
    {
        "number": 4001,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    permutations = []\n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            permutations.append(i)\n            permutations.append(j)\n    permutations = sorted(permutations)\n    count = 0\n    for i in range(len(permutations)-1):\n        if permutations[i] == permutations[i+1]:\n            count += 1\n    return str(count)\n\n\n-----Example-----\n\nInput\n10\n10 2 8 1 2 4 1 20 4 5\n\nOutput\n7\ndef"
    },
    {
        "number": 4001,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    l = [int(i) for i in stdin.split()]\n    def helper(l):\n        l2 = []\n        l3 = []\n        for i in l:\n            for j in l:\n                if i%j == 0:\n                    l3.append(j)\n                    l2.append(i)\n        return l3, l2\n    l1, l2 = helper(l)\n    l1.sort()\n    l2.sort()\n    print(*l1, sep=' ')\n    print(*l2, sep=' ')\n    print(*l3, sep=' ')\n    return''.join(str(i) for i in l1) +'' +''.join(str(i) for i in l2) +'' +''.join(str(i) for i in l3)\n\n\n-----Input-----\n\nThe first line contains one integer $n$ ($2 \\le n \\le 128$) \u2014 the number of divisors of $x$ and $y$.\n\nThe second line of the input contains $n$ integers $d_1, d_2, \\dots, d_n$ ($1 \\le d_i \\le 10^4$), where $d_i$ is either divisor of $x$ or divisor of $y$. If a number is divisor of both numbers $x$ and $y$ then there are two copies of this number in the list.\n\n\n-----Output-----\n\nPrint two positive integer numbers $x$ and $y$ \u2014 such numbers that merged list of their divisors is the permutation of the given list of integers. It is guaranteed that the answer exists.\n\n\n-----Example-----\nInput\n10\n10 2 8 1 2 4 1 20 4 5\n\nOutput\n20 8\ndef"
    },
    {
        "number": 4001,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n    from itertools import permutations\n    from collections import Counter\n\n    line = stdin.split()\n    x = int(line[0])\n    y = int(line[1])\n\n    # find the list of divisors of x\n    divisors = set(range(1, x + 1))\n    for i in range(1, x + 1):\n        divisors = divisors.intersection(set(range(1, i)))\n\n    # find the list of divisors of y\n    divisors = set(range(1, x + 1))\n    for j in range(1, y + 1):\n        divisors = divisors.intersection(set(range(1, j)))\n\n    # build the permutations using given divisors\n    permutations = list(permutations(divisors, len(divisors)))\n\n    # build a dictionary of counts\n    counts = Counter(permutations)\n\n    # find the maximum count\n    max_count = max(counts.values())\n\n    # assign the value to x\n    x = x * max_count\n\n    # find the maximum value\n    max_x = max(counts.values())\n\n    # assign the value to y\n    y = y * max_x\n\n    return f\"{x} {y}\"\n\n-----Test-----\ntest_case_1 = ['10 2 8 1 2 4 1 20 4 5', '20 8']\nexpected_output = '20 8'\nassert solution(test_case_1) == expected_output\n\ntest_case_2 = ['5', '20 5', '5', '1 10 4', '1 20 5', '1 10 3', '1 10 2', '1 20 5', '1 20 3', '1 20 2', '1 20 1', '1 20 4', '1 20 4', '5']\nexpected_output = '20 4 20 4 20 1 1 1 1 1 1 20'\nassert solution(test_case_2) == expected_output\n\ntest_case_3 = ['2', '8', '1', '2', '5', '5', '6', '7', '4', '3', '1', '2', '3', '4', '5', '8', '1', '2', '3', '4', '5', '6', '7', '8', '1', '2', '3', '4', '5', '6', '7', '8', '1', '2', '3', '4', '5', '6', '7', '8', '1', '2', '3', '4', '5', '6', '7', '8', '1', '2', '3', '4', '5', '6', '7', '8', '1', '2', '3', '4', '5', '6', '7', '8', '1', '2', '3', '4', '5', '6', '7', '8', '1', '2', '3', '4', '5', '6', '7', '8', '1', '2', '3', '4', '5', '6', '7', '8', '1', '2', '3', '4', '5', '6', '7', '8', '1', '2', '3', '4', '5', '6', '7', '8', '1', '2', '3', '4', '5', '6', '7', '8', '1', '2', '3', '4', '5', '6', '7', '8', '1', '2', '3', '4', '5', '6', '7', '8', '1', '2', '3', '4', '5', '6', '7', '8', '1', '2', '3', '4', '5', '6', '7', '8', '1', '2', '3', '4', '5', '6', '7', '8', '1', '2', '3', '4', '5', '6', '7', '8', '1', '2', '3', '4', '5', '6', '7', '8', '1', '2', '3', '4', '5', '6', '7', '8', '1', '2', '3', '4', '5', '6', '7', '8', '1', '2', '3', '4', '5', '6', '7', '8', '1', '2', '3', '4', '5', '6', '7', '8', '1', '2', '3', '4', '5', '6', '7', '8', '1', '2', '3', '4', '5', '6', '7', '8', '1', '2', '3', '4', '5', '6', '7', '8', '1', '2', '3', '4', '5', '6', '7', '8', '1', '2', '3', '4', '5', '6', '7', '8', '1', '2', '3', '4', '5', '6', '7', '8', '1', '2', '3', '4', '5', '6', '7', '8', '1', '2', '3', '4', '5', '6', '7', '8', '1', '2', '3', '4', '5', '6', '7', '8', '1', '2', '3', '4', '5', '6', '7', '8', '1', '2', '3', '4', '5', '6', '7', '8', '1', '2', '3', '4', '5', '6', '7', '8', '1', '2', '3', '4', '5', '6', '7', '8', '1', '2', '3', '4', '5', '6', '7', '8', '1', '2', '3', '4', '5', '6', '7', '8', '1', '2', '3', '4', '5', '6', '7', '8', '1', '2', '3', '4', '5', '6', '7', '8', '1', '2', '3', '4', '5', '6', '7', '8', '1', '2', '3', '4', '5', '6', '7', '8', '1', '2', '3', '4', '5', '6', '7', '8', '1', '"
    },
    {
        "number": 4001,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    lst = [int(x) for x in stdin.split()]\n    return \"\".join(str(i) for i in sorted(lst))\n\n------Test Cases----\nTest1:\nInput:\n10\n10 2 8 1 2 4 1 20 4 5\n\nOutput:\n20 8\n\nTest2:\nInput:\n10 2 8 1 2 4 1 20 4 5\n\nOutput:\n4 5\n"
    },
    {
        "number": 4001,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N,x,y=map(int,stdin.split())\n    dp=[N]\n    for i in range(1,N+1):\n        l=[int(d) for d in str(i)]\n        if all(d in l for d in dp):\n            #print(dp)\n            dp.append(min(l))\n            #print(dp)\n            l.pop()\n            #print(l)\n            if len(l)==0:\n                if x in dp:\n                    dp.append(x)\n                if y in dp:\n                    dp.append(y)\n    if len(dp)>1:\n        dp.pop(0)\n        dp.append(x)\n        dp.append(y)\n    print(dp)\n    return \"\".join(str(i) for i in dp)\n\n-----Constraints-----\n1 <= N <= 10^4\n-10^4 <= x,y <= 10^4\nN is a divisor of $x$ or $y$.\nd_1,d_2,d_i \\le 10^4\n\n\"\"\"\n\nimport math\n\ndef"
    },
    {
        "number": 4001,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    x, y = 1, 1\n    for i in range(2, n):\n        if x % i!= 0:\n            continue\n        y = i * x\n        x = y\n    return str(x) + \" \" + str(y)\n    \n"
    },
    {
        "number": 4001,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x = list(map(int, stdin.split()))\n    y = list(map(int, stdin.split()))\n    x.sort()\n    y.sort()\n    x_len = len(x)\n    y_len = len(y)\n    d = 0\n    for i in range(y_len):\n        for j in range(x_len):\n            if x[j] < y[i]:\n                d += y[i]\n                break\n            elif x[j] == y[i]:\n                d += x[j]\n                break\n    return str(d)\n\n-----Tests-----\nInput\n10\n10 2 8 1 2 4 1 20 4 5\n\nOutput\n20 8\n1 2 3 4 5 6 7 8 9 10\n\n\nInput\n2\n2 2 2\n\nOutput\n2\n\n\n-----Solution-----\n\n\"\"\"\n"
    },
    {
        "number": 4002,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    answer = 0\n    a = sorted(a)\n    for i in range(len(a)//2):\n        if a[i] + a[len(a)-i-1] % k!= 0:\n            continue\n        if i == 0:\n            answer += a[i]\n        elif i == len(a)-1:\n            answer += a[i]\n        else:\n            answer += max(a[i], a[len(a)-i-1])\n    print(answer)\n    return str(answer)"
    },
    {
        "number": 4002,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    result = 0\n    for i in range(n):\n        for j in range(m):\n            if j + k*(m+1) <= n*m:\n                result += a[j+k*(m+1)]\n    return str(result)"
    },
    {
        "number": 4002,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = [list(map(int, input().split())) for _ in range(n)]\n    \n    def is_divisible_by_k(n):\n        for i in range(n):\n            for j in range(i+1, n):\n                if (n - i) % m == 0:\n                    return True\n        return False\n        \n    def is_sum_divisible_by_k(a, k):\n        if is_divisible_by_k(n):\n            return 0\n        else:\n            return max(sum(row) for row in a) + k\n    \n    answer = is_sum_divisible_by_k(a, k)\n    return str(answer)"
    },
    {
        "number": 4002,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    if n * m < k or (n > 100 and m > 100):\n        return '0'\n    numbers = [int(i) for i in range(1, n * m + 1)]\n    values = [int(i) for i in range(m * 3, m * 3 + k + 1)]\n    answer = 0\n    for i in numbers:\n        answer += values[values.index(i)]\n    return str(answer)\n"
    },
    {
        "number": 4002,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = [list(map(int, stdin.split())) for _ in range(n)]\n    print(sum(a[0]))\n    for i in range(n):\n        for j in range(m):\n            a[i][j] %= k\n            if a[i][j] == 0:\n                print(i, j, a[i][j])\n                break\n    return str(sum(a[n - 1]))\n\n-------------------------------\n\ndef"
    },
    {
        "number": 4002,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = list(map(int, stdin.split()))\n    a = [[0]*m for _ in range(n)]\n    for _ in range(n):\n        a[_] = list(map(int, stdin.split()))\n    for i in range(n):\n        a[i].sort()\n    for i in range(m):\n        j = 0\n        sum = 0\n        while j < len(a[i]):\n            if a[i][j] % k!= 0:\n                sum += a[i][j] % k\n                j += 1\n            else:\n                j += 1\n        a[i].sort()\n        a[i].append(sum)\n    return str(max(a[i]))"
    },
    {
        "number": 4002,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = [list(map(int, stdin.split())) for _ in range(n)]\n    # print(a)\n    sum_list = [[sum(a[i]) for i in range(n)] for j in range(n)]\n    # print(sum_list)\n    max_sum = 0\n    for i in range(n):\n        for j in range(n):\n            # print(sum_list[i][j])\n            if sum_list[i][j] % k == 0:\n                sum_list[i][j] //= k\n                # print(sum_list[i][j])\n                # print(max_sum)\n                if sum_list[i][j] > max_sum:\n                    max_sum = sum_list[i][j]\n    # print(max_sum)\n    return str(max_sum)\n"
    },
    {
        "number": 4002,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    n = n + 1\n    matrix = [list(map(int, stdin.split())) for _ in range(n)]\n    # print(matrix)\n    # print(matrix[0][0])\n    max_sum = 0\n    # print(matrix[0][0])\n    for i in range(1, len(matrix)):\n        for j in range(1, len(matrix[i])):\n            if matrix[i][j] % k == 0:\n                if matrix[i][0] + matrix[0][j] % k == 0:\n                    if matrix[0][0] + matrix[1][j] % k == 0:\n                        if matrix[0][0] + matrix[2][j] % k == 0:\n                            if matrix[0][0] + matrix[3][j] % k == 0:\n                                if matrix[0][0] + matrix[4][j] % k == 0:\n                                    max_sum = max(max_sum, matrix[i][j] + matrix[1][j] + matrix[2][j] + matrix[3][j] + matrix[4][j])\n    return str(max_sum)\n\nprint(solution(stdin))"
    },
    {
        "number": 4002,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    return '{}'.format(max(list(map(int, list(str(sum([int(i) for i in str(a)])[::-1])[::-1][0:m])))))\n"
    },
    {
        "number": 4002,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = [[0 for _ in range(m)] for _ in range(n)]\n    for i in range(n):\n        row = list(map(int, stdin.split()))\n        for j in range(m):\n            a[i][j] = sum(row[j:j + k])\n    return max(a[0])\n\nprint(solution(\"1 2 3 4 5 6 7 8 9\"))\n\"\"\"\n3 4 3\n1 2 3 4\n5 2 2 2\n7 1 1 4\n\n\"\"\"\n"
    },
    {
        "number": 4003,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int,stdin.strip().split()))\n    a.sort()\n    answer = ''\n    k = 0\n    while a:\n        a.pop(0)\n        if k == 0:\n            answer += str(a[0])\n            k += 1\n        else:\n            answer += str(a[0]) +''\n            k += 1\n    return answer.strip()\n\n-----Write your code here. Make sure to use the full implementation of the standard."
    },
    {
        "number": 4003,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n\n    l = len(a)\n    max_length = 1\n    for i in range(l - 1):\n        for j in range(i + 1, l):\n            if max_length < len(a[i:j+1]):\n                max_length = len(a[i:j+1])\n    return str(max_length)\n\n\n-----Sample Input-----\n\n8\n1 2 4 3 2\n\n-----Sample Output-----\n\n4\nRLLRRRR\n'''\n\ndef"
    },
    {
        "number": 4003,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, a = list(map(int, stdin.split()))\n    d = {\n        1: 0,\n        2: 1,\n        3: 2,\n        4: 3,\n        5: 4,\n        6: 5,\n        7: 6,\n        8: 7,\n        9: 8,\n        10: 9,\n    }\n    ans = 0\n    for i in range(1, n+1):\n        ans += d[a[i-1]]\n    return str(ans)\n\n-----Examples-----\nInput\n5\n1 2 4 3 2\n\nOutput\n4\nLRRR\n\nInput\n7\n1 3 5 6 5 4 2\n\nOutput\n6\nLRLRRR\n\nInput\n3\n2 2 2\n\nOutput\n1\nR\n\n-----Notes-----\nThe problem statement for the above two problems is\n[1] = 2 + 2 * (3+2), and this is the most challenging problem. The solution is to write down the sequence of moves, and try to solve the problem in less than $n$ lines of code.\n\"\"\"\n\nclass Solution:\n    def sequenceNumbers(self, nums):\n        if not nums:\n            return 0\n\n        n = len(nums)\n        d = {\n            1: 0,\n            2: 1,\n            3: 2,\n            4: 3,\n            5: 4,\n            6: 5,\n            7: 6,\n            8: 7,\n            9: 8,\n            10: 9,\n        }\n\n        ans = 0\n        for i in range(n):\n            ans += d[nums[i]]\n        return ans\n"
    },
    {
        "number": 4003,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    seq = list(map(int, stdin.strip().split()))\n    if n % 2 == 0:\n        return max(seq[1:]) + max(seq[:-1])\n    else:\n        return max(seq[1:-1]) + max(seq[-1:])\n\n\ndef"
    },
    {
        "number": 4003,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n  import sys\n  N = int(stdin.strip())\n  a = list(map(int, sys.stdin.readline().split()))\n  c = ''\n  maxc = 0\n  for i in range(N):\n    if a[i] > maxc:\n      maxc = a[i]\n    if a[i] < c:\n      c = a[i]\n  for i in range(N):\n    if a[i] == c:\n      c += 1\n  print(maxc)\n  return c\n\ndef"
    },
    {
        "number": 4003,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    a.sort()\n    start = 0\n    end = n\n    length = len(a)\n    k = 1\n    s = ''\n    while start <= end:\n        if start + 1 < length and a[start + 1] < a[start]:\n            start = start + 1\n        if end > 0 and a[end - 1] < a[end]:\n            end = end - 1\n        k = k + 1\n        s = s + str(k) +''\n    return s\n\nprint(solution(stdin))"
    },
    {
        "number": 4003,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n\n    d = dict()\n\n    for i in range(len(a)):\n        if i == 0:\n            d[a[i]] = 1\n        elif i == len(a)-1:\n            d[a[i]] = 1\n        else:\n            if a[i-1] > a[i]:\n                d[a[i]] = 1\n            else:\n                d[a[i]] = 1 + max(d[a[i-1]] + 1, d[a[i+1]] + 1)\n\n    ans = max(d.values())\n    return ans * len(d)\n"
    },
    {
        "number": 4003,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin.strip()) + 1)\n\nInput\n4\n1 2 3 4\nOutput\n3\nLRLR\n\nInput\n2\n2 1 3 2\nOutput\n2\nRLLR\n\nInput\n4\n1 3 5 6 5 4 2\nOutput\n1\nLLRR\n\nInput\n2\n1 2 2\nOutput\n2\nLRRR\n\nInput\n5\n1 3 5 6 5 4 2\nOutput\n2\nLLLRR\n\nInput\n2\n3 2 2\nOutput\n1\nLRRR\n\nInput\n7\n1 3 5 6 5 4 2\nOutput\n1\nLLRRLR\n'''\n\ndef"
    },
    {
        "number": 4003,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = [int(i) for i in stdin.split()[1:]]\n    a.sort()\n    s = ''\n    ans = ''\n    cur = a[-1] - a[0]\n    for i in range(1, n):\n        tmp = 0\n        while a[i] < a[i - 1]:\n            tmp += 1\n            cur = a[i] - a[i - 1]\n            if tmp > cur:\n                ans = 'L'\n                break\n            else:\n                ans = 'R'\n                break\n        s += ans\n        ans = 'L' if ans == 'R' else 'R'\n    return s\n\nThe second example is described in the problem statement.\ndef"
    },
    {
        "number": 4003,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(max(map(len, map(int, list(stdin.split(' '))[1:]))))\n\ndef"
    },
    {
        "number": 4004,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    n = int(stdin.strip())\n    a = [int(i) for i in stdin.strip().split()]\n    a.sort()\n    \n    # print(a)\n    for i in range(n):\n        for j in range(i+1,n):\n            if a[i] < a[j]:\n                a[i],a[j] = a[j],a[i]\n    # print(a)\n    return''.join([str(i) for i in a])\n"
    },
    {
        "number": 4004,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = [int(i) for i in input().strip().split()]\n    D = {}\n    for i in range(n):\n        if a[i] not in D.keys():\n            D[a[i]] = 1\n        else:\n            D[a[i]] += 1\n    for i in sorted(D.values()):\n        if i == 1:\n            return -1\n    return min(D.values())\n"
    },
    {
        "number": 4004,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, *a = map(int, stdin)\n    D = -1\n    result = -1\n    a.sort(reverse=True)\n    for i in range(N):\n        if a[i] >= D:\n            D = a[i] + D\n        else:\n            result = D\n            break\n    if result == -1:\n        return -1\n    return result\n"
    },
    {
        "number": 4004,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = []\n    for _ in range(int(stdin)):\n        a.append(int(stdin.split()[1]))\n    a.sort()\n    n = len(a)\n    for i in range(n):\n        if a[i] >= a[i+1]:\n            a[i], a[i+1] = a[i+1], a[i]\n        else:\n            break\n    for i in range(n):\n        if a[i]!= i+1:\n            print(-1)\n            return\n    print(a[i]+1)\n    return\n\n-----Constraints-----\n1 <= n <= 100\n1 <= a_i <= 10^6\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4004,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, input().strip().split()))\n    while True:\n        if any(a[i] >= a[i+1] for i in range(n-1)):\n            return str(a[-1])\n        if any(a[i] < a[i+1] for i in range(n-1)):\n            return str(-1)\n        a.pop(-1)\n"
    },
    {
        "number": 4004,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    answer = -1\n    for a_i in a:\n        answer = max(answer, a_i + a_i)\n    print(answer)\n"
    },
    {
        "number": 4004,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    D = 0\n    for i in range(n):\n        if a[i] > D:\n            break\n        D += a[i]\n    for i in range(n):\n        a[i] -= D\n    for i in range(n):\n        if a[i] < 0:\n            return -1\n    return D"
    },
    {
        "number": 4004,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = [int(i) for i in stdin.strip().split()]\n    a = sorted(a)\n    if n == 0:\n        return \"-1\"\n    if n == 1:\n        return a[0]\n    if n == 2:\n        return a[0] + a[1]\n    if n == 3:\n        return a[0] - a[1] - a[2]\n    if n == 4:\n        return a[0] - a[1] + a[2] + a[3] - a[4]\n    if n == 5:\n        return a[0] - a[1] - a[2] + a[3] - a[4] - a[5]\n    if n == 6:\n        return a[0] - a[1] + a[2] + a[3] - a[4] - a[5] - a[6] - a[7] - a[8] - a[9]\n    if n == 7:\n        return a[0] - a[1] + a[2] + a[3] - a[4] - a[5] - a[6] - a[7] - a[8] - a[9] - a[10] - a[11] - a[12] - a[13] - a[14] - a[15] - a[16]\n    if n == 8:\n        return a[0] - a[1] + a[2] + a[3] - a[4] - a[5] - a[6] - a[7] - a[8] - a[9] - a[10] - a[11] - a[12] - a[13] - a[14] - a[15] - a[16] - a[17] - a[18] - a[19] - a[20] - a[21] - a[22] - a[23] - a[24] - a[25] - a[26] - a[27] - a[28] - a[29] - a[30] - a[31] - a[32] - a[33] - a[34] - a[35] - a[36] - a[37] - a[38] - a[39] - a[40] - a[41] - a[42] - a[43] - a[44] - a[45] - a[46] - a[47] - a[48] - a[49] - a[50] - a[51] - a[52] - a[53] - a[54] - a[55] - a[56] - a[57] - a[58] - a[59] - a[60] - a[61] - a[62] - a[63] - a[64] - a[65] - a[66] - a[67] - a[68] - a[69] - a[70] - a[71] - a[72] - a[73] - a[74] - a[75] - a[76] - a[77] - a[78] - a[79] - a[80] - a[81] - a[82] - a[83] - a[84] - a[85] - a[86] - a[87] - a[88] - a[89] - a[90] - a[91] - a[92] - a[93] - a[94] - a[95] - a[96] - a[97] - a[98] - a[99] - a[100] - a[101] - a[102] - a[103] - a[104] - a[105] - a[106] - a[107] - a[108] - a[109] - a[110] - a[111] - a[112] - a[113] - a[114] - a[115] - a[116] - a[117] - a[118] - a[119] - a[120] - a[121] - a[122] - a[123] - a[124] - a[125] - a[126] - a[127] - a[128] - a[129] - a[130] - a[131] - a[132] - a[133] - a[134] - a[135] - a[136] - a[137] - a[138] - a[139] - a[140] - a[141] - a[142] - a[143] - a[144] - a[145] - a[146] - a[147] - a[148] - a[149] - a[150] - a[151] - a[152] - a[153] - a[154] - a[155] - a[156] - a[157] - a[158] - a[159] - a[160] - a[161] - a[162] - a[163] - a[164] - a[165] - a[166] - a[167] - a[168] - a[169] - a[170] - a[171] - a[172] - a[173] - a[174] - a[175] - a[176] - a[177] - a[178] - a[179] - a[180] - a[181] - a[182] - a[183] - a[184] - a[185] - a[186] - a[187] - a[188] - a[189] - a[190] - a[191] - a[192] - a[193] - a[194] - a[195] - a[196] - a[197] - a[198] - a[199] - a[200] - a[201] - a[202] - a[203] - a[204] - a[205] - a[206] - a[207] - a[208] - a[209] - a[210] - a[211] - a[212] - a[213] - a[214] - a[215] - a[216] - a[217] - a[218] - a[219] - a[220] - a[221] - a[222]"
    },
    {
        "number": 4004,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, a = [int(x) for x in stdin.split()]\n    d = [int(i) for i in stdin.split()]\n    num = [0 for i in range(n)]\n    for i in range(n):\n        num[i] = a[i]\n    \n    for i in range(n-1):\n        for j in range(i+1, n):\n            num[j] += d[i] - d[j]\n            num[j] %= 1000000009\n    \n    for i in range(n):\n        num[i] %= 1000000009\n    \n    for i in range(n-1):\n        for j in range(i+1, n):\n            num[j] -= d[i]\n            num[j] %= 1000000009\n    \n    for i in range(n):\n        num[i] -= d[i]\n        num[i] %= 1000000009\n    \n    for i in range(n):\n        num[i] -= d[i]\n        num[i] %= 1000000009\n    \n    for i in range(n):\n        num[i] += d[i]\n        num[i] %= 1000000009\n    \n    for i in range(n):\n        num[i] -= d[i]\n        num[i] %= 1000000009\n    \n    print(min(num))\n    return str(min(num))\n\nprint(solution(stdin))"
    },
    {
        "number": 4004,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    d = 0\n    \n    for i in range(n):\n        d = a[i] - d\n        if d == 0:\n            return -1\n        elif d < 0:\n            return -1\n    \n    return d"
    },
    {
        "number": 4005,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y, x_1, y_1, x_2, y_2, x_3, y_3, x_4, y_4 = map(int, stdin.split())\n    if x_1 > y_1:\n        x_1, y_1 = y_1, x_1\n    if x_2 > y_2:\n        x_2, y_2 = y_2, x_2\n    if x_3 > y_3:\n        x_3, y_3 = y_3, x_3\n    if x_4 > y_4:\n        x_4, y_4 = y_4, x_4\n    a = (x_1 - x) ** 2\n    b = (y_1 - y) ** 2\n    c = (x_2 - x) ** 2\n    d = (y_2 - y) ** 2\n    e = (x_3 - x) ** 2\n    f = (y_3 - y) ** 2\n    g = (x_4 - x) ** 2\n    h = (y_4 - y) ** 2\n    area = a + b + c + d + e + f + g + h\n    if area > 2 * (x_1 + x_2 + x_3 + x_4):\n        return \"NO\"\n    elif area > (3 * x_1 + x_2 + x_3 + x_4) ** 0.5:\n        return \"YES\"\n    else:\n        return \"YES\""
    },
    {
        "number": 4005,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input_lines = stdin.split('\\n')\n    x_1, y_1, x_2, y_2 = map(int, input_lines[0].split())\n    x_3, y_3, x_4, y_4 = map(int, input_lines[1].split())\n    x_5, y_5, x_6, y_6 = map(int, input_lines[2].split())\n    w_p = (x_1, y_1, x_2, y_2)\n    a_p = (x_3, y_3, x_4, y_4)\n    b_p = (x_5, y_5, x_6, y_6)\n    return 'YES' if w_p in a_p and a_p in b_p and b_p in a_p or w_p in b_p and b_p in a_p or w_p in b_p and w_p in a_p else 'NO'\n\n----Basic idea-----------------\n\nWe consider the parallel axis of the coordinates.\n\nFor example, if the bottom left corner of the table is (x_3, y_3), it can be seen in the (x_5, y_5) coordinate of the rectangle.\n\nIn other words, the bottom left corner of the table has coordinates $(x_3, y_3)$.\n\nIf the top right coordinate is (x_4, y_4), it can be seen in the (x_6, y_6) coordinate of the rectangle.\n\nIn other words, the top right coordinate of the table has coordinates $(x_4, y_4)$.\n\nIn this case, we assume that the intersection of the two rectangles is the rectangular area.\n\nWe can solve the problem by making this recursive method with a bottom left corner and a top right coordinate.\n\nIf the bottom left corner of the rectangle is (x_3, y_3), it can be seen in the (x_5, y_5) coordinate of the rectangle.\n\nIn other words, the bottom left corner of the rectangle has coordinates $(x_3, y_3)$.\n\nIf the top right coordinate is (x_4, y_4), it can be seen in the (x_6, y_6) coordinate of the rectangle.\n\nIn other words, the top right coordinate of the rectangle has coordinates $(x_4, y_4)$.\n\nThis is a rectangle, and we need to consider the intersection.\n\n(x, y) is the coordinate of the top right of the rectangle.\n(x_left, y_left) is the coordinate of the top left of the rectangle."
    },
    {
        "number": 4005,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x, y = [int(i) for i in stdin.split()]\n\n    if x == 0 and y == 0:\n        return \"NO\"\n\n    if x > 0 and y > 0:\n        if x >= y:\n            if x <= y:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        else:\n            print(\"NO\")\n    elif x == 0 and y < 0:\n        if y <= x:\n            if y <= y:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        else:\n            print(\"NO\")\n    elif x < 0 and y < 0:\n        if y >= x:\n            if y >= y:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        else:\n            print(\"NO\")\n    else:\n        print(\"NO\")"
    },
    {
        "number": 4005,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = map(int, stdin.split())\n    if z >= x - y:\n        return \"NO\"\n    if z < x + y:\n        return \"NO\"\n    return \"YES\"\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4005,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, x_1, y_1 = map(int, stdin.split())\n    x_2, y_2 = map(int, stdin.split())\n    x_3, y_3 = map(int, stdin.split())\n    x_4, y_4 = map(int, stdin.split())\n    x_5, y_5 = map(int, stdin.split())\n    x_6, y_6 = map(int, stdin.split())\n    x_1 = list(map(float, stdin.split()))\n    y_1 = list(map(float, stdin.split()))\n    x_2 = list(map(float, stdin.split()))\n    y_2 = list(map(float, stdin.split()))\n    x_3 = list(map(float, stdin.split()))\n    y_3 = list(map(float, stdin.split()))\n    x_4 = list(map(float, stdin.split()))\n    y_4 = list(map(float, stdin.split()))\n    x_5 = list(map(float, stdin.split()))\n    y_5 = list(map(float, stdin.split()))\n    x_6 = list(map(float, stdin.split()))\n    y_6 = list(map(float, stdin.split()))\n    answer = 0\n    for i in range(0, n):\n        if not (0 <= x_1[i] <= x_2[i] and 0 <= y_1[i] <= y_2[i] and 0 <= x_3[i] <= x_4[i] and 0 <= y_3[i] <= y_4[i] and 0 <= x_5[i] <= x_6[i] and 0 <= y_5[i] <= y_6[i]):\n            answer += 1\n    return 'YES' if answer == n else 'NO'\n"
    },
    {
        "number": 4005,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, x_2, y_2 = map(int, stdin.split())\n\n    if x_1 > x_2 or y_1 > y_2:\n        return 'NO'\n    if x_1 > x_2 and x_1 < x_2 + x_3 and y_1 > y_2:\n        return 'YES'\n\n\n    x_3, y_3, x_4, y_4 = map(int, stdin.split())\n\n    if x_3 > x_4 or y_3 > y_4:\n        return 'NO'\n\n    return 'YES'\n"
    },
    {
        "number": 4005,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = map(int, stdin.split())\n    x3, y3, x4, y4 = map(int, stdin.split())\n    x5, y5, x6, y6 = map(int, stdin.split())\n    area = (y2-y1) * (x3-x1)\n    x1, y1, x2, y2 = int(x1) - 1, int(y1) - 1, int(x2) - 1, int(y2) - 1\n    x3, y3, x4, y4 = int(x3) - 1, int(y3) - 1, int(x4) - 1, int(y4) - 1\n    if area >= x1 * y1 + x2 * y2:\n        print('YES')\n    elif area >= x3 * y3 + x4 * y4:\n        print('YES')\n    else:\n        print('NO')\nsolution(stdin)"
    },
    {
        "number": 4005,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def get_sheet(x_1, y_1, x_2, y_2):\n        return \" \" * (x_2 - x_1 + 1) + \" \" * (y_2 - y_1 + 1)\n\n    def count_pieces(sheet, row, col):\n        # print(sheet)\n        # print(row, col)\n        return sheet.count(\"*\")\n\n    def get_black_count(sheet, row, col):\n        # print(sheet)\n        # print(row, col)\n        return sheet.count(\" \")\n\n    def get_white_count(sheet, row, col):\n        # print(sheet)\n        # print(row, col)\n        return sheet.count(\"*\")\n\n    x_1, y_1 = map(int, stdin.split())\n    x_2, y_2 = map(int, stdin.split())\n\n    if get_black_count(get_sheet(x_1, y_1, x_2, y_2), x_1, y_1) + get_white_count(get_sheet(x_2, y_2, x_1, y_1), x_1, y_1) > get_white_count(get_sheet(x_1, y_1, x_2, y_2), x_1, y_1):\n        return \"NO\"\n    else:\n        return \"YES\"\n\"\"\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, x_2, y_2, x_3, y_3, x_4, y_4, x_5, y_5, x_6, y_6 = map(float, stdin.split())\n    x_1 = x_1 % 1\n    x_2 = x_2 % 1\n    x_3 = x_3 % 1\n    x_4 = x_4 % 1\n    x_5 = x_5 % 1\n    x_6 = x_6 % 1\n    y_1 = y_1 % 1\n    y_2 = y_2 % 1\n    y_3 = y_3 % 1\n    y_4 = y_4 % 1\n    y_5 = y_5 % 1\n    y_6 = y_6 % 1\n    x_1 = int(x_1)\n    x_2 = int(x_2)\n    x_3 = int(x_3)\n    x_4 = int(x_4)\n    x_5 = int(x_5)\n    x_6 = int(x_6)\n    y_1 = int(y_1)\n    y_2 = int(y_2)\n    y_3 = int(y_3)\n    y_4 = int(y_4)\n    y_5 = int(y_5)\n    y_6 = int(y_6)\n    if x_1 < x_2 and x_1 < x_3 and x_1 < x_4:\n        if y_1 < y_2 and y_1 < y_3 and y_1 < y_4:\n            if x_1 < x_2 and x_1 < x_3 and x_1 < x_4:\n                if y_1 < y_2 and y_1 < y_3 and y_1 < y_4:\n                    if x_1 < x_2 and x_1 < x_3 and x_1 < x_4:\n                        if y_1 < y_2 and y_1 < y_3 and y_1 < y_4:\n                            if x_1 < x_2 and x_1 < x_3 and x_1 < x_4:\n                                if y_1 < y_2 and y_1 < y_3 and y_1 < y_4:\n                                    return \"YES\"\n        else:\n            return \"NO\"\n    else:\n        return \"NO\"\n\nprint(solution(\"2 2 4 4\"))\nprint(solution(\"3 3 7 5\"))\nprint(solution(\"5 2 10 5\"))\nprint(solution(\"0 0 1000000 1000000\"))\nprint(solution(\"0 0 499999 1000000\"))\nprint(solution(\"500000 0 1000000 1000000\"))\n"
    },
    {
        "number": 4005,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x, y, x_1, y_1, x_2, y_2, x_3, y_3, x_4, y_4 = map(int, stdin.split())\n\n    if abs(x - x_1) <= abs(y - y_1):\n        if x - x_1 < 0 or x + x_1 >= x_2 - x_1:\n            return 'NO'\n    else:\n        return 'NO'\n"
    },
    {
        "number": 4006,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    answer = 0\n    answer += len(set([int(i) for i in stdin.split()]))\n    return str(answer)\n\n\ndef"
    },
    {
        "number": 4006,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    #return str(list(set(map(int, stdin.split()))))\n    return str(len(set(map(int, stdin.split()))))\n    #return len(set(map(int, stdin.split())))"
    },
    {
        "number": 4006,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    sum = 0\n    while n:\n        sum += n % 10\n        n = n // 10\n\n    if n == 0:\n        return str(sum)\n\n    print(n)\n    print(n % 10)\n\n    return str(sum)\n\n'''\n\ndef"
    },
    {
        "number": 4006,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    def is_reachable(num):\n        \n        num_of_zero = 0\n        for i in range(len(num)):\n            if num[i]!= 0:\n                num_of_zero += 1\n                \n        if num_of_zero < 1:\n            return False\n        else:\n            return True\n\n    n = int(stdin)\n    res = 0\n    for i in range(1, n+1):\n        if is_reachable(str(i)):\n            res += 1\n    \n    return str(res)"
    },
    {
        "number": 4006,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.strip()\n    num_lst = []\n    for i in range(1, int(n)):\n        num_lst.append(i)\n    num_lst = list(set(num_lst))\n    num_lst = sorted(num_lst)\n\n    count = 0\n    for i in range(len(num_lst) - 1):\n        if num_lst[i]!= num_lst[i + 1]:\n            count += 1\n    return str(count)\n\n\n-----Constraints-----\n1 <= n <= 10^5\n\n-----Time Limit (?)-----\nRuntime: 40 ms\nMemory Usage: 16.8 MB\n\n\n-----Constraints-----\nThe solution above is correct.\n\n---my solution---\n\ndef"
    },
    {
        "number": 4006,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, *_ = map(int, stdin)\n\n    def recurse(n):\n        if n == 0:\n            return 1\n        return recurse(n - 1) + recurse(n - 2) + recurse(n - 3) + recurse(n - 4) + recurse(n - 5) + recurse(n - 6) + recurse(n - 7) + recurse(n - 8) + recurse(n - 9) + recurse(n - 10) + recurse(n - 11) + recurse(n - 12) + recurse(n - 13) + recurse(n - 14) + recurse(n - 15) + recurse(n - 16) + recurse(n - 17) + recurse(n - 18) + recurse(n - 19) + recurse(n - 20)\n        \n    return str(recurse(n))\n"
    },
    {
        "number": 4006,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    numbers = [int(i) for i in str(n)]\n    numbers.sort()\n    return str(len(numbers))\n"
    },
    {
        "number": 4006,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def calculate(num):\n        if num == 0:\n            return 0\n        else:\n            num -= 1\n            result = 1 + calculate(num)\n            return result\n\n    def count(index):\n        sum = 0\n        for i in range(index + 1):\n            sum += calculate(i)\n        return sum\n\n    for index in range(10**9):\n        print(count(index))\n\nNote:\n\n1 <= stdin.length <= 1000\nstdin contains only the digits 0-9.\nstdin contains 0,1,2,..., 9.\n\"\"\"\n\nclass Solution:\n    def countReachable(self, n: int) -> int:\n        count = 0\n        for index in range(1, 10**9 + 1):\n            if n - index <= 0:\n                continue\n            if sum(map(lambda x: x!= 0, list(str(index)))) == n - index:\n                count += 1\n        return count"
    },
    {
        "number": 4006,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    print(n)\n    if n == 1 or n == 2:\n        return 1\n    if n % 2 == 0:\n        return n // 2\n    else:\n        return n - 1\n    \n    pass\n\n------Sample Input--------\n\nInput\n100\n\nOutput\n21\n\n\n------Sample Output--------\n\nThe number 20 is reachable from 100, as that is 5.1 and 5.2, as that is 8.\n\n\n\n\n\n-----Tags-----\nli-1\n\n-----Constraints-----\n1 <= n <= 10^5\n\n------Time Limit (Cached)--------\nO(N) O(1)\n\n\n------Space Limit (Cached)--------\nO(1)\n\n\n-----Algorithm-----\n\n1. initialise a stack with all numbers in range of 0 to n, then push the stack[0] into stack.\n2. for each nums in the stack, check if nums is reachable from n or not, if not, add to the new stack and pop from the stack.\n3. if the new stack is empty, then the answer is 1\n4. if the new stack is not empty, then the answer is the number from stack.pop() + 1\n5. if the new stack is empty, then the answer is the number from stack.pop() + 2\n\n\n----Time Complexity----\nO(N)\n\nO(N)\n\nO(N)\n\nO(N)\n\n\n\n----Space Complexity----\nO(N)\n\n\n\n----Constraints----\n1 <= n <= 10^5\n\n------Sample Input--------\n\nInput\n3\n\nOutput\n2\n\n\n------Sample Output--------\n\nThe answer is 2.\n\n------Tutorial----\n\nFor the problem, i is the index.\n\nExample 1:\n\nInput: n = 3\nOutput: 2\nExplanation: We have to push 3 into the stack, then pop from the stack,\nthen we can reach it.\nExample 2:\n\nInput: n = 5\nOutput: 5\nExplanation: We have to push 5 into the stack, then pop from the stack,\nthen we can reach it.\nExample 3:\n\nInput: n = 5\nOutput: 1\nExplanation: We cannot reach it because the number 5 is not reachable from 5.\n\n\n------Problems-----\n\n----Problem 1----\nGiven a positive integer n, count the total number of distinct numbers smaller than n.\n\nInput : n = 3\nOutput : 2\nExplanation : We have to push 3 into the stack, then pop from the stack,\nthen we can reach it.\n\n----Problem 2----\nGiven a positive integer n, count the total number of distinct numbers smaller than or equal to n.\n\nInput : n = 5\nOutput : 2\nExplanation : We have to push 5 into the stack, then pop from the stack,\nthen we can reach it.\n\n----Problem 3----\nGiven a positive integer n, count the total number of distinct numbers smaller than or equal to n.\n\nInput : n = 10\nOutput : 5\nExplanation : We have to push 10 into the stack, then pop from the stack,\nthen we can reach it.\n\n----Problem 4----\nGiven a positive integer n, count the total number of distinct numbers smaller than or equal to n.\n\nInput : n = 4\nOutput : 0\nExplanation : We have to push 4 into the stack, then pop from the stack,\nthen we can reach it.\n\n----Problem 5----\nGiven a positive integer n, count the total number of distinct numbers smaller than or equal to n.\n\nInput : n = 4\nOutput : 3\nExplanation : We have to push 4 into the stack, then pop from the stack,\nthen we can reach it.\n\n----Problem 6----\nGiven a positive integer n, count the total number of distinct numbers smaller than or equal to n.\n\nInput : n = 11\nOutput : 2\nExplanation : We have to push 11 into the stack, then pop from the stack,\nthen we can reach it.\n\n----Problem 7----\nGiven a positive integer n, count the total number of distinct numbers smaller than or equal to n.\n\nInput : n = 1\nOutput : 0\nExplanation : We have to push 1 into the stack, then pop from the stack,\nthen we can reach it.\n\n----Problem 8----\nGiven a positive integer n, count the total number of distinct numbers smaller than or equal to n.\n\nInput : n = 3\nOutput : 1\nExplanation : We have to push 3 into the stack, then pop from the stack,\nthen we can reach it.\n\n----Problem 9----\nGiven a positive integer n, count the total number of distinct numbers smaller than or equal to n.\n\nInput : n = 6\nOutput : 5\nExplanation : We have to push 6 into the stack, then pop from the stack,\nthen we can reach it.\n\n----Problem 10----\nGiven a positive integer n, count the total number of distinct numbers smaller than or equal to n.\n\nInput : n = 4\nOutput : 0\nExplanation : We have to push 4 into the stack, then pop from the stack,\nthen we can reach it.\n\n----Problem 11----\nGiven a positive integer n, count the total number of distinct numbers smaller than or equal to n.\n\nInput : n = 11\nOutput : 2\nExplanation : We have to push 11 into the stack, then pop from the stack,\nthen we can reach it.\n\n----Problem 12----\nGiven a positive integer n, count the total number of distinct numbers smaller than or equal to n.\n\nInput : n = 1\nOutput : 0\nExplanation : We have to push 1 into the stack, then pop from the stack,\nthen we can reach it.\n\n----Problem 13----\nGiven a positive integer n, count the total number of distinct numbers smaller than or equal to n.\n\nInput : n = 2\nOutput : 1\nExplanation : We have to push 2 into the stack, then pop from the stack,\nthen we can reach it.\n\n----Problem 14----\nGiven a positive integer n, count the total number of distinct numbers smaller than or equal to n.\n\nInput : n = 3\nOutput : 2\nExplanation : We have to push 3 into the stack, then pop from the stack,\nthen we can reach it.\n\n----Problem 15----\nGiven a positive integer n, count the total number of distinct numbers smaller than or equal to n.\n\nInput : n = 4\nOutput : 1\nExplanation : We have to push 4 into the stack, then pop from the stack,\nthen we can reach it.\n\n----Problem 16----\nGiven a positive integer n, count the total number of distinct numbers smaller than or equal to n.\n\nInput : n = 6\nOutput : 5\nExplanation : We have to push 6 into the stack, then pop from the stack,\nthen we can reach it.\n\n----Problem 17----\nGiven a positive integer n, count the total number of distinct numbers smaller than or equal to n.\n\nInput : n = 10\nOutput : 2\nExplanation : We have to push 10 into the stack, then pop from"
    },
    {
        "number": 4006,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.split(' ')\n    n = int(n)\n    k = int(k)\n    print(sorted(list(range(n))))\n    return str(len(set(sorted(str(n)))) - 1)\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4007,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    print(a)\n    print(b)\n    \n    for i in range(b):\n        print(i, end = \" \")\n    print()\n    for i in range(b, a):\n        print(i, end = \" \")\n    print()\n    for i in range(a, b):\n        print(i, end = \" \")\n    print()\n    for i in range(a, b):\n        print(i, end = \" \")\n    print()\n    for i in range(b, a):\n        print(i, end = \" \")\n    print()\n    for i in range(a, b):\n        print(i, end = \" \")\n    print()\n    for i in range(b, a):\n        print(i, end = \" \")\n    print()\n    for i in range(a, b):\n        print(i, end = \" \")\n    print()\n    for i in range(a, b):\n        print(i, end = \" \")\n    print()\n    for i in range(a, b):\n        print(i, end = \" \")\n    print()\n    for i in range(b, a):\n        print(i, end = \" \")\n    print()\n    for i in range(a, b):\n        print(i, end = \" \")\n    print()\n    for i in range(b, a):\n        print(i, end = \" \")\n    print()\n    for i in range(a, b):\n        print(i, end = \" \")\n    print()\n    for i in range(b, a):\n        print(i, end = \" \")\n    print()\n    for i in range(a, b):\n        print(i, end = \" \")\n    print()\n    for i in range(b, a):\n        print(i, end = \" \")\n    print()\n    for i in range(a, b):\n        print(i, end = \" \")\n    print()\n    for i in range(a, b):\n        print(i, end = \" \")\n    print()\n    for i in range(b, a):\n        print(i, end = \" \")\n    print()\n    for i in range(b, a):\n        print(i, end = \" \")\n    print()\n    for i in range(a, b):\n        print(i, end = \" \")\n    print()\n    for i in range(b, a):\n        print(i, end = \" \")\n    print()\n    for i in range(a, b):\n        print(i, end = \" \")\n    print()\n    for i in range(b, a):\n        print(i, end = \" \")\n    print()\n    for i in range(a, b):\n        print(i, end = \" \")\n    print()\n    for i in range(b, a):\n        print(i, end = \" \")\n    print()\n    for i in range(a, b):\n        print(i, end = \" \")\n    print()\n    for i in range(a, b):\n        print(i, end = \" \")\n    print()\n    for i in range(b, a):\n        print(i, end = \" \")\n    print()\n    for i in range(a, b):\n        print(i, end = \" \")\n    print()\n    for i in range(b, a):\n        print(i, end = \" \")\n    print()\n    for i in range(a, b):\n        print(i, end = \" \")\n    print()\n    for i in range(b, a):\n        print(i, end = \" \")\n    print()\n    for i in range(a, b):\n        print(i, end = \" \")\n    print()\n    for i in range(b, a):\n        print(i, end = \" \")\n    print()\n    for i in range(a, b):\n        print(i, end = \" \")\n    print()\n    for i in range(b, a):\n        print(i, end = \" \")\n    print()\n    for i in range(a, b):\n        print(i, end = \" \")\n    print()\n    for i in range(b, a):\n        print(i, end = \" \")\n    print()\n    for i in range(a, b):\n        print(i, end = \" \")\n    print()\n    for i in range(b, a):\n        print(i, end = \" \")\n    print()\n    for i in range(a, b):\n        print(i, end = \" \")\n    print()\n    for i in range(b, a):\n        print(i, end = \" \")\n    print()\n    for i in range(a, b):\n        print(i, end = \" \")\n    print()\n    for i in range(b, a):\n        print(i, end = \" \")\n    print()\n    for i in range(a, b):\n        print(i, end = \" \")\n    print()\n    for i in range(b, a):\n        print(i, end = \" \")\n    print()\n    for i in range(a, b):\n        print(i, end = \" \")\n    print()\n    for i in range(b, a):\n        print(i, end = \" \")\n    print()\n    for i in range(a, b):\n        print(i, end = \" \")\n    print()\n    for i in range(b, a):\n        print(i, end = \" \")\n    print()\n    for i in range(a, b):\n        print(i, end = \" \")\n    print()\n    for i in range(b, a):\n        print(i, end = \" \")"
    },
    {
        "number": 4007,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    f_list = list(map(int, stdin.strip().split()))\n    # f_list = f_list[:n]\n    sums = {}\n    for f in f_list:\n        if f not in sums:\n            sums[f] = 1\n        else:\n            sums[f] += 1\n    # print(sums)\n    max_sums = max(sums.values())\n    # print(max_sums)\n    sum_list = []\n    for f in sums:\n        sum_list.append(f)\n        if sums[f] == max_sums:\n            # print(f)\n            sum_list.sort()\n            break\n    # print(sum_list)\n    answer = sum(sum_list) - 1\n    # print(answer)\n    return str(answer)\n"
    },
    {
        "number": 4007,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    friends = [int(i) for i in stdin.split()]\n    answer = 0\n    friends.sort()\n    idx = 1\n    while idx < len(friends):\n        if friends[idx] == friends[idx-1] and idx!= 0:\n            answer += 1\n            idx += 1\n        elif friends[idx] == friends[idx-1]:\n            answer += 1\n            idx += 1\n            \n        else:\n            answer += 1\n            idx += 1\n    return answer"
    },
    {
        "number": 4007,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, f = list(map(int, stdin.split()))\n    assert n > 0 and f > 0\n    n -= 1\n    \n    f_dict = dict()\n    for i in range(n):\n        f_i = int(stdin.split()[i])\n        f_i -= 1\n        if f_i in f_dict:\n            f_dict[f_i] += 1\n        else:\n            f_dict[f_i] = 1\n    \n    answer = \"\"\n    for key in sorted(f_dict):\n        if f_dict[key] > 1:\n            answer += str(key) + \" \"\n    \n    return answer\n\"\"\"\n\nclass Solution:\n    def __init__(self, n):\n        self.n = n\n        self.f_dict = dict()\n        self.f_dict[0] = 1\n    \n    def fill_dict(self, friend_dict):\n        \"\"\"\n        :type friend_dict: List[int]\n        :rtype: None Do not return anything, modify friend_dict in-place instead.\n        \"\"\"\n        for i in range(self.n):\n            if friend_dict[i] not in self.f_dict:\n                self.f_dict[friend_dict[i]] = 1\n            else:\n                self.f_dict[friend_dict[i]] += 1\n    \n    def get_nf(self, friend_dict):\n        \"\"\"\n        :type friend_dict: List[int]\n        :rtype: None Do not return anything, modify friend_dict in-place instead.\n        \"\"\"\n        self.fill_dict(friend_dict)\n        for i in range(self.n):\n            if friend_dict[i] not in self.f_dict:\n                self.f_dict[friend_dict[i]] = 1\n            else:\n                self.f_dict[friend_dict[i]] -= 1\n    \n    def get_nf_recursive(self, friend_dict):\n        \"\"\"\n        :type friend_dict: List[int]\n        :rtype: None Do not return anything, modify friend_dict in-place instead.\n        \"\"\"\n        for i in range(self.n):\n            if friend_dict[i] not in self.f_dict:\n                self.f_dict[friend_dict[i]] = 1\n            else:\n                self.f_dict[friend_dict[i]] -= 1\n                if friend_dict[i] in self.f_dict:\n                    self.f_dict[friend_dict[i]] += 1\n                else:\n                    self.f_dict[friend_dict[i]] = 1\n        \n        for key in sorted(self.f_dict):\n            if self.f_dict[key] > 1:\n                self.f_dict[key] -= 1\n    \n    def get_nf_recursive_2(self, friend_dict):\n        \"\"\"\n        :type friend_dict: List[int]\n        :rtype: None Do not return anything, modify friend_dict in-place instead.\n        \"\"\"\n        if len(friend_dict) == self.n:\n            self.f_dict = friend_dict\n            return\n        for i in range(self.n):\n            if friend_dict[i] not in self.f_dict:\n                self.f_dict[friend_dict[i]] = 1\n            else:\n                self.f_dict[friend_dict[i]] -= 1\n                self.f_dict[friend_dict[i]] += self.get_nf_recursive(friend_dict)\n    \n    def get_nf_recursive_3(self, friend_dict):\n        \"\"\"\n        :type friend_dict: List[int]\n        :rtype: None Do not return anything, modify friend_dict in-place instead.\n        \"\"\"\n        for i in range(self.n):\n            if friend_dict[i] not in self.f_dict:\n                self.f_dict[friend_dict[i]] = 1\n            else:\n                self.f_dict[friend_dict[i]] -= 1\n                if friend_dict[i] in self.f_dict:\n                    self.f_dict[friend_dict[i]] += 1\n                else:\n                    self.f_dict[friend_dict[i]] = 1\n                    self.f_dict[friend_dict[i]] += self.get_nf_recursive_3(friend_dict)\n\n    def get_nf_recursive_4(self, friend_dict):\n        \"\"\"\n        :type friend_dict: List[int]\n        :rtype: None Do not return anything, modify friend_dict in-place instead.\n        \"\"\"\n        self.f_dict = friend_dict\n        self.get_nf_recursive_3(friend_dict)"
    },
    {
        "number": 4007,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(i) for i in stdin.split()]\n    i = 0\n    j = 0\n    answer = []\n    while i < len(a):\n        if a[i] < 0:\n            j += a[i]\n            i += 1\n        else:\n            j += a[i]\n            answer.append(j)\n            i += 1\n            j = 0\n    return '\\n'.join(map(str, answer))\n\n\n-----Constraints-----\n0 < n <= 10^5\n\n\"\"\"\n\nclass Solution:\n    def fillInUnknown(self, n: int, f: List[int]) -> int:\n        if n < 1:\n            return len(f)\n        \n        f.sort()\n        cnt = n\n        visited = [False] * (n + 1)\n        for i in f:\n            if not visited[i]:\n                visited[i] = True\n                cnt -= 1\n                if cnt == 0:\n                    return i + 1\n        return -1"
    },
    {
        "number": 4007,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip().split()[0])\n    nf = [0] * n\n    for i in range(n):\n        nf[i] = int(stdin.strip().split()[i + 1])\n    nf.sort()\n    for i in range(n):\n        if nf[i] == 0:\n            if i == 0:\n                if nf[i + 1] == 0:\n                    return str(nf[i] + 1)\n                else:\n                    return str(nf[i] + 1)\n            elif i == n - 1:\n                if nf[i - 1] == 0:\n                    return str(nf[i])\n                else:\n                    return str(nf[i])\n            else:\n                if nf[i - 1] == 0:\n                    return str(nf[i - 1])\n                else:\n                    return str(nf[i])\n        elif nf[i] == 1:\n            if i == n - 1:\n                return str(nf[i])\n            else:\n                if nf[i + 1] == 0:\n                    return str(nf[i + 1])\n                else:\n                    return str(nf[i + 1])\n        elif nf[i] == 2:\n            if i == 0:\n                if nf[i + 1] == 0:\n                    return str(nf[i] + 1)\n                else:\n                    return str(nf[i] + 1)\n            elif i == n - 1:\n                if nf[i - 1] == 0:\n                    return str(nf[i - 1])\n                else:\n                    return str(nf[i - 1])\n            else:\n                if nf[i - 1] == 0:\n                    return str(nf[i])\n                else:\n                    return str(nf[i])\n        elif nf[i] == 3:\n            if i == 0:\n                if nf[i + 1] == 0:\n                    return str(nf[i] + 1)\n                else:\n                    return str(nf[i] + 1)\n            elif i == n - 1:\n                if nf[i - 1] == 0:\n                    return str(nf[i - 1])\n                else:\n                    return str(nf[i - 1])\n            else:\n                if nf[i - 1] == 0:\n                    return str(nf[i - 1])\n                else:\n                    return str(nf[i])\n        else:\n            return str(nf[i])\n"
    },
    {
        "number": 4007,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    f = []\n    for i in range(n):\n        a, b = map(int, stdin.split())\n        f.append(a)\n        f.append(b)\n    for i in range(k):\n        nf = numpy.random.randint(0, n-1, size=2)\n        f[nf[0]], f[nf[1]] = f[nf[1]], f[nf[0]]\n    return''.join(map(str, f))"
    },
    {
        "number": 4007,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.rstrip())\n    friends = [int(stdin.rstrip()) for i in range(n)]\n    friends.sort()\n    nf = 1\n    for i in range(n-1):\n        if friends[i]!= friends[i+1]:\n            nf += 1\n    for i in range(n-1):\n        if friends[i] == friends[i+1]:\n            nf += 1\n    nf = nf*2\n    print(nf)\n    print(friends)\n    return str(nf)\n\nprint(solution(\"5 3 0 0\"))\n"
    },
    {
        "number": 4007,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip().split()[0])\n    friends = [int(stdin.strip().split()[i]) for i in range(1, n + 1)]\n    for friend in friends:\n        if friend == 0:\n            for friend in friends:\n                if friend!= friend:\n                    break\n            else:\n                print(friend)\n        elif friend == 1:\n            for friend in friends:\n                if friend!= friend:\n                    break\n            else:\n                print(friend)\n        else:\n            for friend in friends:\n                if friend!= friend:\n                    break\n            else:\n                print(friend)\n    return ''\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4007,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    friend = [list(map(int, stdin.split())) for _ in range(n)]\n    \n    #friend = [list(map(int, stdin.split())) for _ in range(n)]\n    \n    # friend = [[list(map(int, stdin.split())) for _ in range(n)] for _ in range(n)]\n    \n    def friend_val(f):\n        def _f(i):\n            return f[i][0]\n        return _f\n    \n    def friend_sum(f):\n        def _f(i):\n            return f[i][1]\n        return _f\n    \n    def friend_max(f):\n        def _f(i):\n            return f[i][1]\n        return _f\n    \n    def friend_min(f):\n        def _f(i):\n            return f[i][1]\n        return _f\n    \n    def friend_mod(f):\n        def _f(i):\n            return f[i][2]\n        return _f\n    \n    def friend_sum_mod(f):\n        def _f(i):\n            return f[i][1] + f[i][2]\n        return _f\n    \n    def friend_max_mod(f):\n        def _f(i):\n            return f[i][1] + f[i][2]\n        return _f\n    \n    def friend_mod_mod(f):\n        def _f(i):\n            return f[i][1] + f[i][2]\n        return _f\n    \n    def friend_sum_mod_mod(f):\n        def _f(i):\n            return f[i][1] + f[i][2] + f[i][3]\n        return _f\n    \n    def friend_max_mod_mod(f):\n        def _f(i):\n            return f[i][1] + f[i][2] + f[i][3]\n        return _f\n    \n    def friend_mod_mod_mod(f):\n        def _f(i):\n            return f[i][1] + f[i][2] + f[i][3]\n        return _f\n    \n    def friend_sum_mod_mod_mod(f):\n        def _f(i):\n            return f[i][1] + f[i][2] + f[i][3] + f[i][4]\n        return _f\n    \n    def friend_max_mod_mod_mod(f):\n        def _f(i):\n            return f[i][1] + f[i][2] + f[i][3] + f[i][4] + f[i][5]\n        return _f\n    \n    \n    def friend_val(i):\n        return [i, friend_sum(friend), friend_max(friend), friend_min(friend), friend_mod(friend), friend_sum_mod(friend), friend_mod_mod(friend), friend_mod_mod_mod(friend), friend_sum_mod_mod(friend), friend_max_mod_mod(friend), friend_mod_mod_mod(friend), friend_mod_mod_mod_mod(friend), friend_mod_mod_mod_mod(friend), friend_sum_mod_mod_mod(friend), friend_mod_mod_mod_mod(friend), friend_mod_mod_mod_mod(friend), friend_mod_mod_mod_mod(friend), friend_sum_mod_mod_mod(friend), friend_mod_mod_mod_mod(friend), friend_mod_mod_mod_mod(friend), friend_mod_mod_mod_mod(friend), friend_mod_mod_mod_mod(friend), friend_mod_mod_mod_mod(friend), friend_mod_mod_mod_mod(friend), friend_mod_mod_mod_mod(friend), friend_mod_mod_mod_mod(friend), friend_mod_mod_mod_mod(friend), friend_mod_mod_mod_mod(friend), friend_mod_mod_mod_mod(friend), friend_mod_mod_mod_mod(friend), friend_mod_mod_mod_mod(friend), friend_mod_mod_mod_mod(friend), friend_mod_mod_mod_mod(friend), friend_mod_mod_mod_mod(friend), friend_mod_mod_mod_mod(friend), friend_mod_mod_mod_mod(friend)]\n    \n    def friend_p(f):\n        return [f[i][0] + friend_val(i)[0] for i in range(n)]\n    \n    def friend_p_mod(f):\n        return [f[i][0] + friend_val(i)[0] for i in range(n)] + [f[i][1] + friend_mod(f)[0] for i in range(n)] + [f[i][2] + friend_mod_mod(f)[0] for i in range(n)] + [f[i][3] + friend_mod_mod(f)[0] for i in range(n)] + [f[i][4] + friend_mod_mod(f)[0] for i in range(n)] + [f[i][5] + friend_mod_mod(f)[0] for i in range(n)] + [f[i][6] + friend_mod_mod(f)[0] for i in range(n)] + [f[i][7] + friend_mod_mod(f)[0] for i in range(n)] + [f[i][8] + friend_mod_mod(f)[0] for i in range(n)] + [f[i][9] + friend_mod_mod(f)[0] for i in range(n)] + [f[i][10] + friend_mod_mod(f)[0] for i in range(n)] + [f[i][11] + friend_mod_mod(f)[0] for i in range"
    },
    {
        "number": 4008,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    def color(a, n, k, color):\n        if n == 0 or k == 0:\n            return\n        if a[n-1] == color:\n            color(a, n-1, k, color)\n            return\n        for i in range(n-1, k):\n            if a[i] == color:\n                color(a, i+1, k, color)\n                return\n        if color(a, n-1, k, color) == color(a, n-1, k, color):\n            color(a, n-1, k, color)\n            color(a, n-1, k, color)\n        else:\n            color(a, n-1, k, color)\n            color(a, n-1, k, color)\n\n    color(a, n, k, 0)\n    return \"YES\" if n == k else \"NO\"\n"
    },
    {
        "number": 4008,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    c = [0 for _ in range(n+1)]\n    c[1] = 1\n    for i in range(2, n+1):\n        c[i] = (c[i-1]+1) % 2\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            c[i] += c[i-1]\n            c[i] %= 2\n            c[i] %= k\n    if c[n] == 0:\n        return \"NO\"\n    else:\n        return \"YES\"\n\nprint(solution(input()))\n\n##### \ud574\uacb0 \ndef"
    },
    {
        "number": 4008,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = []\n    for _ in range(n):\n        a.append(int(stdin))\n    # print(a)\n    if k >= n:\n        return 'NO'\n    a = sorted(a)\n    # print(a)\n    # print(n)\n    # print(k)\n    # print(a[:n])\n    # print(a[n:])\n    # print(a[:k])\n    # print(a[k:])\n    i = 0\n    j = k\n    while j < len(a):\n        # print(i, j, a[i], a[j])\n        if a[i] < a[j]:\n            i += 1\n        elif a[i] > a[j]:\n            j += 1\n        else:\n            i = a[i]\n            j += 1\n        if j == k:\n            j = k\n            i += 1\n    # print(i, j)\n    return 'YES' if i == n else 'NO'\n\ndef"
    },
    {
        "number": 4008,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    if k == len(a):\n        return \"NO\"\n    if k > len(a):\n        return \"NO\"\n    colors = [i+1 for i in range(n)]\n    for i in range(n):\n        for j in range(k, n):\n            if a[i] == a[j] or colors[i]!= colors[j]:\n                colors[i] = min(colors[i], colors[j])\n    return \"YES\" if colors[n-1] == colors[n-2] and colors[n-1] == colors[n-3] else \"NO\"\n\"\"\"\n\n\n\ndef"
    },
    {
        "number": 4008,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = [int(x) for x in stdin.split()]\n    answer = \"YES\"\n    \n    if n == 1:\n        if a[0] == 1:\n            answer = \"YES\"\n        elif a[0] == 2:\n            answer = \"NO\"\n        elif a[0] == 3:\n            answer = \"NO\"\n    elif n == 2:\n        if a[1] == 1:\n            answer = \"NO\"\n        elif a[1] == 2:\n            answer = \"NO\"\n        elif a[1] == 3:\n            answer = \"NO\"\n    elif n == 3:\n        if a[2] == 1:\n            answer = \"NO\"\n        elif a[2] == 2:\n            answer = \"NO\"\n        elif a[2] == 3:\n            answer = \"NO\"\n    elif n == 4:\n        if a[3] == 1:\n            answer = \"NO\"\n        elif a[3] == 2:\n            answer = \"NO\"\n        elif a[3] == 3:\n            answer = \"NO\"\n    else:\n        if a[4] == 1:\n            answer = \"NO\"\n        elif a[4] == 2:\n            answer = \"NO\"\n        elif a[4] == 3:\n            answer = \"NO\"\n        elif a[4] == 4:\n            answer = \"NO\"\n    return answer"
    },
    {
        "number": 4008,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n    def solve(n, k, a):\n        if n == k == 2:\n            return \"NO\"\n        elif n == 2:\n            return \"YES\"\n        if n == 1:\n            return str(a[0])\n        if a[n - 1] == a[n - 1] == a[n - 2] == a[n - 2]:\n            return solve(n - 1, k, a[:n - 1])\n        return solve(n - 1, k, a[n - 1:n - 1 + k])\n    answer = solve(int(stdin), int(stdin), a)\n    return answer\n\n\nExplanation\nInput\n4 2\n1 2 2 3\n\nOutput\nYES\n1 1 2 2\n\nInput\n5 2\n3 2 1 2 3\n\nOutput\nNO\n\nInput\n5 2\n3 2 1 2 3\n\nOutput\nNO\n\nInput\n5 2\n2 1 1 2 3\n\nOutput\nYES\n2 1 1 2 1\n\nInput\n5 2\n1 1 1 1 1\n\nOutput\nYES\n1 1 1 1 1\n\nInput\n5 2\n3 2 1 2 1\n\nOutput\nNO\n"
    },
    {
        "number": 4008,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n,k = map(int,stdin.split())\n    \n    arr = []\n    for i in range(n):\n        arr.append(int(stdin.split()[i]))\n        \n    for i in range(k):\n        for j in range(i+1,k):\n            if arr[i]!= arr[j]:\n                break\n            if j == k - 1:\n                return \"NO\"\n        \n    return \"YES\"\n\n-----Constraints-----\n\n1 <= n <= 100\n\n1 <= k <= n\n\n1 <= a_i <= 5000\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4008,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    if n*k > len(a):\n        return 'NO'\n    elif n*k == len(a):\n        return 'YES'\n    elif k <= n:\n        return 'YES'\n    else:\n        a_prev = a.copy()\n        for i in range(n-1):\n            a_prev[i] = a[i]\n            a_prev[i+1] = a[i+1]\n            a[i] = a[i+1]\n        a_prev[i+1] = a[i]\n        for i in range(n-1, 0, -1):\n            a[i-1] = a_prev[i]\n            a[i] = a_prev[i-1]\n            a_prev[i] = a[i-1]\n        return 'YES'\n        \n        \n"
    },
    {
        "number": 4008,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.strip())\n    n = int(stdin.strip())\n    a = []\n    for i in range(n):\n        a.append(int(stdin.strip()))\n    \n    result = \"NO\"\n    for i in range(1, k+1):\n        color = [0]*i\n        for j in range(len(a)):\n            color[a[j]-1] = 1\n        result = \"YES\" if color[0]==color[1] and color[1]!=color[2] and color[2]!=color[3] and color[3]!=color[4] and color[4]!=color[5] else result\n    return result\n\ndef"
    },
    {
        "number": 4008,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    if n == 1 and k == 1:\n        return \"NO\"\n    if n == 1 and k == 2:\n        return \"YES\"\n    if n == 2 and k == 2:\n        return \"YES\"\n    if n == 2 and k == 1:\n        return \"YES\"\n    if n == 2 and k == 1:\n        return \"NO\"\n    if n == 2 and k == 1:\n        return \"NO\"\n    if n == 2 and k == 2:\n        return \"NO\"\n    if n == 2 and k == 2:\n        return \"NO\"\n    if n == 2 and k == 3:\n        return \"YES\"\n    if n == 2 and k == 3:\n        return \"NO\"\n    if n == 2 and k == 4:\n        return \"YES\"\n    if n == 2 and k == 4:\n        return \"YES\"\n    if n == 2 and k == 5:\n        return \"YES\"\n    if n == 2 and k == 5:\n        return \"NO\"\n    if n == 2 and k == 6:\n        return \"YES\"\n    if n == 2 and k == 6:\n        return \"YES\"\n    if n == 2 and k == 7:\n        return \"YES\"\n    if n == 2 and k == 7:\n        return \"NO\"\n    if n == 2 and k == 8:\n        return \"YES\"\n    if n == 2 and k == 8:\n        return \"NO\"\n    if n == 2 and k == 9:\n        return \"YES\"\n    if n == 2 and k == 9:\n        return \"NO\"\n    if n == 3 and k == 1:\n        return \"YES\"\n    if n == 3 and k == 2:\n        return \"YES\"\n    if n == 3 and k == 3:\n        return \"YES\"\n    if n == 3 and k == 4:\n        return \"YES\"\n    if n == 3 and k == 5:\n        return \"NO\"\n    if n == 3 and k == 6:\n        return \"NO\"\n    if n == 3 and k == 7:\n        return \"NO\"\n    if n == 3 and k == 8:\n        return \"NO\"\n    if n == 3 and k == 9:\n        return \"NO\"\n    if n == 3 and k == 10:\n        return \"YES\"\n    if n == 3 and k == 11:\n        return \"YES\"\n    if n == 3 and k == 12:\n        return \"YES\"\n    if n == 3 and k == 13:\n        return \"NO\"\n    if n == 3 and k == 14:\n        return \"YES\"\n    if n == 3 and k == 15:\n        return \"NO\"\n    if n == 3 and k == 16:\n        return \"YES\"\n    if n == 3 and k == 17:\n        return \"YES\"\n    if n == 3 and k == 18:\n        return \"YES\"\n    if n == 3 and k == 19:\n        return \"YES\"\n    if n == 3 and k == 20:\n        return \"YES\"\n    if n == 3 and k == 21:\n        return \"YES\"\n    if n == 3 and k == 22:\n        return \"YES\"\n    if n == 3 and k == 23:\n        return \"YES\"\n    if n == 3 and k == 24:\n        return \"NO\"\n    if n == 3 and k == 25:\n        return \"YES\"\n    if n == 3 and k == 26:\n        return \"NO\"\n    if n == 3 and k == 27:\n        return \"YES\"\n    if n == 3 and k == 28:\n        return \"YES\"\n    if n == 3 and k == 29:\n        return \"NO\"\n    if n == 3 and k == 30:\n        return \"YES\"\n    if n == 3 and k == 31:\n        return \"NO\"\n    if n == 3 and k == 32:\n        return \"YES\"\n    if n == 3 and k == 33:\n        return \"YES\"\n    if n == 3 and k == 34:\n        return \"YES\"\n    if n == 3 and k == 35:\n        return \"YES\"\n    if n == 3 and k == 36:\n        return \"YES\"\n    if n == 3 and k == 37:\n        return \"NO\"\n    if n == 3 and k == 38:\n        return \"YES\"\n    if n == 3 and k == 39:\n        return \"NO\"\n    if n == 3 and k == 40:\n        return \"YES\"\n    if n == 3 and k == 41:\n        return \"NO\"\n    if n == 3 and k == 42:\n        return \"YES\"\n    if n == 3 and k == 43:\n        return \"YES\"\n    if n == 3 and k == 44:\n        return \"YES\"\n    if n == 3 and k == 45:\n        return \"YES\"\n    if n == 3 and k == 46:\n        return \"NO\"\n    if n == 3 and k == 47:\n        return \"YES\"\n    if n == 3 and k == 48:\n        return \"NO\"\n    if n == 3 and k == 49:\n        return \"YES\"\n    if n == 3 and k == 50:\n        return \"NO\"\n    if n == 4 and k == 1:\n        return \"YES\"\n    if n == 4 and k == 2:\n        return \"YES\"\n    if n == 4 and k == 3:\n        return \"YES\"\n    if n == 4 and k == 4:\n        return \"YES\"\n    if n == 4 and k == 5:\n        return \"NO\"\n    if n == 4 and k == 6:\n        return \"NO\"\n    if n == 4 and k == 7:\n        return \"YES\"\n    if n == 4 and k == 8:\n        return \"YES\"\n    if n == 4 and k == 9:\n        return \"NO\"\n    if n == 4 and k == 10:\n        return \"YES\"\n    if n == 4 and k == 11:\n        return \"YES\"\n    if n == 4 and k == 12:\n        return \"NO\"\n    if n == 4 and k == 13:\n        return \"NO\"\n    if n == 4 and k == 14:\n        return \"YES\"\n    "
    },
    {
        "number": 4009,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    num_in = stdin.split()\n    n, x, y = int(num_in[0]), int(num_in[1]), int(num_in[2])\n    min_rem = 10**y\n    for _ in range(n):\n        rem = (y%10)*10\n        y = y//10\n        x = x%10\n        if x==0:\n            x=10\n        min_rem = min(min_rem, abs(10**(y-x)-10**x))\n    return str(min_rem)\n\n--------------------------------------------------------------------\n'''\n\nn, x, y = list(map(int, input().split()))\nprint(solution(input()))\n"
    },
    {
        "number": 4009,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x, y = map(int, stdin.split(' '))\n    if n == x:\n        if y % 10 == 0:\n            return str(y)\n        return ''\n    if y == 0:\n        return str(n)\n    if n == x:\n        return str(x)\n    if n % 10 == y:\n        return str(n//10*10+x)\n    return str(n//10*10+x) + solution(str(n//10*10+y))\n\ndef"
    },
    {
        "number": 4009,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split())\n    if n % x!= 0:\n        return str(x) +'' + solution(stdin)\n    if n % y!= 0:\n        return str(y) +'' + solution(stdin)\n    return solution(stdin)\n\"\"\"\nn, x, y = map(int, input().split())\n\nresult =''.join(sorted(map(str, range(x, n + x + 1))))\n\nresult +='' +''.join(map(str, range(x, n + x + 1)))\n\nresult +='' +''.join(map(str, range(x, n + x + 1)))\n\nresult +='' +''.join(map(str, range(n + x, n + x + 1)))\n\nprint(result)\n"
    },
    {
        "number": 4009,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = list(map(int, stdin.split()))\n    remainder = 10 ** y - 10 ** x\n    num = 10 ** y * 10 ** x\n    if remainder % num!= 0:\n        return str(remainder % num)\n    return str(remainder // num)\n"
    },
    {
        "number": 4009,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n        n, x, y = map(int, stdin.split())\n        # in py3, str(x) == str(n)\n        if x < y:\n            x, y = y, x\n        # in py2, str(x) == str(n)\n        # print(type(n))\n        ans = 0\n        if x == 0:\n            ans += 1\n            if y % 10 == 0:\n                ans += 1\n                # print(y % 10)\n        if y % 10!= 0:\n            ans += 1\n            # print(y % 10)\n            if x % 10 == 0:\n                ans += 1\n        return str(ans)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4009,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split())\n    if x == n:\n        return str(10 ** y - 1)\n    return solution(stdin)\n\ndef"
    },
    {
        "number": 4009,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split())\n    m = 10**len(stdin)\n    remainder = 10**len(stdin) - m % m\n    while remainder > 0:\n        print(remainder)\n        remainder = 10**(len(stdin)-1) - remainder % 10**len(stdin)\n    print(remainder)\n    \n"
    },
    {
        "number": 4009,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = list(map(int, stdin.split()))\n    powx = 10**x\n    powy = 10**y\n    powxy = powx*powy\n    while powxy % 10**x!= 0 or powxy % 10**y!= 0:\n        if powxy % 10**x == 0:\n            powxy = powxy // 10**x\n        elif powxy % 10**y == 0:\n            powxy = powxy // 10**y\n        else:\n            return str(powxy)\n    return str(powxy)\n"
    },
    {
        "number": 4009,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split())\n    m = 10**(n-1)\n    if n % m == 0:\n        return str(x*m + y)\n    else:\n        return 'No'\n\nPrint\nNo\n\nExplanation\n\nThere are no operations that can make the number having remainder $10^y$ modulo $10^x$.\n\nIf the sum of all numbers to get the remainder is less than or equal to $10^y$, then the number has remainder $10^y$, in that case, we can apply the operations we saw just before.\n\nIf the sum of all numbers to get the remainder is greater than $10^y$, then the number is not possible because we cannot apply the operations before or after that number.\n\nYou cannot apply any operations because the remainder $10^y$ can be 0 or 1.\n\n\n\nInput\n\n11 5 2\n11010100101\n\nOutput\n\n3\n\nInput\n\n11 5 1\n11010100101\n\nOutput\n\n1\n\n\"\"\"\n"
    },
    {
        "number": 4009,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split())\n    x = 10**x\n    y = 10**y\n    \n    return str(x%y).count(\"0\")+str(x%y).count(\"1\")\n"
    },
    {
        "number": 4010,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, k = map(int, stdin.split())\n    a = [int(stdin) for _ in range(n)]\n    \n    def check(a, n):\n        for i in range(n):\n            if i < n - k:\n                c = a[i]\n                for j in range(i + 1, n):\n                    if a[j] == c:\n                        return False\n                \n                if a[i]!= c:\n                    return False\n        return True\n    \n    if check(a, n):\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 4010,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n,k = map(int,stdin.split())\n    #use set to store the elements\n    a = set()\n    for i in range(n):\n        a.add(int(stdin[i]))\n    m = int(stdin[-1])\n    #get the first half of the array\n    for i in range(n,m,-k):\n        a.add(int(stdin[i]))\n    #check if the array is a palindrome\n    if len(a) >= k:\n        #get the last half of the array\n        for i in range(m,n-k,k):\n            if a == set(range(i-k,i+k+1)):\n                return \"YES\"\n        return \"NO\"\n    return \"NO\""
    },
    {
        "number": 4010,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    for t in range(int(stdin.strip())):\n        n,a=map(int,stdin.strip().split())\n        if n==0:\n            print(\"YES\")\n        else:\n            for i in range(n):\n                a[i]=list(a[i])\n            palindrome=True\n            for i in range(n-3):\n                if palindrome==True:\n                    if a[i]==a[i+1]==a[i+2]==a[i+3]:\n                        palindrome=False\n                else:\n                    if a[i]==a[i+1]==a[i+2]:\n                        palindrome=True\n            if palindrome==True:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n                \n                \n                \n"
    },
    {
        "number": 4010,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n        a = list(stdin.split(' '))\n        if len(a)==1:\n            return 'YES'\n        elif len(a)==2:\n            return 'NO'\n        else:\n            return solution(a[1])+\"YES\"\n"
    },
    {
        "number": 4010,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    nums = list(map(int, stdin.split()))\n    left = right = 0\n    for num in nums:\n        while left < n and right < m and nums[right] > nums[left]:\n            right += 1\n        while left < n and nums[left] <= nums[right]:\n            left += 1\n        right -= 1\n    return \"YES\" if (left + right) % 2 == 0 else \"NO\"\n\n\n-----Example-----\nInput\n5\n1 1 2 3 2 3 2\n3\n2 2 3 2 3 2\n4\n3 2 3 1\n10\n1 2 2 2 3 3 3 4 4 5\n\nOutput\nYES\nYES\nNO\nNO\n\n\n-----Note-----\n\nIn the first test case of the example, the array $a$ has a subsequence $[1, 2, 1]$ which is a palindrome.\n\nIn the second test case of the example, the array $a$ has two subsequences of length $3$ which are palindromes: $[2, 3, 2]$ and $[2, 2, 2]$.\n\nIn the third test case of the example, the array $a$ has no subsequences of length at least $3$ which are palindromes.\n\nIn the fourth test case of the example, the array $a$ has one subsequence of length $4$ which is a palindrome: $[1, 2, 2, 1]$ (and has two subsequences of length $3$ which are palindromes: both are $[1, 2, 1]$).\n\nIn the fifth test case of the example, the array $a$ has no subsequences of length at least $3$ which are palindromes.\ndef"
    },
    {
        "number": 4010,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    for i in range(n):\n        if a[i] == a[i+1]:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\n\n\nsolution(\"3\")\n"
    },
    {
        "number": 4010,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\""
    },
    {
        "number": 4010,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def isPalindrome(a, n):\n        if n < 3:\n            return True\n        a = sorted(a)\n        if a[n // 2] == a[n // 2 - 1]:\n            return isPalindrome(a[:n // 2], n // 2) and isPalindrome(a[n // 2 + 1:], n // 2 + 1)\n        else:\n            return False\n\n    for t in range(int(stdin.strip())):\n        n = int(stdin.strip())\n        a = [int(i) for i in stdin.strip().split()]\n        if n % 3 == 0:\n            if isPalindrome(a, n // 3):\n                print('YES')\n            else:\n                print('NO')\n        else:\n            if isPalindrome(a, n // 3):\n                print('YES')\n            else:\n                print('NO')\n"
    },
    {
        "number": 4010,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    for i in range(n):\n        if len(str(a[i])) < 3:\n            return \"NO\"\n    return \"YES\"\n\nn = int(input())\na = list(map(int, input().split()))\nprint(solution(n))\n\n'''\n    def isPalindrome(self, s: str) -> bool:\n        if len(s) == 1:\n            return True\n        else:\n            temp = s[0]\n            if s[1]!= s[-1]:\n                return False\n            for i in range(2, len(s)):\n                if s[i]!= temp:\n                    return False\n                temp = s[i]\n            return True\n\n    print(isPalindrome(self, 'a'))\n'''"
    },
    {
        "number": 4010,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lst = []\n    for _ in range(int(stdin.strip())):\n        lst += list(map(int, stdin.split()))\n    \n    lst = list(set(lst))\n    lst.sort()\n    for i in range(len(lst) - 2):\n        if lst[i] + lst[i+1] == lst[i+2]:\n            return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 4011,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip().split()[0])\n    a = [int(stdin.strip().split()[i]) for i in range(n)]\n    f = lambda x: f(x % 9 + 1)\n    a_temp = []\n    for i in a:\n        a_temp.append(f(i))\n    for i in range(1, 10):\n        a_temp[n - 1 - i] += i\n    if max(a_temp) == 9:\n        return '9'\n    else:\n        return str(max(a_temp))\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4011,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = input().split()\n    f = [int(i) for i in stdin.split()]\n    a = list(map(int,a))\n    b = list(map(int,b))\n    i = 0\n    while i < len(a):\n        if i+a[i] >= len(b):\n            break\n        if b[i+a[i]] == 0:\n            i += 1\n            continue\n        s = ''\n        while i+a[i] < len(b) and b[i+a[i]]!= 0:\n            s += str(b[i+a[i]])\n            i += a[i]\n        if int(s[::-1]) > int(f[i]):\n            f[i] = int(s[::-1])\n    i = 0\n    while i < len(b):\n        if i+b[i] >= len(a):\n            break\n        s = ''\n        while i+b[i] < len(a) and a[i+b[i]]!= 0:\n            s += str(a[i+b[i]])\n            i += b[i]\n        if int(s[::-1]) > int(f[i]):\n            f[i] = int(s[::-1])\n    return max(f)\n\n------------------OUTPUT------------------\n\n5\n3\n1 2 5 4 6 6 3 1 9\n\n8\n\n------------------INPUT------------------\n\n4\n1 2 3 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1"
    },
    {
        "number": 4011,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = []\n    for _ in range(int(stdin)):\n        a.append(int(stdin.strip()))\n    a = sorted(a)\n    f = dict()\n    for i in range(1, len(a)):\n        f[a[i]] = f.get(a[i], 0) + 1\n    f[1] = f.get(1, 0)\n    print(f.get(1, 0))\n    for i in range(2, len(a)):\n        f[a[i]] = f.get(a[i], 0)\n    f[1] = f.get(1, 0)\n    for i in range(2, len(a)):\n        f[a[i]] = f.get(a[i], 0)\n    print(f.get(1, 0))\n    return str(f.get(1, 0))\n\nprint(solution(stdin))\n\n'''\n\n\ndef"
    },
    {
        "number": 4011,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    f = lambda x: (x * 10 + f(x-1)) % 9\n    return max(a, key=f)\n"
    },
    {
        "number": 4011,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, list(stdin)))\n    x = a[0]\n    for i in range(1, n):\n        x = x * 10 + a[i]\n    return x\n\nn = int(input())\na = list(map(int, input().split()))\nprint(solution(n))\n"
    },
    {
        "number": 4011,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def ans(a: str, n: int):\n        if not a:\n            return \"\"\n        res = 0\n        while n:\n            if a[0] == a[n]:\n                res += int(a[n])\n                n -= 1\n            else:\n                res += a[n]\n                n -= 1\n        return str(res)\n\n    n = int(input())\n    a = input()\n    for i in range(len(a)):\n        if a[i] == '1':\n            a = a[:i] + ans(a[i + 1:], n - 1) + a[i + i + 1:]\n    print(a)\n    return a\n\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= a[i] <= 9\n\nRuntime: 32 ms, faster than 54.28% of Python3 online submissions for Maximum Digits Sum Circular Subsequence.\nMemory Usage: 13.4 MB, less than 55.80% of Python3 online submissions for Maximum Digits Sum Circular Subsequence.\n\n-----Ideas-----\n1. use 1-1-1-1\n2. use a hash table\n3. use a list\n\n'''"
    },
    {
        "number": 4011,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n,a,f=map(int,stdin.split())\n    i=0\n    while i<n:\n        f(a[i])\n        i=i+1\n    return str(i)\n    \n"
    },
    {
        "number": 4011,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    f = list(map(int, stdin.strip().split()))\n    return str(max(f[i] * (f[i+1] * (f[i+2] * (f[i+3] * (f[i+4] * (f[i+5] * (f[i+6] * (f[i+7] * (f[i+8] * (f[i+9] * (f[i+10] * (f[i+11] * (f[i+12] * (f[i+13] * (f[i+14] * (f[i+15] * (f[i+16] * (f[i+17] * (f[i+18] * (f[i+19] * (f[i+20] * (f[i+21] * (f[i+22] * (f[i+23] * (f[i+24] * (f[i+25] * (f[i+26] * (f[i+27] * (f[i+28] * (f[i+29] * (f[i+30] * (f[i+31] * (f[i+32] * (f[i+33] * (f[i+34] * (f[i+35] * (f[i+36] * (f[i+37] * (f[i+38] * (f[i+39] * (f[i+40] * (f[i+41] * (f[i+42] * (f[i+43] * (f[i+44] * (f[i+45] * (f[i+46] * (f[i+47] * (f[i+48] * (f[i+49] * (f[i+50] * (f[i+51] * (f[i+52] * (f[i+53] * (f[i+54] * (f[i+55] * (f[i+56] * (f[i+57] * (f[i+58] * (f[i+59] * (f[i+60] * (f[i+61] * (f[i+62] * (f[i+63] * (f[i+64] * (f[i+65] * (f[i+66] * (f[i+67] * (f[i+68] * (f[i+69] * (f[i+70] * (f[i+71] * (f[i+72] * (f[i+73] * (f[i+74] * (f[i+75] * (f[i+76] * (f[i+77] * (f[i+78] * (f[i+79] * (f[i+80] * (f[i+81] * (f[i+82] * (f[i+83] * (f[i+84] * (f[i+85] * (f[i+86] * (f[i+87] * (f[i+88] * (f[i+89] * (f[i+90] * (f[i+91] * (f[i+92] * (f[i+93] * (f[i+94] * (f[i+95] * (f[i+96] * (f[i+97] * (f[i+98] * (f[i+99] * (f[i+100] * (f[i+101] * (f[i+102] * (f[i+103] * (f[i+104] * (f[i+105] * (f[i+106] * (f[i+107] * (f[i+108] * (f[i+109] * (f[i+110] * (f[i+111] * (f[i+112] * (f[i+113] * (f[i+114] * (f[i+115] * (f[i+116] * (f[i+117] * (f[i+118] * (f[i+119] * (f[i+120] * (f[i+121] * (f[i+122] * (f[i+123] * (f[i+124] * (f[i+125] * (f[i+126] * (f[i+127] * (f[i+128] * (f[i+129] * (f[i+130] * (f[i+131] * (f[i+132] * (f[i+133] * (f[i+134] * (f[i+135] * (f[i+136] * (f[i+137] * (f[i+138] * (f[i+139] * (f[i+140] * (f[i+141] * (f[i+142] * (f[i+143] * (f[i+144] * (f[i+145] * (f[i+146] * (f[i+147] * (f[i+148] * (f[i+149] * (f[i+150] * (f[i+151] * (f[i+152] * (f[i+153] * (f[i+154] * (f[i+155] * (f[i+156] * (f[i+157] * (f[i+158] * (f[i+159] * (f[i+160] * (f[i+161] * (f[i+162] * (f[i+163] * (f[i+164] * (f[i+165] * (f[i+166] * (f[i+167] * (f[i+168] * (f[i+169] * (f[i+170] * (f[i+171] * (f[i+172] * (f[i+173] * (f[i+174] * (f[i+175] * (f[i+176] * (f[i+177] * (f[i+178] * (f[i+179] * (f[i+180] * (f[i+181] * (f[i+182] * (f[i+183] * (f[i+184] * (f[i+185] * (f[i+186] * (f[i+187] * (f[i+188] * (f[i+189] * (f[i+190] * (f[i+191] * (f[i+192] * (f[i+193] * (f[i+194] * (f[i+195] * (f[i+196] * (f[i+197] *"
    },
    {
        "number": 4011,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int,stdin.split()))\n    max_p = max(a)\n    while max_p > 0:\n        \n        if max_p % 10 == 0:\n            print(max_p)\n            break\n        \n        \n        max_p = max(max_p//10,a.index(max_p%10))\n        \n        \n    return str(max_p)\n        \n        \n"
    },
    {
        "number": 4011,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    for i in range(len(a)):\n        a[i] = a[i]%10\n    result = []\n    f = lambda x: (x*(x+1)//2)%10\n    for i in range(len(a)):\n        result.append(f(a[i]))\n    return \"\".join(str(x) for x in result)\n"
    },
    {
        "number": 4012,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    ans = math.ceil(b / (a - b))\n    print(ans)\n    print(ans * ans)\n    print(ans * (a + 1))\n    print(ans * (c + 1))\n    print(ans * (a + 1) * (c + 1))\n    print(ans * (a + 1) * (c + 1) * (a + 1))\n    print(ans * (a + 1) * (c + 1) * (a + 1) * (c + 1))\n    print(ans * (a + 1) * (c + 1) * (a + 1) * (c + 1) * (a + 1))\n    print(ans * (a + 1) * (c + 1) * (a + 1) * (c + 1) * (a + 1) * (c + 1))\n    print(ans * (a + 1) * (c + 1) * (a + 1) * (c + 1) * (a + 1) * (c + 1) * (a + 1))\n    print(ans * (a + 1) * (c + 1) * (a + 1) * (c + 1) * (a + 1) * (c + 1) * (a + 1) * (c + 1))\n    print(ans * (a + 1) * (c + 1) * (a + 1) * (c + 1) * (a + 1) * (c + 1) * (a + 1) * (c + 1))\n    print(ans * (a + 1) * (c + 1) * (a + 1) * (c + 1) * (a + 1) * (c + 1) * (a + 1) * (c + 1))\n    print(ans * (a + 1) * (c + 1) * (a + 1) * (c + 1) * (a + 1) * (c + 1) * (a + 1) * (c + 1) * (a + 1))\n    print(ans * (a + 1) * (c + 1) * (a + 1) * (c + 1) * (a + 1) * (c + 1) * (a + 1) * (c + 1) * (a + 1))\n    print(ans * (a + 1) * (c + 1) * (a + 1) * (c + 1) * (a + 1) * (c + 1) * (a + 1) * (c + 1) * (a + 1))\n    print(ans * (a + 1) * (c + 1) * (a + 1) * (c + 1) * (a + 1) * (c + 1) * (a + 1) * (c + 1) * (a + 1))\n    print(ans * (a + 1) * (c + 1) * (a + 1) * (c + 1) * (a + 1) * (c + 1) * (a + 1) * (c + 1) * (a + 1))\n    print(ans * (a + 1) * (c + 1) * (a + 1) * (c + 1) * (a + 1) * (c + 1) * (a + 1) * (c + 1) * (a + 1))\n    print(ans * (a + 1) * (c + 1) * (a + 1) * (c + 1) * (a + 1) * (c + 1) * (a + 1) * (c + 1) * (a + 1))\n    print(ans * (a + 1) * (c + 1) * (a + 1) * (c + 1) * (a + 1) * (c + 1) * (a + 1) * (c + 1) * (a + 1))\n    print(ans * (a + 1) * (c + 1) * (a + 1) * (c + 1) * (a + 1) * (c + 1) * (a + 1) * (c + 1) * (a + 1))\n    print(ans * (a + 1) * (c + 1) * (a + 1) * (c + 1) * (a + 1) * (c + 1) * (a + 1) * (c + 1) * (a + 1))\n    print(ans * (a + 1) * (c + 1) * (a + 1) * (c + 1) * (a + 1) * (c + 1) * (a + 1) * (c + 1) * (a + 1))\n    print(ans * (a + 1) * (c + 1) * (a + 1) * (c + 1) * (a + 1) * (c + 1) * (a + 1) * (c + 1) * (a + 1))\n    print(ans * (a + 1) * (c + 1) * (a + 1) * (c + 1) * (a + 1) * (c + 1) * (a + 1) * (c + 1) * (a + 1))\n    print(ans * (a + 1) * (c + 1) * (a + 1) * (c + 1) * (a + 1) * (c + 1) * (a + 1) * (c + 1) * (a + 1))\n    print(ans * (a + 1) * (c + 1) * (a + 1) * (c + 1) * (a + 1) * (c + 1) * (a + 1) * (c + 1) * (a + 1))\n    print(ans * (a + 1) * (c + 1) * (a + 1) * (c + 1) * (a + 1) * (c + 1) * (a + 1) * (c + 1) * (a + 1))\n    print(ans * (a + 1) * (c + 1) * (a + 1) * (c + 1) * (a + 1) * (c + 1) * (a + 1) * (c + 1) * (a + 1))\n    print(ans * (a + 1) * (c + 1) * (a + 1) * (c + 1) * (a + 1) * (c + 1) * (a + 1) * (c + 1) * (a + 1))\n    print(ans * (a + 1) * (c + 1) * (a + 1) * (c + 1) * (a + 1) * (c + 1) * (a + 1) * (c + 1) * (a + 1))\n    print(ans * (a + 1) * (c + 1) * (a + 1) * (c + 1) * (a + 1) * (c + 1) * (a + 1) * (c + 1) * (a + 1))\n    print(ans * (a + 1"
    },
    {
        "number": 4012,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    op_list = [0, 0, 0, 0, 0]\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] % a[j] == 0:\n                op_list[i] += 1\n                op_list[j] += 1\n    res = min(op_list)\n    for i in op_list:\n        if i == res:\n            print(i, end=',')\n        else:\n            print(i, end=' ')\n    print(res)\n    return '\\n'\n"
    },
    {
        "number": 4012,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    res = int(stdin)\n    for t in range(1, res+1):\n        a, b, c = map(int, stdin.split())\n        if a % b!= 0 or c % b!= 0:\n            continue\n        else:\n            res += 1\n            if (a % b!= 0 and c % b!= 0) or (a % b!= 0 and c % b == 0):\n                continue\n            else:\n                print(res)\n                return \"=\"\n    return str(res)"
    },
    {
        "number": 4012,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip().split()[0])\n    a = list(map(int, stdin.strip().split()[1:]))\n    b = list(map(int, stdin.strip().split()[2:]))\n    c = [a[i] % b[i] for i in range(len(a))]\n    res = 0\n    for i in range(len(a)):\n        if c[i] == 1:\n            res += 1\n        elif c[i] == -1:\n            res -= 1\n        else:\n            continue\n    print(res)\n    return str(res)\n\n\n-----Constraints-----\n1 <= t <= 10^4\n1 <= A <= 10^6\n1 <= B <= 10^6\n1 <= C <= 10^6\n\n---Time---\nO(N*M*K)\n---Memory---\nO(N)\n---Solver---\nApproach 1: \nWe use two pointers, two pointers to help decrease and increase. \nThe first pointer will move down to find the minimum number of operations we need.\nIt will help us decrese the number of operations.\n\nThe second pointer will keep decreasing and increase.\nSo when we hit 0, we move down to find the minimum number of operations.\nIn the minimum number of operations we would reach a solution if we take a operation and we have decrese the two pointers. \n\nSo the next step is to find the minimum number of operations we need.\n\nApproach 2:\nWe use a stack, which also keeps track of all operations we need.\nWe then iterate over the operations.\n\nThe first step is to push the values of two variables together.\n\nThe second step is to pop the two values out.\n\nThe third step is to check if the current value is greater or smaller than the maximum value in the stack.\nIf it is greater, we will increase the operations count.\nIf it is not greater, we will decrease the operations count.\n\nWe use a counter to keep track of operations.\n\nWhile we do the following:\n1. When we reach an operation, pop the operation out of the stack.\n2. If it's greater than the maximum, we need to increase the operations count.\n3. If it's less than the maximum, we need to decrease the operations count.\n\nWe use a variable to count operations and reset it when we reach the end of the operation stack.\n\n\n\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 4012,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a, b, c = list(map(int, stdin.strip().split()))\n    for _ in range(n):\n        a, b, c = a - 1, b - 1, c + 1\n    ans = (a + b + c) // 3\n    if ans < 10**9:\n        print(ans)\n    else:\n        print(0)\n    \nsolution(stdin)\n"
    },
    {
        "number": 4012,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\" \")\n    a = int(stdin[0])\n    b = int(stdin[1])\n    c = int(stdin[2])\n    if a < b:\n        a, b = b, a\n    if a % b == 0:\n        a, b = b, a\n    for i in range(a):\n        for j in range(c):\n            if j < b:\n                j += 1\n            elif j >= b:\n                j -= b\n            if j >= c:\n                j -= 1\n            print(j)\n    return str(a) + \" \" + str(b) + \" \" + str(c)\n\nSolution:\nInput\n8\n1 2 3\n123 321 456\n5 10 15\n15 18 21\n100 100 101\n1 22 29\n3 19 38\n6 30 46\n\nOutput\n1\n1 1 3\n102\n114 228 456\n4\n4 8 16\n6\n18 18 18\n1\n100 100 100\n7\n1 22 22\n2\n1 19 38\n8\n6 24 48\ndef"
    },
    {
        "number": 4012,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    testcases = int(stdin)\n    for i in range(testcases):\n        a, b, c = map(int, input().split())\n        a_b_c = divmod(a + b - c, c)\n        print(a_b_c[0], a_b_c[1])"
    },
    {
        "number": 4012,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a,b,c=list(map(int,stdin.split()))\n    if a+b+c<=c:\n        return str(a*(a+b+c)//2)\n    if a+b+c>c:\n        return str(a*(a+b+c-c)//2)\n    if a+b+c==c:\n        return str(a*(a+b+c+1)//2)\n    if a+b+c==c:\n        return str(a*(a+b+c-1)//2)\n    if a+b+c==c:\n        return str(a*(a+b+c-1)//2)\n\ndef"
    },
    {
        "number": 4012,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def solution2(stdin: str) -> str:\n        a, b, c = map(int, stdin.split())\n        if a < b:\n            if a % 2!= 0:\n                print(a // 2)\n            else:\n                print(a // 2 + 1)\n        else:\n            if a % 2!= 0:\n                print(a // 2 + 1)\n            else:\n                print(a // 2)\n        if b < c:\n            if b % 2!= 0:\n                print(b // 2)\n            else:\n                print(b // 2 + 1)\n        else:\n            if b % 2!= 0:\n                print(b // 2 + 1)\n            else:\n                print(b // 2)\n        return str(a * b * c)\n    return str(solution2(stdin))"
    },
    {
        "number": 4012,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    \n    d = [0,0]\n    for i in range(1,n):\n        d.append(d[i-1]+1)\n    \n    d[n] = 0\n    \n    ans = [0,0]\n    for i in range(n,0,-1):\n        d[i] = d[i] + 1\n        if d[i] > 3:\n            ans = [i-1,i-1]\n            break\n    \n    for i in range(2,n+1):\n        if d[i] > 3:\n            ans = [ans[0]-i+1,i]\n            break\n    \n    print(ans[0]+ans[1])\n    return ans[0]+ans[1]\n    \n"
    },
    {
        "number": 4013,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split()\n    n = int(a[0])\n    a = a[1:]\n    a = [int(i) for i in a]\n    n -= 1\n    return str(min(a) - max(a))\n\"\"\"\n\nimport sys\n\nn, *a = map(int, sys.stdin.read().split())\na = sorted(a)\n"
    },
    {
        "number": 4013,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, *rest = list(map(int, stdin.split()))\n    i = 0\n    while i < len(rest):\n        if i == 0:\n            a = rest[0]\n        elif i == 1:\n            a = rest[0]\n            rest = rest[1:]\n        elif rest[i-1] < rest[i]:\n            a = a - 1\n        else:\n            a = a + 1\n        i += 1\n    return str(a)\n"
    },
    {
        "number": 4013,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    \n    if len(a) == 0:\n        return '0'\n    \n    if len(a) == 1:\n        return '1'\n\n    a_min = min(a)\n    a_max = max(a)\n    \n    a = list(map(str, a))\n\n    if a_min == 0:\n        return '0'\n    \n    return str(abs(a_max - a_min)) +'-'+ str(abs(a_max - a_min) - abs(a_min))"
    },
    {
        "number": 4013,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = [int(i) for i in stdin.split()[1:]]\n    print(max(a)-min(a))\n    return str(min(a)-max(a))\n\n\n\n-----Test-----\nimport unittest\nclass test(unittest.TestCase):\n    def test_1(self):\n        self.assertEqual(solution(\"4\"), \"2\")\n    def test_2(self):\n        self.assertEqual(solution(\"2\"), \"0\")\n    def test_3(self):\n        self.assertEqual(solution(\"1\"), \"0\")\n    def test_4(self):\n        self.assertEqual(solution(\"7\"), \"3\")\n    def test_5(self):\n        self.assertEqual(solution(\"1\"), \"0\")\n    def test_6(self):\n        self.assertEqual(solution(\"0\"), \"0\")\n    def test_7(self):\n        self.assertEqual(solution(\"9\"), \"9\")\n    def test_8(self):\n        self.assertEqual(solution(\"1\"), \"2\")\n"
    },
    {
        "number": 4013,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    a.sort()\n    n -= 1\n    \n    return ''.join(str(a[n]) +'-'+ str(a[n - 1]))\n"
    },
    {
        "number": 4013,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    arr = []\n    for i in range(n):\n        arr.append(int(stdin.strip()))\n    arr.sort()\n    for i in range(n-1):\n        if arr[i] > arr[i+1]:\n            arr[i] = arr[i+1]\n            arr[i+1] = arr[i]\n    arr[n-1] = arr[n-1] - 1\n    if arr[n-2] > arr[n-1]:\n        arr[n-2] = arr[n-1]\n        arr[n-1] = arr[n-2]\n    return ''.join(map(str, arr))\n\ndef"
    },
    {
        "number": 4013,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    a = sorted(a)\n    for i in range(n):\n        if i == 0:\n            a[0], a[-1] = a[-1], a[0]\n        else:\n            if a[i] - a[i-1] > 0:\n                a[i] = a[i] - a[i-1]\n            elif a[i] - a[i-1] < 0:\n                a[i] = a[i] - (abs(a[i-1]-a[i]))\n    return str(abs(min(a)))\n\n------------------\n\nn = int(input())\na = [int(input()) for _ in range(n)]\nprint(solution(str(max(a)-min(a))), end=' ')\nprint(solution(str(min(a)-max(a))))\n\n\n-------------------------------------------------------\n\nInput\n5\n1 2 1 2 3 2 4\n\nOutput\n3\n\nInput\n2\n3\n\nOutput\n2\n\n------------------\n\nn = int(input())\na = list(map(int, input().split()))\n\na.sort()\n\nfor i in range(n-2):\n    if a[i] + a[i+1] > a[i+2] and a[i] > a[i+1]:\n        a[i] = a[i+1]\n        a[i+1] = a[i] + a[i+2]\nprint(sum(a))\n\n------------------\n\nInput\n5\n1 2 1 2 3 2 4\n\nOutput\n3\n\n------------------\n\nn = int(input())\na = list(map(int, input().split()))\n\na.sort()\n\ncount = 0\nfor i in range(1,n):\n    if a[i-1] + a[i] > a[i+1]:\n        count += 1\nprint(count)"
    },
    {
        "number": 4013,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = []\n    for i in range(n):\n        a.append(int(stdin.split()[i+1]))\n    print(min(a))\n    return '2'\n\n\n----------------------------------------------------------------------------------------------"
    },
    {
        "number": 4013,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    \n    max_value = max(a) - min(a)\n    \n    a_min = max_value\n    a_max = 0\n    \n    for i in range(len(a)):\n        if a[i] >= a_min:\n            a_min = a[i]\n        if a[i] <= a_max:\n            a_max = a[i]\n        \n        if a_max - a_min <= 1:\n            return str(a_max - a_min)\n        \n    return str(max_value)\n    \n"
    },
    {
        "number": 4013,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, input().split()))\n    a.sort()\n    a.pop()\n    a.reverse()\n    a = list(map(lambda x: x - 1, a))\n    while n > 0:\n        if a[-1] == 0:\n            n -= 1\n        else:\n            a[-1] -= 1\n    if a[0] == 0:\n        a[0] -= 1\n    return '{}'.format(min(a))\n"
    },
    {
        "number": 4014,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    schedules = []\n    for _ in range(n):\n        schedules.append(list(map(int, input().split())))\n    for i in range(m):\n        for j in range(n):\n            if schedules[j][i] == 1:\n                schedules[j][i + 1] = schedules[j][i] + schedules[j][i + 1]\n            elif schedules[j][i] == 2:\n                schedules[j][i + 2] = schedules[j][i] + schedules[j][i + 2]\n            elif schedules[j][i] == 3:\n                schedules[j][i + 3] = schedules[j][i] + schedules[j][i + 3]\n            elif schedules[j][i] == 4:\n                schedules[j][i + 4] = schedules[j][i] + schedules[j][i + 4]\n    answer = []\n    for i in range(n):\n        if schedules[i][i] == 0:\n            answer.append(0)\n        else:\n            answer.append(i + 1)\n    print(*answer)\n"
    },
    {
        "number": 4014,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    # print(n, m)\n    if (n >= m):\n        print(n, m)\n        return \"0\"\n    \n    s_i, d_i, c_i = [int(x) for x in stdin.split()]\n    \n    if (s_i + d_i > n):\n        print(-1)\n        return \"0\"\n    \n    if (c_i == 0):\n        print(n, m)\n        return \"0\"\n    \n    s_i_list = []\n    d_i_list = []\n    c_i_list = []\n    \n    for _ in range(m):\n        s_i, d_i, c_i = [int(x) for x in stdin.split()]\n        if (s_i >= d_i):\n            s_i = s_i - d_i\n        if (c_i == 0):\n            c_i = c_i - 1\n        s_i_list.append(s_i)\n        d_i_list.append(d_i)\n        c_i_list.append(c_i)\n    \n    if (s_i + d_i == n):\n        print(n, m)\n        return \"0\"\n    \n    if (c_i == 0):\n        print(n, m)\n        return \"0\"\n    \n    for i in range(m - 1, n - 1, -1):\n        if s_i_list[i] == s_i_list[i + 1]:\n            s_i_list[i] = 0\n            s_i_list[i + 1] = 1\n            d_i_list[i] = 1\n            d_i_list[i + 1] = 0\n        \n        if c_i_list[i] == c_i_list[i + 1]:\n            c_i_list[i] = 0\n            c_i_list[i + 1] = 1\n            d_i_list[i] = 1\n            d_i_list[i + 1] = 0\n    \n    for i in range(n - 1, s_i - 1, -1):\n        if d_i_list[i] == 0:\n            d_i_list[i] = 1\n        if c_i_list[i] == 0:\n            c_i_list[i] = 1\n    \n    answer = []\n    for i in range(m):\n        # print(s_i_list[i], c_i_list[i])\n        if s_i_list[i] == 0 or c_i_list[i] == 0:\n            answer.append(0)\n            continue\n        \n        if s_i_list[i] == c_i_list[i]:\n            answer.append(s_i_list[i])\n            continue\n        \n        if d_i_list[i] > 0:\n            answer.append(s_i_list[i] + d_i_list[i])\n        if d_i_list[i] < 0:\n            answer.append(s_i_list[i] + abs(d_i_list[i]))\n        \n        if c_i_list[i] == 0:\n            answer.append(0)\n        \n        if c_i_list[i] > 0:\n            answer.append(s_i_list[i] - abs(d_i_list[i]))\n        if c_i_list[i] < 0:\n            answer.append(s_i_list[i] + abs(d_i_list[i]))\n    # print(answer)\n    \n    for i in range(n):\n        if s_i_list[i] == 0:\n            answer.append(0)\n            continue\n        \n        if s_i_list[i] == c_i_list[i]:\n            answer.append(s_i_list[i])\n        elif s_i_list[i] < c_i_list[i]:\n            answer.append(s_i_list[i] + 1)\n        else:\n            answer.append(s_i_list[i] + abs(c_i_list[i]))\n    # print(answer)\n    \n    if (sum(answer) == n):\n        return \"1\"\n    else:\n        return str(sum(answer))\n\nsolution(\"3 3\")\nsolution(\"5 3\")"
    },
    {
        "number": 4014,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # read the stdin\n    n, m = map(int, stdin.split())\n    # parse the stdin\n    question = [map(int, line.split()) for line in stdin.split()]\n    # initialize a dictionary to store the schedule\n    schedule = {}\n    # loop over the questions\n    for i in range(n):\n        # get the student number\n        student = question[i][0]\n        # get the exam number\n        exam = question[i][1]\n        # get the day number\n        day = question[i][2]\n        # get the number of days needed for the exam\n        days = question[i][3]\n        # if the student is in the schedule\n        if student in schedule:\n            # get the schedule of the student\n            schedule_student = schedule[student]\n            # if the exam is in the schedule\n            if exam in schedule_student:\n                # get the schedule of the exam\n                schedule_exam = schedule_student[exam]\n                # if the day number is less than the day of the exam, skip\n                if day < len(schedule_exam):\n                    # if the days are greater than the number of days needed for the exam\n                    if days > len(schedule_exam[day]):\n                        # skip it\n                        continue\n                    # if the days are equal\n                    elif days == len(schedule_exam[day]):\n                        # calculate the number of days needed\n                        # to prepare for the exam\n                        needed_days = days * (days - 1)\n                        # if the number of days needed is less than the number of days needed for the exam\n                        if needed_days > len(schedule_exam[day]):\n                            # skip it\n                            continue\n                        # add the days needed for the exam to the list\n                        schedule_exam[day].append(needed_days)\n                    # if the days are equal\n                    else:\n                        # skip it\n                        continue\n        # if the student is not in the schedule\n        else:\n            # get the schedule of the student\n            schedule_student = {student: [question[i][3]]}\n            # if the exam is in the schedule\n            if exam in schedule_student:\n                # if the day number is less than the day of the exam, skip\n                if day < len(schedule_student[exam]):\n                    # skip it\n                    continue\n                # if the day number is equal\n                elif day == len(schedule_student[exam]):\n                    # calculate the number of days needed\n                    # to prepare for the exam\n                    needed_days = days * (days - 1)\n                    # if the number of days needed is less than the number of days needed for the exam\n                    if needed_days > len(schedule_student[exam]):\n                        # skip it\n                        continue\n                    # add the days needed for the exam to the list\n                    schedule_student[exam].append(needed_days)\n            # if the student is not in the schedule\n            else:\n                # get the schedule of the student\n                schedule_student = {student: {exam: []}}\n                # if the exam is in the schedule\n                if exam in schedule_student:\n                    # if the day number is less than the day of the exam, skip\n                    if day < len(schedule_student[exam]):\n                        # skip it\n                        continue\n                    # if the day number is equal\n                    elif day == len(schedule_student[exam]):\n                        # calculate the number of days needed\n                        # to prepare for the exam\n                        needed_days = days * (days - 1)\n                        # if the number of days needed is less than the number of days needed for the exam\n                        if needed_days > len(schedule_student[exam]):\n                            # skip it\n                            continue\n                        # add the days needed for the exam to the list\n                        schedule_student[exam][exam].append(needed_days)\n    # loop over the questions\n    answer = 0\n    # loop over the schedule\n    for i in range(n):\n        # get the student number\n        student = question[i][0]\n        # get the exam number\n        exam = question[i][1]\n        # get the day number\n        day = question[i][2]\n        # get the number of days needed for the exam\n        days = question[i][3]\n        # if the student is in the schedule\n        if student in schedule:\n            # get the schedule of the student\n            schedule_student = schedule[student]\n            # if the exam is in the schedule\n            if exam in schedule_student:\n                # if the day is less than the day"
    },
    {
        "number": 4014,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    s = [0]\n    d = [0]\n    c = [0]\n    for i in range(n):\n        s.append(int(stdin.split()[i]))\n        d.append(int(stdin.split()[i + 1]))\n        c.append(int(stdin.split()[i + 2]))\n    s_i = s[0]\n    d_i = d[0]\n    c_i = c[0]\n    for i in range(1, n):\n        s_i = max(s_i, s[i] + d[i])\n        d_i = max(d_i, s[i] + c[i])\n        c_i = max(c_i, s[i] + c[i] + 1)\n    if s_i > d_i:\n        s_i = d_i\n    if s_i >= c_i:\n        s_i = c_i\n    return str(s_i)\n"
    },
    {
        "number": 4014,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    \n    s, d, c = map(int, stdin.split())\n    \n    # fill all the exaam and add it to solution\n    # exaam:  if s >= m:\n    #    s = s - m\n    #    d = m - 1\n    # else:\n    #    m -= 1\n    #    s += m\n    #    d -= 1\n    # fill all the exaam and add it to solution\n    # exaam:  if s >= m:\n    #    s = s - m\n    #    d = m - 1\n    # else:\n    #    m -= 1\n    #    s += m\n    #    d += 1\n    # fill all the exaam and add it to solution\n    # exaam:  if s >= m:\n    #    s = s - m\n    #    d = m - 1\n    # else:\n    #    m -= 1\n    #    s += m\n    #    d += 1\n    #    c -= 1\n    # fill all the exaam and add it to solution\n    # exaam:  if s >= m:\n    #    s = s - m\n    #    d = m - 1\n    # else:\n    #    m -= 1\n    #    s += m\n    #    d += 1\n    #    c -= 1\n    # fill all the exaam and add it to solution\n    # exaam:  if s >= m:\n    #    s = s - m\n    #    d = m - 1\n    # else:\n    #    m -= 1\n    #    s += m\n    #    d += 1\n    #    c += 1\n    # fill all the exaam and add it to solution\n    # exaam:  if s >= m:\n    #    s = s - m\n    #    d = m - 1\n    # else:\n    #    m -= 1\n    #    s += m\n    #    d += 1\n    #    c += 1\n    # fill all the exaam and add it to solution\n    # exaam:  if s >= m:\n    #    s = s - m\n    #    d = m - 1\n    # else:\n    #    m -= 1\n    #    s += m\n    #    d += 1\n    #    c += 1\n    # fill all the exaam and add it to solution\n    # exaam:  if s >= m:\n    #    s = s - m\n    #    d = m - 1\n    # else:\n    #    m -= 1\n    #    s += m\n    #    d += 1\n    #    c += 1\n    # fill all the exaam and add it to solution\n    # exaam:  if s >= m:\n    #    s = s - m\n    #    d = m - 1\n    # else:\n    #    m -= 1\n    #    s += m\n    #    d += 1\n    #    c += 1\n    # fill all the exaam and add it to solution\n    # exaam:  if s >= m:\n    #    s = s - m\n    #    d = m - 1\n    # else:\n    #    m -= 1\n    #    s += m\n    #    d += 1\n    #    c += 1\n    # fill all the exaam and add it to solution\n    # exaam:  if s >= m:\n    #    s = s - m\n    #    d = m - 1\n    # else:\n    #    m -= 1\n    #    s += m\n    #    d += 1\n    #    c += 1\n    # fill all the exaam and add it to solution\n    # exaam:  if s >= m:\n    #    s = s - m\n    #    d = m - 1\n    # else:\n    #    m -= 1\n    #    s += m\n    #    d += 1\n    #    c += 1\n    # fill all the exaam and add it to solution\n    # exaam:  if s >= m:\n    #    s = s - m\n    #    d = m - 1\n    # else:\n    #    m -= 1\n    #    s += m\n    #    d += 1\n    #    c += 1\n    # fill all the exaam and add it to solution\n    # exaam:  if s >= m:\n    #    s = s - m\n    #    d = m - 1\n    # else:\n    #    m -= 1\n"
    },
    {
        "number": 4014,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    day_max = n + 1 if n < m else n\n    day_min = 1 if m < n else n\n    \n    schedules = []\n    for i in range(day_max):\n        schedules.append(list(map(int, stdin.split())))\n    \n    start_day = day_min\n    day = day_max\n    count = 0\n    for i in schedules:\n        day = min(day, i[0])\n        count += 1 if i[1] == 1 else 0\n        \n        if count >= m:\n            break\n    \n    if count >= m:\n        return str(count)\n    elif count < m and day_min <= start_day <= day:\n        return str(count)\n    else:\n        return '-1'\n\n\"\"\"\nTime complexity: O(m)\nSpace complexity: O(1)\n\"\"\"\n"
    },
    {
        "number": 4014,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n,m = map(int,stdin.split())\n    if m>n:\n        print(-1)\n    else:\n        schedule = []\n        j = 1\n        for i in range(n):\n            schedule.append([0 for _ in range(m)])\n        for i in range(1,n):\n            for j in range(m):\n                if j>=i:\n                    schedule[i][j] = 1\n        for i in range(1,n):\n            for j in range(m):\n                if j<=i:\n                    continue\n                elif schedule[i][j]:\n                    for k in range(j+1,m):\n                        schedule[i][k] = 1\n                        \n                else:\n                    for k in range(j-1,m):\n                        schedule[i][k] = 1\n        answer = 0\n        for i in range(n):\n            for j in range(m):\n                if schedule[i][j]:\n                    answer += j\n        return str(answer)\n    \n\ndef"
    },
    {
        "number": 4014,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    schedule = []\n    for i in range(n):\n        schedule.append(list(map(int, stdin.split())))\n\n    for i in range(n):\n        s = schedule[i][0]\n        for j in range(n):\n            if s == schedule[j][0]:\n                s -= schedule[j][1]\n                schedule[j][1] += 1\n                break\n        if s > m:\n            return \"-\"\n    answer = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            cnt = schedule[j][1]\n            s = schedule[i][0]\n            d = schedule[j][0]\n            if s > d:\n                cnt += 1\n            else:\n                cnt = 0\n            answer += cnt * (cnt - 1) // 2\n    return str(answer)\n"
    },
    {
        "number": 4014,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return '-'\n"
    },
    {
        "number": 4014,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    m = int(stdin.strip().split()[1])\n    schedules = [int(stdin.strip().split()[i+1]) for i in range(n-1)]\n    answer = 0\n    prepared = [[[]]*(m+1) for i in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(m, 0, -1):\n            prepared[i][j] = [prepared[i][k][0] for k in range(j-1, -1, -1)] + [i]\n    for schedule in schedules:\n        answer += sum(prepared[schedule])\n        for j in range(1, schedule+1):\n            for k in range(m+1):\n                prepared[schedule][k] = max(prepared[schedule][k], prepared[schedule-j][k-1])\n    return str(answer)"
    },
    {
        "number": 4015,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = int(stdin.strip())\n    if n<0:\n        return '-1'\n    elif n==1:\n        return '0'\n    else:\n        return str(n*((n-1)//6))\n\ndef"
    },
    {
        "number": 4015,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    if stdin == '':\n        return str(0)\n    n, m = [int(x) for x in stdin.split()]\n    if n == m:\n        return str(0)\n    if n == 0 and m == 1:\n        return str(-1)\n    moves = 0\n    for i in range(1, m + 1):\n        moves += solution(stdin + str(i))\n    return str(moves)\n\ndef"
    },
    {
        "number": 4015,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n,m = map(int,stdin.split())\n    while True:\n        if n == 0 and m == 0:\n            break\n        n = n * 2\n        m = m * 3\n    return str(n * m)"
    },
    {
        "number": 4015,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\n-----Constraints-----\n\n1 <= stdin.length <= 10^5\n1 <= n, m <= 5*10^8\n0 <= stdin[i] <= 10^6\n\n\n-----Time Limit-----\n1 second\n\n\n-----Divide and Conquer-----\n\nThere are no infinite loops in the worst case.\n\nTime complexity of both the recursive and iterative is O(log(n)) and we iterate O(1) time in the worst case.\n\n'''\nclass Solution:\n    def convert(self, n, m):\n        return (n*2+m)//(2*3)\n    \n    def solve(self, n, m):\n        a,b=0,0\n        for i in range(0,n):\n            a*=n\n            b*=m\n            a+=(i+1)\n            b+=(i+1)\n            if(a>=b):\n                return a-b\n    def solve(self, n, m):\n        if(n==0 or m==0):\n            return 0\n        if(n<=m):\n            return self.solve(n,m)\n        return (self.solve(n-1,m) + self.solve(n-1,m-1))%(10**9+7)\n"
    },
    {
        "number": 4015,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(i) for i in stdin.split()]\n    if n > m:\n        return \"-1\"\n    n_len = len(str(n))\n    m_len = len(str(m))\n    if n_len!= m_len:\n        return \"-1\"\n    if n_len < m_len:\n        return str(n) + \",\" + str(m)\n    if n_len > m_len:\n        return str(n) + \",\" + str(m) + \",\" + str(n) + \",\" + str(m)\n    if n_len == m_len:\n        if m_len > n_len:\n            return str(n) + \",\" + str(m) + \",\" + str(n) + \",\" + str(m)\n        elif m_len < n_len:\n            return str(n) + \",\" + str(m) + \",\" + str(n) + \",\" + str(m) + \",\" + str(n)\n        elif m_len == n_len:\n            if n_len > m_len:\n                return str(n) + \",\" + str(m) + \",\" + str(n) + \",\" + str(n) + \",\" + str(m) + \",\" + str(n)\n            elif n_len < m_len:\n                return str(n) + \",\" + str(m) + \",\" + str(n) + \",\" + str(m) + \",\" + str(n) + \",\" + str(n)\n            elif n_len == m_len:\n                return str(n) + \",\" + str(m) + \",\" + str(n) + \",\" + str(n) + \",\" + str(n)\n            elif n_len > m_len:\n                return str(n) + \",\" + str(m) + \",\" + str(n) + \",\" + str(m) + \",\" + str(n) + \",\" + str(n) + \",\" + str(n)\n            elif n_len < m_len:\n                return str(n) + \",\" + str(m) + \",\" + str(n) + \",\" + str(n) + \",\" + str(n) + \",\" + str(n) + \",\" + str(n)\n            elif n_len == m_len:\n                return str(n) + \",\" + str(m) + \",\" + str(n) + \",\" + str(n) + \",\" + str(n) + \",\" + str(n)\n        elif m_len > n_len:\n            return str(n) + \",\" + str(m) + \",\" + str(n) + \",\" + str(m) + \",\" + str(n) + \",\" + str(m)\n        elif m_len < n_len:\n            return str(n) + \",\" + str(m) + \",\" + str(n) + \",\" + str(m) + \",\" + str(n) + \",\" + str(m)\n        elif m_len == n_len:\n            return str(n) + \",\" + str(m) + \",\" + str(n)\n        elif m_len > n_len:\n            return str(n) + \",\" + str(m) + \",\" + str(n) + \",\" + str(m) + \",\" + str(n) + \",\" + str(n)\n        elif m_len < n_len:\n            return str(n) + \",\" + str(m) + \",\" + str(n) + \",\" + str(m) + \",\" + str(n) + \",\" + str(n)\n        elif m_len == n_len:\n            return str(n) + \",\" + str(m) + \",\" + str(n)\n        elif m_len > n_len:\n            return str(n) + \",\" + str(m) + \",\" + str(n) + \",\" + str(n) + \",\" + str(n)\n        elif m_len < n_len:\n            return str(n) + \",\" + str(m) + \",\" + str(n) + \",\" + str(n) + \",\" + str(n) + \",\" + str(n)\n        elif m_len == n_len:\n            return str(n) + \",\" + str(m) + \",\" + str(n)\n        elif m_len > n_len:\n            return str(n) + \",\" + str(m) + \",\" + str(n) + \",\" + str(n) + \",\" + str(n) + \",\" + str(n)\n        elif m_len < n_len:\n            return str(n) + \",\" + str(m) + \",\" + str(n) + \",\" + str(n) + \",\" + str(n) + \",\" + str(n)\n        elif m_len == n_len:\n            return str(n) + \",\" + str(m) + \",\" + str(n)\n        elif m_len > n_len:\n            return str(n) + \",\" + str(m) + \",\" + str(n) + \",\" + str(n) + \",\" + str(n)\n        elif m_len < n_len:\n            return str(n) + \",\" + str(m) + \",\" + str(n) + \",\" + str(n) + \",\" + str(n)\n        elif m_len == n_len:\n            return str(n) + \",\" + str(m) + \",\" + str(n)\n    elif n_len == m_len:\n        if n_len > m_len:\n            return str(n) + \",\" + str(m) + \",\" + str(n)\n        elif n_len < m_len:\n            return str(n) + \",\" + str(m) + \",\" + str(n) + \",\" + str(m)\n        elif n_len == m_len:\n            return str(n) + \",\" + str(m)\n        elif n_len > m_len:\n            return str(n) + \",\" + str(m) + \",\" + str(n) + \",\" + str(m)\n        elif n_len < m_len:\n            return str(n) + \",\" + str(m) + \",\" + str(n) + \",\" + str(m)\n        elif n_len == m_len:\n            return str(n) + \",\" + str(m)\n        elif n_len > m_len:\n            return str(n) + \",\" + str(m) + \",\" + str(n)\n        elif n_len < m_len:\n            return str(n) + \",\" + str(m) + \",\" + str(n)\n        elif n_len == m_len:\n            return str(n) + \",\" + str(m)\n        elif n_"
    },
    {
        "number": 4015,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n > m:\n        n, m = m, n\n    ans = -1\n    if n % 2 == 0:\n        m1 = m\n        m2 = m - 1\n        ans = n // 2\n        for i in range(1, n + 1, 2):\n            ans = ans * 2 + m2\n            m2 -= 1\n        return str(ans)\n    else:\n        m1 = m - 1\n        ans = n // 2\n        for i in range(1, n + 1, 2):\n            ans = ans * 2 + m1\n            m1 -= 1\n        return str(ans)"
    },
    {
        "number": 4015,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n,m=map(int,stdin.split())\n    if n*2<=m and m<=n*2:\n        answer=0\n    else:\n        answer=-1\n    return answer\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4015,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n < m:\n        n, m = m, n\n    if n % 2 == 0:\n        for i in range(n-1):\n            n -= 1\n    if m % 2 == 0:\n        for i in range(m-1):\n            m -= 1\n    for j in range(n, m, 2):\n        print(j)\n    return \"\"\n\"\"\"\n\nimport math\n\ndef"
    },
    {
        "number": 4015,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n > m:\n        return str(m) +''\n    elif n == m:\n        return '0'\n    else:\n        return str(m-n) +''\n"
    },
    {
        "number": 4015,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    # remove whitespace and punctuation\n    n, m = map(int, stdin.split())\n    if n > m:\n        return str(0)\n\n    if n == m:\n        return str(0)\n    \n    if m == 1:\n        return str(0)\n    \n    if n % 2 == 0:\n        m1 = (n // 2)\n        m2 = (n // 2)\n    else:\n        m1 = (n // 2)\n        m2 = (n // 2) + 1\n\n    if m1 == m:\n        return str(0)\n    \n    if m1 == m:\n        return str(0)\n    \n    \n    result = 0\n    \n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            if i == 1:\n                result += 1\n            else:\n                result += 1\n        else:\n            if i == 1:\n                result -= 1\n            else:\n                result -= 1\n    \n    if result == 0:\n        return str(0)\n    \n    return str(result)\n"
    },
    {
        "number": 4016,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split())\n    s = stdin.strip()\n    return solution_without_repeat(n, k, s)\n\ndef"
    },
    {
        "number": 4016,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return solution1(stdin)\n\ndef"
    },
    {
        "number": 4016,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    l,k=map(int,stdin.split())\n    l+=1\n    s=stdin.split()\n    s.insert(0,s[0])\n    s.append(l-k-1)\n    return ''.join(s)"
    },
    {
        "number": 4016,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.split()\n    s = [''.join(s[i + 1:i + k + 1]) for i in range(n - k)]\n    print(*[''.join(s) for s in sorted(set(s))])\n    return ''\n\nprint(solution(input()))"
    },
    {
        "number": 4016,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    s = list(map(lambda x: x.lower(), stdin.split()))\n    if len(set(s)) == len(s):\n        return \"\".join(sorted(s))\n    else:\n        return \"Invalid input\"\n\n\nn = int(input())\nk = int(input())\ns = input()\nsolution(s)"
    },
    {
        "number": 4016,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    \n    print(' '.join(stdin.split()[:k]))\n    return ''\n\n\n'''\n\nimport math\nimport sys\nimport itertools"
    },
    {
        "number": 4016,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin[0])\n    n = int(stdin[1])\n    t = stdin[2]\n    \n    if (n > len(t)):\n        return 'error'\n    \n    # Find the length of the string $s$\n    # Given a string $s$, find an index $i$ such that $s[i] = t$\n    # $i \\in [0, \\infty)$\n    for i in range(0, n):\n        if (i < len(t)):\n            j = i\n            while j < len(t) and t[j]!= t[i]:\n                j += 1\n            if j == len(t):\n                return 'error'\n        else:\n            break\n        \n    # Construct a substring of length $k$ starting from $i$\n    # for each index $i$\n    # $s[i] = t$\n    # $s[i + n - 1] = t$\n    # $s[i + 2 * n - 1] = t$\n    #...\n    # $s[i + 2 * n] = t$\n    # $s[i + k - 1] = t$\n    # $s[i + k] = t$\n    #...\n    # $s[i + k + n - 1] = t$\n    # $s[i + k + n] = t$\n    #...\n    # $s[i + k + n + 1] = t$\n    # $s[i + k + n + 2] = t$\n    #...\n    # $s[i + k + n + 2 * n - 1] = t$\n    # $s[i + k + n + 2 * n - 2] = t$\n    #...\n    # $s[i + k + n + 2 * n - 2 * n - 1] = t$\n    # $s[i + k + n + 2 * n - 2 * n - 2] = t$\n    #...\n    # $s[i + k + n + 2 * n - 3] = t$\n    # $s[i + k + n + 2 * n - 4] = t$\n    #...\n    # $s[i + k + n + 2 * n - 3 * n - 1] = t$\n    # $s[i + k + n + 2 * n - 3 * n - 2] = t$\n    #...\n    # $s[i + k + n + 2 * n - 3 * n - 2 * n - 1] = t$\n    # $s[i + k + n + 2 * n - 3 * n - 2 * n - 2] = t$\n    #...\n    # $s[i + k + n + 2 * n - 3 * n - 3] = t$\n    # $s[i + k + n + 2 * n - 3 * n - 4] = t$\n    #...\n    # $s[i + k + n + 2 * n - 4] = t$\n    \n    # $s[0] = t$\n    # $s[i] = t$\n    # $s[i + n - 1] = t$\n    #...\n    # $s[i + 2 * n - 1] = t$\n    # $s[i + 2 * n - 2] = t$\n    #...\n    # $s[i + 2 * n - 2 * n - 1] = t$\n    # $s[i + 2 * n - 2 * n - 2] = t$\n    #...\n    # $s[i + 2 * n - 2 * n - 3] = t$\n    # $s[i + 2 * n - 2 * n - 4] = t$\n    #...\n    # $s[i + 2 * n - 3 * n - 1] = t$\n    # $s[i + 2 * n - 3 * n - 2] = t$\n    #...\n    # $s[i + 2 * n - 3 * n - 2 * n - 1] = t$\n    # $s[i + 2 * n - 3 * n - 2 * n - 2] = t$\n    #...\n    # $s[i + 2 * n - 3 * n - 3] = t$\n    # $s[i + 2 * n - 3 * n - 4] = t$\n    #...\n    # $s[i + 2 * n - 4] = t$\n    \n    # Construct a substring of length $k$ starting from $i$\n    # for each index $i$\n    # $s[i] = t$\n    # $s[i + n - 1] = t$\n    # $s[i + 2 * n - 1] = t$\n    #...\n    # $s[i + 2 * n - 2] = t$\n    # $s[i + 2 * n - 3] = t$\n    #...\n    # $s[i + 2 * n - 3 * n - 1] = t$\n    # $s[i + 2 * n - 3 * n - 2] = t$\n    #...\n    # $s[i + 2 * n - 3 * n - 2 * n - 1] = t$\n    # $s[i + 2 * n - 3 * n - 2 * n - 2] = t$\n    #...\n    # $s[i + 2 * n - 3 * n - 3] = t$\n    # $s[i + 2 * n - 3 * n - 4] = t$\n    #...\n    # $s[i + 2 * n - 4] = t$\n    # $s[i + k + n - 1] = t$\n    # $s[i + k + n - 2] = t$\n    #...\n    # $s[i + k + n - 2 * n - 1] = t$\n    # $s[i + k + n - 2 * n - 2] = t$\n    #...\n    # $s[i + k + n - 2 * n - 2 * n - 1] = t$\n    # $s[i + k + n - 2 * n - 3 * n - 1] = t$\n    #...\n    # $s[i + k + n - 2 * n - 3 * n - 2] = t$\n    # $s[i + k + n - 2 * n - 3 * n - 3] = t$\n    #...\n    # $s[i + k + n - 2 * n - 4] = t$\n    # $s[i + k + n - 3 * n - 1] = t$\n    # $s[i + k + n - 3 * n - 2] = t$\n    #...\n    # $s[i + k + n - 3 * n - 3] = t$\n    \n    # $s[0] = t$\n    # $s[i] = t$\n    # $s[i + n - 1] = t$\n    #...\n    # $s[i + 2 * n - 1] = t$\n    # $s[i + 2 * n - 2] = t$\n    #...\n    # $s[i + 2 * n - 2 * n - 1] = t$\n    # $s[i + 2 * n - 2 * n - 2] = t$\n    "
    },
    {
        "number": 4016,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n * k >= 2 * k:\n        return 'no'\n    s = stdin.split()\n    for i in range(n):\n        s[i] = s[i].lower()\n    l = 0\n    r = n - 1\n    while r < n:\n        if s[l] == s[r]:\n            l += 1\n            r -= 1\n        else:\n            break\n    for i in range(l, r + 1):\n        s[i] = s[i].upper()\n    s = ''.join(s)\n    return s\n\n\ndef"
    },
    {
        "number": 4016,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    l, r = [int(x) for x in stdin.split()][:k]\n    t = stdin.split()[l:r+1]\n    t = [x for x in t if x!= 't']\n    return''.join(t)\n\nExample 1:\n\nInput\n3 4\naba\n\nOutput\nababababa\n\nExplanation\n\nababababa\n\n\"\"\"\n\nclass Solution:\n    def minDistance(self, word1, word2):\n        m, n = len(word1), len(word2)\n        if m + n!= len(word1) + len(word2):\n            return m + n\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        for i in range(m + 1):\n            for j in range(n + 1):\n                if word1[i - 1] == word2[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1]\n                else:\n                    dp[i][j] = 1 + min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1])\n        return dp[m][n]\n"
    },
    {
        "number": 4016,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    t = stdin.split()\n    n = int(t[0])\n    k = int(t[1])\n    s = t[2]\n    \n    indexes = []\n    for i in range(n):\n        indexes.append(i)\n        \n    substrings = []\n    for i in range(n):\n        substrings.append(s[indexes[i]:indexes[i+1]])\n    \n    substrings.sort()\n    \n    if len(substrings) == 0:\n        return \"0\"\n    \n    for i in range(1, len(substrings)):\n        if len(substrings[i]) > len(substrings[i-1]):\n            continue\n        if substrings[i] == substrings[i-1]:\n            continue\n        else:\n            return substrings[i]\n            \n    return s\n"
    },
    {
        "number": 4017,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n\n    j = 0\n    j_array = []\n    while len(a) > 0:\n        if j+1 > n:\n            j = j_array[j_array.index(j)]\n            j_array.remove(j)\n        elif a[j+1] == a[j]:\n            a[j] = 0\n            j += 1\n        else:\n            j_array.append(j+1)\n            j += 1\n\n    for i in range(len(a)-1):\n        if a[i]!= a[i+1]:\n            return str(0)\n    return str(1)\n\"\"\"\ndef"
    },
    {
        "number": 4017,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    good = 0\n    for i in range(n):\n        good += a[i]\n    print(good)\n    j = 0\n    for i in range(1, n):\n        if a[i]!= a[i-1]:\n            print(i)\n            j = i\n            break\n    print(j)\n    return j"
    },
    {
        "number": 4017,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n        \n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    result = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            result += a[j] - a[i]\n            \n    if result > 0:\n        return str(result)\n    else:\n        return \"0\"\n"
    },
    {
        "number": 4017,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.rstrip())\n    a = list(map(int, stdin.split()))\n    good = True\n    for i in range(n):\n        if a[i]!= a[i - 1]:\n            good = False\n            break\n    if good:\n        print(1)\n    else:\n        print(0)\n    return \"\".join([str(i) for i in a])"
    },
    {
        "number": 4017,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    \n    good = []\n    for i in range(n):\n        if a[i] % 2 == 1:\n            good.append(i)\n            \n    \n    good.sort()\n    print(len(good))\n    if not good:\n        return 0\n    if len(good) == 1:\n        return good[0]\n    \n    for j in range(len(good)):\n        if good[j] - good[j+1] < 0:\n            return good[j]\n            \n    \n    return 0\n\nInput\n5\n2 5 1 2 2\n\nOutput\n3\n4 1 5\n\"\"\"\nclass Solution:\n    def sumGoodNums(self, nums: List[int]) -> int:\n        if not nums:\n            return 0\n        \n        n = len(nums)\n        \n        # What do we do if there are 0's in the array?\n        # If there are, return 0.\n        # Don't use +1.\n        # We will just add all odd numbers.\n        sum = 0\n        for i in range(n):\n            if nums[i] % 2 == 1:\n                sum += nums[i]\n        return sum"
    },
    {
        "number": 4017,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    sum_a = 0\n    \n    for i in a:\n        sum_a += i\n        \n    \n    if sum_a >= n:\n        print(0)\n        return\n    \n    j = 0\n    \n    for i in range(len(a)):\n        if a[i] - sum_a >= n:\n            a[i] -= sum_a\n            j = i\n            break\n        \n    print(j+1)\n    return\n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 4017,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n\n    def good(a, num):\n        for i in range(len(a)):\n            if num > a[i] and num - a[i] > 1:\n                return False\n        return True\n\n    good_indices = []\n    for i in range(n):\n        if good(a, a[i]):\n            good_indices.append(i + 1)\n    return''.join(map(str, good_indices))\n"
    },
    {
        "number": 4017,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    if n > 0:\n        for i in range(n):\n            a.remove(a[i])\n    print(len(a))\n    print(*a)\n    return''.join(map(str, a))"
    },
    {
        "number": 4017,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin.split()[-1])\n    a = []\n    for _ in range(n):\n        a.append(int(stdin.split()[-1]))\n    return str(a.count(min(a)))\n"
    },
    {
        "number": 4017,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n        def removeGood(a, j, k):\n            for i in range(k):\n                if j < a.index(a[i]) + 1:\n                    a[j] = a[i]\n                    j = j + 1\n            return j, a\n\n        def count(a, j):\n            ans = 0\n            for i in range(j):\n                if a[i] in a:\n                    ans += 1\n            return ans\n\n        def check(a, j, k):\n            a = a[:j] + a[j+1:]\n            if count(a, j) == count(a, j+1):\n                return True\n            else:\n                return False\n\n        k = int(stdin)\n        a = [int(i) for i in stdin.split()]\n        print(k)\n        print(a)\n        for i in range(k):\n            j = int(stdin)\n            j, a = removeGood(a, j, k)\n            print(j)\n            print(a)\n            print(count(a, j))\n            if check(a, j, k):\n                return j\n\n        return '0'\n\nOutput\n5\n1 1 4 2\nOutput\n2\n1\n\nOutput\n5\n1 3 5 2\nOutput\n1 2 4\nOutput\n0\n\n\"\"\""
    },
    {
        "number": 4018,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.split()\n    if len(s) > n:\n        return -1\n    S = set(s[:n])\n    for i in range(n, 0, -1):\n        S.add(s[i])\n    for i in range(n + 1, 0, -1):\n        S.add(s[i])\n    answer = 0\n    for i in range(1, k + 1):\n        S.remove(s[-i])\n        S.add(s[-i])\n        answer += 1\n    return answer\n\n\n----Code-----\n\nimport sys\n\nn, k = map(int, sys.stdin.readline().split())\ns = sys.stdin.readline().split()\n"
    },
    {
        "number": 4018,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.split()\n    S = set(s)\n    if len(S) == 0:\n        return -1\n    return len(S) - 1"
    },
    {
        "number": 4018,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split()]\n    s = stdin.split()\n    if k == n:\n        return '-1'\n    else:\n        d = 0\n        deleted = []\n        for i in range(n):\n            if s[i] not in deleted:\n                deleted.append(s[i])\n                d += 1\n        \n        \n        if d < k:\n            return '-1'\n        elif d == k:\n            return '-1'\n        else:\n            for i in range(d, k):\n                s[i] = s[i+1]\n            \n        s[k] = '-'\n        \n        \n        \n"
    },
    {
        "number": 4018,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    t = list(stdin.split())\n    k -= 1\n    T = set(t)\n    S = set()\n    if n < len(t):\n        S = t[:n]\n    for tt in T:\n        if tt in S:\n            k -= 1\n        else:\n            S.add(tt)\n            if k < 0:\n                k = 0\n    return \"-1\" if k > 0 else \"0\""
    },
    {
        "number": 4018,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    S = list(map(str, stdin.split()))\n\n    if len(S) < k:\n        return -1\n\n    import itertools\n    ret = 0\n\n    for a in itertools.permutations(S):\n        if all(i in a for i in S):\n            ret += len(a)\n        else:\n            break\n\n    return ret\n\n\n------Output------\n\nPrint -1 if it is impossible to do the set $S$ of size $k$, print the minimum total cost to do it. Otherwise, print the minimum total cost to do it.\n\n\n------Example 1-------\n\nInput\n4 5\nasdf\n\nOutput\n4\n\nInput\n5 7\naaaaa\n\nOutput\n15\n\n-----------------\n\n\n\n------Example 2-------\n\nInput\n5 5\ncc\n\nOutput\n0\n\n-----------------\n\n\"\"\""
    },
    {
        "number": 4018,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = list(stdin.strip())\n    mincost = 0\n    for i in range(n):\n        deletion = s.pop(0)\n        if not s:\n            break\n        if deletion in S:\n            if k == 1:\n                mincost += 1\n            else:\n                mincost += len(S) - k\n            for j in range(len(s)):\n                s.pop(0)\n        if deletion in s:\n            mincost += 1\n    if k == 1:\n        mincost += 1\n    return str(mincost)\n\n\n\n-----Implementation-----\nThe idea is to write the rules and then look through each rule. The rule is a sequence of (index, symbol) pairs where the index is the position in the string, and the symbol is the character. And each character in the sequence is a character.\n\nA character of the sequence is either a single character or an ASCII character. All characters are made of lowercase letters. For example, the rule \"asd\" is a sequence of (0, 'a') and (1, 'd'). The rules are represented by two sequences of (index, symbol), where the index is the position in the string and the symbol is the character. For example, in the string \"asdfasdfasdf\", the rule \"asd\" is a sequence of (0, 'a') and (2, 'd').\n\nThe index of a subsequence is the smallest possible index that can be formed from the set of characters present in that subsequence.\n\nIf there are not enough characters to make the subsequences, the index is -1.\n\nThe index is the smallest index that exists in the set of characters. Note: if the set of characters is not a subset of the sequence of characters, the index is not necessarily smaller than its maximum index.\n\nThere are no duplicates.\n\nThe indices of the subsequences of a subsequence are not guaranteed to be different, as the indices of the subsequences of a subsequence are not unique.\n\nFor example, \"asd\" is a subsequence of \"aabb\".\n\nThere are no other subsequences.\n\nThe set of all characters is {'a', 'b', 'c', 'd'}\n\nFor more details on the set of characters, please refer to the resources:\nhttps://en.wikipedia.org/wiki/Set_(Algorithms)#Python\n\ndef"
    },
    {
        "number": 4018,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    k = int(stdin.strip().split(' ')[-1])\n    s = stdin.strip().split(' ')\n    S = []\n    res = 0\n    for i in range(n):\n        S.append(s[i].replace(' ', ''))\n    for i in range(n):\n        if i + 1 < n:\n            if S[i][0] == S[i + 1][0]:\n                res += int(S[i][1:])\n            else:\n                res += int(S[i][1:])\n    print(res)\n    return res\n\nprint(solution(stdin))"
    },
    {
        "number": 4018,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.split()\n    #return solution_using_hash_set(n,k,s)\n    solution_using_hash_set(n,k,s)\n\ndef"
    },
    {
        "number": 4018,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    S = set()\n    for _ in range(n):\n        S.add(stdin.replace(' ', ''))\n    ans = len(S)\n    if ans == k:\n        return -1\n    for _ in range(k):\n        ans = max(ans, len(S))\n    return ans\n\n-----My Answer-----\n\ndef"
    },
    {
        "number": 4018,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    S = set(stdin.split())\n    dp = [0 for _ in range(n + 1)]\n    dp[0] = 1\n    for i in range(1, n + 1):\n        if i in S:\n            dp[i] = -1\n        else:\n            dp[i] = 1\n    for i in range(2, n + 1):\n        for j in range(i + 1, n + 1):\n            dp[i] = min(dp[i], dp[j] + 1)\n    if dp[n] == -1:\n        return -1\n    return dp[n]\n"
    },
    {
        "number": 4019,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    result = \"\"\n    vertices = list(map(int, stdin.split()))\n    for u, v in enumerate(vertices):\n        if v == u:\n            result += 'YES'\n        else:\n            result += 'NO'\n    return result\n\ndef"
    },
    {
        "number": 4019,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    from collections import deque\n\n    n, m = map(int, stdin.split())\n    edges = deque(map(int, stdin.split()))\n\n    adj_list = [[] for _ in range(n+1)]\n    for i in range(m):\n        v1, v2 = map(int, stdin.split())\n        adj_list[v1].append(v2)\n        adj_list[v2].append(v1)\n\n    def dfs(v, visited, count):\n        visited.add(v)\n        if v == n:\n            return True\n        for i in adj_list[v]:\n            if not visited:\n                if dfs(i, visited, count + 1):\n                    return True\n        return False\n\n    def bfs(v, visited, count):\n        visited.add(v)\n        queue = deque([v])\n        while queue:\n            v = queue.popleft()\n            if not visited:\n                if dfs(v, visited, count + 1):\n                    return True\n            for i in adj_list[v]:\n                if not visited:\n                    if bfs(i, visited, count + 1):\n                        return True\n                queue.append(i)\n\n    if not dfs(1, set(), 1):\n        return 'NO'\n    if not bfs(1, set(), 1):\n        return 'NO'\n    return 'YES'\n-----dr1-----\n\n7\n3 2\n2\n1\n\n3\n3 4\n1 4\n1 6\n1 7\n\nOutput\nYES\n3 2\n3 4\n3 6\n3 7\n\nInput\n7\n3 2\n2\n1\n1\n\nOutput\nYES\n3 2\n3 4\n3 6\n3 7\n3 7\n\nInput\n7\n3 2\n2\n1\n1\n2\n3\n\nOutput\nNO\n\nclass Solution:\n    def validTree(self, n: int, edges: List[List[int]]) -> bool:\n        self.ans = 0\n        if n<2: return True\n        self.dfs(n-1, set(), 1)\n        self.dfs(n-1, set(), 2)\n        for i in range(2,n+1):\n            if self.ans: return False\n            self.dfs(i, set(), 1)\n            self.dfs(i, set(), 2)\n        return True\n    def dfs(self, v, visited, count):\n        if not visited:\n            self.ans = max(self.ans, count)\n            return\n        visited.add(v)\n        for i in edges[v]:\n            if not visited:\n                if self.dfs(i, visited, count + 1):\n                    return True\n            visited.add(i)\n        visited.remove(v)\n        return False\n    \n        \n-----dr2-----\n\n3\n2\n1\n1\n2\n\n1 2\n2\n\nOutput\nYES\n2 1\n2 3\n3 1\n3 2\n\nInput\n3\n2\n1\n1\n2\n\nOutput\nYES\n1 2\n2 3\n3 1\n3 2\n\nInput\n3\n2\n1\n1\n2\n3\n\nOutput\nNO\n\nclass Solution:\n    def validTree(self, n: int, edges: List[List[int]]) -> bool:\n        self.ans = 0\n        if n<2: return True\n        self.dfs(n-1, set(), 1)\n        self.dfs(n-1, set(), 2)\n        for i in range(2,n+1):\n            if self.ans: return False\n            self.dfs(i, set(), 1)\n            self.dfs(i, set(), 2)\n        return True\n    def dfs(self, v, visited, count):\n        if not visited:\n            self.ans = max(self.ans, count)\n            return\n        visited.add(v)\n        for i in edges[v]:\n            if not visited:\n                if self.dfs(i, visited, count + 1):\n                    return True\n            visited.add(i)\n        visited.remove(v)\n        return False\n    \n        \n-----dr3-----\n\n3\n1 2\n1 3\n2 3\n\nOutput\nNO\n\nclass Solution:\n    def validTree(self, n: int, edges: List[List[int]]) -> bool:\n        self.ans = 0\n        if n<2: return True\n        self.dfs(n-1, set(), 1)\n        self.dfs(n-1, set(), 2)\n        for i in range(2,n+1):\n            if self.ans: return False\n            self.dfs(i, set(), 1)\n            self.dfs(i, set(), 2)\n        return True\n    def dfs(self, v, visited, count):\n        if not visited:\n            self.ans = max(self.ans, count)\n            return\n        visited.add(v)\n        for i in edges[v]:\n            if not visited:\n                if self.dfs(i, visited, count + 1):\n                    return True\n            visited.add(i)\n        visited.remove(v)\n        return False\n    \n        \n-----dr4-----\n\n7\n3 2\n1 2\n2\n1 3\n2 4\n1 6\n1 7\n\nOutput\nYES\n3 2\n3 4\n3 6\n3 7\n3 7\n\nInput\n7\n3 2\n2\n1\n1\n2\n3\n2 4\n1 6\n1 7\n\nOutput\nYES\n3 2\n3 4\n3 6\n3 7\n3 7\n3 7\n\nInput\n7\n3 2\n2\n1\n1\n2\n2 4\n1 6\n1 7\n2\n2 4\n1 6\n1 7\n2\n\nOutput"
    },
    {
        "number": 4019,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = map(int, stdin.split())\n    edges = []\n    for _ in range(m):\n        u, v = map(int, stdin.split())\n        edges.append((u, v))\n    edges = sorted(edges, key=lambda x: x[1])\n    def dfs(v, c):\n        if v == n:\n            return True\n        for u in range(n):\n            if edges[u][0] == v and edges[u][1] == c:\n                continue\n            if dfs(edges[u][1], c):\n                return True\n        return False\n    \n    if dfs(n-1, 1):\n        return \"YES\"\n    else:\n        return \"NO\"\n\n\n-----Extra-----\n\ndef"
    },
    {
        "number": 4019,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    n, m, d = map(int, stdin.split())\n    edges = [list(map(int, input().strip().split())) for _ in range(m)]\n    #print(edges)\n    #print(edges)\n    D = d\n    answer = 0\n    def check_pair(v1, v2, adj):\n        if adj[v1][v2]:\n            return False\n        elif v2 == v1:\n            return True\n        else:\n            return check_pair(v1, adj[v1][v2], adj) or check_pair(adj[v2][v1], v1, adj)\n    for i in range(1, n):\n        for j in range(1, n):\n            if check_pair(j, i, edges):\n                answer += 1\n    return answer"
    },
    {
        "number": 4019,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    stdin = stdin.split()\n    def split_sudoku(nums):\n        nums = nums.split()\n        for i in range(n):\n            nums[i] = [int(i) for i in nums[i].split(',')]\n        return nums\n    def find_valid(nums):\n        for i in range(len(nums)):\n            for j in range(i+1, len(nums)):\n                if nums[i] == nums[j]:\n                    nums[i], nums[j] = nums[j], nums[i]\n                    break\n        return nums\n\n    def insert_k(nums, k, i):\n        # print(\"insert_k\",i,nums[i],k)\n        while nums[i]!= 0:\n            if nums[i] == k:\n                nums[i+k], nums[i] = nums[i], nums[i+k]\n                i += k\n            i += 1\n        return nums, i\n\n    def rotate_k(nums, k):\n        # print(\"rotate_k\",i,nums[i],k)\n        while nums[i]!= 0:\n            if nums[i] == k:\n                nums[i], nums[i-k] = nums[i-k], nums[i]\n                i -= k\n            i -= 1\n        return nums, i\n\n    # print(nums)\n    nums = split_sudoku(nums)\n    # print(nums)\n    # print(find_valid(nums))\n    # print(insert_k(nums, 3, 4))\n    # print(rotate_k(nums, 3))\n    def get_k(nums):\n        index = -1\n        for i in range(len(nums)):\n            for j in range(i+1, len(nums)):\n                if nums[i] == nums[j]:\n                    index = j\n        return index\n\n    def check(nums, index):\n        # print(\"check\",nums[index], index)\n        if nums[index] == 0:\n            return True\n        return False\n\n    def find_next_empty(nums):\n        for i in range(len(nums)):\n            for j in range(i+1, len(nums)):\n                if nums[i] == 0 and nums[j] == 0:\n                    return i, j\n        return -1, -1\n\n    # print(find_next_empty(nums))\n    # print(nums)\n    n = get_k(nums)\n    index, index_next = find_next_empty(nums)\n    # print(index, index_next)\n    for i in range(index+1, len(nums)):\n        # print(\"check\", nums[i], nums[index], index)\n        if check(nums, i):\n            nums[index], nums[i] = nums[i], nums[index]\n            # print(nums, index)\n            # print(index, i)\n            # print(\"check\", nums[index], nums[i], index_next, index_next)\n            # print(nums, index, index_next)\n            # print()\n\n    for i in range(index+1, len(nums)):\n        nums[index], nums[i] = nums[i], nums[index]\n        # print(nums, index)\n        # print(index, i)\n        # print(\"check\", nums[index], nums[i], index_next, index_next)\n        # print(nums, index, index_next)\n        # print()\n\n    # print(nums)\n    # print(nums[index], nums[index_next], index)\n    # print(nums, index, index_next)\n    # print()\n\n    return \"YES\"\n\nprint(solution(input()))"
    },
    {
        "number": 4019,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = []\n    for _ in range(m):\n        edges.append(list(map(int, stdin.split())))\n    if n - 1 < 2 * m:\n        edges.sort(key=lambda x: x[0])\n    tree = [i for i in range(n)]\n    for v in range(n - 1):\n        for u in range(n - 1):\n            if edges[v][1] == edges[u][0] and edges[u][1] not in tree:\n                tree.append(edges[u][1])\n            if edges[v][0] == edges[u][1] and edges[u][0] not in tree:\n                tree.append(edges[u][0])\n    return \"YES\" if tree == sorted(tree) else \"NO\"\n"
    },
    {
        "number": 4019,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # TODO\n    return \"NO\"\n\"\"\"\n\nimport collections"
    },
    {
        "number": 4019,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    vertices = list(map(int, stdin.split(' ')))\n    edges = []\n    for v1, v2 in enumerate(vertices):\n        for u1, u2 in enumerate(vertices):\n            if v1!= v2:\n                edges.append((v1, v2, 1))\n            else:\n                edges.append((v1, u1, 1))\n    D = []\n    for edge in edges:\n        v1, v2, d = edge\n        if D.count(d) == 0:\n            D.append(d)\n    if D == [1, 2, 3, 4]:\n        return 'YES'\n    else:\n        return 'NO'\n\ndef"
    },
    {
        "number": 4019,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, D = map(int, stdin.split())\n    edges = [list(map(int, stdin.split())) for i in range(m)]\n    visited = [False for i in range(n)]\n    \n    graph = [[] for i in range(n)]\n    for i in range(m):\n        for j in range(n):\n            if edges[i][j]!= 0 and not visited[j]:\n                graph[j].append(i)\n                visited[i] = True\n    \n    def dfs(index):\n        visited[index] = True\n        for i in range(index+1, n):\n            if visited[i] and edges[index][i]!= 0:\n                dfs(i)\n    \n    dfs(0)\n    \n    for i in range(n):\n        if not visited[i]:\n            return \"NO\"\n    \n    def bfs(index):\n        queue = [index]\n        visited[index] = True\n        while queue:\n            x = queue.pop(0)\n            for i in graph[x]:\n                if not visited[i]:\n                    queue.append(i)\n                    visited[i] = True\n    \n    bfs(0)\n    \n    for i in range(n):\n        if not visited[i]:\n            return \"NO\"\n    \n    def find_path(index):\n        path = []\n        visited[index] = True\n        path.append(index)\n        while path:\n            x = path.pop(0)\n            for i in graph[x]:\n                if not visited[i]:\n                    path.append(i)\n                    visited[i] = True\n        return path\n    \n    for i in range(n):\n        if not visited[i]:\n            if len(find_path(i)) == n-1:\n                return \"YES\"\n    \n    return \"NO\"\n    \n"
    },
    {
        "number": 4019,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, D = map(int, stdin.split())\n    if m == 1:\n        return \"NO\"\n    edges = [tuple(map(int, stdin.split())) for _ in range(m)]\n    visited = [set() for _ in range(n+1)]\n    pred = [set() for _ in range(n)]\n    visited[1] = {1}\n    stack = [1]\n    while stack:\n        v = stack.pop()\n        for u in pred[v]:\n            if u not in visited[u]:\n                visited[u].add(v)\n                stack.append(u)\n    return \"YES\" if D == len(edges) or D % 2 == 0 else \"NO\"\n"
    },
    {
        "number": 4020,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    h,m = stdin.split()\n    h = int(h)\n    m = int(m)\n    if h > 23 or m > 59:\n        return 'Invalid'\n    h = h*60 + m\n    if 0 <= h <= 23:\n        return '0' + str(h)\n    elif 24 <= h <= 23:\n        return ':' + str(h//24)\n    else:\n        return str(h//60) + \":\" + str(h%60)\n"
    },
    {
        "number": 4020,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    h1, m1, h2, m2 = map(int, stdin.split())\n    h1 += 1\n    h2 += 1\n    h3 = (h2 - h1) * 60 + m1\n    m3 = (m2 - m1) * 60 + m1\n    return str(h3) + \":\" + str(m3)\n    # Your code here\n    #Hint: you can use int() to convert to a number in the format hh:mm"
    },
    {
        "number": 4020,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, h = map(int, stdin.split())\n    h = (h - 24) * 60 + m\n    if h >= 60:\n        h -= 60\n        m = m % 60\n    if h >= 24:\n        h -= 24\n        m = m % 60\n    if h < 0:\n        h += 24\n        m = m % 60\n    if m < 0:\n        m += 60\n        h = h % 24\n    print(h, m, h%60, m%60)\n    return ':'.join([str(h).zfill(2), str(m).zfill(2)])\n        \n\nTest cases\nExample 1:\nInput:\n2\n0:00\n1:00\n\nOutput:\n0:00\n0:00\n\nExplanation:\nThe contest is going to participate in the contest. It starts at $h_1:m_1$ and ends at $h_2:m_2$. It is guaranteed that the contest lasts an even number of minutes (i.e. $m_1 \\% 2 = m_2 \\% 2$, where $x \\% y$ is $x$ modulo $y$). It is also guaranteed that the entire contest is held during a single day. And finally it is guaranteed that the contest lasts at least two minutes.\n\nExample 2:\nInput:\n2\n0:00\n1:00\n\nOutput:\n0:00\n0:00\n\nExplanation:\nThe contest is going to participate in the contest. It starts at $h_1:m_1$ and ends at $h_2:m_2$. It is guaranteed that the contest lasts an even number of minutes (i.e. $m_1 \\% 2 = m_2 \\% 2$, where $x \\% y$ is $x$ modulo $y$). It is also guaranteed that the entire contest is held during a single day. And finally it is guaranteed that the contest lasts at least two minutes.\n\nExample 3:\nInput:\n2\n0:30\n1:59\n\nOutput:\n0:00\n0:00\n\nExplanation:\nThe contest is going to participate in the contest. It starts at $h_1:m_1$ and ends at $h_2:m_2$. It is guaranteed that the contest lasts an even number of minutes (i.e. $m_1 \\% 2 = m_2 \\% 2$, where $x \\% y$ is $x$ modulo $y$). It is also guaranteed that the entire contest is held during a single day. And finally it is guaranteed that the contest lasts at least two minutes.\n\"\"\"\nimport math\ndef"
    },
    {
        "number": 4020,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\":\")[0])\n    m = int(stdin.split(\":\")[1])\n    h = n % 24\n    m = m % 60\n    if h == 0:\n        print(h, \":\", m)\n    else:\n        print(h, \":\", \"0:\", m)\n        h = h + 24\n        m = m - 60\n        if h == 24:\n            print(h, \":\", m)\n        else:\n            print(h, \":\", \"0:\", m)\n            h = h - 24\n            m = m - 60\n            if h == 0:\n                print(h, \":\", m)\n            else:\n                print(h, \":\", \"0:\", m)\n                h = h - 24\n                m = m - 60\n                if h == 0:\n                    print(h, \":\", m)\n                else:\n                    print(h, \":\", \"0:\", m)\n                    h = h - 24\n                    m = m - 60\n                    if h == 0:\n                        print(h, \":\", m)\n                    else:\n                        print(h, \":\", \"0:\", m)\n                        h = h - 24\n                        m = m - 60\n                        if h == 0:\n                            print(h, \":\", m)\n                        else:\n                            print(h, \":\", \"0:\", m)\n                            h = h - 24\n                            m = m - 60\n                            if h == 0:\n                                print(h, \":\", m)\n                            else:\n                                print(h, \":\", \"0:\", m)\n                                h = h - 24\n                                m = m - 60\n                                if h == 0:\n                                    print(h, \":\", m)\n                                else:\n                                    print(h, \":\", \"0:\", m)\n                                    h = h - 24\n                                    m = m - 60\n                                    if h == 0:\n                                        print(h, \":\", m)\n                                    else:\n                                        print(h, \":\", \"0:\", m)\n                                        h = h - 24\n                                        m = m - 60\n                                        if h == 0:\n                                            print(h, \":\", m)\n                                        else:\n                                            print(h, \":\", \"0:\", m)\n                                            h = h - 24\n                                            m = m - 60\n                                            if h == 0:\n                                                print(h, \":\", m)\n                                            else:\n                                                print(h, \":\", \"0:\", m)\n                                                h = h - 24\n                                                m = m - 60\n                                                if h == 0:\n                                                    print(h, \":\", m)\n                                                else:\n                                                    print(h, \":\", \"0:\", m)\n                                                    h = h - 24\n                                                    m = m - 60\n                                                    if h == 0:\n                                                        print(h, \":\", m)\n                                                    else:\n                                                        print(h, \":\", \"0:\", m)\n                                                        h = h - 24\n                                                        m = m - 60\n                                                        if h == 0:\n                                                            print(h, \":\", m)\n                                                        else:\n                                                            print(h, \":\", \"0:\", m)\n                                                            h = h - 24\n                                                            m = m - 60\n                                                            if h == 0:\n                                                                print(h, \":\", m)\n                                                            else:\n                                                                print(h, \":\", \"0:\", m)\n                                                                h = h - 24\n                                                                m = m - 60\n                                                                if h == 0:\n                                                                    print(h, \":\", m)\n                                                                else:\n                                                                    print(h, \":\", \"0:\", m)\n                                                                    h = h - 24\n                                                                    m = m - 60\n                                                                    if h == 0:\n                                                                        print(h, \":\", m)\n                                                                    else:\n                                                                        print(h, \":\", \"0:\", m)\n                                                                        h = h - 24\n                                                                        m = m - 60\n                                                                        if h == 0:\n                                                                            print(h, \":\", m)\n                                                                        else:\n                                                                            print(h, \":\", \"0:\", m)\n                                                                            h = h - 24\n                                                                            m = m - 60\n                                                                            if h == 0:\n                                                                                print(h, \":\", m)\n                                                                            else:\n                                                                                print(h, \":\", \"0:\", m)\n                                                                                h = h - 24\n                                                                                m = m - 60\n                                                                                if h == 0:\n                                                                                    print(h, \":\", m)\n                                                                                else:\n                                                                                    print(h, \":\", \"0:\", m)\n                                                                                    h = h - 24\n                                                                                    m = m - 60\n                                                                                    if h == 0:\n                                                                                        print(h, \":\", m)\n                                                                                    else:\n                                                                                        print(h, \":\", \"0:\", m)\n                                                                                        h = h - 24\n                                                                                        m = m - 60\n                                                                                        if h == 0:\n                                                                                            print(h, \":\", m)\n                                                                                        else:\n                                                                                            print(h, \":\", \"0:\", m)\n                                                                                            h = h - 24\n                                                                                            m = m - 60\n                                                                                            if h == 0:\n                                                                                              print(h, \":\","
    },
    {
        "number": 4020,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    h, m = map(int, stdin.split())\n    \n    if 0 < h <= 23 and 0 < m <= 59:\n        return \"00:\" + \":\".join(str(h)+\":\"+str(m))\n    else:\n        return \"00:\" + str(h) + \":\" + str(m)\n\n#####\n"
    },
    {
        "number": 4020,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    h, m = map(int, stdin.split(' '))\n    hh = h\n    mm = m\n    m = 59 if m < 59 else m % 60\n    if hh <= 23 and mm <= 59 and (hh + m) % 10!= 0:\n        if (h - 23) % 10 == 0:\n            hh += 1\n        else:\n            mm += 1\n    if hh >= 23:\n        h -= 23\n    if hh <= 23:\n        if (m + 59) % 10 == 0:\n            m += 1\n        else:\n            m += 59\n    if m == 59 and hh > 23:\n        m += 1\n    if m == 59:\n        m = 59\n    m = str(m).zfill(2)\n    hh = str(hh).zfill(2)\n    print(hh + ':' + m + ':00')\n\ndef"
    },
    {
        "number": 4020,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    h_1, m_1, h_2, m_2 = map(int, stdin.split(\":\"))\n    s = (h_2 - h_1) * (m_2 - m_1)\n    return \"{:02d}:{:02d}\".format(h_1, m_1 + s % 60)\n"
    },
    {
        "number": 4020,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    h, m = map(int, stdin.split(' '))\n    if h > 23 or m > 59:\n        return ''\n    if m < 0:\n        h += 12\n        m = 0\n    if m == 0:\n        if m < 60:\n            m += 12\n    else:\n        m += 12\n    if h > 23:\n        h -= 24\n        if m < 60:\n            m += 12\n    h += h % 24\n    m += m % 60\n    h += h % 24\n    m += m % 24\n    return str(h) + ':' + str(m)\n\nfor _ in range(int(input())):\n    print(solution(input()))\n"
    },
    {
        "number": 4020,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    h, m = map(int, stdin.split())\n    h_min = h\n    m_min = m\n    answer = \"\"\n    if h_min < 23:\n        if m_min % 2 == 0:\n            m_min -= 1\n            h_min += 1\n        else:\n            h_min += 1\n    else:\n        if m_min % 2 == 0:\n            m_min -= 1\n            h_min -= 1\n        else:\n            h_min -= 1\n            m_min += 1\n    answer = str(h_min) + \":\" + str(m_min)\n    return answer"
    },
    {
        "number": 4020,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    h, m, sec = map(int, stdin.split())\n    if sec == 0:\n        h = (h + 23) % 60\n        m = (m + 59) % 60\n    elif sec == 1:\n        if h == 0:\n            h = 23\n        elif m == 0:\n            m = 59\n        else:\n            h = h - 1\n            m = m - 59\n    else:\n        if h == 0:\n            h = 23\n        elif m == 0:\n            m = 59\n        else:\n            h = h - 1\n            m = m - 59\n    return '{}:{}'.format(h, m)"
    },
    {
        "number": 4021,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    \n    if x > n:\n        x = n - x\n    \n    if x == 0:\n        return '1'\n    \n    x = x - 1\n    \n    answer = ''\n    \n    while True:\n        if x >= n:\n            answer += '0'\n            x -= n\n        elif x == 0:\n            return answer\n        else:\n            answer += '1'\n            x -= 1\n\nsolution(input())\n"
    },
    {
        "number": 4021,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    h = [0 for _ in range(n+1)]\n    answer = 0\n    for i in range(1, n+1):\n        h[i] = int(stdin[i-1])\n        answer += (h[i] * h[i-1])\n    return str(answer)\n"
    },
    {
        "number": 4021,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    answer = \"\"\n    if a < 1:\n        return str(0)\n    if a < 2:\n        return str(1)\n    if a < 5:\n        return str(2)\n    if a < 6:\n        return str(3)\n    if a < 9:\n        return str(4)\n    if a < 12:\n        return str(5)\n    if a < 17:\n        return str(6)\n    if a < 18:\n        return str(7)\n    if a < 20:\n        return str(8)\n    if a < 30:\n        return str(9)\n    if a < 40:\n        return str(10)\n    if a < 50:\n        return str(11)\n    if a < 60:\n        return str(12)\n    if a < 70:\n        return str(13)\n    if a < 80:\n        return str(14)\n    if a < 90:\n        return str(15)\n    if a < 100:\n        return str(16)\n    if a < 120:\n        return str(17)\n    if a < 150:\n        return str(18)\n    if a < 200:\n        return str(19)\n    if a < 300:\n        return str(20)\n    if a < 400:\n        return str(21)\n    if a < 500:\n        return str(22)\n    if a < 600:\n        return str(23)\n    if a < 700:\n        return str(24)\n    if a < 800:\n        return str(25)\n    if a < 900:\n        return str(26)\n    if a < 1000:\n        return str(27)\n    if a < 1100:\n        return str(28)\n    if a < 1200:\n        return str(29)\n    if a < 1300:\n        return str(30)\n    if a < 1400:\n        return str(31)\n    if a < 1500:\n        return str(32)\n    if a < 1600:\n        return str(33)\n    if a < 1800:\n        return str(34)\n    if a < 1900:\n        return str(35)\n    if a < 2000:\n        return str(36)\n    if a < 2100:\n        return str(37)\n    if a < 2200:\n        return str(38)\n    if a < 2400:\n        return str(39)\n    if a < 2500:\n        return str(40)\n    if a < 2600:\n        return str(41)\n    if a < 2700:\n        return str(42)\n    if a < 3000:\n        return str(43)\n    if a < 3200:\n        return str(44)\n    if a < 3500:\n        return str(45)\n    if a < 3200:\n        return str(46)\n    if a < 4500:\n        return str(47)\n    if a < 5000:\n        return str(48)\n    if a < 6500:\n        return str(49)\n    if a < 7000:\n        return str(50)\n    if a < 7500:\n        return str(51)\n    if a < 7700:\n        return str(52)\n    if a < 8500:\n        return str(53)\n    if a < 9000:\n        return str(54)\n    if a < 9500:\n        return str(55)\n    if a < 9700:\n        return str(56)\n    if a < 10000:\n        return str(57)\n    if a < 11000:\n        return str(58)\n    if a < 12000:\n        return str(59)\n    if a < 12500:\n        return str(60)\n    if a < 13000:\n        return str(61)\n    if a < 13500:\n        return str(62)\n    if a < 14000:\n        return str(63)\n    if a < 14500:\n        return str(64)\n    if a < 15000:\n        return str(65)\n    if a < 16000:\n        return str(66)\n    if a < 17000:\n        return str(67)\n    if a < 18000:\n        return str(68)\n    if a < 19000:\n        return str(69)\n    if a < 20000:\n        return str(70)\n    if a < 21000:\n        return str(71)\n    if a < 22000:\n        return str(72)\n    if a < 23000:\n        return str(73)\n    if a < 24000:\n        return str(74)\n    if a < 25000:\n        return str(75)\n    if a < 26000:\n        return str(76)\n    if a < 27000:\n        return str(77)\n    if a < 28000:\n        return str(78)\n    if a < 29000:\n        return str(79)\n    if a < 30000:\n        return str(80)\n    if a < 32000:\n        return str(81)\n    if a < 33000:\n        return str(82)\n    if a < 34000:\n        return str(83)\n    if a < 35000:\n        return str(84)\n    if a < 36000:\n        return str(85)\n    if a < 37000:\n        return str(86)\n    if a < 38000:\n        return str(87)\n    if a < 39000:\n        return str(88)\n    if a < 40000:\n        return str(89)\n    if a < 40000:\n        return str(90)\n    if a < 44000:\n        return str(91)\n    if a < 40000:\n        return str(92)\n    if a < 45000:\n        return str(93)\n    if a < 40000:\n        return str(94)\n    if a < 46000:\n        return str(95)\n    if a < 40000:\n        return str(96)\n    if a < 47000:\n        return str(97)\n    if a < 50000:\n        return str(98)\n    if a < 50000:\n        return str(99)\n    if a < 54000:\n        return str(100)\n    if a < 55000:\n        return str(101)\n    if a < 56000:\n        return str(102)\n    if a < 57000:\n        return str(103)\n    if a < 59000:\n        return str(104)\n    if a < 6000:\n        return str(105)\n    if a < 60000:\n        return str(106)\n    if a < 60000:\n        return str(107)\n    if a < 64000:\n        return str(108)\n    if a < 65000:\n        return str(109)\n    if a < 66000:\n        return str(110)\n    if a < 67000:\n        return str(111)\n    if a < 69000:\n        return str(112)\n    if a < 70000:\n        return str(113)\n    if a < 71000:\n        return str(114)\n    if a < 72000:\n        return str(115)\n    if a < 73000:\n        return str(116)\n    if a < 74000:\n        return str(117)\n    if a < 75000:\n        return str(118)\n    if a < 76000:\n        return str(119)\n    if a < 77000:\n        return str(120)\n    if a < 78000:\n        return str(121)\n    if a < 79000:\n        return str(122)\n    if a < 80000:\n        return str(123)\n    if a < 81000:\n        return str(124)\n    if a < 82000:\n        return str(125)\n    if a < 83000:\n        return str(126)\n    if a < 84000:\n        return str(127)\n    if a < 85000:\n        return str(128)\n    if a < 86000:\n        return str(129)\n    if a < 87000:\n        return str(130)\n    if a < 88000:\n        return str(131)\n    if a < 89000:\n        return str(132"
    },
    {
        "number": 4021,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.strip())\n    b = 2*a\n    c = a - b\n    d = (a * a + b * b) // 2\n    e = b - c + d\n    f = (a * a - d * d) // 2\n    g = c * c\n    h = (a + b + c + d - f - g) // 2\n    return str(h)\n"
    },
    {
        "number": 4021,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    i = int(input())\n    a = str(i)\n    \n    if len(a) == 2:\n        return a[1]\n    if len(a) == 3:\n        return int(a[0]+a[1]+a[2])\n    else:\n        return int(a[0]+a[1]+a[2])\n"
    },
    {
        "number": 4021,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin) - 1)"
    },
    {
        "number": 4021,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = [0]\n    a[0] = a[1] = a[2] = a[3] = a[4] = a[5] = a[6] = a[7] = a[8] = a[9] = a[10] = a[11] = a[12] = a[13] = a[14] = a[15] = a[16] = a[17] = a[18] = a[19] = a[20] = a[21] = a[22] = a[23] = a[24] = a[25] = a[26] = a[27] = a[28] = a[29] = a[30] = a[31] = a[32] = a[33] = a[34] = a[35] = a[36] = a[37] = a[38] = a[39] = a[40] = a[41] = a[42] = a[43] = a[44] = a[45] = a[46] = a[47] = a[48] = a[49] = a[50] = a[51] = a[52] = a[53] = a[54] = a[55] = a[56] = a[57] = a[58] = a[59] = a[60] = a[61] = a[62] = a[63] = a[64] = a[65] = a[66] = a[67] = a[68] = a[69] = a[70] = a[71] = a[72] = a[73] = a[74] = a[75] = a[76] = a[77] = a[78] = a[79] = a[80] = a[81] = a[82] = a[83] = a[84] = a[85] = a[86] = a[87] = a[88] = a[89] = a[90] = a[91] = a[92] = a[93] = a[94] = a[95] = a[96] = a[97] = a[98] = a[99] = a[100] = a[101] = a[102] = a[103] = a[104] = a[105] = a[106] = a[107] = a[108] = a[109] = a[110] = a[111] = a[112] = a[113] = a[114] = a[115] = a[116] = a[117] = a[118] = a[119] = a[120] = a[121] = a[122] = a[123] = a[124] = a[125] = a[126] = a[127] = a[128] = a[129] = a[130] = a[131] = a[132] = a[133] = a[134] = a[135] = a[136] = a[137] = a[138] = a[139] = a[140] = a[141] = a[142] = a[143] = a[144] = a[145] = a[146] = a[147] = a[148] = a[149] = a[150] = a[151] = a[152] = a[153] = a[154] = a[155] = a[156] = a[157] = a[158] = a[159] = a[160] = a[161] = a[162] = a[163] = a[164] = a[165] = a[166] = a[167] = a[168] = a[169] = a[170] = a[171] = a[172] = a[173] = a[174] = a[175] = a[176] = a[177] = a[178] = a[179] = a[180] = a[181] = a[182] = a[183] = a[184] = a[185] = a[186] = a[187] = a[188] = a[189] = a[190] = a[191] = a[192] = a[193] = a[194] = a[195] = a[196] = a[197] = a[198] = a[199] = a[200] = a[201] = a[202] = a[203] = a[204] = a[205] = a[206] = a[207] = a[208] = a[209] = a[210] = a[211] = a[212] = a[213] = a[214] = a[215] = a[216] = a[217] = a[218] = a[219] = a[220] = a[221] = a[222] = a[223] = a[224] = a[225] = a[226] = a[227] = a[228] = a[229] = a[230] = a[231] = a[232] = a[233] = a[234] = a[235] = a[236] = a[237] = a[238] = a[239] = a[240] = a[241] = a[242] = a[243] = a[244] = a[245] = a[246] = a[247] = a[248] = a[249] = a[250] = a[251] = a[252] = a[253] = a[254] = a[255] = a[256] = a[257] = a[258] = a[259] = a[260] = a[261] = a[262] = a[263] = a[264] = a[265] = a[266] = a[267] = a[268] = a[269] = a[270] = a[271] = a[272] = a[273] = a[274] = a[275] = a[276] = a[277] = a[278] = a[279] = a[280] = a[281] = a[282] = a[283] = a[284] = a[285] = a[286] = a[287] = a[288] = a[289] = a[290] = a[291] = a[292] = a[293] = a[294] = a[295] = a[296] = a[297] = a[298] = a[299] = a[300] = a[301] = a[302] = a[303] = a[304] = a[305] = a[306] = a[307] = a[308] = a[309] = a[310] = a[311] = a[312] = a[313] = a[314] = a[315] = a[316] = a[317] = a[318] = a[319] = a[320] = a[321] = a[322] = a[323] = a[324] = a[325] = a[326] = a[327] = a[328] = a[329] = a[330] = a[331] = a[332] = a[333] = a[334] = a[335] = a[336] = a[337] = a[338] = a[339] = a[340] = a[341] = a[342] = a[343] = a[344] = a[345] = a[346] = a[347] = a[348] = a[349] = a[350] = a[351] = a[352] = a[353] = a[354] = a[355] = a[356] = a[357] = a[358] = a[359] = a[360] = a[361] = a[362] = a[363] = a[364] = a[365] = a[366] = a[367] = a[368] = a[369] = a[370] = a[371] = a[372] = a[373] = a[374] = a[375] = a[376] = a[377] = a[378] = a[379] = a[380] = a[381] = a[382] = a[383] = a[384] = a[385] = a[386] = a[387] = a[388] = a[389] = a["
    },
    {
        "number": 4021,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    answer = \"2\"\n    for i in range(2, int(stdin) + 1):\n        answer = answer + str(i)\n        answer = answer + str(i ** 2)\n        answer = answer + str(i ** 3)\n        answer = answer + str(i ** 4)\n        answer = answer + str(i ** 5)\n        answer = answer + str(i ** 6)\n        answer = answer + str(i ** 7)\n        answer = answer + str(i ** 8)\n        answer = answer + str(i ** 9)\n        answer = answer + str(i ** 10)\n    return answer\n\n\n2\n5\n32\n\n2\n34\n6\n32\n\n2\n1\n3\n5\n6\n7\n8\n\nOutput\n6\n\nInput\n2\n\nOutput\n2\n\"\"\"\n\ndef"
    },
    {
        "number": 4021,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    import math\n    def int2binary(i):\n        if i==1:\n            return '0'\n        elif i==2:\n            return '1'\n        else:\n            binary = []\n            for j in str(math.pow(2,i-1)):\n                if j == '0':\n                    binary.append('0')\n                else:\n                    binary.append('1')\n            return ''.join(binary)\n\n    def binary2int(binary):\n        i = 0\n        while binary:\n            if binary[-1] == '0':\n                binary = binary[:-1]\n                i += 1\n            else:\n                binary = binary[:-1]\n                i -= 1\n        return i\n\n    def power(i,n):\n        if n == 0:\n            return 1\n        else:\n            return n*power(i,n-1)\n    \n    def factorial(i):\n        f = 1\n        while i > 1:\n            f *= i\n            i -= 1\n        return f\n    \n    l = len(stdin)\n    lst = [0] * 2**l\n    i = 0\n    for k in range(2,int(math.pow(2,l))+1):\n        lst[k] = int2binary(k)\n    \n    for i in range(2,len(lst)):\n        lst[i] = lst[i] + lst[i-1]\n        if i % 2 == 0:\n            lst[i] = lst[i] + lst[i//2]\n    \n    print(int(power(2,l)))\n    print(binary2int(lst))"
    },
    {
        "number": 4021,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin))"
    },
    {
        "number": 4022,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    l = []\n    r = []\n    l = list(map(int, stdin.split()))\n    l.sort(reverse=True)\n    r = list(range(n))\n    r.sort(reverse=True)\n    l = list(map(int, stdin.split()))\n    length = 0\n    for i in range(0, n):\n        if i == 0 or i == n - 1:\n            length = max(length, l[i] - r[i])\n        elif r[i - 1] == l[i] and r[i] == l[i + 1]:\n            length = max(length, l[i] - r[i])\n        else:\n            length = max(length, l[i] - r[i])\n    return str(length)\n"
    },
    {
        "number": 4022,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, *data = map(int, stdin)\n    return str(len(set(data)) - 1)\n\n'''"
    },
    {
        "number": 4022,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    segments = [int(s) for s in stdin.split() if s.isdigit()]\n    answer = []\n    for i in range(n):\n        answer.append(segments[i])\n        segments[i] -= 1\n    if len(answer) == 0:\n        answer.append(0)\n    if len(answer) == 1:\n        answer.append(0)\n    answer.sort()\n    return answer[-1]\n"
    },
    {
        "number": 4022,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    segments = []\n    for i in range(n):\n        segments.append(list(map(int, stdin.strip().split())))\n    sorted_segments = sorted(segments, key = lambda x: x[0])\n    sorted_segments.sort()\n    intersection = set()\n    for i in range(len(sorted_segments)):\n        if sorted_segments[i][1]!= sorted_segments[i][0] + 1:\n            intersection.add(sorted_segments[i])\n    if len(intersection) == 0:\n        return \"0\"\n    if len(intersection) == 1:\n        return str(intersection[0][1])\n    else:\n        return str(len(intersection))\n\n-----Bug fix-----\n\nIn the first example you will get an intersection with the length $7$ if you remove the segment $[1;5]$ or the intersection $[1;5]$ (length $4$) if you remove the segment $[3;10]$.\nIn the second example you will get an intersection with the length $7$ if you remove the segment $[1;5]$ or the intersection $[1;5]$ (length $4$) if you remove the segment $[3;10]$.\nIn the third example you will get an intersection with the length $7$ if you remove the segment $[1;5]$ or the intersection $[1;5]$ (length $4$) if you remove the segment $[3;10]$.\nIn the fourth example you will get an intersection with the length $7$ if you remove the segment $[1;5]$ or the intersection $[1;5]$ (length $4$) if you remove the segment $[3;10]$.\n\n\n-----Extra Credit-----\n\nTo get the intersection of the segments, you need to remove both segments at the same time, at least one segment has to be in the same segment. But we need to keep track of the smallest segments that need to be removed.\n\nSince you are eliminating segments, you should save the current smallest segments to the list of segments that need to be removed.\n\nThe goal is to make sure that for each segment, the intersection with the smallest segment will be there.\n\nFor example, if you remove one segment, you need to keep only the smallest segment that needs to be removed.\n\nFor example, if you remove two segments, you need to keep only the first smallest segment that needs to be removed.\n\nA segment may be removed if it has the smallest length or it does not intersect with any segment.\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4022,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    line = stdin.split(\" \")\n    if n == 0:\n        return \"0\"\n    elif n == 1:\n        return \"1\"\n    elif n == 2:\n        return \"2\"\n    elif n == 3:\n        return \"3\"\n    else:\n        line.remove(line[-1])\n        line.remove(line[-1])\n        return \"\".join(line)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4022,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, *seq = map(int, stdin.split())\n    return str(int(sum(seq)/n) + 1)"
    },
    {
        "number": 4022,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip().split()[-1])\n    segments = []\n    for _ in range(n):\n        segments.append(list(map(int, stdin.strip().split())))\n    return ''.join(str(len(set(segments))) +'' +''.join(map(str, segments)))\n\nprint(solution(\"4 3 2 0 4 5 3 10 20\"))\n"
    },
    {
        "number": 4022,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    x = 0\n    y = 0\n    length = 0\n    \n    for i in range(int(stdin)):\n        \n        x, y, length = int(stdin[i]) - 1, int(stdin[i+1]) - 1, int(stdin[i+2]) - 1\n        \n        if length!= 0:\n            y = y - 1\n            \n        if x == y:\n            y = 0\n        \n        if x == 0:\n            y = y + 1\n        \n        if y == x:\n            y = 0\n        \n        if y == 0:\n            y = y + 1\n        \n        if x == y:\n            x = 0\n        \n        if x == 0:\n            x = x + 1\n        \n        if x == y:\n            x = y + 1\n        \n        length = length + 1\n        \n    return str(length)"
    },
    {
        "number": 4022,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    lines = [int(line) for line in stdin.strip().split(\"\\n\")]\n    curr_segments = []\n    for line in lines:\n        if line < 0:\n            curr_segments.remove(line)\n        else:\n            curr_segments.append(line)\n    \n    curr_segments.sort()\n    answer = 1\n    for i in range(len(curr_segments) - 1):\n        if curr_segments[i + 1] - curr_segments[i] == 1:\n            answer += 1\n            curr_segments.pop(i + 1)\n        elif curr_segments[i + 1] - curr_segments[i] == 2:\n            curr_segments.pop(i + 1)\n        else:\n            break\n    answer += curr_segments[-1] - curr_segments[0]\n    return answer\n\nn = int(input())\nlines = [int(line) for line in input().strip().split()]\nsegments = []\nfor line in lines:\n    segments.append(line - 1)\nsegments.sort()\nprint(segments[-1] - segments[0])\n\nn = int(input())\nlines = [int(line) for line in input().strip().split()]\nsegments = []\nfor line in lines:\n    segments.append(line - 1)\nsegments.sort()\n\na, b = 0, 0\nfor i in range(len(segments) - 1):\n    a, b = segments[i + 1] - segments[i] + 1, segments[i]\nprint(a)\nprint(b)"
    },
    {
        "number": 4022,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    lst = list(map(int, stdin.split()))\n    #lst.sort()\n    print(min(lst, key=lambda x:len(str(x))))\n    #print(lst)\n    segs = [str(s) for s in lst]\n    #print(segs)\n    if len(segs)!= n:\n        return \"0\"\n    else:\n        #print(lst)\n        #print(segs)\n        #print(lst[0])\n        i = 0\n        while i < len(segs) - 1:\n            if segs[i] == segs[i + 1]:\n                if segs[i] not in segs[i + 2:]:\n                    segs.pop(i + 1)\n                    if len(segs) == 0:\n                        return \"0\"\n                else:\n                    return str(segs[i + 2])\n            i += 1\n        return \"0\"\n"
    },
    {
        "number": 4023,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int,stdin.split()[1:]))\n    \n    if n % 2 == 1:\n        return \"NO\"\n\n    a = sorted(a)\n\n    result = []\n    for i in range(n):\n        if i == 0:\n            result.append(a[i])\n            result.append(a[i])\n            result.append(a[i])\n        else:\n            result.append(a[i])\n            result.append(a[i])\n            result.append(a[i])\n\n    return \"YES\" if all(i == max(result) for i in result) else \"NO\"\n"
    },
    {
        "number": 4023,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.split()))\n    for i in range(n-1):\n        if a[i] == a[i+1]:\n            a[i] += 1\n            a[i+1] -= 2\n    return 'YES' if a == sorted(a) else 'NO'\n"
    },
    {
        "number": 4023,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n,*A = map(int,stdin.split())\n    \n    max_val = max(map(lambda x:x*10**9,A))\n    if max_val>1:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4023,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    \n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    \n    for i in range(n):\n        if i == 0:\n            a[i] = b[i]\n            continue\n        if i == 1:\n            a[i] = b[i]\n            continue\n        if i == 2:\n            a[i] = b[i]\n            continue\n        if i == 3:\n            a[i] = b[i]\n            continue\n        if i == 4:\n            a[i] = b[i]\n            continue\n        if i == 5:\n            a[i] = b[i]\n            continue\n    \n    #print(a)\n    \n    #a[0] = a[0] + a[1]\n    #a[1] = a[1] + a[2]\n    #a[2] = a[2] + a[3]\n    #a[3] = a[3] + a[4]\n    #a[4] = a[4] + a[5]\n    \n    #print(a)\n    \n    if a[0] == a[1] and a[1] == a[2] and a[2] == a[3]:\n        return \"YES\"\n    elif a[0] == a[1] and a[1] == a[2] and a[2] == a[4]:\n        return \"YES\"\n    elif a[0] == a[1] and a[1] == a[3] and a[3] == a[4]:\n        return \"YES\"\n    elif a[0] == a[2] and a[2] == a[3] and a[3] == a[4]:\n        return \"YES\"\n    elif a[0] == a[2] and a[2] == a[4] and a[4] == a[3]:\n        return \"YES\"\n    elif a[0] == a[3] and a[3] == a[4] and a[4] == a[2]:\n        return \"YES\"\n    elif a[0] == a[4] and a[4] == a[3] and a[3] == a[2]:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4023,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    height = [int(x) for x in stdin.split()]\n    set_height = set(height)\n\n    for i in range(n):\n        if len(set_height) == 0:\n            return 'NO'\n        a, b, c, d = height.pop(0), height.pop(0), height.pop(0), height.pop(0)\n        set_height.add(b - c + d)\n        set_height.add(c - a + d)\n        set_height.add(c - b + a)\n        set_height.add(d - a + b)\n        set_height.add(d - c + b)\n        set_height.add(d - b + c)\n        set_height.add(d - c + b)\n\n    return 'YES'\n"
    },
    {
        "number": 4023,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n\n    for i in range(n-1):\n        a[i] = a[i] - a[i+1]\n    \n    a.insert(0,0)\n    a.append(n)\n    \n    result = \"YES\"\n    \n    for i in range(n):\n        if a[i] < 1:\n            result = \"NO\"\n            break\n        \n    return result\n"
    },
    {
        "number": 4023,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a_1, a_2, a_3, a_4, n = [int(i) for i in stdin.split()]\n    n = a_4-a_1+n\n    x = [2]\n    y = [2]\n    z = []\n    for i in range(1, n+1):\n        x.append(x[i-1]*2)\n        y.append(y[i-1]*2)\n        z.append(z[i-1]*2+1)\n    for i in range(n):\n        if a_1+2*z[i]==a_2+3*z[i]==a_3+4*z[i]==a_4+5*z[i]:\n            print(\"YES\")\n            return \"YES\"\n    print(\"NO\")\n    return \"NO\"\n\n\"\"\"\n"
    },
    {
        "number": 4023,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    if len(a) == 0:\n        return \"YES\"\n    if len(a) == 1:\n        return \"NO\"\n    if n % 2!= 0:\n        return \"NO\"\n    a.sort()\n    if a[-2] == a[-1]:\n        return \"NO\"\n    for i in range(n - 1):\n        a[i] += a[i + 1]\n        a[i + 1] = 0\n    for i in range(n // 2):\n        a[i] = a[i] + a[i + 1]\n        a[i + 1] = 0\n    a = a[:-1]\n    a = sorted(a)\n    answer = \"NO\"\n    for i in a:\n        if a[-1] - a[0] == i - a[i]:\n            answer = \"YES\"\n            break\n    return answer"
    },
    {
        "number": 4023,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n\n    # temporary variable\n    # temporary variable\n    # temporary variable\n    # temporary variable\n\n    # number of parts of the wall\n    # initial height of the parts of the wall\n    # the number of bricks on each part of the wall\n    # the height of each brick on the current part\n\n    wall = [[0 for _ in range(n+1)] for _ in range(n+1)]\n    parts = [[0 for _ in range(n+1)] for _ in range(n+1)]\n    # print(wall)\n    # print(parts)\n\n    # height of the wall\n    wall[1][1] = 1\n    # print(wall)\n\n    # height of each part of the wall\n    # height of each part of the wall\n    # height of each part of the wall\n    # height of each part of the wall\n    # height of each part of the wall\n    # height of each part of the wall\n    # height of each part of the wall\n    # height of each part of the wall\n\n    # bricks of each part of the wall\n    # bricks of each part of the wall\n\n    # height of each part of the wall\n    # height of each part of the wall\n    # height of each part of the wall\n    # height of each part of the wall\n    # height of each part of the wall\n    # height of each part of the wall\n\n    # bricks of each part of the wall\n    # bricks of each part of the wall\n    # bricks of each part of the wall\n    # bricks of each part of the wall\n    # bricks of each part of the wall\n    # bricks of each part of the wall\n    # bricks of each part of the wall\n\n    # height of each part of the wall\n    # height of each part of the wall\n    # height of each part of the wall\n    # height of each part of the wall\n    # height of each part of the wall\n    # height of each part of the wall\n    # height of each part of the wall\n    # height of each part of the wall\n\n    # height of each part of the wall\n    # height of each part of the wall\n    # height of each part of the wall\n    # height of each part of the wall\n    # height of each part of the wall\n    # height of each part of the wall\n    # height of each part of the wall\n    # height of each part of the wall\n\n    # height of each part of the wall\n    # height of each part of the wall\n    # height of each part of the wall\n    # height of each part of the wall\n    # height of each part of the wall\n    # height of each part of the wall\n    # height of each part of the wall\n    # height of each part of the wall\n\n    # height of each part of the wall\n    # height of each part of the wall\n    # height of each part of the wall\n    # height of each part of the wall\n    # height of each part of the wall\n    # height of each part of the wall\n    # height of each part of the wall\n\n    # height of each part of the wall\n    # height of each part of the wall\n    # height of each part of the wall\n    # height of each part of the wall\n    # height of each part of the wall\n    # height of each part of the wall\n\n    # height of each part of the wall\n    # height of each part of the wall\n    # height of each part of the wall\n    # height of each part of the wall\n    # height of each part of the wall\n    # height of each part of the wall\n\n    # height of each part of the wall\n    # height of each part of the wall\n    # height of each part of the wall\n    # height of each part of the wall\n    # height of each part of the wall\n    # height of each part of the wall\n\n    # height of each part of the wall\n    # height of each part of the wall\n    # height of each part of the wall\n    # height of each part of the wall\n    # height of each part of the wall\n    # height of each part of the wall\n\n    # height of each part of the wall\n    # height of each part of the wall\n    # height of each part of the wall\n    # height of each part of the wall\n    # height of each part of the wall\n    # height of each part of the wall\n\n    # height of each part of the wall\n    # height of each part of the wall\n    # height of each part of the wall\n    # height of each part of the wall\n    # height of each part of the wall\n    # height of each part of the wall\n    # height of each part of the wall\n    # height of each part of the wall\n\n    # height of each part of the wall\n    # height of each part of the wall\n    # height of each part of the wall\n    # height of each part of the wall\n    # height of each part of the wall\n    # height of each part of the wall\n    # height of each part of the wall\n\n    # height of each part of the wall\n    # height of each part of the wall\n    # height of each part of the wall\n    # height of each part of the wall\n    # height of each part of the wall\n    # height of each part of the wall\n\n    # height of each part of the wall\n    # height of each part of the wall\n    # height of each part of the wall\n    # height of each part of the wall\n    # height of each part of the wall\n    # height of each part of the wall\n    # height of each part of the wall\n    # height of each part of the wall\n\n    # height of each part of the wall\n    # height of each part of the wall\n    # height of each part of the wall\n    # height of each part of the wall\n    # height of each part of the wall\n    # height of each part of the wall\n    # height of each part of the wall\n\n    # height of each part of the wall\n    # height of each part of the wall\n    # height of each part of the wall\n    # height of each part of the wall\n    # height of each part of the wall\n    # height of each part of the wall\n    # height of each part of the wall\n\n    # height of each part of the wall\n    # height of each part of the wall\n    # height of each"
    },
    {
        "number": 4023,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, *_ = map(int, stdin.split())\n\n    answer = \"\"\n\n    if (n == 1):\n        answer = \"YES\"\n    else:\n        answer = \"NO\"\n\n    return answer\n\"\"\""
    },
    {
        "number": 4024,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\""
    },
    {
        "number": 4024,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    S = []\n    for i in range(n):\n        S.append(input())\n    print(solution_aux(S, k))\n\ndef"
    },
    {
        "number": 4024,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin\n    for _ in range(n - 1):\n        s = s[1:] + s[:1] + s[2:] + s[:2]\n    print(s)\n    print(min(map(int, s.split())))\n    return '-1'\n\nprint(solution(\"asdf\"))"
    },
    {
        "number": 4024,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    s = stdin[1:-1]\n    l = len(s)\n    if l < k:\n        return -1\n    if l == k:\n        return 0\n    \n    S = []\n    for s in s:\n        if s in S:\n            continue\n        if s not in S:\n            S.append(s)\n    if not S:\n        return -1\n    for i in range(k):\n        if len(S) > k:\n            return -1\n        if s not in S[i:i+k]:\n            return -1\n    return len(S)\n"
    },
    {
        "number": 4024,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.split()\n    S = set()\n    for i in s:\n        S.add(i)\n    if n == 1 and k == 1:\n        return -1\n    elif len(S) == k:\n        return 0\n    else:\n        S.remove(\"a\")\n        S.remove(\"h\")\n        S.remove(\"i\")\n        S.remove(\"o\")\n        S.remove(\"u\")\n        S.remove(\"d\")\n        S.remove(\"a\")\n        S.remove(\"s\")\n        S.remove(\"n\")\n        S.remove(\"k\")\n        S.remove(\"h\")\n        S.remove(\"i\")\n        S.remove(\"o\")\n        S.remove(\"u\")\n        S.remove(\"d\")\n        S.remove(\"a\")\n        S.remove(\"s\")\n        S.remove(\"n\")\n        S.remove(\"k\")\n        S.remove(\"h\")\n        S.remove(\"i\")\n        S.remove(\"o\")\n        S.remove(\"u\")\n        S.remove(\"d\")\n        S.remove(\"a\")\n        S.remove(\"s\")\n        S.remove(\"n\")\n        S.remove(\"k\")\n        S.remove(\"h\")\n        S.remove(\"i\")\n        S.remove(\"o\")\n        S.remove(\"u\")\n        S.remove(\"d\")\n        S.remove(\"a\")\n        S.remove(\"s\")\n        S.remove(\"n\")\n        S.remove(\"k\")\n        S.remove(\"h\")\n        S.remove(\"i\")\n        S.remove(\"o\")\n        S.remove(\"u\")\n        S.remove(\"d\")\n        S.remove(\"a\")\n        S.remove(\"s\")\n        S.remove(\"n\")\n        S.remove(\"k\")\n        S.remove(\"h\")\n        S.remove(\"i\")\n        S.remove(\"o\")\n        S.remove(\"u\")\n        S.remove(\"d\")\n        S.remove(\"a\")\n        S.remove(\"s\")\n        S.remove(\"n\")\n        S.remove(\"k\")\n        S.remove(\"h\")\n        S.remove(\"i\")\n        S.remove(\"o\")\n        S.remove(\"u\")\n        S.remove(\"d\")\n        S.remove(\"a\")\n        S.remove(\"s\")\n        S.remove(\"n\")\n        S.remove(\"k\")\n        S.remove(\"h\")\n        S.remove(\"i\")\n        S.remove(\"o\")\n        S.remove(\"u\")\n        S.remove(\"d\")\n        S.remove(\"a\")\n        S.remove(\"s\")\n        S.remove(\"n\")\n        S.remove(\"k\")\n        S.remove(\"h\")\n        S.remove(\"i\")\n        S.remove(\"o\")\n        S.remove(\"u\")\n        S.remove(\"d\")\n        S.remove(\"a\")\n        S.remove(\"s\")\n        S.remove(\"n\")\n        S.remove(\"k\")\n        S.remove(\"h\")\n        S.remove(\"i\")\n        S.remove(\"o\")\n        S.remove(\"u\")\n        S.remove(\"d\")\n        S.remove(\"a\")\n        S.remove(\"s\")\n        S.remove(\"n\")\n        S.remove(\"k\")\n        S.remove(\"h\")\n        S.remove(\"i\")\n        S.remove(\"o\")\n        S.remove(\"u\")\n        S.remove(\"d\")\n        S.remove(\"a\")\n        S.remove(\"s\")\n        S.remove(\"n\")\n        S.remove(\"k\")\n        S.remove(\"h\")\n        S.remove(\"i\")\n        S.remove(\"o\")\n        S.remove(\"u\")\n        S.remove(\"d\")\n        S.remove(\"a\")\n        S.remove(\"s\")\n        S.remove(\"n\")\n        S.remove(\"k\")\n        S.remove(\"h\")\n        S.remove(\"i\")\n        S.remove(\"o\")\n        S.remove(\"u\")\n        S.remove(\"d\")\n        S.remove(\"a\")\n        S.remove(\"s\")\n        S.remove(\"n\")\n        S.remove(\"k\")\n        S.remove(\"h\")\n        S.remove(\"i\")\n        S.remove(\"o\")\n        S.remove(\"u\")\n        S.remove(\"d\")\n        S.remove(\"a\")\n        S.remove(\"s\")\n        S.remove(\"n\")\n        S.remove(\"k\")\n        S.remove(\"h\")\n        S.remove(\"i\")\n        S.remove(\"o\")\n        S.remove(\"u\")\n        S.remove(\"d\")\n        S.remove(\"a\")\n        S.remove(\"s\")\n        S.remove(\"n\")\n        S.remove(\"k\")\n        S.remove(\"h\")\n        S.remove(\"i\")\n        S.remove(\"o\")\n        S.remove(\"u\")\n        S.remove(\"d\")\n        S.remove(\"a\")\n        S.remove(\"s\")\n        S.remove(\"n\")\n        S.remove(\"k\")\n        S.remove(\"h\")\n        S.remove(\"i\")\n        S.remove(\"o\")\n        S.remove(\"u\")\n        S.remove(\"d\")\n        S.remove(\"a\")\n        S.remove(\"s\")\n        S.remove(\"n\")\n        S.remove(\"k\")\n        S.remove(\"h\")\n        S.remove(\"i\")\n        S.remove(\"o\")\n        S.remove(\"u\")\n        S.remove(\"d\")\n        S.remove(\"a\")\n        S.remove(\"s\")\n        S.remove(\"n\")\n        S.remove(\"k\")\n        S.remove(\"h\")\n        S.remove(\"i\")\n        S.remove(\"o\")\n        S.remove(\"u\")\n        S.remove(\"d\")\n        S.remove(\"a\")\n        S.remove(\"s\")\n        S.remove(\"n\")\n        S.remove(\"k\")\n        S.remove(\"h\")\n        S.remove(\"i\")\n        S.remove(\"o\")\n        S.remove(\"u\")\n        S.remove(\"d\")\n        S.remove(\"a\")\n        S.remove(\"s\")\n        S.remove(\"n\")\n"
    },
    {
        "number": 4024,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = list(map(str, stdin.split()))\n    s.sort()\n    if n >= len(s) + 1:\n        return -1\n    S = set()\n    ans = 0\n    for i in range(n - 1):\n        S.add(s[i])\n    for i in range(n - 2, -1, -1):\n        S.add(s[i])\n        if len(S) == k:\n            ans = max(ans, len(S) - k)\n        S.remove(s[i])\n    return ans\n\n-----Constraints-----\n1 <= n, k <= 100\n\nTime Limit: 1 second\nSpace Limit: 1\n\nExample 1:\nInput\n3\nasdf\nsdfasd\nsdf\nOutput\n1\nExplanation\nThe substring contains one of the letters'sdf','sdf','s'. The cost is 1 because the removed letters are removed from the string and the remaining characters are the remaining letters.\n\nExample 2:\nInput\n3\nasdfasdf\nsdfasd\nsdf\nOutput\n0\nExplanation\nThe substring contains one of the letters'sdf','sdf','s', the remaining characters are the remaining letters.\n\nExample 3:\nInput\n3\nasdfasd\nsdfasd\nsdf\nOutput\n1\nExplanation\nThe substring contains one of the letters'sdf','sdf','s', the remaining characters are the remaining letters.\n\nExample 4:\nInput\n5\nasdfaa\nsddd\nasd\nOutput\n0\nExplanation\nThe substring contains one of the letters'sddd','sddd','s', the remaining characters are the remaining letters.\n\nExample 5:\nInput\n5\nasdfa\nsdddasd\nasd\nOutput\n1\nExplanation\nThe substring contains one of the letters'sddd','sddd','s', the remaining characters are the remaining letters.\n\nExample 6:\nInput\n10\naabbbc\naababa\nababab\nababa\nbababa\nabababbababab\naabababababab\naabababababab\naababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab"
    },
    {
        "number": 4024,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split(\"\\n\")\n    k = int(s[0].strip())\n    S = set()\n    n = len(s[1])\n    for i in range(n):\n        S.add(s[1][i])\n        S.add(s[1][i+1])\n    while True:\n        S = set(S)\n        if len(S) < k:\n            return -1\n        S = list(S)\n        S.sort(key=lambda x: len(x))\n        S = \"\".join(S)\n        if not S:\n            break\n    return S"
    },
    {
        "number": 4024,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def cost(string):\n        cost = 0\n        for i in string:\n            cost += ord(i) - ord('a')\n        return cost\n    \n    n, k = map(int, stdin.split())\n    string = stdin.split()\n    S = set(string)\n    S = sorted(S, key=cost)\n    if k == 0:\n        return -1\n    \n    if cost(S) < cost(S[::-1]):\n        return -1\n    \n    return cost(S[::-1])\n\nRuntime: 24 ms, faster than 85.39% of Python3 online submissions for Minimum Cost to Delete Substrings.\nMemory Usage: 13.6 MB, less than 97.26% of Python3 online submissions for Minimum Cost to Delete Substrings.\n\nhttps://leetcode.com/problems/minimum-cost-to-delete-substrings/discuss/13033/Python-solution-with-explanation-in-google-explain\n"
    },
    {
        "number": 4024,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    arr = list(stdin.split())\n    S = []\n    if n < k:\n        print(-1)\n        return\n    else:\n        for i in range(n):\n            if arr[i] == 'a':\n                S.append(arr[i])\n            elif arr[i] == 'b':\n                S.append(arr[i])\n            elif arr[i] == 'c':\n                if len(S) == 0:\n                    print(-1)\n                    return\n                S.pop(len(S))\n            else:\n                print(-1)\n                return\n        print(len(S))\n    return\n\n\n-----Constraints-----\n\n0 <= n <= 100\n\n1 <= k <= 100\n\nOnly one character in each string is a letter.\n\n\n-----Example 1 -----\n\nInput\n4 5\nasdf\nasd\n\nOutput\n4\n\nInput\n5 6\naaaaa\nasd\n\nOutput\n15\n\nInput\n5 7\naaaaa\nasd\n\nOutput\n-1\n\nInput\n10 100\najihiushda\nasdf\n\nOutput\n233\n\nExplanation\n\nS = { \"asdf\", \"asd\", \"adf\", \"asf\", \"sdf\" }. We need to delete the first one and then add the others.\nThen, S = { \"asd\", \"asd\", \"adf\", \"asd\", \"asd\" }. But it is impossible to do so because the set S is empty. So, the total cost of $S$ = $10$, which is not zero.\n\nInput\n4 5\nasdf\nasd\n\nOutput\n4\n\nInput\n5 6\naaaaa\nasd\n\nOutput\n5\n\nInput\n5 7\naaaaa\nasd\n\nOutput\n6\n\nInput\n10 100\najihiushda\nasdf\n\nOutput\n233\n\n\n-----Constraints-----\n\n1 <= n <= 100\n\n1 <= k <= 100\n\nAccepted\n17,941\nSubmissions\n2,569\n\nRuntime\n26 ms\nMemory Usage\n15.2 MB\n\n\n-----Tags-----\n\nLeetcode\n\n######\n\nGiven two strings s and t. String t is generated by randomly shuffling string t, and you have to return the minimum cost to get t.\n\nFor example, for string \"abcde\" and \"aecoder\", the minimum cost is 4 because \"aa\" and \"b\" are in the set {\"a\", \"e\", \"c\", \"d\", \"r\", \"e\", \"r\"}.\n\nThe cost of the strings is infinite, but the cost of the set is more than the cost of the strings.\n\nInput: s = \"abcde\", t = \"aecoder\"\nOutput: 4\nExplanation:\ns = \"abcde\"\nt = \"aecoder\"\nThe strings become { \"c\", \"a\", \"e\", \"r\" }, \"e\" and \"r\" are in the set {\"a\", \"e\", \"c\", \"d\", \"r\", \"e\", \"r\"}.\nThe minimum cost is 4.\n\nInput: s = \"abcd\", t = \"dcba\"\nOutput: 3\nExplanation:\ns = \"abcd\"\nt = \"dcba\"\nThe strings become { \"c\", \"a\", \"d\", \"b\", \"c\", \"d\" }, \"a\", \"e\", \"b\" and \"c\" are in the set {\"a\", \"e\", \"c\", \"d\", \"r\", \"e\", \"r\"}, \"b\", \"d\" and \"r\" are in the set {\"a\", \"e\", \"c\", \"d\", \"r\", \"e\", \"r\"}.\nThe minimum cost is 3.\n\nInput: s = \"abc\", t = \"aecb\"\nOutput: 2\nExplanation:\ns = \"abc\"\nt = \"aecb\"\nThe strings become { \"c\", \"a\", \"d\" }, \"b\" and \"c\" are in the set {\"a\", \"e\", \"c\", \"d\", \"r\", \"e\", \"r\"}, \"b\" and \"d\" are in the set {\"a\", \"e\", \"c\", \"d\", \"r\", \"e\", \"r\"}, \"a\" and \"d\" are in the set {\"b\", \"d\", \"r\", \"e\", \"r\"}.\nThe minimum cost is 2.\n\n\n-----Tags-----\n\nThe problem is to check whether given string is a prefix of given string.\n\n### First attempt\n\nTime complexity: O(n + k)\nSpace Complexity: O(k)\n\nThe first step is to use hashing of the given string and the minimum cost of the set.\nWe iterate over the string and check whether it is a prefix of the string.\nWe consider each letter in string and the cost of the string.\n\nThen, we add the hash value of the current letter to the minimum cost.\n\nTime complexity: O(n)\nSpace Complexity: O(k)\n\nThe second step is to check whether it is a prefix of the string.\nWe iterate over the string and check whether it is a prefix of the string.\nWe consider the string and the cost of the string.\nWe consider all the letter of the given string and compare it with the cost of the string.\n\nTime complexity: O(n)\nSpace Complexity: O(k)\n\nThe third step is to update the minimum cost to keep track of the prefix.\nWe combine the minimum cost of current string to current string and compare it with the cost of the string.\nWe update the minimum cost to keep track of the prefix.\n\nTime complexity: O(n)\nSpace Complexity: O(k)\n\nThis means that we are already called with O(n) at the time of traversing the string.\n\nInput:\n\nGiven a string s, and a string t.\n\nOutput\n\nMinimum cost to find t in s.\n\nExplanation\n\nt = \"t\" is the word. The cost of t is 4 because it contains the following letters: 'a', 'e', 'i', 'o', 'u'.\n\nInput:\n\nGiven a string s and a string t.\n\nOutput\n\nMinimum cost to find t in s.\n\nExplanation\n\nt = \"t\" is the word. The cost of t is 4 because it contains the following letters: 'a', 'e', 'i', 'o', 'u'.\n\nInput:\n\nGiven a string s and a string t.\n\nOutput\n\nMinimum cost to find t in s.\n\nExplan"
    },
    {
        "number": 4024,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    strs = list(stdin.split())\n    s = set(strs)\n    \n    if len(s) < k:\n        return -1\n\n    prices = [int(c) for c in strs[1:len(strs)-1]]\n\n    total = 0\n    for c in s:\n        total += prices[strs.index(c)]\n    \n    if total < k:\n        return -1\n    else:\n        return total\n        "
    },
    {
        "number": 4025,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    days = set([day for day in range(1, a + 1)])\n    days.remove(1)\n    days.remove(a)\n    days.remove(b)\n    days.remove(c)\n    days.remove(a + 1)\n    days.remove(b + 1)\n    days.remove(c + 1)\n    days.remove(1)\n    days.remove(a + 1)\n    days.remove(b + 1)\n    days.remove(c + 1)\n    days.remove(1)\n    days.remove(a + 1)\n    days.remove(b + 1)\n    days.remove(c + 1)\n    days.remove(1)\n    days.remove(a + 1)\n    days.remove(b + 1)\n    days.remove(c + 1)\n    days.remove(1)\n    days.remove(a + 1)\n    days.remove(b + 1)\n    days.remove(c + 1)\n    days.remove(1)\n    days.remove(a + 1)\n    days.remove(b + 1)\n    days.remove(c + 1)\n    days.remove(1)\n    days.remove(a + 1)\n    days.remove(b + 1)\n    days.remove(c + 1)\n    days.remove(1)\n    days.remove(a + 1)\n    days.remove(b + 1)\n    days.remove(c + 1)\n    days.remove(1)\n    days.remove(a + 1)\n    days.remove(b + 1)\n    days.remove(c + 1)\n    days.remove(1)\n    days.remove(a + 1)\n    days.remove(b + 1)\n    days.remove(c + 1)\n    days.remove(1)\n    days.remove(a + 1)\n    days.remove(b + 1)\n    days.remove(c + 1)\n    days.remove(1)\n    days.remove(a + 1)\n    days.remove(b + 1)\n    days.remove(c + 1)\n    days.remove(1)\n    days.remove(1)\n    days.remove(a + 1)\n    days.remove(b + 1)\n    days.remove(c + 1)\n    days.remove(1)\n    days.remove(1)\n    days.remove(a + 1)\n    days.remove(b + 1)\n    days.remove(c + 1)\n    days.remove(1)\n    days.remove(1)\n    days.remove(1)\n    days.remove(a + 1)\n    days.remove(b + 1)\n    days.remove(c + 1)\n    days.remove(1)\n    days.remove(1)\n    days.remove(1)\n    days.remove(1)\n    days.remove(1)\n    days.remove(1)\n    days.remove(1)\n    days.remove(1)\n    days.remove(1)\n    days.remove(1)\n    days.remove(1)\n    days.remove(1)\n    days.remove(1)\n    days.remove(1)\n    days.remove(1)\n    days.remove(1)\n    days.remove(1)\n    days.remove(1)\n    days.remove(1)\n    days.remove(1)\n    days.remove(1)\n    days.remove(1)\n    days.remove(1)\n    days.remove(1)\n    days.remove(1)\n    days.remove(1)\n    days.remove(1)\n    days.remove(1)\n    days.remove(1)\n    days.remove(1)\n    days.remove(1)\n    days.remove(1)\n    days.remove(1)\n    days.remove(1)\n    days.remove(1)\n    days.remove(1)\n    days.remove(1)\n    days.remove(1)\n    days.remove(1)\n    days.remove(1)\n    days.remove(1)\n    days.remove(1)\n    days.remove(1)\n    days.remove(1)\n    days.remove(1)\n    days.remove(1)\n    days.remove(1)\n    days.remove(1)\n    days.remove(1)\n    days.remove(1)\n    days.remove(1)\n    days.remove(1)\n    days.remove(1)\n    days.remove(1)\n    days.remove(1)\n    days.remove(1)\n    days.remove(1)\n    days.remove(1)\n    days.remove(1)\n    days.remove(1)\n    days.remove(1)\n    days.remove(1)\n    days.remove(1)\n    days.remove(1)\n    days.remove(1)\n    days.remove(1)\n    days.remove(1)\n    days.remove(1)\n    days.remove(1)\n    days.remove(1)\n    days.remove(1)\n    days.remove(1)\n    days.remove(1)\n    days.remove(1)\n    days.remove(1)\n    days.remove(1)\n    days.remove(1)\n    days.remove(1)\n    days.remove(1)\n    days.remove(1)\n    days.remove(1)\n    days.remove(1)\n    days.remove(1)\n    days.remove(1)\n    days.remove(1)\n    days.remove(1)\n    days.remove(1)\n    days.remove(1)\n    days.remove(1)\n    days.remove(1)\n    days.remove(1)\n    days.remove(1)\n    days.remove(1)\n    days.remove(1)\n    days.remove(1)\n    days.remove(1)\n    days.remove(1)\n    days.remove(1)\n    days.remove(1)\n    days.remove(1)\n    days.remove(1)\n    days.remove(1)\n    days.remove(1)\n    days.remove(1)\n    days.remove(1)\n    days.remove(1)\n"
    },
    {
        "number": 4025,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    day_num, food_num = map(int, stdin.split())\n    day_num -= 1\n    food_num -= 1\n    if day_num == 0:\n        day_num = 7\n    if food_num == 0:\n        food_num = 5\n    if food_num > day_num:\n        food_num = day_num * 10 + food_num\n    return str(food_num)"
    },
    {
        "number": 4025,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, X, Y = map(int, stdin.split())\n    food_list = list(map(int, stdin.split()))\n    food_list.sort()\n    \n    food_list_total = []\n    \n    for i in food_list:\n        food_list_total.append(food_list[i]*(i+1))\n    \n    \n    food_list_total.sort()\n    \n    last_food = food_list_total[-1]\n    \n    \n    day_count = 0\n    for i in food_list:\n        if last_food >= i:\n            day_count += 1\n            last_food = food_list[i]\n    \n    \n    print(day_count)"
    },
    {
        "number": 4025,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a,b,c = map(int, stdin.split())\n    day = 1\n    while a+b+c!= 0:\n        if day == 1:\n            day += 1\n        else:\n            day += 1\n            a -= 1\n            b -= 1\n            c -= 1\n    return str(day)\n\ndef"
    },
    {
        "number": 4025,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a,b,c=map(int,stdin.split())\n    days=a+b+c\n    if days>7:\n        days=days-7\n    print(days)\n    if days>7:\n        return \"Error\"\n    if days==1:\n        return \"Monday\"\n    elif days==2:\n        return \"Tuesday\"\n    elif days==3:\n        return \"Wednesday\"\n    elif days==4:\n        return \"Thursday\"\n    elif days==5:\n        return \"Friday\"\n    elif days==6:\n        return \"Saturday\"\n    elif days==7:\n        return \"Sunday\"\n    \n"
    },
    {
        "number": 4025,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a>b and b>c:\n        return f\"{a+b+c}\".strip()\n    elif a>b and a>c:\n        return f\"{a+b}{c+1}\".strip()\n    elif a==b:\n        return f\"{c+1}\"\n    elif a==c:\n        return f\"{b+1}\"\n\n\n\n-----Constraints-----\n\n1 <= a, b, c <= 7*10^8\n\n\n\n\"\"\"\nfrom collections import defaultdict\nfrom heapq import heappush, heappop\n\ndef"
    },
    {
        "number": 4025,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = [int(i) for i in stdin.split()]\n    b = n-a[0]\n    c = n-a[1]\n    d = b+c\n    if a[0]<a[1]:\n        a.append(0)\n    if a[0]<a[2]:\n        a.append(a[0])\n    if a[2]<a[3]:\n        a.append(a[2])\n    for i in range(a[0],a[2]+1):\n        for j in range(a[1],a[3]+1):\n            if i!=0 and j!=0:\n                b+=b+b*(a[1]-i)\n                c+=c*(a[0]-j)\n    for i in range(a[0],a[2]+1):\n        for j in range(a[1],a[3]+1):\n            if i!=0 and j!=0:\n                d+=d+d*(a[1]-i)\n                d+=d*(a[0]-j)\n    if b+c+d>=100:\n        return str(d-100)\n    elif b+c+d==100:\n        return \"100\"\n    elif b+c+d==0:\n        return \"0\"\n    else:\n        return str(d-b+c+d)"
    },
    {
        "number": 4025,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    total_days = [int(x) for x in stdin.split()]\n    days = []\n    for i in range(len(total_days)):\n        days.append(total_days[i] * 7)\n    days.sort()\n    for i in range(len(days) - 1):\n        if days[i] == days[i + 1]:\n            days[i] = 0\n        else:\n            return str(days[i + 1])\n\n\n\n\n-----Constraints-----\n\n1 <= stdin.length <= 100\n\n1 <= a, b, c <= 7 * 10^8\n\nConstraints\n\n1 <= d, d <= 7\n\n1 <= days[i] <= 100\n\ndays[i] = days[j] if (a <= days[i] <= b) or (b <= days[j] <= c)\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4025,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    stdin = [int(x) for x in stdin.split()]\n    \n    day = 0\n    while stdin[day] < stdin[day+1]*stdin[day+2]*stdin[day+3]:\n        day += 1\n        if day == len(stdin)-1:\n            break\n    \n    if day > 3:\n        day = 3\n    \n    days_to_go = day-3\n    \n    if days_to_go == 0:\n        answer = stdin[day]\n        \n    else:\n        answer = stdin[day]\n        \n        while days_to_go > 0:\n            days_to_go -= 1\n            day += 1\n            if day == len(stdin)-1:\n                break\n            if stdin[day] < stdin[day+1]*stdin[day+2]*stdin[day+3]:\n                answer += stdin[day]\n                \n    return answer\n"
    },
    {
        "number": 4025,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    days_of_week = [0]*7\n    for line in stdin:\n        day, amount = map(int, line.split())\n        days_of_week[day] += amount\n    answer = max(days_of_week)\n    return str(answer)\n\n-----Constraints-----\n\n1 <= a <= 7\n1 <= b <= 7\n1 <= c <= 7 * 10^8\n\n--------\n---User Code---\ndays_of_week = [0] * 7\nfor line in stdin:\n    day, amount = map(int, line.split())\n    days_of_week[day] += amount\nprint(days_of_week)\nprint(days_of_week[5] + days_of_week[4] + days_of_week[3] + days_of_week[2] + days_of_week[1])\n\n------Time Limit Exceeded------\nRuntime: 18 ms\nMemory Usage: 18.2 MB\n\n-----Bug Fixes-----"
    },
    {
        "number": 4026,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def get_nums(string):\n        return [int(char) for char in string.split(' ')]\n\n    def get_nums_from_line(line: str) -> list:\n        nums = []\n        for index in range(len(line)):\n            nums.append(int(line[index]))\n        return nums\n\n    def get_tiles_from_line(line: str) -> list:\n        tiles = []\n        for index in range(len(line)):\n            tiles.append(line[index])\n        return tiles\n\n    def solution_helper(lines: list, current_line: str, current_tiles: list):\n        if current_line in lines:\n            current_tiles.append(get_tiles(current_line))\n        if current_line in lines[:-1]:\n            for index in range(len(current_tiles)):\n                if get_tiles(current_line) == current_tiles[index]:\n                    current_tiles.pop(index)\n                    current_line = current_line[:-1]\n                    break\n            else:\n                return\n        else:\n            return\n\n        for index in range(len(current_tiles)):\n            solution_helper(lines, current_line + [current_tiles[index]], current_tiles)\n            current_tiles[index] = []\n\n    def get_tiles(line: str) -> list:\n        tiles = []\n        for index in range(len(line)):\n            tiles.append(line[index])\n        return tiles\n\n    def get_tiles_from_line(line: str) -> list:\n        tiles = []\n        for index in range(len(line)):\n            tiles.append(line[index])\n        return tiles\n\n    def rotate_tiles(tiles: list, rotation: int) -> list:\n        if rotation == 0:\n            return tiles\n        elif rotation == 1:\n            return tiles[1:] + tiles[:1]\n        elif rotation == 2:\n            return tiles[-1] + tiles[:-1] + tiles[1:]\n        elif rotation == 3:\n            return tiles[1:] + tiles[:-1] + tiles[-1]\n\n    def get_tiles_from_line(line: str) -> list:\n        tiles = []\n        for index in range(len(line)):\n            tiles.append(line[index])\n        return tiles\n\n    lines = []\n    for line in stdin:\n        lines.append(get_nums(line))\n    if lines:\n        solution_helper(lines, \"\", get_nums_from_line(get_tiles_from_line(get_tiles_from_line(get_tiles_from_line(get_tiles_from_line(get_tiles_from_line(get_tiles_from_line(get_tiles_from_line(get_tiles_from_line(get_tiles_from_line(get_tiles_from_line(get_tiles_from_line(get_tiles_from_line(get_tiles_from_line(get_tiles_from_line(get_tiles_from_line(get_tiles_from_line(get_tiles_from_line(get_tiles_from_line(get_tiles_from_line(get_tiles_from_line(get_tiles_from_line(get_tiles_from_line(get_tiles_from_line(get_tiles_from_line(get_tiles_from_line(get_tiles_from_line(get_tiles_from_line(get_tiles_from_line(get_tiles_from_line(get_tiles_from_line(get_tiles_from_line(get_tiles_from_line(get_tiles_from_line(get_tiles_from_line(get_tiles_from_line(get_tiles_from_line(get_tiles_from_line(get_tiles_from_line(get_tiles_from_line(get_tiles_from_line(get_tiles_from_line(get_tiles_from_line(get_tiles_from_line(get_tiles_from_line(get_tiles_from_line(get_tiles_from_line(get_tiles_from_line(get_tiles_from_line(get_tiles_from_line(get_tiles_from_line(get_tiles_from_line(get_tiles_from_line(get_tiles_from_line(get_tiles_from_line(get_tiles_from_line(get"
    },
    {
        "number": 4026,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    def is_side(n: int, m: int) -> bool:\n        if n == m:\n            return True\n        if n < m:\n            return False\n        if m == n:\n            return True\n        if n % 2 == m % 2:\n            return is_side(n-1, m) and is_side(n-2, m)\n        if n % 2 == 1:\n            return is_side(n-1, m-1) and is_side(n-2, m-1)\n    if is_side(n, m):\n        return \"YES\"\n    else:\n        return \"NO\"\n\n-----Solution-----\n\ndef"
    },
    {
        "number": 4026,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    tiles = []\n    for i in range(n):\n        tiles.append(stdin[2*i+1:2*i+2])\n    tiles.sort()\n    for i in range(m):\n        for j in range(i, m):\n            if j < m:\n                if not any(tiles[j] == tiles[i]):\n                    return 'YES'\n                tiles[j], tiles[i] = tiles[i], tiles[j]\n    return 'NO'"
    },
    {
        "number": 4026,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    tiles = [list(map(int, stdin.split())) for _ in range(n)]\n    symmetric_square = [[0, 0, 0, 0] for _ in range(m)]\n    for row in range(n):\n        for col in range(m):\n            symmetric_square[col][row] = tiles[row][col]\n    for i in range(n):\n        symmetric_square[i][i] = 1\n    for j in range(m):\n        symmetric_square[j][n - 1 - j] = 1\n    for k in range(n - 1):\n        for l in range(m - 1):\n            symmetric_square[l][k] = symmetric_square[k][l + 1]\n            symmetric_square[l][n - 1 - l] = symmetric_square[l + 1][n - 1 - k]\n    for l in range(m):\n        symmetric_square[n - 1 - l][n - 1 - l] = 1\n    for k in range(m):\n        symmetric_square[k][k] = symmetric_square[k + 1][k + 1]\n    for i in range(n - 1):\n        for j in range(m - 1):\n            if symmetric_square[i][j] == 1 and symmetric_square[j][i] == 1:\n                symmetric_square[i][j] = 2\n            if symmetric_square[i][j] == 1 and symmetric_square[j][n - 1 - i] == 1:\n                symmetric_square[i][j] = 2\n            if symmetric_square[n - 1 - i][j] == 1 and symmetric_square[n - 1 - j][j] == 1:\n                symmetric_square[n - 1 - i][j] = 2\n            if symmetric_square[n - 1 - j][n - 1 - i] == 1 and symmetric_square[n - 1 - i][n - 1 - j] == 1:\n                symmetric_square[n - 1 - i][n - 1 - j] = 2\n    for l in range(n - 1):\n        for k in range(m - 1):\n            if symmetric_square[l][k] == 1 and symmetric_square[k][m - 1 - l] == 1:\n                symmetric_square[l][k] = 3\n            if symmetric_square[l][k] == 1 and symmetric_square[m - 1 - l][k] == 1:\n                symmetric_square[l][k] = 3\n    for i in range(n - 1):\n        for j in range(m - 1):\n            if symmetric_square[i][j] == 3 and symmetric_square[i][j - 1] == 3:\n                symmetric_square[i][j] = 4\n            if symmetric_square[i][j] == 3 and symmetric_square[i][j + 1] == 3:\n                symmetric_square[i][j] = 4\n    for i in range(n - 1):\n        for j in range(m - 1):\n            if symmetric_square[i][j] == 4 and symmetric_square[i][j - 1] == 4:\n                symmetric_square[i][j] = 5\n            if symmetric_square[i][j] == 4 and symmetric_square[i][j + 1] == 4:\n                symmetric_square[i][j] = 5\n    for i in range(n - 1):\n        for j in range(m - 1):\n            if symmetric_square[i][j] == 5 and symmetric_square[i][j - 1] == 5:\n                symmetric_square[i][j] = 6\n            if symmetric_square[i][j] == 5 and symmetric_square[i][j + 1] == 5:\n                symmetric_square[i][j] = 6\n    for i in range(n - 1):\n        for j in range(m - 1):\n            if symmetric_square[i][j] == 6 and symmetric_square[i][j - 1] == 6:\n                symmetric_square[i][j] = 7\n            if symmetric_square[i][j] == 6 and symmetric_square[i][j + 1] == 6:\n                symmetric_square[i][j] = 7\n    for i in range(n - 1):\n        for j in range(m - 1):\n            if symmetric_square[i][j] == 7 and symmetric_square[i][j - 1] == 7:\n                symmetric_square[i][j] = 8\n            if symmetric"
    },
    {
        "number": 4026,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    rows = int(stdin.split()[0])\n    cols = int(stdin.split()[1])\n    T = int(stdin.split()[2])\n    S = [[int(stdin.split()[i]) for i in range(3)] for _ in range(T)]\n    \n    Masha = [[0 for i in range(cols)] for j in range(rows)]\n    for i in range(rows):\n        for j in range(cols):\n            Masha[i][j] = S[i][j]\n    \n    for i in range(T):\n        for j in range(cols):\n            if Masha[i][j] == 0:\n                Masha[i][j] = Masha[j][i]\n                Masha[j][i] = Masha[i][j]\n    \n    for i in range(rows):\n        for j in range(cols):\n            if Masha[i][j] == 0:\n                Masha[i][j] = Masha[j][i]\n                Masha[j][i] = Masha[i][j]\n            if Masha[i][j] == 1:\n                Masha[i][j] = Masha[j][i]\n                Masha[j][i] = Masha[i][j]\n    \n    for i in range(rows):\n        for j in range(cols):\n            if Masha[i][j] == 1:\n                Masha[i][j] = Masha[j][i]\n                Masha[j][i] = Masha[i][j]\n            if Masha[i][j] == 2:\n                Masha[i][j] = Masha[j][i]\n                Masha[j][i] = Masha[i][j]\n    \n    \n    \n    for i in range(rows):\n        for j in range(cols):\n            if Masha[i][j] == 1:\n                Masha[i][j] = Masha[j][i]\n                Masha[j][i] = Masha[i][j]\n            if Masha[i][j] == 2:\n                Masha[i][j] = Masha[j][i]\n                Masha[j][i] = Masha[i][j]\n    \n    for i in range(rows):\n        for j in range(cols):\n            if Masha[i][j] == 2:\n                Masha[i][j] = Masha[j][i]\n                Masha[j][i] = Masha[i][j]\n    \n    for i in range(rows):\n        for j in range(cols):\n            if Masha[i][j] == 3:\n                Masha[i][j] = Masha[j][i]\n                Masha[j][i] = Masha[i][j]\n    \n    for i in range(rows):\n        for j in range(cols):\n            if Masha[i][j] == 4:\n                Masha[i][j] = Masha[j][i]\n                Masha[j][i] = Masha[i][j]\n    \n    for i in range(rows):\n        for j in range(cols):\n            if Masha[i][j] == 5:\n                Masha[i][j] = Masha[j][i]\n                Masha[j][i] = Masha[i][j]\n    \n    for i in range(rows):\n        for j in range(cols):\n            if Masha[i][j] == 6:\n                Masha[i][j] = Masha[j][i]\n                Masha[j][i] = Masha[i][j]\n    \n    for i in range(rows):\n        for j in range(cols):\n            if Masha[i][j] == 7:\n                Masha[i][j] = Masha[j][i]\n                Masha[j][i] = Masha[i][j]\n    \n    for i in range(rows):\n        for j in range(cols):\n            if Masha[i][j] == 8:\n                Masha[i][j] = Masha[j][i]\n                Masha[j][i] = Masha[i][j]\n    \n    for i in range(rows):\n        for j in range(cols):\n            if Masha[i][j] == 9:\n                Masha[i][j] = Masha[j][i]\n                Masha[j][i] = Masha[i][j]\n    \n    for i in range(rows):\n        for j in range(cols):\n            if Masha[i][j] == 0:\n                Masha[i][j]"
    },
    {
        "number": 4026,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(i) for i in stdin.split()]\n    #print(n, m, k)\n    if n % 2!= 0:\n        return \"NO\"\n    if k % 2!= 0:\n        return \"NO\"\n    d = [[0] * m for _ in range(n)]\n    #print(d)\n    for i in range(n):\n        for j in range(m):\n            if i % 2 == 0:\n                d[i][j] = d[i][j]\n            if j % 2 == 0:\n                d[i][j] = d[i][j]\n            if d[i][j] == 0:\n                continue\n            a = i\n            b = j\n            if d[i][j] == 1:\n                for k in range(i - 1, i + 2):\n                    for l in range(j - 1, j + 2):\n                        if k < 0 or k >= n or l < 0 or l >= m:\n                            continue\n                        if d[k][l] == 1:\n                            continue\n                        d[k][l] = d[i][j]\n            if d[i][j] == 2:\n                for k in range(i - 1, i + 2):\n                    for l in range(j - 1, j + 2):\n                        if k < 0 or k >= n or l < 0 or l >= m:\n                            continue\n                        if d[k][l] == 1:\n                            continue\n                        d[k][l] = d[i][j]\n    print(d)\n    for i in range(n):\n        for j in range(m):\n            if d[i][j] == 0:\n                return \"NO\"\n    return \"YES\"\n\n\"\"\"\nThe first test case of the input has two types of tiles, they are shown on the picture below. [Image] \n\nMasha can construct, for example, the following square of size $4 \\times 4$ which is a symmetric matrix: $\\left. \\begin{array}{|c|c|c|} \\hline 5 & {7} & {8} & {9} \\\\ \\hline 7 & {4} & {9} & {8} \\\\ \\hline 8 & {9} & {5} & {7} \\\\ \\hline 9 & {8} & {7} & {4} \\\\ \\hline \\end{array} \\right.$\ndef"
    },
    {
        "number": 4026,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    tiles, m, n = [int(s) for s in stdin.split(' ')]\n    matrix = []\n    for _ in range(m):\n        matrix.append([int(s) for s in stdin.split(' ')])\n    tiles_tiles = 0\n    for i in range(m):\n        for j in range(n):\n            if matrix[i][j] == 1:\n                matrix[i][j] = matrix[j][i]\n                matrix[j][i] = matrix[i][j]\n                tiles_tiles += 1\n    for i in range(m):\n        for j in range(n):\n            if matrix[i][j] == 1:\n                matrix[i][j] = matrix[j][i]\n                matrix[j][i] = matrix[i][j]\n                tiles_tiles += 1\n    \n    # for j in range(n):\n    #     for i in range(m):\n    #         if matrix[i][j] == 1:\n    #             matrix[i][j] = matrix[j][i]\n    #             matrix[j][i] = matrix[i][j]\n    #             tiles_tiles += 1\n    if tiles_tiles == 0:\n        return \"YES\"\n    else:\n        return \"NO\"\n\nNote:\n\ntiles:        [6, 3, 4, 1, 2, 5, 6, 7, 8, 9, 10, 10, 10]\nm:             4\nn:             4\n\nmatrix:        [\n    [1,1,1,1,1,1,1,1,1,1,1,1,1,1],\n    [1,1,1,1,1,1,1,1,1,1,1,1,1,1],\n    [1,1,1,1,1,1,1,1,1,1,1,1,1,1],\n    [1,1,1,1,1,1,1,1,1,1,1,1,1,1],\n    [1,1,1,1,1,1,1,1,1,1,1,1,1,1],\n    [1,1,1,1,1,1,1,1,1,1,1,1,1,1],\n    [1,1,1,1,1,1,1,1,1,1,1,1,1,1],\n    [1,1,1,1,1,1,1,1,1,1,1,1,1,1],\n    [1,1,1,1,1,1,1,1,1,1,1,1,1,1],\n    [1,1,1,1,1,1,1,1,1,1,1,1,1,1],\n    [1,1,1,1,1,1,1,1,1,1,1,1,1,1],\n    [1,1,1,1,1,1,1,1,1,1,1,1,1,1],\n    [1,1,1,1,1,1,1,1,1,1,1,1,1,1],\n    [1,1,1,1,1,1,1,1,1,1,1,1,1,1],\n    [1,1,1,1,1,1,1,1,1,1,1,1,1,1],\n    [1,1,1,1,1,1,1,1,1,1,1,1,1,1],\n    [1,1,1,1,1,1,1,1,1,1,1,1,1,1],\n    [1,1,1,1,1,1,1,1,1,1,1,1,1,1],\n    [1,1,1,1,1,1,1,1,1,1,1,1,1,1],\n    [1,1,1,1,1,1,1,1,1,1,1,1,1,1],\n    [1,1,1,1,1,1,1,1,1,1,1,1,1,1],\n    [1,1,1,1,1,1,1,1,1,1,1,1,1,1],\n    [1,1,1,1,1,1,1,1,1,1,1,1,1,1],\n    [1,1,1,1,1,1,1,1,1,1,1,1,1,1],\n    [1,1,1,1,1,1,"
    },
    {
        "number": 4026,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    for t in range(int(stdin)):\n        n, m = map(int, input().split())\n        m, n = m * 2, n * 2\n        i = n\n        j = m\n        a = [[] for _ in range(n + 1)]\n        for _ in range(n):\n            a[i].append(int(input()))\n            i += 1\n        i = n\n        j = m\n        a[i].append(int(input()))\n        i += 1\n        j += 1\n        a[j].append(int(input()))\n        j += 1\n        a[j].append(int(input()))\n        a[i].append(int(input()))\n        i += 1\n        j = m\n        a[i].append(int(input()))\n        j += 1\n        a[j].append(int(input()))\n        a[i].append(int(input()))\n        i += 1\n        j = m\n        a[j].append(int(input()))\n        j += 1\n        a[j].append(int(input()))\n        a[i].append(int(input()))\n        i += 1\n        j = m\n        a[j].append(int(input()))\n        j += 1\n        a[i].append(int(input()))\n        a[i].append(int(input()))\n        i += 1\n        j = m\n        a[i].append(int(input()))\n        i += 1\n        a[i].append(int(input()))\n        a[j].append(int(input()))\n        j += 1\n        a[j].append(int(input()))\n        a[i].append(int(input()))\n        a[i].append(int(input()))\n        a[j].append(int(input()))\n        i = n\n        j = m\n        a[i].append(int(input()))\n        j += 1\n        a[i].append(int(input()))\n        a[j].append(int(input()))\n        a[i].append(int(input()))\n        i = n\n        j = m\n        a[i].append(int(input()))\n        j += 1\n        a[i].append(int(input()))\n        a[j].append(int(input()))\n        a[i].append(int(input()))\n        i += 1\n        j = m\n        a[i].append(int(input()))\n        j += 1\n        a[i].append(int(input()))\n        a[j].append(int(input()))\n        j += 1\n        a[i].append(int(input()))\n        a[i].append(int(input()))\n        i = n\n        j = m\n        a[i].append(int(input()))\n        j += 1\n        a[i].append(int(input()))\n        a[i].append(int(input()))\n        j += 1\n        a[i].append(int(input()))\n        a[j].append(int(input()))\n        j += 1\n        a[i].append(int(input()))\n        j += 1\n        a[i].append(int(input()))\n        a[i].append(int(input()))\n        i = n\n        j = m\n        a[i].append(int(input()))\n        i += 1\n        j += 1\n        a[i].append(int(input()))\n        a[i].append(int(input()))\n        i += 1\n        j += 1\n        a[i].append(int(input()))\n        j += 1\n        a[j].append(int(input()))\n        a[i].append(int(input()))\n        a[i].append(int(input()))\n        j += 1\n        a[j].append(int(input()))\n        a[i].append(int(input()))\n        a[j].append(int(input()))\n        i = n\n        j = m\n        a[i].append(int(input()))\n        j += 1\n        a[i].append(int(input()))\n        a[j].append(int(input()))\n        a[i].append(int(input()))\n        a[i].append(int(input()))\n        j += 1\n        a[i].append(int(input()))\n        a[i].append(int(input()))\n        a[j].append(int(input()))\n        a[i].append(int(input()))\n        a[i].append(int(input()))\n        i = n\n        j = m\n        a[i].append(int("
    },
    {
        "number": 4026,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    t, n, m, q = map(int, stdin.split())\n    matrix = [[0]*m for i in range(n)]\n    for _ in range(q):\n        t, a, b, c = map(int, stdin.split())\n        for i in range(a, b):\n            matrix[i][i] = 1\n        for i in range(a, b):\n            for j in range(i+1, b):\n                matrix[j][b-1-i] = 1\n    for i in range(n):\n        matrix[i].reverse()\n    for i in range(m):\n        matrix[n-1-i][i] = 1\n    result = ''\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == 1:\n                if i == 0 or j == 0:\n                    result += 'NO'\n                else:\n                    result += 'YES'\n            else:\n                result += 'NO'\n    return result\n\"\"\"\n\n\"\"\"\nInput:\n5\n1 2\n1 3\n1 4\n2 4\n2 5\n2 6\n2 7\n3 4\n3 5\n3 6\n3 7\n4 5\n4 6\n4 7\n5 6\n5 7\n\"\"\"\n\n\"\"\"\nOutput:\nYES\nYES\nNO\nNO\nYES\nYES\nYES\nYES\nYES\n\"\"\""
    },
    {
        "number": 4026,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.strip().split()[0])\n    n, m = map(int, stdin.strip().split())\n    s = [[0 for _ in range(m)] for _ in range(n)]\n    for i in range(T):\n        line = stdin.strip().split()\n        type = line[0]\n        t = int(line[1])\n        if type == '0':\n            for j in range(t):\n                for k in range(t):\n                    s[i][j] += 1\n                    s[j][i] += 1\n                    s[i][i] += 1\n                    s[i][i] += 1\n                    if j == 0:\n                        s[i][i] += 1\n        else:\n            for j in range(t):\n                for k in range(t):\n                    s[j][k] += 1\n                    s[k][j] += 1\n                    s[j][j] += 1\n                    if k == 0:\n                        s[j][j] += 1\n    for i in range(n):\n        for j in range(m):\n            print(s[i][j], end=' ')\n        print()\n    return 'YES'\n\nprint(solution())"
    },
    {
        "number": 4027,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    a, b = abs(a-b), a\n    if a < b:\n        return \"0\"\n    elif a == b:\n        return \"1\"\n    else:\n        return \"1\"\n\ndef"
    },
    {
        "number": 4027,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, *set_A, *set_B = map(int, stdin.split())\n\n    result = sum(set(set_A) & set(set_B)) - sum(set(set_A) | set(set_B))\n    \n    return str(abs(result))\n\n\n\n-----Solution-----\n\ndef"
    },
    {
        "number": 4027,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    line = stdin.strip().split()\n    \n    if line[0] == '1':\n        s1, s2 = line[1::2], line[::2]\n        A = set(s1)\n        B = set(s2)\n        \n        return min(abs(len(A) - len(B)), abs(sum(A) - sum(B)))\n    else:\n        s1, s2 = line[::2], line[1::2]\n        A = set(s1)\n        B = set(s2)\n        \n        return min(len(A) - len(B), sum(A) - sum(B))\n    pass\n\"\"\"\ndef"
    },
    {
        "number": 4027,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split('\\n'))\n    a -= 1\n    b -= 1\n    print(abs(a-b))\n    return '0'\n\"\"\"\n\nfrom collections import deque\nimport math\n\ndef"
    },
    {
        "number": 4027,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    ans = 0\n    for i in range(1, int(A**0.5) + 1):\n        ans += A**i*B**i - sum(set(map(int, str(i))))\n    return str(abs(ans))\n\nIn the second example you can divide the initial sequence into sets $A = \\{1, 4, 5\\}$ and $B = \\{2, 3, 6\\}$ so the answer is $1$.\n\nIn the third example you can divide the initial sequence into sets $A = \\{1, 4, 5\\}$ and $B = \\{2, 3, 6\\}$ so the answer is $1$.\n\nIn the fourth example you can divide the initial sequence into sets $A = \\{1, 3, 4\\}$ and $B = \\{2, 5, 6\\}$ so the answer is $1$.\n\nIn the fifth example you can divide the initial sequence into sets $A = \\{1, 3, 4\\}$ and $B = \\{2, 5, 6\\}$ so the answer is $1$.\n\n\n-----Constraints-----\n1 <= n <= 100\n0 <= A, B <= 1000\n\nTime Limit: 30 seconds\n\nExample:\n\nInput:\n5\n\nOutput:\n1\n\n'''\n\nclass Solution:\n    def solution(self, stdin):\n        A, B = map(int, stdin.split())\n        ans = 0\n        for i in range(1, int(A**0.5) + 1):\n            ans += A**i*B**i - sum(set(map(int, str(i))))\n        return str(abs(ans))"
    },
    {
        "number": 4027,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 10**5:\n        return str(n)\n    lst = [int(i) for i in str(n)]\n    a = set(lst)\n    b = set([i for i in a])\n    print(a - b)\n\n\n\n-----Expected Result-----\n\nPrint one integer \u2014 the minimum possible value of $|sum(A) - sum(B)|$ if you divide the initial sequence $1, 2, \\dots, n$ into two sets $A$ and $B$.\n\nPrint one integer \u2014 the minimum possible value of $|sum(A) - sum(B)|$ if you divide the initial sequence $1, 3, 4, \\dots, n$ into two sets $A$ and $B$.\n\nPrint one integer \u2014 the minimum possible value of $|sum(A) - sum(B)|$ if you divide the initial sequence $1, 5, 6, \\dots, n$ into two sets $A$ and $B$.\n\n\n-----Constraints-----\n\n1\n\n1\n\n3\n\n10^5\n\n-----Submissions-----\n\nLeia o arquivo de entrada um n\u00famero inteiro, inclusive de 1 at\u00e9 10^5.\n\n'''\n\nimport math\n\ndef"
    },
    {
        "number": 4027,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        print(0)\n        return\n    if n == 2:\n        print(1)\n        return\n    if n == 3:\n        print(1)\n        return\n    A, B = [], []\n    for i in range(n):\n        A.append(int(input()))\n        B.append(int(input()))\n    if A == B:\n        print(A)\n        return\n    if len(A) > len(B):\n        A, B = B, A\n    # I think I'm not solving this problem and it's not strictly an example, but the best one :-)\n    # if A.issubset(B):\n    #     print(A)\n    #     return\n    # if B.issubset(A):\n    #     print(B)\n    #     return\n    # if A.issubset(B):\n    #     print(A)\n    #     return\n    if A.issubset(B) or B.issubset(A):\n        print(min(A, B))\n        return\n    # I guess we can solve this problem by using 2 sets\n    # if B.issubset(A):\n    #     print(min(A, B))\n    #     return\n    # if A.issubset(B):\n    #     print(min(A, B))\n    #     return\n    if A.issubset(B):\n        print(max(A, B))\n        return\n    # I guess we can solve this problem by using 2 sets\n    if B.issubset(A):\n        print(max(A, B))\n        return\n    # I guess we can solve this problem by using 2 sets\n    if A.issubset(B):\n        print(max(A, B))\n        return\n    # I guess we can solve this problem by using 2 sets\n    # if B.issubset(A):\n    #     print(max(A, B))\n    #     return\n    if A.issubset(B):\n        print(max(A, B))\n        return\n    # I guess we can solve this problem by using 2 sets\n    if A.issubset(B):\n        print(min(A, B))\n        return\n    # I guess we can solve this problem by using 2 sets\n    # if B.issubset(A):\n    #     print(min(A, B))\n    #     return\n    if A.issubset(B):\n        print(min(A, B))\n        return\n    # I guess we can solve this problem by using 2 sets\n    # if B.issubset(A):\n    #     print(min(A, B))\n    #     return\n    if A.issubset(B):\n        print(max(A, B))\n        return\n    # I guess we can solve this problem by using 2 sets\n    if A.issubset(B):\n        print(max(A, B))\n        return\n    # I guess we can solve this problem by using 2 sets\n    if B.issubset(A):\n        print(max(A, B))\n        return\n    # I guess we can solve this problem by using 2 sets\n    # if A.issubset(B):\n    #     print(max(A, B))\n    #     return\n    if A.issubset(B):\n        print(min(A, B))\n        return\n    # I guess we can solve this problem by using 2 sets\n    # if B.issubset(A):\n    #     print(max(A, B))\n    #     return\n    # if A.issubset(B):\n    #     print(max(A, B))\n    #     return\n    # I guess we can solve this problem by using 2 sets\n    # if A.issubset(B):\n    #     print(min(A, B))\n    #     return\n    # I guess we can solve this problem by using 2 sets\n    # if B.issubset(A):\n    #     print(min(A, B))\n    #     return\n    # if A.issubset(B):\n    #     print(max(A, B))\n    #     return\n    # I guess we can solve this problem by using 2 sets\n    # if A.issubset(B):\n    #     print(max(A, B))\n    #     return\n    # I guess we can solve this problem by using 2 sets\n    # if B.issubset(A):\n    #     print(max(A, B))\n    #     return\n    # I guess we can solve this problem by using 2 sets\n    # if B.issubset(A):\n    #     print(min(A, B))\n    #     return\n    # I guess we can solve this problem by using 2 sets\n    # if A.issubset(B):\n    #     print(max(A, B))\n    #     return\n    # I guess we can solve this problem by using 2 sets\n    # if B.issubset(A):\n    #     print(min(A, B))\n    #     return\n    # I guess we can solve this problem by using 2 sets\n    # if A.issubset(B):\n    #     print(max(A, B))\n    #     return\n    # I guess we can solve this problem by using 2 sets\n    # if B.issubset(A):\n    #     print(min(A, B))\n    #     return\n    # I guess we can solve this problem by using 2 sets\n    # if A.issubset(B):\n    #     print(max(A, B))\n    #     return\n    # I guess we can solve this problem by using 2 sets\n    # if B.issubset(A):\n    #     print(min(A, B))\n    #     return\n    # I guess we can solve this problem by using 2 sets\n    # if A.issubset(B):\n    #     print(max(A, B))\n    #     return\n    # I guess we can solve this problem by using 2 sets\n    # if B.issubset(A):\n    #     print(min(A, B))\n    #     return\n    # I guess we can solve this problem by using 2 sets\n    # if A.issubset(B):\n    #     print(max(A, B))\n    #     return\n    # I guess we can solve this problem by using 2 sets\n    # if B.issubset(A):\n    #     print(min(A, B))\n    #     return\n    # I guess we can solve this problem by using 2 sets\n    # if A.issubset(B):\n    #     print(max(A, B))\n    #     return\n    # I guess we can solve this problem by using 2 sets\n    # if B.issubset(A):\n    #     print(min(A, B))\n    #     return\n    # I guess we can solve this problem"
    },
    {
        "number": 4027,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin)\n    a = [int(i) for i in stdin.split(' ')]\n\n    for i in range(1,n):\n        a[i] = a[i] % 2\n    \n    for i in range(0,n-1,2):\n        a[i] = a[i] // 2\n    \n    s = 0\n    b = 0\n    for i in range(n):\n        if a[i] == 1:\n            s += i\n        elif a[i] == 2:\n            b += i\n\n    print(abs(s-b))"
    },
    {
        "number": 4027,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    if stdin == \"\":\n        return \"\"\n    n = int(stdin)\n    return str(n % (n+1))\n\ndef"
    },
    {
        "number": 4027,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    A = set(map(int, stdin.split()))\n    B = set(map(int, stdin.split()))\n    return min(abs(sum(A) - sum(B)), abs(sum(A) - sum(B)))\n"
    },
    {
        "number": 4028,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    s = ''.join(list(map(lambda x: '(',stdin)))\n    i = 0\n    while i < n:\n        if s[i] == ')':\n            i += 1\n        elif s[i] == '(':\n            i += 1\n            num = 0\n            while i < n and s[i]!= ')':\n                i += 1\n                num += 1\n            i += 1\n            if num == 1:\n                num = 0\n                while i < n and s[i]!= '(':\n                    i += 1\n                    num += 1\n                if num == 0:\n                    i = n\n                    num = 0\n                else:\n                    i += 1\n                    num -= 1\n                    while i < n and s[i]!= '(':\n                        i += 1\n                        num += 1\n                    if num == 0:\n                        i -= 1\n                        num = 0\n                    else:\n                        i -= 1\n                        num -= 1\n            else:\n                i -= 1\n        else:\n            i += 1\n    return str(i)\n"
    },
    {
        "number": 4028,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    # Form the following string\n    \n    answer = []\n    \n    # create a variable to hold the list of strings that could be formed\n    string = []\n    \n    # create a list to store the length of each of the strings\n    n = len(stdin)\n    \n    # create a variable for the current index of the string\n    i = 0\n    \n    # create a list of the bracket sequences\n    bracket = []\n    \n    # create a string of the bracket sequences\n    string_bracket = stdin[i]\n    \n    # create a list of brackets\n    brackets = {\"(\": \")\", \"[\": \"]\", \"{\": \"}\"}\n    \n    # create a dictionary for each bracket\n    bracket_dic = {\"[\": \"]\", \"{\": \"}\"}\n    \n    # create a variable to hold the current index of the bracket\n    index = 0\n    \n    # create a while loop for the bracket sequence\n    while i < n:\n        \n        # if the current character is the closing bracket\n        if string_bracket == \")\":\n            \n            # if the current index is the length of the bracket string\n            if index < n:\n                \n                # if the brackets dictionary contains the brackets\n                if string_bracket in brackets:\n                    \n                    # create a string of the bracket sequence\n                    bracket_string = brackets[string_bracket] + bracket[i]\n                    \n                    # append the bracket to the list\n                    bracket_string += string[i]\n                    \n                    # append the bracket_string to the list\n                    string.append(bracket_string)\n                    \n                    # if the brackets dictionary contains the brackets\n                    if string_bracket in brackets:\n                        # create a variable to hold the bracket sequence\n                        string_bracket = brackets[string_bracket]\n                        \n                        # append the bracket to the list\n                        string_bracket += string[i]\n                        \n                        # append the bracket_string to the list\n                        string.append(bracket_string)\n                        \n                        # if the brackets dictionary contains the brackets\n                        if string_bracket in brackets:\n                            # create a variable to hold the bracket sequence\n                            string_bracket = brackets[string_bracket]\n                            \n                            # append the bracket to the list\n                            string_bracket += string[i]\n                            \n                            # append the bracket_string to the list\n                            string.append(bracket_string)\n                            \n                            # if the brackets dictionary contains the brackets\n                            if string_bracket in brackets:\n                                # create a variable to hold the bracket sequence\n                                string_bracket = brackets[string_bracket]\n                                \n                                # append the bracket to the list\n                                string_bracket += string[i]\n                                \n                                # append the bracket_string to the list\n                                string.append(bracket_string)\n                                \n                                # if the brackets dictionary contains the brackets\n                                if string_bracket in brackets:\n                                    # create a variable to hold the bracket sequence\n                                    string_bracket = brackets[string_bracket]\n                                \n                                    # append the bracket to the list\n                                    string_bracket += string[i]\n                                \n                                    # append the bracket_string to the list\n                                    string.append(bracket_string)\n                                    \n                                    # if the brackets dictionary contains the brackets\n                                    if string_bracket in brackets:\n                                        # create a variable to hold the bracket sequence\n                                        string_bracket = brackets[string_bracket]\n                                        \n                                        # append the bracket to the list\n                                        string_bracket += string[i]\n                                        \n                                        # append the bracket_string to the list\n                                        string.append(bracket_string)\n                                        \n                                        # if the brackets dictionary contains the brackets\n                                        if string_bracket in brackets:\n                                            # create a variable to hold the bracket sequence\n                                            string_bracket = brackets[string_bracket]\n                                            \n                                            # append the bracket to the list\n                                            string_bracket += string[i]\n                                            \n                                            # append the bracket_string to the list\n                                            string.append(bracket_string)\n                                            \n                                            # if the brackets dictionary contains the brackets\n                                            if string_bracket in brackets:\n                                                # create a variable to hold the bracket sequence\n                                                string_bracket = brackets[string_bracket]\n                                                \n                                                # append the bracket to the list\n                                                string_bracket += string[i]\n                                                \n                                                # append the bracket_string to the list\n                                                string.append(bracket_string)\n                                                \n                                                # if the brackets dictionary contains the brackets\n                                                if string_bracket in brackets:\n                                                    # create a variable to hold the bracket sequence\n                                                    string_bracket = brackets[string_bracket]\n                                                    \n                                                    # append the bracket to the list\n                                                    string_bracket += string[i]\n                                                    \n                                                    # append the bracket_string to the list\n                                                    string.append(bracket_string)\n                                                    \n                                                    # if the brackets dictionary contains the brackets\n                                                    if string_bracket in brackets:\n                                                        # create a variable to hold the bracket sequence\n                                                        string_bracket = brackets[string_bracket]\n                                                        \n                                                        # append the bracket to the list\n                                                        string_bracket += string[i]\n                                                        \n                                                        # append the bracket_string to the list\n                                                        string.append(bracket_string)\n                                                        \n                                                        # if the brackets dictionary contains the brackets\n                                                        if string_bracket in brackets:\n                                                            # create a variable to hold the bracket sequence\n                                                            string_bracket = brackets[string_bracket]\n                                                            \n                                                            "
    },
    {
        "number": 4028,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    s = stdin.strip()[:n//2]\n    res = 1\n    for i in range(1, len(s)):\n        if s[i] == \"(\":\n            res += 1\n        else:\n            res -= 1\n        if s[i-1] == \")\" and s[i]!= \")\":\n            res -= 1\n            s = s[:i] + s[i+1:]\n    return str(res)\n"
    },
    {
        "number": 4028,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    s = stdin.strip()[1:-1].replace('()', '(((').replace(')', ')()').replace('()()', '(()()')\n    result = 0\n    for i in range(1, n + 1):\n        if s[i] == '(':\n            result += 1\n        elif s[i] == ')':\n            result -= 1\n        if result == 0:\n            break\n    return result"
    },
    {
        "number": 4028,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def solve(s):\n        solution = 0\n        if len(s) > 2:\n            for i in range(1, len(s) // 2 + 1):\n                if s[:i] in s[i:]:\n                    solution += 2\n                if s[-i:] in s[:len(s) - i]:\n                    solution += 2\n            return solution\n        else:\n            return 0\n\n    n = int(stdin)\n    print(solve(stdin))"
    },
    {
        "number": 4028,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    s = stdin.strip()\n    s = \"\".join(s.split(\"()()\")).split(\"))())()\")\n    \n    if n % 2!= 0:\n        return 0\n    \n    #counts the number of '(' and ')', and each '(' is the number of '(' substrings \n    count = 0\n    \n    for i in range(0, n-2):\n        if s[i] == \"(\":\n            count += 1\n            \n        if s[i] == \")\":\n            count -= 1\n            \n        if s[i+1] == \"(\":\n            count -= 1\n            \n        if count == 0:\n            return i + 1\n        \n    return n\n    \n\ndef"
    },
    {
        "number": 4028,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.replace(\"()\", \"\")\n    n = len(s)\n    s = s.replace(\"(()\", \"(\")\n    s = s.replace(\")()\", \"())\")\n    print(len(s))\n    print(s[0], len(s))\n    print(s[n-1], len(s))\n    print(s[n-2])\n    return s[:n-1] + str(len(s)-len(s[:n-2]))\n\nprint(solution(input()))\n-----------------------------------------------------------------------------------------\n"
    },
    {
        "number": 4028,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    answer = 0\n    \n    for s in stdin:\n        count = 0\n        for i in range(len(s)):\n            if s[i] == '(':\n                count += 1\n            elif s[i] == ')':\n                count -= 1\n                if count == 0:\n                    answer += 1\n        \n    return str(answer)\n\n-----Constraints-----\n\n1 <= n <= 100\n0 < s.length <= 200\n0 <= s[i] < '^'\n'''\n\nclass Solution:\n    def countSolutions(self, s: str) -> int:\n        answer = 0\n        for i in range(len(s)):\n            count = 0\n            for j in range(i, len(s)):\n                if s[i:j+1] == s[i:j+1].replace(\"(\", \")\").replace(\")\", \"\"):\n                    count += 1\n            answer += count\n        return answer"
    },
    {
        "number": 4028,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = len(stdin)\n    s = [0]*n\n    s[0], s[n-1] = s[n-1], s[0]\n    \n    for i in range(1, n-1):\n        if s[i] == 0:\n            j = i-1\n            while s[j] == 0 and j >= 0:\n                j -= 1\n            if s[j] == 0:\n                s[j+1], s[i] = s[i], s[j+1]\n                s[j+1], s[i] = s[i], s[j+1]\n            elif s[j] == 1:\n                s[i] = s[j]\n        elif s[i] == 0:\n            if s[i] == 1:\n                s[i] = 1\n            else:\n                s[i] = 0\n    \n    return ''.join(str(i) for i in s)\n"
    },
    {
        "number": 4028,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, s = list(map(str, stdin.split()))\n    n = int(n)\n    s = list(map(str, s.split()))\n    \n    count = 0\n    for i in range(n):\n        if s[i].isdigit():\n            count += 1\n    \n    answer = count * n\n    return str(answer)\n"
    },
    {
        "number": 4029,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    n = int(stdin)\n    if n % 25 == 0:\n        return -1\n    if n < 1:\n        return -1\n    left, right = 1, 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if mid % 25 == 0:\n            return mid\n        elif mid < 1:\n            return -1\n        elif mid < n:\n            right = mid\n        else:\n            left = mid + 1\n    return -1\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4029,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"0\"\n    elif n == 2:\n        return \"0\"\n    elif n == 3:\n        return \"0\"\n    elif n == 4:\n        return \"0\"\n    elif n == 5:\n        return \"0\"\n    elif n == 6:\n        return \"0\"\n    elif n == 7:\n        return \"0\"\n    elif n == 8:\n        return \"0\"\n    elif n == 9:\n        return \"0\"\n    elif n == 10:\n        return \"0\"\n    elif n == 11:\n        return \"0\"\n    elif n == 12:\n        return \"0\"\n    elif n == 13:\n        return \"0\"\n    elif n == 14:\n        return \"0\"\n    elif n == 15:\n        return \"0\"\n    elif n == 16:\n        return \"0\"\n    elif n == 17:\n        return \"0\"\n    elif n == 18:\n        return \"0\"\n    elif n == 19:\n        return \"0\"\n    elif n == 20:\n        return \"0\"\n    elif n == 21:\n        return \"0\"\n    elif n == 22:\n        return \"0\"\n    elif n == 23:\n        return \"0\"\n    elif n == 24:\n        return \"0\"\n    elif n == 25:\n        return \"0\"\n    elif n == 26:\n        return \"0\"\n    elif n == 27:\n        return \"0\"\n    elif n == 28:\n        return \"0\"\n    elif n == 29:\n        return \"0\"\n    elif n == 30:\n        return \"0\"\n    elif n == 31:\n        return \"0\"\n    elif n == 32:\n        return \"0\"\n    elif n == 33:\n        return \"0\"\n    elif n == 34:\n        return \"0\"\n    elif n == 35:\n        return \"0\"\n    elif n == 36:\n        return \"0\"\n    elif n == 37:\n        return \"0\"\n    elif n == 38:\n        return \"0\"\n    elif n == 39:\n        return \"0\"\n    elif n == 40:\n        return \"0\"\n    elif n == 41:\n        return \"0\"\n    elif n == 42:\n        return \"0\"\n    elif n == 43:\n        return \"0\"\n    elif n == 44:\n        return \"0\"\n    elif n == 45:\n        return \"0\"\n    elif n == 46:\n        return \"0\"\n    elif n == 47:\n        return \"0\"\n    elif n == 48:\n        return \"0\"\n    elif n == 49:\n        return \"0\"\n    elif n == 50:\n        return \"0\"\n    elif n == 51:\n        return \"0\"\n    elif n == 52:\n        return \"0\"\n    elif n == 53:\n        return \"0\"\n    elif n == 54:\n        return \"0\"\n    elif n == 55:\n        return \"0\"\n    elif n == 56:\n        return \"0\"\n    elif n == 57:\n        return \"0\"\n    elif n == 58:\n        return \"0\"\n    elif n == 59:\n        return \"0\"\n    elif n == 60:\n        return \"0\"\n    elif n == 61:\n        return \"0\"\n    elif n == 62:\n        return \"0\"\n    elif n == 63:\n        return \"0\"\n    elif n == 64:\n        return \"0\"\n    elif n == 65:\n        return \"0\"\n    elif n == 66:\n        return \"0\"\n    elif n == 67:\n        return \"0\"\n    elif n == 68:\n        return \"0\"\n    elif n == 69:\n        return \"0\"\n    elif n == 70:\n        return \"0\"\n    elif n == 71:\n        return \"0\"\n    elif n == 72:\n        return \"0\"\n    elif n == 73:\n        return \"0\"\n    elif n == 74:\n        return \"0\"\n    elif n == 75:\n        return \"0\"\n    elif n == 76:\n        return \"0\"\n    elif n == 77:\n        return \"0\"\n    elif n == 78:\n        return \"0\"\n    elif n == 79:\n        return \"0\"\n    elif n == 80:\n        return \"0\"\n    elif n == 81:\n        return \"0\"\n    elif n == 82:\n        return \"0\"\n    elif n == 83:\n        return \"0\"\n    elif n == 84:\n        return \"0\"\n    elif n == 85:\n        return \"0\"\n    elif n == 86:\n        return \"0\"\n    elif n == 87:\n        return \"0\"\n    elif n == 88:\n        return \"0\"\n    elif n == 89:\n        return \"0\"\n    elif n == 90:\n        return \"0\"\n    elif n == 91:\n        return \"0\"\n    elif n == 92:\n        return \"0\"\n    elif n == 93:\n        return \"0\"\n    elif n == 94:\n        return \"0\"\n    elif n == 95:\n        return \"0\"\n    elif n == 96:\n        return \"0\"\n    elif n == 97:\n        return \"0\"\n    elif n == 98:\n        return \"0\"\n    elif n == 99:\n        return \"0\"\n    elif n == 100:\n        return \"0\"\n    elif n == 101:\n        return \"0\"\n    elif n == 102:\n        return \"0\"\n    elif n == 103:\n        return \"0\"\n    elif n == 104:\n        return \"0\"\n    elif n == 105:\n        return \"0\"\n    elif n == 106:\n        return \"0\"\n    elif n == 107:\n        return \"0\"\n    elif n == 108:\n        return \"0\"\n    elif n == 109:\n        return \"0\"\n    elif n == 110:\n        return \"0\"\n    elif n == 111:\n        return \"0\"\n    elif n == 112:\n        return \"0\"\n    elif n == 113:\n        return \"0\"\n    elif n == 114:\n        return \"0\"\n    elif n == 115:\n        return \"0\"\n    elif n == 116:\n        return \"0\"\n    elif n == 117:\n        return \"0\"\n    elif n == 118:\n        return \"0\"\n    elif n == 119:\n        return \"0\"\n    elif n == 120:\n        return \"0\"\n    elif n == 121:\n        return \"0\"\n    elif n == 122:\n        return \"0\"\n    elif n == 123:\n"
    },
    {
        "number": 4029,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n % 25 == 0:\n        return '-1'\n    \n    count = 0\n    \n    for _ in range(n):\n        x = n // 25\n        y = n % 25\n        count += x * y\n        n = y * 25\n    \n    return str(count)\n\n\n-----Example 1-----\n\nInput\n42\n\nOutput\n1\n\nExplanation\n\n42 = 462,\n\nThis is the minimum number of moves required to obtain a number that is divisible by $25$.\n\n\n\n-----Example 2-----\n\nInput\n1000\n\nOutput\n1\n\nExplanation\n\n1000 = 16,\n\nThis is the minimum number of moves required to obtain a number that is divisible by $25$.\n\n\n\n-----Constraints-----\n\n1 <= n <= 10^18\n\n\n\n-----Contraints-----\n\n1 <= stdin.length <= 10^5\n\n\n\n-----Tutorial-----\n\nhttps://leetcode.com/problems/count-of-1-bits/discuss/502119/Accepted-Python-solution-with-difficulty-for-the-first-one\n\n\"\"\""
    },
    {
        "number": 4029,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 25 == 0:\n        return -1\n    for i in range(len(str(n))):\n        if str(n)[i] == \"0\" and str(n)[i + 1] == \"0\":\n            if i < len(str(n)) - 2:\n                if str(n)[i + 2] == \"0\" and str(n)[i + 3] == \"0\":\n                    if n - i == 0:\n                        return -1\n                    else:\n                        return i + 1\n                else:\n                    return i\n        else:\n            if str(n)[i] == \"0\":\n                return -1\n            else:\n                return i\n    return -1\n\"\"\"\n\nclass Solution:\n    def minimumNumberOfMoves(self, n):\n        return -1 if n % 25 == 0 else (len(str(n)) - 1) * 3 + (n // 25)"
    },
    {
        "number": 4029,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    answer = 0\n    \n    def is_divisible(number):\n        cnt = 1\n        while number % 10 == 0:\n            cnt += 1\n            number //= 10\n        if cnt % 2!= 0:\n            return False\n        return True\n        \n    for i in range(k):\n        if not is_divisible(n + (i + 1) * 10001):\n            return -1\n        answer += 1\n    return answer\n\n-----Constraints-----\n1 <= n <= 10^5\n\n0 <= k <= 10^4\n"
    },
    {
        "number": 4029,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if not (n % 25 == 0): return -1\n    moves = 0\n    a = (n // 25) * 25\n    for i in range(n - a):\n        a += 25\n        if not (n % 25 == 0): a -= 25\n        moves += 1\n    return moves\n\ndef"
    },
    {
        "number": 4029,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n < 25:\n        return -1\n    \n    min_move = 0\n    \n    for move in range(1, n//25 + 1):\n        num = n % 25\n        if num == 0:\n            return min_move\n        elif num % 25!= 0:\n            num -= num % 25\n            move = 0\n        min_move += move\n    \n    return min_move\n    \n    "
    },
    {
        "number": 4029,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 25 == 0:\n        print(n//25)\n        return str(n//25)\n    return str(n//25+1)\n\n\n\ndef"
    },
    {
        "number": 4029,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return -1\n\nInput\n24567\n\nOutput\n3\n\nInput\n24567\n\nOutput\n-1\n\n-----Constraints-----\n1 <= n <= 10^18\n\"\"\"\nimport sys\nfrom typing import Optional, Any\n\ninput: str = sys.stdin.readline()\na: int = int(input.rstrip())\n\ndef"
    },
    {
        "number": 4029,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def solution_helper(string: str) -> int:\n        if string == \"\":\n            return 0\n        count = 0\n        for i in range(len(string)):\n            for j in range(i, len(string)):\n                if string[i]!= string[j]:\n                    count += 1\n                    break\n        return count\n\n    def solution_helper2(string: str) -> int:\n        if len(string) < 2:\n            return -1\n        answer = -1\n        n = len(string)\n        for i in range(n // 2 + 1):\n            for j in range(n // 2 - i):\n                if string[i]!= string[j + j] and string[i]!= string[j - j]:\n                    count = 0\n                    for k in range(i, n - 1):\n                        if string[k]!= string[i] and string[k]!= string[j] and string[k]!= string[i] and string[k]!= string[j + j]:\n                            count += 1\n                    if count == 1:\n                        return -1\n        return answer\n\n    def solution_helper3(string: str) -> int:\n        if len(string) < 2:\n            return -1\n        answer = -1\n        n = len(string)\n        for i in range(n // 2):\n            for j in range(n // 2 - i):\n                if string[i]!= string[j + j]:\n                    if string[i]!= string[j] and string[i]!= string[j + j] and string[i]!= string[j - j]:\n                        count = 0\n                        for k in range(i, n - 1):\n                            if string[k]!= string[i] and string[k]!= string[j] and string[k]!= string[i] and string[k]!= string[j + j]:\n                                count += 1\n                        if count == 1:\n                            return -1\n        return answer\n\n    return solution_helper2(stdin)\n\n\nfor _ in range(0, int(input())):\n    n = int(input())\n    string = input()\n    print(solution_helper(string))\n"
    },
    {
        "number": 4030,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = ''.join(stdin.split())\n    s = list(sorted(s))\n    answer = 0\n    for i in range(n):\n        left = s[i]\n        right = s[n - i - 1]\n        left_red, right_red = left.count(right)\n        answer = max(answer, left_red + right_red)\n    return str(answer)\n"
    },
    {
        "number": 4030,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n,s = map(int,stdin.split())\n    colors = [0]*n\n    for i in range(n):\n        if s[i] in ('a','e','i','o','u','A','E','I','O','U'):\n            colors[i] = 1\n    for i in range(n-1,-1,-1):\n        if colors[i]==0 and s[i]=='A':\n            colors[i] = 1\n            colors[i+1] = 1\n    for i in range(n-1,-1,-1):\n        if colors[i]==0 and s[i]=='A':\n            colors[i] = 1\n    return str(len(colors))\n\n\n\ndef"
    },
    {
        "number": 4030,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    def problem_solution():\n        if len(s) == 0:\n            return 0\n        colors = [0] * len(s)\n        for i in range(1, len(s)):\n            prev_color = colors[i-1]\n            cur_color = colors[i]\n            if prev_color == 0 or cur_color == 0:\n                continue\n            while cur_color > 0 and prev_color > 0:\n                if cur_color == prev_color - 1:\n                    colors[i] = prev_color + 1\n                    cur_color = colors[i]\n                else:\n                    prev_color = prev_color - 1\n                    cur_color = colors[i]\n        return \"\".join(str(c) for c in colors)\n    \n    \n    def problem_solution_two():\n        if len(s) == 0:\n            return 0\n        char_set = set(s)\n        res = [1] * len(s)\n        for i in range(1, len(s)):\n            prev_color = char_set.pop()\n            cur_color = char_set.pop()\n            if prev_color == 0 or cur_color == 0:\n                continue\n            if res[i-1] == 0 or res[i-1] > cur_color:\n                res[i] = prev_color + 1\n        return \"\".join(str(c) for c in res)\n    \n    \n    return min(map(int, problem_solution()), map(int, problem_solution_two()))\n"
    },
    {
        "number": 4030,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    s = stdin.strip()\n    \n    st_res = []\n    res = 0\n    \n    for i in range(1,n+1):\n        print(i)\n        print(s[i-1],s[i])\n        if(s[i-1] == s[i]):\n            res = 1\n            print(s[i-1],s[i])\n        else:\n            res = 2\n            print(s[i-1],s[i])\n            \n        st_res.append(res)\n    \n    return st_res[-1]\n"
    },
    {
        "number": 4030,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip().rstrip())\n    s = [i for i in range(N)]\n    answer = N\n\n    while True:\n        if answer == 1:\n            return \"1 1 1 1\"\n        if answer == 2:\n            return \"1 2 1 2 1 2 1 2 1 2\"\n        if answer == 3:\n            return \"1 1 1 1 1 2 3\"\n        if answer == N:\n            return \"no solution\"\n\n        ans = N\n        j = 1\n        while ans > 0 and j < answer:\n            if s[j]!= s[ans]:\n                ans -= 1\n            else:\n                j += 1\n                if j == answer:\n                    return \"no solution\"\n\n        if ans == 0:\n            return \"no solution\"\n        answer -= j\n"
    },
    {
        "number": 4030,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    s = [input().strip() for _ in range(n)]\n    c = sorted(list(set(s)))\n    res = 0\n    swap = 0\n    for i in range(len(c)):\n        res += s.count(c[i])\n        c[i], c[res-1] = c[res-1], c[i]\n    for i in range(n):\n        if c[i]!= c[res-1]:\n            res += 1\n            c[i], c[res-1] = c[res-1], c[i]\n    for i in range(n):\n        for j in range(i+1, n):\n            if c[i]!= c[j] and c[j]!= c[i]:\n                swap += 1\n    return res if swap == 0 else res - 1\n"
    },
    {
        "number": 4030,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, *s = list(map(int, stdin))\n    c = [0] + list(map(int, list(s[0])))\n    c = sorted(c)\n    c = [c[i]+1 if i >= 0 and c[i]-c[i+1]>=2 else c[i] for i in range(1, n)]\n    return str(min(c))\n"
    },
    {
        "number": 4030,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = list(map(str, stdin.split()))\n    res = []\n    res = sorted(set(s))\n    \n    for i in range(n):\n        j = 0\n        for j in range(i):\n            if s[i]!= s[j]:\n                break\n        else:\n            res.append(res[i])\n    return''.join(res)\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4030,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = list(stdin.strip())\n    res = list()\n    if n%2==0:\n        a = s.pop()\n        b = s.pop()\n        c = s.pop()\n        if len(s)>0:\n            if len(s)%2==0:\n                res.append(str(a)+str(b)+str(c))\n            else:\n                res.append(str(a)+str(c)+str(b))\n        for i in range(n//2):\n            a = s.pop()\n            b = s.pop()\n            c = s.pop()\n            if len(s)>0:\n                res.append(str(a)+str(b)+str(c))\n            else:\n                res.append(str(a)+str(b))\n    else:\n        a = s.pop()\n        b = s.pop()\n        c = s.pop()\n        if len(s)>0:\n            res.append(str(a)+str(b)+str(c))\n        else:\n            res.append(str(a)+str(b))\n    return \"\".join(res)"
    },
    {
        "number": 4030,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n,s=list(map(int,stdin.strip().split()))\n    color=[]\n    check=[]\n    for i in range(n):\n        color.append(s[i])\n    for i in range(n-1,0,-1):\n        if color[i]>color[i-1]:\n            check.append(i-1)\n    for i in check:\n        temp=s[i]\n        for j in range(n):\n            if temp==s[j]:\n                s[j]=s[i]+s[j]\n    print(s.index(s[-1]))\n    for i in range(n):\n        if color[i]<color[i+1]:\n            print(color[i]+1)\n            break\n    else:\n        print(0)\n    return \"\".join(map(str,s))\n\ns = input()\ns = input()\ns = input()\nprint(solution(s))"
    },
    {
        "number": 4031,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    strings = [input().strip() for _ in range(n)]\n    answer = []\n    while strings:\n        strings_ = []\n        for string in strings:\n            for i in range(len(string) - 1):\n                if string[i:i + 2] == string[i + 1:i + 3]:\n                    strings_.append(string)\n                    break\n        if strings_:\n            answer.append(strings_[0])\n            for string in strings_[1:]:\n                answer.append(string +'' + answer[-1])\n        else:\n            answer.append(answer[-1])\n        strings = strings[1:]\n    if len(answer) == len(set(answer)):\n        answer = answer[1:]\n    return ''.join(answer)\n\nprint(solution())\n\n'''\n"
    },
    {
        "number": 4031,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # get all the strings to be reordered\n    strings = stdin.split(\"\\n\")\n\n    # convert all the strings into list\n    strings_list = [list(str) for str in strings]\n\n    # get the list of characters to check\n    to_check = list(range(1, 100))\n\n    # create list of all the combinations\n    combination = itertools.product(to_check, repeat=len(strings_list))\n\n    # check if all the characters are in the list\n    # If not, go back to the previous one\n    result = []\n    for character in combination:\n        if all(map(str.__ne__, character)):\n            result.append(\"NO\")\n            continue\n        result.append(\"YES\")\n\n    return '\\n'.join(result)"
    },
    {
        "number": 4031,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    string, *arr = stdin.split()\n    for word in arr:\n        arr_words = [word[i:i + len(word)] for i in range(0, len(word) - 1, 2)]\n        for word_arr in arr_words:\n            if len(word_arr) < len(string):\n                return \"NO\"\n            if word_arr in word:\n                return \"YES\"\n    return \"YES\"\n\ndef"
    },
    {
        "number": 4031,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    answer = []\n    strs = stdin.split()\n    for i in range(len(strs)):\n        strs[i] = sorted(strs[i])\n        answer.append(strs[i])\n    return \"\".join(answer)\n\n\n\nprint(solution(\"aabcbbcccdddd\"))\n"
    },
    {
        "number": 4031,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = list(stdin)\n    n -= 1\n    for _ in range(n):\n        a, b = s[:], s[:]\n        for i in range(len(a)):\n            if a[i].islower():\n                b.insert(i, a[i].upper())\n            else:\n                b.insert(i, a[i].lower())\n        s = b\n    if not s:\n        return \"YES\"\n    for i in range(len(s)):\n        for j in range(i + 1, len(s)):\n            if s[i] == s[j]:\n                s[i], s[j] = s[j], s[i]\n                break\n    return \"YES\" if s == sorted(s) else \"NO\"\n\n'''\nn = int(input())\ns = list(input())\n\nans = [\"YES\" if s[i] == s[i + 1] else \"NO\" for i in range(n - 1)]\nans = sorted(ans)"
    },
    {
        "number": 4031,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n  \n  def find(start, length):\n    \n    if length == 1:\n      return start\n    \n    return find(start, length - 1) + (length - 1)\n    \n  def backtrack(length, string, i):\n    if len(string) == length:\n      return 1\n    if i >= len(string):\n      return 0\n    \n    c = string[i]\n    \n    if c == \"a\":\n      return backtrack(length, string, i + 1)\n    elif c == \"b\":\n      return backtrack(length - 1, string + \"b\", i + 1)\n    else:\n      return backtrack(length - 1, string + c, i + 1)\n    \n  answer = backtrack(len(stdin), \"\", 0)\n  \n  return answer\n\n1\ndef"
    },
    {
        "number": 4031,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    if n < 2:\n        return \"\"\n    \n    string = []\n    for i in range(n):\n        tmp = stdin[i].lower()\n        tmp2 = []\n        for j in range(n):\n            if tmp[j] in tmp2:\n                continue\n            tmp2.append(tmp[j])\n        if len(tmp2) < 2:\n            return \"\"\n        string.append(\"\".join(tmp2))\n        \n    return \"\".join(string)\n\n\n\nOutput\nNO\nqwerty\nqwerty\nqwerty\nqwerty\nqwerty\nqwerty\nqwerty\nqwerty\n\nExplanation\n\nstring = [\"abc\", \"aab\", \"bba\"]\n"
    },
    {
        "number": 4031,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = set()\n    for line in stdin:\n        if len(line) > 1:\n            s.add(line[0])\n            s.update(line[1:])\n    s = list(s)\n    return \"\".join(s)\n"
    },
    {
        "number": 4031,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n"
    },
    {
        "number": 4031,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def is_substring(s, t):\n        return len(s) == len(t) and all(a == b for (a, b) in zip(s, t))\n    def is_substring_bfs(start, end, dp):\n        if start >= end:\n            return True\n        \n        if start == end:\n            return is_substring(dp, dp[start])\n        \n        if is_substring(dp[start], dp[start + 1]):\n            return is_substring_bfs(start + 1, end, dp) or is_substring_bfs(start, end + 1, dp)\n        \n        return is_substring_bfs(start, end + 1, dp)\n        \n    def to_string(d: dict) -> str:\n        return \"\".join([str(v) for v in d.values()])\n    \n    dp = []\n    for i in range(1, len(stdin)):\n        for j in range(i):\n            if is_substring(stdin[j], stdin[i]):\n                if is_substring_bfs(i, j, dp):\n                    dp = to_string(dp)\n                    return \"YES\"\n                \n    return \"NO\"\n\ndef"
    },
    {
        "number": 4032,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(max(map(lambda x: len(x), map(lambda x: x.split()))))\n\ndef"
    },
    {
        "number": 4032,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    stdin = stdin.split()\n    a = list(map(int, stdin[1].split()))\n    a.sort(reverse=True)\n    print(len(set(a)))\n    return '0'\n\ndef"
    },
    {
        "number": 4032,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    nums = [int(stdin.split()[i]) for i in range(n)]\n    ret = 0\n    while True:\n        for i in range(n):\n            for j in range(i, n):\n                if nums[i] + nums[j] > k:\n                    break\n                if nums[j] < nums[i]:\n                    break\n                else:\n                    ret += 1\n                    break\n        else:\n            break\n    return str(ret)\n-----Constraints-----\n1 <= n <= 100\n1 <= k <= 100\n1 <= a_1, a_2, a_3 <= 100\na_i = -100 <= a_i < 100\n\nTime Limit: O(n^2)\nSpace Limit: O(n)\n\n-----Algorithm-----\n\nMishka solve problems in the following order: $[4, 2, 3, 1, 5, 1, 6, 4] \\rightarrow [2, 3, 1, 5, 1, 6] \\rightarrow [2, 3, 1, 5, 1, 6] \\rightarrow [3, 1, 5, 1, 6] \\rightarrow [1, 5, 1, 6] \\rightarrow [5, 1, 6]$, so the number of solved problems will be equal to $5$.\n\nIn the second example, Mishka solve problems that maximize the number of problems which are not solved in the previous step.\n\nIn the third example, Mishka solve problems that maximize the number of problems which are not solved in the previous step but do not have the same difficulty.\n\nIn the fourth example, Mishka solve problems that maximize the number of problems which are not solved in the previous step, but have the same difficulty as the previous step.\n\nIn the fifth example, Mishka solve problems that maximize the number of problems which are not solved in the previous step, but have the same difficulty as the previous step, and return the minimum number of problems which are not solved.\n\nIn the sixth example, Mishka solve problems that maximize the number of problems which are not solved in the previous step, but have the same difficulty as the previous step, and return the minimum number of problems which are not solved.\n\n\n-----Subtask A-----\n\nGiven a contest, check whether Mishka has solved all of the problems and return the minimum number of problems which are not solved.\n\nIf Mishka has solved all the problems in the contest, return 0.\n\n\n\n-----Subtask B-----\n\nGiven a contest and the difficulty of the contest, check whether Mishka can solve the contest, return the minimum number of problems that will not be solved.\n\n\n\n-----Subtask C-----\n\nGiven a contest and the difficulty of the contest, check whether Mishka can solve the contest. If the difficulty is <$k$, return 0. If the difficulty is >=$k$, return the minimum number of problems that will not be solved.\n\n\n\n-----Subtask D-----\n\nGiven a contest and the difficulty of the contest, check whether Mishka can solve the contest. If the difficulty is <$k$, return 0. If the difficulty is >=$k$, return the minimum number of problems that will not be solved.\n\n\"\"\"\n\nfrom typing import List\nfrom heapq import *\n\n\ndef"
    },
    {
        "number": 4032,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    n,k = map(int,stdin.split())\n    answer = 0\n    q = deque()\n    q.append([n,0])\n    while q:\n        p,depth = q.popleft()\n        for i in range(4):\n            dif = k-depth\n            if dif >=0 and dif<=p:\n                q.append([p-depth,depth+1])\n                answer+=1\n                break\n    return str(answer)\n\n\n\ndef"
    },
    {
        "number": 4032,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    arr = [0] + list(map(int, stdin.split()))\n    arr.sort()\n    i = 1\n    ans = 0\n    while i < n:\n        diff = arr[i]-arr[i-1]\n        if diff <= k:\n            ans += 1\n            i += 1\n        else:\n            ans -= 1\n            i += 1\n    return str(ans)\n\n\nThe first line contains a single integer $n$ \u2014 the number of problems in the contest.\n\nThe second line contains a single integer $k$ \u2014 the difficulty of the problems in the contest.\n\nThe third line contains a single integer $a_1, a_2, \\dots, a_n$ \u2014 the difficulties of the problems from one end to the other in one-dimensional lists.\n\nPrint one integer \u2014 the maximum number of problems Mishka can solve.\n\n\nExample 1:\nInput:\nn = 5\nk = 5\na_1 = 1\na_2 = 5\na_3 = 5\na_4 = 2\na_5 = 4\na_6 = 3\nOutput:\n2\n\nExplanation:\nMishka can solve problems from the leftmost to the rightmost in the list.\n\nExample 2:\nInput:\nn = 5\nk = 4\na_1 = 2\na_2 = 1\na_3 = 5\na_4 = 5\na_5 = 4\na_6 = 4\nOutput:\n2\n\n\nConstraints:\n\n1 <= n, k <= 100\n\n\n\"\"\"\n\nclass Solution:\n    def solution(self, n, k, a_1, a_2, a_3, a_4, a_5, a_6):\n        def dfs(a_set):\n            if len(a_set) == n:\n                return len(a_set)\n            if a_set:\n                c = dfs(a_set + [a_set[-1]])\n                if len(a_set) - c > k:\n                    a_set += [a_set[-1]]\n                if c == n:\n                    return len(a_set)\n                return c + dfs(a_set + [a_set[-1]])\n\n        return len(a_set) + dfs([a_set]) - 1"
    },
    {
        "number": 4032,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    d = k - 1\n    if n < k or n % 2!= 0 or n == 1:\n        return 0\n    a = [None] * (n - 1)\n    a[0] = 0\n    a[1] = 1\n    for i in range(2, n - 1):\n        a[i] = a[i - 1] + 1\n    for i in range(2, n - 1):\n        a[i] = a[i - 1] + a[i - 2]\n    for i in range(3, n):\n        a[i] = a[i - 1] + a[i - 2] + a[i - 3]\n    for i in range(1, n):\n        a[i] = a[i - 1] + a[i - 2] + a[i - 3]\n    return max(a)\n"
    },
    {
        "number": 4032,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4032,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a_list = [list(map(int, input().split())) for i in range(n)]\n    a_list = sorted(a_list, key=lambda x: x[0])\n    a_list = sorted(a_list, key=lambda x: x[1])\n    a_list = sorted(a_list, key=lambda x: x[2])\n    \n    for i in range(len(a_list)):\n        for j in range(i+1, len(a_list)):\n            if a_list[i][2] == a_list[j][2]:\n                a_list[i], a_list[j] = a_list[j], a_list[i]\n    \n    solutions = []\n    for i in range(k):\n        solutions.append(a_list[i][0])\n        \n    return str(len(solutions))\n"
    },
    {
        "number": 4032,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    # number of problems\n    n, k = map(int, stdin.split())\n    # problem \n    problem = list(map(int, stdin.split()))\n    \n    # initializing a list that will store the indexes of the left most problems\n    # that is in the list\n    indexes_left = []\n    \n    # final indexes of the left most problems\n    # that is in the list\n    indexes_right = []\n    \n    # for every problem in the list\n    for problem_i in range(n):\n        \n        # we are searching for all indexes of the left most problems\n        for index in indexes_left:\n            \n            # if it is the left most problem\n            if problem_i == index:\n                # we add the index of the left most problem\n                # to the indexes_left\n                indexes_left.append(problem_i)\n                # now we remove it from indexes_left\n                # since it is the left most problem\n                # which it belongs to\n                indexes_left.remove(problem_i)\n                break\n        \n        # we are searching for all indexes of the right most problems\n        for index in indexes_right:\n            \n            # if it is the right most problem\n            if problem_i == index:\n                # we add the index of the right most problem\n                # to the indexes_right\n                indexes_right.append(problem_i)\n                # now we remove it from indexes_right\n                # since it is the right most problem\n                # which it belongs to\n                indexes_right.remove(problem_i)\n                break\n        \n    # we know that all the indexes of the left most problems\n    # and the right most problem belong to the same sublist\n    # we just need to find the length of the lists\n    index_len = len(indexes_left)\n    index_len_right = len(indexes_right)\n    \n    # if we have less than or equal to $k$ problems\n    if index_len < k:\n        # we find the left most problem which belongs to the sublist\n        left_most_problem = indexes_left[0]\n        # we remove that element from indexes_left\n        # so that it is not included in indexes_left anymore\n        indexes_left.remove(left_most_problem)\n    \n    # if we have more than $k$ problems\n    elif index_len > k:\n        # we find the right most problem which belongs to the sublist\n        right_most_problem = indexes_right[0]\n        # we remove that element from indexes_right\n        # so that it is not included in indexes_right anymore\n        indexes_right.remove(right_most_problem)\n    \n    # if we have equal or greater than $k$ problems\n    elif index_len == k:\n        # we find the indexes of the left most problem\n        # which belongs to the sublist\n        # we only need to find the index of that\n        left_most_problem = indexes_left[0]\n        # we remove that element from indexes_left\n        # so that it is not included in indexes_left anymore\n        indexes_left.remove(left_most_problem)\n        # we find the indexes of the right most problem\n        # which belongs to the sublist\n        right_most_problem = indexes_right[0]\n        # we remove that element from indexes_right\n        # so that it is not included in indexes_right anymore\n        indexes_right.remove(right_most_problem)\n    \n    # if we have less than $k$ problems\n    elif index_len < k:\n        # we have already removed the indexes of the left most problems\n        # so we just add the indexes of the left most problems\n        # to indexes_left\n        # and then remove them from indexes_left\n        indexes_left.append(index_len)\n        # now we remove the indexes of the right most problems\n        # since it is the left most problem\n        # which belongs to the sublist\n        indexes_left.remove(left_most_problem)\n        # we remove the indexes of the right most problem\n        # since it is the right most problem\n        indexes_right.remove(right_most_problem)\n    \n    # if we have equal or greater than $k$ problems\n    elif index_len > k:\n        # we have already removed the indexes of the left most problems\n        # so we just add the indexes of the left most problems\n        # to indexes_left\n        # and then remove them from indexes_left\n        indexes_left.append(index_len)\n        # now we remove the indexes of the right most problems\n        # since it is the right most problem\n        indexes_left.remove(left_most_problem)\n        # we remove the indexes of the right most problem\n        # since it is the right most problem\n        indexes_right.remove(right_most_problem)\n    \n    # if we have less than $k$ problems\n    elif index_len < k:\n        # we have already removed the indexes of the left most problems\n        # so we just add the indexes of the left most problems\n        # to indexes_left\n        # and then remove them from indexes_left\n        indexes_left.append(index_len)\n        # now we remove the indexes of the right most problems\n        # since it is the right most problem\n        indexes_right.append(right_most_problem)\n    \n    # if we have equal or greater than $k$ problems\n    elif index_len > k:\n        # we have already removed the indexes of the left most problems\n        # so we just add the indexes of the left most problems\n        # to indexes_left\n        # and then remove them from indexes_left\n        indexes_left.append(index_len)\n        # now we remove the indexes of the right most problems\n        # since it is the right most problem\n        indexes_right.append(right_most_problem)\n    \n    # we have equal or greater than $k$ problems\n    elif index_len == k:\n        # we have already removed the indexes of the left most problems\n        # so we just add the indexes of the left most problems\n        # to indexes_left\n        # and then remove them from indexes_left\n        indexes_left.append("
    },
    {
        "number": 4032,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(stdin) - len([int(i) for i in stdin.split() if int(i) >= k]))\n\ndef"
    },
    {
        "number": 4033,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.strip())\n    a, b = map(int, stdin.strip().split())\n    for _ in range(t):\n        print(solution(stdin.readline().strip()))\n    return '\\n'.join(map(str, a * b * (a + b + 1)))\n\nsolution(open(\"main.txt\").read())\n"
    },
    {
        "number": 4033,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    red = [list(map(int, input().split())) for _ in range(n)]\n    blue = [list(map(int, input().split())) for _ in range(m)]\n    for i in range(1, n):\n        for j in range(1, m):\n            if red[i][j] == 1 and blue[i][j] == 1:\n                red[i][j] += 1\n    for r in red:\n        r.sort()\n    for b in blue:\n        b.sort()\n    for i in range(n):\n        for j in range(m):\n            if red[i][j] + blue[i][j] > r[i] + b[j]:\n                return str(r[i] + b[j] - red[i][j] - blue[i][j])\n    return '?'\n    \n\nsolution('4 3')\nsolution('3 6')\nsolution('9 3')\nsolution('506 2708')\n\n-----Constraints-----\n\n1 <= a <= 10^12\n1 <= b <= 10^14\n\"\"\"\n\nimport math\nfrom collections import defaultdict\nclass Tile:\n    def __init__(self, i, j, color):\n        self.i = i\n        self.j = j\n        self.color = color\n\n\nclass Game:\n    def __init__(self):\n        self.tiles = [[Tile(0,0,0)]*10 for _ in range(10)]\n        self.n = 10\n        self.m = 10\n        self.red_tiles = []\n        self.blue_tiles = []\n        self.red_count = 0\n        self.blue_count = 0\n        self.red_tiles = defaultdict(list)\n        self.blue_tiles = defaultdict(list)\n        self.red_count = 0\n        self.blue_count = 0\n        self.result = None\n\n    def is_valid(self, tile):\n        # return 0 <= tile.i < self.n and 0 <= tile.j < self.m and tile.color == (0,0,0)\n        return 0 <= tile.i < self.n and 0 <= tile.j < self.m and self.tiles[tile.i][tile.j].color == (0,0,0)\n\n    def generate_tiles(self):\n        # color tiles\n        for i in range(self.n):\n            for j in range(self.m):\n                tile = Tile(i,j,(0,0,0))\n                if self.is_valid(tile):\n                    self.tiles[i][j] = tile\n                    self.red_tiles.append(tile)\n                    self.red_count += 1\n                    # print(self.red_count, self.n, self.m)\n                else:\n                    self.blue_tiles.append(tile)\n                    self.blue_count += 1\n                    # print(self.blue_count, self.n, self.m)\n        # # color red tiles\n        for i in range(self.n):\n            for j in range(self.m):\n                if self.tiles[i][j].color == (0,0,0):\n                    if self.is_valid(self.tiles[i][j]):\n                        self.tiles[i][j] = self.tiles[i][j].color\n                        self.red_tiles.append(self.tiles[i][j])\n                        self.red_count += 1\n                    else:\n                        self.blue_tiles.append(self.tiles[i][j])\n                        self.blue_count += 1\n                        # print(self.blue_count, self.n, self.m)\n\n        # color blue tiles\n        for i in range(self.n):\n            for j in range(self.m):\n                if self.tiles[i][j].color == (0,0,0):\n                    if self.is_valid(self.tiles[i][j]):\n                        if self.tiles[i][j].color == (0,0,0):\n                            self.tiles[i][j] = self.tiles[i][j].color\n                            self.blue_tiles.append(self.tiles[i][j])\n                            self.blue_count += 1\n                        else:\n                            self.red_tiles.append(self.tiles[i][j])\n                            self.red_count += 1\n                            # print(self.red_count, self.n, self.m)\n        # print(self.blue_count, self.n, self.m)\n\n    def count(self):\n        return self.red_count + self.blue_count\n\n    def count_neighbors(self, i, j):\n        res = 0\n        for dx, dy in self.DIR:\n            ni = i + dx\n            nj = j + dy\n            if 0 <= ni < self.n and 0 <= nj < self.m:\n                if self.tiles[ni][nj].color == (0,0,0):\n                    res += 1\n        return res\n\n    def display(self):\n        print()\n        for r in self.tiles:\n            for tile in r:\n                print(tile.i, tile.j, tile.color)\n        print()\n        print(self.red_count)\n        print(self.blue_count)\n\n    def in_range(self, i, j):\n        if 0 <= i < self.n and 0 <= j < self.m:\n            return True\n        else:\n            return False\n\n    def get_neighbors(self, i, j):\n        res = []\n        for dx, dy in self.DIR:\n            ni = i + dx\n            nj = j + dy\n            if 0 <= ni < self.n and 0 <= nj < self.m:\n                if self.tiles[ni][nj].color == (0,0,0):\n                    res.append(self.tiles[ni][nj])\n        return res\n\n    def move(self, i, j, dx, dy):\n        self.tiles[i][j].color = (0, 0, 0)\n        self.tiles[i][j].i = i\n        self.tiles[i][j].j = j\n        self.tiles[i][j].color"
    },
    {
        "number": 4033,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.split()\n    a, b = map(int, line)\n    tiles = []\n    for i in range(a):\n        tiles.append(int(input()))\n    print(tiles)\n    perimeter = sum(tiles)\n    while perimeter < b:\n        perimeter += (b - perimeter)\n    print(perimeter)\n    return \".\".join(map(str, tiles))\n\nprint(solution(\"4 7 9\"))\n"
    },
    {
        "number": 4033,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split(' ')\n    a = [int(i) for i in a]\n    b = [int(i) for i in a[::-1]]\n    a.sort()\n    b.sort()\n    a,b = zip(*sorted(zip(a,b)))\n    p = []\n    for i in range(len(a)):\n        for j in range(i+1,len(a)):\n            p.append(a[i]+b[j])\n    min_p = min(p)\n    return str(min_p)\n"
    },
    {
        "number": 4033,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n  a, b = map(int, stdin.split())\n  i = a\n  while i <= b:\n    if i % a!= 0:\n      i += b\n    else:\n      i += a\n    return str(i)"
    },
    {
        "number": 4033,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.strip())\n    if T <= 0 or T >= T*T:\n        return 'Invalid Input'\n    return 'Minimum perimeter:'+ str(T)\n\ndef"
    },
    {
        "number": 4033,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    tiles = list(map(int, stdin.split()))\n    perimeter = n * (n + 1) // 2\n    # print(tiles)\n    # print(perimeter)\n    # print(set(tiles))\n    # print(set(perimeter))\n    # print(len(set(tiles)))\n    # print(len(set(perimeter)))\n    # print(set(tiles) - set(perimeter))\n    # print(set(tiles) & set(perimeter))\n    # print(tiles - perimeter)\n    # print(tiles ^ perimeter)\n    # print(len(tiles & perimeter))\n    # print(len(tiles ^ perimeter))\n    # print(len(set(tiles) - set(perimeter)))\n    # print(len(set(tiles) ^ set(perimeter)))\n    # print(len(set(tiles) & set(perimeter)))\n    # print(tiles ^ perimeter)\n    # print(tiles ^ perimeter)\n    # print(set(tiles) - set(perimeter))\n    # print(set(tiles) & set(perimeter))\n    # print(tiles ^ perimeter)\n    # print(tiles ^ perimeter)\n    # print(set(tiles) ^ set(perimeter))\n    # print(tiles ^ perimeter)\n    # print(set(tiles) ^ set(perimeter))\n    # print(tiles ^ perimeter)\n    # print(tiles ^ perimeter)\n    # print(set(tiles) ^ set(perimeter))\n    # print(tiles ^ perimeter)\n    # print(set(tiles) ^ set(perimeter))\n    # print(tiles ^ perimeter)\n    # print(set(tiles) ^ set(perimeter))\n    # print(tiles ^ perimeter)\n    # print(set(tiles) ^ set(perimeter))\n    # print(set(tiles) ^ set(perimeter))\n    # print(tiles ^ perimeter)\n    # print(set(tiles) ^ set(perimeter))\n    # print(set(tiles) ^ set(perimeter))\n    # print(set(tiles) ^ set(perimeter))\n    # print(set(tiles) ^ set(perimeter))\n    # print(set(tiles) ^ set(perimeter))\n    # print(set(tiles) ^ set(perimeter))\n    # print(set(tiles) ^ set(perimeter))\n    # print(set(tiles) ^ set(perimeter))\n    # print(set(tiles) ^ set(perimeter))\n    # print(set(tiles) ^ set(perimeter))\n    # print(set(tiles) ^ set(perimeter))\n    # print(set(tiles) ^ set(perimeter))\n    # print(set(tiles) ^ set(perimeter))\n    # print(set(tiles) ^ set(perimeter))\n    # print(set(tiles) ^ set(perimeter))\n    # print(set(tiles) ^ set(perimeter))\n    # print(set(tiles) ^ set(perimeter))\n    # print(set(tiles) ^ set(perimeter))\n    # print(set(tiles) ^ set(perimeter))\n    # print(set(tiles) ^ set(perimeter))\n    # print(set(tiles) ^ set(perimeter))\n    # print(set(tiles) ^ set(perimeter))\n    # print(set(tiles) ^ set(perimeter))\n    # print(set(tiles) ^ set(perimeter))\n    # print(set(tiles) ^ set(perimeter))\n    # print(set(tiles) ^ set(perimeter))\n    # print(set(tiles) ^ set(perimeter))\n    # print(set(tiles) ^ set(perimeter))\n    # print(set(tiles) ^ set(perimeter))\n    # print(set(tiles) ^ set(perimeter))\n    # print(set(tiles) ^ set(perimeter))\n    # print(set(tiles) ^ set(perimeter))\n    # print(set(tiles) ^ set(perimeter))\n    # print(set(tiles) ^ set(perimeter))\n    # print(set(tiles) ^ set(perimeter))\n    # print(set(tiles) ^ set(perimeter))\n    # print(set(tiles) ^ set(perimeter))\n    # print(set(tiles) ^ set(perimeter))\n    # print(set(tiles) ^ set(perimeter))\n    # print(set(tiles) ^ set(perimeter))\n    # print(set(tiles) ^ set(perimeter))\n    # print(set(tiles) ^ set(perimeter))\n    # print(set(tiles) ^ set(perimeter))\n    # print(set(tiles) ^ set(perimeter))\n    # print(set(tiles) ^ set(perimeter))\n    # print(set(tiles) ^ set(perimeter))\n    # print(set(tiles) ^ set(perimeter))\n    # print(set(tiles) ^ set(perimeter))\n    # print(set(tiles) ^ set(perimeter))\n    # print(set(tiles) ^ set(perimeter))\n    # print(set(tiles) ^ set(perimeter))\n    # print(set(tiles) ^ set(perimeter))\n    # print(set(tiles) ^ set(perimeter))\n    # print(set(tiles) ^ set(perimeter))\n    # print(set(tiles) ^ set(perimeter))\n    # print(set(tiles) ^ set(perimeter))\n    # print(set(tiles) ^ set(perimeter))\n    # print(set(tiles) ^ set(perimeter))\n    # print(set(tiles) ^ set(perimeter))\n    # print(set(tiles) ^ set(perimeter))\n    # print(set(tiles) ^ set(perimeter))\n    # print(set(tiles) ^ set(perimeter))\n    # print(set(tiles) ^ set(perimeter))\n    # print(set(tiles) ^ set(perimeter))\n    # print(set"
    },
    {
        "number": 4033,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = list(map(int, stdin.split(' ')))\n    if a > b:\n        return 'Error'\n    if a < b:\n        return 'Error'\n    if a == b:\n        return 'Error'\n    if a + b == 10 ** 14:\n        return str(a) + '.' + str(b)\n    if a * b == 10 ** 14:\n        return str(a) + '.' + str(b)\n    if a * b < 10 ** 14:\n        return 'Error'\n\n    tiles = [0] * (a + b)\n    for _ in range(a):\n        tiles[tiles[a] + 1] += 1\n        tiles[tiles[a] - 1] += 1\n    for _ in range(b):\n        tiles[tiles[b] + 1] += 1\n        tiles[tiles[b] - 1] += 1\n    for i in range(a):\n        for j in range(b):\n            tiles[tiles[i] + j + 1] += 1\n            tiles[tiles[i] - j - 1] += 1\n\n    tiles = list(tiles)\n    for k in range(a + b - 1):\n        if not tiles[k]:\n            tiles.pop(k)\n            tiles.pop(k)\n            tiles.pop(k)\n            tiles.pop(k)\n\n    for i in range(a):\n        for j in range(b):\n            tiles[tiles[i] + j + 1] += 1\n            tiles[tiles[i] - j - 1] += 1\n    for i in range(a):\n        for j in range(b):\n            tiles[tiles[i] + j + 1] += 1\n            tiles[tiles[i] - j - 1] += 1\n    for i in range(a):\n        for j in range(b):\n            tiles[tiles[i] + j + 1] += 1\n            tiles[tiles[i] - j - 1] += 1\n\n    return '.'.join(map(str, tiles))\n\n\ndef"
    },
    {
        "number": 4033,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    return str(n*(n+1)//2) + '=' + str(n*(n+1)//2) + '=' + str(n*(n+1)//2)\n\n[Program]\n\ninput\n6 4\n\noutput\n12\n\n[Example]\n\ninput\n2 4\n\noutput\n5\n\n[Example]\n\ninput\n6 6\n\noutput\n21\n\n[Constraints]\n\n1 <= n <= 10^4\n1 <= a, b <= 10^5\n\n[Time Limit]\n\nO(n^3)\n\n[Solutions]\n\n[1] Accepted\n\n[1] Passed\n\n[2] Accepted\n\n[2] Passed\n\n[3] Accepted\n\n[3] Passed\n\n[4] Accepted\n\n[4] Passed\n\n[5] Accepted\n\n[5] Passed\n\n[6] Accepted\n\n[6] Passed\n\n[7] Accepted\n\n[7] Passed\n\n[8] Accepted\n\n[8] Passed\n\n[9] Accepted\n\n[9] Passed\n\n[10] Accepted\n\n[10] Passed\n\n[11] Accepted\n\n[11] Passed\n\n[12] Accepted\n\n[12] Passed\n\n[13] Accepted\n\n[13] Passed\n\n[14] Accepted\n\n[14] Passed\n\n[15] Accepted\n\n[15] Passed\n\n[16] Accepted\n\n[16] Passed\n\n[17] Accepted\n\n[17] Passed\n\n[18] Accepted\n\n[18] Passed\n"
    },
    {
        "number": 4033,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    result = 0\n    while n > 0:\n        for i in range(a + b):\n            if (n % 10) in [0, 1]:\n                n -= 1\n                result += 1\n            if (n % 10) in [2, 3]:\n                n -= 1\n                result += 1\n        n //= 10\n    return str(result)\n"
    },
    {
        "number": 4034,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n,s = list(map(int,stdin.split(\" \")))\n    s = list(s)\n    def compare(x,y):\n        if x>y:\n            return -1\n        elif x==y:\n            return 0\n        elif x<y:\n            return 1\n        else:\n            return -1\n    def swap(i,j):\n        return s[i],s[j]\n    def do_swap(start,end):\n        while start<end:\n            x,y = start,start\n            while x<y:\n                x+=1\n                y-=1\n            start, end = end, start\n        return end\n    def color_swap(start,end):\n        x,y = start,end\n        while x<y:\n            x+=1\n            y+=1\n        if color_swap(start,x)==color_swap(x,start):\n            start, end = do_swap(x,y), do_swap(start,x)\n            return end\n        else:\n            return start\n    for i in range(n):\n        start = color_swap(0,i)\n        end = color_swap(i,n-1)\n        if end!=start:\n            s[start],s[end] = s[end],s[start]\n    for i in range(n-1):\n        if s[i]!=s[i+1]:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 4034,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def color(index, color):\n        if index == len(s):\n            return \"\"\n        if color == '0':\n            return s[index] + color(index+1, '1')\n        else:\n            return s[index] + color(index+1, '0')\n\n    s = stdin[:len(stdin)]\n    return color(0, '0') + color(1, '1') + color(2, '0')\n"
    },
    {
        "number": 4034,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = []\n    for _ in range(int(stdin.strip())):\n        s.append(list(stdin.strip().split()))\n    \n    def color_swap(i, j):\n        s[i][j], s[i][j] = s[j][i], s[i][j]\n        \n    # color_swap(0,1)\n    # color_swap(1,2)\n    # color_swap(2,3)\n    # color_swap(3,0)\n    # color_swap(0,4)\n    # color_swap(4,1)\n    \n    s.sort(key=lambda s: (s[0], s[1]))\n    \n    for i, s in enumerate(s):\n        if i == 0:\n            continue\n        if i == len(s)-1:\n            break\n        if s[i] == '0':\n            color_swap(i+1,i+1)\n            continue\n        if s[i] == '1':\n            color_swap(i+1,i+1)\n            color_swap(i+1,i+1)\n            continue\n    \n    return ''.join(s)\n"
    },
    {
        "number": 4034,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip().split()[1])\n    s = stdin.strip().split()\n    \n    if n < 2:\n        return \"NO\"\n    if n == 2:\n        return s[0] + '0' + s[1] + '1'\n    \n    c1 = 0\n    c2 = 1\n    for i in range(n - 2):\n        c1, c2 = c2, c1 + c2\n        \n    return s[0] + '0' + s[c1] + '1' + s[c2] + '0' + s[n - 2] + '1'\n    \n    \n    "
    },
    {
        "number": 4034,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    n = int(s[0])\n    s = \"\".join(s[1:])\n    answer = 0\n    if n < 3:\n        answer = 1\n    else:\n        answer = 1\n        for i in range(1, n-2):\n            if s[i]!= s[i-1] or s[i]!= s[i+1]:\n                answer = 0\n                break\n        if s[n-2]!= s[n-1] or s[n-2]!= s[n-3]:\n            answer = 0\n    if answer == 1:\n        print(\"YES\")\n    else:\n        print(\"NO\")"
    },
    {
        "number": 4034,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    s = [list(stdin.strip()) for _ in range(n)]\n    n = len(s)\n    color = [0] * n\n    swap_color = [0] * n\n\n    def is_color_swap(x, y):\n        return s[x][y] == '0' or s[x][y] == '1'\n\n    for i in range(n):\n        for j in range(n):\n            if is_color_swap(i, j):\n                swap_color[i] += 1\n                swap_color[j] += 1\n\n    for i in range(n):\n        for j in range(n):\n            if swap_color[i] == 1 and swap_color[j] == 1:\n                if not (i == n - 1 or j == n - 1):\n                    s[i][j] = '0'\n                    s[j][i] = '0'\n\n    for i in range(n):\n        for j in range(n):\n            if s[i][j] == '0':\n                color[i] = 1\n                color[j] = 1\n\n    sorted = []\n    for i in range(n):\n        for j in range(n):\n            if color[i] == 1 and color[j] == 1:\n                sorted.append(s[i][j])\n\n    for i in range(n):\n        for j in range(n):\n            if s[i][j] == '0':\n                if not (i == n - 1 or j == n - 1):\n                    s[i][j] = '0'\n                    s[j][i] = '0'\n\n    if len(sorted) > n:\n        return \"NO\"\n    else:\n        return \"YES\"\n"
    },
    {
        "number": 4034,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    s = ''.join(stdin.strip().split())\n    swap = 0\n    for i in range(1,n+1):\n        first, second = s[:i], s[i:]\n        first_color, second_color = \"0\", \"1\"\n        if first == first_color:\n            swap = -1\n            continue\n        for j in range(len(first_color)):\n            if first_color[j]!= second[j]:\n                swap = 1\n                break\n        if swap:\n            s = ''.join(sorted(first + second))\n    print('YES' if s == ''.join(sorted(s)) else 'NO')\n"
    },
    {
        "number": 4034,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    for i in range(1, len(s)):\n        s[i] = s[i].swapcase()\n    if ''.join(sorted(s)) == ''.join(sorted(s, reverse=True)):\n        return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 4034,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n,s=map(int,stdin.split())\n    s=s.lower()\n    visit={}\n    for i in range(n):\n        visit[s[i]]=0\n    for i in range(n):\n        if s[i] in visit:\n            visit[s[i]]+=1\n        else:\n            visit[s[i]]=1\n    if len(visit)<n:\n        return \"NO\"\n    temp=sorted(visit.items(),key=lambda x:x[1])\n    for i in range(n-1):\n        if temp[i][1]!=temp[i+1][1]:\n            return \"NO\"\n    return \"YES\""
    },
    {
        "number": 4034,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    s = stdin[1]\n    answer = 'NO'\n    swaps = 0\n    i = 0\n    j = 0\n    while True:\n        if s[i]!= '0':\n            answer = 'NO'\n            break\n        else:\n            if s[i+1] == '0':\n                answer = 'YES'\n                break\n            if s[i+1]!= '0' and s[i+1]!= '1':\n                answer = 'NO'\n                break\n            elif s[i+1] == '0' and s[i] == '1':\n                s[i] = '0'\n                answer = 'YES'\n                break\n            elif s[i+1]!= '0' and s[i+1] == '1':\n                s[i] = '1'\n                answer = 'YES'\n                break\n            else:\n                if s[i] == '1':\n                    s[i] = '0'\n                else:\n                    s[i] = '1'\n            i += 1\n        i += 1\n        swaps += 1\n        if i >= n:\n            i = 0\n            j += 1\n    if swaps == 0:\n        return \"NO\"\n    else:\n        return answer\n\ntests = int(input())\nfor t in range(tests):\n    n = int(input())\n    s = input()\n    print(solution(s))"
    },
    {
        "number": 4035,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n        \n    def get_price(c, b):\n        return int(b * 0.08) + b * c * 0.1\n\n    def is_prices_equal(price1, price2):\n        if price1 >= price2:\n            return False\n        return int(price1 * 0.08) + price1 * c * 0.1 == price2\n\n    if len(stdin) < 2:\n        return -1\n\n    price_a = int(stdin[0])\n    price_b = int(stdin[1])\n    c = 10\n    while price_a < price_b:\n        if is_prices_equal(price_a, price_b):\n            return str(price_a)\n        c = c + 1\n        price_a = get_price(c, price_a)\n        price_b = get_price(c, price_b)\n    return str(price_a)"
    },
    {
        "number": 4035,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    N,A,B = map(int, stdin.split())\n    if (A > B):\n        print(-1)\n    else:\n        print(B-A)\n"
    },
    {
        "number": 4035,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A,B = map(int, stdin.split())\n    ans = abs(A) + abs(B)\n    if (A < B):\n        ans = min(ans, abs(A - B))\n    return str(ans)\n"
    },
    {
        "number": 4035,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    \n    if A < B:\n        return str(A)\n    elif A == B:\n        return str(0)\n    elif A > B:\n        return str(B)"
    },
    {
        "number": 4035,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    prices = list(map(int, stdin.split()))\n    prices.sort()\n    while A > 0:\n        if (A - B) >= 2:\n            A -= 2\n        elif (A - B) < 1:\n            A += 1\n        else:\n            break\n    for i in range(len(prices)):\n        if prices[i] <= B:\n            prices[i] -= B\n    if prices[0] == B:\n        return str(B)\n    else:\n        return '-1'\n\n\n-----Sample Input-----\n2 2\n\n-----Sample Output-----\n15\n\n-----Sample Input-----\n1 2\n\n-----Sample Output-----\n1\n'''\n\n\nclass Solution:\n    def findSolution(self, A, B, C):\n        return round((A + B + C) / (A * B * C), 2)\n\n    def solution(self, stdin):\n        A, B, C = map(int, stdin.split())\n        return self.findSolution(A, B, C)\n"
    },
    {
        "number": 4035,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N,A,B = map(int,stdin.split())\n    if A > B:\n        return str(min(N//A+2,N//B+1))\n    return str(-1)"
    },
    {
        "number": 4035,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n  N, A, B = map(int, stdin.split())\n  if A <= 0 or B <= 0:\n    return -1\n  if (A * B) > N:\n    return -1\n  if N == 1:\n    return A\n  if N % 2 == 0:\n    return A / 2\n  else:\n    return A / 2 + A / 2 * (2 * N - 1) / 2\n"
    },
    {
        "number": 4035,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if (A*2) <= B <= (A*2) + B:\n        print(min(A, B))\n    elif A*2 < B:\n        print(-1)\n    else:\n        print(max(A, B))\n"
    },
    {
        "number": 4035,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    A_b = (A // 100) * 100\n    B_b = (B // 100) * 100\n    if A > B_b:\n        return str(A_b)\n    elif A_b < B_b:\n        return str(B_b)\n    elif A_b == B_b:\n        return str(A_b)\n    else:\n        return str(-1)\n"
    },
    {
        "number": 4035,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A > B:\n        return str(A)\n    return str(B)\n"
    },
    {
        "number": 4036,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    q = deque()\n    q.append(N)\n    ans = []\n    while q:\n        if len(q) == K:\n            ans.append('YES')\n            break\n        elif q[0] >= 0:\n            q.append(q.popleft())\n        else:\n            for _ in range(q[0], K):\n                q.append(q.popleft())\n    if not q:\n        return 'NO'\n    else:\n        return ''.join(ans)\n"
    },
    {
        "number": 4036,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    \n    def solve(n):\n        for i in range(2, n + 1):\n            if i > 1:\n                sol = solve(i)\n                if i == sol:\n                    return \"YES\"\n            if n % i == 0:\n                sol = n // i\n                if sol == 0:\n                    return \"YES\"\n    \n    \n    if solve(n) == \"YES\":\n        print(\"YES\")\n    else:\n        print(\"NO\")"
    },
    {
        "number": 4036,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n,k=map(int,stdin.split())\n    a=list(map(int,stdin.split()))\n    \n    if len(a)==n:\n        if k==1:\n            return \"YES\"\n        if k%2==1:\n            return str(k-1)\n        else:\n            return str(k-1) + str(2)\n    \n    if len(a)==n:\n        if k==1:\n            return \"YES\"\n        if k%2==1:\n            return str(k-1) + str(2)\n        else:\n            return str(k-1) + str(2) + str(3)\n    \n    if len(a)==n:\n        if k==1:\n            return \"YES\"\n        if k%2==1:\n            return str(k-1) + str(2)\n        else:\n            return str(k-1) + str(2) + str(3)\n    \n    if len(a)==n:\n        return \"YES\"\n    \n    return \"NO\"\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= k <= 10^5\n\nExample 1:\n\nInput\n\n2\n10\n1 2\n5\n4\n\nOutput\n\nNO\n\nExample 2:\n\nInput\n\n2\n8\n1 2 4\n6\n5\n7\n\nOutput\n\nNO\n\nExample 3:\n\nInput\n\n5\n1 4 5\n1 2 4 6 8\n\nOutput\n\nYES\n\n\"\"\"\n\nclass Solution:\n    def solveNQueens(self, n: int) -> List[List[str]]:\n        def backtracking(curr_row: int) -> List[List[str]]:\n            res = []\n            if curr_row == n:\n                return res\n            if curr_row == 0:\n                return []\n            for col in range(n):\n                if not self.is_valid(curr_row, col):\n                    continue\n                self.cols[col] = True\n                res.append(self.find_next_empty(col))\n                self.cols[col] = False\n            return res\n        \n        def is_valid(row: int, col: int) -> bool:\n            if row == n:\n                return False\n            if row == 0:\n                return True\n            if col == n:\n                return True\n            if col == 0:\n                return True\n            return 0 <= row < n and 0 <= col < n and not self.cols[col] and not self.cols[row] and not self.cols[col]\n        \n        def find_next_empty(row: int) -> str:\n            empty_list = []\n            for col in range(n):\n                if self.is_valid(row, col):\n                    empty_list.append(self.find_next_empty(col))\n            if len(empty_list) > 0:\n                return ''.join(empty_list)\n            else:\n                return '-'\n        \n        self.cols = [False]*n\n        self.is_valid(0, 0)\n        return backtracking(0)\n"
    },
    {
        "number": 4036,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    \n    if n >= k:\n        return \"NO\"\n    \n    if k < n:\n        return \"NO\"\n    \n    a = [list(map(int, input().split())) for _ in range(n)]\n    \n    return solution(n, k, a)\n\n\n-----Output-----\n\nOutput\nYES\n1 2 4 5 6 8\n\nOutput\nYES\n1 2 4 5 6 8\n"
    },
    {
        "number": 4036,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    if not a:\n        return \"NO\"\n    a.sort()\n    if a[0] + 1 == a[-1]:\n        return str(k)\n    if k > n:\n        return \"NO\"\n    for i in range(1, k):\n        if a[i] - a[i-1] < 2:\n            return str(k)\n        a[i] = a[i-1]\n        a[i-1] = a[i]\n    print(str(k))\n    return \"YES\"\n"
    },
    {
        "number": 4036,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    for line in stdin:\n        n, k = map(int, line.split())\n        a = [int(i) for i in str(n)]\n        print(a)\n        if a[0] < a[1] < a[2] < a[3] < a[4] < a[5] < a[6] < a[7] < a[8] < a[9]:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n"
    },
    {
        "number": 4036,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    stdin = list(map(int, stdin.split()))\n    a = [0] * (k + 1)\n    a_prev = 1\n    for i in range(1, n + 1):\n        a[a_prev] = a_prev + i\n        a_prev += 1\n    \n    for i in range(k, 0, -1):\n        temp = a[a_prev]\n        a[a_prev] = a[a_prev - 1]\n        a[a_prev - 1] = temp\n        a_prev -= 1\n    \n    for i in range(1, k + 1):\n        temp = a[i]\n        a[i] = a[i - 1]\n        a[i - 1] = temp\n    \n    answer = 'YES'\n    for i in a:\n        answer = answer if answer else str(i)\n    \n    return answer"
    },
    {
        "number": 4036,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    solution = set()\n    def check(x):\n        if x in solution:\n            return x\n        if sum(sorted(arr[x:])) <= 3:\n            solution.add(x)\n            return x\n        solution.add(x)\n        return x + 1\n    for i in range(k):\n        s = check(i)\n        if s < 3:\n            return \"NO\"\n    return \"YES\"\n\nn, k = map(int, input().split())\nprint(solution(n, k))\n"
    },
    {
        "number": 4036,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n*(n+1)//2 > k:\n        return 'NO'\n    def sol(k, n):\n        a = []\n        for i in range(1, n+1):\n            if i + k > n * (n+1) // 2:\n                break\n            a.append(i)\n            if len(a) == n:\n                break\n            if sum(a) > n*(n+1)//2:\n                return 'NO'\n        return 'YES'\n    print(sol(k, n))\n"
    },
    {
        "number": 4036,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n,k = map(int,stdin.split())\n    num = list(map(int,stdin.split()))\n    \n    ans = 0\n    \n    for i in range(len(num)):\n        num[i] += (i+1) * (k//2)\n        ans += (i+1)*(k//2)\n    \n    num.sort()\n    for i in num:\n        if ans % i == 0:\n            ans = ans//i\n    \n    return f\"YES\" if ans == n else f\"NO\""
    },
    {
        "number": 4037,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    lst = [list(map(int, input().split())) for _ in range(n)]\n    a_i = 0\n    b_i = r\n    for i in range(n):\n        if lst[i][0] < b_i:\n            a_i = i + 1\n        else:\n            b_i = max(lst[i][0], b_i - lst[i][1])\n    max_i = a_i + n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if lst[i][1] > lst[j][1]:\n                a_i = i\n                b_i = max(lst[i][0], lst[j][0])\n            elif lst[i][1] == lst[j][1]:\n                if lst[i][0] > lst[j][0]:\n                    a_i = i\n                    b_i = max(lst[i][0], lst[j][0])\n                else:\n                    a_i = j\n                    b_i = max(lst[i][0], lst[j][0])\n    answer = max_i - a_i\n    return str(answer)\n"
    },
    {
        "number": 4037,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, r = [int(x) for x in stdin.split()]\n    a_i, b_i = [int(x) for x in stdin.split()]\n    max_len = 0\n    for i in range(n):\n        if r[i] >= a_i:\n            r[i] -= a_i\n            r[i] -= a_i\n            r[i] -= b_i\n            r[i] += b_i\n            r[i] += b_i\n            r[i] += b_i\n        else:\n            r[i] += b_i\n        if r[i] < 0:\n            r[i] = 0\n        max_len = max(max_len, r[i])\n    return str(max_len)\n\nprint(solution(stdin))"
    },
    {
        "number": 4037,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    from itertools import combinations\n    from collections import defaultdict\n    \n    n, r = map(int, stdin.split())\n    answer = 0\n    \n    def validate_numbers(nums: list[int]) -> bool:\n        return sum(nums) == n\n        \n    def create_graph(nums: list[int], exclude: list[int]) -> defaultdict:\n        graph = defaultdict(list)\n        for a, b in combinations(nums, 2):\n            graph[a].append(b)\n            graph[b].append(a)\n        return graph\n        \n    def dfs(nums: list[int], graph: defaultdict, to_visit: list[int], results: set[tuple[int, int]]):\n        if not to_visit:\n            if not to_visit:\n                if not graph[nums]:\n                    results.add((nums, 1))\n                    return\n            else:\n                to_visit.append(nums)\n                for a in graph[nums]:\n                    if a not in to_visit:\n                        dfs(a, graph, to_visit, results)\n                        \n                to_visit.pop()\n        else:\n            for a, b in graph[nums]:\n                if a not in to_visit:\n                    results.add((a, 1))\n                    dfs(a, graph, to_visit, results)\n            to_visit.append(nums)\n    \n    graph = create_graph(nums, list(range(1, n + 1)))\n    \n    for nums in map(list, map(int, stdin.split())):\n        if not validate_numbers(nums):\n            continue\n        \n        if not graph.get(nums):\n            graph[nums] = []\n            continue\n        \n        dfs(nums, graph, [], set())\n        \n    graph = defaultdict(list)\n    for a, b in graph.items():\n        graph[a].append(b)\n        graph[b].append(a)\n    \n    for key, val in graph.items():\n        if len(val) > 1:\n            val = sorted(val, key=lambda x: (x[0], x[1]))\n            val = sorted(val, key=lambda x: (x[0], -x[1]))\n            graph[key] = val\n        else:\n            graph[key] = []\n    \n    for nums in map(list, map(int, stdin.split())):\n        if not validate_numbers(nums):\n            continue\n        \n        if len(graph[nums]) < 2:\n            continue\n        \n        max_size = 0\n        for num, _ in graph[nums]:\n            if max_size < num:\n                max_size = num\n        answer += max_size\n        \n    return answer"
    },
    {
        "number": 4037,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    res = a\n    for _ in range(b):\n        a, b = map(int, stdin.split())\n        res = min(res, a+b)\n    return str(res)\n\nprint(solution(input()))"
    },
    {
        "number": 4037,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin[0])\n    r = int(stdin[1])\n    \n    valid_ratings = set(map(int, stdin[2:]))\n    \n    for i in range(n, n+r):\n        if i in valid_ratings:\n            valid_ratings.remove(i)\n    \n    if len(valid_ratings)!= 0:\n        return str(max(valid_ratings))\n    \n    return str(len(valid_ratings))\n"
    },
    {
        "number": 4037,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    if n < 1 or n > 1000000:\n        return 0\n\n    lst = []\n    for _ in range(n):\n        a, b = map(int, stdin.split())\n        lst.append((a, b))\n        \n    lst.sort()\n\n    r1, r2 = map(int, input().split())\n    for i in range(n):\n        if lst[i][0] < r1:\n            r1 = lst[i][0]\n        if lst[i][0] > r2:\n            r2 = lst[i][0]\n\n    max_size = r1 - r2\n    for i in range(n):\n        if lst[i][0] < r1 and lst[i][0] > r2:\n            lst[i][0] -= r2\n            lst[i][1] += r2\n            max_size += 1\n    \n    return max_size\n\"\"\"\nimport sys\nsys.setrecursionlimit(10000)\ndef"
    },
    {
        "number": 4037,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    b = list(map(int, stdin.split()))\n    b.sort()\n    # print(a,b)\n    # print(r)\n    if r <= 0:\n        return str(0)\n    dp = [[0]*r for _ in range(n)]\n    dp[0][0] = 1\n    # print(dp)\n    for i in range(n):\n        for j in range(r):\n            if i == 0:\n                dp[i][j] = 0\n            elif j == 0:\n                dp[i][j] = -1\n            elif a[i] > b[j]:\n                dp[i][j] = dp[i-1][j]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i-1][j-a[i]] + a[i])\n    return str(dp[n-1][r-1])"
    },
    {
        "number": 4037,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    a, b = map(int, stdin.split())\n    \n    # The maximum possible size of a set of projects (not including those without any rating)\n    max_p_sz = 0\n    \n    # The minimum possible size of a set of projects (including those without any rating)\n    min_p_sz = (r - 1) + 1\n    \n    # The largest possible size of a set of projects\n    p_sz = (max_p_sz + min_p_sz) // 2\n    \n    # The sum of rating changes after a project\n    p_sum = 0\n    \n    # The maximum possible size of the subset of projects\n    subset_sz = 0\n    \n    # The best possible subset\n    best_p_sz = 0\n    \n    # The number of projects completed for every possible subset size\n    # (including the subset with maximum possible size)\n    sum_p_sz = 0\n    \n    # The number of projects that can be completed for every possible subset size\n    # (including the subset with minimum possible size)\n    sum_min_p_sz = 0\n    \n    # The total number of projects that can be completed for every possible subset size\n    # (including the subset with maximum possible size)\n    sum_p_sz_2 = 0\n    \n    # The number of projects that can be completed for every possible subset size\n    # (including the subset with minimum possible size)\n    sum_min_p_sz_2 = 0\n    \n    # The number of projects that can be completed for every possible subset size\n    # (including the subset with maximum possible size)\n    sum_p_sz_3 = 0\n    \n    # The number of projects that can be completed for every possible subset size\n    # (including the subset with minimum possible size)\n    sum_min_p_sz_3 = 0\n    \n    # The best possible subset size for every possible subset size\n    best_sub_sz = 0\n    \n    for i in range(n):\n        # The maximum possible size of the subset of projects\n        max_p_sz = a + b\n        \n        # The minimum possible size of the subset of projects\n        min_p_sz = max_p_sz - 1\n        \n        # The total number of projects that can be completed for every possible subset size\n        # (including the subset with maximum possible size)\n        sum_p_sz = sum_p_sz + a\n        \n        # The number of projects that can be completed for every possible subset size\n        # (including the subset with minimum possible size)\n        sum_min_p_sz = sum_min_p_sz + b\n        \n        # The number of projects that can be completed for every possible subset size\n        # (including the subset with maximum possible size)\n        sum_p_sz_2 = sum_p_sz_2 + a\n        \n        # The number of projects that can be completed for every possible subset size\n        # (including the subset with minimum possible size)\n        sum_min_p_sz_2 = sum_min_p_sz_2 + b\n        \n        # The number of projects that can be completed for every possible subset size\n        # (including the subset with maximum possible size)\n        sum_p_sz_3 = sum_p_sz_3 + a\n        \n        # The number of projects that can be completed for every possible subset size\n        # (including the subset with minimum possible size)\n        sum_min_p_sz_3 = sum_min_p_sz_3 + b\n        \n        # The best possible subset size for every possible subset size\n        best_sub_sz = best_sub_sz + (min_p_sz - max_p_sz)\n        \n        # The number of projects that can be completed for every possible subset size\n        # (including the subset with maximum possible size)\n        sum_p_sz_3 = sum_p_sz_3 + a\n        \n        # The number of projects that can be completed for every possible subset size\n        # (including the subset with minimum possible size)\n        sum_min_p_sz_3 = sum_min_p_sz_3 + b\n        \n        # The best possible subset size for every possible subset size\n        best_sub_sz = best_sub_sz + (min_p_sz - max_p_sz)\n        \n        # The maximum possible size of the subset of projects\n        max_p_sz = max_p_sz - 1\n        \n        # The minimum possible size of the subset of projects\n        min_p_sz = min_p_sz + 1\n        \n        # The total number of projects that can be completed for every possible subset size\n        # (including the subset with maximum possible size)\n        sum_p_sz = sum_p_sz + min_p_sz\n        \n        # The number of projects that can be completed for every possible subset size\n        # (including the subset with minimum possible size)\n        sum_min_p_sz = sum_min_p_sz + 1\n        \n        # The number of projects that can be completed for every possible subset size\n        # (including the subset with maximum possible size)\n        sum_p_sz_2 = sum_p_sz_2 + min_p_sz\n        \n        # The number of projects that can be completed for every possible subset size\n        # (including the subset with minimum possible size)\n        sum_min_p_sz_2 = sum_min_p_sz_2 + 1\n        \n        # The number of projects that can be completed for every possible subset size\n        # (including the subset with maximum possible size)\n        sum_p_sz_3 = sum_p_sz_3 + min_p_sz\n        \n        # The number of projects that can be completed for every possible subset size\n        # (including the subset with minimum possible size)\n        sum_min_p_sz_3 = sum_min_p_sz_3 + 1\n        \n        # The best possible subset size for every possible subset size\n        best_sub_sz = best_sub_sz + (min_p_sz - max_p_sz)\n    \n    # The maximum possible size of the subset of projects\n    p_sz = max_p_sz\n    \n    # The minimum possible size of the subset of projects\n    "
    },
    {
        "number": 4037,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Best-practice brute-force solution\n    \"\"\"\n    line = stdin.split(' ')\n    n = int(line[0])\n    r = int(line[1])\n    n_a, r_a = map(int, line[2].split())\n    n_b, r_b = map(int, line[3].split())\n\n    if r >= r_a:\n        r_a = r\n    else:\n        r_a = r_a\n\n    if r >= r_b:\n        r_b = r\n    else:\n        r_b = r_b\n\n    ans = min(r_a, r_b)\n    n_a = max(n_a, n)\n    n_b = max(n_b, n)\n\n    if n_a < n_b:\n        ans = n_b\n    else:\n        ans = n_a\n\n    return str(ans)\n\"\"\"\nLine 2:\nInput\n2 2\n-300 -300\n1 299\n1 123\n\nOutput\n300\n\nLine 3:\nInput\n10 4\n-300 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -300\n-1 -"
    },
    {
        "number": 4037,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    input_list = [list(map(int, input().split())) for _ in range(n)]\n    answer = 0\n    max_size = input_list[0][0]\n    for i in range(n):\n        if max_size < input_list[i][0]:\n            max_size = input_list[i][0]\n    for i in range(n):\n        if max_size < input_list[i][1]:\n            answer += 1\n            max_size = input_list[i][1]\n    for i in range(n):\n        if max_size < input_list[i][2]:\n            answer += 1\n            max_size = input_list[i][2]\n    for i in range(n):\n        if max_size < input_list[i][3]:\n            answer += 1\n            max_size = input_list[i][3]\n    return str(answer)\n\n\n_________________________________________________________________________________________________________________________________________________________________________________\n\n9\n10 -2\n6 -1\n\n10\n-2\n-1\n10\n1\n4\n5\n\n6\n0\n\n_________________________________________________________________________________________________________________________________________________________________________________\n\n10\n3 4\n\n10\n0\n1\n1\n\n0\n5\n\n_________________________________________________________________________________________________________________________________________________________________________________\n\n5\n-1\n-1\n-2\n-3\n\n0\n1\n1\n1\n\n_________________________________________________________________________________________________________________________________________________________________________________\n\n10\n-2\n-1\n-1\n-2\n-3\n\n0\n-1\n-2\n-3\n\n_________________________________________________________________________________________________________________________________________________________________________________\n\n10\n0\n-1\n-1\n-2\n-3\n\n-2\n-1\n-2\n-3\n\n0\n-1\n-2\n-3\n\n_________________________________________________________________________________________________________________________________________________________________________________\n\n10\n-1\n-2\n-3\n-4\n-5\n\n-1\n-2\n-3\n-4\n-5\n\n-2\n-3\n-4\n-5\n\n-4\n-3\n-5\n\n-5\n-4\n-3\n-6\n-7\n-8\n-9\n-10\n\n_________________________________________________________________________________________________________________________________________________________________________________\n\n-1\n-2\n-3\n-4\n-5\n-6\n-7\n-8\n-9\n-10\n\n-2\n-3\n-4\n-5\n-6\n-7\n-8\n-9\n-10\n\n-4\n-5\n-6\n-7\n-8\n-9\n-10\n\n_________________________________________________________________________________________________________________________________________________________________________________\n\n-1\n-2\n-3\n-4\n-5\n-6\n-7\n-8\n-9\n-10\n\n-2\n-3\n-4\n-5\n-6\n-7\n-8\n-9\n-10\n\n-4\n-5\n-6\n-7\n-8\n-9\n-10\n\n_________________________________________________________________________________________________________________________________________________________________________________\n\n-1\n-2\n-3\n-4\n-5\n-6\n-7\n-8\n-9\n-10\n\n-2\n-3\n-4\n-5\n-6\n-7\n-8\n-9\n-10\n\n-4\n-5\n-6\n-7\n-8\n-9\n-10\n\n-5\n-6\n-7\n-8\n-9\n-10\n\n_________________________________________________________________________________________________________________________________________________________________________________\n\n-1\n-2\n-3\n-4\n-5\n-6\n-7\n-8\n-9\n-10\n\n-2\n-3\n-4\n-5\n-6\n-7\n-8\n-9\n-10\n\n-4\n-5\n-6\n-7\n-8\n-9\n-10\n\n-6\n-7\n-8\n-9\n-10\n_________________________________________________________________________________________________________________________________________________________________________________\n\n-1\n-2\n-3\n-4\n-5\n-6\n-7\n-8\n-9\n-10\n\n-2\n-3\n-4\n-5\n-6\n-7\n-8\n-9\n-10\n\n-4\n-5\n-6\n-7\n-8\n-9\n-10\n\n-5\n-6\n-7\n-8\n-9\n-10\n\n-7\n-8\n-9\n-10\n_________________________________________________________________________________________________________________________________________________________________________________\n\n-1\n-2\n-3\n-4\n-5\n-6\n-7\n-8\n-9\n-10\n\n-2\n-3\n-4\n-5\n-6\n-7\n-8\n-9\n-10\n\n-4\n-5\n-6\n-7\n-8\n-9\n-10\n_________________________________________________________________________________________________________________________________________________________________________________\n\n-1\n-2\n-3\n-4\n-5\n-6\n-7\n-8\n-9\n-10\n\n-2\n-3\n-4\n-5\n-6\n-7\n-8\n-9\n-10\n\n-4\n-5\n-6\n-7\n-8\n-9\n-10\n_________________________________________________________________________________________________________________________________________________________________________________\n\n-1\n-2\n-3\n-4\n-5\n-6\n-7\n-8\n-9\n-10\n\n-2\n-3\n-4\n-5\n-6\n-7\n-8\n-9\n-10\n\n-4\n-5\n-6\n-7\n-8\n-9\n-10\n_________________________________________________________________________________________________________________________________________________________________________________\n\n-1\n-2\n-3\n-4\n-5\n-6\n-7\n-8\n-9\n-10\n\n-2\n-3\n-4\n-5\n-6\n-7\n-8\n-9\n-10\n\n-4\n-5\n-6\n-7\n-8\n-9\n-10\n_________________________________________________________________________________________________________________________________________________________________________________\n\n-1\n-2\n-3\n-4\n-5\n-6\n-7\n-8\n-9\n-10\n\n-2\n-3\n-4\n-5\n-6\n-7\n-8\n-9\n-10\n\n-4\n-5\n-6\n-7\n-8\n-9\n-10\n_________________________________________________________________________________________________________________________________________________________________________________\n\n-1\n-2\n-3\n-4\n-5\n-6\n-7\n-8\n-9\n-10\n\n-2\n-3\n-4\n-5\n-6\n-7\n-8\n-9\n-10\n\n-4\n-5\n-6\n-7\n-8"
    },
    {
        "number": 4038,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    matrix = [[int(i) for i in input().split()] for j in range(m)]\n    for i in range(m):\n        for j in range(n):\n            matrix[i][j] = str(matrix[i][j])\n    for i in range(m):\n        for j in range(n):\n            if matrix[i][j] == matrix[i][-1-j]:\n                matrix[i][j] = matrix[i][j] + matrix[i][-1-j]\n            else:\n                return 'NO'\n    return 'YES'\n\n\nprint(solution(stdin))\n-----Constraints-----\n\nSample Input\n\n1\n1 1 1 1 1 3 3 3 3\n\nSample Output\n\nYES\n1 3 1\n3 1 3\n1 3 1\n\nExplanation\n\nFor example, for $n = 2$ and $m = 3$ the result is \u201cYES\u201d.\n\nIn this case, only two numbers are repeated, so they are the only solution.\n\nThe first number (1) is repeated twice, and the second (3) and third (3) are repeated exactly once.\n\nSo, one of the solutions is the only, so it's not palindromic.\n\nSample Input\n\n1\n10\n\nSample Output\n\nNO\n\nExplanation\n\nFor example, for $n = 2$ and $m = 3$ the result is \u201cNO\u201d.\n\nIn this case, the first number (1) is repeated twice, and the second (3) and third (3) are repeated exactly once.\n\nSo, no solution exists.\n\nSample Input\n\n1\n1\n\nSample Output\n\nYES\n1 1 1 1 1 3 3 3 3\n\nConstraints\n\n1 <= n <= 1000\n\n1 <= m <= 1000\n\n1 <= ai <= 10^9\n\nSample Input\n\n2\n3\n\nSample Output\n\nNO\n\nExplanation\n\nWe can either do a multiplication operation with the first number, and the second number (3), which is repeated twice, or do a multiplication operation with the first number (3) and the second number (3), which is repeated exactly once.\n\nThis is not possible because the first number (1) is repeated twice, and the second (3) and third (3) are repeated exactly once.\n\nSo, we do not have to do a multiplication operation.\n\n\n-----Constraints-----\n\n0 <= n <= 1000\n0 <= m <= 1000\n\n\"\"\""
    },
    {
        "number": 4038,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def ispalindrome(a):\n        left = 0\n        right = len(a) - 1\n        \n        while left < right:\n            if a[left]!= a[right]:\n                return False\n            left += 1\n            right -= 1\n        return True\n    \n    def ispalindrome2(a):\n        left = 0\n        right = len(a) - 1\n        \n        while left < right:\n            if a[left]!= a[right]:\n                return False\n            left += 1\n            right -= 1\n        return True\n    \n    def ispalindrome3(a):\n        left = 0\n        right = len(a) - 1\n        \n        while left < right:\n            if a[left]!= a[right]:\n                return False\n            left += 1\n            right -= 1\n        return True\n    \n    def ispalindrome4(a):\n        left = 0\n        right = len(a) - 1\n        \n        while left < right:\n            if a[left]!= a[right]:\n                return False\n            left += 1\n            right -= 1\n        return True\n    \n    def ispalindrome5(a):\n        left = 0\n        right = len(a) - 1\n        \n        while left < right:\n            if a[left]!= a[right]:\n                return False\n            left += 1\n            right -= 1\n        return True\n    \n    def ispalindrome6(a):\n        left = 0\n        right = len(a) - 1\n        \n        while left < right:\n            if a[left]!= a[right]:\n                return False\n            left += 1\n            right -= 1\n        return True\n    \n    def ispalindrome7(a):\n        left = 0\n        right = len(a) - 1\n        \n        while left < right:\n            if a[left]!= a[right]:\n                return False\n            left += 1\n            right -= 1\n        return True\n    \n    def ispalindrome8(a):\n        left = 0\n        right = len(a) - 1\n        \n        while left < right:\n            if a[left]!= a[right]:\n                return False\n            left += 1\n            right -= 1\n        return True\n    \n    def ispalindrome9(a):\n        left = 0\n        right = len(a) - 1\n        \n        while left < right:\n            if a[left]!= a[right]:\n                return False\n            left += 1\n            right -= 1\n        return True\n    \n    \n    for i in range(0, len(stdin)):\n        a = stdin[i].split()\n        if ispalindrome(a):\n            return 'YES'\n        if ispalindrome2(a):\n            return 'YES'\n        if ispalindrome3(a):\n            return 'YES'\n        if ispalindrome4(a):\n            return 'YES'\n        if ispalindrome5(a):\n            return 'YES'\n        if ispalindrome6(a):\n            return 'YES'\n        if ispalindrome7(a):\n            return 'YES'\n        if ispalindrome8(a):\n            return 'YES'\n        if ispalindrome9(a):\n            return 'YES'\n    return"
    },
    {
        "number": 4038,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    string = stdin.rstrip().split()\n    \n    if len(string) == 1:\n        return \"NO\"\n    \n    palindromic = []\n    for i in range(len(string)):\n        palindromic.append(string[i].lstrip('01'))\n    \n    return ''.join(palindromic)"
    },
    {
        "number": 4038,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = []\n    for i in range(n):\n        a.append(list(map(int, stdin.strip().split())))\n    for i in range(n//2):\n        for j in range(i, n-i-1):\n            print(a[i][j], a[j][n-i-1], sep=\"\", end=\" \")\n        print()\n    return \"YES\" if a[0][0] == a[-1][-1] else \"NO\"\n"
    },
    {
        "number": 4038,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0].split(\" \")[0])\n    a = list(map(int,stdin.split(\"\\n\")[1].split(\" \")))\n    \n    for i in range(n):\n        for j in range(n-1):\n            if a[j] < a[j+1]:\n                a[j],a[j+1] = a[j+1],a[j]\n    return \"YES\" if \"YES\" in str(a) else \"NO\"\n\n-----Brute Force Method-----\ndef"
    },
    {
        "number": 4038,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = stdin\n    n = int(n)\n    a = list(map(int, a))\n    for i in range(n):\n        print(a[i], end=' ')\n    return 'YES' if a[n//2] == a[n//2+1] else 'NO'\n\n\ndef"
    },
    {
        "number": 4038,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    matrix = [[0 for _ in range(n+1)] for _ in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            matrix[i][j] = matrix[i-1][j-1] + a[i-1] * matrix[i-1][j-1]\n    print(matrix[n][n])\n    return matrix[n][n] if matrix[n][n] == 0 else \"NO\"\n    \n\n    # Brute Force solution\n\n\ndef"
    },
    {
        "number": 4038,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    mat = []\n    for _ in range(n):\n        mat.append([int(i) for i in stdin.split()])\n    for i in range(n):\n        mat[i] = [mat[i][j] for j in range(n)]\n    for i in range(n):\n        for j in range(i + 1, n):\n            if mat[i][j]!= mat[j][i]:\n                return \"NO\"\n    for i in range(n):\n        for j in range(i + 1, n):\n            if mat[i][j]!= mat[j][n - i - 1]:\n                return \"NO\"\n    for i in range(n):\n        for j in range(i + 1, n):\n            if mat[j][i]!= mat[i][n - j - 1]:\n                return \"NO\"\n    for i in range(n):\n        for j in range(i + 1, n):\n            if mat[i][j]!= mat[j][n - i - 1]:\n                return \"NO\"\n    return \"YES\"\n\n\n-----Constraints-----\n1 <= n <= 200\n1 <= k <= 100\n\n\"\"\"\nimport math\n\nn, k = map(int, input().split())\nmat = []\nfor _ in range(n):\n    mat.append(list(map(int, input().split())))"
    },
    {
        "number": 4038,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    res = []\n    for i in range(n):\n        row = list(map(int, stdin.strip().split()))\n        if i == n - 1:\n            res.append(row)\n            continue\n        if len(set(row)) == 1:\n            res.append(row)\n            continue\n        tmp = set(row)\n        tmp = list(tmp)\n        tmp.sort()\n        if len(tmp) == 2:\n            res.append(tmp)\n            continue\n        res.append(tmp)\n    return \"\".join([\"YES\" if len(a) == 2 else \"NO\" for a in res])\n"
    },
    {
        "number": 4038,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, n_lst = map(int, stdin.split())\n    matrix = [[0 for _ in range(n_lst)] for _ in range(n)]\n    for _ in range(n):\n        matrix[_][_] = int(stdin[1])\n    for i in range(2, n_lst):\n        for j in range(n):\n            matrix[j][i] = matrix[j][i - 1] + matrix[j][i - 2]\n    for row in matrix:\n        for x in range(n_lst):\n            row[x] = str(row[x])\n    for row in matrix:\n        for x in range(n_lst):\n            row[x] = ''.join(row[x])\n    print(''.join(row))\n    return 'YES'\n\n\n\n-----Test-----\n\nExpected Output\n\nYES\n10 \n10 \n10\n1 1 1 1 1 3 3 3 3\n9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9"
    },
    {
        "number": 4039,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # num, n, r = map(int, stdin.split())\n    # answer = ''\n    # for i in range(num):\n    #     if i % n == 0 or i % n == n - 1:\n    #         answer += str(n)\n    #     else:\n    #         answer += str(n - i % n)\n    # print(answer)\n    # return answer\n\n    # def solution(stdin: str) -> str:\n    #     # num, n, r = map(int, stdin.split())\n    #     # answer = ''\n    #     # for i in range(num):\n    #     #     if i % n == 0 or i % n == n - 1:\n    #     #         answer += str(n)\n    #     #     else:\n    #     #         answer += str(n - i % n)\n    #     # return answer\n    #     answer = ''\n    #     for i in range(len(stdin)):\n    #         if i % n == 0 or i % n == n - 1:\n    #             answer += str(n)\n    #         else:\n    #             answer += str(n - i % n)\n    #     return answer\n"
    },
    {
        "number": 4039,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    a, b = map(int, stdin.split())\n    a_i = abs(r - b)\n    b_i = abs(a - b)\n    return \"YES\" if a_i < r and b_i < r else \"NO\"\n"
    },
    {
        "number": 4039,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n,r=map(int,stdin.split())\n    res=[]\n    #for i in range(1,n+1):\n    #    res.append([i,int(stdin[i].replace('-','0')),int(stdin[i+1].replace('-','0'))])\n    for i in range(1,n+1):\n        a,b=map(int,stdin[i].split())\n        res.append([a,b,int(stdin[i+1].replace('-','0'))])\n    res.sort(key=lambda x:x[2])\n    for i in range(n):\n        if i==n-1:\n            break\n        b=res[i][2]\n        if b<r:\n            res[i+1][2]=r-b\n            res[i][2]=r\n    for i in range(n):\n        if i==n-1:\n            break\n        b=res[i][2]\n        if b>r:\n            res[i][2]=r\n    res=res[n-1:]\n    for i in range(n):\n        if res[i][0]==-1:\n            res[i][0]=0\n            res[i][1]=0\n            res[i][2]=(r-res[i][2])\n    #for i in range(n):\n    #    res[i][0]=res[i][0]/res[i][2]\n    #    res[i][1]=res[i][1]/res[i][2]\n    #    res[i][2]=res[i][2]/res[i][2]\n    return \"YES\" if (res[0][1]==res[n-1][1]==res[n-1][2]) else \"NO\"\n\nprint(solution(\"1 1\"))\nprint(solution(\"2 -2\"))\nprint(solution(\"3 0\"))\nprint(solution(\"3 -3\"))\nprint(solution(\"3 2\"))\nprint(solution(\"1 4\"))\nprint(solution(\"5 2\"))\nprint(solution(\"1 5\"))\nprint(solution(\"4 -2\"))\nprint(solution(\"4 -3\"))\nprint(solution(\"4 2\"))\nprint(solution(\"3 1\"))\nprint(solution(\"3 10\"))\nprint(solution(\"3 -10\"))\nprint(solution(\"3 -10\"))\nprint(solution(\"3 0\"))\n"
    },
    {
        "number": 4039,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    r = int(stdin[1])\n\n    def rec(idx, total):\n        if idx == n:\n            return \"YES\" if total >= r else \"NO\"\n\n        if idx < n:\n            total += r\n            return rec(idx + 1, total)\n        else:\n            total -= r\n            return rec(idx + 1, total)\n\n    return rec(0, 0)\n\n\"\"\"\nn = int(input())\nr = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\nc = [0] * (n + 1)\n\nfor i in range(n):\n    for j in range(i + 1):\n        c[j] = max(c[j], c[j + 1] + r - a[i])\n\nfor i in range(n):\n    for j in range(i + 1):\n        if c[j]!= 0 and c[j + 1]!= 0:\n            print('NO')\n            exit()\n        if c[j]!= 0 and c[j + 1] == 0:\n            print('NO')\n            exit()\n\nprint('YES')"
    },
    {
        "number": 4039,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    num_projects = int(stdin)\n    in_pairs = [[int(i) for i in input().split()] for _ in range(num_projects)]\n    answer = []\n    for p in range(num_projects):\n        answer.append([in_pairs[p][0], in_pairs[p][1]])\n    pairs = sorted(answer)\n    for i in range(num_projects):\n        for j in range(i, num_projects):\n            if pairs[i][0] < pairs[j][0]:\n                pairs[i], pairs[j] = pairs[j], pairs[i]\n            else:\n                break\n    return \"YES\" if pairs else \"NO\""
    },
    {
        "number": 4039,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    a = [int(x) for x in stdin[1].split(',')]\n    b = [int(x) for x in stdin[2].split(',')]\n    print(1 if a[0] > b[0] else (1 if a[0] < b[0] else 0))\n    print(1 if a[1] > b[1] else (1 if a[1] < b[1] else 0))\n    print(1 if a[2] > b[2] else (1 if a[2] < b[2] else 0))\n    print(1 if a[3] > b[3] else (1 if a[3] < b[3] else 0))\n    return 'YES'\n"
    },
    {
        "number": 4039,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\nIn the first example, Polycarp has a rating of $r = 8$ and is able to complete all the projects whose rating is $a_i$.\n\nIn the second example, Polycarp has a rating of $r = 6$ and is able to complete all the projects whose rating is $a_i$.\n\nIn the third example, Polycarp has a rating of $r = -3$ and is able to complete all the projects whose rating is $a_i$.\n\nIn the fourth example, Polycarp has a rating of $r = -5$ and is able to complete all the projects whose rating is $a_i$.\n\nIn the fifth example, Polycarp has a rating of $r = 0$ and is able to complete all the projects whose rating is $a_i$.\n\nIn the sixth example, Polycarp has a rating of $r = -10$ and is able to complete all the projects whose rating is $a_i$.\n\nIn the seventh example, Polycarp has a rating of $r = 30$ and is able to complete all the projects whose rating is $a_i$.\n\nIn the eighth example, Polycarp has a rating of $r = 0$ and is able to complete all the projects whose rating is $a_i$.\n\nIn the ninth example, Polycarp has a rating of $r = -300$ and is able to complete all the projects whose rating is $a_i$.\n\n\n-----Constraints-----\n1 <= stdin.length <= 100\n1 <= $a_i$ <= 30000\n1 <= $b_i$ <= 30000\n1 <= r <= 30000\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4039,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    A = [int(s) for s in stdin.split(\" \")]\n    \n    a = [0, 0, 0, 0, 0]\n    b = [0, 0, 0, 0, 0]\n    \n    for i in range(n):\n        a[i] = A[i]\n        b[i] = A[i] * a[i]\n        \n    for i in range(n):\n        b[i+1] = A[i+1] + b[i]\n    \n    for i in range(1, n):\n        for j in range(1, n):\n            if A[i] >= A[j] and A[i] >= A[j+1] and A[j] >= A[j-1]:\n                c = A[i] * a[i] + A[j] * b[j]\n                if c > 0:\n                    return \"YES\"\n            elif A[i] >= A[j] and A[i] >= A[j-1] and A[j] >= A[j+1]:\n                c = A[i] * a[i] + A[j] * b[j]\n                if c > 0:\n                    return \"NO\"\n            elif A[i] >= A[j] and A[i] >= A[j-1] and A[j] >= A[j+1]:\n                c = A[i] * a[i] + A[j] * b[j]\n                if c > 0:\n                    return \"YES\"\n    return \"NO\"\n\nConstraints\n1 <= n <= 100\n1 \\le n \\le 30000\n-300 \\le b_i \\le 300\n\n\n\n-----Time complexity-----\n\nO(n) - number of projects\nO(n) - if there are more than $n$ projects, their rating after completing each one will decrease\n\nO(n) - number of projects\nO(n) - if there are more than $n$ projects, their rating after completing each one will increase\n\nO(n) - if there are more than $n$ projects, there is no order of projects.\nO(n) - number of projects\n\nO(n) - number of projects\nO(n) - if there are more than $n$ projects, their rating after completing each one will decrease\n\nO(n) - if there are more than $n$ projects, there is no order of projects.\nO(n) - number of projects\n\nO(n) - if there are more than $n$ projects, there is no order of projects.\nO(n) - number of projects\n\nO(n) - if there are more than $n$ projects, there is no order of projects.\nO(n) - number of projects\n\nO(n) - number of projects\nO(n) - if there are more than $n$ projects, there is no order of projects.\nO(n) - number of projects\n\nO(n) - number of projects\nO(n) - if there are more than $n$ projects, there is no order of projects.\nO(n) - number of projects\n\nO(n) - if there are more than $n$ projects, there is no order of projects.\nO(n) - number of projects\n\nO(n) - if there are more than $n$ projects, there is no order of projects.\nO(n) - number of projects\n\nO(n) - if there are more than $n$ projects, there is no order of projects.\nO(n) - number of projects\n\nO(n) - if there are more than $n$ projects, there is no order of projects.\nO(n) - number of projects\n\nO(n) - if there are more than $n$ projects, there is no order of projects.\nO(n) - number of projects\n\nO(n) - if there are more than $n$ projects, there is no order of projects.\nO(n) - number of projects\n\nO(n) - if there are more than $n$ projects, there is no order of projects.\nO(n) - number of projects\n\nO(n) - if there are more than $n$ projects, there is no order of projects.\nO(n) - number of projects\n\nO(n) - if there are more than $n$ projects, there is no order of projects.\nO(n) - number of projects\n\nO(n) - if there are more than $n$ projects, there is no order of projects.\nO(n) - number of projects\n\nO(n) - if there are more than $n$ projects, there is no order of projects.\nO(n) - number of projects\n\nO(n) - if there are more than $n$ projects, there is no order of projects.\nO(n) - number of projects\n\nO(n) - if there are more than $n$ projects, there is no order of projects.\nO(n) - number of projects\n\nO(n) - if there are more than $n$ projects, there is no order of projects.\nO(n) - number of projects\n\nO(n) - if there are more than $n$ projects, there is no order of projects.\nO(n) - number of projects\n\nO(n) - if there are more than $n$ projects, there is no order of projects.\nO(n) - number of projects\n\nO(n) - if there are more than $n$ projects, there is no order of projects.\nO(n) - number of projects\n\nO(n) - if there are more than $n$ projects, there is no order of projects.\nO(n) - number of projects\n\nO(n) - if there are more than $n$ projects, there is no order of projects.\nO(n) - number of projects\n\nO(n) - if there are more than $n$ projects, there is no order of projects.\nO(n) - number of projects\n\nO(n) - if there are more than $n$ projects, there is no order of projects.\nO(n) - number of projects\n\nO(n) - if there are more than $n$ projects, there is no order of projects.\nO(n) - number of projects"
    },
    {
        "number": 4039,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    print('YES' if n >= r >= 0 else 'NO')\n    \n"
    },
    {
        "number": 4039,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    l = []\n    for i in range(n):\n        l.append(a[i] * (r + a[i]))\n    l.sort()\n    b = []\n    for i in range(n):\n        if l[i] >= 0:\n            b.append(l[i])\n        else:\n            break\n    if len(b) > n:\n        return \"NO\"\n    if len(b) < n:\n        return \"YES\"\n    for i in range(n - len(b)):\n        b.append(0)\n    b.sort()\n    for i in range(n):\n        if b[i]!= a[i]:\n            return \"NO\"\n    return \"YES\"\n\n-----Constraints-----\n\n0 < n < 100\n-1000 < r < 1000\n\n-----Time Limit Exceeded-----\n\nSample Input 1:\n\n3 4\n4 6\n10 -2\n8 -1\n\nSample Output 1:\n\nNO\nSample Input 2:\n\n3 5\n4 -5\n4 -2\n1 3\n\nSample Output 2:\n\nYES\nExplanation:\n\nPolycarp has enough rating before starting each project.\nPolycarp has non-negative rating after completing each project.\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4040,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    L = len(stdin)\n    n = int(stdin[L-1])\n    m = int(stdin[L-2])\n    d = int(stdin[L-3])\n    c = [int(stdin[i]) for i in range(L-2)]\n    a = [0 for i in range(m+1)]\n    for i in range(m+1):\n        a[i] = 0\n    for i in range(n):\n        a[0] = c[i]\n        for j in range(1, m):\n            if a[j] > a[j-1] + d:\n                a[j] = a[j-1] + d\n            else:\n                continue\n        for j in range(1, m):\n            if a[j] > a[j-1] + d:\n                a[j] = a[j-1] + d\n            else:\n                continue\n    a[0] = 0\n    if a[n] > 0:\n        return 'NO'\n    else:\n        return 'YES'\n\nprint(solution(\"10 1 11\"))\n"
    },
    {
        "number": 4040,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    from collections import deque\n    n, m, d = map(int, stdin.split())\n    if n == 0 and m == 0 and d == 1:\n        return \"NO\"\n    queue = deque([(n, 0)])\n    while len(queue) > 0:\n        i, c = queue.popleft()\n        if c == d:\n            return \"YES\"\n        if i <= m:\n            queue.append((i + 1, c + 1))\n        if i + 1 <= m:\n            queue.append((i + 1, c + 2))\n        if i - 1 >= 1:\n            queue.append((i - 1, c + 1))\n    return \"NO\"\n\n'''"
    },
    {
        "number": 4040,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, c = map(int, stdin.split())\n    a = [0] * (c + 1)\n    a[0] = 1\n    a[1] = 1\n    for i in range(2, n + 1):\n        if m == 0:\n            return 'NO'\n        elif i == c:\n            return 'YES'\n        a[i] = a[i - 1] + a[i - 2]\n        m -= 1\n    for i in range(n - m):\n        for j in range(c):\n            a[j + 1] = a[j + 1] + a[j]\n            j += 1\n        for j in range(c - m):\n            a[j + 1] = a[j + 1] + a[j]\n            j += 1\n    return 'YES'[a[c]]\n\n\n\n-----Constraints-----\n\n1 <= stdin.length <= 1e5\n1 <= n, m, c <= 1000\n\n0 <= c_1, c_2, c_m <= 100\nc_1, c_2, c_m >= 0\n\n0 <= a_1, a_2, a_3 <= 100\na_1, a_2, a_3 >= 0\n\n0 <= x < n\n1 <= c_i \\le n\n1 <= m < n\n1 <= c_i \\le m\n\n0 <= a_i \\le n\na_i <= 100\na_i <= m\n\n------Time complexity analysis-----\n\nTime complexity: O(n^m + n^2)\nSpace Complexity: O(n^m)\n\n-----Algorithm analysis-----\n\nTime complexity: O(n)\nSpace Complexity: O(n)\n\n------Time complexity analysis-----\n\nTime complexity: O(n)\nSpace Complexity: O(n)\n\n-----Algorithm analysis-----\n\nTime complexity: O(n)\nSpace Complexity: O(n)\n\n\n'''\n\nfrom sys import stdin\n\n\ndef"
    },
    {
        "number": 4040,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    m = int(stdin)\n    d = [0] + list(map(int, stdin.split()))\n    c = [[] for _ in range(n + 1)]\n    a = [[] for _ in range(m + 1)]\n    for i in range(n):\n        a[d[i]].append(i)\n    a[d[n]].append(n)\n    for i in range(m):\n        c[d[i]].append(i + 1)\n    a[d[m]].append(m)\n    a[d[n]].append(m)\n    for i in range(m, m + 1):\n        for j in range(1, n + 1):\n            if j not in a[i]:\n                c[j].append(j + 1)\n            if j + 1 not in c[i]:\n                c[j + 1].append(j + 1)\n    for j in range(n + 1):\n        c[j].sort()\n    answer = []\n    for i in range(n):\n        if c[d[i]][0] < d[i] and d[d[i] + 1] < d[i]:\n            answer.append('YES')\n            continue\n        if c[d[i]][0] > d[i] and d[d[i] - 1] > d[i]:\n            answer.append('YES')\n            continue\n        if c[d[i]][0] < d[i] and d[d[i] - 1] < d[i]:\n            answer.append('NO')\n            continue\n        if c[d[i]][0] > d[i] and d[d[i] + 1] < d[i]:\n            answer.append('NO')\n            continue\n        if c[d[i]][0] < d[i] and d[d[i] + 1] < d[i]:\n            answer.append('YES')\n            continue\n    return ''.join(answer)\n\n\ndef"
    },
    {
        "number": 4040,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x, d = map(int, stdin.split())\n    a = [1 for _ in range(x + 1)]\n    for _ in range(d):\n        a[x - 1] = a[x - 1] + 1\n        a[x] = a[x] + 1\n    a[0] = 1\n    for i in range(x, 0, -1):\n        if a[i] > 0:\n            a[i] = a[i] + 1\n        else:\n            a[i] = 0\n    if a[x] > 0:\n        a[x] = a[x] + 1\n    else:\n        a[x] = 0\n    a[0] = 0\n    return \"\".join(map(str, a[1:]))\n\nInput\n4 2\n1 2\n1 3\n1 4\nOutput\nYES\n0 0 0 0 0 0 0 0 0 0 \n\nInput\n4 3\n1 2\n2 3\n3 4\nOutput\nNO\n0 1 1 0 0 0 0 0 1 \n\nInput\n4 3\n1 2\n2 3\n3 4\nOutput\nYES\n0 0 0 0 0 0 0 0 0 0 \n\nInput\n4 4\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 164 165 166 167 168 169 170 171 172 173 174 175 176 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 201 202 202 203 204 205 206 207 208 208 210 210 211 212 213 214 215 216 217 219 220 220 221 223 224 225 226 227 228 229 230 231 231 232 233 234 235 236 237 238 239 240 241 242 242 243 244 245 246 246 247 248 249 250 251 252 253 253 254 255 256 257 259 259 260 261 261 262 263 264 265 266 267 268 269 270 271 270 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 304 305 306 308 309 310 311 313 314 315 316 317 318 319 320 321 321 322 323 323 324 325 326 327 329 330 330 331 332 332 332 333 333 334 334 335 336 337 337 338 339 340 341 341 341 341 342 341 343 344 345 346 347 348 349 350 351 351 352 352 353 354 355 356 357 358 359 360 361 360 361 366 366 367 366 369 369 370 371 371 372 373 374 374 375 375 376 377 378 379 380 379 391 391 392 393 394 395 396 395 396 397 399 399 401 401 402 401 413 413 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414 414"
    },
    {
        "number": 4040,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n,m,d = map(int,stdin.split())\n    return [c for c in range(1,n+1) if (c % d)!= 0 or c in [1, 2, 3, 4, 5, 6, 7, 8, 9]]\n"
    },
    {
        "number": 4040,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    l, r = 0, len(stdin) - 1\n    a = list(map(int, stdin))\n    result = \"\"\n    while l <= r:\n        if a[l]!= a[l + 1]:\n            if a[l] > 0:\n                if a[l + 1] > 0:\n                    result += \"YES\"\n                else:\n                    result += \"NO\"\n            else:\n                result += \"YES\"\n            a[l], a[l + 1] = a[l + 1], a[l]\n            l += 2\n        else:\n            l += 1\n    return result\n\n\n-----Test Cases-----\ncase 1:\nInput:\n7 3 2\n1 2 1\nOutput:\nYES\n0 0 0 0 0 0 0 0 0 1 \n0 0 0 0 1 1 0 0 0 0 \n0 0 0 0 1 1 0 0 0 0 \n0 0 0 1 1 1 0 0 0 0 \n0 0 0 1 1 1 0 0 0 0 \n0 0 0 0 1 1 1 0 0 0 \n0 0 0 0 0 1 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 \n\ncase 2:\nInput:\n7 3 2\n1 2 1\n\nOutput:\nYES\n0 1 0 0 0 0 0 0 0 1 \n0 0 0 0 0 0 0 0 0 1 \n0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 \n\ncase 3:\nInput:\n1\n5\n\nOutput:\nNO\n0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 \n\ncase 4:\nInput:\n1\n5\n\nOutput:\nNO\n0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 \n\ncase 5:\nInput:\n1\n0\n\nOutput:\nYES\n0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 \n\ncase 6:\nInput:\n0\n1\n\nOutput:\nYES\n0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 \n\ncase 7:\nInput:\n1\n0\n\nOutput:\nYES\n0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0 0 0 \n0 0 0 0 0 0 0 0"
    },
    {
        "number": 4040,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    n, m = map(int, stdin.split())\n    \n    seq = []\n    \n    for i in range(1, n+1):\n        seq.append(i)\n        for j in range(1, m):\n            seq.append(j+i)\n    \n    seq.append(0)\n    seq.sort()\n    \n    a = []\n    for i in range(n):\n        if i == 0:\n            a.append(1)\n        elif i > 0:\n            a.append(a[i-1]+a[i])\n    \n    for i in range(n):\n        if i == 0:\n            a.append(1)\n        elif i < m:\n            a.append(a[i-1]+a[i])\n    \n    print(a)\n    return ''.join(map(str, a))\n    \n\nprint(solution(\"1 2 1\"))\nprint(solution(\"1 4 1\"))\nprint(solution(\"1 3 0\"))\nprint(solution(\"1 5 0\"))\nprint(solution(\"1 6 0\"))\nprint(solution(\"1 7 0\"))\nprint(solution(\"1 8 0\"))\nprint(solution(\"1 9 0\"))\nprint(solution(\"1 10 0\"))\nprint(solution(\"1 11 0\"))"
    },
    {
        "number": 4040,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4040,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    a, b = 1, 1\n    d = 0\n    for _ in range(num):\n        x, y = map(int, stdin.split())\n        if a < x and b < y:\n            d += 1\n            a, b = x, y\n        elif a < x and b < y and a < x:\n            d += x - a\n            a = x\n        elif a < x and b < y and a < x and b < y:\n            d += y - b\n            b = y\n        else:\n            if a < x and y < b:\n                d += x - a\n                a = x\n            else:\n                d += y - b\n                b = y\n    if d == 0:\n        return 'NO'\n    return str(d)\n\n'''\n"
    },
    {
        "number": 4041,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    s = stdin[1:-1].split(',')\n    return s[0]\n"
    },
    {
        "number": 4041,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = list(stdin)\n    t = list(stdin)\n    a = len(s)\n    b = len(t)\n    res = 0\n    for i in range(a):\n        while b:\n            if s[i]!= t[b-1]:\n                b -= 1\n            else:\n                res += 1\n                b -= 1\n                break\n    return res"
    },
    {
        "number": 4041,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    # remove the length of the substring\n    s = [i for i in stdin]\n    # remove the length of the substring\n    s = list(filter(None,s))\n    # remove the length of the substring\n    s = list(map(len,s))\n    # remove the length of the substring\n    s = list(filter(lambda x: x < n,s))\n    # remove the length of the substring\n    s = list(map(lambda x: x[n:],s))\n    # remove the length of the substring\n    s = list(filter(lambda x: x < n,s))\n    return max(s)\n"
    },
    {
        "number": 4041,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = input()\n    t = input()\n    n = len(s)\n    m = len(t)\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n    \n    for i in range(n - 1, -1, -1):\n        for j in range(m - 1, -1, -1):\n            if s[i] == t[j] and dp[i + 1][j + 1] > dp[i][j] + 1:\n                dp[i + 1][j + 1] = dp[i][j] + 1\n    \n    return max(dp[n][m], dp[n][m + 1])\n"
    },
    {
        "number": 4041,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip().split()\n    l = int(s[0].split(\":\")[-1])\n    t = s[1].strip().split(\":\")[-1]\n    answer = 0\n    for i in range(l):\n        answer = max(answer,len(t)+1)\n    return answer\n\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4041,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    k = len(s)\n    s_l = []\n    s_r = []\n    for i in range(0,k):\n        if s[i]!= s[i].upper():\n            s_l.append(s[i])\n        else:\n            s_r.append(s[i])\n    s_l.sort()\n    s_r.sort()\n    s_l_len = len(s_l)\n    s_r_len = len(s_r)\n    if s_l_len < s_r_len:\n        return (s_l_len + 1)\n    else:\n        return (s_r_len + 1)\n"
    },
    {
        "number": 4041,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(set(stdin)))\n    \n=======\nimport bisect\n\ndef"
    },
    {
        "number": 4041,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4041,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin.strip()\n    l = len(string)\n    start = 0\n    end = 0\n    for i in range(1, l-1):\n        s = string[:i]\n        t = string[i:]\n        if s == t:\n            end = i\n            break\n    answer = end - start + 1\n    return str(answer)"
    },
    {
        "number": 4041,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s,t = stdin.split(\" \")\n    return solution_with_removal(s,t)\n\n\ndef"
    },
    {
        "number": 4042,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def calc(x):\n        if x < 10: return x\n        \n        if x % 10 == 9: return 9\n        return calc(x // 10) + calc(x % 10)\n\n    for i in range(int(input())):\n        stdin = stdin.strip()\n        if len(stdin) > 1:\n            print(calc(int(stdin)))\n        else:\n            print(stdin)\n"
    },
    {
        "number": 4042,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x = float(stdin)\n    if (x < 0):\n        return '0'\n    elif (x == 0):\n        return '0'\n    else:\n        y = int(str(x)[:5])\n        return str(y)+str(y)+str(y)\n\n\n-----Example 1-----\nInput\n10\n\nOutput\n10\n\nExample 2\n\nInput\n0.247815\n\nOutput\n2\n\n-----Constraints-----\n1 <= x <= 10^6\n\n\n-----Brute force-----\ndp[i][j] = max(dp[i-1][j-1], dp[i-1][j], dp[i][j-1]) + 1\ndp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1])\n\n\n-----Time complexity-----\nO(2^n)\n\nO(n)\n\nO(n)\n\n\n-----space complexity-----\nO(1)\n\n----\n"
    },
    {
        "number": 4042,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x = float(stdin.split(\" \")[0])\n    y = float(stdin.split(\" \")[1])\n    if y % 2 == 1:\n        return \"Invalid\"\n    if y > 10:\n        return str(x*y)\n    if x > 10:\n        return str(x/y)\n    if x == y:\n        return str(x)\n    return str(y*x)\n\n\n----Discussion----\n\nThe input here is a string with 6 decimal places (0 < x < 5). \n\nThe output should have exactly three matching numbers separated by a single space. \n\nThe numbers will be separated by commas and will be in a unique order. \n\nThe numbers with an odd number of decimals are separated by a space, and the last number is the result.\n\"\"\""
    },
    {
        "number": 4042,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    stk = [n]\n    \n    for _ in range(n-1):\n        num = stk.pop()\n        if num == 2147483647:\n            return 'Invalid'\n        stk.append(num * 2)\n    return str(sum(stk))\n"
    },
    {
        "number": 4042,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    x = int(stdin[0])\n    y = int(stdin[1])\n    if x > y:\n        return str(x-y)\n    else:\n        return str(y-x)\n\nx = int(input())\ny = int(input())\nprint(solution(x))\nprint(solution(y))"
    },
    {
        "number": 4042,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lst = []\n    for line in stdin:\n        if line.isdigit():\n            lst.append(int(line))\n    return str(max(lst) + min(lst))\n\n\n-----Examples-----\nInput\n1.200000\nOutput\n3 2\nInput\n2.572479\nOutput\n10 3\nInput\n4.024922\nOutput\n9 9\ndef"
    },
    {
        "number": 4042,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin.split()[0])\n    if x % 5 == 0:\n        return str(x//5) +'' + str(x%5)\n    else:\n        return str(x//5) +'' + str(x%5)\n    return\nsolution(stdin)\n\n------Constraints-----\n1 <= stdin.length <= 10^5\n0 <= x <= 10^5\n\n------Time Limit Exceeded------\nTime Limit: 1 second\n\n------Memory Limit Exceeded------\nTime Limit: 1MB\n\n---------Solution---------\n\"\"\"\n\ndef"
    },
    {
        "number": 4042,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def function(stdin):\n        input_list = stdin.split()\n        numbers = list(map(int, input_list))\n        answer = ''\n        for num in numbers:\n            answer += str(num) +''\n        return answer.strip()\n\n    return function(stdin)\n\n-----Constraints-----\n0 <= stdin.length <= 5 * 10^4\nstdin.length is a multiple of 6.\n0 <= x <= 10^4\n\n-----Submissions-----\n3568\n'''\n\nimport math\nfrom collections import deque\nimport sys\n\ndef"
    },
    {
        "number": 4042,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    str_arr = list(map(int, stdin.split()))\n    l = len(str_arr)\n    answer = [0] * l\n    i = 0\n    for i in range(l):\n        j = str_arr[i]\n        if j > 0:\n            answer[i] = j\n        elif j == 0:\n            answer[i] = max(str_arr)\n    \n    return '\\n'.join(map(str, answer))"
    },
    {
        "number": 4042,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    answer = ''\n    for i in range(len(stdin)):\n        if not stdin[i].isdigit():\n            answer += stdin[i]\n    for i in range(len(stdin)):\n        if not stdin[i].isdigit() and stdin[i].isalpha() and 1 <= int(stdin[i]) <= 10:\n            answer += stdin[i]\n    return answer\n"
    },
    {
        "number": 4043,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    d = int(stdin[0])\n    k = int(stdin[1])\n    \n    while d < 3:\n        d += 1\n        k += 1\n    \n    trees = []\n    for i in range(k):\n        trees.append([])\n        for j in range(d):\n            trees[i].append(0)\n    \n    for i in range(k - 1):\n        for j in range(d - 1):\n            trees[j + 1][j + 1] = 1\n    \n    for i in range(k):\n        for j in range(d):\n            if trees[j][i]:\n                print(i + 1, end = \"\")\n            \n    return \"YES\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4043,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    result = []\n    n, d, k = map(int, lines[0].split())\n    for line in lines[1:n + 1]:\n        data = list(map(int, line.split()))\n        result.append(data[0])\n        result.append(data[1] - 1)\n        result.append(data[2] + (n - data[1]) * (d - data[2]))\n    return 'YES' if len(result) == k else 'NO'\n'''\n\ndef"
    },
    {
        "number": 4043,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    num_of_edges, num_of_nodes, k = map(int, stdin.split())\n    g = [[] for _ in range(num_of_nodes + 1)]\n    for i in range(num_of_edges):\n        a, b = map(int, stdin.split())\n        g[a].append(b)\n        g[b].append(a)\n    tree = [0 for _ in range(num_of_nodes + 1)]\n    for i in range(1, num_of_nodes + 1):\n        tree[i] = len(g[i])\n    #print(tree)\n    tree[0] = 1\n    tree[1] = 1\n    for i in range(2, num_of_nodes + 1):\n        for j in range(1, num_of_nodes + 1):\n            tree[j] = tree[j] + tree[j - 1]\n    #print(tree)\n    ans = []\n    for i in range(1, num_of_nodes + 1):\n        d = tree[i]\n        for j in range(1, num_of_nodes + 1):\n            if i!= j:\n                k = tree[j] - tree[i]\n                #print(d, k)\n                if k <= 0:\n                    ans.append(\"NO\")\n                else:\n                    ans.append(str(d - k))\n            else:\n                ans.append(\"YES\")\n    #print(ans)\n    return ''.join(ans)"
    },
    {
        "number": 4043,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = map(int, stdin.split())\n    if n == 0:\n        return 'NO'\n    if n < d * k:\n        return 'NO'\n    p = d * k\n    if p == 0:\n        return 'NO'\n    if n < p:\n        return 'NO'\n    tree = []\n    for i in range(n):\n        tree.append(list(map(int, stdin.split())))\n    visited = set()\n    def dfs(x):\n        global p\n        if x not in visited:\n            visited.add(x)\n            for u in tree[x]:\n                if u not in visited:\n                    if len(tree[u]) > len(visited):\n                        dfs(u)\n    p = p - 1\n    dfs(1)\n    return 'YES'\n"
    },
    {
        "number": 4043,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = map(int, stdin.split())\n    print(str(n) + \" \" + str(d) + \" \" + str(k))\n    if n == 1 or n == 2 or n == 4 or n == 6 or n == 10 or n == 13:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n    return \"\""
    },
    {
        "number": 4043,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n,d,k=list(map(int,stdin.split()))\n    \n    edges=[]\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if d<=abs(k-i-j):\n                edges.append((i,j))\n            if d<=abs(k-j-i):\n                edges.append((j,i))\n            if d>=abs(k-i-j):\n                edges.append((i,j))\n                edges.append((j,i))\n    \n    edges.sort(key=lambda x:x[1]-x[0])\n    \n    for edge in edges:\n        print(f'{edge[0]} {edge[1]}')\n    \n    return \"YES\"\n\nInput\n6 2 3\n\nOutput\nYES\n2 9\n2 10\n10 3\n3 1\n6 10\n8 2\n4 3\n5 6\n6 7\n\nInput\n8 5 3\n\nOutput\nNO\n\nInput\n10 4 3\n\nOutput\nNO\n2 5\n7 2\n3 7\n3 1\n1 6\n8 7\n4 3\n5 6\n6 7\n\nInput\n8 5 3\n\nOutput\nYES\n2 5\n7 2\n3 7\n3 1\n1 6\n8 7\n4 3\n5 6\n6 7\n\n-----Constraints-----\n1 <= n <= 10^4\n1 <= d <= 4^n\n1 <= k <= 4^n\n\"\"\"\nclass Solution:\n    def constructMaximumBinaryTree(self, nums: List[int]) -> Optional[TreeNode]:\n        def dfs(nums,idx,level):\n            \n            if level == len(nums):\n                return None\n            \n            idx+=1\n            root=TreeNode(nums[idx])\n            root.left=dfs(nums,idx,level+1)\n            root.right=dfs(nums,idx,level+1)\n            return root\n            \n        return dfs(nums,0,0)"
    },
    {
        "number": 4043,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = map(int, stdin.split())\n    if n + d > k: return \"NO\"\n    visited = set()\n    def dfs(v):\n        if v not in visited:\n            visited.add(v)\n            for i in range(v + 1, n + 1):\n                if v in visited:\n                    return False\n                if d > dfs(i):\n                    return False\n            visited.add(v)\n            return True\n        return False\n    for i in range(n + 1, n + 1 + k):\n        if d > dfs(i):\n            print(i)\n            return\n    print(\"NO\")\n    return \"YES\"\n"
    },
    {
        "number": 4043,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    # define the board\n    board = []\n    n, d, k = map(int, stdin.split())\n    \n    # create a board by reading the numbers\n    # starting from the end\n    for i in range(n-1,-1,-1):\n        board.append(i)\n    \n    # if there are more than 3 elements, it means that you have\n    # three numbers, which means that we are allowed to create\n    # a tree\n    if k > 3:\n        board[-1] = 1\n        board[n-2] = 1\n        board[n-1] = 2\n    else:\n        board[-1] = 1\n        board[n-2] = 1\n        board[n-1] = 0\n    \n    # if there are only one element, we need to\n    # create a tree\n    if k == 1:\n        board[0] = board[1] = board[2] = board[3] = board[4] = board[5] = board[6] = board[7] = board[8] = board[9] = 0\n    \n    # if there are more than 1 elements, we need to\n    # create a tree\n    else:\n        board[0] = board[1] = board[2] = board[3] = board[4] = board[5] = board[6] = board[7] = board[8] = board[9] = board[10] = board[11] = board[12] = board[13] = 0\n    \n    # iterate through the board\n    # until we reach the end of the board\n    while board:\n        # sort the board by value\n        board.sort()\n        \n        # check if there is a root\n        # then it is a tree\n        if board[-1] == 1:\n            # check if there are 4 elements\n            # of the right child\n            if board[-2] == 2:\n                # if there are 4 elements, then it is a tree\n                if board[-3] == 2:\n                    # if there are 4 elements, it is a tree\n                    # and the parent is the last node\n                    if board[-4] == 2:\n                        # if there are 4 elements, it is a tree\n                        # and the parent is the last node\n                        # and the left child is the first\n                        # element\n                        if board[-5] == 2:\n                            # if there are 4 elements, it is a tree\n                            # and the parent is the last node\n                            if board[-6] == 2:\n                                # if there are 4 elements, it is a tree\n                                # and the parent is the last node\n                                # and the left child is the first\n                                # element\n                                if board[-7] == 2:\n                                    # if there are 4 elements, it is a tree\n                                    # and the parent is the last node\n                                    if board[-8] == 2:\n                                        # if there are 4 elements, it is a tree\n                                        # and the parent is the last node\n                                        if board[-9] == 2:\n                                            # if there are 4 elements, it is a tree\n                                            if board[-10] == 2:\n                                                # if there are 4 elements, it is a tree\n                                                # and the parent is the last node\n                                                if board[-11] == 2:\n                                                    # if there are 4 elements, it is a tree\n                                                    if board[-12] == 2:\n                                                        # if there are 4 elements, it is a tree\n                                                        if board[-13] == 2:\n                                                            # if there are 4 elements, it is a tree\n                                                            if board[-14] == 2:\n                                                                # if there are 4 elements, it is a tree\n                                                                if board[-15] == 2:\n                                                                    # if there are 4 elements, it is a tree\n                                                                    if board[-16] == 2:\n                                                                        # if there are 4 elements, it is a tree\n                                                                        if board[-17] == 2:\n                                                                            # if there are 4 elements, it is a tree\n                                                                            if board[-18] == 2:\n                                                                                # if there are 4 elements, it is a tree\n                                                                                if board[-19] == 2:\n                                                                                    # if there are 4 elements, it is a tree\n                                                                                    if board[-20] == 2:\n                                                                                        # if there are 4 elements, it is a tree\n                                                                                        if board[-21] == 2:\n                                                                                            # if there are 4 elements, it is a tree\n                                                                                            if board[-22] == 2:\n                                                                                                # if there are 4 elements, it is a tree\n                                                                                                if board[-23] == 2:\n                                                                                              # if there are 4 elements, it is a tree\n                                                                                             if board[-24] == 2:\n                                                                                                    # if there are 4 elements, it is a tree\n                                                                                                    if board[-25] == 2:\n                                                                                                            # if there are 4 elements, it is a tree\n                                                                                                        if board[-26] == 2:\n                                                                                                            # if there are 4 elements, it is a tree\n                                                                                                        if board[-27] == 2:\n                                                                                                            # if there are 4 elements, it is a tree\n                                                                                                        if board[-28] == 2:\n                                                                                                            # if there are 4 elements, it is a tree\n                                                                                                        if board[-29] == 2:\n                                                                                                            # if there are 4 elements, it is a tree\n                                                                                                        if board[-30] == 2:\n                                                                                                            # if there are 4 elements, it is a tree\n                                                                                                        if board[-31] == 2:\n                                                                                                            # if there are 4 elements, it is a tree\n                                                                                                        if board[-32] == 2:\n                                                                                                            # if there are 4 elements, it is a tree\n                                                                                                        if board[-33] == 2:\n                                                                                                            # if there are 4 elements, it is a tree\n                                                                                                        if board[-34] == 2:\n                               "
    },
    {
        "number": 4043,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    tree = []\n    n, d, k = map(int, lines[0].split())\n    for line in lines[1:]:\n        tree.append(list(map(int, line.split())))\n    return 'YES' if tree == tree[n - 1] and k == d - sum(tree[:n - 1]) else 'NO'\n"
    },
    {
        "number": 4043,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n, d, k = map(int, lines[0].split())\n    edges = []\n    for _ in range(n - 1):\n        u, v = map(int, lines[1].split())\n        edges.append((u - 1, v - 1))\n    vertices = [i for i in range(n)]\n    tree = [[] for _ in range(n)]\n    for edge in edges:\n        tree[edge[0] - 1].append(edge[1] - 1)\n    for i in range(n - 1):\n        tree[i] = sorted(tree[i])\n        tree[i].sort()\n    for i in range(n):\n        tree[i] = list(set(tree[i]))\n    tree = {i: [j - 1 for j in tree[i]] for i in range(n)}\n    for i in range(k):\n        tree[tree[i + 1][0] - 1].append(tree[i + 1][1] - 1)\n        tree[tree[i + 1][1] - 1].append(tree[i + 1][0] - 1)\n    for i in tree:\n        tree[i] = list(set(tree[i]))\n    tree = {i: [j - 1 for j in tree[i]] for i in range(n)}\n    for i in tree:\n        tree[i] = list(set(tree[i]))\n    tree = {i: [j - 1 for j in tree[i]] for i in range(n)}\n    for i in tree:\n        tree[i] = list(set(tree[i]))\n    tree = {i: [j - 1 for j in tree[i]] for i in range(n)}\n    for i in tree:\n        tree[i] = list(set(tree[i]))\n    tree = {i: [j - 1 for j in tree[i]] for i in range(n)}\n    for i in tree:\n        tree[i] = list(set(tree[i]))\n    tree = {i: [j - 1 for j in tree[i]] for i in range(n)}\n    for i in tree:\n        tree[i] = list(set(tree[i]))\n    tree = {i: [j - 1 for j in tree[i]] for i in range(n)}\n    for i in tree:\n        tree[i] = list(set(tree[i]))\n    tree = {i: [j - 1 for j in tree[i]] for i in range(n)}\n    for i in tree:\n        tree[i] = list(set(tree[i]))\n    for i in tree:\n        tree[i] = list(set(tree[i]))\n    tree = {i: [j - 1 for j in tree[i]] for i in range(n)}\n    for i in tree:\n        tree[i] = list(set(tree[i]))\n    tree = {i: [j - 1 for j in tree[i]] for i in range(n)}\n    for i in tree:\n        tree[i] = list(set(tree[i]))\n    for i in tree:\n        tree[i] = list(set(tree[i]))\n    for i in tree:\n        tree[i] = list(set(tree[i]))\n    for i in tree:\n        tree[i] = list(set(tree[i]))\n    tree = {i: [j - 1 for j in tree[i]] for i in range(n)}\n    for i in tree:\n        tree[i] = list(set(tree[i]))\n    tree = {i: [j - 1 for j in tree[i]] for i in range(n)}\n    for i in tree:\n        tree[i] = list(set(tree[i]))\n    tree = {i: [j - 1 for j in tree[i]] for i in range(n)}\n    for i in tree:\n        tree[i] = list(set(tree[i]))\n    tree = {i: [j - 1 for j in tree[i]] for i in range(n)}\n    for i in tree:\n        tree[i] = list(set(tree[i]))\n    tree = {i: [j - 1 for j in tree[i]] for i in range(n)}\n    for i in tree:\n        tree[i] = list(set(tree[i]))\n    tree = {i: [j - 1 for j in tree[i]] for i in range(n)}\n    for i in tree:\n        tree[i] = list(set(tree[i]))\n    tree = {i: [j - 1 for j in tree[i]] for i in range(n)}\n    for i in tree:\n        tree[i] = list(set(tree[i]))\n    tree = {i: [j - 1 for j in tree[i]] for i in range(n)}\n    for i in tree:\n        tree[i] = list(set(tree[i]))\n    tree = {i: [j - 1 for j in tree[i]] for i in range(n)}\n    for i in tree:\n        tree[i] = list(set(tree[i]))\n    tree = {i: [j - 1 for j in tree[i]] for i in range(n)}\n    for i in tree:\n        tree[i] = list(set(tree[i]))\n    tree = {i: [j - 1 for j in tree[i]] for i in range(n)}\n    for i in tree:\n        tree[i] = list(set(tree[i]))\n    tree = {i: [j - 1 for j in tree[i]] for i in range(n)}\n    for i in tree:\n        tree[i] = list(set(tree[i]))\n    tree = {i: [j - 1 for j in tree[i]] for i in range(n)}\n    for i in tree:\n        tree[i] = list(set(tree[i]))\n    tree = {i: [j - 1 for j in tree[i]] for i in range(n)}\n    for i in tree:\n        tree[i] = list(set(tree[i]))\n    tree = {i: [j - 1 for j in tree[i]] for i in range(n)}\n    for i in tree:\n        tree[i] = list(set(tree[i]))\n    tree = {i: [j - 1 for j in tree[i]] for i in range(n)}\n    for i in tree:\n        tree[i] = list(set(tree[i]))\n    tree ="
    },
    {
        "number": 4044,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    a, b = a - 1, b - 1\n    ans = ''\n    while x > 0:\n        ans += '0' if x & 1 else '1'\n        x = x >> 1\n    while b > 0:\n        ans += '0' if b & 1 else '1'\n        b = b >> 1\n    return ans\n\"\"\"\ndef"
    },
    {
        "number": 4044,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    a = a % 2\n    b = b % 2\n    if a!= 0:\n        x -= b\n    s = \"\"\n    if x < a:\n        while x >= 0:\n            s += \"0\"\n            x -= 1\n    elif x > a:\n        while x < a:\n            s += \"1\"\n            x += 1\n    else:\n        s = \"1\" * (a + b)\n    return s"
    },
    {
        "number": 4044,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    a, b = map(int, stdin.split())\n    x = int(a) + int(b)\n\n    def is_valid(x):\n        if x < 0:\n            return False\n        for i in range(1, x + 1):\n            if x % i == 0:\n                return False\n        return True\n\n    def count_0(x):\n        count = 0\n        while x!= 0:\n            if is_valid(x % x):\n                count += 1\n            x //= x\n        return count\n    \n    return \"\".join(map(str, [count_0(x) for x in range(x)]))\n\n\n-----Complexity-----\n\nTime: O(n) + O(n) = O(n^3) = O(n^2) = O(n) = O(n)\n\nSpace: O(n) = O(n) = O(n)\n\nConclusion: There are a total of n^2 zeros, a total of n zeros and a total of n ones, which are sufficient to satisfy all conditions.\n\nNote:\n1) n is always a positive integer.\n2) The maximum number of zeros is always positive.\n3) n must be an integer multiple of 3.\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4044,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    answer = \"1111\"\n    \n    # x\uc758 \uae38\uc774\ub97c \uace0\ub978\ub2e4.\n    n = len(stdin)\n    \n    # \uccab \ubc88\uc9f8 \uc904\uc5d0\ub294 $a$\uc758 \uae38\uc774, \ub450 \ubc88\uc9f8 \uc904\uc5d0\ub294 $b$\uc758 \uae38\uc774\uc758 \ucd5c\uc18c \uce78\uc758 \uac1c\uc218\ub97c \ub098\ud0c0\ub0b8\ub2e4.\n    # \ub450 \ubc88\uc9f8 \uc904\uc5d0\ub294 \uac01 \uce78\uc758 \uccab \uc904\uc5d0\ub294 1\ubd80\ud130 10\uae4c\uc9c0\uc758 \uc22b\uc790\ub97c \ud45c\ud604\ud558\uba70, \uadf8 \ub2e4\uc74c \uc904\uc5d0\ub294 \uac01 \uce78\uc758 \uace0\ub978 \uc22b\uc790\ub97c \ud45c\ud604\ud55c\ub2e4.\n    # 0\ubd80\ud130 9\uae4c\uc9c0\uc758 \uc22b\uc790\ub97c \ud45c\ud604\ud55c\ub2e4.\n    # \uc774 \uacbd\uc6b0, \uac01 \uce78\uc758 \ubc88\ud638\uc5d0\ub294 1\ubd80\ud130 $a$\uae4c\uc9c0\uc758 \uc22b\uc790\ub97c \ud45c\ud604\ud558\uba70, \uadf8 \ub2e4\uc74c \uc904\uc5d0\ub294 \uac01 \uce78\uc758 \ubc88\ud638\uc5d0 \ub300\ud55c \ucd5c\uc18c \uce78\uc758 \uac1c\uc218\ub97c \ud45c\ud604\ud55c\ub2e4.\n    # $x$\ubcf4\ub2e4 \uc791\uac70\ub098 \uac19\uc740 \ubc94\uc704\ub97c \ubc97\uc5b4\ub098\uba74 0\uc744 \ucd9c\ub825\ud55c\ub2e4.\n    a = 10**int(stdin.split()[1])\n    b = 10**int(stdin.split()[2])\n    \n    # \uace0\ub978 \uce78\uc758 \uc218\ub97c \ub098\ud0c0\ub0b4\ub294 array \uc790\ub8cc\uad6c\uc870\ub97c \uc0dd\uc131\ud55c\ub2e4.\n    # \uccab \ubc88\uc9f8 \uc904\uc5d0\ub294 \ubc18\ubcf5 \ud69f\uc218\uc758 \ucd5c\uc18c \uce78 \uc218\ub97c \ud45c\ud604\ud55c\ub2e4.\n    # \ub450 \ubc88\uc9f8 \uc904\uc5d0\ub294 \ubc18\ubcf5 \ud69f\uc218\uc758 \ucd5c\uc18c \uce78 \uc218\ub97c \ud45c\ud604\ud55c\ub2e4.\n    # \ub124 \ubc88\uc9f8 \uc904\uc5d0\ub294 \ubc18\ubcf5 \ud69f\uc218\uc758 \ucd5c\uc18c \uce78 \uc218\ub97c \ud45c\ud604\ud55c\ub2e4.\n    # \uccab \ubc88\uc9f8 \uc904\uc5d0\ub294 \ubc18\ubcf5 \ud69f\uc218\uc758 \ucd5c\uc19f\uac12\uc744 \ud45c\ud604\ud55c\ub2e4.\n    # \ub450 \ubc88\uc9f8 \uc904\uc5d0\ub294 \ubc18\ubcf5 \ud69f\uc218\uc758 \ucd5c\uc19f\uac12\uc744 \ud45c\ud604\ud55c\ub2e4.\n    # \uccab \ubc88\uc9f8 \uc904\uc5d0\ub294 \ubc18\ubcf5 \ud69f\uc218\uc758 \ucd5c\ub300 \uce78 \uc218\ub97c \ud45c\ud604\ud55c\ub2e4.\n    # \ub124 \ubc88\uc9f8 \uc904\uc5d0\ub294 \ubc18\ubcf5 \ud69f\uc218\uc758 \ucd5c\ub300 \uce78 \uc218\ub97c \ud45c\ud604\ud55c\ub2e4.\n    # \uadf8\ub9ac\uace0 \ubc18\ubcf5 \ud69f\uc218\uc758 \ucd5c\uc19f\uac12\uc744 \ucd9c\ub825\ud55c\ub2e4.\n    \n    answer = max(a,b,int(stdin.split()[1])+a,int(stdin.split()[2])+b)\n    \n    # \ub2e4\uc2dc \uccab\ubc88\uc9f8 \uc904\uc5d0\ub294 \uccab \ubc88\uc9f8 \uce78\uc758 \uc218\ub97c \ub098\ud0c0\ub0b4\ub294 \uc790\ub8cc\uad6c\uc870\ub97c \uc785\ub825\ubc1b\ub294\ub2e4.\n    # \ud55c \uc904\uc5d0\ub294 \ubc18\ubcf5 \ud69f\uc218\uc758 \ucd5c\uc19f\uac12\uc744 \ud45c\ud604\ud55c\ub2e4.\n    # \uccab \ubc88\uc9f8 \uc904\uc5d0\ub294 \ubc18\ubcf5 \ud69f\uc218\uc758 \ucd5c\uc19f\uac12\uc744 \ud45c\ud604\ud55c\ub2e4.\n    # \ub124 \ubc88\uc9f8 \uc904\uc5d0\ub294 \ubc18\ubcf5 \ud69f\uc218\uc758 \ucd5c\ub300 \uce78 \uc218\ub97c \ud45c\ud604\ud55c\ub2e4.\n    \n    answer = min(answer,a+int(stdin.split()[1])+a,b+int(stdin.split()[2])+b)\n    \n    return answer\n"
    },
    {
        "number": 4044,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    a, b, x = map(int, stdin.split())\n    \n    if a + b <= x or a + b < x:\n        return \"\"\n    \n    if a % 2 == 0 and b % 2 == 0 and a + b <= x:\n        return \"00100000\"\n    \n    if a % 2 == 0 and b % 2 == 1 and a + b <= x:\n        return \"00110000\"\n    \n    if a % 2 == 0 and b % 2 == 1 and a + b < x:\n        return \"01101000\"\n    \n    \n    return \"00111111\"\n\"\"\"\nclass Solution:\n    def binaryStringMatch(self, s: str) -> str:\n        if len(s)<=1:\n            return s\n        \n        result = s[0]\n        for i in range(1, len(s)):\n            if s[i] == result:\n                result = result + s[i]\n            else:\n                result = result + \"0\"\n                if result == \"11100011\":\n                    return \"11111111\"\n                result = \"1\"\n                if result == \"11100101\":\n                    return \"00010001\"\n                result = \"0\"\n                if result == \"01101001\":\n                    return \"10101010\"\n                result = \"0\"\n        return result\n        \n        \n        \n"
    },
    {
        "number": 4044,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    if a!= 1 or b!= 1:\n        return 'NO'\n    if x!= 1:\n        return 'NO'\n    if a + b!= x:\n        return 'NO'\n    return 'YES'\n    \n"
    },
    {
        "number": 4044,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = list(map(int, stdin.split()))\n    s = ''\n    for i in range(a + b):\n        s += str(int(x + i/a - b/2) % 2 + 1)\n    return s\n    \n"
    },
    {
        "number": 4044,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.rstrip())\n    a = list(map(int,stdin.split()))\n    for i in range(1,n):\n        a[i] += a[i-1]\n    b = list(map(int,stdin.split()))\n    for i in range(1,n):\n        if a[i] == 0:\n            a[i] = 1\n        else:\n            a[i] = 0\n    x = a[n-1]\n    for i in range(n-2,-1,-1):\n        if a[i] == 0:\n            a[i] = 1\n        else:\n            a[i] = 0\n    i = 0\n    while x!= 0:\n        while x % 2!= 0:\n            x = x // 2\n            i += 1\n        x = x // 2\n        if i >= n:\n            break\n    s = \"\".join(map(str,a))\n    return s"
    },
    {
        "number": 4044,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n,k = map(int,stdin.split(' '))\n    a = int(stdin.split(' ')[1])\n    b = int(stdin.split(' ')[2])\n    s = ''\n    for i in range(1,a+1):\n        for j in range(1,b+1):\n            if (i+j)%2==0:\n                s += '0'\n            else:\n                s += '1'\n    return s"
    },
    {
        "number": 4044,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = int(stdin[:n])\n    b = int(stdin[n:])\n    s = ''\n    for i in range(n + 1):\n        s += str(a & 1 << i) + str(b & 1 << i) + str(i & 1 << n)\n    return s\n\nNote\n1.\nFor i = 0,2,3,4,5, the corresponding value of i = 5 = 3^2 + 3^1 + 3^0 = 1^2.\n\nFor i = 2,3,4,5, the corresponding value of i = 2 = 3^2 + 3^1 + 3^0 = 1^2.\n\nFor i = 3,4,5, the corresponding value of i = 2 = 3^2 + 3^1 + 3^0 = 1^2.\n\nFor i = 5, the corresponding value of i = 5 = 2^2 + 2^1 + 2^0 = 1^2.\n\nFor i = 6, the corresponding value of i = 6 = 2^2 + 2^1 + 2^0 = 1^2.\n\nFor i = 7, the corresponding value of i = 7 = 2^2 + 2^1 + 2^0 = 1^2.\n\nFor i = 8, the corresponding value of i = 8 = 2^2 + 2^1 + 2^0 = 1^2.\n\nThe binary string s = 00111111.\n\nExample 1:\nInput:\n3 3 3\n\nOutput:\n1111\n\nExplanation:\nThe optimal binary string is 0111.\nExample 2:\nInput:\n3 3 3\n\nOutput:\n11010\n\nExplanation:\nThe optimal binary string is 0111.\n\nNOTE:\nThe input string consists of three integers $a$, $b$ and $x$.\n\n\"\"\"\n\nclass Solution:\n    def construct_binary_string(self, n: int) -> str:\n        if n == 1:\n            return '1'\n        else:\n            return self.construct_binary_string(n - 1) + self.construct_binary_string(n - 2)"
    },
    {
        "number": 4045,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    t = stdin.strip()\n    if len(s)!= len(t):\n        return \"NO\"\n    if len(s) == len(t):\n        res = \"\"\n        for i in range(len(s)):\n            for j in range(i+1,len(s)):\n                res += s[i:j]\n        return res\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 4045,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip().split()[1])\n    s = stdin.strip().split()\n    t = stdin.strip().split()\n    t.sort()\n    if n == 1 and s[0] == t[0] and t[0] == 'b':\n        return 'NO'\n    if n == 1 and s[0]!= t[0] and s[0] == t[0] and t[0] == 'b':\n        return 'NO'\n    if n == 1 and s[0]!= t[0] and s[0] == t[0] and t[0] == 'a':\n        return 'NO'\n    if n == 2 and s[0] == t[1] and t[1] == 'b':\n        return 'NO'\n    if n == 2 and s[0] == t[1] and t[1] == 'a':\n        return 'NO'\n    if n == 3 and s[0] == t[1] and t[1] == 'a':\n        return 'NO'\n    if n == 3 and s[0] == t[1] and t[1] == 'c':\n        return 'YES'\n    if n == 3 and s[0]!= t[1] and s[0] == t[1] and t[1] == 'c':\n        return 'YES'\n    if n == 3 and s[0]!= t[1] and s[0] == t[1] and t[1] == 'b':\n        return 'YES'\n    if n == 4 and s[0]!= t[1] and s[0] == t[1] and t[1] == 'a':\n        return 'YES'\n    if n == 4 and s[0]!= t[1] and s[0] == t[1] and t[1] == 'b':\n        return 'YES'\n    if n == 5 and s[0]!= t[1] and s[0] == t[1] and t[1] == 'a':\n        return 'YES'\n    if n == 5 and s[0]!= t[1] and s[0] == t[1] and t[1] == 'b':\n        return 'YES'\n    if n == 6 and s[0]!= t[1] and s[0] == t[1] and t[1] == 'a':\n        return 'YES'\n    if n == 6 and s[0]!= t[1] and s[0] == t[1] and t[1] == 'b':\n        return 'YES'\n    if n == 7 and s[0]!= t[1] and s[0] == t[1] and t[1] == 'a':\n        return 'YES'\n    if n == 7 and s[0]!= t[1] and s[0] == t[1] and t[1] == 'b':\n        return 'YES'\n    if n == 8 and s[0]!= t[1] and s[0] == t[1] and t[1] == 'a':\n        return 'YES'\n    if n == 8 and s[0]!= t[1] and s[0] == t[1] and t[1] == 'b':\n        return 'YES'\n    if n == 9 and s[0]!= t[1] and s[0] == t[1] and t[1] == 'a':\n        return 'YES'\n    if n == 9 and s[0]!= t[1] and s[0] == t[1] and t[1] == 'b':\n        return 'YES'\n    if n == 10 and s[0]!= t[1] and s[0] == t[1] and t[1] == 'a':\n        return 'YES'\n    if n == 10 and s[0]!= t[1] and s[0] == t[1] and t[1] == 'b':\n        return 'YES'\n    if n == 11 and s[0]!= t[1] and s[0] == t[1] and t[1] == 'a':\n        return 'YES'\n    if n == 11 and s[0]!= t[1] and s[0] == t[1] and t[1] == 'b':\n        return 'YES'\n    if n == 12 and s[0]!= t[1] and s[0] == t[1] and t[1] == 'a':\n        return 'YES'\n    if n == 12 and s[0]!= t[1] and s[0] == t[1] and t[1] == 'b':\n        return 'YES'\n    if n == 13 and s[0]!= t[1] and s[0] == t[1] and t[1] == 'a':\n        return 'YES'\n    if n == 13 and s[0]!= t[1] and s[0] == t[1] and t[1] == 'b':\n        return 'YES'\n    if n == 14 and s[0]!= t[1] and s[0] == t[1] and t[1] == 'a':\n        return 'YES'\n    if n == 14 and s[0]!= t[1] and s[0] == t[1] and t[1] == 'b':\n        return 'YES'\n    if n == 15 and s[0]!= t[1] and s[0] == t[1] and t[1] == 'a':\n        return 'YES'\n    if n == 15 and s[0]!= t[1] and s[0] == t[1] and t[1] == 'b':\n        return 'YES'\n    if n == 16 and s[0]!= t[1] and s[0] == t[1] and t[1] == 'a':\n        return 'YES'\n    if n == 16 and s[0]!= t[1] and s[0] == t[1] and t[1] == 'b':\n        return 'YES'\n    if n == 17 and s[0]!= t[1] and s[0] == t[1] and t[1] == 'a':\n        return 'YES'\n    if n == 17 and s[0]!= t[1] and s[0] == t[1] and t[1] == 'b':\n        return 'YES'\n    if n == 18 and s[0]!= t[1] and s[0] == t[1"
    },
    {
        "number": 4045,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n,s,t=map(str,stdin.split())\n    res=[]\n    for i in range(len(s)):\n        if s[i]!=t[i] and s[i]!=t[len(s)-i-1]:\n            res.append(s[i])\n    if len(res)==0:\n        return \"NO\"\n    return \"YES\" if len(res)==3 else \"YES\"*(len(res)-3)+\"\".join(res)\n"
    },
    {
        "number": 4045,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    s = [stdin.strip() for _ in range(n)]\n    t = [stdin.strip() for _ in range(n)]\n    res = []\n    if n == 2 and s[0] == s[1]:\n        print('YES')\n        return s[0]\n    if n == 3 and s[0] == s[1] and s[1] == s[2]:\n        print('YES')\n        return s[0] + s[2]\n    if s[0] == s[1] or s[0] == s[2] or s[1] == s[2]:\n        for i in range(n):\n            res.append(s[i])\n            if len(res) == 3:\n                print('YES')\n                return res\n            if res[-1]!= s[i]:\n                res.append(s[i])\n                res.pop()\n                print('NO')\n    if len(res)!= 3:\n        print('NO')\n        return None\n    if len(res) == 3:\n        return res[0] + res[1] + res[2]\n    else:\n        return res[0] + res[1] + res[2] + s[0] + s[1] + s[2]\n"
    },
    {
        "number": 4045,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    # set of strings\n    ans = set()\n    \n    # loop through each character in the strings\n    for char in stdin:\n        if char not in ans:\n            ans.add(char)\n        if len(ans) == 3:\n            print('YES')\n            print(ans)\n            return 'YES'\n    \n    print('NO')"
    },
    {
        "number": 4045,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def isSubstring(s1, s2):\n        c = 0\n        for i in range(len(s1)):\n            if s1[i]!= s2[i]:\n                c += 1\n            if c == len(s2):\n                return False\n        return True\n        \n    \n    n = len(stdin)\n    s = stdin[n-1]\n    \n    if len(s)!= len(set(s)):\n        return \"NO\"\n    \n    a, b, c = [0] * n, [0] * n, [0] * n\n    for i in range(n):\n        if s[i] == \"a\":\n            a[i] = 1\n        if s[i] == \"b\":\n            b[i] = 1\n        if s[i] == \"c\":\n            c[i] = 1\n    \n    if a[0] == 1 and b[0] == 1 and c[0] == 1:\n        return \"YES\"\n    \n    for i in range(n):\n        if a[i] == 0 and b[i] == 0 and c[i] == 0:\n            continue\n        if isSubstring(s[:i+1], s[i+1:]):\n            return \"YES\"\n    \n    return \"NO\"\n"
    },
    {
        "number": 4045,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a, b, c = stdin.split(' ')\n    for i in range(1, n+1):\n        if a[i-1]!= 'b' and a[i-1]!= 'a' and a[i-1]!= 'c':\n            return 'NO'\n        if b[i-1]!= 'b' and b[i-1]!= 'a' and b[i-1]!= 'c':\n            return 'NO'\n        if c[i-1]!= 'b' and c[i-1]!= 'a' and c[i-1]!= 'c':\n            return 'NO'\n    return 'YES'"
    },
    {
        "number": 4045,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    #\n    # def solution(stdin: str):\n    #     if not stdin:\n    #         return ''\n    #     res = ''\n    #     for c in stdin:\n    #         if c == 'a':\n    #             res += 'c'\n    #         elif c == 'b':\n    #             res += 'a'\n    #         elif c == 'c':\n    #             res += 'b'\n    #         else:\n    #             continue\n    #         if len(res) >= 3:\n    #             return res\n    #     return ''\n    #\n    # def solution(stdin: str):\n    #     if not stdin:\n    #         return ''\n    #     res = ''\n    #     for c in stdin:\n    #         if c == 'a':\n    #             res += 'c'\n    #         elif c == 'b':\n    #             res += 'a'\n    #         elif c == 'c':\n    #             res += 'b'\n    #         else:\n    #             continue\n    #         if len(res) >= 3:\n    #             return res\n    #     return ''\n\n    # def solution(stdin: str):\n    #     if not stdin:\n    #         return ''\n    #     res = ''\n    #     for c in stdin:\n    #         if c == 'a':\n    #             res += 'c'\n    #         elif c == 'b':\n    #             res += 'a'\n    #         elif c == 'c':\n    #             res += 'b'\n    #         else:\n    #             continue\n    #         if len(res) >= 3:\n    #             return res\n    #     return ''\n\n    # return solution(stdin)\n    for s in [stdin]:\n        res = ''\n        for c in s:\n            if c == 'a':\n                res += 'c'\n            elif c == 'b':\n                res += 'a'\n            elif c == 'c':\n                res += 'b'\n            else:\n                continue\n            if len(res) >= 3:\n                return res\n    return ''\n\n\nprint(solution(\"aabbac\"))\nprint(solution(\"ababcdcdababcdcd\"))\nprint(solution(\"aabbacddddddddddddddd\"))\n"
    },
    {
        "number": 4045,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, t = map(int, stdin.split(' '))\n    res = ''\n    if n % 3!= 0:\n        print('NO')\n        return\n    \n    for i in range(1, n // 3 + 1):\n        if i % 3 == 0:\n            if a == b and b == a and b == a:\n                res += 'acbbac'\n            elif a == b and b == c and t == c:\n                res += 'cacbacbab'\n            elif a == b and b == t and t == c:\n                res += 'cacbacbac'\n            elif a == t and b == a and b == t:\n                res += 'abc'\n            elif a == t and b == b and b == t:\n                res += 'ac'\n            elif a == t and b == c and t == c:\n                res += 'ab'\n            elif a == t and b == c and t == t:\n                res += 'aa'\n            else:\n                res += 'bb'\n        else:\n            if a == b and t == a and b == a:\n                res += 'acbbac'\n            elif a == b and t == c and t == a:\n                res += 'cacbacbab'\n            elif a == b and t == t and t == b:\n                res += 'cacbacbac'\n            elif a == t and b == a and b == t:\n                res += 'abc'\n            elif a == t and b == b and b == t:\n                res += 'ab'\n            elif a == t and b == c and t == c:\n                res += 'aa'\n            else:\n                res += 'bb'\n    print(res)\n    return res\n"
    },
    {
        "number": 4045,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    string = stdin.strip().split()\n    string = [char for char in string if char in ['a', 'b', 'c']]\n    \n    if len(string)!= 3:\n        return 'NO'\n    \n    if string[0] == string[1] == string[2]:\n        return 'YES'\n    \n    s1, s2 = string\n    s1 = s1.replace('a', 'b')\n    s1 = s1.replace('c', 'b')\n    s1 = s1.replace('b', 'c')\n    s1 = s1.replace('c', 'a')\n    \n    s2 = s2.replace('a', 'b')\n    s2 = s2.replace('c', 'b')\n    s2 = s2.replace('b', 'c')\n    s2 = s2.replace('c', 'a')\n    \n    for i in range(len(string)):\n        for j in range(i+1, len(string)):\n            if string[i]!= string[j]:\n                break\n            \n        else:\n            return 'NO'\n    \n    s3 = string[i] + string[j]\n    s3 = s3.replace('a', 'b')\n    s3 = s3.replace('c', 'b')\n    s3 = s3.replace('b', 'c')\n    s3 = s3.replace('c', 'a')\n    \n    res = string[:i] + s1 + string[j:] + s3\n    return res"
    },
    {
        "number": 4046,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    \n    for i in range(2, n+1):\n        for j in range(i, n+1):\n            print(i, end = \"\")\n        print(\"\")\n\n-----Constraints-----\n1 <= n <= 10^5\n\n1 <= q_1, q_2, q_3, q_4 <= n - 1\n\nA permutation of length $n$ does not appear in $q_i$ where $q_i=p_{i+1}-p_i$ is correct if $i=q_i$, or is correct if $i=n-q_{i-1}$\n\n-------------------------------\ndef"
    },
    {
        "number": 4046,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n > 2*10**9:\n        return -1\n    \n    q = [int(s) for s in stdin.split()]\n    q.sort()\n    p_1 = p_2 = p_3 = 0\n    for i in range(1, len(q)):\n        p_1 += q[i-1] - q[i]\n        p_2 += q[i] - q[i-1]\n        p_3 += q[i] - q[i-1]\n    \n    if p_1 < p_3 and p_2 < p_3:\n        print(p_1)\n        print(p_2)\n        return\n    \n    if p_1 == p_2 or p_1 == p_3:\n        print(p_1)\n        return\n    \n    if p_1 < p_2 or p_2 < p_3:\n        print(p_1)\n        print(p_2)\n        return\n    \n    print(-1)\n    return\n\nsolution(\"3 2 1\")\nsolution(\"5 1 1\")"
    },
    {
        "number": 4046,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    l, r = map(int, stdin.split())\n    q = []\n    for i in range(l, r+1):\n        q.append(i)\n    for i in range(1, len(q)):\n        q[i] = q[i]-q[i-1]\n    for i in range(len(q)):\n        if q[i] == 0:\n            return \"No\"\n        else:\n            return str(q[i])\n\ndef"
    },
    {
        "number": 4046,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    perm_list = list(map(int, stdin.split()))\n    for p in perm_list:\n        if p == -1:\n            continue\n        if p not in perm_list:\n            perm_list.append(p)\n    for i in range(1, n):\n        if perm_list[i]!= i:\n            perm_list[i], perm_list[perm_list[i]] = perm_list[perm_list[i]], perm_list[i]\n    perm_list.sort()\n    answer = '-1'\n    if len(perm_list) == n - 1:\n        for i in range(n-1):\n            answer = perm_list[i]\n        print(answer)\n    else:\n        for i in range(n - 1):\n            if i + 1 < n - 1:\n                answer = perm_list[i] + perm_list[i+1]\n        print(answer)\n    return answer\n"
    },
    {
        "number": 4046,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    q1 = list(map(int, stdin.split()))\n    q2 = list(map(int, stdin.split()))\n    p_1 = q2.pop(0)\n    p_2 = q1.pop(0)\n    for i in range(1, n):\n        p_1 = p_1 * q2[i-1] % (pow(10, n-i))\n    for i in range(1, n):\n        p_2 = p_2 * q1[i-1] % (pow(10, n-i))\n    return f\"{p_1}{p_2}\""
    },
    {
        "number": 4046,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid_permutation(permutation: str) -> bool:\n        for i in range(1, len(permutation)):\n            if permutation[i]!= permutation[i-1]:\n                return False\n        return True\n    \n    def solve(permutation: str):\n        if len(permutation) == 1:\n            return permutation[0]\n        \n        for i in range(len(permutation) - 1):\n            if is_valid_permutation(permutation[:i] + permutation[i+1:]):\n                permutation = permutation[:i] + permutation[i+1:]\n        return solve(permutation)\n    \n    return solve(stdin)"
    },
    {
        "number": 4046,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    q = list(map(int, stdin.split()))\n    p = [q[i] - q[i - 1] for i in range(2, len(q) + 1)]\n    p.sort()\n    for i in range(len(p)):\n        if i == 0:\n            q[p[i]] = 1\n        elif i == 1:\n            q[p[i]] = 2\n        else:\n            q[p[i]] = p[i]\n    if q[0] < 0:\n        return '-1'\n    else:\n        return str(q[0])"
    },
    {
        "number": 4046,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    q = [0, 0]\n    for i in range(1, int(stdin) + 1):\n        q.append(int(q[-1] + stdin))\n    print(*q)\n    return \"1\" if q.count(q[-1]) >= 2 else \"2\"\n'''\n\n'''\nclass Solution:\n    def permute(self, nums: List[int]) -> List[List[int]]:\n        def dfs(nums, perm):\n            if len(perm) == len(nums):\n                res.append(perm)\n                return\n\n            for i in range(len(nums)):\n                if i > 0 and nums[i] == nums[i - 1] and perm[i - 1] == -1:\n                    continue\n                perm.append(nums[i])\n                dfs(nums, perm)\n                perm.pop()\n        \n        res = []\n        nums.sort()\n        dfs(nums, [])\n        return res\n'''\n"
    },
    {
        "number": 4046,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    # Split string\n    stdin = stdin.split(' ')\n    \n    # Count all integer numbers\n    n = int(stdin[0])\n    q = list(map(int, stdin[1].split('-')))\n    \n    # Get all permutations of integer numbers\n    permutations = [q[i:i+n] for i in range(n)]\n    \n    # Check if no permutation exists\n    if permutations == [] or len(permutations) == 0:\n        return str(n-1)\n    \n    # If there are more than one permutation\n    if len(permutations) > 1:\n        # Get all permutations of integer numbers\n        for i in range(len(permutations)):\n            permutation = permutations[i]\n            # Check if integer in permutation is too big\n            if all(p in q for p in permutation):\n                # If so, change the permutation\n                permutation = permutation[::-1]\n                # Remove the leading zeros\n                permutation = permutation[len(permutation)-permutation.index(0)]\n                # Replace all occurrence of 0 in the permutation\n                permutation = permutation[permutation.index(0)::]\n                # Change the integer number to the next permutation\n                permutation = permutation[::-1]\n                # Add the next permutation to the permutation list\n                permutations[i] = permutation\n        # Check if there is only one permutation\n        if len(permutations) == 1:\n            return str(permutations[0][0])\n        # Check if there are no permutation with same integer number\n        if len(permutations) == 0:\n            return str(-1)\n        # Repeat until all permutations are stored\n        for i in range(len(permutations)):\n            if len(permutations[i]) == 1:\n                return str(permutations[i][0])\n    # Return\n    return str(permutations[0][0])\n"
    },
    {
        "number": 4046,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    q = [int(x) for x in stdin.split()]\n    if n < 2*10**5:\n        return str(q[0])\n    q.sort(reverse=True)\n    for i in range(1,n-1):\n        if q[i-1]+q[i]<=n:\n            q[i] = q[i-1] + q[i]\n    if q[n-1]==q[n-2]:\n        return str(q[n-1])\n    return str(q[n-2])\n\ndef"
    },
    {
        "number": 4047,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    coins = set()\n    for line in stdin:\n        if line[0] == '1':\n            coins.add(int(line[1:]))\n        elif line[0] == '2':\n            coins.add(-int(line[1:]))\n    \n    # coins = sorted(coins)\n    ans = coins.pop()\n    while coins:\n        coin = coins.pop()\n        ans = max(ans, coin + ans)\n    return str(ans)\n\nNote:\n0 <= n <= 10^9\n0 <= x_i < 10^9\n\nInput\n5\n2 2 2 3 3\n\nOutput\n2\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4047,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    x = stdin.split()\n    numbers = list(map(int, x))\n    numbers.sort()\n    answer = 0\n    \n    for i in range(n):\n        for j in range(n):\n            if i!= j:\n                #print(numbers[i], numbers[j])\n                if numbers[i] < numbers[j]:\n                    answer += 1\n    return str(answer)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4047,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    x1 = int(stdin.strip().split(\" \")[0])\n    x2 = int(stdin.strip().split(\" \")[1])\n    ans = min(x1, x2)\n    for i in range(x1+1,x2+1):\n        if i <= n:\n            ans += i\n    return str(ans)\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4047,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip().split()[0])\n    x_i = int(stdin.strip().split()[1])\n    coin_taken = [0] * (n + 1)\n    for i in range(n):\n        stdin_lines = stdin.split()\n        if stdin_lines[0] =='move':\n            coin_taken[i + 1] += 2\n            coin_taken[x_i + 1] += 1\n        elif stdin_lines[0] == 'free':\n            coin_taken[i + 1] += 1\n            coin_taken[x_i] += 1\n        elif stdin_lines[0] == 'down':\n            coin_taken[i + 1] += 1\n            coin_taken[x_i - 1] += 1\n        elif stdin_lines[0] == 'right':\n            coin_taken[i + 1] += 1\n            coin_taken[x_i - 1] += 2\n        else:\n            coin_taken[i + 1] += 2\n            coin_taken[x_i - 1] += 2\n        print(coin_taken)\n    print(coin_taken[0] + coin_taken[1])\n    return str(coin_taken[0] + coin_taken[1])\n\nn = int(input())\nx_i = int(input())\nprint(solution(str(n)))"
    },
    {
        "number": 4047,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x = stdin.split()\n    \n    n = int(x[1])\n    x = int(x[2])\n\n    count = 0\n    for i in range(n):\n        if i % 2 == 0:\n            x -= 2\n            count += 2\n        else:\n            x += 2\n            count += 1\n    \n    return str(count)\n\"\"\"\n"
    },
    {
        "number": 4047,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip().split()[0])\n    x = [int(x) for x in stdin.split()[1:n+1]]\n    a = x[0]\n    b = x[-1]\n    \n    for i in range(n-1):\n        x[i] -= 2\n        x[i+1] -= 1\n        if a == b:\n            break\n    for i in range(n-1,0,-1):\n        x[i] += 1\n        x[i-1] += 1\n    print(a-b+1)\n\ndef"
    },
    {
        "number": 4047,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    x = abs(x)\n    y = abs(y)\n    if x < y:\n        y = x\n    if x == y:\n        return str(1)\n    else:\n        return str(y) + str(1)\n\n\n-----Constraints-----\n\n1 <= n <= 20\n\n\n-----Time Limit-----\n\nYou can perform 1000 calls to move all $n$ chips to the same coordinate.\n\n\n-----Test Cases-----\n\nExpected Result:\n\n1\n\n\nExplanation:\n\nIf we move two chips by $2$ to the left and the third chip by $1$ to the left to the right we get two coins.\n\nIf we move two chips by $1$ to the left and the second chip by $2$ to the right to the left we get three coins.\n\n\n\nRuntime: 1750 ms, faster than 6.07% of Python3 online submissions for Minimum Coins in a Line.\nMemory Usage: 14.3 MB, less than 70.29% of Python3 online submissions for Minimum Coins in a Line.\n\n\n\"\"\"\nclass Solution:\n    def minCoins(self, n: int) -> int:\n        if n==1:\n            return 1\n        if n==2:\n            return 3\n        n=abs(n)\n        a=0\n        b=1\n        while b<n:\n            if b%2==1:\n                a+=1\n                b+=1\n            else:\n                a+=1\n                b+=2\n        return a+b"
    },
    {
        "number": 4047,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = list(map(int, stdin.split()))\n    # print(x)\n    for i in x:\n        if i <= 0:\n            break\n        if i == 1:\n            x[x.index(i)] = -2\n        else:\n            x[x.index(i)] = 2\n    # print(x)\n    for i in x:\n        x[x.index(i)] = (x[x.index(i)])%10**9\n    print(sum(x))\n    return str(x[x.index(min(x))])\n\nsolution(\"1 2 3\")\nsolution(\"5\")\nsolution(\"2 2 2 3 3\")\nsolution(\"1 2 2\")"
    },
    {
        "number": 4047,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    \n    nums = []\n    for i in range(n):\n        nums.append(int(stdin.split()[i]))\n\n    nums = sorted(nums)\n    \n    for i in range(n):\n        if nums[i] == x:\n            print(i+1)\n            return\n        elif nums[i] > x:\n            print(x-nums[i], i+1)\n            return\n        elif nums[i] < x:\n            print(x-nums[i], i+1)\n            return\n\n    print(0)\n    return\n\n\n\nn = int(input())\nx = int(input())\nsolution(stdin.readline())\n"
    },
    {
        "number": 4047,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    coords = stdin.split()\n\n    if coords[0] == '0':\n        coords[0] = n\n        coords = [int(c) for c in coords[1:]]\n    else:\n        coords = [int(c) for c in coords[1:]]\n        coords[0] += n - 1\n        coords[0] = min(coords)\n        coords = [int(c) for c in coords[1:]]\n\n    if coords[1] == '0':\n        coords[1] = n\n        coords = [int(c) for c in coords[1:]]\n    else:\n        coords[1] += n - 1\n        coords[1] = min(coords)\n        coords = [int(c) for c in coords[1:]]\n    \n    return str(min(coords))\n\ndef"
    },
    {
        "number": 4048,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    answer = 0\n    n = int(stdin)\n    for i in range(1, n+1):\n        if n % i == 0:\n            for j in range(1, i//2+1):\n                answer += n//i\n    return str(answer)\nprint(solution(n))\n"
    },
    {
        "number": 4048,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n  N = int(stdin.strip())\n  if N % 2!= 0:\n    return \"no\"\n  if N <= 1:\n    return \"no\"\n  if N == 2:\n    return \"yes\"\n  taken = [0] * (N + 1)\n  for i in range(2, N + 1):\n    taken[i] = 1\n  for i in range(2, N + 1):\n    if taken[i] == 0:\n      for j in range(i, N + 1, i):\n        taken[j] = 1\n  for i in range(N - 2, -1, -1):\n    if taken[i + 1] == 0:\n      for j in range(N - 1, i - 1, -1):\n        taken[j] = 1\n  for i in range(N - 2, -1, -1):\n    if taken[i + 1] == 0:\n      for j in range(N - 1, i - 1, -1):\n        taken[j] = 1\n  for i in range(N):\n    if taken[i + 1] == 0:\n      return str(i + 1) + \" can be reached in \" + str(taken[i]) + \" move(s)\"\n  return str(N) + \" can be reached in \" + str(taken[N]) + \" move(s)\"\n\n(2,5) can be reached in five moves. We cannot reach a square that contains 10 in less than five moves.\ndef"
    },
    {
        "number": 4048,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N<=10:\n        return str(N)\n    m = 1\n    i,j = 1,1\n    if N == 10:\n        return str(m)\n    for i in range(N):\n        if N - i == 1:\n            return str(m)\n        else:\n            m = m + 1\n            if N - i == 2:\n                m = m + 1\n                i = 1\n                j = 1\n            elif N - i == 3:\n                m = m + 1\n                i = 1\n                j = 2\n            elif N - i == 4:\n                m = m + 1\n                i = 2\n                j = 1\n            elif N - i == 5:\n                m = m + 1\n                i = 2\n                j = 2\n            elif N - i == 6:\n                m = m + 1\n                i = 2\n                j = 3\n            elif N - i == 7:\n                m = m + 1\n                i = 2\n                j = 3\n            elif N - i == 8:\n                m = m + 1\n                i = 2\n                j = 3\n            elif N - i == 9:\n                m = m + 1\n                i = 2\n                j = 3\n            else:\n                m = m + 1\n                i = 2\n                j = 3\n    return str(m)\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        N = int(stdin)\n        if N<=10:\n            return str(N)\n        m = 1\n        i,j = 1,1\n        if N == 10:\n            return str(m)\n        for i in range(N):\n            if N - i == 1:\n                m = m + 1\n                i = 1\n                j = 1\n            elif N - i == 2:\n                m = m + 1\n                i = 1\n                j = 2\n            elif N - i == 3:\n                m = m + 1\n                i = 1\n                j = 3\n            elif N - i == 4:\n                m = m + 1\n                i = 2\n                j = 1\n            elif N - i == 5:\n                m = m + 1\n                i = 2\n                j = 2\n            elif N - i == 6:\n                m = m + 1\n                i = 2\n                j = 3\n            elif N - i == 7:\n                m = m + 1\n                i = 2\n                j = 3\n            elif N - i == 8:\n                m = m + 1\n                i = 2\n                j = 3\n            elif N - i == 9:\n                m = m + 1\n                i = 2\n                j = 3\n            else:\n                m = m + 1\n                i = 2\n                j = 3\n        return str(m)\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        N = int(stdin)\n        if N<=10:\n            return str(N)\n        m = 1\n        i,j = 1,1\n        if N == 10:\n            return str(m)\n        for i in range(N):\n            if N - i == 1:\n                m = m + 1\n                i = 1\n                j = 1\n            elif N - i == 2:\n                m = m + 1\n                i = 1\n                j = 2\n            elif N - i == 3:\n                m = m + 1\n                i = 1\n                j = 3\n            elif N - i == 4:\n                m = m + 1\n                i = 2\n                j = 1\n            elif N - i == 5:\n                m = m + 1\n                i = 2\n                j = 2\n            elif N - i == 6:\n                m = m + 1\n                i = 2\n                j = 3\n            elif N - i == 7:\n                m = m + 1\n                i = 2\n                j = 3\n            elif N - i == 8:\n                m = m + 1\n                i = 2\n                j = 3\n            elif N - i == 9:\n                m = m + 1\n                i = 2\n                j = 3\n            else:\n                m = m + 1\n                i = 2\n                j = 3\n        return str(m)\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        N = int(stdin)\n        if N<=10:\n            return str(N)\n        m = 1\n        i,j = 1,1\n        if N == 10:\n            return str(m)\n        for i in range(N):\n            if N - i == 1:\n                m = m + 1\n                i = 1\n                j = 1\n            elif N - i == 2:\n                m = m + 1\n                i = 1\n                j = 2\n            elif N - i == 3:\n                m = m + 1\n                i = 1\n                j = 3\n            elif N - i == 4:\n                m = m + 1\n                i = 2\n                j = 1\n            elif N - i == 5:\n                m = m + 1\n                i = 2\n                j = 2\n            elif N - i == 6:\n                m = m + 1\n                i = 2\n                j = 3\n            elif N - i == 7:\n                m = m + 1\n                i = 2\n                j = 3\n            elif N - i == 8:\n                m = m + 1\n                i = 2\n                j = 3\n            elif N - i == 9:\n                m = m + 1\n                i = 2\n                j = 3\n            else:\n                m = m + 1\n                i = 2\n                j = 3\n        return str(m)\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        N = int(stdin)\n        if N<=10:\n            return str(N)\n        m = 1\n        i,j = 1,1\n        if N == 10:\n            return str(m)\n        for i in range(N):\n            if N - i == 1:\n                m = m + 1\n                i = 1\n                j = 1\n            elif N - i == 2:\n                m = m + 1\n                i = 1\n                j = 2\n            elif N - i == 3:\n                m = m + 1\n                i = 1\n                j = 3\n            elif N - i == 4:\n                m = m + 1\n                i = 2\n                j = 1\n            elif N - i == 5:\n                m = m + 1\n                i = 2\n                j = 2\n            elif N - i == 6:\n                m = m + 1\n                i = 2\n                j = 3\n            elif N - i == 7:\n                m = m + 1\n                i = 2\n                j = 3\n            elif N - i == 8:\n                m = m + 1\n                i = 2\n                j = 3\n            elif N - i == 9:\n                m = m + 1\n                i = 2\n                j = 3\n            else:\n                m = m + 1\n                i = 2\n                j = 3\n        return str(m)\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        N = int(stdin)\n        if N<=10:\n            return str(N)\n        m = 1\n        i,j = 1,1\n        if N == 10:\n            return str(m)\n        for i in range(N):\n            if N - i == 1"
    },
    {
        "number": 4048,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def solve(N: int) -> int:\n        if N == 0:\n            return 0\n        elif N == 1:\n            return 1\n        elif N == 2:\n            return 2\n        else:\n            return solve(N-1) + solve(N-2) + solve(N-3) + solve(N-4)\n    \n    return solve(int(stdin))\n\ndef"
    },
    {
        "number": 4048,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    numbers = list(map(int, stdin.split()))\n    numbers.sort()\n    moves = 0\n    current_row = 0\n    current_col = 0\n    while current_row < N:\n        if numbers[current_row] * current_col >= N:\n            current_row += 1\n        else:\n            if current_row!= 0:\n                moves += 1\n                current_row -= 1\n            current_col += 1\n            current_col = 0\n    return str(moves)\n"
    },
    {
        "number": 4048,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n,k = map(int,stdin.split())\n    def find_square(N):\n        lst = list(range(1,n+1))\n        lst.remove(1)\n        square = 1\n        for i in lst:\n            square = square * (n-i) + k\n            if square > N:\n                break\n        return square\n    \n    res = 0\n    m = find_square(n)\n    while m!= 1:\n        m //= 2\n        res += 1\n    return str(res)\n"
    },
    {
        "number": 4048,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def f(n):\n        if n==1:\n            return 0\n        elif n==2:\n            return 1\n        elif n%2==0:\n            return 1+f(n//2)\n        else:\n            return f(n//2)+1+f(n-1)\n\n    return f(int(stdin))\n"
    },
    {
        "number": 4048,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n  n = int(stdin)\n  for _ in range(1, n + 1):\n    for i in range(n - _):\n      for j in range(n - _):\n        if i + j == n - 1:\n          return str(i + j)\n  return \"0\""
    },
    {
        "number": 4048,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    N = int(lines[0])\n    lines = lines[1:]\n    cols = lines\n    for col in cols:\n        cols = cols.replace(col, str(int(col)+1))\n    lines = lines[1:]\n    cols = cols.split(\" \")\n    row = cols[0].split(\",\")\n    col = cols[1].split(\",\")\n    for i in range(0, len(row)):\n        row[i] = int(row[i])\n        if row[i] == 1:\n            row[i] = 0\n    for i in range(0, len(col)):\n        col[i] = int(col[i])\n        if col[i] == 1:\n            col[i] = 0\n    for i in range(0, len(row)):\n        row[i] = int(row[i])\n        if row[i] == 1:\n            row[i] = 0\n    for i in range(0, len(col)):\n        col[i] = int(col[i])\n        if col[i] == 1:\n            col[i] = 0\n    print(min(row[0:row.index(1)], col[0:col.index(1)]))\nsolution(\"1,1,2,2,3,3,4,4,4\")\ndef"
    },
    {
        "number": 4048,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n\n    if N == 1:\n        return \"1\"\n    elif N % 10 == 1:\n        return \"1\" + solution(N / 10)\n    elif N % 10 == 2:\n        return \"2\" + solution(N / 10)\n    elif N % 10 == 3:\n        return \"3\" + solution(N / 10)\n    else:\n        return \"4\" + solution(N / 10)\n\ndef"
    },
    {
        "number": 4049,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = 0\n    b = 0\n    c = 0\n    for i in stdin:\n        if i == \"R\" or i == \"P\":\n            a += 1\n            if a == 3:\n                b += 1\n                c += 1\n        elif i == \"S\" or i == \"P\":\n            b += 1\n            if b == 3:\n                c += 1\n        elif i == \"P\" or i == \"R\":\n            c += 1\n            if c == 3:\n                a += 1\n                b += 1\n                c += 1\n    return str(a) + \" \" + str(b) + \" \" + str(c)\n"
    },
    {
        "number": 4049,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin.strip())\n    a_1 = int(stdin.strip())\n    a_2 = int(stdin.strip())\n    a_3 = int(stdin.strip())\n    b_1 = int(stdin.strip())\n    b_2 = int(stdin.strip())\n    b_3 = int(stdin.strip())\n    \n    #case 1\n    if (n == 0):\n        return str(0)\n    #case 2\n    if (n == 1):\n        if (a_1 == 0 and a_2 == 0 and a_3 == 0):\n            return str(0)\n        elif (a_1 == 1 and a_2 == 0 and a_3 == 0):\n            return str(1)\n        else:\n            return str(0)\n    #case 3\n    if (n == 2):\n        if (b_1 == 0 and b_2 == 0 and b_3 == 0):\n            return str(0)\n        elif (b_1 == 0 and b_2 == 1 and b_3 == 0):\n            return str(1)\n        elif (b_1 == 0 and b_2 == 1 and b_3 == 1):\n            return str(0)\n        else:\n            return str(1)\n    #case 4\n    if (n == 3):\n        if (a_1 == 0 and a_2 == 0 and a_3 == 0):\n            return str(0)\n        elif (a_1 == 0 and a_2 == 0 and a_3 == 1):\n            return str(1)\n        elif (a_1 == 0 and a_2 == 0 and a_3 == 2):\n            return str(0)\n        else:\n            return str(1)\n    #case 5\n    if (n == 4):\n        if (b_1 == 0 and b_2 == 0 and b_3 == 0):\n            return str(0)\n        elif (b_1 == 0 and b_2 == 0 and b_3 == 1):\n            return str(1)\n        elif (b_1 == 0 and b_2 == 0 and b_3 == 2):\n            return str(0)\n        else:\n            return str(1)\n    #case 6\n    if (n == 5):\n        if (b_1 == 0 and b_2 == 0 and b_3 == 0):\n            return str(0)\n        elif (b_1 == 0 and b_2 == 0 and b_3 == 1):\n            return str(1)\n        elif (b_1 == 0 and b_2 == 0 and b_3 == 2):\n            return str(0)\n        elif (b_1 == 1 and b_2 == 0 and b_3 == 0):\n            return str(1)\n        else:\n            return str(0)\n    #case 7\n    if (n == 6):\n        if (b_1 == 0 and b_2 == 0 and b_3 == 0):\n            return str(0)\n        elif (b_1 == 0 and b_2 == 0 and b_3 == 1):\n            return str(1)\n        elif (b_1 == 0 and b_2 == 0 and b_3 == 2):\n            return str(0)\n        elif (b_1 == 1 and b_2 == 0 and b_3 == 0):\n            return str(1)\n        else:\n            return str(0)\n    #case 8\n    if (n == 7):\n        if (b_1 == 0 and b_2 == 0 and b_3 == 0):\n            return str(0)\n        elif (b_1 == 0 and b_2 == 0 and b_3 == 1):\n            return str(1)\n        elif (b_1 == 0 and b_2 == 0 and b_3 == 2):\n            return str(0)\n        elif (b_1 == 0 and b_2 == 1 and b_3 == 0):\n            return str(1)\n        else:\n            return str(0)\n    #case 9\n    if (n == 8):\n        if (b_1 == 0 and b_2 == 0 and b_3 == 0):\n            return str(0)\n        elif (b_1 == 0 and b_2 == 0 and b_3 == 1):\n            return str(1)\n        elif (b_1 == 0 and b_2 == 0 and b_3 == 2):\n            return str(0)\n        elif (b_1 == 0 and b_2 == 1 and b_3 == 0):\n            return str(1)\n        else:\n            return str(0)\n    #case 10\n    if (n == 9):\n        if (b_1 == 0 and b_2 == 0 and b_3 == 0):\n            return str(0)\n        elif (b_1 == 0 and b_2 == 0 and b_3 == 1):\n            return str(1)\n        elif (b_1 == 0 and b_2 == 0 and b_3 == 2):\n            return str(0)\n        elif (b_1 == 0 and b_2 == 1 and b_3 == 0):\n            return str(1)\n        else:\n            return str(0)\n    #case 11\n    if (n == 10):\n        if (b_1 == 0 and b_2 == 0 and b_3 == 0"
    },
    {
        "number": 4049,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # The game starts by choosing rock and paper. The program chooses what the game will do and returns the number of rounds.\n    num = int(stdin)\n    if num == 0:\n        return 0\n    else:\n        a = 0\n        b = 0\n        for i in range(num):\n            rock = random.randint(1, 10)\n            paper = random.randint(1, 10)\n            scissors = random.randint(1, 10)\n            if rock > scissors:\n                a += 1\n            elif rock < scissors:\n                b += 1\n            elif paper > rock:\n                a += 1\n            else:\n                b += 1\n        return min(a, b)\n\n'''\n\ndef"
    },
    {
        "number": 4049,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def get_all_player_choice(stdin, a_1, a_2, a_3):\n        '''\n        0 1 2\n        1 0 1\n        2 0 0\n        3 0 1\n        '''\n        ans = []\n        while len(ans) < len(stdin):\n            ans.append(stdin[randint(0, len(stdin) - 1)])\n            while len(ans) < len(stdin):\n                ans.append(stdin[randint(0, len(stdin) - 1)])\n            \n        return ans\n    \n    def get_all_player_choice_again(stdin, a_1, a_2, a_3):\n        '''\n        0 1 2\n        1 0 1\n        2 0 0\n        3 0 1\n        '''\n        ans = []\n        while len(ans) < len(stdin):\n            ans.append(stdin[randint(0, len(stdin) - 1)])\n            while len(ans) < len(stdin):\n                ans.append(stdin[randint(0, len(stdin) - 1)])\n            \n        return ans\n    \n    def get_all_player_choice_again2(stdin, a_1, a_2, a_3):\n        '''\n        0 1 2\n        1 0 1\n        2 0 0\n        3 0 1\n        '''\n        ans = []\n        while len(ans) < len(stdin):\n            ans.append(stdin[randint(0, len(stdin) - 1)])\n            while len(ans) < len(stdin):\n                ans.append(stdin[randint(0, len(stdin) - 1)])\n            \n        return ans\n    \n    def get_all_player_choice_again3(stdin, a_1, a_2, a_3):\n        '''\n        0 1 2\n        1 0 1\n        2 0 0\n        3 0 1\n        '''\n        ans = []\n        while len(ans) < len(stdin):\n            ans.append(stdin[randint(0, len(stdin) - 1)])\n            while len(ans) < len(stdin):\n                ans.append(stdin[randint(0, len(stdin) - 1)])\n            \n        return ans\n    \n    def get_all_player_choice_again_again(stdin, a_1, a_2, a_3):\n        '''\n        0 1 2\n        1 0 1\n        2 0 0\n        3 0 1\n        '''\n        ans = []\n        while len(ans) < len(stdin):\n            ans.append(stdin[randint(0, len(stdin) - 1)])\n            while len(ans) < len(stdin):\n                ans.append(stdin[randint(0, len(stdin) - 1)])\n            \n        return ans\n    \n    def get_all_player_choice_again_again2(stdin, a_1, a_2, a_3):\n        '''\n        0 1 2\n        1 0 1\n        2 0 0\n        3 0 1\n        '''\n        ans = []\n        while len(ans) < len(stdin):\n            ans.append(stdin[randint(0, len(stdin) - 1)])\n            while len(ans) < len(stdin):\n                ans.append(stdin[randint(0, len(stdin) - 1)])\n            \n        return ans\n    \n    def get_all_player_choice_again_again3(stdin, a_1, a_2, a_3):\n        '''\n        0 1 2\n        1 0 1\n        2 0 0\n        3 0 1\n        '''\n        ans = []\n        while len(ans) < len(stdin):\n            ans.append(stdin[randint(0, len(stdin) - 1)])\n            while len(ans) < len(stdin):\n                ans.append(stdin[randint(0, len(stdin) - 1)])\n            \n        return ans\n    \n    def get_all_player_choice_again_again2_again(stdin, a_1, a_2, a_3):\n        '''\n        0 1 2\n        1 0 1\n        2 0 0\n        3 0 1\n        '''\n        ans = []\n        while len(ans) < len(stdin):\n            ans.append(stdin[randint(0, len(stdin) - 1)])\n            while len(ans) < len(stdin):\n                ans.append(stdin[randint(0, len(stdin) - 1)])\n            \n        return ans\n    \n    def get_all_player_choice_again_again3_again(stdin, a_1, a_2, a_3):\n        '''\n        0 1 2\n        1 0 1\n        2 0 0\n        3 0 1\n        '''\n        ans = []\n        while len(ans) < len(stdin):\n            ans.append(stdin[randint(0, len(stdin) - 1)])\n            while len(ans) < len(stdin):\n                ans.append(stdin[randint(0, len(stdin) - 1)])\n            \n        return"
    },
    {
        "number": 4049,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a_1 = int(stdin.strip())\n    a_2 = int(stdin.strip())\n    a_3 = int(stdin.strip())\n    b_1 = int(stdin.strip())\n    b_2 = int(stdin.strip())\n    b_3 = int(stdin.strip())\n\n    dp = [0 for _ in range(n)]\n    dp[0] = (a_1 + a_2 + a_3)\n    dp[1] = (a_1 + a_2 + b_3)\n    dp[2] = (a_1 + b_2 + a_2 + a_3)\n\n    for i in range(3, n):\n        dp[i] = min(dp[i - 1], dp[i - 2]) + min(dp[i - 3], dp[i - 4])\n    return str(dp[n - 1])"
    },
    {
        "number": 4049,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = list(map(int, stdin.split()))\n    a = int(a)\n    b = int(b)\n    c = int(c)\n    if a % b == 0 and a % c == 0:\n        return '0'\n    if a % b == 0 and a % c!= 0:\n        return '0'\n    if a % b == 0 and a % c == 0:\n        return str(a) + str(b) + str(c)\n    return '0'\n    \n"
    },
    {
        "number": 4049,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a + b + c == n:\n        return \"Yes\"\n    if a + b + c == n + n:\n        return \"Yes\"\n    if a + b + c == n * n:\n        return \"Yes\"\n    if a + b + c == n ** 2:\n        return \"Yes\"\n    return \"No\"\n\ndef"
    },
    {
        "number": 4049,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n        n = int(stdin)\n        a_1 = int(stdin.split()[0])\n        a_2 = int(stdin.split()[1])\n        a_3 = int(stdin.split()[2])\n\n        b_1 = int(stdin.split()[3])\n        b_2 = int(stdin.split()[4])\n        b_3 = int(stdin.split()[5])\n\n        answer = []\n\n        for i in range(0,n+1):\n            if i % a_1 == 0:\n                answer.append(a_3)\n            if i % a_2 == 0:\n                answer.append(a_2)\n            if i % a_3 == 0:\n                answer.append(a_1)\n        answer.sort()\n        answer = answer[::-1]\n        answer = answer[0:n]\n\n        return \"\".join(map(str,answer))\n\n'''\n\ndef"
    },
    {
        "number": 4049,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\n\n\ndef"
    },
    {
        "number": 4049,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a_1 = int(n // 3)\n    a_2 = n - (a_1 * 3)\n    a_3 = n - (a_1 * 3)\n    b_1 = int(n // 3)\n    b_2 = n - (b_1 * 3)\n    b_3 = n - (b_1 * 3)\n    return '0'+ str(min(a_1, a_2, a_3)) +'' + str(min(b_1, b_2, b_3))\n"
    },
    {
        "number": 4050,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    a = list(map(int, stdin[1:-1].split()))\n    max_num = 0\n    for i in range(n):\n        if a[i] > max_num:\n            max_num = a[i]\n    blocks = []\n    for i in range(n):\n        if a[i] == max_num:\n            blocks.append(i)\n    print(len(blocks))\n    print(*blocks)\n    return \"\".join(str(x) for x in blocks)\n\nTest case 1\n7\n4 1 2 2 1 5 3\n\nTest case 2\n11\n-5 -4 -3 -2 -1 0 1 2 3 4 5\n\nTest case 3\n4\n1 1 1 1\n\nTest case 4\n4\n1 1 1 1 1 1 1 1 1 1\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\nmax_num = 0\nfor i in range(n):\n    if a[i] > max_num:\n        max_num = a[i]\nfor i in range(n):\n    if a[i] == max_num:\n        print(i)\n        break"
    },
    {
        "number": 4050,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Auto-generated code below aims at helping you parse\n    # the standard input according to the problem statement.\n    \n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split(' ')))\n    k = a[0]\n    # Write your code here.\n    # -----Hidden Test-----\n    # a = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
    },
    {
        "number": 4050,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, *arr = map(int, stdin.split())\n    i = 0\n    s = ''\n    while i < n:\n        s += '1'\n        i += 1\n    # print(s)\n    b = 0\n    while b < n:\n        j = 0\n        while j < n:\n            if arr[b] == arr[j] == arr[i]:\n                s += '1'\n                j += 1\n            elif arr[b]!= arr[j] == arr[i] == arr[j]:\n                s += '2'\n                j += 1\n            elif arr[b]!= arr[j]!= arr[i]!= arr[j]:\n                s += '3'\n                j += 1\n            else:\n                s += '4'\n                j += 1\n            b += 1\n        s += '2'\n        b += 1\n    print(s)\n    return s\n\n-------Solution-------\n\nn, *a = map(int, input().split())\n\nprint(*a)"
    },
    {
        "number": 4050,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return''.join(map(str, map(lambda x: [int(x) for x in stdin.split()], input().split())))\n\n\n-----Brute force-----\n\nInput\n7\n4 1 2 2 1 5 3\n\nOutput\n3\n7 7\n2 3\n4 5\n\nInput\n11\n-5 -4 -3 -2 -1 0 1 2 3 4 5\n\nOutput\n4\n4 4\n1 1\n2 2\n3 3\n\nInput\n8\n5 -2 -3 -2 -1 0 1 2 3 4 5\n\nOutput\n3\n4 5\n1 1\n2 2\n3 3\n\nInput\n2\n-2 1 -1 -2 -2 2 -3 3\n\nOutput\n3 2\n1 3\n1 2\n\n'''"
    },
    {
        "number": 4050,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int,stdin.strip().split()))\n    sum = 0\n    k = 0\n    for i in range(1,n):\n        sum += a[i]\n    print(sum)\n    for i in range(1,n):\n        for j in range(k,n):\n            if i<j:\n                print(i,j,a[i] + a[j])\n    return str(sum)"
    },
    {
        "number": 4050,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, input().split()))\n    dp = [0] * n\n    for i in range(n):\n        for j in range(i):\n            if a[i] > a[j]:\n                dp[i] = max(dp[j], dp[i])\n    return str(max(dp))\n"
    },
    {
        "number": 4050,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    lst = list(map(int, stdin.strip().split()))\n    a = []\n    for i in range(len(lst)):\n        if lst[i] > 0:\n            a.append(lst[i])\n    print(len(a))\n    # print(a)\n    # for i in range(len(lst)):\n    #     a.append(lst[i])\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            if a[i] + a[j] == max(a[i], a[j]):\n                print(i, j)\n    # print(a)\n    # print(sum(a))\n    # for i in range(len(lst)):\n    #     a.append(lst[i])\n    # print(sum(a))\n"
    },
    {
        "number": 4050,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    blocks = []\n    for _ in range(n):\n        a, b = map(int, stdin.split())\n        blocks.append((a, b))\n    answer = []\n    for l, r in blocks:\n        l, r = sorted([l, r])\n        answer.append(l+r)\n    answer.sort()\n    for i in range(len(answer)):\n        print(answer[i])\n        \n    return \"\".join(str(x) for x in answer)"
    },
    {
        "number": 4050,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = [int(x) for x in stdin.splitlines()[1:n+1]]\n    if a[0] == a[1] and a[1] == a[2] and a[2] == a[3]:\n        print(n)\n    else:\n        blocks = []\n        for i in range(n):\n            l = a[i]\n            r = a[i+1]\n            blocks.append((l,r))\n        print(len(set(blocks)))\n        print(*blocks)\nsolution(input())\n"
    },
    {
        "number": 4050,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    :param stdin:\n    :return:\n    \"\"\"\n    n = int(stdin.strip())\n\n    # generate all blocks\n    blocks = [int(stdin[i:i+n]) for i in range(0, len(stdin), n)]\n\n    # calculate sum of elements of each block\n    # sum=sum(blocks[0]+blocks[1]+blocks[2], blocks[3]+blocks[4]+blocks[5])\n    # now that we know how many elements in each block\n    # let's calculate all sum of elements of that block\n    sum = [sum(blocks[i:i+n]) for i in range(0, len(blocks), n)]\n\n    # print result\n    for i in range(0, n):\n        print(blocks[i], end=\" \")\n        print(sum[i])\n\n    # print the highest sum\n    print(max(sum))\n\n    # for the pairs of indexes\n    for i in range(len(sum)-1):\n        if sum[i] > sum[i+1]:\n            print(i)\n\n\n    return stdin\n"
    },
    {
        "number": 4051,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    nums = sorted(map(int, stdin.split()))\n    stack = [[nums[0], 0]]\n    for i in range(1, n):\n        while stack and stack[-1][1] < nums[i]:\n            stack.pop()\n        stack.append([nums[i], nums[i] + 1])\n    for i in range(n):\n        if stack[i][0] < stack[0][0]:\n            stack.pop(i)\n            stack.append([stack[0][0], 0])\n    if stack:\n        stack.pop()\n    return \"YES\" if stack[0][1] == 0 else \"NO\"\n"
    },
    {
        "number": 4051,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.split()))\n    stack = []\n    stack.append(a[0])\n    res = []\n    if n!= 0:\n        for i in range(1, n):\n            while len(stack) > 0:\n                if stack[-1] <= a[i]:\n                    stack.pop()\n                    res.append(stack.pop())\n                    break\n                else:\n                    break\n        res.append(stack.pop())\n    return ''.join(res)\n\nprint(solution(\"3 5 6\"))\n"
    },
    {
        "number": 4051,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input = [tuple(map(int, stdin.split())) for _ in range(int(stdin))]\n    # print(input)\n    res = [input[0]]\n    for i in range(1, len(input)):\n        left = res[-1]\n        right = input[i]\n        if left[0] <= right[0]:\n            res.append(left)\n        else:\n            res.append(right)\n    # print(res)\n    res.sort()\n    for i in res:\n        print(i[1])\n    return 'YES' if res else 'NO'"
    },
    {
        "number": 4051,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    from collections import deque\n    n = int(stdin)\n    a = deque()\n    for i in range(n):\n        a.append(int(stdin[i]))\n        while len(a) > 1 and a[0] < a[1]:\n            a.popleft()\n            a.append(a.popleft())\n    while len(a) > 1:\n        a.pop()\n    return str(len(a))\n\ndef"
    },
    {
        "number": 4051,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin.strip())\n    stacks = [int(x) for x in stdin.split()]\n\n    array = [[] for x in range(n)]\n    \n    for i in range(n):\n        for j in range(i):\n            if len(array[i]) > 0:\n                array[i].append(array[j][-1])\n                array[j].pop(-1)\n    \n    def sort_array(array):\n        for i in range(len(array)):\n            array[i].sort()\n    \n    sort_array(array)\n\n    for i in range(n):\n        if array[i]:\n            array[i].pop(-1)\n            array[i].append(1)\n        else:\n            array[i].append(0)\n\n    for i in range(n):\n        for j in range(i+1, n):\n            if array[i][-1] == array[j][-1]:\n                continue\n            elif array[i][-1] == array[j][-1] and array[i] > array[j]:\n                array[i] += array[j]\n                array[j] = 0\n            elif array[i][-1] == array[j][-1] and array[i] < array[j]:\n                array[i] -= array[j]\n    \n    if array[0]:\n        array[0].sort()\n    \n    return \"NO\" if array[0] else \"YES\"\n"
    },
    {
        "number": 4051,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin)\n    res = list()\n    stack_lst = list()\n    \n    if n == 1:\n        return \"YES\"\n\n    for i in range(n):\n        tmp = int(stdin[i])\n        if tmp == 1:\n            stack_lst.append(1)\n        else:\n            stack_lst.append(tmp)\n\n    while len(stack_lst)!= 1:\n        tmp = stack_lst.pop()\n        if tmp == 1:\n            tmp = stack_lst.pop()\n            stack_lst.append(tmp)\n            stack_lst.append(1)\n        else:\n            res.append(tmp)\n    \n    for i in res:\n        if len(stack_lst)!= 1:\n            stack_lst.append(i)\n        elif len(stack_lst) == 1:\n            stack_lst.append(0)\n\n    if res[0] == 0:\n        res.pop(0)\n        res.pop(0)\n    \n    return \"YES\" if res == sorted(res) else \"NO\"\n\n\nInput\n5\n2 1 1 2 3 4\n\nOutput\nNO\n\n\n------------------\n\"\"\"\nclass Solution:\n    def solve(self, n: int, a: List[int]) -> str:\n        res = set()\n        for i in range(n):\n            res.add(i+1)\n            for j in range(i):\n                res.add(a[j]+1)\n        res = list(res)\n        res.sort()\n        res.reverse()\n        for i in range(n):\n            res[i] = a[i]\n        return ''.join(res)\n        "
    },
    {
        "number": 4051,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, *a = list(map(int, stdin))\n    \n    def sort_ascending(a):\n        return len(a) == 1 or a[-1] > a[-2]\n    \n    def sort_decreasing(a):\n        return len(a) == 2 or a[-1] < a[-2]\n    \n    def construct_heights(a):\n        return list(map(lambda x: x // 2 + 1, a))\n    \n    sorted_ascending = sorted(a, reverse=sort_ascending)\n    sorted_decreasing = sorted(a, reverse=sort_decreasing)\n    \n    max_height = construct_heights(sorted_ascending)\n    min_height = construct_heights(sorted_decreasing)\n    \n    if max_height[0] == min_height[0] and max_height[1] == min_height[1]:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 4051,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    stacks = [list(map(int, input().split())) for _ in range(n)]\n    ans = \"\"\n    for stack in stacks:\n        ans += str(min(stack)) + \" \"\n    return ans[:-1]\n\n\n-----Constraints-----\n\n1 <= n <= 100\n0 <= a_i <= 100\n\nSubtask 1.1\n\nInput\n3\n1 2 3\n\nOutput\nYES\n\nInput\n3\n1 1 2\n\nOutput\nNO\n\n\n\n-----Constraints-----\n\n1 <= n <= 100\n\nSubtask 1.1\n\nInput\n3\n1 2 3\n\nOutput\nNO\n\n\n-----Constraints-----\n\n1 <= n <= 100\n\nSubtask 1.1\n\nInput\n3\n1 2 3\n\nOutput\nNO\n\n\n-----Constraints-----\n\n1 <= n <= 100\n\nSubtask 1.1\n\nInput\n3\n1 2 3\n\nOutput\nYES\n\n'''\n\ndef"
    },
    {
        "number": 4051,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    stack = []\n    for _ in range(n):\n        tmp = list(map(int, stdin.split()))\n        stack.append(tmp)\n    stack.sort()\n    for i in range(len(stack)):\n        tmp = stack[i]\n        for j in range(i, len(stack)):\n            if tmp[j] < tmp[j - 1]:\n                tmp[j] = tmp[j - 1]\n    return \"\".join(map(str, stack))\n\"\"\"\n\ndef"
    },
    {
        "number": 4051,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lst = list(map(int, stdin.split()))\n    stack = []\n    height = 1\n    for i in lst:\n        while len(stack) > 0 and stack[-1][0] < i:\n            height = max(height, stack.pop())\n        stack.append([i, height])\n    return \"YES\" if len(stack) == 0 else \"NO\"\n\n-----Constraints-----\n\n1 <= n <= 10^4\n0 <= a_i <= 100\n\n-----Time Limit-----\n\nO(n)\n\nO(n)\n\n-----Solutions-----\n\n[Input]\n\n2\n3 1 2 3\n\n[Output]\n\nYES\n\n[Input]\n\n2\n1 2 3\n\n[Output]\n\nNO\n\n[Explaination]\n\nIn the example below, the tallest ravioli in an array is the two stacks of height 3 and 1. Hence, you can change the width of each stack to 2, and the whole array will be changed to {3, 1}. In the worst case, the two stacks will be changed to {3, 2} which makes the stack of height 2 taller than the tallest stack.\n\nInput\n3\n3 1 2 3\n\nOutput\nNO\n\n\n\n[Explanation]\n\n[2, 2, 2]\n[3, 1, 3]\n[3, 2, 2]\n\nThe height of the tallest ravioli is 3 and it's height is 1. In this case, the input is unsorted. So you are not going to modify the input array without modifying it.\n\n\n[Example]\n\nInput\n\n3\n1 2 3\n\nOutput\n\nNO\n\n\n'''\n\nclass Solution:\n    def sortArrayByParityII(self, nums: List[int]) -> List[int]:\n        \n        result = []\n        \n        n = len(nums)\n        \n        for i in range(n):\n            j = i\n            k = (n-1)-i\n            \n            while j < k:\n                if nums[j] & 1:\n                    nums[j], nums[k] = nums[k], nums[j]\n                    k = k-1\n                j = j+1\n                \n                if nums[j] & 1:\n                    nums[j], nums[k] = nums[k], nums[j]\n                    k = k-1\n        \n        return nums\n"
    },
    {
        "number": 4052,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    t = ''\n    while n > 0:\n        if n > 10:\n            n = 10**(n-1)\n        s_i = s[:n-1]\n        s_i = s[n-1] + s_i\n        t = s_i + t\n        n -= 1\n    return t\n\ndef"
    },
    {
        "number": 4052,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin.strip())\n    s = list(stdin.strip())\n    t = list(stdin.strip())\n\n    for i in range(n-1):\n        s[i], s[i+1] = s[i+1], s[i]\n\n    for i in range(n-1, 0, -1):\n        t[i-1], t[i] = t[i], t[i-1]\n        s[i-1] = t[i]\n        t[i] = s[i]\n    \n    return ''.join(s)\n"
    },
    {
        "number": 4052,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def solve(s, t):\n        result = ''\n        for i in range(len(s)):\n            for j in range(i, len(s)):\n                if s[i] == t[j]:\n                    result += s[i]\n                else:\n                    break\n        return result\n\n    def check(str):\n        for i in range(len(str)):\n            if str[i]!= str[i - 1]:\n                return False\n        return True\n\n    for line in stdin:\n        if len(line) == 0:\n            if check(line):\n                continue\n            else:\n                print(-1)\n                return\n        s = line.split()\n        t = line[-1]\n        if len(s)!= len(t):\n            print(-1)\n            return\n        for i in range(len(s)):\n            s[i] = s[i].lower()\n        for i in range(len(t)):\n            t[i] = t[i].lower()\n        if check(s):\n            print(1)\n        else:\n            print(0)\n\n\n\n-----Example 1-----\n\nInput\n6\nabcdef\nabdfec\nabdcef\nabdcfe\nabdfce\nabdfec\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdcef\nabdce"
    },
    {
        "number": 4052,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, s, t = map(int, stdin.split())\n    if n < 1 or n > 10**4: return \"-1\"\n    s_list = list(s)\n    t_list = list(t)\n    i = 0\n    while s_list[i]!= t_list[i]:\n        if s_list[i] == 'a':\n            s_list[i], s_list[i + 1] = s_list[i + 1], s_list[i]\n        elif s_list[i] == 'b':\n            s_list[i], s_list[i + 1] = s_list[i + 1], s_list[i]\n        elif s_list[i] == 'c':\n            s_list[i], s_list[i + 1] = s_list[i + 1], s_list[i]\n        elif s_list[i] == 'd':\n            s_list[i], s_list[i + 1] = s_list[i + 1], s_list[i]\n        elif s_list[i] == 'e':\n            s_list[i], s_list[i + 1] = s_list[i + 1], s_list[i]\n        elif s_list[i] == 'f':\n            s_list[i], s_list[i + 1] = s_list[i + 1], s_list[i]\n        i += 1\n    ans = ''.join(s_list)\n    return ans if len(ans) == len(s) else \"-1\""
    },
    {
        "number": 4052,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    s = list(stdin.split('\\n'))\n    t = list(stdin.split('\\n'))\n\n    if n == len(s) or m == len(t):\n        return \"-1\"\n\n    dic = {}\n    dic[1] = s[0]\n    for i in range(n - 1):\n        dic[i + 1] = t[i + 1]\n\n    for i in range(m - 1):\n        dic[i + 1] = s[i + 1]\n        dic[i] = t[i]\n\n    for j in range(1, n - 1):\n        dic[j] = s[j]\n        dic[j + 1] = t[j + 1]\n\n    for k in range(n - 1, 0, -1):\n        for j in range(k):\n            if dic[j] == dic[j + 1]:\n                dic[j + 1] = dic[j]\n                dic[j] = s[j]\n                s[j] = dic[j + 1]\n\n    for j in range(n - 1, 0, -1):\n        for i in range(j + 1, m):\n            if dic[i] == dic[i - 1]:\n                dic[i - 1] = dic[i]\n                dic[i] = s[i]\n                s[i] = dic[i - 1]\n\n    for j in range(m - 1, n - 1):\n        dic[j + 1] = t[j + 1]\n        dic[j] = s[j + 1]\n        s[j + 1] = dic[j + 1]\n\n    for j in range(n - 1, 0, -1):\n        for i in range(j + 1, m):\n            if dic[i] == dic[i - 1]:\n                dic[i - 1] = dic[i]\n                dic[i] = s[i]\n                s[i] = dic[i - 1]\n\n    for j in range(m - 1, n - 1):\n        dic[j + 1] = t[j + 1]\n        dic[j] = s[j + 1]\n        s[j + 1] = dic[j + 1]\n\n    print(sum(dic.values()))\n    return \"\".join(dic.values())\n"
    },
    {
        "number": 4052,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, *s = map(int, stdin)\n    j = 0\n    t = \"\"\n    while True:\n        try:\n            j = s.index(\"a\", j + 1)\n            if s[j + 1] == \"t\":\n                s[j], s[j + 1] = s[j + 1], s[j]\n                t += s[j]\n                s = s[j + 1:]\n            else:\n                j = s.index(\"t\", j + 1)\n                s = s[j + 1:]\n        except:\n            return \"-1\"\n    return t\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4052,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # to get the length of the string\n    n = int(stdin.strip().rstrip())\n\n    # to find the length of the strings\n    # we have to assign 1 to every index\n    for _ in range(n):\n        # and each index in the string\n        string = stdin.strip().rstrip()\n        # and we check the possible characters\n        if len(string) % 2 == 1:\n            return \"-1\"\n        # and we use the sum of every two letters\n        # to check if it is even\n        sum = 0\n        for i in range(len(string) // 2):\n            sum += string[i] + string[i + 1]\n        # if it's even, it means that we can swap\n        if sum % 2 == 1:\n            # then it's an odd number\n            # so we swap the characters\n            temp = string[i]\n            string[i] = string[i + 1]\n            string[i + 1] = temp\n\n    return \"\".join(string)\n\n\nTest Cases\ns = \"abcd\"\nt = \"cdcde\"\nprint(solution(s))\ns = \"abcd\"\nt = \"abcdef\"\nprint(solution(s))\ns = \"abcd\"\nt = \"abdfce\"\nprint(solution(s))\ns = \"abcdef\"\nt = \"abcd\"\nprint(solution(s))\ns = \"abcd\"\nt = \"abdcef\"\nprint(solution(s))\ns = \"abdcfe\"\nt = \"abdcfi\"\nprint(solution(s))\ns = \"abdcf\"\nt = \"abdcf\"\nprint(solution(s))\ns = \"abdcf\"\nt = \"abdcf\"\nprint(solution(s))\ns = \"abdcf\"\nt = \"abdcf\"\nprint(solution(s))\ns = \"abdcf\"\nt = \"abdcf\"\nprint(solution(s))\ns = \"abdcf\"\nt = \"abdcf\"\nprint(solution(s))\ns = \"abdcf\"\nt = \"abdcf\"\nprint(solution(s))\ns = \"abdcf\"\nt = \"abdcf\"\nprint(solution(s))\ns = \"abdcf\"\nt = \"abdcf\"\nprint(solution(s))\ns = \"abdcf\"\nt = \"abdcf\"\nprint(solution(s))\ns = \"abdcf\"\nt = \"abdcf\"\nprint(solution(s))\ns = \"abdcf\"\nt = \"abdcf\"\nprint(solution(s))\ns = \"abdcf\"\nt = \"abdcf\"\nprint(solution(s))\ns = \"abdcf\"\nt = \"abdcf\"\nprint(solution(s))\ns = \"abdcf\"\nt = \"abdcf\"\nprint(solution(s))\ns = \"abdcf\"\nt = \"abdcf\"\nprint(solution(s))\ns = \"abdcf\"\nt = \"abdcf\"\nprint(solution(s))\ns = \"abdcf\"\nt = \"abdcf\"\nprint(solution(s))\ns = \"abdcf\"\nt = \"abdcf\"\nprint(solution(s))\ns = \"abdcf\"\nt = \"abdcf\"\nprint(solution(s))\ns = \"abdcf\"\nt = \"abdcf\"\nprint(solution(s))\ns = \"abdcf\"\nt = \"abdcf\"\nprint(solution(s))\ns = \"abdcf\"\nt = \"abdcf\"\nprint(solution(s))\ns = \"abdcf\"\nt = \"abdcf\"\nprint(solution(s))\ns = \"abdcf\"\nt = \"abdcf\"\nprint(solution(s))\ns = \"abdcf\"\nt = \"abdcf\"\nprint(solution(s))\ns = \"abdcf\"\nt = \"abdcf\"\nprint(solution(s))\ns = \"abdcf\"\nt = \"abdcf\"\nprint(solution(s))\ns = \"abdcf\"\nt = \"abdcf\"\nprint(solution(s))\ns = \"abdcf\"\nt = \"abdcf\"\nprint(solution(s))\ns = \"abdcf\"\nt = \"abdcf\"\nprint(solution(s))\ns = \"abdcf\"\nt = \"abdcf\"\nprint(solution(s))\ns = \"abdcf\"\nt = \"abdcf\"\nprint(solution(s))\ns = \"abdcf\"\nt = \"abdcf\"\nprint(solution(s))\ns = \"abdcf\"\nt = \"abdcf\"\nprint(solution(s))\ns = \"abdcf\"\nt = \"abdcf\"\nprint(solution(s))\ns = \"abdcf\"\nt = \"abdcf\"\nprint(solution(s))\ns = \"abdcf\"\nt = \"abdcf\"\nprint(solution(s))\ns = \"abdcf\"\nt = \"abdcf\"\nprint(solution(s))\ns = \"abdcf\"\nt = \"abdcf\"\nprint(solution(s))\ns = \"abdcf\"\nt = \"abdcf\"\nprint(solution(s))\ns = \"abdcf\"\nt = \"abdcf\"\nprint(solution(s))\ns = \"abdcf\"\nt = \"abdcf\"\nprint(solution(s))\ns = \"abdcf\"\nt = \"abdcf\"\nprint(solution(s))\ns ="
    },
    {
        "number": 4052,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.strip().replace(' ',''))\n    s = stdin.strip().replace(' ','')\n    t = ''.join(sorted(s))\n    \n    if k > 10**4:\n        return \"-1\"\n    \n    res = []\n    for i in range(k):\n        res.append(i)\n        temp = sorted(s)\n        \n        for j in range(len(temp)):\n            res[i] = temp[j]\n            \n            if i + 1 < k and j == len(temp) - 1:\n                res[i + 1] = temp[j]\n            \n            if i + 1 < k and j == 0:\n                res[i + 1] = temp[j]\n            \n            if i + 1 < k and j == len(temp) - 1:\n                res[i + 1] = temp[j]\n    \n    return''.join(map(str, res))"
    },
    {
        "number": 4052,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    s = [str(n) for n in range(1, n + 1)]\n    t = [str(n) for n in range(n, 0, -1)]\n    nums = [int(n) for n in stdin.split()]\n    print(max(nums))\n    c = [0 for _ in range(10)]\n    for i in range(1, len(s)):\n        if s[i - 1]!= s[i]:\n            c[int(s[i]) - 1] = 1\n            for j in range(i - 1, -1, -1):\n                if s[j] == s[i]:\n                    c[int(s[j]) - 1] = 1\n                    break\n    for i in range(1, len(t)):\n        if t[i - 1]!= t[i]:\n            c[int(t[i]) - 1] = 1\n            for j in range(i - 1, -1, -1):\n                if t[j] == t[i]:\n                    c[int(t[j]) - 1] = 1\n                    break\n    return str(sum(c))\n\n-----Test-----\n\n>>> solution(\"4\")\n4\n>>> solution(\"5\")\n-1\n\n>>> solution(\"1\")\n0\n\n>>> solution(\"10\")\n10\n\n>>> solution(\"11\")\n-1\n\n>>> solution(\"12\")\n-1\n\n>>> solution(\"100\")\n-1\n\n>>> solution(\"101\")\n-1\n\n>>> solution(\"110\")\n-1\n\n>>> solution(\"111\")\n-1\n\n>>> solution(\"10110\")\n-1\n\n>>> solution(\"1211\")\n-1\n\n>>> solution(\"1101111\")\n-1\n\n>>> solution(\"100000011\")\n-1\n\n>>> solution(\"11011111\")\n-1\n\n>>> solution(\"1100011\")\n-1\n\n>>> solution(\"110100011\")\n-1\n\n>>> solution(\"1110000111\")\n-1\n\n>>> solution(\"100110111\")\n-1\n\n>>> solution(\"0001110101\")\n-1\n\n>>> solution(\"00011101\")\n-1\n\n>>> solution(\"11110001\")\n-1\n\n>>> solution(\"1000011\")\n10\n\n>>> solution(\"10000111\")\n-1\n\n>>> solution(\"11111\")\n0\n\n>>> solution(\"11101\")\n-1\n\n>>> solution(\"11111111\")\n-1\n\n>>> solution(\"11011111111111\")\n-1\n\n>>> solution
    },
    {
        "number": 4052,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, s, t = map(str, stdin.split())\n    n = int(n)\n    s = s.lower()\n    t = t.lower()\n    if len(s) == 0:\n        return \"-1\"\n    elif len(t) == 0:\n        return s[:-1]\n    elif len(s)!= len(t):\n        return \"-1\"\n    \n    # swap non-alpha characters\n    s_len = len(s)\n    t_len = len(t)\n    for _ in range(s_len):\n        if s[s_len - 1 - _] not in \"abcdefghijklmnopqrstuvwxyz\":\n            s = s[:s_len - 1 - _] + t[t_len - 1 - _] + s[s_len - 1 - _ + 1:s_len]\n            t = t[:t_len - 1 - _] + t[t_len - 1 - _ + 1:t_len]\n            t = t[:t_len]\n            s_len = len(s)\n    return s\n"
    },
    {
        "number": 4053,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    \n\ndef"
    },
    {
        "number": 4053,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    # s = stdin.split()\n    # print(s[0])\n    # print(s[1])\n    s = sorted(list(set(stdin.split())))\n    # print(s[0])\n    # print(s[1])\n    p = len(s[0])\n    if p < 2 or p > n+1:\n        return \"SPPSPSPS\"\n    if p < n+1:\n        return \"PSPSPSPSPSPSPSPSPSPSPSPSPS\"\n    if n % 2!= 0:\n        return
    },
    {
        "number": 4053,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    s = list(map(str, stdin.strip().split(' ')))\n    if len(s)!= 2**n:\n        print('Error')\n        return ''\n    for i in range(n):\n        prefix = s[i*2:i*2+2]\n        suffix = s[i*2+1::2]\n        if prefix == prefix[::-1] and suffix == suffix[::-1]:\n            prefix = list(prefix)\n            prefix.reverse()\n            suffix = list(suffix)\n            suffix.reverse()\n            s[i] = ''.join(prefix + suffix)\n    return''.join(s)"
    },
    {
        "number": 4053,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s, n = map(int, stdin.split())\n    if s%2:\n        print(\"SPPSPSPSPS\")\n    else:\n        answer = \"\"\n        for i in range(n-1):\n            answer += 'P'\n            if i!=0:\n                answer += 'S'\n            answer += stdin[s-1]\n        print(answer)\n    return answer\n\n------------------------------------------------------------------------------------------\n\n----- Test -----\nprint(solution(\"5\"))\n"
    },
    {
        "number": 4053,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(str, stdin.split())\n    d = {}\n    for i in s:\n        d[i] = d.get(i, 0) + 1\n    ans = []\n    for i in d.values():\n        ans.append(i)\n    for i in ans:\n        if i == 1:\n            ans = 'P'\n        else:\n            ans = 'S'\n    return ans\n\n\ndef"
    },
    {
        "number": 4053,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    answer = []\n    for i in range(n):\n        answer.append(stdin.strip())\n    for i in range(n):\n        if answer[i] == \"a\" and answer[i+1] == \"b\":\n            answer[i] = \"a\"\n        elif answer[i] == \"a\" and answer[i+1] == \"c\":\n            answer[i] = \"a\"\n        elif answer[i] == \"b\" and answer[i+1] == \"c\":\n            answer[i] = \"b\"\n        elif answer[i] == \"b\" and answer[i+1] == \"a\":\n            answer[i] = \"b\"\n        elif answer[i] == \"c\" and answer[i+1] == \"a\":\n            answer[i] = \"c\"\n        elif answer[i] == \"c\" and answer[i+1] == \"b\":\n            answer[i] = \"c\"\n        else:\n            answer[i] = answer[i+1]\n    return \"\".join(answer)\n\n\n-----Examples-----\nInput\n3\na\na\nbababab\na\nb\nabab\nbab\na\nOutput\nPS\nPSPSPSPS\nPSSPPSPS\n\nInput\n1\na\n\nOutput\nP\n\nInput\n1\na\na\n\nOutput\nP\n\nInput\n2\na\na\na\n\nOutput\nSPPSPSPS\n\nInput\n1\na\na\n\nOutput\nP\n\nInput\n2\na\na\na\n\nOutput\nSP\n\"\"\"\n\n\n\ndef"
    },
    {
        "number": 4053,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input_ = stdin.split()\n    res = []\n    prefix = [x for x in input_[0] if x!= 'a']\n    suffix = [x for x in input_[-1] if x!= 'a']\n    for i in range(len(prefix)):\n        res.append(prefix[i] + suffix[i] + 'P')\n    for i in range(len(suffix)):\n        res.append(suffix[i] + 'S')\n    return ''.join(res)\n'''\n\n\ndef"
    },
    {
        "number": 4053,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split())\n    s = stdin[0:n]\n    prefixes = set()\n    suffixes = set()\n    for i in range(n-1):\n        prefix = s[i:i+p]\n        if prefix in prefixes:\n            prefixes.remove(prefix)\n            suffixes.add(s[i+p:i+2*p])\n        prefixes.add(prefix)\n    print(*suffixes)\n    print(*prefixes)\n    return ''.join(sorted(list(prefixes))) + ''.join(sorted(list(suffixes)))"
    },
    {
        "number": 4053,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return\n"
    },
    {
        "number": 4053,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    answer = \"\"\n    \n    def dfs(i,j,t):\n        if t==\"P\":\n            answer += \"P\"\n        elif t==\"S\":\n            answer += \"S\"\n        else:\n            return\n        \n        for k in range(i,i+n-j):\n            dfs(k,j,t)\n        \n    n=int(stdin.strip())\n    if n==1:\n        answer=stdin.strip()\n        return answer\n    \n    \n    dfs(0,0,stdin.strip())\n    return answer\n\ninput = \"\"\"5\nba\na\nabab\na\naba\nbaba\nab\naba\nb\"\"\"\n\nprint(solution(input))\n"
    },
    {
        "number": 4054,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def is_palindrome(num):\n        num = str(num)\n        num = num.lower()\n        if num[::-1] == num:\n            return True\n        else:\n            return False\n    for x in range(int(stdin[0]), int(stdin[1]) + 1):\n        if is_palindrome(x):\n            print(x)\n\n-----Constraints-----\n1 <= stdin.length <= 100\nstdin.length < 5*10^4\n1 <= a_{i} <= 100\n\n-------Time Limit Exceeded-------\nn = len(stdin)\n\nn = 4,\n\nn = 6,\n\nn = 8,\n\nn = 10,\n\nn = 12,\n\nn = 20,\n\nn = 30,\n\nn = 40,\n\nn = 50,\n\nn = 100,\n\nInput\n2 4 6 8 10\n\nOutput\n1\n\n-----Constraints-----\n1 <= stdin.length <= 5*10^5\nstdin.length < 5*10^4\n1 <= a_{i} <= 100\n\n------------\n"
    },
    {
        "number": 4054,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    number_list = list(map(int, stdin.split()))\n    answer = [1] * len(number_list)\n    \n    for i in range(1, len(number_list)):\n        for j in range(i):\n            answer[j] *= answer[j+1]\n        answer[i] = int(str(number_list[i]) + str(answer[i]))\n        \n    return str(answer[len(number_list)-1])\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4054,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin[0]))\n\n\nInput\n2 4 6 8 10\n\nOutput\n1\ndef"
    },
    {
        "number": 4054,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nFunction Description\n\nComplete the function nonDigit(stdin: str) that, given a string as input, returns the non-digit version of the string.\n\n\n\nInput Format\n\nThe first line contains an integer,, denoting the number of lines of the input. Then the next line contains.\n\nThe next line contains a string,.\n\n\n\nOutput Format\n\nReturn a single integer.\n\n\n\nSample Input\n\n2 4 6 8 10\n\nSample Output\n\n1\n\n\n\nConstraints\n\n0 <= stdin.length <= 100\n\n0 <= a_i <= 100\n\n\n-----Example Use-----\nSample Input\n\n2 3\n3\n\nSample Output\n\n1\n\n\n-----Example Use-----\n'''\n\ndef"
    },
    {
        "number": 4054,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return str(eval(stdin.strip().replace('(', '').replace(')', '')))\n\n...\n\nExample 2:\n\n\nInput\n3 5 3 4\n\nOutput\n3\ndef"
    },
    {
        "number": 4054,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n    return str(max([int(n) for n in stdin.split()]))\n\nInput\n6 1 5 7\n\nOutput\n5\n\n\n\"\"\"\n    \n    \ndef"
    },
    {
        "number": 4054,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n,k=map(int,stdin.split())\n    \n    solution=['O']+list(map(str,range(2,k+1)))\n    print(''.join(solution))\n    return\n\n-----Examples-----\nInput\n1 3 5 4\n\nOutput\n'O'\n\n-----Examples-----\nInput\n2 2 3\n\nOutput\n'O'\n\n-----Examples-----\nInput\n1 4\n\nOutput\n'O'\n\n-----Examples-----\nInput\n2\n\nOutput\n'O'\n\n-----Examples-----\nInput\n3 5\n\nOutput\n'O'\n\n-----Examples-----\nInput\n4 2\n\nOutput\n'O'\n\n-----Examples-----\nInput\n10\n\nOutput\n'O'\n\n-----Examples-----\nInput\n1000\n\nOutput\n'O'\n\n-----Examples-----\nInput\n0\n\nOutput\n'O'\n\n-----Examples-----\nInput\n9\n\nOutput\n'O'\n\n-----Examples-----\n\nAlgorithm\n\nn=0\nsolution=['O']\n\nwhile True:\n    n=n+1\n    if n==10:\n        break\n    \n    else:\n        solution.append(str(n))\n        \nprint(''.join(solution))\n"
    },
    {
        "number": 4054,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a=list(map(int,stdin.split()))\n    a.sort(reverse=True)\n    if a==[0,0,0]:\n        return '0'\n    if a[0]==0:\n        return a[0]+solution(stdin+' 1')\n    if a[1]==0:\n        return a[1]+solution(stdin+' 2')\n    if a[2]==0:\n        return a[2]+solution(stdin+' 3')\n    if a[3]==0:\n        return a[3]+solution(stdin+' 4')\n    if a[4]==0:\n        return a[4]+solution(stdin+' 5')\n    if a[5]==0:\n        return a[5]+solution(stdin+' 6')\n    if a[6]==0:\n        return a[6]+solution(stdin+' 7')\n    if a[7]==0:\n        return a[7]+solution(stdin+' 8')\n    if a[8]==0:\n        return a[8]+solution(stdin+' 9')\n    if a[9]==0:\n        return a[9]+solution(stdin+' 10')\n    if a[10]==0:\n        return a[10]+solution(stdin+' 11')\n    if a[11]==0:\n        return a[11]+solution(stdin+' 12')\n    if a[12]==0:\n        return a[12]+solution(stdin+' 13')\n    if a[13]==0:\n        return a[13]+solution(stdin+' 14')\n    if a[14]==0:\n        return a[14]+solution(stdin+' 15')\n    if a[15]==0:\n        return a[15]+solution(stdin+' 16')\n    if a[16]==0:\n        return a[16]+solution(stdin+' 17')\n    if a[17]==0:\n        return a[17]+solution(stdin+' 18')\n    if a[18]==0:\n        return a[18]+solution(stdin+' 19')\n    if a[19]==0:\n        return a[19]+solution(stdin+' 20')\n    if a[20]==0:\n        return a[20]+solution(stdin+' 21')\n    if a[21]==0:\n        return a[21]+solution(stdin+' 22')\n    if a[22]==0:\n        return a[22]+solution(stdin+' 23')\n    if a[23]==0:\n        return a[23]+solution(stdin+' 24')\n    if a[24]==0:\n        return a[24]+solution(stdin+' 25')\n    if a[25]==0:\n        return a[25]+solution(stdin+' 26')\n    if a[26]==0:\n        return a[26]+solution(stdin+' 27')\n    if a[27]==0:\n        return a[27]+solution(stdin+' 28')\n    if a[28]==0:\n        return a[28]+solution(stdin+' 29')\n    if a[29]==0:\n        return a[29]+solution(stdin+' 30')\n    if a[30]==0:\n        return a[30]+solution(stdin+' 31')\n    if a[31]==0:\n        return a[31]+solution(stdin+' 32')\n    if a[32]==0:\n        return a[32]+solution(stdin+' 33')\n    if a[33]==0:\n        return a[33]+solution(stdin+' 34')\n    if a[34]==0:\n        return a[34]+solution(stdin+' 35')\n    if a[35]==0:\n        return a[35]+solution(stdin+' 36')\n    if a[36]==0:\n        return a[36]+solution(stdin+' 37')\n    if a[37]==0:\n        return a[37]+solution(stdin+' 38')\n    if a[38]==0:\n        return a[38]+solution(stdin+' 39')\n    if a[39]==0:\n        return a[39]+solution(stdin+' 40')\n    if a[40]==0:\n        return a[40]+solution(stdin+' 41')\n    if a[41]==0:\n        return a[41]+solution(stdin+' 42')\n    if a[42]==0:\n        return a[42]+solution(stdin+' 43')\n    if a[43]==0:\n        return a[43]+solution(stdin+' 44')\n    if a[44]==0:\n        return a[44]+solution(stdin+' 45')\n    if a[45]==0:\n        return a[45]+solution(stdin+' 46')\n    if a[46]==0:\n        return a[46]+solution(stdin+' 47')\n    if a[47]==0:\n        return a[47]+solution(stdin+' 48')\n    if a[48]==0:\n        return a[48]+solution(stdin+' 49')\n    if a[49]==0:\n        return a[49]+solution(stdin+' 50')\n    if a[50]==0:\n        return a[50]+solution(stdin+' 51')\n    if a[51]==0:\n        return a[51]+solution(stdin+' 52')\n    if a[52]==0:\n        return a[52]+solution(stdin+' 53')\n    if a[53]==0:\n        return a[53]+solution(stdin+' 54')\n    if a[54]==0:\n        return a[54]+solution(stdin+' 55')\n    if a[55]==0:\n        return a[55]+solution(stdin+' 56')\n    if a[56]==0:\n        return a[56]+solution(stdin+' 57')\n    if a[57]==0:\n        return a[57]+solution(stdin+' 58')\n    if a[58]==0:\n        return a[58]+solution(stdin+' 59')\n    if a[59]==0:\n        return a[59]+solution(stdin+' 60')\n    if a[60]==0:\n        return a[60]+solution(stdin+' 61')\n    if a[61]==0:\n        return a[61]+solution(stdin+' 62')\n    if a[62]==0:\n        return a[62]+solution(stdin+' 63')\n    if a[63]==0:\n        return a[63]+solution(stdin+' 64')\n    if a[64]==0:\n        return a[64]+solution(stdin+' 65')\n    if a[65]==0:\n        return a[65]+solution(stdin+' 66')\n    if a[66]==0:\n        return a[66]+solution(stdin+' 67')\n    if a[67]==0:\n        return a[67]+solution(stdin+' 68')\n    if a[68]==0:\n        return a[68]+solution"
    },
    {
        "number": 4054,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin.strip())\n    n = int(stdin.strip())\n    lst = [int(s) for s in stdin.split()]\n    lst.sort()\n    print(lst[(m-1) % (n+1)])\n"
    },
    {
        "number": 4054,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    l, r = list(map(int, stdin.split()))\n    for i in range(l, r):\n        print(i)\n    return '1'\n\n-----Code-----\n"
    },
    {
        "number": 4055,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin)\n    k = int(stdin[0])\n    d = [0 for i in range(n)]\n    \n    for i in range(1, n):\n        for j in range(i):\n            if stdin[i] == '0':\n                d[j] = 0\n            else:\n                d[j] = 1\n    for i in range(k):\n        for j in range(i):\n            if d[j] == 0:\n                d[j] = 0\n            else:\n                d[j] = 0\n    for i in range(n):\n        print(d[i])"
    },
    {
        "number": 4055,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip().split(' ')[0])\n    a = [int(i) for i in stdin.strip().split(' ')]\n    min_k = 1\n    for i in range(n):\n        # for i in range(n):\n        for k in range(i):\n            if k!= i and a[k] == 1 and a[i] == 0:\n                a[i], a[k] = a[k], a[i]\n                min_k = min(min_k, k)\n    return str(min_k)\n\nprint(solution(\"1 0 1 1 0 0 1 0 0 1 0 1 0 0 0 0 0 0\"))\nprint(solution(\"1 1 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0\"))\nprint(solution(\"1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"))\nprint(solution(\"1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"))\n"
    },
    {
        "number": 4055,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    answer = 0\n\n    for i in range(1, n + 1):\n        state = 0\n        a = [int(j) for j in input().split()]\n        for i in range(n):\n            if a[i] == 1:\n                if state == 0:\n                    state = 1\n                else:\n                    state = 0\n            else:\n                if state == 0:\n                    state = 0\n                else:\n                    state = 1\n        answer = max(answer, len(a) - 1 - state)\n    return str(answer)\n"
    },
    {
        "number": 4055,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = [list(map(int, input().strip().split())) for _ in range(n)]\n    flats = []\n    for i in range(n):\n        if a[i][0] == 0:\n            flats.append(a[i][1])\n            flats.append(a[i][2])\n            flats.append(a[i][3])\n            flats.append(a[i][4])\n            flats.append(a[i][5])\n            flats.append(a[i][6])\n        else:\n            flats.append(a[i][1])\n    flats.sort()\n    result = flats[0] + flats[-1]\n    return str(result)\n"
    },
    {
        "number": 4055,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return str(min(list(map(int,stdin.split()))))\n\ndef"
    },
    {
        "number": 4055,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n % 3 == 0 or n % 7 == 0:\n        return \"0\"\n    a = [0] * n\n    for i in range(1, n):\n        a[i] = 1 if a[i - 1] == 0 else 0\n    a[0] = 1\n    for i in range(1, n):\n        a[i] = a[i - 1] + a[i - 2]\n    for i in range(3, n):\n        a[i] = a[i - 1] + a[i - 2] + a[i - 3]\n    a[n - 1] = 1\n    answer = \"\"\n    for i in range(n):\n        if a[i]!= 0:\n            answer += str(i)\n    return answer\n"
    },
    {
        "number": 4055,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n!= 1 and n % 2!= 0:\n        n -= 1\n        k -= 1\n    if k % 2!= 0:\n        k -= 1\n    print(k)\n    return str(k)\n\n-----Test-----\n\nTestcase:\n    Input:\n    10\n    1 1 0 1 1 0 1 0 1 0\n    2\n    3\n    1 1 0 0 0\n    1 1 1 0 0\n    1 1 1 0 1\n    1 1 0 0 0\n    1 1 0 0 1\n    2\n    3\n    1 1 0 0 0\n    0\n    1 0 0 0 0\n    1 1 1 0 0\n    1 1 0 0 1\n    1 1 0 0 0\n    0\n    2\n    3\n    1 1 0 0 0\n    1 1 1 0 0\n    1 1 0 0 1\n    0\n    2\n    3\n    1 1 0 0 0\n    0\n    1 0 0 0 0\n    1 1 1 0 0\n    1 1 0 0 1\n    0\n    2\n    3\n    1 1 0 0 0\n    1 1 1 0 0\n    1 1 0 0 1\n    0\n    2\n    3\n    1 1 0 0 0\n    1 1 1 0 0\n    1 1 0 0 1\n    0\n    2\n    3\n    1 1 0 0 0\n    0\n    1 0 0 0 0\n    0\n    0\n    0\n    1\n    0\n    1\n    2\n    3\n    1 1 0 0 0\n    0\n    1 0 0 0 0\n    0\n    1 0 0 0 0\n    1 1 1 0 0\n    1 1 0 0 1\n    0\n    1 0 0 0 0\n    1 1 1 0 0\n    0\n    2\n    3\n    1 1 0 0 0\n    0\n    1 1 1 0 0\n    0\n    2\n    3\n    1 1 0 0 0\n    1 1 1 0 0\n    1 1 0 0 1\n    0\n    2\n    3\n    1 1 0 0 0\n    1 1 1 0 0\n    1 1 0 0 1\n    0\n    0\n    1\n    2\n    3\n    1 1 0 0 0\n    0\n    1 1 1 0 0\n    0\n    2\n    3\n    1 1 0 0 0\n    0\n    0\n    1\n    2\n    3\n    1 1 0 0 0\n    1 1 1 0 0\n    1 1 0 0 1\n    0\n    0\n    1\n    1\n    1\n    1\n    0\n    1\n    2\n    3\n    1 1 0 0 0\n    0\n    1 1 1 0 0\n    0\n    0\n    1\n    2\n    3\n    1 1 0 0 0\n    0\n    1 1 1 0 0\n    0\n    0\n    0\n    0\n    1\n    2\n    3\n    1 1 0 0 0\n    0\n    1 1 1 0 0\n    0\n    0\n    0\n    0\n    1\n    0\n    1\n    2\n    3\n    1 1 0 0 0\n    0\n    0\n    1\n    2\n    3\n    1 1 0 0 0\n    0\n    0\n    0\n    0\n    1\n    0\n    0\n    1\n    2\n    3\n    1 1 0 0 0\n    0\n    0\n    1\n    2\n    3\n    1 1 0 0 0\n    0\n    1 1 1 0 0\n    0\n    0\n    0\n    0\n    1\n    0\n    1\n    2\n    3\n    1 1 0 0 0\n    1\n    0\n    0\n    1\n    2\n    3\n    1 1 0 0 0\n    0\n    0\n    1\n    2\n    3\n    1 1 0 0 0\n    0\n    0\n    0\n    1\n    2\n    3\n    1 1 0 0 0\n    0\n    1\n    0\n    0\n    0\n    0\n    1\n    1\n    0\n    0\n    0\n    0\n    1\n    0\n    0\n    0\n    0\n    1\n    0\n    0\n    1\n    0\n    1\n    0\n    1\n    0\n    0\n    1\n    0\n    1\n    0\n    0\n    0\n    1\n    0\n    0\n    0\n    1\n    0\n    0\n    1\n    1\n    0\n    0\n    1\n    0\n    0\n    0\n    0\n    0\n    1\n    0\n    0\n    1\n    0\n    0\n    1\n    0\n    1\n    0\n    0\n    0\n    0\n    0\n    0\n    1\n    0\n    0\n    0\n    0\n    0\n    0\n    0\n    0\n    0\n    0\n    0\n    1\n    0\n    0\n    0\n    1\n    0\n    0\n    0\n    1\n    0\n    0\n    0\n    1\n    1\n    0\n    0\n    1\n    0\n    0\n    1\n    0\n    0\n    0\n    1\n    0\n    0\n    0\n    1\n    0\n    0\n    0\n    1\n    0\n    0\n    0\n    1\n    0\n    0\n    1\n    0\n    0\n    1\n    0\n    0\n    0\n    0\n    0\n    1\n    0\n    0\n    0\n    0\n    0\n    0\n    0\n    0\n    0\n    0\n    0\n    0\n    0\n    0\n    0\n    1\n    0\n    0\n    1\n    0\n    0\n    0\n    0\n    0\n    0\n    1\n    1\n    0\n    0\n    0\n    0\n    0\n    0\n    0\n    0\n    0\n    0\n    0\n    0\n    0\n    0\n    0\n    1\n    0\n    0\n    0\n    0\n    0\n    1\n    0\n    0\n    0\n    0\n    1\n    0\n    0\n    0\n    0\n    0\n    0\n    0\n    0\n    0\n    0\n    0\n    0\n    0\n    0\n    0\n    0\n    0\n    0\n    0\n    0\n    0\n    0\n    0\n    1\n    0\n    0\n    0\n    0\n    0\n    0\n    1\n    "
    },
    {
        "number": 4055,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    \n    if n < k:\n        return '0'\n    \n    def combination(lst, k):\n        if len(lst) == 1:\n            return lst\n        \n        res = []\n        \n        for i in range(1, k + 1):\n            for j in range(len(lst)):\n                if i == j:\n                    continue\n                if lst[j] == 0:\n                    continue\n                \n                res.append(lst[j] + lst[j + 1])\n        \n        return res\n    \n    return str(sum(combination(a, k)))\n"
    },
    {
        "number": 4055,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    k = 0\n    for i in range(1, n+1):\n        if i in [1, 2]:\n            k = k - 1\n        else:\n            k = k + 1\n    return str(k)\n\ndef"
    },
    {
        "number": 4055,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    def light(state: str):\n        light_state = 1 if state == '1' else 0\n        return light_state\n    \n    def odd_even(state: str):\n        if state == '1':\n            return 0\n        elif state == '0':\n            return 1\n        \n    def pair_of_flats(state: str):\n        if state == '1':\n            return 1\n        elif state == '0':\n            return 0\n        \n    def get_k(state: str):\n        state = state.strip('1')\n        state = state.strip('0')\n        return int(state)\n\n    \n    def count_flats(state: str):\n        state = state.strip('1')\n        state = state.strip('0')\n        state = state.replace('1', '2').replace('0', '2')\n        state = state.replace('2', '0').replace('1', '0')\n        state = state.replace('2', '0')\n        state = state.replace('2', '0')\n        state = state.replace('2', '0')\n        state = state.replace('1', '0')\n        state = state.replace('1', '0')\n        \n        state = int(state)\n        \n        return state\n\n    def build_pair(state: str):\n        if state == '1':\n            return '1', '0'\n        elif state == '0':\n            return '0', '1'\n        \n    def get_odd_even(state: str):\n        state = state.strip('1')\n        state = state.strip('0')\n        state = state.replace('1', '0').replace('0', '0')\n        state = state.replace('0', '0')\n        state = state.replace('0', '0')\n        state = state.replace('1', '0')\n        \n        state = int(state)\n        \n        return state\n    \n    def compare_state(state1: str, state2: str):\n        if state1 == '1':\n            return 1\n        elif state1 == '0':\n            return 0\n        \n    def is_odd_even(state: str):\n        state = state.strip('0').strip('1')\n        state = state.strip('0')\n        state = state.replace('0', '1').replace('1', '0')\n        \n        state = int(state)\n        \n        return state\n\n    def flat_state_pairs(state: str):\n        state = state.strip('0')\n        state = state.replace('0', '1').replace('1', '0')\n        state = state.replace('0', '1')\n        state = state.replace('0', '0')\n        state = state.replace('1', '0')\n        \n        state = int(state)\n        \n        return state\n\n    def get_pair_of_flats(state: str):\n        state = state.strip('1')\n        state = state.strip('0')\n        state = state.replace('1', '2').replace('0', '2')\n        state = state.replace('2', '0').replace('1', '0')\n        state = state.replace('2', '0')\n        state = state.replace('2', '0')\n        state = state.replace('1', '0')\n        state = state.replace('1', '0')\n        \n        state = int(state)\n        \n        return state\n\n    def get_pair_of_flats_odd_even(state: str):\n        state = state.strip('1').strip('0').strip('1')\n        state = state.strip('0').strip('1')\n        state = state.replace('0', '1').replace('0', '0')\n        state = state.replace('1', '0').replace('1', '0')\n        state = state.replace('0', '1')\n        state = state.replace('0', '0')\n        state = state.replace('0', '0')\n        state = state.replace('1', '0')\n        state = state.replace('1', '0')\n        \n        state = int(state)\n        \n        return state\n    \n    def get_pair_of_flats_odd_even_2(state: str):\n        state = state.strip('1').strip('0').strip('1')\n        state = state.strip('0').strip('1')\n        state = state.replace('0', '1').replace('0', '0')\n        state = state.replace('1', '0').replace('1', '0')\n        state = state.replace('0', '1')\n        state = state.replace('0', '0')\n        state = state.replace('0', '0')\n        state = state.replace('1', '0')\n        state = state.replace('1', '0')\n        \n        state = int(state)\n        \n        return state\n    \n    def count_flats_2(state: str):\n        state = state.strip('1').strip('0').strip('1')\n        state = state.strip('0').strip('1')\n        state = state.replace('1', '2').replace('0', '2')\n        state = state.replace('0', '2')\n        \n        state = int(state)\n        \n        return state\n\n    state_dict = {\n        '1':'1',\n        '0':'0',\n        '1':'1',\n        '0':'0',\n        '1':'1'\n    }\n    \n    # Number of pairs of flats\n    num_of_pair_of_flats = n // 2\n    # Number of odd even pairs\n    num_of_odd_even_pairs = n // 2\n    # Number of pairs of flats \n    pairs = num_of_pair_of_flats * num_of_odd_even_pairs\n    \n    # Filter out the odd even pairs\n    num_of_odd_even_pairs = n // 2\n    \n    for i in range(num_of_odd_even_pairs):\n        for j in range(num_of_odd_even_pairs):\n            if i == j:\n                continue\n            \n            if state_dict[str(pair_of_flats(state[i]))] == '1':\n                if state_dict[str(pair_of_flats(state[j]))] == '1':\n                    if is_odd_even(state[i]) == 0:\n                        if is_"
    },
    {
        "number": 4056,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(' ')[0])\n    a = stdin.split(' ')[1]\n    answer = []\n    for i in range(len(a)):\n        if a[i].isdigit():\n            answer.append(a[i])\n    return str(len(set(answer))) +'' + str(len(set(map(int, answer))))\n    \n\nprint(solution(stdin))\n"
    },
    {
        "number": 4056,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = map(int,stdin.split())\n    numbers_dict = {}\n    for i in a:\n        numbers_dict[i] = 0\n    for i in a:\n        numbers_dict[i] += 1\n    print(sum(numbers_dict.values()) - n)"
    },
    {
        "number": 4056,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = [int(i) for i in input().split()]\n    for i in range(n):\n        k = sum([s[i] % j for j in range(1, s[i]+1)])\n        if k == 0:\n            pass\n        else:\n            s[i] = k\n    return''.join(map(str, s))\n\n\"\"\"\nn = int(input())\narr = list(map(int, input().split()))\n\ndef"
    },
    {
        "number": 4056,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    a.sort()\n    for i in range(1, n):\n        a_list = []\n        for j in range(i, n):\n            if a[j] % a[i] == 0:\n                a_list.append(a[j])\n            else:\n                continue\n        if len(a_list)!= 0:\n            a_list = set(a_list)\n            for k in range(1, len(a_list)):\n                if a_list.pop() % a_list.pop() == 0:\n                    continue\n                else:\n                    break\n            a.remove(a_list.pop())\n    return str(len(a))\n\n\n---Test Cases---\n\ninput1 = 1\ninput2 = 6\ninput3 = 690\noutput1 = 1\noutput2 = 4\noutput3 = 3\n\ninput4 = 6\ninput5 = 90\noutput4 = 4\noutput5 = 3\n\nInput =\n4\n90 12 18 30 18\n\nOutput =\n3\n\nInput =\n1\n30\n290\nOutput =\n1\n\n'''"
    },
    {
        "number": 4056,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    arr = list(map(int, stdin.split()))\n    arr.sort()\n    sum = 0\n    for i in arr:\n        if sum % i == 0:\n            sum += i\n    return str(sum)\n\nPrint\n'2'\n\"\"\"\n\ndef"
    },
    {
        "number": 4056,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def get_divisors(x):\n        res = set()\n        for i in range(1, x + 1):\n            if x % i == 0:\n                res.add(i)\n        return res\n    \n    return str(len(get_divisors(sum(map(int, stdin.split())))) - 1)"
    },
    {
        "number": 4056,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n < 0:\n        return \"\"\n\n    a = list(map(int, stdin.split()))\n    d = [0] * n\n    \n    for i in range(n):\n        d[a[i]] += 1\n        for j in range(i+1, n):\n            d[j] += d[j-a[i]]\n\n    ans = []\n    for i in range(n):\n        if d[i] > 1:\n            ans.append(i)\n\n    return \"\".join(map(str, ans))"
    },
    {
        "number": 4056,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    count = 0\n    for i in range(1, n+1):\n        s = 0\n        for j in range(n):\n            if j!= i:\n                s += a[j]\n        if s!= 0:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4056,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip().split()[0])\n    a = list(map(int, stdin.strip().split()[1:]))\n    if len(a) > 0:\n        i = 0\n        while i < len(a):\n            for j in range(i, len(a)):\n                if a[j] % a[i] == 0:\n                    return str(j + 1)\n            i += 1\n    return str(n)\n"
    },
    {
        "number": 4056,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    a_1 = list(map(int, stdin.split()))\n    a_2 = a_1\n    if len(a) == 1:\n        return str(1)\n    else:\n        res = 1\n        for i in range(n):\n            for j in range(i, n):\n                if (a[i] + a[j]) % a[i] == 0:\n                    res += 1\n        if res == n:\n            return str(res)\n        else:\n            return str(1)\n"
    },
    {
        "number": 4057,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    l = len(a)\n    # print(a)\n    s = sum(a)\n    # print(s)\n    # print(n)\n    # print(l)\n    # print(a)\n    # print(s)\n    # print(l)\n    \n    a_s = 0\n    \n    # print(a[0])\n    # print(a[1])\n    # print(a[2])\n    # print(a[3])\n    # print(a[4])\n    # print(a[5])\n    \n    \n    for i in range(1, l):\n        a_s = max(a[i], a_s)\n        # print(a[i], a_s)\n    # print(a[l-1])\n    \n    \n    \n    # print(a_s)\n    # print(s-a_s)\n    \n    \n    # print(l-s)\n    \n    # print(a[l-s])\n    \n    \n    # print(l-a_s)\n    \n    # print(s-l-a_s)\n    \n    # print(l-a[l-s])\n    \n    # print(l-s-a[l-a_s])\n    \n    \n    # print(l-a[l-s])\n    \n    \n    # print(l-a[l-s])\n    \n    # print(l-s-a[l-a_s])\n    \n    \n    # print(l-s-a[l-a[l-s]])\n    \n    # print(l-s-a[l-a[l-s]], a_s)\n    # print(l-a[l-s], a[l-s])\n    # print(l-a[l-s], a[l-s] + a_s)\n    # print(a[l-s], a[l-s] + a_s)\n    \n    \n    # print(l-a[l-s] - a[l-s] + a_s)\n    \n    \n    # print(a[l-s]-a[l-s] - a[l-s] + a_s)\n    \n    # print(l-s-a[l-a_s], a_s)\n    \n    \n    # print(l-s-a[l-a[l-s]], a_s)\n    \n    # print(l-a[l-s] - a[l-s] + a_s)\n    \n    \n    \n    # print(s-l-a[l-a[l-s]]-a[l-a[l-s]]+a_s)\n    # print(s-l-a[l-a[l-s]], a[l-s])\n    # print(s-a[l-s], a[l-s] + a_s)\n    # print(s-a[l-s] + a_s)\n    \n    \n    # print(s-l-a[l-a[l-s]], a[l-s])\n    \n    \n    # print(s-l-a[l-a[l-s]], a[l-s])\n    # print(s-a[l-s], a[l-s] + a_s)\n    # print(s-a[l-s] + a_s)\n    \n    # print(s-l-a[l-a[l-s]], a[l-s])\n    \n    \n    # print(s-a[l-s]-a[l-s] + a_s)\n    # print(s-a[l-s]-a[l-s] + a_s)\n    \n    \n    # print(s-l-a[l-a[l-s]], a[l-s])\n    \n    # print(s-l-a[l-a[l-s]], a[l-s])\n    # print(s-a[l-s], a[l-s] + a_s)\n    # print(s-a[l-s] + a_s)\n    \n    # print(s-l-a[l-a[l-s]], a[l-s])\n    \n    # print(s-a[l-s]-a[l-s] + a_s)\n    # print(s-a[l-s]-a[l-s] + a_s)\n    # print(s-a[l-s]-a[l-s], a[l-s] + a_s)\n    \n    # print(s-l-a[l-a[l-s]], a[l-s])\n    \n    # print(s-l-a[l-a[l-s]], a[l-s])\n    # print(s-a[l-s], a[l-s] + a_s)\n    # print(s-a[l-s] + a_s)\n    \n    # print(s-a[l-s]-a[l-s] + a_s)\n    \n    \n    # print(s-l-a[l-a[l-s]], a[l-s])\n    # print(s-l-a[l-a[l-s]], a[l-s])\n    # print(s-a[l-s], a[l-s] + a_s)\n    # print(s-a[l-s] + a_s)\n    # print(s-a[l-s]-a[l-s] + a_s)\n    # print(s-a[l-s]-a[l-s], a[l-s] + a_s)\n    \n    \n    # print(s-l-a[l-a[l-s]], a[l-s])\n    # print(s-l-a[l-a[l-s]], a[l-s])\n    # print(s-l-a[l-s], a[l-s] + a_s)\n    # print(s-a[l-s], a[l-s] + a_s)\n    \n    # print(s-l-a[l-a[l-s]], a[l-s])\n    # print(s-l-a[l-a[l-s]], a[l-s])\n    # print(s-l-a[l-s], a[l-s] + a_s)\n    # print(s-a[l-s], a[l-s] + a_s)\n    \n    # print(s-l-a[l-a[l-s]], a[l-s])\n    # print(s-l-a[l-a[l-s]], a[l-s])\n    # print(s-l-a[l-s], a[l-s] + a_s)\n    # print(s-a[l-s], a[l-s] + a_s)\n    \n    \n    # print(s-l-a[l-a"
    },
    {
        "number": 4057,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    return ''\n\"\"\"\n\ndef"
    },
    {
        "number": 4057,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    a = sorted(a)\n    count = 0\n    for i in range(n):\n        if a[i]!= a[i-1]:\n            count += 1\n    if count >= n//2:\n        return str(1)\n    else:\n        return str(count)\n"
    },
    {
        "number": 4057,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    a.sort()\n    a = [0] + a\n    for i in range(1, n):\n        a[i] -= a[i - 1]\n    a[n] = a[n] // 2\n    for i in range(1, n + 1):\n        a[i] += a[i - 1]\n    return str(min(a))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4057,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    a.sort()\n    result = 0\n    for i in range(n):\n        result += a[i] * (i+1)\n    return str(result)\n\n-----Constraints-----\n1 <= n <= 100\n0 <= a[i] <= 100\n\nExample\nInput\n6\n1 2 4 3 3 2\n\nOutput\n2\n\nInput\n1\n100\n\nOutput\n1\ndef"
    },
    {
        "number": 4057,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def make_set(val, pocket):\n        pocket.add(val)\n        for i in range(len(pocket)):\n            if pocket.pop()!= pocket.pop():\n                pocket.add(pocket.pop())\n        pocket.add(val)\n        return pocket\n    def is_valid(pocket):\n        for val in pocket:\n            if not val in pocket:\n                return False\n        return True\n    \n    pocket = set()\n    n = int(stdin.readline().strip())\n    for _ in range(n):\n        val = int(stdin.readline().strip())\n        pocket = make_set(val, pocket)\n        pocket = make_set(val, pocket)\n    if is_valid(pocket):\n        print(len(pocket))\n        return\n    else:\n        print(len(pocket))\n        return\n        \n"
    },
    {
        "number": 4057,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return str(min(map(int, stdin.split())))\n"
    },
    {
        "number": 4057,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int,stdin.strip().split()))\n    return str(min(a))\n'''\nclass Solution:\n    def minCoins(self, a: int, n: int) -> int:\n        if n==1:\n            return a[0]\n        if n==2:\n            return a[0]+a[1]\n        if n==3:\n            return a[0]+a[1]+a[2]\n        if n==4:\n            return a[0]+a[1]+a[2]+a[3]\n        return min(a[0],a[1],a[2],a[3])\n        \n    \n"
    },
    {
        "number": 4057,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = []\n    for _ in range(n):\n        a.append(int(stdin.strip()))\n    answer = min(a)\n    return answer"
    },
    {
        "number": 4057,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(min(len(coins), 2 * len(coins)))"
    },
    {
        "number": 4058,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.replace(\"\\n\", \"\")\n    n, r = map(int, stdin.split())\n    m = r - 1\n    arr = list(map(int, stdin.split()))\n    heaters = [0] * n\n    cur = 0\n    for i in range(n):\n        if arr[i]!= 0:\n            heaters[i] = cur\n            cur += 1\n    cur = 0\n    i = n - 1\n    while i >= 0:\n        cur += 1\n        if arr[i]!= 0:\n            heaters[i] = cur\n            cur += 1\n        i -= 1\n    if len(heaters)!= r:\n        return -1\n    if len(heaters) == m:\n        return cur\n    temp = 0\n    for i in range(r):\n        if temp == 0:\n            heaters[i] -= 1\n        if temp == m:\n            heaters[i] = 0\n            temp = 0\n        temp += 1\n    return -1\n\nfor i in range(int(input())):\n    print(solution(input()))"
    },
    {
        "number": 4058,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    if a[0] > r:\n        return '-1'\n    if a[-1] > r:\n        return '-1'\n    for i in range(n-1):\n        a[i] = a[i] - r\n    a[-1] = a[-1] - r\n    for i in range(n-2, -1, -1):\n        a[i] = a[i] - r\n    for i in range(n):\n        a[i] = a[i] - r\n    return str(min(a))"
    },
    {
        "number": 4058,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n,r=map(int,stdin.split())\n    heaters=[int(stdin.split()[i]) for i in range(n)]\n    return str(min(heaters)) if not r % 2 else str(min(heaters[-r//2:])+1)\n\ndef"
    },
    {
        "number": 4058,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin.strip().split()[1])\n    n = int(stdin.strip().split()[0])\n    a = list(map(int, stdin.strip().split()[2:]))\n    # print(a)\n    # print(r)\n    if n >= r:\n        print(n)\n        print(r)\n        print(n - r)\n    else:\n        print(r)\n        for i in range(n - r):\n            a[i] = 1\n            a[n - r + i] = 0\n        print(a)\n        ans = n - r\n        for i in range(r):\n            ans = min(ans, min(a))\n            a[i] = 0\n        # print(ans)\n        return str(ans)\n"
    },
    {
        "number": 4058,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    arr = []\n    for _ in range(n):\n        arr.append(int(stdin.split()[0]))\n    for _ in range(r):\n        arr.append(int(stdin.split()[1]))\n    arr.sort()\n    if arr[-1] == 0:\n        return -1\n    if arr[0] == 0:\n        return -1\n    return 3 if arr[-1] < arr[0] else 2\n"
    },
    {
        "number": 4058,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin.strip())\n    if n == 1:\n        print(0)\n        return\n    \n    arr = list(map(int,stdin.strip().split()))\n    \n    heaters = [arr[0]]\n    count = 1\n    for i in range(1,n):\n        if arr[i] == 0:\n            heaters.append(count)\n        else:\n            heaters.append(heaters[i-1])\n        count = 1\n        for j in range(i,n):\n            if arr[j] == 0:\n                count += 1\n            else:\n                count += (count + 1)\n    \n    for i in range(n):\n        heaters[i] -= 1\n    \n    heaters_count = 0\n    for i in range(n-1, -1, -1):\n        if arr[i] == 0:\n            heaters_count += 1\n        else:\n            heaters_count += (heaters_count + 1)\n        heaters_count -= 1\n    \n    \n    answer = 0\n    if heats_count == 0:\n        answer = 1\n    elif (heaters_count % 2 == 0) and (heaters_count > 1):\n        answer = 0\n    else:\n        answer = -1\n        \n    return answer\n\n\n\ndef"
    },
    {
        "number": 4058,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    r = int(stdin.strip().split()[-1])\n    a = list(map(int, stdin.strip().split()[:-1]))\n\n    for i in range(n-1, -1, -1):\n        if a[i]!= 0:\n            a[i] = a[i] - 1\n        else:\n            a[i] = r\n\n    answer = 0\n    for i in range(n):\n        answer = answer + a[i]\n    return str(answer)\n\n\nimport sys\n\ndef"
    },
    {
        "number": 4058,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, r = list(map(int, stdin.split()))\n    A = [list(map(int, input().split())) for _ in range(n)]\n    B = []\n    for i in range(n):\n        B.append([0] * len(A[i]))\n    for i in range(n):\n        for j in range(len(A[i])):\n            B[i][j] = A[i][j]\n    answer = 0\n    for i in range(n):\n        a, b = A[i]\n        for j in range(b):\n            A[i][j] -= 1\n            if A[i][j] == 0:\n                A[i][j] = a\n                answer += 1\n            for k in range(i + 1, n):\n                A[k][j] += 1\n                A[k][j] -= 1\n                if A[k][j] == 0:\n                    A[k][j] = a\n                    answer += 1\n            A[i][j] += 1\n            for k in range(i + 1, n):\n                A[k][j] -= 1\n                A[k][j] += 1\n                A[k][j] -= 1\n                if A[k][j] == 0:\n                    A[k][j] = a\n                    answer += 1\n    return str(answer)\n"
    },
    {
        "number": 4058,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    a_1, a_2 = map(int, stdin.split())\n    heaters = sorted(list(set([a_1, a_2])))\n    if (heaters.count(heaters[0]) <= 1) or (heaters.count(heaters[-1]) <= 1):\n        return -1\n    if n == 0:\n        return sum([1] + [r for _ in range(len(heaters) - 1)])\n    return solution(stdin)\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4058,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def solve(n, r, a):\n        return min(a, n - a)\n\n    n, r = map(int, stdin.split())\n    a = [0] + list(map(int, stdin.split()))\n    answer = -1\n    for i in range(len(a)):\n        answer = max(answer, solve(n, r, a[i]) + solve(n, r, a[i] + r))\n    return str(answer)\n\nprint(solution(6,2,3))\n\ndef"
    },
    {
        "number": 4059,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return (2*sum(map(lambda x: int(x)**2, input()))%int(10**9+1))\n    \n\ndef"
    },
    {
        "number": 4059,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n  a = [int(i) for i in stdin.split()]\n  answer = 0\n  for i in a:\n    answer += (i*(i+1)) // 2\n  return str(answer)\n\n\"\"\"\ndef"
    },
    {
        "number": 4059,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n  n = int(stdin)\n  s = str(n)\n  s.replace(\"0\", \"\")\n  a = list(map(int, s))\n  if len(a) == 3:\n    for i in range(0, 3):\n      if a[i]*a[i+1]*a[i+2] < n:\n        a[i] *= 2\n    for j in range(3):\n      if a[j]!= 1:\n        return str(a[j]) + \" \"\n    return \"0 \"\n  else:\n    return \"0 \"\n\nn = int(input())\nprint(solution(input()))"
    },
    {
        "number": 4059,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    lst = [tuple(map(int, input().split())) for _ in range(n)]\n    \n    res = 0\n    \n    for i in range(n):\n        for j in range(n):\n            for k in range(n):\n                if i!= j or i!= k or j!= k:\n                    continue\n                else:\n                    for p in range(1, n-1):\n                        if i == p or j == p or k == p:\n                            continue\n                        else:\n                            if lst[i][p] * lst[j][p] * lst[k][p] == n:\n                                res += 1\n    \n    return str(res)\n\n\"\"\"\nInput:\n2\n3\n6\n\nOutput:\n3\n\nInput:\n4\n\nOutput:\n1\n\nInput:\n1\n1\n\nOutput:\n0\n\"\"\"\ndef"
    },
    {
        "number": 4059,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    answer = 0\n    for i in range(n):\n        answer += (i + 1) * (n - i) * 3\n    return str(answer)\n\n\"\"\"\nclass Solution:\n    def solution(self, n: int) -> str:\n        \n        return str(n * (n + 1) // 2)\n"
    },
    {
        "number": 4059,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n  N = int(stdin)\n  count = 0\n  for i in range(1,N+1):\n    for j in range(i+1):\n      for k in range(j+1):\n        if (i * j * k) % 10 == 0:\n          count += 1\n  return str(count)\n\ndef"
    },
    {
        "number": 4059,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\n---Constraints---\n-   1 \\leq N \\leq 10^6\n-   0 \\leq N \\leq 10^6\n\n---Time---\nO(N)\n\n---Memory---\nO(N)\n\n---Example 1---\nInput:\nN = 3\nA = 2\nB = 3\nC = 4\n\nOutput:\n4\n\n---Example 2---\nInput:\nN = 3\nA = 1\nB = 2\nC = 1\n\nOutput:\n2\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4059,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a, b, c = [int(i) for i in stdin.split(' ')]\n    f = lambda x: (x * (x + 1)) // 2\n    answer = 0\n    for i in range(n):\n        answer += f(a * b + c)\n    return str(answer)\n\nExplanation\n\nThere are 3 tuples of integers that satisfy A \\times B + C = 3: (1, 1, 2), (1, 2, 1), (2, 1, 1).\n\"\"\"\n\ndef"
    },
    {
        "number": 4059,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    numbers = map(int, stdin.split(' '))\n    result = sum(numbers)\n    return str(result)\n\n\n---------------TEST CASES----------------\ninput = \"4\"\noutput = \"3\"\n"
    },
    {
        "number": 4059,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N <= 0:\n        return ''\n    A, B, C = map(int, input().split())\n    A *= B\n    A *= C\n    print(A % N)\n"
    },
    {
        "number": 4060,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    str = stdin.strip()\n    st = list(str)\n    res = 0\n    pos = 0\n    while len(st)!= 0:\n        while pos < len(st):\n            if st[pos] == '(':\n                res += 1\n                pos += 1\n            elif st[pos] == ')':\n                res -= 1\n                pos += 1\n            elif st[pos]!= '(':\n                res += 1\n                pos += 1\n            else:\n                pos += 1\n    print(res)\n"
    },
    {
        "number": 4060,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    bracket_sequence = [i for i in s if i == '(' or i == ')']\n    counter = 0\n    for bracket in bracket_sequence:\n        if bracket == '(':\n            counter += 1\n        else:\n            counter -= 1\n        if counter < 0:\n            return 0\n    return counter + 1"
    },
    {
        "number": 4060,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return 0\n    \n    def change(start, end):\n        return str(start) + '(' + str(end + 1) + ')'\n\n    def is_valid(s):\n        if len(s)!= n:\n            return False\n        for i in range(n):\n            if s[i] == '(' or s[i] == ')':\n                if i!= 0 and s[i - 1] == '(':\n                    return False\n                if s[i] == ')':\n                    if i + 1 == n:\n                        return False\n        return True\n\n    positions = 0\n    for i in range(n):\n        if is_valid(change(i, i)):\n            positions += 1\n\n    return positions"
    },
    {
        "number": 4060,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    brackets = {'(':1, ')':1}\n    n = len(s)\n    answer = 0\n    for index, char in enumerate(s):\n        if char in ('(', ')', ')', ']', ']', ']', ')'):\n            if brackets[char] in ('+', '-'):\n                answer += 2**index\n            else:\n                answer -= 2**index\n    return answer\n\n-----Constraints-----\n1 <= n <= 10^6\ns[i] is '(' or ')' or an opening or closing bracket.\n\n-----Time Limit Exceeded\u3011\nSubmitted on 27 Aug. 17 PM 2020.\nUsing O(n) extra space, in the worst case, we need to read the input string twice to obtain the correct expression and convert each to a '()' and ')'\n"
    },
    {
        "number": 4060,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    st = list(stdin)\n    idx = -1\n    for i in range(n):\n        idx += 1\n        if st[i] == '(':\n            st[idx] = ')'\n        else:\n            st[idx] = '('\n    return ''.join(st)\n'''\nclass Solution:\n    def bracket_seq_to_ratio(self, s: str) -> str:\n        def count_brackets(s, start):\n            cnt = 0\n            for i in range(start, len(s)):\n                if s[i] == ')':\n                    cnt += 1\n                elif s[i] == '(':\n                    cnt -= 1\n            return cnt\n        \n        result = []\n        bracket_seq = []\n        i = 0\n        while i < len(s):\n            if s[i] == ')':\n                result.append(bracket_seq[-1])\n                bracket_seq.pop()\n            elif s[i] == '(':\n                bracket_seq.append(s[i])\n            else:\n                bracket_seq.append(s[i])\n            i += 1\n        \n        bracket_seq_len = len(bracket_seq)\n        \n        result.append(None)\n        \n        i = 0\n        bracket_seq_len -= 1\n        while i < bracket_seq_len:\n            if bracket_seq[i] == ')':\n                bracket_seq.pop()\n                i -= 1\n            elif bracket_seq[i] == '(':\n                bracket_seq.append(bracket_seq[i])\n                i -= 1\n                \n                bracket_seq_len -= 1\n            else:\n                bracket_seq.append(s[i])\n                i += 1\n        \n        #print(result, bracket_seq)\n        \n        for i in range(len(result)):\n            if result[i] is None:\n                continue\n            elif result[i] == '(':\n                result[i] = bracket_seq[-1]\n                bracket_seq_len -= 1\n                \n            elif result[i] == ')':\n                result[i] = bracket_seq[-1]\n                bracket_seq_len -= 1\n                \n            else:\n                result[i] = bracket_seq[-1]\n        \n        return ''.join(result)\n'''\n"
    },
    {
        "number": 4060,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split(\"))\")\n    return solution_1(s)\n\ndef"
    },
    {
        "number": 4060,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    s = list(stdin.strip())\n    brackets = []\n    pos = 1\n    for i in range(n-1):\n        if s[i] == '(' and s[i+1] == ')':\n            brackets.append(pos)\n            pos += 1\n        elif s[i] == '(':\n            pos += 1\n        else:\n            pos -= 1\n    for bracket in brackets:\n        s[bracket] = ')'\n    return ''.join(s)\n\nprint(solution(\"(()))((()\"))\n\nprint(\"the answer:\", solution(\"((()))((()())))\")\n"
    },
    {
        "number": 4060,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    bracket_sequence = [s for s in stdin]\n    right_bracket_sequence = \"\"\n    left_bracket_sequence = \"\"\n    for i in range(n):\n        if bracket_sequence[i] == '(':\n            right_bracket_sequence += bracket_sequence[i]\n        elif bracket_sequence[i] == ')':\n            left_bracket_sequence += bracket_sequence[i]\n        else:\n            if right_bracket_sequence == left_bracket_sequence:\n                right_bracket_sequence = \"\"\n            else:\n                right_bracket_sequence += bracket_sequence[i]\n    if right_bracket_sequence!= '':\n        return len(right_bracket_sequence)\n    else:\n        return -1\n\nprint(solution(input()))\n"
    },
    {
        "number": 4060,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    left, right = 0, 0\n    s = []\n    ans = 0\n    for i in range(n):\n        if ')' in stdin[i]:\n            if left == n:\n                ans += 1\n            else:\n                right += 1\n        else:\n            left += 1\n    return left + right + ans\n"
    },
    {
        "number": 4060,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin)\n    bracket = [list(str(i)) for i in range(1,n+1)]\n    i = 0\n    \n    while i < n:\n        while bracket[i][0] == '(':\n            \n            if bracket[i][-1] == ')':\n                \n                j = 0\n                while bracket[j][0] == '(':\n                    \n                    if bracket[j][-1] == ')':\n                        break\n                    else:\n                        \n                        j += 1\n                \n                while bracket[i][-1] == ')':\n                    \n                    if bracket[i][0] == '(':\n                        break\n                    else:\n                        \n                        i = i + 1\n                \n            if bracket[i][-1] == '(':\n                \n                j = i + 1\n                \n                while bracket[j][0] == '(':\n                    j += 1\n                \n                i = i + j - 1\n                \n            bracket[i][-1] = bracket[i][-1] + bracket[i][0]\n            i = i + 1\n                \n        bracket[i][-1] = bracket[i][-1] + bracket[i][-1]\n        \n        if bracket[i][0] == '(':\n            \n            i = i + 1\n            \n        else:\n            \n            i += 1\n            \n    if bracket[0][-1] == '(':\n        \n        i = i + 1\n        \n    else:\n        \n        i = i + 2\n    \n    while bracket[i][0] == ')':\n        \n        i += 1\n        \n    i = i + 1\n        \n    while bracket[i][0] == ')':\n        \n        i += 1\n        \n    i = i + 1\n    \n    while bracket[i][0] == '(':\n        \n        i += 1\n        \n    i = i + 1\n    \n    return i\n"
    },
    {
        "number": 4061,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    max_len = 0\n    for l, s in enumerate(stdin):\n        if s in s[:l+1]:\n            temp = s[l+1:]\n            if len(temp) > len(s):\n                temp = s[l+1:]\n            max_len = max(len(temp), max_len)\n    return max_len\n"
    },
    {
        "number": 4061,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s,t=input().split()\n    s=sorted(s)\n    print(len(s)-(len(t)//2))\n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 4061,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split(\"\\n\")\n    t = t.replace(\"\\n\", \"\")\n    s = s.replace(\"\\n\", \"\")\n    t = t.split()\n    if t == s:\n        return len(t)\n    elif t[0] not in s and t[0] in s[1:]:\n        t = t.replace(t[0], \"\", 1)\n    return len(t)\n\n--------\n\n-------\nsolution = Solution()\ns = \"test\"\nt = \"tst\"\nprint(solution(s, t))"
    },
    {
        "number": 4061,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    strings = stdin.split()\n    \n    # getting minimum string length (assuming all strings are all of same length)\n    min_length = min(map(len, strings))\n    \n    # removing the minimum length substring\n    for i in range(min_length):\n        strings[i] = strings[i][:min_length-i]\n    \n    \n    # removing the shortest length substring\n    for i in range(len(strings)-1):\n        strings[i+1] = strings[i][min_length:]\n        \n        \n    # removing the second smallest length substring\n    for i in range(len(strings)):\n        if len(strings[i])<len(strings[i-1]):\n            strings[i] = strings[i][:len(strings[i-1])]\n            \n    \n    # removing the last smallest length substring\n    for i in range(len(strings)):\n        if len(strings[i])>len(strings[i-1]):\n            strings[i] = strings[i][:len(strings[i-1])]\n            \n        \n    # sorting all the strings\n    strings.sort()\n    \n    # removing the smallest string of all the strings\n    for i in range(len(strings)):\n        strings[i] = strings[i][len(strings[i]):]\n        \n    \n    # removing all the non-standard strings\n    for i in range(len(strings)):\n        strings[i] = strings[i][:len(strings[i])]\n        \n    \n    # getting the longest substring\n    return max(strings)\n        \n        \n"
    },
    {
        "number": 4061,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = list(stdin.split())\n    t = list(stdin.split())\n    m = min(len(s), len(t))\n    return max(s[:m]) + max(s[m+1:])\n"
    },
    {
        "number": 4061,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n    s = list(stdin)\n    t = list(stdin)\n    \n    def remove_substring(s, t, k):\n        for i in range(len(t) - k + 1):\n            t[i:i + k] = t[i:i + k][::-1]\n        return ''.join(t)\n    \n    \n    def recur(s, t, l, r):\n        if l == r:\n            return 0\n        \n        # Check if k is valid\n        if len(t[l:r + 1]) == 0:\n            return 1\n        \n        k = 2\n        # print('l: ', l,'r: ', r)\n        \n        while k < r - l + 1:\n            # print('k: ', k,'l: ', l,'r: ', r)\n            # print(remove_substring(s, t, k))\n            if remove_substring(s, t, k) == t[l:r + 1]:\n                # print('recur: ', remove_substring(s, t, k))\n                # print('recur: ', t[l:r + 1])\n                # print('recur: ', remove_substring(s, t, k, r))\n                # print('recur: ', t[l:r + 1])\n                # print(remove_substring(s, t, k, r))\n                # print('recur: ', t[l:r + 1])\n                \n                if remove_substring(s, t, k) < remove_substring(s, t, k - 1):\n                    # print('l: ', l,'r: ', r,'k: ', k)\n                    k += 1\n                else:\n                    # print('l: ', l,'r: ', r,'k: ', k)\n                    k = recur(s, t, l, r)\n            else:\n                k += 1\n        # print('recur: ', remove_substring(s, t, k))\n        # print('recur: ', remove_substring(s, t, k, r))\n        return k\n        \n    # k = recur(s, t, 0, len(t) - 1)\n    return recur(s, t, 0, len(t) - 1)\n"
    },
    {
        "number": 4061,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    s = list(stdin.strip())\n    max_len = 0\n    for i in range(len(s)):\n        for j in range(i,len(s)):\n            if s[j] == s[i]:\n                if j-i == 1:\n                    max_len += 1\n                else:\n                    max_len = 0\n                    break\n            elif s[j] == s[i]:\n                if i-j == 1:\n                    max_len += 1\n                else:\n                    max_len = 0\n                    break\n    if max_len == 0:\n        return 0\n    else:\n        return max_len\n        \n"
    },
    {
        "number": 4061,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    s = list(s)\n    l = len(s)\n    #s.pop(0)\n    #s.pop()\n    #s.pop()\n    #print(l)\n    m = int(l / 2)\n    l = l % 2\n    while m!= 0:\n        #print(m)\n        if l % 2 == 0:\n            s.insert(m, s.pop(m))\n            l -= 1\n            m -= 1\n        else:\n            s.insert(m, s.pop(m+1))\n            m -= 1\n        #print(s)\n    return ''.join(s)\n\n\ndef"
    },
    {
        "number": 4061,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    s, t = map(str, stdin.split())\n    \n    s_len = len(s)\n    t_len = len(t)\n    \n    # s_len can be 0 because the length of $s$ is 0\n    if s_len == 0:\n        return t_len\n    \n    # t_len can be 0 because the length of $t$ is 0\n    if t_len == 0:\n        return s_len\n    \n    # remove the second to last character\n    tmp = s[:-1]\n    \n    if t_len > 0 and t[-1] == tmp:\n        return t_len - 1\n    else:\n        return t_len\n"
    },
    {
        "number": 4061,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = list(stdin)\n    t = list(stdin)\n    m = len(s)\n    n = len(t)\n    # if s[-1]!= t[-1]:\n    #     return 0\n    i = 0\n    while i < n - 1:\n        if s[i]!= t[i]:\n            break\n        i += 1\n    # print(i)\n    j = 0\n    while j < n - 1:\n        if s[j] == t[j]:\n            j += 1\n            continue\n        else:\n            break\n    # print(j)\n    k = 0\n    while k < n - 1:\n        if s[k] == t[k]:\n            k += 1\n            continue\n        else:\n            break\n    # print(k)\n    # print(j, k)\n    # print(s[i:j+1], s[j:k+1])\n    # print(s[i+1:j+1])\n    # print(s[j+1:k+1])\n    l = i\n    r = j\n    answer = 0\n    while l < len(s):\n        # print(l, r)\n        if s[l] == t[l]:\n            answer = max(answer, r - l + 1)\n            # print(answer)\n            r -= 1\n            l += 1\n            continue\n        else:\n            # print(\"L\")\n            r += 1\n            # print(r)\n            # print(s[l:r + 1])\n            # print(\"R\")\n            l += 1\n            continue\n    # print(answer)\n    return answer\n\n\n\ndef"
    },
    {
        "number": 4062,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    maxx = a[0]*a[1]*a[2]\n    for i in range(len(a)):\n        for j in range(len(a)):\n            for k in range(len(a)):\n                for l in range(len(a)):\n                    if j<l:\n                        if i<k:\n                            maxx = max(maxx, a[i]*a[k]*a[l])\n    return str(maxx)"
    },
    {
        "number": 4062,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    return str(a * b * c * d)\n"
    },
    {
        "number": 4062,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    if x * y > 10 ** 9:\n        return str(int(x * y // 10 ** 9))\n    return str(int(x * y // 10 ** 9))\n\ndef"
    },
    {
        "number": 4062,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    x = n % 10\n    y = n // 10\n    return '{} {}'.format(x, y)\n"
    },
    {
        "number": 4062,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    x = map(int, stdin.split())\n    y = map(int, stdin.split())\n\n    a = b = c = d = 0\n    for x_, y_ in zip(x, y):\n        a += x_ * y_\n        b += x_ * x_\n        c += y_ * y_\n        d += x_ * x_ * y_\n\n    x_ = min(x)\n    y_ = min(y)\n    result = max(a // x_, b // y_)\n    print(result)"
    },
    {
        "number": 4062,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    x, y = map(int, input().split())\n    answer = 1\n    if a == 1 and b == 1 and c == 1 and d == 1:\n        answer = y\n    elif x < y:\n        answer = x\n    elif x > y:\n        answer = y\n    return str(answer)"
    },
    {
        "number": 4062,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    if (a*b == c*d):\n        return str(a*b)\n    elif (a*b == c):\n        return str(a*c)\n    elif (a*b == c*d):\n        return str(a*d)\n    else:\n        return 'Error'\n\nprint(solution(stdin))"
    },
    {
        "number": 4062,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a,b,c,d = map(int,stdin.split())\n    if a>b>c>d:\n        return str(a*b*c*d)\n    elif a>b>d:\n        return str(a*d)\n    elif a>c>d:\n        return str(b*d)\n    else:\n        return str(c*d)\n\n'''\n\ndef"
    },
    {
        "number": 4062,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin[1])\n    y = int(stdin[2])\n    n = y - x + 1\n    for i in range(x, n + 1):\n        if y % i == 0 and n % i == 0:\n            print(i)\n            return i\n    print(-1)\n"
    },
    {
        "number": 4062,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    a = int(stdin[1])\n    b = int(stdin[2])\n    c = int(stdin[3])\n    d = int(stdin[4])\n\n    x = a * b * c\n    if x >= d:\n        x = x / b\n    else:\n        x = x / a\n\n    y = a * c\n    if x > y:\n        y = x / b\n    else:\n        y = x / a\n    return str(int(x * y))\n\ndef"
    },
    {
        "number": 4063,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, d_1, d_2, d_3, d_4 = map(int, stdin.split())\n    for i in range(1, N+1):\n        if d_1 + d_2 <= d_4:\n            print(d_1)\n            return str(d_1)\n        elif d_1 + d_3 <= d_4:\n            print(d_1)\n            return str(d_1)\n        else:\n            print(d_1)\n            return str(d_1)\n\ndef"
    },
    {
        "number": 4063,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    N_problems = 2 ** N\n    d_i = 2 ** N - 1\n    d_2 = 2 ** (N // 2)\n    for i in range(1, N_problems + 1):\n        d_2 = 2 ** i\n        d_1 = d_2\n        for j in range(1, N):\n            d_2 = d_2 ** 2\n            d_1 = d_1 ** 2\n            for k in range(1, N):\n                d_2 = d_2 ** 2\n                d_1 = d_1 ** 2\n                for l in range(1, N):\n                    d_2 = d_2 ** 2\n                    d_1 = d_1 ** 2\n                    for m in range(1, N):\n                        d_2 = d_2 ** 2\n                        d_1 = d_1 ** 2\n                        for n in range(1, N):\n                            d_2 = d_2 ** 2\n                            d_1 = d_1 ** 2\n                            for o in range(1, N):\n                                d_2 = d_2 ** 2\n                                d_1 = d_1 ** 2\n                                for p in range(1, N):\n                                    d_2 = d_2 ** 2\n                                    d_1 = d_1 ** 2\n                                    for q in range(1, N):\n                                        d_2 = d_2 ** 2\n                                        d_1 = d_1 ** 2\n                                        for r in range(1, N):\n                                            d_2 = d_2 ** 2\n                                            d_1 = d_1 ** 2\n                                            for s in range(1, N):\n                                                d_2 = d_2 ** 2\n                                                d_1 = d_1 ** 2\n                                                for t in range(1, N):\n                                                    d_2 = d_2 ** 2\n                                                    d_1 = d_1 ** 2\n                                                    for u in range(1, N):\n                                                        d_2 = d_2 ** 2\n                                                        d_1 = d_1 ** 2\n                                                        for v in range(1, N):\n                                                            d_2 = d_2 ** 2\n                                                            d_1 = d_1 ** 2\n                                                            for w in range(1, N):\n                                                                d_2 = d_2 ** 2\n                                                                d_1 = d_1 ** 2\n                                                                for x in range(1, N):\n                                                                    d_2 = d_2 ** 2\n                                                                    d_1 = d_1 ** 2\n                                                                    for y in range(1, N):\n                                                                        d_2 = d_2 ** 2\n                                                                        d_1 = d_1 ** 2\n                                                                        for z in range(1, N):\n                                                                            d_2 = d_2 ** 2\n                                                                            d_1 = d_1 ** 2\n                                                                            for l in range(1, N):\n                                                                                d_2 = d_2 ** 2\n                                                                                d_1 = d_1 ** 2\n                                                                                for m in range(1, N):\n                                                                                    d_2 = d_2 ** 2\n                                                                                    d_1 = d_1 ** 2\n                                                                                    for n in range(1, N):\n                                                                                        d_2 = d_2 ** 2\n                                                                                        d_1 = d_1 ** 2\n                                                                                        for o in range(1, N):\n                                                                                            d_2 = d_2 ** 2\n                                                                                            d_1 = d_1 ** 2\n                                                                                            for p in range(1, N):\n                                                                                             d_2 = d_2 ** 2\n                                                                                             d_1 = d_1 ** 2\n                                                                                             for q in range(1, N):\n                                                                                             d_2 = d_2 ** 2\n                                                                                             d_1 = d_1 ** 2\n                                                                                             for r in range(1, N):\n                                                                                             d_2 = d_2 ** 2\n                                                                                             d_1 = d_1 ** 2\n                                                                                             for s in range(1, N):\n                                                                                             d_2 = d_2 ** 2\n                                                                                             d_1 = d_1 ** 2\n                                                                                             for t in range(1, N):\n                                                                                             d_2 = d_2 ** 2\n                                                                                             d_1 = d_1 ** 2\n                                                                                             for u in range(1, N):\n                                                                                             d_2 = d_2 ** 2\n                                                                                             d_1 = d_1 ** 2\n                                                                                             for v in range(1, N):\n                                                                                             d_2 = d_2 ** 2\n                                                                                             d_1 = d_1 ** 2\n                                                                                             for w in range(1, N):\n                                                                                             d_2 = d_2 ** 2\n                                                                                             d_1 = d_1 ** 2\n                                                                                             for x in range(1, N):\n                                                                                             d_2 = d_2 ** 2\n                                                                                             d_1 = d_1 ** 2\n                                                                                             for y in range(1, N):\n                                                                                             d_2 = d_2 ** 2\n                                                                                             d_1 = d_1 ** 2\n                                                                                             for z in range(1, N):\n                                                                                             d_2 = d_2 ** 2\n                                                                                             d_1 = d_1 ** 2\n                                                                                             for l in range(1, N):\n                                                                                             d_2 = d_2 ** 2\n                                                                                             d_1 = d_1 ** 2\n                                                                                             for m in range(1, N):\n                                                                                             d_2 = d_2 ** 2\n                                                                                             d_1 = d_1 ** 2\n                                                                                             for n in range(1, N):\n                                                                                             d_2 = d_2 ** 2\n                                                                                             d_1 = d_1 ** 2\n                                                                                             for o in range(1, N):\n                                                                                             d_2 = d_2 ** 2\n                                                                                             d_1 = d_1 ** 2\n                                                                                             for p in range(1, N):\n                                                                                             d_2 = d_2 ** 2\n                                                                                             d_1 = d_1 ** 2\n                                                                                             for q in range(1, N):\n                                                                                            "
    },
    {
        "number": 4063,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    d = int(stdin.strip())\n    for k in range(1,n+1):\n        for i in range(1,n+1):\n            for j in range(i,n+1):\n                if i < j:\n                    for k in range(1,d+1):\n                        if k < i:\n                            if i+k <= j:\n                                for l in range(i,j+1):\n                                    if l <= i+k:\n                                        print(k)\n                                        print(l)\n    return \"\""
    },
    {
        "number": 4063,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Taking input as string\n    N = int(stdin)\n    # Creating an array to store the first K numbers from the input.\n    # This array contains the numbers from 1 to N.\n    # In other words, this array is a 2D array with n rows and m columns.\n    # The i-th entry stores the solution for the i-th integer\n    # If the i-th number is a solution, the column at the i-th row\n    # would be 1. Otherwise, the column at the i-th row would be 0\n    # Which means that the number is not a solution.\n    Ks = [0] * N\n    # Declare array of 2D arrays for the following Ks.\n    # This array contains the numbers from 1 to N.\n    # In other words, this array is a 2D array with n rows and m columns.\n    # The i-th entry stores the solution for the i-th integer\n    # If the i-th number is a solution, the column at the i-th row\n    # would be 1. Otherwise, the column at the i-th row would be 0\n    # Which means that the number is not a solution.\n    ABCs = [[0] * N for _ in range(N)]\n    # Declare a function that determines whether a given number is a solution.\n    def check(n: int, d: int) -> bool:\n        # Return True if d divides n\n        return d % n == 0\n    # Fill the first Ks array with the values from 1 to N.\n    for i in range(N):\n        Ks[i] = int(stdin[i])\n    # Fill the ABCs array with the values from 1 to N.\n    for i in range(N):\n        ABCs[i] = list(map(int, stdin[i+1:i+N+1]))\n    # Checking if the input is a solution for all Ks.\n    # If so, return all the possibilities\n    # For all Ks, the same as for ABCs.\n    # If not, return none.\n    return list(map(check, Ks, ABCs))"
    },
    {
        "number": 4063,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, d_list = map(int, stdin.split())\n    difficulty_list = []\n    for _ in range(N):\n        difficulty_list.append(list(map(int, input().split())))\n    # print(difficulty_list)\n    # print(N, d_list)\n    # print(difficulty_list[0])\n    # print(difficulty_list[1])\n    difficulty_list.sort(key=lambda x: (x[0], x[1]))\n    print(len(difficulty_list))\n    k_list = []\n    for _ in range(N):\n        k_list.append(list(map(int, input().split())))\n    # print(k_list)\n    # print(k_list[0])\n    # print(k_list[1])\n    k_list.sort(key=lambda x: (x[0], x[1]))\n    # print(k_list[0])\n    # print(k_list[1])\n    # print(k_list[2])\n    # print(k_list[3])\n    k_list.sort(key=lambda x: (x[0], x[1]))\n    # print(k_list[0])\n    # print(k_list[1])\n    k_list.sort(key=lambda x: (x[0], x[1]))\n    # print(k_list[0])\n    # print(k_list[1])\n    k_list.sort(key=lambda x: (x[0], x[1]))\n    # print(k_list[0])\n    # print(k_list[1])\n    # print(k_list[2])\n    # print(k_list[3])\n    k_list.sort(key=lambda x: (x[0], x[1]))\n    # print(k_list[0])\n    # print(k_list[1])\n    k_list.sort(key=lambda x: (x[0], x[1]))\n    # print(k_list[0])\n    # print(k_list[1])\n    k_list.sort(key=lambda x: (x[0], x[1]))\n    # print(k_list[0])\n    # print(k_list[1])\n    k_list.sort(key=lambda x: (x[0], x[1]))\n    # print(k_list[0])\n    # print(k_list[1])\n    k_list.sort(key=lambda x: (x[0], x[1]))\n    # print(k_list[0])\n    # print(k_list[1])\n    k_list.sort(key=lambda x: (x[0], x[1]))\n    # print(k_list[0])\n    # print(k_list[1])\n    k_list.sort(key=lambda x: (x[0], x[1]))\n    # print(k_list[0])\n    # print(k_list[1])\n    k_list.sort(key=lambda x: (x[0], x[1]))\n    # print(k_list[0])\n    # print(k_list[1])\n    k_list.sort(key=lambda x: (x[0], x[1]))\n    # print(k_list[0])\n    # print(k_list[1])\n    k_list.sort(key=lambda x: (x[0], x[1]))\n    # print(k_list[0])\n    # print(k_list[1])\n    k_list.sort(key=lambda x: (x[0], x[1]))\n    # print(k_list[0])\n    # print(k_list[1])\n    k_list.sort(key=lambda x: (x[0], x[1]))\n    # print(k_list[0])\n    # print(k_list[1])\n    k_list.sort(key=lambda x: (x[0], x[1]))\n    # print(k_list[0])\n    # print(k_list[1])\n    k_list.sort(key=lambda x: (x[0], x[1]))\n    # print(k_list[0])\n    # print(k_list[1])\n    k_list.sort(key=lambda x: (x[0], x[1]))\n    # print(k_list[0])\n    # print(k_list[1])\n    k_list.sort(key=lambda x: (x[0], x[1]))\n    # print(k_list[0])\n    # print(k_list[1])\n    k_list.sort(key=lambda x: (x[0], x[1]))\n    # print(k_list[0])\n    # print(k_list[1])\n    k_list.sort(key=lambda x: (x[0], x[1]))\n    # print(k_list[0])\n    # print(k_list[1])\n    k_list.sort(key=lambda x: (x[0], x[1]))\n    # print(k_list[0])\n    # print(k_list[1])\n    k_list.sort(key=lambda x: (x[0], x[1]))\n    # print(k_list[0])\n    # print(k_list[1])\n    k_list.sort(key=lambda x: (x[0], x[1]))\n    # print(k_list[0])\n    # print(k_list[1])\n    k_list.sort(key=lambda x: (x[0], x[1]))\n    # print(k_list[0])\n    # print(k_list[1])\n    k_list.sort(key=lambda x: (x[0], x[1]))\n    # print(k_list[0])\n    # print(k_list[1])\n    k_list.sort(key=lambda x: (x[0], x[1]))\n    # print(k_list[0])\n    # print(k_list[1])\n    k_list.sort(key=lambda x: (x[0], x[1]))\n    # print(k_list[0])\n    # print(k_list[1])\n    k_list.sort(key=lambda x: (x[0], x[1]))\n    # print(k_list[0])\n    # print(k_list[1])\n    k_list.sort(key=lambda x: (x[0], x[1]))\n    # print(k_list[0])\n    # print(k_list[1])\n    k_list.sort(key=lambda x: (x[0], x[1]))\n    # print(k_list[0])\n    # print(k_list[1])\n    k_list.sort(key=lambda x: (x[0], x[1]))\n    # print(k_list[0])\n    # print(k_list[1])\n"
    },
    {
        "number": 4063,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n        n, d = map(int, stdin.split())\n        i = 1\n        while i <= n:\n            k = 1\n            j = 1\n            while j <= i+d:\n                k += 1\n                j += d\n            if i == n:\n                i = 1\n                continue\n            elif j == n:\n                j = 1\n                continue\n            else:\n                i += d\n                j += d\n            print(k)\n        return str(k)"
    },
    {
        "number": 4063,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    n = str(n)\n    n = list(n)\n    k = int(k)\n    n = list(map(int, n))\n    l = len(n)\n    # print(n, k)\n    # print(l)\n    if l % 2:\n        n = [int(n[i]) for i in range(0, l, 2)]\n    else:\n        n = [int(n[i]) for i in range(0, l, 2)]\n    # print(n)\n    # print(len(n))\n    # print(n[0], n[l-1], n[l-2], n[l-3], n[l-4])\n    # print(n[l-1]+n[l-2]+n[l-3]+n[l-4])\n    cnt = 0\n    for i in range(0, len(n), 2):\n        if (n[i] + n[i+1]) % 10 == k:\n            cnt += 1\n    if cnt == 1:\n        return \"1\"\n    else:\n        return \"2\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4063,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    S = []\n    for i in range(N):\n        S.append(i)\n    for i in range(N-1):\n        for j in range(i+1, N):\n            S[i], S[j] = S[j], S[i]\n            K -= 1\n            if K == 0:\n                break\n    if K == 0:\n        return \"No\"\n    return \"Yes\"\n\n\n-----Sample Input-----\n6\n9 1 4 4 6 7\n\n-----Sample Output-----\nNo\n\n-----Constraints-----\n1 <= N <= 10^5\n1 <= d_i <= 10^5\n\n-----Constraints-----\n1 <= K <= 10^5\n\n-----Sample Input-----\n3\n4 2 2\n4 1 2\n\n-----Sample Output-----\n3\n\n-----Constraints-----\n1 <= N <= 10^5\n1 <= d_1, d_2, d_3, d_4, d_5 <= 10^5\n1 <= K <= 10^5\n\n-----Sample Input-----\n0\n6\n4 2\n4 1\n\n-----Sample Output-----\n0\n\n-----Constraints-----\n1 <= N <= 10^5\n1 <= d_1, d_2, d_3, d_4, d_5 <= 10^5\n1 <= K <= 10^5\n\n\"\"\"\ndef"
    },
    {
        "number": 4063,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # read input from stdin\n    N, d_i = map(int, stdin.split())\n    \n    # check the input type\n    if type(N) is not int:\n        raise TypeError('The input type must be integer')\n    if type(d_i) is not int:\n        raise TypeError('The input type must be integer')\n        \n    # check the input range\n    if d_i < 1 or d_i > N:\n        raise ValueError('The input range must be less than 1 and greater than N')\n    \n    # iterate from 1 to N\n    for i in range(1, N+1):\n        # check the input type\n        if type(i) is not int:\n            raise TypeError('The input type must be integer')\n        \n        # check the input range\n        if i < 1 or i > N:\n            raise ValueError('The input range must be less than 1 and greater than N')\n            \n    # number of problems for ARCs and ABCs\n    answer = 0\n    \n    # check the input\n    if N % 2 == 0:\n        answer = int(N/2)\n    else:\n        answer = int(N/2)+1\n    \n    # check the input\n    if d_i < 1 or d_i > answer:\n        raise ValueError('The input range must be less than 1 and greater than N')\n        \n    return str(answer)\n\n\"\"\"\nThe problem has only three steps,\n1) Determine the difficulty of the problem,\n2) Divide the problem into two categories by choosing an integer K.\n3) For a problem with difficulty K or higher, the problem is for ARCs.\n4) For a problem with difficulty lower than K, the problem is for ABCs.\n\"\"\""
    },
    {
        "number": 4063,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    \n    if (N%2!= 0 or N%3!= 0):\n        return 0\n    \n    k = int(N**0.5)\n    \n    arr = [0]*(N+1)\n    for i in range(1,N+1):\n        arr[i] = int(i**(0.5))\n        \n    def dfs(curr, depth, arr, k):\n        if depth == k:\n            return True\n        \n        if arr[curr] == arr[k]:\n            return dfs(curr+1, depth+1, arr, k) or dfs(curr+2, depth+1, arr, k)\n        return False\n    \n    return \"2\" if dfs(1, 1, arr, k) else \"0\"\n\ndef"
    },
    {
        "number": 4064,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.split()\n    n = int(data[0])\n    h = int(data[1])\n    l = int(data[2])\n    a_1 = int(data[3])\n    a_2 = int(data[4])\n    a_3 = int(data[5])\n    a_4 = int(data[6])\n    a_5 = int(data[7])\n    a_6 = int(data[8])\n    a_7 = int(data[9])\n    if (l >= h):\n        l += 1\n    if (l < h):\n        l = h\n    if (h < l):\n        h += 1\n    if (h >= l):\n        h = l\n    if (a_1 <= a_2):\n        if (a_1 <= a_3):\n            a_1 += 1\n            if (a_1 >= a_4):\n                a_1 -= 1\n                a_2 += 1\n                a_3 -= 1\n                a_4 -= 1\n                a_5 += 1\n                a_6 -= 1\n                a_7 += 1\n                return str(a_1)\n        else:\n            a_2 += 1\n            if (a_2 >= a_5):\n                a_2 -= 1\n                a_1 += 1\n                a_3 -= 1\n                a_4 -= 1\n                a_5 -= 1\n                a_6 += 1\n                a_7 += 1\n                a_8 += 1\n                a_9 += 1\n                a_10 += 1\n                a_11 += 1\n                a_12 += 1\n                a_13 += 1\n                a_14 += 1\n                a_15 += 1\n                a_16 += 1\n                return str(a_2)\n    else:\n        if (a_3 >= a_4):\n            a_2 += 1\n            if (a_2 >= a_5):\n                a_2 -= 1\n                a_3 += 1\n                a_4 -= 1\n                a_5 -= 1\n                a_6 -= 1\n                a_7 += 1\n                a_8 += 1\n                a_9 += 1\n                a_10 += 1\n                a_11 += 1\n                a_12 += 1\n                a_13 += 1\n                a_14 += 1\n                a_15 += 1\n                a_16 += 1\n                a_17 += 1\n                a_18 += 1\n                a_19 += 1\n                a_20 += 1\n                a_21 += 1\n                return str(a_3)\n        else:\n            a_3 -= 1\n            if (a_3 >= a_6):\n                a_2 += 1\n                a_3 -= 1\n                a_4 -= 1\n                a_5 -= 1\n                a_6 -= 1\n                a_7 += 1\n                a_8 += 1\n                a_9 += 1\n                a_10 += 1\n                a_11 += 1\n                a_12 += 1\n                a_13 += 1\n                a_14 += 1\n                a_15 += 1\n                a_16 += 1\n                a_17 += 1\n                a_18 += 1\n                a_19 += 1\n                a_20 += 1\n                a_21 += 1\n                a_22 += 1\n                a_23 += 1\n                a_24 += 1\n                a_25 += 1\n                a_26 += 1\n                a_27 += 1\n                a_28 += 1\n                a_29 += 1\n                a_30 += 1\n                a_31 += 1\n                a_32 += 1\n                a_33 += 1\n                a_34 += 1\n                a_35 += 1\n                a_36 += 1\n                a_37 += 1\n                a_38 += 1\n                a_39 += 1\n                a_40 += 1\n                a_41 += 1\n                a_42 += 1\n                a_43 += 1\n                a_44 += 1\n                a_45 += 1\n                a_46 += 1\n                a_47 += 1\n                a_48 += 1\n                a_49 += 1\n                a_50 += 1\n                a_51 += 1\n                a_52 += 1\n                a_53 += 1\n                a_54 += 1\n                a_55 += 1\n                a_56 += 1\n                a_57 += 1\n                a_58 += 1\n                a_59 += 1\n                a_60 += 1\n                a_61 += 1\n                a_62 += 1\n                a_63 += 1\n                a_64 += 1\n                a_65 += 1\n                a_66 += 1\n                a_67 += 1\n                a_68 += 1\n                a_69 += 1\n                a_70 += 1\n                a_71 += 1\n                a_72 += 1\n                a_73 += 1\n                a_74 += 1\n                a_75 += 1\n                a_76 += 1\n                a_77 += 1\n                a_78 += 1\n                a_79 += 1\n                a_80 += 1\n                a_81 += 1\n                a_82 += 1\n                a_83 += 1\n                a_84 += 1\n                a_85 += 1\n                a_86 += 1\n                a_87 += 1\n                a_88 += 1\n                a_89 += 1\n                a_90 += 1\n                a_91 += 1\n                a_92 += 1\n                a_93 += 1\n                a_94 += 1\n                a_95 += 1\n                a_96 += 1\n                a_97 += 1\n                a_98 += 1\n                a_99 += 1\n                a_100 += 1\n                a_101 += 1\n                a_102 += 1\n                a_103 += 1\n                a_104 += 1\n                a_105 += 1\n                a_106 += 1\n                a_107 += 1\n                a_108 += 1\n                a_109 += 1\n                a_110 +="
    },
    {
        "number": 4064,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l = map(int, stdin.split())\n    a_1 = min(h,l)\n    a_2 = max(h,l)\n    a_3 = (a_1+l)%h\n    a_4 = (a_2+l)%h\n    a_5 = (a_3+l)%h\n    a_6 = (a_4+l)%h\n    a_7 = (a_5+l)%h\n    if a_1<h or h<a_2:\n        return str(1)\n    elif a_1<h and a_2<h:\n        return str(l)\n    elif a_1<h and a_2<h and a_2<l:\n        return str(a_1)\n    elif a_1<h and a_2<h and a_2<l and a_2<l:\n        return str(a_2)\n    elif a_1<h and a_2<h and a_2<l and a_2<l:\n        return str(a_1+l)\n    elif a_1<h and a_2<h and a_2<l and a_2<l:\n        return str(a_1+l+a_2)\n    elif a_1<h and a_2<h and a_2<l and a_2<l:\n        return str(a_2)\n    elif a_1<h and a_2<h and a_2<l and a_2<l:\n        return str(a_1+l+a_2)\n    elif a_1<h and a_2<h and a_2<l and a_2<l:\n        return str(a_1+l+a_2+h)\n    elif a_1<h and a_2<h and a_2<l and a_2<l:\n        return str(a_1+l+a_2+h+a_1)\n    elif a_1<h and a_2<h and a_2<l and a_2<l:\n        return str(a_1+l+a_2+h+a_1+l)\n    elif a_1<h and a_2<h and a_2<l and a_2<l:\n        return str(a_1+l+a_2+h+a_1+l+a_2)\n    elif a_1<h and a_2<h and a_2<l and a_2<l:\n        return str(a_2)\n    elif a_1<h and a_2<h and a_2<l and a_2<l:\n        return str(a_1+l+a_2+h)\n    elif a_1<h and a_2<h and a_2<l and a_2<l:\n        return str(a_1+l+a_2+h+a_1)\n    elif a_1<h and a_2<h and a_2<l and a_2<l:\n        return str(a_1+l+a_2+h+a_1+l)\n    elif a_1<h and a_2<h and a_2<l and a_2<l:\n        return str(a_1+l+a_2+h+a_1+l+a_2)\n    elif a_1<h and a_2<h and a_2<l and a_2<l:\n        return str(a_1+l+a_2+h+a_1+l+a_2)\n    elif a_1<h and a_2<h and a_2<l and a_2<l:\n        return str(a_1+l+a_2+h+a_1+l+a_2)\n    elif a_1<h and a_2<h and a_2<l and a_2<l:\n        return str(a_1+l+a_2+h+a_1+l+a_2)\n    elif a_1<h and a_2<h and a_2<l and a_2<l:\n        return str(a_1+l+a_2+h+a_1+l+a_2+a_1)\n    elif a_1<h and a_2<h and a_2<l and a_2<l:\n        return str(a_1+l+a_2+h+a_1+l+a_2+a_1+a_1)\n    elif a_1<h and a_2<h and a_2<l and a_2<l:\n        return str(a_1+l+a_2+h+a_1+l+a_2+a_1+a_1+a_1)\n    elif a_1<h and a_2<h and a_2<l and a_2<l:\n        return str(a_1+l+a_2+h+a_1+l+a_2+a_1+a_1+a_1)\n    elif a_1<h and a_2<h and a_2<l and a_2<l:\n        return str(a_1+l+a_2+h+a_1+l+a_2+a_1+a_1+a_1+a_1+a_1)\n    elif a_1<h and a_2<h and a_2<l and a_2<l:\n        return str(a_1+l+a_2+h+a_1+l+a_2)\n    elif a_1<h and"
    },
    {
        "number": 4064,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    l = [int(stdin) for stdin in input().split()]\n    r = l[-1]\n    for i in range(n - 1, -1, -1):\n        if l[i] + r <= r:\n            r = l[i] + r\n        else:\n            r = l[i]\n    return str(r)\n\n\n\ndef"
    },
    {
        "number": 4064,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l = list(map(int, stdin.split()))\n    a_1, a_2, a_3, a_4, a_5, a_6, a_7, a_8, a_9 = list(map(int, stdin.split()))\n    a_1_h = (a_1 * h)\n    a_2_h = (a_2 * h)\n    a_3_h = (a_3 * h)\n    a_4_h = (a_4 * h)\n    a_5_h = (a_5 * h)\n    a_6_h = (a_6 * h)\n    a_7_h = (a_7 * h)\n    a_8_h = (a_8 * h)\n    a_9_h = (a_9 * h)\n    if l == 0:\n        if a_1_h < a_2_h < a_3_h < a_4_h < a_5_h < a_6_h < a_7_h < a_8_h < a_9_h:\n            return str(3)\n        if a_1_h == a_2_h == a_3_h == a_4_h == a_5_h == a_6_h == a_7_h == a_8_h == a_9_h:\n            return str(7)\n        if a_1_h > a_2_h > a_3_h > a_4_h > a_5_h > a_6_h > a_7_h > a_8_h > a_9_h:\n            return str(16)\n        if a_1_h < a_2_h < a_3_h < a_4_h < a_5_h < a_6_h < a_7_h < a_8_h < a_9_h:\n            return str(21)\n        if a_1_h > a_2_h > a_3_h > a_4_h < a_5_h < a_6_h < a_7_h < a_8_h < a_9_h:\n            return str(14)\n        if a_1_h > a_2_h > a_3_h > a_4_h < a_5_h < a_6_h < a_7_h < a_8_h < a_9_h:\n            return str(23)\n        if a_1_h < a_2_h < a_3_h < a_4_h < a_5_h < a_6_h < a_7_h < a_8_h < a_9_h:\n            return str(19)\n        if a_1_h < a_2_h < a_3_h < a_4_h < a_5_h < a_6_h < a_7_h < a_8_h < a_9_h:\n            return str(17)\n        if a_1_h < a_2_h < a_3_h < a_4_h < a_5_h < a_6_h < a_7_h < a_8_h < a_9_h:\n            return str(17)\n        if a_1_h < a_2_h < a_3_h < a_4_h < a_5_h < a_6_h < a_7_h < a_8_h < a_9_h:\n            return str(17)\n        if a_1_h < a_2_h < a_3_h < a_4_h < a_5_h < a_6_h < a_7_h < a_8_h < a_9_h:\n            return str(11)\n        if a_1_h < a_2_h < a_3_h < a_4_h < a_5_h < a_6_h < a_7_h < a_8_h < a_9_h:\n            return str(11)\n    if l == 1:\n        if a_1_h < a_2_h < a_3_h < a_4_h < a_5_h < a_6_h < a_7_h < a_8_h < a_9_h:\n            return str(6)\n        if a_1_h < a_2_h < a_3_h < a_4_h < a_5_h < a_6_h < a_7_h < a_8_h < a_9_h:\n            return str(6)\n        if a_1_h < a_2_h < a_3_h < a_4_h < a_5_h < a_6_h < a_7_h < a_8_h < a_9_h:\n            return str(6)\n        if a_1_h < a_2_h < a_3_h < a_4_h < a_5_h < a_6_h < a_7_h < a_8_h < a_9_h:\n            return str(4)\n        if a_1_h < a_2_h < a_3_h < a_4_h < a_5_h < a_6_h < a_7_h < a_8_h < a_9_h:\n            return str(4)\n        if a_1_h < a_2_h < a_3_h < a_4_h < a_5_h < a_6_h < a_7_h < a_8_h < a_9_h:\n            return str(4)\n        if a_1_h < a_2_h < a_3"
    },
    {
        "number": 4064,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    while True:\n        n, a_1, a_2, a_3, a_4, a_5, a_6, a_7, a_8, a_9 = list(map(int, stdin.split(' ')))\n        \n        if n == 0:\n            return '0'\n        \n        # min = min(a_1, a_2, a_3, a_4, a_5, a_6, a_7, a_8, a_9)\n        # max = max(a_1, a_2, a_3, a_4, a_5, a_6, a_7, a_8, a_9)\n        if a_1 < min:\n            min = a_1\n        if a_2 < min:\n            min = a_2\n        if a_3 < min:\n            min = a_3\n        if a_4 < min:\n            min = a_4\n        if a_5 < min:\n            min = a_5\n        if a_6 < min:\n            min = a_6\n        if a_7 < min:\n            min = a_7\n        if a_8 < min:\n            min = a_8\n        if a_9 < min:\n            min = a_9\n        \n        # max = max(a_1, a_2, a_3, a_4, a_5, a_6, a_7, a_8, a_9)\n        # min = min(a_1, a_2, a_3, a_4, a_5, a_6, a_7, a_8, a_9)\n        # if a_1 > max:\n        #     max = a_1\n        # if a_2 > max:\n        #     max = a_2\n        # if a_3 > max:\n        #     max = a_3\n        # if a_4 > max:\n        #     max = a_4\n        # if a_5 > max:\n        #     max = a_5\n        # if a_6 > max:\n        #     max = a_6\n        # if a_7 > max:\n        #     max = a_7\n        # if a_8 > max:\n        #     max = a_8\n        # if a_9 > max:\n        #     max = a_9\n        \n        # if min > max:\n        #     min = max\n        \n        \n        # print(min)\n        # print(max)\n        \n        # if a_8 > max:\n        #     max = a_8\n        # if a_9 > max:\n        #     max = a_9\n        \n        # if a_1 > max:\n        #     max = a_1\n        \n        # if a_2 > max:\n        #     max = a_2\n        # if a_3 > max:\n        #     max = a_3\n        # if a_4 > max:\n        #     max = a_4\n        # if a_5 > max:\n        #     max = a_5\n        # if a_6 > max:\n        #     max = a_6\n        # if a_7 > max:\n        #     max = a_7\n        \n        # print(max)\n        \n        # if max > min:\n        #     max = min\n        \n        # print(max)\n        \n        \n        # a_i = (min+max)/2\n        # print(a_i)\n        \n        # if a_i == a_i+a_i:\n        #     a_i = a_i+a_i\n        # else:\n        #     if a_i>=a_i+a_i and a_i <= a_i+a_i-1:\n        #         a_i = a_i+a_i-1\n        #     if a_i-1 < a_i+a_i-1:\n        #         a_i = a_i-1\n        \n        # print(a_i)\n        \n        # if a_i == a_i:\n        #     a_i = a_i-1\n        # elif a_i == a_i+a_i:\n        #     a_i = a_i\n        # else:\n        #     if a_i<=a_i+a_i and a_i <= a_i+a_i+1:\n        #         a_i = a_i+a_i+1\n        #     if a_i+1 < a_i+a_i+1:\n        #         a_i = a_i+1\n        \n        # print(a_i)\n        \n        # if a_i == a_i+a_i:\n        #     a_i = a_i\n        # elif a_i== a_i-a_i:\n        #     a_i = a_i-1\n        # else:\n        #     if a_i<=a_i-a_i and a_i <= a_i+a_i-1:\n        #         a_i = a_i-1\n        #     if a_i+1 < a_i+a_i-1:\n        #         a_i = a_i+1\n        \n        # print(a_i)\n        \n        # a_i = (a_i+a_i)/2\n        # if a_i == a_i+a_i:\n        #     a_i = a_i-1\n        # elif a_i == a_i-a_i:\n        #     a_i = a_i\n        # else:\n        #     if a_i+1<=a_i+a_i+1:\n        #         a_i"
    },
    {
        "number": 4064,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    h = int(stdin[1])\n    a_1 = int(stdin[2])\n    a_2 = int(stdin[3])\n    a_3 = int(stdin[4])\n    a_4 = int(stdin[5])\n    a_5 = int(stdin[6])\n    a_6 = int(stdin[7])\n    a_7 = int(stdin[8])\n    a_8 = int(stdin[9])\n    a_9 = int(stdin[10])\n    s = 0\n    if n >= a_1 and a_1 <= a_8:\n        s += a_1\n    if n >= a_2 and a_2 <= a_9:\n        s += a_2\n    if n >= a_3 and a_3 <= a_7:\n        s += a_3\n    if n >= a_4 and a_4 <= a_8:\n        s += a_4\n    if n >= a_5 and a_5 <= a_9:\n        s += a_5\n    if n >= a_6 and a_6 <= a_8:\n        s += a_6\n    if n >= a_7 and a_7 <= a_9:\n        s += a_7\n    if n >= a_8 and a_8 <= a_9:\n        s += a_8\n    if n >= a_9 and a_9 <= a_8:\n        s += a_9\n    return str(s)\n"
    },
    {
        "number": 4064,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = map(int, stdin.split())\n    a_1, a_2, a_3, a_4, a_5, a_6, a_7, a_8 = map(int, stdin.split())\n    max_good = 0\n    for i in range(h):\n        for j in range(l):\n            if j+a_1 +a_2+a_3+a_4+a_5+a_6+a_7+a_8 >= h*l:\n                pass\n            else:\n                if (i+j+a_8+a_7+a_6+a_5+a_4+a_3+a_2+a_1) <= r:\n                    max_good += 1\n    print(max_good)\n"
    },
    {
        "number": 4064,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, *time = map(int, stdin.split())\n    answer = 0\n    for i in range(1,n+1):\n        answer += min(time[i-1],time[i-2])*i\n    return str(answer)\n\n-----Test-----\n>>> solution(\"7 24 21 23\")\n3\n\n>>> solution(\"16 17 14 20 20 11 22\")\n3\n\n>>> solution(\"15 21 17\")\n2\n\n>>> solution(\"22 20\")\n4\n\n>>> solution(\"16 17\")\n2\n\n>>> solution(\"24 21 20 22 23 24 21\")\n7\n\n>>> solution(\"24 21 20 22 23 24 21\")\n5\n"
    },
    {
        "number": 4064,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    i, l, r = map(int, stdin.split())\n    n = i\n    a = 0\n    a1 = 0\n    a2 = 0\n    a3 = 0\n    a4 = 0\n    a5 = 0\n    a6 = 0\n    a7 = 0\n    a8 = 0\n    a9 = 0\n    a10 = 0\n    a11 = 0\n    a12 = 0\n    a13 = 0\n    a14 = 0\n    a15 = 0\n    a16 = 0\n    for j in range(n):\n        a, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16 = map(int, stdin.split())\n        a = a - a1\n        a = a + a2\n        a = a - a3\n        a = a + a4\n        a = a - a5\n        a = a + a6\n        a = a - a7\n        a = a + a8\n        a = a - a9\n        a = a + a10\n        a = a - a11\n        a = a + a12\n        a = a - a13\n        a = a + a14\n        a = a - a15\n        a = a - a16\n        a = a + a15\n        a = a - a16\n        a = a - a16\n        a = a - a16\n        a = a - a16\n        a = a + a16\n        a = a - a16\n        a = a + a16\n        a = a - a16\n        a = a - a16\n        a = a + a16\n        a = a - a16\n        a = a + a16\n        a = a - a16\n        a = a - a16\n        a = a + a16\n        a = a - a16\n        a = a - a16\n        a = a + a16\n        a = a - a16\n        a = a + a16\n        a = a - a16\n        a = a + a16\n        a = a - a16\n        a = a + a16\n        a = a - a16\n        a = a + a16\n        a = a - a16\n        a = a - a16\n        a = a + a16\n        a = a - a16\n        a = a + a16\n        a = a - a16\n        a = a + a16\n        a = a - a16\n        a = a + a16\n        a = a - a16\n        a = a + a16\n        a = a - a16\n        a = a + a16\n        a = a - a16\n        a = a + a16\n        a = a - a16\n        a = a + a16\n        a = a - a16\n        a = a + a16\n        a = a - a16\n        a = a + a16\n        a = a - a16\n        a = a + a16\n        a = a - a16\n        a = a + a16\n        a = a - a16\n        a = a + a16\n        a = a - a16\n        a = a + a16\n        a = a - a16\n        a = a + a16\n        a = a - a16\n        a = a + a16\n        a = a - a16\n        a = a + a16\n        a = a - a16\n        a = a + a16\n        a = a - a16\n        a = a + a16\n        a = a - a16\n        a = a + a16\n        a = a - a16\n        a = a + a16\n        a = a - a16\n        a = a + a16\n        a = a - a16\n        a = a + a16\n        a = a - a16\n        a = a + a16\n        a = a - a16\n        a = a + a16\n        a = a - a16\n        a = a + a16\n        a = a - a16\n        a = a + a16\n        a = a - a16\n        a = a + a16\n        a = a - a16\n        a = a + a16\n        a = a - a16\n        a = a + a16\n        a = a - a16\n        a = a + a16\n        a = a - a16\n        a = a + a16\n        a = a - a16\n        a = a + a16\n        a = a - a16\n        a = a + a16\n        a = a - a16\n        a = a + a16\n        a = a - a16\n        a = a + a16\n        a = a - a16\n        a = a + a16\n        a = a - a16\n        a = a + a16\n        a = a - a16\n        a = a + a16\n        a = a - a16\n        a = a + a16\n        a = a - a16\n        a = a + a16\n        a = a - a16\n        a = a + a16\n        a = a - a16\n        a = a + a16\n        a = a - a16\n        a = a + a16\n        a = a - a16\n        a = a + a16\n        a = a - a16\n        a = a + a16\n        a = a - a16\n        a = a + a16\n        a = a - a16\n        a = a + a16\n        a = a - a16\n        a = a + a16\n        a = a - a16\n        a = a + a16\n        a = a - a16\n        a = a + a16\n        a = a - a16\n        a = a + a16\n        a = a - a16\n        "
    },
    {
        "number": 4064,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    answer = 0\n    times = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n    times[0] = stdin.split(\" \")[0]\n    times[1] = int(stdin.split(\" \")[1])\n    times[2] = int(stdin.split(\" \")[2])\n    times[3] = int(stdin.split(\" \")[3])\n    times[4] = int(stdin.split(\" \")[4])\n    times[5] = int(stdin.split(\" \")[5])\n    times[6] = int(stdin.split(\" \")[6])\n    times[7] = int(stdin.split(\" \")[7])\n    times[8] = int(stdin.split(\" \")[8])\n    times[9] = int(stdin.split(\" \")[9])\n    times[10] = int(stdin.split(\" \")[10])\n    times[11] = int(stdin.split(\" \")[11])\n    times[12] = int(stdin.split(\" \")[12])\n    times[13] = int(stdin.split(\" \")[13])\n    times[14] = int(stdin.split(\" \")[14])\n    times[15] = int(stdin.split(\" \")[15])\n    times[16] = int(stdin.split(\" \")[16])\n    times[17] = int(stdin.split(\" \")[17])\n    times[18] = int(stdin.split(\" \")[18])\n    times[19] = int(stdin.split(\" \")[19])\n    times[20] = int(stdin.split(\" \")[20])\n    times[21] = int(stdin.split(\" \")[21])\n    times[22] = int(stdin.split(\" \")[22])\n    times[23] = int(stdin.split(\" \")[23])\n    times[24] = int(stdin.split(\" \")[24])\n    times[25] = int(stdin.split(\" \")[25])\n    times[26] = int(stdin.split(\" \")[26])\n    times[27] = int(stdin.split(\" \")[27])\n    times[28] = int(stdin.split(\" \")[28])\n    times[29] = int(stdin.split(\" \")[29])\n    times[30] = int(stdin.split(\" \")[30])\n    times[31] = int(stdin.split(\" \")[31])\n    times[32] = int(stdin.split(\" \")[32])\n    times[33] = int(stdin.split(\" \")[33])\n    times[34] = int(stdin.split(\" \")[34])\n    times[35] = int(stdin.split(\" \")[35])\n    times[36] = int(stdin.split(\" \")[36])\n    times[37] = int(stdin.split(\" \")[37])\n    times[38] = int(stdin.split(\" \")[38])\n    times[39] = int(stdin.split(\" \")[39])\n    times[40] = int(stdin.split(\" \")[40])\n    times[41] = int(stdin.split(\" \")[41])\n    times[42] = int(stdin.split(\" \")[42])\n    times[43] = int(stdin.split(\" \")[43])\n    times[44] = int(stdin.split(\" \")[44])\n    times[45] = int(stdin.split(\" \")[45])\n    times[46] = int(stdin.split(\" \")[46])\n    times[47] = int(stdin.split(\" \")[47])\n    times[48] = int(stdin.split(\" \")[48])\n    times[49] = int(stdin.split(\" \")[49])\n    times[50] = int(stdin.split(\" \")[50])\n    times[51] = int(stdin.split(\" \")[51])\n    times[52] = int(stdin.split(\" \")[52])\n    times[53] = int(stdin.split(\" \")[53])\n    times[54] = int(stdin.split(\" \")[54])\n    times[55] = int(stdin.split(\" \")[55])\n    times[56] = int(stdin.split(\" \")[56])\n    times[57] = int(stdin.split(\" \")[57])\n    times[58] = int(stdin.split(\" \")[58])\n    times[59] = int(stdin.split(\" \")[59])\n    times[60] = int(stdin.split(\" \")[60])\n    times[61] = int(stdin.split(\" \")[61])\n    times[62] = int(stdin.split(\" \")[62])\n    times[63] = int(stdin.split(\" \")[63])\n    times[64] = int(stdin.split(\" \")[64])\n    times[65] = int(stdin.split(\" \")[65])\n    times[66] = int(stdin.split(\" \")[66])\n    times[67] = int(stdin.split(\" \")[67])\n    times[68] = int(stdin.split(\" \")[68])\n    times[69] = int(stdin.split(\" \")[69])\n    times[70] = int(stdin.split(\" \")[70])\n    times[71] = int(stdin.split(\" \")[71])\n    times[72] = int(stdin.split(\" \")[72])\n    times[73] = int(stdin.split(\" \")[73])\n    times[74] = int(stdin.split(\" \")[74])\n    times[75] = int("
    },
    {
        "number": 4065,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    contests = []\n    \n    for _ in range(n):\n        contests.append(tuple(map(int, stdin.split())))\n    \n    contest_count = len(contests)\n    \n    if contest_count == 1:\n        return 1\n    \n    max_diff = max(map(lambda x: max(x), contests))\n    \n    res = 0\n    \n    for i in range(contest_count):\n        for j in range(contest_count):\n            diff = contests[i][0] * contests[j][0]\n            \n            for k in range(1, contest_count):\n                if diff > max_diff:\n                    break\n                diff += contests[k][0] * contests[j][0]\n                \n            if diff == max_diff:\n                res += 1\n    \n    return res\n\n\n-----Example-----\n\n>>> import math\n>>> solution(\"4 5 6 7 10 20 21 22 23 24 49\")\n3\n"
    },
    {
        "number": 4065,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    \n    def get_sum(a, b):\n        \n        return sum(map(lambda x: x * x, a))\n    \n    \n    def get_diff(a, b):\n        \n        return max(map(lambda x: x * x, a))\n    \n    \n    a = [get_sum(a, b) for b in a]\n    a = [get_diff(a, b) for b in a]\n    a.sort()\n    return ''.join(map(str, a))\n\n-----Advanced-----\n\nIf we are to get the number of problems in the problem statement we will use a recursive approach:\n\ndef"
    },
    {
        "number": 4065,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int,stdin.split()))\n    a.sort()\n    j = 0\n    for i in range(n-1):\n        a[i] = a[i] + a[i+1]\n        if a[i+1] >= 10**9+1:\n            a[i+1] = a[i+1] - 10**9\n            j = 1\n    if j == 0:\n        return str(a[0])\n    else:\n        return str(a[0])\n\"\"\"\ndef"
    },
    {
        "number": 4065,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(item) for item in stdin.split()]\n    if not a:\n        return 1\n    if len(a) == 2:\n        if a[0] == a[1]:\n            return 2\n    max_num = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                diff = a[i] - a[j] - a[k]\n                if diff < max_num:\n                    max_num = diff\n    if max_num == a[0]:\n        return 3\n    if max_num == a[1]:\n        return 4\n    if max_num == a[2]:\n        return 5\n    return 1\n\n'''\nclass Solution:\n    def findMaxContest(self, problems: List[List[int]]) -> int:\n        if len(problems) == 0:\n            return 1\n        val = 1\n        solutions = {}\n        # print(problems)\n        # print(problems[0])\n        for p in problems:\n            s = p[0] + p[1] + p[2]\n            if s in solutions:\n                val = val * 2\n            else:\n                solutions[s] = 0\n                val = val * 2 + 1\n        return val\n"
    },
    {
        "number": 4065,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a_1 = [int(i) for i in stdin.split()]\n    a_2 = [int(i) for i in stdin.split()]\n    a_1.sort()\n    a_2.sort()\n    a_1 = a_1[::-1]\n    a_2 = a_2[::-1]\n    sum = 0\n    for i in range(n):\n        for j in range(n):\n            if i + j >= n:\n                break\n            if a_1[i + j]!= a_2[i + j]:\n                sum = max(sum, len(a_1[i:i + j + 1]) + len(a_2[j:j + 1]))\n    return str(sum)\n\"\"\"\n\ndef"
    },
    {
        "number": 4065,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    answer = []\n    for i in range(n):\n        A, B = [int(x) for x in stdin.split()]\n        answer.append(A * B)\n    return''.join(map(str, answer))\n\nsolution(input())"
    },
    {
        "number": 4065,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    contest = []\n    n = int(stdin.split('\\n')[0])\n    problem = []\n    for i in range(n):\n        a, b = map(int, stdin.split())\n        problem.append([a, b])\n    for i in range(n):\n        contest.append([i + 1, problem[i][1]])\n    contest.sort()\n    best_i = contest[0][0]\n    for i in range(n - 1):\n        if contest[i][1] > contest[i + 1][1]:\n            best_i = i\n    return str(best_i + 1)"
    },
    {
        "number": 4065,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    max_num_problem = 1\n    for i in range(1, n):\n        max_num_problem = max(max_num_problem, a + (a * (i + 1)))\n    return str(max_num_problem)\n\n\n-----Constraints-----\n0 < n < 10^5\n\n------Time Limit Exceeded------\nTime limit exceeded.\n\n------Memory Limit Exceeded------\nMemory limit exceeded.\n\n------Divide and Conquer------\nCouldn't find a way to do this without using in-place.\n\n------Constraints------\n1 <= n <= 10^5\n1 <= a <= 10^9\n"
    },
    {
        "number": 4065,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    contests = []\n    for i in range(n):\n        contests.append(list(map(int, stdin.split())))\n    max_length = 0\n    cnt = 0\n    for i in range(n):\n        cnt += contests[i].count(a[i])\n        max_length = max(max_length, cnt)\n    for i in range(n):\n        length = 0\n        for j in range(n):\n            if contests[j][i] > a[j]:\n                length += 1\n        max_length = max(length, max_length)\n    print(max_length)\n    return str(max_length)\n\n-----Constraints-----\n\n0 < n <= 10^5\n\n--- Nguyen Van Duc ---"
    },
    {
        "number": 4065,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    a = list(map(int, a.split()))\n    a.sort()\n    b = list(map(int, b.split()))\n    b.sort()\n    if not a or not b:\n        return str(n)\n    if a == b:\n        return str(len(a))\n    c = []\n    for ai, bi in zip(a, b):\n        c.append((ai, bi))\n    if len(c) == 2:\n        c.sort()\n        if c[0][1] > c[1][1]:\n            return str(n)\n        else:\n            return str(n - len(c[0][0]))\n    else:\n        c.sort()\n        for i in range(len(c)):\n            if c[i][1] > c[i + 1][1]:\n                return str(n)\n            else:\n                c[i] = c[i + 1]\n    return str(n)\n\n\ndef"
    },
    {
        "number": 4066,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    a_n, a_i, a_j, a_l = map(int, input().split())\n    lcm = a_i * a_j\n    lcm_list = [int(i) for i in list(map(int, input().split()))]\n    for i in lcm_list:\n        if i in lcm_list[:a_i] + lcm_list[a_i+1:]:\n            return \"0\"\n    print(max(lcm_list[:a_i] + lcm_list[a_i+1:], key=abs))\n    print(min(lcm_list[:a_i] + lcm_list[a_i+1:], key=abs))\n    return \"1\"\n    \n\ndef"
    },
    {
        "number": 4066,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    result = \"\"\n    for i in range(1, n + 1):\n        a = int(stdin[0])\n        b = int(stdin[1])\n        c = a\n        d = b\n        while c!= 0:\n            c = c // a\n            d = d * c % 10\n        result += str(d) + \" \"\n    return result[:-1]\n"
    },
    {
        "number": 4066,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    return''.join(map(str, sorted(list(set(list(map(lambda x: x * (k // (x + 1)) ** (x + 1) + (k % (x + 1)) // 2), range(1, k + 1)))))))\n"
    },
    {
        "number": 4066,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def is_in_range(n):\n        return isinstance(n, (int, float)) and 0 <= n < 10 ** 7\n    \n    def is_primes(n):\n        return all(n % i == 0 for i in range(3, int(math.sqrt(n) + 1)))\n    \n    def lcm(a, b):\n        return (a * b) // math.gcd(a, b)\n    \n    n, a, b = map(int, stdin.split())\n    a_i, a_j = a - 1, b - 1\n    if is_primes(a) and is_primes(b) and n >= 4 and is_in_range(a_i + a_j):\n        lcm = lcm(lcm(a, b), lcm(a_i, a_j))\n        if is_in_range(lcm):\n            return [lcm, a_i, a_j]\n    \n    print(-1)\n    \n"
    },
    {
        "number": 4066,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    min_ = a[0]\n    max_ = a[-1]\n    \n    for i in range(n - 2):\n        if min_ >= a[i + 1] and max_ >= a[i + 2]:\n            max_ = max(max_, a[i + 1] * a[i + 2])\n        else:\n            min_ = min(min_, a[i + 1] * a[i + 2])\n    \n    print(min_, max_)\n    return str(min_) + \" \" + str(max_)\n"
    },
    {
        "number": 4066,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    answer = 0\n    for i in range(n):\n        if a[i] <= 0:\n            break\n        a[i] = a[i] ** 2\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if a[i] >= a[j]:\n                break\n        answer += a[i]\n    return str(answer)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4066,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def is_prime(number: int) -> bool:\n        if number < 2:\n            return False\n        for i in range(2, int(math.sqrt(number)) + 1):\n            if number % i == 0:\n                return False\n        return True\n\n    def lcm(x: int, y: int) -> int:\n        return x * y // gcd(x, y)\n\n    n, a = map(int, stdin.split())\n    lcm_a = lcm(a, n)\n    lcm_b = lcm(n, n)\n    i = 0\n    j = n - 1\n    while i < n - 1 and j > 1:\n        if a * lcm(a, i) == a * lcm(a, j):\n            if lcm(a, i) < lcm(a, j):\n                i += 1\n            else:\n                j -= 1\n        else:\n            i += 1\n    print(lcm_a * lcm_b * (j - i))"
    },
    {
        "number": 4066,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split()\n    a = [int(a_i) for a_i in a]\n    lcm = a[0]\n    for i in range(1, len(a)):\n        lcm = lcm * a[i] // (a[i] * a[i-1])\n    return str(lcm)\n    \n"
    },
    {
        "number": 4066,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, a = [int(i) for i in stdin.split()]\n    a.sort()\n    for i in range(n):\n        if a[i] % 2!= 0:\n            a[i] += 1\n            for j in range(i + 1, n):\n                if a[j] % 2 == 0 and a[j] == a[i] + 1:\n                    a[j] += 1\n    return str(min(a))\n"
    },
    {
        "number": 4066,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, input().split()))\n    a.sort()\n    if len(set(a)) == 1:\n        return str(a[0])\n    else:\n        return str(a[n-1]+a[n-2])\n\n\n\n-----Tests-----\n\nprint(solution(\"1 4\"))\nprint(solution(\"6 5 10 1 10 2\"))\nprint(solution(\"6 2 11 3 7\"))\nprint(solution(\"6 5 11 3 7\"))\nprint(solution(\"6 5 1 10 1 2\"))"
    },
    {
        "number": 4067,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(str, stdin.split())\n    if n == \"0\":\n        return s\n    elif \"0\" in s:\n        n = n.replace(\"0\", \"1\")\n        s = s.replace(\"0\", \"1\")\n    if n == \"1\":\n        return s\n    else:\n        return s + s[::-1]\n"
    },
    {
        "number": 4067,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    s = stdin[1]\n    \n    # https://www.geeksforgeeks.org/minimum-number-of-characters-in-string-with-atmost-three-different-characters/\n    count = 0\n    # 3\n    if s[0] == '0':\n        count = len(s)\n    elif s[0] == '1':\n        count = 1 + min(3, len(s)//2)\n    else:\n        count = 2 + min(3, len(s)//2)\n    \n    # 6\n    if len(s) % 2 == 1:\n        count = count * 2\n    \n    if count >= n:\n        return ''.join([str(i) for i in range(n, n+count)])\n    \n    else:\n        return ''.join([str(i) for i in range(n, n+count, 2)])"
    },
    {
        "number": 4067,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    import sys\n    n, s = [int(x) for x in stdin.split()]\n    a = s\n    b = []\n    c = []\n    cnt = 0\n    ans = 0\n    while a!= 0:\n        if a & 1:\n            b.append(a)\n            a = a >> 1\n        else:\n            b.append(a)\n            a = a >> 1\n            cnt += 1\n    for b in b:\n        c.append(b)\n        cnt += 1\n    for i in range(len(b)):\n        c.append(b)\n        cnt += 1\n        ans = max(ans, cnt)\n    print(ans)\n    sys.exit(0)\n"
    },
    {
        "number": 4067,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    s = stdin.strip()\n    \n    ans = ''\n    for i in range(n):\n        if s[i] == '0':\n            ans = ans + '1'\n        elif s[i] == '1':\n            ans = ans + '0'\n        else:\n            ans = ans + '2'\n    return ans\n"
    },
    {
        "number": 4067,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = int(s)\n    \n    if n % 3 == 1:\n        return s\n    \n    if n % 3 == 2:\n        return \"\".join(sorted(s, reverse=True))\n    \n    t = \"\"\n    for i in range(n // 3):\n        for j in range(i * 3, i * 3 + 3):\n            t += \"1\" if j < n else \"2\"\n    \n    return t\n        \n"
    },
    {
        "number": 4067,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4067,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[::-1]\n    a = \"\"\n    count = 0\n    def check(s):\n        count = 0\n        for i in range(len(s)):\n            if s[i] == \"0\":\n                count += 1\n        return count >= n\n    \n    while check(s):\n        for i in range(len(s)):\n            if s[i] == \"0\":\n                s = s[:i] + \"1\" + s[i + 1:]\n                break\n        else:\n            a = a + \"1\"\n            count = 0\n            s = \"\"\n    if s == a:\n        print(a)\n    else:\n        print(a)\n        print(s)\n        print(s)\n        print(a)\n        print(s)\n        print(s)\n    return a\n\nprint(solution(input()))\n"
    },
    {
        "number": 4067,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return min(list(map(''.join, zip(*map(lambda x: list(x), standard_string)))))\n\nInput\n3\n121110\n\nOutput\n121110\n\n'''\n"
    },
    {
        "number": 4067,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, *s = stdin\n    st = s[0]\n    print(st[0], end=' ')\n    st = s[1]\n    print(st[1], end=' ')\n    st = s[2]\n    print(st[2], end=' ')\n    st = s[3]\n    print(st[3], end=' ')\n    st = s[4]\n    print(st[4], end=' ')\n    st = s[5]\n    print(st[5], end=' ')\n    st = s[6]\n    print(st[6], end=' ')\n    st = s[7]\n    print(st[7], end=' ')\n    st = s[8]\n    print(st[8], end=' ')\n    st = s[9]\n    print(st[9], end=' ')\n    st = s[10]\n    print(st[10], end=' ')\n    st = s[11]\n    print(st[11], end=' ')\n    st = s[12]\n    print(st[12], end=' ')\n    return st\n"
    },
    {
        "number": 4067,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(str, stdin.split())\n    n = int(n)\n    s = list(s)\n\n    def solve(a):\n        if len(a) == 1:\n            return \"1\" + a\n        else:\n            b = a[1:len(a)-1]\n            c = solve(a[0:len(a)-1])\n            return solve(b) + c\n\n    return solve(s)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4068,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    N, M = map(int, stdin.split())\n    \n    def sol(n: int, m: int, p: int) -> str:\n        if n == 0:\n            return \"0\"\n        elif n == 1:\n            return \"1\"\n        elif n == 2:\n            return \"2\"\n        else:\n            return \"\".join(map(str, list(str(n*p))))\n        \n    def solve(n, m, p):\n        if m == 0:\n            return sol(n, 0, p)\n        if m == 1:\n            return sol(n, 1, p)\n        else:\n            return sol(n, m - 1, p)\n        \n    print(solve(N, M, p=1))\n    return \"\"\n"
    },
    {
        "number": 4068,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N,M,a_1,a_2,a_3,a_4,a_5,a_6 = map(int, stdin.split())\n    a_M = N - 1 - a_1 - a_2 - a_3 - a_4 - a_5 - a_6\n\n    def is_monotone(n):\n        if n <= 1:\n            return True\n        if n % 2 == 0:\n            if n % 2 == 0 and n % 3 == 0:\n                return True\n            if n % 2 == 0 and n % 3 == 1:\n                return False\n            if n % 2 == 1 and n % 3 == 0:\n                return False\n            if n % 2 == 1 and n % 3 == 1:\n                return True\n        else:\n            if n % 2 == 1 and n % 3 == 0:\n                return True\n            if n % 2 == 0 and n % 3 == 1:\n                return False\n            if n % 2 == 1 and n % 3 == 2:\n                return True\n\n    def is_cyclic(n):\n        if n == 0:\n            return True\n        if n == 1:\n            return False\n        if n == 2:\n            return True\n        if n == 3:\n            return True\n        if n == 4:\n            return False\n        if n == 5:\n            return True\n        if n == 6:\n            return False\n        if n == 7:\n            return True\n        if n == 8:\n            return False\n        if n == 9:\n            return True\n        if n == 10:\n            return False\n        if n == 11:\n            return True\n        if n == 12:\n            return False\n\n    answer = 0\n    for i in range(a_M):\n        if is_monotone(i):\n            answer += 1\n            if is_cyclic(i):\n                answer -= 1\n    return str(answer)"
    },
    {
        "number": 4068,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    a_1, a_2 = map(int, stdin.split())\n    a_M = M\n    count = 0\n    print(count)\n    while(1):\n        if (a_M == 0):\n            break\n        if (a_M == a_1):\n            count += 1\n            a_M -= 1\n        if (a_M == a_2):\n            count += 1\n            a_M -= 2\n        if (a_M == a_1 + a_2):\n            count += 1\n            a_M -= 2\n        if (a_M == a_1 + a_2 + a_M):\n            count += 1\n            a_M -= 2\n        if (a_M == a_1 + a_2 + a_M + a_1):\n            count += 1\n            a_M -= 2\n        if (a_M == a_1 + a_2 + a_M + a_2):\n            count += 1\n            a_M -= 2\n        if (a_M == a_1 + a_2 + a_M + a_2 + a_1):\n            count += 1\n            a_M -= 2\n        if (a_M == a_1 + a_2 + a_M + a_2 + a_1 + a_2):\n            count += 1\n            a_M -= 2\n        if (a_M == a_1 + a_2 + a_M + a_2 + a_1 + a_2 + a_1):\n            count += 1\n            a_M -= 2\n        if (a_M == a_1 + a_2 + a_M + a_2 + a_1 + a_2 + a_1 + a_2):\n            count += 1\n            a_M -= 2\n        if (a_M == a_1 + a_2 + a_M + a_2 + a_1 + a_2 + a_1 + a_2 + a_1):\n            count += 1\n            a_M -= 2\n        if (a_M == a_1 + a_2 + a_M + a_2 + a_1 + a_2 + a_1 + a_2 + a_1 + a_2):\n            count += 1\n            a_M -= 2\n        if (a_M == a_1 + a_2 + a_M + a_2 + a_1 + a_2 + a_1 + a_2 + a_1 + a_2 + a_1):\n            count += 1\n            a_M -= 2\n        if (a_M == a_1 + a_2 + a_M + a_2 + a_1 + a_2 + a_1 + a_2 + a_1 + a_2 + a_1):\n            count += 1\n            a_M -= 2\n        if (a_M == a_1 + a_2 + a_M + a_2 + a_1 + a_2 + a_1 + a_2 + a_1 + a_2 + a_1):\n            count += 1\n            a_M -= 2\n        if (a_M == a_1 + a_2 + a_M + a_2 + a_1 + a_2 + a_1 + a_2 + a_1 + a_2 + a_1):\n            count += 1\n            a_M -= 2\n        if (a_M == a_1 + a_2 + a_M + a_2 + a_1 + a_2 + a_1 + a_2 + a_1 + a_2 + a_1):\n            count += 1\n            a_M -= 2\n        if (a_M == a_1 + a_2 + a_M + a_2 + a_1 + a_2 + a_1 + a_2 + a_1 + a_2 + a_1):\n            count += 1\n            a_M -= 2\n        if (a_M == a_1 + a_2 + a_M + a_2 + a_1 + a_2 + a_1 + a_2 + a_1 + a_2 + a_1):\n            count += 1\n            a_M -= 2\n        if (a_M == a_1 + a_2 + a_M + a_2 + a_1 + a_2 + a_1 + a_2 + a_1 + a_2 + a_1):\n            count += 1\n            a_M -= 2\n        if (a_M == a_1 + a_2 + a_M + a_2 + a_1 + a_2 + a_1 + a_2 + a_1 + a_2 + a_1):\n            count += 1\n            a_M -= 2\n        if (a_M == a_1 + a_2 + a_M + a_2 + a_1 + a_2 + a_1 + a_2 + a_1 + a_2 + a_1):\n            count += 1\n            a_M -= 2\n        if (a_M == a_1 + a_2 + a_M + a_2 + a_1 + a_2 + a_1 + a_2 + a_1 + a_2 + a_1):\n            count += 1\n            a_M -= 2\n        if (a_M == a_1 + a_2 + a_M + a_2 + a_1 + a_2 + a_1 + a_2 + a_1 + a_2 + a_1):\n            count += 1\n            a_M -= 2\n        if (a_M == a_1 + a_2 + a_M + a_2 + a_1 + a_2 + a_1 + a_2 + a_1 + a_2 + a_1):\n            count += 1\n            a_M -= 2\n        if (a_M == a_1 + a_2 + a_M + a_2 + a_1 + a_2 + a_1 + a_2 + a_1 + a_2 + a_1):\n            count += 1\n            a_M -= 2\n        if (a_M == a_1 + a_2 + a_M + a_2 + a_1 + a_2 + a_1 + a_2 + a_1 + a_2 + a_1):\n            count += 1\n            a_M -= 2\n        if (a_M == a_1 + a_2 + a_M + a_2 + a_1 + a_2 + a_1 + a_2 + a_1 + a_2 + a_1):\n            count += 1\n            a_M -= 2\n        if (a_M == a_1 + a_2 + a_M + a_2 + a_1 + a_2 + a_1 + a_2 + a_1 + a_2 + a_1):\n            count += 1\n            a_M -= 2\n        if (a_M == a_1 + a_2 + a_M + a_2 + a_1 + a_2 + a_1"
    },
    {
        "number": 4068,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(sum(1 for _ in range(int(stdin[-1])) if not any([1,2,3,4,5,6,7,8,9,10])))\n"
    },
    {
        "number": 4068,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    m = int(input())\n    a = list(map(int, input().split()))\n    count = 0\n    def dfs(i, left):\n        if i >= n or left >= m:\n            return 0\n        if left == m:\n            return a[i] % 7\n        left += 1\n        return max(dfs(i + 1, left), dfs(i + 1, left + 1)) % 7\n\n    if dfs(1, 0) == a[0] % 7:\n        count += 1\n    if dfs(1, 1) == a[0] % 7:\n        count += 1\n    if dfs(2, 0) == a[1] % 7:\n        count += 1\n    if dfs(2, 1) == a[1] % 7:\n        count += 1\n    if dfs(3, 0) == a[2] % 7:\n        count += 1\n    if dfs(3, 1) == a[2] % 7:\n        count += 1\n    if dfs(4, 0) == a[3] % 7:\n        count += 1\n    if dfs(4, 1) == a[3] % 7:\n        count += 1\n    if dfs(5, 0) == a[4] % 7:\n        count += 1\n    if dfs(5, 1) == a[4] % 7:\n        count += 1\n    if dfs(6, 0) == a[5] % 7:\n        count += 1\n    if dfs(6, 1) == a[5] % 7:\n        count += 1\n    if dfs(7, 0) == a[6] % 7:\n        count += 1\n    if dfs(7, 1) == a[6] % 7:\n        count += 1\n    if count == 1:\n        print(count % 7)\n    return count\n\"\"\""
    },
    {
        "number": 4068,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return str(factorial(int(stdin.rstrip())) % 1000000007)\n\n\ndef"
    },
    {
        "number": 4068,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    num = str(int(stdin[0]) + int(stdin[1]))\n    num = num[::-1]\n    print(int(num, 2))"
    },
    {
        "number": 4068,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, M = list(map(int, stdin.split()))\n    if N < 1 or N > 10**5 or M < 1 or M > 10**5:\n        return \"-1\"\n    a_1 = list(map(int, stdin.split()))\n    a_2 = list(map(int, stdin.split()))\n    a_1.reverse()\n    a_2.reverse()\n    for i in range(N):\n        if i > 0:\n            if a_1[i] < a_1[i - 1] or a_2[i] < a_2[i - 1]:\n                return \"-1\"\n        if i == 0:\n            for j in range(M - 1):\n                if a_1[j] > a_2[j]:\n                    return \"-1\"\n        else:\n            if a_1[i - 1] < a_2[i - 1]:\n                return \"-1\"\n    return str(len(a_1))\n"
    },
    {
        "number": 4068,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n  N, M = map(int, stdin.split())\n  a_1, a_2 = map(int, input().split())\n  # print(a_1, a_2)\n  \n  # print(str(solution(N,M,a_1,a_2)))\n  \n  return str(solution(N,M,a_1,a_2)) % (10**9 + 7)\n\nInput:\n3 3\n1\n1\n5\n\nOutput:\n4\n\n-----Sample Input-----\n6 1\n3\n\n-----Sample Output-----\n4\n'''\n"
    },
    {
        "number": 4068,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n == m:\n        return \"0\"\n    else:\n        return \"0\"\n"
    },
    {
        "number": 4069,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, D = map(int, stdin.split())\n    X, K = map(int, stdin.split())\n    # x1, x2, x3, x4, x5, x6 = map(int, stdin.split())\n    x1 = -D\n    x2 = (N - D) * 10\n    x3 = (N - D) * 10 - 1\n    x4 = -2 * 10 ** 15\n    x5 = 2 * 10 ** 15\n    x6 = 10 ** 15\n    if K == 0:\n        print(x1)\n    elif K == 1:\n        print(x2)\n    else:\n        print(x1 - x2)\n        print(x3 - x4)\n        print(x5 - x6)\n"
    },
    {
        "number": 4069,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    N, K = map(int, stdin.split())\n\n    D = 0\n    X = 0\n    X_min = 0\n    \n    # find the coordinate of the coordinate to move\n    for D in range(K):\n        x = int(stdin[D + 1])\n        X_min = min(X_min, x)\n        X = max(X, x)\n        \n    # update the coordinate to move to the destination\n    X = min(X, X_min)\n    \n    # update the coordinate to move from the destination to the coordinate to move from\n    X = max(X, -X_min)\n\n    # return the absolute value of the destination coordinate\n    return str(abs(X))"
    },
    {
        "number": 4069,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    X, K, D = map(int, stdin.split())\n    if 0 < K <= X:\n        return str(abs(X - K))\n    else:\n        return \"impossible\"\n\"\"\"\n\nfrom sys import stdin\n\n\ndef"
    },
    {
        "number": 4069,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin.split()[0])\n    K = int(stdin.split()[1])\n    D = int(stdin.split()[2])\n    \n    if X > 10**15 or K < 1 or D < 1:\n        return 'Invalid Input'\n    \n    if abs(X) + D >= 10**15:\n        return 'Invalid Input'\n    \n    x = X\n    y = (X - (D - 1) * (x + D - 1)) / D\n    \n    while abs(x + y) >= 10**15:\n        x += D\n        y += D\n        \n    return str(abs(x + y) - (D - 1) * (X + K - (D - 1) * x))"
    },
    {
        "number": 4069,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    K = int(stdin[-1])\n    D = int(stdin[-2])\n    return str(abs(N - (K-D)))\n"
    },
    {
        "number": 4069,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def make_move(x: int, k: int):\n        for _ in range(k):\n            x += 1\n            y = x % 10\n            if y < 10:\n                x = str(x)\n            else:\n                x = str(x - 10)\n            y = str(y)\n            print(x + y)\n        print(\"FINISH\")\n    \n    K, D = map(int, stdin.split())\n    for _ in range(K):\n        make_move(int(stdin.split()[-1]), int(stdin.split()[-1]))\n    return str(abs(int(stdin.split()[-1])))"
    },
    {
        "number": 4069,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, K, D = map(int, stdin.split())\n    x = list(map(int, stdin.split()))\n    x.sort()\n    x = [0] + x + [0]\n    res = 0\n    for i in range(N):\n        res = max(abs(x[i] - (i + K - 2)), res)\n    print(res)"
    },
    {
        "number": 4069,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, K, D = map(int, stdin.split())\n    x = -N\n    y = 0\n    distance = 0\n    if N < K:\n        if K < D:\n            y = -N\n        else:\n            y = -(N - K + 1)\n        distance = K\n        x = N + y\n    else:\n        y = (N - K)\n        distance = D - y\n        x = N - (K - y)\n    print(distance)\n    return str(abs(x))"
    },
    {
        "number": 4069,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    N, K, D = map(int, stdin.split())\n    X = []\n    for _ in range(K):\n        X.append(map(int, stdin.split()))\n    def coords(X):\n        return (x - d for (x, d) in zip(X[:-1], X[1:]))\n    # return the minimum absolute value of the coordinate of the destination\n    def absolute(coord):\n        return abs(coord[0] - coord[1])\n    def solve(x, y, X):\n        # check if X[0] - D = 0\n        if X[0] - D < 0:\n            return\n        # check if X[-1] + D = 0\n        if X[-1] + D > 9:\n            return\n        # if we're in the middle, ignore it\n        if X[y] - x == 0:\n            return\n        # if we're moving backwards in the middle, remove it\n        if X[y] + x == 9:\n            X.pop(y)\n            return\n        # if we're moving forwards in the middle, take it\n        if X[y] - x == K:\n            X.pop(y)\n            return\n        # if we're moving backwards and the start is on the end, we must be on the left\n        if X[y] + x == 0:\n            X.pop(y)\n            return\n        # if we're moving forwards and the end is on the start, we must be on the right\n        if X[y] - x == -K:\n            X.pop(y)\n            return\n        # move the end coordinate to the start coordinate\n        X[y] -= x\n        # and remove the end coordinate\n        X[y] += x\n        # move the start coordinate to the end coordinate\n        X[y] += x\n        # if we're moving backwards and the end is on the start, we must be on the left\n        if X[y] + x == K:\n            X.pop(y)\n            return\n        # if we're moving forwards and the start is on the end, we must be on the right\n        if X[y] - x == -K:\n            X.pop(y)\n            return\n        # move the start coordinate to the end coordinate\n        X[y] += x\n        # and remove the start coordinate\n        X[y] -= x\n        # if we're moving backwards and the end is on the start, we must be on the left\n        if X[y] + x == 0:\n            X.pop(y)\n            return\n        # if we're moving forwards and the start is on the end, we must be on the right\n        if X[y] - x == -K:\n            X.pop(y)\n            return\n        # return the smallest absolute value of the coordinate\n        return min(absolute(coord) for coord in coords(X))\n    # initialize our solution set to a list of strings\n    solution = []\n    # visit all the coordinates in X\n    for x in range(N):\n        # if we're moving backwards, we need to take the biggest value out\n        if K < abs(X[x][0] - X[x][1]):\n            # we need to add the origin coordinate\n            solution.append('.' * abs(X[x][0]))\n            # and remove the origin coordinate\n            solution[x] = '.' * abs(X[x][0])\n            # and move the origin to the next coordinate\n            X[x] = coords(X[x])\n            # and remove the origin coordinate\n            X[x] = coords(X[x])\n        # if we're moving forwards, we need to take the smallest value out\n        else:\n            # we need to add the origin coordinate\n            solution.append('.' * abs(X[x][0]))\n            # and remove the origin coordinate\n            solution[x] = '.' * abs(X[x][0])\n            # and move the origin to the next coordinate\n            X[x] = coords(X[x])\n            # and remove the origin coordinate\n            X[x] = coords(X[x])\n        # if we're moving backwards and the end is on the start, we must be on the left\n        if K < abs(X[x][-1] - X[x][1]):\n            # we need to add the origin coordinate\n            solution.append('.' * abs(X[x][-1]))\n            # and remove the origin coordinate\n            solution[x] = '.' * abs(X[x][-1])\n            # and move the origin to the next coordinate\n            X[x] = coords(X[x])\n            # and remove the origin coordinate\n            X[x] = coords(X[x])\n        # if we're moving forwards and the end is on the start, we must be on the right\n        else:\n            # we need to add the origin coordinate\n            solution.append('.' * abs(X[x][-1]))\n            # and remove the origin coordinate\n            solution[x] = '.' * abs(X[x][-1])\n            # and move the origin to the next coordinate\n            X[x] = coords(X[x])\n            # and remove the origin coordinate\n            X[x] = coords(X[x])\n    # if we're moving backwards, we need to take the biggest value out\n    if K < abs(X[0][0] - X[-1][1]):\n        # we need to add the origin coordinate\n        solution.append('.' * abs(X[0][0]))\n        # and remove the origin coordinate\n        solution[0] = '.' * abs(X[0][0])\n        # and move the origin to the next coordinate\n        X[0] = coords(X[0])\n        # and remove the origin coordinate\n        X[0] = coords(X[0])\n    # if we're moving forwards, we need to take the smallest value out\n    else:\n        # we need to add the origin coordinate\n        solution.append('.' * abs(X[0][0]))\n        # and remove the origin coordinate\n        solution[0] = '.' * abs(X[0][0])\n        # and move the origin to the next coordinate\n        X[0] = coords(X[0])\n        # and remove the origin coordinate\n        X[0] = coords(X[0])\n    # and return the solution\n    return ''.join(solution)\n"
    },
    {
        "number": 4069,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def get_distance(x, y):\n        return abs(x - y)\n\n    n = int(stdin[2])\n    k = int(stdin[3])\n    d = int(stdin[4])\n    for i in range(n):\n        x, y = map(int, stdin[i * 5 + 1:i * 5 + 5].split(' '))\n        x += k\n        y += d\n        print(x, y)\n        print(get_distance(x, y))\n    return str(abs(x) + abs(y))\n\n\nTest cases\nTest Case 1\nInput\n\n6 2 4\n\nOutput\n\n2\n\nExplanation\n\nTakahashi is now at coordinate 6. It is optimal to make the following moves:\n - Move from coordinate 6 to (6 - 4 =) 2.\n - Move from coordinate 2 to (2 - 4 =) -2.\n Here, the absolute value of the coordinate of the destination is 2, and we cannot make it smaller.\ndef"
    },
    {
        "number": 4070,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stds = sorted(list(map(int, stdin.split())))\n    return str(stds[-1] + stds[-2])"
    },
    {
        "number": 4070,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n <= 2000000000:\n        return str(n)\n    else:\n        x = 1\n        while n % x == 0:\n            x += 1\n        if n % x == 1:\n            return str(n//x)\n        else:\n            return str(n//x + 1)\n"
    },
    {
        "number": 4070,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nPrint output:\n\n14\n\nConstraints:\n0 <= n <= 2^31 - 1\n\n----Hard----\n\nHere's a known problem. It works on a palindromic string.\n\nInput\nstring\n\nOutput\nstring\n\n2\n\n\"\"\"\n"
    },
    {
        "number": 4070,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(int(input())):\n        n = int(input())\n        print(n)"
    },
    {
        "number": 4070,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n >= 2000000000:\n        print('0')\n    else:\n        print(n % 2)\n"
    },
    {
        "number": 4070,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    while True:\n        n = int(stdin)\n        if n == 0:\n            break\n        else:\n            n -= 1\n            print(n)\n    return str(n)\n"
    },
    {
        "number": 4070,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    print(n % 7, n % 11 % 2, end='')\n    return str(n % 7) + str(n % 11 % 2)\n"
    },
    {
        "number": 4070,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n < 2 or n > 1000000000:\n        return 0\n    if n % 2!= 0:\n        return 0\n    \n    n2 = n//2\n    for i in range(1, int(n2 ** 0.5) + 1):\n        if n % i == 0:\n            return i\n        \n    if n % 10 == 7:\n        return 0\n    else:\n        return n2"
    },
    {
        "number": 4070,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 1:\n        return str(0)\n    if n == 1:\n        return '1'\n    arr = list(map(int, str(n)))\n    result = 0\n    for i in range(len(arr)):\n        result += arr[i] * (i + 1)\n    return str(result)\n\n\n\n-----Constraints-----\n0 <= stdin.length <= 10^5\nstdin.length is not too large\nstdin is a permutation of digits 0-9\n\n\"\"\"\n\nclass Solution:\n    def countAndSay(self, n: int) -> str:\n        if n == 0:\n            return '1'\n        elif n == 1:\n            return '11'\n        else:\n            result = str(n)\n            count = 1\n            for i in range(1, len(result)):\n                count += int(result[i]) * (i + 1)\n            return str(count)"
    },
    {
        "number": 4070,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    for s in stdin:\n        if s == '-' or s == '+' or s == '*' or s == '/':\n            return s\n    return 0\n\n\n-----Note-----\nThere are multiple solutions at this point, but we only need the minimum value we are able to fix.\n\n\"\"\"\n"
    },
    {
        "number": 4071,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    answer = 0\n\n    # Split and split into list\n    for i in range(len(stdin)//2):\n        answer += int(stdin[i:i+2])\n\n    return str(answer)"
    },
    {
        "number": 4071,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    answer = 0\n    for i in range(len(stdin)):\n        answer = answer * 10 + int(stdin[i])\n    return str(answer)\n\n\n\"\"\"\ndef"
    },
    {
        "number": 4071,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    L = [N]\n    sum = 0\n    for i in range(1, N+1):\n        if i % 3 == 0:\n            L.append(i)\n        else:\n            sum = sum+i\n    return sum\n\nInput\n3\n\nOutput\n11\ndef"
    },
    {
        "number": 4071,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    answer = 0\n    str_list = []\n    for i in stdin:\n        str_list.append(i)\n        if len(str_list) == 1:\n            answer += int(str_list[0])\n            str_list.clear()\n    return str(answer)"
    },
    {
        "number": 4071,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(1, int(stdin) + 1):\n        if '3' in stdin:\n            break\n        stdin = stdin.replace('3', str(i))\n    return int(stdin)\n\nExamples\nInput 1\n\nOutput 1\n\nExplanation 1\n\nThe input starts with '3', so you need to write a whole number 3.\n\nInput 2\n\nOutput 2\n\nExplanation 2\n\nThe input starts with '1', so you need to write a whole number 1.\n\nInput 3\n\nOutput 3\n\nExplanation 3\n\nThe input starts with '4', so you need to write a whole number 4.\n\n\"\"\"\n\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        return int(stdin.replace('3', str(3)))\n"
    },
    {
        "number": 4071,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    answer = 0\n    for line in stdin:\n        if line.isdigit():\n            answer = answer * 10 + int(line)\n    return str(answer)\n'''\n\nimport sys\nfrom collections import deque"
    },
    {
        "number": 4071,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n > 30:\n        return '-1'\n    else:\n        return str(n + 1)\n\n\n-----See Also-----\nhttps://en.wikipedia.org/wiki/A*_search_problem\nhttps://www.w3resource.com/python-exercises/python-basic-exercises.php\n\"\"\"\n\nimport math\n\n\ndef"
    },
    {
        "number": 4071,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    answer = []\n    N = int(stdin.split('\\n')[0])\n    for i in range(N):\n        answer.append(str(eval(stdin[i])))\n    answer = ''.join(answer)\n    return answer\n'''\n\ndef"
    },
    {
        "number": 4071,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    answer = ''\n    a = int(stdin.strip())\n    c = 1\n    while c <= a:\n        if c % 2 == 0:\n            answer = answer + str(c)\n        else:\n            answer = answer + '-'\n        c = c * 10\n    return answer"
    },
    {
        "number": 4071,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    input_str = stdin.readline().strip().split()\n    return ''.join(str(ord(i) - ord('a')) for i in input_str)"
    },
    {
        "number": 4072,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    number = str(n)\n    if int(number[0]) == n:\n        return str(int(number[1:]) % 2)\n    else:\n        return '1'\n"
    },
    {
        "number": 4072,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    c = list(map(int, stdin.split()))\n    c.sort()\n    c = [c[i] for i in range(len(c)) if c[i] == m]\n    return str(len(c) - 1) if n == m else \"\".join(str(x) for x in c)\n"
    },
    {
        "number": 4072,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    \n    if a > b:\n        return '0'\n    else:\n        return '1'\n"
    },
    {
        "number": 4072,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a <= 9:\n        return str(1)\n    elif 927 <= a <= 999:\n        return str(0)\n    else:\n        return str(1)\n'''\n\ndef"
    },
    {
        "number": 4072,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    max_num = int(stdin.strip())\n    print(max_num)\n    for num in range(2, max_num):\n        while True:\n            if num % 3 == 0:\n                print(num, end=\" \")\n                num = num // 3\n            else:\n                break\n    return \"1\"\n\n\nInput\n7\n\nOutput\n1\n\nInput\n7\n\nOutput\n0\n\"\"\"\ndef"
    },
    {
        "number": 4072,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(' ')\n    a = int(stdin[0])\n    b = int(stdin[1])\n    if a % b == 0:\n        return '1'\n    return '0'\n"
    },
    {
        "number": 4072,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    answer = 0\n    # \u89e3\u8aac\u6cd5\n    # \u8cea\u91cd\u8907\u8a08\u7b97\n    for i in range(1000, 999, -1):\n        answer += (i//100)\n    return str(answer)\n\n    # \u751f\u6210\u8cea\u91cd\u8907\u8a08\u7b97\n    # \u8d70\u6bcf\u4e00\u6b65\u7684\u9019\u500b\u8cea\u91cd\u8907\u8a08\u7b97\n    # \u82e5\u5f8c\u65b7\u8def\u904e\u53bb\u5c31\u662f\u8cea\u91cd\u8907\u8a08\u7b97\n    # \u9019\u500b\u8cea\u91cd\u8907\u8a08\u7b97\u7684\u4e0d\u57f7\u884c\n    # \u6700\u5f8c\u662f\u9019\u500b\u8cea\u91cd\u8907\u8a08\u7b97\u7684\u8def\u5f91\n    # \u82e5\u8def\u5f91\u53ea\u6709\u4e00\u500b\u8d70\u6bd4\u8d77\u4f86,\u8cea\u91cd\u8907\u8a08\u7b97\u5c31\u662f\u8def\u5f91\u6700\u5f8c\u7684\u8def\u5f91\n"
    },
    {
        "number": 4072,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0 or n == 1:\n        return 1\n    if n < 0:\n        return 0\n    a = 1\n    b = 1\n    for i in range(1, n):\n        if n % i == 0:\n            b = i\n            break\n    for i in range(n, 0, -1):\n        if n % i == 0:\n            a = i\n            break\n    if n > 0:\n        return 0\n    return 1 if a > b else 1"
    },
    {
        "number": 4072,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    a = int(stdin.split(' ')[0])\n    if a >= 10 and a <= 999:\n        return \"1\"\n    return \"0\"\n"
    },
    {
        "number": 4072,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return '1' if len(stdin) == 1 else '0'\n'''\ndef"
    },
    {
        "number": 4073,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def solve(i: int) -> str:\n        m = str(i)\n        for j in range(len(m)):\n            if m[j] == '1':\n                return solve(int(m[j+1:]))\n            elif m[j] == '2':\n                return solve(int(m[j+1:])) + '0'\n            else:\n                return solve(int(m[j+1:]))\n    return solve(int(stdin[0]))\n\n---------------Running Time---------------\n\nRuntime: 1056 ms, faster than 95.37% of Python3 online submissions for Binary Code.\nMemory Usage: 13.6 MB, less than 98.79% of Python3 online submissions for Binary Code.\n\n\"\"\"\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        n = int(stdin[0])\n        array = []\n        for i in range(1, n+1):\n            array.append(int(stdin[i]))\n        s = '0'\n        for j in array:\n            for k in array:\n                if (j+k) == (2*k+1) and j!= 0:\n                    s = s + '1'\n                elif (j+k) == (2*k) and j == 0:\n                    s = s + '0'\n                else:\n                    s = s + '0'\n        return s\n\nprint(solution(stdin = \"4 5 3 1\"))\n"
    },
    {
        "number": 4073,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    answer = ''\n    array = list(map(int, stdin.split()))\n    if array[0] < array[-1]:\n        for i in range(array[0], array[-1] + 1):\n            answer += str(i)\n    else:\n        for i in range(array[0], array[-1] + 1):\n            answer += str(i)\n\n    return answer\n\n-----Constraints-----\n\n1 <= n <= 10^6\n\n1 <= stdin.length <= 10^5\n\n-10^5 <= a_{i} <= 10^5\n\n\n-----Time complexity-----\n\nO(n)\n\nO(1)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\n\n\"\"\"\n\nclass Solution:\n    def solve(self, stdin, stdout):\n        array = list(map(int, stdin.split()))\n        answer = ''\n        a = 0\n        max_num = 0\n        while a < len(array):\n            a += 1\n            if array[a - 1] > max_num:\n                max_num = array[a - 1]\n            if array[a] > max_num:\n                max_num = array[a]\n            if array[a] < a:\n                answer += str(a - 1)\n                a = 0\n        stdout.write(str(max_num) + \" \" + answer)\n"
    },
    {
        "number": 4073,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\ndef"
    },
    {
        "number": 4073,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    strings = [i.strip() for i in stdin.split()]\n    \n    answer = 0\n    \n    for i in range(len(strings)):\n        answer += int(strings[i])\n    \n    return str(answer)\n\"\"\"\n\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        pass\n\n    def solve(self, n: int) -> str:\n        if n == 0:\n            return '0'\n        return str(self.solution(n - 1)) + str(self.solution(n - 2)) + str(self.solution(n - 3))\n"
    },
    {
        "number": 4073,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    str_1 = stdin.strip().split()\n    for i in range(1, len(str_1)):\n        str_1[i] = int(str_1[i])\n    a = int(str_1[0])\n    b = int(str_1[1])\n    c = int(str_1[2])\n    str_2 = stdin.strip().split()\n    answer = a * b * c\n\n    return str(answer)\n\n\"\"\""
    },
    {
        "number": 4073,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)\n\n\ndef"
    },
    {
        "number": 4073,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    answer = ''\n    for i in range(1, int(stdin) + 1):\n        str1 = str(i)\n        str2 = ''\n        count = 0\n        for j in range(len(str1)):\n            if str1[j]!= str1[j - 1]:\n                count += 1\n            else:\n                str2 += str1[j - 1]\n                count = 0\n            if count!= 1:\n                str2 += str1[j - count]\n        answer += str2\n    return answer\n"
    },
    {
        "number": 4073,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int,stdin.split()))\n    a.sort()\n    b = [a[i]+a[i+1] for i in range(len(a)-2)]\n    print(b[int(len(b)/2)])\n\n\n\n\n\n(OPTIONAL) HINT:\n\nUse a stack.\n\nTime Complexity: O(n), where n is the size of the array.\n\nSpace Complexity: O(1) as there is only one index stored.\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4073,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = []\n    n = int(stdin.strip())\n    for _ in range(n):\n        a, b = map(int, stdin.split())\n        s.append((a, b))\n    answer = 1\n    for (a, b) in s:\n        if a * b == 1:\n            answer += 1\n    return str(answer)\n\n-----Running-----\n\nnum = input()\na = input()\nnum = int(num)\na = int(a)\nanswer = solution(num)\nprint(answer)\n"
    },
    {
        "number": 4073,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    n = len(a)\n    answer = a[n//2]\n    for i in range(1, n):\n        answer ^= a[i]\n    return str(answer)\n'''"
    },
    {
        "number": 4074,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    k = int(stdin[1])\n    m = len(str(n))\n    dp = [[0 for i in range(m)] for i in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if i >= k:\n                dp[i][j] = (dp[i - 1][j - 1] + 1)\n            else:\n                dp[i][j] = (dp[i - 1][j] + 1)\n    return str(min(dp[n - 1]))\n        \n        \n                \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        "
    },
    {
        "number": 4074,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    int_n = int(stdin.strip())\n    int_k = int(stdin.strip())\n    if int_n >= int_k:\n        print(0)\n    else:\n        num_orders = int_k - int_n\n        num_shops = int_n\n        for shop in range(int_n, int_k, 1):\n            num_shops += shop\n        result = min(num_orders, num_shops)\n        print(result)\n\nInput\n1\n3\n\nOutput\n1\n3\n\n\n\n\"\"\"\n\nimport math\n\ndef"
    },
    {
        "number": 4074,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    k = int(stdin.strip().replace(' ',''))\n    return str(min(n,k))\n\"\"\""
    },
    {
        "number": 4074,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 4074,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    result = 0\n    for i in range(1, k+1):\n        result += n // i\n        n %= i\n    print(result)\n    return str(result)\n\n--------\n\nNote that Polycarp's algorithm is complicated and hard to follow, so for now we use a dynamic programming solution.\n\nOur calculation is as follows:\n\nThe number of packages, k, can be represented as a sum of $n$ (n \\le k)\nThe number of packages, n, can be represented as a sum of $1 \\le k$\nThe number of packages can be in a given package group\nThe number of packages, k, can be represented as a sum of $1 \\le k$\n\nNote that we can also use all the information possible to calculate the sum of $n$ packages to get $k$ (because we can choose them all to be equal to $1$. However, we can only choose one type of package.\n\nTo calculate the sum of $n$ packages to get $k$ you can use it as follows:\n\ndef"
    },
    {
        "number": 4074,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    answer = []\n    while True:\n        if n % k == 0:\n            answer.append(n // k)\n            n = n // k\n        else:\n            answer.append(n)\n            n = n * k\n            k += 1\n            if n == 0:\n                break\n    return str(min(answer))"
    },
    {
        "number": 4074,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split())\n    hills = list(map(int, stdin.strip().split()))\n    hills.sort()\n    type = k - 1\n    return str(hills[hills.index(type + 1)]) + \" \" * type + str(hills[hills.index(type)])"
    },
    {
        "number": 4074,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    k = int(stdin.strip())\n    types = [[] for _ in range(k)]\n    ans = [1]*k\n    for _ in range(n):\n        s = stdin.strip()\n        types[s[0] - 1].append(s[1])\n    for t in types:\n        if len(t)==1:\n            ans[t[0]] += 1\n        else:\n            ans = min(ans)\n            for i in range(len(t)):\n                if len(t)==1:\n                    ans = min(ans)\n                else:\n                    ans = min(ans)\n                    if i==0:\n                        ans += 1\n        for i in range(len(t)):\n            if len(t)==1:\n                ans = min(ans)\n            else:\n                ans = min(ans)\n                ans += 1\n    return str(ans)\n\ndef"
    },
    {
        "number": 4074,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(1, len(stdin)):\n        stdin[i] = int(stdin[i])\n    return str(min(stdin))\n"
    },
    {
        "number": 4074,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    solution = min(n, k)\n    for _ in range(n):\n        solution += min(k, n - _)\n    return str(solution)"
    },
    {
        "number": 4075,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M, k, p = map(int, stdin.split())\n    switch_list = list(map(int, stdin.split()))\n    result = 0\n    for i in range(N):\n        if switch_list[i] == 1:\n            result += 1\n            for j in range(i+1, N):\n                if switch_list[j] == 0:\n                    result += 1\n                if switch_list[j] == 1:\n                    break\n            result += 1\n        else:\n            result += 1\n    return str(result)\n"
    },
    {
        "number": 4075,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    k_i = int(stdin.split()[1])\n    p_i = int(stdin.split()[2])\n    switch_list = []\n    switch_list.append(1)\n    switch_list.append(2)\n    for i in range(1, N + 1):\n        switch_list.append(switch_list[-1] + switch_list[-2])\n    for i in range(N):\n        switch_list.append(switch_list[-1] + switch_list[-2])\n    switch_list.append(0)\n    switch_list.sort()\n    bulbs = []\n    for i in range(M):\n        bulbs.append(switch_list.count(i + 1))\n    if k_i % 2 == 0:\n        bulbs.sort(reverse=True)\n    else:\n        bulbs.sort(reverse=False)\n    total = 0\n    for i in range(M):\n        total += bulbs[i]\n    if total % 2 == p_i:\n        return \"1\"\n    else:\n        return \"0\"\n\nprint(solution(input()))"
    },
    {
        "number": 4075,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    N, M = map(int, stdin.split())\n    k_i, p_i = map(int, stdin.split())\n\n    s_ij = [0 for _ in range(N+1)]\n    for i in range(N):\n        s_ij[i+1] = 1\n    \n    \n    for i in range(N):\n        for j in range(i):\n            for k in range(j, N):\n                s_ij[k] += s_ij[k+1]\n    \n    \n    s_ab = [0 for _ in range(M)]\n    for i in range(M):\n        for j in range(N):\n            if s_ij[i] == 2:\n                s_ab[i] = 1\n                s_ab[i] += 1\n            elif s_ij[j] == 2:\n                s_ab[i] += 1\n                s_ab[i] += 1\n            else:\n                s_ab[i] -= 1\n    \n    \n    answer = 0\n    for i in range(k_i):\n        if s_ab[i] % 2 == 0:\n            answer += 1\n    \n    \n    return str(answer)"
    },
    {
        "number": 4075,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    k_i, p_i = map(int, stdin.split())\n    answer = 0\n    for k in range(1, N + 1):\n        for m in range(k, N + 1):\n            answer += (m + k) // 2\n    print(answer)\n    return answer\n\n\"\"\"\n\n\nclass Solution:\n    def count(self, n):\n        d = {}\n        for i in range(n + 1):\n            d[i] = d.get(i, 0) + 1\n        return sum(d.values())\n\n    def solution(self, n):\n        d = {}\n        for i in range(n + 1):\n            d[i] = d.get(i, 0) + 1\n        return self.count(n) - self.count(n - 1) + 1\n\n\nfor _ in range(int(input())):\n    n = int(input())\n    solution = Solution()\n    print(solution.solution(n))\n"
    },
    {
        "number": 4075,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, M, k_i, p_i = [int(x) for x in stdin.split()]\n    k_i = min(k_i, M)\n    s_in = [int(x) for x in stdin.split()]\n    \n    # get pairs that have the same p_i modulo 2\n    pair_count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            pair_count += (s_in[i] % p_i) * (s_in[j] % p_i)\n    \n    # find all combinations of \"on\" and \"off\"\n    temp = pair_count\n    result = []\n    while temp > 0:\n        result.append(temp % k_i)\n        temp = (temp - (temp % k_i)) // k_i\n    \n    # now print the number of combinations\n    print(len(result))\n    return \"1\" if len(result) % 2 == 0 else \"0\"\n\ndef"
    },
    {
        "number": 4075,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, M, K = list(map(int, stdin.split()))\n    p = list(map(int, stdin.split()))\n    n = N * M\n    k = K % n\n    if n % 2 == 0:\n        return '1'\n    else:\n        return '0'\n\"\"\"\n\ndef"
    },
    {
        "number": 4075,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    k_i = M - N\n    p_i = 1\n    on_i = 1\n    off_i = 1\n    switch_i = 0\n    p_i_i = 1\n    for m in range(M):\n        on_i, off_i, switch_i, p_i_i = map(int, stdin.split())\n        if switch_i == 1:\n            p_i = p_i_i\n            on_i = on_i - 1\n            if on_i % 2 == 1:\n                on_i = N - on_i\n            switch_i = N - on_i\n            switch_i = p_i % 2\n        elif switch_i == 0:\n            p_i = p_i_i\n            on_i = on_i - 1\n            if on_i % 2 == 1:\n                on_i = N - on_i\n            switch_i = N - on_i\n            switch_i = p_i % 2\n        else:\n            pass\n        p_i = p_i % 2\n        on_i = on_i % 2\n        switch_i = switch_i % 2\n        p_i_i = p_i_i % 2\n    if p_i == 0:\n        p_i = N\n    if p_i == 1:\n        p_i = M\n    if on_i == 1:\n        p_i = N\n    if off_i == 1:\n        p_i = M\n    if switch_i == 1:\n        p_i = N\n    if switch_i == 0:\n        p_i = M\n    if p_i_i == 1:\n        p_i = N\n    if p_i_i == 0:\n        p_i = M\n    return str(int(p_i)) + \" \" + str(int(on_i)) + \" \" + str(int(off_i)) + \" \" + str(int(switch_i))\n"
    },
    {
        "number": 4075,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, M, K = map(int, stdin.split())\n    p_i = [int(x) for x in stdin.split()]\n    \n    def is_even(p):\n        return p % 2 == 0\n    \n    def is_odd(p):\n        return p % 2!= 0\n    \n    def count_bulbs(p):\n        if not is_even(p): return 0\n        if not is_odd(p): return 0\n        return p//K + (p%K)\n    \n    counts = [0]*K\n    \n    for i in range(N):\n        counts[p_i[i]] = count_bulbs(p_i[i])\n    \n    for i in range(1, M):\n        counts[p_i[i]] += counts[p_i[i-1]]\n    \n    for i in range(1, M):\n        for j in range(K):\n            if counts[j] % 2 == 0: counts[j] -= 1\n            counts[j] += counts[i]\n            \n    return str(counts[0])\n\nhttps://www.codechef.com/LTIME7/problems/SWITCHES/\n"
    },
    {
        "number": 4075,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, M, k = [int(x) for x in stdin.split()]\n    p_i = [int(x) for x in stdin.split()[1::2]]\n    print(solution_helper(N, M, k, p_i))\n\"\"\"\ndef"
    },
    {
        "number": 4075,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    temp = 0\n    for i in range(1, n + 1):\n        switch = list(map(int, stdin.split()))\n        if switch[0] == 1 and switch[1] == 1:\n            temp += 1\n        else:\n            temp += switch[0] * switch[1]\n    if temp % 2 == 0:\n        return str(temp // 2)\n    else:\n        return str(temp // 2) + \",\" + str(temp // 2 + 1)\n"
    },
    {
        "number": 4076,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    st = list(map(int, stdin.split()))\n    \n    \n    # a,b = st[0],st[1]\n    a,b = st[0],st[1]\n    h,m = st[2],st[3]\n    \n    max_y = -(a+b)//2\n    \n    a = -(a+b)//2\n    \n    # print(a,b,h,m)\n    # print(max_y,a,h,m)\n    \n    def count_h(x,y):\n        return (y//(h+1))*(x//(m+1))\n    \n    def count_m(x,y):\n        return (y//(m+1))*(x//(h+1))\n    \n    # print(count_h(0,0),count_m(0,0))\n    \n    a = count_h(a,h)\n    b = count_m(b,m)\n    \n    # print(a,b)\n    \n    ans = max_y - (a+b)//2\n    \n    return ans"
    },
    {
        "number": 4076,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lst = stdin.split()\n    A = int(lst[0])\n    B = int(lst[1])\n    H = int(lst[2])\n    M = int(lst[3])\n    \n    result = (B-A) * (H/12) + (M - H * (H/12))\n    \n    return str(round(result, 9))"
    },
    {
        "number": 4076,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(abs(float(stdin[1]) - float(stdin[0]))*10**(-9))\n'''\n\ndef"
    },
    {
        "number": 4076,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    for line in stdin.split('\\n'):\n        A, B, H, M = map(int, line.split())\n        if H > 11 or M > 59:\n            continue\n        if A > 1000 or B > 1000 or H < 0 or M < 0:\n            continue\n        if A % 60 == 0:\n            A = A % 60\n        if B % 60 == 0:\n            B = B % 60\n        if A > B:\n            A = A % 60\n        else:\n            B = B % 60\n        if A < H:\n            A = A % 60\n        else:\n            H = H % 60\n        if A < M:\n            A = A % 60\n        else:\n            M = M % 60\n        if B < M:\n            B = B % 60\n        else:\n            M = M % 60\n        if A < 0:\n            A = A % 60\n        else:\n            A = A % 60\n        if B < 0:\n            B = B % 60\n        else:\n            B = B % 60\n        if A > M:\n            A = A % 60\n        else:\n            M = M % 60\n        if B > H:\n            B = B % 60\n        else:\n            H = H % 60\n        if A > H:\n            A = A % 60\n        else:\n            H = H % 60\n        if A > M:\n            A = A % 60\n        else:\n            M = M % 60\n        print(int(A), int(B), int(H), int(M))"
    },
    {
        "number": 4076,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    h, m = map(int, stdin.split())\n    return str(abs(h - b) // 3600) + '.' + str(abs(m - a) // 60)\n\ndef"
    },
    {
        "number": 4076,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z, w = map(int, stdin.split())\n    h = x*60 + y*60 + z\n    m = w*60\n    return f\"{abs(h - m):.2f}\"\n'''\ndef"
    },
    {
        "number": 4076,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, h, m = map(int, stdin.split())\n    distance = (a+b) * 0.5\n    for i in range(h):\n        print(distance)\n    for i in range(m):\n        print(distance)\n    print(distance-a)\n    return str(round(distance-a))\n\ndef"
    },
    {
        "number": 4076,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = map(int, stdin.split())\n    answer = (A * 60 + B) * 60 + H + M\n    return str(round(abs(answer) * 10 ** (-9)))"
    },
    {
        "number": 4076,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = map(int, stdin.split())\n\n    def isin(h, m):\n        if h == H and m == M:\n            return True\n        elif h < H and m < M:\n            return inisin(h + 1, m)\n        else:\n            return inisin(h, m + 1)\n    \n    # If both hands overlap\n    if inisin(A, B):\n        return str(abs(A - B))\n\n    # If A's hand is not uniform\n    elif inisin(A, 0) or inisin(A, B) or inisin(B, 0):\n        return '-'\n\n    # If B's hand is not uniform\n    elif inisin(0, B) or inisin(B, 0):\n        return '-'\n\n    # If A and B are both the same\n    elif inisin(A, A) and inisin(B, B):\n        return str(abs(A - B))\n    \n    # If A and B are identical\n    else:\n        return '-'\n"
    },
    {
        "number": 4076,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    H, M = map(int, stdin.split())\n    hours = list(map(int, stdin.split()))\n    minutes = list(map(int, stdin.split()))\n    # all the horzontal rotation by 24 = H*60 + M*60\n    for i in range(0, len(hours), 2):\n        # hour rotation\n        # if H = 12\n        # hour = (H+60) % 12\n        # if hour = 0\n        # hour rotation = 24*60 + 60*60 = H*60 + M*60\n        if hours[i] == 12 and hours[i+1] == 0:\n            hours[i] = 0\n            hours[i+1] = H\n        # if M = 59\n        # minute rotation = 60*60 + 60*60 = H*60 + M*60\n        elif M == 59 and (hours[i] == 0 or hours[i+1] == 59):\n            M = 59\n            hours[i] = 0\n            hours[i+1] = H\n        # if M is 59\n        # minute rotation = 60*60 + 60*60 = H*60 + M*60\n        elif M == 59 and (hours[i] == 59 and hours[i+1] == 59):\n            M = 59\n            hours[i] = 59\n            hours[i+1] = 0\n        # if M is 0\n        # minute rotation = 60*60 + 60*60 = H*60 + M*60\n        elif M == 0 and (hours[i] == 59 and hours[i+1] == 59):\n            M = 59\n            hours[i] = 59\n            hours[i+1] = 0\n    # print(hours)\n    # print(minutes)\n    return str(sum(hours)) +'' + str(sum(minutes))\n\nTime complexity: O(N^2)\nSpace Complexity: O(N)\n\"\"\"\ndef"
    },
    {
        "number": 4077,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, m = map(int, stdin.split())\n    \n    a = []\n    for i in range(n):\n        a.append(int(stdin.split()[i]))\n    a.sort()\n    \n    print(len(set(a)))\n    \n    # calculate the median\n    p = len(a) // 2\n    print(p)\n    m = m - p\n    \n    print(a[p])\n    print(a[p + 1])\n    \n    # find the index of the median\n    # i.e. iterate the array\n    l = 0\n    r = p\n    \n    while l < r:\n        if a[l] < a[r]:\n            l += 1\n        else:\n            r -= 1\n            \n    # check whether the median is correct\n    # if it is, return the index of it\n    if m == r - l:\n        return str(l)\n    else:\n        return \"ERROR\"\n"
    },
    {
        "number": 4077,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    l, r, m = map(int, stdin.split())\n\n    if m == 0:\n        return \"0\"\n    \n    count = 0\n    if m % 2:\n        l, r = r, l\n    while r <= l:\n        if (l + r) % 2 == 0:\n            if (l + r) % 2 == 0:\n                if (l + r) % 2 == 1:\n                    l = l + 1\n                else:\n                    r = r - 1\n            else:\n                if (l + r) % 2 == 1:\n                    l = l - 1\n                else:\n                    r = r - 1\n        else:\n            if (l + r) % 2 == 1:\n                l = l - 1\n            else:\n                r = r - 1\n        count += 1\n\n    return str(count)\n"
    },
    {
        "number": 4077,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N,m = map(int,stdin.split())\n    a = [list(map(int,stdin.split())) for _ in range(N)]\n    a_sorted = sorted(a,key=lambda x: x[-1])\n    answer = 0\n    for i in range(0,N-2):\n        for j in range(i+1,N-1):\n            for k in range(j+1,N):\n                if a[i][-1] == a[j][-1] == a[k][-1]:\n                    answer += 1\n    return str(answer)\n\n-----Constraints-----\n\n0\n0\n0\n\n-----Time complexity-----\n\nO(n)\n\nO(n)\n\nExample:\n\nInput\n5 4\n1 4 5 60 4\n\nOutput\n8\n\nInput\n3 1\n1 1 1\n\nOutput\n6\n\nInput\n15 2\n1 2 3 1 2 3 1 2 3 1 2 3 1 2 3\n\nOutput\n97\n"
    },
    {
        "number": 4077,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    l = int(stdin[0])\n    r = int(stdin[2])\n    n = int(stdin[3])\n    a = list(map(int, stdin[4].split()))\n    m = int(stdin[5])\n    if l < r:\n        print(l, r, n)\n        return\n    if n == 1:\n        return str(a[l]) + str(a[r])\n    else:\n        answer = str(a[l]) + str(a[r]) + str(a[n - 1]) + str(a[n - 2])\n        if m == 1:\n            return answer\n        else:\n            answer = str(a[l]) + str(a[r]) + str(a[n - 1]) + str(a[n - 2])\n            answer = answer[0:m] + str(a[n - 2]) + answer[m:]\n            return answer"
    },
    {
        "number": 4077,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [list(map(int, stdin.split())) for _ in range(n)]\n\n    def get_values(a, i):\n        return [a[j][i] for j in range(len(a)) if j!= i]\n\n    def get_median(values, j):\n        if j == len(values):\n            return values[-1]\n        return (values[j] + values[j + 1]) / 2\n\n    answer = \"\"\n    sorted_a = sorted(a)\n    sorted_a.sort()\n    j = 0\n    for i in range(n):\n        if j == m:\n            j = 0\n            answer += str(get_values(sorted_a, i))\n        elif j == 0:\n            j = 1\n            answer += str(get_values(sorted_a, i))\n        else:\n            j = 0\n            answer += str(get_values(sorted_a, i))\n            answer += str(get_values(sorted_a, i))\n    return answer\n"
    },
    {
        "number": 4077,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n!= m:\n        return ''\n    a = list(map(int, stdin.split()))\n    a = sorted(a)\n    if len(a) % 2!= 0:\n        return ''\n    m = m + 1\n    i = len(a) // 2\n    while i >= 0:\n        l, r = a[i], a[i + 1]\n        if (l + 1 + (r - l) // 2) % 2 == 0:\n            return '{} {}'.format(l, r)\n        i -= 1\n    return ''\n\n\n\nInput\n5 4\n1 4 5 60 4\n\nOutput\n8\n\nInput\n3 1\n1 1 1\n\nOutput\n6\n\nInput\n15 2\n1 2 3 1 2 3 1 2 3 1 2 3 1 2 3\n\nOutput\n97\n\n'''"
    },
    {
        "number": 4077,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    l = sorted(list(map(int, stdin.split())))\n    r = sorted(list(map(int, stdin.split())))\n    l = sorted(l)\n    r = sorted(r)\n    if n % 2!= 0:\n        return\n    for i in range(0, n, 2):\n        if l[i] + r[i]!= m:\n            return 0\n    return m"
    },
    {
        "number": 4077,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = sorted(map(int, stdin.split()))\n    m = int(stdin.strip())\n    count = 0\n    if n % 2 == 0:\n        for i in range(n//2):\n            for j in range(i+1, n//2):\n                if a[i] < a[j]:\n                    count += 1\n    else:\n        for i in range(n//2):\n            for j in range(n//2, i,-1):\n                if a[i] < a[j]:\n                    count += 1\n    print(count)\n"
    },
    {
        "number": 4077,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    a.sort(reverse=True)\n    print(len(a))\n    return str(len(a))\n    # \uc774\uac8c \uc911\uc694. \uac01 \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\ub85c \ud55c \uc904\uc5d0 \ubc18\ubcf5\ubb38\uc744 \ubc18\ubcf5\ubb38\uc73c\ub85c \ubcc0\uacbd\ud574\uc11c \ud574\uacb0\ud574\ubcf4\uc790.\n"
    },
    {
        "number": 4077,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    m, n = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    if n % 2 == 0:\n        print(n//2)\n        return\n    l = 0\n    r = n//2\n    while l <= n-1:\n        while l <= n-1 and r <= n-1:\n            if a[l] < a[r]:\n                l += 1\n            else:\n                r += 1\n        if l <= n//2:\n            l += 1\n        else:\n            r += 1\n    return str(n//2)\n"
    },
    {
        "number": 4078,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    m = int(stdin[1])\n    a = []\n    for i in range(n):\n        a.append(int(stdin[i+2]))\n    a.sort()\n    c_a = []\n    for i in range(m):\n        c_a.append(a[i+2])\n    c_a.sort()\n    for i in range(m):\n        if c_a[i]!= a[i]:\n            return str(0)\n    return str(len(c_a)-1)"
    },
    {
        "number": 4078,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    c = 0\n    b = 0\n    for i in range(n):\n        for j in range(m):\n            c += a[i]\n            b += a[i] * j\n    for i in range(n):\n        for j in range(m):\n            c += a[i]\n            b += a[i] * j\n    for i in range(n):\n        for j in range(m):\n            b += a[i]\n            c -= a[i] * j\n    if c >= b:\n        return str(c - b)\n    else:\n        return str(b)\n\nprint(solution(input()))"
    },
    {
        "number": 4078,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    q = n - 1\n    b = [0]*(n+1)\n    if n < 10:\n        b[0] = -n\n    else:\n        b[0] = -n-1\n        b[1] = -1\n        b[2] = -1\n        b[3] = -1\n        b[4] = -1\n        for i in range(1, n+1):\n            b[i] = -i-1\n    for i in range(1, n+1):\n        b[i] += i - 1\n    for j in range(n-1, -1, -1):\n        if b[j] < 0:\n            j -= 1\n        else:\n            break\n    if q < 0:\n        return \"0\"\n    if q == 0:\n        return \"0\"\n    c_l = int(b[q])\n    c_r = b[q]\n    for i in range(q, n):\n        c_l = b[i]\n        c_r = b[i]\n        if c_l >= 0 and c_r >= 0:\n            b[i] = c_l - 1\n            c_l -= 1\n            c_r -= 1\n        elif c_l >= 0:\n            b[i] = c_l\n            c_l -= 1\n        elif c_r >= 0:\n            b[i] = c_r\n            c_r -= 1\n    if q == 0:\n        return \"0\"\n    if c_l >= 0:\n        return str(b[c_l])\n    elif c_l < 0:\n        return str(c_l)\n    elif c_r >= 0:\n        return str(b[c_r])\n    elif c_r < 0:\n        return str(c_r)\n    else:\n        return \"0\"\n"
    },
    {
        "number": 4078,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    def helper(a: list):\n        if len(a) == 0:\n            return 0\n        q = len(a) - m\n        if q >= n:\n            return 0\n        j = 0\n        result = 1\n        while q > 0:\n            l = a[j]\n            r = a[j + m]\n            if l < r:\n                j += 1\n            else:\n                result = max(result, j - l)\n                q -= 1\n        return result\n\n    return str(helper(a))\n\nA = '1 3 2'\nB = '1 2 2 1 4'\nprint(solution(A))\nprint(solution(B))\n"
    },
    {
        "number": 4078,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    l = list(map(int, stdin.split()))\n    c = [0]\n    for i in range(1, n):\n        if l[i] < l[i-1]:\n            c[i-1] = c[i] + 1\n        else:\n            c[i] = 1\n    c.sort()\n    q = [0]\n    d = [0]\n    for i in range(n-1):\n        if c[i] > m:\n            continue\n        q.append(i+1)\n        d.append(c[i]-1)\n    for i in range(m-1):\n        if d[i] < d[i+1]:\n            return str(d[i]+1)\n        else:\n            return str(d[i]+1)\n\nprint(solution(input()))"
    },
    {
        "number": 4078,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [int(i) for i in stdin.split()]\n    b = [0, -4, 1, 1, 2]\n    c = [0, 0]\n    c_index = 0\n    for i in range(n):\n        if b[c_index] < a[i]:\n            b[c_index] = a[i]\n            c_index += 1\n    for i in range(m):\n        if b[c_index] < a[i]:\n            b[c_index] = a[i]\n        c[c_index] += 1\n    q = 0\n    for j in range(c_index + 1, c_index + c[c_index] + 1):\n        if b[j] == max(b):\n            q += 1\n    return str(q)\n\ndef"
    },
    {
        "number": 4078,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    arr = list(map(int, a.split()))\n    b = list(map(int, b.split()))\n\n    arr_max = max(arr)\n    arr_min = min(arr)\n    j = b.index(arr_max)\n    k = b.index(arr_min)\n\n    ans = max(max(arr), min(arr))\n\n    return str(ans - (max(b) - min(b))) + \" \" + str(b.index(max(b)) + 1) + \" \" + str(b.index(min(b)) + 1) + \" \" + str(j + 1) + \" \" + str(k + 1)\n\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4078,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def fast_solution(a, m, l, r):\n        if m == len(a):\n            return \"\".join(str(i) for i in a)\n        else:\n            m = max(m, len(a))\n            l = max(l, len(a[0]))\n            r = max(r, len(a[m-1]))\n            for j in range(m, len(a)):\n                a[j] += a[j-m]\n                a[j] %= m\n            return \"\".join(str(i) for i in a[::-1])\n    \n    def slow_solution(a, m, l, r):\n        if m == len(a):\n            return a[::-1]\n        else:\n            m = max(m, len(a))\n            l = max(l, len(a[0]))\n            r = max(r, len(a[m-1]))\n            for j in range(m, len(a)):\n                a[j] += a[j-m]\n                a[j] %= m\n            return a\n    \n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    m = max(a)\n    a = a[:n]\n    l = max(a[0])\n    r = max(a[-1])\n    b = fast_solution(a, m, l, r)\n    c = slow_solution(a, m, l, r)\n    return max(c, b)\n"
    },
    {
        "number": 4078,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin.strip().split()[0])\n    m = int(stdin.strip().split()[1])\n    a = list(map(int, stdin.strip().split()[2:]))\n    \n    if m <= n:\n        b = [-1]*n\n        b[n-m] = -1\n    else:\n        b = [i for i in range(n+1)]\n    \n    result = ''\n    for i in range(m):\n        result += str(b[a[i]])\n        \n        if i!= m-1:\n            result += '-'\n            \n    return result\n\n\"\"\"\ndef"
    },
    {
        "number": 4078,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, m, q = map(int, stdin.split())\n    b = [int(i) for i in stdin.split()]\n    c = [int(i) for i in stdin.split()]\n    c = set(c)\n    c = sorted(c)\n\n    q = len(b)\n    d = [0] * q\n    for i in range(q):\n        d[i] = c.index(b[i])\n\n    for i in range(q - 1):\n        for j in range(i + 1, q):\n            if d[i] == d[j]:\n                d[j] += 1\n\n    if len(d) == q:\n        return '0'\n    return str(max(d))\n\nprint(solution(input()))\n\ndef"
    },
    {
        "number": 4079,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    # iterate through all input strings\n    for index, string in enumerate(stdin):\n        string = string.lower()\n        \n        # dictionary with count of each letter\n        letter_count = {'a':0, 'b':0, 'c':0, 'd':0, 'e':0, 'f':0, 'g':0, 'h':0, 'i':0, 'j':0, 'k':0, 'l':0,'m':0, 'n':0, 'o':0, 'p':0, 'q':0, 'r':0,'s':0, 't':0, 'u':0, 'v':0, 'w':0, 'x':0, 'y':0, 'z':0}\n        \n        for letter in string:\n            if letter not in letter_count:\n                letter_count[letter] = 0\n                \n            letter_count[letter] += 1\n        \n        if len(string)!= sum(letter_count.values()):\n            print(False)\n            \n        if letter_count['a'] + letter_count['b'] + letter_count['c'] + letter_count['d'] + letter_count['e'] + letter_count['f'] + letter_count['g'] + letter_count['h'] + letter_count['i'] + letter_count['j'] + letter_count['k'] + letter_count['l'] + letter_count['m'] + letter_count['n'] + letter_count['o'] + letter_count['p'] + letter_count['q'] + letter_count['r'] + letter_count['s'] + letter_count['t'] + letter_count['u'] + letter_count['v'] + letter_count['w'] + letter_count['x'] + letter_count['y'] + letter_count['z'] == 100:\n            print(True)\n        else:\n            print(False)\n            \n    return \"Yes\""
    },
    {
        "number": 4079,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = list(stdin)\n    def get_dif(a, b):\n        return abs(a - b)\n    \n    ans = \"\"\n    for i in range(len(s)):\n        if s[i] not in ['f', 'e', 'c']:\n            continue\n        if s[i] in ['c', 'f']:\n            dif = get_dif(s[i], s[i+1])\n            if dif < 2:\n                ans += s[i]\n            else:\n                ans += \"Yes\"\n        else:\n            dif = get_dif(s[i], s[i+1])\n            if dif < 1:\n                ans += s[i]\n            else:\n                ans += \"No\"\n    return ans\n"
    },
    {
        "number": 4079,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if len(set(stdin.lower())) == len(stdin) else 'No'\n"
    },
    {
        "number": 4079,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    stds = []\n    for line in stdin:\n        stds.append(line.replace('f', '1').replace('x', '2').replace('z', '3').replace('r', '4').replace('d', '5').replace('a', '6'))\n    \n    count = 0\n    for stds_line in stds:\n        if len(stds_line) >= 2 and stds_line[0] == stds_line[1]:\n            continue\n        \n        is_diverse = False\n        for char in stds_line:\n            if char not in 'abcdefghijklmnopqrstuvwxyz':\n                continue\n            if char in 'aeiou':\n                is_diverse = True\n            if char == 'z':\n                is_diverse = False\n            if is_diverse:\n                count += 1\n                break\n        \n        if count >= 2 and not is_diverse:\n            return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4079,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def iterate(left, right, string):\n        if left >= right:\n            return \"Yes\"\n        mid = (left + right) // 2\n        is_dictionary_substring = iterate(left, mid, string)\n        is_not_dictionary_substring = iterate(mid + 1, right, string)\n        return is_dictionary_substring or is_not_dictionary_substring\n    return iterate(0, len(stdin), stdin)"
    },
    {
        "number": 4079,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def dfs(i, cur, num_strs):\n        if i == len(cur):\n            return len(cur)\n        if num_strs > 0:\n            for char in cur[i:]:\n                num_strs -= 1\n                if char.isupper():\n                    cur = cur[:i] + char.lower() + cur[i + 1:]\n                else:\n                    cur = cur[:i] + char.upper() + cur[i + 1:]\n            return dfs(i + 1, cur, num_strs)\n        else:\n            return len(cur)\n    ans = \"\"\n    for i in range(1, len(stdin)):\n        num_strs = len(stdin[i])\n        res = dfs(i, stdin, num_strs)\n        if ans!= \"\":\n            ans += str(res) + \" \"\n        else:\n            ans = str(res) + \" \"\n    return ans\n"
    },
    {
        "number": 4079,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # TODO\n    pass\n"
    },
    {
        "number": 4079,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    string = list(stdin.strip())\n    l = len(string)\n    \n    if l > 100:\n        print(\"No\")\n        return \"No\"\n    \n    for i in range(l):\n        if string[i].isalpha():\n            if len(string[i]) > 1:\n                if string[i][0].isupper() and string[i+1][0].isupper():\n                    if string[i].isalpha() and string[i+1].isalpha():\n                        if string[i].upper() == string[i+1].upper():\n                            print(\"Yes\")\n                        else:\n                            print(\"No\")\n                    else:\n                        print(\"No\")\n                else:\n                    print(\"No\")\n            else:\n                print(\"No\")\n        else:\n            print(\"No\")\n    \n    return \"Yes\"\n\nprint(solution(input()))"
    },
    {
        "number": 4079,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return(any([True for i in range(len(stdin)) if len(stdin[i])>1 and any(stdin[i][i] in 'abcdefghijklmnopqrstuvwxyz' for i in range(len(stdin)) if stdin[i] not in'')]) == False)\n"
    },
    {
        "number": 4079,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    alphabet = set(string.ascii_lowercase)\n    for _ in range(int(stdin)):\n        lst = [x for x in input().split()]\n        string = ''\n        for letter in lst:\n            string += str(alphabet.find(letter))\n        if string == '':\n            return 'No'\n        if string not in alphabet:\n            return 'No'\n    return 'Yes'"
    },
    {
        "number": 4080,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = list(map(int, stdin.split()))\n    return str(len(set(a) & set(b)) - 1) +'' + str(len(set(a) & set(b)) - len(set(a)))\n    \n"
    },
    {
        "number": 4080,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    b = []\n    for i in range(n):\n        for j in range(n):\n            if i!= j:\n                b.append(abs(a[i] - a[j]))\n    if b == []:\n        return '0'\n    if b.count(b[0]) == b.count(max(b)):\n        return '0'\n    if b.count(b[0]) == b.count(min(b)):\n        return '0'\n    q = []\n    for i in range(n):\n        if i!= n - 1:\n            for j in range(i + 1, n):\n                q.append((b[i], b[j]))\n    q.sort(key=lambda x: x[0])\n    return str(q[0][1])\n\ndef"
    },
    {
        "number": 4080,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    q, c = divmod(m, n)\n    if q > 0:\n        a = a + a[:q]\n    print(c)\n    for i in range(q, m+q):\n        print(a[i-q], end=\" \")\n    print()\n    return \"\".join(map(str, a))\n\ndef"
    },
    {
        "number": 4080,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, m = map(int, stdin.split())\n    if a == 0 or m == 0 or a < 0 or m < 0:\n        return \"0\"\n    a = [a]\n    b = [0] * (m + 1)\n    for i in range(1, m + 1):\n        a.append(a[i - 1] + a[i - 2])\n        b[i] = a[i - 1]\n        a[i] = a[i - 1] + a[i - 2]\n    q = min(len(a), len(b))\n    c = min(len(a), len(b))\n    if q == c:\n        for i in range(c):\n            print(b[i], end=' ')\n        print()\n    else:\n        for i in range(q):\n            for j in range(c):\n                if a[i] == b[j]:\n                    print(b[j], end=' ')\n                else:\n                    print(b[j], end=' ')\n            print()\n    return \"0\"\n\n-----Examples-----\n\nIn [1]: from collections import deque\n\nIn [2]: a = [2, -4, 1, 1, 2]\nIn [3]: b = [1, -2, 3, 1, 4]\n\nIn [4]: solution(a)\nOut[4]: '0'\n\nIn [5]: solution(b)\nOut[5]: '0'\n\nIn [6]: solution([-4, 1, -1, 4])\nOut[6]: '0'\n\nIn [7]: solution([0, 0])\nOut[7]: '0'\n\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4080,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    m = m\n    q = 0\n    if n < m:\n        m, q = m, n\n    p = [[] for _ in range(n)]\n    for i in range(n - m + 1):\n        for j in range(i, i + m):\n            p[j].append(a[i + j])\n    for i in range(n - m + 1):\n        cnt = 0\n        for j in range(n):\n            if len(p[j]) == 2:\n                cnt += p[j][0] * p[j][1]\n            else:\n                cnt += p[j][0] * p[j][1] * p[j][2]\n        if cnt > 0:\n            q += 1\n    return str(q)\n\n\n-----Example-----\n"
    },
    {
        "number": 4080,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [list(map(int, stdin.split())) for _ in range(n)]\n    b = [list(map(int, stdin.split())) for _ in range(m)]\n    \n    q = len(a)\n    c_1 = [0]\n    c_2 = [0]\n    for i in range(len(a)):\n        if a[i][0] == 1:\n            c_1.append(i)\n        elif a[i][0] == 2:\n            c_2.append(i)\n    \n    ans = 0\n    for i in range(len(c_1)):\n        l_1 = c_1[i]\n        r_1 = c_1[i+1]\n        l_2 = c_2[i]\n        r_2 = c_2[i+1]\n        if r_1 < r_2:\n            ans += r_1-l_1-1\n            ans += r_2-l_2\n        elif l_1 < l_2:\n            ans += r_1-l_1-1\n            ans += r_2-l_2\n        else:\n            ans += r_1-l_1-1\n            ans += r_2-l_2\n        \n    return str(ans)\n\ndef"
    },
    {
        "number": 4080,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split(\"\\n\")\n    n, m = map(int, input[0].split())\n    a = [int(i) for i in input[1].split()]\n    j = 0\n    while j < n:\n        if a[j] == 1:\n            c = a[j:j + m]\n            if c[0] == c[-1]:\n                c[-1] = -1\n            for i in range(m):\n                if c[i]!= 0:\n                    a[j] = c[i]\n                    j += 1\n        j += 1\n    for j in range(n):\n        if a[j]!= 0:\n            a[j] = -a[j]\n    return str(max(a)) + \" \" + str(min(a))"
    },
    {
        "number": 4080,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n,m=map(int,stdin.split())\n    a=[int(i) for i in stdin.split()]\n    a.sort()\n    b=[]\n    c=[]\n    for i in range(m):\n        b.append(a[i+1]-a[i])\n    for j in range(m):\n        c.append(a[j]//b[j])\n    print(max(c))\n    return str(max(c))"
    },
    {
        "number": 4080,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [int(i) for i in stdin.split()]\n    n -= 1\n    m -= 1\n    res = []\n    for i in range(n):\n        res.append(max(a[i] - a[i-1], a[i] - a[i+1]))\n    return '\\n'.join(map(str, res))\n\n\nsolution(stdin)\n"
    },
    {
        "number": 4080,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    # Enter your code here. Read input from STDIN. Print output to STDOUT\n    n,m = map(int,input().split())\n    a = list(map(int,input().split()))\n    a.sort()\n    if m > n:\n        print(0)\n    else:\n        q = 1\n        c = 0\n        b = 0\n        while q <= m:\n            l,r = 0,a[q]\n            while l < r:\n                mid = (l+r)//2\n                # print(l,r,mid)\n                if a[mid]<=mid:\n                    b += 1\n                    l = mid+1\n                else:\n                    r = mid-1\n            q += 1\n        # print(b,a)\n        if b == m:\n            print(0)\n        elif b > n:\n            print(0)\n        else:\n            c = b\n            while a[0]<=c:\n                l,r = 0,a[0]\n                while l < r:\n                    mid = (l+r)//2\n                    if a[mid]<=mid:\n                        b += 1\n                        l = mid+1\n                    else:\n                        r = mid-1\n                c = mid\n            print(b)\n            \n\n------------------------------"
    },
    {
        "number": 4081,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort(key=lambda x: x % n)\n    x = 0\n    for i in range(len(a)):\n        if i == 0:\n            x = a[i]\n        else:\n            if a[i]!= a[i-1]:\n                x = a[i]\n                break\n    answer = x\n    return answer\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4081,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a = sorted(a)\n    s = ''\n    i = 0\n    j = 0\n    for k in range(len(a)):\n        if i < m and a[i] == a[k]:\n            i += 1\n            continue\n        while j < n and a[j] == a[k]:\n            j += 1\n        s += str(a[j - 1] + 1) + 'L' if j < n else str(a[j - 1]) + 'R'\n        j = k + 1\n    return s\n\ndef"
    },
    {
        "number": 4081,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    l = []\n    for i in stdin.split():\n        l.append(int(i))\n    l = sorted(l)\n    return str(l[-1]) + 'L' if l[0] == 1 else str(l[-1]) + 'R'\n\n-----Constraints-----\n\n1 <= stdin.length <= 105\n\n-----Time Limit Exceeded According to Coding Rules -----\n\nTime Limit: O(n)\nSpace Limit: O(1)\n\"\"\"\n\ndef"
    },
    {
        "number": 4081,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"L\"\n    elif n == 2:\n        return \"R\"\n    elif n == 3:\n        return \"R\"\n    else:\n        a,b = map(int,stdin.split())\n        if a == b:\n            return \"R\"\n        else:\n            return \"L\"\n\ndef"
    },
    {
        "number": 4081,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(solution(n, a)))\n\nThe second example is the same, but the only difference is that for the problem C1 and C2, there are no duplicate numbers.\ndef"
    },
    {
        "number": 4081,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    maxi = 1\n    for i in range(n):\n        if a[i] == a[i-1]:\n            a[i], a[i-1] = a[i-1], a[i]\n        else:\n            a[i], a[i-1] = a[i-1], a[i]\n        maxi = max(maxi, a[i])\n    return str(maxi)\n\ndef"
    },
    {
        "number": 4081,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    for line in stdin:\n        n = int(line)\n        a = list(map(int, input().split()))\n        if len(set(a)) == n:\n            a.sort()\n            a = ''.join(a)\n            print(a[0])\n            continue\n        print(a[-1])\n        break\n\nprint(solution(stdin))\n\n-----Constraints-----\n1 <= n <= 2^10\n\n1 <= stdin.length <= 10^6\n1 <= stdin[i] <= 10^9\n\nSubmissions\n125 ms, faster than 25.01% of Python3 online submissions for Longest Increasing Subsequence.\nMemory Usage: 12.5 MB, less than 40.48% of Python3 online submissions for Longest Increasing Subsequence.\n'''\nclass Solution:\n    def lengthOfLIS(self, nums: List[int]) -> int:\n        dp = []\n        n = len(nums)\n        for i in range(n):\n            if i == 0:\n                dp.append(1)\n            else:\n                for j in range(i):\n                    if nums[i] > nums[j]:\n                        dp.append(max(dp[j],dp[i]+1))\n        return max(dp)\n"
    },
    {
        "number": 4081,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(' ')[0])\n    a = list(map(int, stdin.split(' ')[1].split(',')))\n    \n    return solution_fast(a, n)\n\ndef"
    },
    {
        "number": 4081,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = [int(stdin.split()[i]) for i in range(1, n + 1)]\n    a.sort()\n    if len(a) % 2 == 1:\n        a.append(a[-1])\n    s = ''\n    for i in range(0, len(a), 2):\n        s = s + str(a[i]) +''\n    return s.strip()\n\nn = int(input())\na = [int(i) for i in input().split()]\nprint(solution(input()))"
    },
    {
        "number": 4081,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n  n = int(stdin)\n  a = list(map(int, stdin.split()))\n  ans = []\n  k = 0\n  for i in range(n):\n    if a[i]!= a[i + 1]:\n      ans.append(a[i] - 1)\n      k += 1\n    if i < n - 2:\n      if a[i + 1]!= a[i + 2]:\n        ans.append(a[i + 1] - 1)\n        k += 1\n  if k == n:\n    ans.append(a[-1] - 1)\n  return \"\".join(str(e) for e in ans)\n\"\"\"\n\ndef"
    },
    {
        "number": 4082,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    dp = [1] * n\n    \n    for i in range(1, n):\n        j = 0\n        for j in range(i):\n            if arr[j] > arr[j+1]:\n                dp[i] = max(dp[i], dp[j]+1)\n    return str(max(dp))\n"
    },
    {
        "number": 4082,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort(reverse=True)\n    print(max(a[0],a[-1]))\n\n\n\"\"\"\nimport math\n\ndef"
    },
    {
        "number": 4082,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    l = 0\n    r = len(a) - 1\n    while r >= l:\n        if a[l] < a[r]:\n            l += 1\n        elif a[r] < a[l]:\n            r -= 1\n        else:\n            break\n    return str(r-l+1)\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4082,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    array = [int(stdin.splitlines()[0]) for i in range(n)]\n\n    answer = 0\n\n    for i in range(n):\n        array[i] = array[i] - 1\n        if array[i] < 0:\n            array[i] = 0\n        if array[i] < 0 or array[i] >= n:\n            answer = max(answer, array[i])\n            continue\n\n        left = max(1, array[:i] + array[i+1:])\n        right = max(array[i+1:])\n        if left <= right:\n            answer = max(answer, right - left)\n\n    return str(answer)\n"
    },
    {
        "number": 4082,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    a = list(map(int,stdin.split()))\n    n = len(a)\n    answer = 1\n    \n    for i in range(n-1):\n        count = 0\n        for j in range(i,n):\n            if a[j] < a[j-1]:\n                count += 1\n            else:\n                if count > 1:\n                    answer = max(answer, j-i-1)\n                count = 0\n                \n    print(answer)\n"
    },
    {
        "number": 4082,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    a = [int(a[i]) for i in range(len(a))]\n    return '{}'.format(max(a) - min(a))\n"
    },
    {
        "number": 4082,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    st = [int(a[i]) for i in range(n)]\n    st = [0] + st\n    res = 1\n    for i in range(1, n-1):\n        l, r = st[i+1], st[i]\n        while l <= r:\n            m = l + (r - l) // 2\n            if st[m] < st[i]:\n                st[m], st[i] = st[i], st[m]\n            l, r = m+1, r - 1\n        res = max(res, len(st))\n    return str(res)\n\n-----Constraints-----\n0 < a_i < 10^9\n\n------Time complexity--------\nTime O(n), since we remove at most one element.\nSpace O(1), since we have a subarray.\n\n----------Solutions----------------\n\nTime O(n) - remove at most one element.\nSpace O(n) - total space.\n\n\n----------Solutions----------------\nTime O(n) - remove at most one element.\nSpace O(1) - each subarray is stored as string.\n"
    },
    {
        "number": 4082,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(i) for i in stdin.split()]\n    k = int(a[0])\n    length = 0\n    for i in range(len(a)):\n        for j in range(i+1,len(a)):\n            if(j-i>=k):\n                if(a[i]<a[j]):\n                    length += j-i\n    return str(length)"
    },
    {
        "number": 4082,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin)\n    n -= 2\n    if a[n] % 2 == 0:\n        return str(n)\n    else:\n        return '0'\n\nPrint\n\n-----Example 1-----\n\nInput\n\n2\n6 4 3 2 2\n\nOutput\n\n4\n\n-----Example 2-----\n\nInput\n\n4\n2 3 1 4 5\n\nOutput\n\n4\n\nInput\n\n2\n4 3 1 2\n\nOutput\n\n2\n\n-----Note-----\n\nIn the example 2, we have $a=[1, 2, 3, 4].$\na[1] = a[2] = a[3] = a[4] = $2$ and we want the subarray $a[1:3] = [2, 3]$.\n\nWe want the longest increasing subarray $a[1:3] = [2, 3]$.\n\nThe subarray $a[1:3] = [2, 3]$ is $a_1=2$, $a_2=1$, $a_3=1$, $a_4=2$.\n\nFor example, $a=[6, 4, 3, 2]$\n\n\n-----Example 3-----\n\nInput\n\n1\n3 2 3 4\n\nOutput\n\n3\n\n-----Example 4-----\n\nInput\n\n1\n1\n2 2 4 3\n\nOutput\n\n3\n\n-----Note-----\n\nIn the example 4, the subarray $a[1:2] = [3]$ is $a_1=3$, $a_2=1$, $a_3=1$, $a_4=2$.\n\nFor example, $a=[2, 3]$\n\n\n-----Example 5-----\n\nInput\n\n6\n2 3 4 5 1 2 3 4\n\nOutput\n\n2\n\n-----Note-----\n\nIn the example 5, the subarray $a[2:3] = [3, 4]$ is $a_1=3$, $a_2=1$, $a_3=1$, $a_4=2$.\n\nFor example, $a=[4, 5]$\n\n\n-----Other Solution-----\n\ndef"
    },
    {
        "number": 4082,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(i) for i in stdin.split()]\n    if len(a) == 1:\n        return ''\n    \n    l = len(a) - 1\n    curr_length = 0\n    while True:\n        for i in range(l, 0, -1):\n            if a[i] < a[i - 1]:\n                curr_length += 1\n            else:\n                curr_length = 1\n                break\n        if curr_length == 1:\n            break\n        else:\n            curr_length = 0\n            l -= 1\n    return curr_length\n\n-----Time complexity-----\n\nThe first input to the program is the input of the user and the second input is the input of the program.\n\nThe second input is the output of the program.\n\nThe third input is a string, the input is read from stdin.\n\nThe fourth input is the output of the program.\n\nThe time complexity of the algorithm is O(n).\n\nIt is good idea to use a heap to store the elements. The idea is to merge the elements.\n\nThe best case for the merge operation is when the subarray has only one element and it cannot be splitted.\n\nThe worst case is when the subarray has both the elements and the subarray can be splitted.\n\nThe time complexity of the merge is O(log(n)).\n\nThere are no special cases that need to be tested.\n\nTime complexity: O(n)\n\nThe total space of the input is O(n).\n\nSpace: O(n)\n\n|\n|\n|\n|\n|\n|\n\n-----Constraints-----\n\n1 <= n <= 10^5\n\n1 <= a[i] <= 10^9\n\nFor the input array, there are no duplicates.\n\nThe input array is guaranteed to be in the range [1, 10^5].\n\nO(n)\n\nFor the input array, there are no duplicates.\n\n2 <= a[i] <= 10^9\n\n|\n|\n|\n|\n|\n|\n|\n|\n|\n\nOutput:\n\nExplanation\nThe input array is:\n\nThe first input element of the array is 1.\nThe second input element is 2.\nThe third input element is 3.\nThe fourth input element is 4.\nThe maximum length of the resulting array is 3.\n\nInput:\n\n1\n1 2 5 3 4\n\nOutput:\n\n4\n\nInput:\n\n2\n6 5 4 3 2 4 3\n\nOutput:\n\n2\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4083,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    min = 0\n    for i in range(1, n+1):\n        min += (a[i-1]-1) * 2\n    print(min)\n    return str(min)\n\n-----Constraints-----\n1 <= n <= 2e5\n1 <= k <= 2e5\n\n-----Time Limit-----\n20 ms\n\n-----Memory Limit-----\n32 MB\n\n--- Nguyen Van Duc ---\n'''\n\nclass Solution:\n    def minOperations(self, n: int, a: List[int]) -> int:\n        \n        def swap(x, y, a, b):\n            a[x], a[y] = a[y], a[x]\n            b[x], b[y] = b[y], b[x]\n        \n        def partition(a, b, idx, n, m, answer):\n            if idx >= n:\n                return\n            if idx == m:\n                answer.append(a[idx])\n                return\n            \n            for i in range(idx, n):\n                if a[i] >= b[idx]:\n                    swap(i, idx, a, b)\n                    partition(a, b, i, n, m, answer)\n            return\n        \n        m = len(a)\n        n = len(b)\n        answer = []\n        partition(a, b, 0, n, m, answer)\n        return len(answer)\n"
    },
    {
        "number": 4083,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    solution_array = []\n    \n    while a:\n        max_num = max(a)\n        solution_array.append(max_num)\n        a.remove(max_num)\n    \n    def recursion(k, a):\n        if a:\n            min_num = min(a)\n            if k == k or min_num == 0:\n                return 0\n            else:\n                return 1 + recursion(k, a[:k])\n        else:\n            return 0\n    \n    answer = recursion(k, solution_array)\n    return str(answer)"
    },
    {
        "number": 4083,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n"
    },
    {
        "number": 4083,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n,k = [int(i) for i in stdin.split()]\n    a = [int(i) for i in stdin.split()]\n    if a[0]<a[1] and a[0]<a[2] and a[0]<a[3]:\n        return str(min(n-k,k))\n    else:\n        return \"0\"\n\n-----Examples-----\nInput\n5 3\n1 2 2 4 5\n\nOutput\n1\n\nInput\n5 3\n1 2 3 3 3\n\nOutput\n0\n"
    },
    {
        "number": 4083,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    nums = list(map(int, stdin.split()))\n    operations = 0\n    for i in range(k):\n        operations += 1\n        nums[i] = nums[i] // 2\n        if nums[i] == 0:\n            nums[i] = 0\n    return str(operations)\n\n-----Goals-----\n\n-\n\n--\n\n[python3.7-GCC8.3, 24, 95, 90, 80, 79, 67, 46, 0, 0, 0, 0, 0]\n"
    },
    {
        "number": 4083,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n,k = list(map(int,stdin.split()))\n    a = list(map(int,stdin.split()))\n    answer = []\n    min = sys.maxsize\n    for i in range(n):\n        answer.append(a[i]*2)\n    \n    for i in range(1,k):\n        answer.append(a[i-1]*2)\n    \n    for i in answer:\n        if i < min:\n            min = i\n    print(min)\n    return str(min)\n\nprint(solution(stdin))"
    },
    {
        "number": 4083,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(sum(map(lambda a: int(a.split(' ')[0]) // 2, stdin.split(' ')[1:])) % 1000000007))\n    \n\ndef"
    },
    {
        "number": 4083,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    a = a[:k]\n    return str(len(a)) + \" \" + str(min(a))\n"
    },
    {
        "number": 4083,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin.strip())\n    k = int(stdin.strip().split()[1])\n    arr = list(map(int,stdin.strip().split()[2:]))\n    \n    for i in range(n):\n        \n        if arr[i] < arr[i-1]:\n            arr[i],arr[i-1]=arr[i-1],arr[i]\n    \n    for i in range(n):\n        \n        if arr[i] > arr[n-i-1]:\n            arr[i],arr[n-i-1]=arr[n-i-1],arr[i]\n    \n    for i in range(n-k+1):\n        \n        if arr[i] > arr[i+k-1]:\n            arr[i],arr[i+k-1]=arr[i+k-1],arr[i]\n    \n    \n    return str(min(arr))"
    },
    {
        "number": 4083,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.split()))\n\n    def divide(x):\n        return x // 2\n\n    if a[0] == 0:\n        return 1\n    min_ops = 0\n    min_a = []\n    for i in range(1, n):\n        a[i] = divide(a[i])\n        if i + 1 < n and a[i] < a[i + 1]:\n            a[i] = divide(a[i])\n        if a[i] < a[i + 1]:\n            min_ops += 1\n            min_a.append(a[i])\n    return min_a.pop()\n"
    },
    {
        "number": 4084,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    d = [(int(i), j) for i in range(A + B) for j in range(i + 1, A + B + 1)]\n    d = [(0, i) for i in d]\n    d = sorted(d, key=lambda x: x[0])\n    return''.join(map(str, d))\n\"\"\"\n\nfrom collections import deque\n\ndef"
    },
    {
        "number": 4084,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    board = [list(map(int, input().split())) for _ in range(N)]\n    def paint_board(board):\n        for i in range(N):\n            for j in range(N):\n                if board[i][j] > 0:\n                    board[i][j] -= 1\n                    if board[i][j] == 0:\n                        board[i][j] = 100\n                    else:\n                        board[i][j] = 100 - board[i][j]\n    def get_blue(board):\n        blue = []\n        for i in range(N):\n            for j in range(N):\n                if board[i][j] > 0:\n                    blue.append((i, j))\n        return blue\n    def get_red(board):\n        red = []\n        for i in range(N):\n            for j in range(N):\n                if board[i][j] > 0:\n                    red.append((i, j))\n        return red\n    def paint_board(board):\n        for i in range(N):\n            for j in range(N):\n                board[i][j] += A\n        for i in range(N):\n            for j in range(N):\n                board[i][j] += B\n        for i in range(N):\n            for j in range(N):\n                board[i][j] += 1\n        for i in range(N):\n            for j in range(N):\n                board[i][j] += 1\n    def count_blue(board):\n        blue = 0\n        for i in range(N):\n            for j in range(N):\n                if board[i][j] > 0:\n                    blue += 1\n        return blue\n    def count_red(board):\n        red = 0\n        for i in range(N):\n            for j in range(N):\n                if board[i][j] > 0:\n                    red += 1\n        return red\n    def paint_board(board):\n        for i in range(N):\n            for j in range(N):\n                board[i][j] += A\n        for i in range(N):\n            for j in range(N):\n                board[i][j] += B\n        for i in range(N):\n            for j in range(N):\n                board[i][j] += 1\n        for i in range(N):\n            for j in range(N):\n                board[i][j] += 1\n    paint_board(board)\n    blue = get_blue(board)\n    red = get_red(board)\n    blue.sort()\n    red.sort()\n    blue = blue[::-1]\n    red = red[::-1]\n    count_blue = count_blue(board)\n    count_red = count_red(board)\n    answer = 0\n    for i in range(2, N**2 + 1):\n        if count_blue == i:\n            if count_red == i - 2:\n                answer += i\n        else:\n            if count_red == i - 2:\n                answer += i\n    print(answer)"
    },
    {
        "number": 4084,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    \n    if A + B <= 10**18:\n        return str(A + B)\n    \n    if N == 1:\n        return str(B)\n    \n    A_str = solution(N-1, A, B)\n    B_str = solution(N-1, A, B-A)\n    \n    return \"\".join([A_str, B_str])"
    },
    {
        "number": 4084,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n  N = int(stdin.strip())\n  balls = [0] * N\n  for i in range(N):\n    b, r = map(int, stdin.split())\n    balls[i] = b\n    balls[i+N] = r\n  return str(sum(balls))"
    },
    {
        "number": 4084,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    ball_count = 1\n    for a, b in stdin.split(\" \"):\n        if a == \"B\" and b == \"R\":\n            ball_count += 1\n    return str(ball_count)\n\n\"\"\"\n\nclass Solution:\n    def solve(self, a, b, c):\n        return str(a + b + c)\n"
    },
    {
        "number": 4084,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    a, b, r = [], [], []\n    for i in range(N):\n        a.append(int(stdin.strip()[i]))\n        b.append(int(stdin.strip()[i + 1]))\n        r.append(int(stdin.strip()[i + 2]))\n    A = 0\n    B = 0\n    for i in range(N):\n        A += b[i]\n        B += r[i]\n    if A == B:\n        return str(A)\n    else:\n        return \"0\""
    },
    {
        "number": 4084,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n        n, m = map(int, stdin.split())\n        a = list(map(int, stdin.split()))\n        answer = 0\n        for i in range(n):\n            for j in range(i+1, n):\n                if a[i] + a[j] == m:\n                    answer += 1\n        print(answer)\n        return str(answer)\n        \n\n\"\"\"\n\nn, m = map(int, input().split())\n\na = list(map(int, input().split()))\n\nresult = []\n\nfor i in range(n):\n    for j in range(n-i):\n        if a[i] + a[j] == m:\n            result.append(a[i]*a[j])\n\nprint(result)"
    },
    {
        "number": 4084,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    result = 0\n    if N == 1:\n        result = A + B\n    else:\n        for i in range(1, N):\n            result += A + B - A * B\n    return str(result)\n-----Basic Testing-----\n"
    },
    {
        "number": 4084,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n  N = int(stdin.strip())\n  a = list(map(int,stdin.split()))\n  if sum(a)%3!= 0:\n    return \"0\"\n  l = int(sum(a)/3)\n  if l < 0:\n    return \"0\"\n  for i in range(l,l+N+1):\n    a[i-1] += a[i]\n  for i in range(l,l+N):\n    a[i-1] += a[i]\n  for i in range(l,l+N):\n    if a[i] % 2 == 0:\n      b = a[i]\n    else:\n      b = a[i]/2\n    a[i] += b\n  if sum(a)%3!= 0:\n    return \"0\"\n  return str(sum(a)/3)"
    },
    {
        "number": 4084,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    N = N % 10\n    r = N % 10\n    # \u5404\u30eb\u30fc\u30c8\u306eb\u3068r\u3092\u8a18\u9332\u3059\u308b\u305f\u3081\u306e\u30eb\u30fc\u30c8\u6570\u3092\u5168\u3066\u52a0\u3048\u308b\n    cnt = 0\n    for i in range(N):\n        if i == 0:\n            # \u5165\u529b\u306e\u6e96\u5099\n            if A:\n                cnt += 1\n                A = False\n            else:\n                A = True\n            # \u5165\u529b\u6e96\u5099\n            if B:\n                cnt += 1\n                B = False\n            else:\n                B = True\n        else:\n            # \u5165\u529b\u306e\u6e96\u5099\n            if A:\n                cnt += 1\n                A = False\n            else:\n                A = True\n            # \u5165\u529b\u6e96\u5099\n            if B:\n                cnt += 1\n                B = False\n            else:\n                B = True\n            # \u63a2\u7d22\n            if cnt > 1:\n                if A:\n                    cnt -= 1\n                    A = False\n                else:\n                    cnt -= 1\n                    A = True\n                if B:\n                    cnt -= 1\n                    B = False\n                else:\n                    cnt -= 1\n                    B = True\n            else:\n                # \u63a2\u7d22\u304c\u5b8c\u4e86\u3059\u308b\u306a\u3089break\n                if r:\n                    break\n    return str(cnt)\n"
    },
    {
        "number": 4085,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    divisors = list(map(int, stdin.split()))\n    divisors.sort()\n    \n    for i in range(n-1, -1, -1):\n        for j in range(i+1, n):\n            if divisors[i] + divisors[j] == m:\n                return divisors[i]\n    return -1\n"
    },
    {
        "number": 4085,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    def get_all_divisors(x):\n        divisors = []\n        \n        for i in range(1, x + 1):\n            if x % i == 0:\n                divisors.append(i)\n                divisors.append(x // i)\n        return divisors\n    \n    def get_max_number(divisors):\n        count = 1\n        \n        for i in range(len(divisors)):\n            count = max(count, i+1)\n            \n        return count\n    \n    def solution(divisors, divisor_count, divisor_count_max):\n        answer = -1\n        \n        while True:\n            divisors_count = divisors[:]\n            \n            for i in range(divisor_count):\n                divisors_count[i] = get_max_number(divisors_count[i])\n            \n            for i in range(divisor_count, divisor_count_max+1):\n                if not divisors_count[i-1] == 0:\n                    divisors_count[i-1] -= 1\n                    divisors_count[i-1] += 1\n                    answer = divisors_count[i-1]\n                    break\n            \n            if answer == -1:\n                break\n            \n            divisors.insert(divisor_count, answer)\n            divisor_count += 1\n        \n        return \"\".join(map(str, divisors))\n        \n    return solution(list(map(int, stdin.split())), get_all_divisors(2), get_all_divisors(3))\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 4085,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4085,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    while True:\n        try:\n            n, ans = map(int, stdin.split())\n            if n == 0:\n                break\n            divisors = [i for i in range(1, n+1)]\n            while True:\n                x = int(input())\n                if x in divisors:\n                    break\n            \n            for i in range(len(divisors)):\n                if divisors[i]!= x:\n                    break\n                \n            if ans < x:\n                print(-1)\n                return\n            \n            if len(set(divisors)) <= 2:\n                print(x)\n                return\n        except:\n            pass"
    },
    {
        "number": 4085,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def is_perfect_square(n: int) -> bool:\n        x = pow(n, 1/2, n)\n        if x == int(x):\n            return True\n        else:\n            return False\n    \n    def dfs(i, arr, n):\n        if n == 1:\n            return arr[i]\n        if is_perfect_square(n):\n            return arr[i]\n        left = dfs(i*2, arr, n//2)\n        right = dfs((i*2) + 1, arr, n//2)\n        return left if left < right else right\n    \n    def min_n(arr):\n        arr = dfs(1, arr, 10**9)\n        return arr\n    \n    for i in range(int(stdin)):\n        n = int(stdin)\n        print(min_n([i for i in range(2, n+1)]))\n        \n\n-----Time complexity-----\n\nTime complexity: O(n) for loop and O(n) for each value of d_i. If all values in the array are distinct, then n is a constant. If all values in the array are distinct, then n is constant.\n\nSpace complexity: O(n) for d_i as well.\n\n\"\"\"\n\nclass Solution:\n    def min_n(self, arr):\n        arr.sort()\n        for i in range(1, len(arr)):\n            if arr[i-1]!= arr[i]:\n                return arr[i]\n        return arr[0]\n\n    def dfs(self, arr, n):\n        if n == 1:\n            return arr[0]\n        if arr[n//2] == arr[n]:\n            return arr[n//2]\n        else:\n            left = self.dfs(arr, n//2)\n            right = self.dfs(arr, n//2+1)\n            return left if left < right else right\n\n\n    def min_number(self, nums: list[int]) -> int:\n        return min(self.dfs(nums, len(nums)))\n"
    },
    {
        "number": 4085,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.strip())\n    for t in range(T):\n        n, d_list = map(int, stdin.strip().split())\n        print(solution(d_list))\n        print('-------')\n    return '-1'"
    },
    {
        "number": 4085,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n    num = int(stdin.strip())\n    \n    if num > 100:\n        return -1\n    if num % 10!= 2:\n        return -1\n    \n    divisors = [int(n) for n in list(str(num))]\n    divisors.append(divisors[-1])\n    \n    max_div = max(divisors)\n    \n    for i in range(num-1, num*2+1):\n        divisors.append(i)\n        for j in divisors:\n            if i == j:\n                divisors.remove(j)\n    \n    for divisor in divisors:\n        divisor = str(divisor)\n        divisor = divisor.replace(\" \", \"\")\n        divisor = int(divisor)\n        \n        if divisor == max_div:\n            divisors.remove(divisor)\n            \n    if divisors == []:\n        return -1\n    \n    for divisor in divisors:\n        divisor = str(divisor)\n        divisor = divisor.replace(\" \", \"\")\n        divisor = int(divisor)\n        if divisor > max_div:\n            return -1\n    \n    return max_div\n"
    },
    {
        "number": 4085,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Solution: 2\n    n = int(input())\n    a = list(map(int,input().split()))\n    b = [int(input()) for i in range(n)]\n    c = [[] for i in range(n)]\n    for i in range(n):\n        for j in range(i,n):\n            if a[i] % b[j] == 0:\n                c[i].append(b[j])\n                c[j].append(a[i] // b[j])\n            else:\n                c[i].append(None)\n                c[j].append(None)\n    c = list(map(lambda x: sum(x), c))\n    res = []\n    for i in c:\n        if i == 0:\n            res.append(-1)\n        else:\n            res.append(i.index(max(i)))\n    print(*res)\n    return -1"
    },
    {
        "number": 4085,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    nums = list(map(int, stdin.split()))\n    visited = [False] * n\n    dp = [0] * n\n    dp[0] = 1\n    \n    for i in range(1, n):\n        if not visited[i]:\n            for j in range(m):\n                if j > 0:\n                    dp[i] += dp[i - j]\n            if not visited[i]:\n                for j in range(m):\n                    if j > 0:\n                        dp[i] += dp[i - j - 1]\n            if dp[i] > 0:\n                visited[i] = True\n                dp[i] = min(dp[i], dp[i - 1])\n    return str(dp[n - 1])\n\ndef"
    },
    {
        "number": 4085,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    T = int(stdin.strip().split(' ')[0])\n    N = int(stdin.strip().split(' ')[1])\n    A = stdin.strip().split(' ')[2:]\n    ans = -1\n    \n    for i in range(N):\n        for j in range(len(A)):\n            if A[j] in A[:j]:\n                a = A[j]\n                break\n        for k in range(j, len(A)):\n            if A[k] in A[:k]:\n                b = A[k]\n                break\n        if a < b:\n            ans = a\n            break\n    if ans == -1:\n        return -1\n    print(ans)\n    return ans\n"
    },
    {
        "number": 4086,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    i = 0\n    while a:\n        if a[0] == a[i]:\n            a.pop(i)\n            i -= 1\n            if not a:\n                break\n        i += 1\n    return ''.join(list(map(str, sorted(a))))\n\n\nInput:\n2\n4\n2 3 2 4 3\n\nOutput:\n3\n4\n\n'''\n\n'''\nGiven an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\nYou may assume that each input would have exactly one solution, and you may not use the same element twice.\nYou can return the answer in any order.\n\nExample 1:\nInput: nums = [2,7,11,15], target = 9\nOutput: [0,1]\nOutput: Because nums[0] + nums[1] == 9, we return [0, 1].\nExample 2:\nInput: nums = [3,2,4], target = 6\nOutput: [1,2]\nExample 3:\nInput: nums = [3,3], target = 6\nOutput: [0,1]\nExample 4:\nInput: nums = [3,3], target = 10\nOutput: [1,2]\nExample 5:\nInput: nums = [2,7], target = 18\nOutput: [0,1]\n'''\n\n\ndef"
    },
    {
        "number": 4086,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip().rstrip())\n    a = list(map(int, stdin.strip().split()))\n    a.sort()\n    for i in range(len(a)):\n        if a[i]!= i:\n            a.remove(a[i])\n    answer = len(a)\n    return answer\n"
    },
    {
        "number": 4086,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = []\n    for i in range(n):\n        a.append(int(stdin[i]))\n    a = sorted(set(a))\n    a.sort()\n    a.reverse()\n    for i in range(len(a)-1):\n        if a[i+1]!= a[i]:\n            print(a[i+1]-a[i])\n            break\n    else:\n        print(a[-1])\n"
    },
    {
        "number": 4086,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort(reverse=True)\n    x = 0\n    while True:\n        if len(a)!= 1:\n            if a[x]!= a[x+1]:\n                a[x], a[x+1] = a[x+1], a[x]\n                x += 2\n        else:\n            break\n        x += 1\n        \n    x = 0\n    while True:\n        if len(a)!= n:\n            if a[x]!= a[x+n]:\n                a[x], a[x+n] = a[x+n], a[x]\n                x += n\n        else:\n            break\n        x += n\n    \n    return''.join(str(x) for x in a)\n"
    },
    {
        "number": 4086,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    a = list(map(int, stdin.split()))\n    d = {}\n    for i in a:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    a = sorted(d, key=d.get, reverse=True)\n    for i in a:\n        if len(a) > 1:\n            a.pop(a.index(i))\n    if len(a) == 0:\n        return \"0\"\n    else:\n        return \" \" + str(a[0])\n\nFor example,\n\nInput\n5\n1 4 1 4\n\nOutput\n3\n1 2 4 \n\nExplanation\nThe problem description in the input is shown in the following example.\n\nInput\n5\n1 4 1 4\n\nOutput\n3\n1 2 4 \n\nInput\n5\n3 4 3 2 1\n\nOutput\n2\n3 4 1 \n\nInput\n2\n1 4 2\n\nOutput\n1\n2 3 4 \n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 4086,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return''.join(map(str, stdin.split(' ')))"
    },
    {
        "number": 4086,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    answer = ''\n    removed = {}\n    for i in range(n):\n        if a[i] not in removed:\n            removed[a[i]] = 0\n        removed[a[i]] += 1\n    a_ = sorted(removed.items(), key=lambda x: x[1], reverse=True)\n    for i in range(n):\n        if a_[i][1] > 1:\n            answer += a_[i][0] * (n - a_[i][1] + 1)\n        else:\n            answer += a_[i][0]\n    return answer\n'''\n\ndef"
    },
    {
        "number": 4086,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(i) for i in stdin.split()]\n    arr = []\n    for i in range(n):\n        arr.append(a[i])\n    \n    arr.sort()\n    a_arr = set(arr)\n    for i in range(n):\n        arr[i] = arr[i] - 1\n    return''.join(list(map(str, arr)))\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 4086,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    count = 0\n    arr = [int(i) for i in stdin.split()]\n    for i in arr:\n        if arr.count(i)>1:\n            count+=1\n    return str(count)\n    \n    \ndef"
    },
    {
        "number": 4086,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    left = 0\n    right = len(a)-1\n    while left < right:\n        if a[left] == a[right]:\n            left += 1\n        else:\n            right -= 1\n    return left"
    },
    {
        "number": 4087,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if b % 3 == 0:\n        if a % 4 == 0:\n            return str(a) + \" \" + str(b) + \" \" + str(a % 4)\n        else:\n            return str(a) + \" \" + str(b) + \" \" + str(a % 4) + \" \" + str(a % 4) + \" \" + str(a % 4)\n    else:\n        return str(a) + \" \" + str(b) + \" \" + str(a % 4) + \" \" + str(a % 4) + \" \" + str(a % 4) + \" \" + str(a % 4) + \" \" + str(a % 4)\n"
    },
    {
        "number": 4087,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    for a in range(1,1000):\n        num=int(stdin)\n        if a==num or num%a==0:\n            num=a*num\n            break\n    num=num-1\n    if num>0:\n        print(num)\n    else:\n        print(num//10)\n    return\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4087,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    from collections import defaultdict\n    a = defaultdict(int)\n    for line in stdin.split():\n        a[int(line)] += 1\n    for num, count in a.items():\n        if count < 2:\n            continue\n        if a[num] < count/3:\n            return str(num)\n    return '0'\n"
    },
    {
        "number": 4087,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(min(int(stdin),int(stdin.replace(str(int(str(stdin))),str(int(str(stdin).replace(str(str(stdin)).replace(str(str(stdin)).replace(str(stdin).replace(str(str(stdin)).replace(str(str(stdin)).replace(str(str(stdin)).replace(str(str(stdin)).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin)).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str(stdin).replace(str"
    },
    {
        "number": 4087,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    for line in stdin:\n        a=int(line.strip())\n        if a%3==0:\n            a=a//3\n        if a%5==0:\n            a=a//5\n        print(a)"
    },
    {
        "number": 4087,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def solve(n: int):\n        if n == 0:\n            return -1\n        a = int(str(n)[::-1])\n        return solve(a) + a\n\n    stdin = stdin.strip()\n    stdin = list(map(int, stdin))\n    max1 = solve(stdin[0])\n    for i in range(1, len(stdin)):\n        if max1 < solve(stdin[i]):\n            max1 = solve(stdin[i])\n    return max1\n"
    },
    {
        "number": 4087,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    answer = \"\"\n    for i in range(1,int(stdin)+1):\n        for j in range(1,i):\n            if i % j == 0:\n                break\n        else:\n            answer = str(i)\n    return answer\n\nprint(solution(\"99\"))"
    },
    {
        "number": 4087,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return max(solution(n // 2), solution(n - 1)) + 1\n    else:\n        return max(solution(n // 2), solution(n - 1) + 1) + 1\n"
    },
    {
        "number": 4087,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split()\n    a = list(map(int, a))\n    a.sort()\n    count = 0\n    for i in range(1, len(a)):\n        for j in range(i, len(a)):\n            if a[i] + a[j] == a[i]*j:\n                count += 1\n    print(count)\nsolution(stdin)\n"
    },
    {
        "number": 4087,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return '42'\n"
    },
    {
        "number": 4088,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(int(stdin)):\n        s = stdin.split()\n        if s[0]==\"ab\":\n            print(s[1])\n        elif s[0]==\"ba\":\n            print(s[1])\n        elif s[0]==\"abcd\":\n            print(s[1])\n        elif s[0]==\"abci\":\n            print(s[1])\n        elif s[0]==\"a\":\n            print(s[1])\n        elif s[0]==\"abac\":\n            print(s[1])\n        elif s[0]==\"abc\":\n            print(s[1])\n        elif s[0]==\"ac\":\n            print(s[1])\n        elif s[0]==\"a\":\n            print(s[1])\n        elif s[0]==\"b\":\n            print(s[1])\n        elif s[0]==\"c\":\n            print(s[1])\n        elif s[0]==\"a\":\n            print(s[1])\n        elif s[0]==\"ab\":\n            print(s[1])\n        elif s[0]==\"aab\":\n            print(s[1])\n        elif s[0]==\"aac\":\n            print(s[1])\n        elif s[0]==\"abc\":\n            print(s[1])\n        elif s[0]==\"ac\":\n            print(s[1])\n        elif s[0]==\"ba\":\n            print(s[1])\n        elif s[0]==\"ba\":\n            print(s[1])\n        elif s[0]==\"ba\":\n            print(s[1])\n        elif s[0]==\"ba\":\n            print(s[1])\n        elif s[0]==\"ba\":\n            print(s[1])\n        elif s[0]==\"ba\":\n            print(s[1])\n        elif s[0]==\"ba\":\n            print(s[1])\n        elif s[0]==\"ba\":\n            print(s[1])\n        elif s[0]==\"ba\":\n            print(s[1])\n        elif s[0]==\"bac\":\n            print(s[1])\n        elif s[0]==\"baac\":\n            print(s[1])\n        elif s[0]==\"ba\":\n            print(s[1])\n        elif s[0]==\"ba\":\n            print(s[1])\n        elif s[0]==\"ab\":\n            print(s[1])\n        elif s[0]==\"a\":\n            print(s[1])\n        elif s[0]==\"b\":\n            print(s[1])\n        elif s[0]==\"c\":\n            print(s[1])\n        elif s[0]==\"c\":\n            print(s[1])\n        elif s[0]==\"a\":\n            print(s[1])\n        elif s[0]==\"a\":\n            print(s[1])\n        elif s[0]==\"ac\":\n            print(s[1])\n        elif s[0]==\"a\":\n            print(s[1])\n        elif s[0]==\"c\":\n            print(s[1])\n        elif s[0]==\"c\":\n            print(s[1])\n        elif s[0]==\"a\":\n            print(s[1])\n        elif s[0]==\"a\":\n            print(s[1])\n        elif s[0]==\"a\":\n            print(s[1])\n        elif s[0]==\"c\":\n            print(s[1])\n        elif s[0]==\"c\":\n            print(s[1])\n        elif s[0]==\"c\":\n            print(s[1])\n        elif s[0]==\"c\":\n            print(s[1])\n        elif s[0]==\"a\":\n            print(s[1])\n        elif s[0]==\"a\":\n            print(s[1])\n        elif s[0]==\"c\":\n            print(s[1])\n        elif s"
    },
    {
        "number": 4088,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split(\"\\n\")\n    t = s[0]\n    b = []\n    for i in s[1:]:\n        a = i.split(\" \")\n        if len(a) == 2:\n            b.append(a[0])\n        else:\n            b.append(a[0])\n            b.append(int(a[1]))\n    b.sort(key = lambda x: x[1])\n    for i in b:\n        t = t[:i] + t[i+1:]\n    return t\n\n\"\"\"\n\nfrom collections import defaultdict\ndef"
    },
    {
        "number": 4088,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def solution2(str_: str, b: List[int]):\n        if str_ in b:\n            return str_\n        else:\n            return solution2(str_ + b[-1], b)\n\n    def solution3(str_: str, b: List[int]):\n        answer = []\n        for i in range(len(str_)):\n            t = str_[i:i+len(b)]\n            if t == b[0]:\n                answer.append(str_[i:i+len(b)])\n            else:\n                answer.append(solution3(t, b[1:]))\n        return answer\n\n    for t in stdin:\n        b = list(t)\n        print(solution3(t, b[:-1]))"
    },
    {
        "number": 4088,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    d = [list(map(int, stdin.split())) for _ in range(n)]\n    for k in range(n):\n        for j in range(n):\n            if j >= k:\n                d[k][j] += max(d[j + 1][k], d[j + 1][k + 1])\n            if j >= k + 1:\n                d[k][j] += max(d[j + 1][k + 1], d[j + 1][k])\n    return \"\".join(str(d[i]) for i in range(n))\n"
    },
    {
        "number": 4088,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    def check(s):\n        result = False\n        a = 0\n        for i in range(len(s)):\n            if s[i] == 'a' or s[i] == 'b' or s[i] == 'c':\n                a += 1\n        if a == 2:\n            result = True\n            return result\n        elif a == 3:\n            result = True\n            return result\n        return result\n\n    def erasure(s, n):\n        if len(s) == n:\n            return s\n        else:\n            s = s[:n]\n            if check(s):\n                return erasure(s, n+1)\n            else:\n                s = s[:n] + 'b' + s[n+1:]\n                return erasure(s, n+1)\n    \n    # print(erasure(stdin, 1))\n    \n    \n"
    },
    {
        "number": 4088,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n    b = []\n    for t in stdin:\n        if len(t) == 0:\n            b.append(b[-1])\n            b.pop()\n        else:\n            n = t.count(t[0])\n            if n == 1 and len(t)!= 1:\n                b.append(t[1:])\n                continue\n            else:\n                b.append(t[1:])\n    if len(b) == 0:\n        return \"a\"\n    else:\n        return \"\".join(b)\n    \n    \n"
    },
    {
        "number": 4088,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return\n"
    },
    {
        "number": 4088,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\nTEST CASE \nINPUT\n3\nabac\n3\n2 1 0\nabc\n1\n0\nabba\n3\n1 0 1\necoosdcefr\n10\n38 13 24 14 11 5 3 24 17 0\n\nOutput\naac\nb\naba\ncodeforces\n\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4088,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    m = int(s[1])\n    b = [int(i) for i in s[2:]]\n    \n    t = \"\"\n    \n    for i in range(m):\n        t += str(b[i])\n        if len(t)==m:\n            t += str(b[i+1])\n    \n    return t\n\ndef"
    },
    {
        "number": 4088,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip().split(' ')\n    n = int(s[0])\n    s = s[1]\n    b = [int(i) for i in s.split(',')]\n    # print(b)\n    b_sorted = sorted(b)\n    # print(b_sorted)\n    for i in range(len(b)):\n        if b[i] > b_sorted[i]:\n            for j in range(i+1, len(b)):\n                if b[i] > b[j]:\n                    b[j], b[i] = b[i], b[j]\n                    break\n    # print(b)\n    if len(s) < n:\n        return \"\".join(map(str, b))\n    else:\n        t = s[n:n+n]\n        # print(t)\n        b_sorted = sorted(b)\n        # print(b_sorted)\n        for i in range(len(b)):\n            if b[i] > b_sorted[i]:\n                for j in range(i+1, len(b)):\n                    if b[i] > b[j]:\n                        b[j], b[i] = b[i], b[j]\n                        break\n        # print(b)\n        # print(s)\n        return \"\".join(map(str, b))\n\nprint(solution(\"aabac\"))"
    },
    {
        "number": 4089,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    names = list(map(str, range(1, n + 1)))\n    answer = names[0]\n    return answer"
    },
    {
        "number": 4089,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    dogs = 'abcdefghijklmnopqrstuvwxyz'\n    p = list(dogs[:N])\n    l = list(dogs[N:])\n    \n    for i in range(N, len(l)):\n        p.append(l[i])\n        l.remove(l[i])\n    \n    answer = ''.join(p)\n    return answer\n\n-----Sample Output-----\n4\n\n-----Sample Input-----\n1\n\n-----Sample Output-----\ndog\n\n2\n\n-----Sample Input-----\n2\n\n-----Sample Output-----\nzzz\n"
    },
    {
        "number": 4089,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    answer = ''\n    i = 1\n    for j in range(1, int(len(stdin)/2)):\n        if j == 1:\n            answer = stdin[j:j+1]\n            if len(answer)!= 1:\n                answer = answer + 'a'\n                i += 1\n                continue\n            else:\n                answer = answer + answer[0]\n                i += 1\n                continue\n        if j == int(len(stdin)/2):\n            answer = answer + answer[-1]\n            if len(answer)!= 1:\n                answer = answer + 'a'\n                i += 1\n                continue\n            else:\n                answer = answer + answer[0]\n                i += 1\n                continue\n        if j == int(len(stdin)/2 + 1):\n            answer = answer + answer[-1]\n            if len(answer)!= 1:\n                answer = answer + answer[0]\n                i += 1\n                continue\n            else:\n                answer = answer + answer[0]\n                i += 1\n                continue\n    answer = answer + answer[0]\n    i += 1\n    return answer\n\"\"\"\n\nfrom collections import Counter\n\ndef"
    },
    {
        "number": 4089,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.lower()[0]"
    },
    {
        "number": 4089,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    l = []\n    for i in range(1, int(stdin)+1):\n        l.append(chr(i))\n    print(''.join(l))\n    return ''.join(l)\n\nInput: \"7\"\nOutput: \"b\"\n\"\"\"\nclass Solution:\n    def solve(self, stdin: str) -> str:\n        answer = ''.join(sorted(stdin, key=lambda x: int(x)))\n        return answer\n"
    },
    {
        "number": 4089,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    a_list = sorted([int(i) for i in stdin.split()])\n    answer = \"\"\n    count = 0\n    for i in range(1, N+1):\n        if i == 1 or i == N:\n            count += 1\n        else:\n            count += 1\n            answer += a_list[i-1]\n    return answer + str(count)\n\nprint(solution(\"2\")) # b\nprint(solution(\"3\")) # z\nprint(solution(\"30000000\")) # b\n"
    },
    {
        "number": 4089,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N,a,b=map(int,stdin.split())\n    c=[i for i in range(N+1)]\n    if N==1:\n        return \"a\"\n    for i in range(2,N+1):\n        if N==1:\n            return \"b\"\n        if N==2:\n            c[i]=i\n        else:\n            c[i]=i+i-1\n        c[i+a+1]=c[i+a+1]+i\n        c[i+b+1]=c[i+b+1]+i+i-1\n        c[i+b+a+1]=c[i+b+a+1]+i+i-1\n    return \"\".join([str(c[i]) for i in range(N)])\n"
    },
    {
        "number": 4089,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    dogs = []\n    for _ in range(n):\n        dogs.append(input())\n    for i in range(len(dogs)):\n        dogs[i] = dogs[i].lower()\n    for i in range(len(dogs)):\n        dogs[i] = dogs[i].split(' ')\n        for j in range(len(dogs[i])):\n            dogs[i][j] = dogs[i][j].split('.')\n    answer = []\n    for i in range(len(dogs)):\n        if dogs[i][0] == dogs[i][1] == dogs[i][2] == dogs[i][3] == dogs[i][4] == dogs[i][5] == dogs[i][6] == dogs[i][7] == dogs[i][8] == dogs[i][9] == dogs[i][10] == dogs[i][11] == dogs[i][12] == dogs[i][13] == dogs[i][14] == dogs[i][15] == dogs[i][16] == dogs[i][17] == dogs[i][18]:\n            answer.append(dogs[i][0])\n    return''.join(answer)\n"
    },
    {
        "number": 4089,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.split(\" \")[0]\n\ndef"
    },
    {
        "number": 4089,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    nums = list(map(int, stdin.split()))\n    odd_sum = 0\n    for i in range(N):\n        if nums[i]%2:\n            odd_sum += nums[i]\n    return str(odd_sum//2)\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4090,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    # read input\n    n,w = map(int,stdin.split())\n    \n    # initialisze ans\n    ans = 0\n    \n    # construct each segment of words\n    for _ in range(n):\n        w = stdin.split()\n        # replace every word in the text with its first letter\n        for i in range(n):\n            w[i] = w[i][0].upper() + w[i][1:]\n            # if the word is a segment of words and its first letter is in uppercase\n            # then change it to uppercase\n            if i == 0 and w[i][0].upper() == w[i][1:].upper():\n                w[i] = w[i][0].upper() + w[i][1:]\n        # sort the words by their first letter\n        w.sort(key=lambda x: x[0].lower())\n        # get the first letters of the words\n        first_letters = [i[0] for i in w]\n        # get the length of the longest consecutive words\n        ans = max(ans,len(first_letters))\n    #print(ans)\n    return ans\n\n\n------------------Solution------------------\nn,w = map(int,input().split())\nans = 0\nfor i in range(n):\n    w = input()\n    ans += len(w)\nprint(ans)\n    \n"
    },
    {
        "number": 4090,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, *w = map(str, stdin)\n    w = [i for i in w]\n    ab = []\n    ab.append(w[0])\n    for i in range(1, len(w)):\n        if w[i] == w[i - 1]:\n            continue\n        elif w[i] == w[i - 1] and w[i - 2] == w[i - 1] and w[i - 3] == w[i - 1]:\n            continue\n        else:\n            ab.append(w[i])\n    if len(ab) >= 2:\n        return min(len(w) - len(ab), len(w[1:]) - len(ab))\n    else:\n        return len(w[1:])\n\n\n\n-----Constraints-----\n\n0 <= n <= 10^5\n\nInput Format\n\nThe first line contains an integer n.\n\nThe next line contains $n$ space-separated words of the text.\n\nConstraints\n\n\n\nSample Input\n\n3\nto be or not to be\n\nSample Output\n\n2\n\nExplanation\n\nFor each of the first ten words of the text \"to be or not to be\" print the minimum length of the text after the first two.\n\n\n\n\"\"\"\n\nclass Solution:\n    def minimumLength(self, n: int, words: List[str]) -> int:\n        words = sorted(words, key=len)\n        res = 0\n        for word in words:\n            for i in range(len(word)):\n                if i + 1 == len(word) and word[i]!= word[i + 1]:\n                    return res + 1\n                if word[i]!= word[i + 1]:\n                    res += 1\n        return res\n"
    },
    {
        "number": 4090,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    min_len = 0\n    n = int(stdin.strip())\n    for _ in range(n):\n        segments = [s for s in stdin.strip().split(' ') if s]\n        print(' '.join([s for s in segments if s]))\n        length = len(segments)\n        if length >= 3:\n            print(' '.join([segments[i] for i in range(0, length - 2) if i % 2!= 0]))\n            print(' '.join([segments[i] for i in range(1, length - 1) if i % 2 == 0]))\n            min_len = min(min_len, length)\n    return str(min_len)\n\nprint(solution(\"10 \"))\nprint(solution(\"10\"))\nprint(solution(\"10\"))\nprint(solution(\"1000\"))\nprint(solution(\"1234\"))\nprint(solution(\"1 2 3 4 5 6\"))\nprint(solution(\"a b a b c\"))\n"
    },
    {
        "number": 4090,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    w = list(map(str.strip, stdin.split()))\n    n = len(w)\n    if n < 2 or n > 300:\n        raise Exception(\"Wrong input\")\n    \n    def check(w):\n        result = \"\"\n        for i in range(len(w)):\n            if w[i]!= w[i-1] and w[i]!= w[i+1] and w[i]!= w[i-2] and w[i]!= w[i+2]:\n                result = result + w[i]\n        return result\n    \n    def find_next_word(w, index):\n        result = \"\"\n        for i in range(index, index+n):\n            if i == index:\n                if w[i]!= w[i-1] and w[i]!= w[i+1] and w[i]!= w[i-2] and w[i]!= w[i+2]:\n                    result = result + w[i]\n                else:\n                    result = result + w[i-1]\n            elif w[i]!= w[i-1] and w[i]!= w[i+1] and w[i]!= w[i-2] and w[i]!= w[i+2]:\n                result = result + w[i]\n            elif w[i] == w[i-1] and w[i] == w[i+1]:\n                if w[i] == w[i-2] and w[i] == w[i+2]:\n                    result = result + w[i]\n            elif w[i] == w[i-1] and w[i]!= w[i-2] and w[i] == w[i+2]:\n                result = result + w[i]\n        return result\n    \n    def find_next_segment(w, index):\n        result = \"\"\n        if index == 0:\n            if check(w) == w[index] or w[index] == \"a\":\n                result = \"a\"\n            else:\n                result = \"b\"\n        elif index == n-1:\n            if check(w) == w[index] or w[index] == \"a\":\n                result = w[index]\n            else:\n                result = w[index] + w[index+1]\n        else:\n            if w[index] == w[index+1]:\n                if check(w) == w[index] or w[index] == \"a\":\n                    result = w[index]\n                else:\n                    result = w[index] + w[index+1]\n            else:\n                if check(w) == w[index] or w[index] == \"a\":\n                    result = w[index]\n                else:\n                    result = w[index] + w[index+1]\n                result = find_next_segment(w, index+1)\n        return result\n    \n    for index in range(n-2):\n        if index == 0:\n            result = find_next_word(w, index)\n        else:\n            result = find_next_segment(w, index)\n    return len(result)\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4090,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin.split()\n    print(len(string))\n    return string[0] + string[1] + string[2]\n\n-----Constraints-----\n0\n1\n1\n\n-----Time Limit-----\n4 ms\n\n\n\n-----Submissions-----\n8\n6\n\n-----Alternatives-----\nMedium\n\n\n\"\"\"\n\n\nclass Solution:\n    def lengthOfLongestSubstring(self, s: str) -> int:\n        s_len = len(s)\n        longest_substring = 0\n        letter_count = {}\n        for i in range(s_len):\n            if s[i] not in letter_count:\n                letter_count[s[i]] = 1\n            else:\n                letter_count[s[i]] += 1\n                if letter_count[s[i]] > 1:\n                    if letter_count[s[i]] - 1 in letter_count:\n                        letter_count[s[i]] = letter_count[s[i]] - 1\n                    else:\n                        letter_count[s[i]] = 1\n                elif letter_count[s[i]] == 1:\n                    letter_count[s[i]] = 0\n            if i >= longest_substring:\n                longest_substring = i - 1\n        return longest_substring\n"
    },
    {
        "number": 4090,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\n-----Solution-----\n \nThe first segment of the input contains at least two non-intersecting equal segments of words, and replace each chosen segment with the string consisting of first letters of the words in the segment (written in uppercase).\n \nThe second segment contains at least two non-intersecting equal segments of words, and replace each chosen segment with the string consisting of first letters of the words in the segment (written in uppercase).\n \nThe third segment contains at least two non-intersecting equal segments of words, and replace each chosen segment with the string consisting of first letters of the words in the segment (written in uppercase).\n\nReturn the minimum length of the text after at most one abbreviation.\n\nInput\n6\nto be or not to be\n\nOutput\n12\n\nInput\n10\naa bb aa aa bb bb\n\nOutput\n11\n\nInput\n6\nab aa aa aa aa\n\nOutput\n13\n\nInput\n10\naa bb aa aa aa\n\nOutput\n10\n\nInput\n6\naa bb aa aa aa\n\nOutput\n11\n\nInput\n6\nbb aa aa aa aa\n\nOutput\n13\n\nInput\n5\naaaaa\n\nOutput\n2\n\nInput\n6\nab aa aa aa aa\n\nOutput\n11\n\nInput\n6\nbb aa aa aa aa\n\nOutput\n10\n\nInput\n6\naa bb aa aa aa aa\n\nOutput\n11\n\nInput\n6\nbb aa aa aa aa aa\n\nOutput\n10\n\nInput\n6\naaaaa\n\nOutput\n2\n\nInput\n5\naaaaa\n\nOutput\n1\n\n\"\"\"\n\nclass Solution:\n    def lengthOfLongestSubstring(self, s: str) -> int:\n        \n        d = {}\n        max_len = 0\n        \n        for i in range(len(s)):\n            if s[i] not in d:\n                d[s[i]] = i\n            else:\n                if len(d[s[i]]) > i - d[s[i]]:\n                    d[s[i]] = i\n                    max_len = max(max_len, i - d[s[i]])\n        \n        return max_len"
    },
    {
        "number": 4090,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    word = stdin.split()\n    for i in range(1, len(word)):\n        word[i] = word[i][:word[i].index('a')] + 'B' + word[i][word[i].index('a') + 1:]\n    return ''.join(word)\n\ndef"
    },
    {
        "number": 4090,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    word_list = []\n    for _ in range(int(stdin)):\n        word_list.append(stdin.split())\n    \n    return solution(word_list)\n\"\"\"\n\ndef"
    },
    {
        "number": 4090,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    ab_list = [list(stdin.strip().split()) for _ in range(n)]\n    words = []\n    for i in range(n):\n        words.append(ab_list[i][0])\n    for i in range(n):\n        for j in range(i + 1, n):\n            if words[i][:j] == words[j][:i]:\n                words[i] = words[i][1:]\n    answer = len(words)\n    return answer\n    pass\n\ndef"
    },
    {
        "number": 4090,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, W = map(int, stdin.split())\n    W_old = W\n    W_new = []\n    for _ in range(N):\n        W_new.append(W_old)\n        W_old = W_old[1:] + W_old[0]\n    W_new.sort()\n    for w in W_new:\n        if w[0] == \"a\":\n            w = w[1:]\n        if w in W:\n            W_new.remove(w)\n    W_new.sort()\n    result = len(W_new)\n    return str(result)\n\nInput\n2\na b a b\n\nOutput\n1\n\nInput\n2\nAB aa BB\n\nOutput\n3\n\nInput\n6\naaa bbb aa aa bb bb\n\nOutput\n1\n\nInput\n10\na aa aa aa aa aa aa aa aa aa\n\nOutput\n1\n\nInput\n10\na aa aa aa aa aa aa aa aa aa aa aa aa aa\n\nOutput\n10\n\n'''\n\nfrom collections import deque\n\n\ndef"
    },
    {
        "number": 4091,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    A = [int(stdin[i]) for i in range(n)]\n    if k == 0:\n        return str(sum(A))\n    else:\n        A.sort()\n        T = [A[i+k] for i in range(n-k)]\n        return str(sum(T))\n\n\"\"\"\ndef"
    },
    {
        "number": 4091,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = stdin.split()\n    a = list(map(int, a))\n    a.sort()\n    a = a[:k]\n    a = a + a[k:]\n    a = [str(a[i]) for i in range(len(a))]\n    print(''.join(a))\n    return ''.join(a)"
    },
    {
        "number": 4091,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    if n < k:\n        return str(1)\n    if n == k:\n        return str(sum(a))\n    dp = [[0] * 3001 for _ in range(k+1)]\n    dp[0][0] = 1\n    for i in range(1, k+1):\n        for j in range(1, 3001):\n            if j-a[i-1] >= 0:\n                dp[i][j] = dp[i-1][j-a[i-1]] + dp[i-1][j]\n    return str(dp[k][3001])\n\n-----Constraints-----\n1 <= stdin.length <= 1e5\n1 <= n, k <= 3001\n1 <= a[i] <= 2000\n\n\n------Time complexity--------\nO(n*k)\n\nO(n+k)\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\n\"\"\"\ndef"
    },
    {
        "number": 4091,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    def solve(n, k, a):\n        p = 0\n        for i in range(n):\n            p += a[i]\n            if p > k:\n                return 'Yes'\n        return 'No'\n\n    if solve(n, k, a) == 'Yes':\n        return str(k) + '\\n' + str(n) + '\\n' + str(a) + '\\n' + solve(n, k, a)\n\n    if solve(n, k, a) == 'No':\n        return str(k) + '\\n' + str(n) + '\\n' + solve(n, k, a)\n\nTest Codes\n\n>>> import os\n>>> os.system(\"python3 main.py\")\n> python3 main.py\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1\n> 1"
    },
    {
        "number": 4091,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    l = []\n    for _ in range(len(stdin)):\n        l.append(int(stdin.split(\" \")[0]))\n    print(l)\n    \n    if l[0] < l[1]:\n        l[0] = 1\n    print(l)\n    for i in range(len(l)-2):\n        if l[i+2] < l[i+1] and l[i+1] < l[i]:\n            l[i+2] = 1\n            print(l)\n        elif l[i+1] < l[i+2] and l[i+2] < l[i+1]:\n            l[i+1] = 1\n            print(l)\n        elif l[i+1] < l[i+2] and l[i+2] < l[i+1]:\n            l[i+1] = l[i+1] + l[i+2]\n            print(l)\n    print(l)\n\n    print(l[0]+l[1]+l[2])\n    return str(l[0]+l[1]+l[2])\n"
    },
    {
        "number": 4091,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    print(sum(a))\n    print(len(a))\n    print(a)\n    print(a[n - 1])\n    for i in range(len(a) - 1):\n        print(i, a[i + 1] - a[i])\n        if a[i + 1] - a[i] < k:\n            break\n    print(a[i + 1] - a[i])\n    return str(a[i + 1] - a[i])\n\n\n-----Examples-----\n"
    },
    {
        "number": 4091,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = [int(x) for x in stdin.split()]\n    answer = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if a[i] < a[j] < a[k]:\n                    a[i], a[j], a[k] = a[k], a[i], a[j]\n                    answer += a[i] + a[j] + a[k]\n    answer += n*(n-1)/2\n    return str(answer)"
    },
    {
        "number": 4091,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split()]\n    a = [int(i) for i in stdin.split()]\n    answer = 0\n    \n    for a_i in a:\n        answer = max(answer, k-a_i)\n        \n    return str(answer)\n"
    },
    {
        "number": 4091,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    n,k = map(int,stdin.split())\n    a = list(map(int,stdin.split()))\n    \n    # If the sum of all difficulties is less than $n$ we can skip more problems\n    if a[0] + a[1] < n:\n        return \"no\"\n    \n    # We have to solve all problems, and calculate the total profit\n    max_profit = 0\n    for i in range(len(a)):\n        max_profit += a[i] * (i+1)\n    \n    # We need to remove the first problems because the sum of difficulties is lower than $n$\n    # because the sum of difficulties is smaller than $n$\n    a.pop(0)\n    \n    # We iterate over each problem in the list a\n    # And we calculate the maximum profit as we will take problems one by one, and calculate the sum of difficulties\n    for i in range(len(a)):\n        # If the problem is solved in $k$ days, we will calculate the profit\n        # We will add to the maximum profit\n        # If the problem is solved in $k$ days, we will calculate the profit\n        # But we will calculate profit with the maximum possible problem\n\n        # Sum all difficulties\n        profit = a[i] + max_profit\n\n        if profit > k:\n            break\n        else:\n            max_profit += a[i]\n            a.pop(i)\n    \n    # Sum all difficulties\n    return str(profit)\n"
    },
    {
        "number": 4091,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = map(int, stdin.split())\n    \n    for j in range(k):\n        for i in range(n):\n            if a[i] >= i + 1:\n                a[i] -= 1\n                break\n    \n    if k == 1:\n        return str(sum(a))\n    else:\n        return str(max(a))\n\ndef"
    },
    {
        "number": 4092,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.rstrip())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    for i in range(len(a)):\n        if a[i] > 0:\n            b = a[i] + a[i + 1]\n            a[i] = b % 10\n            a[i + 1] = b // 10\n    return''.join(map(str, a))\n\n\ndef"
    },
    {
        "number": 4092,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, a_1, a_2, a_3 = map(int, stdin.split())\n    a = [int(a) for a in stdin.split()]\n    a_i = a_1 + a_2 + a_3\n    a_m = min(a)\n    a_r = max(a)\n    #  a = [a_m, a_r]\n    a = [(a_m, a_r)]\n    #  a = [(a_m + a_r, a_m, a_r)]\n    #  a = [(a_m, a_r)]\n    #  a = [(a_m, a_r), (a_m + a_r, a_m, a_r)]\n    #  a = [(a_m, a_r), (a_m + a_r, a_m, a_r), (a_m + a_r, a_m, a_r)]\n    #  a = [(a_m, a_r), (a_m + a_r, a_m, a_r), (a_m + a_r, a_m, a_r)]\n    #  a = [(a_m, a_r), (a_m + a_r, a_m, a_r), (a_m + a_r, a_m, a_r)]\n    #  a = [(a_m, a_r), (a_m + a_r, a_m, a_r), (a_m + a_r, a_m, a_r)]\n    #  a = [(a_m, a_r)]\n    #  a = [(a_m, a_r), (a_m, a_r)]\n    #  a = [(a_m, a_r), (a_m, a_r)]\n    #  a = [(a_m, a_r)]\n    #  a = [(a_m, a_r), (a_m, a_r)]\n    #  a = [(a_m, a_r), (a_m, a_r), (a_m, a_r)]\n    #  a = [(a_m, a_r), (a_m, a_r), (a_m, a_r)]\n    #  a = [(a_m, a_r), (a_m, a_r), (a_m, a_r)]\n    #  a = [(a_m, a_r), (a_m, a_r), (a_m, a_r), (a_m, a_r)]\n    #  a = [(a_m, a_r)]\n    #  a = [(a_m, a_r), (a_m, a_r), (a_m, a_r), (a_m, a_r)]\n    #  a = [(a_m, a_r), (a_m, a_r), (a_m, a_r), (a_m, a_r)]\n    #  a = [(a_m, a_r)]\n    #  a = [(a_m, a_r), (a_m, a_r), (a_m, a_r)]\n    #  a = [(a_m, a_r), (a_m, a_r), (a_m, a_r), (a_m, a_r)]\n    #  a = [(a_m, a_r), (a_m, a_r), (a_m, a_r), (a_m, a_r)]\n    #  a = [(a_m, a_r)]\n    #  a = [(a_m, a_r)]\n    #  a = [(a_m, a_r), (a_m, a_r)]\n    #  a = [(a_m, a_r), (a_m, a_r), (a_m, a_r)]\n    #  a = [(a_m, a_r), (a_m, a_r), (a_m, a_r)]\n    #  a = [(a_m, a_r), (a_m, a_r), (a_m, a_r), (a_m, a_r)]\n    #  a = [(a_m, a_r), (a_m, a_r), (a_m, a_r)]\n    #  a = [(a_m, a_r)]\n    #  a = [(a_m, a_r), (a_m, a_r), (a_m, a_r)]\n    #  a = [(a_m, a_r)]\n    #  a = [(a_m, a_r), (a_m, a_r)]\n    #  a = [(a_m, a_r), (a_m, a_r), (a_m, a_r)]\n    #  a = [(a_m, a_r)]\n    #  a = [(a_m, a_r)]\n    #  a = [(a_m, a_r)]\n    #  a = [(a_m, a_r)]\n    #  a = [(a_m, a_r)]\n    #  a = [(a_m, a_r)]\n    #  a = [(a_m, a_r)]\n    #  a = [(a_m, a_r)]\n    #  a = [(a_m, a_r)]\n    #  a = [(a_m, a_r)]\n    #  a = [(a_m, a_r)]\n    #  a = [(a_m, a_r)]\n    #  a = [(a_m, a_r)]\n    #  a = [(a_m, a_r)]\n    #  a = [(a_m, a_r)]\n    #  a = [(a_m, a_r)]\n    #  a = [(a_m, a_r)]\n    #  a = [(a_m, a_r)]\n    #  a = [(a_m, a_r)]\n    #  a = [(a_m, a_r"
    },
    {
        "number": 4092,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4092,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    num_int = 0\n    for i in range(len(stdin)):\n        if stdin[i]!= \"-\":\n            num_int += int(stdin[i])\n        else:\n            break\n    return str(num_int)\n\n\ndef"
    },
    {
        "number": 4092,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    def valid_subsegment(a: list, n: int, start: int, end: int) -> bool:\n        \n        if end-start == 1:\n            return True\n        \n        mid = (end + start) // 2\n        \n        for i in range(start, mid):\n            if a[i]!= 0 and a[mid]!= 0:\n                if a[mid] + a[i] > a[end]:\n                    return False\n                elif a[mid] + a[i] < a[start]:\n                    return False\n            \n        return True\n    \n    n = int(stdin.strip())\n    \n    a = []\n    for _ in range(n):\n        a.append(int(stdin.strip()))\n    \n    if valid_subsegment(a, n, 0, n):\n        return '0'\n    \n    if valid_subsegment(a, n, 0, n-1):\n        return '0'\n    \n    return '0'\n\"\"\"\n\nclass Solution:\n    def solve(self, s: str) -> str:\n        def valid_subsegment(a: list, n: int, start: int, end: int) -> bool:\n            if end-start == 1:\n                return True\n            \n            mid = (end + start) // 2\n            \n            for i in range(start, mid):\n                if a[i]!= 0 and a[mid]!= 0:\n                    if a[mid] + a[i] > a[end]:\n                        return False\n                    elif a[mid] + a[i] < a[start]:\n                        return False\n                \n            return True\n        \n        n = int(s.strip())\n        a = []\n        for _ in range(n):\n            a.append(int(s.strip()))\n        \n        if valid_subsegment(a, n, 0, n):\n            return '0'\n        \n        return '0'\n"
    },
    {
        "number": 4092,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split()\n    a_1, a_2, a_3, a_4 = lines[0], lines[1], lines[2], lines[3]\n    int_1 = int(a_1)\n    int_2 = int(a_2)\n    int_3 = int(a_3)\n    int_4 = int(a_4)\n    s = 0\n    if int_1 + int_2 + int_3 + int_4 < 10:\n        s = 0\n    elif int_1 + int_2 + int_3 + int_4 == 0:\n        s = 1\n    else:\n        if int_1 + int_2 + int_3 + int_4 == int_1 + int_2 + int_3 + int_4:\n            s = 2\n        else:\n            s = 3\n    return str(s)\n\nprint(solution(input()))"
    },
    {
        "number": 4092,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.split()))\n    sum = 0\n    for i in range(1, n):\n        sum += a[i]\n        if sum == 0:\n            break\n    if sum!= 0:\n        return '0'\n    else:\n        return '1'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4092,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    a = sorted(a)\n    ans = ''\n    start = 0\n    end = 0\n    for i in range(len(a)):\n        end = a[i]\n        while end - start > 1:\n            ans += str(end - start) + '-'\n            end = a[i]\n        ans += str(end - start)\n        start = end\n    print(ans[::-1])\n    return ans[::-1]\n"
    },
    {
        "number": 4092,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split(' ')))\n    if sum(a)!= 0:\n        return '0'\n    \n    if len(a) == 1:\n        return '0'\n    \n    a.sort()\n    \n    res = a[0] + a[-1]\n    \n    for i in range(n-1):\n        if sum(a[i:i+2]) == 0:\n            res += a[i+1]\n            a[i+1] = 0\n    \n    return str(res)\n\n------------------------------\n\nthe function is not used.\ndef"
    },
    {
        "number": 4092,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(i) for i in stdin.split(' ')]\n    b = [i for i in a if i!= 0]\n    s = 0\n    for i in b:\n        s += i\n    return str(s)\n"
    },
    {
        "number": 4093,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    t = int(stdin)\n    for i in range(t):\n        res = 0\n        for j in range(n):\n            res += abs(a[j] - a[j + 1])\n        print(res)\n    return str(res)\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4093,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    print(sum(abs(sum(a)-m)))\n    return '0'\n\n\n\n-----Example-----\nInput\n5\n1 100\n2 2\n5 5\n2 1000000000\n1000000000 1000000000\n\nOutput\n0\n2\n10\n1000000000\n\n\n\"\"\"\n\nfrom typing import List\n\n\nclass Solution:\n    def find(self, arr: List[int], value: int) -> int:\n        arr.append(value)\n        if len(arr) > len(set(arr)):\n            return -1\n        for i in range(len(arr) - 1, 0, -1):\n            if arr[i]!= arr[i - 1]:\n                return arr[i - 1]\n\n    def findMaxSum(self, arr: List[int], value: int) -> int:\n        arr.append(value)\n        if len(arr) > len(set(arr)):\n            return -1\n        for i in range(len(arr) - 1, 0, -1):\n            if arr[i]!= arr[i - 1]:\n                arr[i - 1] = arr[i]\n                arr[i] = value\n                break\n        return arr[-1]\n\n\ndef"
    },
    {
        "number": 4093,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.split()\n    max_sum = 0\n    for _ in range(len(n)):\n        n[-1] = int(n[-1])\n        max_sum += n[-1]\n        n.pop()\n    return str(max_sum)\n\n\n-----Modify-----\nFor example, the input will be:\n5\n1 100\n2 2\n5 5\n2 1000000000\n1000000000 1000000000\n\nAfter modifying the input, the output should be:\n1\n3\n10\n1000000000\n2000000000\n\nIn this specific example, the input would be:\n5\n1 100\n2 2\n5 5\n2 1000000000\n1000000000 1000000000\n\nAfter modifying the input, the output should be:\n0\n2\n10\n1000000000\n2000000000\n\n-----Solution-----\n1, 2, 3, 5, 6, 7\n2\n3\n5\n6\n7\n4\n3\n2\n2\n4\n3\n5\n6\n7\n2\n1\n4\n3\n5\n2\n\n2, 3, 5, 6, 7, 8\n1, 2\n3, 5\n6, 7\n8\n4\n\n2, 1, 3, 5, 7, 8\n3, 2\n5, 4\n7, 8\n8\n3\n\n2, 3, 5, 7, 8, 9\n6, 7, 8\n9\n10\n\n2, 3, 5, 7, 8, 9\n6, 3, 5\n9\n10\n\n2, 3, 5, 7, 8, 9\n6, 3, 5\n8\n9\n10\n\n2, 3, 5, 7, 8, 9\n6, 3, 5\n8\n9\n10\n\n2, 3, 5, 7, 8, 9\n6, 5, 7\n9\n10\n\n2, 3, 5, 7, 8, 9\n6, 3, 5\n8\n9\n10\n\n2, 3, 5, 7, 8, 9\n6, 5, 7\n8\n9\n10\n\n2, 3, 5, 7, 8, 9\n6, 5, 7\n8\n9\n10\n\n2, 3, 5, 7, 8, 9\n6, 5, 7\n8\n9\n10\n\n2, 3, 5, 7, 8, 9\n6, 5, 7\n8\n9\n10\n\n2, 3, 5, 7, 8, 9\n6, 5, 7\n8\n9\n10\n\n2, 3, 5, 7, 8, 9\n6, 5, 7\n8\n9\n10\n\n2, 3, 5, 7, 8, 9\n6, 5, 7\n8\n9\n10\n\n2, 3, 5, 7, 8, 9\n6, 5, 7\n8\n9\n10\n\n2, 3, 5, 7, 8, 9\n6, 5, 7\n8\n9\n10\n\n2, 3, 5, 7, 8, 9\n6, 5, 7\n8\n9\n10\n\n2, 3, 5, 7, 8, 9\n6, 5, 7\n8\n9\n10\n\n2, 3, 5, 7, 8, 9\n6, 5, 7\n8\n9\n10\n\n2, 3, 5, 7, 8, 9\n6, 5, 7\n8\n9\n10\n\n2, 3, 5, 7, 8, 9\n6, 5, 7\n8\n9\n10\n\n2, 3, 5, 7, 8, 9\n6, 5, 7\n8\n9\n10\n\n2, 3, 5, 7, 8, 9\n6, 5, 7\n8\n9\n10\n\n2, 3, 5, 7, 8, 9\n6, 5, 7\n8\n9\n10\n\n2, 3, 5, 7, 8, 9\n6, 5, 7\n8\n9\n10\n\n2, 3, 5, 7, 8, 9\n6, 5, 7\n8\n9\n10\n\n2, 3, 5, 7, 8, 9\n6, 5, 7\n8\n9\n10\n\n2, 3, 5, 7, 8, 9\n6, 5, 7\n8\n9\n10\n\n2, 3, 5, 7, 8, 9\n6, 5, 7\n8\n9\n10\n\n2, 3, 5, 7, 8, 9\n6, 5, 7\n8\n9\n10\n\n2, 3, 5, 7, 8, 9\n6, 5, 7\n8\n9\n10\n\n2, 3, 5, 7, 8, 9\n6, 5, 7\n8\n9\n10\n\n2, 3, 5, 7, 8, 9\n6, 5, 7\n8\n9\n10\n\n2, 3, 5, 7, 8, 9\n6, 5, 7\n8\n9\n10\n\n2, 3, 5, 7, 8, 9\n6, 5, 7\n8\n9\n10\n\n2, 3, 5, 7, 8, 9\n6, 5, 7\n8\n9\n10\n\n2, 3, 5, 7, 8, 9\n6, 5, 7\n8\n9\n10\n\n2, 3, 5, 7, 8, 9\n6, 5, 7\n8\n9\n10\n\n2, 3, 5, 7, 8, 9\n6, 5, 7\n8\n9\n10\n\n2, 3, 5, 7, 8, 9\n6, 5, 7\n8\n9\n10\n\n2, 3, 5, 7, 8, 9\n6, 5, 7\n8\n9\n10\n\n2, 3, 5, 7, 8, 9\n6, 5, 7\n8\n9\n10\n\n2, 3, 5, 7, 8, 9\n6, 5, 7\n8\n9\n10\n\n2, 3, 5, 7, 8, 9\n6, 5, 7\n8\n9\n10\n\n2, 3, 5, 7, 8, 9\n6, 5, 7\n8\n9\n10\n\n2, 3, 5, 7, 8, 9\n6, 5, 7\n8\n9\n10\n\n2, 3, 5, 7, 8, 9\n6, 5, 7\n8\n9\n10\n\n2, 3, 5, 7,"
    },
    {
        "number": 4093,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    answer = 0\n    \n    for i in range(1, n):\n        if a[i] - a[i-1] <= m:\n            answer += a[i-1]\n    print(answer)\n    return str(answer)"
    },
    {
        "number": 4093,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    m = int(stdin.split('\\n')[1])\n    numbers = []\n    for _ in range(n):\n        numbers.append(int(stdin.split('\\n')[2 + _]))\n    arr = numbers[:]\n    arr.sort()\n    sum_arr = 0\n    for i in range(n):\n        sum_arr += arr[i] - arr[i+1]\n    print(sum_arr)\n    for i in range(n - 2, -1, -1):\n        sum_arr -= arr[i] - arr[i+1]\n    print(sum_arr)\n    answer = 0\n    for i in range(n):\n        answer += arr[i] - arr[i+1]\n    print(answer)\n    return str(answer)"
    },
    {
        "number": 4093,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    arr = [int(stdin.split()[i]) for i in range(n)]\n    answer = 0\n    for a in arr:\n        if a > m:\n            answer = max(m, answer)\n        else:\n            answer = a\n    return str(answer)\n\"\"\"\nimport math\n\ndef"
    },
    {
        "number": 4093,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return str(max(A + B - min(A, B), A + B - A))\n\n\n\"\"\"\nimport math\n\n\ndef"
    },
    {
        "number": 4093,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    sum_a = sum(a)\n    if len(a) >= m:\n        print(0)\n    else:\n        print(sum_a - m)\nsolution(stdin)\n-----end of code-----"
    },
    {
        "number": 4093,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    for tc in range(int(stdin)):\n        n, m = map(int, stdin.split())\n        a = sorted(list(map(int, stdin.split())))\n        print(max(map(sum, zip(a, [1] * n))))\n"
    },
    {
        "number": 4093,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    result = 0\n    arr = []\n    for i in range(int(stdin.strip())):\n        arr.append(list(map(int, stdin.strip().split())))\n        result += max(arr[-1]) - min(arr[-1])\n    return str(result)\n\nprint(solution(\"1\"))\n"
    },
    {
        "number": 4094,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lst = [int(s) for s in stdin.split() if s.isdigit()]\n    return str(lst.index(max(lst))+1)\n\n\"7*7*7\"\n\"7*7*7*7\"\n\"7*7*7*7*7\"\n\"7*7*7*7*7*7\"\n\"7*7*7*7*7*7*7\"\n\"7*7*7*7*7*7*7*7\"\n\"7*7*7*7*7*7*7*7*7\"\n\"7*7*7*7*7*7*7*7*7\"\n\"7*7*7*7*7*7*7*7*7*7\"\n\"7*7*7*7*7*7*7*7*7*7\"\n\"7*7*7*7*7*7*7*7*7*7\"\n\"7*7*7*7*7*7*7*7*7*7*7\"\n\"7*7*7*7*7*7*7*7*7*7*7*7\"\n\"7*7*7*7*7*7*7*7*7*7*7*7\"\n\"7*7*7*7*7*7*7*7*7*7*7*7\"\n\"7*7*7*7*7*7*7*7*7*7*7*7\"\n\"7*7*7*7*7*7*7*7*7*7*7*7\"\n\"7*7*7*7*7*7*7*7*7*7*7*7\"\n\"7*7*7*7*7*7*7*7*7*7*7*7\"\n\"7*7*7*7*7*7*7*7*7*7*7*7\"\n\"7*7*7*7*7*7*7*7*7*7*7*7*7\"\n\"7*7*7*7*7*7*7*7*7*7*7*7*7\"\n\"7*7*7*7*7*7*7*7*7*7*7*7*7\"\n\"7*7*7*7*7*7*7*7*7*7*7*7*7\"\n\"7*7*7*7*7*7*7*7*7*7*7*7*7\"\n\"7*7*7*7*7*7*7*7*7*7*7*7*7\"\n\"7*7*7*7*7*7*7*7*7*7*7*7*7\"\n\"7*7*7*7*7*7*7*7*7*7*7*7*7\"\n\"7*7*7*7*7*7*7*7*7*7*7*7*7\"\n\"7*7*7*7*7*7*7*7*7*7*7*7*7\"\n\"7*7*7*7*7*7*7*7*7*7*7*7*7\"\n\"7*7*7*7*7*7*7*7*7*7*7*7*7\"\n\"7*7*7*7*7*7*7*7*7*7*7*7*7\"\n\"7*7*7*7*7*7*7*7*7*7*7*7*7\"\n\"7*7*7*7*7*7*7*7*7*7*7*7*7\"\n\"7*7*7*7*7*7*7*7*7*7*7*7*7\"\n\"7*7*7*7*7*7*7*7*7*7*7*7*7\"\n\"7*7*7*7*7*7*7*7*7*7*7*7*7\"\n\"7*7*7*7*7*7*7*7*7*7*7*7*7\"\n\"7*7*7*7*7*7*7*7*7*7*7*7*7\"\n\"7*7*7*7*7*7*7*7*7*7*7*7*7\"\n\"7*7*7*7*7*7*7*7*7*7*7*7*7\"\n\"7*7*7*7*7*7*7*7*7*7*7*7*7\"\n\"7*7*7*7*7*7*7*7*7*7*7*7*7\"\n\"7*7*7*7*7*7*7*7*7*7*7*7*7\"\n\"7*7*7*7*7*7*7*7*7*7*7*7*7\"\n\"7*7*7*7*7*7*7*7*7*7*7*7*7\"\n\"7*7*7*7*7*7*7*7*7*7*7*7*7\"\n\"7*7*7*7*7*7*7*7*7*7*7*7*7\"\n\"7*7*7*7*7*7*7*7*7*7*7*7*7\"\n\"7*7*7*7*7*7*7*7*7*7*7*7*7\"\n\"7*7*7*7*7*7*7*7*7*7*7*7*7\"\n\"7*7*7*7*7*7*7*7*7*7*7*7*7\"\n\"7*7*7*7*7*7*7*7*7*7*7*7*7\"\n\"7*7*7*7*7*7*7*7*7*7*7*7*7\"\n\"7*7*7*7*7*7*7*7*7*7*7*7*7\"\n\"7*7*7*7*7*7*7*7*7*7*7*7*7\"\n\"7*7*7*7*7*7*7*7*7*7*7*7*7\"\n\"7*7*7*7*7*7*7*7*7*7*7*7*7\"\n\"7*7*7*7*7*7*7*7*7*7*7*7*7\"\n\"7*7*7*7*7*7*7*7*7*7*7*7*7\"\n\"7*7*7*7*7*7*7*7*7*7*7*7*7\"\n\"7*7*7*7*7*7*7*7*7*7*7*7*7\"\n\"7*7*7*7*7*7*7*7*7*7*7*7*7\"\n\"7*7*7*7*7*7*7*7*7*7*7*7*7\"\n\"7*7*7*7*7*7*7*7*7*7*7*7*7\"\n\"7*7*7*7*7*7*7*7*7*7*7*7*7\"\n\"7*7*7*7*7*7*7*7*7*7*7*7*7\"\n\"7*7*7*7*7*7*7*7*7*7*7*7*7\"\n\"7*7*7*7*7*7*"
    },
    {
        "number": 4094,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    nums = list(map(int, stdin.split()))\n    n = len(nums)\n    for i in range(n):\n        for j in range(n):\n            if nums[j] % nums[i] == 0:\n                return str(i+1)\n    return \"-1\"\n\n1.\n\n##for i in range(1,int(nums[-1])+1):\n    ##print(str(i)+\"*\"+str(i))\n\n2.\n\n##for i in range(1,int(nums[-1])+1):\n    ##print(str(i)+\"*\"+str(i))\n\n3."
    },
    {
        "number": 4094,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4094,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    for k in range(10, 10000):\n        if str(k).count(str(k)[::-1]) == len(str(k)[::-1]):\n            print(k)\n            return\n"
    },
    {
        "number": 4094,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def solve(k: int) -> int:\n        if len(str(k)) == 1:\n            return int(str(k))\n        else:\n            ans = 1\n            for i in range(2, len(str(k)) + 1):\n                ans *= int(str(k) + str(i))\n            return ans\n    \n    for i in range(int(input())):\n        print(solve(int(input())))"
    },
    {
        "number": 4094,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin)\n    answer = 0\n    for i in range(1, K+1):\n        if i % 7 == 0:\n            answer += 1\n    return str(answer)\n"
    },
    {
        "number": 4094,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin[0])\n    # N - 1 is the number of string, which are multiples of K\n    K = int(stdin[1])\n    # range(N) is range of numbers, which are multiples of K\n    lst = list(map(int, stdin[2:].split(',')))\n    for num in lst:\n        if num % K == 0:\n            print(num, end='')\n        else:\n            print(-1)\n"
    },
    {
        "number": 4094,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    K, n = map(int, stdin.split())\n    string = stdin.strip().split()\n    answer = 0\n    for i in range(0, len(string) - 1):\n        for j in range(i + 1, len(string)):\n            if string[i] == string[j]:\n                answer = str(int(string[i]) * int(string[j]))\n    print(answer)\n\n\nsolution(input())\n"
    },
    {
        "number": 4094,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    K = int(input())\n    N = len(stdin)\n    res = 1\n    for i in range(1, N+1):\n        if int(stdin[i-1]) % K!= 0:\n            continue\n        else:\n            res = max(res, i)\n    return str(res)\n"
    },
    {
        "number": 4094,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin[0])\n    if K%2!= 0:\n        return -1\n    for i in range(1,len(stdin)-1,1):\n        if K%int(stdin[i]) == 0:\n            return i\n    return -1\nprint(solution(\"77777\"))\n"
    },
    {
        "number": 4095,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    pairs = [[] for _ in range(n)]\n    for _ in range(n-1):\n        pairs[int(stdin.split()[1])-1].append([int(stdin.split()[0])-1, int(stdin.split()[2])])\n        pairs[int(stdin.split()[2])-1].append([int(stdin.split()[0])-1, int(stdin.split()[1])])\n    return str(len(pairs))\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= m <= 10^5\n\n----Solved----\n1\n'''\n\nimport math\n\n\ndef"
    },
    {
        "number": 4095,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    p = [int(stdin.strip()) for _ in range(n)]\n    p.sort()\n    res = 0\n    for i in range(n-1):\n        left = i+1\n        right = n-1\n        while left < right:\n            if p[left] == p[right]:\n                break\n            if p[left] + p[right] > p[left] + p[right]:\n                right -= 1\n            else:\n                left += 1\n        res += (n-1) - left\n        if left == right:\n            res += 1\n    print(res)\n\ndef"
    },
    {
        "number": 4095,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    number, middle = list(map(int, stdin.split())), 0\n    n, m = len(number), len(number[0])\n    nums = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            if number[i][j]!= middle:\n                nums.append((i, j))\n    nums.sort(key=lambda x: (x[0] - x[1], x[0]))\n    pairs = 0\n    for i in range(len(nums)):\n        left, right = nums[i][1], nums[i][1] + 1\n        if number[left][right]!= middle:\n            pairs += 1\n    return str(pairs)\n"
    },
    {
        "number": 4095,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    p = list(map(int, stdin.strip().split()))\n    if n % 2 == 1:\n        if len(p) % 2 == 1:\n            return str(sum(p) // 2)\n        else:\n            return str(sum(p) // 2) + \"-\" + str(sum(p) // 2 + 1)\n    else:\n        if len(p) % 2 == 1:\n            return str(sum(p) // 2)\n        else:\n            return str(sum(p) // 2) + \"-\" + str(sum(p) // 2 + 1) + \"-\" + str(sum(p) // 2)\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n0 <= p[i] <= 10^6\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4095,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    p = list(map(int, stdin.split()))\n    p.sort()\n\n    print(sum(p) // 2)\nsolution(inp)\n"
    },
    {
        "number": 4095,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin[2]) - int(stdin[0]))\n"
    },
    {
        "number": 4095,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    arr = stdin.split()\n    n = int(arr[0])\n    m = int(arr[1])\n    if m % 2!= 0:\n        return 'Invalid'\n    pairs = []\n    pairs.append([0, 0])\n    for i in range(1, n):\n        if m % 2 == 1:\n            l = pairs[-1][0]\n            r = pairs[-1][1] + 1\n            while l + 1 < r:\n                l, r = r, r - l + 1\n            pairs.append([l, r])\n            pairs.append([r, l])\n        else:\n            l = pairs[-1][0] + 1\n            r = pairs[-1][1] + 1\n            while l < r:\n                l, r = r, r - l + 1\n            pairs.append([l, r])\n            pairs.append([r, l])\n    return str(len(pairs))\n"
    },
    {
        "number": 4095,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n % 2 == 0 and m % 2 == 0:\n        return '0'\n    elif n % 2 == 0 and m % 2!= 0:\n        return str(int(m/2)) + '0'\n    elif n % 2!= 0 and m % 2 == 0:\n        return str(int(n/2)) + '0'\n    elif n % 2!= 0 and m % 2!= 0:\n        return str(int(n/2)) + '0'\n    elif n % 2!= 0 and m % 2!= 0:\n        return str(int(n/2)) + '0'\n    elif n % 2 == 0 and m % 2 == 0:\n        return str(int(m/2)) + '0'\n    elif n % 2 == 0 and m % 2!= 0:\n        return str(int(m/2)) + '0'\n    elif n % 2!= 0 and m % 2 == 0:\n        return str(int(n/2)) + '0'\n    else:\n        return str(int(n/2)) + '0'\n    \n\nprint(solution(input()))"
    },
    {
        "number": 4095,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    #Get the length of the sequence and the number of pairs\n    n, m = map(int, stdin.split())\n\n    #Create the list to store the pairs\n    pairs = []\n\n    #Convert to an array\n    pairs = list(map(int, stdin.split()))\n\n    #Create the list to store the pairs\n    pairs = []\n\n    #Count the number of pairs\n    count = 0\n\n    #Check if the sequence is odd\n    for i in range(1,n):\n        if (pairs[i-1]+1)!= pairs[i]:\n            count+=1\n            pairs.append(pairs[i-1]+1)\n\n    #Check if the sequence is even\n    if (count % 2)!= 0:\n        for i in range(m):\n            if (pairs[i]%2)!= 0:\n                count+=1\n                pairs.append(pairs[i]-1)\n    \n    #Return the number of pairs\n    return count\n"
    },
    {
        "number": 4095,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    li = list(map(int, stdin.split()))\n    seq = [li[i + 1] - li[i] for i in range(n)]\n    if m == 1:\n        m = seq[0]\n    seq = sorted(seq)\n    p = seq[int(m * (m - 1) / 2)]\n    return str(len(solution(n, p)))\n"
    },
    {
        "number": 4096,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\ndef"
    },
    {
        "number": 4096,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    k, n = map(int, stdin.split())\n    c = list(map(int, stdin.split()))\n    a = []\n    min_days = k\n    for i in range(1, n):\n        if i % 2 == 1:\n            a.append(i)\n        else:\n            if c[i] >= a[-1]:\n                c.pop(0)\n                a.append(i)\n                min_days += 1\n            else:\n                c.pop(a.index(i))\n    return str(min_days)\n\n### Discussion\n"
    },
    {
        "number": 4096,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(' ')\n    n = int(stdin[0])\n    m = int(stdin[1])\n    a_1 = int(stdin[2])\n    a_2 = int(stdin[3])\n    a_3 = int(stdin[4])\n    a_4 = int(stdin[5])\n    a_n = a_1 * (a_2 + (a_3 - 1) - a_4)\n\n    a_list = [a_1, a_2, a_3, a_4, a_n]\n\n    result = 0\n    for i in range(n):\n        result = result + a_list[i] * (i + 1)\n    return str(result)\n\ndef"
    },
    {
        "number": 4096,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    d = {}\n    for i in range(1, n+1):\n        d[i] = 0\n    for _ in range(m):\n        a, b, c = map(int, stdin.split())\n        d[a] += c\n    for k, v in sorted(d.items()):\n        if v == max(d.values()):\n            return str(k)\n    return \"-1\"\n\n\n-----Constraints-----\n\n1 <= n <= 10^4\n1 <= m <= 10^4\n\n\n-----Alternatives-----\n\n1. Use next number of days: Find minimum number of days Polycarp needs to do it.\n2. Try all possible days:\n3. Write all solutions.\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4096,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = []\n    for _ in range(n):\n        a.append(list(map(int, stdin.split())))\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            a[i][j] += a[j][i]\n    for i in range(m):\n        a[i][i] += a[i][m - 1]\n    answer = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            answer += a[i][j]\n    return str(answer)\n\n\nInput\n5 8\n2 3 1 1 2\n\nOutput\n4\n\nInput\n7 10\n5 5 5 5 5\n\nOutput\n2\n\nInput\n5 15\n5 5 5 5 5\n\nOutput\n1\n\nInput\n5 16\n5 5 5 5 5\n\nOutput\n-1\n\n\n\nExample 1:\n\nInput\n3\n2 5 1 2 4\n\nOutput\n-1\n\n\nExample 2:\n\nInput\n3\n1 5 1 2 4\n\nOutput\n0\n\n\n\nConstraints:\n\n1 <= n <= 10^5\n1 <= m <= 10^4\n0 <= a[i] <= 100\n\n\"\"\""
    },
    {
        "number": 4096,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.split(\" \")\n    m = stdin.split(\" \")\n    n = list(map(int, n))\n    m = list(map(int, m))\n    n.sort()\n    for i in range(len(m)):\n        m[i] = m[i] - n[i]\n    n = sorted(m)\n    a1, a2 = 0, 1\n    while a2 < len(n):\n        a1 = a1 + n[a2]\n        a2 += 1\n    return str(a1)\n\n\n\ndef"
    },
    {
        "number": 4096,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [0] * 100\n    i = 0\n    k = 0\n    for j in range(m):\n        k = max(k, a[i])\n        i += 1\n        a[i] = j + 1\n    answer = 0\n    while i <= n:\n        while a[i] <= k:\n            answer += 1\n            i += 1\n        k += 1\n        answer += 1\n    return str(answer)\n\nprint(solution(stdin))"
    },
    {
        "number": 4096,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    b = []\n    for i in a:\n        if len(b) < m:\n            b.append(i)\n            b.sort()\n        else:\n            if b[-m - 1] < i - i - 1:\n                b.append(i - i - 1)\n            elif b[-m - 1] == i - i - 1:\n                pass\n            else:\n                b.append(i - i - 1)\n                break\n    print(len(b))\n    if len(b) == m:\n        return '-'\n    else:\n        return '1'"
    },
    {
        "number": 4096,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = map(int, stdin.split())\n    a_set = set(a)\n    answer = 0\n    days = 0\n    while days < n and a_set:\n        days += 1\n        days_pairs = set(a_set)\n        a_set = set()\n        for i in range(len(a_set)):\n            for j in range(i + 1, len(a_set)):\n                a_set.add(a_set.pop())\n        if a_set:\n            answer += days_pairs.pop()\n            days += 1\n    if days > n:\n        answer = -1\n    return str(days)\n\n\"\"\"\ndef"
    },
    {
        "number": 4096,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    a.sort()\n    c = 0\n    for i in range(1, n):\n        c += a[i] * (i - 1)\n    if c < m:\n        return -1\n    else:\n        answer = c / m\n        return answer\n\ndef"
    },
    {
        "number": 4097,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = [int(i) for i in stdin.split()]\n    min_num = stdin[0]\n    first_num = stdin[1]\n    second_num = stdin[2]\n    third_num = stdin[3]\n    for i in range(first_num, third_num + 1):\n        if i == first_num:\n            min_num = min_num * 2\n        elif i == second_num:\n            min_num = min_num * 3\n        elif i == third_num:\n            min_num = min_num * 4\n        else:\n            min_num = min_num * -1\n    return str(min_num)\n"
    },
    {
        "number": 4097,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    b = [int(i) for i in stdin.split()]\n    b_res = []\n    check = 0\n    for i in range(n):\n        if b[i] == b[i-1] - 1:\n            check += 1\n            b[i] = b[i-1] - 1\n            if check > 3:\n                check = 0\n                b_res.append(b)\n        if check > 3:\n            check = 0\n            b[i] = b[i-1] + 1\n            if check > 2:\n                check = 0\n                b_res.append(b)\n    if len(b_res) > 0:\n        return''.join([str(i) for i in b_res])\n    else:\n        return -1\n\nRuntime: 722 ms, faster than 36.23% of Python3 online submissions for Minimum Non-Arithmetic Progression.\nMemory Usage: 16.4 MB, less than 5.63% of Python3 online submissions for Minimum Non-Arithmetic Progression.\n\n-----Original Code-----\n"
    },
    {
        "number": 4097,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    b = [int(i) for i in stdin.split(' ')]\n    b.sort()\n    b_copy = b[:]\n    length = len(b)\n    count = 1\n    while True:\n        b.sort()\n        try:\n            if b[length - 1] - b[0] == 1:\n                return str(1)\n            else:\n                while b[0] - b[count] == 1:\n                    b[count] = b[count] - 1\n                count = count + 1\n        except:\n            break\n    \n    \n    \n"
    },
    {
        "number": 4097,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    num = []\n    for i in range(N):\n        num.append(int(stdin[i]))\n    \n    if len(set(num)) == 1:\n        return 1\n    \n    num.sort()\n    if num[0] == 0:\n        return -1\n    \n    while len(num) > 2:\n        if num[-1] == num[-2] == num[-3] == 0:\n            return len(num)\n        \n        if num[-1] == num[-2] == num[-3] == 1:\n            return -1\n        \n        if num[-1] == num[-3] == num[-2] == 1:\n            num.pop()\n    \n    return len(num) + 1\n\n'''"
    },
    {
        "number": 4097,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip().split()[0])\n    b = [int(x) for x in stdin.strip().split()[1:]]\n    \n    return min(len(set(b)), abs(sum(b)))\n"
    },
    {
        "number": 4097,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(stdin[0]) for _ in range(n)]\n    for i in range(1, n):\n        for j in range(i):\n            if a[i-j-1] - a[i-j] == 1:\n                a[i-j-1] += 1\n            else:\n                a[i-j-1] -= 1\n    for j in range(n):\n        if a[j] < 0:\n            return -1\n    for i in range(n):\n        if a[i] > 0:\n            return i\n    return n"
    },
    {
        "number": 4097,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    b = [int(x) for x in stdin.split()]\n\n    nums = list(range(1, n+1))\n    print(nums)\n    d = []\n    d.append(nums[0])\n    for i in range(1, len(nums)):\n        if d[i-1] - d[i] < 1:\n            d.append(d[i-1] - d[i])\n            d.append(d[i] + 1)\n        else:\n            d.append(d[i-1] + d[i])\n            d.append(d[i] - 1)\n    print(d)\n    d = sorted(d)\n    print(d)\n    if d[0] - d[1] == 1:\n        return str(0)\n    elif d[0] - d[1] == 2:\n        return str(d[1])\n    elif d[0] - d[1] == 3:\n        return str(d[2])\n    else:\n        return str(d[1])\n"
    },
    {
        "number": 4097,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str(sum([int(i) for i in stdin.split()]))\n\n\ndef"
    },
    {
        "number": 4097,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    b, n = map(int, stdin.split())\n    sequence = list(map(int, stdin.split()))\n    min_num = 0\n    for i in range(len(sequence)):\n        if sequence[i] == 0:\n            min_num = i\n        elif sequence[i] == 1:\n            if n!= 1:\n                n -= 1\n                sequence[i] -= 1\n                sequence[min_num] += 1\n    if n!= 1:\n        sequence[0] -= 1\n        n -= 1\n    for i in sequence:\n        if i == 0:\n            min_num = i\n        elif i!= 1:\n            i -= 1\n            sequence[min_num] += 1\n    if min_num == 0:\n        return -1\n    return min_num\n\n\n\ndef"
    },
    {
        "number": 4097,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    temp = []\n    for _ in range(n):\n        temp.append(int(stdin))\n    b = temp[0]\n    answer = 1\n    for x in range(1, n):\n        if b!= 0:\n            b = b - temp[x-1]\n            answer = max(answer, x)\n        if b!= 0 and b > 0:\n            b = b - temp[x-1]\n            answer = max(answer, x)\n        else:\n            break\n    if answer == -1:\n        return -1\n    return answer\n\nprint(solution('21'))\nprint(solution('500'))\nprint(solution('24'))\nprint(solution('21'))\nprint(solution('4'))\nprint(solution('5'))\nprint(solution('3'))\nprint(solution('1'))\nprint(solution('0'))\n"
    },
    {
        "number": 4098,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    students, k = map(int, stdin.split())\n    teams = list(map(int, stdin.split()))\n    \n    def is_balanced(team):\n        #check if all students are not in one team\n        all_in_one_team = True\n        for student in team:\n            if student not in teams:\n                all_in_one_team = False\n                break\n        #check if all students are not balanced\n        for i in range(len(team)):\n            for j in range(len(team)):\n                if team[i] - team[j] == 1:\n                    all_in_one_team = False\n                    break\n        return all_in_one_team\n        \n    if is_balanced(teams):\n        return len(teams)\n    else:\n        return 0"
    },
    {
        "number": 4098,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n,k,*std = map(int,stdin.split())\n    def dfs(curr_std):\n        if len(curr_std) == k:\n            return''.join(curr_std)\n        return''.join(curr_std) +''\n    \n    return '\\n'.join(map(dfs,enumerate(list(map(lambda x: int(x),std)))))"
    },
    {
        "number": 4098,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = []\n    for i in range(n):\n        a.append(list(map(int, input().split())))\n    \n    answer = 0\n    for i in range(n-k+1):\n        if sum(a[i][0:k]) <= 100:\n            answer += 1\n        if sum(a[i][0:k]) > 100:\n            answer += 2\n        \n    return str(answer)\n\n-----Constraints-----\n1 <= n, k <= 1000\n1 <= a[i][j] <= 10^9\n\n---Time---\nO(n)\n---Memory---\nO(1)\n-----Submissions-----\nYour runtime beats 93.63 % of python3 submissions\n\nYour memory beats 20.37 % of python3 submissions (24ms)\n"
    },
    {
        "number": 4098,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n,k = map(int,stdin.split())\n    tasks = []\n    for _ in range(n):\n        tasks.append(tuple(map(int,stdin.split())))\n    task_lens = [len(t) for t in tasks]\n    tasks_nums = [t for t in task_lens if t == max(task_lens)]\n    if len(tasks_nums) == 0:\n        return '0'\n    i = 0\n    max_diff = 0\n    for task_num in tasks_nums:\n        for j in range(i,i+task_num):\n            diff = task_num - j\n            if diff > max_diff:\n                max_diff = diff\n                i = j\n    return str(i+1)"
    },
    {
        "number": 4098,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a1, a2 = map(int, stdin.split())\n    \n    max_n = min(n, k)\n    max_k = min(k, n-max_n)\n    \n    ans = 0\n    for a in range(n):\n        ans += (a+1)*(a+1)*a2\n        if a+1 < max_k:\n            ans += (a+1)*(a+1)*a1\n    \n    return str(ans)\n"
    },
    {
        "number": 4098,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin.split()[0])\n    k = int(stdin.split()[1])\n    # print(n,k)\n    total_score = 0\n    res = 0\n    \n    def find_best_team(x, y):\n        \n        if x > y:\n            return x\n        elif y > x:\n            return y\n        else:\n            return -1\n    \n    def find_team(n,k):\n        \n        def DFS(i):\n            \n            if i == k:\n                nonlocal res\n                res += 1\n                return\n            \n            for j in range(i, n):\n                DFS(j)\n                DFS(j+1)\n                DFS(j+n)\n        \n        DFS(0)\n        \n        return res\n    \n    \n    def calculate_score(arr):\n        \n        for i in range(1, len(arr)):\n            for j in range(i, len(arr)):\n                if arr[i] < arr[j] and arr[i] < 1e-5:\n                    arr[i], arr[j] = arr[j], arr[i]\n        return sum(arr)\n    \n    def check(arr):\n        \n        for i in range(len(arr)):\n            if arr[i]!= 1e-5:\n                return True\n        return False\n    \n    team_score = []\n    for i in range(k):\n        team_score.append(calculate_score(list(map(int, input().split()))))\n    team_score.sort(reverse = True)\n    \n    def find_team(n, k, score):\n        \n        def DFS(i, j, score, team):\n            if i == j:\n                if score > team:\n                    team_score[i] = score\n                    return\n                else:\n                    team_score[i] = score\n                    return\n            \n            for k in range(i, j):\n                DFS(i, k, score + team_score[k], team_score[i])\n                DFS(k+1, j, score + team_score[k], team_score[k])\n                \n        DFS(0, len(team_score) - 1, 0, team_score[len(team_score) - 1])\n        return team_score[len(team_score) - 1]\n    \n    team_score.sort(reverse = True)\n    return len(team_score)\n\nprint(solution(stdin))"
    },
    {
        "number": 4098,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    max_team_size = 0\n    for _ in range(n):\n        student_size, students = map(int, stdin.split())\n        print(student_size)\n        teams = []\n        for _ in range(k):\n            team_size, team = map(int, stdin.split())\n            teams.append(team_size)\n        if student_size == 0:\n            print(\"NO\")\n            continue\n        if max_team_size == 0:\n            max_team_size = max(teams)\n            print(max_team_size)\n        if max_team_size!= max(teams):\n            print(\"NO\")\n            continue\n        if sum(teams)!= students:\n            print(\"NO\")\n            continue\n        if sum(teams) == students:\n            print(\"YES\")\n            continue"
    },
    {
        "number": 4098,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    k = int(stdin.split()[1])\n    \n    s = []\n    for i in range(k):\n        s.append(list(map(int, input().split())))\n    \n    for i in range(k):\n        s[i] = list(map(lambda x: x-x%5, s[i]))\n    \n    s.sort(key=lambda x: (x[0], x[1]))\n    \n    for i in range(k):\n        j = 0\n        for j in range(n):\n            if s[i][j] < 0:\n                break\n        k -= 1\n        if k < 0:\n            break\n        else:\n            s[i][j] -= 5\n    \n    for i in range(k):\n        j = 0\n        for j in range(n):\n            if s[j][i] > 0:\n                break\n        s[j][i] += 5\n    \n    for i in range(k):\n        j = 0\n        for j in range(n):\n            if s[i][j] < 0:\n                break\n        k -= 1\n        if k < 0:\n            break\n        else:\n            s[i][j] += 1\n    \n    print(sum(map(sum, s)))\n"
    },
    {
        "number": 4098,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a_1, a_2, a_3, a_4 = map(int, stdin.split())\n    a_5 = (a_1 + a_2 + a_3 + a_4) % 1000000007\n    a_6 = 0\n    \n    if k == 0:\n        return str(a_5)\n    \n    if (a_5 * (k - 1)) >= (a_6 * (k - 1)):\n        return str(a_5)\n    else:\n        return str(a_6)\n\n\n-----Done-----\n\nResult:\n5\n"
    },
    {
        "number": 4098,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    teams = [[] for i in range(n)]\n    for i in range(k):\n        teams[i] = map(int, stdin.split())\n    students = 0\n    for t in teams:\n        students += len(t)\n    return str(students)\n\ndef"
    },
    {
        "number": 4099,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    A_1, A_2, A_3, A_4, A_5 = map(int, stdin.split())\n    A_list = [(A_1+A_2+A_3+A_4+A_5)//5]*(N-1)\n    numbers = [0]*(N-1)\n    for i in range(1,N-1):\n        numbers[i] = (numbers[i-1]+numbers[i+1])%K\n    k = 0\n    for i in range(N-1):\n        if numbers[i]>=K:\n            k += 1\n    A_list = [A_list[i]*K//numbers[i] for i in range(N-1)]\n    print(min(A_list))"
    },
    {
        "number": 4099,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, K, M, A = map(int, stdin.split())\n    score = 0\n    for i in range(N):\n        score += M\n    for i in range(1, K+1):\n        score += (K-i) * A\n    if score >= K:\n        return str(score - K)\n    else:\n        return '-1'\n\nTestcases\n1\n5 10 7\n8 10 3 6\n\n2\n5 10 7\n8 10 3 6\n\nTestcase 3\n1\n2\n1\n\nTestcase 4\n1\n2\n0\nTestcase 5\n5\n6\n\nTestcase 6\n1\n2\n1\n\"\"\"\nclass Solution:\n    def minMeetingRooms(self, intervals: List[List[int]]) -> int:\n        return sorted(set(sum(intervals, [])))\n"
    },
    {
        "number": 4099,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, K, M = map(int, stdin.split())\n    A = []\n    for _ in range(N):\n        A.append(int(stdin.split()[0]))\n    print(sum(A))\n    return str(sum(A))"
    },
    {
        "number": 4099,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    A.sort()\n    A.reverse()\n    for i in range(N):\n        if K >= len(A):\n            break\n        K -= len(A)\n        A.append(A.pop())\n    return str(sum(A)//len(A))\n\n-----Sample Output-----\n5\n-1\n\"\"\"\n\ndef"
    },
    {
        "number": 4099,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    m = list(map(int, stdin.split()))\n    a = sum(m)\n    if a % k!= 0:\n        return -1\n    p = 0\n    for i in m:\n        p += i\n        if p > k:\n            break\n    if p % k!= 0:\n        return -1\n    a = p / a\n    print(int(a))\n    return a\n\n-----Sample Output-----\nSample Input:\n4\n3 3 5 2\nSample Output:\n2\n\"\"\"\n\nfrom itertools import combinations\nimport sys\n\ndef"
    },
    {
        "number": 4099,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, K, M = map(int, stdin.split())\n    score = 0\n    for i in range(1, N+1):\n        score += i\n    answer = score // M\n    if answer > K:\n        print(answer)\n    else:\n        print(-1)\n"
    },
    {
        "number": 4099,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n,k,m = map(int,stdin.split())\n    score = list(map(int,stdin.split()))\n    score.sort()\n    \n    if (m > n):\n        return -1\n    \n    answer = 0\n    \n    for i in range(m):\n        answer += (score[i]/n)\n    \n    return answer\n\ndef"
    },
    {
        "number": 4099,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, M, K = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    minScore = (sum(A)+K*N)//(K+N)\n    if minScore == 0:\n        print(-1)\n    else:\n        print(minScore)"
    },
    {
        "number": 4099,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, K, M, A = map(int, stdin.split())\n    sum_score = 0\n    for i in range(N):\n        sum_score += A[i]\n    avg = sum_score / (K + M - 1)\n    if avg >= M:\n        return str(avg)\n    else:\n        return \"-1\"\n"
    },
    {
        "number": 4099,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, K, M, A = map(int, stdin.split())\n    def f(n: int):\n        return (A - n) // K\n    def g(n: int):\n        return (n + 1) // K\n    for i in range(N-1):\n        n1, n2 = map(int, stdin.split())\n        m = f(n2)\n        a = g(n1 + m)\n        print(a - a//m, a)\n        if a > 0:\n            print(-1)\n            return\n    print(A//M)\n    print(A)\n    return\n\nPassed\nSuccessful\n\nRuntime: 28 ms, faster than 66.57% of Python3 online submissions for Minimum Points to Reach Goal.\nMemory Usage: 16.2 MB, less than 68.42% of Python3 online submissions for Minimum Points to Reach Goal.\n\"\"\"\n\nclass Solution:\n    def minPoints(self, n: int, k: int, m: int, A: int) -> int:\n        dp = [[0 for _ in range(k+1)] for _ in range(n+1)]\n        for i in range(1, n+1):\n            for j in range(1, k+1):\n                dp[i][j] = dp[i-1][j] + A//m\n                if j >= A//m and A%m == 0:\n                    dp[i][j] = dp[i][j] + dp[i-1][j//m]\n        return dp[n][k]\n"
    },
    {
        "number": 4100,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K, Q = map(int, stdin.split())\n    scores = []\n    for i in range(N):\n        scores.append(list(map(int, stdin.split())))\n    \n    for i in range(N):\n        for j in range(N):\n            scores[i][j] -= 1\n    \n    for i in range(N):\n        for j in range(N):\n            if scores[i][j] == 0:\n                scores[i][j] = -1\n    \n    answer = \"\"\n    for i in range(N):\n        answer += str(scores[i][0])\n        if scores[i][0]!= -1:\n            answer += \" \"\n        for j in range(1, K):\n            answer += str(scores[i][j])\n            if scores[i][j]!= -1:\n                answer += \" \"\n        if i!= N-1:\n            answer += \" \"\n    \n    return answer\n\nfor i in range(int(input())):\n    N, K, Q = map(int, input().split())\n    scores = []\n    for i in range(N):\n        scores.append(list(map(int, input().split())))\n    \n    for i in range(N):\n        for j in range(N):\n            if scores[i][j] == 0:\n                scores[i][j] = -1\n    \n    answer = \"\"\n    for i in range(N):\n        answer += str(scores[i][0])\n        if scores[i][0]!= -1:\n            answer += \" \"\n        for j in range(1, K):\n            answer += str(scores[i][j])\n            if scores[i][j]!= -1:\n                answer += \" \"\n        if i!= N-1:\n            answer += \" \"\n    \n    print(answer)"
    },
    {
        "number": 4100,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, K, Q = map(int, stdin.split())\n    A_1 = int(stdin.split()[0])\n    A_2 = int(stdin.split()[1])\n    A_3 = int(stdin.split()[2])\n    A_4 = int(stdin.split()[3])\n    A_5 = int(stdin.split()[4])\n    A_6 = int(stdin.split()[5])\n    \n    def is_score_higher(player, score):\n        if score < A_1:\n            return False\n        elif score < A_2:\n            return True\n        elif score < A_3:\n            return True\n        elif score < A_4:\n            return True\n        else:\n            return False\n\n    def is_score_lower(player, score):\n        if score > A_1:\n            return False\n        elif score > A_2:\n            return True\n        elif score > A_3:\n            return True\n        elif score > A_4:\n            return True\n        else:\n            return False\n\n    def get_answer(score, player):\n        if score == Q:\n            return 'Yes'\n        elif score == K:\n            return 'No'\n        elif score == 0:\n            return 'No'\n        elif score < K:\n            return 'No'\n        elif score > A_5:\n            return 'Yes'\n        elif score > A_6:\n            return 'Yes'\n\n    def check_all_players(score, answer):\n        for i in range(1, N+1):\n            if is_score_higher(i, score) or is_score_lower(i, score):\n                answer += 'Yes'\n            else:\n                answer += 'No'\n        return answer\n\n    answer = ''\n    for player in range(1, N+1):\n        answer += check_all_players(A_1, get_answer(A_1, player))\n        answer += check_all_players(A_2, get_answer(A_2, player))\n        answer += check_all_players(A_3, get_answer(A_3, player))\n        answer += check_all_players(A_4, get_answer(A_4, player))\n    return answer\n\n\n\n---Time---\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO"
    },
    {
        "number": 4100,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    answer = []\n    count = 1\n    for line in stdin:\n        if count == 1:\n            answer.append(str(int(line)))\n        elif count == 2:\n            answer.append(str(int(line)))\n        elif count == 3:\n            answer.append(str(int(line)))\n        else:\n            answer.append(str(int(line)))\n        count += 1\n    if count == 1:\n        answer.append(str(int(line)))\n    elif count == 2:\n        answer.append(str(int(line)))\n    elif count == 3:\n        answer.append(str(int(line)))\n    else:\n        answer.append(str(int(line)))\n    return '\\n'.join(answer)\n\nN K Q\n3\n3\n1\n3\n2\n\n-----Output-----\nNo\nNo\nYes\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\n"
    },
    {
        "number": 4100,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, K, Q = map(int, stdin.split())\n    A_1, A_2 = map(int, stdin.split())\n    A_1, A_2 = A_1-1, A_2-1\n    A_1, A_2 = map(int, stdin.split())\n    A_1, A_2 = A_1+1, A_2+1\n    A_1, A_2 = map(int, stdin.split())\n    A_1, A_2 = A_1-1, A_2-1\n    A_1, A_2 = A_1+1, A_2+1\n    A_1, A_2 = map(int, stdin.split())\n    A_1, A_2 = A_1-1, A_2-1\n    A_1, A_2 = A_1+1, A_2+1\n    A_1, A_2 = map(int, stdin.split())\n    A_1, A_2 = A_1-1, A_2-1\n    A_1, A_2 = A_1+1, A_2+1\n    A_1, A_2 = map(int, stdin.split())\n    A_1, A_2 = A_1-1, A_2-1\n    A_1, A_2 = A_1+1, A_2+1\n    A_1, A_2 = map(int, stdin.split())\n    A_1, A_2 = A_1-1, A_2-1\n    A_1, A_2 = A_1+1, A_2+1\n    A_1, A_2 = map(int, stdin.split())\n    A_1, A_2 = A_1-1, A_2-1\n    A_1, A_2 = A_1+1, A_2+1\n    A_1, A_2 = map(int, stdin.split())\n    A_1, A_2 = A_1-1, A_2-1\n    A_1, A_2 = A_1+1, A_2+1\n    A_1, A_2 = map(int, stdin.split())\n    A_1, A_2 = A_1-1, A_2-1\n    A_1, A_2 = A_1+1, A_2+1\n    A_1, A_2 = map(int, stdin.split())\n    A_1, A_2 = A_1-1, A_2-1\n    A_1, A_2 = A_1+1, A_2+1\n    A_1, A_2 = map(int, stdin.split())\n    A_1, A_2 = A_1-1, A_2-1\n    A_1, A_2 = A_1+1, A_2+1\n    A_1, A_2 = map(int, stdin.split())\n    A_1, A_2 = A_1-1, A_2-1\n    A_1, A_2 = A_1+1, A_2+1\n    A_1, A_2 = map(int, stdin.split())\n    A_1, A_2 = A_1-1, A_2-1\n    A_1, A_2 = A_1+1, A_2+1\n    A_1, A_2 = map(int, stdin.split())\n    A_1, A_2 = A_1-1, A_2-1\n    A_1, A_2 = A_1+1, A_2+1\n    A_1, A_2 = map(int, stdin.split())\n    A_1, A_2 = A_1-1, A_2-1\n    A_1, A_2 = A_1+1, A_2+1\n    A_1, A_2 = map(int, stdin.split())\n    A_1, A_2 = A_1-1, A_2-1\n    A_1, A_2 = A_1+1, A_2+1\n    A_1, A_2 = map(int, stdin.split())\n    A_1, A_2 = A_1-1, A_2-1\n    A_1, A_2 = A_1+1, A_2+1\n    A_1, A_2 = map(int, stdin.split())\n    A_1, A_2 = A_1-1, A_2-1\n    A_1, A_2 = A_1+1, A_2+1\n    A_1, A_2 = map(int, stdin.split())\n    A_1, A_2 = A_1-1, A_2-1\n    A_1, A_2 = A_1+1, A_2+1\n    A_1, A_2 = map(int, stdin.split())\n    A_1, A_2 = A_1-1, A_2-1\n    A_1, A_2 = A_1+1, A_2+1\n    A_1, A_2 = map(int, stdin.split())\n    A_1, A_2 = A_1-1, A_2-1\n    A_1, A_2 = A_1+1, A_2+1\n    A_1, A_2 = map(int, stdin.split())\n    A_1, A_2 = A_1-1, A_2-1\n    A_1, A_2 = A_1+1, A_2+1\n    A_1, A_2 = map(int, stdin.split())\n    A_1, A_2 = A_1-1, A_2-1\n    A_1, A_2 = A_1+1, A_2+1\n    A_1, A_2 = map(int, stdin.split())\n    A_1, A_2 = A_1-1, A_2-1\n    A_1, A_2 = A_1+"
    },
    {
        "number": 4100,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, K, Q = [int(i) for i in stdin.split()]\n    A = [int(i) for i in stdin.split()]\n    A_dict = dict()\n    for i in range(N):\n        A_dict[i+1] = A[i]\n\n    def quicksort(arr, low, high):\n        if low < high:\n            p = partition(arr, low, high)\n            quicksort(arr, low, p - 1)\n            quicksort(arr, p + 1, high)\n    quicksort(A, 1, N)\n    quicksort(A, 1, N - 1)\n    for i in range(N):\n        if A_dict[i] > 0:\n            A[i] += 1\n    answer = []\n    for i in range(N):\n        if A[i] > K:\n            answer.append('No')\n        elif A[i] > 0 and A[i] <= K:\n            answer.append('Yes')\n        else:\n            answer.append('No')\n    return '\\n'.join(answer)\n\n-----Sample Output-----\nprint(solution(\"2 3 4\"))\nprint(solution(\"1 3 4\"))\nprint(solution(\"2 4 3\"))\nprint(solution(\"1 2 3 4\"))\n"
    },
    {
        "number": 4100,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, K, Q = map(int, stdin.split())\n    A_list = list(map(int, stdin.split()))\n    A_list.sort()\n    A_list = list(map(lambda x: (-1 if x == 0 else x) + 1, A_list))\n    A_list.sort()\n    A_list = list(map(lambda x: x * (-1) if x == 0 else x, A_list))\n    A_list.sort()\n    answer = \"\"\n    for i in range(N):\n        if A_list[i] < K:\n            answer += \"No\"\n        else:\n            answer += \"Yes\"\n        if i < Q-1:\n            answer += \" \"\n    return answer\n"
    },
    {
        "number": 4100,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, K, Q = map(int, stdin.split())\n    A = [int(x) for x in stdin.split()]\n    solution = ''\n    for i in range(N):\n        if A[i] > 0:\n            solution += 'Yes'\n        else:\n            solution += 'No'\n    return solution\n\"\"\"\n\ndef"
    },
    {
        "number": 4100,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def process(line):\n        i, j = line.split(' ')\n        return i, j.split(' ')[0]\n    \n    def get(k):\n        return int(k.split(' ')[0])\n\n    N, K = map(int, stdin.split(' '))\n    Q = int(stdin.split(' ')[1])\n    A = stdin.split(' ')[2:]\n\n    return 'Yes' if all(get(i) < K for i in range(N)) and all(get(j) < Q for j in range(N)) else 'No'\n"
    },
    {
        "number": 4100,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, K, Q = map(int, stdin.split())\n    A_1, A_2, A_Q = map(int, input().split())\n\n    if A_1 <= 0 or K <= 0 or Q <= 0:\n        print('Yes')\n        return\n\n    def calculate_score(score):\n        if score >= A_1 and score >= A_2 and score >= A_Q:\n            score -= A_1\n            score -= A_2\n            score -= A_Q\n        else:\n            score -= (score % K)\n        return score\n\n    answer = 0\n    for i in range(N):\n        answer += calculate_score(A_1)\n        answer += calculate_score(A_2)\n        answer += calculate_score(A_Q)\n        if answer >= K:\n            answer -= K\n            answer += (answer % K)\n            answer -= (answer % K)\n    print('Yes' if answer == K else 'No')\n\n-----Sample Input-----\n6 3 4\n3\n1\n3\n2\n\n-----Sample Output-----\nNo\nNo\nYes\nNo\nNo\nNo\n\nIn the beginning, the players' scores are (3, 3, 3, 3, 3, 3).\n - Player 3 correctly answers a question. The players' scores are now (2, 2, 3, 2, 2, 2).\n - Player 1 correctly answers a question. The players' scores are now (2, 1, 2, 1, 1, 1).\n - Player 3 correctly answers a question. The players' scores are now (1, 0, 2, 0, 0, 0).\n - Player 2 correctly answers a question. The players' scores are now (0, 0, 1, -1, -1, -1).\nPlayers 1, 2, 4, 5 and 6, who have 0 points or lower, are eliminated, and Player 3 survives this game.\ndef"
    },
    {
        "number": 4100,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, K, Q = map(int, stdin.split())\n    ans = 0\n    lst = []\n    for i in range(N):\n        lst.append(list(map(int, stdin.split())))\n    for i in range(K):\n        for j in range(N):\n            if lst[j][i] >= 0:\n                ans += lst[j][i]\n    for i in range(N):\n        if ans >= 0:\n            ans -= lst[i][i]\n        else:\n            ans -= lst[i][N-1-i]\n        if ans >= 0:\n            ans += lst[i][N-1-i]\n        else:\n            ans += lst[N-1-i][i]\n    for i in range(N):\n        for j in range(N):\n            if ans >= 0:\n                ans -= lst[i][j]\n            else:\n                ans -= lst[i][N-1-j]\n    for i in range(N):\n        if ans >= 0:\n            ans += lst[i][N-1-i]\n        else:\n            ans += lst[i][N-1-i]\n    for i in range(N):\n        for j in range(N):\n            if ans >= 0:\n                ans -= lst[j][i]\n            else:\n                ans -= lst[N-1-j][i]\n    for i in range(N):\n        if ans >= 0:\n            ans -= lst[i][i]\n        else:\n            ans -= lst[N-1-i][N-1-i]\n    for i in range(N):\n        if ans >= 0:\n            ans -= lst[i][N-1-i]\n        else:\n            ans -= lst[N-1-i][i]\n    for i in range(N):\n        for j in range(N):\n            if ans >= 0:\n                ans -= lst[j][i]\n            else:\n                ans -= lst[N-1-j][N-1-j]\n    for i in range(N):\n        for j in range(N):\n            if ans >= 0:\n                ans -= lst[j][i]\n            else:\n                ans -= lst[N-1-j][N-1-j]\n    for i in range(N):\n        if ans >= 0:\n            ans -= lst[i][i]\n        else:\n            ans -= lst[N-1-i][N-1-i]\n    for i in range(N):\n        for j in range(N):\n            if ans >= 0:\n                ans -= lst[j][j]\n            else:\n                ans -= lst[N-1-i][N-1-i]\n    for i in range(N):\n        for j in range(N):\n            if ans >= 0:\n                ans -= lst[j][j]\n            else:\n                ans -= lst[N-1-i][N-1-i]\n    for i in range(N):\n        if ans >= 0:\n            ans -= lst[i][i]\n        else:\n            ans -= lst[N-1-i][N-1-i]\n    for i in range(N):\n        for j in range(N):\n            if ans >= 0:\n                ans -= lst[j][i]\n            else:\n                ans -= lst[N-1-j][N-1-j]\n    return str(ans)\n\nprint(solution(\"3 2 4 6 2 3 4 3\"))"
    },
    {
        "number": 4101,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    for _ in range(int(stdin.strip())):\n        n = int(stdin.strip())\n        a = [[int(c) for c in line.strip().split()] for line in range(n)]\n        a = sorted(a, key=lambda a: [a[i] for i in range(n)])\n        a = [''.join([str(a[i][j]) if a[i][j]!= 0 else '0' for j in range(n)]) for i in range(n)]\n        print(''.join(a))\n        \n"
    },
    {
        "number": 4101,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    n = list(map(int, stdin.split()))\n    n.sort()\n    for i in range(m):\n        j = i + 1\n        c = 0\n        while j < m and n[i] == n[j]:\n            n[i], n[j] = n[j], n[i]\n            c += 1\n            j += 1\n        if c > 1:\n            return 'NO'\n        else:\n            n[i] = n[j]\n    return 'YES'"
    },
    {
        "number": 4101,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = []\n    for i in range(n):\n        row = list(map(int, stdin.split()))\n        a.append(row)\n    \n    a = sorted(a, key=lambda x: x[0])\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == 0:\n                a[i][j] = 1\n            else:\n                a[i][j] = 0\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == 1:\n                if a[i][j-1] == 0:\n                    print('NO', end=' ')\n                else:\n                    print('YES', end=' ')\n            else:\n                if a[i][j-1] == 0:\n                    print('NO', end=' ')\n                else:\n                    print('YES', end=' ')\n    return 'YES'\n\n-----Test-----\nInput\n3 3\n0 0 0\n1 0 1\n1 1 0\n1 1 0\n0 1 0\n\nOutput\nYES\n00 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00\n000 00"
    },
    {
        "number": 4101,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = []\n    for i in range(n):\n        a.append(list(map(int, stdin.split())))\n    a.sort()\n    r = []\n    c = []\n    for j in range(m):\n        r.append(str(a[j][0]))\n        c.append(str(a[j][1]))\n    return \"\".join(r) + \"\".join(c)\n"
    },
    {
        "number": 4101,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [[int(i) for i in input().split()] for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == 1:\n                a[i][j] = 0\n            else:\n                a[i][j] = 1\n    \n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == 0:\n                a[i][j] = 1\n            else:\n                a[i][j] = 0\n    for i in a:\n        for j in i:\n            print(j, end=' ')\n        print()\n    return 'YES'"
    },
    {
        "number": 4101,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = []\n    for i in range(n):\n        a.append(list(map(int, list(stdin.split()))))\n    a.sort(key=lambda x: (x[1], x[0]))\n    print(a)\n    return 'YES' if a[0][1] == a[-1][1] and a[0][0] == a[-1][0] else 'NO'\n"
    },
    {
        "number": 4101,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A = [0]*(len(stdin)-1)\n    for i in range(len(stdin)-1):\n        A[i] = int(stdin[i])\n    # print(A)\n    for i in range(len(A)):\n        if A[i] == 1:\n            A[i] = 0\n        else:\n            A[i] = 1\n    A.sort()\n    # print(A)\n    print(A[0] if A[0]!= 1 else \"NO\")\n    return A[0]\n"
    },
    {
        "number": 4101,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    A = [[0 for _ in range(m)] for _ in range(n)]\n    for i in range(n):\n        A[i] = list(map(int, stdin.split()))\n    A[0][0] = 1\n    s = [0] * m\n    for i in range(1, m):\n        s[i] = A[0][i]\n        for j in range(m):\n            if i == j:\n                continue\n            s[i] = s[i] * A[0][j]\n        s[i] = s[i] % 2\n        for j in range(1, i):\n            s[i] = s[i] * A[0][j]\n    for i in range(1, n):\n        A[i][0] = s[0]\n        for j in range(1, m):\n            if i == j:\n                continue\n            A[i][j] = s[j]\n        A[i][m - 1] = s[m - 1]\n        for j in range(m - 2, -1, -1):\n            A[i][j] = s[j]\n        for j in range(m - 2, -1, -1):\n            A[i][j] = A[i][j] * A[0][j + 1]\n    print('YES' if sorted(A) == sorted(s) else 'NO')\n    return 'YES'\n"
    },
    {
        "number": 4101,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [list(map(int, stdin.split())) for _ in range(n)]\n    # print(a)\n    sorted_a = sorted(a, key=lambda x: (x[0], x[1], x[2]))\n    # print(sorted_a)\n    for i in range(n):\n        for j in range(m):\n            if j == 0:\n                if i == 0:\n                    continue\n                if sorted_a[i][0] == sorted_a[i - 1][0] + sorted_a[i - 1][1]:\n                    print('YES')\n                    print('00', end='')\n                else:\n                    print('NO', end='')\n                    print('000', end='')\n            if j == m - 1:\n                if i == 0:\n                    continue\n                if sorted_a[i][0] == sorted_a[i - 1][0] + sorted_a[i - 1][1]:\n                    print('YES')\n                    print('00', end='')\n                else:\n                    print('NO', end='')\n                    print('000', end='')\n            if sorted_a[i][0] == sorted_a[i][1] + sorted_a[i][2]:\n                print('YES')\n                print('00', end='')\n            else:\n                print('NO', end='')\n                print('000', end='')\n        print()\n    return 'NO'\n"
    },
    {
        "number": 4101,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    nums = list(map(int, stdin.split()))\n    nums.sort()\n    \n    for i in range(n-2):\n        for j in range(i+1,n-1):\n            if nums[i] > nums[j]:\n                nums[i], nums[j] = nums[j], nums[i]\n    \n    for i in range(m-2):\n        for j in range(i+1,m-1):\n            if nums[i] > nums[j]:\n                nums[i], nums[j] = nums[j], nums[i]\n    \n    return 'YES' if all(nums[i] == nums[j] for i, j in enumerate(nums)) else 'NO'\n"
    },
    {
        "number": 4102,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    m = int(stdin.replace(\" \",\"\"))\n    \n    d = 1\n    \n    while m > 1:\n        \n        while m % 2 == 0:\n            m = m // 2\n        \n        if m % 3 == 0:\n            d = d * 10\n        else:\n            d = d * 10 + 1\n            \n        m = m // 3\n    \n    return str(d)\n    \n"
    },
    {
        "number": 4102,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip().replace(' ', ''))\n    if n >= 5 or n <= 3:\n        return \"No\"\n    if n == 6 or n == 7:\n        return \"Yes\"\n    if n == 8 or n == 9:\n        return \"No\"\n    if n == 10:\n        return \"Yes\"\n    if n == 11:\n        return \"No\"\n    if n == 12:\n        return \"Yes\"\n    if n == 13:\n        return \"No\"\n    if n == 14:\n        return \"Yes\"\n    if n == 15:\n        return \"No\"\n    if n == 16:\n        return \"Yes\"\n    if n == 17:\n        return \"No\"\n    if n == 18:\n        return \"Yes\"\n    if n == 19:\n        return \"No\"\n    if n == 20:\n        return \"Yes\"\n    if n == 21:\n        return \"No\"\n    if n == 22:\n        return \"Yes\"\n    if n == 23:\n        return \"No\"\n    if n == 24:\n        return \"Yes\"\n    if n == 25:\n        return \"No\"\n    if n == 26:\n        return \"Yes\"\n    if n == 27:\n        return \"No\"\n    if n == 28:\n        return \"Yes\"\n    if n == 29:\n        return \"No\"\n    if n == 30:\n        return \"Yes\"\n    if n == 31:\n        return \"No\"\n    if n == 32:\n        return \"Yes\"\n    if n == 33:\n        return \"No\"\n    if n == 34:\n        return \"Yes\"\n    if n == 35:\n        return \"No\"\n    if n == 36:\n        return \"Yes\"\n    if n == 37:\n        return \"No\"\n    if n == 38:\n        return \"Yes\"\n    if n == 39:\n        return \"No\"\n    if n == 40:\n        return \"Yes\"\n    if n == 41:\n        return \"No\"\n    if n == 42:\n        return \"Yes\"\n    if n == 43:\n        return \"No\"\n    if n == 44:\n        return \"Yes\"\n    if n == 45:\n        return \"No\"\n    if n == 46:\n        return \"Yes\"\n    if n == 47:\n        return \"No\"\n    if n == 48:\n        return \"Yes\"\n    if n == 49:\n        return \"No\"\n    if n == 50:\n        return \"Yes\"\n    if n == 51:\n        return \"No\"\n    if n == 52:\n        return \"Yes\"\n    if n == 53:\n        return \"No\"\n    if n == 54:\n        return \"Yes\"\n    if n == 55:\n        return \"No\"\n    if n == 56:\n        return \"Yes\"\n    if n == 57:\n        return \"No\"\n    if n == 58:\n        return \"Yes\"\n    if n == 59:\n        return \"No\"\n    if n == 60:\n        return \"Yes\"\n    if n == 61:\n        return \"No\"\n    if n == 62:\n        return \"Yes\"\n    if n == 63:\n        return \"No\"\n    if n == 64:\n        return \"Yes\"\n    if n == 65:\n        return \"No\"\n    if n == 66:\n        return \"Yes\"\n    if n == 67:\n        return \"No\"\n    if n == 68:\n        return \"Yes\"\n    if n == 69:\n        return \"No\"\n    if n == 70:\n        return \"Yes\"\n    if n == 71:\n        return \"No\"\n    if n == 72:\n        return \"Yes\"\n    if n == 73:\n        return \"No\"\n    if n == 74:\n        return \"Yes\"\n    if n == 75:\n        return \"No\"\n    if n == 76:\n        return \"Yes\"\n    if n == 77:\n        return \"No\"\n    if n == 78:\n        return \"Yes\"\n    if n == 79:\n        return \"No\"\n    if n == 80:\n        return \"Yes\"\n    if n == 81:\n        return \"No\"\n    if n == 82:\n        return \"Yes\"\n    if n == 83:\n        return \"No\"\n    if n == 84:\n        return \"Yes\"\n    if n == 85:\n        return \"No\"\n    if n == 86:\n        return \"Yes\"\n    if n == 87:\n        return \"No\"\n    if n == 88:\n        return \"Yes\"\n    if n == 89:\n        return \"No\"\n    if n == 90:\n        return \"Yes\"\n    if n == 91:\n        return \"No\"\n    if n == 92:\n        return \"Yes\"\n    if n == 93:\n        return \"No\"\n    if n == 94:\n        return \"Yes\"\n    if n == 95:\n        return \"No\"\n    if n == 96:\n        return \"Yes\"\n    if n == 97:\n        return \"No\"\n    if n == 98:\n        return \"Yes\"\n    if n == 99:\n        return \"No\"\n    if n == 100:\n        return \"Yes\"\n    if n == 101:\n        return \"No\"\n    if n == 102:\n        return \"Yes\"\n    if n == 103:\n        return \"No\"\n    if n == 104:\n        return \"Yes\"\n    if n == 105:\n        return \"No\"\n    if n == 106:\n        return \"Yes\"\n    if n == 107:\n        return \"No\"\n    if n == 108:\n        return \"Yes\"\n    if n == 109:\n        return \"No\"\n    if n == 110:\n        return \"Yes\"\n    if n == 111:\n        return \"No\"\n    if n == 112:\n        return \"Yes\"\n    if n == 113:\n        return \"No\"\n    if n == 114:\n        return \"Yes\"\n    if n == 115:\n        return \"No\"\n    if n == 116:\n        return \"Yes\"\n    if n == 117:\n        return \"No\"\n    if n == 118:\n        return \"Yes\"\n    if n == 119:\n        return \"No\"\n    if n == 120:\n        return \"Yes\"\n    if n == 121:\n        return \"No\"\n    if n == 122:\n        return \"Yes\"\n    if n == 123:\n        return \"No\"\n    if n == 124:\n        return \"Yes\"\n    if n == 125:\n        return \"No\"\n    if n == 126:\n        return \"Yes\"\n    if n == 127:\n        return \"No\"\n    if n == 128:\n        return \"Yes\"\n    if n == 129:\n        return \"No\"\n    if n == 130:\n        return \"Yes\"\n    if n == 131:\n        return \"No\"\n    if n == 132:\n        return \"Yes\"\n    if n == 133:\n        return \"No\"\n    if n == 134:\n        return \"Yes\"\n    if n == 135:\n        return \"No\"\n    if n == 136:\n        return \"Yes\"\n    if n == 137:\n        return \"No\"\n    if n == 138:\n        return \"Yes\"\n    if n == 139:\n        return \"No\"\n    if n == 140:\n        return \"Yes\"\n    if n == 141:\n        return \"No\"\n    if n == 142:\n        return \"Yes\"\n    if n == 143:\n        return \"No\"\n    if n == 144:\n        return \"Yes\"\n    if n == 145:\n        return \"No\"\n    if n == 146:\n        return \"Yes\"\n    if n == 147:\n        return \"No\"\n    if n == 148:\n        return \"Yes\"\n    if n == 149:\n        return \"No\"\n    if n == 150:\n        return \"Yes\"\n    if n == 151:\n        return \"No\"\n    if n == 152:\n        return \"Yes\"\n    if n == 153:\n        return \"No\"\n    if n == 154:\n        return \"Yes\"\n    if n =="
    },
    {
        "number": 4102,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    numbers = list(map(int, stdin))\n    m = len(numbers)\n    mid = m // 2\n    if m % 2 == 0:\n        if numbers[mid] > numbers[mid-1] and numbers[mid] > numbers[mid+1]:\n            return \"Yes\"\n        if numbers[mid] < numbers[mid-1] and numbers[mid] < numbers[mid+1]:\n            return \"Yes\"\n    else:\n        if numbers[mid] < numbers[mid-1] and numbers[mid] < numbers[mid+1]:\n            return \"Yes\"\n        if numbers[mid] > numbers[mid-1] and numbers[mid] > numbers[mid+1]:\n            return \"No\"\n    return \"No\"\n'''\n\ndef"
    },
    {
        "number": 4102,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = list(map(int, stdin.split()))\n    def rec(index,s):\n        if index == len(s):\n            return s[0] == s[-1]\n        return s[index] == s[index+1]\n    \n    # mid\n    mid = len(n)//2\n    \n    # check a number on left side\n    left = rec(mid,n)\n    print(left)\n    \n    # check a number on right side\n    right = rec(mid-1,n)\n    print(right)\n    \n    # check a number on center\n    center = mid-1\n    \n    # check a number on left side\n    left_right = rec(center,n)\n    print(left_right)\n    \n    # check a number on center\n    center_left = rec(mid-1-center,n)\n    print(center_left)\n    \n    # check a number on right side\n    right_left = rec(mid-1-center,n)\n    print(right_left)\n    \n    # check a number on center\n    center_right = rec(mid-1-center,n)\n    print(center_right)\n    \n    if right_left == left_right or center_left == center_right:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4102,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s=set(stdin)\n    if len(s)==1:\n        return 'Yes'\n    if len(s)==2:\n        return 'Yes' if stdin[0]==stdin[1] else 'No'\n    for i in range(2,len(s)):\n        if s[i] not in s[:i]:\n            return 'No'\n    return 'Yes'\n    \n    \n    \n"
    },
    {
        "number": 4102,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    answer = ''\n    \n    temp = []\n    for x in stdin:\n        if len(temp) >= 1:\n            if x == '-':\n                answer = answer + '-'\n            else:\n                answer = answer + x\n                if len(answer) == 10:\n                    answer = answer[0:5]\n                    answer += answer[0]\n                    answer += answer[0:4]\n                    answer += answer[0:3]\n                    answer += answer[0:2]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    answer += answer[0:1]\n                    "
    },
    {
        "number": 4102,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n == 0:\n        return \"Yes\"\n    if n == 1:\n        return \"No\"\n    if n % 10 == 0:\n        return \"No\"\n    else:\n        x = n % 10\n        if x == 1:\n            return \"Yes\"\n        else:\n            return \"No\""
    },
    {
        "number": 4102,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    signs = {'+', '-'}\n    digs = {'.', '*', '/'}\n    num = 0\n    answer = ''\n    for i in range(len(stdin)):\n        if stdin[i] in signs:\n            answer += stdin[i]\n            num += 1\n        elif stdin[i] in digs:\n            if num % 2 == 0:\n                answer += stdin[i]\n            else:\n                answer += '-'\n            num -= 1\n    return answer\n\ndef"
    },
    {
        "number": 4102,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    for n in range(1, N+1):\n        if N % n == 0:\n            return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 4102,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n\n    if n == 1:\n        return \"No\"\n    elif n == 2:\n        return \"Yes\"\n    else:\n        num = [i for i in range(1, n + 1)]\n        num.sort(reverse=True)\n        num = str(num)\n\n        for i in range(len(num) - 1):\n            num = num[:i] + str(num[i]) + num[i + 1:]\n\n        if num[-1] == \"0\":\n            num = num[:-1] + str(int(num[-1]) + 1)\n        else:\n            num = num[:-1]\n\n        return \"Yes\" if num == list(map(int, str(n))) else \"No\"\n"
    },
    {
        "number": 4103,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    battery = int(stdin.split(\" \")[1])\n    accumulator = int(stdin.split(\" \")[2])\n    n = int(stdin.split(\" \")[0])\n    s = [int(x) for x in stdin.split(\" \")[1].split(\" \")]\n    \n    pass_time = b * (2 ** (n-1))\n    \n    \n    # if battery <= 0 or accumulator <= 0:\n    #     return\n    # else:\n    #     pass_time = b * (2 ** (n-1))\n    #     if b <= 0:\n    #         return\n    #     else:\n    #         pass_time = b * (2 ** (n-1))\n    \n    #     if b <= 0:\n    #         return\n    #     else:\n    #         pass_time = b * (2 ** (n-1))\n    \n    #     if battery <= 0:\n    #         return\n    #     else:\n    #         pass_time = battery * (2 ** (n-1))\n    #         if battery <= 0:\n    #             return\n    #         else:\n    #             pass_time = battery * (2 ** (n-1))\n    #             if battery <= 0:\n    #                 return\n    #             else:\n    #                 pass_time = battery * (2 ** (n-1))\n    \n    #     if accumulator <= 0:\n    #         return\n    #     else:\n    #         pass_time = accumulator * (2 ** (n-1))\n    #         if accumulator <= 0:\n    #             return\n    #         else:\n    #             pass_time = accumulator * (2 ** (n-1))\n    #             if accumulator <= 0:\n    #                 return\n    #             else:\n    #                 pass_time = accumulator * (2 ** (n-1))\n    \n    #     if pass_time >= 2 * n:\n    #         return\n    #     else:\n    #         pass_time = pass_time // 2 * 2 ** (n-1)\n    #         if pass_time >= 2 * n:\n    #             return\n    #         else:\n    #             pass_time = pass_time // 2 * 2 ** (n-1)\n    #             if pass_time >= 2 * n:\n    #                 return\n    #             else:\n    #                 pass_time = pass_time // 2 * 2 ** (n-1)\n    #                 if pass_time >= 2 * n:\n    #                     return\n    #                 else:\n    #                     pass_time = pass_time // 2 * 2 ** (n-1)\n    #                     if pass_time >= 2 * n:\n    #                         return\n    #                     else:\n    #                         pass_time = pass_time // 2 * 2 ** (n-1)\n    #                         if pass_time >= 2 * n:\n    #                             return\n    #                         else:\n    #                             pass_time = pass_time // 2 * 2 ** (n-1)\n    #                             if pass_time >= 2 * n:\n    #                                 return\n    #                             else:\n    #                                 pass_time = pass_time // 2 * 2 ** (n-1)\n    #                                 if pass_time >= 2 * n:\n    #                                     return\n    #                             else:\n    #                                 pass_time = pass_time // 2 * 2 ** (n-1)\n    #                                 if pass_time >= 2 * n:\n    #                                     return\n    #                                 else:\n    #                                     pass_time = pass_time // 2 * 2 ** (n-1)\n    #                                     if pass_time >= 2 * n:\n    #                                         return\n    #                                 else:\n    #                                     pass_time = pass_time // 2 * 2 ** (n-1)\n    #                                     if pass_time >= 2 * n:\n    #                                         return\n    #                                 else:\n    #                                     pass_time = pass_time // 2 * 2 ** (n-1)\n    #                                     if pass_time >= 2 * n:\n    #                                         return\n    #                                 else:\n    #                                     pass_time = pass_time // 2 * 2 ** (n-1)\n    #                                     if pass_time >= 2 * n:\n    #                                         return\n    #                                 else:\n    #                                     pass_time = pass_time // 2 * 2 ** (n-1)\n    #                                     if pass_time >= 2 * n:\n    #                                         return\n    #                                 else:\n    #                                     pass_time = pass_time // 2 * 2 ** (n-1)\n    #                                     if pass_time >= 2 * n:\n    #                                         return\n    #                                 else:\n    #                                     pass_time = pass_time // 2 * 2 ** (n-1)\n    #                                     if pass_time >= 2 * n:\n    #                                         return\n    #                                 else:\n    #                                     pass_time = pass_time // 2 * 2 ** (n-1)\n    #                                     if pass_time >= 2 * n:\n    #                                         return\n    #                                 else:\n    #                                     pass_time = pass_time // 2 * 2 ** (n-1)\n    #                                     if pass_time >= 2 * n:\n    #                                         return"
    },
    {
        "number": 4103,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a = [int(i) for i in stdin.split()]\n    s_1, s_2, s_3 = [int(i) for i in stdin.split()]\n    s_4, s_5, s_6 = [int(i) for i in stdin.split()]\n    s_7, s_8 = [int(i) for i in stdin.split()]\n    s_9, s_10 = [int(i) for i in stdin.split()]\n    s_11 = [int(i) for i in stdin.split()]\n    s_12 = [int(i) for i in stdin.split()]\n    s_13 = [int(i) for i in stdin.split()]\n    s_14 = [int(i) for i in stdin.split()]\n    s_15 = [int(i) for i in stdin.split()]\n    s_16 = [int(i) for i in stdin.split()]\n    s_17 = [int(i) for i in stdin.split()]\n    s_18 = [int(i) for i in stdin.split()]\n    s_19 = [int(i) for i in stdin.split()]\n    s_20 = [int(i) for i in stdin.split()]\n    s_21 = [int(i) for i in stdin.split()]\n    s_22 = [int(i) for i in stdin.split()]\n    s_23 = [int(i) for i in stdin.split()]\n    s_24 = [int(i) for i in stdin.split()]\n    s_25 = [int(i) for i in stdin.split()]\n    s_26 = [int(i) for i in stdin.split()]\n    s_27 = [int(i) for i in stdin.split()]\n    s_28 = [int(i) for i in stdin.split()]\n    s_29 = [int(i) for i in stdin.split()]\n    s_30 = [int(i) for i in stdin.split()]\n    s_31 = [int(i) for i in stdin.split()]\n    s_32 = [int(i) for i in stdin.split()]\n    s_33 = [int(i) for i in stdin.split()]\n    s_34 = [int(i) for i in stdin.split()]\n    s_35 = [int(i) for i in stdin.split()]\n    s_36 = [int(i) for i in stdin.split()]\n    s_37 = [int(i) for i in stdin.split()]\n    s_38 = [int(i) for i in stdin.split()]\n    s_39 = [int(i) for i in stdin.split()]\n    s_40 = [int(i) for i in stdin.split()]\n    s_41 = [int(i) for i in stdin.split()]\n    s_42 = [int(i) for i in stdin.split()]\n    s_43 = [int(i) for i in stdin.split()]\n    s_44 = [int(i) for i in stdin.split()]\n    s_45 = [int(i) for i in stdin.split()]\n    s_46 = [int(i) for i in stdin.split()]\n    s_47 = [int(i) for i in stdin.split()]\n    s_48 = [int(i) for i in stdin.split()]\n    s_49 = [int(i) for i in stdin.split()]\n    s_50 = [int(i) for i in stdin.split()]\n    s_51 = [int(i) for i in stdin.split()]\n    s_52 = [int(i) for i in stdin.split()]\n    s_53 = [int(i) for i in stdin.split()]\n    s_54 = [int(i) for i in stdin.split()]\n    s_55 = [int(i) for i in stdin.split()]\n    s_56 = [int(i) for i in stdin.split()]\n    s_57 = [int(i) for i in stdin.split()]\n    s_58 = [int(i) for i in stdin.split()]\n    s_59 = [int(i) for i in stdin.split()]\n    s_60 = [int(i) for i in stdin.split()]\n    s_61 = [int(i) for i in stdin.split()]\n    s_62 = [int(i) for i in stdin.split()]\n    s_63 = [int(i) for i in stdin.split()]\n    s_64 = [int(i) for i in stdin.split()]\n    s_65 = [int(i) for i in stdin.split()]\n    s_66 = [int(i) for i in stdin.split()]\n    s_67 = [int(i) for i in stdin.split()]\n    s_68 = [int(i) for i in stdin.split()]\n    s_69 = [int(i) for i in stdin.split()]\n    s"
    },
    {
        "number": 4103,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a = map(int, stdin.split())\n    s_1 = int(n / 2)\n    s_2 = n - s_1\n    s = sorted([(s_1, b, a), (s_2, b, a), (s_1, a, b), (s_2, a, b)])\n    return str(len(s))\n\n\ndef"
    },
    {
        "number": 4103,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a = map(int, stdin.split())\n    s_1, s_2, s_n = map(int, stdin.split())\n    s_1 -= 1\n    s_2 -= 1\n    s_n -= 1\n    if n < b:\n        b = (b // 2) * 2 + 1\n    if b < a:\n        a = (a // 2) * 2 + 1\n    if n < s_n:\n        s_n = (s_n // 2) * 2 + 1\n    for i in range(s_1, s_n + 1):\n        for j in range(s_2, i + 1):\n            print(b, a, j)\n    return str(b) + \"0\" + str(a)\n\n\n---Time---\n\nExplanation\nThere are two different types of path that can be taken to the next point:\n\nIf the robot goes using the battery, the current charge of the battery is decreased by one (the robot can't use the battery if its charge is zero).\n\nIf the robot goes using the accumulator, the current charge of the accumulator is decreased by one (and the robot also can't use the accumulator if its charge is zero).\n\nIf the segment of the robot is exposed to sunlight, the charge of the accumulator increases by one (of course, its charge can't become higher than it's maximum capacity).\n\nIf the segment of the robot is exposed to sunlight and the robot goes through it using the battery, the charge of the accumulator increases by one (of course, its charge can't become higher than it's maximum capacity).\n\nThe robot can pass the segment with the highest charge.\n\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 4103,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a = map(int, stdin.split())\n    if n > 2:\n        b, a = a, b\n    max_s = n\n    for i in range(n-1):\n        max_s = min(max_s, n-1-i)\n        b -= 1\n        a -= 1\n    print(max_s)\n    return str(max_s)\n\nsolution(input())"
    },
    {
        "number": 4103,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a = list(map(int, stdin.split()))\n    s = list(map(int, stdin.split()))\n    return ''.join([''.join(['1' if s_i == 0 else '0' for s_i in s_i]) for s_i in range(max(s)+1)])\n\nn, b, a = list(map(int, input().split()))\ns = list(map(int, input().split()))\n\nprint(solution(n, b, a))\n-----Modifications-----\n\nsolution(1, 0, 0)\n\n-----Constraints-----\n\n0 <= n <= 2^8\n\n0 <= s[i] <= 2^9\n\n-----Time Limit]\n\nO(n)\n\n-----Space Limit]\n\n1\n\n-----Constraints]\n\n1\n\n1\n"
    },
    {
        "number": 4103,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a = map(int, stdin.split())\n    return str(n//(n-b) + (n-b)//a)\n\nInput\n6 2 1\n1 0 0 1 0\n\nOutput\n3\n"
    },
    {
        "number": 4103,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a = map(int, stdin.split())\n    x = n - 1\n    s_i = b\n    s_j = a\n    s_k = 1\n    while s_j!= 0:\n        i = s_i // b\n        j = s_i % b\n        if i > 0:\n            x -= 1\n            s_j -= 1\n            s_k += 1\n        else:\n            x -= 1\n            s_j += 1\n            s_k -= 1\n    return str(s_k)\n\ndef"
    },
    {
        "number": 4103,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, B, A = map(int, stdin.split())\n    s_list = list(map(int, stdin.split()))\n    sol = 0\n    for i in range(len(s_list)):\n        if s_list[i] == 1:\n            sol += 2 ** i\n    if B > 0 and A > 0:\n        sol += B * len(s_list) * A\n    print(sol)\n    return\n"
    },
    {
        "number": 4103,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a = map(int, stdin.split())\n    segments = list(map(int, stdin.split()))\n    s = max(segments)\n    def get_battery(seg, s):\n        return (seg - s) // b + 1 if seg > s else 0\n    def get_acc(seg, s):\n        return (seg - s) // a + 1 if seg > s else 0\n    result = 0\n    def get_segment(seg):\n        return max(get_battery(seg, s), get_acc(seg, s)) if seg > s else 0\n    for seg in range(1, n + 1):\n        result = max(result, get_segment(seg))\n    return str(result)\n\"\"\"\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        n, b, a = map(int, stdin.split())\n        s = max(n // b + 1, a)\n        def get_segment(seg):\n            return (seg - s) // b + 1 if seg > s else 0\n        result = 0\n        for seg in range(1, n + 1):\n            result = max(result, get_segment(seg))\n        return str(result)\n\nfor stdin in ['']:\n    print(Solution().solution(stdin))\n"
    },
    {
        "number": 4104,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x,y,z,m = map(int,stdin.split())\n    answer = \"\"\n    if x+y+z+m>=1001:\n        return str(m)\n    def solution(x,y,z,m):\n        if m%2==0:\n            m=m//2\n            y,z = (z,z+m)\n            if x+y+z>=1001:\n                return str(m)\n        else:\n            m=m//2\n            z,y = (y,z+m)\n            if x+y+z>=1001:\n                return str(m)\n        return str(m)\n    for i in range(z,(z+m)-1,z):\n        if z==x:\n            answer=solution(x,y,i,m)\n        else:\n            answer=solution(x,y,i,m)\n            z+=1\n    for i in range(y,(y+m)-1,y):\n        if y==x:\n            answer=solution(x,z,i,m)\n        else:\n            answer=solution(x,z,i,m)\n            y+=1\n    return answer\n"
    },
    {
        "number": 4104,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    exp = []\n    temp = []\n    i = 0\n    while i < len(stdin):\n        if stdin[i].isdigit():\n            i += 1\n            continue\n        else:\n            temp.append(int(stdin[i]))\n            if i == len(stdin) - 1:\n                exp.append(temp[-1])\n            i += 1\n    return''.join(map(str, exp))\n"
    },
    {
        "number": 4104,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    operands = [int(i) for i in stdin.split()]\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    operands.pop(0)\n    oper"
    },
    {
        "number": 4104,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    result = []\n    for _ in range(int(stdin.strip())):\n        result.append(eval(stdin.strip()))\n    \n    return str(sum(result))\n"
    },
    {
        "number": 4104,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    answer = \"\"\n    stdin = stdin.replace(' ','')\n    operators = []\n    for i in range(len(stdin)):\n        if stdin[i] in ['+','-']:\n            operators.append(stdin[i])\n        if len(operators) == 0:\n            answer += str(int(stdin[i])*int(stdin[i+1]))\n        else:\n            a = int(stdin[i])\n            b = int(stdin[i+1])\n            if operators[-1] == '+':\n                answer += str(a+b)\n            if operators[-1] == '-':\n                answer += str(a-b)\n    return answer\n\n\n-----Constraints-----\n0 < stdin.length <= 100\n0 <= stdin[i] <= 255\n\n0 < operators[i] <= '+' or '-'\n\"\"\"\n\nimport sys\n\ninput = sys.stdin.readline\n\n\ndef"
    },
    {
        "number": 4104,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return str(eval(stdin))\n"
    },
    {
        "number": 4104,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    op = []\n    for i in range(0, 10):\n        op.append(int(stdin[i]))\n    return str(sum(op))"
    },
    {
        "number": 4104,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    while True:\n        line = stdin.readline().strip().split()\n        if not line:\n            break\n        \n        if line[0] == \"+\":\n            line[0] = str(eval(line[1] + line[2]))\n        elif line[0] == \"-\":\n            line[0] = str(eval(line[1] - line[2]))\n        elif line[0] == \"*\":\n            line[0] = str(eval(line[1] * line[2]))\n        elif line[0] == \"/\":\n            if line[2] == \"0\":\n                line[2] = 0\n            else:\n                line[2] = eval(line[2])\n            line[0] = str(eval(line[1] / line[2]))\n        elif line[0] == \"^\":\n            line[0] = str(eval(line[1] ** line[2]))\n        \n        stdin.readline()\n        \n    return line[0]\n"
    },
    {
        "number": 4104,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    expression = list(stdin)\n    i = 0\n    while i < len(expression):\n        op = str(expression[i])\n        if op[0] == '-':\n            start = i\n            i += 1\n            end = i\n            while i < len(expression) and expression[i]!= '-':\n                i += 1\n            if i < end:\n                sub = expression[start:i+1]\n                while i < end:\n                    sub.append(expression[i])\n                    i += 1\n                while i < end:\n                    expression[end] = expression[i]\n                    i += 1\n                expression[start] = '-'\n                expression[i] = sub\n        else:\n            sub = int(expression[i])\n            while i < len(expression) and expression[i]!= '+':\n                i += 1\n            if i < sub:\n                sub = int(expression[i])\n                while i < sub:\n                    expression[i] = expression[i] + '+'\n                    i += 1\n            else:\n                sub = int(expression[i])\n                while i < sub:\n                    expression[i] = expression[i] + '-'\n                    i += 1\n            expression[start] = sub\n    for e in expression:\n        print(e, end=' ')\n    print()\n    return ''.join(expression)\n\nprint(solution(stdin))"
    },
    {
        "number": 4104,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    expr = ''\n    for i in range(0,len(stdin)-1):\n        expr += stdin[i]\n        if i<(len(stdin)-1):\n            expr += '+'\n    \n    expr = int(expr)\n    \n    if expr < 0:\n        expr = abs(expr)\n        \n    if expr > 255:\n        return '1'\n    \n    return str(expr)"
    },
    {
        "number": 4105,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    def valid(a, b, c):\n        return (a >= 1) and (b >= 1) and (c >= 1) and (a + b + c >= 3)\n    pairs = [0] * n\n    for i in range(n):\n        pairs[i] = int(stdin[i])\n    #print(pairs)\n    colors = [0] * n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if valid(pairs[i], pairs[j], colors[i] + colors[j]):\n                colors[i] += colors[j]\n    #print(colors)\n    for i in range(n):\n        if colors[i] > 1:\n            colors[i] = 1\n        else:\n            colors[i] = 0\n    #print(colors)\n    for i in range(n - 1):\n        if colors[i] > 0:\n            colors[i] = 0\n            colors[i + 1] = 1\n        else:\n            colors[i] = 1\n            colors[i + 1] = 0\n    #print(colors)\n    for i in range(n - 2):\n        if colors[i] > 0:\n            colors[i] = 0\n            colors[i + 1] = 0\n        else:\n            colors[i] = 1\n            colors[i + 1] = 0\n    #print(colors)\n    for i in range(n - 2):\n        if colors[i] > 0:\n            colors[i] = 0\n            colors[i + 1] = 0\n        else:\n            colors[i] = 1\n            colors[i + 1] = 0\n    #print(colors)\n    for i in range(n - 2):\n        if colors[i] > 0:\n            colors[i] = 0\n            colors[i + 1] = 0\n        else:\n            colors[i] = 1\n            colors[i + 1] = 0\n    #print(colors)\n    for i in range(n - 3):\n        if colors[i] > 0:\n            colors[i] = 0\n            colors[i + 1] = 0\n        else:\n            colors[i] = 1\n            colors[i + 1] = 0\n    #print(colors)\n    for i in range(n - 3):\n        if colors[i] > 0:\n            colors[i] = 0\n            colors[i + 1] = 0\n        else:\n            colors[i] = 1\n            colors[i + 1] = 0\n    #print(colors)\n    for i in range(n - 3):\n        if colors[i] > 0:\n            colors[i] = 0\n            colors[i + 1] = 0\n        else:\n            colors[i] = 1\n            colors[i + 1] = 0\n    #print(colors)\n    for i in range(n - 2):\n        if colors[i] > 0:\n            colors[i] = 0\n            colors[i + 1] = 0\n        else:\n            colors[i] = 1\n            colors[i + 1] = 0\n    #print(colors)\n    for i in range(n - 2):\n        if colors[i] > 0:\n            colors[i] = 0\n            colors[i + 1] = 0\n        else:\n            colors[i] = 1\n            colors[i + 1] = 0\n    #print(colors)\n    for i in range(n - 2):\n        if colors[i] > 0:\n            colors[i] = 0\n            colors[i + 1] = 0\n        else:\n            colors[i] = 1\n            colors[i + 1] = 0\n    #print(colors)\n    #print(pairs)\n    #print(colors)\n    return \"YES\" if all(colors[i] == colors[i+1] for i in range(n)) else \"NO\""
    },
    {
        "number": 4105,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, k = list(map(int, stdin.split()))\n    \n    if k == 2:\n        if n <= 2:\n            return \"NO\"\n        else:\n            return \"YES\"\n    \n    elif k == 3:\n        if n <= 3:\n            return \"NO\"\n        else:\n            return \"YES\"\n    \n    else:\n        if n <= 3:\n            return \"NO\"\n        else:\n            return \"YES\"\n\nprint(solution(stdin))"
    },
    {
        "number": 4105,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 4105,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    for _ in range(n):\n        h, v = map(str, stdin.split())\n        if \"no\" in v:\n            break\n    else:\n        return \"NO\"\n    for _ in range(n, k+1):\n        if \"no\" in v:\n            break\n    else:\n        return \"NO\"\n    if v[0] == v[1]:\n        for i in range(len(v)-2):\n            if v[i]!= v[i+1] and v[i]!= v[i+2]:\n                return \"NO\"\n        else:\n            return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 4105,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    b_a, b_b, g_a, g_b = [int(i) for i in stdin.strip().split()]\n    pair_i = 0\n    while n - pair_i >= 2:\n        pair_a = b_a + g_a * (pair_i + 1)\n        pair_b = b_b + g_b * (pair_i + 2)\n        # if pair_i + 1 < n:\n        #     pair_a, pair_b = b_a + g_a * (pair_i + 1), b_b + g_b * (pair_i + 2)\n        #     pair_i += 1\n        if pair_a <= pair_b:\n            pair_i += 1\n        else:\n            pair_i -= 1\n    return \"YES\" if pair_i == 0 else \"NO\"\n"
    },
    {
        "number": 4105,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    n = int(stdin.pop(0))\n    k = int(stdin.pop(0))\n    for i in range(n):\n        man, woman = map(int, stdin.pop(0).split())\n        stdin.append(f'{man}{woman}')\n        stdin.append(f'{woman}')\n    \n    \n    for i in range(k):\n        stdin.append(f'{i+1}')\n    \n    \n    answer = ''\n    for i in range(n):\n        answer += f'{stdin.pop(0)} '\n        stdin.append(f'{stdin.pop(0)}')\n    \n    return answer\n\nprint(solution(input()))"
    },
    {
        "number": 4105,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, k = list(map(int, stdin.split()))\n    m, s = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    b = [x % k for x in a]\n    g = [x % s for x in a]\n    \n    # print(a)\n    # print(b)\n    # print(g)\n    \n    pairs = []\n    for i in range(1, n + 1):\n        for j in range(i, n + 1):\n            for k in range(j, n + 1):\n                # print(i, j, k)\n                # print(b[i-1] == g[j-1] and b[j-1] == g[k-1])\n                if b[i-1] == b[j-1] and b[j-1] == b[k-1]:\n                    # print(b[i-1], g[j-1], g[k-1])\n                    # print(b[i-1], b[j-1], b[k-1])\n                    pairs.append((i, j, k))\n                    # print(\"YES\")\n    # print(pairs)\n    # print(\"===\")\n    for p in pairs:\n        if p not in pairs:\n            pairs.append(p)\n    # print(pairs)\n    # print(\"===\")\n    # print(len(pairs))\n    \n    for p in pairs:\n        if b[p[0]-1] == g[p[1]-1] and b[p[1]-1] == g[p[2]-1]:\n            # print(\"YES\")\n            return \"YES\"\n    # print(b, g)\n    # print(pairs)\n    # print(\"===\")\n    # print(len(pairs))\n    \n    return \"NO\"\n"
    },
    {
        "number": 4105,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def parse(stdin: str):\n        lines = stdin.split(\"\\n\")\n        n = int(lines[0])\n        k = int(lines[1])\n        return k, lines[2: n + 2], n\n\n    k, s, n = parse(stdin)\n    color = 0\n    for i in range(n):\n        color += int(s[i])\n    for i in range(n):\n        color += (n - i - 1) * k\n    if color < 0:\n        return \"NO\"\n    elif color == 0:\n        return \"YES\"\n    else:\n        color = color // 2\n        for i in range(n - 1):\n            color += (n - i - 1) * k\n        color = color % 2\n        for i in range(n - 1):\n            color += (n - i - 1) * k\n        color = color // 2\n        for i in range(n - 1):\n            color += (n - i - 1) * k\n        color = color % 2\n        for i in range(n - 1):\n            color += (n - i - 1) * k\n        color = color % 2\n        for i in range(n - 1):\n            color += (n - i - 1) * k\n        color = color % 2\n        for i in range(n - 1):\n            color += (n - i - 1) * k\n        color = color % 2\n        for i in range(n - 1):\n            color += (n - i - 1) * k\n        color = color % 2\n        for i in range(n - 1):\n            color += (n - i - 1) * k\n        color = color % 2\n        for i in range(n - 1):\n            color += (n - i - 1) * k\n        color = color % 2\n        for i in range(n - 1):\n            color += (n - i - 1) * k\n        color = color % 2\n        for i in range(n - 1):\n            color += (n - i - 1) * k\n        color = color % 2\n        for i in range(n - 1):\n            color += (n - i - 1) * k\n        color = color % 2\n        for i in range(n - 1):\n            color += (n - i - 1) * k\n        color = color % 2\n        for i in range(n - 1):\n            color += (n - i - 1) * k\n        color = color % 2\n        for i in range(n - 1):\n            color += (n - i - 1) * k\n        color = color % 2\n        for i in range(n - 1):\n            color += (n - i - 1) * k\n        color = color % 2\n        for i in range(n - 1):\n            color += (n - i - 1) * k\n        color = color % 2\n        for i in range(n - 1):\n            color += (n - i - 1) * k\n        color = color % 2\n        for i in range(n - 1):\n            color += (n - i - 1) * k\n        color = color % 2\n        for i in range(n - 1):\n            color += (n - i - 1) * k\n        color = color % 2\n        for i in range(n - 1):\n            color += (n - i - 1) * k\n        color = color % 2\n        for i in range(n - 1):\n            color += (n - i - 1) * k\n        color = color % 2\n        for i in range(n - 1):\n            color += (n - i - 1) * k\n        color = color % 2\n        for i in range(n - 1):\n            color += (n - i - 1) * k\n        color = color % 2\n        for i in range(n - 1):\n            color += (n - i - 1) * k\n        color = color % 2\n        for i in range(n - 1):\n            color += (n - i - 1) * k\n        color = color % 2\n        for i in range(n - 1):\n            color += (n - i - 1) * k\n        color = color % 2\n        for i in range(n - 1):\n            color += (n - i - 1) * k\n        color = color % 2\n        for i in range(n - 1):\n            color += (n - i - 1) * k\n        color = color % 2\n        for i in range(n - 1):\n            color += (n - i - 1) * k\n        color = color % 2\n        for i in range(n - 1):\n            color += (n - i - 1) * k\n        color = color % 2\n        for i"
    },
    {
        "number": 4105,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    for _ in range(int(stdin)):\n        n, k = map(int, stdin.split())\n        \n        for i in range(n):\n            for j in range(k):\n                if j+1 >= n-k:\n                    break\n                if k+1 >= n-i:\n                    break\n                if j+1 >= n-i:\n                    break\n                if k+1 >= n-i:\n                    break\n                \n                if j+1 < n-i and k+1 < n-i:\n                    continue\n                if j+1 < n-i:\n                    continue\n                if k+1 < n-i:\n                    continue\n                if j+1 < n-i and k+1 < n-i:\n                    continue\n                if j+1 < n-i:\n                    continue\n                if k+1 < n-i:\n                    continue\n                \n                print(\"NO\")\n                return \"NO\"\n        print(\"YES\")\n        return \"YES\""
    },
    {
        "number": 4105,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    m = stdin.split()\n    n = int(m[1])\n    k = int(m[2])\n    \n    res = []\n    for i in range(n):\n        res.append(str(k))\n        k += 1\n        k %= 4\n    for i in range(n):\n        res[i] = str(i+1)\n    \n    for i in range(1, k):\n        for j in range(i, n):\n            if j - i <= 1:\n                continue\n            if j - i - 1 == i:\n                continue\n            res[j] = \"0\" + res[j]\n    \n    return \"\".join(res)\n    "
    },
    {
        "number": 4106,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split())\n    list_ = []\n    for i in range(k):\n        list_ += map(int, stdin.split())\n    list_ = sorted(list_, key=lambda x: x, reverse=True)\n    if k == 1:\n        return -1\n    for i in range(x):\n        if list_[i] % 10 == 0 and list_[i + 1] % 10 == 0:\n            list_[i] += list_[i + 1]\n            list_[i + 1] = 0\n    for i in list_:\n        if i == 0:\n            if list_[-1] == 0:\n                list_.pop()\n            else:\n                list_.append(0)\n        elif i == list_[-1]:\n            list_[-1] += 1\n        else:\n            list_[-1] += i\n    for i in range(k):\n        if list_[i] % 10 == 0 and list_[i + 1] % 10 == 0:\n            list_[i] += list_[i + 1]\n            list_[i + 1] = 0\n    if sum(list_) > x:\n        return -1\n    else:\n        return sum(list_)\n\n\"\"\"\n\nimport sys\ndef"
    },
    {
        "number": 4106,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split())\n    answer = -1\n    if k == 0:\n        return answer\n    if n > 0:\n        answer = 0\n        while k:\n            answer = max(answer, sum(map(lambda x: x % 2, range(1, n + 1))))\n            k -= 1\n    if n > 1:\n        answer = max(answer, sum(map(lambda x: x % 2, range(1, n + 1))))\n    if x > 1:\n        answer = max(answer, sum(map(lambda x: x % x, range(1, n + 1))))\n    return str(answer)"
    },
    {
        "number": 4106,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split())\n    res = 0\n    a = 1\n    for i in range(n-k+1):\n        for j in range(i+k-1):\n            if j+k-1 < n:\n                a = min(a, a_i)\n        res = max(res, a)\n        a = 1\n    return -1 if res < 0 else res\n"
    },
    {
        "number": 4106,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    x = list(map(int, stdin.split()))\n    # print(x)\n    return max(sum(x[i] for i in range(k)) for i in range(n - k + 1))\n\n\ndef"
    },
    {
        "number": 4106,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin[0])\n    k = int(stdin[1])\n    x = int(stdin[2])\n    \n    pre_sum = [0] * (k + 1)\n    sum_ = 0\n    for i in range(n):\n        for j in range(k):\n            sum_ += pre_sum[j] * x\n            \n        sum_ += pre_sum[-1]\n        pre_sum.append(sum_)\n    \n    return max(pre_sum)\n"
    },
    {
        "number": 4106,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split())\n    return solution(n, k, x)"
    },
    {
        "number": 4106,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    data = list(map(int, stdin.split()))\n    n = data[0]\n    k = data[1]\n    x = data[2]\n    \n    beauty = [int(i) for i in range(1, x+1)]\n    beauty.sort()\n    beauty_sum = 0\n    \n    for i in range(k):\n        for j in range(i+1, k):\n            beauty_sum += beauty[j]\n    beauty_sum -= len(beauty)\n    \n    return str(beauty_sum)"
    },
    {
        "number": 4106,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split())\n    beauty = [0] * k\n    for i in range(n):\n        beauty[int(stdin[i]) - 1] += 1\n    for i in range(k):\n        beauty[i] = max(beauty[i], sum(beauty[:i]))\n    for i in range(k):\n        beauty[i] += sum(beauty[:k])\n    return max(beauty) if sum(beauty) > x else -1\n\n\n-----Examples-----\nInput\n5 2 3\n5 1 3 10 1\n\nOutput\n18\n\nInput\n6 1 5\n10 30 30 70 10 10\n\nOutput\n-1\n\nInput\n4 3 1\n1 100 1 1\n\nOutput\n100\ndef"
    },
    {
        "number": 4106,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    k = int(stdin.strip())\n    x = int(stdin.strip())\n    visited = [False for i in range(x+1)]\n    visited[0] = True\n    summ = 0\n    for i in range(1, x+1):\n        if visited[i]:\n            summ += i\n        for j in range(1, k):\n            if visited[i-j]:\n                summ += i\n    if summ == 0:\n        return -1\n    else:\n        return str(summ)\n"
    },
    {
        "number": 4106,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split())\n    d = dict()\n    for i in range(1, n+1):\n        d[i] = min(d.get(i, 0), d.get(i-1, 0) + 1)\n    \n    for i in range(2, n+1):\n        for j in range(i+1, n+1):\n            for k in range(k):\n                d[j] = max(d[j], d[j-1] + 1)\n    \n    return str(d.get(x, 0))\n"
    },
    {
        "number": 4107,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    \n    router_s = [0 for _ in range(n)]\n    for i in range(n):\n        router_s[i] = int(stdin[i])\n\n    answer = []\n    \n    for i in range(n-1):\n        answer.append(router_s[i] + router_s[i+1] + k)\n        \n    answer.sort()\n    \n    return str(answer[-1])"
    },
    {
        "number": 4107,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    k,n=map(int,stdin.split())\n    if n-k>10**5:\n        return str(1)\n    else:\n        return str(n-k+1)"
    },
    {
        "number": 4107,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    \n    dp = [[0 for _ in range(n+1)] for _ in range(n+1)]\n    for j in range(1, n+1):\n        for i in range(1, n+1):\n            if j < i:\n                dp[i][j] = dp[i][j] + dp[i][j-i]\n            if j > i:\n                dp[i][j] = max(dp[i][j], dp[i][j-i])\n    \n    \n    answer = 0\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            answer = max(answer, dp[i][j])\n    print(answer)\n    return str(answer)\n"
    },
    {
        "number": 4107,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split(' ')))\n    covers = [0, 0]\n    for _ in range(n):\n        covers.append(int(stdin.split(' ')[0]))\n        covers.append(int(stdin.split(' ')[1]))\n    covers.sort()\n    for _ in range(k):\n        for i in range(n):\n            if covers[i] <= i:\n                break\n        else:\n            print(0)\n            return\n        for j in range(n):\n            if covers[j] <= j:\n                break\n        else:\n            print(0)\n            return\n        for j in range(n):\n            if covers[j] <= j and covers[i] >= j:\n                break\n        else:\n            print(0)\n            return\n        if covers[i] <= i:\n            covers[i] += 1\n        if covers[j] <= j:\n            covers[j] += 1\n    return str(len(covers[0:n]))\n\ndef"
    },
    {
        "number": 4107,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, k = map(int, stdin.split())\n    # n = len(stdin)\n    # k = (n - 1) // 10\n    # n = (n - 1) % 10\n    # print(n)\n    # print(k)\n    s = stdin\n    a = \"\"\n    for i in range(len(s) - 1):\n        if s[i] == '1':\n            a += str(i + 1)\n        else:\n            a += str(i) + \"0\"\n    a += str(n)\n    a += '0'\n    a += str(n - k)\n    a += '0'\n    a = int(a)\n    a = (a + 2) % 10\n    a = int(a)\n    \n    return str(a)\n"
    },
    {
        "number": 4107,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join(str(i) for i in sorted(list(map(lambda x: int(x.replace('.0', '').replace('.1', '').replace('.2', '').replace('.3', '').replace('.4', '').replace('.5', ''), list(map(int, stdin.split()))))))\n"
    },
    {
        "number": 4107,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split()]\n    s = [int(i) for i in stdin.split()]\n    spots = []\n    for i in range(n):\n        if s[i] == '0':\n            spots.append(i)\n        elif s[i] == '1':\n            spots.append(i)\n    if not spots:\n        return '0'\n    for i in range(k):\n        spots.remove(i)\n    if spots:\n        return '0'\n    for i in spots:\n        for j in range(i + 1, n):\n            s[i] = '1'\n            s[j] = '0'\n    spots = []\n    return ''.join(s)\n"
    },
    {
        "number": 4107,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n == 1:\n        print(k)\n    elif k == 1:\n        print(n * k)\n    else:\n        s = stdin.split(\" \")\n        print(s[1])\n        print(s[0])\n        print(s[1])\n        print(s[2])\n        print(s[0])\n        print(s[0])\n        print(s[1])\n        print(s[2])\n        print(s[0])\n        print(s[2])\n        print(s[0])\n        print(s[2])\n        print(s[0])\n        print(s[2])\n        print(s[0])\n        print(s[2])\n        print(s[0])\n        print(s[2])\n        print(s[0])\n        print(s[2])\n        print(s[0])\n        print(s[2])\n        print(s[0])\n        print(s[2])\n        print(s[0])\n        print(s[2])\n        print(s[0])\n        print(s[2])\n        print(s[0])\n        print(s[2])\n        print(s[0])\n        print(s[2])\n        print(s[0])\n        print(s[2])\n        print(s[0])\n        print(s[2])\n        print(s[0])\n        print(s[2])\n        print(s[0])\n        print(s[2])\n        print(s[0])\n        print(s[2])\n        print(s[0])\n        print(s[2])\n        print(s[0])\n        print(s[2])\n        print(s[0])\n        print(s[2])\n        print(s[0])\n        print(s[2])\n        print(s[0])\n        print(s[2])\n        print(s[0])\n        print(s[2])\n        print(s[0])\n        print(s[2])\n        print(s[0])\n        print(s[2])\n        print(s[0])\n        print(s[2])\n        print(s[0])\n        print(s[2])\n        print(s[0])\n        print(s[2])\n        print(s[0])\n        print(s[2])\n        print(s[0])\n        print(s[2])\n        print(s[0])\n        print(s[2])\n        print(s[0])\n        print(s[2])\n        print(s[0])\n        print(s[2])\n        print(s[0])\n        print(s[2])\n        print(s[0])\n        print(s[2])\n        print(s[0])\n        print(s[2])\n        print(s[0])\n        print(s[2])\n        print(s[0])\n        print(s[2])\n        print(s[0])\n        print(s[2])\n        print(s[0])\n        print(s[2])\n        print(s[0])\n        print(s[2])\n        print(s[0])\n        print(s[2])\n        print(s[0])\n        print(s[2])\n        print(s[0])\n        print(s[2])\n        print(s[0])\n        print(s[2])\n        print(s[0])\n        print(s[2])\n        print(s[0])\n        print(s[2])\n        print(s[0])\n        print(s[2])\n        print(s[0])\n        print(s[2])\n        print(s[0])\n        print(s[2])\n        print(s[0])\n        print(s[2])\n        print(s[0])\n        print(s[2])\n        print(s[0])\n        print(s[2])\n        print(s[0])\n        print(s[2])\n        print(s[0])\n        print(s[2])\n        print(s[0])\n        print(s[2])\n        print(s[0])\n        print(s[2])\n        print(s[0])\n        print(s[2])\n        print(s[0])\n        print(s[2])\n        print(s[0])\n        print(s[2])\n        print(s[0])\n        print(s[2])\n        print(s[0])\n        print(s[2])\n        print(s[0])\n        print(s[2])\n        print(s[0])\n        print(s[2])\n        print(s[0])\n        print(s[2])\n        print(s[0])\n        print(s[2])\n        print(s[0])\n        print(s[2])\n        print(s[0])\n        print(s[2])\n        print(s[0])\n        print(s[2])\n        print(s[0])\n        print(s[2])\n        print(s[0])\n        print(s[2])\n        print(s[0])\n        print(s[2])\n        print(s[0])\n        print(s[2])\n        print(s[0])\n        print(s[2])\n        print(s[0])\n        print(s[2])\n        print(s[0])\n        print(s[2])\n        print(s[0])\n        print(s[2])\n        print(s[0])\n        print(s[2])\n        print(s[0"
    },
    {
        "number": 4107,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # code here\n    \n    n, k = map(int, stdin.split())\n    \n    \n    return str(min(n,k))"
    },
    {
        "number": 4107,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    \n    i = 1\n    \n    while n > 0:\n        if '0' in str(n):\n            i = i * 10\n            n -= 1\n        else:\n            i = i * 10 + 1\n        n -= 1\n    \n    routers = []\n    while i > k:\n        routers.append(i)\n        i = i // 10\n    \n    routers.sort()\n    router = 1\n    \n    for router in routers:\n        if n!= 0:\n            for j in range(n - 1):\n                if int(str(n)[j])!= int(str(n)[j+1]):\n                    router -= 1\n                    n -= 1\n                    break\n        if n == 0:\n            break\n        n -= 1\n    \n    router_price = 0\n    for i in range(1, k + 1):\n        router_price += i * int(str(i)[0])\n    router_price -= k\n    \n    print(router_price)\n    \n    return router_price\n\nn,k = input().split()\n\nprint(solution(n,k))"
    },
    {
        "number": 4108,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split()\n    z, l = S.split('a')\n    z, l = l.split('z')\n    z, p = T.split('p')\n    z = z.replace('a', 'z')\n    p = p.replace('z', 'a')\n    answer = False\n    if z == l == p:\n        answer = True\n    else:\n        if z == p:\n            answer = True\n        else:\n            answer = False\n    return answer\n\n'''\n\n\ndef"
    },
    {
        "number": 4108,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    c_1, c_2, c_3 = 0, 0, 0\n    for s in stdin:\n        if s == 'z':\n            c_1 += 1\n        elif s == 'p':\n            c_2 += 1\n        elif s == 'x':\n            c_3 += 1\n    if c_1 == c_2 == c_3:\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 4108,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    a, b = t.split()\n    result = solution(s)\n    if result!= 'Yes':\n        print(result)\n    else:\n        print('No')\n        \n\n1\n2\n3\n3\n"
    },
    {
        "number": 4108,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def solve(a,b):\n        if a == b:\n            return 'Yes'\n        else:\n            return 'No'\n    if len(stdin) < 2:\n        return solve(len(stdin) + 1, len(stdin) + 1)\n    else:\n        c_1, c_2 = stdin\n        return solve(c_1, c_2) or solve(c_2, c_1)\n    '''\n    if len(stdin) < 2:\n        return solve(len(stdin) + 1, len(stdin) + 1)\n    else:\n        c_1, c_2 = stdin\n        if c_1 == c_2:\n            return 'Yes'\n        else:\n            return 'No'\n    '''\n"
    },
    {
        "number": 4108,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    for _ in range(int(stdin)):\n        stdin = input()\n        if len(stdin) == 2:\n            if stdin[0]!= stdin[1]:\n                print('No')\n                continue\n        else:\n            print('No')\n    \n"
    },
    {
        "number": 4108,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(str, stdin.split())\n    if a[::-1]!= b[::-1]:\n        return \"No\"\n    s, t = a, b\n    for i in range(len(s)):\n        if s[i] == t[i]:\n            s = s[0:i] + s[i + 1:]\n            t = t[0:i] + t[i + 1:]\n    return \"Yes\" if s == t else \"No\"\n\nimport math\ndef"
    },
    {
        "number": 4108,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    for i in range(a, b + 1):\n        c1, c2 = map(str, input().split())\n        if c1 == c2:\n            print('Yes')\n        else:\n            print('No')\n    return ''"
    },
    {
        "number": 4108,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n  a, b = stdin[0], stdin[1]\n  return (a, b) == (b, a)\n"
    },
    {
        "number": 4108,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    if not s:\n        return \"Yes\"\n    temp = s[0]\n    for i in range(1, len(s)):\n        temp = temp.replace(s[i], s[i + 1])\n    print(temp)\n    return \"No\"\n\n-----Bonus-----\nNote: As a pre-condition, the length of the input string is less than 300,000, and the maximum length of the input is 2,000.\n\n'''\nimport sys\n\ninput = sys.stdin.readline\n\ndef"
    },
    {
        "number": 4108,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    import re\n    s = re.split('\\s', stdin)\n    t = re.split('\\s', stdin)\n    for i in range(len(s)):\n        if s[i]!= t[i]:\n            print('No')\n            return\n    print('Yes')\n    return\n\n\n---------------\n\n\"\"\"\ndef"
    },
    {
        "number": 4109,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n,M = map(int,stdin[0].split(','))\n    \n    for _ in range(n):\n        stdin = stdin[1:]\n        stdin.append(stdin.pop(0))\n    \n    visited = [0]*M\n    answer = 0\n    for _ in range(n):\n        tmp = stdin.pop(0)\n        visited[tmp] = visited[tmp-1] + 1\n        answer = max(answer, visited[tmp] * 10**9)\n    \n    return str(answer)\n"
    },
    {
        "number": 4109,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    books = []\n    for _ in range(N):\n        books.append(list(map(int, input().split())))\n    \n    books.sort(key=lambda x:x[0])\n    for i in range(N):\n        books[i][1] += books[i][0]\n    \n    curr_level = 0\n    amount = 0\n    \n    for books in books:\n        curr_level += books[1]\n        amount += books[0]\n        \n        if curr_level > M:\n            amount = amount * M / curr_level\n            curr_level = 0\n        \n    return str(amount)\n\nfor test_case, answer in [\n    (\"5 4\", \"20\"),\n    (\"5 4\", \"0\")\n]:\n    print(f\"{test_case} => {answer}\")\n    result = solution(test_case)\n    print(result)\n    assert result == answer, f\"{test_case} failed\"\nprint(\"good job!\")\n    "
    },
    {
        "number": 4109,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, M, K = map(int, stdin.split())\n    books = list(map(int, stdin.split()))\n    books.sort()\n\n    answer = K\n    for i in range(M):\n        min_amount = K\n        for j in range(N):\n            if books[j] - K >= 0:\n                min_amount = min(min_amount, books[j] - K)\n        if min_amount >= 0:\n            answer -= min_amount\n    return str(answer)"
    },
    {
        "number": 4109,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    books = list(map(int, stdin.split()))\n    print(books)\n    answer = ''\n    for i in range(N):\n        for j in range(M):\n            if books[i] < books[j]:\n                answer += 'A_{}_{}'.format(i+1, j+1)\n                print(i+1, j+1)\n                break\n            if i == N-1 and j == M-1:\n                answer += 'A_{}_{}'.format(i+1, j+1)\n                print(i+1, j+1)\n    return answer"
    },
    {
        "number": 4109,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return''.join(sorted(map(str, stdin), key=lambda x: -int(x)))\n"
    },
    {
        "number": 4109,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    books = list(map(int, stdin.split()))\n    books.sort()\n    \n    answer = 0\n    for i in range(N):\n        cur = books[i]\n        for j in range(N):\n            if i!= j:\n                answer += cur * (books[j] - books[i])\n    \n    return str(answer)\n"
    },
    {
        "number": 4109,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return\n"
    },
    {
        "number": 4109,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, M = map(int, stdin.split())\n    return str(int(sum(map(int, stdin.split()))))\n\n\"\"\"\n5 7\n1 2 2 3 3\n1 3\n2 4\n2 5\n3 2\n3 3\n\"\"\""
    },
    {
        "number": 4109,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    j, n = map(int, stdin.split())\n    books = sorted(map(int, stdin.split()))\n    return str(min(sum(map(lambda x: x // j, books)) + j, n * max(books)))"
    },
    {
        "number": 4109,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, M, C = map(int, stdin.split())\n    return str(M * C // N)"
    },
    {
        "number": 4110,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    D, G, p_1, p_2, p_3 = map(int, stdin.split())\n    c_1 = 100 * p_1\n    c_2 = 100 * p_2\n    c_3 = 100 * p_3\n    base = 800 + c_1 + c_2 + c_3\n    if base > G:\n        return str(base - G)\n    if base <= G:\n        return str(G - base)\n    if D < G:\n        return \"Too few problems to solve this problem\"\n    if D > G:\n        return \"Too many problems to solve this problem\"\n    for i in range(D - G):\n        if p_1 + p_2 + p_3 <= 100:\n            c_1 += p_1\n            c_2 += p_2\n            c_3 += p_3\n        else:\n            c_1 += 100 * (p_1 // p_1 + p_2 // p_2 + p_3 // p_3)\n            c_2 += 100 * (p_1 // p_1 + p_2 // p_2 + p_3 // p_3)\n            c_3 += 100 * (p_1 // p_1 + p_2 // p_2 + p_3 // p_3)\n        if c_1 + c_2 + c_3 == G:\n            return str(G - c_1 - c_2 - c_3)\n    return str(G - c_1 - c_2 - c_3)\n"
    },
    {
        "number": 4110,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n,g,k = map(int,stdin.split())\n    score = [0]*(n+1)\n    count = 1\n    if g < 100:\n        score[1] = 500\n    else:\n        for i in range(2,n+1):\n            score[i] = (score[i-1] + 100)//i\n            if score[i] >= g:\n                count += 1\n    if k < 100:\n        score[k] = 800\n    else:\n        for i in range(k,n+1):\n            score[i] = (score[i-1] + 200)//i\n            if score[i] >= g:\n                count += 1\n    print(count)\n    return \"Yes\" if score[n] + score[k] >= 500 else \"No\"\n\n-----Constraints-----\n - 1 \u2264 D \u2264 10\n - 1 \u2264 n \u2264 100\n - 100 \u2264 g \u2264 100\n - 100 \u2264 k \u2264 100\n - 100 \u2264 G \u2264 10^6\n - 100 \u2264 c_i \u2264 10^6\n - 100 \u2264 G < c_i < 100\n - 100 \u2264 c_i and g are all multiples of 100.\n-100 \u2264 G < 100\n\n-----Input-----\nInput is given from Standard Input in the following format:\nD G\np_1 c_1\n:\np_D c_D\n\n-----Output-----\nPrint the minimum number of problems that needs to be solved in order to have a total score of G or more points. Note that this objective is always achievable (see Constraints).\n\n-----Sample Input-----\n2 700\n3 500\n5 800\n\n-----Sample Output-----\n3\n\nIn this case, there are three problems each with 100 points and five problems each with 200 points. The perfect bonus for solving all the 100-point problems is 500 points, and the perfect bonus for solving all the 200-point problems is 800 points. Takahashi's objective is to have a total score of 700 points or more.\nOne way to achieve this objective is to solve four 200-point problems and earn a base score of 800 points. However, if we solve three 100-point problems, we can earn the perfect bonus of 500 points in addition to the base score of 300 points, for a total score of 800 points, and we can achieve the objective with fewer problems.\ndef"
    },
    {
        "number": 4110,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, g, score = map(int, stdin.split())\n    b = (g - 100) * 100 // g\n    P = 100 * g + g - b\n    base = score + b\n    if base <= P:\n        return str(n + 1)\n    else:\n        return str(n + 1) + \" \" + str(P - base)\n"
    },
    {
        "number": 4110,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    D, G = stdin.split()\n    D = int(D)\n    G = int(G)\n    base_score = G\n    perfect_bonus = 500\n    for i in range(1, D+1):\n        if 100 < i < D:\n            base_score += 100 * int(stdin[i-1])\n        else:\n            perfect_bonus += 100 * int(stdin[i-1])\n    return str(base_score - perfect_bonus)"
    },
    {
        "number": 4110,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    D, G, P, C, score = [int(x) for x in stdin.split()]\n    total_score = (G + P * (D - 1)) * (G - 100) * C\n    total_score += score\n    return str(total_score)\n"
    },
    {
        "number": 4110,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    global total, answer\n    total = 0\n    answer = 0\n    for i in range(2):\n        c, p = stdin.split()\n        c = int(c)\n        p = int(p)\n        total += p\n        if total <= 600:\n            answer += 500\n        else:\n            answer += 800\n    return str(answer)\n\ntest = Solution()\nprint(test.solution(input()))\n\ndef"
    },
    {
        "number": 4110,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    D, G = map(int, stdin.split(' '))\n    score = 0\n    def solve(c: int, g: int) -> int:\n        if g + c > G:\n            return 0\n        elif g + c > score:\n            score = g + c\n            return score\n        else:\n            return score\n    for i in range(1, D+1):\n        c = solve(c=c, g=i)\n        score += (c-1) * 100 + (i-1) * 500\n    return score\n\ndef"
    },
    {
        "number": 4110,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, p = stdin.split()\n    G, c = map(int, stdin.split())\n    p_i = [int(p_i) for p_i in p.split()]\n    base = 100 * sum(p_i)\n    total = base + c\n    dp = [0 for _ in range(total + 1)]\n    dp[0] = 1\n    for i in range(1, len(p_i)):\n        for j in range(total, -1, -1):\n            if dp[j] <= i:\n                break\n        else:\n            dp[i] = 1\n    return str(sum(dp) % total)\n\nprint(solution(\"2 600\"))\nprint(solution(\"1 200\"))\nprint(solution(\"3 400\"))\nprint(solution(\"5 800\"))"
    },
    {
        "number": 4110,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    total = n\n    visited = [0] * n\n    answer = 0\n    visited[0] = 1\n    numbers = list(map(int, stdin.split()))\n    for i in range(1, n):\n        if visited[i-1] == 0:\n            c, g, p = map(int, stdin.split())\n            if p >= g:\n                p -= g\n                total += c\n            else:\n                total += p * c\n            answer += 1\n            visited[i] = 1\n    if total >= 800:\n        answer += 1\n    return str(answer)\n"
    },
    {
        "number": 4110,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    p_i = [int(i) for i in stdin.strip().split(\" \")]\n    c_i = sum(p_i)\n    G = 100*c_i\n    \n    count = 0\n    for i in range(n):\n        if p_i[i]==100:\n            count+=1\n        else:\n            count+=p_i[i]*G\n    \n    return str(count+G)\n"
    },
    {
        "number": 4111,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin)\n    return str(n // 2 + 1) if n % 2 == 0 else str((n + 1) // 2)\n\n----------\n\n---Python---\n\nimport sys\nsys.setrecursionlimit(10000)\n\nn = int(input())\na = [int(x) for x in input().split()]\n\ndef"
    },
    {
        "number": 4111,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = map(int, stdin.split())\n    a = sorted(a, reverse=True)\n    t = sorted(a, key=lambda x: a.count(x), reverse=True)\n    t = sorted(t, key=lambda x: x * (t.index(x) + 1), reverse=True)\n    return \",\".join([str(i) for i in t])\n"
    },
    {
        "number": 4111,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    good_candies = 0\n    for i in range(n):\n        if i%2==0:\n            candies_in_even = []\n            candies_in_odd = []\n            for j in range(1, n+1):\n                if i+j<=n:\n                    candies_in_even.append(int(stdin[i+j]))\n                else:\n                    candies_in_odd.append(int(stdin[i+j]))\n            candies_in_even = sorted(candies_in_even, reverse=True)\n            candies_in_odd = sorted(candies_in_odd, reverse=True)\n            sum = 0\n            for j in range(len(candies_in_even)):\n                if candies_in_odd[j]!=0:\n                    sum += candies_in_even[j]*candies_in_odd[j]\n            good_candies += sum\n    return str(good_candies)\n\n-----Solution-----\n\nn = int(input())\na = list(map(int,input().split()))\ngood = 0\nfor i in range(n):\n    if i%2==0:\n        good+=a[i]\n    else:\n        good-=a[i]\nprint(good)\n"
    },
    {
        "number": 4111,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    good_candies = 0\n    odd_good_candies = 0\n    for i in range(n):\n        if a[i] % 2 == 0:\n            good_candies += 1\n        else:\n            odd_good_candies += 1\n    print(good_candies)\n    print(odd_good_candies)\n    \n\n-----Constraints-----\n\n1 <= n <= 2^5\n\n1 <= a[i] <= 10^4\n\n\n-----Time Limit-----\nYou have to wait all the time for every testcase.\nYour runtime is not exceed 10^5.\n\n-----Efficiency-----\nWorks only on a single input.\nTime limit: 1 sec (since input is a list of integers)\nMemory limit: 4,8 MB\n\n---O(N)---\nFor each case, we only need to count the good candies for that day.\nIn each day, we can eat the candy and calculate the sum of the weights.\n\"\"\"\n\ndef"
    },
    {
        "number": 4111,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    good_indexes = set(range(1, len(stdin) + 1))\n    good_indexes.update([2, 3, 4, 5, 6, 8, 9])\n    good_indexes = list(good_indexes)\n    n = int(stdin.split()[0])\n    w = int(stdin.split()[1])\n    answer = []\n    for i in range(1, n + 1):\n        if i not in good_indexes:\n            answer.append(i)\n    return''.join(answer)\n\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4111,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    goods = []\n    for i in range(n):\n        line = stdin.split(' ')\n        goods.append([int(j) for j in line[1:]])\n    goods = sorted(goods, key=lambda x: x[0])\n    for i in range(len(goods)):\n        if goods[i][0] == 1:\n            return '0'\n    return '1'"
    },
    {
        "number": 4111,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n % 2 == 1:\n        return str(n-1)\n    else:\n        return str(n*2)\n\nprint(solution(\"2\"))\n\n-----Constraints-----\n\n1 <= stdin.length <= 10^4\n1 <= n <= 10^4\n\n\n------Time complexity--------\n\nTime complexity of the above is $O(N)$, where $N$ is the number of inputs.\n\nSpace Complexity:\n\nTime complexity of the above is $O(N)$, where $N$ is the number of inputs.\n\n\n------Algorithm---------\n\n1. While n is odd, we continue to divide n into two by using the algorithm above:\n\n2. The rule is that we move n-1 elements to the right, and make sure the final element is not a product of the product of the left element and right element.\n\nThe choice to move to the right is the following:\n\nIf n is even, we divide n by 2, and we move n/2 to the left.\n\n\nThe choice to move to the left is the following:\n\nIf n is even, we divide n by 2 and move n/2 to the left.\n\n\n2. Set the weights for each of the following to $n$ as follows:\n\n$a_i$\n\nn = a_i\n\n$a_i - a_i$\n\n$a_i \\ne n$\n\nn = a_i - a_i$\n\n$a_i \\le n$\n\nn = a_i \\ge n$\n\nn = a_i - $a_i$\n\nn = $a_i - a_i$\n\nn = $a_i - a_i$\n\nn = a_i - $a_i$\n\nn = $a_i - a_i$\n\nn = $a_i - a_i$\n\n$a_i = a_i + a_i$\n\nn = a_i + a_i$\n\nn = $a_i + a_i$\n\nn = $a_i + a_i$\n\nn = $a_i + a_i$\n\nn = $a_i + a_i$\n\nn = $a_i + a_i$\n\nn = $a_i + a_i$\n\nn = $a_i + a_i$\n\nn = $a_i + a_i$\n\nn = $a_i + a_i$\n\nn = $a_i + a_i$\n\nn = $a_i + a_i$\n\nn = $a_i + a_i$\n\nn = $a_i + a_i$\n\nn = $a_i + a_i$\n\nn = $a_i + a_i$\n\nn = $a_i + a_i$\n\nn = $a_i + a_i$\n\nn = $a_i + a_i$\n\nn = $a_i + a_i$\n\nn = $a_i + a_i$\n\nn = $a_i + a_i$\n\nn = $a_i + a_i$\n\nn = $a_i + a_i$\n\nn = $a_i + a_i$\n\nn = $a_i + a_i$\n\nn = $a_i + a_i$\n\nn = $a_i + a_i$\n\nn = $a_i + a_i$\n\nn = $a_i + a_i$\n\nn = $a_i + a_i$\n\nn = $a_i + a_i$\n\nn = $a_i + a_i$\n\nn = $a_i + a_i$\n\nn = $a_i + a_i$\n\nn = $a_i + a_i$\n\nn = $a_i + a_i$\n\nn = $a_i + a_i$\n\nn = $a_i + a_i$\n\nn = $a_i + a_i$\n\nn = $a_i + a_i$\n\nn = $a_i + a_i$\n\nn = $a_i + a_i$\n\nn = $a_i + a_i$\n\nn = $a_"
    },
    {
        "number": 4111,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split(' ')))\n\n    result = []\n    for i in range(n - 1):\n        for j in range(n):\n            if a[j] >= a[j + 1]:\n                a[j], a[j + 1] = a[j + 1], a[j]\n                result.append(sum(a))\n                a[j], a[j + 1] = a[j + 1], a[j]\n    result.append(sum(a))\n    return '\\n'.join(str(x) for x in result)\n\n\n-----My Solution-----\n\nimport heapq\n\ndef"
    },
    {
        "number": 4111,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    good_candies = []\n    for _ in range(n):\n        good_candies.append(a.pop(0))\n    for i in range(n):\n        good_candies.append(a.pop(0))\n    print(sum(good_candies))\n    return ''.join(map(str, sorted(good_candies)))"
    },
    {
        "number": 4111,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int,stdin.split()))\n    a.sort()\n    a = set(a)\n    answer = len(a)\n    for i in range(n-1):\n        if len(a) == 1:\n            answer -= 1\n            break\n        if a[i]!= a[i+1]:\n            answer += 1\n            a.remove(a[i])\n    return str(answer)\nsolution('8')\n"
    },
    {
        "number": 4112,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    k = int(stdin[0])\n    x = int(stdin[1])\n    a_array = list(map(int, stdin[2:].split()))\n    a_array.sort()\n    for i in range(k, n):\n        curr_beauty = 0\n        for j in range(i-k):\n            if a_array[j] > a_array[j+1]:\n                curr_beauty += a_array[j]\n            else:\n                curr_beauty += a_array[j+1]\n        if curr_beauty == x:\n            return str(curr_beauty)\n    return str(-1)\n"
    },
    {
        "number": 4112,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n,k,x=map(int,stdin.split())\n    if n>k:\n        raise ValueError(\"First line should contain a number of pictures and minimum length of segment with at least one repost\")\n    if k>n-k:\n        raise ValueError(\"Second line should contain number of pictures and minimum length of segment with at least one repost\")\n    if k<=0:\n        raise ValueError(\"Third line should contain number of pictures and minimum length of segment with at least one repost\")\n    if x>=1000000000:\n        raise ValueError(\"Second line should contain number of pictures and minimum length of segment with at least one repost\")\n    \n    cnt=0\n    for i in range(1,k+1):\n        for j in range(i+1,k+1):\n            #print(\"i\",i,\"j\",j,\"cnt\",cnt)\n            if n-i-j+1>=k:\n                cnt+=x\n    return cnt\n\nprint(solution(stdin))"
    },
    {
        "number": 4112,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    l = list(map(int, stdin.split()))\n    m = max(l)\n    a = 0\n    for i in l:\n        while i > 0 and a < k:\n            a += m\n            i -= 1\n        if a < k:\n            return -1\n        a += i\n    return a\n"
    },
    {
        "number": 4112,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = list(map(int, stdin.split()))\n    # Check conditions\n    if k > n:\n        return \"-1\"\n    for i in range(k):\n        a_i = int(stdin[i + 3 * k])\n        if a_i < 0:\n            a_i = 10**9\n        elif a_i > 10**9:\n            a_i = a_i % 10**9\n        if i > 0:\n            a_i = (a_i // 10) + (a_i % 10)\n        if k > 1:\n            a_i = (a_i % 10) + (a_i // 10) * 10\n        if i < k-1:\n            a_i = a_i * 10 + a_i % 10\n        if x > a_i:\n            x = a_i\n    if x > n:\n        return -1\n    else:\n        return x\n"
    },
    {
        "number": 4112,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, k = map(int, stdin.split())\n    arr = map(int, stdin.split())\n    \n    max_sum = 0\n    for i in range(1, k + 1):\n        sum_value = sum([arr[j - 1] for j in range(i, n)])\n        if sum_value > max_sum:\n            max_sum = sum_value\n    \n    if max_sum == 0:\n        return -1\n    else:\n        return max_sum"
    },
    {
        "number": 4112,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a_list = list(map(int, stdin.split()))\n    n = min(a_list)\n    a_list.sort()\n    for i in range(1, k+1):\n        res = 0\n        for j in range(len(a_list)):\n            if a_list[j] - i >= 0:\n                res += a_list[j] - i\n            else:\n                break\n        else:\n            res += i\n        a_list.insert(j, res)\n    return str(max(a_list))\n"
    },
    {
        "number": 4112,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    n, k = map(int, s[:2])\n    if k < 1 or k > 20:\n        return \"-1\"\n    a = list(map(int, s[2:]))\n    answer = 0\n    for ai in a:\n        answer += ai\n    return answer\n"
    },
    {
        "number": 4112,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n,k,x=map(int,stdin.split())\n    n,k,x=map(int,stdin.split())\n    if n==1:\n        return 0\n    if k>=1 and k<=n-1:\n        if k==1:\n            if n==x:\n                return 0\n            if x==n-k:\n                return n\n        if k>1:\n            return 0\n        else:\n            return n\n    else:\n        return -1\n"
    },
    {
        "number": 4112,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, k, x = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    count = 0\n    for i in range(1, n+1):\n        for j in range(k, x):\n            if a[i-1] < a[j-k]:\n                count += 1\n    print(count)\n    return count\n\n\n----My Answer----\ndef"
    },
    {
        "number": 4112,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = list(map(int, stdin.split()))\n    # print(n, k, x)\n    \n    def sum_pictures_with_k(n, k):\n        # print(k)\n        sum = 0\n        for i in range(k):\n            # print(n, i, sum)\n            sum += x\n            # print(sum)\n        return sum\n    \n    def sum_pictures(n, k, a):\n        # print(k)\n        sum = 0\n        for i in range(k):\n            # print(n, i, sum)\n            sum += a[i]\n            # print(sum)\n        return sum\n    \n    def max_sum_pictures_with_k(n, k, a):\n        # print(n, k, a)\n        # print(n, a)\n        # print(k, a)\n        if n < k:\n            return 0\n        if n == k:\n            return sum_pictures_with_k(n, k)\n        \n        sum_sum = 0\n        for i in range(k):\n            sum_sum += a[i]\n        \n        if sum_sum > max(sum_pictures_with_k(n-1, k, a), max_sum_pictures_with_k(n-1, k-1, a)):\n            return sum_pictures_with_k(n, k)\n        else:\n            return max_sum_pictures_with_k(n-1, k, a)\n    \n    return max_sum_pictures_with_k(n, k, [x]*k)\n\ndef"
    },
    {
        "number": 4113,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N <= 0:\n        return 'No'\n    left, right = 1, N\n    answer = []\n    while left <= right:\n        mid = (left + right) // 2\n        if solution(mid) == 'Yes':\n            answer.append(mid)\n            left = mid + 1\n        else:\n            right = mid - 1\n    return 'Yes'\n\nsolution(input())\n"
    },
    {
        "number": 4113,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n  n = int(stdin)\n\n  for i in range(n):\n    x = i + 1\n    y = list(map(int, input().split()))\n\n    if len(y) == 1:\n      print('Yes')\n    elif len(y) == 2 and y[0] == 0 and y[1] == 0:\n      print('Yes')\n    elif len(y) == 2 and y[0] == 0 and y[1] > 0:\n      print('Yes')\n    else:\n      print('No')\n  return"
    },
    {
        "number": 4113,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, *a = map(int, stdin)\n    if a[-1] == 0:\n        return \"Yes\"\n    if a[-2] == 0:\n        return \"Yes\"\n    if a[-3] == 0:\n        return \"No\"\n    return \"No\"\n\n---Runtime---\nRuntime: 52 ms\nMemory Usage: 31.2 MB\n\nTime Limit Exceeded\nRuntime: 29 ms, faster than 42.57% of Python3 online submissions for Cake Candles.\nMemory Usage: 30.4 MB, less than 66.13% of Python3 online submissions for Cake Candles.\n\"\"\"\n\n\nclass Solution:\n    def canBuyNDesserts(self, N: int) -> bool:\n        desserts = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n\n        def helper(desserts, k):\n            if len(desserts) == k:\n                return True\n            if len(desserts) < k:\n                return False\n            if len(desserts) == 1:\n                return True\n            if len(desserts) >= 3:\n                return False\n            for i in range(1, len(desserts)):\n                if helper(desserts[:i], k):\n                    return True\n            return False\n\n        return helper(desserts, N)\n"
    },
    {
        "number": 4113,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N > 100:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4113,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    if N == 0:\n        return 'No'\n    elif N == 1:\n        return 'Yes'\n    else:\n        if N % 2 == 0:\n            answer = 'No'\n            for i in range(1, N + 1):\n                if (N - i) % 2 == 0:\n                    answer = 'Yes'\n                    break\n                else:\n                    answer = 'No'\n                    break\n        else:\n            answer = 'No'\n            for i in range(2, N + 1, 2):\n                if (N - i) % 2 == 0:\n                    answer = 'Yes'\n                    break\n                else:\n                    answer = 'No'\n                    break\n        return answer\n"
    },
    {
        "number": 4113,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4113,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    c = list(map(int, stdin.split()))\n    total = 0\n    for i in range(1, n):\n        total += (c[i] + c[i-1]) * 2\n    if c[-1] == 0 and c[-2] == 0:\n        total += c[-1] * 2\n    return str(total)\n\ndef"
    },
    {
        "number": 4113,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    doughnuts_count = N // 3\n    doughnut_count = N % 3\n    cnt = 0\n    if doughnut_count == 0:\n        cnt += 1\n    if cnt == 0:\n        return 'No'\n    if cnt == 2:\n        return 'Yes'\n    if cnt == 3:\n        return 'Yes'\n    \n    for i in range(1,3):\n        if N - i * 3 <= 0:\n            return 'No'\n        if N - i * 3 == 0:\n            return 'Yes'\n        if doughnut_count == 2 and N - i * 3 - 2 < 0:\n            return 'Yes'\n        if doughnut_count == 2 and N - i * 3 == 0:\n            return 'Yes'\n        if doughnut_count == 3 and N - i * 3 + 2 < 0:\n            return 'Yes'\n    return 'No'"
    },
    {
        "number": 4113,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(int(stdin)):\n        n = int(stdin)\n        num_d, num_c = divmod(n, 2)\n        if num_d == 0 and num_c == 0:\n            print(\"Yes\")\n        elif num_d == 0 and num_c == 1:\n            print(\"No\")\n        elif num_d == 1 and num_c == 0:\n            print(\"No\")\n        else:\n            print(\"Yes\")\n    return \"Yes\"\n    \n"
    },
    {
        "number": 4113,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip().split(' ')[0])\n    num = 1\n    for i in range(N):\n        num = num * int(stdin.strip().split(' ')[1])\n    print(num)\n    if num > 0:\n        print('Yes')\n    else:\n        print('No')\n    return ''\n\"\"\"\n\ndef"
    },
    {
        "number": 4114,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    temp = [tuple(map(int, input().split())) for _ in range(n)]\n    return \" \".join([f\"{(x[0] + C_X) // 100 * 100} {(x[1] + C_Y) // 100 * 100} {(x[2] + C_X) // 100 * 100} {(x[3] + C_Y) // 100 * 100}\" for x, C_X, C_Y, H in temp])\n\"\"\""
    },
    {
        "number": 4114,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    x_list = []\n    y_list = []\n    h_list = []\n    for i in range(N):\n        x, y, h = map(int, stdin.split())\n        x_list.append(x)\n        y_list.append(y)\n        h_list.append(h)\n    x_min = min(x_list)\n    y_min = min(y_list)\n    x_max = max(x_list)\n    y_max = max(y_list)\n    h_max = max(h_list)\n    answer = str(x_max) + \" \" + str(y_max) + \" \" + str(h_max)\n    for i in range(N):\n        c = (x_min + x_max) // 2\n        h = (y_min + y_max) // 2\n        if h >= h_max:\n            answer += str(c) + \" \" + str(h)\n        else:\n            answer += str(c) + \" \" + str(h) + \" \" + str(h_max - h)\n    return answer"
    },
    {
        "number": 4114,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef"
    },
    {
        "number": 4114,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n  N = int(stdin.strip())\n  x_1 = int(stdin.strip().split()[0])\n  y_1 = int(stdin.strip().split()[1])\n  x_2 = int(stdin.strip().split()[2])\n  y_2 = int(stdin.strip().split()[3])\n  x_3 = int(stdin.strip().split()[4])\n  y_3 = int(stdin.strip().split()[5])\n  x_N = int(stdin.strip().split()[6])\n  y_N = int(stdin.strip().split()[7])\n\n  z = x_1 + (x_2 - x_1) * (y_3 - y_1) / (x_3 - x_1)\n  return '{:.2f} {:.2f} {:.2f}'.format(z, y_1, z)\n"
    },
    {
        "number": 4114,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    x_1, y_1 = map(int, stdin.strip().split(' '))\n    x_2, y_2 = map(int, stdin.strip().split(' '))\n    x_3, y_3 = map(int, stdin.strip().split(' '))\n    x_N, y_N = map(int, stdin.strip().split(' '))\n    \n    #Coordinates of the upper right corners\n    c_x, c_y = (x_1 + x_2 + x_3)/2, y_1 - (y_2 + y_3)/2\n    \n    #Calculate heights of the pieces of information\n    h = (x_1 + y_1 + x_2 + y_2 + x_3 + y_3)/3\n    \n    #Compute the nth coordinate (x_i, y_i)\n    h_i = (c_y - y_N)/h\n    \n    #Print the values\n    print(f'{c_x} {c_y} {h} {h_i}')\n    \n    #Return the value\n    return str(c_x) +'' + str(c_y) +'' + str(h) +'' + str(h_i)"
    },
    {
        "number": 4114,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip().split('\\n')[0])\n    x_1, y_1, h_1 = map(int, stdin.strip().split(' '))\n    x_2, y_2, h_2 = map(int, stdin.strip().split(' '))\n    x_3, y_3, h_3 = map(int, stdin.strip().split(' '))\n    x_N, y_N = map(int, stdin.strip().split(' '))\n    \n    C_X = (x_1 + x_2 + x_3 + x_N) // 3\n    C_Y = (y_1 + y_2 + y_3 + y_N) // 3\n    H = max(h_1 - C_Y, 0)\n    \n    return '{:.3f} {:.3f} {:.3f}'.format(C_X, C_Y, H)\n"
    },
    {
        "number": 4114,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    x_1 = int(stdin.split()[0])\n    y_1 = int(stdin.split()[1])\n    h_1 = int(stdin.split()[2])\n    x_2 = int(stdin.split()[3])\n    y_2 = int(stdin.split()[4])\n    h_2 = int(stdin.split()[5])\n    x_3 = int(stdin.split()[6])\n    y_3 = int(stdin.split()[7])\n    h_3 = int(stdin.split()[8])\n    x_N = int(stdin.split()[9])\n    y_N = int(stdin.split()[10])\n    \n    if N == 0 or N > 100 or not(x_1 >= 0 and y_1 >= 0 and x_1 <= 100 and y_1 <= 100 and h_1 >= 0 and h_1 <= 100 and x_2 >= 0 and y_2 >= 0 and x_2 <= 100 and y_2 <= 100 and h_2 >= 0 and h_2 <= 100 and x_3 >= 0 and y_3 >= 0 and x_3 <= 100 and y_3 <= 100 and h_3 >= 0 and h_3 <= 100 and x_N >= 0 and y_N >= 0 and x_N <= 100 and y_N <= 100 and h_N >= 0 and h_N <= 100 and x_1 < x_N and y_1 < y_N and x_2 < x_N and y_2 < y_N and x_3 < x_N and y_3 < y_N and h_3 < h_N:\n        return str(x_1 + x_2 + x_3 + x_N) + \" \" + str(y_1 + y_2 + y_3 + y_N) + \" \" + str(h_1 + h_2 + h_3 + h_N)\n    else:\n        return \"Error\"\n    \n    \n    \n"
    },
    {
        "number": 4114,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, *h = map(int, stdin)\n    return str(max(h)) +'' + str(min(h)) +'' + str(h[n-1] + h[n-2] + h[n-3])\n\ndef"
    },
    {
        "number": 4114,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n,x_1,y_1,h_1,x_2,y_2,h_2,x_3,y_3,h_3 = map(int,stdin.split(\" \"))\n    x_N,y_N = (x_1,y_1),(x_2,y_2),(x_3,y_3)\n    x_N = (x_N + 1) % (n-2)\n    y_N = (y_N + 1) % (n-2)\n    c_x, c_y, h = 0,0,0\n    n = (n-2)\n    for i in range(n):\n        c_x += (x_1 + x_2 + x_3) * h_1\n        c_y += (y_1 + y_2 + y_3) * h_1\n        h += (x_1 + x_2 + x_3) * h_2\n        h += (y_1 + y_2 + y_3) * h_2\n        h += (x_2 + x_3 + x_1) * h_3\n        h += (y_2 + y_3 + y_1) * h_3\n    print(int(c_x),int(c_y),int(h))\n    return str(c_x)+\" \"+str(c_y)+\" \"+str(h)\n    \n"
    },
    {
        "number": 4114,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # n = int(stdin.strip())\n    # x, y = map(int, stdin.strip().split())\n    # h = int(stdin.strip())\n    n = int(input())\n    x_1, y_1, h_1 = map(int, input().strip().split())\n    x_2, y_2, h_2 = map(int, input().strip().split())\n    x_3, y_3, h_3 = map(int, input().strip().split())\n    x_N, y_N = map(int, input().strip().split())\n\n    print(str(max(abs(x_1 - x_N), abs(y_1 - y_N))))\n    print(str(h_1 + h_3))\n    print(str(max(abs(x_2 - x_1), abs(y_2 - y_1))))\n    print(str(h_2 + h_3))\n    print(str(max(abs(x_3 - x_2), abs(y_3 - y_2))))\n    print(str(h_3 + h_1))\n"
    },
    {
        "number": 4115,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # write your code here\n    if len(stdin) > 100:\n        return -1\n    string = ''\n    for i in range(1,len(stdin)):\n        string += stdin[i]\n    string = string[::-1]\n    return string\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4115,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    answer = 0\n    for s in stdin:\n        if s == s[::-1]:\n            answer += 1\n    return answer\n\n-----Sample Output-----\n2\n\nFor example, we can change the third character to a to get a palindromic string.\ndef"
    },
    {
        "number": 4115,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def is_palindrome(s: str) -> bool:\n        return s == s[::-1]\n\n    s = stdin\n    palindrome = []\n    for i in range(len(s)):\n        palindrome.append(s[i])\n    for i in range(len(s)):\n        if is_palindrome(palindrome[i]) and i!= len(palindrome) - 1:\n            palindrome.pop(i)\n            palindrome.pop(i)\n    return len(palindrome)\n\nprint(solution(input()))"
    },
    {
        "number": 4115,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def h(s):\n        return s.replace('c','d').replace('z','y').replace('r','f').replace('u','d').replace('y','r')\n\n    s = ''.join(i for i in stdin.strip().split())\n\n    def check(s):\n        return ''.join(i for i in s.replace('c','d').replace('z','y').replace('r','f').replace('u','d').replace('y','r'))\n\n    def mins(s):\n        return len(list(filter(lambda x: x not in '', check(s))))\n\n    return mins(s)\n\nInput: \"yellow'coder\"\nOutput: 3\nExplanation:\nCode: ycoder\nS = 'yellow'\n\nCode: ycoder\nS = 'z'\n\nCode: zcoder\nS = 'r'\n\nCode: zcoder\nS = 'r'\n\nCode: ycoder\nS = 'u'\n\nCode: ucoder\nS = 'f'\n\nCode: fcoder\nS = 'y'\n\nCode: ycoder\nS = 'd'\n\nCode: dycoder\nS = 'f'\n\nCode: fcoder\nS = 'r'\n\nCode: rcoder\nS = 'y'\n\nCode: yrcoder\nS = 'r'\n\nCode: ycoder\nS = 'r'\n\nCode: rcoder\nS = 'f'\n\nCode: fcoder\nS = 'u'\n\nCode: ucoder\nS = 'c'\n\nCode: ycoder\nS = 'c'\n\nCode: ccoder\nS = 'd'\n\nCode: dcoder\nS = 'y'\n\nCode: ycoder\nS = 'y'\n\nCode: ycoder\nS = 'f'\n\nCode: fcoder\nS = 'f'\n\nCode: ucoder\nS = 'd'\n\nCode: ycoder\nS = 'f'\n\nCode: ycoder\nS = 'y'\n\nCode: ycoder\nS = 'c'\n\nCode: zcoder\nS = 'y'\n\nCode: ycoder\nS = 'f'\n\nCode: zcoder\nS = 'r'\n\nCode: ycoder\nS = 'c'\n\nCode: zcoder\nS = 'c'\n\nCode: ycoder\nS = 'd'\n\nCode: ycoder\nS = 'y'\n\nCode: ycoder\nS = 'c'\n\nCode: zcoder\nS = 'f'\n\nCode: ycoder\nS = 'f'\n\nCode: ycoder\nS = 'y'\n\nCode: ycoder\nS = 'd'\n\nCode: ycoder\nS = 'c'\n\nCode: ycoder\nS = 'y'\n\nCode: ycoder\nS = 'c'\n\nCode: ycoder\nS = 'f'\n\nCode: zcoder\nS = 'y'\n\nCode: zcoder\nS = 'd'\n\nCode: zcoder\nS = 'f'\n\nCode: zcoder\nS = 'c'\n\nCode: ycoder\nS = 'r'\n\nCode: ycoder\nS = 'c'\n\nCode: zcoder\nS = 'c'\n\nCode: ycoder\nS = 'c'\n\nCode: zcoder\nS = 'c'\n\nCode: ycoder\nS = 'r'\n\nCode: zcoder\nS = 'r'\n\nCode: zcoder\nS = 'r'\n\nCode: zcoder\nS = 'r'\n\nCode: ycoder\nS = 'c'\n\nCode: ycoder\nS = 'f'\n\nCode: zcoder\nS = 'f'\n\nCode: ycoder\nS = 'c'\n\nCode: zcoder\nS = 'y'\n\nCode: ycoder\nS = 'r'\n\nCode: ycoder\nS = 'r'\n\nCode: zcoder\nS = 'y'\n\nCode: ycoder\nS = 'y'\n\nCode: zcoder\nS = 'd'\n\nCode: zcoder\nS = 'c'\n\nCode: zcoder\nS = 'c'\n\nCode: zcoder\nS = 'c'\n\nCode: ycoder\nS = 'r'\n\nCode: zcoder\nS = 'c'\n\nCode: ycoder\nS = 'r'\n\nCode: zcoder\nS = 'r'\n\nCode: zcoder\nS = 'r'\n\nCode: zcoder\nS = 'y'\n\nCode: zcoder\nS = 'y'\n\nCode: zcoder\nS = 'f'\n\nCode: zcoder\nS = 'd'\n\nCode: ycoder\nS = 'c'\n\nCode: zcoder\nS = 'y'\n\nCode: zcoder\nS = 'd'\n\nCode: zcoder\nS = 'c'\n\nCode: zcoder\nS = 'c'\n\nCode: zcoder\nS = 'f'\n\nCode: zcoder\nS = 'y'\n\nCode: zcoder\nS = 'f'\n\nCode: zcoder\nS = 'd'\n\nCode: zcoder\nS = 'f'\n\nCode: zcoder\nS = 'c'\n\nCode: ycoder\nS = 'y'\n\nCode: zcoder\nS = 'd'\n\nCode: zcoder\nS = 'f'\n\nCode: zcoder\nS = 'y'\n\nCode: ycoder\nS = 'c'\n\nCode: ycoder\nS = 'f'\n\nCode: ycoder\nS = 'r'\n\nCode: zcoder\nS = 'f'\n\nCode: zcoder\nS = 'r'\n\nCode: zcoder\nS = 'c'\n\nCode: zcoder\nS = 'f'\n\nCode: zcoder\nS = 'r'\n\nCode: zcoder\nS = 'r'\n\nCode: zcoder\nS = 'r'\n\nCode: zcoder\nS = 'r'\n\nCode: zcoder\nS = 'r'\n\nCode: zcoder\nS = 'r'\n\nCode: ycoder\nS = 'y'\n\nCode: zcoder\nS = 'c'\n\nCode: zcoder\nS = 'c'\n\nCode: ycoder\nS = 'c'\n\nCode: zcoder\nS = 'r'\n\nCode: zcoder\nS = 'c'\n\nCode: zcoder\nS = 'r'\n\nCode: zcoder\nS = 'c'\n\nCode: ycoder\nS = 'y'\n\nCode: zcoder\nS = 'd'\n\nCode: zcoder\nS = 'c'\n\nCode: zcoder\nS = 'c'\n\nCode: zcoder\nS = 'c'\n\nCode: zcoder\nS = 'r'\n\nCode: zcoder\nS = 'f'\n\nCode: zcoder\nS = 'f'\n\nCode: zcoder\nS = 'r'\n\nCode: zcoder\nS = 'r'\n\nCode: zcoder\nS = 'f'\n\nCode: zcoder\nS = 'r'\n\nCode: zcoder\nS = 'r'\n\nCode: zcoder\nS = 'r'\n\nCode: zcoder\nS = 'r'\n\nCode: ycoder\nS = 'y'\n\nCode: zcoder\nS = 'r'"
    },
    {
        "number": 4115,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    print(len(min(reversed(map(str.isupper, stdin)))) - 1)\n    return ''\n\n-----Sample Runtime-----\nRuntime: 72 ms (22.46%)\nMemory Usage: 19.9 MB (85.44%)\n\n-----Be Careful-----\nYou might be tempted to use a reverse Polish operator [O(n) for every character, n = len(stdin)]. But the palindromic strings are not identical.\n\n---Languages---\nPython 3.7\n\n---Problem Description---\nThis problem was asked by Google.\n\nGiven a string S and a pattern P, return the number of words in the string that match the pattern.\n\nThe pattern must be a valid regular expression, which means that the forward and backward slashes ('\\\\') must match each other.\n\nFor example, given the string '\\\\abba', the pattern could match the string 'abba', because the forward slash '\\\\' matches the 'a', 'b', and 'b' respectively, and the backward slash '\\\\' matches the 'a', 'b', and 'a' respectively, and the other two characters do not match.\n\n---Constraints---\n - 1 <= |P| <= 9\n - |S| = |P|\n\n---Notes---\nThe pattern must consist of lowercase English letters.\n\"\"\"\n\nimport re\n\ndef"
    },
    {
        "number": 4115,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    string = list(stdin)\n    def check(x):\n        for i in x:\n            if string[ord(i)-97].lower() == string[ord(i)-97].lower()[::-1].lower():\n                return True\n        return False\n    \n    def solve(x):\n        if x == 'o':\n            if check(string):\n                return 1\n        \n        for i in x:\n            if string[ord(i)-97].lower() == string[ord(i)-97].lower()[::-1].lower():\n                string[ord(i)-97] = 'o'\n                string[ord(i)-97] = string[ord(i)-97].replace(string[ord(i)-97].lower(),'')\n                if string[ord(i)-97].lower() == 'o':\n                    string[ord(i)-97] = string[ord(i)-97].replace(string[ord(i)-97].lower(),'')\n        if string[ord(x)-97].lower() == string[ord(x)-97].lower()[::-1].lower():\n            if string[ord(x)-97].lower() == 'o':\n                string[ord(x)-97] = string[ord(x)-97].replace(string[ord(x)-97].lower(),'')\n        return solve(string)\n    \n    return solve(string)\n'''\n\nimport string\n\ndef"
    },
    {
        "number": 4115,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def lcs(s, t, m, n):\n        if m == 0 or n == 0:\n            return 0\n        if s[m - 1] == t[n - 1]:\n            return 1 + lcs(s, t, m - 1, n - 1)\n        return max(lcs(s, t, m - 1, n), lcs(s, t, m, n - 1))\n    return lcs(stdin, stdin, len(stdin), len(stdin))\n\"\"\"\n\ndef"
    },
    {
        "number": 4115,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    palindromes = set()\n    \n    def is_palindrome(s):\n        for i in range(len(s) // 2):\n            if s[i]!= s[-(i + 1)]:\n                return False\n        return True\n    \n    for _ in range(int(input())):\n        s = input()\n        if is_palindrome(s):\n            palindromes.add(len(s))\n    return len(palindromes)\n\ndef"
    },
    {
        "number": 4115,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    data = []\n    for line in stdin.split():\n        data.append(line.strip().lower())\n    min_hugs = len(data)\n    for i in range(1, len(data)):\n        sub_string = data[i]\n        for j in range(i, len(data)):\n            sub_string = sub_string[:j] + sub_string[j+1:]\n            sub_string = sub_string.replace('o', '*')\n            if not is_palindromic(sub_string):\n                break\n            hugs = solution(sub_string)\n            if min_hugs > (hugs+1):\n                min_hugs = (hugs+1)\n    return min_hugs\n\ndef"
    },
    {
        "number": 4115,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(stdin) // 2)\n\ndef"
    },
    {
        "number": 4116,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    answer = 0\n    for i in range(10):\n        answer = answer * n + (n % 10)\n        n = (n // 10)\n    return str(answer)"
    },
    {
        "number": 4116,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    from math import prod\n    num = int(stdin)\n    answer = True\n    if num <= 9:\n        return answer\n    elif num % 10 == 0:\n        answer = False\n        return answer\n    else:\n        answer = True\n        while num > 9:\n            i = num // 10\n            num = num - i * 10\n            if i!= 0:\n                answer = False\n                return answer\n        answer = True\n        return answer\n\"\"\"\n\nclass Solution:\n    def canBeEqual(self, N: int) -> bool:\n        if N % 10 == 0:\n            return True\n        else:\n            return False\n\n    def solution(self, stdin: str) -> str:\n        num = int(stdin)\n        answer = True\n        if num <= 9:\n            return answer\n        elif num % 10 == 0:\n            answer = False\n            return answer\n        else:\n            answer = True\n            num = num - 10 * int(str(num)[1:])\n            if num % 10 == 0:\n                return answer\n            else:\n                answer = False\n                return answer\n"
    },
    {
        "number": 4116,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    if n >= k:\n        return \"No\"\n    product = 1\n    for i in range(1, n + 1):\n        product = product * i\n    return product\n"
    },
    {
        "number": 4116,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(1,10):\n        for j in range(1,10):\n            print(str(i) + \" x \" + str(j) + \" = \" + str(i * j))\n    return \"Yes\"\n\"\"\"\nclass Solution:\n    def solution(self, N):\n        if N == 0:\n            return 'No'\n        \n        x = str(N)\n        lst = []\n        lst.append(x[0])\n        lst.append(x[1])\n        i = 2\n        for j in range(2,len(x)):\n            lst.append(x[i])\n            lst.append(x[j])\n            i += 1\n        \n        for j in range(1,10):\n            lst.append(x[i])\n            lst.append(x[j])\n            i += 1\n        \n        return ''.join(lst)\n        \n        \n"
    },
    {
        "number": 4116,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    try:\n        N, N2 = map(int, stdin.split())\n        result = N * N2\n        print(\"Yes\" if result % 10 == 0 else \"No\")\n    except:\n        pass\n"
    },
    {
        "number": 4116,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    pass\n\"\"\"\n\nclass Solution:\n    def isNumber(self, s: str) -> bool:\n        x = 0\n        y = 0\n        for i in s:\n            if i.isdigit():\n                x += int(i) * 10 ** (len(s) - 1 - len(s) + 1 - i)\n            else:\n                return False\n        return x == 0"
    },
    {
        "number": 4116,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    import math\n    N = int(stdin)\n    if N <= 1 or N % 10!= 1:\n        return \"No\"\n    p = math.floor(math.sqrt(N))\n    if p % 2 == 1:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4116,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 10 == 0:\n        return 'Yes'\n    elif n % 10 == 1:\n        return 'No'\n    else:\n        return 'No'\n"
    },
    {
        "number": 4116,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n  return 'Yes' if N%2==0 else 'No'\n\n  pass\n"
    },
    {
        "number": 4116,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    result = []\n    for i in range(1, 10):\n        result.append(i * n)\n    if (n not in result):\n        return 'No'\n    return 'Yes'\n"
    },
    {
        "number": 4117,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    L = [0] + list(map(int, stdin.split()))\n    triples = set()\n    answer = []\n\n    def is_valid(i, j, k, cnt):\n        if j - i + 1 > cnt:\n            return\n        if L[i] > L[j] and L[k] > L[j] and L[j] - i > cnt:\n            cnt += 1\n            return\n        cnt = 1\n        if (i, j, k) in triples:\n            answer.append(str(cnt))\n        else:\n            triples.add((i, j, k))\n            is_valid(i, j, k, cnt)\n            triples.add((i, k, j))\n            is_valid(i, k, j, cnt)\n            triples.add((k, j, i))\n            is_valid(k, i, j, cnt)\n            triples.add((k, j, i))\n\n    is_valid(1, 2, 3, 0)\n    answer.sort()\n    print(' '.join(answer))\n    return\n-----Sample Output-----\n\n6\n3 4 7 5 6\n\n-----Sample Input-----\n5\n2 3 7 10 7\n\n-----Sample Output-----\n6\n"
    },
    {
        "number": 4117,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    L_n = int(stdin[0])\n    n = int(stdin[1])\n    L = list(map(int, stdin[2:]))\n    for i in range(L_n):\n        L[i] = L[i] ** 2\n    \n    for i in range(n):\n        L[i] = L[i] ** 2\n        if L[i] == 1:\n            for j in range(n):\n                if L[j] == L[i] ** 2:\n                    return str(j+1)\n    return \"No solution\"\n\n------Sample Output------\nThe following five triples (i, j, k) satisfy the conditions: (1, 3, 4), (1, 4, 5), (2, 3, 4), (2, 4, 5), and (3, 4, 5).\n\n-----Sample Input-----\n5\n4 4 9 7 5\n\n-----Sample Output-----\nNo solution\n\"\"\"\n\n\n\nn = int(input())\nL = list(map(int,input().split()))\n"
    },
    {
        "number": 4117,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    \"Using A* to solve the puzzle.\"\n    https://leetcode.com/problems/triple-solution/discuss/671669/Python-3-using-A*-A*-solution-with-explanation\n    \"\"\"\n    def solve(l: list):\n        \"\"\"\n        Possible solutions\n        For all i, j, k, we have l_i, l_j, l_k,\n        that satisfy both:\n        1. L_i and L_j are all different.\n        2. L_i, l_j, and L_k are all different.\n        3. L_i, l_j, and l_k are all different.\n        4. L_i, l_j, and L_k are all different.\n        5. l_i, l_j, and l_k are all different.\n        \"\"\"\n        if len(l) == 3:\n            return 1\n        if len(l) == 4:\n            return 2\n        if len(l) == 5:\n            return 3\n        if len(l) == 6:\n            return 4\n        if len(l) == 7:\n            return 5\n\n        triple = []\n        for i in range(1, len(l) + 1):\n            for j in range(1, i + 1):\n                for k in range(1, j + 1):\n                    triple.append(str(l[i - 1] + l[j - 1] + l[k - 1]))\n\n        if len(set(triple)) == 3:\n            return solve(l[:len(l) // 2]) + solve(l[len(l) // 2:])\n        else:\n            return solve(l[:len(l) // 3]) + solve(l[len(l) // 3:])\n\n    return solve(list(map(int, stdin.split())))\n"
    },
    {
        "number": 4117,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # find all possible combinations, one for each possible number.\n    N = int(stdin.split(' ')[0])\n    L = list(map(int, stdin.split(' ')[1:]))\n\n    # all combinations except for 0, 1, 2 (i.e. if 0, 1, 2, 3, 4, 5 are used) have a triangle.\n    # 0, 1, 2 => 1, 2, 3\n    # 1, 2, 3 => 3, 2, 1\n    # 2, 3, 4 => 4, 3, 2\n    # 3, 4, 5 => 5, 4, 3\n    # 4, 5 => 5, 4, 5\n\n    def recursive_triple(i: int, j: int, k: int) -> int:\n        if i == 0:\n            return 1 if j == 0 else 3 if k == 0 else 4\n        elif i == 1:\n            return 2 if j == 0 else 4 if k == 0 else 5\n        elif i == 2:\n            return 3 if j == 0 else 5 if k == 0 else 4\n        elif i == 3:\n            return 4 if j == 0 else 3 if k == 0 else 5\n        elif i == 4:\n            return 5 if j == 0 else 4 if k == 0 else 3\n        else:\n            return 5 if j == 0 else 4 if k == 0 else 3 if i == 3\n\n    # all possible numbers.\n    all_numbers = []\n    for i in range(N):\n        all_numbers.append(L[i])\n\n    # recursive\n    def combination_helper(i: int, combination: list, n: int) -> int:\n        # if all numbers are the same\n        if n == 1:\n            return 1\n        # if all numbers are equal\n        elif n == 0:\n            return 0\n\n        # if we have enough numbers\n        if len(combination) == n:\n            # if it's the first one\n            if i == 0:\n                # if the combination starts from a triangle and ends on a triangle with the same numbers\n                if combination[0] == 1 and combination[1] == 2:\n                    return combination_helper(i + 1, combination, 0) + combination_helper(i + 1, combination, n - 1)\n                else:\n                    # find the combination with the smallest triangle size\n                    return combination_helper(i + 1, combination, 0) + combination_helper(i + 1, combination, n - 1)\n\n            # if it's a triangle with two sides\n            elif combination[0] == 1 and combination[1] == 3:\n                return combination_helper(i + 1, combination, 0) + combination_helper(i + 1, combination, n - 1)\n            # if it's a triangle with three sides\n            elif combination[0] == 1 and combination[1] == 4:\n                return combination_helper(i + 1, combination, 0) + combination_helper(i + 1, combination, n - 1)\n\n            # if it's a triangle with a triangle with no sides\n            else:\n                # if it's a triangle with one side and the other one has two sides\n                if combination[0] == 1 and combination[1] == 2:\n                    return combination_helper(i + 1, combination, 0) + combination_helper(i + 1, combination, n - 1)\n                # if it's a triangle with two sides and one side has three sides\n                elif combination[0] == 1 and combination[1] == 3:\n                    return combination_helper(i + 1, combination, 0) + combination_helper(i + 1, combination, n - 1)\n\n                # if it's a triangle with three sides and one side has four sides\n                elif combination[0] == 1 and combination[1] == 4:\n                    return combination_helper(i + 1, combination, 0) + combination_helper(i + 1, combination, n - 1)\n\n                # if it's a triangle with three sides and one side has no sides\n                else:\n                    return combination_helper(i + 1, combination, 0) + combination_helper(i + 1, combination, n - 1)\n\n        # if the number of numbers is less than the number of combinations\n        else:\n            # if it's a triangle with two sides\n            if combination[0] == 1:\n                return combination_helper(i + 1, combination, 0) + combination_helper(i + 1, combination, n - 1)\n            # if it's a triangle with three sides\n            elif combination[0] == 1:\n                return combination_helper(i + 1, combination, 0) + combination_helper(i + 1, combination, n - 1)\n\n            # if it's a triangle with three sides\n            elif combination[0] == 1:\n                return combination_helper(i + 1, combination, 0) + combination_helper(i + 1, combination, n - 1)\n\n            # if it's a triangle with four sides\n            elif combination[0] == 1:\n                return combination_helper(i + 1, combination, 0) + combination_helper(i + 1, combination, n - 1)\n\n            # if it's a triangle with no sides\n            else:\n                return combination_helper(i + 1, combination, 0) + combination_helper(i + 1, combination, n - 1)\n\n    # all combinations between 0 and N\n    combinations = [\n        all_numbers[i] for i in range(N)\n    ]\n\n    # get all possible combinations and their sizes\n    def get_all_combinations(combinations: list) -> list:\n        all_combinations = []\n        for combination in combinations:\n            # all combinations for a triangle with two sides\n            if combination[0] == 1 and combination[1] == 2:\n                all_combinations.append(combination + combination[0])\n            # all combinations for a triangle with three sides\n            elif combination[0] == 1 and combination[1] == 3:\n                all_combinations.append(combination + combination[0])\n            # all combinations for a triangle with four sides\n            elif combination[0] == 1 and combination[1] == 4:\n                all_combinations.append(combination + combination[0])\n            # all combinations for a triangle with no sides\n            else:\n                all_combinations.append(combination + combination[0])\n\n        return all_combinations\n\n    # return the number of possible combinations for triangles with only three sides\n    return len(set(get_all_combinations(combinations)))\n"
    },
    {
        "number": 4117,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    N = int(stdin[0])\n    L_1 = int(stdin[1])\n    L_2 = int(stdin[2])\n    L_3 = int(stdin[3])\n    L_4 = int(stdin[4])\n    L_5 = int(stdin[5])\n    if L_1 < L_2:\n        return '0'\n    elif L_2 < L_3:\n        return '0'\n    elif L_3 < L_4:\n        return '0'\n    elif L_4 < L_5:\n        return '0'\n    else:\n        return '3'"
    },
    {
        "number": 4117,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    L = list(map(int, stdin.split()))\n    answer = 0\n    DP = [0]\n    DP.append(L[0] + L[1] + L[2])\n    DP.append(L[0] + L[1] + L[3] + L[4])\n    DP.append(L[1] + L[2] + L[3] + L[4])\n    DP.append(L[2] + L[3] + L[4] + L[5])\n    DP.append(L[3] + L[4] + L[5] + L[6])\n    DP.append(L[4] + L[5] + L[6] + L[7])\n    DP.append(L[5] + L[6] + L[7] + L[8])\n    DP.append(L[6] + L[7] + L[8] + L[9])\n    DP.append(L[7] + L[8] + L[9] + L[10])\n    DP.append(L[8] + L[9] + L[10] + L[11])\n    DP.append(L[9] + L[10] + L[11] + L[12])\n    DP.append(L[10] + L[11] + L[12] + L[13])\n    DP.append(L[11] + L[12] + L[13] + L[14])\n    DP.append(L[12] + L[13] + L[14] + L[15])\n    DP.append(L[13] + L[14] + L[15] + L[16])\n    DP.append(L[14] + L[15] + L[16] + L[17])\n    DP.append(L[15] + L[16] + L[17] + L[18])\n    DP.append(L[16] + L[17] + L[18] + L[19])\n    DP.append(L[17] + L[18] + L[19] + L[20])\n    DP.append(L[18] + L[19] + L[20] + L[21])\n    DP.append(L[19] + L[20] + L[21] + L[22])\n    DP.append(L[20] + L[21] + L[22] + L[23])\n    DP.append(L[21] + L[22] + L[23] + L[24])\n    DP.append(L[22] + L[23] + L[24] + L[25])\n    DP.append(L[23] + L[24] + L[25] + L[26])\n    DP.append(L[24] + L[25] + L[26] + L[27])\n    DP.append(L[25] + L[26] + L[27] + L[28])\n    DP.append(L[26] + L[27] + L[28] + L[29])\n    DP.append(L[27] + L[28] + L[29] + L[30])\n    DP.append(L[28] + L[29] + L[30] + L[31])\n    DP.append(L[29] + L[30] + L[31] + L[32])\n    DP.append(L[30] + L[31] + L[32] + L[33])\n    DP.append(L[31] + L[32] + L[33] + L[34])\n    DP.append(L[32] + L[33] + L[34] + L[35])\n    DP.append(L[33] + L[34] + L[35] + L[36])\n    DP.append(L[34] + L[35] + L[36] + L[37])\n    DP.append(L[35] + L[36] + L[37] + L[38])\n    DP.append(L[36] + L[37] + L[38] + L[39])\n    DP.append(L[37] + L[38] + L[39] + L[40])\n    DP.append(L[38] + L[39] + L[40] + L[41])\n    DP.append(L[39] + L[40] + L[41] + L[42])\n    DP.append(L[40] + L[41] + L[42] + L[43])\n    DP.append(L[41] + L[42] + L[43] + L[44])\n    DP.append(L[42] + L[43] + L[44] + L[45])\n    DP.append(L[43] + L[44] + L[45] + L[46])\n    DP.append(L[44] + L[45] + L[46] + L[47])\n    DP.append(L[45] + L[46] + L[47] + L[48])\n    DP.append(L[46] + L[47] + L[48] + L[49])\n    DP.append(L[47] + L[48] + L[49] + L[50])\n    DP.append(L[48] + L[49] + L[50] + L[51])\n    DP.append(L[49] + L[50] + L[51] + L[52])\n    DP.append(L[50] + L[51] + L[52] + L[53])\n    DP.append(L[51] + L[52] + L[53] + L[54])\n    DP.append(L[52] + L[53] + L[54] + L[55])\n    DP.append(L[53] + L[54] + L[55] + L[56])\n    DP.append(L[54] + L[55] + L[56] + L[57])\n    DP.append(L[55] + L[56] + L[57] + L[58])\n    DP.append(L[56] + L[57] + L[58] + L[59])\n    DP.append(L[57] + L[58] + L[59] + L[60])\n    DP.append(L[58] + L[59] + L[60] + L[61])\n    DP.append(L[59] + L[60] + L[61] + L[62])\n    DP.append(L[60] + L[61] + L[62] + L[63])\n    DP.append(L[61] + L[62] + L[63] + L[64])\n    DP.append(L[62] + L[63] + L[64] + L[65])\n    DP.append(L[63] + L[64] + L[65] + L[66])\n    DP.append(L[64] + L[65] + L[66] + L[67])\n    DP.append(L[65] + L[66] + L[67] + L[68])\n    DP.append(L[66] + L[67] +"
    },
    {
        "number": 4117,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    numbers = [int(s) for s in stdin[1:]]\n    \n    def is_triple_1(numbers):\n        return sum(map(lambda x: (x+1)*x*x, numbers)) % 1000000000 == 0\n    \n    def is_triple_2(numbers):\n        for i in range(len(numbers)-1):\n            for j in range(i+1, len(numbers)):\n                for k in range(j+1, len(numbers)):\n                    if (is_triple_1(numbers[i:j]) and is_triple_1(numbers[j:k])):\n                        return True\n        return False\n    \n    def is_triple_3(numbers):\n        for i in range(len(numbers)-2):\n            for j in range(i+1, len(numbers)-1):\n                for k in range(j+1, len(numbers)):\n                    if (is_triple_1(numbers[i:j]) and is_triple_1(numbers[j:k])):\n                        return True\n        return False\n        \n    triples = 0\n    \n    if is_triple_1(numbers):\n        triples += 1\n    if is_triple_2(numbers):\n        triples += 1\n    if is_triple_3(numbers):\n        triples += 1\n        \n    return str(triples)\n\n\"\"\"\nSolution 1:\n\"\"\"\ndef"
    },
    {
        "number": 4117,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    inputs = stdin.split()\n    N = int(inputs[0])\n    L = list(map(int,inputs[1].split()))\n    \n    cnt = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            for k in range(j+1, N):\n                if (L[i] > L[j] and L[j] > L[k]) or (L[i] > L[j] and L[k] > L[j]):\n                    cnt+=1\n    print(cnt)"
    },
    {
        "number": 4117,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    # define a dictionary to record the value of triangle's sides.\n    sides_dic = {}\n    # check for 3 numbers.\n    for i in range(1, n + 1):\n        for j in range(1, i + 1):\n            for k in range(1, i + 1):\n                if (i, j, k) in sides_dic:\n                    sides_dic[(i, j, k)] += 1\n                else:\n                    sides_dic[(i, j, k)] = 1\n    # count the number of sides.\n    sides_len = sum(sides_dic.values())\n\n    triple_count = 0\n    # check for 2 numbers, to make it a triangle.\n    if (1, sides_len) in sides_dic:\n        triple_count += sides_dic[(1, sides_len)] * (sides_dic[(1, sides_len)] - 1)\n\n    # check for 3 numbers to make it a triangle.\n    if (1, 2, 3) in sides_dic:\n        triple_count += sides_dic[(1, 2, 3)] * (sides_dic[(1, 2, 3)] - 1)\n    # check for 4 numbers to make it a triangle.\n    if (2, 3, 4) in sides_dic:\n        triple_count += sides_dic[(2, 3, 4)] * (sides_dic[(2, 3, 4)] - 1)\n\n    # check for 5 numbers to make it a triangle.\n    if (3, 4, 5) in sides_dic:\n        triple_count += sides_dic[(3, 4, 5)] * (sides_dic[(3, 4, 5)] - 1)\n    # check for 6 numbers to make it a triangle.\n    if (3, 4, 6) in sides_dic:\n        triple_count += sides_dic[(3, 4, 6)] * (sides_dic[(3, 4, 6)] - 1)\n\n    # check for 7 numbers to make it a triangle.\n    if (4, 5, 6) in sides_dic:\n        triple_count += sides_dic[(4, 5, 6)] * (sides_dic[(4, 5, 6)] - 1)\n    # check for 8 numbers to make it a triangle.\n    if (4, 5, 7) in sides_dic:\n        triple_count += sides_dic[(4, 5, 7)] * (sides_dic[(4, 5, 7)] - 1)\n    # check for 9 numbers to make it a triangle.\n    if (4, 5, 8) in sides_dic:\n        triple_count += sides_dic[(4, 5, 8)] * (sides_dic[(4, 5, 8)] - 1)\n    # check for 10 numbers to make it a triangle.\n    if (4, 5, 9) in sides_dic:\n        triple_count += sides_dic[(4, 5, 9)] * (sides_dic[(4, 5, 9)] - 1)\n    # check for 11 numbers to make it a triangle.\n    if (4, 5, 10) in sides_dic:\n        triple_count += sides_dic[(4, 5, 10)] * (sides_dic[(4, 5, 10)] - 1)\n\n    # check for 12 numbers to make it a triangle.\n    if (3, 4, 5) in sides_dic:\n        triple_count += sides_dic[(3, 4, 5)] * (sides_dic[(3, 4, 5)] - 1)\n    # check for 13 numbers to make it a triangle.\n    if (3, 4, 6) in sides_dic:\n        triple_count += sides_dic[(3, 4, 6)] * (sides_dic[(3, 4, 6)] - 1)\n    # check for 14 numbers to make it a triangle.\n    if (3, 4, 7) in sides_dic:\n        triple_count += sides_dic[(3, 4, 7)] * (sides_dic[(3, 4, 7)] - 1)\n    # check for 15 numbers to make it a triangle.\n    if (3, 4, 8) in sides_dic:\n        triple_count += sides_dic[(3, 4, 8)] * (sides_dic[(3, 4, 8)] - 1)\n    # check for 16 numbers to make it a triangle.\n    if (3, 4, 9) in sides_dic:\n        triple_count += sides_dic[(3, 4, 9)] * (sides_dic[(3, 4, 9)] - 1)\n    # check for 17 numbers to make it a triangle.\n    if (3, 4, 10) in sides_dic:\n        triple_count += sides_dic[(3, 4, 10)] * (sides_dic[(3, 4, 10)] - 1)\n    # check for 18 numbers to make it a triangle.\n    if (3, 4, 11) in sides_dic:\n        triple_count += sides_dic[(3, 4, 11)] * (sides_dic[(3, 4, 11)] - 1)\n    # check for 19 numbers to make it a triangle.\n    if (3, 4, 12) in sides_dic:\n        triple_count += sides_dic[(3, 4, 12)] * (sides_dic[(3, 4, 12)] - 1)\n\n    # check for 20 numbers to make it a triangle.\n    if (4, 5, 6) in sides_dic:\n        triple_count += sides_dic[(4, 5, 6)] * (sides_dic[(4, 5, 6)] - 1)\n    # check for 21 numbers to make it a triangle.\n    if (4, 5, 7) in sides_dic:\n        triple_count += sides_dic[(4, 5, 7)] * (sides_dic[(4, 5, 7)] - 1)\n    # check for 22 numbers to make it a triangle.\n    if (4, 5, 8) in sides_dic:\n        triple_count += sides_dic[(4, 5, 8)] * (sides_dic[(4, 5, 8)] - 1)\n    # check for 23 numbers to make it a triangle.\n    if (4, 5, 9) in sides_dic:\n        triple_count += sides_dic[(4, 5, 9)] * (sides_dic[(4, 5, 9)] - 1)\n    # check for 24 numbers to make it a triangle.\n    if (4, 5, 10) in sides_dic:\n        triple_count += sides_dic[(4, 5, 10)] * (sides_dic[(4, 5, 10)] - 1)\n    # check for 25 numbers to make it a triangle.\n    if (4, 5, 11) in sides_dic:\n        triple_count +="
    },
    {
        "number": 4117,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n\n    def check_triple(a, b, c):\n        if a+b<c or b+c<a or a+c<b:\n            return False\n        if a==b==c:\n            return True\n        return check_triple(a, c, b) or check_triple(b, a, c) or check_triple(c, a, b)\n        \n    for i in range(1, N+1):\n        for j in range(1, i+1):\n            for k in range(1, i):\n                if check_triple(i, j, k):\n                    return str(i)+\" \"+str(j)+\" \"+str(k)+\"=\"+str(i*j*k)\n    return \"N/A\""
    },
    {
        "number": 4118,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A = int(stdin[0])\n    B = int(stdin[1])\n    while A < B:\n        A *= 10\n    while A >= B:\n        A //= 10\n    return str(A)\n\"\"\"\n\ndef"
    },
    {
        "number": 4118,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A * B == 10:\n        return '10'\n    if A * B == -1:\n        return '-1'\n    return 'impossible'\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4118,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    answer = 1\n    A, B = [int(i) for i in stdin.split()]\n    while A < B:\n        A, B = A * 10 + B, A % 10\n        answer *= 10\n    return str(answer)"
    },
    {
        "number": 4118,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    while a!= b:\n        if b == a:\n            print(-1)\n            return\n        a, b = b, a % b\n    print(a)\n    return\n\n2 2\n\n2 4\n\n2 5\n\"\"\""
    },
    {
        "number": 4118,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    solution = 1\n    while A!= B:\n        if A > B:\n            A -= B\n        elif A < B:\n            B -= A\n        else:\n            return -1\n        solution += 1\n    return str(solution)"
    },
    {
        "number": 4118,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    if not stdin:\n        return \"\"\n    lst = list(map(int, stdin.split()))\n    for i in range(len(lst)):\n        if i < len(lst) - 1:\n            lst[i] = lst[i] * lst[i + 1]\n    return str(sum(lst))"
    },
    {
        "number": 4118,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    \n    while A >= B:\n        A //= 10\n        B //= 10\n    \n    if A * B == 10:\n        return '10'\n    \n    if A * B % 10 > 9:\n        return '-1'\n    \n    return str(A * B % 10)\n"
    },
    {
        "number": 4118,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B = list(map(int, stdin.split()))\n    \n    def fib(n):\n        if n == 1 or n == 2:\n            return 1\n        return fib(n-1) + fib(n-2)\n    \n    result = fib(B-A+1)\n    if result == 10:\n        print(-1)\n    else:\n        print(result)\n"
    },
    {
        "number": 4118,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return f'{int(stdin[0])} {int(stdin[1])}'\n\ndef"
    },
    {
        "number": 4118,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    x = int(stdin.split()[1])\n    count = 0\n    if n % 2 == 0 and x % 2 == 0:\n        count += 1\n    else:\n        count = -1\n    return str(count)\n"
    },
    {
        "number": 4119,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n  N, M = list(map(int, stdin.split()))\n  x = list(map(int, stdin.split()))\n  answer = 0\n  for x_i in x:\n    answer += 1 if x_i == 1 else 0\n  print(answer)\n  return str(answer)\n"
    },
    {
        "number": 4119,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n        moves = []\n        n, m, x = map(int, stdin.split())\n        for i in range(n):\n            for j in range(m):\n                if j % 2 == 0:\n                    moves.append(x + j + 1)\n                else:\n                    moves.append(x - j - 1)\n        return str(min(moves))\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4119,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # line breaks are very important\n    # so fix it\n    # if len(stdin) == 0:\n    #     return ''\n    # return stdin[0]\n    n, m = [int(i) for i in stdin.split()]\n    # print(n, m)\n    x_1, x_2 = [int(i) for i in range(n-1, -1, -1)]\n    x_1, x_2 = x_1 + 1, x_2 + 1\n    # print(x_1, x_2)\n    x_list = [x_1, x_2, x_1-1, x_2-1]\n    # print(x_list)\n    n_list = [i+1 for i in range(m)]\n    # print(n_list)\n    ans = 0\n    for i in range(1, m+1):\n        if i not in x_list:\n            ans += 1\n    print(ans)\n    return str(ans)\n'''\ndef"
    },
    {
        "number": 4119,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    X_1 = list(map(int, stdin.split()))\n    X_2 = X_1[:]\n    X_2.reverse()\n    X_1.reverse()\n    X_2.reverse()\n    move = 0\n    while X_1 and X_2:\n        x_1, x_2 = X_1.pop(), X_2.pop()\n        if x_1 > x_2:\n            move += 1\n        elif x_1 < x_2:\n            move += 1\n        X_1.append(x_1)\n        X_2.append(x_2)\n    return str(move)\n"
    },
    {
        "number": 4119,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    M, N = map(int, stdin.split())\n    X_1, X_2, X_3, X_4 = map(int, stdin.split())\n    X_5, X_6, X_7, X_8, X_9 = map(int, stdin.split())\n    X_1 = X_1 + 1\n    X_2 = X_2 + 2\n    X_3 = X_3 + 3\n    X_4 = X_4 + 4\n    X_5 = X_5 + 5\n    X_6 = X_6 + 6\n    X_7 = X_7 + 7\n    X_8 = X_8 + 8\n    X_9 = X_9 + 9\n    P1 = [X_1, X_2, X_3, X_4]\n    P2 = [X_5, X_6, X_7, X_8]\n    P3 = [X_9, X_1, X_2, X_4]\n    P4 = [X_1, X_5, X_7, X_3]\n    P5 = [X_1, X_2, X_3, X_6]\n    P6 = [X_1, X_4, X_5, X_8]\n    P7 = [X_1, X_2, X_4, X_9]\n    P8 = [X_3, X_5, X_7, X_9]\n    P9 = [X_4, X_6, X_8, X_9]\n    P10 = [X_7, X_9, X_1, X_5]\n    P11 = [X_6, X_8, X_3, X_9]\n    P12 = [X_9, X_1, X_4, X_7]\n    P13 = [X_9, X_3, X_5, X_7]\n    P14 = [X_9, X_4, X_8, X_7]\n    P15 = [X_1, X_3, X_5, X_9]\n    P16 = [X_4, X_5, X_8, X_7]\n    P17 = [X_5, X_7, X_9, X_1]\n    P18 = [X_8, X_9, X_1, X_4]\n    P19 = [X_7, X_9, X_3, X_5]\n    P20 = [X_9, X_1, X_4, X_7]\n    P21 = [X_7, X_9, X_3, X_5]\n    P22 = [X_8, X_3, X_5, X_7]\n    P23 = [X_9, X_1, X_4, X_5]\n    P24 = [X_1, X_2, X_6, X_8]\n    P25 = [X_2, X_3, X_7, X_9]\n    P26 = [X_4, X_6, X_8, X_9]\n    P27 = [X_6, X_8, X_9, X_1]\n    P28 = [X_9, X_1, X_3, X_5]\n    P29 = [X_1, X_3, X_5, X_7]\n    P30 = [X_4, X_7, X_8, X_9]\n    P31 = [X_7, X_8, X_9, X_1]\n    P32 = [X_8, X_9, X_1, X_4]\n    P33 = [X_9, X_1, X_4, X_7]\n    P34 = [X_1, X_2, X_4, X_9]\n    P35 = [X_1, X_2, X_4, X_7]\n    P36 = [X_1, X_2, X_3, X_5]\n    P37 = [X_2, X_3, X_5, X_7]\n    P38 = [X_3, X_4, X_5, X_8]\n    P39 = [X_5, X_7, X_8, X_9]\n    P40 = [X_8, X_9, X_1, X_4]\n    P41 = [X_9, X_1, X_4, X_7]\n    P42 = [X_1, X_4, X_7, X_9]\n    P43 = [X_4, X_7, X_9, X_1]\n    P44 = [X_7, X_9, X_1, X_4]\n    P45 = [X_9, X_1, X_4, X_7]\n    P46 = [X_1, X_3, X_7, X_9]\n    P47 = [X_3, X_7, X_9, X_1]\n    P48 = [X_1, X_2, X_4, X_7]\n    P49 = [X_2, X_4, X_7, X_9]\n    P50 = [X_4, X_7, X_9, X_1]\n    P51 = [X_7, X_9, X_1, X_4]\n    P52 = [X_9, X_1, X_4, X_7]\n    P53 = [X_1, X_5, X_8, X_9]\n    P54 = [X_5, X_8, X_9, X_1]\n    P55 = [X_8, X_9, X_1, X_5]\n    P56 = [X_9, X_1, X_5, X_8]\n    P57 = [X_1, X_6, X_7, X_9]\n    P58 = [X_6, X_7, X_9, X_1]\n    P59 = [X_7, X_9, X_1, X_6]\n    P60 = [X_9, X_1, X_6, X_7]\n    P61 = [X_1, X_6, X_7, X_9]\n    P62 = [X_1, X_5, X_7, X_9]\n    P63 = [X_5, X_7, X_9, X_1]\n    P64 = [X_7, X_9, X_1, X_5]\n    P65 = [X_9, X_1, X_5, X_7]\n    P66 = [X_1, X_5, X_7, X_9]\n    P67 = [X_5, X_7, X_9, X_1]\n    P68 = [X_7, X_9,"
    },
    {
        "number": 4119,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    x = list(map(int, stdin.split()))\n    X = set()\n    for i in range(n):\n        for j in range(m):\n            if x[i] == 1:\n                X.add((i, j))\n            elif x[i] == 2:\n                X.add((i + 1, j))\n            elif x[i] == 3:\n                X.add((i - 1, j))\n            elif x[i] == 4:\n                X.add((i, j + 1))\n            elif x[i] == 5:\n                X.add((i, j - 1))\n    minimum = len(list(X)) * 2 + len(set(range(min(X))) - X)\n    print(minimum)\n    return str(minimum)\n\n-------------------------------\n\n\n\nimport collections\n\ndef"
    },
    {
        "number": 4119,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(i) for i in stdin.split()]\n    X_1, X_2,..., X_M = [int(i) for i in stdin.split()]\n    visited = set()\n    moves = 0\n\n    # make a set of all possible coordinates.\n    for i in range(1, N+1):\n        for j in range(1, N+1):\n            if (i, j) not in visited:\n                visited.add((i, j))\n                moves += 1\n                if i == X_1:\n                    visited.add((X_2, j))\n                if i == X_2:\n                    visited.add((X_1, j))\n                if i == X_1 + j:\n                    visited.add((i, X_2))\n                if i == X_1 - j:\n                    visited.add((i, X_2))\n                if i == X_2 + j:\n                    visited.add((X_1, i))\n                if i == X_2 - j:\n                    visited.add((X_1, i))\n\n    # check if the square will be visited at least once,\n    # if so, make the square as visited\n    if len(visited) > 1:\n        visited.clear()\n        for i in range(M, -1, -1):\n            visited.add((X_1 + i, X_2 + i))\n            visited.add((X_1 + i, X_2 - i))\n            visited.add((X_1 - i, X_2 + i))\n            visited.add((X_1 - i, X_2 - i))\n            visited.add((X_1 - i, X_2 + i))\n            visited.add((X_1 - i, X_2 - i))\n\n    return str(moves)\n\nSolution:\n\nBreadth First Search:\n\nBreadth First Search is a data structure which is based on BFS.\n\nThe function will take in a node as an argument.\nIt will return the coordinates.\n\n\"\"\"\n\nclass Node(object):\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n        self.parent = None\n        self.g = 0\n        self.h = 0\n        self.f = 0\n\nclass Graph(object):\n    def __init__(self):\n        self.nodes = []\n\n    def addNode(self, node):\n        self.nodes.append(node)\n\n    def removeNode(self, node):\n        self.nodes.remove(node)\n\n    def getNode(self, node):\n        return self.nodes[node]\n\n    def checkNode(self, node):\n        if node in self.nodes:\n            return True\n        else:\n            return False\n\n    def calculateF(self, node):\n        self.nodes[node].f = self.nodes[node].g + self.nodes[node].h\n        # calculate for each node of the graph\n        for i in range(len(self.nodes)):\n            if self.nodes[i].checkNode(node):\n                self.nodes[i].f = self.nodes[node].g + self.nodes[node].h\n\ndef"
    },
    {
        "number": 4119,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x, m = map(int, stdin.split())\n    for i in range(x):\n        x, y = map(int, stdin.split())\n        if x!= y:\n            print(1)\n            return 1\n    print(0)\n    return 0\n"
    },
    {
        "number": 4119,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(i) for i in stdin.split()]\n    X = [i for i in range(1, N + 1)]\n    M = N * M\n    for _ in range(M):\n        x, y = [int(i) for i in stdin.split()]\n        X[x + 1] = y\n    \n    answer = 0\n    for k in range(N):\n        for i in range(M):\n            if k + X[i] - 1 >= 0:\n                answer += 1\n            if k + X[i] - 1 < N:\n                answer += 1\n            if k + X[i] - 1 >= 0 and k + X[i] < N:\n                answer += 1\n    return str(answer)\n\n\"\"\"\ndef"
    },
    {
        "number": 4119,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n  N, M = map(int, stdin.split())\n  X = [tuple(map(int, input().split())) for _ in range(M)]\n  Q = []\n  for i in range(N):\n    if X[i] not in Q:\n      Q.append(X[i])\n  answer = 0\n  Q.sort()\n  for x in Q:\n    X[x] = 1\n    for y in range(x):\n      answer += 1\n      X[y] = 11\n      for z in range(x, x+M-1):\n        X[z] = 11\n        answer += 1\n        X[z+1] = 11\n    for y in range(x, x+M):\n      X[y] = 2\n      answer += 1\n  return str(answer)\n\n'''\n    https://www.geeksforgeeks.org/minimum-number-of-moves-to-reach-objective-solution/\n    https://www.w3resource.com/python-exercises/python-basic-exercises.php?id=525\n    https://www.youtube.com/watch?v=FXq8gIWT0Yc\n'''\n"
    },
    {
        "number": 4120,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    m = int(stdin[n - 1])\n    k = int(stdin[n - 2])\n\n    if m > k:\n        m, k = k, m\n\n    if m == 1 and k == 1:\n        return '0'\n    elif k == 1:\n        return '0'\n\n    ways = []\n    for i in range(1, k + 1):\n        ways.append(str(i * (i - 1)))\n\n    ways = sorted(set(ways), reverse=True)\n\n    for i in range(m - 1):\n        ways.append(str(i + 1) + '0' + ways[i])\n        ways.append(str(i + 1) + '0' + ways[i])\n        ways.append(str(i + 1) + '0' + ways[i])\n\n    return '0' + ''.join(ways)\n"
    },
    {
        "number": 4120,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    cities = [int(stdin) for _ in range(n)]\n    cities.sort()\n    count = 0\n    for i in range(1, len(cities) - 1):\n        for j in range(i + 1, len(cities)):\n            if cities[i]!= cities[j]:\n                count += 1\n    return str(count)\n\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= m <= 10^6\n1 <= k <= 10^6\nstdin.length == k\n1 <= a_i <= b_i <= n\na_i!= b_i\na_i!= i\na_i < b_i\nstdin.length <= k\n1 <= t <= 10^6\n\n-----Brute Force-----\nTime limit exceeded\n"
    },
    {
        "number": 4120,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    maps = [[] for _ in range(n)]\n    for i in range(m):\n        a, b = map(int, stdin.split())\n        maps[a-1].append(b-1)\n        maps[b-1].append(a-1)\n    answer = [1] * n\n    for i in range(1, n):\n        for j in range(len(maps[i])):\n            if maps[i][j]!= j:\n                answer[j] = 0\n    if len(answer) == m:\n        return ''.join(map(str, answer))\n    else:\n        return ''.join(map(str, answer[:m]))"
    },
    {
        "number": 4120,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    b_set = [0]*n\n    d_set = [0]*n\n    t = 0\n    for _ in range(m):\n        a, b = map(int, stdin.split())\n        b_set[b-1] = 1\n    for _ in range(m):\n        a, b = map(int, stdin.split())\n        d_set[b-1] = 1\n    \n    for i in range(n):\n        for j in range(n):\n            if b_set[j] and d_set[i] == 0:\n                t += 1\n                if j == n-1:\n                    print(t)\n                    return t\n                for j in range(i+1, n):\n                    if b_set[j] and d_set[i] == 0:\n                        print(t, j)\n                        return t\n                    for k in range(n):\n                        if b_set[k] and d_set[j] == 0:\n                            print(t, k)\n                            return t\n    print(t)\n    return t\n    pass\n\ndef"
    },
    {
        "number": 4120,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.strip())\n\n    def print_ways(options: list):\n        if len(options) == 0:\n            return\n        print_ways(options[1:])\n        print(options[0])\n        \n    def print_ways_rec(options: list, start: int):\n        if len(options) == 0:\n            return\n        print_ways(options[1:])\n        print(options[0])\n        print_ways_rec(options[1:], start+1)\n    \n    print_ways_rec([], 0)\n    return '\\n'.join(['\\n'.join(x) for x in [str(i) for i in range(t)]])\n    \n\n----Code Execution----\n\nimport sys\nprint(solution(sys.stdin.read()))\n"
    },
    {
        "number": 4120,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    if m < n or m < k or k < 1 or m < k:\n        return ''\n\n    cities = [0] * n\n    for i in range(1, n):\n        cities[i] = cities[i - 1] + m - 1\n    cities.append(n)\n    cities.sort()\n\n    roads = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            roads.append((i, j))\n    roads.sort(key=lambda x: x[1])\n    roads.sort(key=lambda x: x[0])\n    for i in range(k):\n        road = roads[i]\n        if len(set(cities[road[0]])) == 1:\n            print(len(set(cities[road[0]])))\n            continue\n        for j in range(k):\n            if len(set(cities[j])) == 1:\n                print(len(set(cities[j])))\n                continue\n        print(''.join(map(str, cities[road[0]])))\n        return ''.join(map(str, cities[road[0]]))\n\n    return ''"
    },
    {
        "number": 4120,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin[0])\n    n = int(stdin[1])\n    k = int(stdin[2])\n    if k > (n * (n - 1) / 2):\n        return 0\n    total = 0\n    for _ in range(k):\n        total += (n - 1) * 2\n    roads = [[] for _ in range(n)]\n    n_roads = 0\n    for i in range(n):\n        roads[i] = list(map(int, stdin[i + 1].split(' ')))\n        n_roads += roads[i][0]\n    if n_roads >= k:\n        return 0\n    while len(roads) > 0:\n        total += n_roads\n        for i in range(n):\n            if not roads[i][0]:\n                roads[i] = [1] + roads[i] + [0]\n            else:\n                roads[i] = [0] + roads[i] + [1]\n        n_roads = 0\n        for i in range(n):\n            if not roads[i][0]:\n                n_roads += 1\n            else:\n                n_roads += len(roads[i])\n        roads.pop()\n    answer = str(total - n_roads)\n    return answer\n\nTest Cases\nInput\n4 4 3\n1 2\n2 3\n1 4\n4 3\n2 4\n1 3\n\nOutput\n1\n101001\n\nInput\n5 6 2\n1 2\n1 3\n2 4\n2 5\n3 4\n3 5\n2 4\n3 5\n\nOutput\n1\n111100\n\nInput\n5 6 2\n1 2\n1 3\n2 4\n2 5\n3 4\n3 5\n4 4\n4 5\n\nOutput\n2\n111100\n\nInput\n4 5 3\n1 2\n1 3\n2 4\n2 5\n\nOutput\n2\n111100\n"
    },
    {
        "number": 4120,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    m = int(stdin.strip())\n    k = int(stdin.strip())\n    distances = set()\n\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            for k in range(1, m+1):\n                distances.add(k+1)\n                distances.add(k-1)\n                distances.add(k-i)\n                distances.add(i-k)\n                distances.add(i-j)\n\n    distances = sorted(distances)\n    print(len(distances))\n    return \",\".join(map(str, distances))\n"
    },
    {
        "number": 4120,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    road = []\n    for _ in range(n):\n        road.append(list(map(int, stdin.split())))\n\n    answer = 0\n    count = 0\n    for k in range(1, m + 1):\n        count += len(set(road[0]) - set(road[1]))\n        for i in range(1, n - 1):\n            if set(road[i])!= set(road[0]) and set(road[i])!= set(road[1]) and len(set(road[i]) - set(road[0])) + len(set(road[0]) - set(road[1])) <= k:\n                answer += 1\n                break\n\n    print(answer)\n    return answer\n\n-----Constraints-----\n1 <= stdin.length <= 300\n1 <= n, m, k <= 10^5\n\nTime Limit: 50 ms\nMemory Limit: 12 MB\n\nExample 1:\n\nInput\n3 3\n2 2\n2 3\n2 4\n\nOutput\n2\n1110\n\nExample 2:\n\nInput\n1 2\n1 2\n2 3\n\nOutput\n1\n1110\n\nExample 3:\n\nInput\n1 2\n1 2\n2 3\n\nOutput\n0\n\nExplanation\n\nSince all roads are part of the same set, it is enough to choose two roads.\n\nInput\n3 2\n1 2\n2 3\n\nOutput\n1\n1010\n\nInput\n5 6 2\n1 2\n1 3\n2 4\n2 5\n3 4\n3 5\n\nOutput\n1\n111100\n\n\"\"\"\nclass Solution:\n    def kClosest(self, points: List[List[int]], K: int) -> List[List[int]]:\n        \n        def calc_distance(a, b):\n            return abs(a[0] - b[0]) + abs(a[1] - b[1])\n        \n        def get_min_dist(points, k):\n            return sorted(points, key = calc_distance)[:k]\n        \n        distance = get_min_dist(points, K)\n        \n        return distance[0]"
    },
    {
        "number": 4120,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    k = m\n    if n == 1:\n        print(0)\n        return\n    for i in range(m):\n        for j in range(i + 1, m):\n            k = min(k, (n - 1) * (i + 1) + (j + 1))\n            if k < n * (i + 1) + (j + 1):\n                break\n    print(k)\n\n-----Constraints-----\n1 <= n <= 10^4\n1 <= m <= 10^6\n1 <= k <= 10^6\n\n[input]\n\n(a)  a is a positive integer.\n\n(b)  a + b is a positive integer.\n\n\n[output]\n\n(a)  a is a positive integer.\n\n(b)  a + b is a positive integer.\n\n------Dynamic-----\nn = m = 2, k = 1\n\n---Time---\nIn [1]: n, m = map(int, input().split())\n\n---Expected Output---\n\nIn [2]: n, m = 4, 6\n\nOut[2]:\n2\n\nIn [3]: n, m = 5, 3\n\nOut[3]:\n5\n\nIn [4]: n, m = 2, 3\n\nOut[4]:\n3\n\nIn [5]: n, m = 3, 1\n\nOut[5]:\n1\n\nIn [6]: n, m = 2, 1\n\nOut[6]:\n2\n\nIn [7]: n, m = 1, 1\n\nOut[7]:\n1\n\nIn [8]: n, m = 1, 1\n\nOut[8]:\n1\n\nIn [9]: n, m = 1, 1\n\nOut[9]:\n1\n\nIn [10]: n, m = 1, 1\n\nOut[10]:\n1\n\nIn [11]: n, m = 2, 1\n\nOut[11]:\n2\n\nIn [12]: n, m = 1, 1\n\nOut[12]:\n1\n\nIn [13]: n, m = 1, 1\n\nOut[13]:\n1\n\nIn [14]: n, m = 1, 1\n\nOut[14]:\n1\n\nIn [15]: n, m = 2, 1\n\nOut[15]:\n1\n\nIn [16]: n, m = 2, 1\n\nOut[16]:\n3\n\nIn [17]: n, m = 2, 1\n\nOut[17]:\n1\n\nIn [18]: n, m = 2, 1\n\nOut[18]:\n1\n\nIn [19]: n, m = 1, 1\n\nOut[19]:\n1\n\nIn [20]: n, m = 2, 1\n\nOut[20]:\n1\n\nIn [21]: n, m = 1, 1\n\nOut[21]:\n1\n\nIn [22]: n, m = 1, 1\n\nOut[22]:\n1\n\nIn [23]: n, m = 2, 1\n\nOut[23]:\n2\n\nIn [24]: n, m = 2, 1\n\nOut[24]:\n3\n\nIn [25]: n, m = 2, 1\n\nOut[25]:\n3\n\nIn [26]: n, m = 2, 1\n\nOut[26]:\n3\n\nIn [27]: n, m = 1, 1\n\nOut[27]:\n1\n\nIn [28]: n, m = 1, 1\n\nOut[28]:\n1\n\nIn [29]: n, m = 1, 1\n\nOut[29]:\n1\n\nIn [30]: n, m = 2, 1\n\nOut[30]:\n1\n\nIn [31]: n, m = 2, 1\n\nOut[31]:\n1\n\nIn [32]: n, m = 2, 1\n\nOut[32]:\n3\n\nIn [33]: n, m = 2, 1\n\nOut[33]:\n1\n\nIn [34]: n, m = 2, 1\n\nOut[34]:\n2\n\nIn [35]: n, m = 1, 1\n\nOut[35]:\n1\n\nIn [36]: n, m = 1, 1\n\nOut[36]:\n1\n\nIn [37]: n, m = 1, 1\n\nOut[37]:\n1\n\nIn [38]: n, m = 1, 1\n\nOut[38]:\n1\n\nIn [39]: n, m = 2, 1\n\nOut[39]:\n2\n\nIn [40]: n, m = 2, 1\n\nOut[40]:\n1\n\nIn [41]: n, m = 2, 1\n\nOut[41]:\n1\n\nIn [42]: n, m = 2, 1\n\nOut[42]:\n1\n\nIn [43]: n, m = 1, 1\n\nOut[43]:\n1"
    },
    {
        "number": 4121,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin)\n    \n    if n == 0:\n        return \"NO\"\n    elif len(a) > 2**n:\n        return \"NO\"\n    elif n <= 10:\n        return str(n)\n    \n    curr_height = 0\n    max_height = 0\n    next_height = 0\n    \n    for height in a:\n        curr_height += height\n        next_height = curr_height % 2\n        \n        if next_height:\n            curr_height += 1\n        \n        if curr_height > max_height:\n            max_height = curr_height\n    \n    if curr_height == max_height:\n        return \"YES\"\n    \n    return \"NO\"\n\n----------------------------------------------------------------------------------------------------------------------\n\nprint(\"Example 1\")\nprint(\"Input : \")\nprint(\"n = 3\")\nprint(\"Input : \")\nprint(\"n = 10\")\nprint(\"Output : \")\nprint(\"NO\")\n\nprint(\"Exception : \")\nprint(\"No\")\n\nprint(\"Example 2\")\nprint(\"Input : \")\nprint(\"n = 3\")\nprint(\"Input : \")\nprint(\"n = 2\")\nprint(\"Output : \")\nprint(\"YES\")\n\nprint(\"Exception : \")\nprint(\"Yes\")\n\nprint(\"Example 3\")\nprint(\"Input : \")\nprint(\"n = 3\")\nprint(\"Input : \")\nprint(\"n = 5\")\nprint(\"Output : \")\nprint(\"YES\")\n\nprint(\"Exception : \")\nprint(\"No\")\n\nprint(\"Example 4\")\nprint(\"Input : \")\nprint(\"n = 3\")\nprint(\"Input : \")\nprint(\"n = 3\")\nprint(\"Output : \")\nprint(\"NO\")\n\nprint(\"Exception : \")\nprint(\"No\")\n\nprint(\"Example 5\")\nprint(\"Input : \")\nprint(\"n = 3\")\nprint(\"Input : \")\nprint(\"n = 5\")\nprint(\"Output : \")\nprint(\"YES\")\n\nprint(\"Exception : \")\nprint(\"No\")\n\nprint(\"Example 6\")\nprint(\"Input : \")\nprint(\"n = 3\")\nprint(\"Input : \")\nprint(\"n = 3\")\nprint(\"Input : \")\nprint(\"Input : \")\nprint(\"Output : \")\nprint(\"No\")\n"
    },
    {
        "number": 4121,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    height = list(map(int, stdin.strip().split()))\n    height.sort()\n    parts = len(height)\n    result = \"YES\"\n    \n    if parts == 1:\n        result = \"NO\"\n    else:\n        for i in range(parts):\n            for j in range(i+1,parts):\n                if height[i] + height[j] == height[i] + height[j] or height[i] + height[j] == height[j] + height[i]:\n                    result = \"YES\"\n                    break\n                elif height[i] + height[j] < height[j] + height[i]:\n                    result = \"NO\"\n                    break\n        return result\n    \n\ndef"
    },
    {
        "number": 4121,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    wall = [int(i) for i in stdin.strip().split(\" \")]\n    height = wall.pop(0)\n    n = wall.pop(0)\n    result = \"\"\n    for i in range(n):\n        result += \" \"*height\n        height = wall.pop(0)\n        result += \" \"*height\n    result += \" \"*height*n\n    return result\n\n\nOutput\nYES\n\nInput\n2\n3 5\n\nOutput\nNO\n\nInput\n1\n5 3\n\nOutput\nYES\n\nInput\n1\n1 1 1 1 1\n\nOutput\nNO\n\"\"\"\n\ndef"
    },
    {
        "number": 4121,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin.strip())\n    parts = []\n    height = []\n    \n    for _ in range(n):\n        parts.append(list(map(int, stdin.strip().split())))\n        height.append(parts[-1][-1])\n    \n    return \"YES\" if all(height == 2 * x for x in height[:-1]) or all(height == 2 * x for x in height[1:]) else \"NO\"\n"
    },
    {
        "number": 4121,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    b = a[::2] + a[1::2]\n    res = \"\"\n    for i in b:\n        for j in range(i):\n            res += \"0\"\n    return res"
    },
    {
        "number": 4121,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    array = []\n    for i in range(n):\n        a, b = map(int, stdin.split())\n        array.append((a, b))\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if array[i][0] == array[j][0] and array[i][1] == array[j][1]:\n                array[i], array[j] = array[j], array[i]\n                break\n    for i in range(n):\n        if array[i][1]!= array[i][0]:\n            return \"NO\"\n    return \"YES\"\n\nn = int(input())\na = list(map(int, input().split()))\n\nprint(solution(str(n) + \" \" + str(a)))\n\n\n\n---16-5-2014:\n\ndef"
    },
    {
        "number": 4121,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES'\n\"\"\"\n\ndef"
    },
    {
        "number": 4121,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    bricks = [i for i in range(n)]\n    ans = [a[i] if a[i] < n else n-a[i] for i in range(n)]\n    for i in range(n):\n        for j in range(a[i], n):\n            if a[j] == a[i]:\n                ans[i] += ans[j]\n            elif a[j] > n:\n                break\n    for i in range(n):\n        for j in range(a[i], n):\n            if a[j] == a[i]:\n                ans[i] += ans[j]\n            elif a[j] < n:\n                break\n    for i in range(n):\n        for j in range(a[i], n):\n            if a[j] < n:\n                break\n    for i in range(n):\n        for j in range(a[i], n):\n            if a[j] < n:\n                break\n    for i in range(n):\n        for j in range(a[i], n):\n            if a[j] < n:\n                break\n    return 'YES' if ans == list(range(1, n+1)) else 'NO'\n"
    },
    {
        "number": 4121,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    \n    def is_valid(a, b):\n        if a < b or a + 1 > b or b + 1 > a:\n            return False\n        else:\n            return True\n        \n    def is_valid_wall(wall):\n        for i in range(N):\n            for j in range(M):\n                if wall[i][j]!= 0 and wall[i][j] == wall[i + 1][j]:\n                    return False\n                if wall[i][j]!= wall[i][j + 1] and wall[i][j] == wall[i][j - 1]:\n                    return False\n                if wall[i][j]!= wall[i + 1][j + 1] and wall[i][j] == wall[i - 1][j - 1]:\n                    return False\n        return True\n    \n    wall = []\n    for i in range(N):\n        a = [list(map(int, stdin.split())) for j in range(M)]\n        wall.append(a)\n        \n    if is_valid_wall(wall) == False:\n        return 'NO'\n    \n    s = 0\n    e = 0\n    \n    for i in range(N):\n        for j in range(M):\n            if wall[i][j]!= 0 and wall[i][j] == wall[i][j + 1] and wall[i][j + 1] == wall[i][j - 1]:\n                s += 2\n            if wall[i][j]!= wall[i][j + 1] and wall[i][j] == wall[i][j - 1] and wall[i][j - 1] == wall[i][j + 1]:\n                s += 1\n            if wall[i][j]!= wall[i + 1][j] and wall[i][j] == wall[i - 1][j] and wall[i - 1][j] == wall[i + 1][j]:\n                s += 1\n            if wall[i][j]!= wall[i - 1][j] and wall[i][j] == wall[i + 1][j] and wall[i + 1][j] == wall[i - 1][j]:\n                s += 1\n            if wall[i][j]!= wall[i + 1][j + 1] and wall[i][j] == wall[i][j - 1] and wall[i][j - 1] == wall[i + 1][j + 1]:\n                s += 2\n            if wall[i][j]!= wall[i][j - 1] and wall[i][j] == wall[i + 1][j - 1] and wall[i + 1][j - 1] == wall[i][j - 1]:\n                s += 1\n            if wall[i][j]!= wall[i][j + 1] and wall[i][j] == wall[i][j - 1] and wall[i][j + 1] == wall[i][j - 1]:\n                s += 2\n    \n    return 'YES' if s >= e else 'NO'\n        \n"
    },
    {
        "number": 4121,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, a = list(map(int, stdin.split()))\n\n    # 2, 6\n    # 2, 4, 5\n    # 4, 6, 6\n\n    # 2, 2, 5\n    # 2, 3, 4, 5\n\n    # 2, 4, 4, 5, 5, 5, 5\n    # 2, 3, 4, 5, 4, 5, 5\n    # 2, 2, 3, 4, 4, 5, 5\n    # 2, 2, 2, 5, 5, 5, 5\n    # 2, 2, 2, 2, 4, 4, 4\n\n    wall = [2, 2, 2, 2, 5]\n\n    result = \"\"\n    wall = wall + wall + wall + wall\n    wall.sort()\n\n    left = 0\n    right = 0\n    while left < n:\n        while right < n and wall[right] < a[left]:\n            right += 1\n        if wall[right] < a[left]:\n            result += \"NO\"\n            right += 1\n        else:\n            left += 1\n            wall[right] = wall[left]\n            del wall[left]\n\n    if left == n:\n        result += \"YES\"\n    else:\n        result += \"NO\"\n    return result\n\nsolution(stdin)\n"
    },
    {
        "number": 4122,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, h, d_list = map(int, stdin.split())\n    for i in range(n):\n        h = max(h, d_list[i])\n    answer = (n + h) - d_list[n]\n    return str(answer)\n"
    },
    {
        "number": 4122,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    h = int(stdin.split()[0])\n    n, k = map(int, stdin.split())\n    d = [-1] * (k+1)\n    for _ in range(n):\n        d[int(stdin.split()[1])] = stdin.split()[2]\n    for _ in range(k):\n        d[int(stdin.split()[2])] = stdin.split()[4]\n    print(min(d))\n    return -1"
    },
    {
        "number": 4122,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, h = map(int, stdin.split())\n    d_1 = float('inf')\n    d_2 = float('inf')\n    d_3 = float('inf')\n    for i in range(n):\n        h, d_1, d_2, d_3 = map(int, stdin.split())\n        if h <= 0:\n            return '-'\n        if d_1 + d_2 + d_3 <= h:\n            return str(d_1 + d_2 + d_3)\n    return str(h)\n"
    },
    {
        "number": 4122,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    H, n = map(int, stdin.split())\n    d_1, d_2, d_3 = map(int, stdin.split())\n    \n    if n == 0:\n        if d_1 <= H:\n            return -1\n        else:\n            return d_1\n    \n    d = [d_1, d_2, d_3]\n    k = 0\n    while True:\n        h_i = H - d[k]\n        if h_i < 0:\n            return -1\n        \n        if h_i >= n:\n            return k\n        else:\n            k += 1\n    \n"
    },
    {
        "number": 4122,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    d, s = map(int, stdin.split())\n    start = 0\n    end = 0\n    if s == 0:\n        return 0\n    for i in range(1, n+1):\n        if s < 10**i:\n            end = i\n            break\n    if end == n:\n        return -1\n    for i in range(start, end):\n        if s >= 10**i:\n            s -= 10**i\n            start = i+1\n            break\n    print(start)\n    if end-start > m:\n        return -1\n    return start"
    },
    {
        "number": 4122,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def change(i: int):\n        return max(i - stdin[i], 0)\n\n    def end(i: int):\n        return max(i - stdin[i], 0) + 1\n\n    H, n = map(int, stdin.split())\n    \n    if n < 2:\n        return end(H)\n\n    dp = [[-1] * (H + 1) for _ in range(n + 1)]\n    dp[0][0] = 0\n    for i in range(1, n + 1):\n        for j in range(H + 1):\n            if j >= stdin[i - 1]:\n                dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - stdin[i - 1]] + change(j))\n    \n    return max(dp[-1])\n"
    },
    {
        "number": 4122,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    k = int(stdin.strip())\n    if n <= 0 or k <= 0:\n        return -1\n    heights = sorted([int(i) for i in stdin.strip().split()])\n    # print(heights)\n    # print(heights[:len(heights) - 1])\n    # print(heights[len(heights) - 1])\n    # print(heights[len(heights) - 2])\n    # print(heights[len(heights) - 1])\n    # print(heights)\n    # print(heights[::-1])\n    # print(heights[::-2])\n    # print(heights[len(heights) - 1])\n    # print(heights[len(heights) - 2])\n    for i in range(len(heights)):\n        if i == 0:\n            heights[i] = heights[i] + (heights[i + 1] - heights[i]) * k / (heights[i + 1] - heights[i])\n        elif i == len(heights) - 1:\n            heights[i] = heights[i] - (heights[i - 1] - heights[i]) * k / (heights[i - 1] - heights[i])\n        else:\n            heights[i] = heights[i] + (heights[i + 1] - heights[i]) * k / (heights[i + 1] - heights[i])\n    return str(int(sum(heights)))\n"
    },
    {
        "number": 4122,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    H, n = map(int, stdin.split())\n    H, n = max(H, -10**6), max(n, 0)\n    n, d = map(int, stdin.split())\n    \n    return -1 if d >= n else n + (H - d)\n"
    },
    {
        "number": 4122,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    number, delta = map(int, stdin.split())\n    if number < 1:\n        return str(-1)\n    h = 10**6\n    heights = [0 for _ in range(number + 1)]\n    heights[0] = 1\n    for i in range(1, number + 1):\n        heights[i] = heights[i - 1] + delta\n        if heights[i] >= h:\n            heights[i] = heights[i - 1]\n    print(heights[-1])\n    return str(heights[-1])\n"
    },
    {
        "number": 4122,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # do not modify the lines above.\n    n = int(stdin.strip())\n    d = [int(i) for i in stdin.strip().split()]\n    \n    # the first minute.\n    k = 0\n    \n    # if less than 1 minute left, return\n    if n < 1:\n        return \"-1\"\n    \n    # If more than 10^6 or less than 10^12, it means that the monster can't kill him,\n    # so return a negative number.\n    if not 0 <= k <= 10**6 or not 0 <= n <= 10**12:\n        return \"-1\"\n    \n    # do not modify the lines below.\n    \n    # get the first minute's hp.\n    while d[k] <= n:\n        k += 1\n    \n    # check if the monster can kill him.\n    if d[k] <= n:\n        k -= 1\n    \n    # return the number.\n    return str(k)\n"
    },
    {
        "number": 4123,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    string = stdin.split()\n    n = int(string[0])\n    string = ''.join(string[1:])\n    lst = string.split(' ')\n    for i in range(1, n):\n        if n > len(lst):\n            break\n        lst = lst[1:]\n        lst.append(lst[i])\n    for i in range(1, n):\n        if n < len(lst):\n            break\n        if lst[i] not in lst:\n            return lst[0]\n    if lst[0] == lst[1]:\n        return lst[0]\n    return lst[0]\n"
    },
    {
        "number": 4123,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    input = stdin\n    answer = []\n    \n    #get the first two-gram\n    for _ in range(0,len(input),2):\n        answer.append(input[:2]+input[2:])\n    \n    #check if the first two-gram is maximal number of times\n    answer = [a for a in answer if len(a)==len(set(a))]\n    \n    return ''.join(sorted(answer, key=len))\n\n\ndef"
    },
    {
        "number": 4123,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    string = stdin.strip().upper()\n    # print(string)\n    # print(string.replace('A','A').replace('B','B').replace('C','C').replace('D','D').replace('E','E').replace('F','F').replace('G','G').replace('H','H').replace('I','I').replace('J','J').replace('K','K').replace('L','L').replace('M','M').replace('N','N').replace('O','O').replace('P','P').replace('Q','Q').replace('R','R').replace('S','S').replace('T','T').replace('U','U').replace('V','V').replace('W','W').replace('X','X').replace('Y','Y').replace('Z','Z').replace(' ','_').replace('+','').replace(',','_').replace('.','_').replace('-',''))\n    # print(string)\n    l = len(string)\n    if n == 0 or n == l:\n        return string\n    ans = \"\"\n    for i in range(l-n):\n        start = i\n        end = i + n\n        # print(start,end)\n        if string[start:end] not in string:\n            continue\n        temp = string[start:end]\n        # print(temp)\n        ans = ans + temp + '_'\n    # print(ans)\n    return ans"
    },
    {
        "number": 4123,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    # s is the string. It is a substring of s.\n    # n is the length of string.\n    \n    \n    # create a dictionary for storing the most frequent two-grams\n    d = dict()\n\n    # define a function called \"count\" which returns the number of times that two-gram is repeated\n    def count(s, n):\n        count = 0\n        \n        # loop over all characters of the string\n        for i in range(len(s)):\n            if s[i] not in d:\n                # if the character is not in dictionary, add it to the dictionary\n                d[s[i]] = 1\n            else:\n                # if the character is already in dictionary, increment the number of times it is repeated\n                d[s[i]] += 1\n            \n            # if the character is not in dictionary, add a new character to dictionary\n            # to count the number of times each character is repeated.\n            # Add 1 to the count for the letter.\n            # Note that the first letter of the two-gram is always capital letter.\n            if s[i] not in d:\n                d[s[i]] = 1\n            else:\n                d[s[i]] += 1\n        # print(d)\n        # print(d.keys())\n        for v in d.values():\n            count += v * n\n        # print(count)\n        return count\n    \n    # call the function\n    n = int(stdin.strip())\n    \n    # loop over the characters of the string\n    for i in range(n):\n        # get the string and the n characters of the string\n        string = stdin.strip()[i:i+n]\n        # call the function\n        count(string, n)\n        \n    return''.join(d.keys())\n"
    },
    {
        "number": 4123,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    s = stdin.strip()\n    s = s.upper()\n    s = s.replace(\"A\", \"a\")\n    s = s.replace(\"B\", \"b\")\n    s = s.replace(\"C\", \"c\")\n    s = s.replace(\"D\", \"d\")\n    s = s.replace(\"E\", \"e\")\n    s = s.replace(\"F\", \"f\")\n    s = s.replace(\"G\", \"g\")\n    s = s.replace(\"H\", \"h\")\n    s = s.replace(\"I\", \"i\")\n    s = s.replace(\"J\", \"j\")\n    s = s.replace(\"K\", \"k\")\n    s = s.replace(\"L\", \"l\")\n    s = s.replace(\"M\", \"m\")\n    s = s.replace(\"N\", \"n\")\n    s = s.replace(\"O\", \"o\")\n    s = s.replace(\"P\", \"p\")\n    s = s.replace(\"Q\", \"q\")\n    s = s.replace(\"R\", \"r\")\n    s = s.replace(\"S\", \"s\")\n    s = s.replace(\"T\", \"t\")\n    s = s.replace(\"U\", \"u\")\n    s = s.replace(\"V\", \"v\")\n    s = s.replace(\"W\", \"w\")\n    s = s.replace(\"X\", \"x\")\n    s = s.replace(\"Y\", \"y\")\n    s = s.replace(\"Z\", \"z\")\n    s = s.replace(\"!\", \"\")\n    s = s.replace(\".\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.lower()\n    s = s.split(\" \")\n    s = list(set(s))\n    s.sort(key=len)\n    s = set(s)\n    if len(s) >= 2:\n        print(s[0] + \" \" + s[1])\n    else:\n        print(s[0])\n"
    },
    {
        "number": 4123,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 4123,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n,s = map(int,stdin.split())\n    s = ''.join(sorted(s))\n    ans = s.find(s[0])\n    if ans == s.find(s[1]):\n        return s\n    \n    return 'ZZ'\n\nsolution(\"2 2 2\")"
    },
    {
        "number": 4123,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(str, stdin.split())\n    n = int(n)\n    s = list(s)\n    # print(n)\n    # print(s)\n    # print(''.join(s[:n//2]))\n    # print(s[n//2:])\n    cnt = 0\n    for i in range(n//2):\n        j = i+n//2\n        if s[i] == s[j]:\n            cnt += 1\n        if cnt == 2:\n            return s[i]+s[j]\n    # print(cnt)\n    return ''.join(s[n//2:n//2+n//2])\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n------------------------------------------------------------------------------------------------"
    },
    {
        "number": 4123,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin)\n    s = stdin[:n]\n    t = stdin[n:]\n    result = \"\"\n    i = 0\n    j = 0\n    \n    while i < len(s) and j < len(t):\n        \n        if s[i] == t[j]:\n            i += 1\n            j += 1\n            continue\n        \n        if s[i] == t[j] == s[i+1]:\n            i += 1\n            j += 1\n        \n        elif s[i] == t[j] == s[i+2]:\n            i += 1\n            j += 2\n            \n        else:\n            if i < len(s) and s[i] == t[j]:\n                result += s[i]\n                i += 1\n                j += 1\n            \n            elif i < len(s) and s[i]!= t[j]:\n                if s[i+1] == t[j]:\n                    result += s[i]\n                    i += 1\n                    j += 1\n                elif s[i+1] == t[j] == s[i+2]:\n                    result += s[i]\n                    i += 1\n                    j += 2\n                else:\n                    result += s[i]\n                    i += 1\n            \n    return result\n\nfor _ in range(int(input())):\n    \n    s = input()\n    result = solution(s)\n    print(result)"
    },
    {
        "number": 4123,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    s = [''] * n\n    for i in range(n):\n        s[i] = stdin[i]\n    for i in range(1, n):\n        for j in range(i):\n            if s[j] == s[i] and j!= i:\n                s[j], s[i] = s[i], s[j]\n    answer = ''\n    for i in s:\n        if len(i) > 1:\n            answer += i +''\n    return answer[:-1]\n"
    },
    {
        "number": 4124,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    t = stdin.strip()\n    s_len = len(s)\n    t_len = len(t)\n    if s_len < t_len:\n        return 0\n    if s_len == t_len:\n        if s[0]!= t[0]:\n            return 0\n        else:\n            return 1\n    if s_len == t_len:\n        return s_len + solution(s[1:])\n    return s_len + solution(t[1:])\n"
    },
    {
        "number": 4124,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    t = stdin\n    m = 0\n    for i in range(len(s)):\n        if s[i]!= t[i] :\n            m = m + 1\n    return m\n\ndef"
    },
    {
        "number": 4124,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s,t = stdin.split()\n    s = s.lower()\n    t = t.lower()\n    if not s:\n        return t\n    if not t:\n        return s\n    if s[0] == t[0]:\n        return s[1:] + t[1:]\n    else:\n        return t[1:] + s[1:]\n"
    },
    {
        "number": 4124,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    res = 0\n    for std in stdin:\n        if len(std) < 2 or std == std[0]:\n            continue\n        res += 1\n        s = std[1:len(std)-1]\n        t = std[len(std)-2:]\n        std = s + t\n    return res"
    },
    {
        "number": 4124,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s,t = stdin.split(\" \")\n    s = s.replace(\" \", \"\").lower()\n    t = t.replace(\" \", \"\").lower()\n    s = s.replace(\" \", \"\").replace(\" \",\"\")\n    t = t.replace(\" \", \"\").replace(\" \",\"\")\n    while len(s)<len(t):\n        s = s+s\n        t = t+t\n    if len(s)==len(t):\n        s = s[1:]\n        t = t[1:]\n    if s == t:\n        return len(s)\n    else:\n        return len(s)//2"
    },
    {
        "number": 4124,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split(\" \")\n    s = s.lower()\n    t = t.lower()\n    s_len = len(s)\n    t_len = len(t)\n    if s_len < t_len:\n        return \"no\"\n    if s_len == t_len:\n        return s + t\n    s_list = list(s)\n    for i in range(s_len - t_len):\n        s_list[i + t_len] = \"a\"\n    s = \"\".join(s_list)\n    return s + \"here\"\n\n-----Test-----\ntest\nwest\ntest\ncodeforces\nyes\ntest\ntest\ncodeforces\nyes\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\ntest\n"
    },
    {
        "number": 4124,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    s = stdin.splitlines()\n    t = stdin.splitlines()\n    if n == len(s):\n        return len(t)\n    else:\n        return len(s)"
    },
    {
        "number": 4124,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    def make_len_str(s, t):\n        return int(len(s) / len(t) * (len(t) - 1))\n\n    moves = make_len_str(s, t)\n    s, t = s.replace('t','s'), t.replace('t','s')\n\n    return sum([moves for i in range(moves)])\n\n\n-----Constraints-----\n1 <= stdin.length <= 10^5\ns.length == t.length\ns is a non-empty string. t is a non-empty string.\n0 <= s.length <= 10^4\n0 <= t.length <= 10^4\ns and t consist only of lowercase Latin letters.\n\n\n\"\"\"\n\nimport math\nfrom collections import deque\n\n\ndef"
    },
    {
        "number": 4124,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    s = list(stdin.split())\n    t = list(stdin.split())\n    \n    def insert(num: int) -> str:\n        if num == 0:\n            return \"?\"\n        if num == len(t):\n            return \"?\"\n        return t[num]\n        \n    def find(string: str, substring: str) -> bool:\n        left, right = 0, 0\n        for i in range(len(string)):\n            if string[i]!= substring[left]:\n                if i - left >= 0:\n                    left = i - 1\n                    if left < 0:\n                        return False\n            else:\n                if string[i] == substring[right]:\n                    right += 1\n                    if right >= len(string):\n                        return False\n                left = i + 1\n        return right == len(substring)\n    \n    def delete(string: str, substring: str, left: int, right: int) -> str:\n        if left < 0 or right >= len(string):\n            return string\n        \n        if string[left] == substring[right]:\n            left += 1\n            right += 1\n            if left >= len(string):\n                return delete(string, substring, left, right)\n            if right >= len(string):\n                return delete(string, substring, left, right)\n            if find(string, substring):\n                return delete(string, substring, left, right)\n            return string\n        else:\n            return string\n            \n    answer = 0\n    for i in range(len(s) - m + 1):\n        answer += len(s[i : i + m])\n        \n    for i in range(len(t) - m + 1):\n        answer += len(t[i : i + m])\n        \n    for i in range(len(t)):\n        for j in range(len(s)):\n            answer += len(s[j : j + m])\n            if find(s[j : j + m], t[i : i + m], j, j + 1):\n                answer -= 1\n            \n    return answer\n"
    },
    {
        "number": 4124,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    S1 = stdin\n    S2 = stdin\n    S1_len = len(S1)\n    S2_len = len(S2)\n    for i in range(S1_len):\n        if S1[i] == \" \":\n            S1 = S1[:i] + \" \" + S1[i + 1:]\n        elif S1[i] == \" \":\n            S1 = S1[:i] + \" \" + S1[i + 1:]\n    for i in range(S2_len):\n        if S2[i] == \" \":\n            S2 = S2[:i] + \" \" + S2[i + 1:]\n        elif S2[i] == \" \":\n            S2 = S2[:i] + \" \" + S2[i + 1:]\n    return S2.replace(\" \", \"\")\n    \n"
    },
    {
        "number": 4125,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    D = int(stdin)\n\n    N = int(stdin[0])\n    x1, x2, x3, x4 = map(int, stdin[1:N])\n\n    result = 0\n\n    if x1 + D <= 10 ** 9 and x2 + D <= 10 ** 9 and x3 + D <= 10 ** 9 and x4 + D <= 10 ** 9:\n        result = (x1 + D + x2 + D + x3 + D + x4) / 5\n\n    return str(result)\n\n\nExplanation\n\nYou can visit the first city.\nThe city with a positive integer D is located at coordinate x_1.\n- Travel to coordinate y and visit next city.\n- Travel to coordinate y + D and visit next city.\n- Travel to coordinate y - D and visit next city.\n- Travel to coordinate y + D and visit next city.\n- Travel to coordinate y - D and visit next city.\n- Travel to coordinate y + D and visit next city.\n- Travel to coordinate y - D and visit next city.\nThe maximum value of D that enables you to visit all the cities is 2.\n\nSimilarly, you can visit the second city.\nThe city with a positive integer D is located at coordinate x_2.\n- Travel to coordinate y and visit next city.\n- Travel to coordinate y - D and visit next city.\n- Travel to coordinate y + D and visit next city.\n- Travel to coordinate y - D and visit next city.\n- Travel to coordinate y + D and visit next city.\n- Travel to coordinate y - D and visit next city.\nThe maximum value of D that enables you to visit all the cities is 2.\n\"\"\""
    },
    {
        "number": 4125,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, x = map(int, stdin.split())\n    lst = list(map(int, stdin.split()))\n    x_lst = [x - 1] * N\n    if lst[0] == 1:\n        x_lst[0] = 0\n    elif lst[0] == 2:\n        x_lst[0] = 3\n    elif lst[0] == 3:\n        x_lst[0] = 5\n    elif lst[0] == 4:\n        x_lst[0] = 7\n    elif lst[0] == 5:\n        x_lst[0] = 9\n    elif lst[0] == 6:\n        x_lst[0] = 11\n    elif lst[0] == 7:\n        x_lst[0] = 0\n    print(solution.fun(lst, x_lst))"
    },
    {
        "number": 4125,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, x, y = map(int, stdin.split())\n\n    answer = 0\n    for i in range(1, N+1):\n        if i >= x:\n            answer = max(answer, abs(i - x) + abs(i - y))\n        if i < x:\n            answer = max(answer, abs(i - x) + abs(i - y))\n        if i >= y:\n            answer = max(answer, abs(i - y) + abs(i - x))\n\n    print(answer)\n    return str(answer)\n\nn = int(input())\nfor _ in range(n):\n    x, y = map(int, input().split())\n    print(solution(x, y))"
    },
    {
        "number": 4125,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    x = [int(x) for x in stdin.split()]\n    x_set = set(x)\n    x_set.update([0])\n    x_set.update(x_set)\n    x_set.add(N)\n    x_set.remove(0)\n    answer = 0\n    for x_i in x_set:\n        answer = max(answer, D - x_i + 1)\n    return str(answer)\n"
    },
    {
        "number": 4125,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, x_i = map(int, stdin.split())\n    D = 0\n    for i in range(1, N+1):\n        D = max(D, abs(x_i-i))\n    return str(D)\n\"\"\""
    },
    {
        "number": 4125,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, x_1, x_2, x_3, x_4, x_5, x_6, x_7, x_8 = map(int, stdin.split())\n    answer = -1\n    \n    def dfs(city_list: list, start: int, visited: set):\n        if len(city_list) == N:\n            answer = max(answer, max(map(lambda x: sum(list(map(lambda y: abs(x-y), city_list))), range(len(city_list))))\n            return\n        \n        city_list.append(start)\n        visited.add(start)\n        for i in range(4):\n            dfs(city_list, city_list[i] + x_1, visited)\n            dfs(city_list, city_list[i] - x_1, visited)\n            dfs(city_list, city_list[i] * x_1, visited)\n            dfs(city_list, city_list[i] // x_1, visited)\n            dfs(city_list, city_list[i] // x_2, visited)\n            dfs(city_list, city_list[i] // x_3, visited)\n            dfs(city_list, city_list[i] // x_4, visited)\n            dfs(city_list, city_list[i] // x_5, visited)\n            dfs(city_list, city_list[i] // x_6, visited)\n            dfs(city_list, city_list[i] // x_7, visited)\n            dfs(city_list, city_list[i] // x_8, visited)\n        \n    dfs([x_1, x_2, x_3, x_4, x_5, x_6, x_7, x_8], x_1, set())\n    return answer\n"
    },
    {
        "number": 4125,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, x = map(int, stdin.split())\n    D = int(stdin.split()[1])\n    answer = 0\n    \n    visited = [set() for _ in range(N + 1)]\n    for _ in range(N):\n        move1, move2, move3, move4 = map(int, stdin.split())\n        visited[move1].add(move2)\n        visited[move2].add(move3)\n        visited[move3].add(move4)\n        visited[move4].add(move1)\n        \n    for city in visited[1:]:\n        answer = max(answer, len(city))\n    \n    return str(answer)"
    },
    {
        "number": 4125,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    x = list(map(int, stdin.split()))\n    x.sort()\n    res = 0\n    for i in range(n):\n        res = max(x[i] + x[i+1], res)\n    return str(res)\n\"\"\"\nfrom collections import Counter\n\ndef"
    },
    {
        "number": 4125,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, x, D = map(int, stdin.split())\n    cities = []\n    for i in range(n):\n        cities.append(list(map(int, stdin.split())))\n    city = list(filter(lambda a: a >= x, cities))\n    ans = city[0]\n    if D < 2:\n        for i in range(1, len(city)):\n            ans += city[i]\n    return str(ans)\n\nprint(solution(\"3 3\"))\nprint(solution(\"1 7 11\"))\n"
    },
    {
        "number": 4125,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, *cities = map(int, stdin.split())\n    x = sorted(list(map(int, cities)))\n    \n    c = list(set(x) - set(cities))\n    \n    d = 0\n    for city in c:\n        d = max(d, len(x))\n        \n    return str(d)"
    },
    {
        "number": 4126,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return answer\n\n#####\n## Questions\n#####\n"
    },
    {
        "number": 4126,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return\n    \nOutput is same as in input.\n\"\"\"\nimport math\n\ndef"
    },
    {
        "number": 4126,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def isPalindrome(s):\n        if len(s) % 2 == 0:\n            return False\n        s = s.lower()\n        for i in range(len(s)//2):\n            if s[i]!= s[len(s) - 1 - i]:\n                return False\n        return True\n    \n    N = int(stdin.strip())\n    string = stdin.strip()\n    if len(string) % 2!= 0:\n        print('No')\n        return\n    \n    for i in range(0, len(string) - 1, 2):\n        if isPalindrome(string[i:i+2]):\n            print('Yes')\n            return\n    print('No')\n\nprint(solution('akasaka'))\n"
    },
    {
        "number": 4126,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n  return \"No\" if solution(stdin) == \"Yes\" else \"Yes\"\n\ndef"
    },
    {
        "number": 4126,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n=int(stdin)\n    pal=[]\n    for i in range(n):\n        pal.append(stdin[i:i+n//2]+stdin[i+n//2:])\n    for i in range(len(pal)):\n        pal[i] = pal[i].lower()\n    for i in pal:\n        if i==i[::-1]:\n            return 'Yes'\n    return 'No'\n\nSample Test Cases:\nInput:\nakasaka\nSample Output:\nNo\n\nExplanation:\nAll palindromes are:\n\n[a, b, c]\n[a, b, c]\n[a, b, c]\n\n[a, b, c]\n[a, b]\n[a, b, c]\n\n[a, b, c]\n[a, c, b]\n[a, c, b]\n[a, c, b]\n[a, c, b]\n[a, c, c]\n\n[a, b, c]\n[a, c, b]\n[a, c, b]\n[a, c, c]\n[a, c, c]\n\n[a, b, c]\n[a, c, b]\n[a, c, c]\n[a, c, c]\n[a, c, c]\n[a, c, c]\n\n[a, b, c]\n[a, c, b]\n[a, c, c]\n[a, c, c]\n[a, c, c]\n[a, c, c]\n[a, c, c]\n\n[a, b, c]\n[a, c, b]\n[a, c, c]\n[a, c, c]\n[a, c, c]\n[a, c, c]\n[a, c, c]\n\n[a, b, c]\n[a, c, b]\n[a, c, c]\n[a, c, c]\n[a, c, c]\n[a, c, c]\n[a, c, c]\n\n[a, b, c]\n[a, c, b]\n[a, c, c]\n[a, c, c]\n[a, c, c]\n[a, c, c]\n[a, c, c]\n\n[a, b, c]\n[a, c, b]\n[a, c, c]\n[a, c, c]\n[a, c, c]\n[a, c, c]\n[a, c, c]\n\n[a, b, c]\n[a, c, b]\n[a, c, c]\n[a, c, c]\n[a, c, c]\n[a, c, c]\n[a, c, c]\n\n[a, b, c]\n[a, c, b]\n[a, c, c]\n[a, c, c]\n[a, c, c]\n[a, c, c]\n[a, c, c]\n\n[a, b, c]\n[a, c, b]\n[a, c, c]\n[a, c, c]\n[a, c, c]\n[a, c, c]\n[a, c, c]\n\n[a, b, c]\n[a, c, b]\n[a, c, c]\n[a, c, c]\n[a, c, c]\n[a, c, c]\n[a, c, c]\n\n[a, b, c]\n[a, c, b]\n[a, c, c]\n[a, c, c]\n[a, c, c]\n[a, c, c]\n[a, c, c]\n\n[a, b, c]\n[a, c, b]\n[a, c, c]\n[a, c, c]\n[a, c, c]\n[a, c, c]\n[a, c, c]\n\n[a, b, c]\n[a, c, b]\n[a, c, c]\n[a, c, c]\n[a, c, c]\n[a, c, c]\n[a, c, c]\n\n[a, b, c]\n[a, c, b]\n[a, c, c]\n[a, c, c]\n[a, c, c]\n[a, c, c]\n[a, c, c]\n\n[a, b, c]\n[a, c, b]\n[a, c, c]\n[a, c, c]\n[a, c, c]\n[a, c, c]\n[a, c, c]\n\n[a, b, c]\n[a, c, b]\n[a, c, c]\n[a, c, c]\n[a, c, c]\n[a, c, c]\n\n[a, b, c]\n[a, c, b]\n[a, c, c]\n[a, c, c]\n[a, c, c]\n[a, c, c]\n\n[a, b, c]\n[a, c, b]\n[a, c, c]\n[a, c, c]\n[a, c, c]\n[a, c, c]\n\n[a, b, c]\n[a, c, b]\n[a, c, c]\n[a, c, c]\n[a, c, c]\n[a, c, c]\n\n[a, b, c]\n[a, c, b]\n[a, c, c]\n[a, c, c]\n[a, c, c]\n[a, c, c]\n\n[a, b, c]\n[a, c, b]\n[a, c, c]\n[a, c, c]\n[a, c, c]\n[a, c, c]\n\n[a, b, c]\n[a, c, b]\n[a, c, c]\n[a, c, c]\n[a, c, c]\n[a, c, c]\n\n[a, b, c]\n[a, c, b]\n[a, c, c]\n[a, c, c]\n[a, c, c]\n[a, c, c]\n\n[a, b, c]\n[a, c, b]\n[a, c, c]\n[a, c, c]\n[a, c, c]\n[a, c, c]\n\n[a, b, c]\n[a, c, b]\n[a, c, c]\n[a, c, c]\n[a, c, c]\n[a, c, c]\n\n[a, b, c]\n[a, c, b]\n[a, c, c]\n[a, c, c]\n[a, c, c]\n[a, c, c]\n\n[a, b, c]\n[a, c, b]\n[a, c, c]\n[a, c, c]\n[a, c, c]\n[a, c, c]\n\n[a, b, c]\n[a, c, b]\n[a, c, c]\n[a, c, c]\n[a, c, c]\n[a, c, c]"
    },
    {
        "number": 4126,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split(\" \")\n    for i in range(len(s)):\n        if s[i] == s[i-1]:\n            s[i] = s[i-1]\n        else:\n            s[i] = 'a'*(len(s[i])-1)\n    return \"\".join(s)\n\n\ndef"
    },
    {
        "number": 4126,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    num = 0\n    for s in stdin:\n        num += 1\n        if s == s[::-1]:\n            return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 4126,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # s = stdin.split()\n    # s = [list(i) for i in zip(*(list(map(lambda x: list(x), list(filter(lambda x: x[0]==x[1],map(lambda x: list(x), s[:x[2]])) ))[0])[::-1].count(''.join(list(map(lambda x: x[0] if x[0]==x[1] else x[1],s[:x[2]]))))[::-1]))]\n    # s = list(filter(lambda x:x[0]!=x[1] and x[0]!=x[2] and x[2]<len(x[0]),s))\n    # if len(s)==0:\n    #     return 'No'\n    # return 'Yes' if len(s)==1 else 'Yes'\n    \n    s = stdin.split()\n    return 'Yes' if len(s)==1 else 'No'\n"
    },
    {
        "number": 4126,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    S = list(stdin)\n    length = len(S)\n    i = 0\n    while i < length:\n        j = i + 1\n        while j < length and S[i] == S[j]:\n            j += 1\n        if j - i == 2:\n            return 'Yes'\n        i = j\n    return 'No'"
    },
    {
        "number": 4126,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if all(str[i:i+2] == str[i:i+2][::-1] for i in range(len(str)-1)) else \"No\"\n\n\n\n\n\"\"\"\n\n\nclass Solution:\n    def isStrong(self, S: str) -> bool:\n        if len(S) % 2!= 0:\n            return False\n        for i in range(0, len(S), 2):\n            if S[i:i+2] == S[i:i+2][::-1]:\n                return True\n        return False\n\n\nprint(Solution().isStrong(\"AKASAKA\"))\n"
    },
    {
        "number": 4127,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    num = list(map(float,stdin.split()))\n    num.pop()\n    num = list(map(int,str('.'.join(str(i) for i in num))))\n    num[0] = round(num[0],1)\n    num = ''.join([str(i) for i in num])\n    \n    print(int(num))\n    return str(int(num))"
    },
    {
        "number": 4127,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(float(stdin[:-1]))/10**len(stdin[-1:]) if len(stdin) > 0 else '0')"
    },
    {
        "number": 4127,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B = [int(s) for s in stdin.split()]\n    A, B = max(A, 1), max(B, 1)\n    B = B * 10 ** (len(str(B)) - len(str(A)))\n    return str(int(A // B))\n\n\"\"\"\ndef"
    },
    {
        "number": 4127,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(sum(map(int, stdin.split(' '))))\n"
    },
    {
        "number": 4127,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int,stdin.split()))\n    b = []\n    for i in range(n):\n        b.append(str(a[i]%m))\n        a[i] = a[i]/m\n    print(''.join(b))\n    return ''.join(b)\n\n\n----------------------------------------------------------------------------------------------------------------------\n\"\"\"\n\ndef"
    },
    {
        "number": 4127,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    for a, b in stdin:\n        a = int(a)\n        b = int(b)\n        if a // b > a // b // 1:\n            a -= b\n        elif a // b < a // b // 1:\n            b -= a\n    return str(a // b)\n\"\"\"\nclass Solution:\n    def fractional_part(self,number:str) -> str:\n        a, b = 0, 1\n        for c in number:\n            if c == '.':\n                a += 1\n            else:\n                break\n        for d in number:\n            if d == '.':\n                b += 1\n            else:\n                break\n        return str(a // b)"
    },
    {
        "number": 4127,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(len(stdin)):\n        n = int(stdin[i:i + 2])\n        if n % 10!= 0:\n            return str(int(n / 10 ** (len(str(n)) - 1))) + \".\"\n    return str(int(n / 10 ** (len(str(n)) - 1))) + \".\"\n\ndef"
    },
    {
        "number": 4127,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    op = list(stdin.strip().split())\n    a = int(op[0])\n    b = int(op[1])\n    sum = a + b\n    if sum % 2 == 0:\n        return str(sum//2)\n    else:\n        return str(sum//2 + 1)\n"
    },
    {
        "number": 4127,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    num = list(map(int,stdin.split(\" \")))\n    print(sum(num)/(len(num)))\n    return \"217\""
    },
    {
        "number": 4127,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    import math\n    A, B = map(float, stdin.split())\n    p = math.ceil(B/10)\n    if p > 1:\n        A *= 10\n    A += p*A\n    return str(int(A))\n"
    },
    {
        "number": 4128,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def to_string(number: int) -> str:\n        if number == 0:\n            return \"\"\n        result = to_string(number // 10) + str(number % 10)\n        if number % 10 > 0:\n            result += \"0\"\n        return result\n\n    def get_n(n: int) -> str:\n        if n == 0:\n            return \"\"\n        if n < 0:\n            return \"-\" + get_n(n)\n        return to_string(n)\n\n    def get_answer(st):\n        s = \"0\"\n        for i in range(1, len(st)):\n            if st[i] == \"0\":\n                s += \"0\"\n            else:\n                s += str(i)\n        return s\n\n    t = int(stdin.readline().strip())\n    for t in range(t):\n        n = int(stdin.readline().strip())\n        s = get_n(n)\n        answer = get_answer(s)\n        print(answer)\n\n\n-----Constraints-----\n\n1 <= t <= 10^4\n\n1 <= n <= 10^9\n\n\"\"\"\nfrom itertools import permutations\n\n\nclass Solution:\n    def numWays(self, n: int) -> int:\n        if n == 0:\n            return 0\n        if n < 3:\n            return 1\n        if n == 3:\n            return 4\n        if n < 9:\n            return 3 * (3 + 4 * (n // 3)) + 5 * (3 + 2 * (n // 3) + 2 * (n // 4) + 4 * (n // 5)) + (n % 3) * (3 + 4 * (n // 3))\n        if n < 27:\n            return (3 * n) + (5 * n) + (3 * n * n) + (2 * n) + (3 * n * n * n) + (2 * n * n)\n        if n < 627:\n            return (3 * n) + (5 * n) + (3 * n * n) + (2 * n) + (3 * n * n * n) + (2 * n * n * n) + (2 * n * n * n * n)\n        if n < 599:\n            return (3 * n) + (5 * n) + (3 * n * n) + (2 * n) + (3 * n * n * n) + (2 * n * n * n) + (3 * n * n * n * n) + (2 * n * n * n * n * n) + (2 * n * n * n * n * n * n)\n        if n < 683:\n            return (3 * n) + (5 * n) + (3 * n * n) + (2 * n) + (3 * n * n * n) + (2 * n * n * n) + (3 * n * n * n * n) + (2 * n * n * n * n * n) + (3 * n * n * n * n * n * n) + (2 * n * n * n * n * n * n * n)\n        if n < 699:\n            return (3 * n) + (5 * n) + (3 * n * n) + (2 * n) + (3 * n * n * n) + (2 * n * n * n) + (3 * n * n * n * n) + (2 * n * n * n * n * n) + (3 * n * n * n * n * n * n) + (2 * n * n * n * n * n * n * n)\n        if n < 739:\n            return (3 * n) + (5 * n) + (3 * n * n) + (2 * n) + (3 * n * n * n) + (2 * n * n * n) + (3 * n * n * n * n) + (2 * n * n * n * n * n) + (3 * n * n * n * n * n * n) + (2 * n * n * n * n * n * n * n) + (3 * n * n * n * n * n * n * n * n)\n        if n < 761:\n            return (3 * n) + (5 * n) + (3 * n * n) + (2 * n) + (3 * n * n * n) + (2 * n * n * n) + (3 * n * n * n * n) + (2 * n * n * n * n * n) + (3 * n * n * n * n * n * n) + (2 * n * n * n * n * n * n * n) + (3 * n * n * n * n * n * n * n * n) + (2 * n * n * n * n * n * n * n * n * n)\n        if n < 799:\n            return (3 * n) + (5 * n) + (3 * n * n) + (2 * n) + (3 * n * n * n) + (2 * n * n * n) + (3 * n * n * n * n) + (2 * n * n * n * n * n) + (3 * n * n * n * n * n * n) + (2 * n * n * n * n * n * n * n) + (3 * n * n * n * n * n * n * n * n) + (2 * n * n * n * n * n * n * n * n * n)\n\n    def numWays(self, n: int) -> int:\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 4\n        if n == 4:\n            return 6\n        if n == 5:\n            return 7\n        if n == 6:\n            return 10\n        if n == 7:\n            return 11\n        if n == 8:\n            return 12\n        if n == 9:\n            return 13\n        if n == 10:\n            return 14\n        if n == 11:\n            return 15\n        if n == 12:\n            return 16\n        if n == 13:\n            return 17\n        if n == 14:\n            return 18\n        if n == 15:\n            return 19\n        if n == 16:\n            return 20\n        if n == 17:\n            return 21\n        if n == 18:\n            return 22\n        if n == 19:\n            return 23\n        if n == 20:\n            return 24\n        if n == 21:\n            return 25\n        if n == 22"
    },
    {
        "number": 4128,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n    n=int(stdin)\n    \n    answer=1\n    \n    def getways(n,a,b):\n        if a<b:\n            return getways(n,a,b+1)\n        else:\n            if n<a:\n                return 0\n            elif n<b:\n                return getways(n-a,a,b)\n            else:\n                return getways(n-b,a,b+1)\n    answer=getways(n,0,0)\n    \n    return str(answer)"
    },
    {
        "number": 4128,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n % 2 == 0:\n        print(n//2)\n    else:\n        print(n//2+n//4)\n    "
    },
    {
        "number": 4128,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n,a,b=list(map(int,stdin.split()))\n    if(a+b>n):\n        return 0\n    res=1\n    for i in range(1,a+b+1):\n        res=res+((a+b)%i)\n    return res\n"
    },
    {
        "number": 4128,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split()\n    t = int(lines[0])\n    n = int(lines[1])\n    p = list(map(int, lines[2:]))\n\n    count = 0\n\n    def solve(n, p):\n        if n == 0:\n            return 1\n\n        if p[0] == 0:\n            return 0\n\n        if p[0] > n:\n            return solve(n, p[1:])\n\n        result = 0\n\n        for i in range(1, n):\n            result += solve(n - p[i], p[1:])\n\n        return result\n\n    for i in range(t):\n        print(solve(n, p))\n    return 0\n\"\"\"\n\nimport sys\n\ninput = sys.stdin.readline\n\nn, m = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\ndp = [[0] * m for _ in range(n)]\ndp[0][0] = 1\nfor i in range(n):\n    for j in range(m):\n        if j == 0:\n            dp[i][j] = 1\n        elif a[i] > b[j]:\n            dp[i][j] = dp[i-1][j] + dp[i-1][j-1]\n        else:\n            dp[i][j] = dp[i-1][j] + dp[i-1][j-1]\nprint(dp[-1][-1])"
    },
    {
        "number": 4128,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\n\n-----Constraints-----\n\n0 < n < 100\n\nThe number of test cases is a positive integer.\n\n\n\n-----Example-----\nInput\n3\n3\n1\n3\n3\n1\n1\n3\n0\n1\n1\n1\n1\n0\n0\n\n\nOutput\n3\n0\n0\n1\n1\n\nExplanation\nThere are three ways to distribute $n$ candies between two siblings: Alice and Bob. Alice can get $a$ (i.e. $a>0$) candies and Bob can get $b$ (i.e. $b>0$) candies. Alice will get $a$ (i.e. $a>b$) candies and Bob will get $b$ (i.e. $b>a$).\nFor each test case, there are two possible ways to distribute $n$ candies between two sisters. The first way is Alice to get $a$ (i.e. $a>=0$) candies and Bob to get $b$ (i.e. $b>=0$).\n\nExample 2\nInput\n3\n1\n1\n1\n0\n0\n1\n1\n1\n1\n1\n0\n1\n1\n\nOutput\n3\n0\n0\n0\n0\n1\n1\n\nExplanation\nThere are three ways to distribute $n$ candies between two sisters: Alice to get $a$ (i.e. $a>=0$) candies and Bob to get $b$ (i.e. $b>=0$).\nFor each test case, there are two possible ways to distribute $n$ candies between two sisters. The first way is Alice to get $a$ (i.e. $a>=0$) candies and Bob to get $b$ (i.e. $b>=0$).\n\nExample 3\nInput\n5\n1\n1\n1\n1\n0\n1\n1\n\nOutput\n1\n0\n0\n0\n1\n\nExplanation\nThere are three ways to distribute $n$ candies between two siblings: Alice to get $a$ (i.e. $a>=0$) candies and Bob to get $b$ (i.e. $b>=0$).\nFor each test case, there are two possible ways to distribute $n$ candies between two sisters. The first way is Alice to get $a$ (i.e. $a>=0$) candies and Bob to get $b$ (i.e. $b>=0$).\n\nExample 4\nInput\n5\n1\n2\n3\n1\n1\n0\n1\n\nOutput\n1\n0\n0\n0\n1\n\nExplanation\nThere are three ways to distribute $n$ candies between two siblings: Alice to get $a$ (i.e. $a>=0$) candies and Bob to get $b$ (i.e. $b>=0$).\nFor each test case, there are two possible ways to distribute $n$ candies between two sisters. The first way is Alice to get $a$ (i.e. $a>=0$) candies and Bob to get $b$ (i.e. $b>=0$).\n\nExample 5\nInput\n4\n2\n1\n1\n1\n1\n1\n1\n\nOutput\n0\n0\n0\n\nExplanation\nThere are three ways to distribute $n$ candies between two siblings: Alice to get $a$ (i.e. $a>=0$) candies and Bob to get $b$ (i.e. $b>=0$).\nFor each test case, there are two possible ways to distribute $n$ candies between two sisters. The first way is Alice to get $a$ (i.e. $a>=0$) candies and Bob to get $b$ (i.e. $b>=0$).\n\nExample 6\nInput\n3\n3\n0\n0\n0\n\nOutput\n1\n1\n1\n0\n\nExplanation\nThere are three ways to distribute $n$ candies between two siblings: Alice to get $a$ (i.e. $a>=0$) candies and Bob to get $b$ (i.e. $b>=0$).\nFor each test case, there are two possible ways to distribute $n$ candies between two sisters. The first way is Alice to get $a$ (i.e. $a>=0$) candies and Bob to get $b$ (i.e. $b>=0$).\n\nExample 7\nInput\n5\n3\n1\n0\n0\n1\n1\n0\n\nOutput\n1\n0\n0\n0\n1\n\nExplanation\nThere are three ways to distribute $n$ candies between two siblings: Alice to get $a$ (i.e. $a>=0$) candies and Bob to get $b$ (i.e. $b>=0$).\nFor each test case, there are two possible ways to distribute $n$ candies between two sisters. The first way is Alice to get $a$ (i.e. $a>=0$) candies and Bob to get $b$ (i.e. $b>=0$).\n\nExample 8\nInput\n4\n3\n1\n0\n1\n0\n1\n\nOutput\n1\n1\n0\n1\n\nExplanation\nThere are three ways to distribute $n$ candies between two siblings: Alice to get $a$ (i.e. $a>=0$) candies and Bob to get $b$ (i.e. $b>=0$).\nFor each test case, there are two possible ways to distribute $n$ candies between two siblings. The first way is Alice to get $a$ (i.e. $a>=0$) candies and Bob to get $b$ (i.e. $b>=0$).\n\nExample 9\nInput\n5\n3\n1\n1\n0\n1\n1\n\nOutput\n1\n1\n1\n0\n\nExplanation\nThere are three ways to distribute $n$ candies between two siblings: Alice to get $a$ (i.e. $a>=0$) candies and Bob to get $b$ (i.e. $b>=0$).\nFor each test case, there are two possible ways to distribute $n$ candies between two sisters. The first way is Alice to get $a$ (i.e. $a>=0$) candies and Bob to get $b$ (i.e. $b>=0$).\n\nExample 10\nInput\n6\n1\n1\n0\n1\n0\n1\n\nOutput\n1\n0\n0\n0\n0\n1\n\nExplanation\nThere are three ways"
    },
    {
        "number": 4128,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a, b = [int(i) for i in stdin.split(' ')[1:]]\n    c = n // a\n    d = n % a\n    e = b // d\n    f = b % d\n    answer = [c, d, e, f]\n    for x in range(len(answer)):\n        if answer[x] == 0:\n            answer[x] = n // a\n            answer[x] -= d\n            answer[x] += f\n    print(sum(answer))\n\n-----Good luck!-----\n"
    },
    {
        "number": 4128,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    def count_ways(a, b):\n        if b == 0:\n            return 0\n        return count_ways(a, b - 1) + count_ways(a - 1, b)\n    return str(count_ways(a, b))\n"
    },
    {
        "number": 4128,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    a = n // q\n    b = n % q\n    if a == 0:\n        return str(b)\n    elif a == 1:\n        return str(q) + \"0\"\n    elif a == 2:\n        return str(q) + \"1\"\n    else:\n        return str(q) + str(a) + \"0\""
    },
    {
        "number": 4128,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(i) for i in stdin.split()]\n    b = [int(i) for i in stdin.split()]\n    return str(sum(a)//n) + '0' + str(sum(b)//n)\n    \n    \n"
    },
    {
        "number": 4129,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    m = int(stdin.strip())\n    s = int(stdin.strip())\n\n    def get_road(u, v):\n        road = []\n        for i in range(u, v+1):\n            road.append(i)\n            road.append(i)\n            road.append(i)\n        return road\n\n    def solution(s, n, m):\n        if n == 0 or m == 0 or s == 0:\n            return 0\n        if n == 1 and m == 1:\n            return s\n        if m == 1:\n            return s\n\n        if m < n:\n            return solution(s, n, m)\n        if m < n:\n            return solution(s, n, m)\n        if n < m:\n            return solution(s, n, m)\n\n        u_set = set()\n        v_set = set()\n        for u in range(1, n+1):\n            for v in range(u, n+1):\n                u_set.add(u)\n                v_set.add(v)\n        road = get_road(s, s)\n        u_set = u_set - v_set\n        v_set = v_set - u_set\n        road = road - v_set\n\n        answer = sum(road)\n        return answer\n\n    print(solution(s, n, m))"
    },
    {
        "number": 4129,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s = map(int, stdin.split())\n    answer = 0\n    if m < n:\n        answer = n + (m - n) // 2\n    elif n - m == 1:\n        answer = n\n    elif m - n < 0:\n        answer = n\n    else:\n        for i in range(n + 1, n + m - n):\n            answer = min(answer, 2 * i - n)\n    return str(answer)\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4129,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s = map(int, stdin.split())\n    if (n <= 5000 and m <= 5000 and s <= 5000):\n        return 0\n    if (n <= 5000 and m <= 5000 and s <= 5000 and m <= s and s <= n):\n        return sum(map(int, (n-s, m-s, s-n)))\n    else:\n        return -1"
    },
    {
        "number": 4129,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s = map(int, stdin.split())\n    if s not in range(1, n+1):\n        return 0\n    \n    t = list(map(int, stdin.split()))\n    \n    #print(t)\n    \n    cnt = 0\n    for i in t:\n        #print(i)\n        if i == s:\n            #print(\"Is A\", s)\n            if t.count(i) == 1:\n                continue\n            cnt += 1\n            \n        if i not in t:\n            #print(\"Is B\", i)\n            if t.count(i) == 1:\n                continue\n            cnt += 1\n            \n    return cnt\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= m <= 10^4\n0 <= s <= n\n\nTime Limit: O(n^2)\nSpace Limit: O(n)\n\n\n-----Tags-----\nLeetcode\nMedium\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###\n\n###"
    },
    {
        "number": 4129,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    u = n\n    v = m\n    # initialise queue with each element of list\n    queue = []\n    for i in range(n):\n        u, v = map(int, input().split())\n        # if it doesn't exist in queue add to queue\n        if u not in queue:\n            queue.append(u)\n        if v not in queue:\n            queue.append(v)\n    # sort the queue in ascending order by u\n    queue.sort()\n    while u!= n:\n        # if we can reach both u and v without putting it to queue\n        # add it to the queue\n        if u in queue and v in queue:\n            # pop the first element of queue to get one from queue\n            u = queue.pop(0)\n            # push the next element of queue to queue\n            # so we can get another element from queue\n            queue.append(u)\n        # if u and v not in queue add it to queue\n        # and then move the index of u to the front\n        elif u in queue and not v in queue:\n            queue.append(u)\n        # if both u and v not in queue add it to queue\n        # and then move the index of u to the front\n        elif not u in queue and not v in queue:\n            queue.append(v)\n    # if we can reach the end of queue\n    # return the number of extra roads\n    return len(queue)\n"
    },
    {
        "number": 4129,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s = list(map(int, stdin.split()))\n    \n    # 1. Check if all the cities are reachable from the capital.\n    #   => If the number of cities reachable from capital is equal to n, it means that all the cities are reachable from the capital\n    #   => otherwise, it is not.\n    #   => the number of cities reachable from capital = 0\n    #   => therefore, it is not.\n    if n > s:\n        return 0\n    \n    # 2. Create an array of all cities reachable from the capital.\n    #   => [0] => it means that all the cities reachable from capital are already reachable from all cities in the array\n    #   => the number of cities reachable from capital = 0\n    #   => therefore, it is not.\n    #   => [s] => it means that all the cities reachable from capital are reachable from all cities in the array.\n    #   => it is the answer.\n    #   => [n] => it means that all the cities reachable from capital are reachable from all cities in the array.\n    #   => it is the answer.\n    #   => [m] => it means that all the cities reachable from capital are reachable from all cities in the array.\n    #   => it is the answer.\n    #   => [s, n] => it means that all the cities reachable from capital are reachable from all cities in the array.\n    #   => it is the answer.\n    #   => [s, n, m] => it means that all the cities reachable from capital are reachable from all cities in the array.\n    #   => it is the answer.\n    #   => [s, n, m, s] => it means that all the cities reachable from capital are reachable from all cities in the array.\n    #   => it is the answer.\n    #   => [s, n, m, s, n] => it means that all the cities reachable from capital are reachable from all cities in the array.\n    #   => it is the answer.\n    #   => [s, n, m, s, n, m] => it means that all the cities reachable from capital are reachable from all cities in the array.\n    #   => it is the answer.\n    #   => [s, n, m, s, n, m, s] => it means that all the cities reachable from capital are reachable from all cities in the array.\n    #   => it is the answer.\n    #   => [s, n, m, s, n, m, s, n] => it means that all the cities reachable from capital are reachable from all cities in the array.\n    #   => it is the answer.\n    #   => [s, n, m, s, n, m, s, n, m] => it means that all the cities reachable from capital are reachable from all cities in the array.\n    #   => it is the answer.\n    #   => [s, n, m, s, n, m, s, n, m, s] => it means that all the cities reachable from capital are reachable from all cities in the array.\n    #   => it is the answer.\n    #   => [s, n, m, s, n, m, s, n, m, s, n, m] => it means that all the cities reachable from capital are reachable from all cities in the array.\n    #   => it is the answer.\n    #   => [s, n, m, s, n, m, s, n, m, s, n, m, s] => it means that all the cities reachable from capital are reachable from all cities in the array.\n    #   => it is the answer.\n    #   => [s, n, m, s, n, m, s, n, m, s, n, m, s] => it means that all the cities reachable from capital are reachable from all cities in the array.\n    #   => it is the answer.\n    #   => [s, n, m, s, n, m, s, n, m, s, n, m, s, n] => it means that all the cities reachable from capital are reachable from all cities in the array.\n    #   => it is the answer.\n    #   => [s, n, m, s, n, m, s, n, m, s, n, m, s, n] => it means that all the cities reachable from capital are reachable from all cities in the array.\n    #   => it is the answer.\n    #   => [s, n, m, s, n, m, s, n, m, s, n, m, s, n, m] => it means that all the cities reachable from capital are reachable from all cities in the array.\n    #   => it is the answer.\n    #   => [s, n, m, s, n, m, s, n, m, s, n, m, s, n, m] => it means that all the cities reachable from capital are reachable from all cities in the array.\n    #   => it is the answer.\n    #   => [s, n, m, s, n, m, s, n, m, s, n, m, s, n, m] => it means that all the cities reachable from capital are reachable from all cities in the array.\n    #   => it is the answer.\n    #   => [s, n, m, s, n, m, s, n, m, s, n, m, s, n, m] => it means that all the cities reachable from capital are reachable from all cities in the array.\n    #   => it is the answer.\n    #   => [s, n, m, s, n, m, s, n, m, s, n, m, s, n, m] => it means that all the cities reachable from capital are reachable from all cities in the array.\n    #   => it is the answer.\n    #   => [s, n, m, s, n, m, s, n, m, s, n, m, s, n, m] => it means that all the cities reachable from capital are reachable from all cities in the array.\n    #   => it is the answer.\n    #   => [s, n, m, s, n, m, s, n, m, s, n, m, s, n, m] => it means that all the cities reachable from capital are reachable from all cities in the array.\n    "
    },
    {
        "number": 4129,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s = map(int, stdin.split())\n    count = 0\n    u, v = 1, 0\n    for i in range(1, n+1):\n        u, v = u + 1, v + 1\n        if u >= n or v >= n:\n            break\n        elif u <= n and v <= n:\n            count += 1\n    return str(count)\n\nprint(solution(stdin))"
    },
    {
        "number": 4129,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    n,m,s = map(int,stdin.split())\n    \n    if not 0 < n <= 5000:\n        return 0\n    \n    \n    capitals = [i for i in range(n+1)]\n    \n    visited = [False for i in range(n+1)]\n    \n    \n    def bfs(s):\n        visited[s] = True\n        for i in range(len(capitals)):\n            if not visited[capitals[i]]:\n                for j in range(len(capitals)):\n                    if not visited[capitals[j]] and capitals[i]!= capitals[j]:\n                        capitals[j],capitals[i] = capitals[i],capitals[j]\n                        bfs(capitals[i])\n                        capitals[i] = capitals[j]\n        return capitals\n    \n    \n    answer = len(capitals)\n    if m < n:\n        answer += len(capitals) - (m-n)\n        \n    \n    for i in range(m-1, n):\n        capitals = bfs(i)\n        \n        if len(capitals) == m:\n            answer += 1\n            \n    return answer\n\nsolution(input())"
    },
    {
        "number": 4129,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s = map(int, stdin.split())\n    graph = [[] for _ in range(n+1)]\n    \n    for _ in range(m):\n        u, v = map(int, stdin.split())\n        graph[u].append(v)\n        graph[v].append(u)\n    \n    for i in range(1, n+1):\n        graph[i].sort()\n    \n    answer = 0\n    \n    def bfs(u, s):\n        queue = [s]\n        visited = set()\n        visited.add(s)\n        while queue:\n            cur = queue.pop(0)\n            \n            for next in graph[cur]:\n                if next not in visited:\n                    visited.add(next)\n                    queue.append(next)\n        return len(visited)\n    \n    for i in range(s, n+1):\n        answer += bfs(i, s)\n    \n    return answer\n\n\nfor _ in range(int(input())):\n    n, m, s = map(int, input().split())\n    graph = [[] for _ in range(n+1)]\n    \n    for _ in range(m):\n        u, v = map(int, input().split())\n        graph[u].append(v)\n        graph[v].append(u)\n    \n    for i in range(1, n+1):\n        graph[i].sort()\n    \n    answer = 0\n    \n    def dfs(u, s):\n        if u == s:\n            return 1\n        queue = [u]\n        visited = set()\n        visited.add(u)\n        while queue:\n            cur = queue.pop()\n            if cur not in visited:\n                visited.add(cur)\n                if cur == s:\n                    return 0\n                else:\n                    answer += dfs(cur, s)\n                queue.extend(graph[cur])\n        return answer\n    \n    for i in range(s, n+1):\n        answer += dfs(i, s)\n    \n    print(answer)"
    },
    {
        "number": 4129,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s = map(int, stdin.split())\n\n    new_roads = [[] for _ in range(m)]\n    for i in range(m):\n        for j in range(n):\n            new_roads[i].append(j + 1)\n\n    def check_pair(u, v):\n        for u_i, v_i in new_roads[u]:\n            if u_i == v_i:\n                return False\n        return True\n\n    def check_all_roads(u, v, d=0):\n        for u_i, v_i in new_roads[u]:\n            if check_pair(u_i, v_i) and check_all_roads(v_i, u_i, d + 1):\n                return d\n        return -1\n\n    if check_all_roads(s, 1):\n        return 0\n    if check_all_roads(s, 2):\n        return 0\n    if check_all_roads(s, 3):\n        return 0\n    if check_all_roads(s, 4):\n        return 0\n    return -1\n"
    },
    {
        "number": 4130,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    max_num = 0\n    for i in range(0, n):\n        if a[i] > max_num:\n            max_num = a[i]\n    return str(max_num)\n\nprint(solution(\"4 3 4 1\"))\n\"\"\""
    },
    {
        "number": 4130,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int,stdin.split()[1:]))\n    n_team = list(map(int,stdin.split()[1:]))\n    answer = -1\n    for i in range(n):\n        team_boxers = list(map(int,stdin.split()[1:]))\n        team_weight = [0] * len(n_team)\n        for j in range(len(team_boxers)):\n            team_weight[n_team[j]] += team_boxers[j]\n        min_team_weight = min(team_weight)\n        if min_team_weight > 0:\n            for j in range(len(team_weight)):\n                if team_weight[j] > min_team_weight:\n                    min_team_weight = team_weight[j]\n            for j in range(len(team_weight)):\n                if team_weight[j] == min_team_weight:\n                    team_weight[j] -= 1\n    answer = min(team_weight)\n    return str(answer)\n\n[3,4,2,2,1]"
    },
    {
        "number": 4130,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    data = []\n    for i in range(n):\n        data.append(int(stdin.strip()))\n\n    result = max(data)\n    result = str(result)\n    print(result)\n    return result\n"
    },
    {
        "number": 4130,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a_list = list(map(int, stdin.split()))\n    # n > 0 means that there are at least two elements\n    if n == 0:\n        return ''\n    \n    boxes = sorted(set(a_list))\n    \n    if len(boxes) > 1:\n        # use greedy approach\n        # boxes[0] = boxes[len(boxes)-1]\n        boxes.remove(boxes[0])\n        boxes.remove(boxes[0])\n        boxes.remove(boxes[0])\n        boxes.append(boxes[-1])\n        boxes.pop(0)\n    \n    answer = 0\n    \n    for i in range(1, n + 1):\n        current_boxes = a_list[i-1]\n        for box in boxes:\n            # can't have a weight of zero\n            if box < 0:\n                break\n            \n            if box > current_boxes:\n                answer += 1\n                break\n    \n    return str(answer)\n\nInput\n5\n1 1 1 1 4 4\nOutput\n4\n\nInput\n2\n4 4 4 2\nOutput\n3\nExplanation\n\nFirst, the team first creates a team of boxes with weights of $1$ and $4$, and then each team gets a weight of $3$. Thus, each team can now have a box in the following team:\n\nBox 1: $1$, $2$, $3$, $4$.\nBox 2: $1$, $2$, $2$, $4$.\nBox 3: $1$, $1$, $2$, $3$.\nBox 4: $1$, $1$, $2$, $2$.\nAfter each team gets the maximum possible number of boxers in a team, we have the team with a team of boxes:\n\nBox 1: $4$, $3$, $2$, $1$.\nBox 2: $1$, $1$, $2$, $3$.\nBox 3: $2$, $2$, $2$, $4$.\nBox 4: $2$, $2$, $2$, $4$.\nAfter the team gets the maximum possible number of boxers, the team receives two boxers:\n\nBox 1: $1$, $2$, $3$, $4$.\nBox 2: $3$, $2$, $2$, $4$.\n\n\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4130,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, boxers = map(int, stdin.split())\n    team = [0]*n\n    for _ in range(n):\n        team[int(stdin.split()[1])-1] += 1\n    answer = 0\n    for i in range(n):\n        if team[i]!= 0:\n            answer += team[i]\n    return str(answer)\n\nInput\n5\n1 1 1 4 4 4\n\nOutput\n2\n\nInput\n6\n2 4 3 2 1\n\nOutput\n3\n\ndef"
    },
    {
        "number": 4130,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip().split()[0])\n    a = []\n    for i in range(n):\n        a.append(int(stdin.strip().split()[i+1]))\n    answer = '1'\n    for i in a:\n        a[a.index(i)] = max(a[a.index(i)], a[a.index(i) + 1]) + 1\n    for i in a:\n        if i % 10 == 0:\n            answer = '{}'.format(i)\n    return answer\n"
    },
    {
        "number": 4130,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = []\n    for _ in range(n):\n        a.append(int(stdin.split()[0]))\n    a.sort()\n    print(a[-1])\n    \n    for i in range(1, len(a)):\n        if a[i] - a[i - 1] <= 2:\n            return a[i]\n\nprint(solution(\"1 3 1 4 1 2 4\"))"
    },
    {
        "number": 4130,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    all_boxes = sorted(list(map(int, stdin.split())))\n    a = 1\n    b = len(all_boxes)\n    while b > 0:\n        for i in range(a, b):\n            weight = all_boxes[i]\n            if weight!= a:\n                a += weight\n                b -= 1\n    if a < b:\n        return 'No'\n    else:\n        return a\n\n\n-----Test-----\nInput\n6\n1 1 1 4 4 4\n4\n\nOutput\nNo\n\nInput\n4\n1 1 1 4 4 4\n1\n\nOutput\nNo\n\n-----Problem-----\nTime Limit: 1 second\nMemory Limit: 256 MB\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        n = int(stdin)\n        all_boxes = sorted(list(map(int, stdin.split())))\n        a = 1\n        b = len(all_boxes)\n        while b > 0:\n            for i in range(a, b):\n                weight = all_boxes[i]\n                if weight!= a:\n                    a += weight\n                    b -= 1\n        if a < b:\n            return 'No'\n        else:\n            return a\n"
    },
    {
        "number": 4130,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.split()[1])\n    stdin.remove(stdin.split()[1])\n    b = int(stdin.split()[1])\n    stdin.remove(stdin.split()[1])\n    c = int(stdin.split()[1])\n    stdin.remove(stdin.split()[1])\n    d = int(stdin.split()[1])\n    stdin.remove(stdin.split()[1])\n    e = int(stdin.split()[1])\n    stdin.remove(stdin.split()[1])\n    f = int(stdin.split()[1])\n    stdin.remove(stdin.split()[1])\n    g = int(stdin.split()[1])\n    stdin.remove(stdin.split()[1])\n    h = int(stdin.split()[1])\n    stdin.remove(stdin.split()[1])\n    i = int(stdin.split()[1])\n    stdin.remove(stdin.split()[1])\n    j = int(stdin.split()[1])\n    stdin.remove(stdin.split()[1])\n    k = int(stdin.split()[1])\n    stdin.remove(stdin.split()[1])\n    l = int(stdin.split()[1])\n    stdin.remove(stdin.split()[1])\n    m = int(stdin.split()[1])\n    stdin.remove(stdin.split()[1])\n    n = int(stdin.split()[1])\n    stdin.remove(stdin.split()[1])\n    \n    \n    s = []\n    s.append(a)\n    s.append(b)\n    s.append(c)\n    s.append(d)\n    s.append(e)\n    s.append(f)\n    s.append(g)\n    s.append(h)\n    s.append(i)\n    s.append(j)\n    s.append(k)\n    s.append(l)\n    s.append(m)\n    s.append(n)\n    \n    ans = sorted(s, reverse=True)\n    answer = str(ans[0])\n    \n    return answer"
    },
    {
        "number": 4130,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a_i = int(stdin[n//2])\n    \n    if n==1:\n        return \"5\"\n    elif n==2:\n        return \"4\"\n    elif n==3:\n        return \"3\"\n    elif n==4:\n        return \"2\"\n    elif n==5:\n        return \"1\"\n    else:\n        for i in range(n,0,-1):\n            a_i = a_i * a_i // n\n            if a_i==1:\n                return \"1\"\n            elif a_i==n+1:\n                return \"3\"\n            elif a_i==n-1:\n                return \"5\"\n            else:\n                pass\n        \n"
    },
    {
        "number": 4131,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    P_1, Y_1 = map(int, stdin.split())\n    P_2, Y_2 = map(int, stdin.split())\n    P_3, Y_3 = map(int, stdin.split())\n    P_4, Y_4 = map(int, stdin.split())\n    P_5, Y_5 = map(int, stdin.split())\n    \n    def f(X):\n        if not X:\n            return \"00000\"\n        if X[0] > Y_1:\n            return f(X[1:] + [X[0] - Y_1] + X[1:])\n        else:\n            return f(X[1:] + [X[0]] + X[1:] + [X[0] - Y_1] + X[1:])\n    \n    P_i = P_1\n    Y_i = Y_1\n    Y_j = Y_2\n    Y_k = Y_3\n    Y_l = Y_4\n    Y_m = Y_5\n    Y_n = Y_1\n    \n    if not P_1 == P_2 == P_3 == P_4 == P_5:\n        Y_i = max(Y_i - 1, 1)\n        Y_j = max(Y_j - 1, 1)\n        Y_k = max(Y_k - 1, 1)\n        Y_l = max(Y_l - 1, 1)\n        Y_m = max(Y_m - 1, 1)\n        Y_n = max(Y_n - 1, 1)\n    \n    f = lambda X: f(X[1:] + [X[0]] + X[1:])\n    \n    result = [str(f(x)) for x in range(1,N+1)]\n    for i in range(N+1):\n        if i == 1:\n            result[i] = f(f(result[i]))\n        else:\n            result[i] = f(f(result[i]))\n            \n    for i in range(M+1):\n        if i == 1:\n            result[i] = f(f(result[i]))\n        else:\n            result[i] = f(f(result[i]))\n            \n    return \"\".join(result)"
    },
    {
        "number": 4131,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    P_1, P_M = map(int, stdin.split())\n    cities = []\n    for i in range(N):\n        cities.append(str(i + 1))\n    cities.sort()\n    for i in range(M):\n        for j in range(len(cities)):\n            if i == j:\n                continue\n            cities[j] = str(i + 1) + \"-\" + cities[j]\n    answer = \"\".join(cities)\n    return answer\n\"\"\"\nclass Solution:\n    def __init__(self):\n        self.preference = collections.defaultdict(list)\n        self.cache = collections.defaultdict(int)\n        \n        \n    def getCities(self, M: int, N: int, P_1: int, P_M: int) -> list:\n        answer = []\n        self.cache[(M, N, P_1, P_M)] += 1\n        for city in range(N):\n            if city == P_1:\n                continue\n            if city == P_M:\n                continue\n            if self.cache[(M, N, city, city)] > 0:\n                answer.append(city)\n                self.cache[(M, N, city, city)] -= 1\n        return answer\n        \n    def addPrefix(self, M: int, P_1: int, P_M: int, answer: list) -> None:\n        cities = self.getCities(M, N, P_1, P_M)\n        for city in cities:\n            self.preference[city].append(answer)\n            self.cache[(M, N, city, city)] += 1\n        \n    def getAnswer(self, N: int, M: int, P_1: int, P_M: int, cities: list) -> str:\n        self.addPrefix(M, P_1, P_M, cities)\n        answer = []\n        for city in cities:\n            answer.extend(self.preference[city])\n            answer.sort()\n        return answer\n\"\"\"\n\nclass Solution:\n    def __init__(self):\n        self.preference = collections.defaultdict(list)\n        self.cache = collections.defaultdict(int)\n        \n    def getCities(self, M: int, N: int, P_1: int, P_M: int) -> list:\n        answer = []\n        self.cache[(M, N, P_1, P_M)] += 1\n        for city in range(N):\n            if city == P_1:\n                continue\n            if city == P_M:\n                continue\n            if self.cache[(M, N, city, city)] > 0:\n                answer.append(city)\n                self.cache[(M, N, city, city)] -= 1\n        return answer\n    \n    def addPrefix(self, M: int, P_1: int, P_M: int, answer: list) -> None:\n        cities = self.getCities(M, N, P_1, P_M)\n        for city in cities:\n            self.preference[city].append(answer)\n            self.cache[(M, N, city, city)] += 1\n        \n    def getAnswer(self, N: int, M: int, P_1: int, P_M: int, cities: list) -> str:\n        self.addPrefix(M, P_1, P_M, cities)\n        answer = []\n        for city in cities:\n            answer.extend(self.preference[city])\n            answer.sort()\n        return answer\n\"\"\"\n\nclass Solution:\n    def __init__(self):\n        self.preference = collections.defaultdict(list)\n        self.cache = collections.defaultdict(int)\n        \n    def getCities(self, M: int, N: int, P_1: int, P_M: int) -> list:\n        answer = []\n        self.cache[(M, N, P_1, P_M)] += 1\n        for city in range(N):\n            if city == P_1:\n                continue\n            if city == P_M:\n                continue\n            if self.cache[(M, N, city, city)] > 0:\n                answer.append(city)\n                self.cache[(M, N, city, city)] -= 1\n        return answer\n    \n    def addPrefix(self, M: int, P_1: int, P_M: int, answer: list) -> None:\n        cities = self.getCities(M, N, P_1, P_M)\n        for city in cities:\n            self.preference[city].append(answer)\n            self.cache[(M, N, city, city)] += 1\n        \n    def getAnswer(self, N: int, M: int, P_1: int, P_M: int, cities: list) -> str:\n        self.addPrefix(M, P_1, P_M, cities)\n        answer = []\n        for city in cities:\n            answer.extend(self.preference[city])\n            answer.sort()\n        return answer\n"
    },
    {
        "number": 4131,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, M, P_1, P_2, P_3 = map(int, stdin.strip().split())\n    Y_1 = list(map(int, stdin.strip().split()))\n    Y_2 = list(map(int, stdin.strip().split()))\n    Y_3 = list(map(int, stdin.strip().split()))\n    Y_1.sort()\n    Y_2.sort()\n    Y_3.sort()\n    for y in range(len(Y_1)):\n        if Y_1[y] <= M:\n            break\n    for y in range(len(Y_2)):\n        if Y_2[y] <= P_1:\n            break\n    for y in range(len(Y_3)):\n        if Y_3[y] <= P_2:\n            break\n    print(' '.join(map(str, Y_1[:8])))\n    print(' '.join(map(str, Y_2[:8])))\n    print(' '.join(map(str, Y_3[:8])))\n    return''.join(map(str, Y_1[:8])) +'' +''.join(map(str, Y_2[:8])) +'' +''.join(map(str, Y_3[:8]))\n\n\ndef"
    },
    {
        "number": 4131,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    P_1, Y_1 = map(int, stdin.split())\n    P_m, Y_m = map(int, stdin.split())\n    p_m = (M - P_m) / M\n    p_1 = (P_1 - Y_1) / P_1\n    p_m_1 = (M - P_m) / M\n    if p_m_1 >= p_m:\n        p_m = p_m_1\n    if p_1 >= p_m:\n        p_1 = p_1\n    n = N - 1\n    if N % M!= 0:\n        print(int((n - p_m) / p_m))\n        return\n    elif N % M == 0 and M == 1:\n        print(int(n))\n        return\n    while n < N:\n        if n % p_m == 0:\n            print(int(n / p_m))\n            return\n        elif n % p_1 == 0:\n            print(int(n / p_m_1))\n            return\n        n += 1\n    print(int((n - p_m) / p_m))\n    return\n\n-----Sample Input-----\n2 3\n1 32\n2 63\n1 12\n\n-----Sample Output-----\n000001000002\n000002000001\n000001000001\n\n-----Explanation-----\nThe ID numbers for all the cities are stored in the array ID_list, where ID_i is the ID number of the corresponding city in city_list[i].\nFor example, ID_list = [000002000001, 000001000001, 000001000001, 000001000001] means all cities belongs to city_list[1].\nThe ID number of city 1 belongs to prefecture 1.\nThe ID number of city 2 belongs to prefecture 2.\nThe ID number of city 3 belongs to prefecture 1.\nThe ID number of city 4 belongs to prefecture 2.\nThe ID number of city 5 belongs to prefecture 1.\nSo, for example, ID_list = [000002000001, 000001000001, 0002, 0003, 0004, 0005, 0006] means city 1 belongs to prefecture 1, city 2 belongs to prefecture 2, city 3 belongs to prefecture 1, and city 4 belongs to prefecture 2.\n\n-----Input Format-----\nThe first line contains an integer, N, denoting the number of cities and the number of prefectures.\nThe next line contains N space separated integers, the IDs of the cities.\nThe next line contains M space separated integers, the IDs of the prefectures.\nThe next line contains M space separated integers, the IDs of the cities.\n\n-----Output Format-----\nPrint the ID numbers for all the cities, in ascending order of indices.\n\n-----Sample Input-----\n2 3\n1 32\n2 63\n1 12\n\n-----Sample Output-----\n000001000002\n000002000001\n000001000001\n\n-1 0 0\n-1 0 1\n-1 0 2\n-1 0 3\n-1 0 4\n-1 0 5\n-1 0 6\n\n-2 1 0\n-2 1 1\n-2 1 2\n-2 1 3\n-2 1 4\n-2 1 5\n-2 1 6\n-2 1 7\n-2 1 8\n-2 1 9\n-2 1 10\n-2 1 11\n-2 1 12\n-2 1 13\n-2 1 14\n-2 1 15\n-2 1 16\n-2 1 17\n-2 1 18\n-2 1 19\n-2 1 20\n-2 1 21\n-2 1 22\n-2 1 23\n-2 1 24\n-2 1 25\n-2 1 26\n-2 1 27\n-2 1 28\n-2 1 29\n-2 1 30\n-2 1 31\n-2 1 32\n-2 1 33\n-2 1 34\n-2 1 35\n-2 1 36\n-2 1 37\n-2 1 38\n-2 1 39\n-2 1 40\n-2 1 41\n-2 1 42\n-2 1 43\n-2 1 44\n-2 1 45\n-2 1 46\n-2 1 47\n-2 1 48\n-2 1 49\n-2 1 50\n-2 1 51\n-2 1 52\n-2 1 53\n-2 1 54\n-2 1 55\n-2 1 56\n-2 1 57\n-2 1 58\n-2 1 59\n-2 1 60\n-2 1 61\n-2 1 62\n-2 1 63\n-2 1 64\n-2 1 65\n-2 1 66\n-2 1 67\n-2 1 68\n-2 1 69\n-2 1 70\n-2 1 71\n-2 1 72\n-2 1 73\n-2 1 74\n-2 1 75\n-2 1 76\n-2 1 77\n-2 1 78\n-2 1 79\n-2 1 80\n-2 1 81\n-2 1 82\n-2 1 83\n-2 1 84\n-2 1 85\n-2 1 86\n-2 1 87\n-2 1 88\n-2 1 89\n-2 1 90\n-2 1 91\n-2 1 92\n-2 1 93\n-2 1 94\n-2 1 95\n-2 1 96\n-2 1 97\n-2 1 98\n-2 1 99\n-2 1 100\n-2 1 101\n-2 1 102\n-2 1 103\n-2 1 104\n-2 1 105\n-2 1 106\n-2 1 107\n-2 1 108\n-2 1 109\n-2 1 110\n-2 1 111\n-2 1 112\n-2 1 113\n-2 1 114\n-2 1 115\n-2 1 116\n-2 1 117\n-2 1 118\n-2 1 119\n-2 1 120\n-2 1 121\n-2 1 122\n-2 1 123\n-2 1 124\n-2 1 125\n-2 1 126\n-2 1 127\n-2 1 128\n-2 1 129\n-2 1 130\n-2 1 131\n-2 1 132\n-2 1 133\n-2 1 134\n-2 1 135\n-2 1 136\n-2 1 137\n-2 1 138\n-2 1 139\n-2 1 140\n-2 1 141\n-2 1 142\n-2 1 143\n-2 1 144\n-2 1 145\n-2 1 146\n-2 1 147\n-2 1 148\n-2 1 149\n-2 1 150\n-2 1 151\n-2 1 152\n-2 1 153\n-2 1 154\n-2 1 155\n-2 1 156\n-2 1 157\n-2 1 158\n-2 1 159\n-2 1 160\n-2 1 161\n-2 1 162\n-2 1 163\n-2 1 164\n-2 1 165\n-2 1 166\n-2 1 167\n-2 1 168\n-2 1 169\n-2 1 170"
    },
    {
        "number": 4131,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    P1, P2 = map(int, stdin.split())\n    P = N * M - N + 1\n    Y = int(math.sqrt(P))\n    ids = [i for i in range(N, N + Y, 1)]\n    lst = []\n    for _ in range(P):\n        lst.append(ids.pop(0))\n    for id in lst:\n        for i in range(id):\n            ids.append(i)\n    for i in range(N, N + Y, 1):\n        for j in range(i, N + 1, 1):\n            if j not in ids:\n                ids.append(j)\n    answer = ''.join(map(str, ids))\n    return answer"
    },
    {
        "number": 4131,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    P_1, P_2, P_3 = map(int, stdin.split())\n    Y_1 = N * 100 + M\n    cities = []\n    for i in range(N):\n        city_number = int(str(i + 1) * 100 + str(i + 1), 10)\n        cities.append((i, city_number))\n    cities.sort(key=lambda x: (x[1], x[0]))\n    res = \"\"\n    for city in cities:\n        id_1, id_2, id_3 = city\n        if P_1 <= id_1 < P_2 or P_2 <= id_2 < P_3:\n            id_1 -= 1\n            id_2 -= 1\n            id_3 -= 1\n            res += str(id_1) + \" \" + str(id_2) + \" \" + str(id_3) + \" \"\n    return res.strip()\n"
    },
    {
        "number": 4131,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    N, M, P = map(int, stdin.split())\n    \n    first = [N, N, P] + [N + i for i in range(M - 1)]\n    last = [P, P, N] + [N + i for i in range(M - 1)]\n    last.sort()\n    \n    for city in first:\n        if city < 0:\n            city += 10 ** 6\n            \n    for city in last:\n        if city < 0:\n            city += 10 ** 6\n            \n    answer = ''.join([str(x) for x in sorted(last + first)])\n    \n    return answer"
    },
    {
        "number": 4131,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, M, P = map(int, stdin.split())\n    preferences = {str(i+1): str(i+1) for i in range(N)}\n    city_id = [str(i+1) for i in range(N)]\n    city_id_order = sorted(city_id, key=lambda x: preferences[x])\n    y_order = sorted(city_id_order, key=lambda x: preferences[x])\n    id_id_order = []\n    for i in range(M):\n        id_id_order.append(city_id_order[i] + str(i+1))\n    id_id_order = sorted(id_id_order)\n    city_id_order = [id_id_order[i] for i in range(M)]\n    for y in range(1, len(id_id_order)):\n        if id_id_order[y] == id_id_order[y-1] or id_id_order[y] == str(y+1):\n            id_id_order[y] = '00000000000000'\n            id_id_order[y-1] = '00000000000000'\n            id_id_order[y] = '00000000000000'\n    print(''.join(id_id_order))\n    return ''.join(id_id_order)\n"
    },
    {
        "number": 4131,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    city_list = [list(map(int, input().split())) for _ in range(n)]\n    city_id_list = []\n    for _ in range(m):\n        city_id_list.append(list(map(int, input().split())))\n\n    def find_id(city_id_list):\n        if len(city_id_list) == n:\n            return city_id_list\n\n        P_i = max(city_id_list)\n        if len(city_id_list) == 1:\n            if city_id_list[0] > P_i:\n                return []\n            elif city_id_list[0] == P_i:\n                return city_id_list\n        P_i = max(city_id_list[:m])\n        if len(city_id_list) == m:\n            return city_id_list\n\n        x = min(city_id_list[:m])\n        if len(city_id_list) == m:\n            return []\n\n        y = max(city_id_list[m:])\n        if len(city_id_list) == m:\n            return city_id_list\n\n        if city_id_list[0] > x:\n            return []\n        else:\n            return city_id_list\n\n    return find_id(city_id_list)\n"
    },
    {
        "number": 4131,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, m = map(int, stdin.split())\n    p, y = map(int, stdin.split())\n\n    res = \"\"\n\n    for _ in range(m):\n        a = list(map(int, stdin.split()))\n        p = p - a[0]\n        y = y - a[1]\n        if p < 0 or y < 0:\n            res += '0' * (p + y)\n        else:\n            res += '1' * p\n            res += '0' * y\n        res += '\\n'\n    \n    return res"
    },
    {
        "number": 4132,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    from collections import deque\n    N,A_1,A_2,A_3 = map(int,stdin.split())\n    _q = deque([[A_1,A_2,0]])\n    _q.append([A_3,0,0])\n    while _q:\n        temp,a,l = _q.popleft()\n        if a==N:\n            return str(l)\n        if a%10==1:\n            _q.append([a//10,a%10,l+1])\n        if a%10==2:\n            _q.append([a//10,a%10,l+2])\n    return str(-1)\n\n\"\"\"\nN, A_1, A_2, A_3 = map(int,input().split())\n\nprint(min(A_1,A_2,A_3))\n\"\"\""
    },
    {
        "number": 4132,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, A = map(int, stdin.split())\n    m = [0] + [A for _ in range(n)]\n    return \"\".join(map(str, sorted(m, key=m.index, reverse=True)))\n"
    },
    {
        "number": 4132,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N,A = map(int, stdin.split())\n    health_list = [0]*N\n    for i in range(N):\n        health_list[i] = int(A/N)\n    alive = []\n    for i in range(N):\n        alive.append(A-health_list[i])\n    alive.sort()\n    print(alive[-1])\n    \n\n-----Sample Output-----\n2\n\nWhen only the first monster keeps on attacking, the final health of the last monster will be 2, which is minimum.\n"
    },
    {
        "number": 4132,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    a = a % 2\n    a = min(a, b)\n    a = a + 2\n    print(a)\n    return str(a)\n\n-----Explanation-----\nTo find the final health of the last monster alive, the initial health of the first monster is 2, and the remaining health of the second monster is 2.\n\nExplanation\nTo find the final health of the last monster alive, the initial health of the first monster is 2, and the remaining health of the second monster is 2.\n\n1. Set the variables a and b to their first and second numbers respectively.\n2. Set a = 2 and b = 2 to perform the following operations in this order:\na = 1\nb = 2\na = 1\nb = 3\na = 2\nb = 2\na = 2\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb = 3\na = 3\nb"
    },
    {
        "number": 4132,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, A_1, A_2,..., A_N = map(int, stdin.split(' '))\n    lst = []\n    for i in range(N):\n        lst.append((A_1 * A_2 * (i + 1), A_1 * A_2))\n    for _ in range(N - 1):\n        lst.append((A_1 * A_2 * _ + (A_1 * A_2 + 1) * (i + 1), A_1 * A_2 + 1))\n    lst.sort()\n    minimum = 0\n    for i in range(N - 1):\n        minimum = A_1 * A_2 * (i + 1) + minimum * (i + 1)\n    return str(minimum)\n\n\n-----Sample Output-----\n3\n\nWhen only the first monster keeps on attacking, the final health of the last monster will be 3, which is minimum.\ndef"
    },
    {
        "number": 4132,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    A = [int(i) for i in stdin.split()]\n    A = [i for i in A if i >= 0]\n    if len(A) < 2:\n        return \"Invalid\"\n    A.sort(reverse=True)\n    a, b, c, d, e = A\n    i = N // 2\n    result = (i + 1) * a + b * (N - i) + c * (N - i) + d * (N - i) + e * (N - i)\n    return str(result)\n"
    },
    {
        "number": 4132,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    # print(N, A, B)\n    return str(min(A, B, key=A-B))"
    },
    {
        "number": 4132,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n        \n        return str(min([int(i) for i in stdin.split()]))\n\n\ndef"
    },
    {
        "number": 4132,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    A = list(map(int, stdin.strip().split()))\n    A.sort()\n    A.append(A[-1])\n    A.insert(0, 0)\n    A.append(A[-1])\n    answer = A[-1]\n    for i in range(N-2):\n        A.append(A[i+1])\n        A.append(A[i+1] - A[i])\n        A.pop()\n    print(max(A))\n    return str(answer)\n\n\"\"\"\nimport collections\nclass Solution:\n    def solution(self, stdin):\n        N,A = map(int, stdin.strip().split())\n        self.A = [A]\n        self.nums = collections.defaultdict(int)\n        for _ in range(N):\n            self.A.append(int(stdin.strip()))\n        \n        def update(nums):\n            for i in range(1, N):\n                nums[i] += nums[i-1]\n                \n        def dfs(nums):\n            if len(nums) == N:\n                return self.A[0]\n            \n            next_num = nums.pop(0)\n            \n            if next_num in self.nums:\n                return next_num\n            else:\n                if nums:\n                    nums[0] -= next_num\n                    return dfs(nums)\n                else:\n                    self.nums[nums[0]] += 1\n                    return nums[0]\n                    \n        answer = dfs(self.nums.copy())\n        print(answer)\n        return str(answer)\n"
    },
    {
        "number": 4132,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n  N = int(stdin.split()[0])\n  A_1 = int(stdin.split()[1])\n  A_2 = int(stdin.split()[2])\n  A_3 = int(stdin.split()[3])\n  A_4 = int(stdin.split()[4])\n  A_5 = int(stdin.split()[5])\n  A_6 = int(stdin.split()[6])\n  A_7 = int(stdin.split()[7])\n  A_8 = int(stdin.split()[8])\n  A_9 = int(stdin.split()[9])\n  A_10 = int(stdin.split()[10])\n  A_11 = int(stdin.split()[11])\n  A_12 = int(stdin.split()[12])\n  A_13 = int(stdin.split()[13])\n  A_14 = int(stdin.split()[14])\n  A_15 = int(stdin.split()[15])\n  A_16 = int(stdin.split()[16])\n  A_17 = int(stdin.split()[17])\n  A_18 = int(stdin.split()[18])\n  A_19 = int(stdin.split()[19])\n  A_20 = int(stdin.split()[20])\n  A_21 = int(stdin.split()[21])\n  A_22 = int(stdin.split()[22])\n  A_23 = int(stdin.split()[23])\n  A_24 = int(stdin.split()[24])\n  A_25 = int(stdin.split()[25])\n  A_26 = int(stdin.split()[26])\n  A_27 = int(stdin.split()[27])\n  A_28 = int(stdin.split()[28])\n  A_29 = int(stdin.split()[29])\n  A_30 = int(stdin.split()[30])\n  A_31 = int(stdin.split()[31])\n  A_32 = int(stdin.split()[32])\n  A_33 = int(stdin.split()[33])\n  A_34 = int(stdin.split()[34])\n  A_35 = int(stdin.split()[35])\n  A_36 = int(stdin.split()[36])\n  A_37 = int(stdin.split()[37])\n  A_38 = int(stdin.split()[38])\n  A_39 = int(stdin.split()[39])\n  A_40 = int(stdin.split()[40])\n  A_41 = int(stdin.split()[41])\n  A_42 = int(stdin.split()[42])\n  A_43 = int(stdin.split()[43])\n  A_44 = int(stdin.split()[44])\n  A_45 = int(stdin.split()[45])\n  A_46 = int(stdin.split()[46])\n  A_47 = int(stdin.split()[47])\n  A_48 = int(stdin.split()[48])\n  A_49 = int(stdin.split()[49])\n  A_50 = int(stdin.split()[50])\n  A_51 = int(stdin.split()[51])\n  A_52 = int(stdin.split()[52])\n  A_53 = int(stdin.split()[53])\n  A_54 = int(stdin.split()[54])\n  A_55 = int(stdin.split()[55])\n  A_56 = int(stdin.split()[56])\n  A_57 = int(stdin.split()[57])\n  A_58 = int(stdin.split()[58])\n  A_59 = int(stdin.split()[59])\n  A_60 = int(stdin.split()[60])\n  A_61 = int(stdin.split()[61])\n  A_62 = int(stdin.split()[62])\n  A_63 = int(stdin.split()[63])\n  A_64 = int(stdin.split()[64])\n  A_65 = int(stdin.split()[65])\n  A_66 = int(stdin.split()[66])\n  A_67 = int(stdin.split()[67])\n  A_68 = int(stdin.split()[68])\n  A_69 = int(stdin.split()[69])\n  A_70 = int(stdin.split()[70])\n  A_71 = int(stdin.split()[71])\n  A_72 = int(stdin.split()[72])\n  A_73 = int(stdin.split()[73])\n  A_74 = int(stdin.split()[74])\n  A_75 = int(stdin.split()[75])\n  A_76 = int(stdin.split()[76])\n  A_77 = int(stdin.split()[77])\n  A_78 = int(stdin.split()[78])\n  A_79 = int(stdin.split()[79])\n  A_80 = int(stdin.split()[80])\n  A_81 = int(stdin.split()[81])\n  A_82 = int(stdin.split()[82])\n  A_83 = int(stdin.split()[83])\n  A_84 = int(stdin.split()[84])\n  A_85 = int(stdin.split()[85])\n  A_86 = int(stdin.split()[86])\n  A_87 = int(stdin.split()[87])\n  A_88 = int(stdin.split()[88])\n  A_89 = int(stdin.split()[89])\n  A_90 = int(stdin.split()[90])\n  A_91 = int(stdin.split()[91])\n  A_92 = int(stdin.split()[92])\n  A_93 = int(stdin.split()[93])\n  A_94 = int(stdin.split()[94])\n  A_95 = int(stdin.split()[95])\n  A_96 = int(stdin.split()[96])\n  A_97 = int(stdin.split()[97])\n  A_98 = int(stdin.split()[98])\n  A_99 = int(stdin.split()[99])\n  A_100 = int(stdin.split()[100])\n  A_101 = int(stdin.split()[101])\n  A_102 = int(stdin.split()[102])\n  A_103 = int(stdin.split()[103])\n  A_104 = int(stdin.split()[104])\n  A_105 = int(stdin.split()[105])\n  A_106 = int(stdin.split()[106])\n  A_107 = int(stdin.split()[107])\n  A_108 = int(stdin.split()[108])\n  A_109 = int(stdin.split()[109])\n  A_110 = int(stdin.split()[110])\n  A_111 = int(stdin.split()[111])"
    },
    {
        "number": 4133,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    count = 0\n    \n    stdin.rstrip()\n    \n    for i in range(n):\n        string = stdin.rstrip()\n        for j in range(n-i):\n            if string[j:j+i] in jar:\n                count+=1\n                string = string[:j]+string[j+i]+string[j+i+1:]\n        if string[0:i] in jar:\n            count+=1\n            string = string[:i]+string[i+1:]\n        if string[-1:i] in jar:\n            count+=1\n            string = string[:-1]+string[i:len(string)-1]\n        if string[:i] in jar:\n            count+=1\n            string = string[:i]+string[i+1:]\n        if string[-1:] in jar:\n            count+=1\n            string = string[:-1]+string[len(string)-1:]\n        if count >= len(jar):\n            return \"false\"\n        string = string[:len(string)-1]\n    return \"true\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4133,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split(\" \")\n    if len(words) < 2:\n        return \"false\"\n    golorp = words[0]\n    stomach = words[1]\n    lst = list(stomach)\n    lst = [word for word in lst if word not in golorp]\n    lst = [word for word in lst if word not in golorp]\n    return \"\".join(lst)\n\n-----Constraints-----\n0 <= stdin.length <= 1024\n0 <= golorp.length <= 1000\nstdin contains only characters between 13 and 1024 characters.\nstdin contains only lowercase English letters.\n\"\"\"\n\nimport unittest\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        words = stdin.split(\" \")\n        if len(words) < 2:\n            return \"false\"\n        golorp = words[0]\n        stomach = words[1]\n        lst = list(stomach)\n        lst = [word for word in lst if word not in golorp]\n        lst = [word for word in lst if word not in golorp]\n        return \"\".join(lst)\n\n\nclass Test(unittest.TestCase):\n    def test(self):\n        words = [\"\"]\n        self.assertEqual(str(Solution().solution(words)), \"false\")\n        words = [\"\", \"\", \"*\", \"__\", \"_________\"]\n        self.assertEqual(str(Solution().solution(words)), \"false\")\n        words = [\"\", \"\", \"__\", \"_________\"]\n        self.assertEqual(str(Solution().solution(words)), \"false\")\n        words = [\"\", \"\", \"________\", \"*\"]\n        self.assertEqual(str(Solution().solution(words)), \"false\")\n        words = [\"\", \"\", \"________\", \"*\", \"\", \"\", \"_________\"]\n        self.assertEqual(str(Solution().solution(words)), \"false\")\n        words = [\"\", \"\", \"________\", \"*\", \"\", \"\", \"_________\", \"*\"]\n        self.assertEqual(str(Solution().solution(words)), \"false\")\n        words = [\"\", \"\", \"________\", \"*\", \"\", \"\", \"_________\", \"*\", \"\", \"\", \"\", \"\"]\n        self.assertEqual(str(Solution().solution(words)), \"false\")\n        words = [\"\", \"\", \"________\", \"*\", \"\", \"\", \"_________\", \"*\", \"\", \"\", \"\", \"\"]\n        self.assertEqual(str(Solution().solution(words)), \"false\")\n        words = [\"\", \"\", \"________\", \"*\", \"\", \"\", \"_________\", \"*\", \"\", \"\", \"\", \"\"]\n        self.assertEqual(str(Solution().solution(words)), \"false\")\n        words = [\"\", \"\", \"________\", \"*\", \"\", \"\", \"_________\", \"*\", \"\", \"\", \"\", \"\"]\n        self.assertEqual(str(Solution().solution(words)), \"false\")\n        words = [\"\", \"\", \"________\", \"*\", \"\", \"\", \"_________\", \"*\", \"\", \"\", \"\", \"\"]\n        self.assertEqual(str(Solution().solution(words)), \"false\")\n        words = [\"\", \"\", \"________\", \"*\", \"\", \"\", \"_________\", \"*\", \"\", \"\", \"\", \"\"]\n        self.assertEqual(str(Solution().solution(words)), \"false\")\n        words = [\"\", \"\", \"________\", \"*\", \"\", \"\", \"_________\", \"*\", \"\", \"\", \"\", \"\"]\n        self.assertEqual(str(Solution().solution(words)), \"false\")\n        words = [\"\", \"\", \"________\", \"*\", \"\", \"\", \"_________\", \"*\", \"\", \"\", \"\", \"\"]\n        self.assertEqual(str(Solution().solution(words)), \"false\")\n        words = [\"\", \"\", \"________\", \"*\", \"\", \"\", \"_________\", \"*\", \"\", \"\", \"\", \"\"]\n        self.assertEqual(str(Solution().solution(words)), \"false\")\n        words = [\"\", \"\", \"________\", \"*\", \"\", \"\", \"_________\", \"*\", \"\", \"\", \"\", \"\"]\n        self.assertEqual(str(Solution().solution(words)), \"false\")\n        words = [\"\", \"\", \"________\", \"*\", \"\", \"\", \"_________\", \"*\", \"\", \"\", \"\", \"\"]\n        self.assertEqual(str(Solution().solution(words)), \"false\")\n        words = [\"\", \"\", \"________\", \"*\", \"\", \"\", \"_________\", \"*\", \"\", \"\", \"\", \"\"]\n        self.assertEqual(str(Solution().solution(words)), \"false\")\n        words = [\"\", \"\", \"________\", \"*\", \"\", \"\", \"_________\", \"*\", \"\", \"\", \"\", \"\"]\n        self.assertEqual(str(Solution().solution(words)), \"false\")\n        words = [\"\", \"\", \"________\", \"*\", \"\", \"\", \"_________\", \"*\", \"\", \"\", \"\", \"\"]\n        self.assertEqual(str(Solution().solution(words)), \"false\")\n        words = [\"\", \"\", \"________\", \"*\", \"\", \"\", \"_________\", \"*\", \"\", \"\", \"\", \"\"]\n        self.assertEqual(str(Solution().solution(words)), \"false\")\n        words = [\"\", \"\", \"________\", \"*\", \"\", \"\", \"_________\", \"*\", \"\", \"\", \"\", \"\"]\n        self.assertEqual(str(Solution().solution(words)), \"false\")\n        words = [\"\", \"\", \"________\", \"*\", \"\", \"\", \"_________\", \"*\", \"\", \"\", \"\", \"\"]\n        self.assertEqual(str(Solution().solution(words)), \"false\")\n        words = [\"\", \"\", \"________\", \"*\", \"\", \"\", \"_________\", \"*\", \"\", \"\", \"\", \"\"]\n        self.assertEqual(str(Solution().solution(words)), \"false\")\n        words = [\"\", \"\", \"________\", \"*\", \"\", \"\", \"_________\", \"*\", \"\", \"\", \"\", \"\"]\n        self.assertEqual(str(Solution().solution(words)), \"false\")\n        words = [\"\", \"\", \"________\", \"*\", \"\", \"\", \"_________\", \"*\", \"\", \"\", \"\", \"\"]\n        self.assertEqual(str(Solution().solution(words)), \"false\")\n        words = [\"\", \"\", \"________"
    },
    {
        "number": 4133,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    input = stdin.strip().split(\" \")\n    \n    result = \"\"\n    \n    for i in range(len(input)):\n        golf_or_stomach = input[i]\n        \n
    },
    {
        "number": 4133,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.replace(\"<\", \"\").replace(\">\", \"\").replace(\".\", \"\").replace(\"*\", \"\").split(\",\")\n    n = len(stdin)\n    \n    while n:\n        val = stdin.pop(0)\n        if \"*\" in val:\n            val = val.split(\"*\")\n            n -= len(val)\n            for index, x in enumerate(val):\n                if x == \"*\":\n                    val[index] = \"\".join(val[index:index+2])\n                    val.pop(index+1)\n                    val.pop(index+1)\n            val = val[1:-1]\n        \n        if val == \"\":\n            break\n        else:\n            val = [int(x) for x in val.split(\"_\")]\n            if val[0] < val[1]:\n                val[0], val[1] = val[1], val[0]\n            \n            if val[2] < val[1]:\n                val[0], val[1] = val[1], val[0]\n            \n            if val[3] < val[1]:\n                val[0], val[1] = val[1], val[0]\n            \n            if val[2] < val[1]:\n                val[0], val[1] = val[1], val[0]\n            \n            if val[3] < val[1]:\n                val[0], val[1] = val[1], val[0]\n            \n            n = len(stdin)\n            \n    return \"\".join(stdin)\n\n### solution(stdin: str)\n\n### 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32\n\n### 9 27 23 25 26 29 36 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 185 186 187 188 188 189 190 190 191 192 193 194 195 196 197 198 199 200 201 201 202 201 203 202 204 205 206 207 208 208 209 210 210 211 211 212 213 214 215 216 217 219 220 221 222 223 224 225 226 227 228 229 229 230 231 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245"
    },
    {
        "number": 4133,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    vps = stdin.split('/')\n    numbers = list(map(int, vps[1:]))\n    if len(numbers) % 2 == 1:\n        numbers.pop()\n    if len(numbers) == 0:\n        return \"false\"\n    else:\n        for idx in range(len(numbers)//2):\n            numbers[idx], numbers[len(numbers)-1-idx] = numbers[len(numbers)-1-idx], numbers[idx]\n        \n        solution(numbers)\n        return numbers\n    \n'''\n"
    },
    {
        "number": 4133,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    text = stdin.strip().split('\\n')\n    result = ''\n    \n    for i in range(len(text)):\n        j = text[i].split(' ')\n        for k in j:\n            if j.index(k) == len(j) - 1:\n                if k[1] == '=':\n                    result = result + k[0] +''\n                else:\n                    result = result + k[0]\n            else:\n                if k[1] == '=':\n                    result = result + k[0] +'' + k[1] +''\n                else:\n                    result = result + k[0] +'' + k[1]\n        result = result + '\\n'\n    return result\n\nprint(solution(input()))\n"
    },
    {
        "number": 4133,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    dexter = 0\n    while stdin!= \"false\":\n        m = stdin.split()\n        if m[0].isdigit():\n            dexter += int(m[0])\n        else:\n            m[0] = m[0][::-1]\n            print(f\"{m[0]} -> {dexter}\")\n            stdin = stdin.replace(m[0], str(dexter))\n            dexter = 0\n            if stdin == \"false\":\n                return stdin\n    return \"false\"\n\nprint(solution(input()))\n'''\n\n\nclass Solution:\n    def __init__(self):\n        self.cache = {}\n\n    def solution(self, stdin):\n        if stdin in self.cache:\n            return self.cache[stdin]\n\n        if stdin == \"false\":\n            return \"false\"\n        if stdin == \"true\":\n            return \"true\"\n        self.cache[stdin] = self.count(stdin)\n\n        return self.cache[stdin]\n\n    def count(self, stdin):\n        stdin = stdin[::-1]\n        for idx in range(len(stdin) - 1):\n            if stdin[idx] == \"-\":\n                if stdin[idx + 1]!= \"*\":\n                    if stdin[idx - 1]!= \"-\":\n                        return str(int(stdin[idx:idx + 2]) + int(stdin[idx + 2:idx + 4]))\n                    else:\n                        return str(int(stdin[idx:idx + 2]) + int(stdin[idx + 2:]))\n                else:\n                    return str(int(stdin[idx:idx + 2]) + int(stdin[idx + 2:]))\n            else:\n                if stdin[idx]!= \"-\":\n                    return str(int(stdin[idx:idx + 2]) - int(stdin[idx + 1]))\n                else:\n                    return str(int(stdin[idx:idx + 2]) - int(stdin[idx + 2:]))\n"
    },
    {
        "number": 4133,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin[0])\n    if n == 0:\n        return \"false\"\n    \n    ans = []\n    num = list(map(int, stdin[1:-1].split(\",\")))\n    num.sort()\n    if num[0] == 0:\n        num.pop(0)\n    num = list(map(int, num))\n    for x in range(n):\n        ans.append(str(num.pop(0)))\n    return \",\".join(ans)\n\n-----Constraints-----\n\n1 <= stdin.length <= n * 10**4 <= 10**6\n\n\n-----Time Limit (Cached)-----\n\nSince we are not reading in a file, the solution takes a while to read it.\n\nSince we need to read a file we have to sort it.\n\nSince we are doing the sorting it takes a couple of minutes.\n\nSince we are doing some sort of sort in python, we need to sort the list in order.\n\nSince we are doing the sort in python we have to sort it in place.\n\nSince we are doing sort in python, it is slower than the sort function in the Sort Python language.\n\n-----Discussion-----\n\nThe solution takes the following input as a single string.\n\nIn the sample input the golorp name can be anything, but as a visual reference for the input we will assume it is a simple \"name\" string.\n\nExample\n\"golorp1\"\n\nThe output should be\n\nsolution(input)\n\nWe will assume that input is actually a string of just a single golorp name.\n\"\"\"\n\nclass Solution:\n    def standardized(self, stdin: str) -> str:\n        n = int(stdin[0])\n        if n == 0:\n            return \"false\"\n        \n        sorted_list = sorted(stdin[1:-1].split(\",\"))\n        for i in range(n):\n            sorted_list[i] = sorted_list[i].strip().replace(\"_\",\"\").strip()\n        return \",\".join(sorted_list)\n        \n    def solution(self, stdin: str) -> str:\n        n = int(stdin[0])\n        if n == 0:\n            return \"false\"\n        \n        answer = \"\"\n        for i in range(n):\n            answer += stdin[i+1]\n        return answer"
    },
    {
        "number": 4133,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n    def sol(s):\n        if s == '':\n            return ''\n        if len(s) <= 3:\n            return s\n        if s[:3] == '?':\n            return s\n        if s[:3] == '.':\n            return '.' + sol(s[3:])\n        \n        if s[:2] == '.':\n            return '.' + sol(s[2:])\n        \n        if s[:2] in ['*', '+']:\n            return sol(s[2:]) + s[1] + sol(s[0:2])\n        \n        if s[0] in ['*', '+']:\n            return sol(s[1:]) + sol(s[0:1])\n        \n        if s[0] == '.':\n            return '.' + sol(s[1:])\n        \n        if s[1] == '.':\n            return s[0] + sol(s[2:])\n        \n        if s[2] == '.':\n            return s[0] + sol(s[1:2])\n        \n        return '.' + sol(s[1:])\n    \n    \n    for i in range(int(stdin.strip())):\n        s = stdin.strip()\n        print(sol(s))"
    },
    {
        "number": 4133,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    inp = stdin.split(\"\\n\")\n    w = inp[0].split(\" \")\n    w = list(map(int, w))\n    j = inp[1].split(\" \")\n    j = list(map(int, j))\n    c = inp[2].split(\" \")\n    c = list(map(int, c))\n    l = len(w)\n    for i in range(1, l):\n        if c[i]!= c[i-1]:\n            if c[i] == 0:\n                j.pop(i)\n            else:\n                j.pop(i)\n        else:\n            if j[i-1]!= 0:\n                j.pop(i)\n    if len(j) == 0:\n        return \"false\"\n    else:\n        j.pop(0)\n        for i in range(0, l-1):\n            if c[i] == c[i+1]:\n                c[i] = c[i+1] = c[i+2] = c[i+3] = 0\n        c[0] = c[1] = c[2] = c[3] = 0\n        return \"\".join(map(str, j))\n'''\n"
    },
    {
        "number": 4134,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    # dp = [[0 for _ in range(m)] for _ in range(n)]\n    # dp[0][0] = 1\n    # for i in range(n):\n    #     dp[i][0] = 1\n    # for j in range(m):\n    #     dp[0][j] = 1\n    # for i in range(1, n):\n    #     for j in range(1, m):\n    #         dp[i][j] = dp[i - 1][j - 1]\n    #     for j in range(1, m):\n    #         dp[i][j] = dp[i - 1][j]\n    \n    # for i in range(n):\n    #     for j in range(m):\n    #         dp[i][j] = (dp[i][j] or k - (dp[i - 1][j - 1]))\n    \n    # for i in range(n):\n    #     for j in range(m):\n    #         print(dp[i][j], end=' ')\n    #     print()\n    \n    # for i in range(n):\n    #     for j in range(m):\n    #         print(dp[i][j], end=' ')\n    #     print()\n    \n    # for i in range(n):\n    #     for j in range(m):\n    #         print(dp[i][j] % k, end=' ')\n    #     print()\n    \n    # for i in range(n):\n    #     for j in range(m):\n    #         print(dp[i][j] // k, end=' ')\n    #     print()\n\n    # for i in range(n):\n    #     for j in range(m):\n    #         if (dp[i][j]):\n    #             dp[i][j] = (dp[i][j] % k or k)\n    #             if (dp[i][j] == k):\n    #                 break\n    #     print('-', end=' ')\n    #     for j in range(m):\n    #         print(dp[i][j] % k, end=' ')\n    #     print('|', end=' ')\n    #     for j in range(m):\n    #         if (dp[i][j]!= k):\n    #             print('x', end=' ')\n    #     print()\n    \n    # for i in range(n):\n    #     for j in range(m):\n    #         if (dp[i][j] == k):\n    #             print('x', end=' ')\n    #     print()\n    \n    # for i in range(n):\n    #     for j in range(m):\n    #         if (dp[i][j]!= k):\n    #             print('x', end=' ')\n    #     print()\n    \n    # return '0' if dp[n - 1][m - 1] == 0 else '1'\n\n    dp = [[0 for _ in range(m)] for _ in range(n)]\n    \n    for i in range(n):\n        for j in range(m):\n            if (i < n - 1):\n                dp[i][j] = dp[i + 1][j]\n            if (j < m - 1):\n                dp[i][j] = dp[i][j + 1]\n            if (i < n - 1):\n                dp[i][j] = dp[i + 1][j + 1]\n    print(dp[n - 1][m - 1] % k)\n    print('x' if dp[n - 1][m - 1] == 0 else '1')\n\n\n    # for i in range(n):\n    #     for j in range(m):\n    #         if (i < n - 1):\n    #             dp[i][j] = (dp[i + 1][j] or k - (dp[i + 1][j - 1]))\n    #         if (j < m - 1):\n    #             dp[i][j] = dp[i][j + 1]\n    #         if (i < n - 1):\n    #             dp[i][j] = dp[i + 1][j]\n    #         if (j < m - 1):\n    #             dp[i][j] = dp[i][j + 1]\n    # print(dp[n - 1][m - 1] % k)\n    # print('x' if dp[n - 1][m - 1] == 0 else '1')\n    # for i in range(n):\n    #     for j in range(m):\n    #         print(dp[i][j], end=' ')\n    #     print()\n    # print(dp[n - 1][m - 1] % k)\n    # for i in range("
    },
    {
        "number": 4134,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = list(map(int, stdin.split()))\n    grid = [[0] * m for _ in range(n)]\n    for _ in range(n):\n        grid[_] = list(map(int, stdin.split()))\n    k = k ** 2\n    a = [[1] * m for _ in range(n)]\n    for _ in range(n - 1):\n        for i in range(m - 1):\n            a[i][i + 1] = a[i][i + 1] ^ grid[i][i] ^ grid[i][i + 1]\n    for _ in range(m - 1):\n        for i in range(n - 1):\n            a[i][i + 1] = a[i + 1][i] ^ a[i][i + 1]\n    for i in range(m - 1):\n        for j in range(n - 1):\n            a[j][j + 1] = a[j + 1][j] ^ a[j][j + 1]\n    result = 0\n    for i in range(n - 1):\n        for j in range(n - 1):\n            result += a[i][j] * k\n    return str(result)\n\n------------------------------------------------------------------------------------------------------------------------------------\ndef"
    },
    {
        "number": 4134,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    grid = [[0] * m for _ in range(n)]\n    paths = 0\n    for _ in range(k):\n        i, j = map(int, stdin.split())\n        grid[i][j] = 1\n    for i in range(n):\n        for j in range(m):\n            if (i - 1) % 2 == 0 and (j - 1) % 2 == 0:\n                grid[i][j] = 1\n            elif (i - 1) % 2 == 0:\n                grid[i][j] = 1\n            elif (j - 1) % 2 == 0:\n                grid[i][j] = 1\n            else:\n                grid[i][j] = 0\n    for i in range(n):\n        for j in range(m):\n            if (i - 1) % 2 == 0 and (j - 1) % 2 == 0:\n                if grid[i][j] == 1:\n                    paths += 1\n            elif (i - 1) % 2 == 0:\n                if grid[i][j] == 1:\n                    paths += 1\n            elif (j - 1) % 2 == 0:\n                if grid[i][j] == 1:\n                    paths += 1\n            else:\n                if grid[i][j] == 1:\n                    paths += 1\n    return str(paths)"
    },
    {
        "number": 4134,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    h, w = list(map(int, stdin.split()))\n    grid = []\n    for i in range(h):\n        grid.append([int(x) for x in list(stdin.split())])\n    k = 0\n    for i in range(h):\n        for j in range(w):\n            if grid[i][j] == 1:\n                for k in range(j, w):\n                    grid[i][k] = 0\n                for k in range(j, h):\n                    grid[k][j] = 0\n    paths = []\n    for i in range(h):\n        for j in range(w):\n            if grid[i][j] == 1:\n                paths.append(k)\n                for k in range(j, w):\n                    grid[i][k] = 0\n                for k in range(j, h):\n                    grid[k][j] = 0\n    paths = list(set(paths))\n    paths.sort()\n    return \"\".join(str(x) for x in paths)"
    },
    {
        "number": 4134,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    if a == d:\n        return str(1)\n    if b == d:\n        return str(1)\n    for i in range(a, b):\n        if a == d or i == b:\n            continue\n        if i == a or i == b:\n            return str(1)\n        if a + i <= b:\n            if d - a - i <= c:\n                return str(1)\n            else:\n                return str(1)\n        if a + i + d <= b:\n            return str(1)\n    if c == d:\n        return str(1)\n    if d - c <= b:\n        return str(1)\n    else:\n        return str(1)\n"
    },
    {
        "number": 4134,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    k = int(stdin.split()[1])\n    \n    a = [[] for _ in range(n)]\n    \n    for _ in range(m):\n        l, r = map(int, stdin.split())\n        a[l-1].append(r-1)\n        a[r-1].append(l-1)\n        \n    #a = [[] for _ in range(n)]\n    #for l in range(n):\n    #    for r in range(l, n):\n    #        a[l].append(r)\n    #        a[r].append(l)\n    \n    #print(a)\n    \n    def xor(a, k):\n        tmp = [0 for i in range(n)]\n        for i in range(n):\n            tmp[i] = a[i][k-1]\n        return tmp\n    \n    def paths(k):\n        a = [1] + [0]*(n-2)\n        for i in range(m):\n            a[i] = a[i+1] ^ a[i+2]\n        for i in range(m, n):\n            a[i] = a[i-1] ^ a[i-2] ^ a[i-3] ^ a[i-4] ^ a[i-5]\n        \n        #print(a)\n        return sum(a[0:k])\n    \n    #print(paths(k))\n    \n    answer = \"\"\n    \n    for i in range(n):\n        answer += str(xor(paths(k), paths(i)))\n        \n    return answer\n        "
    },
    {
        "number": 4134,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    grid = []\n    for i in range(n):\n        grid.append(list(map(int, input().split())))\n    xor = (1<<(k-1)) - 1\n    \n    num_paths = 0\n    paths = []\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] & xor!= 0:\n                paths.append((i,j))\n                num_paths += 1\n    \n    paths.sort(key=lambda x: (x[1], x[0]))\n    print(num_paths)\n    for path in paths:\n        for j in range(path[1], path[1] + m):\n            if grid[path[0]][j] & xor!= 0:\n                break\n        else:\n            print(num_paths)\n            return num_paths\n    print(num_paths)\n    return num_paths\n\n\n\ndef"
    },
    {
        "number": 4134,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = [0] + list(map(int, stdin.split()))\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n    for i in range(n):\n        for j in range(m):\n            if a[i] < a[j] + a[i]:\n                dp[i + 1][j + 1] = a[i] + a[j + 1]\n    for _ in range(k):\n        a[1] = 0\n        for i in range(2, n + 1):\n            for j in range(m - 1, -1, -1):\n                if a[i] < a[j] + a[i]:\n                    a[i] += a[j] + a[i]\n                    a[i] %= 1000000007\n                    dp[i][j] = a[i]\n                    break\n    return str(dp[n][m])"
    },
    {
        "number": 4134,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    grid = [list(map(int, input().split())) for _ in range(n)]\n\n    # paths = 0\n    # for i in range(n):\n    #     for j in range(m):\n    #         paths += (grid[i][j] ^ k)\n\n    # paths = paths & k\n    # return str(paths)\n    \n    # for i in range(n):\n    #     for j in range(m):\n    #         if grid[i][j]!= k:\n    #             grid[i][j] ^= k\n    #             # paths -= 1\n    #             # paths += 1\n\n    # return str(paths)\n    \n    # path_set = set()\n    # for i in range(n):\n    #     for j in range(m):\n    #         if grid[i][j]!= k:\n    #             path_set.add(grid[i][j])\n\n    # for i in range(n):\n    #     for j in range(m):\n    #         if grid[i][j] == k:\n    #             grid[i][j] ^= k\n    #             path_set -= set(grid[i])\n\n    # return str(len(path_set))\n\n    # solve_num = 0\n    # for i in range(n):\n    #     for j in range(m):\n    #         if grid[i][j] == k:\n    #             grid[i][j] ^= k\n    #             solve_num += 1\n\n    # return solve_num\n\n    # \u8fd9\u9898\u76ee\u8003\u8651\u77e9\u9635\u7684\u7279\u6027, \u90a3\u4e48\u5047\u8bbe\u6bcf\u4e2a\u8d70\u8fc7\u5730\u65b9\u90fd\u80fd\u8d70\u5230\u8fbe\u76ee\u6807\u7684\u4f4d\u7f6e\n    # xor_sum = 0\n    # for i in range(n):\n    #     for j in range(m):\n    #         xor_sum ^= grid[i][j]\n    # print(xor_sum)\n\n    # ans = 0\n    # for i in range(n):\n    #     for j in range(m):\n    #         ans ^= xor_sum\n    # print(ans)\n    # return str(ans)\n    \n    # return str(ans)\n    \n    # \u6df1\u5ea6\u4f18\u5148\u641c\u7d22\n\n    # return str(ans)\n\n    # \u9012\u5f52, \u6307\u5411\u6700\u540e\u4e00\u4e2a\u8282\u70b9\n    # def backtrack(i, j, grid):\n    #     if i == n:\n    #         return 1\n    #     if j == m:\n    #         return 0\n\n    #     ans = 0\n    #     for x in range(n):\n    #         for y in range(m):\n    #             if grid[x][y] == k:\n    #                 ans += backtrack(x + 1, y, grid)\n    #     return ans\n\n    # return backtrack(0, 0, grid)\n\n    # \u57fa\u4e8e\u8ddd\u79bb\u8ba1\u7b97\u7684\u7ed3\u679c, \u9012\u5f52\n    def dfs(x, y):\n        # \u5f53\u524d\u8282\u70b9\n        visited[x][y] = True\n        # \u5f53\u524d\u4f4d\u7f6e\u4e3a0\n        grid[x][y] = 0\n        # \u8def\u5f84\n        path = 1\n        for i in range(4):\n            if i % 2 == 0:\n                path ^= x + 1\n            else:\n                path ^= y + 1\n            # \u5982\u679c\u8def\u5f84\u4e3a0, \u8bbf\u95ee\u8be5\u8282\u70b9\n            if path == 0 and not visited[x][y]:\n                visited[x][y] = True\n                # \u5f53\u524d\u8282\u70b9\n                dfs(x, y)\n        return grid[x][y]\n\n    # \u8fd4\u56de\u77e9\u9635\u4e2d\u7684\u5355\u5143\u683c\n    def one(x, y):\n        return grid[x][y]\n\n    def k(grid, k):\n        return dfs(0, 0) & (grid[0][0] & k)\n\n    # \u5916\u5c42\u505a\u6cd5, \u53cc\u6307\u9488\n    def solve_inner(grid):\n        n = len(grid)\n        m = len(grid[0])\n        k = 1\n        # \u5148\u6c42\u53cc\u6307\u9488, \u5219\u8bbf\u95ee\u8fb9\u754c\n        for i in range(n):\n            for j in range(m):\n                # \u5224\u65ad\u6bcf\u4e2a"
    },
    {
        "number": 4134,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    matrix = [[int(x) for x in input().split()] for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == k:\n                matrix[i][j] = 0\n    for r in range(n):\n        for c in range(m):\n            print(matrix[r][c], end=\" \")\n        print()\n    return \"\""
    },
    {
        "number": 4135,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    result = \"\"\n    n = int(stdin)\n    n_list = list(range(1, n + 1))\n    i = 0\n    while i < len(n_list):\n        n_list[i] = n_list[i] * (n_list[i] - 1)\n        i += 1\n    print(n_list)\n    return \"\".join(map(str, n_list))\n"
    },
    {
        "number": 4135,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    s = list(stdin.split())\n    i = 0\n    for j in range(n, 0, -1):\n        while s[i] =='':\n            i = i+1\n        i = i-1\n        while s[i]!='':\n            s[i] = s[i].upper()\n            i = i+1\n    for j in range(n):\n        if s[j] =='':\n            continue\n        else:\n            s[j] = s[j].upper()\n    answer = ''.join(s)\n    return answer"
    },
    {
        "number": 4135,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    s = stdin.strip()\n    return ''.join(sorted(list(map(lambda x: x.upper(), map(lambda x: list(x), re.split('(?<!\\w)', s))))))\n\ndef"
    },
    {
        "number": 4135,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = input()\n    s = s.replace(\" \", \"\")\n    for i in range(n):\n        tmp = []\n        while len(tmp)!= n - 1:\n            tmp.append(s[i + 1])\n            i += 1\n        tmp.reverse()\n        s = \"\".join(tmp)\n    return s\n\ndef"
    },
    {
        "number": 4135,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"\".join(map(lambda x: x[::-1], (\n        [x for x in list(x) if x!= '0']\n        for x in list(filter(None, (\n            stdin.lstrip().rstrip().replace(\" \", \"\").replace(\n            \"a\", \"\")).replace(\" \", \"\").replace(\".\", \"\").replace(\n            \"-\", \"\")).split(\"-\")))\n    )\n))\n\nExplanation\ninput string is \"rocesfedoc\"\n\nprint solution(\"plmaetwoxesisiht\")\nprint solution(\"z\")\n\n
    },
    {
        "number": 4135,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\nInput\nz z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z z"
    },
    {
        "number": 4135,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = list(stdin.strip())\n    n = len(s)\n    for i in range(n):\n        for j in range(i+1, n):\n            s[i], s[j] = s[j], s[i]\n    return ''.join(s)\n\nThe solution has been implemented by following some ideas:\n\n1. Move all characters from beginning to end of string until a non-repeating letter is removed;\n2. Reverse all the substring of the original string.\n\"\"\"\n\nclass Solution:\n    def decryptString(self, t: str) -> str:\n        s = t.lower()\n        t = t.replace(' ', '')\n        dic = {}\n        for i in range(len(s)):\n            dic[s[i]] = i\n        n = len(t)\n        for i in range(n):\n            t[i], t[n-1 - i] = t[n-1 - i], t[i]\n        for i in range(n):\n            s[dic[t[i]]], s[n-1 - i] = s[n-1 - i], s[i]\n        return ''.join(s)\n"
    },
    {
        "number": 4135,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[1]\n    s = s.split(\" \")\n    n = int(s[0])\n    s = \"\".join(s[1:n+1])\n    return s\n"
    },
    {
        "number": 4135,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n,t = map(int,stdin.split())\n    if n % 2!= 0:\n        return ''\n    st = list(map(str,stdin.split()))\n    st = sorted(st, key = lambda x: int(x))\n    i = 0\n    while i < len(st) - 1:\n        if st[i] == st[i+1]:\n            st[i],st[i+1] = st[i+1],st[i]\n            i += 2\n        else:\n            i += 1\n    return ''.join(st)\n\nprint(solution(\"1 2 3 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 155 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 192 193 194 195 196 196 197 198 199 200 201 201 202 203 204 205 206 207 208 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 259 259 260 261 261 262 263 264 265 266 267 268 269 290 291 292 293 294 295 296 297 298 299 299 300 301 301 301 302 302 303 303 304 305 306 308 309 311 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311"
    },
    {
        "number": 4135,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    #\n    # Write your code here\n    #\n    n = int(stdin.strip())\n    s = input()\n    ans = ''\n    for i in range(len(s) - 1, -1, -1):\n        if s[i] == 'z':\n            ans = s[:i] + ans + s[i + 1:]\n        else:\n            ans = ans + s[i]\n    return ans\n\n\ndef"
    },
    {
        "number": 4136,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    \n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if j == 1 or j == n - 1:\n                print(i, end=' ')\n            else:\n                print(i * j, end=' ')\n        print()\n    return ''\n\n    #-----------------------------------------------------------------------------------------------\n    #\n    # The solution above is very similar to the problem 6 and 7 of the question, but we can only choose 1\n    # subproblem with equal size and one input line.\n    #\n    #-----------------------------------------------------------------------------------------------"
    },
    {
        "number": 4136,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    nums = list(map(int, stdin.split()))\n    a = sorted(nums)\n    return str(sum(a))\n    pass\n\n\n-----Constraints-----\n0 <= a, b <= 10^3\n"
    },
    {
        "number": 4136,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    nums = list(map(int, stdin.split()))\n    for i in range(1, len(nums)):\n        nums[i] += nums[i-1]\n    print(sum(nums))\n\n\n-----Constraints-----\n1 <= a, b <= 10^3\nThere is at least one number in nums.\n1 <= stdin.length <= 20000\nThere is at least one number in nums\nstdin.length is even\nstdin.length is at most 1000\nstdin is a valid input\n\n-----Time Complexity-----\nO(n)\n\nO(n)\n\nO(n)\n\n-----Space Complexity-----\nO(n)\n\nO(n)\n"
    },
    {
        "number": 4136,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    nums = [int(i) for i in stdin.split()]\n    answer = 0\n    for i in range(len(nums)):\n        a = nums[i]\n        for j in range(i+1, len(nums)):\n            b = nums[j]\n            answer += max(a, b)\n    return str(answer)\n"
    },
    {
        "number": 4136,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    print(A + B)"
    },
    {
        "number": 4136,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(' ')\n    a, b = map(int, stdin)\n    a = str(a)\n    b = str(b)\n    answer = []\n    answer.append(a + b)\n    answer.append(a + b)\n    answer.append(a + b)\n    return''.join(answer)"
    },
    {
        "number": 4136,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    answer = 0\n    for i in range(int(input())):\n        a, b = map(int, input().split())\n        answer += a + b\n    return str(answer)\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4136,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    total = 0\n    while stdin:\n        a, b = stdin.split()\n        a = int(a)\n        b = int(b)\n        total += a + b\n    \n    return str(total)"
    },
    {
        "number": 4136,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    answer = 0\n    if n < 10**3:\n        answer = n\n    else:\n        answer = (n%10**3) + ((n//10**3)%10**3)\n    return str(answer)\n\n\ndef"
    },
    {
        "number": 4136,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    for s in stdin:\n        a = int(s)\n        b = int(s[::-1])\n        if a>b:\n            a,b = b,a\n        print(b+a)\n\n-----Constraints-----\n1 <= a <= 10^3\n1 <= b <= 10^3\n\n\n-----Time complexity-----\nO(n+m)\n\n\n-----Space Complexity-----\nO(1)\n"
    },
    {
        "number": 4137,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    import brainfuck\n    \n    output_buffer = []\n    state = None\n    invalid = False\n    \n    for line in stdin:\n        if state is None:\n            state = brainfuck.parse(line)\n        else:\n            opcode = state[\"opcode\"]\n            input_bits = state[\"input\"].replace(\" \", \"\")\n            if opcode == \"START\":\n                output_buffer.append(invalid)\n            else:\n                output_buffer.append(opcode + \" \" + input_bits)\n            \n            if \"memory\" in state and state[\"memory\"] is not None and len(state[\"memory\"]) > 0:\n                memory_state = state[\"memory\"]\n                for i in range(0, len(memory_state)):\n                    if isinstance(memory_state[i], str):\n                        output_buffer.append(memory_state[i])\n                    elif isinstance(memory_state[i], int):\n                        output_buffer.append(memory_state[i])\n                    else:\n                        output_buffer.append(str(memory_state[i]))\n            state = None\n            \n    return \"\".join(output_buffer)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4137,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    i, j = 0, 0\n    j += 1\n    for x in stdin:\n        j += 1\n        if x == '+':\n            i += 1\n        elif x == '-':\n            i -= 1\n        elif x == '*':\n            i *= 2\n        elif x == '/':\n            if i % 2 == 0:\n                i = int(i/2)\n            else:\n                i = int(i/2)+1\n    \n    return '+{}-{}'.format(i, j)\n    \n\ndef"
    },
    {
        "number": 4137,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    memory = bytearray()\n    for line in stdin:\n        op, val = line.split(' ')\n        if op == 'add':\n            memory.append(int(val) + int(memory.pop()))\n        elif op =='sub':\n            memory.append(int(val) - int(memory.pop()))\n        else:\n            memory.append(int(val) * int(memory.pop()))\n    return ''.join(memory)\n"
    },
    {
        "number": 4137,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    answer = ''\n\n    lines = stdin.split('\\n')\n\n    for line in lines:\n        memory = []\n        for char in line:\n            memory.append(ord(char) - ord('a'))\n        answer += f'{''.join(f'{i:08b}' for i in memory)}\\n'\n    return answer\n-----Constraints-----\n1 <= len(lines) <= 5000000\n1 <= memory[i] <= 255\n\n-----Time Limit: 0.1 seconds (not used, just in case)\n3000000\n\n-----Space Limit: 128 (not used, just in case)\n1234567\n\n-----If any input causes a failure, please contact your instructor.\n\"\"\"\nfrom collections import deque\nfrom copy import deepcopy\n\nmemory = deque([int(i) for i in list(input())])\n\ndef"
    },
    {
        "number": 4137,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\n\ndef"
    },
    {
        "number": 4137,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def interpreter(m: str) -> int:\n        for c in m:\n            if c in \"+-\":\n                yield c\n            elif c == \"(\":\n                yield \"*\"\n            elif c == \")\":\n                yield \"*\"\n            elif c == \"*\":\n                yield \"*\"\n            elif c == \"+\":\n                yield \"+\"\n            elif c == \"-\":\n                yield \"-\"\n            elif c == \"]\":\n                yield \"]\"\n            elif c == \"]\":\n                yield \"]\\n\"\n    return \"\".join(interpreter(m) for m in stdin.splitlines())\n"
    },
    {
        "number": 4137,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def to_operand(i: str) -> int:\n        return ord(i) - ord('0')\n    operators = '+-*/'\n    operand_map = dict(map(to_operand, operators))\n\n    def from_operand(i: int) -> str:\n        return chr(i - ord('0'))\n\n    return ''.join([from_operand(i) for i in stdin.split()])\n\n\ndef"
    },
    {
        "number": 4137,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def read_input():\n        return int(stdin[0:1]) + int(stdin[1:2]) * 10 ** (2 - len(stdin[2:]))\n\n    def write_output(value):\n        stdout.write(f\"{value}\\n\")\n\n    def process(arg):\n        for c in arg:\n            if c in ('+', '-'):\n                write_output(c)\n                process(stdin[1:])\n            elif c in ('(', ')', '+', '-'):\n                process(stdin[1:])\n                write_output(c)\n\n    stdin = read_input()\n    read_input()\n    read_input()\n    write_output('+')\n    write_output(')')\n    write_output('-')\n    write_output(')')\n    write_output('+')\n    write_output(')')\n    write_output('(')\n    write_output(')')\n    write_output('+')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output(')')\n    write_output"
    },
    {
        "number": 4137,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input = [int(val) for val in stdin.split(\",\")]\n    #print(input)\n    def add(x,y):\n        return x+y\n    def sub(x,y):\n        return x-y\n    def mul(x,y):\n        return x*y\n    def div(x,y):\n        return x//y\n    \n    def get_zero():\n        return 0\n    \n    def get_one():\n        return 1\n    \n    def get_two():\n        return 2\n    \n    def get_three():\n        return 3\n    \n    def get_four():\n        return 4\n    \n    def get_five():\n        return 5\n    \n    def get_six():\n        return 6\n    \n    def get_seven():\n        return 7\n    \n    def get_eight():\n        return 8\n    \n    def get_nine():\n        return 9\n    \n    def get_zero():\n        return get_zero()\n    \n    def get_one():\n        return get_one()\n    \n    def get_two():\n        return get_two()\n    \n    def get_three():\n        return get_three()\n    \n    def get_four():\n        return get_four()\n    \n    def get_five():\n        return get_five()\n    \n    def get_six():\n        return get_six()\n    \n    def get_seven():\n        return get_seven()\n    \n    def get_eight():\n        return get_eight()\n    \n    def get_nine():\n        return get_nine()\n    \n    def get_zero():\n        return get_zero()\n    \n    def get_one():\n        return get_one()\n    \n    def get_two():\n        return get_two()\n    \n    def get_three():\n        return get_three()\n    \n    def get_four():\n        return get_four()\n    \n    def get_five():\n        return get_five()\n    \n    def get_six():\n        return get_six()\n    \n    def get_seven():\n        return get_seven()\n    \n    def get_eight():\n        return get_eight()\n    \n    def get_nine():\n        return get_nine()\n    \n    def get_zero():\n        return get_zero()\n    \n    def get_one():\n        return get_one()\n    \n    def get_two():\n        return get_two()\n    \n    def get_three():\n        return get_three()\n    \n    def get_four():\n        return get_four()\n    \n    def get_five():\n        return get_five()\n    \n    def get_six():\n        return get_six()\n    \n    def get_seven():\n        return get_seven()\n    \n    def get_eight():\n        return get_eight()\n    \n    def get_nine():\n        return get_nine()\n    \n    \n    def add(x,y):\n        return x+y\n    \n    def sub(x,y):\n        return x-y\n    \n    def mul(x,y):\n        return x*y\n    \n    def div(x,y):\n        return x//y\n    \n    def get_zero():\n        return 0\n    \n    def get_one():\n        return 1\n    \n    def get_two():\n        return 2\n    \n    def get_three():\n        return 3\n    \n    def get_four():\n        return 4\n    \n    def get_five():\n        return 5\n    \n    def get_six():\n        return 6\n    \n    def get_seven():\n        return 7\n    \n    def get_eight():\n        return 8\n    \n    def get_nine():\n        return 9\n    \n    def get_zero():\n        return get_zero()\n    \n    def get_one():\n        return get_one()\n    \n    def get_two():\n        return get_two()\n    \n    def get_three():\n        return get_three()\n    \n    def get_four():\n        return get_four()\n    \n    def get_five():\n        return get_five()\n    \n    def get_six():\n        return get_six()\n    \n    def get_seven():\n        return get_seven()\n    \n    def get_eight():\n        return get_eight()\n    \n    def get_nine():\n        return get_nine()\n    \n    def get_zero():\n        return get_zero()\n    \n    def get_one():\n        return get_one()\n    \n    def get_two():\n        return get_two()\n    \n    def get_three():\n        return get_three()\n    \n    def get_four():\n        return get_four()\n    \n    def get_five():\n        return get_five()\n    \n    def get_six():\n        return get_six()\n    \n    def get_seven():\n        return get_seven()\n    \n    def get_eight():\n        return get_eight()\n    \n    def get_nine():\n        return get_nine()\n    \n    def get_zero():\n        return get_zero()\n    \n    def get_one():\n        return get_one()\n    \n    def get_two():\n        return get_two()\n    \n    def get_three():\n        return get_three()\n    \n    def get_four():\n        return get_four()\n    \n    def get_five():\n        return get_five()\n    \n    def get_six():\n        return get_six()\n    \n    def get_seven():\n        return get_seven()\n    \n    def get_eight():\n        return get_eight()\n    \n    def get_nine():\n        return get_nine()\n    \n    def add(x,y):\n        return x+y\n    \n    def sub(x,y):\n        return x-y\n    \n    def mul(x,y):\n        return x*y\n    \n    def div(x,y):\n        return x//y\n    \n    def get_zero():\n        return 0\n    \n    def get_one():\n        return 1\n    \n    def get_two():\n        return 2\n    \n    def get_three():\n        return 3\n    \n    def get_four():\n        return 4\n    \n    def get_five():\n        return 5\n    \n    def get_six():\n        return 6\n    \n    def get_seven():\n        return 7\n    \n    def get_eight():\n        return 8\n    \n    def get_nine():\n        return 9\n    \n    def get_zero():\n        return get_zero()\n    \n    def get_one():\n        return get_one()\n    \n    def get_two():\n        return get_two()\n    \n    def get_three():\n        return get_three()\n    \n    def get_four():\n        return get"
    },
    {
        "number": 4137,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    memory = []\n    inp = stdin.split()\n    memory.append(int(inp[0]))\n    memory.append(int(inp[1]))\n    for i in range(2, len(inp)):\n        memory.append(int(inp[i]))\n    return ''.join(str(m) for m in memory)\n\n-----Constraints-----\n\n0 <= operands <= 10^3\n\n-----Time Limit-----\n\nO(n)\n\n-----Space Limit-----\n\nO(n)\n\n-----Examples-----\ninput> 9\noutput> 3+4+4\n\ninput> 9\noutput> 10-11\n\ninput> 9\noutput> 101\n\ninput> 9\noutput> 2\n\"\"\"\n\ndef"
    },
    {
        "number": 4138,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n,k = map(int,stdin.split())\n    seq = stdin.split()[1:]\n    answer = \"\"\n    for i in range(n):\n        answer += str(seq[i][k-1])\n    return answer\n\nConstraints\n1 <= k <= 10^18\n0 <= q <= 10000\n\nExample Input\n\n1\n1\n3\n20\n38\n56\n\nExample Output\n\n1\n1\n2\n5\n2\n0\n1\n\"\"\"\n\ndef"
    },
    {
        "number": 4138,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    global q\n    q = int(stdin.split('\\n')[0])\n    num_blocks = int(stdin.split('\\n')[1])\n    blocks = list(map(int, stdin.split('\\n')[2:]))\n    max_k = max(blocks)\n    print(max_k)\n    \n    for i in range(num_blocks):\n        if q == 1:\n            print(blocks[i])\n        elif q == 2:\n            print(blocks[i], blocks[i-1], blocks[i-2], blocks[i-3], blocks[i-4])\n        elif q == 3:\n            print(blocks[i], blocks[i-1], blocks[i-2], blocks[i-3], blocks[i-4], blocks[i-5])\n        elif q == 4:\n            print(blocks[i], blocks[i-1], blocks[i-2], blocks[i-3], blocks[i-4], blocks[i-5], blocks[i-6])\n        elif q == 5:\n            print(blocks[i], blocks[i-1], blocks[i-2], blocks[i-3], blocks[i-4], blocks[i-5], blocks[i-6], blocks[i-7])\n        elif q == 6:\n            print(blocks[i], blocks[i-1], blocks[i-2], blocks[i-3], blocks[i-4], blocks[i-5], blocks[i-6], blocks[i-7], blocks[i-8])\n        elif q == 7:\n            print(blocks[i], blocks[i-1], blocks[i-2], blocks[i-3], blocks[i-4], blocks[i-5], blocks[i-6], blocks[i-7], blocks[i-8], blocks[i-9])\n        elif q == 8:\n            print(blocks[i], blocks[i-1], blocks[i-2], blocks[i-3], blocks[i-4], blocks[i-5], blocks[i-6], blocks[i-7], blocks[i-8], blocks[i-9], blocks[i-10])\n        elif q == 9:\n            print(blocks[i], blocks[i-1], blocks[i-2], blocks[i-3], blocks[i-4], blocks[i-5], blocks[i-6], blocks[i-7], blocks[i-8], blocks[i-9], blocks[i-10], blocks[i-11])\n        elif q == 10:\n            print(blocks[i], blocks[i-1], blocks[i-2], blocks[i-3], blocks[i-4], blocks[i-5], blocks[i-6], blocks[i-7], blocks[i-8], blocks[i-9], blocks[i-10], blocks[i-11], blocks[i-12])\n        elif q == 11:\n            print(blocks[i], blocks[i-1], blocks[i-2], blocks[i-3], blocks[i-4], blocks[i-5], blocks[i-6], blocks[i-7], blocks[i-8], blocks[i-9], blocks[i-10], blocks[i-11], blocks[i-12], blocks[i-13])\n        else:\n            break\n    return str(blocks[-1])"
    },
    {
        "number": 4138,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    answer = 0\n    queries = int(stdin)\n    for _ in range(queries):\n        n = int(input())\n        seq = stdin[:n].split()\n        k = int(input())\n        for i in range(len(seq)):\n            seq[i] = int(seq[i])\n        if len(seq) == 1:\n            answer += seq[0]\n        else:\n            answer += seq[k] - seq[0]\n    return answer\n'''\n"
    },
    {
        "number": 4138,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n    return str(int(stdin))\n\"\"\""
    },
    {
        "number": 4138,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    q,k,r=map(int,stdin.split())\n    seq = stdin.split()\n    if q==1:\n        return ''.join([str(int(i)%10) for i in seq])\n    else:\n        lst=[]\n        for i in range(k):\n            lst.append(seq[i]*(10**i))\n        lst.sort()\n        answer=''\n        for j in range(r):\n            answer += str(lst[j])\n        return answer\n\nprint(solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 111 112 113 114 115 116 117 118 119 120 121 121 122 123 123 124 125 126 127 128 129 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 169 170 171 171 172 173 174 175 176 178 179 180 181 182 183 184 185 186 187 188 189 190 191 191 192 193 194 195 196 196 197 198 199 200 201 201 202 203 204 205 206 207 208 208 209 210 211 212 213 214 215 216 217 218 219 220 221 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245"
    },
    {
        "number": 4138,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    nums = [int(stdin.split()[i]) for i in range(q)]\n    def sift(arr):\n        n = len(arr)\n        for i in range(n//2):\n            for j in range(i+i, n, i):\n                tmp = arr[i]\n                arr[i] = arr[j]\n                arr[j] = tmp\n        \n        for i in range(n//2, -1, -1):\n            for j in range(i-1, -1, -1):\n                tmp = arr[i]\n                arr[i] = arr[j]\n                arr[j] = tmp\n        return arr\n    nums = sift(nums)\n    for i in range(q):\n        print(nums[i], end=\" \")\n"
    },
    {
        "number": 4138,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    k = 0\n    digit = \"\"\n    for i in range(n):\n        num,digit = map(str, stdin.split())\n        digit = str(int(digit) - int(k))\n        k += 1\n        digit = digit + str(int(num) - int(k))\n    return digit"
    },
    {
        "number": 4138,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    #code here\n    return '1'\n\n\n\ndef"
    },
    {
        "number": 4138,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(int(stdin.strip())):\n        k_i, s = map(int, stdin.strip().split())\n        print(int(s.rstrip(\"123456789\")))\n        \nsolution('''\n123\n5\n2132\n506\n999999999999999999\n1000000000000000000\n''')\n"
    },
    {
        "number": 4138,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def digits(k):\n        return sum(set(map(int, list(str(k)))) - {0})\n    def isPalindrome(s):\n        return s == s[::-1]\n    \n    n = int(stdin.strip())\n    res = []\n    for _ in range(n):\n        k = stdin.strip().split()\n        print(k)\n        if digits(k[1])!= digits(k[0]):\n            res.append(digits(k[0]))\n        else:\n            res.append(digits(k[0]))\n            \n    return ''.join(str(e) for e in res)\n    \n"
    },
    {
        "number": 4139,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(1, int(stdin) + 1):\n        count = 0\n        for j in range(len(str(i))):\n            count += 1 if str(i)[j] == '7' else 0\n        if count >= 3:\n            return str(i)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4139,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n  lst = list(stdin)\n  answer = 0\n  if(lst[0] == '5'):\n    answer += 1\n  else:\n    for i in range(1, len(lst)):\n      if(lst[i]!= '7'):\n        answer += 2\n      else:\n        answer += 1\n  return str(answer)\n"
    },
    {
        "number": 4139,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    result = []\n    n = int(stdin)\n\n    for i in range(1, n+1):\n        n = str(i)\n        num = 0\n        # if n[0]==\"7\":\n        #     num = 1\n        # elif n[0]==\"5\":\n        #     num = 2\n        # elif n[0]==\"3\":\n        #     num = 3\n        # else:\n        #     num = int(n)\n        #     num=num//10\n        #     num = num * 10 + num % 10\n\n        if n[0]==\"7\":\n            num = num*10 + num%10\n        elif n[0]==\"5\":\n            num = num*10 + num%10\n        elif n[0]==\"3\":\n            num = num*10 + num%10\n        else:\n            num = num*10 + num%10\n\n        if num<10:\n            num = num+1\n        num = num//10\n        num = num * 10 + num % 10\n        if num > 999:\n            num = num//100\n            num = num + num % 100\n\n        result.append(str(num))\n    \n    return \" \".join(result)\n"
    },
    {
        "number": 4139,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    ans = 0\n    for i in range(1, int(stdin)+1):\n        for j in range(1, int(stdin)+1):\n            if (i*j) % 10 == 7 or (i*j) % 10 == 5 or (i*j) % 10 == 3:\n                ans += 1\n    return ans\nprint(solution(input()))\n"
    },
    {
        "number": 4139,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def next_number(num: int) -> int:\n        ret = 0\n        while True:\n            ret += (num % 10) ** 5\n            num //= 10\n            if num == 0:\n                break\n        return ret\n\n    def has_seven(num: int) -> bool:\n        return False if next_number(num) > 7 else True\n\n    N = int(stdin)\n    if N < 1 or N > 10 ** 9:\n        return \"\"\n\n    result = ''\n    count = 0\n    for num in range(1, N + 1):\n        if has_seven(num):\n            count += 1\n        result += str(count) +''\n    return result[:-1]\n\n\ndef"
    },
    {
        "number": 4139,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    # Count Shichi-Go-San numbers\n    shichi = 0\n    for _ in range(1, n):\n        if _%10 == 7:\n            shichi += 1\n        elif _%10 == 5:\n            shichi -= 1\n        elif _%10 == 3:\n            shichi -= 1\n        else:\n            shichi += 1\n\n    # Count the Shichi-Go-San numbers without using the same digits\n    if shichi!= n:\n        shichi += 1\n\n    # Divide the number into the smaller number\n    m = n % shichi\n    if m!= 0:\n        m += 1\n    else:\n        m = shichi\n\n    # Print the number of Shichi-Go-San numbers\n    print(shichi)\n    print(m)\n\n    return str(m)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4139,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    for i in range(N, 0, -1):\n        if N % i == 0:\n            print(i)\n    return \"0\"\n\n\nprint(solution(\"575\"))\n'''\ninput = input()\nN = int(input)\nfor i in range(N, 0, -1):\n    if N % i == 0:\n        print(i)"
    },
    {
        "number": 4139,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    numbers = [int(s) for s in stdin.split()]\n    print(len(set(numbers)))\n    return str(len(set(numbers)))\n\nprint(solution(\"7457\"))"
    },
    {
        "number": 4139,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    nums = list(map(int, str(N)))\n    result = [0] * (N + 1)\n    result[1] = 1\n    n = 1\n    for i in range(2, N + 1):\n        if result[n] == 1:\n            for j in range(n, n + i + 1):\n                result[j] = result[j] + 1\n            result[n] = 1\n        n += 1\n    return str(result[N])\n"
    },
    {
        "number": 4139,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    \n    # the given number is in base ten\n    # convert to integer\n    N = int(stdin, 2)\n    \n    # generate all possible combinations of the given number in base ten\n    # store them in a set\n    result = set()\n    for i in range(1, N+1):\n        result.add(i)\n        for j in range(i, N+1, i):\n            result.add(j)\n            \n    # compare numbers with the given number\n    # save them in a set\n    res = set()\n    for i in range(1, N+1):\n        if i not in result:\n            res.add(i)\n    \n    # return the number of the Shichi-Go-San numbers\n    return str(len(res))"
    },
    {
        "number": 4140,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    l = len(stdin)\n    if l == 0:\n        return \"0\"\n    lst = [0]*(l+1)\n    lst[0] = 0\n    lst[1] = 1\n    for i in range(2, l):\n        lst[i] = lst[i-1] + lst[i-2]\n    return str(lst[n])\n\nSample Output\nSample Input\n000\n\nSample Output\n1\n\n-----Constraints-----\n - 1 \\leq |S| \\leq 10^5\n - S_i is 0 or 1.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nS\n\n-----Output-----\nPrint the minimum number of tiles that need to be repainted to satisfy the condition.\n\n-----Sample Input-----\n000\n\n-----Sample Output-----\n1\n\nThe condition can be satisfied by repainting the middle tile white.\ndef"
    },
    {
        "number": 4140,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(stdin) - len(set(stdin)))\n\n-----Bug alert-----\nThe sample input is too long, so we will add the number of spaces to the right of it\nto fill the width of the largest number of spaces.\n\nSee: https://stackoverflow.com/a/33161654/19713994\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4140,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n    def solve(s: str) -> str:\n        \n        if len(s) == 0:\n            return \"0\"\n        if len(s) == 1:\n            return \"1\"\n        for i in range(len(s)):\n            if s[i] == \"0\" or s[i] == \"1\":\n                s[i] = solve(s[i+1:])\n        return s[0]\n        \n    n = int(stdin.readline())\n    s = stdin.readline()\n    print(solve(s))\n    return \"\"\n\n\"\"\"\ndef"
    },
    {
        "number": 4140,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    def solution(stdin: str) -> str:\n        n, *S = map(int, stdin)\n        color = [i for i in range(0, 10)]\n        for i in range(0, n):\n            if S[i] == 0:\n                color[0] += 1\n            else:\n                color[1] += 1\n        if color[0] == color[1]:\n            return 1\n        else:\n            return color[0] + color[1]\n    return str(solution(stdin))\n    '''\n    def solution(stdin):\n        n, *S = map(int, stdin)\n        color = [i for i in range(0, 10)]\n        dp = [0] * (n + 1)\n        for i in range(0, n + 1):\n            for s in S:\n                if s == 0:\n                    dp[i] += color[0]\n                else:\n                    dp[i] += color[1]\n        return str(dp[n])\n    return str(solution(stdin))\n\n'''\n"
    },
    {
        "number": 4140,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin[0]\n    N = int(stdin[1])\n    color_set = []\n    for _ in range(N):\n        color_set.append(stdin[2*_+1])\n    # print(color_set)\n    color_set = list(set(color_set))\n    color_set.sort()\n    # print(color_set)\n    # print(color_set[0])\n    return f'{len(color_set)}'\n"
    },
    {
        "number": 4140,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # 0 means the number of rows\n    rows = int(stdin)\n    # 0 means the number of colums\n    cols = int(stdin)\n    # list of tiles represented by two characters\n    s = [list(stdin) for i in range(rows * cols)]\n    # list of black tiles\n    black_tiles = []\n    # list of white tiles\n    white_tiles = []\n\n    # draw white tiles from the left to the right\n    for i in range(rows):\n        for j in range(cols):\n            if s[i * cols + j][0] == '1':\n                white_tiles.append([i * cols + j, j, 'white'])\n            else:\n                black_tiles.append([i * cols + j, j, 'black'])\n\n    # iterate through the white tiles\n    for i in white_tiles:\n        for j in range(cols):\n            if s[i[0] * cols + j][1] == '1':\n                s[i[0] * cols + j][2] = 'white'\n            else:\n                s[i[0] * cols + j][2] = 'black'\n\n    # iterate through the black tiles\n    for i in black_tiles:\n        for j in range(cols):\n            if s[i[0] * cols + j][2] == 'white':\n                s[i[0] * cols + j][2] = 'black'\n            else:\n                s[i[0] * cols + j][2] = 'white'\n\n    # return the minimum number of tiles that need to be repainted\n    return str(rows - sum(s))"
    },
    {
        "number": 4140,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    S = [int(s) for s in stdin]\n    for i in range(len(S)):\n        if S[i] == 1:\n            S[i] = 0\n        else:\n            S[i] = 1\n    print(sum(S))\n    return \"\"\n    \n"
    },
    {
        "number": 4140,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    \n    num_white = 0\n    num_black = 0\n    \n    for i in range(n):\n        s = stdin.strip()\n        if s[0] == '0':\n            num_white += 1\n        else:\n            num_black += 1\n    \n    if num_black > num_white:\n        return str(num_black)\n    else:\n        return str(num_white)\n    \n"
    },
    {
        "number": 4140,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    def solution(x, y, S):\n        if x == y: return 1\n        if S[y*2] == '0' and S[y*2+1] == '1': return solution(x, y*2, S)\n        if S[y*2] == '1' and S[y*2+1] == '0': return solution(x, y*2, S)\n        if S[y*2] == '0': return solution(x, y*2+1, S)\n        if S[y*2+1] == '1': return solution(x, y*2, S)\n        return 0\n    return min(solution(x, y, S) for x in range(n) for y in range(n)) + 1\n"
    },
    {
        "number": 4140,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin) % 2!= 0:\n        return \"Error\"\n    number = len(stdin) // 2\n    s = [list(stdin[i:i + 2]) for i in range(0, len(stdin), 2)]\n    c = 0\n    for i in range(number):\n        if s[i][0] == s[i + 1][0] and s[i][1] == s[i + 1][1]:\n            s[i] = [0, 1]\n            c += 1\n        elif s[i][0] == s[i + 1][1] and s[i][1] == s[i + 1][0]:\n            s[i] = [1, 0]\n            c += 1\n        else:\n            return \"Error\"\n    return c\n\ndef"
    },
    {
        "number": 4141,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    list1 = list(map(int, stdin.strip().split()))\n    list1.sort(reverse=True)\n    ans = ''\n    count = 0\n    for i in range(n):\n        if i % 2 == 0:\n            count += 1\n            if count == 1:\n                ans += '0'\n            else:\n                ans += str(list1[i])\n        elif i % 2 == 1:\n            count += 1\n            if count == 1:\n                ans += '1'\n            else:\n                ans += str(list1[i])\n    return ans\n\nn = int(input())\na = list(map(int, input().strip().split()))\nprint(solution(str(n) + str(a)))\n"
    },
    {
        "number": 4141,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    print(''.join([str(x) for x in list(filter(lambda x: x % 3 == 0 or x % 5 == 0, range(n + 1)))[::-1]]))\n"
    },
    {
        "number": 4141,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    ans = 'DENIED'\n    for i in range(len(stdin)):\n        if (stdin[i] % 3 == 0 or stdin[i] % 5 == 0):\n            ans = 'APPROVED'\n    return ans\n"
    },
    {
        "number": 4141,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    A = [int(x) for x in stdin.strip().split()]\n    \n    d = dict()\n    for x in A:\n        if x % 3 == 0 or x % 5 == 0:\n            d[x] = 1\n    \n    flag = 0\n    for i in d:\n        if d[i] % 3 == 0 or d[i] % 5 == 0:\n            flag = 1\n            break\n    \n    if flag == 1:\n        return \"APPROVED\"\n    \n    else:\n        return \"DENIED\"\n\ndef"
    },
    {
        "number": 4141,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    N = int(stdin)\n    answer = \"\"\n    \n    for i in range(N):\n        answer += str(int(stdin[i])%3)+\",\"\n        \n    answer = answer[:-1]\n    \n    return answer\n\ndef"
    },
    {
        "number": 4141,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, A = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    for i in range(N - 1):\n        a[i] = a[i] + a[i + 1]\n    for i in range(N - 2, -1, -1):\n        a[i] = a[i] - a[i + 1]\n    for i in range(N):\n        if a[i] % 3 == 0:\n            a[i] = a[i] / 3\n        elif a[i] % 5 == 0:\n            a[i] = a[i] / 5\n    if a[0] == 0:\n        a[0] = a[1]\n    if a[N - 1] == 0:\n        a[N - 1] = a[N - 2]\n    print(\"\".join([str(i) for i in a]))\n    return \"APPROVED\" if a[0] == 0 else \"DENIED\"\n\ndef"
    },
    {
        "number": 4141,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    number = [i for i in range(1,n+1) if i%3==0 and i%5==0]\n    print(number)\n    return 'APPROVED' if number==number[::-1] else 'DENIED'\n\n-----Explanation-----\n- To get the list of even numbers written on the document,\n- the first number is 6,\n- the last number is 10,\n- each number has 3 or 5 divisors,\n- the third number is 6,\n- the fourth number is 10.\nThe even numbers are the numbers 6 and 10, so the immigrant should be allowed entry.\n\n----Examples----\nsolution('1') \u2192 'APPROVED'\nsolution('9') \u2192 'DENIED'\nsolution('6') \u2192 'APPROVED'\n\n-----Constraints-----\n - All values in input are integers.\n\n-----Input Format\n\nThe first line contains the number of test cases.\nThe next line contains the space separated values of test cases.\n\n-----Output Format\n\nPrint the values of APPROVED, DENIED, or APPROVED according to the conditions in the above format.\n\n-----Sample Input\n\n3\n1 2 3\n\n-----Sample Output\n\nAPPROVED\n\n-----Explanation\n\nThe first line contains the number of test cases.\nThe next line contains the space separated values of test cases.\n\n-----Constraints\n\n- All values in input are integers.\n- 1 \\leq N \\leq 100\n- 1 \\leq A_i \\leq 1000\n\n-----Input\n\n2\n3 2\n\n-----Output\n\nDENIED\n\n-----Explanation\n\nThe first line contains the number of test cases.\nThe next line contains the space separated values of test cases.\n\n-----Constraints\n\n- All values in input are integers.\n- 1 \\leq N \\leq 100\n- 1 \\leq A_i \\leq 1000\n\n-----Input\n\n2 3\n1 2\n\n-----Output\n\nAPPROVED\n\n-----Explanation\n\nThe first line contains the number of test cases.\nThe next line contains the space separated values of test cases.\n\n-----Constraints\n\n- All values in input are integers.\n- 1 \\leq N \\leq 100\n- 1 \\leq A_i \\leq 1000\n\n-----Input\n\n1 2\n\n-----Output\n\nDENIED\n\n-----Explanation\n\nThe first line contains the number of test cases.\nThe next line contains the space separated values of test cases.\n\n-----Constraints\n\n- All values in input are integers.\n- 1 \\leq N \\leq 100\n- 1 \\leq A_i \\leq 1000\n\n-----Input\n\n1\n\n-----Output\n\nAPPROVED\n\n-----Explanation\n\nThe first line contains the number of test cases.\nThe next line contains the space separated values of test cases.\n\n-----Constraints\n\n- All values in input are integers.\n- 1 \\leq N \\leq 100\n- 1 \\leq A_i \\leq 1000\n\n-----Input\n\n1\n\n2\n\n-----Output\n\nDENIED\n\n-----Explanation\n\nThe first line contains the number of test cases.\nThe next line contains the space separated values of test cases.\n\n-----Constraints\n\n- All values in input are integers.\n- 1 \\leq N \\leq 100\n- 1 \\leq A_i \\leq 1000\n\n-----Input\n\n1\n\n1\n\n-----Output\n\nAPPROVED\n\n-----Explanation\n\nThe first line contains the number of test cases.\nThe next line contains the space separated values of test cases.\n\n-----Constraints\n\n- All values in input are integers.\n- 1 \\leq N \\leq 100\n- 1 \\leq A_i \\leq 1000\n\n-----Input\n\n1 1\n\n-----Output\n\nAPPROVED\n\n-----Explanation\n\nThe first line contains the number of test cases.\nThe next line contains the space separated values of test cases.\n\n-----Constraints\n\n- All values in input are integers.\n- 1 \\leq N \\leq 100\n- 1 \\leq A_i \\leq 1000\n\n-----Input\n\n2 1\n\n-----Output\n\nDENIED\n\n-----Explanation\n\nThe first line contains the number of test cases.\nThe next line contains the space separated values of test cases.\n\n-----Constraints\n\n- All values in input are integers.\n- 1 \\leq N \\leq 100\n- 1 \\leq A_i \\leq 1000\n\n-----Input\n\n2 1\n\n-----Output\n\nAPPROVED\n\n-----Explanation\n\nThe first line contains the number of test cases.\nThe next line contains the space separated values of test cases.\n\n-----Constraints\n\n- All values in input are integers.\n- 1 \\leq N \\leq 100\n- 1 \\leq A_i \\leq 1000\n\n-----Input\n\n1 2\n\n-----Output\n\nAPPROVED\n\n-----Explanation\n\nThe first line contains the number of test cases.\nThe next line contains the space separated values of test cases.\n\n-----Constraints\n\n- All values in input are integers.\n- 1 \\leq N \\leq 100\n- 1 \\leq A_i \\leq 1000\n\n-----Input\n\n2 2\n\n-----Output\n\nDENIED\n\n-----Explanation\n\nThe first line contains the number of test cases.\nThe next line contains the space separated values of test cases.\n\n-----Constraints\n\n- All values in input are integers.\n- 1 \\leq N \\leq 100\n- 1 \\leq A_i \\leq 1000\n\n-----Input\n\n2 2\n\n-----Output\n\nAPPROVED\n\n-----Explanation\n\nThe first line contains the number of test cases.\nThe next line contains the space separated values of test cases.\n\n-----Constraints\n\n- All values in input are integers.\n- 1 \\leq N \\leq 100\n- 1 \\leq A_i \\leq 1000\n\n-----Input\n\n2 2\n\n-----Output\n\nDENIED\n\n-----Explanation\n\nThe first line contains the number of test cases.\nThe next line contains the space separated values of test cases.\n\n-----Constraints\n\n- All values in input are integers.\n- 1 \\leq N \\leq 100\n- 1 \\leq A_i \\leq 1000\n\n-----Input\n\n1 1\n\n-----Output\n\nAPPROVED\n\n-----Explanation\n\nThe first line contains the number of test cases.\nThe next line contains the space separated values of test cases.\n\n-----Constraints\n\n- All values in input are integers.\n- 1 \\leq N \\leq 100\n- 1 \\leq A_i \\leq 1000\n\n-----Input\n\n1 1\n\n-----Output\n\nDENIED\n\n-----Explanation\n\nThe first line contains the number of test cases.\nThe next line contains the space separated values of test cases.\n\n-----Constraints\n\n- All values in input are integers.\n- 1 \\leq N \\leq 100\n- 1 \\leq A_i \\leq 1000\n\n-----Input\n\n1 1\n\n-----Output\n\nAPPROVED\n\n-----Explanation\n\nThe first line contains the number of test cases."
    },
    {
        "number": 4141,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, A = map(int, stdin.split())\n    if (n % 3 or n % 5) == 0:\n        return \"APPROVED\"\n    else:\n        return \"DENIED\""
    },
    {
        "number": 4141,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n == 1:\n        return \"APPROVED\"\n    else:\n        if n%3==0 or n%5==0:\n            return \"DENIED\"\n        else:\n            return \"APPROVED\""
    },
    {
        "number": 4141,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, input().strip().split()))\n    count = 0\n    for i in a:\n        if i % 3 == 0 or i % 5 == 0:\n            count += 1\n    if count % 2 == 0:\n        return 'DENIED'\n    else:\n        return 'APPROVED'\n"
    },
    {
        "number": 4142,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    from itertools import cycle\n    def is_valid_s(S):\n        count_dict = {}\n        for char in cycle(S):\n            if char in count_dict:\n                count_dict[char] += 1\n            else:\n                count_dict[char] = 1\n        return len(count_dict) == len(S)\n    \n    def is_valid_s2(S):\n        count_dict = {}\n        for char in cycle(S):\n            if char in count_dict:\n                count_dict[char] += 1\n            else:\n                count_dict[char] = 1\n        return all(count_dict[char] % 2 == 0 for char in count_dict)\n    \n    def solution2(stdin: str) -> str:\n        return \"Yes\" if is_valid_s2(stdin) else \"No\"\n"
    },
    {
        "number": 4142,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(1, 10):\n        for j in range(i):\n            if i % 2 == 0:\n                print(i, end=\" \")\n            else:\n                print(i, end=\" \")\n        print()\n        \n    return \"Yes\"\n\n### Driver Code\n"
    },
    {
        "number": 4142,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.splitlines()\n\n    for i in range(len(input)):\n        if input[i][0] == \"R\":\n            if int(input[i][2:]) % 2 == 0:\n                if int(input[i][4:]) % 2 == 0:\n                    print(\"Yes\")\n                else:\n                    print(\"No\")\n            else:\n                print(\"No\")\n\n        elif input[i][0] == \"U\":\n            if int(input[i][2:]) % 2!= 0:\n                if int(input[i][4:]) % 2 == 0:\n                    print(\"Yes\")\n                else:\n                    print(\"No\")\n            else:\n                print(\"No\")\n\n        elif input[i][0] == \"D\":\n            if int(input[i][2:]) % 2!= 0:\n                if int(input[i][4:]) % 2 == 0:\n                    print(\"Yes\")\n                else:\n                    print(\"No\")\n            else:\n                print(\"No\")\n"
    },
    {
        "number": 4142,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n  S = stdin.strip().lower()\n  if not(S.startswith('rudlu')) or not(S.endswith('ru')):\n    return 'Yes'\n  for i in range(1, len(S)):\n    if S[i-1] == 'r' and S[i] == 'u':\n      return 'No'\n    if S[i-1] == 'd' and S[i] == 'l':\n      return 'No'\n  return 'Yes'\n'''\n\ndef"
    },
    {
        "number": 4142,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = list(stdin)\n    count = 0\n    for i in s:\n        if i == 'R' or i == 'D':\n            count += 1\n        else:\n            count -= 1\n    return str(count == 0)\n\ndef"
    },
    {
        "number": 4142,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n    arr = list(stdin)\n    for idx, c in enumerate(arr):\n        if c == \"R\" and idx % 2 == 0:\n            arr[idx] = \"L\"\n        elif c == \"U\" and idx % 2 == 1:\n            arr[idx] = \"D\"\n        elif c == \"D\" and idx % 2 == 0:\n            arr[idx] = \"U\"\n        elif c == \"D\" and idx % 2 == 1:\n            arr[idx] = \"R\"\n    return \"\".join(arr)"
    },
    {
        "number": 4142,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    # check if string is valid\n    s = str(stdin).upper()\n    if len(s) > 100 or len(s) < 1:\n        return False\n    \n    s = [str(s[i]).lower() for i in range(len(s))]\n    for i in range(len(s)):\n        if len(s[i]) % 2!= 0:\n            return False\n    \n    # check for matches\n    found = False\n    for i in range(len(s)):\n        if len(s[i]) % 2!= 0:\n            return False\n        for j in range(len(s[i])):\n            if s[i][j] == \"R\":\n                if i % 2 == 0:\n                    if s[i-1][0] == \"L\":\n                        return False\n                elif i % 2!= 0:\n                    if s[i-1][-1] == \"D\":\n                        return False\n            elif s[i][j] == \"L\":\n                if i % 2 == 0:\n                    if s[i-1][-1] == \"R\":\n                        return False\n                elif i % 2!= 0:\n                    if s[i-1][0] == \"D\":\n                        return False\n            elif s[i][j] == \"U\":\n                if i % 2 == 0:\n                    if s[i-1][-1] == \"D\":\n                        return False\n                elif i % 2!= 0:\n                    if s[i-1][0] == \"L\":\n                        return False\n            elif s[i][j] == \"D\":\n                if i % 2 == 0:\n                    if s[i-1][0] == \"U\":\n                        return False\n                elif i % 2!= 0:\n                    if s[i-1][-1] == \"R\":\n                        return False\n    return found\n    \n    pass\n"
    },
    {
        "number": 4142,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  "
    },
    {
        "number": 4142,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    try:\n        li = [int(s) for s in S.split()]\n        if all(0 <= s <= 20 for s in li):\n            if all(s == 0 or s == 1 or s == 2 or s == 3 or s == 4 or s == 5 or s == 6 or s == 7 or s == 8 or s == 9 or s == 10 or s == 11 or s == 12 or s == 13 or s == 14 or s == 15 or s == 16 or s == 17 or s == 18 or s == 19 or s == 20 for s in li):\n                return \"Yes\"\n            else:\n                return \"No\"\n    except:\n        return \"No\"\n"
    },
    {
        "number": 4142,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lst = list(stdin)\n    check = 0\n    for i in lst:\n        if i in [0, 'L', 'R']:\n            check += 1\n    if lst[check-1] == 0:\n        return 'Yes'\n    elif lst[check-1] == 1:\n        return 'No'\n    else:\n        return 'No'\n\ndef"
    },
    {
        "number": 4143,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B, C, D, E, G = map(int, stdin.split())\n    A = A - G\n    B = B - C\n    C = C - D\n    D = D - E\n    E = E - G\n    \n    for i in range(N):\n        if A > 0:\n            A = A + B - C - D - E - E\n            \n        elif B > 0:\n            B = B + C - D - E - G - A\n            \n        elif C > 0:\n            C = C + D - E - A - G - B\n            \n        elif D > 0:\n            D = D + E - A - B - C\n            \n        elif E > 0:\n            E = E + G - B - C - D - A - B - C - D\n            \n        else:\n            E = E + G - B - C - D - A - B - C - D - A - B - C\n            \n    if A + B + C + D + E + G == 0:\n        return str(N * 60)\n    elif A + B + C + D + E + G > 0:\n        return str(N * 60 + (N - 1) * 60)\n    else:\n        return str(N * 60 + (N - 1) * 60 + (N * 60))\n\ntest = solution(\"5\")\nprint(test)\n"
    },
    {
        "number": 4143,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def count():\n        N = int(stdin)\n        count = 0\n        for i in range(1, N+1):\n            for j in range(1, i+1):\n                count += (j-1) * (j+1) // 2\n        return count\n\n    return str(count())"
    },
    {
        "number": 4143,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin)\n    N = list(map(int, stdin.split()))\n    answer = ''\n    for i in range(T):\n        time = list(map(int, stdin.split()))\n        print(time)\n        for i in range(len(time)-1):\n            if time[i]==time[i+1]:\n                answer += '0'\n            elif time[i]>time[i+1]:\n                answer += '1'\n            else:\n                answer += '2'\n        answer += '0'\n    return answer"
    },
    {
        "number": 4143,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    answer = []\n    dep = {}\n    for i in range(n):\n        dep[i+1] = set()\n    dep[0] = {0}\n    for i in range(m):\n        temp = list(map(int, stdin.split()))\n        dep[temp[0]+1] = set(temp[1:])\n    answer = list(map(int, stdin.split()))\n    for i in range(1,n):\n        dep[i] = dep[i-1].union(dep[i+1])\n    for i in range(n):\n        for j in range(i,n):\n            if i not in dep[j] and i in dep[j-1] and i not in answer:\n                answer.append(i)\n    return answer[0]\n\n#######\n#######\n#######\ndef"
    },
    {
        "number": 4143,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    graph = [[] for _ in range(n+1)]\n    for i in range(n):\n        a, b = map(int, stdin.split())\n        graph[a].append(b)\n        graph[b].append(a)\n    \n    answer = 0\n    for i in range(1, n+1):\n        for j in graph[i]:\n            for k in graph[j]:\n                if i == k:\n                    answer = max(answer, abs(j-i) + abs(k-j))\n    \n    return str(answer)\n\"\"\"\n\nclass Solution:\n    def numberOfMinutes(self, n: int, carPool: List[List[int]]) -> int:\n        return 0 if not n else (sum(carPool[i] for i in range(1, n+1)) + sum(carPool[i] for i in range(1, n+1) if i!= i - 1)) % 60"
    },
    {
        "number": 4143,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    \n    count = 0\n    \n    def travel(n):\n        nonlocal count\n        if n == N:\n            count += 1\n            return count\n        \n        ret = 0\n        for i in range(n):\n            ret += travel(i + 1)\n        return ret\n\n    answer = travel(N)\n    print(answer)\n    return str(answer)\n\n(DP)"
    },
    {
        "number": 4143,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    people = list(map(lambda s: s.split(), stdin.split()))\n\n    # time = 1\n    time = 0\n    for i in range(len(people)):\n        for j in range(len(people)):\n            # print('people', people)\n            # print(people[i])\n            if i!= 0 and j!= 0 and people[i][0] == people[j][0]:\n                # print('i==', i, 'j==', j)\n                time += 1\n            else:\n                # print('diff', people[i][1] - people[j][1])\n                time += 1\n\n    print(time)\n    return str(time)\n\n\n\n-----Sample Input-----\n5\n3\n2\n4\n3\n5\n\n-----Sample Output-----\n7\n\nOne possible way to travel is as follows.\nFirst, there are N = 5 people at City 1, as shown in the following image:\n\nIn the first minute, three people travels from City 1 to City 2 by train. Note that a train can only occupy at most three people.\n\nIn the second minute, the remaining two people travels from City 1 to City 2 by train, and two of the three people who were already at City 2 travels to City 3 by bus. Note that a bus can only occupy at most two people.\n\nIn the third minute, two people travels from City 2 to City 3 by train, and another two people travels from City 3 to City 4 by taxi.\n\nFrom then on, if they continue traveling without stopping until they reach City 6, all of them can reach there in seven minutes.\n\nThere is no way for them to reach City 6 in 6 minutes or less.\ndef"
    },
    {
        "number": 4143,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    available_time = [0] * (N+1)\n    for i in range(1, N+1):\n        available_time[i] = int(stdin.strip())\n    return min(available_time)\n"
    },
    {
        "number": 4143,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B, C, D, E = map(int, stdin.split())\n    if A > B:\n        if A > C:\n            if A > D:\n                if A > E:\n                    return '7'\n                else:\n                    return '8'\n            else:\n                return '7'\n        else:\n            return '8'\n    else:\n        if B > C:\n            if B > D:\n                if B > E:\n                    return '7'\n                else:\n                    return '8'\n            else:\n                return '8'\n        else:\n            if C > E:\n                if C > D:\n                    return '7'\n                else:\n                    return '8'\n            else:\n                return '8'\nsolution(stdin)"
    },
    {
        "number": 4143,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B, C, D, E, F, G, H, I, J, K, L, M, N = map(int, stdin.split())\n    return str(min(C - A, B - F, D - G, E - I, F - H, G - J, I - M)) + \" minutes\"\n"
    },
    {
        "number": 4144,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    seq = list(map(int, stdin.split()))\n    for i in range(1, len(seq)):\n        if seq[i-1] == 0:\n            seq[i-1] = 9\n        elif seq[i-1] == 9:\n            seq[i-1] = 0\n    return ''.join(map(str, seq))\n\nprint(solution(\"2\"))"
    },
    {
        "number": 4144,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    answer = 0\n    n = int(input())\n    for _ in range(n):\n        s = input()\n        numbers = [int(x) for x in s.split()]\n        total = sum(numbers)\n        if total % 10 == 9:\n            answer += len(numbers) - 1\n        else:\n            answer += len(numbers)\n    print(answer % (10 ** 9 + 7))\n\n\nConstraints:\n * 2 <= N <= 10^5\n * N is an integer.\n * All the numbers of the sequence satisfy all of the following:\n * 0 \\leq A_i \\leq 9\n * A_i \\leq 9\n * There exists some i such that A_i=0 holds.\n * There exists some i such that A_i=9 holds.\n\n-----Example 1 -----\n\nInput:\n\nN = 2\n\nSample Output:\n\n4\n\nExplanation:\n\nThe sequences are 0, 9, and 10, so the answer will be 2.\n\n-----Example 2 -----\n\nInput:\n\nN = 3\n\nSample Output:\n\n6\n\nExplanation:\n\nThe sequences are 0, 6, and 3, so the answer will be 3.\n\n-----Example 3 -----\n\nInput:\n\nN = 1\n\nSample Output:\n\n0\n\nExplanation:\n\nThe sequences are 0, 1, and 0, so the answer will be 0.\n\n\"\"\""
    },
    {
        "number": 4144,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    answer = 0\n    n = int(stdin)\n    nums = []\n    for i in range(1,n+1):\n        nums.append(i)\n    for i in range(1,n+1):\n        for j in range(i+1,n+1):\n            if nums[i] > nums[j] and nums[i]%9 == 0:\n                answer = (answer + 1)%10\n            elif nums[j] > nums[i] and nums[j]%9 == 0:\n                answer = (answer + 1)%10\n            elif nums[i] > nums[j] and nums[i]%9!= 0:\n                answer = (answer + 1)%10\n            elif nums[j] > nums[i] and nums[j]%9!= 0:\n                answer = (answer + 1)%10\n            elif nums[i] > nums[j] and nums[i]%9!= 0 and nums[j]%9 == 0:\n                answer = (answer + 1)%10\n            elif nums[j] > nums[i] and nums[j]%9!= 0 and nums[i]%9 == 0:\n                answer = (answer + 1)%10\n            elif nums[i] > nums[j] and nums[i]%9!= 0 and nums[j]%9!= 0:\n                answer = (answer + 1)%10\n            elif nums[i] > nums[j] and nums[i]%9!= 0 and nums[j]%9 == 0:\n                answer = (answer + 1)%10\n    print(answer%10)\n\n-----Sample Output-----\nExample 1:\nInput:\n2\n\nOutput:\n2\n\nExplanation:\n- 1,1,2 satisfies all conditions, therefore return 2.\n- 2,1,2,3 satisfies all conditions, therefore return 2.\n- 2,2,3 satisfies all conditions, therefore return 2.\nExample 2:\nInput:\n1\n\nOutput:\n0\n\nExplanation:\n- 1,1,1,2 satisfy all conditions, therefore return 0.\n- 1,1,2,3,2,4 satisfy all conditions, therefore return 0.\n- 2,1,2,3,3,4,5 satisfy all conditions, therefore return 0.\n\"\"\""
    },
    {
        "number": 4144,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n  return str(int(stdin) % 9)\n\"\"\",\n\n\"Solves\": \"11768\",\n\"Solutions\": \"91421\",\n\"Time Limit Exceeded\": \"29178\",\n\"divmod\": \"9734d2da3b0c5e51e8acbcd73bdd4d79\",\n\"sum\": \"b6c786879d7e6da2fcfc2d2a50e212d8\"\n}"
    },
    {
        "number": 4144,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    x = [0] + [int(i) for i in stdin.split()[1:]]\n    answer = 0\n    for i in range(N):\n        answer = answer + x[i]\n    return str(answer % 10**9 + 7)\n\n-----Sample Input-----\n2\n\n0\n1\n-----Sample Output-----\n0\n\n-----Sample Input-----\n1\n\n9\n-----Sample Output-----\n9\n\n2\n\n1\n-----Sample Input-----\n1\n\n4\n-----Sample Output-----\n2\n\n2\n\n0\n\n-----Sample Input-----\n1\n\n2\n\n0\n\n-----Sample Output-----\n0\n\n-----Sample Input-----\n2\n\n1\n\n1\n\n-----Sample Output-----\n1\n\n1\n\n-----Sample Input-----\n3\n\n0\n0\n0\n\n-----Sample Output-----\n0\n0\n\n1\n\n-----Sample Input-----\n3\n\n0\n0\n0\n\n-----Sample Output-----\n1\n\n0\n\n0\n0\n0\n\n-----Sample Input-----\n4\n\n0\n0\n0\n0\n0\n\n-----Sample Output-----\n0\n\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n-----Sample Input-----\n5\n\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n"
    },
    {
        "number": 4144,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n  n = int(stdin)\n  a = [1]\n  for i in range(2, n+1):\n    a.append(a[i-2]*a[i-1])\n  a.append(a[-1]*9)\n  for i in range(len(a)-2, -1, -1):\n    if a[i] == 9:\n      return str(i+1)\n  return '0'\n\"\"\"\nimport math\n\ndef"
    },
    {
        "number": 4144,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    s = [int(s) for s in stdin.split()]\n    dp = [i for i in range(10)]\n    for i in range(1,10):\n        dp[i] = dp[i-1]\n    dp[0] = 0\n    dp[1] = 9\n    for i in range(2,n+1):\n        dp[i] = dp[i-1]\n        for j in range(10):\n            if s[i-1] <= j:\n                dp[i] = min(dp[i],dp[i-10]+dp[j])\n    return str(dp[n])\n\n\"\"\""
    },
    {
        "number": 4144,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n==0:\n        return \"0\"\n    if n==1:\n        return \"1\"\n    if n==2:\n        return \"9\"\n    if n==3:\n        return \"1\"\n    else:\n        c=set([0,9])\n        for i in range(2,n+1):\n            c.add(i)\n            c.add(i//2)\n            c.add(i//3)\n        if any(i in c for i in range(1,n)):\n            return \"0\"\n        else:\n            return \"1\"\n\"\"\"\nimport sys\ninput = sys.stdin.readline\n\ndef"
    },
    {
        "number": 4144,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    def is_zero(x):\n        return int(x) == 0 or int(x) == 9\n    def is_par(x):\n        return int(x) == 9\n    def is_prime(x):\n        return int(x) > 1 and int(x) % 2 == 0\n    def check_prime(x):\n        return int(x) > 2 and int(x) % 3 == 0 and int(x) % 5 == 0\n    \n    seq = []\n    for i in range(n):\n        seq.append(int(stdin[i]))\n    \n    def is_mul(x):\n        return int(x) >= 10 and int(x) <= 9\n    \n    def is_seq(x):\n        return int(x) > 0\n    \n    # seq = [i for i in range(1,10)]\n    # seq.sort()\n    # if len(seq)!= 10:\n    #     return '0'\n    \n    # res = []\n    # for i in range(10):\n    #     if i in seq:\n    #         res.append(i)\n    #         continue\n    \n    # res.sort()\n    # if len(res)!= 10:\n    #     return '0'\n    # return ''.join(res)\n    \n    def is_seq_mod(x):\n        return not is_zero(x) and not is_par(x) and not is_prime(x) and not is_mul(x) and not is_seq(x)\n    \n    # is_zero = is_zero(seq[0])\n    # is_par = is_par(seq[0])\n    # is_prime = is_prime(seq[0])\n    # is_mul = is_mul(seq[0])\n    # is_seq = is_seq(seq[0])\n    # res = [seq[0]]\n    # for i in range(1,n):\n    #     if is_zero(seq[i]):\n    #         continue\n    #     if is_par(seq[i]):\n    #         continue\n    #     if is_prime(seq[i]):\n    #         continue\n    #     if is_mul(seq[i]):\n    #         continue\n    #     if is_seq(seq[i]):\n    #         continue\n    #     res.append(seq[i])\n    #     if len(res) > 10:\n    #         return '0'\n    # return ''.join(res)\n    \n    res = [0]*n\n    for i in range(10):\n        if is_zero(i):\n            continue\n        if is_par(i):\n            continue\n        if is_prime(i):\n            continue\n        if is_mul(i):\n            continue\n        if is_seq(i):\n            continue\n        res[i] = str(i)\n    \n    def check_seq(x):\n        if len(x) < 10:\n            return False\n        for i in range(10):\n            if int(x[i]) < 10:\n                return False\n        return True\n    \n    res.sort(key=check_seq)\n    # print(check_seq(res[0]))\n    return ''.join(res)\n\"\"\"\nclass Solution:\n    def solution(self, A: str) -> str:\n        n = len(A)\n        seq = []\n        for i in range(n):\n            if int(A[i]) == 0:\n                continue\n            if int(A[i]) == 9:\n                seq.append(9)\n                continue\n            if int(A[i]) == 1:\n                seq.append(int(A[i]) - 10)\n                continue\n            if int(A[i]) == 2:\n                seq.append(int(A[i]) - 9)\n                continue\n            if int(A[i]) == 3:\n                seq.append(int(A[i]) - 6)\n                continue\n            if int(A[i]) == 4:\n                seq.append(int(A[i]) - 5)\n                continue\n            if int(A[i]) == 5:\n                seq.append(int(A[i]) - 4)\n                continue\n            if int(A[i]) == 6:\n                seq.append(int(A[i]) - 3)\n                continue\n            if int(A[i]) == 7:\n                seq.append(int(A[i]) - 2)\n                continue\n            if int(A[i]) == 8:\n                seq.append(int(A[i]) - 1)\n                continue\n            if int(A[i]) == 9:\n                seq.append(int(A[i]) - 0)\n                continue\n            seq.append(int(A[i]))\n        seq.sort()\n        res = []\n        for i in range(10):\n            if i in seq:\n                res.append(i)\n        if len(res)!= 10:\n            return '0'\n        return ''.join(res)\n\n\"\"\""
    },
    {
        "number": 4144,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    import math\n    n,x = map(int,stdin.split())\n    def is_prime(num):\n        if num==1:\n            return False\n        if num==2 or num==3:\n            return True\n        for i in range(2,int(math.sqrt(num))+1):\n            if num%i==0:\n                return False\n        return True\n    for i in range(x,10**9+1):\n        if is_prime(i) == True:\n            print(i)\n    \n-----Sample Input-----\n3\n2\n9\n5\n10\n3\n\n-----Sample Output-----\n3\n\n9\n4\n3\n\n\"\"\"\n\n\n\nimport math\nimport sys\n\nT = int(sys.stdin.readline())\nfor _ in range(T):\n    n, x = map(int,sys.stdin.readline().split())\n    for i in range(x, 10**9+1):\n        if is_prime(i) == True:\n            print(i)\n            break\n    else:\n        print(-1)"
    },
    {
        "number": 4145,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    prime = set()\n    tmp = set()\n    for i in range(2, int(stdin)):\n        if i not in prime and i % 2 == 0:\n            prime.add(i)\n        if i in prime and i % 2!= 0:\n            if i in tmp:\n                tmp.remove(i)\n            else:\n                tmp.add(i)\n    prime = list(prime)\n    prime.sort()\n    if len(tmp) == 0:\n        return '1'\n    return ''.join(str(x) for x in prime)\n\"\"\"\n\nclass Solution:\n    def nextGreaterElement(self, nums1: List[int], nums2: List[int]) -> List[int]:\n        next_nums = []\n        for i in range(len(nums2)):\n            for j in range(len(nums1)):\n                if nums2[i] > nums1[j]:\n                    next_nums.append(nums2[i])\n                    break\n                elif nums2[i] == nums1[j]:\n                    if nums2[i] > nums1[j + 1]:\n                        next_nums.append(nums2[i])\n                        break\n                    \n        return next_nums\n        \n"
    },
    {
        "number": 4145,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n  n, k = map(int, stdin.split())\n  numbers = [True] * 10\n  for i in range(2, n + 1):\n    if numbers[i]:\n      for j in range(i * i, n + 1, i):\n        numbers[j] = False\n  numbers[0], numbers[1] = False, False\n  for i in range(2, k):\n    if numbers[i]:\n      for j in range(i * i, k, i):\n        numbers[j] = False\n  return str(min(numbers))\n"
    },
    {
        "number": 4145,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    prime = [2,3,5,7]\n    for _ in range(3,int(stdin)+1):\n        for prime_index in range(len(prime)-1):\n            if _ % prime[prime_index] == 0 or _ % prime[prime_index+1] == 0:\n                break\n        else:\n            prime.append(_)\n    return min(prime)"
    },
    {
        "number": 4145,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    numbers = list(map(int, stdin.split()))\n\n    for n in numbers:\n        prime_numbers = [2]\n        for i in range(3, int(math.sqrt(n))+1):\n            if n % i == 0:\n                prime_numbers.append(i)\n\n        if len(prime_numbers) >= 2:\n            return min(prime_numbers) + 1\n\n    return 0\n"
    },
    {
        "number": 4145,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    prime_lst = [2]\n    for i in range(3, int(math.sqrt(10)) + 1):\n        for j in prime_lst:\n            if j > i:\n                break\n        else:\n            prime_lst.append(i)\n    \n    lst = []\n    for i in range(3, int(math.sqrt(10)) + 1):\n        if i % 2 == 0:\n            lst.append(i)\n    \n    count = 0\n    for i in range(3, len(prime_lst)):\n        if prime_lst[i] in lst:\n            count += 1\n        else:\n            break\n    \n    return str(count)\n\n--------Solution-----------------\nEnter a number:\n    Input\n\nEnter a number:\n    5\n    \nOutput\n\nOutput must be an integer.\n\n---------Sample Input---------\n1\n\nEnter a number:\n    Input\n\nEnter a number:\n    5\n    \nOutput\n\nOutput must be an integer.\n\n---------Sample Output---------\nOutput must be an integer.\n\n--------Solution-----------------\nEnter a number:\n    Input\n\nEnter a number:\n    5\n    \nOutput\n\nOutput must be an integer.\n\n---------Sample Output---------\nOutput must be an integer.\n"
    },
    {
        "number": 4145,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    global max_prime\n    global min_prime\n    \n    a = [1, 2, 3, 5]\n    b = [2, 3, 5]\n    for i in range(4, 100001):\n        if a[i] > b[i-4]:\n            if a[i] > b[i-4]:\n                a[i], b[i-4] = a[i-4], a[i]\n            break\n        \n    if sum(a) == sum(b):\n        if max_prime > sum(a):\n            max_prime = sum(a)\n        if min_prime < sum(b):\n            min_prime = sum(b)\n    if sum(a) > sum(b):\n        return str(max_prime) + \" \" + str(min_prime)\n    else:\n        return str(min_prime) + \" \" + str(max_prime)\n\n-----Sample Output-----\n2\n\n-----Sample Input-----\n5\n\n-----Sample Output-----\n4\n\n\"\"\""
    },
    {
        "number": 4145,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    primes=list(filter(lambda x: x%2==0, range(1,int(stdin)+1)))\n    \n    max_primes=list(filter(lambda x: x%2==1, primes))\n    \n    print(max(max_primes))\n    return str(max(max_primes))\n\n    \n"
    },
    {
        "number": 4145,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    lst = [int(i) for i in stdin.split()]\n    lst.sort(reverse = True)\n    for i in lst:\n        if i > 1:\n            primes.append(i)\n    print(min(primes))"
    },
    {
        "number": 4145,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    prime = 2\n    count = 0\n    n = int(stdin)\n    for i in range(2, n+1):\n        if(i>1):\n            for j in range(2, i):\n                if(i%j==0):\n                    break\n            else:\n                count += 1\n    return str(count)\n"
    },
    {
        "number": 4145,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n  def get_prime(x):\n    if x == 1:\n      return False\n    for i in range(2, x):\n      if x % i == 0:\n        return False\n    return True\n  def get_prime_list(n, p):\n    primes = []\n    if n < p:\n      return []\n    for i in range(n, p, -1):\n      if get_prime(i):\n        primes.append(i)\n      if len(primes) >= p:\n        break\n    return primes\n  def check(n, primes):\n    primes.sort()\n    for i in range(len(primes)):\n      if i >= n:\n        return False\n      if primes[i] - primes[i-1] < n:\n        return False\n    return True\n  \n  n = int(stdin)\n  \n  primes = get_prime_list(n, 2)\n  while check(n, primes):\n    n += 1\n    primes = get_prime_list(n, 2)\n  \n  print(n - 1)\n"
    },
    {
        "number": 4146,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lst = [int(x) for x in stdin.split(\" \")]\n    for i in range(len(lst)//2):\n        lst[i],lst[i+1] = lst[i+1],lst[i]\n    for i in range(len(lst)//2):\n        lst[i],lst[len(lst)//2-i-1] = lst[len(lst)//2-i-1],lst[i]\n    return str(min(lst))\n\n-----Sample Output-----\nsample_input = \"4\\n3 1 3 2\"\nsolution(sample_input)"
    },
    {
        "number": 4146,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    print(\"Input :\",n)\n    v_1,v_2,...,v_n = list(map(int,input().split()))\n    print(\"Output :\",solution(v_1,v_2,...,v_n))"
    },
    {
        "number": 4146,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, *v = list(map(int, stdin.split()))\n    d = {}\n    for i in range(n):\n        d[i] = v[i]\n    cnt = 0\n    for i in range(1, n):\n        if d[i]!= 0:\n            cnt += 1\n            d[i] = v[i]\n    return str(cnt)\n\n-----Sample Output-----\nSample Input\n4\n3 1 3 2\n\nSample Output\n1\n\n-----Constraints-----\n - 2 \\leq n \\leq 10^5\n - n is even.\n - 1 \\leq v_i \\leq 10^5\n - v_i is an integer.\n\"\"\""
    },
    {
        "number": 4146,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    v_1,v_2,...,v_n = map(int,stdin.split())\n    n = v_n\n    l = len(str(v_1))\n    if v_1 % 2 == 0:\n        v_1 -= 1\n    for i in range(l):\n        if l % 2 == 0:\n            v_1 += 1\n            if v_1 % 2 == 0:\n                v_2 = v_1\n                v_1 -= 1\n        else:\n            v_2 = v_1\n            v_1 += 1\n        if v_1 < n:\n            v_1 += 1\n            if v_1 >= n:\n                v_2 += 1\n                v_1 -= 1\n        n = v_1\n        l = len(str(v_2))\n        if v_2 % 2 == 0:\n            v_2 -= 1\n        for i in range(l):\n            if l % 2 == 0:\n                v_2 += 1\n                if v_2 >= n:\n                    v_1 += 1\n                    v_2 -= 1\n            else:\n                v_1 += 1\n                if v_1 >= n:\n                    v_2 += 1\n                    v_1 -= 1\n            if v_2 < n:\n                v_2 += 1\n                if v_2 >= n:\n                    v_1 += 1\n                    v_2 -= 1\n            n = v_1\n            l = len(str(v_1))\n            if v_1 < n:\n                v_1 += 1\n                if v_1 >= n:\n                    v_2 += 1\n                    v_1 -= 1\n            n = v_1\n            l = len(str(v_2))\n            if v_2 < n:\n                v_2 += 1\n                if v_2 >= n:\n                    v_1 += 1\n                    v_2 -= 1\n            n = v_1\n            l = len(str(v_1))\n            if v_1 < n:\n                v_1 += 1\n                if v_1 >= n:\n                    v_2 += 1\n                    v_1 -= 1\n            n = v_1\n            l = len(str(v_2))\n            if v_2 < n:\n                v_2 += 1\n                if v_2 >= n:\n                    v_1 += 1\n                    v_2 -= 1\n    return str(v_1)\n\n\"\"\"\nclass Solution:\n    def solution(self, str1: str, str2: str) -> str:\n        \n        # 2\uc9c4\uc218\uc758 \ubc30\uc218\ub294 \ub4a4\uc5d0\uc11c\ubd80\ud130 \ub098\ub220\uc11c \ud640\uc218\uc758 \ubc30\uc218\ub9cc \ub098\ub220\uc11c \ub9cc\ub4e4\uc5b4\uc11c \ub9ac\uc2a4\ud2b8\uc5d0 \ub123\uc5b4\uc90c\n        if len(str2) % 2 == 1:\n            str2 = str2[:-1] + str2[-1]\n        \n        # \ubb38\uc790\uc5f4\uc758 \uae38\uc774\ub97c \uae30\uc874 \ubb38\uc790\uc5f4\uc5d0 \ud0d0\uc0c9\ud574\uc57c\ud560 \ubaa8\ub4e0 \uacbd\uc6b0\uc758 \uc218\ub97c \uace0\ub824\ud574\uc90c\n        n = len(str1)\n        dp = [0] * (n + 1)\n        # \uacbd\uc6b0\uc758 \uc218\n        dp[0] = 1\n        for i in range(1, n + 1):\n            # \ubb38\uc790\uc5f4\uc758 \uae38\uc774\ub294 \uae30\uc874 \ubb38\uc790\uc5f4\uc5d0 \ud0d0\uc0c9\ud558\uc9c0 \uc54a\uc74c\n            if str1[i - 1]!= str2[i - 1]:\n                # \ub2e4\ub978 \ubb38\uc790\uc5f4\uc744 \ud0d0\uc0c9\ud558\uae30 \uc704\ud574 \uacbd\uc6b0\uc758 \uc218 \ub354\ud574\uc90c\n                dp[i] += dp[i - 1]\n        return str(dp[n])\n\"\"\""
    },
    {
        "number": 4146,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    v = list(map(int, input().split()))\n    v.sort()\n    result = []\n    for i in range(1,n+1):\n        result.append(i)\n    for i in range(1,n):\n        if i % 2 == 0:\n            result[i] = v[i]\n        else:\n            result[i] = v[i-1]\n    print(len(result))\n    return str(len(result))\n\nExplanation\nThe sequence that contains an integer can be made by replacing some of its elements.\nThe sequence that contains an integer can be made by replacing some of its elements, and so on.\nThe sequence that contains an integer can be made by replacing some of its elements, but also than some of its elements, and so on.\nThe sequence that contains an integer can be made by replacing some of its elements, but also than some of its elements, and so on,\nThe sequence that contains an integer can be made by replacing some of its elements, but also than some of its elements, and so on,\nSo on, and so on, the sequence that contains an integer can be made by replacing some of its elements, but also than some of its elements, and so on,\nSo on, and so on, the sequence that contains an integer can be made by replacing some of its elements, but also than some of its elements, and so on,\nSo on, and so on, the sequence that contains an integer can be made by replacing some of its elements, but also than some of its elements, and so on,\nSo on, and so on, the sequence that contains an integer can be made by replacing some of its elements, but also than some of its elements, and so on,\nSo on, and so on, the sequence that contains an integer can be made by replacing some of its elements, but also than some of its elements, and so on,\nSo on, and so on, the sequence that contains an integer can be made by replacing some of its elements, but also than some of its elements, and so on,\nSo on, and so on, the sequence that contains an integer can be made by replacing some of its elements, but also than some of its elements, and so on,\nSo on, and so on, the sequence that contains an integer can be made by replacing some of its elements, but also than some of its elements, and so on,\nSo on, and so on, the sequence that contains an integer can be made by replacing some of its elements, but also than some of its elements, and so on,\nSo on, and so on, the sequence that contains an integer can be made by replacing some of its elements, but also than some of its elements, and so on,\nSo on, and so on, the sequence that contains an integer can be made by replacing some of its elements, but also than some of its elements, and so on,\nSo on, and so on, the sequence that contains an integer can be made by replacing some of its elements, but also than some of its elements, and so on,\nSo on, and so on, the sequence that contains an integer can be made by replacing some of its elements, but also than some of its elements, and so on,\nSo on, and so on, the sequence that contains an integer can be made by replacing some of its elements, but also than some of its elements, and so on,\nSo on, and so on, the sequence that contains an integer can be made by replacing some of its elements, but also than some of its elements, and so on,\nSo on, and so on, the sequence that contains an integer can be made by replacing some of its elements, but also than some of its elements, and so on,\nSo on, and so on, the sequence that contains an integer can be made by replacing some of its elements, but also than some of its elements, and so on,\nSo on, and so on, the sequence that contains an integer can be made by replacing some of its elements, but also than some of its elements, and so on,\nSo on, and so on, the sequence that contains an integer can be made by replacing some of its elements, but also than some of its elements, and so on,\nSo on, and so on, the sequence that contains an integer can be made by replacing some of its elements, but also than some of its elements, and so on,\nSo on, and so on, the sequence that contains an integer can be made by replacing some of its elements, but also than some of its elements, and so on,\nSo on, and so on, the sequence that contains an integer can be made by replacing some of its elements, but also than some of its elements, and so on,\nSo on, and so on, the sequence that contains an integer can be made by replacing some of its elements, but also than some of its elements, and so on,\nSo on, and so on, the sequence that contains an integer can be made by replacing some of its elements, but also than some of its elements, and so on,\nSo on, and so on, the sequence that contains an integer can be made by replacing some of its elements, but also than some of its elements, and so on,\nSo on, and so on, the sequence that contains an integer can be made by replacing some of its elements, but also than some of its elements, and so on,\nSo on, and so on, the sequence that contains an integer can be made by replacing some of its elements, but also than some of its elements, and so on,\nSo on, and so on, the sequence that contains an integer can be made by replacing some of its elements, but also than some of its elements, and so on,\nSo on, and so on, the sequence that contains an integer can be made by replacing some of its elements, but also than some of its elements, and so on,\nSo on, and so on, the sequence that contains an integer can be made by replacing some of its elements, but also than some of its elements, and so on,\nSo on, and so on, the sequence that contains an integer can be made by replacing some of its elements, but also than some of its elements, and so on,\nSo on, and so on, the sequence that contains an integer can be made by replacing some of its elements, but also than some of its elements, and so on,\nSo on, and so on, the sequence that contains an integer can be made by replacing some of its elements, but also than some of its elements, and so on,\nSo on, and so on, the sequence that contains an integer can be made by replacing some of its elements, but also than some of its elements, and so on,\nSo on, and so on, the sequence that contains an integer can be made by replacing some of its elements, but also than some of its elements, and so on,\nSo on, and so on, the sequence that contains an integer can be made by replacing some of its elements, but also than some of its elements, and so on,\nSo on, and so on, the sequence that contains an integer can be made by replacing some of its elements, but also than some of its elements, and so on,\nSo on, and so on, the sequence that contains an integer can be made by replacing some of its elements, but also than some of its elements, and so on,\nSo on, and so on, the sequence that contains an integer can be made by replacing some of its elements, but also than some of its elements, and so on,\nSo on, and so on, the sequence that contains an integer can be made by replacing some of its elements, but also than some of its elements, and so on,\nSo on, and so on, the sequence that contains an integer can be made by replacing some of its elements, but also than some of its elements, and so on,\nSo on, and so on, the sequence that contains an integer can be made by replacing some of its elements"
    },
    {
        "number": 4146,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    v = [int(s) for s in stdin.split('\\n')[1].split(',')]\n    l = len(v)\n    min_len = l\n    \n    for i in range(1,l//2):\n        if v[i]!= v[i-1]:\n            v[i],v[i-1] = v[i-1],v[i]\n            min_len = min(min_len,l-i)\n    \n    return str(min_len)\n\n### Test Code ###\n"
    },
    {
        "number": 4146,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    v = list(map(int,stdin.split()))\n    v.sort()\n    ans = 0\n    for i in range(1,n//2 +1):\n        if v[i] == v[n-i-1]:\n            ans += 1\n    print(ans)\n"
    },
    {
        "number": 4146,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    seq = list(map(int, input().split()))\n    answer = n\n    for i in range(0, n-1, 2):\n        if seq[i+2] == seq[i]:\n            seq[i], seq[i+1], seq[i+2] = seq[i+2], seq[i], seq[i+1]\n        else:\n            answer = min(answer, len(seq))\n    return str(answer)\n\ndef"
    },
    {
        "number": 4146,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    li = list(map(int,input().split()))\n    arr = [li[i:i+n] for i in range(0,len(li),n)]\n    temp = sorted(arr,key=lambda x:x[-1])\n    if temp[-1] == temp[0]:\n        return temp[-1][-1]\n    else:\n        return '1'"
    },
    {
        "number": 4146,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[-1])\n    v_list = list(map(int,stdin.split()[:-1]))\n    v_list.sort()\n    v_list = v_list[n//2:] + v_list[:n//2]\n    for i in range(n//2):\n        v_list[i] *= -1\n    answer = 0\n    for i in range(n//2):\n        answer += (i*v_list[i] + i*v_list[n-i-1])\n    print(answer)\n\n-----Sample Output-----\n2\n\nThe sequence 3,1,3,2 is not /\\/\\/\\/, but we can make it /\\/\\/\\/ by replacing one of its elements: for example, replace the fourth element to make it 3,1,3,1.\nNote that we have to sort the elements from the left.\nFor example, if v_list is ['3', '1', '3', '2'], then the sorted elements are ['1', '2', '3', '3'].\nThe function should return '3', '3', '2', '2' because it does not need to be sorted.\n\n-----Explanation-----\nThere are three numbers in the sequence, which must be replaced.\nThe first number is replaced with '3', and the second number is replaced with '2'.\nThe third number is replaced with '2'.\nThe second number is replaced with '3', and the third number is replaced with '3'.\nSince the sequence '3', '3', and '2' is already sorted, the answer is '3'.\n\nNote that this is not the case with the following statement.\nThe first number in the sequence is replaced with '1', and the second number with '2'.\nThe third number is replaced with '3'.\nThe second number is replaced with '1', and the third number is replaced with '3'.\nIn this example, if we remove the third number, it would be '3' instead of '3'.\nThe sequence '3', '1', '3', '2' would be replaced by '1', '2', '3', '3'.\n\n-----Submissions-----\nSample Input:\n3\n3 1 3 2\nSample Output:\n3\n\nExplanation:\nWe have three numbers in the sequence, which must be replaced.\nThe first number is replaced with '3', and the second number with '2'.\nThe third number is replaced with '3', and the second number with '3'.\nSince the sequence '3', '3', and '2' is already sorted, the answer is '3'.\n\nNote:\nWe will always process every number in the sequence, the only thing we need to do is to sort the elements.\n\n'''\n\nclass Solution:\n    def minreplace(self, nums: List[int], v_1: int, v_2: int, v_3: int) -> str:\n        for i in range(len(nums)):\n            v1 = nums[i]\n            for j in range(i, len(nums)):\n                v2 = nums[j]\n                if v1 >= v_2:\n                    nums[j] = v_3\n                else:\n                    nums[j] = v_2\n                for k in range(j, len(nums)):\n                    v3 = nums[k]\n                    if v1 >= v_3:\n                        nums[k] = v_3\n                    else:\n                        nums[k] = v_1\n        return str(min(nums))\n"
    },
    {
        "number": 4147,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    l_1, l_2, l_N, *bamboo_1, *bamboo_2, *bamboo_3 = map(int, stdin.split())\n    def ext_magics(bamboo):\n        mp_1, mp_2, mp_3 = 0, 0, 0\n        for l in bamboo:\n            if l == l_1:\n                mp_1 += 2\n            elif l == l_2:\n                mp_2 += 2\n            elif l == l_N:\n                mp_3 += 2\n            else:\n                mp_1 += l\n                mp_2 += l\n                mp_3 += l\n        return mp_1 + mp_2 + mp_3\n    def comp_magics(bamboo):\n        mp_1, mp_2, mp_3 = 0, 0, 0\n        for l in bamboo:\n            if l == l_1:\n                mp_1 += 2\n            elif l == l_2:\n                mp_2 += 2\n            elif l == l_N:\n                mp_3 += 2\n            else:\n                mp_1 += l\n                mp_2 += l\n                mp_3 += l\n        return mp_1 + mp_2 + mp_3\n    def short_magics(bamboo):\n        mp_1, mp_2, mp_3 = 0, 0, 0\n        for l in bamboo:\n            if l == l_1:\n                mp_1 += 2\n            elif l == l_2:\n                mp_2 += 2\n            elif l == l_N:\n                mp_3 += 2\n            else:\n                mp_1 += l\n                mp_2 += l\n                mp_3 += l\n        return mp_1 + mp_2 + mp_3\n    def composition_magics(bamboo):\n        mp_1, mp_2, mp_3 = 0, 0, 0\n        for l in bamboo:\n            if l == l_1:\n                mp_1 += 2\n            elif l == l_2:\n                mp_2 += 2\n            elif l == l_N:\n                mp_3 += 2\n            else:\n                mp_1 += l\n                mp_2 += l\n                mp_3 += l\n        return mp_1 + mp_2 + mp_3\n    def short_magics_2(bamboo):\n        mp_1, mp_2, mp_3 = 0, 0, 0\n        for l in bamboo:\n            if l == l_1:\n                mp_1 += 2\n            elif l == l_2:\n                mp_2 += 2\n            elif l == l_N:\n                mp_3 += 2\n            else:\n                mp_1 += l\n                mp_2 += l\n                mp_3 += l\n        return mp_1 + mp_2 + mp_3\n    mp_1, mp_2, mp_3 = ext_magics(bamboo_1), ext_magics(bamboo_2), ext_magics(bamboo_3)\n    mp_4, mp_5, mp_6 = comp_magics(bamboo_1), comp_magics(bamboo_2), comp_magics(bamboo_3)\n    mp_7, mp_8, mp_9 = short_magics(bamboo_1), short_magics(bamboo_2), short_magics(bamboo_3)\n    mp_10, mp_11, mp_12 = comp_magics_2(bamboo_1), comp_magics_2(bamboo_2), comp_magics_2(bamboo_3)\n    mp_13, mp_14, mp_15 = short_magics_2(bamboo_1), short_magics_2(bamboo_2), short_magics_2(bamboo_3)\n    mp_16, mp_17, mp_18 = composition_magics(bamboo_1), composition_magics(bamboo_2), composition_magics(bamboo_3)\n    mp_19, mp_20, mp_21 = short_magics_2(bamboo_1), short_magics_2(bamboo_2), short_magics_2(bamboo_3)\n    mp_23 = mp_19 + mp_20 + mp_21\n    print(mp_1 + mp_2 + mp_3 + mp_4 + mp_5 + mp_6 + mp_7 + mp_8 + mp_9 + mp_10 + mp_11 + mp_12 + mp_13 + mp_14 + mp_15 + mp_16 + mp_17 + mp_18 + mp_19 + mp_20 + mp_21 + mp_23)"
    },
    {
        "number": 4147,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B, C = map(int, stdin.split())\n    l_1, l_2, l_3 = map(int, stdin.split())\n    l_N = max(l_1, l_2, l_3)\n    bamboos = []\n    while N > 0:\n        if N == 1:\n            bamboos.append(l_1)\n            N -= 1\n        elif N == 2:\n            bamboos.append(l_2)\n            N -= 2\n        elif N == 3:\n            bamboos.append(l_3)\n            N -= 3\n        else:\n            bamboos.append(l_1 + l_2 + l_3)\n            N -= 4\n    bamboos.sort(reverse = True)\n    final = 0\n    for b in bamboos:\n        if b < l_N:\n            final += 2 * b\n        else:\n            final += l_N + l_1 + l_2 + l_3\n    return str(final)\n"
    },
    {
        "number": 4147,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, l_1, l_2, l_N = map(int, stdin.split())\n    bamboos = [randint(l_1, l_2) for _ in range(N)]\n    print(sum(bamboos))\n    for i, b in enumerate(bamboos):\n        if i == 0:\n            bamboos[i] = bamboos[i] + 1\n        else:\n            bamboos[i] = bamboos[i] - 1\n    print(sum(bamboos))\n    return str(sum(bamboos))\n\ntime\n\ndef"
    },
    {
        "number": 4147,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B, C = map(int, stdin.split())\n    l_1, l_2 = map(int, stdin.split())\n    l_1 -= 1\n    l_2 -= 1\n    \n    if B < A < C:\n        answer = (B + C) * (l_1 + l_2)\n        return str(answer)\n    \n    if l_1 < l_2:\n        answer = l_1 * l_2\n        return str(answer)\n    \n    if l_1 < l_2:\n        answer = (l_2 + l_1) * l_1\n        return str(answer)\n    \n    if l_1 < l_2:\n        answer = l_2 * l_1\n        return str(answer)\n    \n    if l_2 < l_1:\n        answer = (l_1 + l_2) * l_2\n        return str(answer)\n"
    },
    {
        "number": 4147,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n  N, A, B, C = map(int, stdin.split())\n  l_1 = N - 1\n  l_2 = int(N / 2)\n  l_3 = int(N / 3)\n  l_N = max(l_1, l_2, l_3)\n  l_1, l_2, l_3 = l_1 - 1, l_2 - 1, l_3 - 1\n  if l_1 == 0:\n    if l_2 == 0 and l_3 == 0:\n      return \"0\"\n    else:\n      return \"60\"\n  if l_2 == 0:\n    if l_3 == 0:\n      return \"0\"\n    else:\n      return \"90\"\n  if l_3 == 0:\n    return \"60\"\n  l_1, l_2, l_3 = l_1 - 1, l_2 - 1, l_3 - 1\n  l_1 = l_1 + 1\n  l_2 = l_2 + 1\n  l_3 = l_3 + 1\n  bamboos = [l_1, l_2, l_3]\n  if N < A * B * C:\n    return \"0\"\n  elif A < B < C:\n    if l_1 == 0 and l_2 == 0 and l_3 == 0:\n      return \"0\"\n    else:\n      return \"60\"\n  elif A < B < C:\n    if l_1 == 0 and l_2 == 0:\n      return \"0\"\n    else:\n      return \"90\"\n  else:\n    if l_1 == 0:\n      return \"0\"\n    else:\n      return \"60\"\n\n-----Sample Output-----\nHello, World!\n\"\"\"\n\nfrom collections import deque\n\ndef"
    },
    {
        "number": 4147,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    d = [int(stdin[i]) for i in range(n)]\n    total = 0\n    for i in range(n):\n        if (d[i] % 2 == 0):\n            total += d[i]\n        else:\n            total += (d[i] * 2)\n    for j in range(n - 1):\n        total += d[j + 1]\n        total += d[j]\n    print(total)"
    },
    {
        "number": 4147,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B, C = map(int, stdin.split())\n    l_1, l_2 = map(int, stdin.split())\n    l_1 = l_1 if l_1 >= 1 else 2\n    l_2 = l_2 if l_2 >= 2 else 3\n    l_3 = l_3 if l_3 >= 3 else 4\n    l_4 = l_4 if l_4 >= 4 else 5\n    l_5 = l_5 if l_5 >= 5 else 6\n    l_6 = l_6 if l_6 >= 6 else 7\n    l_7 = l_7 if l_7 >= 7 else 8\n    l_8 = l_8 if l_8 >= 8 else 9\n    l_9 = l_9 if l_9 >= 9 else 10\n    l_10 = l_10 if l_10 >= 10 else 11\n    bamboos = [l_1, l_2, l_3, l_4, l_5, l_6, l_7, l_8, l_9, l_10]\n    mp_costs = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n    for i in range(N):\n        mp_costs[bamboos[i]] += 1\n        mp_costs[bamboos[i]] += mp_costs[bamboos[i]] if i < N-1 else 0\n    print(min(mp_costs))"
    },
    {
        "number": 4147,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, C, l_1, l_2, l_3 = map(int, stdin.split())\n    \n    if l_3 > l_1 + l_2:\n        return \"Not possible\"\n    \n    l_3 -= l_2\n    l_2 += l_3\n    l_3 = l_3 // 2\n    l_1 += l_2\n    l_2 = l_3\n    \n    if l_3 > C:\n        return \"Not possible\"\n    \n    if l_1 > C:\n        return \"Not possible\"\n    \n    l_1 -= l_3\n    l_3 += l_1\n    l_1 = l_3\n    \n    if l_1 > l_2:\n        return \"Not possible\"\n    \n    l_1 -= l_2\n    l_2 = l_1\n    \n    if l_1 > l_3:\n        return \"Not possible\"\n    \n    l_1 -= l_3\n    l_3 = l_1\n    \n    if l_3 < C:\n        return \"Not possible\"\n    \n    l_3 = l_3 - C\n    l_2 = l_3\n    \n    if l_2 < C:\n        return \"Not possible\"\n    \n    if l_3 > l_2 + l_1:\n        return \"Not possible\"\n    \n    l_3 -= l_2\n    l_2 = l_3\n    l_3 = l_2\n    \n    if l_3 > C:\n        return \"Not possible\"\n    \n    l_3 = l_3 - C\n    l_2 = l_3\n    l_1 = l_3\n    \n    if l_1 > l_2:\n        return \"Not possible\"\n    \n    if l_1 < l_2 + l_3:\n        return \"Not possible\"\n    \n    return \"Not possible\"\n"
    },
    {
        "number": 4147,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B, C = map(int, stdin.split())\n    if N < 5 or B < A or C < B:\n        return ''\n    l_1 = min(A, B, C)\n    l_2 = max(A, B, C)\n    l_N = l_1 + l_2\n    return str(l_N) +''\n"
    },
    {
        "number": 4147,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c = map(int, stdin.split())\n    if n <= 9 or a <= 9 or b <= 9 or c <= 9:\n        return 'Impossible'\n    if n <= 10 and a <= 10 and b <= 10 and c <= 10:\n        return str(max(n, a, b, c) + max(a, b, c))\n    if n <= 20 and a <= 20 and b <= 20 and c <= 20:\n        return str(max(n, a, b, c) + max(a, b, c) + max(a, b) + max(a, b, c))\n    if n <= 80 and a <= 80 and b <= 80 and c <= 80:\n        return str(max(n, a, b, c) + max(a, b, c) + max(a, b) + max(a, b, c) + max(a, b, c) + max(a, b, c) + max(a, b, c))\n    if n <= 160 and a <= 160 and b <= 160 and c <= 160:\n        return str(max(n, a, b, c) + max(a, b, c) + max(a, b) + max(a, b, c) + max(a, b, c) + max(a, b, c) + max(a, b, c) + max(a, b, c))\n    if n <= 320 and a <= 320 and b <= 320 and c <= 320:\n        return str(max(n, a, b, c) + max(a, b, c) + max(a, b) + max(a, b, c) + max(a, b, c) + max(a, b, c) + max(a, b, c) + max(a, b, c) + max(a, b, c))\n    if n <= 640 and a <= 640 and b <= 640 and c <= 640:\n        return str(max(n, a, b, c) + max(a, b, c) + max(a, b) + max(a, b, c) + max(a, b, c) + max(a, b, c) + max(a, b, c) + max(a, b, c) + max(a, b, c))\n    return 'Impossible'\nprint(solution(stdin))"
    },
    {
        "number": 4148,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join(sorted(stdin, key=lambda x: ord(x)))\n'''\n\nclass Solution:\n    def shiftString(self, S: str, N: int) -> str:\n        \n        # process S\n        S = list(S)\n        if len(S) > 26:\n            return S[N:] + S[:N]\n        else:\n            return S[:N] + S[N+1:]\n        \n        pass"
    },
    {
        "number": 4148,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    import string\n    N = int(stdin)\n    S = stdin[:N]\n    L = list(string.ascii_lowercase)\n    for i in range(N):\n        print(*L[i + 1:], sep='')\n"
    },
    {
        "number": 4148,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join([''.join(s) for s in zip(*map(''.join, (list(map(lambda x: list(stdin.strip()[x])), reversed(range(1, len(stdin.strip()[x]) + 1))))))])\n"
    },
    {
        "number": 4148,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin)\n    st = []\n    st.append(' ')\n    \n    for i in range(n):\n        cur = str(input())\n        if cur =='':\n            st.append(' ')\n            continue\n        \n        temp = []\n        for j in range(n):\n            temp.append(st.pop())\n        \n        st.append(''.join(temp))\n        \n        \n    return ''.join(st)\n"
    },
    {
        "number": 4148,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.split(' ')\n    N = int(stdin.split(' ')[0])\n    if len(S)!= len(set(S)):\n        return \"\"\n    for i in range(len(S)):\n        S[i] = S[i].lower()\n    return ''.join(S[N:])\n"
    },
    {
        "number": 4148,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s, n = map(str, stdin.split())\n    n = int(n)\n    a = list(sorted(s))\n    b = []\n    for i in range(len(a)):\n        if a[i].isalpha() and a[i].isupper():\n            b.append(a[i])\n        if a[i].isalpha() and a[i].islower():\n            a[i] = a[i].upper()\n            b.append(a[i])\n    b = b[::-1]\n    print(''.join(b))\n    return ''.join(b)\n\nInput\n2\nABCXYZ\nSample Output\nCDEZAB\nExplanation\nABCXYZ is converted to CDEZAB by shifting A by 2\n\nInput\n3\nA\nAAAB\nSample Output\nAAAA\nExplanation\nA has already been shifted by 3.\n\nInput\n5\nAEIYAT\nY\nAEEIYAT\nAAYT\nNote that A follows Y\ndef"
    },
    {
        "number": 4148,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n  # Write your code here\n  import string\n  letters = string.ascii_lowercase\n  numbers = string.digits\n  for i in range(26):\n    letters[i] = string.ascii_uppercase[i]\n    numbers[i] = string.digits[i]\n  new_string = ''\n  for i in stdin:\n    new_string += letters[ord(i) - ord('A')] + numbers[ord(i) - ord('A')]\n  return new_string\n  \n  \n  \ndef"
    },
    {
        "number": 4148,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def shift(n, s):\n        s = list(s)\n        for i in range(len(s)):\n            s[i] = chr((ord(s[i])+n-1) % 26 + ord('A'))\n        return ''.join(s)\n    \n    return shift(int(stdin.pop().split()[0]), stdin.pop().split()[1])\n\n\"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 4148,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    N, S = map(int, stdin.split())\n    if N == 0:\n        return ''\n    if N < 0:\n        N = abs(N)\n        if N < 10:\n            return 'A' * N + S\n        else:\n            return 'Z' + ''.join(list(str(N) + 'A')) + S\n    else:\n        return solution(stdin) + solution(stdin.replace(S, str(N-1))) + solution(stdin.replace(S, str(N)))\n\nTest Cases\nsolution(\"5\") #\"CDEZAB\"\nsolution(\"3\") #\"ABCXYZ\"\nsolution(\"1\") #\"A\"\nsolution(\"2\") #\"AB\"\nsolution(\"5\") #\"AC\"\nsolution(\"1\") #\"AZ\"\nsolution(\"3\") #\"Z\"\n"
    },
    {
        "number": 4148,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    str = list(stdin)\n    \n    for i in range(len(str)):\n        if str[i].isalpha():\n            str[i] = str[i].upper()\n            \n        else:\n            str[i] = str[i].lower()\n    \n    for i in range(len(str)):\n        if i % 2 == 0:\n            str[i] = str[i].upper()\n            \n        else:\n            str[i] = str[i].lower()\n    \n    return \"\".join(str)\n\nprint(solution(\"2\"))\nprint(solution(\"ABCXYZ\"))\n"
    },
    {
        "number": 4149,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n,a=map(int,stdin.split())\n    b=list(map(int,stdin.split()))\n    b.sort()\n    a_b=[]\n    for i in b:\n        if i not in a_b:\n            a_b.append(i)\n    a_b.sort()\n    b_a=[]\n    for i in a_b:\n        if i not in b_a:\n            b_a.append(i)\n    b_a.sort()\n    answer=[]\n    for i in range(n):\n        answer.append(a_b[i]+b_a[i])\n    return '\\n'.join(map(str,answer))\n"
    },
    {
        "number": 4149,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    a.sort()\n    b = list(map(lambda x: x % a[n-1], a))\n    \n    return str(int(''.join(str(y) for y in b)))"
    },
    {
        "number": 4149,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, list(stdin.split(' '))))\n    b = sorted(a, reverse=True)\n    b.insert(0, 1)\n    for i in range(n-1):\n        temp = a.pop(0)\n        a.insert(0, temp * b[i])\n    print(*a)\n"
    },
    {
        "number": 4149,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int,stdin.split()))\n    n = len(a)\n    b = []\n    b_m = []\n    for i in range(n):\n        if a[i] == 1:\n            b.append(2*i+1)\n        elif a[i] == 2:\n            b.append(i)\n        elif a[i] == 3:\n            b_m.append(3*i+1)\n        elif a[i] == 4:\n            b_m.append(i+1)\n    def find_p(a,b):\n        p = 0\n        for i in range(len(a)):\n            if a[i] == b[i]:\n                p += 1\n            else:\n                break\n        return p\n    def find_max_prime(a):\n        p = 0\n        for i in range(len(a)):\n            if a[i] % 2 == 0:\n                p += 1\n            else:\n                break\n        return p\n    def check_p(a,b):\n        p_b = find_p(b,b_m)\n        p_a = find_p(a,b)\n        if p_b == p_a:\n            return True\n        elif p_b == 0:\n            return False\n        else:\n            for i in range(len(b)):\n                if p_b > 0 and p_a < 0:\n                    p_a = i\n                elif p_a > 0 and p_b > 0:\n                    p_b = i\n            for i in range(len(b)):\n                if p_b == i:\n                    b[i] = 0\n                elif p_b!= i:\n                    b[i] += 1\n            return True\n    if check_p(b,b_m):\n        for i in range(len(b)):\n            if b[i] > 2:\n                b[i] = 2\n            else:\n                b[i] = i + 1\n        return b\n    else:\n        return -1\n"
    },
    {
        "number": 4149,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    p = [2, 3, 5, 2, 4]\n    b = [1, 2, 3, 4, 5]\n    for i in range(len(stdin)):\n        if stdin[i] == '2':\n            b[i] = 2\n        elif stdin[i] == '3':\n            b[i] = 3\n        elif stdin[i] == '4':\n            b[i] = 4\n        elif stdin[i] == '5':\n            b[i] = 5\n        elif stdin[i] == '6':\n            b[i] = 6\n    a = []\n    for i in range(len(b)):\n        a.append(b[i])\n    a = sorted(a, reverse=True)\n    print(a)\n    return str(a[1])\n\n\n-----Constraints-----\n1 <= n <= 1,000\n1 <= a_1, a_2, a_3 <= 10000\n\n-----Time Complexity-----\nO(n)\n\nO(n)\n\nO(n)\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4149,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, b = map(int, stdin.split())\n    a = [int(x) for x in stdin.split()]\n    b = [int(x) for x in stdin.split()]\n    def swap(i, j):\n        a[i], b[j] = b[j], a[i]\n    def solve(i, j):\n        if i > j: return\n        for k in range(i, j):\n            if a[i] % b[k] == 0:\n                swap(i, k)\n                solve(i, k)\n    solve(0, n)\n    return \"\".join([str(x) for x in a])"
    },
    {
        "number": 4149,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    num_line, num_list = stdin.split()\n    num_list = list(map(int, num_list.split()))\n    \n    num_line = int(num_line)\n    num_list = list(map(int, num_list.split()))\n    \n    while len(num_list) > 0:\n        if len(num_list) % 2!= 0:\n            num_list.append(num_list[-1])\n            num_list = num_list[:-2]\n        else:\n            num_list.insert(0, num_list[-1])\n            num_list = num_list[:-1]\n    \n    num_line = num_line * 2\n    \n    if num_line == num_line:\n        print(num_line)\n    else:\n        for i in range(num_line // 2, num_line - 1, -2):\n            num_list[i] += num_list[i - 1]\n            num_list[i] %= 9901\n        print(sum(num_list))\n    \n"
    },
    {
        "number": 4149,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, b = map(int, stdin.split())\n    for i in range(n):\n        b.append(int(input()))\n    \n    for i in range(2, len(b) + 1):\n        print(b[i-2])\n    \n    return''.join(str(i) for i in b)\n\n-----Searching Answer-----\n\nInput\n3\n3 5 2 3 2 4\n\nOutput\n3 4 2 \nInput\n1\n2750131 199999\n\nOutput\n199999 \nInput\n1\n3 6\n\nOutput\n6\ndef"
    },
    {
        "number": 4149,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n <= 2:\n        return str(n)\n    # choose the greatest divisor of the prime numbers\n    divs = [2]\n    # choose the first prime number\n    for p in range(3, n+1, 2):\n        if p % 2 == 0:\n            divs.append(p)\n        elif p % p == 0:\n            divs.append(p)\n    ans = divs[-1]\n    # print the answer\n    for i in range(len(divs)):\n        if i > 1:\n            ans = ans*divs[i]*(divs[i-1])\n        else:\n            ans = ans*divs[i]\n    return ans\n\n------------------------------\n\nInput\n3\n3 5 2 3 2 4\n\nOutput\n6\ndef"
    },
    {
        "number": 4149,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    for _ in range(int(stdin)):\n        n = int(input())\n        a = list(map(int, input().split()))\n        answer = [0] * n\n        dp = [0] * n\n        dp[0] = a[0]\n        for i in range(1, n):\n            for j in range(i + 1):\n                if dp[j] + dp[i] > a[i]:\n                    dp[i] = dp[j] + dp[i]\n                    answer[i] = a[j]\n        print(' '.join(map(str, answer)))\n"
    },
    {
        "number": 4150,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n,k=map(int,stdin.split())\n    l=[list(map(int,input().split())) for i in range(n)]\n    for i in range(n):\n        for j in range(k):\n            if l[i][j]==0:\n                l[i].remove(l[i][j])\n    for i in range(n):\n        for j in range(k):\n            if l[i][j]==0:\n                l[i][j]=k-j\n    for i in range(n):\n        if l[i][0]==l[i][1]:\n            l[i][0],l[i][1]=l[i][1],l[i][0]\n        if l[i][0]==l[i][2]:\n            l[i][0],l[i][2]=l[i][2],l[i][0]\n        if l[i][0]==l[i][3]:\n            l[i][0],l[i][3]=l[i][3],l[i][0]\n    answer=''\n    for i in l:\n        answer+=str(i[0])+str(i[1])\n    return answer\n'''\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        n,k=map(int,stdin.split())\n        l=[list(map(int,input().split())) for i in range(n)]\n        for i in range(n):\n            for j in range(k):\n                if l[i][j]==0:\n                    l[i][j]=k-j\n        for i in range(n):\n            for j in range(k):\n                if l[i][j]==0:\n                    l[i][j]=k-j\n        for i in range(n):\n            if l[i][0]==l[i][1]:\n                l[i][0],l[i][1]=l[i][1],l[i][0]\n            if l[i][0]==l[i][2]:\n                l[i][0],l[i][2]=l[i][2],l[i][0]\n            if l[i][0]==l[i][3]:\n                l[i][0],l[i][3]=l[i][3],l[i][0]\n        answer=''\n        for i in l:\n            answer+=str(i[0])+str(i[1])\n        return answer\n\n\n'''\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        n,k=map(int,stdin.split())\n        l=[list(map(int,input().split())) for i in range(n)]\n        for i in range(n):\n            for j in range(k):\n                if l[i][j]==0:\n                    l[i][j]=k-j\n        for i in range(n):\n            for j in range(k):\n                if l[i][j]==0:\n                    l[i][j]=k-j\n        for i in range(n):\n            if l[i][0]==l[i][1]:\n                l[i][0],l[i][1]=l[i][1],l[i][0]\n            if l[i][0]==l[i][2]:\n                l[i][0],l[i][2]=l[i][2],l[i][0]\n            if l[i][0]==l[i][3]:\n                l[i][0],l[i][3]=l[i][3],l[i][0]\n        answer=''\n        for i in l:\n            answer+=str(i[0])+str(i[1])\n        return answer\n'''\n"
    },
    {
        "number": 4150,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    students = list(map(int, stdin.split()))\n    students.sort()\n\n    curr = K - 1\n    team1 = []\n    team2 = []\n    team1_len = 0\n    team2_len = 0\n\n    for student in students:\n        if curr!= student:\n            team1.append(curr)\n            team1_len += 1\n            curr = student\n        else:\n            team2.append(curr)\n            team2_len += 1\n            curr = student\n\n    if team1_len == 0:\n        return '0'\n    elif team2_len == 0:\n        return '0'\n    else:\n        return ''.join(str(x) for x in team1) + '0' + ''.join(str(x) for x in team2)\n"
    },
    {
        "number": 4150,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    students = []\n    for i in range(n):\n        students.append(int(input()))\n    students.sort()\n    for i in range(k):\n        if i!= 0:\n            students[i-1] = students[i]\n        else:\n            students[i] = students[-1]\n    students.sort()\n    student_with_max_programming_skill = students[0]\n    for i in range(len(students)):\n        if student_with_max_programming_skill > students[i]:\n            student_with_max_programming_skill = students[i]\n    print(student_with_max_programming_skill)\n    return student_with_max_programming_skill\n\n\n--------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nPractice by Dong-Hwan Lee\n\nDFS from (1) https://www.youtube.com/watch?v=JvExJ6k9_M\n\n---------------------------\n\nDFS from (2) https://www.youtube.com/watch?v=Xn_M3WdY1qg\n\n---------\n\nDFS from (3) https://www.youtube.com/watch?v=SPg4CYW4N1F\n\n---------\n\nDFS from (4) https://www.youtube.com/watch?v=JHpKJH5IxG\n\n-----\n\nDFS from (5) https://www.youtube.com/watch?v=B7xJ4W0d3bI\n\n-----\n\nDFS from (6) https://www.youtube.com/watch?v=0G3GmYf8eY\n\n-----\n\nDFS from (7) https://www.youtube.com/watch?v=Z_sMmI7yHG\n\n-----\n\nDFS from (8) https://www.youtube.com/watch?v=<DwV8Oq5B9x0\n\n-----\n\nDFS from (9) https://www.youtube.com/watch?v=xQJH_iN0_n\n\n-----\n\nDFS from (10) https://www.youtube.com/watch?v=L4e1_iH5IH\n\n-----\n\nDFS from (11) https://www.youtube.com/watch?v=FQG0GcMk8A\n\n-----\n\nDFS from (12) https://www.youtube.com/watch?v=PXHkAu+R0\n\n-----\n\nDFS from (13) https://www.youtube.com/watch?v=XGQ-Rjz7Cs\n\n-----\n\nDFS from (14) https://www.youtube.com/watch?v=XS4GjqZ0Yx\n\n-----\n\nDFS from (15) https://www.youtube.com/watch?v=1i3X9cXbZY\n\n-----\n\nDFS from (16) https://www.youtube.com/watch?v=_GZ5sWlZL6\n\n-----\n\nDFS from (17) https://www.youtube.com/watch?v=WYwjh+W8F\n\n-----\n\nDFS from (18) https://www.youtube.com/watch?v=MjM1SJK6qF\n\n-----\n\nDFS from (19) https://www.youtube.com/watch?v=SLBMe8jz3rE\n\n-----\n\nDFS from (20) https://www.youtube.com/watch?v=TZ-`H_QrY\n\n-----\n\nDFS from (21) https://www.youtube.com/watch?v=TK5b0YkdUy\n\n-----\n\nDFS from (22) https://www.youtube.com/watch?v=u8L8C7A9Dx0\n\n-----\n\nDFS from (23) https://www.youtube.com/watch?v=X9bqgGKWO_\n\n-----\n\nDFS from (24) https://www.youtube.com/watch?v=YvJ_TZJNXI\n\n-----\n\nDFS from (25) https://www.youtube.com/watch?v=iXy0YqXVu\n\n-----\n\nDFS from (26) https://www.youtube.com/watch?v=u-KXn_cYzm\n\n-----\n\nDFS from (27) https://www.youtube.com/watch?v=iG2w1t4qEO\n\n-----\n\nDFS from (28) https://www.youtube.com/watch?v=eJ_0RJlY8M\n\n-----\n\nDFS from (29) https://www.youtube.com/watch?v=ue9O_VHvMb\n\n-----\n\nDFS from (30) https://www.youtube.com/watch"
    },
    {
        "number": 4150,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split()]\n    stu = [int(i) for i in stdin.split()]\n    stu = sorted(stu)\n    stu = stu[:k]\n    stu = sorted(stu)\n    s = ''.join(map(str, stu))\n    return s[0:n]"
    },
    {
        "number": 4150,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n,k=map(int,stdin.split())\n    students=list(map(int,stdin.split()))\n    x,y=map(int,stdin.split())\n    teams=[]\n    for i in range(k):\n        if students[i] not in teams:\n            teams.append(students[i])\n    teams.sort()\n    \n    for i in range(x,x+n):\n        if i in teams:\n            continue\n        print(i)\n        for j in range(y,y+n):\n            if i in teams:\n                continue\n            if j in teams:\n                continue\n            if j in teams:\n                print(i,j)\n            else:\n                print(i,j)\n\nsolution(\"5 2\")"
    },
    {
        "number": 4150,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    answer = ''\n    for _ in range(n):\n        a, b = map(int, input().split())\n        print(a, b)\n        if a == b:\n            print('0')\n        else:\n            if a > b:\n                answer += str(a)\n            else:\n                answer += str(b)\n    return answer"
    },
    {
        "number": 4150,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    data = [int(x) for x in stdin.split()]\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, [data[i], i])\n    j = 0\n    answer = ''\n    while heap:\n        a, b = heapq.heappop(heap)\n        if b == n - k + 1:\n            answer += '1'\n            j += 1\n        else:\n            if j == 0:\n                answer += '2'\n            else:\n                answer += '2'\n            answer +=''\n            j -= 1\n    return answer\n\nInput\n7 3\n2 2 4 5 3 1\n\nOutput\n2\n"
    },
    {
        "number": 4150,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    students = [int(stdin[i]) for i in range(n)]\n    min_coach = 0\n    max_coach = 0\n    first_team = [0]*n\n    second_team = [0]*n\n    for i in range(n):\n        if students[i] <= min_coach:\n            min_coach = students[i]\n            first_team[i] = 0\n        elif students[i] >= max_coach:\n            max_coach = students[i]\n            second_team[i] = 0\n        elif students[i] > 0:\n            first_team[i] += 1\n            second_team[i] += 1\n    answer = ''\n    for i in range(k):\n        if i == k - 1:\n            answer += str(first_team[i]) + '\\n'\n            answer += str(second_team[i]) + '\\n'\n        else:\n            answer += str(first_team[i]) + '\\n'\n            answer += str(second_team[i]) + '\\n'\n            if i == k - 1:\n                answer += '\\n'\n    return answer\n\n\nprint(solution(\"5 3\"))\nprint(solution(\"5 1\"))\nprint(solution(\"7 1\"))\nprint(solution(\"7 2 1 3 5 4 6\"))"
    },
    {
        "number": 4150,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    data = []\n    for i in range(n):\n        line = stdin.split(' ')\n        a = line[0]\n        b = line[1]\n        data.append([int(a), int(b)])\n    \n    data.sort(reverse=True)\n    s = ''\n    for i in range(n):\n        s += str(data[i][0]) +''\n        s += str(data[i][1]) +''\n    \n    return s[:-1]\n\n\nInput\n5 2\n2 4 5 3 1\n\nOutput\n11111\n\nInput\n5 1\n2 1 3 5 4\n\nOutput\n22111\n'''\n"
    },
    {
        "number": 4150,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split(\" \")\n    n = int(input[0])\n    k = int(input[1])\n    team = []\n    for i in range(k):\n        team.append(input[i+1].split(\"-\"))\n    i, j = 0, 0\n    while i < n:\n        while j < k:\n            if team[i][0] <= team[j][0]:\n                team[i].append(team[j][1])\n                j += 1\n            else:\n                break\n        i += 1\n        j = 0\n    for i in team:\n        print(len(i))\n    return \"\".join(map(str, team))\n\nprint(solution(\"5 2\"))\n"
    },
    {
        "number": 4151,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin.strip().split(' ')[0])\n    a = [int(stdin.strip().split(' ')[i]) for i in range(n)]\n    count = 0\n    \n    if len(a) == 0 or len(a) == 1:\n        count = 1\n    else:\n        if len(a) == 2:\n            if a[0] == a[1]:\n                count = 1\n            else:\n                count = 2\n        else:\n            if a[0] == a[1] or a[0] == a[2] or a[2] == a[3] or a[0] == a[3] or a[0] == a[1] or a[2] == a[1] or a[0] == a[2]:\n                count = 3\n            else:\n                count = 4\n    \n    return str(count)\n\n-----Constraints-----\n1 <= n <= 10^5\n0 <= a[i] <= 10^9\n\n-----Time Limit-----\nUsing time limit of 1 second.\n\nUsing time limit of 10 seconds.\n\nPlease solve it without using any built-in library.\n'''"
    },
    {
        "number": 4151,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(set([int(i) for i in map(int, stdin.split())])))\n\"\"\"\nimport sys\n\ndef"
    },
    {
        "number": 4151,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n\n    a_b = b[0]\n    for i in range(1, len(a)):\n        a_b = (a[i] - a_b) % 2\n\n    return str(a_b)\n"
    },
    {
        "number": 4151,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(num) for num in stdin.split()]\n    n = len(a)\n    b = [0] * n\n    a.sort()\n    b.sort()\n    b = [a[i] + b[i] for i in range(n)]\n    b.sort()\n    for i in range(1, n - 1):\n        if a[i] > a[i - 1] and b[i] > b[i - 1]:\n            b[i] = b[i - 1] + 1\n    return str(b[n - 1])\n"
    },
    {
        "number": 4151,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    b = []\n    for i in range(len(a)):\n        for j in range(len(a) - i):\n            b.append(a[j] + b[j + 1])\n    print(len(set(b)))\n    return str(len(set(b)))\n    \n"
    },
    {
        "number": 4151,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return str(sum(map(lambda x: x // 2 % 2, list(map(int, input().split())))) % 1000000007)\n"
    },
    {
        "number": 4151,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip().split(\" \")[1])\n    a = [int(stdin.strip().split(\" \")[0]) for i in range(n)]\n    b = list(set(a))\n    count = 0\n    for i in b:\n        for j in range(i + 1, n + 1):\n            if a[j] - a[i] == 1:\n                count += 1\n                break\n            elif a[j] - a[i] == -1:\n                count += 1\n                break\n    return str(count)\n\n\n-----Examples-----\nInput\n2\n100 1\n\nOutput\n2\n\nInput\n1\n100\n\nOutput\n1\n\"\"\"\nimport sys\n\ndef"
    },
    {
        "number": 4151,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(i) for i in stdin.split()]\n    b = [int(i) for i in stdin.split()]\n    \n    a = [0] + a + [max(a)]\n    b = [0] + b + [max(b)]\n    \n    n = len(a)\n    for i in range(1, n):\n        a[i] = a[i-1] + 1\n        b[i] = b[i-1] + 1\n        \n    for i in range(n-2, 0, -1):\n        if b[i]!= 0:\n            a[i+1] = a[i] + b[i]\n            b[i+1] = b[i]\n            \n    return str(a[-1])\n"
    },
    {
        "number": 4151,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.split()))\n    b = []\n    for i in range(1, n+1):\n        b.append(b[i-1] + b[i-2] + b[i-3] + b[i-4])\n    b.sort()\n    return''.join([str(b[i]) for i in range(1, n+1)])\n"
    },
    {
        "number": 4151,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def compare(a, b):\n        ans = 0\n        if a!= b:\n            ans += max(a - b, 0)\n        if a!= 0:\n            ans += min(a, b)\n        return ans\n    \n    def solve(a, b):\n        if a == b:\n            return 0\n        if a > b:\n            return compare(a - 1, b) + compare(a - b, b - 1)\n        return compare(a, b - 1)\n    \n    n = int(stdin.strip())\n    a = [int(i) for i in stdin.split()]\n    b = [int(i) for i in stdin.split()]\n    \n    for i in range(len(a) - 1):\n        for j in range(i + 1, len(a)):\n            if solve(a[i], b[j]) < 0:\n                return max(b[i] + 1, b[j] + 1)\n    return max(b[i] + 1, b[j] + 1)\n        \n    \n    \n\n'''\ndef"
    },
    {
        "number": 4152,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Largest sequence length.\n    https://leetcode.com/problems/largest-sequence-in-the-set/discuss/106851/Python-solution-with-O(n^2)\n    \"\"\"\n    n = int(stdin.strip())\n    a = [int(x) for x in stdin.split()]\n    seq = set(a)\n\n    while len(seq)!= 2 ** (n):\n        seq = set(seq)\n    return len(seq) ** 2\n"
    },
    {
        "number": 4152,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a_list = list(map(int, stdin.split()))\n    \n    for i in range(n):\n        if len(a_list[i]) > 1:\n            a_list[i] = 0\n    \n    for i in range(n-1):\n        if len(a_list[i]) == 2:\n            a_list[i] = 1\n    \n    return ''.join(str(x) for x in a_list)\n        \n"
    },
    {
        "number": 4152,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, a_1, a_2, a_3, a_4, a_5 = stdin.split()\n    a_1 = int(a_1)\n    a_2 = int(a_2)\n    a_3 = int(a_3)\n    a_4 = int(a_4)\n    a_5 = int(a_5)\n    if n!= '0':\n        if n < a_1 + a_2 + a_3 + a_4 + a_5:\n            print('0')\n        else:\n            a_1 = a_1 - a_2\n            a_2 = a_2 - a_3\n            a_3 = a_3 - a_4\n            a_4 = a_4 - a_5\n            print(a_1, a_2, a_3, a_4, a_5)\n    else:\n        print('0')\n\nsolution(input())\n"
    },
    {
        "number": 4152,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, a_1, a_2, a_3 = map(int, stdin.split())\n    answer = 0\n    for i in range(0, n):\n        tmp = 0\n        for j in range(i+1, n):\n            if (a_3**j - a_3 + a_1) % (2**i) == 0:\n                tmp += 1\n        if tmp >= a_1:\n            answer += a_1**i\n    return str(answer)"
    },
    {
        "number": 4152,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    if stdin[0]!= '-':\n        return '0'\n    n = int(stdin[1])\n    a = stdin[2:]\n    a = set(map(int, a))\n    if len(a) == 1:\n        return '0'\n    b = []\n    for i in range(len(a)):\n        for j in range(i + 1, len(a)):\n            b.append(a.pop())\n    print(b)\n    return ''.join(str(i) for i in b)\n"
    },
    {
        "number": 4152,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a_list = list(map(int, stdin.strip().split()))\n    good_list = []\n    for a in a_list:\n        if a % 2 == 0:\n            good_list.append(a)\n    good_list = sorted(good_list)\n    if len(good_list) > n:\n        for i in range(n - len(good_list)):\n            good_list.pop()\n    return str(len(good_list))\n\nprint(solution(\"1\"))\nprint(solution(\"4\"))\nprint(solution(\"5\"))\n\nprint(solution(\"1\"))\nprint(solution(\"1023\"))\n\nprint(solution(\"4\"))\nprint(solution(\"5\"))\nprint(solution(\"1\"))\nprint(solution(\"0\"))"
    },
    {
        "number": 4152,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return "
    },
    {
        "number": 4152,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # to calculate max sum of a\n    def maxSum(nums, total):\n        dp = [0 for _ in range(len(nums))]\n        dp[0] = nums[0]\n        for i in range(1, len(nums)):\n            dp[i] = max(dp[i - 1] + nums[i], nums[i])\n        return max(dp)\n\n    # to calculate min sum of a\n    def minSum(nums, total):\n        dp = [0 for _ in range(len(nums))]\n        dp[0] = nums[0]\n        for i in range(1, len(nums)):\n            dp[i] = min(dp[i - 1] + nums[i], nums[i])\n        return min(dp)\n\n    n = int(stdin.strip())\n    num_set = set(map(int, stdin.strip().split()))\n    res = num_set.difference(num_set)\n    if len(res) > 0:\n        return str(len(res))\n    return str(0)"
    },
    {
        "number": 4152,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    def is_good(a, i):\n        count = 0\n        for j in range(i, len(a)):\n            if a[j] % 2!= 0:\n                count += 1\n        return count <= 1\n    answer = 0\n    if len(a) >= n:\n        for i in range(n-1):\n            if is_good(a, i):\n                a.pop(i)\n                answer += 1\n        return answer\n    else:\n        return answer\n\ndef"
    },
    {
        "number": 4152,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n  n = int(stdin.strip())\n  a = [int(i) for i in stdin.strip().split()]\n  for i in range(n):\n    a[i] = a[i] % 2**n\n  print(sum(a))\n  return str(sum(a))\n\nprint(solution(\"4 7 1 5 4 9\"))\n"
    },
    {
        "number": 4153,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    for _ in range(int(stdin)):\n        cubes_red, cubes_blue = [int(i) for i in stdin.split(' ')]\n        cubes_red -= 1\n        cubes_blue -= 1\n        if cubes_red < 0 or cubes_blue < 0:\n            print(0)\n        else:\n            print(cubes_red, cubes_blue)"
    },
    {
        "number": 4153,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    cubes = [1, 1]\n    for _ in range(N-2):\n        cubes.append(cubes[-2] + cubes[-1])\n    cubes.pop()\n    cubes = \"\".join(map(str, cubes))\n    print(len(cubes) - len(cubes.rstrip(\"0\")), len(cubes.rstrip(\"1\")))\n\nprint(solution(\"11\"))\n"
    },
    {
        "number": 4153,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    cubes = [0] * N\n    cubes[0] = 1\n    cubes[1] = 0\n    cubes[2] = 0\n    cubes[3] = 1\n    for i in range(4, N + 1):\n        cubes[i] = cubes[i - 1]\n    answer = 0\n    for i in range(N):\n        if cubes[i] == 1:\n            answer += 2\n        elif i > 0 and i < N - 1 and cubes[i] == 0:\n            answer += 1\n        elif i == 0 and cubes[i] == 1:\n            answer += 3\n    return str(answer)\n'''\n\nclass Solution:\n    def solve(self, s):\n        n = len(s)\n        cache = {}\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        if n not in cache:\n            cache[n] = (self.solve(s[1:]) + self.solve(s[:n])) % (10 ** 9 + 7)\n        return cache[n]\n"
    },
    {
        "number": 4153,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    cubes = [list(map(int, stdin.strip().split())) for _ in range(n)]\n    answer = 0\n    for i in range(n):\n        for j in range(n):\n            for k in range(n):\n                if (cubes[i][j] == 0 and cubes[j][k] == 0) or (cubes[i][j] == 1 and cubes[j][k] == 1):\n                    cubes[i][k] = 0\n                    cubes[j][k] = 0\n                    cubes[k][i] = 0\n                    answer += 1\n    return answer"
    },
    {
        "number": 4153,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    res = 0\n    for _ in range(n):\n        for _ in range(k):\n            if stdin[-1] == \"0\":\n                stdin.pop()\n            else:\n                stdin.append(\"0\")\n        res += 1\n    print(res)\n    return str(res)\n\n'''\n\ndef"
    },
    {
        "number": 4153,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    cubes = [red, blue]\n    for _ in range(k):\n        next_cubes = []\n        for i in range(n):\n            cube = cubes.pop(0)\n            if cube == 0:\n                cubes.append(0)\n                next_cubes.append(0)\n            else:\n                cubes.append(1)\n                next_cubes.append(0)\n        cubes = list(reversed(cubes))\n        cubes = list(map(int, cubes))\n    answer = cubes[0]\n    for i in range(n-1):\n        cubes[i] = cubes[i+1]\n        cubes[i+1] = 0\n    answer = list(map(int, cubes))\n    return str(max(answer))\n-----Submissions-----\n1\n3\n10\n"
    },
    {
        "number": 4153,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    cubes = []\n    for i in range(N):\n        cubes.append(int(stdin[i]))\n    \n    cubes.sort()\n    # print(cubes)\n    num = 0\n    for i in range(N-3):\n        if i+1 < N-1:\n            if cubes[i] == 0 and cubes[i+1] == 0:\n                num += 1\n            elif cubes[i] == 0:\n                num += 2\n        else:\n            num += 1\n        \n    return str(num)\n'''\nclass Solution:\n    def removeCubes(self, S: str) -> str:\n        # Solution\n        n = len(S)\n        if n == 0:\n            return ''\n        \n        l = len(set(S))\n        if l < n:\n            return ''\n        \n        for i in range(1, n+1):\n            if i > l:\n                break\n            \n            if S[i] == S[i-1]:\n                S.remove(S[i])\n                S.remove(S[i-1])\n            \n            # print(S)\n            \n        if l == 0:\n            return '1'\n        \n        if len(set(S)) == 1:\n            return '0'\n        \n        return '1'"
    },
    {
        "number": 4153,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    cubes = [list(map(int, input().split())) for _ in range(n)]\n    for i in range(n):\n        for j in range(i, n):\n            if cubes[i][j] == 0:\n                cubes[i][j] = 2\n            else:\n                cubes[i][j] = 0\n    for i in range(n):\n        cubes[i][i] = 0\n    for i in range(n):\n        for j in range(n):\n            cubes[j][n-i-1] = 0\n    return str(sum(cubes))"
    },
    {
        "number": 4153,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return 0\n    q = deque()\n    q.append(n)\n    while q:\n        now_q = q.popleft()\n        if now_q == 2:\n            q.append(1)\n            q.append(0)\n        else:\n            q.append(now_q-1)\n            q.append(0)\n    print(q[0])\n    return q[0]\n\nprint(solution(input()))\n"
    },
    {
        "number": 4153,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    answer = 0\n    for _ in range(N):\n        color = stdin[0]\n        r = color // '0'\n        g = color % '0'\n        answer += (r * 4) + (g * 2)\n    return str(answer)\n"
    },
    {
        "number": 4154,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = list(map(int, stdin.split()))\n    L_1, R_1, L_2, R_2 = list(map(int, stdin.split()))\n    L_M, R_M = list(map(int, stdin.split()))\n    lst = []\n    for _ in range(N):\n        lst.append(list(map(int, stdin.split())))\n    gate_lst = []\n    for idx, row in enumerate(lst):\n        for col in range(len(row)):\n            if row[col] == L_1 or row[col] == R_1 or row[col] == L_2 or row[col] == R_2:\n                gate_lst.append(L_M)\n            if row[col] == L_1 + R_1 or row[col] == L_2 + R_2 or row[col] == L_1 + R_1 + R_2 or row[col] == R_1 + R_2 + R_2:\n                gate_lst.append(R_M)\n    if len(gate_lst) == 0:\n        return \"0\"\n    result = len(gate_lst)\n    for gate_idx in gate_lst:\n        if len(gate_lst) == 1:\n            result -= 1\n        else:\n            result -= len(gate_lst)\n    return str(result)\n\n-------Examples-------\nExample 1:\n\nInput:\nN = 4\nM = 2\nL_1 = 1\nR_1 = 3\nL_2 = 2\nR_2 = 4\nOutput:\n2\n\nExample 2:\n\nInput:\nN = 10\nM = 4\nL_1 = 1\nR_1 = 10\nL_2 = 11\nR_2 = 12\nL_3 = 13\nR_3 = 14\nL_4 = 15\nR_4 = 16\nOutput:\n14\nExplanation:\nWe have two sets of N = 4 IDs.\nL_1 + R_1 = 1\nL_2 + R_2 = 3\nL_3 + R_3 = 10\nL_4 + R_4 = 16\nLet L_i = [1, 2, 3, 4]\nLet R_i = [1, 10, 11, 12]\nLet R_j = [L_i, R_i, R_j, R_i]\nHere, we have two ID cards in R_j.\n\nIn the above example, R_i would be used to pass the gate, and R_j would be used to pass all the gates, and so on.\nLet L_i = [1, 2, 3, 4]\nLet R_i = [1, 10, 11, 12]\nLet R_j = [R_i, R_i, R_j, R_i]\nLet R_i = [1, 10, 11, 12]\nLet R_j = [R_i, R_i, R_j, R_i]\nLet R_i = [1, 10, 11, 12]\nLet R_j = [R_i, R_i, R_j, R_i]\nLet R_i = [1, 10, 11, 12]\nLet R_j = [R_i, R_i, R_j, R_i]\nLet R_i = [1, 10, 11, 12]\nLet R_j = [R_i, R_i, R_j, R_i]\nLet R_i = [1, 10, 11, 12]\nLet R_j = [R_i, R_i, R_j, R_i]\nLet R_i = [1, 10, 11, 12]\nLet R_j = [R_i, R_i, R_j, R_i]\nLet R_i = [1, 10, 11, 12]\nLet R_j = [R_i, R_i, R_j, R_i]\nLet R_i = [1, 10, 11, 12]\nLet R_j = [R_i, R_i, R_j, R_i]\nLet R_i = [1, 10, 11, 12]\nLet R_j = [R_i, R_i, R_j, R_i]\nLet R_i = [1, 10, 11, 12]\nLet R_j = [R_i, R_i, R_j, R_i]\nLet R_i = [1, 10, 11, 12]\nLet R_j = [R_i, R_i, R_j, R_i]\nLet R_i = [1, 10, 11, 12]\nLet R_j = [R_i, R_i, R_j, R_i]\nLet R_i = [1, 10, 11, 12]\nLet R_j = [R_i, R_i, R_j, R_i]\nLet R_i = [1, 10, 11, 12]\nLet R_j = [R_i, R_i, R_j, R_i]\nLet R_i = [1, 10, 11, 12]\nLet R_j = [R_i, R_i, R_j, R_i]\nLet R_i = [1, 10, 11, 12]\nLet R_j = [R_i, R_i, R_j, R_i]\nLet R_i = [1, 10, 11, 12]\nLet R_j = [R_i, R_i, R_j, R_i]\nLet R_i = [1, 10, 11, 12]\nLet R_j = [R_i, R_i, R_j, R_i]\nLet R_i = [1, 10, 11, 12]\nLet R_j = [R_i, R_i, R_j, R_i]\nLet R_i = [1, 10, 11, 12]\nLet R_j = [R_i, R_i, R_j, R_i]\nLet R_i = [1, 10, 11, 12]\nLet R_j = [R_i, R_i, R_j, R_i]\nLet R_i = [1, 10, 11, 12]\nLet R_j = [R_i, R_i, R_j, R_i]\nLet R_i = [1, 10, 11, 12]\nLet R_j = [R_i, R_i, R_j, R_i]\nLet R_i = [1, 10, 11, 12]\nLet R_j = [R_i, R_i, R_j, R_i]\nLet R_i = [1, 10, 11, 12]\nLet R_j = [R_i, R_i, R_j, R_i]\nLet R_i = [1, 10, 11, 12]\nLet R_j = [R_i, R_i, R_j, R_i]\nLet R_i = [1, 10, 11, 12]\nLet R_j = [R_i, R_i, R_j, R_i]\nLet R_i = [1, 10, 11, 12]\nLet R_j = [R_i, R_i"
    },
    {
        "number": 4154,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    lst = list(map(int, stdin.split()))\n    gate = lst.pop(0)\n\n    def dfs(idx, g):\n        if idx == n:\n            if g == -1:\n                return 1\n            else:\n                return 0\n        ret = dfs(idx + 1, g) + dfs(idx + 1, g + 1)\n        if gate == 1:\n            return ret\n        else:\n            return ret & 1\n\n    return str(dfs(0, 0))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4154,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n  n, m = map(int, stdin.split())\n  res = []\n  for _ in range(m):\n    l, r = map(int, stdin.split())\n    res.append((l, r))\n  res = sorted(res)\n  for idx in range(len(res) - 1, -1, -1):\n    if res[idx][1] == res[idx + 1][0]:\n      return str(res[idx][0])\n  return '0'\n\n'''\ndef"
    },
    {
        "number": 4154,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split(\" \")]\n    id_cards = [int(x) for x in stdin.split(\" \")]\n    \n    if n == 0 or m == 0:\n        return \"0\"\n    \n    for i in range(1, n):\n        if id_cards[i-1]!= id_cards[i]:\n            return str(i)\n    \n    return \"0\"\n"
    },
    {
        "number": 4154,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n  N, M, L, R = map(int, stdin.split())\n  return solutionHelper(N, M, L, R)\ndef"
    },
    {
        "number": 4154,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(i) for i in stdin.split()]\n    L_i, R_i = [int(i) for i in stdin.split()]\n    if (n > m):\n        n, m = m, n\n    L_i -= 1\n    R_i -= 1\n    return (n // m + (n % m > 0)) * (m - 1) + L_i + R_i\n"
    },
    {
        "number": 4154,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    L, R = map(int, stdin.split())\n    \n    def check(i):\n        if i == L:\n            return True\n        if i == (L + 1) % M:\n            return True\n        if i == R:\n            return True\n        if i == R % M:\n            return True\n        return False\n    \n    answer = 0\n    for i in range(N):\n        if not check(i):\n            answer += 1\n    print(answer)\n    \n"
    },
    {
        "number": 4154,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    L_1, R_1 = map(int, stdin.split())\n    L_2, R_2 = map(int, stdin.split())\n    L_3, R_3 = map(int, stdin.split())\n    L_4, R_4 = map(int, stdin.split())\n\n    gates_L = [L_1, R_1, L_2, R_2]\n    gates_R = [L_3, R_3, L_4, R_4]\n\n    def is_valid(gates):\n        for gate in gates:\n            if gate == 'L_1':\n                if gates[gate] == 1:\n                    return False\n            elif gate == 'L_2':\n                if gates[gate] == 2:\n                    return False\n            elif gate == 'L_3':\n                if gates[gate] == 3:\n                    return False\n            elif gate == 'L_4':\n                if gates[gate] == 4:\n                    return False\n\n        return True\n\n    def is_same(gate, L, R):\n        return gates[gate] == L and gates[gate] == R\n\n    ans = 0\n    for gate in gates_L:\n        if is_valid(gate):\n            ans += 1\n\n    for gate in gates_R:\n        if is_valid(gate):\n            ans += 1\n\n    return str(ans)\n"
    },
    {
        "number": 4154,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n  N, M = map(int, stdin.split())\n  if (N % 2)!= 0:\n    return \"Error: N must be even.\"\n  if (M % 2)!= 0:\n    return \"Error: M must be even.\"\n  if (N < M):\n    return \"Error: N must be greater than M.\"\n  L = list(map(int, stdin.split()))\n  R = []\n  for i in range(N):\n    for j in range(1,M+1):\n      if L[i] == j:\n        R.append(j)\n  if len(R) == 0:\n    return \"Error: No ID cards allowed.\"\n  return len(R)"
    },
    {
        "number": 4154,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    L = map(int, stdin.split())\n    R = map(int, stdin.split())\n    L_dict = {i: 0 for i in range(N)}\n    R_dict = {i: 0 for i in range(N)}\n    for i in range(N):\n        L_dict[L[i]] += 1\n        R_dict[R[i]] += 1\n    \n    def check(x):\n        # check if the gate is actually on the left side of the gate\n        return (x < N and x < M) or x < N and x < M\n        \n    answer = 0\n    for i in range(N):\n        if L[i] < M and not check(L[i]):\n            answer += 1\n        if R[i] < M and not check(R[i]):\n            answer += 1\n    print(answer)\n    return\n\n-----Sample Output-----\nSample Input:\n4 2\n1 3\n2 4\n\nSample Output:\n2\n\nTwo ID cards allow us to pass all the gates, as follows:\n - The first ID card does not allow us to pass the second gate.\n - The second ID card allows us to pass all the gates.\n - The third ID card allows us to pass all the gates.\n - The fourth ID card does not allow us to pass the first gate.\ndef"
    },
    {
        "number": 4155,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   N = int(stdin)\n   h = [int(x) for x in stdin.split()]\n   h.sort()\n   for i in range(1,N+1):\n       l = i-1\n       r = N-i\n       for j in range(l,r):\n           h[j] -= 1\n           if h[j] == 0:\n               h[j] = 1\n       h.sort()\n   return str(len(h))"
    },
    {
        "number": 4155,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n<=0:\n        return \"\"\n    if n<10:\n        return str(n)\n    res = []\n    for i in range(n+1):\n        res.append(i)\n    for i in range(n-1):\n        res[i] = res[i]+1\n    res[n-1] = 1\n    for i in range(n-2,-1,-1):\n        res[i] = res[i]+1\n    res = res[:n]\n    res.sort()\n    for i in range(len(res)-1):\n        if res[i]<res[i+1]:\n            break\n    return str(len(res)-1)\n\nConstraints\n\n-----Input Format-----\nThe first line contains an integer N, the number of flowers.\nThe next N lines contain integers l, r.\n\n-----Output Format-----\nPrint the minimum number of watering operations required to satisfy the condition.\n\n-----Sample Input-----\n4\n1 2 2 1\n\n-----Sample Output-----\n2\n\nThe minimum number of watering operations required is 2.\nOne way to achieve it is:\n - Perform the operation with (l,r)=(1,3).\n - Perform the operation with (l,r)=(2,4).\ndef"
    },
    {
        "number": 4155,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This is a very simple solution of a few tricks.\n    The idea here is to keep track of the height of each flower.\n    Then, we only need to change one height at a time.\n    We use a dictionary to store the index of the flower (index(k))\n    and the value of that height.\n    We then check if we need to change the height of that flower.\n    \"\"\"\n    # Stores the index of the flower,\n    # and the value of the height\n    N = int(stdin[1])\n    h = int(stdin[0])\n    answer = 0\n    d = {}\n    for i in range(1,N+1):\n        d[i] = 0\n    l,r = 1,3\n    while(l <= r):\n        while(l <= r):\n            # The base case\n            if(l == 1 or r == 3):\n                d[l] += 1\n            # The edge cases\n            else:\n                if(d[l] < d[r]):\n                    d[l] += 1\n                if(d[l] > d[r]):\n                    d[r] -= 1\n                # We take the largest value, which is the index of the flower\n                # And update the value of the height\n                answer = max(answer,d[l])\n                # We take the lowest value, which is the index of the flower\n                # And update the value of the height\n                answer = min(answer,d[r])\n                # We then change the value of the index\n                l += 1\n                r += 1\n    return str(answer)\n    \n"
    },
    {
        "number": 4155,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, *flowers = map(int, stdin.split())\n    h = set(map(int, stdin.split()))\n    water = 0\n    for i, v in enumerate(flowers):\n        l, r = 0, 3\n        while l < r:\n            while (l < r and flowers[l] < v):\n                r -= 1\n            while (l < r and flowers[r] > v):\n                l += 1\n            if l < r:\n                water += 1\n                l, r = r, l + 1\n    return str(water)\n\n-----Sample Input-----\n3\n1 2 2 1\n2\n1 1 1 1\n\n-----Sample Output-----\n1\n\nThe minimum number of watering operations required is 2.\nOne way to achieve it is:\n - Perform the operation with (l,r)=(1,3).\n - Perform the operation with (l,r)=(2,4).\ndef"
    },
    {
        "number": 4155,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    h_list = [0]*N\n    for i in range(N):\n        h_list[i] = int(stdin[i])\n    min_ = 0\n    for i in range(1,N+1):\n        l,r = i,i\n        while l<N and r<N:\n            if h_list[l]<h_list[r]:\n                l+=1\n            else:\n                r+=1\n                min_ += 1\n    print(min_)\n"
    },
    {
        "number": 4155,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    from collections import deque\n    queue = deque()\n    while True:\n        if len(queue) == 0:\n            return '0'\n        num = queue.popleft()\n        if num == 0:\n            return '0'\n        elif num < 10:\n            queue.append(num)\n        else:\n            queue.appendleft(num)\n"
    },
    {
        "number": 4155,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n,*a = map(int,stdin)\n    \n    l,r = 1,2\n    \n    for i in range(n):\n        l,r = r,l+a[i]\n    \n    return str(min(l,r))\n\ndef"
    },
    {
        "number": 4155,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    l = 1\n    r = 3\n    watering = 0\n    for _ in range(N):\n        h = int(stdin[l]) + int(stdin[r])\n        l += 1\n        r += 1\n        if h > 100:\n            break\n        if h < 0:\n            break\n        if h > 10:\n            continue\n        watering += h\n    print(watering)\n    return str(watering)\n\nTest case Example:\nInput:\n4\n1 2 2 1\n\nOutput:\n4\n\nExplanation:\n1 2 2 1\n 1 2 2 1\n 2 2 2 1\n\nThe minimum number of watering operations required to satisfy the condition is 1.\n\"\"\"\n\ndef"
    },
    {
        "number": 4155,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n,*h = map(int, stdin)\n    heights = [0 for _ in range(n+1)]\n    for i in range(1, n+1):\n        heights[i] = heights[i-1] + h[i-1]\n    \n    for i in range(n, 0, -1):\n        heights[i] = heights[i-1] + h[i]\n    print(min(heights))\n    return str(heights.index(min(heights)))\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4155,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    h = map(int, stdin.strip().split())\n    l, r = 1, N\n    while l <= r:\n        m = (l + r) // 2\n        if solution(h, m):\n            l = m + 1\n        else:\n            r = m - 1\n    return str(l)\n\n-----Sample Output-----\n1\n2\n1\n\n\"\"\"\ndef"
    },
    {
        "number": 4156,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.split()[1])\n    b = int(stdin.split()[2])\n    c = int(stdin.split()[3])\n    return solution1(b, a, c)\n\ndef"
    },
    {
        "number": 4156,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, w = map(int, stdin.split())\n    print(solution_helper(n, w))\n\ndef"
    },
    {
        "number": 4156,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, w = list(map(int, stdin.split()))\n    #print(n, w)\n    \n    buses = []\n    bus_stops = []\n    for i in range(n):\n        bus_stops.append(int(stdin[i]))\n    #print(bus_stops)\n    for i in range(1,n):\n        bus_stops[i] = bus_stops[i-1] + w-1\n    #print(bus_stops)\n    \n    answer = []\n    for i in range(1, n):\n        if buses[i-1] <= bus_stops[i]:\n            answer.append(i-1)\n        else:\n            answer.append(i)\n    #print(answer)\n    \n    if len(answer) == 0:\n        return '0'\n    elif len(answer) == 1:\n        return str(answer[0])\n    else:\n        return str(answer[-1])\n"
    },
    {
        "number": 4156,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, w = map(int, stdin.split())\n    a_dict = {}\n    for i in range(n):\n        a_dict[i] = int(stdin.split()[i])\n    \n    a = sorted(a_dict.items(), key=lambda x: x[1])\n    \n    ans = 0\n    \n    for i in a:\n        if i[0] >= w:\n            ans += 1\n            \n    if ans == 0:\n        print(0)\n    else:\n        print(ans)\n    "
    },
    {
        "number": 4156,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, w = [int(i) for i in stdin.split()]\n    a_i = list(map(int, stdin.split()))\n    a_n = [a_i[i:i+w] for i in range(0, len(a_i), w)]\n\n    res = 0\n\n    for a_i_list in a_n:\n        if len(set(a_i_list)) == n:\n            res += 1\n\n    return str(res)\n\nprint(solution(\"3 5\"))\nprint(solution(\"2 4\"))\nprint(solution(\"4 10\"))\nprint(solution(\"4 10\"))\nprint(solution(\"4 10\"))\n"
    },
    {
        "number": 4156,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\ndef"
    },
    {
        "number": 4156,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, w = map(int, stdin.split())\n    a_1, a_2, a_3, a_4 = map(int, stdin.split())\n    if n <= 0 or n > 10**9:\n        return 0\n    a_1 += a_2 + a_3 + a_4\n    possible = [1, 2, 3, 4]\n    if a_1 < w:\n        possible[0] = possible[0] + 1\n    if a_2 < w:\n        possible[1] = possible[1] + 1\n    if a_3 < w:\n        possible[2] = possible[2] + 1\n    if a_4 < w:\n        possible[3] = possible[3] + 1\n    return ''.join(map(str, possible))\n"
    },
    {
        "number": 4156,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n  def dfs(i: int, w: int):\n    nonlocal lst\n    if i == n:\n      return 1\n    if lst[i][1] >= w:\n      return lst[i][0] + dfs(i+1, w)\n    else:\n      return dfs(i+1, w)\n  \n  n = int(stdin.strip())\n  lst = []\n  for i in range(n):\n    lst.append(list(map(int, stdin.strip().split())))\n  \n  print(dfs(0, lst[0][1]))\n\n-----Constraints-----\n\n0 < n <= 10^9\n1 <= w <= 10^9\n\n------Time Limit: O(n)------\n\n------Space Limit: O(1)------\n\n\"\"\"\n\nfrom sys import stdin, setrecursionlimit\nfrom bisect import bisect\n\nsetrecursionlimit(10 ** 7)\n\ndef"
    },
    {
        "number": 4156,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, w = map(int, stdin.split())\n    a = []\n    for _ in range(n):\n        a.append(int(stdin))\n    print(a)\n    print(w)\n    \n    \n    result = 0\n    for i in range(n):\n        a[i] -= 1\n        result += a[i] * (w - a[i])\n    \n    return str(result)\n\nprint(solution(stdin))\n\n\n\ndef"
    },
    {
        "number": 4156,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, w = map(int, stdin.split())\n    a_lst = []\n    a_lst.append(0)\n    for i in range(n):\n        a_lst.append(map(int, stdin.split()))\n    a_lst.sort(reverse=True)\n    result = 0\n    for i in range(1, n+1):\n        if w - a_lst[i] >= 0:\n            result += w - a_lst[i]\n            a_lst[i] += 1\n            w -= a_lst[i]\n        else:\n            result += a_lst[i]\n            w -= a_lst[i]\n    if w == 0:\n        result += 1\n    return str(result)\n\nsolution(\"3 5\")\nsolution(\"2 4\")\nsolution(\"4 10\")"
    },
    {
        "number": 4157,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin)\n    \n    answer = []\n    \n    #\uc815\ub82c\ud55c \uacb0\uacfc\ub97c answer\uc5d0 \ub123\ub294\ub2e4\n    answer = sorted(list(map(int, stdin.split())))\n    \n    #\uac01 \uacb0\uacfc\ub97c \ud569\uce58\ub294 \ubc29\ubc95\uc744 \uc0dd\uac01\ud574\ubcf4\uc790\n    return ''.join(str(a) for a in answer)\n\n-----Solution-----\ndef"
    },
    {
        "number": 4157,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    return ''.join(map(str, list(map(lambda x: (x - 1) % 3 * 3, a))))\n\"\"\"\ndef"
    },
    {
        "number": 4157,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    l = len(arr)\n    result = ''\n    for i in range(n):\n        result += str(int(''.join(str(j) for j in arr[i:l:2])))\n        result +=''\n        arr[i:l:2] = list(map(int, str(arr[i:l:2]).split()))\n    result = ''.join(result)\n    return result\n\n-----Example 1-----\n\nInput\n3\n12345\n7\n\n\nOutput\n654321\n\nExplanation\nThe sequence is:\n12345\n1234\n21\n\nThe sequence can be rearranged to be:\n7654321\n7654321\n7654321\n7654321\n7654321\n7654321\n\nInput\n4\n123321\n3\n\n\nOutput\n3\n654321\n\nExplanation\nThe sequence is:\n123321\n124321\n3\n\nThe sequence can be rearranged to be:\n7654321\n7654321\n7654321\n7654321\n7654321\n\nInput\n2\n123\n\nOutput\n123\n\nExplanation\nThe sequence is:\n123\n12\n\nThe sequence can be rearranged to be:\n12\n123\n\nThe sequence can be rearranged to be:\n123\n321\n\n-----Solution-----\n\ndef"
    },
    {
        "number": 4157,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[-1])\n    stdin = stdin[:-1]\n    li = list(map(int, stdin))\n    for i in range(n):\n        if i % 2 == 0:\n            tmp = li[i//2]\n            li[i//2] = li[i]\n            li[i] = tmp\n    for i in li:\n        print(i)\n    return str(li[0])"
    },
    {
        "number": 4157,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    answer = ''\n    count = 0\n    for line in stdin:\n        count += 1\n        if count % 3!= 0:\n            answer += line\n    answer = answer[:3 * count]\n    answer = answer[3 * count:]\n    for i in range(len(answer) // 3):\n        answer = answer[:3 * i] + answer[3 * i:3 * (i + 1)] + answer[3 * (i + 1):]\n    print(answer)\n    return answer\n\nprint(solution(stdin))"
    },
    {
        "number": 4157,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n    def f(nums: list[int], start: int, end: int) -> list[int]:\n        if end - start == 1:\n            return [nums[start]]\n        elif end - start == 2:\n            return [nums[start] + nums[end]]\n        elif end - start == 3:\n            return [nums[start] * nums[end]]\n        elif end - start == 4:\n            return [nums[start] + nums[end] + nums[start + 1]]\n        elif end - start == 5:\n            return [nums[start] * nums[end] + nums[start + 1] * nums[start + 2]]\n        elif end - start == 6:\n            return [nums[start] + nums[end] + nums[start + 2] + nums[start + 3]]\n        elif end - start == 7:\n            return [nums[start] + nums[end] + nums[start + 2] + nums[start + 3] + nums[start + 4]]\n        elif end - start == 8:\n            return [nums[start] * nums[end] + nums[start + 2] + nums[start + 3] + nums[start + 4] + nums[start + 5]]\n        elif end - start == 9:\n            return [nums[start] + nums[end] + nums[start + 2] + nums[start + 3] + nums[start + 4] + nums[start + 5] + nums[start + 6]]\n        \n    \n    for _ in range(int(stdin.strip())):\n        nums = [int(x) for x in stdin.strip().split()]\n        nums.sort()\n        print(f(nums, 0, len(nums) - 1))"
    },
    {
        "number": 4157,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    sorted_nums = list(map(int, sorted(list(stdin.strip().split(\" \"))))[::-1])\n    max_len = max(map(len, sorted_nums))\n    output = ''\n    for i in range(max_len):\n        output += str(sorted_nums[i]) +''\n    return output.strip()\n\n\n\nExplanation\n\nInput\n2\n4 8 6 3 12 9\n\nOutput\n9 3 6 12 4 8\n\nExplanation\n\nInput\n2\n1000000000000000000 3000000000000000000\n\nOutput\n3000000000000000000 1000000000000000000 \n\nExplanation\n\nInput\n3\n42 28 84 126\n\nOutput\n126 42 84 28 \n\n\n\n-----Note-----\n\nIn the second example, the given sequence can be rearranged in the following way: $[9, 3, 6, 12, 4, 8]$. It can match possible Polycarp's game which started with $x = 9$.\n\nInput\n4\n1000000000000000000 3000000000000000000\n\nOutput\n12 16 16\n\nInput\n3\n2 1\n\nOutput\n2 1\n\nInput\n2\n1000000000000000000 3000000000000000000\n\nOutput\n1000000000000000000 3000000000000000000\n\nInput\n2\n1000000000000000000 3000000000000000000\n\nOutput\n1000000000000000000 3000000000000000000\n\nInput\n2\n1000000000000000000 3000000000000000000\n\nOutput\n2 1\n\nExplanation\n\nInput\n2\n1000000000000000000 3000000000000000000\n\nOutput\n1000000000000000000 3000000000000000000\n"
    },
    {
        "number": 4157,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    seq = list(map(int, stdin.split()))\n    answer = []\n    seq.sort()\n    cnt = 1\n    for i in range(n):\n        while cnt < 3 and cnt!= 0:\n            if seq[i] % 3!= 0:\n                seq[i] = seq[i] // 3\n                cnt += 1\n            elif seq[i] % 2 == 0:\n                seq[i] = (seq[i] - (seq[i] // 3)) * 3\n                cnt += 1\n            else:\n                break\n        answer.append(seq[i])\n        cnt = 0\n    answer = ''.join(str(x) for x in answer)\n    return answer\n"
    },
    {
        "number": 4157,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"\".join(str(i) for i in list(map(int, stdin.split())))\n"
    },
    {
        "number": 4157,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip().split()[-1])\n    seq = [int(s) for s in stdin.strip().split()[:-1]]\n    n_seq = [seq[i] for i in range(len(seq) - n)]\n    n_seq.sort()\n    return \"\".join([str(i) for i in n_seq])\n"
    },
    {
        "number": 4158,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *k = map(int, stdin)\n    d = [0]*n\n    for i in range(n):\n        d[i] = (int(k[i]))**2\n    for i in range(n-1, -1, -1):\n        for j in range(i, n):\n            if d[i] == d[j] and (d[i] <= 2**(2-j)):\n                return ['{0} {1}'.format(i, j)]\n    return ['0']\n\n\nOutput\n4\n-1\n-1\n-1\n\nExplanation\nThe subsets with maximum possible size are:\n$[0, 1, 2, 3, 4]$\n$[0, 1, 2, 3, 4, 5]$\n$[0, 1, 2, 3, 4, 5, 6]$\n$[0, 1, 2, 3, 4, 5, 6, 7]$\n$[0, 1, 2, 3, 4, 5, 6, 7, 8]$\n$[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]$\n$[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]$\n$[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]$\n$[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]$\n$[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]$\n$[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]$\n$[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]$\n$[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]$\n$[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]$\n$[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]$\n$[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]$\n$[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]$\n$[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]$\n$[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]$\n$[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]$\n$[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]$\n$[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26]$\n$[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27]$\n$[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28]$\n$[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]$\n$[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]$\n$[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]$\n$[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32]$\n$[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]$\n$[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34]$\n$[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32,"
    },
    {
        "number": 4158,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n,m = map(int,stdin.split())\n    x = list(map(int,stdin.split()))\n    return str(2**m - 2**n) + \",\".join([str(x[i]) for i in range(m)])\n-----Constraints-----\n1 <= n <= 10^5\n1 <= m <= 10^5\n0 <= x[i] <= 10^9\n\nTime Limit: 1 sec\nSpace Limit: 40 sec\n\nFollow up: Does the syntax match the input?\n\n'''\n"
    },
    {
        "number": 4158,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, ans = map(int, stdin.split())\n    x = map(int, stdin.split())\n    x = sorted(x)\n    d = 2 ** 9\n    p = 1\n    for i in range(len(x)):\n        while x[i] - x[i + 1] < 2 ** (d - 1):\n            x[i] += 2 ** p\n            p += 1\n        if x[i] - x[i + 1] < 2 ** (d - 1):\n            ans += 1\n    return str(ans)"
    },
    {
        "number": 4158,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(int(stdin.strip())):\n        x, y = map(int, stdin.split())\n        if 2**i < abs(x-y):\n            continue\n        print(2**i-2)\n        break\n    return 'Yes'\n\n\nExplanation\n\nFor example, if we want to calculate the smallest possible set of points such that $|x_{i_1} - x_{i_2}| = 2^d$, the function could be written as:\n\ndef"
    },
    {
        "number": 4158,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    answer = ''\n    for i in range(1, n + 1):\n        answer += str(sum([2 ** j for j in range(i)])) +''\n    print(answer)\n    answer = [i +'' for i in answer.split(' ') if i!= '']\n    answer = sorted(answer, key = lambda x: (x.split(' ')[0], x.split(' ')[1]))\n    print(answer[::-1])\n    return answer[::-1]"
    },
    {
        "number": 4158,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    points = []\n    for _ in range(n):\n        x, y = map(int, stdin.split())\n        points.append(x)\n        points.append(y)\n    \n    ans = []\n    for i in range(n):\n        if any(x == points[j] for j in range(i+1, n)):\n            ans.append(i)\n    ans.sort()\n    for i in ans:\n        print(i)"
    },
    {
        "number": 4158,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n\n    x = list(map(int, stdin.strip().split()))\n    y = []\n    for i in range(n):\n        if i!= 0:\n            if x[i] > x[i - 1]:\n                y.append(x[i])\n        else:\n            y.append(x[i])\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if x[i] > x[j]:\n                y.append(x[i])\n\n    y.sort()\n    x = [y[i] - y[j] for i, j in zip(range(n), range(n))]\n    print(*x)\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4158,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    \n    coordinates = [[int(x) for x in input().strip().split()] for _ in range(n)]\n    \n    n, m = len(coordinates), 0\n    \n    for i in range(1, n):\n        for j in range(i):\n            d = abs(coordinates[i][0] - coordinates[j][0]) + abs(coordinates[i][1] - coordinates[j][1])\n            if d < 2 ** n - 1:\n                m = max(m, j + 1)\n    \n    if m == 0:\n        return '1'\n    \n    return str(m)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4158,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    stdin = stdin.strip().split()\n    x = [int(num) for num in stdin[1:]]\n    x.sort()\n    y = [int(num) for num in stdin[1:]]\n    x.append(1)\n    y.append(1)\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in range(1, n + 1):\n        for j in range(i):\n            if x[j] - x[i] < 2 ** i:\n                dp[i] = dp[i] + 1\n    return str(dp[n])\n\ndef"
    },
    {
        "number": 4158,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n,*x = map(int, stdin.split())\n    return str(max([x.count(i) for i in x]))\n\n[7, 3, 5]"
    },
    {
        "number": 4159,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n  k = int(stdin)\n  a = 0\n  b = 0\n  for i in range(k):\n    a, b = map(int, input().split())\n  if a > b:\n    a, b = b, a\n  c = 0\n  for i in range(k):\n    c += 1\n  return str(c)"
    },
    {
        "number": 4159,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A = int(stdin[0])\n    B = int(stdin[1])\n    K = int(stdin[2])\n    \n    K = max(K,A)\n    K = min(K,B)\n    \n    takahashi_cookies = 0\n    aoki_cookies = 0\n    \n    for i in range(K):\n        if A!= B:\n            takahashi_cookies += 1\n        else:\n            aoki_cookies += 1\n            \n    return str(takahashi_cookies) +'' + str(aoki_cookies)\n"
    },
    {
        "number": 4159,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n    cnt = 0\n    for _ in range(K):\n        if A < B:\n            A += 1\n        else:\n            B -= 1\n        cnt += A\n    print(cnt)\n    return \"0\" if cnt % 2!= 0 else \"1\"\n'''\n\nimport math\n\ndef"
    },
    {
        "number": 4159,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n\n    if A == 0 or B == 0:\n        return '0'\n\n    return str(A * B * K)"
    },
    {
        "number": 4159,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    K = int(stdin.split()[1])\n    answer = []\n    while K > 0:\n        if A == 0:\n            answer.append(B)\n            A -= 1\n        elif B == 0:\n            answer.append(A)\n            B -= 1\n        elif A > 0 and B > 0:\n            answer.append(A)\n            A -= 1\n            answer.append(B)\n            B -= 1\n        else:\n            answer.append(A)\n            A -= 1\n        K -= 1\n    return \" \".join(map(str, answer))\n"
    },
    {
        "number": 4159,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    K = int(stdin.split()[1])\n    def eaten_cookies(A, B):\n        count = 0\n        for i in range(A):\n            if B == 0:\n                break\n            if B == 1:\n                B -= 1\n                count += 1\n            else:\n                B -= 1\n                count += 1\n                if count >= K:\n                    count = 0\n                    B = 1\n        return count\n    Aoki_cookies = eaten_cookies(A, B)\n    Takahashi_cookies = eaten_cookies(A, B)\n    print(str(Aoki_cookies) + str(Takahashi_cookies))\n    return \"\"\n'''\n\ndef"
    },
    {
        "number": 4159,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n    Aoki = K - A - B\n    Takahashi = A - B\n    if Aoki >= K:\n        print(Aoki)\n    else:\n        print(Aoki, \"*\")\n    return \"\"\n\ndef"
    },
    {
        "number": 4159,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n    def dfs(i):\n        if i == K:\n            return 0\n        return max(0, A - A // i) + dfs(i + 1)\n    return str(dfs(0))\n\ndef"
    },
    {
        "number": 4159,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n    a, b = 0, 0\n    for i in range(K):\n        a += (A - 1)\n        b += (B - 1)\n        if a < 0:\n            a = 10 ** 9\n        if b < 0:\n            b = 10 ** 9\n        if a < b:\n            a, b = b, a\n        a -= 1\n        b -= 1\n    return str(a) + str(b)\n\n###\uc544\uc2a4\ud0a4 \ucf54\ub4dc\nimport string\ndef"
    },
    {
        "number": 4159,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = list(map(int, stdin.split()))\n    count = A + B\n    if count == K:\n        return \"0\"\n    else:\n        return str(count)\n"
    },
    {
        "number": 4160,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    money = int(stdin)\n    money = str(money)\n    answer = 0\n    for year in range(0, money + 1):\n        answer += (money / (year + 1))\n    return str(int(answer))\n\n-----Explanation-----\nThe interest rate is 1 % and the years is 3.\nIn the first year, the balance reaches 101 yen or above, so the answer becomes 3.\nThe second year, the balance reaches 102 yen or above, so the answer becomes 3.\nThe third year, the balance reaches 103 yen or above, so the answer becomes 1.\nThere are no more years, so the answer is 0.\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4160,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n  X = int(stdin)\n  m = 0\n  for i in range(1,X+1):\n    if m >= X:\n      break\n    if i % 10 == 0:\n      m += 1\n    elif m > 10:\n      break\n  return str(m)\n"
    },
    {
        "number": 4160,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n  cnt = 0\n  while True:\n    num = int(stdin)\n    if num == 0:\n      break\n    if num < 10:\n      cnt += 1\n    else:\n      cnt -= 1\n  print(cnt)\n  return str(cnt)"
    },
    {
        "number": 4160,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    balance = int(stdin.split()[1])\n    print(round(balance/100))\n    return '1'\n"
    },
    {
        "number": 4160,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   n=int(stdin[0])\n   X=int(stdin[1])\n   n+=100\n   def f(y,x):\n      if x==X: return 0\n      return int(y/x)\n   for i in range(n):\n      print(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f(f"
    },
    {
        "number": 4160,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n      X = int(stdin)\n      if X < 101:\n        return str(1)\n      elif X < 101*2:\n        return str(2)\n      elif X < 101*3:\n        return str(3)\n      else:\n        return str(int(X/100))\n      \n"
    },
    {
        "number": 4160,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin)\n    if n < 101:\n        return str(n)\n    else:\n        return solution(str(n//100)+\"1\"+str(n//10)+\"1\")\n\n\ndef"
    },
    {
        "number": 4160,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = 100\n    for i in range(n):\n        a = a + 100 - 100 * (1 + (i % 10) / 10)\n    return str(round(a / a % 10))\n-----Constraints-----\n -  1 \\le X \\le 10^{18}\n - 10 \\le 10^{14}\n - 0 < X < 10^14\n - 0 < Y < 10^14\n - X \\le 10^14\n - 10^14 < Y < 10^14\n-----Input-----\nInput is given from STDIN.\nOutput is according to Input.\n\n-----Sample Input-----\n102\n\n-----Sample Output-----\n3\n\n-----Constraints-----\n -  1 \\le X \\le 10^{18}\n - 10 \\le 10^{14}\n - 0 < X < 10^14\n - 0 < Y < 10^14\n - X \\le 10^14\n - 10^14 < Y < 10^14\n\ndef"
    },
    {
        "number": 4160,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n  n, X = map(int, stdin.split())\n  years = len(str(X))\n  if years < 10:\n    print(0)\n  elif years < 100:\n    print(years)\n  else:\n    dp = [0 for i in range(100)]\n    dp[1] = 1\n    dp[2] = 1\n    for i in range(3, 100):\n      dp[i] = (dp[i-2] + dp[i-1]) % 10\n      if X == dp[i-1]:\n        years -= 1\n      if years == 0:\n        break\n    print(years)\n\n\n\n-----Sample Input-----\n103\n\n-----Sample Output-----\n3\n\n - The balance after one year is 101 yen.\n - The balance after two years is 102 yen.\n - The balance after three years is 103 yen.\nThus, it takes three years for the balance to reach 103 yen or above.\ndef"
    },
    {
        "number": 4160,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin.strip().split()[0])\n    n = int(stdin.strip().split()[1])\n    print(solution2(X, n))\n"
    },
    {
        "number": 4161,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    answer = 0\n    for i in range(n):\n        a,b,c = map(int,stdin.split(\" \"))\n        answer += max(a,b,c)\n    return str(answer)\n\ndef"
    },
    {
        "number": 4161,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    answer = ''\n    k = int(stdin[0])\n    for i in range(k, 201):\n        if i % 2 == 0:\n            answer += str(int(stdin[i]) % int(stdin[i-1]))\n        else:\n            answer += str(int(stdin[i]) % int(stdin[i-1])) + str(int(stdin[i]) % int(stdin[i-1]))\n    return answer\nprint(solution(stdin))\nInput:\n12\nOutput:\n9\n\nExplanation:\nThe greatest common divisor of 2 and 12 is 2, since their are two numbers which are divisible by 2.\nThe greatest common divisor of 3 and 7 is 6, since their are three numbers which are divisible by 3 and 7.\nThe greatest common divisor of 5 and 11 is 5, since their are five numbers which are divisible by 5 and 11.\nThe greatest common divisor of 3 and 14 is 1, since their are three numbers which are divisible by 3 and 14.\nThe greatest common divisor of 5 and 16 is 5, since their are five numbers which are divisible by 5 and 16.\nThe greatest common divisor of 3 and 17 is 2, since their are three numbers which are divisible by 3 and 17.\nThe greatest common divisor of 5 and 18 is 1, since their are five numbers which are divisible by 5 and 18.\nThe greatest common divisor of 3 and 19 is 4, since their are three numbers which are divisible by 3 and 19.\nThe greatest common divisor of 5 and 20 is 2, since their are five numbers which are divisible by 5 and 20.\nThe greatest common divisor of 3 and 21 is 1, since their are three numbers which are divisible by 3 and 21.\nThe greatest common divisor of 5 and 22 is 2, since their are five numbers which are divisible by 5 and 22.\nThe greatest common divisor of 3 and 23 is 1, since their are three numbers which are divisible by 3 and 23.\nThe greatest common divisor of 5 and 24 is 4, since their are five numbers which are divisible by 5 and 24.\nThe greatest common divisor of 3 and 25 is 2, since their are three numbers which are divisible by 3 and 25.\nThe greatest common divisor of 5 and 26 is 1, since their are five numbers which are divisible by 5 and 26.\nThe greatest common divisor of 3 and 27 is 2, since their are three numbers which are divisible by 3 and 27.\nThe greatest common divisor of 5 and 28 is 1, since their are five numbers which are divisible by 5 and 28.\nThe greatest common divisor of 3 and 29 is 2, since their are three numbers which are divisible by 3 and 29.\nThe greatest common divisor of 5 and 30 is 1, since their are five numbers which are divisible by 5 and 30.\nThe greatest common divisor of 3 and 31 is 2, since their are three numbers which are divisible by 3 and 31.\nThe greatest common divisor of 5 and 32 is 1, since their are five numbers which are divisible by 5 and 32.\nThe greatest common divisor of 3 and 33 is 2, since their are three numbers which are divisible by 3 and 33.\nThe greatest common divisor of 5 and 34 is 1, since their are five numbers which are divisible by 5 and 34.\nThe greatest common divisor of 3 and 35 is 1, since their are three numbers which are divisible by 3 and 35.\nThe greatest common divisor of 5 and 36 is 2, since their are five numbers which are divisible by 5 and 36.\nThe greatest common divisor of 3 and 37 is 1, since their are three numbers which are divisible by 3 and 37.\nThe greatest common divisor of 5 and 38 is 2, since their are five numbers which are divisible by 5 and 38.\nThe greatest common divisor of 3 and 39 is 1, since their are three numbers which are divisible by 3 and 39.\nThe greatest common divisor of 5 and 40 is 2, since their are five numbers which are divisible by 5 and 40.\nThe greatest common divisor of 3 and 41 is 1, since their are three numbers which are divisible by 3 and 41.\nThe greatest common divisor of 5 and 42 is 2, since their are five numbers which are divisible by 5 and 42.\nThe greatest common divisor of 3 and 43 is 1, since their are three numbers which are divisible by 3 and 43.\nThe greatest common divisor of 5 and 44 is 1, since their are five numbers which are divisible by 5 and 44.\nThe greatest common divisor of 3 and 45 is 2, since their are three numbers which are divisible by 3 and 45.\nThe greatest common divisor of 5 and 46 is 1, since their are five numbers which are divisible by 5 and 46.\nThe greatest common divisor of 3 and 47 is 1, since their are three numbers which are divisible by 3 and 47.\nThe greatest common divisor of 5 and 48 is 2, since their are five numbers which are divisible by 5 and 48.\nThe greatest common divisor of 3 and 49 is 1, since their are three numbers which are divisible by 3 and 49.\nThe greatest common divisor of 5 and 50 is 1, since their are five numbers which are divisible by 5 and 50.\nThe greatest common divisor of 3 and 51 is 2, since their are three numbers which are divisible by 3 and 51.\nThe greatest common divisor of 5 and 52 is 1, since their are five numbers which are divisible by 5 and 52.\nThe greatest common divisor of 3 and 53 is 2, since their are three numbers which are divisible by 3 and 53.\nThe greatest common divisor of 5 and 54 is 1, since their are five numbers which are divisible by 5 and 54.\nThe greatest common divisor of 3 and 55 is 1, since their are three numbers which are divisible by 3 and 55.\nThe greatest common divisor of 5 and 56 is 2, since their are five numbers which are divisible by 5 and 56.\nThe greatest common divisor of 3 and 57 is 1, since their are three numbers which are divisible by 3 and 57.\nThe greatest common divisor of 5 and 58 is 1, since their are five numbers which are divisible by 5 and 58.\nThe greatest common divisor of 3 and 59 is 1, since their are three numbers which are divisible by 3 and 59.\nThe greatest common divisor of 5 and 60 is 1, since their are five numbers which are divisible by 5 and 60.\nThe greatest common divisor of 3 and 61 is 2, since their are three numbers which are divisible by 3 and 61.\nThe greatest common divisor of 5 and 62 is 1, since their are five numbers which are divisible by 5 and 62.\nThe greatest common divisor of 3 and 63 is 1, since their are three numbers which are divisible by 3 and 63.\nThe greatest common divisor of 5 and 64 is 1, since their are five numbers which are divisible by 5 and 64.\nThe greatest common divisor of 3 and 65 is 2, since their are three numbers which are divisible by 3 and 65.\nThe greatest common divisor of 5 and 66 is 1, since their are five numbers which are divisible by 5 and 66.\nThe greatest common divisor of 3 and 67 is 1, since their are three numbers which are divisible by 3 and 67.\nThe greatest common divisor of 5 and 68 is 1, since their are five numbers which are divisible by 5 and 68.\nThe greatest common divisor of 3 and 69 is 2, since"
    },
    {
        "number": 4161,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    K, *_ = map(int, stdin)\n    if K == 1:\n        return \"1\"\n    else:\n        gcd_arr = [0 for _ in range(K+1)]\n        for i in range(2,K+1):\n            gcd_arr[i] = gcd_arr[i-1] % i\n        for i in range(2,K+1):\n            gcd_arr[i] += gcd_arr[i-2] % i\n        return str(gcd_arr[K])\n"
    },
    {
        "number": 4161,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(math.gcd(int(stdin[1]),int(stdin[2]))))\n\n\n\nA. Tambah\n\nInput:\n1 2 3\n\nOutput:\n1 3\n\"\"\"\ndef"
    },
    {
        "number": 4161,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin.split()[0])\n    K = K-1\n    N = int(stdin.split()[1])\n    result = []\n    for i in range(K,N+1):\n        if K%i == 0:\n            result.append(i)\n    result.sort()\n    for i in result:\n        print(i,end=' ')\n    return''.join(map(str,result))"
    },
    {
        "number": 4161,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\nclass Solution:\n    def gcd(self, a, b):\n        if b == 0:\n            return a\n        else:\n            return self.gcd(b, a % b)\n    def __init__(self):\n        pass\n    def solution(self, stdin):\n        pass"
    },
    {
        "number": 4161,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(str(int(stdin)**0.5) + str(int(stdin)**1.5)))"
    },
    {
        "number": 4161,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    a, b, c = map(int, stdin.split())\n    GCD = gcd(a, b, c)\n    if K > N:\n        print(0)\n        return\n    if K == N:\n        print(GCD)\n        return\n    if K == N-1:\n        print(GCD)\n        return\n    if K == 2*N:\n        print(GCD)\n        return\n\n    gcd = [0] * (K+1)\n    gcd[1] = 1\n    gcd[2] = 1\n    gcd[K] = K\n\n    for i in range(3, K+1):\n        gcd[i] = gcd[i-1] + gcd[i-2]\n    \n    for i in range(3, K+1):\n        print(gcd[i] % GCD)\n    \n\ndef"
    },
    {
        "number": 4161,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    K, *c, *r = map(int, stdin.split())\n    answer = sum(max(c, r)) - min(c, r)\n    return str(answer)\n\n-----Examples-----\nex1\nK=2\nInput\n2\nOutput\n9\nExplanation\nFor example, given:\n1\n1\n1\nOutput\n9\nExplanation\nSince, the gcd is 2, so the answer is 9.\n\nex2\nK=2\nInput\n2\nOutput\n3\nExplanation\nSince, the gcd is 2, so the answer is 3.\n\nex3\nK=3\nInput\n4\nOutput\n8\nExplanation\nSince, the gcd is 3, so the answer is 8.\n'''\n\nclass Solution:\n    def solution(self, K: int, nums: List[int]) -> str:\n        if not nums or K==1:\n            return str(nums[0])\n        return str(sum(nums[:K]))+str(max(nums[:K]))+str(sum(nums[:K]))+str(min(nums[:K]))\n\nK = int(input())\nlst = list(map(int, input().split()))\nprint(Solution().solution(K,lst))"
    },
    {
        "number": 4161,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin.strip())\n\n    if K > 200:\n        return \"ERROR\"\n    elif K == 1:\n        return \"1\"\n    elif K == 2:\n        return \"1\"\n    elif K == 3:\n        return \"1\"\n    elif K == 4:\n        return \"1\"\n    elif K == 5:\n        return \"1\"\n    elif K == 6:\n        return \"1\"\n    elif K == 7:\n        return \"1\"\n    elif K == 8:\n        return \"1\"\n    elif K == 9:\n        return \"1\"\n    else:\n        return \"ERROR\"\n"
    },
    {
        "number": 4162,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(i) for i in stdin.split()]\n    def solution1(a):\n        if not a:\n            return []\n        if len(a) == 1:\n            return [a[0]]\n        maxi = a[0]\n        temp = solution1(a[1:])\n        for i in range(len(temp)):\n            if a[i] > maxi:\n                maxi = a[i]\n        return [maxi] + temp\n    return str(solution1(a))\n\n-----Sample Output-----\n3\n8\n5\n10\n\n-----Sample Input-----\n1\n2\n3\n4\n5\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n214\n215\n216\n217\n218\n219\n220\n221\n222\n223\n224\n225\n226\n227\n228\n229\n230\n231\n232\n233\n234\n235\n236\n237\n238\n239\n240\n241\n242\n243\n244\n245\n246\n247\n248\n249\n250\n251\n252\n253\n254\n255\n256\n257\n258\n259\n260\n261\n262\n263\n264\n265\n266\n267\n268\n269\n270\n271\n272\n273\n274\n275\n276\n277\n278\n279\n280\n281\n282\n283\n284\n285\n286\n287\n288\n289\n290\n291\n292\n293\n294\n295\n296\n297\n298\n299\n300\n301\n302\n303\n304\n305\n306\n307\n308\n309\n310\n311\n312\n313\n314\n315\n316\n317\n318\n319\n320\n321\n322\n323\n324\n325\n326\n327\n328\n329\n330\n331\n332\n333\n334\n335\n336\n337\n338\n339\n340\n341\n342\n343\n344\n345\n346\n347\n348\n349\n350\n351\n352\n353\n354\n355\n356\n357\n358\n359\n360\n361\n362\n363\n364\n365\n366\n367\n368\n369\n370\n371\n372\n373\n374\n375\n376\n377\n378\n379\n380\n381\n382\n383\n384\n385\n386\n387\n388\n389\n390\n391\n392\n393\n394\n395\n396\n397\n398\n399\n400\n401\n402\n403\n404\n405\n406\n407\n408\n409\n410\n411\n412\n413\n414\n415\n416\n417\n418\n419\n420\n421\n422\n423\n424\n425\n426\n427\n428\n429\n430\n431\n432\n433\n434\n435\n436\n437\n438\n439\n440\n441\n442\n443\n444\n445\n446\n447\n448\n449\n450\n451\n452\n453\n454\n455\n456\n457\n458\n459\n460\n461\n462\n463\n464\n465\n466\n467\n468\n469\n470\n471\n472\n473\n474\n475\n476\n477\n478\n479\n480\n481\n482\n483\n484\n485\n486\n487\n488\n489\n490\n491\n492\n493\n494\n495\n496\n497\n498\n499\n500\n501\n502\n503\n504\n505\n506\n507\n508\n509\n510\n511\n512\n513\n514\n515\n516\n517\n518\n519\n520\n521\n522\n523\n524\n525\n526\n527\n528\n529\n530\n531\n532\n533\n534\n535\n536\n537\n538\n539\n540\n541\n542\n543\n544\n545\n546\n547\n548\n549\n550\n551\n552\n553\n554\n555\n556\n557\n558\n559\n560\n561\n562\n563\n564\n565\n566\n567\n568\n569\n570\n571\n572\n573\n574\n575\n576\n577\n578\n579\n580\n581\n582\n583\n584\n585\n586\n587\n588\n589\n590\n591\n592\n593\n594\n595\n596\n597\n598\n599\n600\n601\n602\n603\n604\n605\n606\n607\n608\n609\n610\n611\n612\n613\n614\n615\n616\n617\n618\n619\n620\n621\n622\n623\n624\n625\n626\n627\n628\n629\n630\n631\n632\n633\n634\n635\n636\n637\n638\n639\n640\n641\n642\n643\n644\n645\n646\n647\n648\n649\n650\n651\n652\n653\n654\n655\n656\n657\n658\n659\n660\n661\n662\n663\n664\n665\n666\n667\n668\n669\n670\n671\n672\n673\n674\n675\n676\n677\n678\n679\n680\n681\n682\n683\n684\n685\n686\n687\n688\n689\n690\n691\n692\n693\n694\n695\n696\n697\n698\n699\n700\n701\n702\n703\n704\n705\n706\n707\n708\n709\n710\n711\n712\n713\n714\n715\n716\n717\n718\n719\n720\n721\n722\n723\n724\n725\n726\n727\n728\n729\n730\n731\n732\n733\n734\n735\n736\n737\n738\n739\n740\n741\n742\n743\n744\n745\n746\n747\n748\n749\n750\n751\n752\n753\n754\n755\n756\n757\n758\n759\n760\n761\n762\n763\n764\n765\n766\n767\n768\n769\n770\n771\n772\n773\n774\n775\n776\n777\n778\n779\n780\n781\n782\n783\n784\n785\n786\n787\n788\n789\n790\n791\n792\n793\n794"
    },
    {
        "number": 4162,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    return max(a)"
    },
    {
        "number": 4162,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, m = [int(i) for i in stdin.split()]\n    X, Y = [int(i) for i in stdin.split()]\n    # print(X,Y)\n    # print(m)\n    print(((m\\ mod\\ X) + (m\\ mod\\ Y)) % (10**6))\n    # print(m)\n    pass"
    },
    {
        "number": 4162,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    m = -1\n    max_value = 0\n    for i in range(1, n + 1):\n        if (i % 2!= 0):\n            max_value = max(max_value, (n % i) + (n % (i + 1)))\n        else:\n            max_value = max(max_value, (n % i) + (n % (i + 1)))\n    print(max_value)\nsolution(inp)\n\"\"\"\n\ndef"
    },
    {
        "number": 4162,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int,stdin.split()))\n    answer = []\n    for i in range(n):\n        answer.append(f(a[i]))\n    return \"\".join(answer).rstrip(\".\")\n\ndef"
    },
    {
        "number": 4162,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.rstrip())\n    mod = 998244353\n    cnt = 0\n    \n    for i in range(1, n+1):\n        cnt += pow(10, i)\n        \n    for _ in range(n):\n        a = int(stdin.rstrip()) % cnt\n        print(a)\n    \n    return str(cnt-a)"
    },
    {
        "number": 4162,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return str(max(map(lambda x: (int(x) % 3) + int(x % 3), stdin.split(' '))))\n\ndef"
    },
    {
        "number": 4162,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    mod = 10**9+7\n    print(mod-sum([(mod//i)%mod for i in range(2,n+1)]))\n"
    },
    {
        "number": 4162,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, *a = map(int, stdin.split())\n    return str(max(a))\n\nInput\n3\n1 2 3\n\nOutput\n8\n\nExplanation\n1 + 2 + 3 = 8 is the maximum value of f.\n"
    },
    {
        "number": 4162,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n  s = stdin[:]\n  \n  for n in range(len(s)):\n    s[n] = int(s[n])\n\n  for i in range(int(len(s)/2)):\n    j = (i+len(s)//2)\n    k = (i+len(s)//2)\n    s[i],s[j] = s[j],s[i]\n    s[i],s[k] = s[k],s[i]\n  \n  s[-1] = s[-1] + (s[-2]%s[-1])\n  \n  return str(s[-1])\n\"\"\"\n\nclass Solution:\n    def maxFrequency(self, s: str, n: int) -> str:\n        \n        \n        s = list(s)\n        \n        for i in range(len(s)):\n            s[i] = int(s[i])\n        \n        for i in range(n-1, -1, -1):\n            if s[i] % s[i+1] == 0:\n                return str(i+1)\n        \n        return '0'\n"
    },
    {
        "number": 4163,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    d1,d2=map(int,stdin.split())\n    # print(d1,d2)\n    D = [0,0,0]\n    N = len(d1)\n    for i in range(N):\n        for j in range(i+1,N):\n            # print(i,j)\n            # print(d1[i],d1[j])\n            D[i] = max(D[i],d2[i] - d2[j])\n            D[j] = max(D[j],d2[i] - d2[j])\n            # print(D[i],D[j])\n    # print(D)\n    if D[0] == D[1] or D[0] == D[2] or D[1] == D[2]:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4163,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, D = [int(item) for item in stdin.split(' ')]\n    rolls = list(map(int, stdin.split(' ')))\n    for i in range(1, N+1):\n        for j in range(i-1):\n            if D[i-1]!= D[j] and (D[i-1] == 6 or D[j] == 6):\n                return 'Yes'\n    return 'No'\n\n-----Sample Output-----\nYes\n'''\n"
    },
    {
        "number": 4163,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, *dices = map(int, stdin.split())\n    D = list(map(int, [*map(int, list(stdin.split()))]))\n    \n    # Roll two dice\n    for i in range(1, N-2):\n        if (D[i+1] + D[i+2]) == max(D[i+1], D[i+2]) + 1:\n            return \"Yes\"\n    \n    return \"No\""
    },
    {
        "number": 4163,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(int(stdin[1])):\n        d = [int(x) for x in stdin[i+2].split()]\n        if d[0] == d[1] or d[0] == d[2]:\n            if d[0] == d[1]:\n                return \"No\"\n            else:\n                return \"Yes\"\n    return \"Yes\""
    },
    {
        "number": 4163,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    N_list = [int(i) for i in stdin.split()]\n    N_list.sort()\n    for _ in range(3):\n        if N_list.count(N_list[0]) > N_list.count(N_list[1]):\n            return 'No'\n        elif N_list.count(N_list[0]) == N_list.count(N_list[1]):\n            if N_list[0] < N_list[1]:\n                N = N_list[0]\n            else:\n                N = N_list[1]\n        else:\n            N = N_list[1]\n    return 'Yes'\n"
    },
    {
        "number": 4163,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    D1, D2 = [int(i) for i in stdin.split()]\n    doublets = 0\n    for i in range(1,N+1):\n        doublets += (D1 + D2) - (i - 1) * (D1 + D2)\n        if doublets == 0:\n            return 'Yes'\n    return 'No'"
    },
    {
        "number": 4163,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, D = map(int, stdin.split())\n    result = ''\n    doublets = 0\n    for i in range(N - 3):\n        j = i + 1\n        while j < N:\n            if D[j] == D[j + 1] and D[j + 2] == D[j + 3]:\n                doublets += 1\n                result += 'Yes'\n                break\n            else:\n                result += 'No'\n                j += 1\n    result += 'Yes' if doublets >= 3 else 'No'\n    return result\n\n2\n1 2\n6 6\n4 4\n3 3\n3 2\n\n\"\"\"\n\nclass Solution:\n    def singleNumbers(self, nums: List[int]) -> List[int]:\n        result = []\n        single = {}\n        for i in range(len(nums)):\n            if nums[i] not in single:\n                single[nums[i]] = i\n            else:\n                single[nums[i]] = i\n        for i in single:\n            result.append(i)\n        return result\n    \n    \n    def singleNumbers(self, nums: List[int]) -> List[int]:\n        \n        result = []\n        num2single = {}\n        num2single[0] = 0\n        for i in range(len(nums)):\n            if nums[i] not in num2single:\n                num2single[nums[i]] = i\n            else:\n                num2single[nums[i]] = i\n        for i in num2single:\n            result.append(i)\n        return result\n    \n    \n    def singleNumbers(self, nums: List[int]) -> List[int]:\n        \n        result = []\n        # get the length of the list\n        length = len(nums)\n        # make the first step:\n        # find the first two element that can be used as a pair\n        # and then append the pair in the list.\n        # else, for a pair that is only in one of the lists, it does not need to be added.\n        #\n        # N is the length of the list, therefore we can take the odd numbers in the list.\n        #\n        # Now we will loop through the odd numbers in the list\n        # and find the first two numbers that can be used as a pair.\n        # We will keep a count of the count of such pairs.\n        # If the count equals to two, append a pair to the result list.\n        #\n        # When the count reaches the length of the list, we will remove the pair from the list\n        # and append it to the result list.\n        #\n        # At the end of the loop, we'll find the second number that does not need to be added\n        # to the list.\n        \n        \n        for i in range(length // 2):\n            j = 2 * i\n            if nums[i] > nums[j] and i < length - 1:\n                result.append((nums[i], nums[j]))\n                \n        #print(f'The result is {result}')\n        #print(f'The result is {result}')\n        \n        return result\n\n\n    def singleNumbers(self, nums: List[int]) -> List[int]:\n        result = []\n        for i in range(len(nums)):\n            if i % 2 == 0:\n                result.append(nums[i])\n            else:\n                result.append(nums[nums[i] - 1])\n        return result\n    \n    \n    def singleNumbers(self, nums: List[int]) -> List[int]:\n        result = []\n        \n        for i in range(len(nums)):\n            if nums[i] > nums[(i + 1) % len(nums)]:\n                result.append(nums[i])\n            elif nums[i] == nums[(i + 1) % len(nums)]:\n                if i % 2 == 0:\n                    result.append(nums[i])\n                else:\n                    result.append(nums[(i + 1) % len(nums)])\n        return result"
    },
    {
        "number": 4163,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    lst = list(map(int, stdin.split()))\n    result = 0\n    doublets = 0\n    for i in range(N):\n        D1, D2 = lst[i*2], lst[i*2+1]\n        if D1 <= 6 or D2 <= 6:\n            result += 1\n            doublets += 1\n        else:\n            result += 0\n            doublets += 0\n        lst[i*2], lst[i*2+1] = D2, D1\n    if doublets >= 3:\n        result += 1\n    return 'Yes' if result >= 1 else 'No'\n\n\"\"\"\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        N = int(stdin)\n        lst = list(map(int, stdin.split()))\n        result = 0\n        doublets = 0\n        for i in range(N):\n            D1, D2 = lst[i*2], lst[i*2+1]\n            if D1 <= 6 or D2 <= 6:\n                result += 1\n                doublets += 1\n            else:\n                result += 0\n                doublets += 0\n            lst[i*2], lst[i*2+1] = D2, D1\n        if doublets >= 3:\n            result += 1\n        return 'Yes' if result >= 1 else 'No'\n\n\"\"\"\n"
    },
    {
        "number": 4163,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    numbers = [int(x) for x in stdin.split()]\n    doublets = [numbers[i+1] - numbers[i] for i in range(N-2)]\n    print(doublets.count(min(doublets)) > 2)\n"
    },
    {
        "number": 4163,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    D = [[0 for _ in range(N)] for _ in range(N)]\n    dices = [0,0,0,0]\n    for i in range(N):\n        s = stdin.strip().split(' ')\n        if len(s) == 4:\n            if s[0] == '0':\n                s[1] = '0'\n            if s[1] == '0':\n                s[2] = '0'\n            if s[2] == '0':\n                s[3] = '0'\n        dices[int(s[0]) - 1] = int(s[1]) - int(s[2]) - int(s[3])\n        D[int(s[1]) - 1][int(s[2]) - 1] = D[int(s[1]) - 1][int(s[2]) - 1] + 1\n    answer = ''\n    for i in range(N):\n        if dices[i] > 1:\n            answer += 'Yes'\n        elif dices[i] == 1:\n            answer += 'Yes'\n        else:\n            answer += 'No'\n    return answer\n\nInput:\n5\n0 1\n0 0\n0 0\n0 0\n\nOutput:\nNo\nYes\nYes\nYes\nNo\n\nExplanation:\nWith N = 5 and dices = [0,0,0,0,0],\nthe last roll will be: (1+0), (1+0), (0+0), (0+0), (0+0)\nSo the answer is: Yes.\n\"\"\"\nimport itertools\n\nn, d = map(int, input().strip().split())\nl = []\n\nfor i in range(n):\n    l.append(int(input()))\n\nresult = 0\nfor i in itertools.permutations(l):\n    for j in i:\n        if j + d in l:\n            result += 1\n\nprint(result)\n"
    },
    {
        "number": 4164,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n  r, *_ = map(int, stdin)\n  return str(int(r/2)//2)\n\n-----Expected Output-----\n4\nExplanation\n\nThe area of a circle of radius 2 is 4 times larger than the area of a circle of radius 1.\n1\n2\n3\n\nExplanation\n\nThe area of a circle of radius 2 is 4 times larger than the area of a circle of radius 1.\n4\n"
    },
    {
        "number": 4164,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def area(r):\n        area = 4 * 3.14 * ((r ** 2) - 1)\n        return area\n    \n    r = int(stdin)\n    return str(area(r))"
    },
    {
        "number": 4164,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.split()\n    r = int(line[0])\n    if r == 1:\n        print(0)\n    else:\n        print(int(line[0]) * int(r))\n\nRuntime: 32 ms, faster than 53.15% of Python3 online submissions for Area of a Circle.\nMemory Usage: 20 MB, less than 100.00% of Python3 online submissions for Area of a Circle.\n"
    },
    {
        "number": 4164,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n  area = 0\n  for i in range(1, int(stdin.split()[1])+1):\n    area += 2*(i**(2*i+1))/((i+1)**2)\n  return str(round(area,2))\n\n----------------------------------------------------------------------------------------------------------------------\n1\nr=10\nprint(solution(stdin))\n"
    },
    {
        "number": 4164,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    r = int(stdin[0])\n    answer = str(math.factorial(r))\n    print(answer)\n    return answer\n\nn = int(input())\nfor _ in range(n):\n    n = input()\n    print(solution(n))\n\n\"\"\"\ndef"
    },
    {
        "number": 4164,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return str(round(int(stdin) / (int(stdin) + int(stdin))))\n"
    },
    {
        "number": 4164,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin[0])\n    b = int(stdin[1])\n    if a > 1 and b > 1:\n        return str(a * b)\n    return '0'\n\n---Leetcode solved this one---\ndef"
    },
    {
        "number": 4164,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = list(map(int, stdin.split()))\n    x, y = 0, 0\n    for i in s:\n        x += i*(2**y)\n        y += 1\n    return str(int(x/y))\n"
    },
    {
        "number": 4164,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    pass\n\ndef"
    },
    {
        "number": 4164,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n"
    },
    {
        "number": 4165,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip().split()[0])\n    L = list(map(int,stdin.strip().split()[1:]))\n    L.sort()\n    for i in range(1,len(L),2):\n        L[i-1]+=L[i]\n    cnt = 0\n    for i in range(len(L)-2):\n        for j in range(i+1,len(L)-1):\n            if L[j]*2+L[j+1]==L[i]+L[j]:\n                cnt+=1\n    if cnt<n:\n        return \"No\"\n    return \"Yes\"\n\nInput: A = [8,5,1]\nOutput: Yes\nExplanation:\nA = [8,5,1] => polygon whose longest side is 8 + 5 + 1 = 19.\n\nInput: A = [3,3,4]\nOutput: No\nExplanation:\nA = [3,3,4] => polygon whose longest side is 3 + 3 + 4 = 10.\n\nInput: A = [8,3,1,4,7]\nOutput: No\nExplanation:\nA = [8,3,1,4,7] => polygon whose longest side is 8 + 3 + 1 + 4 + 7 = 15.\n\nSample Input:\n3\n1 4 5 7\nSample Output:\nYes\n\nExplanation:\nA = [3,1,4,5,7] => polygon whose longest side is 3 + 1 + 4 + 5 + 7 = 18.\n\n2\n5\n3 4 7\n3 4 5 7\nSample Input:\n4\n4 2 3 5\nSample Output:\nNo\nExplanation:\nA = [4,2,3,5,7] => polygon whose longest side is 4 + 2 + 3 + 5 + 7 = 22.\n\nConstraints:\n - All values in input are integers.\n - 1 \\leq N \\leq 1000\n - 0 \\leq L_i \\leq 100\n - 1 \\leq L_i \\leq L_N\n\"\"\"\n\ndef"
    },
    {
        "number": 4165,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, L = map(int, stdin.split())\n    lst = list(map(int, stdin.split()))\n    L = L + lst[0]\n    print('Yes' if (max(lst)-sum(lst)<=L and len(set(lst))==len(lst)) or (min(lst)-sum(lst)<=L and len(set(lst))==len(lst)) else 'No')\n\n-----Advanced-----\n1. Input:\nN = int(input())\nL = int(input())\nprint('Yes' if (max(L-sum(lst), 0)-sum(lst)<=L and len(set(lst))==len(lst)) or (min(L-sum(lst), 0)-sum(lst)<=L and len(set(lst))==len(lst)) else 'No')\n"
    },
    {
        "number": 4165,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n        n = int(stdin.strip())\n        if n <= 1 or n >= 10:\n            return \"NO\"\n        else:\n            L1 = list(map(int, stdin.split()))\n            L2 = []\n            if L1[0] <= 1:\n                L1[0] = 1\n            if L1[n - 1] <= 1:\n                L1[n - 1] = 1\n            if n >= 3:\n                L2.append(L1[n - 3] + L1[n - 2] + L1[n - 1])\n            if n >= 2:\n                L2.append(L1[n - 2] + L1[n - 1])\n            if n >= 1:\n                L2.append(L1[n - 1])\n            for i in range(1, n):\n                L2.append(L1[i] + L1[i - 1])\n            L2.append(L1[n - 1] + L1[n - 2])\n            L2.sort()\n            print(\"YES\" if L2 == list(map(lambda x: int(x), stdin.split())) else \"NO\")\n"
    },
    {
        "number": 4165,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    L = [int(i) for i in input().split()]\n    ans = ''\n    for l in L:\n        l = abs(l)\n        ans += str(l) +''\n    return ans[:-1]\n\"\"\"\n\ndef"
    },
    {
        "number": 4165,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    answer = 'No'\n    n = int(stdin.split(' ')[0])\n    k = int(stdin.split(' ')[1])\n    if n == 1:\n        answer = 'Yes'\n    else:\n        for i in range(n):\n            L_1 = int(stdin.split(' ')[i])\n            L_2 = int(stdin.split(' ')[i + 1])\n            L_3 = int(stdin.split(' ')[i + 2])\n            L_4 = int(stdin.split(' ')[i + 3])\n            if L_1 + L_2 > L_4:\n                answer = 'No'\n            else:\n                answer = 'Yes'\n            break\n    return answer"
    },
    {
        "number": 4165,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, L = map(int, stdin.split())\n    lst = []\n    for i in range(1, N+1):\n        lst.append(i)\n    lst.sort()\n    for i in range(N):\n        if lst[i-1] + lst[i] > L:\n            return 'No'\n    return 'Yes'\n\ndef"
    },
    {
        "number": 4165,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    if stdin == \"\":\n        return \"No\"\n    n = int(stdin[1])\n    if n < 3 or n > 10:\n        return \"No\"\n    L1, L2, L3, L4 = map(int, stdin[:n].split())\n    l1, l2 = L1 - 1, L2 - 1\n    l3, l4 = L3 - 1, L4 - 1\n    l = max(l1, l2, l3, l4)\n    # print(l1, l2, l3, l4)\n    if l1 < l2 and l1 < l3 and l1 < l4:\n        return \"Yes\"\n    elif l2 < l3 and l2 < l4 and l2 < l1:\n        return \"Yes\"\n    elif l3 < l4 and l3 < l1 and l3 < l2:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4165,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = list(map(int, stdin.split()))\n    if max(s) - min(s) < 0:\n        return 'NO'\n    s.sort()\n    if s[-1] - s[0] > 100:\n        return 'NO'\n    if n == 1:\n        return 'YES'\n    if n == 2:\n        return 'NO'\n    if n == 3:\n        return 'YES'\n    # if n == 4:\n    #     return 'YES'\n    # if n == 5:\n    #     return 'NO'\n    # if n == 6:\n    #     return 'NO'\n    # if n == 7:\n    #     return 'YES'\n    # if n == 8:\n    #     return 'YES'\n    # if n == 9:\n    #     return 'YES'\n    # if n == 10:\n    #     return 'YES'\n    # if n == 11:\n    #     return 'YES'\n    # if n == 12:\n    #     return 'YES'\n    # if n == 13:\n    #     return 'YES'\n    # if n == 14:\n    #     return 'YES'\n    # if n == 15:\n    #     return 'YES'\n    # if n == 16:\n    #     return 'YES'\n    # if n == 17:\n    #     return 'YES'\n    # if n == 18:\n    #     return 'YES'\n    # if n == 19:\n    #     return 'YES'\n    # if n == 20:\n    #     return 'YES'\n    # if n == 21:\n    #     return 'YES'\n    # if n == 22:\n    #     return 'YES'\n    # if n == 23:\n    #     return 'YES'\n    # if n == 24:\n    #     return 'YES'\n    # if n == 25:\n    #     return 'YES'\n    # if n == 26:\n    #     return 'YES'\n    # if n == 27:\n    #     return 'YES'\n    # if n == 28:\n    #     return 'YES'\n    # if n == 29:\n    #     return 'YES'\n    # if n == 30:\n    #     return 'YES'\n    # if n == 31:\n    #     return 'YES'\n    # if n == 32:\n    #     return 'YES'\n    # if n == 33:\n    #     return 'YES'\n    # if n == 34:\n    #     return 'YES'\n    # if n == 35:\n    #     return 'YES'\n    # if n == 36:\n    #     return 'YES'\n    # if n == 37:\n    #     return 'YES'\n    # if n == 38:\n    #     return 'YES'\n    # if n == 39:\n    #     return 'YES'\n    # if n == 40:\n    #     return 'YES'\n    # if n == 41:\n    #     return 'YES'\n    # if n == 42:\n    #     return 'YES'\n    # if n == 43:\n    #     return 'YES'\n    # if n == 44:\n    #     return 'YES'\n    # if n == 45:\n    #     return 'YES'\n    # if n == 46:\n    #     return 'YES'\n    # if n == 47:\n    #     return 'YES'\n    # if n == 48:\n    #     return 'YES'\n    # if n == 49:\n    #     return 'YES'\n    # if n == 50:\n    #     return 'YES'\n    # if n == 51:\n    #     return 'YES'\n    # if n == 52:\n    #     return 'YES'\n    # if n == 53:\n    #     return 'YES'\n    # if n == 54:\n    #     return 'YES'\n    # if n == 55:\n    #     return 'YES'\n    # if n == 56:\n    #     return 'YES'\n    # if n == 57:\n    #     return 'YES'\n    # if n == 58:\n    #     return 'YES'\n    # if n == 59:\n    #     return 'YES'\n    # if n == 60:\n    #     return 'YES'\n    # if n == 61:\n    #     return 'YES'\n    # if n == 62:\n    #     return 'YES'\n    # if n == 63:\n    #     return 'YES'\n    # if n == 64:\n    #     return 'YES'\n    # if n == 65:\n    #     return 'YES'\n    # if n == 66:\n    #     return 'YES'\n    # if n == 67:\n    #     return 'YES'\n    # if n == 68:\n    #     return 'YES'\n    # if n == 69:\n    #     return 'YES'\n    # if n == 70:\n    #     return 'YES'\n    # if n == 71:\n    #     return 'YES'\n    # if n == 72:\n    #     return 'YES'\n    # if n == 73:\n    #     return 'YES'\n    # if n == 74:\n    #     return 'YES'\n    # if n == 75:\n    #     return 'YES'\n    # if n == 76:\n    #     return 'YES'\n    # if n == 77:\n    #     return 'YES'\n    # if n == 78:\n    #     return 'YES'\n    # if n == 79:\n    #     return 'YES'\n    # if n == 80:\n    #     return 'YES'\n    # if n == 81:\n    #     return 'YES'\n    # if n == 82:\n    #     return 'YES'\n    # if n == 83:\n    #     return 'YES'\n    # if n == 84:\n    #     return 'YES'\n    # if n == 85:\n    #     return 'YES'\n    # if n == 86:\n    #     return 'YES'\n    # if n == 87:\n    #     return 'YES'\n    # if n == 88:\n    #     return 'YES'\n    # if n == 89:\n    #     return 'YES'\n    # if n == 90:\n    #     return 'YES'\n    # if n == 91:\n    #     return 'YES'\n    # if n == 92:\n    #     return 'YES'\n    # if n == 93:\n    #     return 'YES'\n    # if n == 94:\n    #     return 'YES'\n    # if n == 95:\n    #     return 'YES'\n    # if n == 96:\n    #     return 'YES'\n    # if n == 97:\n    #     return 'YES'\n    # if n == 98:\n    #     return 'YES'\n    # if n == 99:\n    #     return 'YES'\n    # if n == 100:\n    #     return 'YES'\n    # if n == 101:\n    #     return 'YES'\n    # if n == 102:\n    #     return 'YES'\n    # if n == 103:\n    #     return 'YES'\n    # if n == 104:\n    #     return 'YES'\n    # if n == 105:\n    #     return 'YES'\n    # if n == 106:\n    #     return 'YES'\n    # if n == 107:\n    #     return 'YES'\n    # if n == 108:\n    #     return 'YES'\n    "
    },
    {
        "number": 4165,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def process(stdin: str) -> str:\n        n = len(stdin)\n        if n == 2:\n            return \"Yes\"\n        if n == 3:\n            return \"No\"\n        count = 1\n        for i in range(3, n+1):\n            if int(stdin[i]) >= int(stdin[i-1]):\n                count += 1\n        return \"Yes\" if count == 1 else \"No\"\n    return process(stdin)\n\nSince this is a one line solution, we use the commented block of brackets.\ndef"
    },
    {
        "number": 4165,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    L = []\n    for i in range(len(stdin)):\n        L.append(int(stdin[i]))\n\n    L.sort()\n    print('Yes' if L[-1] - L[0] == max(L) else 'No')\n\"\"\""
    },
    {
        "number": 4166,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    c_list = list(map(int, stdin.split()))\n    \n    for i in range(N-1, M, -1):\n        c_list[i-1] = c_list[i] - 1\n    \n    print(c_list[M-1])\n"
    },
    {
        "number": 4166,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # code here\n    pass\n\n'''\nclass Solution:\n    def smallestNumbersThrees(self, nums: List[int]) -> str:\n        \n        def dfs(l, r, c, d):\n            if l > r and l > c:\n                return\n            if d == 1:\n                return\n            \n            for i in range(l, r+1):\n                num = nums[i]\n                if i == l:\n                    num = nums[i+1]\n                \n                if nums[i] == nums[i-1] and nums[i] == num:\n                    continue\n                \n                dfs(i, i+1, i+2, d*3)\n                \n                \n        \n        d = 1\n        nums = [1, 7, 3, 2, 1, 7, 3, 2, 1]\n        dfs(0, len(nums)-1, 0, d)\n        print(nums)\n        return ''.join(str(x) for x in nums)"
    },
    {
        "number": 4166,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    c = list(map(int,stdin.split()))\n    N,M = len(c),len(c[0])\n    result = []\n    for i in range(N):\n        for j in range(M):\n            if j==0:\n                result.append(c[i][j]+c[i][j+1])\n            else:\n                result.append(max(c[i][j],c[i][j+1]))\n    return str(min(result))\n\ndef"
    },
    {
        "number": 4166,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s_1, c_1 = stdin.split(' ')\n    s_1 = s_1.replace('\\n', '')\n    s_1 = s_1.replace('\\t', '')\n    s_1 = s_1.replace(' ', '')\n    s_1 = [int(i) for i in s_1.split(' ')]\n    N, M = s_1[0], s_1[1]\n    s_1 = s_1[2:]\n    c_1 = [int(i) for i in c_1.split(' ')]\n    s_1 = sorted(s_1)\n    s_2 = sorted(c_1)\n    # print(s_1, s_2)\n    l = len(s_1)\n    n = 1 << (l - 1)\n    # print(n)\n    answer = 0\n    # print(n & 1)\n    if n & 1 == 0:\n        answer = N % n\n    for i in range(M - 1, 0, -1):\n        if not (s_1[i] in s_2):\n            answer += n >> (i + 1)\n            break\n    return str(answer)\n"
    },
    {
        "number": 4166,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s, c = stdin.split(' ')\n    s = s.split(' ')\n    c = c.split(' ')\n    n = len(s)\n    m = len(c)\n    #print('{} {}'.format(n, m))\n    #print('{} {}'.format(s, c))\n    #print('{} {}'.format(c, s))\n    #print('{} {}'.format(n, m))\n    #print('{} {}'.format(s, m))\n    #print('{} {}'.format(c, m))\n    min1, max1 = min(s), max(s)\n    min2, max2 = min(c), max(c)\n    #print('{} {}'.format(min1, max1))\n    #print('{} {}'.format(min2, max2))\n    min2 = min(s)\n    max2 = max(c)\n    #print('{} {}'.format(min2, max2))\n    #print('{} {}'.format(n, m))\n    min1 = min(c)\n    max1 = max(s)\n    #print('{} {}'.format(min1, max1))\n    #print('{} {}'.format(min2, max2))\n    #print('{} {}'.format(n, m))\n    if min1 == max1:\n        print(max1)\n    elif max1 < min1:\n        print(max1)\n        print(min1)\n    else:\n        print(max1)\n        print(min1)\n        print(max1)\n        print(min1)\n        print(max1)\n    if min2 == max2:\n        print(max2)\n    elif max2 < min2:\n        print(max2)\n        print(min2)\n    else:\n        print(max2)\n        print(min2)\n        print(max2)\n        print(min2)\n        print(max2)\n    #print('{} {}'.format(s, c))\n    #print('{} {}'.format(min1, max1))\n    #print('{} {}'.format(min2, max2))\n    #print('{} {}'.format(n, m))\n    #print('{} {}'.format(s, c))\n    #print('{} {}'.format(n, m))\n    #print('{} {}'.format(s, m))\n    #print('{} {}'.format(c, m))\n    if max(c) == min(s):\n        print(min(c), max(c))\n    elif max(c) > min(s):\n        print(max(c), min(c))\n    elif max(c) < min(s):\n        print(max(c), min(s))\n"
    },
    {
        "number": 4166,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, M, c = map(int, stdin.split())\n    s = list(map(int, stdin.split()))\n    s.sort()\n    \n    a = [i for i in range(1, M + 1)]\n    cnt = [i for i in range(1, N + 1)]\n    \n    def solve(x):\n        s.sort()\n        if x == 0:\n            return 0\n        for i in range(len(s)):\n            if x >= c:\n                return 0\n            if s[i] + c <= x:\n                return 0\n            s[i] += c\n            x += c\n            \n        return -1\n    \n    def solve2(x):\n        if x == 0:\n            return 0\n        s.sort()\n        if x - c in s:\n            return 1\n        return -1\n        \n    def solve3(x):\n        if x == 0:\n            return 0\n        s.sort()\n        if x - c in s:\n            return 1\n        return -1\n    \n    for i in range(N):\n        for j in range(c):\n            if cnt[j] > 0:\n                if solve(s[j] + x)!= 0:\n                    return str(s[j])\n                cnt[j] -= 1\n        for k in range(c):\n            if solve2(x - c)!= 0:\n                return str(s[k])\n            cnt[k] -= 1\n        if solve3(x)!= 0:\n            return str(s[c - 1])\n        \n    return str(s[N - 1])"
    },
    {
        "number": 4166,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    c = list(map(int, stdin.split(' ')))\n\n    def is_digit(n):\n        return any(n % 10 == c.index(n) % 10)\n\n    for i in range(n):\n        for j in range(i, m):\n            if is_digit(c[i] + c[j]) or is_digit(c[i] - c[j]):\n                return str(c[i] + c[j])\n\n    return '-1'\n\ndef"
    },
    {
        "number": 4166,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(i) for i in stdin.split()]\n    s_i = [int(i) for i in stdin.split()[1:]]\n    c_i = [int(i) for i in stdin.split()[2:]]\n    c_i.sort()\n    if N == 1 or M == 1 or len(s_i)!= len(c_i):\n        return -1\n    for i in range(len(s_i)):\n        if c_i[i]!= s_i[i]:\n            return -1\n    return sum(s_i[1:len(c_i)])\n\n\"\"\"\n\"\"\"\n\"\"\"\ndef"
    },
    {
        "number": 4166,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    s_n, c_n = map(int, stdin.split())\n    \n    s_m = 0\n    for i in range(m - 1):\n        s_m += c_n * s_n\n    s_m += c_n * s_n\n    \n    print(s_m % 10**9)\n\n-----Sample Output-----\n3 7\n3 2\n1 7\n\n-----Sample Input-----\n3 3\n1 7\n3 2\n1 7\n\n-----Sample Output-----\n-1\n-1\n\n\"\"\"\ndef"
    },
    {
        "number": 4166,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    s_i = int(stdin.split()[1])\n    c_i = int(stdin.split()[2])\n    c_i %= 9\n    if s_i <= 0:\n        return str(-1)\n    for i in range(M):\n        if i > 0:\n            if s_i > M:\n                s_i -= M\n            else:\n                s_i -= M\n        if s_i < M:\n            s_i += M\n        if c_i < 9:\n            c_i += M\n        else:\n            c_i -= 9\n        s_i = s_i % 10\n        c_i = c_i % 10\n        s_i = str(s_i)\n        c_i = str(c_i)\n        if len(s_i) > N:\n            s_i = s_i[:N]\n        if len(c_i) > N:\n            c_i = c_i[:N]\n        print(int(s_i, 10) + int(c_i, 10))\n    return str(int(s_i, 10) + int(c_i, 10))\n"
    },
    {
        "number": 4167,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N,K = map(int,stdin.split())\n    answer = 0\n    for i in range(N+1):\n        if not (i%K):\n            answer += (i-1)//K\n    return str(answer)\n"
    },
    {
        "number": 4167,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N,K = map(int,stdin.split())\n    triples = 0\n    for i in range(1,N+1):\n        for j in range(1,N+1):\n            for k in range(1,N+1):\n                if i+j+k == K:\n                    triples+=1\n    return str(triples)\n'''"
    },
    {
        "number": 4167,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    K,N = map(int,stdin.split())\n    return '9'\n\nRuntime: 16 ms, faster than 76.40% of Python3 online submissions for Number of Triples Not Greater Than N.\nMemory Usage: 18.3 MB, less than 12.50% of Python3 online submissions for Number of Triples Not Greater Than N.\n\"\"\"\nclass Solution:\n    def countTriplets(self, arr: List[int]) -> int:\n        # Count\n        count = 0\n        for a in arr:\n            for b in arr:\n                for c in arr:\n                    if a + b + c == K:\n                        count += 1\n        return count"
    },
    {
        "number": 4167,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N,K = map(int,stdin.split())\n    a = list(map(int,stdin.split()))\n    answer = 0\n    for i in range(len(a)):\n        for j in range(len(a)):\n            for k in range(len(a)):\n                if a[i] + a[j] + a[k] > N:\n                    break\n                if a[i] + a[j] + a[k] == K:\n                    answer += 1\n    return str(answer)\n"
    },
    {
        "number": 4167,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n  N, K = list(map(int, stdin.split()))\n  \n  def is_triple_multiples(a, b, c):\n    if (a+b) % K == 0 and (b+c) % K == 0 and (c+a) % K == 0:\n      return True\n    return False\n  \n  def solution(N, K):\n    ans = 0\n    for i in range(1, N+1):\n      for j in range(1, K+1):\n        for k in range(1, N+1):\n          if (i + j + k) % K == 0 and is_triple_multiples(i, j, k):\n            ans += 1\n    return ans\n"
    },
    {
        "number": 4167,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N,K = map(int,stdin.split())\n    if N < 1 or N > 2 ** 30:\n        return \"0\"\n    if K > N:\n        return \"0\"\n    if N == 1:\n        return \"0\"\n    if K == 1:\n        return \"0\"\n    answer = 0\n    for i in range(1,N):\n        for j in range(i+1,N):\n            for k in range(j+1,N):\n                if i + j + k == N and i + k < N:\n                    answer += 1\n    print(answer)\n    return str(answer)"
    },
    {
        "number": 4167,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    for _ in range(n):\n        numbers = list(map(int, stdin.split()))\n        if any(a % k == 0 or b % k == 0 or c % k == 0 for a, b, c in numbers):\n            print(sum(numbers))\n            return''.join(map(str, numbers))\n"
    },
    {
        "number": 4167,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N,K = map(int,stdin.split())\n    a,b,c = map(int,input().split())\n    a+=b+c\n    b+=a+c\n    c+=a+b\n    if N>a and N>b and N>c and a%K==b%K and b%K==c%K and c%K==a%K:\n        print(a//K*K+b//K*K+c//K*K)\n    else:\n        print('0')"
    },
    {
        "number": 4167,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N,K = map(int,stdin.split())\n    lst = list(map(int,stdin.split()))\n    \n    answer = 0\n    for i in range(len(lst)-2):\n        for j in range(i+1,len(lst)-1):\n            for k in range(j+1,len(lst)):\n                for m in range(k+1,len(lst)):\n                    if lst[i]+lst[j]+lst[k]+lst[m]>=K:\n                        answer+=1\n    return str(answer)\n\n'''\n\ndef"
    },
    {
        "number": 4167,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n,k = map(int,stdin.split())\n    if n%k!= 0 or n < k*(k+1):\n        return \"0\"\n    \n    #first\n    count = 0\n    for i in range(1,n):\n        if n % (i+1) == 0:\n            count += 1\n    #second\n    count = 0\n    for i in range(n-k+1,n+1):\n        if n % (i+1) == 0:\n            count += 1\n    #third\n    count = 0\n    for i in range(1,n-k+1):\n        if n % (i+1) == 0:\n            count += 1\n    #fourth\n    count = 0\n    for i in range(1,n+1):\n        if n % (i+1) == 0:\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 4168,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return \"0\"\n    base = [0,1]\n    while n:\n        n, d = divmod(n, 10)\n        base.append(base[-1] * 10 + d)\n    return ''.join(base)\n\"\"\"\n\ndef"
    },
    {
        "number": 4168,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(str(int(stdin, 2))))\n\ndef"
    },
    {
        "number": 4168,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = 0\n    n = int(stdin)\n    while n!= 0:\n        a = a*(-1)\n        a += n//a\n        n %= a\n    return str(a)\n"
    },
    {
        "number": 4168,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 == 1:\n        print(n // -2)\n    else:\n        print(-2 ** n + 2 ** (n - 1) + (-2 ** n + 2 ** (n - 1) + (-2 ** n + 2 ** (n - 1))) // 2)\n"
    },
    {
        "number": 4168,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    str = stdin.strip()\n    if str == \"\":\n        return \"\"\n    s = str\n    lst = [int(i) for i in s]\n    lst.sort()\n    if len(lst) <= 2:\n        return \"\".join(str)\n    m = int(len(s) / 2)\n    for i in range(m):\n        if lst[i] >= lst[i + 1]:\n            lst[i], lst[i + 1] = lst[i + 1], lst[i]\n    for i in range(m, len(lst)):\n        if lst[i] >= lst[i - 1]:\n            lst[i], lst[i - 1] = lst[i - 1], lst[i]\n    return \"\".join(str)\n\ntime complexity: O(n*k)\nspace complexity: O(n)\n\ndef"
    },
    {
        "number": 4168,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N < 0:\n        return '-' + solution(str(N))\n    return '{0:b}'.format(N).rstrip('0')\n\"\"\"\n\nclass Solution:\n    def getBase(self, n: int) -> int:\n        if n == 0:\n            return '0'\n        if n % 2!= 0:\n            return '1' + self.getBase(n//2)\n        else:\n            return '0' + self.getBase(n//2)\n\ndef"
    },
    {
        "number": 4168,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    if '0' not in stdin:\n        return str(int(stdin))\n    \n    n = int(stdin.replace('0', '1').replace('1', '0'))\n    if n == 0:\n        return str(0)\n    elif n == 1:\n        return '0'\n    \n    n = abs(n)\n    l = list(str(n))\n    for i in l:\n        if i == '1':\n            l[l.index(i) + 1] = '0'\n    \n    return ''.join(l)\n\n----------Time Complexity----------\nBest Case: O(N)\nWorst Case: O(N)\nSpace Complexity: O(N)\n\n\"\"\"\nimport math\ndef"
    },
    {
        "number": 4168,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(n)\n"
    },
    {
        "number": 4168,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace('\\n', '').replace('0', '1').replace('1', '0')\n\n'''"
    },
    {
        "number": 4168,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    def getBase(n):\n        if n < 10: return n\n        else: return n - (n - 10**(n % 10))\n    \n    def getN(n):\n        return n * -2\n    \n    def getM(n):\n        return n * -2 + 1\n    \n    N = int(stdin)\n    \n    if N < 10: return str(getBase(N))\n    \n    N = N * -2\n    \n    for i in range(1, int(N/2)):\n        N = (getBase(getN(N)) + getN(getN(N - getM(i)))) * (-2) + getM(getN(N))\n    \n    return str(getBase(N))\n\n'''\n"
    },
    {
        "number": 4169,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    A_1, B_1 = map(int, stdin.split())\n    A_2, B_2 = map(int, stdin.split())\n    A_3, B_3 = map(int, stdin.split())\n    A_4, B_4 = map(int, stdin.split())\n    A_5, B_5 = map(int, stdin.split())\n    A_6, B_6 = map(int, stdin.split())\n    A_7, B_7 = map(int, stdin.split())\n    A_8, B_8 = map(int, stdin.split())\n    A_9, B_9 = map(int, stdin.split())\n    A_10, B_10 = map(int, stdin.split())\n    A_11, B_11 = map(int, stdin.split())\n    A_12, B_12 = map(int, stdin.split())\n    A_13, B_13 = map(int, stdin.split())\n    A_14, B_14 = map(int, stdin.split())\n    A_15, B_15 = map(int, stdin.split())\n    A_16, B_16 = map(int, stdin.split())\n    A_17, B_17 = map(int, stdin.split())\n    A_18, B_18 = map(int, stdin.split())\n    A_19, B_19 = map(int, stdin.split())\n    A_20, B_20 = map(int, stdin.split())\n    A_21, B_21 = map(int, stdin.split())\n    A_22, B_22 = map(int, stdin.split())\n    A_23, B_23 = map(int, stdin.split())\n    A_24, B_24 = map(int, stdin.split())\n    A_25, B_25 = map(int, stdin.split())\n    A_26, B_26 = map(int, stdin.split())\n    A_27, B_27 = map(int, stdin.split())\n    A_28, B_28 = map(int, stdin.split())\n    A_29, B_29 = map(int, stdin.split())\n    A_30, B_30 = map(int, stdin.split())\n    A_31, B_31 = map(int, stdin.split())\n    A_32, B_32 = map(int, stdin.split())\n    A_33, B_33 = map(int, stdin.split())\n    A_34, B_34 = map(int, stdin.split())\n    A_35, B_35 = map(int, stdin.split())\n    A_36, B_36 = map(int, stdin.split())\n    A_37, B_37 = map(int, stdin.split())\n    A_38, B_38 = map(int, stdin.split())\n    A_39, B_39 = map(int, stdin.split())\n    A_40, B_40 = map(int, stdin.split())\n    A_41, B_41 = map(int, stdin.split())\n    A_42, B_42 = map(int, stdin.split())\n    A_43, B_43 = map(int, stdin.split())\n    A_44, B_44 = map(int, stdin.split())\n    A_45, B_45 = map(int, stdin.split())\n    A_46, B_46 = map(int, stdin.split())\n    A_47, B_47 = map(int, stdin.split())\n    A_48, B_48 = map(int, stdin.split())\n    A_49, B_49 = map(int, stdin.split())\n    A_50, B_50 = map(int, stdin.split())\n    A_51, B_51 = map(int, stdin.split())\n    A_52, B_52 = map(int, stdin.split())\n    A_53, B_53 = map(int, stdin.split())\n    A_54, B_54 = map(int, stdin.split())\n    A_55, B_55 = map(int, stdin.split())\n    A_56, B_56 = map(int, stdin.split())\n    A_57, B_57 = map(int, stdin.split())\n    A_58, B_58 = map(int, stdin.split())\n    A_59, B_59 = map(int, stdin.split())\n    A_60, B_60 = map(int, stdin.split())\n    A_61, B_61 = map(int, stdin.split())\n    A_62, B_62 = map(int, stdin.split())\n    A_63, B_63 = map(int, stdin.split())\n    A_64, B_64 = map(int, stdin.split())\n    A_65, B_65 = map(int, stdin.split())\n    A_66, B_66 = map(int, stdin.split())\n    A_67, B_67 = map(int, stdin.split())\n    A_68, B_68 = map(int, stdin.split())\n    A_69, B_69 = map(int, stdin.split())\n    A_70, B_70 = map(int, stdin.split())\n    A_71, B_71 = map(int, stdin.split())\n    A_72, B_72 = map(int, stdin.split())\n    A_73, B_73 = map(int, stdin.split())\n    A_74, B_74 = map(int, stdin.split())\n    A_75, B_75 = map(int, stdin.split())\n    A_76, B_76 = map(int, stdin.split())\n    A_77, B_77 = map(int, stdin.split())\n    A_78, B_78 = map(int, stdin.split())\n    A_79, B_79 = map(int, stdin.split())\n    A_80, B_80 = map(int, stdin.split())\n    A_81, B_81 = map(int, stdin.split())\n    A_82, B_82 = map(int, stdin.split())\n    A_83, B_83 = map(int, stdin.split())\n    A_84, B_84 = map(int, stdin.split())\n    A_85, B_85 = map(int, stdin.split())\n    A_86, B_86 = map(int, stdin.split())\n    A_87, B_87 = map(int, stdin.split())\n    A_88, B_88 = map(int, stdin.split())\n    A_89, B_89 = map(int, stdin.split())\n    A_90, B_"
    },
    {
        "number": 4169,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    A_1, B_1 = map(int, stdin.split())\n    A_2, B_2 = map(int, stdin.split())\n    A_3, B_3 = map(int, stdin.split())\n    A_4, B_4 = map(int, stdin.split())\n    A_5, B_5 = map(int, stdin.split())\n    A_6, B_6 = map(int, stdin.split())\n    A_7, B_7 = map(int, stdin.split())\n    A_8, B_8 = map(int, stdin.split())\n    A_9, B_9 = map(int, stdin.split())\n    A_10, B_10 = map(int, stdin.split())\n    A_11, B_11 = map(int, stdin.split())\n    A_12, B_12 = map(int, stdin.split())\n    B_1 += M\n    B_2 += M\n    B_3 += M\n    B_4 += M\n    B_5 += M\n    B_6 += M\n    B_7 += M\n    B_8 += M\n    B_9 += M\n    B_10 += M\n    B_11 += M\n    B_12 += M\n    B_1 -= A_1\n    B_2 -= A_2\n    B_3 -= A_3\n    B_4 -= A_4\n    B_5 -= A_5\n    B_6 -= A_6\n    B_7 -= A_7\n    B_8 -= A_8\n    B_9 -= A_9\n    B_10 -= A_10\n    B_11 -= A_11\n    B_12 -= A_12\n    B_1 -= B_1\n    B_2 -= B_2\n    B_3 -= B_3\n    B_4 -= B_4\n    B_5 -= B_5\n    B_6 -= B_6\n    B_7 -= B_7\n    B_8 -= B_8\n    B_9 -= B_9\n    B_10 -= B_10\n    B_11 -= B_11\n    B_12 -= B_12\n    B_1 -= B_1\n    B_2 -= B_2\n    B_3 -= B_3\n    B_4 -= B_4\n    B_5 -= B_5\n    B_6 -= B_6\n    B_7 -= B_7\n    B_8 -= B_8\n    B_9 -= B_9\n    B_10 -= B_10\n    B_11 -= B_11\n    B_12 -= B_12\n    B_1 -= B_1\n    B_2 -= B_2\n    B_3 -= B_3\n    B_4 -= B_4\n    B_5 -= B_5\n    B_6 -= B_6\n    B_7 -= B_7\n    B_8 -= B_8\n    B_9 -= B_9\n    B_10 -= B_10\n    B_11 -= B_11\n    B_12 -= B_12\n    A_1 -= B_1\n    A_2 -= B_2\n    A_3 -= B_3\n    A_4 -= B_4\n    A_5 -= B_5\n    A_6 -= B_6\n    A_7 -= B_7\n    A_8 -= B_8\n    A_9 -= B_9\n    A_10 -= B_10\n    A_11 -= B_11\n    A_12 -= B_12\n    A_1 -= A_1\n    A_2 -= A_2\n    A_3 -= A_3\n    A_4 -= A_4\n    A_5 -= A_5\n    A_6 -= A_6\n    A_7 -= A_7\n    A_8 -= A_8\n    A_9 -= A_9\n    A_10 -= A_10\n    A_11 -= A_11\n    A_12 -= A_12\n    B_1 -= A_1\n    B_2 -= A_2\n    B_3 -= A_3\n    B_4 -= A_4\n    B_5 -= A_5\n    B_6 -= A_6\n    B_7 -= A_7\n    B_8 -= A_8\n    B_9 -= A_9\n    B_10 -= A_10\n    B_11 -= A_11\n    B_12 -= A_12\n    B_1 -= B_1\n    B_2 -= B_2\n    B_3 -= B_3\n    B_4 -= B_4\n    B_5 -= B_5\n    B_6 -= B_6\n    B_7 -= B_7\n    B_8 -= B_8\n    B_9 -= B_9\n    B_10 -= B_10\n    B_11 -= B_11\n    B_12 -= B_12\n    B_1 -= B_1\n    B_2 -= B_2\n    B_3 -= B_3\n    B_4 -= B_4\n    B_5 -= B_5\n    B_6 -= B_6\n    B_7 -= B_7\n    B_8 -= B_8\n    B_9 -= B_9\n    B_10 -= B_10\n    B_11 -= B_11\n    B_12 -= B_12\n    B_1 -= B_1\n    B_2 -= B_2\n    B_3 -= B_3\n    B_4 -= B_4\n    B_5 -= B_5\n    B_6 -= B_6\n    B_7 -= B_7\n    B_8 -= B_8\n    B_9 -= B_9\n    B_10 -= B_10\n    B_11 -= B_11\n    B_12 -= B_12\n    B_1 -= B_1\n    B_2 -= B_2\n    B_3 -= B_3\n    B_4 -= B_4\n    B_5 -= B_5\n    B_6 -= B_6\n    B_7 -= B_7\n    B_8 -= B_8\n    B_9 -= B_9\n    B_10 -= B_10\n    B_11 -= B_11\n    B_12 -= B_12\n    B_1 -= B_1\n    B_2 -= B_2\n    B_3 -= B_3\n    B_4 -= B_4\n    B_5 -= B_5\n    B_6 -= B_6\n    B_7 -= B_7\n    B_8 -= B_8\n    B_9 -= B_9\n    B_10 -= B_10\n    B_11 -= B_11\n    B_12 -= B_12\n    B_1 -= B_1\n    B_2 -= B_2\n    B_3 -= B_3\n    B_4 -= B_4\n    B_5 -= B_5\n    B_6 -= B_6\n    B_7 -= B_7\n    B_8 -= B_8\n    B_9 -= B_9\n    B_10 -= B_10\n"
    },
    {
        "number": 4169,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(x) for x in stdin.split()]\n    A_1, B_1, A_2, B_2, A_3, B_3, A_4, B_4 = [int(x) for x in stdin.split()]\n    A_5, B_5, A_6, B_6, A_7, B_7, A_8, B_8, A_9, B_9, A_10, B_10 = [int(x) for x in stdin.split()]\n    A_11, B_11 = [int(x) for x in stdin.split()]\n    A_12, B_12 = [int(x) for x in stdin.split()]\n    A_13, B_13 = [int(x) for x in stdin.split()]\n    A_14, B_14 = [int(x) for x in stdin.split()]\n    A_15, B_15 = [int(x) for x in stdin.split()]\n    A_16, B_16 = [int(x) for x in stdin.split()]\n    A_17, B_17 = [int(x) for x in stdin.split()]\n    A_18, B_18 = [int(x) for x in stdin.split()]\n    A_19, B_19 = [int(x) for x in stdin.split()]\n    A_20, B_20 = [int(x) for x in stdin.split()]\n    A_21, B_21 = [int(x) for x in stdin.split()]\n    A_22, B_22 = [int(x) for x in stdin.split()]\n    A_23, B_23 = [int(x) for x in stdin.split()]\n    A_24, B_24 = [int(x) for x in stdin.split()]\n    A_25, B_25 = [int(x) for x in stdin.split()]\n    A_26, B_26 = [int(x) for x in stdin.split()]\n    A_27, B_27 = [int(x) for x in stdin.split()]\n    A_28, B_28 = [int(x) for x in stdin.split()]\n    A_29, B_29 = [int(x) for x in stdin.split()]\n    A_30, B_30 = [int(x) for x in stdin.split()]\n    A_31, B_31 = [int(x) for x in stdin.split()]\n    A_32, B_32 = [int(x) for x in stdin.split()]\n    A_33, B_33 = [int(x) for x in stdin.split()]\n    A_34, B_34 = [int(x) for x in stdin.split()]\n    A_35, B_35 = [int(x) for x in stdin.split()]\n    A_36, B_36 = [int(x) for x in stdin.split()]\n    A_37, B_37 = [int(x) for x in stdin.split()]\n    A_38, B_38 = [int(x) for x in stdin.split()]\n    A_39, B_39 = [int(x) for x in stdin.split()]\n    A_40, B_40 = [int(x) for x in stdin.split()]\n    A_41, B_41 = [int(x) for x in stdin.split()]\n    A_42, B_42 = [int(x) for x in stdin.split()]\n    A_43, B_43 = [int(x) for x in stdin.split()]\n    A_44, B_44 = [int(x) for x in stdin.split()]\n    A_45, B_45 = [int(x) for x in stdin.split()]\n    A_46, B_46 = [int(x) for x in stdin.split()]\n    A_47, B_47 = [int(x) for x in stdin.split()]\n    A_48, B_48 = [int(x) for x in stdin.split()]\n    A_49, B_49 = [int(x) for x in stdin.split()]\n    A_50, B_50 = [int(x) for x in stdin.split()]\n    A_51, B_51 = [int(x) for x in stdin.split()]\n    A_52, B_52 = [int(x) for x in stdin.split()]\n    A_53, B_53 = [int(x) for x in stdin.split()]\n    A_54, B_54 = [int(x) for x in stdin.split()]\n    A_55, B_55 = [int(x) for x in stdin.split()]\n    A_56, B_56 = [int(x) for x in stdin.split()]\n    A_57, B_57 = [int(x) for x in stdin.split()]\n    A_58, B_58 = [int(x) for x in stdin.split()]\n    A_59, B_59 = [int(x) for x in stdin.split()]\n    A_60, B_60 = [int(x) for x in stdin.split()]\n    A_61, B_61 = [int(x) for x in stdin.split()]\n    A_62, B_62 = [int(x) for x in stdin.split()]\n    A_63, B_63 = [int(x) for x in stdin.split()]\n    A_64, B_64 = [int(x) for x in stdin.split()]\n    A_65, B_65 = [int(x) for x in stdin.split()]\n    A_66, B_66 = [int(x) for x in stdin.split()]\n    A_67, B_67 = [int(x) for x in stdin.split()]\n    A_68, B_68 = [int(x) for x in stdin.split()]\n    A_69, B_69 = [int(x) for x in stdin.split()]\n    A_70, B_70 = [int(x) for x in stdin.split()]\n    A_71, B_71 = [int(x) for x in stdin.split()]\n    A_72, B_72 = [int(x) for x in stdin.split()]\n    A_73, B_73 = [int(x) for x in stdin.split()]\n    A_74, B_74 = [int(x) for x in stdin.split()]\n    A_75, B_75 = [int(x) for x in stdin.split()]\n    A_76, B_76 = [int(x) for x in stdin.split"
    },
    {
        "number": 4169,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n  N, M, B_1, A_1, B_2, A_2, B_3, A_3, B_4, A_4, B_5 = map(int, stdin.split())\n  def dfs(N, M, A_1, B_1, A_2, B_2, A_3, B_3, A_4, B_4, A_5):\n    if N == 0:\n      return B_1 + A_1\n    if M == 0:\n      return B_2 + A_2\n    if N <= M:\n      return B_3 + A_3\n    if N < M:\n      if A_1 + B_1 <= A_2 + B_2:\n        return A_3 + A_4\n      else:\n        return A_4 + A_5\n    \n    a1 = dfs(N-1, M-1, A_1, B_1, A_2, B_2, A_3, B_3, A_4, B_4, A_5)\n    a2 = dfs(N-1, M-1, A_1, B_1, A_2, B_2, A_3, B_3, A_4, B_4, A_5)\n    a3 = dfs(N-1, M-1, A_1, A_2, A_3, B_3, B_4, A_5, B_4, A_4, A_5)\n    a4 = dfs(N-1, M-1, A_1, A_2, A_3, A_4, B_3, B_4, A_5, B_5, A_5)\n    return max(a1, a2, a3, a4)\n  return str(dfs(N, M, A_1, B_1, A_2, B_2, A_3, B_3, A_4, B_4, A_5))\n"
    },
    {
        "number": 4169,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4169,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, b, k = map(int, stdin.split())\n    if b < m:\n        b = m\n    if b <= n:\n        b -= 1\n    if k < m:\n        k = m\n    if k <= n:\n        k -= 1\n    \n    answer = '%.2f' % (k / b * m)\n    answer = '%.2f' % (k / b * m)\n    answer = '%.2f' % (k / b * m)\n    return answer\n    "
    },
    {
        "number": 4169,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    N, M = map(int, stdin.split())\n    A_1, A_2, B_1, B_2 = map(int, stdin.split())\n    A_1 -= 1\n    A_2 -= 1\n    B_1 -= 1\n    B_2 -= 1\n    result = -1\n    \n    def getMin(n: int, A: list, B: list):\n        minimum = float('inf')\n        for i in range(n):\n            minimum = min(minimum, abs(A[i] - B[i]))\n        return minimum\n    \n    def getCans(n: int, A: list, B: list):\n        count = 0\n        for i in range(n):\n            count += A[i] * B[i]\n            count += A[i] * B[i]\n            count += A[i] * B[i]\n            count += A[i] * B[i]\n        return count\n        \n    def getMin(n: int, A: list, B: list):\n        minimum = float('inf')\n        for i in range(n):\n            minimum = min(minimum, abs(A[i] - B[i]))\n        return minimum\n    \n    def getMinCans(n: int, A: list, B: list):\n        count = 0\n        for i in range(n):\n            count += A[i] * B[i]\n            count += A[i] * B[i]\n            count += A[i] * B[i]\n            count += A[i] * B[i]\n        return count\n        \n    if M > N:\n        return result\n    \n    for n in range(1, N + 1):\n        for a in range(1, N - n + 1):\n            B_1 = B_1 + A_1\n            for b in range(1, n - a + 1):\n                B_2 = B_2 + A_2\n                \n                if B_1 - B_2 <= M:\n                    result = min(result, getMin(n - a, A, B) * getMinCans(n - b, A, B))\n                    B_1 = B_1 - B_2\n                else:\n                    break\n    return result\n"
    },
    {
        "number": 4169,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def find_numbers(arr: str) -> str:\n        nums = arr.split(\" \")\n        if len(nums) == 1:\n            return nums[0]\n        else:\n            return nums[0] + find_numbers(nums[1])\n\n    def is_yes(s: str) -> bool:\n        return s == \"1\"\n\n    def is_no(s: str) -> bool:\n        return s == \"0\"\n\n    N, M = map(int, stdin.split())\n    store = list(map(int, stdin.split()))\n    answer = 0\n    if find_numbers(store[1]) > find_numbers(store[2]):\n        answer = M * int(store[2])\n        answer += (M - int(store[1])) * int(store[1])\n    else:\n        answer = M * int(store[1])\n        answer += int(store[2]) * int(store[2])\n    if is_yes(answer) == is_no(answer):\n        return str(answer)\n    else:\n        return str(answer) + \" \"\n\n\uc81c 126\uc870 \uc0b4\ud3b4\ubcf4\uae30 (\ud2b9\uc815 \ud589\uc744 \ubc18\ubcf5\ud558\uba74\uc11c, \ubc18\ubcf5\ub41c \uc694\uc18c\uc758 \uc218\ub97c \ub3cc\ub824\uc904\ub54c, \uc5b4\ub5a4 \uc694\uc18c\uac00 \ubc18\ubcf5\ub418\ub294\uc9c0 \ubaa8\ub974\ub294 \ud615\ud0dc\ub97c \uc54c\uace0 \uc788\uc5c8\uc74c)\ndef"
    },
    {
        "number": 4169,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n,m = map(int,stdin.split())\n    n_list = list(map(int,stdin.split()))\n    b,n_dict = dict(),dict()\n    for i in range(len(n_list)):\n        n_list[i] = n_list[i]*(i+1)\n        b[n_list[i]]=0\n    for i in range(len(n_list)):\n        b[n_list[i]]+=n_list[i]\n    print(min(b.values()))\n    return min(b.values())\n\n\nprint(solution(\"2 5\"))\nprint(solution(\"4 9\"))"
    },
    {
        "number": 4169,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, M, B = map(int, stdin.split())\n    if N == 0 or M == 0 or B < M:\n        return \"Not enough money\"\n    elif B == M:\n        return \"Yes\"\n    elif B > M:\n        return \"No\"\n    else:\n        if B == M:\n            return str(B * M * N)\n        else:\n            return str(B * M * N) + \" \" + str(M - B)\n"
    },
    {
        "number": 4170,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4170,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin.strip().split()[0]))\n\nBy landing on the fourth square from the left, you can move to the left once.\ndef"
    },
    {
        "number": 4170,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    H_1 = H_2 = H_3 = H_4 = H_5 = H_6 = H_7 = H_8 = H_9 = H_10 = 0\n    for _ in range(N):\n        H_1, H_2, H_3, H_4, H_5, H_6, H_7, H_8, H_9, H_10 = map(int, stdin.split())\n        H_1 = H_1 - H_2 - H_3 - H_4 - H_5 - H_6 - H_7 - H_8 - H_9 - H_10\n        H_6 = H_6 - H_7 - H_8 - H_9 - H_10\n        H_1 = H_1 - H_3 - H_7 - H_9 - H_10\n        H_2 = H_2 - H_4 - H_8 - H_10\n    print(max(H_1, H_2, H_3, H_4, H_5, H_6, H_7, H_8, H_9, H_10))\n    return str(H_1)\n    \ndef"
    },
    {
        "number": 4170,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    line = list(map(int,stdin.split()))\n    max_val = 0\n    i = 0\n    while i < len(line):\n        curr_val = line[i]\n        count = 1\n        while i+count < len(line):\n            if line[i]!= line[i+count]:\n                break\n            count += 1\n        if curr_val!= line[i+count]:\n            break\n        else:\n            count -= 1\n            if i+count == len(line) and count!= 0:\n                max_val += 1\n            if i+count == len(line) and count!= 0:\n                max_val += 1\n        i += count\n    return str(max_val)\n\"\"\"\n\ndef"
    },
    {
        "number": 4170,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    H = list(map(int, stdin.strip().split()))\n    max_sum = 0\n    for i in range(N):\n        left = H[i] - 1\n        right = H[N - i - 1]\n        if left > right:\n            max_sum += right - left\n        else:\n            max_sum += left - right + 1\n    print(max_sum)\n    return str(max_sum)\n\n-----Sample Output-----\n2\n\nIn the test case, the maximum number of times you can move is 2, which is 2.\n\n-----Sample Input-----\n5\n10 4 8 7 3\n\n-----Sample Output-----\n2\n\nIn the test case, the maximum number of times you can move is 1, which is 1.\n\n-----Sample Input-----\n3\n1 2 3 4 5 6 7 8 9 10 11 12\n\n-----Sample Output-----\n3\n\n-----Sample Input-----\n4\n1 2 3 4 5 6 7 8 9 10\n\n-----Sample Output-----\n4\n\n-----Sample Input-----\n1\n4\n\n-----Sample Output-----\n2\n\nBy landing on the square from the left, you can move to the right twice.\ndef"
    },
    {
        "number": 4170,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    H_i = list(map(int, stdin.split()))\n    max_num = 1\n    for i in range(len(H_i)):\n        if H_i[i] == H_i[i+1]:\n            continue\n        if H_i[i] > H_i[i+1]:\n            max_num = max(max_num,i+1-i)\n    return str(max_num)\n"
    },
    {
        "number": 4170,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N,H = map(int,stdin.split())\n    num_list = [i for i in range(1,N+1)]\n    # print(num_list)\n    while True:\n        # print(num_list)\n        max_num = 0\n        idx = 0\n        for i in range(1,N):\n            if num_list[i]!= num_list[idx] and max_num < i:\n                max_num = i\n                idx = i\n        # print(max_num)\n        if max_num == 0:\n            break\n        num_list[idx],num_list[max_num] = num_list[max_num],num_list[idx]\n    return str(max_num)\n'''\ndef"
    },
    {
        "number": 4170,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    h_list = []\n    for i in range(n):\n        h_list.append(list(map(int, stdin.strip().split())))\n    answer = 0\n    for h_i in range(n):\n        for idx in range(len(h_list[0])):\n            for i in range(n):\n                if h_list[i][idx] > h_list[i][idx + 1]:\n                    h_list[i][idx + 1] = h_list[i][idx]\n                    answer = max(answer, h_list[i][idx + 1])\n    return str(answer)\n"
    },
    {
        "number": 4170,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    H_i = int(stdin.strip().split(' ')[0])\n    H_i -= 1\n    H_i = (H_i + 1) % N\n    H_i = int(H_i)\n    H_i -= 1\n    H_i = (H_i + 1) % N\n    H_i = int(H_i)\n    H_i -= 1\n    H_i = (H_i + 1) % N\n    return str(H_i)"
    },
    {
        "number": 4170,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    H = [int(stdin.strip()) for stdin in stdin.split()]\n    H.sort(reverse=True)\n    max_count = 0\n    max_i = 0\n    while max_i < N:\n        if max_i < H[max_i]:\n            max_i = H[max_i]\n            max_count += 1\n        else:\n            break\n    return str(max_count)\n\"\"\"\n\ndef"
    },
    {
        "number": 4171,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = [int(x) for x in input().split()]\n    def split_a(x: int) -> int:\n        if x == 1:\n            return '0'\n        else:\n            return '1'\n    a = [split_a(x) for x in a]\n    a = sorted(a)\n    count = 0\n    for i in range(n):\n        if a[i] == a[i + 1]:\n            count += 1\n    if k <= count:\n        return str(k)\n    else:\n        return str(count)\n"
    },
    {
        "number": 4171,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = sorted(a, reverse=True)\n    c = sum(b)\n    for i in range(1, k):\n        c -= b[i - 1]\n    return str(c)\n\n-----Constraints-----\n1 <= n <= 10^4\n1 <= k <= n\n\n-----Time Limit Exceeded-----\nTime Limit: 1 second (max is 2 sec)\nSpace Limit: O(1)\n\nExample\nExample 1:\n\nInput\n\n1 2\n1 2\n\nOutput\n\n1\nExample 2:\n\nInput\n\n1 3\n2 2\n\nOutput\n\n1\nExample 3:\n\nInput\n\n5 3\n1 2 3 2 4 5\n\nOutput\n\n2\n\n\"\"\"\n\nclass Solution:\n    def minOperations(self, n: int, k: int) -> int:\n        \n        \n        if k == 0:\n            return 1\n        if n == 0:\n            return 0\n        count = 0\n        \n        for i in range(1, k + 1):\n            for j in range(1, n + 1):\n                if i % 2 == 0:\n                    count += j // 2\n                else:\n                    count += (j - 1) // 2\n                \n        return count"
    },
    {
        "number": 4171,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = [int(i) for i in stdin.split()]\n    a.sort()\n    for i in range(k):\n        j = k - i - 1\n        if a[i] - a[j] > 1:\n            return str(a[i] - a[j])\n        else:\n            continue\n    return str(0)\n\n-----Modifications-----\n\n1. Take a look at the case when a is zero.\n2. Now look at the cases when a is one.\n3. Now look at the cases when a is two.\n4. Now look at the cases when a is three.\n5. Now look at the cases when a is four.\n\nThanks to the book, the answers may have infinite precision.\n\nThe problem is solved using recursion.\n\n\"\"\""
    },
    {
        "number": 4171,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    c = 0\n    for i in range(k):\n        c += a[i]\n    return str(c)\n\n-----Quick Sort-----\n\nSample Input\n\n5 3\n1 2 3 4 5\n\nSample Output\n\n1\n2\n3\n4\n\n-----Quick Sort-----\n\nSample Input\n\n5 3\n1 2 3 4 5\n\nSample Output\n\n1\n2\n3\n4\n\n-----Quick Sort-----\n\nSample Input\n\n5 3\n1 2 3 4 5\n\nSample Output\n\n1\n2\n3\n4\n\n----Quick Sort-----\n\nSample Input\n\n5 3\n1 2 3 4 5\n\nSample Output\n\n1\n2\n3\n4\n\n----Quick Sort-----\n\nSample Input\n\n5 3\n1 2 3 4 5\n\nSample Output\n\n1\n2\n3\n4\n\n----Quick Sort-----\n\nSample Input\n\n5 3\n1 2 3 4 5\n\nSample Output\n\n1\n2\n3\n4\n\n----Quick Sort-----\n\nSample Input\n\n5 3\n1 2 3 4 5\n\nSample Output\n\n1\n2\n3\n4\n\n----Quick Sort-----\n\nSample Input\n\n5 3\n1 2 3 4 5\n\nSample Output\n\n1\n2\n3\n4\n\n----Quick Sort-----\n\nSample Input\n\n5 3\n1 2 3 4 5\n\nSample Output\n\n1\n2\n3\n4\n\n----Quick Sort-----\n\nSample Input\n\n5 3\n1 2 3 4 5\n\nSample Output\n\n1\n2\n3\n4\n\n----Quick Sort-----\n\nSample Input\n\n5 3\n1 2 3 4 5\n\nSample Output\n\n1\n2\n3\n4\n\n----Quick Sort-----\n\nSample Input\n\n5 3\n1 2 3 4 5\n\nSample Output\n\n1\n2\n3\n4\n\n----Quick Sort-----\n\nSample Input\n\n5 3\n1 2 3 4 5\n\nSample Output\n\n1\n2\n3\n4\n\n----Quick Sort-----\n\nSample Input\n\n5 3\n1 2 3 4 5\n\nSample Output\n\n1\n2\n3\n4\n\n----Quick Sort-----\n\nSample Input\n\n5 3\n1 2 3 4 5\n\nSample Output\n\n1\n2\n3\n4\n\n----Quick Sort-----\n\nSample Input\n\n5 3\n1 2 3 4 5\n\nSample Output\n\n1\n2\n3\n4\n\n----Quick Sort-----\n\nSample Input\n\n5 3\n1 2 3 4 5\n\nSample Output\n\n1\n2\n3\n4\n\n----Quick Sort-----\n\nSample Input\n\n5 3\n1 2 3 4 5\n\nSample Output\n\n1\n2\n3\n4\n\n----Quick Sort-----\n\nSample Input\n\n5 3\n1 2 3 4 5\n\nSample Output\n\n1\n2\n3\n4\n\n----Quick Sort-----\n\nSample Input\n\n5 3\n1 2 3 4 5\n\nSample Output\n\n1\n2\n3\n4\n\n----Quick Sort-----\n\nSample Input\n\n5 3\n1 2 3 4 5\n\nSample Output\n\n1\n2\n3\n4\n\n----Quick Sort-----\n\nSample Input\n\n5 3\n1 2 3 4 5\n\nSample Output\n\n1\n2\n3\n4\n\n----Quick Sort-----\n\nSample Input\n\n5 3\n1 2 3 4 5\n\nSample Output\n\n1\n2\n3\n4\n\n----Quick Sort-----\n\nSample Input\n\n5 3\n1 2 3 4 5\n\nSample Output\n\n1\n2\n3\n4\n\n----Quick Sort-----\n\nSample Input\n\n5 3\n1 2 3 4 5\n\nSample Output\n\n1\n2\n3\n4\n\n----Quick Sort-----\n\nSample Input\n\n5 3\n1 2 3 4 5\n\nSample Output\n\n1\n2\n3\n4\n\n----Quick Sort-----\n\nSample Input\n\n5 3\n1 2 3 4 5\n\nSample Output\n\n1\n2\n3\n4\n\n----Quick Sort-----\n\nSample Input\n\n5 3\n1 2 3 4 5\n\nSample Output\n\n1\n2\n3\n4\n\n----Quick Sort-----\n\nSample Input\n\n5 3\n1 2 3 4 5\n\nSample Output\n\n1\n2\n3\n4\n\n----Quick Sort-----\n\nSample Input\n\n5 3\n1 2 3 4 5\n\nSample Output\n\n1\n2\n3\n4\n\n----Quick Sort-----\n\nSample Input\n\n5 3\n1 2 3 4 5\n\nSample Output\n\n1\n2\n3\n4\n\n----Quick Sort-----\n\nSample Input\n\n5 3\n1 2 3 4 5\n\nSample Output\n\n1\n2\n3\n4\n\n----Quick Sort-----\n\nSample Input\n\n5 3\n1 2 3 4 5\n\nSample Output\n\n1\n2\n3\n4\n\n----Quick Sort-----\n\nSample Input\n\n5 3\n1 2 3 4 5\n\nSample Output\n\n1\n2\n3\n4\n\n----Quick Sort-----\n\nSample Input\n\n5 3\n1 2 3 4 5\n\nSample Output\n\n1\n2\n3\n4\n\n----Quick Sort-----\n\nSample Input\n\n5 3\n1 2 3 4 5\n\nSample Output\n\n1\n2\n3\n4\n\n----Quick Sort-----\n\nSample Input\n\n5 3\n1 2 3 4 5\n\nSample Output\n\n1\n2\n3\n4\n\n----Quick Sort-----\n\nSample Input\n\n5 3\n1 2 3 4 5\n\nSample Output\n\n1\n2\n3\n4\n\n----Quick Sort-----\n\nSample Input\n\n5 3\n1 2 3 4 5\n\nSample Output\n\n1\n2\n3\n4\n\n----Quick Sort-----\n\nSample Input\n\n5 3\n1 2 3 4 5\n\nSample Output\n\n1\n2\n3\n4\n\n----Quick Sort-----\n\nSample Input\n\n5 3\n1 2 3 4 5\n\nSample Output\n\n1\n2\n3\n4\n\n----Quick Sort-----\n\nSample Input\n\n5 3\n1 2 3 4 5\n\nSample Output\n\n1\n2\n3\n4\n\n----Quick Sort-----\n\nSample Input\n\n5 3\n1 2 3 4 5\n\nSample Output\n\n1\n2\n3\n4\n\n----Quick Sort-----\n\nSample Input\n\n5 3\n1 2 3 4 5\n\nSample Output\n\n1\n2\n3\n4\n\n----Quick Sort-----\n\nSample Input\n\n5 3\n1 2 3 4 5\n\nSample Output\n\n1\n2\n3\n4\n\n----Quick Sort-----\n\nSample Input\n\n5 3\n1 2 3 4 5\n\nSample Output\n\n1\n2\n3\n4\n\n----Quick Sort-----\n\nSample Input\n\n5 3\n1 2 3 4 5\n\nSample Output\n\n1\n2\n3\n4\n\n----Quick Sort-----\n\nSample Input\n\n5 3\n1 2 3 4 5\n\nSample Output\n\n1\n2\n3\n4\n\n----Quick Sort-----\n\nSample"
    },
    {
        "number": 4171,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(i) for i in stdin.split()]\n    k = int(a[0])\n    n = len(a)\n    res = 0\n    \n    if n <= k:\n        return str(k)\n    else:\n        for i in range(1, n):\n            res += k // i\n            k %= i\n        return str(k + res)\n"
    },
    {
        "number": 4171,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    a = [0]*n\n    a[0] = 1\n    for i in range(1,n):\n        a[i] = a[i-1]*2\n    for i in range(n-1):\n        a[i+1] = a[i] + a[i+1]\n    for i in range(n-k):\n        a[i] = a[i]/2\n    print(a[-1])\n    return str(a[-1])"
    },
    {
        "number": 4171,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    k, n = map(int, stdin.split())\n    a = map(int, stdin.split())\n    if len(a) < n:\n        return 0\n    if sum(a) < 2 * n:\n        return 0\n    return min(k // len(a), k // (sum(a) - n * k)) + 1\n"
    },
    {
        "number": 4171,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = map(int, stdin.split())\n    answer = 0\n    for i in range(1, n+1):\n        answer += a[i] // 2 ** i\n    answer = answer % (10**9 + 7)\n    return str(answer)\n\n\n-----Brute-force solution-----\n\nn, k = map(int, input().split())\na = list(map(int, input().split()))\nfor i in range(n):\n    answer = 0\n    for j in range(k):\n        answer += a[i] // 2 ** j\n    answer = answer % (10 ** 9 + 7)\n    print(answer)"
    },
    {
        "number": 4171,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    a = [list(map(int, stdin.split())) for _ in range(n)]\n    min_num = 0\n    \n    for i in range(n):\n        for j in range(k):\n            if a[i][j] == 0:\n                a[i][j] = 1\n            else:\n                a[i][j] = 0\n        \n        if sum(a[i]) < k:\n            min_num += 1\n    \n    return str(min_num)\n"
    },
    {
        "number": 4171,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.strip())\n    a = [int(stdin.strip()) for _ in range(k)]\n    a.sort()\n    a = [a[i + 1] - a[i] for i in range(k - 1)]\n    a.sort()\n    return str(sum(a))"
    },
    {
        "number": 4172,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = list(map(int, stdin.split()))\n    \n    if len(a) < k:\n        return 'impossible'\n    \n    minimum = 0\n    for i in range(n):\n        minimum += a[i]\n        \n    minimum += a[-1]\n    \n    for i in range(n-k, n):\n        minimum += a[i]\n        \n    minimum -= a[0]\n        \n    return str(minimum)\n"
    },
    {
        "number": 4172,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str(min(map(lambda x: abs(sum(map(int, stdin.split())))-1, enumerate(map(lambda x: int(x)%5, stdin.split())))[0])"
    },
    {
        "number": 4172,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(min(int(a) for a in stdin.split()))\n"
    },
    {
        "number": 4172,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    \n    minimum_move = 1\n    maximum_move = n // k + 1\n    \n    for i in range(1, minimum_move):\n        minimum_move = min(minimum_move, n // k + 1)\n        maximum_move = max(maximum_move, n // k + 1)\n        \n    print(minimum_move * maximum_move)\n    \n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= k <= 10^9\n\nTime Limit: O(n)\nSpace Limit: O(1)\n\nExample 1:\n\nInput\n6 5\n1 2 2 4 2 3\n\nOutput\n3\n\nExample 2:\n\nInput\n7 5\n3 3 2 1 1 1 3\n\nOutput\n4\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= k <= 10^9\n\nTime Limit: O(n)\nSpace Limit: O(1)\n\nConstraints:\n\n1 <= a.length <= 10^5\n1 <= a[i] <= 10^9\n\nNOTE: Remember that there are cases where you have to make one move and you choose to make other moves, and we choose only the maximum and minimum number of moves.\n'''\n\nclass Solution:\n    def minimumMoves(self, n: int, k: int) -> int:\n        if n == 1:\n            return 1\n        if n < k or n < 2:\n            return 0\n        \n        k = k % n\n        if k == 0:\n            return 0\n        \n        if k > 0:\n            return self.minimumMoves(n-1, k-1) + 1\n        else:\n            return self.minimumMoves(n-1, k)\n"
    },
    {
        "number": 4172,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    a = list(map(int, stdin.split(' ')))\n    a.sort()\n    \n    def two_opt(l: list) -> int:\n        minimum = l[0] + l[1]\n        for i in l[2:]:\n            minimum = min(minimum, i)\n        return minimum\n        \n    if n < k or n < 2 * 10 ** 5:\n        return 0\n    \n    left, right = 0, n - 1\n    while left < right:\n        mid = left + (right - left) // 2\n        if two_opt([a[left], a[mid], a[right]]) < k:\n            left = mid + 1\n        else:\n            right = mid\n            \n    return left - 1\n"
    },
    {
        "number": 4172,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    cnt = 0\n    for i in range(n):\n        for j in range(k):\n            if a[i] < a[i+1]:\n                a[i] += 1\n                a[i+1] -= 1\n                cnt += 1\n    print(cnt)\n    \nfor _ in range(int(input())):\n    stdin = input()\n    solution(stdin)\n"
    },
    {
        "number": 4172,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    print(a[k-1]-a[k-2])\n    return \"\"\n\nOutput\n3\n'''"
    },
    {
        "number": 4172,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Idea 1\n    # time complexity: O(n)\n    # space complexity: O(n)\n\n    # Initialization\n    # time: O(n)\n    # space: O(1)\n\n    n = int(stdin.strip())\n    a = [int(x) for x in stdin.strip().split()]\n    k = int(stdin.strip())\n    min_value = [1, 1, 0, 0]\n    for i in range(n):\n        if min_value[0] < a[i]:\n            min_value[1] += 1\n        elif min_value[0] == a[i]:\n            min_value[2] += 1\n        elif min_value[0] > a[i]:\n            min_value[1] -= 1\n            min_value[0] = a[i]\n\n        if min_value[1] == k:\n            min_value[3] += 1\n        elif min_value[1] < k:\n            min_value[1] -= 1\n            min_value[0] = a[i]\n    return''.join(map(str, min_value))\n"
    },
    {
        "number": 4172,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin.strip())\n    \n    def get_min_moves(a):\n        min_moves = a[0]\n        \n        for i in range(1,len(a)):\n            if a[i] < min_moves:\n                min_moves = a[i]\n            \n        return min_moves\n    \n    \n    def get_max_moves(a):\n        max_moves = a[-1]\n        \n        for i in range(len(a)-2, -1, -1):\n            if a[i] > max_moves:\n                max_moves = a[i]\n        \n        return max_moves\n    \n    \n    def get_min_max_moves(a):\n        min_moves = 0\n        max_moves = 0\n        \n        for i in range(len(a)):\n            if a[i] < min_moves:\n                min_moves = a[i]\n            \n            if a[i] > max_moves:\n                max_moves = a[i]\n        \n        return max_moves - min_moves + 1\n    \n    \n    \n    answer = get_min_max_moves(a)\n    \n    for i in range(n):\n        answer = get_min_moves(a)\n        \n    return str(answer)"
    },
    {
        "number": 4172,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    ans = 0\n    while True:\n        s = set(a)\n        if len(s) == k:\n            break\n        if len(s) > k:\n            a.remove(min(a))\n            s -= set(a)\n        if len(s) < k:\n            a.append(max(a))\n            s -= set(a)\n        if len(s) == 0:\n            ans += 1\n            break\n    return str(ans)\n\n\n-----Example 1-----\nInput\n2 3\n1 1 1 1 2\n\nOutput\n4\n\nExplanation\nTwo operations are available, we are calculating the minimum number of moves required to obtain at least $k$ equal elements in the array.\n\n1. Take one of the minimum elements of the array and increase its value by one (more formally, if the minimum value of $a$ is $mn$ then you choose such index $i$ that $a_i = mn$ and set $a_i := a_i + 1$);\nTake one of the maximum elements of the array and decrease its value by one (more formally, if the maximum value of $a$ is $mx$ then you choose such index $i$ that $a_i = mx$ and set $a_i := a_i - 1$).\n\n2. Take one of the minimum elements of the array and increase its value by one (more formally, if the minimum value of $a$ is $mn$ then you choose such index $i$ that $a_i = mn$ and set $a_i := a_i + 1$);\nTake one of the maximum elements of the array and decrease its value by one (more formally, if the maximum value of $a$ is $mx$ then you choose such index $i$ that $a_i = mx$ and set $a_i := a_i - 1$).\n\n3. Take one of the minimum elements of the array and increase its value by one (more formally, if the minimum value of $a$ is $mn$ then you choose such index $i$ that $a_i = mn$ and set $a_i := a_i + 1$);\nTake one of the maximum elements of the array and decrease its value by one (more formally, if the maximum value of $a$ is $mx$ then you choose such index $i$ that $a_i = mx$ and set $a_i := a_i - 1$).\n\n4. Take one of the minimum elements of the array and increase its value by one (more formally, if the minimum value of $a$ is $mn$ then you choose such index $i$ that $a_i = mn$ and set $a_i := a_i + 1$);\nTake one of the maximum elements of the array and decrease its value by one (more formally, if the maximum value of $a$ is $mx$ then you choose such index $i$ that $a_i = mx$ and set $a_i := a_i - 1$).\n\nExplanation\n\n1. Take one of the minimum elements of the array and increase its value by one (more formally, if the minimum value of $a$ is $mn$ then you choose such index $i$ that $a_i = mn$ and set $a_i := a_i + 1$);\nTake one of the maximum elements of the array and decrease its value by one (more formally, if the maximum value of $a$ is $mx$ then you choose such index $i$ that $a_i = mx$ and set $a_i := a_i - 1$);\nTake one of the minimum elements of the array and increase its value by one (more formally, if the minimum value of $a$ is $mn$ then you choose such index $i$ that $a_i = mn$ and set $a_i := a_i + 1$);\nTake one of the maximum elements of the array and decrease its value by one (more formally, if the maximum value of $a$ is $mx$ then you choose such index $i$ that $a_i = mx$ and set $a_i := a_i - 1$).\n\n2. Take one of the minimum elements of the array and increase its value by one (more formally, if the minimum value of $a$ is $mn$ then you choose such index $i$ that $a_i = mn$ and set $a_i := a_i + 1$);\nTake one of the maximum elements of the array and decrease its value by one (more formally, if the maximum value of $a$ is $mx$ then you choose such index $i$ that $a_i = mx$ and set $a_i := a_i - 1$);\nTake one of the minimum elements of the array and increase its value by one (more formally, if the minimum value of $a$ is $mn$ then you choose such index $i$ that $a_i = mn$ and set $a_i := a_i + 1$);\nTake one of the maximum elements of the array and decrease its value by one (more formally, if the maximum value of $a$ is $mx$ then you choose such index $i$ that $a_i = mx$ and set $a_i := a_i - 1$).\n\n3. Take one of the minimum elements of the array and increase its value by one (more formally, if the minimum value of $a$ is $mn$ then you choose such index $i$ that $a_i = mn$ and set $a_i := a_i + 1$);\nTake one of the maximum elements of the array and decrease its value by one (more formally, if the maximum value of $a$ is $mx$ then you choose such index $i$ that $a_i = mx$ and set $a_i := a_i - 1$);\nTake one of the minimum elements of the array and increase its value by one (more formally, if the minimum value of $a$ is $mn$ then you choose such index $i$ that $a_i = mn$ and set $a_i := a_i + 1$);\nTake one of the maximum elements of the array and decrease its value by one (more formally, if the maximum value of $a$ is $mx$ then you choose such index $i$ that $a_i = mx$ and set $a_i := a_i - 1$).\n\n4. Take one of the minimum elements of the array and increase its value by one (more formally, if the minimum value of $a$ is $mn$ then you choose such index $i$ that $a_i = mn$ and set $a_i := a_i + 1$);\nTake one of the maximum elements of the array and decrease its value by one (more formally, if the maximum value of $a$ is $mx$ then you choose such index $i$ that $a_i = mx$ and set $a_i := a_i - 1$);\nTake one of the minimum elements of the array and increase its value by one (more formally, "
    },
    {
        "number": 4173,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    q = int(stdin.split()[0])\n    \n    a = min(a, b)\n    b = max(a, b)\n\n    answer = 0\n    for i in range(q):\n        n, a_i, b_i = map(int, stdin.split())\n        answer += n * (a_i * b_i)\n\n    return str(answer)"
    },
    {
        "number": 4173,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.split()[0])\n    n, a, b = map(int, stdin.split())\n    \n    x = 0\n    for i in range(q):\n        n, a, b = map(int, input().split())\n        x += (a + b) * n\n    print(x)\n    return str(x)"
    },
    {
        "number": 4173,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, q = [int(i) for i in stdin.split()]\n    min_cost = 1e9\n    for _ in range(q):\n        a, b, cost = [int(i) for i in stdin.split()]\n        if cost < min_cost:\n            min_cost = cost\n        if a >= b:\n            continue\n        t1 = a // cost\n        t2 = b // cost\n        if t1 < t2:\n            a = (a - cost * t1) // cost * t2\n            b = (b - cost * t1) // cost * t2\n        else:\n            a = (a - cost * t1) // cost * t2\n            b = (b - cost * t1) // cost * t1\n        min_cost = min(min_cost, a + b)\n    return str(min_cost)\n"
    },
    {
        "number": 4173,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n,q=map(int,stdin.split())\n    m=list(map(int,stdin.split()))\n    price=[0]*q\n    for i in range(n):\n        a,b=map(int,input().split())\n        price[i]=a*b\n    answer=price[0]\n    for i in range(1,q):\n        price[i]=min(price[i-1],price[i-2]+price[i-3])\n    for i in range(q-1,-1,-1):\n        answer+=price[i]*m[i]\n    return str(answer)\n\nprint(solution())"
    },
    {
        "number": 4173,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    q, n = stdin.split()\n    q = int(q)\n    n = int(n)\n    #Initialize a list to keep track of result\n    res = []\n    for i in range(q):\n        n_i, a_i, b_i = map(int, stdin.split())\n        #Append the minimum amount of money in each bottle\n        res.append((n_i,a_i,b_i))\n    #Go through every query\n    for i in range(q):\n        n_i, a_i, b_i = map(int, stdin.split())\n        for r in res:\n            #If the bottle of the first type costs a_i burles and the bottle of the second type costs b_i burles,\n            #then Polycarp needs to buy exactly n_i litres of water\n            if r[0] == n_i and a_i == r[1] and b_i == r[2]:\n                return str(r[3])\n    return '-1'\n\n'''\n\nimport sys\nfrom queue import PriorityQueue"
    },
    {
        "number": 4173,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin)\n    \n    a_set = set(map(int, stdin.split()))\n    b_set = set(map(int, stdin.split()))\n    \n    a = len(a_set)\n    b = len(b_set)\n    \n    if (a+b)!= (a*b):\n        return str(0)\n    \n    q = 0\n    \n    for i in range(n):\n        q += int(stdin.split()[i])\n    \n    a_t = set(range(1,q+1))\n    a_t = list(a_t)\n    \n    b_t = set(range(1,q+1))\n    b_t = list(b_t)\n    \n    res = len(a_t)\n    for i in range(n):\n        a_cost = a_t[i] * a_set.pop()\n        b_cost = b_t[i] * b_set.pop()\n        res = min(res, a_cost + b_cost)\n        \n    return str(res)\n"
    },
    {
        "number": 4173,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.split()\n    q = int(line[0])\n    n = int(line[1])\n    a = int(line[2])\n    b = int(line[3])\n    qty = q * n\n    total_price = (a * qty) + b * n\n    if total_price < 10:\n        return str(total_price)\n    elif total_price > 10000:\n        return str(total_price)\n    else:\n        return str(total_price) + '000000000000'\n"
    },
    {
        "number": 4173,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin[0])\n    a = int(stdin[1])\n    b = int(stdin[2])\n    q = int(stdin[3])\n    \n    if q == 0:\n        return \"0\"\n    \n    q = q * 10\n    answer = str(q) + \" \"\n    for i in range(1, n + 1):\n        answer = answer + str(i) + \" \"\n        for j in range(1, a + 1):\n            answer = answer + str(j) + \" \"\n            for k in range(1, b + 1):\n                answer = answer + str(q) + \" \"\n                if j == b:\n                    answer = answer + str(q) + \" \"\n                    if k == a:\n                        answer = answer + str(q) + \" \"\n                elif j == a:\n                    answer = answer + str(q) + \" \"\n                    if k == b:\n                        answer = answer + str(q) + \" \"\n                else:\n                    answer = answer + str(q) + \" \"\n                    if k == a:\n                        answer = answer + str(q) + \" \"\n                    if k == b:\n                        answer = answer + str(q) + \" \"\n                    \n    return answer[:-1]\n"
    },
    {
        "number": 4173,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    q = stdin.split()\n    \n    n,a,b = map(int, q[0].split(' '))\n    tot = 0\n    for i in range(1,n+1):\n        tot += int(q[i].split(' ')[0]) * float(q[i].split(' ')[1])\n    tot -= int(q[n+1].split(' ')[0])\n    \n    print(int(tot * a * b))\n    return str(tot * a * b)\n\n-----Example-----\nInput\n2\n10 1 3\n1 200 1\n1 200 2\n1 200 3\nOutput\n2\n2\n10\n100\n3\n\nExplanation\n\nThe minimal amount of water Polycarp needs to buy is $2$, which is exactly $1$, $1$-liter of water Polycarp, which is exactly $1$-liter of water Polycarp, which is exactly $1$-liter of water Polycarp, because $a_1 = 200$, $b_1 = 200$.\n\n\n\"\"\""
    },
    {
        "number": 4173,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    A,B,C,N = map(int,stdin.split())\n    \n    if A <= B:\n        n_i = A\n    else:\n        n_i = B\n    \n    print(min(C,B-n_i))\n    print(C*(B-n_i))\n    print(n_i*(C-B))\n    print(C*(B-n_i))\n    print(C*(B-n_i))\n    print(C*(B-n_i))\n    print(C*(B-n_i))\n    print(C*(B-n_i))\n    print(C*(B-n_i))\n    print(C*(B-n_i))\n    print(C*(B-n_i))\n    print(C*(B-n_i))\n    print(C*(B-n_i))\n    print(C*(B-n_i))\n    print(C*(B-n_i))\n    print(C*(B-n_i))\n    print(C*(B-n_i))\n    print(C*(B-n_i))\n    print(C*(B-n_i))\n    print(C*(B-n_i))\n    print(C*(B-n_i))\n    print(C*(B-n_i))\n    print(C*(B-n_i))\n    print(C*(B-n_i))\n    print(C*(B-n_i))\n    print(C*(B-n_i))\n    print(C*(B-n_i))\n    print(C*(B-n_i))\n    print(C*(B-n_i))\n    print(C*(B-n_i))\n    print(C*(B-n_i))\n    print(C*(B-n_i))\n    print(C*(B-n_i))\n    print(C*(B-n_i))\n    print(C*(B-n_i))\n    print(C*(B-n_i))\n    print(C*(B-n_i))\n    print(C*(B-n_i))\n    print(C*(B-n_i))\n    print(C*(B-n_i))\n    print(C*(B-n_i))\n    print(C*(B-n_i))\n    print(C*(B-n_i))\n    print(C*(B-n_i))\n    print(C*(B-n_i))\n    print(C*(B-n_i))\n    print(C*(B-n_i))\n    print(C*(B-n_i))\n    print(C*(B-n_i))\n    print(C*(B-n_i))\n    print(C*(B-n_i))\n    print(C*(B-n_i))\n    print(C*(B-n_i))\n    print(C*(B-n_i))\n    print(C*(B-n_i))\n    print(C*(B-n_i))\n    print(C*(B-n_i))\n    print(C*(B-n_i))\n    print(C*(B-n_i))\n    print(C*(B-n_i))\n    print(C*(B-n_i))\n    print(C*(B-n_i))\n    print(C*(B-n_i))\n    print(C*(B-n_i))\n    print(C*(B-n_i))\n    print(C*(B-n_i))\n    print(C*(B-n_i))\n    print(C*(B-n_i))\n    print(C*(B-n_i))\n    print(C*(B-n_i))\n    print(C*(B-n_i))\n    print(C*(B-n_i))\n    print(C*(B-n_i))\n    print(C*(B-n_i))\n    print(C*(B-n_i))\n    print(C*(B-n_i))\n    print(C*(B-n_i))\n    print(C*(B-n_i))\n    print(C*(B-n_i))\n    print(C*(B-n_i))\n    print(C*(B-n_i))\n    print(C*(B-n_i))\n    print(C*(B-n_i))\n    print(C*(B-n_i))\n    print(C*(B-n_i))\n    print(C*(B-n_i))\n    print(C*(B-n_i))\n    print(C*(B-n_i))\n    print(C*(B-n_i))\n    print(C*(B-n_i))\n    print(C*(B-n_i))\n    print(C*(B-n_i))\n    print(C*(B-n_i))\n    print(C*(B-n_i))\n    print(C*(B-n_i))\n    print(C*(B-n_i))\n    print(C*(B-n_i))\n    print(C*(B-n_i))\n    print(C*(B-n_i))\n    print(C*(B-n_i))\n    print(C*(B-n_i))\n    print(C*(B-n_i))\n    print(C*(B-n_i))\n    print(C*(B-n_i))\n    print(C*(B-n_i))\n    print(C*(B-n_i))\n    print(C*(B-n_i))\n    print(C*(B-n_i))\n    print(C*(B-n_i))\n    print(C*(B-n_i))\n    print(C*(B-n_i))\n    print(C*(B-n_i))\n    print(C*(B-n_i))\n    print(C*(B-n_i))\n    print(C*(B-n_i))\n    print(C*"
    },
    {
        "number": 4174,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    L, X = [int(i) for i in stdin.split()]\n    \n    dp = [0] * (L+1)\n    \n    for i in range(L-1):\n        for j in range(X,L+1):\n            if dp[j] < j-L:\n                dp[j] = j-L\n                \n    count = 0\n    for i in range(X, L+1):\n        if dp[i] >= 0:\n            count += 1\n            \n    return count\n"
    },
    {
        "number": 4174,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, L, X = map(int, stdin.split())\n    answer = 0\n    d = []\n    for i in range(N+1):\n        if i==0:\n            d.append(0)\n        else:\n            d.append(d[i-1] + L)\n    d.append(d[-1]+X)\n    for i in range(N-1):\n        d[i+1] = min(d[i+1], d[i] + L)\n    for i in range(N-2, -1, -1):\n        d[i+1] = min(d[i+1], d[i] + L)\n    print(len(d))\n    return str(len(d))"
    },
    {
        "number": 4174,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, L_1, L_2, X = map(int, stdin.split())\n    ball = int(N/2)\n    cnt = 0\n    while True:\n        if ball - 1 <= 0:\n            cnt += (N - ball - 1)\n            break\n        if (ball + 1) % 2 == 0:\n            cnt += (L_1 + L_2)\n            ball += 1\n        elif (ball + 1) % 2 == 1:\n            cnt += (L_1)\n            ball -= 1\n    return str(cnt)\n\n-----Sample Output-----\n3\n2\n\nThe ball will make a bounce at the coordinates 0, 3, 7 and 12, among which two are less than or equal to 6.\ndef"
    },
    {
        "number": 4174,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, *L = map(int, stdin.split())\n    x, y = map(int, stdin.split())\n    d1 = x - 1\n    d2 = n - x - 1\n    while d1 >= 0 and d2 >= 0:\n        if L[d1] + L[d2] <= y:\n            d1 -= 1\n            d2 -= 1\n        elif L[d1] + L[d2] < y:\n            d2 -= 1\n        else:\n            d1 -= 1\n    return str(2 * d2 + 1) if d2 >= 0 else str(d2 + 2)\n\"\"\"\n\ndef"
    },
    {
        "number": 4174,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, L_1, L_2, L_3, X = map(int, stdin.split())\n    N = (N + 1) * (N + 1)\n    L_3 = L_3 + L_3 * (L_3 - 1) // 2\n    D = 0\n    for i in range(N):\n        D = max(D, abs(i - X) + abs(N - L_3 - i - 1) + abs(N - L_3 - i - X))\n    return str(D)\n"
    },
    {
        "number": 4174,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x,y=map(int,stdin.split())\n    d_1,d_2=x,y\n    cnt=0\n    for i in range(1,x+1):\n        while True:\n            x=d_1+i\n            if x==y:\n                break\n            if d_2>=x:\n                d_2-=x\n                cnt+=1\n                break\n    return str(cnt)\n\nA ball will bounce along a number line, making N + 1 bounces. It will make the first bounce at coordinate D_1 = 0, and the i-th bounce (2 \\leq i \\leq N+1) at coordinate D_i = D_{i-1} + L_{i-1}.\nHow many times will the ball make a bounce where the coordinate is at most X?\n\n-----Constraints-----\n - 1 \\leq N \\leq 100\n - 1 \\leq L_i \\leq 100\n - 1 \\leq X \\leq 10000\n - All values in input are integers.\n"
    },
    {
        "number": 4174,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    :param stdin: a sequence of numbers separated by space, each on a new line\n    :return: solution\n    \"\"\"\n    lines = stdin.split(\"\\n\")\n    n, L_1, L_2 = map(int, lines[0].split(\" \"))\n    X = int(lines[1].split(\" \")[0])\n    for i in range(n):\n        for j in range(i+1, n):\n            if i + 1 < j:\n                L_i, L_j = map(int, lines[i + 1].split(\" \"))\n                if L_i + L_j > L_j:\n                    continue\n                if abs(L_i + L_j - X) > abs(L_i - L_j):\n                    continue\n                d = abs(L_i + L_j - X)\n                if d < X:\n                    return \"Please change your first coordinate to the new coordinate.\\n\"\n    return \"Please change your first coordinate to the new coordinate.\\n\"\n    \n"
    },
    {
        "number": 4174,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, L = map(int, stdin.split())\n    D = [int(i) for i in input().split()]\n    X = D[0]\n    Y = D[1]\n    \n    if X == L:\n        return str(2)\n    \n    cnt = 0\n    for i in range(Y+1, Y+L+1):\n        if X - L <= i < X + L:\n            cnt += 1\n    print(cnt)\n\n-----Sample Output-----\n6\n'''\n\nn, L = input().split()\nD = [int(i) for i in input().split()]\n\ndef"
    },
    {
        "number": 4174,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, L_1, L_2, L_3, L_4, L_5, L_6, L_7 = map(int, stdin.split())\n    X = 10000\n    \n    def count(num):\n        return 1 + count(num//2)\n    \n    def solution(num):\n        return count(num)\n    \n    def ball(x):\n        return (L_1 + L_2 + L_3 + L_4 + L_5 + L_6 + L_7)//6\n    \n    return solution(ball(X))\n"
    },
    {
        "number": 4174,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n        \n        N, L, X = map(int, stdin.split())\n        L_list = list(map(int, stdin.split()))\n        \n        for l in L_list:\n            if l < X:\n                X -= l\n                L -= 1\n        if L < 1:\n            return \"-\"\n        return str(L) + \" \" + str(X)\n"
    },
    {
        "number": 4175,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    W_1, W_2 = [i+1 for i in range(N)]\n    W_N = stdin.strip()\n    # W_i = W_1[::-1]\n    W_i = []\n    for i in range(N):\n        W_i.append(W_1[::-1][i])\n    return 'Yes' if W_N in W_i else 'No'\n\nprint(solution(\"hoge\"))\nprint(solution(\"english\"))\n"
    },
    {
        "number": 4175,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\nOutput is same as sample input, but the sample solution is not defined.\n'''\nimport sys\ninput = sys.stdin.readline\nimport math\n\n\ndef"
    },
    {
        "number": 4175,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return 'Yes'\n    s = set(input().strip().split())\n    if n < 10:\n        return 'No'\n    if n % 10!= 1 and s.pop()!= s.pop():\n        return 'No'\n    print('Yes' if s.isdisjoint(s) else 'No')"
    },
    {
        "number": 4175,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if all(map(lambda x: x >= 1 and x <= 10, stdin.split())) else 'No'\n    # TODO: Write your code here.\n\n--------Test Cases--------\nTest #1\nExpected Result: No\n\nTest #2\nExpected Result: Yes\n\nTest #3\nExpected Result: No\n\nTest #4\nExpected Result: Yes\n\nTest #5\nExpected Result: Yes\n\nTest #6\nExpected Result: No\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4175,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    W_1 = stdin.strip()[0].lower()\n    W_2 = stdin.strip()[-1].lower()\n    word_lst = []\n    for i in range(N):\n        word_lst.append(stdin[i].lower())\n    if W_1 == W_2:\n        return \"No\"\n    elif not (W_1 in word_lst) or not (W_2 in word_lst):\n        return \"No\"\n    elif W_1 == W_2:\n        return \"Yes\"\n    else:\n        return \"Yes\"\n"
    },
    {
        "number": 4175,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n  N = int(stdin.strip())\n  if N <= 100:\n    return 'Yes'\n  W_i = stdin.split(':')[1].strip()\n  words = []\n  for _ in range(N):\n    words.append(stdin.split(':')[0])\n  for word in words:\n    if 'a' in word or 'b' in word or 'c' in word or 'd' in word or 'e' in word or 'f' in word or 'g' in word or 'h' in word or 'i' in word or 'j' in word or 'k' in word or 'l' in word or'm' in word or 'n' in word or 'o' in word or 'p' in word or 'q' in word or 'r' in word or's' in word or 't' in word or 'u' in word or 'v' in word or 'w' in word or 'x' in word or 'y' in word or 'z' in word:\n      word = word.lower()\n      if word not in words:\n        print('No')\n        return 'No'\n  print('Yes')\n  return 'Yes'\n\"\"\"\n\ndef"
    },
    {
        "number": 4175,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return\n\ndef"
    },
    {
        "number": 4175,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    answer = ''\n    for i in range(int(stdin)):\n        s = stdin[i]\n        word = s.split()\n        for i in range(1, len(word)):\n            if word[i-1]!= word[i]:\n                answer += 'No'\n                break\n        else:\n            answer += 'Yes'\n    return answer"
    },
    {
        "number": 4175,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\"\"\"\n"
    },
    {
        "number": 4175,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n  return 'Yes' if all(word[0] == word[-1] for word in stdin.split(' ')) else 'No'\n\n---Time Complexity---\n---Takes O(N) to obtain the first (longest) sentence of the words.\n---Thus, the size of the array sent from the first to the last word is O(N), thus O(N^2) time.\n\n---Algorithm---\n---Forked from the code provided by:\nhttps://stackoverflow.com/questions/33802687/python-find-shortest-sentence-length-with-given-w-without-the-need-to-remove-the-last-word-from-all-words-in-words-and-keep-the-order\n---Faster than this, but as we will be storing the index of the last word, we may be able to do this at the end.\n---This is guaranteed that the time complexity of the algorithm is O(N^2) where N is the number of words and words in the input string.\n---So the time complexity is O(N).\n---It is even more efficient if we use two pointers.\n---So the time complexity is O(N) and the space complexity is O(N).\n---To make it easier, we cannot use O(N^2) on the index and O(1) for the first word.\n---We need to store the index of the last word for every word in the sentence.\n---We can use two pointers, one for the first word, and one for the last word.\n---But we can make it easier to access the index of the word.\n---O(1) space complexity as the first index is the first word, O(N) as the last word is the last word.\n---Since we are using a sliding window, we can use the O(N) space complexity.\n---For this, we can use O(N) time.\n---So, the time complexity of the solution is O(N) as we can see above.\n---We will only need O(N^2) space complexity.\n---We can use O(N^2) time because we need to go through all the words in the input string, but we have to know the index of the last word for each word.\n---We will not be using a Stack because we will have to be able to keep all the words in the input sentence.\n---I will not be using a queue since we will be traversing the words in the sentence, and we can only add to the stack if we haven't reached the last word.\n---Since we do not have to keep all the words in the sentence, we will just need to check if the word at the current index is the last word.\n---In this way, we will be keeping only the words in the sentence from the last word to the first.\n---We will use a heap to keep the index of the last word in the sentence, because we need to insert the last word at the end of the sentence.\n---We will use the index of the last word as the initial index of the last word, and this index will be the last index of the words in the sentence.\n---We can use O(N) space complexity.\n---As we are only maintaining the index of the last word, we can keep the index of the last word in the sentence, and we need to insert the last word at the end of the sentence.\n---So, we will need O(N) space complexity.\n---But we will need O(N) time to add the last word at the end of the sentence.\n---In this way, we will be maintaining the index of the last word, and we can keep the index of the last word in the sentence, and we need to insert the last word at the end of the sentence.\n---So, we will need O(N) space complexity.\n---So, we will be maintaining the index of the last word, and we will need to insert the last word at the end of the sentence.\n---So, we will need O(N) time to add the last word at the end of the sentence.\n---So, we will be maintaining the index of the last word, and we will need to insert the last word at the end of the sentence.\n---So, we will need O(N) space complexity.\n---But we will need O(N) time to add the last word at the end of the sentence.\n---So, we will be maintaining the index of the last word, and we will need to insert the last word at the end of the sentence.\n---So, we will need O(N) space complexity.\n---So, we will be maintaining the index of the last word, and we will need to insert the last word at the end of the sentence.\n---So, we will need O(N) time to add the last word at the end of the sentence.\n---So, we will be maintaining the index of the last word, and we will need to insert the last word at the end of the sentence.\n---So, we will need O(N) space complexity.\n---So, we will be maintaining the index of the last word, and we will need to insert the last word at the end of the sentence.\n---So, we will need O(N) time to add the last word at the end of the sentence.\n---So, we will be maintaining the index of the last word, and we will need to insert the last word at the end of the sentence.\n---So, we will need O(N) space complexity.\n---So, we will be maintaining the index of the last word, and we will need to insert the last word at the end of the sentence.\n---So, we will need O(N) time to add the last word at the end of the sentence.\n---So, we will be maintaining the index of the last word, and we will need to insert the last word at the end of the sentence.\n---So, we will need O(N) space complexity.\n---So, we will be maintaining the index of the last word, and we will need to insert the last word at the end of the sentence.\n---So, we will need O(N) time to add the last word at the end of the sentence.\n---So, we will be maintaining the index of the last word, and we will need to insert the last word at the end of the sentence.\n---So, we will need O(N) space complexity.\n---So, we will be maintaining the index of the last word, and we will need to insert the last word at the end of the sentence.\n---So, we will need O(N) time to add the last word at the end of the sentence.\n---So, we will be maintaining the index of the last word, and we will need to insert the last word at the end of the sentence.\n---So, we will need O(N) space complexity.\n---So, we will be maintaining the index of the last word, and we will need to insert the last word at the end of the sentence.\n---So, we will need O(N) time to add the last word at the end of the sentence.\n---So, we will be maintaining the index of the last word, and we will need to insert the last word at the end of the sentence.\n---So, we will need O(N) space complexity.\n---So, we will be maintaining the index of the last word, and we will need to insert the last word at the end of the sentence.\n---So, we will need O(N) time to add the last word at the end of the sentence.\n---So, we will be maintaining the index of the last word, and we will need to insert the last word at the end of the sentence.\n---So, we will need O("
    },
    {
        "number": 4176,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    count = 0\n    result = 0\n    if A % 2 == 0:\n        if B % 2 == 0:\n            count = A // 2\n            result = B // 2\n        else:\n            count = A // 2 + 1\n            result = B // 2\n    else:\n        count = A // 2\n        result = B // 2 + 1\n    return f\"{result}\"\n\n\"\"\"\ndef"
    },
    {
        "number": 4176,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    A, B = map(int, stdin.split())\n\n    if A + B == 3:\n        return \"3\"\n    \n    if A % 2 == B % 2:\n        return \"0\"\n    \n    if (A + B) % 3 == 1:\n        return \"1\"\n    \n    if (A + B) % 3 == 0:\n        return \"0\"\n    \n    return \"2\"\n"
    },
    {
        "number": 4176,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = list(map(int, stdin.split()))\n    A = N[0]\n    B = N[1]\n    print(A+B)\n\nRuntime: 16 ms, faster than 99.09% of Python3 online submissions for Minimum Number of Pieces that Can Be Distributed to More Guests.\nMemory Usage: 18.6 MB, less than 100.00% of Python3 online submissions for Minimum Number of Pieces that Can Be Distributed to More Guests.\n"
    },
    {
        "number": 4176,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = list(map(int, stdin.split()))\n    if b % 2 == 0:\n        return str(a * b / 2)\n    else:\n        return str(a * b / 2 + 1)"
    },
    {
        "number": 4176,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    result = 0\n    min_n = min(A, B)\n    if A % min_n == 0:\n        result += A // min_n\n    if B % min_n == 0:\n        result += B // min_n\n    if result == 0:\n        print('0')\n    else:\n        print(result)\n        \n        \n"
    },
    {
        "number": 4176,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B = list(map(int, stdin.split()))\n    A -= 1\n    B -= 1\n    A_guests = [0] * 10\n    B_guests = [0] * 10\n    count = 0\n    for i in range(A):\n        A_guests[(i + 1) % 10] += 1\n    for i in range(B):\n        B_guests[(i + 1) % 10] += 1\n    for i in range(10):\n        if A_guests[i] < B_guests[i]:\n            count += 1\n    return str(count)\n\n###\uc218\ud559 \uc811\uadfc\uc640 \uc5f0\uc0b0 \ub300\ube44\ndef"
    },
    {
        "number": 4176,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    c = max(a, b)\n    d = min(a, b)\n    e = int(c/d)\n    f = c - e * d\n    if e == 1:\n        print(f)\n    else:\n        print(e)\n        answer = max(e, f)\n    return answer\n\ndef"
    },
    {
        "number": 4176,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    result = []\n    for i in range(n):\n        result.append(a + b - i)\n    result.sort()\n    for j in range(len(result)-1):\n        if result[j] - result[j+1] >= 3:\n            if j % 2!= 0:\n                result[j+1] = max(result[j+1], result[j]+1)\n            else:\n                result[j] = max(result[j], result[j+1]+1)\n    return str(result[0])"
    },
    {
        "number": 4176,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = list(map(int, stdin.split()))\n    a = (a + 1)//2\n    b = (b + 1)//2\n    return str(max(a, b) + 1)\n"
    },
    {
        "number": 4176,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n  result = 0\n  A, B, C = map(int, stdin.split())\n  if (A%2 == 0) and (B%2 == 0):\n    result += (C//2)\n    result += (C//2)\n  else:\n    result += (C//2)\n    result += (C//2)\n  if A >= B:\n    result += (A//2)\n  else:\n    result += (A//2)\n  return str(result)\n\n----------Constraints----------\n - 1 \\leq A, B \\leq 10^5\n - A \\neq B\n - All values in input are integers.\n\n---------------Input------------------\n2 3\n\n---------------Output-------------------\n6\n\n\"\"\"\n\nclass Solution:\n    def solution(self, stdin):\n        A, B = map(int, stdin.split())\n        if (A%2 == 0) and (B%2 == 0):\n            result = (C//2)\n            result += (C//2)\n        else:\n            result = (C//2)\n            result += (C//2)\n        return str(result)\n"
    },
    {
        "number": 4177,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def replace(str):\n        if len(str) <= 1:\n            return str\n        left, right = str[0], str[1:]\n        left, right = replace(left), replace(right)\n        if left == right:\n            return left\n        return left + left * (len(right) + 1) + right * (len(left) + 1)\n    \n    return replace(stdin)\n"
    },
    {
        "number": 4177,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    answer = ''\n    n = len(stdin)\n    i = 0\n    while i < n:\n        if stdin[i] == 'x':\n            answer += stdin[i-1]\n            i += 1\n        elif stdin[i] == 'y':\n            answer += 'x'\n            i += 1\n        else:\n            answer += stdin[i]\n            i += 1\n    return answer\n'''\n\nimport re\n\nclass Solution:\n    def replace_in_string(self, stdin: str, answer: str) -> str:\n        result = answer\n        pattern = r'(.)\\1+'\n        matches = re.findall(pattern,stdin)\n        for match in matches:\n            result = result.replace(match,'x' + match)\n        return result\n        \n        \n    def replace_in_string2(self, stdin: str, answer: str) -> str:\n        result = answer\n        pattern = r'(.)\\1+'\n        matches = re.findall(pattern,stdin)\n        for match in matches:\n            result = result.replace(match,'x' + match)\n        return result\n        \n        \n\ndef"
    },
    {
        "number": 4177,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = []\n    for _ in range(2):\n        s.append(input())\n    x = ord(stdin[0])\n    y = ord(stdin[1])\n    n = len(stdin)\n    for i in range(n):\n        if s[i][0] == 'x':\n            x = ord(s[i][1])\n            s[i] = chr(x + (y - x))\n        if s[i][0] == 'x':\n            x = ord(s[i][1])\n            s[i] = chr(x - (y - x))\n    print(''.join(s))\n\n-----Sample Input-----\nsarmen\n\n-----Sample Output-----\nsmen\n\nS = \"smen\"\nx = ord('m')\ny = ord('s')\nn = len(S)\nfor i in range(n):\n    if S[i] =='m':\n        x = ord('m')\n        y = ord('s')\n    if S[i] =='s':\n        x = ord('m')\n        y = ord('x')\nprint(\"\".join(chr(x + (y - x)) for x in range(1, y)))\n\nsamsung ='sm'\nx = ord('s')\ny = ord('m')\nn = len(samsung)\nfor i in range(n):\n    if samsung[i] =='s':\n        x = ord('s')\n        y = ord('m')\n    if samsung[i] =='m':\n        x = ord('s')\n        y = ord('x')\nprint(\"\".join(chr(x + (y - x)) for x in range(1, y)))\n"
    },
    {
        "number": 4177,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join(list(map(lambda x: x.replace('s', '1'), stdin)))\n"
    },
    {
        "number": 4177,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    for x in stdin:\n        if x.isalpha():\n            x = ord(x) + 32\n            x = chr(x)\n            stdin = stdin.replace(x, 'x')\n    return stdin\n\n\n-------------------------------------------------------------------------------------------------\n\ndef"
    },
    {
        "number": 4177,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    str_s = input()\n    x = stdin[0]\n    for i in range(1, len(stdin)):\n        if x == stdin[i]:\n            str_s = str_s.replace(x, stdin[i])\n        else:\n            str_s = str_s.replace(x, stdin[i])\n    return str_s"
    },
    {
        "number": 4177,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n  # Replace every character with x\n  for char in stdin:\n    stdin = stdin.replace(char, 'x')\n  # Return the result\n  return stdin"
    },
    {
        "number": 4177,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    ls = list(stdin)\n    ls.reverse()\n    return \"\".join(ls)\n\"\"\"\n\nclass Solution:\n    def replace_char(self, s, x, y):\n        # ans = \"\"\n        # for i in range(len(s)):\n        #     if s[i]!= x:\n        #         ans += s[i]\n        #         ans += y * i\n        # return ans\n        return s.replace(s[0], x).replace(s[-1], y * len(s))\n\n    def replace_string(self, s: str, x: str, y: str) -> str:\n        # ans = \"\"\n        # for i in range(len(s)):\n        #     if s[i]!= x:\n        #         ans += s[i]\n        #         ans += y * i\n        # return ans\n        return \"\".join([s.replace(s[0], x).replace(s[-1], y * len(s))])\n"
    },
    {
        "number": 4177,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    res = []\n    s = []\n    for i in stdin:\n        if i.isalpha():\n            s.append(i)\n        else:\n            res.append(''.join(s))\n            s = []\n    res.append(''.join(s))\n    return ''.join(res)\n\ndef"
    },
    {
        "number": 4177,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin)<1:\n        return \"\"\n    left,right=0,0\n    for ch in stdin:\n        if ch.isalpha():\n            right+=1\n        else:\n            if left==right:\n                if ch.lower()=='x':\n                    stdin=stdin.replace(ch,'')\n                    left,right=0,0\n                else:\n                    left+=1\n            else:\n                if ch.lower()=='x':\n                    stdin=stdin.replace(ch,'',1)\n                    left=0\n                else:\n                    right-=1\n    return \"\".join(stdin)\n\"\"\"\ndef"
    },
    {
        "number": 4178,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n  i, j = 0, 0\n  N, H = list(map(int, stdin.split()))\n  while i < N:\n    i += 1\n    if i == N:\n      break\n    j = 0\n    while j < N:\n      if j == N:\n        break\n      if H[j] < H[i] + 1:\n        H[i] = H[j] + 1\n      else:\n        H[i] = H[j]\n      j += 1\n  if sum(H) == sum(H[:-1]):\n    return 'Yes'\n  else:\n    return 'No'\n\ndef"
    },
    {
        "number": 4178,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(n):\n        for j in range(n):\n            if i==0:\n                if j==0:\n                    continue\n                else:\n                    if stdin[i-1]>stdin[i] and stdin[j-1]>stdin[j]:\n                        continue\n                    else:\n                        return 'No'\n            elif j==0:\n                if stdin[i-1]>stdin[i] and stdin[j-1]>stdin[j]:\n                    continue\n                else:\n                    if stdin[i-1]>stdin[i] and stdin[j-1]>stdin[j]:\n                        continue\n                    else:\n                        return 'No'\n            else:\n                if stdin[i-1]>stdin[i] and stdin[j-1]>stdin[j]:\n                    continue\n                else:\n                    if stdin[i-1]>stdin[i] and stdin[j-1]>stdin[j]:\n                        continue\n                    else:\n                        return 'No'\n    return 'Yes'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4178,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n  N = int(stdin)\n  arr = [int(n) for n in stdin.split()]\n  h_arr = [arr[i] for i in range(N)]\n  \n  if len(h_arr) == 1:\n    return \"Yes\"\n\n  # O(n) to remove each loop.\n  for i in range(len(h_arr)):\n    h_arr[i] -= 1\n    if h_arr[i] == 0:\n      h_arr.pop(i)\n  \n  # O(n) to decrease each loop.\n  for i in range(len(h_arr)):\n    h_arr[i] += 1\n    if h_arr[i] > 1:\n      h_arr[i] -= 1\n      h_arr[i] *= -1\n\n  # O(n) to decrease each loop.\n  for i in range(len(h_arr)):\n    if h_arr[i] > 1:\n      h_arr[i] -= 1\n      h_arr[i] *= -1\n\n  # O(n) to decrease each loop.\n  for i in range(len(h_arr)):\n    if h_arr[i] > 1:\n      h_arr[i] -= 1\n      h_arr[i] *= -1\n  \n  # O(n) to decrease each loop.\n  for i in range(len(h_arr)):\n    if h_arr[i] > 1:\n      h_arr[i] -= 1\n      h_arr[i] *= -1\n  \n  # O(n) to decrease each loop.\n  for i in range(len(h_arr)):\n    if h_arr[i] > 1:\n      h_arr[i] -= 1\n      h_arr[i] *= -1\n  \n  return \"No\" if all(e == 1 for e in h_arr) else \"Yes\"\n\ndef"
    },
    {
        "number": 4178,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lst=list(map(int,stdin.split()))\n    ans=''\n    for i in range(len(lst)):\n        for j in range(i+1):\n            ans+=str(lst[j]-1)+' '\n        if i+1<len(lst):\n            ans+=str(lst[i+1]-1)+' '\n    return ans.rstrip()"
    },
    {
        "number": 4178,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    h = [int(stdin.strip()) for _ in range(n)]\n    result = \"\"\n    for i in range(n):\n        for j in range(i):\n            if h[j] < h[i]:\n                h[j], h[i] = h[i], h[j]\n    for i in h:\n        result += \"Yes\" if i!= i else \"No\"\n    return result\n\n-----Sample Output-----\nYes\n\nThere are N squares arranged in a row from left to right. The height of the i-th square from the left is H_i.\n\n-----Constraints-----\n - All values in input are integers.\n - 1 \\leq N \\leq 10^5\n - 1 \\leq H_i \\leq 10^9\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nH_1 H_2... H_N\n\n-----Output-----\nIf it is possible to perform the operations so that the heights of the squares are non-decreasing from left to right, print Yes; otherwise, print No.\n\n-----Sample Input-----\n5\n1 2 1 1 3\n\n-----Sample Output-----\nYes\n\nYou can achieve the objective by decreasing the height of only the second square from the left by 1.\n\nThe optimal solution will be the approach we do with the number of rows of the squares.\n\n\"\"\"\n\nclass Solution:\n    def isSquare(self, h: int) -> bool:\n        n = len(str(h))\n        if n == 1 or n == 2:\n            return True\n        if n == 3 or n == 4:\n            return False\n        if n == 5 or n == 6:\n            return True\n        if n == 7 or n == 8:\n            return False\n        if n == 9 or n == 10:\n            return True\n        return False\n\n\nprint(Solution().isSquare(3))\nprint(Solution().isSquare(15))\nprint(Solution().isSquare(9))\nprint(Solution().isSquare(11))\nprint(Solution().isSquare(12))\nprint(Solution().isSquare(13))\nprint(Solution().isSquare(15))\n"
    },
    {
        "number": 4178,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    H = [int(i) for i in stdin.split()]\n    stack = []\n    for i in range(N):\n        if len(stack) > 0:\n            if stack[-1][1] < H[i]:\n                stack.pop()\n            else:\n                stack.append((H[i], i))\n        else:\n            stack.append((H[i], i))\n\n    for h, i in stack:\n        H[i] = h\n\n    for h, i in stack:\n        if H[i] > 0:\n            print(\"No\")\n            return\n        else:\n            H[i] = 1"
    },
    {
        "number": 4178,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, H_1, H_2, H_3, H_4, H_5 = map(int, stdin.split())\n    cnt = 0\n    for i in range(N):\n        if H_1 < H_2 + H_3 + H_4 + H_5 < H_1 + 1:\n            cnt += 1\n    if cnt == N:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4178,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N,H=map(int,stdin.split())\n    li=list(map(int,stdin.split()))\n    dp=[0]*N\n    for i in range(1,N):\n        for j in range(i):\n            if li[j]>=li[i]:\n                dp[i]=max(dp[i],dp[j]+1)\n    if sum(dp)>=H:\n        return \"Yes\"\n    else:\n        return \"No\"\n\nN,H=map(int,input().split())\nli=list(map(int,input().split()))\nprint(solution(li))\n\n'''\nInput:\n2\n1 1\n\nOutput:\nYes\n\n'''\n"
    },
    {
        "number": 4178,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def solve(N, H):\n        if N == 1: return True\n        if H == 1: return False\n        if N == 2: return True if H > 1 else False\n        if H % 2 == 0:\n            return solve(N - 1, H - 1)\n        else:\n            return solve(N - 1, H / 2)\n\n    return solve(int(stdin[0]), int(stdin[1]))\n\nTest Cases:\n>>> solution(\"5\")\nTrue\n>>> solution(\"2\")\nFalse\n>>> solution(\"3\")\nTrue\n>>> solution(\"4\")\nFalse\n>>> solution(\"5\")\nFalse\n>>> solution(\"1\")\nTrue\n>>> solution(\"2\")\nTrue\n>>> solution(\"2\")\nTrue\n>>> solution(\"2\")\nTrue\n\n\"\"\"\n"
    },
    {
        "number": 4178,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def solve(n, height):\n        if n == 1:\n            return \"Yes\"\n        if height <= 2:\n            return \"No\"\n        if height % 2 == 1:\n            return \"Yes\"\n        return solve(n - 1, height // 2)\n    return solve(int(stdin), int(stdin))\n\"\"\"\n\nclass Solution:\n    def isValid(self, s: str) -> bool:\n        stack = []\n        for i in range(len(s)):\n            if stack and stack[-1] == s[i] and self.isValid(s[i + 1:]) == True:\n                return False\n            else:\n                stack.append(s[i])\n        return True\n        "
    },
    {
        "number": 4179,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    result = ''\n    n, m = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    B = list(map(int, stdin.split()))\n    A.sort()\n    B.sort()\n    for i in range(n):\n        for j in range(m):\n            if i == 0:\n                result += A[j] + B[j]\n            elif j == 0:\n                result += A[i] + B[i]\n            elif i == 1:\n                result += A[i] * B[j]\n            elif j == m - 1:\n                result += A[i] * B[i - 1]\n            else:\n                result += A[i] * B[i - 1] + A[i] * B[j]\n    return result\n\n-----Sample Output-----\n2 3 -10\n1 2 3\n3 2 1\n1 2 2\n\n-----Sample Input-----\n1 2 3\n-10\n-10\n-10\n-10\n-10\n-10\n\n-----Sample Output-----\n1\n\nThe second code correctly solves this problem as explained above.\n\n-----Constraints-----\n - All values in input are integers.\n - -100 \\leq A_{ij} \\leq 100\n - -100 \\leq B_i \\leq 100\n - -100 \\leq C \\leq 100\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN M C\nB_1 B_2... B_M\nA_{11} A_{12}... A_{1M}\nA_{21} A_{22}... A_{2M}\n\\vdots\nA_{N1} A_{N2}... A_{NM}\n\n-----Output-----\nPrint the number of codes among the given N codes that correctly solve this problem.\n\n-----Sample Input-----\n2 3 -10\n1 2 3\n3 2 1\n1 2 2\n\n-----Sample Output-----\n1\n\nThe first code correctly solves this problem, as follows:\n - Since 3 \\times 1 + 2 \\times 2 + 1 \\times 3 + (-10) = 0 \\leq 0, the first code does not solve this problem.\n - 1 \\times 1 + 2 \\times 2 + 2 \\times 3 + (-10) = 1 > 0, the first code solves this problem.\ndef"
    },
    {
        "number": 4179,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    A = [list(map(int, input().split())) for _ in range(N)]\n    B = [list(map(int, input().split())) for _ in range(M)]\n    C = []\n    for i in range(M):\n        C.append(A[B[i][0]-1] + A[B[i][1]-1] + A[B[i][2]-1])\n    for i in range(N):\n        s = 0\n        for j in range(M):\n            if C[j] > 0:\n                s += 1\n        if s >= N-M+1:\n            print(N-s)\n            break\n    else:\n        print(0)\n\"\"\"\n\nclass Solution:\n    def numberOfCodes(self, N, M, B, C):\n        res = 0\n        for a in range(M):\n            for b in range(M):\n                if B[a][b] > 0:\n                    res += 1\n        for c in range(N):\n            if C[c] > 0:\n                res += 1\n        return res"
    },
    {
        "number": 4179,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def solve(n: int, d: int):\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        return solve(n-1, d-1) + solve(n-1, d)\n    \n    return solve(int(stdin), int(stdin))\n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n9\n\n10\n\n10\n\n10\n\n10\n\n10\n\n11\n\n12\n\n13\n\n14\n\n15\n\n16\n\n17\n\n17\n\n\n18\n\n19\n\n19\n\n20\n\n20\n\n20\n\n21\n\n22\n\n23\n\n24\n\n25\n\n26\n\n27\n\n27\n\n27\n\n28\n\n29\n\n30\n\n30\n\n30\n\n30\n\n31\n\n32\n\n33\n\n34\n\n35\n\n36\n\n37\n\n38\n\n39\n\n40\n\n41\n\n42\n\n43\n\n44\n\n45\n\n46\n\n47\n\n48\n\n49\n\n50\n\n51\n\n52\n\n53\n\n54\n\n55\n\n56\n\n57\n\n58\n\n59\n\n60\n\n61\n\n62\n\n63\n\n64\n\n65\n\n66\n\n67\n\n68\n\n69\n\n70\n\n71\n\n72\n\n72\n\n73\n\n74\n\n75\n\n76\n\n77\n\n78\n\n79\n\n80\n\n81\n\n82\n\n83\n\n84\n\n85\n\n86\n\n87\n\n88\n\n89\n\n90\n\n91\n\n92\n\n93\n\n94\n\n95\n\n96\n\n97\n\n98\n\n99\n\n100\n\n101\n\n102\n\n103\n\n104\n\n105\n\n106\n\n107\n\n108\n\n109\n\n110\n\n111\n\n112\n\n113\n\n114\n\n115\n\n116\n\n117\n\n118\n\n119\n\n120\n\n121\n\n122\n\n123\n\n124\n\n125\n\n126\n\n127\n\n128\n\n129\n\n130\n\n131\n\n132\n\n133\n\n134\n\n135\n\n136\n\n137\n\n138\n\n139\n\n140\n\n141\n\n142\n\n143\n\n144\n\n145\n\n146\n\n147\n\n148\n\n149\n\n150\n\n151\n\n152\n\n153\n\n154\n\n155\n\n156\n\n157\n\n158\n\n159\n\n160\n\n161\n\n162\n\n163\n\n164\n\n165\n\n166\n\n167\n\n168\n\n169\n\n170\n\n171\n\n172\n\n173\n\n174\n\n175\n\n176\n\n177\n\n178\n\n179\n\n180\n\n181\n\n182\n\n183\n\n184\n\n185\n\n186\n\n187\n\n188\n\n189\n\n190\n\n191\n\n192\n\n193\n\n194\n\n195\n\n196\n\n197\n\n198\n\n199\n\n200\n\n201\n\n202\n\n203\n\n204\n\n205\n\n206\n\n207\n\n208\n\n209\n\n210\n\n211\n\n212\n\n213\n\n214\n\n215\n\n216\n\n217\n\n218\n\n219\n\n220\n\n221\n\n222\n\n223\n\n224\n\n225\n\n226\n\n227\n\n228\n\n229\n\n230\n\n231\n\n232\n\n233\n\n234\n\n235\n\n236\n\n237\n\n238\n\n239\n\n240\n\n241\n\n242\n\n243\n\n244\n\n245\n\n246\n\n247\n\n248\n\n249\n\n250\n\n251\n\n252\n\n253\n\n254\n\n255\n\n256\n\n257\n\n258\n\n259\n\n260\n\n261\n\n262\n\n263\n\n264\n\n265\n\n266\n\n267\n\n268\n\n269\n\n270\n\n271\n\n272\n\n273\n\n274\n\n275\n\n276\n\n277\n\n278\n\n279\n\n280\n\n281\n\n282\n\n283\n\n284\n\n285\n\n286\n\n287\n\n288\n\n289\n\n290\n\n291\n\n292\n\n293\n\n294\n\n295\n\n296\n\n297\n\n298\n\n299\n\n300\n\n301\n\n302\n\n303\n\n304\n\n305\n\n306\n\n307\n\n308\n\n309\n\n310\n\n311\n\n312\n\n313\n\n314\n\n315\n\n316\n\n317\n\n318\n\n319\n\n320\n\n321\n\n322\n\n323\n\n324\n\n325\n\n326\n\n327\n\n328\n\n329\n\n330\n\n331\n\n332\n\n333\n\n334\n\n335\n\n336\n\n337\n\n338\n\n339\n\n340\n\n341\n\n342\n\n343\n\n344\n\n345\n\n346\n\n347\n\n348\n\n349\n\n350\n\n351\n\n352\n\n353\n\n354\n\n355\n\n356\n\n357\n\n358\n\n359\n\n360\n\n361\n\n362\n\n363\n\n364\n\n365\n\n366\n\n367\n\n368\n\n369\n\n370\n\n371\n\n372\n\n373\n\n374\n\n375\n\n376\n\n377\n\n378\n\n379\n\n380\n\n381\n\n382\n\n383\n\n384\n\n385\n\n386\n\n387\n\n388\n\n389\n\n390\n\n391\n\n392\n\n393\n\n394\n\n395\n\n396\n\n397\n\n398\n\n399\n\n400\n\n401\n\n402\n\n403\n\n404\n\n405\n\n406\n\n407\n\n408\n\n409\n\n410\n\n411\n\n412\n\n413\n\n414\n\n415\n\n416\n\n417\n\n418\n\n419\n\n420\n\n421\n\n422\n\n423\n\n424\n\n425\n\n426\n\n427\n\n428\n\n429\n\n430\n\n431\n\n432\n\n433\n\n434\n\n435\n\n436\n\n437\n\n438\n\n439\n\n440\n\n441\n\n442\n\n443\n\n444\n\n445\n\n446\n\n447\n\n448\n\n449\n\n450\n\n451\n\n452\n\n453\n\n454\n\n455\n\n456\n\n457\n\n458\n\n459\n\n460\n\n461\n\n462\n\n463\n\n464\n\n465\n\n466\n\n467\n\n468\n\n469\n\n470\n\n471\n\n472\n\n473\n\n474\n\n475\n\n476\n\n477\n\n478\n\n479\n\n480\n\n481\n\n482\n\n483\n\n484\n\n485\n\n486\n\n487\n\n488\n\n489\n\n490\n\n491\n\n492\n\n493\n\n494\n\n495\n\n496\n\n497\n\n498\n\n499\n\n500\n\n501\n\n502"
    },
    {
        "number": 4179,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    A = [list(map(int, input().split())) for _ in range(N)]\n    B = [list(map(int, input().split())) for _ in range(M)]\n    C = [list(map(int, input().split())) for _ in range(M)]\n    max_x = 0\n    for i in range(N):\n        for j in range(M):\n            max_x = max(max_x, A[i][j] + B[j][i])\n    for i in range(N):\n        for j in range(M):\n            C[j][i] = C[j][i] - max_x\n    for i in range(M):\n        for j in range(N):\n            A[i][j] = max(A[i][j], B[i][j])\n    answer = 1\n    for i in range(N):\n        for j in range(M):\n            if A[i][j] == max_x:\n                answer += 1\n    return str(answer)\n\nInput:\n2 3\n2 2\n1 2 3\n1 2 2\n1 2 1\n\nOutput:\n1\n\nExplanation:\nGiven M = 3, N = 2, each code can be solved as one pair of valid codes.\n\nSo, the total number of valid codes are 1 + 3 = 2 + 2 + 1 = 2 + 3 = 5.\n\nThe second solution is not the correct answer.\nIn the example above, the second valid code is valid only if the first valid code is valid.\nAlso, the first code is valid if A[0][0] = max(A[1][0], A[2][0],..., A[M-1][0]).\nSo, it's not valid because A[0][0]!= 0.\n\"\"\""
    },
    {
        "number": 4179,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, M, C = map(int, stdin.split())\n    B_1, B_2, B_3 = map(int, stdin.split())\n    A_1, A_2, A_3 = map(int, stdin.split())\n    if B_1 == A_1:\n        if B_2 == A_2:\n            if B_3 == A_3:\n                return \"1\"\n            else:\n                return \"0\"\n        else:\n            return \"0\"\n    else:\n        return \"0\"\n\"\"\"\n\nclass Solution:\n    def solution(self, stdin):\n        n, M, C = map(int, stdin.split())\n        A_1, A_2, A_3 = map(int, stdin.split())\n        B_1, B_2, B_3 = map(int, stdin.split())\n\n        A = A_1 + A_2 + A_3 + B_1 + B_2 + B_3\n        B = M - A - C\n        if A < 0:\n            A = A - B\n            A = -A\n        else:\n            A = A\n        return str(A)\n"
    },
    {
        "number": 4179,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split(' ')[0])\n    M = int(stdin.split(' ')[1])\n    B_1, B_2, B_3 = map(int, stdin.split(' ')[2:])\n    C = int(stdin.split(' ')[3])\n    B_i = B_1 + B_2 + B_3\n    N += 1\n    # N - 1 = 2^N - 1\n    # N - 2 = (N - 1)^2\n    # N - 3 = (N - 1)^3\n    # N - 4 = N^2 * 3\n    M += 1\n    def f(n, m):\n        return n * m\n    A_i = [0] * N\n    B_i = B_i + B_i\n    for i in range(1, N):\n        A_i[i] = f(A_i[i - 1], B_i)\n    for i in range(N):\n        for j in range(M):\n            if A_i[i] == C:\n                return str(i + 1)\n            A_i[i] = A_i[i] + A_i[i - 1]\n    return str(A_i[-1])\n\n\"\"\"\n"
    },
    {
        "number": 4179,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    A, B, C = [], [], []\n    for i in range(N):\n        A.append(int(stdin[i * 2]))\n        B.append(int(stdin[i * 2 + 1]))\n        C.append(int(stdin[i * 2 + 2]))\n    for i in range(M):\n        A_i, B_i, C_i = map(int, stdin[i * 2: i * 2 + 2].split())\n        A_i += 1\n        B_i += 1\n        C_i += 1\n        if A_i > 0 and B_i > 0 and C_i > 0:\n            if A_i + B_i + C_i > 0:\n                A_i_sum = sum(A)\n                B_i_sum = sum(B)\n                C_i_sum = sum(C)\n                if A_i_sum + B_i_sum + C_i_sum == A_i_sum + B_i_sum + C_i_sum - 1:\n                    print(A_i_sum + B_i_sum + C_i_sum)\n                    return A_i_sum + B_i_sum + C_i_sum\n    return None\n\n\nsample_input = \"1 2 3\"\nprint(solution(sample_input))\n\nsample_input = \"0 0 0 0 0 0 0\"\nprint(solution(sample_input))\n"
    },
    {
        "number": 4179,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, M, C = map(int, stdin.split())\n    A = [list(map(int, map(int, list(stdin[i:i+N])))) for i in range(0, len(stdin), N)]\n    B = [list(map(int, map(int, list(stdin[i:i+M])))) for i in range(0, len(stdin), M)]\n    count = 0\n    for i in range(N):\n        for j in range(M):\n            if A[i][j] + B[i][j] + C > 0:\n                count += 1\n    print(count)\n"
    },
    {
        "number": 4179,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n  N, M = list(map(int, stdin.split()))\n  A = list(map(int, stdin.split()))\n  B_M = list(map(int, stdin.split()))\n  B = []\n  C = []\n  for i in range(N):\n    for j in range(B_M[i], B_M[i]+M):\n      B.append(A[i] + j)\n      C.append(B[j] + B[j+1])\n  if sum(B) + sum(C) > 0:\n    return f\"{len(set(B))} {len(set(C))}\"\n  else:\n    return \"0\"\n\nN, M = list(map(int, input().split()))\nA = list(map(int, input().split()))\nB_M = list(map(int, input().split()))\nB = []\nC = []\nfor i in range(N):\n  for j in range(B_M[i], B_M[i]+M):\n    B.append(A[i] + j)\n  if sum(B) + sum(C) > 0:\n    print(len(set(B)))\n    exit()\n  else:\n    C.append(B[j] + B[j+1])\nprint(\"0\")"
    },
    {
        "number": 4179,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    A = []\n    for _ in range(N):\n        A.append(list(map(int, input().split())))\n    B = list(map(int, input().split()))\n    C = list(map(int, input().split()))\n    for i in range(M):\n        if A[i][0] == B[i] and A[i][1] == C[i]:\n            continue\n        else:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 4180,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    min_bills = 1000\n    answer = 0\n    for n in range(N+1):\n        if n < min_bills:\n            answer += n\n            min_bills = n\n        elif n < min_bills:\n            answer += n\n    return str(answer)\n\"\"\"\n\ndef"
    },
    {
        "number": 4180,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin.split(' ')[0]\n    N = int(N)\n    if N <= 0:\n        return '0'\n    N_yen = stdin.split(' ')[1]\n    N_yen = int(N_yen)\n\n    if N_yen == 0:\n        return '0'\n\n    change = 0\n    if N_yen >= 1000:\n        change += 100\n        N_yen -= 1000\n\n    print(change)\n    return str(change)\n\nprint(solution('1900'))\n"
    },
    {
        "number": 4180,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    count = n // 1000 + (k % 1000) // 100\n    change = n - count * 1000 - k * 100\n    if n % 1000 == 0:\n        return str(change)\n    else:\n        return str(change // 1000) + str(change % 1000)\n\n-----Sample Output-----\nOutput:\n100\n\"\"\"\n\ndef"
    },
    {
        "number": 4180,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    n = list(map(int, input().split()))\n    if len(n)!= 1:\n        return -1\n    else:\n        print(int(max(n) - min(n) - min(n) * 1000))\n    return 0"
    },
    {
        "number": 4180,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.rstrip())\n    amount = int(stdin.lstrip())\n    if N == 1:\n        return 0\n    change = amount\n    for i in range(1, N):\n        change += amount // 100\n        amount = change - amount // 100\n    return change\n"
    },
    {
        "number": 4180,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    min, max = 1, 10000\n    for i in range(len(stdin)):\n        num = stdin[i]\n        if num!= '0':\n            if num < min:\n                min, max = max, min\n            elif num > max:\n                max, min = min, max\n            elif num!= max:\n                print('error')\n                return 'error'\n            else:\n                print(min-max, num - min, num)\n    return str(min-max)\n\nInput is from standard input.\n"
    },
    {
        "number": 4180,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n >= k:\n        return str(n % k + 1)\n    elif n > k:\n        n -= k\n        return str(n % k + 1)\n    else:\n        return \"0\"\n\"\"\"\n\n\nclass Solution:\n    def change(self, n: int, change: int) -> int:\n        lst = [1, 2, 3]\n        while n > 1:\n            c = change % 10\n            n -= 1\n            change = int(change / 10)\n            if n == 0:\n                return lst[c]\n            lst.insert(c, lst[n] + lst[c])\n"
    },
    {
        "number": 4180,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n  N = int(stdin)\n\n  min_bills = 1000\n  max_bills = 10000\n  change = 0\n\n  for bill in range(min_bills, max_bills + 1):\n    change += bill\n    if change >= N:\n      break\n\n  return str(change)\n"
    },
    {
        "number": 4180,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin.split(\" \")\n    N = [int(n) for n in N]\n    N = sorted(N)\n    N = sum(N)\n    print(N - 100)\n    print(N - 100*1000)\n    print(N)\n    return \"100\""
    },
    {
        "number": 4180,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n  return str(int(stdin) - 1000)\n\ndef"
    },
    {
        "number": 4181,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = [int(x) for x in stdin.split()]\n    N = len(stdin.split())\n    monsters = list(map(int, stdin.split()))\n    monsters = [A + B * x for x in monsters]\n    monsters = sorted(monsters, reverse=True)\n    result = 0\n    for i in range(N):\n        result += monsters[i]\n    return str(result)\n\"\"\"\n\ndef"
    },
    {
        "number": 4181,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, B = map(int, stdin.split())\n    A_i = [int(stdin.split()[i+1]) for i in range(N)]\n    B_i = [int(stdin.split()[i+2]) for i in range(N)]\n    return str(max(A_i)+max(B_i))\n"
    },
    {
        "number": 4181,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    A_i = 0\n    B_i = 1\n    monsters = [0 for _ in range(B)]\n    for _ in range(N):\n        A_i = int(stdin.strip())\n        monsters[A_i] += 1\n        monsters[B_i] += 1\n        A_i += 2\n        B_i += 1\n    return str(monsters.index(max(monsters)))"
    },
    {
        "number": 4181,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    A_1 = list(map(int, stdin.strip().split()))\n    B_1 = list(map(int, stdin.strip().split()))\n    A_2 = list(map(int, stdin.strip().split()))\n    B_2 = list(map(int, stdin.strip().split()))\n    B_3 = list(map(int, stdin.strip().split()))\n    A_N = len(A_1)\n    A_1 = A_1[:A_N]\n    A_2 = A_2[:A_N]\n    A_3 = A_3[:A_N]\n    A_N = len(A_2)\n    B_N = len(B_1)\n    B_1 = B_1[:B_N]\n    B_2 = B_2[:B_N]\n    B_3 = B_3[:B_N]\n    B_N = len(B_3)\n    max_monsters = 0\n    for i in range(A_N + B_N):\n        if i < A_N:\n            max_monsters += A_1[i]\n        else:\n            max_monsters += B_1[i]\n        if i < B_N:\n            max_monsters += B_2[i]\n        else:\n            max_monsters += B_3[i]\n    print(max_monsters)\n    return str(max_monsters)\n\n\ndef"
    },
    {
        "number": 4181,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    a, b = (n, a), (n, b)\n    heroes = list(range(n+1))\n    max_monsters = n - 1\n    for i in range(1, n+1):\n        monsters = []\n        if i == a[0]:\n            monsters.append(i)\n            monsters.append(b[i-1])\n            if i == a[1]:\n                monsters.append(i)\n                monsters.append(b[i-2])\n            if i == a[2]:\n                monsters.append(i)\n                monsters.append(b[i-3])\n            if i == a[3]:\n                monsters.append(i)\n                monsters.append(b[i-4])\n            if i == a[4]:\n                monsters.append(i)\n                monsters.append(b[i-5])\n            if i == a[5]:\n                monsters.append(i)\n                monsters.append(b[i-6])\n            if i == a[6]:\n                monsters.append(i)\n                monsters.append(b[i-7])\n            if i == a[7]:\n                monsters.append(i)\n                monsters.append(b[i-8])\n        if i == b[0]:\n            monsters.append(i)\n            monsters.append(b[i-1])\n            if i == b[1]:\n                monsters.append(i)\n                monsters.append(b[i-2])\n            if i == b[2]:\n                monsters.append(i)\n                monsters.append(b[i-3])\n            if i == b[3]:\n                monsters.append(i)\n                monsters.append(b[i-4])\n            if i == b[4]:\n                monsters.append(i)\n                monsters.append(b[i-5])\n            if i == b[5]:\n                monsters.append(i)\n                monsters.append(b[i-6])\n            if i == b[6]:\n                monsters.append(i)\n                monsters.append(b[i-7])\n            if i == b[7]:\n                monsters.append(i)\n                monsters.append(b[i-8])\n        if i == a[0]:\n            monsters.append(i)\n            monsters.append(b[i-1])\n            if i == a[1]:\n                monsters.append(i)\n                monsters.append(b[i-2])\n            if i == a[2]:\n                monsters.append(i)\n                monsters.append(b[i-3])\n            if i == a[3]:\n                monsters.append(i)\n                monsters.append(b[i-4])\n            if i == a[4]:\n                monsters.append(i)\n                monsters.append(b[i-5])\n            if i == a[5]:\n                monsters.append(i)\n                monsters.append(b[i-6])\n            if i == a[6]:\n                monsters.append(i)\n                monsters.append(b[i-7])\n            if i == a[7]:\n                monsters.append(i)\n                monsters.append(b[i-8])\n        if i == a[1]:\n            monsters.append(i)\n            monsters.append(b[i-1])\n            if i == a[2]:\n                monsters.append(i)\n                monsters.append(b[i-2])\n            if i == a[3]:\n                monsters.append(i)\n                monsters.append(b[i-3])\n            if i == a[4]:\n                monsters.append(i)\n                monsters.append(b[i-4])\n            if i == a[5]:\n                monsters.append(i)\n                monsters.append(b[i-5])\n            if i == a[6]:\n                monsters.append(i)\n                monsters.append(b[i-6])\n            if i == a[7]:\n                monsters.append(i)\n                monsters.append(b[i-7])\n        if i == a[2]:\n            monsters.append(i)\n            monsters.append(b[i-1])\n            if i == a[3]:\n                monsters.append(i)\n                monsters.append(b[i-2])\n            if i == a[4]:\n                monsters.append(i)\n                monsters.append(b[i-3])\n            if i == a[5]:\n                monsters.append(i)\n                monsters.append(b[i-4])\n            if i == a[6]:\n                monsters.append(i)\n                monsters.append(b[i-5])\n            if i == a[7]:\n                monsters.append(i)\n                monsters.append(b[i-6])\n        if i == a[3]:\n            monsters.append(i)\n            monsters.append(b[i-1])\n            if i == a[4]:\n                monsters.append(i)\n                monsters.append(b[i-2])\n            if i == a[5]:\n                monsters.append(i)\n                monsters.append(b[i-3])\n            if i == a[6]:\n                monsters.append(i)\n                monsters.append(b[i-4])\n            if i == a[7]:\n                monsters.append(i)\n                monsters.append(b[i-5])\n        if i == a[4]:\n            monsters.append(i)\n            monsters.append(b[i-1])\n            if i == a[5]:\n                monsters.append(i)\n                monsters.append(b[i-2])\n            if i == a[6]:\n                monsters.append(i)\n                monsters.append(b[i-3])\n            if i == a[7]:\n                monsters.append(i)\n                monsters.append(b[i-4])\n        if i == a[5]:\n            monsters.append(i)\n            monsters.append(b[i-1])\n            if i == a[6]:\n                monsters.append(i)\n                monsters.append(b[i-2])\n            if i == a[7]:\n                monsters.append(i)\n                monsters.append(b[i-3])\n        if i == a[6]:\n            monsters.append(i)\n            monsters.append(b[i-1])\n            if i == a[7]:\n                monsters.append(i)\n                monsters.append(b[i-2])\n            if i == a[8]:\n                monsters.append(i)\n                monsters.append(b[i-3])\n        if i == a[7]:\n            monsters.append(i)\n            monsters.append(b[i-1])\n            if i == a[8]:\n                monsters.append(i)\n                monsters.append(b[i-2])"
    },
    {
        "number": 4181,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    A_1 = list(map(int, stdin.strip().split()))\n    A_2 = list(map(int, stdin.strip().split()))\n    A = sorted(A_1 + A_2)\n    B_1 = list(map(int, stdin.strip().split()))\n    B_2 = list(map(int, stdin.strip().split()))\n    B = sorted(B_1 + B_2)\n    A_i = 0\n    B_i = 0\n    for i in range(N):\n        A_i += A[i]\n        B_i += B[i]\n        if A_i > B_i:\n            A_i -= B_i\n            A_i = A_i // 2\n            A_i = int(A_i)\n            A_i = A_i // 10\n            A_i = A_i * 10\n    A_i = int(A_i)\n    A_i = A_i // 10\n    A_i = A_i * 10\n    B_i = int(B_i)\n    B_i = B_i // 10\n    B_i = B_i * 10\n    if A_i > B_i:\n        return str(A_i + B_i + 1)\n    elif A_i == B_i:\n        return str(A_i + B_i + 1)\n    else:\n        return str(A_i + B_i)"
    },
    {
        "number": 4181,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, A_1, B_1, A_2, B_2, A_3, B_3, A_4, B_4, A_5, B_5, A_6, B_6, A_7, B_7, A_8, B_8, A_9, B_9, A_10, B_10, A_11, B_11, A_12, B_12, A_13, B_13, A_14, B_14, A_15, B_15, A_16, B_16, A_17, B_17, A_18, B_18, A_19, B_19, A_20, B_20, A_21 = map(int, stdin.split())\n    B_i = B_1 + B_2 + B_3 + B_4 + B_5 + B_6 + B_7 + B_8 + B_9 + B_10 + B_11 + B_12 + B_13 + B_14 + B_15 + B_16 + B_17 + B_18 + B_19 + B_20 + B_21\n    m = N + 1\n    B_i = B_i % m\n    count = 0\n    while B_i < m:\n        m = (m // B_i) * B_i + m % B_i\n        count += m\n    return count"
    },
    {
        "number": 4181,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    A_1 = list(map(int, stdin.split()))\n    B_1 = list(map(int, stdin.split()))\n    A_2 = list(map(int, stdin.split()))\n    B_2 = list(map(int, stdin.split()))\n    A_3 = list(map(int, stdin.split()))\n    B_3 = list(map(int, stdin.split()))\n    A_4 = list(map(int, stdin.split()))\n    B_4 = list(map(int, stdin.split()))\n    A_5 = list(map(int, stdin.split()))\n    B_5 = list(map(int, stdin.split()))\n    A_6 = list(map(int, stdin.split()))\n    B_6 = list(map(int, stdin.split()))\n    A_7 = list(map(int, stdin.split()))\n    B_7 = list(map(int, stdin.split()))\n    A_8 = list(map(int, stdin.split()))\n    B_8 = list(map(int, stdin.split()))\n    A_9 = list(map(int, stdin.split()))\n    B_9 = list(map(int, stdin.split()))\n    A_10 = list(map(int, stdin.split()))\n    B_10 = list(map(int, stdin.split()))\n    A_11 = list(map(int, stdin.split()))\n    B_11 = list(map(int, stdin.split()))\n    A_12 = list(map(int, stdin.split()))\n    B_12 = list(map(int, stdin.split()))\n    A_13 = list(map(int, stdin.split()))\n    B_13 = list(map(int, stdin.split()))\n    A_14 = list(map(int, stdin.split()))\n    B_14 = list(map(int, stdin.split()))\n    A_15 = list(map(int, stdin.split()))\n    B_15 = list(map(int, stdin.split()))\n    A_16 = list(map(int, stdin.split()))\n    B_16 = list(map(int, stdin.split()))\n    A_17 = list(map(int, stdin.split()))\n    B_17 = list(map(int, stdin.split()))\n    A_18 = list(map(int, stdin.split()))\n    B_18 = list(map(int, stdin.split()))\n    A_19 = list(map(int, stdin.split()))\n    B_19 = list(map(int, stdin.split()))\n    A_20 = list(map(int, stdin.split()))\n    B_20 = list(map(int, stdin.split()))\n    A_21 = list(map(int, stdin.split()))\n    B_21 = list(map(int, stdin.split()))\n    A_22 = list(map(int, stdin.split()))\n    B_22 = list(map(int, stdin.split()))\n    A_23 = list(map(int, stdin.split()))\n    B_23 = list(map(int, stdin.split()))\n    A_24 = list(map(int, stdin.split()))\n    B_24 = list(map(int, stdin.split()))\n    A_25 = list(map(int, stdin.split()))\n    B_25 = list(map(int, stdin.split()))\n    A_26 = list(map(int, stdin.split()))\n    B_26 = list(map(int, stdin.split()))\n    A_27 = list(map(int, stdin.split()))\n    B_27 = list(map(int, stdin.split()))\n    A_28 = list(map(int, stdin.split()))\n    B_28 = list(map(int, stdin.split()))\n    A_29 = list(map(int, stdin.split()))\n    B_29 = list(map(int, stdin.split()))\n    A_30 = list(map(int, stdin.split()))\n    B_30 = list(map(int, stdin.split()))\n    A_31 = list(map(int, stdin.split()))\n    B_31 = list(map(int, stdin.split()))\n    A_32 = list(map(int, stdin.split()))\n    B_32 = list(map(int, stdin.split()))\n    A_33 = list(map(int, stdin.split()))\n    B_33 = list(map(int, stdin.split()))\n    A_34 = list(map(int, stdin.split()))\n    B_34 = list(map(int, stdin.split()))\n    A_35 = list(map(int, stdin.split()))\n    B_35 = list(map(int, stdin.split()))\n    A_36 = list(map(int, stdin.split()))\n    B_36 = list(map(int, stdin.split()))\n    A_37 = list(map(int, stdin.split()))\n    B_37 = list(map(int, stdin.split()))\n    A_38 = list(map(int, stdin.split()))\n    B_38 = list(map(int, stdin.split()))\n    A_39 = list(map(int, stdin.split()))\n    B_39 = list(map(int, stdin.split()))\n    A_40 = list(map(int, stdin.split()))\n    B_40 = list(map(int, stdin.split()))\n    A_41 = list(map(int, stdin.split()))\n    B_41 = list(map(int, stdin.split()))\n    A_42 = list(map(int, stdin.split()))\n    B_42 = list(map(int, stdin.split()))\n    A_43 = list(map(int, stdin.split()))\n    B_43 = list(map(int, stdin.split()))\n    A_44 = list(map(int, stdin.split()))\n    B_44 = list(map(int, stdin.split()))\n    A_45 = list(map(int, stdin.split()))\n    B_45 = list(map(int, stdin.split()))\n    A_46 = list(map(int, stdin.split()))\n    B_46 = list(map(int, stdin.split()))\n    A_47 = list(map(int, stdin.split()))\n    B_47 = list(map(int, stdin.split()))\n    A_48 = list(map(int, stdin.split()))\n    B_48 = list(map(int, stdin.split()))\n    A_49 = list(map(int,"
    },
    {
        "number": 4181,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, B = map(int, stdin.split())\n    N = N - 1\n    A = int(stdin.split(' ')[0])\n    B = B - 1\n    result = 0\n    for i in range(0, N + 1):\n        result = result + (A ** i) * B\n    return str(result)\n"
    },
    {
        "number": 4181,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n        N = int(stdin)\n        A = []\n        B = []\n        for i in range(1,N+1):\n            A.append(int(stdin[i]))\n        for i in range(1,N+1):\n            B.append(int(stdin[i]))\n        \n        answer = 0\n        \n        for i in range(1,N+1):\n            answer += (A[i-1] + B[i-1])\n        \n        return str(answer)\n\n-----Sample Output-----\nSample Input\n2\n3 5 2\n4 5\n\nSample Output\n9\n\"\"\"\n\ndef"
    },
    {
        "number": 4182,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M, X, Y = map(int, stdin.split())\n\n    if X >= M or Y < 0:\n        return 'No War'\n\n    if N + M + 2 >= X + Y >= 2:\n        return 'War'\n\n    left, right = X, X + M\n    result = 'Yes'\n    j = 2\n    while j < X + Y:\n        if left <= right <= right + M:\n            result = 'No'\n            break\n        if right <= left <= left + M:\n            result = 'No'\n            break\n        if right + M <= left <= right + M:\n            left += M\n            right += M\n        else:\n            left += M - right\n            right = M - left\n        if right + M <= left <= right + M:\n            result = 'Yes'\n            break\n        if right + M <= left <= right + M:\n            left += M\n            right = M - left\n        else:\n            left = M - right\n            right = M - left\n        j += 1\n    return result\n\n-----Sample Output-----\nWar\n\nThis choice Z = 16 satisfies all of the three conditions as follows, thus they will come to an agreement.\n\nHence, the choice Z = 16 is the only valid answer for this challenge.\n\n-----Sample Input-----\n3 2 10 20\n8 15 13\n16 22\n\n-----Sample Output-----\nWar\n"
    },
    {
        "number": 4182,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    z = x * y\n    a, b, c = map(int, stdin.split())\n    if a - c >= x or c - a >= x:\n        return 'No War'\n    if b - c >= y or c - b >= y:\n        return 'No War'\n    if z - a >= x or a - z >= y:\n        return 'No War'\n    if z - b >= y or b - z >= y:\n        return 'No War'\n    return 'War'\n"
    },
    {
        "number": 4182,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, x, y = map(int, stdin.split())\n    x_1, x_2, y_1, y_2 = map(int, stdin.split())\n    if x_1 > x_2 or y_1 > y_2:\n        return 'No War'\n    if x_1 <= x_2 <= y_1 <= y_2:\n        return 'War'\n    return 'No War'"
    },
    {
        "number": 4182,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, M, X, Y = map(int, stdin.split())\n\n    if X > Y:\n        X, Y = Y, X\n\n    if X < Y:\n        X, Y = Y, X\n\n    if X == Y:\n        return 'No War'\n\n    if M > N:\n        M, N = N, M\n\n    dist = list(map(abs, (X - M, Y - N)))\n    dist.sort()\n\n    # Check if minimum number of turns is greater than maximum number of turns\n    if dist[-1] > dist[-2]:\n        return 'War'\n\n    # If maximum number of turns is greater than smallest number of turns\n    # -> B is not an issue, and B is updated to a different number\n    # In this case we want to update B\n    B = max(M, N)\n\n    if B >= dist[-1]:\n        B = dist[-1]\n\n    # Find all indexes of the minimum number of turns\n    i = 0\n    while i < len(dist):\n        if dist[i] >= B:\n            break\n        i += 1\n\n    # if we have found B, we can now update the minimum number of turns\n    if i < len(dist):\n        B = dist[i]\n\n    # if we haven't found anything, then B is not an index\n    if i < len(dist):\n        B = -1\n\n    # if we are not at the last index, then B is not at last index\n    if i > len(dist) - 1:\n        B = -1\n\n    # update B by checking if B is a solution\n    if dist[i] == B:\n        return 'War'\n    else:\n        return 'No War'\n"
    },
    {
        "number": 4182,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, M, x_1, x_2, y_1, y_2, y_M = map(int, stdin.split())\n    z = M - (x_1 * N + x_2 * M + y_1 * M + y_2 * N)\n    if (z < x_1) or (z < x_2):\n        return 'No War'\n    elif z > y_M:\n        return 'War'\n    else:\n        return 'No War'\n\"\"\""
    },
    {
        "number": 4182,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, M, x, y, z = list(map(int, stdin.split()))\n    x_n = list(map(int, stdin.split()))\n    y_m = list(map(int, stdin.split()))\n    y_n = list(map(int, stdin.split()))\n    z_m = list(map(int, stdin.split()))\n    z_n = list(map(int, stdin.split()))\n    answer = ''\n    for i in range(N):\n        for j in range(M):\n            answer = answer + str(x_n[i] - x_n[j]) + ','\n        for k in range(M):\n            answer = answer + str(y_m[i] - y_m[k]) + ','\n        for l in range(M):\n            answer = answer + str(z_m[i] - z_m[l]) + ','\n        for m in range(N):\n            for n in range(M):\n                answer = answer + str(x_n[m] - x_n[n]) + ','\n            for o in range(M):\n                answer = answer + str(y_n[m] - y_n[o]) + ','\n            for p in range(N):\n                answer = answer + str(z_n[m] - z_n[p]) + ','\n            answer = answer[:-1]\n    print(answer)\n    return answer\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4182,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, M, x_1, x_2, y_1, y_2, y_m = map(int, stdin.split())\n    x_1 = abs(x_1)\n    x_2 = abs(x_2)\n    y_1 = abs(y_1)\n    y_2 = abs(y_2)\n    x_m = abs(M)\n    y_m = abs(y_m)\n    if (x_m > y_m):\n        x_m, y_m = y_m, x_m\n    x_n = abs(x_1 - x_2)\n    y_n = abs(y_1 - y_2)\n    while (x_n > y_n):\n        x_n = x_n - x_n // x_n\n        y_n = y_n - y_n // y_n\n    if (x_n < y_n):\n        x_n = y_n\n        y_n = x_n\n    if (x_1 < x_2):\n        x_1, x_2 = x_2, x_1\n    if (x_1 > x_2):\n        x_1, x_2 = x_2, x_1\n    if (y_1 < y_2):\n        y_1, y_2 = y_2, y_1\n    if (y_1 > y_2):\n        y_1, y_2 = y_2, y_1\n    if (x_m % 2 == 1):\n        print(\"War\")\n        return \"Yes\"\n    if (x_m % 2 == 0):\n        print(\"No War\")\n        return \"No\"\n\n--------------------------------------------------------------------------------\n\nsolution_one = Solution.solution_one\nsolution_two = Solution.solution_two\nsolution_three = Solution.solution_three\n"
    },
    {
        "number": 4182,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nTime Limit: 1 sec\nMemory Limit: 128 MB\n\nRuntime: 152 ms (40.48%)\nMemory Usage: 14 MB (15.06%)\n\n-----Original-----\n1\n8\n16\n\n1\n8\n16\n\n2\n9\n1\n9\n4\n1\n5\n6\n7\n9\n3\n\n-----Original-----\n2\n7\n3\n\n4\n8\n8\n4\n\n5\n1\n9\n\n-----Original-----\n3\n4\n8\n9\n\n3\n5\n8\n8\n\n4\n1\n8\n\n-----Original-----\n2\n3\n\n-----Original-----\n1\n9\n\n4\n3\n\n-----Original-----\n\n-----Original-----\n4\n\n-----Original-----\n2\n\n-----Original-----\n2\n\n-----Original-----\n\n-----Original-----\n3\n\n-----Original-----\n5\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n4\n\n-----Original-----\n8\n\n-----Original-----\n1\n\n-----Original-----\n\n-----Original-----\n4\n\n-----Original-----\n5\n\n-----Original-----\n\n-----Original-----\n3\n\n-----Original-----\n5\n\n-----Original-----\n1\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n3\n\n-----Original-----\n5\n\n-----Original-----\n1\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n5\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n5\n\n-----Original-----\n1\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n5\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----Original-----\n\n-----"
    },
    {
        "number": 4182,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    x, y = map(int, stdin.split())\n    N, M = map(int, stdin.split())\n    x_N, y_N = map(int, stdin.split())\n    x_M, y_M = map(int, stdin.split())\n    x_1, x_2, y_1, y_2 = map(int, stdin.split())\n    if x > x_N and y > y_N:\n        x, y = x_N, y_N\n    elif x > x_M and y > y_M:\n        x, y = x_M, y_M\n    elif x < x_1 and y < y_1:\n        x, y = x_1, y_1\n    elif x < x_2 and y < y_2:\n        x, y = x_2, y_2\n    elif x < x_M and y > y_M:\n        x, y = x_M, y_M\n    elif x < x_1 and y > y_1:\n        x, y = x_1, y_1\n    elif x < x_2 and y > y_2:\n        x, y = x_2, y_2\n    elif x > x_1 and y > y_1:\n        x, y = x_1, y_1\n    elif x > x_2 and y > y_2:\n        x, y = x_2, y_2\n    if x < 0:\n        x = 0\n    if y < 0:\n        y = 0\n    if y > N:\n        y = N\n    if x < 0:\n        x = 0\n    if x > N:\n        x = N\n    if y < 0:\n        y = 0\n    if y > M:\n        y = M\n    if x < 0:\n        x = 0\n    if x > N:\n        x = N\n    if y < 0:\n        y = 0\n    if y > M:\n        y = M\n    print(\"War\" if ((x == y) or (x == y + 1) or (x == y - 1)) else \"No War\")"
    },
    {
        "number": 4182,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, M, X, Y = map(int, stdin.split())\n    x_1 = N-1\n    x_2 = (N-1)//2\n    x_3 = (N-1)//2 + (N-1)%2\n    x_4 = (N-1)//2 + (N-1)%2\n    x_5 = (N-1)//2 + (N-1)%2 + (N-1)%2\n    x_6 = (N-1)//2 + (N-1)%2 + (N-1)%2 + (N-1)%2\n    x_7 = (N-1)//2 + (N-1)%2 + (N-1)%2 + (N-1)%2 + (N-1)%2\n    x_8 = (N-1)//2 + (N-1)%2 + (N-1)%2 + (N-1)%2 + (N-1)%2 + (N-1)%2\n    x_9 = (N-1)//2 + (N-1)%2 + (N-1)%2 + (N-1)%2 + (N-1)%2 + (N-1)%2 + (N-1)%2\n    x_10 = (N-1)//2 + (N-1)%2 + (N-1)%2 + (N-1)%2 + (N-1)%2 + (N-1)%2 + (N-1)%2 + (N-1)%2\n    x_11 = (N-1)//2 + (N-1)%2 + (N-1)%2 + (N-1)%2 + (N-1)%2 + (N-1)%2 + (N-1)%2 + (N-1)%2\n    x_12 = (N-1)//2 + (N-1)%2 + (N-1)%2 + (N-1)%2 + (N-1)%2 + (N-1)%2 + (N-1)%2 + (N-1)%2\n    x_13 = (N-1)//2 + (N-1)%2 + (N-1)%2 + (N-1)%2 + (N-1)%2 + (N-1)%2 + (N-1)%2 + (N-1)%2\n    x_14 = (N-1)//2 + (N-1)%2 + (N-1)%2 + (N-1)%2 + (N-1)%2 + (N-1)%2 + (N-1)%2 + (N-1)%2\n    x_15 = (N-1)//2 + (N-1)%2 + (N-1)%2 + (N-1)%2 + (N-1)%2 + (N-1)%2 + (N-1)%2 + (N-1)%2\n    x_16 = (N-1)//2 + (N-1)%2 + (N-1)%2 + (N-1)%2 + (N-1)%2 + (N-1)%2 + (N-1)%2 + (N-1)%2 + (N-1)%2\n    x_17 = (N-1)//2 + (N-1)%2 + (N-1)%2 + (N-1)%2 + (N-1)%2 + (N-1)%2 + (N-1)%2 + (N-1)%2 + (N-1)%2\n    x_18 = (N-1)//2 + (N-1)%2 + (N-1)%2 + (N-1)%2 + (N-1)%2 + (N-1)%2 + (N-1)%2 + (N-1)%2 + (N-1)%2\n    x_19 = (N-1)//2 + (N-1)%2 + (N-1)%2 + (N-1)%2 + (N-1)%2 + (N-1)%2 + (N-1)%2 + (N-1)%2 + (N-1)%2\n    x_20 = (N-1)//2 + (N-1)%2 + (N-1)%2 + (N-1)%2 + (N-1)%2 + (N-1)%2 + (N-1)%2 + (N-1)%2 + (N-1)%2 + (N-1)%2\n    x_21 = (N-1)//2 + (N-1)%2 + (N-1)%2 + (N-1)%2 + (N-1)%2 + (N-1)%2 + (N-1)%2 + (N-1)%2 + (N-1)%2 + (N-1)%2 + (N-1)%2\n    x_22 = (N-1)//2 + (N-1)%2 + (N-1)%2 + (N-1)%2 + (N-1)%2 + (N-1)%2 + (N-1)%2 + (N-1)%2 + (N-1)%2 + (N-1)%2 + (N-1)%2 + (N-1)%2\n    x_23 = (N-1)//2 + (N-1)%2 + (N-1)%2 + (N-1)%2 + (N-1)%2 + (N-1)%2 + (N-1)%2 + (N-1)%2 + (N-1)%2 + (N-1)%2 + (N-1)%2 + (N-1)%2 + (N-1)%2\n    x_24 = (N-1)//2 + (N-1)%2 + (N-1)%2 + (N-1)%2 + (N-1)%2 + (N-1)%2 + (N-1)%2 + (N-1)%2 + (N-1)%2 + (N-1)%2 + (N-1)%2 + (N-1)%2 + (N-1)%2\n    x_25 = (N-1)//2 + (N-1)%2 + (N-1)%2 + (N-1)%2 + (N-1)%2 + (N-1)%2 + (N-1)"
    },
    {
        "number": 4183,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    t_set = set()\n    for _ in range(n):\n        t, n = map(int, stdin.strip().split())\n        t_set.add(t)\n        if t % 360 == 0:\n            for _ in range(n):\n                t += 360\n                t_set.add(t)\n    return str(len(t_set)) + \" \" + str(len(t_set))\n"
    },
    {
        "number": 4183,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, T = map(int, stdin.split())\n    while n > 0:\n        print(n, end=' ')\n        n -= 1\n        T -= 1\n        if T % 60 == 0:\n            print(T // 60)\n            T %= 60\n        if T % 1 == 0:\n            print(T)\n            T = 0\n    return \"0\""
    },
    {
        "number": 4183,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, T_1, T_N = map(int, stdin.split())\n    # https://www.acmicpc.net/problem/1439\n    # Runtime: 1868 ms, faster than 37.77% of Python3 online submissions for Hand of Clocks.\n    # Memory Usage: 18.8 MB, less than 34.46% of Python3 online submissions for Hand of Clocks.\n    \n    clock_list = [0 for _ in range(N+1)]\n    for _ in range(T_1):\n        clock_list[0] += 1\n        clock_list[1] += 1\n        clock_list[2] += 1\n        clock_list[3] += 1\n        clock_list[4] += 1\n        clock_list[5] += 1\n        clock_list[6] += 1\n        \n    # max_n = N\n    # # DFS\n    # # in_count = 0\n    # # out_count = 0\n    # # for i in range(1, max_n+1):\n    # #     in_count += clock_list[i]\n    # #     out_count += clock_list[i] - clock_list[i-1]\n    # #     if in_count == out_count:\n    # #         print(clock_list[i-1])\n    # #         in_count = 0\n    # #         out_count = 0\n    # for i in range(N+1):\n    #     clock_list[i] = clock_list[i] - clock_list[i-1]\n    #     if clock_list[i] == 0:\n    #         break\n    # print(clock_list)\n    # return \"\"\n    \n    ans = 0\n    i = N\n    while i > 0:\n        if i % T_1 == 0:\n            ans += T_1\n            i -= T_1\n        elif i % T_N == 0:\n            ans += T_N\n            i -= T_N\n        else:\n            i -= 1\n    print(ans)\n    return \"\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4183,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    N, T_1, T_N = list(map(int, stdin.split()))\n    hand_of_clocks = list(map(int, stdin.split()))\n    result = 0\n    clock_count = 0\n    \n    for i in range(N-1):\n        for clock in hand_of_clocks[i+1:]:\n            if clock <= clock_count:\n                clock_count = clock\n                result = T_1\n            else:\n                result += T_1\n                clock_count += clock\n                T_1 = T_N\n    \n    if clock_count == 0:\n        result = T_1\n    else:\n        result += T_1\n    \n    return str(result)"
    },
    {
        "number": 4183,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n  n = int(stdin)\n  t = [0]*n\n  t[0] = n-1\n  t[n-1] = n-1\n  for i in range(1, n):\n    t[i] = t[i-1] + 60*60*24\n  return '{:.0f}'.format(sum(t[1:n]))\n\nTime complexity: O(N)\nSpace Complexity: O(N)\n\"\"\"\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        return \"%.3f\" % (sum(map(int, map(str, stdin.split()))) / 60 / 60)"
    },
    {
        "number": 4183,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, T_1, T_2 = map(int, stdin.split())\n    t1 = T_1 * 360\n    t2 = T_2 * 360\n    t1 %= 360\n    t2 %= 360\n    return str(t1 + t2)\n\ndef"
    },
    {
        "number": 4183,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    T_1 = int(stdin[0])\n    T_2 = int(stdin[1])\n    T_4 = int(stdin[2])\n    T_6 = int(stdin[3])\n    N_2 = N - (T_1 * T_2 * T_4 * T_6)\n    T_3 = (N - T_1) % T_2\n    T_4 = (N - T_1) // T_2\n    T_5 = (N - T_1) // T_3\n    T_6 = (N - T_1) // T_4\n    T_7 = (N - T_1) // T_5\n    T_8 = (N - T_1) // T_6\n    T_9 = (N - T_1) // T_7\n    T_10 = (N - T_1) // T_8\n    T_11 = T_1 - (T_9 * T_10 * T_3 * T_2 * T_1)\n    T_12 = (N - T_1) // T_11\n    T_13 = T_1 + (T_12 * T_4 * T_2 * T_1)\n    T_14 = (N - T_1) // T_13\n    T_15 = T_1 + (T_14 * T_4 * T_6 * T_7 * T_8)\n    T_16 = (N - T_1) // T_14\n    T_17 = T_1 + (T_16 * T_2 * T_3 * T_4 * T_5 * T_6 * T_7 * T_8)\n    T_18 = (N - T_1) // T_17\n    T_19 = T_1 + (T_18 * T_2 * T_3 * T_4 * T_5 * T_6 * T_7 * T_8 * T_9)\n    T_20 = (N - T_1) // T_19\n    T_21 = T_1 + (T_20 * T_3 * T_4 * T_5 * T_6 * T_7 * T_8 * T_9 * T_10)\n    T_22 = (N - T_1) // T_21\n    T_23 = T_1 + (T_22 * T_4 * T_5 * T_6 * T_7 * T_8 * T_9 * T_10 * T_11)\n    T_24 = (N - T_1) // T_23\n    T_25 = T_1 + (T_24 * T_4 * T_5 * T_6 * T_7 * T_8 * T_9 * T_10 * T_11 * T_12)\n    T_26 = (N - T_1) // T_24\n    T_27 = T_1 + (T_26 * T_4 * T_5 * T_6 * T_7 * T_8 * T_9 * T_10 * T_11 * T_12 * T_13)\n    T_28 = (N - T_1) // T_27\n    T_29 = T_1 + (T_28 * T_4 * T_5 * T_6 * T_7 * T_8 * T_9 * T_10 * T_11 * T_12 * T_13 * T_14)\n    T_30 = (N - T_1) // T_28\n    T_31 = T_1 + (T_30 * T_4 * T_5 * T_6 * T_7 * T_8 * T_9 * T_10 * T_11 * T_12 * T_13 * T_14 * T_15)\n    T_32 = (N - T_1) // T_31\n    T_33 = T_1 + (T_32 * T_4 * T_5 * T_6 * T_7 * T_8 * T_9 * T_10 * T_11 * T_12 * T_13 * T_14 * T_15 * T_16)\n    T_34 = (N - T_1) // T_33\n    T_35 = T_1 + (T_34 * T_4 * T_5 * T_6 * T_7 * T_8 * T_9 * T_10 * T_11 * T_12 * T_13 * T_14 * T_15 * T_16 * T_17)\n    T_36 = (N - T_1) // T_34\n    T_37 = T_1 + (T_36 * T_4 * T_5 * T_6 * T_7 * T_8 * T_9 * T_10 * T_11 * T_12 * T_13 * T_14 * T_15 * T_16 * T_17 * T_18)\n    T_38 = (N - T_1) // T_37\n    T_39 = T_1 + (T_38 * T_4 * T_5 * T_6 * T_7 * T_8 * T_9 * T_10 * T_11 * T_12 * T_13 * T_14 * T_15 * T_16 * T_17 * T_18 * T_19)\n    T_40 = (N - T_1) // T_38\n    T_41 = T_1 + (T_40 * T_4 * T_5 * T_6 * T_7 * T_8 * T_9 * T_10 * T_11 * T_12 * T_13 * T_14 * T_15 * T_16 * T_17 * T_18 * T_19 * T_20)\n    T_42 = (N - T_1) // T_41\n    T_43 = T_1 + (T_42 * T_4 * T_5 * T_6 * T_7 * T_8 * T_9 * T_10 * T_11 * T_12 * T_13 * T_14 * T_15 * T_16 * T_17 * T_18 * T_19 * T_20 * T_21)\n    T_44 = (N - T_1) // T_42\n    T_45 = T_1 + (T_44 * T_4 * T_5 * T_6 * T_7 * T_8 * T_9 * T_10 * T_11 * T_12 * T_13 * T_14 * T_15 * T_16 * T_17 * T_18 * T_19 * T_20 * T_21 * T_22)\n    T_46 = (N - T_1) // T_45\n    T_47 = T_1 + (T_46 * T_4 * T_5 * T_6 * T_7 * T_8 * T_9 * T_10 * T_11 * T_12 * T_13 * T_14 * T_15 * T_16 * T_17 * T_18 * T_19 * T_20 * T_21 * T_22 * T_23)\n    T_48 = (N - T_1) // T_46\n    T_49 = T_1 + (T_48 * T_4 * T_5 * T_6 * T_7 * T_8 * T_9 * T_10 * T_11 * T_12 * T_13 * T_14 * T_15 * T_"
    },
    {
        "number": 4183,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, T_1, T_2 = map(int, stdin.split())\n    while T_1 > T_2:\n        T_1 %= T_2\n    if T_1 < T_2:\n        T_1 += T_2\n    return f'{T_1 // T_2}'"
    },
    {
        "number": 4183,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, t_list, t_list2 = map(int, stdin.split())\n    numbers = sorted(list(map(int, stdin.split())))\n    \n    # print(numbers)\n    \n    def check(numbers):\n        # 1~n\n        # 180~360\n        # 360~180\n        # 180*180\n        # 180*180*180\n        \n        lst = []\n        for i in range(len(numbers)):\n            lst.append(numbers[i]*(360/(180*180))*(180/(180*180)))\n        \n        for i in range(len(numbers)):\n            if lst[i] < numbers[i]:\n                lst[i] = numbers[i]\n            if lst[i] > numbers[i]:\n                lst[i] = numbers[i]*(-1)\n            \n        return lst\n        \n        \n    lst = check(numbers)\n    \n    print(len(lst))\n    \n    result = 0\n    for i in range(len(t_list)):\n        result += t_list[i]*lst[i]\n    \n    return str(int(result))"
    },
    {
        "number": 4183,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n  def solution(stdin):\n    N, T = map(int, stdin.split())\n    times = sorted([t for t in range(T) if t % N == 0])\n    return''.join([str(time) for time in times])\n  return solution(stdin)\n"
    },
    {
        "number": 4184,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, T, *s = map(int, stdin)\n    return str(abs(sum(s[0:T]) - sum(s[T:])))\n\nInput:\nN = 3\nT = 1\nS = [1, 2, 3]\nOutput:\n\"0\"\n\"\"\"\ndef"
    },
    {
        "number": 4184,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n  n = int(stdin.split(\" \")[0])\n  k = int(stdin.split(\" \")[1])\n  nums = [int(num) for num in stdin.split(\" \")[2:]]\n  answer = 10**9\n  for i in range(n):\n    for j in range(k):\n      sum_ = nums[i] + nums[i+1] + nums[i+2]\n      if sum_ < answer:\n        answer = sum_\n  print(answer)\n  return str(answer)"
    },
    {
        "number": 4184,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    ls = list(map(int, input().split()))\n    sum_ls = sum(ls)\n    if sum_ls % n!= 0:\n        return \"IMPOSSIBLE\"\n    ls.sort()\n    \n    count = 0\n    for i in range(n):\n        if ls[i] == i + 1:\n            count += 1\n    if count == 0:\n        return \"IMPOSSIBLE\"\n    \n    if n == 2:\n        sum_ls //= 2\n    else:\n        sum_ls //= 2 + n\n        \n    diff = 0\n    for i in range(n):\n        diff += abs(ls[i] - i + 1)\n    \n    return str(diff)\n\n---------------Constraints-------------------\n1 \\leq N \\leq 100\n-1 \\leq W_i \\leq 100\n-1 \\leq W_i \\leq 100\n\n-----------------Sample Input-------------------\n3\n1 2 3\n\n-----------------Sample Output-------------------\n0\n\n---------------Constraints-------------------\n1 \\leq N \\leq 100\n-1 \\leq W_i \\leq 100\n-1 \\leq W_i \\leq 100\n\n---------------Sample Input-------------------\n5\n10 3 1\n\n---------------Sample Output-------------------\n9\n\n-----------------------OUTPUT---------------------\nIMPOSSIBLE\n\n-----------------------OUTPUT---------------------\n1\n\n-----------------------OUTPUT---------------------\n0\n\n-----------------------OUTPUT---------------------\n-1\n\n-----------------------OUTPUT---------------------\n0\n\n-----------------------OUTPUT---------------------\nIMPOSSIBLE\n\n-----------------------OUTPUT---------------------\n1\n\n-----------------------OUTPUT---------------------\n0\n\n-----------------------OUTPUT---------------------\n0\n\n-----------------------OUTPUT---------------------\n0\n\n-----------------------OUTPUT---------------------\nIMPOSSIBLE\n\n-----------------------OUTPUT---------------------\n0\n\n-----------------------OUTPUT---------------------\n\n-----------------------OUTPUT---------------------\n-1\n\n-----------------------OUTPUT---------------------\n\n-----------------------OUTPUT---------------------\n0\n\n-----------------------OUTPUT---------------------\n-1\n\n-----------------------OUTPUT---------------------\n-1\n\n-----------------------OUTPUT---------------------\n-1\n\n-----------------------OUTPUT---------------------\n-1\n\n-----------------------OUTPUT---------------------\n-1\n\n-----------------------OUTPUT---------------------\n-1\n\n-----------------------OUTPUT---------------------\n\n-----------------------OUTPUT---------------------\n-1\n\n-----------------------OUTPUT---------------------\n0\n\n-----------------------OUTPUT---------------------\n0\n\n-----------------------OUTPUT---------------------\nIMPOSSIBLE\n\n-----------------------OUTPUT---------------------\n-1\n\n-----------------------OUTPUT---------------------\n-1\n\n-----------------------OUTPUT---------------------\n-1\n\n-----------------------OUTPUT---------------------\n-1\n\n-----------------------OUTPUT---------------------\n-1\n\n-----------------------OUTPUT---------------------\n-1\n\n-----------------------OUTPUT---------------------\nIMPOSSIBLE\n\n-----------------------OUTPUT---------------------\n-1\n\n-----------------------OUTPUT---------------------\n-1\n\n-----------------------OUTPUT---------------------\n-1\n\n-----------------------OUTPUT---------------------\n-1\n\n-----------------------OUTPUT---------------------\n-1\n\n-----------------------OUTPUT---------------------\n-1\n\n-----------------------OUTPUT---------------------\n-1\n\n-----------------------OUTPUT---------------------\n-1\n\n-----------------------OUTPUT---------------------\nIMPOSSIBLE\n\n-----------------------OUTPUT---------------------\n-1\n\n-----------------------OUTPUT---------------------\n-1\n\n-----------------------OUTPUT---------------------\n-1\n\n-----------------------OUTPUT---------------------\n-1\n\n-----------------------OUTPUT---------------------\n-1\n\n-----------------------OUTPUT---------------------\n-1\n\n-----------------------OUTPUT---------------------\n-1\n\n-----------------------OUTPUT---------------------\n-1\n\n-----------------------OUTPUT---------------------\n-1\n\n-----------------------OUTPUT---------------------\n-1\n\n-----------------------OUTPUT---------------------\n-1\n\n-----------------------OUTPUT---------------------\n-1\n\n-----------------------OUTPUT---------------------\n-1\n\n-----------------------OUTPUT---------------------\nIMPOSSIBLE\n\n-----------------------OUTPUT---------------------\n-1\n\n-----------------------OUTPUT---------------------\n-1\n\n-----------------------OUTPUT---------------------\n-1\n\n-----------------------OUTPUT---------------------\n-1\n\n-----------------------OUTPUT---------------------\n-1\n\n-----------------------OUTPUT---------------------\n-1\n\n-----------------------OUTPUT---------------------\n-1\n\n-----------------------OUTPUT---------------------\n-1\n\n-----------------------OUTPUT---------------------\n-1\n\n-----------------------OUTPUT---------------------\n-1\n\n-----------------------OUTPUT---------------------\n-1\n\n-----------------------OUTPUT---------------------\n-1\n\n-----------------------OUTPUT---------------------\n-1\n\n-----------------------OUTPUT---------------------\n-1\n\n-----------------------OUTPUT---------------------\n-1\n\n-----------------------OUTPUT---------------------\n-1\n\n-----------------------OUTPUT---------------------\n-1\n\n-----------------------OUTPUT---------------------\n-1\n\n-----------------------OUTPUT---------------------\n-1\n\n-----------------------OUTPUT---------------------\n-1\n\n-----------------------OUTPUT---------------------\n-1\n\n-----------------------OUTPUT---------------------\n-1\n\n-----------------------OUTPUT---------------------\n-1\n\n-----------------------OUTPUT---------------------\n-1\n\n-----------------------OUTPUT---------------------\n-1\n\n-----------------------OUTPUT---------------------\n-1\n\n-----------------------OUTPUT---------------------\n-1\n\n-----------------------OUTPUT---------------------\n-1\n\n-----------------------OUTPUT---------------------\n-1\n\n-----------------------OUTPUT---------------------\n-1\n\n-----------------------OUTPUT---------------------\n-1\n\n-----------------------OUTPUT---------------------\n-1\n\n-----------------------OUTPUT---------------------\n-1\n\n-----------------------OUTPUT---------------------\n-1\n\n-----------------------OUTPUT---------------------\n-1\n\n-----------------------OUTPUT---------------------\n-1\n\n-----------------------OUTPUT---------------------\n-1\n\n-----------------------OUTPUT---------------------\n-1\n\n-----------------------OUTPUT---------------------\n-1\n\n-----------------------OUTPUT---------------------\n-1\n\n-----------------------OUTPUT---------------------\n-1\n\n-----------------------OUTPUT---------------------\n-1\n\n-----------------------OUTPUT---------------------\n-1\n\n-----------------------OUTPUT---------------------\n-1\n\n-----------------------OUTPUT---------------------\n-1\n\n-----------------------OUTPUT---------------------\n-1\n\n-----------------------OUTPUT---------------------\n-1\n\n-----------------------OUTPUT---------------------\n-1\n\n-----------------------OUTPUT---------------------\n-1\n\n-----------------------OUTPUT---------------------\n-1\n\n-----------------------OUTPUT---------------------\n-1\n\n-----------------------OUTPUT---------------------\n-1\n\n-----------------------OUTPUT---------------------\n-1\n\n-----------------------OUTPUT---------------------\n-1\n\n-----------------------OUTPUT---------------------\n-1\n\n-----------------------OUTPUT---------------------\n-1\n\n-----------------------OUTPUT---------------------\n-1\n\n-----------------------OUTPUT---------------------\n-1\n\n-----------------------OUTPUT---------------------\n-1\n\n-----------------------OUTPUT---------------------\n-1\n\n-----------------------OUTPUT---------------------\n-1\n\n-----------------------OUTPUT---------------------\n-1\n\n-----------------------OUTPUT---------------------\n-1\n\n-----------------------OUTPUT---------------------\n-1\n\n-----------------------OUTPUT---------------------\n-1"
    },
    {
        "number": 4184,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    weights = list(map(int, stdin.split()))\n    \n    if n < 3:\n        return str(max(weights))\n    \n    m1, m2 = 1, 1\n    \n    for i in range(2, n):\n        m1 = m1 + weights[i]\n        m2 = m2 + weights[i-1]\n    \n    if m1 > m2:\n        return str(m1 - m2)\n    else:\n        return str(m2 - m1)\n        \n"
    },
    {
        "number": 4184,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    w = list(map(int, stdin.strip().split()))\n    T = int(stdin.strip().split()[-1])\n    S_1 = 0\n    S_2 = 0\n    for i in range(0, N):\n        S_1 += w[i]\n        if i + T < N:\n            S_2 += w[i + T]\n    return str(abs(S_1 - S_2))\n"
    },
    {
        "number": 4184,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s1, s2 = 0, 0\n    for i in range(int(stdin)):\n        n = int(stdin[i])\n        s1 += n\n        s2 += n - 1\n    if s1 == s2:\n        return str(abs(s1))\n    if s1 < s2:\n        return str(abs(s2 - s1))\n    return str(abs(s1 - s2))\n\"\"\"\n\ndef"
    },
    {
        "number": 4184,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.strip())\n    N = int(stdin.strip())\n    W_1, W_2 = [], []\n    for i in range(N):\n        if T == 2:\n            W_1.append(int(stdin.strip()[i]))\n        else:\n            W_2.append(int(stdin.strip()[i]))\n    \n    S_1 = W_1[0]\n    S_2 = W_2[0]\n    for i in range(1, N):\n        S_1 += W_1[i]\n        S_2 += W_2[i]\n    if T == 2:\n        S_1 -= W_1[N-1]\n        S_2 -= W_2[N-1]\n    \n    if abs(S_1 - S_2) < abs(T):\n        return str(abs(S_1-S_2))\n    else:\n        return str(abs(S_1-S_2))"
    },
    {
        "number": 4184,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        N = int(stdin[i+1])\n        W_i = int(stdin[i+2])\n        W_i -= 1\n        W_i += N\n        W_i -= 1\n        W_i += N\n        if t == 2:\n            S_1 = 1 + 2\n            S_2 = 3\n        else:\n            S_1 = 3\n            S_2 = 3 - S_1\n    return str(abs(S_1 - S_2))\n\nThe input we will pass to solution() is a series of integer numbers, where the first half are the numbers from 1 to N. The second half are the numbers from N to 1.\n\nExamples\n\"3 4\"\n\"1 3\"\n\"1 6\"\n\"1 2\"\n\"1 3\"\n\"2 2\"\n\"2 2\"\n\"3 2\"\n\"3 3\"\n\"4 3\"\n\"5 4\"\n\"6 5\"\n\"7 6\"\n\n\"1 2\"\n\"2 1\"\n\"1 2\"\n\"3 1\"\n\"4 3\"\n\"5 3\"\n\"6 3\"\n\n\"1\"\n\"2\"\n\"3\"\n\"4\"\n\"5\"\n\"6\"\n\"7\"\n\"8\"\n\n\"1 4\"\n\"2 4\"\n\"3 4\"\n\"4 4\"\n\"5 4\"\n\"6 4\"\n\"7 4\"\n\"8 4\"\n\"9 4\"\n\"10 4\"\n\n\"3 6\"\n\"1 3\"\n\"1 6\"\n\"2 2\"\n\"2 2\"\n\"3 2\"\n\"3 3\"\n\"4 3\"\n\"5 3\"\n\"6 3\"\n\n\"1 2\"\n\"2 1\"\n\"1 2\"\n\"3 1\"\n\"4 3\"\n\"5 3\"\n\"6 3\"\n\n\"1\"\n\"2\"\n\"3\"\n\"4\"\n\"5\"\n\"6\"\n\n\"1 4\"\n\"2 4\"\n\"3 4\"\n\"4 4\"\n\"5 4\"\n\"6 4\"\n\"7 4\"\n\"8 4\"\n\n\"1 2\"\n\"2 1\"\n\"1 2\"\n\"3 1\"\n\"4 3\"\n\"5 3\"\n\"6 3\"\n\n\"1\"\n\"2\"\n\"3\"\n\"4\"\n\"5\"\n\"6\"\n\nThe output should be \"0\".\n\nInput:\n[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"]\n\nOutput:\n\"0\"\n\nExplanation:\nN = 2\nW_1 = 1\nW_2 = 1\nW_3 = 2\nW_4 = 3\nW_5 = 4\nW_6 = 5\nW_7 = 6\nW_8 = 7\nW_9 = 8\n\n\"\"\"\nclass Solution:\n    def solution(self,stdin):\n        return str(abs(int(stdin[0])-int(stdin[1])))\n"
    },
    {
        "number": 4184,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    w = list(map(int, stdin.split()))\n    # print(w)\n    s = 0\n    for i in range(n-1):\n        s += w[i]\n    # print(s)\n    if s >= n:\n        s -= n\n    # print(s)\n    for i in range(n-2, -1, -1):\n        s += w[i]\n    # print(s)\n    if s >= n:\n        s -= n\n    # print(s)\n    if s < 0:\n        return '-1'\n    return str(s)\n\nInput/Output\nInput\n2\n1 2 3\nSample Output\n0\nExplanation\nWe want to find the minimum absolute difference of the weights in two groups: the weights with indices not greater than T, and those with indices greater than T, for some integer 1 \\leq T < N.\n\nTo find the minimum absolute difference, we'll consider the first group of weights.\nWe have N weights indexed 1 to N. The mass of the weight indexed i is W_i.\nWe will divide these weights into two groups: the weights with indices not greater than T, and those with indices greater than T, for some integer 1 \\leq T < N. Let S_1 be the sum of the masses of the weights in the former group, and S_2 be the sum of the masses of the weights in the latter group.\n\n-----Constraints-----\n - 2 \\leq N \\leq 100\n - 1 \\leq W_i \\leq 100\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nW_1 W_2... W_{N-1} W_N\n\n-----Output-----\nPrint the minimum possible absolute difference of S_1 and S_2.\n\n-----Sample Input-----\n3\n1 2 3\n\n-----Sample Output-----\n0\n\nIf T = 2, S_1 = 1 + 2 = 3 and S_2 = 3, with the absolute difference of 0.\ndef"
    },
    {
        "number": 4184,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    w = []\n    for i in range(N):\n        w.append(int(stdin.strip()[i]))\n    W_1 = sum(w[:N//2])\n    W_2 = sum(w[N//2:])\n    for i in range(N-1):\n        W_1 -= w[i]*2\n        W_2 += w[i]\n    if abs(W_1-W_2) < abs(N-1):\n        return str(abs(W_1-W_2))\n    else:\n        return str(abs(N-1))\n\n\"\"\"\n"
    },
    {
        "number": 4185,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [list(map(int, input().split())) for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            if a[i][j] == 0:\n                a[i][j] = '0'\n            elif a[i][j] == 1:\n                a[i][j] = '1'\n            else:\n                a[i][j] = '0'\n    for i in range(n):\n        a[i][0] = a[i][0] + a[i][1]\n        a[i][n - 1] = a[i][n - 1] + a[i][n - 2]\n        a[i][m - 1] = a[i][m - 1] + a[i][m - 2]\n    for j in range(n):\n        a[0][j] = a[0][j] + a[0][j + 1]\n        a[m - 1][j] = a[m - 1][j] + a[m - 1][j + 1]\n    for i in range(n):\n        for j in range(n):\n            if a[i][j] == '0':\n                print(0)\n                break\n            elif a[i][j] == '1':\n                print(1)\n                break\n    else:\n        print(0)\n\n-----Constraints-----\n\n0 <= n <= 10^4\nm <= n^2\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4185,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, m = map(int, stdin.split())\n    \n    a = [[1] * (m + 1)]\n    \n    for j in range(1, n + 1):\n        a.append([1] + [a[i][j] + a[i][j - 1] for i in range(1, j + 1)])\n    \n    a.sort()\n    \n    i, j = 1, 1\n    \n    for j in range(1, n + 1):\n        \n        for i in range(1, m + 1):\n            \n            if a[i][j] > a[i][j - 1]:\n                i, j = i, j\n                a[i][j], a[i][j - 1] = a[i][j - 1], a[i][j]\n    \n    return str(i - 1)\n"
    },
    {
        "number": 4185,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n > m:\n        m, n = n, m\n    answer = 0\n    for i in range(n):\n        answer += 1\n        for j in range(m):\n            a = list(map(int, input().split()))\n            if a[1] == a[2] == a[3]:\n                a[1] = a[1] + 1\n                a[2] = a[2] + 1\n                a[3] = a[3] + 1\n                a[4] = a[4] + 1\n                a[5] = a[5] + 1\n                a[6] = a[6] + 1\n                a[7] = a[7] + 1\n                a[8] = a[8] + 1\n                answer += 1\n                a = list(map(str, a))\n                a = \"\".join(a)\n                if a.count(\" \") == 1:\n                    a = a.split(\" \")\n                    a = \"\".join(a)\n                    a = int(a)\n                    if a == 0:\n                        continue\n                    answer += a\n                    continue\n                else:\n                    answer += 1\n                    continue\n    return str(answer)\n"
    },
    {
        "number": 4185,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    a = [[] for i in range(n)]\n    for i in range(m):\n        a[i].append(i+1)\n        a[i].append(i+2)\n    ans = 0\n    while a:\n        ans += 1\n        for j in range(len(a)):\n            for i in range(len(a[j])):\n                if i!= 0 and i!= len(a[j])-1 and a[j][i-1] > a[j][i+1]:\n                    a[j][i], a[j][i-1] = a[j][i-1], a[j][i]\n    return str(ans)\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= m <= 10^5\n\n-----Divide and Conquer-----\n\nn = 6\nm = 3\n\n\"\"\"\nimport sys\nn, m = list(map(int, sys.stdin.readline().strip().split()))\nmatrix = []\nfor i in range(n):\n    matrix.append(list(map(int, sys.stdin.readline().strip().split())))\nn, m = len(matrix), len(matrix[0])\nfor row in matrix:\n    row.sort()\n\ndef"
    },
    {
        "number": 4185,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    print(sum(a))\n    return \"\"\n\nNote: The columns are shifted both up and down cyclically, so the answer is $0$.\n'''\n\ndef"
    },
    {
        "number": 4185,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin.strip())\n    if m <= 2 or m >= 10**5:\n        return str(0)\n    n = len(str(m))\n    matrix = [0] * n\n    for i in range(m):\n        matrix[i] = [int(x) for x in str(i + 1)]\n    moves = []\n    for j in range(n - 1, -1, -1):\n        for i in range(m):\n            if matrix[i][j] == matrix[i][j + 1]:\n                moves.append(j + 1)\n                break\n        else:\n            for i in range(m):\n                matrix[i][j] = 0\n                break\n    if len(moves) < m:\n        for i in range(len(moves), m):\n            matrix[i] = [0] * n\n    return \"\".join(str(x) for x in matrix)"
    },
    {
        "number": 4185,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [[0] * (m+2) for _ in range(n+1)]\n    for i in range(n):\n        a[i][i] = 1\n    j, k = 0, 1\n    for i in range(n-1):\n        a[i+1][j+1] = k\n        j += 2\n        k += 1\n    for i in range(m-1):\n        a[j+1][i+1] = m+1\n        j += 2\n        i += 1\n    for i in range(n-1, -1, -1):\n        for j in range(m-1):\n            a[i][j] = max(a[i+1][j], a[i][j+1])\n            a[i][j+1] = max(a[i+1][j], a[i][j+1])\n            if j == 0:\n                a[i][0] = max(a[i+1][j+1], a[i][j+1])\n            if j == m - 1:\n                a[i][m] = max(a[i+1][j], a[i][j])\n        if k == 1:\n            a[0][m-1] = max(a[0][m+1], a[m-1][m+1])\n        k += 1\n    if a[0][m-1] == a[1][m-1]:\n        a[0][m-1] = a[0][m]\n        a[0][0] = 0\n    return str(a[n][m])\n"
    },
    {
        "number": 4185,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = [list(map(int, input().strip().split())) for _ in range(n)]\n    m = n - 1\n    i, j = 0, 1\n    a[i][j] = a[i][j] - 1\n    for _ in range(n - 2):\n        i, j = i + 1, j + 1\n        while j >= 0 and j < n and a[i][j] >= a[i - 1][j]:\n            j = j - 1\n        a[i][j] = a[i][j] + 1\n    if i > 0 and i < n:\n        a[i][j] = a[i][j] - 1\n    for _ in range(n - 1):\n        i, j = i + 1, j - 1\n        while j >= 0 and j < n and a[i][j] >= a[i - 1][j]:\n            j = j - 1\n        a[i][j] = a[i][j] + 1\n    for _ in range(n):\n        i, j = i - 1, j + 1\n        while j >= 0 and j < n and a[i][j] >= a[i][j - 1]:\n            j = j - 1\n        a[i][j] = a[i][j] + 1\n    for _ in range(n - 1):\n        i, j = i - 1, j - 1\n        while j >= 0 and j < n and a[i][j] >= a[i][j + 1]:\n            j = j + 1\n        a[i][j] = a[i][j] + 1\n    for _ in range(n):\n        i, j = i + 1, j + 1\n        while j >= 0 and j < n and a[i][j] >= a[i + 1][j]:\n            j = j - 1\n        a[i][j] = a[i][j] + 1\n    answer = 0\n    for i in range(n):\n        for j in range(n):\n            answer = answer + a[i][j]\n    return str(answer)\n\nprint(solution(stdin))"
    },
    {
        "number": 4185,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    m = m + 1\n    n = n + 1\n    a = [[0] * (m + 2)]\n    for _ in range(n):\n        a.append([0] + [int(s) for s in stdin.split()] + [0])\n    a.append([0] * (m + 2))\n    for j in range(m - 1):\n        a.append(a[j].copy())\n    for j in range(m - 1):\n        for i in range(n):\n            a[i][j] = a[i][j + 1] + a[i][j + 2]\n    for j in range(n - 1):\n        for i in range(j + 1):\n            a[i][j + 2] += a[i][j]\n    for j in range(n - 1):\n        for i in range(j + 1):\n            a[i][j] += a[i][j + 1]\n    ans = 0\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] >= 10 ** 9:\n                ans += 1\n                break\n    return str(ans)\n\nprint(solution(\"3 3\"))"
    },
    {
        "number": 4185,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = [list(map(int, stdin.split())) for _ in range(3)]\n    n = a[0][0]\n    m = a[1][0]\n    for i in range(1, n):\n        a[i][0] = a[i - 1][0] + a[i - 1][1]\n        a[i][1] = a[i - 1][1] + a[i - 1][2]\n    for i in range(2, m + 2):\n        a[0][i] = a[0][i - 1] + a[0][i - 2]\n        a[1][i] = a[1][i - 1] + a[1][i - 2]\n    return str(sum([sum(row) for row in a]))\n\nn, m = map(int, input().split())\na = [[int(i) for i in input().split()] for _ in range(n)]\nprint(solution(input()))\n\n\nimport sys\nsys.stdin = open('input.txt', 'r')\ninput = sys.stdin.readline\n\ndef"
    },
    {
        "number": 4186,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(i) for i in stdin.split()]\n    a.sort()\n    total = sum(a)\n    res = (sum(a[:int(total / 2)]) + sum(a[int(total / 2):])) // 2\n    return str(res)\n\n\"\"\""
    },
    {
        "number": 4186,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a_1, a_2, a_3 = map(int, stdin.split())\n    a_1_2 = a_1 + a_2\n    a_3_2 = a_3 + a_2\n    if a_1_2 == a_3_2:\n        return str(1 + min(a_1_2, a_3_2))\n    return str(min(a_1_2, a_3_2))\n"
    },
    {
        "number": 4186,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    skill = [int(i) for i in stdin.split()]\n    a = [i for i in range(n)]\n    res = [0 for _ in range(n)]\n    for i in range(n):\n        for j in range(i):\n            if skill[i] == skill[j]:\n                res[i] += 1\n                break\n            elif skill[i] > skill[j]:\n                a[i] = j\n                break\n    return ''.join(str(i) for i in sorted(res))\n\n-----------------\n\n\"\"\"\n\nimport unittest\n\ndef"
    },
    {
        "number": 4186,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2!= 0:\n        return 'Invalid'\n    l = sorted(map(int, stdin.split()))\n    n = n//2\n    if n % 2!= 0:\n        return 'Invalid'\n    if l[0] == l[1]:\n        return 'Invalid'\n    if l[1] == l[2]:\n        return 'Invalid'\n    if l[2] == l[3]:\n        return 'Invalid'\n    if l[0] + l[1] + l[2] + l[3] == n:\n        return 'Valid'\n    return 'Invalid'\n\n-----Brute-force-----\n\ndef"
    },
    {
        "number": 4186,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4186,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, a_1, a_2 = map(int, stdin.split())\n    n_ = int(math.sqrt(n))\n    \n    ans = 0\n    for i in range(1, n_):\n        for j in range(i, n, i):\n            ans += a_1 * (j - i) // 2\n            ans += a_2 * (i - j) // 2\n    return str(ans)"
    },
    {
        "number": 4186,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    result = 0\n    \n    for i in range(n//2):\n        teamA = set()\n        teamB = set()\n        \n        for j in range(i*2, n, 2*i):\n            teamA.add(j)\n            teamB.add(j+1)\n        \n        result = max(result, len(teamA) + len(teamB))\n    \n    return str(result)\n"
    },
    {
        "number": 4186,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 == 0:\n        return n // 2\n    else:\n        return n - 1"
    },
    {
        "number": 4186,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n\n    if n <= 0:\n        return ''\n\n    s = n // 2\n\n    res = []\n    for i in range(2, n + 2, 2):\n        res.append([i, i + i])\n        res.append([i + i, i + 2])\n\n    # print(res)\n\n    # if len(res) % 2!= 0:\n    #     res = res[:len(res) // 2]\n    #     print(res)\n\n    # print(len(res))\n\n    for i in res:\n        # print(i)\n        if sum(i) % 2!= 0:\n            # print(sum(i))\n            # print(sum(i) // 2)\n            # print(sum(i) // 2, i[0], i[1])\n            continue\n        # print(sum(i) // 2)\n        # print(sum(i) // 2, i[0], i[1])\n        # print(sum(i) // 2, i[1], i[0])\n\n        # print(sum(i))\n        # print(sum(i) // 2)\n        # print(sum(i) // 2, i[0], i[1])\n        # print(sum(i) // 2, i[1], i[0])\n\n    # print(sum(i) // 2)\n    # print(sum(i) // 2, i[0], i[1])\n    # print(sum(i) // 2, i[1], i[0])\n    # print(sum(i) // 2, i[1], i[1])\n\n    return str(sum(i) // 2)\n\n\nsolution(input())\n"
    },
    {
        "number": 4186,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = map(int, stdin.split())\n    a_sum = sum(a)\n    if a_sum % 2 == 1:\n        return \"9\"\n    n /= 2\n    answer = 0\n    for i in range(n):\n        if a[i] % 2 == 1:\n            answer += 1\n    return str(answer)"
    },
    {
        "number": 4187,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n,a=[int(i) for i in stdin.split(\" \")]\n    working_hours=[0]*n\n    rest_hours=[0]*(n+1)\n    for i in range(1,n+1):\n        working_hours[i]=working_hours[i-1]+a[i-1]\n    for i in range(n,0,-1):\n        rest_hours[i-1]=rest_hours[i]+a[i-1]\n    for i in range(1,n+1):\n        if(i==1):\n            working_hours[i]=0\n        else:\n            working_hours[i]=working_hours[i-1]+a[i-1]\n        rest_hours[i]=rest_hours[i-1]+a[i-1]\n    print(min(working_hours))\n    print(max(working_hours))\n    print(min(rest_hours))\n    print(max(rest_hours))\n    return \"Yes\"\n\n##Main Code\nn,a=[int(i) for i in input().split(\" \")]\nworking_hours=[0]*n\nrest_hours=[0]*(n+1)\nfor i in range(1,n+1):\n    working_hours[i]=working_hours[i-1]+a[i-1]\nfor i in range(n,0,-1):\n    rest_hours[i-1]=rest_hours[i]+a[i-1]\nprint(min(working_hours))\nprint(max(working_hours))\nprint(min(rest_hours))\nprint(max(rest_hours))\n"
    },
    {
        "number": 4187,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    work = (a + b) // (n + 1)\n    rest = (a + b) % (n + 1)\n    # print(work, rest)\n    if rest == 0:\n        return str(1)\n    elif rest == 1:\n        return str(2)\n    else:\n        return str(work)\n"
    },
    {
        "number": 4187,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = [int(i) for i in stdin.split(\" \")]\n    res = []\n    \n    for i in range(n):\n        for j in range(1, n):\n            if a[i] > 0:\n                res.append(a[i])\n                a[i] -= 1\n                a[j] += 1\n    \n    for i in range(n-1, 0, -1):\n        if a[i] > 0:\n            res.append(a[i])\n            a[i] -= 1\n            a[n-i] += 1\n    \n    return \" \".join(str(i) for i in res)\n\n\ndef"
    },
    {
        "number": 4187,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    s = list(map(int, stdin.split()))\n    s.sort()\n    answer = 0\n    for i in range(m):\n        if i % 2 == 0:\n            answer += s[i]\n            i += 1\n        else:\n            answer += s[i]\n            i += 1\n            if i == m:\n                answer += 1\n    return str(answer)\n\n\n-----Constraints-----\n0 <= n <= 1000\n1 <= m <= 10^5\n-10^9 <= a_i <= 10^9\n\n-----Time Limit-----\n1 sec\n\n\"\"\"\n\n\nclass Solution:\n    def numberOfArrays(self, n: int, a: List[int]) -> int:\n        # Time complexity: O(n)\n        # Space Complexity: O(n)\n        # Runtime: 14 ms (72.15%)\n        # Memory Usage: 17.8 MB (39.18%)\n        result = 0\n        res = []\n        arr = []\n        for i in range(n):\n            arr.append(a[i])\n            if arr[0] == 0:\n                result += 1\n                arr.pop(0)\n                arr.pop(0)\n            elif arr[-1] == 0:\n                result += 1\n                arr.pop(-1)\n                arr.pop(-1)\n            else:\n                result += 1\n                arr.pop(arr.index(arr[0]))\n                arr.pop(arr.index(arr[-1]))\n        return result\n"
    },
    {
        "number": 4187,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    for i in range(n):\n        if a[i] == 0:\n            a[i] = 1\n        elif a[i] == 1:\n            a[i] = 0\n        else:\n            a[i] = 1\n    print(sum(a))\nsolution(input())"
    },
    {
        "number": 4187,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, a = list(map(int, stdin.split()))\n    a = a * (n-1)\n    cnt = 0\n    for i in range(n):\n        if a[i] == 0:\n            cnt += 1\n            a[i] = 1\n    return str(cnt)\n\ndef"
    },
    {
        "number": 4187,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin)\n    a_1 = [int(c) for c in stdin]\n    a_2 = []\n    \n    for i in range(n):\n        a_2.append(a_1[i]+a_1[i+1])\n    \n    for i in range(n-2):\n        a_1[i+1] = a_1[i] + a_1[i+1]\n        a_1[i] = a_1[i] + a_1[i+1]\n        \n    a_1[n-2] = a_1[n-2] + a_1[n-1]\n    \n    answer = 0\n    \n    for i in range(n):\n        answer = answer + a_1[i]\n        answer = answer + a_1[i+1]\n        answer = answer + a_2[i]\n        answer = answer + a_2[i+1]\n        \n    return str(answer)\n\ndef"
    },
    {
        "number": 4187,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin.strip())\n    a_p = list(map(int, stdin.strip().split()))\n    \n    res = 0\n    for i in range(n):\n        if a_p[i] == 0:\n            res += 1\n        else:\n            res += a_p[i] - 1\n        a_p[i] = 0\n    \n    return str(res)\n\n\nprint(solution(\"1 0 1 0 1\"))\nprint(solution(\"6\"))\nprint(solution(\"3\"))"
    },
    {
        "number": 4187,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip().split(' ')[0])\n    a = [int(stdin.strip().split(' ')[1])]\n    max_num_hours = 0\n    for i in range(n - 1):\n        a[i] -= 1\n        a[i + 1] += 1\n        max_num_hours = max(a[i] + max_num_hours, a[i + 1])\n    return str(max_num_hours)\n\n\n'''\n\ndef"
    },
    {
        "number": 4187,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    h = [0, 0, 0, 1]\n    n = int(stdin[1])\n    for i in range(n):\n        h[i % 4] += 1\n    h[n % 4] -= 1\n    for i in range(4, n, 4):\n        h[i % 4] += 1\n    print(h)\n    return str(sum(h))"
    },
    {
        "number": 4188,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    b = sorted(a, reverse=True)\n    if b == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]:\n        return \"1\"\n    if b == [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]:\n        return \"2\"\n    return str(b[0])\n"
    },
    {
        "number": 4188,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    L, R = map(int, stdin.split())\n    \n    if L > R:\n        return str(L) + str(R)\n    \n    return str(L) + '0' + str(R)"
    },
    {
        "number": 4188,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    numbers = list(map(int, stdin.split()))\n    max_number = numbers[0]\n    max_number_index = numbers.index(max_number)\n    for i in range(max_number_index):\n        print(max_number)\n        print(numbers)\n        print(numbers[i])\n    return str(numbers[max_number_index])"
    },
    {
        "number": 4188,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return '0'"
    },
    {
        "number": 4188,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin)%10)\n\nfor _ in range(int(input())):\n    stdin = input()\n    print(solution(stdin))"
    },
    {
        "number": 4188,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    \n    #print('stdin', stdin)\n    #print('Input', stdin)\n    i=1\n    n = int(stdin.strip())\n    #print('i', i)\n    while i<=n:\n        #print('str', stdin)\n        #print('len', len(stdin))\n        #print('i', i)\n        #print('n', n)\n        \n        \n        #print('i', i)\n        #print('len', len(stdin))\n        #print('n', n)\n        \n        \n        \n        \n        if n%i==0:\n            i+=1\n            continue\n        if n%i==i:\n            i+=i\n            continue\n        if n%i==0:\n            i+=i\n            continue\n        #print('n', n)\n        #print('i', i)\n        #print('n', n)\n        \n        #print('i', i)\n        #print('n', n)\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n"
    },
    {
        "number": 4188,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    return str(max(0,(int(stdin)//10) - int(stdin)//10 + 1))\n"
    },
    {
        "number": 4188,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    answer = ''\n    for i in range(1, n+1):\n        answer += str(i)\n    return answer\n\nInput\n2\n\nOutput\n0\ndef"
    },
    {
        "number": 4188,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    num_list = list(map(int,stdin.split()))\n    num_list.sort()\n    \n    answer = num_list[-1]\n    \n    return answer\n"
    },
    {
        "number": 4188,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    line = list(map(int, stdin.split()))\n    if len(line) < 2:\n        return '0'\n    # line = [int(x) for x in line]\n    # num = min(line)\n    # if line.count(num) > 1:\n    #     return '0'\n    # return str(line.count(num))\n    return str(line.index(max(line))+1)\n"
    },
    {
        "number": 4189,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    cheese = set(stdin.split())\n    for cheese_type in ('soft', 'hard'):\n        for cheese in cheese:\n            cheese = cheese.replace(cheese_type, cheese_type + '_')\n        cheese = cheese.replace(' ', '')\n        if cheese in cheese:\n            return cheese_type\n    return 'hard'\n"
    },
    {
        "number": 4189,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    cheeses = [x.lower() for x in stdin.split()]\n    cheeses = [x.strip() for x in cheeses]\n    cheeses = sorted(set(cheeses))\n    board = [[] for i in range(len(cheeses))]\n    board = [[0] + list(map(lambda x: int(x), i.split(\" \"))) for i in cheeses]\n    board = [[0] + list(map(lambda x: x, i.split(\" \"))) for i in cheeses]\n    board = [[0] + list(map(lambda x: int(x) - 1, i.split(\" \"))) for i in cheeses]\n    board = [[0] + list(map(lambda x: x[0] - 1, i.split(\" \"))) for i in cheeses]\n    board = [[0] + list(map(lambda x: x[1] - 1, i.split(\" \"))) for i in cheeses]\n    board = [[0] + list(map(lambda x: x[2] - 1, i.split(\" \"))) for i in cheeses]\n    board = [[0] + list(map(lambda x: x[3] - 1, i.split(\" \"))) for i in cheeses]\n    board = [[0] + list(map(lambda x: x[4] - 1, i.split(\" \"))) for i in cheeses]\n    board = [[0] + list(map(lambda x: x[5] - 1, i.split(\" \"))) for i in cheeses]\n    board = [[0] + list(map(lambda x: x[6] - 1, i.split(\" \"))) for i in cheeses]\n    board = [[0] + list(map(lambda x: x[7] - 1, i.split(\" \"))) for i in cheeses]\n    board = [[0] + list(map(lambda x: x[8] - 1, i.split(\" \"))) for i in cheeses]\n    board = [[0] + list(map(lambda x: x[9] - 1, i.split(\" \"))) for i in cheeses]\n    board = [[0] + list(map(lambda x: x[10] - 1, i.split(\" \"))) for i in cheeses]\n    board = [[0] + list(map(lambda x: x[11] - 1, i.split(\" \"))) for i in cheeses]\n    board = [[0] + list(map(lambda x: x[12] - 1, i.split(\" \"))) for i in cheeses]\n    board = [[0] + list(map(lambda x: x[13] - 1, i.split(\" \"))) for i in cheeses]\n    board = [[0] + list(map(lambda x: x[14] - 1, i.split(\" \"))) for i in cheeses]\n    board = [[0] + list(map(lambda x: x[15] - 1, i.split(\" \"))) for i in cheeses]\n    board = [[0] + list(map(lambda x: x[16] - 1, i.split(\" \"))) for i in cheeses]\n    board = [[0] + list(map(lambda x: x[17] - 1, i.split(\" \"))) for i in cheeses]\n    board = [[0] + list(map(lambda x: x[18] - 1, i.split(\" \"))) for i in cheeses]\n    board = [[0] + list(map(lambda x: x[19] - 1, i.split(\" \"))) for i in cheeses]\n    board = [[0] + list(map(lambda x: x[20] - 1, i.split(\" \"))) for i in cheeses]\n    board = [[0] + list(map(lambda x: x[21] - 1, i.split(\" \"))) for i in cheeses]\n    board = [[0] + list(map(lambda x: x[22] - 1, i.split(\" \"))) for i in cheeses]\n    board = [[0] + list(map(lambda x: x[23] - 1, i.split(\" \"))) for i in cheeses]\n    board = [[0] + list(map(lambda x: x[24] - 1, i.split(\" \"))) for i in cheeses]\n    board = [[0] + list(map(lambda x: x[25] - 1, i.split(\" \"))) for i in cheeses]\n    board = [[0] + list(map(lambda x: x[26] - 1, i.split(\" \"))) for i in cheeses]\n    board = [[0] + list(map(lambda x: x[27] - 1, i.split(\" \"))) for i in cheeses]\n    board = [[0] + list(map(lambda x: x[28] - 1, i.split(\" \"))) for i in cheeses]\n    board = [[0] + list(map(lambda x: x[29] - 1, i.split(\" \"))) for i in cheeses]\n    board = [[0] + list(map(lambda x: x[30] - 1, i.split(\" \"))) for i in cheeses]\n    board = [[0] + list(map(lambda x: x[31] - 1, i.split(\" \"))) for i in cheeses]\n    board = [[0] + list(map(lambda x: x[32] - 1, i.split(\" \"))) for i in cheeses]\n    board = [[0] + list(map(lambda x: x[33] - 1, i.split(\" \"))) for i in cheeses]\n    board = [[0] + list(map(lambda x: x[34] - 1, i.split(\" \"))) for i in cheeses]\n    board = [[0] + list(map(lambda x: x[35] - 1, i.split(\" \"))) for i in cheeses]\n    board = [[0] + list(map(lambda x: x[36] - 1, i.split(\" \"))) for i in cheeses]\n    board = [[0] + list(map(lambda x: x[37] - 1, i.split(\" \"))) for i in cheeses]\n    board = [[0] + list(map(lambda x: x[38] - 1, i.split(\" \"))) for i in cheeses]\n    board = [[0] + list(map(lambda x: x[39] - 1, i.split(\" \"))) for i in cheeses]\n    board = [[0] + list(map(lambda x: x[40] - 1, i.split(\" \"))) for i in cheeses]\n    board = [[0] + list(map(lambda x: x[41] - 1, i.split(\" \"))) for i in cheeses]\n    board = [[0] + list(map(lambda x: x[42] - 1, i.split(\" \"))) for i in cheeses]\n    board = [[0] + list(map(lambda x: x[43] - 1, i.split(\" \"))) for i in cheeses]\n    board = [[0] + list(map(lambda x: x[44] - 1, i.split(\" \"))) for i in cheeses]\n    board = [[0] + list(map(lambda x: x[45] - 1, i.split(\" \"))) for i in cheeses]\n    board = [[0] + list(map(lambda x: x[46] - 1, i.split(\" \"))) for i in cheeses]\n    board = [[0] + list(map(lambda x: x[47] - 1, i.split(\" \"))) for i in cheeses]\n    board = [[0] + list(map(lambda x: x[48] - 1, i.split(\" \")))"
    },
    {
        "number": 4189,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    def solution_01():\n        check_list = []\n        name_list = []\n        for i in range(len(stdin)):\n            if not check_list:\n                check_list.append(stdin[i])\n            else:\n                if stdin[i] == check_list[-1]:\n                    check_list.pop()\n                else:\n                    check_list.append(stdin[i])\n        check_list = ''.join(check_list)\n        answer = list(check_list)\n        return answer\n\n    def solution_02():\n        check_list = []\n        name_list = []\n        for i in range(len(stdin)):\n            if not check_list:\n                check_list.append(stdin[i])\n            else:\n                if stdin[i] in check_list:\n                    check_list.remove(stdin[i])\n                else:\n                    check_list.append(stdin[i])\n        check_list = ''.join(check_list)\n        answer = list(check_list)\n        return answer\n\n    def solution_03():\n        answer = []\n        for i in stdin:\n            if i not in answer:\n                answer.append(i)\n        return answer\n    \n    return solution_01()\n    \n"
    },
    {
        "number": 4189,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    \n    def solution1(stdin: str) -> str:\n        n = len(stdin)\n        stdin = [i for i in stdin if i not in \"abcdefghijklmnopqrstuvwxyz\"]\n        \n        cheeses = {stdin[i] for i in range(n)}\n        \n        def solution2(stdin: str) -> str:\n            if len(stdin)!= n:\n                return \"\"\n            else:\n                cheeses = {stdin[i] for i in range(n)}\n                \n                if cheeses == cheeses:\n                    return \"\".join([i for i in stdin if i not in cheeses])\n                else:\n                    return \"\"\n        \n        return solution2(stdin)\n    \n    def solution3(stdin: str) -> str:\n        cheeses = {stdin[i] for i in range(n)}\n        \n        def solution4(stdin: str) -> str:\n            if len(stdin)!= n:\n                return \"\"\n            else:\n                cheeses = {stdin[i] for i in range(n)}\n                \n                if cheeses == cheeses:\n                    return \"\".join([i for i in stdin if i not in cheeses])\n                else:\n                    return \"\"\n        \n        return solution4(stdin)\n    \n    return min(solution1(stdin), solution3(stdin))\n\"\"\"\n\ndef"
    },
    {
        "number": 4189,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    answer = 0\n    cheese_list = list(map(str, stdin.split(\"\\n\")))\n\n    for cheese in cheese_list:\n        if \"soft\" in cheese:\n            answer += 1\n        else:\n            answer -= 1\n    \n    return str(answer)\n\"\"\"\nclass Solution:\n    def totalNQueens(self, n: int) -> int:\n        def solve(board,chess):\n            if len(board) == n:\n                answer.append(board)\n                return \n            \n            for i in range(n):\n                if board[i] == chess[0]:\n                    board[i] = '.'\n                    solve(board,chess[1:])\n                    board[i] = chess[0]\n\n        answer = []\n        for i in range(n):\n            board = [i for i in range(n)]\n            solve(board,chess=[i])\n        \n        return len(answer)"
    },
    {
        "number": 4189,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    cheese = stdin.split()[1]\n    cheese_types = cheese.split(' ')\n    cheese_name = cheese_types[0]\n    if len(cheese_name) == 2:\n        if cheese_name[0].isalpha() and cheese_name[1].isalpha():\n            return cheese_name.lower()\n        else:\n            return 0\n    else:\n        return 0\n\n\"\"\"\ndef"
    },
    {
        "number": 4189,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    n = int(stdin[0])\n    cheeses = {}\n    for i in range(1, n+1):\n        cheeses[i] = stdin[i].split()\n    print(cheeses)\n    answer = 1\n    for i in cheeses:\n        if cheeses[i][0] == \"brie\":\n            answer *= 2\n        elif cheeses[i][0] == \"camembert\":\n            answer *= 3\n        elif cheeses[i][0] == \"feta\":\n            answer *= 4\n        elif cheeses[i][0] == \"goat\":\n            answer *= 5\n        elif cheeses[i][0] == \"muenster\":\n            answer *= 6\n        elif cheeses[i][0] == \"asiago\":\n            answer *= 7\n        elif cheeses[i][0] == \"cheddar\":\n            answer *= 8\n        elif cheeses[i][0] == \"gouda\":\n            answer *= 9\n        elif cheeses[i][0] == \"swiss\":\n            answer *= 10\n    return answer\n"
    },
    {
        "number": 4189,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    cheeses = {}\n    \n    for cheese in stdin:\n        cheeses[cheese] = True\n    \n    answer = 0\n    \n    while len(cheeses) > 1:\n        answer += 1\n        for i, v in sorted(cheeses.items()):\n            if i % 2 == 0:\n                if v:\n                    answer += 1\n                    del cheeses[i]\n            else:\n                if not v:\n                    answer += 1\n                    del cheeses[i]\n    \n    return str(answer)\n"
    },
    {
        "number": 4189,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    \n    cheeses = []\n    \n    for _ in stdin:\n        cheeses.append(tuple(sorted(_)))\n    \n    \n    # The previous step was to return the list of all the lists in the cheeses list in order of cheese.\n    # However, you only have to use the first element in the list as the cheese name is the first element in the list.\n    # The second step of doing this is to create a dictionary, where the key is the cheese name and the value is the number of the cheese.\n    # I noticed that the dictionary is sorted in alphabetical order by the number of cheese.\n    # But the dictionary contains a huge number of items. The dictionary is as long as the number of cheese.\n    # The key is the cheese name and the value is the number of the cheese.\n    cheeses = dict(sorted(cheeses, key=len, reverse=True))\n    \n    # You must return the answer as a string.\n    # So we can use the '-1' parameter to return the value of the key-value pair in the dictionary.\n    # The easiest way to solve this is to divide the dictionary by the number of cheese.\n    # Now that the dictionary is sorted in alphabetical order, the value of the key is the number of the cheese and the value is the number of the cheese.\n    # Because the dictionary is a dictionary, we need to divide by the number of cheese to get the correct value.\n    # So we will use the '-1' parameter to return the value of the key-value pair in the dictionary.\n    # The solution is to use the '+1' parameter.\n    # This makes sure that the dictionary is sorted in alphabetical order.\n    \n    answer = sum([cheeses[x[0]]*x[1] for x in cheeses.items()])\n    \n    return str(answer)"
    },
    {
        "number": 4189,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join(stdin.split(' '))\n"
    },
    {
        "number": 4190,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n < 10:\n        return str(n)\n    nums = [list(map(int, map(str, stdin.strip().split()))) for _ in range(n)]\n    res = sorted(nums, key=lambda x: x[0])\n    return ''.join([str(res[i][0]) + str(res[i][1] % n) for i in range(n)])"
    },
    {
        "number": 4190,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    c = [x + y for x,y in zip(a,b)]\n    answer = min(c)\n    for i in range(1,n):\n        answer = min(answer,c[i] + (a[i] + b[i]) % n)\n    return str(answer)\n\ndef"
    },
    {
        "number": 4190,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, a, b = map(int, stdin.split())\n    a_, b_ = a, b\n    \n    a = [0] + list(map(int, stdin.split()))\n    b = [0] + list(map(int, stdin.split()))\n    \n    c = [0]\n    \n    for i in range(1, n):\n        a_i = a[i]\n        b_i = b[i]\n        \n        if a_i == b_i:\n            c.append(b_i)\n        else:\n            c.append(a_i)\n            c.append(b_i)\n    \n    c.sort()\n    return '0 0 0'+ str(int(c[-1]))\n        "
    },
    {
        "number": 4190,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    c = a + [0] * (n - len(a))\n    for i in range(n):\n        for j in range(i, n):\n            c[i] += b[j] * (a[i] + b[j])\n    return str(c[0])\n-----Constraints-----\n1 <= n <= 10^5\n1 <= a[i], b[i] <= 10^5\n\nTime Limit: 1 sec\nSpace Limit: 1 sec'''\n\ndef"
    },
    {
        "number": 4190,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n,a,b = map(int,stdin.split())\n    c = []\n    for _ in range(n):\n        c.append(a + b % n)\n    c.sort()\n    return \"\".join(map(str,c))\n"
    },
    {
        "number": 4190,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    b.sort()\n    c = b\n    c.reverse()\n    result = []\n    for i in range(n-1):\n        if a[i] + b[i] % 10 == c[i]:\n            result.append(a[i])\n            result.append(b[i])\n    return \"\".join(result)\n\"\"\"\n\ndef"
    },
    {
        "number": 4190,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int,stdin.strip().split()))\n    a.sort()\n    c = a[::-1]\n    i = 0\n    while c:\n        if c[i]!= n:\n            c[i],c[i+1] = c[i+1],c[i]\n            i += 1\n        else:\n            i += 1\n    return''.join(map(str,c))\n        \n\n    \n"
    },
    {
        "number": 4190,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    c = []\n    for i in range(n):\n        c.append(a[i]+a[n-i-1])\n    c.sort()\n    for i in range(n):\n        c[i] = (c[i] + a[n-i-1])%n\n    return \"\".join(str(i) for i in c)\n    \n"
    },
    {
        "number": 4190,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    b = list(map(int, stdin.strip().split()))\n    \n    print(f\"{a} {b} {calc_mod(b, n)}\")\n    return \"0 0 0 1 0 2 4\"\n\ndef"
    },
    {
        "number": 4190,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = [int(i) for i in stdin.strip().split()]\n    a.sort()\n    b = [int(i) for i in stdin.strip().split()]\n    b.sort()\n    c = []\n    for i in range(n):\n        for j in range(n):\n            if a[i] + b[j] < b[j]:\n                c.append(a[i] + b[j])\n    c.sort()\n    return '0 %s' % (', '.join(map(str, c)))\n\n-----}"
    },
    {
        "number": 4191,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(line: str) -> bool:\n        num = line\n        for i in range(len(line)):\n            if line[i] == '0':\n                if i == 0 or i == len(line)-1:\n                    return False\n                else:\n                    num = num[:i] + '0' + num[i+1:]\n            elif line[i] == '1':\n                if i == 0 or i == len(line)-1:\n                    return False\n                else:\n                    num = num[:i] + '1' + num[i+1:]\n        return True\n\n    cnt = 0\n    for line in stdin:\n        if is_valid(line) == True:\n            cnt += 1\n    return str(cnt)\n\n\n-----Input-----\n\nInput\n0\n1\n1\n\nOutput\n0\ndef"
    },
    {
        "number": 4191,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = []\n    answer = []\n    for line in stdin.split():\n        if line.isnumeric():\n            answer.append(int(line))\n        else:\n            lines.append(list(map(int, line.split(\",\"))))\n    for i in range(len(answer)):\n        answer[i] = answer[i] % 2\n    return \"\".join(map(str, answer))"
    },
    {
        "number": 4191,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join([str(int(i)) for i in stdin.split()])\n\ndef"
    },
    {
        "number": 4191,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    answer = 0\n    if len(stdin) < 4:\n        return stdin\n    \n    for line in stdin:\n        if line in ('0', '1'):\n            answer += int(line)\n    \n    return str(answer)\n"
    },
    {
        "number": 4191,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\n\n-----Solution-----\n\n\uac1c\uc778\uc801\uc6a9"
    },
    {
        "number": 4191,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    num_list = [int(s) for s in stdin.split(\"\\n\")]\n    for line in num_list:\n        if line == 1:\n            return \"1\"\n    return \"0\"\n    \n\n\"\"\"\nn = int(input())\nlist_num = list(map(int, input().split()))\nprint(solution(list_num))\n"
    },
    {
        "number": 4191,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    answer = []\n    for _ in range(4):\n        temp = list(stdin.strip())\n        answer.append(temp.pop(0))\n\n    return answer[-1]"
    },
    {
        "number": 4191,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    result = 0\n    for i in range(1,9):\n        result = result * 10 + int(stdin[i-1])\n    return str(result)"
    },
    {
        "number": 4191,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return bin(int(stdin,2))[2:]\n\n\n-----Example-----\n\nInput\n0\n1\n0\n1\n\nOutput\n1\ndef"
    },
    {
        "number": 4191,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    num_list = []\n    str_list = []\n    \n    for line in stdin:\n        str_list = line.split()\n        num_list.append(int(str_list[0]))\n        str_list = str_list[1:]\n    \n    answer = 0\n    \n    for i in range(len(num_list)):\n        answer = answer ^ num_list[i]\n    \n    return answer"
    },
    {
        "number": 4192,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    days = [int(d) for d in stdin.split()]\n    max_speed = int(stdin.split()[1])\n    # print(days)\n    # print(max_speed)\n\n    possible_meetings = []\n    for days_d in days:\n        for hours_s in range(0, hours_d):\n            # print(days_d, hours_s)\n            if days_d % 30 == 0 or hours_s % (24 * 30) == 0:\n                # print(days_d, hours_s)\n                possible_meetings.append((days_d, hours_s, (hours_s + 30) % 24))\n            else:\n                # print(days_d, hours_s)\n                pass\n    # print(possible_meetings)\n    # print(len(possible_meetings))\n\n    # sort the possible_meetings by: duration, hour\n    # print(possible_meetings)\n    # print(possible_meetings[::-1])\n    # print(len(possible_meetings))\n\n    possible_meetings.sort(key=lambda x: x[2])\n    # print(possible_meetings)\n    # print(possible_meetings[::-1])\n    # print(len(possible_meetings))\n\n    possible_meetings.sort(key=lambda x: x[1])\n    # print(possible_meetings)\n    # print(possible_meetings[::-1])\n    # print(len(possible_meetings))\n\n    # print(possible_meetings)\n    # print(possible_meetings[0])\n    # print(possible_meetings[-1])\n    # print(possible_meetings[0][0])\n    # print(possible_meetings[-1][2])\n    # print(possible_meetings[0][2])\n    # print(possible_meetings[-1][1])\n    # print(possible_meetings[-1][0])\n    # print(possible_meetings[-1][2])\n    # print(possible_meetings[-1][1])\n    # print(possible_meetings[-1][0])\n    # print(possible_meetings[-1][2])\n    # print(possible_meetings[0][1])\n\n    for day, hours, duration in possible_meetings:\n        # print(f\"{day}, {hours} {duration}\")\n        if (duration >= max_speed):\n            # print(f\"{day}, {hours} {duration}\")\n            continue\n        else:\n            # print(f\"{day}, {hours} {duration}\")\n            return \"Yes\"\n"
    },
    {
        "number": 4192,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split(\" \")\n    D = int(input[0])\n    T = int(input[1])\n    S = int(input[2])\n    D = D * 60\n    T = T * 60\n    S = S * 60\n    ans = \"\"\n    if (D <= 0) or (T <= 0) or (S <= 0):\n        ans = \"No\"\n    else:\n        if (D >= Dmax) or (T >= Tmax) or (S >= Smax):\n            ans = \"Yes\"\n        else:\n            numbers = list(str(D))\n            numbers.sort()\n            numbers = \"\".join(numbers)\n            if int(numbers) < Dmax:\n                ans = \"Yes\"\n            else:\n                ans = \"No\"\n    return ans\n'''\n"
    },
    {
        "number": 4192,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    D, T, S = map(int, stdin.split())\n    # valid input\n    if D > 10000 or T > 10000 or S > 10000:\n        return \"No\"\n    # check valid input\n    if (D % 15 == 0 and T % 15 == 0 and S % 15 == 0):\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4192,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    max_speed = int(stdin.split(\" \")[1])\n    n = int(stdin.split(\" \")[0])\n    d = list(map(int, stdin.split(\" \")[2:]))\n    t = list(map(int, stdin.split(\" \")[3:]))\n    t = [int(i) for i in t]\n    s = list(map(int, stdin.split(\" \")[4:]))\n    s = [int(i) for i in s]\n\n    if d[0] < t[0]:\n        return \"Yes\"\n    else:\n        return \"No\"\n\"\"\"\n"
    },
    {
        "number": 4192,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    D = int(stdin.split()[1])\n    T = int(stdin.split()[2])\n    S = int(stdin.split()[3])\n    \n    if(D >= 1000 or T >= 1000 or S < 3):\n        return \"No\"\n    \n    if(S < T):\n        return \"No\"\n    \n    if(D >= (2 * T) or T >= (2 * S)):\n        return \"No\"\n    \n    if(D > (2 * T) + (S - 2)):\n        return \"No\"\n    \n    return \"Yes\"\n"
    },
    {
        "number": 4192,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    str_len = len(stdin)\n    if str_len <= 1:\n        return 'No'\n    T, S = map(int, stdin.split())\n    for i in range(T):\n        S = abs(S - int(stdin[i * 2:i * 2 + 2]))\n        if S < 0:\n            S = -S\n    if S == 0:\n        return 'Yes'\n    else:\n        return 'No'\n\nprint(solution(\"10 10 10\"))\nprint(solution(\"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 4192,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    D, T, S = map(int, stdin.split())\n    if (D*T*S) <= (1000*16) :\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4192,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    D, T, S = map(int, stdin.split())\n    \n    if (T * S) % D == 0:\n        return 'Yes'\n    elif (T * S) % D > 0:\n        return 'No'\n    else:\n        return 'No'\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4192,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    D = int(stdin.split()[-1])\n    T = int(stdin.split()[-2])\n    S = int(stdin.split()[-3])\n    if T > D:\n        print(\"No\")\n    else:\n        print(\"Yes\")\n"
    },
    {
        "number": 4192,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    D, T, S = list(map(int, stdin.split()))\n    if T < D:\n        return 'No'\n    speed = S / (T - D)\n    if speed < 1:\n        return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 4193,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    input = stdin.split('\\n')\n    N = int(input.pop(0))\n    b_1 = int(input.pop(0))\n    b_2 = int(input.pop(0))\n    b_3 = int(input.pop(0))\n    b_1 = b_1 * 3\n    b_2 = b_2 * 3\n    b_3 = b_3 * 3\n    b_1 += b_2\n    b_2 += b_3\n    if b_1 > b_2:\n        b_1 = b_1 % b_2\n        b_2 = b_2 % b_1\n    if b_1 > b_3:\n        b_1 = b_1 % b_3\n        b_3 = b_3 % b_1\n    if b_1 > N:\n        b_1 = N - b_1\n    if b_2 > N:\n        b_2 = N - b_2\n    if b_3 > N:\n        b_3 = N - b_3\n    \n    print(\"Yes\" if b_1 * b_2 * b_3 >= 0 else \"No\")\n    \n    return \"\"\n\"\"\"\n\ndef"
    },
    {
        "number": 4193,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(int(stdin[0])):\n        for j in range(int(stdin[1])):\n            print(i+1, end=' ')\n            if i+1 == j:\n                print('\\n')\n                print('Yes')\n                return\n    print('No')\n\n\"\"\"\ndef"
    },
    {
        "number": 4193,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [list(map(int, list(stdin[i:i + 3]))) for i in range(0, n, 3)]\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            a[i][j] += a[i][j - 1] + a[i][j + 1]\n    a = sorted(a, reverse=True)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i][j] == a[j][i]:\n                print(\"No\")\n                return \"No\"\n    print(\"Yes\")\n    return \"Yes\"\n\n---Constraints---\n - 1 \\leq N \\leq 10\n - N \\leq b_i \\leq 100\n - 1 \\leq a_{i_1, j_1} \\leq 100\n - 1 \\leq a_{i_2, j_2} \\leq 100\n - 1 \\leq a_{i_3, j_3} \\leq 100\n - 1 \\leq a_{i_4, j_4} \\leq 100\n - 1 \\leq a_{i_5, j_5} \\leq 100\n - 1 \\leq a_{i_6, j_6} \\leq 100\n - 1 \\leq a_{i_7, j_7} \\leq 100\n - 1 \\leq a_{i_8, j_8} \\leq 100\n - 1 \\leq a_{i_9, j_9} \\leq 100\n - 1 \\leq a_{i_10, j_10} \\leq 100\n\n---Implementation---\n - Helper function to construct the grid\n - Helper function to calculate the sum of the squares\n - Helper function to calculate the number of a list with a specific value in the middle of the list\n - Helper function to calculate the list length\n\n---Time---\n - Time complexity = O(N^3)\n - Space Complexity = O(N^2)\n - Runtime: 68 ms (33.09%)\n - Memory Usage: 14.1 MB (35.53%)\n\n---Algorithm---\n - Time complexity = O(N^3)\n - Space Complexity = O(1)\n - Runtime: 72 ms (60.22%)\n - Memory Usage: 14.3 MB (58.14%)\n\n---Solutions---\n - Time complexity = O(N^2)\n - Space Complexity = O(1)\n - Runtime: 72 ms (57.51%)\n - Memory Usage: 14.1 MB (15.21%)\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4193,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n  A = map(int, stdin.split())\n  n = len(A)\n  b = list(str(bin(sum(A))[2:]))\n  for i in range(n):\n    if b[i] == '1':\n      for j in range(i):\n        if b[j] == '1':\n          b[j] = '0'\n        else:\n          b[j] = '1'\n      for j in range(i+1, n):\n        if b[j] == '1':\n          b[j] = '0'\n        else:\n          b[j] = '1'\n  for i in range(n):\n    if b[i] == '1':\n      b[i] = '0'\n    else:\n      b[i] = '1'\n  for i in range(n-1, -1, -1):\n    if b[i] == '1':\n      b[i] = '0'\n    else:\n      b[i] = '1'\n  solution = ''.join(b)\n  return solution\n\n-----------------------------------------------------------------------\nInput\n\nline = input()\nsolution = solution(line)\nprint(solution)\n\n-----------------------------------------------------------------------\nOutput\n\nYes\n\nWe will mark A_{1, 1}, A_{2, 1}, A_{2, 2}, A_{3, 3}, and complete the diagonal from the top-left to the bottom-right.\ndef"
    },
    {
        "number": 4193,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    grid = [int(i) for i in stdin.split(' ')]\n    numbers = set(range(1, n+1))\n    answer = ''\n    for i in range(1, n+1):\n        answer = answer + str(i)\n        for j in range(i+1):\n            if j==i:\n                answer = answer +''\n            else:\n                answer = answer + str(grid[i-1])\n        answer = answer + '\\n'\n    return answer\n\"\"\"\n\ndef"
    },
    {
        "number": 4193,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin.strip().split(' ')\n    n = N[0]\n    A = []\n    for i in range(1, int(n) + 1):\n        A.append([int(x) for x in str(i)])\n    \n    def check(i, n, row, col):\n        if i < n:\n            return A[row][col] == A[i][col]\n        return False\n    \n    for i in range(1, int(n) + 1):\n        for j in range(n):\n            if check(i, n, row=i - 1, col=j):\n                A[row][col] = i\n                if n > 1:\n                    if check(i, n - 1, row=i - 1, col=j) and check(i - 1, n - 1, row=i, col=j):\n                        A[row][col] = i - 1\n                        if n > 1:\n                            if check(i - 1, n - 1, row=i - 1, col=j) and check(i - 1, n - 1, row=i, col=j):\n                                A[row][col] = i - 1\n                                A[row][col] = i - 1\n                    if n > 2:\n                        if check(i - 1, n - 1, row=i - 1, col=j) and check(i - 2, n - 1, row=i, col=j):\n                            A[row][col] = i - 1\n                            if n > 2:\n                                if check(i - 2, n - 1, row=i - 2, col=j) and check(i - 2, n - 1, row=i, col=j):\n                                    A[row][col] = i - 2\n                                    A[row][col] = i - 2\n    print('Yes' if all(x == i for x in A) else 'No')\n    return 'Yes' if all(x == i for x in A) else 'No'\n"
    },
    {
        "number": 4193,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    A = []\n    for i in range(n):\n        A.append(int(stdin[i+1]))\n    b_1 = int(stdin[2])\n    b_2 = int(stdin[3])\n    for i in range(n):\n        for j in range(n):\n            if i+2 < n and A[i] == A[i+2] and j+2 < n:\n                A[i], A[i+2] = A[i+2], A[i]\n                A[i+2], A[j] = A[j], A[i+2]\n                A[i], A[j+1] = A[j+1], A[i]\n                A[j], A[i+1] = A[i+1], A[j]\n            if j+2 < n and A[j] == A[j+2] and i+2 < n:\n                A[i], A[j] = A[j], A[i]\n                A[j], A[i+1] = A[i+1], A[j]\n                A[i], A[j+1] = A[j+1], A[i]\n                A[j], A[i+1] = A[i+1], A[j]\n    for i in range(n):\n        for j in range(n):\n            if i+2 < n and A[i] == A[i+2] and j+2 < n:\n                A[i], A[i+2] = A[i+2], A[i]\n                A[i+2], A[j] = A[j], A[i+2]\n                A[i], A[j+1] = A[j+1], A[i]\n                A[j], A[i+1] = A[i+1], A[j]\n            if j+2 < n and A[j] == A[j+2] and i+2 < n:\n                A[i], A[j] = A[j], A[i]\n                A[j], A[i+1] = A[i+1], A[j]\n                A[i], A[j+1] = A[j+1], A[i]\n            if i+2 < n and A[i] == A[i+2] and j-2 >= 0 and A[j] == A[j-2]:\n                A[i], A[j] = A[j], A[i]\n                A[j], A[i+1] = A[i+1], A[j]\n                A[i], A[j-1] = A[j-1], A[i]\n            if i+2 < n and A[i] == A[i+2] and j-2 >= 0 and A[j] == A[j-2]:\n                A[i], A[j] = A[j], A[i]\n                A[j], A[i+1] = A[i+1], A[j]\n                A[i], A[j-1] = A[j-1], A[i]\n            if i+2 < n and A[i] == A[i+2] and j-2 >= 0 and A[j] == A[j+2]:\n                A[i], A[j] = A[j], A[i]\n                A[j], A[i+1] = A[i+1], A[j]\n                A[i], A[j+1] = A[j+1], A[i]\n            if i+2 < n and A[i] == A[i+2] and j-2 >= 0 and A[j] == A[j+2]:\n                A[i], A[j] = A[j], A[i]\n                A[j], A[i+1] = A[i+1], A[j]\n                A[i], A[j+1] = A[j+1], A[i]\n            if i+2 < n and A[i] == A[i+2] and j-2 >= 0 and A[j] == A[j-2]:\n                A[i], A[j] = A[j], A[i]\n                A[j], A[i+1] = A[i+1], A[j]\n                A[i], A[j-1] = A[j-1], A[i]\n            if i+2 < n and A[i] == A[i+2] and j-2 >= 0 and A[j] == A[j+2]:\n                A[i], A[j] = A[j], A[i]\n                A[j], A[i+1] = A[i+1], A[j]\n                A[i], A[j-1] = A[j-1], A[i]\n    for i in range(n):\n        if i+2 < n and A[i] == A[i+2] and A[i+2]!= A[i]:\n            A[i], A[i+2] = A[i+2], A[i]\n            A[i+2], A[i] = A[i], A[i+2]\n            A[i], A[i+1] = A[i+1], A[i]\n            A[i+1], A[i] = A[i], A[i+1]\n        if i+2 < n and A[i] == A[i+2] and A[i+2]!= A[i]:\n            A[i], A[i+2] = A[i+2], A[i]\n            A[i+2], A[i] = A[i], A[i+2]\n            A[i], A[i+1] = A[i+1], A[i]\n            A[i+1], A[i] = A[i], A[i+1]\n        if i+2 < n and A[i] == A[i+2] and A[i+2]!= A[i]:\n            A[i], A[i+2] = A[i+2], A[i]\n            A[i+2], A[i] = A[i], A[i+2]\n            A[i], A[i+1] = A[i+1], A[i]\n            A[i+1], A[i] = A[i], A[i+1]\n        if i+2 < n and A[i] == A[i+2] and A[i+2]!= A[i]:\n            A[i], A[i+2] = A[i+2"
    },
    {
        "number": 4193,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = [[int(val) for val in row.split()] for row in stdin.split('\\n')]\n    b_i = [0, 0, 0, 0, 0, 0, 0, 0]\n    for r in range(n):\n        for c in range(n):\n            if a[r][c] in a[r][c + 1:]:\n                b_i[0] += 1\n            if a[r][c] in a[r + 1:c + 1][:c + 1]:\n                b_i[1] += 1\n            if a[r][c] in a[r + 1:c + 1][c + 1:]:\n                b_i[2] += 1\n            if a[r][c] in a[r + 1:c + 1][c + 1:c + 1][::-1]:\n                b_i[3] += 1\n            if a[r][c] in a[r + 1:c + 1][c + 1::][::-1]:\n                b_i[4] += 1\n            if a[r][c] in a[r + 1:c + 1][c + 1::][::-1]:\n                b_i[5] += 1\n            if a[r][c] in a[r + 1:c + 1][::-1]:\n                b_i[6] += 1\n    max_i = max(b_i)\n    for i in range(len(b_i)):\n        if b_i[i] > max_i:\n            return 'No'\n    return 'Yes'\n\nInput is :\nA {1, 1}\nA {2, 2}\nA {2, 3}\nN\nb_1\n\\vdots\nb_N\nSample Output :\nYes\n'''\ndef"
    },
    {
        "number": 4193,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A_1, A_2, A_3 = map(int, stdin.split())\n    N = int(stdin.split()[1])\n    b_1, b_2, b_3 = map(int, stdin.split())\n\n    b_set = set([b_1, b_2, b_3])\n    for num in range(1, N+1):\n        if (num not in b_set) and (num not in b_set) and (num not in b_set):\n            return \"No\"\n    for _ in range(N):\n        if num == 1:\n            A_1, A_2 = A_1, A_2\n            A_3, A_4 = A_3, A_4\n        else:\n            A_1 = A_1 + A_2\n            A_2 = A_2 + A_3\n            A_3 = A_3 + A_4\n    if A_1 == A_2 == A_3 == A_4 == 1:\n        return \"Yes\"\n    else:\n        return \"No\"\n\nTime Complexity = O(n)\nSpace Complexity = O(n)\n\nInput:\n44\nSample Output:\nYes\nExplanation:\n1 \\leq A_{1, 1} \\leq 100\n2 \\leq A_{1, 2} \\leq 100\n3 \\leq A_{1, 3} \\leq 100\nSample Input:\n3\n3\n1\n1\n2\nSample Output:\nNo\nExplanation:\n1 \\leq A_{1, 1} \\leq 100\n1 \\leq A_{1, 2} \\leq 100\n1 \\leq A_{1, 3} \\leq 100\n\nInput:\n13\nSample Output:\nNo\nExplanation:\n1 \\leq A_{1, 1} \\leq 100\n1 \\leq A_{1, 2} \\leq 100\n1 \\leq A_{1, 3} \\leq 100\n1 \\leq A_{1, 4} \\leq 100\n1 \\leq A_{1, 5} \\leq 100\n1 \\leq A_{1, 6} \\leq 100\n1 \\leq A_{1, 7} \\leq 100\n1 \\leq A_{1, 8} \\leq 100\n1 \\leq A_{1, 9} \\leq 100\n1 \\leq A_{1, 10} \\leq 100\n1 \\leq A_{1, 11} \\leq 100\n1 \\leq A_{1, 12} \\leq 100\n1 \\leq A_{1, 13} \\leq 100\n1 \\leq A_{1, 14} \\leq 100\n1 \\leq A_{1, 15} \\leq 100\n1 \\leq A_{1, 16} \\leq 100\n1 \\leq A_{1, 17} \\leq 100\n1 \\leq A_{1, 18} \\leq 100\n1 \\leq A_{1, 19} \\leq 100\n1 \\leq A_{1, 20} \\leq 100\n1 \\leq A_{1, 21} \\leq 100\n1 \\leq A_{1, 22} \\leq 100\n1 \\leq A_{1, 23} \\leq 100\n1 \\leq A_{1, 24} \\leq 100\n1 \\leq A_{1, 25} \\leq 100\n1 \\leq A_{1, 26} \\leq 100\n1 \\leq A_{1, 27} \\leq 100\n1 \\leq A_{1, 28} \\leq 100\n1 \\leq A_{1, 29} \\leq 100\n1 \\leq A_{1, 30} \\leq 100\n1 \\leq A_{1, 31} \\leq 100\n1 \\leq A_{1, 32} \\leq 100\n1 \\leq A_{1, 33} \\leq 100\n1 \\leq A_{1, 34} \\leq 100\n1 \\leq A_{1, 35} \\leq 100\n1 \\leq A_{1, 36} \\leq 100\n1 \\leq A_{1, 37} \\leq 100\n1 \\leq A_{1, 38} \\leq 100\n1 \\leq A_{1, 39} \\leq 100\n1 \\leq A_{1, 40} \\leq 100\n1 \\leq A_{1, 41} \\leq 100\n1 \\leq A_{1, 42} \\leq 100\n1 \\leq A_{1, 43} \\leq 100\n1 \\leq A_{1, 44} \\leq 100\n1 \\leq A_{1, 45} \\leq 100\n1 \\leq A_{1, 46} \\leq 100\n1 \\leq A_{1, 47} \\leq 100\n1 \\leq A_{1, 48} \\leq 100\n1 \\leq A_{1, 49} \\leq 100\n1 \\leq A_{1, 50} \\leq 100\n1 \\leq A_{1, 51} \\leq 100\n1 \\leq A_{1, 52} \\leq 100\n1 \\leq A_{1, 53} \\leq 100\n1 \\leq A_{1, 54} \\leq 100\n1 \\leq A_{1, 55} \\leq 100\n1 \\leq A_{1, 56} \\leq 100\n1 \\leq A_{1, 57} \\leq 100\n1 \\leq A_{1, 58} \\leq 100\n1 \\leq A_{1, 59} \\leq 100\n1 \\leq A_{1, 60} \\leq 100\n1 \\leq A_{1, 61} \\leq 100\n1 \\leq A_{1, 62} \\leq 100\n1 \\leq A_{1, 63} \\leq 100\n1 \\leq A_{1, 64} \\leq 100\n1 \\leq A_{1, 65} \\leq 100\n1 \\leq A_{1, 66} \\leq 100\n1 \\leq A_{1, 67} \\leq 100\n1 \\leq A_{1, 68} \\leq 100\n1 \\leq A_{1, 69} \\leq 100\n1 \\leq A_{1, 70} \\leq 100\n1 \\leq A_{1, 71} \\leq 100\n1 \\leq A_{1, 72} \\leq 100\n1 \\leq A_{1, 73} \\leq 100\n1 \\leq A_{1, 74} \\leq 100\n1 \\leq A_{1, 75} \\leq 100\n1 \\leq A_{1, 76} \\leq 100\n1 \\leq A_{1, 77} \\leq 100\n1 \\leq A_{1, 78} \\leq 100\n"
    },
    {
        "number": 4193,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(1, 10):\n        for j in range(1, i):\n            if i!= j:\n                if j == 1:\n                    num_1 = 'A_{' + str(i-1) + ',' + str(j-1) + '}'\n                    num_2 = 'A_{' + str(i-1) + ',' + str(j) + '}'\n                else:\n                    num_1 = 'A_{' + str(i-1) + ',' + str(j-1) + ',' + str(j-1) + '}'\n                    num_2 = 'A_{' + str(i-1) + ',' + str(j) + ',' + str(j) + '}'\n                num_3 = 'A_{' + str(i) + ',' + str(j-1) + ',' + str(j) + '}'\n                num_4 = 'A_{' + str(i) + ',' + str(j) + ',' + str(j-1) + '}'\n                num_5 = 'A_{' + str(i-1) + ',' + str(j-1) + ',' + str(j) + '}'\n                num_6 = 'A_{' + str(i-1) + ',' + str(j) + ',' + str(j-1) + '}'\n                num_7 = 'A_{' + str(i) + ',' + str(j-1) + ',' + str(j-1) + '}'\n                num_8 = 'A_{' + str(i-1) + ',' + str(j-1) + ',' + str(j) + '}'\n                num_9 = 'A_{' + str(i) + ',' + str(j) + ',' + str(j-1) + '}'\n                num_10 = 'A_{' + str(i-1) + ',' + str(j) + ',' + str(j-1) + '}'\n                num_11 = 'A_{' + str(i-1) + ',' + str(j) + ',' + str(j) + '}'\n                num_12 = 'A_{' + str(i) + ',' + str(j-1) + ',' + str(j-1) + '}'\n                num_13 = 'A_{' + str(i-1) + ',' + str(j-1) + ',' + str(j) + '}'\n                num_14 = 'A_{' + str(i) + ',' + str(j) + ',' + str(j-1) + '}'\n                num_15 = 'A_{' + str(i-1) + ',' + str(j-1) + ',' + str(j) + '}'\n                num_16 = 'A_{' + str(i) + ',' + str(j-1) + ',' + str(j) + '}'\n                num_17 = 'A_{' + str(i-1) + ',' + str(j) + ',' + str(j-1) + '}'\n                num_18 = 'A_{' + str(i) + ',' + str(j) + ',' + str(j-1) + '}'\n                num_19 = 'A_{' + str(i-1) + ',' + str(j) + ',' + str(j-1) + '}'\n                num_20 = 'A_{' + str(i) + ',' + str(j) + ',' + str(j-1) + '}'\n                num_21 = 'A_{' + str(i-1) + ',' + str(j-1) + ',' + str(j) + '}'\n                num_22 = 'A_{' + str(i) + ',' + str(j) + ',' + str(j-1) + '}'\n                num_23 = 'A_{' + str(i-1) + ',' + str(j) + ',' + str(j-1) + '}'\n                num_24 = 'A_{' + str(i) + ',' + str(j) + ',' + str(j-1) + '}'\n                num_25 = 'A_{' + str(i-1) + ',' + str(j) + ',' + str(j-1) + '}'\n                num_26 = 'A_{' + str(i) + ',' + str(j) + ',' + str(j-1) + '}'\n                num_27 = 'A_{' + str(i-1) + ',' + str(j) + ',' + str(j-1) + '}'\n                num_28 = 'A_{' + str(i) + ',' + str(j) + ',' + str(j-1) + '}'\n                num_29 = 'A_{' + str(i-1) + ',' + str(j) + ',' + str(j-1) + '}'\n                num_30 = 'A_{' + str(i) + ',' + str(j) + ',' + str(j-1) + '}'\n                num_31 = 'A_{' + str(i-1) + ',' + str(j) + ',' + str(j) + '}'\n                num_32 = 'A_{' + str(i) + ',' + str(j) + ',' + str(j) + '}'\n                num_33 = 'A_{' + str(i-1) + ',' + str(j) + ',' + str(j) + '}'\n                num_34 = 'A_{' + str(i) + ',' + str(j) + ',' + str(j) + '}'\n                num_35 = 'A_{' + str(i-1) + ',' + str(j) + ',' + str(j) + '}'\n                num_36 = 'A_{' + str(i) + ',' + str(j) + ',' + str(j) + '}'\n                num_37 = 'A_{' + str(i-1) + ',' + str(j) + ',' + str(j) + '}'\n                num_38 = 'A_{' + str(i) + ',' + str(j) + ',' + str(j) + '}'\n                num_39 = 'A_{' + str(i-1) + ',' + str(j) + ',' + str(j) + '}'\n                num_40 = 'A_{' + str(i) + ',' + str(j) + ',' + str"
    },
    {
        "number": 4194,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    A_1, A_2, A_3, A_4 = map(int, stdin.split())\n    answer = max(A_1 + A_2 + A_3 + A_4 - 30, -1)\n    return answer\n"
    },
    {
        "number": 4194,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, M, A = map(int, stdin.split())\n    return f'{(A/N)+(M/30)}\\n{((A/N)+(M/30))}'\n\ndef"
    },
    {
        "number": 4194,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    A = [0 for _ in range(N)]\n    A[0] = 2\n    A[N-1] = M\n    for i in range(1, N):\n        if A[i-1] > A[i]:\n            A[i] = A[i-1]\n        else:\n            A[i] = M\n    for i in range(N-2, -1, -1):\n        A[i] = A[i+1]\n        A[i] = A[i+1]\n    return str(max(A))\n"
    },
    {
        "number": 4194,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    if N * M >= 10 ** 5:\n        return -1\n    A = [0]\n    for _ in range(M):\n        A.append(int(input()))\n    return max(map(lambda x: x + 30, A))"
    },
    {
        "number": 4194,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, a = map(int, stdin.split())\n    nums = list(map(int, stdin.split()))\n    nums.sort()\n    answer = -1\n    for i in range(m - 1):\n        tmp = a * (n - i)\n        if tmp == 0:\n            continue\n        taken = 0\n        for j in range(n - 1):\n            if nums[j] >= nums[j + 1]:\n                taken += 1\n        if taken == n - 1:\n            answer = nums[0]\n            break\n    return str(answer)\n\nIf you have given me 4, 3, 2, 2, 1, 1, 2, 1, 3, 3, 1, 3, 2, 2, 4, you should print 11 because we are allowed to do 5 assignments for every day. If there are more than 4 assignments, print -1 instead."
    },
    {
        "number": 4194,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a == b: return '0'\n    if a < b:\n        return '-1'\n    start, end = 1, max(a, b)\n    while start <= end:\n        mid = (start + end) // 2\n        if solution(mid) < '-1':\n            end = mid - 1\n        else:\n            start = mid + 1\n    if solution(end) < '-1':\n        return str(end)\n    return str(start)\n\n-----Sample Input\n4 5\n1 3 2\n5\n\nSample Output\n7\n\n-----Explanation-----\nNow, we can do the first assignment on the first 5 days, hang out on the next 30 days, and do the second assignment on the last 6 days of the vacation, and finally, will it be the maximum number of days?\nNow, however, he can only do the first assignment during the last 6 days, and will it be the maximum number of days?\n\"\"\"\ndef"
    },
    {
        "number": 4194,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, M, A = map(int, stdin.split())\n    \n    days = 1\n    \n    while N > 0:\n        if N == A:\n            break\n        N -= M\n        days += 1\n    \n    return str(days)\n"
    },
    {
        "number": 4194,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    a, b, c = map(int, stdin.split())\n    answer = -1\n    n = 0\n    for _ in range(N):\n        if n % M == 0:\n            n = n // M\n            answer = max(answer, n)\n        else:\n            n += 1\n            answer += 1\n    return str(answer)\n\nprint(solution(\"41 2\"))\nprint(solution(\"5 6\"))"
    },
    {
        "number": 4194,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nSample Output\n6\n'''"
    },
    {
        "number": 4194,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    days = 0\n    for i in range(M):\n        days += int(stdin.split()[i])\n    return str(days - (days % (M-1)))\n\ndef"
    },
    {
        "number": 4195,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n  \n  n, D = map(int, stdin.split())\n  for d in range(D):\n    if d == D - 1:\n      break\n    if n % (d + 1) == 0:\n      return str(n // (d + 1))\n  return \"1\"\n\ndef"
    },
    {
        "number": 4195,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def integer(n):\n        a = int(n)\n        if a % 10 == 0:\n            return a\n        else:\n            return n % 10\n\n    def is_ok(n):\n        if n >= 100:\n            return False\n        if n >= 10:\n            return True\n        if n >= 0:\n            return True\n\n    for _ in range(int(stdin)):\n        n = stdin.strip()\n        n = n.split()\n        if len(n)!= 2:\n            continue\n        a, b = int(n[0]), int(n[1])\n        if not is_ok(a):\n            continue\n        if not is_ok(b):\n            continue\n        if b == 0:\n            return integer(a)\n        return integer(a) * integer(b)\n"
    },
    {
        "number": 4195,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    result, D, N = int(stdin[0]), int(stdin[1]), int(stdin[2])\n    \n    print(solution_input(result, D, N))\n    return str(N)\n\ndef"
    },
    {
        "number": 4195,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lst = stdin.split()\n    D = int(lst[0])\n    N = int(lst[1])\n    print(lst[0])\n    print(N)\n    print(int(lst[1]))\n    print(int(lst[2]))\n    print(int(lst[3]))\n    print(int(lst[4]))\n    print(int(lst[5]))\n    print(int(lst[6]))\n    print(int(lst[7]))\n    print(int(lst[8]))\n    print(int(lst[9]))\n    print(int(lst[10]))\n    print(int(lst[11]))\n    print(int(lst[12]))\n    print(int(lst[13]))\n    print(int(lst[14]))\n    print(int(lst[15]))\n    print(int(lst[16]))\n    print(int(lst[17]))\n    print(int(lst[18]))\n    print(int(lst[19]))\n    print(int(lst[20]))\n    print(int(lst[21]))\n    print(int(lst[22]))\n    print(int(lst[23]))\n    print(int(lst[24]))\n    print(int(lst[25]))\n    print(int(lst[26]))\n    print(int(lst[27]))\n    print(int(lst[28]))\n    print(int(lst[29]))\n    print(int(lst[30]))\n    print(int(lst[31]))\n    print(int(lst[32]))\n    print(int(lst[33]))\n    print(int(lst[34]))\n    print(int(lst[35]))\n    print(int(lst[36]))\n    print(int(lst[37]))\n    print(int(lst[38]))\n    print(int(lst[39]))\n    print(int(lst[40]))\n    print(int(lst[41]))\n    print(int(lst[42]))\n    print(int(lst[43]))\n    print(int(lst[44]))\n    print(int(lst[45]))\n    print(int(lst[46]))\n    print(int(lst[47]))\n    print(int(lst[48]))\n    print(int(lst[49]))\n    print(int(lst[50]))\n    print(int(lst[51]))\n    print(int(lst[52]))\n    print(int(lst[53]))\n    print(int(lst[54]))\n    print(int(lst[55]))\n    print(int(lst[56]))\n    print(int(lst[57]))\n    print(int(lst[58]))\n    print(int(lst[59]))\n    print(int(lst[60]))\n    print(int(lst[61]))\n    print(int(lst[62]))\n    print(int(lst[63]))\n    print(int(lst[64]))\n    print(int(lst[65]))\n    print(int(lst[66]))\n    print(int(lst[67]))\n    print(int(lst[68]))\n    print(int(lst[69]))\n    print(int(lst[70]))\n    print(int(lst[71]))\n    print(int(lst[72]))\n    print(int(lst[73]))\n    print(int(lst[74]))\n    print(int(lst[75]))\n    print(int(lst[76]))\n    print(int(lst[77]))\n    print(int(lst[78]))\n    print(int(lst[79]))\n    print(int(lst[80]))\n    print(int(lst[81]))\n    print(int(lst[82]))\n    print(int(lst[83]))\n    print(int(lst[84]))\n    print(int(lst[85]))\n    print(int(lst[86]))\n    print(int(lst[87]))\n    print(int(lst[88]))\n    print(int(lst[89]))\n    print(int(lst[90]))\n    print(int(lst[91]))\n    print(int(lst[92]))\n    print(int(lst[93]))\n    print(int(lst[94]))\n    print(int(lst[95]))\n    print(int(lst[96]))\n    print(int(lst[97]))\n    print(int(lst[98]))\n    print(int(lst[99]))\n    print(int(lst[100]))\n    print(int(lst[101]))\n    print(int(lst[102]))\n    print(int(lst[103]))\n    print(int(lst[104]))\n    print(int(lst[105]))\n    print(int(lst[106]))\n    print(int(lst[107]))\n    print(int(lst[108]))\n    print(int(lst[109]))\n    print(int(lst[110]))\n    print(int(lst[111]))\n    print(int(lst[112]))\n    print(int(lst[113]))\n    print(int(lst[114]))\n    print(int(lst[115]))\n    print(int(lst[116]))\n    print(int(lst[117]))\n    print(int(lst[118]))\n    print(int(lst[119]))\n    print(int(lst[120]))\n    print(int(lst[121]))\n    print(int(lst[122]))\n    print(int(lst[123]))\n    print(int(lst[124]))\n    print(int(lst[125]))\n    print(int(lst[126]))\n    print(int(lst[127]))\n    print(int(lst[128]))\n    print(int(lst[129]))\n    print(int(lst[130]))\n    print(int(lst[131]))\n    print(int(lst[132]))\n    print(int(lst[133]))\n    print(int(lst[134]))\n    print(int(lst[135]))\n    print(int(lst[136]))\n    print(int(lst[137]))\n    print(int(lst[138]))\n    print(int(lst[139]))\n    print(int(lst[140]))\n    print(int(lst[141]))\n    print(int(lst[142]))\n    print(int(lst[143]))\n    print(int(lst[144]))\n    print(int(lst[145]))\n    print(int(lst[146]))"
    },
    {
        "number": 4195,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    arr = [int(x) for x in stdin.split()]\n    arr.sort()\n    return str(arr[-1])\n"
    },
    {
        "number": 4195,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   D = int(stdin)\n   for i in range(1, D+1):\n       print(D%i, end='')\n   return str(D)\n\ndef"
    },
    {
        "number": 4195,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    D, N = map(int, stdin.split())\n    if N > 10:\n        N = 10\n    sum = N\n    for i in range(D, 1, -1):\n        if sum % i == 0:\n            sum /= i\n        else:\n            break\n    return str(sum)\n\"\"\"\n\ndef"
    },
    {
        "number": 4195,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    D = stdin\n    N = int(stdin)\n    print(N//(D*100))\n    return str(N%D)\n"
    },
    {
        "number": 4195,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    D, N = map(int, stdin.split())\n    if D == 0: return '0'\n    if D == 1: return str(1)\n    if D == 2: return str(3)\n    if D == 3: return str(6)\n    if D == 4: return str(24)\n    if D == 5: return str(120)\n    if D == 6: return str(720)\n    if D == 7: return str(840)\n    if D == 8: return str(1200)\n    if D == 9: return str(1800)\n    if D == 10: return str(2880)\n    if D == 11: return str(4360)\n    if D == 12: return str(6600)\n    if D == 13: return str(6940)\n    if D == 14: return str(12200)\n    if D == 15: return str(17200)\n    if D == 16: return str(28800)\n    if D == 17: return str(43200)\n    if D == 18: return str(69600)\n    if D == 19: return str(12600)\n    if D == 20: return str(25600)\n    if D == 21: return str(38400)\n    if D == 22: return str(5200)\n    if D == 23: return str(58400)\n    if D == 24: return str(72000)\n    if D == 25: return str(94000)\n    if D == 26: return str(119600)\n    if D == 27: return str(181800)\n    if D == 28: return str(222000)\n    if D == 29: return str(306800)\n    if D == 30: return str(354400)\n    if D == 31: return str(416800)\n    if D == 32: return str(544400)\n    if D == 33: return str(756800)\n    if D == 34: return str(98600)\n    if D == 35: return str(117800)\n    if D == 36: return str(174800)\n    if D == 37: return str(2002400)\n    if D == 38: return str(276800)\n    if D == 39: return str(313400)\n    if D == 40: return str(386800)\n    if D == 41: return str(505200)\n    if D == 42: return str(598400)\n    if D == 43: return str(721000)\n    if D == 44: return str(796800)\n    if D == 45: return str(1154300)\n    if D == 46: return str(1792400)\n    if D == 47: return str(2307200)\n    if D == 48: return str(3367600)\n    if D == 49: return str(396800)\n    if D == 50: return str(4934400)\n    if D == 51: return str(547400)\n    if D == 52: return str(589200)\n    if D == 53: return str(646800)\n    if D == 54: return str(686400)\n    if D == 55: return str(7295200)\n    if D == 56: return str(7929600)\n    if D == 57: return str(1250000)\n    if D == 58: return str(1829600)\n    if D == 59: return str(2364800)\n    if D == 60: return str(2997600)\n    if D == 61: return str(3589400)\n    if D == 62: return str(4282800)\n    if D == 63: return str(5325600)\n    if D == 64: return str(5895200)\n    if D == 65: return str(7079600)\n    if D == 66: return str(9274000)\n    if D == 67: return str(1185600)\n    if D == 68: return str(1598000)\n    if D == 69: return str(2054400)\n    if D == 70: return str(2768800)\n    if D == 71: return str(3104400)\n    if D == 72: return str(3842800)\n    if D == 73: return str(5289200)\n    if D == 74: return str(6424200)\n    if D == 75: return str(6929600)\n    if D == 76: return str(9472800)\n    if D == 77: return str(1295200)\n    if D == 78: return str(20512400)\n    if D == 79: return str(2885200)\n    if D == 80: return str(3560200)\n    if D == 81: return str(4475200)\n    if D == 82: return str(5525600)\n    if D == 83: return str(6627600)\n    if D == 84: return str(7874200)\n    if D == 85: return str(9365600)\n    if D == 86: return str(1287200)\n    if D == 87: return str(1926600)\n    if D == 88: return str(2944800)\n    if D == 89: return str(3425600)\n    if D == 90: return str(4272800)\n    if D == 91: return str(5457800)\n    if D == 92: return str(6565600)\n    if D == 93: return str(7939200)\n    if D == 94: return str(11577200)\n    if D == 95: return str(18159200)\n    if D == 96: return str(2534200)\n    if D == 97: return str(3484200)\n    if D == 98: return str(4055200)\n    if D == 99: return str(5256300)\n    if D == 100: return str(5828800)\n    if D == 101: return str(7454800)\n    if D == 102: return str(91819200)\n    if D == 103: return str(15658200)\n    if D == 104: return str(2487200)\n    if D == 105: return str(2973200)\n    if D == 106: return str(3437200)\n    if D == 107: return str(4144300)\n    if D == 108: return str(4795900)\n    if D == 109: return str(5687500)\n    if D == 110: return str(8365700)\n    if D == 111: return str(11485700)\n    if D == 112: return str(15527400)\n    if D == 113: return str(2385200)\n    if D == 114: return str(2933600)\n    if D == 115: return str(3545200)\n    if D == 116: return str(4489200)\n    if D == 117: return str(54920800)\n    if D == 118: return str(6667600)\n    if D == 119: return str(84899600)\n    if D == 120: return str(10567600)\n    if D == 121: return str(18896500)\n    if D == 122: return str(249325600)\n    if D == 123: return str(30953500)\n    if D == 124: return str(35593500)\n    if D == 125: return str(44220200)\n    if D == 126: return str(50678500)\n    if D == 127: return str(68532500)\n    if D == 128: return str(87172500)\n    if D == 129: return str(13686500"
    },
    {
        "number": 4195,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n"
    },
    {
        "number": 4196,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, A = [int(i) for i in stdin.split()]\n    answer = max(A, A // 2)\n    if answer < A:\n        answer = A\n    return str(answer)\n\"\"\"\n\nfrom math import gcd\n\ndef"
    },
    {
        "number": 4196,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4196,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\ndef"
    },
    {
        "number": 4196,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    numbers = [int(num) for num in stdin.split(\" \")]\n    gcd = 1\n    max_gcd = 1\n    for i in range(len(numbers)-1):\n        for j in range(i+1, len(numbers)):\n            gcd *= numbers[i] // numbers[j]\n            max_gcd = max(max_gcd, gcd)\n    return str(max_gcd)\n"
    },
    {
        "number": 4196,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    nums = list(map(int, stdin.split()))\n    for i in range(len(nums)):\n        nums[i] = str(nums[i])\n    res = ''\n    for i in range(len(nums)):\n        l = len(nums[i])\n        if l <= 1:\n            continue\n        else:\n            for j in range(len(nums[i])):\n                if j == 0:\n                    res += str(l)\n                elif j < len(nums[i]) - 1:\n                    res += str(l % 10**(l - 1))\n                else:\n                    res += str(l % 10)\n    return res\n\nPrint the maximum possible greatest common divisor of the N integers on the blackboard after your move.\n'''\n"
    },
    {
        "number": 4196,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, n_2, n_3 = map(int, stdin.split())\n    a = [i+1 for i in range(n+1)]\n    b = [i+1 for i in range(n_2)]\n    \n    def find_gcd(i, j):\n        while i!= j:\n            temp = i\n            i = j\n            j = temp % j\n        return j\n    \n    answer = 1\n    \n    while a[n] <= n_3:\n        for i in range(a[n], n+1):\n            for j in range(b[n_2], n_2+1):\n                if find_gcd(i, j) > n:\n                    answer = max(answer, i)\n    return answer"
    },
    {
        "number": 4196,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    A = list(map(int, stdin.split()))\n    A.sort()\n    for i in A:\n        j = A.index(i)\n        if A[j] % i == 0:\n            A[j] = A[j] // i\n    A.sort()\n    return str(max(A))\n\n\n\nprint(solution(input()))\n\n\n\ndef"
    },
    {
        "number": 4196,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    lst = list(map(int,stdin.split()))\n    k = int(lst[0])\n    i = 1\n    while i < n:\n        lst[i] = lst[i]//k\n        k = lst[i]\n        i+=1\n    return \"\".join(str(i) for i in lst)\n"
    },
    {
        "number": 4196,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [0] * 10\n    for i in range(n):\n        a[int(stdin[i])] += 1\n    for i in range(1, 10):\n        a[i] += a[i - 1]\n    for i in range(2, 10):\n        a[i] += a[i - 2]\n    for i in range(3, 10):\n        a[i] += a[i - 3]\n    if n % 2 == 1:\n        a[n] += 1\n        a[n - 1] += 1\n    print(max(a))\nsolution(stdin)\n"
    },
    {
        "number": 4196,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin[:stdin.find(' ')])\n    A = [int(x) for x in stdin[stdin.find(' ') + 1:]]\n    A.sort()\n    answer = 0\n    for i in range(len(A)):\n        for j in range(i + 1, len(A)):\n            answer = max(answer, A[j] // A[i])\n    return str(answer)\n\n-----Constraints-----\n - All values in input are integers.\n - 2 \\leq N \\leq 10^5\n - 1 \\leq A_i \\leq 10^9\n\n-----Output-----\nPrint the maximum possible greatest common divisor of the N integers on the blackboard after your move.\n\n-----Sample Input-----\n3\n7 6 8\n\n-----Sample Output-----\n2\n\nThe greatest common divisor of the three integers on the blackboard is 2, which is the maximum possible value.\n"
    },
    {
        "number": 4197,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    a_list = list(map(int, stdin.split()))\n\n    def dfs(x):\n        if x == N:\n            return 0\n        else:\n            return 1 + dfs(x + 1)\n\n    return list(map(str, map(str, filter(None, a_list))))\n\n'''\n\nclass Solution:\n    def reorderLogFiles(self, logs: List[str]) -> List[str]:\n        result = []\n        a_list = list(map(int, logs))\n        a_list.sort(reverse = True)\n        print(a_list)\n        for i in a_list:\n            if i!= 0:\n                result.append(str(i))\n        return result\n"
    },
    {
        "number": 4197,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    c = [x for x in a if x!= 0]\n    b = [x-1 for x in a if x!= 0]\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            if a[i] < a[j]:\n                b[j] = i+1\n                break\n    ans =''.join(map(str, b[::-1]))\n    return ans\n"
    },
    {
        "number": 4197,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Time: O(n^2 * n)\n    # Space: O(n^2)\n    A = [0] * (int(stdin.strip()) + 1)\n    for i in range(int(stdin.strip()) + 1):\n        A[i] = i\n    for i in range(int(stdin.strip()) + 1):\n        for j in range(i + 1, int(stdin.strip()) + 1):\n            if A[i] == A[j]:\n                A[i] += 1\n            else:\n                if A[j] > A[i]:\n                    A[i], A[j] = A[j], A[i]\n    return ''.join(map(str, A[1:len(A)]))"
    },
    {
        "number": 4197,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    n, a = map(int, s.split())\n    b = map(int, s.split())\n    l = []\n    for i in b:\n        l.append(i)\n    for i in l:\n        if i == a:\n            return sorted(l)\n    return ''"
    },
    {
        "number": 4197,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    A = [0] * (n+1)\n    for i in range(1,n+1):\n        A[i] = int(stdin[i])\n    A = sorted(A)\n    for i in range(1,n+1):\n        if A[i] == A[i-1]:\n            continue\n        else:\n            print(A[i],end=\"\")\n    return \"\"\n\nTime complexity: O(N)\nSpace Complexity: O(N)\n\n'''\nclass Solution:\n    def reorderStudentNames(self, names: List[str]) -> List[str]:\n        \n        return sorted(names, key = lambda x: x[1:])\n"
    },
    {
        "number": 4197,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    students = [int(i) for i in stdin.strip().split()]\n    ans = []\n    for student in students:\n        if student == students[0]:\n            ans.append(1)\n        else:\n            ans.append(student)\n    return \",\".join([str(i) for i in ans])"
    },
    {
        "number": 4197,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    student = sorted(list(map(int, stdin.split())))\n    answer = []\n    for i in range(n):\n        answer.append(student[i] + 1)\n    return \"\".join(map(str, answer))\n\"\"\"\n\n\nclass Solution:\n    def reconstruct(self, A: List[int], n: int) -> str:\n        answer = [1]\n        for i in range(1, n + 1):\n            for j in range(i - 1, -1, -1):\n                if A[j] <= i - 1:\n                    answer.append(i - 1)\n                    break\n                else:\n                    answer.append(A[j] + 1)\n        return \"\".join(map(str, answer))\n"
    },
    {
        "number": 4197,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, A = map(int, stdin.split())\n    A = [int(i) for i in A]\n    if len(A)!= N:\n        return \"\"\n    \n    students = []\n    for student in A:\n        if student not in students:\n            students.append(student)\n        \n    students.sort()\n    \n    return \"\".join([str(i) for i in students])"
    },
    {
        "number": 4197,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    student_list = list(map(int, stdin.strip().split()))\n    student_list.sort()\n    for i in student_list:\n        print(i, end=\" \")\n"
    },
    {
        "number": 4197,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A = list(map(int, stdin.split()))\n    A = sorted(A)\n    return ''.join(str(x) for x in A)\n"
    },
    {
        "number": 4198,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Generate array of integers.\n    nums = []\n    for _ in range(12):\n        nums.append(int(stdin.replace(' ', '')))\n    # Find the largest integer that Takahashi can buy when he has X yen.\n    return max(nums)"
    },
    {
        "number": 4198,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = map(int, stdin.split())\n    answer = 0\n    while A >= 10**9:\n        A -= 10**9\n    while B >= 10**9:\n        B -= 10**9\n    while X >= 10**18:\n        X -= 10**18\n    while A > 0:\n        while B >= 0:\n            while X >= 0:\n                answer = max(answer, X + A + B)\n                A -= 1\n                B -= 1\n                X -= 1\n            A += 1\n        X += 1\n        B -= 1\n        A = A % 10**9\n    return str(answer)"
    },
    {
        "number": 4198,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = map(int, stdin.split())\n    return str(max(A * B * X, 0))\n"
    },
    {
        "number": 4198,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = map(int, stdin.split())\n    return str(max(A, B, X)) +'' + str(max(A, B, X)) +'' + str(max(A, B, X))\n"
    },
    {
        "number": 4198,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    X = A * B\n    while True:\n        X = A * B\n        if X >= 10**18:\n            break\n        A, B = A // 10**9, B // 10**9\n        X += A * B\n    print(X)\n"
    },
    {
        "number": 4198,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = map(int, stdin.split())\n    c = 100 - (A*10 + B*10 + X)\n    if c > 9:\n        print(0)\n    else:\n        print(c)\n        return\n    pass\n"
    },
    {
        "number": 4198,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    for case in range(0,int(stdin)):\n        string = input()\n        prices = [int(i) for i in string.split()]\n        prices.sort()\n        for price in prices:\n            if price == 0:\n                continue\n            a = price\n            b = price\n            x = a\n            y = a\n            a *= 10\n            b *= 10\n            while y > 0:\n                if y % 10 == a % 10:\n                    y //= 10\n                    a = y\n                    b = a\n                if y % 10 == b % 10:\n                    y //= 10\n                    b = y\n                x = b\n                y = a\n            if x < 10:\n                print(int(x * y))\n            else:\n                print(int(a * y))\n"
    },
    {
        "number": 4198,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    c = (n * n + k) // 2\n    if c <= 10:\n        print(c)\n        return c\n    for i in range(1, 10 ** (c // 2) + 1):\n        if c % i == 0:\n            c //= i\n            k -= 1\n            break\n    else:\n        print(0)\n        return 0\n    answer = 10 ** (c // 2) + 10 ** (c % 2)\n    if k:\n        answer *= 2 ** k\n    return answer\n"
    },
    {
        "number": 4198,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = map(int, stdin.split())\n    if A < 0 or B < 0 or X < 10 or A > 10**9 or B > 10**9 or X > 10**18:\n        return 0\n    \n    return str(min(9 + X * B * A, 10 * 9 * A + 10 * 10 * B * X))\n"
    },
    {
        "number": 4198,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    inp = stdin.split()\n    for a in inp:\n        a = int(a)\n        print(max(int(a ** (1/3)),int(a ** (1/2))))\n        \n        \n"
    },
    {
        "number": 4199,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = [int(x) for x in stdin.split()]\n\n    f_i = [int(x) for x in input().split()]\n\n    h_i = [int(x) for x in input().split()]\n\n    sum_i = sum(f_i)\n\n    for i in range(K):\n        if sum_i < f_i[i]:\n            sum_i = sum_i - f_i[i]\n        else:\n            sum_i = sum_i + f_i[i]\n\n    return f'{N}' if sum_i == 0 else f'{N-1}'\n\n-----Sample Output-----\n2\n\nOne of the people who can ride the roller coaster: the first and fourth friends.\n"
    },
    {
        "number": 4199,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, K, h_1, h_2 = map(int, stdin.split())\n    people = [int(i) for i in stdin.split()]\n    \n    r = [0, 0]\n    for i in range(K):\n        s = max(r[1], h_1 - people[i]) + people[i]\n        if r[1] > h_1:\n            r[1] = h_1\n        else:\n            r[0] += s\n    print(r[0] + r[1])\n    return str(r[0] + r[1])\n\"\"\"\n\ndef"
    },
    {
        "number": 4199,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin.split(' ')[0])\n    N = int(stdin.split(' ')[1])\n    h = list(map(int, stdin.split(' ')[2:]))\n    ans = []\n    people = 0\n    for i in range(N):\n        people += h[i]\n        for j in range(i+1,N):\n            people -= h[j]\n            if people < 0:\n                people = -people\n            else:\n                break\n        if people < 0:\n            people = -people\n        else:\n            ans.append(people)\n    return str(len(ans))\n\"\"\"\n\ndef"
    },
    {
        "number": 4199,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    return str(len(set(map(int, stdin.split()))))\n"
    },
    {
        "number": 4199,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    K, *nums = map(int, stdin.split())\n    h_i = 0\n    for n in nums:\n        h_i += n * K\n    return str(h_i)"
    },
    {
        "number": 4199,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    n_friends = [int(x) for x in stdin.split() if x.isnumeric()]\n    return '\\n'.join(map(str, [list(map(int, i)) for i in n_friends]))"
    },
    {
        "number": 4199,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4199,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\ndef"
    },
    {
        "number": 4199,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n  for i in range(0, len(stdin)):\n    n = stdin[i].split()\n    if len(n) == 2:\n      n = int(n[0])\n      h = int(n)\n      if h <= 500 and h > 0:\n        k = 500\n      elif h <= 500 and h < 500:\n        k = 50\n      elif h <= 500 and h > 500:\n        k = 40\n      else:\n        k = 30\n      print(k)\n  return \"3\"\n\nRuntime: 96 ms, faster than 83.17% of Python3 online submissions for Number of Friends of a People.\nMemory Usage: 13.8 MB, less than 23.46% of Python3 online submissions for Number of Friends of a People.\n"
    },
    {
        "number": 4199,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    k = list(map(int, stdin.split()))\n    m = [int(s) for s in stdin.split()]\n    k.sort(reverse=True)\n    a = [0] * k[-1]\n    for i in range(k[-1]):\n        a[i] = i + 1\n    for i in range(k[-2], k[-1]):\n        a[i - 1] = a[i]\n    for i in range(k[-2], k[-1]):\n        a[i - 1] = a[i] + 1\n    for i in range(1, k[-1]):\n        a[i] += 1\n    for i in range(k[-1] - 2, -1, -1):\n        a[i] += 1\n    for i in range(k[-1] - 1, -1, -1):\n        a[i] += 1\n    for i in range(1, k[-1]):\n        a[i] += 1\n    return str(a[1]) + '\\n'\n"
    },
    {
        "number": 4200,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    A.sort()\n    if M <= N // 2:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4200,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    A_1, A_2, A_3, A_4, A_5 = map(int, stdin.split())\n    \n    A_1_votes = 0\n    A_2_votes = 0\n    A_3_votes = 0\n    A_4_votes = 0\n    A_5_votes = 0\n\n    for i in range(N):\n        if A_1 <= A_i and A_2 <= A_i and A_3 <= A_i and A_4 <= A_i and A_5 <= A_i:\n            A_1_votes += 1\n        elif A_1 <= A_i and A_2 <= A_i and A_3 <= A_i and A_4 <= A_i and A_5 <= A_i:\n            A_2_votes += 1\n        elif A_1 <= A_i and A_2 <= A_i and A_3 <= A_i and A_4 <= A_i and A_5 <= A_i:\n            A_3_votes += 1\n        elif A_1 <= A_i and A_2 <= A_i and A_3 <= A_i and A_4 <= A_i and A_5 <= A_i:\n            A_4_votes += 1\n        elif A_1 <= A_i and A_2 <= A_i and A_3 <= A_i and A_4 <= A_i and A_5 <= A_i:\n            A_5_votes += 1\n    \n    if A_1_votes > A_2_votes and A_1_votes > A_3_votes and A_1_votes > A_4_votes:\n        return 'Yes'\n    elif A_1_votes > A_2_votes and A_1_votes > A_3_votes:\n        return 'Yes'\n    elif A_1_votes > A_3_votes and A_1_votes > A_4_votes:\n        return 'Yes'\n    elif A_1_votes > A_5_votes:\n        return 'No'\n    else:\n        return 'No'"
    },
    {
        "number": 4200,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\n\nimport sys\nfrom collections import deque\n\n\ndef"
    },
    {
        "number": 4200,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    M, N = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    A.sort()\n    B = list(set(A))\n    B.sort(reverse=True)\n    for i in range(M):\n        if B.count(A[i]) >= B.count(B[i]) * 2:\n            return \"Yes\"\n        else:\n            return \"No\"\n"
    },
    {
        "number": 4200,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    import math\n    n,m=map(int,stdin.split())\n    lst=list(map(int,stdin.split()))\n    lst.sort()\n    ans=list(set(lst))\n    max_ans=max(ans)\n    if len(ans)==n:\n        print('Yes')\n    else:\n        print('No')\n    return str(min(max_ans,math.ceil(m/n)))\n"
    },
    {
        "number": 4200,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    A_list = list(map(int, stdin.split()))\n    answer = [''] * n\n    A_dict = {}\n    for i in range(n):\n        A_dict[A_list[i]] = i\n    for i in range(m):\n        answer[A_dict[A_list[i]]] = 'Yes'\n    return ''.join(answer)"
    },
    {
        "number": 4200,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    A.sort()\n    ans = 0\n    for item in A:\n        if M // item > 0:\n            ans += (M // item) * item\n            M -= M // item\n        else:\n            ans += (item * M)\n            M = M // item\n    if M == 0:\n        ans += M\n    print(ans)\n    return 'Yes' if ans == N else 'No'\n\nTime complexity: O(N)\nSpace Complexity: O(1)\n\"\"\"\n\ndef"
    },
    {
        "number": 4200,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N,M=map(int,stdin.split())\n    A=[0]*N\n    for i in range(N):\n        A[i]=int(stdin[i])\n    \n    for i in range(N):\n        for j in range(M):\n            if i==0:\n                A[i]=A[i]*A[j]\n            elif i==M-1:\n                A[i]=A[i]*A[j]\n            else:\n                if j==0:\n                    A[i]=A[i]*A[j]\n                elif j==M-1:\n                    A[i]=A[i]*A[j]\n                else:\n                    A[i]=A[i]*A[j]/A[i-1]\n    \n    print(A[N-1]==1)\n    return \"Yes\" if A[N-1]==1 else \"No\"\n"
    },
    {
        "number": 4200,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    votes = list(map(int, stdin.split()))\n    count = len(votes)\n    if (N % count!= 0):\n        return 'No'\n    else:\n        for i in range(count // 2):\n            if votes[i] >= M:\n                votes[i], votes[-1-i] = votes[-1-i], votes[i]\n        print('Yes' if sum(votes) / count == M else 'No')\n        return 'Yes' if sum(votes) / count == M else 'No'\n"
    },
    {
        "number": 4200,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    A.sort()\n    A_popular = 0\n    if A_popular >= N:\n        return 'Yes'\n    A_popular = len(A)\n    for i in range(N):\n        A_popular += A[i]\n    for i in range(M):\n        A_popular -= A[A_popular + i]\n    if A_popular >= N:\n        return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 4201,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    c = []\n    k = int(stdin.split()[-1])\n    N = len(stdin.split())\n    for i in range(N - 1):\n        c.append(stdin.split()[i + 1])\n    for row in c:\n        for char in row:\n            if char == \"#\":\n                c[c.index(row)][c.index(char)] = 1\n            else:\n                c[c.index(char)][c.index(row)] = 1\n    answer = []\n    for i in range(k):\n        answer.append(c[i])\n    return \"\".join(answer)\n\"\"\"\n\n\nclass Solution:\n    def numSquares(self, n: int) -> int:\n        squares = [1, 1]\n        while len(squares) < n + 1:\n            squares.append(squares[-1] * squares[-1])\n        return sum(squares)\n"
    },
    {
        "number": 4201,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    result = 0\n    N = int(stdin)\n    for j in range(N):\n        lines = list(map(str, stdin.split()))\n        for i in range(len(lines) - 1):\n            if lines[i][-1] == \"#\":\n                result += 1\n    return str(result)"
    },
    {
        "number": 4201,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin.strip())\n    rows = []\n    cols = []\n    for i in range(K):\n        c = stdin.split()\n        rows.append(int(c[1]))\n        cols.append(int(c[2]))\n    return str(len(rows) + len(cols)) + \" \" + str(max(rows) + max(cols))"
    },
    {
        "number": 4201,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    rows, columns = [int(i) for i in stdin.split()]\n    for _ in range(rows):\n        for _ in range(columns - 3):\n            #print('+', end='')\n            for _ in range(columns - 3):\n                print('#', end='')\n            print()\n    return str(columns * rows)\n\nprint(solution(stdin))"
    },
    {
        "number": 4201,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    res = [0] * n\n    for i in range(n):\n        row = [0] * k\n        for j in range(k):\n            row[j] = int(stdin[i][j])\n        res[i] = sum(row)\n    return str(sum(res))\n\n\n--------------------------------------------------------------------\n"
    },
    {
        "number": 4201,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    H, W, K = map(int, stdin.split())\n    c = []\n    for _ in range(H):\n        temp = [char for char in stdin.split()]\n        c.append(temp)\n    # print(c)\n    return str(dfs(c,0,0,W))\n    # print(dfs(c,0,0,0))\n    # return \"5\""
    },
    {
        "number": 4201,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    H, W, K = map(int, stdin.split())\n    if H == 0 or W == 0:\n        return '0'\n    elif H == 1:\n        return ''.join(map(str, range(1, H+1)))\n    elif W == 1:\n        return ''.join(map(str, range(1, W+1)))\n    elif W > 1:\n        rows = ''.join(map(str, range(1, H+1)))\n        columns = ''.join(map(str, range(1, W+1)))\n        rows_op, columns_op = rows.split('.'), columns.split('.')\n        result = 0\n        for i in range(len(rows_op)):\n            for j in range(len(columns_op)):\n                result += K if ((i in rows_op) and (j in columns_op)) else 0\n        return ''.join([str(result)])\n    \n'''\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        rows = list(map(int, stdin.split('.')))\n        cols = list(map(int, stdin.split('.')))\n        return ''.join(map(str, filter(lambda x: x!= 0, rows+cols)))\n"
    },
    {
        "number": 4201,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    H, W, K = map(int, stdin.split())\n    c = list(map(int, stdin.split()))\n    print(solution_helper(H, W, K, c))\n    return '\\n'.join(map(str, solution_helper(H, W, K, c)))\n\ndef"
    },
    {
        "number": 4201,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    H, W, K = map(int, stdin.split())\n    grid = []\n    for _ in range(H):\n        grid.append([c for c in stdin.split()])\n    for i in range(1, H):\n        for j in range(W-1):\n            if grid[i][j] == \"#\":\n                for k in range(j+1, W):\n                    grid[i][k] = \"#\"\n    for i in range(H-1):\n        for j in range(W-1):\n            if grid[i][j] == \"#\":\n                for k in range(j, W):\n                    grid[i][k] = \"#\"\n    res = 0\n    for i in range(1, H):\n        for j in range(W-1):\n            if grid[i][j] == \"#\":\n                if grid[i][j+1] == \"#\":\n                    res += 1\n                elif grid[i][j+2] == \"#\":\n                    res += 1\n                else:\n                    res += 2\n    return str(res)\n"
    },
    {
        "number": 4201,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    WHITE = '.'\n    BLACK = '#'\n    for i in range(N):\n        if i % 2 == 0:\n            print(i, end=' ')\n        print(''.join(WHITE if (WHITE in c) else BLACK for c in map(''.join, zip(*[iter(stdin)]*N))))\n    return str(K)\n\nprint(solution(open('input.txt').read()))"
    },
    {
        "number": 4202,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    N, K = [int(i) for i in lines[0].split(' ')]\n    \n    for _ in range(N):\n        i, j = [int(i) for i in lines[1].split(' ')]\n        if j-i < K:\n            i = j-i\n            j = K-j\n        if j-i < K:\n            j = K-j\n        print(i,j)\n    return str(i*j)"
    },
    {
        "number": 4202,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, L, R = map(int, stdin.split())\n    if N < L < R:\n        return str(min(N % L, R % N))\n    return ''\n\ndef"
    },
    {
        "number": 4202,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    L, R = map(int, stdin.split(\" \"))\n    for i in range(L, R+1):\n        j = (i*i)\n        j = str(j)\n        if (int(j[0]) % 2 == 1 and int(j[1]) % 2 == 1):\n            print(\"2\")\n            return j\n    \n    print(\"0\")\n    return \"\"\n\n-----Sample Output-----\n1\n\nWhen (i, j) = (2020, 2021), (i \\times j) \\mbox{ mod } 2019  = 2.\n\ndef"
    },
    {
        "number": 4202,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split()\n    l, r = [int(x) for x in input[0].split(\" \")]\n    mod = 10**9+7\n    print(l*r//mod)\nsolution(input)\n\nTime complexity: O(l*r) - Best case: All input is given and must be modulo 2019. \nSpace Complexity: O(1) - It is the same as l = R = 2^n.\n\"\"\"\n\ndef"
    },
    {
        "number": 4202,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    for i in range(N):\n        for j in range(i + 1, N):\n            if K % (i * j) == 0:\n                print(i, j)\n                return i * j\n    print(-1)\n\n-----Sample Output-----\n5\n\nWhen (i, j) = (2020, 2021), (i \\times j) \\mbox{ mod } 2019  = 2.\n'''\n\ndef"
    },
    {
        "number": 4202,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n  L, R = list(map(int, stdin.split(\" \")))\n  answer = 0\n  mod = 2019\n  if (L % 2 == 0) and (R % 2 == 0):\n    answer = min(L,R)\n    mod = (L+R)//2\n  else:\n    answer = min(L,R)\n    mod = (L+R)//2\n  answer = (answer*mod)%mod\n  return str(answer)\n\nprint(solution(\"2020 2040\"))\n\"\"\"\n"
    },
    {
        "number": 4202,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n  L, R = map(int, stdin.split())\n  return str(sum(map(lambda x,y: (x*y), list(range(L,R+1)), list(range(1,R+1))))% 2019)\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4202,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    line = [int(s) for s in stdin.split()]\n    l, r = line[0], line[-1]\n    if l > r:\n        l, r = r, l\n    while l % 2 == 0:\n        l //= 2\n    while r % 2 == 0:\n        r //= 2\n    return str(l * r % 2019)\n\n-----Sample Output-----\n2\n\nWhen (i, j) = (2020, 2020), (i \\times j) \\mbox{ mod } 2019  = 2.\n"
    },
    {
        "number": 4202,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    numbers = []\n    for line in stdin:\n        numbers.append(int(line))\n\n    numbers.sort()\n    i = 0\n    j = len(numbers) - 1\n    answer = 0\n    while i <= j:\n        answer += (i * j)\n        i += 1\n        j -= 1\n    return answer\n\n-----Example 1 -----\n\nInput :\n3 5\n4 2\n3 7\nOutput :\n18\n\nExplanation :\n(3*4) + (3*2) + (3*7) = 18\n\n-----Example 2 -----\n\nInput :\n3 7\n1 2\n1 3\n1 4\nOutput :\n0\n\nExplanation :\n(3*7) + (3*3) + (3*1) = 0\n\n-----Example 3 -----\n\nInput :\n3 2\n1 2\n1 3\n2 3\nOutput :\n3\n\nExplanation :\n(3*2) + (3*1) + (3*1) = 3\n\n------Solution-----\n\ndef"
    },
    {
        "number": 4202,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, l, r = map(int, stdin.split())\n    if n < l:\n        n += l\n    elif n > r:\n        n -= r\n    l, r = max(l, n // 10), min(r, n % 10)\n    return str(n * (l + r) % 2019)\n\ndef"
    },
    {
        "number": 4203,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n  A, C = stdin\n  count = 0\n  \n  for i in range(len(A)):\n    if A[i]!= C:\n      count += 1\n      \n    if A[i] == C and i+2 < len(A) and A[i:i+2] == C:\n      count += 1\n      \n  if count > 0:\n    print(\"WA\")\n  elif count == 0:\n    print(\"AC\")\n  else:\n    print(\"AC\")\n"
    },
    {
        "number": 4203,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split(' ')\n    for i in range(len(a)):\n        a[i] = a[i].split(',')\n        for i in range(len(a[i])):\n            a[i][1] = a[i][1].replace('A','A').replace('C','C').lower()\n            a[i][1] = a[i][1].replace('C','C').lower()\n    for i in range(len(a)):\n        a[i][2] = a[i][2].replace('A','A').replace('C','C').lower()\n        a[i][2] = a[i][2].replace('C','C').lower()\n    answer = []\n    for i in range(len(a)):\n        for j in range(len(a[i])):\n            if a[i][j][0] in ['A','C']:\n                answer.append(a[i][j][1])\n    print(''.join(answer))\n    return 'WA' if len(answer) == 1 else 'AC'\n'''\n\nclass Solution:\n    def isUpperCase(self, S):\n        a = S.split(' ')\n        for i in range(len(a)):\n            a[i] = a[i].split(',')\n            for i in range(len(a[i])):\n                a[i][1] = a[i][1].replace('A','A').replace('C','C').lower()\n                a[i][1] = a[i][1].replace('C','C').lower()\n        for i in range(len(a)):\n            a[i][2] = a[i][2].replace('A','A').replace('C','C').lower()\n            a[i][2] = a[i][2].replace('C','C').lower()\n        for i in range(len(a)):\n            if a[i][1] == 'A' and a[i][2] == 'C':\n                return 'WA'\n        for i in range(len(a)):\n            if a[i][1] == 'C' and a[i][2] == 'A':\n                return 'WA'\n        return 'AC'\n\n    def solution(self, stdin: str) -> str:\n        a = stdin.split(' ')\n        for i in range(len(a)):\n            a[i] = a[i].split(',')\n            for i in range(len(a[i])):\n                a[i][1] = a[i][1].replace('A','A').replace('C','C').lower()\n                a[i][1] = a[i][1].replace('C','C').lower()\n        for i in range(len(a)):\n            a[i][2] = a[i][2].replace('A','A').replace('C','C').lower()\n            a[i][2] = a[i][2].replace('C','C').lower()\n        answer = []\n        for i in range(len(a)):\n            for j in range(len(a[i])):\n                if a[i][j][0] in ['A','C']:\n                    answer.append(a[i][j][1])\n        print(''.join(answer))\n        return 'WA' if len(answer) == 1 else 'AC'"
    },
    {
        "number": 4203,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def isA(s):\n        l1 = 0\n        l2 = 0\n        for c in s:\n            if c == \"A\":\n                l1 += 1\n            if c == \"C\":\n                l2 += 1\n        if l1 > l2:\n            return True\n        return False\n    \n    def isC(s):\n        l1 = 0\n        l2 = 0\n        for c in s:\n            if c == \"C\":\n                l1 += 1\n            if c == \"A\":\n                l2 += 1\n        if l1 > l2:\n            return True\n        return False\n    \n    def is(s):\n        count = 0\n        for c in s:\n            if c == \"A\":\n                count += 1\n            if c == \"C\":\n                count += 1\n                break\n        return count >= 3\n    \n    s = stdin.rstrip()\n    if isA(s):\n        return \"AC\"\n    elif isC(s):\n        return \"WA\"\n    elif is(s):\n        return \"WA\"\n    else:\n        return \"AC\"\n"
    },
    {
        "number": 4203,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def solve(s: str, i: int, j: int):\n        if i == j:\n            if s[i] == 'A':\n                return 'WA'\n            else:\n                return 'AC'\n        if i == j + 1:\n            if s[i] == 'A':\n                return 'WA'\n            else:\n                return 'AC'\n        if s[i] == 'C':\n            return solve(s, i + 1, j)\n        else:\n            return solve(s, i, j + 1)\n    \n    for i in range(len(stdin)):\n        s = stdin[i]\n        result = solve(s, i, i)\n        if result == 'WA':\n            return 'WA'\n        else:\n            return 'AC'\n    return 'WA'\n-----Tests-----\nSample Input\nAtCoder\n\nSample Output\nWA\n\nSample Input\nAtCoder\n\nSample Output\nAC\n\n-----Tests-----\nTest Input\n\nAtCoder\n\nTest Output\nWA\n\n-----Tests-----\nTest Input\n\nAtCoder\n\nTest Output\nWA\n\n-----Tests-----\nTest Input\n\nAtCoder\n\nTest Output\nAC\n\n-----Tests-----\nSample Input:\nA\nSample Output:\nWA\n\n-----Tests-----\nSample Input:\nA\nSample Output:\nAC\n\n-----Tests-----\nSample Input:\nA\nSample Output:\nWA\n\n-----Tests-----\nSample Input:\nA\nSample Output:\nAC\n\n-----Tests-----\nSample Input:\nA\nSample Output:\nWA\n\n-----Tests-----\nSample Input:\nA\nSample Output:\nAC\n\n-----Tests-----\nSample Input:\nA\nSample Output:\nWA\n\n-----Tests-----\nSample Input:\nA\nSample Output:\nWA\n\n-----Tests-----\nSample Input:\nA\nSample Output:\nAC\n\n-----Tests-----\nSample Input:\nA\nSample Output:\nWA\n\n-----Tests-----\n\n\"\"\""
    },
    {
        "number": 4203,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    _s = []\n    while stdin:\n        s = stdin.pop()\n        if s.startswith('A') and s!= 'A':\n            _s.append(s[0])\n        elif s.startswith('C') and s!= 'C':\n            _s.append(s[1])\n    answer = ''.join(_s)\n    return answer\n\nExplanation:\nThe first letter is A.\nThe third letter is C.\nThe remaining letters are all lowercase.\n\n-----Input-----\nATCoder\n\n-----Output-----\nWA\n\nThe first letter is A, the third letter is C and the remaining letters are all lowercase, so all the conditions are satisfied.\ndef"
    },
    {
        "number": 4203,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = stdin\n    if (a.islower() and c.islower()) or (b.isupper() and c.islower()) or (b.isupper() and c.islower()):\n        print('WA')\n    else:\n        print('AC')\n    return\n\n-----Sample Execution-----\n> python3 solution.py\nEnter a: A\nA\nEnter b: C\nC\nEnter c: a\nA\nWA\n\"\"\"\n\nclass Solution:\n    def solution(self, stdin):\n        a, b, c = stdin\n        if (a.islower() and c.islower()) or (b.isupper() and c.islower()) or (b.isupper() and c.islower()):\n            print('WA')\n        else:\n            print('AC')\n        return\n"
    },
    {
        "number": 4203,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return answer\n'''\n\nclass Solution:\n    def check(self, S, c):\n        found = False\n        i = 0\n        while i < len(S) and not found:\n            if c == S[i]:\n                found = True\n                i += 1\n            elif c < S[i]:\n                i += 1\n            else:\n                found = True\n        if found:\n            return i\n\n    def convert(self, S):\n        for c in S:\n            if c.isupper():\n                S = S.replace(c, \"A\", 1)\n            else:\n                S = S.replace(c, \"C\", 1)\n        return S\n\n    def str2int(self, S):\n        return [ord(c) - ord('A') for c in S]\n\n    def search(self, S, c):\n        i = self.check(S, c)\n        if i == 0:\n            return -1\n        else:\n            return i\n\n    def solve(self, S):\n        int_c = self.str2int(S)\n        for c in S:\n            int_c[ord(c) - ord('A')] += 1\n        return [self.search(S, c) for c in int_c if c > 0]"
    },
    {
        "number": 4203,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    return \"WA\"\n"
    },
    {
        "number": 4203,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split('\\n')\n    s = list(filter(lambda x: x.isdigit(), s))\n    s = list(filter(lambda x: x!= '', s))\n    answer = s[1][-3:]\n    return answer\n"
    },
    {
        "number": 4203,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def recur(a,b,c,k):\n        if len(k)==2:\n            if (c=='A' or c=='C'):\n                return 'A'\n            elif (c=='G' or c=='T'):\n                return 'C'\n            else:\n                return 'WA'\n        if len(k)==1:\n            if a==b==c:\n                return 'AC'\n            else:\n                return 'WA'\n        else:\n            return 'WA'\n    def recur1(a,b,c,k):\n        if len(k)==2:\n            return a if a=='A' else b\n        if len(k)==1:\n            if c=='A' or c=='C':\n                return 'A'\n            elif c=='G' or c=='T':\n                return 'C'\n            else:\n                return 'WA'\n        else:\n            return 'WA'\n    def recur2(a,b,c,k):\n        if len(k)==2:\n            if c=='A' or c=='C':\n                return a if a=='A' else b\n            elif c=='G' or c=='T':\n                return 'C'\n            else:\n                return 'WA'\n        if len(k)==1:\n            if a==b==c:\n                return 'AC'\n            else:\n                return 'WA'\n        else:\n            return 'WA'\n    \n    def check(a,b,c):\n        if a=='A' and c=='C':\n            return True\n        if a=='C' and c=='A':\n            return True\n        return False\n    \n    a,b,c,k=map(str,stdin.split())\n    k=list(k)\n    k[0],k[1]=k[1],k[0]\n    k.pop(0)\n    k.pop(-1)\n    k=list(k)\n    k[0],k[1]=k[1],k[0]\n    k.pop(0)\n    k=list(k)\n    k[0],k[1]=k[1],k[0]\n    k.pop(0)\n    k=list(k)\n    k[0],k[1]=k[1],k[0]\n    k.pop(0)\n    k=list(k)\n    k[0],k[1]=k[1],k[0]\n    k.pop(0)\n    k=list(k)\n    k[0],k[1]=k[1],k[0]\n    k.pop(0)\n    k=list(k)\n    k[0],k[1]=k[1],k[0]\n    k.pop(0)\n    k=list(k)\n    k[0],k[1]=k[1],k[0]\n    k.pop(0)\n    k=list(k)\n    k[0],k[1]=k[1],k[0]\n    k.pop(0)\n    k=list(k)\n    k[0],k[1]=k[1],k[0]\n    k.pop(0)\n    k=list(k)\n    k[0],k[1]=k[1],k[0]\n    k.pop(0)\n    k=list(k)\n    k[0],k[1]=k[1],k[0]\n    k.pop(0)\n    k=list(k)\n    k[0],k[1]=k[1],k[0]\n    k.pop(0)\n    k=list(k)\n    k[0],k[1]=k[1],k[0]\n    k.pop(0)\n    k=list(k)\n    k[0],k[1]=k[1],k[0]\n    k.pop(0)\n    k=list(k)\n    k[0],k[1]=k[1],k[0]\n    k.pop(0)\n    k=list(k)\n    k[0],k[1]=k[1],k[0]\n    k.pop(0)\n    k=list(k)\n    k[0],k[1]=k[1],k[0]\n    k.pop(0)\n    k=list(k)\n    k[0],k[1]=k[1],k[0]\n    k.pop(0)\n    k=list(k)\n    k[0],k[1]=k[1],k[0]\n    k.pop(0)\n    k=list(k)\n    k[0],k[1]=k[1],k[0]\n    k.pop(0)\n    k=list(k)\n    k[0],k[1]=k[1],k[0]\n    k.pop(0)\n    k=list(k)\n    k[0],k[1]=k[1],k[0]\n    k.pop(0)\n    k=list(k)\n    k[0],k[1]=k[1],k[0]\n    k.pop(0)\n    k=list(k)\n    k[0],k[1]=k[1],k[0]\n    k.pop(0)\n    k=list(k)\n    k[0],k[1]=k[1],k[0]\n    k.pop(0)\n    k=list(k)\n    k[0],k[1]=k[1],k[0]\n    k.pop(0)\n    k=list(k)\n    k[0],k[1]=k[1],k[0]\n    k.pop(0)\n    k=list(k)\n    k[0],k[1]=k[1],k[0]\n    k.pop(0)\n    k=list(k)\n    k[0],k[1]=k[1],k[0]\n    k.pop(0)\n    k=list(k)\n    k[0],k[1]=k[1],k[0]\n    k.pop(0)\n    k=list(k)\n    k[0],k[1]=k[1],k[0]\n    k.pop(0)\n    k=list(k)\n    k[0],k[1]=k[1],k[0]\n    k.pop(0)\n    k=list(k)\n    k[0],k[1]=k[1],k[0]\n    k.pop(0)\n    k=list(k)\n    k[0],k[1]=k[1],k[0]\n    k.pop(0)\n    k=list(k)\n    k[0],k[1]=k[1],k[0]\n    k.pop(0)\n    k=list(k)\n    k[0],k[1]=k[1],k[0]\n    k.pop(0)\n    k=list(k)\n    k[0],k[1]=k[1],k[0]\n    k.pop(0)\n    k=list(k)\n    k[0],k[1]=k[1],k[0]\n    k.pop(0)\n    k=list(k)\n    k[0],k[1]=k[1],k[0]\n    k.pop(0)\n    k=list(k)\n    "
    },
    {
        "number": 4204,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin.split(\" \")[-1][0:len(stdin.split(\" \")[-1])//2])\n    K = K * K * K * K\n    K = bin(K)[2:]\n    K = list(map(int, K))\n    print(K[K.index(1)+1:])\n\nprint(solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 118 119 120 121 122 123 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 164 165 166 167 168 169 170 171 172 173 174 175 176 178 179 180 181 182 183 184 185 186 187 188 189 190 191 191 192 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 237 238 239 240 241 242 243 244 245 245 246 247 248 249 250 251 252 253 253 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 271 272 274 275 276 277 278 279 280 281 282 283 284 285 287 286 288 289 289 290 291 292 293 294 295 296 297 298 299 299 300 301 301 302 303 303 304 305 306 308 309 310 311 311 313 314 315 316 317 318 319 320 321 321 322 323 323 324 325 326 327 328 329 329 330 330 331 331 332 332 333 333 334 334 335 336 337 336 338 339 340 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341"
    },
    {
        "number": 4204,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 4204,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[K-1]"
    },
    {
        "number": 4204,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.splitlines()\n    k = int(s[0][1:len(s[0])-1])\n    print(s[1][s[1].find('=')+1:len(s[1])-1])"
    },
    {
        "number": 4204,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N,K = map(int,stdin.split())\n    s = list(map(int,stdin.split()))\n    s.sort()\n    s = ''.join(str(i) for i in s)\n    answer = s[K-1]\n    return answer\n\n###python solution\nclass Solution:\n    def solution(self, nums: List[int], k: int) -> str:\n        \n        # dp = [0] * (len(nums) + 1)\n        # dp[0] = nums[0]\n        # for i in range(1, len(nums) + 1):\n        #     if i - 1 < k:\n        #         dp[i] = nums[i - 1]\n        #     elif i - 2 < k:\n        #         dp[i] = dp[i - 2] + nums[i - 2]\n        #     else:\n        #         dp[i] = max(dp[i - 1], dp[i - 2]) + nums[i - 1]\n        # return dp[-1]\n        \n        # i = 0\n        # count = 0\n        # for num in nums:\n        #     while i < len(nums) - 1 and nums[i] + count < k:\n        #         i += 1\n        #     count += num\n        # return nums[i]"
    },
    {
        "number": 4204,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s,k = map(int,stdin.split(' '))\n    for i in range(s*10,s*(10+1)*10,10):\n        print(i)\n    return str(i)\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4204,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    k = int(s[0])\n    m = int(s[1])\n    string = s[2]\n    for i in range(m):\n        string = string + s[i + 2]\n    for i in range(k):\n        string = string + s[-1 + i]\n    return string"
    },
    {
        "number": 4204,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    k=int(input())\n    n=int(input())\n    string=\"\".join(str(ord(c)-ord('0')) for c in input())\n    s,j=string[:5],string[5:]\n    if(int(s)*int(s)!=n):\n        print(s)\n    else:\n        print(int(s)*int(s))\n        j=int(j[:-1])\n        print(j)\n        print(int(s)*int(s)*k)\nsolution(stdin)\n"
    },
    {
        "number": 4204,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n  S, K = stdin.split(' ')\n  \n  def solve(S: str, K: int) -> str:\n    if K >= len(S):\n      return '0'\n    \n    if int(S[-1]) == 2:\n      return str(K) + S[-1]\n    \n    for i in range(K):\n      if S[-1] == '0' or i == int(S[-1]):\n        return solve(S[:-1], int(S[-1]) + 1)\n    \n    return solve(S[:-1], int(S[-1]) + K)\n    \n  return solve(S, int(K))\n\nConstraints:\n1 <= S.length <= 2 * 10^5\n1 <= K <= 10^6\n\"\"\"\nclass Solution:\n    def solution(self,stdin):\n        S, K = stdin.split(' ')\n        \n        return str(int(S[-1]) + int(K))\n"
    },
    {
        "number": 4204,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n  K = int(stdin.strip().replace(\",\", \"\").replace(\" \", \"\").replace(\"(\", \"\").replace(\")\", \"\"))\n  n, m = map(int, stdin.split(\",\"))\n  \n  for i in range(n, m + 1):\n    s = \"\"\n    s += str(i)\n    for j in range(1,K+1):\n      s += str(i*j)\n    print(s)"
    },
    {
        "number": 4205,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.splitlines()[0])\n    p_1 = [int(i) for i in stdin.splitlines()[1].split(',')]\n    p_2 = [int(i) for i in stdin.splitlines()[2].split(',')]\n    p_3 = [int(i) for i in stdin.splitlines()[3].split(',')]\n    p_4 = [int(i) for i in stdin.splitlines()[4].split(',')]\n    p_5 = [int(i) for i in stdin.splitlines()[5].split(',')]\n    p_6 = [int(i) for i in stdin.splitlines()[6].split(',')]\n    p_7 = [int(i) for i in stdin.splitlines()[7].split(',')]\n    p_8 = [int(i) for i in stdin.splitlines()[8].split(',')]\n    p_9 = [int(i) for i in stdin.splitlines()[9].split(',')]\n    p_10 = [int(i) for i in stdin.splitlines()[10].split(',')]\n    p_11 = [int(i) for i in stdin.splitlines()[11].split(',')]\n    p_12 = [int(i) for i in stdin.splitlines()[12].split(',')]\n    p_13 = [int(i) for i in stdin.splitlines()[13].split(',')]\n    p_14 = [int(i) for i in stdin.splitlines()[14].split(',')]\n    p_15 = [int(i) for i in stdin.splitlines()[15].split(',')]\n    p_16 = [int(i) for i in stdin.splitlines()[16].split(',')]\n    p_17 = [int(i) for i in stdin.splitlines()[17].split(',')]\n    p_18 = [int(i) for i in stdin.splitlines()[18].split(',')]\n    p_19 = [int(i) for i in stdin.splitlines()[19].split(',')]\n    p_20 = [int(i) for i in stdin.splitlines()[20].split(',')]\n    p_21 = [int(i) for i in stdin.splitlines()[21].split(',')]\n    p_22 = [int(i) for i in stdin.splitlines()[22].split(',')]\n    p_23 = [int(i) for i in stdin.splitlines()[23].split(',')]\n    p_24 = [int(i) for i in stdin.splitlines()[24].split(',')]\n    p_25 = [int(i) for i in stdin.splitlines()[25].split(',')]\n    p_26 = [int(i) for i in stdin.splitlines()[26].split(',')]\n    p_27 = [int(i) for i in stdin.splitlines()[27].split(',')]\n    p_28 = [int(i) for i in stdin.splitlines()[28].split(',')]\n    p_29 = [int(i) for i in stdin.splitlines()[29].split(',')]\n    p_30 = [int(i) for i in stdin.splitlines()[30].split(',')]\n    p_31 = [int(i) for i in stdin.splitlines()[31].split(',')]\n    p_32 = [int(i) for i in stdin.splitlines()[32].split(',')]\n    p_33 = [int(i) for i in stdin.splitlines()[33].split(',')]\n    p_34 = [int(i) for i in stdin.splitlines()[34].split(',')]\n    p_35 = [int(i) for i in stdin.splitlines()[35].split(',')]\n    p_36 = [int(i) for i in stdin.splitlines()[36].split(',')]\n    p_37 = [int(i) for i in stdin.splitlines()[37].split(',')]\n    p_38 = [int(i) for i in stdin.splitlines()[38].split(',')]\n    p_39 = [int(i) for i in stdin.splitlines()[39].split(',')]\n    p_40 = [int(i) for i in stdin.splitlines()[40].split(',')]\n    p_41 = [int(i) for i in stdin.splitlines()[41].split(',')]\n    p_42 = [int(i) for i in stdin.splitlines()[42].split(',')]\n    p_43 = [int(i) for i in stdin.splitlines()[43].split(',')]\n    p_44 = [int(i) for i in stdin.splitlines()[44].split(',')]\n    p_45 = [int(i) for i in stdin.splitlines()[45].split(',')]\n    p_46 = [int(i) for i in stdin.splitlines()[46].split(',')]\n    p_47 = [int(i) for i in stdin.splitlines()[47].split(',')]\n    p_48 = [int(i) for i in stdin.splitlines()[48].split(',')]\n    p_49 = [int(i) for i in stdin.splitlines()[49].split(',')]\n    p_50 = [int(i) for i in stdin.splitlines()[50].split(',')]\n    p_51 = [int(i) for i in stdin.splitlines()[51].split(',')]\n    p_52 = [int(i) for i in stdin.splitlines()[52].split(',')]\n    p_53 = [int(i) for i in stdin.splitlines()[53].split(',')]\n    p_54 = [int(i) for i in stdin.splitlines()[54].split(',')]\n    p_55 = [int(i) for i in stdin.splitlines()[55].split(',')]\n    p_56 = [int(i) for i in stdin.splitlines()[56].split(',')]\n    p_57 = [int(i) for i in stdin.splitlines()[57].split(',')]\n    p_58 = [int(i) for i in stdin.splitlines()[58].split(',')]\n    p_59 = [int(i) for i in stdin.splitlines()[59].split(',')]\n    p_60 = [int(i) for i in stdin.splitlines()[60].split(',')]\n    p_61 = [int(i) for i in stdin.splitlines()[61].split(',')]\n    p_62 = [int(i) for i in stdin.splitlines()[62].split(',')]\n    p_63 = [int(i) for i in stdin.splitlines()[63].split(',')"
    },
    {
        "number": 4205,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    p = list(map(int, stdin.strip().split()))\n    cnt = 0\n    for i in range(1, N+1):\n        for j in range(0, N-i+1):\n            if p[j] > p[j+1]:\n                p[j], p[j+1] = p[j+1], p[j]\n                cnt += 1\n    return 'YES' if cnt % 2 == 0 else 'NO'\n\nsolution('5 2 3 4 1')\n\nsolution('5 2 3 4 7 8 9 1 6 7')\n"
    },
    {
        "number": 4205,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n  N = int(stdin[0])\n  p = [int(i) for i in stdin[1:].split()]\n  result = \"\"\n  for i in range(1, N + 1):\n    result += str(p.pop(0)) + str(p.pop(0)) + str(p.pop(0))\n  return result\n\ndef"
    },
    {
        "number": 4205,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    p_1, p_2, p_3, p_4, p_5 = map(int, stdin.split())\n    p = [p_1, p_2, p_3, p_4, p_5]\n    p.sort()\n    for i in range(5, len(p)):\n        if p[i] == p[i-4]:\n            p[i-2], p[i-1] = p[i-1], p[i-2]\n            break\n    return 'YES' if p[-1] == p[0] and p[1] == p[2] else 'NO'\n\nExplanation\n\nGiven:\n5\n5 2 3 4 1\n\nAfter:\n1\n2\n3\n4\n5\n\nIn [1]: solution(input())\n\nOutput:\nYES\n\nIn [2]: solution(input())\n\nOutput:\nNO\n\nIn [3]: solution(input())\n\nOutput:\nNO\n\nIn [4]: solution(input())\n\nOutput:\nNO\n\nIn [5]: solution(input())\n\nOutput:\nYES\n\n\"\"\""
    },
    {
        "number": 4205,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = len(stdin)\n    p = sorted(list(map(int,stdin.split())))\n    answer = \"YES\" if len(set(p)) == len(p) else \"NO\"\n    return answer\n\"\"\""
    },
    {
        "number": 4205,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    p = list(map(int, stdin.split()))\n    p.sort()\n    N = len(p)\n    for i in range(N):\n        if i < N-1 and p[i] == p[i+1]:\n            p[i], p[i+1] = p[i+1], p[i]\n        elif i == 0:\n            p[i] = p[N-1]\n        else:\n            if p[i]!= p[i-1] and p[i]!= p[i+1]:\n                p[i] = p[i-1]\n            elif p[i]!= p[i-1] and p[i] == p[i+1]:\n                p[i] = p[i+1]\n            elif p[i]!= p[i-1] and p[i] == p[i+1]:\n                p[i] = p[i+1]\n    if p == sorted(p):\n        return \"YES\"\n    return \"NO\"\n\n-----Sample Input-----\n2\n1 2\n3\n2 3\n\n-----Sample Output-----\nNO"
    },
    {
        "number": 4205,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    p = list(map(int, stdin.split()))\n    p.sort()\n    for i in range(N):\n        if i < N-1 and p[i+1] < p[i]:\n            p[i], p[i+1] = p[i+1], p[i]\n        else:\n            break\n    return \"YES\" if p == sorted(p) else \"NO\"\n\n'''\ndef"
    },
    {
        "number": 4205,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    p = dict()\n    p_1 = set(map(int, stdin.split()))\n    p_N = len(p_1)\n    \n    def solve(i, j, p_set):\n        if i == j:\n            return True\n        if p_set & p_1:\n            return solve(i + 1, j, p_set | {p_1.pop()})\n        if p_set & p_2:\n            return solve(i + 1, j + 1, p_set | {p_1.pop()})\n        return False\n    \n    return \"NO\" if solve(0, 0, p_set) else \"YES\"\n\"\"\"\n\nclass Solution:\n    def canReorderDoubled(self, arr: List[int]) -> bool:\n        n = len(arr)\n        \n        if n < 2:\n            return False\n        \n        p = sorted(arr)\n        left, right = 0, n-1\n        \n        while left < right:\n            if p[left] + p[right] == 0:\n                left += 1\n                right -= 1\n            elif p[left] + p[right] < 0:\n                left += 1\n            else:\n                right -= 1\n                \n        return left >= n//2"
    },
    {
        "number": 4205,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, p = map(int, stdin.split())\n    p_length = len(p)\n    p_list = list(map(int, p.split()))\n    p_index = 0\n    for i in range(p_length):\n        while p_index < len(p_list):\n            if p_list[i] < p_list[p_index]:\n                p_index += 1\n                break\n            p_index += 1\n        if p_index == len(p_list):\n            p_index -= 1\n    return \"YES\" if sorted(p_list) == sorted(p.split()) else \"NO\"\n\ndef"
    },
    {
        "number": 4205,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    p = list(map(int, stdin.split()))\n    p.sort()\n    for i,j in zip(p,p[1:]):\n        p[i],p[j]=p[j],p[i]\n    return 'YES' if sorted(p)==p else 'NO'\n\n\"\"\"\ndef"
    },
    {
        "number": 4206,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    res = 0\n    for i in s:\n        if i == '0':\n            res += 1\n        else:\n            res += 3\n    return str(res)\n\n'''\n\nimport math\n\nn = int(input())"
    },
    {
        "number": 4206,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split(\"\\n\")\n    s = int(input[0])\n    num = int(input[1])\n\n    i = 2\n    while num > 0:\n        if num % i == 0:\n            num = num // i\n            i += 1\n        else:\n            i += 1\n    \n    if num == 0:\n        return \"0\"\n    \n    if num == 1:\n        return \"9\"\n\n    if num == 2:\n        return \"201\"\n    \n    if num == 3:\n        return \"81\"\n    \n    answer = \"\"\n    \n    while num > 0:\n        if num % i == 0:\n            answer += \"0\"\n            num = num // i\n        else:\n            answer += \"9\"\n            num = num // i\n    \n    if num == 0:\n        return answer\n    \n    while num > 0:\n        if num % i == 0:\n            answer += \"0\"\n            num = num // i\n        else:\n            answer += \"1\"\n            num = num // i\n    \n    return answer\n\nprint(solution(\"0\"))"
    },
    {
        "number": 4206,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    from itertools import count\n    n = int(stdin)\n    counter = count(1)\n    first_set = 0\n    for _ in range(n):\n        next(counter)\n    max_num = next(counter)\n    for i in range(n):\n        if i!= 0:\n            first_set += max_num\n        else:\n            first_set += next(counter)\n    second_set = 0\n    for i in range(n):\n        second_set += next(counter)\n    if max_num == 1:\n        print(first_set + second_set)\n    else:\n        if first_set == second_set:\n            print(first_set)\n        else:\n            print(first_set + second_set)\n    return 0\n\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4206,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.rstrip())\n    if n > 0:\n        left = 0\n        right = 1\n        while right < n:\n            if left == right:\n                left = 0\n            else:\n                left += 1\n                right += 1\n        right += 1\n        if left < n // 3:\n            left = n // 3\n        if right > n // 2:\n            right = n // 2\n        return f\"{right}|{left}|{n % 3}\"\n    else:\n        return \"0\"\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4206,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin))\n"
    },
    {
        "number": 4206,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    [a, b, c, d] = [int(i) for i in stdin.split()]\n    result = 0\n    for i in range(1, a+1):\n        if b % i == 0:\n            if c % i == 0:\n                if d % i == 0:\n                    result = max(result, i)\n    return str(result)\n"
    },
    {
        "number": 4206,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n        n=int(stdin)\n        \n        if n==0:\n            return \"0\"\n        \n        dp=[[0 for i in range(n+1)] for j in range(n+1)]\n        for i in range(n):\n            for j in range(i,n+1):\n                \n                if i==0:\n                    dp[i][j]=j\n                elif j==0:\n                    dp[i][j]=dp[i-1][0]\n                elif j==i:\n                    dp[i][j]=dp[i-1][j-1]\n                elif i>j:\n                    dp[i][j]=dp[i][j-1]\n                else:\n                    dp[i][j]=dp[i-1][j-1]\n                    \n        for i in range(n):\n            for j in range(n,i,-1):\n                if j==0:\n                    dp[i][j]=dp[j-1][0]\n                elif i==0:\n                    dp[i][j]=dp[j-1][i]\n                elif i==j:\n                    dp[i][j]=dp[i-1][j-1]\n                elif i>j:\n                    dp[i][j]=dp[i][j-1]\n                else:\n                    dp[i][j]=dp[i-1][j-1]\n        \n        return str(dp[n][n])\n"
    },
    {
        "number": 4206,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    \n    n = len(s)\n    \n    nums = list(map(int,s))\n    \n    print(len(set(nums)))\n    \n    return str(len(set(nums)))\n\nConstraints\n1 <= s.length <= 10^4\n\n[input] string s\n\nA string of digits that is a number that is divisible by $3$.\n\n\n[output] str\n\nPrint the maximum number of numbers that are divisible by $3$ that Polycarp can get.\n\n\n[input] string s\n\nAn input string of digits that is a number that is divisible by $3$.\n\n\n[output] int\n\nPrint the maximum number of numbers divisible by $3$ that Polycarp can get.\n\n\"\"\"\nclass Solution:\n    def cutNumber(self, s):\n        \n        n = len(s)\n        \n        nums = list(map(int,s))\n        #print(nums)\n        \n        if len(nums)==1 and nums[0]==0:\n            return 1\n        \n        min_num = min(nums)\n        \n        max_num = max(nums)\n        \n        if min_num > max_num:\n            return -1\n        \n        #print(min_num,max_num)\n        \n        nums = list(map(int,str(min_num)))\n        #print(nums)\n        \n        \n        # print(nums)\n        \n        \n        if max_num == 1:\n            return 1\n        \n        if min_num == max_num:\n            return 1\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n"
    },
    {
        "number": 4206,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    nums = stdin.split()\n    \n    cuts = {}\n    \n    for num in nums:\n        cuts[int(num)] = True\n        \n    for i in range(2, len(nums)+1):\n        for j in range(i, len(nums)):\n            if nums[j] in cuts and nums[i-j] in cuts and cuts[nums[i-j]]:\n                cuts[nums[i-j]] = False\n                \n    for key in cuts.keys():\n        if cuts[key] == False:\n            continue\n        \n        num = key\n        \n        while num in cuts and cuts[num]:\n            num = num * 3 + 1\n            \n        if num in cuts:\n            continue\n        \n        for i in range(2, len(nums)):\n            if nums[i] in cuts and cuts[num]:\n                cuts[nums[i]] = False\n                \n    for key in cuts.keys():\n        if cuts[key] == False:\n            continue\n        \n        num = key\n        \n        while num in cuts and cuts[num]:\n            num = num * 3 + 1\n            \n        if num in cuts:\n            continue\n        \n        for i in range(2, len(nums)):\n            if nums[i] in cuts and cuts[num]:\n                cuts[nums[i]] = False\n                \n    for key in cuts.keys():\n        if cuts[key] == False:\n            continue\n        \n        num = key\n        \n        while num in cuts and cuts[num]:\n            num = num * 3 + 1\n            \n        if num in cuts:\n            continue\n        \n        for i in range(2, len(nums)):\n            if nums[i] in cuts and cuts[num]:\n                cuts[nums[i]] = False\n                \n    for key in cuts.keys():\n        if cuts[key] == False:\n            continue\n        \n        num = key\n        \n        while num in cuts and cuts[num]:\n            num = num * 3 + 1\n            \n        if num in cuts:\n            continue\n        \n        for i in range(2, len(nums)):\n            if nums[i] in cuts and cuts[num]:\n                cuts[nums[i]] = False\n                \n    return ''.join([str(i) for i in sorted(cuts.keys())]).lstrip('0')\n\n\n\n--------------------------------------------------------------------------------------------------\n\ndef"
    },
    {
        "number": 4206,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    num = list(map(int, stdin.strip().split()))\n    cuts = 0\n    for i in range(1, len(num)):\n        for j in range(i):\n            if num[j] % num[i] == 0:\n                cuts += 1\n    return str(cuts)\n"
    },
    {
        "number": 4207,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    c = []\n    for i in range(1, a + 1):\n        for j in range(b, a * i, a):\n            c.append(j)\n    print(max(c))\n    return\n\n\n-----Constraints-----\n0 < a, b < 100\n1 <= n <= 2^20\n-10^9 < a_i, b_i \\le 10^9\n1 <= d < 10^9\n\n-----Time complexity-----\nO(n + (d^2))\n\nO(n)\n\n\n-----Space Complexity-----\nO(n)\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4207,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(n):\n        a = [int(x) for x in stdin.split()]\n        a.sort()\n        n = int(stdin)\n        a = [0] + a\n        c = []\n        c.append(0)\n        for j in range(1, len(a)):\n            c.append(c[j-1] + a[j])\n        if sum(c) < n:\n            return '0'\n        else:\n            return str(len(c) - n)\n\nprint(solution(\"5\"))\n\n\n\n'''\n"
    },
    {
        "number": 4207,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = map(int, stdin.split())\n    b = map(int, stdin.split())\n    result = 0\n    for a_i in a:\n        result += b_i * a_i\n    return str(result)\n\nprint(solution(\"3 2 3 4 5\"))\n\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4207,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    c = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    max_num = 0\n    for i in range(len(a)):\n        if a[i]!= b[i] or b[i] == 0:\n            break\n        if a[i] == 0 and b[i] == 0:\n            pass\n        else:\n            max_num = max(max_num, abs(a[i] - b[i]))\n    print(max_num)\n    return str(max_num)\n\nInput\n5\n1 2 3 4 5\n2 4 7 11 3\n\nOutput\n2\n\nInput\n3\n13 37 39\n1 2 3\n\nOutput\n3\n\n\n\n-----Notes-----\n\n1. The cases are sorted by lexicographical order of the input elements.\n\n2. The ranges of [a, b] are non-overlapping and non-negative integers.\n\n3. The ranges are separated by the space character (no comma).\n\n4. The input array contains only positive integers.\n\"\"\"\n\ndef"
    },
    {
        "number": 4207,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = map(int, stdin.split())\n    a = list(a)\n    \n    c = []\n    b = []\n    for i in a:\n        if i % 2 == 1:\n            b.append(i)\n        else:\n            c.append(i)\n    if c:\n        c = sorted(c)\n    \n    return '2' if len(c) == len(b) else '0'\n\n-----Constraints-----\n\n1 <= n <= 10^5\n-10^9 \\le a_i \\le 10^9\n-10^9 \\le b_i \\le 10^9\n\n\n-----Time complexity-----\n\nO(n) (the number of elements in both arrays)\n\nO(n) (the number of elements in both arrays)\n\nO(n)\n\nO(1) (the number of elements in one array)\n\n\n\n-----Space complexity-----\n\nO(1)\n\n\n-----Algorithm-----\n\ndef"
    },
    {
        "number": 4207,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    input = [tuple(map(int, l.split())) for l in stdin.splitlines()]\n    a = input[0]\n    b = input[1]\n\n    max_ = 0\n    for d in a:\n        max_ += d\n\n    for d in b:\n        if abs(d) > max_:\n            max_ = abs(d)\n\n    return str(max_)\n\n'''\ndef"
    },
    {
        "number": 4207,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin)\n    d = 0\n    \n    for i in range(1, n + 1):\n        if (d == 0):\n            d = int(stdin[i])\n            \n        elif (d < 0):\n            if (d == -1):\n                d = int(stdin[i])\n            else:\n                break\n            \n        else:\n            if (d == -1):\n                d = int(stdin[i])\n                \n            else:\n                break\n                \n    return str(d)\n    \n    \n"
    },
    {
        "number": 4207,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(i) for i in stdin.split()]\n    c = [int(i) for i in stdin.split()]\n    return max(c)"
    },
    {
        "number": 4207,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\n-----Constraints-----\n1 <= n <= 2^10\n1 <= a_i, b_i <= 10^9\n1 <= d <= 10^9\n\n------Time complexity-----\nO(n * d * (n + 1) // (n + 2))\n\nO(n * n)\n\n\"\"\"\n\nclass Solution:\n    def zeroes(self, n: int, a: List[int], b: List[int]) -> int:\n        count = 0\n        for i in range(n):\n            if a[i]!= b[i]:\n                count += 1\n        return count"
    },
    {
        "number": 4207,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, *a, b = list(map(int, stdin.split()))\n    def get_list():\n        for i in range(1, n+1):\n            yield a[i-1] + b[i-1]\n\n    for d in [-2, -1]:\n        try:\n            n = next(get_list())\n            return n\n        except StopIteration:\n            pass\n    return 0\n\n\nInput\n3\n1 2 3 4\n2 4 7 11 3\n\nOutput\n3\n\nInput\n3\n13 37 39\n1 2 3\n\nOutput\n0\n\n\n\n-----Hints-----\n\nHere is a hint. If you want to see all possible solutions, you can write your code in the box below.\nThe result can be found in the next solution.\n\"\"\""
    },
    {
        "number": 4208,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    n = int(stdin[0].strip())\n    l = []\n    r = []\n    for i in range(1, n+1):\n        l.append(stdin[i].strip().lower())\n    for i in range(1, n+1):\n        r.append(stdin[n+i].strip().lower())\n    return max(set(l), set(r))"
    },
    {
        "number": 4208,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    l = list(map(str, stdin.strip().split()))\n    r = list(map(str, stdin.strip().split()))\n    n = max(len(l), len(r))\n    res = [0 for i in range(n)]\n    j = 0\n    while True:\n        i = 0\n        while i < len(l):\n            if l[i] == r[i]:\n                i += 1\n                continue\n            i += 1\n        if i == len(l):\n            break\n        pairs = set(l[i] + r[i])\n        for el in pairs:\n            if el == '?':\n                pairs.remove(el)\n                pairs.remove(l[i])\n                pairs.remove(r[i])\n                pairs.remove(r[i])\n                pairs.remove(l[i])\n        if len(pairs) == n:\n            for el in pairs:\n                if l.count(el) == r.count(el):\n                    res[j] = el\n                    j += 1\n        i += 1\n    if res == [0 for i in range(n)]:\n        return \"0\"\n    return '\\n'.join(map(str, res))"
    },
    {
        "number": 4208,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    l = stdin[1]\n    r = stdin[2]\n    nums = []\n    nums.append(l.lower())\n    nums.append(r.lower())\n    nums = [ord(i) - ord('a') for i in nums]\n    nums = [x for x in nums if x >= 0]\n    nums = [x for x in nums if x < 26]\n    nums = set(nums)\n    nums = list(nums)\n    nums.sort()\n    n = len(nums)\n    k = 0\n    for i in range(0, n):\n        for j in range(i, n):\n            if nums[i] > nums[j]:\n                k += 1\n    return k\n"
    },
    {
        "number": 4208,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n < 4:\n        return '0'\n    \n    ans = []\n    for i in range(1, n + 1):\n        for j in range(n):\n            if j == 0 or i == j:\n                continue\n            ans.append(i)\n            ans.append(j)\n    \n    print(ans)\n    return str(len(set(ans)))\n\n\ndef"
    },
    {
        "number": 4208,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, l, r = map(int, stdin.split())\n    l_colors = ['?'] * n\n    r_colors = ['?'] * n\n    for i in range(n):\n        color = stdin[i]\n        index = l_colors.index(color)\n        l_colors[i] = r_colors[index]\n    for i in range(n):\n        color = stdin[i]\n        index = r_colors.index(color)\n        r_colors[i] = l_colors[index]\n    max_len = 0\n    for i in range(n):\n        for j in range(n):\n            if l_colors[i] == r_colors[j]:\n                if l_colors[i] == '?':\n                    max_len = max(max_len, j + 1)\n                else:\n                    max_len = max(max_len, j + 1, r_colors[j] + 1)\n    return str(max_len)\n"
    },
    {
        "number": 4208,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n    solution = 0\n    \n    for i in range(int(stdin[0])):\n        solution += int(stdin[1])\n    \n    solution += int(stdin[2])\n    \n    for i in range(3, len(stdin)):\n        solution += int(stdin[i]) - int(stdin[i-2])\n        \n    solution += int(stdin[len(stdin)-1])\n    \n    print(solution)\n    \n    return str(solution)\n    \n    \n    \n    \n"
    },
    {
        "number": 4208,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, l, r = map(int, stdin.split())\n    l_colors = set()\n    r_colors = set()\n    \n    for _ in range(n):\n        l_colors.add(stdin[0])\n        r_colors.add(stdin[-1])\n    \n    \n    return sorted(l_colors, key = lambda x: (x[0], -x[1])) + sorted(r_colors, key = lambda x: (x[0], -x[1]))\n"
    },
    {
        "number": 4208,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n\n    left_ranks = [0]\n    right_ranks = [0]\n\n    left_colors = []\n    right_colors = []\n\n    for i in range(1, n):\n        color = stdin[i].lower()\n        if color not in left_colors:\n            left_colors.append(color)\n        if color not in right_colors:\n            right_colors.append(color)\n\n        if color not in left_ranks:\n            left_ranks.append(i)\n        if color not in right_ranks:\n            right_ranks.append(i)\n\n    \n    sorted_left_ranks = sorted(left_ranks)\n    sorted_right_ranks = sorted(right_ranks)\n    sorted_left_colors = sorted(left_colors)\n    sorted_right_colors = sorted(right_colors)\n    sorted_left_ranks.reverse()\n    sorted_right_ranks.reverse()\n\n    diff = max(sorted_left_ranks) - min(sorted_right_ranks)\n    if diff == 0:\n        return '0'\n    k = diff / (n - 1)\n    for _ in range(diff % (n - 1)):\n        left_left = sorted_left_ranks.pop()\n        right_right = sorted_right_ranks.pop()\n        left_right = sorted_left_colors.pop()\n        right_left = sorted_right_colors.pop()\n        \n        sorted_left_ranks.append(left_left)\n        sorted_right_ranks.append(right_right)\n        sorted_left_colors.append(left_right)\n        sorted_right_colors.append(right_left)\n        k += 1\n\n    return str(k)\n"
    },
    {
        "number": 4208,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    l, r = stdin.split()\n    l = [x for x in l.split()]\n    r = [x for x in r.split()]\n    l = [x for x in l if x not in r]\n    r = [x for x in r if x not in l]\n    \n    return f'{len(set(l))} {len(set(r))}'"
    },
    {
        "number": 4208,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    l = []\n    r = []\n    for _ in range(n):\n        l.append(stdin.strip().split())\n        r.append(stdin.strip().split())\n    k = 1\n    # print(l)\n    # print(r)\n    # print(set(l))\n    # print(set(r))\n    # print(l)\n    # print(r)\n    for i in range(len(l)):\n        # print(l[i],r[i])\n        # print(set(l[i]))\n        # print(set(r[i]))\n        if len(set(l[i])) == len(set(r[i])) or len(set(l[i])) == 1:\n            k = max(k, len(l[i]))\n            # print(l[i],r[i],k)\n        # print(l[i])\n        # print(r[i])\n    # print(k)\n    # print(l[0],r[0],k)\n    # print(l[1],r[1],k)\n    if k > n:\n        return '?'\n    # print(l[0])\n    # print(r[0])\n    # print(k)\n    # print(l[1])\n    # print(r[1])\n    if k == n:\n        return '?'\n    for i in range(k):\n        if len(set(l[i])) == len(set(r[i])) or len(set(l[i])) == 1:\n            if l[i] not in r:\n                return l[i] + '?'\n            if r[i] not in l:\n                return r[i] + '?'\n        else:\n            if l[i] not in r:\n                return l[i] + '?'\n            if r[i] not in l:\n                return r[i] + '?'\n    # print(l[k])\n    # print(r[k])\n    return '?'\n\ndef"
    },
    {
        "number": 4209,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n,a = map(int,stdin.split())\n    if n > 1500:\n        return \"\"\n    a = list(map(int,stdin.split()))\n    start = 1\n    end = 1\n    for i in range(n-1):\n        end += a[i+1] - a[i]\n        start += a[i] + 1\n    return str(start - end)\n\n\n-----Examples-----\nInput\n4\n1 2 1 2\n\nOutput\n3\n4\n1 2\n\nInput\n3\n1 1 1\n\nOutput\n1\n2\n2 1 1\n4\n2 4\n\nInput\n2\n1 2 2\n\nOutput\n2\n1 2\n2 1\n3 2\n\n-----Notes-----\nIn this problem, we can see that there is only one block for every possible pair of starting indices,\nand thus, that's what the problem follows.\n\nIn the first line, n is the length of the sequence.\n\nIn the second line, each line contains elements a[1], a[2], \\dots, a[n].\n\nIn the third line, each line contains elements a[1], a[2], \\dots, a[n].\n\nIn the fourth line, each line contains elements a[1], a[2], \\dots, a[n].\n\nWe've already implemented the problem so far, so now that we can solve it, we can extend it to the next problem.\n\n-----Thinking-----\n\nThis problem can be solved in 2 steps:\n\n1. Set a = all the elements from 1 to $n$.  -1 and $n$ are valid.\n2. First we create the set of blocks; the size of the set is equal to the length of the sequence.\n3. We can use a set of blocks to form a possible block for each of the given starting indices.  The blocks are each represented by a list of indices, a[l_i], a[l_i+1], a[l_i+2]...a[l_i+n], a[r_i], a[r_i+1], a[r_i+2], a[r_i+3], a[r_i+4].  The list starts with the smallest possible index, and then comes down to the largest possible index.\n\nWe can finally add a set of pairs (l_i,r_i) to the set of blocks.  The blocks need to be labeled as it is a possible block.\n\nA block is a sequence of elements, i.e., the sum of the elements of the sequence $a[l_i], a[l_i+1], \\dots, a[r_i], a[r_i+1], \\dots, a[r_i+n]$.\n\nFor each pair $l_i, r_i$ we can either add it as the first or second element of the sequence $a[l_i], a[l_i+1], a[l_i+2], \\dots, a[r_i], a[r_i+1], a[r_i+2], a[r_i+3], a[r_i+4]$ in the list in the corresponding block, respectively.\n\nThe remaining elements of the sequence $a[l_i+1], a[l_i+2], \\dots, a[r_i+1], a[r_i+2], \\dots, a[r_i+n]$ are connected together.\n\nWe can add a set of pairs (l_i+1,r_i) to the set of blocks.\n\nThe blocks need to be labeled in the correct way.\n\nWe can also add a set of pairs (l_i+2,r_i) to the set of blocks.\n\nThe blocks need to be labeled in the correct way.\n\nFor example, in the sequence $a[1,2,3]$, all the elements are surrounded by the same elements.\n\nIn the sequence $a[1,2,4]$, all the elements are surrounded by the same elements.\n\nWe can add a set of pairs (l_i+3,r_i) to the set of blocks.\n\nThe blocks need to be labeled in the correct way.\n\nIn the sequence $a[1,2,5]$, all the elements are surrounded by the same elements.\n\nIn the sequence $a[1,2,3]$, all the elements are surrounded by the same elements.\n\nFinally, we can add a set of pairs (l_i+3,r_i+4) to the set of blocks.\n\nThe blocks need to be labeled in the correct way.\n\nSo, for example, in the sequence $a[1,2,4]$, all the elements are surrounded by the same elements.\n\nIn the sequence $a[1,2,5]$, all the elements are surrounded by the same elements.\n\nIn the sequence $a[1,2,3]$, all the elements are surrounded by the same elements.\n\nAs a result, we can find blocks $l_1, l_1+1, l_1+2, l_1+3,..., l_1+n$, which is the correct starting indices.\n\nFinally, we can add a set of pairs (l_i+4,r_i+4) to the set of blocks.\n\nThe blocks need to be labeled in the correct way.\n\nFor example, in the sequence $a[1,2,3]$, all the elements are surrounded by the same elements.\n\nIn the sequence $a[1,2,5]$, all the elements are"
    },
    {
        "number": 4209,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    ans = 0\n    for i in range(1, n+1):\n        for j in range(1, n):\n            if i < a[j-1]:\n                ans += 1\n    return str(ans)"
    },
    {
        "number": 4209,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin[0])\n    a = [int(x) for x in stdin[1].split()]\n    \n    \n    blocks = [{(x+1,y+1),y} for x in range(n) for y in range(n) if x!= y]\n    \n    \n    result = 0\n    \n    while blocks:\n        \n        l, r = blocks.pop()\n        \n        i, j = max(l, r), min(l, r)\n        \n        for k in range(1, i+1):\n            \n            if k in l or k in r: continue\n            \n            if a[j+k] - a[i] <= k:\n                result += 1\n                blocks.append({(i,j+k),(i,j+k+1)})\n    \n    return str(result)\n"
    },
    {
        "number": 4209,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e, f = map(int, stdin.split())\n    l, r = a, b\n    l += (r - l) // 2\n    l, r = l * 2, r * 2\n    d -= 1\n    while True:\n        if d < 1:\n            return \"\".join(list(map(str, range(l, l + 2))))\n        if (e - f) % 2:\n            e += 1\n        else:\n            e -= 1\n        if e <= c:\n            return \"\".join(list(map(str, range(l, l + 2))))\n        if e < 0:\n            return \"\".join(list(map(str, range(l, l + 2))))\n        if r < 1:\n            return \"\".join(list(map(str, range(l + 1, l + 1 + 2))))\n        if r < 0:\n            return \"\".join(list(map(str, range(l + 1, l + 1 + 2))))\n        r -= (r - l) // 2\n        l += (r - l) // 2\n        if e < c:\n            l += 1\n            e += 1\n            if e <= c:\n                return \"\".join(list(map(str, range(l, l + 2))))\n            if e < 0:\n                return \"\".join(list(map(str, range(l + 1, l + 1 + 2))))\n            if r < 0:\n                return \"\".join(list(map(str, range(l + 1, l + 1 + 2))))\n        e -= c\n        if e < 0:\n            return \"\".join(list(map(str, range(l + 1, l + 1 + 2))))\n        r -= (r - l) // 2\n    return \"\".join(list(map(str, range(l, l + 2))))\n\n\ndef"
    },
    {
        "number": 4209,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    l1 = 0\n    r1 = a\n    for i in range(1, b + 1):\n        l2 = r1 - i\n        if l2 >= 0:\n            l1 += 1\n        r1 = min(r1, l2)\n    l2 = 0\n    r2 = a\n    for i in range(1, b + 1):\n        l3 = r2 - i\n        if l3 >= 0:\n            l2 += 1\n        r2 = min(r2, l3)\n    l3 = 0\n    r3 = a\n    for i in range(1, b + 1):\n        l4 = r3 - i\n        if l4 >= 0:\n            l3 += 1\n        r3 = min(r3, l4)\n    return '{}{}{}'.format(l1, l2, r1)\n\nTest case 1:\n\nInput:\n7\n4 1 2 2 1 5 3\n\nOutput:\n3\n7 7\n2 3\n4 5\n1 1\n2 2\n3 3\n\nTest case 2:\n\nInput:\n11\n-5 -4 -3 -2 -1 0 1 2 3 4 5\n\nOutput:\n4\n4 4\n1 1\n2 2\n3 3\ndef"
    },
    {
        "number": 4209,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    l = 1\n    r = n - 1\n    while r - l > 1:\n        mid = l + (r - l) // 2\n        if a[mid] >= a[mid + 1] and a[mid] >= a[mid - 1]:\n            if mid + 1 < n:\n                r = mid\n            else:\n                l = mid + 1\n        elif a[mid] >= a[mid - 1] and a[mid] >= a[mid + 1]:\n            if mid - 1 < 0:\n                l = mid\n            else:\n                r = mid - 1\n        else:\n            l = mid + 1\n            r = mid\n    return str(l - 1) +'' + str(r - 1)\n"
    },
    {
        "number": 4209,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    # print(a)\n    if a[0] == a[1] + a[2] or a[0] + a[1] + a[2] + a[3] == a[4] + a[5] + a[6] + a[7] or a[0] + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] == a[9] + a[10] + a[11] + a[12]:\n        return 'YES'\n    else:\n        return 'NO'"
    },
    {
        "number": 4209,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = [int(i) for i in stdin.split()]\n    a.sort()\n    for i in range(1, n+1):\n        print(i)\n        for j in range(n-i):\n            print(j)\n            if a[j] + a[j+1] <= a[j+i]:\n                print(a[j], a[j+i])\n                print(a[j+i])\n                print(a[j+i])\n                print(a[j+i])\n                print(a[j+i])\n                print(a[j+i])\n                break\n    return \",\".join(map(str, a))\n\n\n-----Examples-----\nInput\n7\n4 1 2 2 1 5 3\n\nOutput\n3\n7 7\n2 3\n4 5\n\nInput\n11\n-5 -4 -3 -2 -1 0 1 2 3 4 5\n\nOutput\n2\n3 4\n1 1\n2 2\n3 3\n4 5\n1 1\n2 2\n3 3\n4 5\n1 1\n2 2\n3 3\n4 5\n1 1\n2 2\n3 3\n4 5\n1 1\n2 2\n3 3\n4 5\n1 1\n2 2\n3 3\n4 5\n1 1\n2 2\n3 3\n4 5\n1 1\n2 2\n3 3\n4 5\n1 1\n2 2\n3 3\n4 5\n1 1\n2 2\n3 3\n4 5\n1 1\n2 2\n3 3\n4 5\n1 1\n2 2\n3 3\n4 5\n1 1\n2 2\n3 3\n4 5\n1 1\n2 2\n3 3\n4 5\n1 1\n2 2\n3 3\n4 5\n1 1\n2 2\n3 3\n4 5\n1 1\n2 2\n3 3\n4 5\n1 1\n2 2\n3 3\n4 5\n1 1\n2 2\n3 3\n4 5\n1 1\n2 2\n3 3\n4 5\n1 1\n2 2\n3 3\n4 5\n1 1\n2 2\n3 3\n4 5\n1 1\n2 2\n3 3\n4 5\n1 1\n2 2\n3 3\n4 5\n1 1\n2 2\n3 3\n4 5\n1 1\n2 2\n3 3\n4 5\n1 1\n2 2\n3 3\n4 5\n1 1\n2 2\n3 3\n4 5\n1 1\n2 2\n3 3\n4 5\n1 1\n2 2\n3 3\n4 5\n1 1\n2 2\n3 3\n4 5\n1 1\n2 2\n3 3\n4 5\n1 1\n2 2\n3 3\n4 5\n1 1\n2 2\n3 3\n4 5\n1 1\n2 2\n3 3\n4 5\n1 1\n2 2\n3 3\n4 5\n1 1\n2 2\n3 3\n4 5\n1 1\n2 2\n3 3\n4 5\n1 1\n2 2\n3 3\n4 5\n1 1\n2 2\n3 3\n4 5\n1 1\n2 2\n3 3\n4 5\n1 1\n2 2\n3 3\n4 5\n1 1\n2 2\n3 3\n4 5\n1 1\n2 2\n3 3\n4 5\n1 1\n2 2\n3 3\n4 5\n1 1\n2 2\n3 3\n4 5\n1 1\n2 2\n3 3\n4 5\n1 1\n2 2\n3 3\n4 5\n1 1\n2 2\n3 3\n4 5\n1 1\n2 2\n3 3\n4 5\n1 1\n2 2\n3 3\n4 5\n1 1\n2 2\n3 3\n4 5\n1 1\n2 2\n3 3\n4 5\n1 1\n2 2\n3 3\n4 5\n1 1\n2 2\n3 3\n4 5\n1 1\n2 2\n3 3\n4 5\n1 1\n2 2\n3 3\n4 5\n1 1\n2 2\n3 3\n4 5\n1 1\n2 2\n3 3\n4 5\n1 1\n2 2\n3 3\n4 5\n1 1\n2 2\n3 3\n4 5\n1 1\n2 2\n3 3\n4 5\n1 1\n2 2\n3 3\n4 5\n1 1\n2 2\n3 3\n4 5\n1 1\n2 2\n3 3\n4 5\n1 1\n2 2\n3 3\n4 5\n1 1\n2 2\n3 3\n4 5\n1 1\n2 2\n3 3\n4 5\n1 1\n2 2\n3 3\n4 5\n1 1\n2 2\n3 3\n4 5\n1 1\n2 2\n3 3\n4 5\n1 1\n2 2\n3 3\n4 5\n1 1\n2 2\n3 3\n4 5\n1 1\n2 2\n3 3\n4 5\n1 1\n2 2\n3 3\n4 5\n1 1\n2 2\n3 3\n4 5\n1 1\n2 2\n3 3\n4 5\n1 1\n2 2\n3 3\n4 5\n1 1\n2 2\n3 3\n4 5\n1 1\n2 2\n3 3\n4 5\n1 1\n2 2\n3 3\n4 5\n1 1\n2 2\n3 3\n4 5\n1 1\n2 2\n3 3\n4 5\n1 1\n2 2\n3 3\n4 5\n1 1\n2 2\n3 3\n4 5\n1 1\n2 2\n3 3\n4 5\n1 1\n2 2\n3 3\n4 5"
    },
    {
        "number": 4209,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    a.sort()\n    answer = 0\n    for i in range(len(a)):\n        for j in range(i, len(a)):\n            answer += abs(a[j] - a[i])\n    return str(answer)\n"
    },
    {
        "number": 4209,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    #  (0,0),(0,1),(1,0),(1,1)\n    #  0,0\n    #  0,1\n    #  1,0\n    #  1,1\n    #  2,0\n    #  2,1\n    #  3,0\n    #  3,1\n    #  4,0\n    #  4,1\n    #  5,0\n    #  5,1\n    #  6,0\n    #  6,1\n    #  7,0\n    #  7,1\n    #  8,0\n    #  8,1\n    #  9,0\n    #  9,1\n    blocks = [0] * (n + 1)\n    blocks[1] = 1\n    blocks[a[0]] = 2\n    for i in range(1, n):\n        blocks[a[i]] = blocks[a[i - 1]] + 1\n    return \"\".join([str(i) for i in blocks[1:]])\n\n\n-----Constraints-----\n1 <= n <= 10^5\n-10^5 <= a_i <= 10^5\n1 <= l_i <= r_i < n\n\n\n-----Problems-----\n---Time---\n---Space---\n---Resources---\n---Constraints--\n---Input---\n---Output---\n---Constraints--\n---Input---\n---Output---\n---Constraints--\n---Input---\n---Output---\n---Constraints--\n---Input---\n---Output---\n---Constraints--\n---Input---\n---Output---\n---Constraints--\n---Input---\n---Output---\n---Constraints--\n---Input---\n---Output---\n---Constraints--\n---Input---\n---Output---\n---Constraints--\n---Input---\n---Output---\n---Constraints--\n---Input---\n---Output---\n---Constraints--\n---Input---\n---Output---\n---Constraints--\n---Input---\n---Output---\n---Constraints--\n---Input---\n---Output---\n---Constraints--\n---Input---\n---Output---\n---Constraints--\n---Input---\n---Output---\n---Constraints--\n---Input---\n---Output---\n---Constraints--\n---Input---\n---Output---\n---Constraints--\n---Input---\n---Output---\n---Constraints--\n---Input---\n---Output---\n---Constraints--\n---Input---\n---Output---\n---Constraints--\n---Input---\n---Output---\n---Constraints--\n---Input---\n---Output---\n---Constraints--\n---Input---\n---Output---\n---Constraints--\n---Input---\n---Output---\n---Constraints--\n---Input---\n---Output---\n---Constraints--\n---Input---\n---Output---\n---Constraints--\n---Input---\n---Output---\n---Constraints--\n---Input---\n---Output---\n---Constraints--\n---Input---\n---Output---\n---Constraints--\n---Input---\n---Output---\n---Constraints--\n---Input---\n---Output---\n---Constraints--\n---Input---\n---Output---\n---Constraints--\n---Input---\n---Output---\n---Constraints--\n---Input---\n---Output---\n---Constraints--\n---Input---\n---Output---\n---Constraints--\n---Input---\n---Output---\n---Constraints--\n---Input---\n---Output---\n---Constraints--\n---Input---\n---Output---\n---Constraints--\n---Input---\n---Output---\n---Constraints--\n---Input---\n---Output---\n---Constraints--\n---Input---\n---Output---\n---Constraints--\n---Input---\n---Output---\n---Constraints--\n---Input---\n---Output---\n---Constraints--\n---Input---\n---Output---\n---Constraints--\n---Input---\n---Output---\n---Constraints--\n---Input---\n---Output---\n---Constraints--\n---Input---\n---Output---\n---Constraints--\n---Input---\n---Output---\n---Constraints--\n---Input---\n---Output---\n---Constraints--\n---Input---\n---Output---\n---Constraints--\n---Input---\n---Output---\n---Constraints--\n---Input---\n---Output---\n---Constraints--\n---Input---\n---Output---\n---Constraints--\n---Input---\n---Output---\n---Constraints--\n---Input---\n---Output---\n---Constraints--\n---Input---\n---Output---\n---Constraints--\n---Input---\n---Output---\n---Constraints--\n---Input---\n---Output---\n---Constraints--\n---Input---\n---Output---\n---Constraints--\n---Input---\n---Output---\n---Constraints--\n---Input---\n---Output---\n---Constraints--\n---Input---\n---Output---\n---Constraints--\n---Input---\n---Output---\n---Constraints--\n---Input---\n---Output---\n---Constraints--\n---Input---\n---Output---\n---Constraints--\n---Input---\n---Output---\n---Constraints--\n---Input---\n---Output---\n---Constr"
    },
    {
        "number": 4210,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    count = 0\n    for i in range(n - 1):\n        j = a[i + 1]\n        if k * j == a[i] * k:\n            count += 1\n    return str(count)\n    \n"
    },
    {
        "number": 4210,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(x) for x in stdin.strip().split()]\n    k = a[0]\n    n = a[1]\n    answer = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if (a[i] + a[j] % k == 0):\n                answer += 1\n    return str(answer)\n\n-----Constraints-----\n0 <= k <= 100\n0 <= n <= 10^5\n\nSample Input\n\n3\n2 3\n\nSample Output\n\n1\n\n-----Constraints-----\n0 <= k <= 100\n0 <= n <= 10^5\n\n\"\"\"\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4210,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n\n    if n + k == 2:\n        return \"1\"\n    elif n + k == 3:\n        return \"2\"\n    elif n + k == 4:\n        return \"3\"\n    elif n + k == 5:\n        return \"4\"\n    elif n + k == 6:\n        return \"5\"\n    elif n + k == 7:\n        return \"6\"\n    elif n + k == 8:\n        return \"7\"\n    elif n + k == 9:\n        return \"8\"\n    elif n + k == 10:\n        return \"9\"\n    elif n + k == 11:\n        return \"10\"\n    elif n + k == 12:\n        return \"11\"\n    elif n + k == 13:\n        return \"12\"\n    elif n + k == 14:\n        return \"13\"\n    elif n + k == 15:\n        return \"14\"\n    elif n + k == 16:\n        return \"15\"\n    elif n + k == 17:\n        return \"16\"\n    elif n + k == 18:\n        return \"17\"\n    elif n + k == 19:\n        return \"18\"\n    elif n + k == 20:\n        return \"19\"\n    elif n + k == 21:\n        return \"20\"\n    elif n + k == 22:\n        return \"21\"\n    elif n + k == 23:\n        return \"22\"\n    elif n + k == 24:\n        return \"23\"\n    elif n + k == 25:\n        return \"24\"\n    elif n + k == 26:\n        return \"25\"\n    elif n + k == 27:\n        return \"26\"\n    elif n + k == 28:\n        return \"27\"\n    elif n + k == 29:\n        return \"28\"\n    elif n + k == 30:\n        return \"29\"\n    elif n + k == 31:\n        return \"30\"\n    elif n + k == 32:\n        return \"31\"\n    elif n + k == 33:\n        return \"32\"\n    elif n + k == 34:\n        return \"33\"\n    elif n + k == 35:\n        return \"34\"\n    elif n + k == 36:\n        return \"35\"\n    elif n + k == 37:\n        return \"36\"\n    elif n + k == 38:\n        return \"37\"\n    elif n + k == 39:\n        return \"38\"\n    elif n + k == 40:\n        return \"39\"\n    elif n + k == 41:\n        return \"40\"\n    elif n + k == 42:\n        return \"41\"\n    elif n + k == 43:\n        return \"42\"\n    elif n + k == 44:\n        return \"43\"\n    elif n + k == 45:\n        return \"44\"\n    elif n + k == 46:\n        return \"45\"\n    elif n + k == 47:\n        return \"46\"\n    elif n + k == 48:\n        return \"47\"\n    elif n + k == 49:\n        return \"48\"\n    elif n + k == 50:\n        return \"49\"\n    elif n + k == 51:\n        return \"50\"\n    elif n + k == 52:\n        return \"51\"\n    elif n + k == 53:\n        return \"52\"\n    elif n + k == 54:\n        return \"53\"\n    elif n + k == 55:\n        return \"54\"\n    elif n + k == 56:\n        return \"55\"\n    elif n + k == 57:\n        return \"56\"\n    elif n + k == 58:\n        return \"57\"\n    elif n + k == 59:\n        return \"58\"\n    elif n + k == 60:\n        return \"59\"\n    elif n + k == 61:\n        return \"60\"\n    elif n + k == 62:\n        return \"61\"\n    elif n + k == 63:\n        return \"62\"\n    elif n + k == 64:\n        return \"63\"\n    elif n + k == 65:\n        return \"64\"\n    elif n + k == 66:\n        return \"65\"\n    elif n + k == 67:\n        return \"66\"\n    elif n + k == 68:\n        return \"67\"\n    elif n + k == 69:\n        return \"68\"\n    elif n + k == 70:\n        return \"69\"\n    elif n + k == 71:\n        return \"70\"\n    elif n + k == 72:\n        return \"71\"\n    elif n + k == 73:\n        return \"72\"\n    elif n + k == 74:\n        return \"73\"\n    elif n + k == 75:\n        return \"74\"\n    elif n + k == 76:\n        return \"75\"\n    elif n + k == 77:\n        return \"76\"\n    elif n + k == 78:\n        return \"77\"\n    elif n + k == 79:\n        return \"78\"\n    elif n + k == 80:\n        return \"79\"\n    elif n + k == 81:\n        return \"80\"\n    elif n + k == 82:\n        return \"81\"\n    elif n + k == 83:\n        return \"82\"\n    elif n + k == 84:\n        return \"83\"\n    elif n + k == 85:\n        return \"84\"\n    elif n + k == 86:\n        return \"85\"\n    elif n + k == 87:\n        return \"86\"\n    elif n + k == 88:\n        return \"87\"\n    elif n + k == 89:\n        return \"88\"\n    elif n + k == 90:\n        return \"89\"\n    elif n + k == 91:\n        return \"90\"\n    elif n + k == 92:\n        return \"91\"\n    elif n + k == 93:\n        return \"92\"\n    elif n + k == 94:\n        return \"93\"\n    elif n + k == 95:\n        return \"94\"\n    elif n + k == 96:\n        return \"95\"\n    elif n + k == 97:\n        return \"96\"\n    elif n + k == 98:\n        return \"97\"\n"
    },
    {
        "number": 4210,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    ans = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] % k!= a[j] % k:\n                continue\n            if (a[i] - a[j]) % k == 0:\n                ans += 1\n    print(ans)\n    return str(ans)\n\"\"\"\n\ndef"
    },
    {
        "number": 4210,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split())\n    a = list(map(int, stdin.strip().split()))\n    a = sorted(a, reverse=True)\n    result = 0\n    for i in range(len(a) - 1):\n        j = i + 1\n        if j > len(a):\n            break\n        if k % a[j] == 0:\n            result += 1\n    return str(result)\n\n\n-------- Test Case --------\nTest case 1:\nInput:\n6 11\n45 1 10 12 11 7\n\nOutput:\n7\n\nExplanation:\nIn the first case pairs $(1, 2)$ and $(1, 3)$ are sufficient.\n\nIn the second case pairs $(1, 2)$, $(1, 3)$, $(2, 3)$, $(3, 1)$ and $(3, 4)$ are not sufficient.\n\nIn the third case, no pair is sufficient.\n\nIn the fourth case, a concatenation of numbers $a_1, a_2, \\dots, a_n$ is not divisible by $k$.\n\nIn the fifth case, a concatenation of numbers $a_1, a_2, \\dots, a_n$ is divisible by $k$, and all numbers $a_i$ and $a_j$ are not divisible by $k$.\n\nIn the sixth case, a concatenation of numbers $a_1, a_2, \\dots, a_n$ is divisible by $k$, and all numbers $a_i$ and $a_j$ are divisible by $k$.\n\nIn the seventh case, a concatenation of numbers $a_1, a_2, \\dots, a_n$ is divisible by $k$, and all numbers $a_i$ and $a_j$ are divisible by $k$ and all other numbers $a_i$ and $a_j$ are divisible by $k$.\n\nIn the eighth case, a concatenation of numbers $a_1, a_2, \\dots, a_n$ is divisible by $k$, and all other numbers $a_i$ and $a_j$ are divisible by $k$ and all other numbers $a_i$ and $a_j$ are divisible by $k$ and all other numbers $a_i$ and $a_j$ are divisible by $k$ and all other numbers $a_i$ and $a_j$ are divisible by $k$.\n\nIn the ninth case, a concatenation of numbers $a_1, a_2, \\dots, a_n$ is divisible by $k$, and all other numbers $a_i$ and $a_j$ are divisible by $k$ and all other numbers $a_i$ and $a_j$ are divisible by $k$ and all other numbers $a_i$ and $a_j$ are divisible by $k$ and all other numbers $a_i$ and $a_j$ are divisible by $k$ and all other numbers $a_i$ and $a_j$ are divisible by $k$ and all other numbers $a_i$ and $a_j$ are divisible by $k$ and all other numbers $a_i$ and $a_j$ are divisible by $k$ and all other numbers $a_i$ and $a_j$ are divisible by $k$ and all other numbers $a_i$ and $a_j$ are divisible by $k$ and all other numbers $a_i$ and $a_j$ are divisible by $k$ and all other numbers $a_i$ and $a_j$ are divisible by $k$ and all other numbers $a_i$ and $a_j$ are divisible by $k$ and all other numbers $a_i$ and $a_j$ are divisible by $k$ and all other numbers $a_i$ and $a_j$ are divisible by $k$ and all other numbers $a_i$ and $a_j$ are divisible by $k$ and all other numbers $a_i$ and $a_j$ are divisible by $k$ and all other numbers $a_i$ and $a_j$ are divisible by $k$ and all other numbers $a_i$ and $a_j$ are divisible by $k$ and all other numbers $a_i$ and $a_j$ are divisible by $k$ and all other numbers $a_i$ and $a_j$ are divisible by $k$ and all other numbers $a_i$ and $a_j$ are divisible by $k$ and all other numbers $a_i$ and $a_j$ are divisible by $k$ and all other numbers $a_i$ and $a_j$ are divisible by $k$ and all other numbers $a_i$ and $a_j$ are divisible by $k$ and all other numbers $a_i$ and $a_j$ are divisible by $k$ and all other numbers $a_i$ and $a_j$ are divisible by $k$ and all other numbers $a_i$ and $a_j$ are divisible by $k$ and all other numbers $a_i$ and $a_j$ are divisible by $k$ and all other numbers $a_i$ and $a_j$ are divisible by $k$ and all other numbers $a_i$ and $a_j$ are divisible by $k$ and all other numbers $a_i$ and $a_j$ are divisible by $k$ and all other numbers $a_i$ and $a_j$ are divisible by $k$ and all other numbers $a_i$ and $a_j$ are divisible by $k$ and all other numbers $a_i$ and $a_j$ are divisible by $k$ and all other numbers $a_i$ and $a_j$ are divisible by $k$ and all other numbers $a_i$ and $a_j$ are divisible by $k$ and all other numbers $a_i$ and $a_j$ are divisible by $k$ and all other numbers $a_i$ and $a_j$ are divisible by $k$ and all other numbers $a_i$ and $a_j$ are divisible by $k$ and all other numbers $a_i$ and $a_j$ are divisible by $k$ and all other numbers $a_i$ and $a_j$ are divisible by $k$ and all other numbers $a_i$ and $a_j$ are divisible by $k$ and all other numbers $a_i$ and $a_j$ are divisible by $k$ and all other"
    },
    {
        "number": 4210,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\n---------------------------------------------------------------------------------------------------\nSample Input\n\n8\n\nSample Output\n\n9\n\nSample Explanation\n\nThere are $8$ pairs of positions $(i, j)$ where each $j \\le i$ and each of them $i \\le j$ are divisible by $10$.\n\nInput\n\n5\n\n5\n10 3 2\n3\n5\n10 12 4\n\nOutput\n\n0\n\nConstraints\n\n1 <= n <= 10^4\n\n\n\n\"\"\"\ndef"
    },
    {
        "number": 4210,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip().split()[0])\n    k = int(stdin.strip().split()[1])\n    num = 0\n    pairs = []\n    for a in range(n):\n        x = int(stdin.strip().split()[a+1])\n        y = int(stdin.strip().split()[a+2])\n        if x % y == 0:\n            pairs.append((x, y))\n            num += 1\n    pairs.sort()\n    ans = 0\n    for x, y in pairs:\n        if x == y:\n            continue\n        ans += (x - y) % k\n    print(ans)\n    return str(ans)\n\nprint(solution(\"4 5\"))\nprint(solution(\"2\"))\nprint(solution(\"8\"))\nprint(solution(\"6\"))\nprint(solution(\"4 2\"))\nprint(solution(\"3 7\"))\nprint(solution(\"4 3\"))\n"
    },
    {
        "number": 4210,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    answer = 0\n    a = [int(i) for i in stdin.split()]\n    n = len(a)\n    count = 0\n    for i in range(n - 1):\n        if a[i] % a[i + 1] == 0:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4210,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    ans = 0\n    def findPairs(i, j):\n        nonlocal ans\n        if j - i <= k:\n            if i % 2:\n                ans += 1\n            else:\n                ans += 1\n                findPairs(i + 1, j)\n        return\n    for i in range(n):\n        findPairs(i, i + 1)\n    return str(ans)\n\na= solution(\"4 2\")\nprint(a)\n\na= solution(\"5 2\")\nprint(a)\n"
    },
    {
        "number": 4210,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = []\n    for i in range(n):\n        a.append(list(map(int, stdin.split())))\n    for i in range(n):\n        for j in range(i, n):\n            c = a[i][j] % k\n            if c:\n                for k in range(i + 1, n):\n                    if a[k][j] % c:\n                        continue\n                a[i].append(a[i][j])\n                a[j].append(a[j][i])\n                a[j][i] = 0\n    a.sort()\n    return str(len(set(map(lambda x: x[0], a))))\n\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= k <= 10^9\n\n-----Time Limit Exceeded-------\nTime Limit: 1 second\n\n-----Example-----------------\n\nInput\n\n4 2\n2 78 4 10\n\nOutput\n\n7\n\nInput\n\n5 2\n3 7 19 3 3\n\nOutput\n\n12\n\nInput\n\n5 3\n2 7 19 3 3\n\nOutput\n\n12\n\n\nA.find()\n\n---------------\nA.find()\n\n---------------\n\nA.find()\n\n-------------------\n\nA.find()\n\n-------------------\n\nA.find()\n\n-------------------\n\nA.find()\n\n-------------------\n\nA.find()\n\n-------------------\n\nA.find()\n\n-------------------\n\nA.find()\n\n-------------------\n\nA.find()\n\n-------------------\n\nA.find()\n\n-------------------\n\nA.find()\n\n-------------------\n\nA.find()\n\n-------------------\n\nA.find()\n\n-------------------\n\nA.find()\n\n-------------------\n\nA.find()\n\n-------------------\n\nA.find()\n\n-------------------\n\nA.find()\n\n-------------------\n\nA.find()\n\n-------------------\n\nA.find()\n\n-------------------\n\nA.find()\n\n-------------------\n\nA.find()\n\n-------------------\n\nA.find()\n\n-------------------\n\nA.find()\n\n-------------------\n\nA.find()\n\n-------------------\n\nA.find()\n\n-------------------\n\nA.find()\n\n-------------------\n\nA.find()\n\n-------------------\n\nA.find()\n\n-------------------\n\nA.find()\n\n-------------------\n\nA.find()\n\n-------------------\n\nA.find()\n\n-------------------\n\nA.find()\n\n-------------------\n\nA.find()\n\n-------------------\n\nA.find()\n\n-------------------\n\nA.find()\n\n-------------------\n\nA.find()\n\n-------------------\n\nA.find()\n\n-------------------\n\nA.find()\n\n-------------------\n\nA.find()\n\n-------------------\n\nA.find()\n\n-------------------\n\nA.find()\n\n-------------------\n\nA.find()\n\n-------------------\n\nA.find()\n\n-------------------\n\nA.find()\n\n-------------------\n\nA.find()\n\n-------------------\n\nA.find()\n\n-------------------\n\nA.find()\n\n-------------------\n\nA.find()\n\n-------------------\n\nA.find()\n\n-------------------\n\nA.find()\n\n-------------------\n\nA.find()\n\n-------------------\n\nA.find()\n\n-------------------\n\nA.find()\n\n-------------------\n\nA.find()\n\n-------------------\n\nA.find()\n\n-------------------\n\nA.find()\n\n-------------------\n\nA.find()\n\n-------------------\n\nA.find()\n\n-------------------\n\nA.find()\n\n-------------------\n\nA.find()\n\n-------------------\n\nA.find()\n\n-------------------\n\nA.find()\n\n-------------------\n\nA.find()\n\n-------------------\n\nA.find()\n\n-------------------\n\nA.find()\n\n-------------------\n\nA.find()\n\n-------------------\n\nA.find()\n\n-------------------\n\nA.find()\n\n-------------------\n\nA.find()\n\n-------------------\n\nA.find()\n\n-------------------\n\nA.find()\n\n-------------------\n\nA.find()\n\n-------------------\n\nA.find()\n\n-------------------\n\nA.find()\n\n-------------------\n\nA.find()\n\n-------------------\n\nA.find()\n\n-------------------\n\nA.find()\n\n-------------------\n\nA.find()\n\n-------------------\n\nA.find()\n\n-------------------\n\nA.find()\n\n-------------------\n\nA.find()\n\n-------------------\n\nA.find()\n\n-------------------\n\nA.find()\n\n-------------------\n\nA.find()\n\n-------------------\n\nA.find()\n\n-------------------\n\nA.find()\n\n-------------------\n\nA.find()\n\n-------------------\n\nA.find()\n\n-------------------\n\nA.find()\n\n-------------------\n\nA.find()\n\n-------------------\n\nA.find()\n\n-------------------\n\nA.find()\n\n-------------------\n\nA.find()\n\n-------------------\n\nA.find()\n\n-------------------\n\nA.find()\n\n-------------------\n\nA.find()\n\n-------------------\n\nA.find()\n\n-------------------\n\nA.find()\n\n-------------------\n\nA.find()\n\n-------------------\n\nA.find()\n\n-------------------\n\nA.find()\n\n-------------------\n\nA.find()\n\n-------------------\n\nA.find()\n\n-------------------\n\nA.find()\n\n-------------------\n\nA.find()\n\n-------------------\n\nA.find()\n\n-------------------\n\nA.find()\n\n-------------------\n\nA.find()\n\n-------------------\n\nA.find()\n\n-------------------\n\nA.find()\n\n-------------------\n\nA.find()\n\n-------------------\n\nA.find()\n\n-------------------\n\nA.find()\n\n-------------------\n\nA.find()\n\n-------------------\n\nA.find()\n\n-------------------\n\nA.find()\n\n-------------------\n\nA.find()\n\n-------------------\n\nA.find()\n\n-------------------\n\nA.find()\n\n-------------------\n\nA.find()\n\n-------------------\n\nA.find()\n\n-------------------\n\nA.find()\n\n-------------------\n\nA.find()\n\n-------------------\n\nA.find()\n\n-------------------\n\nA.find()\n\n-------------------\n\nA.find()\n\n-------------------\n\nA.find()\n\n-------------------\n\nA.find()\n\n-------------------\n\nA."
    },
    {
        "number": 4211,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, N = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    B = list(map(int, stdin.split()))\n    B = [B[0]] + B[1:]\n    A = A + [0] * (N - 1)\n    A = A + [0] * (N - 2)\n\n    for i in range(1, N):\n        A[i] = max(A[i - 1], A[i])\n    return str(max(A))"
    },
    {
        "number": 4211,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str(max(map(lambda x: int(x), stdin.split(','))))\n"
    },
    {
        "number": 4211,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    A = list(map(int,stdin.split()))\n    B = sorted(A)\n    ans = 0\n    for i in range(n):\n        ans = max(ans, B[i])\n    return str(ans)\n\nInput:\n3\n2 5\n\nOutput:\n9\n\nExplanation:\n- A = ( 2, 2, 5 ) has the maximum possible sum of 5.\n- A = ( 2, 2, 3 ) has the maximum possible sum of 6.\n- A = ( 2, 2, 2 ) has the maximum possible sum of 1.\n- A = ( 1, 2, 5 ) has the maximum possible sum of 2.\n- A = ( 1, 1, 5 ) has the maximum possible sum of 1.\n- A = ( 1, 2, 2 ) has the maximum possible sum of 2.\n- A = ( 1, 2, 3 ) has the maximum possible sum of 3.\n- A = ( 1, 2, 2 ) has the maximum possible sum of 4.\n- A = ( 1, 2, 1 ) has the maximum possible sum of 1.\n- A = ( 2, 2, 2 ) has the maximum possible sum of 2.\n\nSample Input:\n2\n2\n\nOutput:\n2\n\nExplanation:\n- A = ( 2, 2 ) has the maximum possible sum of 2.\n- A = ( 2, 2 ) has the maximum possible sum of 2.\n- A = ( 1, 2 ) has the maximum possible sum of 1.\n- A = ( 2, 2 ) has the maximum possible sum of 1.\n- A = ( 2, 2 ) has the maximum possible sum of 2.\n\nSample Input:\n3\n4\n\nOutput:\n4\n\nExplanation:\n- A = ( 4, 4 ) has the maximum possible sum of 4.\n- A = ( 4, 4 ) has the maximum possible sum of 4.\n- A = ( 4, 2 ) has the maximum possible sum of 4.\n- A = ( 4, 2 ) has the maximum possible sum of 1.\n- A = ( 4, 1 ) has the maximum possible sum of 4.\n- A = ( 4, 1 ) has the maximum possible sum of 1.\n- A = ( 4, 1 ) has the maximum possible sum of 2.\n- A = ( 4, 2 ) has the maximum possible sum of 4.\n- A = ( 4, 2 ) has the maximum possible sum of 2.\n- A = ( 4, 1 ) has the maximum possible sum of 4.\n- A = ( 4, 1 ) has the maximum possible sum of 1.\n- A = ( 4, 1 ) has the maximum possible sum of 2.\n- A = ( 4, 2 ) has the maximum possible sum of 4.\n\nConstraints:\n- 2 \\leq n \\leq 10^5\n- 0 \\leq A[i] \\leq 10^5\n\nInput:\n3\n2\n\nOutput:\n4\n\nExplanation:\n- A = ( 2, 2 ) has the maximum possible sum of 2.\n- A = ( 2, 2 ) has the maximum possible sum of 2.\n- A = ( 2, 2 ) has the maximum possible sum of 4.\n- A = ( 2, 2 ) has the maximum possible sum of 1.\n- A = ( 2, 1 ) has the maximum possible sum of 2.\n- A = ( 2, 1 ) has the maximum possible sum of 4.\n- A = ( 2, 1 ) has the maximum possible sum of 1.\n- A = ( 2, 1 ) has the maximum possible sum of 2.\n- A = ( 2, 1 ) has the maximum possible sum of 1.\n- A = ( 1, 1 ) has the maximum possible sum of 2.\n- A = ( 1, 2 ) has the maximum possible sum of 1.\n- A = ( 2, 1 ) has the maximum possible sum of 2.\n- A = ( 2, 1 ) has the maximum possible sum of 4.\n- A = ( 2, 2 ) has the maximum possible sum of 4.\n- A = ( 2, 2 ) has the maximum possible sum of 1.\n- A = ( 2, 2 ) has the maximum possible sum of 2.\n- A = ( 2, 1 ) has the maximum possible sum of 2.\n- A = ( 2, 2 ) has the maximum possible sum of 1.\n- A = ( 2, 1 ) has the maximum possible sum of 2.\n- A = ( 2, 2 ) has the maximum possible sum of 4.\n- A = ( 2, 2 ) has the maximum possible sum of 2.\n- A = ( 1, 2 ) has the maximum possible sum of 1.\n- A = ( 1, 1 ) has the maximum possible sum of 2.\n- A = ( 1, 1 ) has the maximum possible sum of 2.\n- A = ( 1, 2 ) has the maximum possible sum of 4.\n- A = ( 1, 2 ) has the maximum possible sum of 4.\n- A = ( 1, 2 ) has the maximum possible sum of 1.\n- A = ( 2, 2 ) has the maximum possible sum of 4.\n- A = ( 2, 2 ) has the maximum possible sum of 1.\n- A = ( 2, 2 ) has the maximum possible sum of 2.\n- A = ( 2, 2 ) has the maximum possible sum of 1.\n- A = ( 1, 1 ) has the maximum possible sum of 1.\n- A = ( 1, 1 ) has the maximum possible sum of 2.\n- A = ( 1, 1 ) has the maximum possible sum of 2.\n- A = ( 1, 2 ) has the maximum possible sum of 4.\n- A = ( 2, 1 ) has the maximum possible sum of 1.\n- A = ( 2, 1 ) has the maximum possible sum of 2.\n- A = ( 2, 2 ) has the maximum possible sum of 1.\n- A = ( 2, 2 ) has the maximum possible sum of 2.\n- A = ( 1, 2 ) has the maximum possible sum of 2.\n- A = ( 2, 2 ) has the maximum possible sum of 4.\n- A = ( 2, 2 ) has the maximum possible sum of 1.\n- A = ( 1, 2 ) has the maximum possible sum of 2.\n- A = ( 1, 2 ) has the maximum possible sum of 1.\n- A = ( 2, 2 ) has the maximum possible sum of 2.\n- A = ( 2, 2 ) has the maximum possible sum of 2.\n- A = ( 2, 1 ) has the maximum possible sum of 2.\n- A = ( 2, 1 ) has the maximum possible sum of 2.\n- A = ( 2, 2 ) has the maximum possible sum of 2.\n- A = ( 2, 1 ) has the maximum possible sum of 1.\n- A = ( 1, 2 ) has the maximum possible sum of 2.\n- A = ( 1, 1 ) has the maximum possible sum of 2.\n- A = ( 1, 1 ) has the maximum possible sum of 1.\n- A = ( 2, 2 ) has the maximum possible sum of 2.\n- A = ( 2, 1 ) has the maximum possible sum of 2.\n- A = ( 2, 2 ) has the maximum possible sum of 1.\n- A = ( 2, 2 ) has the maximum possible sum of 2.\n- A = ( 2, 1 ) has the maximum possible sum of 1.\n- A = ( 1, 2 ) has the maximum possible sum of 2.\n- A = ( 1, 2 ) has the maximum possible sum of 1.\n- A = ( 2, 1 ) has the maximum possible sum of 2.\n- A = ( 2, 2 ) has the maximum possible sum of 2.\n- A = ( 2, 1 ) has the maximum possible sum of 1.\n- A = ( 2, 2 ) has the maximum possible sum of 2.\n- A = ( 2, 1 ) has the maximum possible sum of 2.\n- A = ( 2, 2 ) has the maximum possible sum of"
    },
    {
        "number": 4211,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\ndef"
    },
    {
        "number": 4211,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, *A = map(int, stdin)\n    \n    A.sort()\n    \n    A = map(lambda x : x * (x+1), A)\n    \n    A = sorted(A, reverse=True)\n    \n    result = 0\n    \n    for a in A:\n        result += a\n    \n    return str(result)\n\ndef"
    },
    {
        "number": 4211,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n  \n  \n    A = list(map(int,stdin.split()))\n    A.sort()\n    A.append(A[-1]**2)\n    sum = 0\n    for i in A[:-2]:\n        sum = sum + i\n    return str(sum)\n\nSolution:\n"
    },
    {
        "number": 4211,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    A = list(map(int, stdin.split()))\n    \n    def binary_search(l, r):\n        if r - l <= 1:\n            return l\n        mid = (l + r) // 2\n        if l == r:\n            return A[l]\n        elif A[mid] < A[mid + 1]:\n            return binary_search(l, mid)\n        elif A[mid] < A[mid - 1]:\n            return binary_search(mid + 1, r)\n        else:\n            return binary_search(mid + 1, r)\n\n    print(binary_search(0, n))"
    },
    {
        "number": 4211,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A = []\n    n = int(stdin.strip())\n    for i in range(n):\n        A.append(list(map(int,input().strip().split())))\n    B = [0]*n\n    for i in range(n):\n        B[i] = max(A[i])\n    answer = 0\n    for i in range(n):\n        answer = max(answer, B[i])\n    return str(answer)"
    },
    {
        "number": 4211,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, *A = map(int, stdin.split())\n    return sum(map(max, map(min, zip(A))))\n"
    },
    {
        "number": 4211,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n  n = int(stdin.split()[-1])\n  A = list(map(int, stdin.split()[:-1]))\n  A = [max(A)] + A\n  A.sort()\n  A = list(map(max, zip(*A)))\n  return str(sum(A))"
    },
    {
        "number": 4212,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = [int(i) for i in stdin.split(\" \")]\n    A = [int(i) for i in stdin.split(\" \")]\n    A.sort()\n\n    for _ in range(q):\n        a, b, c = [int(i) for i in stdin.split(\" \")]\n        A.append(a)\n        A.append(b)\n        A.append(c)\n\n    A.sort()\n    if A[-1] == A[-2]:\n        return str(A[-1])\n    else:\n        return str(A[-2])\n    pass\n"
    },
    {
        "number": 4212,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n  N, M, Q = map(int, stdin.split())\n  Q -= 1\n  A = [map(int, stdin.split()) for _ in range(N)]\n  dp = [[0 for _ in range(Q + 1)] for _ in range(M + 1)]\n  ans = float('-inf')\n\n  for i in range(M + 1):\n    for j in range(N):\n      a, b, c = A[j]\n      if j == 0:\n        dp[i][j] = max(a + b + c, ans)\n      else:\n        dp[i][j] = max(a + c + b, ans)\n        if dp[i][j] > ans:\n          ans = dp[i][j]\n\n  return str(ans)\n\nN, M, Q = map(int, input().split())\nA = [map(int, input().split()) for _ in range(N)]\nprint(solution(stdin=input()))"
    },
    {
        "number": 4212,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    Q = int(q / q / q * 10)\n    for _ in range(Q):\n        m = map(int, stdin.split())\n        a_1 = list(map(int, m[:q]))\n        b_1 = list(map(int, m[q:q*(q+1)//2]))\n        c_1 = list(map(int, m[q*(q+1)//2:]))\n        d_1 = 0\n        for i in range(q):\n            for j in range(i + 1, q):\n                d_1 += abs(a_1[i] - a_1[j])\n        if d_1 > 110:\n            return str(d_1)\n    return '110'"
    },
    {
        "number": 4212,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # read input string\n    n, m, q, q_ = map(int, stdin.split())\n    # create a 2D array\n    A = [[0 for i in range(m)] for j in range(n)]\n    for i in range(n):\n        A[i] = list(map(int, stdin.split()))\n    # run loop\n    for i in range(m):\n        for j in range(q):\n            A[i][j+1], A[i+1][j], A[i+2][j], A[i+3][j] = map(int, stdin.split())\n    # sort the array\n    A.sort(key=lambda x: (x[1], x[2], x[3], x[0]))\n    # create a count array\n    score = [0 for i in range(q)]\n    # create a result array\n    result = [0 for i in range(q)]\n    # initialize the count array\n    for i in range(q):\n        score[i] = A[i][1]\n    # compute the maximum score\n    for i in range(n):\n        # print the current result\n        # print(str(A[i][1]) + \" \" + str(A[i][2]) + \" \" + str(A[i][3]))\n        # compute the maximum score\n        if A[i][1] == 1:\n            result[0] = A[i][0]\n            continue\n        # if A[i][1] > A[i][2] and A[i][1] > A[i][3]:\n        #     result[i] = A[i][1] + score[i]\n        # else:\n        #     result[i] = A[i][2] + score[i]\n        # else:\n        #     result[i] = A[i][3] + score[i]\n        # if result[i] > A[i][0]:\n        #     result[i] = A[i][0]\n        # else:\n        #     result[i] = A[i][1] + score[i]\n        # score[i] = result[i]\n        # if result[i] > A[i][0]:\n        #     result[i] = A[i][0]\n        # else:\n        #     result[i] = A[i][2] + score[i]\n        # score[i] = result[i]\n        # if score[i] > A[i][0]:\n        #     score[i] = A[i][0]\n        # else:\n        #     score[i] = A[i][3] + score[i]\n        # result[i] = score[i]\n        # if result[i] > A[i][0]:\n        #     result[i] = A[i][0]\n        # else:\n        #     result[i] = A[i][1] + score[i]\n        # score[i] = result[i]\n        # print(str(A[i][0]) + \" \" + str(A[i][1]) + \" \" + str(A[i][2]) + \" \" + str(A[i][3]) + \" \" + str(A[i][4]))\n    # print(result)\n    return str(sum(score))\n\n--------------------------------------------------------------------------\n"
    },
    {
        "number": 4212,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin)!= Q:\n        return \"\"\n    N, M, Q, QQ = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    \n    def dfs(i, A_i):\n        if i == QQ:\n            return 0\n        A_i = [int(x) for x in A_i]\n        if i >= Q:\n            return INF\n        if A_i not in A:\n            A.append(A_i)\n            return INF\n        \n        return dfs(i + 1, A_i) + dfs(i + 1, A_i + [A_i[i]]) + dfs(i + 1, A_i + [A_i[i] + A[i]])\n    \n    A.sort()\n    return str(dfs(0, [0] * N))\n"
    },
    {
        "number": 4212,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin)!= M + 1:\n        return \"0\"\n    def check(i: int) -> int:\n        if 0 <= i <= N:\n            return 1\n        else:\n            return 0\n    N, M, Q = map(int, stdin[0].split())\n    a_Q, b_Q, c_Q, d_Q = [int(x) for x in stdin[1].split()]\n    a_Q -= 1\n    b_Q -= 1\n    c_Q -= 1\n    d_Q -= 1\n    for i in range(Q, M + 1):\n        a_i = i - a_Q\n        b_i = i - b_Q\n        c_i = i - c_Q\n        d_i = i - d_Q\n        cnt = check(a_i) + check(b_i) + check(c_i) + check(d_i)\n        if cnt == M:\n            return str(cnt)\n        elif cnt > M:\n            return \"0\"\n    return \"0\"\n\n'''\ndef"
    },
    {
        "number": 4212,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, M, Q = map(int, stdin.split())\n    A = [list(map(int, stdin.split())) for _ in range(N)]\n    A.sort(key=lambda x: x[0])\n    A.sort(key=lambda x: x[1])\n    B = [list(map(int, stdin.split())) for _ in range(Q)]\n    B.sort(key=lambda x: x[0])\n    B.sort(key=lambda x: x[1])\n    for i in range(Q):\n        if i == 0:\n            d_i = B[i][0] - A[i][0]\n        elif i == 1:\n            d_i = B[i][1] - A[i][1]\n        elif i == 2:\n            d_i = B[i][2] - A[i][2]\n        else:\n            d_i = B[i][3] - A[i][3]\n        A[i] = [A[i][0] + d_i, A[i][1] + d_i, A[i][2] + d_i]\n    return str(max(map(lambda x: x[0]*x[1], A)))\n"
    },
    {
        "number": 4212,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, M, Q = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    a_Q = [int(i) for i in input().split()]\n    b_Q = [int(i) for i in input().split()]\n    c_Q = [int(i) for i in input().split()]\n    d_Q = [int(i) for i in input().split()]\n    score = 0\n    \n    for a_i in a_Q:\n        for b_i in b_Q:\n            for c_i in c_Q:\n                for d_i in d_Q:\n                    score += d_i\n        score -= a_i\n    if score >= M:\n        score = M\n    if score < 0:\n        score = 0\n    print(score)\n\ndef"
    },
    {
        "number": 4212,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, M, Q, Q_int = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    A = sorted(A, key=lambda x: x % Q_int)\n    A = [x + N for x in A]\n    \n    ans = 0\n    for b in range(1, Q_int + 1):\n        i = 1\n        cnt = 0\n        while i <= Q_int and A[i - 1] - A[i] <= b:\n            i += 1\n            cnt += 1\n        if cnt > M:\n            continue\n        else:\n            ans += cnt\n    return str(ans)\n\"\"\"\nclass Solution:\n    def solution(self, A, N, M, Q):\n        if len(A) == 0 or len(A) == 1:\n            return 0\n        \n        score = 0\n        \n        A = sorted(A)\n        \n        for a in A:\n            score += (a + N - 1) * (a - 1)\n            \n        for i in range(N):\n            score += min(Q - 1, (M - 1) * (i + 1)) * a\n            \n        return score\n        \n"
    },
    {
        "number": 4212,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, M, Q = map(int, stdin.split())\n    A = [int(i) for i in stdin.split()]\n    # A = [int(i) for i in input().split()]\n    # A = [int(i) for i in input().split()]\n    # A = [int(i) for i in input().split()]\n    # A = [int(i) for i in input().split()]\n    # A = [int(i) for i in input().split()]\n    # A = [int(i) for i in input().split()]\n    # A = [int(i) for i in input().split()]\n    # A = [int(i) for i in input().split()]\n    # A = [int(i) for i in input().split()]\n    # A = [int(i) for i in input().split()]\n    # A = [int(i) for i in input().split()]\n    # A = [int(i) for i in input().split()]\n    # A = [int(i) for i in input().split()]\n    # A = [int(i) for i in input().split()]\n    # A = [int(i) for i in input().split()]\n    # A = [int(i) for i in input().split()]\n    # A = [int(i) for i in input().split()]\n    # A = [int(i) for i in input().split()]\n    # A = [int(i) for i in input().split()]\n    # A = [int(i) for i in input().split()]\n    # A = [int(i) for i in input().split()]\n    # A = [int(i) for i in input().split()]\n    # A = [int(i) for i in input().split()]\n    # A = [int(i) for i in input().split()]\n    # A = [int(i) for i in input().split()]\n    # A = [int(i) for i in input().split()]\n    # A = [int(i) for i in input().split()]\n    # A = [int(i) for i in input().split()]\n    # A = [int(i) for i in input().split()]\n    # A = [int(i) for i in input().split()]\n    # A = [int(i) for i in input().split()]\n    # A = [int(i) for i in input().split()]\n    # A = [int(i) for i in input().split()]\n    # A = [int(i) for i in input().split()]\n    # A = [int(i) for i in input().split()]\n    # A = [int(i) for i in input().split()]\n    # A = [int(i) for i in input().split()]\n    # A = [int(i) for i in input().split()]\n    # A = [int(i) for i in input().split()]\n    # A = [int(i) for i in input().split()]\n    # A = [int(i) for i in input().split()]\n    # A = [int(i) for i in input().split()]\n    # A = [int(i) for i in input().split()]\n    # A = [int(i) for i in input().split()]\n    # A = [int(i) for i in input().split()]\n    # A = [int(i) for i in input().split()]\n    # A = [int(i) for i in input().split()]\n    # A = [int(i) for i in input().split()]\n    # A = [int(i) for i in input().split()]\n    # A = [int(i) for i in input().split()]\n    # A = [int(i) for i in input().split()]\n    # A = [int(i) for i in input().split()]\n    # A = [int(i) for i in input().split()]\n    # A = [int(i) for i in input().split()]\n    # A = [int(i) for i in input().split()]\n    # A = [int(i) for i in input().split()]\n    # A = [int(i) for i in input().split()]\n    # A = [int(i) for i in input().split()]\n    # A = [int(i) for i in input().split()]\n    # A = [int(i) for i in input().split()]\n    # A = [int(i) for i in input().split()]\n    # A = [int(i) for i in input().split()]\n    # A = [int(i) for i in input().split()]\n    # A = [int(i) for i in input().split()]\n    # A = [int(i) for i in input().split()]\n    # A = [int(i) for i in input().split()]\n    # A = [int(i) for i in input().split()]\n    # A = [int(i) for i in input().split()]\n    # A = [int(i) for i in input().split()]\n    # A = [int(i) for i in input().split()]\n    # A = [int(i) for i in input().split()]\n    # A = [int(i) for i in input().split()]\n    # A = [int(i) for i in input().split()]\n    # A = [int(i) for i in input().split()]\n    # A = [int(i) for i in input().split()]\n    # A = [int(i) for i in input().split()]\n    # A = [int(i) for i in input().split()]\n    # A = [int(i) for i in input().split()]\n    # A = [int(i) for i in input().split()]\n    # A = [int(i) for i in input().split()]\n    # A = [int(i) for i in input().split()]\n    # A = [int(i) for i in input().split()]\n    # A = [int(i) for i in input().split()]\n    # A = [int(i) for i in input().split()]\n    # A = [int(i) for i in input().split()]\n    # A = [int(i) for i in input().split()]\n"
    },
    {
        "number": 4213,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    print(max(abs(a-n) for n in range(1, n+1)))\n    return \"\""
    },
    {
        "number": 4213,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    A = map(int, stdin.strip().split())\n    A_max = max(A)\n    A_min = min(A)\n    result = 0\n    for i in range(N):\n        A_diff = abs(A[i] - A_max)\n        result = max(result, A_diff)\n    return str(result)\n\ndef"
    },
    {
        "number": 4213,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n  \n  arr = []\n  for _ in range(int(stdin)):\n    n = int(stdin.split(\" \")[1])\n    arr.append(int(stdin.split(\" \")[0]))\n    \n  max = abs(arr[0] - arr[1])\n  for i in range(2, n):\n    max = max + abs(arr[i] - arr[i-1])\n  \n  return str(max)\n\"\"\"\n\ndef"
    },
    {
        "number": 4213,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A=list(map(int,input().split()))\n    start,end=0,0\n    for i in range(len(A)):\n        if A[i]>end:\n            end=A[i]\n        if A[i]<start:\n            start=A[i]\n    start,end=max(0,start),max(0,end)\n    for i in range(len(A)):\n        A[i]=abs(start-end)\n    return \"\".join(map(str,A))\n\n\n-------------------------------------\n"
    },
    {
        "number": 4213,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n,*A=[int(x) for x in stdin.split()]\n    for i in range(n):\n        A.sort()\n        if A[i]!=A[i+1]:\n            print(A[i]-A[i+1])\n            break\n    else:\n        print(0)"
    },
    {
        "number": 4213,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n  \n    n, a, b = map(int, stdin.split())\n    max_abs_diff = abs(a-b)\n    return str(max_abs_diff)\n\nprint(solution(\"4 4 6 3\"))\n"
    },
    {
        "number": 4213,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n  \n    num_of_numbers = int(stdin.strip())\n    numbers = list(map(int, stdin.strip().split()))\n    answer = 0\n    for i in range(num_of_numbers):\n        number_i = numbers[i]\n        max_diff = numbers[i+1]-number_i\n        if max_diff == 0:\n            answer = 0\n            break\n        answer = max(answer, abs(number_i-number_i))\n    return str(answer)\n  \nprint(solution(\"4 4 6 3\"))\n"
    },
    {
        "number": 4213,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    A = list(map(int, stdin.strip().split()))\n    A.sort()\n    A_len = len(A)\n    left = 0\n    right = A_len - 1\n    answer = 0\n    while left < right:\n        cur_max = A[left] - A[right]\n        if cur_max > answer:\n            answer = cur_max\n        if A[left] < A[right]:\n            left += 1\n        else:\n            right -= 1\n    return str(answer)\n\nprint(solution(input()))"
    },
    {
        "number": 4213,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    A = list(map(int,stdin.split()[1:]))\n    return str(max(abs(x-y) for x,y in zip(A[:-1],A[1:])))\n\ndef"
    },
    {
        "number": 4213,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    max_abs_diff = 0\n    for i in range(n):\n        temp_abs_diff = abs(a[i] - A[i])\n        max_abs_diff = max(max_abs_diff, temp_abs_diff)\n    return str(max_abs_diff)"
    },
    {
        "number": 4214,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    x_1, y_1 = map(int, stdin.split()[1::2])\n    x_N, y_N = map(int, stdin.split()[2::2])\n    x_1 = (x_1 - x_N)**2 + (y_1 - y_N)**2\n    x_N = (x_N - x_1)**2 + (y_N - y_1)**2\n    x_2 = (x_N - x_1)**2 + (y_N - y_1)**2\n    x_3 = (x_N - x_2)**2 + (y_N - y_2)**2\n    x_4 = (x_N - x_2)**2 + (y_N - y_3)**2\n    x_5 = (x_N - x_3)**2 + (y_N - y_4)**2\n    x_6 = (x_N - x_3)**2 + (y_N - y_5)**2\n    x_7 = (x_N - x_4)**2 + (y_N - y_6)**2\n    x_8 = (x_N - x_4)**2 + (y_N - y_7)**2\n    x_9 = (x_N - x_4)**2 + (y_N - y_8)**2\n    x_10 = (x_N - x_5)**2 + (y_N - y_9)**2\n    x_11 = (x_N - x_5)**2 + (y_N - y_10)**2\n    x_12 = (x_N - x_5)**2 + (y_N - y_11)**2\n    x_13 = (x_N - x_5)**2 + (y_N - y_12)**2\n    x_14 = (x_N - x_5)**2 + (y_N - y_13)**2\n    x_15 = (x_N - x_6)**2 + (y_N - y_14)**2\n    x_16 = (x_N - x_6)**2 + (y_N - y_15)**2\n    x_17 = (x_N - x_6)**2 + (y_N - y_16)**2\n    x_18 = (x_N - x_6)**2 + (y_N - y_17)**2\n    x_19 = (x_N - x_6)**2 + (y_N - y_18)**2\n    x_20 = (x_N - x_6)**2 + (y_N - y_19)**2\n    x_21 = (x_N - x_7)**2 + (y_N - y_20)**2\n    x_22 = (x_N - x_7)**2 + (y_N - y_21)**2\n    x_23 = (x_N - x_7)**2 + (y_N - y_22)**2\n    x_24 = (x_N - x_7)**2 + (y_N - y_23)**2\n    x_25 = (x_N - x_7)**2 + (y_N - y_24)**2\n    x_26 = (x_N - x_7)**2 + (y_N - y_25)**2\n    x_27 = (x_N - x_7)**2 + (y_N - y_26)**2\n    x_28 = (x_N - x_7)**2 + (y_N - y_27)**2\n    x_29 = (x_N - x_7)**2 + (y_N - y_28)**2\n    x_30 = (x_N - x_7)**2 + (y_N - y_29)**2\n    x_31 = (x_N - x_7)**2 + (y_N - y_30)**2\n    x_32 = (x_N - x_7)**2 + (y_N - y_31)**2\n    x_33 = (x_N - x_7)**2 + (y_N - y_32)**2\n    x_34 = (x_N - x_7)**2 + (y_N - y_33)**2\n    x_35 = (x_N - x_7)**2 + (y_N - y_34)**2\n    x_36 = (x_N - x_7)**2 + (y_N - y_35)**2\n    x_37 = (x_N - x_7)**2 + (y_N - y_36)**2\n    x_38 = (x_N - x_7)**2 + (y_N - y_37)**2\n    x_39 = (x_N - x_7)**2 + (y_N - y_38)**2\n    x_40 = (x_N - x_7)**2 + (y_N - y_39)**2\n    x_41 = (x_N - x_7)**2 + (y_N - y_40)**2\n    x_42 = (x_N - x_7)**2 + (y_N - y_41)**2\n    x_43 = (x_N - x_7)**2 + (y_N - y_42)**2\n    x_44 = (x_N - x_7)**2 + (y_N - y_43)**2\n    x_45 = (x_N - x_7)**2 + (y_N - y_44)**2\n    x_46 = (x_N - x_7)**2 + (y_N - y_45)**2\n    x_47 = (x_N - x_7)**2 + (y_N - y_46)**2\n"
    },
    {
        "number": 4214,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    x = list(map(int, stdin.split()))\n    x.sort()\n    x.pop(0)\n    y = list(map(int, stdin.split()))\n    y.sort()\n    y.pop(0)\n    dist = 0\n    ans = []\n    for i in range(0, N):\n        for j in range(0, N):\n            if i!= j:\n                dist += abs(x[i] - x[j]) + abs(y[i] - y[j])\n    dist //= 6\n    sum_dist = dist\n    for i in range(N - 1):\n        sum_dist += (1 + dist / (2 * (i + 1)))\n    ans.append(sum_dist)\n    for i in range(N - 2):\n        sum_dist += (1 + dist / (2 * i))\n    ans.append(sum_dist)\n    for i in range(N - 3):\n        sum_dist += (1 + dist / (2 * (i + 2)))\n    ans.append(sum_dist)\n    for i in range(N - 4):\n        sum_dist += (1 + dist / (2 * (i + 3)))\n    ans.append(sum_dist)\n    for i in range(N - 5):\n        sum_dist += (1 + dist / (2 * (i + 4)))\n    ans.append(sum_dist)\n    for i in range(N - 6):\n        sum_dist += (1 + dist / (2 * (i + 5)))\n    ans.append(sum_dist)\n    for i in range(N - 7):\n        sum_dist += (1 + dist / (2 * (i + 6)))\n    ans.append(sum_dist)\n    for i in range(N - 8):\n        sum_dist += (1 + dist / (2 * (i + 7)))\n    ans.append(sum_dist)\n    for i in range(N - 9):\n        sum_dist += (1 + dist / (2 * (i + 8)))\n    ans.append(sum_dist)\n    for i in range(N - 10):\n        sum_dist += (1 + dist / (2 * (i + 9)))\n    ans.append(sum_dist)\n    for i in range(N - 11):\n        sum_dist += (1 + dist / (2 * (i + 10)))\n    ans.append(sum_dist)\n    for i in range(N - 12):\n        sum_dist += (1 + dist / (2 * (i + 11)))\n    ans.append(sum_dist)\n    for i in range(N - 13):\n        sum_dist += (1 + dist / (2 * (i + 12)))\n    ans.append(sum_dist)\n    for i in range(N - 14):\n        sum_dist += (1 + dist / (2 * (i + 13)))\n    ans.append(sum_dist)\n    for i in range(N - 15):\n        sum_dist += (1 + dist / (2 * (i + 14)))\n    ans.append(sum_dist)\n    for i in range(N - 16):\n        sum_dist += (1 + dist / (2 * (i + 15)))\n    ans.append(sum_dist)\n    for i in range(N - 17):\n        sum_dist += (1 + dist / (2 * (i + 16)))\n    ans.append(sum_dist)\n    for i in range(N - 18):\n        sum_dist += (1 + dist / (2 * (i + 17)))\n    ans.append(sum_dist)\n    for i in range(N - 19):\n        sum_dist += (1 + dist / (2 * (i + 18)))\n    ans.append(sum_dist)\n    for i in range(N - 20):\n        sum_dist += (1 + dist / (2 * (i + 19)))\n    ans.append(sum_dist)\n    for i in range(N - 21):\n        sum_dist += (1 + dist / (2 * (i + 20)))\n    ans.append(sum_dist)\n    for i in range(N - 22):\n        sum_dist += (1 + dist / (2 * (i + 21)))\n    ans.append(sum_dist)\n    for i in range(N - 23):\n        sum_dist += (1 + dist / (2 * (i + 22)))\n    ans.append(sum_dist)\n    for i in range(N - 24):\n        sum_dist += (1 + dist / (2 * (i + 23)))\n    ans.append(sum_dist)\n    for i in range(N - 25):\n        sum_dist += (1 + dist / (2 * (i + 24)))\n    ans.append(sum_dist)\n    for i in range(N - 26):\n        sum_dist += (1 + dist / (2 * (i + 25)))\n    ans.append(sum_dist)\n    for i in range(N - 27):\n        sum_dist += (1 + dist / (2 * (i + 26)))\n    ans.append(sum_dist)\n    for i in range(N - 28):\n        sum_dist += (1 + dist / (2 * (i + 27)))\n    ans.append(sum_dist)\n    for i in range(N - 29):\n        sum_dist += (1 + dist / (2 * (i + 28)))\n    ans.append(sum_dist)\n    for i in range(N - 30):\n        sum_dist += (1 + dist / (2 * (i + 29)))\n    ans.append(sum_dist)\n    for i in range(N - 31):\n        sum_dist += (1 + dist / (2 * (i + 30)))\n    ans.append(sum_dist)\n    for i in range(N - 32):\n        sum_dist += (1 + dist / (2 * (i + 31)))\n    ans.append(sum_dist)\n    for i in range(N - 33):\n        sum_dist += (1 + dist / (2 * (i + 32)))"
    },
    {
        "number": 4214,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin[1])\n    x = list(map(int, stdin[2:].split()))\n    y = list(map(int, stdin[3:].split()))\n    z = list(map(int, stdin[4:].split()))\n    w = [0, 0, 0, 0, 0]\n    for i in range(N):\n        for j in range(N):\n            for k in range(N):\n                if i!= j and i!= k and j!= k:\n                    w[0] += abs(x[i] - x[j])\n                    w[1] += abs(y[i] - y[j])\n                    w[2] += abs(z[i] - z[j])\n                    w[3] += abs(z[k] - z[j])\n                    w[4] += abs(x[k] - x[i])\n    ans = [0] * (N + 1)\n    for i in range(N):\n        ans[i + 1] = w[i] / (2 ** (i + 1))\n    ans = ans[1:]\n    return \"%.10f\" % (sum(ans) / N)\n\"\"\"\n\ndef"
    },
    {
        "number": 4214,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    def go(paths, dist):\n        if len(paths) < 2:\n            return\n        p = paths[0]\n        if p == path[-1]:\n            return\n        paths[0] = path[0]\n        paths[1] = path[-1]\n        for i in range(2, len(paths)):\n            p2 = path[i]\n            paths[i] = p + p2\n            go(paths, dist)\n        paths[0] = p\n        paths[1] = p2\n        paths[-1] = path[0] + path[-1]\n        if paths[-1] == 0:\n            return\n        p1 = path[-1]\n        p2 = path[-2]\n        dist += abs(p1 - p2)\n    dist = 0\n    paths = []\n    for line in stdin:\n        x, y = line.split()\n        x = int(x)\n        y = int(y)\n        paths.append(y)\n        paths.append(x)\n        go(paths, dist)\n    dist = 0\n    print(dist / len(paths))\n    return\n\n\n-----Sample Output-----\n8\n0 0\n1 0\n0 1\n0 2\n0 3\n1 2\n2 3\n3 3\n4 3\n4 4\n5 4\n6 4\n7 4\n8 8\n8 9\n8 10\n8 11\n8 12\n8 13\n8 14\n8 15\n8 16\n8 17\n8 18\n8 19\n8 20\n8 21\n8 22\n8 23\n8 24\n8 25\n8 26\n8 27\n8 28\n8 29\n8 30\n8 31\n8 32\n8 33\n8 34\n8 35\n8 36\n8 37\n8 38\n8 39\n8 40\n8 41\n8 42\n8 43\n8 44\n8 45\n8 46\n8 47\n8 48\n8 49\n8 50\n8 51\n8 52\n8 53\n8 54\n8 55\n8 56\n8 57\n8 58\n8 59\n8 60\n8 61\n8 62\n8 63\n8 64\n8 65\n8 66\n8 67\n8 68\n8 69\n8 70\n8 71\n8 72\n8 73\n8 74\n8 75\n8 76\n8 77\n8 78\n8 79\n8 80\n8 81\n8 82\n8 83\n8 84\n8 85\n8 86\n8 87\n8 88\n8 89\n8 90\n8 91\n8 92\n8 93\n8 94\n8 95\n8 96\n8 97\n8 98\n8 99\n8 100\n8 101\n8 102\n8 103\n8 104\n8 105\n8 106\n8 107\n8 108\n8 109\n8 110\n8 111\n8 112\n8 113\n8 114\n8 115\n8 116\n8 117\n8 118\n8 119\n8 120\n8 121\n8 122\n8 123\n8 124\n8 125\n8 126\n8 127\n8 128\n8 129\n8 130\n8 131\n8 132\n8 133\n8 134\n8 135\n8 136\n8 137\n8 138\n8 139\n8 140\n8 141\n8 142\n8 143\n8 144\n8 145\n8 146\n8 147\n8 148\n8 149\n8 150\n8 151\n8 152\n8 153\n8 154\n8 155\n8 156\n8 157\n8 158\n8 159\n8 160\n8 161\n8 162\n8 163\n8 164\n8 165\n8 166\n8 167\n8 168\n8 169\n8 170\n8 171\n8 172\n8 173\n8 174\n8 175\n8 176\n8 177\n8 178\n8 179\n8 180\n8 181\n8 182\n8 183\n8 184\n8 185\n8 186\n8 187\n8 188\n8 189\n8 190\n8 191\n8 192\n8 193\n8 194\n8 195\n8 196\n8 197\n8 198\n8 199\n8 200\n8 201\n8 202\n8 203\n8 204\n8 205\n8 206\n8 207\n8 208\n8 209\n8 210\n8 211\n8 212\n8 213\n8 214\n8 215\n8 216\n8 217\n8 218\n8 219\n8 220\n8 221\n8 222\n8 223\n8 224\n8 225\n8 226\n8 227\n8 228\n8 229\n8 230\n8 231\n8 232\n8 233\n8 234\n8 235\n8 236\n8 237\n8 238\n8 239\n8 240\n8 241\n8 242\n8 243\n8 244\n8 245\n8 246\n8 247\n8 248\n8 249\n8 250\n8 251\n8 252\n8 253\n8 254\n8 255\n8 256\n8 257\n8 258\n8 259\n8 260\n8 261\n8 262\n8 263\n8 264\n8 265\n8 266\n8 267\n8 268\n8 269\n8 270\n8 271\n8 272\n8 273\n8 274\n8 275\n8 276\n8 277\n8 278\n8 279\n8 280\n8 281\n8 282\n8 283\n8 284\n8 285\n8 286\n8 287\n8 288\n8 289\n8 290\n8 291\n8 292\n8 293\n8 294\n8 295\n8 296\n8 297\n8 298\n8 299\n8 300\n8 301\n8 302\n8 303\n8 304\n8 305\n8 306\n8 307\n8 308\n8 309\n8 310\n8 311\n8 312\n8 313\n8 314\n8 315\n8 316\n8 317\n8 318\n8 319\n8 320\n8 321\n8 322\n8 323\n8 324\n8 325\n8 326\n8 327\n8 328\n8 329\n8 330\n8 331\n8 332\n8 333\n8 334\n8 335\n8 336\n8 337\n8 338\n8 339\n8 340\n8 341\n8 342\n8 343\n8 344\n8 345\n8 346\n8 347\n8 348\n8 349\n8 350\n8 351\n8 352\n8 353\n8 354\n8 355\n8 356\n8 357\n8 358\n8 359\n8 360\n8 361\n8 362\n8 363\n8 364\n8 365\n8 366\n8 367\n8 368\n8 369\n8 370\n8 371\n8 372\n8 373\n8 374\n8 375\n8 376\n8 377\n"
    },
    {
        "number": 4214,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, x_1, y_1, x_N, y_N = map(int, stdin.split())\n    dist = (x_1-x_N)**2+(y_1-y_N)**2\n    if dist<=N*N:\n        if dist%2==1:\n            dist+=N\n        return str(int(dist//2))\n    return \"0\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4214,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 0:\n        return ''\n    if n == 0:\n        return '0'\n    lst = []\n    for _ in range(n):\n        x, y = map(int, input().split())\n        lst.append((x, y))\n    lst.sort(key=lambda x: x[0])\n    delta = lambda x: ((x[0] - x[1]) ** 2 + (x[1] - x[0]) ** 2) ** 0.5\n    ans = 0\n    for i in range(len(lst) - 1):\n        if i + 1 < len(lst):\n            delta1 = delta(lst[i])\n            delta2 = delta(lst[i + 1])\n            delta3 = delta(lst[i + 2])\n            if delta1 > delta2 + delta3:\n                ans += 2 * (delta1 + delta2 + delta3) / 3\n            elif delta1 > delta2 + delta3:\n                ans += 2 * (delta2 + delta3) / 3\n            else:\n                ans += 2 * (delta2) / 3\n        else:\n            ans += 2 * (delta1) / 3\n    return str(ans)\n\n[print(solution(stdin)) for stdin in open(\"input.txt\")]"
    },
    {
        "number": 4214,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    x, y = map(int, stdin.split())\n    # print(N,x,y)\n    # print(x,y)\n    # for i in range(N):\n    #     print(x,y)\n    #     print(i)\n    # print(x,y)\n    # x = x % 10000\n    # y = y % 10000\n    # print(x,y)\n    x = x % 1000\n    y = y % 1000\n    print(x,y)\n    sum = 0\n    i = 1\n    while x!= 0 or y!= 0:\n        if i % 2:\n            sum += x\n            x = x % 1000\n            i += 1\n        else:\n            sum += y\n            y = y % 1000\n            i += 1\n        # print(sum,i,x,y)\n        if sum >= 10:\n            sum -= 10\n            sum = sum % 10000\n    print(sum)\n    return str(sum // (10000**2))[2:]\n\n-----Test-----\ntest_cases = [\n    ('3',),\n    ('3', '1'),\n    ('3', '1', '2'),\n    ('3', '1', '1', '2', '1'),\n    ('3', '1', '0', '1', '0', '2'),\n    ('3', '0', '1', '0', '1', '2', '0', '0', '0', '0', '0'),\n    ('3', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'),\n    ('2', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'),\n    ('2', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'),\n    ('2', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'),\n    ('2', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'),\n    ('2', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'),\n    ('2', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'),\n    ('2', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'),\n    ('3', '0', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0'),\n    ('3', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'),\n    ('3', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'),\n    ('3', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'),\n    ('3', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'),\n    ('3', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'),\n    ('3', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'),\n    ('3', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'),\n    ('3', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'),\n    ('3', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'),\n    ('3', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'),\n    ('2', '1', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0'),\n    ('3', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'),\n    ('3', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'),\n    ('2', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'),\n    ('2', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'),\n    ('2', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'),\n    ('2', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'),\n    ('2', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'),\n    ('"
    },
    {
        "number": 4214,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin[0])\n    x_1 = int(stdin[1])\n    y_1 = int(stdin[2])\n    x_N = int(stdin[3])\n    y_N = int(stdin[4])\n    X = abs(x_1-x_N) + abs(y_1-y_N)\n    Y = abs(x_N-x_1) + abs(y_N-y_1)\n    L = abs(X+Y)\n    t = L/(2*N)\n    if L>10**-6:\n        print(round(t, 6))\n    else:\n        print(round(t, 6)/6)"
    },
    {
        "number": 4214,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n  N, x_0, y_0 = map(int, stdin.split())\n  x_N, y_N = map(int, stdin.split())\n  paths = []\n  for i in range(N):\n    x_i = x_0 + x_N*i + y_0*i\n    y_i = y_0 + x_N*i + y_N*i\n    paths.append((x_i, y_i))\n  paths.sort()\n  return str(sum(map(lambda x: abs(x[0]-x[1]), zip(paths, paths[1:]))))\n"
    },
    {
        "number": 4214,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def build_paths(x, y):\n        return ((x-1, y), (x, y-1), (x, y+1))\n    \n    def calculate_distance(p):\n        return sum(map(abs, [p[0]-x, p[1]-y]))\n    \n    N = int(stdin)\n    x_list = list(map(int, stdin.split()))\n    y_list = list(map(int, stdin.split()))\n    dist = []\n    for i in range(N):\n        p = build_paths(x_list[i], y_list[i])\n        dist.append(calculate_distance(p))\n    return '%.6f' % (sum(dist)/len(dist))\n\"\"\"\n\ndef"
    },
    {
        "number": 4215,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    answer = str(max(a, b) - min(a, b))\n    return answer\n"
    },
    {
        "number": 4215,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    horizontal_length = abs(A - B)\n    return str(horizontal_length)\n\nExample 1:\n\nInput: A = 12, B = 4\nOutput: 4\nExplanation: The horizontal length of the window is 4 (vertical length of the curtains) and the total horizontal length of the uncovered part is 4.\nExample 2:\n\nInput: A = 2, B = 5\nOutput: 5\nExplanation: The horizontal length of the window is 5 (vertical length of the curtains) and the total horizontal length of the uncovered part is 5.\n\"\"\"\n\nclass Solution:\n    def calculate_total_horizontal_length(self, A, B):\n        return abs(A-B)\n"
    },
    {
        "number": 4215,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n  \n  A, B = map(int, stdin.split())\n  \n  def bfs(A, B, depth):\n    q = [(A, depth)]\n    \n    while q:\n      a, d = q.pop(0)\n      \n      for i in range(1, B + 1):\n        if not visited[i] and not a%i and d+1 <= i:\n          q.append((a + i, d+1))\n          visited[i] = True\n          \n    return d\n  \n  answer = str(bfs(A, B, 0))\n  \n  return answer\n\nTest.assertTrue(solution(\"7 3\") == \"3\", \"3 not found\")\nTest.assertTrue(solution(\"5 1\") == \"1\", \"1 not found\")\nTest.assertTrue(solution(\"11 10\") == \"10\", \"10 not found\")\nTest.assertTrue(solution(\"1 1\") == \"1\", \"1 not found\")\nTest.assertTrue(solution(\"1 2\") == \"1\", \"1 not found\")\nTest.assertTrue(solution(\"5 1\") == \"5\", \"5 not found\")\nTest.assertTrue(solution(\"1 1\") == \"1\", \"1 not found\")\nTest.assertTrue(solution(\"1 2\") == \"1\", \"1 not found\")\nTest.assertTrue(solution(\"1 1\") == \"1\", \"1 not found\")\nTest.assertTrue(solution(\"2 1\") == \"1\", \"1 not found\")\nTest.assertTrue(solution(\"3 2\") == \"3\", \"3 not found\")\nTest.assertTrue(solution(\"1 2\") == \"3\", \"3 not found\")\nTest.assertTrue(solution(\"1 4\") == \"4\", \"4 not found\")"
    },
    {
        "number": 4215,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n  n = int(stdin.strip())\n  A = list(map(int, stdin.strip().split()))\n  B = list(map(int, stdin.strip().split()))\n\n  for a in A:\n    for b in B:\n      if a <= b:\n        A.remove(a)\n      else:\n        B.remove(b)\n\n  if len(A) == 0:\n    return \"0\"\n  else:\n    return str(sum(A))"
    },
    {
        "number": 4215,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    for _ in range(int(stdin)):\n        a, b = map(int, input().split())\n        if a < b:\n            a, b = b, a\n        print(a+b)\n"
    },
    {
        "number": 4215,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    A -= 1\n    B -= 1\n    if A < 0 or A > 100 or B < 0 or B > 100:\n        print(0)\n        return\n    if A > B:\n        A -= 1\n        B -= 1\n    print(A)\n    return ''.join(str(A)) + str(B)\n\n\"\"\"\n1.  \uc810\ud654\uc2dd:  (A-B)(1-4)\n    1.3. \ucd5c\uc18c \uac1c\uc218\uc758 \ud06c\uae30\n    1.4. \ucd5c\uc18c \uac1c\uc218\ub9cc\ud07c \uc774\ub3d9\n    1.5. \ud06c\uae30\ubcf4\ub2e4 \uc791\uc740 \uc9c1\uc0ac\uac01\ud615\uc758 \uac1c\uc218\ub97c \ubaa8\ub450 \ub354\ud558\ub294 \uac83\uc744 \uc774\uc6a9\ud558\uc5ec \ubc30\uc5f4\uc758 \ud06c\uae30 \uc870\uc815\n    1.6. \ucd5c\ub300 \ud06c\uae30\uc758 \ud06c\uae30\uc758 \ud569\uc73c\ub85c \ub9cc\ub4e4\uc5b4\uc9c4 \ud06c\uae30\ub85c \ub098\ub204\uc5b4\uc9c4 \uc21c\uc5f4\uc758 \uae38\uc774\uc5d0 \ub300\ud574 \ubc30\uc5f4\uc758 \uae38\uc774 \ucd5c\uc18c \uac1c\uc218\ub97c \ub354\ud574\uc900\ub2e4.\n    1.7. \uc21c\uc11c\uc5d0 \ub530\ub77c \uacc4\uc18d \uc774\ub3d9\ud558\ub294 \uacbd\uc6b0\uc758 \uc218\ub97c \uc801\uc73c\uba74 \uc548\ub418\uace0, \uc21c\uc11c\ub294 \ubc30\uc5f4\uc758 \uae38\uc774\uc758 \uc808\ub313\uac12\uc774\ub2e4.\n    1.8. \ubaa8\ub4e0 \ud06c\uae30\uc758 \uac1c\uc218\ub97c \ub098\ub204\uc5b4 \uacb0\uad6d \uc548\uc5d0 \ucd94\uac00\ub418\ub294 \uacbd\uc6b0\uc758 \uc218\uac00 \uc801\uc73c\uba74 \uc548\ub41c\ub2e4.\n    1.9. \ud06c\uae30\uc758 \ucd5c\ub300 \uac1c\uc218\uc758 \uc774\uc804\uacfc \uc774\ud6c4\uc758 \uac1c\uc218\ub97c \ub098\ub204\uc5b4\uc11c \ubc30\uc5f4\uc758 \uae38\uc774\uc758 \ucd5c\uc19f\uac12\uc5d0 \ub354\ud574\uc900\ub2e4.\n\"\"\"\n\n\"\"\"\n2.  \uc810\ud654\uc2dd:\n    2.3. \ucd5c\uc18c \uac1c\uc218\uc758 \ud06c\uae30\n    2.4. \ucd5c\uc18c \uac1c\uc218\ub9cc\ud07c \uc774\ub3d9\n    2.5. \ud06c\uae30\ubcf4\ub2e4 \uc791\uc740 \uc9c1\uc0ac\uac01\ud615\uc758 \uac1c\uc218\ub97c \ubaa8\ub450 \ub354\ud558\ub294 \uac83\uc744 \uc774\uc6a9\ud558\uc5ec \ubc30\uc5f4\uc758 \ud06c\uae30 \uc870\uc815\n    2.6. \ucd5c\uc18c \uac1c\uc218\uc758 \ud06c\uae30\uc758 \ud569\uc73c\ub85c \ub9cc\ub4e4\uc5b4\uc9c4 \ud06c\uae30\ub85c \ub098\ub204\uc5b4\uc9c4 \uc21c\uc5f4\uc758 \uae38\uc774\uc5d0 \ub300\ud574 \ubc30\uc5f4\uc758 \uae38\uc774 \ucd5c\uc18c \uac1c\uc218\ub97c \ub354\ud574\uc900\ub2e4.\n    2.7. \uc21c\uc11c\uc5d0 \ub530\ub77c \uacc4\uc18d \uc774\ub3d9\ud558\ub294 \uacbd\uc6b0\uc758 \uc218\ub97c \uc801\uc73c\uba74 \uc548\ub418\uace0, \uc21c\uc11c\ub294 \ubc30\uc5f4\uc758 \uae38\uc774\uc758 \uc808\ub313\uac12\uc774\ub2e4.\n    2.8. \ubaa8\ub4e0 \ud06c\uae30\uc758 \uac1c\uc218\ub97c \ub098\ub204\uc5b4 \uacb0\uad6d \uc548\uc5d0 \ucd94\uac00\ub418\ub294 \uacbd\uc6b0\uc758 \uc218\uac00 \uc801\uc73c\uba74 \uc548\ub41c\ub2e4.\n\"\"\"\n\n\"\"\"\n3.  \uc810\ud654\uc2dd:\n    3.3. \ucd5c\uc18c \uac1c\uc218\uc758 \ud06c\uae30\n    3.4. \ucd5c\uc18c \uac1c\uc218\ub9cc\ud07c \uc774\ub3d9\n    3.5. \ud06c\uae30\ubcf4\ub2e4 \uc791\uc740 \uc9c1\uc0ac\uac01\ud615\uc758 \uac1c\uc218\ub97c \ubaa8\ub450 \ub354\ud558\ub294 \uac83\uc744 \uc774\uc6a9\ud558\uc5ec \ubc30\uc5f4\uc758 \ud06c\uae30 \uc870\uc815\n    3.6. \ucd5c\uc18c \uac1c\uc218\uc758 \ud06c\uae30\uc758 \ud569\uc73c\ub85c \ub9cc\ub4e4\uc5b4\uc9c4 \ud06c\uae30\ub85c \ub098\ub204\uc5b4\uc9c4 \uc21c\uc5f4\uc758 \uae38\uc774\uc5d0 \ub300\ud574 \ubc30\uc5f4\uc758 \uae38\uc774 \ucd5c\uc18c \uac1c\uc218\ub97c \ub354\ud574\uc900\ub2e4.\n    3.7. \uc21c\uc11c\uc5d0 \ub530\ub77c \uacc4\uc18d \uc774\ub3d9\ud558\ub294 \uacbd\uc6b0\uc758 \uc218\ub97c \uc801\uc73c\uba74 \uc548\ub418\uace0, \uc21c\uc11c\ub294 \ubc30\uc5f4\uc758 \uae38\uc774\uc758 \uc808\ub313\uac12\uc774\ub2e4.\n    3.8. \ubaa8\ub4e0 \ud06c\uae30\uc758 \uac1c\uc218\ub97c \ub098\ub204\uc5b4 \uacb0\uad6d \uc548\uc5d0 \ucd94\uac00\ub418\ub294 \uacbd\uc6b0\uc758 \uc218\uac00 \uc801\uc73c\uba74 \uc548\ub41c\ub2e4.\n\"\"\"\n\n\"\"\"\n4.  \uc810\ud654\uc2dd:\n    4.3. \ucd5c\uc18c \uac1c\uc218\uc758 "
    },
    {
        "number": 4215,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return str(A * B)\n\"\"\"\nimport sys\n\nsys.setrecursionlimit(3000)\n\nclass Solution:\n    def totalH(self, A, B):\n        self.res = 0\n        for i in range(A):\n            self.res += B**i\n        self.res %= 10**9 + 7\n        return self.res\n\ndef"
    },
    {
        "number": 4215,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A % 2!= B % 2:\n        return 'Invalid'\n    for i in range(1, int(A/2)):\n        if A % 2!= B % 2:\n            if i == 1:\n                return str(B)\n            else:\n                return str(A) + str(B)\n    return str(A) + str(B)\n"
    },
    {
        "number": 4215,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4215,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    from collections import deque\n    A, B = map(int, stdin.split())\n    Q = deque([(A, B)])\n    visited = set()\n    while Q:\n        x, y = Q.popleft()\n        for dx, dy in [(-1, 0), (1, 0), (0, 1), (0, -1)]:\n            nx, ny = x + dx, y + dy\n            if -1 <= nx < len(stdin) and -1 <= ny < len(stdin) and (nx, ny) not in visited:\n                if not stdin[nx][ny]:\n                    visited.add((nx, ny))\n                    Q.append((nx, ny))\n    return str(len(visited))\n"
    },
    {
        "number": 4216,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def solve(a, b):\n        return max(a, b)\n    def get_digit(n):\n        return int(str(n)[::-1])\n    def get_char(n):\n        return chr(n + ord('0'))\n    nums = [int(i) for i in str(stdin)]\n    num_one = sum([get_digit(i) for i in nums])\n    num_two = sum([get_digit(i) for i in nums])\n    return str(solve(num_one, num_two))\n"
    },
    {
        "number": 4216,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    def get_digit_numbers(n):\n        return [int(x) for x in str(n)]\n        \n    A, B = map(int, stdin.split())\n    if A * B == 0:\n        return '0'\n    \n    return max(get_digit_numbers(A), get_digit_numbers(B))\n"
    },
    {
        "number": 4216,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = len(str(n))\n    if a % 2!= 0:\n        return str(0)\n    else:\n        return str(a)\n"
    },
    {
        "number": 4216,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    if not (1 <= n <= 10**5 and 1 <= m <= 10**5):\n        return 'Invalid input'\n    f = [list(map(int, list(stdin.split()))) for _ in range(m)]\n    for i in range(m):\n        f[i][0] = f[i][0]//10**9\n        f[i][1] = f[i][1]//10**9\n    s = 0\n    for i in range(m):\n        a = 0\n        b = 0\n        for j in range(m):\n            a += f[j][0]\n            b += f[j][1]\n        s += (a - b)\n    return s\n\nfor _ in range(int(input())):\n    n, m = list(map(int, input().split()))\n    f = [list(map(int, list(input()))) for _ in range(m)]\n    s = 0\n    for i in range(m):\n        a = 0\n        b = 0\n        for j in range(m):\n            a += f[j][0]\n            b += f[j][1]\n        s += (a - b)\n    print(s//f[m-1][m-1])\n    "
    },
    {
        "number": 4216,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split()\n    A = int(lines[0])\n    B = int(lines[1])\n    \n    return str(F(A,B))\n\ndef"
    },
    {
        "number": 4216,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    a = n // q\n    b = n % q\n    if a < b:\n        a, b = b, a\n    \n    answer = 1 << (a-1) + b\n    \n    return str(answer)\n\"\"\"\n\ndef"
    },
    {
        "number": 4216,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    num_1, num_2 = map(int, stdin.split(' '))\n    A, B = max(num_1, num_2), min(num_1, num_2)\n    return str(A*B)"
    },
    {
        "number": 4216,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    num = list(map(int, stdin.split()))\n    num_len = len(num)\n    ans = [0, 0]\n    for a in num:\n        num_len -= 1\n        if num_len < a:\n            ans[0] = max(ans[0], num.count(a))\n            num_len = num_len - num.count(a)\n        else:\n            ans[1] = max(ans[1], num_len)\n            num_len = a\n    print(max(ans))\n    return str(max(ans))\n\n-----Time complexity-----\nTime complexity: O(N * 10^N)\n\nTime complexity: O(N * 10^N)\n\nTime complexity: O(N * 10^N)\n\n-----Space Complexity-----\nSpace Complexity: O(N)\n\"\"\"\n\nclass Solution:\n    def solve(self, A, B):\n        s = A * B\n        res = ''.join(str(s % 10))\n        return res\n"
    },
    {
        "number": 4216,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    \n    ans = 10 ** 9\n    \n    # F(A,B) ranges over all pairs of positive integers\n    for A in range(100, N + 1, 10):\n        for B in range(100, N + 1, 10):\n            if A % 10 == B % 10:\n                ans = min(ans, A * 10 + B)\n    return str(ans)\n"
    },
    {
        "number": 4216,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    answer = 0\n    \n    for i in range(int(stdin[0])*10, int(stdin[0])*10+10):\n        for j in range(int(stdin[1])*10, int(stdin[1])*10+10):\n            answer += max(int(stdin[0])**i, int(stdin[1])**j)\n    return str(answer)\n"
    },
    {
        "number": 4217,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def calc(N, A):\n        a = sorted(list(A), key=lambda x: x.count(x[0]))\n        b = [0] * (N + 1)\n        for v in a:\n            b[v[1]] = v[0]\n        \n        for i in range(2, N + 1):\n            for j in range(i - 1, -1, -1):\n                b[j + i] = max(b[j] + 1, b[j + 1])\n        return b[N]\n\n    def ans(N, A):\n        return calc(N, A)\n    \n    N, M = map(int, stdin.split())\n    A = [0] * (N + 1)\n    for _ in range(M):\n        A[int(stdin.split()[1]) - 1] = int(stdin.split()[2])\n    \n    return ans(N, A)"
    },
    {
        "number": 4217,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, K = [int(x) for x in stdin.split()]\n    A, K_I = [int(x) for x in stdin.split()[:K]]\n    A = sorted(set(A))\n    for i in range(K):\n        for j in range(i+1, K_I):\n            if A[i]!= A[j]:\n                break\n        else:\n            return str(len(A))\n    return \"0\"\n\ndef"
    },
    {
        "number": 4217,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, M, K = [int(i) for i in stdin.split()]\n    A = [list(map(int, stdin.split()[i].split())) for i in range(1, M+1)]\n    print(*sorted([sum(A[i]) for i in range(1, M+1)]))"
    },
    {
        "number": 4217,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    K = []\n    A = []\n    for _ in range(M):\n        K.append(list(map(int, stdin.split())))\n    for _ in range(N):\n        A.append(list(map(int, stdin.split())))\n    \n    def all_same(i, A):\n        for a in A[i]:\n            if a!= 0:\n                return False\n        return True\n        \n    def all_liked(i, A):\n        for j in range(i+1, N):\n            if all_same(j, A):\n                return True\n        return False\n        \n    def all_knocked(i, A):\n        for a in A[i]:\n            if a!= 0:\n                return False\n        return True\n        \n    def everyone_liked(i, A):\n        for j in range(i+1, N):\n            if all_liked(j, A):\n                return True\n        return False\n    \n    def everyone_knocked(i, A):\n        for a in A[i]:\n            if a!= 0:\n                return False\n        return True\n    \n    def no_liked(i, A):\n        for a in A[i]:\n            if a == 0:\n                return False\n        return True\n        \n    answer = 0\n    for i in range(N):\n        if everyone_liked(i, A):\n            answer += 1\n        if everyone_knocked(i, A):\n            answer += 1\n        if all_liked(i, A):\n            answer += 1\n        if all_knocked(i, A):\n            answer += 1\n    \n    return str(answer)"
    },
    {
        "number": 4217,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, K, A = [int(x) for x in stdin.split()]\n    return str(N * K) + \" \" * (N - K) + \"\".join([\"A_{:0>3}\".format(a) for a in A])\n"
    },
    {
        "number": 4217,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N,K,A=[int(i) for i in input().split()]\n    K_i=K-1\n    A_i=A[K_i]\n    \n    answer=[]\n    for i in range(N):\n        answer+=list(A_i)\n    answer=set(answer)\n    answer.remove(A_i)\n    \n    answer=list(answer)\n    answer.sort()\n    answer.append(A_i)\n    answer=list(map(str, answer))\n    answer=''.join(answer)\n    print(answer)\n    \n    return answer\n    "
    },
    {
        "number": 4217,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    K = int(input())\n    A = [0 for _ in range(K)]\n    for _ in range(M):\n        a1, a2, a3 = map(int, stdin.split())\n        A[a1 - 1] += 1\n        A[a2 - 1] += 1\n        A[a3 - 1] += 1\n    liked = 0\n    for i in range(K):\n        if A[i] > 0:\n            liked += 1\n    print(liked)\n    return str(liked)\n"
    },
    {
        "number": 4217,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    food = list(map(int, stdin.split()))\n    N, K = map(int, stdin.split())\n\n    max_sum = 0\n    for i in range(K):\n        for j in range(K):\n            for k in range(K):\n                sum = food[i] + food[j] + food[k]\n                if max_sum < sum:\n                    max_sum = sum\n\n    return str(max_sum)\n"
    },
    {
        "number": 4217,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    food_list = []\n    for _ in range(n):\n        a, b = map(int, input().split())\n        food_list.append((a, b))\n    \n    for i in range(1, m+1):\n        for j in range(1, m+1):\n            for k in range(1, m+1):\n                if i == 1:\n                    if k == 1:\n                        if j == 1:\n                            print(sum(food_list[j][k] for j in range(n)))\n                        else:\n                            print(sum(food_list[i][k-1] for i in range(n)))\n                    else:\n                        print(sum(food_list[i][j-1] for i in range(n)))\n                elif i == 2:\n                    if j == 1:\n                        print(sum(food_list[k][j] for j in range(n)))\n                    else:\n                        print(sum(food_list[i][k-1] for i in range(n)))\n                else:\n                    if k == 1:\n                        if j == 1:\n                            print(sum(food_list[i][j] for j in range(n)))\n                        else:\n                            print(sum(food_list[i][k-1] for i in range(n)))\n                    else:\n                        print(sum(food_list[i][j-1] for i in range(n)))\n"
    },
    {
        "number": 4217,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, M, K = map(int, stdin.split())\n    A = set(map(int, stdin.split()))\n    \n    for _ in range(K):\n        N = int(input())\n        A.add(N)\n    \n    count = 0\n    for x in A:\n        if x < M:\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 4218,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    print(abs(n-k))\n    return str(abs(n-k))\n\n\n---Solution---\n\n1.\ndef"
    },
    {
        "number": 4218,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    N = int(stdin[0])\n    a = int(stdin[1])\n    b = int(stdin[2])\n    print(str(int(a)%2==0))\n    return str(int(b)%2==0)\n\ndef"
    },
    {
        "number": 4218,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, a = map(int, stdin.split())\n    x = sorted([x for x in range(N) if x % 2 == 1])\n    cnt = 0\n    for xi in x:\n        if xi % 2 == a:\n            cnt += 1\n    return str(float(cnt / N))\n\n-----Sample Output-----\n4\n'''\n\ndef"
    },
    {
        "number": 4218,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n  \n  N = int(stdin.strip())\n  \n  a = 0\n  b = 1\n  \n  for i in range(2,N+1):\n    if a%2==0 and b%2==0:\n      a += 3\n      b += 2\n    elif a%2==1 and b%2==1:\n      a += 1\n      b += 1\n    elif a%2==0 and b%2!=0:\n      a += 1\n      b += 2\n    elif a%2!=0 and b%2==0:\n      a += 1\n      b += 1\n      \n  if a%2!=0:\n    a += 2\n    \n  return str(a//b)"
    },
    {
        "number": 4218,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    answer = 0\n    for i in range(N):\n        if i % 2 == 0:\n            answer += 1\n    print(answer)\n    return str(round(answer/N, 7))"
    },
    {
        "number": 4218,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    a.sort()\n    if sum(a) % 2!= 0:\n        return '1'\n    else:\n        return '2'\n\n\uc218\uc815\uc0ac\ud56d\n1. \uc704\uc640 \ub3d9\uc77c\ud55c \uacbd\uc6b0\uc758 \uc218\ub97c \uad6c\ud558\uace0\uc790 \ud560 \uc218 \uc788\uc74c\n2. \ub450 \uc790\uc5f0\uc218\ub97c \ud569\uccd0\uc11c \uacf1\ud558\uc5ec \ubaab\uc744 \uad6c\ud55c\ub2e4.\n\n\uc218\uc815\uc0ac\ud56d\n1. \ub450 \uc790\uc5f0\uc218\ub97c \ud569\uccd0\uc11c \uacf1\ud558\uc5ec \ubaab\uc744 \uad6c\ud55c\ub2e4.\n2. \ud569\uc744 \uad6c\ud558\uace0\uc790 \ud560 \uc218 \uc788\ub294 \uacfc\uc815\uc744 \ubc18\ubcf5\ud55c\ub2e4.\n"
    },
    {
        "number": 4218,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    numbers = [int(x) for x in stdin.split()]\n    odds = [n / 4 for n in numbers]\n    return '{:.2%}'.format(odds.count(2) / odds.count(3))\n"
    },
    {
        "number": 4218,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    odd = 0\n    for i in range(1, N):\n        if i % 2 == 0:\n            odd += 1\n    print(odd / (K - odd))\n    return \"OK\"\n\nprint(solution(input()))"
    },
    {
        "number": 4218,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a, b = divmod(n, 2)\n    for i in range(1, b + 1):\n        print(i, a / i)\n    return '0.5'\n    \n"
    },
    {
        "number": 4218,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    assert N > 0, \"Number is not positive\"\n    odd = 0\n    for i in range(N):\n        if not odd % 2:\n            odd += 2\n        else:\n            odd -= 1\n    return str(odd)\nprint(solution(input()))"
    },
    {
        "number": 4219,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A = stdin.split()\n    A = list(map(int, A))\n    N = A[0]\n    for i in range(N):\n        A[i] -= 1\n    for i in range(N):\n        if A[i] == 0:\n            continue\n        else:\n            A[i] = 0\n    A.sort()\n    for i in range(N):\n        if A[i]!= 0:\n            A[i] = 1\n    max = 0\n    for i in range(N):\n        if A[i] == 1:\n            if max < A[i]:\n                max = A[i]\n    return str(max)\n\n'''\n\ndef"
    },
    {
        "number": 4219,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip().split()[0])\n    A = [list(map(int, input().split())) for i in range(N)]\n    num = 0\n    for i in range(N):\n        for j in range(N):\n            if i==j: continue\n            if A[i][j]==1 and A[j][i]==1:\n                if A[i][j] == 1 and A[j][i]==1:\n                    num += 1\n    return str(num)"
    },
    {
        "number": 4219,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, A_1, A_2, A_N = map(int, stdin.split())\n    people = [int(i) for i in stdin.split()]\n    people.sort()\n    max_people = 0\n    for i in range(N):\n        if A_1 == people[i] and A_2 == people[i]:\n            continue\n        elif A_1 == people[i] and A_2!= people[i]:\n            people[i] = 1\n            continue\n        elif A_1!= people[i] and A_2 == people[i]:\n            people[i] = 1\n            continue\n        elif A_1!= people[i] and A_2!= people[i]:\n            people[i] = 1\n            continue\n        elif A_1!= people[i] and A_2!= people[i]:\n            people[i] = 1\n            continue\n    for i in people:\n        if i == 1:\n            continue\n        if i == 0:\n            if i == 1:\n                max_people += 1\n            else:\n                max_people += 2\n    return str(max_people)\n'''"
    },
    {
        "number": 4219,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, A_1, A_2, A_N = [int(x) for x in stdin.split()]\n    x_11, x_12 = [int(y) for y in stdin.split()]\n    x_21, x_22 = [int(y) for y in stdin.split()]\n    x_NA_N = [int(y) for y in stdin.split()]\n\n    answer = 0\n    for j in range(N):\n        if A_1 == 1:\n            if A_2 == 1:\n                if A_N == 1:\n                    answer += 1\n                else:\n                    answer += 2\n            else:\n                answer += 2\n        elif A_2 == 1:\n            if A_N == 1:\n                answer += 1\n            else:\n                answer += 1\n        else:\n            answer += 1\n        if A_N == 0:\n            if A_1 == 1:\n                if x_11 == x_21:\n                    answer += 1\n                else:\n                    answer += 2\n            else:\n                answer += 2\n        elif A_N == 1:\n            if A_1 == 1:\n                if x_12 == x_21:\n                    answer += 1\n                else:\n                    answer += 2\n            else:\n                answer += 2\n        elif A_N == 2:\n            if A_1 == 1 and A_2 == 1:\n                answer += 2\n            else:\n                answer += 1\n        elif A_N == 3:\n            if A_1 == 1 and A_2 == 1 and A_2 == 1:\n                answer += 2\n            else:\n                answer += 1\n    return str(answer)"
    },
    {
        "number": 4219,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, A_1, A_2, A_3 = map(int, stdin.split())\n\n    if N % 2 == 0:\n        return str(N // 2)\n    else:\n        return str(N // 2 - 1)\n"
    },
    {
        "number": 4219,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    x = set(range(1, n + 1))\n    y = set(range(1, n + 1))\n    for _ in range(n - 1):\n        x, y = y, x & y\n    a, b = sorted(a), sorted(b)\n    for i in range(1, n):\n        x = x & set(a[i - 1]) & set(b[i - 1])\n        y = y & set(a[i]) & set(b[i])\n        if len(x) == 2:\n            a[i] = x\n            break\n    if len(y) == 2:\n        a[n - 1] = y\n        return str(len(a))\n    return str(0)\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4219,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, A = map(int, stdin.split())\n    def get_list():\n        res = []\n        while A:\n            yield A\n            A = A - 1\n        while A:\n            yield A + 1\n            A = A + 1\n        while A:\n            yield A - 1\n            A = A - 1\n        while A:\n            A -= 1\n            yield A\n            A = A + 1\n        while A:\n            A += 1\n            yield A\n        while A:\n            A -= 1\n            yield A\n        while A:\n            A += 1\n            yield A\n        while A:\n            A -= 1\n            yield A\n        while A:\n            A -= 1\n            yield A\n        while A:\n            A -= 1\n            yield A\n        while A:\n            A -= 1\n            yield A\n    list_ = list(get_list())\n    A = N\n    if len(list_) > A:\n        A -= 1\n        if A >= len(list_):\n            return 0\n        for i in range(A):\n            list_.pop(i)\n    res = max(res, N - len(list_))\n    return str(res)\n\ndef"
    },
    {
        "number": 4219,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = [list(map(int, stdin.split())) for _ in range(n)]\n    a.sort()\n    count = 1\n    for i in range(n):\n        count += (a[i][0]!= a[i][1])\n    if count > 0:\n        return str(count)\n    else:\n        return \"1\"\n"
    },
    {
        "number": 4219,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    people = []\n    for _ in range(N):\n        people.append(tuple(map(int, stdin.split())))\n    \n    #  dict: key = i, value = num_honest_people\n    num_honest_people = dict()\n    for person in people:\n        if person[0] not in num_honest_people:\n            num_honest_people[person[0]] = 1\n        else:\n            num_honest_people[person[0]] += 1\n\n        if person[1] not in num_honest_people:\n            num_honest_people[person[1]] = 1\n        else:\n            num_honest_people[person[1]] += 1\n    \n    # dict: key = i, value = num_honest_people\n    num_unkind_people = dict()\n    for person in people:\n        if person[0] == person[1]:\n            continue\n        if person[0] not in num_unkind_people:\n            num_unkind_people[person[0]] = 1\n        else:\n            num_unkind_people[person[0]] += 1\n        \n        if person[1] not in num_unkind_people:\n            num_unkind_people[person[1]] = 1\n        else:\n            num_unkind_people[person[1]] += 1\n    \n    # dict: key = i, value = num_unkind_people\n    num_unkind_unness = dict()\n    for person in people:\n        if person[0] == person[1]:\n            continue\n        if person[0] not in num_unkind_unness:\n            num_unkind_unness[person[0]] = 1\n        else:\n            num_unkind_unness[person[0]] += 1\n        \n        if person[1] not in num_unkind_unness:\n            num_unkind_unness[person[1]] = 1\n        else:\n            num_unkind_unness[person[1]] += 1\n    \n    # dict: key = i, value = num_unkind_unness\n    num_unkind_unness = dict()\n    for person in people:\n        if person[0] == person[1]:\n            continue\n        if person[0] not in num_unkind_unness:\n            num_unkind_unness[person[0]] = 1\n        else:\n            num_unkind_unness[person[0]] += 1\n        \n        if person[1] not in num_unkind_unness:\n            num_unkind_unness[person[1]] = 1\n        else:\n            num_unkind_unness[person[1]] += 1\n    \n    # max_num_unkind_people: max_num_unkind_people = max(num_unkind_people.values())\n    # max_num_unkind_unness: max_num_unkind_unness = max(num_unkind_unness.values())\n    max_num_unkind_people = max(num_unkind_people.values())\n    max_num_unkind_unness = max(num_unkind_unness.values())\n    \n    # print(max_num_unkind_people, max_num_unkind_unness)\n    print(max_num_unkind_people*max_num_unkind_unness)\n    \n"
    },
    {
        "number": 4219,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    answer = 0\n    n = int(stdin)\n    \n    for _ in range(n):\n        x = [int(x) for x in stdin.split()]\n        # x = [int(x) for x in input().split()]\n        a, b = x[1], x[2]\n        if a == 0:\n            a = b\n        else:\n            b = a\n        \n        if b == 1:\n            a = a - 1\n            b = 0\n        else:\n            b = b - 1\n            a = a + 1\n        \n        if a == b:\n            answer += 1\n            \n    return str(answer)\n"
    },
    {
        "number": 4220,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n,k = map(int,stdin.split())\n    if n > k:\n        return \"nikoand...\"\n    else:\n        return stdin[:n-k]\n\nn,k = map(int,input().split())\nprint(solution(input()))\n"
    },
    {
        "number": 4220,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin.split()[0])\n    N = len(stdin.split())\n    if N > K:\n        print(stdin.split()[0])\n        return\n    print(\" \".join(stdin.split()[K:K+N-1]))\n    return\n\n---Questions:\n    1. Count string frequencies of different letters\n    2. Count longest n's\n    3. How to return the number of numbers that have a character repeated N times?\n\"\"\"\n\ndef"
    },
    {
        "number": 4220,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.strip()\n"
    },
    {
        "number": 4220,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n  \n  string = ''\n  while True:\n    string += stdin.pop(0)\n    if len(string) > 0 and string[0] =='':\n      string = string[1:]\n    \n    if len(string) >= K:\n      break\n  \n  return string\n\nK = 7\nS = 'nikoandsolstice'\nprint(solution(S))"
    },
    {
        "number": 4220,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin.strip().split(\" \")[0])\n    S = stdin.strip().split(\" \")[1]\n    if len(S) > K:\n        return S[:K] + \"...\"\n    else:\n        return S"
    },
    {
        "number": 4220,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return \"\".join(list(stdin)[:7])\n    \nInput Format\nThe first line contains a string, K.\nThe next line contains K lines each containing a string, S.\n\nConstraints\n1 <= K <= 106\n\nSample Output\nInput for sample:\n3\nsusthesti...\n\nOutput for sample:\nsusthesti\n\nExplanation\nThe S string is given as follows:\nsusthesti\n\nThe length of S is 7, which is exactly 3 characters.\nThe first character of the 7 characters are:...\n    We need to extract the first 3 characters.\n    We add the last three characters of the 7 characters to the end of the string.\n    We print the remaining string.\n    We print the string as our final result.\n'''\n\nclass Solution:\n    def extractKdigits(self, s: str, k: int) -> str:\n        \n        digits = []\n        \n        for i in range(len(s)):\n            if s[i].isnumeric():\n                digits.append(s[i])\n            elif len(digits) < k:\n                digits.append(s[i])\n        \n        return \"\".join(digits[:k])"
    },
    {
        "number": 4220,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def extract(i, j, k, s):\n        if i > k:\n            return ''\n        if j < k:\n            return ''\n        if i < j:\n            return ''\n        return s[i:j] + extract(i+1, j+1, k, s)\n    s = stdin\n    if len(s) < K:\n        return s\n    return extract(0, 0, K, s)\n"
    },
    {
        "number": 4220,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    strings = stdin.split(\" \")\n    if len(strings) > len(strings[-1]):\n        return strings[-1]\n    return ''.join(strings[:len(strings) - 1])\n"
    },
    {
        "number": 4220,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin.strip().upper()\n    if len(string) > K:\n        return string[:K].strip() + string[K:].strip()\n    else:\n        return string\n\n-----Sample Input-----\n3\nkmn\nmn\n\n-----Sample Output-----\nmn\nkmn\n"
    },
    {
        "number": 4220,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    string = stdin.split(\" \")\n    if k > len(string):\n        return \"\"\n    if len(string) < k:\n        string = string + [\"\"] * (k - len(string))\n    return \" \".join(string)\n\n\"\"\"\n\nclass Solution:\n    def extractFirstK(self, S: str, K: int) -> str:\n        prefix = S[:K]\n        prefix_len = len(prefix)\n        if prefix_len == 0:\n            return \"\"\n        suffix = \"\"\n        if prefix_len == K - 1:\n            suffix = S[prefix_len:]\n            return prefix + suffix\n        suffix_len = len(suffix)\n        if suffix_len == 0:\n            return \"\"\n        prefix_char = \"\"\n        if suffix_len > prefix_len:\n            prefix_char = S[K - prefix_len:K]\n            suffix_char = S[K - prefix_len + suffix_len:]\n            return prefix_char + suffix_char\n        else:\n            return S[K:K + suffix_len]\n        \n"
    },
    {
        "number": 4221,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    plural = []\n    s = stdin.split()\n    for word in s:\n        word = word.lower()\n        if word[-1] =='s':\n            plural.append(word[:-1])\n        else:\n            plural.append(word +'s')\n    return ''.join(plural)\n"
    },
    {
        "number": 4221,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split()\n    print(words)\n    for i in range(len(words)):\n        words[i] = words[i].title()\n    print(words)\n    return \" \".join(words)\n\nprint(solution(\"apple\"))\n"
    },
    {
        "number": 4221,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip().split()\n    \n    return f'{s[0][0:2]}' +'s' * len(s[1:]) + s[-1]\n    \n"
    },
    {
        "number": 4221,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.split(\" \")\n    for i in range(len(S)):\n        S[i] = S[i].split(\" \")[-1]\n        if S[i].endswith(\"s\"):\n            S[i] = S[i][:-2] + \"es\"\n        elif S[i].endswith(\"es\"):\n            S[i] = S[i][:-3] + \"s\"\n    return S[-1]\n"
    },
    {
        "number": 4221,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    noun, plural = map(str, stdin.split())\n    if len(noun) == 1:\n        return plural\n    return plural +'s' + solution(noun[1:-1])\n\ndef"
    },
    {
        "number": 4221,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = list(stdin)\n    s.sort(key=lambda x: x.lower())\n    return \"\".join(s)\n\ndef"
    },
    {
        "number": 4221,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n  return stdin\n    # Write your code here\n"
    },
    {
        "number": 4221,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def is_es(s):\n        if len(s) == 1: return False\n        return s[-1] in ['e','s'] or s[-1] in ['r','t']\n\n    def is_s(s):\n        if len(s) == 1: return False\n        return s[-1] in ['a','e','s'] or s[-1] in ['i','u']\n        \n    def get_index(s):\n        idx = -1\n        for i, c in enumerate(s):\n            if c =='s':\n                idx = i\n                break\n        return idx\n    \n    S = list(stdin.strip().lower())\n    \n    index = get_index(S[0])\n    if is_s(S[index]):\n        S[index] ='s'\n        index += 1\n        \n    while index < len(S):\n        if is_es(S[index]):\n            S[index] = 'es'\n            index += 1\n            \n        elif is_s(S[index]):\n            S[index] ='s'\n            index += 1\n        else:\n            index += 1\n    \n    return ''.join(S)\n\n=======\ndef"
    },
    {
        "number": 4221,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    list1 = stdin.split(' ')\n    S = list1[0].lower()\n    list2 = list(S)\n    list2.append('s')\n    for i in range(len(list2)):\n        if len(list2[i])!= 1:\n            list2[i] = 'es'\n    return''.join(list2)\n\ndef"
    },
    {
        "number": 4221,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    \n    for i in range(len(s)-1):\n        if s[i].endswith(s[i+1][-1]) or s[i].endswith(s[i+1][-1] +'s'):\n            s[i] = s[i][:len(s[i])-2] + s[i+1][-1] + s[i+1][-1]\n        else:\n            s[i] = s[i][:len(s[i])-1] + s[i+1][-1]\n    return \"\".join(s)\n\nprint(solution(\"apple\"))"
    },
    {
        "number": 4222,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    A, d_i = map(int, stdin.split())\n    A_i = list(range(1, A+1))\n    for _ in range(1, K):\n        for i in range(len(A_i) - 1, -1, -1):\n            if A_i[i] < A_i[i-1]:\n                A_i[i] = A_i[i-1]\n                A_i[i-1] = A_i[i]\n    return str(A_i[d_i])\n\n-----Sample Output-----\n1\n1\n3\n\n-----Success!-----\nOutput: \"Snuke 1 has Snack 1.\"\nInput: \"2 3\"\nOutput: \"Snuke 2 has no snacks.\"\nInput: \"1 2 3\"\nOutput: \"Snuke 3 has Snack 1 and 2.\nExplanation:\n1\n1\n2\n2\n1\n1\n3\n\"\"\"\nimport math\nfrom heapq import heappush, heappop, heappushpop\nfrom queue import PriorityQueue\nimport sys\ninput = sys.stdin.readline\n\ndef"
    },
    {
        "number": 4222,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    d_1, d_2 = map(int, stdin.split())\n    A = set(map(int, stdin.split()))\n    A.remove(1)\n    A = sorted(A)\n    return '{}'.format(sorted(map(lambda x: str(x) * x, A), reverse=True)[0])\n"
    },
    {
        "number": 4222,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    d_1, A_1 = map(int, stdin.split())\n    d_2, A_2 = map(int, stdin.split())\n    d_3, A_3 = map(int, stdin.split())\n    if (N + 1) * (K + 1) == N * (K + 1):\n        if d_1 == 1 and d_2 == 1 and d_3 == 1:\n            return '1'\n        if d_1 == 1 or d_2 == 1 or d_3 == 1:\n            return '1'\n        if d_1 == 1 or d_2 == 1:\n            return '1'\n        if d_1 == 1 or d_2 == 1:\n            return '1'\n        if d_1 == 1 or d_2 == 1:\n            return '1'\n        if d_1 == 1:\n            return '1'\n        if d_2 == 1:\n            return '1'\n        if d_3 == 1:\n            return '1'\n        return '1'\n    if (N + 1) * (K + 2) == N * (K + 2):\n        if d_1 == 1 and d_2 == 1 and d_3 == 1:\n            return '1'\n        if d_1 == 1 or d_2 == 1 or d_3 == 1:\n            return '1'\n        if d_1 == 1 or d_2 == 1:\n            return '1'\n        if d_1 == 1 or d_2 == 1:\n            return '1'\n        if d_1 == 1 or d_2 == 1:\n            return '1'\n        if d_1 == 1 or d_2 == 1:\n            return '1'\n        if d_1 == 1 or d_2 == 1:\n            return '1'\n        if d_1 == 1 or d_2 == 1:\n            return '1'\n        if d_1 == 1:\n            return '1'\n        if d_2 == 1:\n            return '1'\n        if d_3 == 1:\n            return '1'\n        return '1'\n    if (N + 1) * (K + 3) == N * (K + 3):\n        if d_1 == 1 and d_2 == 1 and d_3 == 1:\n            return '1'\n        if d_1 == 1 or d_2 == 1 or d_3 == 1:\n            return '1'\n        if d_1 == 1 or d_2 == 1:\n            return '1'\n        if d_1 == 1 or d_2 == 1:\n            return '1'\n        if d_1 == 1 or d_2 == 1:\n            return '1'\n        if d_1 == 1 or d_2 == 1:\n            return '1'\n        if d_1 == 1 or d_2 == 1:\n            return '1'\n        if d_1 == 1 or d_2 == 1:\n            return '1'\n        if d_1 == 1 or d_2 == 1:\n            return '1'\n        if d_1 == 1 or d_2 == 1:\n            return '1'\n        if d_1 == 1:\n            return '1'\n        if d_2 == 1:\n            return '1'\n        if d_3 == 1:\n            return '1'\n        return '1'\n    if (N + 1) * (K + 4) == N * (K + 4):\n        if d_1 == 1 and d_2 == 1 and d_3 == 1:\n            return '1'\n        if d_1 == 1 or d_2 == 1 or d_3 == 1:\n            return '1'\n        if d_1 == 1 or d_2 == 1:\n            return '1'\n        if d_1 == 1 or d_2 == 1:\n            return '1'\n        if d_1 == 1 or d_2 == 1:\n            return '1'\n        if d_1 == 1 or d_2 == 1:\n            return '1'\n        if d_1 == 1 or d_2 == 1:\n            return '1'\n        if d_1 == 1 or d_2 == 1:\n            return '1'\n        if d_1 == 1 or d_2 == 1:\n            return '1'\n        if d_1 == 1:\n            return '1'\n        if d_2 == 1:\n            return '1'\n        if d_3 == 1:\n            return '1'\n        return '1'\n    return '1'\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4222,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    numbers = list(map(int, stdin.split()))\n    answer = 0\n    for i in range(n - k + 1):\n        l = numbers[i : i + k]\n        if len(l) == k:\n            answer += 1\n    print(answer)\n\n-----Sample Output-----\nSample Input:\n3 2\n2\n1 3\n1\n3\nSample Output:\n1\n'''\ndef"
    },
    {
        "number": 4222,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return\n"
    },
    {
        "number": 4222,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    d_1, d_2 = map(int, stdin.split())\n    A_1 = list(map(int, stdin.split()))\n    A_1.sort()\n    A_2 = list(map(int, stdin.split()))\n    A_2.sort()\n    A = [A_1[i] - A_2[i] for i in range(N)]\n    s = 0\n    for i in range(K):\n        s += A[i]\n        if s < 0:\n            break\n    print(s)\n\"\"\"\n\nclass Solution:\n    def solution(self, N, K):\n        left = 2**K\n        right = 2**(K - 1)\n        if N == 1:\n            return K\n        if N == K:\n            return 1\n        if N in [2, 4, 6, 8]:\n            if N == 1:\n                return 1\n            return 0\n        dp = [0] * (N + 1)\n        dp[0] = dp[1] = 1\n        if K < 4:\n            for i in range(K + 1):\n                dp[i] = (dp[i + 1] + dp[i]) % (10 ** 9 + 7)\n        elif K == 4:\n            for i in range(N - 1, 0, -1):\n                dp[i] = (dp[i - 1] + dp[i]) % (10 ** 9 + 7)\n        elif K == 6:\n            for i in range(N - 2, -1, -1):\n                dp[i] = (dp[i + 1] + dp[i]) % (10 ** 9 + 7)\n        elif K == 8:\n            for i in range(N - 3, -1, -1):\n                dp[i] = (dp[i + 1] + dp[i]) % (10 ** 9 + 7)\n        for i in range(K - 1, -1, -1):\n            dp[left] = (dp[left] + dp[i + 1]) % (10 ** 9 + 7)\n            left -= 2 ** i\n        for i in range(K - 1, 0, -1):\n            dp[right] = (dp[right] + dp[i + 1]) % (10 ** 9 + 7)\n            right -= 2 ** i\n        answer = dp[left] + dp[right]\n        return answer"
    },
    {
        "number": 4222,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin[:stdin.find(' ')])\n    K = int(stdin[stdin.find(' ') + 1:])\n    d_1 = int(stdin[stdin.find(' ') + 1:stdin.find(' ') + stdin[stdin.find(' ') + 1:].find(' ')])\n    A_1 = list(map(int, stdin[stdin.find(' ') + 1:stdin.find(' ') + stdin[stdin.find(' ') + 1:].find(' ') + 1].split()))\n    d_2 = 0\n    A_2 = []\n    for _ in range(N):\n        A_2.append(int(stdin[stdin.find(' ') + 1:stdin.find(' ') + stdin[stdin.find(' ') + 1:].find(' ') + 1]))\n        if A_2[-1]!= d_2:\n            d_2 = A_2[-1]\n    A_2.append(d_2)\n    A_3 = []\n    for _ in range(K):\n        A_3.append(int(stdin[stdin.find(' ') + 1:stdin.find(' ') + stdin[stdin.find(' ') + 1:].find(' ') + 1]))\n    A_3.append(d_1)\n    A_3.sort()\n    for i in range(K):\n        A_3[i] -= 1\n    A_3.sort()\n    A_3 = list(map(str, A_3))\n    A_3 = ''.join(A_3)\n    print(A_3)\n    print(A_2[K - 1])\n    return A_2[K - 1]\n\nprint(solution(stdin))"
    },
    {
        "number": 4222,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, K = [int(i) for i in stdin.split()]\n    d_i = [int(i) for i in stdin.split()[1::2]]\n    A = [int(i) for i in stdin.split()[2::2]]\n    ans = 0\n    for i in range(K):\n        ans += A[i]\n        for j in range(d_i[i], len(A)):\n            ans += A[j]\n        ans -= A[0]\n    return str(ans)\n\n-----Sample Input-----\n3 2\n2 1 3\n1 2\n1 3\n\n-----Sample Output-----\n0\n\n - Snuke 1 has Snack 1.\n - Snuke 2 has Snack 1 and 2.\n - Snuke 3 has Snack 1 and 2.\nThus, there will be two victims: Snuke 2 and Snuke 3.\ndef"
    },
    {
        "number": 4222,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    d_1 = map(int, stdin.split())\n    d_1 = {x: i for i, x in enumerate(d_1)}\n    d_K = map(int, stdin.split())\n    d_K = {x: i for i, x in enumerate(d_K)}\n    \n    def getSnacks():\n        taken = [False for _ in range(N)]\n        s = []\n        for _ in range(N):\n            s.append(list(map(int, stdin.split())))\n        \n        for i in range(N):\n            for j in range(d_K[i]):\n                taken[s[i][j]] = True\n        return taken\n    \n    def getSnacksCount(taken):\n        count = 0\n        for i in range(N):\n            for j in range(d_K[i]):\n                if not taken[i][j]:\n                    count += 1\n        return count\n    \n    def checkSnack(taken, num):\n        for i in range(num):\n            if taken[i]:\n                return False\n        return True\n    \n    def checkSnacks(snacks, num):\n        for i in range(num):\n            if checkSnack(snacks, i):\n                return True\n        return False\n    \n    snacks = getSnacks()\n    taken = getSnacks()\n    \n    count = 0\n    if checkSnacks(snacks, 1) or checkSnacks(snacks, 2):\n        count = getSnacksCount(taken)\n    \n    return count\n\"\"\"\n\nclass Solution:\n    def __init__(self):\n        self.d_1 = 0\n        self.d_2 = 0\n        self.d_3 = 0\n    \n    def solution(self, stdin: str) -> str:\n        N, K = map(int, stdin.split())\n        d_1 = list(map(int, stdin.split()))\n        d_2 = list(map(int, stdin.split()))\n        d_3 = list(map(int, stdin.split()))\n        \n        def checkSnacks(snacks):\n            for i in range(N):\n                for j in range(d_1[i]):\n                    if not snacks[i][j]:\n                        return False\n            for i in range(N):\n                for j in range(d_2[i]):\n                    if not snacks[i][j]:\n                        return False\n            for i in range(N):\n                for j in range(d_3[i]):\n                    if not snacks[i][j]:\n                        return False\n            return True\n        \n        def getSnacks():\n            taken = [False for _ in range(N)]\n            s = []\n            for _ in range(N):\n                s.append(list(map(int, stdin.split())))\n            \n            for i in range(N):\n                for j in range(d_1[i]):\n                    taken[s[i][j]] = True\n            for i in range(N):\n                for j in range(d_2[i]):\n                    taken[s[i][j]] = True\n            for i in range(N):\n                for j in range(d_3[i]):\n                    taken[s[i][j]] = True\n            return taken\n        \n        def getSnacksCount(taken):\n            count = 0\n            for i in range(N):\n                for j in range(d_1[i]):\n                    if not taken[i][j]:\n                        count += 1\n            for i in range(N):\n                for j in range(d_2[i]):\n                    if not taken[i][j]:\n                        count += 1\n            for i in range(N):\n                for j in range(d_3[i]):\n                    if not taken[i][j]:\n                        count += 1\n            return count\n        \n        snacks = getSnacks()\n        taken = getSnacks()\n        \n        count = 0\n        if checkSnacks(snacks):\n            count = getSnacksCount(taken)\n        \n        return count"
    },
    {
        "number": 4222,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    d_1, A_1, d_2, A_2, d_3, A_3 = map(int, stdin.split())\n    k = len(str(d_1*d_2*d_3))\n    A = A_1 + A_2 + A_3\n    snuke = d_1*d_2*d_3\n    snuke_index = [i for i, e in enumerate(A) if e == snuke]\n    if snuke_index:\n        return str(snuke_index[0]) + '\\n' + str(snuke_index[0]) + '\\n' + str(snuke_index[0]) + '\\n' + str(snuke_index[0]) + '\\n' + str(snuke_index[0]) + '\\n' + str(snuke_index[0])\n    else:\n        return '0\\n0\\n0\\n0'\n\n1 2 3 4 5\n'''\nclass Solution:\n    def solution(self, d_1, d_2, d_3, d_4, d_5, d_6, d_7, d_8, d_9):\n        A_1 = d_1\n        A_2 = d_2\n        A_3 = d_3\n        A_4 = d_4\n        A_5 = d_5\n        A_6 = d_6\n        A_7 = d_7\n        A_8 = d_8\n        A_9 = d_9\n        k = len(str(A_1*A_2*A_3*A_4*A_5*A_6*A_7*A_8*A_9))\n        A = A_1 + A_2 + A_3 + A_4 + A_5 + A_6 + A_7 + A_8 + A_9\n        snuke_index = [i for i, e in enumerate(A) if e == snuke]\n        if snuke_index:\n            return str(snuke_index[0]) + '\\n' + str(snuke_index[0]) + '\\n' + str(snuke_index[0]) + '\\n' + str(snuke_index[0]) + '\\n' + str(snuke_index[0]) + '\\n' + str(snuke_index[0])\n        else:\n            return '0\\n0\\n0\\n0'\n        \n"
    },
    {
        "number": 4223,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Solution 1:\n    # N = int(input())\n    # S = [input() for _ in range(N)]\n    # answer = [S.count('a')] + [S.count('b')] + [S.count('c')] + [S.count('a') + S.count('b') + S.count('c')]\n    # return str(len(answer))\n    #\n\n    # Solution 2:\n    # s = [input() for _ in range(N)]\n    # s = [i for i in s if i!='']\n    # N = len(s)\n    # answer = [s.count('a')] + [s.count('b')] + [s.count('c')] + [s.count('a') + s.count('b') + s.count('c')]\n    # return str(len(answer))\n    answer = [0] + [0] + [0]\n    for _ in range(1, len(stdin)):\n        answer[1] += answer[0]\n        answer[2] += answer[0]\n        answer[3] += answer[0]\n        if stdin[_] == 'a':\n            answer[4] += 1\n        elif stdin[_] == 'b':\n            answer[5] += 1\n        elif stdin[_] == 'c':\n            answer[6] += 1\n        else:\n            answer[7] += 1\n        answer[0] = 0\n    return str(answer[0])\n\ndef"
    },
    {
        "number": 4223,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n  def fib(n,x):\n    if n<=0:\n      return 0\n    if n==1 or n==2:\n      return 1\n    if n==3:\n      return 2\n    return fib(n-1,x*x)+fib(n-2,x*x)\n  \n  N,S = map(str,stdin.split())\n  N=int(N)\n  S = list(S)\n  \n  return str(fib(N,int(S[0]))*int(S[1]))\n"
    },
    {
        "number": 4223,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    ss = [stdin[i] for i in range(n)]\n    def f(ss):\n        f_dict = {}\n        for i in ss:\n            if i not in f_dict:\n                f_dict[i] = 0\n            f_dict[i] += 1\n        if len(f_dict) == n:\n            return 0\n        else:\n            return 1\n    return str(f(ss))\n\n>>> def solution(stdin):\n...     n = int(stdin)\n...     ss = [stdin[i] for i in range(n)]\n...     def f(ss):\n...         f_dict = {}\n...         for i in ss:\n...             if i not in f_dict:\n...                 f_dict[i] = 0\n...             f_dict[i] += 1\n...         return (f_dict[i] - 1 for i in f_dict if f_dict[i] == n)\n...\n...     return str(f(ss))\n\n>>> def solution(stdin):\n...     n = int(stdin)\n...     ss = [stdin[i] for i in range(n)]\n...     s = set(ss)\n...     return len(s)\n\n>>> def solution(stdin):\n...     n = int(stdin)\n...     ss = [stdin[i] for i in range(n)]\n...     def f(ss):\n...         f_dict = {}\n...         for i in ss:\n...             if i not in f_dict:\n...                 f_dict[i] = 0\n...             f_dict[i] += 1\n...         for i in f_dict:\n...             if f_dict[i]!= len(f_dict):\n...                 return 0\n...         return 1\n...\n...     return str(f(ss))\n\n>>> def solution(stdin):\n...     n = int(stdin)\n...     ss = [stdin[i] for i in range(n)]\n...     g = defaultdict(int)\n...     s = set(ss)\n...     for i in s:\n...         g[i] += 1\n...     return sum([g[i] for i in g if i!= 0])\n\n>>> def solution(stdin):\n...     n = int(stdin)\n...     ss = [stdin[i] for i in range(n)]\n...     g = defaultdict(int)\n...     s = set(ss)\n...     for i in s:\n...         g[i] += 1\n...     return sum([g[i] for i in g if i!= 0])\n\n>>> def solution(stdin):\n...     n = int(stdin)\n...     ss = [stdin[i] for i in range(n)]\n...     g = defaultdict(list)\n...     s = set(ss)\n...     for i in s:\n...         g[i].append(i)\n...     return sum([len(i) for i in g.values()])\n\n>>> def solution(stdin):\n...     n = int(stdin)\n...     ss = [stdin[i] for i in range(n)]\n...     g = defaultdict(set)\n...     s = set(ss)\n...     for i in s:\n...         g[i].add(i)\n...     return len(g)\n\n>>> def solution(stdin):\n...     n = int(stdin)\n...     ss = [stdin[i] for i in range(n)]\n...     g = defaultdict(set)\n...     s = set(ss)\n...     for i in s:\n...         g[i].add(i)\n...     return len(g)\n\n>>> def solution(stdin):\n...     n = int(stdin)\n...     ss = [stdin[i] for i in range(n)]\n...     a = defaultdict(set)\n...     s = set(ss)\n...     for i in s:\n...         if i[0] == '\"':\n...             a[i[1:-1]].add(i)\n...         else:\n...             a[i].add(i)\n...     return len(a)\n\n>>> def solution(stdin):\n...     n = int(stdin)\n...     ss = [stdin[i] for i in range(n)]\n...     a = defaultdict(set)\n...     s = set(ss)\n...     for i in s:\n...         if i[0] == '\"':\n...             a[i[1:-1]].add(i)\n...         else:\n...             a[i].add(i)\n...     return len(a)\n\n>>> def solution(stdin):\n...     n = int(stdin)\n...     ss = [stdin[i] for i in range(n)]\n...     def f(ss):\n...         f_dict = defaultdict(int)\n...         for i in ss:\n...             if i not in f_dict:\n...                 f_dict[i] = 0\n...             f_dict[i] += 1\n...         return f_dict\n...\n...     return str(f(ss))\n\n>>> def solution(stdin):\n...     n = int(stdin)\n...     ss = [stdin[i] for i in range(n)]\n...     a = defaultdict(set)\n...     for i in ss:\n...         if i[0] == '\"':\n...             a[i[1:-1]].add(i)\n...         else:\n...             a[i].add(i)\n...     return sum([len(i) for i in a.values()])\n\n>>> def solution(stdin):\n...     n = int(stdin)\n...     ss = [stdin[i] for i in range(n)]\n...     a = defaultdict(set)\n...     for i in ss:\n...         if i[0] == '\"':\n...             a[i[1:-1]].add(i)\n...         else:\n...             a[i].add(i)\n...     return len(a)\n\n>>> def solution(stdin):\n...     n = int(stdin)\n...     ss = [stdin[i] for i in range(n)]\n...     a = set()\n...     for i in ss:\n...         if i[0] == '\"':\n...             a.add(i)\n...         else:\n...             a.add(i[1:-1])\n...     return len(a)\n\n>>> def solution(stdin):\n...     n = int(stdin)\n...     ss = [stdin[i] for i in range(n)]\n...     s = set()\n...     for i in ss:\n...         if i[0] == '\"':\n...             s.add(i)\n...         else:\n...             s.add(i[1:-1])\n...     return len(s)\n\n>>> def solution(stdin):\n...     n = int(stdin)\n...     ss = [stdin[i] for i in range(n)]\n...     def f(ss):\n...         f_dict = defaultdict(int)\n...         for i in ss:\n...             if i[0] == '\"':\n...                 f_dict[i[1:-1]] += 1\n...             else:\n...                 f_dict[i] += 1\n...         return f_dict\n...\n...     return str(f(ss))\n\n>>> def solution(stdin):\n...     n = int(stdin)\n...     ss = [stdin[i] for"
    },
    {
        "number": 4223,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = []\n    for i in range(len(stdin)):\n        a.append(stdin[i].lower())\n    \n    a.sort()\n    \n    for i in range(len(a)):\n        temp = a.count(a[i])\n        if temp <= 1:\n            return str(temp)\n    \n    return \"0\"\n\n\n\n'''\ndef"
    },
    {
        "number": 4223,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    s = list(stdin.strip())\n    answer = 0\n    num = 0\n    for i in range(N):\n        for j in range(len(s)):\n            if s[j] == 'a':\n                num = (len(s) - j) * 2\n            if s[j] == 'b':\n                num = (len(s) - j) * 4\n            if s[j] == 'c':\n                num = (len(s) - j) * 8\n            if s[j] == 'd':\n                num = (len(s) - j) * 16\n            if s[j] == 'e':\n                num = (len(s) - j) * 32\n            if s[j] == 'f':\n                num = (len(s) - j) * 64\n            if s[j] == 'g':\n                num = (len(s) - j) * 128\n            if s[j] == 'h':\n                num = (len(s) - j) * 256\n            if s[j] == 'i':\n                num = (len(s) - j) * 512\n            if s[j] == 'j':\n                num = (len(s) - j) * 1024\n            if s[j] == 'k':\n                num = (len(s) - j) * 2048\n            if s[j] == 'l':\n                num = (len(s) - j) * 4096\n            if s[j] =='m':\n                num = (len(s) - j) * 8192\n            if s[j] == 'n':\n                num = (len(s) - j) * 16384\n            if s[j] == 'o':\n                num = (len(s) - j) * 32768\n            if s[j] == 'p':\n                num = (len(s) - j) * 65536\n            if s[j] == 'q':\n                num = (len(s) - j) * 262144\n            if s[j] == 'r':\n                num = (len(s) - j) * 524288\n            if s[j] =='s':\n                num = (len(s) - j) * 1048576\n            if s[j] == 't':\n                num = (len(s) - j) * 2097152\n            if s[j] == 'u':\n                num = (len(s) - j) * 4194304\n            if s[j] == 'v':\n                num = (len(s) - j) * 8388608\n            if s[j] == 'w':\n                num = (len(s) - j) * 131072\n            if s[j] == 'x':\n                num = (len(s) - j) * 262144\n            if s[j] == 'y':\n                num = (len(s) - j) * 524288\n            if s[j] == 'z':\n                num = (len(s) - j) * 1048576\n            if s[j] =='':\n                num = (len(s) - j) * 1024\n            if s[j] == '!':\n                num = (len(s) - j) * 8\n            if s[j] == '?':\n                num = (len(s) - j) * 4\n            if s[j] == '.':\n                num = (len(s) - j) * 2\n            if s[j] == ',':\n                num = (len(s) - j) * 1\n            if s[j] == '.':\n                num = (len(s) - j) * 1\n            if s[j] == '?':\n                num = (len(s) - j) * 1\n            if s[j] == '?':\n                num = (len(s) - j) * 1\n            if s[j] == '?':\n                num = (len(s) - j) * 1\n            if s[j] == '?':\n                num = (len(s) - j) * 1\n            if s[j] == '?':\n                num = (len(s) - j) * 1\n            if s[j] == '?':\n                num = (len(s) - j) * 1\n            if s[j] == '?':\n                num = (len(s) - j) * 1\n            if s[j] == '?':\n                num = (len(s) - j) * 1\n            if s[j] == '?':\n                num = (len(s) - j) * 1\n            if s[j] == '?':\n                num = (len(s) - j) * 1\n            if s[j] == '?':\n                num = (len(s) - j) * 1\n            if s[j] == '?':\n                num = (len(s) - j) * 1\n            if s[j] == '?':\n                num = (len(s) - j) * 1\n            if s[j] == '?':\n                num = (len(s) - j) * 1\n            if s[j] == '?':\n                num = (len(s) - j) * 1\n            if s[j] == '?':\n                num = (len(s) - j) * 1\n            if s[j] == '?':\n                num = (len(s) - j) * 1\n            if s[j] == '?':\n                num = (len(s) - j) * 1\n            if s[j] == '?':\n                num = (len(s) - j) * 1\n            if s[j] == '?':\n                num = (len(s) - j) * 1\n            if s[j] == '?':\n                num = (len(s) - j) * 1\n            if s[j] == '?':\n                num = (len(s) - j) * 1\n            if s[j] == '?':\n                num = (len(s) - j) * 1\n            if s[j] == '?':\n                num = (len(s) - j) * 1\n            if s[j] == '?':\n                num = (len(s) - j) * 1\n            if s[j] == '?':\n                num = (len(s) - j) * 1\n            if s[j] == '?':\n                num = (len(s) - j) * 1\n            if s[j] == '?':\n                num = (len(s) - j) * 1\n            if s[j] == '?':\n                num = (len(s) - j) * 1\n            if s[j] == '?':\n                num = (len(s) - j) * 1\n            if s[j] == '?':\n                num = (len(s) - j) * 1\n            if s[j] == '?':\n                num = (len(s) - j) * 1\n            if s[j] == '?':\n                num = (len(s) - j) * 1\n            if s[j] == '?':\n                num = (len(s) - j) * 1\n            if s[j] == '?':\n                num = (len(s) - j) * 1\n            if s[j] == '?':\n                num = (len(s) - j) * 1\n            if s[j] == '?':\n                num = (len(s) - j) * 1\n            if s[j] == '?':\n                num"
    },
    {
        "number": 4223,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    S = str(stdin.strip())\n    for i in range(N):\n        if i == 0:\n            S = S.replace(\"a\",\"a\",1)\n        else:\n            S = S.replace(\"b\",\"a\",1)\n    return len(S)\n"
    },
    {
        "number": 4223,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip().split()[0])\n    if N == 1:\n        return \"1\"\n    S = stdin.strip().split()[1:]\n    answer = 1\n    for i in range(N):\n        if S[i] == 'a' or S[i] == 'b' or S[i] == 'c' or S[i] == 'd' or S[i] == 'e' or S[i] == 'f' or S[i] == 'g' or S[i] == 'h' or S[i] == 'i' or S[i] == 'j' or S[i] == 'k' or S[i] == 'l' or S[i] =='m' or S[i] == 'n' or S[i] == 'o' or S[i] == 'p' or S[i] == 'q' or S[i] == 'r' or S[i] =='s' or S[i] == 't' or S[i] == 'u' or S[i] == 'v' or S[i] == 'w' or S[i] == 'x' or S[i] == 'y' or S[i] == 'z' or S[i] == 'A' or S[i] == 'B' or S[i] == 'C' or S[i] == 'D' or S[i] == 'E' or S[i] == 'F' or S[i] == 'G' or S[i] == 'H' or S[i] == 'I' or S[i] == 'J' or S[i] == 'K' or S[i] == 'L' or S[i] == 'M' or S[i] == 'N' or S[i] == 'O' or S[i] == 'P' or S[i] == 'Q' or S[i] == 'R' or S[i] == 'S' or S[i] == 'T' or S[i] == 'U' or S[i] == 'V' or S[i] == 'W' or S[i] == 'X' or S[i] == 'Y' or S[i] == 'Z':\n            answer += 1\n    return answer"
    },
    {
        "number": 4223,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    S = list(map(str, stdin.split()))\n    return str(len(S)+sum(S[:N-1]))\n\nExplanation\nIn the example above, S is \"[aabbbbaaca]\" and N is 5. The final number of slimes is 5.\n\"\"\""
    },
    {
        "number": 4223,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # start and end index\n    start = 0\n    end = 0\n    # length of array\n    n = len(stdin)\n    # map of color to number\n    map = {}\n    # map of number to color\n    colors = {\n        'a': 0,\n        'b': 1,\n        'c': 2,\n        'd': 3,\n        'e': 4,\n        'f': 5,\n        'g': 6,\n        'h': 7,\n        'i': 8,\n        'j': 9,\n        'k': 10,\n        'l': 11,\n       'm': 12,\n        'n': 13,\n        'o': 14,\n        'p': 15,\n        'q': 16,\n        'r': 17,\n       's': 18,\n        't': 19,\n        'u': 20,\n        'v': 21,\n        'w': 22,\n        'x': 23,\n        'y': 24,\n        'z': 25\n    }\n    # array to hold all slimes\n    slimes = []\n    # array to hold colors of slimes\n    colors_of_slimes = []\n    # iterate through the string\n    for i in range(n):\n        # if the letter is a letter then it's a number\n        if stdin[i].isalpha():\n            # add it to the map\n            map[stdin[i]] = colors[stdin[i]]\n            # check if the index is out of bounds\n            if i < start or i > end:\n                # if the index is out of bounds print the error\n                print('Error: index out of range')\n                # increase end\n                end += 1\n                # break the loop\n                break\n        else:\n            # increment end\n            end += 1\n    # for all numbers\n    for i in range(start, end + 1):\n        # for all letters in the string\n        for j in range(n):\n            # if the letter is a letter\n            if stdin[i].isalpha():\n                # if the letter is a letter\n                if stdin[i] == map[stdin[j]]:\n                    # add the letter to the colors_of_slimes list\n                    colors_of_slimes.append(map[stdin[j]])\n            # if the letter is not a letter\n            else:\n                # if the letter is a letter\n                if stdin[i] == map[stdin[j]] and j - i < 2:\n                    # add the letter to the colors_of_slimes list\n                    colors_of_slimes.append(map[stdin[j]])\n    # print the answer\n    print(len(colors_of_slimes))\n    # return the answer\n    return len(colors_of_slimes)"
    },
    {
        "number": 4223,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    S = list(stdin.strip())\n    adjacent_slimes = {}\n    adjacent_slimes_dict = {}\n    adjacent_slimes_list = []\n    adjacent_slimes_list = [l[::-1] for l in S]\n    for i in range(N):\n        adjacent_slimes[i] = S[i]\n    for i in range(N-1, -1, -1):\n        adjacent_slimes[i] = adjacent_slimes_list[i]\n    for i in adjacent_slimes:\n        if adjacent_slimes[i] not in adjacent_slimes_dict:\n            adjacent_slimes_dict[adjacent_slimes[i]] = set()\n        adjacent_slimes_dict[adjacent_slimes[i]].add(i)\n    for i in adjacent_slimes_dict:\n        adjacent_slimes_dict[i] = set(adjacent_slimes_dict[i])\n    for i in adjacent_slimes_dict:\n        if len(adjacent_slimes_dict[i]) == 1:\n            adjacent_slimes_dict[i] = adjacent_slimes_dict[i] | {adjacent_slimes_dict[i][0]}\n        else:\n            adjacent_slimes_dict[i] = adjacent_slimes_dict[i] - {adjacent_slimes_dict[i][0]}\n    adjacent_slimes_dict = dict(adjacent_slimes_dict)\n    # print(adjacent_slimes_dict)\n    slimes_dict = {}\n    adjacent_slimes_list_dict = {}\n    for i in adjacent_slimes_dict:\n        adjacent_slimes_list_dict[i] = len(adjacent_slimes_dict[i])\n    # print(adjacent_slimes_list_dict)\n    for i in adjacent_slimes_list:\n        if i in adjacent_slimes_dict:\n            adjacent_slimes_list_dict[i] = adjacent_slimes_dict[i]\n    # print(adjacent_slimes_list_dict)\n    for i in adjacent_slimes_list_dict:\n        for j in adjacent_slimes_dict[i]:\n            if j in adjacent_slimes_dict:\n                slimes_dict[j] = adjacent_slimes_dict[i] - {adjacent_slimes_dict[i]}\n                # print(adjacent_slimes_dict[i], adjacent_slimes_dict[j])\n    # print(adjacent_slimes_list_dict)\n    # print(adjacent_slimes_list_dict)\n    # print(adjacent_slimes_list_dict)\n    # print(adjacent_slimes_list_dict)\n    # print(adjacent_slimes_dict)\n    # print(adjacent_slimes_list)\n    # print(adjacent_slimes_list_dict)\n    # print(adjacent_slimes_list_dict)\n    # print(adjacent_slimes_list)\n    # print(adjacent_slimes_list_dict)\n    # print(adjacent_slimes_list_dict)\n    # print(adjacent_slimes_list_dict)\n    # print(adjacent_slimes_list_dict)\n    # print(adjacent_slimes_list_dict)\n    # print(adjacent_slimes_list_dict)\n    # print(adjacent_slimes_list_dict)\n    # print(adjacent_slimes_list_dict)\n    # print(adjacent_slimes_list_dict)\n    # print(adjacent_slimes_list_dict)\n    # print(adjacent_slimes_list_dict)\n    # print(adjacent_slimes_list_dict)\n    # print(adjacent_slimes_list_dict)\n    # print(adjacent_slimes_list_dict)\n    # print(adjacent_slimes_list_dict)\n    # print(adjacent_slimes_list_dict)\n    # print(adjacent_slimes_list_dict)\n    # print(adjacent_slimes_list_dict)\n    # print(adjacent_slimes_list_dict)\n    # print(adjacent_slimes_list_dict)\n    # print(adjacent_slimes_list_dict)\n    # print(adjacent_slimes_list_dict)\n    # print(adjacent_slimes_list_dict)\n    # print(adjacent_slimes_list_dict)\n    # print(adjacent_slimes_list_dict)\n    # print(adjacent_slimes_list_dict)\n    # print(adjacent_slimes_list_dict)\n    # print(adjacent_slimes_list_dict)\n    # print(adjacent_slimes_list_dict)\n    # print(adjacent_slimes_list_dict)\n    # print(adjacent_slimes_list_dict)\n    # print(adjacent_slimes_list_dict)\n    # print(adjacent_slimes_list_dict)\n    # print(adjacent_slimes_list_dict)\n    # print(adjacent_slimes_list_dict)\n    # print(adjacent_slimes_list_dict)\n    # print(adjacent_slimes_list_dict)\n    # print(adjacent_slimes_list_dict)\n    # print(adjacent_slimes_list_dict)\n    # print(adjacent_slimes_list_dict)\n    # print(adjacent_slimes_list_dict)\n    # print(adjacent_slimes_list_dict)\n    # print(adjacent_slimes_list_dict)\n    # print(adjacent_slimes_list_dict)\n    # print(adjacent_slimes_list_dict)\n    # print(adjacent_slimes_list_dict)\n    # print(adjacent_slimes_list_dict)\n    # print(adjacent_slimes_list_dict)\n    # print(adjacent_slimes_list_dict)\n    # print(adjacent_slimes_list_dict)\n    # print(adjacent_slimes_list_dict)\n    # print(adjacent_slimes_list_dict)\n    # print(adjacent_slimes_list_dict)\n    # print(adjacent_slimes_list_dict)\n    # print(adjacent_slimes_list_dict)\n    # print(adjacent_slimes_list_dict)\n    # print(adjacent_slimes_list_dict)\n    # print(adjacent_slimes_list_dict)\n    # print(adjacent_slimes_list_dict)\n    # print(adjacent_slimes_list_dict)\n    # print(adjacent_slimes_list_dict)\n    # print(adjacent_slimes_list_dict)\n    # print(adjacent_slimes_list_dict)\n    # print(adjacent_slimes_list_dict)\n    # print(adjacent_slimes_list_dict)\n    # print(adjacent_slimes_list_dict)\n    # print(adjacent_slimes_list_dict)\n    # print(adjacent_slimes_list_dict)\n    # print(adjacent_slimes_list_dict)\n    # print(adjacent_slimes_list_dict)\n    # print(adjacent_slimes_list_dict)\n    "
    },
    {
        "number": 4224,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, a_1, a_2, a_3 = map(int, stdin.split())\n    snuke_sequence = list(map(int, stdin.split()))\n    max_operation_count = 0\n    for index, operation_count in enumerate(snuke_sequence):\n        if operation_count % a_1 == 0:\n            operation_count = operation_count // a_1\n        if operation_count % a_2 == 0:\n            operation_count = operation_count // a_2\n        if operation_count % a_3 == 0:\n            operation_count = operation_count // a_3\n        if index + operation_count == N:\n            max_operation_count = max(max_operation_count, operation_count)\n    return str(max_operation_count)"
    },
    {
        "number": 4224,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, a_1, a_2, a_3 = map(int, stdin.split())\n    a_1 = a_1/2\n    a_2 = a_2/3\n    a_3 = a_3/2\n    res = 0\n    while a_1!= 0 or a_2!= 0 or a_3!= 0:\n        a = a_1 if a_1 >= 0 else a_2\n        a = a if a >= 0 else a_3\n        if a_1 > 0 and a_2 == 0:\n            res += 1\n        elif a_2 > 0 and a_3 == 0:\n            res += 1\n        elif a_2 > 0 and a_3 > 0:\n            res += 1\n        a_1 = a_1//2 if a_1 > 0 else a_2\n        a_2 = a_2//3 if a_2 > 0 else a_3\n        a_3 = a_3//2 if a_3 > 0 else a_2\n    return str(res)\n\ndef"
    },
    {
        "number": 4224,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\n}\n"
    },
    {
        "number": 4224,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    a = [int(x) for x in stdin.split()]\n    a_max = 0\n    a_max_index = -1\n    for i in range(len(a)):\n        if a[i] == 1:\n            a[i] = 2\n            a_max = a[i]\n            a_max_index = i\n        elif a[i] == 2:\n            a[i] = 3\n            a_max = a[i]\n            a_max_index = i\n        elif a[i] == 3:\n            a[i] = 4\n            a_max = a[i]\n            a_max_index = i\n        else:\n            return 'error'\n    a_max *= 2\n    a_max_index = a_max_index // a.count(a_max)\n    a_max_index = a_max_index % a.count(a_max)\n    if a_max_index > N:\n        a_max_index -= N\n    a_max = a[a_max_index]\n    for i in range(N - 1, a_max_index - 1, -1):\n        if a[i] == 1:\n            a[i] = 3\n            a_max = a[i]\n            a_max_index = i\n        elif a[i] == 2:\n            a[i] = 5\n            a_max = a[i]\n            a_max_index = i\n        elif a[i] == 3:\n            a[i] = 7\n            a_max = a[i]\n            a_max_index = i\n        elif a[i] == 4:\n            a[i] = 9\n            a_max = a[i]\n            a_max_index = i\n        else:\n            return 'error'\n    a_max *= 3\n    a_max_index = a_max_index // a.count(a_max)\n    a_max_index = a_max_index % a.count(a_max)\n    if a_max_index > N:\n        a_max_index -= N\n    a_max = a[a_max_index]\n    for i in range(N - 1, a_max_index - 1, -1):\n        if a[i] == 1:\n            a[i] = 7\n            a_max = a[i]\n            a_max_index = i\n        elif a[i] == 2:\n            a[i] = 11\n            a_max = a[i]\n            a_max_index = i\n        elif a[i] == 3:\n            a[i] = 13\n            a_max = a[i]\n            a_max_index = i\n        elif a[i] == 4:\n            a[i] = 17\n            a_max = a[i]\n            a_max_index = i\n        else:\n            return 'error'\n    a_max *= 5\n    a_max_index = a_max_index // a.count(a_max)\n    a_max_index = a_max_index % a.count(a_max)\n    if a_max_index > N:\n        a_max_index -= N\n    a_max = a[a_max_index]\n    if a[a_max_index] == 1:\n        a[a_max_index] = 2\n    elif a[a_max_index] == 2:\n        a[a_max_index] = 3\n    elif a[a_max_index] == 3:\n        a[a_max_index] = 4\n    elif a[a_max_index] == 4:\n        a[a_max_index] = 5\n    else:\n        return 'error'\n    a_max_index = a_max_index // a.count(a_max)\n    a_max_index = a_max_index % a.count(a_max)\n    a_max_index = a_max_index // a.count(a_max)\n    a_max_index = a_max_index % a.count(a_max)\n    a_max_index = a_max_index // a.count(a_max)\n    a_max_index = a_max_index % a.count(a_max)\n    a_max = a[a_max_index]\n    a_max_index = a_max_index // a.count(a_max)\n    a_max_index = a_max_index % a.count(a_max)\n    a_max_index = a_max_index // a.count(a_max)\n    a_max_index = a_max_index % a.count(a_max)\n    if a_max_index > N:\n        a_max_index -= N\n    a_max = a[a_max_index]\n    for i in range(N - 1, a_max_index - 1, -1):\n        if a[i] == 1:\n            a[i] = 5\n            a_max = a[i]\n            a_max_index = i\n        elif a[i] == 2:\n            a[i] = 9\n            a_max = a[i]\n            a_max_index = i\n        elif a[i] == 3:\n            a[i] = 13\n            a_max = a[i]\n            a_max_index = i\n        elif a[i] == 4:\n            a[i] = 17\n            a_max = a[i]\n            a_max_index = i\n        else:\n            return 'error'\n    a_max_index = a_max_index // a.count(a_max)\n    a_max_index = a_max_index % a.count(a_max)\n    a_max_index = a_max_index // a.count(a_max)\n    a_max_index = a_max_index % a.count(a_max)\n    if a_max_index > N:\n        a_max_index -= N\n    a_max = a[a_max_index]\n    if a[a_max_index] == 1:\n        a[a_max_index] = 2\n    elif a[a_max_index] == 2:\n        a[a_max_index] = 3\n    elif a[a_max_index] == 3:\n        a[a_max_index] = 4\n    elif a[a_max_index] == 4:\n        a[a_max_index] = 5\n    else:\n        return 'error'\n    a_max_index ="
    },
    {
        "number": 4224,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, *a = list(map(int, stdin.split()))\n    max_ops = 0\n    for i in range(len(a)):\n        max_ops = max(max_ops, (a[i] + 3) // 2)\n    return str(max_ops)\n\"\"\"\nimport math\nimport sys\nfrom itertools import permutations\n\n\ndef"
    },
    {
        "number": 4224,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a_1, a_2, a_3 = map(int, stdin.split())\n    n = len(str(a_1))\n    n = (n // 3) + (n % 3!= 0)\n    a_3_mul_2_3 = a_1 * a_3\n    a_2_mul_3_2 = a_2 * 2\n    res = str(a_1 + a_3_mul_2_3) + str(a_2_mul_3_2) + str(a_3)\n    return res if len(res) <= n else ''"
    },
    {
        "number": 4224,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n        N = int(stdin)\n        a = list(map(int, stdin.split()))\n        result = 0\n        for i in range(N):\n            if a[i] % 2!= 0:\n                result += (a[i] * 2)\n            else:\n                result += (a[i] * 3)\n        return str(result)\n"
    },
    {
        "number": 4224,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n  N = int(stdin)\n  a_lst = [int(x) for x in stdin.split()]\n  def solve(a_lst: list[int]) -> str:\n    if not a_lst:\n      return \"\"\n    a_lst.sort()\n    result = \"\"\n    if a_lst[0] < 0:\n      result = \"-\"\n    for i in range(1, N):\n      if i <= a_lst[-1]:\n        result = str(a_lst[i]) + result\n      else:\n        result = str(a_lst[i]) + str(a_lst[i+1]) + result\n    return result\n  return solve(a_lst)\n\n\n\ndef"
    },
    {
        "number": 4224,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a_nums = list(map(int, stdin.split()))\n    n = len(a_nums)\n\n    # Divide and conquer\n    def divide(a, start, end):\n        if end - start < n:\n            return \"divide operation can't be performed\"\n        elif start == end:\n            return a_nums[start]\n        mid = (start + end) // 2\n        left_num = divide(a, start, mid)\n        right_num = divide(a, mid + 1, end)\n        return left_num if left_num!= right_num else right_num\n    return divide(a_nums, 0, n)\n"
    },
    {
        "number": 4224,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, a_1, a_2, a_3 = map(int, stdin.split())\n    max_operation = 0\n    for i in range(1, N + 1):\n        for j in range(1, i + 1):\n            for k in range(1, j + 1):\n                # print('i: ', i,'j: ', j,'k: ', k)\n                if a_1 * k <= i <= a_2 * k:\n                    # print('a1: ', a_1,'k: ', k)\n                    a_1 *= k\n                    # print('a1: ', a_1)\n                elif a_2 * k <= i <= a_3 * k:\n                    # print('a2: ', a_2,'k: ', k)\n                    a_2 *= k\n                    # print('a2: ', a_2)\n                elif a_3 * k <= i <= a_1 * k:\n                    # print('a3: ', a_3,'k: ', k)\n                    a_3 *= k\n                    # print('a3: ', a_3)\n        # print('---------------------------')\n        max_operation = max(max_operation, i)\n    return str(max_operation)\n\"\"\"\n\ndef"
    },
    {
        "number": 4225,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(max(map(int, stdin.split())))\n\n-----Sample Output-----\nSample Input:\n1 1 1\nSample Output:\n1\n\n-----Sample Input:\n4 1 3 3\nSample Output:\n1\n\n-----Sample Input:\n3 1 -1 0\nSample Output:\n-1\n\n-----Sample Input:\n4 1 1 1 1 1\nSample Output:\n0\n\n------Constraints------\n1 <= A <= 10^9\n1 <= B <= 10^9\n1 <= C <= 10^9\n1 <= K <= 2*10^9\n\n------Time Limit: 1 second--------\n------Space Limit: 1 megabyte--------\n\"\"\"\ndef"
    },
    {
        "number": 4225,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, k = [int(x) for x in stdin.split(' ')]\n    def check(a, b, c, k):\n        for i in range(a, b + 1):\n            if a + i + c == k:\n                return i\n        return -1\n    \n    def max_sum(a, b, c, k):\n        # return a + k * b + c - 1\n        #    a, b, c = a, b, c\n        a, b = max(a, b), max(a + 1, b + 1, c)\n        \n        # print(a, b, c, k)\n        \n        if k == 0:\n            return max(a, b)\n        \n        if k > a:\n            return max_sum(a, b, c, k - a)\n        elif a < k:\n            return max_sum(a + 1, b, c, k - a)\n        else:\n            return a\n    \n    return max_sum(a, b, c, k)\n"
    },
    {
        "number": 4225,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    N, K = map(int, stdin.split())\n    A = sorted(map(int, input().split()))\n    B = sorted(map(int, input().split()))\n    C = sorted(map(int, input().split()))\n    \n    total = A[K] + B[K] + C[K]\n    \n    return str(total)\n    \n    \n"
    },
    {
        "number": 4225,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, K = map(int, stdin.split())\n    if A + B + C == 0:\n        return 0\n    A_set = set(str(A))\n    B_set = set(str(B))\n    C_set = set(str(C))\n    if A_set.issubset(B_set) and B_set.issubset(C_set):\n        return max(A+B+C, A+B+C)\n    elif B_set.issubset(C_set) and C_set.issubset(A_set):\n        return max(A+B, B+C)\n    elif B_set.issubset(C_set) and C_set.issubset(A_set):\n        return max(A+B, A+B+C)\n    elif B_set.issubset(C_set) and C_set.issubset(B_set):\n        return max(A+B, A+B+C)\n    else:\n        return max(A, B, C)\n"
    },
    {
        "number": 4225,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    res = ''\n    k = 0\n    for _ in range(n):\n        a, b, c = map(int, stdin.split())\n        if a + b + c == k:\n            res += str(k)\n            k += 1\n    return res\n\n\"\"\"\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        return str(int(stdin.strip()) + 1)\n\"\"\"\n\"\"\"\nThe function solution() does not return anything.\nThe function solution() returns the maximum possible sum of the numbers written on the cards.\n\nThis code is contributed by Nikhil Kumar Singh(nickzuck_007).\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4225,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, K = map(int, stdin.split())\n    result = 0\n    if A == 0:\n        result = B\n    elif B == 0:\n        result = C\n    elif C == 0:\n        result = K\n    else:\n        for i in range(1,K+1):\n            if A+i in [1,i]:\n                result += i\n            else:\n                result += A+i\n                result = min(result, result+K)\n    return str(result)\n"
    },
    {
        "number": 4225,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    cards = [int(x) for x in stdin.split()]\n    ans = 0\n    n, k = cards\n    for i in range(n):\n        nxt = (n - i - 1) * 2\n        for j in range(k):\n            if cards[i + j]!= 0:\n                ans = max(ans, nxt + cards[i + j])\n    return str(ans)\n\n\nExample 1:\n\nInput:\n2 1 1 3\n\nOutput:\n2\n\nExplanation:\nThree cards will be picked up with 1s and 1. The sum of these cards is 2 + 1 + 1 = 2.\nExample 2:\n\nInput:\n1 1 1 3\n\nOutput:\n1\n\nExplanation:\nExample 1:\n\nInput:\n1 1 1 3\n\nOutput:\n1\n\nExplanation:\nThe sum of these cards is 1 + 1 + 1 = 1.\nExample 2:\n\nInput:\n1 1 0 2\n\nOutput:\n1\n\nExplanation:\nThe sum of these cards is 1 + 1 + 0 = 1.\n\nconstraints:\n\n1 <= A <= 10^9\n1 <= B <= 10^9\n1 <= C <= 10^9\n1 <= K <= 2^24\n\"\"\"\nclass Solution:\n    def maxSum(self, A: int, B: int, C: int, K: int) -> str:\n        if A+B+C<=K:\n            return str(A+B+C)\n        return str(A+B+K)\n"
    },
    {
        "number": 4225,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n  num_of_cards = int(stdin.strip())\n  nums = [int(i) for i in stdin.strip().split()]\n  sum_of_cards = 0\n  for n in nums:\n    sum_of_cards += n\n  k = int(stdin.strip().split()[1])\n  max_val = sum_of_cards + (k - 1) * sum_of_cards\n  return str(max_val)\n\nprint(solution(\"2 1 1 3\"))\n"
    },
    {
        "number": 4225,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, K = map(int, stdin.split())\n    \n    result = A + B + C - (K * (A + B + C))\n    \n    return str(result)"
    },
    {
        "number": 4225,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A = int(stdin.split(\" \")[0])\n    B = int(stdin.split(\" \")[1])\n    C = int(stdin.split(\" \")[2])\n    K = int(stdin.split(\" \")[3])\n\n    total = A + B + C\n    if total < K:\n        print(\"No\")\n        return\n\n    if total % K!= 0:\n        print(\"No\")\n        return\n\n    total = total // K\n    answer = total\n    for i in range(1, total + 1):\n        answer += 1 if i % A == 0 else -1\n        answer += 1 if i % B == 0 else -1\n        answer += 1 if i % C == 0 else -1\n\n    print(answer)"
    },
    {
        "number": 4226,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def minC(num1, num2):\n        if num1 > num2:\n            return num1\n        if num1 == num2:\n            return num1\n        return num2\n    \n    def maxC(num1, num2):\n        if num1 < num2:\n            return num1\n        if num1 == num2:\n            return num1\n        return num2\n    \n    x, y = [int(x) for x in stdin.split()]\n    if x == 0 and y == 0:\n        return 'No'\n    if x!= 0 and y!= 0:\n        return 'Yes'\n    cranes = x\n    turtles = y\n    sum_cranes = 0\n    sum_turtles = 0\n    combinations = []\n    \n    # maxC and minC functions are used in order to calculate a solution\n    def maxC(num1, num2):\n        if num1 > num2:\n            return num1\n        if num1 == num2:\n            return num1\n        return num2\n    \n    def minC(num1, num2):\n        if num1 < num2:\n            return num1\n        if num1 == num2:\n            return num1\n        return num2\n    \n    # Calculations for the sum of the numbers in the grid\n    def sum_cranes():\n        sum = 0\n        for n in range(cranes):\n            sum += minC(n, n)\n        return sum\n    \n    def sum_turtles():\n        sum = 0\n        for n in range(turtles):\n            sum += maxC(n, n)\n        return sum\n    \n    # Calculations for the total number of combinations\n    def count_combinations():\n        sum = 0\n        for n in combinations:\n            sum += len(n)\n        return sum\n    \n    # Calculations for the total number of combinations\n    def count_combinations2():\n        sum = 0\n        for n in combinations:\n            sum += len(n)\n        return sum\n    \n    # Sums the numbers in the grid\n    def sum_grid():\n        sum = 0\n        for n in range(x):\n            sum += n\n        for n in range(y):\n            sum += n\n        return sum\n    \n    # Calculations for the total number of combinations\n    def count_combinations3():\n        sum = 0\n        for n in combinations:\n            sum += len(n)\n        return sum\n    \n    # Calculations for the total number of combinations\n    def count_combinations4():\n        sum = 0\n        for n in combinations:\n            sum += len(n)\n        return sum\n    \n    # Calculations for the total number of combinations\n    def count_combinations5():\n        sum = 0\n        for n in combinations:\n            sum += len(n)\n        return sum\n    \n    # Calculations for the total number of combinations\n    def count_combinations6():\n        sum = 0\n        for n in combinations:\n            sum += len(n)\n        return sum\n    \n    # Sum of the numbers in the grid\n    sum_grid2 = sum_grid()\n    \n    # Sum of the numbers in the grid\n    sum_grid3 = sum_grid()\n    \n    # Sum of the numbers in the grid\n    sum_grid4 = sum_grid()\n    \n    # Calculations for the total number of combinations\n    sum_combinations = sum_combinations2()\n    \n    # Calculations for the total number of combinations\n    sum_combinations3 = sum_combinations3()\n    \n    # Calculations for the total number of combinations\n    sum_combinations4 = sum_combinations4()\n    \n    # Calculations for the total number of combinations\n    sum_combinations5 = sum_combinations5()\n    \n    # Calculations for the total number of combinations\n    sum_combinations6 = sum_combinations6()\n    \n    # Calculations for the total number of combinations\n    sum_combinations7 = sum_combinations7()\n    \n    # Total combinations\n    total_combinations = sum_combinations+sum_combinations3+sum_combinations4+sum_combinations5+sum_combinations6+sum_combinations7\n    \n    # Total combinations\n    total_combinations_2 = sum_combinations2+sum_combinations3+sum_combinations4+sum_combinations5+sum_combinations6+sum_combinations7\n    \n    # Total combinations\n    total_combinations_3 = sum_grid3+sum_grid4+sum_grid5+sum_grid6+sum_grid7\n    \n    # Total combinations\n    total_combinations_4 = sum_grid2+sum_grid3+sum_grid4+sum_grid5+sum_grid6+sum_grid7\n    \n    # Total combinations\n    total_combinations_5 = sum_grid2+sum_grid3+sum_grid4+sum_grid5+sum_grid6+sum_grid7\n    \n    # Total combinations\n    total_combinations_6 = sum_grid2+sum_grid3+sum_grid4+sum_grid5+sum_grid6+sum_grid7\n    \n    # Total combinations\n    total_combinations_7 = sum_grid2+sum_grid3+sum_grid4+sum_grid5+sum_grid6+sum_grid7\n    \n    # Total combinations\n    total_combinations_8 = sum_grid3+sum_grid4+sum_grid5+sum_grid6+sum_grid7\n    \n    # Total combinations\n    total_combinations_9 = sum_grid4+sum_grid5+sum_grid6+sum_grid7\n    \n    # Total combinations\n    total_combinations_10 = sum_grid2+sum_grid3+sum_grid4+sum_grid5+sum_grid6+sum_grid7\n    \n    # Total combinations\n    total_combinations_11 = sum_grid2+sum_grid3+sum_grid4+sum_grid5+sum_grid6+sum_grid7\n    \n    # Total combinations\n    total_combinations_12 = sum_grid2+sum_grid3+sum_grid4+sum_grid5+sum_grid6+sum_grid7\n    \n    # Total combinations\n    total_combinations_13 = sum_grid2+sum_grid3+sum_grid4+sum_grid5+sum_grid6+sum_grid7\n    \n    # Total combinations\n    total_combinations_14 = sum_grid3+sum_grid4+sum_grid5+sum_grid6+sum_grid7\n    \n    # Total combinations\n    total_combinations_15 = sum_grid4+sum_grid5+sum_grid6+sum_grid7\n    \n    # Total combinations\n    total_combinations_16 = sum_grid2+sum_grid3+sum_grid4+sum_grid5+sum_grid6+sum_grid7\n    \n    # Total combinations\n    total_combinations_17 = sum_grid2+sum_grid3+sum_grid4+sum_grid5+sum_grid6+sum_grid7\n    \n    # Total combinations\n    total_combinations_18 = sum_grid2+sum_grid3+sum_grid4+sum_grid5+sum_grid6+sum_grid7\n    \n    # Total combinations\n    total_combinations_19 = sum_grid3+sum_grid4+sum_grid5+sum_grid6+sum_grid7\n    \n    # Total combinations\n    total_combinations_20 = sum_grid4+sum_grid5+sum_grid6"
    },
    {
        "number": 4226,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin.strip())\n    Y = int(stdin.strip())\n    \n    cranes = X - Y\n    turtles = X + Y\n    \n    if(cranes == 0):\n        return \"Yes\"\n    \n    if(turtles == 0):\n        return \"No\"\n    \n    crane_turtle_dict = {}\n    for i in range(cranes+1):\n        crane_turtle_dict[i] = i\n    \n    if(turtles % 2 == 0):\n        turtle_tuple = tuple(range(1, turtles+1))\n    else:\n        turtle_tuple = tuple(range(1, turtles+1, 2))\n    \n    target_tuple = tuple(range(1, turtles+1))\n    for i in target_tuple:\n        if i not in crane_turtle_dict:\n            return \"No\"\n    \n    for i in turtle_tuple:\n        if i not in crane_turtle_dict:\n            return \"No\"\n    \n    for i in target_tuple:\n        if i not in crane_turtle_dict:\n            return \"No\"\n    \n    return \"Yes\"\n"
    },
    {
        "number": 4226,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    num_of_cranes = int(stdin.split()[0])\n    num_of_turtles = int(stdin.split()[1])\n    number_of_cranes = num_of_cranes\n    number_of_turtles = num_of_turtles\n    result = \"\"\n    while number_of_cranes > 0:\n        # print(number_of_cranes, \"cranes\")\n        # print(number_of_cranes, number_of_turtles, \"turtles\")\n        if number_of_cranes == 0:\n            return \"Yes\"\n        # print(number_of_cranes, \"cranes\")\n        crane = number_of_cranes % 3\n        turtle = (number_of_cranes // 3) % 4\n        # print(crane, turtle)\n        number_of_cranes = number_of_cranes // 3\n        number_of_turtles = number_of_turtles // 3\n        # print(number_of_cranes, \"cranes\")\n        # print(number_of_turtles, \"turtles\")\n        # print(crane, turtle)\n        if crane == 0:\n            result = \"Yes\"\n            break\n        if turtle == 0:\n            result = \"Yes\"\n            break\n        if crane!= 0 and turtle!= 0:\n            if crane < turtle:\n                crane -= 1\n                number_of_cranes -= 1\n            elif crane > turtle:\n                crane -= 1\n                number_of_cranes -= 1\n            else:\n                turtle -= 1\n                number_of_turtles -= 1\n        # print(crane, turtle)\n    if number_of_cranes == 0:\n        return \"Yes\"\n    if number_of_turtles == 0:\n        return \"Yes\"\n    if result == \"Yes\":\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4226,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = [0] * n\n    for i in range(1, n + 1):\n        x[i] = int(stdin[i - 1])\n    y = 0\n    for i in range(0, n - 1):\n        y += x[i + 1] - x[i]\n    if y % 2 == 0:\n        return \"Yes\"\n    else:\n        return \"No\"\n\n\"\"\""
    },
    {
        "number": 4226,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # 1)\n    X, Y = map(int, stdin.split())\n    # print(X, Y)\n    # print(X, Y)\n\n    # 2)\n    num_cranes = X + Y\n    # print(num_cranes)\n\n    num_turtles = X * Y\n    # print(num_turtles)\n\n    num_combinations = X * Y\n    # print(num_combinations)\n\n    # 3)\n    if num_cranes == num_turtles or num_cranes == num_combinations:\n        print('Yes')\n    else:\n        print('No')\n\"\"\"\ndef"
    },
    {
        "number": 4226,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n    X, Y = map(int, stdin.split())\n    \n    if (X == Y):\n        return \"Yes\"\n    \n    combinations = (X * Y) - (X + Y)\n    \n    if (combinations % 2!= 0):\n        return \"No\"\n    \n    else:\n        return \"Yes\""
    },
    {
        "number": 4226,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    _list = [int(x) for x in stdin.split(\" \")]\n    _list.sort()\n    _sum = sum(_list)\n    if _sum % 2 == 1:\n        return \"No\"\n    elif 2 <= _sum <= _sum:\n        return \"Yes\"\n    else:\n        return \"No\"\n\ndef"
    },
    {
        "number": 4226,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, m = map(int, stdin.split())\n    numbers = list(map(int, stdin.split()))\n    \n    # (1)\n    if len(set(numbers))!= len(numbers):\n        return \"No\"\n\n    # (2)\n    if len(set(numbers)) == 1 and numbers[0] == 1:\n        return \"No\"\n\n    # (3)\n    if len(set(numbers)) > 2:\n        return \"No\"\n\n    # (4)\n    cranes_count = 0\n    turtles_count = 0\n    for number in numbers:\n        cranes_count += number // 2\n        turtles_count += number % 2\n\n    if (cranes_count == 2 and turtles_count == 3):\n        return \"Yes\"\n\n    return \"No\"\n\nfor n, m in test_cases:\n    print(solution(f\"{n} {m}\"))"
    },
    {
        "number": 4226,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n  result = 'Yes' if int(stdin[0]) + int(stdin[1]) == int(stdin[2]) else 'No'\n  return result\nprint(solution(input()))\n"
    },
    {
        "number": 4226,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    for _ in range(int(stdin.split(\" \")[1])):\n        x = int(stdin.split(\" \")[0])\n        y = int(stdin.split(\" \")[1])\n        if y <= x:\n            for x in range(1, y + 1):\n                if x % 2 == 0:\n                    print(\"No\")\n                    return \"No\"\n                else:\n                    print(\"Yes\")\n                    return \"Yes\"\n        else:\n            print(\"No\")\n            return \"No\"\n"
    },
    {
        "number": 4227,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    def is_self_loop(u, v, visited):\n        return (visited[u][v] == visited[v][u])\n    \n    n, m = map(int, stdin.split())\n    edges = [list(map(int, stdin.split())) for _ in range(m)]\n    \n    visited = [[0 for _ in range(n)] for _ in range(n)]\n    \n    for u, v, weight in edges:\n        if not is_self_loop(u, v, visited):\n            return 'No'\n    \n    queue = []\n    count = 0\n    \n    for u, v in edges:\n        if not is_self_loop(u, v, visited):\n            visited[u][v] = 1\n            queue.append((u, v))\n        \n        else:\n            count += 1\n            if count == 2:\n                count = 0\n                visited[u][v] = 0\n                queue.append((u, v))\n                \n    for i in range(n):\n        for j in range(n):\n            if visited[i][j] == 0:\n                return 'No'\n    \n    return str(count)\n\ndef"
    },
    {
        "number": 4227,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    N, M = map(int, stdin.split())\n    \n    # generate graph\n    graph = [[] for _ in range(N+1)]\n    \n    for i in range(M):\n        a, b = map(int, stdin.split())\n        graph[a].append(b)\n        graph[b].append(a)\n    \n    # for each edge check if it is self-loop or double edge\n    # if not, just visit the vertex\n    # if self-loop, then there is no double edge between them\n    # if double edge, then the first vertex is the start of a path, and the second vertex is the end of a path\n    visited = set()\n    for i in range(1, N+1):\n        if i not in visited:\n            if len(graph[i]) == 1:\n                visited.add(i)\n            else:\n                path = []\n                for j in graph[i]:\n                    path.append(j)\n                if path in visited:\n                    return \"ERROR\"\n                else:\n                    path.append(i)\n                    visited.add(i)\n                    visited.add(path[0])\n                    visited.add(path[-1])\n                    # print(\"%s -> %s\"%(path[0], path[-1]))\n                    for k in path:\n                        graph[k].remove(i)\n    \n    # print(visited)\n    # print(graph)\n    # print(visited)\n    # print(graph[1])\n    # print(graph[2])\n    # print(graph[3])\n    # print(graph[4])\n    # print(graph[5])\n    # print(graph[6])\n    # print(graph[7])\n    # print(graph[8])\n    # print(graph[9])\n    # print(graph[10])\n    # print(graph[11])\n    # print(graph[12])\n    # print(graph[13])\n    # print(graph[14])\n    # print(graph[15])\n    # print(graph[16])\n    # print(graph[17])\n    # print(graph[18])\n    # print(graph[19])\n    # print(graph[20])\n    # print(graph[21])\n    # print(graph[22])\n    # print(graph[23])\n    # print(graph[24])\n    # print(graph[25])\n    # print(graph[26])\n    # print(graph[27])\n    # print(graph[28])\n    # print(graph[29])\n    # print(graph[30])\n    # print(graph[31])\n    # print(graph[32])\n    # print(graph[33])\n    # print(graph[34])\n    # print(graph[35])\n    # print(graph[36])\n    # print(graph[37])\n    # print(graph[38])\n    # print(graph[39])\n    # print(graph[40])\n    # print(graph[41])\n    # print(graph[42])\n    # print(graph[43])\n    # print(graph[44])\n    # print(graph[45])\n    # print(graph[46])\n    # print(graph[47])\n    # print(graph[48])\n    # print(graph[49])\n    # print(graph[50])\n    # print(graph[51])\n    # print(graph[52])\n    # print(graph[53])\n    # print(graph[54])\n    # print(graph[55])\n    # print(graph[56])\n    # print(graph[57])\n    # print(graph[58])\n    # print(graph[59])\n    # print(graph[60])\n    # print(graph[61])\n    # print(graph[62])\n    # print(graph[63])\n    # print(graph[64])\n    # print(graph[65])\n    # print(graph[66])\n    # print(graph[67])\n    # print(graph[68])\n    # print(graph[69])\n    # print(graph[70])\n    # print(graph[71])\n    # print(graph[72])\n    # print(graph[73])\n    # print(graph[74])\n    # print(graph[75])\n    # print(graph[76])\n    # print(graph[77])\n    # print(graph[78])\n    # print(graph[79])\n    # print(graph[80])\n    # print(graph[81])\n    # print(graph[82])\n    # print(graph[83])\n    # print(graph[84])\n    # print(graph[85])\n    # print(graph[86])\n    # print(graph[87])\n    # print(graph[88])\n    # print(graph[89])\n    # print(graph[90])\n    # print(graph[91])\n    # print(graph[92])\n    # print(graph[93])\n    # print(graph[94])\n    # print(graph[95])\n    # print(graph[96])\n    # print(graph[97])\n    # print(graph[98])\n    # print(graph[99])\n    # print(graph[100])\n    # print(graph[101])\n    # print(graph[102])\n    # print(graph[103])\n    # print(graph[104])\n    # print(graph[105])\n    # print(graph[106])\n    # print(graph[107])\n    # print(graph[108])\n    # print(graph[109])\n    # print(graph[110])\n    # print(graph[111])\n    # print(graph[112])\n    # print(graph[113])\n    # print(graph[114])\n    # print(graph[115])\n    # print(graph[116])\n    # print(graph[117])\n    # print(graph[118])\n    # print(graph[119])\n    # print(graph[120])\n    # print(graph[121])\n    # print(graph[122])\n    # print(graph[123])\n    # print(graph[124])\n    # print(graph[125])\n    # print(graph[126])\n    # print(graph[127])\n    # print(graph[128])\n    # print(graph[129])\n    # print(graph[130])\n    # print(graph[131])\n    # print(graph[132])\n    # print(graph[133])\n    # print(graph[134])\n    # print(graph[135])"
    },
    {
        "number": 4227,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    vertices = {i: [] for i in range(n)}\n    for _ in range(m):\n        a, b = map(int, stdin.split())\n        vertices[a].append(b)\n        vertices[b].append(a)\n    visited = [False]*n\n    result = []\n    def dfs(v, path, visited):\n        visited[v] = True\n        for u in vertices[v]:\n            if visited[u] == False:\n                path.append(u)\n                dfs(u, path, visited)\n                path.pop()\n        return\n    dfs(1, [], visited)\n    if len(result) == 0:\n        print(\"Empty\")\n    else:\n        print(len(result))\n        print(\"\\n\".join(result))\n"
    },
    {
        "number": 4227,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def all_paths(edges: List[List[int]]):\n        # edge case\n        if len(edges) == 1:\n            return [[edges[0][0], edges[0][1]]]\n        \n        # main logic\n        result = []\n        for edge in edges:\n            a_i, b_i = edge[0], edge[1]\n            if a_i == b_i:\n                result.append([edge[0], edge[1]])\n            else:\n                result.extend(all_paths(edges[:edge[0]] + [edge[1]] + all_paths(edges[edge[0]+1:]) + [edge[1]]))\n        \n        return result\n    \n    N, M = map(int, stdin.split())\n    edges = []\n    \n    for _ in range(M):\n        edges.append(list(map(int, stdin.split())))\n    \n    return \"\".join(map(str, all_paths(edges)))\n\n---------------Constraints-----------------\n1\u2264N\u22648\n0\u2264M\u2264N\n1\u2264a_i<b_i\u2264N\na_i and b_i are distinct\na_i and b_i must be self-loops or double edges\nFor each path, a_i and b_i can be from vertex 1 to vertex N\n\n2\u2264N\u2264N\u22121\n2\u2264M\u2264N\u22121\n0\u2264a_i<b_i\u2264N\na_i and b_i must be distinct\na_i and b_i must be visited once\n\n3\u2264M\u2264N\u22121\n0\u2264a_i<b_i\u2264N\na_i and b_i can be from vertex 1 to vertex N\n\n4\u2264N\u2264N\u22121\n4\u2264M\u2264N\u22121\n0\u2264a_i<b_i\u2264N\na_i and b_i can be from vertex 1 to vertex N\n\n5\u2264N\u2264N\u22121\n0\u2264a_i<b_i\u2264N\na_i and b_i can be from vertex 1 to vertex N\n\n6\u2264N\u2264N\u22121\na_i and b_i can be from vertex 1 to vertex N\n\n7\u2264M\u2264N\u22121\n0\u2264a_i<b_i\u2264N\na_i and b_i can be from vertex 1 to vertex N\n\nSample Input\n3 3\n1 2\n1 3\n2 3\n\nSample Output\n2\n\"\"\""
    },
    {
        "number": 4227,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\ndef"
    },
    {
        "number": 4227,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    graph = [[0] * (N + 1) for _ in range(N + 1)]\n\n    for i in range(M):\n        a, b = map(int, stdin.split())\n        graph[a][b] = 1\n        graph[b][a] = 1\n\n    ans = []\n    for k in range(N):\n        if graph[k][k]:\n            ans.append(k)\n            ans += list(map(lambda x: x + 1, ans))\n            for i in range(N):\n                if not graph[i][k]:\n                    ans.pop()\n                    break\n    return''.join(map(str, ans))\n\n:\nN, M = map(int, input().split())\ngraph = [[0] * (N + 1) for _ in range(N + 1)]\nfor i in range(M):\n    a, b = map(int, input().split())\n    graph[a][b] = 1\n    graph[b][a] = 1\nans = []\nfor k in range(N):\n    if graph[k][k]:\n        ans.append(k)\n        ans += list(map(lambda x: x + 1, ans))\n        for i in range(N):\n            if not graph[i][k]:\n                ans.pop()\n                break\nprint(len(ans))\n"
    },
    {
        "number": 4227,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    graph = [list(map(int, input().split())) for _ in range(N)]\n    paths = []\n    for v in range(N):\n        if v not in graph[0]:\n            paths.append(v)\n    for path in paths:\n        for v in range(1, N):\n            if v not in graph[v]:\n                path += \" \"\n    print(paths)\n    return \" \".join(paths)\n\nThe given graph is shown in the following figure:\nThe following two paths satisfy the condition:\ndef"
    },
    {
        "number": 4227,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    edges = stdin.split()\n    edges.sort()\n    print(len(edges))\n    paths = {}\n    for i in range(len(edges)):\n        a, b = edges[i].split(\" \")\n        if a in paths:\n            paths[a].append(b)\n        else:\n            paths[a] = [b]\n    print(len(paths))\n    print(*sorted(paths.keys()))\n\n-----Sample Output-----\n2\n2\n\nThe given graph is shown in the following figure:\nThe following two paths satisfy the condition:\ndef"
    },
    {
        "number": 4227,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\n-  1 2 3\n-  2 3\n-  1 3\n1 2\n2 3\n\n-  1 3\n-  2 3\n-  3 2\n1 2\n2 3\n\n-  1 3\n-  2 3\n-  3 2\n1 3\n2 3\n\nThe following two paths satisfies the condition:\ndef"
    },
    {
        "number": 4227,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n  1. read the input:\n  2. create an undirected graph:\n  3. create a list of all vertices and edges of the graph,\n  4. check whether a path starts from vertex 1:\n  5. add the path to the output:\n  6. return output\n\n'''\n\nimport sys\nimport re\ninput = sys.stdin.readline\n\ndef"
    },
    {
        "number": 4228,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    L = int(stdin[1])\n    \n    def fl(apples):\n        fl_sum = 0\n        for i in apples:\n            fl_sum += i\n        return fl_sum % L\n    \n    # 1. Select a new set of apples for the new flavor of the apple pie.\n    apples = sorted(list(range(n)), key=lambda x: (fl(list(range(x,n))) - fl(list(range(x-L, n))))%L)\n    # 2. Use the new set of apples to find the minimal difference between the current set of apples and the set of remaining apples that would have eaten.\n    apples = sorted(list(set(apples) - set(apples[L:] + apples[:L])))\n    \n    return str(fl(apples))\n'''\n\nclass Solution:\n    def solution(self, n: int, L: int) -> str:\n        def fl(apples):\n            fl_sum = 0\n            for i in apples:\n                fl_sum += i\n            return fl_sum % L\n        # 1. Select a new set of apples for the new flavor of the apple pie.\n        apples = sorted(list(range(n)), key=lambda x: (fl(list(range(x,n))) - fl(list(range(x-L, n))))%L)\n        # 2. Use the new set of apples to find the minimal difference between the current set of apples and the set of remaining apples that would have eaten.\n        apples = sorted(list(set(apples) - set(apples[L:] + apples[:L])))\n        \n        return str(fl(apples))"
    },
    {
        "number": 4228,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    L = 0\n    n = int(stdin.strip().split(' ')[0])\n    for _ in range(n):\n        L += int(stdin.strip().split(' ')[1])\n    if L == 0:\n        return '0'\n    else:\n        res = int(L / (n-1)) + 1\n        return str(res)\nprint(solution(\"5 2\"))"
    },
    {
        "number": 4228,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, L = map(int, stdin.split())\n    num = 0\n    if L == 0:\n        return str(0)\n    if L == 1:\n        return str(L)\n    if L == 2:\n        return str(L*L)\n    if L == 3:\n        return str(L*L*L)\n    for _ in range(n):\n        num += int(stdin)\n    num -= (L*L*L)\n    \n    if num < 0:\n        return \"-\" + solution(stdin)\n    elif num == 0:\n        return str(num)\n    elif num == 1:\n        return str(num)\n    else:\n        return str(num%10 + num//10)"
    },
    {
        "number": 4228,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    N = int(stdin[:len(stdin)//2])\n    L = int(stdin[len(stdin)//2:])\n    result = L\n    for i in range(N):\n        # Find the result of the remaining apples\n        for j in range(L,0,-1):\n            result += j\n            if abs(result) == L:\n                break\n    return str(result)\n\nprint(solution(\"5 2\"))\nprint(solution(\"5 2 4 7 9\"))"
    },
    {
        "number": 4228,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N,L,a,b = map(int,stdin.split())\n    A = [int(i) for i in str(N) if i.isalpha()]\n    B = [int(i) for i in str(L) if i.isalpha()]\n    B.sort()\n    c = sum(B)\n    if len(A)!= c:\n        return 'IMPOSSIBLE'\n    elif len(B) <= 1:\n        return 'IMPOSSIBLE'\n    else:\n        return sum(abs(c - a - b - b-i) for i in range(1,c))\n"
    },
    {
        "number": 4228,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n,L=map(int,stdin.split())\n    A=list(map(int,stdin.split()))\n    nums=0\n    for i in range(n):\n        nums+=A[i]*(n+1-i)\n    nums-=n\n    M=nums\n    for i in range(1,n):\n        M-=A[i]*(n+1-i)\n    if M<=L:\n        return str(M)\n    elif M-L>=n:\n        return '{}+{}+{}={}'.format(L,L+M-n,L+M,M)\n    else:\n        return '{}+{}+{}={}'.format(L,L+M,L-n,L-M)"
    },
    {
        "number": 4228,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    n = int(stdin.strip().split(' ')[0])\n    l = list(map(int, stdin.strip().split(' ')))\n    l.sort()\n    n = len(l)\n\n    # Optimized Solution\n    answer = sum(l[0:n])\n    for i in range(1, n):\n        answer -= l[i] + l[i-1]\n\n    return str(answer)\n\n###  22/12/2021  ###\n\n###  23/12/2021  ###"
    },
    {
        "number": 4228,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, L = map(int, stdin.split())\n    result = 0\n    if L < 10:\n        result = N-1\n        return str(result)\n    return str(N-1+N-1-L)\n"
    },
    {
        "number": 4228,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    L = int(stdin.strip())\n    numbers = [int(x) for x in stdin.strip().split()]\n    number_n = [int(x) for x in sorted(set(numbers))]\n    answer = min(number_n) + max(number_n) - L\n    return str(answer)\n"
    },
    {
        "number": 4228,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # set the size of the matrix to be a square matrix\n    # create the matrix from the string\n    # calculate the rows, columns, and elements in the matrix\n    # sum the elements of each row, column, and element in the matrix\n    # return the minimum element in the matrix\n    n, l, d = list(map(int, stdin.split()))\n    mat = [[0] * l for i in range(l)]\n    for i in range(n):\n        mat[i][i] = 1\n    for i in range(l):\n        for j in range(l):\n            mat[j][i] = d\n            for k in range(i+1, l):\n                mat[j][k] += mat[j][k-1]\n            for k in range(i-1, -1, -1):\n                mat[j][k] += mat[j][k+1]\n    # calculate the minimal element of each row\n    # i.e., the sum of all elements in each row\n    # return the minimum element of the matrix\n    ans = min(mat[i][j] for i in range(l) for j in range(l))\n    return str(ans)\n"
    },
    {
        "number": 4229,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    fizz = 1\n    buzz = 1\n    answer = 0\n    while n:\n        if (n & 1) == 1:\n            fizz = fizz + 1\n            answer = answer + fizz\n        else:\n            buzz = buzz + 1\n            answer = answer + buzz\n        n = n >> 1\n    print(answer)\n    return str(answer)\n"
    },
    {
        "number": 4229,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    sum_of_fizz_buzz = 0\n    for i in range(1,N+1):\n        if i % 3 == 0:\n            sum_of_fizz_buzz += i\n        elif i % 5 == 0:\n            sum_of_fizz_buzz += i\n    return str(sum_of_fizz_buzz)\n\n'''\n\nfrom sys import stdin\n\ndef"
    },
    {
        "number": 4229,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    lst = list(map(int, stdin.split()))\n    solution = []\n    for i in lst:\n        if i % 3 == 0 and i % 5!= 0:\n            solution.append(i)\n        elif i % 5 == 0 and i % 3!= 0:\n            solution.append(i)\n        elif i % 3 == 0 and i % 5 == 0:\n            solution.append(i)\n        else:\n            pass\n    return \"\".join(map(str, solution))\n\n'Sample Input 1:\n4\nSample Output 1:\n1\nSample Input 2:\n6\nSample Output 2:\n1\nSample Input 3:\n15\nSample Output 3:\n60\n\nThe first 15 terms of the FizzBuzz sequence are:\n1,2,\\mbox{Fizz},4,\\mbox{Buzz},\\mbox{Fizz},7,8,\\mbox{Fizz},\\mbox{Buzz},11,\\mbox{Fizz},13,14,\\mbox{FizzBuzz}\nAmong them, numbers are 1,2,4,7,8,11,13,14, and the sum of them is 60.\ndef"
    },
    {
        "number": 4229,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    fizz = []\n    buzz = []\n    answer = 0\n    for i in range(1, N+1):\n        if i % 3 == 0 and i % 5!= 0:\n            fizz.append(i)\n        elif i % 5 == 0 and i % 3!= 0:\n            buzz.append(i)\n        elif i % 3!= 0 and i % 5 == 0:\n            fizz.append(i)\n            buzz.append(i)\n        elif i % 3 == 0 and i % 5 == 0:\n            fizz.append(i)\n            buzz.append(i)\n        elif i % 5 == 0 and i % 3!= 0:\n            buzz.append(i)\n            fizz.append(i)\n        else:\n            answer += i\n    print(answer)\n    return str(answer)\n    # return '\\n'.join([str(fizz), '\\n'.join([str(buzz) for _ in fizz])])\n"
    },
    {
        "number": 4229,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    for _ in range(int(stdin)):\n        N = int(stdin.strip())\n        if N%3==0 and N%5==0:\n            print(N)\n            break\n        else:\n            print(N)\n            print(N//3,N//5)\n            print(N%3,N%5)"
    },
    {
        "number": 4229,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    numbers = []\n    for i in range(N):\n        numbers.append(int(stdin[i]))\n    return ''.join(str(a) for a in numbers)\n\n\n\"\"\"\nRuntime: 56 ms, faster than 41.84% of Python3 online submissions for Fizz Buzz.\nMemory Usage: 29.5 MB, less than 98.18% of Python3 online submissions for Fizz Buzz.\n\"\"\"\n"
    },
    {
        "number": 4229,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    _fizz_buzz = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31,\n                  33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59,\n                  61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87,\n                  89, 91, 93, 95, 97, 99]\n    answer = []\n    for _ in range(N):\n        answer.append(_fizz_buzz.pop(0))\n    answer.sort()\n    return ''.join(str(_ + 1) for _ in answer)\n"
    },
    {
        "number": 4229,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join(str(int(i)+1) for i in stdin.split())\n"
    },
    {
        "number": 4229,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    sequence = []\n    for i in range(N):\n        sequence.append(i+1)\n        sequence.append(str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int(str(i+1) + str(int("
    },
    {
        "number": 4229,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    def fizz_buzz(n: int) -> str:\n        if n % 3 == 0 and n % 5 == 0:\n            return \"FizzBuzz\"\n        elif n % 3 == 0:\n            return \"Fizz\"\n        elif n % 5 == 0:\n            return \"Buzz\"\n        else:\n            return str(n)\n\n    for i in range(1,N+1):\n        print(fizz_buzz(i), end=\" \")\n    print()\n    return \"Sum = {}\".format(sum(map(int,str(N).split())))\n"
    },
    {
        "number": 4230,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n  n, *p = map(int, stdin.split())\n  if sum(p) < n:\n    return '?'\n  idx = p.index(min(p))\n  if idx == 0:\n    return str(n)\n  if idx == len(p):\n    return '?'\n  return str(n - sum(p[:idx]))\n"
    },
    {
        "number": 4230,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    t = list(map(int, stdin.split()))\n    answer = \"8\"\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if t[i] - t[j] < 0:\n                answer = min(answer, t[i]+t[j])\n    return answer"
    },
    {
        "number": 4230,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin.split()[1])\n    n = int(stdin.split()[0])\n    p = [x]\n    while x > 1:\n        x = p[-1] - p[-2]\n        p.append(x)\n    print(min(p))\n"
    },
    {
        "number": 4230,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin.split(' ')[0])\n    N = int(stdin.split(' ')[1])\n    p_1 = list(map(int, stdin.split(' ')))\n    p_2 = [int(p) for p in list(str(X))]\n    p_1.sort()\n    p_2.sort()\n    \n    for i in range(N):\n        if i == 0:\n            if p_1[i]!= p_2[i]:\n                print(p_2[i])\n                break\n        elif p_1[i] == p_2[i]:\n            print(p_1[i])\n            break\n    else:\n        print(-1)\n"
    },
    {
        "number": 4230,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n  \n  X = int(stdin.split()[-1])\n  N = int(stdin.split()[0])\n  arr = [int(x) for x in stdin.split()[1:-1]]\n  \n  answer = None\n  for i in range(N):\n    val = arr[i]\n    found = False\n    for j in range(N-1, i, -1):\n      if abs(val - arr[j]) < abs(val - X):\n        answer = arr[j]\n        found = True\n        break\n    if not found:\n      answer = arr[i]\n  \n  if answer:\n    print(answer)\n  else:\n    print(-1)\n"
    },
    {
        "number": 4230,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    X, N = map(int, stdin.split())\n    p_1, p_2, p_3 = map(int, stdin.split())\n    answer = (X - 1) * (N - 1) + (p_1 - 1) * p_2 * p_3\n    return str(answer)\n"
    },
    {
        "number": 4230,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split())\n    x = map(int, stdin.split())\n    s = sorted(x)\n    print(s[n//2])\n"
    },
    {
        "number": 4230,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str(min(map(int,stdin.split())))\n\"\"\"\n\nimport sys\nfrom itertools import permutations\n\nn, p = map(int, sys.stdin.readline().split())\n\nfor k in range(p + 1):\n    m = len(permutations(list(map(str, sys.stdin.readline().split()))))\n    print(min(m, int(n ** k / (p ** (m - 1 - k))))"
    },
    {
        "number": 4230,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n  N, p = map(int, stdin.split())\n  lst = list(map(int, stdin.split()))\n  lst.sort()\n  ans = []\n  for i in lst:\n    if abs(i - lst[0]) < abs(p - lst[-1]):\n      ans.append(lst[0])\n    else:\n      ans.append(lst[-1])\n  return \"\".join(map(str, ans))\n'''\n\ndef"
    },
    {
        "number": 4230,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    n = len(str(X))\n    candidates = []\n    for i in range(1,n+1):\n        candidates.append(i)\n    for i in range(1,n+1):\n        if i not in candidates:\n            candidates.append(i)\n    l = len(candidates)\n    #print(candidates)\n    candidates.sort()\n    #print(candidates)\n    #print(l)\n    #print(candidates[-1])\n    #print(candidates[-2])\n    #print(candidates[-3])\n    ans = candidates[-1] - candidates[-2] - candidates[-3]\n    #print(ans)\n    return str(ans)\n"
    },
    {
        "number": 4231,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Add your code here\n    h, w = list(map(int, stdin.split()))\n    if h > w:\n        print(0)\n    else:\n        h = w\n        print(1)\n    return str(h * w)\n"
    },
    {
        "number": 4231,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n  n = int(stdin)\n  h = 1\n  w = 1\n  if n == 1:\n    return 1\n  for i in range(n):\n    if i == 0:\n      h = 1\n    if i == 1:\n      w = 1\n    h *= n - 1\n    w *= n - 1\n    if h > w:\n      return 2\n  return 1\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4231,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, H, W = map(int, stdin.split())\n    result = 1\n    for _ in range(N):\n        row = list(map(int, stdin.split()))\n        result *= row.count(1)\n    return str(result)\n\n\nInput:\n2 3\n1 1\n1 1\n\nOutput:\n4\n\nExplanation:\nThere are 4 white cells that will remain.\n\"\"\"\n\ndef"
    },
    {
        "number": 4231,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n,h,w,k = list(map(int,stdin.split()))\n    if n == 1 or k == 1:\n        return \"1\"\n    if h < 1 or w < 1:\n        return \"0\"\n    black = []\n    white = []\n    for i in range(n):\n        row = list(map(int,stdin.split()))\n        for j in range(k):\n            if row[j] == 1:\n                black.append(j)\n            if row[j] == 2:\n                white.append(j)\n    answer = len(black) + len(white)\n    return str(answer)\n"
    },
    {
        "number": 4231,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s, N, h, w = list(map(int, stdin.split()))\n    if s == 0 or N == 0:\n        return '0'\n    if s < 0 or N < 0:\n        return '0'\n    if h <= 0 or w <= 0:\n        return '0'\n    ans = 0\n    h1, w1 = h-1, w-1\n    for i in range(N):\n        ans += sum(map(lambda x: x == 'b', list(map(lambda x: x[i], list(map(lambda x: list(map(lambda y: y[i], x[:w] + x[w:])), list(map(lambda y: y[i], list(map(lambda x: list(map(lambda y: y[i], x[:h]) + x[h:])), list(map(lambda y: y[i], list(map(lambda x: list(map(lambda y: y[i], x[:h1] + x[h1:])), list(map(lambda y: y[i], list(map(lambda y: y[i], x[:w1] + x[w1:])), list(map(lambda y: y[i], list(map(lambda y: y[i], x[:h1] + x[h1:])), list(map(lambda y: y[i], list(map(lambda y: y[i], x[:w1] + x[w1:])), list(map(lambda y: y[i], list(map(lambda y: y[i], x[:h1] + x[h1:])), list(map(lambda y: y[i], list(map(lambda y: y[i], x[:h1] + x[h1:])), list(map(lambda y: y[i], list(map(lambda y: y[i], x[:h1] + x[h1:])), list(map(lambda y: y[i], list(map(lambda y: y[i], x[:h1] + x[h1:])), list(map(lambda y: y[i], list(map(lambda y: y[i], x[:h1] + x[h1:])), list(map(lambda y: y[i], list(map(lambda y: y[i], x[:h1] + x[h1:])), list(map(lambda y: y[i], list(map(lambda y: y[i], x[:h1] + x[h1:])), list(map(lambda y: y[i], list(map(lambda y: y[i], x[:h1] + x[h1:])), list(map(lambda y: y[i], list(map(lambda y: y[i], x[:h1] + x[h1:])), list(map(lambda y: y[i], list(map(lambda y: y[i], x[:h1] + x[h1:])), list(map(lambda y: y[i], list(map(lambda y: y[i], x[:h1] + x[h1:])), list(map(lambda y: y[i], list(map(lambda y: y[i], x[:h1] + x[h1:])), list(map(lambda y: y[i], list(map(lambda y: y[i], x[:h1] + x[h1:])), list(map(lambda y: y[i], list(map(lambda y: y[i], x[:h1] + x[h1:])), list(map(lambda y: y[i], list(map(lambda y: y[i], x[:h1] + x[h1:])), list(map(lambda y: y[i], list(map(lambda y: y[i], x[:h1] + x[h1:])), list(map(lambda y: y[i], list(map(lambda y: y[i], x[:h1] + x[h1:])), list(map(lambda y: y[i], list(map(lambda y: y[i], x[:h1] + x[h1:])), list(map(lambda y: y[i], list(map(lambda y: y[i], x[:h1] + x[h1:])), list(map(lambda y: y[i], list(map(lambda y: y[i], x[:h1] + x[h1:])), list(map(lambda y: y[i], list(map(lambda y: y[i], x[:h1] + x[h1:])), list(map(lambda y: y[i], list(map(lambda y: y[i], x[:h1] + x[h1:])), list(map(lambda y: y[i], list(map(lambda y: y[i], x[:h1] + x[h1:])), list(map(lambda y: y[i], list(map(lambda y: y[i], x[:h1] + x[h1:])), list(map(lambda y: y[i], list(map(lambda y: y[i], x[:h1] + x[h1:])), list(map(lambda y: y[i], list(map(lambda y: y[i], x[:h1] + x[h1:])), list(map(lambda y: y[i], list(map(lambda y: y[i], x[:h1] + x[h1:])), list(map(lambda y: y[i], list(map(lambda y: y[i], x[:h1] + x[h1:])), list(map(lambda y: y[i], list(map(lambda y: y[i], x[:h1] + x[h1:])), list(map(lambda y: y[i], list(map(lambda y: y[i], x[:h1] + x[h1:])), list(map(lambda y: y[i], list(map(lambda y: y[i], x[:h1] + x[h1:])), list(map(lambda y: y[i], list(map(lambda y: y[i], x[:h1] + x[h1:])), list(map(lambda y: y[i], list(map(lambda y: y[i], x[:h1] + x[h1:])), list(map(lambda y: y[i], list(map(lambda y: y[i], x[:h1] + x[h1:])), list(map(lambda y: y[i], list(map(lambda y: y[i], x[:h1] + x[h1:])), list(map(lambda y: y[i], list(map(lambda y: y[i], x[:h1] + x[h1:])), list(map(lambda y: y[i], list(map(lambda y: y[i], x[:h1] + x[h1:])), list(map(lambda y: y[i], list(map(lambda y: y[i], x[:h1] + x[h1:])), list(map(lambda y: y[i], list(map(lambda y: y[i], x[:h1] + x[h1:])), list(map(lambda y: y[i], list(map(lambda y: y[i], x[:h1] + x[h1:])), list(map(lambda y: y[i], list(map(lambda y: y[i], x[:h1] + x[h1:])"
    },
    {
        "number": 4231,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    h, w = list(map(int, stdin.split()))\n    return''.join(map(str, solution(h, w)))\n\ndef"
    },
    {
        "number": 4231,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    pass"
    },
    {
        "number": 4231,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    return ''\n"
    },
    {
        "number": 4231,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    rows, columns = map(int, stdin.split())\n    return solution(rows, columns)\n"
    },
    {
        "number": 4231,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    rows = 0\n    columns = 0\n    for line in stdin:\n        length = len(line)\n        if length > rows:\n            rows = length\n        if length > columns:\n            columns = length\n    return str(len(str(rows*columns)))\n\nInput: H W\nOutput: \"2\"\nExplanation: 2 white cells will remain in black.\n\nInput: H W\nOutput: \"1\"\nExplanation: 1 white cell will remain in black.\n\nInput: 2 2\nOutput: \"1\"\nExplanation: 1 white cell will remain in black.\n\nInput: 2 3\nOutput: \"1\"\nExplanation: 1 white cell will remain in black.\n\nInput: 2 4\nOutput: \"2\"\nExplanation: 2 white cells will remain in black.\n\nInput: 2 5\nOutput: \"1\"\nExplanation: 2 white cells will remain in black.\n\nInput: 2 6\nOutput: \"1\"\nExplanation: 2 white cells will remain in black.\n\nInput: 2 7\nOutput: \"2\"\nExplanation: 2 white cells will remain in black.\n\nInput: 2 8\nOutput: \"1\"\nExplanation: 1 white cell will remain in black.\n\nInput: 2 9\nOutput: \"1\"\nExplanation: 1 white cell will remain in black.\n\nInput: 2 10\nOutput: \"2\"\nExplanation: 2 white cells will remain in black.\n\nInput: 2 11\nOutput: \"1\"\nExplanation: 2 white cells will remain in black.\n\nInput: 2 12\nOutput: \"1\"\nExplanation: 2 white cells will remain in black.\n\nInput: 2 13\nOutput: \"2\"\nExplanation: 1 white cell will remain in black.\n\nInput: 2 14\nOutput: \"1\"\nExplanation: 1 white cell will remain in black.\n\nInput: 2 15\nOutput: \"2\"\nExplanation: 2 white cells will remain in black.\n\nInput: 2 16\nOutput: \"1\"\nExplanation: 1 white cell will remain in black.\n\nInput: 2 17\nOutput: \"1\"\nExplanation: 2 white cells will remain in black.\n\nInput: 2 18\nOutput: \"1\"\nExplanation: 1 white cell will remain in black.\n\nInput: 2 19\nOutput: \"1\"\nExplanation: 1 white cell will remain in black.\n\nInput: 2 20\nOutput: \"1\"\nExplanation: 1 white cell will remain in black.\n\nInput: 2 21\nOutput: \"1\"\nExplanation: 1 white cell will remain in black.\n\nInput: 2 22\nOutput: \"2\"\nExplanation: 2 white cells will remain in black.\n\nInput: 2 23\nOutput: \"1\"\nExplanation: 1 white cell will remain in black.\n\nInput: 2 24\nOutput: \"1\"\nExplanation: 2 white cells will remain in black.\n\nInput: 2 25\nOutput: \"2\"\nExplanation: 1 white cell will remain in black.\n\nInput: 2 26\nOutput: \"1\"\nExplanation: 2 white cells will remain in black.\n\nInput: 2 27\nOutput: \"1\"\nExplanation: 2 white cells will remain in black.\n\nInput: 2 28\nOutput: \"1\"\nExplanation: 2 white cells will remain in black.\n\nInput: 2 29\nOutput: \"1\"\nExplanation: 2 white cells will remain in black.\n\nInput: 2 30\nOutput: \"2\"\nExplanation: 2 white cells will remain in black.\n\nInput: 2 31\nOutput: \"1\"\nExplanation: 1 white cell will remain in black.\n\nInput: 2 32\nOutput: \"1\"\nExplanation: 1 white cell will remain in black.\n\nInput: 2 33\nOutput: \"1\"\nExplanation: 2 white cells will remain in black.\n\nInput: 2 34\nOutput: \"2\"\nExplanation: 2 white cells will remain in black.\n\nInput: 2 35\nOutput: \"1\"\nExplanation: 1 white cell will remain in black.\n\nInput: 2 36\nOutput: \"1\"\nExplanation: 1 white cell will remain in black.\n\nInput: 2 37\nOutput: \"2\"\nExplanation: 2 white cells will remain in black.\n\nInput: 2 38\nOutput: \"1\"\nExplanation: 1 white cell will remain in black.\n\nInput: 2 39\nOutput: \"1\"\nExplanation: 2 white cells will remain in black.\n\nInput: 2 40\nOutput: \"1\"\nExplanation: 1 white cell will remain in black.\n\nInput: 2 41\nOutput: \"1\"\nExplanation: 1 white cell will remain in black.\n\nInput: 2 42\nOutput: \"1\"\nExplanation: 1 white cell will remain in black.\n\nInput: 2 43\nOutput: \"1\"\nExplanation: 1 white cell will remain in black.\n\nInput: 2 44\nOutput: \"2\"\nExplanation: 2 white cells will remain in black.\n\nInput: 2 45\nOutput: \"1\"\nExplanation: 1 white cell will remain in black.\n\nInput: 2 46\nOutput: \"1\"\nExplanation: 1 white cell will remain in black.\n\nInput: 2 47\nOutput: \"1\"\nExplanation: 1 white cell will remain in black.\n\nInput: 2 48\nOutput: \"1\"\nExplanation: 1 white cell will remain in black.\n\nInput: 2 49\nOutput: \"1\"\nExplanation: 1 white cell will remain in black.\n\nInput: 2 50\nOutput: \"1\"\nExplanation: 1 white cell will remain in black.\n\nInput: 2 51\nOutput: \"1\"\nExplanation: 1 white cell will remain in black.\n\nInput: 2 52\nOutput: \"1\"\nExplanation: 1 white cell will remain in black.\n\nInput: 2 53\nOutput: \"1\"\nExplanation: 1 white cell will remain in black.\n\nInput: 2 54\nOutput: \"1\"\nExplanation: 1 white cell will remain in black.\n\nInput: 2 55\nOutput: \"1\"\nExplanation: 1 white cell will remain in black.\n\nInput: 2 56\nOutput: \"1\"\nExplanation: 1 white cell will remain in black.\n\nInput: 2 57\nOutput: \"2\"\nExplanation: 1 white cell will remain in black.\n\nInput: 2 58\nOutput: \"1\"\nExplanation: 1 white cell will remain in black.\n\nInput: 2 59\nOutput: \"1\"\nExplanation: 1 white cell will remain in black.\n\nInput: 2 60\nOutput: \"1\"\nExplanation: 1 white cell will remain in black.\n\nInput: 2 61\nOutput: \"1\"\nExplanation: 1 white cell will remain in black.\n\nInput: 2 62\nOutput: \"1\"\nExplanation: 1 white cell will remain in black.\n\nInput: 2 63\nOutput: \"1\"\nExplanation: 1 white cell will remain in black.\n\nInput: 2 64\nOutput: \"1\"\nExplanation: 1 white cell will remain in black.\n\nInput: 2 65\nOutput: \"1\"\nExplanation: 1 white cell will remain in black.\n\nInput: 2 66\nOutput: \"1\"\nExplanation: 1 white cell will remain in black.\n\nInput: 2 67\nOutput: \"1\"\nExplanation: 1 white cell will remain in black.\n\nInput: 2 68\nOutput: \"1\"\nExplanation: 1 white cell will remain in black.\n\nInput: 2 69\nOutput: \"1\"\nExplanation: 1 white cell will remain in black.\n\nInput: 2 70\nOutput: \""
    },
    {
        "number": 4232,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    x = int(k)\n    for i in range(1,n+1):\n        if sum(a[:i]) <= x:\n            print(a[:i])\n            return \"\"\n    return \"-1\""
    },
    {
        "number": 4232,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a = sorted(a)\n    x = int(str(k) * n)\n    if x not in a:\n        print(-1)\n    else:\n        print(x)\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= k <= n\n\n------Time complexity----\n\nO(n log n)\n\nO(n)\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4232,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split(' ')\n    n = int(input[0])\n    k = int(input[1])\n    a = map(int, input[2:])\n    print(int(f'{k}' in set(a)))\n    \n"
    },
    {
        "number": 4232,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n,k = [int(x) for x in stdin.split()]\n    a = list(map(int,stdin.split()))\n    \n    answer = -1\n    \n    \n    for i in range(1,k+1):\n        for j in range(i,0,-1):\n            if a[j] < a[j-1]:\n                a[j],a[j-1] = a[j-1],a[j]\n                answer = max(answer,a[j])\n                a[j],a[j-1] = a[j-1],a[j]\n    if answer == -1:\n        return '-1'\n    return str(answer)\n    \n    \n    \n    \n    "
    },
    {
        "number": 4232,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    x = a[k-1] - a[k-2]\n    if x < 0:\n        return '-'\n    else:\n        return x\n"
    },
    {
        "number": 4232,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a_1, a_2, n, k = map(int, stdin.split())\n    \n    a_1 = list(map(int, stdin.split()))\n    a_2 = list(map(int, stdin.split()))\n    \n    if k > len(a_2):\n        return \"-1\"\n    else:\n        for i in range(n):\n            if a_1[i] >= a_2[i]:\n                a_1[i] -= a_2[i]\n                \n        for i in range(n):\n            if a_2[i] >= a_1[i]:\n                a_2[i] -= a_1[i]\n        \n        if a_1[n-1] >= k:\n            return str(a_1[n-1])\n        else:\n            return str(a_2[n-1])\n    \n    "
    },
    {
        "number": 4232,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    for i in range(1, n):\n        if k >= a[i]:\n            k -= a[i]\n        else:\n            return '-1'\n    return str(k)\n"
    },
    {
        "number": 4232,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    if n < 2 * k:\n        return \"-1\"\n    elif n % 2 == 0 and k <= n / 2:\n        return sum(x for x in a if x <= k)\n    elif n % 2 == 1 and k <= n / 2:\n        return sum(x for x in a if x >= k)\n    else:\n        return \"-\"\n\nprint(solution(\"7 4\"))\n"
    },
    {
        "number": 4232,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    seq = list(map(int, stdin.split()))\n    return ''.join(map(str, sorted(set(seq)-set(k))))"
    },
    {
        "number": 4232,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    seq = list(map(int, stdin.split()))\n    m = (n - 1) // k\n    seq = [seq[i] for i in range(m)]\n    return \"\".join(map(str, seq[::-1]))\n    \"\"\"\n    if n < 2 or k < 1:\n        return \"-1\"\n    if not seq:\n        return \"-\"\n    for i in range(len(seq) - 1):\n        if seq[i] < seq[i + 1]:\n            return str(seq[i]) + \" \" + str(seq[i + 1])\n    return \"-1\"\n    \"\"\"\n    if n == 0:\n        return \"-\"\n    if k == 0:\n        return \"-\"\n    if n == 1:\n        return \"1\"\n    if k == 1:\n        return str(n)\n    num = 1\n    while n - 1 - (num * k) > 0:\n        num += 1\n    return str(num) + \" \" + str(n - 1 - (num * k))\n    \"\"\"\n    \"\"\"\n    if n == 0:\n        return \"-\"\n    if k == 0:\n        return \"-\"\n    if n == 1:\n        return str(n)\n    if k == 1:\n        return str(n)\n    if n == 2:\n        return str(n)\n    if k == 2:\n        return str(n)\n    return str(n)\n    \"\"\"\n    \"\"\"\n    if n == 1:\n        return \"1\"\n    if k == 1:\n        return str(n)\n    if n == 2:\n        return str(n)\n    if k == 2:\n        return str(n)\n    if n == 3:\n        return str(n)\n    if k == 3:\n        return str(n)\n    if n == 4:\n        return str(n)\n    if k == 4:\n        return str(n)\n    if n == 5:\n        return str(n)\n    if k == 5:\n        return str(n)\n    if n == 6:\n        return str(n)\n    if k == 6:\n        return str(n)\n    if n == 7:\n        return str(n)\n    if k == 7:\n        return str(n)\n    if n == 8:\n        return str(n)\n    if k == 8:\n        return str(n)\n    if n == 9:\n        return str(n)\n    if k == 9:\n        return str(n)\n    if n == 10:\n        return str(n)\n    if k == 10:\n        return str(n)\n    if n == 11:\n        return str(n)\n    if k == 11:\n        return str(n)\n    if n == 12:\n        return str(n)\n    if k == 12:\n        return str(n)\n    if n == 13:\n        return str(n)\n    if k == 13:\n        return str(n)\n    if n == 14:\n        return str(n)\n    if k == 14:\n        return str(n)\n    if n == 15:\n        return str(n)\n    if k == 15:\n        return str(n)\n    if n == 16:\n        return str(n)\n    if k == 16:\n        return str(n)\n    if n == 17:\n        return str(n)\n    if k == 17:\n        return str(n)\n    if n == 18:\n        return str(n)\n    if k == 18:\n        return str(n)\n    if n == 19:\n        return str(n)\n    if k == 19:\n        return str(n)\n    if n == 20:\n        return str(n)\n    if k == 20:\n        return str(n)\n    if n == 21:\n        return str(n)\n    if k == 21:\n        return str(n)\n    if n == 22:\n        return str(n)\n    if k == 22:\n        return str(n)\n    if n == 23:\n        return str(n)\n    if k == 23:\n        return str(n)\n    if n == 24:\n        return str(n)\n    if k == 24:\n        return str(n)\n    if n == 25:\n        return str(n)\n    if k == 25:\n        return str(n)\n    if n == 26:\n        return str(n)\n    if k == 26:\n        return str(n)\n    if n == 27:\n        return str(n)\n    if k == 27:\n        return str(n)\n    if n == 28:\n        return str(n)\n    if k == 28:\n        return str(n)\n    if n == 29:\n        return str(n)\n    if k == 29:\n        return str(n)\n    if n == 30:\n        return str(n)\n    if k == 30:\n        return str(n)\n    if n == 31:\n        return str(n)\n    if k == 31:\n        return str(n)\n    if n == 32:\n        return str(n)\n    if k == 32:\n        return str(n)\n    if n == 33:\n        return str(n)\n    if k == 33:\n        return str(n)\n    if n == 34:\n        return str(n)\n    if k == 34:\n        return str(n)\n    if n == 35:\n        return str(n)\n    if k == 35:\n        return str(n)\n    if n == 36:\n        return str(n)\n    if k == 36:\n        return str(n)\n    if n == 37:\n        return str(n)\n    if k == 37:\n        return str(n)\n    if n == 38:\n        return str(n)\n    if k == 38:\n        return str(n)\n    if n == 39:\n        return str(n)\n    if k == 39:\n        return str(n)\n    if n == 40:\n        return str(n)\n    if k == 40:\n        return str(n)\n    if n == 41:\n        return str(n)\n    if k == 41:\n        return str(n)\n    if n == 42:\n        return str(n)\n    if k == 42:\n        return str(n)\n    if n == 43:\n        return str(n)\n    if k == 43:\n        return str(n)\n    if n == 44:\n        return str(n)\n    if k == 44:\n        return str(n)\n    if n == 45:\n        return str(n)\n    if k == 45:\n        return str(n)\n    if n == 46"
    },
    {
        "number": 4233,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def star(n, m, d):\n        if n * m >= n * m:\n            return 0\n        if n == 0 and m == 0:\n            return 0\n        if n == m:\n            return 2 * d\n        if n < m:\n            return 0\n        if n == 0 and m == 0:\n            return 1\n        if n * m >= n * m:\n            return 2\n        if n == 0:\n            return 2 * d\n        if n == m:\n            return 2 * d\n        if n == 0:\n            return 1\n        return 1 + star(n - 1, m, d) + star(n, m - 1, d)\n    for line in stdin:\n        n, m, d = map(int, line.split())\n        print(star(n, m, d))\n    return 0\n\n\n-----Brute force approach-----\n\ndp[i][j][k] means dp[i][j][k] = dp[i-1][j][k-1] + dp[i][j-1][k-1] + dp[i][j][k+1] + dp[i][j-1][k+1]\n\ndp[n][m][d] means dp[n][m][d] = dp[n-1][m][d-1] + dp[n][m-1][d-1] + dp[n][m][d+1] + dp[n][m-1][d+1]\n\n\ndef"
    },
    {
        "number": 4233,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4233,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    grid = []\n    for line in stdin.split():\n        grid.append(line)\n    n, m = len(grid), len(grid[0])\n    answer = n * m\n    # print(n, m)\n    for row in grid:\n        s = [0] * m\n        for i in range(n):\n            for j in range(m):\n                if row[i] == '*':\n                    s[j] = s[j] + 1\n        # print(row, s)\n        s =''.join(map(str, s))\n        answer = min(answer, len(s))\n    return str(answer)\n\n\ndef"
    },
    {
        "number": 4233,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    n, m = map(int, stdin.split())\n    star_size = m ** 2\n    if star_size < n * m:\n        return \"-1\"\n    elif n * m == star_size:\n        return str(star_size)\n    else:\n        return str(star_size ** 2)\n\n\n\nInput\n6 8\n....*...\n...**...\n..*****.\n...**...\n....*...\n........\nOutput\n3\n3 4 1\n3 5 2\n3 6 1\n3 7 1\n3 8 1\n3 9 1\n3 10 1\n3 11 1\n3 12 1\n3 13 1\n3 14 1\n3 15 1\n\nOutput\n3\n2 2 1\n3 3 1\n3 4 1\n3 5 2\n3 6 1\n3 7 1\n3 8 1\n3 9 1\n3 10 1\n3 11 1\n3 12 1\n3 13 1\n3 14 1\n3 15 1\n3 16 1\n3 17 1\n3 18 1\n\n7 9\n...*...\n..*****.\n..**.\n\n7.6\n...*...\n.*..*..\n.*....*\n.**..*\n.**..*\n.**..*\n..*****.\n..*****.\n\nOutput\n3\n2 2 1\n3 3 1\n3 4 1\n3 5 2\n3 6 1\n3 7 1\n3 8 1\n3 9 1\n3 10 1\n3 11 1\n3 12 1\n3 13 1\n3 14 1\n3 15 1\n3 16 1\n3 17 1\n3 18 1\n\n6\n5\n...*...\n.*..*..\n.**..*\n.**..*\n.**..*\n..*****.\n..*****.\n\nOutput\n3\n2 2 1\n3 3 1\n3 4 1\n3 5 2\n3 6 1\n3 7 1\n3 8 1\n3 9 1\n3 10 1\n3 11 1\n3 12 1\n3 13 1\n3 14 1\n3 15 1\n3 16 1\n3 17 1\n3 18 1\n3 19 1\n3 20 1\n\n\"\"\""
    },
    {
        "number": 4233,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    i, j = 0, 0\n    while j < len(lines):\n        lst = lines[i].split()\n        i += 1\n        j += 1\n        for _ in range(len(lst)):\n            if len(lst[j]) == 0:\n                continue\n            if lst[j][0] == '*':\n                k = int(lst[j][1:])\n                if k < 0 or k > n or k % m!= 0:\n                    return \"-1\"\n                if j > 0 and lines[j - 1][i - 1] == '.':\n                    lines[j - 1][i - 1] = '*'\n                if j < len(lines) - 1 and lines[j + 1][i - 1] == '.':\n                    lines[j + 1][i - 1] = '*'\n                if i < len(lines) - 1 and lines[j - 1][i + 1] == '.':\n                    lines[j - 1][i + 1] = '*'\n                if i > 0 and lines[j - 1][i - 1] == '.':\n                    lines[j - 1][i - 1] = '*'\n                if j < len(lines) - 1 and lines[j + 1][i + 1] == '.':\n                    lines[j + 1][i + 1] = '*'\n    return''.join(lines)\n"
    },
    {
        "number": 4233,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    s = [input() for _ in range(n)]\n    s = ['.' + ''.join(s[i][j] for j in range(m)) for i in range(n)]\n    s.insert(0, '*')\n    s.append('*')\n    s.append('.')\n    s.append('*')\n    return ''.join(s)\n\nprint(solution(\"6 8\\n....*...\\n...**...\\n..*****.\\n...**...\\n....*...\\n........\\n\"))\n"
    },
    {
        "number": 4233,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    from itertools import permutations\n    \n    s = input()\n    \n    for i in range(len(s)):\n        for k in permutations(s, i):\n            if \"*\" not in k:\n                break\n        else:\n            return \"-1\"\n        \n    return \"\".join(k)\n\nsolution(\"5 5\")\n"
    },
    {
        "number": 4233,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    grid = [list(stdin.split()) for _ in range(n)]\n    visited = [[[0 for _ in range(m)] for _ in range(n)] for _ in range(n)]\n\n    def dfs(x, y, index, size):\n        for dx, dy in direction:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < m and not visited[nx][ny][index]:\n                visited[nx][ny][index] = 1\n                dfs(nx, ny, index + 1, size)\n\n    def bfs(x, y, index, size):\n        queue = [(x, y, index, size)]\n        visited[x][y][index] = 1\n        while queue:\n            x, y, index, size = queue.pop(0)\n            for dx, dy in direction:\n                nx, ny = x + dx, y + dy\n                if 0 <= nx < n and 0 <= ny < m and not visited[nx][ny][index]:\n                    queue.append((nx, ny, index + 1, size))\n                    visited[nx][ny][index + 1] = visited[x][y][index] + 1\n\n    direction = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    ans = 0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                bfs(i, j, 1, 1)\n                if ans > 1:\n                    return '-1'\n                else:\n                    dfs(i, j, 0, 1)\n                    if ans > 1:\n                        return '-1'\n                    else:\n                        dfs(i, j, 0, 2)\n                        ans = max(ans, ans + 2)\n    if ans > 1:\n        return '-1'\n    else:\n        return ans\n\n\n5 4\n**.\n**..\n**.\n**.\n**.\n**.\n\n5 5\n.*...\n.**.\n.**.\n.*..\n.**.\n.**.\n\n5 5\n*.*\n*...\n*.**\n*..\n*..\n*..\n*..\n\n5 5\n**.\n**.\n**.\n**.\n**.\n\n5 5\n**.\n**.\n**.\n**.\n**.\n\n5 5\n**.\n**.\n**.\n**.\n**.\n\n5 5\n**.\n**.\n**.\n**.\n**.\n\n5 5\n**.\n**.\n**.\n**.\n**.\n\n5 5\n**.\n**.\n**.\n**.\n**.\n\n5 5\n**.\n**.\n**.\n**.\n**.\n\n5 5\n**.\n**.\n**.\n**.\n**.\n\n5 5\n**.\n**.\n**.\n**.\n**.\n\n5 5\n**.\n**.\n**.\n**.\n**.\n\n5 5\n**.\n**.\n**.\n**.\n**.\n\n5 5\n**.\n**.\n**.\n**.\n**.\n\n5 5\n**.\n**.\n**.\n**.\n**.\n\n5 5\n**.\n**.\n**.\n**.\n**.\n\n5 5\n**.\n**.\n**.\n**.\n**.\n\n5 5\n**.\n**.\n**.\n**.\n**.\n\n5 5\n**.\n**.\n**.\n**.\n**.\n\n5 5\n**.\n**.\n**.\n**.\n**.\n\n5 5\n**.\n**.\n**.\n**.\n**.\n\n5 5\n**.\n**.\n**.\n**.\n**.\n\n5 5\n**.\n**.\n**.\n**.\n**.\n\n5 5\n**.\n**.\n**.\n**.\n**.\n\n5 5\n**.\n**.\n**.\n**.\n**.\n\n5 5\n**.\n**.\n**.\n**.\n**.\n\n5 5\n**.\n**.\n**.\n**.\n**.\n\n5 5\n**.\n**.\n**.\n**.\n**.\n\n5 5\n**.\n**.\n**.\n**.\n**.\n\n5 5\n**.\n**.\n**.\n**.\n**.\n\n5 5\n**.\n**.\n**.\n**.\n**.\n\n5 5\n**.\n**.\n**.\n**.\n**.\n\n5 5\n**.\n**.\n**.\n**.\n**.\n\n5 5\n**.\n**.\n**.\n**.\n**.\n\n5 5\n**.\n**.\n**.\n**.\n**.\n\n5 5\n**.\n**.\n**.\n**.\n**.\n\n5 5\n**.\n**.\n**.\n**.\n**.\n\n5 5\n**.\n**.\n**.\n**.\n**.\n\n5 5\n**.\n**.\n**.\n**.\n**.\n\n5 5\n**.\n**.\n**.\n**.\n**.\n\n5 5\n**.\n**.\n**.\n**.\n**.\n\n5 5\n**.\n**.\n**.\n**.\n**.\n\n5 5\n**.\n**."
    },
    {
        "number": 4233,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = []\n    n, m = map(int, stdin.split())\n    for i in range(n):\n        s.append(stdin[i].rstrip())\n    for j in range(1, n):\n        for k in range(1, m):\n            s[j][k] = \"*\"\n    for i in range(n - 1, -1, -1):\n        for j in range(m - 1, -1, -1):\n            if s[i][j] == \"*\":\n                continue\n            if s[i][j]!= \".\":\n                return \"-1\"\n            for d in [-1, 1]:\n                if i + d >= n or j + d >= m:\n                    continue\n                if s[i + d][j + d] == \"*\":\n                    continue\n                s[i + d][j + d] = \".\"\n    for i in range(n - 1, -1, -1):\n        for j in range(m - 1, -1, -1):\n            if s[i][j] == \"*\":\n                continue\n            if s[i][j]!= \".\":\n                return \"-1\"\n            for d in [-1, 1]:\n                if i + d >= n or j + d >= m:\n                    continue\n                if s[i + d][j + d] == \"*\":\n                    continue\n                s[i + d][j + d] = \".\"\n    for i in range(n - 1, -1, -1):\n        for j in range(m - 1, -1, -1):\n            if s[i][j] == \"*\":\n                continue\n            if s[i][j]!= \".\":\n                return \"-1\"\n            for d in [-1, 1]:\n                if i + d >= n or j + d >= m:\n                    continue\n                if s[i + d][j + d] == \"*\":\n                    continue\n                s[i + d][j + d] = \".\"\n    for i in range(n - 1, -1, -1):\n        for j in range(m - 1, -1, -1):\n            if s[i][j] == \"*\":\n                continue\n            if s[i][j]!= \".\":\n                return \"3\"\n            for d in [-1, 1]:\n                if i + d >= n or j + d >= m:\n                    continue\n                if s[i + d][j + d] == \"*\":\n                    continue\n                s[i + d][j + d] = \".\"\n    for i in range(n - 1, -1, -1):\n        for j in range(m - 1, -1, -1):\n            if s[i][j] == \"*\":\n                continue\n            if s[i][j]!= \".\":\n                return \"3\"\n            for d in [-1, 1]:\n                if i + d >= n or j + d >= m:\n                    continue\n                if s[i + d][j + d] == \"*\":\n                    continue\n                s[i + d][j + d] = \".\"\n    for i in range(n - 1, -1, -1):\n        for j in range(m - 1, -1, -1):\n            if s[i][j] == \"*\":\n                continue\n            if s[i][j]!= \".\":\n                return \"3\"\n            for d in [-1, 1]:\n                if i + d >= n or j + d >= m:\n                    continue\n                if s[i + d][j + d] == \"*\":\n                    continue\n                s[i + d][j + d] = \".\"\n    for i in range(n - 1, -1, -1):\n        for j in range(m - 1, -1, -1):\n            if s[i][j] == \"*\":\n                continue\n            if s[i][j]!= \".\":\n                return \"3\"\n            for d in [-1, 1]:\n                if i + d >= n or j + d >= m:\n                    continue\n                if s[i + d][j + d] == \"*\":\n                    continue\n                s[i + d][j + d] = \".\"\n    for i in range(n - 1, -1, -1):\n        for j in range(m - 1, -1, -1):\n            if s[i][j] == \"*\":\n                continue\n            if s[i][j]!= \".\":\n                return \"3\"\n            for d in [-1, 1]:\n                if i + d >= n or j + d >= m:\n                    continue\n                if s[i + d][j + d] == \"*\":\n                    continue\n                s[i + d][j + d] = \".\"\n    for i in range(n - 1, -1, -1):\n        for j in range(m - 1, -1, -1):\n            if s[i][j] == \"*\":\n                continue\n            if s[i][j]!= \".\":\n                return \"3\"\n            for d in [-1, 1]:\n                if i + d >= n or j + d >= m:\n                    continue\n                if s[i + d][j + d] == \"*\":\n                    continue\n                s[i + d][j + d] = \".\"\n    for i in range(n - 1, -1, -1):\n        for j in range(m - 1, -1, -1):\n            if s[i][j] == \"*\":\n                continue\n            if s[i][j]!= \".\":\n                "
    },
    {
        "number": 4233,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    grid = []\n    for i in range(n):\n        grid.append(stdin[i:i+m])\n    k = 0\n    for j in range(n):\n        for i in range(m):\n            if grid[j][i] == '.':\n                for k in range(k+1, m*n+1):\n                    if grid[j][k] == '.':\n                        grid[j][k] = '*'\n                    else:\n                        break\n                break\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                for k in range(k+1, m*n+1):\n                    if grid[k][j] == '.':\n                        grid[k][j] = '*'\n                    else:\n                        break\n                break\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                for k in range(k+1, m*n+1):\n                    if grid[i][k] == '.':\n                        grid[i][k] = '*'\n                    else:\n                        break\n                break\n    return ''.join(grid[n-1])\n\n\nhttps://leetcode.com/problems/n-ary-tree-intersection/discuss/248611/Python-O(n)-solution-using-builtin-python-solution.\n"
    },
    {
        "number": 4234,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = list(map(int, stdin.split()))\n    good = N - K\n    good = good if good < 10 else N - good\n    while good:\n        print(good, end='')\n        good -= 1\n    return ''\n\n------------------\nExplanation\n\nFor example, given the string \"good\" we can delete 3 characters from it:\n\nThere are 2 good characters left, so we remove the last character, and left 3 to the left.\nHere, the deleted characters are \"good\", so we leave the second left character and left 3 to the left.\n\nWe remove all the remaining characters, and we have:\n\n0 good characters left, so we delete 2 characters from the left.\nWe have:\n\n0 good characters left, so we delete 1 character from the left.\n\nIn this way, we have 3 good characters left, and the string after removing all the remaining characters is \"good\".\n\nSince the deletion of 3 good characters is right, we return that deletion.\n\n\n------------------\nConstraints\n1 <= N <= 10^5\n1 <= K <= N\n\n----------------------------------------\nSample Input\n\n3\naabc\na\nb\na\nSample Output\n\n0\nab\n\n------------------\nExplanation\n\nThere are 2 good characters left, so we remove the last character, and left 3 to the left.\n\nWe remove all the remaining characters, and we have:\n\n0 good characters left, so we delete 2 characters from the left.\nWe have:\n\n0 good characters left, so we delete 1 character from the left.\n\nIn this way, we have 3 good characters left, and the string after removing all the remaining characters is \"good\".\n\nSince the deletion of 3 good characters is right, we return that deletion.\n\n\n\"\"\""
    },
    {
        "number": 4234,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    s = stdin.strip()\n    \n    lst = []\n    for i in range(n):\n        s = s[:-1]\n        if s not in lst:\n            lst.append(s)\n    \n    return''.join(lst)\n'''\n\n\ndef"
    },
    {
        "number": 4234,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    for _ in range(N):\n        s = stdin.strip()\n        if len(s) == 1:\n            print(0)\n            continue\n        good_cnt, bad_cnt = 0, 0\n        for i in range(1, len(s)):\n            if s[i]!= s[i - 1]:\n                good_cnt += 1\n        for j in range(i + 1, len(s)):\n            if s[j]!= s[j - 1]:\n                bad_cnt += 1\n        if good_cnt > bad_cnt:\n            print(good_cnt)\n        else:\n            print(bad_cnt)\n\nSolution\n4\naa\n\nOutput\n0\naaaaa\n\nInput\n3\naaa\n\nOutput\n2\nab\n\nInput\n4\naaa\n\nOutput\n3\ndef"
    },
    {
        "number": 4234,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    s = stdin[1]\n    k = int(stdin[2])\n    if k == n:\n        return s\n    elif k == 0:\n        return \"\"\n    else:\n        res = \"\"\n        for i in range(n):\n            if i == n - k:\n                break\n            res += s[i]\n        return res\n\n\n-----Test-----\n2\ngood\n\n5\naabbac\n\nOutput\n0\nab\n\nExplanation\n\nstdin reads 2\ns = good\n\nn = 4\n\ns = aabbc\n\nk = 2\nk = 3\nk = 0\n\ns = aabb\n\nk = 0\nk = 1\nk = 2\nk = 0\n\ns = aa\n\nk = 0\nk = 1\nk = 2\nk = 0\n\ns = aabc\n\nk = 0\nk = 1\nk = 2\nk = 0\n\ns = aaaa\n\nk = 0\nk = 1\nk = 2\nk = 0\n\ns = \"\"\nk = 0\nk = 1\nk = 2\nk = 0\n\ns = \"\"\nk = 0\nk = 1\nk = 2\nk = 0\n\ns = \"\"\nk = 0\nk = 1\nk = 2\nk = 0\n\ns = \"\"\nk = 0\nk = 1\nk = 2\nk = 0\n\ns = \"\"\nk = 0\nk = 1\nk = 2\nk = 0\n\ns = \"\"\nk = 0\nk = 1\nk = 2\nk = 0\n\ns = \"\"\nk = 0\nk = 1\nk = 2\nk = 0\n\ns = \"\"\nk = 0\nk = 1\nk = 2\nk = 0\n\ns = \"\"\nk = 0\nk = 1\nk = 2\nk = 0\n\ns = \"\"\nk = 0\nk = 1\nk = 2\nk = 0\n\ns = \"\"\nk = 0\nk = 1\nk = 2\nk = 0\n\ns = \"\"\nk = 0\nk = 1\nk = 2\nk = 0\n\ns = \"\"\nk = 0\nk = 1\nk = 2\nk = 0\n\ns = \"\"\nk = 0\nk = 1\nk = 2\nk = 0\n\ns = \"\"\nk = 0\nk = 1\nk = 2\nk = 0\n\ns = \"\"\nk = 0\nk = 1\nk = 2\nk = 0\n\ns = \"\"\nk = 0\nk = 1\nk = 2\nk = 0\n\ns = \"\"\nk = 0\nk = 1\nk = 2\nk = 0\n\ns = \"\"\nk = 0\nk = 1\nk = 2\nk = 0\n\ns = \"\"\nk = 0\nk = 1\nk = 2\nk = 0\n\ns = \"\"\nk = 0\nk = 1\nk = 2\nk = 0\n\ns = \"\"\nk = 0\nk = 1\nk = 2\nk = 0\n\ns = \"\"\nk = 0\nk = 1\nk = 2\nk = 0\n\ns = \"\"\nk = 0\nk = 1\nk = 2\nk = 0\n\ns = \"\"\nk = 0\nk = 1\nk = 2\nk = 0\n\ns = \"\"\nk = 0\nk = 1\nk = 2\nk = 0\n\ns = \"\"\nk = 0\nk = 1\nk = 2\nk = 0\n\ns = \"\"\nk = 0\nk = 1\nk = 2\nk = 0\n\ns = \"\"\nk = 0\nk = 1\nk = 2\nk = 0\n\ns = \"\"\nk = 0\nk = 1\nk = 2\nk = 0\n\ns = \"\"\nk = 0\nk = 1\nk = 2\nk = 0\n\ns = \"\"\nk = 0\nk = 1\nk = 2\nk = 0\n\ns = \"\"\nk = 0\nk = 1\nk = 2\nk = 0\n\ns = \"\"\nk = 0\nk = 1\nk = 2\nk = 0\n\ns = \"\"\nk = 0\nk = 1\nk = 2\nk = 0\n\ns = \"\"\nk = 0\nk = 1\nk = 2\nk = 0\n\ns = \"\"\nk = 0\nk = 1\nk = 2\nk = 0\n\ns = \"\"\nk = 0\nk = 1\nk = 2\nk = 0\n\ns = \"\"\nk = 0\nk = 1\nk = 2\nk = 0\n\ns = \"\"\nk = 0\nk = 1\nk = 2\nk = 0\n\ns = \"\"\nk = 0\nk = 1\nk = 2\nk = 0\n\ns = \"\"\nk = 0\nk = 1\nk = 2\nk = 0\n\ns = \"\"\nk = 0\nk = 1\nk = 2\nk = 0\n\ns = \"\"\nk = 0\nk = 1\nk = 2\nk = 0\n\ns = \"\"\nk = 0\nk = 1\nk = 2\nk = 0\n\ns = \"\"\nk = 0\nk = 1\nk = 2\nk = 0\n\ns = \"\"\nk = 0\nk = 1\nk = 2\nk = 0\n\ns = \"\"\nk = 0\nk = 1\nk = 2\nk = 0\n\ns = \"\"\nk = 0\nk = 1\nk = 2\nk = 0\n\ns = \"\"\nk = 0\nk = 1\nk = 2\nk = 0\n\ns = \"\"\nk = 0\nk = 1\nk = 2\nk = 0\n\ns = \"\"\nk = 0\nk = 1\nk = 2\nk = 0\n\ns = \"\"\nk = 0\nk = 1\nk = 2\nk = 0\n\ns = \"\"\nk = 0\nk = 1\nk = 2\nk = 0\n\ns = \"\"\nk = 0\nk = 1\nk = 2\nk = 0\n\ns = \"\"\nk = 0\nk = 1\nk = 2\nk = 0\n\ns = \"\"\nk = 0\nk = 1\nk = 2\nk = 0\n\ns = \"\"\nk = 0\nk = 1\nk = 2\nk = 0\n\ns = \"\"\nk = 0\nk = 1\nk = 2\nk = 0\n\ns = \"\"\nk = 0\nk = 1\nk = 2\nk = 0\n\ns = \"\"\nk = 0\nk = 1\nk = 2\nk = 0\n\ns = \"\"\nk = 0\nk = 1\nk = 2\nk = 0\n\ns = \"\"\nk = 0\nk = 1\nk = 2\nk = 0\n\ns = \"\"\nk = 0\nk = 1\nk = 2\nk = 0\n\ns = \"\"\nk = 0\nk = 1\nk = 2\nk = 0\n\ns = \"\"\nk = 0\nk = 1\nk = 2\nk = 0\n\ns = \"\"\nk = 0\nk = 1\nk = 2\nk = 0\n\ns = \"\"\nk = 0\nk = 1\nk = 2\nk = 0\n\ns = \"\"\nk = 0\nk = 1\nk = 2\nk = 0\n\ns = \"\"\nk = 0\nk = 1\nk = 2\nk = 0\n\ns = \"\"\nk"
    },
    {
        "number": 4234,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n == 0:\n        return \"\"\n    \n    good = \"\"\n    bad = \"\"\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            good += \"a\"\n        else:\n            bad += \"b\"\n    \n    return good + bad[:n // 2] + good[n // 2:]\n"
    },
    {
        "number": 4234,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return solution_solution(stdin, 0, 0, [])\n\n\ndef"
    },
    {
        "number": 4234,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip().strip(\". \"))\n    s = stdin.strip().split()\n    k = int(n/2)\n    print(min(k,s[n%k]))\n    return s[:n%k] + s[n%k+1:]\n\n\n-----Constraints-----\n1\u2264n\u22642^{30}\n0\u2264s.length\u226420\n\n\n----Solution-----\nn = int(input())\ns = input()\nprint(len(s))\nprint(s)\n"
    },
    {
        "number": 4234,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    stdin = stdin.replace(' ', '')\n    min_ch = n\n    max_ch = 0\n    for i in range(n):\n        if stdin[i] == 'a' or stdin[i] == 'A':\n            if min_ch > 0:\n                min_ch -= 1\n            max_ch += 1\n        elif stdin[i] == 'b' or stdin[i] == 'B':\n            if max_ch >= 0:\n                max_ch -= 1\n        elif stdin[i] == 'c' or stdin[i] == 'C':\n            if max_ch < n:\n                max_ch += 1\n        else:\n            print(min_ch, max_ch)\n            return 'too'\n    return 'good'\n"
    },
    {
        "number": 4234,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    count = 0\n    for i in range(n):\n        st = input()\n        if st:\n            count += len(st)\n        else:\n            continue\n    return count\n\n-----Constraints-----\n\n1 <= n <= 10^4\n\n0 < k < 10^6\n\n-----Time Limit-----\nTime limit per testcase = 10^6 seconds\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4234,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip().rstrip())\n    string = stdin.strip().split()\n    str_list = []\n    for string_list in string:\n        str_list.extend(string_list.split(' '))\n    \n    str_list.sort()\n    \n    for i in range(n):\n        if i < len(str_list):\n            if i%2==0:\n                str_list.remove(str_list[i])\n            else:\n                str_list[i] = str_list[i][::-1]\n    return''.join(str_list)\n\n\nprint(solution(input()))"
    },
    {
        "number": 4235,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    edges = []\n    graph = {}\n\n    for line in stdin:\n        edge = line.split()\n        u = int(edge[0])\n        v = int(edge[1])\n        \n        if graph.get(u) is None:\n            graph[u] = set()\n            graph[u].add(v)\n        else:\n            graph[u].add(v)\n\n        if graph.get(v) is None:\n            graph[v] = set()\n            graph[v].add(u)\n        else:\n            graph[v].add(u)\n    \n    for key, value in graph.items():\n        edges.append(str(key in value))\n\n    return \"\".join(edges)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4235,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    adj = [[] for _ in range(n+1)]\n    for i in range(m):\n        s, e = map(int, stdin.split())\n        adj[s].append(e)\n        adj[e].append(s)\n    \n    ret = \"\"\n    \n    def dfs(s):\n        if s == n:\n            return\n        \n        dfs(adj[s])\n        ret += str(adj[s][0])\n        dfs(adj[s][-1])\n    \n    dfs(1)\n    print(ret)\n    return ret\n    \n        \n        \n        \n        \n"
    },
    {
        "number": 4235,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    edge = []\n    for _ in range(0, int(stdin.strip().split('\\n')[0])):\n        edge.append([int(x) for x in stdin.split()[0].split(' ')])\n    \n    for edge in sorted(edge, key = lambda x : x[0]):\n        if edge[0] + edge[1] > 2 * edge[0]:\n            return 'NO'\n        elif edge[0] - edge[1] == 2 * edge[0]:\n            return 'YES'\n    \n    return 'YES'\n\n'''\nimport collections\n\ndef"
    },
    {
        "number": 4235,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    graph = [list(map(int, stdin.split())) for _ in range(n)]\n    \n    # directed\n    # graph = [[0,1,0,0,0,0], [0,0,1,0,0,0], [0,0,0,1,0,0], [0,0,0,0,1,0], [0,0,0,0,0,1], [0,0,0,0,0,0]]\n    # graph = [[0,1,0,0,0,0], [0,0,1,0,0,0], [0,0,0,1,0,0], [0,0,0,0,1,0], [0,0,0,0,0,1], [0,0,0,0,0,0]]\n    # graph = [[0,1,0,0,0,0], [0,0,1,0,0,0], [0,0,0,1,0,0], [0,0,0,0,1,0], [0,0,0,0,0,1], [0,0,0,0,0,0]]\n    # graph = [[0,1,0,0,0,0], [0,0,1,0,0,0], [0,0,0,1,0,0], [0,0,0,0,1,0], [0,0,0,0,0,1], [0,0,0,0,0,0]]\n    # graph = [[0,1,0,0,0,0], [0,0,1,0,0,0], [0,0,0,1,0,0], [0,0,0,0,1,0], [0,0,0,0,0,1], [0,0,0,0,0,0]]\n    # graph = [[0,1,0,0,0,0], [0,0,1,0,0,0], [0,0,0,1,0,0], [0,0,0,0,1,0], [0,0,0,0,0,1], [0,0,0,0,0,0]]\n    # graph = [[0,1,0,0,0,0], [0,0,1,0,0,0], [0,0,0,1,0,0], [0,0,0,0,1,0], [0,0,0,0,0,1], [0,0,0,0,0,0]]\n    # graph = [[0,1,0,0,0,0], [0,0,1,0,0,0], [0,0,0,1,0,0], [0,0,0,0,1,0], [0,0,0,0,0,1], [0,0,0,0,0,0]]\n    # graph = [[0,1,0,0,0,0], [0,0,1,0,0,0], [0,0,0,1,0,0], [0,0,0,0,1,0], [0,0,0,0,0,1], [0,0,0,0,0,0]]\n    # graph = [[0,1,0,0,0,0], [0,0,1,0,0,0], [0,0,0,1,0,0], [0,0,0,0,1,0], [0,0,0,0,0,1], [0,0,0,0,0,0]]\n    # graph = [[0,1,0,0,0,0], [0,0,1,0,0,0], [0,0,0,1,0,0], [0,0,0,0,1,0], [0,0,0,0,0,1], [0,0,0,0,0,0]]\n    # graph = [[0,1,0,0,0,0], [0,0,1,0,0,0], [0,0,0,1,0,0], [0,0,0,0,1,0], [0,0,0,0,0,1], [0,0,0,0,0,0]]\n    # graph = [[0,1,0,0,0,0], [0,0,1,0,0,0], [0,0,0,1,0,0], [0,0,0,0,1,0], [0,0,0,0,0,1], [0,0,0,0,0,0]]\n    # graph = [[0,1,0,0,0,0], [0,0,1,0,0,0], [0,0,0,1,0,0], [0,0,0,0,1,0], [0,0,0,0,0,1], [0,0,0,0,0,0]]\n    # graph = [[0,1,0,0,0,0], [0,0,1,0,0,0], [0,0,0,1,0,0], [0,0,0,0,1,0], [0,0,0,0,0,1], [0,0,0,0,0,0]]\n    # graph = [[0,1,0,0,0,0], [0,0,1,0,0,0], [0,0,0,1,0,0], [0,0,0,0,1,0], [0,0,0,0,0,1], [0,0,0,0,0,0]]\n    # graph = [[0,1,0,0,0,0], [0,0,1,0,0,0], [0,0,0,1,0,0], [0,0,0,0,1,0], [0,0,0,0,0,1], [0,0,0,0,0,0]]\n    # graph = [[0,1,0,0,0,0], [0,0,1,0,0,0], [0,0,0,1,0,0], [0,0,0,0,1,0], [0,0,0,0,0,1], [0,0,0"
    },
    {
        "number": 4235,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n    #read each line\n    n, m = map(int, stdin.split())\n    edges = []\n    for _ in range(m):\n        u, v = map(int, stdin.split())\n        edges.append((u, v))\n\n    #sort edges by source vertex index\n    edges.sort()\n    \n\n    #create graph\n    graph = [[] for _ in range(n)]\n    for u, v in edges:\n        graph[u].append(v)\n        graph[v].append(u)\n    \n    \n    \n    #check if graph is connected\n    for i in range(len(graph)):\n        visited = [False for _ in range(n)]\n        dfs(graph, visited)\n        \n    \n    #reverse edges\n    for u, v in edges:\n        edges[u].sort(reverse=True)\n        edges[v].sort()\n        \n    #check whether the edge exists\n    #if not, return \"NO\"\n    #if exists, check whether they are directed\n    #if directed, return\n    #if not, return \"YES\"\n    \n    return \"YES\" if dfs(graph, visited) == \"NO\" else \"NO\"\n\ndef"
    },
    {
        "number": 4235,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = [list(map(int, stdin.split())) for _ in range(m)]\n    graph = []\n    for u, v in edges:\n        graph.append([u, v])\n    \n    # directed graph\n    graph = [[0 for _ in range(n)] for _ in range(n)]\n    for u, v in graph:\n        graph[u][v] = 1\n        graph[v][u] = 1\n    \n    # directed graph, no check\n    for u, v in graph:\n        if graph[u][v] == 0:\n            graph[u][v] = 1\n    \n    # no directed graph\n    return \"NO\" if len(graph) == m else \"YES\"\n\"\"\"\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        edges = [list(map(int, stdin.split())) for _ in range(int(stdin.split()[1]))]\n        \n        graph = [[0 for _ in range(n)] for _ in range(n)]\n        for u, v in edges:\n            graph[u][v] = 1\n            graph[v][u] = 1\n        \n        # directed graph\n        graph = [[0 for _ in range(n)] for _ in range(n)]\n        for u, v in graph:\n            graph[u][v] = 1\n            graph[v][u] = 1\n            \n        # directed graph, no check\n        for u, v in graph:\n            if graph[u][v] == 0:\n                graph[u][v] = 1\n        \n        # no directed graph\n        return \"NO\" if len(graph) == m else \"YES\""
    },
    {
        "number": 4235,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    from collections import defaultdict\n    def compute(n: int, m: int, graph: list[list[int]]) -> str:\n        if not graph:\n            return 'YES'\n        visited = [0 for _ in range(n + 1)]\n        visited[0] = 1\n        q = deque([(0, 0)])\n        while q:\n            idx, level = q.popleft()\n            if idx == n:\n                return 'NO'\n            for i in range(level + 1, m):\n                if not visited[i]:\n                    visited[i] = visited[idx] + visited[i]\n                    q.append((i, level + 1))\n        return 'YES'\n\n    n, m = map(int, stdin.split())\n    graph = defaultdict(list)\n    for _ in range(n):\n        u, v = map(int, stdin.split())\n        graph[u].append(v)\n        graph[v].append(u)\n    return compute(n, m, graph)\n\n\"\"\"\ndef"
    },
    {
        "number": 4235,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n\n    edges = [[] for _ in range(n)]\n    for i in range(n-1):\n        u, v = map(int, stdin.split())\n        edges[u].append(v)\n        edges[v].append(u)\n    \n    answer = '0'\n\n    def construct_path(node):\n        path = [node]\n        while len(path)!= 0:\n            n = path[-1]\n            node = edges[n].pop()\n            if node!= n:\n                path.append(node)\n            else:\n                answer = '1'\n                break\n        else:\n            answer = 'NO'\n            return\n        \n        while len(edges[n]) > 0:\n            n = edges[n].pop()\n            path.append(n)\n        \n        return answer\n        \n    for i in range(n):\n        answer = construct_path(i)\n        if answer == '0':\n            break\n        else:\n            answer = '1'\n            break\n\n    return answer\n\n\n-----Basic idea:\n\n(1) The edges is only directed one way.\n(2) The graph has no self-loops.\n(3) All edges start with a vertex to the end of the graph.\n\nDirection is followed by an edge from the starting vertex to any vertex of the graph\n\nDirection:\n\n(1) if the edge starts from the end, the other vertices should be the end vertex of the graph\n(2) if the edge ends with the end vertex of the graph\n\n(3) if the edge ends with the start vertex of the graph, the other vertices should be the start vertex of the graph\n\nThe directed graph has no self-loops.\n\nBut the graph is connected,\nbecause it contains no duplicate edges.\n\nThe directed graph also has self loops,\nbecause they are edges connecting the same node.\n\nWe can always add self loops between edges of the graph.\n\nHowever, the graph is not connected.\n\nIt does not have self loops.\n\nWhen we add self loops, we can not add self loops between two edges of the same vertex.\nThe new vertex is added to the list of vertices, and the list of self-loops is modified.\n\nThe graph is not connected.\n\nSo, when we add self loops between a new vertex,\nthere is no self-loop among the vertices of the graph,\nwhich is wrong.\n\nSo, we have to add the edge in the graph.\n\nThe graph is connected.\n\nThe graph is not connected.\n\n(1) If an edge connects two vertices,\nthe new vertex is connected to the original vertex of the graph.\n(2) If an edge connects two vertices,\nthe new vertex is not connected.\n\nThe graph is connected.\n\nThe graph is not connected.\n\n(1) If an edge connects two vertices,\nthe new vertex is not connected to the original vertex of the graph.\n(2) If an edge connects two vertices,\nthe new vertex is connected to the original vertex of the graph.\n(3) If an edge connects two vertices,\nthe new vertex is not connected.\n\nThe graph is not connected.\n\nThe graph is connected.\n\n(1) If an edge connects two vertices,\nthe new vertex is not connected to the original vertex of the graph.\n(2) If an edge connects two vertices,\nthe new vertex is connected to the original vertex of the graph.\n(3) If an edge connects two vertices,\nthe new vertex is not connected.\n\nThe graph is not connected.\n\n(1) If an edge connects two vertices,\nthe new vertex is not connected to the original vertex of the graph.\n(2) If an edge connects two vertices,\nthe new vertex is not connected.\n(3) If an edge connects two vertices,\nthe new vertex is not connected.\n\nThe graph is not connected.\n\nThe graph is connected.\n\n(1) If an edge connects two vertices,\nthe new vertex is not connected to the original vertex of the graph.\n(2) If an edge connects two vertices,\nthe new vertex is not connected.\n(3) If an edge connects two vertices,\nthe new vertex is not connected.\n\nThe graph is connected.\n\n(1) If an edge connects two vertices,\nthe new vertex is not connected to the original vertex of the graph.\n(2) If an edge connects two vertices,\nthe new vertex is not connected.\n(3) If an edge connects two vertices,\nthe new vertex is not connected.\n(4) If an edge connects two vertices,\nthe new vertex is not connected.\n\n(1) If an edge connects two vertices,\nthe new vertex is not connected to the original vertex of the graph.\n(2) If an edge connects two vertices,\nthe new vertex is connected to the original vertex of the graph.\n(3) If an edge connects two vertices,\nthe new vertex is not connected.\n(4) If an edge connects two vertices,\nthe new vertex is not connected.\n(5) If an edge connects two vertices,\nthe new vertex is not connected.\n(6) If an edge connects two vertices,\nthe new vertex is not connected.\n(7) If an edge connects two vertices,\nthe new vertex is not connected.\n(8) If an edge connects two vertices,\nthe new vertex is not connected.\n(9) If an edge connects two vertices,\nthe new vertex is not connected.\n\nThe graph is not connected.\n\nThe graph is connected.\n\nThe graph is connected.\n\nThe graph is connected.\n\nThe graph is connected.\n\nThe graph is connected.\n\nThe graph is connected.\n\nThe graph is connected.\n\nThe graph is connected.\n\nThe graph is connected.\n\nThe graph is connected.\n\nThe graph is connected.\n\nThe graph is connected.\n\nThe graph is connected.\n\nThe graph is connected.\n\nThe graph is connected.\n\nThe graph is connected.\n\nThe graph is connected.\n\nThe graph is connected.\n\nThe graph is connected.\n\nThe graph is connected.\n\nThe graph is connected.\n\nThe graph is connected.\n\nThe graph is connected.\n\nThe graph is connected.\n\nThe graph is connected.\n\nThe graph is connected.\n\nThe graph is connected.\n\nThe graph is connected.\n\nThe graph is connected.\n\nThe graph is connected.\n\nThe graph is connected.\n\nThe graph is connected.\n\nThe graph is connected.\n\nThe graph is connected.\n\nThe graph is connected.\n\nThe"
    },
    {
        "number": 4235,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip().split(\" \")[0])\n    m = int(stdin.strip().split(\" \")[1])\n    graph = [[] for _ in range(n)]\n    for i in range(m):\n        u, v, w = map(int, stdin.strip().split(\" \")[2:])\n        graph[u].append([v, w])\n        graph[v].append([u, w])\n    \n    answer = \"\"\n    for i in range(n):\n        for j in range(i+1, n):\n            for u, v, w in graph[i]:\n                for u, v, w in graph[j]:\n                    if w == 1 and u!= v:\n                        answer += str(1)\n    if answer == \"NO\":\n        answer = \"YES\"\n    return answer"
    },
    {
        "number": 4235,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = []\n    for _ in range(m):\n        a, b = map(int, stdin.split())\n        edges.append((a, b))\n\n    edges.sort(key=lambda edge: edge[1])\n    \n    visited = [False for _ in range(n)]\n    \n    def get_visited(edge):\n        if not visited[edge[0]]:\n            visited[edge[0]] = True\n            visited[edge[1]] = True\n        if not visited[edge[1]]:\n            visited[edge[1]] = True\n            visited[edge[0]] = True\n        return visited\n        \n    def is_directed(edge):\n        if visited[edge[0]]:\n            return False\n        if visited[edge[1]]:\n            return False\n        return True\n\n    answer = 'YES'\n    for edge in edges:\n        if not is_directed(edge):\n            answer = 'NO'\n            break\n        if not visited[edge[0]]:\n            visited[edge[0]] = True\n            visited[edge[1]] = True\n        if not visited[edge[1]]:\n            visited[edge[1]] = True\n            visited[edge[0]] = True\n        answer = 'NO'\n        break\n    return answer"
    },
    {
        "number": 4236,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    data = []\n    for _ in range(n):\n        l, r = map(int, stdin.split())\n        data.append([l, r])\n    \n    print(len(data))\n    \n    for i in range(n):\n        data[i].sort()\n    \n    print(data[n-1][0])\n    print(data[n-1][1])\n    \n    points = []\n    for i in range(n):\n        for j in range(i+1, n):\n            l = data[i][0]\n            r = data[j][1]\n            points.append([l, r])\n            if l < r:\n                return str(0)\n    return str(len(points)) + '\\n' + str(points)\n"
    },
    {
        "number": 4236,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    k = 0\n    n, m = map(int, stdin.split())\n    ls = []\n    for i in range(n):\n        ls.append(tuple(map(int, stdin.split())))\n    segment = (min(ls[0]), max(ls[0]))\n    \n    for i in range(n):\n        if segment[0] <= ls[i][1]:\n            segment = (segment[0], ls[i][1])\n        elif segment[1] >= ls[i][0]:\n            segment = (ls[i][0], segment[1])\n        else:\n            k += 1\n            continue\n    if k > 0:\n        print(k)\n    else:\n        print(0)\n    return\n\n\n-----Solution-----\nInput\n1 7\n1 7\n5 5\n\nOutput\n0\n"
    },
    {
        "number": 4236,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    l_i = map(int, stdin.split())\n    r_i = map(int, stdin.split())\n    if n > m:\n        n, m = m, n\n    result = \"\"\n    for i in range(n):\n        for j in range(m):\n            result += str(l_i[i] - r_i[j]) + \",\"\n    if len(result) == n:\n        print(len(result))\n        return result\n    return result[:-1]\n\n-----Constraints-----\n\n1 <= n, m <= 100\n0 <= l_i[i] <= r_i[j] <= m\n\ndef"
    },
    {
        "number": 4236,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    l = []\n    r = []\n    res = []\n    for i in range(n):\n        l.append(int(stdin.split()[i]))\n    for i in range(n-1):\n        r.append(int(stdin.split()[i+1]))\n    for i in range(m):\n        if l[i] == r[i]:\n            res.append(i)\n    return str(len(res))"
    },
    {
        "number": 4236,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    segments = []\n    point = []\n    for i in range(0, n):\n        line = stdin.split()\n        segments.append((int(line[0]), int(line[1])))\n    point.append(segments[0][0])\n    for i in range(1, len(segments)):\n        if (segments[i][0] <= point[-1] <= segments[i][1]):\n            continue\n        else:\n            if (point[-1] > point[-2]):\n                point.append(segments[i][0])\n            else:\n                point.append(segments[i][1])\n    if (point[0]!= point[-1]):\n        point.append(point[-1])\n    for i in range(0, n - 2):\n        print(point[i], end=\" \")\n    print(point[n - 1])\n\n    return str(point[n - 1])\n\n\n\n\n-----Constraints-----\n\n1 <= n <= 20\n1 <= l_i < m_i <= 100\n\n------Time complexity-----\n\nO(n)\nO(n)\n\n------Space complexity-----\n\nO(n)\n\nn\n\n\n\n------Test Cases-----\n\nInput\n3 5\n2 2\n1 2\n5 5\n\nOutput\n2\n3 4 \n\nExplanation\n\nThere are two segments: [2, 4] and [4, 5] \u2014 the first segment (intersecting with the second segment) and the second segment (overlapping).\n\nIn the second segment, we have:\n- segment $2$ contains point $2$\n- segment $4$ contains point $4$\n- segment $5$ contains point $5$\n\nThe point $5$ belongs to the first segment.\n\nFor the first segment, we have:\n- point $1$ belongs to the second segment\n- segment $2$ contains point $1$\n- segment $3$ contains point $1$\n\nThe point $1$ belongs to the second segment.\n\n\"\"\"\n\n\n\n\nimport math\n\n\ndef"
    },
    {
        "number": 4236,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(i) for i in stdin.split()]\n    data = [list(map(int, input().split())) for i in range(n)]\n    intervals = []\n    for i in range(n):\n        for j in range(n):\n            if i < j:\n                intervals.append(data[i][j])\n    print(len(set(intervals)))\n    return ''\n\n-----Constraints-----\n1 <= n <= 100\n1 <= m <= 10^5\n1 <= l_i, r_i < m\n1 <= |l_i, r_i| <= 10^5\n\n-----Submissions-----\n7, 7, 5, 5, 5, 7, 7, 7, 7\n\n[\n
    },
    {
        "number": 4236,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    l, r = map(int, stdin.split())\n    if (l > m or l > r): return 0\n    segments = [[] for _ in range(n)]\n    for i in range(n):\n        tmp = stdin[i].split()\n        segments[i].append(int(tmp[0]))\n        segments[i].append(int(tmp[1]))\n    for i in range(n):\n        for j in range(i + 1, n):\n            if segments[i] == segments[j]:\n                continue\n            l, r = sorted([segments[i], segments[j]])\n            if l[0] <= r[0] and l[1] <= r[1]:\n                segments[i] = l\n                segments[j] = r\n    for i in range(n):\n        for j in range(i + 1, n):\n            if segments[i] == segments[j]:\n                continue\n            if segments[i] <= segments[j]:\n                return 2\n    return 0\n\n------Code-------\n\nimport sys\nimport math"
    },
    {
        "number": 4236,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    b = [i for i in range(n+1)]\n    b.sort()\n    for i in range(n-1):\n        if b[i] <= b[i+1] and b[i] not in b[i+1:]:\n            return '0'\n    return '1'\n\ndef"
    },
    {
        "number": 4236,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.strip().split(' ')[0])\n    L = [int(i) for i in stdin.strip().split(' ')[1].split(',')]\n    R = [int(i) for i in stdin.strip().split(' ')[2].split(',')]\n    n = len(L)\n    # print(L,R)\n    for i in range(n):\n        if (L[i] >= R[i]):\n            print(0)\n            continue\n        for j in range(L[i], R[i] + 1):\n            if (j not in L):\n                print(k)\n                return\n        print(k)\n    return ''\n\n\nInput\n1 4\n1 7\n3 5,5,5 5,7\n\nOutput\n3 4\n\ndef"
    },
    {
        "number": 4236,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    l, r = map(int, stdin.split())\n    l_i, r_i = map(int, stdin.split())\n    if l_i < r_i:\n        print(n-1)\n        print(0)\n    else:\n        print(n)\n        print(m-1)\n        print([l_i, r_i])\n        print([0, m-1])\n        print(n-1)\n        print(l_i)\n        print(r_i)\n"
    },
    {
        "number": 4237,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def solve(a,b,c,d):\n        count = 0\n        if (a%c == 0 or a%b == 0):\n            count += 1\n        if (c%d == 0 or c%a == 0):\n            count += 1\n        if (b%c == 0 or b%a == 0):\n            count += 1\n        return count\n    \n    for i in range(int(input())):\n        a,b,c,d = map(int,input().split())\n        count = solve(a,b,c,d)\n        print(count)\n    return ''\n\ntime complexity: O(n^2)\nspace complexity: O(1)\n'''\nclass Solution:\n    def divide(self, a, b, c, d):\n        if a == b:\n            return 1\n        if b == a:\n            return 0\n        if c == d:\n            return 0\n        if a % c == 0:\n            return self.divide(a // c, b, c, d)\n        return self.divide(a, a // c, c, d) + self.divide(b, b // c, c, d)"
    },
    {
        "number": 4237,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    cnt = 0\n    for i in range(len(stdin)):\n        if stdin[i] == \"2\":\n            cnt += 1\n        if stdin[i] == \"3\":\n            cnt += 1\n            for j in range(i, len(stdin)):\n                if stdin[j] == \"1\":\n                    cnt += 1\n    return str(cnt)\n\ndef"
    },
    {
        "number": 4237,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    num_divides = 0\n    for i in range(len(stdin)):\n        num_divides += stdin.count(str(i))\n    return str(num_divides)\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4237,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    nums = list(map(int, stdin.split()))\n    nums.sort()\n    answer = 0\n    for i in range(len(nums) - 2):\n        j = i + 1\n        if nums[i + 1] - nums[i] <= nums[i + 2] - nums[i]:\n            answer += nums[i + 1] - nums[i]\n        else:\n            answer += nums[i + 2] - nums[i]\n    return str(answer)\n"
    },
    {
        "number": 4237,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    arr = stdin.split()\n    a,b,c,d = int(arr[0]),int(arr[1]),int(arr[2]),int(arr[3])\n    if a % c == 0 and b % d == 0:\n        return str(b//c + 1)\n    elif a % c == 0 and b % d!= 0:\n        return str(b//c)\n    elif a % c!= 0 and b % d == 0:\n        return str(a//c + 1)\n    elif a % c!= 0 and b % d!= 0:\n        return str(a//c)\n"
    },
    {
        "number": 4237,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A,B,C,D = map(int, stdin.split())\n    div = C*(D-B)\n    if div % A == 0:\n        return str(div//A)\n    return str(div//A) + \" and \" + str(div%A)\n\nprint(solution(\"4 9 2 3\"))\nprint(solution(\"5 7 7 9\"))\n"
    },
    {
        "number": 4237,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    cnt = 1\n    curr = 1\n    for i in range(3, len(stdin)):\n        while curr <= int(stdin[i]) and curr % int(stdin[i])!= 0:\n            curr += 1\n        if curr % int(stdin[i]) == 0:\n            cnt += 1\n    return str(cnt)\n"
    },
    {
        "number": 4237,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    num = []\n    for line in stdin:\n        num.append(int(line))\n    # num = list(map(int,stdin.split()))\n    # print(num)\n    for i in range(len(num)-1,0,-1):\n        for j in range(i):\n            if num[j] + num[j+1] == num[i]:\n                num[i] = num[j]\n                num[j] = num[i+1]\n                num[i] = num[i-1]\n                num[i-1] = num[j]\n                num[j] = num[i-1]\n    # for x in num:\n    #     print(x)\n    return ''.join(str(x) for x in num)\n'''\n    def solution(stdin: str) -> str:\n        num = []\n        for line in stdin:\n            num.append(int(line))\n        for i in range(len(num)-1,0,-1):\n            for j in range(i):\n                if num[j] + num[j+1] == num[i]:\n                    num[i] = num[j]\n                    num[j] = num[i+1]\n                    num[i] = num[i-1]\n                    num[i-1] = num[j]\n                    num[j] = num[i-1]\n        return ''.join(str(x) for x in num)\n"
    },
    {
        "number": 4237,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    answer = 0\n    for A, B, C, D in stdin:\n        if int(C) % int(D) == 0 and int(B) % int(D) == 0:\n            answer += 1\n    print(answer)\n    return str(answer)\n"
    },
    {
        "number": 4237,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    result = 0\n    for a in range(A, B+1):\n        for b in range(C, D+1):\n            result += (a/b)\n    return str(round(result))\n\"\"\"\n\ndef"
    },
    {
        "number": 4238,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N%9 == 0:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4238,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    1.Init a list with the digits from stdin\n    2. Create a dictionary with the keys as the digits and the values as the values\n    3. Find all the values for the digits that not has a number of 0\n    4. Find all the values in the dictionary that has 0\n\n    '''\n    num_list = list(map(int,stdin.split()))\n\n    # find the values from the dictionary and create a list with the values\n    num_dict = {key:num_list.count(key) for key in set(num_list)}\n    # find all the values in the dictionary that has 0\n    num_list = [key for key,value in num_dict.items() if value == 0]\n\n    # find all the values in the dictionary that has 0\n    num_dict = {key:num_list.count(key) for key in set(num_list)}\n\n    # find all the values in the dictionary that has 0\n    # if the value has a number of 0, then it is a multiple of 9\n    # if the value has a number of 0 and it is not a multiple of 9, then it is a multiple of 9\n    # if it is a multiple of 9, then it is a multiple of 9\n    return \"Yes\" if sum(num_dict.values()) % 9 == 0 else \"No\"\n"
    },
    {
        "number": 4238,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = str(n)\n    ls = []\n    for i in range(len(s)):\n        ls.append(int(s[i]))\n    ls.sort()\n    for i in range(1, len(ls)):\n        if ls[i] == ls[i - 1]:\n            return 'No'\n        else:\n            return 'Yes'\n"
    },
    {
        "number": 4238,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    return 'Yes' if N % 9 == 0 else 'No'\n"
    },
    {
        "number": 4238,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    if solution1(stdin):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n    return \"\"\n\ndef"
    },
    {
        "number": 4238,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n  nums = [int(x) for x in stdin.split()]\n  for i in range(2, int(max(nums))+1):\n    if sum(nums)%i==0:\n      return str(i)\n  return 'No'\n\n2\n\"\"\"\nfrom math import ceil\n\ndef"
    },
    {
        "number": 4238,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    sum = 0\n    i = 1\n    while i <= n:\n        sum += int(str(i))\n        i += 1\n    \n    if sum % 9 == 0:\n        return 'Yes'\n    else:\n        return 'No'\n\nsolution(input())"
    },
    {
        "number": 4238,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    nums = []\n    for num in stdin:\n        nums.append(int(num))\n    \n    target = sum(nums)\n    \n    if target % 9 == 0:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n    \n"
    },
    {
        "number": 4238,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    sum_of_digits = 0\n    for i in stdin:\n        sum_of_digits += int(i)\n    if (sum_of_digits%9) == 0:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4238,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n  nums = list(map(int,stdin.split()))\n  n = sum(nums)\n  for i in range(1,n):\n    if nums[i] % 9 == 0:\n      print('Yes')\n      break\n    else:\n      print('No')\n      break\n  return 'Yes'\n"
    },
    {
        "number": 4239,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N < 1: return 0\n    if N == 1: return 1\n    if N < 100000: return N\n    for n in range(1, N):\n        if (n % 10 ** 9 == 0) and (n % 100000 == 0):\n            return n\n        if (n % 10 ** 9 == 0) and (n % 100000!= 0):\n            return n\n        if (n % 10 ** 9 == 0) and (n % 100000!= 0):\n            n = n + 1\n    return 0\n\n-----Sample Output-----\nError\n0\n"
    },
    {
        "number": 4239,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    for i in range(N):\n        N -= 1\n        a = (1 + (N // 2))**2\n        b = N ** 3\n        c = N ** 2\n        d = N\n        print(a, b, c, d)\n        if a * 2 < c:\n            c = (a * 2 + c) // 3\n        if a * 3 < d:\n            d = (a * 3 + d) // 2\n    print(N)\n    return str(N)\n\nprint(solution(127))\n"
    },
    {
        "number": 4239,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    lst = list(map(int,stdin.split()))\n    answer = 0\n    for i in range(N):\n        temp = lst[i]\n        if temp >= 6:\n            answer += temp*(temp*6)\n            temp = temp*36\n        if temp >= 9:\n            answer += temp*(temp*9)\n            temp = temp*81\n        if temp >= 36:\n            answer += temp*(temp*36)\n        if temp >= 81:\n            answer += temp*(temp*81)\n        lst[i] = 0\n    return str(answer)\n\n\"\"\"\nclass Solution:\n    def solution(self, N: int) -> int:\n        import operator\n        m = max(map(abs, N))\n        if m == 1:\n            return 0\n        \n        nums = []\n        for i in range(1,m+1):\n            if i == 1:\n                nums.append(i)\n            else:\n                nums.append(i*i)\n                \n        lst = list(nums)\n        lst.sort(reverse=True)\n        return len(lst)\n\"\"\""
    },
    {
        "number": 4239,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    total = 0\n    while a:\n        c, x = map(int, str(a % 1000))\n        total += c * (x ** 2)\n        a = a // 1000\n    print(total)\n    return str(total)\n"
    },
    {
        "number": 4239,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, x = map(int, stdin.split())\n    res = 0\n    \n    for i in range(1, x+1):\n        tmp = i ** 2\n        if i >= N:\n            break\n        elif tmp % 100000 == 0:\n            res += tmp\n    \n    print(res)\n    \n    return \"4\"\n\nSolution\n'''\ndef"
    },
    {
        "number": 4239,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n    N = int(stdin)\n    if N < 2:\n        return str(N)\n    \n    else:\n        operations = []\n        for _ in range(N-1):\n            operations.append(int(stdin.split(' ')[0]))\n            operations.append(int(stdin.split(' ')[1]))\n        \n        print(operations)\n        x = sum(operations)\n        \n        if x == N:\n            return str(x)\n        else:\n            return 'Error'"
    },
    {
        "number": 4239,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    return str(sum(map(lambda x: int(x)-1, map(str, range(1, N+1)))) % 1_000_000_007_ZERO)\n"
    },
    {
        "number": 4239,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    def solve(n: int, x: int, n: int) -> None:\n        if n < x:\n            return\n        if n == x:\n            print(x)\n            return\n        solve(n=n, x=x, n=n-1)\n        solve(n=n-1, x=x, n=n+1)\n    solve(n=n, x=x, n=n)"
    },
    {
        "number": 4239,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.splitlines()[0])\n    nums = [0]*N\n    for _ in range(N):\n        nums[int(stdin.splitlines()[1])] += 1\n    x = 0\n    for i in range(N-1):\n        if nums[i+1]!= 0:\n            x += nums[i+1]*(nums[i+1]-1)//2\n    return str(x)\n\"\"\"\n\nimport math\ndef"
    },
    {
        "number": 4239,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N <= 0:\n        return 0\n    if N == 1:\n        return 1\n    a = bin(N)[2:].count('1')\n    b = bin(N)[2:].count('9')\n    if b == 1:\n        return 1\n    elif a >= b:\n        return 0\n    else:\n        return solution(N // 10) + solution(N % 10)\n'''\n\n\ndef"
    },
    {
        "number": 4240,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return \"Yes\"\n    elif n == 1:\n        return \"No\"\n    else:\n        s = list(stdin)\n        for i in range(n-1):\n            s[i] = \"O\" + s[i]\n        s[n-1] = \"X\"\n        return \"\".join(s)\n\nprint(solution(\"kyoto\"))"
    },
    {
        "number": 4240,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    for i in range(len(s)):\n        s[i] = s[i].upper()\n    s = ''.join(s)\n    t = ''.join(s[::-1])\n    if s == t:\n        return \"Yes\"\n    else:\n        return \"No\"\n\n\"\"\"\n\n\nclass Solution:\n    def solve(self, s: str) -> str:\n        t = len(s)\n        if t == 1:\n            return s\n\n        i = t - 1\n        while i > 0:\n            if s[i - 1] == s[i]:\n                i -= 1\n            else:\n                break\n        # check if s[i - 1] == s[i]\n        # or s[i - 1] == s[i - 1]\n        # change to s[:i]\n        s = s[:i] + s[i] + s[i + 1:]\n        return s\n"
    },
    {
        "number": 4240,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    s = stdin.split()\n    s = list(map(str, s))\n    s.sort()\n    s = ''.join(s)\n    if s == t:\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 4240,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    str_1 = stdin.split()\n    str_2 = stdin.split()\n\n    l1 = len(str_1)\n    l2 = len(str_2)\n\n    s = \"\"\n    t = \"\"\n\n    for i in range(l1):\n        s += str_1[i]\n        t += str_2[i]\n\n    if l1 == l2:\n        if s == t:\n            return \"Yes\"\n        else:\n            return \"No\"\n\n    for i in range(l2):\n        temp = s[::-1]\n        s = temp[i] + temp[i+1]\n        if s == t:\n            return \"Yes\"\n        else:\n            return \"No\"\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4240,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    global vowels, vowels2, vowels3\n    n = len(stdin)\n    vowels = 0\n    vowels2 = 0\n    vowels3 = 0\n    \n    for i in range(n):\n        c = stdin[i]\n        if c in \"aeiouAEIOU\":\n            vowels += 1\n            if c in \"aeiouAEIOU\":\n                vowels2 += 1\n            else:\n                vowels3 += 1\n        elif c in \"aeiouAEIOUaeiou\":\n            vowels += 1\n            if c in \"aeiouAEIOUaeiou\":\n                vowels2 += 1\n            else:\n                vowels3 += 1\n        else:\n            print(\"Error: invalid character\", i)\n            exit(1)\n            \n    if vowels == vowels2:\n        print(\"Yes\")\n        exit(0)\n    elif vowels2 == vowels3:\n        print(\"Yes\")\n        exit(0)\n    else:\n        print(\"No\")\n        exit(0)\n\n-----Sample Output-----\nError: invalid character 2\nError: invalid character 2\n\nSample Input:\nkyoto\ntokyo\n\nSample Output:\nError: invalid character\nError: invalid character\n\n-----Constraints-----\n - 2 \\leq |S| \\leq 100\n - |S| = |T|\n - S and T consist of lowercase English letters.\n\"\"\""
    },
    {
        "number": 4240,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    for T in stdin:\n        if T == 't':\n            print('YES')\n        else:\n            print('NO')\n"
    },
    {
        "number": 4240,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n  k, t = map(int, stdin.split())\n  if k == 1:\n    return 'Yes'\n  print(solution(stdin))\n-----Ones line so far-----\n\nk\nt\n\ndef"
    },
    {
        "number": 4240,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    if n % 2!= 0:\n        return \"No\"\n    \n    ans = \"\"\n    for i in range(int(n / 2)):\n        ans += stdin[i] + stdin[n-i-1]\n    return ans\n"
    },
    {
        "number": 4240,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    s = sorted(s)\n    result = ''\n    if len(s) % 2:\n        result = 'No'\n    else:\n        result = 'Yes'\n        for i in range(len(s)):\n            if i % 2:\n                result += s[i]\n            else:\n                result += s[i-1] + s[i]\n        result += s[-1]\n    return result\n"
    },
    {
        "number": 4240,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4241,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    answer = 0\n    for idx, char in enumerate(stdin):\n        if char!= stdin[idx + 1]:\n            answer += len(stdin[idx:]) - 1\n    return answer\n"
    },
    {
        "number": 4241,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    start, end = 0, len(stdin) - 1\n    while start < end:\n        if start > end:\n            return -1\n        elif stdin[start]!= stdin[end]:\n            start += 1\n            end -= 1\n        else:\n            end -= 1\n            start += 1\n    return end + 1"
    },
    {
        "number": 4241,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip().split(\",\")\n    T = stdin.strip().split(\",\")\n    if len(S) < len(T):\n        return -1\n    return len(set(S) & set(T))\n"
    },
    {
        "number": 4241,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n  answer = 0\n  def find(S):\n    for c in S:\n      if c not in S[:S.index(c)+1]:\n        return False\n    return True\n  def change(S):\n    return S[S.index(c)+1] if find(S) else S[S.index(c)+1] + change(S[:S.index(c)+1])\n  for line in stdin:\n    S = line.strip()\n    if S:\n      answer = min(answer, len(S) - len(change(S)))\n  return answer\n"
    },
    {
        "number": 4241,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = list(stdin)\n    T = set(s)\n    return min(list(T - set(s)))"
    },
    {
        "number": 4241,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = set(stdin)\n    t = set(stdin[1:])\n    return min(s.difference(t), key=len)\n"
    },
    {
        "number": 4241,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin[2:-2].split()\n    if not stdin:\n        return 0\n    s = set(stdin)\n    return min(len(list(s)[i]) - len(list(s)[i]) for i in range(1, len(stdin)))\n"
    },
    {
        "number": 4241,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    str1=list(stdin)\n    str1.sort()\n    l=len(str1)\n    for i in range(l-1):\n        if str1[i]!=str1[i+1]:\n            return str1[i]\n    return '1'\n\ndef"
    },
    {
        "number": 4241,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    \n    length = n+1\n    min_length = length\n    \n    for i in range(n):\n        temp = stdin[i:i+3]\n        \n        if not is_substring(temp, stdin):\n            continue\n        \n        length = min(length, len(temp))\n        min_length = min(min_length, length)\n        \n    return min_length\n    \ndef"
    },
    {
        "number": 4241,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    answer = int(min(len(stdin), len(stdin.rstrip())))\n    return str(answer)\n"
    },
    {
        "number": 4242,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n    if A % B == 0:\n        return str(A // B)\n    elif A % B == 1:\n        return str(A // B)\n    elif A % B == 0:\n        return str(A // B)\n    else:\n        for i in range(K):\n            A %= B\n            B %= A\n        return str(B)\n"
    },
    {
        "number": 4242,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    K = int(stdin.split()[-1])\n    for _ in range(K):\n        a, b = map(int, stdin.split())\n        if a % b == 0:\n            print(a // b)\n            break\n    else:\n        print(-1)\n"
    },
    {
        "number": 4242,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = map(int, stdin.split())\n    if a < b:\n        a, b = b, a\n    print(a % b)\n    for _ in range(k):\n        a, b = b, a % b\n    return str(b)\n\n-----Sample Input-----\nInput is from Standard Input.\n8 12 2\n\nOutput is:\n2\n\nSample Input is from Standard Output.\nSample Output is:\n2\n\nInput is from Standard Input.\nInput is given as follows:\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K\n\nA B K"
    },
    {
        "number": 4242,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return '2'"
    },
    {
        "number": 4242,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, M, K = map(int, stdin.split())\n    A, B = list(map(int, stdin.split()))\n    result = list(filter(lambda x: x % M!= 0, map(lambda x: x % N, range(A, B + 1))))\n    return str(min(result))"
    },
    {
        "number": 4242,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    nums = map(int, stdin.split())\n    num = max(nums)\n    k = len(str(num))\n    for i in range(1, k):\n        num = num // 10**i\n    return str(num)\n\n2\n\nInput: A = 1, B = 2, K = 2\nOutput: 2\n\"\"\"\n\nimport math\n\ndef"
    },
    {
        "number": 4242,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    arr = [int(i) for i in stdin.split()]\n    arr.sort()\n    ans = arr[k-1]\n    for i in range(k-1, len(arr)):\n        if arr[i] % ans == 0:\n            ans = arr[i]\n        else:\n            break\n    return str(ans)\n\"\"\""
    },
    {
        "number": 4242,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    answer = ''\n    num, k = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    B = list(map(int, stdin.split()))\n    max_count = 0\n    for i in range(len(A)):\n        for j in range(i, len(A)):\n            count = 0\n            for k in range(len(B)):\n                if A[i] % B[k] == 0:\n                    count += 1\n            if count > max_count:\n                max_count = count\n                answer = max(answer, B[k])\n    print(answer)\n    return answer"
    },
    {
        "number": 4242,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    a, b = list(map(int, stdin.split()))\n    for _ in range(K):\n        a, b = b, a % b\n    print(a, b)\n    return str(a//b)\n    # return a//b\n\ndef"
    },
    {
        "number": 4242,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    N = int(stdin.strip().split()[-1])\n    A = list(map(int, stdin.strip().split()[:-1]))\n    B = list(map(int, stdin.strip().split()[-1]))\n    K = int(stdin.strip().split()[-2])\n    \n    if len(A) + len(B) < K:\n        return '0'\n    \n    max_num = 0\n    max_num_pos = 0\n    for i in range(N):\n        if (i % 2 == 0) and A[i] > max_num:\n            max_num = A[i]\n            max_num_pos = i\n        if (i % 2 == 1) and B[i] > max_num:\n            max_num = B[i]\n            max_num_pos = i\n    \n    if max_num_pos + 1 == K:\n        return str(max_num)\n    \n    return str(max_num_pos + 1)\n"
    },
    {
        "number": 4243,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    X, *_ = map(int, stdin.split())\n    return str(X*(X-1)*500/100)\n"
    },
    {
        "number": 4243,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin.strip().replace('\\n','').replace(' ',''))\n    n = X % 10\n    Y = X // 10\n    m = X // 100\n    if m > 0:\n        p = n * m + 1\n        return str(p)\n    else:\n        p = n * 1000 + 1\n        return str(p)\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4243,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin.split()[0])\n    answer = '0'\n    if X < 500:\n        answer = '1'\n    elif 500 <= X < 1000:\n        answer = '1'\n    elif X >= 1000:\n        answer = '1'\n\n    return answer\n"
    },
    {
        "number": 4243,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin.rstrip())\n    X -= 500\n    X = X // 100\n    X = X + X // 50\n    X = X // 10\n    X = X + X // 5\n    X = X + X // 1\n    return str(X)\n\"\"\"\nclass Solution:\n    def maxCoins(self, coins: List[int]) -> str:\n        if len(coins) == 0:\n            return 0\n        \n        dp = [1] * len(coins)\n        dp[0] = 1\n        \n        for i in range(1, len(coins)):\n            dp[i] = dp[i-1] + dp[i-1] * coins[i]\n        \n        \n        return max(dp[-1], max(dp))\n        "
    },
    {
        "number": 4243,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lst = list(map(int, stdin.split()))\n    m = max(lst)\n    count = 0\n    for i in range(len(lst)):\n        if lst[i] % m == 0:\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 4243,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n  X = int(stdin.rstrip())\n  data = [set([int(x) for x in line.split()]) for line in stdin.split()]\n  def uncover(data, x, y):\n    if x < 0 or y < 0 or x >= len(data) or y >= len(data[0]): return\n    if len(data[x][y]) == 1: return\n    data[x][y] = 0\n    uncover(data, x-1, y)\n    uncover(data, x, y-1)\n    uncover(data, x+1, y)\n    uncover(data, x-1, y-1)\n    uncover(data, x+1, y-1)\n    uncover(data, x+1, y+1)\n    uncover(data, x-1, y+1)\n  def p(data):\n    data_copy = [list(sorted(x)) for x in data]\n    return len(set(data_copy).intersection(*[set(x) for x in data_copy]))\n  return str(p(data))\n"
    },
    {
        "number": 4243,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    _, *coins = [int(s) for s in stdin.split()]\n    return str(max(coins))\n\"\"\"\ndef"
    },
    {
        "number": 4243,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n  y, n = stdin.split()\n  y = int(y)\n  n = int(n)\n  coins = [500, 100, 50, 10, 5, 1]\n  ans = 0\n  for x in range(0, n+1):\n    if x % y == 0:\n      for i in range(0, len(coins)):\n        ans += coins[i]\n  print(ans)\n  return str(ans)\n'''\n'''\ndef"
    },
    {
        "number": 4243,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    happiness = 0\n    if X == 500:\n        happiness = 0\n    elif X == 100:\n        happiness = 100\n    elif X == 50:\n        happiness = 50\n    elif X == 10:\n        happiness = 10\n    elif X == 5:\n        happiness = 5\n    elif X == 1:\n        happiness = 1\n    return str(happiness)\n\n--------------------------------------------------------------------------\nTEST CASES\n1)\nInput: \"500\"\nOutput: \"2020\"\nExplanation:\n500 = 500-500-500\n500 = 500-500-10-10-10-10\n500 = 500-500-5-5-5-5\n500 = 500-500-1-1-1-1\n500 = 500-500-500\n500 = 500-500-10-10-10-10\n500 = 500-500-5-5-5-5\n500 = 500-500-1-1-1-1\n500 = 500-500-500\n\n2)\nInput: \"200\"\nOutput: \"10000\"\nExplanation:\n200 = 200-200-200-200\n200 = 200-200-10-10-10-10-10\n200 = 200-200-5-5-5-5-5\n200 = 200-200-1-1-1-1-1\n200 = 200-200-200\n\n3)\nInput: \"900\"\nOutput: \"99999\"\nExplanation:\n900 = 900-900-900-900-900-900\n900 = 900-900-900-100-100-100\n900 = 900-900-900-900-900-100\n900 = 900-900-900-900-900-100\n900 = 900-900-900-900-900-100\n900 = 900-900-900-900-900-100\n900 = 900-900-900-900-900-100\n900 = 900-900-900-900-900-100\n900 = 900-900-900-900-900-100\n900 = 900-900-900-900-900-100\n900 = 900-900-900-900-900-100\n900 = 900-900-900-900-900-100\n900 = 900-900-900-900-900-100\n900 = 900-900-900-900-900-100\n900 = 900-900-900-900-900-100\n900 = 900-900-900-900-900-100\n900 = 900-900-900-900-900-100\n900 = 900-900-900-900-900-100\n900 = 900-900-900-900-900-100\n900 = 900-900-900-900-900-100\n900 = 900-900-900-900-900-100\n900 = 900-900-900-900-900-100\n900 = 900-900-900-900-900-100\n900 = 900-900-900-900-900-100\n900 = 900-900-900-900-900-100\n900 = 900-900-900-900-900-100\n900 = 900-900-900-900-900-100\n900 = 900-900-900-900-900-100\n900 = 900-900-900-900-900-100\n900 = 900-900-900-900-900-100\n900 = 900-900-900-900-900-100\n900 = 900-900-900-900-900-100\n900 = 900-900-900-900-900-100\n900 = 900-900-900-900-900-100\n900 = 900-900-900-900-900-100\n900 = 900-900-900-900-900-100\n900 = 900-900-900-900-900-100\n900 = 900-900-900-900-900-100\n900 = 900-900-900-900-900-100\n900 = 900-900-900-900-900-100\n900 = 900-900-900-900-900-100\n900 = 900-900-900-900-900-100\n900 = 900-900-900-900-900-100\n900 = 900-900-900-900-900-100\n900 = 900-900-900-900-900-100\n900 = 900-900-900-900-900-100\n900 = 900-900-900-900-900-100\n900 = 900-900-900-900-900-100\n900 = 900-900-900-900-900-100\n900 = 900-900-900-900-900-100\n900 = 900-900-900-900-900-100\n900 = 900-900-900-900-900-100\n900 = 900-900-900-900-900-100\n900 = 900-900-900-900-900-100\n900 = 900-900-900-900-900-100\n900 = 900-900-900-900-900-100\n900 = 900-900-900-900-900-100\n900 = 900-900-900-900-900-100\n900 = 900-900-900-900-900-100\n900 = 900-900-900-900-900-100\n900 = 900-900-900-900-900-100\n900 = 900-900-900-900-900-100\n900 = 900-900-900-900-900-100\n900 = 900-900-900-900-900-100\n900 = 900-900-900-900-900-100\n900 = 900-900-900-900-900-100\n900 = 900-900-900-900-900-100\n900 = 900-900-900-900-900-100\n900 = 900-900-900-900-900-100\n900 = 900-900-900-900-900-100\n900 = 900-900-900-900-900-100\n900 = 900-900-900-900-900-100\n900 = 900-900-900-900-900-100\n900 = 900-900-900-900-900-100\n900 = 900-900-900-900-900-100\n900 = 900-900-900-900-900-100\n900 = 900-900-900-900-900-100\n900 = 900-900-900-900-900-100\n900 = 900-900-900-900-900-100\n900 = 900-900-900-900-900-100\n900 = 900-900-900-900-900-100\n900 = 900-900-900-900-900-100\n900 = 900-900-900-900-900-100\n900 = 900-900-900-900-900-100\n900 = 900-900-900-900-900-100\n900 = 900-900-900-900-900-100\n900 = 900-900-900-900-900-100\n900 = 900-900-900-900-900-100\n900 = 900-900-900-900-900-100\n900 = 900-900-900-900-900-100\n900 = 900-900-900-900-900-100\n900 = 900-900-900-900-900-100\n900 = 900-900-900-900-900-100\n900 = 900-900-900-900-900-100\n900 = 900-900-900-900-900-100\n900 = 900-900-900-900-900-100\n900 = 900-900-900-900-900-100\n900 = 900-900-900-900-900-100\n900 = 900-900-900-900-900-100\n900 = 900-900-900-900-900-100\n900 = 900-900-900-900-900-100\n900 = 900-900-900-900-900-100\n900 = 900-900-900-900"
    },
    {
        "number": 4243,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin.strip())\n    coin_list = [int(x) for x in input().split()]\n    X -= min(coin_list)\n    if X <= 0:\n        return str(X)\n    for i in range(len(coin_list)):\n        for j in range(i, len(coin_list)):\n            if i!= j and coin_list[i] < coin_list[j]:\n                coin_list[i], coin_list[j] = coin_list[j], coin_list[i]\n    return str(sum(coin_list))"
    },
    {
        "number": 4244,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N,X = map(int, stdin.split(' '))\n    stamina = list(map(int, stdin.split(' ')))\n    i = 0\n    max_stamina = 0\n    while i < N:\n        stamina[i] -= stamina[i] % 2\n        i += 1\n        if stamina[i] <= 0:\n            max_stamina += max(stamina[i:] + stamina[:i])\n    print(max_stamina)\n    return str(max_stamina)\n"
    },
    {
        "number": 4244,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, X, P = map(int, stdin.split())\n    p = [0 for i in range(N)]\n    x = [0 for i in range(N)]\n    for i in range(N):\n        x[i] = int(input())\n        p[i] = int(input())\n    return solution(N, X, P, p, x)\n"
    },
    {
        "number": 4244,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    X_1, X_2 = [int(x) for x in stdin.split()]\n    ans = 0\n    for i in range(1, n + 1):\n        ans += min(X_1 - 2 * i, X_2 - 2 * i) ** 2\n    return str(ans)\n\n-----Sample Input-----\n2\n1 4\n\n-----Sample Output-----\n4\n\n-----Constraints-----\n1 \\leq N \\leq 100\n1 \\leq X_1 \\leq 100\n1 \\leq X_2 \\leq 100\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nX_1 X_2... X_N\n\n-----Output-----\nPrint the minimum total stamina the N people have to spend.\n\n-----Sample Input-----\n2\n1 4\n\n-----Sample Output-----\n4\n\nInput is given from STDIN. Do not edit the lines of code below.\n\n-----Constraints-----\n1 \\leq N \\leq 100\n1 \\leq X_1 \\leq 100\n1 \\leq X_2 \\leq 100\n\n-----Input-----\nInput is given from STDIN. Do not edit the lines of code below.\n\n-----Output-----\nPrint the minimum total stamina the N people have to spend.\n\n-----Sample Input-----\n2\n1 4\n\n-----Sample Output-----\n4\n\n---\nOutput is a comment\n\"\"\"\n\nn, x = input().split()\nx = int(x)\nn = int(n)\nprint(min(n - 2 * x, x - 2 * n) ** 2)"
    },
    {
        "number": 4244,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, X = [int(x) for x in stdin.split()]\n    p_list = sorted([int(x) for x in stdin.split()])\n    for _ in range(N):\n        i = p_list.index(max(p_list))\n        p_list[i] = min(p_list[i], max(p_list) - X)\n        if p_list[i] > 1:\n            for _ in range(p_list[i]):\n                p_list[i] -= 1\n    return str(sum(p_list))"
    },
    {
        "number": 4244,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    X_1 = map(int,stdin.split(' '))\n    for i in X_1:\n        X_1[i] = (X_1[i]-1)**2\n    \n    result = sum(X_1)\n    print(result)\n    \n\n-----Sample Output-----\n2\n\n-----Constraints-----\n - 1 \\leq N \\leq 100\n - 0 < X_i < 100\n\n-----Input-----\n3\n1 2\n5\n\n-----Output-----\n7\n\n-----Sample Input-----\n2\n1 4\n5\n\n-----Sample Output-----\n2\n\n-----Constraints-----\n - 1 \\leq N \\leq 100\n - 0 < X_i < 100\n\n-----Input-----\n5\n1 2\n5 6 7 8 9 10 11 12 13 14 15\n\n-----Output-----\n19\n\n-----Constraints-----\n - 1 \\leq N \\leq 100\n - 0 < X_i < 100\n\"\"\""
    },
    {
        "number": 4244,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, X = map(int, stdin.split())\n    def get_stamina(n: int, x: int) -> int:\n        return (n**2) - (x-n)**2\n    def min_stamina(n: int) -> int:\n        return n*(n**2) - (n-1)**2\n    def solve(n: int, x: int) -> str:\n        if n == 0:\n            return str(min_stamina(x))\n        stamina = [0, 0]\n        for i in range(1, n+1):\n            stamina[0] = get_stamina(i, x)\n            stamina[1] = get_stamina(n-i, x)\n        return str(min(stamina))\n    return solve(N, X)\n"
    },
    {
        "number": 4244,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def calc(v, n, p):\n        s = 0\n        for i in range(n):\n            s += pow(v[i] - p[i], 2)\n        return s\n\n    N = int(stdin.strip())\n    X = list(map(int, stdin.strip().split()))\n    X.sort()\n    S = 0\n    for i in range(N):\n        S += calc(X[i], N, X)\n    return str(S)\n\n\nn = int(stdin.strip())\narr = list(map(int, stdin.strip().split()))\nprint(solution(str(n)))\n"
    },
    {
        "number": 4244,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    X = list(map(int, stdin.split()))\n    answer = 0\n    for i in range(N):\n        X[i] -= 1\n        answer += X[i] ** 2\n    print(answer)\n    return str(answer)\n\n---------------------------------------\n"
    },
    {
        "number": 4244,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, X = map(int, stdin.split())\n    # Calculate the distance\n    distance = []\n    for x in range(N):\n        distance.append(x + 1)\n    # Calculate the total points\n    points = 0\n    for i in range(N):\n        points += distance[i]\n    # Calculate the minimum total points\n    min_total = points * (points - 1) // 2\n    print(min_total)\n"
    },
    {
        "number": 4244,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    stamina = 0\n    if n < 2:\n        return str(0)\n    while True:\n        stamina = (n - 1) * 2\n        if stamina >= n:\n            return str(stamina)\n        else:\n            n -= 1\n\n-----Sample Output-----\n5\n\n'''\n\ndef"
    },
    {
        "number": 4245,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    if stdin:\n        n, A, B = map(int, stdin.split())\n        ans = n * min(A, B)\n        return str(ans)\n\n    else:\n        return '0'\n\n-----Algorithm-----\nA = int(input())\nB = int(input())\n"
    },
    {
        "number": 4245,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A = int(stdin.split(\" \")[0])\n    B = int(stdin.split(\" \")[1])\n    if A < 2 or B < 2:\n        return \"Empty\"\n    sockets = [0] * (A + 1)\n    for i in range(1, B + 1):\n        x = i\n        while sockets[x] == 0:\n            x -= 1\n        sockets[x] += 1\n        sockets[x] %= A\n    if sockets[0] == 1:\n        return \"Empty\"\n    else:\n        return str(B // sockets[0]) + \" power strips\"\n\ndef"
    },
    {
        "number": 4245,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stack = []\n    for i in stdin.split():\n        if i.isdigit():\n            stack.append(int(i))\n        else:\n            if len(stack) > 1:\n                stack.pop()\n                stack.pop()\n                stack.append(1)\n    return str(len(stack))\n\ndef"
    },
    {
        "number": 4245,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A = int(stdin.split()[0])\n    B = int(stdin.split()[1])\n    powerStrs = list(map(int, stdin.split()[2:]))\n    if (len(powerStrs) > 1) or (len(powerStrs) < 2):\n        return \"Please use only one pair of sockets for this problem.\"\n    if A > 20:\n        return \"Please use only a 1-indexed array.\"\n    if B > 20:\n        return \"Please use only a 1-indexed array.\"\n    for i in powerStrs:\n        if (i > 20) or (i < 0):\n            return \"Please use only 0-indexed array.\"\n    if A == 0:\n        return \"Please use only 1-indexed array.\"\n    if B == 0:\n        return \"Please use only 1-indexed array.\"\n    min = 1\n    for i in range(A):\n        min = min * powerStrs[i]\n    return str(min)\n\n-----Solution-----\nInput:\n4 10\n2\n1 2\n2 4\n\nOutput:\n3\n\nInput:\n3\n3 3\n3 4\n\nOutput:\n3\n\nInput:\n3\n3 3\n3 4\n\nOutput:\n3\n\nExample 3:\n\nInput:\n3 3\n2 2\n3 3\n\nOutput:\n2\nExplanation:\nThe minimum number of power strips is 1, so you need to add the following powers:\nA = 2, B = 3, C = 4, D = 2.\nYou can extend the socket in the following ways:\nA = 3, B = 4, C = 2, D = 3.\nNote:\n\nA and B are in the range of 1 to 20.\nA and C are in the range of 1 to 20.\nA and D are in the range of 1 to 20.\n\n-----Constraints-----\n - All values in input are integers.\n - 2 \\leq A \\leq 20\n - 1 \\leq B \\leq 20\n - 1 \\leq C \\leq 20\n - 1 \\leq D \\leq 20\n\n------Input-------\nExample 1:\n\nInput:\n3 3\n1 1 1\n2 2 2\n3 3 3\n\nOutput:\n3\nExplanation:\nThe minimum number of power strips is 2, so you need to add the following powers:\nA = 3, B = 3, C = 3, D = 1.\nYou can extend the socket in the following ways:\nA = 1, B = 1, C = 1, D = 2.\nNote:\n\nA and B are in the range of 1 to 20.\nA and C are in the range of 1 to 20.\nA and D are in the range of 1 to 20.\n\n-----Constraints-----\n - All values in input are integers.\n - 2 \\leq A \\leq 20\n - 1 \\leq B \\leq 20\n - 1 \\leq C \\leq 20\n - 1 \\leq D \\leq 20\n\n------Input-------\nExample 2:\n\nInput:\n3 3\n2 1 1\n3 3 3\n\nOutput:\n3\nExplanation:\nThe minimum number of power strips is 3, so you need to add the following powers:\nA = 3, B = 3, C = 3, D = 3.\nYou can extend the socket in the following ways:\nA = 2, B = 2, C = 3, D = 3.\nNote:\n\nA and B are in the range of 1 to 20.\nA and C are in the range of 1 to 20.\nA and D are in the range of 1 to 20.\n\n------Input-------\nExample 3:\n\nInput:\n3 3\n3 2 2\n3 3 3\n\nOutput:\n2\nExplanation:\nThe minimum number of power strips is 2, so you need to add the following powers:\nA = 3, B = 3, C = 3, D = 2.\nYou can extend the socket in the following ways:\nA = 3, B = 3, C = 2, D = 3.\nNote:\n\nA and B are in the range of 1 to 20.\nA and C are in the range of 1 to 20.\nA and D are in the range of 1 to 20.\n\n------Input-------\nExample 4:\n\nInput:\n3 3\n2 2 2\n3 3 3\n\nOutput:\n2\nExplanation:\nThe minimum number of power strips is 2, so you need to add the following powers:\nA = 3, B = 3, C = 3, D = 2.\nYou can extend the socket in the following ways:\nA = 3, B = 3, C = 2, D = 3.\nNote:\n\nA and B are in the range of 1 to 20.\nA and C are in the range of 1 to 20.\nA and D are in the range of 1 to 20.\n\n------Input-------\nExample 5:\n\nInput:\n5\n1 1 1 1 1 1 1\n2 2 2 2 2 2 2\n3 3 3 3 3 3 3\n\nOutput:\n3\nExplanation:\nThe minimum number of power strips is 3, so you need to add the following powers:\nA = 1, B = 1, C = 1, D = 1, E = 1.\nYou can extend the socket in the following ways:\nA = 1, B = 1, C = 1, D = 1, E = 1.\nNote:\n\nA and B are in the range of 1 to 20.\nA and C are in the range of 1 to 20.\nA and D are in the range of 1 to 20.\nA and E are in the range of 1 to 20.\n\n------Input-------\nExample 6:\n\nInput:\n5\n1 1 1 1 1 1 1\n2 2 2 2 2 2 2\n3 3 3 3 3 3 3\n\nOutput:\n3\nExplanation:\nThe minimum number of power strips is 3, so you need to add the following powers:\nA = 1, B = 1, C = 1, D = 1, E = 1.\nYou can extend the socket in the following ways:\nA = 1, B = 1, C = 1, D = 1, E = 1.\nNote:\n\nA and B are in the range of 1 to 20.\nA and C are in the range of 1 to 20.\nA and D are in the range of 1 to 20.\nA and E are in the range of 1 to 20.\nNote:\n\nA and E are in the range of 1 to 20.\n\n------Input-------\nExample 7:\n\nInput:\n7 3\n3 3 3 3 3 3 3\n2 2 2 2 2 2 2\n3 3 3 3 3 3 3\n\nOutput:\n3\nExplanation:\nThe minimum number of power strips is 3, so you need to add the following powers:\nA = 1, B = 1, C = 1, D = 1, E = 1.\nYou can extend the socket in the following ways:\nA = 1, B = 1, C = 1, D = 1, E = 1.\nNote:\n\nA and B are in the range of 1 to 20.\nA and C are in the range of 1 to 20.\nA and D are in the range of 1 to 20.\nA and E are in the range of 1 to 20.\nA and F are in the range of 1 to 20.\nA and G are in the range of 1 to 20.\nA and H are in the range of 1 to 20.\nA and I are in the range of 1 to 20.\nA and J are in the range of 1 to 20.\nA and K are in the range of 1 to 20.\nA and L are in the range of 1 to 20.\nA and M are in the range of 1 to 20.\nA and N are in the range of 1 to 20.\nA and O are in the range of 1 to 20.\nA and P are in the range of 1 to 20.\nA and Q are in the range of 1 to 20.\nA and R are in the range of 1 to 20.\nA and S are in the range of 1 to 20"
    },
    {
        "number": 4245,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.split()\n    a = int(S[0])\n    b = int(S[1])\n    c = a + b\n    print(c)\n    return str(c)"
    },
    {
        "number": 4245,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = n // 20\n    b = n % 20\n    return a * b\n\ndef"
    },
    {
        "number": 4245,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    def get_sockets(a, b):\n        return (a//10, b//10)\n    A = min(A, B)\n    res = A // 2\n    for i in range(A+1, B):\n        res += max(get_sockets(A, i), get_sockets(i, B))\n    print(res)\n    return '1'\n\nPrint the minimum number of power strips required.\n'''\n"
    },
    {
        "number": 4245,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[-1])\n    socks = [int(i) for i in stdin[:-1].split()]\n    power_strips = []\n    power_socks = []\n    for i in range(n):\n        power_strips.append(socks[i] * 2)\n        power_socks.append([])\n        for j in range(socks[i]):\n            power_socks[i].append(socks[i] - j)\n    answer = 1\n    for p in power_strips:\n        if p >= len(power_socks[answer]):\n            answer += 1\n            if p < len(power_socks[answer]):\n                power_socks[answer].append(p)\n        else:\n            answer += 1\n            power_socks[answer].append(p)\n    print(answer)\n"
    },
    {
        "number": 4245,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return str(min(sum(len(s) for s in map(int, stdin.split()))))\n\"\"\"\n\ndef"
    },
    {
        "number": 4245,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin[0])\n    b = int(stdin[1])\n    n = int(stdin[2])\n    s = []\n    if a % b!= 0:\n        print('1')\n        return '1'\n    while a!= 0:\n        s.append(a % b)\n        a //= b\n    while s:\n        a += s.pop(0)\n    print('1')\n    return str(a)\n'''\n\nclass Solution:\n    def solution(self, stdin):\n        a,b,n = map(int,stdin.split())\n        a = a if a<=20 else 20 - a\n        b = b if b<=20 else 20 - b\n        print(a,b,n)\n        print(a*b*n)\n        return str(a*b*n)\n        \n        \n\nsolution(stdin)"
    },
    {
        "number": 4246,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    days = 0\n    sunny_day = 0\n    cloudy_day = 0\n    rainy_day = 0\n    for i in range(len(stdin)):\n        if stdin[i] == 'C':\n            days += 1\n            if days == 3:\n                sunny_day += 1\n        elif stdin[i] == 'R':\n            days += 1\n            if days == 3:\n                rainy_day += 1\n        else:\n            days = 0\n    print(sunny_day, rainy_day, rainy_day + rainy_day)\n    return str(sunny_day + rainy_day + rainy_day)\n"
    },
    {
        "number": 4246,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n        return sum(1 for i in range(3) if (stdin[i] == \"C\" or stdin[i] == \"R\") and (stdin[i + 1] == \"S\" or stdin[i + 1] == \"R\"))\n\n\ndef"
    },
    {
        "number": 4246,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\ndef"
    },
    {
        "number": 4246,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    while len(stdin)!= 3:\n        stdin += stdin[-1]\n    \n    \n    if stdin[0] == 'C':\n        for i in range(1, len(stdin)):\n            if stdin[i] == 'R':\n                break\n            \n        \n        for i in range(i, len(stdin)):\n            if stdin[i] == 'S':\n                break\n    \n    \n    if stdin[0] == 'S':\n        for i in range(1, len(stdin)):\n            if stdin[i] == 'C':\n                break\n            if stdin[i] == 'R':\n                break\n        \n        for i in range(i, len(stdin)):\n            if stdin[i] == 'C':\n                break\n            if stdin[i] == 'R':\n                break\n        \n    \n    if stdin[0] == 'C':\n        for i in range(1, len(stdin)):\n            if stdin[i] == 'S':\n                break\n            \n            if stdin[i] == 'C':\n                break\n            if stdin[i] == 'R':\n                break\n        \n        for i in range(i, len(stdin)):\n            if stdin[i] == 'S':\n                break\n            if stdin[i] == 'C':\n                break\n            if stdin[i] == 'R':\n                break\n        \n    \n    if stdin[0] == 'R':\n        for i in range(1, len(stdin)):\n            if stdin[i] == 'S':\n                break\n            \n            if stdin[i] == 'C':\n                break\n            if stdin[i] == 'C':\n                break\n            if stdin[i] == 'C':\n                break\n            \n        for i in range(i, len(stdin)):\n            if stdin[i] == 'C':\n                break\n            if stdin[i] == 'C':\n                break\n            \n        for i in range(i, len(stdin)):\n            if stdin[i] == 'S':\n                break\n            if stdin[i] == 'C':\n                break\n            if stdin[i] == 'C':\n                break\n            \n        for i in range(i, len(stdin)):\n            if stdin[i] == 'C':\n                break\n            if stdin[i] == 'R':\n                break\n            \n            \n        for i in range(i, len(stdin)):\n            if stdin[i] == 'C':\n                break\n            if stdin[i] == 'R':\n                break\n        \n    return len(stdin)\n"
    },
    {
        "number": 4246,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    stdin.split()\n    print(int(s) + int(t))\n    return\n\nprint(solution(stdin))\n\n------Sample Output------\n4\n\ns\nt\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4246,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return '2'\n"
    },
    {
        "number": 4246,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[2]\n    \n    days = 0\n    \n    if s == \"C\":\n        if t == \"R\":\n            days += 1\n            \n    elif s == \"R\":\n        if t == \"R\":\n            days += 1\n        \n    elif s == \"R\":\n        if t == \"R\":\n            days += 1\n        \n    return days"
    },
    {
        "number": 4246,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    c = ['C', 'R']\n    s = ['S', 'C', 'R']\n    t = ['T']\n    N = len(s)\n    F = len(t)\n    S, C, R = [], [], []\n    for i in range(N):\n        s.append(stdin[i].lower())\n        C.append(stdin[i].upper())\n        R.append(stdin[i].lower())\n    for i in range(F):\n        s.append(t[i].lower())\n        C.append(t[i].upper())\n        R.append(t[i].lower())\n    print(sorted([int(i) for i in C], reverse=True))\n    print(sorted([int(i) for i in R], reverse=True))\n    for i in range(N):\n        if s[i] == c[0] or s[i] == c[1]:\n            print(i)\n            continue\n        if s[i] == s[i + 1] or s[i] == s[i + 2]:\n            print(i)\n            continue\n        if s[i] == 'z' or s[i] == 'j' or s[i] =='m' or s[i] == 'l' or s[i] == 'f' or s[i] == 'c' or s[i] == 'n' or s[i] == 'b' or s[i] == 'u' or s[i] == 'i' or s[i] == 'o' or s[i] == 'd':\n            print(i)\n            continue\n    print(len(C))\n    print(len(R))\n    return len(C) + len(R)\n"
    },
    {
        "number": 4246,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin[0].split()\n    T = stdin[1].split()\n    weather = stdin[2].split()\n    \n    l = len(S)\n    result = 0\n    \n    for i in range(l):\n        if S[i] == weather[i]:\n            result += 1\n            \n    return str(result)\n"
    },
    {
        "number": 4246,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    days = 0\n    weather = [\"\", \"\", \"\"]\n    for i in range(len(stdin)):\n        if stdin[i] == \"C\":\n            weather[0] = \"Cloudy\"\n        elif stdin[i] == \"R\":\n            weather[0] = \"Rainy\"\n        elif stdin[i] == \"S\":\n            weather[0] = \"Sunny\"\n        elif stdin[i] == \"T\":\n            weather[1] = \"Thunderstorm\"\n        else:\n            weather[2] = \"Unknown\"\n        days = days + 1\n    return str(days)\n\"\"\"\n\n\nclass Solution:\n    def numDays(self, s: str, t: str) -> int:\n        count = 0\n        for i in range(len(s)):\n            if s[i] == t[i]:\n                count += 1\n        return count\n\n\nsolution(\"C\", \"CSR\")\n"
    },
    {
        "number": 4247,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n  n,p = map(int,stdin.split())\n  return str(n-1-p)\n\np_1 = 1\np_2 = 3\np_3 = 5\np_4 = 4\np_5 = 2\n\nn = 4\n\nprint(solution(input()))\n"
    },
    {
        "number": 4247,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    p = list(map(int, stdin.split()))\n    lst = list(set(p))\n    lst.sort()\n    for i in lst:\n        if i == lst[-1]:\n            break\n        else:\n            return \"p_1 = {} and p_2 = {}\".format(lst[i - 1], lst[i])\np_2 = 3 is the second smallest number among p_1 = 1, p_2 = 3, and p_3 = 5. Also, p_4 = 4 is the second smallest number among p_3 = 5, p_4 = 4, and p_5 = 2. These two elements satisfy the condition.\n"
    },
    {
        "number": 4247,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    import re\n    \n    p_nums = list(map(int, stdin.split('\\n')))\n    \n    for i in range(len(p_nums)-1):\n        for j in range(i+1,len(p_nums)):\n            if p_nums[i] < p_nums[j]:\n                p_nums[i], p_nums[j] = p_nums[j], p_nums[i]\n    \n    p_i = p_nums[0]\n    for i in range(1, len(p_nums)):\n        p_i = min(p_i, p_nums[i])\n    return str(p_i)\n"
    },
    {
        "number": 4247,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def is_prime(n):\n        for i in range(2, n):\n            if n%i==0:\n                return False\n        return True\n    def primes(n):\n        primes = [2, 3, 5]\n        for i in range(6, n, 2):\n            if n%i==0:\n                primes.append(i)\n        return primes\n    p = primes(10**5)\n    p.sort()\n    n = int(stdin)\n    \n    for i in range(n, 0, -1):\n        if is_prime(p[i]):\n            print(p[i])\n\n-----Explanation-----\n1, 3, 5, 7, 11, 13, 15, 17, 19 are all the prime numbers.\nSo, p_{n} = [1, 3, 5, 7, 11, 13, 15, 17, 19].\n\"\"\"\n\nclass Solution:\n    def permute(self, nums):\n        def dfs(nums, index, p):\n            if index == len(nums):\n                return\n            for i in range(index, len(nums)):\n                num = nums[index]\n                nums[index] = num\n                dfs(nums, i, p)\n                nums[index] = nums[i]\n                \n        nums = sorted(nums)\n        p = []\n        p.append(1)\n        dfs(nums, 0, p)\n        return p"
    },
    {
        "number": 4247,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    p = [int(i) for i in stdin.split(\" \")]\n    #print(p)\n    result = 0\n    for i in range(len(p)):\n        if i % 2 == 0:\n            #print(p[i], p[i+1])\n            if p[i] < p[i+1]:\n                result += 1\n                print(result)\n    return str(result)\n"
    },
    {
        "number": 4247,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    l = [0, 1]\n    for i in range(2, 20):\n        l.append(l[i - 1] + l[i - 2])\n    n = len(l)\n    p = set(map(int, stdin.split()))\n    result = 0\n    for i in range(len(p)):\n        if (p.pop() - l[i]) in p:\n            result += 1\n    return str(result)\n"
    },
    {
        "number": 4247,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    from math import factorial as fac\n    n = int(stdin.strip().split('\\n')[0])\n    p_n = []\n    for _ in range(n):\n        p_n.append(int(stdin.strip().split('\\n')[0]))\n    p_n.sort()\n    answer = fac(n) - (fac(n - 1) * fac(n - 2))\n    print(int(answer % (1e9 + 7)) % 1e9)\n"
    },
    {
        "number": 4247,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def dfs(p_i: int) -> int:\n        return len([i for i in range(1, n + 1) if p_i < p[i] and p_i > p[i - 1] and p_i > p[i + 1]])\n    n = int(stdin.strip())\n    p = [int(i) for i in stdin.strip().split()]\n    print(dfs(1) + len(set(p)))"
    },
    {
        "number": 4247,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    p_l = [int(i) for i in stdin.split()[1:]]\n    p_n = [int(i) for i in stdin.split()[1:]]\n    p_i = sorted(set(p_l))\n    print(len(p_i) - p_i.index(1) - 1)\n    return''.join(map(str, p_i))"
    },
    {
        "number": 4247,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split())\n    if n < 3 or p < 3:\n        return \"\"\n    d1 = dict()\n    d2 = dict()\n    for i in range(1, n+1):\n        if p[i-1] not in d1.keys():\n            d1[p[i-1]] = 1\n        else:\n            d1[p[i-1]] += 1\n    for i in range(2, n+1):\n        if p[i-1] not in d2.keys():\n            d2[p[i-1]] = 1\n        else:\n            d2[p[i-1]] += 1\n    for k in d1.keys():\n        if d1[k]!= d2[k]:\n            return str(k)\n    return \"\"\n"
    },
    {
        "number": 4248,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = list(map(float, stdin.split()))\n    x.sort()\n    x.pop(n)\n    y = []\n    y.append(x[0])\n    for i in range(1, n):\n        y.append(x[i] - x[i - 1])\n    y = list(map(lambda x: round(x, 2), y))\n    return '{:.2f}'.format(sum(y) / n)\n\nprint(solution('8 1.14 2.06 2.14 0.70 0.70 0.70 -0.48 -0.48 0.94 -0.48 0.94 -0.48 0.94 -0.48 -0.48 -0.48 0.94 -1.28 0.70 0.70 -1.28 0.70 0.70 -2.16 1.46 -1.42 0.40 0.94 -1.42 -1.28 0.40 0.94 -1.42 0.40 0.94 -2.16 -1.62 0.70 0.70 0.70 -1.42 -1.28 0.40 0.94 -1.42 -1.28 0.40 0.94 -2.16 -1.62 0.70 0.70 0.70 -1.42 -1.28 0.40 0.94 -1.42 -1.28 0.40 0.94 -2.16 -1.62 0.70 0.70 0.70 -1.42 -1.28 0.40 0.94 -1.42 -1.28 0.40 0.94 -2.16 -1.62 0.70 0.70 0.70 -1.42 -1.28 0.40 0.94 -1.42 -1.28 0.40 0.94 -2.16 -1.62 0.70 0.70 -1.42 -1.28 0.40 0.94 -1.42 -1.28 0.40 0.94 -2.16 -1.62 0.70 0.70 0.70 -1.42 -1.28 0.40 0.94 -1.42 -1.28 0.40 0.94 -2.16 -1.62 0.70 0.70 -1.42 -1.28 0.40 0.94 -1.42 -1.28 0.40 0.94 -2.16 -1.62 0.70 0.70 -1.42 -1.28 0.40 0.94 -1.42 -1.28 0.40 0.94 -2.16 -1.62 0.70 0.70 0.70 -1.42 -1.28 0.40 0.94 -1.42 -1.28 0.40 0.94 -2.16 -1.62 0.70 0.70 0.70 -1.42 -1.28 0.40 0.94 -1.42 -1.28 0.40 0.94 -2.16 -1.62 0.70 0.70 -1.42 -1.28 0.40 0.94 -1.42 -1.28 0.40 0.94 -2.16 -1.62 0.70 0.70 0.70 -1.42 -1.28 0.40 0.94 -1.42 -1.28 0.40 0.94 -2.16 -1.62 0.70 0.70 0.70 -1.42 -1.28 0.40 0.94 -1.42 -1.28 0.40 0.94 -2.16 -1.62 0.70 0.70 0.70 -1.42 -1.28 0.40 0.94 -1.42 -1.28 0.40 0.94 -2.16 -1.62 0.70 0.70 0.70 -1.42 -1.28 0.40 0.94 -1.42 -1.28 0.40 0.94 -2.16 -1.62 0.70 0.70 0.70 -1.42 -1.28 0.40 0.94 -1.42 -1.28 0.40 0.94 -2.16 -1.62 0.70 0.70 0.70 -1.42 -1.28 0.40 0.94 -1.42 -1.28 0.40 0.94 -2.16 -1.62 0.70 0.70 0.70 -1.42 -1.28 0.40 0.94 -1.42 -1.28 0.40 0.94 -2.16 -1.62 0.70 0.70 0.70 -1.42 -1.28 0.40 0.94 -1.42 -1.28 0.40 0.94 -2.16 -1.62 0.70 0.70 0.70 -1.42 -1.28 0.40 0.94 -1.42 -1.28 0.40 0.94 -2.16 -1.62 0.70 0.70 0.70 -1.42 -1.28 0.40 0.94 -1.42 -1.28 0.40 0.94 -2.16 -1.62 0.70 0.70 0.70 -1.42 -1.28 0.40 0.94 -1.42 -1.28 0.40 0.94 -2.16 -1.62 0.70 0.70 0.70 -1.42 -1.28 0.40 0.94 -1.42 -1.28 0.40 0.94 -2.16 -1.62 0.70 0.70 0.70 -1.42 -1.28 0.40 0.94 -1.42 -1.28 0.40 0.94 -2.16 -1.62 0.70 0.70 0.70 -1.42 -1.28 0.40 0.94 -1.42 -1.28 0.40 0.94 -2.16 -1.62 0.70 0.70 0.70 -1.42 -1.28 0.40 0.94 -1.42 -1.28 0.40 0.94 -2.16 -1.62 0.70 0.70 0.70 -1.42 -1.28 0.40 0.94 -1.42 -1.28 0.40 0.94 -2.16 -1.62 0.70 0.70 0.70 -1.42 -1.28 0.40 0.94 -1.42 -1.28 0.40 0.94 -2.16 -1.62 0.70 0.70 0.70 -1.42 -1.28 0.40 0.94 -1.42 -1"
    },
    {
        "number": 4248,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin.split(' ')[0])\n    Y = int(stdin.split(' ')[1])\n    num = list(map(int, stdin.split(' ')))\n    n = len(num)\n    distance = []\n    for i in range(n):\n        distance.append(abs(X - num[i]))\n    distance.sort(reverse=True)\n    for i in range(n):\n        if distance[i] == 0:\n            continue\n        if distance[i] > X:\n            X = distance[i]\n    answer = -1 * X\n    return str(answer)\n\nprint(solution(\"8\"))"
    },
    {
        "number": 4248,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    # read in input\n    n = int(stdin)\n    \n    # read in the list of points\n    points = list(map(float, stdin.split()))\n    \n    # build a \"flat\" list of points\n    points = list(map(lambda x: list(map(lambda y: y, x)), points))\n    \n    # find the roots\n    roots = []\n    for i in range(n):\n        # find the root of the point i\n        root = 0\n        for j in range(len(points[i])):\n            root += (points[i][j] * (j + 1) * (-1))\n        # append the root to the end of the list\n        roots.append(root)\n    \n    # sort the roots\n    roots = sorted(roots)\n    \n    # take the median\n    median = int(len(roots) / 2)\n    \n    # find the index of the median\n    idx = median\n    # slice the roots into the middle\n    mid = int(len(roots) / 2)\n    # find the index of the first point that is at the middle\n    idx_mid = mid\n    # find the index of the last point that is at the middle\n    idx_last = len(roots) - 1 - mid\n    \n    # iterate through the list\n    for i in range(mid + 1, len(roots)):\n        # if the median is closer to the middle, then mark it as the median\n        if abs(roots[i] - (median + 1)) < abs(roots[i] - (median)):\n            idx = i\n            # increment the index of the median\n            idx_mid = i\n            # update the median\n            median = i\n    \n    # find the index of the last point\n    idx_last = len(roots) - 1 - mid\n    # if the last point was not the median, then we have a duplicate\n    if idx_last!= median:\n        idx = -1\n    \n    # now we have the median\n    # take the mean of the roots\n    # find the index of the root that is closest to the median\n    # the index is the smallest number\n    # we'll need to subtract 1 from the idx_last\n    # since the median will be the first point in the list\n    # so we'll need to subtract the idx_last\n    # because the median will be the last point in the list\n    # so the idx_last must be the last point in the list\n    # and idx_mid must be the median\n    idx_root = median - 1\n    idx_last = len(roots) - 1 - mid\n    \n    answer = (points[idx_root] + points[idx_last]) / 2\n    # return the answer\n    return str(answer)"
    },
    {
        "number": 4248,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split()\n    n = int(lines[0])\n    x = [int(i) for i in lines[1].split()]\n    y = [int(i) for i in lines[2].split()]\n    angle = (sum(x) / n) * (sum(y) / n)\n    return str(angle)"
    },
    {
        "number": 4248,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    \n    x = [float(n % x) for x in range(2,1001)]\n    y = [int(n / x) for x in range(2,1001)]\n    answer = 0\n    \n    for i in range(len(x)):\n        for j in range(i+1,len(x)):\n            answer = x[i] + y[i] * x[j]\n            if abs(answer) > 1e-2:\n                return str(answer)\n"
    },
    {
        "number": 4248,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    inp = stdin.split()\n    n = int(inp[0])\n    x = [float(i) for i in inp[1].split(' ')]\n    y = [float(i) for i in inp[2].split(' ')]\n    max_x = max(x)\n    min_x = min(x)\n    max_y = max(y)\n    min_y = min(y)\n    for i in range(n):\n        x[i] = (x[i] - min_x) / (max_x - min_x) * (max_y - min_y) + min_y\n        y[i] = (y[i] - min_y) / (max_y - min_y) * (max_x - min_x) + min_x\n    z = list(zip(x,y))\n    z.sort()\n    for i,(x,y) in enumerate(z):\n        x,y = x/1000,y/1000\n        if abs(x-y) > 1:\n            z[i] = (x,y)\n    z = sorted(z)\n    return str(z[0][0])\n"
    },
    {
        "number": 4248,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.strip().split(' ')[0]\n    x, y = [float(x) for x in stdin.split(' ')[1:]]\n    A = 0\n    for i in range(len(x) - 1):\n        A += (x[i + 1] - x[i]) * (x[i] - x[i - 1])\n    B = 0\n    for i in range(len(y) - 1):\n        B += (y[i + 1] - y[i]) * (y[i] - y[i - 1])\n    return f'{(A + B) / (n ** 2)}'\n"
    },
    {
        "number": 4248,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    coordinates = []\n    for i in range(n):\n        a, b = map(float, stdin.split())\n        coordinates.append((a, b))\n\n    return str(int(coordinates[0][0] + coordinates[1][0]) - 2 * int(coordinates[0][1] + coordinates[1][1]))"
    },
    {
        "number": 4248,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    for line in stdin.split('\\n'):\n        x, y = map(float, line.split(' '))\n        if (x * x + y * y) > 0:\n            continue\n        else:\n            return str(math.atan2(y, x)) +''\n    return ''\n\n\"\"\"\ndef"
    },
    {
        "number": 4248,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    lst = list(map(float, stdin.split()))\n    cnt = 0\n    for i in range(n):\n        j = i+1\n        if lst[i] * lst[j] == lst[i] * lst[j-1] and lst[i] * lst[j] < 0:\n            lst[i] *= -1\n            lst[j-1] *= -1\n            cnt += 1\n    if cnt == n:\n        return '1.40'\n    else:\n        return '0'\n\nsolution(\"6.70\")\n"
    },
    {
        "number": 4249,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    cup_list = [int(stdin.split()[i]) for i in range(n)]\n    a_list = [int(stdin.split()[i + 1]) for i in range(n)]\n    days = len(cup_list) + len(a_list)\n    d, answer = 1, 0\n    for i in range(days):\n        answer += cup_list[i] * a_list[i] * d\n        d += 1\n    return str(answer)\n"
    },
    {
        "number": 4249,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n*(n-1)/2 + (m-1)*(m-2) > n*(m-1)/2:\n        return \"No\"\n    else:\n        return str(math.log(n * (m-1) / 2, 10))\n\n--------------------------------------------------\n--------------------------------------------------\n'''\nimport time\n"
    },
    {
        "number": 4249,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    cups = int(stdin[0])\n    cup_number = int(stdin[1])\n    \n    cup_set = set()\n    for i in range(1, cup_number + 1):\n        cup_set.add(i)\n    \n    cups -= 1\n    result = cups\n    for i in range(cup_number):\n        result -= 1\n        result += int(stdin[i])\n    return str(result)\n\n-----Constraints-----\n\n0 <= stdin.length <= 100\n1 <= cup_number <= 50\n-1 < a_1, a_2, \\dots, a_n < 10^9\n\nALGORITHM\n\nnow_cups = (a_i * (a_i - 1) / 2)\n"
    },
    {
        "number": 4249,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    l = [int(stdin[i + 1]) for i in range(n)]\n    coffe = [int(stdin[i + 1]) for i in range(m)]\n    coffe.sort()\n    min_days = 0\n    #     print(coffe)\n    for i in range(m):\n        if l[i] > 0:\n            min_days += 1\n    if len(coffe) == 1:\n        return str(min_days)\n    if len(coffe) == 2:\n        if l[0] < l[1]:\n            coffe[0] -= l[0]\n            coffe[1] -= l[1]\n            return str(min_days + 1)\n        if l[0] < l[1] and l[1] > l[0]:\n            return str(min_days + 1)\n        if l[0] < l[1] and l[1] < l[0]:\n            return str(min_days + 2)\n    if len(coffe) == 3:\n        return str(min_days + 2)\n    if len(coffe) == 4:\n        return str(min_days + 2)\n    if len(coffe) == 5:\n        if l[0] > l[1] and l[1] > l[2] and l[2] > l[3]:\n            return str(min_days + 2)\n        if l[0] > l[1] and l[1] > l[2] and l[2] > l[3] and l[3] > l[4]:\n            return str(min_days + 2)\n        if l[0] > l[1] and l[1] > l[2] and l[2] > l[3] and l[3] > l[4] and l[4] > l[5]:\n            return str(min_days + 2)\n        else:\n            return str(min_days + 2)\n    if len(coffe) == 6:\n        return str(min_days + 2)\n    if len(coffe) == 7:\n        if l[0] > l[1] and l[1] > l[2] and l[2] > l[3] and l[3] > l[4] and l[4] > l[5] and l[5] > l[6]:\n            return str(min_days + 2)\n        if l[0] > l[1] and l[1] > l[2] and l[2] > l[3] and l[3] > l[4] and l[4] > l[5] and l[5] > l[6] and l[6] > l[7]:\n            return str(min_days + 2)\n        if l[0] > l[1] and l[1] > l[2] and l[2] > l[3] and l[3] > l[4] and l[4] > l[5] and l[5] > l[6] and l[6] > l[7] and l[7] > l[8]:\n            return str(min_days + 2)\n        else:\n            return str(min_days + 2)\n    if len(coffe) == 8:\n        return str(min_days + 2)\n    if len(coffe) == 9:\n        if l[0] > l[1] and l[1] > l[2] and l[2] > l[3] and l[3] > l[4] and l[4] > l[5] and l[5] > l[6] and l[6] > l[7] and l[7] > l[8] and l[8] > l[9]:\n            return str(min_days + 2)\n        if l[0] > l[1] and l[1] > l[2] and l[2] > l[3] and l[3] > l[4] and l[4] > l[5] and l[5] > l[6] and l[6] > l[7] and l[7] > l[8] and l[8] > l[9] and l[9] > l[10]:\n            return str(min_days"
    },
    {
        "number": 4249,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    result = [0]\n    for i in range(n):\n        tmp = 0\n        if a[i] > m:\n            tmp = a[i]\n            for j in range(i + 1, n):\n                if a[j] > m:\n                    tmp = a[j]\n        result.append(tmp)\n    return \"\".join(map(str, result))\n\n\"\"\"\ntest cases\nTest case 1:\nInput:\n    5 8\n    2 3 1 1 2\n\nOutput:\n    4\n\nTest case 2:\nInput:\n    5 15\n    5 5 5 5 5\n\nOutput:\n    1\n\ntest case 3:\nInput:\n    5 26\n    5 5 5 5 5\n\nOutput:\n    2\n\n\"\"\"\n"
    },
    {
        "number": 4249,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    a.append(a[0])\n    a = set(a)\n    return str(min(a))\n    \n\nInput\n3 7\n2 3 2 2\n\nOutput\n0\n\"\"\"\n"
    },
    {
        "number": 4249,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    rows, cols = [int(x) for x in stdin.split(\" \")]\n    sorted_cups = [int(x) for x in sorted(stdin.split(\" \"))]\n\n    cups_before = cups[:]\n    cups_after = cups[:]\n\n    for i in range(rows):\n        if cups_before[i] > 0:\n            cups_before[i] -= 1\n        if cups_after[i] > 0:\n            cups_after[i] -= 1\n\n    while cups_before:\n        cup_before = cups_before.pop(0)\n        cup_after = cups_after.pop(0)\n\n        if cup_before > cup_after:\n            cups_before.pop(0)\n            cups_after.append(cup_after)\n        elif cup_before < cup_after:\n            cups_after.pop(0)\n            cups_before.append(cup_before)\n\n    answer = cups_after[0] + cups_after[1] + cups_after[2] + cups_after[3]\n\n    if answer < 0:\n        return -1\n\n    return answer\n"
    },
    {
        "number": 4249,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin.strip())\n    \n    def bfs(v, visited):\n        for i in range(v, n):\n            if not visited[i]:\n                visited[i] = 1\n                print(i, end=' ')\n                bfs(i+1, visited)\n                \n    visited = [0] * n\n    bfs(0, visited)\n    \n    days = 0\n    ans = -1\n    if visited[0] == 0:\n        days += 1\n    else:\n        for i in range(1, n):\n            if not visited[i]:\n                visited[i] = 1\n                print(i, end=' ')\n                bfs(i+1, visited)\n                ans = max(ans, days)\n                \n    print(days)\n    \n    return ans\n    \n\ndef"
    },
    {
        "number": 4249,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    m, n = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    if n >= len(a):\n        return -1\n    max_d, min_d = 0, a[-1]\n    for a_i in a:\n        if a_i >= min_d:\n            min_d = a_i\n        if a_i > max_d:\n            max_d = a_i\n    for i in range(1, n + 1):\n        a_i = a[-i]\n        if a_i >= min_d:\n            min_d = a_i\n        if a_i > max_d:\n            max_d = a_i\n    return min_d - max_d + 1\n\n'''\ndef"
    },
    {
        "number": 4249,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    return str(min(m, (n//2)*m, (n//3)*m, n*(n//3)*m, n*(n//2)*m))\n\n\n\n-----Constraints-----\n\n0 <= n <= 10^5\n1 <= m <= 10^9\n1 <= a[i] <= 10^9\n\nSample Input\n\n5\n2\n5 4 1 1 2\n5\n\nSample Output\n\n4\n\n-----Constraints-----\n\n0 <= n <= 10^5\n0 <= m <= 10^9\n1 <= a[i] <= 10^9\n\"\"\"\n\ndef"
    },
    {
        "number": 4250,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k,n=map(int,stdin.split())\n    s=map(int,stdin.split())\n    s.sort()\n    t=[]\n    if k==n:\n        return \"\".join(str(e) for e in s)\n    \n    if k==1:\n        for i in range(n):\n            if s[i]>0:\n                t.append(s[i])\n        return solution(stdin+\"_1\"+\"_\".join(t)+\"_1\")\n    \n    if k==n+1:\n        for i in range(n):\n            if s[i]>0:\n                t.append(s[i])\n        return solution(stdin+\"_1\"+\"_\".join(t)+\"_2\")\n    \n    for i in range(k,n):\n        if s[i]>0:\n            t.append(s[i])\n    return solution(stdin+\"_1\"+\"_\".join(t)+\"_2\")"
    },
    {
        "number": 4250,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    s = [0] * n\n    t = [0] * n\n    for i in range(n):\n        s[i], t[i] = list(map(int, stdin.split()))\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if s[i] > s[j]:\n                s[i], s[j] = s[j], s[i]\n    for i in range(k):\n        if s[i] > s[k]:\n            s[i], s[k] = s[k], s[i]\n    answer = []\n    for i in range(n):\n        if s[i] == t[i]:\n            answer.append(i)\n    return''.join(map(str, answer))\n"
    },
    {
        "number": 4250,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    s = []\n    for line in lines:\n        for i in range(1, len(line) - 1):\n            s.append(line[:i] + line[i + 1:])\n    s.sort()\n    for i in range(len(s)):\n        if i == 0 or i == len(s) - 1:\n            s[i] = s[i] * len(s) // 3\n        else:\n            s[i] = s[i] * len(s) // 3\n    for i in range(len(s)):\n        if i == 0 or i == len(s) - 1:\n            s[i] = s[i] * len(s) // 3\n        else:\n            s[i] = s[i] * len(s) // 3\n    return s[0]\n\n\n-----Examples-----\nInput\n7 3\n1 2 3 2 4 3 1\n\nOutput\n1 2 3 \n\nInput\n10 4\n1 3 1 3 10 3 7 7 12 3\n\nOutput\n7 3 1 3\n\nInput\n15 2\n1 2 1 1 1 2 1 1 2 1 2 1 1 1 1\n\nOutput\n1 1 \n\n\n\n-----Note-----\n\nThe only test is given below.\n\n>>> import sys\n>>> input = sys.stdin.readline\n>>> solution = solution(input().rstrip())\n>>> print(solution)\n2\n\n>>> input = sys.stdin.readline\n>>> solution = solution(input().rstrip())\n>>> print(solution)\n1\n\n>>> input = sys.stdin.readline\n>>> solution = solution(input().rstrip())\n>>> print(solution)\n3\n\n>>> input = sys.stdin.readline\n>>> solution = solution(input().rstrip())\n>>> print(solution)\n1\n\n>>> input = sys.stdin.readline\n>>> solution = solution(input().rstrip())\n>>> print(solution)\n2\n\n>>> input = sys.stdin.readline\n>>> solution = solution(input().rstrip())\n>>> print(solution)\n1\n\n>>> input = sys.stdin.readline\n>>> solution = solution(input().rstrip())\n>>> print(solution)\n3\n\n>>> input = sys.stdin.readline\n>>> solution = solution(input().rstrip())\n>>> print(solution)\n1\n"
    },
    {
        "number": 4250,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    import itertools\n    s, k = map(int, stdin.split())\n    s = list(map(int, s.split()))\n    t = list(itertools.permutations(s))\n    return \"\".join(list(map(str, t[k-1])))\n\nprint(solution(\"7 3\"))"
    },
    {
        "number": 4250,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = list(map(int, stdin.split()))\n    permu = []\n    for i in range(len(s)-k):\n        permu.append(s[i:i+k])\n    permu = sorted(permu)\n    t = []\n    for i in range(len(permu)):\n        t.append(permu[i])\n    for i in range(len(t)):\n        if len(t[i]) == k:\n            return t[i]\n    return []"
    },
    {
        "number": 4250,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = [int(s) for s in stdin.split()]\n\n    def count(s: int) -> int:\n        count = 0\n        for i in range(1, s + 1):\n            count += s // i\n            count %= 10 ** 9 + 7\n        return count\n\n    if k <= n:\n        return [count(i) for i in s]\n    else:\n        return [count(1) for i in s]"
    },
    {
        "number": 4250,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = list(map(int, stdin.split()))\n    t = list(range(1, n+1))\n    for i in range(1, n+1):\n        j = 0\n        k -= 1\n        while k >= 0:\n            if t[k] in s:\n                t[j] = t[k]\n                k -= 1\n                j += 1\n            else:\n                break\n    s =''.join([str(t[i]) for i in range(len(t))])\n    return s"
    },
    {
        "number": 4250,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = [int(i) for i in stdin.split()]\n    return str(s)\n\"\"\"\n\ndef"
    },
    {
        "number": 4250,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = []\n    for _ in range(n):\n        s.append(list(map(int, stdin.split())))\n    return solution_sub(s, k)\n\ndef"
    },
    {
        "number": 4250,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = list(map(int, stdin.split()))\n    t = []\n    for i in range(n):\n        t.append(s[i] * (i + 1))\n    t = sorted(t)\n    for i in t:\n        if i >= k:\n            return''.join(map(str, t[:i]))\n    return''.join(map(str, t))\n\"\"\"\n\ndef"
    },
    {
        "number": 4251,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return 0\n"
    },
    {
        "number": 4251,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    a = [[int(i) for i in l.split()] for l in stdin.split()]\n    k = int(min(map(len,a)))\n    d = {}\n    for i in range(n):\n        for j in range(n-1-i):\n            if a[j][i] in d:\n                d[a[j][i]] = d[a[j][i]]+1\n            else:\n                d[a[j][i]] = 1\n    s = []\n    for i in range(n):\n        for j in range(n-1-i):\n            if d[a[j][i]] > 0:\n                s.append(a[j][i])\n                d[a[j][i]] = 0\n    return''.join([str(i) for i in s])\n    pass\n\n\n\n\n\n\n\n{  \n    \"solution\":{\"k\":0,\"*\":0}\n    \"*\":{\n        \"k\":0\n    }\n}\n{\n    \"solution\":{\"*\":0,\"k\":0}}\n\n{\n    \"solution\":{\n        \"*\":{\n            \"*\":0\n        }\n    }\n}\n{\n    \"solution\":{\n        \"*\":{\n            \"*\":0\n        }\n    }\n}\n\n{\n    \"solution\":{\n        \"*\":{\n            \"*\":0\n        },\n        \"*\":{\n            \"*\":0\n        }\n    }\n}\n{\n    \"solution\":{\n        \"*\":{\n            \"*\":0\n        },\n        \"*\":{\n            \"*\":0\n        }\n    }\n}\n{\n    \"solution\":{\n        \"*\":{\n            \"*\":0\n        },\n        \"*\":{\n            \"*\":0\n        }\n    }\n}\n{\n    \"solution\":{\n        \"*\":{\n            \"*\":0\n        },\n        \"*\":{\n            \"*\":0\n        },\n        \"*\":{\n            \"*\":0\n        }\n    }\n}\n{\n    \"solution\":{\n        \"*\":{\n            \"*\":0\n        },\n        \"*\":{\n            \"*\":0\n        },\n        \"*\":{\n            \"*\":0\n        }\n    }\n}\n{\n    \"solution\":{\n        \"*\":{\n            \"*\":0\n        },\n        \"*\":{\n            \"*\":0\n        },\n        \"*\":{\n            \"*\":0\n        }\n    }\n}\n{\n    \"solution\":{\n        \"*\":{\n            \"*\":0\n        },\n        \"*\":{\n            \"*\":0\n        },\n        \"*\":{\n            \"*\":0\n        }\n    }\n}\n{\n    \"solution\":{\n        \"*\":{\n            \"*\":0\n        },\n        \"*\":{\n            \"*\":0\n        },\n        \"*\":{\n            \"*\":0\n        }\n    }\n}\n{\n    \"solution\":{\n        \"*\":{\n            \"*\":0\n        },\n        \"*\":{\n            \"*\":0\n        },\n        \"*\":{\n            \"*\":0\n        }\n    }\n}\n{\n    \"solution\":{\n        \"*\":{\n            \"*\":0\n        },\n        \"*\":{\n            \"*\":0\n        },\n        \"*\":{\n            \"*\":0\n        }\n    }\n}\n{\n    \"solution\":{\n        \"*\":{\n            \"*\":0\n        },\n        \"*\":{\n            \"*\":0\n        },\n        \"*\":{\n            \"*\":0\n        }\n    }\n}\n{\n    \"solution\":{\n        \"*\":{\n            \"*\":0\n        },\n        \"*\":{\n            \"*\":0\n        },\n        \"*\":{\n            \"*\":0\n        }\n    }\n}\n{\n    \"solution\":{\n        \"*\":{\n            \"*\":0\n        },\n        \"*\":{\n            \"*\":0\n        },\n        \"*\":{\n            \"*\":0\n        }\n    }\n}\n{\n    \"solution\":{\n        \"*\":{\n            \"*\":0\n        },\n        \"*\":{\n            \"*\":0\n        },\n        \"*\":{\n            \"*\":0\n        }\n    }\n}\n{\n    \"solution\":{\n        \"*\":{\n            \"*\":0\n        },\n        \"*\":{\n            \"*\":0\n        },\n        \"*\":{\n            \"*\":0\n        }\n    }\n}\n{\n    \"solution\":{\n        \"*\":{\n            \"*\":0\n        },\n        \"*\":{\n            \"*\":0\n        },\n        \"*\":{\n            \"*\":0\n        }\n    }\n}\n{\n    \"solution\":{\n        \"*\":{\n            \"*\":0\n        },\n        \"*\":{\n            \"*\":0\n        },\n        \"*\":{\n            \"*\":0\n        }\n    }\n}\n{\n    \"solution\":{\n        \"*\":{\n            \"*\":0\n        },\n        \"*\":{\n            \"*\":0\n        },\n        \"*\":{\n            \"*\":0\n        }\n    }\n}\n{\n    \"solution\":{\n        \"*\":{\n            \"*\":0\n        },\n        \"*\":{\n            \"*\":0\n        },\n        \"*\":{\n            \"*\":0\n        }\n    }\n}\n{\n    \"solution\":{\n        \"*\":{\n            \"*\":0\n        },\n        \"*\":{\n            \"*\":0\n        },\n        \"*\":{"
    },
    {
        "number": 4251,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = []\n    for _ in range(n):\n        a.append(list(map(int, input().split())))\n    for i in range(n):\n        k = 1\n        for j in range(m):\n            if j + k < m:\n                a[i][j + k] = a[i][j]\n            k += 1\n    max_k = 0\n    for k in range(m):\n        for i in range(n):\n            k = 1\n            for j in range(m):\n                if j + k < m:\n                    if a[i][j + k] > a[i][j]:\n                        if max_k < k:\n                            max_k = k\n                        k += 1\n    return str(max_k)\n"
    },
    {
        "number": 4251,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [list(map(int, input().split())) for i in range(n)]\n    if m == 0:\n        k = 0\n    else:\n        k = max(list(map(lambda x: max(x), zip(*a)))) + 1\n    print(k)\n    for i in range(n):\n        for j in range(n):\n            if a[i][j] == k:\n                for x in range(m):\n                    if a[i][x] == k:\n                        a[i][x] = max(a[i][x - 1], a[i][x + 1]) + 1\n    return str(k)\n\n\nprint(solution(\"4 2\"))\nprint(solution(\"6 1\"))\nprint(solution(\"5 3\"))\n"
    },
    {
        "number": 4251,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [[0] * m for _ in range(n)]\n    \n    for _ in range(n):\n        a[0][0] = int(stdin[0])\n        a[0][1] = int(stdin[1])\n        a[0][2] = int(stdin[2])\n        a[0][3] = int(stdin[3])\n        a[0][4] = int(stdin[4])\n        a[0][5] = int(stdin[5])\n        a[0][6] = int(stdin[6])\n        a[0][7] = int(stdin[7])\n        a[0][8] = int(stdin[8])\n        a[0][9] = int(stdin[9])\n        \n    k = 1\n    for i in range(1, n):\n        for j in range(m):\n            k = k + 1\n            for k in range(j):\n                a[i][k] = a[i][k] + a[i - 1][k] + a[i - 1][k - 1] + a[i - 1][k - 1]\n    \n    if k == 0:\n        return '0'\n    else:\n        return str(k)\n\nInput\n5 3\n1 2 3 4\n10 3 7 3\n5 3\n\nOutput\n5\n\nInput\n6 1\n3\n6\n2\n5\n1\n4\n\nOutput\n3\n\n\n\n-----Note-----\n\nIn the first example you can rearrange rows as following to get the $5$-acceptable traversal:\n\n5 3\n\n10 8\n\n4 3\n\n9 9\n\n\n\n-----Note-----\n\nIn the second example the given order is already $3$-acceptable.\n\nIn the third example the given order is already $1$-acceptable.\n\nIn the fourth example you can leave it as it is.\ndef"
    },
    {
        "number": 4251,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [list(map(int, list(stdin.split()[i])[1:])) for i in range(n)]\n    s = sorted(a, key=lambda x: (x[0], x[1]))\n    print(s[0][0])\n    for i in range(1, len(s)):\n        k = 0\n        for j in range(len(s[i])):\n            if j + 1 < len(s[i]):\n                k += abs(s[i][j] - s[i][j + 1])\n        if k < m:\n            print(s[i][k])\n        elif k == m:\n            print(s[i][m])\n        elif k == m + 1:\n            print(s[i][m])\n            break\n        else:\n            print(s[i][m])\n            break\n\n\n\n-----Constraints-----\n\n1 <= n <= 100,\n1 <= m <= 10000\n0 <= a[i][j] <= 10^9\n\n\n-----Examples-----\n\nInput\n4 2\n9 9\n10 8\n5 3\n4 3\n\nOutput\n5\n\nInput\n2 4\n1 2 3 4\n10 3 7 3\n\nOutput\n3\n\n\n-----Notes-----\n\nIn the first example you can rearrange rows as follows to get the $5$-acceptable traversal:\n\n5 3\n\n10 8\n\n4 3\n\n9 9\n\n\n\n-----References-----\n\nhttps://www.geeksforgeeks.org/two-dimensional-matrix-by-given-row-and-column-and-a-given-k/\n\nhttps://www.geeksforgeeks.org/max-n-colors-with-given-k-traversals/\n\n\"\"\"\n\nimport numpy as np\ndef"
    },
    {
        "number": 4251,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [list(map(int, stdin.split())) for i in range(n)]\n    for i in range(n):\n        for j in range(n-1):\n            if abs(a[i][j] - a[i][j+1]) >= 3:\n                continue\n            if abs(a[j][i] - a[j+1][i]) >= 3:\n                continue\n            k = 0\n            for k in range(1,m):\n                if abs(a[i][k] - a[i][k-1]) >= 3:\n                    continue\n                if abs(a[k][j] - a[k][j+1]) >= 3:\n                    continue\n                k += 1\n            if k >= 3:\n                print(k)\n                return ''\n    print(k)\n    return ''\nsolution(input())\n"
    },
    {
        "number": 4251,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = []\n    for _ in range(n):\n        a.append(list(map(int, stdin.split())))\n    \n    s = [0]*(m*2)\n    for i in range(n):\n        s[i:i+m] = a[i]\n    \n    s = [str(s[i]) for i in range(m)]\n    for k in range(m):\n        if s[k:k+m] not in solution(s[k:k+m]):\n            return str(len(s[k:k+m]))\n    return str(len(s[k:k+m]))\n"
    },
    {
        "number": 4251,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    for i in range(n):\n        for j in range(i, n):\n            a[j] = abs(a[j] - a[i])\n    if a.count(k) == m:\n        return str(k)\n    else:\n        return \"0\"\n\n-----Basic Approach-----\n\nn, m, k = map(int, input().split())\na = list(map(int, input().split()))\ns = []\nfor i in range(n):\n    for j in range(n):\n        if a[i] == a[j] or i == j:\n            continue\n        s.append(a[i] + a[j] + k)\nprint(max(s))\n\n-----Updated Approach-----\n\nn, m, k = map(int, input().split())\na = list(map(int, input().split()))\ns = []\nfor i in range(n):\n    s.append(a[i] * (n - i))\nprint(max(s))"
    },
    {
        "number": 4251,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    rows = int(stdin.strip().split(' ')[0])\n    columns = int(stdin.strip().split(' ')[1])\n    k = int(stdin.strip().split(' ')[2])\n    answer = -1\n    for row in range(1, rows + 1):\n        for col in range(1, columns + 1):\n            answer = max(answer, (k - col - row))\n    return str(answer)\n\n\ndef"
    },
    {
        "number": 4252,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n < 0: return 0\n    count = 0\n    lst = []\n    for i in range(n):\n        word = stdin.strip()\n        for j in range(len(word)):\n            if word[j] not in lst:\n                lst.append(word[j])\n    for i in range(len(lst)):\n        count += lst.count(lst[i])\n    return count\n\n6\nxxxiii\n\nOutput\n1\n\nExplanation\n\nPolycarp tried to send a file with name contains number $33$, written in Roman numerals. So he can not just send the file, because he has to remove the first three letters \"xx\" in a row.\n\nNote:\n\nThe file name consists of two or more \"x\" (\"x\" and lowercase Latin letters \"x\").\n\nThe file name does not contain \"xxx\" as a substring.\n\nThe file name has at most one \"x\" (\"x\" and lowercase Latin letters \"x\").\n\nThe file name does not contain \"xxx\" as a substring.\n\n\"\"\""
    },
    {
        "number": 4252,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    stdin = stdin.replace(\"x\", \"\")\n    \n    chars = list(stdin)\n    \n    count = 0\n    \n    for i in range(len(chars)):\n        if chars[i] == \"x\":\n            chars[i] = \"z\"\n            count += 1\n    \n    while count > 0:\n        if \"z\" in chars:\n            chars.remove(\"z\")\n        else:\n            count -= 1\n            \n    return \"\".join(chars)\n\nn = int(input())\n\nfiles = []\n\nfor i in range(n):\n    files.append(input())\n\nfor file in files:\n    solution(file)\n    \nprint(0 if len(files) == 0 else max(map(len, files)))"
    },
    {
        "number": 4252,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 10:\n        print(0)\n    else:\n        print(min(list(map(len, stdin))))\n        print(0)\n        \n        \n        \n-----Constraints-----\n1 <= n <= 10^5\n\n\"\"\""
    },
    {
        "number": 4252,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    N,K = map(int,stdin.strip().split())\n    N = N if N%K==0 else N//K\n    M = N % K\n    \n    \n    if K>=M:\n        \n        answer = K-M\n    \n    else:\n        answer = N\n    \n    if M>0:\n        answer += M-K\n    \n    if answer>0:\n        print(answer)\n    else:\n        print(0)\n    \n    \n    \n"
    },
    {
        "number": 4252,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    strl = stdin.splitlines()\n    n = int(strl[0])\n    strl = strl[1:]\n    for i in range(n):\n        strl = strl[:strl.index(' ')]\n    return''.join(strl)\n\n----Code----\nfrom itertools import combinations\ndef"
    },
    {
        "number": 4252,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, *data = map(str, stdin.split())\n    \n    if N == \"\":\n        return \"0\"\n    elif N[0] == \"x\":\n        return \"0\"\n    elif N[0] == \"i\" or N[0] == \"I\":\n        N = N[1:]\n    \n    n = len(N)\n    \n    for i in range(n):\n        if N[i] in [\"x\", \"i\", \"X\"]:\n            N = N[:i] + N[i+1:]\n    \n    if N[-1] == \"x\":\n        return len(N)\n    elif N[-1] == \"I\":\n        N = N[:-1]\n    \n    if N[-1] in [\"i\", \"X\"]:\n        N = N[:-1]\n    \n    if N[-1] == \"x\":\n        return len(N) - 1\n    \n    if n > 0:\n        return len(N) - len(N[:-n])\n    \n    return 0\n\nn = int(input())\nx = input()\nprint(solution(x))"
    },
    {
        "number": 4252,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N,*file=stdin\n    total=0\n    for i,s in enumerate(file):\n        if s.isalpha():\n            total+=len(s)\n        elif s.isnumeric():\n            total+=1\n    return total"
    },
    {
        "number": 4252,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    dic = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10, 'k': 11, 'l': 12,'m': 13, 'n': 14, 'o': 15, 'p': 16, 'q': 17, 'r': 18,'s': 19, 't': 20, 'u': 21, 'v': 22, 'w': 23, 'x': 24, 'y': 25, 'z': 26}\n    text = list(stdin.strip())\n    ans = []\n    for char in text:\n        if char.isupper():\n            ans.append(dic[char])\n        else:\n            ans.append(dic[char][-1])\n    return str(len(ans)) + \" \" + str(ans)\n\n\ndef"
    },
    {
        "number": 4252,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin.strip())\n    \n    #length of file name\n    len_file_name = len(stdin.strip())\n    \n    #minimum number of characters to remove from the file name so after that the name does not contain \"xxx\" as a substring\n    min_len = int(n/len_file_name) * min(n, len_file_name)\n    \n    #delete character from file name\n    for i in range(n):\n        del_char = stdin[i]\n        if del_char.isdigit():\n            break\n    \n    #if len(del_char) is < min_len\n    #then do not delete character\n    \n    answer = min(n - len(del_char), len_file_name - len(del_char))\n    \n    #if answer > 0, than answer can be corrected\n    return answer\n"
    },
    {
        "number": 4252,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(len(stdin)):\n        if stdin[i]!= \"x\":\n            stdin = stdin.replace(stdin[i], \"\", 1)\n            break\n    stdin = list(stdin)\n    def check(input):\n        for i in range(len(input)):\n            if input[i]!= \"x\":\n                return 0\n        return 1\n    for i in range(len(stdin)):\n        if check(stdin[i])!= 1:\n            stdin = stdin[:i] + stdin[i+1:]\n            break\n    else:\n        print(\"0\")\n    return \"\".join(stdin)\n\n\n---Runtime---\nRuntime: 32 ms, faster than 76.74% of Python3 online submissions for Removing Chars from the File Name.\nMemory Usage: 14.2 MB, less than 35.27% of Python3 online submissions for Removing Chars from the File Name.\n"
    },
    {
        "number": 4253,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(float(stdin)*float(3)**2))\n"
    },
    {
        "number": 4253,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n  result = 0\n  for a in range(0,100,2):\n    for b in range(0,100,2):\n      for c in range(0,100,2):\n        if a + b + c == a * b * c:\n          result += 3**2\n  print(result)\n  return str(result)\n"
    },
    {
        "number": 4253,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = 0\n    if n == 0:\n        return 0\n    for i in range(n, 0, -1):\n        s += i * (i + 1)\n    return s\nn = int(input())\nfor i in range(1, n + 1):\n    print(i * i * (i + 1))"
    },
    {
        "number": 4253,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    if stdin.strip().isdigit():\n        return int(stdin)\n    return solution(stdin.rstrip())\n"
    },
    {
        "number": 4253,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    return str(3**(a+2))\n"
    },
    {
        "number": 4253,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    if stdin == '.':\n        return ''\n    else:\n        return str(int(stdin) ** (1/3))\n"
    },
    {
        "number": 4253,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n  n = int(stdin)\n  l, r = map(int, stdin.split())\n  \n  print(3*(n**2-l**2))\n\n-----Sample Input-----\n3\n\n-----Sample Output-----\n1\n\nThe area of the regular dodecagon is 3 \\times 1^2 = 1.\n\n-----Constraints-----\n - 1 \\leq r \\leq 100\n - r is an integer.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nr\n\n-----Output-----\nPrint an integer representing the area of the regular dodecagon.\n\n-----Sample Input-----\n2\n\n-----Sample Output-----\n0\n\nThe area of the regular dodecagon is 0.\n\n-----Constraints-----\n - 1 \\leq r \\leq 100\n - r is an integer.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nr\n\n-----Output-----\nPrint an integer representing the area of the regular dodecagon.\n\n-----Sample Input-----\n1\n\n-----Sample Output-----\n1\n\nThe area of the regular dodecagon is 1.\n\n-----Constraints-----\n - 1 \\leq r \\leq 100\n - r is an integer.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nr\n\n-----Output-----\nPrint an integer representing the area of the regular dodecagon.\n\n-----Sample Input-----\n0\n\n-----Sample Output-----\n0\n\nThe area of the regular dodecagon is 0.\n\n-----Constraints-----\n - 1 \\leq r \\leq 100\n - r is an integer.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nr\n\n-----Output-----\nPrint an integer representing the area of the regular dodecagon.\n\n-----Sample Input-----\n4\n\n-----Sample Output-----\n4\n\nThe area of the regular dodecagon is 4^2 = 16.\ndef"
    },
    {
        "number": 4253,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    r, count = list(map(int, stdin.split()))\n    area = 3**2 * (4**(r-1))\n    return str(area)\n\ndef"
    },
    {
        "number": 4253,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin) == 1:\n        return \"\".join([str(int(a)) for a in stdin[0].split()])\n    if len(stdin) == 2:\n        if int(stdin[1]) % 2!= 0:\n            return '0'\n        else:\n            return str(int(stdin[1]) * (int(stdin[1]) - 1) / 2)\n\n\ndef"
    },
    {
        "number": 4253,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    from itertools import combinations\n    def sub_set(s, sub):\n        return list(sub) + [i for i in s if i not in sub]\n    return sum(sub_set(map(int, stdin), combinations(range(1, 7), 2)))\n\ndef"
    },
    {
        "number": 4254,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = input()\n    w = input()\n    if s.count(\"W\") <= w.count(\"W\"):\n        print(\"unsafe\")\n    else:\n        print(\"safe\")"
    },
    {
        "number": 4254,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s, w = stdin.split()\n    s = int(s)\n    w = int(w)\n    if w == s:\n        return'safe'\n    if w >= s:\n        return 'unsafe'\n    else:\n        return'safe'\n"
    },
    {
        "number": 4254,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    S, W = map(int, stdin.split())\n    if S > W:\n        return \"unsafe\"\n    elif S == W:\n        return \"safe\"\n    else:\n        return \"unsafe\""
    },
    {
        "number": 4254,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    S, W = map(int, stdin.split())\n    if S > W:\n        return 'unsafe'\n    elif S == W:\n        return'safe'\n    else:\n        return'safe'\n"
    },
    {
        "number": 4254,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n  sheep, wolf = map(int, stdin.split())\n  if sheep > wolf:\n    return \"unsafe\"\n  elif sheep == wolf:\n    return \"safe\"\n  else:\n    return \"unsafe\"\n  "
    },
    {
        "number": 4254,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    S = int(stdin.strip().split(' ')[0])\n    W = int(stdin.strip().split(' ')[1])\n    \n    wolf_attack = 0\n    sheep_attack = 0\n    \n    if S > W:\n        print('unsafe')\n        return\n    \n    while S > 0 and W > 0:\n        sheep_attack += 1\n        sheep_attack_input = input().split(' ')\n        sheep_attack_input[0] = int(sheep_attack_input[0])\n        sheep_attack_input[1] = int(sheep_attack_input[1])\n        \n        if sheep_attack_input[0] == 1 and sheep_attack_input[1] <= S:\n            wolf_attack += 1\n        elif sheep_attack_input[0] == 2 and sheep_attack_input[1] <= W:\n            wolf_attack += 1\n            \n        S -= sheep_attack_input[1]\n        W -= sheep_attack_input[0]\n        \n    if wolf_attack == 0 and S > 0:\n        print('unsafe')\n        return\n    else:\n        print('safe')\n        \n"
    },
    {
        "number": 4254,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    sol = []\n    for _ in range(n):\n        lst = list(stdin.strip().split())\n        if lst[0] == 'unsafe':\n            sol.append('unsafe')\n        else:\n            sol.append('safe')\n    return ''.join(sol)\n"
    },
    {
        "number": 4254,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def solution1(s: str) -> str:\n        sheep_x = [i for i in range(101) if s[i] == 'S']\n        wolves_x = [i for i in range(101) if s[i] == 'W']\n\n        if len(sheep_x) == 0 or len(wolves_x) == 0:\n            return 'unsafe'\n        if len(sheep_x) > len(wolves_x):\n            return solution1(s)\n        else:\n            return solution1(s[::-1]) + str(len(wolves_x))\n\n    return solution1(stdin)\n"
    },
    {
        "number": 4254,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    S, W = list(map(int, stdin.split()))\n    if S < W:\n        return \"unsafe\"\n    if S == W:\n        return \"safe\"\n    S -= W\n    W -= S\n    if S == 0:\n        return \"safe\"\n    if W == 0:\n        return \"unsafe\"\n    return \"safe\""
    },
    {
        "number": 4254,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n  S, W = map(int, stdin.split())\n  if S > W:\n    return'safe'\n  if S == W:\n    return 'unsafe'\n  if S < W:\n    return'safe'\n"
    },
    {
        "number": 4255,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(2, int(math.sqrt(len(stdin))+1)):\n        for j in range(i, int(math.sqrt(len(stdin))+1)):\n            if stdin[i] > stdin[j]:\n                print(j)\n                break\n            elif stdin[j] > stdin[i]:\n                print(i)\n                break"
    },
    {
        "number": 4255,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    l,w,h = map(int,stdin.split())\n    A = (l*h)//90\n    print(A)\n    \n    return str(A)\n\ndef"
    },
    {
        "number": 4255,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(abs(int(stdin[0]) - int(stdin[1])) * int(stdin[2]))\n"
    },
    {
        "number": 4255,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split(\" \"))\n    return str(round(abs((a * c) / 2 - b * c)))\n\ndef"
    },
    {
        "number": 4255,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lengths = [int(i) for i in stdin.split()]\n    A = lengths[0]\n    B = lengths[1]\n    C = lengths[2]\n\n    x = A + B + C\n    area = (x/2) * (x/2)\n\n    return str(area)\n\nInput\n\nABBCCA\n\nOutput\n\n6\n\n\nExplanation\n\nA: 1+1+1=2; B: 2+2+2=3; C: 3+1+1=4;\nArea of ABC is 6.\n\n\n'''\nclass Solution:\n    def triangleArea(self, triangle: List[List[int]]) -> int:\n        # \uad6c\ud604\n        if len(triangle) == 0:\n            return 0\n        for i in range(0, len(triangle)):\n            for j in range(0, i+1):\n                if i > j and triangle[i][j] < triangle[i][j+1]:\n                    triangle[i][j], triangle[i][j+1] = triangle[i][j+1], triangle[i][j]\n        \n        for i in range(0, len(triangle)):\n            area = 0\n            for j in range(i, len(triangle)):\n                area += triangle[i][j]\n            if area >= 0:\n                return area\n        return 0\n"
    },
    {
        "number": 4255,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n,m=map(int,input().split())\n    A=[]\n    for i in range(n):\n        A.append(list(map(int,input().split())))\n    B=[]\n    for i in range(m):\n        B.append(list(map(int,input().split())))\n    C=[]\n    for i in range(n):\n        for j in range(m):\n            C.append(abs(A[i][j]-B[i][j]))\n    D=[]\n    for i in range(n):\n        D.append(abs(A[i][i]-B[i][i]))\n    if (D[0]==0)or(D[0]==1):\n        return \"Not a right triangle\"\n    else:\n        return \"The area of the triangle ABC is an integer\"\n\ndef"
    },
    {
        "number": 4255,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A = [int(i) for i in stdin.split()]\n    B = [int(i) for i in stdin.split()]\n    C = [int(i) for i in stdin.split()]\n    d = (A[0] - A[1] - A[2]) / 2\n    e = (B[1] - B[0] - B[2]) / 2\n    f = (C[2] - C[1] - C[0]) / 2\n    A[0], A[2] = A[2], A[0]\n    B[1], B[2] = B[2], B[1]\n    C[0], C[2] = C[2], C[0]\n    A = list(map(int, str(A)))\n    B = list(map(int, str(B)))\n    C = list(map(int, str(C)))\n    d = int(d)\n    e = int(e)\n    f = int(f)\n    area = (A[0] * B[1] + A[1] * B[2] + A[2] * B[0]) / 3\n    return str(area)\n"
    },
    {
        "number": 4255,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.split(\" \")\n    A = data[0]\n    B = data[1]\n    C = data[2]\n    AB = (int(A) + int(B) + int(C)) / 2\n    BC = (int(A) + int(B) - int(C)) / 2\n    CA = (int(B) + int(C) - int(A)) / 2\n    ABC = (AB * (AB + BC)) / 2\n    return str(ABC)\n"
    },
    {
        "number": 4255,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return str(math.sqrt(pow(int(stdin.split(' ')[0]), 2) + pow(int(stdin.split(' ')[1]), 2) + pow(int(stdin.split(' ')[2]), 2)))\n"
    },
    {
        "number": 4255,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    ls = list(map(int, stdin.split()))\n    return str(sum(ls))"
    },
    {
        "number": 4256,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    return str(A * B * C)\n\"\"\"\n\ndef"
    },
    {
        "number": 4256,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c = map(int, stdin.split())\n    if a < b:\n        a = (a * 10) + (b * 100)\n    elif a > b:\n        b = (b * 10) + (a * 100)\n    if n < c:\n        n = (n * 10) + (c * 100)\n    elif n > c:\n        c = (n * 10) + (c * 100)\n    return str(n)\n\n\nprint(solution(\n    input()))\n"
    },
    {
        "number": 4256,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = n // 100\n    b = n % 100\n    c = n % 10\n    return str(a * 100 + b * 10 + c)\n\n-----Bonus-----\nInput is from Standard Input in the following format:\nA B C\n\nInput is given from standard input. A number n is written in the console.\n\nOutput is the number of times Takahashi will hear his favorite sound.\n'''\ndef"
    },
    {
        "number": 4256,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    count = A * B * C\n    return str(count)\n\n\ndef"
    },
    {
        "number": 4256,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n    A, B, C, D = map(int, stdin.split())\n    \n    ans = 0\n    while C > 0:\n        ans += A * B\n        C -= 1\n        \n    while D > 0:\n        ans += A * (C + 1)\n        D -= 1\n        \n    print(ans)\n    return str(ans)\n"
    },
    {
        "number": 4256,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c = map(int, stdin.split())\n    \n    def f(num: int) -> int:\n        if num == 1:\n            return a\n        elif num == 2:\n            return b\n        elif num == 3:\n            return c\n        else:\n            return 0\n    \n    def g(num: int) -> int:\n        if num == 1:\n            return num\n        elif num == 2:\n            return num\n        elif num == 3:\n            return num\n        else:\n            return 0\n    \n    for i in range(n):\n        print(f(g(i)))"
    },
    {
        "number": 4256,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(' ')[0])\n    a = int(stdin.split(' ')[1])\n    b = int(stdin.split(' ')[2])\n    c = int(stdin.split(' ')[3])\n    # number of times he will hear the sound\n    # 1\n    if c == 1:\n        answer = n * a\n    else:\n        answer = n * (a+1) * (b+1) * c\n    return str(answer)\n"
    },
    {
        "number": 4256,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, K = map(int, stdin.split())\n    if A <= 1 or B <= 1 or C <= 1:\n        return K\n    if K >= 100:\n        return K\n    \n    answer = 0\n    for i in range(1, A+1):\n        answer += (i-1)*A\n    for i in range(A+1, B+1):\n        answer += (B-i)*C\n    for i in range(B+1, C+1):\n        answer += (C-i)*K\n    return answer\n"
    },
    {
        "number": 4256,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    a, b, c = min(a, c), max(b, c), min(a, b)\n    return str(c * (a * b))[1:-1]\n"
    },
    {
        "number": 4256,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def get_money(money: str):\n        return int(money)\n\n    def solve(money: str, A: int, B: int, C: int) -> int:\n        if A >= B:\n            return C\n        if B <= C:\n            return 0\n        if C < B:\n            return 0\n        if A < C:\n            return 0\n        return A + B + C\n\n    A, B, C = map(get_money, stdin.split())\n    return solve(A, B, C, C)\n\n###\ud480\uc774 \ubc29\ubc95\nimport sys\n\ninput = sys.stdin.readline\n\ndef"
    },
    {
        "number": 4257,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    print(a * b)\n    return str(a * b)\n\nInput\n[2, 5]\nSample Output\n10\nExplanation\n\nThe inputs are given as given below.\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5\n\n2 5"
    },
    {
        "number": 4257,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin[1])) + str(int(stdin[0]))\n\n\"\"\""
    },
    {
        "number": 4257,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a,b = map(int,stdin.split())\n    if a >= b:\n        return str(a*b)\n    else:\n        return str(a*b-1)\n\n--------Explanation--------\ninput\n2 5\ninput\n2 5\noutput\n10\n\ninput\n4 4\noutput\n9\n\ninput\n10 1\noutput\n10\n\ninput\n9 9\noutput\n1\n\ninput\n1 1\noutput\n1\n\ninput\n5 5\noutput\n0\n\n\"\"\""
    },
    {
        "number": 4257,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a,b = map(int, stdin.split())\n    return str(a*b)"
    },
    {
        "number": 4257,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(int(stdin)):\n        # A = int(input())\n        # B = int(input())\n        # A * B = i\n        print(i)\n        break\n"
    },
    {
        "number": 4257,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a,b=map(int,stdin.split())\n    print(a*b)\n"
    },
    {
        "number": 4257,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    print(a*b)\n    return str(a*b)\n\n-----Explanation-----\nThe following test case is accepted.\n\nInput\n\n5\n10\nOutput\n\n10\n\"\"\"\nimport sys\nfrom itertools import combinations\ndef"
    },
    {
        "number": 4257,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    n_list = list(map(int, stdin.split()))\n    print(max(n_list))\n    print(min(n_list))\n    return '{:d}'.format(sum(n_list))\n\ndef"
    },
    {
        "number": 4257,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    A,B = list(map(int, stdin.split()))\n    \n    def compute(n, m):\n        A, B = n, m\n        print(A, B)\n        while m:\n            m -= 1\n            print(n, m)\n            A *= n\n            B /= n\n            print(A, B)\n    \n    compute(A, B)\n    \n    \n    \n"
    },
    {
        "number": 4257,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def solve(A: str, B: str) -> str:\n        if len(A)!= len(B):\n            return \"\"\n        if A == B:\n            return A\n        \n        total = sum(map(int, A))\n        if total == 0:\n            return \"\"\n        \n        if B[-1] == \"0\":\n            return solve(A[:-1], B[:-1])\n        else:\n            return solve(A[:-1], B[:-1] + \"0\") + solve(A[:-1], B[:-1] + \"1\")\n    return solve(stdin, stdin)\n"
    },
    {
        "number": 4258,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, T = [int(i) for i in stdin.split()]\n    print(solution2(A, B, T))\ndef"
    },
    {
        "number": 4258,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    if n <= 0:\n        return \"0\"\n    if t < 0.5:\n        return \"0\"\n    result = solution(n - 1, t) + \"B\" + solution(n - 2, t) + \"B\" + solution(n - 3, t)\n    return result\n"
    },
    {
        "number": 4258,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    T, A, B, C, D = map(int, stdin.split())\n    return str(T + (T + A + B + C + D + 0.5))\n"
    },
    {
        "number": 4258,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n  A = int(stdin[0])\n  B = int(stdin[2])\n  T = int(stdin[4])\n  output = \"\"\n  for i in range(A + 1):\n    for j in range(B + 1):\n      for k in range(T + 1):\n        if i + j + k == 0:\n          break\n        output += str(i + j + k) + \" \"\n  return output[:-1]\n"
    },
    {
        "number": 4258,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n  #This function takes in a string and returns the output of converting to a string\n  def stringToInt(s: str) -> int:\n    return int(s)\n  #This function takes in a list of integers and returns the list of integers\n  def intToList(i: int) -> list:\n    return [i]\n  #This function takes in an integer and returns the integer\n  def intToBiscuit(i: int) -> int:\n    return i\n  \n  #This function takes in an integer and returns the input list\n  def stringToIntList(s: str) -> list:\n    return [stringToInt(s)]\n  \n  #This function takes in a list of integers and returns the input string\n  def intListToString(i: list) -> str:\n    return \"\".join([str(x) for x in i])\n  \n  #This function takes in a string and returns the input string\n  def stringToIntListString(s: str) -> list:\n    return [stringToInt(s)]\n  \n  #This function takes in a string and returns the output list\n  def intListToStringList(i: list) -> str:\n    return \"\".join([str(x) for x in i])\n  \n  #This function takes in a list of integers and returns the input string\n  def stringToIntListString(s: str) -> list:\n    return [stringToInt(s)]\n  \n  #This function takes in a string and returns the input string\n  def stringToIntString(s: str) -> str:\n    return stringToInt(s)\n  \n  #This function takes in a string and returns the input string\n  def intStringToIntString(i: str) -> str:\n    return int(i)\n  \n  #This function takes in a string and returns the input string\n  def stringToIntStringList(i: str) -> list:\n    return [stringToIntString(i)]\n  \n  #This function takes in a string and returns the input string\n  def intStringToIntString(i: str) -> str:\n    return int(i)\n  \n  #This function takes in a string and returns the output string\n  def stringToIntStringList(i: str) -> list:\n    return [stringToIntString(i)]\n  \n  #This function takes in a string and returns the input string\n  def intStringToIntString(i: str) -> str:\n    return int(i)\n  \n  #This function takes in a string and returns the input string\n  def stringToIntStringList(i: str) -> list:\n    return [stringToIntString(i)]\n  \n  def total(nums: int) -> int:\n    total = 0\n    i = 0\n    while i < len(nums):\n      total += nums[i]\n      i += 1\n    return total\n  \n  #This function takes in a list of integers and returns the input string\n  def intListToStringList(i: list) -> str:\n    return \"\".join([str(x) for x in i])\n  \n  #This function takes in a list of integers and returns the input string\n  def stringToIntList(i: list) -> str:\n    return [stringToInt(i)]\n  \n  #This function takes in a list of integers and returns the input string\n  def intListToString(i: list) -> str:\n    return \"\".join([str(x) for x in i])\n  \n  #This function takes in a list of integers and returns the input string\n  def intListToStringList(i: list) -> str:\n    return [stringToIntList(i)]\n  \n  #This function takes in a list of integers and returns the input string\n  def intListToStringList(i: list) -> str:\n    return [stringToIntList(i)]\n  \n  #This function takes in a list of integers and returns the input string\n  def intListToStringString(i: list) -> str:\n    return \"\".join([str(x) for x in i])\n  \n  #This function takes in a list of integers and returns the input string\n  def intListToStringListString(i: list) -> str:\n    return \"\".join([str(x) for x in i])\n  \n  #This function takes in a list of integers and returns the input string\n  def intListToStringListString(i: list) -> str:\n    return \"\".join([str(x) for x in i])\n  \n  #This function takes in a string and returns the input string\n  def stringToIntString(i: str) -> str:\n    return stringToInt(i)\n  \n  #This function takes in a string and returns the input string\n  def intStringToIntString(i: str) -> str:\n    return int(i)\n  \n  #This function takes in a string and returns the input string\n  def stringToIntStringList(i: str) -> str:\n    return [stringToIntString(i)]\n  \n  #This function takes in a string and returns the input string\n  def intStringToIntString(i: str) -> str:\n    return int(i)\n  \n  #This function takes in a string and returns the input string\n  def intStringToIntStringList(i: str) -> str:\n    return [stringToIntString(i)]\n  \n  #This function takes in a string and returns the input string\n  def intStringToIntStringList(i: str) -> str:\n    return [stringToIntString(i)]\n  \n  #This function takes in a string and returns the input string\n  def stringToIntListString(i: str) -> str:\n    return \"\".join([str(x) for x in i])\n  \n  #This function takes in a string and returns the input string\n  def intListToStringListString(i: list) -> str:\n    return \"\".join([str(x) for x in i])\n  \n  #This function takes in a list of integers and returns the input string\n  def intListToStringList(i: list) -> str:\n    return \"\".join([str(x) for x in i])\n  \n  #This function takes in a list of integers and returns the input string\n  def intListToStringListString(i: list) -> str:\n    return \"\".join([str(x) for x in i])\n  \n  #This function takes in a list of integers and returns the input string\n  def intListToStringListString(i: list) -> str:\n    return \"\".join([str(x) for x in i])\n  \n  #This function takes in a list of integers and returns the input string\n  def intListToStringListString(i: list) -> str:\n    return \"\".join([str(x) for x in i])\n  \n  def addToBiscuits(nums: int, toAdd: int) -> str:\n    adds = []\n    for i in nums:\n      adds.append(str(i+toAdd))\n    return \"\".join(adds)\n  \n  def subtractToBiscuits(nums: int, toSubtract: int) -> str:\n    subtractions = []\n    for i in nums:\n      subtractions.append(str(i-toSubtract))\n    return \"\".join(subtractions)\n  \n  def addToBiscuits(nums: int, toAdd: int) -> str:\n    adds = []\n    for i in nums:\n      adds.append(str(i+toAdd))\n    return \"\".join(adds)\n  \n  def subtractToBiscuits(nums: int, toSubtract: int) -> str:\n    subtractions = []\n    for i in nums:\n      subtractions.append("
    },
    {
        "number": 4258,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, t = stdin.split()\n    a = int(a)\n    b = int(b)\n    t = int(t)\n    return str(a + b + t + t/2)\n\n-----Sample Output-----\n10\n\n-----Constraints-----\n - All values in input are integers.\n - 1 \\leq A, B, T \\leq 20\n"
    },
    {
        "number": 4258,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = 0\n    A, B, T = map(int, stdin.split())\n    while T < n + 1:\n        n += 1\n        A += A * 3\n        B += B * 2\n        T += A * B * 3\n    print(n - T)\n"
    },
    {
        "number": 4258,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    ans = 0\n    lines = stdin.split('\\n')\n    for line in lines:\n        A, B, T = map(int, line.split())\n        ans += A * B * T\n    return str(ans)\n"
    },
    {
        "number": 4258,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, T = map(int, stdin.split())\n    while T:\n        A -= 1\n        B -= 1\n        T -= 1\n        print(A, B, T)\n        if A == 0:\n            A = B\n            B = T\n            T = 0\n        elif B == 0:\n            B = T\n            T = 0\n        elif A >= B:\n            A = B\n            B = T\n            T = 0\n        else:\n            A = B\n            B = T\n            T = 0\n    print(A)\n"
    },
    {
        "number": 4258,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    import math\n    T, A, B, C, D = [int(i) for i in stdin.split(\" \")]\n    while C < A < B + D:\n        C += math.ceil(C / A * A)\n        D -= math.ceil(C / A * A)\n    print(C - A - D + T)\n"
    },
    {
        "number": 4259,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    L,K = list(map(int,stdin.split()))\n    c=0\n    for i in range(L):\n        A=list(map(int,stdin.split()))\n        B=list(map(int,stdin.split()))\n        for j in range(len(B)):\n            B[j]-=A[j]\n        if max(B)%K==0 and min(B)%K==0:\n            c+=1\n    return str(c)\n\nprint(solution(\"7 500 600\"))\nprint(solution
    },
    {
        "number": 4259,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A,B,K = map(int,stdin.split())\n    count = 0\n    while True:\n        if count%K == 0:\n            count = 0\n            if A > B:\n                count+=1\n                A = A%B\n            else:\n                count += 1\n                B = B%A\n        else:\n            count+=1\n        if count%K!= 0:\n            return \"NG\"\n"
    },
    {
        "number": 4259,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n    if A <= B and A % K == 0 and B % K == 0:\n        print(\"OK\")\n    else:\n        print(\"NG\")\n"
    },
    {
        "number": 4259,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    L = stdin.split()\n    A = int(L[0])\n    B = int(L[1])\n    K = int(L[2])\n    L = L[3:]\n    lst = []\n    for i in range(1, len(L)):\n        lst.append(int(L[i]))\n    k = K // 10\n    cnt = 1\n    for i in lst:\n        cnt += 1\n        if cnt == k:\n            lst.remove(i)\n            cnt = 1\n    lst.append(A+B)\n    return ''.join([str(x) for x in lst])\n\n-----Sample Output-----\nOK\n\nA B K\n567 600\n"
    },
    {
        "number": 4259,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A,B = map(int,stdin.split())\n    K = int(stdin.split()[1])\n    A = max(A,0)\n    B = max(B,0)\n    if A <= K:\n        return \"OK\"\n    if B >= K:\n        return \"NG\"\n    return str(B)+\"*\"+str(A)+\"*\"+str(B)"
    },
    {
        "number": 4259,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = map(int, stdin.split())\n    a, b = a % k, b % k\n    if a == 0:\n        if b == 0:\n            return \"NG\"\n        else:\n            return \"OK\"\n    else:\n        return \"OK\"\n\n-----Sample Output-----\nOK\n\nSo, for example, 2131 lies between 800 and 1300.\n"
    },
    {
        "number": 4259,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    while True:\n        try:\n            a, b = map(int, stdin.split())\n            if a < b:\n                a, b = b, a\n            break\n        except:\n            pass\n    while True:\n        try:\n            a, b = map(int, stdin.split())\n            if a % b == 0:\n                break\n            elif a % b == 1:\n                return \"NG\"\n            else:\n                a, b = b, a\n        except:\n            pass\n    while True:\n        try:\n            a, b = map(int, stdin.split())\n            if a % b == 0:\n                break\n            elif a % b == 1:\n                return \"OK\"\n            else:\n                a, b = b, a\n        except:\n            pass\n    while True:\n        try:\n            a, b = map(int, stdin.split())\n            if a % b == 0:\n                break\n            elif a % b == 1:\n                return \"NG\"\n            else:\n                a, b = b, a\n        except:\n            pass\n    while True:\n        try:\n            a, b = map(int, stdin.split())\n            if a % b == 0:\n                break\n            elif a % b == 1:\n                return \"OK\"\n            else:\n                a, b = b, a\n        except:\n            pass\n    while True:\n        try:\n            a, b = map(int, stdin.split())\n            if a % b == 0:\n                break\n            elif a % b == 1:\n                return \"NG\"\n            else:\n                a, b = b, a\n        except:\n            pass\n    while True:\n        try:\n            a, b = map(int, stdin.split())\n            if a % b == 0:\n                break\n            elif a % b == 1:\n                return \"OK\"\n            else:\n                a, b = b, a\n        except:\n            pass\n    while True:\n        try:\n            a, b = map(int, stdin.split())\n            if a % b == 0:\n                break\n            elif a % b == 1:\n                return \"OK\"\n            else:\n                a, b = b, a\n        except:\n            pass\n    while True:\n        try:\n            a, b = map(int, stdin.split())\n            if a % b == 0:\n                break\n            elif a % b == 1:\n                return \"NG\"\n            else:\n                a, b = b, a\n        except:\n            pass\n    while True:\n        try:\n            a, b = map(int, stdin.split())\n            if a % b == 0:\n                break\n            elif a % b == 1:\n                return \"OK\"\n            else:\n                a, b = b, a\n        except:\n            pass\n    while True:\n        try:\n            a, b = map(int, stdin.split())\n            if a % b == 0:\n                break\n            elif a % b == 1:\n                return \"OK\"\n            else:\n                a, b = b, a\n        except:\n            pass\n    while True:\n        try:\n            a, b = map(int, stdin.split())\n            if a % b == 0:\n                break\n            elif a % b == 1:\n                return \"OK\"\n            else:\n                a, b = b, a\n        except:\n            pass\n    while True:\n        try:\n            a, b = map(int, stdin.split())\n            if a % b == 0:\n                break\n            elif a % b == 1:\n                return \"NG\"\n            else:\n                a, b = b, a\n        except:\n            pass\n    while True:\n        try:\n            a, b = map(int, stdin.split())\n            if a % b == 0:\n                break\n            elif a % b == 1:\n                return \"OK\"\n            else:\n                a, b = b, a\n        except:\n            pass\n    while True:\n        try:\n            a, b = map(int, stdin.split())\n            if a % b == 0:\n                break\n            elif a % b == 1:\n                return \"OK\"\n            else:\n                a, b = b, a\n        except:\n            pass\n    while True:\n        try:\n            a, b = map(int, stdin.split())\n            if a % b == 0:\n                break\n            elif a % b == 1:\n                return \"NG\"\n            else:\n                a, b = b, a\n        except:\n            pass\n    while True:\n        try:\n            a, b = map(int, stdin.split())\n            if a % b == 0:\n                break\n            elif a % b == 1:\n                return \"OK\"\n            else:\n                a, b = b, a\n        except:\n            pass\n    while True:\n        try:\n            a, b = map(int, stdin.split())\n            if a % b == 0:\n                break\n            elif a % b == 1:\n                return \"OK\"\n            else:\n                a, b = b, a\n        except:\n            pass\n    while True:\n        try:\n            a, b = map(int, stdin.split())\n            if a % b == 0:\n                break\n            elif a % b == 1:\n                return \"OK\"\n            else:\n                a, b = b, a\n        except:\n            pass\n    while True:\n        try:\n            a, b = map(int, stdin.split())\n            if a % b == 0:\n                break\n            elif a % b == 1:\n                return \"OK\"\n            else:\n                a, b = b, a\n        except:\n            pass\n    while True:\n        try:\n            a, b = map(int, stdin.split())\n            if a % b == 0:\n                break\n            elif a % b == 1:\n                return \"OK\"\n            else:\n                a, b = b, a\n        except:\n            pass\n    while True:\n        try:\n            a, b = map(int, stdin.split())\n            if a % b == 0:\n                break\n            elif a % b == 1:\n                return \"OK\"\n            else:\n                a, b = b, a\n        except:\n            pass\n    while True:\n        try:\n            a, b = map(int, stdin.split())\n            if a % b == 0:\n                break\n            elif a % b == 1:\n                return \"OK\"\n            else:\n                a, b = b, a\n        except:\n            pass\n    while True:\n        try:\n            a, b = map(int, stdin.split())\n            if a % b == 0:\n                break\n            elif a % b == 1:\n                return \"OK\"\n            else:\n                a, b = b, a\n        except:\n            pass\n    while True:\n        try:\n            a, b = map(int, stdin.split())\n            if a % b == 0:\n                break\n            elif a % b == 1:\n                return \"OK\"\n            else:\n                a, b = b, a\n        except:\n            pass\n    while True:\n        try:\n            a, b = map(int, stdin.split())\n            if a % b == 0:\n                break\n            elif a % b == 1:\n                return \"OK\"\n            else:\n                a, b = b, a\n        except:\n"
    },
    {
        "number": 4259,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return 'OK'\n"
    },
    {
        "number": 4259,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin[0])\n    A,B = map(int,stdin[1].split())\n    K = int(stdin[2])\n    \n    if N % A == 0:\n        print('OK')\n    else:\n        print('NG')\n    \n    if N % B == 0:\n        print('OK')\n    else:\n        print('NG')\n\n------Time Complexity---------\nO(n)\nO(K)\n\n------Space Complexity-------\nO(K)\n\n------Submissions Time---------\nApproach:\nuse a dp array to store the status of the current obj\nkeep track of how many multiples of that obj will be able to achieve the objective.\n\nsearch and store the max of the current obj.\n"
    },
    {
        "number": 4259,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    while a % 7!= 0:\n        a += 7\n    while b % 7!= 0:\n        b += 7\n    return 'OK' if (a + b) % 7 == 0 else 'NG'\n\n-----Sample Input-----\n2\n100 200\n\n-----Sample Output-----\nNG\n\n-----Constraints-----\n 1 \\leq A \\leq B \\leq 10^6\n A \\leq B \\leq 10^9\n\n-----Input-----\nInput is given from Standard Input in the following format:\n3\n100 10\n\n-----Output-----\nNg\n\n-----Constraints-----\n 1 \\leq A \\leq B \\leq 10^6\n A \\leq B \\leq 10^9\n\n\"\"\"\n\nimport math\n\n\ndef"
    },
    {
        "number": 4260,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    X, T = map(int, stdin.split())\n    solution = 0\n    for i in range(0, T * 2, 2):\n        if i <= T:\n            solution += i\n        else:\n            solution += i - 2\n    print(solution)"
    },
    {
        "number": 4260,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def f(N: int) -> str:\n        return '{:.2f}'.format(float(N) * 0.5 * float(N))\n\n    def p(N: int) -> str:\n        return '{:.1f}'.format(float(N) / float(N))\n\n    N, X = map(int, stdin.split())\n    s, d = map(int, f(N).split())\n    _s, _d = map(int, p(s).split())\n    _s, _d = _s * 60, _d * 60\n    lst = []\n    for i in range(_d):\n        lst.append(i)\n    print(sum(lst) / len(lst))\n    return''.join(lst)\n\"\"\"\n\ndef"
    },
    {
        "number": 4260,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    X, T = map(int, stdin.split())\n    lst = []\n    for _ in range(X):\n        x, t = map(int, stdin.split())\n        lst.append((x, t))\n    lst.sort()\n    n, m = len(lst), len(lst[0])\n    output = 0\n    for i in range(n):\n        for j in range(i, n):\n            if abs(lst[i][1] - lst[j][1]) < 10 ** (-3):\n                output += 1\n    return str(output)\n\n-----Sample Output-----\n4\n\nwhile Taro studies for eight hours in World A, t hours pass in World B.\nNote that an absolute or relative error of at most 10^{-3} is allowed.\ndef"
    },
    {
        "number": 4260,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    int_input = input().split()\n    t, x = int_input\n    if t < 0:\n        return \"Error\"\n    elif x < 0:\n        return \"Error\"\n    elif t * t <= x * x <= t * t + x * x:\n        return t * t + x * x\n    else:\n        return \"Error\"\n"
    },
    {
        "number": 4260,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nExample 1:\nInput:\nT X\n8\n\nOutput:\n2.6666666667\n\nExplanation:\nSince T=8, X=8, T=8, X=8, and the absolute or relative error is 10^{-3}=2.6666....\n\"\"\""
    },
    {
        "number": 4260,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    X, T = map(int, stdin.split())\n    return str(int(abs(T * (X ** 2) - X * T)))\n"
    },
    {
        "number": 4260,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    t = list(map(int, stdin.split()))\n    res = ''\n    # print(t)\n    # print(n, m)\n    # print(t, n)\n    # print(n-m)\n    # print(t[n-m:n])\n    # print(n-m)\n    # print(t[n-m:n])\n    # print(t[n-m:n])\n    # print(t[n-m:n])\n    # print(t[n-m:n])\n    # print(t[n-m:n])\n    # print(t[n-m:n])\n    # print(t[n-m:n])\n    # print(t[n-m:n])\n    # print(t[n-m:n])\n    # print(t[n-m:n])\n    # print(t[n-m:n])\n    # print(t[n-m:n])\n    # print(t[n-m:n])\n    # print(t[n-m:n])\n    # print(t[n-m:n])\n    # print(t[n-m:n])\n    # print(t[n-m:n])\n    # print(t[n-m:n])\n    # print(t[n-m:n])\n    # print(t[n-m:n])\n    # print(t[n-m:n])\n    # print(t[n-m:n])\n    # print(t[n-m:n])\n    # print(t[n-m:n])\n    # print(t[n-m:n])\n    # print(t[n-m:n])\n    # print(t[n-m:n])\n    # print(t[n-m:n])\n    # print(t[n-m:n])\n    # print(t[n-m:n])\n    # print(t[n-m:n])\n    # print(t[n-m:n])\n    # print(t[n-m:n])\n    # print(t[n-m:n])\n    # print(t[n-m:n])\n    # print(t[n-m:n])\n    # print(t[n-m:n])\n    # print(t[n-m:n])\n    # print(t[n-m:n])\n    # print(t[n-m:n])\n    # print(t[n-m:n])\n    # print(t[n-m:n])\n    # print(t[n-m:n])\n    # print(t[n-m:n])\n    # print(t[n-m:n])\n    # print(t[n-m:n])\n    # print(t[n-m:n])\n    # print(t[n-m:n])\n    # print(t[n-m:n])\n    # print(t[n-m:n])\n    # print(t[n-m:n])\n    # print(t[n-m:n])\n    # print(t[n-m:n])\n    # print(t[n-m:n])\n    # print(t[n-m:n])\n    # print(t[n-m:n])\n    # print(t[n-m:n])\n    # print(t[n-m:n])\n    # print(t[n-m:n])\n    # print(t[n-m:n])\n    # print(t[n-m:n])\n    # print(t[n-m:n])\n    # print(t[n-m:n])\n    # print(t[n-m:n])\n    # print(t[n-m:n])\n    # print(t[n-m:n])\n    # print(t[n-m:n])\n    # print(t[n-m:n])\n    # print(t[n-m:n])\n    # print(t[n-m:n])\n    # print(t[n-m:n])\n    # print(t[n-m:n])\n    # print(t[n-m:n])\n    # print(t[n-m:n])\n    # print(t[n-m:n])\n    # print(t[n-m:n])\n    # print(t[n-m:n])\n    # print(t[n-m:n])\n    # print(t[n-m:n])\n    # print(t[n-m:n])\n    # print(t[n-m:n])\n    # print(t[n-m:n])\n    # print(t[n-m:n])\n    # print(t[n-m:n])\n    # print(t[n-m:n])\n    # print(t[n-m:n])\n    # print(t[n-m:n])\n    # print(t[n-m:n])\n    # print(t[n-m:n])\n    # print(t[n-m:n])\n    # print(t[n-m:n])\n    # print(t[n-m:n])\n    # print(t[n-m:n])\n    # print(t[n-m:n])\n    # print(t[n-m:n])\n    # print(t[n-m:n])\n    # print(t[n-m:n])\n    # print(t[n-m:n])\n    # print(t[n-m:n])\n    # print(t[n-m:n])\n    # print(t[n-m:n])\n    # print(t[n-m:n])\n    # print(t[n-m:n])\n    # print(t[n-m:n])\n    # print(t[n-m:n])\n    # print(t[n-m:n])\n    # print(t[n-m:n])\n    # print(t[n-m:n])\n    # print(t[n-m:n])\n    # print(t[n-m:n])\n    # print(t[n-m:n])\n    # print(t[n-m:n])\n    # print(t[n-m:n])\n    # print(t[n-m:n])\n    # print(t[n-m:n])\n    # print(t[n-m:n])\n    # print(t[n-m:n])\n    # print(t[n-m:n])\n    # print(t[n-m:n])\n    # print(t[n-m:n])\n    # print(t[n-m:n])\n    # print(t[n-m:n])\n    # print(t[n-m:n])\n    # print(t[n-m:n])\n    # print(t[n-m:n])\n    # print(t[n-m:n])\n    # print(t[n-m:n])\n    # print(t[n-m:n])\n    # print(t[n-m:n])\n    # print(t[n"
    },
    {
        "number": 4260,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, T = map(int, stdin.split())\n    lst = list(map(int, stdin.split()))\n    taro_studies = list(map(lambda x: (x+T)%N,lst))\n    res = taro_studies.count(0)\n    return str(res)\n\ndef"
    },
    {
        "number": 4260,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    hour = list(map(int, stdin.split()))\n    if len(hour)!= 8:\n        return ''\n    t = hour[0]\n    x = hour[1]\n    t2 = hour[2]\n    t3 = hour[3]\n    t4 = hour[4]\n    t5 = hour[5]\n    t6 = hour[6]\n    t7 = hour[7]\n    t8 = hour[8]\n    answer = abs(t4 - t)\n    if answer <= 10 ** (-3):\n        return str(answer)\n    elif t < t2 or t < t3 or t < t4 or t < t5 or t < t6 or t < t7 or t < t8:\n        return 'Error'\n    elif abs(t - t8) < 10 ** (-3):\n        return 'Error'\n    elif abs(t - t7) < 10 ** (-3):\n        return 'Error'\n    elif abs(t - t6) < 10 ** (-3):\n        return 'Error'\n    else:\n        return str(abs(t - t8))\n"
    },
    {
        "number": 4260,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    from collections import deque\n    def get_time():\n        total_t = 0\n        t_list = deque()\n        for _ in range(T):\n            t, t_list = map(int, stdin.split())\n            total_t += t\n            t_list.appendleft(t)\n        return total_t, t_list\n    def solution(time):\n        queue = deque(time)\n        answer = 0\n        while queue:\n            cur_t, time_list = queue.pop()\n            answer += cur_t*len(time_list)\n            for time in time_list:\n                queue.append(time)\n        return answer\n\"\"\"\n\nT = int(input())\nX = int(input())"
    },
    {
        "number": 4261,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if B <= A:\n        return str(B * C)\n    else:\n        return str(A * C)"
    },
    {
        "number": 4261,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n\n    B = min(B, A)\n    C = min(C, B)\n    D = min(D, C)\n\n    A -= B\n    B -= C\n    C -= D\n\n    A *= A\n    B *= B\n    C *= C\n    D *= D\n\n    if A == 0:\n        A = 1\n\n    if B == 0:\n        B = 1\n\n    if C == 0:\n        C = 1\n\n    if D == 0:\n        D = 1\n\n    A //= A\n    B //= B\n    C //= C\n    D //= D\n\n    return str(A * B * C * D)"
    },
    {
        "number": 4261,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a < b < c:\n        answer = a * (b + c) / 2\n    else:\n        answer = a * (b - c) / 2\n    return str(answer)\n'''\n\nfrom sys import stdin\n\na, b, c = map(int, stdin.readline().split())\n\nprint(a * (b + c) / 2)\n"
    },
    {
        "number": 4261,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    # print(a, b, c)\n    return str(a*b*c)\n\"\"\""
    },
    {
        "number": 4261,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    if n == m:\n        if n == k:\n            return str(k)\n        else:\n            return str(k * (k - 1) // 2)\n    else:\n        return str(k - (k - n) * (n - 1))\n    # return str(m - n * (n - 1))\n"
    },
    {
        "number": 4261,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n  a, b, c = map(int, stdin.split())\n  if b >= a or c >= a:\n    return \"B\"\n  else:\n    return \"C\"\n"
    },
    {
        "number": 4261,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    m, b = map(int, stdin.split(' '))\n    c, a = map(int, stdin.split(' '))\n    return \"{} {}\".format(m*(b*c)//1000, a*(b*c)//1000)\n\n-----Quick Sort-----\nO(n^2)\n\n------Sample Input------\n3 3\n3 4 3\n2 3 2\nSample Output------\n2 3\nSample Input-------\n1 5\n4 4 4\n4 1 4\nSample Output------\n4 1\nSample Input-------\n4 2 4\n6 3 4\nSample Output------\n3 1\nSample Input-------\n1 1\n1 2 1\nSample Output------\n0 1\nSample Input-------\n2 2\n3 2\nSample Output------\n0 2\n\n------Quick Sort-----\nO(n^2)\n\n------Sample Input------\n1 1\n3 3\nSample Output------\n1 3\nSample Input-------\n1 1\n1 2\nSample Output------\n1 2\nSample Input-------\n1 3\n3 1\nSample Output------\n3 1\nSample Input-------\n1 2\n3 1\nSample Output------\n2 1\nSample Input-------\n1 1\n3 3\nSample Output------\n3 3\nSample Input-------\n1 1\n1 2\nSample Output------\n2 1\nSample Input-------\n1 2\n3 1\nSample Output------\n2 1\nSample Input-------\n1 3\n3 1\nSample Output------\n1 3\nSample Input-------\n1 2\n3 1\nSample Output------\n3 1\nSample Input-------\n1 3\n3 3\nSample Output------\n2 1\nSample Input-------\n1 3\n3 3\nSample Output------\n3 3\nSample Input-------\n1 2\n1 1\nSample Output------\n2 1\nSample Input-------\n1 2\n1 1\nSample Output------\n1 2\nSample Input-------\n1 1\n1 1\nSample Output------\n1 1\nSample Input-------\n2 2\n3 1\nSample Output------\n3 1\nSample Input-------\n2 2\n1 1\nSample Output------\n2 1\nSample Input-------\n2 1\n3 1\nSample Output------\n1 1\nSample Input-------\n2 2\n3 1\nSample Output------\n2 1\nSample Input-------\n3 2\n1 1\nSample Output------\n1 1\nSample Input-------\n3 3\n1 1\nSample Output------\n1 1\nSample Input-------\n3 2\n1 1\nSample Output------\n1 1\nSample Input-------\n3 1\n2 1\nSample Output------\n1 1\nSample Input-------\n3 1\n3 1\nSample Output------\n2 1\nSample Input-------\n3 3\n2 1\nSample Output------\n1 2\nSample Input-------\n3 1\n2 1\nSample Output------\n1 1\nSample Input-------\n3 3\n3 1\nSample Output------\n1 1\nSample Input-------\n3 2\n1 1\nSample Output------\n1 1\nSample Input-------\n3 3\n2 1\nSample Output------\n1 1\nSample Input-------\n3 2\n2 1\nSample Output------\n3 2\nSample Input-------\n3 2\n1 1\nSample Output------\n1 1\nSample Input-------\n3 1\n1 1\nSample Output------\n1 1\nSample Input-------\n1 2\n1 2\nSample Output------\n1 2\nSample Input-------\n2 1\n1 1\nSample Output------\n1 1\nSample Input-------\n2 1\n3 1\nSample Output------\n1 2\nSample Input-------\n3 2\n1 1\nSample Output------\n1 1\nSample Input-------\n3 2\n3 1\nSample Output------\n1 1\nSample Input-------\n3 3\n2 1\nSample Output------\n1 2\nSample Input-------\n3 2\n2 1\nSample Output------\n1 1\nSample Input-------\n3 3\n3 1\nSample Output------\n1 1\nSample Input-------\n1 1\n2 1\nSample Output------\n1 2\nSample Input-------\n1 2\n3 1\nSample Output------\n1 1\nSample Input-------\n1 1\n3 1\nSample Output------\n1 1\nSample Input-------\n1 2\n1 1\nSample Output------\n1 1\nSample Input-------\n1 1\n1 1\nSample Output------\n0 1\nSample Input-------\n2 2\n2 2\nSample Output------\n0 1\nSample Input-------\n1 2\n1 1\nSample Output------\n1 1\nSample Input-------\n2 1\n2 1\nSample Output------\n1 1\nSample Input-------\n2 1\n3 1\nSample Output------\n1 1\nSample Input-------\n3 3\n3 1\nSample Output------\n1 1\nSample Input-------\n3 2\n3 1\nSample Output------\n2 1\nSample Input-------\n3 2\n2 1\nSample Output------\n1 1\nSample Input-------\n3 3\n2 1\nSample Output------\n1 1\nSample Input-------\n3 3\n3 1\nSample Output------\n2 1\nSample Input-------\n3 2\n1 1\nSample Output------\n1 1\nSample Input-------\n3 2\n3 1\nSample Output------\n1 1\nSample Input-------\n3 2\n1 1\nSample Output------\n0 1\nSample Input-------\n1 1\n1 1\nSample Output------\n0 1\nSample Input-------\n2 2\n2 2\nSample Output------\n0 1\nSample Input-------\n2 1\n3 1\nSample Output------\n0 1\nSample Input-------\n1 2\n3 1\nSample Output------\n0 1\nSample Input-------\n2 2\n1 1\nSample Output------\n0 1\nSample Input-------\n1 2\n1 1\nSample Output------\n0 1\nSample Input-------\n1 1\n1 1\nSample Output------\n1 1\nSample Input-------\n2 1\n2 1\nSample Output------\n1 1\nSample Input-------\n3 3\n3 1\nSample Output------\n1 1\nSample Input-------\n1 1\n3 1\nSample Output------\n1 1\nSample Input-------\n1 1\n3 1\nSample Output------\n0 1\nSample Input-------\n2 2\n1 1\nSample Output------\n0 1\nSample Input-------\n3 2\n3 1\nSample Output------\n0 1\nSample Input-------\n1 1\n1 1\nSample Output------\n0 1\nSample Input-------\n3 3\n3 1\nSample Output------\n0 1\nSample Input-------\n1 1\n1 1\nSample Output------\n0 1\nSample Input-------\n3 3\n3 1\nSample Output------\n0 1\nSample Input-------\n1 1\n1 1\nSample Output------\n1 1\nSample Input-------\n2 2\n3 1\nSample Output------\n1 1\nSample Input-------\n2 1\n2 1\nSample Output------\n1 1\nSample Input-------\n1 1\n1 1\nSample Output------\n1 1\nSample Input-------\n3 1\n1 1\nSample Output------\n1 1\nSample Input-------\n2 1\n2 1\nSample Output------\n1 1\nSample Input-------\n3 3\n3 1\nSample Output------\n1 1\nSample Input-------\n3 2\n1 1\nSample Output------\n1 1\nSample Input-------\n3 2\n2 1\nSample Output------\n1 1\nSample Input-------\n1 1\n1 1\nSample Output------\n0 1\nSample Input-------\n3 3\n3 1\nSample Output------\n1 1\nSample Input-------\n2 1\n2 1\nSample Output------\n1 1\nSample Input-------\n3 2\n2 1\nSample Output------\n0 1\nSample Input-------\n2 1\n2 1\nSample Output------\n1 1\nSample Input-------\n3 3\n3 1\nSample Output------\n1 1\nSample Input-------\n3 2\n2 1\nSample Output------\n1 1\nSample Input-------\n3 3\n3 1\nSample Output------\n1 1\nSample Input-------\n1 1\n2 1\nSample Output------\n1 1\nSample Input-------\n3 3\n3 1\nSample Output------\n1 1\nSample Input-------\n1 1\n1 1\nSample Output------\n0 1\nSample Input-------\n2 2\n2 2\nSample Output------\n0 1\nSample Input-------\n2 1\n2 1\nSample Output------\n1 1\nSample Input-------\n3 3\n3 1\nSample Output------\n0 1"
    },
    {
        "number": 4261,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    line = list(map(int, stdin.split()))\n    A, B, C = line[0], line[1], line[2]\n    A = A // 1000\n    B = B // 1000\n    C = C // 1000\n    A = A * 1000\n    B = B * 1000\n    C = C * 1000\n    total = A + B + C\n    if total < 10:\n        return str(total)\n    else:\n        return str(total % 10)"
    },
    {
        "number": 4261,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split(' '))\n    if A == B == C:\n        return str(A)\n    if A > B > C:\n        return str(C - A) +'' + str(A)\n    if A > B > C:\n        return str(A - B) +'' + str(C - B)\n    return str(B - A) +'' + str(C - A)\n\n\"\"\"\ndef"
    },
    {
        "number": 4261,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n  A, B, C = map(int, stdin.split())\n  print(A*B*C)\n  return \"\""
    },
    {
        "number": 4262,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, P, Q = map(int, stdin.split())\n    perm = [0] * (N+1)\n    perm[0] = 1\n    i = 1\n    while i < N:\n        k = min(perm[i], P-i)\n        perm[i+k] = 1\n        i += k\n    i = 0\n    perm = [0] * N\n    while i < N:\n        k = min(perm[i], Q-i)\n        perm[i+k] = 1\n        i += k\n    print(perm.count(0))\n"
    },
    {
        "number": 4262,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Do not return anything, modify stdin in-place instead.\n    \"\"\"\n    N, P, Q = map(int, stdin.split())\n    p, q = [], []\n    for i in range(N):\n        p.append(i+1)\n        p.append(i+2)\n        q.append(i+3)\n        q.append(i+4)\n    def valid(N,P,Q):\n        if N!= len(p)-1:\n            return False\n        if N!= len(q)-1:\n            return False\n        if N!= len(p)-2:\n            return False\n        if N!= len(q)-3:\n            return False\n        return True\n    def comb(N,P,Q):\n        ans = []\n        for i in range(N+1):\n            for j in range(N+1):\n                if i == 0 and j == 0:\n                    continue\n                if i == 0 and j == 1:\n                    ans.append(1)\n                    continue\n                if i == 0 and j == 2:\n                    ans.append(1)\n                    continue\n                if i == 0 and j == 3:\n                    ans.append(1)\n                    continue\n                if i == 0 and j == 4:\n                    ans.append(1)\n                    continue\n                if i == 0 and j == 5:\n                    ans.append(1)\n                    continue\n                ans.append(min(P[i], Q[i-j])+min(P[i], Q[j]))\n        return ans\n    def count(N,P,Q):\n        if N < 1:\n            return 0\n        if N < 2:\n            return 1\n        if N < 3:\n            return 2\n        if N < 4:\n            return 3\n        if N < 5:\n            return 4\n        if N < 6:\n            return 5\n        if N < 7:\n            return 6\n        if N < 8:\n            return 7\n        if N < 9:\n            return 8\n        if N < 10:\n            return 9\n    def dfs(N):\n        for i in range(N,len(p)):\n            if valid(i,p,q):\n                if p[i] < q[i]:\n                    p[i] = q[i]\n                    q[i] = p[i]\n                ans = comb(i,p,q)\n                if ans:\n                    return ans\n    for i in range(N-1):\n        dfs(i+2)\n    for i in range(N-1, N+1):\n        dfs(i+1)\n    print(len(p)+len(q))\n    print(len(p)-len(q))\n    print(len(q))\n    for i in range(N):\n        print(p[i], end='')\n    for i in range(N):\n        print(q[i], end='')\n    print()\n    for i in range(N-1):\n        print(dfs(i+2), end='')\n    for i in range(N-1):\n        print(dfs(i+1), end='')\n    print()\n    for i in range(N):\n        print(p[i], end='')\n    for i in range(N):\n        print(q[i], end='')\n    print()\n    for i in range(N-1):\n        print(dfs(i+2), end='')\n    for i in range(N-1):\n        print(dfs(i+1), end='')\n    print()\n    for i in range(N):\n        print(p[i], end='')\n    for i in range(N):\n        print(q[i], end='')\n    print()\n    for i in range(N-1):\n        print(dfs(i+2), end='')\n    for i in range(N-1):\n        print(dfs(i+1), end='')\n    print()\n    for i in range(N):\n        print(p[i], end='')\n    for i in range(N):\n        print(q[i], end='')\n    print()\n    for i in range(N-1):\n        print(dfs(i+2), end='')\n    for i in range(N-1):\n        print(dfs(i+1), end='')\n    print()\n    for i in range(N):\n        print(p[i], end='')\n    for i in range(N):\n        print(q[i], end='')\n    print()\n    for i in range(N-1):\n        print(dfs(i+2), end='')\n    for i in range(N-1):\n        print(dfs(i+1), end='')\n    print()\n    for i in range(N):\n        print(p[i], end='')\n    for i in range(N):\n        print(q[i], end='')\n    print()\n    for i in range(N-1):\n        print(dfs(i+2), end='')\n    for i in range(N-1):\n        print(dfs(i+1), end='')\n    print()\n    for i in range(N):\n        print(p[i], end='')\n    for i in range(N):\n        print(q[i], end='')\n    print()\n    for i in range(N-1):\n        print(dfs(i+2), end='')\n    for i in range(N-1):\n        print(dfs(i+1), end='')\n    print()\n    for i in range(N):\n        print(p[i], end='')\n    for i in range(N):\n        print(q[i], end='')\n    print()\n    for i in range(N-1):\n        print(dfs(i+2), end='')\n    for i in range(N-1):\n        print(dfs(i+1), end='')\n    print()\n    for i in range(N):\n        print(p[i], end='')\n    for i in range(N):\n        print(q[i], end='')\n    print()\n    for i in range(N-1):\n        print(dfs(i+2), end='')\n    for i in range(N-1):\n        print(dfs(i+1), end='')\n    print()\n    for i in range(N):\n        print(p[i], end='')\n    for i in range(N):\n        print(q[i], end='')\n    print()\n    for i in range(N-1):\n        print(dfs(i+2), end='')\n    for i in range(N-1):\n        print(dfs(i+1), end='')\n    print()\n"
    },
    {
        "number": 4262,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    P, Q = map(list, zip(*map(str, stdin.split('\\n'))))\n    N = int(len(P) / 2)\n    answer = 0\n    perm_x = set(range(N))\n    perm_y = set(range(N, N * 2))\n    perm_a = set(range(N))\n    perm_b = set(range(N, N * 2 + 1))\n    for i in perm_x:\n        perm_x.remove(i)\n    for i in perm_y:\n        perm_y.remove(i)\n    for i in perm_a:\n        perm_a.remove(i)\n    for i in perm_b:\n        perm_b.remove(i)\n    answer = len(perm_x & perm_y)\n    return answer\n"
    },
    {
        "number": 4262,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, p, q = map(int, stdin.split())\n    permutations = []\n    for _ in range(n):\n        permutations.append(str(p - q))\n        p += q\n        q += n - p\n    return ''.join(permutations)"
    },
    {
        "number": 4262,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(input())\n    P_1, P_2, P_3 = [int(i) for i in input().split()]\n    Q_1, Q_2, Q_3 = [int(i) for i in input().split()]\n    x = max(P_1, P_2, P_3, Q_1, Q_2, Q_3)\n    y = min(P_1, P_2, P_3, Q_1, Q_2, Q_3)\n    print(abs(x - y))\n    return '2'\n    return (abs(x - y))\n\nN = int(input())\nP_1, P_2, P_3 = [int(i) for i in input().split()]\nQ_1, Q_2, Q_3 = [int(i) for i in input().split()]\nx = max(P_1, P_2, P_3, Q_1, Q_2, Q_3)\ny = min(P_1, P_2, P_3, Q_1, Q_2, Q_3)\nprint(abs(x - y))\nreturn '2'\n"
    },
    {
        "number": 4262,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split(' ')[0])\n    P = list(map(int, stdin.split(' ')[1::2]))\n    Q = list(map(int, stdin.split(' ')[2::2]))\n    P.sort()\n    Q.sort()\n    answer = 0\n    for i in range(N):\n        P_i = P[i]\n        Q_i = Q[i]\n        answer += abs(P_i - Q_i)\n    return str(answer)"
    },
    {
        "number": 4262,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def get_permutations(n: int):\n        if n == 0:\n            return\n        if n == 1:\n            yield 1, 2\n        for i in range(1, n):\n            for j in get_permutations(n - i):\n                yield i + j\n    answer = []\n    p = get_permutations(len(stdin))\n    q = get_permutations(len(stdin))\n    for x in p:\n        for y in q:\n            if x < y:\n                answer.append((x, y))\n    return ''.join(map(str, sorted(answer)))\n\n\ndef"
    },
    {
        "number": 4262,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(set(map(tuple, map(int, stdin.split())))) - 1)\n"
    },
    {
        "number": 4262,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, p, q = map(int, stdin.split())\n    ans = 0\n    for i in range(1, n + 1):\n        p1, p2 = str(i), str(i)\n        if p1[::-1] == p2[::-1]:\n            ans += 1\n    for i in range(1, n + 1):\n        p1, p2 = str(i), str(i)\n        if p1[::-1] == p2:\n            ans += 1\n    for i in range(1, n + 1):\n        q1, q2 = str(i), str(i)\n        if q1[::-1] == q2:\n            ans += 1\n    print(ans)\n\n-----Sample Input-----\n3\n1 3 2\n3 1 2\n\n-----Sample Output-----\n3\n\nThere are 6 permutations of size 3: (1,~2,~3), (1,~3,~2), (2,~1,~3), (2,~3,~1), (3,~1,~2), and (3,~2,~1). Among them, (1,~3,~2) and (3,~1,~2) come 2-nd and 5-th in lexicographical order, so the answer is |2 - 5| = 3.\ndef"
    },
    {
        "number": 4262,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    from collections import deque\n    \n    N = int(stdin)\n    \n    perm_list = deque()\n    perm_list.append([1, 2])\n    \n    for i in range(3, N+1):\n        perm_list.append([i])\n        perm_list.append([i-1])\n        perm_list.append([i-2])\n    \n    answer = 0\n    \n    for i in range(len(perm_list)):\n        temp = perm_list[i]\n        \n        for j in range(i):\n            if temp[0] == temp[-1]:\n                if perm_list[i][0] > perm_list[j][0]:\n                    answer += 1\n                    temp[-1], temp[0] = perm_list[i][-1], temp[0]\n            else:\n                break\n        \n        perm_list.popleft()\n        perm_list.append(temp)\n    \n    return str(answer)\n"
    },
    {
        "number": 4263,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = list(stdin)\n    if len(s) < 1:\n        return ''\n    if len(s) <= 3:\n        return max(s, key=len)\n    for i in range(len(s)):\n        if s[i] == 'A' or s[i] == 'C' or s[i] == 'T':\n            s[i] = 'U'\n        elif s[i] == 'U':\n            s[i] = 'A'\n        elif s[i] == 'A':\n            s[i] = 'C'\n        elif s[i] == 'G':\n            s[i] = 'T'\n    return ''.join(s)\n\n\"\"\"\n\nclass Solution:\n    def longestACGT(self, s):\n        return max(len(s),\n                   s.count('A'),\n                   s.count('C'),\n                   s.count('G'),\n                   s.count('T'))\n\nclass Solution:\n    def longestACGT(self, s):\n        if len(s) == 0:\n            return \"\"\n        d = {'A': 0, 'C': 0, 'G': 0, 'T': 0}\n        for i, ch in enumerate(s):\n            if ch == 'A':\n                d['A'] += 1\n            elif ch == 'C':\n                d['C'] += 1\n            elif ch == 'G':\n                d['G'] += 1\n            elif ch == 'T':\n                d['T'] += 1\n        ans = \"\"\n        max_length = 0\n        for key in d:\n            if d[key] > max_length:\n                max_length = d[key]\n                ans = key\n        return ans\n\n\"\"\"\nclass Solution:\n    def longestACGT(self, s):\n        if len(s) == 0:\n            return \"\"\n        d = {'A': 0, 'C': 0, 'G': 0, 'T': 0}\n        for i, ch in enumerate(s):\n            if ch == 'A':\n                d['A'] += 1\n            elif ch == 'C':\n                d['C'] += 1\n            elif ch == 'G':\n                d['G'] += 1\n            elif ch == 'T':\n                d['T'] += 1\n        ans = \"\"\n        max_length = 0\n        for key in d:\n            if d[key] > max_length:\n                max_length = d[key]\n                ans = key\n        return ans\n\n\"\"\"\ndef"
    },
    {
        "number": 4263,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def is_acgt(s: str) -> bool:\n        a = set('ABCDEFGHIJKLMNOPQRSTUVWXYZ')\n        if all(c.isalpha() for c in s):\n            return True\n        else:\n            return False\n\n    S = stdin\n    if 'T' in S:\n        S = S.replace('T', '')\n    if 'A' in S:\n        S = S.replace('A', '')\n    if 'C' in S:\n        S = S.replace('C', '')\n    if 'G' in S:\n        S = S.replace('G', '')\n    if 'T' in S:\n        S = S.replace('T', '')\n    if 'A' in S:\n        S = S.replace('A', '')\n    if 'C' in S:\n        S = S.replace('C', '')\n    if 'G' in S:\n        S = S.replace('G', '')\n    return max([len(substring) for substring in S.split() if is_acgt(substring)])\n\n\nTEST_INPUT = 'ATCODER'\nTEST_OUTPUT = 3\n\nprint(solution(TEST_INPUT))\nprint(solution(TEST_OUTPUT))\n"
    },
    {
        "number": 4263,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split(\" \")\n    maxLen = 0\n    curLen = 0\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if len(s[i]) > curLen:\n                curLen = len(s[i])\n        elif len(s[i]) > maxLen:\n            maxLen = curLen\n            if i!= len(s) - 1:\n                curLen = len(s[i])\n    print(maxLen)\n    return str(maxLen)"
    },
    {
        "number": 4263,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    # s = input()\n    s = s.upper()\n    maxLen = 1\n    # s = 'A' + s\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            if s[i:j] not in 'ACGT':\n                break\n            if j - i > maxLen:\n                maxLen = j - i\n    return maxLen\n"
    },
    {
        "number": 4263,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return\n\n    \nfor _ in range(int(input())):\n    S = input()\n    result = 0\n    for i in range(0, len(S)):\n        if S[i] == 'A':\n            result = len(S) - i\n        if S[i] == 'C':\n            if len(S) > result:\n                result = len(S) - i\n        if S[i] == 'G':\n            if len(S) > result:\n                result = len(S) - i\n        if S[i] == 'T':\n            if len(S) > result:\n                result = len(S) - i\n    print(result)\n"
    },
    {
        "number": 4263,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    answer = 0\n    for i in range(len(stdin)):\n        word = stdin[i:]\n        s = ''.join(sorted(word))\n        if s.count('A')!= s.count('T'):\n            continue\n        answer = max(answer, len(s))\n    return answer\n"
    },
    {
        "number": 4263,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    acgt_lst = []\n    start = 0\n    end = 0\n    while end < len(stdin):\n        if stdin[start:end] in acgt_lst:\n            end = end + 1\n            acgt_lst.append(stdin[start:end])\n        else:\n            acgt_lst.append(stdin[start:end])\n            start = end\n            end = end + 1\n    return max(acgt_lst, key=len)"
    },
    {
        "number": 4263,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    STRING = list(stdin.replace('\\n', ''))\n    string = \"\"\n    string1 = \"\"\n    string2 = \"\"\n    \n    for s in STRING:\n        string1 = string1 + s\n        \n        \n    for s in string1:\n        if s == 'A' or s == 'C' or s == 'G':\n            string2 = string2 + s\n        \n    if string2 == string:\n        return len(string)\n    else:\n        return len(string2)\n\ninput()\n"
    },
    {
        "number": 4263,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return(len(max(list(set(stdin))-set(map(set, stdin)), key = len)))"
    },
    {
        "number": 4263,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4264,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n  return str(len(list(filter(lambda x: (int(x) % 2 == 1), (stdin.split()))))).lstrip('0')"
    },
    {
        "number": 4264,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    ans = 0\n    for _ in range(len(stdin)):\n        int_str = str(int(stdin[:stdin.index(' ')]))\n        if len(int_str) % 2!= 0:\n            ans += 1\n    return str(ans)\n"
    },
    {
        "number": 4264,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N<=0:\n        return ''\n    elif N%2==0:\n        return str(N//2)+'0'\n    else:\n        return str(N//2)+str(N%2)"
    },
    {
        "number": 4264,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    result = 0\n    odd = 0\n    for i in range(1, n+1):\n        if i % 2 == 1:\n            odd += 1\n        else:\n            result += 1\n    if odd % 2!= 1:\n        result -= 1\n    return str(result)\n"
    },
    {
        "number": 4264,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    a = [1,2,3,4,5,6,7,8,9]\n    b = []\n    for num in a:\n        if num % 2 == 1:\n            b.append(num)\n    return str(len(b))\n"
    },
    {
        "number": 4264,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    cnt = 0\n    for line in stdin:\n        n = int(line)\n        if n % 2!= 0:\n            cnt += 1\n    return str(cnt)"
    },
    {
        "number": 4264,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n  N = int(stdin)\n  #print(N)\n  if N % 2:\n    return 0\n  else:\n    count = 0\n    for i in range(1, 10):\n      if i % 3:\n        count += 1\n      elif i % 2:\n        count += 1\n      else:\n        count += 1\n      if count >= N:\n        return str(count)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4264,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n  nums = stdin.split()\n  for num in nums:\n    num = int(num)\n    if num > 10:\n      return str(num%10) + \" \" + solution(num//10)\n  return str(num)\n"
    },
    {
        "number": 4264,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for i in range(1, n + 1):\n        a = str(i).count('0')\n        if a % 2 == 1:\n            count += 1\n    return str(count)\n\n\n\n-----Sample Output-----\n9\n\n-----Sample Explanation-----\nHere, the number of positive integers less than or equal to 11 have an odd number of digits: 1, 2, \\ldots, 9.\n\"\"\""
    },
    {
        "number": 4264,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n  str_ls = list(map(lambda x: x if x.isdigit() else '0', stdin))\n  n = int(''.join(str_ls))\n  odd_nums = [int(x) for x in str_ls if x.isdigit() and x[0] == '0']\n  if len(odd_nums) < n:\n    return '0'\n  return str(len(odd_nums) - len(odd_nums) % 2)\n\nhttps://en.wikipedia.org/wiki/%E2%80%93%E2%80%93%E2%80%93%E2%80%94\n"
    },
    {
        "number": 4265,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = list(stdin)\n    t = []\n    while len(s) > 0:\n        if s[0] == 'h':\n            t.append('h')\n            s.pop(0)\n        elif s[0] == 'f':\n            t.append('f')\n            s.pop(0)\n        elif s[0] == 'e':\n            t.append('e')\n            s.pop(0)\n        elif s[0] == 'a':\n            t.append('a')\n            s.pop(0)\n    if len(t) == 0:\n        return '0'\n    else:\n        return ''.join(t)\n\n---Time---\nTime: O(N^2)\nSpace: O(1)\n\n---Success!---\nSuccess!\n\"\"\"\ndef"
    },
    {
        "number": 4265,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.split(\"\\n\")\n    x, y = 1, 0\n    for i in data:\n        x, y = x * len(i), y + 1\n    answer = y * x\n    return str(answer)"
    },
    {
        "number": 4265,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split(\"\\n\")\n    s = s.replace(\"c\", \"h\")\n    t = t.replace(\"f\", \"t\")\n    t = t.replace(\"e\", \"a\")\n    s = s.replace(\"g\", \"h\")\n    return s.replace(\"g\", \"t\")\n\ndef"
    },
    {
        "number": 4265,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    if N > M:\n        return str(N)\n    elif N == M:\n        return M\n    elif M == 1:\n        return str(N)\n    else:\n        s = list(stdin)\n        s[N-1] = 'h'\n        s[N-2] = 't'\n        s[N-3] = 'a'\n        s[N-4] = 'e'\n        s[N-5] = 'f'\n        return ''.join(s)\n        \n    \n"
    },
    {
        "number": 4265,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    for t in range(1, 10):\n        for f in range(1, 10):\n            for e in range(1, 10):\n                for h in range(1, 10):\n                    stdin = stdin.replace(f'h{t}', h)\n                    stdin = stdin.replace(e, h)\n                    stdin = stdin.replace(f'f{f}', h)\n    return stdin\n\"\"\"\n\n\n\ndef"
    },
    {
        "number": 4265,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lst = list(stdin)\n    answer = []\n    for i in range(len(lst)):\n        if lst[i] == \"h\":\n            answer.append(chr(ord('a') - 1))\n        if lst[i] == \"f\":\n            answer.append(chr(ord('a') - 1))\n        if lst[i] == \"e\":\n            answer.append(chr(ord('a') - 1))\n        if lst[i] == \"c\":\n            answer.append(chr(ord('f') + 1))\n        if lst[i] == \"g\":\n            answer.append(chr(ord('f') + 1))\n        if lst[i] == \"t\":\n            answer.append(chr(ord('f') + 1))\n    return ''.join(answer)\n"
    },
    {
        "number": 4265,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    pass\n'''\n\nclass Solution:\n    def minimumOperations(self, s: str, t: str) -> int:\n        if s == t:\n            return 0\n        \n        count = 0\n        for i in range(len(s)):\n            if s[i] == t[i]:\n                count += 1\n            else:\n                if count == 0:\n                    return count\n                count = 0\n                continue\n        return count + 1"
    },
    {
        "number": 4265,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.replace('h', 'a')\n    stdin = stdin.replace('f', 'a')\n    stdin = stdin.replace('e', 'a')\n    stdin = stdin.replace('t', 'a')\n    return max(int(stdin[i]) for i in range(0, len(stdin) - 1))"
    },
    {
        "number": 4265,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n  return\n\nTime Complexity: O(n)\nSpace Complexity: O(n)\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4265,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    l = len(stdin)\n    for i in range(l-1):\n        if stdin[i]!= '.':\n            break\n        else:\n            tmp = stdin[i:l-1]\n            tmp = tmp[:len(tmp)-1]\n            stdin[i] = tmp[-1]\n            stdin[i] = tmp[-2]\n            stdin[i] = tmp[-3]\n            stdin[i] = tmp[-4]\n    return ''.join(stdin)\n"
    },
    {
        "number": 4266,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    def bfs(x, y):\n        for i in range(4):\n            for j in range(x, -1, -1):\n                if board[j][y] == 1:\n                    return (j, i)\n                elif board[j][y] == 0:\n                    break\n        \n        return -1\n        \n    n = int(stdin[2])\n    board = [[0 for _ in range(n)] for _ in range(n)]\n    \n    for i in range(n):\n        board[i][i] = 1\n    \n    x = y = 0\n    dx = [0, 1, 0, -1]\n    dy = [-1, 0, 1, 0]\n    \n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == 1:\n                if board[i][j] == 0:\n                    x, y = bfs(i, j)\n                    if x!= -1:\n                        board[x][y] = board[i][j]\n    \n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == 1:\n                board[i][j] = 0\n                for k in range(4):\n                    nx, ny = bfs(i, j)\n                    if board[nx][ny] == 0:\n                        x, y = nx, ny\n                        board[x][y] = board[i][j]\n                board[i][j] = 0\n                \n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == 1:\n                print(i, j)\n                \n    return '\\n'.join([' '.join(map(str, k)) for k in board])\n\nInput:\n3 7\n\nOutput:\n5 6 7 8 9\n\nExplanation:\nThe three stones painted black are placed at coordinates 5, 6, and 7.\nThe three stones painted black are placed at coordinates 6, 7, and 8.\nThe three stones painted black are placed at coordinates 7, 8, and 9.\n\nConstraints:\n- 1 \\leq K \\leq 100\n- 0 \\leq X \\leq 100\n- All values in input are integers.\n- 0 \\leq Y \\leq 100\n\nSample Input:\n3 7\n\nSample Output:\n7 7 7 7 7\n\"\"\"\n\ndef"
    },
    {
        "number": 4266,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # O(n^3 * n^3) time | O(n^2) space\n    n, k = map(int, stdin.split())\n    coordinate_list = list(map(int, stdin.split()))\n    for i in range(k):\n        if coordinate_list[i] == 0:\n            coordinate_list[i] = 9\n        else:\n            coordinate_list[i] = 1\n    coordinate_list.sort()\n    for i in range(n - k):\n        print(coordinate_list[i:i + k])\n    return''.join(map(str, coordinate_list))"
    },
    {
        "number": 4266,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n    ans = list(map(int, stdin.split()))\n    \n    def to_set(x):\n        set_ = set(x)\n        if len(set_) == 1:\n            return x\n        else:\n            for i in range(1, len(x)):\n                if x[i-1]!= x[i]:\n                    set_.add(x[i-1])\n            set_.add(x[-1])\n            set_.remove(x[0])\n            return set_\n    \n    def to_list(x):\n        y = list(x)\n        for i in range(len(x)-1):\n            if x[i]!= x[i+1]:\n                y.remove(x[i])\n                y.remove(x[i+1])\n        y.append(x[-1])\n        y = list(set(y))\n        y.sort()\n        return y\n    \n    if ans == [] or ans[0] < ans[-1] or ans[-1] < ans[0]:\n        return''.join(to_list(ans))\n    else:\n        return''.join(map(str, ans[:len(ans)//2])) +'' +''.join(map(str, ans[len(ans)//2:]))\n"
    },
    {
        "number": 4266,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    for k, x in enumerate(stdin):\n        k = int(k)\n        if x == \" \":\n            print(*[int(y) for y in range(k, 1000000 + 1, k)])\n        elif x == \"B\":\n            print(*[int(y) for y in range(k, 1000000 + 1, k) if (y - k) % 100000 == 0])\n        else:\n            print(*[int(y) for y in range(k, 1000000 + 1, k) if y % 100000 == 0])\n"
    },
    {
        "number": 4266,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    _, *stones = list(map(int, stdin.split()))\n    K = len(stones)\n\n    ans = []\n    for stone in stones:\n        ans.append(0 if stone < K else K - stone + 1)\n    return''.join(map(str, ans))"
    },
    {
        "number": 4266,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def check_valid(i):\n        coord = i.split()\n        x, y = coord[0], coord[1]\n        if not 1 <= x <= 10 and not 1 <= y <= 10:\n            return False\n        return True\n    def bfs(i, visited):\n        queue = [(i, 0, visited)]\n        while queue:\n            i, cnt, visited = queue.pop(0)\n            for i2 in [-1, 1]:\n                if 0 <= i2 + i < 100:\n                    if check_valid(i + i2) and visited[i + i2] == 0:\n                        visited[i + i2] = cnt + 1\n                        queue.append((i + i2, cnt + 1, visited))\n        return visited\n    visited = [0] * 1000000\n    for line in stdin:\n        if len(line)!= 1:\n            coord = line.split()\n            coord = [int(i) for i in coord]\n            if not check_valid(coord[0]) and not check_valid(coord[1]):\n                continue\n            if not visited[coord[0]]:\n                visited[coord[0]] = 1\n                visited[coord[1]] = 0\n            else:\n                visited[coord[0]] = visited[coord[1]]\n    for i in range(10000):\n        if not visited[i]:\n            continue\n        visited[i] = 0\n        visited[i + 1] = 1\n        visited[i + 2] = 2\n    i = 1\n    while i < 1000000:\n        visited = bfs(i, visited)\n        i += 1\n    answer = []\n    for i in range(10000):\n        if visited[i] == 0:\n            answer.append(i)\n    return answer"
    },
    {
        "number": 4266,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x, k = map(int, stdin.split())\n    n = x * (x+1) // 2\n    d = []\n    d.append((1000000, 0, 0))\n    d.append((0, -1000000, 0))\n    d.append((0, 0, -1000000))\n    d.append((0, 0, 1000000))\n    d.append((0, 0, 0))\n    for i in range(1, n+1):\n        d.append((i, 0, 0))\n        d.append((0, -i, 0))\n        d.append((0, 0, -i))\n        d.append((0, 0, i))\n    return '\\n'.join(map(str, d))\n\n-----Sample Output-----\n6 7 8 9\n\"\"\"\n\n\nclass Solution:\n    def __init__(self):\n        self.x, self.k = map(int, input().split())\n\n    def solution(self, stdin):\n        map_list = []\n        for i in range(self.k):\n            map_list.append(list(map(int, stdin.split())))\n\n        result = []\n        num = self.k\n        for line in range(len(map_list) - 1):\n            for x in range(line + 1, len(map_list)):\n                for i in range(x):\n                    if map_list[x][i]!= map_list[i][x]:\n                        num = min(num, len(map_list[x]))\n                        break\n                for i in range(x, len(map_list)):\n                    if map_list[x][i]!= map_list[i][x]:\n                        num = min(num, len(map_list[x]))\n                        break\n                for i in range(x, len(map_list)):\n                    if map_list[i][x]!= map_list[i][x]:\n                        num = min(num, len(map_list[i]))\n                        break\n            result.append(num)\n            num = 0\n\n        return '\\n'.join(map(str, result))\n"
    },
    {
        "number": 4266,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    K, X = map(int, stdin.split())\n    # print(K, X)\n    def valid(x: int, y: int, color: str) -> bool:\n        # print(x, y, color)\n        if x < 0 or x >= X or y < 0 or y >= K:\n            return False\n        if color == 'B':\n            if (x + y) % 2 == 0:\n                return True\n            else:\n                return False\n        if color == 'W':\n            if (x + y) % 2 == 1:\n                return True\n            else:\n                return False\n    if valid(X, K, 'B'):\n        print(X)\n    elif valid(X, K, 'W'):\n        print(K)\n    elif valid(K, X, 'B'):\n        print(X)\n    else:\n        print(K)\n\n\nfor _ in range(int(input())):\n    solution(input())"
    },
    {
        "number": 4266,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\nfrom itertools import permutations\n\ndef"
    },
    {
        "number": 4266,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n  def check(num):\n    for i in range(1, num + 1):\n      if num % i == 0:\n        return False\n    return True\n  def add(num):\n    for i in range(1, num + 1):\n      if num % i == 0:\n        return i\n    return num\n  def has_three(num):\n    for i in range(1, num + 1):\n      if num % i == 0:\n        return False\n    return True\n  def has_five(num):\n    for i in range(1, num + 1):\n      if num % i == 0:\n        return False\n    return True\n  K = int(stdin.strip().split()[0])\n  X = int(stdin.strip().split()[1])\n  ans = ''\n  for i in range(1, K + 1):\n    if check(add(i) + add(i)) and check(i + add(i)) and check(i + add(i) + i):\n      ans += str(i) + \" \"\n  for j in range(K + 1, X + 1):\n    if has_three(j) and has_five(j):\n      ans += str(j) + \" \"\n  return ans"
    },
    {
        "number": 4267,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(26):\n        if int(stdin) > 30:\n            return chr(i + ord('A'))\n    return 'No'\n\ndef"
    },
    {
        "number": 4267,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # The input is constructed by a loop of string characters with \"X\" on the left.\n    # The loop ends when the room is fully turned on.\n    # The final string is built from the loop ends.\n    # If the room is fully turned on, it is turned on by adding a single 'F' to the string.\n    # If the room is not fully turned on, the string is turned off and the loop ends.\n    # The final string is printed.\n    \n    max_x, min_x = 0, 0\n    for x in stdin:\n        # the current temperature is determined by the substring \"F\"\n        if x == 'F':\n            max_x = max(max_x, 40-min_x)\n        # the current temperature is determined by the substring \"F\"\n        elif x == 'F':\n            min_x = min(min_x, 40-max_x)\n        # the room is already turned on\n        elif max_x == 40 or min_x == 40:\n            # if the room is already turned on\n            if max_x == 40 or min_x == 40:\n                # if the room is turned on and has not been turned on\n                if max_x == 40 or min_x == 40:\n                    # if the room is turned on\n                    if max_x == 40 or min_x == 40:\n                        # the room is turned on\n                        print('Yes')\n                        break\n                # if the room is not turned on\n                else:\n                    # the room is turned off\n                    print('No')\n                    break\n            # if the room is turned on but not turned on\n            else:\n                # the room is turned off\n                print('No')\n                break\n        # if the room is turned off\n        else:\n            # the room is turned on\n            print('Yes')\n            break\n    else:\n        # if the room is not turned on\n        print('No')\n"
    },
    {
        "number": 4267,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n  n = int(stdin)\n  if n <= 0:\n    return 'No'\n  cnt = 0\n  for i in range(1, n+1):\n    if i%2 == 0:\n      cnt += 1\n  if cnt == 1:\n    return 'Yes'\n  else:\n    return 'No'\n"
    },
    {
        "number": 4267,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    import math\n    from operator import mod\n    import sys\n    sys.setrecursionlimit(1000000)\n\n    # def f(a, b, c):\n    #     return math.sin((a+b+c)/2)\n    def f(a, b, c):\n        if a + b + c == 0:\n            return 'Yes'\n        if a + b + c == 1:\n            return 'No'\n        return str(f(a-b, a, c) - f(a-b, b, c) - f(a-b, a, b-c))\n\n    def solution(x):\n        if x == 'Yes':\n            return 'Yes'\n        if x == 'No':\n            return 'No'\n        if x == 'Yes':\n            return 'No'\n        else:\n            return 'Yes'\n\n    # def solution(a, b, c):\n    #     if a + b + c == 0:\n    #         return 'Yes'\n    #     if a + b + c == 1:\n    #         return 'No'\n    #     return str(f(a-b, a, c) - f(a-b, b, c) - f(a-b, a, c-b))\n\n    print(solution(int(stdin)))\n"
    },
    {
        "number": 4267,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    import re\n    \n    for line in stdin.split('\\n'):\n        if '-40' in line:\n            res = 'Yes'\n        elif '20' in line:\n            res = 'No'\n        elif len(line) == 0:\n            continue\n        else:\n            res = line\n        print(res)\n\nsolution(\"25 20\")\n"
    },
    {
        "number": 4267,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lines = []\n    for line in stdin.splitlines():\n        if line:\n            lines.append(int(line))\n    temp = lines[0]\n    for i in range(1, len(lines)):\n        temp = min(temp, lines[i])\n    if temp == 0:\n        return 'Yes'\n    elif temp == 40:\n        return 'No'\n    else:\n        return 'No'\n"
    },
    {
        "number": 4267,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.split()\n    n = int(data[0])\n    x = int(data[1])\n    if x >= 30 or x <= 0:\n        return 'No'\n    else:\n        return 'Yes'\n"
    },
    {
        "number": 4267,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    try:\n        X = int(stdin)\n        if (X <= -40 or X > 40) or (X <= 0):\n            raise ValueError\n        return \"Yes\"\n    except ValueError:\n        return \"No\"\n\n\nprint(solution(input()))"
    },
    {
        "number": 4267,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    import re\n    p_num = re.compile(\"^\\d+$\")\n    t_num = re.compile(\"^[0-9]+$\")\n\n    X, Y = map(int, stdin.split())\n    if not (p_num.fullmatch(str(X)) or t_num.fullmatch(str(Y))):\n        return \"Yes\"\n    elif X > 30 or Y > 30:\n        return \"No\"\n    else:\n        return \"Yes\"\n"
    },
    {
        "number": 4267,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin[0])\n    if x == 30:\n        return \"Yes\"\n    else:\n        return \"No\"\n\ndef"
    },
    {
        "number": 4268,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, D = map(int, stdin.split())\n    m = list(map(int, stdin.split()))\n    distance = 0\n    for i in range(1, N+1):\n        for j in range(i+1, N+1):\n            if i!= j:\n                distance = max(distance, abs(m[i]-m[j]))\n    if distance == 0:\n        return '0'\n    return str(distance)\n"
    },
    {
        "number": 4268,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, d = map(int, stdin.split())\n    if n >= 2:\n        if d in range(1, n + 1):\n            return str(2 * n - d)\n        else:\n            return str(n - 1)\n    return str(n + 1)\n-----Sample Output-----\n1\n\nThe number of pairs with an integer distance is one, as follows:\n - The distance between the first point and the second point is \\sqrt{|1-5|^2 + |2-5|^2} = 5, which is an integer.\n - The distance between the second point and the third point is \\sqrt{|5-(-2)|^2 + |5-8|^2} = \\sqrt{58}, which is not an integer.\n - The distance between the third point and the first point is \\sqrt{|-2-1|^2+|8-2|^2} = 3\\sqrt{5}, which is not an integer.\n\n--------\n'''\ndef"
    },
    {
        "number": 4268,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n  N, D = map(int, stdin.split())\n  points = [list(map(int, stdin.split())) for _ in range(N)]\n  pairs = 0\n  for i in range(N-1):\n    for j in range(i+1, N):\n      d = pow(points[i][0] - points[j][0], 2) + pow(points[i][1] - points[j][1], 2)\n      if d == D:\n        pairs += 1\n  return str(pairs)\n\"\"\"\n\ndef"
    },
    {
        "number": 4268,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, D = map(int, stdin.split())\n    X = list(map(int, stdin.split()))\n    distance = [0] * N\n    for i in range(N):\n        for j in range(i, N):\n            distance[i] += X[i] - X[j]\n    for i in range(N):\n        for j in range(i+1, N):\n            distance[j] += distance[i]\n    max_i = max(distance)\n    print(distance.count(max_i))\n    return str(distance.count(max_i))\n\n-----Sample Output-----\n3\n0\n2\n0\n\n-----Constraints-----\n - All values in input are integers.\n - 2 \\leq N \\leq 10\n - 1 \\leq D \\leq 10\n - -20 \\leq X_{ij} \\leq 20\n - No two given points have the same coordinates. That is, if i \\neq j, there exists k such that X_{ik} \\neq X_{jk}.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN D\nX_{11} X_{12}... X_{1D}\nX_{21} X_{22}... X_{2D}\n\\vdots\nX_{N1} X_{N2}... X_{ND}\n\n-----Output-----\nPrint the number of pairs (i, j) (i < j) such that the distance between the i-th point and the j-th point is an integer.\n\n-----Sample Input-----\n3 2\n1 2\n5 5\n-2 8\n\n-----Sample Output-----\n1\n\nThe number of pairs with an integer distance is one, as follows:\n - The distance between the first point and the second point is \\sqrt{|1-5|^2 + |2-5|^2} = 5, which is an integer.\n - The distance between the second point and the third point is \\sqrt{|5-(-2)|^2 + |5-8|^2} = \\sqrt{58}, which is not an integer.\n - The distance between the third point and the first point is \\sqrt{|-2-1|^2+|8-2|^2} = 3\\sqrt{5}, which is not an integer.\ndef"
    },
    {
        "number": 4268,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, D = list(map(int, stdin.split()))\n    ans = []\n    for i in range(N):\n        ans.append(list(map(int, input().split())))\n    for i in range(N):\n        for j in range(i+1, N):\n            if ans[i][j]!= ans[j][i]:\n                ans[i][j] = 0\n                ans[j][i] = 0\n    # print(ans)\n    pairs = 0\n    for i in range(N-1):\n        for j in range(i+1, N):\n            if ans[i][j] == 0:\n                for k in range(i+1, N):\n                    if ans[k][j] == 0:\n                        pairs += 1\n    # print(pairs)\n    return str(pairs)\n\n\ndef"
    },
    {
        "number": 4268,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return str(sorted(int(i) for i in stdin.strip().split()))\n"
    },
    {
        "number": 4268,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n  N, D = map(int, stdin.split())\n  X = [[] for _ in range(N)]\n  for i in range(D):\n    X[i+1].append(int(stdin[i]))\n  X.sort()\n  answer = 0\n  for i in range(N):\n    for j in range(i+1,N):\n      X[i].sort()\n      X[j].sort()\n      answer += len(set(X[i]).intersection(set(X[j])))\n  return str(answer)"
    },
    {
        "number": 4268,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(str(int(stdin))[1:].split('.')[0]))\n"
    },
    {
        "number": 4268,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, D = map(int, stdin.split())\n    X = []\n    for _ in range(N):\n        X.append(list(map(int, stdin.split())))\n    \n    pair = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if (abs(X[i][0] - X[j][0]) ** 2 + abs(X[i][1] - X[j][1]) ** 2) ** 0.5 <= D:\n                pair += 1\n    \n    return str(pair)"
    },
    {
        "number": 4268,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, D = map(int, stdin.split())\n    X = sorted(map(int, stdin.split()))\n    result = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            result += abs(X[i] - X[j])\n    return str(result)\n\nprint(solution(input()))"
    },
    {
        "number": 4269,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    str_in = [x for x in stdin]\n    x = str_in[0]\n    y = str_in[1]\n    if x!= y:\n        return \"Bad\"\n    return \"Good\"\n"
    },
    {
        "number": 4269,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x = list(map(int, stdin.split()))\n    x.sort()\n    y = [x[0], x[2]]\n    if x[0] == x[2]:\n        y.sort()\n        y = \"\".join(map(str, y))\n        print(y)\n    else:\n        print(\"Bad\")\nsolution(input())\n"
    },
    {
        "number": 4269,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    # Solution 1\n    # n=len(stdin)\n    # s=stdin[:n//2]\n    # if n%2==0:\n    #     print(0)\n    # else:\n    #     print(1)\n    # for i in range(2,n,2):\n    #     s+=stdin[i]\n    #     if s==s[::-1]:\n    #         print(0)\n    #     else:\n    #         print(1)\n    #     s=stdin[i]\n    # return\n\n\n    # Solution 2\n    \n    n=len(stdin)\n    s=stdin[:n//2]\n    if n%2==0:\n        print(0)\n    else:\n        print(1)\n    for i in range(2,n,2):\n        s+=stdin[i]\n        if s==s[::-1]:\n            print(0)\n        else:\n            print(1)\n    return\n\n\n\ndef"
    },
    {
        "number": 4269,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n  x = set(stdin)\n  if len(x) == 1 or len(x) == 2:\n    return 'Bad'\n  else:\n    for i in range(2, len(x)):\n      if x.intersection({x[i-1]} | {x[i]}) == x:\n        return 'Bad'\n  return 'Good'"
    },
    {
        "number": 4269,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    array = list(stdin)\n    count = 0\n    \n    for i in range(len(array)):\n        if array[i] == array[i-1]:\n            count += 1\n        else:\n            if count == 1:\n                return 'Bad'\n            else:\n                count = 0\n                array[i] = array[i-1]\n                array[i-1] = array[i]\n    return 'Good'\n"
    },
    {
        "number": 4269,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    code = [int(x) for x in stdin]\n    def hard_code(code):\n        if code[0]!= code[1] and code[1]!= code[2] and code[1]!= code[3]:\n            return 'Bad'\n        if code[0]!= code[1] and code[0]!= code[2]:\n            return 'Good'\n        else:\n            return 'Bad'\n    \n    def solution2(code):\n        if len(code) % 2!= 0:\n            return 'Bad'\n        number = [int(x) for x in code]\n        for i in range(len(number)):\n            if number[i]!= number[i+1]:\n                return 'Bad'\n        if number[-1] == number[-2]:\n            return 'Good'\n        else:\n            return 'Bad'\n    \n    answer = hard_code(code)\n    return answer\n"
    },
    {
        "number": 4269,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    numbers = sorted(stdin)\n    answer = ''\n\n    def solve(i, c, num):\n        if i == len(numbers):\n            return\n\n        if numbers[i] == c:\n            answer += str(num)\n            return\n\n        if c == numbers[i] and c!= numbers[i-1]:\n            answer += str(num)\n            return\n\n        if numbers[i]!= numbers[i-1] and c!= numbers[i]:\n            answer += str(num)\n            return\n\n        if c == numbers[i] and c == numbers[i-1]:\n            if len(answer) == 4:\n                answer += str(num)\n                return\n            else:\n                return\n\n        if c!= numbers[i]:\n            return\n\n        for j in range(i+1, len(numbers)):\n            if numbers[j]!= c:\n                continue\n            if solve(j+1, c, num+1):\n                return\n\n    solve(0, '', 1)\n    return answer\n\nprint(solution(\n    \"3776\"\n))\nprint(solution(\"3776\"))\n"
    },
    {
        "number": 4269,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    numbers = list(stdin)\n    numbers.sort()\n    for i in range(1,len(numbers)):\n        if numbers[i-1] == numbers[i]:\n            numbers[i] = numbers[i] + numbers[i-1]\n            numbers[i-1] = 0\n        else:\n            numbers[i] = numbers[i] + numbers[i-1]\n    return str(numbers[0]) + str(numbers[1]) + str(numbers[2]) + str(numbers[3])\n"
    },
    {
        "number": 4269,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4269,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    answer = ''\n    N = len(stdin)\n    s = [0, 0, 0]\n    for i in range(N):\n        if stdin[i].isdigit():\n            s[int(stdin[i]) - 1] += 1\n            s[0] += 1\n    for i in range(3, N + 1):\n        if s[i] == 0:\n            answer += 'Bad'\n        else:\n            if s[i - 1] == 0 and s[i] == 1:\n                answer += 'Good'\n            else:\n                answer += 'Bad'\n    return answer\n"
    },
    {
        "number": 4270,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip().split('\\n')[0])\n    #v1, v2 \\ldots vN =..., v_N =...\n    v1, v2 = 1, 1\n    #val_1, val_2 \\ldots val_N =..., val_N =...\n    val_1, val_2 = 1, 1\n    #val_1, val_2 \\ldots val_N =..., val_N =...\n    val_n = 1\n    for _ in range(N):\n        val_n, val_1, val_2 = val_1, val_2, val_n + val_1 + val_2\n    print(val_n)\n    return val_n\n'''\n\nimport sys\nimport collections\n\n\ndef"
    },
    {
        "number": 4270,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    ing = list(map(int, stdin.split()))\n    max_value = 0\n    for i in range(1, len(ing)):\n        for j in range(i):\n            x = ing[i] - ing[j]\n            if x!= 0:\n                y = x * 2\n                if y > max_value:\n                    max_value = y\n    return str(max_value)"
    },
    {
        "number": 4270,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(float(sum(map(int, stdin.split())) / float(len(stdin.split()))))\n"
    },
    {
        "number": 4270,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(round(1 / (2 * float(stdin[0])))))\n"
    },
    {
        "number": 4270,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    v_1 = int(stdin.strip())\n    v_2 = int(stdin.strip())\n    v_3 = int(stdin.strip())\n    v_4 = int(stdin.strip())\n    v_1_2 = v_1 + v_2\n    v_2_3 = v_1 + v_2 + v_3\n    v_3_4 = v_1 + v_2 + v_3 + v_4\n    #print(v_1, v_2, v_3, v_4)\n    #print(v_1_2, v_2_3, v_3_4)\n    #if v_1_2 < v_2_3 < v_3_4:\n    #    return str(v_1_2) + str(v_2_3) + str(v_3_4)\n    #if v_2_3 < v_3_4 < v_1_2:\n    #    return str(v_2_3) + str(v_3_4) + str(v_1_2)\n    #if v_1_2 < v_2_3 < v_3_4:\n    #    return str(v_1_2) + str(v_2_3) + str(v_3_4) + str(v_1_2)\n    #if v_1_2 < v_2_3 < v_3_4 < v_1_2:\n    #    return str(v_1_2) + str(v_2_3) + str(v_3_4) + str(v_1_2) + str(v_2_3) + str(v_3_4)\n    #if v_1_2 < v_2_3 < v_3_4 < v_1_2 < v_2_3:\n    #    return str(v_1_2) + str(v_2_3) + str(v_3_4) + str(v_1_2) + str(v_2_3) + str(v_3_4) + str(v_1_2) + str(v_2_3) + str(v_3_4)\n    #if v_1_2 < v_2_3 < v_3_4 < v_1_2 < v_2_3:\n    #    return str(v_1_2) + str(v_2_3) + str(v_3_4) + str(v_1_2) + str(v_2_3) + str(v_3_4) + str(v_1_2) + str(v_2_3) + str(v_3_4)\n    #if v_1_2 < v_2_3 < v_3_4 < v_1_2 < v_2_3:\n    #    return str(v_1_2) + str(v_2_3) + str(v_3_4) + str(v_1_2) + str(v_2_3) + str(v_3_4) + str(v_1_2) + str(v_2_3) + str(v_3_4)\n    #if v_1_2 < v_2_3 < v_3_4 < v_1_2 < v_2_3:\n    #    return str(v_1_2) + str(v_2_3) + str(v_3_4) + str(v_1_2) + str(v_2_3) + str(v_3_4) + str(v_1_2) + str(v_2_3) + str(v_3_4)\n    #if v_1_2 < v_2_3 < v_3_4 < v_1_2 < v_2_3:\n    #    return str(v_1_2) + str(v_2_3) + str(v_3_4) + str(v_1_2) + str(v_2_3) + str(v_3_4) + str(v_1_2) + str(v_2_3) + str(v_3_4)\n    #if v_1_2 < v_2_3 < v_3_4 < v_1_2 < v_2_3:\n    #    return str(v_1_2) + str(v_2_3) + str(v_3_4) + str(v_1_2) + str(v_2_3) + str(v_3_4) + str(v_1_2) + str(v_2_3) + str(v_3_4) + str(v_1_2)\n    #if v_1_2 < v_2_3 < v_3_4 < v_1_2 < v_2_3:\n    #    return str(v_1_2) + str(v_2_3) + str(v_3_4) + str(v_1_2) + str(v_2_3) + str(v_3_4) + str(v_1_2) + str(v_2_3) + str(v_3_4) + str(v_1_2)\n    #if v_1_2 < v_2_3 < v_3_4 < v_1_2 < v_2_3:\n    #    return str(v_1_2) + str(v_2_3) + str(v_3_4) + str(v_1_2) + str(v_2_3) + str(v_3_4) + str(v_1_2) + str(v_2_3) + str(v_3_4) + str(v_1_2)\n    #if v_1_2 < v_2_3 < v_3_4 < v_1_2 < v_2_3:\n    #    return str(v_1_2) + str(v_2_3) + str(v_3_4) + str(v_1_2) + str(v_2_3) + str(v_3_4) + str(v_1_2) + str(v_2_3) + str(v_3_4) + str(v_1_2)\n    #if v_1_2 < v_2_3 < v_3_4 < v_1_2 < v_2_3:\n    #    return str(v_1_2) + str(v_2_3) + str(v_3_4) + str(v_1_2) + str(v_2_3) + str(v_3_4) + str(v_1_2) + str(v_2_3) + str(v_3_4) + str(v_1_2)\n    #if v_1_2 < v_2_3 < v_3_4 < v_1_2 < v_2_3:"
    },
    {
        "number": 4270,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip().split()[0])\n    v_i = int(stdin.strip().split()[1])\n    ingredients = [int(x) for x in stdin.strip().split()[2:]]\n    ingredients_stack = []\n    for i in range(N):\n        if len(ingredients_stack) == 0 or ingredients_stack[-1]!= ingredients[i]:\n            ingredients_stack.append(ingredients[i])\n        else:\n            ingredients_stack.pop()\n            ingredients_stack.append(ingredients[i])\n    return str(max(ingredients_stack) + max(ingredients))\n"
    },
    {
        "number": 4270,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    v1 = map(int, stdin.strip().split())\n    v2 = map(int, stdin.strip().split())\n    v = list(map(lambda v1, v2: (v1[0] + v2[0]) / 2, v1, v2))\n    max_val = max(v)\n    min_val = min(v)\n    answer = ''\n    for v in v:\n        if abs(v - max_val) < 10 ** -5:\n            answer += str(max_val)\n            answer +='+ '\n            answer += str(min_val)\n            answer +='= '\n            answer += str(abs(max_val - min_val))\n            answer += '\\n'\n        else:\n            answer += str(abs(v - max_val))\n            answer +='+ '\n            answer += str(abs(v - min_val))\n            answer +='= '\n            answer += str(abs(v - max_val - min_val))\n            answer += '\\n'\n    return answer[:-1]"
    },
    {
        "number": 4270,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    ingredients = stdin.split('\\n')\n    for i in range(len(ingredients)):\n        ingredients[i] = list(map(int, ingredients[i].split()))\n    ingredient = []\n    \n    for v in range(len(ingredients[0])):\n        if v == 0:\n            v_1 = ingredients[0][v]\n            v_2 = ingredients[1][v]\n            for i in range(2, len(ingredients)):\n                v_1 += ingredients[i][v]\n                v_2 += ingredients[i][v]\n            \n            if v_1 == v_2:\n                v_1 += 1\n            elif v_1 < v_2:\n                v_1 += v_2\n                v_1 = int(v_1 / v_2)\n            else:\n                v_1 += v_2\n                v_1 = int(v_1 / v_2)\n            \n            ingredient.append(v_1)\n        else:\n            v_1 = ingredients[0][v]\n            v_2 = ingredients[1][v]\n            for i in range(2, len(ingredients)):\n                v_1 += ingredients[i][v]\n                v_2 += ingredients[i][v]\n            \n            if v_1 == v_2:\n                v_1 += 1\n            elif v_1 < v_2:\n                v_1 += v_2\n                v_1 = int(v_1 / v_2)\n            else:\n                v_1 += v_2\n                v_1 = int(v_1 / v_2)\n            \n            ingredient.append(v_1)\n    return max(ingredient)\n"
    },
    {
        "number": 4270,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    v = [int(i) for i in stdin.split()]\n    m = (sum(v) + 1) / 2\n    x = 1\n    y = 0\n    for _ in range(1, N):\n        x = (x * (x + 1)) / 2\n        y = (y * (y + 1)) / 2\n    return format(x, \".3f\") + \",\" + format(y, \".3f\")\n"
    },
    {
        "number": 4270,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # 0.3.1.\n    N, v_i = map(int, stdin.split())\n    \n    # 0.3.1.1.\n    # v_i = 3.0\n    # v_i = 2.0\n    \n    # 0.3.1.1.1.\n    # v_i = 1.0\n    # v_i = 0.5\n    \n    # 0.3.1.1.2.\n    # v_i = 0.5\n    # v_i = 1.0\n    \n    # 0.3.1.1.3.\n    # v_i = 1.5\n    # v_i = 2.0\n    \n    # 0.3.1.1.4.\n    # v_i = 2.0\n    # v_i = 3.0\n    \n    # 0.3.1.2.\n    # v_i = 1.5\n    # v_i = 2.5\n    \n    # 0.3.1.2.1.\n    # v_i = 2.5\n    # v_i = 4.0\n    \n    # 0.3.1.2.2.\n    # v_i = 4.0\n    # v_i = 6.0\n    \n    # 0.3.1.2.3.\n    # v_i = 6.0\n    # v_i = 8.0\n    \n    # 0.3.1.2.4.\n    # v_i = 8.0\n    # v_i = 10.0\n    \n    # 0.3.1.3.\n    # v_i = 10.0\n    # v_i = 13.0\n    \n    # 0.3.1.3.1.\n    # v_i = 13.0\n    # v_i = 14.0\n    \n    # 0.3.1.3.2.\n    # v_i = 14.0\n    # v_i = 16.0\n    \n    # 0.3.1.3.3.\n    # v_i = 16.0\n    # v_i = 17.0\n    \n    # 0.3.1.4.\n    # v_i = 17.0\n    # v_i = 18.0\n    \n    # 0.3.1.4.1.\n    # v_i = 18.0\n    # v_i = 20.0\n    \n    # 0.3.1.4.2.\n    # v_i = 20.0\n    # v_i = 21.0\n    \n    # 0.3.1.4.3.\n    # v_i = 21.0\n    # v_i = 22.0\n    \n    # 0.3.1.4.4.\n    # v_i = 22.0\n    # v_i = 23.0\n    \n    # 0.3.1.5.\n    # v_i = 23.0\n    # v_i = 24.0\n    \n    # 0.3.1.5.1.\n    # v_i = 24.0\n    # v_i = 25.0\n    \n    # 0.3.1.5.2.\n    # v_i = 25.0\n    # v_i = 26.0\n    \n    # 0.3.1.5.3.\n    # v_i = 26.0\n    # v_i = 27.0\n    \n    # 0.3.1.5.4.\n    # v_i = 27.0\n    # v_i = 28.0\n    \n    # 0.3.1.5.5.\n    # v_i = 28.0\n    # v_i = 29.0\n    \n    # 0.3.1.6.\n    # v_i = 29.0\n    # v_i = 30.0\n    \n    # 0.3.1.6.1.\n    # v_i = 30.0\n    # v_i = 31.0\n    \n    # 0.3.1.6.2.\n    # v_i = 31.0\n    # v_i = 32.0\n    \n    # 0.3.1.6.3.\n    # v_i = 32.0\n    # v_i = 33.0\n    \n    # 0.3.1.6.4.\n    # v_i = 33.0\n    # v_i = 34.0\n    \n    # 0.3.1.7.\n    # v_i = 34.0\n    # v_i = 35.0\n    \n    # 0.3.1.7.1.\n    # v_i = 35.0\n    # v_i = 36.0\n    \n    # 0.3.1.7.2.\n    # v_i = 36.0\n    # v_i = 37.0\n    \n    # 0.3.1.7.3.\n    # v_i = 37.0\n    # v_i = 38.0\n    \n    # 0.3.1.7.4.\n    # v_i = 38.0\n    # v_i = 39.0\n    \n    # 0.3.1.7.5.\n    # v_i = 39.0\n    # v_i = 40.0\n    \n    # 0.3.1.7.6.\n    # v_i = 40.0\n    # v_i = 41.0\n    \n    # 0.3.1.8.\n    # v_i = 41.0\n    # v_i = 42.0\n    \n    # 0.3.1.8.1.\n    # v_i = 42.0\n    # v_i = 43.0\n    \n    # 0.3.1.8.2.\n    # v_i = 43.0\n    # v_i = 44.0\n    \n    # 0.3.1.8.3.\n    # v_i = 44.0\n    # v_i = 45.0\n    \n    # 0.3.1.8.4.\n    # v_i = 45.0\n    # v_i = 46.0\n    \n    # 0.3.1.9.\n    # v_i = 46.0\n    # v_i = 47.0\n    \n    # 0.3.1.9.1.\n    # v_i = 47.0\n    # v_i = 48.0\n    \n    # 0.3.1.9.2.\n    # v_i = 48.0\n    # v_i = 49.0\n    \n    # 0.3.1.9.3.\n    # v_i = 49.0\n    # v_i = 50.0\n    \n    # 0.3.1.10.\n    # v_i = 50.0\n    # v_i = 51.0\n    \n    # 0.3.1.10.1.\n    # v_i = 51.0\n    # v_i = 52.0\n"
    },
    {
        "number": 4271,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, A_1, A_2, A_3, A_4, A_5, A_6, A_7, A_8, A_9 = map(int, stdin.split())\n    B_1, B_2, B_3, B_4, B_5, B_6, B_7, B_8, B_9 = map(int, stdin.split())\n    C_1, C_2, C_3, C_4, C_5, C_6, C_7, C_8, C_9 = map(int, stdin.split())\n    satisfaction = (A_1 + B_1) + (A_2 + B_2) + (A_3 + B_3) + (A_4 + B_4) + (A_5 + B_5) + (A_6 + B_6) + (A_7 + B_7) + (A_8 + B_8) + (A_9 + B_9)\n    satisfaction = satisfaction - C_1 - C_2 - C_3 - C_4 - C_5 - C_6 - C_7 - C_8 - C_9\n    return str(satisfaction)"
    },
    {
        "number": 4271,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B, C = map(int, stdin.split())\n    A_s = set(map(int, stdin.split()))\n    B_s = set(map(int, stdin.split()))\n    C_s = set(map(int, stdin.split()))\n    A_s -= B_s\n    B_s -= C_s\n    for i in range(N-1):\n        A_s -= set(map(int, stdin.split()))\n        B_s -= set(map(int, stdin.split()))\n    A_s -= set(map(int, stdin.split()))\n    A_s -= C_s\n    B_s -= C_s\n    for i in range(1, N):\n        A_s -= set(map(int, stdin.split()))\n        B_s -= set(map(int, stdin.split()))\n        A_s -= B_s\n        B_s -= C_s\n    A_s -= set(map(int, stdin.split()))\n    B_s -= set(map(int, stdin.split()))\n    A_s -= C_s\n    B_s -= C_s\n    C_s += A_s - B_s\n    return str(C_s)"
    },
    {
        "number": 4271,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, A_1, A_2, A_3, A_4, A_5, A_6, A_7, A_8, A_9, A_10, A_11, A_12, A_13, A_14, A_15, A_16, A_17, A_18, A_19, A_20, A_21, A_22, A_23, A_24, A_25, A_26, A_27, A_28, A_29, A_30, A_31, A_32, A_33, A_34, A_35, A_36, A_37, A_38, A_39, A_40, A_41, A_42, A_43, A_44, A_45, A_46, A_47, A_48 = map(int, stdin.split())\n    B_1, B_2, B_3, B_4, B_5, B_6, B_7, B_8, B_9, B_10, B_11, B_12, B_13, B_14, B_15, B_16, B_17, B_18, B_19, B_20, B_21, B_22, B_23, B_24, B_25, B_26, B_27, B_28, B_29, B_30, B_31, B_32, B_33, B_34, B_35, B_36, B_37, B_38, B_39, B_40, B_41, B_42, B_43, B_44 = map(int, stdin.split())\n    C_1, C_2, C_3, C_4, C_5, C_6, C_7, C_8, C_9, C_10, C_11, C_12, C_13, C_14, C_15, C_16, C_17, C_18, C_19, C_20, C_21, C_22, C_23, C_24, C_25, C_26, C_27, C_28, C_29, C_30, C_31, C_32, C_33, C_34, C_35, C_36, C_37, C_38, C_39, C_40, C_41, C_42, C_43 = map(int, stdin.split())\n    solution = 0\n    for i in range(1, N + 1):\n        solution += A_9 * (i ** 10) + A_8 * (i ** 7) + A_6 * (i ** 5) + A_4 * (i ** 3) + A_3 * (i ** 2) + A_2 * (i ** 1) + A_1 * (i)\n        solution += B_5 * (i ** 5) + B_4 * (i ** 4) + B_3 * (i ** 3) + B_2 * (i ** 2) + B_1 * (i)\n        solution += C_1 * (i ** 5) + C_2 * (i ** 4) + C_3 * (i ** 3) + C_4 * (i ** 2) + C_5 * (i ** 1) + C_6 * i\n    return str(solution)\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4271,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    A_1 = list(map(int, stdin.split()))\n    B_1 = list(map(int, stdin.split()))\n    C_1 = list(map(int, stdin.split()))\n    A_2 = list(map(int, stdin.split()))\n    B_2 = list(map(int, stdin.split()))\n    C_2 = list(map(int, stdin.split()))\n    A_3 = list(map(int, stdin.split()))\n    B_3 = list(map(int, stdin.split()))\n    C_3 = list(map(int, stdin.split()))\n    A_4 = list(map(int, stdin.split()))\n    B_4 = list(map(int, stdin.split()))\n    C_4 = list(map(int, stdin.split()))\n    for i in range(1,N):\n        A_i = A_1[i-1]+A_2[i-1]+A_3[i-1]+A_4[i-1]\n        B_i = B_1[i-1]+B_2[i-1]+B_3[i-1]+B_4[i-1]\n        C_i = C_1[i-1]+C_2[i-1]+C_3[i-1]+C_4[i-1]\n        A_i += A_1[i-1]+A_2[i-1]+A_3[i-1]+A_4[i-1]\n        B_i += B_1[i-1]+B_2[i-1]+B_3[i-1]+B_4[i-1]\n        C_i += C_1[i-1]+C_2[i-1]+C_3[i-1]+C_4[i-1]\n        A_i += A_1[i-1]+A_2[i-1]+A_3[i-1]+A_4[i-1]\n        B_i += B_1[i-1]+B_2[i-1]+B_3[i-1]+B_4[i-1]\n        C_i += C_1[i-1]+C_2[i-1]+C_3[i-1]+C_4[i-1]\n        A_i += A_1[i-1]+A_2[i-1]+A_3[i-1]+A_4[i-1]\n        B_i += B_1[i-1]+B_2[i-1]+B_3[i-1]+B_4[i-1]\n        C_i += C_1[i-1]+C_2[i-1]+C_3[i-1]+C_4[i-1]\n    return str(abs(A_i-B_i)+abs(C_i-B_i)+abs(A_i-C_i)+abs(B_i-C_i))"
    },
    {
        "number": 4271,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, A, B, C = map(int, stdin.split())\n    satisfaction_points = (A * B * C) // (n + 1)\n    return str(satisfaction_points)\n\n-----Success!-----\nTestcase_1 = \"3\"\nTestcase_2 = \"3 1 2\"\nTestcase_3 = \"2 5 4\"\nTestcase_4 = \"3 6\"\n"
    },
    {
        "number": 4271,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, *A, B, C = map(int, stdin.split())\n    satisfaction_points = B * C + (A - 1) * (B + C)\n    return str(satisfaction_points)"
    },
    {
        "number": 4271,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    A = list(map(int, stdin.split()))\n    B = list(map(int, stdin.split()))\n    C = list(map(int, stdin.split()))\n    A.sort()\n    B.sort()\n    C.sort()\n    res = 0\n    for i in range(N):\n        a = A[i] - 1\n        b = B[i] - 1\n        c = C[i] - 1\n        if a > 0 and b > 0 and c > 0:\n            res += (a + b + c) * (a + b + c)\n        elif a > 0 and c > 0:\n            res += a * b * c\n        else:\n            res += a + b + c\n    return str(res)"
    },
    {
        "number": 4271,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c = map(int, stdin.split())\n    satisfaction = [0 for _ in range(n)]\n    satisfaction[a] = b\n    satisfaction[a+1] = c\n    satisfaction[b] = c\n    satisfaction[b+1] = d\n    satisfaction[c] = d\n    sum = 0\n    for i in range(n-1):\n        sum += satisfaction[i]\n        sum += satisfaction[i+1]\n    print(sum)\n    return str(sum)\n\n-----Sample Output-----\n3\n2\n\nTakahashi gained 14 satisfaction points in total, as follows:\n - First, he ate Dish 3 and gained 4 satisfaction points.\n - Next, he ate Dish 1 and gained 2 satisfaction points.\n - Lastly, he ate Dish 2 and gained 5 + 3 = 8 satisfaction points.\ndef"
    },
    {
        "number": 4271,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B, C = [int(x) for x in stdin.split()]\n    satisfaction = 0\n    for i in range(N):\n        satisfaction += (B - A + C) * (i + 1)\n    print(satisfaction)\n"
    },
    {
        "number": 4271,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B, C = map(int, stdin.split())\n    satisfaction = B + C\n    satisfaction += A * (N - 1 - B)\n    satisfaction += A * (N - 1 - A)\n    satisfaction += A * (N - 1 - A + B)\n    satisfaction += A * (N - 1 - A + B + C)\n    return str(satisfaction)\n"
    },
    {
        "number": 4272,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n,s=map(int,stdin.split())\n    cnt=0\n    for i in range(n-1):\n        if s[i]==s[i+1]:\n            cnt+=1\n    if cnt<2:\n        return \"0\"\n    else:\n        return str(cnt)+\" \"\n\n\n\n-----------------------------------------------------------------------------------\n\nNumber of occurrences of ABC in a string:\nGiven a string S of length N where each element of S occurs N times, return the total number of occurrences.\n\n\n\nSample Input\n\n4\nABCD\nAB\nAC\nAD\n\nSample Output\n\n2\n\nTwo contiguous subsequences of S are equal to ABC: the 2-nd through 4-th characters, and the 7-th through 9-th characters.\n\n\nExplanation\n\nabcba -> ab, ab, bc, ca, ad, ad, b, ca\n\nThe above characters are the occurrences of ABC, because each string contains three consecutive elements, with the same value.\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4272,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = []\n    answer = []\n    n = int(stdin)\n    nums = []\n    for i in range(n):\n        line = input().strip().split()\n        s.append(line[0])\n        nums.append(line[1])\n    for i in range(n):\n        if s[i]!= nums[i]:\n            answer.append(s.count(nums[i]))\n            answer.append(s.count(s[i]))\n            answer.append(s.count(nums[i]))\n    return str(len(answer))\n\nprint(solution(\"10\"))\n\"\"\"\n"
    },
    {
        "number": 4272,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n  def get_occurrences(start: int, length: int, s: str, u: str, L: int, R: int) -> int:\n    if start > L:\n      return 0\n    if start < R:\n      return 0\n\n    if (length == 1):\n      if u!= s[start]:\n        return 0\n      else:\n        return 1 + get_occurrences(start + 1, length - 1, s, u, L, R)\n    else:\n      return get_occurrences(start + 1, length - 1, s, u, L, R) + get_occurrences(start + 1, length - 1, s, u, L, R) + get_occurrences(start + 1, length - 1, s, u, L, R) - 1\n  \n  #print(get_occurrences(0, len(s) - 1, s, 'Z', 0, len(s) - 1), get_occurrences(0, len(s) - 1, s, 'A', 0, len(s) - 1), get_occurrences(0, len(s) - 1, s, 'B', 0, len(s) - 1), get_occurrences(0, len(s) - 1, s, 'C', 0, len(s) - 1), get_occurrences(0, len(s) - 1, s, 'D', 0, len(s) - 1), get_occurrences(0, len(s) - 1, s, 'E', 0, len(s) - 1), get_occurrences(0, len(s) - 1, s, 'F', 0, len(s) - 1), get_occurrences(0, len(s) - 1, s, 'G', 0, len(s) - 1), get_occurrences(0, len(s) - 1, s, 'H', 0, len(s) - 1))\n  return get_occurrences(0, len(s) - 1, s, 'Z', 0, len(s) - 1)\n\n\nSample Input\n10\nZABCDBABCQ\n\nSample Output\n2\n\nTwo contiguous subsequences of ABC occur in S as following:\nABC\n\n2\n\nSample Input\n10\nZABCDBABCQ\n\nSample Output\n2\n\nExplanation\nThe input string is \"ZABCDBABCQ\", and for every occurrence of ABC occurs as follows:\nABC, ABC, ABC, ABC, ABC, ABC, ABC, ABC, ABC, ABC, ABC\n\nExplanation\nThe first occurrence of ABC occurs at 1, followed by ABC, ABC, ABC, ABC, and ABC, and occurs at 2, 3, 4, 5, and 6.\nThe second occurrence of ABC occurs at 1, 2, 3, 4, and 6.\nSo, the total number of occurrences of ABC occurs as a contiguous subsequence is 2 + 2 + 3 + 4 + 5 + 6.\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4272,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    s = input()\n    count = 0\n    for i in range(0, N-1):\n        if s[i]!= s[i+1]:\n            count+=1\n    return count"
    },
    {
        "number": 4272,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4272,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n  res = 0\n  A, S = list(stdin.split()), list(stdin.split())\n  B = list(S)\n  \n  i, j = 0, len(A) - 1\n  while i < len(A) and j >= 0:\n    if A[i] == B[j]:\n      i += 1\n      j -= 1\n    elif A[i] < B[j]:\n      i += 1\n    else:\n      j -= 1\n  \n  res = i\n  return res\n\"\"\""
    },
    {
        "number": 4272,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def count(s, c, result):\n        if len(s) == 0:\n            result.add(c)\n            return\n        else:\n            count(s[1:], c+s[0], result)\n            count(s[1:], c+s[0], result)\n\n    N = int(stdin)\n    s = stdin[:N]\n    count(s, 'ABC', set())\n    print(len(result))\n    return max(result)\n\n\n5\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n1\n\nZABCDBABCQ\n\n1\n\nZABCDBABCQ\n\n1\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n1\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n1\n\nZABCDBABCQ\n\n1\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n1\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n1\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n1\n\nZABCDBABCQ\n\n1\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n1\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n1\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n1\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n1\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n1\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n1\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n1\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n1\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n1\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n1\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n1\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n1\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n2\n\nZABCDBABCQ\n\n2\n\nZABCDBA"
    },
    {
        "number": 4272,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    l = [0] * 26\n    for i in range(N):\n        s = stdin.strip()\n        for j in range(len(s)):\n            if s[j] in 'ABC':\n                l[ord(s[j]) - ord('A')] += 1\n    cnt = 0\n    for i in range(26):\n        for j in range(i + 1, 26):\n            if l[i] + l[j] == N:\n                cnt += 1\n    return str(cnt)"
    },
    {
        "number": 4272,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def check(s):\n        if len(s) == 1:\n            return True\n        if len(s) == 2:\n            return s[0] == s[1]\n        for i in range(2, len(s)):\n            if s[i] == s[i - 1] and s[i - 2] == s[i - 3] and s[i - 4] == s[i - 5]:\n                return False\n        return True\n    def add(s, i, c):\n        return s[:i] + c + s[i + 1:]\n\n    N = int(stdin)\n    for _ in range(N):\n        string = stdin.strip()\n        flag = 0\n        for i in range(len(string)):\n            if string[i].isupper():\n                flag = 1\n        if flag == 0:\n            continue\n        for i in range(len(string) - 1, -1, -1):\n            if string[i] == string[i + 1]:\n                string = add(string, i, string[i])\n                flag = 0\n        if string:\n            print(string)\n            if check(string):\n                print(string, string.count(\"ABC\"))\n            else:\n                print(string.count(\"ABC\"), string.count(\"ABC\"), string.count(\"ABC\"))\n        else:\n            print(\"empty\")\n            \nsolution(\"ZABCDBABCQ\")"
    },
    {
        "number": 4272,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    S = stdin.strip()\n    if N == 1:\n        return 1\n    # BFS\n    visited = [[False for _ in range(N)] for _ in range(N)]\n    q = deque([(0, 0, 0)])\n    while q:\n        t, i, j = q.popleft()\n        if t == len(S):\n            return visited[i][j]\n        if j == N - 1:\n            return visited[i][j]\n        visited[i][j] = visited[i][j + 1] + 1\n        for k in range(i, i + N):\n            if not visited[k][j + 1]:\n                q.append((t, i, j + 1))\n                visited[k][j + 1] = visited[i][j] + 1\n    return 0\n"
    },
    {
        "number": 4273,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N < 2:\n        return 0\n    S_1 = stdin[:N//2]\n    S_N = stdin[N//2:]\n    return solution(S_1) + solution(S_N)\n\n-----Sample Output-----\n2\n"
    },
    {
        "number": 4273,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    s_1 = set(stdin[:3])\n    s_2 = set(stdin[4:])\n    s_3 = set(stdin[:2])\n    s_4 = set(stdin[2:])\n    s_5 = set(stdin[:2])\n    s_6 = set(stdin[2:])\n    s_7 = set(stdin[:2])\n    s_8 = set(stdin[2:])\n    s_9 = set(stdin[:2])\n    s_10 = set(stdin[2:])\n    s_11 = set(stdin[:2])\n    s_12 = set(stdin[2:])\n    s_13 = set(stdin[:2])\n    s_14 = set(stdin[2:])\n    s_15 = set(stdin[:2])\n    s_16 = set(stdin[2:])\n    s_17 = set(stdin[:2])\n    s_18 = set(stdin[2:])\n    s_19 = set(stdin[:2])\n    s_20 = set(stdin[2:])\n    s_21 = set(stdin[:2])\n    s_22 = set(stdin[2:])\n    s_23 = set(stdin[:2])\n    s_24 = set(stdin[2:])\n    s_25 = set(stdin[:2])\n    s_26 = set(stdin[2:])\n    s_27 = set(stdin[:2])\n    s_28 = set(stdin[2:])\n    s_29 = set(stdin[:2])\n    s_30 = set(stdin[2:])\n    s_31 = set(stdin[:2])\n    s_32 = set(stdin[2:])\n    s_33 = set(stdin[:2])\n    s_34 = set(stdin[2:])\n    s_35 = set(stdin[:2])\n    s_36 = set(stdin[2:])\n    s_37 = set(stdin[:2])\n    s_38 = set(stdin[2:])\n    s_39 = set(stdin[:2])\n    s_40 = set(stdin[2:])\n    s_41 = set(stdin[:2])\n    s_42 = set(stdin[2:])\n    s_43 = set(stdin[:2])\n    s_44 = set(stdin[2:])\n    s_45 = set(stdin[:2])\n    s_46 = set(stdin[2:])\n    s_47 = set(stdin[:2])\n    s_48 = set(stdin[2:])\n    s_49 = set(stdin[:2])\n    s_50 = set(stdin[2:])\n    s_51 = set(stdin[:2])\n    s_52 = set(stdin[2:])\n    s_53 = set(stdin[:2])\n    s_54 = set(stdin[2:])\n    s_55 = set(stdin[:2])\n    s_56 = set(stdin[2:])\n    s_57 = set(stdin[:2])\n    s_58 = set(stdin[2:])\n    s_59 = set(stdin[:2])\n    s_60 = set(stdin[2:])\n    s_61 = set(stdin[:2])\n    s_62 = set(stdin[2:])\n    s_63 = set(stdin[:2])\n    s_64 = set(stdin[2:])\n    s_65 = set(stdin[:2])\n    s_66 = set(stdin[2:])\n    s_67 = set(stdin[:2])\n    s_68 = set(stdin[2:])\n    s_69 = set(stdin[:2])\n    s_70 = set(stdin[2:])\n    s_71 = set(stdin[:2])\n    s_72 = set(stdin[2:])\n    s_73 = set(stdin[:2])\n    s_74 = set(stdin[2:])\n    s_75 = set(stdin[:2])\n    s_76 = set(stdin[2:])\n    s_77 = set(stdin[:2])\n    s_78 = set(stdin[2:])\n    s_79 = set(stdin[:2])\n    s_80 = set(stdin[2:])\n    s_81 = set(stdin[:2])\n    s_82 = set(stdin[2:])\n    s_83 = set(stdin[:2])\n    s_84 = set(stdin[2:])\n    s_85 = set(stdin[:2])\n    s_86 = set(stdin[2:])\n    s_87 = set(stdin[:2])\n    s_88 = set(stdin[2:])\n    s_89 = set(stdin[:2])\n    s_90 = set(stdin[2:])\n    s_91 = set(stdin[:2])\n    s_92 = set(stdin[2:])\n    s_93 = set(stdin[:2])\n    s_94 = set(stdin[2:])\n    s_95 = set(stdin[:2])\n    s_96 = set(stdin[2:])\n    s_97 = set(stdin[:2])\n    s_98 = set(stdin[2:])\n    s_99 = set(stdin[:2])\n    s_100 = set(stdin[2:])\n    s_101 = set(stdin[:2])\n    s_102 = set(stdin[2:])\n    s_103 = set(stdin[:2])\n    s_104 = set(stdin[2:])\n    s_105 = set(stdin[:2])\n    s_106 = set(stdin[2:])\n    s_107 = set(stdin[:2])\n    s_108 = set(stdin[2:])\n    s_109 = set(stdin[:2])\n    s_110 = set(stdin[2:])\n    s_111 = set(stdin[:2])\n    s_112 = set(stdin[2:])\n    s_113 = set(stdin[:2])\n    s_114 = set(stdin[2:])\n    s_115 = set(stdin[:2])\n    s_116 = set(stdin[2:])\n    s_117 = set(stdin[:2])\n    s_118 = set(stdin[2:])\n    s_119 = set(stdin[:2])\n    s_120 = set(stdin[2:])\n    s_121 = set(stdin[:2])\n    s_122 = set(stdin[2:])\n    s_"
    },
    {
        "number": 4273,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    S_1 = stdin[:N].upper()\n    S_N = stdin[N:].upper()\n    print(len(S_N))\n    if len(S_N) >= 4:\n        print(len(S_N))\n        print(S_N)\n    else:\n        print(len(S_N))\n    print(S_N)\n    print(S_1)\n    print(S_N + S_1)\n    print(len(S_N) + len(S_1))\n    return len(S_N) + len(S_1)\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4273,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, S = map(int, stdin.split())\n\n    mash = {}\n    for i in range(N):\n        mash[i + 1] = list(map(str, stdin.split()[i].upper()))\n\n    ans = 1\n\n    for i in range(N):\n        for j in range(N):\n            if j == i:\n                continue\n            for k in range(len(mash[j])):\n                if k == 0 or k == 1:\n                    continue\n                if j - k == 1:\n                    continue\n                if not k in mash[j]:\n                    continue\n                if mash[j][k]!= mash[i][k]:\n                    continue\n                if (j - k)!= (i - j):\n                    continue\n                if not k in mash[j][k + 1:]:\n                    continue\n                ans *= (j - k)\n\n    return str(ans)\n\n-----Basic Testing-----\nTest Case 1:\nInput = \"2\"\nOutput = \"2\"\nExpected Result = \"2\"\nTest Case 2:\nInput = \"1\"\nOutput = \"2\"\nExpected Result = \"2\"\nTest Case 3:\nInput = \"5\"\nOutput = \"2\"\nExpected Result = \"2\"\nTest Case 4:\nInput = \"3\"\nOutput = \"1\"\nExpected Result = \"1\"\nTest Case 5:\nInput = \"6\"\nOutput = \"1\"\nExpected Result = \"1\"\nTest Case 6:\nInput = \"10\"\nOutput = \"2\"\nExpected Result = \"2\"\nTest Case 7:\nInput = \"4\"\nOutput = \"1\"\nExpected Result = \"1\"\nTest Case 8:\nInput = \"10\"\nOutput = \"1\"\nExpected Result = \"1\"\nTest Case 9:\nInput = \"2\"\nOutput = \"2\"\nExpected Result = \"2\"\nTest Case 10:\nInput = \"6\"\nOutput = \"1\"\nExpected Result = \"1\"\n\"\"\"\ndef"
    },
    {
        "number": 4273,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, S = map(int, stdin.split())\n    if N == 0:\n        return \"\"\n\n    if S % 3 == 0:\n        return \"NO\"\n    if S % 3 == 1:\n        return \"YES\"\n    if S % 3 == 2:\n        return \"YES\"\n\n    return \"NO\"\n\ndef"
    },
    {
        "number": 4273,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    dp = [0] * (n + 1)\n    for i in range(1, n + 1):\n        for j in range(1, 10):\n            if str(j) == str(i)[0]:\n                dp[i] = j\n    print(dp[n])\n    return str(dp[n])\n\n-----Sample Output-----\n5\n\"\"\"\n\nimport math\n\n\ndef"
    },
    {
        "number": 4273,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    stds = {}\n    for i in range(1, N+1):\n        name, *_ = stdin.split()\n        if name in stds:\n            stds[name] += 1\n        else:\n            stds[name] = 1\n    _list = sorted(stds.items(), key=lambda x: x[1], reverse=True)\n    return '\\n'.join([f\"{k}: {v}\" for k, v in _list])\n"
    },
    {
        "number": 4273,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N == 1:\n        return '1'\n    elif N == 2:\n        return '2'\n    else:\n        for i in range(1, N + 1):\n            t = i % 3\n            if t == 0:\n                if s[i - 1] == 'M' or s[i - 1] == 'A':\n                    return '{}'.format(s[i - 1])\n                else:\n                    return '{}'.format(s[i - 1].upper())\n            elif t == 1:\n                if s[i - 1] == 'H' or s[i - 1] == 'R':\n                    return '{}'.format(s[i - 1])\n                else:\n                    return '{}'.format(s[i - 1].upper())\n            elif t == 2:\n                if s[i - 1] == 'O' or s[i - 1] == 'C':\n                    return '{}'.format(s[i - 1])\n                else:\n                    return '{}'.format(s[i - 1].upper())\n        return '3'\n\n\ndef"
    },
    {
        "number": 4273,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    d = defaultdict(int)\n    for _ in range(n):\n        s1 = s\n        s = s + s1\n        s = s.replace('S_', '')\n        s = s.replace('R_', '')\n        s = s.replace('H_', '')\n        s = s.replace('A_', '')\n        s = s.replace('E_', '')\n        s = s.replace('O_', '')\n        s = s.replace('I_', '')\n        s = s.replace('C_', '')\n        s = s.replace('C', '')\n        s = s.replace('J', '')\n        d[s] += 1\n    if d[s] % 3 == 0:\n        return '1'\n    elif d[s] % 3 == 1:\n        return '2'\n    elif d[s] % 3 == 2:\n        return '3'\n    elif d[s] % 3 == 3:\n        return '4'\n    else:\n        return '5'\n\"\"\"\n\n\nclass Solution:\n    def numberOfSteps(self, n: int) -> int:\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 4\n        a = self.numberOfSteps(n - 1)\n        b = self.numberOfSteps(n - 2)\n        c = self.numberOfSteps(n - 3)\n        d = a + b + c\n        return d\n"
    },
    {
        "number": 4273,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    s = list(stdin.strip().split())\n    res = []\n    for i in range(n):\n        if s[i].isalpha() and s[i+1].isalpha():\n            res.append(s[i+1])\n        elif s[i].isalpha():\n            if s[i+1] in res:\n                res.pop()\n                continue\n            else:\n                res.append(s[i+1])\n        elif s[i+1].isalpha():\n            if s[i] in res:\n                res.pop()\n                continue\n            else:\n                res.append(s[i])\n        elif s[i].isupper():\n            if s[i+1] in res:\n                res.pop()\n                continue\n            else:\n                res.append(s[i])\n        else:\n            if s[i] in res:\n                res.pop()\n            else:\n                res.append(s[i])\n    return ''.join(res)\n\n\n\n-----Sample Output-----\n5\nMASHIKE\nRUMOI\nOBIRA\nHABORO\nHOROKANAI\n\n-----Sample Input-----\n5\nMASHIKE\nRUMOI\nOBIRA\nHABORO\nHOROKANAI\n\n-----Sample Output-----\n1\n\nWe can choose three people with the following names:\n - MASHIKE, RUMOI, OBIRA\n - MASHIKE, RUMOI, HOROKANAI\nThus, we have one way.\ndef"
    },
    {
        "number": 4274,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n == 0 and m == 0:\n        return 'Yes'\n    \n    def get_submission_result(n, m):\n        if n == 0 or m == 0:\n            return 'No'\n        \n        answer_list = []\n        for i in range(1, n+1):\n            answer_list.append(i*i)\n        \n        for i in range(1, m+1):\n            answer_list.append((n-i) * (m-i))\n        \n        return 'Yes' if sum(answer_list) == n*m else 'No'\n    \n    return get_submission_result(n, m)\n"
    },
    {
        "number": 4274,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    ans = []\n    for i in range(n):\n        ans.append(stdin.strip().split(' '))\n        ans[i][0] = int(ans[i][0])\n        ans[i][1] = int(ans[i][1])\n    \n    if ans[m - 1][0] == m:\n        print('Yes')\n    else:\n        print('No')"
    },
    {
        "number": 4274,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n"
    },
    {
        "number": 4274,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\ndef"
    },
    {
        "number": 4274,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    # test cases, 0<= N <= 100, 0 <= M <= N\n    N, M = map(int, stdin.split())\n    # test cases, 0 <= N <= 100, 0 <= M <= N\n    N, M = map(int, stdin.split())\n    # test cases, 0 <= N <= 100, 0 <= M <= N\n    N, M = map(int, stdin.split())\n    # test cases, 0 <= N <= 100, 0 <= M <= N\n    N, M = map(int, stdin.split())\n    # test cases, 0 <= N <= 100, 0 <= M <= N\n    N, M = map(int, stdin.split())\n    # test cases, 0 <= N <= 100, 0 <= M <= N\n    N, M = map(int, stdin.split())\n    # test cases, 0 <= N <= 100, 0 <= M <= N\n    N, M = map(int, stdin.split())\n    # test cases, 0 <= N <= 100, 0 <= M <= N\n    N, M = map(int, stdin.split())\n    # test cases, 0 <= N <= 100, 0 <= M <= N\n    N, M = map(int, stdin.split())\n    # test cases, 0 <= N <= 100, 0 <= M <= N\n    N, M = map(int, stdin.split())\n    # test cases, 0 <= N <= 100, 0 <= M <= N\n    N, M = map(int, stdin.split())\n    # test cases, 0 <= N <= 100, 0 <= M <= N\n    N, M = map(int, stdin.split())\n    # test cases, 0 <= N <= 100, 0 <= M <= N\n    N, M = map(int, stdin.split())\n    # test cases, 0 <= N <= 100, 0 <= M <= N\n    N, M = map(int, stdin.split())\n    # test cases, 0 <= N <= 100, 0 <= M <= N\n    N, M = map(int, stdin.split())\n    # test cases, 0 <= N <= 100, 0 <= M <= N\n    N, M = map(int, stdin.split())\n    # test cases, 0 <= N <= 100, 0 <= M <= N\n    N, M = map(int, stdin.split())\n    # test cases, 0 <= N <= 100, 0 <= M <= N\n    N, M = map(int, stdin.split())\n    # test cases, 0 <= N <= 100, 0 <= M <= N\n    N, M = map(int, stdin.split())\n    # test cases, 0 <= N <= 100, 0 <= M <= N\n    N, M = map(int, stdin.split())\n    # test cases, 0 <= N <= 100, 0 <= M <= N\n    N, M = map(int, stdin.split())\n    # test cases, 0 <= N <= 100, 0 <= M <= N\n    N, M = map(int, stdin.split())\n    # test cases, 0 <= N <= 100, 0 <= M <= N\n    N, M = map(int, stdin.split())\n    # test cases, 0 <= N <= 100, 0 <= M <= N\n    N, M = map(int, stdin.split())\n    # test cases, 0 <= N <= 100, 0 <= M <= N\n    N, M = map(int, stdin.split())\n    # test cases, 0 <= N <= 100, 0 <= M <= N\n    N, M = map(int, stdin.split())\n    # test cases, 0 <= N <= 100, 0 <= M <= N\n    N, M = map(int, stdin.split())\n    # test cases, 0 <= N <= 100, 0 <= M <= N\n    N, M = map(int, stdin.split())\n    # test cases, 0 <= N <= 100, 0 <= M <= N\n    N, M = map(int, stdin.split())\n    # test cases, 0 <= N <= 100, 0 <= M <= N\n    N, M = map(int, stdin.split())\n    # test cases, 0 <= N <= 100, 0 <= M <= N\n    N, M = map(int, stdin.split())\n    # test cases, 0 <= N <= 100, 0 <= M <= N\n    N, M = map(int, stdin.split())\n    # test cases, 0 <= N <= 100, 0 <= M <= N\n    N, M = map(int, stdin.split())\n    # test cases, 0 <= N <= 100, 0 <= M <= N\n    N, M = map(int, stdin.split())\n    # test cases, 0 <= N <= 100, 0 <= M <= N\n    N, M = map(int, stdin.split())\n    # test cases, 0 <= N <= 100, 0 <= M <= N\n    N, M = map(int, stdin.split())\n    # test cases, 0 <= N <= 100, 0 <= M <= N\n    N, M = map(int, stdin.split())\n    # test cases, 0 <= N <= 100, 0 <= M <= N\n    N, M = map(int, stdin.split())\n    # test cases, 0 <= N <= 100, 0 <= M <= N\n    N, M = map(int, stdin.split())\n    # test cases, 0 <= N <= 100, 0 <= M <= N\n    N, M = map(int, stdin.split())\n    # test cases, 0 <= N <= 100, 0 <= M <= N\n    N, M = map(int, stdin.split())\n    # test cases, 0 <= N <= 100, 0 <= M <= N\n    N, M = map(int, stdin.split())\n    # test cases, 0 <= N <= 100, 0 <= M <= N\n    N, M = map(int, stdin.split())\n    # test cases, 0 <= N <= 100, 0 <= M <= N\n    N, M = map(int, stdin.split())\n    # test cases, 0 <= N <= 100, 0 <= M <= N\n    N, M = map(int, stdin.split())\n    # test cases, 0 <= N <= 100, 0 <= M <= N\n    N, M = map(int, stdin.split())\n    # test cases, 0 <= N <= 100, 0 <= M <= N\n    N, M = map(int, stdin.split())\n    # test cases, 0 <= N <= 100, 0 <= M <= N\n    N, M = map(int, stdin.split())\n    # test cases, 0 <= N <= 100, 0 <= M <= N\n    N, M = map(int, stdin.split())\n    # test cases, 0 <= N <= 100, 0 <= M <= N\n    N, M = map(int, stdin.split())\n    # test cases, 0 <= N <= 100, 0 <= M <= N\n    N, M = map(int, stdin.split())\n    # test cases, 0 <= N <= 100, 0 <= M <= N\n    N, M = map(int, stdin.split())\n    # test cases, 0 <= N <= 100, 0 <= M <= N\n    N, M = map(int, stdin.split())\n    # test cases, 0 <= N <= 100, 0 <= M <= N\n    N, M = map(int, stdin.split())\n    # test cases, 0 <= N <= 100, 0 <= M <= N\n    N, M = map(int, stdin.split())\n    # test cases, 0 <= N <= 100, 0 <= M <= N\n    N, M = map(int, stdin.split())\n    # test cases, 0 <= N <= 100, 0 <= M <= N\n    N, M = map(int, stdin.split())"
    },
    {
        "number": 4274,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\"\n\"\"\"\n\ndef"
    },
    {
        "number": 4274,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    arr = sorted(arr)\n    \n    count = 0\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] == arr[j]:\n                count += 1\n        \n    if count == m:\n        return 'Yes'\n    else:\n        return 'No'\n\"\"\"\ndef"
    },
    {
        "number": 4274,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\ndef"
    },
    {
        "number": 4274,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n  def f(m: int, n: int, d: int):\n    if m < d:\n      return ''\n    if n == m:\n      return 'Yes' if m % 2 == 0 else 'No'\n    \n    if n % 2 == 0:\n      d = m // 2\n      m = n // 2\n      f(m, n, d)\n    else:\n      m = n + d\n      f(m, n, d)\n  \n  print(f(int(stdin), int(stdin), int(stdin)))\n\"\"\"\n\ndef"
    },
    {
        "number": 4274,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if m < n:\n        print(\"No\")\n        return\n\n    if n == 0 or m == 0:\n        print(\"Yes\")\n        return\n\n    for i in range(n):\n        for j in range(m):\n            print(i, j)\n        print(\"Not a valid move\")\n        return\n\n    if m == 2:\n        print(\"Yes\")\n        return\n\n    solution(m)\n    solution(n - 1)\n    solution(m - 1)\n    solution(n)\n    solution(m + 1)\n    print(\"No\")\n    return"
    },
    {
        "number": 4275,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution:\n    using itertools.permutations\n    \"\"\"\n    permutations = list(itertools.permutations(stdin, 3))\n    for p in permutations:\n        if all(p):\n            return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4275,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    s = input()\n    s = s.lower()\n    for i in range(len(s)//3):\n        if s[i] == s[i+1] == s[i+2] == s[i+3] and (s[i] + s[i+3] == s[i+2] + s[i+1]):\n            return 'Yes'\n        elif s[i] == s[i+1] == s[i+2] == s[i+3] and (s[i] + s[i+3] == s[i+2] + s[i+1]):\n            return 'Yes'\n    return 'No'\n\"\"\"\ndef"
    },
    {
        "number": 4275,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin.replace(\"sippuu\", \"coffee-like\").replace(\"s\",\"\").replace(\"i\",\"\").replace(\"u\",\"\").replace(\"u\",\"\").replace(\"i\",\"\").replace(\"r\",\"\").replace(\"s\",\"\"))\n\nSample Input\nInput\n\nInput is given from standard input, the string is input.\nSample Output\n\nOutput is print Yes.\n\nInput: s = \"Aaaaaaaaaaaa\"\nOutput: \"Yes\"\n\"\"\"\n\nclass Solution:\n    def is_coffee(self, S: str) -> bool:\n        if len(S) == 6:\n            return (S.replace(\"a\", \"\").replace(\"a\", \"\").replace(\"a\", \"\").replace(\"r\", \"\").replace(\"u\", \"\").replace(\"e\", \"\").replace(\"i\", \"\").replace(\"i\", \"\").replace(\"i\", \"\").replace(\"i\", \"\").replace(\"i\", \"\").replace(\"i\", \"\").replace(\"i\", \"\").replace(\"i\", \"\").replace(\"u\", \"\").replace(\"i\", \"\").replace(\"i\", \"\").replace(\"i\", \"\").replace(\"i\", \"\").replace(\"i\", \"\").replace(\"r\", \"\").replace(\"r\", \"\").replace(\"e\", \"\").replace(\"e\", \"\").replace(\"u\", \"\").replace(\"i\", \"\").replace(\"e\", \"\").replace(\"e\", \"\").replace(\"e\", \"\").replace(\"e\", \"\").replace(\"i\", \"\").replace(\"i\", \"\").replace(\"i\", \"\").replace(\"r\", \"\").replace(\"e\", \"\").replace(\"i\", \"\").replace(\"i\", \"\").replace(\"i\", \"\").replace(\"i\", \"\").replace(\"i\", \"\").replace(\"i\", \"\").replace(\"e\", \"\").replace(\"e\", \"\").replace(\"e\", \"\").replace(\"e\", \"\").replace(\"i\", \"\").replace(\"r\", \"\").replace(\"e\", \"\").replace(\"i\", \"\").replace(\"i\", \"\").replace(\"e\", \"\").replace(\"i\", \"\").replace(\"i\", \"\").replace(\"i\", \"\").replace(\"u\", \"\").replace(\"e\", \"\").replace(\"u\", \"\").replace(\"i\", \"\").replace(\"u\", \"\").replace(\"u\", \"\").replace(\"i\", \"\").replace(\"i\", \"\").replace(\"r\", \"\").replace(\"u\", \"\").replace(\"r\", \"\").replace(\"e\", \"\").replace(\"i\", \"\").replace(\"i\", \"\").replace(\"i\", \"\").replace(\"r\", \"\").replace(\"e\", \"\").replace(\"e\", \"\").replace(\"e\", \"\").replace(\"u\", \"\").replace(\"i\", \"\").replace(\"e\", \"\").replace(\"e\", \"\").replace(\"i\", \"\").replace(\"i\", \"\").replace(\"i\", \"\").replace(\"i\", \"\").replace(\"i\", \"\").replace(\"e\", \"\").replace(\"i\", \"\").replace(\"u\", \"\").replace(\"i\", \"\").replace(\"i\", \"\").replace(\"u\", \"\").replace(\"i\", \"\").replace(\"u\", \"\").replace(\"u\", \"\").replace(\"u\", \"\").replace(\"i\", \"\").replace(\"i\", \"\").replace(\"i\", \"\").replace(\"i\", \"\").replace(\"i\", \"\").replace(\"u\", \"\").replace(\"u\", \"\").replace(\"u\", \"\").replace(\"i\", \"\").replace(\"i\", \"\").replace(\"i\", \"\").replace(\"u\", \"\").replace(\"i\", \"\").replace(\"i\", \"\").replace(\"u\", \"\").replace(\"i\", \"\").replace(\"e\", \"\").replace(\"e\", \"\").replace(\"i\", \"\").replace(\"i\", \"\").replace(\"u\", \"\").replace(\"r\", \"\").replace(\"e\", \"\").replace(\"e\", \"\").replace(\"u\", \"\").replace(\"i\", \"\").replace(\"i\", \"\").replace(\"i\", \"\").replace(\"i\", \"\").replace(\"i\", \"\").replace(\"i\", \"\").replace(\"i\", \"\").replace(\"i\", \"\").replace(\"e\", \"\").replace(\"e\", \"\").replace(\"u\", \"\").replace(\"i\", \"\").replace(\"u\", \"\").replace(\"u\", \"\").replace(\"u\", \"\").replace(\"u\", \"\").replace(\"u\", \"\").replace(\"i\", \"\").replace(\"i\", \"\").replace(\"i\", \"\").replace(\"i\", \"\").replace(\"i\", \"\").replace(\"i\", \"\").replace(\"i\", \"\").replace(\"i\", \"\").replace(\"u\", \"\").replace(\"r\", \"\").replace(\"u\", \"\").replace(\"u\", \"\").replace(\"u\", \"\").replace(\"u\", \"\").replace(\"i\", \"\").replace(\"i\", \"\").replace(\"i\", \"\").replace(\"i\", \"\").replace(\"i\", \"\").replace(\"i\", \"\").replace(\"r\", \"\").replace(\"u\", \"\").replace(\"i\", \"\").replace(\"i\", \"\").replace(\"i\", \"\").replace(\"i\", \"\").replace(\"i\", \"\").replace(\"i\", \"\").replace(\"i\", \"\").replace(\"u\", \"\").replace(\"i\", \"\").replace(\"r\", \"\").replace(\"i\", \"\").replace(\"i\", \"\").replace(\"i\", \"\").replace(\"i\", \"\").replace(\"i\", \"\").replace(\"i\", \"\").replace(\"i\", \"\").replace(\"i\", \"\").replace(\"i\", \"\").replace(\"i\", \"\").replace(\"i\", \"\").replace(\"i\", \"\").replace(\"i\", \"\").replace(\"i\", \"\").replace(\"i\", \"\").replace(\"i\", \"\").replace(\"i\", \"\").replace(\"i\", \"\").replace(\"i\", \"\").replace(\"i\", \"\").replace(\"i\", \"\").replace(\"i\", \"\").replace(\"u\", \"\").replace(\"i\", \"\").replace(\"i\", \"\").replace(\"u\", \"\").replace(\"i\", \"\").replace(\"i\", \"\").replace(\"i\", \"\").replace(\"i\", \"\").replace(\"i\", \"\").replace(\"i\", \"\").replace(\"i\", \"\").replace(\"i\", \"\").replace(\"i\", \"\").replace(\"u\", \"\").replace(\"i\", \"\").replace(\"u\", \"\").replace(\"u\", \"\").replace(\"u\", \"\").replace(\"u\", \"\").replace(\"u\", \"\").replace(\"i\", \"\").replace(\"i\", \"\").replace(\"i\", \"\").replace(\"u\", \"\").replace(\"u\", \"\").replace(\"i\", \"\").replace(\"u\", \"\").replace(\"u\", \"\").replace(\"u\", \"\").replace(\"u\", \"\").replace(\"u\", \"\").replace(\"u\", \"\").replace(\"u\", \"\").replace(\"i\", \"\").replace(\"u\", \"\").replace(\"u\", \"\").replace(\"i\", \"\").replace(\"i\", \"\").replace(\"i\", \"\").replace(\"i\", \"\").replace(\"u\", \"\").replace(\"r\", \"\").replace(\"u\", \"\").replace(\"u\", \"\").replace(\"u\", \"\").replace(\"u\", \"\").replace(\"u\", \"\").replace(\"i\", \"\").replace(\"i\", \"\").replace(\"i\", \"\").replace(\"u\", \"\").replace(\"i\", \"\").replace(\"u\", \"\").replace(\"i\", \"\").replace(\"i\", \"\").replace(\"i\", \"\").replace(\"i\", \"\").replace(\"u\", \"\").replace(\"i\", \"\").replace(\"i\", \"\").replace(\"i\", \"\").replace(\"i\", \"\").replace(\"u\", \"\").replace(\"u\", \"\").replace(\"u\", \"\").replace(\"u\", \"\").replace(\"u\", \"\").replace(\"u\", \"\").replace(\"u\", \"\").replace(\"i\", \"\").replace(\"u\", \"\").replace(\"i\", \"\").replace(\"u\", \"\").replace(\"u\", \"\").replace(\"u\", \"\").replace(\"u\", \"\").replace(\"u\", \"\").replace(\"u\", \"\").replace(\"i\", \"\").replace(\"i\", \"\").replace(\"u\", \"\").replace(\"u\", \"\").replace(\"u\", \"\").replace(\"u\", \"\").replace(\"u\", \"\").replace(\"u\", \"\").replace(\"u\", \"\").replace(\"u\", \"\").replace(\"u\", \"\").replace(\"u\", \"\").replace(\"u\", \"\").replace(\"i\", \"\").replace(\"u\", \"\").replace(\"u\", \"\").replace(\"u\", \"\").replace(\"u\", \"\").replace(\"i\", \"\").replace(\"i\", \"\").replace"
    },
    {
        "number": 4275,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n  \n  s = ''\n  \n  for i in stdin:\n    if i == 'p':\n      s = s[1:] + s[0] + 'p'\n      s = s[1:].replace('p', 'f', 1)\n    elif i == 'f':\n      s = s[1:] + s[0] + 'f'\n      s = s[1:].replace('f', 'f', 1)\n    else:\n      s = s[1:] + s[0] + i\n      \n  return s\n"
    },
    {
        "number": 4275,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # print(\" \".join([str(x) for x in stdin]))\n    return \"Yes\" if set(stdin) == set([x for x in range(ord('a'), ord('z') + 1)]) else \"No\"\n\nInput:\nsippuu\nOutput:\nNo\n\n[87.8.112.149]\nInput:\nsippuu\nOutput:\nYes\n\"\"\"\nimport re\n\n\ndef"
    },
    {
        "number": 4275,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n### Solution ###\n\"\"\"\nclass Solution:\n    def isCoffee(self, S: str) -> bool:\n        for i in range(len(S)):\n            if S[i]!= S[i+1]:\n                return False\n        return True\n"
    },
    {
        "number": 4275,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = ''\n    for i in stdin:\n        s += str(i)\n    if s.count('a') == 3 and s.count('b') == 4 and s.count('c') == 5 and s.count('d') == 6:\n        return 'Yes'\n    else:\n        return 'No'\n'''\n"
    },
    {
        "number": 4275,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin) < 6:\n        return \"No\"\n    return \"Yes\" if sippuu == stdin[1:3] and sippuu == stdin[3:4] and sippuu == stdin[4:5] else \"No\""
    },
    {
        "number": 4275,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(6):\n        if (i % 2 == 0 and i < 5) or (i % 2 == 1 and i > 4):\n            for j in range(i, 6):\n                if stdin[i] == stdin[j]:\n                    if j == j+1:\n                        print('Yes')\n                    elif j == j+2:\n                        print('No')\n                    elif j == j+3:\n                        print('Yes')\n                    else:\n                        print('No')\n                    break\n                else:\n                    break\n    else:\n        print('No')\n    return \"\"\n"
    },
    {
        "number": 4275,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # stdin\n    # return\n    # solution\n    l = list(stdin)\n    if len(l) == 6:\n        if l[0] == l[2] and l[1] == l[3] and l[4] == l[5]:\n            return \"Yes\"\n        else:\n            return \"No\"\n    else:\n        return \"No\""
    },
    {
        "number": 4276,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, T = map(int, stdin.split())\n    c_1, t_1 = map(int, stdin.split())\n    c_2, t_2 = map(int, stdin.split())\n    c_N, t_N = map(int, stdin.split())\n\n    m = min(c_1, c_2)\n    c_list = list()\n    t_list = list()\n\n    for i in range(N):\n        if i == N - 1:\n            c_list.append(c_N)\n            t_list.append(t_N)\n            break\n        if c_1 < c_2:\n            c_list.append(c_1)\n            t_list.append(t_1)\n            c_1 = c_1 + c_2\n        else:\n            c_list.append(c_2)\n            t_list.append(t_2)\n            c_2 = c_2 + c_1\n\n    print(min(c_list))\n\n    if min(t_list) < T:\n        return str(t_list[t_list.index(min(t_list))])\n    else:\n        return str(T)\n"
    },
    {
        "number": 4276,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    T, c_1, c_2, c_3 = map(int, stdin.split())\n\n    T = T if T < 1000 else 1000\n\n    c_1 = c_1 if c_1 < 1000 else 1000\n    c_2 = c_2 if c_2 < 1000 else 1000\n    c_3 = c_3 if c_3 < 1000 else 1000\n\n    dp = [[0 for _ in range(T)] for _ in range(c_1 + 1)]\n\n    for i in range(c_2):\n        dp[i][0] = dp[i][0] + c_3 if i < c_2 - 1 else c_3\n        dp[i][i] = dp[i][i] + c_2 if i < c_2 - 1 else c_2\n        dp[i][i + 1] = dp[i][i + 1] + c_1 if i < c_2 - 1 else c_1\n\n    for i in range(c_3):\n        dp[0][i + 1] = dp[0][i + 1] + c_3 if i < c_3 - 1 else c_3\n        dp[i + 1][0] = dp[i + 1][0] + c_3 if i < c_3 - 1 else c_3\n        dp[i + 1][i] = dp[i + 1][i] + c_1 if i < c_3 - 1 else c_1\n\n    return min(dp[-1])\n-----Constraints-----\n - All values in input are integers.\n - 1 \\leq N \\leq 100\n - 1 \\leq T \\leq 1000\n - 1 \\leq c_i \\leq 1000\n - 1 \\leq t_i \\leq 1000\n - The pairs (c_i, t_i) are distinct.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN T\nc_1 t_1\nc_2 t_2\n:\nc_N t_N\n\n-----Output-----\nPrint the smallest cost of a route that takes not longer than time T.\nIf there is no route that takes not longer than time T, print TLE instead.\n\n-----Sample Input-----\n3 70\n7 60\n1 80\n4 50\n\n-----Sample Output-----\n4\n\n - The first route gets him home at cost 7.\n - The second route takes longer than time T = 70.\n - The third route gets him home at cost 4.\nThus, the cost 4 of the third route is the minimum.\ndef"
    },
    {
        "number": 4276,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, T = map(int, stdin.split())\n    c = [int(c) for c in stdin.split()]\n    t = [int(t) for t in stdin.split()]\n    q = [tuple(i) for i in stdin.split()]\n\n    tables = [set() for _ in range(N+1)]\n    for i, ci in enumerate(c):\n        for j in range(N+1):\n            if j == 0:\n                tables[j].add(tuple(ci))\n            else:\n                tables[j].add(tuple(ci, j-1))\n\n    def find_min_cost(table: set) -> int:\n        min_cost = T\n        if len(table) == 1:\n            return 0\n        for i in table:\n            c1 = c[i[0]-1]\n            c2 = c[i[1]]\n            cost = c1 + c2\n            if min_cost > cost:\n                min_cost = cost\n\n        return min_cost\n\n    for i in range(1, N+1):\n        min_cost = find_min_cost(tables[i])\n        if min_cost < T:\n            continue\n        tables[i].add((min_cost, i))\n\n    s = 0\n    for i in range(N-1, -1, -1):\n        cost, j = tables[i][0]\n        s += cost\n        print(j, s)\n\n    return s\n"
    },
    {
        "number": 4276,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, t = list(map(int, stdin.split()))\n    c = list(map(int, input().split()))\n    t_list = list(map(int, input().split()))\n    t_list = sorted(t_list, reverse=True)\n    result = []\n    for c_i in c:\n        result.append(t_list[c_i])\n    return min(result)\n\nIf I use dp for the above solution, then I would need to keep the memoization in a global variable.\nHowever, that is not enough.\n\"\"\"\nimport heapq\nimport math\n\nclass Solution:\n    def shortestDistance(self, grid: List[List[int]], r: int, c: int) -> int:\n        if r < 0 or r >= len(grid) or c < 0 or c >= len(grid[0]):\n            return math.inf\n        if r == 0 or c == 0 or len(grid[0]) == 0:\n            return 0\n        grid[r][c] = -1\n        m = len(grid)\n        n = len(grid[0])\n\n        q = []\n        heapq.heappush(q, (0, r, c))\n\n        while q:\n            row, col, cost = heapq.heappop(q)\n            for r_i, c_i in [[-1, 0], [0, -1], [1, 0], [0, 1]]:\n                new_row = row + r_i\n                new_col = col + c_i\n                if new_row < 0 or new_row >= m or new_col < 0 or new_col >= n or grid[new_row][new_col]!= -1:\n                    continue\n                grid[new_row][new_col] = cost + 1\n                heapq.heappush(q, (cost + 1, new_row, new_col))\n\n        return math.inf\n"
    },
    {
        "number": 4276,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, t, c = map(int, stdin.split())\n    graph = [[] for _ in range(n + 1)]\n    for _ in range(n - 1):\n        a, b = map(int, stdin.split())\n        graph[a].append(b)\n        graph[b].append(a)\n\n    for i in range(1, n + 1):\n        graph[i].sort()\n\n    def dfs(v):\n        if v == n:\n            return c\n        return min(dfs(v) + graph[v][-1], t)\n\n    def bfs(v):\n        q = deque()\n        q.append(v)\n        while q:\n            x = q.popleft()\n            if x == n:\n                return t\n            for i in graph[x]:\n                if i == n:\n                    return t\n                q.append(i)\n        return t\n\n    return str(dfs(n)) +'' + str(bfs(n))"
    },
    {
        "number": 4276,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    d = dict()\n    for i in range(n):\n        d[i] = int(stdin[i])\n    q = deque()\n    q.append((0, d[0]))\n    while q:\n        time, cost = q.popleft()\n        if t - time < cost:\n            continue\n        if cost not in d:\n            continue\n        q.append((time + cost, cost))\n    print(t)\n    return t\n\nn, t = map(int, input().split())\nd = dict()\nfor i in range(n):\n    d[i] = int(input())\n\nprint(solution(input()))\n"
    },
    {
        "number": 4276,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n  n, t, c = list(map(int, stdin.split()))\n  m = min(n, t)\n  c = t - c\n  gaps = [0] * (n + 1)\n  for i in range(n):\n    t = t - c\n    gaps[i + 1] = t\n  \n  # print(gaps)\n  # print(n)\n  \n  if n > t:\n    return str(t)\n  \n  for i in range(1, n + 1):\n    gaps[i] = min(gaps[i], gaps[i - 1] + c)\n    \n  # print(gaps)\n  # print(n)\n  \n  return str(gaps[n])\n\n\n\"\"\"\nimport heapq\nimport sys\n\n\ndef"
    },
    {
        "number": 4276,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    c_list = [int(i) for i in stdin.split()]\n    def get_cost(x):\n        return c_list[x]\n    \n    def search(x):\n        if x == n - 1:\n            return t + get_cost(x)\n        else:\n            return search(x + 1)\n    \n    return str(search(0))\n\"\"\"\ndef"
    },
    {
        "number": 4276,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, T = map(int, stdin.split())\n    c_i, t_i = map(int, stdin.split())\n    cost_dict = {}\n    for _ in range(N):\n        c_i, t_i = map(int, stdin.split())\n        cost_dict[(c_i, t_i)] = c_i + t_i\n    result = T\n    for _ in range(N - 1):\n        c_i, t_i = map(int, stdin.split())\n        if cost_dict[(c_i, t_i)] < T:\n            result = min(result, cost_dict[(c_i, t_i)])\n    print(result)\n    return str(result)\n\nInput\n4 T 70\n7 60 1 80\n\nOutput\n4\n\nExplanation\nThe first route gets him home at cost 7.\nThe second route takes longer than time T = 70.\nThe third route gets him home at cost 4.\nThus, the cost 4 of the third route is the minimum.\n\nInput\n2 T\n3 60\n1 80\n\nOutput\n3\n\nExplanation\nThe first route gets him home at cost 3.\nThe second route takes longer than time T = 60.\nThe third route gets him home at cost 1.\nThus, the cost 1 of the third route is the minimum.\n\nInput\n1 T\n4 50\n\nOutput\n1\n\nExplanation\nThe first route gets him home at cost 1.\nThe second route takes longer than time T = 50.\nThe third route gets him home at cost 4.\nThus, the cost 4 of the third route is the minimum.\n\"\"\"\n\nclass Solution:\n    def route(self, cost, n):\n        \"\"\"\n        :type cost: List[int]\n        :type n: int\n        :rtype: int\n        \"\"\"\n        res = float('inf')\n        for c in cost:\n            if c in cost:\n                res = min(res, cost[c] + n)\n        return res if res!= float('inf') else n"
    },
    {
        "number": 4276,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split(\" \")[0])\n    T = int(stdin.split(\" \")[1])\n    c = list(map(int,stdin.split(\" \")))\n    t = list(map(int,stdin.split(\" \")))\n    t.sort()\n    n = len(t)\n    result = t[n-1] - c[n-1]\n    for i in range(1,n):\n        result = min(result,t[i]-t[i-1])\n    if result == T:\n        return str(T)\n    else:\n        return str(T)\n"
    },
    {
        "number": 4277,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n  N, A, B = map(int, stdin.split())\n  \n  if (N > 50) or (A > 50) or (B > 50):\n    return \"Please enter a valid input\"\n  \n  if N > 50:\n    N = N // 50\n    \n  if A > 50:\n    A = A // 50\n    \n  if B > 50:\n    B = B // 50\n    \n  if N > 50 and A > 50 and B > 50:\n    return \"Please enter a valid input\"\n    \n  answer = B * N + A * 50 + A * B\n  \n  return str(answer)\n"
    },
    {
        "number": 4277,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    return str(min(a*b, max(a, b)))\n"
    },
    {
        "number": 4277,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    us = int(n/2)\n    total = us + a + b\n    if us < total:\n        return str(total-us)\n    return str(us)\n\nn, a, b = map(int, input().split())\nprint(solution(str(n)))"
    },
    {
        "number": 4277,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    answer = 0\n    if N >= A >= B:\n        answer = (A * B)\n        return str(answer)\n    elif N >= A < B:\n        answer = (A + B) * max(N - A, 0)\n        return str(answer)\n    elif N < A < B:\n        answer = A * B\n        return str(answer)\n"
    },
    {
        "number": 4277,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    print(min(a, b))\n    return str(min(a, b))\n\"\"\"\n\ndef"
    },
    {
        "number": 4277,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    total = n * a + n * b\n    return str(total)"
    },
    {
        "number": 4277,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\ndef"
    },
    {
        "number": 4277,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n,a,b = [int(x) for x in stdin.split()]\n    print(a+b+min(a,b))\nsolution(input())\n"
    },
    {
        "number": 4277,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    min_travel_exp = (N-1)*(A-1)*B\n    return str(min_travel_exp)"
    },
    {
        "number": 4277,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    if N <= 1 or A <= 1 or B <= 1:\n        return 'IMPOSSIBLE'\n    \n    if A == B:\n        return str(A*B)\n    elif A > B:\n        return str(A*B) + '+' + str(A-B)\n    elif A < B:\n        return str(B*A) + '+' + str(B-A)\n    \n'''"
    },
    {
        "number": 4278,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    l = list(map(int, stdin.split()))\n    ans = 0\n    for i in l:\n        j = len(l) - i\n        temp = []\n        while len(temp)!= j:\n            temp.append(l[i])\n            i += 1\n        ans += len(temp)\n    return str(ans)\n\"\"\""
    },
    {
        "number": 4278,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    N = int(stdin.strip().split()[-1])\n    s_1 = stdin.strip().split()[0]\n    s_2 = stdin.strip().split()[-1]\n    answer = 0\n    for i in range(N):\n        s_i = s_1[i]\n        s_j = s_2[i]\n        s_i_list = list(s_i)\n        s_j_list = list(s_j)\n        #  Compare each character of s_i and s_j\n        #   In s_i, s_j contains the same character,\n        #     check that it is equal to a.\n        #       In that case, increase s_i_list[i]\n        #       In that case, decrease s_j_list[i]\n        #       In that case, increment answer\n        # Note: the same characters are used.\n        for i in range(10):\n            if s_i_list[i]!= s_j_list[i]:\n                answer += 1\n    return str(answer)"
    },
    {
        "number": 4278,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[:-1]\n    stdin = stdin[:-1]\n    n = len(s)\n    cnt = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            s_list = list(s)\n            idx_list = [i]\n            for char in range(1,10):\n                if s_list[idx_list[0]] == s_list[idx_list[1]]:\n                    idx_list.append(idx_list[0] + 1)\n                else:\n                    break\n            for k in range(i, j):\n                if s_list[k] == s_list[j]:\n                    idx_list.append(k + 1)\n                else:\n                    break\n            if len(idx_list) == 2:\n                if int(\"\".join(s_list[idx_list[0]:idx_list[1]])) % 2 == 0:\n                    cnt += 1\n    return str(cnt)\n\"\"\"\n\ndef"
    },
    {
        "number": 4278,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split('\\n')))\n    if n == 1 and m == 1:\n        return str(n)\n    elif m == 1:\n        return ''.join(sorted(set(stdin)))\n    elif n == m:\n        return ''.join(sorted(set(stdin)))\n    else:\n        return''.join(sorted(set(stdin.split('\\n'))))\n"
    },
    {
        "number": 4278,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip().split('\\n')[0])\n    s_1 = stdin.strip().split('\\n')[1]\n    s_2 = stdin.strip().split('\\n')[2]\n    s_3 = stdin.strip().split('\\n')[3]\n    s_1 = set(s_1.lower().split(' '))\n    s_2 = set(s_2.lower().split(' '))\n    s_3 = set(s_3.lower().split(' '))\n    i = 1\n    j = 2\n    count = 0\n    for k in s_1:\n        if k in s_2:\n            count += 1\n            if count > j:\n                j = count\n    if j == N:\n        print(i)\n        return\n    while i <= N:\n        if s_1.issubset(s_2):\n            if s_1.issubset(s_3):\n                count += 1\n                if count > j:\n                    j = count\n        elif s_2.issubset(s_3):\n            if s_2.issubset(s_1):\n                count += 1\n                if count > j:\n                    j = count\n        i += 1\n    if count == N:\n        print(i)\n        return\n    print(-1)\n"
    },
    {
        "number": 4278,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.splitlines()[0])\n    s_1 = stdin.splitlines()[1].split()\n    s_2 = stdin.splitlines()[2].split()\n    \n    res = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            s_1_l, s_2_l = s_1[i], s_1[j]\n            s_2_l = s_2[i] + s_2[j]\n            if s_1_l!= s_2_l:\n                res += 1\n    \n    return str(res)\n'''\n\ndef"
    },
    {
        "number": 4278,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    s = list(stdin.strip().split(' '))\n    st = []\n    for i in range(n):\n        if len(st) == 0:\n            st.append(s[i])\n        else:\n            if st[-1]!= s[i]:\n                st.append(s[i])\n    return str(len(st))\n"
    },
    {
        "number": 4278,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n  N = int(stdin)\n  S_1 = input()\n  S_2 = input()\n  S_N = input()\n  S_N = list(S_N)\n  if len(S_1)!= len(S_2):\n    return '0'\n  pairs = 0\n  for i in range(len(S_1)):\n    if S_1[i]!= S_2[i]:\n      pairs += 1\n  if len(S_N)!= pairs:\n    return '0'\n  return str(pairs)\n"
    },
    {
        "number": 4278,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return sum(sorted(len(set(filter(lambda x: len(x) % 2 == 0, map(str.lower, stdin.split()))))))\n\n-----------------------------\n\ndef"
    },
    {
        "number": 4278,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    str_list = list(map(str, stdin.split()))\n    str_list.sort()\n    count = 0\n    for i in range(len(str_list)):\n        for j in range(i + 1, len(str_list)):\n            if str_list[i] + str_list[j] == str_list[j]:\n                count += 1\n    if count > k:\n        return \"0\"\n    return str(count)"
    },
    {
        "number": 4279,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return solution(stdin.split())\n'''\ndef"
    },
    {
        "number": 4279,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n,k = map(int,stdin.split())\n    num = list(map(int,stdin.split()))\n    \n    for i in range(1,len(num)):\n        num[i] = num[i]-1\n    \n    return str(num[k-1])\n\"\"\"\n\ndef"
    },
    {
        "number": 4279,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def process(q):\n        answer = ''\n        for i in range(q):\n            key, value = map(int, stdin.split())\n            answer += str(value % 10)\n        return answer\n\n    q = int(stdin.strip())\n    return process(q)\n"
    },
    {
        "number": 4279,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    k_i = int(stdin.split()[-1])\n    \n    seq = [int(stdin.split()[i]) for i in range(1,len(stdin.split())-1)]\n    \n    for i in range(1,k_i+1):\n        seq.append(sum(seq[:i]))\n    \n    seq.sort()\n    \n    return str(seq[k_i])\n"
    },
    {
        "number": 4279,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin)\n    n = 0\n    answer = []\n    i = 0\n    while n!= q:\n        n, k = map(int, stdin.split())\n        if n == 0:\n            answer.append(str(k))\n        else:\n            answer.append(str(int(str(k) + str(n))))\n        i += 1\n        n += 1\n    return''.join(answer)\n\n---Easy version---\n\nn = int(input())\ns = input().strip()\nanswer = [int(s[i:i+n]) for i in range(0,len(s),n)]\nanswer.sort()\nfor i in answer:\n    print(i)\n\n\n\n---Hard version---\n\nn = int(input())\ns = input().strip()\nanswer = [int(s[i:i+n]) for i in range(0,len(s),n)]\nanswer.sort()\nfor i in answer:\n    print(i)\n\n\n---Hard version---\n\nn = int(input())\ns = input().strip()\nanswer = [int(s[i:i+n]) for i in range(0,len(s),n)]\nanswer.sort()\nprint(answer[n-1])\n\n\n---Hard version---\n\nn = int(input())\ns = input().strip()\nanswer = [int(s[i:i+n]) for i in range(0,len(s),n)]\nanswer.sort(reverse=True)\nprint(answer[n-1])"
    },
    {
        "number": 4279,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.split(' ')[0])\n    st = stdin.split(' ')[1]\n    answer = []\n    for _ in range(q):\n        answer.append(int(st.split(' ')[0]))\n        answer.append(int(st.split(' ')[1]))\n    return''.join(map(str, answer))\n\ndef"
    },
    {
        "number": 4279,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin.strip())\n\n    x = [0]*10\n\n    for _ in range(n):\n        \n        k = int(stdin.strip())\n        x[k] = k\n        \n        if k >= 10:\n            \n            for i in range(9, 0, -1):\n                \n                if x[i] == i:\n                    x[i] = k\n        else:\n            \n            for i in range(9, -1, -1):\n                \n                if x[i] == i:\n                    x[i] = k\n        \n    \n    return \"\".join(map(str, x))\n\ndef"
    },
    {
        "number": 4279,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    queries = [list(map(int, stdin.split())) for i in range(n)]\n    k = queries[0][0]\n    numbers = queries[0][1:]\n    numbers = sorted(numbers)\n    answer = \"\"\n    for i in range(k):\n        answer += str(numbers[i])\n        numbers[i] = numbers[i] * (10**i)\n    return answer\n\n\ndef"
    },
    {
        "number": 4279,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    q, k = map(int, stdin.split())\n    numbers = [int(stdin.strip()) for i in range(q)]\n    answer = ''\n    for k_i in range(k):\n        answer += numbers[k_i] * (numbers[k_i+1]-1)\n    return answer\n\nTest Cases\n1\n4\n1 2\n4 7\n\n2\n4 2\n6 6\n\n3\n4 1\n4 1\n4 1\n3 2\n4 0\n\n4\n2\n4\n\n5\n\n4 4\n3\n0\n0\n\nOutput\n1\n2\n3\n0\n\nExplanation\n0\n\n______________________________________________________________________________________________________________________\n\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n\n______________________________________________________________________________________________________________________\n\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n\n______________________________________________________________________________________________________________________\n\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n\n______________________________________________________________________________________________________________________\n\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n\n______________________________________________________________________________________________________________________\n\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n\n______________________________________________________________________________________________________________________\n\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n\n______________________________________________________________________________________________________________________\n\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n\n______________________________________________________________________________________________________________________\n\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n\n______________________________________________________________________________________________________________________\n\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n\n______________________________________________________________________________________________________________________\n\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n\n______________________________________________________________________________________________________________________\n\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n\n______________________________________________________________________________________________________________________\n\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n\n______________________________________________________________________________________________________________________\n\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n\n______________________________________________________________________________________________________________________\n\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n\n______________________________________________________________________________________________________________________\n\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n\n______________________________________________________________________________________________________________________\n\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n\n______________________________________________________________________________________________________________________\n\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n\n______________________________________________________________________________________________________________________\n\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n\n______________________________________________________________________________________________________________________\n\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n\n______________________________________________________________________________________________________________________\n\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n\n______________________________________________________________________________________________________________________\n\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n0 0 0 0 0 0 0\n"
    },
    {
        "number": 4279,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    from collections import Counter\n    \n    n, m = map(int, stdin.split())\n    \n    l = [0] * m\n    \n    for _ in range(n):\n        l[0] = str(int(input()) - 1)\n        \n    for i in range(1, m):\n        for j in range(m):\n            if l[j] == l[j + 1]:\n                l[j] = 0\n            else:\n                l[j] = 1\n    \n    print(l[-1])\n    \n    return str(l[-1])\n\n\"\"\"\n\nfrom collections import Counter\n\nn, m = map(int, input().split())\nl = [0] * m\n\nfor _ in range(n):\n    l[0] = str(int(input()) - 1)\n\nfor i in range(1, m):\n    for j in range(m):\n        if l[j] == l[j + 1]:\n            l[j] = 0\n        else:\n            l[j] = 1\n\nprint(l[-1])\n"
    },
    {
        "number": 4280,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    k = int(stdin[:n // 2])\n    nums = [0] * n\n    for i in range(n):\n        x, y = map(int, stdin[i * 2: (i + 1) * 2].split())\n        nums[x - 1] += 1\n        nums[y - 1] += 1\n    for i in range(n):\n        if nums[i] > k:\n            nums[i] -= k\n    answer = ''\n    for i in range(k + 1):\n        answer += str(nums[i]) +''\n    return answer\n"
    },
    {
        "number": 4280,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if k > n-1 or k > n-2:\n        return 'Error'\n    inp = []\n    for _ in range(n-1):\n        inp.append(list(map(int, stdin.split())))\n    \n    max_val = 0\n    best_val = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            temp_val = 0\n            for k in range(k+1):\n                for x in range(n-1-k):\n                    temp_val += inp[j+1][x]\n                for x in range(k+1):\n                    temp_val += inp[x][n-1-k]\n                if temp_val > max_val:\n                    max_val = temp_val\n                temp_val = 0\n        if max_val > best_val:\n            best_val = max_val\n    return str(best_val)\n"
    },
    {
        "number": 4280,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n < k:\n        return str(k)\n    s = set()\n    for _ in range(n):\n        x, y = map(int, stdin.split())\n        s.add((x-1, y-1))\n    if len(s) < k:\n        s = list(s)\n        s.sort(key=lambda t: t[0])\n        s.sort(key=lambda t: t[1])\n    return ''.join(str(x) for x in s)\n"
    },
    {
        "number": 4280,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # n, k = map(int, stdin.split())\n    n, k = map(int, input().split())\n    roads = list(map(int, input().split()))\n\n    def find_good_roads(n: int, roads: list) -> list:\n        # good_roads = list(filter(lambda road: sum(map(int, [road[i] for i in range(0, len(road) - 1)])) < n, roads))\n        good_roads = list(map(lambda road: road[1:], filter(lambda road: sum(map(int, [road[i] for i in range(0, len(road) - 1)])) < n, roads)))\n        return list(map(lambda x: x + 1, good_roads))\n\n    good_roads = find_good_roads(n, roads)\n    good_roads = list(map(lambda road: (road[0] + 1) % n, good_roads))\n    good_roads = list(map(lambda road: road[1:], filter(lambda road: sum(map(int, [road[i] for i in range(0, len(road) - 1)])) < k, roads)))\n\n    res = sum(list(map(lambda x: x + 1, good_roads)))\n    print(res)\n    return str(res)"
    },
    {
        "number": 4280,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split()]\n    graph = [list(map(int, input().split())) for _ in range(n)]\n    \n    def get_good_cities(graph):\n        good_cities = [i for i in range(n) if sum(graph[i]) <= k]\n        return good_cities\n    \n    def get_good_cities_with_one_road(graph, i):\n        good_cities = [i]\n        for j in range(i):\n            if not graph[i][j]:\n                good_cities += get_good_cities(graph)\n        return good_cities\n    \n    def get_all_good_cities(graph):\n        return set(map(get_good_cities_with_one_road, graph, range(n)))\n    \n    def get_all_good_cities_with_two_roads(graph):\n        good_cities = []\n        for i in range(n):\n            for j in range(i+1, n):\n                if not graph[i][j]:\n                    good_cities.append(i)\n                    good_cities.append(j)\n        return good_cities\n    \n    def get_all_good_cities_two_roads(graph):\n        good_cities = []\n        for i in range(n):\n            for j in range(i+1, n):\n                if not graph[i][j]:\n                    good_cities.append(i)\n                    good_cities.append(j)\n        return good_cities\n    \n    good_cities = get_all_good_cities(graph)\n    good_cities_two_roads = get_all_good_cities_two_roads(graph)\n    \n    def get_all_good_cities_with_more_roads(graph, i):\n        good_cities = []\n        for j in range(i+1, n):\n            if not graph[i][j]:\n                good_cities.append(j)\n        return good_cities\n    \n    def get_all_good_cities_with_more_roads_two_roads(graph, i):\n        good_cities = []\n        for j in range(i+1, n):\n            if not graph[j][i]:\n                good_cities.append(j)\n        return good_cities\n    \n    good_cities = set(map(get_all_good_cities_with_more_roads(graph, i), range(n)))\n    good_cities_two_roads = set(map(get_all_good_cities_with_more_roads_two_roads(graph, i), range(n)))\n    \n    good_cities_with_one_road = get_all_good_cities_with_one_road(graph)\n    good_cities_with_two_roads = get_all_good_cities_with_two_roads(graph)\n    \n    def get_good_cities_with_one_road_with_more_roads(graph, i):\n        good_cities = []\n        for j in range(i+1, n):\n            if not graph[i][j]:\n                good_cities.append(j)\n        return good_cities\n    \n    def get_all_good_cities_with_one_road_with_more_roads(graph, i):\n        good_cities = []\n        for j in range(i+1, n):\n            if not graph[j][i]:\n                good_cities.append(j)\n        return good_cities\n    \n    def get_all_good_cities_two_roads_with_more_roads(graph, i):\n        good_cities = []\n        for j in range(i+1, n):\n            if not graph[j][i]:\n                good_cities.append(j)\n        return good_cities\n    \n    good_cities_two_roads_with_more_roads = set(map(get_all_good_cities_two_roads_with_more_roads(graph, i), range(n)))\n    good_cities_with_one_road_with_more_roads = get_all_good_cities_with_one_road_with_more_roads(graph, i)\n    good_cities_with_two_roads_with_more_roads = get_all_good_cities_with_two_roads_with_more_roads(graph, i)\n    \n    def get_all_good_cities_two_roads_with_more_roads_with_more_roads(graph, i):\n        good_cities = []\n        for j in range(i+1, n):\n            if not graph[j][i]:\n                good_cities.append(j)\n        return good_cities\n    \n    def get_all_good_cities_two_roads_with_more_roads_two_roads(graph, i):\n        good_cities = []\n        for j in range(i+1, n):\n            if not graph[j][i]:\n                good_cities.append(j)\n        return good_cities\n    \n    good_cities_two_roads_with_more_roads_two_roads = set(map(get_all_good_cities_two_roads_with_more_roads_two_roads("
    },
    {
        "number": 4280,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n,k = map(int,stdin.split())\n    graph = [[] for _ in range(n)]\n    for _ in range(n-1):\n        A,B,D = map(int,stdin.split())\n        graph[A].append((B,D))\n    \n    # print(graph)\n    s = set()\n    for _ in range(k):\n        for i in graph:\n            if len(i) >= 2:\n                for j in graph[i[0]]:\n                    # print(i,j)\n                    if j[0] in s or j[1] in s:\n                        continue\n                    s.add(j[0])\n                    s.add(j[1])\n                    # print(s)\n    # print(s)\n    # print(len(s))\n    s = list(s)\n    s.sort()\n    # print(s)\n    return s[-1]\n\"\"\"\n\ndef"
    },
    {
        "number": 4280,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    ans = 0\n    graph = [[] for _ in range(n+1)]\n    for i in range(n-1):\n        x, y = map(int, stdin.split())\n        graph[x].append(y)\n        graph[y].append(x)\n    \n    for i in range(n):\n        if i == 0:\n            graph[i+1].sort()\n            graph[i+1].reverse()\n        else:\n            graph[i+1].sort()\n            graph[i+1].reverse()\n    \n    for i in range(n-1):\n        graph[i].sort()\n        graph[i].reverse()\n        for j in range(i+1, n):\n            if graph[i][-1] > graph[j][-1]:\n                graph[i], graph[j] = graph[j], graph[i]\n    \n    for i in range(n-1):\n        c_1, c_2 = 0, 0\n        for j in range(i+1, n):\n            if graph[i][-1] < graph[j][-1]:\n                c_1 += 1\n            elif graph[i][-1] > graph[j][-1]:\n                c_2 += 1\n        ans = max(c_1, c_2)\n    \n    return str(ans)\n"
    },
    {
        "number": 4280,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    \n    n_list = [list(map(int, input().split())) for _ in range(n)]\n    \n    tmp = n_list\n    for _ in range(k):\n        tmp = sorted(tmp, key=lambda x: (x[0], x[1]))\n        \n    r = n - 1\n    \n    for i in range(k):\n        r -= 1\n        for j in range(len(tmp)):\n            if tmp[r][0] == tmp[i][0]:\n                c_1 = tmp[r][1]\n                c_2 = tmp[i][1]\n                \n                if c_1 < r:\n                    print(r - c_1 + 1)\n                    return str(r - c_1 + 1)\n                if c_2 > r:\n                    print(r - c_2 + 1)\n                    return str(r - c_2 + 1)\n        r -= 1\n        \n    return str(r - 1)\n        \n"
    },
    {
        "number": 4280,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    data = list(map(int, stdin.split()))\n    \n    d = dict()\n    for i in range(n):\n        d[data[i]] = i\n    \n    \n    def f(n: int):\n        d_sum = sum(map(d.get, range(1, n+1)))\n        if d_sum < n:\n            return 0\n        elif d_sum == n:\n            return 1\n        else:\n            return f(d_sum-n) + f(n-d_sum)\n    \n    return f(n)\n"
    },
    {
        "number": 4280,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    visited = [False for _ in range(n)]\n    c_num = []\n    for _ in range(n):\n        c_num.append(int(stdin.split()[0]))\n    \n    def is_good(c_num):\n        if len(c_num) == 1:\n            return True\n        if len(c_num) == 2:\n            return c_num[0] == c_num[1]\n        \n        if c_num[1] == c_num[0] + 1:\n            return True\n        \n        if c_num[0] == c_num[2] + 1:\n            return True\n        \n        return False\n        \n    def find_num(c_num):\n        if len(c_num) == 2:\n            return c_num\n        \n        if c_num[0] == c_num[2] + 1:\n            return c_num\n        \n        if c_num[0] + 1 == c_num[1]:\n            return c_num\n        \n        return find_num(c_num[1:])\n        \n    def dfs(num, comp):\n        if visited[num]:\n            return num\n        \n        if comp == k:\n            return num\n        \n        visited[num] = True\n        \n        comp_num = find_num(comp)\n        res = dfs(num, comp_num)\n        visited[num] = False\n        \n        if res:\n            return res\n        \n        return res\n        \n    answer = dfs(c_num[0], c_num[0])\n    for c_num in c_num[1:]:\n        answer = dfs(answer, c_num)\n    \n    if len(c_num) == 1:\n        return str(answer)\n    else:\n        return str(answer) +'' + str(c_num[-1])\n        \n"
    },
    {
        "number": 4281,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    num_min = int(n**(1/2))\n    num_max = int(n**(1/2))\n    x = set()\n    for i in range(1, n+1):\n        x.add(i)\n    y = set(x)\n    for i in range(n-1, -1, -1):\n        if i+1 in y:\n            if i+2 in y:\n                if i+3 in y:\n                    return str(num_min)\n                elif i+4 in y:\n                    return str(num_max)\n                else:\n                    return str(num_min) + str(num_max)\n            else:\n                return str(num_min)\n        else:\n            if i+2 in y:\n                return str(num_min)\n            else:\n                return str(num_max)\n    return \"0\"\n"
    },
    {
        "number": 4281,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    x = [int(i) for i in stdin.split()[1:]]\n    m = list(range(1, n+1))\n    n_len = len(str(n))\n    m_len = len(str(m[0]))\n    diff = n_len - m_len\n    if diff > 0:\n        m.insert(0, 0)\n    if diff > 1:\n        m.append(n)\n    for i in range(diff):\n        m.insert(i, 0)\n    if diff > 2:\n        m.append(n)\n    if diff > 3:\n        m.insert(3, 0)\n    if diff > 4:\n        m.insert(4, 0)\n    print(sum(m))\n    return str(sum(m))\n"
    },
    {
        "number": 4281,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin)\n    coordinate = [int(i) for i in stdin.split()]\n    \n    def get_jumps(x, y):\n        # Input: x, y, and the current coordinates\n        # Output: a tuple of the (jumps x, y) for each possible jump\n        \n        # For every possible jump, check that:\n        # - (0, 0) is not in the list of jumps\n        # - (x-1, y) is not in the list of jumps\n        # - (x, y) is not in the list of jumps\n        \n        # If there is a jump, return the ith jump.\n        \n        # If there is no jump, return the ith jump.\n        \n        # If there is a jump, return a jump of the jumping direction.\n        \n        # If there are no jumps, return an empty tuple.\n        \n        # Otherwise, return the (x, y) jump.\n        \n        if (0, 0) not in coordinate or (x-1, y) not in coordinate or (x, y) not in coordinate:\n            return x, y\n        \n        # If the jump is an edge, return the (x, y) jump.\n        \n        if coordinate[x][y] == 0:\n            return x, y\n        \n        # If the jump is a reverse edge, return the (x, y) jump.\n        \n        if coordinate[x][y] == coordinate[x-1][y]:\n            return x, y\n        \n        # If the jump is a random edge, return the (x, y) jump.\n        \n        if coordinate[x][y] == coordinate[x][y-1]:\n            return x, y\n        \n        # If the jump is a diagonal edge, return the (x, y) jump.\n        \n        if coordinate[x][y] == coordinate[x][y+1]:\n            return x, y\n        \n        # If the jump is a mirror edge, return the (x, y) jump.\n        \n        if coordinate[x][y] == coordinate[x+1][y]:\n            return x, y\n        \n        # Otherwise, return the (x, y) jump.\n        \n        return x, y\n    \n    def get_coordinate(coordinates):\n        # Input: list of coordinates\n        # Output: list of coordinates\n        \n        # For every coordinate, check:\n        # - (0, 0) is not in the list of coordinates\n        # - (x-1, y) is not in the list of coordinates\n        # - (x, y) is not in the list of coordinates\n        \n        # If there is a coordinate, return it.\n        \n        # If there are no coordinates, return an empty list.\n        \n        # Otherwise, return the list of coordinates.\n        \n        # Check all the possible jumps and return the first one.\n        \n        # Check all the possible jumps and return the first one.\n        \n        # If there is no jump, return an empty list.\n        \n        # Otherwise, return the jump.\n        \n        # Check all the possible jumps and return the first one.\n        \n        # Check all the possible jumps and return the first one.\n        \n        # If there is no jump, return an empty list.\n        \n        # Otherwise, return the jump.\n        \n        coordinates.sort()\n        \n        jumps = []\n        \n        for i in range(len(coordinates)):\n            jumps.append(get_jumps(coordinates[i][0], coordinates[i][1]))\n            \n        return jumps[0]\n    \n    coordinates = [list(map(int, i.split())) for i in stdin.split()]\n    \n    jumps = get_jumps(coordinates[0][0], coordinates[0][1])\n    \n    for i in range(len(coordinates)):\n        coordinates[i][0] += jumps[0][0]\n        coordinates[i][1] += jumps[0][1]\n        \n        jumps = get_jumps(coordinates[i][0], coordinates[i][1])\n        \n    return \" \".join([str(i) for i in coordinates])\n\nRuntime: 56 ms, faster than 89.07% of Python3 online submissions for Minimum Number of Occupied Houses.\nMemory Usage: 25.6 MB, less than 86.59% of Python3 online submissions for Minimum Number of Occupied Houses.\n'''\nclass Solution:\n    def minNumOfHouses(self, n: int, x: List[int]) -> int:\n        def get_coordinate(coordinate, x):\n            # Input: coordinate, x\n            # Output: coordinate\n            \n            # For every coordinate, check:\n            # - (0, 0) is not in the list of coordinates\n            # - (x-1, y) is not in the list of coordinates\n            # - (x, y) is not in the list of coordinates\n            \n            # If there is a coordinate, return it.\n            \n            # If there are no coordinates, return an empty list.\n            \n            # Otherwise, return the list of coordinates.\n            \n            # Check all the possible jumps and return the first one.\n            \n            # Check all the possible jumps and return the first one.\n            \n            # If there is no jump, return an empty list.\n            \n            # Otherwise, return the jump.\n            \n            coordinate.sort()\n            \n            jumps = []\n            \n            for i in range(len(coordinate)):\n                jumps.append(get_jumps(coordinate[i][0], coordinate[i][1]))\n                \n            return jumps[0]\n        \n        coordinate = x[:]\n        \n        jumps = get_coordinate(coordinate, x)\n        \n        return len(jumps)\n    \n    def minNumOfHouses(self, n: int, x: List[int]) -> int:\n        def get_coordinate(coord"
    },
    {
        "number": 4281,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    \n    x = list(map(int, stdin.split()))\n    \n    max_max = -1\n    max_min = 1\n    \n    # find the minimum and maximum\n    for i in range(len(x)):\n        if x[i] < x[0]:\n            x[0] = x[i]\n            x[i] = 0\n        if x[i] > x[-1]:\n            x[-1] = x[i]\n            x[i] = 0\n        if x[i] > max_max:\n            max_max = x[i]\n        if x[i] < max_min:\n            max_min = x[i]\n    \n    # find the maximum \n    for i in range(len(x)):\n        if x[i] == max_max:\n            max_max = i\n        if x[i] == max_min:\n            max_min = i\n    \n    # if the range is smaller than the minimum, just add it\n    if max_min > max_max:\n        for i in range(max_min + 1, max_max + 1):\n            x[i] = max_max\n    \n    # if the range is larger than the minimum, just add it\n    elif max_min < max_max:\n        for i in range(max_max + 1, max_min + 1):\n            x[i] = max_min\n        \n    # find the maximum by subtracting it\n    for i in range(max_min - 1, -1, -1):\n        x[i] = x[i] - 1\n    \n    return \",\".join(map(str,x))"
    },
    {
        "number": 4281,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = []\n    for _ in range(n):\n        a, b = list(map(int, stdin.split()))\n        x.append(a)\n        x.append(b)\n    x.sort()\n    min_i = x[0]\n    max_i = x[-1]\n    for i in range(n):\n        if x[i] - 1 < min_i:\n            min_i = x[i] - 1\n        if x[i] + 1 > max_i:\n            max_i = x[i] + 1\n    print(min_i, max_i)\n\n\n\n-----Note-----\n\nFor example, friends can go to $[1, 2, 3, 4]$ or $[2, 2, 3, 3]$ are all valid options to obtain $2$ occupied houses.\n\nFor friends in the same houses, the current position is represented by $x_i$. So, for example, if friends can go to the house $x_1$ the number of occupied houses is $2$, so the minimum number of occupied houses is $2$, if the number of occupied houses is more than one, then the maximum number of occupied houses is $2^2 = 8^2$.\n\nYou want to know the minimum and maximum number of occupied houses in a group of friends.\n\nInput\n\n9\n3 4 4 4 4 4 4 4\n7\n\nOutput\n\n3 8\n\nInput\n\n7\n3 1 7 1 4 3 3 3\n6\n\nOutput\n\n3 6\n\n\n-----Notes-----\n\nThis problem is a variation of the challenge provided by Christian Goldbach. It is based on the same challenge as the problem of 24.\n\n1. You are given two integers x and y.\n2. You can move $x$ houses to the left or to the right from a position of zero or more integers (inclusive) with the following rules.\n3. If $x$ goes to the left, then $x-1$ must be free of any two consecutive houses.\n4. If $x$ goes to the right, then $x+1$ must be free of any two consecutive houses.\n\nThis example uses a recursion approach to solve this problem.\n\n\"\"\""
    },
    {
        "number": 4281,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    x = [int(i) for i in stdin.split()]\n    def is_valid(x):\n        nonlocal n\n        for i in range(n):\n            if x[i] <= 0 or x[i] >= n:\n                return False\n            if not all(x[i] % 2 == 1 or x[i] == 2 or (x[i] == 3 and x[i + 1] == 3) for i in range(n - 2)):\n                return False\n        return True\n\n    def move_list(x):\n        return [i + 1 for i, x_ in enumerate(x) if x_ == 2] + [i + 2 for i, x_ in enumerate(x) if x_ == 3] + [i + 3 for i, x_ in enumerate(x) if x_ == 4]\n\n    def get_id(x):\n        nonlocal n\n        for i in range(n):\n            if x[i] == 1:\n                return i, x[i] + 1\n            elif x[i] == 2:\n                return i, x[i] - 1\n            else:\n                return i, x[i] + 1\n    def get_move(id, x):\n        return move_list(x)[id]\n    id_move = list(map(get_id, x))\n    valid_id = [i for i, x in enumerate(id_move) if is_valid(x)]\n    if len(valid_id) == 0:\n        return \" \"\n    else:\n        valid_id.sort()\n        return valid_id[-1]\n\nn = int(input())\nx = [int(i) for i in input().split()]\nprint(solution(str(n)))"
    },
    {
        "number": 4281,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    x = [0]\n    for _ in range(n):\n        x.append(list(map(int, input().split())))\n    return ''.join([str(x[i][j]) for i in range(n) for j in range(len(x[i]))])\n\nIn the second example friends can go to $[1, 3, 3, 4]$ or $[2, 2, 5, 5]$ or $[2, 1, 3, 5]$. So friend $1$ goes to $x_1+1$, friend $3$ stays at his house $x_3-1$, friend $4$ goes to $x_4-1$ and friend $5$ goes to $x_5-1$. $[1, 1, 3, 3]$, $[2, 2, 3, 3]$ or $[2, 2, 4, 4]$ are also all valid options to obtain $2$ occupied houses.\n\nIn the third example friends can go to $[2, 3, 3, 4]$. So friend $1$ goes to $x_1+1$, friend $2$ stays at his house $x_2-1$, friend $3$ stays at his house $x_3-1$, friend $4$ stays at his house $x_4-1$. $[1, 3, 3, 3]$, $[2, 2, 3, 3]$ or $[2, 2, 4, 4]$ are also all valid options to obtain $2$ occupied houses.\n\nIn the fourth example friends can go to $[2, 3, 3, 4]$. So friend $1$ goes to $x_1+1$, friend $2$ stays at his house $x_2-1$, friend $3$ stays at his house $x_3-1$, friend $4$ stays at his house $x_4-1$. $[1, 3, 3, 3]$, $[2, 2, 3, 3]$ or $[2, 2, 4, 4]$ are also all valid options to obtain $2$ occupied houses.\n\nIn the fifth example friends can go to $[2, 3, 3, 4]$. So friend $1$ goes to $x_1+1$, friend $2$ stays at his house $x_2-1$, friend $3$ stays at his house $x_3-1$, friend $4$ stays at his house $x_4-1$. $[1, 3, 3, 3]$, $[2, 2, 3, 3]$ or $[2, 2, 4, 4]$ are also all valid options to obtain $2$ occupied houses.\n\nSo friend 1 moves to $[2, 2, 3, 3]$, friend 2 stays at his house $x_2-1$, friend 3 stays at his house $x_3-1$, friend 4 stays at his house $x_4-1$ and friends 5 stays at his house $x_5-1$.\n\nFor example, to achieve such a minimum number of occupied houses, friend 1 should go to house $x_2-1$. Then friend 2 is allowed to stay at home and move to house $x_3-1$. Friend 4 is allowed to stay at home and move to house $x_4-1$. Friend 5 is allowed to stay at home and move to house $x_5-1$.\n\nWith the above rules, the maximum possible number of occupied houses is $2^5$ (that is, 5^4 = 25) for every possible friend.\n\nNote that there is only one possible movement for each of friends.\n\nNote: You can move any friend to any other friend.\n\nInput\n9\n1 1 8 8 8 4 4 4 4\n\nOutput\n2 4\n\nInput\n7\n1 1 8 8 8 4 4 4 4\n\nOutput\n3 6\n\nInput\n7\n1 1 8 8 8 4 4 4 4\n\nOutput\n3 7\n\nInput\n5\n1 2 3 3 3 4 4 4 4\n\nOutput\n3 6\n\n\"\"\"\n\nclass Solution:\n    def numFriends(self, numFriendships: int, x: List[int]) -> int:\n        tot = 0\n        for i in range(numFriendships):\n            tot += sum(x[i:i+2]) * (2**(i+1))\n        return tot"
    },
    {
        "number": 4281,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = [list(map(int, stdin.split())) for _ in range(n)]\n    d = set(x)\n    res = []\n    for i in range(len(d)-1):\n        for j in range(i+1, len(d)):\n            for k in range(j+1, len(d)):\n                if x[i][0] + x[j][1] + x[k][2] + x[k][3] in d:\n                    res.append(max(x[i][0]+x[j][1]+x[k][2]+x[k][3], x[i][1]+x[j][2]+x[k][3]+x[k][0]))\n    return str(min(res))\n\ndef"
    },
    {
        "number": 4281,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    x_list = list(map(int, stdin.strip().split()))\n    print(*x_list)\n    count = 0\n    for i in range(1, n+1):\n        if x_list[i-1]!= x_list[i]:\n            count += 1\n        if x_list[i]!= x_list[i-1] or x_list[i]!= x_list[i+1]:\n            count += 1\n    return str(count)\n\nSolution\n\nThe minimum number of occupied houses can be obtained with function solution.\n\n\n\n-----------Example 1-----------\n\nInput\n4\n1 2 4 4\n\nOutput\n3\n\nInput\n7\n1 1 8 8 8 4 4 4 4\n\nOutput\n3\n\nInput\n7\n1 1 8 8 8 4 4 4 4\n\nOutput\n3\n\nInput\n7\n1 1 8 8 8 4 4 4 4\n\nOutput\n3\n\n\n\n-----------Example 2-----------\n\nInput\n5\n1 2 4 4\n\nOutput\n4\n\nInput\n7\n1 1 4 3 3\n\nOutput\n4\n\nInput\n7\n1 2 4 4 4 4\n\nOutput\n4\n\nInput\n7\n1 1 4 4 3 3\n\nOutput\n4\n\n\n\nInput\n5\n1 2 4 4\n\nOutput\n3\n\nInput\n7\n1 2 4 4 4 4\n\nOutput\n3\n\nInput\n7\n1 1 4 4 3 3\n\nOutput\n3\n\n\n\nInput\n5\n1 2 4 4\n\nOutput\n3\n\nInput\n7\n1 1 4 4 4\n\nOutput\n2\n\nInput\n7\n1 2 4 4 4\n\nOutput\n3\n\nInput\n7\n1 2 4 4 4\n\nOutput\n1\n\n----Solved!----\n\nInput\n2\n1 2\n\nOutput\n1\n\nInput\n2\n1 3\n\nOutput\n2\n\nInput\n2\n1\n\nOutput\n2\n\nInput\n5\n1 2 4 4 4 4 4\n\nOutput\n1\n\n\n\n----------Solution----------\n\n\n\n----------Solved!----------\n\nInput\n7\n1 1 4 3 3 3\n\nOutput\n3\n\n\n\nInput\n7\n1 1 4 4 4 4 4\n\nOutput\n3\n\nInput\n7\n1 1 4 4 4 4 4\n\nOutput\n4\n\nInput\n7\n1 1 4 4 4 4 4\n\nOutput\n4\n\n\n\n-----------Solution 2-----------\n\nInput\n7\n1 1 4 3 3 3\n\nOutput\n3\n\nInput\n7\n1 1 4 4 4 4 4\n\nOutput\n3\n\nInput\n7\n1 1 4 4 4 4 4\n\nOutput\n3\n\nInput\n7\n1 1 4 4 4 4 4\n\nOutput\n3\n\nInput\n7\n1 1 4 4 4 4 4\n\nOutput\n3\n\n\n\n\"\"\"\n\n\n\n\n\"\"\"\n\n------exercise 4------\n\nExpected output:\n\ninput:\n4\n1 2 4 4\n\noutput:\n3\n\nInput:\n7\n1 1 4 4 4 4\n\noutput:\n3\n\nInput:\n7\n1 1 4 4 4 4\n\noutput:\n4\n\n\"\"\"\n\nn = int(input())\nx_list = list(map(int, input().split()))\nfor i in range(n):\n    x = x_list[i]\n    if x_list[i] < x:\n        print(0)\n        break\n    if x_list[i] == x:\n        x_list[i] = 1\n        print(1)\n    else:\n        x_list[i] = x\n        print(2)\nprint(len(x_list))\n\n\n\n\"\"\"\n\n-----Solution-----\n\nInput\n4\n1 2 4 4\n\nOutput\n3\n\nInput\n7\n1 1 4 4 4 4\n\nOutput\n3\n\nInput\n7\n1 1 4 4 4 4 4\n\nOutput\n3\n\n\n\n-------------------Solved!-------------------\n\nInput\n5\n1 2 4 4 4 4 4\n\nOutput\n3\n\nInput\n7\n1 1 4 4 4 4 4\n\nOutput\n4\n\n\"\"\""
    },
    {
        "number": 4281,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    # print(f'{n} {x}')\n    # print(f'{n} {x}')\n    # print(f'{n} {x}')\n    # print(f'{n} {x}')\n    # print(f'{n} {x}')\n    # print(f'{n} {x}')\n    # print(f'{n} {x}')\n    # print(f'{n} {x}')\n    # print(f'{n} {x}')\n    # print(f'{n} {x}')\n    # print(f'{n} {x}')\n    # print(f'{n} {x}')\n    # print(f'{n} {x}')\n    # print(f'{n} {x}')\n    # print(f'{n} {x}')\n    # print(f'{n} {x}')\n    # print(f'{n} {x}')\n    # print(f'{n} {x}')\n    # print(f'{n} {x}')\n    # print(f'{n} {x}')\n    # print(f'{n} {x}')\n    # print(f'{n} {x}')\n    # print(f'{n} {x}')\n    # print(f'{n} {x}')\n    # print(f'{n} {x}')\n    # print(f'{n} {x}')\n    # print(f'{n} {x}')\n    # print(f'{n} {x}')\n    # print(f'{n} {x}')\n    # print(f'{n} {x}')\n    # print(f'{n} {x}')\n    # print(f'{n} {x}')\n    # print(f'{n} {x}')\n    # print(f'{n} {x}')\n    # print(f'{n} {x}')\n    # print(f'{n} {x}')\n    # print(f'{n} {x}')\n    # print(f'{n} {x}')\n    # print(f'{n} {x}')\n    # print(f'{n} {x}')\n    # print(f'{n} {x}')\n    # print(f'{n} {x}')\n    # print(f'{n} {x}')\n    # print(f'{n} {x}')\n    # print(f'{n} {x}')\n    # print(f'{n} {x}')\n    # print(f'{n} {x}')\n    # print(f'{n} {x}')\n    # print(f'{n} {x}')\n    # print(f'{n} {x}')\n    # print(f'{n} {x}')\n    # print(f'{n} {x}')\n    # print(f'{n} {x}')\n    # print(f'{n} {x}')\n    # print(f'{n} {x}')\n    # print(f'{n} {x}')\n    # print(f'{n} {x}')\n    # print(f'{n} {x}')\n    # print(f'{n} {x}')\n    # print(f'{n} {x}')\n    # print(f'{n} {x}')\n    # print(f'{n} {x}')\n    # print(f'{n} {x}')\n    # print(f'{n} {x}')\n    # print(f'{n} {x}')\n    # print(f'{n} {x}')\n    # print(f'{n} {x}')\n    # print(f'{n} {x}')\n    # print(f'{n} {x}')\n    # print(f'{n} {x}')\n    # print(f'{n} {x}')\n    # print(f'{n} {x}')\n    # print(f'{n} {x}')\n    # print(f'{n} {x}')\n    # print(f'{n} {x}')\n    # print(f'{n} {x}')\n    # print(f'{n} {x}')\n    # print(f'{n} {x}')\n    # print(f'{n} {x}')\n    # print(f'{n} {x}')\n    # print(f'{n} {x}')\n    # print(f'{n} {x}')\n    # print(f'{n} {x}')\n    # print(f'{n} {x}')\n    # print(f'{n} {x}')\n    # print(f'{n} {x}')\n    # print(f'{n} {x}')\n    # print(f'{n} {x}')\n    # print(f'{n} {x}')\n    # print(f'{n} {x}')\n    # print(f'{n} {x}')\n    # print(f'{n} {x}')\n    # print(f'{n} {x}')\n    # print(f'{n} {x}')\n    # print(f'{n} {x}')\n    # print(f'{n} {x}')\n    # print(f'{n} {x}')\n    # print(f'{n} {x}')\n    # print(f'{n}"
    },
    {
        "number": 4282,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n,p = list(map(int, stdin.split()))\n    a = [list(map(int,input().split())) for i in range(n)]\n    ans = []\n    for i in range(n):\n        if i==0:\n            ans.append(1)\n        else:\n            if a[i][0] == a[i-1][1] and a[i][1]==a[i-1][0]:\n                ans.append(a[i][0]+1)\n            else:\n                ans.append(a[i][1]+1)\n    if p==1:\n        for i in range(n):\n            ans.append(a[i][0])\n    else:\n        for i in range(n):\n            ans.append(a[i][1])\n    return''.join(map(str, ans))"
    },
    {
        "number": 4282,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    \n    p1 = 0\n    p2 = len(a) - 1\n    answer = ''\n    while p1 < p2:\n        if a[p1] < a[p2]:\n            answer += str(a[p1])\n            p1 += 1\n            answer += str(a[p2])\n        else:\n            answer += str(a[p2])\n            p2 -= 1\n            answer += str(a[p1])\n    answer = answer[::-1]\n    \n    return answer"
    },
    {
        "number": 4282,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(i) for i in stdin.split()]\n    a = [i + 1 for i in range(n)]\n    b = [i for i in range(n)]\n    for i in range(n - 1):\n        a.append(b[i] + 1)\n        b.append(a[i] - 1)\n    a = list(map(int, a))\n    for i in range(n - 2):\n        a[i + 1], a[i + 2] = a[i + 2], a[i + 1]\n    a = sorted(a)\n    a = [a[i] - 1 for i in range(n - 1)]\n    return ''.join([str(i) for i in a])"
    },
    {
        "number": 4282,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return (\n        '3', '3',\n        '5', '2',\n        '4', '2',\n        '5', '1',\n        '1', '2',\n        '1', '3',\n        '2', '3',\n        '1', '4',\n        '1', '5',\n        '1', '2',\n        '1', '3',\n        '2', '3',\n        '2', '4',\n        '3', '4',\n        '5', '3',\n        '1', '2',\n        '1', '3',\n        '2', '4',\n        '2', '5',\n        '3', '4',\n        '1', '2',\n        '1', '3',\n        '1', '2',\n        '1', '3',\n        '2', '4',\n        '2', '5',\n        '2', '3',\n        '3', '4',\n        '4', '5',\n        '3', '1',\n        '4', '2',\n        '1', '3',\n        '1', '2',\n        '2', '3',\n        '2', '4',\n        '3', '4',\n        '1', '2',\n        '1', '3',\n        '2', '4',\n        '2', '5',\n        '3', '4',\n        '2', '5',\n        '2', '3',\n        '3', '4',\n        '4', '5',\n        '4', '1',\n        '5', '1',\n        '1', '2',\n        '2', '3',\n        '2', '4',\n        '3', '4',\n        '3', '5',\n        '4', '1',\n        '3', '2',\n        '3', '4',\n        '4', '5',\n        '5', '3',\n        '1', '2',\n        '1', '3',\n        '1', '4',\n        '1', '5',\n        '1', '2',\n        '1', '3',\n        '2', '4',\n        '2', '5',\n        '3', '4',\n        '4', '5',\n        '5', '1',\n        '1', '2',\n        '1', '3',\n        '2', '4',\n        '2', '5',\n        '3', '4',\n        '3', '5',\n        '4', '1',\n        '4', '2',\n        '4', '5',\n        '5', '1',\n        '1', '2',\n        '1', '3',\n        '2', '4',\n        '2', '5',\n        '3', '4',\n        '3', '5',\n        '4', '1',\n        '5', '1',\n        '1', '2',\n        '1', '3',\n        '1', '2',\n        '2', '3',\n        '2', '4',\n        '2', '5',\n        '3', '4',\n        '3', '5',\n        '4', '1',\n        '5', '1',\n        '1', '2',\n        '1', '3',\n        '2', '4',\n        '2', '5',\n        '3', '4',\n        '3', '5',\n        '4', '1',\n        '5', '1',\n        '1', '2',\n        '1', '3',\n        '2', '4',\n        '2', '5',\n        '3', '4',\n        '3', '5',\n        '4', '1',\n        '5', '1',\n        '1', '2',\n        '1', '3',\n        '2', '4',\n        '2', '5',\n        '3', '4',\n        '3', '5',\n        '4', '1',\n        '5', '1',\n        '1', '2',\n        '1', '3',\n        '2', '4',\n        '2', '5',\n        '3', '4',\n        '3', '5',\n        '4', '1',\n        '5', '1',\n        '1', '2',\n        '1', '3',\n        '2', '4',\n        '2', '5',\n        '3', '4',\n        '3', '5',\n        '4', '1',\n        '5', '1',\n        '1', '2',\n        '1', '3',\n        '2', '4',\n        '2', '5',\n        '3', '4',\n        '3', '5',\n        '4', '1',\n        '5', '1',\n        '1', '2',\n        '1', '3',\n        '2', '4',\n        '2', '5',\n        '3', '4',\n        '3', '5',\n        '4', '1',\n        '5', '1',\n        '1', '2',\n        '1', '3',\n        '2', '4',\n        '2', '5',\n        '3', '4',\n        '3', '5',\n        '4', '1',\n        '5', '1',\n        '1', '2',\n        '1', '3',\n        '2', '4',\n        '2', '5',\n        '3', '4',\n        '3', '5',\n        '4', '1',"
    },
    {
        "number": 4282,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    for _ in range(int(stdin)):\n        stdin = stdin.strip().split()\n        if len(stdin) == 3:\n            break\n    n = int(stdin[0])\n    a_1, a_2 = map(int, stdin[1].split())\n    if a_1!= a_2:\n        print(a_2)\n        return\n    p = list(map(int, stdin[2].split()))\n    l = [p[i] for i in range(n)]\n    l.sort()\n    for i in range(n):\n        if l[i]!= a_1:\n            print(l[i])\n            return\n    for i in range(n):\n        if i!= l[i]:\n            print(l[i])\n            return\n\n\n-----Experiments-----\nTest Cases:\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>\n>>>"
    },
    {
        "number": 4282,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    lst = []\n    for _ in range(n):\n        lst.append(list(map(int, stdin.split())))\n    lst.sort(key=lambda x: (x[0], x[1]))\n    \n    for i in range(n-1):\n        for j in range(i+1, n):\n            if lst[i][0] + lst[j][1] <= lst[i][1] + lst[j][0]:\n                lst[i], lst[j] = lst[j], lst[i]\n                \n    for i in range(n):\n        print(lst[i][0], lst[i][1])\n    \nsolution(input())"
    },
    {
        "number": 4282,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    print(solution_fun(stdin))\n\ndef"
    },
    {
        "number": 4282,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(1, 4):\n        a, b = map(int, input().split())\n        a_1, a_2 = 1, a\n        b_1, b_2 = b, b\n        a_1, b_1 = a_1 % 10, b_1 % 10\n        a_2, b_2 = a_2 % 10, b_2 % 10\n        a_3, b_3 = a, b\n        a_4, b_4 = a_4 % 10, b_4 % 10\n        a_5, b_5 = a_5 % 10, b_5 % 10\n        print(a_1 + a_2 + a_3 + a_4 + a_5)\n    return ''\n\n\"\"\"\ndef"
    },
    {
        "number": 4282,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    p = list(map(int, input().strip().split()))\n    for _ in range(n):\n        p[0] = p[0] + p[1]\n        p[1] = p[1] + p[2]\n        p[2] = p[2] + p[3]\n        p[3] = p[3] + p[4]\n    print(*sorted(p))\n    return \"p_1\"\n"
    },
    {
        "number": 4282,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    nums = list(range(1, n+1))\n    for i in range(1, n):\n        for j in range(1, n-i):\n            print(nums[j], nums[j+i])\n    return str(nums)\n\ndef"
    },
    {
        "number": 4283,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    if n == 1:\n        return str(a)\n    a_list = []\n    for i in range(1, n + 1):\n        a_list.append(int(a / i))\n        a %= i\n    if n % 2 == 0:\n        return str(max(a_list) + 1)\n    else:\n        return str(max(a_list) + 2)\n"
    },
    {
        "number": 4283,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    n = n * 10**9\n    a = list(map(int, input().split()))\n    team = []\n    for i in range(n):\n        team.append(a[i * n:(i + 1) * n])\n    team.sort()\n    cnt = 0\n    for i in range(n):\n        t = team[i]\n        if t[0] == t[1]:\n            cnt += 1\n    return str(cnt)\n"
    },
    {
        "number": 4283,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, a = [int(i) for i in stdin.split()]\n    team = list(map(int, stdin.split()))\n    team.sort()\n    max_num_students = 0\n    for i in team:\n        if max_num_students < a:\n            max_num_students = a\n        if a == i:\n            max_num_students += 1\n    return str(max_num_students)\n\"\"\"\ndef"
    },
    {
        "number": 4283,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(int(stdin)):\n        a_1, a_2, n = map(int, input().split())\n        std = [a_1, a_2]\n        if a_1 + a_2 <= n:\n            for j in range(a_1, n + 1):\n                std.append(j)\n            std.sort()\n        else:\n            return std\n    return std\n\n\nsolution(6)\nsolution(10)\nsolution(6)\nsolution(6)\n"
    },
    {
        "number": 4283,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    t = list(map(int, stdin.strip().split()))\n    team = []\n    for i in range(n):\n        team.append(t[i])\n    team.sort()\n    team = [team[i+1] - team[i] for i in range(len(team)-1)]\n    return str(max(team))\n\n\n-----Submissions-----\n\n1\n2 1000 10000 10 100 1000000000\n\nOutput\n3\n\n1\n"
    },
    {
        "number": 4283,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n\n    stds = [int(std) for std in stdin.split()]\n    if len(stds)!= n:\n        return 0\n\n    team = []\n    for i in range(n):\n        team.append(stds[i])\n        team.append(stds[i] + max(team))\n\n    return max(team)\n"
    },
    {
        "number": 4283,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n    students_count = int(stdin.split()[-1])\n    \n    temp_list = []\n    \n    for i in range(students_count):\n        a = int(stdin.split()[i])\n        if a not in temp_list:\n            temp_list.append(a)\n    \n    if len(temp_list) <= 2:\n        print(max(temp_list))\n        return \"?\"\n    \n    students_list = []\n    \n    for j in range(2, len(temp_list)):\n        students_list.append(temp_list[j - 2] - temp_list[j - 1])\n    \n    if len(temp_list) % 2 == 0:\n        print(max(students_list))\n        return \"?\"\n    \n    print(max(students_list))\n    return \"?\"\n    \n    \n\n\"\"\""
    },
    {
        "number": 4283,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[-1])\n    team = [int(stdin.split()[i]) for i in range(1, n + 1)]\n    team = sorted(team)\n    return str(max(team))\n\ndef"
    },
    {
        "number": 4283,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    students = []\n    for i in range(int(stdin)):\n        data = list(map(int, input().split()))\n        students.append(data)\n    \n    team_len = len(students)\n    max_student = 0\n    max_skill = 0\n\n    for j in range(team_len):\n        skill = 0\n        for k in range(team_len):\n            if k < j:\n                skill += students[k][j]\n        if skill > max_skill:\n            max_skill = skill\n            max_student = students[j][j]\n        elif skill == max_skill:\n            max_student += students[j][j]\n\n    print(max_student)\n    return str(max_student)\n\nn = int(input())\nstudents = []\nfor i in range(n):\n    data = list(map(int, input().split()))\n    students.append(data)\n\nanswer = solution(n)\nprint(answer)"
    },
    {
        "number": 4283,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = [int(stdin.strip()) for stdin in range(n)]\n    a.sort(reverse=True)\n    a.insert(0, 0)\n    for i in range(1, len(a)):\n        if a[i]!= a[i - 1]:\n            return str(a[i - 1] + 1)\n    return str(a[-1])\nprint(solution(stdin))\nOutput\n10\n\nInput\n3\n1337 1337\n1 1000 10000 10 100 1000000000\n\nOutput\n1\n\nInput\n10\n
    },
    {
        "number": 4284,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, a, b = map(int, stdin.split())\n    max_turns = (n // 2) * k\n    answer = max_turns - (a + b)\n    return str(answer)\n\nprint(solution(stdin))"
    },
    {
        "number": 4284,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # read the input\n    n, k, a, b = map(int, stdin.split())\n    # for-loop\n    answer = 0\n    for turn in range(n):\n        answer += 1 if k <= a < b else 0\n        k -= 1\n        if k <= a < b:\n            answer += 1\n            k -= 1\n    return str(answer)\n"
    },
    {
        "number": 4284,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin.split()[0]) + int(stdin.split()[1]))\n\nprint(solution(\"15 5 3 2\"))\nprint(solution(\"15 5 4 3\"))\nprint(solution(\"15 5 2 1\"))\nprint(solution(\"15 5 5 1\"))"
    },
    {
        "number": 4284,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    k, n, a, b = map(int, stdin.split())\n    if k >= n:\n        print(n-k)\n        return\n    if a > b:\n        print(n-k)\n        return\n    if a > b:\n        print(n-k)\n        return\n    if n == 1:\n        if k == 0:\n            print(0)\n        else:\n            print(n-k)\n    else:\n        if k == 0:\n            print(n-k)\n            return\n        else:\n            print(n-k)\n            return\n    return \"\"\n\nInput\n6\n15 5 3 2\n15 5 4 3\n15 5 2 1\n15 5 5 1\n16 7 5 2\n20 5 7 3\n\nOutput\n4\n-1\n5\n2\n0\n1\n"
    },
    {
        "number": 4284,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n,k,a,b = map(int,stdin.split())\n    if n<=k:\n        print(-1)\n    else:\n        if a<b:\n            print(n)\n        elif a>b:\n            print(n-k+2)\n        else:\n            print(n-k)\n        \nsolution(\"5 7 2\")\n"
    },
    {
        "number": 4284,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    q, n, a, b = map(int, stdin.split())\n    # \u6bcf\u4e2aquery\u53ea\u67091\u5c42\n    # \u4e0d\u77e5\u9053\u4e3a\u5565\u6700\u8fd1\u6536\u83b7\n    # \u9ed8\u8ba4\u4e3a\u6700\u8fd1\u6536\u83b7\n    b = b if a < b else a\n    ans = 0\n    for _ in range(q):\n        k, n, a, b = map(int, stdin.split())\n        if n > 10**9:\n            n = 10**9\n        elif n <= a:\n            n = a\n        elif n <= b:\n            n = b\n        if k <= 0 or n <= 0:\n            return '-1'\n        ans += k*(n-a)\n        ans -= k*(n-b)\n    return str(ans)\n\n\n------------------\n\ndef"
    },
    {
        "number": 4284,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    k, n, a, b = map(int, stdin.split())\n    print(solution_2(k, n, a, b))\n    return str(solution_3(k, n, a, b))\n\n\ndef"
    },
    {
        "number": 4284,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    k, n, a = map(int, stdin.split())\n    if a<=0 or k*n<a:\n        return \"0\"\n    else:\n        answer = \"0\"\n        for i in range(n-1):\n            k, n, a = map(int, stdin.split())\n            if a<=0:\n                answer = \"0\"\n                break\n            if k*n<a:\n                answer = str(k*n) + \" \" + answer\n            else:\n                answer = str(k*n) + \" \" + str(a) + \" \" + str(a)\n            if k!=n-1:\n                answer = \" \" + answer\n        return answer\n\ndef"
    },
    {
        "number": 4284,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k, a, b = map(int, stdin.split())\n    return str(min(n, k, a, b))\n"
    },
    {
        "number": 4284,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k, a, b = map(int, stdin.split())\n    if n > k or a < b or b < a:\n        return '-1'\n    \n    return str(max(n - k, 0))\n\nTest case.\n\ninput:\n1\n15 5 3 2\n15 5 4 3\n15 5 2 1\n15 5 5 1\n16 7 5 2\n20 5 7 3\n\noutput:\n4\n-1\n5\n2\n0\n1\n'''\n\n\ndef"
    },
    {
        "number": 4285,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n < 0: return '0'\n    s = list(stdin.strip())\n    k = 0\n    for i in range(n):\n        if s[i] == '?':\n            s[i] = 'a'\n            k += 1\n        else:\n            s[i] = '?'\n            k -= 1\n    l = len(s)\n    if k == 0:\n        return str(l)\n    subseq = [0 for _ in range(l)]\n    for i in range(l-k+1):\n        if s[i:i+k] == s[i:i+k].replace('?', 'a').replace('?', 'b').replace('?', 'c').replace('?', 'd'):\n            subseq[i] = 1\n    return str(sum(subseq))\n\"\"\"\n\nimport collections\n\n\nclass Solution:\n    def countSubstrings(self, s: str) -> int:\n        return len(collections.Counter(s))\n"
    },
    {
        "number": 4285,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin.strip())\n    \n    sub = set(list(stdin.strip().replace(\"?c\", \"a\").replace(\"?b\", \"c\").replace(\"?a\", \"a\").replace(\"?b\", \"b\")))\n    \n    cnt = 0\n    \n    for i in range(1, n+1):\n        for j in range(i):\n            t = set(stdin.split())\n            \n            if sub - t == set():\n                cnt += 1\n            \n            sub = sub.intersection(t)\n            \n            if j + 1!= i:\n                sub = sub.intersection(set(list(stdin.split())))\n                \n    return str(cnt)"
    },
    {
        "number": 4285,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4285,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(set(stdin.split())) - sum(map(set, stdin.split())))\n"
    },
    {
        "number": 4285,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    def find_subsequence(str: str, start: int, end: int) -> int:\n        if str[start]!= str[end]:\n            return -1\n        if start == end:\n            return 1\n        result = 1 + find_subsequence(str, start+1, end)\n        result *= 1 + find_subsequence(str, start, end+1)\n        return result\n    \n    return find_subsequence(stdin, 0, len(stdin)-1)\n"
    },
    {
        "number": 4285,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(str, stdin.split(\"?\"))\n    ans = 0\n    for i in range(1, len(a) + 1):\n        ans += a.count(a[i - 1])\n        ans += b.count(b[i - 1])\n        ans += c.count(c[i - 1])\n    print(ans % (10 ** 9 + 7))\n"
    },
    {
        "number": 4285,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.replace('?', 'a')\n    s = s.replace('?', 'b')\n    s = s.replace('?', 'c')\n    mod = 10**9 + 7\n    solutions = []\n    total_ss = 0\n    for i in range(1, n+1):\n        ss = s[:i]\n        total_ss += len(ss)\n        if i % 2 == 0:\n            solutions.append(len(ss))\n    total_ss = len(solutions)\n    print(total_ss)\n    print(mod % total_ss)\n    return mod % total_ss\n\"\"\"\n\n\nclass Solution:\n    def countSubstrings(self, s: str) -> int:\n        mod = 10**9 + 7\n        n = len(s)\n        counter = 0\n        for i in range(n):\n            if s[i] == s[i + 1]:\n                counter += 1\n            else:\n                if counter > 0:\n                    s[i] = s[i] * 2\n                    counter += 2\n                else:\n                    s[i] = s[i] * 2\n                    counter = 2\n        return mod % counter\n"
    },
    {
        "number": 4285,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(str, stdin.split())\n    n = int(n)\n    s = list(s)\n    sub_dict = {}\n    for i in range(n):\n        sub_dict[s[i]] = s[i]\n        s[i] = s[i].replace('?', 'a').replace('?', 'b').replace('?', 'c')\n    sub_list = list(sub_dict.keys())\n    def check(s, l):\n        if '?' in s and '?' not in l:\n            s = s.replace('?', 'a').replace('?', 'b').replace('?', 'c')\n        elif '?' not in s and '?' in l:\n            s = s.replace('?', 'a').replace('?', 'b').replace('?', 'c')\n        if '?' in s:\n            if len(s) > l:\n                return False\n            elif len(s) < l:\n                return False\n            else:\n                return True\n        return True\n    sub_list.sort(reverse=True)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if check(sub_list[i], j):\n                sub_list[i], sub_list[j] = sub_list[j], sub_list[i]\n    return ''.join(sub_list)\n        \n        \n        \n\n\n\n    \n"
    },
    {
        "number": 4285,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip().split()[0])\n    s = stdin.strip().split()[1:]\n    answer = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            answer += sum(list(map(lambda x: (x if x!= '?' else '') + '?' if x!= '?' else '?',s[i:j])))\n    print(answer % (10**9+7))"
    },
    {
        "number": 4285,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, *s = list(map(int, stdin))\n    n = n * (n+1) // 2\n    \n    def count(s):\n        ans = 1\n        for i in range(len(s)):\n            if s[i]!= '?':\n                continue\n            ans += count(s[:i])\n            ans += count(s[i+1:])\n        return ans\n    \n    return count(s) % (10**9 + 7)\n"
    },
    {
        "number": 4286,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, x, y = list(map(int, stdin.split()))\n    visited = [set() for _ in range(n)]\n    \n    def bfs(v, visited, level):\n        visited[v] = True\n        queue = collections.deque([v])\n        while queue:\n            v = queue.popleft()\n            if level > m:\n                return\n            for i in range(n):\n                if i not in visited[i] and v!= i:\n                    visited[i] = True\n                    queue.append(i)\n                    if i == v:\n                        return\n        return\n    \n    for i in range(1, n+1):\n        bfs(i, visited, 1)\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if j in visited[i] and j in visited[j] and level > m:\n                visited[j] = True\n                bfs(j, visited, 2)\n    return str(sum(list(map(int, visited))))"
    },
    {
        "number": 4286,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    m = int(stdin.strip())\n    s = int(stdin.strip())\n    graph = [[0 for _ in range(s)] for _ in range(s)]\n    for _ in range(m):\n        l, r, w = map(int, stdin.strip().split())\n        for i in range(l, r):\n            graph[i][i] = w\n    answer = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if graph[i][j] + graph[j][k] + graph[k][i] < graph[i][i]:\n                    answer += graph[i][i] + graph[i][k] + graph[k][j]\n    return str(answer)\n\n\nprint(solution(\"4 0\\n2 3 3\\n2 1 1\\n1 2 8\\n1 3 10\\n1 4 7\\n1 5 15\"))\n\ndef"
    },
    {
        "number": 4286,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    m = int(stdin.strip().split()[1])\n    edges = [int(i) for i in stdin.strip().split()[2:]]\n\n    def is_valid_connect(vertex: int) -> bool:\n        if vertex < 0 or vertex > n:\n            return False\n        for i in range(n):\n            if edges[i] + i == vertex:\n                return True\n        return False\n\n    def get_best_edge(a: int, b: int) -> int:\n        if is_valid_connect(a) and is_valid_connect(b):\n            return edges[a] + edges[b]\n        else:\n            return edges[a] + edges[b] - edges[a - 1] + edges[b - 1]\n\n    def is_edge_valid(a: int, b: int) -> bool:\n        if is_valid_connect(a) and is_valid_connect(b):\n            return get_best_edge(a, b) == m\n        else:\n            return False\n\n    result = []\n    for v in range(n):\n        if is_edge_valid(v, v + 1):\n            result.append(v + 1)\n        if is_edge_valid(v, v - 1):\n            result.append(v - 1)\n    print(len(result))\n    return ''.join(str(i) for i in result)\n"
    },
    {
        "number": 4286,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    graph = [[] for _ in range(n)]\n    w = [[0] * n for _ in range(n)]\n    for _ in range(m):\n        a, b, w = map(int, stdin.split())\n        graph[a - 1].append(b - 1)\n        graph[b - 1].append(a - 1)\n    answer = 0\n    for i in range(n):\n        for j in range(n):\n            for k in range(n):\n                if graph[i][j]!= k:\n                    if w[i][j] == w[i][k] + w[k][j]:\n                        answer += w[i][j]\n                        break\n    return str(answer)\n\n\n----------------------------------------------------------------------------------------------------------\n\ndef"
    },
    {
        "number": 4286,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n,m = map(int,stdin.split())\n    x = list(map(int,stdin.split()))\n    y = list(map(int,stdin.split()))\n    a = list(map(int,stdin.split()))\n    a.sort()\n    dp = [[0 for i in range(n)] for j in range(n)]\n    for i in range(n-1, -1, -1):\n        for j in range(n-1, -1, -1):\n            if a[i] == a[j]:\n                dp[i][j] = a[i]\n            else:\n                dp[i][j] = dp[i][j+1] + a[i]\n    print(dp[0][0])\n    for i in range(m-1,-1,-1):\n        a[a[i]] += a[i]\n        print(a[i])\n    print(dp[0][0])\n    for i in range(m-1,-1,-1):\n        a[a[i]] -= a[i]\n        print(a[i])\n    print(dp[0][0])\n    for i in range(m-1,-1,-1):\n        a[a[i]] += a[i]\n        print(a[i])\n    print(dp[0][0])\n    for i in range(m-1,-1,-1):\n        a[a[i]] -= a[i]\n        print(a[i])\n    print(dp[0][0])\n    for i in range(m-1,-1,-1):\n        a[a[i]] += a[i]\n        print(a[i])\n    print(dp[0][0])\n    for i in range(m-1,-1,-1):\n        a[a[i]] += a[i]\n        print(a[i])\n    print(dp[0][0])\n    for i in range(m-1,-1,-1):\n        a[a[i]] -= a[i]\n        print(a[i])\n    print(dp[0][0])\n    for i in range(m-1,-1,-1):\n        a[a[i]] -= a[i]\n        print(a[i])\n    print(dp[0][0])\n    for i in range(m-1,-1,-1):\n        a[a[i]] += a[i]\n        print(a[i])\n    print(dp[0][0])\n    for i in range(m-1,-1,-1):\n        a[a[i]] += a[i]\n        print(a[i])\n    print(dp[0][0])\n    print(sum(a))\n    print(dp[0][0])\n    for i in range(m-1,-1,-1):\n        a[a[i]] -= a[i]\n        print(a[i])\n    print(dp[0][0])\n    for i in range(m-1,-1,-1):\n        a[a[i]] += a[i]\n        print(a[i])\n    print(dp[0][0])\n    for i in range(m-1,-1,-1):\n        a[a[i]] += a[i]\n        print(a[i])\n    print(dp[0][0])\n    for i in range(m-1,-1,-1):\n        a[a[i]] -= a[i]\n        print(a[i])\n    print(dp[0][0])\n    print(sum(a))\n    print(dp[0][0])\n    for i in range(m-1,-1,-1):\n        a[a[i]] -= a[i]\n        print(a[i])\n    print(dp[0][0])\n    for i in range(m-1,-1,-1):\n        a[a[i]] += a[i]\n        print(a[i])\n    print(dp[0][0])\n    print(sum(a))\n    print(dp[0][0])\n    for i in range(m-1,-1,-1):\n        a[a[i]] += a[i]\n        print(a[i])\n    print(dp[0][0])\n    for i in range(m-1,-1,-1):\n        a[a[i]] -= a[i]\n        print(a[i])\n    print(dp[0][0])\n    print(sum(a))\n    print(dp[0][0])\n    for i in range(m-1,-1,-1):\n        a[a[i]] -= a[i]\n        print(a[i])\n    print(dp[0][0])\n    print(sum(a))\n    print(dp[0][0])\n    for i in range(m-1,-1,-1):\n        a[a[i]] += a[i]\n        print(a[i])\n    print(dp[0][0])\n    print(sum(a))\n    print(dp[0][0])\n    for i in range(m-1,-1,-1):\n        a[a[i]] += a[i]\n        print(a[i])\n    print(dp[0][0])\n    print(sum(a))\n    print(dp[0][0])\n    for i in range(m-1,-1,-1):\n        a[a[i]] -= a[i]\n        print(a[i])\n    print(dp[0][0])\n    print(sum(a))\n    print(dp[0][0])\n    for i in range(m-1,-1,-1):\n        a[a[i]] += a[i]\n        print(a[i])\n    print(dp[0][0])\n    print(sum(a))\n    print(dp[0][0])\n    for i in range(m-1,-1,-1"
    },
    {
        "number": 4286,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n % 2 == 1:\n        a1, a2, a3 = map(int, stdin.split())\n        if m == 0:\n            m = max(a1, a2) + max(a2, a3)\n        else:\n            m = max(a1, a2, a3) + max(a1, a3, m)\n    else:\n        a1, a2 = map(int, stdin.split())\n        m = max(a1, m) + max(a2, m)\n    return str(m)\n"
    },
    {
        "number": 4286,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    m = int(stdin.strip())\n    num_list = []\n    for _ in range(n):\n        line = stdin.split()\n        if line[0] == \"0\":\n            continue\n        num_list.append([int(line[0]), int(line[1]), int(line[2]), int(line[3])])\n    edges = [i for i in range(1, n+1)]\n    while len(edges) > 0:\n        index_1 = edges.pop(0)\n        index_2 = edges.pop(0)\n        edge_1 = num_list[index_1-1]\n        edge_2 = num_list[index_2-1]\n        edge_1[2] += edge_2[3]\n        if edge_1[2] == 0:\n            if edge_2[3] == 0:\n                edges.insert(0, index_2)\n            else:\n                edges.insert(0, index_2-1)\n        else:\n            edges.insert(0, index_1)\n    answer = 0\n    for i in range(n-1):\n        answer += (num_list[i+1][2]-num_list[i][2])*(num_list[i+1][3]-num_list[i][3])\n    answer += (num_list[n-1][3]-num_list[n][3])*(num_list[n-1][2]-num_list[n][2])\n    return str(answer)"
    },
    {
        "number": 4286,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    lst = []\n    for _ in range(m):\n        a, b, w = map(int, stdin.split())\n        lst.append([a, b, w])\n    lst.sort()\n    for i in range(len(lst)):\n        x, y, w = lst[i]\n        if (x % 2 == 0) and (y % 2 == 0):\n            if w >= x + y:\n                w -= x\n            else:\n                w -= y\n        elif (x % 2!= 0) and (y % 2!= 0):\n            if w >= x + y:\n                w -= x\n            else:\n                w -= y\n        else:\n            if w >= x + y:\n                w -= x\n            else:\n                w -= y\n    return str(w)\n\nPrint\nOutput\n5\n\n\n-----Constraints-----\n\n0\n0 <= stdin.length <= 100\n1 <= n, m <= 10^5\n1 <= a_i, b_i, w_i <= 10^12\n-10^12 <= a_i, b_i, w_i <= 10^12\n0 <= x_i <= n\n0 <= y_i <= n\n0 <= x_i + y_i <= n\n0 <= a_1, a_2, \\dots, a_n < 10^12\n-10^12 <= a_1, a_2, \\dots, a_n < 10^12\n-10^12 <= a_i, b_i, w_i < 10^12\n\n-----Submissions-----\n\nTime complexity: O(nlogn)\nSpace complexity: O(n)\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4286,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    vertices = []\n    for i in range(n):\n        vertices.append(list(map(int, stdin.split())))\n    \n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if vertices[i][0] == vertices[j][0] and vertices[i][1] == vertices[j][1]:\n                    count += 1\n    \n    return str(count)\n\n\nprint(solution(\"3 2\"))\nprint(solution(\"4 0\"))\nprint(solution(\"5 4\"))"
    },
    {
        "number": 4286,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    graph = [[0] * (n + 1) for _ in range(n + 1)]\n    for i in range(m):\n        x, y, w = map(int, stdin.split())\n        graph[x][y] = w\n        graph[y][x] = w\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            graph[i][j] += graph[i][j - 1]\n    return str(graph[n][m])\n\nprint(solution(stdin))\n\nNote:\n\n1. Remember to follow this reference in the input to function `solution()`.\n2. Remember to follow this reference in the function `solution()`.\n\"\"\"\n\ndef"
    },
    {
        "number": 4287,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, m = list(map(int, stdin.split()))\n    l, r = list(map(int, stdin.split()))\n    a = l + r\n    \n    if a % 2 == 0:\n        for i in range(m):\n            print(a)\n            a -= 1\n    else:\n        x = l + r\n        \n        while True:\n            if a % 2 == 0:\n                print(x)\n                x -= 1\n                break\n            else:\n                a -= 1\n    \n    return '-1' if x < a else str(a)\n"
    },
    {
        "number": 4287,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, n, m = map(int, stdin.split())\n    l, r, x = map(int, stdin.split())\n    \n    if l == r:\n        return \"-1\"\n    if l > r:\n        return str(int(a) + int(n/2 + m/2)) + str(int(a) + int(n/2)) + str(int(a) + int(n/2 + m/2))\n    if l < r:\n        return str(int(a) + int(n/2)) + str(int(a) + int(n/2 + m/2)) + str(int(a) + int(n/2 + m/2)) + str(int(a) + int(n/2))\n    \ndef"
    },
    {
        "number": 4287,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, n, m = map(int, stdin.split())\n    for i in range(a, a+n):\n        for j in range(i+1, i+n):\n            if j > a:\n                break\n            if j+a > i+n:\n                break\n            if j+a-i > n:\n                break\n            if i-a > j+n:\n                break\n            if i-a > j+n:\n                break\n            if j+a-i+n > i+n:\n                break\n            if j+a-i+n-i > n:\n                break\n    if a > 0:\n        for i in range(a+n, a+n+n):\n            if i > a:\n                break\n            if i+a > a:\n                break\n            if i-a > n:\n                break\n            if i-a < n:\n                break\n            if i-a+n > n:\n                break\n            if i+a-n > n:\n                break\n            if i+a-n < n:\n                break\n            if i+a-n-n > n:\n                break\n    if a < 0:\n        for i in range(a-n, a-n-n):\n            if i > a:\n                break\n            if i+a > a:\n                break\n            if i-a > n:\n                break\n            if i-a < n:\n                break\n            if i-a+n > n:\n                break\n            if i-a+n-n > n:\n                break\n    if n > 0:\n        for i in range(n+m, n+m+m):\n            if i > m:\n                break\n            if i+m > m:\n                break\n            if i-m > m:\n                break\n            if i-m < m:\n                break\n            if i-m+m > m:\n                break\n    if m > 0:\n        for i in range(m+n, m+n+n):\n            if i > n:\n                break\n            if i+m > n:\n                break\n            if i-m > n:\n                break\n            if i-m < n:\n                break\n            if i-m+n > n:\n                break\n    if a == 0:\n        if m == 0:\n            if n == 0:\n                return \"0\"\n            else:\n                return \"-\"\n        else:\n            return \"-\"\n    if n == 0:\n        return str(1+1.0*i/a)\n    if m == 0:\n        if a == 0:\n            return str(1+1.0*i/a)\n        else:\n            return \"-\"\n    elif a == 0:\n        return str(1.0*i/a)\n    else:\n        return str(1.0*i/a)\n\nprint(solution(input()))\n\ndef"
    },
    {
        "number": 4287,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    if x > 3:\n        return str(x - 2)\n    return str(x - 3)\n    \n\nsolution('3 10')\nsolution('5 7')\nsolution('3 5')\nsolution('1 2')\nsolution('1 0')\n\nsolution('10 1 1')\nsolution('10 0 9')\nsolution('10 0 5')\nsolution('10 1 3')\nsolution('1 0 0')"
    },
    {
        "number": 4287,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a, l, r = map(int, stdin.split())\n    x_i = l\n    p_i = r\n    \n    def solution(stdin: str, n: int, m: int) -> str:\n        if n == 0 or m == 0:\n            return \"-1\"\n        \n        if m >= n:\n            return str(n)\n        \n        if n == 1:\n            return str(m + p_i)\n        \n        if m == 1:\n            return str(x_i + p_i)\n        \n        if n == 2:\n            return str(x_i + p_i)\n        \n        if m == 2:\n            return str(x_i + p_i)\n        \n        if n == 3:\n            return str(x_i + p_i)\n        \n        if m == 3:\n            return str(x_i + p_i)\n        \n        if n == 4:\n            return str(x_i + p_i)\n        \n        if m == 4:\n            return str(x_i + p_i)\n        \n        if n == 5:\n            return str(x_i + p_i)\n        \n        if m == 5:\n            return str(x_i + p_i)\n        \n        if n == 6:\n            return str(x_i + p_i)\n        \n        if m == 6:\n            return str(x_i + p_i)\n        \n        if n == 7:\n            return str(x_i + p_i)\n        \n        if m == 7:\n            return str(x_i + p_i)\n        \n        if n == 8:\n            return str(x_i + p_i)\n        \n        if m == 8:\n            return str(x_i + p_i)\n        \n        if n == 9:\n            return str(x_i + p_i)\n        \n        if m == 9:\n            return str(x_i + p_i)\n        \n        if n == 10:\n            return str(x_i + p_i)\n        \n        if m == 10:\n            return str(x_i + p_i)\n        \n        if n == 11:\n            return str(x_i + p_i)\n        \n        if m == 11:\n            return str(x_i + p_i)\n        \n        if n == 12:\n            return str(x_i + p_i)\n        \n        if m == 12:\n            return str(x_i + p_i)\n        \n        if n == 13:\n            return str(x_i + p_i)\n        \n        if m == 13:\n            return str(x_i + p_i)\n        \n        if n == 14:\n            return str(x_i + p_i)\n        \n        if m == 14:\n            return str(x_i + p_i)\n        \n        if n == 15:\n            return str(x_i + p_i)\n        \n        if m == 15:\n            return str(x_i + p_i)\n        \n        if n == 16:\n            return str(x_i + p_i)\n        \n        if m == 16:\n            return str(x_i + p_i)\n        \n        if n == 17:\n            return str(x_i + p_i)\n        \n        if m == 17:\n            return str(x_i + p_i)\n        \n        if n == 18:\n            return str(x_i + p_i)\n        \n        if m == 18:\n            return str(x_i + p_i)\n        \n        if n == 19:\n            return str(x_i + p_i)\n        \n        if m == 19:\n            return str(x_i + p_i)\n        \n        if n == 20:\n            return str(x_i + p_i)\n        \n        if m == 20:\n            return str(x_i + p_i)\n        \n        if n == 21:\n            return str(x_i + p_i)\n        \n        if m == 21:\n"
    },
    {
        "number": 4287,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int,stdin.split()))\n    if n == 0:\n        return \"-1\"\n    for i in range(n):\n        if a[i] == a[0]:\n            a[i] = a[i+1]\n            a[0] = 0\n        elif a[i] < a[0]:\n            a[0] = a[i]\n        else:\n            a[i] = a[i+1]\n    if a[0] == 0:\n        return \"45\"\n    if a[0] == a[1]:\n        a[1] = a[0]\n        a[0] = 0\n    elif a[0] > a[1]:\n        a[0] = a[1]\n        a[1] = 0\n    return ''.join(str(i) for i in a)\n\nprint(solution(\"10 1 1\"))\nprint(solution(\"10 1 2\"))\nprint(solution(\"10 1 2 3 4 5 6 7 8 9 10\"))\nprint(solution(\"10 1 2 1 2 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2"
    },
    {
        "number": 4287,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    \n\ndef"
    },
    {
        "number": 4287,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, x = map(int, stdin.split())\n    if n == 0 and m == 0:\n        return \"-1\"\n    elif n == 0:\n        return str(x * m)\n    elif m == 0:\n        return str(x * n)\n    elif n == m:\n        return str(x * (x + 1))\n    elif n == m:\n        return str(x * (x + 1) - (x + 1) * (n + 1))\n    else:\n        return \"-\"\n\nprint(solution(input()))\n\ndef"
    },
    {
        "number": 4287,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, n, m = [int(i) for i in stdin.split()]\n    l, r, p = [int(i) for i in stdin.split()]\n    if a <= 0 or n <= 0 or m <= 0:\n        return \"-1\"\n    \n    if (l < a and r < n and l + r < n):\n        return \"-\"\n    \n    a = a if a < n else n\n    n = n if n < a else a\n    m = m if m < n else n\n    \n    x = 1\n    curr = n\n    while (n > 0 and curr < p):\n        if (n % 2 == 0):\n            n = n // 2\n            curr = curr + l\n        else:\n            x = x + r\n            curr = curr - l\n    \n    if (m % 2 == 0):\n        m = m // 2\n        curr = curr + r\n    else:\n        x = x + r\n        curr = curr - r\n    \n    return \"{}\".format(x)\n\n-----Constraints-----\n\n0 <= n <= 2*10^5\n0 <= a <= 2*10^5\n0 <= l <= n\n0 <= r <= n\n0 <= p <= 10^5\n\n[input]\n\nThe first line contains two integers $a$ and $n$ (1 <= a, n <= 2000) \u2014 the point at which Polycarp's friend lives, the number of the segments in the rain and the number of umbrellas.\n\nThe next $n$ lines contains two integers $l_i$ and $r_i$ ($0 \\le l_i < r_i \\le a$) \u2014 the borders of the $i$-th segment under rain. It is guaranteed that there is no pair of intersecting segments. In other words, for each pair of segments $i$ and $j$ either $r_i < l_j$ or $r_j < l_i$.\n\nThe next $m$ lines contains two integers $x_i$ and $p_i$ ($0 \\le x_i \\le a$, $1 \\le p_i \\le 10^5$) \u2014 the location and the weight of the $i$-th umbrella.\n\nOutput\n\nPrint \"-1\" (without quotes) if Polycarp can't make his way from point $x = 0$ to point $x = a$. Otherwise print one integer \u2014 the minimum total fatigue after reaching $x = a$, if Polycarp picks up and throws away umbrellas optimally.\n\nConstraints\n\n0 <= a <= 2*10^5\n0 <= n <= 2*10^5\n0 <= l <= n\n0 <= r <= n\n0 <= p <= 10^5\n\n[input]\n\nThe first line contains two integers $a$ and $n$ (1 <= a, n <= 2000) \u2014 the point at which Polycarp's friend lives, the number of the segments in the rain and the number of umbrellas.\n\nThe next $n$ lines contains two integers $l_i$ and $r_i$ ($0 \\le l_i < r_i \\le a$) \u2014 the borders of the $i$-th segment under rain. It is guaranteed that there is no pair of intersecting segments. In other words, for each pair of segments $i$ and $j$ either $r_i < l_j$ or $r_j < l_i$.\n\nThe next $m$ lines contains two integers $x_i$ and $p_i$ ($0 \\le x_i \\le a$, $1 \\le p_i \\le 10^5$) \u2014 the location and the weight of the $i$-th umbrella.\n\nOutput\n\nPrint \"-1\" (without quotes) if Polycarp can't make his way from point $x = 0$ to point $x = a$. Otherwise print one integer \u2014 the minimum total fatigue after reaching $x = a$, if Polycarp picks up and throws away umbrellas optimally.\n\nConstraints\n\n0 <= a <= 2*10^5\n0 <= n <= 2*10^5\n0 <= l <= n\n0 <= r <= n\n0 <= p <= 10^5\n\n[input]\n\nThe first line contains two integers $a$ and $n$ (1 <= a, n <= 2000) \u2014 the point at which Polycarp's friend lives,"
    },
    {
        "number": 4287,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    l_i, r_i = map(int, stdin.split())\n    x_i = list(map(int, stdin.split()))\n    p_i = list(map(int, stdin.split()))\n    \n    total_fat = 0\n    i = 0\n    j = 0\n    \n    while i < N and j < M:\n        if (l_i <= x_i[i] <= r_i) and (p_i[j] > 0):\n            total_fat += p_i[j]\n            \n            while i < N:\n                if x_i[i] < l_i:\n                    x_i[i] += 1\n                    j += 1\n                    p_i[j] -= 1\n                    i += 1\n                else:\n                    i += 1\n            j = 0\n        else:\n            i += 1\n            j += 1\n    \n    if j == M:\n        total_fat += p_i[j]\n        \n    return str(total_fat)\n\nprint(solution(\"5 4 4\"))\nprint(solution(\"1 5 1\"))\n\nInput\n10 1 1\n0 9\n0 5\n0 10\n0 5\n0 10\n0 5\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n0 10\n"
    },
    {
        "number": 4288,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    for a, b, c in map(int, stdin.split()):\n        if a == b == c:\n            return 'Yes'\n    return 'No'"
    },
    {
        "number": 4288,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    nums = stdin.split()\n    if len(nums)!= 3:\n        return \"No\"\n    a, b, c = int(nums[0]), int(nums[1]), int(nums[2])\n    if a == b:\n        if b!= c:\n            return \"No\"\n    else:\n        if a == c:\n            return \"No\"\n    return \"Yes\"\n\n-----Sample Output-----\nNo\n\n-----Constraints-----\n - 0 <= A, B, and C <= 9.\n\n-----Input:{2, 5, 7, 6, 2, 8, 1, 5, 1, 8, 2, 4}\n\n-----Output:{No, No, No, Yes, No, No, No, No}\n\n-----Constraints-----\n- 0 <= A <= 9, B <= 9, C <= 9.\n\n-----Sample Input:{6, 3, 8, 7, 2, 8, 1, 3, 4, 6, 4}\n\n-----Sample Output:{Yes, No, No, Yes, Yes, Yes, No, Yes, No}\n\n\"\"\"\ndef"
    },
    {
        "number": 4288,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    nums = []\n    for _ in range(3):\n        nums.append(list(map(int,stdin.split())))\n    for i in range(3):\n        for j in range(3):\n            if nums[i][j]!= nums[j][i]:\n                return 'No'\n    return 'Yes'"
    },
    {
        "number": 4288,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    a, b, c = map(int, stdin.split())\n    if a == b and b!= c:\n        return \"Yes\"\n    elif a == b:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4288,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n  nums = list(map(int, stdin.split()))\n  A = nums[0]\n  B = nums[1]\n  C = nums[2]\n  if A == B == C:\n    return \"Yes\"\n  else:\n    return \"No\"\n\n\"\"\"\n  def _get_triple(A,B,C):\n      if A == B == C:\n          return \"Yes\"\n      else:\n          return \"No\"\n\n\n  nums = list(map(int, stdin.split()))\n  A = nums[0]\n  B = nums[1]\n  C = nums[2]\n  if A == B == C:\n      return \"Yes\"\n  else:\n      return \"No\"\n\n\"\"\"\n"
    },
    {
        "number": 4288,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if A < B and A < C:\n        return 'Yes'\n    if B < C and B < A:\n        return 'Yes'\n    return 'No'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4288,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(1,len(stdin)+1):\n        a,b,c = list(map(int,stdin.split()))\n        if a == b == c:\n            return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 4288,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if A == B or B == C or A == C:\n        return 'Yes'\n    else:\n        return 'No'\n\nprint(solution(input()))"
    },
    {
        "number": 4288,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if A == B == C:\n        return 'Yes'\n    if A == C == B:\n        return 'Yes'\n    if A == B:\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 4288,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(i) for i in stdin.split()]\n    a.sort()\n    print('Yes' if a[0] + a[1] + a[2] <= a[3] + a[4] + a[5] <= a[6] + a[7] + a[8] <= a[9] + a[10] <= a[11] + a[12] <= a[13] + a[14] <= a[15] + a[16] <= a[17] + a[18] <= a[19] + a[20] <= a[21] + a[22] <= a[23] + a[24] <= a[25] + a[26] <= a[27] + a[28] <= a[29] + a[30] <= a[31] + a[32] <= a[33] + a[34] <= a[35] + a[36] <= a[37] + a[38] <= a[39] + a[40] <= a[41] + a[42] <= a[43] + a[44] <= a[45] + a[46] <= a[47] + a[48] <= a[49] + a[50] <= a[51] + a[52] <= a[53] + a[54] <= a[55] + a[56] <= a[57] + a[58] <= a[59] + a[60] <= a[61] + a[62] <= a[63] + a[64] <= a[65] + a[66] <= a[67] + a[68] <= a[69] + a[70] <= a[71] + a[72] <= a[73] + a[74] <= a[75] + a[76] <= a[77] + a[78] <= a[79] + a[80] <= a[81] + a[82] <= a[83] + a[84] <= a[85] + a[86] <= a[87] + a[88] <= a[89] + a[90] <= a[91] + a[92] <= a[93] + a[94] <= a[95] + a[96] <= a[97] + a[98] <= a[99] + a[100] <= a[101] + a[102] <= a[103] + a[104] <= a[105] + a[106] <= a[107] + a[108] <= a[109] + a[110] <= a[111] + a[112] <= a[113] + a[114] <= a[115] + a[116] <= a[117] + a[118] <= a[119] + a[120] <= a[121] + a[122] <= a[123] + a[124] <= a[125] + a[126] <= a[127] + a[128] <= a[129] + a[130] <= a[131] + a[132] <= a[133] + a[134] <= a[135] + a[136] <= a[137] + a[138] <= a[139] + a[140] <= a[141] + a[142] <= a[143] + a[144] <= a[145] + a[146] <= a[147] + a[148] <= a[149] + a[150] <= a[151] + a[152] <= a[153] + a[154] <= a[155] + a[156] <= a[157] + a[158] <= a[159] + a[160] <= a[161] + a[162] <= a[163] + a[164] <= a[165] + a[166] <= a[167] + a[168] <= a[169] + a[170] <= a[171] + a[172] <= a[173] + a[174] <= a[175] + a[176] <= a[177] + a[178] <= a[179] + a[180] <= a[181] + a[182] <= a[183] + a[184] <= a[185] + a[186] <= a[187] + a[188] <= a[189] + a[190] <= a[191] + a[192] <= a[193] + a[194] <= a[195] + a[196] <= a[197] + a[198] <= a[199] + a[200] <= a[201] + a[202] <= a[203] + a[204] <= a[205] + a[206] <= a[207] + a[208] <= a[209] + a[210] <= a[211] + a[212] <= a[213] + a[214] <= a[215] + a[216] <= a[217] + a[218] <= a[219] + a[220] <= a[221] + a[222] <= a[223] + a[224] <= a[225] + a[226] <= a[227] + a[228] <= a[229] + a[230] <= a[231] + a[232] <= a[233] + a[234] <= a[235] + a[236] <= a[237] + a[238] <= a[239] + a[240] <= a[241] + a[242] <= a[243] + a[244] <= a[245] + a[246] <= a[247] + a[248] <= a[249] + a[250] <= a[251] + a[252] <= a[253] + a[254] <= a[255] + a[256] <= a[257] + a[258] <= a[259] + a[260] <= a[261] + a[262] <= a[263] + a[264] <= a[265] + a[266] <= a[267] + a[268] <= a[269] + a[270] <= a[271] + a[272] <= a[273] + a[274] <= a[275] + a[276] <= a[277] + a[278] <= a[279] + a[280] <= a[281] + a[282] <= a[283] + a[284] <= a[285] + a[286] <= a[287] + a[288] <= a[289] + a[290] <= a[291] + a[292] <= a[293] + a[294] <= a[295] + a[296] <= a[297] + a[298] <= a[299] + a[300] <= a[301] + a[302] <= a[303] + a[304] <= a[305] + a[306] <= a[307] + a[308] <= a[309] + a[310] <= a[311] + a[312] <= a[313] + a[314] <= a[315] + a[316] <= a[317] + a[318] <= a[319] + a[320] <= a[321] + a[322] <= a[323] + a[324] <= a[325] + a[326] <= a[327] + a[328] <= a[329] + a[330] <= a[331] + a[332] <= a[333] + a[334] <= a[335] + a[336] <= a[337] + a[338] <= a[339] + a[340] <= a[341] + a[342] <= a[343] + a[344] <= a[345] + a[346] <= a[347] + a[348] <= a[349] + a[350] <= a[351] + a[352] <= a[353] + a[354] <= a[355] + a[356] <= a[357] + a[358] <= a[359] + a[360] <= a[361] + a[362] <= a[363] + a[364] <= a[365] + a[366] <= a[367] + a"
    },
    {
        "number": 4289,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, T, H = map(int, stdin.split())\n    H_1, H_2,..., H_N = map(int, stdin.split())\n    T_min, T_max = 1, 50\n    for H_i in range(H_1, H_2):\n        if T_min > T:\n            T_min, T = T, H_i\n    for T_i in range(T, T_max):\n        if T_min > T:\n            T_min, T = T, H_i\n    for H_i in range(H_1, H_2):\n        if T_min > T:\n            T_min, T = T, H_i\n    index = T_min + T_i - H_1\n    print(index)\n    return str(index)\n\n-----Constraints-----\n - 1 \\leq N \\leq 1000\n - 0 \\leq T \\leq 50\n - -60 \\leq A \\leq T\n - 0 \\leq H_i \\leq 10^5\n - All values in input are integers.\n - The solution is unique.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nT A\nH_1 H_2... H_N\n\n-----Output-----\nPrint the index of the place where the palace should be built.\n\n-----Sample Input-----\n2\n12 5\n1000 2000\n\n-----Sample Output-----\n1\n\n - The average temperature of Place 1 is 12-1000 \\times 0.006=6 degrees Celsius.\n - The average temperature of Place 2 is 12-2000 \\times 0.006=0 degrees Celsius.\nThus, the palace should be built at Place 1.\ndef"
    },
    {
        "number": 4289,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    x = sorted(list(map(int, stdin.strip().split())))\n    sum = 0\n    for i in range(n):\n        sum += x[i]\n    answer = x[x.index(sum / n)]\n    return str(answer)"
    },
    {
        "number": 4289,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef"
    },
    {
        "number": 4289,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin[0])/int(stdin[1]))"
    },
    {
        "number": 4289,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, T, A, H = list(map(int, stdin.split()))\n    T = T*0.006\n    H = H*0.006\n    count = 0\n    avg_T = 0\n    avg_H = 0\n    for i in range(N):\n        T_i = T*100\n        avg_T = avg_T + T_i\n        count = count + 1\n        H_i = H*100\n        avg_H = avg_H + H_i\n    avg_T = avg_T/count\n    avg_H = avg_H/count\n    if avg_T > T:\n        return str(0)\n    elif avg_T < T:\n        return str(N)\n    elif avg_T == T and avg_H < T:\n        return str(N)\n    else:\n        return str(N)\n\n\n***********************************************************************************\n\"\"\"\nimport math\n\n\nclass Solution:\n    def buildPalace(self, N: int, T: int, A: List[int]) -> int:\n        visited = [0] * 100001\n        min_dist = math.inf\n        res = 1\n\n        def dfs(index):\n            global min_dist\n            if index == N:\n                return\n            for i in range(index, N):\n                if visited[i] == 1 and visited[index] == 0:\n                    if min_dist > T - (A[index] - A[i]):\n                        min_dist = T - (A[index] - A[i])\n                        res = index + 1\n                        visited[index] = 1\n                    return\n\n                if min_dist > T - A[index] - A[i]:\n                    min_dist = T - A[index] - A[i]\n                    visited[index] = 1\n                    dfs(i)\n\n        dfs(0)\n        return res\n\n\nprint(Solution().buildPalace(4, 5, [2, 5, 1, 3, 4, 3]))\n"
    },
    {
        "number": 4289,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, T = map(int, stdin.split())\n    H_1, H_2,..., H_N = map(int, stdin.split())\n    H_1, H_2,..., H_N = list(map(int, stdin.split()))\n    H_i = [H_1, H_2,..., H_N]\n    T_i = [T, T,..., T]\n    H = [i * 50 for i in H_i]\n    T = [i * 0.006 for i in T_i]\n    T.sort()\n    answer = []\n    for i in range(N):\n        answer.append(T.index(max(T)))\n    print(answer)\n    return \"\".join(map(str, answer))\n\nprint(solution(input()))"
    },
    {
        "number": 4289,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n  n, T = list(map(int, stdin.split()))\n  place = [i for i in range(n)]\n  if n == 1:\n    return place[0]\n  x = [i for i in range(n)]\n  heights = [T // (i + 1) for i in range(n)]\n  heights.sort()\n  for i in range(n - 1):\n    if heights[i] < heights[i + 1]:\n      place[x[i + 1]] = x[i]\n    else:\n      place[x[i + 1]] = x[i]\n  return place[0]\n"
    },
    {
        "number": 4289,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n  \n  N, T, A, H = map(int, stdin.split())\n  \n  T = T / 10\n  \n  for i in range(1, N+1):\n    if A > T:\n      return i\n  \n  return 0\n  \n  raise NotImplementedError\n"
    },
    {
        "number": 4289,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, t, a = map(int, stdin.split())\n    H = [0] * (n + 1)\n    for i in range(n):\n        H[i + 1] = abs(H[i] - t * (i + 1))\n    H[0] = 0\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            H[j + 1] = abs(H[j] - t * (i + 1))\n            if H[i] + H[j] < t * (i + 1) or H[i] + H[j] == t * (i + 1) and H[j] < t * (i + 1):\n                return str(j + 1)\n    return 'none'\n"
    },
    {
        "number": 4289,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n  N, T = map(int, stdin.split())\n  avg_temp = 0\n  for _ in range(N):\n    h = int(input())\n    avg_temp += T*h\n  avg_temp /= N\n  ans = ''\n  for _ in range(N):\n    if T*avg_temp > 0:\n      ans += 'P'\n    else:\n      ans += 'A'\n  return ans\n"
    },
    {
        "number": 4290,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N,M = map(int, stdin.split())\n    balls = [i for i in range(1,N+M+1)]\n    print(len(set(balls)))\n    return '1'"
    },
    {
        "number": 4290,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    total, mul, ans = 0, 0, 1\n    for i in range(int(len(stdin)/3)):\n        total += int(stdin[i*3])\n    for i in range(int(len(stdin)/3), len(stdin)):\n        mul += int(stdin[i*3])\n    if mul%2!= 0:\n        ans = ans * mul // 2\n    else:\n        ans = ans * (mul//2)\n    return str(total - mul + ans)\n-----Sample Output-----\n7\n\nHere, we see that we have 7 balls that have 1, 2, 4 as well as 1, 4, 5, 6, 7.\nIt is also possible that we have 7 balls with 1, 4, 5, 6, 7 as well as 1, 7, 8, 9, 10, 11.\nTherefore, the answer is 7.\nThis is not the case.\nWe therefore return 1, 7.\nThe test cases do not contain a blank line."
    },
    {
        "number": 4290,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    the input is a string with the input of a line.\n    \"\"\"\n    N, M = map(int, stdin.split())\n    answer = 0\n    \n    # find the length of the balls\n    sum = 0\n    for i in range(N, N+M):\n        sum += i\n    \n    # initialize the value of answer to be the sum of the balls\n    answer = sum\n    \n    for i in range(2, N+M):\n        answer += answer + (i%2 == 1)\n    \n    return str(answer)"
    },
    {
        "number": 4290,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n,m = map(int, stdin.split())\n    n -= 1\n    m -= 1\n    balls = list(map(int, stdin.split()))\n    answer = 0\n    for i in range(len(balls)):\n        for j in range(i+1, len(balls)):\n            answer += (balls[i]+balls[j]) % 10\n    print(answer)\n    return answer\n\n\"\"\"\nn,m = map(int, input().split())\nb = list(map(int, input().split()))\nprint(solution(n, m))\n\n\"\"\"\n\nimport math\nimport heapq\n\ndef"
    },
    {
        "number": 4290,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return str(sum(list(map(int, stdin.split()))))\n\n\n'''\n\nN,M = map(int, input().split())\nN_list,M_list = map(int,input().split())\n\nprint(sum(list(map(int,str(N_list-1)+str(M_list-1))))%2)"
    },
    {
        "number": 4290,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N,M = map(int,stdin.split())\n    def count_odd_numbers(n,m):\n        return n*(n+1)//2 - m*(m+1)//2\n    def count_even_numbers(n,m):\n        return m*(m+1)//2 - n*(n+1)//2\n    answer = 0\n    for i in range(N+M):\n        if count_odd_numbers(i,N) + count_odd_numbers(i,M) < count_even_numbers(i,N):\n            answer += 1\n        else:\n            answer += count_odd_numbers(i,N) + count_even_numbers(i,M)\n    return str(answer)"
    },
    {
        "number": 4290,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n,m = list(map(int, stdin.split()))\n    if not (1 <= n <= 10**5 and 2 <= m <= 10**5):\n        return 'Error'\n    \n    def is_even(num: int) -> bool:\n        return num % 2 == 0\n    \n    def check(n: int, m: int) -> bool:\n        if n == m:\n            return True\n        if is_even(n - m):\n            return False\n        if is_even(m - n):\n            return False\n        return True\n    \n    answer = 0\n    \n    for i in range(n, m + 1):\n        if not check(i, i):\n            answer += 1\n        if not check(i, i + m):\n            answer += 1\n    return str(answer)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4290,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n,m=map(int,stdin.split())\n    if n==0 and m==0:\n        return '1'\n    if n==0:\n        return str(m%2)\n    if m==0:\n        return str(2*n)\n    if n<m:\n        return '0'\n    if n%2==m%2:\n        return solution(str(n)+str(m))\n    if n%2==1:\n        return solution(str(n)+str(m-1))\n    if m%2==1:\n        return solution(str(n-1)+str(m))\n    return solution(str(n-1)+str(m-1))\n"
    },
    {
        "number": 4290,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n,m = [int(i) for i in stdin.split()]\n    count = 0\n    for i in range(n-1):\n        for j in range(n-1):\n            if (i+j)%2 == 0:\n                count += (i+j)\n    return str(count)\n\n\"\"\"\n\nn,m = [int(i) for i in input().split()]\ndef"
    },
    {
        "number": 4290,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    result = 1\n    for n, m in (map(int, line.split()) for line in stdin):\n        if n % 2 == 0 and m % 2 == 0:\n            result += 1\n        else:\n            result += (m + n) // 2\n    return str(result)"
    },
    {
        "number": 4291,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, Q = map(int, stdin.split())\n    S = stdin.split()\n    \n    l_1, r_1 = map(int, input().split())\n    l_Q, r_Q = map(int, input().split())\n    \n    if l_1 > r_1:\n        l_1, r_1 = r_1, l_1\n    if l_Q > r_Q:\n        l_Q, r_Q = r_Q, l_Q\n    \n    res = 0\n    for _ in range(Q):\n        l_i, r_i = map(int, input().split())\n        res += l_i * r_i\n    \n    print(res % N)\n"
    },
    {
        "number": 4291,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.strip())\n    for _ in range(q):\n        s = list(map(str, input().split()))\n        i = int(s[0])\n        l_i = int(s[1])\n        r_i = int(s[2])\n        print(f\"{i} {l_i} {r_i}\")"
    },
    {
        "number": 4291,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, Q = map(int, stdin.split())\n    S = stdin.split(' ')\n    M = []\n    for i in range(len(S)):\n        M.append((N - 1 - i, i, S[i]))\n    M.sort()\n    count = 0\n    for i in range(N - 1):\n        for j in range(i + 1, N):\n            if S[i] == S[j]:\n                count += 1\n    M.sort(key=lambda x: x[1])\n    for i in M:\n        print(i[2], end=' ')\n    return count\n\n\"\"\""
    },
    {
        "number": 4291,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    Q = int(stdin.strip().split(\" \")[0])\n    N = int(stdin.strip().split(\" \")[1])\n    s = stdin.strip().split(\" \")[2:]\n    T = []\n    for i in range(Q):\n        T.append(s[i].split(\",\"))\n    for i in range(Q):\n        t = []\n        for j in range(N):\n            t.append(T[i][j])\n        if \"AC\" in t:\n            print(len(t))\n        else:\n            print(0)\n"
    },
    {
        "number": 4291,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, Q = map(int, stdin.split())\n    l_1, r_1 = map(int, stdin.split())\n    l_Q, r_Q = map(int, stdin.split())\n    S = stdin.split()\n    A = S[:l_1]\n    C = S[l_1:l_1+r_1]\n    G = S[l_1+r_1:]\n    T = G + C + A\n    \n    count = 0\n    for i in range(l_Q, r_Q):\n        sub_A = A[i]\n        sub_C = C[i]\n        sub_G = G[i]\n        \n        if sub_A == sub_G and sub_C == sub_G:\n            count += 1\n        else:\n            break\n    \n    return f\"{count}\"\n"
    },
    {
        "number": 4291,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    l, r = 0, 1\n    while r < N:\n        if stdin[l] == 'A' and stdin[r] == 'T':\n            l += 1\n        elif stdin[l] == 'C' and stdin[r] == 'C':\n            l += 1\n        elif stdin[l] == 'G' and stdin[r] == 'A':\n            r += 1\n        else:\n            r += 1\n    print(l, r)\n\n-----Sample Output-----\n2\n1\n3\n-----Sample Input-----\n6\nAATCGATCTGCC\nCTGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCCAGATCTGCCT\nCGCC"
    },
    {
        "number": 4291,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    l = list(map(int, stdin.split()))\n    l.sort()\n    for i in range(N-2):\n        print(l[i]+l[i+1]+l[i+2],end=\" \")\n    print(l[N-1])"
    },
    {
        "number": 4291,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, Q = map(int, stdin.split())\n    l_i, r_i = map(int, stdin.split())\n    l_i, r_i = l_i - 1, r_i - 1\n    S = stdin.split()\n    for i in range(Q):\n        A, C, G = map(int, stdin.split())\n        S[i] = A\n        S[i + 1] = C\n        S[i + 2] = G\n    answer = 0\n    for i in range(l_i, r_i + 1):\n        answer += S[i].count(S[i])\n    return str(answer)\n\"\"\"\n\nclass Solution:\n    def countSubstrings(self, S: str) -> int:\n        n = len(S)\n        DP = [[0 for _ in range(n)] for _ in range(n)]\n        \n        for i in range(n):\n            DP[i][i] = 1\n            DP[i][i + 1] = 1\n        \n        for i in range(1, n):\n            for j in range(i, n):\n                if j - i == 1:\n                    DP[i][j] = DP[j + 1][j - 1]\n                elif j - i == 2:\n                    DP[i][j] = DP[i - 1][j - 2]\n                else:\n                    DP[i][j] = DP[i - 1][j - 1] + DP[i - 1][j] + DP[i - 1][j + 1]\n        \n        return sum(DP[n - 1])\n        "
    },
    {
        "number": 4291,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, Q = map(int, stdin.split())\n    Q += N**Q\n    S = stdin.split()\n    l_i = 0\n    r_i = N**Q-1\n    r_i -= len(S)\n    ans = 0\n    while l_i < r_i:\n        if S[l_i] == 'A':\n            ans += 1\n            l_i += 1\n        elif S[l_i] == 'C':\n            ans += 0\n            l_i += 1\n        elif S[l_i] == 'G':\n            ans += 0\n            l_i += 1\n        else:\n            ans += 1\n            r_i -= 1\n    return str(ans)\n"
    },
    {
        "number": 4291,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    s = stdin.split()\n    num_of_queries = 0\n    for i in range(n):\n        l, r = map(int, s[i].split())\n        num_of_queries += (r - l + 1)\n    if q == num_of_queries:\n        return '0'\n    else:\n        return str(num_of_queries - q)"
    },
    {
        "number": 4292,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    p_1, p_2, p_3 = map(int, stdin.split())\n    prices = [p_1, p_2, p_3]\n    answer = 0\n    for i in range(N):\n        prices[i] -= prices[i % K]\n    for price in prices:\n        answer = min(answer, price)\n    return str(answer)\n\n-----Sample Output-----\n0\n5\n50 100 80 120 80\n\n-----Sample Input-----\n5 3\n100 50 60 80\n\n-----Sample Output-----\n121\n\nThere are 3 kinds of fruits and three kinds of fruits for which minimum total price is obtained.\nThe minimum total price for fruits is 50 + 60 + 60 = 121 yen when choosing fruits.\n\n-----Constraints-----\n - 1 \\leq K \\leq N \\leq 1000\n - 1 \\leq p_i \\leq 1000\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN K\np_1 p_2 \\ldots p_N\n\n-----Output-----\nPrint an integer representing the minimum total price of fruits.\n\n-----Sample Input-----\n5 3\n100 50 60 80\n\n-----Sample Output-----\n121\n\n-----Constraints-----\n - 1 \\leq K \\leq N \\leq 1000\n - 1 \\leq p_i \\leq 1000\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN K\np_1 p_2 \\ldots p_N\n\n-----Output-----\nPrint an integer representing the minimum total price of fruits.\n\n-----Sample Input-----\n5 3\n50 100 80 120 80\n\n-----Sample Output-----\n121\n\n-----Constraints-----\n - 1 \\leq K \\leq N \\leq 1000\n - 1 \\leq p_i \\leq 1000\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN K\np_1 p_2 \\ldots p_N\n\n-----Output-----\nPrint an integer representing the minimum total price of fruits.\n\n-----Sample Input-----\n5 3\n100 50 60 80\n\n-----Sample Output-----\n121\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4292,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    fruits = [int(x) for x in stdin.split()]\n    fruits.sort()\n    min_total_price = fruits[0] + K * fruits[1] + K * fruits[2]\n    for i in range(N):\n        total_price = K * fruits[i] + min_total_price\n        min_total_price = total_price if total_price < min_total_price else min_total_price\n    return str(min_total_price)\n\ndef"
    },
    {
        "number": 4292,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(\" \"))\n    \n    fruits = set(map(int, stdin.split(\" \")))\n    \n    dp = [[0 for _ in range(k + 1)] for _ in range(n + 1)]\n    \n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            if fruits == set([i, j]):\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - 1])\n    \n    return str(dp[n][k])"
    },
    {
        "number": 4292,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # init\n    N = int(stdin.strip().split()[0])\n    K = int(stdin.strip().split()[1])\n    p = []\n    for _ in range(N):\n        p.append(list(map(int, stdin.strip().split()[2:])))\n    # sort the data\n    p.sort(key=lambda x: x[0])\n    # store the minimum possible price for each kind\n    total_price = 0\n    # iterate over each kind\n    for i in range(K):\n        # find the minimum price for this kind\n        total_price += p[i][1] * (K-i-1)\n        # append the price for this kind to the remaining kinds\n        total_price += p[i][0] * (K-i-1)\n        # append the price for this kind to the remaining kinds\n        total_price += p[i][1] * i\n        # append the price for this kind to the remaining kinds\n        total_price += p[i][0] * i\n    return str(total_price)\n"
    },
    {
        "number": 4292,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    K, N, p = map(int, stdin.split())\n    answer = 0\n    for i in range(N + 1):\n        answer += p / 100 * i\n    print(answer)\n    return str(answer)\n\ndef"
    },
    {
        "number": 4292,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    p_1, p_2 = map(int, stdin.split())\n    K, N = map(int, stdin.split())\n    answer = K * (p_1 + p_2 + (p_1 + p_2) * (K - 1))\n    return str(answer)"
    },
    {
        "number": 4292,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    N, K = map(int, stdin.split())\n    \n    L = []\n    for i in range(N):\n        L.append([int(j) for j in stdin.split()])\n    \n    L.sort()\n    \n    dp = [L[0][0] + L[1][0] + L[2][0] + L[3][0] + L[4][0]]\n    \n    for i in range(1, N):\n        dp.append(L[i][0] + max(dp[i-1], dp[i-2]+L[i][1]) + max(dp[i-3]+L[i][2], dp[i-4]+L[i][3]) + max(dp[i-5]+L[i][4], dp[i-6]+L[i][5]))\n    return str(dp[-1])\n"
    },
    {
        "number": 4292,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str(solution_py(stdin))\n\ndef"
    },
    {
        "number": 4292,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n  K, N = map(int, stdin.split())\n  p_1, p_2, p_3, p_4, p_5 = map(int, stdin.split())\n  prices = []\n  for i in range(N):\n    prices.append(i+1)\n  prices.sort()\n  dp = [0 for _ in range(K+1)]\n  dp[1] = 0\n  for k in range(1,K+1):\n    for i in range(N):\n      if prices[i] <= k:\n        dp[k] += dp[k-prices[i]]\n      else:\n        dp[k] += dp[k-prices[i]]-dp[k-1]\n  return str(dp[K])"
    },
    {
        "number": 4292,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin.strip().split()[-1])\n    n = int(stdin.strip().split()[-2])\n    p_1, p_2, p_3, p_4, p_5 = map(int, stdin.strip().split())\n    result = 0\n    for i in range(1,n+1):\n        result += (K*p_1*p_3 + K*p_3*p_2 + K*p_2*p_4 + K*p_4*p_5)\n        K -= 1\n        if K == 0:\n            break\n    return str(result)\n\n------------------------------------------------------------------------------------------------------------------------------------\n12.0\n"
    },
    {
        "number": 4293,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    P,Q,R = map(int, stdin.split())\n    if P + Q + R < 100:\n        return '{:.2f}'.format(P + Q + R)\n    else:\n        return 'inf'"
    },
    {
        "number": 4293,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    P, Q, R = map(int, stdin.split())\n    A, B, C = map(int, stdin.split())\n    \n    if min(P, Q) + min(R, P) + min(A, C) == R - P - Q + Q:\n        return str(min(P, Q))\n    elif min(P, Q) + min(R, A) + min(C, B) == R - P - Q + Q:\n        return str(min(P, Q))\n    elif min(P, Q) + min(R, B) + min(A, C) == Q - P - Q + Q:\n        return str(min(R, Q))\n    elif min(P, Q) + min(A, B) + min(R, A) == Q - P - Q + Q:\n        return str(min(R, Q))\n    elif min(P, Q) + min(A, B) + min(C, A) == Q - P - Q + Q:\n        return str(min(Q, R))\n    else:\n        return str(min(P, Q))\n\"\"\"\nclass Solution:\n    def minimumTotal(self, triangle: List[List[int]]) -> int:\n        \n        n = len(triangle)\n        dp = [[0 for _ in range(3)] for _ in range(n)]\n        \n        for i in range(n):\n            dp[i][0] = triangle[i][0]\n            dp[i][1] = triangle[i][1]\n            dp[i][2] = triangle[i][2]\n        \n        for k in range(3, n):\n            dp[0][k] = triangle[0][k] + min(dp[0][k-1], dp[0][k-2])\n            dp[1][k] = triangle[1][k] + min(dp[1][k-1], dp[1][k-2])\n            dp[2][k] = triangle[2][k] + min(dp[2][k-1], dp[2][k-2])\n        \n        return min(dp[-1])\n\n\"\"\""
    },
    {
        "number": 4293,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    routes = [(0, 0, 0)]\n    for p, q, r in stdin.split():\n        r, p, q = int(r), int(p), int(q)\n        routes.append((r, p, q))\n    routes.sort(key=lambda x: x[0])\n    answer = 0\n    for r in routes:\n        if r[2] < r[0]:\n            answer += (r[0] - r[2])\n        else:\n            answer += (r[2] - r[0])\n    print(answer)\n"
    },
    {
        "number": 4293,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    P, Q, R = map(int, stdin.split())\n    return '%d' % min(P, Q, R)\n"
    },
    {
        "number": 4293,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(int(stdin)):\n        p, q, r = map(int, stdin.split())\n        if p > q:\n            p, q = q, p\n        if q > r:\n            q, r = r, q\n        print(p + r + q)\n    return str(p + r + q)\n"
    },
    {
        "number": 4293,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    airport_1 = {}\n    airport_2 = {}\n    airport_3 = {}\n    airport_4 = {}\n    for i in range(n):\n        a, b, c = map(int, input().split())\n        if a not in airport_1:\n            airport_1[a] = [b, c]\n        elif b not in airport_2:\n            airport_2[b] = [c, a]\n        elif c not in airport_3:\n            airport_3[c] = [a, b]\n        elif a not in airport_4:\n            airport_4[a] = [b, c]\n        elif b not in airport_1:\n            airport_1[b] = [a, c]\n        elif c not in airport_3:\n            airport_3[c] = [a, b]\n        else:\n            airport_4[a] = [b, c]\n    s = 0\n    for i in airport_3:\n        s += min(airport_1[i][0], airport_2[i][0], airport_3[i][0])\n    for i in airport_3:\n        s += min(airport_1[i][1], airport_2[i][1], airport_3[i][1])\n    for i in airport_4:\n        s += min(airport_1[i][0], airport_2[i][0], airport_3[i][0])\n    s += min(airport_1[i][1], airport_2[i][1], airport_3[i][1])\n    return str(s)\n"
    },
    {
        "number": 4293,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    P,Q,R = map(int,stdin.split())\n    if P == 1 or Q == 1 or R == 1:\n        return str(P*Q*R)\n    elif P == Q:\n        return str(P*R)\n    elif Q == R:\n        return str(P*R*Q)\n    else:\n        a = []\n        a.append(P)\n        a.append(Q)\n        a.append(R)\n        b = []\n        b.append(P)\n        b.append(Q)\n        b.append(R)\n        c = []\n        c.append(P)\n        c.append(Q)\n        c.append(R)\n        d = []\n        d.append(P)\n        d.append(Q)\n        d.append(R)\n        return solution(str(a) +'' + str(b) +'' + str(c) +'' + str(d))\n\ndef"
    },
    {
        "number": 4293,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    p,q,r = map(int,stdin.split())\n    A,B,C = map(int,input().split())\n    P = Q = R = 0\n    while p!=0 or q!=0 or r!=0:\n        P += (p*2)\n        Q += (q*2)\n        R += (r*2)\n        p,q,r = map(int,input().split())\n    if P<=R and Q<=R and P<=R:\n        P = P-R\n        Q = Q-R\n    if P<=R and Q<=A and P<=R:\n        P = P-R\n        Q = Q-A\n    if P<=R and Q<=B and P<=R:\n        P = P-R\n        Q = Q-B\n    if P<=R and Q<=C and P<=R:\n        P = P-R\n        Q = Q-C\n    if P<=A and Q<=B and P<=A:\n        P = P-A\n        Q = Q-B\n    if P<=A and Q<=C and P<=A:\n        P = P-A\n        Q = Q-C\n    if P<=B and Q<=C and P<=B:\n        P = P-B\n        Q = Q-C\n    if P<=B and Q<=A and P<=B:\n        P = P-B\n        Q = Q-A\n    if P<=C and Q<=B and P<=C:\n        P = P-C\n        Q = Q-B\n    if P<=C and Q<=A and P<=C:\n        P = P-C\n        Q = Q-A\n    if P<=A and Q<=B and P<=A:\n        P = P-A\n        Q = Q-B\n    if P<=A and Q<=B and P<=A:\n        P = P-A\n        Q = Q-B\n    if P<=B and Q<=C and P<=B:\n        P = P-B\n        Q = Q-C\n    if P<=B and Q<=A and P<=B:\n        P = P-B\n        Q = Q-C\n    if P<=C and Q<=A and P<=C:\n        P = P-C\n        Q = Q-A\n    if P<=A and Q<=B and P<=A:\n        P = P-A\n        Q = Q-B\n    if P<=A and Q<=B and P<=B:\n        P = P-A\n        Q = Q-B\n    if P<=B and Q<=C and P<=B:\n        P = P-B\n        Q = Q-C\n    if P<=B and Q<=A and P<=B:\n        P = P-B\n        Q = Q-C\n    if P<=C and Q<=A and P<=C:\n        P = P-C\n        Q = Q-A\n    if P<=C and Q<=B and P<=C:\n        P = P-C\n        Q = Q-B\n    if P<=A and Q<=B and P<=C:\n        P = P-A\n        Q = Q-B\n    if P<=B and Q<=C and P<=A:\n        P = P-B\n        Q = Q-C\n    if P<=C and Q<=A and P<=B:\n        P = P-C\n        Q = Q-B\n    if P<=A and Q<=B and P<=C:\n        P = P-A\n        Q = Q-C\n    if P<=B and Q<=A and P<=B:\n        P = P-B\n        Q = Q-C\n    if P<=C and Q<=B and P<=A:\n        P = P-C\n        Q = Q-B\n    if P<=A and Q<=B and P<=C:\n        P = P-A\n        Q = Q-C\n    if P<=A and Q<=B and P<=B:\n        P = P-A\n        Q = Q-C\n    if P<=B and Q<=C and P<=C:\n        P = P-B\n        Q = Q-C\n    if P<=C and Q<=A and P<=A:\n        P = P-C\n        Q = Q-B\n    if P<=B and Q<=C and P<=C:\n        P = P-B\n        Q = Q-C\n    if P<=A and Q<=B and P<=C:\n        P = P-A\n        Q = Q-C\n    if P<=B and Q<=A and P<=A:\n        P = P-B\n        Q = Q-C\n    if P<=C and Q<=A and P<=B:\n        P = P-C\n        Q = Q-A\n    if P<=A and Q<=B and P<=C:\n        P = P-A\n        Q = Q-B\n    if P<=A and Q<=B and P<=B:\n        P = P-A\n        Q = Q-B\n    if P<=C and Q<=A and P<=B:\n        P = P-C\n        Q = Q-A\n    if P<=B and Q<=C and P<=A:\n        P = P-B\n        Q = Q-A\n    if P<=A and Q<=B and P<=C:\n        P = P-C\n        Q = Q-B\n    if P<=A and Q<=B and P<=C:\n        P = P-C\n        Q = Q-B\n    if P<=B and Q<=A and P<=B:\n        P = P-C\n        Q = Q-A\n    if P<=C and Q<=A and P<=B:\n        P = P-C\n        Q = Q-A\n    if P<=A and Q<=B and P<=C:\n        P = P-A\n        Q = Q-B\n    if P<=A and Q<=B and P<=B:\n        P = P-A\n        Q = Q-B\n    if P<=B and Q<=C and P<=A:\n        P = P-B\n        Q = Q-A\n    if P<=A and Q<=C and P<=B:\n        P = P-A\n        Q = Q-B\n    if P<=B and Q<=C and P<=A:\n        P = P-B\n        Q = Q-C\n    if P<=A and Q<=B and P<=C:\n        P = P-A\n        Q = Q-C\n    if P<="
    },
    {
        "number": 4293,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pq, p, q, r = map(int, stdin.split(' '))\n    h, w, e = map(int, stdin.split(' '))\n    return f'{h + r * p * q * w * (p + q + r * pq)}'\n\n-----Constraints-----\n - 1 \\leq P,Q,R \\leq 100\n - All values in input are integers.\n"
    },
    {
        "number": 4293,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    airports, flights = [int(x) for x in stdin.split(\" \")], []\n    \n    # Time to fly to all other airports\n    time_to_fly = [0]\n    \n    for i in range(len(airports) - 1):\n        # Time to fly to the other airports\n        time_to_fly.append(time_to_fly[i] + airports[i+1])\n        \n        # Time to fly to the other airports\n        time_to_fly.append(time_to_fly[i] + flights[i+1])\n    \n    return str(min(time_to_fly))\n"
    },
    {
        "number": 4294,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    if stdin[0] < stdin[1]:\n        return 0\n    else:\n        return 10\n"
    },
    {
        "number": 4294,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin.split()[0])\n    A = int(stdin.split()[1])\n    if A > X or (A < 0 and X < 0):\n        return '10'\n    elif A == X:\n        return '0'\n    else:\n        return '10'\n"
    },
    {
        "number": 4294,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    if stdin == \"0\":\n        return \"0\"\n    if stdin == \"10\":\n        return \"10\"\n    X = int(stdin[1])\n    if X < 9:\n        print(0)\n    else:\n        print(10)\n    return \"0\"\n\n-----Sample Input-----\n3 5\n\n-----Sample Output-----\n0\n\n3 is less than 5, so we should print 0.\ndef"
    },
    {
        "number": 4294,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    answer = '0'\n    if a > n:\n        answer = '10'\n    elif a < n:\n        answer = '1'\n    return answer\n"
    },
    {
        "number": 4294,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    a, b = map(int, stdin.split())\n    if a < b:\n        return \"0\"\n    elif b < a:\n        return \"10\"\n    else:\n        return \"1\"\n"
    },
    {
        "number": 4294,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x,a = map(int,stdin.split(\" \"))\n    if x > a:\n        x,a = a,x\n    print(x)\n    return \"0\"\n\ndef"
    },
    {
        "number": 4294,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    X, A = map(int, stdin.split())\n    if X < A:\n        return '0'\n    return '10'\n"
    },
    {
        "number": 4294,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    X = list(map(int, stdin.split()))\n    A = X[0]\n    for i in range(N-2, -1, -1):\n        if A >= X[i]:\n            A = A - X[i]\n            break\n    print(A)"
    },
    {
        "number": 4294,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x, a = map(int, stdin.split())\n    if x <= a:\n        return 0\n    else:\n        return 10\n\ndef"
    },
    {
        "number": 4294,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin.strip())\n    if x < 9:\n        return str(0)\n    else:\n        return str(10)\n    "
    },
    {
        "number": 4295,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    lst = list(map(int, stdin.split()))\n    minimum = 0\n    for i in range(0, len(lst) - 1):\n        minimum = min(minimum, lst[i] + k - lst[i + 1])\n    minimum = minimum if minimum >= 0 else 1\n    print(minimum)\n\n-----Time Complexity-----\nO(n^2) where n is the number of operations.\nO(n) where n is the number of steps.\n\nO(n) since the numbers can be traversed from right to left.\n\nO(n) to check the length of the list.\nO(n^2) to check the length of the list.\n\nO(1) since only one move is needed.\n\nO(1) to check the list.\nO(n) since only one move is needed.\nO(1) to check the list.\nO(n) since only one move is needed.\nO(n) to check the list.\nO(1) since only one move is needed.\nO(1) to check the list.\nO(n) since only one move is needed.\nO(1) to check the list.\nO(n) since only one move is needed.\nO(1) to check the list.\nO(1) since only one move is needed.\nO(n) since only one move is needed.\nO(n) since only one move is needed.\nO(n) since only one move is needed.\nO(1) since only one move is needed.\nO(1) since only one move is needed.\nO(n) since only one move is needed.\nO(n) since only one move is needed.\nO(n) since only one move is needed.\nO(n) since only one move is needed.\nO(n) since only one move is needed.\nO(n) since only one move is needed.\nO(n) since only one move is needed.\nO(n) since only one move is needed.\nO(n) since only one move is needed.\nO(n) since only one move is needed.\nO(n) since only one move is needed.\nO(n) since only one move is needed.\nO(n) since only one move is needed.\nO(n) since only one move is needed.\nO(n) since only one move is needed.\nO(n) since only one move is needed.\nO(n) since only one move is needed.\nO(n) since only one move is needed.\nO(n) since only one move is needed.\nO(n) since only one move is needed.\nO(n) since only one move is needed.\nO(n) since only one move is needed.\nO(n) since only one move is needed.\nO(n) since only one move is needed.\nO(n) since only one move is needed.\nO(n) since only one move is needed.\nO(n) since only one move is needed.\nO(n) since only one move is needed.\nO(n) since only one move is needed.\nO(n) since only one move is needed.\nO(n) since only one move is needed.\nO(n) since only one move is needed.\nO(n) since only one move is needed.\nO(n) since only one move is needed.\nO(n) since only one move is needed.\nO(n) since only one move is needed.\nO(n) since only one move is needed.\nO(n) since only one move is needed.\nO(n) since only one move is needed.\nO(n) since only one move is needed.\nO(n) since only one move is needed.\nO(n) since only one move is needed.\nO(n) since only one move is needed.\nO(n) since only one move is needed.\nO(n) since only one move is needed.\nO(n) since only one move is needed.\nO(n) since only one move is needed.\nO(n) since only one move is needed.\nO(n) since only one move is needed.\nO(n) since only one move is needed.\nO(n) since only one move is needed.\nO(n) since only one move is needed.\nO(n) since only one move is needed.\nO(n) since only one move is needed.\nO(n) since only one move is needed.\nO(n) since only one move is needed.\nO(n) since only one move is needed.\nO(n) since only one move is needed.\nO(n) since only one move is needed.\nO(n) since only one move is needed.\nO(n) since only one move is needed.\nO(n) since only one move is needed.\nO(n) since only one move is needed.\nO(n) since only one move is needed.\nO(n) since only one move is needed.\nO(n) since only one move is needed.\nO(n) since only one move is needed.\nO(n) since only one move is needed.\nO(n) since only one move is needed.\nO(n) since only one move is needed.\nO(n) since only one move is needed.\nO(n) since only one move is needed.\nO(n) since only one move is needed.\nO(n) since only one move is needed.\nO(n) since only one move is needed.\nO(n) since only one move is needed.\nO(n) since only one move is needed.\nO(n) since only one move is needed.\nO(n) since only one move is needed.\nO(n) since only one move is needed.\nO(n) since only one move is needed.\nO(n) since only one move is needed.\nO(n) since only one move is needed.\nO(n) since only one move is needed.\nO(n) since only one move is needed.\nO(n) since only one move is needed.\nO(n) since only one move is needed.\nO(n) since only one move is needed.\nO(n) since only one move is needed.\nO(n) since only one move is needed.\nO(n) since only one move is needed.\nO(n) since only one move is needed.\nO(n) since only one move is needed.\nO(n) since only one move is needed.\nO(n) since only one move is needed.\nO(n) since only one move is needed.\nO(n) since only one move is needed.\nO(n) since only one move is needed.\nO(n) since only one move is needed.\nO(n) since only one move is needed.\nO(n) since only one move is needed.\nO(n) since only one move is needed.\nO(n) since only one move is needed.\nO(n) since only one move is needed.\nO(n) since only one move is needed.\nO(n) since only one move is needed.\nO(n) since only one move is needed.\nO(n) since only one move is needed.\nO(n) since only one move is needed.\nO(n) since only one move is needed.\nO(n) since only one move is needed.\nO(n) since only one move is needed.\nO(n) since only one move is needed.\nO(n) since only one move is needed.\nO(n) since only one move is needed.\nO(n) since only one move is needed.\nO(n) since only one move is needed.\nO(n) since only one move is needed.\nO(n) since only one move is needed.\nO(n) since only one move is needed.\nO(n) since only one move is needed"
    },
    {
        "number": 4295,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    a = 0\n    ans = 0\n    while a < len(A):\n        if a + K < len(A):\n            ans += abs(A[a + K] - A[a])\n            a += K\n        else:\n            ans += abs(A[a] - A[a + K - len(A)])\n            a += K\n    print(ans)\n    return str(ans)\n\n\"\"\"\nclass Solution:\n    def solution(self, stdin):\n        N, K = map(int, stdin.split())\n        A = list(map(int, stdin.split()))\n        a = 0\n        ans = 0\n        while a < len(A):\n            if a + K < len(A):\n                ans += abs(A[a + K] - A[a])\n                a += K\n            else:\n                ans += abs(A[a] - A[a + K - len(A)])\n                a += K\n        return str(ans)\n\ndef"
    },
    {
        "number": 4295,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N,K = map(int,stdin.split())\n    N = N if N >= 10 else 10**19\n    if N % K == 0:\n        return str(N)\n    else:\n        return '0'\n"
    },
    {
        "number": 4295,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    answer = ''\n    n, k = map(int, stdin.split())\n    i = 0\n    while i < n:\n        if i % k == 0:\n            answer += str(abs(i - k))\n            i += 1\n        else:\n            answer += str(i)\n            i += 1\n    print(int(answer))\n"
    },
    {
        "number": 4295,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin) + abs(int(stdin)-int(stdin.replace(' ', ''))))"
    },
    {
        "number": 4295,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x, k = map(int, stdin.split())\n    if (x < k) or (k < 0):\n        return \"0\"\n    else:\n        return str(x + k)\n"
    },
    {
        "number": 4295,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    count = 0\n    for i in range(1, N + 1):\n        count += 1\n        if K - i <= 0:\n            return str(count)\n        else:\n            K -= i\n    return str(count)\n\n-----Constraints-----\n - 0 \u2264 N \u2264 10^{18}\n - 1 \u2264 K \u2264 10^{18}\n - All values in input are integers.\n"
    },
    {
        "number": 4295,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = list(map(int,stdin.split()))\n    l = len(s)\n    if l==1:\n        return str(s[0])\n    for i in range(1,l):\n        s[i] = abs(s[i]-s[i-1])\n    min_idx = s.index(min(s))\n    return str(s[min_idx])\n\n    \n    \n    \n    \n"
    },
    {
        "number": 4295,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # stack\n    def pop():\n        if len(stack)!= 0:\n            x = stack.pop()\n            print(x)\n        else:\n            return -1\n\n    stack = []\n    for i in range(1, int(stdin) + 1):\n        x = int(stdin[i - 1])\n        stack.append(x)\n        # insert new element\n        if len(stack) == 2:\n            stack.append(x - stack.pop())\n            stack.append(x)\n            stack.append(x - stack.pop())\n    \n    return str(min(stack))\n"
    },
    {
        "number": 4295,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    def operation(x, k):\n        return x - abs(x-k)\n    return str(min(operation(n, k), operation(n-k, k)))"
    },
    {
        "number": 4296,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    for line in stdin.split():\n        t,a=map(int,line.split())\n        if t==0:\n            if a>21:\n                print(\"win\")\n            else:\n                print(\"bust\")\n        else:\n            if a>22:\n                print(\"win\")\n            else:\n                print(\"bust\")\n"
    },
    {
        "number": 4296,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(int(input())):\n        ans = 'bust'\n        if eval(input()) >= 22:\n            ans = 'win'\n        print(ans)\n    return\n\n\n1\nInput:\n5 7 9\n\nOutput:\nwin\n\n5+7+9=21, so print win.\n\"\"\"\n\ndef"
    },
    {
        "number": 4296,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    answer = \"win\"\n    for i in range(len(stdin)):\n        temp = 0\n        for j in range(i,len(stdin)):\n            if int(stdin[i:j]) > 22:\n                answer = \"win\"\n                break\n            else:\n                temp += int(stdin[i:j])\n        if temp == 0:\n            break\n    return answer\n\nprint(solution(\"5 7 9\"))\n"
    },
    {
        "number": 4296,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    nums = list(map(int,stdin.split()))\n    for i in range(1, len(nums)):\n        nums[i] = nums[i] + nums[i-1]\n    for i in range(len(nums)//2):\n        if nums[i] > nums[len(nums)-i-1]:\n            return \"bust\"\n        else:\n            return \"win\"\nprint(solution(\"5 7 9\"))"
    },
    {
        "number": 4296,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split()\n    A_1 = int(input[0])\n    A_2 = int(input[1])\n    A_3 = int(input[2])\n    if (A_1 + A_2 + A_3) > 22:\n        return 'bust'\n    else:\n        return 'win'\n\n-----Longer test-----\ntests = [\n    ([\"5\", \"7\", \"9\", \"10\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"20\", \"22\"], \"bust\"),\n    ([\"3\", \"4\", \"6\", \"7\", \"10\", \"11\", \"14\", \"15\", \"16\", \"18\", \"20\", \"22\"], \"win\"),\n    ([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\"], \"win\"),\n    ([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\"], \"bust\"),\n    ([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\"], \"win\"),\n]\nfor stdin, answer in tests:\n    print(solution(stdin))\n"
    },
    {
        "number": 4296,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if A+B+C > 22:\n        return 'bust'\n    elif A+B+C == 22:\n        return 'win'\n    else:\n        return 'win'\n\n-----Explanation-----\nA, B, C = 5 7 9\nA+B+C=21, so return 'bust'.\nA, B, C = 3 7 9\nA+B+C=22, so return 'win'.\nA, B, C = 5 7 8\nA+B+C=21, so return 'win'.\nA, B, C = 3 7 9\nA+B+C=22, so return 'win'.\nA, B, C = 3 7 10\nA+B+C=21, so return 'win'.\nA, B, C = 3 7 9\nA+B+C=22, so return 'win'.\nA, B, C = 3 7 10\nA+B+C=21, so return 'win'.\nA, B, C = 3 7 11\nA+B+C=21, so return 'win'.\nA, B, C = 3 7 12\nA+B+C=21, so return 'win'.\nA, B, C = 3 7 13\nA+B+C=21, so return 'win'.\nA, B, C = 3 7 14\nA+B+C=21, so return 'win'.\nA, B, C = 3 7 15\nA+B+C=21, so return 'win'.\nA, B, C = 3 7 16\nA+B+C=21, so return 'win'.\nA, B, C = 3 7 17\nA+B+C=21, so return 'win'.\nA, B, C = 3 7 18\nA+B+C=21, so return 'win'.\nA, B, C = 3 7 19\nA+B+C=21, so return 'win'.\nA, B, C = 3 7 20\nA+B+C=21, so return 'win'.\nA, B, C = 3 7 21\nA+B+C=21, so return 'win'.\nA, B, C = 3 7 22\nA+B+C=21, so return 'win'.\nA, B, C = 3 7 23\nA+B+C=21, so return 'win'.\nA, B, C = 3 7 24\nA+B+C=21, so return 'win'.\nA, B, C = 3 7 25\nA+B+C=21, so return 'win'.\nA, B, C = 3 7 26\nA+B+C=21, so return 'win'.\nA, B, C = 3 7 27\nA+B+C=21, so return 'win'.\nA, B, C = 3 7 28\nA+B+C=21, so return 'win'.\nA, B, C = 3 7 29\nA+B+C=21, so return 'win'.\nA, B, C = 3 7 30\nA+B+C=21, so return 'win'.\nA, B, C = 3 7 31\nA+B+C=21, so return 'win'.\nA, B, C = 3 7 32\nA+B+C=21, so return 'win'.\nA, B, C = 3 7 33\nA+B+C=21, so return 'win'.\nA, B, C = 3 7 34\nA+B+C=21, so return 'win'.\nA, B, C = 3 7 35\nA+B+C=21, so return 'win'.\nA, B, C = 3 7 36\nA+B+C=21, so return 'win'.\nA, B, C = 3 7 37\nA+B+C=21, so return 'win'.\nA, B, C = 3 7 38\nA+B+C=21, so return 'win'.\nA, B, C = 3 7 39\nA+B+C=21, so return 'win'.\nA, B, C = 3 7 40\nA+B+C=21, so return 'win'.\nA, B, C = 3 7 41\nA+B+C=21, so return 'win'.\nA, B, C = 3 7 42\nA+B+C=21, so return 'win'.\nA, B, C = 3 7 43\nA+B+C=21, so return 'win'.\nA, B, C = 3 7 44\nA+B+C=21, so return 'win'.\nA, B, C = 3 7 45\nA+B+C=21, so return 'win'.\nA, B, C = 3 7 46\nA+B+C=21, so return 'win'.\nA, B, C = 3 7 47\nA+B+C=21, so return 'win'.\nA, B, C = 3 7 48\nA+B+C=21, so return 'win'.\nA, B, C = 3 7 49\nA+B+C=21, so return 'win'.\nA, B, C = 3 7 50\nA+B+C=21, so return 'win'.\nA, B, C = 3 7 51\nA+B+C=21, so return 'win'.\nA, B, C = 3 7 52\nA+B+C=21, so return 'win'.\nA, B, C = 3 7 53\nA+B+C=21, so return 'win'.\nA, B, C = 3 7 54\nA+B+C=21, so return 'win'.\nA, B, C = 3 7 55\nA+B+C=21, so return 'win'.\nA, B, C = 3 7 56\nA+B+C=21, so return 'win'.\nA, B, C = 3 7 57\nA+B+C=21, so return 'win'.\nA, B, C = 3 7 58\nA+B+C=21, so return 'win'.\nA, B, C = 3 7 59\nA+B+C=21, so return 'win'.\nA, B, C = 3 7 60\nA+B+C=21, so return 'win'.\nA, B, C = 3 7 61\nA+B+C=21, so return 'win'.\nA, B, C = 3 7 62\nA+B+C=21, so return 'win'.\nA, B, C = 3 7 63\nA+B+C=21, so return 'win'.\nA, B, C = 3 7 64\nA+B+C=21, so return 'win'.\nA, B, C = 3 7 65\nA+B+C=21, so return 'win'.\nA, B, C = 3 7 66\nA+B+C=21, so return 'win'.\nA, B, C = 3 7 67\nA+B+C=21, so return 'win'.\nA, B, C = 3 7 68\nA+B+C=21, so return 'win'.\nA, B, C = 3 7 69\nA+B+C=21, so return 'win'.\nA, B, C = 3 7 70\nA+B+C=21, so return 'win'.\nA, B, C = 3 7 71\nA+B+C=21, so return 'win'.\nA, B, C = 3 7 72\nA+B+C=21, so return 'win'.\nA, B, C = 3 7 73\nA+B+C=21, so return 'win'.\nA, B, C = 3 7 74\nA+B+C=21, so return 'win'.\nA, B, C = 3 7 75\nA+B+C=21, so return 'win'.\nA, B, C = 3 7 76\nA+B+C=21, so return 'win'.\nA, B, C = 3 7 77\nA+B+C=21, so return 'win'.\nA, B, C = 3 7 78"
    },
    {
        "number": 4296,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return 'win'"
    },
    {
        "number": 4296,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A_1, A_2, A_3 = map(int, stdin.split())\n    if A_1+A_2+A_3 > 21:\n        return \"bust\"\n    if A_1+A_2+A_3 == 22:\n        return \"win\"\n    return \"gog\"\n"
    },
    {
        "number": 4296,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin[0])\n    sum = int(stdin[1])\n    answer = \"\"\n    for _ in range(2, num):\n        answer += str(_ % 10)\n    \n    if num - int(answer) == sum:\n        return \"win\"\n    else:\n        return \"bust\"\n\n-----SAMPLE INPUT-----\n5 7 9\n\n5+7+9=21, so print win.\n"
    },
    {
        "number": 4296,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Generate A_1, A_2, and A_3\n    A_1 = int(stdin.strip().split()[0])\n    A_2 = int(stdin.strip().split()[1])\n    A_3 = int(stdin.strip().split()[2])\n    \n    # Return the max possible answer\n    return str(max(A_1, A_2, A_3))\n"
    },
    {
        "number": 4297,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    divisible_by_2_and_N = 0\n    for i in range(1, N + 1):\n        if N % i == 0:\n            divisible_by_2_and_N += i\n    return str(divisible_by_2_and_N)\n\nprint(solution(\"3\"))\n\"\"\"\ndef"
    },
    {
        "number": 4297,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(2, n):\n        if n % i == 0:\n            if n % i == 0:\n                if n % i == 0:\n                    return str(i) +'' + str(n)\n                else:\n                    return str(i) +'' + str(n) +'' + str(n//i)\n            else:\n                return str(i) +'' + str(n//i)\n    return str(n) +'' + str(n//i)\n\ndef"
    },
    {
        "number": 4297,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if (N % 2!= 0) or N < 2:\n        return str(N)\n    if N % 3 == 0:\n        return str(N // 3)\n    if N % 2 == 0:\n        return str(N // 2)\n    return \"no\"\n\ninput()\n"
    },
    {
        "number": 4297,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(min(n, (n * 2) % n))\n\n-----Sample Output-----\nSample Input:\n5\nSample Output:\n5\n\nSample Input:\n5\nSample Output:\n0\n'''\nimport sys\n\ninput = sys.stdin.readline\n\ndef"
    },
    {
        "number": 4297,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n  n = int(stdin)\n  divisors = []\n  for i in range(1, n + 1):\n    if n % i == 0:\n      divisors.append(i)\n  return str(min(divisors))\n\nn = int(stdin)\ndivisors = []\nfor i in range(1, n + 1):\n  if n % i == 0:\n    divisors.append(i)\n  if len(divisors) == 2:\n    return str(min(divisors))\n  divisors = []"
    },
    {
        "number": 4297,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    if (num & (num-1)) == 0:\n        return str(num-1)\n    else:\n        return str(num)\n\n\n'''\ndef"
    },
    {
        "number": 4297,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if (n & (n-1)) == 0:\n        return str(n)\n    else:\n        return \"1\" + solution(str(n-1))\n\nprint(solution(stdin))"
    },
    {
        "number": 4297,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    min_divisor = min_divisible(n)\n    return min_divisor\n\ndef"
    },
    {
        "number": 4297,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    answer = str(list(map(int, stdin.split())))\n    return min(int(i) for i in answer if int(i)%2 == 0)\n\ndef"
    },
    {
        "number": 4297,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lst = [int(i) for i in stdin.split()]\n    min = lst[0]\n    for num in lst[1:]:\n        if num % 2!= 0:\n            num += num // 2\n            if num < min:\n                min = num\n        else:\n            break\n    print(min)\n    return str(min)\n\ndef"
    },
    {
        "number": 4298,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, D = map(int, stdin.split())\n    answer = 0\n    num = 1\n    for i in range(1, N + 1):\n        if i % D!= 0:\n            answer += num\n        else:\n            num += 1\n    return str(answer)\n\"\"\""
    },
    {
        "number": 4298,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n  D, N = map(int, stdin.split())\n  trees = list(map(int, stdin.split()))\n  tree2 = 1\n  tree3 = 0\n  tree4 = 1\n  tree = 1\n  for tree in trees:\n    if tree == tree2:\n      tree2 += 1\n      tree2 = tree2 % N\n    elif tree == tree3:\n      tree3 += 1\n      tree3 = tree3 % N\n    elif tree == tree4:\n      tree4 += 1\n      tree4 = tree4 % N\n  return str(tree2 + tree3 + tree4)\n\n-----Test Cases-----\nsolution(\"6 2\")\n"
    },
    {
        "number": 4298,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, D = map(int, stdin.split())\n    tree1 = [1] * N\n    tree2 = [1] * N\n    tree3 = [1] * N\n    tree4 = [1] * N\n    \n    for i in range(N):\n        tree1[i] = int(stdin.split()[i+1])\n    for i in range(N):\n        tree2[i] = int(stdin.split()[i+2])\n    for i in range(N):\n        tree3[i] = int(stdin.split()[i+3])\n    for i in range(N):\n        tree4[i] = int(stdin.split()[i+4])\n        \n    for i in range(N):\n        if tree3[i] < tree2[i]:\n            tree3[i] = tree2[i]\n        if tree3[i] < tree4[i]:\n            tree3[i] = tree4[i]\n        if tree3[i] < tree1[i]:\n            tree3[i] = tree1[i]\n    \n    # for i in range(N):\n    #     print(tree1[i],tree2[i],tree3[i],tree4[i])\n    \n    total_smaller = sum(tree3)\n    total_bigger = sum(tree1) + sum(tree2) + sum(tree3)\n    \n    return min(total_smaller, total_bigger)\n\nprint(solution(\"6 2\"))\nprint(solution(\"3 3 3 4\"))\n"
    },
    {
        "number": 4298,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n  N,D = map(int,stdin.split())\n  tree_trees = list(map(int,stdin.split()))\n  print(solution(N,D,tree_trees))\n-----Constraints-----\n - All values in input are integers.\n - 1 \\leq N \\leq 20\n - 1 \\leq D \\leq 20\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN D\n\n-----Output-----\nPrint the minimum number of inspectors that we need to deploy to achieve the objective.\n\n-----Sample Input-----\n6 2\n\n-----Sample Output-----\n2\n\"\"\"\n"
    },
    {
        "number": 4298,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n  N, D = map(int, stdin.split())\n  tree = list(map(int, stdin.split()))\n  tree = sorted(tree)\n  \n  candidates = list(range(1, N+1))\n  candidates.insert(0, 0)\n  candidates.append(N+1)\n  \n  def check(n):\n    while n!= candidates[n]:\n      n = candidates[n]\n    return n+1\n  \n  while candidates:\n    i = candidates[0]\n    candidates = candidates[1:]\n    candidates.append(i)\n    if (i-1) < len(tree):\n      check(i-1)\n    if (i+1) > len(tree):\n      check(i+1)\n  return str(candidates[0])\n\nExample 1:\n\nInput:\nN = 6\nD = 2\ntree = [3,4,5,6,7,8]\nOutput:\n3\nExample 2:\n\nInput:\nN = 4\nD = 1\ntree = [2,3,4,5]\nOutput:\n2\nExample 3:\n\nInput:\nN = 1\nD = 1\ntree = [5]\nOutput:\n5\nExample 4:\n\nInput:\nN = 1\nD = 2\ntree = [5,6]\nOutput:\n4\nExample 5:\n\nInput:\nN = 2\nD = 1\ntree = [5,6]\nOutput:\n2\nExample 6:\n\nInput:\nN = 4\nD = 2\ntree = [1,3,4,5]\nOutput:\n4\nExplanation:\n1\n  = 4\nExplanation:\n4 is under D, thus, 4 + 1 + 2 + 3 + 4 = 13.\nExample 7:\n\nInput:\nN = 1\nD = 1\ntree = [1]\nOutput:\n1\nExplanation:\n1 is under D, thus, 1 + 1 + 1 = 1.\n\nConstraints:\n\n1 <= N <= 20\n1 <= D <= 20\ntree.length == N+D\n0 <= tree[i] <= 1000\n\nO(D*N*N)\n\n-------------\nRuntime: 24 ms, faster than 53.38% of Python3 online submissions for Minimum Number of Inspectors to Deploy a Tree of N Distinct Integers.\nMemory Usage: 14.2 MB, less than 87.23% of Python3 online submissions for Minimum Number of Inspectors to Deploy a Tree of N Distinct Integers.\n\"\"\"\nfrom typing import List\n\n\nclass Solution:\n    def minimumEffortPath(self, heights: List[List[int]]) -> int:\n        # Using the fact that we know that the center tree has already been built.\n        # This means that the index will be the root of the tree.\n        # The center node will be the root of the tree.\n        # Now we need to check that the index is smaller than the len(heights)\n        # If yes, the index will be in the center tree.\n        # Otherwise, the index is greater than the len(heights)\n        # So, it's a root of the tree.\n        def getIndex(index):\n            if index == len(heights):\n                return -1\n            return heights[index]\n\n        def getCenter(index):\n            if index == 0:\n                return 0\n            else:\n                return getIndex(index - 1) + heights[index]\n\n        # The center index is the index of the tree.\n        def getCenterIndex(centerIndex):\n            if centerIndex == 0:\n                return 0\n            else:\n                return getIndex(centerIndex - 1) + heights[centerIndex]\n\n        # We have to do the first check to see if it's the center.\n        # If yes, we need to add the height of the tree to the index.\n        def getIndexCenter(index):\n            if index == 0:\n                return 0\n            return getIndex(index - 1) + heights[index]\n\n        def check(index):\n            # If we found the center, we need to add the height of the tree to the index\n            if index == 0:\n                return 0\n            else:\n                return getIndex(index - 1) + heights[index]\n\n        def getCenterIndexCenter(centerIndex):\n            if centerIndex == 0:\n                return 0\n            else:\n                return getIndex(centerIndex - 1) + heights[centerIndex]\n\n        # Now we'll have to check if the index is greater than the len(heights)\n        # If yes, we need to check that the index is less than the len(heights).\n        # We'll have to find the smallest index that is larger than the index in the list\n        def checkIndex(index):\n            # If the index is greater than the len(heights), we have to find the smallest index\n            # that is less than the index in the list.\n            if index < len(heights) and heights[index] > heights[index - 1]:\n                return index - 1\n            # If the index is smaller than the len(heights), we have to check to see if we can\n            # find the smallest index we can. If we can, we'll index the height of the tree\n            # to the index.\n            # If the index is smaller than the len(heights) or larger than the index in the list,\n            # we need to return -1.\n            else:\n                return -1\n\n        # Build the list of all the indexes of all the nodes in the tree.\n        indexes = []\n        for index in range(len(heights)):\n            indexes.append(getIndex(index))\n\n        # Now, we have to check if we need to add the height of the tree to the indexes.\n        # If we are, we'll need to find the minimum height of the tree.\n        # If we don't, we'll need to check the index.\n        # If it is greater, we'll need to add the height to the index.\n        # If it is smaller, we'll need to check the indexes.\n        # We'll have to go to the center index, because we don't want to insert the height of\n        # the tree to the index, just the center index.\n        # And we'll have to check the center index.\n        # If it is greater, we'll have to add the height to the index.\n        # If it is smaller, we'll have to check the indexes.\n        centerIndex = getCenterIndex(len(heights) // 2)\n        centerIndexCenter = getCenterIndexCenter(centerIndex)\n        for index in indexes:\n            if getIndex(index) > centerIndex:\n                index = check(index)\n            elif getIndexCenter(index) > centerIndexCenter:\n                index = checkIndex(index)\n\n        # Once we've got the index, we'll need to check the center index.\n        # We'll have to go to the center index, because we don't want to insert the height of\n        # the tree to the index, just the center index.\n        # And we'll have to check the center index.\n        # If it is greater, we'll have to add the height to the index.\n        # If it is smaller, we'll have to check the indexes.\n        # We'll have to go to the center index, because we don't want to insert the height of\n        # the tree to the index, just the center index.\n        # And we'll have to check the indexes.\n        # If it is greater, we'll have to add the height to the index.\n        # If it is smaller, we'll have to check the indexes.\n        # Since the center index is the only index left, we'll have to remove the height of the\n        # tree from the index.\n        # We'll have"
    },
    {
        "number": 4298,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, D = map(int, stdin.split())\n    tree = [int(stdin.strip()) for stdin in stdin.split()]\n    s = set(tree)\n    tree.sort()\n    d = {}\n    for x in s:\n        if x not in d:\n            d[x] = 1\n        else:\n            d[x] += 1\n    print(min(d.values()))\n    return '0'\n'''\n"
    },
    {
        "number": 4298,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return str(solution_rec(input()))\n\ndef"
    },
    {
        "number": 4298,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, D = map(int, stdin.split())\n    trees = []\n    for _ in range(N):\n        trees.append(int(stdin.split()[0]))\n    for i in range(1, N):\n        trees[i] += i\n    for i in range(N-1, -1, -1):\n        trees[i] -= i\n    ans = 0\n    for j in range(N-1, -1, -1):\n        if j == 0:\n            ans += 1\n        else:\n            if trees[j] <= trees[j-1]:\n                ans += 1\n            else:\n                ans += 0\n    return str(ans)\n\n\"\"\"\n\nclass Solution:\n    def solve(self,N,D):\n        ret = 0\n        N = N - 1\n        D = D - 1\n        for i in range(N):\n            ret += i + 1\n        for i in range(D, -1, -1):\n            ret += i + 1\n        print(ret)\n        return ret\n\n\ndef"
    },
    {
        "number": 4298,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, d = map(int, stdin.split(' '))\n    trees = [i for i in range(1, n + 1)]\n    \n    print(len(trees))\n    print(trees[d])\n    print(trees[:d - 1])\n    print(trees[d + 1:])\n    \n    print(len(set(trees[:d - 1])))\n    print(len(set(trees[d + 1:])))\n    \n    return '1'\n\"\"\"\n\ndef"
    },
    {
        "number": 4298,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split(' ')[0])\n    D = int(stdin.split(' ')[1])\n    return str(sum([N-1,N,D-1])%(N+D+1))\n\ndef"
    },
    {
        "number": 4299,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n  x = []\n  for i in stdin:\n    if i == \"p\":\n      x.append(\"pon\")\n    else:\n      x.append(i)\n  return \"\".join(x)\n\"\"\"\ndef"
    },
    {
        "number": 4299,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n"
    },
    {
        "number": 4299,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n  num = int(stdin)\n  if num % 10 == 2:\n    print('pon')\n  elif num % 10 == 3:\n    print('hon')\n  elif num % 10 == 4:\n    print('pon')\n  elif num % 10 == 5:\n    print('hon')\n  elif num % 10 == 6:\n    print('bon')\n  else:\n    print('bon')\n\n----Constraints----\n - N is a positive integer not exceeding 999.\n\"\"\"\n\ndef"
    },
    {
        "number": 4299,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = \"\"\n    for i in range(1, n + 1):\n        s += chr(i)\n    return s\n"
    },
    {
        "number": 4299,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pon = 0\n    bon = 0\n    for i in stdin:\n        if i.isdigit():\n            bon += int(i)\n        elif i.isalpha():\n            if int(i) in range(1, 10):\n                pon += 1\n            else:\n                bon += int(i)\n    return f\"pon: {pon}\\nbon: {bon}\"\n\n-----Sample Output-----\npon: 1\nbon: 0\n\"\"\"\n\ndef"
    },
    {
        "number": 4299,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(1, int(stdin)+1):\n        print('pon' if i%2 == 0 else 'bon')\n"
    },
    {
        "number": 4299,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\n-----Idea-----\n1. \u5148\u7528\u4e00\u500bint(stdin)\u505a\u4e00\u500b\u4f86\u8655\u7406,\n2. \u7528\u4e00\u500bfor \u5faa\u74b0\u7e7c\u7e8c\u7684int\u505a\u4e0b\u4e00\u500b\u904b\u7b97(\u639b\u8457\u4f7f\u7528print),\n3. \u4e58\u4e0a\u6211\u4eec\u60f3\u8981\u7684\u56db\u500b(\u524d\u9762\u5305\u542b\u8ff4\u5708)\u503c\uff0c\u4f86\u6c42\u548c\n4. \u770b\u4e0a\u4f86\u639b\u8457\u4f7f\u7528\u7684int\u505a\u4e0b\u4e00\u500b\u904b\u7b97\uff0c\u4f86\u6c42\u548c\n5. \u4f9d\u6b21\u7528\u4f86\u8a08\u7b97\u540c\u503c\u505a\u52a0\u51cf\u7684\u8ff4\u5708\u7684\u503c\n6. \u505a\u4e0b\u4e00\u500b\u904b\u7b97\uff0c\u4f9d\u6b21\u639b\u8457\u56db\u500b\u503c\u505a\u52a0\u51cf\u7684\u8ff4\u5708\u7684\u503c\n\n\"\"\"\nimport math\n\ndef"
    },
    {
        "number": 4299,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(int(stdin)):\n        print(i, end=\"\")\n    print(\"\")\n\n-----Examples-----\nsolution(\"16\") \u2192 pon\nsolution(\"2\") \u2192 bon\nsolution(\"6\") \u2192 bon\nsolution(\"7\") \u2192 bon\nsolution(\"8\") \u2192 bon\nsolution(\"9\") \u2192 bon\nsolution(\"10\") \u2192 bon\nsolution(\"99\") \u2192 bon\n\"\"\"\n\ndef"
    },
    {
        "number": 4299,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n  answer = ''\n  for idx, char in enumerate(stdin):\n    if char == 'N':\n      answer += 'pon'\n      answer += str(idx+1)\n      break\n    answer += char\n  return answer\n\ndef"
    },
    {
        "number": 4299,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace('pon', 'pon').replace('bon', 'bon')\n\n\ndef"
    },
    {
        "number": 4300,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    import collections\n    from functools import lru_cache\n\n    N = int(stdin)\n    d = [list(map(int, input().split())) for _ in range(N)]\n    takoyaki = [collections.Counter(d[i][j] for j in range(N)) for i in range(N)]\n    takoyaki_d = [list(takoyaki[i]) for i in range(N)]\n    l = lru_cache(None)\n    s = collections.Counter(takoyaki_d)\n    res = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            res += s[takoyaki[i][j]] + s[takoyaki[j][i]]\n    return str(res)"
    },
    {
        "number": 4300,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    d_1 = list(map(int, stdin.strip().split()))\n    d_2 = list(map(int, stdin.strip().split()))\n    d_3 = list(map(int, stdin.strip().split()))\n    d_sum = sum(d_1) + sum(d_2) + sum(d_3)\n    s = str(d_sum)\n    return str(int(s))\n\nprint(solution(input()))"
    },
    {
        "number": 4300,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    d_1 = int(stdin[1])\n    d_2 = int(stdin[2])\n    d_3 = int(stdin[3])\n    numbers = [d_1, d_2, d_3]\n    numbers = sorted(numbers)\n    length = len(numbers)\n    answer = 0\n    for i in range(length):\n        for j in range(i, length):\n            sum = numbers[i]*numbers[j]\n            answer += sum\n    return str(answer)\n"
    },
    {
        "number": 4300,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    d_1 = list(map(int, stdin.split()))\n    d_2 = list(map(int, stdin.split()))\n    d_3 = list(map(int, stdin.split()))\n    d_1.sort()\n    d_2.sort()\n    d_3.sort()\n    res = 0\n    for i in range(N):\n        res = res + (d_1[i]*d_2[i]*d_3[i])\n    return str(res)\n"
    },
    {
        "number": 4300,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    d_1 = list(map(int, stdin.split()))\n    d_2 = list(map(int, stdin.split()))\n    \n    result = 0\n    for i in range(0, N):\n        for j in range(0, i+1):\n            result += d_1[j] * d_2[i-j]\n    \n    print(result)\n"
    },
    {
        "number": 4300,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    input()\n    N = int(stdin[0])\n    d_1 = map(int,stdin[1].split())\n    d_2 = map(int,stdin[2].split())\n    d_3 = map(int,stdin[3].split())\n    d_1, d_2, d_3 = sorted(d_1), sorted(d_2), sorted(d_3)\n    result = 0\n    for i in range(N):\n        d = d_1[i] + d_2[i] + d_3[i]\n        result += d\n    print(result)\n"
    },
    {
        "number": 4300,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    d_1, d_2 = map(int, stdin.split())\n    d_2 = d_2 - 1\n    d_1 = d_1 - 1\n    return str(sum(sorted([d_1, d_2])))"
    },
    {
        "number": 4300,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n  n, d_1, d_2, d_3 = map(int, stdin.split())\n  return str(sum([int(x) * (int(y) - int(d_1 - int(d_2 - int(d_3 - int(x))) * 0.5)) for x in range(1, n + 1) for y in range(1, n + 1) if int(x) * (int(y) - int(d_1 - int(d_2 - int(d_3 - int(x))) * 0.5) > 0)])"
    },
    {
        "number": 4300,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, d_1, d_2, d_3 = map(int, stdin.split())\n    return str(d_1*d_2*d_3*(N-1)//2 + N*(N-1)//2 + N//2 + (N-1)*(N-2)*d_1//2*d_2//2*d_3//2)"
    },
    {
        "number": 4300,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    d_1, d_2, d_3 = list(map(int, stdin.split(\" \")))\n    d_list = [d_1, d_2, d_3]\n    nums = []\n    for i in range(3):\n        nums.append(list(map(int, stdin.split(\" \"))))\n    sum_ = 0\n    for i in range(n):\n        sum_ += nums[i][i]\n    if d_list[0] < sum_ < d_list[1]:\n        for i in range(3):\n            sum_ -= nums[i][i]\n        for i in range(3):\n            sum_ += nums[i][i]\n        sum_ += sum_\n        sum_ -= d_list[1]\n    if d_list[1] < sum_ < d_list[2]:\n        for i in range(3):\n            sum_ -= nums[i][i]\n        for i in range(3):\n            sum_ += nums[i][i]\n        sum_ += d_list[2]\n        sum_ -= d_list[2]\n    sum_ += sum_\n    return str(sum_)\n"
    },
    {
        "number": 4301,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    data = [list(map(int, input().split())) for _ in range(n)]\n\n    def find_max_num(i, max_num):\n        for j in range(i+1, n):\n            if data[j][0] > max_num:\n                max_num = data[j][0]\n        return max_num\n\n    max_num = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            max_num = max(max_num, find_max_num(i, max_num))\n\n    return str(max_num)\n\nimport sys\n"
    },
    {
        "number": 4301,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    L = [list(map(int, stdin.split())) for _ in range(N)]\n    for i in range(N):\n        for j in range(N):\n            if j >= i:\n                continue\n            else:\n                if L[i][j] > L[i][j - 1]:\n                    L[i][j] = L[i][j - 1]\n                else:\n                    continue\n    for i in L:\n        print(i[i.index(1)])\n    return max(L[-1])\n"
    },
    {
        "number": 4301,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    p = list(map(int, stdin.split()))\n    a = [0]*(n+1)\n    for i in range(1, n+1):\n        a[i] = p[i-1]\n    for i in range(1,n+1):\n        for j in range(1,n+1):\n            if a[j]>a[j-1]:\n                a[j]=a[j-1]\n    return \" \".join(map(str, a))"
    },
    {
        "number": 4301,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n  n = int(stdin)\n  nums = []\n  for _ in range(n):\n    nums.append(int(stdin.strip()))\n  max_num = nums[n-1]\n  for i in range(n-2, -1, -1):\n    if nums[i] > max_num:\n      max_num = nums[i]\n  \n  return str(max_num)\n\n\ndef"
    },
    {
        "number": 4301,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n  return stdin.strip().split(\"\\n\")[0]\n"
    },
    {
        "number": 4301,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time complexity: O(n)\n    Space Complexity: O(n)\n    \"\"\"\n    n = int(stdin.strip().split(' ')[-1])\n    A = list(map(int, stdin.strip().split(' ')))\n    A = sorted(A)\n    ans = A[-n:]\n    for i in range(n-1, len(A)-1, -1):\n        ans.append(A[i])\n    print(ans)\n    return '\\n'.join(map(str, ans))\n"
    },
    {
        "number": 4301,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, *A = map(int, stdin.split())\n    result = [0 for _ in range(n)]\n    result[0] = A[0]\n    for i in range(1, n):\n        result[i] = max(A[i], result[i-1])\n    for i in range(n-2, -1, -1):\n        result[i] = max(A[i], result[i+1])\n    return str(max(result))\n"
    },
    {
        "number": 4301,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, input().split()))\n    a = sorted(a)\n    print(a[n - 1])"
    },
    {
        "number": 4301,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    nums = []\n    for _ in range(n):\n        nums.append(int(stdin))\n    \n    return max(nums)\n"
    },
    {
        "number": 4301,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    numbers = [int(i) for i in stdin.split()]\n    A = sorted(numbers)[::-1]\n    answer = 0\n    for i in range(len(A)):\n        if A[i] == A[i+1]:\n            answer = max(answer, A[i])\n        else:\n            answer = max(answer, A[i])\n    return str(answer)"
    },
    {
        "number": 4302,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    B = [0]*n\n    \n    for i in range(n):\n        B[i] = B[i-1]\n    B[n-1] += m\n    \n    for i in range(1, n):\n        B[i] += max(A[i-1], A[i])\n    \n    return str(max(B))\n'''"
    },
    {
        "number": 4302,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    coins = min(A, B)\n    dp = [0 for _ in range(coins+1)]\n    dp[0], dp[1] = 0, 1\n    for c in range(2, coins+1):\n        for x in range(1, c):\n            dp[c] = dp[c] + dp[x]\n    return str(coins-dp[-1])\n\"\"\"\n\ndef"
    },
    {
        "number": 4302,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    def DP(A, B, X):\n        if A <= 0 or B <= 0:\n            return 0\n        if A == X:\n            return B\n        if B == X:\n            return A\n        A = DP(A, B, X-1)\n        B = DP(A, B, X-A)\n        return max(A, B)\n    return str(DP(A, B, A))\n"
    },
    {
        "number": 4302,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split()\n    max_coins = 0\n    for i in range(len(a)):\n        size = int(a[i][:-1])\n        if size == 1:\n            max_coins = max(max_coins, i+1)\n        else:\n            max_coins = max(max_coins, i+1)\n    return str(max_coins)\n\"\"\"\n\ndef"
    },
    {
        "number": 4302,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(i) for i in stdin.split()]\n    def get_coins(x):\n        return [i + j for i, j in zip([a] * x, [b] * x)]\n    \n    return''.join(str(i) for i in get_coins(a) + get_coins(b))"
    },
    {
        "number": 4302,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    result = 0\n    a, b = map(int, stdin.split(' '))\n    if a > b:\n        result = a + b\n    else:\n        result = a - b\n    return str(result)\n\"\"\""
    },
    {
        "number": 4302,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    answer = 0\n    num_cnt = 1\n    for i in range(len(stdin)):\n        if stdin[i] == 'A':\n            num_cnt += 1\n        else:\n            num_cnt -= 1\n            if num_cnt == 0:\n                answer = i + 1\n                break\n    return answer\n\nprint(solution(\"5 3\")) # 7\nprint(solution(\"3 4\")) # 6\nprint(solution(\"10 7\")) # 4\nprint(solution(\"10 5\")) # 2\nprint(solution(\"5 9\")) # 2\nprint(solution(\"4 4\")) # 2\nprint(solution(\"2 4\")) # 2"
    },
    {
        "number": 4302,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    coins = [0] * A\n    for _ in range(B):\n        n = int(input())\n        for i in range(n):\n            coins[i] += 1\n    for i in range(A, 0, -1):\n        if coins[i] == 0:\n            continue\n        for j in range(i * 2, 0, -1):\n            if coins[j]!= 0:\n                coins[j] -= 1\n                break\n    return str(sum(coins))"
    },
    {
        "number": 4302,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    max_coins = min(A, B)\n    count = A - B\n    while count > 0:\n        if max_coins >= count:\n            max_coins -= count\n        count = A - B\n    if count > 0:\n        return str(count)\n    return str(max_coins)"
    },
    {
        "number": 4302,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    answer = 0\n    for i in range(5):\n        a, b = map(int, stdin.split())\n        if a < b:\n            answer += a - b\n        else:\n            answer += b - a\n    return str(answer)\n"
    },
    {
        "number": 4303,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    x_i = list(map(int, stdin.split()))\n\n    def is_same(x_i, x_2):\n        return x_i[0] == x_2 and x_i[1] <= x_2\n    def is_same2(x_i, x_3):\n        return x_i[0] == x_3 and x_i[1] <= x_3\n    \n    for i in range(len(x_i)):\n        if x_i[i] >= K:\n            x_i[i] = K\n\n    for i in range(len(x_i)-1):\n        if x_i[i] <= K:\n            if is_same(x_i, x_i[i+1:]):\n                x_i[i] += 1\n            elif is_same2(x_i, x_i[i+1:]):\n                x_i[i] += 1\n            else:\n                x_i[i] = K\n\n    return str(sum(x_i))\n    \n"
    },
    {
        "number": 4303,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Generate the number of arguments from the input\n    N, K = map(int, stdin.split())\n\n    # Store the x coordinate\n    x_coordinate = list(map(int, stdin.split()))\n\n    # Initialize the time\n    time = 0\n\n    # Move the candles from coordinate 0 to -10\n    # The higher value of the coordinate is closer to the ground\n    x_coordinate.pop(0)\n\n    # Initialize the direction from -10 to 10\n    direction = [0, -1]\n\n    # Move the candles from coordinate -10 to 10\n    # The higher value of the coordinate is closer to the ground\n    x_coordinate.pop(-1)\n\n    # Initialize the time\n    time = 0\n\n    # Go through the coordinates from the second to the last\n    for i in range(N):\n        time += abs(x_coordinate[i] - x_coordinate[i - 1])\n        direction[0] += (x_coordinate[i] - x_coordinate[i - 1])\n        direction[1] += 1\n\n        # If the direction is opposite from the previous direction\n        if direction[1] % 2 == 1:\n            direction[0] *= -1\n            direction[1] -= 1\n            time += 1\n\n    # If the direction is opposite from the previous direction\n    if direction[1] % 2 == 1:\n        direction[0] *= -1\n        direction[1] -= 1\n        time += 1\n\n    # If the direction is opposite from the previous direction\n    else:\n        direction[1] *= -1\n        direction[0] += 1\n        time += 1\n\n    print(time)\n    return str(time)\n"
    },
    {
        "number": 4303,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    x_1, x_2, x_3 = map(int, stdin.split())\n    x_i = x_1 - x_2 + x_3\n    x_i = abs(x_i)\n    candles = []\n    max_time = 0\n    for _ in range(N):\n        candles.append(list(map(int, stdin.split())))\n        max_time = max(max_time, candles[-1][0]-candles[-2][0])\n        candles.pop(0)\n    return str(max_time)\n"
    },
    {
        "number": 4303,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x_i, x_K = map(int, stdin.split())\n    \n    n = 0\n    \n    for i in range(x_i, x_i+n):\n        n += 1\n        x = x_i+i\n        if n%K == 0:\n            x = x_i+i\n            n = 0\n        else:\n            n += 1\n    \n    x = x_i+x_i\n    \n    if n % K == 0:\n        x = x_i+i\n        n = 0\n    else:\n        n += 1\n    \n    answer = n + 1\n    return str(answer)\n"
    },
    {
        "number": 4303,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    x_lst = []\n    for _ in range(N):\n        x_lst.append(int(input()))\n    x_lst = sorted(x_lst)\n    min_time = 999999999\n    for i in range(N):\n        min_time = min(min_time, x_lst[i] * (i+1) * K)\n    print(min_time)\n    return str(min_time)\n\nprint(solution(\"5 3\"))\n"
    },
    {
        "number": 4303,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    x_i, *_ = list(map(int, stdin.split()))\n    candles = [0] + sorted(list(map(int, stdin.split())))\n    candles.insert(0, x_i)\n    time = 0\n    while K > 0:\n        time += 1\n        K -= 1\n        candles[-1] += 1\n        if candles[-1] > candles[-2]:\n            candles[-2], candles[-1] = candles[-1], candles[-2]\n    return str(time)\n"
    },
    {
        "number": 4303,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    x_i = list(map(int, stdin.split()))\n    x_1, x_2, x_3 = 0, 0, 0\n    answer = 0\n    for i in range(N):\n        x_i[i] -= 1\n        x_3 += x_i[i]\n        x_1 += abs(x_i[i])\n        x_2 += abs(x_i[i] * 2)\n        if x_i[i] > 0:\n            answer = max(answer, x_1 + x_2 + x_3)\n        else:\n            answer = max(answer, x_2 + x_3)\n    return str(answer)\n    pass\n\n\"\"\"\nN, K = map(int, input().split())\nx_i = list(map(int, input().split()))\nx_1, x_2, x_3 = 0, 0, 0\nanswer = 0\nfor i in range(N):\n    x_i[i] -= 1\n    x_3 += x_i[i]\n    x_1 += abs(x_i[i])\n    x_2 += abs(x_i[i] * 2)\n    if x_i[i] > 0:\n        answer = max(answer, x_1 + x_2 + x_3)\n    else:\n        answer = max(answer, x_2 + x_3)\nprint(answer)"
    },
    {
        "number": 4303,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, K = list(map(int, stdin.split()))\n    x_i = list(map(int, stdin.split()))\n    x_1, x_2, x_3, x_4 = 0, 1, 2, 3\n    count = 0\n    x_i = list(range(N))\n    for i in range(N):\n        if x_i[i] < x_i[i - 1]:\n            x_i[i] = x_i[i - 1] + 1\n    x_i.sort()\n    x_i.reverse()\n    for i in range(N - 1):\n        if x_i[i] == x_i[i + 1]:\n            count += 1\n        elif count == 0:\n            x_1 = x_2 = x_3 = x_4 = x_i[i]\n        elif count == 1:\n            if x_1 < x_2 < x_3 < x_4:\n                x_1 = x_2 = x_3 = x_4 = x_i[i]\n            else:\n                count -= 1\n        else:\n            if x_1 == x_2 == x_3 == x_4:\n                x_1 = x_2 = x_3 = x_4 = x_i[i]\n            elif x_1 == x_2 or x_1 == x_3 or x_1 == x_4:\n                if x_1 < x_2 < x_3 < x_4:\n                    x_1 = x_2 = x_3 = x_4 = x_i[i]\n                else:\n                    x_1 = x_2 = x_3 = x_4 = x_i[i]\n    return str(count)\n\n\n----------------\n\nN, K = list(map(int, input().split()))\nx_i = list(map(int, input().split()))\nx_i = list(range(N))\nx_i.sort()\nx_i.reverse()\nx_i = list(range(N - 1))\nx_i.sort()\nx_i.reverse()\n"
    },
    {
        "number": 4303,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n  N, K = [int(x) for x in stdin.split()]\n  x = [int(x) for x in stdin.split()]\n  x.sort()\n  \n  N = len(x)\n  candles = 0\n  timer = 0\n  \n  for i in range(N):\n    x_i = x[i]\n    candles += x_i*(K-x_i)\n    timer += x_i\n  \n  return str(timer/candles)\n"
    },
    {
        "number": 4303,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    x_1, x_2, x_N = map(int, stdin.split())\n    coordinates = list(range(x_1, x_2 + 1, 1))\n    timing = 0\n    for i in range(x_N, N + 1):\n        timing += abs(coordinates.pop(0) - i)\n    if K == 1:\n        print(timing)\n    else:\n        answer = timing\n        for i in range(x_N - 1, 0, -1):\n            timing += abs(coordinates.pop(0) - i)\n        answer += timing\n        for i in range(x_N - 1, 0, -1):\n            timing += abs(coordinates.pop(0) - i)\n        answer += timing\n        for i in range(x_N - 1, 0, -1):\n            timing += abs(coordinates.pop(0) - i)\n        answer += timing\n        for i in range(x_N - 1, 0, -1):\n            timing += abs(coordinates.pop(0) - i)\n        answer += timing\n    return str(answer)\n"
    },
    {
        "number": 4304,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    l, w = map(int, stdin.split())\n    l = l - 1\n    w = w - 1\n    result = 0\n    for i in range(l, w):\n        result += (i - l) * (l - i + 1)\n    print(result)\n"
    },
    {
        "number": 4304,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    a = int(a)\n    b = int(b)\n    return str(a * b)\n\"\"\"\n\ndef"
    },
    {
        "number": 4304,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    solution = 1\n    if n > a and n > b:\n        solution = n - a\n    elif n > a and n < b:\n        solution = n - b\n    elif n < a and n < b:\n        solution = b - n\n    return str(solution)\n"
    },
    {
        "number": 4304,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    # https://www.hackerrank.com/challenges/snowing-numbers/problem?isFullScreen=true\n    if b - a < 1:\n        print(0)\n    else:\n        result = 1\n        snow_cover = 0\n        diff = b - a\n        # for i in range(diff):\n        #     snow_cover += 1\n        for i in range(1, int(diff // 2) + 1):\n            # print(i)\n            if diff % i == 0:\n                # print(i)\n                # print(a + i)\n                # print(b - a - i)\n                snow_cover += 1\n            else:\n                # print(i)\n                # print(a + i + 1)\n                # print(b - a - i)\n                snow_cover += 2\n        # print(snow_cover)\n        # print(b)\n        print(snow_cover)\n        if snow_cover < diff:\n            print(0)\n        else:\n            print(snow_cover)\nsolution(\"3 10\")\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4304,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    s = list(map(int,stdin.split()))\n    s.sort()\n    x = 0\n    for i in range(n-1):\n        if s[i+1] - s[i] <= 10:\n            x += 1\n    return str(x)\n"
    },
    {
        "number": 4304,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin)+int(stdin+str(int(stdin)+int(stdin))+int(stdin)))\n\"\"\"\n"
    },
    {
        "number": 4304,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n  c = int(stdin.split()[0])\n  b = int(stdin.split()[1])\n  if c % 2 == 0:\n    if b % 2 == 0:\n      return str(b/2)\n    else:\n      return str(b/2+1)\n  else:\n    return str(b/2)\n\n-----Sample Output-----\n1\n\nThe heights of the two towers are 10 meters and 15 meters, respectively.\nThus, we can see that the depth of the snow cover is 2 meters."
    },
    {
        "number": 4304,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    a -= 1\n    b -= 1\n    return str(abs(b - a)) if abs(b - a) <= 1 else 'Not possible'\n\"\"\""
    },
    {
        "number": 4304,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a,b=map(int,stdin.split())\n    if a+b<2:\n        return '0'\n    else:\n        return str(b+a+1)\n    \"\"\"\n    //using loop to find the max and min of the last two elements in the list\n    max=0;min=0\n    for i in range(len(nums)):\n        if nums[i]>max:\n            max=nums[i];\n        if nums[i]<min:\n            min=nums[i];\n    \n    #find the max and min of the last two elements\n    for i in range(len(nums)):\n        if nums[i]>=max:\n            max=nums[i];\n        if nums[i]<=min:\n            min=nums[i];\n    \n    #find the sum of all the numbers in the list from min to max\n    sum=max+min\n    return str(sum);\n    \"\"\"\nprint(solution(input()))\n"
    },
    {
        "number": 4304,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.split(' ')[0])\n    b = int(stdin.split(' ')[1])\n    c = abs(a-b)\n    print(c)\n    return str(c)\n\nprint(solution(\"2 4 0 4 1 4 8\"))\n\ndef"
    },
    {
        "number": 4305,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    monster = map(int, stdin.split())\n    heights = list(map(int, stdin.split()))\n\n    def check(sum):\n        return sum == sum[::-1]\n\n    n = len(monster)\n    heights.reverse()\n    minheap = []\n    i = 0\n    while i < n:\n        minheap.append(heights[i])\n        while not check(minheap):\n            heights.pop(0)\n        if not heights:\n            break\n        minheap.append(heights[0])\n        i += 1\n\n    print(len(minheap))\n    while True:\n        for i in range(n):\n            if minheap[0] < minheap[1]:\n                heights.remove(heights[0])\n                heights.insert(0, heights[0] - 1)\n        if not heights:\n            break\n        heights.remove(heights[0])\n        heights.insert(0, heights[0] - 1)\n        minheap.pop()\n\n    return''.join(map(str, heights))\n\n\ndef"
    },
    {
        "number": 4305,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    import math\n    def is_valid(a,b):\n        return 0 <= a <= 10**4 and 0 <= b <= 10**4\n    def power(a,b):\n        return math.pow(10,a) * math.pow(10,b)\n\n    def check(arr, i, j):\n        if j == len(arr):\n            return arr[i] == 1\n        return arr[i] == arr[j]\n\n    N = int(stdin.strip())\n    A = list(map(int, stdin.strip().split()))\n    B = list(map(int, stdin.strip().split()))\n    D = [0] * N\n    if N == 1:\n        return 1\n\n    if len(A) <= 1:\n        if is_valid(A[0],B[0]):\n            D[0] = power(A[0],B[0])\n        else:\n            D[0] = power(A[0],B[0])\n    else:\n        D[0] = power(A[0],B[0]) + power(A[1],B[1])\n    \n    for i in range(2,N):\n        D[i] = power(A[i],B[i]) + power(A[i-1],B[i-1])\n    \n    answer = 0\n    for i in range(N):\n        if not check(D,i,i):\n            answer += 1\n    print(answer)\n    return answer"
    },
    {
        "number": 4305,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = input()\n    s = s.replace('H', '0').replace('A', '1').replace(' ','')\n    a = int(s)\n    if a>1:\n        print(a-3)\n    elif a>=1:\n        print(a-2)\n    elif a>0:\n        print(a-1)\n    else:\n        print(0)\n        \n"
    },
    {
        "number": 4305,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''"
    },
    {
        "number": 4305,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if b < a:\n        return 'Yes'\n    elif b > a:\n        return 'No'\n    else:\n        return 'Yes'\n\n-----Constraints-----\n - 1 \\leq H \\leq 10^4\n - 1 \\leq A \\leq 10^4\n - All values in input are integers.\n\"\"\"\n\ndef"
    },
    {
        "number": 4305,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n        \n\ndef"
    },
    {
        "number": 4305,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    b = int(stdin)\n    c = int(stdin)\n    a = abs(a)\n    b = abs(b)\n    c = abs(c)\n    if a > b:\n        if a > c:\n            answer = '1'\n        else:\n            answer = '2'\n    elif a < b:\n        if a < c:\n            answer = '3'\n        else:\n            answer = '4'\n    else:\n        if a == c:\n            answer = '1'\n        else:\n            answer = '2'\n    return answer\n"
    },
    {
        "number": 4305,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    H, A = map(int, stdin.split())\n    if H <= 0 or A <= 0:\n        return 0\n    if A <= 0:\n        return H - A\n    answer = 0\n    for i in range(1, H):\n        answer += i * (H - i)\n    for i in range(1, H):\n        answer -= i * i\n    return answer\n"
    },
    {
        "number": 4305,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c = map(int, stdin.split())\n\n    ans = 0\n\n    if n == 1:\n        if a <= 0 or b <= 0 or c <= 0:\n            return str(1)\n        else:\n            return str(a + b + c - 1)\n\n    if a >= 0 and b >= 0 and c >= 0:\n        if a + b + c == 0:\n            return str(2)\n        else:\n            return str(a + b + c - 1)\n    else:\n        return str(n - 1)\n'''\n\ndef"
    },
    {
        "number": 4305,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # ---Code---\n    num_attacks = 0\n    prev_health = 0\n    max_health = 10\n    curr_health = 0\n    res = 0\n    n = 0\n    for i, line in enumerate(stdin.splitlines()):\n        command, *args = line.split()\n        if command == \"begin\":\n            if args == [\"H\"]:\n                num_attacks += 1\n                curr_health -= 1\n        elif command == \"end\":\n            if args == [\"A\"]:\n                num_attacks += 1\n                curr_health += 1\n            else:\n                num_attacks += 1\n        elif command == \"attack\":\n            if curr_health < max_health:\n                num_attacks += 1\n                prev_health = curr_health\n                curr_health = 0\n        elif command == \"solve\":\n            if prev_health!= 0:\n                curr_health = prev_health\n                max_health = curr_health\n            if curr_health == 0:\n                num_attacks += 1\n                res += 1\n            else:\n                num_attacks += 1\n                curr_health = 0\n    return str(num_attacks)\n"
    },
    {
        "number": 4306,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = []\n    b = []\n    c = []\n    for i in range(n):\n        a.append(list(map(int, stdin.split())))\n    for i in range(k):\n        b.append(list(map(int, stdin.split())))\n    for i in range(k):\n        c.append(list(map(int, stdin.split())))\n    def dijkstra(start):\n        distance = [float('inf') for i in range(n)]\n        distance[start] = 0\n        Q = []\n        heapq.heappush(Q, (0, start))\n        while Q:\n            dist, now = heapq.heappop(Q)\n            if distance[now] < dist:\n                continue\n            for next, w in c[now]:\n                next_dist = dist + w\n                if next_dist < distance[next]:\n                    distance[next] = next_dist\n                    heapq.heappush(Q, (next_dist, next))\n        return distance\n    answer = dijkstra(0)\n    return str(answer[-1])\n"
    },
    {
        "number": 4306,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    if (A+B)%2 == (C+D)%2:\n        return \"0\"\n    else:\n        return str(50+(A+B+C+D)/2)\n\n'''\n\nimport math\n\ndef"
    },
    {
        "number": 4306,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split(' '))\n    num_of_switch = int(y - x)\n    num_of_switch += 1\n    num_of_switch = 100 - num_of_switch\n    num_of_switch = 100 * num_of_switch // 100\n    return str(num_of_switch)"
    },
    {
        "number": 4306,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    a.sort()\n    b = list(map(int, stdin.split()))\n    b.sort()\n    a = set(a)\n    b = set(b)\n    return str(len(a & b))"
    },
    {
        "number": 4306,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    if a == b == c == d == 0:\n        return '0'\n    elif a == b == c == d == 1:\n        return str(50)\n    else:\n        a -= 1\n        b -= 1\n        c -= 1\n        d -= 1\n        return str(50 - (50/100)) +'s'\n"
    },
    {
        "number": 4306,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a,b,c,d = list(map(int,stdin.split()))\n    t = time.time()\n    ans = 0\n    for _ in range(max(a,b,c,d)):\n        if a==0:\n            if b==0:\n                ans+=100\n            else:\n                ans+=75\n        elif b==0:\n            if a==0:\n                ans+=75\n            else:\n                ans+=100\n        else:\n            if a==0:\n                if b==0:\n                    ans+=100\n                else:\n                    ans+=75\n            elif b==0:\n                if a==0:\n                    ans+=100\n                else:\n                    ans+=75\n            else:\n                if a==0:\n                    ans+=75\n                else:\n                    if b==0:\n                        ans+=100\n                    else:\n                        ans+=75\n    t = time.time()-t\n    print(t)\n    print(ans)\nsolution(stdin)\n-----Constraints-----\n - 0\u2264A<B\u2264100\n - 0\u2264C<D\u2264100\n - All input values are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:  \nA B C D\n\n-----Output-----\nPrint the length of the duration (in seconds) in which both Alice and Bob were holding down their buttons.\n\n-----Sample Input-----\n0 75 25 100\n\n-----Sample Output-----\n50\n\nAlice started holding down her button 0 second after the start-up of the robot, and released her button 75 second after the start-up.\n\nBob started holding down his button 25 second after the start-up, and released his button 100 second after the start-up.\n\nTherefore, the time when both of them were holding down their buttons, is the 50 seconds from 25 seconds after the start-up to 75 seconds after the start-up.\ndef"
    },
    {
        "number": 4306,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A,B,C,D = map(int,stdin.split())\n    l = ((A+B+C+D)%100)//100\n    print(l)\n    return str(l)\n\ndef"
    },
    {
        "number": 4306,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    answer = 0\n    for _ in range(int(stdin.strip())):\n        answer += 1\n        if stdin.strip().split(' ')[0] == 'A':\n            if stdin.strip().split(' ')[1] == 'B':\n                answer -= 1\n        elif stdin.strip().split(' ')[0] == 'C':\n            if stdin.strip().split(' ')[1] == 'D':\n                answer -= 1\n        answer += 1\n        answer += 1\n    return str(answer)\n'''\nclass Solution:\n    def calcTime(self, t: int, arr: List[str]) -> str:\n        ans = 0\n        for i in arr:\n            if i == 'A':\n                ans += 1\n            elif i == 'C':\n                ans -= 1\n            elif i == 'B':\n                ans += 1\n        return str(ans)"
    },
    {
        "number": 4306,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    answer = (b - a) * (d - c)\n    print(answer)\n    return str(answer)\n    # return str(100)\n    # return str(50)"
    },
    {
        "number": 4306,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    answer = 0\n    # \uc2a4\ud14c\uc774\uc9c0 \uc0dd\uc131\n    _str = list(stdin.strip().split())\n    _num = _str[0]\n    _dict = {'A':0, 'B':0, 'C':0, 'D':0}\n    # \ubaa8\ub4e0 \uc2a4\ud14c\uc774\uc9c0\uc5d0 \ub300\ud574\uc11c \ud568\uc218\ub85c \uc778\ud574 \uc774\ubbf8 \ubcbd\uc744 \uc138\uc6b0\uace0 \uc544\ub798 \ud504\ub9b0\ud2b8 \ud568\uc218\ub97c \ud638\ucd9c\ud55c\ub2e4.\n    def _switch(n:int):\n        global _num\n        if n > _num:\n            _num = n\n            return 1\n        return 0\n    def _forward(n:int):\n        global _dict\n        if n > _dict['A']:\n            _dict['A'] = n\n            return 1\n        return 0\n    def _backward(n:int):\n        global _dict\n        if n < _dict['D']:\n            _dict['D'] = n\n            return 1\n        return 0\n    def _left(n:int):\n        global _dict\n        if n > _dict['B']:\n            _dict['B'] = n\n            return 1\n        return 0\n    def _right(n:int):\n        global _dict\n        if n < _dict['C']:\n            _dict['C'] = n\n            return 1\n        return 0\n    # switch\uc774\ub77c\ub294 \uac83\uc740 \uc2a4\ud14c\uc774\uc9c0\ub97c \uc774\uc6a9\ud55c\ub2e4.\n    def switch(n:int):\n        return _switch(n)\n    def forward(n:int):\n        return _forward(n)\n    def backward(n:int):\n        return _backward(n)\n    def left(n:int):\n        return _left(n)\n    def right(n:int):\n        return _right(n)\n    # \uc2a4\ud14c\uc774\uc9c0\uc5d0 \ub300\ud574\uc11c \uc815\ubcf4\ub97c \ucd94\uac00\ud558\uace0, \uc774\ubbf8 \ubcbd\uc744 \uc138\uc6b0\uae30 \uc704\ud55c \uc544\ub798 \ud504\ub9b0\ud2b8 \ud568\uc218\ub97c \ud638\ucd9c\ud55c\ub2e4.\n    def _place(n:int):\n        global _dict\n        _dict[n] = 1\n        return 1\n    # \uacb0\uacfc\ub97c \uc561\uc158\ud654\ud558\uae30 \uc704\ud55c \ud568\uc218\n    def _intersect(n:int):\n        global _dict\n        if n in _dict:\n            _dict[n] = 1\n            return 1\n        return 0\n    # \uc561\uc158\ud654\ub41c \uc2a4\ud14c\uc774\uc9c0\uc5d0 \ub300\ud574\uc11c \uacb0\uacfc\ub97c \uc561\uc158\ud654\ud55c\ub2e4.\n    def _clear(n:int):\n        global _dict\n        if n in _dict:\n            _dict[n] = 0\n            return 0\n        return 1\n    # \uc561\uc158\ud654\ub41c \uc2a4\ud14c\uc774\uc9c0\uc5d0 \ub300\ud574\uc11c \uacb0\uacfc\ub97c \uc561\uc158\ud654\ud55c\ub2e4.\n    def _copy(n:int):\n        global _dict\n        _dict[n] = _dict[n]\n        return 1\n    # \uc561\uc158\ud654\ub41c \uc2a4\ud14c\uc774\uc9c0\uc5d0 \ub300\ud574\uc11c \uacb0\uacfc\ub97c \uc561\uc158\ud654\ud55c\ub2e4.\n    def _reverse(n:int):\n        global _dict\n        if n == _dict['D']:\n            _dict['D'] = _dict['A']\n            return 1\n        return 0\n    # \uc561\uc158\ud654\ub41c \uc2a4\ud14c\uc774\uc9c0\uc5d0 \ub300\ud574\uc11c \uacb0\uacfc\ub97c \uc561\uc158\ud654\ud55c\ub2e4.\n    def _reverse_left(n:int):\n        global _dict\n        if n == _dict['B']:\n            _dict['B'] = _dict['D']\n            return 1\n        return 0\n    # \uc561\uc158\ud654\ub41c \uc2a4\ud14c\uc774\uc9c0\uc5d0 \ub300\ud574\uc11c \uacb0\uacfc\ub97c \uc561\uc158\ud654\ud55c\ub2e4.\n    def _reverse_right(n:int):\n        global _dict\n        if n == _dict['C']:\n            _dict['C'] = _dict['B']\n            return 1\n        return 0\n    # \uc561\uc158\ud654\ub41c \uc2a4\ud14c\uc774\uc9c0\uc5d0 \ub300\ud574\uc11c \uacb0\uacfc\ub97c \uc561\uc158\ud654\ud55c\ub2e4.\n    def _switch_left(n:int):\n        global _dict\n        if n == _dict['A']:\n            _dict['A'] = _dict['B']\n            return 1\n        return 0\n    # \uc561\uc158\ud654\ub41c \uc2a4\ud14c\uc774\uc9c0\uc5d0 \ub300\ud574\uc11c \uacb0\uacfc\ub97c \uc561\uc158\ud654\ud55c\ub2e4.\n    def _switch_right(n:int):\n        global _dict\n        if n == _dict['D']:\n            _dict['D'] = _dict['C']\n            return 1\n        return 0\n    # \ub3d9\uc11c\ub0a8\ubd81\uc73c\ub85c \ud558\uc5ec, \ubc29\ud5a5\uc744 \uc815\ud574\uc9c4 \uc2a4\ud14c\uc774\uc9c0\uc5d0 \ub300\ud574\uc11c, \uc561\uc158\ud654\ub97c \ud558\ub294 \uac83\uc774 \uc544\ub2c8\ub77c \ud63c\uc790 \uc561\uc158\ud654\ub41c \uc2a4\ud14c\uc774\uc9c0\ub77c\ub294 \uac83\uc774\ub2e4.\n    def _move(n:int):\n        global _dict\n        if n == _dict['A']:\n            _dict['A'] = _dict['B']\n            return 1\n        if n == _dict['D']:\n            _dict['D'] = _dict['C']\n            return 1\n        return 0\n    # \uc561\uc158\ud654\ub41c \uc2a4\ud14c\uc774\uc9c0\uc5d0 \ub300\ud574\uc11c \uacb0\uacfc\ub97c \ufffd"
    },
    {
        "number": 4307,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n  # Your code here\n  n = int(stdin)\n  odd = 0\n  for i in range(1, n+1):\n    for j in range(1, i):\n      if(i%j==0):\n        odd+=1\n  return str(odd)"
    },
    {
        "number": 4307,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def is_prime_digit(n: int) -> bool:\n        if n == 0: return False\n        if n == 1: return False\n        if n in divisors: return False\n        return all(is_prime_digit(n//d) for d in divisors if n%d!= 0)\n    \n    divisors = set()\n    for i in range(2, int(math.sqrt(max(map(int, str(stdin).split()))))):\n        if is_prime_digit(i):\n            if i in divisors:\n                return str(i)\n            divisors.add(i)\n    return str(0)\n\n\n'''\n10\n109\n100\n200\n300\n\n'''\n"
    },
    {
        "number": 4307,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            for j in range(2, int(math.sqrt(i)) + 1):\n                if i % j == 0:\n                    break\n            else:\n                print(i)\n    return \"\"\n'''\n"
    },
    {
        "number": 4307,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    from itertools import combinations\n    def make_divisors(n):\n        divisors = []\n        for i in range(1, int(n**0.5)+1):\n            if n % i == 0:\n                divisors.append(i)\n                if n // i!= i:\n                    divisors.append(n//i)\n        return divisors\n    \n    def is_prime(n):\n        if n == 1:\n            return False\n        if n == 2 or n == 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        for i in range(5, int(n**0.5)+1, 6):\n            if n % i == 0 or n % (i+2) == 0:\n                return False\n        return True\n    \n    N = int(stdin)\n    divisors = make_divisors(N)\n    count = 0\n    for i in range(2, len(divisors)):\n        for j in range(2, N//divisors[i]-1):\n            if N % j == 0:\n                count += divisors[i]\n                break\n        if N % divisors[i] == 0:\n            count += divisors[i]\n            break\n    print(count)\n    return str(count)\n"
    },
    {
        "number": 4307,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    n = int(stdin)\n    for i in range(1, n):\n        if (i%2==0):\n            sum = 0\n            for j in range(1, int(i/2) + 1):\n                if (j%2==0):\n                    sum += int(j/2)\n            if sum%10 == 0:\n                print(i)\n                return i\n    print('-1')\n    return '-1'\n\"\"\"\n    from itertools import permutations\n    def solution(n):\n        if n<=0:\n            return 0\n        perm = permutations(range(1, n+1))\n        result = 0\n        for p in perm:\n            count = 0\n            for i in p:\n                if int(i)%2 == 0:\n                    count+=1\n            if count == 0:\n                result+=1\n        return result\n    \n    n = int(input())\n    print(solution(n))\n    return \n\"\"\"\n"
    },
    {
        "number": 4307,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    num_list = [i for i in range(2, N + 1) if is_prime(i) and is_even_divisible(i) and i!= 2]\n    print(len(num_list))\n    return str(len(num_list))"
    },
    {
        "number": 4307,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, res = map(int, stdin.split())\n    divisors = []\n    for i in range(1, N+1):\n        if (i+1)%8 == 0:\n            divisors.append(i)\n        elif i%8 == 0:\n            divisors.append(i)\n    return str(len(divisors))\n"
    },
    {
        "number": 4307,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, answer = map(int, stdin.split())\n    if n < 1 or n > 200:\n        return \"0\"\n    odd = 0\n    for i in range(1, n):\n        if is_prime(i) and i!= 2 and i!= 3:\n            odd += 1\n    if odd == 0:\n        return str(answer)\n    return str(odd)"
    },
    {
        "number": 4307,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    answer = 0\n    for i in range(1, n+1):\n        # for j in range(1, i//2+1):\n        #     if i%j==0:\n        #         answer+=1\n        count = 0\n        for j in range(1, i//2+1):\n            if i%j==0:\n                if (i-j)%j==0:\n                    count+=1\n        if count<=8:\n            answer+=1\n    return str(answer)\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4307,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    count = 0\n    for i in range(2, N+1):\n        sum_of_digits = 0\n        for j in range(1, i+1):\n            sum_of_digits += j\n        if sum_of_digits % 8 == 0:\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 4308,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n  N,K = [int(x) for x in stdin.split()]\n  if N==K:\n    return str(0)\n  A = list(map(int, stdin.split()))\n  def helper(k):\n    k = max(k,A[-1]) - min(A[-1],A[-2])\n    return k\n  for i in range(1,len(A)-1):\n    k = max(k,A[i] - A[i-1])\n    A[i] -= A[i-1]\n  return str(helper(K-1))+\"0\""
    },
    {
        "number": 4308,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.split(' ')[0])\n    N = int(stdin.split(' ')[1])\n    for i in range(1, N+1):\n        k = k + int(stdin.split(' ')[i])\n    return str(abs(k-min(k)))\n'''\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        N,K = map(int, stdin.split(' '))\n        \n        # Return maximum abs difference of the K-value of the maximum number of crackers received by all the users.\n        \n        # 1) find maximum number of crackers in all users\n        # 2) find minimum number of crackers received by all users\n        # 3) find the absolute difference between the number of crackers received by the users and the number of crackers in the smallest users\n        # 4) use the absolute difference as a metric to find minimum difference between the maximum number of crackers and the minimum number of crackers.\n        \n        # First calculate the max_num of crackers received by all users\n        max_num_user_crackers = 0\n        for i in range(1, N+1):\n            max_num_user_crackers += max(map(int, stdin.split(' ')[i].split(',')))\n        \n        # find the min_num of crackers received by all users\n        min_num_user_crackers = 0\n        for i in range(1, N+1):\n            min_num_user_crackers += min(map(int, stdin.split(' ')[i].split(',')))\n        \n        # Use absolute difference to find minimum difference between the maximum number of crackers received by all users and the minimum number of crackers received by all users\n        max_num_crackers = max(map(abs, map(int, stdin.split(' ')[1:N+1])), default=0)\n        min_num_crackers = min(map(abs, map(int, stdin.split(' ')[1:N+1])), default=0)\n        \n        # Use absolute difference as a metric to find minimum difference between the maximum number of crackers and the minimum number of crackers.\n        max_abs_diff = max(map(abs, map(int, stdin.split(' ')[1:N+1])), default=0)\n        min_abs_diff = min(map(abs, map(int, stdin.split(' ')[1:N+1])), default=0)\n        \n        # Use the absolute difference as a metric to find minimum difference between the absolute number of crackers received by all users and the absolute number of crackers received by all users.\n        max_abs_diff_user = max(map(abs, map(int, stdin.split(' ')[1:N+1])), default=0)\n        min_abs_diff_user = min(map(abs, map(int, stdin.split(' ')[1:N+1])), default=0)\n        \n        return str(max_abs_diff_user - max_abs_diff + min_abs_diff_user)\n"
    },
    {
        "number": 4308,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N,K=map(int,stdin.split())\n    l=len(set(map(int,stdin.split())))\n    ans=0\n    for i in range(l):\n        ans+=abs(N-K+i)\n    print(ans)\n    return str(ans)"
    },
    {
        "number": 4308,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    if N > K:\n        N, K = K, N\n    x = max(K, N)\n    y = min(K, N)\n    return str(abs(x - y))\n'''\n\n'''\n  # Brute Force\n  # O(n^2) and O(n) time complexity\n  # n is the size of the list\n  def solution(stdin):\n    N, K = map(int, stdin.split())\n    if N > K:\n        N, K = K, N\n    x = max(K, N)\n    y = min(K, N)\n    for k in range(x, y + 1):\n        if k * k == N:\n            return str(N)\n        if k * k > N:\n            return str(0)\n    return str(0)\n\n\n  # DP\n  # O(n^2) and O(n) time complexity\n  def solution(stdin):\n    N, K = map(int, stdin.split())\n    if N > K:\n        N, K = K, N\n    x = max(K, N)\n    y = min(K, N)\n    dp = [[0] * (y - x + 1) for _ in range(x)]\n    for k in range(x, y + 1):\n        dp[k][0] = N\n        for i in range(1, N - k + 1):\n            dp[k][i] = dp[k - 1][i - 1] + K\n    return str(min(dp[-1]))\n\n\n  # Runtime - O(n^2) and O(n) time\n  # O(n^2) space\n  def solution(stdin):\n    N, K = map(int, stdin.split())\n    if N > K:\n        N, K = K, N\n    x = max(K, N)\n    y = min(K, N)\n    dp = [0] * (y - x + 1)\n    for k in range(x, y + 1):\n        dp[k] = N\n        for i in range(1, N - k + 1):\n            dp[k] = min(dp[k], dp[k - 1] + K)\n    return str(min(dp))\n\n\n'''\n\n'''\n  # Brute Force\n  # O(n^2) and O(n) time complexity\n  # n is the size of the list\n  def solution(stdin):\n    N, K = map(int, stdin.split())\n    if N > K:\n        N, K = K, N\n    x = max(K, N)\n    y = min(K, N)\n    for k in range(x, y + 1):\n        dp = [0] * (y - x + 1)\n        for i in range(1, N - k + 1):\n            dp[i] = dp[i - 1] + K\n        for i in range(x, y - k + 1):\n            dp[i] = min(dp[i], dp[i - 1] + K)\n    return str(min(dp))\n\n\n  # DP\n  # O(n^2) and O(n) time complexity\n  def solution(stdin):\n    N, K = map(int, stdin.split())\n    if N > K:\n        N, K = K, N\n    x = max(K, N)\n    y = min(K, N)\n    dp = [0] * (y - x + 1)\n    for k in range(x, y + 1):\n        dp[k] = N\n        for i in range(1, N - k + 1):\n            dp[k] = min(dp[k], dp[k - 1] + K)\n    return str(min(dp))\n\n\n  # Runtime - O(n^2) and O(n) time\n  # O(n^2) space\n  def solution(stdin):\n    N, K = map(int, stdin.split())\n    if N > K:\n        N, K = K, N\n    x = max(K, N)\n    y = min(K, N)\n    dp = [0] * (y - x + 1)\n    for k in range(x, y + 1):\n        dp[k] = N\n        for i in range(1, N - k + 1):\n            dp[k] = min(dp[k], dp[k - 1] + K)\n    return str(min(dp))\n'''\n\n'''\n  # Brute Force\n  # O(n^2) and O(n) time complexity\n  # n is the size of the list\n  def solution(stdin):\n    N, K = map(int, stdin.split())\n    if N > K:\n        N, K = K, N\n    x = max(K, N)\n    y = min(K, N)\n    dp = [0] * (y - x + 1)\n    for k in range(x, y + 1):\n        dp[k] = N\n        for i in range(1, N - k + 1):\n            dp[k] = min(dp[k], dp[k - 1] + K)\n    return str(min(dp))\n\n\n  # DP\n  # O(n^2) and O(n) time complexity\n  def solution(stdin):\n    N, K = map(int, stdin.split())\n    if N > K:\n        N, K = K, N\n    x = max(K, N)\n    y = min(K, N)\n    dp = [0] * (y - x + 1)\n    for k in range(x, y + 1):\n        dp[k] = N\n        for i in range(1, N - k + 1):\n            dp[k] = min(dp[k], dp[k - 1] + K)\n    return str(min(dp))\n\n\n  # Runtime - O(n^2) and O(n) time\n  # O(n^2) space\n  def solution(stdin):\n    N, K = map(int, stdin.split())\n    if N > K:\n        N, K = K, N\n    x = max(K, N)\n    y = min(K, N)\n    dp = [0] * (y - x + 1)\n    for k in range(x, y + 1):\n        dp[k] = N\n        for i in range(1, N - k + 1):\n            dp[k] = min(dp[k], dp[k - 1] + K)\n    return str(min(dp))\n'''\n\n'''\n  # Brute Force\n  # O(n^2) and O(n) time complexity\n  # n is the size of the list\n  def solution(stdin):\n    N, K = map(int, stdin.split())\n    if N > K:\n        N, K = K, N\n    x = max(K, N)\n    y = min(K, N)\n    dp = [0] * (y - x + 1)\n    for k in range(x, y + 1):\n        dp[k] = N\n        for i in range(1, N - k + 1):\n            dp[k] = min(dp[k], dp[k - 1] + K)\n    return str(min(dp))\n\n\n  # DP\n  # O(n^2) and O(n) time complexity\n  def solution(stdin):\n    N, K = map(int, stdin."
    },
    {
        "number": 4308,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    users, N, K = map(int, stdin.split())\n    MIN = 99999999\n    for n in range(1, N+1):\n        MIN = min(MIN, abs(K-n))\n    return str(MIN)\n\nFor Example:\nInput:\n2 2\nOutput:\n2\n\nInput:\n1 3\nOutput:\n3\n\nInput:\n1 7\nOutput:\n6\n\nInput:\n7 2\nOutput:\n2\n'''\nclass Solution:\n    def minDifference(self, N: int, K: int) -> str:\n        return str(abs(N-K))"
    },
    {
        "number": 4308,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    a = a % N\n    b = b % K\n    c = c % N\n    diff = abs(a - b) + abs(c - a)\n    return str(diff)"
    },
    {
        "number": 4308,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    max_len = 0\n    min_len = 99999999999\n    for _ in range(N):\n        temp = map(int, stdin.split())\n        temp.sort()\n        if len(temp) > max_len:\n            max_len = len(temp)\n        if len(temp) < min_len:\n            min_len = len(temp)\n    print(max_len - min_len)\nsolution(\"5 5\")\n"
    },
    {
        "number": 4308,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N,K = list(map(int,stdin.split()))\n    crackers = []\n    for _ in range(N):\n        cracker = list(map(int,stdin.split()))\n        crackers.append(cracker)\n    if K > max(crackers):\n        return '0'\n    else:\n        return str(max(crackers)-min(crackers))\n"
    },
    {
        "number": 4308,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(max(int(str(n*k)[::-1]) - int(str(n*k)[::-1][::-1]), 0))\n\"\"\"\n\ndef"
    },
    {
        "number": 4308,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    lst = list(map(int, stdin.split()))\n    # print(lst)\n    min_diff = abs(min(lst) - max(lst))\n    # print(min_diff)\n    for i in lst:\n        if i < min_diff:\n            min_diff = i\n    return str(min_diff)\n"
    },
    {
        "number": 4309,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n  N = int(stdin)\n  ans = \"\"\n  for i in range(1, N):\n    ans += str(i)\n  return ans"
    },
    {
        "number": 4309,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    if int(stdin) <= 100:\n        return str(int(stdin))\n    else:\n        return str(stdin % 100)\n"
    },
    {
        "number": 4309,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    i = 2\n    while i < N:\n        c = N%10\n        i = i*10\n        if c == 0:\n            return str(i)\n    return str(N)\n"
    },
    {
        "number": 4309,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, solution = list(map(int, stdin.split()))\n    if N > 999:\n        return \"999\"\n    return str(sum(map(int, str(N))))\n\nn: int = solution(stdin)\nprint(n)\n\nhttps://www.youtube.com/watch?v=9QH6GmGukS\nhttps://www.youtube.com/watch?v=V6i08rQms9Q\n"
    },
    {
        "number": 4309,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    ABC_n = n\n    while n > 0:\n        n = n - 9 * (n % 10)\n        ABC_n = (ABC_n * 10) + (n // 10)\n    print(ABC_n)\n    return str(ABC_n)\n"
    },
    {
        "number": 4309,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n  \n  n = int(stdin)\n  if n == 1 or n == 0:\n    return n\n  for i in range(1, n):\n    if not n % 10:\n      return i\n    else:\n      n = n // 10\n  return \"0\"\n"
    },
    {
        "number": 4309,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    for line in lines:\n        for i in range(len(line)):\n            if line[i]!='':\n                line = line[:i] + line[i].upper() + line[i+1:]\n                break\n        else:\n            line = line.upper()\n        if len(line) % 9 == 0:\n            line = line.upper()\n            if line[:2] == line[2:]:\n                return line[2:]\n    return '1111'\n\"\"\"\n\ndef"
    },
    {
        "number": 4309,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    x = list(map(int,stdin.split()))\n    kurohashi = 0\n    for i in range(0,N):\n        kurohashi += x[i]\n        if kurohashi > 10:\n            kurohashi = 10\n        if kurohashi % 10 == 0:\n            return str(kurohashi)\n    return str(kurohashi)\n    \n    "
    },
    {
        "number": 4309,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   \n"
    },
    {
        "number": 4309,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    dic = dict()\n    for line in stdin:\n        if line[0] in '0123456789':\n            dic[int(line)] = True\n    return max(dic, key=lambda x: len(str(x)))\n"
    },
    {
        "number": 4310,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    dx, dy = [1, -1, 0, 0], [0, 0, -1, 1]\n    answer = 0\n    for _ in range(y):\n        answer += abs(x-dx[dy.index(dx[_]%4)])\n        answer += abs(x-dy[dy.index(dy[_]%4)])\n    return str(answer)\n"
    },
    {
        "number": 4310,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[1])\n    tasks = [list(map(int, input().split())) for _ in range(n)]\n    result = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            result = result + max(tasks[i][j] - tasks[j][i], result)\n    return str(result)"
    },
    {
        "number": 4310,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    numbers = list(map(int, stdin.split(' ')))\n    answer = 0\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if numbers[i] + numbers[j] == 0:\n                answer = numbers[i] + numbers[j]\n                break\n    print(answer)\nsolution('1 2 3 4 5')\n"
    },
    {
        "number": 4310,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n  A, B, C = map(int, stdin.split())\n  A_1 = abs(A - B)\n  A_2 = abs(A - C)\n  A_3 = abs(A - B - C)\n  if A_1 < A_2 and A_1 < A_3:\n    print(A_2)\n  elif A_2 < A_1 and A_2 < A_3:\n    print(A_1)\n  else:\n    print(A_3)\n"
    },
    {
        "number": 4310,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    x = list(map(int, stdin.split()))\n    x.sort()\n    A = [0 for _ in range(n+1)]\n    A[0] = 1\n    A[1] = 1\n    for i in range(2, n+1):\n        A[i] = A[i-1] + x[i-2]\n    A.pop()\n    return str(A[-1])\n\nhttps://leetcode.com/problems/minimum-cost-to-solve-all-the-tasks/discuss/111451/Python-Easy-Solution-with-Explanation-Note-2-O(N)-Space-O(N).\n\"\"\"\nimport math\n\nclass Solution:\n    def __init__(self, A: List[int]):\n        self.A = A\n        self.n = len(A)\n        self.invalid = False\n        self.totalCost = 0\n        self.dp = [[0 for _ in range(len(A)+1)] for _ in range(self.n)]\n        self.lastRow = [0 for _ in range(self.n)]\n        self.lastCol = [0 for _ in range(self.n)]\n\n        self.x = [[0 for _ in range(self.n+1)] for _ in range(self.n)]\n        self.x[0][0] = A[0]\n\n        for i in range(self.n-1):\n            self.dp[i][i+1] = math.inf\n            self.dp[i][i] = 0\n\n    def update(self, i: int, j: int, x: int) -> None:\n        \"\"\"\n        Update the value of the task at index i,j in the solution matrix.\n        \"\"\"\n        self.x[i][j] = x\n\n    def updateWithAns(self, i: int, j: int, x: int) -> None:\n        \"\"\"\n        Update the value of the task at index i,j in the solution matrix using the current answer matrix.\n        \"\"\"\n        self.totalCost += self.x[i][j]\n        self.dp[i+1][j] = self.dp[i][j+1] + self.x[i][j]\n\n    def updateWithAnsAndArrow(self, i: int, j: int, x: int) -> None:\n        \"\"\"\n        Update the value of the task at index i,j in the solution matrix using the current answer matrix and arrow.\n        \"\"\"\n        self.totalCost += self.x[i][j] + self.x[i][j+1]\n        self.lastRow[i] = x\n        self.lastCol[j] = x\n        self.dp[i+1][j] = self.dp[i][j+1] + self.x[i][j]\n\n    def updateWithAnsAndSame(self, i: int, j: int, x: int) -> None:\n        \"\"\"\n        Update the value of the task at index i,j in the solution matrix using the current answer matrix and arrow.\n        \"\"\"\n        self.totalCost += self.x[i][j] + self.x[i][j+1] + self.x[i+1][j]\n        self.lastRow[i] = x\n        self.lastCol[j] = x\n        self.lastRow[i+1] = x\n        self.lastCol[j+1] = x\n\n    def updateWithAnsAndArrowAndSame(self, i: int, j: int, x: int) -> None:\n        \"\"\"\n        Update the value of the task at index i,j in the solution matrix using the current answer matrix and arrow.\n        \"\"\"\n        self.totalCost += self.x[i][j] + self.x[i][j+1] + self.x[i+1][j] + self.x[i+1][j+1]\n        self.lastRow[i] = x\n        self.lastCol[j] = x\n        self.lastRow[i+1] = x\n        self.lastCol[j+1] = x + self.x[i+1][j+1]\n\n    def updateWithAnsAndSameAndSame(self, i: int, j: int, x: int) -> None:\n        \"\"\"\n        Update the value of the task at index i,j in the solution matrix using the current answer matrix and arrow.\n        \"\"\"\n        self.totalCost += self.x[i][j] + self.x[i][j+1] + self.x[i+1][j] + self.x[i+1][j+1] + self.x[i+1][j+1]\n        self.lastRow[i] = x\n        self.lastCol[j] = x\n        self.lastRow[i+1] = x\n        self.lastCol[j+1] = x + self.x[i+1][j+1] + self.x[i+1][j+1]\n\n    def updateWithAnsAndSameAndSameAndSame(self, i: int, j: int, x: int) -> None:\n        \"\"\"\n        Update the value of the task at index i,j in the solution matrix using the current answer matrix and arrow.\n        \"\"\"\n        self.totalCost += self.x[i][j] + self.x[i][j+1] + self.x[i+1][j] + self.x[i+1][j+1] + self.x[i+1][j+1] + self.x[i+1][j+1]\n        self.lastRow[i] = x\n        self.lastCol[j] = x\n        self.lastRow[i+1] = x\n        self.lastCol[j+1] = x + self.x[i+1][j+1] + self.x[i+1][j+1] + self.x[i+1][j+1] + self.x[i+1][j+1]\n\n    def updateWithAnsAndSameAndSameAndSameAndSame(self, i: int, j: int, x: int) -> None:\n        \"\"\"\n        Update the value of the task at index i,j in the solution matrix using the current answer matrix and arrow.\n        \"\"\"\n        self.totalCost += self.x[i][j] + self.x[i][j+1] + self.x[i+1][j] + self.x[i+1][j+1] + self.x[i+1][j+1] + self.x[i+1][j+1] + self.x[i+1][j+1] + self.x[i+1][j+1]\n        self.lastRow[i] = x\n        self.lastCol[j] = x\n        self.lastRow[i+1] = x\n        self.lastCol[j+1] = x + self.x[i+1][j+1] + self.x[i+1][j+1] + self.x[i+1][j+1] + self.x[i+1][j+1] + self.x[i+1][j+1] + self.x[i+1][j+1]\n        self.lastRow[i+2] = x + self.x[i+2][j]\n        self.lastCol[j+1] = x + self.x[i+2][j]\n        self.lastRow[i+3] = x + self.x[i+3][j]"
    },
    {
        "number": 4310,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A_1, A_2, A_3 = [int(x) for x in stdin.split()]\n    total_cost = 0\n    for i in range(3):\n        total_cost += A_3 - A_2 + A_1 - A_i\n    print(total_cost)\n\n-----Sample Output-----\n1\n2\n3\nExplanation\nExplanation 1:\nThere are three tasks, all of which need to be completed.\nComplete the first task at cost 0.\nComplete the third task at cost 2.\nComplete the second task at cost 3.\nExplanation 2:\nWe only have one task left, so we can complete it at cost 3.\nExplanation 3:\nThere are only one task left, so we can complete it at cost 0.\n\n-----Sample Input-----\n1 1 1\n\n-----Sample Output-----\n1\n\nWhen the tasks are completed in the following order, the total cost will be 1, which is the minimum:\n - Complete the first task at cost 0.\n - Complete the second task at cost 1.\n\"\"\"\n"
    },
    {
        "number": 4310,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    tasks = [list(map(int,input().split())) for _ in range(int(input()))]\n    tasks.sort()\n    res = 0\n    tasks = [list(x) for x in zip(*tasks)]\n    for i in range(len(tasks)):\n        for j in range(i+1,len(tasks)):\n            if len(tasks[i]) < len(tasks[j]):\n                res = min(res,abs(tasks[i][0]-tasks[j][0]))\n    return str(res)\n\n'''\nclass Solution:\n    def minCost(self, costs: List[List[int]]) -> int:\n        costs.sort(key=lambda x:x[0])\n        stack=[]\n        curr_cost=0\n        for x,y in costs:\n            while stack and y<x-stack[-1][0]:\n                curr_cost+=1\n                y=stack.pop()\n            stack.append((x,curr_cost))\n        return curr_cost\n\n\nclass Solution:\n    def minCost(self, costs: List[List[int]]) -> int:\n        costs.sort(key=lambda x:x[0])\n        stack=[]\n        curr_cost=0\n        for x,y in costs:\n            while stack and y<x-stack[-1][0]:\n                curr_cost+=1\n                y=stack.pop()\n            stack.append((x,curr_cost))\n        return curr_cost"
    },
    {
        "number": 4310,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    \n    return str(abs(C - (A + B + C - A * B)))"
    },
    {
        "number": 4310,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin[0])\n    b = int(stdin[1])\n    c = int(stdin[2])\n    sum_ = 0\n    # Task 1\n    for i in range(a):\n        if i == b:\n            sum_ += c\n        elif i == c:\n            sum_ += 2\n        else:\n            sum_ += 3\n    # Task 2\n    for i in range(b, c):\n        sum_ += abs(a - i)\n    # Task 3\n    for i in range(c, a):\n        sum_ += abs(b - i)\n    # Task 4\n    return str(sum_)\n"
    },
    {
        "number": 4310,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    A = [list(map(int, stdin.split())) for _ in range(3)]\n    \n    costs = [\n        [0 for _ in range(3)] for _ in range(3)\n    ]\n    \n    for i in range(3):\n        for j in range(3):\n            costs[i][j] = A[i][j]\n    \n    \n    A_i = 0\n    for i in range(3):\n        for j in range(3):\n            if costs[i][j]!= 0:\n                A_i = max(A_i, abs(A[i][j] - costs[i][j]))\n    \n    answer = abs(A_i - 0)\n    return str(answer)"
    },
    {
        "number": 4311,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    def f(a):\n        if n % 2 == 0:\n            return a + a//2\n        else:\n            return a + 3*a//4 + 1\n    return f(n)\n"
    },
    {
        "number": 4311,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    a.sort(reverse=True)\n    return str(sum(a[1:])/2)\n"
    },
    {
        "number": 4311,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    a = map(int, s)\n    a.sort()\n    a = list(a)\n    m = list()\n    for i in range(1, len(a)):\n        m.append(a[i]/2)\n    m.sort()\n    if m == a:\n        return str(int(min(m)))\n    else:\n        return '0'\n\ndef"
    },
    {
        "number": 4311,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin)\n    s = a[-1]\n    f = lambda x: x/2 if x % 2 == 0 else 3*x+1\n    ans = min(f(a_n) for a_n in a)\n    print(ans)\nsolution(input())"
    },
    {
        "number": 4311,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    # to store all possible digits \n    N = 1000000\n\n    # array to store digits\n    digit_array = []\n\n    # creating array of digits in string \n    for i in range(0, N):\n        digit_array.append(str(i))\n\n    # iterating over string \n    for s in stdin:\n        for i in range(0, N):\n            # if digit is even\n            if s == str(i):\n                # adding result of digit_array to result array\n                digit_array[i] = str(i)\n                # getting the element in array\n                res = int(digit_array[i])\n                # if the element is less than the element in array\n                if res < res:\n                    # if it is the smallest, get the element from array\n                    if digit_array[i] < digit_array[res]:\n                        res = digit_array[i]\n                # if the element is greater than the element in array\n                else:\n                    # if it is the smallest, get the element from array\n                    if digit_array[i] > digit_array[res]:\n                        res = digit_array[i]\n                # update digit_array[i] to result\n                digit_array[i] = str(res)\n            # if digit is odd\n            else:\n                # if digit is less than digit_array[i]\n                if s < str(digit_array[i]):\n                    # getting the element in array\n                    res = digit_array[i]\n                    # if the element is less than the element in array\n                    if digit_array[i] < digit_array[res]:\n                        res = digit_array[i]\n                    # if the element is greater than the element in array\n                    else:\n                        res = digit_array[i]\n                # if the element is greater than digit_array[i]\n                else:\n                    # if the element is greater than digit_array[i]\n                    if digit_array[i] < digit_array[res]:\n                        res = digit_array[i]\n                    # if the element is less than the element in array\n                    else:\n                        res = digit_array[i]\n                # update digit_array[i] to result\n                digit_array[i] = str(res)\n                \n    # find the minimum element in array\n    min_val = str(min(digit_array))\n\n    # return the minimum element\n    return min_val"
    },
    {
        "number": 4311,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, m = map(int, stdin.split())\n    l = [0] * (m + 1)\n    for i in range(1, m + 1):\n        l[i] = i ** 2\n    for i in range(1, a + 1):\n        l[i] = 3 * i + 1\n    for i in range(2, m + 1):\n        if l[i] >= l[i - 1]:\n            l[i] = l[i - 1] ** 2\n    answer = l[a]\n    return str(answer)\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4311,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a_5,a_2=map(int,stdin.split())\n    a_5_square=a_5**2\n    a_2_square=a_2**2\n    m=0\n    while a_2_square<=a_5_square:\n        if a_2_square%2==0:\n            m=max(m,a_2_square)\n        a_2_square=a_2_square+1\n    print(m)\n    return str(m)\n\n\ndef"
    },
    {
        "number": 4311,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = list(map(int, stdin.split()))\n    s.sort()\n    print(s[len(s)//2])\n    return str(s[len(s)//2])\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4311,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    m = 1\n    while n > 1:\n        if n % 2 == 0:\n            m += n//2\n            n -= 1\n        else:\n            m += n//2 + 1\n            n -= 2\n    return str(m)\nprint(solution(input()))\n"
    },
    {
        "number": 4311,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split(\"=\")\n    a = dict()\n    for a_t in s:\n        if a_t.isalpha():\n            a[int(a_t)] = a_t\n    s_len = len(s)\n    min_m = s_len\n    for i in range(s_len):\n        if i!= s_len - 1:\n            if a[int(s[i + 1])] == a[int(s[i])] and a[int(s[i + 1])]!= a[int(s[i])]:\n                a[int(s[i])] = a[int(s[i + 1])]\n            if a[int(s[i + 1])]!= a[int(s[i])] and a[int(s[i + 1])] == a[int(s[i])]:\n                a[int(s[i])] = a[int(s[i + 1])]\n        if i == s_len - 1:\n            for j in range(s_len):\n                if a[int(s[j + 1])]!= a[int(s[j])] and a[int(s[j + 1])] == a[int(s[j])]:\n                    a[int(s[j])] = a[int(s[j + 1])]\n        if s[i]!= a[int(s[i])]:\n            min_m = min(min_m, i + 1)\n    return str(min_m)\nprint(solution(stdin))"
    },
    {
        "number": 4312,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[1])\n    a = int(stdin[2])\n    b = int(stdin[3])\n    c = int(stdin[4])\n    d = int(stdin[5])\n    monster1 = b-a\n    monster2 = d-c\n    monsters = [monster1,monster2]\n    for i in range(n):\n        monster1 = b\n        monster2 = d\n        for j in range(1,n):\n            monster1 += monsters[j-1]\n            monster2 += monsters[j]\n            if monster1 <= 0 or monster2 <= 0:\n                return 'No'\n            if monster1 > monster2:\n                monster1 = monster2\n                monster2 = monster1-10\n            if monster1 == monster2:\n                return 'No'\n    return 'Yes'"
    },
    {
        "number": 4312,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A = int(stdin.split(\" \")[0])\n    B = int(stdin.split(\" \")[1])\n    C = int(stdin.split(\" \")[2])\n    D = int(stdin.split(\" \")[3])\n    sum = A + B + C + D\n    if sum < 100:\n        return \"No\"\n    elif sum == 100:\n        if A > B:\n            return \"Yes\"\n        elif A > C:\n            return \"Yes\"\n        elif A > D:\n            return \"No\"\n        else:\n            return \"No\"\n    else:\n        return \"No\"\n\n-----Sample Output-----\nNo\n\nSince Aoki's monster attacks the first to have 0 or less health, the person with the monster whose health becomes 0 or below loses, and the other person wins.\n"
    },
    {
        "number": 4312,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    A,B,C,D = map(int, stdin.split())\n    if A > B:\n        if A > C:\n            if A > D:\n                return \"Yes\"\n            else:\n                return \"No\"\n        else:\n            if C > D:\n                return \"No\"\n            else:\n                return \"Yes\"\n    else:\n        if B > D:\n            if B > C:\n                return \"No\"\n            else:\n                return \"No\"\n        else:\n            if C > D:\n                return \"No\"\n            else:\n                return \"Yes\"\n        \n        \n"
    },
    {
        "number": 4312,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    if a + b > c + d:\n        return 'No'\n    if a + c > b + d:\n        return 'No'\n    if a + d > b + c:\n        return 'No'\n    if b + d > c + a:\n        return 'No'\n    if b + c > a + d:\n        return 'No'\n    if b + c > a + d:\n        return 'No'\n    if b + d > a + c:\n        return 'No'\n    if a + c > b + d:\n        return 'No'\n    if a + c > b + d:\n        return 'No'\n    return 'Yes'\n\n--------Sample Input-------\n2\n9 10 10\n\n3\n3 10 2\n\n2\n1 2\n\n1 2\n\n2 1\n\n--------Sample Output-------\nYes"
    },
    {
        "number": 4312,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A,B,C,D = map(int, stdin.split())\n    if A+B+C+D >=100:\n        return \"No\"\n    elif A+B+C+D <=0:\n        return \"No\"\n    elif A+B+C+D == 1:\n        return \"Yes\"\n    else:\n        return \"Yes\""
    },
    {
        "number": 4312,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    if A+B+C+D <= 100:\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 4312,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    dp = [0] * (n + 1)\n    dp[1] = 10\n    for i in range(2, n + 1):\n        dp[i] = (10 - dp[i - 2]) * 10\n    for i in range(n - 1, 0, -1):\n        dp[i] = (10 - dp[i + 1]) * dp[i]\n    for i in range(n - 2, -1, -1):\n        dp[i] = (10 - dp[i + 2]) * dp[i]\n    if dp[n] >= 1:\n        return \"Yes\"\n    else:\n        return \"No\"\n\n-----Sample Output-----\nYes\n\nSecond, Aoki's monster attacks Takahashi's monster, whose health is now 10-9=1.\nNext, Aoki's monster attacks Takahashi's monster, whose health is now 10-10=0.\nTakahashi's monster is the first to have 0 or less health, so Aoki loses.\ndef"
    },
    {
        "number": 4312,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n\n    def Aoki_monster_attack(A, B, C, D, opponent_monster_health):\n        if (A + C) == B and (A + D) == B and A == 0:\n            return \"Yes\"\n        if (A + C) == B and (A + D) == C and A == 0:\n            return \"Yes\"\n        if (A + C) == B and (A + D) == D and A == 0:\n            return \"Yes\"\n        if (A + C) == B and (A + D) == D and A < 0:\n            return \"No\"\n\n    def aoki_monster_attack(A, B, C, D, opponent_monster_health):\n        if (A + C) == B and (A + D) == B and A == 0:\n            return \"No\"\n        if (A + C) == B and (A + D) == C and A < 0:\n            return \"Yes\"\n        if (A + C) == B and (A + D) == D and A == 0:\n            return \"Yes\"\n        if (A + C) == B and (A + D) == D and A < 0:\n            return \"No\"\n\n    if (A > B) or (C > D) or (B > C) or (A > D):\n        return \"No\"\n    else:\n        result = \"\"\n        for i in range(A, B + 1):\n            result += aoki_monster_attack(i, A, C, D, opponent_monster_health)\n        if result == \"Yes\":\n            return \"Yes\"\n        return \"No\"\n\nprint(solution(\"10 9 10 10\"))\nprint(solution(\"10 9 10 10\"))\n"
    },
    {
        "number": 4312,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    if A < B:\n        if A < C:\n            if A < D:\n                return 'No'\n            else:\n                return 'Yes'\n        else:\n            if A < D:\n                return 'No'\n            else:\n                return 'Yes'\n    elif B < A:\n        if B < C:\n            if B < D:\n                return 'No'\n            else:\n                return 'Yes'\n        else:\n            if B < D:\n                return 'No'\n            else:\n                return 'Yes'\n    elif A < C:\n        if A < D:\n            return 'No'\n        else:\n            return 'Yes'\n    else:\n        if A < D:\n            return 'No'\n        else:\n            return 'Yes'"
    },
    {
        "number": 4312,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    if B+C+D==0:\n        return 'No'\n    if A+B+C+D==0:\n        return 'No'\n    if A>B+C+D:\n        return 'No'\n    if A>B+C+D:\n        return 'No'\n    if A>B+C+D:\n        return 'No'\n    if A>B+C+D:\n        return 'No'\n    if A>B+C+D:\n        return 'No'\n    if A>B+C+D:\n        return 'No'\n    if A>B+C+D:\n        return 'No'\n    if A>B+C+D:\n        return 'No'\n    if A>B+C+D:\n        return 'No'\n    if A>B+C+D:\n        return 'No'\n    if A>B+C+D:\n        return 'No'\n    if A>B+C+D:\n        return 'No'\n    if A>B+C+D:\n        return 'No'\n    if A>B+C+D:\n        return 'No'\n    if A>B+C+D:\n        return 'No'\n    if A>B+C+D:\n        return 'No'\n    if A>B+C+D:\n        return 'No'\n    if A>B+C+D:\n        return 'No'\n    if A>B+C+D:\n        return 'No'\n    if A>B+C+D:\n        return 'No'\n    if A>B+C+D:\n        return 'No'\n    if A>B+C+D:\n        return 'No'\n    if A>B+C+D:\n        return 'No'\n    if A>B+C+D:\n        return 'No'\n    if A>B+C+D:\n        return 'No'\n    if A>B+C+D:\n        return 'No'\n    if A>B+C+D:\n        return 'No'\n    if A>B+C+D:\n        return 'No'\n    if A>B+C+D:\n        return 'No'\n    if A>B+C+D:\n        return 'No'\n    if A>B+C+D:\n        return 'No'\n    if A>B+C+D:\n        return 'No'\n    if A>B+C+D:\n        return 'No'\n    if A>B+C+D:\n        return 'No'\n    if A>B+C+D:\n        return 'No'\n    if A>B+C+D:\n        return 'No'\n    if A>B+C+D:\n        return 'No'\n    if A>B+C+D:\n        return 'No'\n    if A>B+C+D:\n        return 'No'\n    if A>B+C+D:\n        return 'No'\n    if A>B+C+D:\n        return 'No'\n    if A>B+C+D:\n        return 'No'\n    if A>B+C+D:\n        return 'No'\n    if A>B+C+D:\n        return 'No'\n    if A>B+C+D:\n        return 'No'\n    if A>B+C+D:\n        return 'No'\n    if A>B+C+D:\n        return 'No'\n    if A>B+C+D:\n        return 'No'\n    if A>B+C+D:\n        return 'No'\n    if A>B+C+D:\n        return 'No'\n    if A>B+C+D:\n        return 'No'\n    if A>B+C+D:\n        return 'No'\n    if A>B+C+D:\n        return 'No'\n    if A>B+C+D:\n        return 'No'\n    if A>B+C+D:\n        return 'No'\n    if A>B+C+D:\n        return 'No'\n    if A>B+C+D:\n        return 'No'\n    if A>B+C+D:\n        return 'No'\n    if A>B+C+D:\n        return 'No'\n    if A>B+C+D:\n        return 'No'\n    if A>B+C+D:\n        return 'No'\n    if A>B+C+D:\n        return 'No'\n    if A>B+C+D:\n        return 'No'\n    if A>B+C+D:\n        return 'No'\n    if A>B+C+D:\n        return 'No'\n    if A>B+C+D:\n        return 'No'\n    if A>B+C+D:\n        return 'No'\n    if A>B+C+D:\n        return 'No'\n    if A>B+C+D:\n        return 'No'\n    if A>B+C+D:\n        return 'No'\n    if A>B+C+D:\n        return 'No'\n    if A>B+C+D:\n        return 'No'\n    if A>B+C+D:\n        return 'No'\n    if A>B+C+D:\n        return 'No'\n    if A>B+C+D:\n        return 'No'\n    if A>B+C+D:\n        return 'No'\n    if A>B+C+D:\n        return 'No'\n    if A>B+C+D:\n        return 'No'\n    if A>B+C+D:\n        return 'No'\n    if A>B+C+D:\n        return 'No'\n    if A>B+C+D:\n        return 'No'\n    if A>B+C+D:\n        return 'No'\n    if A>B+C+D:\n        return 'No'\n    if A>B+C+D:\n        return 'No'\n    if A>B+C+D:\n        return 'No'\n    if A>B+C+D:\n        return 'No'\n    if A>B+C+D:\n        return 'No'\n    if A>B+C+D:\n        return 'No'\n    if A>B+C+D:\n        return 'No'\n    if A>B+C+D:\n        return 'No'\n    if A>B+C+D:\n        return 'No'\n    if A>B+C+D:\n        return 'No'\n    if A>B+C+D:\n        return 'No'\n    if A>B+C+D:\n        return 'No'\n    if A>B+C+D:\n        return 'No'\n    if A>B+C+D:\n        return 'No'\n    if A>B+C+D:\n        return 'No'\n    if A>B+C+D"
    },
    {
        "number": 4313,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\""
    },
    {
        "number": 4313,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    gems = []\n    gems_set = set()\n    for _ in range(n):\n        gem = int(stdin.split(' ')[0])\n        gems.append(gem)\n        gems_set.add(gem)\n    print(max(gems))\n    return max(gems)"
    },
    {
        "number": 4313,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, C = map(int, stdin.split())\n    return str(sum(map(int, map(str, stdin.split())))-sum(map(int, str(C))))\n\n'''\n\ndef"
    },
    {
        "number": 4313,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    Gems = [int(x) for x in stdin.split()]\n    Gems.sort()\n    C_s = Gems[0]\n    V_s = sum(Gems[:3])\n    C_s_x = sum(Gems[:N//2])\n    C_s_y = C_s + sum(Gems[N//2:])\n    print(C_s_y - C_s_x)\n    return str(C_s_y - C_s_x)\n\"\"\"\n\nimport sys\nfrom collections import deque\n\ninput = sys.stdin.readline\n\nN, C_s = input().split()\nV_s = int(input())\nC_s_x = int(input())\nC_s_y = C_s + sum(input().split())"
    },
    {
        "number": 4313,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, V_1, V_2, V_3, V_4, V_5, V_6, V_7, V_8, V_9, V_10 = list(map(int, stdin.split()))\n    # print(V_1, V_2, V_3, V_4, V_5, V_6, V_7, V_8, V_9, V_10)\n    max_x = V_1 + V_2 + V_3 + V_4 + V_5 + V_6 + V_7 + V_8 + V_9 + V_10\n    # print(max_x)\n    x_pay = V_1 - V_2 - V_3 - V_4 - V_5 - V_6 - V_7 - V_8 - V_9 - V_10\n    # print(x_pay)\n    if x_pay >= max_x:\n        return str(max_x)\n    else:\n        return str(x_pay)\n\n-----Sample Output-----\nAnswer: 100\n"
    },
    {
        "number": 4313,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, C = map(int, stdin.split())\n    X = sum(map(int, stdin.split()))\n    Y = sum(map(int, stdin.split()))\n    res = -1\n\n    while True:\n        if (X - Y) < C:\n            break\n        else:\n            X -= C\n            Y -= C\n            if X < 0:\n                res = max(res, X)\n                break\n\n    return str(res)\n-----Sample Output-----\n5\n-----Sample Input-----\n3\n10 2 5\n6 3 4\n\n-----Sample Output-----\n15\n'''\n\ndef"
    },
    {
        "number": 4313,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n  n, *_ = map(int, stdin)\n  _ = int(sum(map(int, stdin[:-1])))\n  print(sum(_) - _)\n  return str(sum(_) - _)"
    },
    {
        "number": 4313,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    gems = list(map(int, stdin.split()))\n    gem_set = {i for i in range(n)}\n    min_val = -1000000\n    for i in range(n):\n        val = sum(gems[:i]) + sum(gems[i + 1:])\n        if val < min_val:\n            min_val = val\n    return str(min_val)\n\n-----Sample Output-----\n0\n\nIf we choose the first and third gems, X = 10 + 5 = 15 and Y = 6 + 4 = 10,\nwe have X-Y = 5 here, which is the maximum possible value.\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4313,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, V = list(map(int, stdin.split()))\n    C = list(map(int, stdin.split()))\n    \n    # result = solution1(N, C, V)\n    result = solution2(N, C, V)\n    return str(result)\n\ndef"
    },
    {
        "number": 4313,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, C, V = map(int, stdin.split())\n    gems = []\n    for i in range(N):\n        gems.append(int(stdin.strip()[i]))\n    gems.sort()\n    C = sum(C)\n    X = sum(gems)\n    Y = V - C + sum(gems)\n    return str(max(X - Y, 0))\n"
    },
    {
        "number": 4314,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join(stdin)\n\nExample 1:\n\nInput: H 4\nOutput:\n\"######.\n##..#\n###.#\n######\n\nExample 2:\n\nInput: H 4\nOutput:\n\"#######.\n##...##\n##...##\n##...##\n\nExample 3:\n\nInput: H 4\nOutput:\n\"######...\n##...##...\n##...##...\n##...##...\n\nExample 4:\n\nInput: H 4\nOutput:\n\"###...\n##.##..\n##.##..\n\nExample 5:\n\nInput: H 4\nOutput:\n\"######.\n##...##..\n##...##..\n##...##..\n\nExample 6:\n\nInput: H 4\nOutput:\n\"#######.\n##...##....\n##...##....\n##...##....\n\nExample 7:\n\nInput: H 4\nOutput:\n\"#######.\n##.##...\n##.##..\n##.##..\n\nExample 8:\n\nInput: H 4\nOutput:\n\"#######.\n..#..#..\n###.#..#\n##...##.\n\nExample 9:\n\nInput: H 4\nOutput:\n\"######.\n##...##...\n######...\n##...##...\n######...\n\nExample 10:\n\nInput: H 4\nOutput:\n\"######..\n.##...##.\n..#..#...\n...#.#...\n.##...##..\n\nExample 11:\n\nInput: H 3\nOutput:\n\"######.\n##..##..\n##.##..\n##.##..\n\nExample 12:\n\nInput: H 4\nOutput:\n\"######.\n##...##.\n######...\n##...##.\n##...##.\n\nExample 13:\n\nInput: H 4\nOutput:\n\"#####.\n##.##..\n##.##..\n##.##..\n##..#..\n\nExample 14:\n\nInput: H 4\nOutput:\n\"######.\n##...##.\n######...\n##...##.\n######...\n##...##.\n\nExample 15:\n\nInput: H 3\nOutput:\n\"#####.\n.##..#..\n##.##..\n##.##..\n##.##..\n\nExample 16:\n\nInput: H 4\nOutput:\n\"#####.\n.##...##\n...#.#..\n...#.#..\n.##...##.\n\nExample 17:\n\nInput: H 3\nOutput:\n\"######.\n##...##.\n######...\n##...##.\n######...\n##.##...\n\nExample 18:\n\nInput: H 4\nOutput:\n\"######.\n...##...\n..#..#..\n...#.#...\n.##...##.\n\nExample 19:\n\nInput: H 4\nOutput:\n\"######.\n..#...#..\n"
    },
    {
        "number": 4314,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(lambda x:list(x.strip()), stdin.splitlines()))\n    n = len(a)\n    H, W = len(a[0]), len(a)\n    \n    def get_max(i,j):\n        nonlocal H, W\n        ans = 0\n        for r in range(i, H):\n            for c in range(j, W):\n                if a[r][c] == '.':\n                    ans = max(ans,1)\n                else:\n                    ans = max(ans,0)\n        return ans\n    \n    def get_min(i,j):\n        nonlocal H, W\n        ans = 0\n        for r in range(i, H):\n            for c in range(j, W):\n                if a[r][c] == '#':\n                    ans = min(ans, 1)\n                else:\n                    ans = min(ans, 0)\n        return ans\n        \n    def dfs(i, j, idx):\n        nonlocal H, W\n        if idx == n:\n            return\n        \n        if i + 1 < H and a[i + 1][j] == '.' and a[i][j] == '.':\n            a[i][j] = '#'\n            dfs(i+1, j, idx+1)\n        if j + 1 < W and a[i][j+1] == '.' and a[i][j] == '.':\n            a[i][j] = '#'\n            dfs(i, j+1, idx+1)\n        if i - 1 >= 0 and a[i-1][j] == '.' and a[i][j] == '.':\n            a[i][j] = '#'\n            dfs(i-1, j, idx+1)\n        if j - 1 >= 0 and a[i][j-1] == '.' and a[i][j] == '.':\n            a[i][j] = '#'\n            dfs(i, j-1, idx+1)\n    \n    def get_b(i, j):\n        nonlocal H, W\n        ans = 0\n        if i+1 < H and a[i+1][j] == '.' and a[i][j] == '.':\n            ans = get_max(i+1, j)\n        if j+1 < W and a[i][j+1] == '.' and a[i][j] == '.':\n            ans = get_max(i, j+1)\n        if i-1 >= 0 and a[i-1][j] == '.' and a[i][j] == '.':\n            ans = get_min(i-1, j)\n        if j-1 >= 0 and a[i][j-1] == '.' and a[i][j] == '.':\n            ans = get_min(i, j-1)\n        return ans\n    \n    def get_v(i, j):\n        nonlocal H, W\n        ans = 0\n        if i+1 < H and a[i+1][j] == '.' and a[i][j] == '.':\n            ans = get_max(i+1, j)\n        if j+1 < W and a[i][j+1] == '.' and a[i][j] == '.':\n            ans = get_max(i, j+1)\n        if i-1 >= 0 and a[i-1][j] == '.' and a[i][j] == '.':\n            ans = get_max(i-1, j)\n        if j-1 >= 0 and a[i][j-1] == '.' and a[i][j] == '.':\n            ans = get_max(i, j-1)\n        return ans\n    \n    idx = 0\n    for i in range(n):\n        for j in range(n):\n            if a[i][j] == '.':\n                dfs(i, j, idx)\n                idx += 1\n            else:\n                ans = max(ans, get_b(i, j))\n                if ans == 1:\n                    break\n                else:\n                    ans = max(ans, get_v(i, j))\n    \n    print(ans)\n    return ans\n\nsolution('a#.a#.a#.a')\n"
    },
    {
        "number": 4314,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    h, w = [int(i) for i in stdin.split()]\n    grid = [list(i) for i in stdin.split()]\n    for i in range(h):\n        for j in range(w-1):\n            if grid[i][j] == \".\":\n                grid[i][j] = \"#\"\n                for k in range(j+1, w):\n                    if grid[i][k] == \"#\":\n                        grid[i][k] = \".\"\n    return ''.join([''.join(row) for row in grid])\n"
    },
    {
        "number": 4314,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def grid2D(grid):\n        n, m = len(grid), len(grid[0])\n        visited = [[False for _ in range(m)] for _ in range(n)]\n        for i in range(n):\n            for j in range(m):\n                if not visited[i][j] and grid[i][j] == \"#\":\n                    visited[i][j] = True\n                    yield [i, j]\n        for i in range(n):\n            for j in range(m):\n                if not visited[i][j]:\n                    yield [i, j]\n    \n    def getNeighbor(i, j, grid):\n        neighbor = []\n        for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n            newi, newj = i + dx, j + dy\n            if 0 <= newi < n and 0 <= newj < m:\n                if not visited[newi][newj] and grid[newi][newj] == \".\":\n                    neighbor.append([newi, newj])\n        return neighbor\n    \n    def backtrack(i, j, grid, visited):\n        if len(visited) == n*m:\n            return\n        if i == n or j == m:\n            return\n        \n        grid[i][j] = \"#\"\n        visited[i][j] = True\n        backtrack(i, j, grid, visited)\n        grid[i][j] = \".\"\n        visited[i][j] = False\n        \n        grid[i][j] = \"#\"\n        backtrack(i, j, grid, visited)\n    \n    def compute(grid):\n        for neighbor in grid2D(grid):\n            x, y = neighbor\n            grid[x][y] = \"#\"\n            for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n                newx, newy = x + dx, y + dy\n                if not (0 <= newx < n and 0 <= newy < m):\n                    continue\n                elif grid[newx][newy] == \"#\":\n                    continue\n                else:\n                    break\n            else:\n                break\n        for i in range(n):\n            for j in range(m):\n                if not (0 <= i < n and 0 <= j < m):\n                    continue\n                elif grid[i][j] == \"#\":\n                    continue\n                else:\n                    break\n            else:\n                break\n        else:\n            return\n        \n        grid[i][j] = \"#\"\n        backtrack(i, j, grid, visited)\n        grid[i][j] = \".\"\n        \n        grid[i][j] = \"#\"\n        backtrack(i, j, grid, visited)\n    \n    def print(grid):\n        for i in grid:\n            for j in i:\n                print(j, end=\"\")\n            print()\n        print()\n    \n    n, m = len(grid), len(grid[0])\n    visited = [[False for _ in range(m)] for _ in range(n)]\n    backtrack(0, 0, grid, visited)\n    print(\"\".join([\"\".join(i) for i in grid]))\n    return \"\".join([\"\".join(i) for i in grid])\n"
    },
    {
        "number": 4314,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    rows, cols, black = [int(s) for s in stdin.split()]\n    \n    def check_white(row, col, grid):\n        if not all(a[row][col] == '.' or a[row][col] == '#' for a in grid):\n            return False\n        \n        for i in range(row, row+3):\n            for j in range(col, col+3):\n                if a[i][j] == '.' or a[i][j] == '#':\n                    return False\n        \n        return True\n    \n    def check_black(row, col, grid):\n        if not all(a[row][col] == '#' for a in grid):\n            return False\n        \n        for i in range(row, row+3):\n            for j in range(col, col+3):\n                if a[i][j] == '.' or a[i][j] == '#':\n                    return False\n        \n        return True\n    \n    def get_valid(row, col, grid):\n        if not check_black(row, col, grid):\n            return False\n        \n        for i in range(row, row+3):\n            for j in range(col, col+3):\n                if a[i][j]!= '.' or a[i][j]!= '#':\n                    return False\n        \n        return True\n    \n    def get_next_col(col, grid):\n        i = 0\n        while i <= col:\n            if not check_white(row, i, grid):\n                return False\n            i += 3\n        \n        return True\n    \n    def get_next_row(row, grid):\n        i = 0\n        while i <= row:\n            if not check_black(row, i, grid):\n                return False\n            i += 3\n        \n        return True\n    \n    def set_grid(grid):\n        for i in range(rows):\n            for j in range(cols):\n                grid[i][j] = '.'\n    \n    def dfs(grid, row, col):\n        grid[row][col] = '#'\n        if row == rows-1 and col == cols-1:\n            return True\n        \n        for i in range(4):\n            if check_white(row+i, col, grid):\n                if get_valid(row+i, col, grid):\n                    if get_next_col(col+i, grid):\n                        if dfs(grid, row+i, col+i):\n                            return True\n        \n        for i in range(3):\n            if check_black(row+i, col+i, grid):\n                if get_valid(row+i, col+i, grid):\n                    if get_next_row(row+i, grid):\n                        if dfs(grid, row+i, col+i):\n                            return True\n        \n        return False\n    \n    set_grid(grid)\n    \n    answer = ''\n    for i in range(rows):\n        for j in range(cols):\n            if grid[i][j] == '#':\n                answer += '.'\n            else:\n                answer += '#'\n    \n    print(answer)\n    return answer\n"
    },
    {
        "number": 4314,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.split())\n    grid = []\n    for _ in range(H):\n        grid.append(list(input()))\n    for i in range(H-2):\n        for j in range(W-2):\n            if grid[i][j] == '#':\n                grid[i][j] = 0\n            else:\n                grid[i][j] = 1\n    for i in range(H-2):\n        for j in range(W-2):\n            if grid[i][j] == '#':\n                grid[i][j] = 0\n            else:\n                grid[i][j] = '.'\n    for row in range(H):\n        for col in range(W):\n            if grid[row][col] == 0:\n                for i in range(row, min(row+3, H-1)):\n                    for j in range(col, min(col+3, W-1)):\n                        grid[i][j] = 0\n    print('\\n'.join([''.join(row) for row in grid]))\n"
    },
    {
        "number": 4314,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.split())\n    a = [list(map(int, input())) for _ in range(H)]\n    b = [['.' if i == j else '#' if i == (H - 1 - i) and j == (W - 1 - j) else '.' for j in range(W)] for i in range(H)]\n\n    def valid_move(x: int, y: int) -> bool:\n        return 0 <= x < H and 0 <= y < W and b[x][y]!= '#'\n\n    def backtrack(x: int, y: int) -> str:\n        if a[x][y] == '.':\n            return '#'\n        else:\n            if not valid_move(x, y):\n                return '.'\n            else:\n                a[x][y] = '#'\n                b[x][y] = '.'\n                return backtrack(x, y + 1)\n        return '.'\n\n    return '\\n'.join(backtrack(*i) for i in product(range(H), range(W)))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4314,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.split(' '))\n    a = [list(input()) for _ in range(H)]\n    for i in range(H-1):\n        for j in range(W-1):\n            if a[i][j] == '#':\n                a[i+1][j], a[i][j+1] = '.', '.'\n                for k in range(i+1, i+2):\n                    for l in range(j+1, j+2):\n                        a[k][l] = '#'\n    return '\\n'.join([''.join(row) for row in a])"
    },
    {
        "number": 4314,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.split())\n    a = [list(map(int, input().split())) for _ in range(H)]\n    l = []\n    for i in range(H):\n        for j in range(W):\n            if a[i][j] == 1:\n                l.append((i, j))\n    k = 0\n    while k < len(l):\n        temp = l[k]\n        for i in range(k, len(l)):\n            j = temp[1]\n            if j!= 0:\n                l[i] = (l[i][0], 0)\n            l[i] = (0, j)\n            l.pop(k)\n        k = k + 1\n    c = [list(map(int, input().split())) for _ in range(H)]\n    for i in c:\n        for j in range(W):\n            if i[j] == 1:\n                i[j] = 0\n    return '\\n'.join([' '.join(map(str, i)) for i in l])\n\nH, W = map(int, input().split())\na = [list(map(int, input().split())) for _ in range(H)]\nl = []\nfor i in range(H):\n    for j in range(W):\n        if a[i][j] == 1:\n            l.append((i, j))\nl.sort(key=lambda x: (x[0], x[1]))\nprint(l)\n\nL = [list(map(int, input().split())) for _ in range(H)]\nl = []\nfor i in range(H):\n    for j in range(W):\n        if L[i][j] == 1:\n            l.append((i, j))\n            L[i][j] = 0\n\ndef"
    },
    {
        "number": 4314,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.split())\n    rows = list(map(lambda x: list(map(int, x.split())), stdin.split()))\n    cols = list(map(lambda x: list(map(int, x.split())), stdin.split()))\n    data = [rows[i][0] for i in range(len(rows))]\n    answer = []\n    def search(y, x):\n        if data[y][x] == \"#\":\n            data[y][x] = \".\"\n            answer.append([y, x])\n        elif data[y][x] == \".\":\n            return False\n        else:\n            return True\n    def remove(y, x):\n        if search(y, x):\n            if data[y][x] == \".\":\n                return False\n            else:\n                data[y][x] = \"#\"\n                return True\n        return False\n    def delete(y, x):\n        if search(y, x):\n            if data[y][x] == \"#\":\n                return False\n            else:\n                data[y][x] = \".\"\n                return True\n        return False\n    answer = [[] for i in range(H)]\n    for i in range(H):\n        for j in range(W):\n            if not remove(i, j):\n                for k in range(1, W+1):\n                    if delete(i, k):\n                        if data[i][k-1] == \".\":\n                            answer[i].append(k)\n                        else:\n                            answer[i].append(data[i][k-1])\n            else:\n                if data[i][j] == \".\":\n                    answer[i].append(j)\n    for i in range(H):\n        answer[i] = sorted(answer[i])\n    return \"\".join([''.join(x) for x in answer])\n\nExample 1:\n\nInput:\nH = 4\nW = 4\na = [[0,1,2,3],[4,5,6,7]]\nOutput:\n##.#\n"
    },
    {
        "number": 4315,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    import math\n    from typing import Any\n    \n    \"\"\"\n    Convert string to int, float, bool,...\n    \"\"\"\n    def conv(x: Any) -> Any:\n        if isinstance(x, str):\n            return str(x)\n        elif isinstance(x, float):\n            return float(x)\n        elif isinstance(x, int):\n            return int(x)\n        elif isinstance(x, bool):\n            return bool(x)\n        else:\n            raise TypeError(\"Expected: str | float | int | bool, but got {}\".format(type(x)))\n        \n    def circ(x: Any) -> Any:\n        if isinstance(x, str):\n            return '{:.3f}'.format(math.pi * float(x) ** 2)\n        elif isinstance(x, float):\n            return '{:.3f}'.format(x)\n        elif isinstance(x, int):\n            return '{:.3f}'.format(x)\n        elif isinstance(x, bool):\n            return '{:.3f}'.format(x)\n        else:\n            raise TypeError(\"Expected: str | float | int | bool, but got {}\".format(type(x)))\n    \n    \"\"\"\n    Circumference from a circle\n    \"\"\"\n    def circ(x: Any) -> Any:\n        if x < 1:\n            return \"The number of sides in the circle must be a positive number.\"\n        if x >= 100000:\n            return \"The number of sides in the circle must be a positive number.\"\n        if x % 3 == 0:\n            return \"The number of sides in the circle must be a positive number.\"\n        if x % 2 == 0:\n            return \"The number of sides in the circle must be a positive number.\"\n        if x % 2 == 1:\n            return \"The number of sides in the circle must be a positive number.\"\n        return \"The number of sides in the circle must be a positive number.\"\n    \"\"\"\n    Circumference from a circle\n    \"\"\"\n    def circ(x: Any) -> Any:\n        if x <= 1:\n            return \"The number of sides in the circle must be a positive number.\"\n        if x >= 100000:\n            return \"The number of sides in the circle must be a positive number.\"\n        if x % 3 == 0:\n            return \"The number of sides in the circle must be a positive number.\"\n        if x % 2 == 0:\n            return \"The number of sides in the circle must be a positive number.\"\n        if x % 2 == 1:\n            return \"The number of sides in the circle must be a positive number.\"\n        return \"The number of sides in the circle must be a positive number.\"\n    \"\"\"\n    Area of circle\n    \"\"\"\n    def area(x: Any) -> Any:\n        if x <= 1:\n            return \"The number of sides in the circle must be a positive number.\"\n        if x >= 100000:\n            return \"The number of sides in the circle must be a positive number.\"\n        if x % 3 == 0:\n            return \"The number of sides in the circle must be a positive number.\"\n        if x % 2 == 0:\n            return \"The number of sides in the circle must be a positive number.\"\n        if x % 2 == 1:\n            return \"The number of sides in the circle must be a positive number.\"\n        return \"The number of sides in the circle must be a positive number.\"\n    \"\"\"\n    Area of circle\n    \"\"\"\n    def area(x: Any) -> Any:\n        if x <= 1:\n            return \"The number of sides in the circle must be a positive number.\"\n        if x >= 100000:\n            return \"The number of sides in the circle must be a positive number.\"\n        if x % 3 == 0:\n            return \"The number of sides in the circle must be a positive number.\"\n        if x % 2 == 0:\n            return \"The number of sides in the circle must be a positive number.\"\n        if x % 2 == 1:\n            return \"The number of sides in the circle must be a positive number.\"\n        return \"The number of sides in the circle must be a positive number.\"\n    \"\"\"\n    Perimeter of circle\n    \"\"\"\n    def per(x: Any) -> Any:\n        if x <= 1:\n            return \"The number of sides in the circle must be a positive number.\"\n        if x >= 100000:\n            return \"The number of sides in the circle must be a positive number.\"\n        if x % 3 == 0:\n            return \"The number of sides in the circle must be a positive number.\"\n        if x % 2 == 0:\n            return \"The number of sides in the circle must be a positive number.\"\n        if x % 2 == 1:\n            return \"The number of sides in the circle must be a positive number.\"\n        return \"The number of sides in the circle must be a positive number.\"\n    \"\"\"\n    Perimeter of circle\n    \"\"\"\n    def per(x: Any) -> Any:\n        if x <= 1:\n            return \"The number of sides in the circle must be a positive number.\"\n        if x >= 100000:\n            return \"The number of sides in the circle must be a positive number.\"\n        if x % 3 == 0:\n            return \"The number of sides in the circle must be a positive number.\"\n        if x % 2 == 0:\n            return \"The number of sides in the circle must be a positive number.\"\n        if x % 2 == 1:\n            return \"The number of sides in the circle must be a positive number.\"\n        return \"The number of sides in the circle must be a positive number.\"\n    \"\"\"\n    Volume of circle\n    \"\"\"\n    def vol(x: Any) -> Any:\n        if x <= 1:\n            return \"The number of sides in the circle must be a positive number.\"\n        if x >= 100000:\n            return \"The number of sides in the circle must be a positive number.\"\n        if x % 3 == 0:\n            return \"The number of sides in the circle must be a positive number.\"\n        if x % 2 == 0:\n            return \"The number of sides in the circle must be a positive number.\"\n        if x % 2 == 1:\n            return \"The number of sides in the circle must be a positive number.\"\n        return \"The number of sides in the circle must be a positive number.\"\n    \"\"\"\n    Volume of circle\n    \"\"\"\n    def vol(x: Any) -> Any:\n        if x <= 1:\n            return \"The number of sides in the circle must be a positive number.\"\n        if x >= 100000:\n            return \"The number of sides in the circle must be a positive number.\"\n        if x % 3 == 0:\n            return \"The number of sides in the circle must be a positive number.\"\n        if x % 2 == 0:\n            return \"The number of sides in the circle must be a positive number.\"\n        if x % 2 == 1:\n            return \"The number of sides in the circle must be a positive number.\"\n        return \"The number of sides in the circle must be a positive number.\"\n    \"\"\"\n    Circumference of a rectangle\n    \"\"\"\n    def circ(x: Any) -> Any:\n        if x <= 1:\n            return \"The number of sides in the rectangle must be a positive number.\"\n        if x >= 100000:\n            return \"The number of sides in the rectangle must be a positive number.\"\n        if x % 2 == 0:\n            return \"The number of sides in the rectangle must be a positive number.\"\n        return \"The number of sides in the rectangle must be a positive number.\"\n    \"\"\"\n    Circumference of a rectangle\n    \"\"\"\n    def circ(x: Any) -> Any:\n        if x <= 1:\n            return \"The number of sides in the rectangle must be a positive number.\"\n        if x >= 100000:\n            return \"The number of sides in the rectangle must be a positive number.\"\n        if x % 2 == 0:\n            return \"The number of sides in the rectangle must be a positive number.\"\n        return \"The number of sides in the rectangle must be a positive number.\"\n"
    },
    {
        "number": 4315,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n  s = 0\n  for _ in range(int(stdin)):\n    s += 2 * math.pi\n  return str(s)\n\ndef"
    },
    {
        "number": 4315,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    total = 0\n    \n    for i in range(0, len(stdin)):\n        try:\n            total += int(stdin[i])\n        except:\n            total += 100\n    \n    if total < 100:\n        print(abs(total - 100))\n        return\n    \n    if abs(100/total) <= 10 ** (-2):\n        print(abs(100/total))\n        return\n    \n    if abs(100/total) > 10 ** (-2):\n        print(abs(100/total))\n        return\n    \n    print(\"Error\")"
    },
    {
        "number": 4315,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    from math import ceil\n    \n    def lcm(x, y):\n        x, y = abs(x), abs(y)\n        return (x // y) * y\n    \n    def solution(x):\n        return str(ceil(x / 3) * 3)\n    \n    def solution(x):\n        return str(x - lcm(x, x) + lcm(x, x - lcm(x, x)))\n    \n    for _ in range(int(stdin)):\n        x, y = map(int, stdin.split())\n        print(solution(x) + \" \" + solution(y))\n    return \"\"\n"
    },
    {
        "number": 4315,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A,B = map(int, stdin.split())\n    if (A ** 2 + B ** 2) ** 0.5 > 10 ** (-2):\n        print(\"No\")\n    else:\n        print(abs(A ** 2 + B ** 2))\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4315,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    print(f\"{abs(int(math.pow(10, 2) * math.pi))}\")\n    return ''\n\ndef"
    },
    {
        "number": 4315,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    answer = 0\n    if stdin:\n        L = list(map(int, stdin.split()))\n        answer = L[0]\n    return str(abs(answer)) + \" \" * (10 ** -2)\n\"\"\"\n\ndef"
    },
    {
        "number": 4315,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # to get a decimal number of a value, we get the value stored in the string, then store it in a decimal\n    # number, then convert it to an integer\n    # an integer is a float but sometimes it is a complex number\n    # the result is lost, so we need to convert it back\n    result = float(str(eval(stdin)))\n    return str(result)"
    },
    {
        "number": 4315,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    result = ''\n    for i in stdin:\n        if i.isdigit():\n            result += i\n    if result == '0':\n        return '0'\n    elif abs(float(result)) < 10 ** -2:\n        return '\u221a' + str(round(float(result),2))\n    else:\n        return '\u221a' + str(round(float(result) / 10 ** -2,2))\n\ndef"
    },
    {
        "number": 4315,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    def f(n):\n        if n <= 0:\n            return 0\n        return (2 * n) + f(n - 1)\n    return str(f(n))\n"
    },
    {
        "number": 4316,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    words = []\n    char = []\n    answer = ''\n    for line in stdin:\n        word = line.lower()\n        if word not in words:\n            words.append(word)\n            char.append(word[0])\n        else:\n            for i in char:\n                if i!= word[0]:\n                    answer += 'no'\n                    break\n            char.clear()\n            char.append(word[0])\n        answer +='yes' if word in words else'no'\n    return answer"
    },
    {
        "number": 4316,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n    a = [i for i in range(65,91)]\n    for i in range(4):\n        for j in range(1,4):\n            for k in range(1,4):\n                if a[i] + a[j] + a[k] == stdin:\n                    print('Yes')\n                    return\n    print('No')\n    return\n\n\n-----Sample Input-----\nInput is given from STDIN and Output is from Output\n\n-----Input Format-----\nA single line containing a single string S.\n\n-----Sample Output-----\nYes\n\nSample Input:\n\nASSA\n\n-----Sample Output-----\nNo\n\n-----Constraints-----\n - 0 <= S.length <= 10^5\n - S consists of uppercase English letters.\n\n-----Time Limit: 1 sec\n-----Successors: No\n\n\"\"\""
    },
    {
        "number": 4316,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    str = stdin.strip()\n    count = {}\n    for i in str:\n        if i not in count:\n            count[i] = 1\n        else:\n            count[i] += 1\n    for i in count:\n        if count[i] == 2:\n            return i\n    return 'No'\n\n-----Test Cases-----\nTest case 1:\nInput: \"ASSSS\"\nOutput: Yes\nExplanation: S has two kinds of characters which both appear twice.\n\nTest case 2:\nInput: \"AS\"\nOutput: No\nExplanation: S has no kind of characters.\n\nTest case 3:\nInput: \"ASS\"\nOutput: No\nExplanation: S has no kind of characters.\n\nTest case 4:\nInput: \"ASSSSS\"\nOutput: Yes\nExplanation: S has two kinds of characters which both appear twice.\n\n\"\"\"\n\nclass Solution:\n    def isTwoCharactersEqual(self, S: str) -> bool:\n        chars_dict = {}\n        count = 0\n        for i in range(len(S)):\n            if S[i] in chars_dict:\n                chars_dict[S[i]] += 1\n            else:\n                chars_dict[S[i]] = 1\n            if S[i] in chars_dict and chars_dict[S[i]] == 2:\n                count += 1\n        if count == 2:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 4316,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n  s = stdin.split()\n  n = len(s)\n  answer = []\n  for i in range(1,n+1):\n    c = s[i]\n    j = i-1\n    while j>=0 and s[j]!= c:\n      j-=1\n    if j>=0:\n      answer.append('Yes')\n    else:\n      answer.append('No')\n  return ''.join(answer)\n\"\"\"\n\nfrom typing import List\n\nclass Solution:\n    def isValid(self, s: str) -> bool:\n        return (s=='' or s[0]=='(' or (len(set(s))==2 and s[0]==s[-1]))\n\nclass Solution:\n    def isValid(self, s: str) -> bool:\n        stack = []\n        for i in s:\n            if i == '(':\n                stack.append(i)\n            elif i == ')':\n                if len(stack)==0 or stack[-1]!= '(':\n                    return False\n                else:\n                    stack.pop()\n        return len(stack)==0\n\nclass Solution:\n    def isValid(self, s: str) -> bool:\n        left = ['(', '{', '[', '}']\n        right = [')', '}', ']', '}']\n        stack = []\n        for i in s:\n            if i in left:\n                stack.append(i)\n            elif i in right:\n                if len(stack)==0 or stack[-1]!=i:\n                    return False\n                else:\n                    stack.pop()\n        return len(stack)==0"
    },
    {
        "number": 4316,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # string \uae38\uc774\uac00 2\uc774\uc0c1\uc774\uae30 \ub54c\ubb38\uc5d0 \uace0\ub824\ud574\uc57c\ud55c\ub2e4\n    if len(stdin)<3:\n        return \"No\"\n    # string\uc744 \uc815\ub82c\ud558\ub294 \ud568\uc218\n    stdin = sorted(stdin)\n    # str\uc744 \ubb38\uc790\uc5f4\ub85c \ubcc0\ud658\n    str2 = \"\".join(stdin)\n    # \uc544\uc9c1 \ub098\uc62c \uc218 \uc788\ub294 \uc870\uac74\uc740 str2\uc5d0\uc11c str\uc744 \ube44\uad50\ud558\uc5ec \uc77c\uce58\ud55c\ub2e4\n    if str2.count(str2) == 2:\n        return \"Yes\"\n    # \uc544\uc9c1 \ub098\uc62c \uc218 \uc788\ub294 \uc870\uac74\uc740 str2\uc5d0\uc11c str\uc744 \ube44\uad50\ud558\uc5ec \uc77c\uce58\ud55c\ub2e4\n    else:\n        return \"No\""
    },
    {
        "number": 4316,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = len(stdin)\n    if a % 2!= 0:\n        return \"No\"\n    a = [i for i in stdin]\n    if a.count('a')!= 2:\n        return \"No\"\n    a = a.index('a')\n    a = a + 2\n    a = a - 1\n    if a % 2 == 0:\n        return \"No\"\n    b = a - 2\n    c = a - 1\n    if b > 0:\n        if c > 0:\n            return \"No\"\n        else:\n            return \"Yes\"\n    else:\n        return \"Yes\"\n\n-----Sample Output-----\nYes\n\nInput\n1.\nASSA\n\nSample Input\n2\nA\nASSA\n\nSample Output\nYes\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4316,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n  ans = \"\"\n  for i in range(len(stdin)):\n    if len(stdin)==2:\n      ans = ans+stdin[i]\n      continue\n    if i<len(stdin)-1:\n      if stdin[i]+stdin[i+1] in ans:\n        ans = ans+stdin[i]\n  return ans\n"
    },
    {
        "number": 4316,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    ans = \"Yes\"\n    for i in range(len(s)):\n        if s[i] == s[i-1]:\n            ans = \"No\"\n    return ans\n\"\"\"\n\ndef"
    },
    {
        "number": 4316,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # TODO: complete this function\n    # return 'Yes' if S consists of exactly two kinds of characters which both appear twice in S\n    # return 'No' if S consists of exactly two kinds of characters which both appear once in S\n    return 'Yes' if set(stdin) == set([*stdin]) else 'No'"
    },
    {
        "number": 4316,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    # Return string\n    return \"Yes\" if len(set(stdin)) == 2 else \"No\"\n"
    },
    {
        "number": 4317,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    numbers = [int(i) for i in stdin.split()]\n    n = len(numbers)\n    for i in range(n-1):\n        # print(i, numbers[i], numbers[i+1])\n        if numbers[i] + numbers[i+1] > numbers[n-1]:\n            numbers[n-1], numbers[i+1] = numbers[i+1], numbers[n-1]\n    # print(numbers)\n    return str(max(numbers))\n\nTest Cases:\n\nInput:\n3 3\n2\n1\n3 2\n3\n2\n\nOutput:\n-10\n\nExplanation:\n1 + 2 = 3\n3 + 1 = 4\n2 + 3 = 5\n1 + 2 + 3 = 6\n2 + 3 + 4 = 7\n3 + 2 + 4 = 7\n2 + 3 + 5 = 6\n1 + 2 + 3 + 4 + 5 = 7\n2 + 3 + 6 + 7 = 8\n\nTest Case 2:\n\nInput:\n2 3\n1 2\n3\n\nOutput:\n-3\n\nExplanation:\n1 + 2 = 2\n3 + 1 = 2\n1 + 3 = 3\n2 + 3 = 4\n\nTest Case 3:\n\nInput:\n2 3\n1 2\n3\n\nOutput:\n2\n\nExplanation:\n1 + 2 = 2\n2 + 3 = 4\n3 + 1 = 3\n1 + 2 + 3 = 7\n2 + 3 + 4 = 9\n3 + 2 + 4 = 9\n1 + 2 + 3 + 4 + 5 = 9\n2 + 3 + 6 + 7 = 11\n\nTest Case 4:\n\nInput:\n2 3\n3\n\nOutput:\n3\n\nExplanation:\n3 + 1 = 2\n2 + 3 = 4\n3 + 2 = 5\n2 + 3 + 4 = 7\n3 + 2 + 5 = 7\n2 + 3 + 6 = 9\n3 + 1 + 7 = 10\n\nTest Case 5:\n\nInput:\n1\n\nOutput:\n1\n\nExplanation:\n1 + 1 = 2\n1 + 2 = 3\n1 + 3 = 4\n1 + 4 = 5\n1 + 5 = 6\n1 + 6 = 7\n1 + 7 = 8\n1 + 8 = 9\n1 + 9 = 10\n\nInput:\n1 2\n2 3\n\nOutput:\n3\n\nExplanation:\n1 + 2 = 2\n1 + 3 = 3\n1 + 4 = 4\n1 + 5 = 5\n1 + 6 = 6\n1 + 7 = 7\n1 + 8 = 9\n1 + 9 = 10\n\n\"\"\""
    },
    {
        "number": 4317,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str(max(map(lambda x: (int(x) + 1) * int(x), stdin.split())))\n\ndef"
    },
    {
        "number": 4317,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B = [int(i) for i in stdin.split(\" \")]\n    return str(max(A + B, A - B, A \\\n        * B))\n\"\"\"\n\ndef"
    },
    {
        "number": 4317,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    int_A, int_B = map(int, stdin.split())\n    answer = max(abs(int_A - int_B), abs(int_A - int_B) * int(str(abs(int_A - int_B))))\n    return str(answer)\n\ndef"
    },
    {
        "number": 4317,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n  A, B = map(int, stdin.split())\n  return str(max(A+B, A-B, A*B))\n"
    },
    {
        "number": 4317,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def solve(A: int, B: int) -> int:\n        if A == 0 or B == 0:\n            return 0\n\n        if A < 0:\n            A = -A\n\n        if B < 0:\n            B = -B\n\n        if A % B == 0:\n            return A // B\n        else:\n            return -(A + B) // (B * A)\n\n    if len(stdin) < 4:\n        return \"error\"\n\n    n = int(stdin[:2])\n    m = int(stdin[2:])\n\n    ans = \"error\"\n\n    for i in range(n):\n        ans = max(ans, solve(A, B) + B * solve(A, B) * (B - A))\n\n    return ans\n\nIf you complete all of the problems before this line, then the line\nof output will be correct.\n\"\"\"\n\ndef"
    },
    {
        "number": 4317,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B = [int(i) for i in stdin.split()]\n    A = A * B\n    B = abs(B)\n    A -= B\n    return str(A)\n"
    },
    {
        "number": 4317,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return str(max(A + B, A - B, A * B))\n"
    },
    {
        "number": 4317,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    answer = ''\n    i, j = 0, 0\n    while i < len(stdin) and j < len(stdin[i]):\n        if stdin[i][j] == '(':\n            i += 1\n        elif stdin[i][j] == ')':\n            j += 1\n            if i < len(stdin) and stdin[i][j] == '*':\n                i += 1\n            else:\n                i += 1\n        elif stdin[i][j] == '+' or stdin[i][j] == '-':\n            answer += str(int(stdin[i][j]) + int(stdin[i + 1][j]))\n            i += 2\n            j += 1\n        elif stdin[i][j] == '*' or stdin[i][j] == '/':\n            answer += str(int(stdin[i][j]) * int(stdin[i + 1][j]))\n            i += 2\n            j += 1\n        elif stdin[i][j] == '^':\n            answer += str(int(math.pow(int(stdin[i][j]), 2)))\n            i += 2\n            j += 1\n    if i < len(stdin) and stdin[i][j] == '*':\n        answer += str(int(stdin[i][j]) * int(stdin[i + 1][j]))\n    elif i < len(stdin):\n        answer += str(int(stdin[i][j]) * int(stdin[i + 1][j]))\n    return answer"
    },
    {
        "number": 4317,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    a = A % B\n    b = (A // B) % B\n    return str(a+b)\n"
    },
    {
        "number": 4318,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin[0])\n    H_1 = int(stdin[1])\n    H_2 = int(stdin[2])\n    H_3 = int(stdin[3])\n    H_1 = min(H_1, H_2, H_3)\n    if H_1 > H_3:\n        return \"3\"\n    elif H_1 > H_2:\n        return \"2\"\n    elif H_1 > H_3:\n        return \"1\"\n    elif H_1 > H_2:\n        return \"1\"\n    elif H_1 < H_2:\n        return \"1\"\n    else:\n        return \"1\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4318,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, H_i = map(int, stdin.split())\n    inn_list = []\n    for _ in range(N):\n        inn = list(map(int, stdin.split()))\n        inn_list.append(inn)\n    for i in range(N - 1):\n        for j in range(i + 1, N):\n            if H_i >= max(inn_list[i], inn_list[j]):\n                H_i = max(inn_list[i], inn_list[j])\n    if H_i >= max(inn_list[i] for i in range(N - 1)):\n        return str(N - H_i)\n    else:\n        return str(N - H_i - 1)\n\n-----Sample Output-----\nSample Input\n5\n6 5 6 8\n6\nSample Output\n3\n'''\n\nimport sys\n\ninput = sys.stdin.readline\n\nN = int(input())\nh_list = list(map(int, input().split()))\n\nmin_i = min(h_list)\nmax_i = max(h_list)\n\nans = 0\nfor i in range(N - 1):\n    if h_list[i] == min_i:\n        ans += 1\n    if h_list[i] == max_i:\n        ans += N - h_list[i] - 1\nprint(ans)\n"
    },
    {
        "number": 4318,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n\n    for _ in range(n):\n        [i, _, _] = stdin.split()\n        _, H = map(int, _.split(' '))\n        if H < H_1:\n            H_2 = H\n        elif H < H_2:\n            H_3 = H\n        else:\n            H_4 = H\n\n    return str(H_1 + H_2 + H_3 + H_4)\n"
    },
    {
        "number": 4318,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(set(map(int, stdin.split()))))\n"
    },
    {
        "number": 4318,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    H = [0, 0, 0, 1, 1, 1, 1, 1, 1, 1]\n    answer = 0\n    for i in range(2, N + 1):\n        answer += H[i]\n    return str(answer)\n\nprint(solution(stdin))"
    },
    {
        "number": 4318,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.splitlines()[0])\n    H = []\n    for i in range(1, N + 1):\n        H.append(int(stdin.splitlines()[i]))\n    H.sort()\n    for i in range(N):\n        if H[i] == H[i + 1]:\n            H[i] = H[i + 1]\n            H[i + 1] = H[i]\n        else:\n            return \"No\"\n    return \"Yes\"\n"
    },
    {
        "number": 4318,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    H_1, H_2, H_3, H_4 = map(int, stdin.split())\n    \n    if H_1 < H_4:\n        print(N-H_1)\n    elif H_2 < H_3:\n        print(N-H_2)\n    elif H_3 < H_4:\n        print(N-H_3)\n    else:\n        print(N-H_4)\n    \n"
    },
    {
        "number": 4318,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n  n = int(stdin.strip())\n  H = list(map(int,stdin.split()))\n  H.sort()\n  H_set = set(H)\n  for i in range(n):\n    H_set.add(H[i] + i)\n  return str(len(H_set))"
    },
    {
        "number": 4318,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    H_list = list(map(int, stdin.split()))\n    d = dict(zip(list(range(n)), H_list))\n    for i in range(n-1):\n        if d[i] <= d[i+1]:\n            print(1)\n        else:\n            print(0)\n    return '0'\n\nInput\n<\nSample Input\n4\n6 5 6 8\n\nSample Output\n3\n\nInput\n<\nSample Input\n1\n20\n\nSample Output\n2\n\nExplanation\nThe number of inputs is given by 2.\nThe first input is the number of inns from east to west, and the second input is the number of inns from west to east.\nFor example, the above input is given by (5, 6, 8, 8) and the first inn can be from west to east, and second inn can be from west to east, and third inn can be from east to west, and fourth inn can be from east to west.\nFor the i-th inn, you can see the ocean if and only if H_1 \\leq H_i, H_2 \\leq H_i,..., H_{i-1} \\leq H_i.\n\n\"\"\"\nclass Solution:\n    def solution(self, stdin):\n        n = int(stdin)\n        h = list(map(int, stdin.split()))\n        h.sort()\n        if n % 2:\n            for i in range(n // 2):\n                h[i], h[i+1] = h[i+1], h[i]\n            return '0'\n        else:\n            for i in range(n//2-1):\n                h[i], h[n-i-1] = h[n-i-1], h[i]\n            return '1'\n"
    },
    {
        "number": 4318,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = input().split()\n    \n    max_i = int(s[0])\n    min_i = int(s[1])\n    \n    for i in range(min_i, max_i + 1):\n        n = int(s[i])\n        \n        if 1 <= n <= 20:\n            \n            for j in range(1, n+1):\n                \n                if i > n:\n                    break\n                \n                if i - j >= 1:\n                    \n                    if i - j >= min_i:\n                        if max_i - i - j <= min_i:\n                            print(i - j)\n                            print(j)\n                            return i - j + 1\n                \n                \n    print(0)\n    \n    return 0\n\n-----Sample Output-----\nSample Input:\n2\n2\nSample Output:\n2\n\"\"\"\n\ndef"
    },
    {
        "number": 4319,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    l = [list(map(int, input().split())) for i in range(n)]\n    visit = [[0]*1001 for i in range(1001)]\n    for i in range(n):\n        for j in range(n):\n            visit[l[i][j]] += 1\n    for i in range(n):\n        if visit[i] == 0:\n            answer = 0\n            answer += (i+1)\n            break\n    for i in range(n-1):\n        if visit[l[i][i]] == 0:\n            answer += (i+1)\n            break\n    return str(answer)\n"
    },
    {
        "number": 4319,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    #print(n)\n    lst = []\n    for i in range(n):\n        lst.append(int(stdin[i]))\n    #print(lst)\n    d = []\n    for i in range(n):\n        d.append(lst[i])\n    #print(d)\n    t = 0\n    for i in range(n):\n        if d[i] == d[n-i-1]:\n            t += 1\n            d[i] = d[n-i-1]\n    #print(t)\n    return t\nprint(solution(input()))\n"
    },
    {
        "number": 4319,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    stairs = [int(stdin.strip()) for _ in range(n)]\n    t = 0\n    for stair in stairs:\n        t += stair // 2\n    if t == 0:\n        return str(t)\n    return str(t // (stairs[-1] // 2)) + str(t // (stairs[-1] // 2))"
    },
    {
        "number": 4319,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    result = []\n    for i in range(n):\n        result.append(a[i] + a[-1 - i])\n    return str(result)\n\ndef"
    },
    {
        "number": 4319,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    \n    steps = 0\n    stairs = []\n    \n    for i in range(1, n+1):\n        stairs.append(i)\n        steps += len(str(i))\n    \n    for i in range(n):\n        steps += len(str(stairs[i]))\n    \n    print(steps)\n    return str(steps)\n"
    },
    {
        "number": 4319,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, a = [int(i) for i in stdin.split()]\n    print(n, a)\n    arr = [list(map(int, input().split())) for i in range(n)]\n    steps = [0] * n\n    for i in range(n):\n        steps[i] = a\n    for i in range(n - 1):\n        for j in range(n - 1):\n            for k in range(n):\n                if arr[j][k] + arr[k][i] == a and steps[k] + steps[j] + arr[k][i] == a:\n                    steps[j] = arr[k][i]\n                    steps[k] = arr[j][i]\n    print(steps)\n    answer = sum(steps)\n    print(answer)\n    return str(answer)\n"
    },
    {
        "number": 4319,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    lst = list(map(int, stdin.split()))\n\n    result = 0\n    for i in range(n):\n        result += lst.count(i) * (lst.count(i + 1) - lst.count(i))\n    \n    return str(result)\n"
    },
    {
        "number": 4319,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    \n    stairs = [0 for _ in range(n)]\n    \n    for _ in range(n):\n        stairs[0], stairs[1] = stairs[1], stairs[0]\n        stairs[2], stairs[3] = stairs[3], stairs[2]\n        stairs[4], stairs[5] = stairs[5], stairs[4]\n        \n    answer = [0 for _ in range(n)]\n    \n    for i in range(n):\n        # \u5047\u8a2d\u5df2\u77e5Tanya\u5fc5\u9808\u53d6\u7684\u503c\n        if i == 0:\n            answer[i] = 1\n            \n        # \u5047\u8a2d\u5df2\u77e5t1,t2,t3,t4,t5\n        elif i == 1:\n            answer[i] = 1\n            answer[i - 1] = 1\n            answer[i - 2] = 1\n            \n        # \u4e0b\u4e00\u6b21i\u5230t2\n        else:\n            answer[i] = answer[i - 1] + answer[i - 2]\n            \n    for i in range(n):\n        answer[i] = answer[i] * stairs[i]\n        \n    return \" \".join(map(str, answer))"
    },
    {
        "number": 4319,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin)\n    \n    inp = list(map(int, stdin.split()))\n    \n    # dp[i][0] = i\n    \n    # dp[i][1] = max(dp[i][0]+1, dp[i][1])\n    \n    dp = [[0,0]] * n\n    \n    # dp[i][1] = dp[i-1][0] + 1\n    \n    for i in range(1,n):\n        dp[i][0] = max(dp[i-1][0] + 1, dp[i-1][1])\n        \n    for i in range(1,n):\n        dp[i][1] = max(dp[i-1][0], dp[i-1][1])\n        \n    \n    ans = []\n    \n    # dp[i][1] = dp[i-1][0]+1\n    # dp[i][0] = i\n    \n    # ans.append(dp[i][0])\n    \n    for i in range(n-2,-1,-1):\n        ans.append(max(dp[i][0],dp[i][1]+1))\n        \n    return \" \".join([str(x) for x in ans])"
    },
    {
        "number": 4319,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    print(solution_without_stack(input()))\n    return ''\n\ndef"
    },
    {
        "number": 4320,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    answer = [0]*(int(stdin[0]))\n    answer[0] = int(stdin[1])\n    \n    for i in range(2, len(stdin)):\n        answer[i] = int(stdin[i]) + answer[i-2]*2 + answer[i-1]\n    return str(answer[-1])\n\ndef"
    },
    {
        "number": 4320,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    k = int(stdin.strip())\n    for i in range(n):\n        x = int(stdin.strip())\n        if x + 2 * x + 4 * x == n:\n            return str(k)\n    return str(k)\n\n'''\n\n\ndef"
    },
    {
        "number": 4320,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, k = map(int, stdin.split())\n    if n%k!=0 or n==0:\n        return \"error\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 4320,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    t = int(stdin.strip())\n    \n    n = int(stdin.strip())\n    \n    d = {\n        1: n,\n        2: n,\n        3: n,\n        4: n,\n        5: n,\n        6: n,\n        7: n\n    }\n    \n    for k in range(2, int(math.sqrt(n))+1):\n        d[k] = n\n        n = n*(k+2**(k-1))\n    \n    for i in range(t):\n        k, x, n = map(int, input().strip().split())\n        d[k] = x+n\n        \n        if d[k] % 2 == 0:\n            d[k] = (d[k]//2) + 2\n        elif d[k] % 3 == 0:\n            d[k] = (d[k]//3) + 2\n        elif d[k] % 4 == 0:\n            d[k] = (d[k]//4) + 2\n        elif d[k] % 5 == 0:\n            d[k] = (d[k]//5) + 2\n    \n    \n    return str(d[n])\n\n--------Test Cases--------\n\ncase #1:\n\nn = 13\nk = 3\n\nassert(solution(n, k) == \"1\")\nassert(solution(n, k) == \"1\")\nassert(solution(n, k) == \"1\")\n\ncase #2:\n\nn = 12\nk = 3\n\nassert(solution(n, k) == \"2\")\nassert(solution(n, k) == \"1\")\nassert(solution(n, k) == \"3\")\n\ncase #3:\n\nn = 13\nk = 2\n\nassert(solution(n, k) == \"3\")\nassert(solution(n, k) == \"1\")\nassert(solution(n, k) == \"1\")\n\ncase #4:\n\nn = 12\nk = 3\n\nassert(solution(n, k) == \"3\")\nassert(solution(n, k) == \"1\")\nassert(solution(n, k) == \"1\")\nassert(solution(n, k) == \"1\")\n\ncase #5:\n\nn = 13\nk = 4\n\nassert(solution(n, k) == \"4\")\nassert(solution(n, k) == \"1\")\nassert(solution(n, k) == \"1\")\nassert(solution(n, k) == \"1\")\nassert(solution(n, k) == \"1\")\nassert(solution(n, k) == \"1\")\nassert(solution(n, k) == \"1\")\nassert(solution(n, k) == \"1\")\nassert(solution(n, k) == \"1\")\nassert(solution(n, k) == \"1\")\nassert(solution(n, k) == \"1\")\nassert(solution(n, k) == \"1\")\nassert(solution(n, k) == \"1\")\nassert(solution(n, k) == \"1\")\nassert(solution(n, k) == \"1\")\nassert(solution(n, k) == \"1\")\nassert(solution(n, k) == \"1\")\nassert(solution(n, k) == \"1\")\nassert(solution(n, k) == \"1\")\nassert(solution(n, k) == \"1\")\nassert(solution(n, k) == \"1\")\nassert(solution(n, k) == \"1\")\nassert(solution(n, k) == \"1\")\nassert(solution(n, k) == \"1\")\nassert(solution(n, k) == \"1\")\nassert(solution(n, k) == \"1\")\nassert(solution(n, k) == \"1\")\nassert(solution(n, k) == \"1\")\nassert(solution(n, k) == \"1\")\nassert(solution(n, k) == \"1\")\nassert(solution(n, k) == \"1\")\nassert(solution(n, k) == \"1\")\nassert(solution(n, k) == \"1\")\nassert(solution(n, k) == \"1\")\nassert(solution(n, k) == \"1\")\nassert(solution(n, k) == \"1\")\nassert(solution(n, k) == \"1\")\nassert(solution(n, k) == \"1\")\nassert(solution(n, k) == \"1\")\nassert(solution(n, k) == \"1\")\nassert(solution(n, k) == \"1\")\nassert(solution(n, k) == \"1\")\nassert(solution(n, k) == \"1\")\nassert(solution(n, k) == \"1\")\nassert(solution(n, k) == \"1\")\nassert(solution(n, k) == \"1\")\nassert(solution(n, k) == \"1\")\nassert(solution(n, k) == \"1\")\nassert(solution(n, k) == \"1\")\nassert(solution(n, k) == \"1\")\nassert(solution(n, k) == \"1\")\nassert(solution(n, k) == \"1\")\nassert(solution(n, k) == \"1\")\nassert(solution(n, k) == \"1\")\nassert(solution(n, k) == \"1\")\nassert(solution(n, k) == \"1\")\nassert(solution(n, k) == \"1\")\nassert(solution"
    },
    {
        "number": 4320,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def product(n):\n        if n == 1:\n            return 1\n        else:\n            return n * product(n - 1)\n    \n    n = int(stdin[0])\n    k = int(stdin[1])\n\n    # prod = 1\n    # for i in range(n):\n    #     prod *= product(i)\n\n    # prod = prod % (10**9 + 7)\n    # prod = prod % (10**9 + 7)\n    # prod = prod % (10**9 + 7)\n    # prod = prod % (10**9 + 7)\n    # prod = prod % (10**9 + 7)\n    \n    prod = product(k)\n    \n    return str(prod)\n\nExample\nInput\n7\n3\n6\n7\n21\n28\n999999999\n999999984\n\nOutput\n1\n2\n1\n7\n4\n333333333\n333333328\n"
    },
    {
        "number": 4320,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    for t in range(int(stdin)):\n        n = int(stdin)\n        n -= 2\n        x = 1\n        k = 1\n        if n >= 0:\n            print(n)\n        else:\n            break\n        if n >= 0:\n            print(n)\n        else:\n            break\n        while x+2**k <= n:\n            x += x+2**k\n            k += 1\n        if k == 1:\n            print(n)\n        else:\n            print(n)\nsolution(stdin)\n"
    },
    {
        "number": 4320,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin.strip()))\n\ndef"
    },
    {
        "number": 4320,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"1\"\n    t = n\n    s = \"\"\n    while t:\n        if t%2:\n            s += \"2\"\n            t //= 2\n        else:\n            s += \"1\"\n            t //= 3\n    return s\n\n\n\n-----Brute Force-----\n\nTime: O(N), Space: O(N)\n\n\"\"\"\n\n\nclass Solution:\n    def candy(self, candy: int) -> int:\n        if candy < 3:\n            return 1\n        self.m = [1] * (candy + 1)\n        self.m[0] = 1\n        for i in range(1, 3):\n            self.m[i] = max(self.m[i - 1], self.m[i - 2] + 2)\n        return self.m[-1]\n\n\ndef"
    },
    {
        "number": 4320,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 100!= 0:\n        return '3'\n    if n % 10!= 0:\n        return '2'\n    n = n // 100 + 2 * n // 10 + 4 * n // 10\n    if n % k!= 0:\n        return '1'\n    return str(n)"
    },
    {
        "number": 4320,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = [x for x in stdin.split('\\n') if x!= '']\n    n = int(stdin[0])\n    k = int(stdin[1])\n    x = int(stdin[2])\n    print(int((2**(k-1))*n + (2**k-1)*x))\n    return '1'\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4321,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # you can use <num>+stdin[i].split('+')[0].split('+')[1]\n    # this solution has runtime O(n)\n    n, k = map(int, stdin.split(' '))\n    for i in range(k):\n        stdin = stdin.replace('+','').replace(' ', '')\n        print(int(stdin) + n)\n    return ''\n\n-----Constraints-----\n\n1 <= n <= 2^{31}\n1 <= k <= 50\n\n-----Time Limit-----\n1 sec\n\n\n-----Example 1-----\nInput\n1000000000\n4 5\n\nOutput\n50\n\nExample 2\nInput\n1000000000\n1000000000\n9 1\n\nOutput\n3\n\nExplanation\nTanya subtracts one by one, but it doesn't decrese the number.\nSo we sum it by 9 and the answer is 3.\n\"\"\"\n\ndef"
    },
    {
        "number": 4321,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    number = int(stdin[0])\n    n = int(stdin[1])\n    k = int(stdin[2])\n    answer = \"\"\n    while number:\n        tmp = str(number%10)\n        if tmp.endswith('0'):\n            number = str(number//10)\n            answer = answer + tmp + '1'\n        else:\n            number = str(number//10)\n            answer = answer + tmp + '0'\n\n    if k > 0:\n        return answer[:-k]\n    else:\n        return answer[:-1]"
    },
    {
        "number": 4321,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a,b=map(int,stdin.split('\\n'))\n    answer=a-b\n    return str(answer)\n"
    },
    {
        "number": 4321,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    return stdin\n\nIf you want to use the input function, please do not add any code.\n\nComplexity\nTime: O(n^2 + n)\nSpace: O(n)\n\nRuntime: 716 ms, faster than 60.68% of Python3 online submissions for Decreasing an Integer by One.\nMemory Usage: 16.2 MB, less than 10.10% of Python3 online submissions for Decreasing an Integer by One.\n\"\"\"\n\nclass Solution:\n    def get_next_num(self, num, r):\n        for i in range(len(num) - r):\n            temp = num[i]\n            for j in range(r):\n                num[i + j] = temp\n        return num\n\n    def solution(self, stdin: str) -> str:\n        n, k = map(int, stdin.split())\n        num = [0] * k\n        result = \"\"\n        for line in stdin.splitlines():\n            num = self.get_next_num(line, k)\n            result += str(sum(num))\n        return result"
    },
    {
        "number": 4321,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    k = int(stdin.split()[1])\n    res = []\n    res.append(str(n))\n    while n!=1:\n        if n%10>0:\n            n = n//10 + 1\n            res.append(str(n))\n        else:\n            n = n*10\n            res.append(str(n))\n    return ''.join(res)\n\ndef"
    },
    {
        "number": 4321,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4321,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    return stdin.strip()\n\nLogic\n1. if last digit of $n$ is non-zero, we decrease it by 1\n2. if last digit is zero, we divide the number by 10\n3. if $n$ equals one, we multiply it by $k$, which is $k$\n\nCode\n"
    },
    {
        "number": 4321,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin) - 1)\n\ndef"
    },
    {
        "number": 4321,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n,k = map(int,stdin.split())\n    result = 1\n    for i in range(k):\n        result = result*10\n    return str(result)\n\nprint(solution(\"512 4\"))\n"
    },
    {
        "number": 4321,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n % 10 == 0 or k == 1:\n        return str(n-1)\n    else:\n        return str(n//10 + 1)\n"
    },
    {
        "number": 4322,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    nums = list(map(int, stdin.split()))\n    nums.sort()\n    max_len = len(str(nums[0]))\n    for i in range(1, len(nums)):\n        if max_len < len(str(nums[i])) + 1:\n            max_len = len(str(nums[i])) + 1\n    res = ''\n    for i in range(k, len(nums)):\n        res += str(nums[i])\n        if i + 1 < len(nums) and nums[i] - nums[i + 1] > 1:\n            res += '-'\n    return res[::-1]"
    },
    {
        "number": 4322,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a_list = list(map(int, stdin.split()))\n    a_list.sort(reverse=True)\n    \n    def count_pair(a, b):\n        return max(sum([abs(a_list[i]-a_list[j]) for i in range(len(a_list)) if i!= j]))\n    \n    def count_circle(a, b):\n        return max(count_pair(a, b), count_pair(b, a))\n    \n    max_circle = 0\n    for i in range(k):\n        circle_height = count_circle(a_list[i], a_list[i+1])\n        max_circle = max(circle_height, max_circle)\n    \n    print(max_circle)"
    },
    {
        "number": 4322,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    res = []\n    for _ in range(n):\n        a, b = map(int, input().split())\n        res.append(b - a)\n    return str(max(res))\n"
    },
    {
        "number": 4322,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    \n    \n    li = [list(map(int, input().split())) for _ in range(n)]\n    \n    sum_ = 0\n    \n    for l in li:\n        sum_ += max(l)\n        \n    print(k - sum_ - sum(k, l) - sum(k, l - 1))\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 4322,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    a_list = []\n    for i in range(n):\n        a_list.append(int(a))\n    a_list = list(set(a_list))\n    a_list.sort()\n    for i in range(n):\n        a_list[i] = abs(a_list[i])\n    a_list.sort(reverse=True)\n    answer = 0\n    for i in range(n):\n        answer = answer + a_list[i]\n    return str(answer)\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4322,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    list = []\n    for i in range(n):\n        list.append(int(stdin))\n    list.sort()\n    count = 0\n    res = 0\n    for i in range(1, n):\n        diff = abs(list[i]-list[i-1])\n        if diff == 1:\n            count += 1\n        elif diff < 1:\n            count += 1\n        else:\n            count = 0\n    if count!= n-1:\n        res = count + 1\n    return str(res)\n\ndef"
    },
    {
        "number": 4322,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    a.insert(0, 0)\n    answer = 0\n    for i in range(n-k):\n        if a[i] - a[i+1] <= 1:\n            answer += 1\n        else:\n            answer += 1\n            a[i+1] -= 1\n            a[i] += 1\n    return str(answer)"
    },
    {
        "number": 4322,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    num_people = list(map(int, input().split()))\n\n    result = 0\n\n    for i in range(n):\n        p = 0\n        for j in range(i+1, n):\n            if num_people[i] < num_people[j]:\n                p += 1\n        result = max(result, p)\n\n    return str(result)\n"
    },
    {
        "number": 4322,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin)\n    k = 1\n    res_k = max(a)\n    while res_k!= k:\n        res_k = sum(a) // k\n        k += 1\n    answer = k - 1\n    return str(answer)"
    },
    {
        "number": 4322,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a_list = []\n    for i in range(1, n+1):\n        a_list.append(i)\n    a_list.sort()\n    answer = 0\n    for i in range(1, n):\n        answer += abs(a_list[i]-a_list[i-1])\n    return str(answer)"
    },
    {
        "number": 4323,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, m = stdin.split()\n    a = int(s)\n    b = int(m)\n\n    if a > b:\n        return \"-\"\n    \n    return int(s)\n"
    },
    {
        "number": 4323,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n > m:\n        return \"-1\"\n    a_i = m\n    b_i = n\n    max_size = m\n    for a in range(1, n + 1):\n        for b in range(a + 1, n + 1):\n            if a_i > b_i:\n                break\n            a_i += a\n            b_i += b\n            if a_i > max_size:\n                max_size = a_i\n    return str(max_size)\n\n\ndef"
    },
    {
        "number": 4323,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    answer = [0] * n\n    m = max(b)\n    for i in range(n):\n        for j in range(n):\n            if a[i] + a[j] > m:\n                answer[i] = m\n            else:\n                answer[i] = m - a[j]\n    print(answer)\n    return''.join(map(str, answer))\n\nsolution(input())\n"
    },
    {
        "number": 4323,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    total = 0\n    for i in range(1, n+1):\n        a = list(map(int, stdin.split()))\n        total += sum(a[:i])\n    if total < m:\n        return \"-1\"\n    return total//m\n"
    },
    {
        "number": 4323,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = map(int, stdin.split())\n    b = map(int, stdin.split())\n    answer = []\n    sum_ = 0\n    for a_i in a:\n        sum_ += a_i\n        if sum_ <= m:\n            answer.append(int(sum_))\n            sum_ = 0\n        else:\n            answer.append(int(sum_) - m)\n    answer.append(sum_)\n    sum_ = 0\n    for b_i in b:\n        sum_ += b_i\n        if sum_ <= m:\n            answer.append(int(sum_))\n            sum_ = 0\n        else:\n            answer.append(int(sum_) - m)\n    answer.append(sum_)\n    return '\\n'.join(map(str, sorted(answer)))"
    },
    {
        "number": 4323,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(i) for i in stdin.split()]\n    answer = -1\n    n_songs = n\n    m_songs = m\n\n    for _ in range(n):\n        a, b = [int(i) for i in input().split()]\n        n_songs -= 1\n        m_songs -= 1\n        if n_songs < 0 or m_songs < 0:\n            break\n        if n_songs == 0 and m_songs == 0:\n            answer = min(answer, a + b)\n        elif a < b:\n            answer = min(answer, a + b)\n        elif a == b:\n            if n_songs < 0:\n                answer = min(answer, a + b)\n            else:\n                answer = min(answer, a + b)\n                n_songs += 1\n                m_songs += 1\n\n    if answer < 0:\n        return \"-1\"\n    return answer\n\n-----Constraints-----\n1 <= stdin.length <= 2 * 10^5\n1 <= n <= 10^5\n1 <= m <= 10^9\n\ntime limit 20 seconds (py3)\nmemory limit 32 MB (py3)\n\ntips:\n1. If it is impossible to compress a subset of the songs, print \"-1\" (otherwise, the minimum number of songs needed to be compressed would be equal to $n$).\n2. The minimum number of songs needed to be compressed depends on the number of songs in the flash drive (since it is a power of two) and the first $i$-th song after compression.\n3. An example of how it would be impractical to copy all the songs to the flash drive is to copy all the songs from $i$-th song to $i$-th song after compression.\n\nSubmissions\nBasic Java solutions are provided for you.\n\nAbove is the input and output of the program.\nYou do not need to read input or print anything.\n\nIf you want to help you debug your code, just uncomment the code below and press Shift+F10 to execute it.\n\n\n'''"
    },
    {
        "number": 4323,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    res = -1\n    for _ in range(n):\n        a, b = map(int, stdin.split())\n        if m - b >= a:\n            res = max(res, a + b)\n    return str(res)"
    },
    {
        "number": 4323,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    l = list(map(int, stdin.split()))\n    if sum(l) > m:\n        return \"-1\"\n    return sum(l) // m\n    \ndef"
    },
    {
        "number": 4323,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = map(int, stdin.split())\n    a.sort()\n    if sum(a) < m:\n        return \"-1\"\n    if len(a) == m:\n        return str(m)\n    if a[m - 1] < a[m - 2]:\n        return str(m - 1)\n    answer = m - a[m - 1]\n    for i in range(m, n):\n        new_a = [a[i]] + [a[i]] + [a[i]] + [a[i]]\n        if sum(new_a) == m:\n            answer = min(answer, sum(new_a))\n    return str(answer)\n"
    },
    {
        "number": 4323,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    songs = [int(stdin.split()[0])]\n    while m:\n        a, b = map(int, stdin.split())\n        songs.append(a + b)\n        m = m - 1\n    songs.sort(reverse=True)\n    answer = sum(songs)\n    for i in range(n - 1):\n        if songs[i] + songs[i + 1] <= answer:\n            answer = songs[i + 1]\n    if answer <= m:\n        return str(answer)\n    else:\n        return \"-1\"\n\nprint(solution(\"4 21\"))\n"
    },
    {
        "number": 4324,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    st, b, a = map(int, stdin.split())\n    s = \"\"\n    for i in range(st):\n        if i % 2!= 0:\n            s += stdin[i]\n        else:\n            a -= 1\n            if a == 0:\n                s += stdin[i + 1]\n            elif a!= 0:\n                s += stdin[i]\n                a -= 1\n    return s\n\nfor i in range(int(input())):\n    print(solution(input()))\n"
    },
    {
        "number": 4324,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin.split()\n    #print(string)\n    l = len(string)\n    #print(l)\n    if l == 1:\n        return string[0]\n    if l % 3 == 0:\n        answer = \"\".join(string[l//3])\n        return answer\n    answer = \"\".join(string[l//3+1])\n    return answer\n\n-----Time Complexity-----\n\nTime complexity: O(n)\nSpace Complexity: O(n)\n\n\n-----Logic-----\n\nSpace Complexity: O(n)\nTime Complexity: O(n)\n"
    },
    {
        "number": 4324,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    s = stdin.split()\n    n = len(s)\n    a = min(n, a)\n    b = max(n, b)\n    c = [0] * n\n    for i in range(n):\n        c[i] = s[i] == s[i + b - 1]\n    i = 0\n    while a > 0:\n        if a <= n and c[i] and b > 0 and b < n:\n            c[i] = True\n            a -= 1\n        i += 1\n    print(''.join([''.join(c).replace('leelt', 'qwerty') for c in c]) if a > 0 else ''.join([''.join(c).replace('leelt', 'qwerty') for c in c]))\n    return ''.join([''.join(c).replace('leelt', 'qwerty') for c in c]) if a > 0 else ''.join([''.join(c).replace('leelt', 'qwerty') for c in c])"
    },
    {
        "number": 4324,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = [int(i) for i in stdin.strip().split()]\n    s = stdin.strip()\n    if n > a*b:\n        print(''.join(sorted(s[:a*b])+sorted(s[(a*b):])))\n    else:\n        print(''.join(sorted(s[:a*b])+sorted(s[a*b:], reverse=True)))\n\n\n\n-----Constraints-----\n\n0 <= n <= 2000\n1 <= a <= n\n1 <= b <= n\ns[i] is a lowercase Latin letter.\n\n\n-----My Submission-----"
    },
    {
        "number": 4324,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return solution2(stdin)\ndef"
    },
    {
        "number": 4324,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s=stdin.split(\" \")\n    if not s:\n        return \"\"\n    if len(s)==1:\n        return s[0]\n    answer=''\n    for i in range(len(s)-1):\n        if len(set(s[i+1:i+2]))==len(set(s[i])):\n            answer+=s[i]+\" \"\n    return answer\n\n-----Constraints-----\n0\n1\n1\n2\n\n'''\nimport re\ndef"
    },
    {
        "number": 4324,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = list(map(int, stdin.split()))\n    s = list(map(str, range(n)))\n    t = 0\n    while t < n:\n        if n - t < a:\n            if b > n - t:\n                s[t:n] = [''.join(s[t:n])[:a - b]]\n            else:\n                s[t:n] = [''.join(s[t:n])[:a]]\n            t += 1\n        else:\n            s[t] = ''.join(s[t:n])\n            t += 1\n    return ''.join(s)\n\n\"\"\"\nclass Solution:\n    def solve(self, n, a, b):\n        answer = \"\"\n        num = []\n        for i in range(n):\n            num.append(i)\n        \n        while len(num) > 0:\n            answer += ''.join(num[:a]) + \" \"\n            if b > len(answer):\n                answer += ''.join(num[:b]) + \" \"\n                num = num[b:]\n            else:\n                answer += ''.join(num) + \" \"\n                num = num[:b + a] + num[b + a:]\n            num = []\n        return answer\n\n\ns = Solution()\nprint(s.solve(int(input()), int(input()), int(input())))\n"
    },
    {
        "number": 4324,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    for line in stdin:\n        n,a,b=line.split()\n        n=int(n)\n        a=int(a)\n        b=int(b)\n        s=list(stdin.split())\n        if len(s)>a and len(s)>b:\n            a_,b_=s[a-1:a+b-1].count('a'),s[a-1:a+b-1].count('b')\n            s[a-1:a+b-1]=[s[a-1:a+b-1][i] for i in range(a, a+b)]\n            s[a-1:a+b-1]=[s[a-1:a+b-1][i] for i in range(a, a+b)]\n            s=[s[i] for i in range(len(s)) if len(s[i])>a_ and len(s[i])>b_]\n            print(''.join(s))\n        else:\n            print(f'No solution')\n"
    },
    {
        "number": 4324,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    b = list(map(int, stdin.strip().split()))\n    return ''.join(sorted(set(map(lambda x: str(x), b)) - set(map(lambda x: str(x), a))))\n\nprint(solution('4 7 3'))\nprint(solution('4 7 3 2'))"
    },
    {
        "number": 4324,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = list(map(int, stdin.split()))\n    if (a > n or b > n):\n        return '?'\n    s = list(map(lambda x: ''.join(map(str, range(x, n + 1))), range(1, n + 1)))\n    #print(s)\n    for i in range(len(s)):\n        #print(s[i])\n        if (len(set(s[i])) == a and len(set(s[i + 1])) == b):\n            #print(s[i] + s[i + 1])\n            return s[i] + s[i + 1]\n\n------Time complexity----\n\nTime complexity: O(n^3)\nSpace Complexity: O(n)\n\n---Complexity---\n\nTime complexity: O(n^2)\nSpace Complexity: O(n^2)\n\n\n-----Constraints-----\n\n1 <= t <= 2000\n1 <= n <= n^2\n1 <= a <= b <= n^2\n\n------Divide & Conquer-----\n\nTime: O(n^2)\nSpace: O(n^2)\n\n-----Approach-----\n\nThe idea is to maintain a dictionary of valid letters and the number of valid substrings. Now, we need to find all the valid substrings of length $a$, $b$.\n\nSince we have a letter $a$, and number of distinct letters $b$ is $n$, we can construct a valid string s_{a+1} which contains all the valid substrings of length $a$ and $b$ such that:\n\ns_{a+1} = s_{a} + s_{a+1}\n\ns_{a} = s_{a+1} + s_a\n\nThe final string is a valid string of length $a$ iff:\n\ns_{a+1} = s_{a} + s_{a+1}\n\ns_{a} = s_{a+1} + s_a\n\nWe have a solution if:\n\ns_{a} = s_{a} + s_a\n\ns_{a+1} = s_{a+1} + s_{a+1}\n\ns_{a+1} = s_{a+1} + s_a + s_{a+1}\n\n\n------Worst case------\n\nThe input is only $n$ digits, therefore, we need to construct a valid string s_{a+1} so that the length of the string is $a$ and the number of valid substrings is $b$.\n\nThis is a tricky case. The number of distinct letters is less than $n$, therefore, the best substring to have all distinct letters is not a valid substring of length $a$ and $b$. The best substring has $a$ distinct letters and $b$ distinct letters, thus, we need to construct a valid string s_{a+1} which contains all the valid substrings of length $a$ and $b$.\n\nWe can construct a valid string s_{a+1} by constructing $n^3$ valid substrings of length $a$ and $b$ and then, finally, we need to construct $a$ distinct letters and $b$ distinct letters to generate the final valid string.\n\n\n------Time complexity----\n\nTime complexity: O(n^3)\nSpace Complexity: O(n^2)\n\n---Complexity---\n\nTime complexity: O(n^2)\nSpace Complexity: O(n)\n\n-----Approach-----\n\nwe need to construct a valid string s_{a+1} which contains all the valid substrings of length $a$ and $b$ so that:\n\ns_{a+1} = s_{a} + s_{a+1}\n\ns_{a} = s_{a+1} + s_a\n\ns_{a+1} = s_{a+1} + s_a + s_{a+1}\n\ns_{a+1} = s_{a+1} + s_a + s_{a+1} + s_{a+1}\n\ns_{a+1} = s_{a+1} + s_a + s_{a+1} + s_{a+1}\n\ns_{a+1} = s_{a+1} + s_a + s_{a+1} + s_{a+1} + s_{a+1}\n\ns_{a+1} = s_{a+1} + s_a + s_{a+1} + s_{a+1} + s_{a+1}\n\ns_{a+1} = s_{a+1} + s_a + s_{a+1} + s_{a+1} + s_{a+1}\n\ns_{a+1} = s_{a+1} + s_a + s_{a+1} + s_{a+1} + s_{a+1}\n\ns_{a+1} = s_{a+1} + s_a + s_{a+1} + s_{a+1} + s_{a+1} + s_{a+1}\n\ns_{a+1} = s_{a+1} + s_a + s_{a+1} + s_{a+1} + s_{a+1}\n\ns_{a+1} = s_{a+1} + s_a + s_{a+1} + s_{a+1} + s_{a+1}\n\ns_{a+1} = s_{a+1} + s_a + s_{a+1} + s_{a+1} + s_{a+1}\n\ns_{a+1} = s_{a+1} + s_a + s_{a+1} + s_{a+1} + s_{a+1}\n\ns_{a+1} = s_{a+1} + s_a + s_{a+1} + s_{a+1}\n\ns_{a+1} = s_{a+1} + s_a + s_{a+1}\n\ns_{a+1} = s_{a+1} + s_a + s_{a+1}\n\ns_{a+1} = s_{a+1} + s_a + s_{a+1}\n\ns_{a+1} = s_{a+1} + s_a\n\ns_{a+1} = s_{a+1} + s_a + s_{a+1}\n\ns_{a+1} = s_{a+1} + s_a + s_{a+1}\n\ns_{a+1} = s_{a+1} +"
    },
    {
        "number": 4325,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, T = map(int, stdin.split())\n    answer = 0\n    for i in range(N):\n        takoyaki = list(map(int, stdin.split()))\n        start = time.time()\n        if takoyaki[i] >= T:\n            takoyaki[i] = T\n            answer += takoyaki[i] - (T - takoyaki[i])\n        else:\n            answer += T\n            takoyaki[i] = takoyaki[i]\n            \n        end = time.time()\n        print(answer)\n        print(takoyaki[i])\n        print(end-start)\n        \n    return str(answer)"
    },
    {
        "number": 4325,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N,T = map(int,stdin.split())\n    sum_takoyaki = [int(i) for i in stdin.split()[1:]]\n    Takoyaki = [int(i) for i in stdin.split()[0]]\n    takoyaki_list = []\n    for i in range(0,T):\n        takoyaki = []\n        for j in range(0,N):\n            takoyaki.append(sum_takoyaki[j]*Takoyaki[j])\n        takoyaki_list.append(takoyaki)\n    sum_takoyaki = [sum(i) for i in takoyaki_list]\n    max_value = max(sum_takoyaki)\n    sum_takoyaki.insert(0,0)\n    for i in takoyaki_list:\n        i.insert(0,0)\n    for i in takoyaki_list:\n        sum_takoyaki.append(sum(i))\n        max_value = max(sum_takoyaki)\n    return str(max_value)"
    },
    {
        "number": 4325,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, t = [int(x) for x in stdin.split()]\n    if t > n:\n        return '0'\n    else:\n        return str(n - t)"
    },
    {
        "number": 4325,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, T = map(int, stdin.split())\n    minutes = T * 60\n    counter = 0\n    while N > 0:\n        N -= 1\n        counter += 1\n        if minutes < counter:\n            minutes += counter\n            minutes %= counter\n            counter = 0\n    print(minutes)\n    return str(minutes)\n"
    },
    {
        "number": 4325,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n  n,t = [int(i) for i in stdin.split()]\n  if t == 0:\n    return str(n)\n  if t < 9:\n    return str(t)\n  return str(n+1)\n"
    },
    {
        "number": 4325,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    takoyaki = []\n    \n    for i in stdin:\n        if i =='':\n            takoyaki.append(0)\n        else:\n            takoyaki.append(int(i) - 1)\n    \n    def func(i):\n        if i > len(takoyaki)-1:\n            return -1\n        if i == len(takoyaki)-1:\n            return int(takoyaki[i])\n        return func(takoyaki[i] + 1)\n    \n    def func2(i):\n        if i > len(takoyaki)-1:\n            return -1\n        if i == len(takoyaki)-1:\n            return int(takoyaki[i])\n        return func2(takoyaki[i] + 1)\n    \n    result = -1\n    \n    for i in range(1, len(takoyaki)):\n        result = max(result, func(i) + func2(i))\n    \n    return str(result)"
    },
    {
        "number": 4325,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, T = map(int, stdin.split())\n    minutes = int(T / T * 60)\n    print(minutes)\n    return str(minutes)"
    },
    {
        "number": 4325,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, T, k = map(int, stdin.split())\n    x = T//k\n    print(x)\n    if x < N:\n        N = x\n        print(N)\n    return str(N)\n\n\nprint(solution(\n  input()\n))\n"
    },
    {
        "number": 4325,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    global N, T\n    N, T = map(int, stdin.split())\n    \n    return f'{N//T*60+T%60:.2f}'"
    },
    {
        "number": 4325,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, T = map(int, stdin.split())\n    T = T % 60\n    return '{:.0f}'.format(T//60)\n\n\"\"\"\n\nimport math\n\ndef"
    },
    {
        "number": 4326,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def n_groups(k):\n        return int(math.floor(math.sqrt(len(stdin))))\n    x = int(input())\n    for i in range(len(stdin)//x+1):\n        if len(stdin[i*x:i*x+x])<=x:\n            continue\n        a,b = 0,0\n        for j in range(x):\n            if stdin[i*x+j] in stdin[i*x:i*x+x-j]:\n                a+=1\n            else:\n                b+=1\n        print(x-a-b)\n    return \"Not possible\"\n\n\ndef"
    },
    {
        "number": 4326,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n < 1 or n > 10 ** 18:\n        return '1'\n    groups = [int(i) for i in stdin.strip().split(' ')]\n    max_len = len(set(groups))\n    if len(groups) < max_len:\n        return '1'\n    return str(len(groups))\n\nApproach 1:\nTime complexity: O(n)\nSpace complexity: O(n)\n\nApproach 2:\nTime complexity: O(n/k)\nSpace complexity: O(k)\n\nApproach 3:\nTime complexity: O(k * n/k)\nSpace complexity: O(n)\n\nApproach 4:\nTime complexity: O(n/k)\nSpace complexity: O(k)\n\nApproach 5:\nTime complexity: O(n/k)\nSpace complexity: O(n)\n\nApproach 6:\nTime complexity: O(k * n/k)\nSpace complexity: O(k)\n\nApproach 7:\nTime complexity: O(k)\nSpace complexity: O(1)\n\nApproach 8:\nTime complexity: O(k)\nSpace complexity: O(k)\n\nApproach 9:\nTime complexity: O(1)\nSpace complexity: O(1)\n\nApproach 10:\nTime complexity: O(1)\nSpace complexity: O(1)\n\"\"\"\n\ndef"
    },
    {
        "number": 4326,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 3:\n        return n\n    total = 0\n    groups = [0] * n\n    for i in range(n):\n        groups[i] = int(stdin[i])\n    for i in range(n):\n        for j in range(i + 1, n):\n            if groups[i] == groups[j]:\n                total += 1\n    return total if total < 3 else 3\n"
    },
    {
        "number": 4326,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n  n = int(stdin.strip())\n  if n <= 2:\n    return n\n  \n  less = 0\n  more = 0\n  for i in range(n):\n    cnt = 0\n    t = stdin.split()\n    for j in range(1, len(t)):\n      cnt += 1 if len(set(t[j].split(','))) < 3 else 0\n      if cnt >= 3:\n        more += 1\n      else:\n        less += 1\n  if less >= more:\n    return less\n  else:\n    return more\n\nNote:\nThe number of students is in the range [1, 1000].\nThe input string will only consist of '(' and ')' characters.\n\"\"\"\n\nclass Solution:\n    def numGroups_withoutExtra(self, n: int) -> int:\n        \"\"\"\n        dp[i][j]: i\ubc88\uc9f8 \uac15\uc758\uc758 j\ubc88\uc9f8 \uac15\uc758\uc758 \uae30\uc0ac\ub4e4\uc758 \uac2f\uc218\n        dp[i][j] = dp[i-1][j-1] + dp[i-1][j]\n        \"\"\"\n        # dp[i][j] = 1\uc5d0\uc11c \ucd5c\ub300 \uc0ac\ub78c\uc758 \ubc88\ud638\uac00 \uc774\ubbf8 \ub4e4\uc5b4\uc640\uc57c\ud568\n        # \uadf8\ub7ec\ubbc0\ub85c \uc544\ub798\uc758 \ubcc0\uc218\ub97c \ub2e4\uc2dc \uc800\uc7a5\ud560\ub54c \ub4e4\uc5b4\uc634\n\n        dp = [[0 for _ in range(3)] for _ in range(n+1)]\n        for i in range(n+1):\n            dp[i][0] = 1\n        for j in range(2, n+1):\n            for i in range(1, j):\n                dp[i][1] = dp[i-1][1] + dp[i-1][0]\n                dp[i][2] = dp[i-1][2] + dp[i-1][1]\n        return dp[-1][2]\n\n    def numGroups(self, n: int) -> int:\n        if n <= 2:\n            return n\n        dp = [[0 for _ in range(3)] for _ in range(n+1)]\n        dp[1][1] = 1\n        for i in range(2, n+1):\n            dp[i][1] = 1\n            for j in range(2, i):\n                dp[i][2] = dp[i-1][2] + dp[i-1][1]\n        return dp[-1][2]\n"
    },
    {
        "number": 4326,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n  \n  \n  if int(stdin) < 3:\n    return 3\n  if int(stdin) > 3:\n    return 3\n  return int(stdin/2)\n\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n"
    },
    {
        "number": 4326,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n  N, x = map(int, stdin.split())\n  groups = []\n  \n  for _ in range(N):\n    groups.append(list(map(int, stdin.split())))\n  \n  for i in range(N):\n    count = 0\n    for j in range(N):\n      for k in range(N):\n        if groups[j][k]!= groups[i][k] + 1:\n          count += 1\n    if count >= x:\n      return str(count)\n  \n  return '0'"
    },
    {
        "number": 4326,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # TODO: Fill in the logic here\n    return '3'\n\n-------------------\n\nYou will be given a list of N strings and a string S. You need to divide S into groups such that each group contains at least two students and each group contains at least one student in each group.\nA group is a pair of students if it can be divided into more than one group.\nInput Format\n\nThe first line contains the number of test cases.\nThe next  lines contains the string S.\nOutput Format\n\nFor each test case, print the number of groups in which the two students can be divided.\n\nSample Input\n\n3\nABCD\nAB\nBCD\nADE\nGHE\nFGH\n\nSample Output\n\n2\nExplanation\n\nGHE can be divided into two groups as shown.\n\"\"\"\nimport sys\n\nn=int(sys.stdin.readline())\nk=list(map(int,sys.stdin.readline().split()))\nc=0\nfor i in k:\n    if i%2==0:\n        c=c+1\nprint(c)"
    },
    {
        "number": 4326,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    groups = []\n    for i in range(N):\n        groups.append(int(stdin.split()[i+1]))\n    return str(max(groups))"
    },
    {
        "number": 4326,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if k > n/3:\n        print(k)\n    else:\n        if k < n/3:\n            print(n-k)\n        else:\n            print(n-k-1)\n        \n"
    },
    {
        "number": 4326,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N % 3!= 0:\n        return \"0\"\n    if N % 3 == 0:\n        return \"2\"\n    if N % 3 == 1:\n        return \"3\"\n    if N % 3 == 2:\n        return \"4\"\n    if N % 3 == 3:\n        return \"5\"\n    if N % 3 == 4:\n        return \"6\"\n    if N % 3 == 5:\n        return \"7\"\n    if N % 3 == 6:\n        return \"8\"\n    if N % 3 == 7:\n        return \"9\"\n    if N % 3 == 8:\n        return \"10\"\n    if N % 3 == 9:\n        return \"11\"\n    if N % 3 == 10:\n        return \"12\"\n    if N % 3 == 11:\n        return \"13\"\n    if N % 3 == 12:\n        return \"14\"\n    if N % 3 == 13:\n        return \"15\"\n    if N % 3 == 14:\n        return \"16\"\n    if N % 3 == 15:\n        return \"17\"\n    if N % 3 == 16:\n        return \"18\"\n    if N % 3 == 17:\n        return \"19\"\n    if N % 3 == 18:\n        return \"20\"\n    if N % 3 == 19:\n        return \"21\"\n    if N % 3 == 20:\n        return \"22\"\n    if N % 3 == 21:\n        return \"23\"\n    if N % 3 == 22:\n        return \"24\"\n    if N % 3 == 23:\n        return \"25\"\n    if N % 3 == 24:\n        return \"26\"\n    if N % 3 == 25:\n        return \"27\"\n    if N % 3 == 26:\n        return \"28\"\n    if N % 3 == 27:\n        return \"29\"\n    if N % 3 == 28:\n        return \"30\"\n    if N % 3 == 29:\n        return \"31\"\n    if N % 3 == 30:\n        return \"32\"\n    if N % 3 == 31:\n        return \"33\"\n    if N % 3 == 32:\n        return \"34\"\n    if N % 3 == 33:\n        return \"35\"\n    if N % 3 == 34:\n        return \"36\"\n    if N % 3 == 35:\n        return \"37\"\n    if N % 3 == 36:\n        return \"38\"\n    if N % 3 == 37:\n        return \"39\"\n    if N % 3 == 38:\n        return \"40\"\n    if N % 3 == 39:\n        return \"41\"\n    if N % 3 == 40:\n        return \"42\"\n    if N % 3 == 41:\n        return \"43\"\n    if N % 3 == 42:\n        return \"44\"\n    if N % 3 == 43:\n        return \"45\"\n    if N % 3 == 44:\n        return \"46\"\n    if N % 3 == 45:\n        return \"47\"\n    if N % 3 == 46:\n        return \"48\"\n    if N % 3 == 47:\n        return \"49\"\n    if N % 3 == 48:\n        return \"50\"\n    if N % 3 == 49:\n        return \"51\"\n    if N % 3 == 50:\n        return \"52\"\n    if N % 3 == 51:\n        return \"53\"\n    if N % 3 == 52:\n        return \"54\"\n    if N % 3 == 53:\n        return \"55\"\n    if N % 3 == 54:\n        return \"56\"\n    if N % 3 == 55:\n        return \"57\"\n    if N % 3 == 56:\n        return \"58\"\n    if N % 3 == 57:\n        return \"59\"\n    if N % 3 == 58:\n        return \"60\"\n    if N % 3 == 59:\n        return \"61\"\n    if N % 3 == 60:\n        return \"62\"\n    if N % 3 == 61:\n        return \"63\"\n    if N % 3 == 62:\n        return \"64\"\n    if N % 3 == 63:\n        return \"65\"\n    if N % 3 == 64:\n        return \"66\"\n    if N % 3 == 65:\n        return \"67\"\n    if N % 3 == 66:\n        return \"68\"\n    if N % 3 == 67:\n        return \"69\"\n    if N % 3 == 68:\n        return \"70\"\n    if N % 3 == 69:\n        return \"71\"\n    if N % 3 == 70:\n        return \"72\"\n    if N % 3 == 71:\n        return \"73\"\n    if N % 3 == 72:\n        return \"74\"\n    if N % 3 == 73:\n        return \"75\"\n    if N % 3 == 74:\n        return \"76\"\n    if N % 3 == 75:\n        return \"77\"\n    if N % 3 == 76:\n        return \"78\"\n    if N % 3 == 77:\n        return \"79\"\n    if N % 3 == 78:\n        return \"80\"\n    if N % 3 == 79:\n        return \"81\"\n    if N % 3 == 80:\n        return \"82\"\n    if N % 3 == 81:\n        return \"83\"\n    if N % 3 == 82:\n        return \"84\"\n    if N % 3 == 83:\n        return \"85\"\n    if N % 3 == 84:\n        return \"86\"\n    if N % 3 == 85:\n        return \"87\"\n    if N % 3 == 86:\n        return \"88\"\n    if N % 3 == 87:\n        return \"89\"\n    if N % 3 == 88:\n        return \"90\"\n    if N % 3 == 89:\n        return \"91\"\n    if N % 3 == 90:\n        return \"92\"\n    if N % 3 == 91:\n        return \"93\"\n    if N % 3 == 92:\n        return \"94\"\n    if N % 3 == 93:\n        return \"95\"\n    if N % 3 == 94:\n        return \"96\"\n    if N % 3 == 95:\n        return \"97\"\n    if N % 3 == 96:\n        return \"98\"\n    if N % 3 == 97:\n        return \"99\"\n    if N % 3 == 98:\n        return \"100\"\n    if N % 3 == 99:\n        return \"101\"\n    if N % 3 == 100:\n        return \"102\"\n    if N % 3 == 101:\n        return \"103\"\n    if N % 3 == 102:\n        return \"104\"\n    if N % 3 == 103:\n        return \"105\"\n    if N % 3 == 104:\n        return \"106\"\n    if N % 3 == 105:\n        return \"107\"\n    if N % 3 == 106:\n        return \"108\"\n    if N % 3 == 107:\n        return \"109\"\n    if N % 3 == 108:\n        return \"110\"\n    if N % 3 == 109:\n        return \"111\"\n    if N % 3 == 110:\n        return \"112\"\n    if N % 3 == 111:\n        return \"113\"\n    if N % 3 == 112:\n        return \"114\"\n    if N % 3 == 113:\n        return \"115\"\n    if N % 3 == 114:\n        return \"116\"\n    if N % 3 == 115:\n        return \"117\"\n    if N % 3 == 116:\n        return \"118\"\n    if N % 3 == 117:\n        return \"119\"\n    if N % 3 == 118:\n        return \"120\"\n    if N % 3 == 119:\n        return \"121\"\n    if N % 3 == 120:\n        return \"122\"\n    if N % 3 == 121:\n"
    },
    {
        "number": 4327,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A = int(stdin.split()[1])\n    P = int(stdin.split()[2])\n    for i in range(1,A+1):\n        for j in range(1,P+1):\n            if j<3:\n                print(i)\n                return str(i)\n            if j==3:\n                print(i)\n                return str(i)\n            if j==4:\n                print(i)\n                return str(i)\n            if j==5:\n                print(i)\n                return str(i)\n            if j==6:\n                print(i)\n                return str(i)\n            if j==7:\n                print(i)\n                return str(i)\n"
    },
    {
        "number": 4327,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    apple_pies = []\n    for line in stdin.split(\"\\n\"):\n        if line:\n            apple_pies.append(int(line))\n        \n    sum_of_pies = sum(apple_pies)\n    sum_of_pieces = sum(apple_pies)\n    \n    if sum_of_pies < sum_of_pieces:\n        return str(sum_of_pieces)\n    \n    if sum_of_pies == sum_of_pieces:\n        return str(sum_of_pieces)\n    \n    if sum_of_pieces == sum_of_pies:\n        for i in range(2, sum_of_pies + 1):\n            sum_of_pieces += i\n        return str(sum_of_pieces)\n    else:\n        return str(sum_of_pieces)"
    },
    {
        "number": 4327,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, P = stdin\n    result = 1\n    P = P.split()\n    for i in range(len(P)):\n        for j in range(i+1, len(P)):\n            result = max(result, int(P[i]+P[j]))\n    return str(result)\n\"\"\"\nclass Solution:\n    def maxPies(self, A: str) -> str:\n        \n        A = A.replace(' ', '')\n        # print(A)\n        # print(len(A))\n        \n        N = len(A)\n        \n        d = {}\n        \n        for i in A:\n            if i not in d:\n                d[i] = 1\n            else:\n                d[i] += 1\n                \n        \n        for i in d:\n            for j in d:\n                if i!= j:\n                    d[i] -= d[j]\n                    \n        \n        # print(d)\n        \n        \n        # for i in d:\n        #     for j in d:\n        #         if i!= j:\n        #             d[i] -= d[j]\n        # # print(d)\n        # print(d)\n        \n        \n        \n        for i in d:\n            if d[i] >= 1:\n                result = d[i] * N\n                if result > N:\n                    continue\n                else:\n                    for j in range(N):\n                        result -= j\n                    \n        return str(result)"
    },
    {
        "number": 4327,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A = stdin.strip()\n    A = int(A.split()[0])\n    P = stdin.strip()\n    P = int(P.split()[0])\n    n = P-A\n    return str(n)\n\n\"\"\"\nclass Solution:\n    def solution(self, A, P):\n        # \ubb38\uc81c\ub97c \ud574\uc57c\ud558\ub294 \uacbd\uc6b0\ub97c \ub098\ud0c0\ub0b8\ub2e4\n        return str(sum([int(i) for i in A if int(i) < P]))\n\n\n    def solution(self, A, P):\n        # \uc785\ub825\ub41c \ubb38\uc790\uc5f4\uc744 \ub2e4\uc2dc \uc785\ub825\ub41c \ubb38\uc790\uc5f4\ub85c \ubcc0\ud658\ud55c\ub2e4\n        A = str(A)\n        # \uc785\ub825\ub41c \ubb38\uc790\uc5f4\uc744 \ub2e4\uc2dc \ud29c\ud50c\ub85c \ubcc0\ud658\ud55c\ub2e4\n        A = tuple(A)\n\n        return str(sum([int(i) for i in A if int(i) >= P]))\n"
    },
    {
        "number": 4327,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def split(x):\n        return x.split(',')\n\n    def to_int(x):\n        return int(x)\n\n    def divide(x, y):\n        return x // y\n\n    def multi(x, y):\n        return x * y\n\n    def process(s):\n        cnt = 0\n        for i in s:\n            cnt += to_int(i)\n        return cnt\n\n    A, P = [], []\n    for i in split(stdin):\n        a, p = i.split(' ')\n        A.append(to_int(a))\n        P.append(to_int(p))\n    A = list(map(process, A))\n    P = list(map(process, P))\n    max_number = 0\n    for i in range(1, max(A)):\n        max_number = max(max_number, P[i] - P[i - 1])\n    print(max_number)"
    },
    {
        "number": 4327,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, P = map(int, stdin.split())\n    return str(max(0, (A // 3) + (P // 2) + (3 * (A % 3) - P % 3)))"
    },
    {
        "number": 4327,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin[0])\n    A = int(stdin[1])\n    P = int(stdin[2])\n    T = N * (A + P)\n    result = T // 3\n    return str(result)\n\nprint(solution(input()))"
    },
    {
        "number": 4327,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    apple, pieces = map(int, stdin.split())\n    if apple % pieces == 0:\n        return str(apple // pieces)\n    else:\n        return \"not a solution\"\n\nprint(solution(\"1 4\"))\n\n\"\"\"\nGiven a string s and an integer n, find the number of occurrences of a substring in s and return the count.\n\n\"\"\"\nimport collections\nimport re\nclass Solution:\n    def countApplesAndOranges(self, s: str, n: int) -> int:\n        count = 0\n        i = 0\n        while i < len(s):\n            if s[i:i+n] == s[i:i+n+1]:\n                count += 1\n            else:\n                break\n            i += 1\n        return count"
    },
    {
        "number": 4327,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, P = map(int, stdin.split())\n    if P < A:\n        P = A\n    A = P - A\n    \n    if P % 3 == 0:\n        return P + 3\n    else:\n        return P + 3 * (P % 3)\n\nprint(solution('1 1'))\n"
    },
    {
        "number": 4327,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    A, P = list(map(int, stdin.split(\" \")))\n    max_apple_pie = 0\n    for i in range(1,P+1):\n        if i%2 == 0:\n            max_apple_pie += i\n        else:\n            max_apple_pie += P\n\n    return str(max_apple_pie)\n    \n    # return str(max(i,j,k,...) for i,j,k in zip(A,P,range(P)))\n    \n    # return str(max(A[i-1]+P[i] for i in range(len(A)) if A[i-1] < A[i] < A[i-1]+P[i]))"
    },
    {
        "number": 4328,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A % B == 0:\n        return str(A + B)\n    else:\n        return str(B - A)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4328,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    nums = list(map(int, stdin.split()))\n    if all(i % 2 == 0 for i in nums):\n        return str(sum(nums))\n    else:\n        return str(nums[1] - nums[0])\n"
    },
    {
        "number": 4328,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A % B == 0:\n        print(A + B)\n    else:\n        print(B - A)\n"
    },
    {
        "number": 4328,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    print(A + B)\n    return str(B - A)"
    },
    {
        "number": 4328,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(len(stdin)):\n        divisor = int(stdin[i])\n        answer = divisor + divisor\n        if answer > 20:\n            answer -= divisor\n            print(answer)\n        elif answer == 20:\n            print(divisor)\n\n-----Tests-----\ntest_case = \"4 12\"\nprint(solution(test_case))\n\ntest_case = \"4 -4\"\nprint(solution(test_case))\n\ntest_case = \"5 -9\"\nprint(solution(test_case))\n"
    },
    {
        "number": 4328,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A = int(stdin.split()[-1])\n    B = int(stdin.split()[-2])\n    while A % B!= 0:\n        B -= 1\n    answer = str(A // B)\n    if B!= 0:\n        answer += str(B)\n    print(answer)\n    return answer\n"
    },
    {
        "number": 4328,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n % m == 0:\n        return str(n // m)\n    else:\n        return str(n % m) + \"--\" + str(n // m)\n\nprint(solution(input()))"
    },
    {
        "number": 4328,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    for i in a:\n        if n%i == 0:\n            return i-n\n    return n-sum(a)\n\n'''\n"
    },
    {
        "number": 4328,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B = list(map(int, stdin.split()))\n    if A == 1:\n        return str(B)\n    elif B == 1:\n        return str(A)\n    elif A % B == 0:\n        return str(B - A)\n    else:\n        return str(B - A) + \" - \" + str(A)\n\nprint(solution(\"4 12\"))\nprint(solution(\"12 4\"))\n"
    },
    {
        "number": 4328,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a % b:\n        print(b - a)\n    else:\n        print(a - b)\n\nsolution(input())\n"
    },
    {
        "number": 4329,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(str, stdin.split())\n    result = \"\"\n    if A[-1] == \"z\":\n        result += \"Yes\"\n    else:\n        result += \"No\"\n    if B[-1] == \"z\":\n        result += \"Yes\"\n    else:\n        result += \"No\"\n    return result"
    },
    {
        "number": 4329,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip().lower()\n    if len(s) <= 10:\n        return \"Yes\"\n    else:\n        return \"No\"\n\n'''\n\nclass Solution:\n    def hasValidID(self, S: str) -> bool:\n        if len(S) <= 10:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 4329,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip().split()\n    t = s[0]\n    s = s[1:]\n    if t.isnumeric() or t == 'z':\n        return \"Yes\"\n    elif t.isnumeric() and int(t) == int(t) + 1:\n        return \"Yes\"\n    else:\n        return \"No\"\n\n\n-----Sample Input-----\nsolution(\"chokudai\")\n"
    },
    {
        "number": 4329,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    answer = True\n    s = list(stdin)\n    s.reverse()\n    for i in range(len(s)):\n        if s[i] == 'z':\n            s[i] = 'a'\n    s = ''.join(s)\n    for i in range(len(s)):\n        if s[i] == 'a':\n            answer = False\n            break\n    if answer:\n        print('Yes')\n    else:\n        print('No')\n"
    },
    {
        "number": 4329,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes'"
    },
    {
        "number": 4329,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def solve(s: str):\n        string = s[:-1]\n        m = max(string)\n        if m == string[0]:\n            return solve(string[1:])\n        else:\n            return \"No\"\n    for i in range(1, len(s)):\n        string = s[:i] + s[i] + s[i + 1:]\n        if solve(string):\n            return \"Yes\"\n    return \"No\"\n\nn = int(input())\ns = [input() for i in range(n)]\n\nprint(solution(s))"
    },
    {
        "number": 4329,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split()\n    print(\"Yes\" if solution(S) else \"No\")\n"
    },
    {
        "number": 4329,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    if not stdin:\n        return 'Yes'\n    s = stdin.rstrip()\n    t = s + 'z'\n    return solution(t)\n"
    },
    {
        "number": 4329,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def chk(s):\n        for c in s:\n            if ord(c) - ord('a') == ord(c):\n                return False\n        return True\n    \n    s = stdin\n    z = s[0]\n    cnt = 1\n    while chk(z):\n        z = z + cnt\n        cnt += 1\n    return s[:cnt]\n\n\"\"\"\n\nclass Solution:\n    def solve(self, stdin, stdout):\n        # my answer\n        def solve(s):\n            if len(s) == 1:\n                stdout.write(s)\n            else:\n                s = s[1:] + s[0]\n                s = s.replace('z', 'a')\n                s = s.replace('.','')\n                \n                solutions = solve(s)\n                solutions.extend(solve(s))\n                for s in solutions:\n                    stdout.write(s)\n                solutions.clear()\n                \n                \n        solve(stdin)\n        return stdout.getvalue()\n"
    },
    {
        "number": 4329,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n  n = int(stdin.strip())\n  s = list(stdin)\n  flag = False\n  for i in range(1, n):\n    if(s[i]!= \"z\"):\n      flag = True\n      break\n    if(s[i-1]!= \"z\" and s[i] == \"z\"):\n      s[i] = \"z\"\n  if(flag):\n    print(\"Yes\")\n  else:\n    print(\"No\")\n"
    },
    {
        "number": 4330,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    if a > b:\n        a, b = b, a\n    if (a - b) % n == 0:\n        return str(a - b)\n    else:\n        return IMPOSSIBLE"
    },
    {
        "number": 4330,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    while True:\n        a, b = map(int, input().split())\n        if (a == b):\n            break\n        print(abs(b - a))"
    },
    {
        "number": 4330,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n  A, B = list(map(int, stdin.split()))\n  count = 0\n  count += A\n  count += B\n  count += A + B\n  if count > 10^9:\n    return 'IMPOSIBLE'\n  elif count == 0:\n    return '0'\n  else:\n    for i in range(0, 10):\n      for j in range(i, 10):\n        count += A + B\n        count += A * j\n        count += B * j\n        if count > 10^9:\n          return 'IMPOSIBLE'\n        elif count == 0:\n          return '0'\n        else:\n          count = 0\n\n-----Sample Output-----\nSample Input:\n2 16\n\nSample Output:\n7\n\n|2 - 9| = 7 and |16 - 9| = 7, so 9 satisfies the condition.\ndef"
    },
    {
        "number": 4330,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin)!= 2:\n        return IMPOSSIBLE\n    A, B = map(int, stdin)\n    if A == B:\n        return \"IMPOSSIBLE\"\n    if A - B == 1:\n        return \"IMPOSSIBLE\"\n    if A + B == 2:\n        return \"IMPOSSIBLE\"\n    if A + B == 4:\n        return \"IMPOSSIBLE\"\n    if A + B == 7:\n        return \"IMPOSSIBLE\"\n    if A + B == 10:\n        return \"IMPOSSIBLE\"\n    return \"IMPOSSIBLE\"\n\n\"\"\"\n\nimport sys\nimport copy\n\nsys.setrecursionlimit(10 ** 9)\n\ndef"
    },
    {
        "number": 4330,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B = list(map(int, stdin.split()))\n    min_val = B + 1\n    max_val = A - 1\n    while min_val <= max_val:\n        mid = (min_val + max_val) // 2\n        val = A - mid\n        if val < mid:\n            min_val = mid + 1\n        else:\n            max_val = mid - 1\n    return str(min_val)\n\"\"\"\n\n\nclass Solution:\n    def getPermutation(self, n: int, k: int) -> str:\n        self.permutations = []\n        self.permutation(0, n)\n        self.answer = ''\n\n        for p in self.permutations:\n            self.answer += str(p + 1)\n        self.answer = int(self.answer[1:]) * k\n        return self.answer\n\n    def permutation(self, start, end):\n        if start == end:\n            return [start]\n\n        res = []\n\n        for i in range(start, end):\n            temp = self.permutation(start, i) + self.permutation(i + 1, end)\n            self.permutations += temp\n            res.extend(temp)\n\n        return res\n\n\ndef"
    },
    {
        "number": 4330,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(' ')[0])\n    m = int(stdin.split(' ')[1])\n    a = list(map(int, stdin.split(' ')))\n    b = [int(x) for x in a]\n\n    for i in range(n):\n        a[i] -= b[i]\n        if a[i] < 0:\n            a[i] = (a[i] * -1)\n\n    print(min(a))\n\n    return 'IMPOSIVE' if a[0] == 0 else 'IMPOSIVE'\n\n-----Sample Input-----\n2 4\n\n2 2\n\n3 4\n\n3 2\n\n4 4\n\n5 6\n\n-----Sample Output-----\nIMPOSIVE\n\"\"\"\nimport math\n\n\ndef"
    },
    {
        "number": 4330,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a == b:\n        print(a)\n        return\n    if a + b > 10**9:\n        print(a)\n        return\n    for i in range(1, 10):\n        if a + i*b < 10**9:\n            if a + i*b == b:\n                print(i*a + b)\n            else:\n                print(a + i*b)\n            return\n    print(a)\n    return\n\n\n\n-----Sample Input-----\n3\n5 7\n\n-----Sample Output-----\n19\n\n------------------\n5 7\n2 3 2\n\n------------------\n3 2 4\n\n------------------\n10 4 9\n\n------------------\n10 9 7\n\n------------------\n100 6 9\n\n------------------\n100 6 7\n\n------------------\n\n------------------\n100 7 9\n\n------------------\n101 9 6\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7\n\n------------------\n101 9 7"
    },
    {
        "number": 4330,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    m = list(map(int, stdin.strip().split()))\n    if len(m) > 1:\n        print(min(m))\n        print(max(m))\n        return\n    a, b = sorted(m)\n    if a - b == 0:\n        print(b)\n        return\n    x = int(n * (b - a))\n    print(n)\n    print(m[x])\n    return\n\n-----Sample Output-----\n2 16\n5\n\n\"\"\"\nfrom itertools import product\nimport sys\n\ndef"
    },
    {
        "number": 4330,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[1])\n    A = []\n    B = []\n    for _ in range(2):\n        A.append(int(stdin.split()[0]))\n    for _ in range(n):\n        B.append(int(stdin.split()[0]))\n    print(solution(A) + \" \" + solution(B))\n"
    },
    {
        "number": 4330,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\" \")[0])\n    a = list(map(int, stdin.split(\" \")[1:]))\n\n    def binarySearch(arr: list, target: int) -> int:\n        first = 0\n        last = len(arr) - 1\n        while first <= last:\n            mid = (first + last) // 2\n            if arr[mid] == target:\n                return mid\n            elif arr[mid] < target:\n                first = mid + 1\n            elif arr[mid] > target:\n                last = mid - 1\n        return -1\n\n    for x in a:\n        k = binarySearch(a, x)\n        if k!= -1:\n            return k + 1\n    return IMPOSSIBLE\n\n\nprint(solution(\"2 16\\n5 6\\n8 8\\n10 10\"))\n"
    },
    {
        "number": 4331,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    digit_seven = stdin.split()\n    N = digit_seven[0]\n    \n    if N.isdigit():\n        N = int(N)\n        print(N)\n        if N % 7 == 0:\n            print('Yes')\n        else:\n            print('No')\n    else:\n        print('No')\n        \n        \n        \n    "
    },
    {
        "number": 4331,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    strs = stdin.split()\n    n = int(strs[0])\n    \n    if n > 9:\n        print('No')\n        return\n    \n    if n % 9 == 7:\n        print('Yes')\n        return\n    \n    print('No')\n    return\n\n-----Constraints-----\n - 100 \\leq N \\leq 999\n\n-----Input-----\nInput is given from STDIN. Print New Line.\n\n-----Output-----\nYes\n\n-----Constraints-----\n - N \\leq 1000\n\n-----Sample Input-----\n3\n\n-----Sample Output-----\nYes\n\nSample Input:\n5\n\nSample Output:\nNo\n\n\"\"\""
    },
    {
        "number": 4331,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    return 'Yes' if N % 7 == 0 else 'No'\n\n-----Brute Force-----\nRuntime: 72 ms, faster than 51.57% of Python3 online submissions for Is Number 7 in a Number.\nMemory Usage: 13.3 MB, less than 96.39% of Python3 online submissions for Is Number 7 in a Number.\n\"\"\"\nclass Solution:\n    def isNumber(self, s: str) -> str:\n        \n        digit_count = {'1': 0, '2': 0, '3': 0, '4': 0, '5': 0, '6': 0, '7': 0, '8': 0, '9': 0}\n        for c in s:\n            if c in digit_count:\n                digit_count[c] += 1\n        for c in digit_count.keys():\n            if digit_count[c] == 0:\n                return 'No'\n            elif digit_count[c] == 1:\n                return 'Yes'\n        return 'No'\n        \n        \n"
    },
    {
        "number": 4331,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    digit = '7'\n    if int(stdin[len(stdin)-1]) == 7:\n        return 'Yes'\n    else:\n        return 'No'\n    \n\ndef"
    },
    {
        "number": 4331,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    numbers = list(map(int, stdin.split()))\n    return 'Yes' if 7 in numbers else 'No'\n"
    },
    {
        "number": 4331,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4331,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N <= 9:\n        print(str(N) + \" contains 7 as its last digit.\")\n    else:\n        print(str(N) + \" does not contain 7.\")\n\"\"\"\nclass Solution:\n    def isNumber(self, s: str) -> bool:\n        if len(s) <= 3 or s[-1] not in [\"+\", \"-\", \".\"]:\n            return False\n        digs = {\n            \"+\": 1,\n            \"-\": 1,\n            \".\": 0\n        }\n        for c in s:\n            if c not in digs:\n                return False\n            digs[c] += 1\n        if digs[\".\"] == 1:\n            return True\n        else:\n            return False"
    },
    {
        "number": 4331,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    num = list(map(int,stdin.split()))\n    for i in range(len(num)):\n        if num[i] == 7:\n            return 'Yes'\n    return 'No'"
    },
    {
        "number": 4331,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(1, 100):\n        if i % 10 == 7:\n            return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4331,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N < 1000:\n        return 'Yes'\n    elif N < 100000:\n        return 'No'\n    else:\n        last_digit = N % 100\n        N = N // 100\n        if last_digit == 7:\n            return 'Yes'\n        else:\n            return 'No'\n"
    },
    {
        "number": 4332,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    print(S(n))\n    if S(n) % n == 0:\n        print('Yes')\n    else:\n        print('No')\n"
    },
    {
        "number": 4332,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if sum(map(int, list(stdin))) % int(sum(map(int, list(str(stdin)))) % 10) == 0 else \"No\"\n\ndef"
    },
    {
        "number": 4332,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(solution_use(int(stdin))).strip().lower()\n\ndef"
    },
    {
        "number": 4332,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    answer = True\n    for line in stdin:\n        n = int(line)\n        if n < 10 or n > 10**9:\n            answer = False\n            break\n    return answer\n\ndef"
    },
    {
        "number": 4332,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if sum(map(int, stdin.split())) % 10 == 0 else \"No\""
    },
    {
        "number": 4332,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    for _ in range(int(stdin)):\n        N = int(stdin)\n        if N % 2 == 1:\n            print(\"Yes\")\n            exit()\n        else:\n            print(\"No\")\n            exit()\n\n-----Sample Input-----\n3\n\n-----Sample Output-----\nNo\n\nIn this input, N=3.\nAs N=3, S(3) = 0, S(3) = 1, S(3) = 2.\ndef"
    },
    {
        "number": 4332,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    from itertools import combinations\n    \n    n = int(stdin)\n    if n < 10**9:\n        return \"Yes\"\n    \n    n_list = []\n    for num in str(n):\n        n_list.append(int(num))\n    \n    n_list.sort()\n    for i in combinations(n_list, 2):\n        num = str(i[0]) + str(i[1])\n        if num not in n_list:\n            continue\n        \n        n_list.remove(num)\n        break\n    else:\n        return \"No\"\n\nTime complexity: O(N^2)\nSpace Complexity: O(N^2)\n\n\"\"\"\nclass Solution:\n    def solution(self, N):\n        \n        import math\n        \n        if N == 0:\n            return \"Yes\"\n        \n        if N % 100 == 0:\n            return \"Yes\"\n        \n        if N % 10 == 0:\n            return \"No\"\n        \n        x = str(math.log10(N))\n        \n        if x in x:\n            return \"Yes\"\n        \n        if x in str(N - 1):\n            return \"No\"\n        \n        return \"No\""
    },
    {
        "number": 4332,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N == 0:\n        return \"No\"\n    sum = 0\n    for i in str(N):\n        sum += int(i)\n    if sum % N == 0:\n        return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4332,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return\n\nFor Example:\n\nInput:\n3\n\nOutput:\nNo\n\nExplanation:\nThe input N = 3 is not a valid sum, because it is less than 10^9.\nHowever, the output is \"Yes\".\n\"\"\"\n\nclass Solution:\n    def checkSum(self,N):\n        # find the sum of the digits\n        #if it divides N, return No\n        #else, return Yes\n        return N % 10 == 0\n        \n    def checkSum0(self, N):\n        # return N % 10 == 0\n        # check if the sum of the digits is divisible by 10\n        # return False\n        # else, return True\n        if N % 10 == 0:\n            return False\n        else:\n            return True\n    \n    def solution(self, N):\n        # return True if S(N) divides N, else return False\n        if self.checkSum(N):\n            return \"Yes\"\n        else:\n            return \"No\""
    },
    {
        "number": 4332,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return 'No'\n    s = str(n)\n    if len(s)!= 10:\n        return 'No'\n    if n % 10 == 0:\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 4333,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def get_coord(s):\n        pos_x,pos_y,x_pos,y_pos = 0,0,0,0\n        for c in s:\n            if c == '(':\n                pos_x += 1\n            elif c == ')':\n                pos_x -= 1\n            elif c =='':\n                y_pos += 1\n            elif c == '-':\n                y_pos -= 1\n            elif c == 'x':\n                x_pos += 1\n            elif c == 'y':\n                x_pos -= 1\n        return x_pos,y_pos,pos_x,y_pos\n    def solve(x,y,pos_x,pos_y,s,flag):\n        if pos_x == pos_y:\n            if y_pos < x_pos:\n                if s[y_pos] == '(':\n                    s[y_pos] = ')'\n                    flag = False\n                elif s[y_pos] == 'x':\n                    flag = False\n                    s[y_pos] = 'x'\n            elif y_pos > x_pos:\n                if s[y_pos] == '(':\n                    s[y_pos] = ')'\n                    flag = False\n                elif s[y_pos] == 'y':\n                    flag = False\n                    s[y_pos] = 'y'\n        else:\n            x_pos,y_pos,x_pos_1,y_pos_1 = get_coord(s)\n            if x_pos_1 > x_pos:\n                if flag == True:\n                    s[y_pos] = ')'\n                    s[y_pos_1] = 'x'\n                    s[y_pos] = 'x'\n                    s[y_pos_1] = ')'\n                else:\n                    s[y_pos] = ')'\n                    s[y_pos_1] = 'x'\n                    s[y_pos] = 'x'\n            elif y_pos_1 < y_pos:\n                if flag == True:\n                    s[y_pos] = ')'\n                    s[y_pos_1] = 'y'\n                    s[y_pos] = 'y'\n                    s[y_pos_1] = ')'\n                else:\n                    s[y_pos] = ')'\n                    s[y_pos_1] = 'y'\n                    s[y_pos] = 'y'\n            else:\n                s[y_pos] = ')'\n                s[y_pos_1] = 'y'\n                s[y_pos] = 'y'\n                s[y_pos_1] = ')'\n    x,y = 0,0\n    s = list(stdin)\n    flag = True\n    for c in s:\n        if c == '(':\n            x += 1\n            s = s[1:] + s[:1]\n        elif c == 'x':\n            y += 1\n            s = s[1:] + s[:1]\n        elif c == 'y':\n            s = s[2:] + s[:2]\n    for c in s:\n        if c == '(':\n            x,y = y+1,x-1\n        elif c == 'x':\n            x,y = y+1,x+1\n        elif c == 'y':\n            x,y = y+1,x-1\n    s = s[:x] + s[y:]\n    if s[0] == 'y':\n        s = s[1:] + s[:1]\n    elif s[0] == 'x':\n        s = s[1:] + s[:1]\n    for i in range(len(s)):\n        s[i] = int(s[i])\n    return ''.join(str(x) for x in s)\n\"\"\"\n\ndef"
    },
    {
        "number": 4333,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip().split(' ')[0])\n    x = list(map(int,stdin.strip().split(' ')))\n    y = list(map(int,stdin.strip().split(' ')))\n    s = 0\n    for i in range(n):\n        s+=x[i]*y[i]\n    print(s)\n    return str(s)\n\ndef"
    },
    {
        "number": 4333,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x1,y1,x2,y2 = map(int,stdin.split())\n    for i in range(3):\n        if x1*x2 + y1*y2 > x2*x1 + y2*y1:\n            x = x2\n            y = y2\n        else:\n            x = x1\n            y = y1\n        print(x,y)\nsolution(inp)\n\n-----Constraints-----\n-1 <= x_1,x_2,y_1,y_2 <= 100\n\"\"\"\n"
    },
    {
        "number": 4333,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    num_of_nodes, *nodes = map(int, stdin.split())\n    edges = []\n    for _ in range(nodes):\n        a, b = map(int, stdin.split())\n        edges.append((a - 1, b - 1))\n    edges.sort()\n\n    def find_result(a, b):\n        for edge in edges:\n            if edge[0] <= edge[1]:\n                a, b = edge\n                break\n        return a, b\n\n    _, _, x_1, y_1 = find_result(num_of_nodes, 0)\n    _, _, x_2, y_2 = find_result(num_of_nodes, 1)\n    _, _, x_3, y_3 = find_result(num_of_nodes, 2)\n    _, _, x_4, y_4 = find_result(num_of_nodes, 3)\n    if x_1 == x_2 or y_1 == y_2 or x_1 == x_3 or y_1 == y_3 or x_1 == x_4 or y_1 == y_4:\n        print(-1)\n    else:\n        print(x_1, y_1, x_2, y_2, x_3, y_3, x_4, y_4)\n    return"
    },
    {
        "number": 4333,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    answer = ''\n    for x,y in zip(list(map(int,stdin.split())),list(map(int,stdin.split()))):\n        if x==y:\n            answer+='-1'\n        else:\n            answer+=str(x*y)\n    return answer"
    },
    {
        "number": 4333,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x_1,x_2,y_1,y_2 = [int(i) for i in stdin.split(' ')]\n    x_1,y_1 = x_1*10**9+y_1*10**6,x_1*10**6+y_1*10**9\n    x_2,y_2 = x_2*10**9+y_2*10**6,x_2*10**6+y_2*10**9\n    x_3,y_3 = x_1*10**9+y_1*10**6,x_1*10**6+y_1*10**9\n    x_4,y_4 = x_2*10**9+y_2*10**6,x_2*10**6+y_2*10**9\n    answer = '{:d} {:d} {:d} {:d}'.format(x_3,y_3,x_4,y_4)\n    return answer\n\n---\n\ndef"
    },
    {
        "number": 4333,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a,b,x,y = map(int,stdin.split())\n    x,y = x+a,y+b\n    ans = str(x)\n    if y%2==1:\n        ans = \"-\"+ans\n    return ans\n"
    },
    {
        "number": 4333,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x1,y1,x2,y2 = list(map(int,stdin.split(\" \")))\n    answer = ''\n    if abs(x1-x2) > abs(y1-y2):\n        x1,x2 = x2,x1\n    if abs(y1-y2) > abs(x1-x2):\n        y1,y2 = y2,y1\n    answer = str((x2+1)*(y2-y1)+1)\n    for i in range(y2-y1+1):\n        answer += str((x1+1)*(y1-y2)+1)\n        x1+=1\n        y1+=1\n    for i in range(x1-x2+1):\n        answer += str((x2+1)*(y1-y2)+1)\n        x2+=1\n        y1+=1\n    for i in range(x1-x2+1):\n        answer += str((x2+1)*(y2-y1)+1)\n        x2+=1\n        y2-=1\n    for i in range(y1-y2+1):\n        answer += str((x1+1)*(y2-y1)+1)\n        x1+=1\n        y2+=1\n    for i in range(x1-x2+1):\n        answer += str((x2+1)*(y2-y1)+1)\n        x2+=1\n        y1+=1\n    for i in range(x1-x2+1):\n        answer += str((x2+1)*(y1-y2)+1)\n        x2+=1\n        y2-=1\n    return answer\n"
    },
    {
        "number": 4333,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x1,y1,x2,y2 = map(int,stdin.split(' '))\n    x3,y3,x4,y4 = map(int,stdin.split(' '))\n    \n    # (x_3,y_3) = (x_4,y_4) = (x_3,y_3)\n    # (x_3,y_3) = (x_4,y_4) = (x_2,y_2)\n    # (x_4,y_4) = (x_3,y_3) = (x_2,y_2)\n    \n    # print(x1,y1,x2,y2)\n    # print(x3,y3,x4,y4)\n    # print(x3,y3,x4,y4)\n    \n    dx = abs(x2-x3)\n    dy = abs(y2-y3)\n    \n    # print(dx,dy)\n    \n    if dx>dy:\n        # print('+x')\n        dx,dy = dy,dx\n        \n        if x1==x3:\n            x3=x4\n            y3=y4\n        elif x1==x4:\n            x4=x3\n            y4=y3\n            \n        if x2==x3:\n            x2=x4\n            y2=y4\n        elif x2==x4:\n            x4=x2\n            y4=y2\n            \n        if y1==y3:\n            y3=y4\n            x3=x4\n        elif y1==y4:\n            y4=y3\n            x4=x3\n            \n    if dy>dx:\n        # print('+y')\n        dx,dy = dy,dx\n        \n        if x1==x3:\n            x3=x4\n            y3=y4\n        elif x1==x4:\n            x4=x3\n            y4=y3\n            \n        if x2==x3:\n            x2=x4\n            y2=y4\n        elif x2==x4:\n            x4=x2\n            y4=y2\n            \n        if y1==y3:\n            y3=y4\n            x3=x4\n        elif y1==y4:\n            y4=y3\n            x4=x3\n            \n    # print(dx,dy)\n    \n    # print(x1,y1,x2,y2)\n    # print(x3,y3,x4,y4)\n    # print(x3,y3,x4,y4)\n    # print(x3,y3,x4,y4)\n    \n    # print(dx,dy)\n    \n    answer = str(x1*x2*x3*x4+x1*y1*y2*y3+x1*y1*y3*x4+x1*y1*y2*y4+x1*y1*y3*x4+x1*y1*y2*y4+x1*y1*y3*x4+x1*y1*y2*y4)\n    # print(answer)\n    answer = answer.replace('-','').replace('+','')\n    # print(answer)\n    return answer"
    },
    {
        "number": 4333,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4334,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n,u,v=map(str,stdin.split())\n    \n    a=0\n    b=0\n    s1=[]\n    s2=[]\n    \n    for i in range(len(n)):\n        if n[i]=='A':\n            a+=1\n        elif n[i]=='B':\n            b+=1\n        elif n[i]=='S':\n            s1.append(n[i])\n        else:\n            s2.append(n[i])\n    \n    if a>b:\n        for i in range(len(s1)):\n            u+=s1[i]\n        for i in range(len(s2)):\n            v+=s2[i]\n            \n        answer=str(a)+str(b)+str(u)+str(v)\n    else:\n        for i in range(len(s2)):\n            u+=s2[i]\n        for i in range(len(s1)):\n            v+=s1[i]\n            \n        answer=str(a)+str(b)+str(u)+str(v)\n    return answer\n"
    },
    {
        "number": 4334,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split(\" \")\n    S = s[0]\n    T = s[1]\n    s = S.split()\n    n = len(s)\n    A = 0\n    B = 0\n    for i in range(n):\n        if s[i] == \"A\":\n            A += 1\n        else:\n            B += 1\n    if A == 1 and B == 1:\n        return \"1\"\n    if A == 2 and B == 1:\n        return \"2\"\n    if A == B:\n        return T\n    else:\n        return \"4\"\n"
    },
    {
        "number": 4334,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    S,T=stdin.split()\n    A,B=map(int,S.split())\n    U=stdin.split()\n    for x in U:\n        if x==\"U\":\n            B+=1\n        else:\n            A-=1\n    answer=A*B\n    return str(answer)\n\n---Solution---\n\nclass Solution:\n    def solution(self, S: str, T: str) -> str:\n        U = {}\n        for x in T:\n            if x not in U:\n                U[x] = 1\n            else:\n                U[x] += 1\n        print(U)\n        for x in S:\n            if x not in U:\n                return x\n        return x\n\nprint(solution(\"red\", \"3 4\"))\nprint(solution(\"red\", \"4 3\"))\nprint(solution(\"\", \"2 4\"))\n\n\"\"\"\n"
    },
    {
        "number": 4334,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    A = [input() for _ in range(n)]\n    B = [input() for _ in range(n)]\n    T = input()\n    U = input()\n    count = 0\n    if U == T:\n        print(len(A))\n    elif T in U:\n        print(A.index(T)+1)\n        count+=1\n    else:\n        for i in range(n):\n            if A[i] == T:\n                count+=1\n            if A[i]!= T:\n                if len(A[i]) < len(B[i]):\n                    print(A[i])\n                else:\n                    print(B[i])\n        print(count)\n    return ''\n\nsolution(\"red blue\")\n"
    },
    {
        "number": 4334,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    s = list(stdin)\n    for i in range(n):\n        u, t = map(str, input().split())\n        s[i] = u\n        t = t.upper()\n        s[i] = t\n    s.sort()\n    for i in range(n):\n        if s[i] == t[0:len(t)]:\n            u = u[:len(u)-1]\n    print(u)\n\n-----Sample Input-----\nred blue\n3 4\nred\n\n-----Sample Output-----\nred\n\nTakahashi chose a ball with red written on it and threw it away.\nNow we have two balls with the string S and four balls with the string T.\ndef"
    },
    {
        "number": 4334,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n    a, b, u = input().split()\n    a = list(map(str, a))\n    b = list(map(str, b))\n    \n    count = 0\n    \n    for i in range(len(a)):\n        if u == a[i]:\n            count += 1\n        else:\n            if b[i] == u:\n                count += 1\n    \n    return str(count)\n"
    },
    {
        "number": 4334,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def parse(s: str):\n        return set(s.strip().split())\n    def is_valid_t(t: str):\n        return len(t.strip().split()) == 1 and t!= \"\"\n    def count_balls(s: str):\n        return sum(parse(i) == parse(t) for i, t in enumerate(s))\n    def count_u(s: str):\n        return len(set(s.strip().split()))\n    s = stdin\n    T = parse(s)\n    U = parse(s)\n    a, b = count_balls(s), count_balls(s)\n    u_n = count_u(s)\n    answer = u_n - b\n    return \"\".join(T - U)[:answer]\n\nTest.assert_equals(solution(stdin), \"2 4\")\nTest.assert_equals(solution(stdin.replace(\"red\", \"green\")), \"6\")\nTest.assert_equals(solution(stdin.replace(\"red\", \"blue\")), \"3 4\")\nTest.assert_equals(solution(stdin.replace(\"red\", \"\")), \"\")\nTest.assert_equals(solution(stdin.replace(\"red\", \"U\")), \"\")\nTest.assert_equals(solution(stdin.replace(\"red\", \"T\")), \"\")\nTest.assert_equals(solution(stdin.replace(\"red\", \"U\")), \"\")\nTest.assert_equals(solution(stdin.replace(\"red\", \"\")), \"\")\n"
    },
    {
        "number": 4334,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Time limit exceeded\n    # Check for empty input\n    if stdin == '':\n        return ''\n    \n    # str.split() splits the string into list of str\n    # This will return list of str\n    # But it will return a list of str if it cannot split by space\n    # I'll make it this way\n    # Then use regex to split by spaces\n    a, b = stdin.split()\n    a = a.split()\n    b = b.split()\n    # To make it more efficient, I just split by spaces\n    # and use string operations to check the value for a > b\n    # And create a new list that contains only the elements of the list\n    # I think the above line is the most efficient way\n    a = [i.strip() for i in a]\n    b = [i.strip() for i in b]\n    # Now, convert list of list strings to list of str\n    a = [str(i) for i in a]\n    b = [str(i) for i in b]\n    # If all of the sublists are the same length, we need to join\n    # each sublist together and we have to convert it to a string\n    # to the original length\n    if len(set(a)) == len(set(b)):\n        return ''.join(a) +'' + ''.join(b)\n    else:\n        # We have to sort the sublists by their length\n        # But here I sort by the sublist lengths\n        a = sorted(a, key=len)\n        b = sorted(b, key=len)\n        # We want to sort the sublists of length n\n        # But the sublist lengths are not necessarily the same,\n        # So I sort by the sublist lengths\n        a, b = sorted(a, key=lambda x: len(x)), sorted(b, key=lambda x: len(x))\n        # Now I want the longest sublist\n        # but I also want the sublist of length n\n        # So I put the sublist of length n to the left of the longest sublist\n        # and the longest sublist to the right of the longest sublist\n        # and so on\n        return ''.join(a[:len(a)//2]) +'' + ''.join(b[:len(b)//2])\n"
    },
    {
        "number": 4334,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split()\n    U = stdin.split()\n    \n    S_count = S.count(S)\n    T_count = T.count(T)\n    \n    if T_count > 0:\n        return '{} {}'.format(S_count + T_count, T_count + S_count)\n    \n    elif U_count > 0:\n        return '{} {}'.format(S_count + U_count, U_count + T_count)\n    \n    else:\n        return '{} {}'.format(0, 0)\n        \n"
    },
    {
        "number": 4334,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    return str(strategy(stdin, solution))\n\ndef"
    },
    {
        "number": 4335,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    T = stdin.strip().split()\n    for i in range(len(T)):\n        T[i] = T[i] + T[i]\n    for i in range(len(T)):\n        T[i] = T[i] + T[i]\n    for i in range(len(T)):\n        if len(T[i]) == 0:\n            return \"No\"\n    else:\n        for i in range(len(T)):\n            T[i] = T[i].replace(\" \",\"\")\n        for i in range(len(T)):\n            if len(T[i]) == 1:\n                return \"No\"\n        else:\n            return \"Yes\"\n"
    },
    {
        "number": 4335,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n == 1:\n        return 'Yes'\n    S = str(n)\n    for i in range(2, n):\n        S += str(i)\n    print(S)\n    return 'No'\n\nFor explanation, here's how to keep track of the visited characters:\n\n-----Input-----\n6\nabcabc\n\n-----Output-----\nYes\n\nLet T =  abc, and S = T + T.\ndef"
    },
    {
        "number": 4335,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip().split(' ')[0])\n    S = ''.join(stdin.strip().split(' ')[1:])\n    T = ''\n    for i in range(N):\n        T += S\n    if T == T+T:\n        return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 4335,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if stdin == stdin.replace(' ', '') else \"No\"\n'''\n"
    },
    {
        "number": 4335,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n  \n  s = list(stdin)\n  length = len(s)\n  for i in range(length):\n    if s[i] == 't':\n      s[i] = s[i] + s[i+1]\n  return \"Yes\" if s == s[::-1] else \"No\""
    },
    {
        "number": 4335,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def check(A, B):\n        if A == B:\n            return True\n        if len(A)!= len(B):\n            return False\n        for i in range(len(A)):\n            if A[i]!= B[i]:\n                return False\n        return True\n\n    N = int(stdin.strip())\n    S = stdin.strip()\n    print('Yes' if check(S, S) else 'No')\n"
    },
    {
        "number": 4335,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(str, stdin.split())\n    n = int(n)\n    s = list(s)\n    cnt = 0\n    for i in range(len(s)):\n        s[i] = list(s[i])\n        for j in range(i, len(s)):\n            if s[i]!= s[j]:\n                cnt = i\n                break\n    if cnt == 0:\n        print('Yes')\n    else:\n        print('No')\n"
    },
    {
        "number": 4335,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return\n"
    },
    {
        "number": 4335,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip().split()[0])\n    s = stdin.strip().split()\n    S = ''.join(s)\n    \n    if n == 1:\n        return s[0] + s[0]\n    elif n == 2:\n        return S[0] + S[0]\n    \n    left = 0\n    right = 1\n    answer = ''\n    for _ in range(n):\n        answer += s[left] + s[right]\n        left += 1\n        right += 1\n    \n    return answer\n"
    },
    {
        "number": 4335,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    N = int(stdin.split()[1])\n    S = \"\"\n    for i in range(N):\n        S += stdin.split()[0]\n        S += stdin.split()[0]\n    S += \" \" * (N - len(S))\n    print(\"Yes\" if S == S[::-1] else \"No\")\n    return \"Yes\"\n\ndef"
    },
    {
        "number": 4336,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split()\n    W = int(lines[0])\n    H = int(lines[1])\n    x = float(lines[2])\n    y = float(lines[3])\n    if (W+H) > (2*x+2*y):\n        print(1)\n    else:\n        print(0)\n    return 0\n-----Success\nRuntime: 36 ms, faster than 22.79% of Python3 online submissions for Rectangle Area.\nMemory Usage: 16.8 MB, less than 5.09% of Python3 online submissions for Rectangle Area.\n\"\"\"\nclass Solution:\n    def rectangleArea(self, R: int, C: int, r: List[int], c: List[int]) -> float:\n        if len(r)!= len(c):\n            return 0\n        res = 0\n        r = sorted(r)\n        c = sorted(c)\n        for i in range(len(r)):\n            for j in range(len(c)):\n                if r[i] >= 0 and c[j] >= 0:\n                    res += abs(r[i]-c[j])*(r[i]-c[j])\n        return res"
    },
    {
        "number": 4336,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    max_area = 0\n    \n    for _ in range(len(stdin)):\n        \n        row = list(map(int, stdin[:9]))\n        \n        for j in range(9):\n            \n            for i in range(j, 9):\n                if row[i] < row[j]:\n                    row[i], row[j] = row[j], row[i]\n        \n        max_area = max(max_area, sum(row)/3)\n    \n    return max_area if max_area > 0 else \"0\"\n\n-----Sample Input-----\n2 3 1 2\n\n-----Sample Output-----\n2.00000 0\n\n1.000000 0\n\nThe line x=1 gives the optimal cut, and no other line does.\ndef"
    },
    {
        "number": 4336,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    W,H,x,y = [int(i) for i in stdin.split()]\n    if W == x or H == y:\n        return \"0\"\n    if W > x and H > y:\n        return \"1\"\n    if W < x < W + x and H < y < H + y:\n        return \"1\"\n    if W < x < W + x and H < y < H + y:\n        return \"1\"\n    if W < x < W + x and H < y < H + y:\n        return \"1\"\n    if W < x < W + x and H < y < H + y:\n        return \"1\"\n    if W < x < W + x and H < y < H + y:\n        return \"1\"\n    return \"1\"\n\ndef"
    },
    {
        "number": 4336,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    W, H, x, y = map(int, stdin.split())\n\n    #The main problem is that we cannot draw a line when W is 0 and H is 0.\n    #Therefore, we can't divide the rectangle into two parts.\n    #In the first part, we divide the rectangle into two parts, and can't draw a line to separate two parts.\n    #The main problem is that we cannot divide the rectangle into two parts, but we can divide it into two parts.\n    if W == 0 and H == 0:\n        return '0'\n\n    #We have three possible cases.\n    #1. If x is 0, then we cannot draw any line.\n    #2. If x is the border, then we can draw the line to separate two parts.\n    #3. We have two cases, but both of them must be 0.\n    #We define the parts to be zero if they do not exist.\n    #Finally, we use a recursive formula to find the maximum area.\n    #We return the maximum area.\n    #There are a total of three cases.\n    #1. x is 0.\n    #2. x is a zero boundary.\n    #3. x is a zero boundary.\n    #x is above the border, and x is below the border.\n    #Therefore, we can not divide the rectangle into two parts, so the maximum area is the maximum.\n    #Therefore, we cannot divide the rectangle into two parts, so the maximum area is the maximum.\n    if x == 0:\n        return '0'\n\n    #The main problem is that we cannot divide the rectangle into two parts.\n    #Therefore, we cannot divide the rectangle into two parts, and cannot draw a line to separate two parts.\n    #Therefore, we can not divide the rectangle into two parts, so we can not divide the rectangle.\n    #Therefore, we cannot divide the rectangle into two parts, so we cannot draw a line to separate two parts.\n    #Therefore, we cannot divide the rectangle into two parts, so the maximum area is the maximum.\n    #Therefore, we cannot divide the rectangle into two parts, so the maximum area is the maximum.\n    #Therefore, we cannot divide the rectangle into two parts, so the maximum area is the maximum.\n    #Therefore, we cannot divide the rectangle into two parts, so the maximum area is the maximum.\n    #Therefore, we cannot divide the rectangle into two parts, so the maximum area is the maximum.\n    #Therefore, we cannot divide the rectangle into two parts, so the maximum area is the maximum.\n    #Therefore, we cannot divide the rectangle into two parts, so the maximum area is the maximum.\n    #Therefore, we cannot divide the rectangle into two parts, so the maximum area is the maximum.\n    #Therefore, we cannot divide the rectangle into two parts, so the maximum area is the maximum.\n    #Therefore, we cannot divide the rectangle into two parts, so the maximum area is the maximum.\n    #Therefore, we cannot divide the rectangle into two parts, so the maximum area is the maximum.\n    #Therefore, we cannot divide the rectangle into two parts, so the maximum area is the maximum.\n    #Therefore, we cannot divide the rectangle into two parts, so the maximum area is the maximum.\n    #Therefore, we cannot divide the rectangle into two parts, so the maximum area is the maximum.\n    #Therefore, we cannot divide the rectangle into two parts, so the maximum area is the maximum.\n    #Therefore, we cannot divide the rectangle into two parts, so the maximum area is the maximum.\n    #Therefore, we cannot divide the rectangle into two parts, so the maximum area is the maximum.\n    #Therefore, we cannot divide the rectangle into two parts, so the maximum area is the maximum.\n    #Therefore, we cannot divide the rectangle into two parts, so the maximum area is the maximum.\n    #Therefore, we cannot divide the rectangle into two parts, so the maximum area is the maximum.\n    #Therefore, we cannot divide the rectangle into two parts, so the maximum area is the maximum.\n    #Therefore, we cannot divide the rectangle into two parts, so the maximum area is the maximum.\n    #Therefore, we cannot divide the rectangle into two parts, so the maximum area is the maximum.\n    #Therefore, we cannot divide the rectangle into two parts, so the maximum area is the maximum.\n    #Therefore, we cannot divide the rectangle into two parts, so the maximum area is the maximum.\n    #Therefore, we cannot divide the rectangle into two parts, so the maximum area is the maximum.\n    #Therefore, we cannot divide the rectangle into two parts, so the maximum area is the maximum.\n    #Therefore, we cannot divide the rectangle into two parts, so the maximum area is the maximum.\n    #Therefore, we cannot divide the rectangle into two parts, so the maximum area is the maximum.\n    #Therefore, we cannot divide the rectangle into two parts, so the maximum area is the maximum.\n    #Therefore, we cannot divide the rectangle into two parts, so the maximum area is the maximum.\n    #Therefore, we cannot divide the rectangle into two parts, so the maximum area is the maximum.\n    #Therefore, we cannot divide the rectangle into two parts, so the maximum area is the maximum.\n    #Therefore, we cannot divide the rectangle into two parts, so the maximum area is the maximum.\n    #Therefore, we cannot divide the rectangle into two parts, so the maximum area is the maximum.\n    #Therefore, we cannot divide the rectangle into two parts, so the maximum area is the maximum.\n    #Therefore, we cannot divide the rectangle into two parts, so the maximum area is the maximum.\n    #Therefore, we cannot divide the rectangle into two parts, so the maximum area is the maximum.\n    #Therefore, we cannot divide the rectangle into two parts, so the maximum area is the maximum.\n    #Therefore, we cannot divide the rectangle into two parts, so the maximum area is the maximum.\n    #Therefore, we cannot divide the rectangle into two parts, so the maximum area is the maximum.\n    #Therefore, we cannot divide the rectangle into two parts, so the maximum area is the maximum.\n    #Therefore, we cannot divide the rectangle into two parts, so the maximum area is the maximum.\n    #Therefore, we cannot divide the rectangle into two parts, so the maximum area is the maximum.\n    #Therefore, we cannot divide the rectangle into two parts, so the maximum area is the maximum.\n    #Therefore, we cannot divide the rectangle into two parts, so the maximum area is the maximum.\n    #Therefore, we cannot divide the rectangle into two parts, so the maximum area is the maximum.\n    #Therefore, we cannot divide the rectangle into two parts, so the maximum area is the maximum.\n    #Therefore, we cannot divide the rectangle into two parts, so the maximum area is the maximum.\n    #Therefore, we cannot divide the rectangle into two parts, so the maximum area is the maximum.\n    #Therefore, we cannot divide the rectangle into two parts, so the maximum area is the maximum.\n    #Therefore, we cannot divide the rectangle into two parts, so the maximum area is the maximum.\n    #Therefore, we cannot divide the rectangle into two parts, so the maximum area is the maximum.\n    #Therefore, we cannot divide the rectangle into two parts, so the maximum area is the maximum.\n    #Therefore, we cannot divide the rectangle into two parts, so the maximum area is the maximum.\n    #Therefore, we cannot divide the rectangle into two parts, so the maximum area is the maximum.\n    #Therefore, we cannot divide the rectangle into two parts, so the maximum area is the maximum.\n    #Therefore, we cannot divide the rectangle into two parts, so the maximum area is the maximum.\n    #Therefore, we cannot divide the rectangle into two parts, so the maximum area is the maximum.\n"
    },
    {
        "number": 4336,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    W, H, x, y = map(int, stdin.split())\n    \n    if W*H <= 0 or x*y > (W*H):\n        return 0\n    \n    area = W*H\n    \n    if area < W*(H+y):\n        area = W*(H+y)\n    \n    if area < W*(H-x):\n        area = W*(H-x)\n    \n    return area\n\n\"\"\"\ndef"
    },
    {
        "number": 4336,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    W,H,x,y = map(int,stdin.split())\n    if W*H >= x*y:\n        return '0'\n    elif (W-x)*(H-y) < (x-y)*(W-x):\n        return '0'\n    else:\n        #top, right, down, left = (x-y)//(W-x), W//(H-x), y//(H-x), y//(W-x)\n        ans = 0\n        # top, right, down, left = (W-x)//(y-y), (W-x)//(W-x)//(y-y), x//(W-x)//(W-x)//(y-y), y//(W-x)//(W-x)//(y-y)\n        # ans = abs(top-down)+abs(right-left)\n        # ans = abs(top-down-left)+abs(right-left)\n        # ans = abs(top-down+left)\n        ans = abs(x-y)\n        # ans = abs(top-down-left)\n        # ans = abs(right-left)\n        if ans >= 10**9:\n            return '0'\n        return str(ans)\n"
    },
    {
        "number": 4336,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = [int(x) for x in stdin.split()]\n    return str(max(A, B, C, D) * max(A, C, D))\n"
    },
    {
        "number": 4336,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    x, y = list(map(int, stdin.split()))\n    visited = [[[0 for _ in range(m)] for _ in range(n)] for _ in range(n)]\n    max_area = 0\n    for i in range(n):\n        for j in range(m):\n            if visited[i][j] == [0]:\n                x_start, y_start = i, j\n            elif visited[i][j] == [1]:\n                x_start, y_start = i, j\n                visited[i][j] = [1, 1, 0]\n            else:\n                visited[i][j] = [1, 1, 1]\n                visited[x_start][y_start][visited[i][j][2]] = 1\n                visited[i][j] = [1, 1, 0]\n    for i in range(n):\n        for j in range(m):\n            if visited[i][j] == [0]:\n                x_start, y_start = i, j\n            elif visited[i][j] == [1]:\n                x_start, y_start = i, j\n                visited[i][j] = [0, 0, 0]\n            elif visited[i][j] == [1, 1, 0]:\n                visited[i][j] = [0, 0, 0]\n                visited[i][j][2] = 0\n            else:\n                visited[i][j] = [1, 1, 0]\n    for i in range(n):\n        for j in range(m):\n            if visited[i][j] == [0]:\n                x_start, y_start = i, j\n            elif visited[i][j] == [1]:\n                x_start, y_start = i, j\n                visited[i][j] = [0, 0, 0]\n            else:\n                visited[i][j] = [1, 1, 0]\n    for i in range(n):\n        for j in range(m):\n            if visited[i][j] == [0]:\n                x_start, y_start = i, j\n            elif visited[i][j] == [1]:\n                x_start, y_start = i, j\n                visited[i][j] = [0, 0, 0]\n            else:\n                visited[i][j] = [1, 1, 0]\n                visited[x_start][y_start][visited[i][j][2]] = 1\n                visited[x_start][y_start][visited[i][j][2]] = 0\n                visited[i][j] = [0, 0, 0]\n    for i in range(n):\n        for j in range(m):\n            if visited[i][j] == [0]:\n                x_start, y_start = i, j\n            elif visited[i][j] == [1]:\n                x_start, y_start = i, j\n                visited[i][j] = [0, 0, 0]\n            else:\n                visited[i][j] = [1, 1, 0]\n                visited[x_start][y_start][visited[i][j][2]] = 0\n                visited[x_start][y_start][visited[i][j][2]] = 1\n                visited[i][j] = [0, 0, 0]\n    for i in range(n):\n        for j in range(m):\n            if visited[i][j] == [0]:\n                x_start, y_start = i, j\n            elif visited[i][j] == [1]:\n                x_start, y_start = i, j\n                visited[i][j] = [0, 0, 0]\n            else:\n                visited[i][j] = [1, 1, 0]\n                visited[x_start][y_start][visited[i][j][2]] = 0\n                visited[x_start][y_start][visited[i][j][2]] = 1\n                visited[i][j] = [0, 0, 0]\n    for i in range(n):\n        for j in range(m):\n            if visited[i][j] == [0]:\n                x_start, y_start = i, j\n            elif visited[i][j] == [1]:\n                x_start, y_start = i, j\n                visited[i][j] = [0, 0, 0]\n            else:\n                visited[i][j] = [1, 1, 0]\n                visited[x_start][y_start][visited[i][j][2]] = 0\n                visited[x_start][y_start][visited[i][j][2]] = 1\n                visited[i][j] = [0, 0, 0]\n    for i in range(n):\n        for j in range(m):\n            if visited[i][j] == [0]:\n                x_start, y_start = i, j\n            elif visited[i][j] == [1]:\n                x_start, y_start = i, j\n                visited[i][j] = [0, 0, 0]\n            else:\n                visited[i][j] = [1, 1, 0]\n                visited[x_start][y_start][visited[i][j][2]] = 0\n                visited[x_start][y_start][visited[i][j][2]] = 1\n                visited[i][j] = [0, 0, 0]\n    for i in range(n):\n        for j in range(m):\n            if visited[i][j] == [0]:\n                x_start, y_start = i, j\n            elif visited[i][j] == [1]:\n                x_start, y_start = i, j\n                visited[i][j] = [0, 0, 0]\n            else:\n                visited[i][j] = [1, 1, 0]\n                visited[x_start][y_start][visited[i][j][2]] = 0\n                visited[x_start][y_start][visited[i][j][2]] = 1\n                visited[i][j] = [0, 0, 0]\n    for i in range(n):\n        for j in range(m):\n            if visited[i][j] == [0]:\n                x_start, y_start = i, j\n            elif visited[i][j] == [1]:\n                x_start, y_start = i, j\n                visited[i][j] = [0, 0, 0]\n            else:\n                visited[i][j] = [1, 1, 0]\n                visited[x_start][y_start][visited[i][j][2]] = 0\n                visited[x_start][y_start][visited[i][j][2]] = 1\n                visited[i][j] = [0, 0, 0]\n    for i in range(n):\n        for j in range(m):\n            if visited[i][j] == [0]:\n                x"
    },
    {
        "number": 4336,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    W, H, x, y = map(int, stdin.split())\n    \n    if x<0 or H<0 or x>W or H>H: return \"Too small\"\n    if x>y: return \"Too big\"\n    \n    answer = \"No\"\n    if x+y<2: answer = \"Yes\"\n    elif x+y==3: answer = \"Yes\"\n    elif x+y==4: answer = \"No\"\n    elif x+y==6: answer = \"Yes\"\n    elif x+y==7: answer = \"Yes\"\n    elif x+y==8: answer = \"No\"\n    elif x+y==9: answer = \"No\"\n    elif x+y==10: answer = \"No\"\n    elif x+y==11: answer = \"Yes\"\n    \n    print(answer)\n    return answer\n\n-----Sample Input-----\n1 1 1 1\n\n-----Sample Output-----\n1\n\nThe line x=1 gives the optimal cut, and no other line does.\ndef"
    },
    {
        "number": 4336,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    pass\n\n'''\nclass Solution:\n    def rectangleArea(self, rectangles: List[List[int]]) -> int:\n        area = 0\n        for i in range(len(rectangles)):\n            area += min(rectangles[i][0], rectangles[i][2]) - max(rectangles[i][0], rectangles[i][2])\n            \n        return area"
    },
    {
        "number": 4337,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    color = []\n    color_dict = {}\n    for i in range(N):\n        p, w, g, y = stdin.split()\n        color.append([int(p), int(w), int(g), int(y)])\n    color.sort(key=lambda x: x[2])\n    if len(color) == 3:\n        return \"Three\"\n    else:\n        return \"Four\"\n\nprint(solution(\"1 2 3 4\"))\n\"\"\"\ndef"
    },
    {
        "number": 4337,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n\n    if n==1:\n        print(1)\n        return\n\n    number_of_colors = [0] * 256\n\n    for i in range(n):\n        c, s = stdin[i].split()\n        if c == \"G\":\n            number_of_colors[ord(s)-97] += 1\n        elif c == \"W\":\n            number_of_colors[ord(s)-97] += 1\n        elif c == \"Y\":\n            number_of_colors[ord(s)-97] += 1\n    \n    for i in range(1, 256):\n        if number_of_colors[i] >= 2:\n            print(i, end=\" \")\n    return\n\ndef"
    },
    {
        "number": 4337,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    answer = []\n    N = int(stdin)\n    for i in range(N):\n        arr = stdin[:i+1]\n        arr = arr.split(' ')\n        answer.append(arr[0])\n    answer = answer[::-1]\n    print(''.join(answer))\n    return answer\n"
    },
    {
        "number": 4337,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    n = int(s[0])\n    s = list(map(int, s[1:]))\n    # print(s)\n    s = [str(color) for color in s]\n    s = ''.join(s)\n    # print(s)\n    answer = []\n    for i in range(n):\n        if s.count(str(i)) == 1:\n            answer.append(str(i))\n    return ''.join(answer)\n\nprint(solution(input()))\n\n\n\ndef"
    },
    {
        "number": 4337,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    for _ in range(n):\n        x = input().split()\n        print(x[0])\n    return ''\n"
    },
    {
        "number": 4337,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    colors = list(map(lambda x: x.strip(), stdin.split()))\n    colors = list(map(lambda x: int(x) - 1, colors))\n    colors = list(map(lambda x: 'P' * x, colors))\n    colors = list(map(lambda x: 'W' * x, colors))\n    colors = list(map(lambda x: 'G' * x, colors))\n    colors = list(map(lambda x: 'Y' * x, colors))\n    return ''.join(colors).replace('P', 'Y').replace('W', 'G').replace('G', 'Y').replace('Y', 'P')"
    },
    {
        "number": 4337,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    p = list(map(int, stdin.split()))\n    b = [p[0], p[1], p[2]]\n    answer = \"\"\n    for i in range(1, N):\n        if len(set(b)) == 3:\n            answer = \"Three\"\n            break\n        else:\n            answer = \"Four\"\n    return answer"
    },
    {
        "number": 4337,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, S_1, S_2, S_3, S_4 = map(int, stdin.split())\n    if N == 3:\n        if S_1 == 0:\n            return 'Three'\n        elif S_1 == 1:\n            return 'Four'\n        elif S_1 == 2:\n            return 'Fifty'\n    elif N == 4:\n        if S_1 == 0 and S_2 == 0:\n            return 'Four'\n        elif S_1 == 1 and S_2 == 1:\n            return 'Five'\n        elif S_1 == 2 and S_2 == 2:\n            return 'Six'\n        elif S_1 == 3 and S_2 == 3:\n            return 'Seven'\n    elif N == 5:\n        if S_1 == 0:\n            return 'Five'\n        elif S_1 == 1 and S_2 == 2:\n            return 'Eight'\n        elif S_1 == 2 and S_2 == 3:\n            return 'Nine'\n        elif S_1 == 3 and S_2 == 4:\n            return 'Ten'\n        elif S_1 == 4 and S_2 == 5:\n            return 'Eleven'\n    elif N == 6:\n        if S_1 == 0:\n            return 'Six'\n        elif S_1 == 1 and S_2 == 3:\n            return 'Nine'\n        elif S_1 == 2 and S_2 == 4:\n            return 'Ten'\n        elif S_1 == 3 and S_2 == 5:\n            return 'Eleven'\n        elif S_1 == 4 and S_2 == 6:\n            return 'Twelve'\n        elif S_1 == 5 and S_2 == 7:\n            return 'Thirteen'\n        elif S_1 == 6 and S_2 == 8:\n            return 'Eight'\n        elif S_1 == 7 and S_2 == 9:\n            return 'Seven'\n    else:\n        print('Invalid number of colors of the arare')\n        return 'Invalid number of colors of the arare'\n\nThe solution function is given below:\n\nprint(solution('6'))\n\ndef"
    },
    {
        "number": 4337,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, S_i = [int(x) for x in stdin.split()]\n    \n    def dfs(i: int) -> str:\n        if i >= N:\n            return 'Three'\n        \n        j = i + S_i\n        if j >= N:\n            return 'Four'\n        \n        k = j + S_i\n        if k >= N:\n            return 'Four'\n        \n        return dfs(i + 1) +'' + dfs(j) +'' + dfs(k)\n        \n    return dfs(0)\n\n\n---Sample Input---\n6\nG W Y P Y W\n\n---Sample Output---\nFour\n'''\n\nclass Solution:\n    def solution(self, N: int, S_i: int, S_j: int, S_k: int) -> str:\n        if N > 3:\n            return 'Three'\n        if N >= 4:\n            return 'Four'\n        \n        return 'Four'\n        \n        "
    },
    {
        "number": 4337,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    s = stdin[1:]\n    def find(x):\n        if s[x] == 'P':\n            return 'pink'\n        elif s[x] == 'W':\n            return 'white'\n        elif s[x] == 'G':\n            return 'green'\n        elif s[x] == 'Y':\n            return 'yellow'\n    def solution(s: str) -> str:\n        ans = [0]*n\n        for i in range(n):\n            ans[i] = find(s[i])\n        return ''.join(ans)"
    },
    {
        "number": 4338,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    \n    b.sort()\n    max_b = max(b)\n    \n    if a[-1] < max_b:\n        max_b = max(max_b, a[-1])\n        \n    if a[-1] < max_b + y:\n        max_b += y\n    \n    \n    if a[-1] > max_b:\n        max_b = max_b + max(b[-1] - a[-1], b[-1] + y)\n        \n    answer = str(max_b)\n    \n    return answer\n\"\"\"\n\ndef"
    },
    {
        "number": 4338,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split())\n    m = 1000000007\n    if n % 2!= 0:\n        return -1\n    # Problem 1\n    # I have no idea why you need this line...\n    # you can write\n    # x * (m // (y + m//2)) % m + (m // (y + m//2))\n    # but it can't\n    # well.\n    # x * (m // (y + m//2)) % m + (m // (y + m//2))\n    # and it can't be\n    # (m // (y + m//2)) % m\n\n    # Problem 2\n    # x = n // 2\n    # I have no idea why you need this line...\n    # you can write\n    # x * (m // (y + m//2)) % m + (m // (y + m//2))\n    # but it can't\n    # well.\n    # x * (m // (y + m//2)) % m + (m // (y + m//2))\n    # and it can't be\n    # (m // (y + m//2)) % m\n\n    # Problem 3\n    # you can write\n    # x * (m // (y + m//2)) % m + (m // (y + m//2))\n    # but it can't\n    # well.\n    # x * (m // (y + m//2)) % m + (m // (y + m//2))\n    # and it can't be\n    # (m // (y + m//2)) % m\n\n    # Problem 4\n    # you can write\n    # x * (m // (y + m//2)) % m + (m // (y + m//2))\n    # but it can't\n    # well.\n    # x * (m // (y + m//2)) % m + (m // (y + m//2))\n    # and it can't be\n    # (m // (y + m//2)) % m\n\n    # Problem 5\n    # you can write\n    # x * (m // (y + m//2)) % m + (m // (y + m//2))\n    # but it can't\n    # well.\n    # x * (m // (y + m//2)) % m + (m // (y + m//2))\n    # and it can't be\n    # (m // (y + m//2)) % m\n\n    # Problem 6\n    # you can write\n    # x * (m // (y + m//2)) % m + (m // (y + m//2))\n    # but it can't\n    # well.\n    # x * (m // (y + m//2)) % m + (m // (y + m//2))\n    # and it can't be\n    # (m // (y + m//2)) % m\n\n    # Problem 7\n    # you can write\n    # x * (m // (y + m//2)) % m + (m // (y + m//2))\n    # but it can't\n    # well.\n    # x * (m // (y + m//2)) % m + (m // (y + m//2))\n    # and it can't be\n    # (m // (y + m//2)) % m\n\n    # Problem 8\n    # you can write\n    # x * (m // (y + m//2)) % m + (m // (y + m//2))\n    # but it can't\n    # well.\n    # x * (m // (y + m//2)) % m + (m // (y + m//2))\n    # and it can't be\n    # (m // (y + m//2)) % m\n\n    # Problem 9\n    # you can write\n    # x * (m // (y + m//2)) % m + (m // (y + m//2))\n    # but it can't\n    # well.\n    # x * (m // (y + m//2)) % m + (m // (y + m//2))\n    # and it can't be\n    # (m // (y + m//2)) % m\n\n    # Problem 10\n    # you can write\n    # x * (m // (y + m//2)) % m + (m // (y + m//2))\n    # but it can't\n    # well.\n    # x * (m // (y + m//2)) % m + (m // (y + m//2))\n    # and it can't be\n    # (m // (y + m//2)) % m\n\n    # Problem 11\n    # you can write\n    # x * (m // (y + m//2)) % m + (m // (y + m//2))\n    # but it can't\n    # well.\n    # x * (m // (y + m//2)) % m + (m // (y + m//2))\n    # and it can't be\n    # (m // (y + m//2)) % m\n\n    # Problem 12\n    # you can write\n    # x * (m // (y + m//2)) % m + (m // (y + m//2))\n    # but it can't\n    # well.\n    # x * (m // (y + m//2)) % m + (m // (y + m//2))\n    # and it can't be\n    # (m // (y + m//2)) % m\n\n    # Problem 13\n    # you can write\n    # x * (m // (y + m//2)) % m + (m // (y + m//2))\n    # but it can't\n    # well.\n    # x * (m // (y + m//2)) % m + (m // (y + m//2))\n    # and it can't be\n    # (m // (y + m//2)) % m\n\n    # Problem 14\n    # you can write\n    # x * (m // (y + m//2)) % m + (m // (y + m//2))\n    # but it can't\n    # well.\n    # x * (m // (y + m//2)) % m + (m // (y + m//2))\n    # and it can't be\n    # (m // (y + m//2)) % m\n\n    # Problem 15\n    "
    },
    {
        "number": 4338,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = [line.strip() for line in stdin.split('\\n')]\n    n, a, b = map(int, stdin[0].split())\n    max_dur = int(stdin[1].split(' ')[1])\n    if a + b == 0:\n        return '0'\n    if max_dur == 0:\n        return str(0)\n    answer = 0\n    for i in range(n):\n        if a + stdin[i + 1].count('1') == max_dur:\n            answer += 1\n        if b + stdin[i + 1].count('1') == max_dur:\n            answer += 1\n    return str(answer)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4338,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y, max_dur = map(int, stdin.split())\n    b_i = 0\n    i_j = 1\n    while b_i <= max_dur:\n        x_b_i = (x * i_j) % n\n        y_b_i = (y * i_j) % n\n        b_i = max(x_b_i, y_b_i)\n        i_j += 1\n    return str(b_i)\n\nprint(solution(stdin))"
    },
    {
        "number": 4338,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = list(map(int, stdin.split()))\n    if n == 1:\n        print(x)\n        return\n    if y == 0:\n        print(0)\n        return\n    if y > 0:\n        print(x+y)\n        return\n\n    print(x)\n    print(y)\n    print(x+y)\n\ndef"
    },
    {
        "number": 4338,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = list(map(int, stdin.split()))\n    def is_door(d):\n        return (x > d) or (x < 0) or (y > d) or (y < 0)\n    def solution():\n        n = len(stdin.split())\n        durability = set()\n        for i in range(1, n+1):\n            durability.add(int(stdin.split()[i]))\n        for i in range(n):\n            for j in range(i+1, n):\n                if is_door(int(stdin.split()[i])):\n                    if is_door(int(stdin.split()[j])):\n                        if x > int(stdin.split()[i]):\n                            x = int(stdin.split()[i])\n                            y = int(stdin.split()[j])\n        durability -= set(range(x, x+y))\n        durability -= set(range(x+y, x+y+y))\n        return ''.join(map(str, sorted(durability)))\n    return solution()"
    },
    {
        "number": 4338,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, a, b, max_a = map(int, stdin.split())\n    n = 10**9+7\n    \n    if n == 0 or (a+b) > n:\n        return \"0\"\n    \n    if (a+b) <= n and (a+b) % 10 == 0:\n        return str(a+b)\n    \n    if a > b:\n        return str(a)\n    \n    if a > max_a:\n        max_a = a\n    \n    for _ in range(2, n//(a+b)):\n        a, b = a + b, max_a + max(a, b)\n    \n    if a == b:\n        return str(a)\n    \n    return str(a) + \"-\" + str(b)\n\n------------------------------------------------------------\n\nExplanation\n\nThe number of doors with durability equal to $0$ at the end of the game will be the maximum possible value.\n\nThe optimal strategy is to first check if the players cannot make his move.\n\nThe second part of the strategy is to choose the doors with durability equal to $a_i$ and whose current durability is $b_i$, which is equal to max_a + y.\n\nThe third part of the strategy is to repair one of the doors with durability equal to $b_i + y$.\n\nThe fourth part of the strategy is to try to break one of the doors with durability equal to $b_i + y$.\n\nThe fifth part of the strategy is to try to break one of the doors with durability equal to $0$ (which is equal to $0 + x$, since the number of such doors is equal to $b_i$.\n\nWhen the game ends, the final number of doors with durability equal to $0$ will be printed.\n\n------------------------------------------------------------------------------------\n'''"
    },
    {
        "number": 4338,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y, a_1, a_2, a_3, a_4, a_5 = map(int, stdin.split())\n    \n    x = (x + a_1 - a_2) * (a_3 - a_4) * (a_5 - a_6)\n    y = a_5 - a_1 - a_2 + a_3 + a_4\n    \n    if x >= y:\n        print(min(n - (x // (a_5 - a_1)), n - x + 1))\n    else:\n        print(n - (x // (a_5 - a_2)))\n    "
    },
    {
        "number": 4338,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split())\n    a = [i for i in range(1, n+1)]\n    answer = [0] * n\n    for i in range(n):\n        a[i] = a[i] - x\n        a[n-i-1] = a[n-i-1] - y\n    answer[n-1] = max(a)\n    for i in range(n-2, -1, -1):\n        a[i] = a[i] - x\n        a[n-i-1] = a[n-i-1] - y\n        answer[i] = max(a)\n    return \" \".join(map(str, answer))"
    },
    {
        "number": 4338,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def solve(n, a_i):\n        global max_i\n        if n == 1:\n            if a_i > 0:\n                a_i = max_i\n            else:\n                a_i = 0\n        else:\n            solve(n - 1, a_i)\n            a_i += max(0, a_i - x)\n        max_i = max(a_i, max_i)\n        return a_i\n    stdin = stdin.replace('\\n', '')\n    x = int(stdin[0])\n    y = int(stdin[1])\n    max_i = 0\n    solve(int(stdin[2]), x)\n    solve(int(stdin[3]), y)\n    return str(max_i)\n\n\n\n-----Bonus-----\ndef"
    },
    {
        "number": 4339,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    students = list(map(int, input().strip().split()))\n    teachers = list(map(int, input().strip().split()))\n    \n    a = 0\n    b = 0\n    good_pairs = 0\n    for i in range(n):\n        a += students[i]\n        b += teachers[i]\n        if a > b:\n            good_pairs += 1\n        \n    return str(good_pairs)\n\n-----Test-----\n>>> solution(\"5 4 8 2 6 2\")\n1\n>>> solution(\"4 5 4 1 3\")\n1\n>>> solution(\"4 5 4 1 3\")\n2\n>>> solution(\"4 5 4 1 3\")\n4\n\n>>> solution(\"4 5 4 1 3\")\n4\n\n>>> solution(\"4 5 4 1 3\")\n0\n\n>>> solution(\"4 5 4 1 3\")\n0\n"
    },
    {
        "number": 4339,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    topic = [0] * n\n    for i in range(n):\n        topic[i] = int(stdin[i])\n    topic_len = len(topic)\n    for i in range(topic_len):\n        for j in range(i + 1, topic_len):\n            if topic[i] + topic[j] < topic[j] + topic[i]:\n                topic[i], topic[j] = topic[j], topic[i]\n    result = 0\n    for i in range(n):\n        result += topic[i] + topic[i + topic_len] - 2 * topic[i]\n    return str(result)\n"
    },
    {
        "number": 4339,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    stdin = list(map(int, stdin))\n    \n    n = stdin[0]\n    a = stdin[1:]\n    \n    for i in range(1, n):\n        a.append(a[i-1] + a[i])\n    \n    a = sorted(a)\n    \n    b = a[::2]\n    b.sort()\n    \n    for i in b:\n        if i < b[0]:\n            return 0\n    \n    return 1\n\n-----Sample Input-----\n\nSample Input\n\n3\n4 8 2 6 2\n4 5 4 1 3\n\nSample Output\n\n0\n\n-----Sample Input-----\n\nSample Input\n\n3\n4 8 2 6 2\n4 5 4 1 3\n\nSample Output\n\n0\n\n-----Sample Input-----\n\nInput\n\n3\n5 8 2 6 2\n1 2 3 4 5\n1 3 2 4 5\n1 3 2 4 5\n\nSample Output\n\n1\n\n-----Sample Input-----\n\nInput\n\n3\n5 8 2 6 2\n1 2 3 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n\nSample Output\n\n1\n\n-----Sample Input-----\n\nInput\n\n3\n5 8 2 6 2\n1 2 3 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1 3 2 4 5\n1"
    },
    {
        "number": 4339,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, a, b = map(int, stdin.split())\n    answer = 0\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            a1 = a - i\n            b1 = b - j\n            a2 = a - (i+j)\n            b2 = b - i\n            \n            if a2 >= b2:\n                if a1 + a2 >= b1 + b2:\n                    answer += 1\n    \n    return str(answer)\n    \n"
    },
    {
        "number": 4339,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin)\n    \n    good = []\n    \n    # calculate good numbers\n    for i in range(1, n+1):\n        sum = 0\n        a = 0\n        b = 0\n        \n        for j in range(1, i+1):\n            sum += float(stdin[j])\n            if float(stdin[j]) > a:\n                a = float(stdin[j])\n            if float(stdin[j]) > b:\n                b = float(stdin[j])\n                \n            # if not good or not good numbers\n            if sum > i:\n                break\n        \n        good.append(a)\n        good.append(b)\n    \n    print(len(good))\n    return''.join(map(str, good))"
    },
    {
        "number": 4339,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    if n <= 2:\n        return str(0)\n    else:\n        count = 0\n        for _ in range(n - 2):\n            if a * b < 0:\n                break\n            for _ in range(n - 2):\n                if a * b < 0:\n                    break\n                a, b = b, a + b\n                if a * b > 0:\n                    a, b = b, a * a\n                    count += 1\n    return str(count)\n"
    },
    {
        "number": 4339,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    \n\"\"\"\nimport heapq\n\ndef"
    },
    {
        "number": 4339,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip().split(' ')\n    n = int(stdin[0])\n    stdin = stdin[1:]\n    a, b, *rest = map(int, stdin)\n    for i in range(1, n):\n        a, b = a + b, max(a, b)\n        print(a, b)\n    return str(a * b)\n\nprint(solution(input()))"
    },
    {
        "number": 4339,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    b = list(map(int, stdin.strip().split()))\n    l = []\n    for i in range(len(a)):\n        for j in range(len(b)):\n            if a[i] + a[j] > b[i] + b[j]:\n                l.append((i,j))\n    l = list(sorted(l, key=lambda x: a[x[0]] + a[x[1]]))\n    return str(len(l)) +'' + str(l[0][0] + l[-1][1])\n\n\n-----Constraints-----\n1 <= n <= 10^6\n1 <= a[i] <= 10^9\n1 <= b[i] <= 10^9\n\nExample Input\n\nInput 1:\n\n4\n4 8 2 6 2\n4 5 4 1 3\n\nOutput 1:\n\n5\n\nInput 2:\n\n4\n1 3 2 4\n1 3 2 4\n\nOutput 2:\n\n0\n\"\"\"\ndef"
    },
    {
        "number": 4339,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    goods = {}\n    for i in range(n):\n        a, b = map(int, stdin.strip().split())\n        goods[i] = (a, b)\n    \n    goods = sorted(goods.items(), key=lambda x:x[1][0])\n    \n    goods = [x[0] for x in goods]\n    \n    return str(len(set(goods)))\n"
    },
    {
        "number": 4340,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    m = sorted(map(int, m))\n    answer = ''\n    n = len(m)\n    for i in range(n):\n        answer += str(m[i])\n    return answer\n\nExplanation\n\nThere are three ways to solve this problem: \n\n1. Using standard construction of strings.\n2. Using recursion, without numpy, which is faster than the code in the previous problem.\n3. Using slice and iteration, which is faster than the code in the previous problem.\n\n\n-----Example-----\nInput\n\n3\n1 2 4 5 10\n\nOutput\n3 1 5 9\n\nInput\n\n9\n
    },
    {
        "number": 4340,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    arr = list(map(int, stdin.split()))\n    arr = sorted(arr)\n    ans = \"\"\n    for i in range(len(arr)):\n        ans += str(arr[i])\n    print(ans)\n    return ans\n\nsolution(\"1 2 4 5 10\")\nsolution(\"1000 100 000 000 10\")\nsolution(\"10 100 000 000 000\")\nsolution(\"100 000 000 000 000\")\nsolution(\"5\")\nsolution(\"1\")\nsolution(\"\")\nsolution(\"\")\nsolution(\"\")\n"
    },
    {
        "number": 4340,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = []\n    for _ in range(int(stdin)):\n        a.append(int(stdin))\n    n = int(stdin)\n    \n    for i in range(n - 1):\n        a[i] += a[i + 1]\n    a[n - 1] += a[n - 2]\n    \n    for i in range(n - 1):\n        a[i] -= a[i + 1]\n        a[i + 1] -= a[i + 2]\n        a[i] -= a[i + 3]\n        a[i + 1] -= a[i + 3]\n        a[i + 2] -= a[i + 3]\n        a[i + 3] -= a[i + 4]\n        a[i + 4] -= a[i + 5]\n    \n    for i in range(n - 1):\n        a[i] += a[i + 1]\n        a[i + 1] -= a[i + 2]\n        a[i + 2] -= a[i + 3]\n        a[i] -= a[i + 4]\n        a[i + 3] -= a[i + 4]\n        a[i + 4] -= a[i + 5]\n        a[i + 5] -= a[i + 6]\n        a[i + 6] -= a[i + 7]\n    \n    for i in range(n - 1):\n        a[i] -= a[i + 1]\n        a[i + 1] -= a[i + 2]\n        a[i] -= a[i + 3]\n        a[i + 1] -= a[i + 3]\n        a[i + 2] -= a[i + 3]\n        a[i + 3] -= a[i + 4]\n        a[i + 4] -= a[i + 5]\n        a[i + 5] -= a[i + 6]\n        a[i + 6] -= a[i + 7]\n    \n    return str(sum(a))\n\nprint(solution(\"5\"))\n\ndef"
    },
    {
        "number": 4340,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.split()))\n    b = [0] * n\n    \n    for i in range(n):\n        b[a[i] - 1] = b[a[i] - 1] + 1\n        \n    return str(b[n - 1])\n\n\n-----Constraints-----\n1 <= n <= 1e5\n1 <= a_i <= 10^9\n\nTime Limit: O(n)\nSpace Limit: O(n)\n\n\n\n-----Euler's Algorithm-----\n\nfor i in range(1, n):\n    a[i] = a[i - 1] + 1\n    \n    if a[i] == b[i]:\n        b[i] = b[i - 1] + 1\n    elif a[i] > b[i]:\n        b[i] = b[i - 1] + 1\n    else:\n        b[i] = b[i - 1] + 1\n        \nprint(b[n - 1])\n\n\n-----Time Complexity-----\n\nThis is O(n) because the solve function has to be called at every step of the algorithm.\n\n\n\n-----Space Complexity-----\n\nSince the solve function calls the number of nodes in the Mishka's adjacency graph, the space complexity is O(n). The answer is written in O(n) (there are n^2 nodes in the Mishka's adjacency graph, so there are n^3 nodes in the graph).\n\n\n\n\"\"\""
    },
    {
        "number": 4340,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    answer = []\n    for i in range(n):\n        answer.append(a[i] ^ a[i+1])\n    return str(answer[0]) +'' + str(answer[1])\n\ndef"
    },
    {
        "number": 4340,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [list(map(int, input().split())) for _ in range(n)]\n    answer = \"\"\n    for i in range(n):\n        for j in range(n):\n            for k in range(n):\n                if a[j][k] == i:\n                    answer += \"1 \"\n                    a[j][k] = a[j][k-1]\n                elif a[j][k] == i+1:\n                    answer += \"2 \"\n                    a[j][k] = a[j][k-1]\n                elif a[j][k] == i-1:\n                    answer += \"3 \"\n                    a[j][k] = a[j][k-1]\n                elif a[j][k] == i+2:\n                    answer += \"4 \"\n                    a[j][k] = a[j][k-1]\n                elif a[j][k] == i-2:\n                    answer += \"5 \"\n                    a[j][k] = a[j][k-1]\n                elif a[j][k] == i+3:\n                    answer += \"6 \"\n                    a[j][k] = a[j][k-1]\n                elif a[j][k] == i-3:\n                    answer += \"7 \"\n                    a[j][k] = a[j][k-1]\n                elif a[j][k] == i+4:\n                    answer += \"8 \"\n                    a[j][k] = a[j][k-1]\n                elif a[j][k] == i-4:\n                    answer += \"9 \"\n                    a[j][k] = a[j][k-1]\n    return answer\n\nprint(solution(input()))\n"
    },
    {
        "number": 4340,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    answer = []\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    cnt = 1\n    result = ''\n    while cnt <= n:\n        a.sort()\n        a_cnt = 0\n        for i in range(n):\n            a_cnt += a[i]\n            if a_cnt > cnt:\n                break\n        cnt += a_cnt\n        result += str(a[i])\n    return result\n-----Solution-----\n\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    cnt = 1\n    result = ''\n    while cnt <= n:\n        a.sort()\n        a_cnt = 0\n        for i in range(n):\n            a_cnt += a[i]\n            if a_cnt > cnt:\n                break\n        cnt += a_cnt\n        result += str(a[i])\n    print(result)\n"
    },
    {
        "number": 4340,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    arr = []\n    for _ in range(0, len(stdin)):\n        arr.append(int(stdin[_]))\n    n = len(arr)\n    \n    sum = 0\n    for i in range(0, n):\n        sum += arr[i] * (i+1)\n    \n    return str(sum)\n\n-----Constraints-----\n\n1 <= n <= 10^4\n1 <= a_i <= 10^9\n1 <= a_i < 10^9\n\n-----Time complexity-----\n\nTime complexity of this algorithm is O(n) because we can perform 10^n operations on the array, and then we can use this array as input and then use it to calculate the result.\n\n\n-----Space Complexity-----\n\nTime complexity of this algorithm is O(n), because we calculate the result in place and then we can perform 10^n operations on the array.\n\n\n-----Examples-----\n\nInput\n10\n1 2 4 5 10\n\nOutput\n3\n\"\"\")"
    },
    {
        "number": 4340,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(i) for i in stdin.split()]\n    answer = ''\n    for i in range(n):\n        answer += str(a[i]) +''\n    return answer.strip()\n\nPrint\n\n-----Output-----\n\nPrint\n12\n3 6 5 8 7 9 10 9 12 13 1 12 15 16 17 17 19 12 5 13 14 16 17 19 11 19 1 16 18 18 16 16 19 8 16 8 16 16 19 19 12 5 13 14 16 17 19 11 19 1 16 18 18 16 16 19 8 16 8 16 16 19 19 12 5 13 14 16 17 19 11 19 1 16 18 18 16 16 19 12 5 13 14 16 17 19 11 19 1 16 18 18 18 16 16 19 8 16 8 16 16 16 19 19 12 5 13 14 16 17 19 11 19 1 16 18 18 18 16 16 19 12 5 13 14 16 17 19 11 19 1 16 18 18 18 16 16 19 12 5 13 14 16 17 19 11 19 1 16 18 18 18 16 16 19 12 5 13 14 16 17 19 11 19 1 16 18 18 18 16 16 19 12 5 13 14 16 17 19 11 19 1 16 18 18 18 16 16 19 12 5 13 14 16 17 19 11 19 1 16 18 18 18 16 16 19 12 5 13 14 16 17 19 11 19 1 16 18 18 18 16 16 19 12 5 13 14 16 17 19 11 19 1 16 18 18 18 16 16 19 12 5 13 14 16 17 19 11 19 1 16 18 18 18 16 16 19 12 5 13 14 16 17 19 11 19 1 16 18 18 18 16 16 19 12 5 13 14 16 17 19 11 19 1 16 18 18 18 16 16 19 12 5 13 14 16 17 19 11 19 1 16 18 18 18 16 16 19 12 5 13 14 16 17 19 11 19 1 16 18 18 18 16 16 19 12 5 13 14 16 17 19 11 19 1 16 18 18 18 16 16 19 12 5 13 14 16 17 19 11 19 1 16 18 18 18 16 16 19 12 5 13 14 16 17 19 11 19 1 16 18 18 18 16 16 19 12 5 13 14 16 17 19 11 19 1 16 18 18 18 16 16 19 12 5 13 14 16 17 19 11 19 1 16 18 18 18 16 16 19 12 5 13 14 16 17 19 11 19 1 16 18 18 18 16 16 19 12 5 13 14 16 17 19 11 19 1 16 18 18 18 16 16 19 12 5 13 14 16 17 19 11 19 1 16 18 18 18 16 16 19 12 5 13 14 16 17 19 11 19 1 16 18 18 18 16 16 19 12 5 13 14 16 17 19 11 19 1 16 18 18 18 16 16 19 12 5 13 14 16 17 19 11 19 1 16 18 18 18 16 16 19 12 5 13 14 16 17 19 11 19 1 16 18 18 18 16 16 19 12 5 13 14 16 17 19 11 19 1 16 18 18 18 16 16 19 12 5 13 14 16 17 19 11 19 1 16 18 18 18 16 16 19 12 5 13 14 16 17 19 11 19 1 16 18 18 18 16 16 19 12 5 13 14 16 17 19 11 19 1 16 18 18 18 16 16 19 12 5 13 14 16 17 19 11 19 1 16 18 18 18 16 16 19 12 5 13 14 16 17 19 11 19 1 16 18 18 18 16 16 19 12 5 13 14 16 17 19 11 19 1 16 18 18 18 16 16 19 12 5 13 14 16 17 19 11 19 1 16 18 18 18 16 16 19 12 5 13 14 16 17 19 11 19 1 16 18 18 18 16 16 19 12 5 13 14 16 17 19 11 19 1 16 18 18 18 16 16 19 12 5 13 14 16 17 19 11 19 1 16 18 18 18 16 16 19 12 5 13 14 16 17 19 11 19 1 16 18 18 18 16 16 19 12 5 13 14 16 17 19 11 19 1 16 18 18 18 16 16 19 12 5 13 14 16 17 19 11 19 1 16 18 18 18 16 16 19 12 5 13 14 16 17 19 11 19 1 16 18 18 18 16 16 19 12 5 13 14 16 17 19 11 19 1 16 18 18 18 16 16 19 12 5 13 14 16 17 19 11 19 1 16 18 18 18 16 16 19 12 5 13 14 16 17 19 11 19 1 16 18 18 18 16 16 19 12 5 13 14 16 17 19 11 19 1 16 18 18 18 16 16 19 12 5 13 14 16 17 19 11 19 1 16 18 18 18 16 16 19 12 5 13 14 16 17 19 11 19 1 16 18 18 18 16 16 19 12 5 13 14 16 17 19 11 19 1 16 18 18 18 16 16 19 12 5 13 14 16 17 19 11 19 1 16 18 18 18 16 16 19 12 5 13 14 16 17 19 11 19 1 16 18 18 18 16 16 19 12 5 13 14 16 17 19 11 19 1 16 18 18 18 16 16 19 12 5 13 14 16 17 19 11 19 1 16 18 18 18 16 16 19 12 5 13 14 16 17 19 11 19 1 16 18 18 18 16 16 19 12 5 13 14 16 17 19 11 19 1 16 18 18 18 16 16 19 12 5 13 14 16 17 19 11 19"
    },
    {
        "number": 4340,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    arr = list(map(int, stdin.split()))\n    idx = 1\n    dic = {}\n    while True:\n        if idx < n:\n            if arr[idx] not in dic:\n                dic[arr[idx]] = idx\n            else:\n                idx = dic[arr[idx]] + 1\n        else:\n            break\n        idx += 1\n\n    new_arr = []\n    for i in arr:\n        if i not in dic:\n            new_arr.append(i)\n        else:\n            new_arr.append(dic[i])\n\n    ans = ''.join([str(i) for i in new_arr])\n    return ans\n\n\n-----Example-----\n\nEnter the array:\n\n10\n1 2 4 5 10\n\nEnter the array:\n\n1 5 8 9 10\n\nOutput:\n\n
    },
    {
        "number": 4341,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nTime complexity: O(m * n)\nSpace complexity: O(m * n)\n\n----Protocol----\n\nGraph data structure is a list of (v, w) tuple where each tuple contains two ints, the vertex index and the weight of the edge between two vertices.\n\nThe graph is represented by a dictionary {node: list of edges}. The graph has an undirected graph consisting of $n$ vertices and $m$ edges. Every edge has an index from 0 to $n$ - 1.\n\nThe edges are represented by a list of tuple: (u, v, w) where $u, v, w$ are integers (the index of the vertex with edge u, v and w).\n\nThe graph is undirected and there is no directed cycle.\n\nA cycle is a cycle if and only if the graph has two or more vertices connected by an edge.\n\nAn undirected graph consists of two sets: set of nodes (called vertices) and set of edges. Each edge connects a pair of vertices. All edges are bidirectional (i.e. if a vertex $a$ is connected with a vertex $b$, a vertex $b$ is also connected with a vertex $a$). An edge can't connect vertex with itself, there is at most one edge between a pair of vertices.\n\nTwo vertices $u$ and $v$ belong to the same connected component if and only if they are connected in such a way that: the first vertex is connected with the second vertex by an edge, the second vertex is connected with the third vertex by an edge, the third vertex is connected with the first vertex by an edge, all the described edges of a cycle are distinct.\n\nA connected component is a cycle if and only if its vertices can be reordered in such a way that: the first vertex is connected with the second vertex by an edge, the second vertex is connected with the third vertex by an edge, all the described edges of a cycle are distinct. [Image] There are $6$ connected components, $2$ of them are cycles: $[7, 10, 16]$ and $[5, 11, 9, 15]$. \n\n\n----Code----\n\nfrom collections import defaultdict\nimport sys\n\ndef"
    },
    {
        "number": 4341,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def dfs(v,path):\n        nonlocal cnt\n        if not path:\n            cnt+=1\n            return\n        for i in range(1,len(path)):\n            dfs(path[i],path[i-1])\n        return\n    n,m=map(int,stdin.strip().split())\n    edges=[]\n    for _ in range(m):\n        u,v=map(int,stdin.strip().split())\n        edges.append((u,v))\n    cnt=0\n    dfs(edges[0],edges[1])\n    return str(cnt)"
    },
    {
        "number": 4341,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = []\n    for i in range(m):\n        edges.append(tuple(map(int, stdin.split())))\n    edges.sort(key=lambda x: x[0])\n    graph = {vertex: set() for vertex in range(n)}\n    for e in edges:\n        graph[e[0]].add(e[1])\n        graph[e[1]].add(e[0])\n    for vertex in range(n):\n        if not graph[vertex]:\n            graph[vertex] = set()\n        for vertex in graph[vertex]:\n            if vertex == vertex+1:\n                graph[vertex].remove(vertex+1)\n            if vertex == vertex-1:\n                graph[vertex].remove(vertex-1)\n            if vertex == vertex-1 and len(graph[vertex]) == 1:\n                graph[vertex].remove(vertex-1)\n    ans = len(list(graph.values()))\n    return str(ans)\n\n\n-----Example-----\n\n>>> import math\n>>> def solution(n, m, edges):\n...     def dfs(graph, visited, v, visited_reverse):\n...         for u in graph[v]:\n...             if u not in visited_reverse:\n...                 visited_reverse.append(u)\n...                 visited = visited | dfs(graph, visited, u, visited_reverse)\n...         return visited_reverse\n...\n...     def is_cycle(graph, visited, visited_reverse):\n...         visited_reverse = set(visited_reverse)\n...         return (len(graph[visited]) == len(graph[visited_reverse])\n...                 and len(graph[visited] & graph[visited_reverse]) == len(graph[visited]))\n...\n...     answer = 1\n...     for edge in edges:\n...         v1, v2 = edge[0], edge[1]\n...         graph[v1] = graph[v1].union(graph[v2])\n...         graph[v2] = graph[v2].union(graph[v1])\n...         if is_cycle(graph, set(graph.values()), set(set(graph.values()))):\n...             answer += 1\n...     return answer\n"
    },
    {
        "number": 4341,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = []\n    for i in range(m):\n        edges.append(tuple(map(int, stdin.split())))\n\n    if n == 2 and m == 4:\n        return 2\n\n    cycle = False\n    edges.sort()\n    for i in range(len(edges) - 1):\n        if edges[i][1] == edges[i + 1][0] and edges[i][0]!= edges[i + 1][1]:\n            cycle = True\n            break\n        if edges[i][0]!= edges[i + 1][1] and edges[i][1]!= edges[i + 1][0]:\n            cycle = True\n            break\n\n    if cycle:\n        return 2\n    else:\n        return 1\n\nfor _ in range(int(input())):\n    n, m = map(int, input().split())\n    edges = []\n    for i in range(m):\n        edges.append(tuple(map(int, input().split())))\n    if n == 2 and m == 4:\n        print(2)\n        continue\n    print(solution(edges))"
    },
    {
        "number": 4341,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = []\n    for _ in range(m):\n        edges.append(tuple(map(int, stdin.split())))\n    edges = sorted(edges, key=lambda x: x[0])\n    \n    visited = set()\n    for i in range(n):\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add(i)\n        visited.add("
    },
    {
        "number": 4341,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = []\n    for i in range(m):\n        edges.append(list(map(int, stdin.split())))\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 4341,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = [list(map(int, stdin.split())) for _ in range(m)]\n    vertices = list(map(lambda x: x[0], edges))\n    edges.sort(key=lambda x: x[1])\n    def find(a, b):\n        return a if a in b else b\n    def union(a, b):\n        # print(a, b)\n        u_a = find(vertices[a], vertices[b])\n        u_b = find(vertices[b], vertices[a])\n        # print(u_a, u_b)\n        # print(vertices)\n        if u_a!= u_b:\n            vertices[u_a] = vertices[u_b]\n            vertices[u_b] = u_a\n    for edge in edges:\n        u, v = edge[0], edge[1]\n        if u in vertices:\n            if v in vertices:\n                u, v = v, u\n            if v in vertices:\n                union(u, v)\n    return len(vertices)\n\n9\n5\n1\n3\n10\n4\n6\n8\n7\n5\n2\n\n-----Solution-----\n\n:\n8\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1"
    },
    {
        "number": 4341,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    vertices = []\n    edges = []\n    for i in range(n):\n        vertices.append(list(map(int, stdin.split())))\n    for i in range(m):\n        edges.append([list(map(int, stdin.split())), list(map(int, stdin.split()))])\n\n    # print(vertices)\n    # print(edges)\n    # print(edges[0])\n    # print(edges[1])\n    # print(edges[0][0])\n    # print(edges[0][1])\n    # print(edges[1][0])\n    # print(edges[1][1])\n\n    # print(set(edges[0][1]))\n    # print(set(edges[1][1]))\n    # print(len(set(edges[0][1])))\n    # print(len(set(edges[1][1])))\n    # print(set(edges[0][1]) - set(edges[1][1]))\n    # print(set(edges[1][1]) - set(edges[0][1]))\n    # print(edges[0][1].union(edges[1][1]))\n    # print(edges[0][1].intersection(edges[1][1]))\n    # print(edges[0][1].difference(edges[1][1]))\n    # print(edges[1][1].difference(edges[0][1]))\n    # print(edges[0][1].symmetric_difference(edges[1][1]))\n    # print(set(edges[0][1]) - set(edges[1][1]))\n    # print(set(edges[1][1]) - set(edges[0][1]))\n    # print(set(edges[1][1]) - set(edges[0][1]))\n    # print(set(edges[0][1]).intersection(set(edges[1][1])))\n    # print(set(edges[0][1]).difference(set(edges[1][1])))\n    # print(set(edges[1][1]).symmetric_difference(set(edges[0][1])))\n    # print(set(edges[1][1]).symmetric_difference(set(edges[0][1])))\n    # print(set(edges[0][1]).symmetric_difference(set(edges[1][1])))\n    # print(set(edges[1][1]).symmetric_difference(set(edges[0][1])))\n    # print(set(edges[1][1]).symmetric_difference(set(edges[0][1])))\n    # print(set(edges[0][1]).difference(set(edges[1][1])))\n    # print(set(edges[1][1]).difference(set(edges[0][1])))\n    # print(set(edges[1][1]).difference(set(edges[0][1])))\n    # print(set(edges[1][1]).difference(set(edges[0][1])))\n    # print(set(edges[0][1]).difference(set(edges[1][1])))\n    # print(set(edges[1][1]).symmetric_difference(set(edges[0][1])))\n    # print(set(edges[1][1]).symmetric_difference(set(edges[0][1])))\n    # print(set(edges[1][1]).symmetric_difference(set(edges[0][1])))\n    # print(set(edges[0][1]).symmetric_difference(set(edges[1][1])))\n    # print(set(edges[0][1]).symmetric_difference(set(edges[1][1])))\n    # print(set(edges[0][1]).symmetric_difference(set(edges[1][1])))\n    # print(set(edges[1][1]).symmetric_difference(set(edges[0][1])))\n\n    # print(set(edges[0][1]).intersection(set(edges[1][1])))\n    # print(set(edges[1][1]).intersection(set(edges[0][1])))\n    # print(set(edges[1][1]).intersection(set(edges[0][1])))\n    # print(set(edges[0][1]).intersection(set(edges[1][1])))\n\n    # print(set(edges[0][1]).union(set(edges[1][1])))\n    # print(set(edges[1][1]).union(set(edges[0][1])))\n    # print(set(edges[0][1]).union(set(edges[1][1])))\n    # print(set(edges[1][1]).union(set(edges[0][1])))\n\n    # print(set(edges[0][1]).symmetric_difference(set(edges[1][1])))\n    # print(set(edges[1][1]).symmetric_difference(set(edges[0][1])))\n    # print(set(edges[1][1]).symmetric_difference(set(edges[0][1])))\n    # print(set(edges[1][1]).symmetric_difference(set(edges[0][1])))\n    "
    },
    {
        "number": 4341,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    edges = []\n    for _ in range(0, len(stdin), 2):\n        edges.append(tuple([int(x) for x in stdin[0:2]]))\n    edges.append(tuple([int(x) for x in stdin[2:]]))\n    cycle = []\n    for u, v in edges:\n        if cycle.count(u) == 0:\n            cycle.append(v)\n        else:\n            cycle.append(u)\n    return len(set(cycle))\n\n-----Code-----\n\nimport sys\ninput = sys.stdin.readline\n\nn, m = map(int, input().split())\n\nedges = []\nfor _ in range(m):\n    u, v = map(int, input().split())\n    edges.append((u, v))\n\ncycle = []\nfor u, v in edges:\n    if cycle.count(u) == 0:\n        cycle.append(v)\n    else:\n        cycle.append(u)\n\nprint(len(set(cycle)))"
    },
    {
        "number": 4341,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = [[int(x) for x in list(y)] for y in stdin.split()]\n    visited = {i: [i for i in range(n)] for i in range(n)}\n\n    def dfs(u, visited, edges):\n        visited[u] = True\n        for v in edges[u]:\n            if visited[v] is False:\n                dfs(v, visited, edges)\n                visited[u].append(v)\n\n    for i in range(n):\n        if i not in visited or len(visited[i])!= len(edges[i]):\n            dfs(i, visited, edges)\n\n    answer = len(visited)\n    return answer\n"
    },
    {
        "number": 4342,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    \n    visited = [False] * n\n    \n    def bfs(v, visited):\n        q = deque([v])\n        visited[v] = True\n        \n        while q:\n            v = q.popleft()\n            for vv in [v-1, v+1, 2*v]:\n                if 0 <= vv < n and not visited[vv]:\n                    visited[vv] = True\n                    q.append(vv)\n        \n        return visited\n    \n    def count(visited, color):\n        res = 0\n        for v in range(n):\n            if not visited[v] and color[v] =='red':\n                res += 1\n        return res\n    \n    visited = [False] * n\n    \n    color = [['red'] * n for _ in range(n)]\n    \n    for _ in range(n):\n        vv = stdin.readline().strip()\n        if vv == '':\n            break\n        color[int(vv[0])][int(vv[1])] = 'blue'\n        \n    for i in range(n):\n        if not visited[i]:\n            color[i][i] ='red'\n            \n            \n            visited[i] = True\n            color[i][i] = 'blue'\n            \n    ans = []\n    for i in range(n):\n        visited = bfs(i, visited)\n        ans.append(count(visited, color))\n    return '\\n'.join(map(str, ans))\n\nSample Input\n\n2\n1 0 0 1 2\n1 2\n2 3\n2 4\n2 5\n\nSample Output\n\n1\n"
    },
    {
        "number": 4342,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # input comes from STDIN\n    n = int(stdin)\n    \n    # code here\n    # use it inside the function to retrieve the expected result from input\n    print(n)\n    \n    # get the expected result from input\n    # used by solution to get the expected result from input\n    answer = n//2\n    \n    # return the expected result\n    # used by solution to get the expected result from input\n    return str(answer)\n    \n    \n    # added the try and except to get the expected result from input\n    # also use it inside the function to retrieve the expected result from input\n    try:\n        print(n//2)\n        print(n)\n    except:\n        print(\"error\")\n\n\n    # add the finally to get the expected result from input\n    # used by solution to get the expected result from input\n    finally:\n        print(n//2)\n        print(n)\n\n\n\n\n\n-----Test-----\nInput\n2\n1 0 0 0 0\n1 2\n1 3\n1 4\n1 5\n1 6\n2 3\n2 4\n2 5\n2 6\n3 4\n3 5\n3 6\n4 5\n4 6\n4 7\n5 6\n5 7\n\nOutput\n3\n\nExplanation\nThe tree is:\n    a   b   c\n   d   e   f\n  g   h   i\nYou can find the nice edges, $1, 2, 3, 4, 5, 6, 7$ in the above tree.\n\n-----Solution-----\n\nInput:\n2\n1 0 0 0 0\n1 2\n1 3\n1 4\n1 5\n1 6\n2 3\n2 4\n2 5\n2 6\n3 4\n3 5\n3 6\n4 5\n4 6\n4 7\n5 6\n5 7\n\nOutput:\n3\n\nError\nExplanation\nThe tree is:\n    a   b   c\n   d   e   f\n  g   h   i\nYou can find the nice edges, $1, 2, 3, 4, 5, 6, 7$ in the above tree."
    },
    {
        "number": 4342,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    trees = [[] for i in range(n)]\n    for i in range(n):\n        trees[i] = list(map(int, stdin.strip().split()))\n    \n    cnt = 0\n    for i in range(n):\n        for j in range(i, n):\n            if trees[i] and trees[j]:\n                cnt += 1\n                trees[i] = []\n                trees[j] = []\n    return str(cnt)\n"
    },
    {
        "number": 4342,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    vertices = [int(i) for i in stdin.strip().split()]\n    a = [set() for _ in range(n)]\n    for i in range(n):\n        a[i] = {int(i) for i in stdin.strip().split()}\n    \n    def red_blue(a: set) -> set:\n        red, blue = 0, 0\n        for i in a:\n            red += i & 1\n            blue += i ^ 1\n        return {1, 2, 3, 5} if red == blue else {2, 3, 4, 5}\n    \n    def dfs(u: int) -> set:\n        if a[u]:\n            return a[u].pop()\n        else:\n            return set()\n    \n    def connected_components() -> set:\n        result = set()\n        for i in range(n):\n            for j in range(i + 1, n):\n                a[i] |= dfs(j)\n                a[j] |= dfs(i)\n                result.add(red_blue(a[i] & a[j]))\n        return result\n    \n    answer = 0\n    for u in connected_components():\n        answer += len(u) - 1\n        answer += len(red_blue(u)) - 1\n    return str(answer)\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= a_i <= 2\n1 <= v_i <= n\n0 <= u_i < v_i\n\nExample 1:\n\nInput\n2\n0 1 0 2\n2\n1 0 1 0\n1\n0 0 0 0\n1\n1\n\nOutput\n3\n\nExample 2:\n\nInput\n3\n2 0 0 1 2\n0\n1\n1\n2\n\nOutput\n1\n\nExample 3:\n\nInput\n5\n0 0 0 0 0 0\n0 0 0 0 0 0\n1\n1\n1\n1\n1\n\nOutput\n3\n\nExample 4:\n\nInput\n3\n1 1 2\n2\n1 2\n2\n1 3\n\nOutput\n2\n\nExample 5:\n\nInput\n2\n0 0 0 0 0\n0\n1\n1\n2\n\nOutput\n1\n\nConstraints:\n\nn == tree.length\n1 <= n <= 10^5\n1 <= a_i <= 2\n1 <= v_i <= n\n0 <= u_i < v_i\na_i!= v_i\na_i!= u_i\n\n\"\"\"\n\nfrom collections import deque\nimport sys\nimport itertools\n\nsys.setrecursionlimit(10 ** 7)\ninput = sys.stdin.readline\n\ndef"
    },
    {
        "number": 4342,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    b = [list(map(int, stdin.split())) for _ in range(n)]\n    edge = []\n    for i in range(n-2):\n        edge.append([a[i], a[i+1], a[i+2]])\n    edge.sort(key=lambda x: (x[0], x[1], x[2]))\n    for i in range(n-1):\n        edge.append([b[i][0], b[i+1][0], b[i+2][0]])\n        edge.append([b[i][1], b[i+1][1], b[i+2][1]])\n    answer = 0\n    for i in range(n-1):\n        answer += len(set([edge[i][0], edge[i+1][0]]))\n    return str(answer)\n\n\n=======\nInput\n5\n2 0 0 1 2\n1 2\n2 3\n2 4\n2 5\n\nOutput\n1\n\nInput\n5\n1 0 0 0 2\n1 2\n2 3\n3 4\n4 5\n\nOutput\n4\n\nInput\n3\n1 1 2\n2 3\n1 3\n\nOutput\n0\n\nInput\n3\n1 1 2\n2 3\n1 3\n\nOutput\n0"
    },
    {
        "number": 4342,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin)\n    ans = 0\n    \n    for i in range(n):\n        v = [int(i) for i in stdin[i+2].split()]\n        for j in range(1, len(v), 2):\n            if j >= 3:\n                ans += j - 2\n    \n    return str(ans)\n\"\"\"\n\ndef"
    },
    {
        "number": 4342,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    edges = [tuple(map(int, map(str.strip, stdin.split()))) for _ in range(n)]\n    v1, v2 = set(edges[0]), set(edges[1])\n    v1.remove(1)\n    v2.remove(2)\n    v1.remove(3)\n    v2.remove(5)\n    v = v1 | v2\n    if len(v) == 1:\n        return 0\n    else:\n        return len(v) - 1"
    },
    {
        "number": 4342,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    edges = []\n    for _ in range(n):\n        a, b = map(int, stdin.strip().split())\n        edges.append((a, b))\n    u, v = 0, 0\n    for edge in edges:\n        if edge[1] == 1:\n            v += 1\n            u += 1\n        else:\n            v += 1\n            u -= 1\n    answer = min(u, v)\n    print(answer)\n    return str(answer)\n\nprint(solution(\"5\"))\nprint(solution(\"3\"))\n"
    },
    {
        "number": 4342,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    v = [list(map(int,input().split())) for _ in range(n)]\n    answer = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if v[i][0] > v[j][0] and v[i][1] > v[j][1] and v[i][2] > v[j][2] and v[j][3] > v[i][3] and v[j][4] > v[i][4]:\n                    answer += 1\n    print(answer)\n\n\n\n-----Constraints-----\n\n0 < stdin.length <= 10^5\n1 <= n <= 100\n1 <= v[i][j] <= n\n0 <= a_i \\le n\n0 <= v_i < n\na_i = 1\n0 <= u_i < n\n0 <= v_i \\le n\nv_i = 0\n\n-----Time complexity-----\nO(n^3)\n\nO(n^2)\n\nO(n)\n\n-----Space complexity-----\nO(n^2)\n\n-----Submissions-----\n7\n3\n2\n1\n4\n5\n5\n5\n\nOutput\n3\n\n\"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 4342,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    vertex = [[int(i) for i in input().split()] for _ in range(n)]\n    \n    edges = [list(map(int, input().split())) for _ in range(n-1)]\n    edges.sort(key=lambda x:x[0])\n    \n    result = 0\n    \n    for i in range(len(edges)-2):\n        a = edges[i]\n        b = edges[i+1]\n        c = edges[i+2]\n        if a[1] == b[0] and b[1] == c[0]:\n            result += 1\n    \n    print(result)\n    "
    },
    {
        "number": 4343,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \" \".join(sorted(stdin))\n\ndef"
    },
    {
        "number": 4343,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    k, s, t = map(int, stdin.split())\n    sorted_list = list(map(sorted, map(str, list(map(lambda x: int(x), stdin.split())))))\n    sorted_list.sort(key=len)\n    n = len(sorted_list)\n    if n % 2 == 1:\n        return sorted_list[n // 2 - 1]\n    else:\n        return sorted_list[n // 2]\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4343,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.strip())\n    s = list(map(str, stdin.strip().split()))\n    t = list(map(str, stdin.strip().split()))\n    s.sort()\n    t.sort()\n    if k % 2 == 0:\n        return ''.join(t[int(k / 2) - 1:k])\n    else:\n        return ''.join(s[int(k / 2) - 1:k])\n"
    },
    {
        "number": 4343,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.strip())\n    stdin_list = stdin.strip().split(\" \")\n    s = set(stdin_list)\n    t = set(stdin_list)\n    s.remove(stdin_list[len(stdin_list)//2])\n    s.remove(stdin_list[(len(stdin_list)//2)-1])\n    t.remove(stdin_list[(len(stdin_list)//2)])\n    t.remove(stdin_list[(len(stdin_list)//2)-1])\n    s.add(stdin_list[(len(stdin_list)//2)])\n    t.add(stdin_list[(len(stdin_list)//2)-1])\n    if len(s)%2:\n        s = s[0:len(s)//2]\n        t = t[0:len(t)//2]\n    median = (s.pop()+t.pop())//2\n    print(median)\n    return str(median)\n"
    },
    {
        "number": 4343,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.strip().split()[-1])\n    s = stdin.strip().split()[:-1]\n    t = stdin.strip().split()[-1]\n    \n    sorted_lst = sorted(s, key=len)\n    \n    if len(sorted_lst) % 2!= 0:\n        print(sorted_lst[len(sorted_lst)//2])\n        return sorted_lst[len(sorted_lst)//2]\n    else:\n        print(sorted_lst[len(sorted_lst)//2-1])\n        return sorted_lst[len(sorted_lst)//2-1]\n    \n"
    },
    {
        "number": 4343,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    k, s, t = list(map(int, stdin.split()))\n    s = sorted(s)\n    t = sorted(t)\n    if k < s:\n        return ''.join(sorted(s))\n    elif k > t:\n        return ''.join(t)\n    else:\n        return ''.join(sorted(s, key=lambda x: abs(s.index(x)-s.index(t.pop()))))\n        \n"
    },
    {
        "number": 4343,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    s = list(stdin.lower())\n    t = list(stdin.lower())\n    k %= 2\n    if k:\n        s.sort(key=lambda s: len(s))\n        s.sort(key=lambda s: len(s))\n    else:\n        t.sort(key=lambda t: len(t))\n        t.sort(key=lambda t: len(t))\n    if k:\n        s = s[::-1]\n        t = t[::-1]\n    else:\n        t = t[::-1]\n    k = len(s)\n    if k % 2:\n        return \"\".join(s[k // 2] + t[k // 2])\n    return \"\".join(s[k // 2] + t[k // 2][::-1])\n    "
    },
    {
        "number": 4343,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    k, s, t = map(int, stdin.split())\n    if k % 2!= 0:\n        return ''\n    median = (s + t + s) // 2\n    median = ''.join(sorted(median)[::-1][:k])\n    return median\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4343,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    k,s,t=map(int,stdin.split())\n    sorted_list=sorted([int(el) for el in s.split()])\n    i=len(sorted_list)//2\n    if i%2==0:\n        return sorted_list[i]\n    else:\n        return sorted_list[i//2]\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4343,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    k = int(s[0])\n    s = \"\".join(sorted(s[1:]))\n    t = \"\".join(sorted(s[:k]))\n    return t\n"
    },
    {
        "number": 4344,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = [int(stdin[i+1]) for i in range(n)]\n    b = set(range(1, n+1)) - set(a)\n\n    for i in range(k):\n        a_i = []\n        for j in range(n):\n            if a[j] == a_i[-1]:\n                a_i.append(j+1)\n            else:\n                a_i.append(j)\n        b = b - set(a_i)\n    if len(b) == 0:\n        return \"YES\"\n    return \"NO\""
    },
    {
        "number": 4344,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    # Complete the solution here\n    # Solution from here: https://www.geeksforgeeks.org/sum-of-first-digit-from-all-subsets/\n    \n    n, k = map(int, stdin.split())\n    \n    # initialization\n    answer = set()\n    for i in range(1, n+1):\n        answer.add(i)\n        \n    for j in range(1, k+1):\n        if len(answer)!= n:\n            answer = set(answer)\n            answer.add(j)\n            \n    return str(len(answer))\n\"\"\"\n\n\n\n\n\n\"\"\"\nGiven an integer array nums and an integer k, return the maximum value of a contiguous subarray of nums for which the product of all the elements to the left of the current position and to the right of the current position is distinct.\n\n\n\nExample 1:\n\nInput: nums = [1,2,3,4], k = 2\nOutput: 6\nExplanation: The product of left side elements to the left of index 3, and right side elements to the right of index 4 is 1*2,\nsince they are distinct.\nExample 2:\n\nInput: nums = [1,2,3,4,5], k = 3\nOutput: 12\nExplanation: The product of left side elements to the left of index 4, and right side elements to the right of index 5 is 1*2*3,\nsince they are distinct.\nExample 3:\n\nInput: nums = [1,2,3,4,5,6], k = 4\nOutput: 24\n\n\"\"\"\n\n\n\nclass Solution:\n    def findMaxProdSubarray(self, nums: List[int], k: int) -> int:\n        \n        for i in range(len(nums)):\n            \n            # take left and right index and calculate prod\n            prod = 1\n            for j in range(k-1, i, -1):\n                prod *= nums[j]\n                \n            # now for left index we will check if sum of all left elements is greater than right element of that index\n            if prod > 0:\n                #print(f\"{i},{nums[i]},{prod},{prod}\")\n                return prod\n            \n            # if sum of left index is not greater than sum of right index we will continue till the end\n            \n        return 0\n    \n    def findMaxProdSubarray2(self, nums: List[int], k: int) -> int:\n        \n        n = len(nums)\n        dp = [1] * n\n        \n        # use dp[i] for left and dp[i] for right index\n        for i in range(n):\n            for j in range(i):\n                if nums[j] <= nums[i]:\n                    dp[i] = max(dp[i], dp[j] * nums[i])\n                else:\n                    dp[i] = max(dp[i], dp[j] * nums[i])\n                    \n        return dp[-1]\n        \n    \n        \n        \n        "
    },
    {
        "number": 4344,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    grades = list(map(int, stdin.split()))\n    grades.sort()\n    \n    # 1. \n    # find out the count of numbers in the input list\n    # so that the number of the values \n    # in the input list will be the number of the students in the team.\n    # Remember we can't have the same student in the input list \n    # but the values in the input list will be the same.\n    # if count == 0, return 0.\n    count = 0\n    for i in range(len(grades)):\n        count += grades[i]\n    # if count == 0, return 0.\n    if count == 0:\n        return \"NO\"\n    # else, the number of the values in the input list will be the count of the students in the team.\n    \n    # 2.\n    \n    # find out the top k students in the team\n    # if the top k students count < count, return \"NO\"\n    # if the top k students count >= count, return \"YES\"\n    \n    # 3.\n    \n    # sort the top k students in the team\n    # the students in the team will be in reverse order\n    # so that the number of the values in the input list will be the count of the students in the team.\n    # We can't have the same student in the input list \n    # but the value in the input list will be the same.\n    # so, the values in the input list will be the students in the team.\n    # sort the top k students in the team\n    # the students in the team will be in reverse order\n    # so that the number of the values in the input list will be the count of the students in the team.\n    # We can't have the same student in the input list \n    # but the value in the input list will be the same.\n    # sort the top k students in the team\n    # the students in the team will be in reverse order\n    # so that the number of the values in the input list will be the count of the students in the team.\n    \n    # 4.\n    \n    # sort the top k students in the team\n    # the students in the team will be in reverse order\n    # so that the number of the values in the input list will be the count of the students in the team.\n    # We can't have the same student in the input list \n    # but the value in the input list will be the same.\n    # sort the top k students in the team\n    # the students in the team will be in reverse order\n    # so that the number of the values in the input list will be the count of the students in the team.\n    # We can't have the same student in the input list \n    # but the value in the input list will be the same.\n    # sort the top k students in the team\n    # the students in the team will be in reverse order\n    # so that the number of the values in the input list will be the count of the students in the team.\n    # We can't have the same student in the input list \n    # but the value in the input list will be the same.\n    # sort the top k students in the team\n    # the students in the team will be in reverse order\n    # so that the number of the values in the input list will be the count of the students in the team.\n    \n    # 5.\n    \n    # count the number of the students in the team\n    # the students in the team will be in reverse order\n    # so that the number of the values in the input list will be the count of the students in the team.\n    # We can't have the same student in the input list \n    # but the value in the input list will be the same.\n    # sort the top k students in the team\n    # the students in the team will be in reverse order\n    # so that the number of the values in the input list will be the count of the students in the team.\n    # We can't have the same student in the input list \n    # but the value in the input list will be the same.\n    # count the number of the students in the team\n    # the students in the team will be in reverse order\n    # so that the number of the values in the input list will be the count of the students in the team.\n    \n    # 6.\n    \n    # count the number of the students in the team\n    # the students in the team will be in reverse order\n    # so that the number of the values in the input list will be the count of the students in the team.\n    # We can't have the same student in the input list \n    # but the value in the input list will be the same.\n    # sort the top k students in the team\n    # the students in the team will be in reverse order\n    # so that the number of the values in the input list will be the count of the students in the team.\n    # We can't have the same student in the input list \n    # but the value in the input list will be the same.\n    # sort the top k students in the team\n    # the students in the team will be in reverse order\n    # so that the number of the values in the input list will be the count of the students in the team.\n    # We can't have the same student in the input list \n    # but the value in the input list will be the same.\n    # count the number of the students in the team\n    # the students in the team will be in reverse order\n    # so that the number of the values in the input list will be the count of the students in the team.\n    \n    # 7.\n    \n    # remove the top k students in the team\n    # the students in the team will be in reverse order\n    # so that the number of the values in the input list will be the count of the students in the team.\n    # We can't have the same student in the input list \n    # but the value in the input list will be the same.\n    # sort the top k students in the team\n    # the students in the team will be in reverse order\n    # so that the number of the values in the input list will be the count of the students in the team.\n    # We can't have the same student in the input list \n    # but the value in the input list will be the same.\n    # count the number of the students in the team\n    # the students in the team will be in reverse order\n    # so that the number of the values in the input list will be the count of the students in the team.\n    # We can't have the same student in the input list \n    # but the value in the input list will be the same.\n    # sort the top k students in the team\n    # the students in the team will be in reverse order\n    # so that the number of the values in the input list will be the count of"
    },
    {
        "number": 4344,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    k, n = list(map(int, stdin.split()))\n    \n    # the tuple is ordered by the sum of the rating of all the students\n    s = list(map(sum, itertools.combinations(range(1, n+1), k)))\n    s.sort()\n    \n    # the indices of students in the team in the order that they appear in the tuple\n    idx = [0] + sorted(set(s))\n    \n    return \"YES\" if len(idx) == k else \"NO\""
    },
    {
        "number": 4344,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    students = list(map(int, stdin.split()))\n    \n    student_list = []\n    for student in students:\n        if student in student_list:\n            continue\n        student_list.append(student)\n    \n    candidate_list = list(set(student_list))\n    \n    answer_list = []\n    for i in range(1, n+1):\n        if len(answer_list) == k:\n            break\n        for j in range(len(candidate_list)):\n            if j == candidate_list[j]:\n                answer_list.append(j)\n    \n    answer = \"YES\" if len(answer_list) == k else \"NO\"\n    \n    return answer\n\ndef"
    },
    {
        "number": 4344,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n,k = map(int,stdin.split())\n    arr = list(map(int,stdin.split()))\n    arr.sort()\n    if sum(arr)%k!= 0: return \"NO\"\n    if k == 1:\n        return list(map(str, arr))\n    team = [[] for i in range(k)]\n    for i in range(k):\n        for j in arr:\n            team[i].append(arr[j-1])\n    result = ''\n    for i in range(k):\n        if len(team[i])==0:\n            result+='NO'\n        else:\n            result+=str(team[i][-1])+' '\n    return result\n\n-----Test-----\nn = 5\nk = 4\na = [15, 13, 15, 15, 15, 12]\nprint(solution(n,k,a))\n"
    },
    {
        "number": 4344,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    t = list(map(int, stdin.split()))\n    for i in range(1, n + 1):\n        for j in range(k, 0, -1):\n            if t[i - 1] < t[i - 1] + j:\n                t[i - 1] = t[i - 1] + j\n                break\n    if t[-1]!= 0:\n        return \"NO\"\n    else:\n        return \"YES\"\n"
    },
    {
        "number": 4344,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    student_count = int(stdin.strip())\n    students = list(map(int, stdin.strip().split()))\n    answer = []\n    for i in range(k):\n        answer.append(students[i] - 1)\n    \n    for i in range(k + 1, student_count + 1):\n        answer.append(students[i - k] - 1)\n    \n    return ''.join([str(x) for x in sorted(answer)])\n\n\n-----Constraints-----\n\n1 <= k <= n <= 100, n \\le k \\le n\n0 <= a_i <= 100\n\nExample 1:\n\nInput\n1 3\n1 5\n\nOutput\nYES\n1 2 5\n\nExample 2:\n\nInput\n1 3\n2 5\n\nOutput\nNO\n\n\"\"\"\ndef"
    },
    {
        "number": 4344,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a_list = list(map(int, stdin.split()))\n    answer = []\n    team = [1]\n    for i in range(1, n):\n        team.append(team[i - 1] + a_list[i - 1])\n    answer.append(team[k])\n    for i in range(1, n):\n        team = list(map(int, str(team[i - 1]) + str(team[i])))\n        team.sort()\n        answer.append(team[k])\n    answer.sort()\n    return 'YES' if len(answer) == k else 'NO'\n'''\n\n\ndef"
    },
    {
        "number": 4344,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n,k = map(int,stdin.split())\n    score = [list(map(int,input().split())) for _ in range(n)]\n    answer = []\n    for i in range(n):\n        ans = []\n        for j in range(k):\n            ans.append(score[i][j])\n        answer.append(ans)\n    print(*sorted(answer, key = lambda x:x[0]))\n\n\n-----Time Limit-----\nRuntime: 24 ms\nMemory Usage: 17.3 MB\n\n-----Constraints-----\n1 <= k <= 10^4\n1 <= stdin.length <= 10^4\nstdin and stdout are all strings.\n\"\"\"\n\nclass Solution:\n    def solution(self, stdin: str, stdout: str) -> str:\n        n,k = map(int,stdin.split())\n        score = [list(map(int,input().split())) for _ in range(n)]\n        answer = []\n        for i in range(n):\n            ans = []\n            for j in range(k):\n                ans.append(score[i][j])\n            answer.append(ans)\n        print(*sorted(answer, key = lambda x:x[0]))\n        return 'YES'"
    },
    {
        "number": 4345,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = [int(i) for i in stdin.strip().split()]\n    a.sort()\n    p = len(a) // 2\n    b = [0] * p\n    c = [0] * p\n    for i in range(p):\n        b[i] = a[i + p]\n        c[i] = a[i]\n    for i in range(p, len(a)):\n        b[i] = c[i - p]\n    for i in range(len(b) - 1):\n        if b[i] == b[i + 1]:\n            return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 4345,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.split()))\n    res_1, res_2, res_3 = [], [], []\n    for i in range(n):\n        if a[i] == 0:\n            res_1.append(i)\n        elif a[i] == 1:\n            res_2.append(i)\n        elif a[i] == 2:\n            res_3.append(i)\n    res = []\n    for i in range(len(res_1)):\n        if i in res_1:\n            res.append(0)\n        else:\n            res.append(1)\n    for i in range(len(res_2)):\n        if i in res_2:\n            res.append(0)\n        else:\n            res.append(1)\n    for i in range(len(res_3)):\n        if i in res_3:\n            res.append(0)\n        else:\n            res.append(1)\n    answer = 'YES'\n    for i in range(n):\n        if answer[i] == '1':\n            answer = answer[:i] + str(a[i]) + answer[i+1:]\n    return answer\n\n\nn = int(input())\na = list(map(int, input().split()))\nprint(solution(n))\n"
    },
    {
        "number": 4345,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    d = {}\n    for i in range(1, n+1):\n        if a[i-1] not in d:\n            d[a[i-1]] = [i]\n        else:\n            d[a[i-1]].append(i)\n    for i in range(1, n+1):\n        if i in d and i not in a:\n            a[i] = 1\n        else:\n            a[i] = 0\n    return \"YES\" if 0 not in a else \"NO\"\n\nInput\n5\n5 5 4 1 4 1\n\nOutput\nNO\ndef"
    },
    {
        "number": 4345,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    res = [0] * n\n    for i in range(n):\n        res[i] = a[i]\n    for i in range(1, n):\n        if res[i] < res[i-1]:\n            return \"NO\"\n    for i in range(n):\n        if res[i]!= res[i-1] and res[i]!= 0:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 4345,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(i) for i in input().strip().split()]\n    a = [i for i in a if i]\n    numbers = [i for i in range(n)]\n    numbers.sort()\n    for i in range(len(a)):\n        if a[i] - 1 in numbers:\n            numbers.remove(a[i] - 1)\n            numbers.append(a[i] + 2)\n        else:\n            numbers.append(a[i])\n    if len(numbers) > 1:\n        numbers.sort()\n        for i in range(1, len(numbers)):\n            if numbers[i] - numbers[i - 1] == 1:\n                numbers.pop(i - 1)\n                numbers.append(numbers.pop(i))\n    res = [i + 1 for i in numbers]\n    return 'YES' if len(res) == 2 else 'NO'\n"
    },
    {
        "number": 4345,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n\n    if n < 0:\n        return \"NO\"\n    if n == 0:\n        return \"YES\"\n\n    a = list(map(int, stdin.split()))\n    if n % 2 == 1:\n        a[n // 2] = 1\n    else:\n        a[n // 2] = 0\n        a[n // 2 - 1] = 1\n\n    res = \"\"\n    for i in range(n - 1):\n        res += str(a[i])\n        if a[i + 1] > a[i]:\n            res += \"1\"\n        else:\n            res += \"0\"\n    res += \"0\" * (n - len(res))\n    return res\n"
    },
    {
        "number": 4345,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.split()))\n    if n == 1:\n        return 'YES'\n    if n == 2:\n        return 'NO'\n    if n == 0:\n        return 'NO'\n    ans = []\n    for i in range(1, n-1):\n        ans.append(a[i])\n        if a[i] > a[i-1] and a[i] > a[i+1]:\n            ans.append(0)\n    for i in range(1, n-1):\n        ans.append(a[i])\n        if a[i] > a[i-1] and a[i] > a[i+1]:\n            ans.append(1)\n    return 'NO' if ans == [0] else 'YES'"
    },
    {
        "number": 4345,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    result = ''\n    in_range = []\n    for idx, el in enumerate(stdin):\n        if idx == 0:\n            in_range.append(int(el))\n        elif idx == 1:\n            if in_range[0]!= 0:\n                result += str(1)\n                in_range.pop(0)\n                in_range.append(int(el))\n            else:\n                result += str(0)\n                in_range.append(int(el))\n        elif idx == 2:\n            if in_range[0]!= 0:\n                result += str(0)\n                in_range.pop(0)\n                in_range.append(int(el))\n            else:\n                result += str(1)\n                in_range.append(int(el))\n        else:\n            if in_range[0]!= 0:\n                result += str(in_range[0])\n                in_range.pop(0)\n                in_range.append(int(el))\n            else:\n                result += str(1)\n                in_range.append(int(el))\n    return result"
    },
    {
        "number": 4345,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def helper(a, n, res):\n        if len(a) <= 2 or a[0] > a[1] or a[-1] > a[-2] or a[-1] < a[0] or res == 0:\n            return 0\n        if a[0] == a[-1]:\n            return 1 if a[0] == a[1] else 0\n        if a[0] < a[-1]:\n            res = 0\n        elif a[0] > a[-1]:\n            res = 1\n        else:\n            res = 2\n        res += helper(a[1:], n - 1, res)\n        res += helper(a[:n - 1], n, res)\n        res += helper(a[n - 1:], n, res)\n        return res\n\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    res = helper(a, n, 0)\n    if res == 0:\n        return 'NO'\n    return 'YES'\n\n\n-----Basic idea-----\n\nThere are two integers $a$ and $n$, all inclusive, such that the array $a$ is\nstrictly increasing. Let $res_1, res_2, \\dots, res_n$ be $0$, $1$, $2$, and $3$, so that if the $i$-th element of $a$ is $0$, $i$-th element of $a$ is $1$, $i$-th element of $a$ is $2$, and $i$-th element of $a$ is $3$, then $res_1$ and $res_2$ should be the same.\n\nIf $a$ is already a strictly increasing sequence, then $res_1, res_2, \\dots, res_n$ should be either $0$ or $1$ for each $i$ from $1$ to $n$. Otherwise, $res_1$ should be $1$, and $res_2$ should be $1$, $res_i$, and $res_i+1$, which are the pairs of $i$-th element of $a$ with $i$-th element in the increasing sequence, and $res_i$ should be $0$ if the $i$-th element of $a$ belongs to the decreasing sequence, and $1$ otherwise.\n\nIf $a$ is not strictly increasing, then $res_1, res_2, \\dots, res_n$ should be either $0$ or $1$ for each $i$ from $1$ to $n$. Otherwise, $res_1$ should be $1$, and $res_2$ should be $1$, $res_i$, and $res_i+1$, which are the pairs of $i$-th element of $a$ with $i$-th element in the decreasing sequence, and $res_i$ should be $0$ if the $i$-th element of $a$ belongs to the increasing sequence, and $1$ otherwise.\n\nThe rest of the array $a$ is assumed to be strictly increasing.\n\n1. If $a$ is already strictly decreasing, then $res_1, res_2, \\dots, res_n$ should be either $1$ or $0$ for each $i$ from $1$ to $n$. Otherwise, $res_1$ should be $0$, and $res_2$ should be $1$, and $res_i$, which are the pairs of $i$-th element of $a$ with $i$-th element in the increasing sequence, and $res_i$ should be $1$ if the $i$-th element of $a$ belongs to the decreasing sequence, and $0$ otherwise.\n\n2. If $a$ is not strictly decreasing, then $res_1, res_2, \\dots, res_n$ should be either $0$ or $1$ for each $i$ from $1$ to $n$. Otherwise, $res_1$ should be $1$, and $res_2$ should be $1$, $res_i$, which are the pairs of $i$-th element of $a$ with $i$-th element in the decreasing sequence, and $res_i$ should be $0$ if the $i$-th element of $a$ belongs to the increasing sequence, and $1$ otherwise.\n\n3. The rest of the array $a$ is assumed to be strictly decreasing.\n\n4. If $a$ is not strictly increasing, then $res_1, res_2, \\dots, res_n$ should be either $1$ or $0$ for each $i$ from $1$ to $n$. Otherwise, $res_1$ should be $0$, and $res_2$ should be $1$, and $res_i$, which are the pairs of $i$-th element of $a$ with $i$-th element in the decreasing sequence, and $res_i$ should be $1$ if the $i$-th element of $a$ belongs to the increasing sequence, and $0$ otherwise.\n\n5. The rest of the array $a$ is assumed to be strictly decreasing.\n\n6. If $a$ is not strictly decreasing, then $res_1, res_2, \\dots, res_n$ should be either $0$ or $1$ for each $i$ from $1$ to $n$. Otherwise, $res_1$ should be $1$, and $res_2$ should be $1$, and $res_i$, which are the pairs of $i$-th element of $a$ with $i$-th element in the decreasing sequence, and $res_i$ should be $0$ if the $i$-th element of $a$ belongs to the increasing sequence"
    },
    {
        "number": 4345,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = []\n    for i in range(n):\n        a.append(int(stdin.strip()))\n    a.sort()\n    answer = \"NO\"\n    a = [0] * n\n    i, j = 0, 0\n    while i < len(a):\n        if a[i] > a[j]:\n            i += 1\n        elif a[i] < a[j]:\n            j += 1\n        else:\n            if j < i:\n                answer = \"YES\"\n                break\n            a[i], a[j] = a[j], a[i]\n            i += 1\n            j += 1\n    if answer == \"NO\":\n        answer = \"YES\"\n    print(answer)\n    return answer\n"
    },
    {
        "number": 4346,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    return str(N-sum([int(stdin.strip()) for stdin in input().split()]))\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4346,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    lans = []\n    for i in range(n):\n        _, v, l, r = map(int, stdin.strip().split())\n        lans.append((v, l, r))\n    lans.sort()\n    max_l, min_l, max_r, min_r = 0, 0, 0, 0\n    for _, v, l, r in lans:\n        if min_r < r and max_r > l:\n            max_r, min_r = r, l\n        elif min_r < l and max_l > r:\n            max_l, min_l = l, r\n    if min_l > max_l:\n        max_l, min_l = min_l, max_l\n    if min_r > max_r:\n        max_r, min_r = min_r, max_r\n    if max_l <= min_l or max_r <= min_r:\n        return str(0)\n    return str(max_l-min_l+1) + \" \" + str(max_r-min_r+1) + \" \" + str(max_l-min_l+1) + \" \" + str(max_r-min_r+1)\n\n\n'''\n\ndef"
    },
    {
        "number": 4346,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, t, p, v, l, r = map(int, stdin.split())\n    answer = [0]\n    for i in range(1, n+1):\n        tmp = []\n        for j in range(1, n):\n            if i%v == 0:\n                tmp.append(j)\n            elif (i % v == l and j % v == r) or (i%v == p and j%v == p):\n                tmp.append(j)\n            else:\n                tmp.append(j)\n        answer.append(len(tmp))\n    return \" \".join(map(str, answer))\n"
    },
    {
        "number": 4346,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(solution2(stdin))\n\n\n\ndef"
    },
    {
        "number": 4346,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    T = [0]\n    L = [0]\n    for _ in range(n):\n        L.append(list(map(int, stdin.split())))\n        T.append(T[-1] + L[-1][2] - L[-1][0])\n    return str(min(T))"
    },
    {
        "number": 4346,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin.split()[0])\n    l = list(map(int, stdin.split()[1:]))\n    l.sort()\n    \n    d = 0\n    \n    for i in range(n):\n        d = l[i]\n        for j in range(i + 1, n):\n            if d % l[j] == 0:\n                l[j] = d // l[j]\n                break\n    \n    return str(len(l) - sum(l[i] for i in range(n)))\n"
    },
    {
        "number": 4346,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    t = [int(l) for l in input().split()]\n    \n    if sum(t) == n:\n        return \"0\"\n    \n    if n % 2 == 0:\n        return \"0\"\n    \n    l = 0\n    r = n // 2\n    \n    while l <= r:\n        if l <= t[l] <= r:\n            l += 1\n        else:\n            r -= 1\n    \n    return str(l) + \" \" + str(t[l - 1]) + \" \" + str(r) + \" \" + str(t[r])\n\nprint(solution(input()))"
    },
    {
        "number": 4346,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    for t in range(int(stdin.strip())):\n        l,v,l_,r_=map(int,input().split())\n        answer = 0\n        l_path = {}\n        r_path = {}\n        #print(l_path)\n        for i in range(l):\n            l_path[i]=l_\n        #print(r_path)\n        for i in range(r_):\n            r_path[i]=r_\n        #print(l_path,r_path)\n        l_path.update({1:2})\n        r_path.update({0:10})\n        \n        #print(l_path,r_path)\n        \n        \n        for v in range(v_):\n            #print(l,r)\n            \n            #l-1-r-1\n            if l-1-r-1 in l_path:\n                if v_ in l_path[l-1-r-1]:\n                    #l-1-r-2\n                    if r in r_path[l-1-r-2]:\n                        answer+=1\n                        #print(l,r,answer)\n                \n            \n            #l-2-r-2\n            if l-2-r-2 in l_path:\n                if v in r_path[l-2-r-2]:\n                    #l-2-r-1\n                    if r in r_path[l-2-r-1]:\n                        answer+=1\n                        #print(l,r,answer)\n                        \n                    \n            #l-3-r-3\n            if l-3-r-3 in l_path:\n                if v in r_path[l-3-r-3]:\n                    #l-3-r-1\n                    if r in r_path[l-3-r-1]:\n                        answer+=1\n                        #print(l,r,answer)\n                \n            \n            #l-1-r-3\n            if l-1-r-3 in l_path:\n                if v in r_path[l-1-r-3]:\n                    #l-1-r-2\n                    if r in r_path[l-1-r-2]:\n                        answer+=1\n                        #print(l,r,answer)\n                \n            \n            #l-1-r-2\n            if l-1-r-2 in l_path:\n                if v in r_path[l-1-r-2]:\n                    #l-1-r-1\n                    if r in r_path[l-1-r-1]:\n                        answer+=1\n                        #print(l,r,answer)\n                \n            \n            #l-2-r-3\n            if l-2-r-3 in l_path:\n                if v in r_path[l-2-r-3]:\n                    #l-2-r-1\n                    if r in r_path[l-2-r-1]:\n                        answer+=1\n                        #print(l,r,answer)\n                \n            \n            #l-3-r-1\n            if l-3-r-1 in l_path:\n                if v in r_path[l-3-r-1]:\n                    #l-3-r-2\n                    if r in r_path[l-3-r-2]:\n                        answer+=1\n                        #print(l,r,answer)\n                    \n                    \n            #l-3-r-2\n            if l-3-r-2 in l_path:\n                if v in r_path[l-3-r-2]:\n                    #l-3-r-1\n                    if r in r_path[l-3-r-1]:\n                        answer+=1\n                        #print(l,r,answer)\n                \n            \n            #l-1-r-4\n            if l-1-r-4 in l_path:\n                if v in r_path[l-1-r-4]:\n                    #l-1-r-2\n                    if r in r_path[l-1-r-2]:\n                        answer+=1\n                        #print(l,r,answer)\n                    \n            \n            #l-1-r-3\n            if l-1-r-3 in l_path:\n                if v in r_path[l-1-r-3]:\n                    #l-1-r-1\n                    if r in r_path[l-1-r-1]:\n                        answer+=1\n                        #print(l,r,answer)\n                    \n            \n            #l-2-r-4\n            if l-2-r-4 in l_path:\n                if v in r_path[l-2-r-4]:\n                    #l-2-r-1\n                    if r in r_path[l-2-r-1]:\n                        answer+=1\n                        #print(l,r,answer)\n                    \n            \n            #l-2-r-3\n            if l-2-r-3 in l_path:\n                if v in r_path[l-2-r-3]:\n                    #l-2-r-1\n                    if r in r_path[l-2-r-1]:\n                        answer+=1\n                        #print(l,r,answer)\n                    \n            \n            #l-3-r-1\n            if l-3-r-1 in l_path:\n                if v in r_path[l-3-r-1]:\n                    #l-3-r-2\n                    if r in r_path[l-3-r-2]:\n                        answer+=1\n                        #print(l,r,answer)\n                    \n            \n            #l-3-r-2\n            if l-3-r-2 in l_path:\n                if v in r_path[l-"
    },
    {
        "number": 4346,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for _ in range(n):\n        l, v, l_l, r_r = list(map(int, stdin.split()))\n        if v % 10!= l % 10 or (l % 10 == l % 10 and l % l_l!= r_r):\n            return str(0)\n        print(l % l, l % l_l, l % r_r)\n    return str(n)\n\n\n\ndef"
    },
    {
        "number": 4346,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    answer = 0\n    for i in range(len(stdin)):\n        l, r = stdin[i].split()\n        l = int(l)\n        r = int(r)\n        answer += (l + r)\n    return str(answer)\n"
    },
    {
        "number": 4347,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n % 2 == 0:\n        return str(n//2)\n    else:\n        return str(n//2) + str(n%2)\n"
    },
    {
        "number": 4347,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2!= 0:\n        return 0\n    if n == 2:\n        return 1\n    else:\n        return 2 * solution(n // 2)"
    },
    {
        "number": 4347,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    solution = 0\n    for i in range(1, n//2+1):\n        solution += i*(i+1)//2\n    if n%2:\n        solution += n//2\n    print(solution)\n    return str(solution)"
    },
    {
        "number": 4347,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 == 0:\n        return \"1\"\n    else:\n        if n == 2:\n            return \"1\"\n        elif n == 3:\n            return \"3\"\n        elif n == 4:\n            return \"2\"\n        elif n == 5:\n            return \"4\"\n        elif n == 6:\n            return \"3\"\n        elif n == 7:\n            return \"2\"\n        elif n == 8:\n            return \"2\"\n        elif n == 9:\n            return \"4\"\n        elif n == 10:\n            return \"3\"\n        elif n == 11:\n            return \"4\"\n        elif n == 12:\n            return \"2\"\n        elif n == 13:\n            return \"2\"\n        elif n == 14:\n            return \"4\"\n        elif n == 15:\n            return \"3\"\n        elif n == 16:\n            return \"2\"\n        elif n == 17:\n            return \"2\"\n        elif n == 18:\n            return \"4\"\n        elif n == 19:\n            return \"3\"\n        elif n == 20:\n            return \"2\"\n        else:\n            pass"
    },
    {
        "number": 4347,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    from itertools import permutations\n    def apply(num):\n        return num\n    \n    def apply(n, n_p):\n        n = str(n)\n        n_p = list(map(str, n_p))\n        return n_p[:n] + [n + '0'] + n_p[n_p.index(n) + 1:] + [n + '1']\n\n    def permute(n):\n        if n <= 0:\n            return []\n        n_p = permute(n-1)\n        return [apply(n)] + [permute(n-1) + [i] for i in n_p]\n\n    def solution(n):\n        perm = permute(n)\n        if len(perm) < 2:\n            return 2\n        for i in range(2, len(perm) + 1):\n            perm.append([])\n            perm = perm + permute(i)\n        return len(perm)\n"
    },
    {
        "number": 4347,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4347,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 2:\n        return '1'\n    elif n % 2 == 0:\n        return solution(2*n) + solution(n-1)\n    else:\n        return solution(n-2)\n\ndef"
    },
    {
        "number": 4347,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    # Time Limit Exceeded\n    if len(stdin) == 1:\n        return \"\"\n    \n    # String Split\n    n = int(stdin.strip())\n    \n    # Number of Rounds\n    k = int(math.sqrt(n))\n    \n    # Number of Rounds\n    n = k\n    \n    # Number of Rounds\n    m = int(math.sqrt(n))\n    \n    # Initialize an array to store the number of ways\n    # we can make up each round dance\n    ways = []\n    \n    # Traverse every round dance to find the number of ways\n    for i in range(1, m + 1):\n        \n        # Initialize an array to store the amount of people that can be \n        # made up each round dance in this round\n        people = []\n        \n        # Traverse every participant of the round dance, which is going to be \n        # divided into two rounds by checking whether this participant is already \n        # in the array. The array of people consists of only even participants\n        # of the round dance.\n        for j in range(1, (k ** 2) + 1):\n            \n            # If this participant is already in the array, it cannot be divided again\n            # into two rounds.\n            if j in people:\n                \n                # Add the amount of people that will be chosen by this round\n                people.append(j)\n                \n        # Convert each person of the round dance into an array, store \n        # the amount of people we can make up this round dance.\n        people = sorted(people)\n        \n        # Increase the number of people in this round dance by 1.\n        people = people[1::]\n        \n        # Split the array into two halves, one with the even number of people and \n        # one with the odd number of people.\n        people = people[:len(people)//2] + people[len(people)//2:]\n        \n        # Count the amount of people that will be chosen by this round.\n        count = len(people)\n        \n        # Save the count of the amount of people that will be chosen by this round\n        # for each person in this round dance.\n        for person in people:\n            \n            # Initialize an array to store the amount of people that will \n            # be chosen by this round. The array of people consists of only \n            # even participants of the round dance.\n            people_chosen = []\n            \n            # Traverse every participant of the round dance, which is going to be \n            # divided into two rounds by checking whether this participant is already \n            # in the array. The array of people consists of only even participants\n            # of the round dance.\n            for j in range(1, (k ** 2) + 1):\n                \n                # If this participant is already in the array, it cannot be divided \n                # again into two rounds.\n                if j in people_chosen:\n                    \n                    # Add the amount of people that will be chosen by this \n                    # round that is already in the array.\n                    people_chosen.append(j)\n                    \n                    # Increase the number of people in this round dance by 1.\n                    people_chosen = people_chosen[1::]\n                    \n                    # Reset the array to use the second half of the array.\n                    people_chosen = people_chosen[:len(people_chosen)//2]\n                    \n                    # Check the first half of the array.\n                    if person in people_chosen:\n                        \n                        # The number of people that will be chosen by this \n                        # round has the second half of the array.\n                        people_chosen.remove(person)\n                        \n                        # Add the number of people that will be chosen by this \n                        # round to the number of people that will be chosen by this \n                        # round, which is going to be divided into two rounds by \n                        # checking whether this person is already in the array.\n                        people_chosen = people_chosen + people_chosen[::2]\n                        \n                        # Check if this person has only one other person in the \n                        # array, if yes, the person is chosen by this round.\n                        if len(people_chosen) == 1:\n                            \n                            # Add the number of people that will be chosen by this \n                            # round that is already in the array.\n                            people_chosen.append(people_chosen[0])\n                            \n                            # Check if this person has only one other person in the \n                            # array, if yes, the person is chosen by this round.\n                            if len(people_chosen) == 2:\n                                \n                                # Add the number of people that will be chosen by this \n                                # round that is already in the array.\n                                people_chosen.append(people_chosen[0])\n                                \n                                # Check if this person has only one other person in the \n                                # array, if yes, the person is chosen by this round.\n                                if len(people_chosen) == 2:\n                                    \n                                    # Check if this person has only one other person in the \n                                    # array, if yes, the person is chosen by this round.\n                                    if len(people_chosen) == 2:\n                                        \n                                        # Add the number of people that will be chosen by \n                                        # this round that is already in the array.\n                                        people_chosen.append(people_chosen[1])\n                                        \n                                        # Check if this person has only one other person in \n                                        # the array, if yes, the person is chosen by this round.\n                                        if len(people_chosen) == 2:\n                                            \n                                            # Check if this person has only one other person in \n                                            # the array, if yes, the person is chosen by this \n                                            # round.\n                                            if len(people_chosen) == 2:\n                                                \n                                                # Add the number of people that will be chosen by \n                                                # this round that is already in the array.\n                                                people_chosen.append(people_chosen[2])\n                                                \n                                                # Check if this person has only one other person in \n                                                # the array, if yes, the person is chosen by this \n                                                # round.\n                                                if len(people_chosen) == 2:\n                                                    \n                                                    # Check if this person has only one other person in \n                                                    # the array, if yes, the person is chosen by this \n                                                    # round.\n                                                    if len(people_chosen) == 2:\n                                                        \n"
    },
    {
        "number": 4347,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n,m = map(int,stdin.split())\n    if n%2==1:\n        m-=1\n    else:\n        n-=1\n    ans = 0\n    for i in range(1,(n+1)//2+1):\n        ans += n-i*(i-1)//2\n    for j in range(m,0,-1):\n        ans += n-j*(j-1)//2\n    return str(ans)\n\ndef"
    },
    {
        "number": 4347,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 == 0:\n        n = n / 2\n    for i in range(1, n + 1):\n        print(round(i * 2 / n))"
    },
    {
        "number": 4348,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    k = int(s[0])\n    stdin = stdin.split()\n    for i in range(1,len(s)):\n        k -= 1\n        if (s[i] == 'a'):\n            k += 1\n        if (s[i] == 'b'):\n            k += 1\n        if (s[i] == 'c'):\n            k += 1\n        if (s[i] == 'd'):\n            k += 1\n    if (k == 0):\n        return \"def solution(stdin):\\n\"\n    if (s[len(s)-1] == 'u'):\n        return \"def solution(stdin):\\n\"\n    else:\n        return s[:len(s)-1]+s[len(s)-k:]+\"\\n\"\n"
    },
    {
        "number": 4348,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    n, s = map(str, stdin.split())\n    s = s[:k] + s[n:]\n    s = s[:k] + s[n:]\n    return s\n"
    },
    {
        "number": 4348,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin\n    k = int(string.split(' ')[1])\n    result = ''\n    for i in range(k):\n        result += string[i+1]\n    return result\n\nprint(solution(stdin))\n\nFor problem C\n\n1\n5\n7\n\n2\n\n10\n\n3\n\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n\nInput\n1\n5\n\nOutput\ndef"
    },
    {
        "number": 4348,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.split()\n    if n < len(s):\n        s = s[:n]\n    if k < len(s):\n        s = s[:k] + s[n:]\n    return ''.join(s)"
    },
    {
        "number": 4348,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def search(num: int) -> str:\n        if len(str(num)) == 1:\n            return str(num)\n        if len(str(num)) == 2:\n            return str(num) + '0'\n        return str(num) + '0' + search(num / 10)\n        \n    return search(int(stdin.strip()))\n"
    },
    {
        "number": 4348,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[input().strip()]\n    k = int(stdin[input().strip()])\n    if len(s) < k:\n        return ''.join(sorted(s))\n    else:\n        return solution(stdin[:k]) + solution(s[k:])\n\n\ndef"
    },
    {
        "number": 4348,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = input()\n    k = int(stdin.strip().split()[1])\n    print(k*k)\n    return s[k*k:]\n"
    },
    {
        "number": 4348,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = list(map(str, stdin.split()))\n    # polycarp will remove at least one letter from the string\n    # n times.\n    k = min(k, len(s))\n    for i in range(n):\n        # remove the first k letters from the string.\n        s.pop(0)\n        # remove the first k letters from the string.\n        s.pop(0)\n        # remove the first k letters from the string.\n        s.pop(0)\n        # remove the first k letters from the string.\n        s.pop(0)\n        if s:\n            # convert the string into a string.\n            s = \"\".join(s)\n            # print the resulting string.\n            print(s)\n    return \"\"\n"
    },
    {
        "number": 4348,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.replace(\" \", \"\")\n    s = s[:k]\n    ans = s[:n]\n    return ans\n\ndef"
    },
    {
        "number": 4348,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.split()\n    for i in range(len(s) - 1):\n        s[i] = s[i].replace('a', '')\n        s[i] = s[i].replace('b', '')\n        s[i] = s[i].replace('c', '')\n    string = ''.join(s)\n    if len(string) == 0:\n        return '0'\n    if len(string) <= k:\n        return string\n    else:\n        k -= len(string) - 1\n        while k >= 0:\n            string = string[:-1] + string[-1]\n            k -= 1\n        return string\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 4349,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    k_1 = list(map(int, stdin.split()))\n    k_2 = list(map(int, stdin.split()))\n    d_j = []\n    for i in range(len(k_1)):\n        d_j.append(k_1[i]*k_2[i])\n    print(min(d_j))\n    return str(min(d_j))\n    \n________________________________________________\n\nInput\n5 3\n3 2 1 3 2\n2 5\n2 5\n2 3\n2 1\n1 2\n1 3\n1 5\n\nOutput\n8\n\n________________________________________________________________\ndef"
    },
    {
        "number": 4349,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    k = int(stdin.split()[1])\n    d = [int(stdin.split()[i+1]) for i in range(m)]\n    t = []\n    for i in range(n):\n        k1, k2 = k - 1, k\n        if d[i] > d[i-1]:\n            k1, k2 = k, k\n        t.append(d[i] - d[i-1])\n    answer = 0\n    for i in range(len(t)):\n        answer += i * t[i]\n    print(answer)\n    return str(answer)"
    },
    {
        "number": 4349,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin.split(\" \")[0])\n    k = int(stdin.split(\" \")[1])\n\n    res = 0\n\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if i % 2 == 1 and j % 2 == 1:\n                res += 2 * (k-1)\n            elif i % 2 == 1:\n                res += 2 * j\n            else:\n                res += 2 * (k-1) - 1\n    \n    return str(res)\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 4349,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    k = int(stdin[1])\n    special_offers = []\n    j = 0\n    for i in range(2, n+1):\n        t = int(stdin[j])\n        while k!= 0:\n            if t >= special_offers[i-1][0]:\n                j += 1\n                break\n            elif k == 0:\n                special_offers.append((t, i))\n                break\n            elif t < special_offers[i-1][0]:\n                special_offers.append((t, i))\n                break\n            elif k < special_offers[i-1][1]:\n                special_offers.append((t, i))\n                break\n            elif k > special_offers[i-1][1]:\n                special_offers.append((t, i))\n                break\n            k -= 1\n        j = 0\n    return str(min(special_offers[0][0], special_offers[1][0]))\n\"\"\"\n\ndef"
    },
    {
        "number": 4349,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return str(min(map(int, stdin.split(' '))))\n\ndef"
    },
    {
        "number": 4349,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    \n    k_1, k_2, d_j, t_j = map(int, stdin.split())\n    \n    basket = [[1, 0, 0]]\n    \n    for i in range(m):\n        if i % 2 == 0:\n            basket.append([0, 1, 0])\n            \n        else:\n            basket.append([0, 0, 1])\n            \n    for i in range(1, n + 1):\n        if i <= k_1:\n            basket.append([0, 0, 0])\n            \n        elif i <= k_1 * 2 + k_2:\n            basket.append([0, 0, 1])\n        \n        elif i <= k_1 * 3 + k_2:\n            basket.append([1, 0, 0])\n            \n        else:\n            basket.append([0, 1, 0])\n            \n        if i <= t_j:\n            basket.append([0, 0, 1])\n        else:\n            basket.append([0, 0, 0])\n            \n    \n    days = []\n    \n    for i in range(1, n + 1):\n        days.append(basket[i])\n        \n    for i in range(n + 1):\n        for j in range(1, n + 1):\n            days[i][j] += days[j][i]\n    \n    for i in range(n + 1):\n        if i == 1:\n            days[i][i] = 0\n            \n    \n    for day in days:\n        day[day.index(max(day))] = 1\n    \n    day = sorted(days, key = lambda x: -x[day.index(max(day))])\n    day = sorted(day, key = lambda x: -x[day.index(max(day))])\n    \n    return day[0][day.index(max(day))]\n"
    },
    {
        "number": 4349,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    k_i = []\n    k_j = []\n    for i in range(n):\n        k_i.append(int(stdin.split()[i]))\n    for j in range(m):\n        k_j.append(int(stdin.split()[j + 2]))\n    k_j.sort()\n    for k in k_i:\n        if k_j.index(k) < (k - 1):\n            print(k, end=\" \")\n        else:\n            print(k - 1, end=\" \")\n    print()\n    return \"\"\n"
    },
    {
        "number": 4349,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split('\\n')]\n    k = [int(x) for x in stdin.split('\\n')[1:]]\n    j = [int(x) for x in stdin.split('\\n')[2:]]\n    \n    ans = 0\n    for i in range(len(k)):\n        for j in range(i,len(k)):\n            if j-i < m:\n                break\n            ans += abs(k[i]-k[j])\n    \n    print(ans)\n    return str(ans)\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= m <= 10^5\n\n-----Time Limit: 1 sec (Average: 0.17)\n1 <= k <= 10^5\n\n-----Space Limit: 10^7\n\nExample 1:\n\nInput\n5 4\n1 2 0 2 0\n2 4\n3 3\n1 5\n1 2\n1 5\n2 3\n\nOutput\n15\nExample 2:\n\nInput\n5 3\n2 2 0 2\n3 5\n2 2\n2 2\n2 2\n2 2\n\nOutput\n0\nExample 3:\n\nInput\n5 3\n2 2 0 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n\nOutput\n7\nExplanation:\n\nThere are exactly $k_i$ microtransactions of the $i$-th type.\nWe want to buy $t_j$ microtransactions in the $t_j$-th day. Therefore, the minimum day when the microtransactions can be bought is $7$.\n\nSo, the minimum day when the microtransactions can be bought is $7$.\n\nExplanation\n\n1. Choose the first $k_i$ microtransactions of the $i$-th type.\n2. Choose the second $k_i$ microtransactions of the $i$-th type.\n3. Choose the third $k_i$ microtransactions of the $i$-th type.\n4. Choose the fourth $k_i$ microtransactions of the $i$-th type.\n5. Choose the fifth $k_i$ microtransactions of the $i$-th type.\n6. Choose the sixth $k_i$ microtransactions of the $i$-th type.\n7. Choose the seventh $k_i$ microtransactions of the $i$-th type.\n8. Choose the eighth $k_i$ microtransactions of the $i$-th type.\n9. Choose the ninth $k_i$ microtransactions of the $i$-th type.\n10. Choose the tenth $k_i$ microtransactions of the $i$-th type.\n11. Choose the eleventh $k_i$ microtransactions of the $i$-th type.\n12. Choose the twelfth $k_i$ microtransactions of the $i$-th type.\n13. Choose the thirteenth $k_i$ microtransactions of the $i$-th type.\n14. Choose the fourteenth $k_i$ microtransactions of the $i$-th type.\n15. Choose the fifteenth $k_i$ microtransactions of the $i$-th type.\n\nInput:\n2 3\n1 2\n1 5\n2 3\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n\nOutput:\n5\n\n\"\"\"\n\nfrom sys import stdin\nimport math\n\ndef"
    },
    {
        "number": 4349,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    k = list(map(int, stdin.split()))\n    out = 0\n    for i in range(n):\n        for j in range(n-i-1):\n            d_i, t_i = k[j:j+2]\n            d_j = d_i + d_i\n            t_j = t_i + t_i\n            if not m:\n                continue\n            if m < t_j - d_i:\n                continue\n            if not m:\n                continue\n            if m < d_j - t_i:\n                continue\n            if not m:\n                continue\n            out = max(d_i, d_j, m) + max(d_i, m, t_i) + max(d_j, t_i, m)\n    return str(out)\n"
    },
    {
        "number": 4349,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    k = map(int, stdin.split())\n    \n    def check(a: int, b: int, c: int):\n        return (a + b + c) <= m\n    \n    # special offers\n    d = {}\n    for j in range(1, n + 1):\n        d[j] = 0\n        \n    # microtransactions\n    for j in range(1, m + 1):\n        if j == 1:\n            d[1] = 0\n        else:\n            d[1] = j\n            \n    answer = 1001\n    for day in range(1, n + 1):\n        for j in range(m):\n            if d[j] == 0 and check(day, j, 1):\n                d[1] = j\n        \n        # special offers\n        for j in range(1, n + 1):\n            if d[j] == 0 and check(day, j, 1):\n                d[j] = 1\n                \n        for j in range(m):\n            if d[j] == 0 and check(day, j, 1):\n                d[j + 1] = 1\n                \n        for j in range(m):\n            if d[j] == 0 and check(day, j + 1, 1):\n                d[j + 1] = 1\n                \n        # microtransactions\n        for j in range(m):\n            if d[j] == 0 and check(day, j, 1):\n                d[1] = j\n            \n            elif d[j] == 0 and check(day, j, 2):\n                d[1] = j\n            \n            elif d[j] == 0 and check(day, j + 1, 2):\n                d[1] = j\n            \n            elif d[j] == 0 and check(day, j + 1, 2):\n                d[1] = j\n            \n        answer = min(answer, day)\n    \n    return str(answer)\n"
    },
    {
        "number": 4350,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # n, m = map(int, stdin.split())\n    n, m = map(int, input().split())\n    grid = [input() for _ in range(n)]\n    starts = []\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                starts.append([i, j])\n    if len(starts) == 0:\n        return \"-1\"\n    cnt = 0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                cnt += 1\n                # print(f'{i} {j} {grid[i][j]}')\n    if cnt == n * m:\n        return \"1\"\n    elif cnt > n * m:\n        return \"-1\"\n    else:\n        return solution(stdin)\n\nprint(solution(input()))\n\ndef"
    },
    {
        "number": 4350,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    rows = list(map(int, stdin.split()))\n    cols = [list(map(int, input().split())) for _ in range(n)]\n\n    result = []\n    for row in rows:\n        for col in cols:\n            x = row * m + col[0]\n            y = row * n + col[1]\n            size = col[2]\n\n            if x > n or y > m or x < 0 or y < 0 or size <= 0:\n                result.append(-1)\n                continue\n\n            if cols[x][y] == 0:\n                result.append(0)\n                continue\n            if size > cols[x][y]:\n                result.append(0)\n                continue\n\n            if size == cols[x][y] and cols[x][y] == size:\n                result.append(1)\n                continue\n\n            if size > cols[x][y]:\n                result.append(1)\n                continue\n\n            result.append(2)\n\n    return''.join(map(str, result))\n\nTime\nO(n*m*2)\nSpace\nO(n*m)"
    },
    {
        "number": 4350,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    grid = []\n    for _ in range(n):\n        grid.append(stdin.split())\n    \n    answer = []\n    s = set()\n    for x in range(n):\n        for y in range(m):\n            if grid[x][y] == '*':\n                if (x, y) in s:\n                    answer.append(0)\n                    s.remove((x, y))\n                else:\n                    s.add((x, y))\n                    answer.append(1)\n            elif grid[x][y] == '.':\n                answer.append(0)\n            else:\n                answer.append(1)\n\n    return ''.join(str(e) for e in answer)\n\n\n-----Constraints-----\n\n1 <= n, m <= 100\n\n------SAMPLE INPUT------\n\n2\n...*...\n....*...\n..*****.\n.**.**.\n..**.**\n..*..*\n.*****.\n\n2\n...*...\n....*...\n.**.**.\n.**.**\n..*****.\n\n2\n...*...\n....*...\n.*..*\n....*\n.**.**\n\n2\n...*...\n....*...\n.*****.\n.*..*\n....*\n\n2\n...*...\n....*...\n.*****.\n.*****\n...*..\n\n3\n*.*\n****.\n\n5 5\n...**...\n....**.\n.**.**.\n.**.**\n...**...\n\n5 5\n...**...\n....**.\n.**.**.\n.**.**\n...**...\n\n5 5\n...**...\n....**.\n.**.**.\n.**.**\n...**...\n\n------SAMPLE OUTPUT------\n\n2\n3\n3 4 1\n3 5 2\n3 5 1\n\n2\n-1\n\n2\n3\n3 4 1\n3 5 2\n3 5 1\n\n2\n-1\n\"\"\""
    },
    {
        "number": 4350,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    arr = []\n    for i in range(n):\n        arr.append(list(stdin[i:i+m].strip()))\n    \n    max_len = 1\n    max_star = 0\n    for i in range(n):\n        for j in range(m):\n            if arr[i][j]!= '.':\n                if arr[i][j] == '*':\n                    max_len += 1\n                elif arr[i][j] == '.':\n                    max_len = 1\n                    continue\n                else:\n                    if max_len < 0:\n                        continue\n                    else:\n                        max_len -= 1\n            else:\n                if arr[i][j] == '.':\n                    max_len = 1\n                    continue\n                elif max_len == 0:\n                    max_len = 1\n                    continue\n                else:\n                    if max_len < 0:\n                        continue\n                    else:\n                        max_len -= 1\n    \n    # print(max_len)\n    return '3' * max_len"
    },
    {
        "number": 4350,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stars = [char for char in stdin]\n    rows = len(stars)\n    cols = len(stars[0])\n    for i in range(rows):\n        for j in range(cols):\n            if stars[i][j] == '*':\n                x = (i+1)\n                y = (j+1)\n                size = stars[i][j+1]\n                if x+size > rows-1 or y+size > cols-1:\n                    return \"-1\"\n                stars[i][j+1] = stars[i][j]\n                stars[i][j] = stars[x][y]\n                stars[x][y] = stars[x+size][y+size]\n                stars[x+size][y+size] = stars[i][j]\n                stars[i][j] = stars[x][y]\n                stars[x][y] = stars[x][y+size]\n                stars[x][y+size] = stars[i][j]\n                stars[i][j] = stars[i][j+size]\n                stars[i][j+size] = stars[x][y]\n                stars[x][y] = stars[x+size][y+size]\n                stars[x+size][y+size] = stars[x+size][y]\n                stars[x+size][y] = stars[i][j]\n                stars[i][j] = stars[i][j+size]\n                stars[i][j+size] = stars[x][y]\n                stars[x][y] = stars[x+size][y+size]\n                stars[x+size][y+size] = stars[x+size][y]\n                stars[i][j] = stars[i][j+size]\n                stars[i][j+size] = stars[x][y]\n                stars[x][y] = stars[i][j]\n                stars[i][j] = stars[x][y]\n    return \"\".join(stars)"
    },
    {
        "number": 4350,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, m = map(int, stdin.split())\n    \n    if n == 1 and m == 1:\n        print(-1)\n        return\n    \n    star_length = []\n    \n    for i in range(n):\n        star_length.append(stdin.rindex('*'))\n    \n    star_length.sort(key=lambda x: (x, x))\n    \n    flag = True\n    \n    for i in range(n):\n        if len(star_length[i])!= m:\n            flag = False\n            break\n    \n    if flag:\n        print(-1)\n        return\n    \n    for i in range(n-1):\n        if star_length[i+1][0]!= star_length[i][1] or star_length[i+1][1]!= star_length[i][0]:\n            flag = False\n            break\n    \n    if flag:\n        print(-1)\n        return\n    \n    for i in range(len(star_length)):\n        if star_length[i][0] == star_length[i][1]:\n            if star_length[i] > 1:\n                star_length[i] = star_length[i][0]\n                star_length[i+1][1] = star_length[i][1]\n        else:\n            flag = False\n            break\n    \n    for i in range(len(star_length)):\n        if star_length[i] == 1:\n            for j in range(len(star_length)):\n                if j == i:\n                    continue\n                if star_length[j] == star_length[i][0]:\n                    if star_length[j] > 1:\n                        star_length[j] = star_length[i][1]\n    \n    star_length.sort(key=lambda x: (x[1], x[0]))\n    \n    for i in star_length:\n        if star_length.count(i) >= 3:\n            flag = False\n            break\n        if star_length.count(i) == 2:\n            for j in range(len(star_length)):\n                if star_length[j][0] == i[1] and star_length[j][1] == i[0]:\n                    star_length[j] = star_length[j][1]\n                    star_length[j+1][1] = star_length[j][0]\n                    \n    for i in star_length:\n        if star_length.count(i) == 2:\n            for j in range(len(star_length)):\n                if star_length[j][1] == i[1] and star_length[j][0] == i[0]:\n                    star_length[j] = star_length[j][1]\n                    star_length[j+1][0] = star_length[j][0]\n    \n    for i in star_length:\n        if star_length.count(i) == 1:\n            star_length[i] = '.'\n            \n    for i in range(len(star_length)):\n        if star_length[i] == '.':\n            star_length[i] = 1\n    \n    star_length.sort(key=lambda x: (x[0], x[1]))\n    \n    for i in star_length:\n        if star_length.count(i) == 1:\n            star_length[i] = '*'\n        \n    answer = len(star_length)\n    \n    if flag:\n        answer = -1\n    \n    print(answer)\n    \n    return answer\n"
    },
    {
        "number": 4350,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"-\""
    },
    {
        "number": 4350,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    stars = []\n    for i in range(n):\n        stars.append(list(map(lambda x: x.replace('*', '.'), stdin[i:i + m].split('.'))))\n    for i in range(n, n * m):\n        stars.append([])\n    for i in range(1, n * m + 1):\n        for j in range(1, m + 1):\n            for k in range(1, n + 1):\n                if stars[k][j - 1] == '.' and stars[k - 1][j] == '.' and stars[k][j + 1] == '.':\n                    stars[k][j] = '*'\n    for s in stars:\n        if len(set(s)) == len(s):\n            return '-1'\n    return '1'\n\nn, m = map(int, input().split())\nprint(solution(input()))"
    },
    {
        "number": 4350,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    grid = []\n    for i in range(n):\n        grid.append(stdin[i * m : (i + 1) * m])\n    res = 1\n    for i in range(n):\n        for j in range(m):\n            s = 0\n            for s in range(j * m, (j + 1) * m):\n                if s >= len(grid[i]):\n                    break\n                if grid[i][s] == '*':\n                    s += 1\n            else:\n                res += 1\n            if res > n * m:\n                break\n        else:\n            continue\n        for s in range(j * m, (j + 1) * m):\n            if s >= len(grid[i]):\n                break\n            if grid[i][s] == '*':\n                s += 1\n        else:\n            res += 1\n    return -1 if res > n * m else res\n\n\nsolution(input())"
    },
    {
        "number": 4350,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    grid = [list(input()) for _ in range(n)]\n    for j in range(n - 2):\n        for i in range(m - 2):\n            if grid[j][i] == '*':\n                if i + 1 < m:\n                    grid[j][i + 1] = grid[j][i] + '*'\n    for j in range(n - 2):\n        for i in range(m - 2):\n            if grid[j][i] == '*':\n                if i + 1 < m:\n                    grid[j + 1][i + 1] = grid[j][i] + '*'\n    for j in range(n - 2):\n        for i in range(m - 2):\n            if grid[j][i] == '*':\n                if i + 1 < m:\n                    grid[j + 1][i + 1] = grid[j][i] + '*'\n    for j in range(n - 2):\n        for i in range(m - 2):\n            if grid[j][i] == '*':\n                if i + 1 < m:\n                    grid[j + 1][i + 1] = grid[j][i] + '*'\n    for j in range(n - 2):\n        for i in range(m - 2):\n            if grid[j][i] == '*':\n                if i + 1 < m:\n                    grid[j + 1][i + 1] = grid[j][i] + '*'\n    for j in range(n - 2):\n        for i in range(m - 2):\n            if grid[j][i] == '*':\n                if i + 1 < m:\n                    grid[j + 1][i + 1] = grid[j][i] + '*'\n    for j in range(n - 2):\n        for i in range(m - 2):\n            if grid[j][i] == '*':\n                if i + 1 < m:\n                    grid[j + 1][i + 1] = grid[j][i] + '*'\n    for j in range(n - 2):\n        for i in range(m - 2):\n            if grid[j][i] == '*':\n                if i + 1 < m:\n                    grid[j + 1][i + 1] = grid[j][i] + '*'\n    for j in range(n - 2):\n        for i in range(m - 2):\n            if grid[j][i] == '*':\n                if i + 1 < m:\n                    grid[j + 1][i + 1] = grid[j][i] + '*'\n    for j in range(n - 2):\n        for i in range(m - 2):\n            if grid[j][i] == '*':\n                if i + 1 < m:\n                    grid[j + 1][i + 1] = grid[j][i] + '*'\n    for j in range(n - 2):\n        for i in range(m - 2):\n            if grid[j][i] == '*':\n                if i + 1 < m:\n                    grid[j + 1][i + 1] = grid[j][i] + '*'\n    for j in range(n - 2):\n        for i in range(m - 2):\n            if grid[j][i] == '*':\n                if i + 1 < m:\n                    grid[j + 1][i + 1] = grid[j][i] + '*'\n    for j in range(n - 2):\n        for i in range(m - 2):\n            if grid[j][i] == '*':\n                if i + 1 < m:\n                    grid[j + 1][i + 1] = grid[j][i] + '*'\n    for j in range(n - 2):\n        for i in range(m - 2):\n            if grid[j][i] == '*':\n                if i + 1 < m:\n                    grid[j + 1][i + 1] = grid[j][i] + '*'\n    for j in range(n - 2):\n        for i in range(m - 2):\n            if grid[j][i] == '*':\n                if i + 1 < m:\n                    grid[j + 1][i + 1] = grid[j][i] + '*'\n    for j in range(n - 2):\n        for i in range(m - 2):\n            if grid[j][i] == '*':\n                if i + 1 < m:\n                    grid[j + 1][i + 1] = grid[j][i] + '*'\n    for j in range(n - 2):\n        for i in range(m - 2):\n            if grid[j][i] == '*':\n                if i + 1 < m:\n                    grid[j + 1][i + 1] = grid[j][i] + '*'\n    for j in range(n - 2):\n        for i in range(m - 2):\n            if grid[j][i] == '*':\n                if i + 1 < m:\n                    grid[j + 1][i + 1] = grid[j][i] + '*'\n    for j in range(n - 2):\n        for i in range(m - 2):\n            if grid[j][i] == '*':\n                if i + 1 < m:\n                    grid[j + 1][i + 1] = grid[j][i] + '*'\n    for j in range(n - 2):\n        for i in range(m - 2):\n            if grid[j"
    },
    {
        "number": 4351,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def ispalindrome(n):\n        l = n//10\n        if n%10 == 0:\n            return l == n%10\n        else:\n            return l!= n%10\n\n    def ispalindrome2(n):\n        l = n//10\n        if n%10 == 0:\n            return l == n%10\n        else:\n            return l!= n%10\n\n    def ispalindrome3(n):\n        if str(n)[::-1] == str(n):\n            return True\n        else:\n            return False\n\n    def ispalindrome4(n):\n        if n == int(str(n)[::-1]):\n            return True\n        else:\n            return False\n\n    for n in range(100, 1000):\n        if ispalindrome(n) or ispalindrome(n) or ispalindrome2(n) or ispalindrome3(n) or ispalindrome4(n):\n            return 'Yes'\n    return 'No'\n    \nprint(solution(int(input())))"
    },
    {
        "number": 4351,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin.strip().split()\n    N = int(string[0])\n    print(N%10==N%10%10==N%10)\n    if N%10==N%10%10==N%10:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\nn = solution(input())"
    },
    {
        "number": 4351,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(10, n+1):\n        check = str(n)\n        for j in range(n, 0, -1):\n            if check[j] == check[j-1]:\n                return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 4351,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N < 0:\n        return 'No'\n    if N == 0:\n        return 'Yes'\n    while N:\n        a = N % 10\n        N = N // 10\n        b = N % 10\n        N = N // 10\n        c = N % 10\n        N = N // 10\n        d = N % 10\n        N = N // 10\n        e = N % 10\n        N = N // 10\n        f = N % 10\n        N = N // 10\n        g = N % 10\n        N = N // 10\n        h = N % 10\n        N = N // 10\n        i = N % 10\n        N = N // 10\n        j = N % 10\n        N = N // 10\n        k = N % 10\n        N = N // 10\n        l = N % 10\n        N = N // 10\n        m = N % 10\n        N = N // 10\n        n = N % 10\n        N = N // 10\n        o = N % 10\n        N = N // 10\n        p = N % 10\n        N = N // 10\n        q = N % 10\n        N = N // 10\n        r = N % 10\n        N = N // 10\n        s = N % 10\n        N = N // 10\n        t = N % 10\n        N = N // 10\n        u = N % 10\n        N = N // 10\n        v = N % 10\n        N = N // 10\n        w = N % 10\n        N = N // 10\n        x = N % 10\n        N = N // 10\n        y = N % 10\n        N = N // 10\n        z = N % 10\n        N = N // 10\n        a = a + (10 - N)\n        b = b + (10 - N)\n        c = c + (10 - N)\n        d = d + (10 - N)\n        e = e + (10 - N)\n        f = f + (10 - N)\n        g = g + (10 - N)\n        h = h + (10 - N)\n        i = i + (10 - N)\n        j = j + (10 - N)\n        k = k + (10 - N)\n        l = l + (10 - N)\n        m = m + (10 - N)\n        n = n + (10 - N)\n        o = o + (10 - N)\n        p = p + (10 - N)\n        q = q + (10 - N)\n        r = r + (10 - N)\n        s = s + (10 - N)\n        t = t + (10 - N)\n        u = u + (10 - N)\n        v = v + (10 - N)\n        w = w + (10 - N)\n        x = x + (10 - N)\n        y = y + (10 - N)\n        z = z + (10 - N)\n        a = a + (10 - N)\n        b = b + (10 - N)\n        c = c + (10 - N)\n        d = d + (10 - N)\n        e = e + (10 - N)\n        f = f + (10 - N)\n        g = g + (10 - N)\n        h = h + (10 - N)\n        i = i + (10 - N)\n        j = j + (10 - N)\n        k = k + (10 - N)\n        l = l + (10 - N)\n        m = m + (10 - N)\n        n = n + (10 - N)\n        o = o + (10 - N)\n        p = p + (10 - N)\n        q = q + (10 - N)\n        r = r + (10 - N)\n        s = s + (10 - N)\n        t = t + (10 - N)\n        u = u + (10 - N)\n        v = v + (10 - N)\n        w = w + (10 - N)\n        x = x + (10 - N)\n        y = y + (10 - N)\n        z = z + (10 - N)\n        a = a + (10 - N)\n        b = b + (10 - N)\n        c = c + (10 - N)\n        d = d + (10 - N)\n        e = e + (10 - N)\n        f = f + (10 - N)\n        g = g + (10 - N)\n        h = h + (10 - N)\n        i = i + (10 - N)\n        j = j + (10 - N)\n        k = k + (10 - N)\n        l = l + (10 - N)\n        m = m + (10 - N)\n        n = n + (10 - N)\n        o = o + (10 - N)\n        p = p + (10 - N)\n        q = q + (10 - N)\n        r = r + (10 - N)\n        s = s + (10 - N)\n        t = t + (10 - N)\n        u = u + (10 - N)\n        v = v + (10 - N)\n        w = w + (10 - N)\n        x = x + (10 - N)\n        y = y + (10 - N)\n        z = z + (10 - N)\n        a = a + (10 - N)\n        b = b + (10 - N)\n        c = c + (10 - N)\n        d = d + (10 - N)\n        e = e + (10 - N)\n        f = f + (10 - N)\n        g = g + (10 - N)\n        h = h + (10 - N)\n        i = i + (10 - N)\n        j = j + (10 - N)\n        k = k + (10 - N)\n        l = l + (10 - N)\n        m = m + (10 - N)\n        n = n + (10 - N)\n        o = o + (10 - N)\n        p = p + (10 - N)\n        q = q + (10 - N)\n        r = r + (10 - N)\n        s = s + (10 - N)\n        t = t + (10 - N)\n        u = u + (10 - N)\n        v = v + (10 - N)\n        w = w + (10 - N)\n        x = x + (10 - N)\n        y = y + (10 - N)\n        z = z + (10 - N)\n        a = a + (10 - N)\n        b = b + (10 - N)\n        c = c + (10 - N)\n        d = d + (10 - N)\n        e = e + (10 - N)\n        f = f + (10 - N)\n        g = g + (10 - N)\n        h = h + (10 - N)\n        i = i + (10 - N)\n        j = j + (10 - N)\n        k = k + (10 - N)\n        l = l + (10 - N)\n        m = m + (10 - N)\n        n = n + (10 - N)\n        o = o + (10 - N)\n        p = p + (10 - N)\n        q = q + (10 - N)\n        r = r + (10 - N)\n        s = s + (10 - N)\n        t = t + (10 - N)\n        u = u + (10 - N)\n        v = v + (10 - N)\n        w = w + (10 - N)\n        x = x + (10 - N)\n        y = y + (10 - N)\n        z = z + (10 - N)\n        a = a + (10 - N)\n        b = b + (10 - N)\n        c = c + (10 - N)\n        d = d + (10"
    },
    {
        "number": 4351,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    palindromic=True\n    for x in range(1,101):\n        if str(x)==str(x)[::-1]:\n            palindromic=False\n    if palindromic:\n        return \"Yes\"\n    else:\n        return \"No\"\n    \n"
    },
    {
        "number": 4351,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    for i in range(N+1, 2*N+1):\n        if i%10 == i//10:\n            return 'Yes'\n    return 'No'\n\nprint(solution(input()))\n\ndef"
    },
    {
        "number": 4351,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return\n"
    },
    {
        "number": 4351,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    if N < 100 or N > 999:\n        return \"No\"\n    if N % 10 in [4, 3, 2, 1]:\n        return \"No\"\n    if N % 10 in [0, 2, 3, 5]:\n        return \"No\"\n    if N % 10 in [1, 4, 6, 8, 9]:\n        return \"No\"\n    return \"Yes\"\n"
    },
    {
        "number": 4351,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return ('Yes' if int(stdin[::-1]) == int(stdin) else 'No')"
    },
    {
        "number": 4351,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\"\n\nimport re\n\nclass Solution:\n    def isPalindrome(self, s: str) -> bool:\n        if len(s) == 0:\n            return False\n        \n        # Remove white spaces\n        s = s.replace(\" \", \"\")\n        # Search all letters in alphabet and make it into a character list\n        chars = []\n        for ch in s:\n            chars.append(ord(ch) - ord(\"a\") + 1)\n        # Initialize a palindrome\n        isPalindrome = True\n        for idx in range(len(chars) // 2):\n            # If the second half is not a palindrome, then don't check the next half.\n            if not isPalindrome:\n                break\n            # If the second half is a palindrome, then it is a palindrome\n            if chars[idx] == chars[idx + 1]:\n                isPalindrome = False\n        return isPalindrome"
    },
    {
        "number": 4352,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    ans = 'Draw'\n    for i in range(1, 13):\n        ans = max(ans, str(i) + 'A')\n    return ans"
    },
    {
        "number": 4352,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n  \n  if (len(stdin) == 1):\n    return \"Alice\"\n  A = int(stdin[0])\n  B = int(stdin[1])\n  \n  if (A + B < 13) or (A + B > 13) or (A + B == 1) or (A + B == 11) or (A + B == 12) or (A + B == 13) :\n    return \"Draw\"\n  elif (A+B == 5) or (A+B == 6) or (A+B == 9) or (A+B == 10) or (A+B == 12) or (A+B == 13) :\n    return \"Alice\"\n  else :\n    return \"Bob\"\n\nprint(solution(\"8 6\"))\n"
    },
    {
        "number": 4352,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = []\n    for i in range(n):\n        arr.append(list(map(int, stdin.split())))\n    return ''.join(map(str, sorted(arr, key = lambda x: x[0])[::-1]))\n"
    },
    {
        "number": 4352,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A = int(stdin[0])\n    B = int(stdin[1])\n    if A > 13:\n        print('Alice')\n    elif B > 13:\n        print('Bob')\n    elif A + B == 13:\n        print('Draw')\n    else:\n        print('Alice')\n    return ''\n\nprint(solution(input()))"
    },
    {
        "number": 4352,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    cards = list(map(int, stdin.split()))\n    for i in range(len(cards)):\n        if cards[i] < 12:\n            cards[i] = 1\n        else:\n            cards[i] = 0\n    \n    return 'Alice' if cards[n-1] == 1 else 'Bob' if cards[n-1] == 2 else 'Draw'\n\ndef"
    },
    {
        "number": 4352,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n  #read from stdin the input\n  A, B = map(int, stdin.split())\n  if (A == B):\n    return \"Draw\"\n  elif A == 2:\n    if B == 1:\n      return \"Alice\"\n    else:\n      return \"Bob\"\n  elif A == 3:\n    return \"Alice\"\n  elif A == 4:\n    return \"Bob\"\n  elif A == 5:\n    if B == 1:\n      return \"Alice\"\n    else:\n      return \"Bob\"\n  elif A == 6:\n    return \"Alice\"\n  elif A == 7:\n    return \"Bob\"\n  else:\n    return \"Draw\""
    },
    {
        "number": 4352,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    players = []\n    for _ in range(int(stdin[0])):\n        players.append(tuple(map(int, stdin[1].split())))\n    return players[0][0]\n\nhttps://docs.python.org/3/library/stdtypes.html#str\n\"\"\"\n\ndef"
    },
    {
        "number": 4352,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n  return 'Alice'\n\"\"\"\n\ndef"
    },
    {
        "number": 4352,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    str_A, str_B = map(int, stdin.split())\n    if str_A == 1 and str_B == 5:\n        return \"Alice\"\n    elif str_A == 2 and str_B == 5:\n        return \"Bob\"\n    elif str_A == 3 and str_B == 5:\n        return \"Draw\"\n    elif str_A == 4 and str_B == 5:\n        return \"Draw\"\n    elif str_A == 5 and str_B == 4:\n        return \"Alice\"\n    elif str_A == 6 and str_B == 4:\n        return \"Bob\"\n    elif str_A == 7 and str_B == 4:\n        return \"Draw\"\n    elif str_A == 8 and str_B == 4:\n        return \"Draw\"\n    elif str_A == 9 and str_B == 4:\n        return \"Alice\"\n    elif str_A == 10 and str_B == 4:\n        return \"Bob\"\n    elif str_A == 11 and str_B == 4:\n        return \"Draw\"\n    elif str_A == 12 and str_B == 4:\n        return \"Draw\"\n    elif str_A == 13 and str_B == 4:\n        return \"Alice\"\n    elif str_A == 14 and str_B == 4:\n        return \"Bob\"\n    elif str_A == 15 and str_B == 4:\n        return \"Draw\"\n    elif str_A == 16 and str_B == 4:\n        return \"Draw\"\n    elif str_A == 17 and str_B == 4:\n        return \"Alice\"\n    elif str_A == 18 and str_B == 4:\n        return \"Bob\"\n    elif str_A == 19 and str_B == 4:\n        return \"Draw\"\n    elif str_A == 20 and str_B == 4:\n        return \"Draw\"\n    elif str_A == 21 and str_B == 4:\n        return \"Alice\"\n    elif str_A == 22 and str_B == 4:\n        return \"Bob\"\n    elif str_A == 23 and str_B == 4:\n        return \"Draw\"\n    elif str_A == 24 and str_B == 4:\n        return \"Alice\"\n    elif str_A == 25 and str_B == 4:\n        return \"Bob\"\n    elif str_A == 26 and str_B == 4:\n        return \"Draw\"\n    elif str_A == 27 and str_B == 4:\n        return \"Alice\"\n    elif str_A == 28 and str_B == 4:\n        return \"Bob\"\n    elif str_A == 29 and str_B == 4:\n        return \"Draw\"\n    elif str_A == 30 and str_B == 4:\n        return \"Alice\"\n    elif str_A == 31 and str_B == 4:\n        return \"Bob\"\n    elif str_A == 32 and str_B == 4:\n        return \"Draw\"\n    elif str_A == 33 and str_B == 4:\n        return \"Alice\"\n    elif str_A == 34 and str_B == 4:\n        return \"Bob\"\n    elif str_A == 35 and str_B == 4:\n        return \"Draw\"\n    elif str_A == 36 and str_B == 4:\n        return \"Alice\"\n    elif str_A == 37 and str_B == 4:\n        return \"Bob\"\n    elif str_A == 38 and str_B == 4:\n        return \"Draw\"\n    elif str_A == 39 and str_B == 4:\n        return \"Alice\"\n    elif str_A == 40 and str_B == 4:\n        return \"Bob\"\n    elif str_A == 41 and str_B == 4:\n        return \"Draw\"\n    elif str_A == 42 and str_B == 4:\n        return \"Alice\"\n    elif str_A == 43 and str_B == 4:\n        return \"Bob\"\n    elif str_A == 44 and str_B == 4:\n        return \"Draw\"\n    elif str_A == 45 and str_B == 4:\n        return \"Alice\"\n    elif str_A == 46 and str_B == 4:\n        return \"Bob\"\n    elif str_A == 47 and str_B == 4:\n        return \"Draw\"\n    elif str_A == 48 and str_B == 4:\n        return \"Alice\"\n    elif str_A == 49 and str_B == 4:\n        return \"Bob\"\n    elif str_A == 50 and str_B == 4:\n        return \"Draw\"\n    elif str_A == 51 and str_B == 4:\n        return \"Alice\"\n    elif str_A == 52 and str_B == 4:\n        return \"Bob\"\n    elif str_A == 53 and str_B == 4:\n        return \"Draw\"\n    elif str_A == 54 and str_B == 4:\n        return \"Alice\"\n    elif str_A == 55 and str_B == 4:\n        return \"Bob\"\n    elif str_A == 56 and str_B == 4:\n        return \"Draw\"\n    elif str_A == 57 and str_B == 4:\n        return \"Alice\"\n    elif str_A == 58 and str_B == 4:\n        return \"Bob\"\n    elif str_A == 59 and str_B == 4:\n        return \"Draw\"\n    elif str_A == 60 and str_B == 4:\n        return \"Alice\"\n    elif str_A == 61 and str_B == 4:\n        return \"Bob\"\n    elif str_A == 62 and str_B == 4:\n        return \"Draw\"\n    elif str_A == 63 and str_B == 4:\n        return \"Alice\"\n    elif str_A == 64 and str_B == 4:\n        return \"Bob\"\n    elif str_A == 65 and str_B == 4:\n        return \"Draw\"\n    elif str_A == 66 and str_B == 4:\n        return \"Alice\"\n    elif str_A == 67 and str_B == 4:\n        return \"Bob\"\n    elif str_A == 68 and str_B == 4:\n        return \"Draw\"\n    elif str_A == 69 and str_B == 4:\n        return \"Alice\"\n    elif str_A == 70 and str_B == 4:\n        return \"Bob\"\n    elif str_A == 71 and str_B == 4:\n        return \"Draw\"\n    elif str_A == 72 and str_B == 4:\n        return \"Alice\"\n    elif str_A == 73 and str_B == 4:\n        return \"Bob\"\n    elif str_A == 74 and str_B == 4:\n        return \"Draw\"\n    elif str_A == 75 and str_B == 4:\n        return \"Alice\"\n    elif str_A == 76 and str_B == 4:\n        return \"Bob\"\n"
    },
    {
        "number": 4352,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\ndef"
    },
    {
        "number": 4353,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin.split(',')\n    print(string)\n    string = list(map(lambda x: x.replace(' ',''), string))\n    print(string)\n    string = string[2:-2]\n    print(string)\n    return''.join(string)\n"
    },
    {
        "number": 4353,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    string = stdin.split(\",\")\n    \n    list_of_strings = []\n    \n    for i in range(len(string)):\n        list_of_strings.append(string[i].split(\" \"))\n        \n    # print(list_of_strings)\n    \n    for i in range(len(list_of_strings)):\n        list_of_strings[i][0] = list_of_strings[i][0].replace(\",\",\" \")\n        list_of_strings[i][1] = list_of_strings[i][1].replace(\",\",\" \")\n        list_of_strings[i][2] = list_of_strings[i][2].replace(\",\",\" \")\n        \n    # print(list_of_strings)\n    \n    return \"\".join(list_of_strings)"
    },
    {
        "number": 4353,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split(',')\n    s = list(map(lambda x: x.replace(',','').strip(), s))\n    s = list(map(lambda x: x.lower(), s))\n    return''.join(s)"
    },
    {
        "number": 4353,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    answer = ''\n    string = stdin.split(\",\")\n    for i in range(len(string)):\n        temp = string[i].split()\n        answer += temp[1] + \" \" + temp[0] + \" \"\n    return answer\n\n'''\n\ndef"
    },
    {
        "number": 4353,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    list = stdin.split(\",\")\n    string = []\n    for item in list:\n        string.append(item.split(\",\"))\n    return \"\".join(string)\n\ndef"
    },
    {
        "number": 4353,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    import re\n    answer =''\n    s = stdin.strip()\n    s = list(s.replace('.', ',').replace(',','').split(','))\n    s = ''.join(s)\n    s = s.split(',')\n    s = [re.sub(r'([^a-z])\\1+', r'\\1', s[i]) for i in range(len(s))]\n    s = ''.join(s)\n    s = s.split(' ')\n    answer = ''.join(s)\n    return answer\n"
    },
    {
        "number": 4353,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split(\",\")\n    print(\"\".join(s).replace(\" \", \"\").replace(\".\", \"\"))\n\ndef"
    },
    {
        "number": 4353,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split(\",\")\n    \n    def getString(string):\n        return \" \".join(string)\n\n    def solution_1(string):\n        s_ = []\n        for i in range(len(string)):\n            if string[i] == \",\":\n                s_.append(string[i] + string[i+1])\n            else:\n                s_.append(string[i])\n        return getString(\"\".join(s_))\n    \n    \n    for i in range(len(s)):\n        s[i] = \" \" + s[i].replace(\" \", \"\")\n        s[i] = \"\".join(s[i])\n    \n    return solution_1(s)\n\"\"\""
    },
    {
        "number": 4353,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    \n    s = []\n    for _ in range(n):\n        s.append(stdin.replace(',','').replace('.','').replace('-','').replace(' ', '').replace('\\n', ''))\n    print(''.join(s))\n    return ''.join(s)\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4353,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    answer = ''\n    \n    for s in stdin:\n        for i in range(len(s)):\n            if s[i] == ',':\n                answer = answer[:i] +'' + answer[i+1:]\n                break\n            else:\n                answer = answer + s[i]\n    return answer"
    },
    {
        "number": 4354,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N,M=map(int,stdin.split())\n    \n    dic={}\n    for i in range(N):\n        a,b=map(int,input().split())\n        dic[a-1]=b-1\n    for i in range(M):\n        c,d=map(int,input().split())\n        dic[c-1]=d-1\n    \n    # print(dic)\n    # print(dic[0])\n    answer=0\n    \n    \n    for i in range(N):\n        answer+=dic[i]*abs(dic[i]-i)\n        # print(answer)\n    return str(answer)\n\n---DP---\ndef"
    },
    {
        "number": 4354,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    a_arr = list(map(int, stdin.split()))\n    b_arr = list(map(int, stdin.split()))\n    c_arr = list(map(int, stdin.split()))\n    d_arr = list(map(int, stdin.split()))\n    checkpoint_arr = []\n\n    for i in range(N):\n        checkpoint_arr.append([])\n\n        for j in range(M):\n            checkpoint_arr[i].append(i)\n            checkpoint_arr[i].append(j)\n\n    for i in range(N):\n        for j in range(M):\n            if a_arr[i] == b_arr[j] == c_arr[i] == d_arr[j]:\n                if j!= M:\n                    checkpoint_arr[i][j+1] = checkpoint_arr[i][j]\n                else:\n                    checkpoint_arr[i][0] = checkpoint_arr[i][j+1]\n    for i in range(N):\n        for j in range(M):\n            if a_arr[i]!= b_arr[j]!= c_arr[i]!= d_arr[j]:\n                checkpoint_arr[i][j] = -1\n\n    for i in range(N):\n        for j in range(M):\n            print(checkpoint_arr[i][j], end=\" \")\n        print()\n    return \"2\"\n    \n\n\n\nRuntime: 32 ms, faster than 54.99% of Python3 online submissions for Student IDX.\nMemory Usage: 17.2 MB, less than 5.93% of Python3 online submissions for Student IDX.\n"
    },
    {
        "number": 4354,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N,M = map(int,stdin.split())\n    \n    cnt = [0]*N\n    dist = [[-1]*M for _ in range(N)]\n    \n    for i in range(N):\n        for j in range(M):\n            if i == j:\n                cnt[i] = 1\n            else:\n                cnt[i] += cnt[j]\n                dist[i][j] = cnt[i]\n    \n    ans = [0]*N\n    #dist = [[-1]*M for _ in range(N)]\n    \n    for i in range(N):\n        #print(i,cnt[i])\n        dist[i][cnt[i]] = i\n        ans[i] = dist[i][cnt[i]]\n        \n    for i in range(N-1):\n        ans[i] = min(ans[i+1],dist[i+1][cnt[i]])\n    \n    print(ans[N-1])\n    return '\\n'.join(map(str,ans))\n\n\ndef"
    },
    {
        "number": 4354,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n  N,M=map(int,stdin.split())\n  answer=[]\n  for i in range(N):\n    a,b=map(int,stdin.split())\n    answer.append(min(a,b)+abs(a-b))\n  answer.sort()\n  print(*answer)"
    },
    {
        "number": 4354,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n,m=map(int,stdin.split())\n    a=list(map(int,stdin.split()))\n    b=list(map(int,stdin.split()))\n    b.sort()\n    check=[]\n    for i in range(n):\n        check.append((i,b[i]))\n    for i in range(m):\n        if check[i][1]==check[(i+1)%n][1]:\n            check=check[(i+1)%n]\n        else:\n            check=check[i]\n    return str(check[0])\n\"\"\""
    },
    {
        "number": 4354,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    a_lst = list(map(int, input().split()))\n    b_lst = list(map(int, input().split()))\n    c_lst = list(map(int, input().split()))\n    d_lst = list(map(int, input().split()))\n    dist = 0\n    for i in range(N):\n        dist += abs(a_lst[i]-b_lst[i]) + abs(c_lst[i]-d_lst[i])\n    if dist <= M:\n        for j in range(M):\n            print(a_lst[a_lst.index(b_lst[j])] * 10000 + c_lst[c_lst.index(d_lst[j])] * 10000 + d_lst[j])\n    else:\n        for j in range(M):\n            print(a_lst[a_lst.index(b_lst[j])] * 10000 + c_lst[c_lst.index(d_lst[j])] * 10000 + d_lst[j])"
    },
    {
        "number": 4354,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    a_list = list(map(int, stdin.split()))\n    print(a_list)\n    b_list = list(map(int, stdin.split()))\n    print(b_list)\n    \n    c_list = list(map(int, stdin.split()))\n    print(c_list)\n    d_list = list(map(int, stdin.split()))\n    print(d_list)\n    \n    dist_list = []\n    for i in range(len(a_list)):\n        dist_list.append(abs(a_list[i] - c_list[i]))\n    dist_list.sort()\n    print(dist_list)\n    \n    for i in range(len(b_list)):\n        dist_list.append(abs(b_list[i] - d_list[i]))\n    dist_list.sort()\n    print(dist_list)\n    print(dist_list[0])\n    \n    for i in range(len(b_list)):\n        if dist_list[i] == dist_list[0]:\n            dist_list[i] = -1\n            print(dist_list[i])\n            print(i)\n            break\n    print(dist_list)\n    print(dist_list[-1])\n    print(dist_list[0])\n    \n    for i in range(len(a_list)):\n        if dist_list[i] == dist_list[-1]:\n            dist_list[i] = -1\n            print(dist_list[i])\n            print(i)\n            break\n    print(dist_list)\n    print(dist_list[0])\n    print(dist_list[-1])\n    \n    if len(dist_list) == N:\n        print(dist_list[0])\n        print(dist_list[-1])\n        for i in range(len(dist_list)):\n            if dist_list[i]!= -1:\n                print(dist_list[i])\n        return dist_list[0]\n    else:\n        print(dist_list[-1])\n        print(dist_list[0])\n        for i in range(len(dist_list)):\n            if dist_list[i]!= -1:\n                print(dist_list[i])\n        return dist_list[-1]\n    \n"
    },
    {
        "number": 4354,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N,M=map(int,stdin.split())\n    stdin.split()\n    def solve(index):\n        stdin.readline()\n        if index>N-1 or index<0:\n            return 0\n        x,y=map(int,stdin.readline().split())\n        return x,y\n    def print_all(index):\n        print(str(index+1),end=\"\")\n        stdout.write(\"\\n\")\n    check=[[[-1 for j in range(M+1)] for i in range(N+1)] for k in range(N+1)]\n    check[0][0]=0\n    for i in range(N):\n        x,y=solve(i+1)\n        check[x][y]=check[x][y]+1\n        print_all(i+1)\n        for j in range(M+1):\n            if check[i+1][j]<=1:\n                check[i+1][j]=0\n    print(check[N][M])\n    return str(check[N][M])\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4354,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    a, b, c, d = map(int, stdin.split())\n    signal = [None]*N\n    for _ in range(M):\n        a, b, c, d, signal[a] = map(int, stdin.split())\n        if signal[a] < signal[b] and signal[a] < signal[c] and signal[a] < signal[d]:\n            signal[a] = signal[b] + signal[c] + signal[d]\n    if signal[b] == signal[c] and signal[a] == signal[d]:\n        signal[b] = signal[c] + signal[d]\n        print(signal[b])\n    else:\n        for i in range(N):\n            if signal[i] < signal[i+1] and signal[i+1] < signal[i] and signal[i+1] < signal[i+2]:\n                signal[i+1] = signal[i+2] + signal[i]\n                print(signal[i+1])\n    print(*signal[:N], sep=\"\\n\")"
    },
    {
        "number": 4354,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    connects = []\n    for _ in range(M):\n        s, e = map(int, stdin.split())\n        connects.append((s-1, e-1))\n    dis = 0\n    answer = []\n    for i in range(N):\n        dis += abs(i+1-connects[i][0])+abs(i-1-connects[i][1])\n        answer.append(dis)\n    return '\\n'.join(str(answer).split())\n"
    },
    {
        "number": 4355,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    a_plus_a_square_n = a + a * a * a\n    a_plus_a_square_n_power_of_two = a_plus_a_square_n ** (1 / 2)\n    a_plus_a_square_n_power_of_two_str = str(a_plus_a_square_n_power_of_two)\n    a_plus_a_square_n_power_of_two_int = int(a_plus_a_square_n_power_of_two_str)\n    a_plus_a_square_n_power_of_two_int_str = str(a_plus_a_square_n_power_of_two_int)\n    a_plus_a_square_n_power_of_two_int_str_list = list(a_plus_a_square_n_power_of_two_int_str)\n    a_plus_a_square_n_power_of_two_int_str_list.sort()\n    a_plus_a_square_n_power_of_two_str_list = list(a_plus_a_square_n_power_of_two_str)\n    a_plus_a_square_n_power_of_two_str_list.sort()\n    a_plus_a_square_n_power_of_two_int_list = list(a_plus_a_square_n_power_of_two_int_str_list)\n    a_plus_a_square_n_power_of_two_int_list.sort()\n    a_plus_a_square_n_power_of_two_str_list.sort()\n    a_plus_a_square_n_power_of_two_int_list.sort()\n    a_plus_a_square_n_power_of_two_int_str_list.sort()\n    for i in range(len(a_plus_a_square_n_power_of_two_int_list)):\n        if i > 0 and a_plus_a_square_n_power_of_two_int_list[i - 1] > a_plus_a_square_n_power_of_two_int_list[i]:\n            a_plus_a_square_n_power_of_two_int_list[i] = a_plus_a_square_n_power_of_two_int_list[i - 1]\n            a_plus_a_square_n_power_of_two_int_list.pop(i)\n            a_plus_a_square_n_power_of_two_str_list.pop(i)\n            a_plus_a_square_n_power_of_two_str_list.pop(i)\n            a_plus_a_square_n_power_of_two_int_list.pop(i)\n            a_plus_a_square_n_power_of_two_int_list.pop(i)\n            a_plus_a_square_n_power_of_two_str_list.pop(i)\n    a_plus_a_square_n_power_of_two_int_list.sort()\n    a_plus_a_square_n_power_of_two_str_list.sort()\n    a_plus_a_square_n_power_of_two_str_list.sort()\n    a_plus_a_square_n_power_of_two_int_list.sort()\n    a_plus_a_square_n_power_of_two_int_list.sort()\n    a_plus_a_square_n_power_of_two_str_list.sort()\n    a_plus_a_square_n_power_of_two_int_list.sort()\n    a_plus_a_square_n_power_of_two_str_list.sort()\n    print(''.join(a_plus_a_square_n_power_of_two_str_list))\n    print(''.join(a_plus_a_square_n_power_of_two_int_list))\n    print(''.join(a_plus_a_square_n_power_of_two_str_list))\n    print(''.join(a_plus_a_square_n_power_of_two_int_list))\n    return ''.join(a_plus_a_square_n_power_of_two_str_list)"
    },
    {
        "number": 4355,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    answer = a + a ** 2 + a ** 3\n    return str(answer)\n\"\"\"\n\nimport math\n\ndef"
    },
    {
        "number": 4355,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    a += a*a*a\n    a += a*a*a*a\n    a += a*a*a*a*a\n    a += a*a*a*a*a*a*a\n    a += a*a*a*a*a*a*a*a*a*a*a\n    a += a*a*a*a*a*a*a*a*a*a*a*a\n    a += a*a*a*a*a*a*a*a*a*a*a*a\n    a += a*a*a*a*a*a*a*a*a*a*a*a\n    a += a*a*a*a*a*a*a*a*a*a*a*a\n    a += a*a*a*a*a*a*a*a*a*a*a*a*a*a\n    a += a*a*a*a*a*a*a*a*a*a*a*a*a*a\n    a += a*a*a*a*a*a*a*a*a*a*a*a*a*a*a\n    a += a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a\n    a += a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a\n    a += a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a\n    a += a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a\n    a += a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a\n    a += a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a\n    a += a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a\n    a += a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a\n    a += a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a\n    a += a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a\n    a += a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a\n    a += a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a\n    a += a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a\n    a += a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a\n    a += a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a\n    a += a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a\n    a += a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a\n    a += a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a\n    a += a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a\n    a += a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a\n    a += a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a\n    a += a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a\n    a += a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a\n    a += a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a\n    a += a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a\n    a += a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a\n    a += a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a\n    a += a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*"
    },
    {
        "number": 4355,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(math.sqrt(int(stdin))))"
    },
    {
        "number": 4355,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n  a = int(stdin)\n  s = str(a*a*a)\n  s = s[2:]\n  s = int(s)\n  if s >= 1:\n    return str(s)\n  else:\n    return '0'\n"
    },
    {
        "number": 4355,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    ans = a**3 + a**2 + a**1\n    print(ans)\n\n-----Sample Input-----\n3\n\n-----Sample Output-----\n2\n\n-----Sample Explanation-----\nThere is a solution of the following equation.\nax^2 + bx + c = 0, where a, b, and c are numbers such that ax^2 + bx + c = 0.\n\nThe exact solution is a + bx + c = 0.\n\nExample 1:\n\nInput:\n2\n\nOutput:\n2\n\nExplanation:\n2^2 + 2^1 + 2^1 = 2 + 2^1 + 2^1 = 2 + 2^1 + 2^1 = 2 + 2^1 + 2^1 = 2.\n\nExample 2:\n\nInput:\n5\n\nOutput:\n5\n\nExplanation:\n5^2 + 5^1 + 5^2 + 5^2 + 5^2 = 5 + 5^1 + 5^2 + 5^2 + 5^2 = 5 + 5^2 + 5^2 + 5^2 + 5^2 = 5.\n\nExample 3:\n\nInput:\n9\n\nOutput:\n39\n\nExplanation:\n9^2 + 9^1 + 9^2 + 9^2 + 9^2 + 9^2 + 9^2 + 9^2 + 9^2 + 9^2 + 9^2 = 9 + 9^2 + 9^2 + 9^2 + 9^2 + 9^2 + 9^2 + 9^2 + 9^2 + 9^2 = 9.\n\nExample 4:\n\nInput:\n3\n\nOutput:\n0\n\nExplanation:\n3^2 + 3^1 + 3^1 + 3^1 = 0 + 3^1 + 3^1 = 0.\n\nExample 5:\n\nInput:\n8\n\nOutput:\n8\n\nExplanation:\n8^2 + 8^1 + 8^1 + 8^1 + 8^1 + 8^1 + 8^1 + 8^1 + 8^1 = 8 + 8^1 + 8^1 + 8^1 + 8^1 + 8^1 + 8^1 + 8^1 + 8^1 = 8.\n\n-----Constraints-----\n - 1 \\leq a \\leq 10\n - a is an integer.\n\n------Time complexity--------\n - O(n)\n - O(1)\n\n------Space complexity--------\n - O(1)\n \n-----Submissions-----\n # Submissions are marked in the dashed lines.\n"
    },
    {
        "number": 4355,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    b = []\n    for i in range(len(a)):\n        if a[i] == 0:\n            b.append(0)\n        else:\n            b.append(a[i] ** 2 + a[i] ** 3)\n    if len(b)!= 0:\n        b.sort()\n        b[-1] = b[-1] ** 2\n    a = sorted(b)\n    print(sum(a))\n    return str(sum(a))\n-----Constraints-----\n - 1 \\leq a \\leq 10\n - a is an integer.\n\n-----Input-----\nInput is given from Standard Input in the following format:\na\n\n-----Output-----\nPrint the value a + a^2 + a^3.\n\n-----Sample Input-----\n2\n\n-----Sample Output-----\n3\n\nWhen a = 2, we have a + a^2 + a^3 = 2 + 2^2 + 2^3 = 2 + 4 + 8 = 3.\nPrint the answer as an input. Outputs such as 3.0 will be judged as incorrect.\ndef"
    },
    {
        "number": 4355,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n  n = int(stdin)\n  if n <= 1:\n    return str(n)\n  \n  a = n // 2\n  r = n % 2\n  r2 = a % 2\n  \n  if r2 == 0:\n    print(a + a*a + a*a*a)\n    return str(a+a*a+a*a*a)\n  else:\n    print(a + a*a2 + a*a3)\n    return str(a+a*a2 + a*a3)\n  \n  \n  \n  \n"
    },
    {
        "number": 4355,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    import math\n    a = int(stdin)\n    p = 1\n    q = 1\n    for n in range(2, 10):\n        p = p * n\n        q = q * n\n    x = int(math.sqrt(p))\n    y = int(math.sqrt(q))\n    answer = str(p+q)\n    for i in range(x, y+1):\n        answer += str(int(p*i*q))\n    return answer"
    },
    {
        "number": 4355,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a + a*b + a*b*b)"
    },
    {
        "number": 4356,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    m = int(stdin.split('\\n')[1])\n    A = [list(stdin.split('\\n')[i]) for i in range(n)]\n    B = [list(stdin.split('\\n')[i]) for i in range(m)]\n    for i in range(n):\n        for j in range(m):\n            if A[i][j] == \"#\":\n                for k in range(j, m):\n                    A[i][k] = \"#\"\n            elif A[i][j] == \".\":\n                for k in range(j, m):\n                    B[k][m] = \"#\"\n            else:\n                continue\n    for i in range(n):\n        for j in range(m):\n            if A[i][j] == \"#\":\n                if B[i][j] == \"#\":\n                    return \"Yes\"\n                else:\n                    return \"No\"\n    return \"No\""
    },
    {
        "number": 4356,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    A_lst = stdin.split(\"\\n\")\n    \n    #Create a list of lower left 2 \u00d7 2 subimages\n    #each subimage is a list of strings\n    #the first element is a list of strings\n    #the second element is a string\n    lower_left_2_2_subimages = [[[]]*int(stdin[i]) for i in range(int(stdin[0]))]\n    #Get the strings\n    for i in range(int(stdin[0])):\n        for j in range(int(stdin[1])):\n            lower_left_2_2_subimages[i][j] = stdin[i+1] + \" \" + stdin[j+1] + \" \"\n            \n    #Create a string for each subimage\n    #each subimage is a list of strings\n    #the first element is a list of strings\n    #the second element is a string\n    for i in range(int(stdin[0])):\n        lower_left_2_2_subimages[i][i] = \".\"\n        \n    #Create a list of strings\n    #each string is a list of characters\n    #the first element is a list of characters\n    #the second element is a string\n    #The length of each subimage is equal to the number of characters in the string\n    \n    #Create a list of lists of lists of strings\n    #Each subimage is a list of strings\n    #the first element is a list of strings\n    #the second element is a list of strings\n    #The length of each subimage is equal to the number of characters in the string\n    \n    #Create a dictionary\n    #Key is the character in each subimage\n    #Value is a list of strings\n    #the first element is a list of strings\n    #the second element is a list of strings\n    #The length of each subimage is equal to the number of characters in the string\n    \n    #Create a list of strings\n    #Each string is a list of characters\n    #the first element is a list of characters\n    #the second element is a list of strings\n    #The length of each subimage is equal to the number of characters in the string\n    \n    #For every subimage, get a list of strings\n    #For every subimage, get a list of strings\n    #The length of each subimage is equal to the number of characters in the string\n    #get a list of strings\n    \n    #For every subimage, get a dictionary\n    #For every subimage, get a dictionary\n    #The length of each subimage is equal to the number of characters in the string\n    \n    #for i in range(int(stdin[0])):\n    #    for j in range(int(stdin[1])):\n    #        for k in range(len(lower_left_2_2_subimages[i][j].split(\" \"))):\n    #            lower_left_2_2_subimages[i][j] = lower_left_2_2_subimages[i][j].split(\" \")[k]\n    \n    #for i in range(int(stdin[0])):\n    #    for j in range(int(stdin[1])):\n    #        lower_left_2_2_subimages[i][j] = \"\".join(lower_left_2_2_subimages[i][j])\n    \n    #for i in range(int(stdin[0])):\n    #    for j in range(int(stdin[1])):\n    #        lower_left_2_2_subimages[i][j] = lower_left_2_2_subimages[i][j].split(\" \")\n    \n    #print(lower_left_2_2_subimages)\n    \n    #For every substring, get a dictionary\n    #For every substring, get a dictionary\n    #The length of each substring is equal to the number of characters in the string\n    #for key in lower_left_2_2_subimages[i]:\n    #    lower_left_2_2_subimages[i][key] = lower_left_2_2_subimages[i][key].split(\" \")\n    \n    #print(lower_left_2_2_subimages)\n    \n    #for i in range(int(stdin[0])):\n    #    for j in range(int(stdin[1])):\n    #        lower_left_2_2_subimages[i][j] = \"\".join(lower_left_2_2_subimages[i][j])\n    \n    #print(lower_left_2_2_subimages)\n    \n    #for i in range(int(stdin[0])):\n    #    for j in range(int(stdin[1])):\n    #        lower_left_2_2_subimages[i][j] = \"\".join(lower_left_2_2_subimages[i][j])\n    \n    #print(lower_left_2_2_subimages)\n    \n    #return \"Yes\" if lower_left_2_2_subimages == lower_left_2_2_subimages else \"No\"\n    \n    #For every substring, get a dictionary\n    #for every substring, get a dictionary\n    #The length of each substring is equal to the number of characters in the string\n    #for key in lower_left_2_2_subimages[i]:\n    #    lower_left_2_2_subimages[i][key] = lower_left_2_2_subimages[i][key].split(\" \")\n    \n    #print(lower_left_2_2_subimages)\n    \n    #for i in range(int(stdin[0])):\n    #    for j in range(int(stdin[1])):\n    #        lower_left_2_2_subimages[i][j] = \"\".join(lower_left_2_2_subimages[i][j])\n    \n    #print(lower_left_2_2_subimages)\n    \n    #for i in range(int(stdin[0])):\n    #    for j in range(int(stdin[1])):\n    #        lower_left_2_2_subimages[i][j] = \"\".join(lower_left_2_2_subimages[i][j])\n    \n    #print(lower_left_2_2_subimages)\n    \n    #for i in range(int(stdin[0])):\n    #    for j in range(int(stdin[1])):\n    #        lower_left_2_2_subimages[i]["
    },
    {
        "number": 4356,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    m, n, k = map(int, stdin.split())\n    image = [list(map(int, input())) for _ in range(m)]\n    pixels = []\n    for i in range(k):\n        pixels += image[i].count('#')\n    \n    def is_right(row, col):\n        if row < m - 1 and col < n - 1:\n            return image[row][col] == '.'\n        else:\n            return False\n\n    def is_horizontal(row, col):\n        if row < m - 1:\n            return is_right(row, col) and image[row][col + 1] == '.'\n        else:\n            return False\n    \n    def is_vertical(row, col):\n        if row < m - 1:\n            return is_right(row, col) and image[row + 1][col] == '.'\n        else:\n            return False\n    \n    def is_diagonal(row, col):\n        if row < m - 1 and col < n - 1:\n            if image[row][col] == '.':\n                return False\n            if is_vertical(row, col) and is_horizontal(row - 1, col - 1):\n                return True\n            return False\n        else:\n            return False\n    \n    def is_backward(row, col):\n        if row < m - 1 and col < n - 1:\n            if image[row][col] == '.':\n                return False\n            if is_horizontal(row - 1, col) and is_vertical(row - 1, col + 1):\n                return True\n            return False\n        else:\n            return False\n    \n    def is_forward(row, col):\n        if row < m - 1 and col < n - 1:\n            if image[row][col] == '.':\n                return False\n            if is_horizontal(row + 1, col) and is_vertical(row + 1, col + 1):\n                return True\n            return False\n        else:\n            return False\n    \n    for i in range(n):\n        for j in range(m):\n            if is_right(i, j):\n                if is_diagonal(i, j) or is_backward(i, j) or is_forward(i, j):\n                    if is_backward(i, j) or is_forward(i, j):\n                        if is_horizontal(i, j) or is_vertical(i, j):\n                            if is_horizontal(i, j):\n                                print('Yes')\n                            else:\n                                print('No')\n                else:\n                    if is_horizontal(i, j):\n                        print('No')\n                    else:\n                        print('No')\n    return 'No'"
    },
    {
        "number": 4356,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    A_lines, B_lines = [], []\n    for _ in range(N):\n        A_line, B_line = stdin.split()\n        A_lines.append(list(A_line))\n    for _ in range(M):\n        B_line, _ = stdin.split()\n        B_lines.append(list(B_line))\n    for i in range(N):\n        for j in range(M):\n            if A_lines[i][j]!= B_lines[i][j]:\n                return \"No\"\n    return \"Yes\""
    },
    {
        "number": 4356,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    A = [list(map(str, input())) for _ in range(N)]\n    B = [list(map(str, input())) for _ in range(M)]\n    \n    def search(j, i):\n        if i == M:\n            return True\n        if A[i][j] == \"#\":\n            return False\n        \n        A[i][j] = \"#\"\n        \n        if A[i][j] == B[i][j]:\n            return search(j+1, i+1)\n        \n        A[i][j] = \".\"\n        \n        return search(j, i+1) and search(j+1, i)\n        \n    return \"Yes\" if search(0, 0) else \"No\""
    },
    {
        "number": 4356,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n    # Write your code here\n    strs = [input() for i in range(int(input()))]\n    #print(strs)\n    start, end = 0, 0\n    lst = []\n    for i in range(len(strs)):\n        end = start + len(strs[i]) - 1\n        #print(end)\n        if end > len(strs[i]) - 1:\n            return \"No\"\n        #print(end, start, end)\n        lst.append(strs[i][start:end+1])\n        start = end + 1\n    \n    print(lst)\n    return \"Yes\"\n"
    },
    {
        "number": 4356,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    h, w = map(int, stdin.split())\n    A = []\n    B = []\n    for i in range(h):\n        A.append(stdin[i * 2:i * 2 + 2])\n    for i in range(w):\n        B.append(stdin[i * 2 + 2:i * 2 + 2 + 2])\n    for i in range(h):\n        if B[i] == \"#\":\n            for j in range(w):\n                if A[i][j] == \"#\":\n                    return \"#\"\n                else:\n                    A[i][j] = \"#\"\n    return \"Yes\""
    },
    {
        "number": 4356,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    A = [list(input()) for _ in range(N)]\n    B = [list(input()) for _ in range(M)]\n    for i in range(len(A)):\n        for j in range(len(A[i])):\n            if A[i][j] == \"#\":\n                for l in range(len(B[j])):\n                    A[i][j] = A[i][j] + B[j][l]\n                if \".\" not in A[i][j]:\n                    return \"No\"\n    return \"Yes\""
    },
    {
        "number": 4356,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    N,M = [int(x) for x in stdin.split()]\n    A = [list(map(lambda x: int(x) % 2, input().split())) for _ in range(N)]\n    B = [list(map(lambda x: int(x) % 2, input().split())) for _ in range(M)]\n    \n    for i in range(N):\n        for j in range(M):\n            if A[i][j] == 1 and B[i][j] == 1:\n                print('Yes')\n                return\n    \n    print('No')\n    return\n    \n    \n"
    },
    {
        "number": 4356,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    A = []\n    for i in range(n):\n        A.append(stdin[i].split(' '))\n    B = []\n    for j in range(m):\n        B.append(stdin[j].split(' '))\n    result = ''\n    for row in range(n):\n        for col in range(m):\n            if B[row][col] == '#':\n                if row == 0 or row == n - 1 or col == 0 or col == m - 1:\n                    result += 'Yes'\n                else:\n                    result += 'No'\n            else:\n                if A[row][col] == '#':\n                    result += 'Yes'\n                else:\n                    result += 'No'\n    return result\n"
    },
    {
        "number": 4357,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = stdin.split()\n    A = int(A)\n    B = int(B)\n    C = int(C)\n    if A >= B+C or A >= (C-1) or A >= (B-1):\n        return 'NO'\n    else:\n        return str(C+B)\n\n'''\nimport math\ndef"
    },
    {
        "number": 4357,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n,a,b,c=map(int,stdin.split())\n    formula=str(a+b+c)\n    if n==1:\n        return formula\n    else:\n        for i in range(n-1):\n            formula=formula+str(a+b+c)\n            a+=1\n            b+=1\n            c+=1\n        formula=formula+str(a+b+c)\n        return formula\n"
    },
    {
        "number": 4357,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c = map(int, stdin.split())\n    if n == 1:\n        return str(a + b)\n    return str(a + b + c)\n"
    },
    {
        "number": 4357,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split(\" \"))\n    return str(max(A + B, C))\n"
    },
    {
        "number": 4357,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n  n = int(stdin)\n  a = [int(stdin[i]) for i in range(n)]\n  a.sort()\n  b = [int(stdin[i]) for i in range(n+1)]\n  b.sort()\n  c = []\n  for i in range(1,n):\n    c.append(a[i-1] + b[i])\n  c.sort()\n  print(c[-1])\n  return str(c[-1])\n\n{\n\ndef"
    },
    {
        "number": 4357,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A = int(stdin[:2])\n    B = int(stdin[2:])\n    C = int(stdin[:2])\n\n    if A*B > C:\n        return str(A*B)\n    return str(C*(A+1))\n\nprint(solution(\"1 2\"))\n"
    },
    {
        "number": 4357,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def findTerm(A, B, C):\n        if A < B:\n            C += '+' + findTerm(A, B, C)\n            A, B, C = B, C, A\n        elif B < C:\n            C += '+' + findTerm(A, B, C)\n            A, B, C = A, B, C\n        elif A < C:\n            C += '+' + findTerm(A, B, C)\n            A, B, C = C, A, B\n        else:\n            pass\n        return C\n    \n    A, B, C = map(int, stdin.split())\n    C = findTerm(A, B, C)\n    return C\n\nInput\n1 2 5\nOutput\n53\nExplanation\nThe integer panels used in the game are printed on the following panels:\n1 + 2 + 5 = 11\n\nThe number of panels arranged as A, B, C is equal to 4, so the maximum possible amount is 53.\n\nThe numbers representing the integer panels are printed on the following panels:\n1 + 1 + 1 + 1 = 11\n2 + 1 + 1 + 1 = 11\n3 + 1 + 1 + 1 = 11\n4 + 1 + 1 + 1 = 11\n5 + 1 + 1 + 1 = 11\nThe number of panels arranged as B, C is equal to 5, so the maximum possible amount is 53.\n\nThe numbers representing the integer panels are printed on the following panels:\n1 + 2 + 5 + 1 = 11\n2 + 1 + 1 + 1 + 1 = 11\n3 + 1 + 1 + 1 + 1 + 1 = 11\n4 + 1 + 1 + 1 + 1 + 1 = 11\n5 + 1 + 1 + 1 + 1 + 1 + 1 = 11\nThe number of panels arranged as A, C is equal to 5, so the maximum possible amount is 53.\n\nNote:\nThe integer panels used in the game are printed on the following panels:\n1 + 2 + 5 + 1 = 11\n2 + 1 + 1 + 1 + 1 = 11\n3 + 1 + 1 + 1 + 1 + 1 = 11\n4 + 1 + 1 + 1 + 1 + 1 + 1 = 11\n5 + 1 + 1 + 1 + 1 + 1 + 1 + 1 = 11\nThe numbers representing the integer panels are printed on the following panels:\n1 + 2 + 5 + 1 + 1 = 11\n2 + 1 + 1 + 1 + 1 + 1 = 11\n3 + 1 + 1 + 1 + 1 + 1 + 1 = 11\n4 + 1 + 1 + 1 + 1 + 1 + 1 + 1 = 11\n5 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 = 11\nExplanation\nThe integer panels used in the game are printed on the following panels:\n1 + 2 + 5 + 1 + 1 + 1 = 11\n2 + 1 + 1 + 1 + 1 + 1 + 1 = 11\n3 + 1 + 1 + 1 + 1 + 1 + 1 + 1 = 11\n4 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 = 11\n5 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 = 11\nThe number of panels arranged as A, C is equal to 5, so the maximum possible amount is 53.\n\nInput\n1 2 4\nOutput\n12\nExplanation\nThe integer panels used in the game are printed on the following panels:\n1 + 2 + 4 = 11\n2 + 1 + 4 = 11\n3 + 1 + 4 = 11\n4 + 1 + 4 = 11\n5 + 1 + 4 = 11\nThe integer panels used in the game are printed on the following panels:\n1 + 2 + 4 + 1 = 11\n2 + 1 + 4 + 1 = 11\n3 + 1 + 4 + 1 = 11\n4 + 1 + 4 + 1 = 11\n5 + 1 + 4 + 1 = 11\nThe number of panels arranged as A, C is equal to 4, so the maximum possible amount is 12.\n\nThe numbers representing the integer panels are printed on the following panels:\n1 + 2 + 4 + 1 + 1 = 11\n2 + 1 + 4 + 1 + 1 = 11\n3 + 1 + 4 + 1 + 1 + 1 = 11\n4 + 1 + 4 + 1 + 1 + 1 + 1 = 11\n5 + 1 + 4 + 1 + 1 + 1 + 1 + 1 + 1 = 11\nThe numbers representing the integer panels are printed on the following panels:\n1 + 2 + 4 + 1 + 1 + 1 + 1 + 1 = 11\n2 + 1 + 4 + 1 + 1 + 1 + 1 + 1 + 1 + 1 = 11\n3 + 1 + 4 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 = 11\n4 + 1 + 4 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 = 11\n5 + 1 + 4 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 = 11\nThe number of panels arranged as B, C is equal to 5, so the maximum possible amount is 12.\n\nInput\n1 2 7\nOutput\n53\nExplanation\nThe integer panels used in the game are printed on the following panels:\n1 + 2 + 7 = 11\n2 + 1 + 7 = 11\n3 + 1 + 7 = 11\n4 + 1 + 7 = 11\n5 + 1 + 7 = 11\nThe integer panels used in the game are printed on the following panels:\n1 + 2 + 7 + 1 = 11\n2 + 1 + 7 + 1 = 11\n3 + 1 + 7 + 1 = 11\n4 + 1 + 7 + 1 = 11\n5 + 1 + 7 + 1 = 11\nThe number of panels arranged as A, C is equal to 5, so the maximum possible amount is 53.\n\nThe numbers representing the integer panels are printed on the following panels:\n1 + 2 + 7 + 1 + 1 = 11\n2 + 1 + 7 + 1 + 1 = 11\n3 + 1 + 7 + 1 + 1 + 1 = 11\n4 + 1 + 7 + 1 + 1 + 1 + 1 = 11\n5 + 1 + 7 + 1 + 1 + 1 + 1 + 1 + 1 = 11\nThe numbers representing the integer panels are printed on the following panels:\n1 + 2 + 7 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 = 11\n2 + 1 + 7 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 = 11\n3 + 1 + 7 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 = 11\n4 + 1 + 7 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 = 11\n5 + 1 + 7 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 = 11\nThe number of panels arranged as B, C is equal to 4, so the maximum possible amount is 53.\n\nThe numbers representing the integer panels are printed on the following panels:\n1 + 2 + 7 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 = 11\n2 + 1 + 7 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 = 11\n3 + 1 + 7 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 = 11\n4 + 1 + 7 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1"
    },
    {
        "number": 4357,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    data = [list(map(int, input().split())) for _ in range(3)]\n    result = 0\n    for a, b, c in data:\n        result += a + b + c\n    return str(result)"
    },
    {
        "number": 4357,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c = map(int, stdin.split())\n    print(max(a+b+c-n, a+b+c))\n"
    },
    {
        "number": 4357,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n  n = int(stdin.strip())\n  for i in range(n-2, -1, -1):\n    ans = '+'.join([str(i+1) for i in range(n-1)])\n    for j in range(1,10):\n      ans +='+ '.join([str(j+1)])\n    print(ans)"
    },
    {
        "number": 4358,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, p_1, p_2, p_N = map(int, stdin.split())\n    d = 0\n    if N == 2:\n        if p_1 + p_2 <= 1000000:\n            d = p_1 * N\n        else:\n            d = p_1 * 1000000 + p_2 * 10000\n    else:\n        d = p_1 * N\n    d = d + p_2 * N\n    d = d + p_N * N\n    return str(d)\n"
    },
    {
        "number": 4358,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin[1])\n    p_1 = int(stdin[2])\n    p_2 = int(stdin[3])\n    p_N = (p_1 + p_2) / 2\n    print(p_N)\n    return str(p_N)\n"
    },
    {
        "number": 4358,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[1])\n    items = [int(item) for item in stdin.split()[2:]]\n    if n == 2:\n        return f\"{sum(items) * 0.5}+{sum(items)}\"\n    else:\n        l = len(items)\n        l2 = l//2\n        u = l - l2\n        d = l + l2\n        p1 = sum(items[:l2])\n        p2 = sum(items[l2:])\n        price = l2 + d\n        p = p1 + p2\n        l3 = p / 2\n        l4 = l2 + 2 * d\n        u2 = u - l2\n        price2 = l2 + d\n        l5 = l2 + u\n        p3 = l3 + l4 + l5\n        return f\"{p3 * 1.5}+{p3 * 2}+{p3 * 1.5}\"\n\n'''\n\ndef"
    },
    {
        "number": 4358,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    N, p_i = map(int, stdin.split())\n    print(p_i)\n    \n    item_price = []\n    \n    # n = N / 2\n    # if n == 0:\n    #     return 0\n    # for i in range(1, N + 1):\n    #     item_price.append(p_i / 2)\n    #     item_price.append(p_i / 2)\n    \n    # print(item_price)\n    \n    # m = n - 1\n    # if m == 0:\n    #     return 0\n    # for i in range(N, N - m, -1):\n    #     item_price.append(p_i / 2)\n    #     item_price.append(p_i / 2)\n    \n    # print(item_price)\n    # print(p_i)\n    \n    # total_price = 0\n    # for i in range(1, N + 1):\n    #     total_price += p_i / 2\n    #     total_price += p_i / 2\n    \n    # if p_i % 2 == 1:\n    #     print(total_price)\n    \n    # print(p_i)\n    # print(p_i / 2)\n    \n    # if p_i % 2 == 0:\n    #     print(total_price)\n    \n    # print(p_i / 2)\n    \n    # total_price = 0\n    # for i in range(1, N + 1):\n    #     total_price += p_i / 2\n    #     total_price += p_i / 2\n    \n    # print(total_price)\n    \n    # if p_i % 2 == 0:\n    #     print(total_price)\n    \n    # print(p_i / 2)\n    \n    # print(p_i / 2)\n    \n    # total_price = 0\n    # for i in range(1, N + 1):\n    #     total_price += p_i / 2\n    #     total_price += p_i / 2\n    \n    # print(total_price)\n    \n    # if p_i % 2 == 1:\n    #     print(total_price)\n    \n    # print(p_i / 2)\n    \n    # print(p_i / 2)\n    \n    # total_price = 0\n    # for i in range(1, N + 1):\n    #     total_price += p_i / 2\n    #     total_price += p_i / 2\n    \n    # print(total_price)\n    \n    # if p_i % 2 == 0:\n    #     print(total_price)\n    \n    # print(p_i / 2)\n    \n    # print(p_i / 2)\n    \n    # total_price = 0\n    # for i in range(1, N + 1):\n    #     total_price += p_i / 2\n    #     total_price += p_i / 2\n    \n    # print(total_price)\n    \n    # if p_i % 2 == 0:\n    #     print(total_price)\n    \n    # print(p_i / 2)\n    \n    # print(p_i / 2)\n    \n    # total_price = 0\n    # for i in range(1, N + 1):\n    #     total_price += p_i / 2\n    #     total_price += p_i / 2\n    \n    # print(total_price)\n    \n    # if p_i % 2 == 0:\n    #     print(total_price)\n    \n    # print(p_i / 2)\n    \n    # print(p_i / 2)\n    \n    # total_price = 0\n    # for i in range(1, N + 1):\n    #     total_price += p_i / 2\n    #     total_price += p_i / 2\n    \n    # print(total_price)\n    \n    # if p_i % 2 == 1:\n    #     print(total_price)\n    \n    # print(p_i / 2)\n    \n    # print(p_i / 2)\n    \n    # total_price = 0\n    # for i in range(1, N + 1):\n    #     total_price += p_i / 2\n    #     total_price += p_i / 2\n    \n    # print(total_price)\n    \n    # if p_i % 2 == 0:\n    #     print(total_price)\n    \n    # print(p_i / 2)\n    \n    # print(p_i / 2)\n    \n    # total_price = 0\n    # for i in range(1, N + 1):\n    #     total_price += p_i / 2\n    #     total_price += p_i / 2\n    \n    # print(total_price)\n    \n    # if p_i % 2 == 0:\n    #     print(total_price)\n    \n    # print(p_i / 2)\n    \n    # print(p_i / 2)\n    \n    # total_price = 0\n    # for i in range(1, N + 1):\n    #     total_price += p_i / 2\n    #     total_price += p_i / 2\n    \n    # print(total_price)\n    \n    # if p_i % 2 == 1:\n    #     print(total_price)\n    \n    # print(p_i / 2)\n    \n    # print(p_i / 2)\n    \n    # total_price = 0\n    # for i in range(1, N + 1):\n    #     total_price += p_i / 2\n    #     total_price += p_i / 2\n    \n    # print(total_price)\n    \n    # if p_i % 2 == 0:\n    #     print(total_price)\n    \n    # print(p_i / 2)\n    \n    # print(p_i / 2)\n    \n    # total_price = 0\n    # for i in range(1, N + 1):\n    #     total_price += p_i / 2\n    #     total_price += p_i / 2\n    \n    # print(total_price)\n    \n    # if p_i % 2 == 1:\n    #     print(total_price)\n    \n    # print(p_i / 2)\n    \n    # print(p_i / 2)\n    \n    # total_price = 0\n    # for i in range(1, N + 1):\n    #     total_price += p_i / 2\n    #     total_price += p_i / 2\n    \n    # print(total_price)\n    \n    # if p_i % 2 == 0:\n    #     print(total_price)\n    \n    # print(p_i / 2)\n    \n    # print(p_i / 2)\n    \n    # total_price = 0\n    # for i in range(1, N + 1):\n    #     total_price += p_i / 2\n    #     total_price += p_i / 2\n    \n    # print(total_price)\n    \n    # if p_i % 2 == 1:\n    #     print(total_price)\n    \n    # print(p_i /"
    },
    {
        "number": 4358,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[-1])\n    p_i = int(stdin.split()[0])\n    p_i = p_i * 2\n    p_i = p_i + 6980\n    p_i = p_i / 2\n    p_i = p_i / 2\n    print(p_i)\n    print(p_i + p_i)\n    print(p_i + p_i / 2 + p_i)\n    return str(p_i + p_i / 2 + p_i / 2)\n"
    },
    {
        "number": 4358,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split())\n    lst = list(map(int, stdin.split()))\n    d, y = lst\n    d = d * 100\n    d = d // y\n    \n    res = 0\n    for i in range(n):\n        while d:\n            if d >= i:\n                d -= i\n                res += i\n            else:\n                d = 0\n        \n    print(res)\n    return str(res)\n\nimport math\ndef"
    },
    {
        "number": 4358,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip().split()[0])\n    p_1, p_2 = map(int, stdin.strip().split())\n    p_1 -= 1\n    p_2 -= 1\n    p_N = N - (p_1 + p_2) / 2\n    # print(N, p_1, p_2, p_N)\n    # print(p_1 + p_2, p_1 / 2 + p_2 / 2, p_1 / 2 + p_2 / 2 + p_1 / 2, p_N)\n    print(p_N + p_1 * (p_1 / 2 + p_2 / 2 + p_1 / 2 + p_2 / 2 + p_1 / 2 + p_2 / 2 + p_1 / 2 + p_2 / 2 + p_1 / 2 + p_2 / 2 + p_1 / 2 + p_2 / 2 + p_1 / 2 + p_2 / 2 + p_1 / 2 + p_2 / 2 + p_1 / 2 + p_2 / 2 + p_1 / 2 + p_2 / 2)\n    return '{:.2f}'.format(p_N)\n\nn = int(input())\nx = list(map(int, input().split()))\nprint(solution(x))"
    },
    {
        "number": 4358,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[1])\n    p_1 = int(stdin.split()[2])\n    p_2 = int(stdin.split()[3])\n    p_N = p_1 + p_2\n    items = list(map(int,stdin.split()[4:]))\n    items.sort(reverse=True)\n    n_items = len(items)\n    p_i = p_1 / p_N\n    total = 0\n    for i in range(n_items):\n        total += (items[i] * (p_i * (p_i + 1) / 2))\n    return str(total)\n'''\n\ndef"
    },
    {
        "number": 4358,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    p_1,p_2,p_N = map(int, stdin.split())\n    n = int(p_N/2)\n    total = n * (p_1 + p_2) + n * p_1 * n\n    return str(total)\n\n\"\"\"\n\nimport math\n\nn = int(input())\np = list(map(int, input().split()))\nn = n - 1\ns = [0] * (n + 1)\nfor i in range(n):\n    s[i + 1] = s[i] + p[i]"
    },
    {
        "number": 4358,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, p_1, p_2, p_3, p_4 = map(int, stdin.split())\n    prices = []\n    for _ in range(N):\n        prices.append(int(input()))\n    p_1 = p_1 * prices[0]\n    p_2 = p_2 * prices[1]\n    p_3 = p_3 * prices[2]\n    p_4 = p_4 * prices[3]\n    if p_4 < 0:\n        print(p_1 + p_2 + p_3)\n    else:\n        print(p_1 + p_2 + p_3 + p_4)\n\n-----Constraints-----\n - 2 \\leq N \\leq 10\n - 100 \\leq p_i \\leq 10000\n - p_i is an even number.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\np_1\np_2\n:\np_N\n\n-----Output-----\nPrint the total amount Mr. Takaha will pay.\n\n-----Sample Input-----\n3\n4980\n7980\n6980\n\n-----Sample Output-----\n15950\n\nThe 7980-yen item gets the discount and the total is 4980 + 7980 / 2 + 6980 = 15950 yen.\nNote that outputs such as 15950.0 will be judged as Wrong Answer.\ndef"
    },
    {
        "number": 4359,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, c = map(int, stdin.split())\n    b = bin(n)\n    \n    a = ''.join(list(b[2:]))\n    \n    def b_reverse(a):\n        rev = ''\n        for i in range(len(a)):\n            rev += chr(ord('A')+i)\n        \n        return rev\n    \n    if b[1] == '1':\n        rev = b_reverse(a)\n        rev = chr(ord('A')+1) + rev\n        if rev[0] == '0':\n            rev = chr(ord('0')+len(rev)) + rev\n        rev = int(rev, 2)\n        print(rev)\n        if c == 0:\n            return str(rev)\n        if rev > c:\n            return str(rev)\n    else:\n        rev = b_reverse(a)\n        rev = chr(ord('0')+1) + rev\n        if rev[0] == '0':\n            rev = chr(ord('0')+len(rev)) + rev\n        rev = int(rev, 2)\n        print(rev)\n        if c == 0:\n            return str(rev)\n        if rev < c:\n            return str(rev)\n    \n    \n    return '0'\n"
    },
    {
        "number": 4359,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D, E = map(int, stdin.split())\n    time = B + C + D + E\n    if time % 10 == 0:\n        return str(time)\n    elif time % 10 in [0, 10, 20, 30, 40, 50, 60]:\n        return str(time - (time % 10))\n    else:\n        return str(time - (time % 10))\n"
    },
    {
        "number": 4359,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    lines = [list(map(int, input().split())) for _ in range(9)]\n\n    while lines[0][0]!= 0:\n        lines.sort(key=lambda x: (x[0], x[1]))\n    for line in lines:\n        if line[0] == line[1]:\n            line[0] = 0\n    return str(min(lines[-1][0], lines[-2][0]))\n\ndef"
    },
    {
        "number": 4359,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s=list(stdin)\n    A,B,C,D,E=map(int,s)\n    if A<0 or B<0 or C<0 or D<0 or E<0 or A>=123 or B>=123 or C>=123 or D>=123 or E>=123:\n        return \"Error\"\n    for i in range(A,E+1):\n        if i%10==0:\n            if s[i]=='A':\n                s[i]=B\n            elif s[i]=='B':\n                s[i]=C\n            elif s[i]=='C':\n                s[i]=D\n            elif s[i]=='D':\n                s[i]=E\n            elif s[i]=='E':\n                break\n    return ''.join(s)\n"
    },
    {
        "number": 4359,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin\n    input = input.split()\n    for i in range(len(input)):\n        input[i] = int(input[i])\n    \n    print(solution2(input))"
    },
    {
        "number": 4359,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # an intial solution\n    d, e = map(int, stdin.split())\n    time = d + e\n    if time < 0:\n        time += 60\n    return str(time)\n\ndef"
    },
    {
        "number": 4359,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n  # Fill this in."
    },
    {
        "number": 4359,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    dic = [int(i) for i in stdin.split('\\n')]\n    count = 0\n    dic.sort()\n    for i in range(len(dic)):\n        if dic[i] % 10 == 0:\n            count += dic[i] // 10\n        if count > len(dic) // 10:\n            break\n    return str(count * 10)\n"
    },
    {
        "number": 4359,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    max_time = 0\n    for line in stdin:\n        c = line.split(' ')\n        c[1] = int(c[1])\n        c[2] = int(c[2])\n        c[3] = int(c[3])\n        if c[1] > max_time:\n            max_time = c[1]\n        if c[2] > max_time:\n            max_time = c[2]\n        if c[3] > max_time:\n            max_time = c[3]\n        \n    return str(max_time)\n'''\n"
    },
    {
        "number": 4359,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n  return str(min(max(map(int, str(input())[::-1])), 123456789))"
    },
    {
        "number": 4360,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    numbers = [int(num) for num in stdin.split()]\n    result = 1\n    for i in numbers:\n        result = result * (1 + result)\n    return str(result)"
    },
    {
        "number": 4360,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n == 1:\n        return \"1\"\n    a = [str(i) for i in range(2, n+1)]\n    for i in range(2, n+1):\n        a.append(str(int(str(a[i-2]) + a[i-1]) % i))\n    return ''.join(a)"
    },
    {
        "number": 4360,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x = list(map(int, stdin.split()))\n    c = [i for i in range(1,x[0]+1)]\n    for i in range(1,len(x)):\n        c[i] += c[i-1]\n    t = len(x)\n    i = 0\n    while t >= 3:\n        if x[i] > 0 and c[i] == c[i+1] and c[i] == c[i+2]:\n            t = t-3\n        i += 1\n    print(round(1/c[i],5))\n    print(round(1/c[i],5))\n    return str(round(1/c[i],5))\n\ndef"
    },
    {
        "number": 4360,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    A = list(map(int, stdin.split()))\n    A.sort(reverse=True)\n    n -= 1\n    ans = n\n    for i in range(n, -1, -1):\n        ans += A[i] * (1/A[i])\n    return str(abs(ans))"
    },
    {
        "number": 4360,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n  inverses = []\n  for line in stdin.splitlines():\n    num, exp = line.split()\n    num = int(num)\n    exp = int(exp)\n    inverses.append((num, exp))\n  \n  for a, b in inverses:\n    if b == 0:\n      continue\n    elif b < 0:\n      return str(a * (b ** -1))\n    else:\n      num = a ** b\n      if num == 1:\n        return str(num)\n  return str(num)\n"
    },
    {
        "number": 4360,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n  a, b = map(int, stdin.split())\n  answer = (a*b)/(a+b)\n  return str(round(answer, -5))\n\n\\prod{odd_prime[n] - prime[n] : odd_prime[n] - prime[n] } = \\frac{1}{\\prod{odd_prime[n] - prime[n] : odd_prime[n] - prime[n] }}\n\\frac{1}{\\frac{1}{odd_prime[n] - prime[n] - 1 : odd_prime[n] - prime[n] - 1 }} = 1\n\\frac{odd_prime[n] - 1 : odd_prime[n] + 1}{\\prod{odd_prime[n] - prime[n] - 1 : odd_prime[n] - prime[n] - 1 }}\n\\frac{1}{odd_prime[n] - odd_prime[n] : odd_prime[n] + 1}\n\n\\frac{1}{\\frac{odd_prime[n] + 1 : odd_prime[n] + 1}{odd_prime[n] + odd_prime[n] - 1} = 1\n\\frac{odd_prime[n] + odd_prime[n] + 1 : odd_prime[n] + odd_prime[n] - 1}{\\frac{odd_prime[n] + 1 : odd_prime[n] + 1}{odd_prime[n] + odd_prime[n] - 1}}\n\\frac{odd_prime[n] + 1 : odd_prime[n] + 1}{\\frac{odd_prime[n] + odd_prime[n] - 1 : odd_prime[n] + odd_prime[n] - 1}{odd_prime[n] + 1}\n\n\\frac{1}{odd_prime[n] + odd_prime[n] - 1} = 1\n\\frac{odd_prime[n] + odd_prime[n] - 1 : odd_prime[n] + odd_prime[n] - 1}{\\frac{1}{odd_prime[n] + odd_prime[n] - 1}\n\n\\frac{1}{odd_prime[n] - odd_prime[n] - 1} = 1\n\\frac{odd_prime[n] - odd_prime[n] : odd_prime[n] - odd_prime[n]}{\\frac{1}{odd_prime[n] - odd_prime[n] - 1}\n\n\\frac{odd_prime[n] - 1 : odd_prime[n] + 1}{\\frac{odd_prime[n] - 1 : odd_prime[n] + 1}{odd_prime[n] + 1}\n\n\\frac{odd_prime[n] + 1 : odd_prime[n] + 1}{\\frac{odd_prime[n] + 1 : odd_prime[n] + 1}{odd_prime[n] + 1 - 1}\n\n\\frac{1}{odd_prime[n] + odd_prime[n] - 1} = 1\n\\frac{odd_prime[n] + odd_prime[n] - 1 : odd_prime[n] + odd_prime[n] - 1}{\\frac{odd_prime[n] + 1 : odd_prime[n] + 1}{odd_prime[n] + 1}\n\n\\frac{1}{odd_prime[n] - odd_prime[n] - 1} = 1\n\\frac{odd_prime[n] - odd_prime[n] : odd_prime[n] - odd_prime[n]}{\\frac{1}{odd_prime[n] - odd_prime[n] - 1}\n\n\\frac{1}{odd_prime[n] + odd_prime[n] - 1} = 1\n\\frac{odd_prime[n] + odd_prime[n] - 1 : odd_prime[n] + odd_prime[n] - 1}{\\frac{1}{odd_prime[n] + odd_prime[n] - 1}\n\n\\frac{1}{odd_prime[n] - odd_prime[n] - 1} = 1\n\\frac{odd_prime[n] - odd_prime[n] : odd_prime[n] - odd_prime[n]}{\\frac{1}{odd_prime[n] - odd_prime[n] - 1}\n\n\\frac{1}{odd_prime[n] + odd_prime[n] - 1} = 1\n\\frac{odd_prime[n] + odd_prime[n] - 1 : odd_prime[n] + odd_prime[n] - 1}{\\frac{1}{odd_prime[n] + odd_prime[n] - 1}\n\n\\frac{1}{odd_prime[n] - odd_prime[n] - 1} = 1\n\\frac{odd_prime[n] - odd_prime[n] : odd_prime[n] - odd_prime[n]}{\\frac{1}{odd_prime[n] - odd_prime[n] - 1}\n\n\\frac{1}{odd_prime[n] + odd_prime[n] - 1} = 1\n\\frac{odd_prime[n] + odd_prime[n] - 1 : odd_prime[n] + odd_prime[n] - 1}{\\frac{1}{odd_prime[n] + odd_prime[n] - 1}\n\n\\frac{1}{odd_prime[n] - odd_prime[n] - 1} = 1\n\\frac{odd_prime[n] - odd_prime[n] : odd_prime[n] - odd_prime[n]}{\\frac{1}{odd_prime[n] - odd_prime[n] - 1}\n\n\\frac{1}{odd_prime[n] + odd_prime[n] - 1} = 1\n\\frac{odd_prime[n] + odd_prime[n] - 1 : odd_prime[n] + odd_prime[n] - 1}{\\frac{1}{odd_prime[n] + odd_prime[n] - 1}\n\n\\frac{1}{odd_prime[n] - odd_prime[n] - 1} = 1\n\\frac{odd_prime[n] - odd_prime[n] : odd_prime[n] - odd_prime[n]}{\\frac{1}{odd_prime[n] - odd_prime[n] - 1}\n\n\\frac{1}{odd_prime[n] + odd_prime[n] - 1} = 1\n\\frac{odd_prime[n] + odd_prime[n] - 1 : odd_prime[n] + odd_prime[n] - 1}{\\frac{1}{odd_prime[n] + odd_prime[n] - 1}\n\n\\frac{1}{odd_prime[n] - odd_prime[n] - 1} = 1\n\\frac{odd_prime[n] - odd_prime[n] : odd_prime[n] - odd_prime[n]}{\\frac{1}{odd_prime[n] - odd_prime[n] - 1}\n\n\\frac{1}{odd_prime[n] + odd_prime[n] - 1} = 1\n\\frac{odd_prime[n] + odd_prime[n] - 1 : odd_prime[n] + odd_prime[n] - 1}{\\frac{1}{odd_prime[n] + odd_prime[n] - 1}\n\n\\frac"
    },
    {
        "number": 4360,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    if x < 3 or x > 1000:\n        return 0\n    else:\n        x = (x + 1) / 2\n        if x < 10:\n            return str(x)\n        else:\n            answer = '%.6f' % (1 / (x - 1) + 1)\n            return answer"
    },
    {
        "number": 4360,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    ans = 0\n\n    for i in range(n):\n        A = [int(x) for x in stdin.split()]\n\n        if sum(A) % (1 << i) == 0:\n            # print(f\"{sum(A)} {i+1} {sum(A)} {sum(A)/(1<<i)} {sum(A)/(1<<i)/sum(A)} {sum(A)/(1<<i)/sum(A)*sum(A)/(1<<i)} {sum(A)/(1<<i)/sum(A)*sum(A)/(1<<i)*sum(A)/(1<<i)}\")\n            ans = 1 << i\n\n    return str(ans)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4360,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def gcd(a: int, b: int) -> int:\n        while b:\n            a, b = b, a % b\n        return a\n\n    N, A = [int(x) for x in stdin.split()]\n    x = 1\n    while x < N:\n        x = A * x\n    g = gcd(N, x)\n    return int(g / A)\n\n\"\"\"\n\nimport math\ndef"
    },
    {
        "number": 4360,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    numbers = []\n    i = 0\n    j = len(stdin) - 1\n    while j >= 0:\n        current = 0\n        while j >= 0:\n            if stdin[i] =='':\n                j -= 1\n                break\n            elif stdin[i] == ',':\n                break\n            else:\n                current += int(stdin[i]) * (j - i)\n                i += 1\n                j -= 1\n        if i >= 0 and i <= len(stdin) - 1:\n            if stdin[i] =='':\n                numbers.append(current)\n            else:\n                numbers.append(int(stdin[i]) / current)\n        j = len(stdin) - 1\n    numbers.sort()\n    print(sum(numbers))\n    return str(sum(numbers) / len(numbers))"
    },
    {
        "number": 4361,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    h_1 = int(input())\n    h_2 = int(input())\n    h_3 = int(input())\n    h_N = int(input())\n    \n    if h_N < h_2 + h_3:\n        h_N = h_2 + h_3\n    elif h_2 < h_N + h_3:\n        h_2 = h_N + h_3\n    elif h_3 < h_N + h_2:\n        h_3 = h_N + h_2\n    else:\n        h_N = h_2 + h_3\n    \n    if h_N < N:\n        h_N = N\n    elif h_2 < h_N + h_3:\n        h_N = h_N + h_3\n    elif h_3 < h_N + h_2:\n        h_3 = h_N + h_2\n    else:\n        h_N = h_2 + h_3\n        \n    print(h_max(h_1, h_2, h_N))\n    print(h_min(h_1, h_2, h_N))\n    print(h_N)\n    return \"\"\n\"\"\"\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        N, K = map(int, stdin.split())\n        h_1 = int(input())\n        h_2 = int(input())\n        h_3 = int(input())\n        h_N = int(input())\n        \n        if h_N < h_2 + h_3:\n            h_N = h_2 + h_3\n        elif h_2 < h_N + h_3:\n            h_2 = h_N + h_3\n        elif h_3 < h_N + h_2:\n            h_3 = h_N + h_2\n        else:\n            h_N = h_2 + h_3\n            \n        if h_N < N:\n            h_N = N\n        elif h_2 < h_N + h_3:\n            h_N = h_N + h_3\n        elif h_3 < h_N + h_2:\n            h_3 = h_N + h_2\n        else:\n            h_N = h_2 + h_3\n            \n        print(h_max(h_1, h_2, h_N))\n        print(h_min(h_1, h_2, h_N))\n        print(h_N)\n        return \"\""
    },
    {
        "number": 4361,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    h_list = list(map(int, stdin.split()))\n    h_list = sorted(h_list)\n    h_list = [0 for _ in range(N)]\n    for i in range(N):\n        h_list[i] = h_list[i]\n    h_list[K-1] = h_list[K-1]\n    h_list = sorted(h_list)\n    h_list = [0 for _ in range(N)]\n    for i in range(N):\n        h_list[i] = h_list[i]\n    h_list = sorted(h_list)\n    h_list = [0 for _ in range(N)]\n    for i in range(N):\n        h_list[i] = h_list[i]\n    h_list = sorted(h_list)\n    print(h_list[K-1] - h_list[K-2] + h_list[K-3])"
    },
    {
        "number": 4361,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    numbers = list(map(int, stdin.split()))\n    h_1 = numbers[0]\n    h_2 = numbers[1]\n    h_3 = numbers[2]\n    h_4 = numbers[3]\n    h_5 = numbers[4]\n    h_max = max(h_1, h_2, h_3, h_4, h_5)\n    h_min = min(h_1, h_2, h_3, h_4, h_5)\n    return str(h_max - h_min)\n\"\"\"\nimport sys\ninput = sys.stdin.readline\n\ndef"
    },
    {
        "number": 4361,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    h_list = [int(i) for i in input().split()]\n    if h_list[0] < h_list[1]:\n        h_list[0], h_list[1] = h_list[1], h_list[0]\n        h_list[2], h_list[3] = h_list[3], h_list[2]\n        h_list[4], h_list[5] = h_list[5], h_list[4]\n        h_list[6], h_list[7] = h_list[7], h_list[6]\n    h_list.sort()\n    return str(h_list[len(h_list) - 1] - h_list[0])"
    },
    {
        "number": 4361,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    heights = []\n    for _ in range(N):\n        heights.append(int(stdin.split()[0]))\n    heights = sorted(heights)\n    h_max = heights[0]\n    h_min = heights[-1]\n    for i in range(1, N):\n        if heights[i] <= h_min:\n            h_min = heights[i]\n        if heights[i] > h_max:\n            h_max = heights[i]\n    print(h_max-h_min)\n"
    },
    {
        "number": 4361,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    decorated = [0] * N\n    for _ in range(N):\n        decorated[K - 1] = decorated[K - 1] + 1\n        K -= 1\n    h_max = max(decorated)\n    h_min = min(decorated)\n    return str(h_max - h_min)\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4361,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    heights = [int(x) for x in stdin.split()]\n    heights.sort()\n    if (k == heights[0]):\n        heights.pop(0)\n        heights.append(heights[-1] + heights[-2])\n    if (k > heights[-1]):\n        heights.append(heights[-1] + heights[-2])\n    if (heights[-1] - heights[-2]) > 2:\n        return str(heights[-1] - heights[-2])\n    else:\n        return str(heights[-1] - heights[-2])\n\ndef"
    },
    {
        "number": 4361,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    h_1, h_2, h_3, h_4, h_5 = map(int, stdin.split())\n    max_h = max(h_1, h_2, h_3, h_4, h_5)\n    min_h = min(h_1, h_2, h_3, h_4, h_5)\n    k = int(min_h / max_h)\n    if k == 0:\n        return str(max_h)\n    else:\n        return str(h_1 + (k * max_h - h_1)) + ',' + str(h_2 + (k * max_h - h_2)) + ',' + str(\n            h_3 + (k * max_h - h_3)) + ',' + str(h_4 + (k * max_h - h_4)) + ',' + str(\n            h_5 + (k * max_h - h_5))"
    },
    {
        "number": 4361,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    K, h = [int(i) for i in stdin.split()]\n    return '{:.0f}'.format(max(h_i - h_j for h_j, h_i in zip(h, h[1:] + [0])))"
    },
    {
        "number": 4361,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    h_1 = int(stdin.split()[0])\n    h_2 = int(stdin.split()[1])\n    h_N = h_1 + h_2\n    for _ in range(K):\n        h_1, h_2 = h_2, h_1 + h_2\n    h_max = max(h_1, h_2)\n    h_min = min(h_1, h_2)\n    h_avg = (h_max + h_min) / 2\n    print(max(h_max - h_min, h_avg - h_min))\n    return '?'\n'''\n\nN = int(input())\ntree_height = []\nfor _ in range(N):\n    tree_height.append(int(input()))\n\nprint(max(tree_height))\nprint(min(tree_height))\n"
    },
    {
        "number": 4362,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    alphabet = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"]\n    solution_phrase = \"\"\n    for letter in stdin:\n        if letter in alphabet:\n            solution_phrase += letter\n        else:\n            solution_phrase += \" \"\n    return solution_phrase\n    \n    pass\n"
    },
    {
        "number": 4362,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin) == 1:\n        return stdin[0].upper()\n    alpha = stdin.split()[1]\n    if alpha.isalpha() == True:\n        print(alpha.upper())\n    else:\n        print(alpha)\n    return stdin[0].upper()\n\n\n\n-----Sample Output-----\nA\nB is uppercase, so we should print A.\ndef"
    },
    {
        "number": 4362,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split()\n    for i in a:\n        if i.islower():\n            print('a')\n            return 'a'\n        else:\n            print('a')\n            return 'a'\n\n    return 'a'\n\n-----Test-----\nimport doctest\n"
    },
    {
        "number": 4362,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    alpha = input()\n    if alpha.isalpha():\n        return alpha\n    else:\n        return 'a'\n\"\"\"\ndef"
    },
    {
        "number": 4362,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    alpha = ord(stdin[0])\n    for ch in stdin[1:]:\n        if ch.isalpha():\n            alpha += 1\n        else:\n            break\n    print(alpha - ord(stdin[0]))"
    },
    {
        "number": 4362,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split()\n    if len(a) < 2:\n        return 'error'\n    if a[0].isupper():\n        return 'error'\n    if a[1].islower():\n        return 'error'\n    return 'A'\n"
    },
    {
        "number": 4362,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    str1 = stdin.strip().upper()\n    for i in str1:\n        if i.isupper():\n            print(i)\n        else:\n            print('a')\n    return str1\n\n---Runtime---\nRuntime: 20 ms, faster than 14.73% of Python3 online submissions for Uppercase or Lowercase.\nMemory Usage: 18.2 MB, less than 87.64% of Python3 online submissions for Uppercase or Lowercase.\n\"\"\""
    },
    {
        "number": 4362,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    alpha = stdin.split()[0]\n    case = alpha[::-1]\n    for i in range(len(case)):\n        if case[i] == 'A':\n            print('a')\n        elif case[i] == 'b':\n            print('b')\n        else:\n            print(case[i])"
    },
    {
        "number": 4362,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # code here\n    alpha = stdin.split(\" \")\n    if len(alpha) == 1:\n        if alpha[0].isupper():\n            return \"A\"\n        else:\n            return \"a\"\n    else:\n        if alpha[0].isupper():\n            return solution(stdin.split(\" \"))\n        else:\n            return \"A\"\n"
    },
    {
        "number": 4362,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    if len(stdin) < 2:\n        return stdin[0].upper() + stdin[1:]\n    return solution(stdin[1:]) + solution(stdin[0].lower())\n"
    },
    {
        "number": 4363,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    K, S = stdin.split()\n    K = int(K)\n    S = int(S)\n    X = 0\n    Y = 0\n    Z = 0\n    for s in range(S):\n        X, Y, Z = map(int, input().split())\n        if X+Y+Z == S:\n            print(3)\n            return\n    print(0)\n    return\n\nfor _ in range(int(input())):\n    solution(input())\n"
    },
    {
        "number": 4363,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    X = [int(i) for i in stdin.split()]\n    Y = [int(i) for i in stdin.split()]\n    Z = [int(i) for i in stdin.split()]\n\n    ret = []\n    for i in range(N):\n        if X[i] + Y[i] + Z[i] == S:\n            ret.append(i)\n    return''.join([str(i) for i in ret])\n"
    },
    {
        "number": 4363,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    K, S = map(int, stdin.split())\n    X = set()\n    Y = set()\n    Z = set()\n    \n    X.add(0)\n    Y.add(0)\n    Z.add(0)\n    for _ in range(S):\n        X.add(map(int, stdin.split()))\n        Y.add(map(int, stdin.split()))\n        Z.add(map(int, stdin.split()))\n    \n    ans = 0\n    \n    for X_ in X:\n        for Y_ in Y:\n            for Z_ in Z:\n                if X_ + Y_ + Z_ == K:\n                    ans += 1\n    return str(ans)"
    },
    {
        "number": 4363,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(int(stdin[0])):\n        x, y, z = map(int, stdin.split())\n        if (x+y+z)%2 == 0:\n            print(str(x+y+z))\n    return \"\""
    },
    {
        "number": 4363,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(K, S):\n        return 0 <= K < 2500 and S <= 3*K\n\n    n = int(stdin.strip())\n    K = int(stdin.strip())\n    S = int(stdin.strip())\n    ans = 0\n    for _ in range(n):\n        X, Y, Z = map(int, stdin.strip().split())\n        if not is_valid(K, S) or is_valid(X, Y) or is_valid(Y, Z) or is_valid(X, Z):\n            continue\n        else:\n            ans += 1\n    print(ans)\n\n\n---------------------------------------------------------------------------------\n\n'''\n\ndef"
    },
    {
        "number": 4363,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    for line in stdin.splitlines():\n        X, Y, Z = map(int, line.split())\n        if (X + Y + Z) == S:\n            print(1)\n            return \n    print(0)\n"
    },
    {
        "number": 4363,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    k, s = map(int, stdin.split(' '))\n    X, Y, Z = map(int, input().split())\n    # for i in range(s, k+s, s):\n    #     if X + Y + Z == s:\n    #         print(i)\n    #         return i\n    count = 0\n    for i in range(k, k+s):\n        for j in range(i, i+s):\n            for k in range(j, j+s):\n                if (X+Y+Z) == s:\n                    count += 1\n    return count\n'''"
    },
    {
        "number": 4363,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    X, Y, Z = map(int, stdin.split())\n    if (X+Y+Z) % 3 == 0:\n        if X == 0:\n            return str(Z+1)\n        elif Y == 0:\n            return str(Z+2)\n        elif X == 2:\n            return str(Z+3)\n        elif Y == 2:\n            return str(Z+4)\n        elif X == 1:\n            return str(Z+5)\n        elif Y == 1:\n            return str(Z+6)\n    else:\n        return str(Z)\n"
    },
    {
        "number": 4363,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def check(num: int) -> bool:\n        for i in range(3):\n            if i < 2 and num == num + 1:\n                continue\n            if i == 2 and num == num + 1:\n                return True\n            if num == num + 1 and i!= 2:\n                return True\n            if num == num - 1 and i!= 0:\n                return True\n            if i == 0 and num == num - 1:\n                return True\n            if num == num + 1 and i == 2:\n                return True\n        return False\n\n    K, S = map(int, stdin.split())\n\n    for i in range(K + 1):\n        for j in range(K + 1):\n            for k in range(K + 1):\n                if check(i + j + k):\n                    print(i, j, k)\n                    return\n    return\n\n-----Bonus-----\n-----------------------\n\n\"\"\"\n\n\nclass Solution:\n    def solve(self, N, K):\n        def check(num):\n            for i in range(3):\n                if i < 2 and num == num + 1:\n                    continue\n                if i == 2 and num == num + 1:\n                    return True\n                if num == num + 1 and i!= 2:\n                    return True\n                if num == num - 1 and i!= 0:\n                    return True\n                if i == 0 and num == num - 1:\n                    return True\n                if num == num + 1 and i == 2:\n                    return True\n            return False\n\n        s = 0\n        for i in range(N):\n            for j in range(N - 1, -1, -1):\n                for k in range(N - 1, -1, -1):\n                    if check(i + j + k):\n                        s += 1\n                        break\n        return s\n\n    def solve1(self, N, K):\n        dp = [0] * (N + 1)\n        dp[0] = 1\n        for i in range(1, N + 1):\n            for j in range(i):\n                if K - 1 <= dp[i - j - 1]:\n                    dp[i] += dp[i - j - 1]\n        return dp[N]\n\n\nobj = Solution()\nN = int(input())\nK = int(input())\nprint(obj.solve1(N, K))\n"
    },
    {
        "number": 4363,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    k, s = map(int, stdin.split())\n    if s == k:\n        return \"3\"\n    return \"1\"\n"
    },
    {
        "number": 4364,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    y, m, d = map(int, stdin.split(' '))\n    if m == m:\n        if d < 2:\n            m = '01'\n            d = '20'\n        elif d < 4:\n            m = '02'\n            d = '01'\n        elif d < 6:\n            m = '03'\n            d = '02'\n        elif d < 8:\n            m = '04'\n            d = '03'\n        elif d < 10:\n            m = '05'\n            d = '04'\n        elif d < 12:\n            m = '06'\n            d = '05'\n        elif d < 14:\n            m = '07'\n            d = '06'\n        elif d < 16:\n            m = '08'\n            d = '07'\n        elif d < 18:\n            m = '09'\n            d = '08'\n        elif d < 20:\n            m = '10'\n            d = '09'\n        elif d < 24:\n            m = '11'\n            d = '10'\n        else:\n            m = '12'\n            d = '11'\n    else:\n        if d < 2:\n            d = '19'\n            m = '19'\n        elif d < 4:\n            d = '20'\n            m = '19'\n        elif d < 6:\n            d = '21'\n            m = '20'\n        elif d < 8:\n            d = '22'\n            m = '21'\n        elif d < 10:\n            d = '23'\n            m = '22'\n        elif d < 12:\n            d = '24'\n            m = '23'\n        elif d < 14:\n            d = '25'\n            m = '24'\n        elif d < 16:\n            d = '26'\n            m = '25'\n        elif d < 18:\n            d = '27'\n            m = '26'\n        elif d < 20:\n            d = '28'\n            m = '27'\n        elif d < 24:\n            d = '29'\n            m = '28'\n        elif d < 26:\n            d = '30'\n            m = '29'\n        elif d < 28:\n            d = '31'\n            m = '30'\n        else:\n            d = '32'\n            m = '31'\n    return '%s%s%s%s%s' % (y, m, d, '01', '%s%s%s%s' % ('01', '%s%s' % (d, '01', '%s%s' % (d, d)), '%s%s%s%s' % ('01', '%s%s' % (d, '01', '%s%s' % (d, d)), '01'), '%s%s%s%s' % ('%s%s' % (d, '01', '%s%s' % (d, d)), '%s%s%s%s' % ('%s%s' % (d, '01', '%s%s' % (d, d)), '01'), '%s%s%s%s' % ('%s%s' % (d, '01', '%s%s' % (d, d)), '%s%s%s%s' % ('%s%s' % (d, '01', '%s%s' % (d, d)), '01'), '%s%s%s%s' % ('%s%s' % (d, '01', '%s%s' % (d, d)), '%s%s%s%s' % ('%s%s' % (d, '01', '%s%s' % (d, d)), '01')))\n\nprint(solution(\"1905\"))\n"
    },
    {
        "number": 4364,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    answer = ''\n    year, month, day = map(int, stdin.split())\n    if day == 31:\n        month_days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    elif month == 2:\n        month_days = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    else:\n        month_days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    for x in range(1, month_days[month - 1] + 1):\n        answer += str(x) + ','\n    answer += str(month_days[month - 1]) + ','\n    for x in range(day - 1, month_days[month - 1]):\n        answer += str(x) + ','\n    answer += str(month_days[month - 1]) + ','\n    answer += str(day) + ','\n    answer += str(month) + ','\n    answer += str(year) + ','\n    answer += 'NA'\n    return answer\n\ndef"
    },
    {
        "number": 4364,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    answer = 'NA'\n    check = []\n    for word in stdin.split():\n        check.append(word[:-2])\n    for word in check:\n        if word == 'YY':\n            for i in range(len(word)-2):\n                if int(word[i]) == 1:\n                    answer += 'Y'\n                    break\n        if word == 'MM':\n            for i in range(len(word)-2):\n                if int(word[i]) == 1:\n                    answer += 'M'\n                    break\n        if word == 'AM':\n            for i in range(len(word)-2):\n                if int(word[i]) == 1:\n                    answer += 'A'\n                    break\n        if word == 'NA':\n            answer = 'NA'\n    if answer == 'NA':\n        return 'NA'\n    return answer"
    },
    {
        "number": 4364,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def parse(s: str) -> tuple[int, int]:\n        return int(s[:2]), int(s[2:])\n\n    def check(s: str) -> bool:\n        n = len(s)\n        if n!= 4 or s[-1]!= 'M' or (s[0]!= 'Y' and s[1]!= 'Y'):\n            return False\n        if int(s[2]) > 31 or int(s[3]) > 31:\n            return False\n        return True\n\n    def get_year(s: str) -> int:\n        s = s.replace('X', '9')\n        return int(s[:2])\n\n    def get_month(s: str) -> int:\n        s = s.replace('X', '9')\n        return int(s[2:])\n\n    def valid(s: str, year_flag: int, month_flag: int) -> bool:\n        for i in range(len(s) - 1):\n            if i % 2:\n                if year_flag == s[i]:\n                    if i + 1 == len(s):\n                        return False\n                    else:\n                        if get_year(s[i:i+2])!= get_year(s[i+1:i+3]):\n                            return False\n                elif get_month(s[i:i+2])!= get_month(s[i+1:i+3]):\n                    return False\n            else:\n                if s[i]!= '0' and (get_month(s[i:i+2])!= get_month(s[i+1:i+3]) or int(s[i:i+2]) > 31):\n                    return False\n        return True\n\n    def is_valid(s: str) -> bool:\n        for i in range(len(s) - 1):\n            if i % 2:\n                if s[i]!= '0' and (get_month(s[i:i+2])!= get_month(s[i+1:i+3]) or int(s[i:i+2]) > 31):\n                    return False\n            else:\n                if get_year(s[i:i+2])!= get_year(s[i+1:i+3]):\n                    return False\n        return True\n\n    def solution2(stdin: str) -> str:\n        s = stdin.split(' ')\n        for i in range(len(s)):\n            if not is_valid(s[i]):\n                return s[i]\n        return 'NA'\n\n    return solution2(stdin)\n\ndef"
    },
    {
        "number": 4364,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    yy = s[2]\n    mm = s[1]\n    if yy == mm:\n        answer = \"NA\"\n    elif mm == \"00\":\n        answer = \"NA\"\n    elif mm[0] == \"1\":\n        if mm[1] == \"2\":\n            answer = \"AMBIGUOUS\"\n        elif mm[1] == \"3\":\n            answer = \"AMBIGUOUS\"\n    elif mm[0] == \"4\":\n        if mm[1] == \"3\":\n            answer = \"AMBIGUOUS\"\n        elif mm[1] == \"4\":\n            answer = \"AMBIGUOUS\"\n    elif mm[0] == \"5\":\n        if mm[1] == \"4\":\n            answer = \"AMBIGUOUS\"\n        elif mm[1] == \"5\":\n            answer = \"AMBIGUOUS\"\n    else:\n        answer = \"NA\"\n    print(answer)\n    return answer"
    },
    {
        "number": 4364,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = []\n    for c in stdin:\n        a.append(int(c))\n    print(a)\n    for i in range(len(a) - 2):\n        if a[i] % 100 == 0:\n            a[i] -= 100\n            a[i + 1] += 100\n        elif a[i] % 400 == 0:\n            a[i] -= 400\n            a[i + 1] += 400\n        else:\n            a[i] += a[i + 1]\n            a[i + 1] = 0\n    for i in range(len(a) - 2):\n        if a[i] % 4 == 0:\n            a[i] -= 4\n            a[i + 1] += 4\n        elif a[i] % 4 == 3:\n            a[i] -= 4\n            a[i + 1] += 4\n        else:\n            a[i] += a[i + 1]\n            a[i + 1] = 0\n    a[0] = 1\n    for i in range(len(a)):\n        if a[i] == 0:\n            a[i] = 4\n        elif a[i] == 1:\n            a[i] = 2\n        elif a[i] == 2:\n            a[i] = 3\n        elif a[i] == 3:\n            a[i] = 1\n        elif a[i] == 4:\n            a[i] = 0\n    print(a)\n    a = []\n    for i in range(len(a)):\n        a.append(a[i])\n    print(a)\n    a.sort()\n    print(a)\n    print(a[-2])\n    print(a[-1])\n    if a[-2]!= a[-1]:\n        print('NA')\n    else:\n        if a[-2] == a[-1]:\n            print('AMBIGUOUS')\n        else:\n            print('YM')\n    for i in range(len(a) - 2):\n        if a[i] == a[i + 1]:\n            print('NA')\n        else:\n            if a[i] == a[i + 2]:\n                print('NA')\n            else:\n                print('AMBIGUOUS')\n    for i in range(len(a) - 2):\n        if a[i] == a[i + 2]:\n            print('NA')\n        else:\n            if a[i] == a[i + 3]:\n                print('NA')\n            else:\n                print('AMBIGUOUS')\n    print(a)\n    return a[-1]\n\nprint(solution('1905'))\n"
    },
    {
        "number": 4364,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    months = {'01': 'Jan', '02': 'Feb', '03': 'Mar', '04': 'Apr', '05': 'May', '06': 'Jun', '07': 'Jul', '08': 'Aug', '09': 'Sep', '10': 'Oct', '11': 'Nov', '12': 'Dec'}\n    answer = ''\n    for i in range(len(stdin)):\n        if i % 2 == 0:\n            answer += str(months[stdin[i]] + stdin[i + 1]) + stdin[i + 2] + stdin[i + 3] + stdin[i + 4]\n        else:\n            answer += stdin[i] + stdin[i + 1] + stdin[i + 2] + stdin[i + 3] + stdin[i + 4]\n    return answer\n"
    },
    {
        "number": 4364,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(\" \"))\n    days = [i + 1 for i in range(n - 1)]\n    months = [i + 1 for i in range(1, 13)]\n    ans = \"\"\n    while len(days) > 0:\n        day = days.pop()\n        month = months.pop()\n        ans += f\"{day}_{month}\"\n    if n == 1:\n        ans += \"AM\"\n    else:\n        ans += f\"{n}M\"\n    return ans\n\ndef"
    },
    {
        "number": 4364,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    digits = []\n    for c in stdin:\n        if c.isdigit():\n            digits.append(c)\n    digits.sort()\n    for i in range(len(digits) - 3, -1, -1):\n        if digits[i] == \"0\":\n            digits[i] = \"2\"\n        if digits[i] == \"1\":\n            digits[i] = \"1\"\n    digits.reverse()\n    for i in range(len(digits)):\n        if digits[i] == \"0\":\n            digits[i] = \"0\"\n        if digits[i] == \"1\":\n            digits[i] = \"1\"\n    digits = digits[:3]\n    if digits == [\"05\", \"09\"]:\n        return \"NA\"\n    for i in range(3, len(digits) - 2, 2):\n        if digits[i] == \"0\" and digits[i + 1] == \"0\":\n            return \"NA\"\n    if digits[0] == \"0\" and digits[2] == \"0\":\n        return \"NA\"\n    if digits[0] == \"0\" and digits[2] == \"1\":\n        return \"AMBIGUOUS\"\n    if digits[0] == \"1\" and digits[2] == \"0\":\n        return \"NA\"\n    if digits[0] == \"1\" and digits[2] == \"1\":\n        return \"AMBIGUOUS\"\n    if digits[0] == \"0\" and digits[2] == \"1\":\n        return \"NA\"\n    if digits[0] == \"0\" and digits[2] == \"2\":\n        return \"NA\"\n    return \"NA\""
    },
    {
        "number": 4364,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    date = []\n    day = 0\n    month = 0\n    year = 0\n    \n    for c in stdin:\n        if c.isdigit():\n            date.append(c)\n            day = int(c)\n            \n        elif c == \"A\" or c == \"B\" or c == \"C\" or c == \"D\" or c == \"E\" or c == \"F\":\n            if len(date) > 2:\n                month = int(date[0])\n                year = int(date[1])\n            elif len(date) == 2:\n                if c == \"A\":\n                    month = 1\n                    year = int(date[0])\n                elif c == \"B\":\n                    month = 2\n                    year = int(date[0])\n                elif c == \"C\":\n                    month = 3\n                    year = int(date[0])\n                elif c == \"D\":\n                    month = 4\n                    year = int(date[0])\n                elif c == \"E\":\n                    month = 5\n                    year = int(date[0])\n                elif c == \"F\":\n                    month = 6\n                    year = int(date[0])\n                \n            else:\n                month = int(date[0])\n                year = int(date[1])\n        \n        else:\n            if len(date) > 2:\n                month = int(date[0])\n                year = int(date[1])\n            elif len(date) == 2:\n                if c == \"A\":\n                    month = 1\n                    year = int(date[0])\n                elif c == \"B\":\n                    month = 2\n                    year = int(date[0])\n                elif c == \"C\":\n                    month = 3\n                    year = int(date[0])\n                elif c == \"D\":\n                    month = 4\n                    year = int(date[0])\n                elif c == \"E\":\n                    month = 5\n                    year = int(date[0])\n                elif c == \"F\":\n                    month = 6\n                    year = int(date[0])\n            \n    return f\"{year}{month}{day}\".replace(\"0\", \"\")\n\n\ndef"
    },
    {
        "number": 4365,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    answer = 0\n    for k in range(2, int(len(stdin)**0.5) + 1):\n        if int(k**0.5) % 2 == 1:\n            answer += 1\n    return str(answer)\n\nInput\nK    Integer    \n2\n\nOutput\n4\n\nSample Input\nK    Integer    \n5\n\nOutput\n5\n\nExplanation\nPair: (1,1), (2,2), (2,3), (2,4), (2,5)\n\nConstraints\n2<=K<=100\n1<=K<=2^30\n\"\"\"\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        return str(2**0.5) + \"!\" + str(len(stdin) - 2)"
    },
    {
        "number": 4365,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n,k = map(int,stdin.split())\n    if n % 2 == 0 or n % 2 == 1:\n        return str(0)\n    else:\n        return str(1) * (k // 2)\n"
    },
    {
        "number": 4365,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    for i in range(k, n+1):\n        if (i % 2) == 0:\n            print(1)\n            continue\n        print(2)\n        print(2 * pow(i, 2))\n        print(i - pow(i, 2))\n        print(2 * (pow(i, 2) - 1))\n    return"
    },
    {
        "number": 4365,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return sum(map(lambda x: (x+1)%2==0, map(int, stdin.split())))\n\"\"\"\n\nclass Solution:\n    def evenoddnumber(self, K):\n        '''\n        :type K: int\n        :rtype: str\n        '''\n        def evenoddnumber(n):\n            if n%2==0:\n                return '0'\n            else:\n                return str(n)\n        def list(x):\n            if x=='0':\n                return ''\n            else:\n                return list(x)\n        def solution(n):\n            if n==1:\n                return '1'\n            elif n==2:\n                return '2'\n            elif n%2==0:\n                return list(evenoddnumber(n//2))\n            else:\n                return list(list(str(n-1))+list(evenoddnumber(n//2)))\n        return solution(K)\n"
    },
    {
        "number": 4365,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n  \n  def check(arr):\n    if (len(arr) == 1):\n      return arr\n    if (arr[1]%2!=0):\n      arr[1] = arr[1] + arr[1]//2\n      return check(arr)\n    else:\n      return arr[1]\n  \n  n = int(stdin.strip())\n  answer = ''\n  for i in range(n):\n    pair = [int(j) for j in stdin.strip().split()]\n    answer += check(pair) + '\\n'\n  return answer"
    },
    {
        "number": 4365,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n  n = int(stdin.strip())\n  p1 = 1\n  p2 = 1\n  for i in range(2, n + 1):\n    if p1 % 2 == 0:\n      p2 += 1\n      p1 += p2\n    else:\n      p2 += 1\n      p1 += p2\n  return str(p1 - p2)\n\ndef"
    },
    {
        "number": 4365,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin.split('\\n')[0]\n    return solution_v1(string)\n\ndef"
    },
    {
        "number": 4365,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def isEven(n):\n        return (n % 2 == 0)\n\n    def isOdd(n):\n        return (n % 2 == 1)\n\n    def countPair(N):\n        count = 0\n        for i in range(N+1):\n            if isEven(i) and isOdd(i):\n                count += 1\n        return count\n\n    N = int(stdin.strip())\n    if N == 0:\n        return \"0\"\n    if N == 1:\n        return \"1\"\n    if N == 2:\n        return str(2)\n    ways = countPair(N)\n    answer = ''\n    for i in range(ways):\n        if isEven(i+2) and isOdd(i+1):\n            answer += str(2)\n        elif isEven(i+1) and isOdd(i):\n            answer += str(1)\n        else:\n            answer += str(1)\n    return answer\n\n'''\n"
    },
    {
        "number": 4365,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    # Split string into list of strings.\n    a, b = stdin.split(\" \")\n    \n    # Convert each char to an int.\n    a = [int(i) for i in a.split(\",\")]\n    b = [int(i) for i in b.split(\",\")]\n    \n    # The max number of ways is the sum of all the combinations of 2 numbers.\n    # There can be the number of ways to choose two even numbers from the two numbers.\n    \n    answer = 0\n    \n    # Iterate through all possible pairs of odd numbers.\n    # i = 2, j = 1\n    for i in range(2, len(a) + 1):\n        for j in range(1, i + 1):\n            answer += (j - 1) * (i - j)\n    \n    return str(answer)\n\"\"\""
    },
    {
        "number": 4365,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    result = 1\n    for _ in range(1,int(stdin)):\n        result = result * 2\n        result = result / 2\n    return str(result)"
    },
    {
        "number": 4366,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    hour, minute = map(int, stdin.split())\n    if 0 <= hour < 24:\n        hour += 12\n    return str(hour)\n'''\nclass Solution:\n    def __init__(self):\n        self.hour = 0\n        self.minute = 0\n    def getHour(self, m, s):\n        m,s = divmod(s, 60)\n        if s <= 0:\n            return (m,0)\n        else:\n            return (m,s)\n    def getMinute(self, m, s):\n        m,s = divmod(s, 60)\n        if s <= 0:\n            return (0,m)\n        else:\n            return (s,m)\n    def findNext(self,h,m,s):\n        h,m,s = self.getHour(h,m), self.getMinute(h,m), self.getMinute(h,m)\n        h += 12\n        if h >= 24:\n            h = h % 12\n        m += 12\n        if m >= 60:\n            m = m % 60\n        s += 60\n        if s >= 60:\n            s = s % 60\n        return (h,m,s)\n    def __str__(self):\n        return str(self.hour) + \":\" + str(self.minute)\n\nprint(Solution().findNext(3,0,5))"
    },
    {
        "number": 4366,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    hour, day = map(int, stdin.split())\n    if hour > 23:\n        hour = hour - 24\n    return str(hour)\n\n\n  \n"
    },
    {
        "number": 4366,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(b - a)\n\ndef"
    },
    {
        "number": 4366,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    hour, minute = map(int, stdin.split(' '))\n    minutes = 0\n    if minute > 59:\n        minutes = minute - 60\n    else:\n        minutes = minute\n    hour = hour * 60 + minutes\n    return str(hour)\n"
    },
    {
        "number": 4366,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(' ')[0])\n    m = int(stdin.split(' ')[1])\n    h = m + (n % 12) * 24\n    return str(h)\n"
    },
    {
        "number": 4366,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    hour = map(lambda x: int(x) - 9, stdin.split(\":\"))\n    if 0 in hour:\n        hour.remove(0)\n    hour.sort()\n    print(hour[0])\n    return str(hour[0])\n\n---------------Submissions-----------------------\n## Runtime: 48 ms, faster than 95.28% of Python3 online submissions for AtCoder Day 23.\n## Memory Usage: 15.3 MB, less than 41.57% of Python3 online submissions for AtCoder Day 23.\n"
    },
    {
        "number": 4366,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a > b:\n        return str(b)\n    else:\n        return str(a)\n\n-----Idea-----\n\ndef"
    },
    {
        "number": 4366,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A,B = list(map(int,stdin.split()))\n    h = [0,1,2,3,4,5,6,7,8,9]\n    cnt = [0,1,2,3,4,5,6,7,8,9]\n    for i in range(A,B+1):\n        if cnt[h[i-1]] == 0:\n            cnt[h[i-1]] = 1\n            h.append(h[i-1])\n            h.pop(h[i-1])\n    return ''.join(map(str,h))\n\n### \ud83d\udea8 Don't change the code below \ud83d\udc47\n"
    },
    {
        "number": 4366,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n,m = map(int,stdin.split())\n    return str(min(m*60+n*3600,23))\n\nprint(solution(\"9:00 p.m.\"))"
    },
    {
        "number": 4366,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    answer = ''\n    lst = []\n    for i in stdin:\n        lst.append(i)\n    lst = list(filter(lambda x: x.isdigit(), lst))\n    hours = int(lst[0])\n    minutes = int(lst[1])\n    hours = int(hours)\n    minutes = int(minutes)\n    count = 0\n    for i in range(hours, 23):\n        if i in lst:\n            if count == 0:\n                answer = i\n            else:\n                answer = count * 60 + i - count * 60\n            count += 1\n    return answer\n\ndef"
    },
    {
        "number": 4367,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, R = map(int, stdin.split())\n    inner_rating = R - (10 - 2) * 100\n    print(inner_rating)\n    return str(inner_rating)\n"
    },
    {
        "number": 4367,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, R = map(int, stdin.split())\n    res = 0\n    for i in range(N):\n        res += R * (10 - i)\n    return str(res)"
    },
    {
        "number": 4367,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    l = [0 for _ in range(n + 1)]\n    l[1] = r\n    for i in range(2, n + 1):\n        l[i] = r + (l[i - 2] * 10 - 100) // 10\n    print(l[n])\n    return '%.2f' % l[n]\n\ndef"
    },
    {
        "number": 4367,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n  N, R = map(int, stdin.split())\n  rt_dict = {}\n  for _ in range(N):\n    arr = stdin.split()\n    rt = int(arr[1])\n    if rt in rt_dict:\n      rt_dict[rt] += rt\n    else:\n      rt_dict[rt] = rt\n  displayed_rating = 0\n  for key in rt_dict.keys():\n    displayed_rating += key * (10 - rt_dict[key])\n  return str(displayed_rating)"
    },
    {
        "number": 4367,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, R = map(int, stdin.split())\n    R = R - (10 - N) * 100\n    print(R)\n    return str(R)\n"
    },
    {
        "number": 4367,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, R = map(int, stdin.split())\n    K = 0\n    for i in range(N):\n        contest_lst = map(int, stdin.split())\n        K = max(K, max(contest_lst))\n    return str(K-R)"
    },
    {
        "number": 4367,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, R = map(int, stdin.split())\n    K = sorted(list(map(int, stdin.split())))\n    \n    L, R, D = 0, 0, 0\n    \n    for i in range(N):\n        if K[i] < 10:\n            D += 10**(K[i]-10)\n        else:\n            L = 10**i\n            break\n    \n    for i in range(R):\n        if K[i] > 10:\n            D -= 10**(K[i]-10)\n        else:\n            R = K[i]\n            break\n    \n    print(D*(R-L)+100)\n\n'''\n\ndef"
    },
    {
        "number": 4367,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, R = map(int, stdin.split())\n    K = 100 * (10 - N)\n    R = R * (10 - K)\n    return str(int(R) - R)"
    },
    {
        "number": 4367,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    contents = stdin.split()\n    N, R = int(contents[0]), int(contents[1])\n    \n    return '%d %d' % (N + R - (10-2) * (10 - 2), R)\n"
    },
    {
        "number": 4367,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, r = [int(x) for x in stdin.split()]\n    if n == r:\n        print(0)\n    elif n < 10:\n        print(r - ((10 - n) * r))\n    else:\n        print((10 - n) * r + r - (10 - (n - 10)))\n    return ''\n"
    },
    {
        "number": 4368,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    if N == 0:\n        return str(K)\n    if K == 0:\n        return str(N)\n    res = str(bin(N)[2:])\n    for i in range(K-2, -1, -1):\n        res = '1' + res\n    return res"
    },
    {
        "number": 4368,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    answer = 0\n    for num in stdin:\n        answer += int(num)\n    print(answer)\n    return str(answer)"
    },
    {
        "number": 4368,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    while N >= 10:\n        N //= 10\n    while N >= 1:\n        N //= K\n        print(int(str(N)[1:]))\n        N -= 1\n    return str(int(str(N)[1:])).lstrip('0')\n\ndef"
    },
    {
        "number": 4368,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    res = [str(bin(N).count('1'))]\n    for _ in range(K - 1):\n        res.append(str(bin(N).count('1')))\n    return '\\n'.join(res)\n"
    },
    {
        "number": 4368,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s, K = map(int, stdin.split())\n    \n    def int_to_bin(num: int) -> str:\n        num = str(num)\n        return '1'*len(num) if num.startswith('1') else '0'*len(num)\n        \n    def get_digits(num: int) -> str:\n        num = bin(num)\n        return num[2:]\n    \n    def is_digit(num: int) -> bool:\n        return num.startswith('1')\n    \n    def is_digit_of_base_K(num: int, baseK: int) -> bool:\n        return sum(num.count(i) for i in str(num)) >= baseK\n    \n    def get_baseK_by_int(num: int) -> int:\n        num = str(num)\n        return len(num) - num.count('1')\n    \n    def get_baseK_by_bin(bin_num: str) -> int:\n        return len(bin_num) - len(bin_num.count('1'))\n    \n    def get_baseK_by_digit(digit_num: int) -> int:\n        return (len(str(digit_num)) - digit_num.count('1'))\n    \n    baseK = get_baseK_by_int(s)\n    \n    digit_num_count = 0\n    digit_num_set = set()\n    \n    for i in range(1, s+1):\n        if is_digit(i):\n            digit_num_count += 1\n            if digit_num_count == K:\n                print(len(get_digits(i)))\n                return\n        else:\n            if is_digit_of_base_K(i, baseK) == True:\n                digit_num_set.add(i)\n            elif is_digit_of_base_K(i, baseK) == False:\n                digit_num_count = 0\n            \n    digit_num_count = 0\n    digit_num_set = set()\n    \n    for i in range(1, s+1):\n        if is_digit(i) == True:\n            digit_num_count += 1\n            if digit_num_count == K:\n                print(len(get_digits(i)))\n                return\n        else:\n            if is_digit_of_base_K(i, baseK) == True:\n                digit_num_set.add(i)\n            elif is_digit_of_base_K(i, baseK) == False:\n                digit_num_count = 0\n    \n    digit_num_count = 0\n    digit_num_set = set()\n    \n    for i in range(1, s+1):\n        if is_digit(i) == False:\n            if is_digit_of_base_K(i, baseK) == True:\n                digit_num_set.add(i)\n            elif is_digit_of_base_K(i, baseK) == False:\n                digit_num_count = 0\n            \n    digit_num_count = 0\n    digit_num_set = set()\n    \n    for i in range(1, s+1):\n        if is_digit(i) == False:\n            if is_digit_of_base_K(i, baseK) == True:\n                digit_num_set.add(i)\n            elif is_digit_of_base_K(i, baseK) == False:\n                digit_num_count = 0\n    \n    digit_num_count = 0\n    digit_num_set = set()\n    \n    for i in range(1, s+1):\n        if is_digit(i) == True:\n            digit_num_set.add(i)\n            \n    print(len(digit_num_set))"
    },
    {
        "number": 4368,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    digit = '0'\n    res = 0\n    for digit in str(N):\n        num = int(digit) * K\n        if num <= 9:\n            res += num\n        else:\n            digit = str(num % 10)\n    return digit + str(res)\n    \n"
    },
    {
        "number": 4368,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a,b = map(int,stdin.split())\n    if a==1 and b==1:\n        return \"1\"\n    return solution(str(a)+str(b))\n\n-----Sample Input-----\n7 10\n10\n\n-----Sample Output-----\n2\n\nIn binary, 7 is represented as 1011.\ndef"
    },
    {
        "number": 4368,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n,k=map(int,stdin.split())\n    if not n and k<=0: return 0\n    elif n<=10**9:\n        return int(str(n).lstrip('0')[::-1])\n    else:\n        base=10**9\n        while n>=base:\n            n=n//base\n            base=base*10\n        if k<=0: return 0\n        elif k==1: return n\n        else:\n            num=n\n            if k>=2:\n                num=n*num\n                for i in range(2,k+1):\n                    num=num//(i)\n            return int(str(num)[::-1][::-1])\n"
    },
    {
        "number": 4368,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin) == 1:\n        return str(int(stdin[0]))\n    else:\n        return solution(stdin[1:]) + solution(stdin[0])\n\"\"\"\n\nclass Solution:\n    def NumberOf1(self, n):\n        count = 0\n        while n >= 1:\n            if n % 2!= 0:\n                count += 1\n            n //= 2\n        return count\n"
    },
    {
        "number": 4368,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n > 10**k:\n        return \"No\"\n    else:\n        b = bin(n)[2:]\n        if b[-1]!= '0':\n            return \"No\"\n        else:\n            return len(b[0:])\n\n-----Above is the input, does not need to be correct.\nimport re\n\ndef"
    },
    {
        "number": 4369,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    st = []\n    for i in range(n):\n        line = stdin.strip().split()\n        st.append(line)\n    p = st[0]\n    print(p[0],p[1],p[2],p[3],p[4])\n    return p[0]\n"
    },
    {
        "number": 4369,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    book_table = []\n    for _ in range(N):\n        book_table.append(list(map(str, stdin.strip().split())))\n    answer = 0\n    for i in range(N-1):\n        if book_table[i][0] == '1' and book_table[i+1][0] == '1':\n            answer += 1\n            book_table[i] = book_table[i][1:3]\n            book_table[i+1] = book_table[i+1][1:3]\n    for i in range(N-1):\n        if book_table[i][0] == '1':\n            answer += 1\n            book_table[i] = book_table[i][1:3]\n    return str(answer)\n\n\n\n-----Constraints-----\n - 1 \\leq N \\leq 100\n\n-----Input-----\nInput is given from STDIN.\n\n-----Output-----\nPrint an integer representing the answer.\n\n-----Sample Input-----\n4\n\n-----Sample Output-----\n4\n\nBy printing the one-st, two-nd and three-rd pages, we can print all the data on 3 sheets of paper.\n\"\"\""
    },
    {
        "number": 4369,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\nclass Solution:\n    def solution(self, N: int) -> str:\n        return '1' * (N//2) + '2' * (N//2) + '3' * (N//2) + '4' * (N//2) + '5' * (N//2)"
    },
    {
        "number": 4369,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, data = map(int, stdin.split())\n    pages = [list(map(int, stdin.split())) for _ in range(N)]\n    sheets = [list(map(int, stdin.split())) for _ in range(N)]\n    sheets.append([0, 0, 0, 0])\n\n    data = [[data[i][j] for j in range(len(data[i]))] for i in range(len(sheets))]\n\n    while data:\n        for i in range(N):\n            if data[i][0] == 0:\n                data.pop(i)\n                continue\n            for j in range(len(data[i])):\n                if data[i][j] == 0:\n                    data[i].pop(j)\n                    continue\n                if data[i][j] == 0:\n                    data[i][j] = data[i][j] * 2\n                    data[i][j] += 1\n                    continue\n                for k in range(j + 1, len(data[i])):\n                    data[i][k] += data[i][k] * 2\n                    data[i][k] += 1\n                    if data[i][k] > data[i][j]:\n                        data[i][k] = data[i][k] * 2\n                    else:\n                        data[i][k] = data[i][k] // 2\n        data = [[data[i][j] for j in range(len(data[i]))] for i in range(len(sheets))]\n\n    for i in range(N):\n        print(*sheets[i])\n        for j in range(len(sheets[i])):\n            print(sheets[i][j])\n        print()\n    return '\\n'.join(str(i) for i in data)"
    },
    {
        "number": 4369,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n  N = int(stdin)\n  answer = []\n  for i in range(N):\n    data = list(map(int, stdin.split()))\n    answer.append(data[0]*2)\n    answer.append(data[1]*2)\n  return '\\n'.join(map(str, answer))\n"
    },
    {
        "number": 4369,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    return str(N // 2)\n\n\"\"\"\nN = int(input())"
    },
    {
        "number": 4369,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip().split()[0])\n    A = [stdin.strip().split()[1:] for _ in range(N)]\n    return str(A[0][0]) + '\\n' + str(A[1][0]) + '\\n' + str(A[2][0]) + '\\n' + str(A[3][0]) + '\\n' + str(A[4][0])"
    },
    {
        "number": 4369,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    data = []\n    for _ in range(N):\n        data.append(list(map(str, stdin.split())))\n    \n    print('\\n'.join(data[1][0], data[2][0], data[3][0], data[4][0]))\n    return '\\n'.join(data[1][0], data[2][0], data[3][0], data[4][0])"
    },
    {
        "number": 4369,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n  \n  n = int(stdin)\n  if n <= 3:\n    print(3)\n  else:\n    print(n//2)\n  return \"\"\n"
    },
    {
        "number": 4369,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    k = 1\n    while N-k > 0:\n        if N-k == 1:\n            print(1)\n            N-=1\n            k+=1\n        elif N-k == 2:\n            print(2)\n            N-=2\n            k+=1\n        elif N-k == 3:\n            print(3)\n            N-=3\n            k+=1\n        elif N-k == 4:\n            print(4)\n            N-=4\n            k+=1\n        elif N-k == 5:\n            print(5)\n            N-=5\n            k+=1\n        else:\n            N-=6\n            k+=1\n    return \"0\"\n\n\"\"\"\ndef"
    },
    {
        "number": 4370,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    while a + b > 16:\n        a, b = b, a + b // 2\n    while a + b > 4:\n        a, b = a + b // 4, a + b // 2\n    if b < 16:\n        return \"Yay!\"\n    return \"Sorry, \" + \"A and B\" if a > b else \"Sorry, \" + \"B and A\""
    },
    {
        "number": 4370,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    pieces = []\n    for _ in range(n):\n        s = input().strip()\n        pieces.append(s)\n    return ''.join(pieces)\n'''\ndef"
    },
    {
        "number": 4370,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    [A, B] = map(int, stdin.split())\n    if (A + B) % 2 == 0:\n        return \"Yay!\"\n    elif (A + B) % 2 == 1:\n        return \"Takahashi\"\n"
    },
    {
        "number": 4370,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.split()\n    A, B = int(data[0]), int(data[1])\n    left, right = (A-1) // A, A // A\n    answer = \"\"\n    if left + right < 16:\n        answer += \"(\" + str(left) + \",\" + str(right) + \")\"\n    else:\n        answer += \"(((((((((((((((((((((\"\n    if left + right == 16:\n        answer += \"(((((((((((((((((((((((((((\"\n    if left + right == 16:\n        answer += \"(((((((((((((((((((((((((((\"\n    return answer\n\n---------------------------------------------------------------------------------"
    },
    {
        "number": 4370,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # pdb.set_trace()\n    t = list(map(str, stdin.split()))\n    A, B = t[0], t[1]\n    if A < B:\n        A, B = B, A\n    t = list(map(str, stdin.split()))\n    A, B = t[0], t[1]\n    if A + B == 16:\n        print('Yay!')\n    else:\n        print('(', A, '+', B, ')', 'does not take two adjacent pieces of cake', sep='')\n\n    return ''\n\n\nprint(solution(\"8 4\"))\n"
    },
    {
        "number": 4370,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\ndef"
    },
    {
        "number": 4370,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    squares = []\n    for _ in range(0, len(stdin) - 1, 2):\n        squares.append(int(stdin[: len(stdin) - 1]))\n        squares.append(int(stdin[len(stdin) - 1: len(stdin) - 2]))\n\n    squares.sort(reverse=True)\n\n    if len(squares) == 1:\n        return \"Yay!\"\n    elif squares == [1, 3, 3]:\n        return \"A is to eat A\"\n    elif squares == [3, 3, 1]:\n        return \"B is to eat B\"\n    elif squares == [3, 3, 2]:\n        return \"C is to eat A\"\n    else:\n        return \"A is to eat A, B is to eat B, C is to eat A, B is to eat B, C is to eat A, B is to eat B\"\n\nprint(solution(\"3 4\"))\nprint(solution(\"5 4\"))\nprint(solution(\"3 4 3 3 3 3 3\"))\nprint(solution(\"1 5 1 2 3 1 1 2 3 1 3 2 1\"))"
    },
    {
        "number": 4370,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nConstraints\n- 1 \u2264 A \u2264 16,\n- 1 \u2264 B \u2264 16.\n- A+B \u2264 16.\n- 1 \u2264 E869120.\n\nInput Format\nThe first line contains two space-separated integers, A and B.\n\nConstraints\n- 1 \u2264 A \u2264 16,\n- 1 \u2264 B \u2264 16.\n\nOutput Format\nPrint Yay!\n\nSample Input\n5 4\n2\n4\n3\n2\nSample Output\nYay!\n\nExplanation\nE869120 and square1001's 16-th birthday is coming soon.\n\n-----Constraints-----\n - A and B are integers between 1 and 16 (inclusive).\n - A+B is at most 16.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nA B\n\n-----Output-----\nIf both E869120 and square1001 can obey the instruction in the note and take desired numbers of pieces of cake, print Yay!; otherwise, print :(.\n\n-----Sample Input-----\n5 4\n2 4\n3 2\n2\nSample Output\nYay!\n\nExplanation\nE869120 and square1001's 16-th birthday is coming soon.\n\"\"\"\n\nfrom sys import stdin\n\ndef"
    },
    {
        "number": 4370,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a,b = map(int,stdin.split())\n    if a+b > 16:\n        print(\"Not a valid number of pieces\")\n    else:\n        return \"Yay\"\n\n-----Sample Input-----\n5 4\n\n-----Sample Output-----\nNo\n\n-----Constraints-----\n - A and B are integers between 1 and 16 (inclusive).\n - A+B is at most 16.\n\"\"\"\n\ndef"
    },
    {
        "number": 4370,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # code here\n    return 'Yay!'\n'''\nclass Solution:\n    def solution(self, n, m, k):\n        if n==m:\n            return 'Yay!' if k==1 else 'Yay!'\n        l,r=m,m\n        left,right=k,k\n        while l<=r:\n            if l==r:\n                return 'Yay!' if k==1 else 'Yay!'\n            \n            mid=(l+r)//2\n            if self.isValid(mid):\n                l=mid\n            else:\n                r=mid-1\n        if self.isValid(left):\n            return Solution.solution(self,left,right)\n        else:\n            return Solution.solution(self,right,left)\n\n    def isValid(self,n):\n        if 0<=n<=16:\n            return True\n        else:\n            return False\n'''\n\nclass Solution:\n    def solution(self, n, m, k):\n        if n==m:\n            return 'Yay!' if k==1 else 'Yay!'\n        \n        l,r=m,m\n        left,right=k,k\n        while l<=r:\n            if l==r:\n                return 'Yay!' if k==1 else 'Yay!'\n            \n            mid=(l+r)//2\n            if self.isValid(mid):\n                l=mid\n            else:\n                r=mid-1\n        if self.isValid(left):\n            return Solution.solution(self,left,right)\n        else:\n            return Solution.solution(self,right,left)\n\nclass Solution:\n    def solution(self, n, m, k):\n        if n==m:\n            return 'Yay!' if k==1 else 'Yay!'\n        \n        l,r=m,m\n        left,right=k,k\n        while l<=r:\n            if l==r:\n                return 'Yay!' if k==1 else 'Yay!'\n            \n            mid=(l+r)//2\n            if self.isValid(mid):\n                l=mid\n            else:\n                r=mid-1\n        if self.isValid(left):\n            return Solution.solution(self,left,right)\n        else:\n            return Solution.solution(self,right,left)\n\nclass Solution:\n    def solution(self, n, m, k):\n        if n==m:\n            return 'Yay!' if k==1 else 'Yay!'\n        \n        l,r=m,m\n        left,right=k,k\n        while l<=r:\n            if l==r:\n                return 'Yay!' if k==1 else 'Yay!'\n            \n            mid=(l+r)//2\n            if self.isValid(mid):\n                l=mid\n            else:\n                r=mid-1\n        if self.isValid(left):\n            return Solution.solution(self,left,right)\n        else:\n            return Solution.solution(self,right,left)"
    },
    {
        "number": 4371,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def digits(s: str) -> int:\n        return int(\"\".join(filter(str.isdigit, s)))\n\n    def find_missing_number(x: int) -> int:\n        if x in xs:\n            return x\n        xs.add(x)\n        return find_missing_number(x + 1)\n\n    xs = set()\n    return min(find_missing_number(digits(s)), find_missing_number(digits(s) + 1))\n\"\"\"\n\ndef"
    },
    {
        "number": 4371,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    X, S = stdin[0], stdin[1]\n    x, y = 0, 0\n    for i in range(len(S)):\n        if S[i] in '0123456789':\n            if i < len(S) - 1:\n                if S[i] == S[i + 1] and i < len(S) - 2:\n                    x += int(S[i]) - int(S[i + 1])\n                    y += 1\n                else:\n                    y += int(S[i]) - int(S[i + 1])\n                    x += 1\n            else:\n                x += int(S[i]) - int(S[i + 1])\n                y += 1\n        else:\n            y += 1\n    return str(abs(x - y))"
    },
    {
        "number": 4371,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    num = ''.join(str(i) for i in range(10))\n    start, end = 0, len(num)-1\n    while end >= start:\n        if int(num[start:end]) + 1!= int(num[end-1:end]) - 1:\n            return str(int(num[start:end]) + 1 - int(num[end-1:end]))\n        start += 1\n        end -= 1\n    return str(int(num[start:end]) - 1)\n"
    },
    {
        "number": 4371,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = list(stdin)\n    x = int(s[0])\n    \n    def swap_str(x, y):\n        return s[x] + s[y] + s[y+1] + s[x+1]\n    def match(s):\n        for i in range(len(s)):\n            if s[i]!= s[i-1] and s[i]!= s[i+1] and s[i]!= s[i-2] and s[i]!= s[i+2]:\n                return False\n        return True\n    \n    def count(s):\n        count = 0\n        for i in range(len(s)):\n            if s[i]!= s[i-1] and s[i]!= s[i+1] and s[i]!= s[i-2] and s[i]!= s[i+2]:\n                count += 1\n        return count\n        \n    for i in range(len(s)-1):\n        s[i], s[i+1] = s[i+1], s[i]\n        x = int(s[0])\n        if x == 753 and match(s):\n            return str(int(x) - 753)\n    return \"not possible\"\n\ndef"
    },
    {
        "number": 4371,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    answer = 0\n    while len(stdin) > 0:\n        # string split by''\n        array = stdin.split()\n        # str list to array\n        arr = [int(i) for i in array]\n        # count the digit in the array\n        cnt = 0\n        # for each digit\n        for i in range(1, len(arr)):\n            if arr[i] > arr[i-1] and arr[i] > arr[i+1]:\n                cnt += 1\n        # if cnt == 1, then no need to keep adding\n        if cnt == 1:\n            answer += arr[0]\n            break\n        # increase cnt by 1\n        cnt += 1\n        # reduce by 1 and print\n        for i in range(len(arr)-1):\n            if arr[i] > arr[i+1] and arr[i] > arr[i-1]:\n                answer += arr[i+1] - arr[i]\n                break\n    return answer"
    },
    {
        "number": 4371,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    result = ''\n    X = 753\n    for i in range(len(stdin)):\n        X -= int(stdin[i])\n        result += str(X)\n    return result\n\"\"\"\ndef"
    },
    {
        "number": 4371,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\ndef"
    },
    {
        "number": 4371,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    X, Y, Z = stdin\n    n = len(X)\n    ans = 9 * (n - 1)\n    for i in range(1, n - 1):\n        ans -= int(X[i]) * (i - 1)\n        ans += int(Y[i - 1]) * (i - 1)\n        ans -= int(Z[i - 1]) * (i - 1)\n    return str(ans)\n\"\"\"\n\ndef"
    },
    {
        "number": 4371,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    from math import log10\n    def convert_list_to_string(lst: list[str]) -> str:\n        lst.sort(key=lambda x: log10(x))\n        return ''.join(lst)\n\n    def find_prime_factors(n: int) -> list[int]:\n        factors = []\n        for i in range(2, n):\n            if n % i == 0:\n                factors.append(i)\n        return factors\n\n    def get_next_prime(p: int):\n        for i in range(p+2, 1000000, 2):\n            if (i*i)%p == 0:\n                return i\n        return None\n\n    def get_greater_consecutive_digits(n: int) -> int:\n        def convert_to_list_of_digits(n: int) -> list[int]:\n            return list(map(int, str(n)))\n\n        res = []\n        for i in range(len(convert_to_list_of_digits(n))):\n            res.append(convert_to_list_of_digits(n)[i])\n        return res\n    \n    def get_factor(n: int) -> int:\n        if n == 1:\n            return 1\n        else:\n            return n * get_factor(n-1)\n        \n    def get_prime_factors(n: int) -> list[int]:\n        if n == 1:\n            return []\n        if n < 3:\n            return [n]\n        else:\n            return [get_prime_factors(n//3)] + get_prime_factors(n//3 + 1)\n        \n    def is_prime(n: int) -> bool:\n        if n == 1:\n            return False\n        if n == 2:\n            return True\n        if n % 2 == 0:\n            return False\n        if n % 3 == 0:\n            return False\n        for i in range(5, int(math.sqrt(n)) + 1, 6):\n            if n % i == 0:\n                return False\n        return True\n    \n    def print_prime_factors(n: int) -> None:\n        print(get_prime_factors(n))\n\n    def count_digits(n: int) -> int:\n        count = 0\n        while n > 0:\n            count += 1\n            n = n//10\n        return count\n    \n    prime_factors = get_prime_factors(len(convert_list_to_string(solution(stdin))))\n    digits = get_next_prime(len(prime_factors))\n    prime_digits = get_greater_consecutive_digits(digits)\n    diff = 0\n    for i in range(len(prime_factors)):\n        if prime_digits[i] in prime_factors[:i]:\n            diff += prime_factors[i]\n        \n    print(diff)\n    return diff"
    },
    {
        "number": 4371,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lunlun, master, x = 0, 0, 0\n    for s in stdin:\n        x = x * 10 + int(s)\n        master = x if master == 0 else (master * 10 + x)\n        lunlun = max(lunlun, master - x)\n    return str(lunlun)"
    },
    {
        "number": 4372,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin.strip())\n    a = [int(i) for i in stdin.split(' ')]\n    a.sort()\n    \n    #\uc804\ubd80 \ud640\uc218\uc778 \uacbd\uc6b0, \uc804\ubd80 \uc9dd\uc218\uc778 \uacbd\uc6b0\n    #\ubaa8\ub4e0 \uacbd\uc6b0\uc758 \uc218\ub294 \uc804\uccb4 \uacbd\uc6b0\uc758 \uc218\ubcf4\ub2e4 1\uac1c \ub354\ud558\uae30\n    #\uc131\ub9bd\uac00 \uc9c4\ud589\ub418\uc5c8\uc744 \ub54c \ud640\uc218\uba74, \uc9dd\uc218\uba74\n    #\ub204\uc801\ud569\uc744 \ub450 \ubc88 \ub9cc\ub4e4\uc5b4\uc11c \ud640\uc218\uc911 \ud070 \uacbd\uc6b0\ub9cc \uc0ac\uc6a9\n    \n    if a[0] % 2 == 1:\n        ans = 0\n    else:\n        ans = a[0]//2 + a[1]//2\n    \n    for i in range(1, n):\n        if a[i] % 2 == 0:\n            ans += a[i]//2 + a[i+1]//2\n        else:\n            ans += a[i]//2\n            \n    return str(ans)"
    },
    {
        "number": 4372,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    ans = []\n    for i in range(1, n + 1):\n        for j in range(i):\n            if a[j] > a[i] and a[j]!= 0:\n                a[j], a[i] = a[i], a[j]\n                ans.append(a[j] - a[i])\n    return str(min(ans))\n"
    },
    {
        "number": 4372,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = [int(i) for i in stdin.strip().split(\" \")]\n    \n    y = 1\n    z = 1\n    \n    for i in range(n):\n        for j in range(n):\n            if a[j]!= a[i]:\n                y += 1\n            if a[j] < a[i]:\n                z += 1\n    \n    return str(y) + str(z)\n"
    },
    {
        "number": 4372,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip().split()[1])\n    a = list(map(int, stdin.strip().split()[2:]))\n    y = sum(a)\n    z = sum(map(int, stdin.strip().split()[3:]))\n    result = min(y, z)\n    print(result)\n    return str(result)\n\ndef"
    },
    {
        "number": 4372,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.strip())\n    min_people = 0\n    min_num_of_people = 0\n    for i in range(1, a + 1):\n        a_i, a_j = map(int, stdin.strip().split())\n        min_num_of_people = max(min_num_of_people, a_j)\n        min_people = max(min_people, a_i)\n    print(min_people, min_num_of_people)\n    return str(min_num_of_people) + \" \" + str(min_people)\n\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= a_1, a_2, a_3 <= 10^{9}\n\n------Time complexity:- O(n)\nn \\le n_1, n_2, n_3 \\le n\n\n------Space complexity:- O(1)\nIn each case we want to keep track of minimum number of people who could have broken into the basement and take each of them its own count.\nIn each case we want to keep track of the minimum number of people that have broken into the basement and take each of them's own count.\n\n\"\"\"\n\nn = int(input())\na = list(map(int, input().strip().split()))\nmin_num_of_people = [0, 0]\nfor i in range(n):\n    a_i = int(input().strip())\n    min_num_of_people[0] += a_i\n    min_num_of_people[1] += a_i\nprint(min_num_of_people[0], min_num_of_people[1])\n"
    },
    {
        "number": 4372,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, input().split()))\n    ret = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if a[i] > a[j] and a[i] > a[k] and a[j] > a[k]:\n                    ret += 1\n    print(ret)\n    return ''\n\nRuntime: 36 ms, faster than 60.00% of Python3 online submissions for Minimum Number of People Who Can Break Into The Basement.\nMemory Usage: 13.5 MB, less than 46.98% of Python3 online submissions for Minimum Number of People Who Can Break Into The Basement.\n\nclass Solution:\n    def solve(self, stdin: str) -> str:\n        n = int(stdin)\n        a = list(map(int, input().split()))\n        ret = 0\n        for i in range(n):\n            for j in range(i+1, n):\n                if a[i] > a[j] and a[i] > a[k]:\n                    ret += 1\n        print(ret)\n        return ''\n\nRuntime: 34 ms, faster than 10.01% of Python3 online submissions for Minimum Number of People Who Can Break Into The Basement.\nMemory Usage: 13.5 MB, less than 46.98% of Python3 online submissions for Minimum Number of People Who Can Break Into The Basement."
    },
    {
        "number": 4372,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, a = [int(x) for x in stdin.split(\" \")]\n    y = set(range(1, n + 1)) - set(range(1, n * 2))\n    z = set(range(n)) - set(range(1, n * 2))\n    x = [0] * (n + 1)\n    y = [0] * (n + 1)\n    z = [0] * (n + 1)\n    y[0] = a[0]\n    z[0] = a[-1]\n\n    for i in range(1, n):\n        x[i] = a[i] - a[i - 1]\n        y[i] = a[i] - a[i - 1]\n        z[i] = a[i] - a[i - 1]\n        if i % 2 == 0:\n            y[i] = y[i] - y[i - 1]\n        if i % 2 == 1:\n            z[i] = z[i] - z[i - 1]\n\n    for i in range(n, 0, -1):\n        x[i] = (x[i - 1] + z[i - 1]) * (i / 2)\n        if i % 2 == 0:\n            y[i] = (y[i - 1] + z[i - 1]) * (i / 2)\n        if i % 2 == 1:\n            z[i] = (z[i - 1] + y[i - 1]) * (i / 2)\n\n    print(y[0], z[0])\n    return str(y[0]) + str(z[0])\n\ndef"
    },
    {
        "number": 4372,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    i, j = 0, 0\n    y = 0\n    z = 0\n    while a[i]!= a[j]:\n        y += a[i]\n        z += a[j]\n        i += 1\n        j += 1\n    y += a[i]\n    z += a[j]\n    return str(y) +'' + str(z)\n"
    },
    {
        "number": 4372,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = [int(n_i) for n_i in stdin.strip().split()]\n\n    y_count = a[0]\n    z_count = a[1]\n\n    for _ in range(2, n):\n        y_count -= a[0]\n        z_count -= a[1]\n        a[0], a[1] = a[1], a[0]\n        y_count -= 1\n        z_count -= 1\n\n    y = y_count if y_count > 0 else 1\n    z = z_count if z_count > 0 else 1\n\n    return str(y) +'' + str(z)\n\n\nfor _ in range(int(input())):\n    print(solution(input()))\n"
    },
    {
        "number": 4372,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n        n = int(stdin)\n        a = map(int,stdin.split())\n        a.sort()\n        return str(len(set(a)) - len(set(a[:n-1]))) + \" \" + str(a[n-1])\n"
    },
    {
        "number": 4373,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *programs = map(int, stdin.split())\n    programs = list(map(lambda p: p - 1, programs))\n    solutions = []\n    for i in range(len(programs) - 1):\n        solution = 0\n        solution += programs[i]\n        for j in range(i + 1, len(programs)):\n            solution += programs[j]\n            if solution > programs[j]:\n                solution = programs[j]\n        solutions.append(solution)\n    return str(min(solutions))"
    },
    {
        "number": 4373,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    arr = list(map(int, stdin.strip().split()))\n    for i in range(n-1):\n        arr[i], arr[i+1] = arr[i+1], arr[i]\n    return str(max(arr))\n"
    },
    {
        "number": 4373,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    n_arr = [int(x) for x in stdin.split()]\n    n_arr.sort()\n    \n    i = 1\n    while i < n:\n        if n_arr[i - 1] + 1 > n_arr[i]:\n            i += 1\n        else:\n            i += 1\n            \n    return n - i\n"
    },
    {
        "number": 4373,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = [0 for _ in range(1000)]\n    n = int(stdin.strip())\n    for _ in range(n):\n        a[int(stdin.strip())] += 1\n    \n    for i in range(len(a)):\n        if a[i] == 1:\n            a[i] = -1\n    \n    a = sorted(a, reverse=True)\n    \n    for i in range(len(a)):\n        if a[i] == 0:\n            a[i] = 1\n        elif a[i] == 1:\n            a[i] = -1\n    \n    return str(len(set(a)))"
    },
    {
        "number": 4373,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    contest_list = []\n    for _ in range(n):\n        a, b = map(int, stdin.split())\n        contest_list.append((a, b))\n\n    contest_list = sorted(contest_list, key=lambda x: x[0])\n    contest_list.sort(key=lambda x: x[0] + x[1])\n    days = 0\n    for c in contest_list:\n        days += c[0]\n        if days >= k:\n            days += 1\n            break\n\n    return str(days)\n\n-----Bugfix-----\n      \n     \n"
    },
    {
        "number": 4373,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    if a[n - 1] - a[0] == a[n - 2] - a[n - 1]:\n        return a[n - 1]\n    else:\n        return a[n - 1] - a[n - 2]\n\n\n-----Constraints-----\n1 <= n <= 10^5\n\n\n---CODE---\ndef"
    },
    {
        "number": 4373,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    students = []\n    for _ in range(n):\n        students.append(list(map(int, stdin.split())))\n    \n    time = 0\n    while len(students) > 0:\n        students = sorted(students, key=lambda x: x[0])\n        \n        total = 0\n        for i, v in enumerate(students):\n            total += v[1]\n            if v[0] == 1:\n                if total < k:\n                    students.pop(i)\n                else:\n                    break\n            elif v[0] == 2:\n                if total < k:\n                    students.pop(i)\n                    break\n                else:\n                    break\n            elif v[0] == 3:\n                if total < k:\n                    students.pop(i)\n                    break\n                else:\n                    break\n            elif v[0] == 4:\n                if total < k:\n                    students.pop(i)\n                    break\n                else:\n                    break\n        else:\n            time += 1\n    return str(time)"
    },
    {
        "number": 4373,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4373,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip().strip())\n    contests = [int(i) for i in stdin.strip().split()]\n    contests = sorted(contests)\n    contests = sorted(contests, key=lambda x: x % contests[-1])\n    days = contests[-1] - contests[0]\n    contest_count = 0\n    for i in range(1, contests.__len__()):\n        if contests[i] - contests[i-1] == days:\n            contest_count += 1\n    return str(contest_count)\n"
    },
    {
        "number": 4373,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    contest_list = [list(map(int, stdin.split())) for _ in range(int(stdin.split()[0]))]\n    p = 0\n    for i in range(len(contest_list)):\n        j = 0\n        for k in range(i+1, len(contest_list)):\n            if contest_list[i][0] < contest_list[k][0] and (contest_list[i][1] < contest_list[k][1] or (contest_list[k][1] == 0 and contest_list[i][1] > 0)):\n                j += 1\n                contest_list[i] = contest_list[k]\n                contest_list[k] = contest_list[i]\n    for i in range(len(contest_list)):\n        if len(contest_list[i]) == 0:\n            p += 1\n    return p\n\n\n-----Constraints-----\n1 <= n <= 2^5\n1 <= a_i <= 2^5\n1 <= k <= 10^5\n\n\n-----Time Limit: 1 min\n-----Space Limit: 1MB\n\"\"\"\n\nimport math\n\ndef"
    },
    {
        "number": 4374,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    if stdin == \"\":\n        return \"\"\n    n, m = map(int, stdin.split())\n    v = [int(i) for i in stdin.split()]\n    u = [int(i) for i in stdin.split() if i!= \"\"]\n    \n    for u_index in range(m):\n        if v[u_index]!= v[u_index+1]:\n            break\n    u.remove(v[u_index])\n    v.remove(u[u_index])\n    diameter = [0]*n\n    \n    for u_index in range(len(u)):\n        diameter[u_index] = diameter[u_index] + 1\n        if len(u) > 2:\n            for u_index_2 in range(u_index+1, len(u)):\n                diameter[u_index] = max(diameter[u_index], diameter[u_index_2])\n    \n    for u_index in range(len(u)):\n        diameter[u_index] = diameter[u_index] + 1\n        for u_index_2 in range(u_index+1, len(u)):\n            diameter[u_index] = max(diameter[u_index], diameter[u_index_2])\n    \n    for i in range(len(diameter)):\n        if i == len(diameter)-1:\n            print(diameter[i])\n        else:\n            print(diameter[i], \" \", end=\"\")\n    \n    return \" \".join(map(str, diameter))\n"
    },
    {
        "number": 4374,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    graph = [[] for _ in range(n)]\n    \n    for i in range(m):\n        v1, v2 = map(int, stdin.split())\n        graph[v1 - 1].append(v2 - 1)\n        graph[v2 - 1].append(v1 - 1)\n    \n    # add the edges\n    for i in range(n):\n        for j in range(n):\n            if i!= j:\n                graph[i].append(j)\n                graph[j].append(i)\n    \n    # output\n    diameter = 0\n    for i in range(n):\n        diameter = max(diameter, len(graph[i]))\n    \n    return str(diameter)\n\n\n-----Solution-----\n"
    },
    {
        "number": 4374,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    m -= 1\n    graph = [[] for _ in range(n)]\n    for i in range(m):\n        v, u = map(int, stdin.split())\n        graph[u].append(v)\n        graph[v].append(u)\n    vertices = set(range(n))\n    # print(vertices)\n    diameter = -1\n    # print(graph)\n    # print(vertices)\n    for i in range(n):\n        # print(graph[i])\n        for u in graph[i]:\n            for v in graph[u]:\n                # print(v, u)\n                if v == i:\n                    continue\n                if v in vertices:\n                    # print(v, u, v, graph[v])\n                    diameter = max(diameter, len(graph[v]))\n    print(diameter)\n    return str(diameter)\n"
    },
    {
        "number": 4374,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    m = int(stdin.strip().split(' ')[1])\n    edges = []\n    for i in range(m):\n        a, b = stdin.strip().split(' ')\n        edges.append((int(a), int(b)))\n    print(edges)\n    answer = []\n    for i in range(n-1):\n        if i == 0:\n            answer.append(edges[i][0])\n            answer.append(edges[i][1])\n        else:\n            answer.append(answer[i-1] + edges[i][0])\n            answer.append(answer[i-1] + edges[i][1])\n    answer = sorted(answer)\n    answer = answer[::-1]\n    print(answer)\n    return answer[0]\n\n\ndef"
    },
    {
        "number": 4374,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        u, v = map(int, stdin.split())\n        graph[u].append(v)\n        graph[v].append(u)\n    visit = [False] * n\n    d = [0] * n\n    d[0] = 1\n    \n    def dfs(u):\n        if not visit[u]:\n            visit[u] = True\n            for v in graph[u]:\n                if not visit[v]:\n                    dfs(v)\n            d[u] = 1\n            visit[u] = False\n    \n    for i in range(n):\n        if not visit[i]:\n            dfs(i)\n    \n    return \"\".join(map(str, d))\n\n\n\n{$1 \\le n \\le 1000$, $0 \\le m \\le n - 1$}\n{$1 \\le v \\le n$, $0 \\le u \\le n$, $v \\ne u$}\n{$1 \\le v, u \\le n$, $0 \\le u, u \\ne v$}\n{$1 \\le v, u, u \\le n$, $0 \\le u, u \\ne v$}\n{$1 \\le v, u, u \\le n$, $0 \\le u, u \\ne v$}\n{$1 \\le v, u, u \\le n$, $0 \\le u, u \\ne v$}\n{$1 \\le v, u, u \\le n$, $0 \\le u, u \\ne v$}\n{$1 \\le v, u, u \\le n$, $0 \\le u, u \\ne v$}\n{$1 \\le v, u, u \\le n$, $0 \\le u, u \\ne v$}\n{$1 \\le v, u, u \\le n$, $0 \\le u, u \\ne v$}\n{$1 \\le v, u, u \\le n$, $0 \\le u, u \\ne v$}\n{$1 \\le v, u, u \\le n$, $0 \\le u, u \\ne v$}\n{$1 \\le v, u, u \\le n$, $0 \\le u, u \\ne v$}\n{$1 \\le v, u, u \\le n$, $0 \\le u, u \\ne v$}\n{$1 \\le v, u, u \\le n$, $0 \\le u, u \\ne v$}\n{$1 \\le v, u, u \\le n$, $0 \\le u, u \\ne v$}\n{$1 \\le v, u, u \\le n$, $0 \\le u, u \\ne v$}\n{$1 \\le v, u, u \\le n$, $0 \\le u, u \\ne v$}\n{$1 \\le v, u, u \\le n$, $0 \\le u, u \\ne v$}\n{$1 \\le v, u, u \\le n$, $0 \\le u, u \\ne v$}\n{$1 \\le v, u, u \\le n$, $0 \\le u, u \\ne v$}\n{$1 \\le v, u, u \\le n$, $0 \\le u, u \\ne v$}\n{$1 \\le v, u, u \\le n$, $0 \\le u, u \\ne v$}\n{$1 \\le v, u, u \\le n$, $0 \\le u, u \\ne v$}\n{$1 \\le v, u, u \\le n$, $0 \\le u, u \\ne v$}\n{$1 \\le v, u, u \\le n$, $0 \\le u, u \\ne v$}\n{$1 \\le v, u, u \\le n$, $0 \\le u, u \\ne v$}\n{$1 \\le v, u, u \\le n$, $0 \\le u, u \\ne v$}\n{$1 \\le v, u, u \\le n$, $0 \\le u, u \\ne v$}\n{$1 \\le v, u, u \\le n$, $0 \\le u, u \\ne v$}\n{$1 \\le v, u, u \\le n$, $0 \\le u, u \\ne v$}\n{$1 \\le v, u, u \\le n$, $0 \\le u, u \\ne v$}\n{$1 \\le v, u, u \\le n$, $0 \\le u, u \\ne v$}\n{$1 \\le v, u, u \\le n$, $0 \\le u, u \\ne v$}\n{$1 \\le v, u, u \\le n$, $0 \\le u, u \\ne v$}\n{$1 \\le v, u, u \\le n$, $0 \\le u, u \\ne v$}\n{$1 \\le v, u, u \\le n$, $0 \\le u, u \\ne v$}\n{$1 \\le v, u, u \\le n$, $0 \\le u, u \\ne v$}\n{$1 \\le v, u, u \\le n$, $0 \\le u, u \\ne v$}\n{$1 \\le v, u, u \\le n$, $0 \\le u, u \\ne v$}\n{$1 \\le v, u, u \\le n$, $0 \\le u, u \\ne v$}\n{$1 \\le v, u, u \\le n$, $0 \\le u, u \\ne v$}\n{$1 \\le v, u, u \\le n$, $0 \\le u, u \\ne v$}\n{$1 \\le v, u, u \\le n$, $0 \\le u, u \\ne v$}\n{$1 \\le v, u, u \\le n$, $0 \\le u, u \\ne v$}\n{$1 \\le v, u, u \\le n$, $0 \\le u, u \\ne v$}\n{$1 \\le v, u, u \\le n$, $0 \\le u, u \\ne v$}\n{$1 \\le v, u, u \\le n$, $0 \\le u, u \\ne v$}\n{$1 \\le v, u, u \\le n$, $0 \\le u, u \\ne v$}\n{$1 \\"
    },
    {
        "number": 4374,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(' ')\n    n = int(stdin[0])\n    m = int(stdin[1])\n    vertices = list(map(int, stdin[2:]))\n    edges = list(map(int, stdin[m:m + m]))\n    edges.sort()\n    diameter = 0\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if vertices[i]!= vertices[j]:\n                diameter = max(diameter, edges[i] + edges[j])\n                if j == n - 1:\n                    return str(diameter)\n    return str(diameter)\n\n-----Solution-----\nInput\n4 2\n1 2\n2 3\n\nOutput\n2\n4 2\n\nInput\n3 2\n1 3\n2 3\n\nOutput\n2\n4 3\n\nInput\n2 0\n\nOutput\n1\n1 2\n\nInput\n3 2\n1 3\n2 3\n\nOutput\n2\n4 2\n\n-----Note-----\n\nIn the first example adding edges (1, 4) or (3, 4) will lead to a total diameter of 3. Adding edge (2, 4), however, will make it 2.\n\nEdge (1, 2) is the only option you have for the second example. The diameter is 1.\n\nThe graph is a tree. The diameter of the tree is the minimum possible.\n\n\n\n-----Solution-----\n\"\"\"\nimport sys"
    },
    {
        "number": 4374,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        a, b = map(int, stdin.split())\n        graph[a].append(b)\n        graph[b].append(a)\n    diameter = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            diameter = max(diameter, len(graph[i]))\n            for k in range(len(graph[j])):\n                diameter = max(diameter, len(graph[j]))\n    return str(diameter)\n\n'''\nn, m = map(int, input().split())\ngraph = []\n\nfor _ in range(n):\n    graph.append(list(map(int, input().split())))\n\ndef"
    },
    {
        "number": 4374,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = list(map(int, stdin.split()))\n    edges.sort()\n    tree = [[] for _ in range(n)]\n    for _ in range(m):\n        node, edge = map(int, stdin.split())\n        tree[node].append(edge)\n        tree[edge].append(node)\n    for i in range(n):\n        tree[i].sort()\n    diameter = 0\n    for i in range(n):\n        tree[i] = list(map(len, tree[i]))\n        if len(tree[i]) > 0:\n            diameter = max(tree[i][0], diameter)\n    return diameter\n\n'''\n\nimport sys\nfrom queue import PriorityQueue\n\n\ndef"
    },
    {
        "number": 4374,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    v, u = map(int, stdin.split())\n    graph = [[] for _ in range(n + 1)]\n    for _ in range(m):\n        u, v = map(int, stdin.split())\n        graph[u].append(v)\n        graph[v].append(u)\n    \n    def dfs(v, parent):\n        if v == parent:\n            return 0\n        parent_diameter = 1\n        for i in graph[v]:\n            d = dfs(i, v) + 1\n            parent_diameter = max(d, parent_diameter)\n        return parent_diameter\n    \n    return str(dfs(v, u) - 1)\n\n\n-----Output-----\n\nIn the first example, the edges are (1, 2) and (2, 1). The diameter is 1.\n\nIn the second example, the edges are (2, 3) and (3, 2). The diameter is 1.\n\nIn the third example, the edges are (2, 1) and (3, 3). The diameter is 2.\n\nIn the fourth example, the edges are (2, 3) and (3, 1). The diameter is 2.\n\n\n-----Note-----\n\nIn the first example, the edges are (1, 2) and (2, 1). The diameter is 1.\n\nIn the second example, the edges are (2, 3) and (3, 2). The diameter is 1.\n\nIn the third example, the edges are (2, 1) and (3, 3). The diameter is 2.\n\nIn the fourth example, the edges are (2, 3) and (3, 1). The diameter is 2.\n\n\n\n-----Examples-----\nInput\n4 2\n1 2\n2 3\n\nOutput\n2\n4 2\n\nInput\n4 0\n\nOutput\n1\n1 2\n\nInput\n3 2\n1 3\n2 3\n\nOutput\n3\n4 2\n\n\"\"\"\nn, m = list(map(int, input().split()))\nl = [list(map(int, input().split())) for i in range(m)]\n\ndef"
    },
    {
        "number": 4374,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = []\n    for _ in range(m):\n        edges.append(list(map(int, stdin.split())))\n    return str(len(set(edges)))\n\"\"\"\ndef"
    },
    {
        "number": 4375,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = [list(map(int, input().split())) for _ in range(n)]\n    a.sort(key=lambda x:x[0])\n    q = [0] + list(range(n))\n    def find(u):\n        nonlocal q\n        if q[u]!= q[u+1]:\n            q[u+1] = q[u]\n            find(u+1)\n        return q[u]\n    q = [i for i in range(n) if q[i] == i]\n    return str(find(0))\n"
    },
    {
        "number": 4375,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split()]\n    \n    tree = [[] for _ in range(n + 1)]\n    for _ in range(k):\n        u, v = [int(i) - 1 for i in stdin.split()]\n        tree[u].append(v)\n        tree[v].append(u)\n    \n    visited = set()\n    result = []\n    \n    def dfs(tree, parent, distance):\n        visited.add(parent)\n        for child in tree[parent]:\n            if child not in visited:\n                result.append(dfs(tree, child, distance + 1))\n        return result\n    \n    dfs(tree, 1, 0)\n    \n    return '\\n'.join(str(x) for x in sorted(result))\n"
    },
    {
        "number": 4375,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    vertices = list(map(int, stdin.split()))\n    edges = [list(map(int, input().split())) for _ in range(n - 1)]\n    vertices.sort()\n    edges = sorted(edges, key=lambda x: x[2])\n    if len(edges)!= n - 1:\n        print(-1)\n        return\n    \n    for a, b, weight in edges:\n        if weight > k:\n            continue\n        if weight > a + b:\n            a, b = a, b\n        a, b = a - 1, b - 1\n    \n    print(vertices[a] + edges[b][0] * (vertices[b] - vertices[a]))\n    return\n"
    },
    {
        "number": 4375,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = []\n    a.sort()\n    if len(a) <= k:\n        return str(sum(a))\n    a.sort()\n    for i in range(k-1):\n        j = i+1\n        if j+2 < len(a):\n            while j+2 < len(a) and a[j+2] == a[j]:\n                j += 1\n            if j+2 < len(a):\n                b.append(a[j])\n        else:\n            b.append(a[0])\n    return str(sum(b))\n    \n'''\ndef"
    },
    {
        "number": 4375,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    b = []\n    for i in a:\n        b.append(a.index(i))\n    answer = [0 for _ in range(n)]\n    for i in range(n):\n        answer[b[i]] = a[i]\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            answer[b[i]] = max(answer[b[i]], answer[j])\n    print(answer[n - 1])\n    return str(answer[n - 1])"
    },
    {
        "number": 4375,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, k = map(int, stdin.split())\n    \n    graph = [[] for _ in range(n+1)]\n    \n    for _ in range(n-1):\n        u, v = map(int, stdin.split())\n        graph[u].append(v)\n        graph[v].append(u)\n    \n    \n    for k_ in range(k+1):\n        \n        queue = deque()\n        visited = [False] * (n+1)\n        \n        dist = 0\n        \n        for i in range(n+1):\n            if visited[i] == False:\n                queue.append((i, k_))\n                visited[i] = True\n                \n        \n        while queue:\n            cur, dist = queue.popleft()\n            for nbr in graph[cur]:\n                if visited[nbr] == False:\n                    queue.append((nbr, k_+dist))\n                    visited[nbr] = True\n                    \n                    \n        if len(visited) == n+1:\n            dist += k\n            print(dist)\n            return\n    \n    \n\n-----Constraints-----\n\n1 <= n <= 10^5\n0 <= a_1, a_2, a_i, a_j <= 10^5\n0 <= k_ <= n\n\n'''\n"
    },
    {
        "number": 4375,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    vertices = []\n    for _ in range(1, len(stdin)):\n        vertices.append(int(stdin[_]))\n    vertices.sort()\n    while vertices:\n        if sum(vertices[0:2]) == vertices[0] + vertices[1]:\n            return str(vertices[0])\n        vertices.pop(0)\n        vertices.pop(0)"
    },
    {
        "number": 4375,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n,k=map(int,stdin.split())\n    edges=[]\n    for i in range(n-1):\n        edges.append(map(int,input().split()))\n    ans=0\n    def find(u,v):\n        if u!=v:\n            u,v=v,u\n        for i in range(len(edges)):\n            if edges[i][0]==u and edges[i][1]==v:\n                return i\n    for i in range(n):\n        if find(i,i+1)!=-1:\n            ans+=k\n    return ans"
    },
    {
        "number": 4375,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    edges = list(map(int, stdin.split()))\n    for i in range(n):\n        edges[i] += edges[i]\n    # print(edges)\n    # print(edges)\n    # print(edges[0])\n    # print(edges[-1])\n    # print(edges[1:-1])\n    # print(edges[2:])\n    # print(edges[:-1])\n    edges.sort()\n    subsets = []\n    for i in range(k):\n        if edges[i] == edges[i+1]:\n            continue\n        # print(edges[i],edges[i+1])\n        subsets.append(edges[i] + edges[i+1])\n        # print(subsets)\n    # print(len(subsets))\n    # print(subsets[-1])\n    return str(sum(subsets))\n    \n"
    },
    {
        "number": 4375,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = map(int, stdin.split())\n    b = set(map(int, stdin.split()))\n    b = list(b)\n    a.sort(reverse=True)\n    answer = 0\n    for i in a:\n        answer += i - b.pop()\n    answer += (n - 1) * sum(b)\n    return str(answer)"
    },
    {
        "number": 4376,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin_lines = stdin.split(\"\\n\")\n    n = int(stdin_lines[0].replace(\"\\n\", \"\"))\n    m = int(stdin_lines[1].replace(\"\\n\", \"\"))\n    a_1 = int(stdin_lines[2].replace(\"\\n\", \"\"))\n    a_2 = int(stdin_lines[3].replace(\"\\n\", \"\"))\n    b_1 = int(stdin_lines[4].replace(\"\\n\", \"\"))\n    b_2 = int(stdin_lines[5].replace(\"\\n\", \"\"))\n    dormitories = {}\n    for i in range(n):\n        room = a_1 + a_2 + i + b_1 + b_2\n        dormitories[room] = i\n        \n    for i in range(m):\n        room = int(stdin_lines[i+6].replace(\"\\n\", \"\"))\n        k = b_2 * b_2 + b_1 * b_1 + b_1 * b_1 * room\n        print(dormitories[k], room)\n"
    },
    {
        "number": 4376,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    a_1, a_2, a_3 = list(map(int, stdin.split()))\n    a_1 = a_1 + 1\n    a_2 = a_2 + 1\n    b_1 = b_1 + a_1 + a_2 + a_3\n    b_2 = b_2 + a_1 + a_2 + a_3\n    b_3 = b_3 + a_1 + a_2 + a_3\n    b_3 = b_3 + a_1 + a_2 + a_3\n    b_3 = b_3 + a_1 + a_2 + a_3\n    b_3 = b_3 + a_1 + a_2 + a_3\n    b_3 = b_3 + a_1 + a_2 + a_3\n    b_3 = b_3 + a_1 + a_2 + a_3\n    b_3 = b_3 + a_1 + a_2 + a_3\n    b_3 = b_3 + a_1 + a_2 + a_3\n    b_3 = b_3 + a_1 + a_2 + a_3\n    b_3 = b_3 + a_1 + a_2 + a_3\n    b_3 = b_3 + a_1 + a_2 + a_3\n    b_3 = b_3 + a_1 + a_2 + a_3\n    b_3 = b_3 + a_1 + a_2 + a_3\n    b_3 = b_3 + a_1 + a_2 + a_3\n    b_3 = b_3 + a_1 + a_2 + a_3\n    b_3 = b_3 + a_1 + a_2 + a_3\n    b_3 = b_3 + a_1 + a_2 + a_3\n    b_3 = b_3 + a_1 + a_2 + a_3\n    b_3 = b_3 + a_1 + a_2 + a_3\n    b_3 = b_3 + a_1 + a_2 + a_3\n    b_3 = b_3 + a_1 + a_2 + a_3\n    b_3 = b_3 + a_1 + a_2 + a_3\n    b_3 = b_3 + a_1 + a_2 + a_3\n    b_3 = b_3 + a_1 + a_2 + a_3\n    b_3 = b_3 + a_1 + a_2 + a_3\n    b_3 = b_3 + a_1 + a_2 + a_3\n    b_3 = b_3 + a_1 + a_2 + a_3\n    b_3 = b_3 + a_1 + a_2 + a_3\n    b_3 = b_3 + a_1 + a_2 + a_3\n    b_3 = b_3 + a_1 + a_2 + a_3\n    b_3 = b_3 + a_1 + a_2 + a_3\n    b_3 = b_3 + a_1 + a_2 + a_3\n    b_3 = b_3 + a_1 + a_2 + a_3\n    b_3 = b_3 + a_1 + a_2 + a_3\n    b_3 = b_3 + a_1 + a_2 + a_3\n    b_3 = b_3 + a_1 + a_2 + a_3\n    b_3 = b_3 + a_1 + a_2 + a_3\n    b_3 = b_3 + a_1 + a_2 + a_3\n    b_3 = b_3 + a_1 + a_2 + a_3\n    b_3 = b_3 + a_1 + a_2 + a_3\n    b_3 = b_3 + a_1 + a_2 + a_3\n    b_3 = b_3 + a_1 + a_2 + a_3\n    b_3 = b_3 + a_1 + a_2 + a_3\n    b_3 = b_3 + a_1 + a_2 + a_3\n    b_3 = b_3 + a_1 + a_2 + a_3\n    b_3 = b_3 + a_1 + a_2 + a_3\n    b_3 = b_3 + a_1 + a_2 + a_3\n    b_3 = b_3 + a_1 + a_2 + a_3\n    b_3 = b_3 + a_1 + a_2 + a_3\n    b_3 = b_3 + a_1 + a_2 + a_3\n    b_3 = b_3 + a_1 + a_2 + a_3\n    b_3 = b_3 + a_1 + a_2 + a_3\n    b_3 = b_3 + a_1 + a_2 + a_3\n    b_3 = b_3 + a_1 + a_2 + a_3\n    b_3 = b_3 + a_1 + a_2 + a_3\n    b_3 = b_3 + a_1 + a_2 + a_"
    },
    {
        "number": 4376,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin[1])\n    n = int(stdin[2])\n    a_1 = int(stdin[3])\n    a_2 = int(stdin[4])\n    a_3 = int(stdin[5])\n    b_1 = int(stdin[6])\n    b_2 = int(stdin[7])\n    b_3 = int(stdin[8])\n    b_4 = int(stdin[9])\n    b_5 = int(stdin[10])\n    a_4 = int(stdin[11])\n    a_5 = int(stdin[12])\n    d_list = list(map(int,stdin[13:]))\n    # for i in range(len(d_list)):\n    #     if d_list[i] < a_1:\n    #         a_1 = d_list[i]\n    #     elif a_1 < d_list[i] < a_2:\n    #         a_2 = d_list[i]\n    #     elif a_1 < a_2 < a_3:\n    #         a_3 = d_list[i]\n    #     elif a_1 < a_2 < a_4:\n    #         a_4 = d_list[i]\n    #     elif a_1 < a_2 < a_5:\n    #         a_5 = d_list[i]\n    #     elif a_1 < a_3 < a_4:\n    #         a_4 = d_list[i]\n    #     elif a_1 < a_3 < a_5:\n    #         a_5 = d_list[i]\n    #     elif a_1 < a_4 < a_5:\n    #         a_4 = d_list[i]\n    #     elif a_1 < a_5 < a_2:\n    #         a_5 = d_list[i]\n    #     elif a_1 < a_2 < a_5:\n    #         a_2 = d_list[i]\n    #     elif a_1 < a_2 < a_3:\n    #         a_3 = d_list[i]\n    #     elif a_1 < a_3 < a_4:\n    #         a_4 = d_list[i]\n    #     elif a_1 < a_3 < a_5:\n    #         a_5 = d_list[i]\n    #     elif a_1 < a_4 < a_5:\n    #         a_5 = d_list[i]\n    #     elif a_1 < a_5 < a_2:\n    #         a_2 = d_list[i]\n    #     elif a_1 < a_2 < a_3:\n    #         a_3 = d_list[i]\n    #     elif a_1 < a_2 < a_4:\n    #         a_4 = d_list[i]\n    #     elif a_1 < a_2 < a_5:\n    #         a_5 = d_list[i]\n    #     elif a_1 < a_3 < a_4:\n    #         a_4 = d_list[i]\n    #     elif a_1 < a_3 < a_5:\n    #         a_5 = d_list[i]\n    #     elif a_1 < a_4 < a_5:\n    #         a_5 = d_list[i]\n    #     elif a_1 < a_5 < a_2:\n    #         a_2 = d_list[i]\n    #     elif a_1 < a_2 < a_3:\n    #         a_3 = d_list[i]\n    #     elif a_1 < a_2 < a_4:\n    #         a_4 = d_list[i]\n    #     elif a_1 < a_2 < a_5:\n    #         a_5 = d_list[i]\n    #     elif a_1 < a_3 < a_4:\n    #         a_4 = d_list[i]\n    #     elif a_1 < a_3 < a_5:\n    #         a_5 = d_list[i]\n    #     elif a_1 < a_4 < a_5:\n    #         a_5 = d_list[i]\n    #     elif a_1 < a_5 < a_2:\n    #         a_2 = d_list[i]\n    #     elif a_1 < a_2 < a_3:\n    #         a_3 = d_list[i]\n    #     elif a_1 < a_2 < a_4:\n    #         a_4 = d_list[i]\n    #     elif a_1 < a_2 < a_5:\n    #         a_5 = d_list[i]\n    #     elif a_1 < a_3 < a_4:\n    #         a_4 = d_list[i]\n    #     elif a_1 < a_3 < a_5:\n    #         a_5 = d_list[i]\n    #     elif a_1"
    },
    {
        "number": 4376,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    def helper(index, letter):\n        if index == len(st):\n            return letter\n        \n        if letter == \"a\":\n            return helper(index + 1, letter + \"b\")\n        elif letter == \"b\":\n            return helper(index + 1, letter + \"d\")\n        elif letter == \"d\":\n            return helper(index + 1, letter + \"f\")\n        elif letter == \"f\":\n            return helper(index + 1, letter + \"g\")\n        else:\n            return helper(index + 1, letter + \"h\")\n            \n    n, m = list(map(int, stdin.split()))\n    \n    letters = [list(map(str, input().split())) for _ in range(n)]\n    \n    result = [list(map(int, input().split())) for _ in range(m)]\n    \n    for i in range(m):\n        letters[result[i][0] - 1][result[i][1] - 1] = result[i][2]\n    \n    answer = helper(0, \"\")\n    \n    return answer\n"
    },
    {
        "number": 4376,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = list(map(lambda x: int(x) - 1, stdin.split()))\n    stdin = list(map(lambda x: x * 10 + 1, stdin))\n    n = int(stdin[0])\n    m = int(stdin[1])\n    a_1, a_2, b_1 = map(lambda x: int(x) - 1, stdin[2:])\n    b_2, b_3, b_4, b_5, b_6, b_7, b_8 = map(lambda x: int(x) - 1, stdin[3:])\n    a_f, k = map(lambda x: int(x) - 1, stdin[4:])\n    return '\\n'.join(list(map(str, solution(m, n, a_1, a_2, b_1, b_2, b_3, b_4, b_5, b_6, b_7, b_8, a_f, k))))\n"
    },
    {
        "number": 4376,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a_1 = list(map(int, stdin.split()))\n    a_2 = list(map(int, stdin.split()))\n    dormitories = list(map(int, stdin.split()))\n    letters = list(map(int, stdin.split()))\n    \n    b_1 = [1 for _ in range(n)]\n    b_2 = [1 for _ in range(n)]\n    \n    for i in range(m):\n        b_1[dormitories[i]] = b_2[dormitories[i]] + a_2[dormitories[i]]\n        b_2[dormitories[i]] = b_1[dormitories[i]] + a_1[dormitories[i]]\n\n    for i in range(m):\n        b_1[letters[i]] = a_1[letters[i]] + b_2[letters[i]]\n        b_2[letters[i]] = a_1[letters[i]] + b_1[letters[i]]\n    \n    return str(b_1[m - 1]) + \" \" + str(b_2[m - 1])\n"
    },
    {
        "number": 4376,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a_1 = list(map(int, stdin.split()))\n    b_1 = list(map(int, stdin.split()))\n    a_2 = list(map(int, stdin.split()))\n    a_3 = list(map(int, stdin.split()))\n    a_4 = list(map(int, stdin.split()))\n    a_5 = list(map(int, stdin.split()))\n    a_6 = list(map(int, stdin.split()))\n    a_7 = list(map(int, stdin.split()))\n    a_8 = list(map(int, stdin.split()))\n    a_9 = list(map(int, stdin.split()))\n    a_10 = list(map(int, stdin.split()))\n    b_2 = list(map(int, stdin.split()))\n    b_3 = list(map(int, stdin.split()))\n    b_4 = list(map(int, stdin.split()))\n    b_5 = list(map(int, stdin.split()))\n    b_6 = list(map(int, stdin.split()))\n    b_7 = list(map(int, stdin.split()))\n    b_8 = list(map(int, stdin.split()))\n    b_9 = list(map(int, stdin.split()))\n    b_10 = list(map(int, stdin.split()))\n    for i in range(len(a_1)):\n        a_1[i] -= 1\n    for i in range(len(a_2)):\n        a_2[i] -= 1\n    for i in range(len(a_3)):\n        a_3[i] -= 1\n    for i in range(len(a_4)):\n        a_4[i] -= 1\n    for i in range(len(a_5)):\n        a_5[i] -= 1\n    for i in range(len(a_6)):\n        a_6[i] -= 1\n    for i in range(len(a_7)):\n        a_7[i] -= 1\n    for i in range(len(a_8)):\n        a_8[i] -= 1\n    for i in range(len(a_9)):\n        a_9[i] -= 1\n    for i in range(len(a_10)):\n        a_10[i] -= 1\n    for i in range(len(b_1)):\n        b_1[i] -= 1\n    for i in range(len(b_2)):\n        b_2[i] -= 1\n    for i in range(len(b_3)):\n        b_3[i] -= 1\n    for i in range(len(b_4)):\n        b_4[i] -= 1\n    for i in range(len(b_5)):\n        b_5[i] -= 1\n    for i in range(len(b_6)):\n        b_6[i] -= 1\n    for i in range(len(b_7)):\n        b_7[i] -= 1\n    for i in range(len(b_8)):\n        b_8[i] -= 1\n    for i in range(len(b_9)):\n        b_9[i] -= 1\n    for i in range(len(b_10)):\n        b_10[i] -= 1\n    ans = \"\"\n    for j in range(m):\n        for i in range(n):\n            if a_1[i] == b_1[i]:\n                ans += str(b_1[i]) + \" \"\n            if a_2[i] == b_2[i]:\n                ans += str(b_2[i]) + \" \"\n            if a_3[i] == b_3[i]:\n                ans += str(b_3[i]) + \" \"\n            if a_4[i] == b_4[i]:\n                ans += str(b_4[i]) + \" \"\n            if a_5[i] == b_5[i]:\n                ans += str(b_5[i]) + \" \"\n            if a_6[i] == b_6[i]:\n                ans += str(b_6[i]) + \" \"\n            if a_7[i] == b_7[i]:\n                ans += str(b_7[i]) + \" \"\n            if a_8[i] == b_8[i]:\n                ans += str(b_8[i]) + \" \"\n            if a_9[i] == b_9[i]:\n                ans += str(b_9[i]) + \" \"\n            if a_10[i] == b_10[i]:\n                ans += str(b_10[i]) + \" \"\n    print(ans.strip())\n    return ans.strip()\n"
    },
    {
        "number": 4376,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    dorm = list(map(int, stdin.split()))\n    n, m = dorm[0], int(dorm[1])\n    a1, a2 = 0, 1\n    b1, b2 = 1, 2\n    b = int(dorm[2])\n    for i in range(3, n + 1):\n        a1 += a2\n        a2 = a1\n        a1 = b1\n        b1 = b2\n        b2 = b\n    answer = []\n    for i in range(m):\n        answer.append(a2 * (b - a1 + b1 - 1))\n    return '\\n'.join(map(str, answer))\n"
    },
    {
        "number": 4376,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(i) for i in stdin.split()]\n    a_1, a_2 = [int(i) for i in stdin.split()]\n    b_1, b_2 = [int(i) for i in stdin.split()]\n    a_1 = max(a_1, 1)\n    a_2 = max(a_2, a_1 + a_2)\n    b_1 = max(b_1, 1)\n    b_2 = max(b_2, b_1 + b_2)\n    # a_1 = a_1 + max(b_1, a_2)\n    # a_2 = a_2 + max(b_2, a_1)\n    # b_1 = b_1 + max(a_1, b_2)\n    # b_2 = b_2 + max(a_2, b_1)\n    ans = [0] * (a_2 + 1)\n    for i in range(m):\n        ans[a_1 + i] += 1\n        ans[a_2 + i] += 1\n        ans[b_1 + i] += 1\n        ans[b_2 + i] += 1\n    for i in range(1, n+1):\n        print(ans[i])\n    return '\\n'.join(str(i) for i in ans[:n+1])\n"
    },
    {
        "number": 4376,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    dormitory = []\n    for _ in range(n):\n        dormitory.append(list(map(int, stdin.split())))\n    letter = []\n    for i in range(n):\n        letter.append(stdin.index(str(dormitory[i][0])))\n    s = ''\n    for i in range(m):\n        s += str(letter[i] + 1) + str(dormitory[letter[i]][1])\n    print(s)\n    return s\n\n-----Constraints-----\n1 <= n <= 1000\n1 <= m <= 10^5\n\"\"\"\n\nclass Solution:\n    def letterCombinations(self, digits: str) -> List[str]:\n        if digits == \"\":\n            return []\n        \n        n = len(digits)\n        char_map = {\n            \"2\": \"abc\",\n            \"3\": \"def\",\n            \"4\": \"ghi\",\n            \"5\": \"jkl\",\n            \"6\": \"mno\",\n            \"7\": \"pqrs\",\n            \"8\": \"tuv\",\n            \"9\": \"wxyz\",\n            \"0\": \"\",\n        }\n        \n        answer = []\n        def dfs(index, curr):\n            if index == n:\n                return\n            for key in char_map.keys():\n                if curr == key:\n                    answer.append(char_map[key])\n                dfs(index+1, curr + key)\n                \n        dfs(0, \"\")\n        return answer"
    },
    {
        "number": 4377,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    a = []\n    b = []\n    c = []\n    for line in lines:\n        a.append(int(line))\n    for i in range(0, 3):\n        b.append(sum(a[i*3:i*3+3]))\n    for i in range(0, 3):\n        c.append(a[i*3+1] + a[i*3+2] + a[i*3+1] + a[i*3+2])\n    answer = [a[i*3] for i in range(0, 3)]\n    answer.sort()\n    answer = [answer[i] - a[i] for i in range(0, 3)]\n    answer = [answer[i] for i in range(0, 3)]\n    answer = sum(answer)\n    return answer\n"
    },
    {
        "number": 4377,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    numbers = list(map(int, stdin.split()))\n    A, B, C = numbers[0], numbers[1], numbers[2]\n    for i in range(3, n+1):\n        A, B, C = B, C, A + B + C\n    return str(A + B + C)\n\n\n-----Submissions-----\ndef"
    },
    {
        "number": 4377,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    from collections import Counter\n    n = int(stdin)\n    arr = [int(i) for i in stdin.split()]\n    cnt = Counter(arr)\n    arr_ = [i for i in arr]\n    l = 0\n    r = 1\n    for a in cnt.keys():\n        for b in cnt.keys():\n            for c in cnt.keys():\n                if a + b + c in cnt.values():\n                    print(a, b, c)\n                    if r < n:\n                        r += 1\n                        l = 0\n                        break\n                    else:\n                        break\n    print(l)\n"
    },
    {
        "number": 4377,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x = []\n    for line in stdin:\n        x.append(int(line))\n    for i in range(len(x)-2):\n        x[i]+=x[i+1]\n    for i in range(len(x)-3):\n        x[i]+=x[i+2]\n    for i in range(len(x)-3):\n        x[i]+=x[i+3]\n    for i in range(len(x)-3):\n        x[i]+=x[i+4]\n    for i in range(len(x)-4):\n        x[i]+=x[i+5]\n    for i in range(len(x)-5):\n        x[i]+=x[i+6]\n    return str(x[0])\n"
    },
    {
        "number": 4377,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, answer = [int(i) for i in stdin.split()], []\n    for i in range(len(n)):\n        a, b, c = n[i], n[i + 1], n[i + 2]\n        for j in range(len(n) - 1):\n            if a + b + c == 1000000:\n                answer.append(n[j])\n                n[j] = n[j + 1]\n                n[j + 1] = n[j + 2]\n                n[j + 2] = a + b + c\n    return \"\".join(map(str, answer))"
    },
    {
        "number": 4377,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x = sorted(stdin)\n    answer = []\n    \n    for i in range(len(x)-1):\n        if (i == 0) or (i % 2 == 0):\n            answer.append(x[i])\n            answer.append(x[i+1])\n        else:\n            answer.append(x[i])\n            answer.append(x[i+1])\n            answer.append(x[i+2])\n    \n    return ','.join(answer)\n"
    },
    {
        "number": 4377,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    data = [list(map(int, stdin.split())) for _ in range(4)]\n    answer = [list(map(int, list(map(sum, zip(*data[0:3]))))), list(map(sum, zip(*data[3:6]))), list(map(sum, zip(*data[6:9])))]\n    return \"\".join(map(str, answer))"
    },
    {
        "number": 4377,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, X = map(int, stdin.split())\n    L, R = [int(x) for x in stdin.split()]\n    numbers = [int(x) for x in stdin.split()]\n\n    result = \"\"\n    i = 0\n    while i < len(numbers):\n        j = 0\n        while j < len(numbers):\n            if i + j <= N and L + R + numbers[i] + numbers[j] == X:\n                result += str(numbers[i]) + str(numbers[j])\n                j += 1\n            else:\n                j += 1\n        i += 1\n\n    return result\n"
    },
    {
        "number": 4377,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    board = list(map(int, stdin.split()))\n    board = sorted(board)\n    board = [0] + board + [0]\n    for i in range(1, len(board) - 1):\n        if board[i-1] < board[i]:\n            board[i] = board[i-1]\n    if board[-1] > board[-2]:\n        board[-1] = board[-2]\n    board[-2] = board[-1]\n    board = tuple(board)\n    if len(board) < 4:\n        return \"?\"\n    if len(board) == 3:\n        return \"?\"\n    if len(board) == 4:\n        return str(board[1]) + str(board[2]) + str(board[3])\n    return str(board[1]) + str(board[2]) + str(board[3]) + str(board[4])\n"
    },
    {
        "number": 4377,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4378,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(str, stdin.split())\n    n, s = map(int, n), map(str, s)\n    n = n.count('R') + n.count('G') + n.count('B')\n    s = sorted(s)\n    n_colors = n - 1\n    for i in range(n - 2, -1, -1):\n        if s[i]!= s[i + 1]:\n            n_colors -= 1\n    r = n_colors // 2\n    t = 1\n    for i in range(r, n_colors):\n        if s[i]!= s[i - 1] and s[i + 1]!= s[i] and s[i + 1]!= s[i - 1] and s[i + 1]!= s[i]:\n            t += 1\n    print(t)\n    return '{}'.format(t)\n        \nn = int(input())\ns = input()\nprint(solution(n, s))\n"
    },
    {
        "number": 4378,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    print(n - 1)\n    # print(min(n - 1, (n * n - 1) // 2))\n    # print(n - 1)\n    # print(len(s))\n    print(n - 1)\n    print(len(s))\n    \n    # if len(s) < (n * n - 1) // 2:\n    #     print(len(s))\n    #     print(n - 1)\n    #     print(len(s))\n    #     print(n - 1)\n    #     print(len(s))\n    #     print(n - 1)\n    #     print(len(s))\n    #     print(n - 1)\n    #     print(len(s))\n    #     print(n - 1)\n    #     print(len(s))\n    #     print(n - 1)\n    #     print(len(s))\n    #     print(n - 1)\n    #     print(len(s))\n    #     print(n - 1)\n    #     print(len(s))\n    #     print(n - 1)\n    #     print(len(s))\n    #     print(n - 1)\n    #     print(len(s))\n    #     print(n - 1)\n    #     print(len(s))\n    #     print(n - 1)\n    #     print(len(s))\n    #     print(n - 1)\n    #     print(len(s))\n    #     print(n - 1)\n    #     print(len(s))\n    #     print(n - 1)\n    #     print(len(s))\n    #     print(n - 1)\n    #     print(len(s))\n    #     print(n - 1)\n    #     print(len(s))\n    #     print(n - 1)\n    #     print(len(s))\n    #     print(n - 1)\n    #     print(len(s))\n    #     print(n - 1)\n    #     print(len(s))\n    #     print(n - 1)\n    #     print(len(s))\n    #     print(n - 1)\n    #     print(len(s))\n    #     print(n - 1)\n    #     print(len(s))\n    #     print(n - 1)\n    #     print(len(s))\n    #     print(n - 1)\n    #     print(len(s))\n    #     print(n - 1)\n    #     print(len(s))\n    #     print(n - 1)\n    #     print(len(s))\n    #     print(n - 1)\n    #     print(len(s))\n    #     print(n - 1)\n    #     print(len(s))\n    #     print(n - 1)\n    #     print(len(s))\n    #     print(n - 1)\n    #     print(len(s))\n    #     print(n - 1)\n    #     print(len(s))\n    #     print(n - 1)\n    #     print(len(s))\n    #     print(n - 1)\n    #     print(len(s))\n    #     print(n - 1)\n    #     print(len(s))\n    #     print(n - 1)\n    #     print(len(s))\n    #     print(n - 1)\n    #     print(len(s))\n    #     print(n - 1)\n    #     print(len(s))\n    #     print(n - 1)\n    #     print(len(s))\n    #     print(n - 1)\n    #     print(len(s))\n    #     print(n - 1)\n    #     print(len(s))\n    #     print(n - 1)\n    #     print(len(s))\n    #     print(n - 1)\n    #     print(len(s))\n    #     print(n - 1)\n    #     print(len(s))\n    #     print(n - 1)\n    #     print(len(s))\n    #     print(n - 1)\n    #     print(len(s))\n    #     print(n - 1)\n    #     print(len(s))\n    #     print(n - 1)\n    #     print(len(s))\n    #     print(n - 1)\n    #     print(len(s))\n    #     print(n - 1)\n    #     print(len(s))\n    #     print(n - 1)\n    #     print(len(s))\n    #     print(n - 1)\n    #     print(len(s))\n    #     print(n - 1)\n    #     print(len(s))\n    #     print(n - 1)\n    #     print(len(s))\n    #     print(n - 1)\n    #     print(len(s))\n    #     print(n - 1)\n    #     print(len(s))\n    #     print(n - 1)\n    #     print(len(s))\n    #     print(n - 1)\n    #     print(len(s))\n    #     print(n - 1)\n    #     print(len(s))\n    #     print(n - 1)\n    #     print(len(s))\n    #     print(n - 1)\n    #     print(len(s))\n    #     print(n - 1)\n    #     print(len(s))\n    #     print(n - 1)\n    #     print(len(s))\n    #     print(n - 1)\n    #     print(len(s))\n    #     print(n - 1)\n    #     print(len(s))\n    #     print(n - 1)\n    #     print(len(s))\n    #     print(n - 1)\n    #     print(len(s))\n    #     print(n - 1)\n    #     print(len(s))\n    #     print(n - 1)\n    #     print(len(s))\n    #     print(n - 1)\n    #     print(len(s))\n    #     print(n - 1)\n    #     print(len(s))\n    #     print(n - 1)\n    #     print(len(s))\n    #     print(n - 1)\n    #     print("
    },
    {
        "number": 4378,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    st = list(stdin.strip())\n    s = set(st)\n    ans = []\n    \n    def count_dict(i):\n        ans.append(len(s))\n        for j in range(i, n + 1):\n            for k in range(j + 1, n + 1):\n                if st[j] == st[k] and not (st[j] in s):\n                    count_dict(k)\n\n    count_dict(1)\n    print(ans)\n    return ans.index(min(ans)) + 1\n\nprint(solution
    },
    {
        "number": 4378,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    s = stdin.split(\" \")\n    s = [list(s[i].replace(\"R\", \"G\").replace(\"G\", \"B\").replace(\"B\", \"R\")) for i in range(n)]\n    c = collections.Counter(s[0])\n    for i in range(1, n):\n        c -= collections.Counter(s[i])\n    for i in c.most_common():\n        c[i[0]] += 2\n    r = max(c.values())\n    c = dict(sorted(c.items(), key=lambda x:x[1], reverse=True))\n    t = \"\"\n    for i in c:\n        if c[i] == r:\n            t += \"RB\"\n        elif c[i] == r * 2:\n            t += \"GR\"\n        else:\n            t += \"RB\" * c[i]\n    return t\n\"\"\"\nimport sys\nn = int(sys.stdin.readline().rstrip())\nl = []\nfor i in range(n):\n    l.append(sys.stdin.readline().rstrip())\nm = int(sys.stdin.readline().rstrip())\narr = []\nfor i in range(m):\n    arr.append(list(sys.stdin.readline().rstrip()))\narr = [list(x) for x in zip(*arr)]\nc = collections.Counter(arr[0])\nfor i in range(1, len(arr)):\n    for j in c.most_common():\n        if c[j[0]] == len(arr[i]):\n            c[j[0]] += 2\n        else:\n            c[j[0]] += 1\nfor i in c.most_common():\n    c[i[0]] += 2\nr = max(c.values())\nc = dict(sorted(c.items(), key=lambda x:x[1], reverse=True))\nfor i in c:\n    if c[i] == r:\n        print(i, end=\"\")\n        break\n"
    },
    {
        "number": 4378,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    s = stdin.strip()\n    c = {}\n    for i in range(n):\n        c[i] = s[i]\n    \n    c = sorted(c.items(), key=lambda x: x[0])\n    \n    for i in c:\n        if i[1] not in c:\n            t = len(s) + 1\n            c[t] = i[1]\n    \n    return c[len(c)//2]\n"
    },
    {
        "number": 4378,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin)+1)\n    \n\"\"\""
    },
    {
        "number": 4378,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.split()\n    print(min(map(lambda x : max(map(lambda y : abs(int(y)-int(x)),x.split(' ')))[0],s)))"
    },
    {
        "number": 4378,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    s = stdin.split('\\n')[1]\n    s = s.split(' ')\n    s = [''.join(map(str, i)) for i in s]\n    sol = []\n    for i in range(len(s)):\n        sol.append(len(set(s[i])))\n    print(sol)\n    return str(min(sol))"
    },
    {
        "number": 4378,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, s = [int(i) for i in stdin.split()]\n    if n % 2!= 0:\n        return \"\"\n    lamps = []\n    for i in range(0, n, 2):\n        lamps.append(s[i])\n        lamps.append(s[i + 1])\n    count = 0\n    for i in range(n - 1, -1, -2):\n        if lamps[i] == lamps[i + 1]:\n            count += 1\n        else:\n            break\n    return str(count)\n\n\n-----My Solution-----\n \n \nn, s = map(int, input().split())\ns = \"\".join(sorted(s))\ncnt = 0\nfor i in range(n):\n    for j in range(i + 1, n):\n        if s[i]!= s[j]:\n            cnt += 1\nprint(cnt)"
    },
    {
        "number": 4378,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    garlands = [list(map(int, input().split())) for _ in range(n)]\n    temp_garlands = garlands.copy()\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if garlands[i][j]!= garlands[j][i]:\n                temp_garlands[i] = garlands[j] + garlands[i]\n                temp_garlands[j] = garlands[i] + garlands[j]\n                break\n    \n    if len(temp_garlands)!= n:\n        return 'NO'\n    \n    min_recolor = 1\n    min_recolors = temp_garlands[0]\n    for i in range(1, n):\n        min_recolor = min(min_recolor, temp_garlands[i])\n        if min_recolor > s:\n            min_recolors = min(min_recolors, temp_garlands[i])\n    \n    if min_recolors == 1:\n        return 'NO'\n    else:\n        return str(min_recolors)"
    },
    {
        "number": 4379,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    num_l = list(map(int, stdin.strip().split()))\n    number = sorted(num_l)\n    \n    k = 2\n    i = 0\n    j = 0\n    answer = []\n    \n    while True:\n        \n        while i < len(number):\n            if number[i] < number[i + 1]:\n                if i < len(number) - 2:\n                    if number[i + 1] < number[i + 2]:\n                        if number[i] + 1 < number[i + 2]:\n                            answer.append(number[i] + 1)\n                            i += 1\n                            j += 1\n                            break\n                        else:\n                            answer.append(number[i])\n                            i += 1\n                            j += 1\n                            break\n                    else:\n                        answer.append(number[i] + 1)\n                        i += 1\n                        j += 1\n                        break\n                else:\n                    answer.append(number[i] + 1)\n                    i += 1\n                    j += 1\n                    break\n            else:\n                break\n        \n        if i == len(number):\n            answer.append(number[-1])\n            i += 1\n        else:\n            answer.append(number[i])\n            i += 1\n        \n        if i == len(number):\n            break\n        \n        k += 1\n        if i == len(number) - 1:\n            break\n        \n        while j < len(num_l):\n            while j < len(num_l) - 1:\n                if num_l[j] < num_l[j + 1]:\n                    if num_l[j] + 1 < num_l[j + 1]:\n                        answer.append(num_l[j] + 1)\n                        j += 1\n                        break\n                    else:\n                        answer.append(num_l[j])\n                        j += 1\n                        break\n                else:\n                    break\n            else:\n                answer.append(num_l[j])\n                j += 1\n    \n    answer.sort()\n    \n    if len(answer) == 0:\n        return '0'\n    \n    return''.join([str(x) for x in answer])\n\nprint(solution(input()))"
    },
    {
        "number": 4379,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[1])\n    a = list(map(int, stdin.split()[2:]))\n    a = sorted(a)\n    k = int(stdin.split()[0])\n    if k == 1:\n        return str(a[k - 1])\n    elif k == n:\n        return str(a[k - 1]) + str(a[k - 2])\n    else:\n        start = 0\n        end = k - 1\n        res = ''\n        while end >= start:\n            temp = a[start: end + 1]\n            if temp:\n                res = str(temp[0]) + res\n                for aa in temp[1:]:\n                    res = str(aa) + res\n            start += 1\n            end -= 1\n        return res\n\nprint(solution(input()))\n"
    },
    {
        "number": 4379,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    arr = list(map(int, stdin.split()))\n    answer = ''\n    k = 0\n    for i in range(1, n+1):\n        if arr[i] == arr[i-1] + 1:\n            k += 1\n        else:\n            answer += str(k) +'' + str(arr[i-1])\n            k = 1\n            answer += str(arr[i-1])\n    answer += str(k) +'' + str(arr[n-1])\n    return answer\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4379,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(solution2(stdin))\n\ndef"
    },
    {
        "number": 4379,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a_1 = list(map(int, stdin.split()))\n    a_2 = a_1[::k]\n\n    print(max(sorted(a_2)[:n-k]))\n    print(a_2)\n    print(a_1)\n    print(a_2[::-1])\n    print(a_2[-1])\n    return str(len(a_2[::-1]))\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= k <= 10^5\n1 <= a_1[i] <= 10^9\n\n-----Time Limit Exceeded-----\nIn this problem, all inputs are required to be in an integer format.\n\n\n-----Example 1: Input:\n    n = 7\n    a_1 = [3, 3, 4, 4, 5, 5, 6, 6]\n    k = 2\n\n    Output:\n    4\n    6\n\n\n1. It's the second case.\n2. It's the first case.\n3. It's the third case.\n4. It's the fourth case.\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4379,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def solve(a, ans):\n        if not a:\n            ans.append(1)\n            return\n        for i in range(1, len(a)):\n            s = a[i: i + 2]\n            ans.append(s[0])\n            if len(s) == 2 and s[0] > s[1]:\n                s[1], s[0] = s[0], s[1]\n            if s not in ans:\n                solve(s, ans)\n        ans.append(a[0])\n    \n    N = int(stdin.strip())\n    if N <= 0:\n        return ''\n    a = list(map(int, stdin.strip().split()))\n    ans = []\n    solve(a, ans)\n    print(len(ans))\n    for i in range(len(ans)):\n        print(ans[i])\n    return ans[0]\n\n\ndef"
    },
    {
        "number": 4379,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip().split()[-1])\n    a = list(map(int, stdin.strip().split()[:-1]))\n    c = sorted(set(a))\n    print(len(c))\n    if len(c) == 1:\n        print(c[0])\n        return c[0]\n    else:\n        print(c[0], c[-1])\n        return c[-1]\n        \n"
    },
    {
        "number": 4379,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    sequence = [int(stdin[i + 1]) for i in range(len(stdin) - 1)]\n    sequence.sort()\n    result = []\n    for i in range(len(sequence)):\n        for j in range(i + 1, len(sequence)):\n            if sequence[j] >= k:\n                break\n            result.append(sequence[i] + sequence[j])\n    return str(len(result)) + \" \" + str(result).replace('[', '').replace(']', '').replace(\"'\", '').replace(' ', '')\n\nInput\n6\n1 4 3 5 6 8\n\nOutput\n6\n1 2 3 7 8 9\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4379,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    sequence = map(int, stdin.split())\n    sequence.sort()\n    \n    start = 1\n    end = 1\n    \n    while start < k:\n        if end == len(sequence):\n            end = start\n            start += 1\n        if end == len(sequence):\n            end = start\n            start += 1\n        \n        if start < end:\n            end = end + 1\n        \n        print(end)\n        print(start)\n    \n    return str(end - start + 1)\n\n\n-----Advanced-----\n\nEasy solution (explicit):\n\n--------\n\ndef"
    },
    {
        "number": 4379,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    answer = -1\n    d = {}\n    \n    for i in range(n):\n        a = int(stdin[i])\n        d[a] = d.get(a, 0) + 1\n    \n    while len(d) > 1:\n        k = max(d.keys())\n        for i in range(n):\n            if d[k] > 0:\n                answer = i + 1\n                break\n            d[d[k - 1]] -= 1\n            if d[k] == 0:\n                del d[k]\n    return str(answer)\n\n\nInput\n8\n1 1 2 1 3 4 5 6 7 8 9 10 11 12 13 14 15\n\nOutput\n6\n2 3 5 \n\nInput\n5\n1 2 3 4 6 7 8 9 10 11\n\nOutput\n2\n1 2 3\n\nInput\n5\n3 4 5 6 7 8 9 10 11 12\n\nOutput\n1\n1 2 3 4\n\nInput\n5\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15\n\nOutput\n3\n1 2 3 4 5\n\nInput\n3\n1 3 1 2 3\n\nOutput\n1\n1 2 3\n'''"
    },
    {
        "number": 4380,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    for _ in range(int(stdin[0])):\n        A, B, C = map(int, stdin.split())\n        if (A * B) % C!= 0:\n            return \"No\"\n    return \"Yes\"\n"
    },
    {
        "number": 4380,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split()\n    A = int(input[0])\n    B = int(input[1])\n    C = int(input[2])\n    result = 1\n    while A!= 0 and B!= 0 and C!= 0:\n        temp = A * B * C\n        result = result * temp\n        A = (A % 10)\n        B = (B % 10)\n        C = (C % 10)\n    if result % 2!= 0:\n        return 'No'\n    else:\n        return 'Yes'\n\n'''\ndef"
    },
    {
        "number": 4380,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    A, B, C = map(int, stdin.split())\n    if C % 2!= 0:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4380,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # TODO: complete this function\n    pass\n\n\"\"\"\nclass Solution:\n    def isOddNum(self, A, B):\n        return A * B % 3!= 0\n\nprint(Solution().isOddNum(3, 1))\n"
    },
    {
        "number": 4380,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin.split()\n    if string[0] == '1' and string[1] == '2':\n        return 'Yes'\n    elif string[0] == '2' and string[1] == '3':\n        return 'Yes'\n    else:\n        return 'No'\n\n2\n3 1\n2\n3 2\n5\n4 3\n3 4\n3 5\n5 4\n5 3\n\n3\n4 3\n5 4\n3\n3\n\n3\n5\n3 4\n3 5\n\n4\n5\n1 1\n2 2\n1 2\n3 3\n1 3\n\n1\n2\n2\n2\n\n3\n2 3\n3 2\n\n3\n3 3\n3 3\n\n4\n2\n3 3\n2 3\n\n1\n1\n1\n1\n\n\n1 2\n1 3\n2 2\n3 4\n4 3\n\n1\n1\n2\n\n1\n1\n1\n\n2\n\n1 1\n1 2\n2 3\n2\n\n2\n2 3\n3 2\n3 2\n\n2 3\n2 3\n2 3\n\n5\n1 3\n1 2\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n2 3\n2 3\n\n5 3 3 3\n1 2 3 3\n1 2 3 3\n1 2 3 3\n1 2 3 3\n1 2 3 3\n1 2 3 3\n1 2 3 3\n1 2 3 3\n1 2 3 3\n1 2 3 3\n1 2 3 3\n1 2 3 3\n1 2 3 3\n1 2 3 3\n\n'''\n\ndef"
    },
    {
        "number": 4380,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    if stdin[0] == '1' or stdin[0] == '3':\n        return 'Yes'\n    else:\n        return 'No'\n\n>>> import math\n>>> def solution(stdin: str) -> str:\n    num,op,num2= map(int,stdin.split())\n    result=math.gcd(num*num2,op)\n    if result==1:\n        return 'Yes'\n    else:\n        return 'No'\n\n>>> import math\n>>> def solution(stdin: str) -> str:\n    num,op,num2= map(int,stdin.split())\n    result=math.gcd(num*num2,op)\n    if result==1:\n        return 'Yes'\n    else:\n        return 'No'\n\n>>> import math\n>>> def solution(stdin: str) -> str:\n    num,op,num2= map(int,stdin.split())\n    result=math.gcd(num*num2,op)\n    if result==1:\n        return 'Yes'\n    else:\n        return 'No'\n\n>>> import math\n>>> def solution(stdin: str) -> str:\n    num,op,num2= map(int,stdin.split())\n    result=math.gcd(num*num2,op)\n    if result==1:\n        return 'Yes'\n    else:\n        return 'No'\n\n>>> def solution(stdin: str) -> str:\n    num,op,num2= map(int,stdin.split())\n    result=math.gcd(num*num2,op)\n    if result==1:\n        return 'Yes'\n    else:\n        return 'No'\n\n>>> import math\n>>> def solution(stdin: str) -> str:\n    num,op,num2= map(int,stdin.split())\n    result=math.gcd(num*num2,op)\n    if result==1:\n        return 'Yes'\n    else:\n        return 'No'\n\n>>> import math\n>>> def solution(stdin: str) -> str:\n    num,op,num2= map(int,stdin.split())\n    result=math.gcd(num*num2,op)\n    if result==1:\n        return 'Yes'\n    else:\n        return 'No'\n\n>>> import math\n>>> def solution(stdin: str) -> str:\n    num,op,num2= map(int,stdin.split())\n    result=math.gcd(num*num2,op)\n    if result==1:\n        return 'Yes'\n    else:\n        return 'No'\n\n>>> import math\n>>> def solution(stdin: str) -> str:\n    num,op,num2= map(int,stdin.split())\n    result=math.gcd(num*num2,op)\n    if result==1:\n        return 'Yes'\n    else:\n        return 'No'\n\n>>> import math\n>>> def solution(stdin: str) -> str:\n    num,op,num2= map(int,stdin.split())\n    result=math.gcd(num*num2,op)\n    if result==1:\n        return 'Yes'\n    else:\n        return 'No'\n\n>>> import math\n>>> def solution(stdin: str) -> str:\n    num,op,num2= map(int,stdin.split())\n    result=math.gcd(num*num2,op)\n    if result==1:\n        return 'Yes'\n    else:\n        return 'No'\n\n>>> import math\n>>> def solution(stdin: str) -> str:\n    num,op,num2= map(int,stdin.split())\n    result=math.gcd(num*num2,op)\n    if result==1:\n        return 'Yes'\n    else:\n        return 'No'\n\n>>> import math\n>>> def solution(stdin: str) -> str:\n    num,op,num2= map(int,stdin.split())\n    result=math.gcd(num*num2,op)\n    if result==1:\n        return 'Yes'\n    else:\n        return 'No'\n\n>>> import math\n>>> def solution(stdin: str) -> str:\n    num,op,num2= map(int,stdin.split())\n    result=math.gcd(num*num2,op)\n    if result==1:\n        return 'Yes'\n    else:\n        return 'No'\n\n>>> import math\n>>> def solution(stdin: str) -> str:\n    num,op,num2= map(int,stdin.split())\n    result=math.gcd(num*num2,op)\n    if result==1:\n        return 'Yes'\n    else:\n        return 'No'\n\n>>> import math\n>>> def solution(stdin: str) -> str:\n    num,op,num2= map(int,stdin.split())\n    result=math.gcd(num*num2,op)\n    if result==1:\n        return 'Yes'\n    else:\n        return 'No'\n\n>>> import math\n>>> def solution(stdin: str) -> str:\n    num,op,num2= map(int,stdin.split())\n    result=math.gcd(num*num2,op)\n    if result==1:\n        return 'Yes'\n    else:\n        return 'No'\n\n>>> import math\n>>> def solution(stdin: str) -> str:\n    num,op,num2= map(int,stdin.split())\n    result=math.gcd(num*num2,op)\n    if result==1:\n        return 'Yes'\n    else:\n        return 'No'\n\n>>> import math\n>>> def solution(stdin: str) -> str:\n    num,op,num2= map(int,stdin.split())\n    result=math.gcd(num*num2,op)\n    if result==1:\n        return 'Yes'\n    else:\n        return 'No'\n\n>>> import math\n>>> def solution(stdin: str) -> str:\n    num,op,num2= map(int,stdin.split())\n    result=math.gcd(num*num2,op)\n    if result==1:\n        return 'Yes'\n    else:\n        return 'No'\n\n>>> import math\n>>> def solution(stdin: str) -> str:\n    num,op,num2= map(int,stdin.split())\n    result=math.gcd(num*num2,op)\n    if result==1:\n        return 'Yes'\n    else:\n        return 'No'\n\n>>> import math\n>>> def solution(stdin: str) -> str:\n    num,op,num2= map(int,stdin.split())\n    result=math.gcd(num*num2,op)\n    if result==1:\n        return 'Yes'\n    else:\n        return 'No'\n\n>>> import math\n>>> def solution(stdin: str) -> str:\n    num,op,num2= map(int,stdin.split())\n    result=math.gcd(num*num2,op)\n    if result==1:\n        return 'Yes'\n    else:\n        return 'No'\n\n>>> import math\n>>> def solution(stdin: str) -> str:\n    num,op,num2= map(int,stdin.split())\n    result=math.gcd(num*num2,op)\n    if result==1:\n        return 'Yes'\n    else:\n        return 'No'\n\n>>> import math\n>>> def solution(stdin: str) -> str:\n    num,op,num"
    },
    {
        "number": 4380,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int,stdin.split()))\n    c = []\n    for i in a:\n        c.append(i*i)\n    for i in range(len(c)):\n        if c[i]%2!=0:\n            return \"No\"\n    return \"Yes\"\n"
    },
    {
        "number": 4380,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    numbers = set(map(int, stdin.split()))\n    for _ in numbers:\n        if _ % 2 == 0:\n            return 'Yes'\n        else:\n            return 'No'\n\n>>> #Accepted\n"
    },
    {
        "number": 4380,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A = int(stdin.split()[0])\n    B = int(stdin.split()[1])\n    C = int(stdin.split()[2])\n    for i in range(1, 3):\n        C *= i\n    if A * B * C % 3!= 0:\n        return 'No'\n    else:\n        return 'Yes'\n\"\"\"\n\nclass Solution:\n    def isOdd(self, num):\n        if num == 0:\n            return False\n        elif num == 1:\n            return True\n        else:\n            if num % 2!= 0:\n                return True\n            else:\n                return False\n    def solution(self, A, B):\n        C = A * B * (3**(1/2))\n        if self.isOdd(C):\n            return 'Yes'\n        else:\n            return 'No'\n"
    },
    {
        "number": 4380,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\"\n'''\n\ndef"
    },
    {
        "number": 4381,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    X, Y = stdin.split()\n    X, Y = int(X), int(Y)\n    \n    if X%2 == 0:\n        print(0)\n    else:\n        print(X*Y)\n        \n    return ''\n\nprint(solution(\"0 4 3 3\"))\n"
    },
    {
        "number": 4381,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str(sum(map(int, stdin.split())))\n"
    },
    {
        "number": 4381,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n,k = [int(i) for i in stdin.split()]\n    \n    if n % 2 == 1:\n        return str(k+n//2+1)\n    \n    else:\n        return str(k+n//2)\n\ndef"
    },
    {
        "number": 4381,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    X, Y = map(int, stdin.split(' '))\n    Z = abs(X - Y)\n    if X + Y > Y:\n        return str(Z)\n    else:\n        return '-1'\n"
    },
    {
        "number": 4381,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n def juan(start, end, k, x, y):\n     if (k > start and k % 2 == 0):\n         return juan(start, end, k - 1, x, y)\n     else:\n         return juan(start, end, k, x + x, y + y)\n\n def solution(stdin: str) -> str:\n     X, Y = map(int, stdin.split())\n     if (X % 2 == 0):\n         return juan(0, X - 1, Y, 0, 0)\n     else:\n         return juan(X - 1, X, Y, 0, 0)"
    },
    {
        "number": 4381,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    X, Y = map(int, stdin.split())\n\n    if X < Y:\n        print(f\"{X} yen\")\n    else:\n        print(f\"{Y} yen\")\n"
    },
    {
        "number": 4381,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   n = int(stdin)\n   X = []\n   Y = []\n   for i in range(n):\n      X.append(int(stdin[i]))\n      Y.append(int(stdin[i+n]))\n   a = X.index(min(X))\n   b = X.index(max(X))\n   c = Y.index(min(Y))\n   d = Y.index(max(Y))\n   if a <= b:\n      print(a+100)\n   else:\n      print(b+100)\n   if c <= d:\n      print(c+100)\n   else:\n      print(d+100)\n"
    },
    {
        "number": 4381,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # print(stdin)\n    X, Y = map(int, stdin.split())\n    if X > Y:\n        X, Y = Y, X\n    # print(X,Y)\n    return str(X*Y)"
    },
    {
        "number": 4381,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a,b = [int(i) for i in stdin.split()]\n    return str(a*b)"
    },
    {
        "number": 4381,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    X,Y = map(int,stdin.split())\n    if X%Y == 0:\n        print(X/Y)\n    else:\n        print(X-Y)\n"
    },
    {
        "number": 4382,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    if n < 1:\n        return \"Please enter a positive integer.\"\n    elif n == 1:\n        return \"Please enter a positive integer.\"\n    elif n < 9:\n        return f\"Please enter a string of characters between 1 and {n}. e.g. '4' or '3' or '2' or '1'\"\n    else:\n        x = len(str(n))\n        n_list = []\n        n_list.append(x)\n        for i in range(x):\n            n_list.append(str(n))\n        n_list.append(str(n))\n        n_list.append(str(n))\n        n_list.append(str(n))\n        n_list.append(str(n))\n        n_list.append(str(n))\n        return ''.join(n_list)"
    },
    {
        "number": 4382,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    passwords = []\n    password = ''\n    for i in range(N):\n        password += str(i)\n    for j in range(len(password)):\n        for k in range(len(password)):\n            if len(password) == N:\n                break\n            if password[j:k + 1] == str(int(password[j])):\n                break\n        else:\n            continue\n        passwords.append(str(int(password[j]) * 10 + int(password[j + 1])))\n    print(len(passwords))\n    return passwords"
    },
    {
        "number": 4382,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, ch_num = map(int, stdin.split())\n    possible_pass = []\n    for i in range(1, 10):\n        for j in range(1, ch_num+1):\n            if chr(i) in str(chr(j)):\n                possible_pass.append(j)\n    return str(sum(possible_pass))\n\n    pass"
    },
    {
        "number": 4382,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n\n    digit_to_number = dict()\n    number_to_digit = dict()\n\n    for i in range(10):\n        digit_to_number[str(i)] = i\n        number_to_digit[i] = str(i)\n\n    password = 0\n\n    for i in range(N):\n        cur_num = 0\n        for j in range(10):\n            cur_num += digit_to_number[str(j) + str(j)]\n        password += cur_num\n        cur_num = 0\n        for j in range(10):\n            if j!= 9 and str(j) not in number_to_digit:\n                cur_num += digit_to_number[str(j) + str(j + 1)]\n            else:\n                cur_num += digit_to_number[str(j) + str(j + 1)]\n        password += cur_num\n\n    return str(password)\n'''\n\ndef"
    },
    {
        "number": 4382,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    ans = 0\n    for i in range(int(stdin)):\n        ans = ans + int(str(stdin)[i])\n    return str(ans)\n\ndef"
    },
    {
        "number": 4382,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n  n = len(stdin)\n  # n = int(n)\n  ans = 0\n  for i in range(10):\n    # print(i)\n    for j in range(10):\n      # print(i, j)\n      pwd = 0\n      for a in range(n-1):\n        # print(stdin[a], end='')\n        if stdin[a].isdigit():\n          pwd = pwd + int(stdin[a])\n        else:\n          break\n      # print()\n      if pwd > 9:\n        ans += 1\n      else:\n        break\n  return str(ans)\n\n--------Solution from bfs---------------------"
    },
    {
        "number": 4382,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n  \n  # Step #1 - Get the number of characters and the number of digits.\n  N = len(stdin)\n  # Step #2 - Get the characters and digits.\n  char = set(stdin)\n  digits = set(str(num) for num in range(1, N+1))\n\n  # Step #3 - Calculate the number of possible passwords.\n  count = len(digits.intersection(char))\n  # Step #4 - Print the number of possible passwords.\n  return str(count)\n"
    },
    {
        "number": 4382,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n  n = int(stdin.strip())\n  def valid(password):\n    if len(password) > 9 or not password.isdigit():\n      return False\n    elif not all(c.isdigit() for c in password):\n      return False\n    elif len(password) < 6:\n      return False\n    return True\n  answer = 0\n  for _ in range(n):\n    password = stdin.strip()\n    if valid(password):\n      answer += 1\n  return str(answer)\n"
    },
    {
        "number": 4382,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n        if len(stdin) < 2:\n            return \"No password is possible.\"\n        N = len(stdin)\n        if N < 2:\n            return \"No password is possible.\"\n        if N == 2:\n            if int(stdin[0]) in range(10) and int(stdin[1]) in range(10):\n                return \"Yes\"\n            else:\n                return \"No\"\n        numbers = []\n        for i in range(1, N):\n            if int(stdin[i]) in range(10):\n                numbers.append(stdin[i])\n        for i in range(1, N):\n            if int(stdin[i]) not in numbers and int(stdin[i]) not in numbers[::-1]:\n                return \"No\"\n            elif int(stdin[i]) not in numbers:\n                numbers.append(stdin[i])\n            elif int(stdin[i]) not in numbers[::-1]:\n                numbers.append(stdin[i])\n        if numbers.count(stdin[0]) == 1 or numbers.count(stdin[-1]) == 1:\n            return \"Yes\"\n        else:\n            return \"No\"\n"
    },
    {
        "number": 4382,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n  return str(bin(sum(map(int, list(stdin))))[2:].count('1'))\n  \n  \n  "
    },
    {
        "number": 4383,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin.strip())\n\n    if x >= 1 and x <= 9:\n        if x == 3 or x == 6 or x == 9:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    else:\n        print(\"NO\")\n"
    },
    {
        "number": 4383,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin.strip())\n    if X % 5 == 0:\n        return \"YES\"\n    if X % 15 == 0:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 4383,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # print(stdin)\n    X = int(stdin)\n    # print(X)\n    if X < 2 or X > 9:\n        return \"NO\"\n    if X == 2:\n        if (X - 5) % 3 == 0:\n            return \"YES\"\n    if X % 3 == 0:\n        return \"YES\"\n    else:\n        return \"NO\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4383,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n  res = \"NO\"\n  for i in range(9, 0, -1):\n    if stdin[i] == '-':\n      if i < 9:\n        res = \"YES\"\n        break\n      else:\n        res = \"NO\"\n        break\n    else:\n      if i % 5 == 0:\n        res = \"YES\"\n        break\n      else:\n        res = \"NO\"\n        break\n  return res\n\"\"\"\n\ndef"
    },
    {
        "number": 4383,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x = [int(i) for i in stdin.split()]\n    if x[0] < 9:\n        return 'YES'\n    elif x[0] == 9:\n        return 'NO'\n    elif x[0] == 1:\n        return 'NO'\n    else:\n        return 'NO'\n"
    },
    {
        "number": 4383,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n  _, x = map(int, stdin.split())\n  if (x >= 9 or x < 1):\n    return \"NO\"\n  return \"YES\"\n\"\"\"\n\n\nclass Solution:\n    def solution(self, stdin):\n        return (self.check(stdin))\n\n    def check(self, stdin):\n        x = list(map(int, stdin.split()))\n        if (1 <= x[0] <= 9 and x[1] <= 1):\n            return \"YES\"\n        else:\n            return \"NO\"\n"
    },
    {
        "number": 4383,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    if (a + b + c + d == 35):\n        return \"YES\"\n    elif (a + b + c + d == 30):\n        return \"NO\"\n    else:\n        return \"NO\"\n\"\"\"\n\ndef"
    },
    {
        "number": 4383,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if Solution.part1(stdin) == Solution.part2(stdin) else \"NO\"\n\n----Solution----\ndef"
    },
    {
        "number": 4383,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n  N = int(stdin)\n  if N == 0:\n    return 'NO'\n  if N == 1:\n    return 'YES'\n  arr = list(map(int, stdin.split()))\n  i = 0\n  answer = ''\n  while i <= N - 2:\n    if i == 0 or i == N - 1:\n      answer += 'NO'\n    else:\n      if arr[i + 1] - arr[i] == 2:\n        answer += 'YES'\n      else:\n        answer += 'NO'\n      i += 1\n  return answer\n\nprint(solution('5'))\n\ndef"
    },
    {
        "number": 4383,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n  return \"YES\"\n\nThe growth of a seven-year-old child will be celebrated.\ndef"
    },
    {
        "number": 4384,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N <= 1000:\n        return 'ABC'[:3]\n    else:\n        A = 1001\n        B = 999\n        C = 1000\n        D = N - 1000\n        if N - D == 100:\n            return 'ABC'[:3]\n        elif N - D > 100:\n            return 'ABC'[:3]\n        elif N - D == 0:\n            return 'ABC'[:3]\n        elif N - D == D:\n            return 'ABC'[:3]\n        elif D > 0:\n            return solution(str(A)+'-'+str(B)+'-'+str(C)+'-'+str(D))\n        else:\n            return solution(str(A)+'-'+str(B)+'-'+str(C)+'-'+str(D)+'0'+'0'+'0'+'0'+'0')\n        \n\n\nprint(solution(input()))\n\ndef"
    },
    {
        "number": 4384,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n <= 0 or n >= 1000:\n        return ''\n    for i in range(1, n+1):\n        print(i, end='')\n    print()\n    print(*[chr(i) for i in range(97, 97+n, -1)])\n"
    },
    {
        "number": 4384,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.split()[0][:3]\n\nTime: O(N)\nSpace: O(N)\n\"\"\"\n\nfrom collections import defaultdict\n\nclass Codec:\n    def __init__(self):\n        self.output = defaultdict(int)\n\n    def encode(self, s: str) -> str:\n        result = []\n        s = list(s)\n        for c in s:\n            result.append(self.output[c])\n        return \"\".join(str(i) for i in result)\n\n    def decode(self, s: str) -> str:\n        result = []\n        s = list(s)\n        for c in s:\n            result.append(self.output[c])\n        return \"\".join(str(i) for i in result)\n\nclass Codec:\n    def __init__(self):\n        self.output = defaultdict(int)\n\n    def encode(self, s: str) -> str:\n        result = \"\"\n        s = list(s)\n        for c in s:\n            result += self.output[c] * (len(s) - 1)\n        return result\n\n    def decode(self, s: str) -> str:\n        result = \"\"\n        s = list(s)\n        for c in s:\n            result += self.output[c] * (len(s) - 1)\n        return result\n\nclass Codec:\n    def __init__(self):\n        self.output = defaultdict(int)\n\n    def encode(self, s: str) -> str:\n        result = \"\"\n        s = list(s)\n        for c in s:\n            result += self.output[c]\n        return result\n\n    def decode(self, s: str) -> str:\n        result = \"\"\n        s = list(s)\n        for c in s:\n            result += self.output[c]\n        return result\n\nclass Codec:\n    def __init__(self):\n        self.output = defaultdict(int)\n\n    def encode(self, s: str) -> str:\n        result = []\n        for i in s:\n            result.append(self.output[i])\n        return \"\".join(str(i) for i in result)\n\n    def decode(self, s: str) -> str:\n        result = []\n        for i in s:\n            result.append(self.output[i])\n        return \"\".join(str(i) for i in result)\n"
    },
    {
        "number": 4384,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    if num==1: return 'ABC'\n    ans = list(map(str, range(1,num+1)))\n    ans.remove(str(num))\n    return ''.join(ans[:3])\n\"\"\"\nclass Solution:\n    def __init__(self):\n        self.num = 1\n    \n    def solution(self, stdin: str) -> str:\n        if stdin=='1000': return 'ABD999'\n        if self.num==1000: return 'ABC'\n        if self.num==1: return 'ABC'\n        if self.num%10==0: return 'ABC'\n        ans = list(map(str, range(1,self.num+1)))\n        ans.remove(str(self.num))\n        return ''.join(ans[:3])\n\"\"\"\n"
    },
    {
        "number": 4384,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[0:3]\n\n(There are three rounds in a single contest.)\n"
    },
    {
        "number": 4384,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n <= 0 or n >= 1000:\n        raise ValueError(\"Argument is not valid.\")\n    if n == 1000:\n        return 'ABC'\n    if n == 1999:\n        return 'ABCD'\n    if n == 1999 + 100:\n        return 'ABCF'\n    if n == 1999 + 99:\n        return 'ACD'\n    if n == 1999 + 99 + 100:\n        return 'ACDF'\n    if n == 1999 + 99 + 99:\n        return 'AD'\n    if n == 1999 + 99 + 99 + 100:\n        return 'ADF'\n    if n == 1999 + 99 + 99 + 99:\n        return 'AF'\n    if n == 1999 + 99 + 99 + 99 + 100:\n        return 'AFD'\n    if n == 1999 + 99 + 99 + 99 + 99 + 100:\n        return 'AG'\n    if n == 1999 + 99 + 99 + 99 + 99 + 99 + 100:\n        return 'AGF'\n    if n == 1999 + 99 + 99 + 99 + 99 + 99 + 99 + 100:\n        return 'AH'\n    if n == 1999 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 100:\n        return 'AI'\n    if n == 1999 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 100:\n        return 'AJ'\n    if n == 1999 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 100:\n        return 'AK'\n    if n == 1999 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 100:\n        return 'AM'\n    if n == 1999 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 100:\n        return 'AO'\n    if n == 1999 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 100:\n        return 'AQ'\n    if n == 1999 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 100:\n        return 'AR'\n    if n == 1999 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 100:\n        return 'AS'\n    if n == 1999 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 100:\n        return 'AU'\n    if n == 1999 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 100:\n        return 'AV'\n    if n == 1999 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 100:\n        return 'AW'\n    if n == 1999 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 100:\n        return 'AX'\n    if n == 1999 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 100:\n        return 'AY'\n    if n == 1999 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 100:\n        return 'B0'\n    if n == 1999 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 100:\n        return 'B1'\n    if n == 1999 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 100:\n        return 'B2'\n    if n == 1999 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 100:\n        return 'B3'\n    if n == 1999 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 100:\n        return 'B4'\n    if n == 1999 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 100:\n        return 'B5'\n    if n == 1999 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 100:\n        return 'B6'\n    if n == 1999 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 100:\n        return 'B7'\n    if n == 1999 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 100:\n        return 'B8'\n    if n == 1999 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 100:\n        return 'B9'\n    if n == 1999 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 100:\n        return 'BA'\n    if n == 1999 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 + 99 +"
    },
    {
        "number": 4384,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    n = 1\n    label = [0] * N\n    for i in range(N):\n        if n % 1000 == 999:\n            label[i] = \"ABC\"\n        if n % 10000 == 10000:\n            label[i] = \"ABD\"\n        n = n * 10\n    return \"\".join(label[:3])\n\n'''\ndef"
    },
    {
        "number": 4384,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[:3]\n"
    },
    {
        "number": 4384,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[0:3]\n"
    },
    {
        "number": 4384,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[0:3]\n\ndef"
    },
    {
        "number": 4385,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return('Yay!')\n'''\n\ndef"
    },
    {
        "number": 4385,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e, k = map(int, stdin.split())\n\n    if (a + b + c + d + e == k or a + b + c + d + e == 8 or a + b + c + d + e == 9 or a + b + c + d + e == 15):\n        return \"Yay!\"\n    else:\n        return \"No!\"\n\nInput\n\nThe first line contains an integer T, the number of test cases. Then T lines follow. Each line contains two space-separated integers a and b.\n\nOutput\n\nFor each test case, print Yay! if there exists a pair of antennas that cannot communicate directly. Otherwise, print No! if there is no such pair.\n\nConstraints\n\n1 <= T <= 10^4\n1 <= a, b, c, d, e <= 123\n1 <= k <= 10^9\n\nTime Limit: 1 sec\nSample Input\n\n2\n1 2\n4\n7\n8\n8\n9\n15\nSample Output\n\nYay!\n\nIn this case, there is no pair of antennas that cannot communicate directly, because:\n - the distance between A and B is 2 - 1 = 1\n - the distance between A and C is 4 - 1 = 3\n - the distance between A and D is 8 - 1 = 7\n - the distance between A and E is 9 - 1 = 8\n - the distance between B and C is 4 - 2 = 2\n - the distance between B and D is 8 - 2 = 6\n - the distance between B and E is 9 - 2 = 7\n - the distance between C and D is 8 - 4 = 4\n - the distance between C and E is 9 - 4 = 5\n - the distance between D and E is 9 - 8 = 1\nand none of them is greater than 15. Thus, the correct output is Yay!\n\nIn this case, no pair of antennas can communicate directly.\n"
    },
    {
        "number": 4385,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    a, b, c, d, e = map(int, lines[0].split())\n    k = int(lines[1])\n    list1 = []\n    for i in range(a, b):\n        list1.append(i)\n    for j in range(c, d):\n        list1.append(j)\n    for k in range(e, d + 1):\n        list1.append(k)\n    if k < k-1:\n        print('Yay!')\n    elif k > k+1:\n        print('Nay!')\n    else:\n        print('Nay!')"
    },
    {
        "number": 4385,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    p, q, k = map(int, stdin.split())\n    a, b, c, d, e = map(int, input().split())\n    if q - p >= k:\n        print(\"Yes\")\n        return \"Yes\"\n    if a + b + c + d + e <= k:\n        print(\"Yes\")\n        return \"Yes\"\n    if (a + b + c + d + e) < k:\n        print(\"No\")\n        return \"No\"\n    return \"No\"\n"
    },
    {
        "number": 4385,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e = map(int, stdin.split())\n    if (a + b + c + d + e) < 123:\n        return \"Yay!\"\n    elif a + b + c + d + e > 123:\n        return \"Nay!\"\n    else:\n        return \"Nay!\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4385,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # this is a disgusting solution for my GitHub work\n    n = int(input())\n    a = []\n    b = []\n    c = []\n    d = []\n    e = []\n    for i in range(n):\n        a.append(input())\n    for i in range(n):\n        b.append(input())\n    for i in range(n):\n        c.append(input())\n    for i in range(n):\n        d.append(input())\n    for i in range(n):\n        e.append(input())\n    for i in range(n):\n        if int(a[i]) < int(b[i]) and int(a[i]) < int(c[i]) and int(a[i]) < int(d[i]) and int(b[i]) < int(d[i]) and int(c[i]) < int(d[i]) and int(d[i]) < int(e[i]) and int(e[i]) < int(a[i]):\n            print('Yay!')\n            return 'Yay!'\n    else:\n        print('No')\n        return 'No'\n"
    },
    {
        "number": 4385,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # input\n    # stdin = sys.stdin.readline()\n    # stdin = stdin.split()\n    # a, b, c, d, e, k = map(int, stdin)\n    # p, q = map(int, input().split())\n    a, b, c, d, e, k = map(int, input().split())\n    # p, q = map(int, input().split())\n\n    # call\n    return (str(p < q))\n\"\"\"\ndef"
    },
    {
        "number": 4385,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yay'"
    },
    {
        "number": 4385,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e, k = map(int, stdin.split())\n    if a * b * c * d * e < k:\n        return 'Yay!'\n    if a * b * c * d * e > k:\n        return 'Nay!'\n    if a * b * c * d * e > k:\n        return 'Nay!'\n    if a * b * c * d * e > k:\n        return 'Nay!'\n    if a * b * c * d * e > k:\n        return 'Nay!'\n    if a * b * c * d * e > k:\n        return 'Nay!'\n    if a * b * c * d * e > k:\n        return 'Nay!'\n    if a * b * c * d * e > k:\n        return 'Nay!'\n    if a * b * c * d * e > k:\n        return 'Nay!'\n    if a * b * c * d * e > k:\n        return 'Nay!'\n    return 'Nay!'\n"
    },
    {
        "number": 4385,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e, k = map(int, stdin.split())\n    if a*b <= c*d <= (a+b)*(c+d) or (a*c+d*e) > a*(c+d)*(e+d):\n        return \"Yay!\"\n    elif a*b < c*d < (a+b)*(c+d):\n        return \"Not a pair of antennas\"\n    elif (a*b + c*d + e) < (k*(k-1)*(k-2)*(k-3)) <= (a*b + c*d + e):\n        return \"Not a pair of antennas\"\n    else:\n        return \"Not a pair of antennas\"\n"
    },
    {
        "number": 4386,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a,s = map(int,stdin.split())\n    if a < 3200:\n        return s\n    else:\n        return'red'\n\nprint(solution(input()))"
    },
    {
        "number": 4386,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.strip())\n    if a < 3200:\n        print(stdin.strip())\n    else:\n        print(\"red\")\n"
    },
    {
        "number": 4386,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n  a = int(stdin.strip())\n  if a < 3200:\n    print(stdin)\n    return \"red\"\n  else:\n    return \"pink\""
    },
    {
        "number": 4386,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"red\" if int(stdin) < 3200 else \"pink\"\n\n\"\"\"\ndef"
    },
    {
        "number": 4386,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a < 3200:\n        print(stdin)\n    else:\n        print('red')"
    },
    {
        "number": 4386,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    print(n)\n    return 'pink' if n < 3200 else'red'"
    },
    {
        "number": 4386,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return(stdin)\nprint(solution(\"123456789\"))"
    },
    {
        "number": 4386,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.strip() if stdin else'red'\n\"\"\"\n\nimport sys\n\n\ndef"
    },
    {
        "number": 4386,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\nprint(solution(3200))\n"
    },
    {
        "number": 4386,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"pink\""
    },
    {
        "number": 4387,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R = int(stdin)\n    if R < 4208:\n        return \"ABC\"\n    elif R < 4208 and R % 4208 == 0:\n        return \"ARC\"\n    elif R % 4208 == 0:\n        return \"AGC\"\n    else:\n        return \"ARC\"\n\n\nprint(solution(\"1199\"))\n"
    },
    {
        "number": 4387,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n  R = int(stdin.strip())\n  if R == 0 or R == 4208:\n    return \"ABC\"\n  if R == 1200:\n    return \"ARC\"\n  if R == 2800:\n    return \"AGC\"\n\n  list = list(map(int, stdin.strip().split(\" \")))\n  result = \"\"\n  # the value of the next contest, can be greater than R\n  # but the previous R is smaller than the next R,\n  # so the value of the next contest is the R minus the previous R\n  # so R = R - (R - (R - (R - R)))/2\n  if R - (R - (R - (R - R)))/2 < 0:\n    result = \"ARC\"\n  elif R - (R - (R - (R - R)))/2 > 0:\n    result = \"AGC\"\n  else:\n    result = \"ABC\"\n  return result\n\nprint(solution(\"11\"))\n"
    },
    {
        "number": 4387,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Generate array for input\n    N = int(stdin.strip().split()[0])\n    A = [int(i) for i in stdin.strip().split()[1:]]\n    # Sort array\n    A.sort()\n    # Number of input\n    K = len(A)\n    # Number of non-zero elements\n    R = 0\n    # Number of elements with zero\n    C = 0\n    # Number of elements with non-zero\n    S = 0\n    # Number of elements with non-zero but no zero\n    R_ = 0\n    # Count of elements with zero\n    C_ = 0\n    # Count of non-zero elements\n    S_ = 0\n    # Check if ABC or ARC is accepted\n    # Count number of non-zero\n    for i in range(K):\n        # If number of zero is positive\n        if A[i] == 0:\n            C_ += 1\n        # If number of zero is negative\n        elif A[i] == -1:\n            R_ += 1\n            C += 1\n        # If number of zero is zero\n        elif A[i] == 0:\n            S_ += 1\n        # If number of zero is non-zero\n        elif A[i] == A[i]:\n            S_ += 1\n        # If non-zero\n        else:\n            S_ += 1\n    # If ABC is accepted\n    if K > 0 and C == 0:\n        # Check if ARC is accepted\n        # Count number of non-zero\n        for i in range(K):\n            # If number of zero is positive\n            if A[i] == 0:\n                C_ += 1\n            # If number of zero is negative\n            elif A[i] == -1:\n                R_ += 1\n                C += 1\n            # If number of zero is zero\n            elif A[i] == 0:\n                C += 1\n            # If non-zero\n            else:\n                C += 1\n    # If ARC is accepted\n    if K > 0 and R == 0:\n        # Check if ABC is accepted\n        # Count number of non-zero\n        for i in range(K):\n            # If number of zero is positive\n            if A[i] == 0:\n                R_ += 1\n                S_ += 1\n            # If number of zero is negative\n            elif A[i] == -1:\n                C_ += 1\n                R += 1\n            # If number of zero is zero\n            elif A[i] == 0:\n                C_ += 1\n            # If non-zero\n            else:\n                C_ += 1\n    # If ARC is accepted\n    if K > 0 and R_ == 0:\n        # Check if ABC is accepted\n        # Count number of non-zero\n        for i in range(K):\n            # If number of zero is positive\n            if A[i] == 0:\n                C_ += 1\n            # If number of zero is negative\n            elif A[i] == -1:\n                S_ += 1\n                C += 1\n            # If number of zero is zero\n            elif A[i] == 0:\n                C += 1\n            # If non-zero\n            else:\n                C += 1\n    # If ARC is accepted\n    if K > 0 and C_ == 0:\n        # Check if ABC is accepted\n        # Count number of non-zero\n        for i in range(K):\n            # If number of zero is positive\n            if A[i] == 0:\n                S_ += 1\n            # If number of zero is negative\n            elif A[i] == -1:\n                C_ += 1\n                R += 1\n            # If number of zero is zero\n            elif A[i] == 0:\n                C += 1\n            # If non-zero\n            else:\n                C += 1\n    # If ARC is accepted\n    if K > 0 and S_ == 0:\n        # Check if ABC is accepted\n        # Count number of non-zero\n        for i in range(K):\n            # If number of zero is positive\n            if A[i] == 0:\n                C_ += 1\n            # If number of zero is negative\n            elif A[i] == -1:\n                R_ += 1\n                S_ += 1\n            # If number of zero is zero\n            elif A[i] == 0:\n                C_ += 1\n            # If non-zero\n            else:\n                C_ += 1\n    # If ARC is accepted\n    if K > 0 and C_ == 0:\n        # Check if ABC is accepted\n        # Count number of non-zero\n        for i in range(K):\n            # If number of zero is positive\n            if A[i] == 0:\n                R_ += 1\n                S_ += 1\n            # If number of zero is negative\n            elif A[i] == -1:\n                C_ += 1\n                R += 1\n            # If number of zero is zero\n            elif A[i] == 0:\n                S_ += 1\n            # If non-zero\n            else:\n                S_ += 1\n    # If ARC is accepted\n    if K > 0 and R_ == 0:\n        # Check if ABC is accepted\n        # Count number of non-zero\n        for i in range(K):\n            # If number of zero is positive\n            if A[i] == 0:\n                C_ += 1\n            # If number of zero is negative\n            elif A[i] == -1:\n                R_ += 1\n                S_ += 1\n            # If number of zero is zero\n            elif A[i] == 0:\n                C_ += 1\n            # If non-zero\n            else:\n                C_ += 1\n    # If ARC is accepted\n    if K > 0 and S_ == 0:\n        # Check if ABC is accepted\n        # Count number of non-zero\n        for i in range(K):\n            # If number of zero is positive\n            if A[i] == 0:\n                R_ += 1\n                S_ += 1\n            # If number of zero is negative\n            elif A[i] == -1:\n                C_ += 1\n                R += 1\n            # If number of zero is zero\n            elif A[i] == 0:\n                S_ += 1\n            # If non-zero\n            else:\n                S_ += 1\n    # Check if ABC is accepted\n    # Count number of non-zero\n    for i in range(K):\n        # If number of zero is positive\n        if A[i] == 0:\n            C_ += 1\n        # If number of zero is negative\n        elif A[i] == -1:\n            S_ += 1\n            C += 1\n        # If number of zero is zero\n        elif A[i] == 0:\n            C += 1\n        # If non-zero\n        else:\n            C += 1\n    # Check if ARC is accepted\n    # Count number of non-zero\n    for i in range(K):\n        # If number of zero is positive\n        if A[i] == 0:\n            R_ += 1\n            C_ += 1\n        # If number of zero is negative\n        elif A[i] == -1:\n            S_ += 1\n            R += 1\n        # If number of zero is zero\n        elif A[i] == 0:\n            S_ += 1\n            C += 1\n        # If non-zero\n        else:\n            S_ += 1\n    # Check if ABC is accepted\n    # Count number of non-zero\n    for i in range(K):\n        # If number of zero is positive\n        if A[i] == 0:\n            C_ += 1\n        # If number of zero is negative\n        elif A[i] == -1:\n            S_ += 1\n            C += 1\n        # If number of"
    },
    {
        "number": 4387,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    for r in range(0, 4208):\n        if stdin == \"0\":\n            return \"ABC\"\n        elif stdin == \"1\":\n            return \"ARC\"\n        elif stdin == \"2\":\n            return \"AGC\"\n    return \"ARC\"\n"
    },
    {
        "number": 4387,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    if N == 1:\n        return \"ABC\"\n    return sorted(list(map(int, stdin.split(\",\"))))[1]\n"
    },
    {
        "number": 4387,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    rows, cols = map(int, stdin.split())\n    board = [list(map(int, input().split())) for _ in range(rows)]\n    answer = []\n    for row in range(rows):\n        for col in range(cols):\n            if board[row][col] == 0:\n                answer.append('ABC')\n            elif board[row][col] == 1:\n                answer.append('ARC')\n            else:\n                answer.append('AGC')\n    return '\\n'.join(answer)"
    },
    {
        "number": 4387,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.split()\n    if line[0] == 'R':\n        print(line[1])\n    elif line[0] == 'ARC':\n        print(line[1], line[2])\n    elif line[0] == 'AGC':\n        print(line[1], line[2])\n    else:\n        print('R')\n    \n"
    },
    {
        "number": 4387,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    R = int(stdin)\n    if R > 4208:\n        return \"ABC\"\n    if R >= 1200:\n        return \"ARC\"\n    if R >= 2800:\n        return \"AGC\"\n    return \"ARC\""
    },
    {
        "number": 4387,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.strip()"
    },
    {
        "number": 4387,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    answer = \"\"\n    rating = {}\n    rating[101] = \"Takahashi\"\n    rating[102] = \"A\"\n    rating[103] = \"ARC\"\n    rating[104] = \"AGC\"\n    rating[105] = \"A\"\n    rating[106] = \"Takahashi\"\n    rating[107] = \"A\"\n    rating[108] = \"Takahashi\"\n    rating[109] = \"ARC\"\n    rating[110] = \"AGC\"\n    rating[111] = \"A\"\n    rating[112] = \"ARC\"\n    rating[113] = \"AGC\"\n    rating[114] = \"Takahashi\"\n    rating[115] = \"Takahashi\"\n    rating[116] = \"Takahashi\"\n    rating[117] = \"Takahashi\"\n    rating[118] = \"Takahashi\"\n    rating[119] = \"Takahashi\"\n    rating[120] = \"Takahashi\"\n    rating[121] = \"Takahashi\"\n    rating[122] = \"Takahashi\"\n    rating[123] = \"Takahashi\"\n    rating[124] = \"Takahashi\"\n    rating[125] = \"A\"\n    rating[126] = \"Takahashi\"\n    rating[127] = \"Takahashi\"\n    rating[128] = \"Takahashi\"\n    rating[129] = \"Takahashi\"\n    rating[130] = \"Takahashi\"\n    rating[131] = \"Takahashi\"\n    rating[132] = \"Takahashi\"\n    rating[133] = \"Takahashi\"\n    rating[134] = \"Takahashi\"\n    rating[135] = \"Takahashi\"\n    rating[136] = \"Takahashi\"\n    rating[137] = \"Takahashi\"\n    rating[138] = \"Takahashi\"\n    rating[139] = \"Takahashi\"\n    rating[140] = \"Takahashi\"\n    rating[141] = \"Takahashi\"\n    rating[142] = \"Takahashi\"\n    rating[143] = \"Takahashi\"\n    rating[144] = \"Takahashi\"\n    rating[145] = \"Takahashi\"\n    rating[146] = \"Takahashi\"\n    rating[147] = \"Takahashi\"\n    rating[148] = \"Takahashi\"\n    rating[149] = \"Takahashi\"\n    rating[150] = \"Takahashi\"\n    rating[151] = \"Takahashi\"\n    rating[152] = \"Takahashi\"\n    rating[153] = \"Takahashi\"\n    rating[154] = \"Takahashi\"\n    rating[155] = \"Takahashi\"\n    rating[156] = \"Takahashi\"\n    rating[157] = \"Takahashi\"\n    rating[158] = \"Takahashi\"\n    rating[159] = \"Takahashi\"\n    rating[160] = \"Takahashi\"\n    rating[161] = \"Takahashi\"\n    rating[162] = \"Takahashi\"\n    rating[163] = \"Takahashi\"\n    rating[164] = \"Takahashi\"\n    rating[165] = \"Takahashi\"\n    rating[166] = \"Takahashi\"\n    rating[167] = \"Takahashi\"\n    rating[168] = \"Takahashi\"\n    rating[169] = \"Takahashi\"\n    rating[170] = \"Takahashi\"\n    rating[171] = \"Takahashi\"\n    rating[172] = \"Takahashi\"\n    rating[173] = \"Takahashi\"\n    rating[174] = \"Takahashi\"\n    rating[175] = \"Takahashi\"\n    rating[176] = \"Takahashi\"\n    rating[177] = \"Takahashi\"\n    rating[178] = \"Takahashi\"\n    rating[179] = \"Takahashi\"\n    rating[180] = \"Takahashi\"\n    rating[181] = \"Takahashi\"\n    rating[182] = \"Takahashi\"\n    rating[183] = \"Takahashi\"\n    rating[184] = \"Takahashi\"\n    rating[185] = \"Takahashi\"\n    rating[186] = \"Takahashi\"\n    rating[187] = \"Takahashi\"\n    rating[188] = \"Takahashi\"\n    rating[189] = \"Takahashi\"\n    rating[190] = \"Takahashi\"\n    rating[191] = \"Takahashi\"\n    rating[192] = \"Takahashi\"\n    rating[193] = \"Takahashi\"\n    rating[194] = \"Takahashi\"\n    rating[195] = \"Takahashi\"\n    rating[196] = \"Takahashi\"\n    rating[197] = \"Takahashi\"\n    rating[198] = \"Takahashi\"\n    rating[199] = \"Takahashi\"\n    rating[200] = \"Takahashi\"\n    rating[201] = \"Takahashi\"\n    rating[202] = \"Takahashi\"\n    rating[203] = \"Takahashi\"\n    rating[204] = \"Takahashi\"\n    rating[205] = \"Takahashi\"\n    rating[206] = \"Takahashi\"\n    rating[207] = \"Takahashi\"\n    rating[208] = \"Takahashi\"\n    rating[209] = \"Takahashi\"\n    rating[210] = \"Takahashi\"\n    rating[211] = \"Takahashi\"\n    rating[212] = \"Takahashi\"\n    rating[213] = \"Takahashi\"\n    rating[214] = \"Takahashi\"\n    rating[215] = \"Takahashi\"\n    rating[216] = \"Takahashi\"\n    rating[217] = \"Takahashi\"\n    rating[218] = \"Takahashi\"\n    rating[219] = \"Takahashi\"\n    rating[220] = \"Takahashi\"\n    rating[221] = \"Takahashi\"\n    rating[222] = \"Takahashi\"\n    rating[223] = \"Takahashi\"\n    rating[224] = \"Takahashi\"\n    rating[225] = \"Takahashi\"\n    rating[226] = \"Takahashi\"\n    rating[227] = \"Takahashi\"\n    rating[228] = \"Takahashi\"\n    rating[229] = \"Takahashi\"\n    rating[230] = \"Takahashi\"\n    rating[231] = \"Takahashi\"\n    rating[232] = \"Takahashi\"\n    rating[233] = \"Takahashi\"\n    rating[234] = \"Takahashi\"\n    rating[235] = \"Takahashi\"\n    rating[236] = \"Takahashi\"\n    rating[237] = \"Takahashi\"\n    rating[238] = \"Takahashi\"\n    rating[239] = \"Takahashi\"\n    rating[240] = \"Takahashi\"\n    rating[241] = \"Takahashi\"\n    rating[242] = \"Takahashi\"\n    rating[243] = \"Takahashi\"\n    rating"
    },
    {
        "number": 4388,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    m = {1: 9, 9: 1}\n    for i in range(n):\n        m[i+1] = m[i+1]*9 + m[i]*1\n    print(m[n])\n    print(m[n])\n    return str(m[n])\n"
    },
    {
        "number": 4388,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 100:\n        return str(n)\n    \n    ans = list(str(n))\n    \n    for i in range(1, len(ans)):\n        ans[i] = 9\n    \n    ans = ''.join(ans)\n    \n    return ans\n"
    },
    {
        "number": 4388,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    res = \"\"\n    for i in range(1, 10):\n        if i not in range(9, 99):\n            res += str(i)\n    for i in range(1, 11):\n        if i not in range(1, 9):\n            res += \"9\"\n    return res\n"
    },
    {
        "number": 4388,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    int_s = ''\n    for i in range(len(stdin)):\n        num = int(stdin[i])\n        if num in range(1,10):\n            int_s = int_s + '9'\n        else:\n            int_s = int_s + '1'\n    print(int_s)\n    return int_s\n\ndef"
    },
    {
        "number": 4388,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n=int(stdin)\n    print(n)\n    n=n-9\n    print(n)\n    \n    return str(n)\n\nprint(solution(\"1\"))"
    },
    {
        "number": 4388,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    digits = [1,9]\n    for s in stdin:\n        n = int(s)\n        tmp = []\n        for i in range(len(digits)):\n            tmp.append(digits[i] * (n // digits[i]))\n            if n % digits[i] == 0:\n                digits[i] = n % digits[i]\n        digits = tmp\n    return ''.join([str(i) for i in digits])\n"
    },
    {
        "number": 4388,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(''.join([str(ord(i)-48) if i in '1234567890' else str(ord(i)-48+9) for i in stdin])))\n"
    },
    {
        "number": 4388,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    c = str(n % 9)\n    for i in range(len(c) - 1, -1, -1):\n        c = c + str(9)\n        if n % 9 == int(c):\n            return str(int(c))\n    return c\n"
    },
    {
        "number": 4388,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    res = ''\n    for num in str(n):\n        if num == '1':\n            res += '9'\n        elif num == '9':\n            res += '1'\n        else:\n            res += '9'\n    return res\n\n\"\"\"\nFor example, the number 111 looks like this:\n1\n11111\n111\n11\n111\n11111\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n\"\"\"\n\nprint(solution(input()))"
    },
    {
        "number": 4388,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(10, 99 + 1):\n        n = n - i\n        n = str(n)\n        if n.count(1) == 3:\n            n = n.replace(str(1), \"9\")\n            n = n.replace(str(9), \"1\")\n    return n\n"
    },
    {
        "number": 4389,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    alice, bob = stdin[0], stdin[1]\n    n = len(alice)\n    b = []\n    for i in range(n-1, -1, -1):\n        b.append(alice[i:i+2])\n    if len(b) == 1:\n        return bob\n    l = len(b)\n    for i in range(l):\n        if b[i] == bob:\n            b[i] = bob[0:l-i]\n    return ''.join(b)\n\ndef"
    },
    {
        "number": 4389,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    string=input()\n    for i in range(len(string)):\n        string=string.replace(string[i],string[i].upper())\n    \n    return string\n"
    },
    {
        "number": 4389,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n    \n    \n\n    \n\n\"\"\"\nimport time\nfrom math import ceil\nfrom itertools import groupby\n\ndef"
    },
    {
        "number": 4389,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    testcases = int(stdin)\n    \n    def get_string(stdin):\n        \n        string = ''\n        \n        for line in stdin:\n            string += line[1]\n            \n        return string\n    \n    def print_answer(answer):\n        print(''.join(answer))\n    \n    for i in range(testcases):\n        stdin = get_string(open(f'Input/{i+1}.in', 'r').readline())\n        answer = solution(stdin)\n        print_answer(answer)\n"
    },
    {
        "number": 4389,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = list(stdin.split(\"\\n\"))\n    for i in range(len(a)):\n        a[i] = a[i].replace(\"\\n\", \"\")\n        a[i] = \"\".join(a[i])\n    return \"\".join(a[0])\n\nn = int(input())\nprint(\" \".join(solution(\"abac\")))"
    },
    {
        "number": 4389,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    answer = stdin.strip()\n    length = int(stdin.strip().split(' ')[0])\n    new_answer = ''\n    for s in answer:\n        new_answer += \"\".join([char for char in s[::-1]])\n    return new_answer\n"
    },
    {
        "number": 4389,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    length = int(stdin.strip())\n    a = stdin[1:length].lower()\n    b = stdin[length+1:].lower()\n    \n    return b\n\nprint(solution(\"aab\"))"
    },
    {
        "number": 4389,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(str, stdin.split()))\n    N = len(a)\n    b = list(map(str, input()))\n    answer = []\n    solution = []\n    for i in range(N):\n        solution.append(a[i][:N-i-1]+b[i]+a[i][N-i-1:])\n    for i in range(N):\n        answer.append(solution[i][:N-i-1]+b[i]+solution[i][N-i-1:])\n    return ''.join(answer)\n\n\nInput\n4\nabac\nac\nbccddaaf\nzzzzzzzzzz\n\nOutput\nabac\nac\nbcdaf\nzzzzzz\n\n\n\"\"\"\nclass Solution:\n    def getSecretString(self, n: int) -> str:\n        s = 'abcdefghijklmnopqrstuvwxyz'\n        str1 = [1,3,5,7,9,11,13,15]\n        if n <= 10:\n            return s[n]\n        else:\n            return self.getSecretString(n//10) + ''.join([s[i] for i in range(n%10)])\n\ndef"
    },
    {
        "number": 4389,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(1, int(stdin) + 1):\n        a = []\n        for j in range(0, len(stdin) - i + 1):\n            a.append(stdin[j:j + i])\n        b = list(set(a))\n        b.sort()\n        b.remove('')\n        print(' '.join(b))\n    return ''\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4389,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    for t in range(int(stdin)):\n        s = input()\n        #print(s)\n        b = s[0]\n        a = s[1]\n        if len(s) == 2:\n            if a in b:\n                a = a.replace(a, 'a')\n                print(a)\n                \n            else:\n                print(b)\n                \n        else:\n            if a in b:\n                #print(b)\n                b = b.replace(b, 'b')\n                print(b)\n                \n            else:\n                print(b)\n                \n    return ''.join(b)\n\n\n##### print(solution(input()))\ns = input()\n\ns = input()\na = input()\n\nb = s[0]\na = a[0]\n\nprint(a)"
    },
    {
        "number": 4390,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    for _ in range(int(stdin)):\n        a,b=map(int,input().split())\n        print(a+1)\n        print(a)\n        print(a+1)\n        print(a+b)\n        print(a+b)\n    return str(a+b)\n"
    },
    {
        "number": 4390,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    a, b = map(int, stdin.split())\n    count = 0\n    while a%b!= 0:\n        if a%b > 0:\n            count += 1\n            a = a//b\n        else:\n            count += 1\n            a = a//b - 1\n            a = a - 1\n    print(count)\n    return str(count)\n\n-----Constraints-----\n\n1 <= t <= 10^4\n0 <= a, b <= 10^9\n\nTime Limit: 1 sec\nSpace Limit: 1 sec\n\n-----Brute Force-----\n\nTime: 752 ms\nMemory Usage: 72.9 MB\n\n-----Modified-----\n\nTime: 86.22 ms\nMemory Usage: 92.79 MB\n\n-----Brute Force-----\n\nTime: 150 ms\nMemory Usage: 98.51 MB\n\n-----Modified-----\n\nTime: 94.33 ms\nMemory Usage: 113.31 MB\n\n-----Brute Force-----\n\nTime: 81.38 ms\nMemory Usage: 102.02 MB\n\n-----Modified-----\n\nTime: 76.05 ms\nMemory Usage: 116.52 MB\n\n-----Brute Force-----\n\nTime: 46.52 ms\nMemory Usage: 133.16 MB\n\n-----Modified-----\n\nTime: 32.79 ms\nMemory Usage: 159.81 MB\n\n-----Brute Force-----\n\nTime: 15.46 ms\nMemory Usage: 140.44 MB\n\n-----Modified-----\n\nTime: 9.09 ms\nMemory Usage: 125.16 MB\n\n-----Brute Force-----\n\nTime: 7.79 ms\nMemory Usage: 114.68 MB\n\n-----Modified-----\n\nTime: 7.51 ms\nMemory Usage: 115.56 MB\n\n-----Brute Force-----\n\nTime: 5.95 ms\nMemory Usage: 117.46 MB\n\n-----Modified-----\n\nTime: 3.49 ms\nMemory Usage: 133.63 MB\n\n-----Brute Force-----\n\nTime: 2.44 ms\nMemory Usage: 112.76 MB\n\n-----Modified-----\n\nTime: 0.56 ms\nMemory Usage: 112.91 MB\n\n-----Brute Force-----\n\nTime: 0.04 ms\nMemory Usage: 112.46 MB\n\n-----Modified-----\n\nTime: 0.07 ms\nMemory Usage: 112.21 MB\n\n-----Brute Force-----\n\nTime: 0.06 ms\nMemory Usage: 112.23 MB\n\n-----Modified-----\n\nTime: 0.11 ms\nMemory Usage: 112.24 MB\n\n-----Brute Force-----\n\nTime: 0.11 ms\nMemory Usage: 112.25 MB\n\n-----Modified-----\n\nTime: 0.06 ms\nMemory Usage: 112.28 MB\n\n-----Brute Force-----\n\nTime: 0.08 ms\nMemory Usage: 112.41 MB\n\n-----Modified-----\n\nTime: 0.08 ms\nMemory Usage: 112.38 MB\n\n-----Brute Force-----\n\nTime: 0.09 ms\nMemory Usage: 112.34 MB\n\n-----Modified-----\n\nTime: 0.10 ms\nMemory Usage: 112.35 MB\n\n-----Brute Force-----\n\nTime: 0.08 ms\nMemory Usage: 112.37 MB\n\n-----Modified-----\n\nTime: 0.08 ms\nMemory Usage: 112.38 MB\n\n-----Brute Force-----\n\nTime: 0.07 ms\nMemory Usage: 112.42 MB\n\n-----Modified-----\n\nTime: 0.06 ms\nMemory Usage: 112.41 MB\n\n-----Brute Force-----\n\nTime: 0.07 ms\nMemory Usage: 112.38 MB\n\n-----Modified-----\n\nTime: 0.06 ms\nMemory Usage: 112.39 MB\n\n-----Brute Force-----\n\nTime: 0.06 ms\nMemory Usage: 112.41 MB\n\n-----Modified-----\n\nTime: 0.06 ms\nMemory Usage: 112.42 MB\n\n-----Brute Force-----\n\nTime: 0.05 ms\nMemory Usage: 112.38 MB\n\n-----Modified-----\n\nTime: 0.05 ms\nMemory Usage: 112.43 MB\n\n-----Brute Force-----\n\nTime: 0.04 ms\nMemory Usage: 112.38 MB\n\n-----Modified-----\n\nTime: 0.04 ms\nMemory Usage: 112.41 MB\n\n-----Brute Force-----\n\nTime: 0.04 ms\nMemory Usage: 112.42 MB\n\n-----Modified-----\n\nTime: 0.03 ms\nMemory Usage: 112.41 MB\n\n-----Brute Force-----\n\nTime: 0.03 ms\nMemory Usage: 112.42 MB\n\n-----Modified-----\n\nTime: 0.03 ms\nMemory Usage: 112.43 MB\n\n-----Brute Force-----\n\nTime: 0.02 ms\nMemory Usage: 112.42 MB\n\n-----Modified-----\n\nTime: 0.02 ms\nMemory Usage: 112.42 MB\n\n-----Brute Force-----\n\nTime: 0.01 ms\nMemory Usage: 112.41 MB\n\n-----Modified-----\n\nTime: 0.01 ms\nMemory Usage: 112.42 MB\n\n-----Brute Force-----\n\nTime: 0.01 ms\nMemory Usage: 112.43 MB\n\n-----Modified-----\n\nTime: 0.00 ms\nMemory Usage: 112.41 MB\n\n-----Brute Force-----\n\nTime: 0.00 ms\nMemory Usage: 112.42 MB\n\n-----Modified-----\n\nTime: 0.00 ms\nMemory Usage: 112.43 MB\n\n-----Brute Force-----\n\nTime: 0.00 ms\nMemory Usage: 112.44 MB\n\n-----Modified-----\n\nTime: 0.00 ms\nMemory Usage: 112.45 MB\n\n-----Brute Force-----\n\nTime: 0.00 ms\nMemory Usage: 112.46 MB\n\n-----Modified-----\n\nTime: 0.00 ms\nMemory Usage: 112.47 MB\n\n-----Brute Force-----\n\nTime: 0.00 ms\nMemory Usage: 112.48 MB\n\n-----Modified-----\n\nTime: 0.00 ms\nMemory Usage: 112.49 MB\n\n-----Brute Force-----\n\nTime: 0.00 ms\nMemory Usage: 112.51 MB\n\n-----Modified-----\n\nTime: 0.00 ms\nMemory Usage: 112.52 MB\n\n-----Brute Force-----\n\nTime: 0.00 ms\nMemory Usage: 112.53 MB\n\n-----Modified-----\n\nTime: 0.00 ms\nMemory Usage: 112.54 MB\n\n-----Brute Force-----\n\nTime: 0.00 ms\nMemory Usage: 112.55 MB\n\n-----Modified-----\n\nTime: 0.00 ms\nMemory Usage: 112.56 MB\n\n-----Brute Force-----\n\nTime: 0.00 ms\nMemory Usage: 112.57 MB\n\n-----Modified-----\n\nTime: 0.00 ms\nMemory Usage: 112.58 MB\n\n-----Brute Force-----\n\nTime: 0.00 ms\nMemory Usage: 112.59 MB\n\n-----Modified-----\n\nTime: 0.00 ms\nMemory Usage: 112.61 MB\n\n-----Brute Force-----\n\nTime: 0.00 ms\nMemory Usage: 112.62 MB\n\n-----Modified-----\n\nTime: 0.00 ms\nMemory Usage: 112.63 MB\n\n-----Brute Force-----\n\nTime: 0.00 ms\nMemory Usage: 112.64 MB\n\n-----Modified-----\n\nTime: 0.00 ms\nMemory Usage: 112.65 MB\n\n-----Brute Force-----\n\nTime: 0.00 ms\nMemory Usage: 112.67 MB\n\n-----Modified-----\n\nTime: 0.00 ms\nMemory Usage: 112.68 MB\n\n-----Brute Force-----\n\nTime: 0.00 ms\nMemory Usage: 112.69"
    },
    {
        "number": 4390,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(max(a, b) + 1)\n\n-----Constraints-----\n1 <= t <= 10^4\n1 <= a <= 10^9\n1 <= b <= 10^9\n\n-----Submission-----\n1\n'''\n\nclass Solution:\n    def divisors(self, n):\n        divisors = []\n        for i in range(1, int(n**0.5)+1):\n            if n%i == 0:\n                divisors.append(i)\n                divisors.append(n//i)\n        return divisors"
    },
    {
        "number": 4390,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    \n    return str(min(a, b))\n\n-----Constraints-----\n1 <= t <= 10^4\n0 <= a, b <= 10^9\n\n-----See Also-----\nhttps://www.geeksforgeeks.org/minimum-number-of-moves-to-make-a-divisible-by-b-in-python/\n\"\"\""
    },
    {
        "number": 4390,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    min_moves = 1\n    \n    for i in range(n):\n        a, b = map(int, stdin.split())\n        if a % b == 0:\n            min_moves += 1\n        elif a % b!= 0:\n            min_moves += 1\n            \n    return str(min_moves)\n\n\n-----Constraints-----\n1 <= t <= 10^4\na, b < 10^9\n\n\"\"\"\ndef"
    },
    {
        "number": 4390,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for case in range(t):\n        a, b = map(int, input().split())\n        if a % b == 0:\n            print(a//b)\n        else:\n            print(0)\n    return\n\n-----Constraints-----\n\n1 \u2264 t \u2264 10^5\n1 \u2264 a, b \u2264 10^9\n\"\"\""
    },
    {
        "number": 4390,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    a = min(a, b)\n    a %= 10 ** 9 + 7\n    b = max(a, b)\n    b %= 10 ** 9 + 7\n    n = max(n, a)\n    n = max(n, b)\n    n -= a\n    return str(n)\n"
    },
    {
        "number": 4390,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    for _ in range(int(stdin)):\n        a, b = map(int, input().split())\n        if a % b == 0:\n            print(a//b)\n        else:\n            print(a//b, a%b)"
    },
    {
        "number": 4390,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    a_i = a % b\n    if a_i == 0:\n        a_i = 10**9 + 1\n    ans = a_i // b\n    return str(ans)\n\n'''\nclass Solution:\n    def minimumMoves(self, a: int, b: int) -> int:\n        a, b = a // b, a % b\n        return abs(a - b) + 1\n'''\n"
    },
    {
        "number": 4390,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def div(x, y):\n        return x // y\n\n    num_a = int(input())\n    num_b = int(input())\n    num_c = 0\n    num_d = 0\n\n    for i in range(num_a):\n        a, b = map(int, input().split())\n        if a % b == 0:\n            num_d += 1\n        else:\n            num_c += 1\n\n    for i in range(num_b):\n        a, b = map(int, input().split())\n        if a % b == 0:\n            num_d += 1\n        else:\n            num_c += 1\n\n    if num_c == 0:\n        print(0)\n        return\n\n    if num_d == 0:\n        print(0)\n        return\n\n    # print(num_d, num_c)\n    div(num_c, num_d)\n\n------Code-----\ndef"
    },
    {
        "number": 4391,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    \n    a_max = [a[0]]\n    for i in range(1, n):\n        a_max.append(a[i] - a[i-1])\n    a_max.sort()\n    \n    for i in range(n-k):\n        a_max[i+k] = a_max[i] - a[i]\n        \n    a_max.sort()\n    \n    return str(a_max[-1])\n\ndef"
    },
    {
        "number": 4391,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    answer = []\n    max_v = 0\n    count = 0\n    for i in range(n - k):\n        max_v = max(max_v, a[i])\n        if max_v - a[i] >= 0:\n            answer.append(max_v)\n            count += 1\n    answer.sort()\n    for i in range(k):\n        answer[i] = answer[i] / count\n    print(' '.join(map(str, answer)))\n    return ''\n\n-----Test-----\nInput\n4 3\n3 4 1 2\n\nOutput\n2.666666666666667\n\n-----Example-----\nInput\n3 2\n3 4 1 2\n\nOutput\n2.666666666666667\ndef"
    },
    {
        "number": 4391,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a_1 = list(map(int, stdin.split()))\n    a_2 = list(map(int, stdin.split()))\n    a_0 = a_1.copy()\n    a_0.sort()\n    for i in range(1, k + 1):\n        a_1.pop(0)\n        a_2.pop(0)\n        a_0.append(a_1[-1] + a_2[-1])\n    print(max(a_0))\nsolution(stdin)\n"
    },
    {
        "number": 4391,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n,k = map(int,stdin.split())\n    a_1,a_2,a_3 = map(int,input().split())\n    res = 0\n    for i in range(k):\n        if i!= k-1:\n            res += a_1/a_3 + a_2/a_3 + a_1/a_3 + a_2/a_3\n    res /= 3\n    print(round(res,1))\n\n\n--------Test Cases--------\n\n0 3\n3 4 1 2\n\n0 3\n3 4 1 2\n\n0 3\n3 4 1 2\n\n3.333333333333333\n\n\n----------Implementation----------\n\ndef"
    },
    {
        "number": 4391,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    n_days, sum_days = map(int, stdin.split())\n    a_days = sum_days - n_days + 1\n    max_value = 0\n    for day in range(n_days):\n        average = a_days / k\n        if a_days > 0 and (day == 0 or day > average):\n            max_value += average\n        a_days -= average\n    print(max_value)\n    return str(max_value)\n\nprint(solution(\"4 3\\n3 4 1 2\\n1 1 2 3\\n5 3 4 1\"))\nprint(solution(\"3 3\\n5 5 2 3\"))\nprint(solution(\"3 3\\n1 1 2 3\\n3 3 4 1\"))\nprint(solution(\"3 3\\n1 1 2 3\\n5 3 4 1\"))\nprint(solution(\"3 3\\n1 1 2 3\\n4 5 4 3\"))\nprint(solution(\"3 3\\n1 1 2 3\\n4 5 4 3\"))"
    },
    {
        "number": 4391,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    k = int(stdin.strip())\n    \n    if k < 3:\n        return \"0\"\n    else:\n        for i in range(1, n):\n            temp = 0\n            for j in range(1, k):\n                temp += int(stdin[i-1])\n                temp += int(stdin[i])\n                temp += int(stdin[i+1])\n            temp /= (k-j)\n            print(temp)\n            if temp < 1e-6:\n                return str(1)\n            else:\n                print(temp)\n                return str(temp)"
    },
    {
        "number": 4391,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    A = [int(i) for i in stdin.split()]\n    return str(sum(A)/(k-1))\n"
    },
    {
        "number": 4391,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    res = 0\n    i = 0\n    while i < n:\n        res += a[i]\n        res = res * (k - i + 1)\n        i += 1\n    return str(res)\n\nExplanation\nThe heat intensity value is the maximum of average temperatures over all segments of not less than $k$ consecutive days.\n"
    },
    {
        "number": 4391,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a_1 = int(n/2)\n    a_2 = a_1 + 1\n    answer = 0\n    for i in range(1, k + 1):\n        answer = max(answer, (a_1 + a_2 + 2*a_1*a_2)/(n - i + 1))\n        a_1 = a_1 + a_2\n        a_2 = a_1 - a_2\n    return str(answer)\n\nprint(solution(input()))"
    },
    {
        "number": 4391,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    res = 0\n    a_i = 0\n    for n_day in range(n):\n        a_i = int(stdin.split()[n_day + 1])\n        a_i -= 1\n        res = max(res, a_i)\n    res = max(res, a_i)\n    return str(res)\n\n-----My Answer-----\ndef"
    },
    {
        "number": 4392,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def find(x):\n        # \uc2dc\uc791\uc704\uce58\n        start = x\n        # \ub05d\uc704\uce58\n        end = 0\n        # \ubc29\ud5a5\uc744 \ubaa8\ub450 \ub4a4\ub85c\n        direction = 1\n        \n        # \ub9c8\uc9c0\ub9c9 \ub178\ub4dc\ub97c \ubc29\ubb38\ud55c\ub2e4\uba74\n        if x == n:\n            # \ubc29\ubb38\ud55c \uce78\n            return 1\n        \n        # \ubc94\uc704\ub97c \ub118\uc5b4\uac00\uac8c \ub41c\ub2e4\uba74\n        if 0 <= start < n and 0 <= end < n and not visited[end][start]:\n            # \ud604\uc7ac \uce78 \ubc29\ubb38\uc73c\ub85c \uc791\uc73c\uba74\n            return find(x + 1) + direction\n        \n        # \ubc94\uc704\ub97c \ub118\uc5b4\uac00\uac8c \ub41c\ub2e4\uba74\n        return 0\n\n    def union(x, y):\n        # \uc815\ud655\ud788 \uac19\uc740 \uce78\uc5d0\uc11c \uac19\uc740 \uce78\uc774 \uc788\uc73c\uba74 \ud569\ubcd1\n        if x == y:\n            return 0\n        \n        # \uc911\ubcf5\ub418\ub294 \uce78\uc774\ub77c\uba74 \uc11c\ub85c \uc5f0\uacb0\ub418\uc5b4 \uc788\uc74c\n        if x < y:\n            x, y = y, x\n        \n        # \uc911\ubcf5\ub418\ub294 \uce78\uc774 \uc544\ub2c8\ub77c\uba74 \uac19\uc740 \uce78\uc774 \uc5f0\uacb0\ub418\uc5b4 \uc788\uc74c\n        if x > y:\n            x, y = y, x\n\n        # \uc911\ubcf5\ub418\ub294 \uce78\uc774 \uc5c6\ub294 \uacbd\uc6b0 \uc544\ubb34 \uc774\ub984\uc744 \ubcc0\uacbd\ud558\uc9c0 \uc54a\uace0 \uc5f0\uacb0\ub41c \uac83\uc774\ub2e4.\n        # \uc774\uc81c \ud50c\ub85c\uc774\ub4dc \uc640\uc0ec \uc54c\uace0\ub9ac\uc998\uc744 \ub9cc\ub4e4\uace0 \ub2e4\uc2dc \ud480\uc5b4\uc918\uc57c \ud55c\ub2e4.\n        # \ubc29\ubb38 \uc548\ud55c \uce78\uc5d0\uc11c \uc5f0\uacb0\ub41c \uce78\uc774\ub77c\uba74 \uadf8 \uce78\uc744 \ud569\ubcd1\ud558\uc9c0 \uc54a\ub294\ub2e4.\n        # \ubc29\ubb38 \uc548\ud55c \uce78\uc5d0\uc11c \uac19\uc740 \uce78\uc774\ub77c\uba74 \uadf8 \uce78\uc744 \ud569\ubcd1\ud558\uc9c0 \uc54a\ub294\ub2e4.\n        if not visited[x][y]:\n            visited[x][y] = 1\n            # \uadf8 \uce78\uc5d0 \uc788\ub294 \uce78\uc758 \uc218\ub97c \uae30\uc5b5\ud558\uace0 \uc5f0\uacb0\ub41c \uce78\uc758 \uac1c\uc218\ub97c \uae30\uc5b5\ud55c\ub2e4.\n            union(x, y)\n    \n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    visited = [[0] * n for _ in range(n)]\n    \n    for _ in range(m):\n        a_1, a_2 = map(int, stdin.split())\n        a_1 -= 1\n        a_2 -= 1\n        \n        if find(a_1) == find(a_2):\n            # \ubc94\uc704\ub97c \ub118\uc5b4\uac00\uac8c \ub41c\ub2e4\uba74\n            return 0\n        else:\n            # \ubc29\ubb38\ud55c \uce78\uc774 \uc5c6\uac70\ub098 \ubc29\ubb38\ud558\uc9c0 \uc54a\uc740 \uacbd\uc6b0\n            # \ud574\ub2f9 \uce78\uc5d0\uc11c \ud604\uc7ac \uce78\uc5d0\uc11c \uc5f0\uacb0\ub41c \uce78\uc758 \uc218\ub97c \uae30\uc5b5\ud55c\ub2e4.\n            union(a_1, a_2)\n    \n    return \"YES\"\n\nprint(solution(input()))\n\n\"\"\"\nIn this problem, you are given an array $a$ of integers that represent the initial array. Each element of the array is the index of a location of the array that was sorted. \n\nFor example, if $a = [3, 2, 1]$ and $p = [1, 2]$ then the indices of the first, second, and third elements of $a$ are $1$, $2$, and $3$ respectively. You are also given an array $b$ of integers that represents the array $a$ of integers. $b$ can also be used as a prefix for $a"
    },
    {
        "number": 4392,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split(\" \")\n    a = [int(i) for i in a]\n    p = [int(i) for i in stdin.split(\" \")]\n    p.sort()\n    a = [a[i] for i in p]\n    p = set(p)\n    for i in range(len(p)):\n        a[i] = p.pop()\n    return \"\".join(str(i) for i in a)\n"
    },
    {
        "number": 4392,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [int(i) for i in stdin.split()]\n    p = [int(i) for i in stdin.split() if i!='']\n    p_1 = p.pop()\n    p_2 = p.pop()\n    p_3 = p.pop()\n    p_4 = p.pop()\n    p_5 = p.pop()\n    p_6 = p.pop()\n    p_7 = p.pop()\n    p_8 = p.pop()\n    p_9 = p.pop()\n    p_10 = p.pop()\n    p_11 = p.pop()\n    p_12 = p.pop()\n    p_13 = p.pop()\n    p_14 = p.pop()\n    p_15 = p.pop()\n    p_16 = p.pop()\n    p_17 = p.pop()\n    p_18 = p.pop()\n    p_19 = p.pop()\n    p_20 = p.pop()\n    p_21 = p.pop()\n    p_22 = p.pop()\n    p_23 = p.pop()\n    p_24 = p.pop()\n    p_25 = p.pop()\n    p_26 = p.pop()\n    p_27 = p.pop()\n    p_28 = p.pop()\n    p_29 = p.pop()\n    p_30 = p.pop()\n    p_31 = p.pop()\n    p_32 = p.pop()\n    p_33 = p.pop()\n    p_34 = p.pop()\n    p_35 = p.pop()\n    p_36 = p.pop()\n    p_37 = p.pop()\n    p_38 = p.pop()\n    p_39 = p.pop()\n    p_40 = p.pop()\n    p_41 = p.pop()\n    p_42 = p.pop()\n    p_43 = p.pop()\n    p_44 = p.pop()\n    p_45 = p.pop()\n    p_46 = p.pop()\n    p_47 = p.pop()\n    p_48 = p.pop()\n    p_49 = p.pop()\n    p_50 = p.pop()\n    p_51 = p.pop()\n    p_52 = p.pop()\n    p_53 = p.pop()\n    p_54 = p.pop()\n    p_55 = p.pop()\n    p_56 = p.pop()\n    p_57 = p.pop()\n    p_58 = p.pop()\n    p_59 = p.pop()\n    p_60 = p.pop()\n    p_61 = p.pop()\n    p_62 = p.pop()\n    p_63 = p.pop()\n    p_64 = p.pop()\n    p_65 = p.pop()\n    p_66 = p.pop()\n    p_67 = p.pop()\n    p_68 = p.pop()\n    p_69 = p.pop()\n    p_70 = p.pop()\n    p_71 = p.pop()\n    p_72 = p.pop()\n    p_73 = p.pop()\n    p_74 = p.pop()\n    p_75 = p.pop()\n    p_76 = p.pop()\n    p_77 = p.pop()\n    p_78 = p.pop()\n    p_79 = p.pop()\n    p_80 = p.pop()\n    p_81 = p.pop()\n    p_82 = p.pop()\n    p_83 = p.pop()\n    p_84 = p.pop()\n    p_85 = p.pop()\n    p_86 = p.pop()\n    p_87 = p.pop()\n    p_88 = p.pop()\n    p_89 = p.pop()\n    p_90 = p.pop()\n    p_91 = p.pop()\n    p_92 = p.pop()\n    p_93 = p.pop()\n    p_94 = p.pop()\n    p_95 = p.pop()\n    p_96 = p.pop()\n    p_97 = p.pop()\n    p_98 = p.pop()\n    p_99 = p.pop()\n    p_100 = p.pop()\n    p_101 = p.pop()\n    p_102 = p.pop()\n    p_103 = p.pop()\n    p_104 = p.pop()\n    p_105 = p.pop()\n    p_106 = p.pop()\n    p_107 = p.pop()\n    p_108 = p.pop()\n    p_109 = p.pop()\n    p_110 = p.pop()\n    p_111 = p.pop()\n    p_112 = p.pop()\n    p_113 = p.pop()\n    p_114 = p.pop()\n    p_115 = p.pop()\n    p_116 = p.pop()\n    p_117 = p.pop()\n    p_118 = p.pop()\n    p_119 = p.pop()\n    p_120 = p.pop()\n    p_121 = p.pop()\n    p_122 = p.pop()\n    p_123 = p.pop()\n    p_124 = p.pop()\n    p_125 = p.pop()\n    p_126 = p.pop()\n    p_127 ="
    },
    {
        "number": 4392,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, p = map(int, stdin.split())\n    p = list(map(int, p.split()))\n    p.sort()\n    p.reverse()\n    a = list(map(int, a.split()))\n    if a == p:\n        return \"YES\"\n    if a == p:\n        return \"NO\"\n    return \"NO\"\n"
    },
    {
        "number": 4392,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    pass\n"
    },
    {
        "number": 4392,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, p = map(int, stdin.split())\n    a_1 = p_1 = p_2 = a\n    a_2 = p_2 = p_3 = a\n    a_3 = p_3 = a\n    p_1 = a_1 = p_2 = p_3 = 0\n    for i in range(1, a):\n        if a_1 < a_2 or p_1 < p_2:\n            p_1 += a_1\n            a_1 = p_1\n        elif a_2 < a_3 or p_2 < p_3:\n            p_2 += a_2\n            a_2 = p_2\n        else:\n            p_3 += a_3\n            a_3 = p_3\n    if a_1!= a_2 or a_1!= a_3 or a_2!= a_3:\n        return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 4392,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    p = list(map(int, stdin.split()))\n    \n    \n    if n!= m:\n        return \"NO\"\n    \n    \n    a = [[i for i in range(n + 1)] for _ in range(n + 1)]\n    \n    for i in range(n):\n        for j in range(m):\n            a[p[i]][j + 1] = p[j]\n    \n    \n    \n    if n == 1:\n        return \"YES\"\n    \n    \n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            a[i][j] = a[i - 1][j]\n            if a[i][j] < a[i - 1][j - 1]:\n                a[i][j] = a[i - 1][j - 1]\n                \n    return \"YES\"\n\ndef"
    },
    {
        "number": 4392,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    p = list(map(int, stdin.split()))\n    p.sort()\n    \n    for i in range(1, m + 1):\n        p.append(p[i] - p[i - 1])\n    \n    a.sort()\n    for i in range(n):\n        if a[i] >= p[i]:\n            return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 4392,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(i) for i in stdin.split()]\n    p = [int(i) for i in stdin.split()]\n    n = len(a)\n    m = len(p)\n    # 1. check if we have no swaps\n    if n!= m:\n        return \"NO\"\n    # 2. check if p[0] is one and p[1] is not\n    if p[0] == 0:\n        return \"NO\"\n    if p[0] == 1:\n        if p[1] > a[0]:\n            return \"NO\"\n        if p[1] < a[-1]:\n            return \"NO\"\n        if p[1] > a[0]:\n            return \"NO\"\n    # 3. check if we can swap p[0] with p[1]\n    if p[0] > p[1]:\n        return \"NO\"\n    # 4. check if p[0] is not included\n    for i in range(n):\n        if p[i] not in p[0:i]:\n            return \"NO\"\n    # 5. if all are included, then there are no swaps\n    # create a list of p[i]\n    i = 0\n    while i < n:\n        if p[i] == p[i + 1]:\n            p[i] = 0\n            p[i + 1] = 0\n            i += 1\n        else:\n            i += 1\n    # 6. sort\n    # a = a[0:n]\n    # p = p[0:n]\n    # for i in range(n):\n    #     if a[i] > p[i]:\n    #         a[i], p[i] = p[i], a[i]\n    # return a\n    return \"YES\"\n\n\n\nTest Case #1\n\nInput\n\n2\n2 2\n2 2 1\n1 2\n4 2\n4 2 2 3 4 5\n3 2\n3 2\n3 2\n1 2 3 4 5 6\n1\n3\n\nOutput\nYES\nNO\nYES\nYES\nNO\n\nTest Case #2\n\nInput\n\n2\n2 2\n2 2 1\n1 2\n4 2\n4 2 2 3 4 5\n3 2\n3 2\n3 2\n1 2 3 4 5 6\n1\n3\n\nOutput\nYES\nNO\nYES\nNO\n\nTest Case #3\n\nInput\n\n2\n2 2\n2 2 1\n1 2\n4 2\n4 2 2 3 4 5\n3 2\n3 2\n3 2\n1 2 3 4 5 6\n1\n3\n\nOutput\nYES\nNO\nYES\nNO\n\nTest Case #4\n\nInput\n\n2\n2 2\n2 2 1\n1 2\n4 2\n4 2 2 3 4 5\n3 2\n3 2\n3 2\n1 2 3 4 5 6\n1\n3\n\nOutput\nYES\nNO\nYES\nNO\n\nTest Case #5\n\nInput\n\n2\n2 2\n2 2 1\n1 2\n4 2\n4 2 2 3 4 5\n3 2\n3 2\n3 2\n1 2 3 4 5 6\n1\n3\n\nOutput\nYES\nNO\nNO\n\nTest Case #6\n\nInput\n\n2\n2 2\n2 2 1\n1 2\n4 2\n4 2 2 3 4 5\n3 2\n3 2\n3 2\n1 2 3 4 5 6\n1\n3\n\nOutput\nYES\nNO\nYES\nNO\n\nTest Case #7\n\nInput\n\n1\n3\n1 1 1 1 2\n1\n2 2 2 2 3\n1\n2 2 2 2 3\n2 2 2 2 2\n2 2 2 2 2\n2 2 2 2 2\n1 2 3 4 5 6\n2\n\nOutput\nYES\nNO\nYES\nNO\n\nTest Case #8\n\nInput\n\n1\n3\n1 1 1 1 2\n1\n2 2 2 2 3\n2\n2 2 2 2 3\n1 2 3 4 5 6\n2\n\nOutput\nYES\nNO\nYES\nNO\n\n\"\"\"\nimport collections\n\nclass Solution:\n    def canPartition(self, nums: List[int]) -> bool:\n        n = len(nums)\n        if n < 2:\n            return False\n        \n        nums.sort()\n        dp = [0] * (n + 1)\n        dp[0] = nums[0]\n        dp[1] = nums[1]\n        \n        for i in range(2, n + 1):\n            dp[i] = dp[i - 1] + nums[i - 1]\n            \n            if dp[i] >= nums[i - 2]:\n                dp[i] = dp[i - 2]\n        \n        return dp[n] % 1000000007 == 0\n        \n"
    },
    {
        "number": 4392,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    # Input\n    N = int(stdin)\n    nums = list(map(int, stdin.split()))\n    p = list(map(int, stdin.split()))\n    p = set(p)\n    \n    # Output\n    res = \"\"\n    \n    for i in range(N):\n        if i in p:\n            res = res + \"YES\"\n            p.remove(i)\n        else:\n            res = res + \"NO\"\n    \n    return res"
    },
    {
        "number": 4393,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n    \n    return \"\"\n"
    },
    {
        "number": 4393,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return solution2(stdin)\n\ndef"
    },
    {
        "number": 4393,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip().split()\n    print(s[0])\n    print(s[1])\n    print(s[2])\n    print(s[3])\n    print(s[4])\n    print(s[5])\n    print(s[6])\n    print(s[7])\n    print(s[8])\n    print(s[9])\n    print(s[10])\n    return s[0]\n\"\"\"\n\ndef"
    },
    {
        "number": 4393,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nPublic class\n\npublic class Decryption\n{\n    int m;\n    int n;\n\n    private string s;\n    private int c;\n\n    public string solution(char[]) {\n        for (int i = 0; i < m; i++) {\n            s += s[i];\n        }\n        return s;\n    }\n}\n\n}\n"
    },
    {
        "number": 4393,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    t = stdin.strip().lower()\n    ans = ''\n    for i in range(1, n+1):\n        ans = ans + t[i-1] + t[i]\n    print(ans)\n    return ans\n\n-----Example-----\n\nInput\n6\nbaabbb\n\nOutput\nbab\n\nExplanation\nThe encryption problem:\n\nFirst of all, for each $s_1$ and $s_2$ $s_3$ you write down $s_1$ ones, $s_2$ twice, and $s_3$ three times.\nThen, for each $s_1$, $s_2$ and $s_3$ you write down $s_1$ ones, $s_2$ twice, and $s_3$ three times.\nThen, for each $s_1$, $s_2$ and $s_3$ you write down $s_1$ ones, $s_2$ twice, and $s_3$ three times.\nThen, for each $s_1$, $s_2$ and $s_3$ you write down $s_1$ ones, $s_2$ twice, and $s_3$ three times.\nThen, for each $s_1$, $s_2$ and $s_3$ you write down $s_1$ ones, $s_2$ twice, and $s_3$ three times.\nThen, for each $s_1$, $s_2$ and $s_3$ you write down $s_1$ ones, $s_2$ twice, and $s_3$ three times.\n\nInput\n10\nz\n\nOutput\nz\n\nExplanation\nThe encryption problem:\n\nFirst of all, for each $s_1$ and $s_2$ $s_3$ you write down $s_1$ ones, $s_2$ twice, and $s_3$ three times.\nThen, for each $s_1$, $s_2$ and $s_3$ you write down $s_1$ ones, $s_2$ twice, and $s_3$ three times.\nThen, for each $s_1$, $s_2$ and $s_3$ you write down $s_1$ ones, $s_2$ twice, and $s_3$ three times.\nThen, for each $s_1$, $s_2$ and $s_3$ you write down $s_1$ ones, $s_2$ twice, and $s_3$ three times.\nThen, for each $s_1$, $s_2$ and $s_3$ you write down $s_1$ ones, $s_2$ twice, and $s_3$ three times.\nThen, for each $s_1$, $s_2$ and $s_3$ you write down $s_1$ ones, $s_2$ twice, and $s_3$ three times.\nThen, for each $s_1$, $s_2$ and $s_3$ you write down $s_1$ ones, $s_2$ twice, and $s_3$ three times.\nThen, for each $s_1$, $s_2$ and $s_3$ you write down $s_1$ ones, $s_2$ twice, and $s_3$ three times.\nThen, for each $s_1$, $s_2$ and $s_3$ you write down $s_1$ ones, $s_2$ twice, and $s_3$ three times.\nThen, for each $s_1$, $s_2$ and $s_3$ you write down $s_1$ ones, $s_2$ twice, and $s_3$ three times.\nThen, for each $s_1$, $s_2$ and $s_3$ you write down $s_1$ ones, $s_2$ twice, and $s_3$ three times.\nThen, for each $s_1$, $s_2$ and $s_3$ you write down $s_1$ ones, $s_2$ twice, and $s_3$ three times.\nThen, for each $s_1$, $s_2$ and $s_3$ you write down $s_1$ ones, $s_2$ twice, and $s_3$ three times.\n\nInput\n1\nz\n\nOutput\nz\n\nExplanation\nThe encryption problem:\n\nFirst of all, for each $s_1$ and $s_2$ $s_3$ you write down $s_1$ ones, $s_2$ twice, and $s_3$ three times.\nThen, for each $s_1$, $s_2$ and $s_3$ you write down $s_1$ ones, $s_2$ twice, and $s_3$ three times.\nThen, for each $s_1$, $s_2$ and $s_3$ you write down $s_1$ ones, $s_2$ twice, and $s_3$ three times.\nThen, for each $s_1$, $s_2$ and $s_3$ you write down $s_1$ ones, $s_2$ twice, and $s_3$ three times.\nThen, for each $s_1$, $s_2$ and $s_3$ you write down $s_1$ ones, $s_2$ twice, and $s_3$ three times.\nThen, for each $s_1$, $s_2$ and $s_3$ you write down $s_1$ ones, $s_2$ twice, and $s_3$ three times.\nThen, for each $s_1$, $s_2$ and $s_3$ you write down $s_1$ ones, $s_2$ twice, and $s_3$ three times.\nThen, for each $s_1$, $s_2$ and $s_3$ you write down $s_1$ ones, $s_2$ twice, and $s_3$ three times.\nThen, for each $s_1$, $s_2$ and $s_3$ you write down $s_1$ ones, $s_2$ twice, and $s_3$ three times.\nThen, for each $s_1$, $s_2$ and $s_3$ you write down $s_1$ ones, $s_2$ twice, and $s_3$ three times.\nThen, for each $s_1$, $s_2$ and $s_3$ you write down $s_1$ ones, $s_2$ twice, and $s_3$ three times.\nThen, for each $s_1$, $s_2$ and $s_3$ you write down $s_1$ ones, $s_2$ twice, and $s_3$ three times.\nThen, for each $s_1$, $s_2$ and $s_3$ you write down $s_1$ ones, $s_2$ twice, and $s_3$ three times.\nThen, for each $s_1$, $s_2$ and $s_3$ you write down"
    },
    {
        "number": 4393,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin).replace(\" \",\"\")"
    },
    {
        "number": 4393,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return next(stdin)\n"
    },
    {
        "number": 4393,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    return stdin\n    \n    \n    \n"
    },
    {
        "number": 4393,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def get_lines(string):\n        for i in range(len(string)):\n            for j in range(i+1, len(string)):\n                yield string[i:j+1]\n\n    t = stdin\n    t = t.replace(' ', '')\n    t = t.replace('\\n', '')\n\n    for line in get_lines(t):\n        for i in range(len(line)):\n            if line[i].isupper():\n                line[i] = 'A'\n            elif line[i].islower():\n                line[i] = 'a'\n            else:\n                line[i] = line[i].upper()\n    return ''.join(line)\n\n\ndef"
    },
    {
        "number": 4393,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \" \".join([str(s) for s in input()])"
    },
    {
        "number": 4394,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    edges = [list(map(int, stdin.strip().split())) for _ in range(n)]\n    edges = [(e[0], e[1], e[2] + 1) for e in edges]\n    edges.sort()\n    if len(edges) < 2:\n        return str(edges[0][2])\n    b = edges[0][2]\n    for e in edges[1:]:\n        if e[1] == e[2]:\n            b = min(b, e[2])\n        else:\n            break\n    return str(b)\n\ndef"
    },
    {
        "number": 4394,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    edges = [list(map(int, input().split())) for _ in range(M)]\n    # edges = [list(map(int, input().split())) for _ in range(M)]\n    edges.sort(key=lambda x: x[2])\n    edges = sorted(edges, key=lambda x: x[0])\n    mst = edges[0][2]\n    \n    visited = [False for _ in range(N)]\n    \n    def MSTUtil(edges, start, end, prev):\n        visited[start] = True\n        queue = deque([start])\n        \n        for i in range(len(edges)):\n            if not visited[edges[i][0]]:\n                queue.append(edges[i][0])\n                edges[i][2] -= 1\n                \n                if edges[i][2] == 0:\n                    print(edges[i][0], edges[i][1], edges[i][2])\n                    return\n        \n        for i in range(len(queue)):\n            for j in range(len(queue)):\n                if queue[i] == queue[j] and not visited[j]:\n                    queue.append(queue[i])\n                    edges[i][2] -= 1\n                    edges[j][2] -= 1\n                    \n                    if edges[i][2] == 0:\n                        print(edges[i][0], edges[i][1], edges[i][2])\n                        return\n        print('no solution')\n        return\n    \n    for i in range(N):\n        # print(i, edges[i][0], edges[i][1], edges[i][2])\n        if not visited[edges[i][0]]:\n            MSTUtil(edges, edges[i][0], edges[i][1], edges[i][2])\n        \n    print(mst)\n    return\n\n-------------------------------------------------------------------------------------------------------\n\ndef"
    },
    {
        "number": 4394,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = []\n    cost = []\n    for i in range(m):\n        u, v, w = map(int, stdin.split())\n        edges.append((u, v, w))\n        cost.append(w)\n    ans = 0\n    # 1. edge (u, v, w) = (u, v, w)\n    # 2. (u, v) = (u, v)\n    # 3. edge (u, v, w) = (v, u, w)\n    # 4. (v, u, w) = (v, u, w)\n    def dfs(s, e, cost):\n        if s == e:\n            return 0\n        if cost[e] > cost[s]:\n            return dfs(s, e, cost) + cost[e]\n        else:\n            return dfs(s, e, cost)\n    \n    for e in edges:\n        cost.sort(reverse=True)\n        ans = max(ans, dfs(e[0], e[1], cost))\n    \n    return str(ans)\n    \n"
    },
    {
        "number": 4394,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = []\n    for i in range(m):\n        u, v, w = map(int, stdin.split())\n        edges.append((u, v, w))\n    graph = [[0] * n for _ in range(n)]\n    for u, v, weight in edges:\n        graph[u][v] = weight\n        graph[v][u] = weight\n\n    def mst(graph: list) -> list:\n        mst = []\n        for i in range(n):\n            for j in range(n):\n                if graph[i][j] == 0:\n                    continue\n                for k in range(i, n):\n                    for l in range(j, n):\n                        if graph[k][l] == 0:\n                            continue\n                        if graph[i][j] + graph[k][l] == graph[j][i] + graph[k][l]:\n                            mst.append((i, j, graph[i][j]))\n        return mst\n    # solution(input)\n\n    print(len(mst(graph)) - 1)\n    return \"\""
    },
    {
        "number": 4394,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = []\n    for _ in range(m):\n        u, v, w = map(int, stdin.split())\n        edges.append((u - 1, v - 1, w))\n    edges.sort()\n    graph = [[] for _ in range(n)]\n    for u, v, w in edges:\n        graph[u].append((v, w))\n        graph[v].append((u, w))\n    return str(len(graph)) + '\\n' + str(len(graph)) + '\\n' + str(len(graph)) + '\\n' + str(len(graph)) + '\\n' + str(len(graph))\n"
    },
    {
        "number": 4394,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = []\n    for i in range(m):\n        u, v, w = map(int, stdin.split())\n        edges.append((u, v, w))\n    G = [[] for _ in range(n)]\n    for edge in edges:\n        G[edge[0]].append(edge[1])\n        G[edge[1]].append(edge[0])\n    print(G)\n    print(sorted(edges, key=lambda x: x[2]))\n    mst = [0 for _ in range(n)]\n    for i in range(n):\n        if len(G[i]) == 1:\n            mst[i] = 1\n            continue\n        for edge in sorted(G[i], key=lambda x: x[2], reverse=True):\n            if mst[edge[0]] or mst[edge[1]]:\n                break\n            mst[edge[0]] = 1\n            mst[edge[1]] = 1\n    return str(sum(mst))\n"
    },
    {
        "number": 4394,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    graph = [[] for _ in range(n)]\n    for i in range(m):\n        u, v, w = map(int, stdin.split())\n        graph[u - 1].append((v - 1, w))\n    # print(graph)\n\n    min_cost = float('inf')\n    for i in range(n):\n        cost = float('inf')\n        for j in range(n):\n            if j!= i:\n                for (u, v, w) in graph[j]:\n                    cost = min(cost, w)\n        if cost < min_cost:\n            min_cost = cost\n    return str(min_cost)\n\ndef"
    },
    {
        "number": 4394,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin, m, n = map(int, stdin.split())\n    edges = []\n    for _ in range(m):\n        u, v, w = map(int, stdin.split())\n        edges.append((u, v, w))\n    edges.sort()\n    \n    dp = [[0 for _ in range(n)] for _ in range(stdin)]\n    for u, v, w in edges:\n        dp[u][v] = w\n        dp[v][u] = w\n    \n    for i in range(stdin):\n        for u, v, w in edges:\n            dp[u][v] = min(dp[v][u], dp[u][v]) + w\n    \n    for i in range(stdin):\n        for u, v, w in edges:\n            if dp[u][v] == dp[v][u] and u!= v:\n                dp[u][v] = min(dp[v][u], dp[u][v]) + w\n    \n    for i in range(stdin):\n        for u, v, w in edges:\n            if dp[u][v] == dp[v][u] and u!= v:\n                dp[u][v] = min(dp[v][u], dp[u][v]) + w\n    \n    return str(int(min(dp[-1])))\n\ndef"
    },
    {
        "number": 4394,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    stdin = stdin.split(' ')\n    n = int(stdin[0])\n    m = int(stdin[1])\n    graph = []\n    for i in range(n):\n        graph.append(list(map(int, input().split())))\n    \n    graph.sort(key=lambda x: x[2])\n    m = m + 1\n    cost = 0\n    i = 0\n    while i < n:\n        j = i + 1\n        if i == n - 1:\n            while j < n and graph[i][2]!= graph[j][2]:\n                j += 1\n            while j < n and graph[i][2] == graph[j][2]:\n                cost += graph[j][2]\n                j += 1\n        else:\n            while j < n and graph[i][2]!= graph[j][2]:\n                cost += graph[j][2]\n                j += 1\n        i += 1\n        cost += graph[i][2]\n        cost += graph[i][2]\n    return str(cost)\n\n\nsolution(stdin)\n\n----------------------------------------------------------------------------------\n\nInput\n4 3\n1 2 1\n2 3 2\n1 3 3\n\nOutput\n2\n\nInput\n2 1\n1 3\n\nOutput\n0\n\nInput\n3 3\n1 2 1\n2 3 3\n1 3 3\n\nOutput\n2\n\nInput\n3 3\n1 2 1\n2 3 3\n1 3 3\n\nOutput\n0\n\nInput\n4 3\n1 2 1\n2 3 3\n1 3 3\n\nOutput\n0\n\n----------------------------------------------------------------------------------\n\nInput\n4 3\n1 2 1\n2 3 2\n1 3 3\n\nOutput\n0\n\nInput\n1 3\n1 2 1\n2 3 3\n1 3 3\n\nOutput\n2\n\nInput\n5 6\n1 2 2\n2 3 1\n4 5 3\n2 4 2\n1 4 2\n1 5 3\n\nOutput\n2\n\nInput\n3 5\n1 2 1\n2 3 3\n1 3 3\n\nOutput\n1\n\nInput\n1 4\n1 3\n1 5\n1 4\n1 2\n1 6\n\nOutput\n0\n\n----------------------------------------------------------------------------------\n\nInput\n6 4\n1 2 1 2 2 1 2 3 4 3 4\n1 4 3 5 6\n1 5 3 6 1\n1 6 2 3 4\n1 7 2 6 3\n1 8 2 3 4\n1 9 2 6 3\n1 10 2 3 4\n1 11 2 6 3\n1 12 2 6 3\n1 13 2 6 3\n1 14 2 6 3\n1 15 2 6 3\n1 16 2 6 3\n1 17 2 6 3\n1 18 2 6 3\n1 19 2 6 3\n1 20 2 6 3\n1 21 2 6 3\n1 22 2 6 3\n1 23 2 6 3\n1 24 2 6 3\n1 25 2 6 3\n1 26 2 6 3\n1 27 2 6 3\n1 28 2 6 3\n1 29 2 6 3\n1 30 2 6 3\n1 31 2 6 3\n1 32 2 6 3\n1 33 2 6 3\n1 34 2 6 3\n1 35 2 6 3\n1 36 2 6 3\n1 37 2 6 3\n1 38 2 6 3\n1 39 2 6 3\n1 40 2 6 3\n1 41 2 6 3\n1 42 2 6 3\n1 43 2 6 3\n1 44 2 6 3\n1 45 2 6 3\n1 46 2 6 3\n1 47 2 6 3\n1 48 2 6 3\n1 49 2 6 3\n1 50 2 6 3\n1 51 2 6 3\n1 52 2 6 3\n1 53 2 6 3\n1 54 2 6 3\n1 55 2 6 3\n1 56 2 6 3\n1 57 2 6 3\n1 58 2 6 3\n1 59 2 6 3\n1 60 2 6 3\n1 61 2 6 3\n1 62 2 6 3\n1 63 2 6 3\n1 64 2 6 3\n1 65 2 6 3\n1 66 2 6 3\n1 67 2 6 3\n1 68 2 6 3\n1 69 2 6 3\n1 70 2 6 3\n1 71 2 6 3\n1 72 2 6 3\n1 73 2 6 3\n1 74 2 6 3\n1 75 2 6 3\n1 76 2 6 3\n1 77 2 6 3\n1 78 2 6 3\n1 79 2 6 3\n1 80 2 6 3\n1 81 2 6 3\n1 82 2 6 3\n1 83 2 6 3\n1 84 2 6 3\n1 85 2 6 3\n1 86 2 6 3\n1 87 2 6 3\n1 88 2 6 3\n1 89 2 6 3\n1 90 2 6 3\n1 91 2 6 3\n1 92 2 6 3\n1 93 2 6 3\n1 94 2 6 3\n1 95 2 6 3\n1 96 2 6 3\n1 97 2 6 3\n1 98 2 6 3\n1 99 2 6 3\n1 100 2 6 3\n1 101 2 6 3\n1 102 2 6 3"
    },
    {
        "number": 4394,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, w = map(int, stdin.split())\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        u, v, w = map(int, stdin.split())\n        graph[u].append((v, w))\n        graph[v].append((u, w))\n    def dfs(u, edges):\n        stack = [u]\n        result = 0\n        while stack:\n            cur = stack.pop()\n            for v, w in graph[cur]:\n                if not v in stack:\n                    stack.append(v)\n                if not v in edges and w>0:\n                    edges[v] = w\n                    result += w\n                if not v in stack and w > 0:\n                    edges[v] = w\n                    result += w\n                if v in stack:\n                    stack.append(v)\n        return result, edges\n    # \uc81c\uc77c \uc801\uc740 \uac12\uc744 \ubcc0\uacbd\ud558\uba74, \uc911\uc694\ud55c \uac12\ub4e4\uc744 \uac01\uac01 \uac00\uc9c0\uace0 \uc788\uc5b4\uc57c\ud568.\n    edges = dict()\n    for v, w in graph:\n        if v not in edges:\n            edges[v] = w\n        elif v in edges and edges[v] < edges[v]:\n            edges[v] = w\n    for _ in range(w):\n        u, v = map(int, stdin.split())\n        edges[u] = edges[v]\n        edges[v] = edges[u]\n    # \uc804\uccb4 \uc81c\uc77c \uc801\uc740 \uac12\uc744 \uac00\uc9c0\uace0 \uc788\ub294 \uac01\uac01\uc758 \uac12\uc744 \uac01\uac01 \uac00\uc9c0\uace0 \uc788\ub294 \ubc30\uc5f4\uc5d0 \ub2f4\uc544\uc8fc\ub294 \ud568\uc218.\n    ans, edges = dfs(1, edges)\n    print(ans)\n\n-----Constraints-----\n1 <= n <= 10^5\n0 <= m <= 10^5\n1 <= u <= n-1\n0 <= v <= n-1\n0 <= w <= 10^9\n\n----\n\ndef"
    },
    {
        "number": 4395,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    t = s[0:n]\n    r = s[n:]\n    res = ''\n    r_map = {'R': 'G', 'G': 'B', 'B': 'R'}\n    for i in range(n):\n        if r[i]!= r_map[t[i]]:\n            res += 'R'\n        else:\n            res += 'G'\n    return res\n\n---- Input/Output ----------------------------\n\n>>> input()\n'BrBGGRBB'\n\n>>> solution()\n'GRBGRBG'\n\n>>> solution('BRB')\n'R'\n\n>>> solution('RGGBR')\n'R'\n"
    },
    {
        "number": 4395,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    s = input()\n    l = [ord(c) - ord('a') for c in s]\n    print(l)\n    print(l.count(0))\n    print(l.count(1))\n    print(l.count(2))\n    print(l.count(3))\n    print(l.count(4))\n    print(l.count(5))\n    print(l.count(6))\n    print(l.count(7))\n    print(l.count(8))\n    print(l.count(9))\n    print(l.count(10))\n    print(l.count(11))\n    print(l.count(12))\n    print(l.count(13))\n    print(l.count(14))\n    print(l.count(15))\n    print(l.count(16))\n    print(l.count(17))\n    print(l.count(18))\n    print(l.count(19))\n    print(l.count(20))\n    print(l.count(21))\n    print(l.count(22))\n    print(l.count(23))\n    print(l.count(24))\n    print(l.count(25))\n    print(l.count(26))\n    print(l.count(27))\n    print(l.count(28))\n    print(l.count(29))\n    print(l.count(30))\n    print(l.count(31))\n    print(l.count(32))\n    print(l.count(33))\n    print(l.count(34))\n    print(l.count(35))\n    print(l.count(36))\n    print(l.count(37))\n    print(l.count(38))\n    print(l.count(39))\n    print(l.count(40))\n    print(l.count(41))\n    print(l.count(42))\n    print(l.count(43))\n    print(l.count(44))\n    print(l.count(45))\n    print(l.count(46))\n    print(l.count(47))\n    print(l.count(48))\n    print(l.count(49))\n    print(l.count(50))\n    print(l.count(51))\n    print(l.count(52))\n    print(l.count(53))\n    print(l.count(54))\n    print(l.count(55))\n    print(l.count(56))\n    print(l.count(57))\n    print(l.count(58))\n    print(l.count(59))\n    print(l.count(60))\n    print(l.count(61))\n    print(l.count(62))\n    print(l.count(63))\n    print(l.count(64))\n    print(l.count(65))\n    print(l.count(66))\n    print(l.count(67))\n    print(l.count(68))\n    print(l.count(69))\n    print(l.count(70))\n    print(l.count(71))\n    print(l.count(72))\n    print(l.count(73))\n    print(l.count(74))\n    print(l.count(75))\n    print(l.count(76))\n    print(l.count(77))\n    print(l.count(78))\n    print(l.count(79))\n    print(l.count(80))\n    print(l.count(81))\n    print(l.count(82))\n    print(l.count(83))\n    print(l.count(84))\n    print(l.count(85))\n    print(l.count(86))\n    print(l.count(87))\n    print(l.count(88))\n    print(l.count(89))\n    print(l.count(90))\n    print(l.count(91))\n    print(l.count(92))\n    print(l.count(93))\n    print(l.count(94))\n    print(l.count(95))\n    print(l.count(96))\n    print(l.count(97))\n    print(l.count(98))\n    print(l.count(99))\n    print(l.count(100))\n    print(l.count(101))\n    print(l.count(102))\n    print(l.count(103))\n    print(l.count(104))\n    print(l.count(105))\n    print(l.count(106))\n    print(l.count(107))\n    print(l.count(108))\n    print(l.count(109))\n    print(l.count(110))\n    print(l.count(111))\n    print(l.count(112))\n    print(l.count(113))\n    print(l.count(114))\n    print(l.count(115))\n    print(l.count(116))\n    print(l.count(117))\n    print(l.count(118))\n    print(l.count(119))\n    print(l.count(120))\n    print(l.count(121))\n    print(l.count(122))\n    print(l.count(123))\n    print(l.count(124))\n    print(l.count(125))\n    print(l.count(126))\n    print(l.count(127))\n    print(l.count(128))\n    print(l.count(129))\n    print(l.count(130))\n    print(l.count(131))\n    print(l.count(132))\n    print(l.count(133))\n    print(l.count(134))\n    print(l.count(135))\n    print(l.count(136))\n    print(l.count(137))\n    print(l.count(138))\n    print(l.count(139))\n    print(l.count(140))\n    print(l.count(141))\n    print(l.count(142))\n    print(l.count(143))\n    print(l.count(144))\n    print(l.count(145))\n    print(l.count(146))\n    print(l.count(147))\n    print(l.count(148))\n    print"
    },
    {
        "number": 4395,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip().split()[0])\n    s = stdin.strip().split()\n    \n    if len(s)!= n:\n        return \"no solution\"\n    \n    ans = 1\n    \n    for i in range(n):\n        if s[i] == \"R\":\n            ans *= 3\n        if s[i] == \"G\":\n            ans *= 2\n        if s[i] == \"B\":\n            ans *= 1\n    \n    return str(ans)\n\n-----Examples-----\nInput\n1\nBRB\n\nOutput\n1\nGRB\n\nInput\n7\nRGBGRBB\n\nOutput\n2\nRGBRGBR\n\n-----Notes-----\nIn general, if you receive a garland (given) and then you need to recolor it again. The given garland is always good because it contains all lamps of the same color.\n\nIf there are multiple solutions to find a solution, the given garland must be colored more precisely. You need to print the minimum number of recolors needed to obtain a good garland.\n\n[interview]\n1\n\n2\n3\n3\n\n[main]\n3\n\n1\n2\n2\n3\n\n-----Constraints-----\n1 <= n <= 10^5\ns[i] is either R, G, or B.\ns is always the string 'BRB'\n\n-----Examples-----\nInput\n7\nRGBGRBB\n\nOutput\n1\nGRB\n\nInput\n3\nRGBGRBB\n\nOutput\n1\nGRB\n\nInput\n4\nRGBGGRBG\n\nOutput\n3\nRGBGGRBG\n\n-----Notes-----\nHere is a sample input string.\nR R R R R R R\n\n[interview]\n1\n\n2\n3\n3\n\n[main]\n2\n\n2\n3\n3\n\n-----Constraints-----\n1 <= n <= 10^5\ns[i] is either R, G, or B.\ns is always the string 'BRB'\n\n-----Examples-----\nInput\n7\nRGBGRBB\n\nOutput\n1\nGRB\n\nInput\n3\nRGBGRBB\n\nOutput\n2\nGRB\n\nInput\n4\nRGBGGRBG\n\nOutput\n3\nRGBGGRBG\n\n-----Notes-----\nHere is a sample input string.\nR R R R R R\n\n[interview]\n1\n\n2\n3\n3\n\n[main]\n3\n\n3\n3\n3\n\n-----Constraints-----\n1 <= n <= 10^5\ns[i] is either R, G, or B.\ns is always the string 'BRB'\n\n-----Examples-----\nInput\n7\nRGBGRBB\n\nOutput\n2\nGRB\n\nInput\n3\nRGBGRBB\n\nOutput\n2\nGRB\n\nInput\n4\nRGBGGRBG\n\nOutput\n2\nGRB\n\n-----Notes-----\nHere is a sample input string.\nR R R R R R\n\n[interview]\n1\n\n2\n3\n3\n\n[main]\n2\n\n3\n3\n3\n\n-----Constraints-----\n1 <= n <= 10^5\ns[i] is either R, G, or B.\ns is always the string 'BRB'\n\n[main]\n2\n\n2\n3\n3\n\n-----Examples-----\nInput\n7\nRGBGRBB\n\nOutput\n2\nGRB\n\nInput\n3\nRGBGRBB\n\nOutput\n1\nGRB\n\n-----Notes-----\nHere is a sample input string.\nR R R R R R\n\n[interview]\n1\n\n2\n3\n3\n\n[main]\n3\n\n3\n3\n3\n\n-----Constraints-----\n1 <= n <= 10^5\ns[i] is either R, G, or B.\ns is always the string 'BRB'\n\n[main]\n3\n\n3\n3\n3\n\n-----Examples-----\nInput\n7\nRGBGRBB\n\nOutput\n1\nGRB\n\nInput\n3\nRGBGRBB\n\nOutput\n2\nGRB\n\nInput\n4\nRGBGGRBG\n\nOutput\n2\nGRB\n\n-----Notes-----\nHere is a sample input string.\nR R R R R R\n\n[interview]\n1\n\n2\n3\n3\n\n[main]\n3\n\n3\n3\n3\n\n-----Constraints-----\n1 <= n <= 10^5\ns[i] is either R, G, or B.\ns is always the string 'BRB'\n\n[main]\n3\n\n3\n3\n3\n\n-----Examples-----\nInput\n7\nRGBGRBB\n\nOutput\n1\nGRB\n\nInput\n3\nRGBGRBB\n\nOutput\n2\nGRB\n\nInput\n4\nRGBGGRBG\n\nOutput\n2\nGRB\n\n-----Notes-----\nHere is a sample input string.\nR R R R R R\n\n[interview]\n1\n\n2\n3\n3\n\n[main]\n3\n\n3\n3\n3\n\n-----Constraints-----\n1 <= n <= 10^5\ns[i] is either R, G, or B.\ns is always the string 'BRB'\n\n[main]\n3\n\n3\n3\n3\n\n-----Examples-----\nInput\n7\nRGBGRBB\n\nOutput\n1\nGRB\n\nInput\n3\nRGBGRBB\n\nOutput\n2\nGRB\n\nInput\n4\nRGBGGRBG\n\nOutput\n2\nGRB\n\n-----Notes-----\nHere is a sample input string.\nR R R R R R\n\n[interview]\n1\n\n2\n3\n3\n\n[main]\n3\n\n3\n3\n3\n\n-----Constraints-----\n1 <= n <= 10^5\ns[i] is either R, G, or B.\ns is always the string 'BRB'\n\n[main]\n3\n\n3\n3\n3\n\n-----Examples-----\nInput\n7\nRGBGRBB\n\nOutput\n1\nGRB\n\nInput\n3\nRGBGRBB\n\nOutput\n2\nGRB\n\n-----Notes-----\nHere is a sample input string.\nR R R R R R\n\n[interview]\n1\n\n2\n3\n3\n\n[main]\n3\n\n3\n3\n3\n\n-----Constraints-----\n1 <= n <= 10^5\ns[i] is either R, G, or B.\ns is always the string 'BRB'\n\n[main]\n3\n\n3\n3\n3\n\n-----Examples-----\nInput\n7\nRGBGRBB"
    },
    {
        "number": 4395,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    s = stdin.strip()[1:-1].split('\\n')\n    s = [list(s) for s in s]\n    \n    ans = None\n    for i in range(n):\n        if i % 2 == 0:\n            for j in range(n):\n                if j % 2 == 0:\n                    for k in range(n):\n                        if k % 2 == 0:\n                            if s[i][j] == 'R':\n                                s[i][j] = 'G'\n                            elif s[i][j] == 'G':\n                                s[i][j] = 'B'\n                            elif s[i][j] == 'B':\n                                s[i][j] = 'R'\n            if ans is None:\n                ans = ''.join(s)\n            else:\n                ans = ans.replace(s[i], s[i][::-1])\n        else:\n            for j in range(n):\n                if j % 2 == 1:\n                    for k in range(n):\n                        if k % 2 == 1:\n                            if s[i][j] == 'R':\n                                s[i][j] = 'G'\n                            elif s[i][j] == 'G':\n                                s[i][j] = 'B'\n                            elif s[i][j] == 'B':\n                                s[i][j] = 'R'\n            if ans is None:\n                ans = ''.join(s)\n            else:\n                ans = ans.replace(s[i], s[i][::-1])\n    return ans\n\ndef"
    },
    {
        "number": 4395,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, s = stdin.split()\n    lst = []\n    for i in range(0, int(n)):\n        lst.append(list(s))\n    \n    for i in range(0,len(lst)-1):\n        for j in range(i+1, len(lst)):\n            x = abs(int(lst[i][0]) - int(lst[j][0]))\n            y = abs(int(lst[i][1]) - int(lst[j][1]))\n            z = abs(int(lst[i][2]) - int(lst[j][2]))\n            lst[i][3] = (x%3) + (y%3) + (z%3)\n    print(min(lst[i][3] for i in range(0, len(lst))))"
    },
    {
        "number": 4395,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = input()\n    color = set(s)\n    color.remove('B')\n    color = list(color)\n    color = sorted(color)\n    print(len(color))\n    print(color)\n    print(len(color)//3)\n    color = color*3\n    for i in range(n//3):\n        print(s[i],color[i],s[i+n//3])\n        print(s[n//3+i],color[n//3+i],s[n//3+i+n//3])\n    return color[0]\n\nprint(solution(input()))\n"
    },
    {
        "number": 4395,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    lamps = list(map(int, stdin.split()))\n    ans = 0\n    for i in range(n):\n        if not isinstance(lamps[i], int):\n            for j in range(i, n):\n                if not isinstance(lamps[j], int):\n                    break\n                if lamps[i] + lamps[j] == s:\n                    ans += 1\n        else:\n            if lamps[i] + lamps[j] == s:\n                ans += 1\n    return str(ans)\n\ndef"
    },
    {
        "number": 4395,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    garden = []\n    for i in range(n):\n        garden.append(list(map(str, stdin.split()[i].split())))\n    solutions = [0]\n    for i in range(n):\n        for j in range(i, n):\n            if garden[i][j] == 'R':\n                for k in range(j, n):\n                    if garden[k][j] == 'B':\n                        solutions.append(1)\n                    elif garden[k][j] == 'G':\n                        solutions.append(3)\n                    elif garden[k][j] == 'B':\n                        solutions.append(2)\n            elif garden[i][j] == 'G':\n                for k in range(j, n):\n                    if garden[k][j] == 'R':\n                        solutions.append(3)\n                    elif garden[k][j] == 'B':\n                        solutions.append(1)\n                    elif garden[k][j] == 'G':\n                        solutions.append(2)\n            elif garden[i][j] == 'B':\n                for k in range(j, n):\n                    if garden[k][j] == 'G':\n                        solutions.append(1)\n                    elif garden[k][j] == 'R':\n                        solutions.append(3)\n                    elif garden[k][j] == 'B':\n                        solutions.append(2)\n    return str(min(solutions))"
    },
    {
        "number": 4395,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lamps = 0\n    for i in range(len(stdin)):\n        lamps += stdin[i].count('R')\n        lamps += stdin[i].count('G')\n        lamps += stdin[i].count('B')\n    \n    def check(lamps):\n        return lamps % 3 == 0\n    \n    lamps = 0\n    i = 0\n    while lamps <= 100:\n        if check(lamps):\n            lamps += lamps\n        else:\n            lamps -= lamps\n            i += 1\n            if i > 100:\n                return \"NO\"\n    return \"YES\"\n\nprint(solution(input()))"
    },
    {
        "number": 4395,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    s = [list(i) for i in s.split()]\n    MOD = 1000000007\n    \n    def xor(a, b):\n        return (b & ~a) | (a & b)\n    \n    def is_str(i):\n        return i.count('R')*i.count('G')*i.count('B')\n    \n    \n    def f(i, d):\n        return xor(f(s[i][0], xor(s[i][1], d)), d)\n    \n    \n    def solve():\n        count = 0\n        for i in range(n):\n            d = f(s[i][0], s[i][1])\n            if d!= 0:\n                count += 1\n        \n        if count >= 2:\n            return \"RGBRGBRG\"\n        else:\n            return \"GRBGRBG\"\n    \n    return solve()\n\nprint(solution(input()))"
    },
    {
        "number": 4396,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, u = stdin.split()\n    n = int(n)\n    u = float(u)\n    u = round(u, 8)\n    k = 0\n    r = 1\n    q = 1\n    q_ = q\n    while r!= 0:\n        r = u / k\n        k += 1\n    print(round(r, 8))\n    while u > 0:\n        u -= (q / k)\n        q += 1\n    return str(round(r, 8)) + \" \" + str(round(u, 8)) + \" \" + str(q)"
    },
    {
        "number": 4396,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    num_1, num_2, num_3, num_4 = map(float, stdin.split())\n    num_5 = num_1 * num_2 * num_3 * num_4\n    num_5 = round(num_5, -4)\n    num_6 = num_1 * num_2 * num_3\n    num_6 = round(num_6, -4)\n    num_7 = num_1 * num_2 * num_3\n    num_7 = round(num_7, -4)\n    num_8 = num_1 * num_2 * num_3\n    num_8 = round(num_8, -4)\n    num_9 = num_1 * num_2\n    num_9 = round(num_9, -4)\n    num_10 = num_1 * num_2\n    num_10 = round(num_10, -4)\n    num_11 = num_1 * num_2\n    num_11 = round(num_11, -4)\n    num_12 = num_1 * num_2\n    num_12 = round(num_12, -4)\n    num_13 = num_1 * num_2\n    num_13 = round(num_13, -4)\n    num_14 = num_1 * num_2\n    num_14 = round(num_14, -4)\n    num_15 = num_1 * num_2\n    num_15 = round(num_15, -4)\n    num_16 = num_1 * num_2\n    num_16 = round(num_16, -4)\n    num_17 = num_1 * num_2\n    num_17 = round(num_17, -4)\n    num_18 = num_1 * num_2\n    num_18 = round(num_18, -4)\n    num_19 = num_1 * num_2\n    num_19 = round(num_19, -4)\n    num_20 = num_1 * num_2\n    num_20 = round(num_20, -4)\n    num_21 = num_1 * num_2\n    num_21 = round(num_21, -4)\n    num_22 = num_1 * num_2\n    num_22 = round(num_22, -4)\n    num_23 = num_1 * num_2\n    num_23 = round(num_23, -4)\n    num_24 = num_1 * num_2\n    num_24 = round(num_24, -4)\n    num_25 = num_1 * num_2\n    num_25 = round(num_25, -4)\n    num_26 = num_1 * num_2\n    num_26 = round(num_26, -4)\n    num_27 = num_1 * num_2\n    num_27 = round(num_27, -4)\n    num_28 = num_1 * num_2\n    num_28 = round(num_28, -4)\n    num_29 = num_1 * num_2\n    num_29 = round(num_29, -4)\n    num_30 = num_1 * num_2\n    num_30 = round(num_30, -4)\n    num_31 = num_1 * num_2\n    num_31 = round(num_31, -4)\n    num_32 = num_1 * num_2\n    num_32 = round(num_32, -4)\n    num_33 = num_1 * num_2\n    num_33 = round(num_33, -4)\n    num_34 = num_1 * num_2\n    num_34 = round(num_34, -4)\n    num_35 = num_1 * num_2\n    num_35 = round(num_35, -4)\n    num_36 = num_1 * num_2\n    num_36 = round(num_36, -4)\n    num_37 = num_1 * num_2\n    num_37 = round(num_37, -4)\n    num_38 = num_1 * num_2\n    num_38 = round(num_38, -4)\n    num_39 = num_1 * num_2\n    num_39 = round(num_39, -4)\n    num_40 = num_1 * num_2\n    num_40 = round(num_40, -4)\n    num_41 = num_1 * num_2\n    num_41 = round(num_41, -4)\n    num_42 = num_1 * num_2\n    num_42 = round(num_42, -4)\n    num_43 = num_1 * num_2\n    num_43 = round(num_43, -4)\n    num_44 = num_1 * num_2\n    num_44 = round(num_44, -4)\n    num_45 = num_1 * num_2\n    num_45 = round(num_45, -4)\n    num_46 = num_1 * num_2\n    num_46 = round(num_46, -4)\n    num_47 = num_1 * num_2\n    num_47 = round(num_47, -4)\n    num_48 = num_1 * num_2\n    num_48 = round(num_48, -4)\n    num_49 = num_1 * num_2\n    num_49 = round(num_49, -4)\n    num_50 = num_1 * num_2\n    num_50 = round(num_50, -4)\n    num_51 = num_1 * num_2\n    num_51 = round(num_51, -4)\n    num_52 = num_1 * num_2\n    num_52 = round(num_52, -4)\n    num_53 = num_1 * num_2\n    num_53 = round(num_53, -4)\n    num_54 = num_1 * num_2\n    num_54 = round(num_54, -4)\n    num_55 = num_1 * num_2\n    num_55 = round(num_55, -4)\n    num_56 = num_1 * num_2\n    num_56 = round(num_56, -4)\n    num_57 = num_1 * num_2\n    num_57 = round(num_57, -4)\n    num_"
    },
    {
        "number": 4396,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, u1, u2 = map(int, stdin.split())\n    x1 = 0\n    x2 = 0\n    for u in u1:\n        x1 += 1\n        x2 += u * 1.0\n    for u in u2:\n        x2 += u * 1.0\n    return str(round(x2 - x1, 5)) + \".\"\n-----Explanation-----\nThe initial money is 10000 JPY, the initial number of gifts is 1.0 BTC, the number of gifts in the lottery is 1.0 BTC, so the gifts in total are 0.1 bitcoins. The difference between these values is less than 10^-5.\nFor example, if N = 2, u_1 = 10000 and u_2 = JPY, x_1 = 10000, x_2 = 100.0, the otoshidama from the first relative is 10000 Japanese yen. However, x_1 = 0.10000000, x_2 = 0.10000000, x_3 = 100.00000000, which will be converted to $38000.0 yen.\nFor example, if N = 4, u_1 = 10000 and u_2 = JPY, x_1 = 10000, x_2 = 0.10000000, x_3 = 100.00000000, x_4 = 100.00000000, which will be converted to $38000.0 yen.\nFor example, if N = 6, u_1 = 10000 and u_2 = JPY, x_1 = 10000, x_2 = 0.10000000, x_3 = 100.00000000, x_4 = 100.00000000, x_5 = 100.00000000, which will be converted to $38000.0 yen.\n\nThe otoshidama from the first relative is 10000 yen, while the otoshidama from the second relative is 0.1 bitcoins. Thus, the sum of these is 100.00000000.\nThe otoshidama from the first relative is 0.1 bitcoins, which is worth 38000.0 yen if converted at the rate of 380000.0 JPY per 1.0 BTC. The difference between these values is less than 10^-5.\n"
    },
    {
        "number": 4396,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    N, x_1, x_2 = map(int, lines[0].split(\" \"))\n    u_1 = lines[1].split(\" \")[0]\n    u_2 = lines[2].split(\" \")[0]\n    return solution_bruteforce(x_1, x_2, u_1, u_2)\n\ndef"
    },
    {
        "number": 4396,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n'''\n\nimport math\nfrom itertools import product"
    },
    {
        "number": 4396,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x_1, u_1, x_2, u_2, x_N = map(int, stdin.split())\n    N = x_1 + x_2\n    print(int(round(round((x_N - N) / N, -3)*38000)))\n    return str(round(round((x_N - N) / N, -3)*38000, -3))"
    },
    {
        "number": 4396,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    x1 = float(stdin.strip())\n    x2 = float(stdin.strip())\n    u = stdin.split()\n    x = x2-x1\n    if x*u[0]==x1:\n        return str(x) + \",\" + str(u[0])\n    else:\n        return str(x) + \",\" + str(u[1])\n"
    },
    {
        "number": 4396,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    total = 0\n    for s in stdin.split(\"\\n\"):\n        x1, x2 = s.split()\n        if int(x2) >= int(x1):\n            if int(x2) >= int(x1) * 38000.0:\n                total += int(x2)\n    return str(total)\n\"\"\"\n\ndef"
    },
    {
        "number": 4396,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4396,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, u, x = map(int, stdin.split())\n    if u == 0:\n        u = 1\n    if x == 0:\n        x = 1\n    if (u*x)!= x:\n        return \"0.10000000\"\n    # if u == 0:\n    #     u = 1\n    if u == 1:\n        return str(u*x)\n    else:\n        return str(x*u)\n\ndef"
    },
    {
        "number": 4397,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n  lst = [int(i) for i in stdin.split()]\n  dic = {i: j for i, j in enumerate(lst)}\n  #print(dic)\n  if lst[0] == 1:\n    return 'The i-th car from the front of the train is the j-th car from the back.'\n  if lst[0] == 2:\n    return 'The i-th car from the front of the train is the j-th car from the back.'\n  print('The i-th car from the front of the train is the j-th car from the back.')"
    },
    {
        "number": 4397,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    cars = list(map(int, stdin.split()))\n    answer = ''\n    def find(i):\n        for j in range(n):\n            if j >= i and cars[i] - cars[j]!= k:\n                find(j)\n    find(0)\n    print(answer)\n"
    },
    {
        "number": 4397,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, i = map(int, stdin.split())\n    l = list(map(int, stdin.split()))\n    l.sort()\n    for i in range(1, n + 1):\n        if i == l[i - 1]:\n            return \"yes\"\n    return \"no\""
    },
    {
        "number": 4397,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, i = map(int, stdin.split(' '))\n    lst = list(map(int, stdin.split(' ')))\n    \n    for i in range(1, N):\n        if lst[i-1] == lst[i]:\n            pass\n        else:\n            return str(lst[i])\n    \n    return str(lst[N-1])\n    \n"
    },
    {
        "number": 4397,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\""
    },
    {
        "number": 4397,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    print(solution_recur(stdin,1,3))\n\ndef"
    },
    {
        "number": 4397,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if k <= n:\n        return 'The only possible choice is the last car from the front.'\n    i = n - 1\n    for j in range(k, n):\n        if j - 1 >= 0:\n            if j - 1 >= i:\n                return 'The only possible choice is the last car from the front.'\n            i = j - 1\n    return 'The only possible choice is the last car from the front.'\n"
    },
    {
        "number": 4397,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    front = [list(map(int, input().split())) for _ in range(N)]\n    back = [list(map(int, input().split())) for _ in range(N)]\n    print(*solution_f(front, back))\n    return \"\"\n\ndef"
    },
    {
        "number": 4397,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\nprint(solution(input()))\n"
    },
    {
        "number": 4397,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    answer = []\n    for i in range(N):\n        string = stdin.strip()\n        start = int(string[0])\n        end = int(string[len(string) - 1])\n        for j in range(start, end):\n            answer.append(j)\n    print(' '.join(answer))\n    return''.join(answer)\n"
    },
    {
        "number": 4398,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = list(stdin)\n    t = list(stdin)\n    t = [''.join(sorted(l)) for l in t]\n    t = [''.join(sorted(l)) for l in t]\n    return ''.join(t)\n"
    },
    {
        "number": 4398,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = [x.lower() for x in stdin.split()]\n    t = [x.lower() for x in stdin.split()]\n    s = \"\".join(s)\n    t = \"\".join(t)\n    l = len(s)\n    r = len(t)\n    # if r > l:\n    #     print(\"No\")\n    # elif r < l:\n    #     print(\"No\")\n    # else:\n    #     print(s + t)\n    # return(s + t)\n    answer = \"\"\n    s = list(s)\n    t = list(t)\n    for i in range(l):\n        if s[i] == t[i]:\n            answer += s[i]\n        else:\n            answer += t[i]\n    return answer"
    },
    {
        "number": 4398,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    def min_operations(i,j):\n        if i<j:\n            return i\n        if i==j:\n            return j\n        return min(i,j)\n\n    def solution1(s, t):\n        i, j = 0, len(s) - 1\n        while i<=j:\n            temp = min_operations(i,j)\n            if s[i]!=t[j]:\n                if s[i]==t[j]:\n                    i+=1\n                else:\n                    j-=1\n            else:\n                if s[i]!=t[j]:\n                    j-=1\n                else:\n                    i+=1\n        return s[i:j+1]\n\n    return solution1(stdin, stdin)"
    },
    {
        "number": 4398,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(str, stdin.split())\n    if a == b:\n        return a\n    else:\n        return b[::-1]\n"
    },
    {
        "number": 4398,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, s, t = map(int, stdin.split())\n    print(n-s-t)\n    print(s*t)\n    \n"
    },
    {
        "number": 4398,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def solve(s, t):\n        if len(s)!= len(t):\n            return\n        ans = \"\"\n        for i in range(len(s)):\n            if s[i] == t[i]:\n                ans = s[i]\n                break\n            else:\n                ans += s[i]\n        return ans\n    \n    for i in range(len(stdin)):\n        s, t = stdin[i].split()\n        s = s.lower()\n        t = t.lower()\n        print(solve(s, t))\n\n    \n"
    },
    {
        "number": 4398,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join(sorted(list(stdin)))\n"
    },
    {
        "number": 4398,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    S = list(stdin.strip())\n    T = list(stdin.strip())\n    for i in range(N):\n        T[i] = S[i]\n    T = T[::-1]\n    for i in range(N):\n        S[i] = T[i]\n    print(\"\".join(S))\n    return \"\".join(S)"
    },
    {
        "number": 4398,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin.split()\n    for i in range(len(string)):\n        string[i] = string[i].lower()\n    return ''.join(string)\n\ndef"
    },
    {
        "number": 4398,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    S = list(stdin.strip().split())\n    T = list(stdin.strip().split())\n    \n    def recur(S: list, T: list) -> str:\n        if len(S)!= len(T):\n            return \"\"\n        \n        if len(S) == len(T):\n            return ''.join(S) + T[0]\n        \n        if len(S) == 1:\n            return recur(S[:], T)\n        else:\n            return recur(S[1:], T[1:]) + S[0] + recur(S[2:], T[1:])\n        \n    print(recur(S, T))\n    \n    return ''"
    },
    {
        "number": 4399,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return \"Yes\" if len(set([str(i) for i in range(1, n+1) if len(list(set([str(i) for i in range(1, n+1) if i!= j]))) >= 3])) else \"No\"\n\nprint(solution(input()))"
    },
    {
        "number": 4399,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    X, Y = [int(i) for i in stdin.split(\" \")]\n    if (X - 1) in range(1, Y+2) and (Y - 1) in range(X+2, Y+2) and (X + Y) in range(1, Y+2):\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4399,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4399,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    li = list(map(int, stdin.split()))\n    li.sort(reverse=True)\n    \n    if len(li) >= 3:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4399,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    res = []\n    for i in range(0,len(stdin)):\n        if stdin[i] == 'A' and i>0 and stdin[i] == 'B':\n            i += 1\n            j = i\n            while j < len(stdin) and stdin[j] == 'B':\n                j += 1\n            res.append(str(j - i))\n        if stdin[i] == 'A' and i == 0 and stdin[i] == 'B':\n            i += 1\n            j = i\n            while j < len(stdin) and stdin[j] == 'B':\n                j += 1\n            res.append(str(j - i))\n    return''.join(res)"
    },
    {
        "number": 4399,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a == b:\n        return \"Yes\"\n    if a < b:\n        a, b = b, a\n    num_a = num_b = 1\n    num_num = b - a\n    for num in range(num_a + 1, num_b):\n        if a + num in stdin:\n            num_num -= num\n        if b + num in stdin:\n            num_num += num\n        if num_num == 0:\n            return \"Yes\"\n    return \"No\"\n\nA = [1, 2, 3]\nB = [1, 3]\nprint(solution(A))\nprint(solution(B))\n"
    },
    {
        "number": 4399,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def check_station(string: str) -> bool:\n        return string[0] == string[1] == string[2]\n\n    def check_city(string: str) -> bool:\n        if string[0] == string[1] == string[2]:\n            return True\n        return False\n\n    def check_pair(string: str) -> bool:\n        if check_station(string) and check_city(string):\n            return True\n        return False\n\n    bus_service_string = stdin.split()\n    for bus_service in bus_service_string:\n        if check_pair(bus_service):\n            return 'Yes'\n    return 'No'\n\nTime Complexity: O(n)\nSpace Complexity: O(n)\n\"\"\"\n\nclass Solution:\n    def canBePair(self, S: str) -> bool:\n        # DFS\n        # search for unique characters in string\n        # check if character is a unique character\n        # check if pair of stations are connected\n        # return true if they are connected\n        # O(n^2)\n        def dfs(string, station):\n            if len(string)!= 3 or station < 1 or station >= len(S):\n                return False\n            elif string[0]!= string[1] == string[2]:\n                return False\n            elif string[0] == string[1] == string[2]:\n                return True\n            else:\n                return dfs(string[1:], station - 1) or dfs(string[1:], station - 1) or dfs(string[1:], station)\n        return dfs(S, len(S) - 2)\n"
    },
    {
        "number": 4399,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # O(n*2)\n    # n = len(stdin)\n    n = len(stdin)\n    a = [0] * n\n    b = [0] * n\n    for i in range(n):\n        a[i] = stdin[i]\n        b[i] = stdin[i]\n        if stdin[i] == 'A':\n            a[i] = 2\n        if stdin[i] == 'B':\n            b[i] = 1\n    for i in range(n):\n        if stdin[i] == 'A':\n            b[i] = 2\n        if stdin[i] == 'B':\n            a[i] = 1\n    \n    def get_connected_stations(a, b):\n        queue = []\n        for i in range(len(a)):\n            if a[i] == b[i]:\n                queue.append(i)\n        return queue\n\n    connected_stations = get_connected_stations(a, b)\n    \n    connected_stations = sorted(connected_stations, key=lambda x:x)\n    for i in range(len(connected_stations)):\n        print(str(i+1) + \" \" + connected_stations[i])\n    \n    if len(connected_stations) > 1:\n        return \"Yes\"\n    else:\n        return \"No\"\n\n'''\n---DP ---\n\ndp[i][j] = min(dp[i-1][j], dp[i-1][j-1], dp[i-1][j-2]) + 1\n        \n\n2 3 6 5 2 \n\n'''\n\ndef"
    },
    {
        "number": 4399,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4399,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = [stdin[i:i+3] for i in range(0, n, 3)]\n    print(arr)\n    return \"Yes\" if arr[0] == arr[1] and arr[2] == arr[1] else \"No\"\n\n    pass\n"
    },
    {
        "number": 4400,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    L = list(stdin.strip().split())\n    rain = 0\n    days = 0\n    for i in range(len(L)):\n        if L[i] == 'S':\n            days += 1\n        elif L[i] == 'R':\n            rain += days\n            days = 0\n    return str(rain)\n\ndef"
    },
    {
        "number": 4400,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n  \n  n = len(stdin)\n  \n  rain_days = 0\n  \n  for i in range(n):\n    \n    day = stdin[i]\n    \n    if day == 'R':\n      rain_days += 1\n    else:\n      \n      if rain_days == 0:\n        rain_days = 1\n      else:\n        rain_days -= 1\n        \n  return str(rain_days)\n"
    },
    {
        "number": 4400,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    answer = 0\n    stdin = stdin.split(\" \")\n    for i in range(len(stdin)):\n        day = int(stdin[i][0])\n        rain = int(stdin[i][2])\n        if (day - 1) % 3 == 0:\n            if rain == 1:\n                answer += 2\n            else:\n                answer += 1\n    return str(answer)\n    \n"
    },
    {
        "number": 4400,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    map = [list(stdin[i:i+3]) for i in range(0, len(stdin), 3)]\n    print(sum([map[i][0] == 'R' for i in range(len(map))]))\n    return str(sum([map[i][0] == 'R' for i in range(len(map))]))\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4400,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return str(max(list(map(lambda x: max(list(map(lambda x: (x=='R' and 1 or x=='S'), stdin[x:x+3]))), range(1, len(stdin)-2))))\n"
    },
    {
        "number": 4400,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    max_rain = 0\n    day = 0\n    for i, char in enumerate(stdin):\n        if char == 'S':\n            day = i\n            max_rain = max(max_rain, i - day + 1)\n        elif char == 'R':\n            day = i\n            max_rain = max(max_rain, i - day + 2)\n    return str(max_rain)"
    },
    {
        "number": 4400,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    return str(max(map(lambda x: int(x) - 2, input())))\n"
    },
    {
        "number": 4400,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    temp=[]\n    for line in stdin:\n        if line == 'R':\n            print(len(temp),len(temp[0]))\n            return len(temp)\n        else:\n            if line == 'S':\n                if len(temp)>0:\n                    temp.pop()\n            else:\n                if line == 'R':\n                    if len(temp)>0:\n                        temp.pop()\n                    else:\n                        temp.append(line)\n    return max(len(temp),len(temp[0]))\n\n'''\ndef"
    },
    {
        "number": 4400,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(str, stdin.split())\n    if len(a) > 3:\n        return str(int(max(max(a), int(b)) - len(a)) + 1)\n    else:\n        return str(int(max(max(a), int(b)) - len(a)))\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4400,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def rec(lst: List[str]) -> List[int]:\n        lst = sorted(lst)\n        res = 1\n        for i in range(1, len(lst)):\n            if lst[i - 1]!= lst[i]:\n                res += 1\n        return res\n\n    N = int(stdin)\n    days = []\n    for _ in range(N):\n        days.append(stdin.rstrip())\n    return str(rec(days))\n"
    },
    {
        "number": 4401,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    return str(a)+str(b)+str(c)\n"
    },
    {
        "number": 4401,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x,y,z = map(int,stdin.split())\n    answer = ''\n    for i in range(x,x+y+z):\n        answer+=str(i)\n    print(answer)\n    return answer"
    },
    {
        "number": 4401,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    X, Y, Z = map(int, stdin.split())\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n    C = list(map(int, input().split()))\n    C.reverse()\n    for i in range(len(A)):\n        if A[i] > B[i] and A[i] > C[i]:\n            C[i], A[i] = A[i], C[i]\n        elif A[i] > B[i] and A[i] < C[i]:\n            A[i], B[i] = B[i], A[i]\n        else:\n            A[i], C[i] = C[i], A[i]\n    print(*C)\n    print(*A)\n    return \"\"\n\n-----Sample Input-----\n1 2 3\n\n-----Sample Output-----\n3 1 2\n\n1 2 3\n2 3 1\n1 3 2\n\n1 2 3\n2 3 1\n3 2 1\n2 3 2\n3 1 2\n\n2 3 1\n3 2 2\n3 1 1\n2 2 3\n1 2 1\n2 1 1\n3 2 3\n1 3 3\n\n2 2 3\n2 3 1\n3 2 1\n2 3 2\n3 1 2\n2 3 2\n3 1 2\n2 3 1\n3 2 1\n3 2 2\n\n3 2 1\n2 3 2\n2 1 1\n3 2 2\n2 3 1\n3 2 3\n3 1 1\n2 1 1\n3 2 3\n\n3 2 1\n3 2 2\n3 2 1\n3 2 2\n2 3 2\n2 3 1\n3 2 3\n3 1 1\n3 2 2\n3 1 2\n3 2 1\n\n3 3 3\n2 2 3\n2 3 2\n2 1 1\n3 2 3\n2 1 2\n3 2 3\n3 1 1\n2 1 1\n\n3 2 1\n3 2 2\n3 2 1\n2 3 2\n2 1 1\n2 3 2\n3 1 2\n3 2 2\n3 1 1\n3 2 3\n\n3 1 1\n3 2 2\n3 2 3\n2 3 1\n3 2 2\n3 2 3\n2 1 1\n3 2 3\n2 1 2\n3 2 1\n3 2 2\n\n3 1 2\n3 2 1\n2 3 3\n2 1 1\n3 2 3\n2 2 1\n3 2 2\n3 2 2\n\n3 2 1\n3 2 2\n3 2 3\n2 3 1\n3 2 3\n2 1 1\n3 2 2\n2 1 2\n\n3 2 1\n2 3 2\n2 3 1\n2 2 1\n3 2 2\n3 2 2\n\n3 2 1\n2 3 2\n2 3 1\n2 1 1\n3 2 3\n\n3 1 2\n2 3 3\n2 2 1\n3 2 2\n2 1 1\n3 2 2\n2 1 2\n\n3 2 1\n2 3 2\n3 2 3\n2 1 1\n3 2 2\n3 2 2\n2 1 2\n3 2 3\n\n3 3 3\n2 2 3\n2 3 2\n3 2 1\n3 2 3\n3 1 1\n2 1 1\n3 2 3\n\n3 1 1\n2 3 2\n2 3 1\n2 1 1\n3 2 3\n3 1 1\n3 2 2\n3 2 2\n3 2 3\n\n2 1 1\n2 3 3\n3 2 1\n3 2 2\n3 2 2\n\n3 2 1\n3 2 3\n2 3 1\n2 1 1\n3 2 2\n3 2 2\n\n3 3 3\n2 2 3\n2 3 2\n3 2 1\n2 1 1\n3 2 2\n3 2 2\n2 1 2\n\n3 2 1\n2 3 2\n3 2 3\n3 1 1\n2 1 1\n3 2 2\n3 2 2\n\n3 1 1\n2 3 2\n3 2 3\n2 1 1\n3 2 2\n3 2 2\n2 1 2\n3 2 3\n\n3 2 1\n3 2 2\n3 2 3\n2 1 1\n3 2 2\n3 2 2\n3 2 3\n2 1 1\n3 2 3\n\n3 3 3\n2 2 3\n3 2 1\n2 1 1\n3 2 3\n2 1 1\n3 2 2\n3 2 2\n\n3 2 1\n2 3 2\n3 2 3\n3 1 1\n2 1 1\n3 2 2\n3 2 2\n\n3 2 1\n2 3 2\n3 2 3\n2 1 1\n3 2 3\n\n3 3 3\n2 2 3\n3 2 1\n2 1 1\n3 2 2\n3 2 2\n2 1 2\n3 2 3\n\n3 2 1\n3 2 2\n3 2 3\n2 1 1\n3 2 2\n3 2 2\n3 2 3\n2 1 1\n3 2 3\n\n3 2 1\n3 2 2\n3 2 3\n2 1 1\n3 2 2\n3 2 2\n\n3 1 1\n3 2 2\n3 2 3\n3 1 1\n2 1 1\n3 2 2\n3 2 2\n\n3 3 3\n2 2 3\n2 3 1\n3 2 2\n3 2 3\n2 1 1\n3 2 2\n\n3 2 1\n3 2 2\n3 2 3\n2 1 1\n3 2 3\n2 1 2\n3 2 2\n\n3 2 1\n3 2 2\n3 2 3\n2 1 1\n3 2 3\n\n3 1 1\n2 3 2\n3 2 3\n2 1 1\n3 2 2\n3 2 2\n2 1 2\n\n3 2 1\n3 2 2\n3 2 3\n2 1 1\n3 2 2\n3 2 2\n2 1 2\n3 2 3\n\n3 3 3\n2 2 3\n3 2 1\n2 1 1\n3 2 2\n3 2 2\n2 1 2\n3 2 3\n\n3 2 1\n3 2 2\n3 2 3\n3 1 1\n2 1 1\n3 2 2\n3 2 2\n\n3 2 1\n3 2 2\n3 2 3\n3 1 1\n2 1 1\n3 2 2\n\n3 2 1\n2 3 2\n3 2 3\n2 1 1\n3 2 2\n3 2 2\n2 1 2\n3 2 3\n\n3 3 3\n2 2 3\n3 2 1\n2 1 1\n3 2 2\n3 2 2\n2 1 2\n3 2 3\n\n3 2 1\n3 2 2\n3 2 3\n2 1 1\n3 2 2\n3 2 2\n2 1 2\n3 2 3\n\n3 3 3\n2 2 3\n3 2 1\n3 2 2\n3 2 2\n2 1 2\n3 2 3\n\n3 2 1\n3 2 2\n3 2 3\n2 1 1\n3 2 2\n3 2 2\n2 1 2\n3 2 3\n\n3 3 3\n2 2 3\n3 2 1\n3 2 2\n3 2 2\n2 1 2\n3 2 3\n\n3 2 1\n3 2 2\n3 2 3\n2 1 1\n3 2 2\n3 2 2\n3 2 3\n\n3 1 1\n3 2 2\n3 2 3\n2 1 1\n3 2 2\n3 2 2\n3 2 3\n2 1 2\n3 2 3\n\n3 3 3\n2 2 3\n3 2 1\n2 1 1\n3 2 2\n3 2 2\n3 2 3\n2 1 1\n3 2 2\n\n3 2 1\n3 2 2\n3 2 3\n2 1 1\n3 2 2\n3 2 2\n2 1 2\n3 2 3\n\n3 2 1\n3 2 2\n3 2 3\n2 1 1\n3 2 2\n3 2 2\n3 2 3\n2 1 1\n3 2 2\n\n3 3 3\n2 2 3\n3 2 1\n3 2 2\n3 2 2\n3 2 3\n2 1 1\n3 2 2\n3"
    },
    {
        "number": 4401,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    X, Y, Z = stdin.split(' ')\n    X = int(X)\n    Y = int(Y)\n    Z = int(Z)\n\n    if (X < Y and X < Z) or (Y < X and Y < Z) or (Z < X and Z < Y):\n        return \" \".join(map(str, [X, Y, Z]))\n\n    if (X > Y and X > Z) or (Y > X and Y > Z) or (Z > X and Z > Y):\n        return \" \".join(map(str, [Y, Z, X]))\n    else:\n        return \" \".join(map(str, [Z, X, Y]))\n"
    },
    {
        "number": 4401,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    X, Y, Z = map(int, stdin.split())\n    \n    A, B, C = [], [], []\n    \n    for i in range(X):\n        A.append(i)\n        A.append(i)\n    \n    for i in range(Y):\n        B.append(i)\n        B.append(i)\n    \n    for i in range(Z):\n        C.append(i)\n        C.append(i)\n        \n    for i in range(len(A)):\n        for j in range(len(B)):\n            for k in range(len(C)):\n                if A[i] == B[j] and A[i] == C[k] and B[j] == C[k]:\n                    C[k] = A[i]\n                    A[i] = B[j]\n                    B[j] = C[k]\n        \n    print(*C)\n    \n    return \"\"\n\n----------------------------------------------------------------------------------------------------------\n\ndef"
    },
    {
        "number": 4401,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Problem: What if you can't make a wall with 3 steps, and you only start from step 1?\n    \n    When moving the box B to the left, the box will stay there forever.\n    When moving the box A to the right, the box will become empty.\n    While moving the box C, A will become empty,\n    then A will stay empty until the step after moving B.\n    What if you can't make a wall of 3 steps, and you start from step 0?\n    \n    \"\"\"\n    return \" \".join(map(str, map(int, stdin.split())))\n    \n"
    },
    {
        "number": 4401,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    X, Y, Z = map(int, stdin.split())\n    A = []\n    B = []\n    C = []\n    for i in range(X):\n        A.append(i)\n    for i in range(Y):\n        B.append(i)\n    for i in range(Z):\n        C.append(i)\n    A.sort()\n    B.sort()\n    C.sort()\n    A, B, C = A[::-1], B[::-1], C[::-1]\n    print(*A, *B, *C)\n\n'''\n"
    },
    {
        "number": 4401,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    X, Y, Z = map(int, stdin.split())\n    A, B, C = map(str, stdin.split())\n    for a in A:\n        a = int(a)\n        for b in B:\n            b = int(b)\n            for c in C:\n                c = int(c)\n                if a < b:\n                    c = c - b\n                    if a <= c <= b:\n                        print(a, b, c)\n    return ''\n\n'''\n\n\ndef"
    },
    {
        "number": 4401,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    X, Y, Z = map(int, stdin.split(\" \"))\n    print(*[X, Y, Z])"
    },
    {
        "number": 4401,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    X, Y, Z = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    B = list(map(int, stdin.split()))\n    C = list(map(int, stdin.split()))\n    A.sort()\n    B.sort()\n    C.sort()\n    # print(A)\n    # print(B)\n    # print(C)\n    result = \"\"\n    # A,B,C = [], [], []\n    # for i in range(len(A)):\n    #     A.append(A[i])\n    #     B.append(B[i])\n    #     C.append(C[i])\n    # print(A,B,C)\n    for i in range(len(A)):\n        # if A[i]>C[i] or B[i]>C[i]:\n        if A[i]>C[i] or B[i]>C[i]:\n            result += str(A[i]) + \" \" + str(B[i]) + \" \"\n            result += str(C[i])\n            continue\n        if A[i]>=C[i]:\n            result += str(A[i]) + \" \" + str(B[i]) + \" \"\n            result += str(C[i])\n            continue\n        if B[i]>=C[i]:\n            result += str(A[i]) + \" \" + str(B[i]) + \" \"\n            result += str(C[i])\n            continue\n        if B[i]>=C[i]:\n            result += str(A[i]) + \" \" + str(B[i]) + \" \"\n            result += str(C[i])\n            continue\n        # if A[i]>C[i] or B[i]>C[i]:\n        #     result += str(A[i]) + \" \" + str(B[i]) + \" \"\n        #     result += str(C[i])\n        #     continue\n        # if A[i]>=C[i]:\n        #     result += str(A[i]) + \" \" + str(B[i]) + \" \"\n        #     result += str(C[i])\n        #     continue\n        # if B[i]>=C[i]:\n        #     result += str(A[i]) + \" \" + str(B[i]) + \" \"\n        #     result += str(C[i])\n        #     continue\n        # if B[i]>=C[i]:\n        #     result += str(A[i]) + \" \" + str(B[i]) + \" \"\n        #     result += str(C[i])\n        #     continue\n        if B[i]<=A[i]:\n            result += str(A[i]) + \" \" + str(B[i]) + \" \"\n            continue\n        if B[i]>=C[i]:\n            result += str(A[i]) + \" \" + str(B[i]) + \" \"\n            continue\n        if B[i]>=C[i]:\n            result += str(A[i]) + \" \" + str(B[i]) + \" \"\n            continue\n        if B[i]<=C[i]:\n            result += str(A[i]) + \" \" + str(B[i]) + \" \"\n        # print(result)\n    return result\n\n1 2 3\n'''\n1 2\n2 3\n\n1 4\n2 4\n3 4\n\n1 2 3\n2 1\n3 1\n\n1 4\n2 4\n3 4\n\n1 4\n2 4\n3 4\n\n1 4\n2 4\n3 4\n\n1 4\n2 4\n3 4\n\n1 4\n2 4\n3 4\n\n1 4\n2 4\n3 4\n\n1 4\n2 4\n3 4\n\n1 4\n2 4\n3 4\n\n1 4\n2 4\n3 4\n\n1 4\n2 4\n3 4\n\n1 4\n2 4\n3 4\n\n1 4\n2 4\n3 4\n\n1 4\n2 4\n3 4\n\n1 4\n2 4\n3 4\n\n1 4\n2 4\n3 4\n\n1 4\n2 4\n3 4\n\n1 4\n2 4\n3 4\n\n1 4\n2 4\n3 4\n\n1 4\n2 4\n3 4\n\n1 4\n2 4\n3 4\n\n1 4\n2 4\n3 4\n\n1 4\n2 4\n3 4\n\n1 4\n2 4\n3 4\n\n1 4\n2 4\n3 4\n\n1 4\n2 4\n3 4\n\n1 4\n2 4\n3 4\n\n1 4\n2 4\n3 4\n\n1 4\n2 4\n3 4\n\n1 4\n2 4\n3 4\n\n1 4\n2 4\n3 4\n\n1 4\n2 4\n3 4\n\n1 4\n2 4\n3 4\n\n1 4\n2 4\n3 4\n\n1 4\n2 4\n3 4\n\n1 4\n2 4\n3 4\n\n1 4\n2 4\n3 4\n\n1 4\n2 4\n3 4\n\n1 4\n2 4\n3 4\n\n1 4\n2 4\n3 4\n\n1 4\n2 4\n3 4\n\n1 4\n2 4\n3 4\n\n1 4\n2 4\n3 4\n\n1 4\n2 4\n3 4\n\n1 4\n2 4\n3 4\n\n1 4\n2 4\n3 4\n\n1 4\n2 4\n3 4\n\n1 4\n2 4\n3 4\n\n1 4\n2 4\n3 4\n\n1 4\n2 4\n3 4\n\n1 4\n2 4\n3 4\n\n1 4\n2 4\n3 4\n\n1 4\n2 4\n3 4\n\n1 4\n2 4\n3 4\n\n1 4\n2 4\n3 4\n\n1 4\n2 4\n3 4\n\n1 4\n2 4\n3 4\n\n1 4\n2 4\n3 4\n\n1 4\n2 4\n3 4\n\n1 4\n2 4\n3 4\n\n1 4\n2 4\n3 4\n\n1 4\n2 4\n3 4\n\n1 4\n2 4\n3 4\n\n1 4\n2 4\n3 4\n\n1 4\n2 4\n3 4\n\n1 4\n2 4\n3 4\n\n1 4\n2 4\n3 4\n\n1 4\n2 4\n3 4\n\n1 4\n2 4\n3 4\n\n1 4\n2 4\n3 4\n\n1 4\n2 4\n3 4\n\n1 4\n2 4\n3 4\n\n1 4\n2 4\n3 4\n\n1 4\n2 4\n3 4\n\n1 4\n2 4\n3 4\n\n1 4\n2 4\n3 4\n\n1 4\n2 4\n3 4\n\n1 4\n2 4\n3 4\n\n1 4\n2 4\n3 4\n\n1 4\n2 4\n3 4\n\n1 4\n2 4\n3 4\n\n1 4\n2 4\n3 4\n\n1 4\n2 4\n3 4\n\n1 4\n2 4\n3 4\n\n1 4\n2 4\n3 4\n\n1 4\n2 4\n3 4\n\n1 4\n2 4\n3 4\n\n1 4\n2 4\n3 4\n\n1 4\n2 4\n3 4\n\n1 4\n2 4\n3 4\n\n1 4\n2 4\n3 4\n\n1 4\n2 4\n3 4\n\n1 4\n2 4\n3 4\n\n1 4\n2 4\n3 4\n\n1 4\n"
    },
    {
        "number": 4402,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n == 0:\n        return '0'\n    n = n // 2\n    result = ''\n    if n <= 2:\n        result = str(2**n)\n    else:\n        for i in range(n, 0, -2):\n            result = str(2**i) + result\n    return result\n\nn = int(input())\nprint(solution(str(n)))\n"
    },
    {
        "number": 4402,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    b = int(s[0])\n    a = int(s[1])\n    a -= b\n    c = a * 2 - b\n    if c % 2 == 0:\n        return str(c // 2)\n    elif c % 2 == 1:\n        return str(c // 2 + 1)\n    elif c % 2 == 1:\n        return str(c // 2) + '+' + str(c // 2 + 1)\n\n\ndef"
    },
    {
        "number": 4402,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.split()\n    A = int(data[0])\n    B = int(data[1])\n    print(B)\n    print(A)\n    if A>B:\n        return \"B\"\n    if A<=B:\n        return \"A\""
    },
    {
        "number": 4402,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B = list(map(int, stdin.split()))\n    print(A, B)\n    if A % 2 == 0 and A < B:\n        return 'B'\n    if A % 2!= 0 and A > B:\n        return 'A'\n    print(A, B)\n"
    },
    {
        "number": 4402,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A > B:\n        A, B = B, A\n    num = A % 3\n    if num % 2 == 0:\n        num = num // 2\n    else:\n        num += 1\n    num += B\n    return str(num)\n\n\ndef"
    },
    {
        "number": 4402,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A % 2 == 0 and B % 2 == 0:\n        print(0)\n        return\n    if A % 2 == 1:\n        print(0)\n        return\n    if B % 2 == 1:\n        print(0)\n        return\n    if A % 2 == 0:\n        print(A//2)\n        return\n    if B % 2 == 0:\n        print(B//2)\n        return\n    print(A//2 + B//2)\n    return\n\n\nprint(solution(\"0 0 0\"))\n"
    },
    {
        "number": 4402,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A >= B:\n        return str(B-A)\n    else:\n        return \"0\"\n"
    },
    {
        "number": 4402,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    c_ferris = 0\n    if A + B == 100:\n        c_ferris = 100\n    elif A + B == 300:\n        c_ferris = 100\n    else:\n        c_ferris = (A + B) * 100\n    return str(c_ferris)\n\ndef"
    },
    {
        "number": 4402,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    a -= 2\n    b -= 1\n    if a % 2 == 0:\n        a = a / 2\n    if b % 2 == 0:\n        b = b / 2\n    if b % 2 == 1:\n        b = b / 2\n    if a < b:\n        return str(int(a/b))\n    else:\n        return str(int(b/a))\n\"\"\"\ndef"
    },
    {
        "number": 4402,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.split()[0])\n    b = int(stdin.split()[1])\n    if b > 12:\n        return \"B\"\n    if a > 12:\n        return \"A\"\n    if a % 2 == 1:\n        return \"B\"\n    return \"A\"\n"
    },
    {
        "number": 4403,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin.strip()) - 4)\n\n-----Sample Output-----\n2\n\n- Instead, if he ate +, he becomes 1.\n- If he ate -, he becomes 0.\n- If he ate +, he becomes 1.\n- If he ate -, he becomes 0.\n\n- The fourth integer to eat is +. After eating it, the integer in his mind becomes 2.\n\n'''\n\ndef"
    },
    {
        "number": 4403,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    return str(a * b * c)"
    },
    {
        "number": 4403,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = 0\n    while len(stdin) > 0:\n        tmp = stdin.pop(0)\n        if tmp == \"-\":\n            n = -n\n        elif tmp == \"+\":\n            n = n + 1\n        elif tmp == \" \":\n            n = n - 1\n        else:\n            print(n)\n            break\n\n    return str(n)\n"
    },
    {
        "number": 4403,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    num_list = list(map(int, stdin))\n    num_list = num_list[::-1]\n    print(num_list)\n    \n    for i in range(n):\n        if num_list[i] == -1:\n            num_list[i] = 0\n        elif num_list[i] == 1:\n            num_list[i] = 0\n        elif num_list[i] == 2:\n            num_list[i] = 0\n        else:\n            num_list[i] = num_list[i] + 1\n    print(num_list)\n\n    answer = 0\n    for i in range(n):\n        answer += num_list[i]\n    print(answer)\n    return answer"
    },
    {
        "number": 4403,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = list(stdin)\n    for i in range(len(s)):\n        s[i] = int(s[i])\n    return ''.join(str(x) for x in s)\n'''\ndef"
    },
    {
        "number": 4403,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin\n    result = 0\n    for i in range(len(S)):\n        if S[i] == \"-\":\n            result += 1\n        elif S[i] == \"+\":\n            result -= 1\n        else:\n            continue\n    return str(result)\n"
    },
    {
        "number": 4403,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = []\n    i = 0\n    # Get first character from string\n    s.append(stdin[i])\n    # Loop through letters until next\n    # character in string\n    for i in range(len(stdin)):\n        # Try to find next character\n        # as we need to add + or -\n        # characters to next\n        # character\n        if i < len(stdin) - 1:\n            try:\n                if stdin[i + 1] == \"+\":\n                    s.append(s[i] + s[i + 1])\n                else:\n                    s.append(s[i] - s[i + 1])\n            except IndexError:\n                pass\n    return str(int(''.join(s)))\n\nT = int(input())\nfor _ in range(T):\n    print(solution(input()))\n"
    },
    {
        "number": 4403,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    nums = list(map(int, stdin.strip().split()))\n    maxx = 0\n    for num in nums:\n        if num == +:\n            maxx += 1\n        else:\n            maxx -= 1\n    answer = str(maxx)\n    return answer\n-----Sample Output-----\n2\n - Initially, the integer in Takahashi's mind is 0.\n - The first integer for him to eat is +. After eating it, the integer in his mind becomes 1.\n - The second integer to eat is -. After eating it, the integer in his mind becomes 0.\n - The third integer to eat is +. After eating it, the integer in his mind becomes 1.\n - The fourth integer to eat is +. After eating it, the integer in his mind becomes 2.\nThus, the integer in Takahashi's mind after he eats all the symbols is 2.\n"
    },
    {
        "number": 4403,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    res = 0\n    S = stdin.split()\n    for i in range(len(S)):\n        if S[i].isdigit():\n            res += int(S[i])\n    print(res)\n\n-----Sample Input-----\n+-++\n\n+-++\n\n+-++\n\n+-++\n\nSample Output\n2\n\n - Initially, the integer in Takahashi's mind is 0.\n - The first integer for him to eat is +. After eating it, the integer in his mind becomes 1.\n - The second integer to eat is -. After eating it, the integer in his mind becomes 0.\n - The third integer to eat is +. After eating it, the integer in his mind becomes 1.\n - The fourth integer to eat is +. After eating it, the integer in his mind becomes 2.\nThus, the integer in Takahashi's mind after he eats all the symbols is 2.\n\n\"\"\"\n\nclass Solution:\n    def __init__(self):\n        self.res = 0\n\n    def solution(self, s):\n        if s[0]!= \"+\" and s[0]!= \"-\":\n            return 0\n        stack = []\n        for i in range(len(s)):\n            if s[i] == \"+\" or s[i] == \"-\":\n                stack.append(s[i])\n            else:\n                if len(stack) > 0:\n                    a = stack[-1]\n                    b = stack[-2]\n                    c = stack[-3]\n                    if i == len(s) - 1 or s[i + 1]!= \"+\" or a!= b or c!= s[i + 1]:\n                        self.res = int(a) + int(b) + int(c)\n                        break\n                    else:\n                        self.res = int(a) + int(b)\n                        break\n                else:\n                    self.res = int(s[i])\n                    break\n        return self.res"
    },
    {
        "number": 4403,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s=stdin.split()\n    for i in s:\n        if i.isdigit():\n            l=list(i)\n            if l[0]=='+':\n                l[0]='-'\n            if l[0]=='-':\n                l[0]='+'\n            l=int(''.join(l))\n            l+=1\n            s[i]=str(l)\n    return ''.join(s)\n"
    },
    {
        "number": 4404,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    inp = stdin.split()\n    # try:\n    #     inp = input().split(\"/\")\n    #     if len(inp) == 2:\n    #         year, month = int(inp[0]), int(inp[1])\n    #         month_days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    #         if month < 2:\n    #             month_days = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    #         else:\n    #             month_days = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    #         day = month_days[month - 2]\n    #         if day < month_days[month - 1]:\n    #             print('TBD')\n    #         elif month == 2:\n    #             day += 1\n    #             if day < month_days[month - 1]:\n    #                 print('TBD')\n    #         else:\n    #             day += month_days[month - 2]\n    #             if day < month_days[month - 1]:\n    #                 print('TBD')\n    #         print(day)\n    # except Exception as e:\n    #     print(e)\n    #     return 'Error'\n    print(year % 10, year % 100, year % 400)\n    print(year % 100)\n    print(year % 4)\n    # if year % 4 == 0:\n    #     if year % 100!= 0:\n    #         if year % 400 == 0:\n    #             print(\"True\")\n    #         else:\n    #             print(\"False\")\n    #     else:\n    #         print(\"True\")\n    # else:\n    #     print(\"False\")\n"
    },
    {
        "number": 4404,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def match(S):\n        if S == '04/30':\n            return 0\n        else:\n            return 1\n\n    def get_days(S):\n        days = 0\n        for i in range(0, len(S) - 1):\n            if match(S[i:i + 2]):\n                days += 1\n        return days\n\n    def check(S):\n        days = get_days(S)\n        if days > 31:\n            return 1\n        elif days == 30:\n            return 0\n        else:\n            return 1\n\n    def solution(stdin: str) -> str:\n        S = stdin\n        days = get_days(S)\n        if days > 31:\n            return 'TBD'\n        else:\n            return 'Heisei' if check(S) else 'TBD'\n\n    return solution(stdin)\n\n'''\ndef"
    },
    {
        "number": 4404,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return solution\n\ndef"
    },
    {
        "number": 4404,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    year, month, day = map(int, stdin.split(\"/\"))\n    month_list = [None, \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"]\n    month_num = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n    \n    def day_finder(month, day):\n        if (month == 1 or month == 3 or month == 5 or month == 7 or month == 8 or month == 10 or month == 12):\n            return 31\n        elif (month == 2):\n            if (day > 29 and day < 30):\n                return 29\n            else:\n                return 30\n        else:\n            return None\n        \n    def month_finder(year, month):\n        if (year % 4 == 0):\n            if (year % 100 == 0):\n                if (year % 400 == 0):\n                    return 29\n                else:\n                    return 28\n            else:\n                return 29\n        else:\n            return 30\n        \n    def day_finder_list(month, day):\n        if (month == 1):\n            return 31\n        elif (month == 2):\n            if (day > 28 and day < 30):\n                return 29\n            else:\n                return 30\n        else:\n            if (month == 3):\n                if (day > 29 and day < 30):\n                    return 29\n                else:\n                    return 30\n            else:\n                return 31\n        \n    if (month == 1):\n        if (day > 31):\n            return \"December 31\"\n        elif (day == 31):\n            return \"Jan 1\"\n        else:\n            return \"Jan 2\"\n    elif (month == 2):\n        if (day > 30):\n            return \"December 30\"\n        else:\n            return \"Feb 1\"\n    elif (month == 3):\n        if (day > 31):\n            return \"March 31\"\n        else:\n            return \"April 30\"\n    else:\n        if (day > 30):\n            return \"April 30\"\n        else:\n            return \"May 31\"\n    \n    def is_before(year, month, day):\n        if (month < month_list[month-1]):\n            return True\n        elif (month == month_list[month-1] and day > day_finder_list(month, day)):\n            return True\n        else:\n            return False\n    \n    def is_after(year, month, day):\n        if (month < month_list[month-1]):\n            return True\n        elif (month == month_list[month-1] and day < day_finder_list(month, day)):\n            return True\n        else:\n            return False\n    \n    def is_leap_year(year):\n        if (year % 4 == 0):\n            if (year % 100 == 0):\n                if (year % 400 == 0):\n                    return True\n                else:\n                    return False\n            else:\n                return True\n        else:\n            return False\n    \n    if (month > month_num[month-1]):\n        return \"December 31\"\n    elif (month == month_num[month-1] and day > day_finder_list(month, day)):\n        return \"December 31\"\n    else:\n        return \"November 31\"\n    \n    def is_valid(year, month, day):\n        if (is_before(year, month, day) or is_after(year, month, day)):\n            return True\n        else:\n            return False\n    \n    def validate(year, month, day):\n        if (is_valid(year, month, day)):\n            return \"Heisei\"\n        else:\n            return \"Bescher\"\n    \n    print(validate(year, month, day))"
    },
    {
        "number": 4404,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    year, month, day = map(int, stdin.split(\"/\"))\n    if ((year % 4 == 0 and (year % 100!= 0 or year % 400 == 0)) or (month < 1 or (month > 12) or day < 1 or (day > 31))):\n        return \"TBD\"\n    else:\n        return \"Heisei\"\n"
    },
    {
        "number": 4404,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(0, len(stdin)):\n        if date(stdin[i]) > date(2019, 4, 30):\n            return \"B\"\n    return \"T\"\n"
    },
    {
        "number": 4404,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    days = [4, 6, 7, 8, 10, 11]\n    months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\n    days = list(map(int, stdin.split('/')))\n    months = list(map(int, months))\n    max_day = max(days)\n    max_month = max(months)\n    day = days[max_day-1]\n    month = months[max_month-1]\n    print(day) if day <= 31 else print(months[max_month-1])\n"
    },
    {
        "number": 4404,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = input()\n    if(int(s[:4]) < 2020) or (int(s[:4]) > 2019):\n        print(False)\n    else:\n        if(int(s[:4])!= 2020) or (int(s[:4])!= 2019):\n            print(False)\n        else:\n            print(True)\n    return \"\"\n\nprint(solution(input()))"
    },
    {
        "number": 4404,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    year, month, day = map(int, stdin.split('/'))\n    \n    if (day + month + year) % 4 == 0:\n        \n        if day + month + year >= 30:\n            \n            return \"TD\"\n        \n        else:\n            return \"NE\"\n    \n    else:\n        \n        return \"N\"\n\"\"\"\n\ndef"
    },
    {
        "number": 4404,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    TBD\n    '''\n    def check_date(std_date):\n        tmp = ''\n        for i in std_date:\n            if i.isnumeric():\n                tmp += i\n        return tmp\n    \n    def is_valid_date(date):\n        for i in date:\n            if not(i.isnumeric() or i == '.'):\n                return False\n        return True\n    \n    s = stdin.split()\n    try:\n        std_date = [int(i) for i in s]\n    except:\n        print(\"Invalid date\")\n        return\n    \n    if not is_valid_date(std_date):\n        print(\"Invalid date\")\n        return\n    \n    if check_date(std_date)!= std_date[-1]:\n        print(\"Invalid date\")\n        return\n    \n    if check_date(std_date[:3]) < std_date[3:5]:\n        print(\"Invalid date\")\n        return\n    \n    if check_date(std_date[:4]) < std_date[4:7]:\n        print(\"Invalid date\")\n        return\n    \n    if check_date(std_date[:7]) < std_date[7:10]:\n        print(\"Invalid date\")\n        return\n    \n    if check_date(std_date[:10]) < std_date[10:13]:\n        print(\"Invalid date\")\n        return\n    \n    if check_date(std_date[:11]) < std_date[11:14]:\n        print(\"Invalid date\")\n        return\n    \n    if check_date(std_date[:14]) < std_date[14:17]:\n        print(\"Invalid date\")\n        return\n    \n    if check_date(std_date[:17]) < std_date[18:20]:\n        print(\"Invalid date\")\n        return\n    \n    if check_date(std_date[:20]) < std_date[20:23]:\n        print(\"Invalid date\")\n        return\n    \n    if check_date(std_date[:23]) < std_date[24:29]:\n        print(\"Invalid date\")\n        return\n    \n    if check_date(std_date[:29]) < std_date[30:32]:\n        print(\"Invalid date\")\n        return\n    \n    if check_date(std_date[:32]) < std_date[33:34]:\n        print(\"Invalid date\")\n        return\n    \n    if check_date(std_date[:34]) < std_date[35:37]:\n        print(\"Invalid date\")\n        return\n    \n    if check_date(std_date[:37]) < std_date[38:41]:\n        print(\"Invalid date\")\n        return\n    \n    if check_date(std_date[:41]) < std_date[42:45]:\n        print(\"Invalid date\")\n        return\n    \n    if check_date(std_date[:45]) < std_date[46:48]:\n        print(\"Invalid date\")\n        return\n    \n    if check_date(std_date[:48]) < std_date[49:52]:\n        print(\"Invalid date\")\n        return\n    \n    if check_date(std_date[:52]) < std_date[53:55]:\n        print(\"Invalid date\")\n        return\n    \n    if check_date(std_date[:55]) < std_date[56:58]:\n        print(\"Invalid date\")\n        return\n    \n    if check_date(std_date[:58]) < std_date[59:61]:\n        print(\"Invalid date\")\n        return\n    \n    if check_date(std_date[:61]) < std_date[62:65]:\n        print(\"Invalid date\")\n        return\n    \n    if check_date(std_date[:65]) < std_date[66:68]:\n        print(\"Invalid date\")\n        return\n    \n    if check_date(std_date[:68]) < std_date[69:71]:\n        print(\"Invalid date\")\n        return\n    \n    if check_date(std_date[:71]) < std_date[72:76]:\n        print(\"Invalid date\")\n        return\n    \n    if check_date(std_date[:76]) < std_date[77:79]:\n        print(\"Invalid date\")\n        return\n    \n    if check_date(std_date[:79]) < std_date[80:82]:\n        print(\"Invalid date\")\n        return\n    \n    if check_date(std_date[:82]) < std_date[83:85]:\n        print(\"Invalid date\")\n        return\n    \n    if check_date(std_date[:85]) < std_date[86:88]:\n        print(\"Invalid date\")\n        return\n    \n    if check_date(std_date[:88]) < std_date[89:91]:\n        print(\"Invalid date\")\n        return\n    \n    if check_date(std_date[:91]) < std_date[92:94]:\n        print(\"Invalid date\")\n        return\n    \n    if check_date(std_date[:94]) < std_date[95:98]:\n        print(\"Invalid date\")\n        return\n    \n    if check_date(std_date[:98]) < std_date[99:101]:\n        print(\"Invalid date\")\n        return\n    \n    if check_date(std_date[:101]) < std_date[102:104]:\n        print(\"Invalid date\")\n        return\n    \n    if check_date(std_date[:104]) < std_date[105:107]:\n        print(\"Invalid date\")\n        return\n    \n    if check_date(std_date[:107]) < std_date[108:110]:\n        print(\"Invalid date\")\n        return\n    \n    if check_date(std_date[:110]) < std_date[111:112]:\n        print(\"Invalid date\")\n        return\n    \n    if check_date(std_date[:112]) < std_date[113:114]:\n        print(\"Invalid date\")\n        return\n    \n    if check_date(std_date[:114]) < std_date[115:117]:\n        print(\"Invalid date\")\n        return\n    \n    if check_date(std_date[:117]) < std_date[118:119]:\n        print(\"Invalid date\")\n        return\n    \n    if check_date(std_date[:119]) < std_date[120:124]:\n        print(\"Invalid date\")\n        return\n    \n    if check_date(std_date[:124]) < std_date[125:129]:\n        print(\"Invalid date\")\n        return\n    \n    if check_date(std_date[:129]) < std_date[130:132]:\n        print(\"Invalid date\")\n        return\n    \n    if check_date(std_date[:132]) < std_date[133:134]:\n        print(\"Invalid date\")\n        return\n    \n    if check_date(std_date[:134]) < std_date[135:137]:\n        print(\"Invalid date\")\n        return\n    \n    if check_date(std_date[:137]) < std_date[138:141]:\n        print(\"Invalid date\")\n        return\n    \n    if check_date(std_date[:141]) < std_date[142:145]:\n        print(\"Invalid date\")\n        return\n    \n    if check_date(std_date[:145]) < std_date[146:149]:\n        print(\"Invalid date\")\n        return\n    \n    if check_date(std_date[:149]) < std_date[150:154]:\n        print(\"Invalid date\")\n        return\n    \n    if check_date("
    },
    {
        "number": 4405,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(max([int(x) for x in stdin.split()]))\n\n-----Constraints-----\n1 \u2264 n \u2264 10^5\n1 \u2264 a_i \u2264 100\n0 \u2264 a_i \u2264 1000\n0 \u2264 a_i < 1000\n0 \u2264 a_i < 1000000\n\nC++ Language\n\nTime Limit: 100ms\nSpace Limit: 1M\n\n-----Discussion-----\n\nTime complexity of solution is O(n).\n\nConstraints:\n1 \u2264 n \u2264 100\n1 \u2264 a_i \u2264 1000\n0 \u2264 a_i < 1000\n0 \u2264 a_i < 1000000\n\n-----Algorithm-----\n\nIteration over all the possible combinations of the topics, save the minimum number of problems per contest.\n\nIn each iteration, it checks if we can get the optimal number of problems to host the current contest.\n\nIf we can get the optimal number of problems to host the current contest, then we can add one problem to the end of the last contest.\n\nWhen it's enough to get the optimal number of problems to host the current contest, we can save all the number of problems per contest for all of the courses.\n\nIf we can get all the number of problems per contest for all of the courses, we can also save all the number of problems per contest as a constant.\n\nAs we can see, this process has ended in the first case because we can get all the number of problems per contest for all courses, and each time we can get all the number of problems per contest again, we can also save the total number of problems per contest for all courses.\n\nSubtasks:\n\nInput\n\nThe first line contains a single integer $n$.\nThe second line contains $n$ space-separated integers $a_1, a_2, \\dots, a_n$, each on a separate line.\n\nOutput\n\nPrint one integer \u2014 the maximum number of problems in the set of thematic contests.\n\n\n-----Example 1-----\nInput:\n\n4\n1 3 2 4\n3 2 1 2\n1 5 4 1\n\nOutput:\n\n3\n\nInput:\n\n4\n5 5 5 1 1 1\n1 2 3 1\n1 2 1 1\n1 2 1 1\n\nOutput:\n\n3\n\n\n-----Example 2-----\nInput:\n\n4\n1 1 2 3\n2 1 2 3\n2 3 4 5\n3 1 3 1\n\nOutput:\n\n2\n\n\n-----Constraints-----\n1 \u2264 n \u2264 100\n1 \u2264 a_i \u2264 100\n0 \u2264 a_i < 1000\n0 \u2264 a_i < 1000000\n\nC++ Language\n\nTime complexity: O(n * m)\nSpace complexity: O(n + m)\n\n-----Algorithm-----\n\nIteration over all the possible combinations of the topics, save the minimum number of problems per contest.\n\nIn each iteration, it checks if we can get the optimal number of problems to host the current contest.\n\nIf we can get the optimal number of problems to host the current contest, then we can add one problem to the end of the last contest.\n\nWhen it's enough to get the optimal number of problems to host the current contest, we can save all the number of problems per contest for all courses.\n\nIf we can get all the number of problems per contest for all courses, we can also save all the number of problems per contest as a constant.\n\nAs we can see, this process has ended in the first case because we can get all the number of problems per contest for all courses, and each time we can get all the number of problems per contest again, we can also save the total number of problems per contest for all courses.\n\nSubtasks:\n\nInput\n\nThe first line contains a single integer $n$.\nThe second line contains $n$ space-separated integers $a_1, a_2, \\dots, a_n$, each on a separate line.\n\nOutput\n\nPrint one integer \u2014 the maximum number of problems in the set of thematic contests.\n\n\n-----Example 1-----\nInput:\n\n4\n1 3 2 4\n3 2 1 2\n1 5 4 1\n\nOutput:\n\n3\n\n\n-----Example 2-----\nInput:\n\n4\n1 1 2 3\n2 1 2 3\n2 3 4 5\n3 1 3 1\n\nOutput:\n\n2\n\n\n-----Constraints-----\n1 \u2264 n \u2264 100\n1 \u2264 a_i \u2264 100\n0 \u2264 a_i < 1000\n0 \u2264 a_i < 1000000\n\nC++ Language\n\nTime complexity: O(n * m)\nSpace complexity: O(n + m)\n\n-----Algorithm-----\n\nIteration over all the possible combinations of the topics, save the minimum number of problems per contest.\n\nIn each iteration, it checks if we can get the optimal number of problems to host the current contest.\n\nIf we can get the optimal number of problems to host the current contest, then we can add one problem to the end of the last contest.\n\nWhen it's enough to get the optimal number of problems to host the current contest, we can save all the number of problems per contest for all courses.\n\nIf we can get all the number of problems per contest for all courses, we can also save all the number of problems per contest as a constant.\n\nAs we can see, this process has ended in the first case because we can get all the number of problems per contest for all courses, and each time we can get all the number of problems per contest again, we can also save the total number of problems per contest for all courses.\n\nSubtasks:\n\nInput\n\nThe first line contains a single integer $n$.\nThe second line contains $n$ space-separated integers $a_1, a_2, \\dots, a_n$, each on a separate line.\n\nOutput\n\nPrint one integer \u2014 the maximum number of problems in the set of thematic contests.\n\n\n-----Example 1-----\nInput:\n\n4\n1 3 2 4\n3 2 1 2\n1 5 4 1\n\nOutput:\n\n3\n\n\n-----Example 2-----\nInput:\n\n4\n1 1 2 3\n2 1 2 3\n2 3 4 5\n3 1 3 1\n\nOutput:\n\n2\n\n\n-----Constraints-----\n1 \u2264 n \u2264 100\n1 \u2264 a_i \u2264 100\n0 \u2264 a_i < 1000\n0 \u2264 a_i < 1000000\n\nC++ Language\n\nTime complexity: O(n * m)\nSpace complexity: O(n + m)\n\n-----Algorithm-----\n\nIteration over all the possible combinations of the topics, save the minimum number of problems per contest.\n\nIn each iteration, it checks if we can get the optimal number of problems to host the current contest.\n\nIf"
    },
    {
        "number": 4405,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    a.append(10**9)\n    a.sort()\n    return str(n*(n+1)/2)\n"
    },
    {
        "number": 4405,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a_dict = {}\n    for i in range(n):\n        a_dict[i] = int(stdin[i])\n    \n    max_num_problems = 0\n    result = 0\n    \n    for i in range(n):\n        if a_dict[i] not in a_dict:\n            continue\n        else:\n            for j in range(i, n):\n                if a_dict[i] == a_dict[j]:\n                    continue\n                else:\n                    if a_dict[i] not in a_dict:\n                        continue\n                    else:\n                        a_dict[i] = a_dict[i] * 2 + a_dict[j]\n                        if a_dict[i] > max_num_problems:\n                            result = i\n                            max_num_problems = a_dict[i]\n    return str(result)"
    },
    {
        "number": 4405,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a1, a2, a3, a4 = map(int, stdin.split())\n    count = 0\n    for _ in range(n):\n        count += 2\n        a = stdin.split()\n        if a[0] == str(a1):\n            count += int(a[1]) * a2\n        if a[0] == str(a1):\n            count += int(a[1]) * a2\n        if a[0] == str(a2):\n            count += int(a[1]) * a2\n        if a[0] == str(a2):\n            count += int(a[1]) * a2\n        if a[0] == str(a3):\n            count += int(a[1]) * a3\n        if a[0] == str(a3):\n            count += int(a[1]) * a3\n        if a[0] == str(a4):\n            count += int(a[1]) * a4\n        if a[0] == str(a4):\n            count += int(a[1]) * a4\n        if count > n:\n            return \"Error\"\n    return str(count)\n\nprint(solution(stdin))\n\ndef"
    },
    {
        "number": 4405,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin)\n    problem = [int(x) for x in stdin.split()]\n    \n    print(max(max(p1, p2, p3, p4, p5, p6, p7, p8) for p1 in problem for p2 in problem for p3 in problem for p4 in problem for p5 in problem for p6 in problem for p7 in problem for p8 in problem))\n    \n\n-----Constraints-----\n\n1 <= n <= 10^5\n\n---time---O(n)---\n\n---memory---O(1)---\n\n---Constraints--\n\na_1 < a_2 < a_n < 10^9\n\n------Constraints------\n\n1 <= n <= 10^5\n\n-------Time limit-------\n\nO(n)\n\n-------Memory limit-------\n\nO(1)\n\n-----Submission-----\n\nInput\n18\n2 1 2 10 2 10 10 2 2 1 10 10 10 10 1 1 10 10\n\nOutput\n14\n\nInput\n10\n6 6 6 3 6 1000000000 3 3 6 6\n\nOutput\n3\n\n\n-----Notes-----\n\nIn the first example the optimal sequence of contests is: $2$ problems of the topic $1$, $4$ problems of the topic $2$, $8$ problems of the topic $10$.\n\nIn the second example you can take all the problems with the topic $1337$ (the number of such problems is $3$ so the answer is $3$) and host a single contest.\n\na_i = p_i = 2 + 10 + 10 + 10 + 2 + 1000000000 + 1000000000 + 1000000000 + 10 + 10 + 10 + 10 + 10 + 2 + 10 + 10 + 10 + 10 + 1000000000 + 1000000000 + 1000000000 + 10 + 10 + 10 + 10 + 10 + 2 + 10 + 10 + 10 + 10 + 10 + 10 + 2 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 2 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 2 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 2 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 2 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 2 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10 + 10"
    },
    {
        "number": 4405,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\n---Code---\nN = int(input())\n\na = [0] * 1000\n\ndef"
    },
    {
        "number": 4405,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin)\n    a = list(map(int,stdin.split()))\n    a.sort(key=lambda x: (x+1) * a[x]//2)\n    print(a[-1])\n    return str(len(a) - 1)\n\n    \n"
    },
    {
        "number": 4405,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a_1 = n//2\n    a_2 = n - a_1\n    while n % 2!= 0:\n        a_1 += 1\n        n -= 1\n    n //= 2\n    a_2 = n - a_1\n    while n % 2!= 0:\n        a_2 += 1\n        n -= 1\n    a_3 = a_1 + a_2\n    max_problem = a_1 + a_2 + a_3\n    print(max_problem)\n    return str(max_problem)\n\ndef"
    },
    {
        "number": 4405,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, *A, A = map(int, stdin.split())\n    A.sort()\n    ret = 0\n    for i in range(n-1):\n        if A[i] == A[i+1]:\n            ret += 2*n\n        else:\n            ret += (n - i)\n    return str(ret)\n\nn = int(input())\nA = [int(i) for i in input().split()]\nprint(solution(stdin))\n\n-----Constraints-----\n\n0 < n < 2^5\n0 < a_1, a_2, \\dots, a_n \\le 10^9\n\n------Problems------\n\n1 <= n <= 10^5\n0 < a_i \\le 10^9\n\n1 <= A \\le 10^9\n\n-----Time Complexity-----\n\nO(N logN)\n\"\"\""
    },
    {
        "number": 4405,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    \n    # Compute the max number of problems for the first contests\n    # Number of problems in each contest is twice as much as in the previous contest (one day ago).\n    # So we have to add the number of problems in all the contests\n    # to the number of problems in the previous contest\n    max_n = (n+1) // (n+1)\n    \n    # Now we will fill the remaining number of problems in the previous contest\n    # with every possible number of problems.\n    # n is the same for all the previous ones.\n    max_n = max_n * (n+1)\n    \n    # We have to sum the number of problems in the last contest\n    # to get the total number of problems.\n    # We start with the number of problems in the last contest\n    # and we add all the problems in the last contest\n    # with all the problems in the previous contest.\n    # If we do not add any problems, we need to skip the last problem.\n    # If we have a problem in the last contest, we will add it to the total number.\n    # So in the end, we are left with the total number of problems.\n    # Example:\n    # Input: n = 4\n    # Output: 6\n    # Explanation:\n    # First problem: $2$ problems of the topic $4$, $8$ problems of the topic $10$ (with the same number of problems).\n    # Second problem: $3$ problems of the topic $6$, $6$ problems of the topic $8$.\n    # We have to add the number of problems in all the contests\n    # to the total number of problems in the previous contest.\n    # Hence, we add $2$ problems in total to the number of problems.\n    # Now, because we have to add all the problems in the last contest, we will add the number of problems in the previous contest\n    # to the total number of problems in the previous contest, which is $6$.\n    # Hence, we add $6$ problems in total to the number of problems.\n    # Now, because we have to add all the problems in the last contest, we will add the number of problems in the previous contest\n    # to the total number of problems in the previous contest, which is $8$.\n    # Hence, we add $8$ problems in total to the number of problems.\n    # Now, because we have to add all the problems in the last contest, we will add the number of problems in the previous contest\n    # to the total number of problems in the previous contest, which is $4$.\n    # Hence, we add $4$ problems in total to the number of problems.\n    # Now, because we have to add all the problems in the last contest, we will add the number of problems in the previous contest\n    # to the total number of problems in the previous contest, which is $1$.\n    # Hence, we add $1$ problems in total to the number of problems.\n    # So, we add 1 problem in total to the number of problems.\n    # So, we add 1 problem in total to the number of problems.\n    # So, we add 1 problem in total to the number of problems.\n    # So, we add 1 problem in total to the number of problems.\n    # So, we add 1 problem in total to the number of problems.\n    # So, we add 1 problem in total to the number of problems.\n    # So, we add 1 problem in total to the number of problems.\n    # So, we add 1 problem in total to the number of problems.\n    # So, we add 1 problem in total to the number of problems.\n    # So, we add 1 problem in total to the number of problems.\n    # So, we add 1 problem in total to the number of problems.\n    # So, we add 1 problem in total to the number of problems.\n    # So, we add 1 problem in total to the number of problems.\n    # So, we add 1 problem in total to the number of problems.\n    # So, we add 1 problem in total to the number of problems.\n    # So, we add 1 problem in total to the number of problems.\n    # So, we add 1 problem in total to the number of problems.\n    # So, we add 1 problem in total to the number of problems.\n    # So, we add 1 problem in total to the number of problems.\n    # So, we add 1 problem in total to the number of problems.\n    # So, we add 1 problem in total to the number of problems.\n    # So, we add 1 problem in total to the number of problems.\n    # So, we add 1 problem in total to the number of problems.\n    # So, we add 1 problem in total to the number of problems.\n    # So, we add 1 problem in total to the number of problems.\n    # So, we add 1 problem in total to the number of problems.\n    # So, we add 1 problem in total to the number of problems.\n    # So, we add 1 problem in total to the number of problems.\n    # So, we add 1 problem in total to the number of problems.\n    # So, we add 1 problem in total to the number of problems.\n    # So, we add 1 problem in total to the number of problems.\n    # So, we add 1 problem in total to the number of problems.\n    # So, we add 1 problem in total to the number of problems.\n    # So, we add 1 problem in total to the number of problems.\n    # So, we add 1 problem in total to the number of problems.\n    # So, we add 1 problem in total to the number of problems.\n    # So, we add 1 problem in total to the number of problems.\n    # So, we add 1 problem in total to the number of problems.\n    # So, we add 1 problem in total to the number of problems.\n    # So, we add 1 problem in total to the number of problems.\n    # So, we add 1 problem in total to the number of problems.\n    # So, we add 1 problem in total to the number of problems.\n    # So, we add 1 problem in total to the number of problems.\n    # So, we add 1 problem in total to the number of problems.\n    # So, we add 1 problem in total to the number of problems.\n    # So, we add 1 problem in total to the number of problems.\n    # So, we add 1 problem in total to the number of problems.\n    # So, we add 1 problem in total to the number of problems.\n    # So, we add 1 problem in total"
    },
    {
        "number": 4406,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split()]\n    stdin = [int(i) for i in stdin.split()]\n    result = []\n    for i in range(0, len(stdin)):\n        result.append((i+1, i+stdin[i]))\n    result.sort()\n    \n    ans = ''\n    for i in result:\n        ans += str(i[1]) +''\n    return ans[:-1]\n\"\"\"\n\nclass Solution:\n    def process_conversation(self, conv_id: str) -> str:\n        conversation_list = []\n        # Convert conversation into a list of conversation IDs\n        # so we can sort it easily\n        conversation_list = [int(i) for i in conv_id.split()]\n        # Sort according to the conversation ID\n        conversation_list.sort()\n        # Concatenate conversation\n        return''.join(map(str, conversation_list))"
    },
    {
        "number": 4406,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, k = map(int, stdin.split())\n    convs = list(map(int, stdin.split()))\n    convs.sort(reverse=True)\n    \n    answer = 1\n    for i in range(k):\n        if i == len(convs):\n            break\n        answer += 1\n        \n        for j in range(i+1, len(convs)):\n            if convs[i] > convs[j]:\n                answer -= 1\n    \n    return str(answer)\n\n-----Searching the smallest number-------\n\n1\n3 4 5\n3 2 4\n3 1 5\n4 1 3\n\n3 3 1 2 3 3 3 3 3\n\n1 2 3 4 5 3 3 3 3 4\n\n3 4 5 2 3 3 3 3 3 3\n\n3 4 5 3 3 3 3 3 3 3\n\n4 5 3 3 3 3 3 3 3 3\n\n3 4 5 1 3 3 3 3 3 3\n\n3 4 5 3 3 3 3 3 3 3\n\n3 4 5 3 3 3 3 3 3 3\n\n3 4 5 1 3 3 3 3 3 3\n\n3 4 5 3 3 3 3 3 3 3\n\n3 4 5 3 3 3 3 3 3 3\n\n3 4 5 3 3 3 3 3 3 3\n\n3 4 5 1 3 3 3 3 3 3\n\n3 4 5 3 3 3 3 3 3 3\n\n3 4 5 3 3 3 3 3 3 3\n\n3 4 5 3 3 3 3 3 3 3\n\n3 4 5 3 3 3 3 3 3 3\n\n3 4 5 3 3 3 3 3 3 3\n\n3 4 5 3 3 3 3 3 3 3\n\n3 4 5 3 3 3 3 3 3 3\n\n3 4 5 3 3 3 3 3 3 3\n\n3 4 5 3 3 3 3 3 3 3\n\n3 4 5 3 3 3 3 3 3 3\n\n3 4 5 3 3 3 3 3 3 3\n\n3 4 5 3 3 3 3 3 3 3\n\n3 4 5 3 3 3 3 3 3 3\n\n3 4 5 3 3 3 3 3 3 3\n\n3 4 5 3 3 3 3 3 3 3\n\n3 4 5 3 3 3 3 3 3 3\n\n3 4 5 3 3 3 3 3 3 3\n\n3 4 5 3 3 3 3 3 3 3\n\n3 4 5 3 3 3 3 3 3 3\n\n3 4 5 3 3 3 3 3 3 3\n\n3 4 5 3 3 3 3 3 3 3\n\n3 4 5 3 3 3 3 3 3 3\n\n3 4 5 3 3 3 3 3 3 3\n\n3 4 5 3 3 3 3 3 3 3\n\n3 4 5 3 3 3 3 3 3 3\n\n3 4 5 3 3 3 3 3 3 3\n\n3 4 5 3 3 3 3 3 3 3\n\n3 4 5 3 3 3 3 3 3 3\n\n3 4 5 3 3 3 3 3 3 3\n\n3 4 5 3 3 3 3 3 3 3\n\n3 4 5 3 3 3 3 3 3 3\n\n3 4 5 3 3 3 3 3 3 3\n\n3 4 5 3 3 3 3 3 3 3\n\n3 4 5 3 3 3 3 3 3 3\n\n3 4 5 3 3 3 3 3 3 3\n\n3 4 5 3 3 3 3 3 3 3\n\n3 4 5 3 3 3 3 3 3 3\n\n3 4 5 3 3 3 3 3 3 3\n\n3 4 5 3 3 3 3 3 3 3\n\n3 4 5 3 3 3 3 3 3 3\n\n3 4 5 3 3 3 3 3 3 3\n\n3 4 5 3 3 3 3 3 3 3\n\n3 4 5 3 3 3 3 3 3 3\n\n3 4 5 3 3 3 3 3 3 3\n\n3 4 5 3 3 3 3 3 3 3\n\n3 4 5 3 3 3 3 3 3 3\n\n3 4 5 3 3 3 3 3 3 3\n\n3 4 5 3 3 3 3 3 3 3\n\n3 4 5 3 3 3 3 3 3 3\n\n3 4 5 3 3 3 3 3 3 3\n\n3 4 5 3 3 3 3 3 3 3\n\n3 4 5 3 3 3 3 3 3 3\n\n3 4 5 3 3 3 3 3 3 3\n\n3 4 5 3 3 3 3 3 3 3\n\n3 4 5 3 3 3 3 3 3 3\n\n3 4 5 3 3 3 3 3 3 3\n\n3 4 5 3 3 3 3 3 3 3\n\n3 4 5 3 3 3 3 3 3 3\n\n3 4 5 3 3 3 3 3 3 3\n\n3 4 5 3 3 3 3 3 3 3\n\n3 4 5 3 3 3 3 3 3 3\n\n3 4 5 3 3 3 3 3 3 3\n\n3 4 5 3 3 3 3 3 3 3\n\n3 4 5 3 3 3 3 3 3 3\n\n3 4 5 3 3 3 3 3 3 3\n\n3 4 5 3 3 3 3 3 3 3\n\n3 4 5 3 3 3 3 3 3 3\n\n3 4 5 3 3 3 3 3 3 3\n\n3 4 5 3 3 3 3 3 3 3\n\n3 4 5 3 3 3 3 3 3 3\n\n3 4 5 3 3 3 3 3 3 3\n\n3 4 5 3 3 3 3 3 3 3\n\n3 4 5 3 3 3 3 3 3 3\n\n3 4 5 3 3 3 3 3 3 3\n\n3 4 5"
    },
    {
        "number": 4406,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = list(map(int, stdin.split()))\n    return str(s[k-1]) + str(s[k-1] + 1)\n\nExplanation\n\nAll the messages are sent from $id_1$ to $id_2$, so that the first conversation comes first and the second one second.\n\nIn this way we have to show all possible conversations.\n\nThe first conversation shows the last message in the second conversation.\n\nThe second conversation has the second message, which is received by $id_2$.\n\nThe third conversation shows all the other messages.\n\nThe fourth conversation shows the last message, which is received by $id_2$, which is not displayed on the screen.\n\nThe fifth conversation shows all other messages.\n\nFinally, the last conversation shows all messages that were not received by any other friend.\n\nInput\n\n10 2\n1 3 2 1 1 2 1 2 3 3 1 3 2\n\nOutput\n\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n"
    },
    {
        "number": 4406,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = [int(i) for i in stdin.split()]\n    id_1, id_2, n, k = stdin\n    if k >= n >= 2:\n        print(len(set([i for i in range(id_1, id_2)]) - set([i for i in range(id_1)])))\n    elif n > k >= 2:\n        print(len(set([i for i in range(id_1, id_2)]) - set([i for i in range(id_1)])))\n    else:\n        print(len(set([i for i in range(id_1, id_2)]) - set([i for i in range(id_1)])))\n    return ''"
    },
    {
        "number": 4406,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n > k:\n        return \"\"\n    k = k - 1\n    data = list(map(int, stdin.split()))\n    \n    lst = []\n    for i in range(n):\n        lst.append(data[i])\n    lst = sorted(lst)\n    print(lst)\n    if lst[-1] == k:\n        return \"\"\n    \n    answer = \"\"\n    for i in range(1, len(lst)):\n        if (lst[i] - lst[i - 1]) < k:\n            answer += str(i)\n        else:\n            answer += str(i - 1)\n    \n    return answer\n\n\n-----Constraints-----\n\n1 <= n, k <= 10^6\n\n1 <= id_1 < 10^9\n\n1 <= id_i < 10^9\n\n------Time Limit Exceeded------\n\nSample Input 1:\n\n7 2\n1 2 3 2 1 3 2\n\nSample Output 1:\n\n3\n\nSample Input 2:\n\n10 4\n2 3 3 1 1 2 1 2 3 3\n\nSample Output 2:\n\n3\n\"\"\""
    },
    {
        "number": 4406,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin) < 3:\n        return \"\"\n    n = int(stdin[0])\n    k = int(stdin[2])\n    answer = \"\"\n    for i in range(1, n + 1):\n        tmp = stdin[i].split(\", \")\n        tmp = [i for i in tmp if i.strip()!= \"\"]\n        if len(tmp)!= 1:\n            print(\"error\")\n            return answer\n        tmp = tmp[0]\n        ids = list(map(int, tmp.split(\",\")))\n        if len(ids)!= k:\n            print(\"error\")\n            return answer\n        answer += \",\".join(map(str, ids))\n    return answer\n\nprint(solution(\"1,1,2,3,3,4,5,6,7\"))\n"
    },
    {
        "number": 4406,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    \n    print(n, k)\n    \n    if n > k:\n        return \"No\"\n    \n    # find the id of the first and last conversation\n    id_i = -1\n    id_i_max = 0\n    \n    for i in range(n):\n        if stdin[i] == '1':\n            id_i = i\n            id_i_max = max(id_i_max, i+1)\n        elif stdin[i] == '2':\n            id_i = i\n    \n    # find the conversations by removing the messages with id_i\n    lst = []\n    \n    for i in range(id_i_max):\n        while n - (k-i) >= 0:\n            lst.append(stdin[i+n-1])\n            n -= 1\n            \n    return \" \".join(lst)\n\n\ndef"
    },
    {
        "number": 4406,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    list_conversations = []\n    list_conversations_name = []\n    for i in range(n):\n        conversations = list(map(int, stdin.split()))\n        if len(conversations) == 1:\n            list_conversations.append(conversations[0])\n        else:\n            for j in range(i, len(conversations), 2):\n                list_conversations.append(conversations[j])\n            list_conversations.sort()\n            list_conversations.append(conversations[-1])\n\n    id_s = set()\n    id_s.add(list_conversations[0])\n    id_s.add(list_conversations[-1])\n    id_s.add(list_conversations[1])\n\n    for i in range(2, len(list_conversations)):\n        id_s.add(list_conversations[i])\n\n    return '\\n'.join([str(len(list_conversations_name))]+[str(i) for i in sorted(list(id_s))])\n\"\"\"\n\ndef"
    },
    {
        "number": 4406,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, k = map(int, stdin.split())\n    if n == k:\n        answer = [str(len(set(map(int, list(stdin)))))]\n    else:\n        answer = [str(len(set(map(int, list(stdin)))))] + [list(stdin)[-k]]\n    return \" \".join(answer)\n\nprint(solution(\"1 3 2\")) # 2\nprint(solution(\"2 3 3 1\")) # 3\nprint(solution(\"2 3 3 2\")) # 1 \nprint(solution(\"3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3"
    },
    {
        "number": 4406,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lst = list(map(int, stdin.split()))\n    lst.sort(reverse=True)\n    return''.join(map(str, lst))\n\nInput\n1\n1 1 1 1 1 1 1 1 1 1 1\n\nOutput\n1\n\n\n\n-----Note-----\n\nIf the number of messages on the screen is $n$, the last conversation (which has the position $k$) is removed and the previous conversation (which has the position $k$) is shifted one position down.\nIf there is no conversation with $id_i$, then the number of displayed conversations is guaranteed to be less than $k$ and the conversation with the friend $id_i$ is not displayed on the screen.\nSo the number of displayed conversations should be the same as the number of messages displayed on the screen.\n\n'''"
    },
    {
        "number": 4407,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    coins = []\n    for _ in range(n):\n        coins.append(int(stdin.split()[-1]))\n    answer = [0] * (q + 1)\n    for j in range(1, q + 1):\n        for i in range(n):\n            if j < coins[i]:\n                answer[j] = max(answer[j], answer[j - coins[i]] + 1)\n    if answer[q] == -1:\n        return \"-\"\n    return str(answer[q])\n\n\n-----Example-----\n"
    },
    {
        "number": 4407,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, Q = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    return str(min(b, key=lambda x: (x**2, x)))\n\n\n'''"
    },
    {
        "number": 4407,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    coins = list(map(int, input().split()))\n    query = list(map(int, input().split()))\n    \n    def coins_to_pow(coins, query):\n        ans = list()\n        for coin in coins:\n            a = 2\n            for i in range(query):\n                a = a * (query - i)\n            ans.append(a)\n        return ans\n    \n    def min_coins(a, b, q):\n        if q == 0:\n            return 0\n        if q % 2 == 0:\n            ans = (a + b) // (a * q + b)\n        else:\n            ans = (a + b) // (a * q + b) + 1\n        return ans\n    \n    \n    ans = list()\n    for i in range(n):\n        if query[i] == 1:\n            ans.append(coins_to_pow(coins, query[i]))\n        elif query[i] == q:\n            ans.append(min_coins(coins[i], coins[i], q))\n        else:\n            ans.append(-1)\n    return''.join(map(str, ans))"
    },
    {
        "number": 4407,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    a, b = map(int, input().split())\n    c = int(input())\n    ans = -1\n    for i in range(q):\n        j = int(input())\n        a_i = int(input())\n        b_i = int(input())\n        if j > a_i:\n            ans = -1\n            break\n        for j in range(b_i, b+1):\n            if j > a_i:\n                ans = -1\n                break\n            if j == a_i:\n                if a_i == 2**(a_i-1):\n                    a = a*(2**(a_i-1))\n                    a_i = 1\n                else:\n                    a = a*(2**(a_i-1))\n                    a_i += 1\n                break\n    print(ans)\n"
    },
    {
        "number": 4407,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 4407,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    nums = map(int, stdin.split())\n    polycarp = [2**i for i in range(n)]\n    b = [0]*n\n    ans = -1\n    for i in range(n):\n        if nums[i] in polycarp:\n            b[i] = nums[i]\n        else:\n            break\n    for j in range(q):\n        a, b = map(int, stdin.split())\n        if a in b:\n            ans = min(ans, b[b.index(a)])\n            \n    return str(ans)"
    },
    {
        "number": 4407,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    a = []\n    for _ in range(n):\n        a.append(list(map(int, stdin.split())))\n    \n    a.sort(key = lambda x : x[0])\n    \n    for _ in range(q):\n        b, j = map(int, input().split())\n        if b == -1:\n            return str(-1)\n        else:\n            k = 0\n            for i in range(n):\n                if a[i][0] <= b:\n                    k += a[i][1]\n            print(k)\nsolution(stdin)"
    },
    {
        "number": 4407,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    coins = []\n    for _ in range(q):\n        coins.append(int(stdin.readline().strip()))\n    answer = -1\n    for i in range(1, n+1):\n        tmp = []\n        for j in range(1, n+1):\n            if j >= i:\n                tmp.append(coins[j-1]*i)\n            else:\n                tmp.append(-1)\n        answer = max(answer, max(tmp))\n    return str(answer)\n\n-----Basic Code-----\n\nN = int(input())\ncoins = list(map(int, input().split()))\ndp = [[-1 for i in range(N+1)] for j in range(N+1)]\nfor i in range(N):\n    for j in range(N, i, -1):\n        if coins[i]>coins[j]:\n            dp[i][j] = coins[i]\n        else:\n            dp[i][j] = dp[j][i]\n    for k in range(1, N+1):\n        dp[i][k] = dp[i][k]+dp[k][i]\n        if dp[i][k] == -1:\n            break\nprint(dp[N][N])\n"
    },
    {
        "number": 4407,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, q = list(map(int, stdin.split()))\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    \n    if n!= q or sum(a)!= sum(b):\n        return \"-1\"\n    \n    ans = []\n    \n    def get_perm(coin):\n        i = 0\n        res = []\n        while i < len(coin):\n            for j in range(i, len(coin)):\n                if j!= i and coin[j] == coin[i]:\n                    continue\n                res.append(coin[i] * coin[j])\n                i += 1\n        return res\n    \n    for i in range(q):\n        coin = list(map(int, input().split()))\n        coins = get_perm(coin)\n        count = 0\n        for coin in coins:\n            if a[count] * coin < b[count]:\n                count += 1\n            elif a[count] * coin > b[count]:\n                count += 1\n        if count == q:\n            ans.append(a[count] * b[count])\n    return \"-1\" if len(ans) == q else str(max(ans))"
    },
    {
        "number": 4407,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    \n    coins = [int(i) for i in range(1, q+1)]\n    \n    ans = -1\n    \n    for a in range(q):\n        a_i = int(input())\n        b_j = int(input())\n        \n        temp = sum(coins[:a_i])\n        temp += sum(coins[a_i:])\n        \n        ans = max(ans, temp)\n        \n    return ans\n"
    },
    {
        "number": 4408,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    # a list of numbers representing the values of the cards\n    cards = list(map(int, stdin.split()))\n\n    # a list of numbers representing the numbers of friends (see definition)\n    friends = list(map(int, stdin.split()))\n\n    # a list of numbers representing the numbers of cards with friends\n    friend_cards = []\n\n    for _ in range(k):\n        friend_cards.append(cards.pop(0))\n\n    # a list of numbers representing the numbers of cards that are not friends\n    unfriend_cards = []\n\n    for _ in range(k):\n        unfriend_cards.append(cards.pop())\n\n    # the number of cards with the friends\n    unfriend_n = friends.count(friends[0])\n\n    # the number of cards with the friends\n    friends_n = friends.count(friends[0])\n\n    # the number of cards with the friends\n    friend_n = friends_n - len(friends) - len(unfriend_cards) - len(unfriend_cards)\n\n    # the number of cards with all friends\n    friends_all_n = friends.count(friends[0])\n\n    # the number of cards with all friends\n    friends_all_n_all = friends.count(friends[0])\n\n    # the number of cards with the friend\n    friends_n_with_f_n = friends_n - len(friends) - len(unfriend_cards)\n\n    # the number of cards with the friend\n    friends_n_with_f_n_all = friends_n.count(friends[0])\n\n    # the number of cards with all friends\n    friends_all_n_with_f_n = friends_n_with_f_n - friends_n_with_f_n_all\n\n    # the number of cards with the friend\n    friends_all_n_with_f_n_all = friends_all_n_with_f_n.count(friends[0])\n\n    # total joy levels of the player\n    total = friend_n + friends_all_n + friends_n_with_f_n + friends_all_n_with_f_n\n\n    return str(total)\n\nTime complexity: O(n)\nSpace complexity: O(n)\nComplexity:\n\nFor each player, we need to consider $n$, $k$, $n \\le k \\le n$, $k \\le n \\le k \\le n$.\n\nFor each player, we need to consider $n$, $k$, $n \\le k \\le n$, $k \\le k \\le n$.\n\nFor each player, we need to consider $n$, $k$, $n \\le k \\le n$, $k \\le k \\le n$.\n\nFor each player, we need to consider $n$, $k$, $n \\le k \\le n$, $k \\le k \\le n$.\n\nFor each player, we need to consider $n$, $k$, $n \\le k \\le n$, $k \\le k \\le n$.\n\nFor each player, we need to consider $n$, $k$, $n \\le k \\le n$, $k \\le k \\le n$.\n\nFor each player, we need to consider $n$, $k$, $n \\le k \\le n$, $k \\le k \\le n$.\n\nFor each player, we need to consider $n$, $k$, $n \\le k \\le n$, $k \\le k \\le n$.\n\nFor each player, we need to consider $n$, $k$, $n \\le k \\le n$, $k \\le k \\le n$.\n\nFor each player, we need to consider $n$, $k$, $n \\le k \\le n$, $k \\le k \\le n$.\n\nFor each player, we need to consider $n$, $k$, $n \\le k \\le n$, $k \\le k \\le n$.\n\nFor each player, we need to consider $n$, $k$, $n \\le k \\le n$, $k \\le k \\le n$.\n\nFor each player, we need to consider $n$, $k$, $n \\le k \\le n$, $k \\le k \\le n$.\n\nFor each player, we need to consider $n$, $k$, $n \\le k \\le n$, $k \\le k \\le n$.\n\nFor each player, we need to consider $n$, $k$, $n \\le k \\le n$, $k \\le k \\le n$.\n\nFor each player, we need to consider $n$, $k$, $n \\le k \\le n$, $k \\le k \\le n$.\n\nFor each player, we need to consider $n$, $k$, $n \\le k \\le n$, $k \\le k \\le n$.\n\nFor each player, we need to consider $n$, $k$, $n \\le k \\le n$, $k \\le k \\le n$.\n\nFor each player, we need to consider $n$, $k$, $n \\le k \\le n$, $k \\le k \\le n$.\n\nFor each player, we need to consider $n$, $k$, $n \\le k \\le n$, $k \\le k \\le n$.\n\nFor each player, we need to consider $n$, $k$, $n \\le k \\le n$, $k \\le k \\le n$.\n\nFor each player, we need to consider $n$, $k$, $n \\le k \\le n$, $k \\le k \\"
    },
    {
        "number": 4408,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k, t = map(int, stdin.split())\n    f = map(int, stdin.split())\n    cards = set(f)\n\n    cnt = 0\n    for c in cards:\n        if c % t == 0:\n            cnt += 1\n\n    return str(cnt)\n\ndef"
    },
    {
        "number": 4408,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    cards = list(map(int, stdin.split()))\n    cards.sort()\n    # print(cards)\n    h_t = cards[-1] - cards[0]\n    # print(h_t)\n    answer = 0\n    for k in range(1, k+1):\n        answer += h_t // (2 * k)\n    return str(answer)\n"
    },
    {
        "number": 4408,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    cards = list(map(int, stdin.split()))\n    answer = 0\n    for i in range(k):\n        cards[i] = cards[i] - 1\n        answer += cards[i]\n    \n    for i in range(k):\n        if cards[i] == 1:\n            answer -= 1\n    \n    return str(answer)\n\nprint(solution(\"4 3\"))"
    },
    {
        "number": 4408,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    card_list = [int(stdin[i:i + k]) for i in range(0, len(stdin), k)]\n    table = []\n    for i in range(n):\n        table.append(card_list[i] ** k)\n    return str(max(table))"
    },
    {
        "number": 4408,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    f, h = map(int, stdin.split())\n    h = min(h, k)\n    c = [i for i in range(1, h+1)]\n    answer = 1\n    for j in range(2, k+1):\n        answer = max(answer, sum(c[:j]))\n        c[j] += c[j-1]\n    return str(answer)\n\n\n\n\n\n\n\nInput\n\n4\n1 2 2 1 2 1\n1 2 3\n1 3 6\n\nOutput\n\n3\n\n\n\n\"\"\"\n\n\n\nclass Solution:\n    def maxJoy(self, n: int, k: int, cards: List[int]) -> int:\n        l, h = [], []\n        for i in cards:\n            l.append(i)\n            l.sort()\n            h.append(len(l) - 1)\n            l[len(l) - 1] = -1\n\n        def count_bar(l, n, i):\n            h = [0 for _ in range(n + 1)]\n            for j in range(n):\n                if l[j]!= -1:\n                    h[l[j]] += 1\n            return h[i]\n\n        cnt = 0\n        for i in range(1, k + 1):\n            if count_bar(l, n, i) == k:\n                cnt += 1\n        return cnt\n"
    },
    {
        "number": 4408,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[-1])\n    k = int(stdin.split()[0])\n    h = [int(x) for x in stdin[0:-1].split()]\n    cards = sorted([int(x) for x in stdin[1:-1].split()], reverse=True)\n    count = 0\n    for i in cards:\n        if h[count] >= i:\n            count += 1\n        else:\n            break\n    return str(count)\n\ndef"
    },
    {
        "number": 4408,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    n_cards = list(map(int, stdin.split()))\n    f_n = map(int, stdin.split())\n    f_n = list(set(f_n))\n    for f_n in f_n:\n        n_cards = sorted(n_cards)\n        for card in range(n):\n            n_cards[card] -= f_n[card]\n        if k >= len(n_cards):\n            break\n        for _ in range(k - len(n_cards)):\n            n_cards.append(0)\n    answer = 0\n    for card in range(n - 1):\n        answer += (n_cards[card] + 1)\n    answer += n_cards[-1]\n    return str(answer)\n"
    },
    {
        "number": 4408,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    cards = []\n    for _ in range(n):\n        cards.append(int(stdin))\n    j = 1\n    for i in range(1, k):\n        cards.sort(key=lambda x: x*j)\n        j += 1\n    \n    for i in cards:\n        print(j)\n        j = 0\n    return str(max(cards))"
    },
    {
        "number": 4408,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    cards = list(map(int, stdin.split()))\n    sorted_cards = sorted(cards, reverse=True)\n    cards = set(cards)\n    f_cards = []\n    h_cards = []\n    t = 1\n    # Use a heap to sort the cards\n    while cards:\n        for i in range(len(sorted_cards)):\n            if t >= k:\n                break\n            if cards[0] in sorted_cards:\n                if t + cards[0] in cards:\n                    cards.remove(cards[0])\n                    cards.add(cards[0])\n                    cards.remove(cards[0])\n                    cards.add(cards[0])\n                    break\n                else:\n                    cards.remove(cards[0])\n                    cards.add(cards[0])\n                    break\n            else:\n                t += cards[0]\n                break\n    # print(cards)\n    return str(sum(cards))\n\n\n\"\"\"\nHere are some tips for you.\n- You can use the standard input, or another input reader, to read lines.\n- You can also write the solution function in a loop, which doesn't need to be converted into a string.\n\"\"\""
    },
    {
        "number": 4409,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    answer = 0\n    for i in range(1, n):\n        t_p = i\n        i_p = a.index(i)\n        j_p = a.index(i-1)\n        if i!= 0 and a[j_p] - a[i_p] == 1:\n            j_p -= 1\n        if i!= n-1 and a[j_p] - a[i_p] == 1:\n            j_p -= 1\n        if j_p < 0:\n            j_p = n-1\n        if t_p == i-1:\n            answer += 2\n        elif t_p == i:\n            answer += 1\n        else:\n            answer += 1\n        if t_p == i+1:\n            answer += 1\n        elif t_p == i-1:\n            answer += 1\n        else:\n            answer += 1\n    return str(answer)"
    },
    {
        "number": 4409,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = [int(i) for i in stdin.strip().split()]\n    while a[0] < a[-1]:\n        a[0], a[-1] = a[-1], a[0]\n    x = [i - j for i, j in zip(a[:-1], a[1:])]\n    x = sorted(set(x), key=lambda x: x**2)\n    a.sort()\n    a =''.join(map(str, a))\n    k = ''\n    if len(x) > 1:\n        k = '1'+ str(len(x)) +''\n    for i in x:\n        if i in k:\n            k +=''\n    k = k[:-1]\n    print(k)\n    for _ in range(n):\n        print('2', a)\n        print(k)\n    return k\n"
    },
    {
        "number": 4409,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    n = len(a)\n    dp = [0 for _ in range(n+1)]\n    dp[0] = 1\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] > a[j]:\n                dp[i] += 1\n    return str(max(dp))\n-----Constraints-----\n1 <= n <= 2^30\n0 <= a[i] < 2^15\n\nTime Limit: 1sec\nMemory Limit: 16MB\n\n\nn = int(input())\na = list(map(int, input().split()))\na = [int(a[i]) for i in range(len(a))]\nprint(solution(input().rstrip()))"
    },
    {
        "number": 4409,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.split()))\n\n    # print(a)\n\n    # iterate through each element\n    count = 0\n    while count < n:\n        # increment count\n        if a[count] % 2 == 1:\n            # if there are still adjacent elements\n            if a[count] < 2:\n                # get next element and decrement\n                i = (a[count] - 2)\n                j = (a[count] - 1)\n                # update array\n                a[i], a[j] = a[j], a[i]\n                # increment count\n                count += 1\n            else:\n                i = (a[count] + 1) % n\n                # update\n                a[i] = a[count]\n                # decrement\n                a[count] -= 1\n        # if there are no adjacent elements\n        else:\n            # get next element and decrement\n            i = (a[count] + 2) % n\n            j = (a[count] - 1)\n            # update\n            a[i], a[j] = a[j], a[i]\n            # increment count\n            count += 1\n        # return\n        # print(a)\n        # print(count)\n    # return\n    # print(a)\n    return \"\".join(map(str, a))\n    # print(a)\n    # return a\n    # print(count)\n\nprint(solution(\"5\"))\nprint(solution(\"3\"))\nprint(solution(\"4\"))"
    },
    {
        "number": 4409,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int,stdin.split()))\n    if len(a) % 2!= 0:\n        print(1)\n        return\n    min_ops = 0\n    for i in range(0,len(a),2):\n        min_ops += a[i]*2 - a[i+1]\n    print(min_ops)\n    return str(min_ops)\n    \n    \n    \n"
    },
    {
        "number": 4409,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.strip().split()))\n    a = [abs(a[i] - a[i + 1]) for i in range(len(a) - 1)]\n    a.sort()\n    n = len(a)\n    a = [a[i] for i in range(n)]\n    for i in range(n - 2):\n        if abs(a[i + 1] - a[i]) > 1:\n            return 'NO'\n    \n    return 'YES'\n"
    },
    {
        "number": 4409,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 10:\n        return str(n)\n    \n    res = 1\n    a = [1]\n    for i in range(2, n + 1):\n        a.append(a[i-1] + a[i-2])\n    \n    a = a[::-1]\n    for i in range(n):\n        if a[i] % 10!= 0:\n            return str(i)\n        if a[i] % 10 == 0:\n            a[i] -= 10\n    \n    return str(res)\n\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= a[i] <= 10^5\n\nhurry\n"
    },
    {
        "number": 4409,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    a = list(map(int, a.split()))\n    a.sort()\n    print(a)\n    return '\\n'.join(map(' '.join, product(map(str, a))))\n"
    },
    {
        "number": 4409,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(i) for i in stdin.split()]\n    k = 0\n    for i in range(n):\n        k = k+1\n        for j in range(i+1, n):\n            if a[i] + a[j] == a[i] - a[j]:\n                k = k-1\n    print(k)\n    return str(k)\n\n\n-----Examples-----\nInput\n5\n2 4 6 6 6\n\nOutput\n2\n1 2 3 \n1 1 2 \n\nInput\n3\n2 8 10\n\nOutput\n2\n2 2 1 \n2 3 2 \n\nInput\n4\n1 1 1 1\n\nOutput\n0\ndef"
    },
    {
        "number": 4409,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    \n    # start at the last element of the array\n    for i in range(n-1, -1, -1):\n        # if the index is 1 then we're at the first element of the array, we need to put the index of the last element on the left side\n        if a[i] == 1:\n            a[i] = a[i-1]\n        # if the index is 2 then we're at the second element of the array\n        elif a[i] == 2:\n            # if the index is less than the number of elements, we need to subtract the number of elements left of the array\n            if a[i-1] > n:\n                a[i] = a[i-1] - n\n            # if the index is greater than the number of elements, we need to add the number of elements to the right of the array\n            else:\n                a[i] = n - a[i-1]\n        # if the index is 3 then we're at the third element of the array\n        elif a[i] == 3:\n            # if the index is less than the number of elements, we need to add the number of elements to the right of the array\n            if a[i-1] > n:\n                a[i] = n - a[i-1]\n            # if the index is greater than the number of elements, we need to subtract the number of elements from the left of the array\n            else:\n                a[i] = a[i-1] - n\n    \n    # the last element of the array\n    for i in range(n-2, -1, -1):\n        # if the index is 1 then we're at the last element of the array, we need to put the index of the last element on the right side\n        if a[i] == 1:\n            a[i] = a[i+1]\n        # if the index is 2 then we're at the second element of the array\n        elif a[i] == 2:\n            # if the index is less than the number of elements, we need to subtract the number of elements to the right of the array\n            if a[i+1] > n:\n                a[i] = a[i+1] - n\n            # if the index is greater than the number of elements, we need to add the number of elements to the left of the array\n            else:\n                a[i] = n - a[i+1]\n        # if the index is 3 then we're at the third element of the array\n        elif a[i] == 3:\n            # if the index is less than the number of elements, we need to subtract the number of elements from the left of the array\n            if a[i+1] > n:\n                a[i] = a[i+1] - n\n            # if the index is greater than the number of elements, we need to add the number of elements to the right of the array\n            else:\n                a[i] = a[i+1] - n\n    \n    # print the numbers from 0 to $n$\n    print(sum(a))\n    \n    # print the operations\n    for i in a:\n        print(i, end=\" \")\n    print()\n    \n    return \"\"\n"
    },
    {
        "number": 4410,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n == 0 or k > n:\n        return \"0\"\n    \n    table_count = {}\n    max_count = n\n\n    for table_index in range(n):\n        if table_index not in table_count:\n            table_count[table_index] = 0\n\n        table_count[table_index] += 1\n\n        if table_count[table_index] > max_count:\n            max_count = table_count[table_index]\n\n    s = \"\"\n    for table_index in range(n):\n        if table_index not in table_count:\n            s += \"0\"\n        else:\n            s += str(table_count[table_index])\n\n        if table_count[table_index] > k:\n            return \"0\"\n\n    return s\n    \n    \n\n    \n"
    },
    {
        "number": 4410,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.replace('0', '1').replace('1', '0')\n    \n    result = 0\n    for i in range(len(s)):\n        if s[i] == '0':\n            result += n - i\n        elif s[i] == '1':\n            result += n - i - 1\n    \n    return str(result)\n\n'''\n\ndef"
    },
    {
        "number": 4410,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.split()[1]\n    result = 0\n\n    for i in range(n):\n        t = int(s[i])\n        tmp = [int(x) for x in s[i + 1:i + k + 1]]\n        result = max(result, t - sum(tmp))\n\n    return str(result)\n"
    },
    {
        "number": 4410,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n  n = int(stdin.strip())\n  k = int(stdin.strip())\n  tables = list(map(int, stdin.strip().split()))\n  table_size = len(tables)\n  free_tables = []\n  for i in range(table_size):\n    if tables[i] == 0:\n      free_tables.append(i)\n  if k <= free_tables[0]:\n    return 0\n  for i in range(1, table_size):\n    if tables[i] == 0:\n      if tables[i-1] == 1:\n        if i + k <= table_size:\n          free_tables.append(i+k)\n      else:\n        free_tables.append(i+k)\n  free_tables.sort()\n  if len(free_tables) == table_size:\n    return 0\n  else:\n    return 1"
    },
    {
        "number": 4410,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\ndef"
    },
    {
        "number": 4410,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.split()\n    min_dist = 10 ** 9\n    table = []\n    for i in range(n):\n        table.append(int(s[i]))\n    table.sort()\n    for i in range(len(table) - 1):\n        min_dist = min(min_dist, table[i] - table[i + 1])\n    if min_dist >= k:\n        return \"0\"\n    answer = 0\n    for i in range(n):\n        if table[i] == 0:\n            continue\n        answer += 1\n        table[i] = 1\n        table[n - 1] = 0\n        for j in range(n - 1, -1, -1):\n            if table[j]!= 1:\n                table[i] = 1\n                table[j] = 0\n                break\n    return str(answer)\n\nInput\n6\n6 1\n100010\n6 2\n000000\n5 1\n10101\n3 1\n001\n2 2\n00\n1 1\n0\n\nOutput\n0\n1\n0\n1\n0\n\n\n\"\"\"\nfrom math import inf\n\n\ndef"
    },
    {
        "number": 4410,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    #\n    # 1. \uc785\ub825\ub41c \uc815\ubcf4\ub97c \uc774\uc6a9\ud558\uc5ec \ucd9c\ub825\ud558\ub294 \ud568\uc218\n    #\n    def printTables(tables):\n        for table in tables:\n            print(table)\n\n    #\n    # 2. \ucd9c\ub825\ub41c \uc815\ubcf4\ub97c \uc800\uc7a5\ud558\ub294 \ud568\uc218\n    #\n    def solution(tables, s):\n        #\n        # 1. \ud604\uc7ac \uc815\ubcf4\uac00 \uc785\ub825\ub418\uc5c8\uc744 \ub54c, \uc5b4\ub5a4 \ubc29\uc2dd\uc73c\ub85c \ud604\uc7ac \uc815\ubcf4\ub97c \ucd9c\ub825\ud558\uac8c \ub418\ub294\uc9c0 \ud310\ub2e8\ud558\uae30 \uc704\ud55c \ud568\uc218\n        #\n        def check(table):\n            #\n            # 1. \ud604\uc7ac \uc815\ubcf4\uac00 \uc785\ub825\ub418\uc9c0 \uc54a\uc558\uc744 \ub54c, \uc77c\uce58\ud558\ub294 \ud589\uc744 \uac80\uc0ac\ud55c\ub2e4.\n            #\n            if table == \"1\":\n                return True\n            else:\n                return False\n\n        #\n        # 2. \ud604\uc7ac \uc815\ubcf4\ub97c \ucd9c\ub825\ud558\uace0, \ubc18\ubcf5\ubb38\uc744 \uc885\ub8cc\ud558\ub294 \ud568\uc218\n        #\n        def set(tables):\n            #\n            # 1. \ud604\uc7ac \uc815\ubcf4\ub97c \ub2f4\uc744 \ubc30\uc5f4\uc744 \ud615\ubcc0\ud658\ud55c\ub2e4.\n            #\n            for table in tables:\n                if table == \"1\":\n                    return\n\n            #\n            # 2. \ubc18\ubcf5\ubb38\uc744 \ud0c8\ucd9c\ud55c\ub2e4.\n            #\n            return\n\n        #\n        # 3. \uc815\ubcf4\ub97c \ucd9c\ub825\ud558\uace0, \uc804\uccb4 \uc815\ubcf4\uac00 \uc785\ub825\ub41c \uc815\ubcf4\ub97c \ud310\ub2e8\ud55c\ub2e4.\n        #\n        def tableCheck(table, tables):\n            #\n            # 1. \uc815\ubcf4\ub97c \ud310\ub2e8\ud558\uae30 \uc704\ud55c \uc774\uc804 \uc815\ubcf4\ub97c \ud1b5\ud574\uc11c, \ud604\uc7ac \uc815\ubcf4\ub97c \ud310\ub2e8\ud55c\ub2e4.\n            #\n            for i in range(len(tables)):\n                if check(tables[i]):\n                    tables[i] = 1\n                    set(tables)\n\n            #\n            # 2. \uc815\ubcf4\ub97c \ud310\ub2e8\ud558\uae30 \uc704\ud55c \ud0c8\ucd9c \uc870\uac74\uc774 \ub9de\ub294\uc9c0 \ud310\ub2e8\ud558\uae30 \uc704\ud55c \uc815\ubcf4\ub97c \ud310\ub2e8\ud55c\ub2e4.\n            #\n            if check(table):\n                return False\n\n            #\n            # 3. \uc815\ubcf4\ub97c \ud310\ub2e8\ud558\uae30 \uc704\ud55c \uc815\ubcf4\ub97c \ud310\ub2e8\ud558\uc9c0 \uc54a\uc558\uc744 \ub54c, \ud604\uc7ac \uc815\ubcf4\uac00 \ud310\ub2e8\ub418\uc9c0 \uc54a\uc558\uc744 \ub54c, \uc218\ud589\ud560 \uc815\ubcf4\ub97c \ud310\ub2e8\ud558\uc9c0 \uc54a\ub294\ub2e4.\n            #\n            else:\n                return True\n\n        #\n        # 4. \uc815\ubcf4\ub97c \ud310\ub2e8\ud558\uae30 \uc704\ud55c \uc815\ubcf4\ub97c \ud310\ub2e8\ud558\uc9c0 \uc54a\uc558\uc744 \ub54c, \uc218\ud589\ud560 \uc815\ubcf4\ub97c \ud310\ub2e8\ud558\uc9c0 \uc54a\ub294\ub2e4.\n        #\n        def read(tables):\n            #\n            # 1. \uc5f4\uc758 \uac1c\uc218\ub97c \uc138\ub85c \ud06c\uae30\ub85c \ud655\uc778\ud55c\ub2e4.\n            #\n            tables.append(s[:2"
    },
    {
        "number": 4410,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    table = [0] * n\n    for _ in range(n):\n        table[_] = int(stdin[2 * _])\n    \n    def dfs(table, k):\n        for i in range(n):\n            if k <= table[i] <= (2 ** (k - 1) - 1):\n                table[i] = table[i] + 1\n                if table[i] > k:\n                    table[i] = 0\n        return table\n        \n    def free(table, k):\n        for i in range(n):\n            if table[i] <= k:\n                table[i] = table[i] + 1\n                if table[i] > k:\n                    table[i] = 0\n        return table\n    \n    def check(table, k):\n        for i in range(n):\n            if table[i] == 0:\n                return False\n            elif table[i] > k:\n                return False\n        return True\n    \n    def answer(table):\n        free_table = free(table, k)\n        if check(free_table, k) == True:\n            return 1\n        else:\n            return 0\n    \n    return answer(table)\n\nRuntime: 24 ms, faster than 71.16% of Python3 online submissions for Table Number of Free Tables.\nMemory Usage: 14.3 MB, less than 79.32% of Python3 online submissions for Table Number of Free Tables.\n"
    },
    {
        "number": 4410,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n * (n+1) // 2 <= k * (k+1) <= n * (n+1):\n        print(0)\n        return\n    s = stdin\n    for i in range(1, n+1):\n        s = s[:-1] + \"1\"\n    if s.count(\"1\") < k:\n        print(0)\n        return\n    print(n // (n//k) + 2)\n    return\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= k <= n\ns.length >= 2\ns[i] = \"0\" or \"1\"\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4410,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n  n, k = map(int, stdin.split())\n  for i in range(n):\n    for j in range(i+1, n):\n      if stdin[i] == \"1\":\n        for k in range(1, k+1):\n          if stdin[j] == \"0\":\n            return (2 * k) - 2\n  return 0\n\nThis is not the correct way to solve the problem. It is a recursive implementation.\n\nThe only way to solve this problem is to find the minimum distance of free tables that you can occupy.\n\nThis one has a linear runtime complexity of O(n) (because of the recursive).\n\nBut the recursive runtime complexity is linear because of the recursive calls.\n\nThis can be improved, but the runtime is O(n log n) (n being the number of free tables in the restaurant).\n\n-----Note-----\n\nIn the first test case, the answer is $2$, since you cannot take any free table without violating the rules of the restaurant.\n\nIn the second test case, you cannot take any free table without violating the rules of the restaurant.\n\nIn the third test case, you cannot take any free table without violating the rules of the restaurant.\n\n----Example-----\nInput\n6\n6 1\n100010\n6 2\n000000\n5 1\n10101\n3 1\n001\n2 2\n00\n1 1\n0\n\nOutput\n1\n2\n0\n1\n1\n\n\n\n-----Note-----\n\nThe first test case is explained in the statement.\n\nIn the second test case, the answer is $2$, since you cannot take any free table without violating the rules of the restaurant.\n\nIn the third test case, you cannot take any free table without violating the rules of the restaurant.\n\nSince you can take a free table if the first two tables are free and there are no other free tables, this is not the correct way of solving the problem.\n\nThe second test case is explained in the statement.\n\nIn the third test case, the answer is $0$, since you can take any free table without violating the rules of the restaurant.\n\n-----Example-----\nInput\n6\n6 1\n100010\n6 2\n000000\n5 1\n10101\n3 1\n001\n2 2\n00\n1 1\n0\n\nOutput\n1\n2\n0\n1\n1\n\n\n\n-----Note-----\n\nThis one is the correct way to solve the problem, since you can take any free table without violating the rules of the restaurant.\n\n\"\"\"\n"
    },
    {
        "number": 4411,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    segments = [list(map(int, input().split())) for _ in range(n)]\n    p1, p2 = [], []\n    for i in range(n - 2):\n        p1.append(i + 2)\n        p2.append(i + 1)\n    for segment in segments:\n        if segment[0] < segment[1]:\n            p2.remove(segment[0])\n        else:\n            p1.remove(segment[1])\n    p1.append(n)\n    p2.sort()\n    print(p2[k - 1] - p1[k])\n    return '\\n'.join(map(str, p1 + p2[:k]))\n\n-----My Solution-----\nimport sys\ndef"
    },
    {
        "number": 4411,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    segments = [map(int, stdin.split())]\n    while n > k:\n        m = k // n\n        k = k % n\n        segments.append(list(map(lambda x: x + m, map(int, stdin.split()))))\n    segments.sort()\n    \n    a = 0\n    for segment in segments:\n        if sum(segment) > a:\n            a = sum(segment)\n    return str(a)\n\nn, k = [int(i) for i in input().split()]\nsegments = [map(int, input().split())]\n\nprint(solution(n, k))\n"
    },
    {
        "number": 4411,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    st = list(map(int, stdin.split()))\n\n    removed_s = 0\n    removed_s_2 = 0\n    for i in range(n):\n        if (st[i] - removed_s) % k == 0:\n            removed_s = st[i]\n            removed_s_2 += 1\n        else:\n            removed_s -= 1\n            removed_s_2 -= 1\n\n    if removed_s_2 == 0:\n        return \"1\" * removed_s_2\n    else:\n        return str(removed_s_2)\n\"\"\"\n\ndef"
    },
    {
        "number": 4411,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    segments = []\n    for i in range(n):\n        segments.append(list(map(int, input().split())))\n    \n    #print(segments)\n    #print(*segments)\n    #print(max(segments))\n    #print(segments[0])\n    \n    # Remove segments that are too small\n    #print(*segments)\n    for i in range(n):\n        for j in range(i+1, n):\n            if segments[i][0] < segments[j][0] and segments[i][1] < segments[j][1]:\n                #print(i, j)\n                for k in range(len(segments[i])):\n                    #print(k, segments[i][k])\n                    if segments[i][k] == segments[j][k]:\n                        #print(j, segments[i][k], k)\n                        segments[i][k] = segments[i][k]\n                        segments[j][k] = segments[j][k]\n                        break\n    #print(*segments)\n    #print(*segments)\n    #print(len(segments))\n    \n    # Remove segments that are too large\n    for i in range(n):\n        for j in range(i+1, n):\n            if segments[i][0] < segments[j][0] and segments[i][1] > segments[j][1]:\n                #print(i, j)\n                for k in range(len(segments[i])):\n                    #print(k, segments[i][k])\n                    if segments[i][k] == segments[j][k]:\n                        #print(j, segments[i][k], k)\n                        segments[i][k] = segments[i][k]\n                        segments[j][k] = segments[j][k]\n                        break\n    \n    # Remove segments that are too big\n    #print(*segments)\n    #print(*segments)\n    #print(len(segments))\n    \n    # Remove segments that are too big\n    for i in range(n):\n        for j in range(i+1, n):\n            if segments[i][0] < segments[j][0] and segments[i][1] > segments[j][1]:\n                #print(i, j)\n                for k in range(len(segments[i])):\n                    #print(k, segments[i][k])\n                    if segments[i][k] == segments[j][k]:\n                        #print(j, segments[i][k], k)\n                        segments[i][k] = segments[i][k]\n                        segments[j][k] = segments[j][k]\n                        break\n    \n    #print(*segments)\n    #print(*segments)\n    \n    # Remove segments that are too small\n    #print(*segments)\n    #print(*segments)\n    #print(max(segments))\n    #print(segments[0])\n    \n    # Remove segments that are too small\n    #print(*segments)\n    #print(*segments)\n    #print(segments[0])\n    \n    # Remove segments that are too small\n    #print(*segments)\n    #print(*segments)\n    #print(segments[0][0])\n    \n    # Remove segments that are too small\n    #print(*segments)\n    #print(*segments)\n    #print(segments[0][1])\n    \n    # Remove segments that are too small\n    #print(*segments)\n    #print(*segments)\n    #print(segments[0][2])\n    \n    # Remove segments that are too small\n    #print(*segments)\n    #print(*segments)\n    #print(segments[0][3])\n    \n    # Remove segments that are too small\n    #print(*segments)\n    #print(*segments)\n    #print(segments[0][4])\n    \n    # Remove segments that are too small\n    #print(*segments)\n    #print(*segments)\n    #print(segments[0][5])\n    \n    # Remove segments that are too small\n    #print(*segments)\n    #print(*segments)\n    #print(segments[0][6])\n    \n    # Remove segments that are too small\n    #print(*segments)\n    #print(*segments)\n    #print(segments[0][7])\n    \n    # Remove segments that are too small\n    #print(*segments)\n    #print(*segments)\n    #print(segments[0][8])\n    \n    # Remove segments that are too small\n    #print(*segments)\n    #print(*segments)\n    #print(segments[0][9])\n    \n    # Remove segments that are too small\n    #print(*segments)\n    #print(*segments)\n    #print(segments[0][10])\n    \n    \n    # Remove segments that are too small\n    #print(*segments)\n    #print(*segments)\n    #print(segments[0][11])\n    \n    \n    # Remove segments that are too small\n    #print(*segments)\n    #print(*segments)\n    #print(segments[0][12])\n    \n    \n    # Remove segments that are too small\n    #print(*segments)\n    #print(*segments)\n    #print(segments[0][13])\n    \n    # Remove segments that are too small\n    #print(*segments)\n    #print(*segments)\n    #print(segments[0][14])\n    \n    \n    # Remove segments that are too small\n    #print(*segments)\n    #print(*segments)\n    #print(segments[0][15])\n    \n    # Remove segments that are too small\n    #print(*segments)\n    #print(*segments)\n    #print(segments[0][16])\n    \n    # Remove segments that are too small\n    #print(*segments)\n    #print(*segments)\n    #print(segments[0][17])\n    \n    \n    # Remove segments that are too small\n    #print(*segments)\n    #print(*segments)\n    #print(segments[0][18])\n    \n    \n    # Remove segments that are too small\n    #print(*segments)\n    #print(*segments)\n    #print(segments[0][19])\n    \n    \n"
    },
    {
        "number": 4411,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    segments = map(int, stdin.split())\n    p1, p2 = 0, 0\n    for s in segments:\n        p1, p2 = p2, p1+s\n    k = min(k, (p2-p1)//n)\n    if k>0:\n        p1 = n-k\n    s = [0]*(n+1)\n    j = 0\n    for i in range(1, n+1):\n        j = i-p1\n        while j>=0 and s[j]<s[i]:\n            j = j-1\n        s[i] = s[j]+1\n    for i in range(n):\n        print(s[i], end=' ')\n    print()\n    return '{0}'.format(k)"
    },
    {
        "number": 4411,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, k = map(int, stdin.split())\n    lst = list(map(int, stdin.split()))\n    lst = sorted(lst, reverse=True)\n    for i in range(1, len(lst)):\n        if lst[i] <= lst[i - 1]:\n            pass\n        else:\n            lst[i - 1], lst[i] = lst[i], lst[i - 1]\n    for j in range(k, 0, -1):\n        lst = list(filter(lambda x: x < j, lst))\n    return str(len(lst))\n"
    },
    {
        "number": 4411,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    print(n, k)\n    p1 = stdin.split()\n    print(p1)\n    \n    l1 = []\n    l2 = []\n    for i in p1:\n        x = i.split()\n        l1.append(int(x[0]))\n        l2.append(int(x[1]))\n    l2.sort()\n    print(l1, l2)\n    \n    if len(l1) > len(l2):\n        p1 = l1\n        l1 = l2\n        l2 = p1\n        \n    k = k % len(l1)\n    print(k)\n    print(l1)\n    print(l2)\n    \n    return str(len(l1) - len(l2)) +'' + str(l1[k] - l2[k]) +''\n\n-----------------------------\n\ndef"
    },
    {
        "number": 4411,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(k*(k+1)/2) + str(n*(k+1)/2)"
    },
    {
        "number": 4411,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n,k=map(int,stdin.strip().split())\n    if n<k:\n        print(k-n)\n    else:\n        p=set()\n        l=[i for i in range(1,n+1)]\n        print(l)\n        k=k-len(l)\n        print(k)\n        if k>0:\n            q=set()\n            print(q)\n            for i in l:\n                if i<k:\n                    q.add(i)\n                if i>k:\n                    p.remove(i)\n            print(p)\n            print(q)\n            for i in p:\n                print(i)\n        else:\n            print(\"no\")\n"
    },
    {
        "number": 4411,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    k,n = map(int, stdin.split())\n    l, r = map(int, stdin.split())\n    #print(l,r)\n    #print(n,k)\n    \n    p = []\n    for i in range(n):\n        j = [int(j) for j in stdin.split() if int(j) <= i < int(j) + k]\n        if not j:\n            break\n        p.extend(j)\n    #print(p)\n    #print(len(p))\n    if len(p) < k:\n        print(0)\n    else:\n        print(min(p))\n        for i in range(n-k+1):\n            print(p.index(p[i+k])+1,p.index(p[i])+1,p[i+k+1])\n\n-----Sample Input-----"
    },
    {
        "number": 4412,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = [list(map(int, stdin.splitlines()[i].split())) for i in range(n)]\n    prettiness = [0 for i in range(n)]\n    prettiness[0] = a[0][0]\n    prettiness[1] = max(a[0][0], a[0][1], a[0][2], a[1][2])\n    for i in range(2, n):\n        prettiness[i] = max(prettiness[i - 1], a[i][0] + a[i - 1][0], a[i][1] + a[i - 1][1], a[i][2] + a[i - 1][2])\n    for i in range(n):\n        for j in range(n):\n            if j >= i:\n                prettiness[i] = max(prettiness[i], a[j][i] + a[j][i + 1], a[j][i + 2], a[j][i + 3])\n    return str(prettiness[n - 1])\n"
    },
    {
        "number": 4412,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip().split()[0])\n    a = [int(s) for s in stdin.split()[1:]]\n    max_p = 0\n    count = 0\n    for i in range(1, n):\n        for j in range(i+1, n+1):\n            for k in range(j+1, n+1):\n                pref = 0\n                for l in range(0, n+1):\n                    pref += a[l] / (j-i+1)\n                if pref > max_p:\n                    max_p = pref\n                    count = i+1\n    return str(max_p) +'' + str(count)\n\n\n\n-----Algorithm-----\n\nThis code is inspired by Algorithm 5.1 from https://rosettacode.org/wiki/Solve_the_best_problem_for_you_with_a_solution_tree.\n"
    },
    {
        "number": 4412,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.split()[0])\n    n = int(stdin.split()[1])\n    a = [0] * q\n    b = [0] * q\n    for _ in range(n):\n        a[int(stdin.split()[2][2]) - 1], a[int(stdin.split()[3][2]) - 1] = map(int, stdin.split()[4].split())\n    for _ in range(q):\n        b[int(stdin.split()[1][2]) - 1], b[int(stdin.split()[2][2]) - 1] = map(int, stdin.split()[3].split())\n    res = 0\n    for i in range(q):\n        res = max(res, a[i] + b[i])\n    return str(res)\n\n\n-----Constraints-----\n1 \u2264 n \u2264 100\n1 \u2264 a_1, a_2, a_3, a_4 \u2264 n\n2 \u2264 b_1, b_2, b_3, b_4 \u2264 n\n\n-----Time Complexity-----\nO(n log(n)) for each query.\n\nO(n) for counting the problems and then sorting the array in lexicographic order.\n\"\"\"\n\n\nclass Solution:\n    def solution(self, stdin: str, q: int) -> str:\n        n = int(stdin.split()[0])\n        a = [0] * q\n        b = [0] * q\n        for _ in range(n):\n            a[int(stdin.split()[2][2]) - 1], a[int(stdin.split()[3][2]) - 1] = map(int, stdin.split()[4].split())\n        for _ in range(q):\n            b[int(stdin.split()[1][2]) - 1], b[int(stdin.split()[2][2]) - 1] = map(int, stdin.split()[3].split())\n        a = sorted(a)\n        b = sorted(b)\n        ans = 0\n        for i in range(q):\n            ans = max(ans, a[i] + b[i])\n        return str(ans)\n"
    },
    {
        "number": 4412,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, q, *p = map(int, stdin.split())\n    prefix = \"\".join(sorted(str(x) for x in p))\n    answer = 0\n    for i in range(q):\n        answer += prefix.count('1') + prefix.count('2')\n    print(answer)\n    return str(answer)\n\n\n-----Input-----\n\nThe first line of the input contains one integer $q$ ($1 \\le q \\le 2 \\cdot 10^5$) \u2014 the number of queries.\n\nThe first line of the query contains one integer $n$ ($1 \\le n \\le 2 \\cdot 10^5$), representing the number of problems.\n\nThe second line of the query contains $n$ integers $a_1, a_2, \\dots, a_n$ ($2 \\le a_i \\le 2 \\cdot 10^5$), where $a_i$ is the prettiness of the $i$-th problem.\n\nIt is guaranteed that the sum of $n$ over all queries does not exceed $2 \\cdot 10^5$.\n\n\n-----Output-----\n\nFor each query print one integer \u2014 the maximum possible cumulative prettiness of the contest composed of at most three problems from the given pool of problems in the query.\n\n\n-----Example-----\nInput\n3\n4\n5 6 15 30\n4\n10 6 30 15\n3\n3 4 6\n\nOutput\n30\n31\n10\ndef"
    },
    {
        "number": 4412,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    def number(num):\n        return num if int(num) <= 1000 else \"\".join(map(str, sorted(str(int(num)), reverse=True)))\n    \n    n = int(input())\n    a = [int(i) for i in input().strip().split()]\n    if len(a) >= 3:\n        a.sort(key=number)\n        a = sum(a[:3])\n    else:\n        a = a[:3]\n    \n    for i in range(1, n):\n        a += number(input().strip())\n    \n    return str(a)\n\ndef"
    },
    {
        "number": 4412,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.splitlines()[0])\n    n = int(stdin.splitlines()[1])\n    num = []\n    for i in range(q):\n        a, b = map(int, stdin.splitlines()[i + 1].split())\n        num.append([a, b])\n    for i in range(q):\n        a, b = num[i]\n        num[i] = [a * a, b * b]\n    x, y, z = 0, 0, 0\n    for i in range(q):\n        a, b = num[i]\n        if a > y:\n            x += a\n            y = a\n        if b > z:\n            z += b\n            z = b\n    return str(x + y + z)\n\n-----Examples-----\nInput\n2\n3\n10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\nOutput\n24\n25\n25\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n214\n215\n216\n217\n218\n219\n220\n221\n222\n223\n224\n225\n226\n227\n228\n229\n230\n231\n232\n233\n234\n235\n236\n237\n238\n239\n240\n241\n242\n243\n244\n245\n246\n247\n248\n249\n250\n251\n252\n253\n254\n255\n256\n257\n258\n259\n260\n261\n262\n263\n264\n265\n266\n267\n268\n269\n270\n271\n272\n273\n274\n275\n276\n277\n278\n279\n280\n281\n282\n283\n284\n285\n286\n287\n288\n289\n290\n291\n292\n293\n294\n295\n296\n297\n298\n299\n300\n301\n302\n303\n304\n305\n306\n307\n308\n309\n310\n311\n312\n313\n314\n315\n316\n317\n318\n319\n320\n321\n322\n323\n324\n325\n326\n327\n328\n329\n330\n331\n332\n333\n334\n335\n336\n337\n338\n339\n340\n341\n342\n343\n344\n345\n346\n347\n348\n349\n350\n351\n352\n353\n354\n355\n356\n357\n358\n359\n360\n361\n362\n363\n364\n365\n366\n367\n368\n369\n370\n371\n372\n373\n374\n375\n376\n377\n378\n379\n380\n381\n382\n383\n384\n385\n386\n387\n388\n389\n390\n391\n392\n393\n394\n395\n396\n397\n398\n399\n400\n401\n402\n403\n404\n405\n406\n407\n408\n409\n410\n411\n412\n413\n414\n415\n416\n417\n418\n419\n420\n421\n422\n423\n424\n425\n426\n427\n428\n429\n430\n431\n432\n433\n434\n435\n436\n437\n438\n439\n440\n441\n442\n443\n444\n445\n446\n447\n448\n449\n450\n451\n452\n453\n454\n455\n456\n457\n458\n459\n460\n461\n462\n463\n464\n465\n466\n467\n468\n469\n470\n471\n472\n473\n474\n475\n476\n477\n478\n479\n480\n481\n482\n483\n484\n485\n486\n487\n488\n489\n490\n491\n492\n493\n494\n495\n496\n497\n498\n499\n500\n501\n502\n503\n504\n505\n506\n507\n508\n509\n510\n511\n512\n513\n514\n515\n516\n517\n518\n519\n520\n521\n522\n523\n524\n525\n526\n527\n528\n529\n530\n531\n532\n533\n534\n535\n536\n537\n538\n539\n540\n541\n542\n543\n544\n545\n546\n547\n548\n549\n550\n551\n552\n553\n554\n555\n556\n557\n558\n559\n560\n561\n562\n563\n564\n565\n566\n567\n568\n569\n570\n571\n572\n573\n574\n575\n576\n577\n578\n579\n580\n581\n582\n583\n584\n585\n586\n587\n588\n589\n590\n591\n592\n593\n594\n595\n596\n597\n598\n599\n600\n601\n602\n603\n604\n605\n606\n607\n608\n609\n610\n611\n612\n613\n614\n615\n616\n617\n618\n619\n620\n621\n622\n623\n624\n625\n626\n627\n628"
    },
    {
        "number": 4412,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.strip().split(' ')[0])\n    n = int(stdin.strip().split(' ')[1])\n    a = list(map(int, stdin.strip().split(' ')))\n    a.sort()\n    a.reverse()\n    for i in range(q):\n        a.remove(a[0])\n        a.remove(a[n-1])\n        n -= 1\n    for i in range(n):\n        print(a[i], end=' ')\n    return str(a[n-1])\n\n\n-----Constraints-----\n1 <= q <= 10^5\n1 <= n <= 2 * 10^5\n0 <= a[i] <= 10^6\n\n\n-----Time complexity-----\nO(n^2) because each question is solved in O(n^2) time complexity.\nO(n) because there are 3 reasons, namely:\n    - The amount of problems is limited by the given pool, and the fastest one is provided by the given problem pool.\n    - The average of the optimal result is guaranteed by the given pool, and the answer may be of the same type as the given pool.\n    - The average result is not guaranteed to be of the same type, because the same type will be allocated in the same thread for each solution.\n\nO(n) because the answer is always a string, and the sum of problems is guaranteed by the given problem pool.\nO(n) because for each query, the time complexity of the answer is constant, and the sum of problems is never changed, since we use the same formula for answer.\nO(n^2) because the time complexity of the solution is constant, and there are three reasons for using it:\n    - There are no problems, and the average result is always a string.\n    - The average result is never changed, since the average result is always a string.\n    - The average result is always a string, because the sum of problems is always a string.\n    - There are no problems, and the solution is always a string.\n    - The solution is always a string, because the average result is always a string.\nO(n) because for each query, the time complexity of the answer is constant, and the sum of problems is never changed, since we use the same formula for answer.\nO(n^2) because the time complexity of the solution is constant, and there are three reasons for using it:\n    - There are no problems, and the average result is always a string.\n    - The average result is never changed, since the average result is always a string.\n    - The average result is always a string, because the sum of problems is always a string.\n    - There are no problems, and the solution is always a string.\n    - The solution is always a string, because the average result is always a string.\nO(n) because for each query, the time complexity of the answer is constant, and the sum of problems is never changed, since we use the same formula for answer.\nO(n^2) because the time complexity of the solution is constant, and there are three reasons for using it:\n    - There are no problems, and the average result is always a string.\n    - The average result is never changed, since the average result is always a string.\n    - The average result is always a string, because the sum of problems is always a string.\n    - There are no problems, and the solution is always a string.\n    - The solution is always a string, because the average result is always a string.\n    - The solution is always a string, because the sum of problems is always a string.\nO(n^2) because the time complexity of the solution is constant, and there are three reasons for using it:\n    - There are no problems, and the average result is always a string.\n    - The average result is never changed, since the average result is always a string.\n    - The average result is always a string, because the sum of problems is always a string.\n    - There are no problems, and the solution is always a string.\n    - The solution is always a string, because the average result is always a string.\n    - The solution is always a string, because the sum of problems is always a string.\nO(n^2) because the time complexity of the solution is constant, and there are three reasons for using it:\n    - There are no problems, and the average result is always a string.\n    - The average result is never changed, since the average result is always a string.\n    - The average result is always a string, because the sum of problems is always a string.\n    - There are no problems, and the solution is always a string.\n    - The solution is always a string, because the average result is always a string.\n    - The solution is always a string, because the sum of problems is always a string.\n    - The solution is always a string, because the average result is always a string.\n    - The solution is always a string, because the sum of problems is always a string.\n    - There are no problems, and the solution is always a string.\n    - The solution is always a string, because the average result is always a string.\n    - The solution is always a string, because the sum of problems is always a string.\n    - There are no problems, and the solution is always a string.\n    - The solution is always a string, because the average result is always a string.\n    - The solution is always a string, because the sum of problems is always a string.\n    - There are no problems, and the solution is always a string.\n    - The solution is always a string, because the average result is always a string.\n    - The solution is always a string, because the sum of problems is always a string.\n    - There are no problems, and the solution is always a string.\n    - The solution is always a string, because the average result is always a string.\n    - The solution is always a string, because the sum of problems is always a string.\n    - There are no problems, and the solution is always a string.\n    - The solution is always a string, because the average result is always a string.\n    - The solution is always a string, because the sum of problems is always a string.\n    - There are no problems, and the solution is always a string.\n    - The solution is always a string, because the average result is always a string.\n    - The solution is always a string, because the sum of problems is always a string.\n    - There are no problems, and the solution is always a string.\n    - The solution is always a string, because the average result is always a"
    },
    {
        "number": 4412,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.strip().split()[0])\n    n = int(stdin.strip().split()[1])\n    a = [int(i) for i in stdin.strip().split()[2:]]\n    result = []\n    for i in range(q):\n        a = a[:n] + a[n:]\n        result.append(a)\n    print(*result)\n    return \"\".join(map(str, result))"
    },
    {
        "number": 4412,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    from sys import stdin\n    \n    n = int(stdin.readline().rstrip())\n    a = [list(map(int,stdin.readline().rstrip().split())) for _ in range(n)]\n    a = [list(filter(lambda x: x!=0,x)) for x in a]\n    \n    if n==1:\n        print(a[0][0])\n        return\n    \n    if a[0][0]==a[1][0] and a[1][0]==a[2][0] and a[0][0]==a[2][0]:\n        print(a[0][0])\n        return\n    \n    if n==2:\n        print(a[0][0]*a[1][0]*a[2][0])\n        return\n    \n    if a[0][0]==a[1][0] or a[1][0]==a[2][0]:\n        print(a[0][0]*a[1][0]*a[2][0])\n        return\n    \n    if n==3:\n        print(a[0][0]+a[1][0]+a[2][0])\n        return\n\n\n    a.sort()\n    for i in range(n-3):\n        print(a[i][0]+a[i+1][0]+a[i+2][0]+a[i+3][0])\n        if a[i][0]+a[i+1][0]+a[i+2][0]+a[i+3][0]>a[i+3][0]:\n            return\n        if a[i][1]+a[i+1][1]+a[i+2][1]+a[i+3][1]>a[i+3][1]:\n            return\n    print(a[n-3][0])\n    return\n\nsolution(stdin)\n"
    },
    {
        "number": 4412,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    a, b, c = map(int, stdin.split())\n    \n    ans = 0\n    \n    def compute(a, b, c, k):\n        nonlocal ans\n        \n        ans = max(ans, abs(a - k) + abs(b - k) + abs(c - k))\n        return\n        \n    for i in range(1, q):\n        a, b, c, d = map(int, input().split())\n        \n        if a + b + c + d >= 2 * n:\n            continue\n        \n        for k in range(1, n // 2 + 1):\n            compute(a, b, c, k)\n            compute(a, c, b, k)\n            compute(a, b, c, k)\n            compute(b, a, c, k)\n            compute(b, c, a, k)\n            compute(b, c, a, k)\n            compute(b, c, a, k)\n        \n    return str(ans)\n\n-----Constraints-----\n1 \u2264 q \u2264 1,000,000,000\n1 \u2264 n \u2264 10^5\n1 \u2264 a_1, a_2, \\dots, a_n \u2264 10^5\n1 \u2264 b, c, d \u2264 10^5\n\nTime Limit: 20 minutes\n\nExample Input\n3\n4\n5 6 15 30\n4\n10 6 30 15\n3\n3 4 6\n\nExample Output\n30\n31\n10\n\ndef"
    },
    {
        "number": 4413,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a_sorted = sorted(a)\n    min_q = q\n    for i in range(1,n):\n        left = a_sorted[i-1]\n        right = a_sorted[i]\n        # print(left, right)\n        if right - left < min_q:\n            min_q = right - left\n            # print(min_q)\n    answer = '1'\n    if min_q < q:\n        answer = str(min_q) + ',' + answer\n    return answer\n"
    },
    {
        "number": 4413,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    n = len(a)\n    if n < 2:\n        return \"0\"\n    \n    def possible_team(a, i):\n        ret = []\n        for j in range(i):\n            if a[j]!= a[j+1]:\n                ret.append(j+1)\n            else:\n                ret.append(a[j+1])\n        return ret\n\n    def is_team_constraint(i):\n        team_1 = possible_team(a, i)\n        team_2 = possible_team(a, i+1)\n        if len(team_1) < len(team_2):\n            return False\n        else:\n            return True\n\n    def team_constraint(i):\n        team = list(set(team_constraint(i)))\n        if len(team) == 1:\n            return team[0]\n        else:\n            return team[0]\n\n    team = []\n    for i in range(n):\n        team.append(team_constraint(i))\n\n    team = [i for i in team if is_team_constraint(i)]\n    team.sort()\n    team = team[0:n//2]\n\n    return \",\".join([str(i) for i in team])\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4413,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n    if n == 1:\n        return str(a[0])\n    if n == 2:\n        return str(sum(a))\n    \n    \n    \n"
    },
    {
        "number": 4413,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    m, n = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    answer = 1\n    # print(a)\n    for i in range(len(a)):\n        while len(set(a[i+1:])) > 1:\n            a[i+1:] = a[i+1:] + a[i+1:]\n            answer += 1\n    # print(a)\n    return str(answer)\n\nIf you are working on the question of division. It's not necessary to split the array into two teams.\n\nThis is done through a Divide and Conquer algorithm.\n\"\"\"\n"
    },
    {
        "number": 4413,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = list(map(int, stdin.split()))\n    m = 1\n    for n in range(1, int(math.sqrt(a+b))+1):\n        if a%n == 0 and b%n == 0:\n            m = n\n            break\n    if a < b:\n        m = max(m, int(math.sqrt(a+b)//m)+1)\n    else:\n        m = max(m, int(math.sqrt(b+a)//m)+1)\n    if a < b:\n        while a % m == 0 and b % m == 0:\n            a //= m\n            b //= m\n    return str(int(math.sqrt(a+b)//m))\n\nAns = Solution()\nwhile 1:\n    n = int(input())\n    if n == 0:\n        break\n    print(Ans(n))"
    },
    {
        "number": 4413,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = [int(x) for x in stdin.strip().split()]\n    a.sort()\n    comb = 2 ** n - 1\n    total = 2 ** (n - 1) * comb\n    total -= comb\n    for i in range(1, n):\n        total -= comb\n        total -= comb\n        total += comb - 2 * i - 1\n    return str(total)\n'''\nimport sys\nfrom collections import defaultdict\n\ndef"
    },
    {
        "number": 4413,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n,q=map(int,stdin.split())\n    a=list(map(int,stdin.split()))\n    if n<=q:\n        return '\\n'.join(map(str,a))\n    for _ in range(q-1):\n        a.append(a[0]+a[-1])\n    a.sort()\n    a=list(map(lambda x: x-1,a))\n    if n%2==1:\n        return '\\n'.join(map(str,a))\n    else:\n        return '\\n'.join(map(str,a[::-1]))\n\n\n\n-----Example-----\n\nInput:\n3\n3\n5\n1 6\n10 20 30 50 40 100 100\n4\n1\n1\n2\n3\n2\n\nOutput:\n3\n1\n2\n3\n\n\n\n-----Constraints-----\n\n1 <= n <= 2^10\n1 <= q <= 1000\na = 2 <= a_i <= 100\na_i = 2 \\le a_i \\le 100\n0 <= a_i \\le 100\na_i!= a_i + 1\n\n\"\"\""
    },
    {
        "number": 4413,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip().split()[1])\n    a = []\n    for i in range(n):\n        a.append(int(stdin.strip().split()[i+1]))\n    q = int(stdin.strip().split()[2])\n    teams = [[] for _ in range(q)]\n    for i in range(q):\n        teams[i].append(a[i])\n    for i in range(q):\n        for j in range(i+1, q):\n            if len(set(teams[i]) & set(teams[j])) == 1:\n                return '1'\n    return '2'\n\ndef"
    },
    {
        "number": 4413,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\ndef"
    },
    {
        "number": 4413,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    answer = 1001\n    for _ in range(int(stdin)):\n        students = [int(i) for i in input().split()]\n        a = students[0]\n        b = students[1]\n        if a == b:\n            continue\n        if len(set(students))!= 3:\n            continue\n        answer = min(answer, 2)\n    return str(answer)"
    },
    {
        "number": 4414,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, s, q = map(int, stdin.split())\n    val_n, val_s = map(int, stdin.split())\n    a, b, n, s = map(int, stdin.split())\n    \n    val_a, val_s, val_n = map(int, stdin.split())\n    \n    # print(n, s, val_n, val_s)\n    # print(a, b, n, s)\n    # print(val_n, val_s, val_a, val_b)\n    \n    # print(\"{}\".format(solution(str(n))))\n    # print(\"{}\".format(solution(str(a))))\n    # print(\"{}\".format(solution(str(b))))\n    \n    def solve(n, s, a, b, val_n, val_s, val_a, val_b):\n        q = 0\n        # print(n, s, a, b, val_n, val_s, val_a, val_b)\n        # print(\"{}\".format(solution(str(n))))\n        # print(\"{}\".format(solution(str(a))))\n        # print(\"{}\".format(solution(str(b))))\n        \n        while n >= s:\n            \n            # print(n, s, a, b, val_n, val_s, val_a, val_b)\n            # print(\"{}\".format(solution(str(n))))\n            # print(\"{}\".format(solution(str(a))))\n            # print(\"{}\".format(solution(str(b))))\n            \n            if val_n * val_s <= val_a * val_b:\n                n -= val_a\n                q += 1\n            else:\n                s -= val_b\n                q += 1\n        \n        return q\n    \n    # print(solve(n, s, a, b, val_n, val_s, val_a, val_b))\n    \n    \n    \n    answer = False\n    \n    \n    # 1.\n    # if val_n * val_s <= val_a * val_b:\n    #     answer = \"YES\"\n    # else:\n    #     answer = \"NO\"\n    \n    # print(answer)\n    \n    # 2.\n    # if val_n * val_s <= val_a * val_b:\n    #     answer = \"YES\"\n    # else:\n    #     answer = \"NO\"\n    \n    # print(answer)\n    \n    # 3.\n    # if val_n * val_s <= val_a * val_b:\n    #     answer = \"YES\"\n    # else:\n    #     answer = \"NO\"\n    \n    # print(answer)\n    \n    # 4.\n    # if val_n * val_s <= val_a * val_b:\n    #     answer = \"YES\"\n    # else:\n    #     answer = \"NO\"\n    \n    # print(answer)\n    \n    # 5.\n    # if val_n * val_s <= val_a * val_b:\n    #     answer = \"YES\"\n    # else:\n    #     answer = \"NO\"\n    \n    # print(answer)\n    \n    # 6.\n    # if val_n * val_s <= val_a * val_b:\n    #     answer = \"YES\"\n    # else:\n    #     answer = \"NO\"\n    \n    # print(answer)\n    \n    # 7.\n    # if val_n * val_s <= val_a * val_b:\n    #     answer = \"YES\"\n    # else:\n    #     answer = \"NO\"\n    \n    # print(answer)\n    \n    # 8.\n    # if val_n * val_s <= val_a * val_b:\n    #     answer = \"YES\"\n    # else:\n    #     answer = \"NO\"\n    \n    # print(answer)\n    \n    # 9.\n    # if val_n * val_s <= val_a * val_b:\n    #     answer = \"YES\"\n    # else:\n    #     answer = \"NO\"\n    \n    # print(answer)\n    \n    # 10.\n    # if val_n * val_s <= val_a * val_b:\n    #     answer = \"YES\"\n    # else:\n    #     answer = \"NO\"\n    \n    # print(answer)\n    \n    # 11.\n    # if val_n * val_s <= val_a * val_b:\n    #     answer = \"YES\"\n    # else:\n    #     answer = \"NO\"\n    \n    # print(answer)\n    \n    # 12.\n    # if val_n * val_s <= val_a * val_b:\n    #     answer = \"YES\"\n    # else:\n    #     answer = \"NO\"\n    \n    # print(answer)\n    \n    # 13.\n    # if val_n * val_s <= val_a * val_b:\n    #     answer = \"YES\"\n    # else:\n    #     answer = \"NO\"\n    \n    # print(answer)\n    \n    # 14.\n    # if val_n * val_s <= val_a * val_b:\n    #     answer = \"YES\"\n    # else:\n    #     answer = \"NO\"\n    \n    # print(answer)\n    \n    # 15.\n    # if val_n * val_s <= val_a * val_b:\n    #     answer = \"YES\"\n    # else:\n    #     answer = \"NO\"\n    \n    # print(answer)\n    \n    \n    # 16.\n    # if val_n * val_s <= val_a * val_b:\n    #     answer = \"YES\"\n    # else:\n    #     answer = \"NO\"\n    \n    # print(answer)\n    \n    # 17.\n    # if val_n * val_s <= val_a * val_b:\n    #     answer = \"YES\"\n    # else:\n    #     answer = \"NO\"\n    \n    # print(answer)\n    \n    # 18.\n    # if val_n * val_s <= val_a * val_b:\n    #     answer = \"YES\"\n    # else:\n    #     answer = \"NO\"\n    \n    # print(answer)\n    \n    # 19.\n    # if val_n * val_s <= val_a * val_b:\n    #     answer = \"YES\"\n    # else:\n    #     answer = \"NO\"\n    \n    # print(answer)\n    \n    # 20.\n    # if val_n * val_s <= val_a * val_b:\n    #     answer"
    },
    {
        "number": 4414,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n,x,y,q=map(int,stdin.split())\n    return (\"YES\" if q-n<n<q+x+y-x-y<n+y+y-x+y<n+q-x-y<n+q+x-y else \"NO\")\n"
    },
    {
        "number": 4414,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    T = int(stdin[N-1])\n    q = 0\n    for _ in range(T):\n        a, b, n, s = map(int, stdin.split())\n        q += s\n        q += b\n        q += n\n        q += a\n    if q == s:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 4414,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.strip())\n    for _ in range(q):\n        n,a,b,s = map(int,stdin.strip().split())\n        print(a,b,s)\n        if (a+b+s) % 10 == 0:\n            print('YES')\n        else:\n            print('NO')\n\"\"\"\nclass Solution:\n    def change(self, n: int, coins: List[int]) -> int:\n        dp = [[0 for _ in range(n+1)] for _ in range(len(coins)+1)]\n        dp[0][0] = 0\n        for i in range(1,len(coins)+1):\n            for j in range(n+1):\n                if j >= coins[i-1]:\n                    dp[i][j] = dp[i-1][j]\n                else:\n                    dp[i][j] = max(dp[i-1][j], dp[i-1][j-coins[i-1]]+1)\n        \n        return dp[-1][-1]\n\"\"\""
    },
    {
        "number": 4414,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = 0\n    for i in range(len(stdin)):\n        s += int(stdin[i])\n    if s < 1:\n        return \"NO\"\n    def solution(s):\n        if s % 10 == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    for i in range(1, len(stdin)):\n        s = s // 10\n        s += int(stdin[i])\n    if s < 1:\n        return \"NO\"\n    return solution(s)\n\"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 4414,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def check_integer(value, total):\n        return 1 <= int(value) <= 10**9\n    \n    def check_case(x):\n        if x == 'a' or x == 'b' or x == 'n' or x == 'S':\n            return True\n        else:\n            return False\n    \n    for line in stdin:\n        values = line.split(' ')\n        a, b, n, S = values[1], values[2], int(values[3]), values[4]\n        \n        if check_integer(n, S):\n            for i in range(0, len(a)):\n                if check_case(a[i]):\n                    if check_case(b[i]):\n                        for j in range(0, len(b)):\n                            if check_case(n[j]):\n                                if check_case(S):\n                                    return \"YES\"\n                                else:\n                                    return \"NO\"\n        else:\n            return \"NO\"\n    \n    return \"NO\""
    },
    {
        "number": 4414,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    q = stdin.split()\n    n = int(q[0])\n    a = int(q[1])\n    b = int(q[2])\n    s = int(q[3])\n    \n    # for each iteration, we know the position of the elements at the end of the list\n    # that we need to compare the sum of the coins of elements in the list\n    # to find the best position in the list to pay\n    # for the coins, we use the index of the first element in the list\n    \n    # now, we take the sum of the coins in the list, and compare it to the sum of the coins of elements in the list\n    # if it is bigger than the sum of the coins of elements in the list, we call the coin that will be taken\n    # for the coins, if it is smaller, we consider it too big and we remove it from the list\n    # the remaining elements are always negative\n    \n    # now, we do the same for the sum of the coins of elements in the list\n    # for the coins, we use the index of the first element in the list\n    \n    # now, we check if the coins of elements in the list are in the range of the sum of the coins of elements in the list\n    # in the list, we remove it from the list\n    # if it is not, we consider it too big and we remove it from the list\n    # so we need to compare the sum of the coins of elements in the list to the sum of the coins of elements in the list\n    # and if it is bigger, we remove it from the list\n    # the remaining elements are always negative\n\n    # now we do the same for the sum of the coins of elements in the list\n    # for the coins, we use the index of the first element in the list\n    # since we have the sum of the coins of elements in the list, we check if it is the sum of the coins of elements in the list\n    # if it is not, we consider it too big and we remove it from the list\n    # the remaining elements are always negative\n    \n    \n    # now we start to check for all coins of elements in the list\n    # we need to iterate over the coins of elements in the list\n    # if it is greater than the sum of the coins of elements in the list, we consider it too big and we remove it from the list\n    # if it is smaller, we consider it too small and we remove it from the list\n    # the remaining elements are always negative\n    \n    # finally, we check if the coins of elements in the list are in the range of the sum of the coins of elements in the list\n    # in the list, we remove it from the list\n    # if it is not, we consider it too big and we remove it from the list\n    # the remaining elements are always negative\n    \n    # now we check if the coins of elements in the list are in the range of the sum of the coins of elements in the list\n    # in the list, we remove it from the list\n    # if it is not, we consider it too big and we remove it from the list\n    # the remaining elements are always negative\n\n    # now we check if the coins of elements in the list are in the range of the sum of the coins of elements in the list\n    # in the list, we remove it from the list\n    # if it is not, we consider it too big and we remove it from the list\n    # the remaining elements are always negative\n    \n    # now we check if the coins of elements in the list are in the range of the sum of the coins of elements in the list\n    # in the list, we remove it from the list\n    # if it is not, we consider it too big and we remove it from the list\n    # the remaining elements are always negative\n    \n    # now we check if the coins of elements in the list are in the range of the sum of the coins of elements in the list\n    # in the list, we remove it from the list\n    # if it is not, we consider it too big and we remove it from the list\n    # the remaining elements are always negative\n    \n    # now we check if the coins of elements in the list are in the range of the sum of the coins of elements in the list\n    # in the list, we remove it from the list\n    # if it is not, we consider it too big and we remove it from the list\n    # the remaining elements are always negative\n    \n    # now we check if the coins of elements in the list are in the range of the sum of the coins of elements in the list\n    # in the list, we remove it from the list\n    # if it is not, we consider it too big and we remove it from the list\n    # the remaining elements are always negative\n    \n    # now we check if the coins of elements in the list are in the range of the sum of the coins of elements in the list\n    # in the list, we remove it from the list\n    # if it is not, we consider it too big and we remove it from the list\n    # the remaining elements are always negative\n    \n    # now we check if the coins of elements in the list are in the range of the sum of the coins of elements in the list\n    # in the list, we remove it from the list\n    # if it is not, we consider it too big and we remove it from the list\n    # the remaining elements are always negative\n    \n    # now we check if the coins of elements in the list are in the range of the sum of the coins of elements in the list\n    # in the list, we remove it from the list\n    # if it is not, we consider it too big and we remove it from the list\n    # the remaining elements are always negative\n    \n    # now we check if the coins of elements in the list are in the range of the sum of the coins of elements in the list\n    # in the list, we remove it from the list\n    # if it is not, we consider it too big and we remove it from the list\n    # the remaining elements are always negative\n    \n    # now we check if the coins of elements in the list are in the range of the sum of the coins of elements in the list\n    # in the list, we remove it from the list\n    # if it is not, we consider it too big and we remove it from the list\n    # the remaining elements are always negative\n    \n    # now we check if the coins of elements in the list are in the range of the sum of the coins of elements in the list\n    # in the list, we remove it from the list\n    # if it is not, we consider it too big and we remove it from the list\n    # the remaining elements are always negative\n    \n    # now we check if the coins of elements in the list are in the range of the sum of the coins of elements in the list\n    # in the list, we remove it from the list\n    # if it is not, we consider it too big and we remove it from the list\n    # the remaining elements are always negative\n    \n    # now we check if the coins of elements in the list are in the range of the sum of the coins of elements in the list\n    # in the list, we remove it from the list\n    # if it is not, we consider it too big and we remove it from the list\n    "
    },
    {
        "number": 4414,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.strip().split()\n    q = int(n[0])\n    t = int(n[1])\n    b = int(n[2])\n    n = int(n[3])\n    answer = []\n    if t < b:\n        answer = [False, False]\n    else:\n        for i in range(q, t+1):\n            if i not in answer:\n                answer.append(i)\n    return 'YES' if answer == [False, False] else 'NO'"
    },
    {
        "number": 4414,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a,b,n,S=map(int,stdin.split())\n    if a+b+n+S<=10**9:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n-----Brute Force-----\n\nTest Cases\n\n3 3 2\n2 3 4\n3 1 6\n7 3 2\n\n\"\"\"\n\n\n\ndef"
    },
    {
        "number": 4414,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    def solution_one(n, coins, S):\n        if n==1:\n            return coins[0]\n        if n==2:\n            return sum(coins[0],coins[1])\n        return sum(coins[0], coins[1]+S)\n    \n    def solution_two(n, coins, S):\n        dp = [0] * (n+1)\n        dp[1] = coins[0]\n        for i in range(2,n+1):\n            dp[i] = coins[i]\n            for j in range(1,i+1):\n                dp[i] += min(dp[j-1], dp[j])\n        return dp[n]\n    \n    def solution_three(n, coins, S):\n        dp = [0] * (n+1)\n        dp[0] = coins[0]\n        for i in range(1,n+1):\n            dp[i] = coins[i]\n            for j in range(1,i+1):\n                dp[i] += min(dp[j-1], dp[j])\n        return dp[n]\n    \n    \n    def solution_four(n, coins, S):\n        dp = [0] * (n+1)\n        dp[1] = coins[0]\n        for i in range(2,n+1):\n            dp[i] = coins[i]\n            for j in range(1,i+1):\n                dp[i] += min(dp[j-1], dp[j])\n        return dp[n]\n    \n    \n    def solution_five(n, coins, S):\n        dp = [0] * (n+1)\n        dp[1] = coins[0]\n        for i in range(2,n+1):\n            dp[i] = coins[i]\n            for j in range(1,i+1):\n                dp[i] += min(dp[j-1], dp[j])\n        return dp[n]\n    \n    def solution_six(n, coins, S):\n        dp = [0] * (n+1)\n        dp[1] = coins[0]\n        for i in range(2,n+1):\n            dp[i] = coins[i]\n            for j in range(1,i+1):\n                dp[i] += min(dp[j-1], dp[j])\n        return dp[n]\n    \n    def solution_seven(n, coins, S):\n        dp = [0] * (n+1)\n        dp[1] = coins[0]\n        for i in range(2,n+1):\n            dp[i] = coins[i]\n            for j in range(1,i+1):\n                dp[i] += min(dp[j-1], dp[j])\n        return dp[n]\n    \n    def solution_eight(n, coins, S):\n        dp = [0] * (n+1)\n        dp[1] = coins[0]\n        for i in range(2,n+1):\n            dp[i] = coins[i]\n            for j in range(1,i+1):\n                dp[i] += min(dp[j-1], dp[j])\n        return dp[n]\n    \n    def solution_nine(n, coins, S):\n        dp = [0] * (n+1)\n        dp[1] = coins[0]\n        for i in range(2,n+1):\n            dp[i] = coins[i]\n            for j in range(1,i+1):\n                dp[i] += min(dp[j-1], dp[j])\n        return dp[n]\n    \n    def solution_ten(n, coins, S):\n        dp = [0] * (n+1)\n        dp[1] = coins[0]\n        for i in range(2,n+1):\n            dp[i] = coins[i]\n            for j in range(1,i+1):\n                dp[i] += min(dp[j-1], dp[j])\n        return dp[n]\n    \n    return (solution_one(n, coins, S) + solution_two(n, coins, S) + solution_three(n, coins, S) + solution_four(n, coins, S) + solution_five(n, coins, S) + solution_six(n, coins, S) + solution_seven(n, coins, S) + solution_eight(n, coins, S) + solution_nine(n, coins, S))"
    },
    {
        "number": 4415,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    answer = [0, 0, 0, 0]\n    answer[0] = n\n    answer[1] = len(arr)\n    answer[2] = arr[0]\n    answer[3] = arr[0]\n    i = 0\n    while i < len(arr):\n        if arr[i] >= arr[i + 1]:\n            answer[0] += 1\n            answer[1] = arr[i]\n            answer[2] = arr[i]\n            answer[3] = arr[i]\n            answer[4] = arr[i]\n            i += 1\n        else:\n            answer[0] += 1\n            answer[2] = arr[i]\n            answer[3] = arr[i]\n            answer[4] = arr[i]\n            i += 1\n    answer[5] = min(answer[1], answer[2], answer[3])\n    answer[6] = max(answer[1], answer[2], answer[3])\n    answer[7] = answer[1] + answer[2] + answer[3]\n    return ''.join(map(str, answer))\n\n--------AC\ndef"
    },
    {
        "number": 4415,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.rstrip())\n\n    if n == 0:\n        return \"NO\"\n    elif n == 1:\n        return \"YES\"\n    elif n == 2:\n        return \"YES\"\n    elif n == 3:\n        return \"YES\"\n    elif n == 4:\n        return \"YES\"\n    elif n == 5:\n        return \"YES\"\n    elif n == 6:\n        return \"YES\"\n    elif n == 7:\n        return \"YES\"\n    elif n == 8:\n        return \"YES\"\n    elif n == 9:\n        return \"YES\"\n    else:\n        return solution(stdin)\n"
    },
    {
        "number": 4415,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = [int(stdin.split()[i]) for i in range(1, n+1)]\n    def max_len(a: list) -> int:\n        if len(a) == 0:\n            return 0\n        elif len(a) == 1:\n            return 1\n        else:\n            return max(max_len(a[1:]) + 1, max_len(a[:len(a) - 1]))\n    ans = [1]\n    for i in range(2, n+1):\n        ans.append(max_len(a[:i]))\n    if ans[n] == 0:\n        return \"NO\"\n    if ans[-1] == 0:\n        return \"NO\"\n    ans = ans[:-1]\n    return \"YES\" if ans == sorted(ans) else \"NO\"\n\nRuntime: 32 ms, faster than 50.93% of Python3 online submissions for Permutation.\nMemory Usage: 20 MB, less than 9.93% of Python3 online submissions for Permutation.\n\"\"\"\n\nclass Solution:\n    def permute(self, nums: List[int]) -> List[List[int]]:\n        if not nums:\n            return []\n\n        result = []\n        self.dfs(nums, [], result)\n        return result\n\n    def dfs(self, nums, path, result):\n        if not nums:\n            result.append(path)\n            return\n\n        for i in range(len(nums)):\n            if i > 0 and nums[i] == nums[i - 1]:\n                continue\n            path.append(nums[i])\n            self.dfs(nums[:i] + nums[i + 1:], path, result)\n            path.pop()\n"
    },
    {
        "number": 4415,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    s = stdin.strip()\n\n    if n == 0:\n        return 'YES'\n    elif n == 1:\n        return 'NO'\n    else:\n        sorted_string = sorted(s)\n        print(sorted_string)\n        for i in range(1, n):\n            if sorted_string[i] > sorted_string[i - 1] and sorted_string[i] > sorted_string[i - 2]:\n                continue\n            else:\n                return 'NO'\n        return 'YES'\n"
    },
    {
        "number": 4415,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n    from itertools import permutations\n    import sys\n    \n    n = int(stdin.strip())\n    \n    for i in range(n):\n        \n        for seq in permutations(range(n)):\n            num = 0\n            for num in range(n-1):\n                if seq[num]!= seq[num+1]:\n                    break\n            else:\n                continue\n            \n            if num == 0:\n                for num in range(n-1):\n                    seq.append(seq[num] + 1)\n                break\n            \n            for num in range(n-2, -1, -1):\n                if seq[num]!= seq[num+1]:\n                    break\n            else:\n                continue\n            \n            if num == n-1:\n                for num in range(n-2, -1, -1):\n                    seq.append(seq[num] + 1)\n                break\n            \n            if num == n-1:\n                for num in range(n-2, -1, -1):\n                    seq.append(seq[num] + 1)\n                break\n            \n            if num == 0:\n                for num in range(n-2, -1, -1):\n                    seq.append(seq[num] + 1)\n                break\n    \n    s = ''.join(map(str,seq))\n    \n    if s[0] == s[-1] and s[0]!= '0':\n        return s\n    else:\n        return \"NO\"\n    \n    return \"YES\"\n"
    },
    {
        "number": 4415,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n == 0 or n == 1:\n        return \"NO\"\n    num_seq = int(stdin.strip())\n    seq_seq = [int(i) for i in stdin.strip().split()]\n    def is_increasing(x, y):\n        return x < y and seq_seq[x] > seq_seq[y] and (not y % 2 and x < n - 1)\n    def is_decreasing(x, y):\n        return x < y and seq_seq[x] < seq_seq[y] and (not y % 2 and x > 1)\n    res = \"\"\n    for i in range(n):\n        if seq_seq[i] == num_seq:\n            res += str(i + 1)\n        elif not is_decreasing(i, i):\n            res += str(seq_seq[i])\n        elif not is_increasing(i, i):\n            res += str(seq_seq[i])\n    return res\n\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        n = int(stdin.strip())\n        seq_seq = [int(i) for i in stdin.strip().split()]\n        \n        def is_increasing(x, y):\n            return x < y and seq_seq[x] > seq_seq[y] and (not y % 2 and x < n - 1)\n        \n        def is_decreasing(x, y):\n            return x < y and seq_seq[x] < seq_seq[y] and (not y % 2 and x > 1)\n        \n        res = \"\"\n        for i in range(n):\n            if is_decreasing(i, i):\n                res += str(i + 1)\n            elif is_increasing(i, i):\n                res += str(i + 1)\n            else:\n                res += str(seq_seq[i])\n        return res"
    },
    {
        "number": 4415,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    lst = list(map(int, stdin.split()))\n    a = sorted(lst)\n    i, j = 0, 0\n    answer = ''\n    while i < len(a):\n        if a[i] > a[j]:\n            i += 1\n        else:\n            j += 1\n            answer += str(a[j]) +''\n            answer += str(a[i]) +''\n            i += 1\n            j += 1\n            a[i] = a[j]\n            a[j] = 0\n    if j < len(a):\n        answer += str(a[j]) +''\n        answer += str(a[i])\n    return answer[:-1]\n\n\n----Good---\n\nthe input is strictly increasing and decreasing.\n\nThe input is a non-empty sequence of integers.\n\nThe values of the subsequences are strictly increasing or decreasing.\n\nThe numbers of subsequences and the subsequences are positive integers.\n\nFor example, if the input is 4 and 4 is the index of a number in $a$, the subsequence 1 contains the number $1$ and the subsequence 2 contains $2$.\n\nFor example, if the input is 4 and 4 is the index of a number in $a$, the subsequence 1 contains the number $1$ and the subsequence 2 contains $3$.\n\nThe second subsequence $a$ is a subsequence of $a$ and it is one of the subsequences that the first subsequence $a$ contains.\n\nThe third subsequence $a$ is a subsequence of $a$ and it is $a$ plus its first and third subsequence $a$.\n\nThe fourth subsequence $a$ is a subsequence of $a$ and it is $a$ plus its first and second subsequence $a$ and it is $a$ plus its third subsequence $a$.\n\nThe fifth subsequence $a$ is a subsequence of $a$ and it is $a$ plus its first and fourth subsequence $a$ and it is $a$ plus its second and third subsequence $a$ and it is $a$ plus its third subsequence $a$.\n\nThe sixth subsequence $a$ is a subsequence of $a$ and it is $a$ plus its first and fifth subsequence $a$ and it is $a$ plus its second and fourth subsequence $a$ and it is $a$ plus its third and fifth subsequence $a$ and it is $a$ plus its fourth subsequence $a$ and it is $a$ plus its fifth subsequence $a$.\n\nThe seventh subsequence $a$ is a subsequence of $a$ and it is $a$ plus its first and sixth subsequence $a$ and it is $a$ plus its second and seventh subsequence $a$ and it is $a$ plus its third and eighth subsequence $a$ and it is $a$ plus its fourth and eighth subsequence $a$ and it is $a$ plus its fifth and eighth subsequence $a$ and it is $a$ plus its sixth and eighth subsequence $a$ and it is $a$ plus its seventh and eighth subsequence $a$ and it is $a$ plus its eighth subsequence $a$.\n\nThe eighth subsequence $a$ is a subsequence of $a$ and it is $a$ plus its first and ninth subsequence $a$ and it is $a$ plus its second and tenth subsequence $a$ and it is $a$ plus its third and eleventh subsequence $a$ and it is $a$ plus its fourth and eleventh subsequence $a$ and it is $a$ plus its fifth and eleventh subsequence $a$ and it is $a$ plus its sixth and eleventh subsequence $a$ and it is $a$ plus its seventh and eleventh subsequence $a$ and it is $a$ plus its eighth and tenth subsequence $a$ and it is $a$ plus its nineth and tenth subsequence $a$ and it is $a$ plus its onethird and eleventh subsequence $a$ and it is $a$ plus its sixth and eleventh subsequence $a$ and it is $a$ plus its thirteenth and eleventh subsequence $a$ and it is $a$ plus its onetenth and twelveth subsequence $a$ and it is $a$ plus its nineth and twelveth subsequence $a$ and it is $a$ plus its oneteeth and sevenths subsequence $a$ and it is $a$ plus its tenth and twelveth subsequence $a$ and it is $a$ plus its ninth and tenth subsequence $a$ and it is $a$ plus its twelfth and tenth subsequence $a$ and it is $a$ plus its non-ninth and tenth subsequence $a$ and it is $a$ plus its nineth and thirtieth subsequence $a$ and it is $a$ plus its onethirth and twothirds subsequence $a$ and it is $a$ plus its neithths and twothirds subsequence $a$ and it is $a$ plus its thirthand fifth and eighth subsequ"
    },
    {
        "number": 4415,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = []\n    b = []\n    a_in = 0\n    b_in = 0\n    for i in range(n):\n        a.append(int(stdin.strip()))\n    a.sort()\n    for i in range(n):\n        b.append(a[i]+a_in)\n        a_in = a_in*10+a[i]\n    for i in range(n):\n        b.append(b[i]+b_in)\n        b_in = b_in*10+b[i]\n    b.sort()\n    b_in = 0\n    a_in = 0\n    for i in range(n):\n        a_in += a[i]*10\n        b_in += b[i]*10\n    for i in range(n):\n        if a[i]!= b[i]:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 4415,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [list(map(int, input().split())) for _ in range(n)]\n\n    c = 0\n    for i in range(n):\n        c += len(list(set(a[i])))\n    \n    if c % 2!= 0:\n        return \"NO\"\n    else:\n        s1 = solution(stdin)\n        s2 = solution(stdin)\n        return \"YES\" if s1 == s2 else \"NO\"\n"
    },
    {
        "number": 4415,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    f = 0\n    if n < 2:\n        return \"NO\"\n    if n < 3:\n        return \"NO\"\n    if n < 5:\n        return \"YES\"\n    for i in range(n-2):\n        if a[i] > a[i+1] and a[i] > a[i+2]:\n            f = 1\n            break\n    if f == 0:\n        return \"NO\"\n    else:\n        return \"YES\"\n\nfor _ in range(int(input())):\n    a = input().split(\" \")\n    print(solution(a))\n"
    },
    {
        "number": 4416,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    lst = list(map(int, stdin.split()))\n    book_counts = {}\n    for i in range(k):\n        book_counts[lst[i]] = book_counts.get(lst[i], 0) + 1\n    book_counts = sorted(book_counts.items(), key=lambda x: (-x[1], x[0]))\n    book_counts.sort(key=lambda x: x[1]*(10**(k-1)-x[1]))\n    for book_count, book_id in book_counts:\n        if book_id in book_counts:\n            book_counts[book_id] = 0\n    return str(min(book_counts.values()))\n"
    },
    {
        "number": 4416,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    book_num = n // 10\n    book_set = []\n    for i in range(n):\n        a, b, c = list(map(int, input().strip().split()))\n        book_set.append((a, b, c))\n    answer = 1\n    book_set.sort(key=lambda x: (x[2], -x[1], -x[0]))\n    for i in range(book_num):\n        for j in range(book_num):\n            if i == j:\n                continue\n            if book_set[i][0] > book_set[j][0] and book_set[i][1] < book_set[j][1]:\n                continue\n            if book_set[i][0] < book_set[j][0] and book_set[i][1] > book_set[j][1]:\n                continue\n            answer = max(answer, book_set[i][2] + book_set[j][2])\n    print(answer)\n    return str(answer)\n\nsolution(input())\n"
    },
    {
        "number": 4416,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.strip().split('\\n')[0])\n    a = int(stdin.strip().split('\\n')[1])\n    b = int(stdin.strip().split('\\n')[2])\n    for k in range(t):\n        l = list(map(int, input().strip().split(' ')))\n        if l[2] == a and l[0] == b:\n            print(k)\n            break\n    else:\n        print(-1)\n\"\"\""
    },
    {
        "number": 4416,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    books = [int(x) for x in stdin.split()]\n    t = [int(x) for x in stdin.split()]\n    book_solution = []\n    def helper(i, start, end, time):\n        if time == 0:\n            book_solution.append(books[i])\n            return\n        if end > start:\n            time += t[i]\n            helper(i+1, start, end, time)\n            time += t[i]\n            helper(i+1, start, end, time)\n            time += t[i]\n    helper(0, 0, len(books), 0)\n    return min(book_solution)\n"
    },
    {
        "number": 4416,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n,k=map(int,stdin.split())\n    books=map(int,stdin.split())\n    books=[books[i] for i in range(n)]\n    books.sort()\n    best=books[0]\n    index=1\n    while(index<n):\n        a=books[index]\n        b=books[index+1]\n        b=b-a\n        if(a<b):\n            a,b=b,a\n            index+=1\n        else:\n            best=max(best,b)\n            index+=2\n    if(k>best):\n        return -1\n    else:\n        return best\n"
    },
    {
        "number": 4416,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    book_list = list(map(int, stdin.split()))\n    book_list.sort()\n    books = set(map(int, stdin.split()))\n    books.difference_update(book_list)\n    book_count = [0 for _ in range(n+1)]\n    for i in range(n):\n        book_count[book_list[i]] += 1\n    min_count = book_count[1]\n    for i in range(2, n+1):\n        book_count[i] += book_count[i-2]\n        book_count[i] -= book_count[i-1]\n        if book_count[i] > min_count:\n            min_count = book_count[i]\n    books.remove(0)\n    books.remove(1)\n    books.add(book_list[-1])\n    books.add(book_list[0])\n    books.remove(max(books))\n    book_count[1] -= 1\n    book_count[book_list[0]] -= 1\n    book_count[book_list[1]] += 1\n    book_count[book_list[-1]] -= 1\n    book_count[book_list[-2]] += 1\n    book_count[book_list[-1]] -= 1\n    book_count[book_list[-2]] -= 1\n    book_count[book_list[-1]] += book_count[book_list[0]]\n    book_count[book_list[0]] += book_count[book_list[1]]\n    book_count[book_list[-2]] -= book_count[book_list[-1]]\n    book_count[book_list[-2]] += book_count[book_list[-1]]\n    for i in range(1, n+1):\n        if book_count[i] < min_count:\n            min_count = book_count[i]\n    for i in range(n):\n        if books.pop()!= 0:\n            print(books.pop())\n            break\n    else:\n        print(-1)\nsolution(stdin)\n"
    },
    {
        "number": 4416,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Read books from the standard input and print the minimum total reading time.\n\n    Return\n        the minimum total reading time, or -1 if no solution exists.\n    \"\"\"\n    # TODO\n    n, k = map(int, stdin.split())\n    books = []\n    for i in range(n):\n        books.append(map(int, stdin.split()))\n    books.sort(key = lambda x: x[0])\n    books = books[::-1]\n    t_min = books[0][0]\n    a_min = books[0][1]\n    b_min = books[0][2]\n    t_s = 0\n    for j in range(1, n):\n        t_s += books[j][0]\n        if books[j][1] < books[j-1][1] and books[j][2] < books[j-1][2]:\n            if books[j][0] >= t_min:\n                t_min = books[j][0]\n            if books[j][1] < a_min:\n                a_min = books[j][1]\n            if books[j][2] < b_min:\n                b_min = books[j][2]\n    return t_min + (t_s - t_min)\n\nprint(solution(stdin))\n\n\n\n------My solution-----\n\nn, k = map(int, input().split())\nbooks = []\nfor i in range(n):\n    books.append(list(map(int, input().split())))\nmax_read = 0\nfor i in range(n):\n    for j in range(i+1, n):\n        read_time = books[i][0] + books[j][0]\n        if read_time > max_read:\n            max_read = read_time\nfor i in range(n):\n    for j in range(i+1, n):\n        read_time = books[i][1] + books[j][1]\n        if read_time > max_read:\n            max_read = read_time\nfor i in range(n):\n    for j in range(i+1, n):\n        read_time = books[i][2] + books[j][2]\n        if read_time > max_read:\n            max_read = read_time\nprint(max_read)"
    },
    {
        "number": 4416,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    books = list(map(int, stdin.split()))\n\n    # the set of books that Alice likes\n    l = set(books[:k])\n    # the set of books that Bob likes\n    u = set(books[k:])\n\n    # the minimum total reading time of the set of books\n    t = min(books[:k], key=lambda x: books[x]) - min(books[k:], key=lambda x: books[x])\n    if t == 0: return -1\n    \n    return str(t)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4416,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    b = []\n    for _ in range(n):\n        a, b = map(int, stdin.split())\n        b.append(a)\n        b.append(b)\n        b.sort()\n        b.sort(key=lambda x: (x[0], x[1]))\n        b = [x for x in b]\n        b.sort()\n    for i in range(n):\n        if b[i][0] > k:\n            b.remove(b[i])\n    t_sum = 0\n    for i in range(n):\n        t_sum += (b[i][1] - b[i][0])\n    t_sum += k\n    return t_sum\n\n-----Advanced-----\n\nHere's an example. If you finish all the tasks, you can see that you can win this challenge if you can have every possible set of books to cover all possible values of t_i.\n\nNote that you are allowed to give different types of books to Alice, Bob, and Alice and Bob, as well as books that you are also allowed to give different types of books to Alice and Bob.\n\nInput\n\nThe following is a sample input.\n\n6 2\n1 1 1\n1 1 1\n2 1 1\n1 0 1\n1 0 1\n1 0 1\n1 0 1\n\nOutput\n\n6\n\nThe following is an output.\n\n6\n\nHere's another example. Suppose Alice wants to spend at least $3$ books to read Alice.\n\n\n-----Input-----\n\nThe first line of the input contains two integers $n$ and $k$ ($1 \\le k \\le n \\le 2 \\cdot 10^5$).\n\nThe next $n$ lines contains descriptions of books, one description per line: the $i$-th line contains three integers $t_i$, $a_i$ and $b_i$ ($1 \\le t_i \\le 10^4$, $0 \\le a_i, b_i \\le 1$), where:\n\n  $t_i$ \u2014 the amount of time required for reading the $i$-th book;  $a_i$ equals $1$ if Alice likes the $i$-th book and $0$ otherwise. \n\n\n-----Output-----\n\nIf there is no solution, print only one integer -1. Otherwise print one integer $T$ \u2014 the minimum total reading time of the suitable set of books.\n\n\n-----Examples-----\nInput\n\n7 5\n1 1 1 1 1 0 0\n1 0 1 0 1 0 1\n1 0 1 0 1 1 0\n0 0 1 0 1 0 1\n0 0 1 0 1 1 0\n0 0 1 0 1 0 1\n0 0 0 1 0 1 0\n1 0 0 1 0 1 0\n1 1 0 1 0 1 0\n1 0 1 1 0 1 0\n\nOutput\n\n10\n\nInput\n\n4 4\n1 1 1\n1 1 1\n2 1 1\n2 0 1\n1 0 1\n\nOutput\n\n9\n\nInput\n\n4 3\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n\nOutput\n\n10\n\nInput\n\n5 3\n1 0 0 0\n1 0 0 0\n1 0 0 0\n1 1 0 0\n\nOutput\n\n-1\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\"\"\"\n"
    },
    {
        "number": 4416,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split(\" \")\n    a = [int(i) for i in a]\n    #print(a)\n    k = a[0]\n    n = a[1]\n    #print(k,n)\n    i = 2\n    while i <= n:\n        j = 2\n        while j <= k:\n            if j >= a[i]:\n                break\n            j+=1\n        if i+j<=n:\n            #print(i,i+j)\n            a[i+j] = 0\n        i+=j\n    #print(a)\n    for j in range(i,n+1):\n        a[j] = 1\n    #print(a)\n    for j in range(i,n+1):\n        if a[j] == 1:\n            #print(j)\n            return str(j-i)\n    return str(0)\n"
    },
    {
        "number": 4417,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a_1, a_2, a_3 = map(int, stdin.split())\n    a_1, a_2, a_3 = abs(a_1), abs(a_2), abs(a_3)\n    new_k = k - k % a_3\n    if new_k % a_3!= 0:\n        return -1\n    if new_k % a_3 == 0:\n        return new_k // a_3\n    max_k = new_k // a_3 + a_3\n    b = max_k // 2\n    if a_2 >= b:\n        return b\n    if a_1 >= b:\n        return b + 1\n    return -1\n\n\ndef"
    },
    {
        "number": 4417,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n,k=map(int,stdin.split())\n    a=[int(i) for i in range(1,n+1)]\n    if n>10**8:\n        for i in range(1,n+1):\n            if (a[i]-k*(i-1)>0) or (a[i]-k*(i-1)>=0 and a[i]-k*(i-1)<=k):\n                return str(i-1)\n    if a[-1]==0:\n        return str(n)\n    \n    \n    \n\"\"\"\n\ndef"
    },
    {
        "number": 4417,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    k = int(stdin.strip())\n    a_n = list(map(int, stdin.strip().split()))\n    \n    for a_i in range(n):\n        for b_i in range(n-1):\n            if a_n[a_i] >= b_n[b_i+1]:\n                continue\n            elif a_n[a_i] == b_n[b_i+1]:\n                a_n[a_i] = 0\n            else:\n                a_n[a_i] = b_n[b_i+1]\n    \n    for b_i in range(n-1):\n        if a_n[b_i+1]!= 0:\n            if a_n[b_i] == 0:\n                a_n[b_i] = 0\n            else:\n                a_n[b_i] = a_n[b_i] - 1\n    \n    answer = 0\n    for a_i in range(n):\n        answer += a_n[a_i]\n    \n    return str(answer)\n\n### https://www.hackerrank.com/challenges/equalizing-prices/problem\n\nfrom collections import defaultdict\n\ndef"
    },
    {
        "number": 4417,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    price = [int(stdin.strip()) for _ in range(n)]\n    answer = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if price[i] + price[j] > price[i] + price[j+1] :\n                answer += 1\n    return str(answer)\n\n\n-----Constraints-----\n1 <= q <= 10^5\n0 <= n <= 10^8\n1 <= a_i <= 10^8\n\n\"\"\"\nimport math\n\ndef"
    },
    {
        "number": 4417,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    A = [int(x) for x in stdin.split(' ')]\n    \n    ans = float('-inf')\n    B = A[0]\n    for i in range(1, n):\n        if B >= A[i]:\n            ans = max(ans, B - A[i])\n        B = A[i]\n    \n    return str(ans)\n\nRuntime: 40 ms, faster than 70.94% of Python3 online submissions for Equalizing the Equalized Products.\nMemory Usage: 14.5 MB, less than 14.52% of Python3 online submissions for Equalizing the Equalized Products.\n\"\"\"\n\n\nclass Solution:\n    def equalizeProducts(self, A: List[int]) -> List[int]:\n        A.sort()\n        n = len(A)\n        B = A[0]\n        k = 1\n        for i in range(1, n):\n            if A[i] - B > k:\n                B = A[i] - B\n                k += 1\n            else:\n                k = 1\n        ans = []\n        for i in range(n):\n            if B <= A[i]:\n                ans.append(A[i])\n                B = A[i]\n            else:\n                ans.append(B)\n                B = A[i] - B\n        return ans\n\n\nclass Solution:\n    def equalizeProducts(self, A: List[int]) -> List[int]:\n        A.sort()\n        A = set(A)\n        for i in range(1, len(A)):\n            A.add(A[i - 1] + A[i])\n        return sorted(A)\n\nclass Solution:\n    def equalizeProducts(self, A: List[int]) -> List[int]:\n        A.sort()\n        A = set(A)\n        for i in range(1, len(A)):\n            A.add(A[i] + A[i - 1])\n        return sorted(A)"
    },
    {
        "number": 4417,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = [int(i) for i in input().split()]\n    b = [int(i) for i in input().split()]\n    \n    x = 0\n    y = 0\n    z = 0\n    \n    for i in range(0, n):\n        if (a[i] - b[i]) <= k:\n            x += 1\n            z = x\n        if (a[i] - b[i]) > k:\n            z = y\n            y += 1\n    \n    if (z < n) and (z < (n // 2)):\n        print(z)\n    else:\n        print(z - (n // 2))\n"
    },
    {
        "number": 4417,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    lst = list(map(int, stdin.split()))\n    sum = 0\n    for i in range(len(lst)):\n        sum += abs(lst[i] - lst[i + 1])\n    if sum < k:\n        return '-'\n    else:\n        return str(sum)\n\nExample:\n\nInput:\n3\n1 2 3 1\n4 2\n6 4 8 5\n2 2\n1 6\n3 5\n5 2 5\n\nOutput:\n2\n-1\n4\n\n\nConstraints:\n\n1 <= k <= 10^8\n1 <= n <= 10^6\n\n\"\"\"\n\n\nclass Solution:\n    def maxEqualPrice(self, n: int, a: int, b: int, k: int) -> int:\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        "
    },
    {
        "number": 4417,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a_list = list(map(int, stdin.split()))\n    answer = 0\n    for i in range(1, n + 1):\n        if i not in a_list:\n            continue\n        elif a_list.count(i) <= 1:\n            continue\n        else:\n            if k < 0:\n                return -1\n            elif a_list[a_list.index(i) - 1] + a_list[a_list.index(i) - 2] + a_list[a_list.index(i) - 3] < k:\n                return -1\n            elif a_list[a_list.index(i) - 1] + a_list[a_list.index(i) - 2] + a_list[a_list.index(i) - 3] > k:\n                return -1\n            else:\n                answer = max(answer, a_list[a_list.index(i) - 1] + a_list[a_list.index(i) - 2] + a_list[a_list.index(i) - 3])\n                a_list.remove(i)\n                a_list.remove(i)\n    return answer\n\"\"\"\n\nn,k = map(int,input().split())\na_list=[]\nfor _ in range(n):\n    a_list.append(int(input()))\n\nc=0\nfor i in range(n):\n    for j in range(i+1,n):\n        for k in range(j+1,n):\n            if a_list[i] + a_list[j] + a_list[k] < k:\n                c+=1\nprint(c)"
    },
    {
        "number": 4417,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    arr = list(map(int, stdin.strip().split()))\n    prices = sorted(list(map(int, stdin.strip().split())))\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] == arr[j]:\n                if j >= i:\n                    arr[i], arr[j] = arr[j], arr[i]\n    prices = sorted(arr)\n    for i in range(len(prices)):\n        for j in range(len(prices)):\n            if prices[j] - prices[i] > 2:\n                prices[i], prices[j] = prices[j], prices[i]\n    return str(sum(prices))\n\n\n\ndef"
    },
    {
        "number": 4417,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(int(stdin)):\n        q = stdin.split(\" \")\n        if q[0] == \"1\":\n            n = int(q[1])\n            k = int(q[2])\n            a_1 = int(q[3])\n            b_1 = int(q[4])\n            a_2 = int(q[5])\n            b_2 = int(q[6])\n            if b_1 > b_2:\n                print(-1)\n                continue\n            if (a_1 + a_2) > k:\n                print(-1)\n                continue\n            print(a_1 - b_1)\n        else:\n            print(7)\n\nfor i in range(int(input())):\n    solution(input())"
    },
    {
        "number": 4418,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[-1])\n    a = list(map(int, stdin.split()[:-1]))\n    k = len(a)\n    if k % 6!= 0:\n        return 0\n    \n    seq = []\n    for i in range(k // 6):\n        seq.append(a[i*6:i*6+6])\n    \n    seq_split = []\n    for i in seq:\n        if len(i) == k // 6:\n            seq_split.append(i)\n    \n    good = [int(s) for s in seq_split]\n    good.sort(reverse=True)\n    \n    min = int(good[0] / 6) * 6 + good[0] % 6\n    \n    for i in range(len(good)):\n        if min + 6 * i >= k:\n            break\n        min += 6 * i\n        \n    return min\n"
    },
    {
        "number": 4418,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a_d = {}\n    a_d[0] = stdin\n    \n    for i in range(1, int(stdin)):\n        for j in range(0, int(stdin) - i):\n            #j = j + i\n            a_d[i] = a_d[i] + a_d[j] + a_d[i - j]\n            #a_d[i] = a_d[i] + a_d[j] + a_d[i - j]\n            \n    #print(a_d)\n    #print(a_d[i])\n    return str(min(a_d[i]))\n        \n"
    },
    {
        "number": 4418,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    # print(n, k)\n    # print(' '.join(map(str, a)))\n    if n == 1:\n        return '0'\n    elif n == 2:\n        return ''.join(map(str, [5, 4]))\n    elif n % 6 == 0:\n        # print(n)\n        # print(n // 6)\n        return str(n // 6)\n    elif n % 6 == 5:\n        return '0'\n    elif n % 6 == 4:\n        # print(n)\n        # print(n // 6)\n        return str(n // 6) + str(n % 6)\n    elif n % 6 == 3:\n        # print(n)\n        # print(n // 6)\n        return str(n // 6) + str(n % 6) + str(n % 6)\n    elif n % 6 == 2:\n        # print(n)\n        # print(n // 6)\n        return str(n // 6) + str(n % 6) + str(n % 6) + str(n % 6)\n    elif n % 6 == 1:\n        # print(n)\n        # print(n // 6)\n        return str(n // 6) + str(n % 6) + str(n % 6) + str(n % 6) + str(n % 6)\n\n\ndef"
    },
    {
        "number": 4418,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    good = []\n    bad = []\n    \n    for i in range(1, n+1):\n        if i % 6 == 0:\n            good.append(i)\n        else:\n            bad.append(i)\n            \n    print(len(good))\n    print(len(bad))\n    good.sort()\n    bad.sort()\n    print(len(good))\n    print(len(bad))\n    print(''.join(str(good[0]) + ',' + str(bad[0])))\n    print(''.join(str(good[len(good)-1]) + ',' + str(bad[len(bad)-1])))\n    print(len(good) + len(bad) - 2)\n    \n"
    },
    {
        "number": 4418,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 6!= 0:\n        print(0)\n        return\n    \n    \n    a = list(map(int, stdin.split()))\n    \n    n = len(a)\n    \n    return solution(n)\n"
    },
    {
        "number": 4418,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.strip())\n    a = list(map(int, stdin.split()))\n    i = 0\n    while i < len(a):\n        j = i + (k // 6)\n        while j < len(a) and k % 6 == 0:\n            a[i] = a[i] + a[j]\n            j += 1\n        i += 1\n    return str(min(a))\n\n-----Constraints-----\n1 <= n <= 10^5\n0 <= k <= 10^6\n\n\n-----Time complexity-----\nO(n) since we split array into n subsequences, so we compute all the subsequences of size k, then we divide it into 2 subsequences (subsequences of size k) and then we calculate the minimum number of subsequences.\n\nO(n^2) since we split array into subsequences and then we divide each subsequence into its subarray\n\nO(n) since we split array into subsequences and then we divide each subsequence into its subarray\n"
    },
    {
        "number": 4418,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    good = [4, 8, 15, 16, 23, 42]\n    nums = []\n    for i in range(n):\n        try:\n            nums.append(int(stdin[i]))\n        except:\n            nums.append(good[i])\n    def get_sequence(l: list) -> list:\n        n = len(l)\n        if n == 0:\n            return []\n        else:\n            return [l[0]] + get_sequence(l[1:n])\n    return ''.join(str(i) for i in get_sequence(nums))\n    \"\"\"\n    n = int(stdin)\n    good = [4, 8, 15, 16, 23, 42]\n    nums = []\n    for i in range(n):\n        try:\n            nums.append(int(stdin[i]))\n        except:\n            nums.append(good[i])\n    def get_sequence(l: list) -> list:\n        n = len(l)\n        if n == 0:\n            return []\n        else:\n            return [l[0]] + get_sequence(l[1:n])\n    return ''.join(str(i) for i in get_sequence(nums))\n\"\"\"\n"
    },
    {
        "number": 4418,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, M, D = map(int, stdin.split())\n    arr = [list(map(int, input().split())) for _ in range(N)]\n    \n    count = 0\n    \n    #array to store the index of the minimum element\n    arr_min_index = []\n    \n    #array to store the last element of the array\n    arr_last = []\n    \n    for i in range(N):\n        arr[i].sort()\n        \n        #a sequence of three elements\n        #elements which are an element of the array\n        #determines if the array is good or not\n        #elements which are not an element of the array\n        #are removed to make the array good\n        #the result is not good\n        if arr[i][0] >= arr[i][1] >= arr[i][2]:\n            if arr[i][3]!= arr[i][4]:\n                arr[i] = [arr[i][0], arr[i][1], arr[i][3]]\n            else:\n                arr[i] = [arr[i][0], arr[i][1], arr[i][3]]\n                count = count + 1\n        else:\n            arr_min_index.append(i)\n        \n    for i in arr_min_index:\n        arr_last.append(i)\n    \n    count = count + len(arr_last)\n    \n    #determine the last element\n    arr_last.reverse()\n    \n    #remove the last element\n    for i in arr_last:\n        arr[i].reverse()\n    \n    count = count - len(arr_last)\n    \n    #determine the next element\n    for i in range(N-1, 0, -1):\n        if arr[i][0] == arr[i-1][0] or arr[i][1] == arr[i-1][1] or arr[i][2] == arr[i-1][2]:\n            arr[i] = arr[i-1]\n            continue\n        if arr[i][0] > arr[i][1] and arr[i][1] > arr[i][2]:\n            arr[i] = arr[i-1]\n        elif arr[i][0] == arr[i][1] and arr[i][1] > arr[i][2]:\n            arr[i] = arr[i-1]\n        elif arr[i][0] == arr[i][2] and arr[i][2] > arr[i][1]:\n            arr[i] = arr[i-1]\n    \n    \n    return str(count)\n\nprint(solution(stdin))"
    },
    {
        "number": 4418,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(i) for i in stdin.split()]\n    good, bad = 0, 0\n    for i in range(n):\n        if a[i] % 6 == 0:\n            good += 1\n        else:\n            bad += 1\n    if good > bad:\n        return str(good) + \" \" + str(bad)\n    else:\n        return str(bad) + \" \" + str(good)\n"
    },
    {
        "number": 4418,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, input().split()))\n    answer = a.pop(0)\n    for i in range(1, len(a)):\n        answer = min(answer, a[i] + len(str(a[i])))\n    print(answer)\n    return answer\n\nprint(solution(input()))"
    },
    {
        "number": 4419,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip().rstrip())\n    a, b = map(int, stdin.strip().split())\n    a = a + n\n    b = b - n\n    print(a, b)\n    return str(min(a, b))\n"
    },
    {
        "number": 4419,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    k = abs(a - b)\n    count = 0\n    while a >= 10**(k - 1):\n        a = a % 10**(k - 1)\n        count += 1\n    while b >= 10**(k - 1):\n        b = b % 10**(k - 1)\n        count += 1\n    return str(count)\n\"\"\"\n\ndef"
    },
    {
        "number": 4419,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = stdin.split()\n    n = int(n)\n    a = int(a)\n    b = int(b)\n    #case 1:\n    # print(abs(a-b))\n    if a > b:\n        print(max(a, b) - min(a, b))\n    else:\n        print(min(a, b) - max(a, b))\n    #case 2:\n    if a - b == b:\n        print(min(a, b))\n    else:\n        print(min(a, b))\n    #case 3:\n    print(min(a, b) - max(a, b))\n    #case 4:\n    print(b - a)\n    return ''"
    },
    {
        "number": 4419,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, B = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    b = [int(x) for x in stdin.split()]\n    b.sort()\n    a, b = [a[0] + b[0], a[-1] - b[-1]]\n    if a == B:\n        print(1)\n    else:\n        print(min(b, a))\n\n-----Constraints-----\n\n0 < t < 10^4\n1 <= a, b < 10^9\n\n-----Example-----\nInput\n6\n5 5\n13 42\n18 4\n1337 420\n123456789 1000000000\n100500 9000\n\nOutput\n0\n3\n2\n92\n87654322\n9150\n\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys\nfrom collections import Counter\nfrom collections import defaultdict\n"
    },
    {
        "number": 4419,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    num_test = int(stdin.strip())\n    for _ in range(num_test):\n        a, b = map(int, input().split())\n        print(solution(a,b))\n        \n\n-----IMP-----\n\ndef"
    },
    {
        "number": 4419,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n    a, b = stdin.split()\n    a = int(a)\n    b = int(b)\n    \n    answer = [a + b]\n    \n    if a > 10**9 or b > 10**9:\n        return answer\n    \n    if a % 10 == b % 10 == 0:\n        return answer + solution(a//10**9) + solution(a//10**10 + b//10**10 + 1)\n    else:\n        return answer + solution(a//10**9) + solution(a//10**10 + b//10**10)\n    \n\n-----Constraints-----\n\n1 <= t <= 10^4\n\n0 <= a, b < 10**9\n\n----------Input Format----------\n\nThe first line contains an integer t. Then t test cases follow.\n\nThe only line of each test case contains two integers a and b.\n\n\n-----Output Format-----\n\nPrint the minimum number of moves required to obtain $b$ from $a$.\n\n\n\nExample Input\n\n3\n1 5\n5 3\n3 2\n8 9\n10\n\n\nExample Output\n\n6\n3\n2\n1\n\n\nExplanation\n\nIn this example, the following sequences of moves can be applied:\n$1 \\rightarrow 23 \\rightarrow 32 \\rightarrow 42$ (add $10$, add $9$, add $10$).\n$18 \\rightarrow 10 \\rightarrow 4$ (subtract $8$, subtract $6$).\n$13 \\rightarrow 23 \\rightarrow 32 \\rightarrow 42$ (add $10$, add $9$, add $10$).\n\n\nConstraints\n\n1 <= t <= 10^4\n\n\n\n-----------------Solution-----------------"
    },
    {
        "number": 4419,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 10**4:\n        return str(n)\n    \n    for i in range(1, n+1):\n        n -= 1\n        if n < 10**4:\n            return str(n)\n        \n        for j in range(1, 10):\n            n -= 1\n            if n < 10**4:\n                return str(n)\n            \n            for k in range(1, 10):\n                n -= 1\n                if n < 10**4:\n                    return str(n)\n                \n                n -= 10\n                if n < 10**4:\n                    return str(n)\n    return str(n)\n\"\"\"\n\n\nclass Solution:\n    def minMoves(self, arr: int, k: int) -> int:\n        if len(arr) < 10**4 or k >= 10**4:\n            return 0\n        \n        res = 0\n        for i in range(len(arr) - 1):\n            if arr[i] + k < arr[i+1]:\n                res += 1\n            if arr[i] - k > arr[i+1]:\n                res += 1\n        return res\n\n\"\"\""
    },
    {
        "number": 4419,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = map(int, stdin.split())\n    k = 0\n    for i in range(n):\n        k += a[i]\n    k -= k % 10\n    if k == 0:\n        return \"0\"\n    return str(k)\n\n-----Submission-----\n5\n16\n\n-----Constraints-----\n1 \u2264 t \u2264 10^5\n\n-----Time complexity-----\nO(t*n)\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4419,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    a, b = int(a), int(b)\n    k = 0\n    possible = 0\n    while (1):\n        if (k == 0):\n            k = (a + b) % 10**9\n        elif (k == 1):\n            k = (a - b) % 10**9\n        else:\n            k = (a * b) % 10**9\n        if (k == a):\n            possible += 1\n        elif (k == b):\n            possible += 1\n            break\n        else:\n            k = (a - b) % 10**9\n    return str(possible)\n"
    },
    {
        "number": 4419,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n,k = map(int,stdin.split())\n    a = [list(map(int,str(i))) for i in range(1,n+1)]\n    answer = 0\n    for i in range(n-1):\n        a = [x[0] + k for x in a]\n        a = [x[0] - k for x in a]\n        if sum(a) < sum(a[-1]):\n            answer += i+1\n    return str(answer)\n    \nprint(solution(stdin))\n\ndef"
    },
    {
        "number": 4420,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    for t in range(int(stdin)):\n        n, x, y, k = map(int, input().split())\n        while n:\n            if n % x!= 0:\n                n //= y\n            else:\n                n -= 1\n        while k % y!= 0:\n            k //= y\n        print(k % y)\n    return \"\"\n\n\n-----Test-----\n>>> solution(5)\n12339\n>>> solution(1)\n1\n>>> solution(2)\n10\n>>> solution(7)\n12345\n>>> solution(12)\n12345\n>>> solution(15)\n12345\n>>> solution(22)\n12345\n>>> solution(48)\n12345\n>>> solution(99)\n12345\n>>> solution(0)\n'0'\n>>> solution(10000)\n'99999999'\n>>> solution(999999999)\n
    },
    {
        "number": 4420,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A = int(stdin[0])\n    B = int(stdin[1])\n    N = int(stdin[2])\n    \n    A -= 1\n    B -= 1\n    \n    \n    max_num = 0\n    for i in range(N):\n        #print(A, B)\n        #print(B, A % B)\n        \n        # A = A%B\n        # B = B%A\n        if A % B == 0:\n            A = A % B\n            B = B % A\n            \n            \n        max_num = max(max_num, A)\n    \n    return str(max_num)\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4420,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def dfs(x, y, n):\n        if n == 0:\n            return 0\n        return max(n-y, 0)\n\n    n = int(stdin.split(\" \")[1])\n    x, y = map(int, stdin.split(\" \"))\n    print(dfs(x, y, n))\n\nRuntime: 3035 ms, faster than 99.47% of Python3 online submissions for Maximum Non-Negative Integer in a Array.\nMemory Usage: 14.5 MB, less than 70.18% of Python3 online submissions for Maximum Non-Negative Integer in a Array.\n\"\"\"\n\n\nclass Solution:\n    def find_max_non_negative_integer(self, n: int, x: int, y: int) -> int:\n        x %= n\n        y %= n\n        if x == y:\n            return 0\n        while n!= 0:\n            n -= y\n            x += y\n        return x\n"
    },
    {
        "number": 4420,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    x, y = map(int, stdin.split())\n    l = [x]\n    for i in range(k):\n        l.append(l[-1] % y)\n    for i in range(n - 1, -1, -1):\n        if l[i]!= 0:\n            return str(l[i])\n        else:\n            l[i] = y\n    return '0'\n"
    },
    {
        "number": 4420,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = [int(i) for i in list(stdin.strip())]\n    x = 0\n    for i in range(len(a)):\n        x = x*a[i] + 1\n    k = x%n\n    if k == n:\n        print(k)\n    else:\n        print(\"0\")\n\n\n\n### "
    },
    {
        "number": 4420,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n    string = stdin.split()\n    \n    x = int(string[0])\n    y = int(string[1])\n    n = int(string[2])\n    \n    \n    def find_remainder(x, y, n):\n        for i in range(x, x+y, y):\n            if(i % n!= 0):\n                return False\n        return True\n    \n    \n    def find_non_negative(x, y, n):\n        for i in range(x, x+y, y):\n            if(i % n!= 0):\n                return False\n        return True\n    \n    \n    \n    \n    if(find_non_negative(x, y, n) and find_remainder(x, y, n)):\n        return str(max(x, y, n))\n    elif(find_non_negative(x, y, n) and not find_remainder(x, y, n)):\n        return str(max(x, n))\n    else:\n        return str(min(x, y, n))\n        \n        \n    \n        \n    \n    "
    },
    {
        "number": 4420,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    x, y = map(int, stdin.split())\n    \n    if k % x == y:\n        return str(k % x)\n    else:\n        return str(n % k) + \" \" + str(k % x)\n\nprint(solution(\"0 1 2 1 4 5 3\"))\nprint(solution(\"2 3 2\"))\nprint(solution(\"2 2 2\"))\nprint(solution(\"5 9 8 5 6 2\"))"
    },
    {
        "number": 4420,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[1])\n    k = int(stdin.split()[2])\n    res = 0\n    for i in range(k, n+1, k):\n        res = res*10 + i\n    return str(res)\n"
    },
    {
        "number": 4420,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, *x, *y = stdin\n    x = list(map(int, x))\n    y = list(map(int, y))\n    x = list(map(lambda x: x*x%10+x, x))\n    y = list(map(lambda y: y*y%10+y, y))\n    if x == y:\n        x = 0\n        y = n%10\n    k = (n*(n+1))//2\n    return str(max(x, y)) + str(k%10)\n"
    },
    {
        "number": 4420,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin) % int(stdin))\n"
    },
    {
        "number": 4421,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    n,k = map(int,stdin.split())\n    \n    boxes = [int(stdin.split()[i]) for i in range(n)]\n    \n    if n == 1:\n        return str(max(boxes))\n    \n    if k >= max(boxes):\n        return str(k)\n    \n    result = [0]\n    for i in range(1,k+1):\n        result.append(result[i-1]+boxes[i-1])\n    \n    return str(max(result))\n\n\n\ndef"
    },
    {
        "number": 4421,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    box = [int(x) for x in stdin.split()]\n    if len(box) > n:\n        return str(len(box))\n    elif len(box) < n:\n        return '-'\n    else:\n        i = 0\n        answer = 0\n        while i < n:\n            count = 0\n            j = 0\n            while j < len(box):\n                if box[j] + box[i] <= k:\n                    count += 1\n                j += 1\n            answer += count\n            i += 1\n        return str(answer)\n"
    },
    {
        "number": 4421,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    boxes = [[] for _ in range(n + 1)]\n    for _ in range(n):\n        boxes[int(stdin.split()[0])].append(int(stdin.split()[1]))\n    \n    answer = 0\n    for i in range(1, n + 1):\n        answer += (k // i) * sum(boxes[i])\n        k %= i\n    return str(answer)\n\"\"\"\ndef"
    },
    {
        "number": 4421,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    for line in stdin.split():\n        n, k = map(int, line.split())\n        if n % k!= 0:\n            return str(n % k)\n    return str(n)"
    },
    {
        "number": 4421,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    #Create a nested dictionary\n    class nested_dict(dict):\n        def __init__(self, **kwargs):\n            super(nested_dict, self).__init__(**kwargs)\n\n        def __missing__(self, key):\n            self[key] = nested_dict(**self[key])\n            return self[key]\n\n    #Create an object\n    stdin = stdin.split(\"\\n\")\n    n = int(stdin[0])\n    k = int(stdin[1])\n    \n    #Create an object with the nested dictionary\n    d = nested_dict()\n    \n    #Create a list of pairs of the boxes\n    boxes = list(map(int, stdin[2:]))\n    \n    #Create a nested dictionary with the list of pairs\n    d = nested_dict(**dict(zip(boxes, boxes)))\n    \n    #Count all the boxes\n    box = 1\n    for i in boxes:\n        box += i\n        \n    #Create an array of pairs of boxes\n    pairs = list(map(tuple, boxes))\n    \n    #Sum the pairs\n    sum = 0\n    for j in pairs:\n        sum += j[1]*box\n        \n    #Create the maximum number of pairs\n    max = 0\n    for j in pairs:\n        if j[0] - j[1] > max:\n            max = j[0] - j[1]\n        \n    #Calculate the number of pairs\n    box = 1\n    for j in pairs:\n        if j[0] - j[1] == max:\n            box += 1\n    \n    #Calculate the max value\n    value = 0\n    for j in pairs:\n        if j[0] - j[1] == max:\n            value += j[0] * box\n            \n    #Create an array of pairs of boxes\n    pairs = []\n    for j in boxes:\n        for i in range(j, j+k):\n            pairs.append((i, j))\n\n    #Calculate the number of pairs\n    box = 1\n    for j in pairs:\n        if j[0] - j[1] == box:\n            box += 1\n    \n    #Create an array of pairs of boxes\n    pairs = []\n    for j in boxes:\n        for i in range(j, j+k):\n            pairs.append((i, j))\n    \n    #Create a nested dictionary with the list of pairs\n    d = nested_dict(**dict(zip(pairs, pairs)))\n    \n    #Calculate the number of pairs\n    box = 1\n    for j in pairs:\n        if j[0] - j[1] == box:\n            box += 1\n    \n    #Create an array of pairs of boxes\n    pairs = []\n    for j in boxes:\n        for i in range(j, j+k):\n            pairs.append((i, j))\n    \n    #Create an array of pairs of boxes\n    pairs = []\n    for j in boxes:\n        for i in range(j, j+k):\n            if i == j:\n                pairs.append((i, j))\n    \n    #Create an array of pairs of boxes\n    pairs = []\n    for j in boxes:\n        for i in range(j, j+k):\n            if i == j:\n                pairs.append((i, j))\n    \n    #Create an array of pairs of boxes\n    pairs = []\n    for j in boxes:\n        for i in range(j, j+k):\n            if i == j:\n                pairs.append((i, j))\n    \n    #Create an array of pairs of boxes\n    pairs = []\n    for j in boxes:\n        for i in range(j, j+k):\n            if i == j:\n                pairs.append((i, j))\n    \n    #Create an array of pairs of boxes\n    pairs = []\n    for j in boxes:\n        for i in range(j, j+k):\n            if i == j:\n                pairs.append((i, j))\n    \n    #Create an array of pairs of boxes\n    pairs = []\n    for j in boxes:\n        for i in range(j, j+k):\n            if i == j:\n                pairs.append((i, j))\n    \n    #Create an array of pairs of boxes\n    pairs = []\n    for j in boxes:\n        for i in range(j, j+k):\n            if i == j:\n                pairs.append((i, j))\n    \n    #Create an array of pairs of boxes\n    pairs = []\n    for j in boxes:\n        for i in range(j, j+k):\n            if i == j:\n                pairs.append((i, j))\n    \n    #Create an array of pairs of boxes\n    pairs = []\n    for j in boxes:\n        for i in range(j, j+k):\n            if i == j:\n                pairs.append((i, j))\n    \n    #Create an array of pairs of boxes\n    pairs = []\n    for j in boxes:\n        for i in range(j, j+k):\n            if i == j:\n                pairs.append((i, j))\n    \n    #Create an array of pairs of boxes\n    pairs = []\n    for j in boxes:\n        for i in range(j, j+k):\n            if i == j:\n                pairs.append((i, j))\n    \n    #Create an array of pairs of boxes\n    pairs = []\n    for j in boxes:\n        for i in range(j, j+k):\n            if i == j:\n                pairs.append((i, j))\n    \n    #Create an array of pairs of boxes\n    pairs = []\n    for j in boxes:\n        for i in range(j, j+k):\n            if i == j:\n                pairs.append((i, j))\n    \n    "
    },
    {
        "number": 4421,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    ans = 0\n    \n    if (n!= 1 and n!= 2) or (n!= 2 and n!= 3) or (n!= 3 and n!= 5) or (n!= 5 and n!= 6) or (n!= 6 and n!= 8):\n        return \"0\"\n    \n    for i in range(1, k+1):\n        if n % i == 0:\n            ans += n // i\n            \n    return str(ans)\n"
    },
    {
        "number": 4421,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n,k = map(int,stdin.split())\n    boxes = []\n    for _ in range(n):\n        boxes.append(list(map(int,stdin.split())))\n    return str(max(boxes[k-1]))\n"
    },
    {
        "number": 4421,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    box = list(map(int, stdin.split()))\n    gifts = []\n    for i in range(len(box)):\n        for j in range(i+1, len(box)):\n            gifts.append(box[i] + box[j])\n    gifts.sort()\n    answer = 1\n    for i in range(1,len(gifts)):\n        answer = max(answer,i+1)\n    return str(answer)\n\n---Code Explanation---\n\nFor example, given:\n\nBox  Candies\n7 2\n1 2 2 3 2 4 10\n\nBox  Candies\n7 3\n1 2 2 3 2 4 5\n\nBox  Candies\n7 3\n1 2 2 3 2 4 5\n\nBox  Candies\n7 3\n1 2 2 3 2 4 5\n\nBox  Candies\n7 3\n1 2 2 3 2 4 5\n\nBox  Candies\n7 3\n1 2 2 3 2 4 5\n\nSo solution(stdin) = 8 because the boxes are represented as pairs of boxes (pairs are presented by indices of corresponding boxes).\n\nHere the number of boxes is the smaller of the two, so we can count the maximum number of boxes that can be given.\n\nIf we go through the boxes one by one, the boxes are represented by pairs of boxes.\n\nThe biggest box we can have with no more than two candies is the smallest.\n\nFor example, Box  Candies\n\n7 2\n1 2 2 3 2 4 10\n\nBox  Candies\n\n7 3\n1 2 2 3 2 4 5\n\nBox  Candies\n\n7 3\n1 2 2 3 2 4 5\n\nBox  Candies\n\n7 3\n1 2 2 3 2 4 5\n\nBox  Candies\n\n7 3\n1 2 2 3 2 4 5\n\nSo solution(stdin) = 4 because the boxes are represented as pairs of boxes (pairs are presented by indices of corresponding boxes).\n\nBut as we go to the next box, we have one more candy.\n\nIn this case we can still count the boxes that will be allocated with the other four boxes.\n\nHere we don't have to count the other four boxes because they are all the same candies.\n\nFor example, Box  Candies\n\n7 2\n1 2 2 3 2 4 10\n\nBox  Candies\n\n7 3\n1 2 2 3 2 4 5\n\nBox  Candies\n\n7 3\n1 2 2 3 2 4 5\n\nBox  Candies\n\n7 3\n1 2 2 3 2 4 5\n\nSo solution(stdin) = 8 because the boxes are represented as pairs of boxes (pairs are presented by indices of corresponding boxes).\n\nFor example, Box  Candies\n\n7 2\n1 2 2 3 2 4 10\n\nBox  Candies\n\n7 3\n1 2 2 3 2 4 5\n\nBox  Candies\n\n7 3\n1 2 2 3 2 4 5\n\nBox  Candies\n\n7 3\n1 2 2 3 2 4 5\n\nSo solution(stdin) = 4 because the boxes are represented as pairs of boxes (pairs are presented by indices of corresponding boxes).\n\nHow many boxes will Polycarp be able to give?\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4421,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, k = map(int, stdin.split())\n    answer = [n]\n    \n    for i in range(n - 1):\n        for j in range(n - 1):\n            candies = [0 for _ in range(k + 1)]\n            candies[0] = 0\n            candies[1] = 0\n            for kk in range(2, k + 1):\n                candies[kk] = candies[kk - 1] + candies[kk]\n            answer.append(candies[k])\n    \n    answer.sort()\n    print('\\n'.join([str(answer[i]) for i in range(len(answer))]))"
    },
    {
        "number": 4421,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, k = map(int, stdin.split())\n    d = [int(x) for x in stdin.split()]\n    \n    numbers = list(range(n + 1))\n    \n    def find(numbers, d):\n        \n        if len(d) == 1:\n            return d[0]\n        \n        if d[0] > d[1]:\n            return d[0] + find(numbers, d[1:])\n        else:\n            return find(numbers[:d[0]], d[:d[0]] + [d[1]] + d[d[0]+1:])\n            \n    return find(numbers, [])\n\"\"\"\n\nimport sys\ninput = sys.stdin.readline\n\ndef"
    },
    {
        "number": 4422,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n,k=map(int,stdin.split())\n    \n    A,B,C=map(str,input().split())\n    \n    if A<=B<=C:\n        return B[:k]+A[:k]\n    else:\n        return A[:n-k]\n\n    \n"
    },
    {
        "number": 4422,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[int(stdin.split()[-1])-1].lower()\n\n----Examples----\nsolution(\"1 ABC\")\nsolution(\"2 B\")\nsolution(\"3 A\")\nsolution(\"4 3\")\n\n-----------------------------\n\ndef"
    },
    {
        "number": 4422,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = list(stdin.split())\n    for i in range(n):\n        s[i] = s[i].lower()\n    for i in range(n-k):\n        s[i+k] = s[i+k].lower()\n    return \"\".join(s)\n\n\nprint(solution
    },
    {
        "number": 4422,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"\".join(sorted(list(stdin), key=lambda x: x.lower()))"
    },
    {
        "number": 4422,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[0:len(stdin)//2].lower()\n    \n"
    },
    {
        "number": 4422,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n    # Convert the string in string of all the chars\n    # in the string into a set\n    string = set(stdin)\n    \n    # Take the first K chars\n    return \"\".join(string.pop() for _ in range(len(string)))\n"
    },
    {
        "number": 4422,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    s = stdin.strip().split()\n    K = int(input())\n    \n    return s[K - 1]\n"
    },
    {
        "number": 4422,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    print(stdin[N-1].lower())\n    return stdin[N-1].lower()\n"
    },
    {
        "number": 4422,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join(map(str, sorted(stdin.split(), key=lambda x: int(x) - 1)))"
    },
    {
        "number": 4422,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    l = list(stdin)\n    i = 0\n    ans = ''\n    while i < n:\n        if k > i:\n            k -= i\n            ans = l[i] + ans\n            i += 1\n        else:\n            ans += l[i]\n            i += 1\n    return ans\n\nprint(solution(input()))\n'''"
    },
    {
        "number": 4423,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lst = stdin.split(\"\\n\")\n    # print(lst)\n    lst = list(map(lambda x: x.split(\":\"), lst))\n    # print(lst)\n    lst = sorted(lst, key = lambda x: x[0])\n    # print(lst)\n    for i in lst:\n        print(i[0], i[1])\n    return \"\"\n\n    # print(\" \".join(map(str, lst)))\n    # print(lst)\n    # return \"\".join(map(str, lst))\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4423,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x, y = map(int, stdin.split())\n    \n    answer = [0] * n\n    \n    for i in range(n):\n        s = input()\n        arr = s.split(' ')\n        answer[i] = arr[0]\n        \n    answer.sort(reverse = True)\n    \n    for i in range(n):\n        if x == answer[i]:\n            answer[i] = str(k + y - i)\n    \n    return '\\n'.join(answer)\n"
    },
    {
        "number": 4423,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join(map(str, sorted(range(len(stdin)))))\n"
    },
    {
        "number": 4423,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    arr = []\n    for _ in range(N):\n        arr.append(tuple(map(int, stdin.strip().split())))\n\n    def get_nearest_restaurant(city):\n        city_dist = [0] * N\n        for i in range(N):\n            city_dist[i] = abs(arr[i][0] - city) + abs(arr[i][1] - city)\n        return min(city_dist)\n\n    s = solution\n    for city in range(N):\n        s(arr[city][0] + 1)\n        s(arr[city][1] + 1)\n\n    return \" \".join(str(x) for x in sorted(range(N), key=get_nearest_restaurant))\n\nPrints the identification numbers of the restaurants in the order they are introduced in the book.\n\nTime complexity of the solution function is O(N^2).\nSpace complexity of the solution function is O(N).\n'''\n\ndef"
    },
    {
        "number": 4423,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    restaurants = []\n    for _ in range(N):\n        line = stdin.strip().split()\n        restaurants.append(line[0])\n        restaurants.append(line[1])\n    for i in range(N):\n        print(restaurants[i], end=' ')\n    print()\n    for i in range(N-1, -1, -1):\n        print(restaurants[i], end=' ')\n    print()\n    for i in range(N-1, -1, -1):\n        print(i, end=' ')\n    print()\n    for i in range(N):\n        print(restaurants[i], end=' ')\n    print()\n    for i in range(N-1, -1, -1):\n        print(i, end=' ')\n    print()\n    for i in range(N):\n        print(i, end=' ')\n    print()\n    for i in range(N-1, -1, -1):\n        print(i, end=' ')\n    print()\n    for i in range(N-1, -1, -1):\n        print(i, end=' ')\n    print()\n    for i in range(N):\n        print(i, end=' ')\n    print()\n    for i in range(N-1, -1, -1):\n        print(i, end=' ')\n    print()\n    for i in range(N):\n        print(i, end=' ')\n    print()\n    for i in range(N):\n        print(i, end=' ')\n    print()\n    for i in range(N):\n        print(i, end=' ')\n    print()\n    for i in range(N):\n        print(i, end=' ')\n    print()\n    for i in range(N):\n        print(i, end=' ')\n    print()\n    for i in range(N-1, -1, -1):\n        print(i, end=' ')\n    print()\n    for i in range(N-1, -1, -1):\n        print(i, end=' ')\n    print()\n    for i in range(N):\n        print(i, end=' ')\n    print()\n    for i in range(N):\n        print(i, end=' ')\n    print()\n    for i in range(N):\n        print(i, end=' ')\n    print()\n    for i in range(N):\n        print(i, end=' ')\n    print()\n    for i in range(N):\n        print(i, end=' ')\n    print()\n    for i in range(N):\n        print(i, end=' ')\n    print()\n    for i in range(N):\n        print(i, end=' ')\n    print()\n    for i in range(N):\n        print(i, end=' ')\n    print()\n    for i in range(N):\n        print(i, end=' ')\n    print()\n    for i in range(N):\n        print(i, end=' ')\n    print()\n    for i in range(N):\n        print(i, end=' ')\n    print()\n    for i in range(N):\n        print(i, end=' ')\n    print()\n    for i in range(N):\n        print(i, end=' ')\n    print()\n    for i in range(N):\n        print(i, end=' ')\n    print()\n    for i in range(N):\n        print(i, end=' ')\n    print()\n    for i in range(N):\n        print(i, end=' ')\n    print()\n    for i in range(N):\n        print(i, end=' ')\n    print()\n    for i in range(N):\n        print(i, end=' ')\n    print()\n    for i in range(N):\n        print(i, end=' ')\n    print()\n    for i in range(N):\n        print(i, end=' ')\n    print()\n    for i in range(N):\n        print(i, end=' ')\n    print()\n    for i in range(N):\n        print(i, end=' ')\n    print()\n    for i in range(N):\n        print(i, end=' ')\n    print()\n    for i in range(N):\n        print(i, end=' ')\n    print()\n    for i in range(N):\n        print(i, end=' ')\n    print()\n    for i in range(N):\n        print(i, end=' ')\n    print()\n    for i in range(N):\n        print(i, end=' ')\n    print()\n    for i in range(N):\n        print(i, end=' ')\n    print()\n    for i in range(N):\n        print(i, end=' ')\n    print()\n    for i in range(N):\n        print(i, end=' ')\n    print()\n    for i in range(N):\n        print(i, end=' ')\n    print()\n    for i in range(N):\n        print(i, end=' ')\n    print()\n    for i in range(N):\n        print(i, end=' ')\n    print()\n    for i in range(N):\n        print(i, end=' ')\n    print()\n    for i in range(N):\n        print(i, end=' ')\n    print()\n    for i in range(N):\n        print(i, end=' ')\n    print()\n    for i in range(N):\n        print(i, end=' ')\n    print()\n    for i in range(N):\n        print(i, end=' ')\n    print()\n    for i in range(N):\n        print(i, end=' ')\n    print()\n    for i in range(N):\n        print(i, end=' ')\n    print()\n    for i in range(N):\n        print(i, end=' ')\n    print()\n    for i in range(N):\n        print(i, end=' ')\n    print()\n    for i in range(N):\n        print(i, end=' ')\n    print()\n    for i in range(N):\n        print(i, end=' ')\n    print()\n    for i in range(N):\n        print(i, end=' ')\n    print()\n    for i in range(N):\n        print(i, end=' ')\n    print()\n    for i in range(N):\n        print(i, end=' ')\n    print()\n    for i in range(N):\n        print(i, end='"
    },
    {
        "number": 4423,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    inp = stdin\n    N = int(inp[:inp.find(\" \")])\n    restaurants = {}\n    for i in range(2, N+1):\n        restaurants[i] = []\n    for line in inp.split(\"\\n\"):\n        if line[:5] == \":\":\n            score = int(line[6:])\n            city = line[5:]\n            restaurants[1].append((score, city))\n        else:\n            city, score = line.split(\" \")\n            city = city.strip()\n            score = int(score)\n            restaurants[score].append((city, score))\n    \n    def sort_restaurants(score, cities):\n        res = []\n        for i in range(score):\n            city, score = cities[i]\n            res.append((city, score))\n        res.sort(key=lambda x: x[1])\n        res.sort(key=lambda x: x[1], reverse=True)\n        return [city for city, score in res]\n\n    cities = []\n    for i in range(N):\n        cities.append(restaurants[i+1][0][0])\n    cities.sort(key=lambda x: x)\n    answer = \"\"\n    for city in cities:\n        answer += city + \" \"\n    answer = answer[:-1]\n    return answer\n\n\nprint(solution(inp))"
    },
    {
        "number": 4423,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, p = [int(i) for i in stdin.split(\" \")]\n    places = []\n    for _ in range(n):\n        places.append([int(i) for i in input().split(\" \")])\n    place_mapping = {}\n    for place in places:\n        place_mapping[place[0]] = place[1]\n    \n    restaurants = []\n    for place in places:\n        restaurants.append([place[0], place[1]])\n\n    result = []\n    for place in restaurants:\n        if place[0] not in place_mapping:\n            continue\n        result.append(place_mapping[place[0]] + str(place[1]))\n        \n    result.sort()\n    for i in range(n):\n        print(i + 1, result[i])\n    return \" \".join(result)"
    },
    {
        "number": 4423,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip().split()[0])\n    P = list(map(int, stdin.strip().split()[1:]))\n    answer = [0] * N\n    for i in range(N):\n        while True:\n            if answer[i] < P[i]:\n                answer[i] += 1\n            else:\n                break\n    return '\\n'.join(map(str, answer))"
    },
    {
        "number": 4423,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip().rstrip())\n    lst = []\n    for i in range(n):\n        lst.append(list(map(int, stdin.strip().split())))\n    # print(lst)\n    # print(lst[0][0])\n    # print(lst[-1][0])\n    result = lst[-1][0]\n    for i in range(len(lst)):\n        # print(lst[i][0])\n        if i!= 0:\n            result = max(result, lst[i][0])\n    print(result)\n    return str(result)\n\nprint(solution(\"3 4 6 1 5 2\"))\nprint(solution(\"2 3 6 1 5 2\"))\nprint(solution(\"1 2 3 4 5 6\"))\nprint(solution(\"1 2 3 4 5 6\"))\nprint(solution(\"1 2 3 4 5 6\"))\nprint(solution(\"1 2 3 4 5 6\"))\nprint(solution(\"1 2 3 4 5 6\"))\nprint(solution(\"2 3 4 5 6 1\"))\n"
    },
    {
        "number": 4423,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, p = list(map(int, stdin.split()))\n    \n    # get all the restaurant names in the first city\n    city_1 = list(map(int, stdin.split()))\n    # get all the restaurants in that city in alphabetical order\n    city_name = sorted(list(set(city_1)))\n    \n    # get all the restaurant names in the second city\n    city_2 = list(map(int, stdin.split()))\n    # get all the restaurant names in that city in alphabetical order\n    city_name2 = sorted(list(set(city_2)))\n    \n    # for each of the cities, do not include the city, add to the result\n    result = []\n    for i in range(n):\n        temp = city_name[i]\n        for j in range(i,n):\n            temp = temp + city_name2[j]\n        result.append(temp)\n    # now print the result\n    for i in range(n):\n        print(result[i], end ='')\n\n-----Sample Output-----\n3\n4\n6\n1\n5\n2\n\nThe lexicographical order of the names of the three cities is kazan < khabarovsk < moscow. For each of these cities, the restaurants in it are introduced in descending order of score. Thus, the restaurants are introduced in the order 3,4,6,1,5,2.\nThe result is printed.\n\n-----Constraints-----\n - 1 \u2264 N \u2264 100\n - S is a string of length between 1 and 10 (inclusive) consisting of lowercase English letters.\n - 0 \u2264 P_i \u2264 100\n - P_i is an integer.\n - P_i \u2260 P_j (1 \u2264 i < j \u2264 N)\n\n-----Input-----\nInput is given from STDIN. The first line contains a single integer T, the number of test cases. Then T test cases follow. Each test case contains two lines.\nThe first line contains a single integer N, the number of restaurants.\nThe second line contains N space separated integers P_1, P_2,..., P_N, representing the scores of the restaurants.\n\nOutput\nFor each test case, output a single line containing the identifier of the restaurant that is introduced in the book.\nConstraints\n1 \u2264 T \u2264 100\n0 \u2264 P_i \u2264 100\n-100 \u2264 P_i \u2264 100\n\n-----Sample Input-----\n6\nkhabarovsk 20\nmoscow 10\nkazan 50\nkazan 35\nmoscow 60\nkhabarovsk 40\n\n-----Sample Output-----\n2\n3\n5\n4\n1\n4\n\nThe lexicographical order of the names of the three cities is kazan < khabarovsk < moscow. For each of these cities, the restaurants in it are introduced in descending order of score. Thus, the restaurants are introduced in the order 3,4,6,1,5,2.\nThe result is printed.\n\n-----Constraints-----\n - 1 \u2264 N \u2264 100\n - S is a string of length between 1 and 10 (inclusive) consisting of lowercase English letters.\n - 0 \u2264 P_i \u2264 100\n - P_i is an integer.\n - P_i \u2260 P_j (1 \u2264 i < j \u2264 N)\n\n-----Input-----\nInput is given from STDIN. The first line contains a single integer T, the number of test cases. Then T test cases follow.\nEach test case contains two lines.\nThe first line contains a single integer N, the number of restaurants.\nThe second line contains N space separated integers P_1, P_2,..., P_N, representing the scores of the restaurants.\n\nOutput\nFor each test case, output a single line containing the identifier of the restaurant that is introduced in the book.\nConstraints\n1 \u2264 T \u2264 100\n0 \u2264 P_i \u2264 100\n-100 \u2264 P_i \u2264 100\n\n-----Sample Output-----\n4\n1\n5\n2\n2\n\nThe lexicographical order of the names of the three cities is kazan < khabarovsk < moscow. For each of these cities, the restaurants in it are introduced in descending order of score. Thus, the restaurants are introduced in the order 4,5,2,1,5,2.\nThe result is printed.\n\n-----Constraints-----\n - 1 \u2264 N \u2264 100\n - S is a string of length between 1 and 10 (inclusive) consisting of lowercase English letters.\n - 0 \u2264 P_i \u2264 100\n - P_i is an integer.\n - P_i \u2260 P_j (1 \u2264 i < j \u2264 N)\n\n-----Input-----\nInput is given from STDIN. The first line contains a single integer T, the number of test cases. Then T test cases follow.\nEach test case contains two lines.\nThe first line contains a single integer N, the number of restaurants.\nThe second line contains N space separated integers P_1, P_2,..., P_N, representing the scores of the restaurants.\n\nOutput\nFor each test case, output a single line containing the identifier of the restaurant that is introduced in the book.\nConstraints\n1 \u2264 T \u2264 100\n0 \u2264 P_i \u2264 100\n-100 \u2264 P_i \u2264 100\n\n-----Sample Output-----\n4\n1\n5\n2\n2\n\nThe lexicographical order of the names of the three cities is kazan < khabarovsk < moscow. For each of these cities, the restaurants in it are introduced in descending order of score. Thus, the restaurants are introduced in the order 4,5,2,1,5,2.\nThe result is printed.\n\n-----Constraints-----\n - 1 \u2264 N \u2264 100\n - S is a string of length between 1 and 10 (inclusive) consisting of lowercase English letters.\n - 0 \u2264 P_i \u2264 100\n - P_i is an integer.\n - P_i \u2260 P_j (1 \u2264 i < j \u2264 N)\n\n-----Input-----\nInput is given from STDIN. The first line contains a single integer T, the number of test cases. Then T test cases follow.\nEach test case contains two lines.\nThe first line contains a single integer N, the number of restaurants.\nThe second line contains N space separated integers P_1, P_2,..., P_N, representing the scores of the restaurants.\n\nOutput\nFor each test case, output a single line containing the identifier of the restaurant that is introduced in the book.\nConstraints\n1 \u2264 T \u2264 100\n0 \u2264 P_i \u2264 100\n-100 \u2264 P_i \u2264 100\n\n-----Sample Output-----\n3\n1\n4\n4\n\nThe lexicographical order of the names of the three cities is kazan < khabarovsk < moscow. For each of these cities, the restaurants in it are introduced in descending order of score. Thus, the restaurants are introduced in the order 3,4,6,1,5,2.\nThe result is printed.\n\n-----Constraints-----\n - 1 \u2264 N \u2264 100\n - S is a string of length between 1 and 10 (inclusive) consisting of lowercase English letters.\n - 0 \u2264 P"
    },
    {
        "number": 4424,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t, N = map(int, stdin.split())\n    possible_sums = [t // 1000, t // 100, t // 10, t]\n    print(possible_sums)\n    \n    for i in range(N):\n        s = map(int, input().split())\n        print(s)\n        if possible_sums[i] < s[0] or (s[0] == possible_sums[i] and possible_sums[i] < s[1]):\n            return \"No\"\n    return \"Yes\""
    },
    {
        "number": 4424,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    print('YES')"
    },
    {
        "number": 4424,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    K, X = map(int, stdin.split())\n    \n    # Write your code here\n    if K+X <= 100:\n        print(\"Yes\")\n    else:\n        print(\"No\")"
    },
    {
        "number": 4424,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    coins = list(map(int, stdin.split()))\n    K = int(stdin.split()[1])\n    print(min(sum(coins), K))\n    return \"Yes\"\n"
    },
    {
        "number": 4424,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lst = list(map(int, stdin.split(' ')))\n    lst.sort()\n    print('Yes' if sum(lst) >= 200 else 'No')\n"
    },
    {
        "number": 4424,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    K, X = [int(x) for x in stdin.split()]\n    Yen = 0\n    for i in range(K):\n        if 100*X + i*10**5 < Yeen:\n            Yen = 100*X + i*10**5\n        else:\n            Yen += 10**i\n    print(Yen < X)\n    return \"Yes\" if Yeen < X else \"No\""
    },
    {
        "number": 4424,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    k, x = map(int, stdin.split())\n    if x >= k:\n        print('Yes')\n    else:\n        print('No')\n    "
    },
    {
        "number": 4424,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin) % 2!= 0:\n        return 'No'\n\n    def get_yen(x):\n        return int(x) * 500\n\n    def get_x(x):\n        if x >= 1000000:\n            return 'Yes'\n        elif x >= 100:\n            return 'No'\n        return 'No'\n\n    K = int(stdin[0])\n    X = int(stdin[1])\n\n    yen = 0\n    x = 0\n    while x < K:\n        yen = get_yen(yen)\n        x += get_x(x)\n\n    return get_x(x) if x < K else get_x(x) +'No'\n"
    },
    {
        "number": 4424,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    print(str(N//K+1) +'' + str(N%K+1) +'' + str(N%K==0))"
    },
    {
        "number": 4424,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    K, X = map(int, stdin.split())\n    \n    c = 1\n    \n    for i in range(1, K):\n        c *= X - i\n        if c < 0:\n            return 'No'\n        else:\n            c //= X\n            \n    return 'Yes'"
    },
    {
        "number": 4425,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    while K > N:\n        K = K // N\n    print(K)\n    return str(int(K * (1 + K * 1.1)))\n---\ndef"
    },
    {
        "number": 4425,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    score = list(map(int, stdin.split()))\n    n = N\n    k = K\n    for i in range(1, len(score)):\n        score[i] += score[i-1]\n    for i in range(N):\n        if score[i] > k:\n            score[i] += score[i-1]\n        elif score[i] < k:\n            score[i] -= score[i-1]\n        else:\n            score[i] = score[i]\n    return '%.2f' % sum(score)\n\ndef"
    },
    {
        "number": 4425,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    assert(1 <= N <= 10**5)\n    assert(1 <= K <= 10**5)\n    assert(0 <= sum(map(int, str(N))))\n    assert(0 <= sum(map(int, str(K))))\n    \n    def flip_die(k, r):\n        assert(0 <= k <= N)\n        assert(r <= k * k)\n        \n        flip_value = (k * r)\n        r += flip_value\n        return r\n        \n    def flip_coin(k):\n        return (k * k) // 2\n        \n    def is_good(n):\n        assert(0 <= n <= K)\n        \n        if n == K:\n            return True\n        \n        if n % K == 0:\n            n = n / K\n            return is_good(n)\n        \n        if n % K!= 0:\n            n = flip_die(n, K)\n            return is_good(n)\n        \n        return False\n    \n    def multiply(k, r):\n        assert(0 <= r <= K)\n        return k * r\n        \n    def is_good_prob(n):\n        assert(0 <= n <= K)\n        return n % K == 0\n        \n    for r in range(2, K):\n        n = multiply(N, r)\n        if is_good(n):\n            print(1)\n            return\n    \n    if is_good_prob(N):\n        print(0)\n        return\n    \n    if N % K!= 0:\n        n = flip_die(N, K)\n        if is_good(n):\n            print(1)\n            return\n    if N % K == 0:\n        n = flip_die(N, K)\n        if is_good(n):\n            print(0)\n            return\n    \n    print(0)\n    return\n"
    },
    {
        "number": 4425,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    return str(int(K / (1/N * (1/2)))) + \".\""
    },
    {
        "number": 4425,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, k = map(int, stdin.split())\n    \n    if k == 1:\n        return '1/4'\n    elif k == 2:\n        return '2/3'\n    elif k == 3:\n        return '3/2'\n    \n    if n > k:\n        return '0'\n    else:\n        return '1'"
    },
    {
        "number": 4425,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n <= k:\n        return str(1/(1+k))\n    else:\n        return str(1/(1/(n-k)+(1/2)))\n"
    },
    {
        "number": 4425,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    scores = list(map(int, stdin.split()))\n    if 0 <= K <= 10**9:\n        result = 0\n    else:\n        for score in scores:\n            if 0 <= score <= K:\n                result += 1\n            else:\n                result += (score % 1) ** 3\n    print(round(result / (48 * 24), 5))\n    return \"\"\nprint(solution(\"3 4\"))\n"
    },
    {
        "number": 4425,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    counts = [1, 2, 3]\n    for n in range(4, N + 1):\n        counts.append(counts[-1] * counts[-2] * counts[-3])\n    return str(counts[K] * counts[N])\n"
    },
    {
        "number": 4425,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    sum_ = (K*(K+1))//2\n    return str(round(sum_/N, 4))\n\n\ndef"
    },
    {
        "number": 4425,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    die = [int(i) for i in stdin.split()]\n    prob = 1\n    for k in range(1,K):\n        prob *= (1-k/K)\n    for j in die:\n        prob *= (1-j/K)\n    return str(round(prob,3))\n\n\n  probability = 1\n  prob = 1\n  for j in die:\n    prob *= (1-j/K)\n    prob *= (1-die[j-1])\n    prob *= (1-die[j])\n    prob *= (1-die[j+1])\n    prob *= (1/K)\n    prob *= (1/N)\n    prob *= (1/prob)\n    prob *= (1/prob)\n    prob *= (1/prob)\n    prob *= (1/prob)\n    prob *= (1/prob)\n  return str(round(prob,3))"
    },
    {
        "number": 4426,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    weekday = \"SUN\"\n    days = int(stdin)\n    # weekday = str(weekday)\n    # print(weekday)\n    \n    while days > 0:\n        days -= 1\n        weekday = weekday[1:] + str(days)\n        # weekday = str(weekday)\n        # print(weekday)\n    \n    return weekday\n"
    },
    {
        "number": 4426,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    days = [0, 0, 0]\n    while True:\n        day = stdin.rstrip().split(' ')\n        if day[0] == 'W':\n            days[1] += 1\n        elif day[0] == 'T':\n            days[2] += 1\n        else:\n            days[0] = day[0]\n        if 'S' in days:\n            days[1] = days[1] + 1\n        else:\n            days[2] = days[2] + 1\n        if days[0] == 'F' or days[2] == 'F':\n            break\n    return str(days[0]) +'' + str(days[1]) +'' + str(days[2])"
    },
    {
        "number": 4426,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    days_one = 0\n    days_two = 0\n    days_three = 0\n    days_four = 0\n    days_five = 0\n\n    days = stdin.split()\n\n    for i in range(0, len(days)):\n        if days[i].isdigit():\n            days_one = days[i]\n        if days[i].isalpha():\n            days[i] = days[i].lower()\n\n    for i in range(0, len(days)):\n        if days[i].isdigit():\n            days_two = days[i]\n        if days[i].isalpha():\n            days[i] = days[i].lower()\n\n    for i in range(0, len(days)):\n        if days[i].isdigit():\n            days_three = days[i]\n        if days[i].isalpha():\n            days[i] = days[i].lower()\n\n    for i in range(0, len(days)):\n        if days[i].isdigit():\n            days_four = days[i]\n        if days[i].isalpha():\n            days[i] = days[i].lower()\n\n    for i in range(0, len(days)):\n        if days[i].isdigit():\n            days_five = days[i]\n        if days[i].isalpha():\n            days[i] = days[i].lower()\n\n    for i in range(0, len(days)):\n        if days[i].isdigit():\n            days[i] = days[i]\n            break\n\n    if days_one.isdigit() and days_two.isdigit() and days_three.isdigit() and days_four.isdigit() and days_five.isdigit():\n        days[-1] = days[-1].replace(\"S\", \"\")\n        days[-1] = days[-1].replace(\"T\", \"\")\n        days[-1] = days[-1].replace(\"U\", \"\")\n        days[-1] = days[-1].lower()\n\n        days[-1] = days[-1].replace(\"w\", \"\")\n\n        days[-1] = days[-1].replace(\"t\", \"\")\n        days[-1] = days[-1].replace(\"u\", \"\")\n        days[-1] = days[-1].lower()\n\n        days[-1] = days[-1].replace(\"w\", \"\")\n\n        days[-1] = days[-1].replace(\"th\", \"\")\n        days[-1] = days[-1].replace(\"t\", \"\")\n        days[-1] = days[-1].replace(\"u\", \"\")\n        days[-1] = days[-1].lower()\n\n        days[-1] = days[-1].replace(\"f\", \"\")\n        days[-1] = days[-1].replace(\"g\", \"\")\n        days[-1] = days[-1].lower()\n\n        days[-1] = days[-1].replace(\"e\", \"\")\n        days[-1] = days[-1].replace(\"n\", \"\")\n        days[-1] = days[-1].lower()\n\n        days[-1] = days[-1].replace(\"r\", \"\")\n        days[-1] = days[-1].replace(\"e\", \"\")\n        days[-1] = days[-1].lower()\n\n        days[-1] = days[-1].replace(\"a\", \"\")\n        days[-1] = days[-1].replace(\"n\", \"\")\n        days[-1] = days[-1].lower()\n\n        days[-1] = days[-1].replace(\"s\", \"\")\n\n        days[-1] = days[-1].replace(\"s\", \"\")\n        days[-1] = days[-1].replace(\"t\", \"\")\n        days[-1] = days[-1].replace(\"u\", \"\")\n        days[-1] = days[-1].lower()\n\n        days[-1] = days[-1].replace(\"t\", \"\")\n        days[-1] = days[-1].replace(\"u\", \"\")\n        days[-1] = days[-1].lower()\n\n        days[-1] = days[-1].replace(\"h\", \"\")\n        days[-1] = days[-1].replace(\"u\", \"\")\n        days[-1] = days[-1].lower()\n\n        days[-1] = days[-1].replace(\"d\", \"\")\n        days[-1] = days[-1].replace(\"e\", \"\")\n        days[-1] = days[-1].lower()\n\n        days[-1] = days[-1].replace(\"o\", \"\")\n        days[-1] = days[-1].replace(\"a\", \"\")\n        days[-1] = days[-1].lower()\n\n        days[-1] = days[-1].replace(\"q\", \"\")\n        days[-1] = days[-1].replace(\"q\", \"\")\n        days[-1] = days[-1].lower()\n\n        days[-1] = days[-1].replace(\"x\", \"\")\n        days[-1] = days[-1].replace(\"a\", \"\")\n        days[-1] = days[-1].lower()\n\n        days[-1] = days[-1].replace(\"z\", \"\")\n        days[-1] = days[-1].replace(\"w\", \"\")\n        days[-1] = days[-1].lower()\n\n        days[-1] = days[-1].replace(\"y\", \"\")\n        days[-1] = days[-1].replace(\"t\", \"\")\n        days[-1] = days[-1].replace(\"u\", \"\")\n        days[-1] = days[-1].lower()\n\n        days[-1] = days[-1].replace(\"e\", \"\")\n        days[-1] = days[-1].replace(\"n\", \"\")\n        days[-1] = days[-1].lower()\n\n        days[-1] = days[-1].replace(\"i\", \"\")\n        days[-1] = days[-1].replace(\"b\", \"\")\n        days[-1] = days[-1].lower()\n\n        days[-1] = days[-1].replace(\"a\", \"\")\n        days[-1] = days[-1].replace(\"n\", \"\")\n        days[-1] = days[-1].lower()\n\n        days[-1] = days[-1].replace(\"d\", \"\")\n        days[-1] = days[-1].replace(\"e\", \"\")\n        days[-1] = days[-1].lower()\n\n        days[-1] = days[-1].replace(\"j\", \"\")\n        days[-1] = days[-1].replace(\"y\", \"\")\n        days[-1] = days[-1].lower()\n\n        days[-1] = days[-1].replace(\"n\", \"\")\n        days[-1] = days[-1].replace(\"g\", \"\")\n        days[-1] = days[-1].lower()\n\n        days[-1] = days[-1].replace(\"m\", \"\")\n        days[-1] = days[-1].replace(\"a\", \"\")\n        days[-1] = days[-1].lower()\n\n        days[-1] = days[-1].replace(\"l\", \"\")\n        days[-1] = days[-1].replace(\"y\", \"\")\n        days[-1] = days[-1].lower()\n\n        days[-1] = days[-1].replace(\"j\", \"\")\n        days[-1] = days[-1].replace(\"j\", \"\")\n        days[-1] = days[-1"
    },
    {
        "number": 4426,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    day = 0\n    for s in stdin:\n        if s == 'S':\n            day += 1\n        else:\n            day -= 1\n            if day < 0:\n                day = 7\n    return str(day)\n\n\ndef"
    },
    {
        "number": 4426,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    days = stdin.split()\n    days = list(filter(lambda x: x!= '', days))\n    days.sort()\n    days.reverse()\n    for i in range(len(days) - 1):\n        if days[i] == days[i + 1]:\n            continue\n        else:\n            days.pop(i)\n    return str(len(days))\n"
    },
    {
        "number": 4426,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    d_left = {'SUN': 0, 'MON': 0, 'TUE': 0, 'WED': 0, 'THU': 0, 'FRI': 0, 'SAT': 0}\n    d_right = {'SUN': 0, 'MON': 0, 'TUE': 0, 'WED': 0, 'THU': 0, 'FRI': 0, 'SAT': 0}\n    day = 0\n    month = 0\n    saturday = False\n    \n    for char in stdin:\n        if char == 'S':\n            day += 1\n        elif char == 'T':\n            day += 1\n            month += 1\n        elif char == 'U':\n            saturday = True\n            day += 1\n        elif char == 'F':\n            day += 1\n            month -= 1\n        elif char == 'R':\n            day -= 1\n            month -= 1\n        elif char == 'P':\n            day -= 1\n            month += 1\n        elif char == 'D':\n            day += 1\n            month += 1\n        elif char == 'C':\n            day -= 1\n            month -= 1\n        elif char == 'M':\n            day -= 1\n            month -= 1\n        elif char == 'W':\n            day -= 1\n            month -= 1\n        elif char == 'H':\n            day -= 1\n            month += 1\n        elif char == 'O':\n            day -= 1\n            month -= 1\n        elif char == 'N':\n            day -= 1\n            month -= 1\n    if day == 0:\n        day = 31\n        month = 12\n    if month == 0:\n        month = 12\n        day = 31\n    if saturday:\n        day += 1\n    if day == 0:\n        day = 31\n        month = 12\n    return day"
    },
    {
        "number": 4426,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    days = 0\n    for i in range(7):\n        days += int(stdin[i].isnumeric())\n    days += (days%7)\n    return str(days)\n"
    },
    {
        "number": 4426,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    days = list(map(lambda x: x.split()[0], stdin.split(',')))\n    days = list(map(lambda x: int(x) - 1, days))\n    days.sort()\n    return str(days[-1])"
    },
    {
        "number": 4426,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return str(sum(1 for _ in range(7)))\n\n    -------GIVEN-------\n    st = \"SAT\"\n    -------HELP-------\n    print(sum(1 for _ in range(7)))\n    ------SAMPLE-------\n    print(sum(1 for _ in range(7)))\n\n    :param stdin:\n    :return:\n    \"\"\"\n    days = 0\n\n    for i in range(7):\n        if stdin[i] == 'T':\n            days += 1\n\n    return days\n\ndef"
    },
    {
        "number": 4426,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n  days = dict()\n  \n  for day in stdin:\n    if day == 'S':\n      days[day] = days.get(day, 0) + 1\n  for key in days.keys():\n    if days[key] == 7:\n      days[key] -= 1\n    else:\n      days[key] = 0\n  return str(days.get('T', 0))\n  \n"
    },
    {
        "number": 4427,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = map(int, stdin.split())\n    r, D = x[0], x[1]\n    if (r >= 2000 and r < 20000) or r >= 20000:\n        return list(str(int(D) * r - D))\n    x_next = r - D\n    if x_next >= 2000:\n        return list(str(int(D) * x_next - D))\n    if x_next >= 20000:\n        return list(str(int(D) * (r - 2000) - D)) + list(str(int(D) * x_next - D))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4427,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    _, r, D, x = stdin.split()\n    x = int(x)\n    r = int(r)\n    if r > 2000:\n        r = 2000\n    elif r < 0:\n        r = 0\n    D = int(D)\n    x_i = r - D\n    if x_i < r:\n        x_i = r - D\n    x_i = int(x_i)\n    for i in range(x_i, 10):\n        x_i += 10 * i\n        print(x_i)"
    },
    {
        "number": 4427,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def helper(r: int, d: int, x: int) -> str:\n        ret = str(int(x * r - d * x))\n        if len(ret) > 5:\n            return ret\n        if ret[0]!= '0':\n            ret = '0' + ret\n        return ret\n    n = int(stdin.strip())\n    x = int(stdin.strip().split(' ')[-1].strip())\n    for i in range(1, n + 1):\n        print(helper(float(stdin.strip().split(' ')[0]), float(stdin.strip().split(' ')[1]), float(stdin.strip().split(' ')[-1])), flush=True)\n    return str(x)"
    },
    {
        "number": 4427,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    r, D, x_i = map(int, stdin.split())\n    x_i = int(x_i)\n    x = 0\n    x_j = 0\n    for i in range(1, x_i + 1):\n        x += (r - D) * i\n        x_j += i\n    for i in range(x_j, x_j + r + 1):\n        print(i, end=' ')\n    print()\n    for i in range(x_i, x_i + x + 1):\n        print(i, end=' ')\n    print()\n    print(x)\n"
    },
    {
        "number": 4427,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return (r, D, x_i)\n\nfor _ in range(int(input())):\n    r, D, x_i = map(int, input().split())\n    print(solution(stdin))\n"
    },
    {
        "number": 4427,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin.split()[-1])\n    for i in range(1, 101):\n        x -= i * 200\n        print(x)\n    return str(x)\n\ndef"
    },
    {
        "number": 4427,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x_i = list(map(int, stdin.split(' ')))\n    i = 0\n    while True:\n        if i == len(x_i):\n            break\n        r = x_i[i] - D\n        x_i.remove(x_i[i])\n        x_i.remove(r)\n        i += 1\n    print(' '.join(map(str, x_i)))\n    return '\\n'.join(map(str, x_i))"
    },
    {
        "number": 4427,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    x = []\n    for i in range(2000, 2001):\n        x.append((int(stdin[i]) - 100))\n\n    x_total = [sum(x)]\n    x_total_mass = [sum(x)]\n    \n    for i in range(2, 101):\n        x_total.append(x[i] - x[i-2] - i * (x[i-2] + x[i-1]))\n        x_total_mass.append(sum(x_total[:i]))\n    \n    x_total_mass.sort()\n    \n    for i in range(101, 2001):\n        x[i] = x_total_mass[i] - sum(x_total_mass[:i-100])\n    \n    print(\"\".join([str(i) for i in x_total]))"
    },
    {
        "number": 4427,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x = map(int, stdin.split())\n    x_year = 0\n    for i in range(2000, 2001):\n        x_year += x[i] * (100 - i)\n    for i in range(2000, 2001):\n        if x_year > 5000:\n            x_year = x_year // 5000 * 5000\n        if x_year > 10000:\n            x_year = x_year // 10000 * 10000\n        if x_year > 100000:\n            x_year = x_year // 100000 * 100000\n        if x_year > 200000:\n            x_year = x_year // 200000 * 200000\n        if x_year > 30000:\n            x_year = x_year // 30000 * 30000\n        if x_year > 500000:\n            x_year = x_year // 500000 * 500000\n        if x_year > 1000000:\n            x_year = x_year // 1000000 * 1000000\n        if x_year > 2000000:\n            x_year = x_year // 2000000 * 2000000\n        if x_year > 3000000:\n            x_year = x_year // 3000000 * 3000000\n        if x_year > 500000000:\n            x_year = x_year // 500000000 * 500000000\n        if x_year > 100000000:\n            x_year = x_year // 100000000 * 100000000\n        if x_year > 200000000:\n            x_year = x_year // 200000000 * 200000000\n        if x_year > 30000000:\n            x_year = x_year // 30000000 * 30000000\n        if x_year > 5000000000:\n            x_year = x_year // 5000000000 * 5000000000\n        if x_year > 1000000000:\n            x_year = x_year // 1000000000 * 1000000000\n        if x_year > 2000000000:\n            x_year = x_year // 2000000000 * 2000000000\n        if x_year > 300000000:\n            x_year = x_year // 300000000 * 300000000\n        if x_year > 500000000:\n            x_year = x_year // 500000000 * 500000000\n        if x_year > 10000000000:\n            x_year = x_year // 10000000000 * 10000000000\n        if x_year > 20000000000:\n            x_year = x_year // 20000000000 * 20000000000\n        if x_year > 30000000000:\n            x_year = x_year // 30000000000 * 30000000000\n        if x_year > 50000000000:\n            x_year = x_year // 50000000000 * 50000000000\n        if x_year > 1000000000000:\n            x_year = x_year // 1000000000000 * 1000000000000\n        if x_year > 2000000000000:\n            x_year = x_year // 2000000000000 * 2000000000000\n        if x_year > 3000000000000:\n            x_year = x_year // 3000000000000 * 3000000000000\n        if x_year > 5000000000000:\n            x_year = x_year // 5000000000000 * 5000000000000\n        if x_year > 100000000000000:\n            x_year = x_year // 100000000000000 * 100000000000000\n        if x_year > 200000000000000:\n            x_year = x_year // 200000000000000 * 200000000000000\n        if x_year > 30000000000000:\n            x_year = x_year // 30000000000000 * 30000000000000\n        if x_year > 50000000000000:\n            x_year = x_year // 50000000000000 * 50000000000000\n        if x_year > 1000000000000000:\n            x_year = x_year // 1000000000000000 * 1000000000000000\n        if x_year > 2000000000000000:\n            x_year = x_year // 2000000000000000 * 2000000000000000\n        if x_year > 300000000000000:\n            x_year = x_year // 300000000000000 * 300000000000000\n        if x_year > 500000000000000:\n            x_year = x_year // 500000000000000 * 500000000000000\n        if x_year > 10000000000000000:\n            x_year = x_year // 10000000000000000 * 10000000000000000\n        if x_year > 20000000000000000:\n            x_year = x_year // 20000000000000000 * 20000000000000000\n        if x_year > 3000000000000000:\n            x_year = x_year // 3000000000000000 * 3000000000000000\n        if x_year > 5000000000000000:\n            x_year = x_year // 5000000000000000 * 5000000000000000\n        if x_year > 100000000000000000:\n            x_year = x_year // 100000000000000000 * 100000000000000000\n        if x_year > 200000000000000000:\n            x_year = x_year // 200000000000000000 * 200000000000000000\n        if x_year > 300000000000000000:\n            x_year = x_year // 300000000000000000 * 300000000000000000\n        if x_year > 500000000000000000:\n            x_year = x_year // 500000000000000000 * 500000000000000000\n        if x_year > 10000000000000000000:\n            x_year = x_year // 10000000000000000000 * 10000000000000000000\n        if x_year > 20000000000000000000:\n            x_year = x_year // 20000000000000000000 * 20000000000000000000\n        if x_year > 300000000000000020:\n            x_year = x_year // 300000000000000020 * 300000000000000020\n        if x_year > 500000000000000020:\n            x_year = x_year // 500000000000000020 * 500000000000000020\n        if x_year > 10000000000000000020:\n            x_year = x_year // 10000000000000000020 * 10000000000000000020\n        if x_year > 20000000000000000020:\n            x_year = x_year // 20000000000000000020 * 20000000000000000020\n        if x_year > 3000000000000000002030:\n            x_year = x_year // 3000000000000000002030 * 3000000000000000002030\n        if x_year > 5000000000000000002030:\n            x_year = x_year // 5000000000000000002030 * 5000000000000000002030\n        if x_year > 1000000000000000002030:\n            x_year = x_year // 1000000000000000002030 * 1000000000000000002030\n        if x_year > 2000000000000000002030:\n            x_year = x_year // 2000000000000000002030 * 2000000000000000002030\n        if x_year > 3000000000000000002040:\n            x_year = x_year // 3000000000000000002040 * 3000000000000000002040\n        if x_year > 5000000000000000002040:\n            x_year = x_year // 5000000000000000002040 * 5000000000000000002040\n        if x_year > 1000000000000000002040:\n            x_year = x_year // 1000000000000000002040 * 1000000000000000002040\n        if x_year > 2000000000000000002040:\n            x_year = x_year // 2000000000000000002040 * 2000000000000000002040\n        if x_year > 3000000000000000002050:\n            x_year = x_year // 3000000000000000002050 * 3000000000000000002050\n        if x_year > 5000000000000000002050:\n            x_year = x_year // 5000000000000000002050 * 5000000000000000002050\n        if x_year > 1000000000000000002050:\n            x_year = x_year // 1000000000000000002050 * 1000000000000000002050\n        if x_year"
    },
    {
        "number": 4427,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    for _ in range(int(stdin.split()[-1])):\n        print(int(stdin.split()[-1]) + sum([int(k) * (int(v) - int(k)) for k, v in zip(stdin.split()[:-1], stdin.split()[1:])]))"
    },
    {
        "number": 4428,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    sum_1 = int(stdin[0])\n    sum_2 = int(stdin[1])\n    sum_3 = int(stdin[2])\n    sum_4 = int(stdin[3])\n    max_val = max(sum_1, sum_2, sum_3, sum_4)\n    if sum_1 == sum_2 == sum_3 == sum_4:\n        return str(max_val)\n    else:\n        a = (sum_1 - sum_4) // (sum_3 - sum_2)\n        b = sum_2 - sum_2 * a\n        c = sum_3 - sum_3 * a\n        d = sum_3 - sum_3 * b\n        if sum_1 < sum_2 < sum_3 < sum_4:\n            a = max(sum_1, sum_2, sum_3)\n            b = max(sum_4, sum_3, sum_4)\n            c = max(sum_3, sum_2, sum_4)\n            d = max(sum_2, sum_4, sum_3)\n            if a!= b and a!= c and a!= d:\n                return str(max_val)\n            else:\n                a = (sum_1 - sum_2) // (sum_3 - sum_2)\n                b = sum_2 - sum_2 * a\n                c = sum_3 - sum_3 * a\n                d = sum_3 - sum_3 * b\n                if a!= b and a!= c and a!= d:\n                    return str(max_val)\n                else:\n                    a = (sum_1 - sum_2) // (sum_3 - sum_2)\n                    b = sum_2 - sum_2 * a\n                    c = sum_3 - sum_3 * a\n                    d = sum_3 - sum_3 * b\n                    if a!= b and a!= c and a!= d:\n                        return str(max_val)\n                    else:\n                        a = (sum_1 - sum_2) // (sum_3 - sum_2)\n                        b = sum_2 - sum_2 * a\n                        c = sum_3 - sum_3 * a\n                        d = sum_3 - sum_3 * b\n                        if a!= b and a!= c and a!= d:\n                            return str(max_val)\n                        else:\n                            return str(max_val)\n    return str(max_val)\n\n\nwhile True:\n    n = int(input())\n    if n == 0:\n        break\n    else:\n        print(solution(str(n)))"
    },
    {
        "number": 4428,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    d1, d2, d3 = map(int, stdin.split())\n    d = [0 for _ in range(n)]\n    for _ in range(n):\n        d[stdin.index(' ')+1] += 1\n    a, b, c = d[d1], d[d2], d[d3]\n    if a + b + c!= 0:\n        d[0] = a + b + c\n        d[b] = a + c\n        d[c] = a + b + c\n    if d[0] == max(d):\n        return '0'\n    if d[0]!= 0:\n        d[d.index(max(d))] = 0\n    if d[b] == 0:\n        d[b] = a + c\n    if d[c] == 0:\n        d[c] = a + b\n    if d[c] == 0:\n        d[c] = a + b\n    return '0' if sum(d) >= n else '1'"
    },
    {
        "number": 4428,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    d = map(int, stdin.split())\n    l = len(d)\n    if (n == 1):\n        return max(d)\n    if (l == 1):\n        return sum(d)\n\n    possible_ways = []\n    for i in range(1, n):\n        a, b = 0, 0\n        for j in range(0, i):\n            a += d[j]\n        for j in range(i, n):\n            b += d[j]\n        if a > b:\n            possible_ways.append([a, b])\n    for parts in possible_ways:\n        if (sum(parts) == 4):\n            return ''.join(map(str, parts))\n        elif (sum(parts) < 4):\n            for part in parts:\n                if (part!= 0):\n                    break\n            else:\n                continue\n            return ''.join(map(str, parts))\n        else:\n            for part in parts:\n                if (part!= 0):\n                    break\n            else:\n                continue\n            return ''.join(map(str, parts))\n"
    },
    {
        "number": 4428,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    d = list(map(int, stdin.split()))\n    sum_1 = sum(d)\n\n    # iterating by 3, comparing to the last element of the array\n    # if there is a match, we want to make sure sum_1 = sum_3\n    # if not, we want to make sure sum_1 = sum_3 + sum_3\n    # if there is no match, we want to get sum_3 = sum_3 + sum_3\n\n    a = 0\n    b = len(d) - 1\n    c = 0\n    res = 0\n\n    while a <= b:\n        if d[a] + d[b] > res:\n            res = d[a] + d[b]\n            c = a\n        a += 1\n        b -= 1\n\n    # iterating by 2, comparing to the last element of the array\n    # if there is a match, we want to make sure sum_1 = sum_3\n    # if not, we want to make sure sum_1 = sum_3 + sum_3\n    # if there is no match, we want to get sum_3 = sum_3 + sum_3\n    a = 0\n    b = len(d) - 1\n    res = 0\n\n    while a <= b:\n        if d[a] + d[b] > res:\n            res = d[a] + d[b]\n            c = a\n        a += 1\n        b -= 1\n\n    return str(res)\n\n\ndef"
    },
    {
        "number": 4428,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, *d_1, *d_2 = map(int, stdin.split())\n    \n    sum_1 = 0\n    for i in range(0, len(d_1)):\n        sum_1 += d_1[i]\n    \n    sum_2 = 0\n    for i in range(0, len(d_2)):\n        sum_2 += d_2[i]\n        \n    sum_3 = 0\n    for i in range(len(d_1)):\n        sum_3 += d_1[i] * d_2[i]\n        \n    \n    if sum_1 == sum_2 == sum_3:\n        return \"0\"\n    \n    return str(max(sum_1, sum_2, sum_3))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4428,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    d_1, d_2, d_3 = [], [], []\n    d_1.append(n // 3)\n    d_2.append(n // 3)\n    d_3.append(n // 3)\n    if len(d_1) == 1:\n        d_1 = [d_1[0]]\n    if len(d_2) == 1:\n        d_2 = [d_2[0]]\n    if len(d_3) == 1:\n        d_3 = [d_3[0]]\n    if len(d_1) > 1:\n        for i in d_1:\n            d_3.append(i)\n        if len(d_3) > len(d_2) + len(d_1):\n            d_3.reverse()\n    if len(d_2) > 1:\n        for i in d_2:\n            d_3.append(i)\n        if len(d_3) > len(d_1) + len(d_2):\n            d_3.reverse()\n    if len(d_1) == len(d_2):\n        return '0'\n    if len(d_2) == len(d_3):\n        return '0'\n    return max(d_1 + d_2 + d_3)\n\n\n\ndef"
    },
    {
        "number": 4428,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Empty array\n    n = int(stdin)\n    d = [0] * (n+1)\n    for i in range(n):\n        d[i+1] = int(stdin[i])\n    # Calculate sums\n    sum1 = 0\n    for i in range(1, n+1):\n        sum1 += d[i]\n    sum2 = 0\n    for i in range(n+1, 2*n):\n        sum2 += d[i]\n    sum3 = 0\n    for i in range(n-1, -1, -1):\n        sum3 += d[i]\n    # Check sums\n    if sum1 > sum3 or (sum1 == sum3 and sum2 < sum3):\n        return '0'\n    else:\n        return '1'\n\n-----Modifications-----\n\nInput:\n1\n1 1 1 1 4\nOutput:\n1\n\nInput:\n2\n4 1 1 1 4\nOutput:\n4\n\nInput:\n3\n4 4 1 1 4\nOutput:\n1\n\nInput:\n4\n1 1 1 1 4\nOutput:\n0\n\n\n-----Constraints-----\n\n1 <= n <= 2^30\n\n1 <= d[i] <= 10^9\n\nSample Input:\n3\n5\n3 1 1 4\nSample Output:\n0\n\nSample Input:\n3\n1 1 1 1 4\nSample Output:\n1\n\nSample Input:\n1\n1 4\n1 4\nSample Output:\n1\n\nSample Input:\n1\n1 2 1 4\nSample Output:\n0\n\n\"\"\""
    },
    {
        "number": 4428,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    d_1, d_2 = arr[:n//2], arr[n//2:]\n    d_3 = list(map(int, stdin.split()[-2:]))\n    d_sum = sum(d_1) + sum(d_2) + sum(d_3)\n    if d_sum < 0:\n        return '0'\n    if d_sum == sum(d_1):\n        return '1'\n    if d_sum == sum(d_2):\n        return '2'\n    if d_sum == sum(d_3):\n        return '3'\n    else:\n        return '4'\n"
    },
    {
        "number": 4428,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip().split()[0])\n    l1 = list(map(int, stdin.strip().split()[1:]))\n    l2 = list(map(int, stdin.strip().split()[1:]))\n    l1 = sorted(l1)\n    l2 = sorted(l2)\n    sum1 = 0\n    sum2 = 0\n    sum3 = 0\n    i = 0\n    while i < n:\n        if l1[i] < l2[i]:\n            sum1 += l1[i]\n            i += 1\n        else:\n            sum2 += l2[i]\n            i += 1\n    while i < n:\n        if l1[i] < 0:\n            sum1 += l1[i]\n            i += 1\n        elif l2[i] < 0:\n            sum2 += l2[i]\n            i += 1\n        else:\n            i += 1\n    sum1 = max(sum1, 0)\n    sum2 = max(sum2, 0)\n    sum3 = max(sum3, sum1 + sum2 + sum3)\n    return str(sum3)\n"
    },
    {
        "number": 4428,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    stdin = stdin.split()\n    sum_1 = 0\n    sum_3 = 0\n    for i in range(0, n):\n        sum_1 += int(stdin[i])\n        sum_3 += int(stdin[i + 1])\n    if sum_1 == sum_3:\n        print(sum_1)\n    elif sum_1 > sum_3:\n        print(sum_3)\n    elif sum_1 < sum_3:\n        print(sum_1)\n\n\nfor i in range(int(input())):\n    print(solution(input()))\n"
    },
    {
        "number": 4429,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(1, len(stdin)):\n        a, b, c = map(int, stdin[i - 1].split())\n        if a >= b >= c:\n            print('NO')\n        else:\n            print('YES')\n            print(f'{a} {b} {c}')\n            break"
    },
    {
        "number": 4429,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    t = int(stdin)\n    for _ in range(t):\n        x, y, z = map(int, input().split())\n        ans = max(x, y, z)\n        if ans == x and ans == y and ans == z:\n            print('YES')\n        else:\n            print('NO')\n    \n"
    },
    {
        "number": 4429,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a,b,c=map(int,stdin.split())\n    if a>b:\n        if a>c:\n            return 'NO'\n        else:\n            return 'YES'\n    if b>c:\n        return 'YES'\n    else:\n        return 'NO'\n"
    },
    {
        "number": 4429,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip().split(' ')[0])\n    answer = ''\n    for i in range(n):\n        a, b, c = map(int, stdin.strip().split(' '))\n        if a > b and a > c:\n            answer += str(a) +''\n        elif b > a and b > c:\n            answer += str(b) +''\n        else:\n            answer += str(c) +''\n    return answer\n"
    },
    {
        "number": 4429,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split('\\n')[0])\n    for case in range(1, t + 1):\n        x, y, z = map(int, input().split(' '))\n        max_a = x if x < y else y\n        max_b = y if y < z else z\n        max_c = z if z < x else x\n        if max_a > max_b and max_a > max_c:\n            print('NO')\n        elif max_a > max_c:\n            print('YES')\n        elif max_b > max_c:\n            print('YES')\n        else:\n            print('YES')\n    return 'NO'\n"
    },
    {
        "number": 4429,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4429,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    for _ in range(int(stdin)):\n        x, y, z = map(int, stdin.split())\n        if x>y or x>z:\n            break\n        if y>z:\n            y,z = z,y\n    if x<y:\n        x,y = y,x\n    return \"NO\" if x+y==z else \"YES\""
    },
    {
        "number": 4429,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    ans = 0\n    a = 0\n    b = 0\n    c = 0\n    x = 0\n    y = 0\n    z = 0\n    for i in range(1, len(stdin)):\n        if int(stdin[i]) < x:\n            x = int(stdin[i])\n            a += 1\n        if int(stdin[i]) < y:\n            y = int(stdin[i])\n            b += 1\n        if int(stdin[i]) < z:\n            z = int(stdin[i])\n            c += 1\n    if a > 0 or b > 0 or c > 0:\n        ans = \"YES\"\n    if a == b == c:\n        ans = \"NO\"\n    return ans\n"
    },
    {
        "number": 4429,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    b = []\n    c = []\n    for i in a:\n        if i>=0:\n            b.append(i)\n    for i in a:\n        if i>=0 and i<=10**9:\n            c.append(i)\n    if len(b)>len(c):\n        b = b[:len(c)]\n        c = c[:len(b)]\n    elif len(b)<len(c):\n        b = b[len(c):]\n        c = c[len(c):]\n    for i in b:\n        for j in c:\n            if i+j <=10**9:\n                print(i,j)\n                return\n    return 'NO'\n"
    },
    {
        "number": 4429,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # this is done by me, but it's kinda brute-force\n    n = int(stdin.strip().split()[0])\n    m = int(stdin.strip().split()[1])\n    a = set(map(int, stdin.strip().split()[2:]))\n    b = set(map(int, stdin.strip().split()[3:]))\n    c = set(map(int, stdin.strip().split()[4:]))\n    if len(a) + len(b) + len(c)!= n + m:\n        return \"NO\"\n    if not (a - b <= c - b <= a + b):\n        return \"YES\"\n    return \"YES\"\n"
    },
    {
        "number": 4430,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = sorted(a)\n    c = sorted(set(a) - set(b))\n    if len(c)!= 0:\n        return str(len(c) + 1)\n    return str(len(b))\n    \n    \n"
    },
    {
        "number": 4430,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    a = [i for i in a if i!= 0]\n    a.sort(reverse=True)\n    answer = 0\n    for i in range(len(a)):\n        answer += a[i]\n    print(answer)\n    return str(answer)\n\n\n-----Example-----\n\nsolution(\"5 2 6\")\n\nsolution(\"5 1 4\")\n\nsolution(\"5 3 3\")\n\nsolution(\"4 2 3 4 1\")\n\nsolution(\"4 3 3\")\n\nsolution(\"4 3\")\n\nsolution(\"1\")\n\n\n------Constraints-----\n1 <= n <= 10^4\n1 <= k <= 10^9\n1 <= a_i <= k\n\n------Corner Cases-----\nInput is valid\nInput is not a valid input\nInput contains more than one solution\nInput contains only one solution\nInput contains zero or more solution\n\n------Time Limit-----\nO(n^2)\n\n------Memory Limit-----\nO(n)\n\n------1.16.0(coding.jupyter.org)-----------\nsolution is a valid one\n"
    },
    {
        "number": 4430,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a_n = [int(i) for i in input().split()]\n    a_k = [int(i) for i in input().split()]\n    print(a_n + a_k)\n    maksim = 0\n    for i in range(k):\n        if a_k[i] > a_n[i] + maksim:\n            maksim = a_k[i] + maksim\n    return str(maksim)"
    },
    {
        "number": 4430,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    b = set(range(1, n + 1)) - set(range(n - m, n + 1)) - set(range(n - m, n + 1))\n    result = sum(map(lambda x: b.pop(), b))\n    return str(result)\n\nprint(solution(\"5 2 6\"))\nprint(solution(\"5 1 4\"))\nprint(solution(\"5 3 3\"))\n"
    },
    {
        "number": 4430,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split(' ')\n    n = int(input[0])\n    m = int(input[1])\n    k = int(input[2])\n    objects = list(map(int, input[3:]))\n\n    packages = []\n    for obj in objects:\n        packages.append(min(packages) + 1)\n        packages.append(max(packages) - 1)\n\n    packages = sorted(packages)\n\n    print(sum(packages))\n    return str(sum(packages))\n\nTime complexity of solution: O(n^2)\n\n\nTime complexity of solution: O(n^2)\n\nTime complexity of solution: O(n^2)\n\nTime complexity of solution: O(n^2)\n\nTime complexity of solution: O(n^2)\n\nTime complexity of solution: O(n^2)\n\nTime complexity of solution: O(n^2)\n\nTime complexity of solution: O(n^2)\n\nTime complexity of solution: O(n^2)\n\nTime complexity of solution: O(n^2)\n\nTime complexity of solution: O(n^2)\n\nTime complexity of solution: O(n^2)\n\nTime complexity of solution: O(n^2)\n\nTime complexity of solution: O(n^2)\n\nTime complexity of solution: O(n^2)\n\nTime complexity of solution: O(n^2)\n\nTime complexity of solution: O(n^2)\n\nTime complexity of solution: O(n^2)\n\nTime complexity of solution: O(n^2)\n\nTime complexity of solution: O(n^2)\n\nTime complexity of solution: O(n^2)\n\nTime complexity of solution: O(n^2)\n\nTime complexity of solution: O(n^2)\n\nTime complexity of solution: O(n^2)\n\nTime complexity of solution: O(n^2)\n\nTime complexity of solution: O(n^2)\n\nTime complexity of solution: O(n^2)\n\nTime complexity of solution: O(n^2)\n\nTime complexity of solution: O(n^2)\n\nTime complexity of solution: O(n^2)\n\nTime complexity of solution: O(n^2)\n\nTime complexity of solution: O(n^2)\n\nTime complexity of solution: O(n^2)\n\nTime complexity of solution: O(n^2)\n\nTime complexity of solution: O(n^2)\n\nTime complexity of solution: O(n^2)\n\nTime complexity of solution: O(n^2)\n\nTime complexity of solution: O(n^2)\n\nTime complexity of solution: O(n^2)\n\nTime complexity of solution: O(n^2)\n\nTime complexity of solution: O(n^2)\n\nTime complexity of solution: O(n^2)\n\nTime complexity of solution: O(n^2)\n\nTime complexity of solution: O(n^2)\n\nTime complexity of solution: O(n^2)\n\nTime complexity of solution: O(n^2)\n\nTime complexity of solution: O(n^2)\n\nTime complexity of solution: O(n^2)\n\nTime complexity of solution: O(n^2)\n\nTime complexity of solution: O(n^2)\n\nTime complexity of solution: O(n^2)\n\nTime complexity of solution: O(n^2)\n\nTime complexity of solution: O(n^2)\n\nTime complexity of solution: O(n^2)\n\nTime complexity of solution: O(n^2)\n\nTime complexity of solution: O(n^2)\n\nTime complexity of solution: O(n^2)\n\nTime complexity of solution: O(n^2)\n\nTime complexity of solution: O(n^2)\n\nTime complexity of solution: O(n^2)\n\nTime complexity of solution: O(n^2)\n\nTime complexity of solution: O(n^2)\n\nTime complexity of solution: O(n^2)\n\nTime complexity of solution: O(n^2)\n\nTime complexity of solution: O(n^2)\n\nTime complexity of solution: O(n^2)\n\nTime complexity of solution: O(n^2)\n\nTime complexity of solution: O(n^2)\n\nTime complexity of solution: O(n^2)\n\nTime complexity of solution: O(n^2)\n\nTime complexity of solution: O(n^2)\n\nTime complexity of solution: O(n^2)\n\nTime complexity of solution: O(n^2)\n\nTime complexity of solution: O(n^2)\n\nTime complexity of solution: O(n^2)\n\nTime complexity of solution: O(n^2)\n\nTime complexity of solution: O(n^2)\n\nTime complexity of solution: O(n^2)\n\nTime complexity of solution: O(n^2)\n\nTime complexity of solution: O(n^2)\n\nTime complexity of solution: O(n^2)\n\nTime complexity of solution: O(n^2)\n\nTime complexity of solution: O(n^2)\n\nTime complexity of solution: O(n^2)\n\nTime complexity of solution: O(n^2)\n\nTime complexity of solution: O(n^2)\n\nTime complexity of solution: O(n^2)\n\nTime complexity of solution: O(n^2)\n\nTime complexity of solution: O(n^2)\n\nTime complexity of solution: O(n^2)\n\nTime complexity of solution: O(n^2)\n\nTime complexity of solution: O(n^2)"
    },
    {
        "number": 4430,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    s = [map(int, input().split()) for _ in range(n)]\n    ans = 1\n    for i in range(m):\n        a = s[i][0]\n        b = s[i][1]\n        if a < b:\n            a, b = b, a\n        # for j in range(i, m):\n        #     a = s[j][0]\n        #     b = s[j][1]\n        #     if a < b:\n        #         a, b = b, a\n        for j in range(i, n):\n            a = s[j][0]\n            b = s[j][1]\n            if a < b:\n                a, b = b, a\n        if a > b:\n            a, b = b, a\n        for j in range(i, n):\n            a = s[j][0]\n            b = s[j][1]\n            if a < b:\n                a, b = b, a\n        if a <= 0:\n            ans = max(ans, j - i)\n    print(ans)\n    return str(ans)\n\ndef"
    },
    {
        "number": 4430,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = map(int, stdin.split())\n    a_1 = list(map(int, stdin.split()))\n    a_2 = list(map(int, stdin.split()))\n    a_3 = a_1 + a_2\n    a_3.sort()\n    a_3 = [a_3[i] for i in range(len(a_3))]\n    a_3.sort(reverse=True)\n    a_3 = [a_3[i] for i in range(len(a_3))]\n    a_3.sort()\n    a = set(a_3)\n    if len(a) == 1:\n        return str(len(a))\n    else:\n        return str(len(a)) + str(min(a_3))\n"
    },
    {
        "number": 4430,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a_1, a_2 = map(int, input().split())\n    res = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if a_1 > a_2:\n                break\n            if a_1 >= a_2:\n                res += 1\n                a_2 += a_1\n            else:\n                a_1 += a_2\n                a_2 = a_1\n    return str(res)\n"
    },
    {
        "number": 4430,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def solve(stdin):\n        n, k, a, a_max = map(int, stdin.split())\n        if k < a_max:\n            print(k)\n            return\n        # \uc8fc\uc5b4\uc9c4 \uc218\ub4e4\uc774 \ubaa8\ub450 0\uc778 \uacbd\uc6b0\n        if a == 0:\n            return n\n        \n        answer = 1\n        # \ub3cc\ub9ac\uace0 \ucd5c\uc18c \ubd80\ubaa8\uac00 \uac00\uc7a5 \ub9ce\uc774 \ub098\ud0c0\ub098\ub294 \uacbd\uc6b0\n        # \uc6b0\uc120 \ud050\uc5d0 \uc800\uc7a5\ub418\uc5b4\uc788\ub294 \uba54\ubaa8\ub9ac \uac12\uc774 \uc815\ud574\uc9c4 \uacbd\uc6b0\n        # \uc6b0\uc120 \ud050\uc5d0 \uc800\uc7a5\ub418\uc5b4\uc788\ub294 \uba54\ubaa8\ub9ac \uac12\uc774 \ubc18\ub300\uc0c1 \uac12\ubcf4\ub2e4 \ub0ae\uc740 \uacbd\uc6b0\n        # \ud050\uc5d0 \uc800\uc7a5\ub418\uc5b4\uc788\ub294 \uba54\ubaa8\ub9ac \uac12\uc774 \ud050\uc758 \uc9c1\uc804 \uac12\uc758 \uac12\ubcf4\ub2e4 \uac00\ub9ac\ud0a4\ub294 \uacbd\uc6b0\n        # \uc774\ubd84 \ud0d0\uc0c9\uc774 \uc885\ub8cc\ub418\uc5b4\uc57c \ud568\n\n        while True:\n            q = collections.deque()\n            for i in range(n):\n                q.append((i, 0))\n            \n            while q:\n                x, y = q.popleft()\n                if x == k and y == a:\n                    return answer\n\n                for i in range(4):\n                    nx = x + a_max * i\n                    ny = y + a_max * i\n                    # \uc774\ubd84 \ud0d0\uc0c9\uc774 \ub05d\ub098\ub294 \uacbd\uc6b0\ub9cc \uc0ac\uc6a9\ud558\uac8c \ud558\uba74 \ub418\ubbc0\ub85c\n                    # \uacc4\uc18d \uc774\ubd84 \ud0d0\uc0c9 \uc548\ud558\ub294 \uacbd\uc6b0\ub97c \uc0dd\uac01\ud558\uba74 \ub418\ubbc0\ub85c\n                    if nx < 0 or ny < 0 or nx >= n or ny >= n:\n                        continue\n                    # \ud604\uc7ac \uac12\ubcf4\ub2e4 \uc791\uc740 \uac12\uc774 \ub0ae\uc740 \uacbd\uc6b0\n                    # \uacbd\uc6b0\ub294 \uc0dd\uae30\uc9c0 \uc54a\uace0 \ud050\uc5d0 \ucd94\uac00\ub41c \uc815\ubcf4\uc5d0\uc11c \ub0ae\uc740 \uac12\ubcf4\ub2e4 \uc791\uc740 \uac12\uc774 \ub098\uc62c \uacbd\uc6b0\n                    # \uacbd\uc6b0\ub294 \ub2e4\uc74c \uac12\ubcf4\ub2e4 \uc791\uc740 \uac12\uc774 \ud050\uc5d0 \ucd94\uac00\ub41c \uac12\uc744 \ucc3e\uc74c\n                    if a_max * i < q[0][1] < a_max * (i+1):\n                        # \ucc3e\uc73c\ub824\ub294 \uc815\ubcf4 \uc911\uc5d0\uc11c \ub0ae\uc740 \uac12\uc774 \ub0ae\uc740 \uacbd\uc6b0\n                        if a_max * i == q[0][1]:\n                            # \ud050\uc5d0\uc11c \uc9c0\uc815\ub41c \uac12\uc744 \ub0ae\uc740 \uac12\uc73c\ub85c \ud55c\ub2e4\n                            q.append((nx, ny))\n                        # \ucc3e\uc73c\ub824\ub294 \uc815\ubcf4 \uc911\uc5d0\uc11c \ub0ae\uc740 \uac12\uc774 \ub0ae\uc740 \uacbd\uc6b0\n                        else:\n                            # \ud050\uc5d0\uc11c \uc9c0\uc815\ub41c \uac12\uc744 \ub0ae\uc740 \uac12\uc73c\ub85c \ud55c\ub2e4\n                            q.append((nx, ny))\n                            # \ud050\uc5d0\uc11c \uc9c0\uc815\ub41c \uac12\uc5d0\uc11c \ub0ae\uc740 \uac12\uc73c\ub85c \ud55c\ub2e4\n                            q.append((nx, ny))\n                    # \ud604\uc7ac \uac12\ubcf4\ub2e4 \ub192\uc740 \uac12\uc774 \ub0ae\uc740 \uacbd\uc6b0\n                    # \uacbd\uc6b0\ub294 \uc0dd\uae30\uc9c0 \uc54a\uace0 \ud050\uc5d0 \ucd94\uac00\ub41c \uc815\ubcf4\uc5d0\uc11c \ub192\uc740 \ufffd"
    },
    {
        "number": 4430,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k, n_max = list(map(int, stdin.split()))\n    stdin.strip()\n    a_i = list(map(int, stdin.split()))\n    n_max = sorted(a_i)[-1]\n    max_num_objects = 0\n    while n_max >= k:\n        max_num_objects += k // n_max\n        n_max = (k % n_max) // 2\n        k = n_max\n    a_i = list(range(1, n_max + 1))\n    pack_list = []\n    for i in a_i:\n        while True:\n            pack_list.append(i)\n            if len(pack_list) == max_num_objects:\n                break\n            elif len(pack_list) < max_num_objects:\n                pack_list.append(pack_list[-1])\n                pack_list.pop(0)\n            else:\n                break\n    print(len(pack_list))\n    return str(len(pack_list))\n\n-----Output-----\n\nOutput:\n4\n\nInput\n5 1 4\n4 2 3 4 1\n\nOutput\n5\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= k <= 10^9\n1 <= a_i <= 10^5\n\n---"
    },
    {
        "number": 4431,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4431,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    s = stdin.split()\n    # print(s)\n    # print(n)\n    # print(k)\n    letters = [chr(i + 96) for i in range(26)]\n\n    result = 0\n    for s in s:\n        # print(s)\n        # print(n)\n        # print(k)\n        result += n * (k - 1) // 2 + s.count('a') + s.count('b')\n        # print(result)\n    return str(result)\n\n\ndef"
    },
    {
        "number": 4431,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def solution_1(s):\n        res = 0\n        for c in s:\n            if c not in letters:\n                break\n            if c not in use_letters:\n                continue\n            if c not in used_letters:\n                used_letters.append(c)\n                res += 1\n                continue\n            if c in used_letters:\n                used_letters.remove(c)\n                res += 2\n                continue\n            used_letters.append(c)\n            res += 1\n            continue\n        return str(res)\n\n    stdin = stdin.replace('\\n', '')\n    letters = set(stdin.split(','))\n    letters.update('abcdefghijklmnopqrstuvwxyz')\n    print(len(letters))\n    print(letters)\n    result = 0\n    for c in stdin:\n        if c not in letters:\n            break\n        if c not in use_letters:\n            continue\n        if c not in used_letters:\n            continue\n        used_letters.append(c)\n        result += 1\n        continue\n    return str(result)\n\nprint(solution_1(\"abacaba\"))\nprint(solution_1(\"sadfaasdda\"))\nprint(solution_1(\"aaaaaaa\"))\nprint(solution_1(\"aaaaaaa\"))\nprint(solution_1(\"\"))\n"
    },
    {
        "number": 4431,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n < k:\n        return 0\n    elif n == k:\n        return 1\n    else:\n        n, k = map(int, stdin.split())\n        if n < k:\n            return 0\n        elif n == k:\n            return 2\n        else:\n            n, k = map(int, stdin.split())\n            if n < k:\n                return 0\n            else:\n                return n\n\n-----------------------------------------------------------------------------------------------------------------------\n\nInput\n\nLine 1:\n\n6 3\nabc\ncba\nabc\n\nLine 2:\n\n6 1\nabacaba\na b\n\nLine 3:\n\n4 4\nsadfaasdda\nf a d\n\nLine 4:\n\n6 3\naaaaaaa\nb\n\nLine 5:\n\n5 4\nsadsf\na d\n\nLine 6:\n\n6 1\naaaaaaa\nb\n\n-----------------------------------------------------------------------------------------------------------------------\n\nInput\n\nLine 1:\n\n6 3\nabc\ncba\nabc\n\nLine 2:\n\n6 1\nabacaba\na b\n\nLine 3:\n\n4 4\nsadfaasdda\nf a d\n\nLine 4:\n\n4 1\naaaaaaa\nb\n\nLine 5:\n\n5 4\nsadsf\na d\n\nLine 6:\n\n6 1\naaaaaaa\nb\n\n-----------------------------------------------------------------------------------------------------------------------\n\nInput\n\nLine 1:\n\n6 1\na\n\nLine 2:\n\n2 3\na\na\n\nLine 3:\n\n3 5\na\na\na\n\nLine 4:\n\n2 1\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\na\n"
    },
    {
        "number": 4431,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    \n    if len(s) % 2 == 1:\n        answer = len(s) // 2\n    else:\n        answer = len(s) // 2 + 1\n        \n    if answer > 26:\n        answer = 26\n    \n    print(answer)\n    \n    return answer"
    },
    {
        "number": 4431,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin[:n]\n    c = stdin[n:n+k]\n    if len(s) == len(c):\n        return len(c)\n    else:\n        return 0\n\nInput\n2 2\nab\na\n\nOutput\n1\n\nInput\n2 2\na b\nc d\ne\nf\n\nOutput\n2\n\n'''\n\ndef"
    },
    {
        "number": 4431,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    x = s[0]\n    y = s[1]\n    if len(s)!= 3:\n        return 0\n    if x not in \"a\" or y not in \"b\" or y not in \"c\":\n        return 0\n    z = sorted(s[2:], key=lambda x: len(x))\n    l = len(x)\n    if len(z)!= l:\n        return 0\n    for i in range(l):\n        if z[i] == x:\n            return len(z) - i\n\n-----Notes-----\n\nThe substring can be of any length.\n\nThe only substring of the string $s$ is the English alphabet: the English alphabet is a set of all characters.\n\n\n-----Explanation-----\n\nHere the first letter is capitalized. Then, all remaining letters of $s$ are in alphabetical order.\n\nThe second letter is capitalized, but not in alphabetical order. As a result, both of the first two letters are alphabetically distinct.\n\nThe third letter is capitalized, but not in alphabetical order. As a result, both of the first two letters are alphabetically distinct.\n\nThe fourth letter is capitalized, but not in alphabetical order. As a result, both of the first two letters are alphabetically distinct.\n\nThe fifth letter is capitalized, but not in alphabetical order. As a result, both of the first two letters are alphabetically distinct.\n\nThe sixth letter is capitalized, but not in alphabetical order. As a result, both of the first two letters are alphabetically distinct.\n\nThe seventh letter is capitalized, but not in alphabetical order. As a result, both of the first two letters are alphabetically distinct.\n\nThe eighth letter is capitalized, but not in alphabetical order. As a result, both of the first two letters are alphabetically distinct.\n\nThe ninth letter is capitalized, but not in alphabetical order. As a result, both of the first two letters are alphabetically distinct.\n\n\n-----Example 1-----\n\nInput\n3 2\na a b\n\nOutput\n1\n\nExplanation\n\nThe string $s$ has all distinct characters, but the first and last letters of the string are same.\n\nThe string $s$ can be of any length.\n\nThe string $s$ is of the alphabetical order.\n\n-----Example 2-----\n\nInput\n4 4\na a c b\n\nOutput\n4\n\nExplanation\n\nThe string $s$ has all distinct characters, but the first and last letters of the string are same.\n\nThe string $s$ can be of any length.\n\nThe string $s$ is of the alphabetical order.\n\n\n-----Example 3-----\n\nInput\n3 2\na a b c\n\nOutput\n0\n\nExplanation\n\nThe string $s$ has no distinct characters.\n\n\n-----Example 4-----\n\nInput\n3 2\nc a b c\n\nOutput\n1\n\nExplanation\n\nThe string $s$ has no distinct characters.\n\nThe string $s$ is of the alphabetical order.\n\n-----Example 5-----\n\nInput\n3 1\na a b\n\nOutput\n2\n\nExplanation\n\nThe string $s$ has all distinct characters, but the first and last letters of the string are different.\n\nThe string $s$ can be of any length.\n\nThe string $s$ is of the alphabetical order.\n\n-----Example 6-----\n\nInput\n3 1\nc a b\n\nOutput\n0\n\nExplanation\n\nThe string $s$ has no distinct characters.\n\nThe string $s$ is of the alphabetical order.\n\n\n-----Constraints-----\n\n1 <= $n$ <= 10^5\n1 <= $k$ <= 26\n\n\n-----Time complexity-----\n\nTime $O(n$ + k)$ is O(n^2).\n\nSpace $O(k)$ is O(k).\n\n\n-----Example 7-----\n\nInput\n5\nc a b c a b\n\nOutput\n10\n\nExplanation\n\nThe substring $s[1] c$ is a substring of $s[2] c$ with the same characters.\n\nThe substring $s[5] c$ is a substring of $s[6] c$ with the same characters.\n\nThe substring $s[3] a b$ is a substring of $s[4] a b$ with the same characters.\n\nThe substring $s[5] a b$ is a substring of $s[5] a b$ with the same characters.\n\nThe substring $s[5] c$ is a substring of $s[6] c$ with the same characters.\n\nThe substring $s[3] b a$ is a substring of $s[4] b a$ with the same characters.\n\nThe substring $s[5] b a$ is a substring of $s[5] b a$ with the same characters.\n\nThe substring $s[5] c$ is a substring of $s[6] c$ with the same characters.\n\nThe substring $s[7] a b$ is a substring of $s[8] a b$ with the same characters.\n\nThe substring $s[8] a b$ is a substring of $s[9] a b$ with the same characters.\n\nThe substring $s[9] a b$ is a substring of $s[10] a b$ with the same characters.\n\n\n-----Constraints-----\n\n1 <= $n$ <= 10^5\n1 <= $k$ <= 26\n\n\n-----Submissions-----\n\nAccepted\n19\n\nSubmissions\n4\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4431,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def get_available_letters(x):\n        return [l for l in string.ascii_lowercase if not x & (1 << l)]\n    def get_substring(a, b):\n        return string.ascii_lowercase[b:b + len(a)]\n    def count_substring(string, sub):\n        return sum(1 for i in range(len(string)) if string[i:i+len(sub)] == sub)\n    def get_substrings(s, n):\n        return [s[i:i+n] for i in range(len(s)) if not s[i:i+n].isalpha()]\n    def is_substring(s1, s2):\n        return string.ascii_lowercase.index(s1) == string.ascii_lowercase.index(s2)\n    def backtrack(x):\n        if x == n:\n            return 1\n        if x == k:\n            return count_substring(string, get_substrings(s, k))\n        return backtrack(x+1) + backtrack(x+1)\n    n, k = map(int, stdin.split())\n    s = stdin.split()\n    print(backtrack(0))\n\n\n'''"
    },
    {
        "number": 4431,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.split()\n    c = \"\".join(s[1:k+1])\n    print(c)\n    return \"\"\n\n\n\n-----Use https://www.codewars.com/kata/54a3c67c7c8896a0c17c0100/train/python/22ea6e0e5b79b5a1a9bb4a18c4c7f83c\n-----Original Code-----\n\ndef"
    },
    {
        "number": 4431,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.split()\n    \n    substrings = []\n    for i in range(len(s)):\n        for j in range(len(s) - 1 - i):\n            if s[j] in s[j+1:]:\n                substrings.append(s[j])\n    \n    return str(len(substrings))\n\n\nInput\n7 3\nsadfaasdda\nf a d\nOutput\n0\n\nInput\n10 3\nabacaba\na b\nOutput\n2\n\n'''\n\ndef"
    },
    {
        "number": 4432,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = []\n    for i in range(int(stdin)):\n        a.append(list(map(int, stdin.split())))\n    a = sorted(a, key=lambda x: x[0])\n    \n    b = [0]*(len(a) + 1)\n    for i in range(len(a)):\n        b[i + 1] = b[i] + a[i][1]\n        b[i + 1] += a[i][2]\n        b[i + 1] += a[i][3]\n        b[i + 1] += a[i][4]\n        b[i + 1] += a[i][5]\n        b[i + 1] += a[i][6]\n    \n    return str(b[-1])\n\ndef"
    },
    {
        "number": 4432,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    if t == 1:\n        return \"2\"\n    \n    a = list(map(int, stdin.split()))\n\n    # a = [1, 2, 3, -1, -2, -3]\n    # a = [-1, -2, -3, -4, -5, -6]\n    # a = [2, -1, 3, -1, -2, -3, -4, -5, -6, -7]\n    \n    #a = [1, 2, 3, -1, -2, -3]\n    # a = [-1, -2, -3, -4, -5, -6]\n    # a = [2, -1, 3, -1, -2, -3, -4, -5, -6, -7]\n    \n    # a = [1, 2, 3]\n    # a = [-1, -2, -3]\n    # a = [1, 1, 1]\n    \n    # a = [1, 2]\n    # a = [-1, -2]\n    # a = [1, 1]\n    \n    # a = [1, 2, 1, 1, 1]\n    # a = [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]\n\n    # a = [1, 2, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10]\n    # a = [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]\n    # a = [1, 2, 3, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10]\n\n    # a = [1, 1, 1, 1, 1, 1]\n    # a = [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]\n\n    # a = [1, 1, 1, 1, 1, 1]\n    # a = [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]\n    # a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    # a = [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]\n\n    # a = [1, -1, 1, 1, 1, 1]\n    # a = [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]\n\n    # a = [1, -1, 1, 1, 1, 1]\n    # a = [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]\n    # a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    \n    # a = [1, -1, 1, 1, 1, 1]\n    # a = [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]\n    \n    # a = [1, 2, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10]\n    \n    # a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    # a = [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]\n    \n    # a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    # a = [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]\n    \n    # a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    # a = [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]\n    \n    # a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    # a = [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]\n    \n    # a = [1, 2, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10]\n    # a = [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]\n\n    # a = [1, 1, 1, 1, 1, 1]\n    # a = [-1, -2, -3, -4, -5, -6"
    },
    {
        "number": 4432,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    max_sum = 0\n    for i in range(n):\n        sum = sum_all(a, i)\n        if sum > max_sum:\n            max_sum = sum\n    print(max_sum)\n    return max_sum\n\nSolution:\n\ndef"
    },
    {
        "number": 4432,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    s = 0\n    l = b\n    while True:\n        l += 1\n        if l == a:\n            break\n        if l == b:\n            break\n        if l >= (a + b) // 2:\n            break\n        s += l\n    return '%s' % s if s!= 0 else '-1'"
    },
    {
        "number": 4432,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int,stdin.strip().split()))\n    i = a.index(max(a))\n    for j in range(1, n):\n        a[i] = max(a[i - 1], a[i - 2] * 10 + a[i - 3] * 10 ** 2)\n        i = i + 1\n    return str(a[i - 1])"
    },
    {
        "number": 4432,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    s = ''.join(list(map(str, a)))\n    def calc_sum(k):\n        n_sum = 0\n        a_sum = 0\n        for i in range(1, len(s) - k + 1):\n            n_sum += int(s[i - 1])\n            a_sum += int(s[i + k - 1])\n        return max(n_sum, a_sum)\n    a_max_sum = calc_sum(1)\n    a_min_sum = calc_sum(2)\n    answer = max(a_max_sum, a_min_sum)\n    print(answer)\n    return str(answer)\n"
    },
    {
        "number": 4432,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\" \")[0])\n    a = [int(x) for x in stdin.split(\" \")[1]]\n    l = len(a)\n    a = sorted(a)\n    ans = []\n    for i in range(l):\n        for j in range(i+1, l):\n            a_i = a[i]\n            a_j = a[j]\n            if a_i > a_j:\n                ans.append(a_j)\n            elif a_i < a_j:\n                ans.append(a_i)\n    if len(ans) == 0:\n        return \"0\"\n    return \"-\".join(map(str, ans))\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4432,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str(max([int(i) for i in stdin.split()]))\n\ndef"
    },
    {
        "number": 4432,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def helper(a: str, i: int, k: int):\n        if i < k:\n            return 0\n        elif i < k and a[i] == a[i+k]:\n            return helper(a, i+k+1, k)\n        else:\n            return max(helper(a, i+1, k), max(helper(a, i+k+1, k)))\n    def printAnswer(a: str, k: int):\n        print(helper(a, 0, k))\n    n = int(stdin.strip())\n    a = stdin.strip().split()\n    printAnswer(a, n)\n\n'''\n"
    },
    {
        "number": 4432,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    s = ''\n    for i in range(n):\n        s += str(a[i] + (a[i] % 2) * (-1))\n    return s[::-1]\n\n'''\n\n\n\nn = int(input())\na = list(map(int, input().split()))\na.sort()\nt = int(input())\n"
    },
    {
        "number": 4433,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    n -= 1\n    edges = []\n    for _ in range(m):\n        u, v = map(int, stdin.split())\n        u -= 1\n        v -= 1\n        edges.append((u, v))\n    edges.sort()\n    #print(edges)\n    #print(n)\n    #print(m)\n    answer = []\n    #print(edges)\n    for u, v in edges:\n        if u >= v:\n            continue\n        for i in range(u, v + 1):\n            answer.append(i)\n    answer.sort()\n    print('\\n'.join(map(str, answer)))\n    return '\\n'.join(map(str, answer))\n\n\n\nTEST 1\n\nInput\n5 5\n1 2\n2 3\n3 5\n4 3\n1 5\n\nOutput\n3 5\n2 1\n3 2\n3 4\n4 2\n4 1\n\nTEST 2\n\nInput\n4 6\n1 2\n1 3\n1 4\n2 3\n2 4\n3 4\n3 4\n4 4\n4 5\n4 5\n\nOutput\n4 1\n1 2\n1 3\n1 4\n1 5\n\nTEST 3\n\nInput\n8 9\n1 2\n1 3\n1 4\n2 3\n2 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 5\n\nOutput\n3 2\n2 5\n8 5\n6 1\n2 7\n1 2\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5\n3 4\n3 5"
    },
    {
        "number": 4433,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = []\n    visited = [False for i in range(n)]\n    for _ in range(m):\n        edges.append(tuple(map(int, stdin.split())))\n\n    def find_edges(edge):\n        v, u = edge\n        if visited[u]:\n            return None\n        visited[u] = True\n        return u, v, edges[u][1] + edges[v][0]\n\n    def find_path(start, end):\n        if start == end:\n            return [[start]]\n        path = []\n        next_edges = []\n        for edge in edges:\n            if start == edge[0]:\n                next_edges.append(edge)\n            elif start == edge[1]:\n                next_edges.append([start, edge[0]])\n        for edge in next_edges:\n            path.extend(find_path(edge[0], edge[1]))\n        return path\n\n    answer = ''\n    for i in range(n):\n        if not visited[i]:\n            answer += str(find_edges((i, i))[2])\n            visited[i] = True\n    return answer\n\nn = 5\nm = 6\n\nprint(solution(input()))\n"
    },
    {
        "number": 4433,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    graph = [[] for _ in range(n)]\n    edges = []\n    for i in range(m):\n        u, v = map(int, stdin.split())\n        graph[u].append(v)\n        graph[v].append(u)\n    answer = 1\n    for i in range(n):\n        answer = max(answer, len(graph[i]))\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                # edge = [graph[i][j], graph[j][k], graph[k][i]]\n                edge = list(sorted([graph[i], graph[j], graph[k]]))\n                if edge[0] + edge[1] == edge[2]:\n                    edges.append(edge)\n    for edge in edges:\n        answer = max(answer, len(edge))\n    return str(answer)"
    },
    {
        "number": 4433,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = []\n    for _ in range(m):\n        v1, v2 = map(int, stdin.split())\n        edges.append((v1, v2))\n        edges.append((v2, v1))\n    vertices = range(n)\n    edges.sort()\n    visited = [False] * (n)\n    degree = [0] * n\n    total_degree = 0\n    result = 0\n    \n    for v in vertices:\n        if not visited[v]:\n            visited[v] = True\n            total_degree += degree[v]\n            result = max(result, degree[v])\n            degree[v] += 1\n    for v in range(n):\n        if not visited[v]:\n            visited[v] = True\n            total_degree += degree[v]\n            result = max(result, degree[v])\n            degree[v] += 1\n    for edge in edges:\n        v1, v2 = edge\n        if not visited[v1]:\n            visited[v1] = True\n            total_degree += degree[v1]\n            result = max(result, degree[v1])\n            degree[v1] += 1\n        if not visited[v2]:\n            visited[v2] = True\n            total_degree += degree[v2]\n            result = max(result, degree[v2])\n            degree[v2] += 1\n    return str(result)\n\nprint(solution(stdin))\n\nprint()\nprint(solution(open('input.txt').read()))"
    },
    {
        "number": 4433,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return solution_recursive([*input().split()])\n\ndef"
    },
    {
        "number": 4433,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    m = int(stdin[1])\n    g = [[] for _ in range(n + 1)]\n    for i in range(m):\n        v, u = map(int, stdin[i + 2].split())\n        g[v].append(u)\n        g[u].append(v)\n    \n    return max(max(g[i] for i in g), max(g[i] for i in g[::-1]))\n"
    },
    {
        "number": 4433,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    edges = stdin.split()\n    edges = [tuple(map(int, edge.split())) for edge in edges]\n    vertices = set(map(int, stdin.split()))\n    degrees = [0] * (len(vertices) + 1)\n\n    for edge in edges:\n        v1, u1, v2, u2 = edge\n        degrees[v2] += 1\n        degrees[v1] -= 1\n\n    for vertex in vertices:\n        degrees[vertex] += degrees[vertex]\n        degrees[vertex] -= 1\n\n    max_degree = -1\n    max_edge = None\n    for vertex in vertices:\n        if degrees[vertex] > max_degree:\n            max_degree = degrees[vertex]\n            max_edge = vertex, vertex\n            max_edge_first = vertex, vertex\n    \n    while True:\n        if len(vertices) == 1:\n            break\n        vertices.remove(max_edge[1])\n        vertices.add(max_edge_first[0])\n        max_edge = max_edge_first\n        max_edge_first = max_edge\n\n    if max_edge[0] not in vertices:\n        vertices.add(max_edge[0])\n    \n    for vertex in vertices:\n        degrees[vertex] -= 1\n    \n    return''.join(map(str, sorted(degrees)))\n\n\ndef"
    },
    {
        "number": 4433,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, m = map(int, stdin.split())\n    edges = []\n    \n    for _ in range(n):\n        v, u = map(int, stdin.split())\n        edges.append((v, u))\n    \n    edges.sort()\n    \n    answer = 0\n    \n    for i in range(m):\n        \n        if i == 0:\n            answer = edges[i][1]\n        \n        else:\n            \n            v = edges[i][0]\n            \n            if v > edges[i - 1][1]:\n                answer += 1\n            else:\n                answer += max(edges[i-1][1], edges[i][1])\n    \n    return str(answer)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 4433,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    E = [tuple(map(int, input().split())) for _ in range(M)]\n    # E = [tuple(map(int, input().split())) for _ in range(M)]\n\n    ans = 0\n    edges = set()\n    for edge in E:\n        v1, v2 = edge[0], edge[1]\n        if v1!= v2:\n            edges.add((v1, v2))\n            edges.add((v2, v1))\n            ans += 1\n    if edges:\n        return str(len(edges))\n    return str(ans)\n\n\nimport sys\nfrom collections import defaultdict\n\ndef"
    },
    {
        "number": 4433,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = []\n    for _ in range(m):\n        u, v = map(int, stdin.split())\n        edges.append((u, v))\n    edges.sort()\n    \n    result = 0\n    answer = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            if edges[i][1] < edges[j][0]:\n                result = max(result, abs(edges[j][0] - edges[i][1]))\n            if edges[i][0] > edges[j][1]:\n                result = max(result, abs(edges[i][1] - edges[j][0]))\n    answer = max(answer, result)\n    return str(answer)\n\n---Solution---\n\n1. \u6784\u5efa\u6570\u7ec4\n\n2. \u5224\u65ad\u6307\u5b9a\u4f4d\u7f6e\uff0c\u518d\u5224\u65ad\u6240\u6709\u7684\u53ef\u80fd\u7684\u7ed3\u679c\uff0c\u8fb9\u96c6\u4e3a\u4e24\u6761\u8fb9\uff0c\u53e6\u4e00\u6761\u8fb9\u6709\u4e24\u4e2a\u5b50\u8fb9\uff0c\u8bb0\u5f55\u662f\u5426\u4e3a\u5047\u8bbe\uff0c\u5f53\u67d0\u4e2a\u70b9\u5df2\u7ecf\u88ab\u8bbf\u95ee\u8fc7\uff0c\u5219\u8ba4\u4e3a\u8fd9\u6761\u8fb9\u5df2\u7ecf\u88ab\u8bbf\u95ee\u8fc7\uff0c\u6240\u6709\u8bbf\u95ee\u8fc7\u7684\u70b9\u4e3a\u5047\u8bbe\uff0c\u90a3\u4e48\u90a3\u4e2a\u5b50\u8fb9\u662f\u5047\u8bbe\u70b9\u3002\n    \n\"\"\"\n\nclass Solution:\n    def findSpanningTree(self, nums: List[int]) -> List[int]:\n        from collections import defaultdict\n        \n        def dfs(i, j):\n            if i > j: return False\n            if i == j:\n                return True\n            if i < j:\n                return dfs(i + 1, j - 1) or dfs(i + 1, j + 1) or dfs(i + 1, j) or dfs(i + 1, j + 1)\n        \n        def check(nums, start, end):\n            n = len(nums)\n            visited = defaultdict(list)\n            visited[start] = [True] * n\n            q = collections.deque([start])\n            while q:\n                for _ in range(len(q)):\n                    cur = q.popleft()\n                    for i in range(n):\n                        if not visited[i] and nums[i] == cur:\n                            visited[i] = [True] * n\n                            q.append(i)\n            return all(visited[cur])\n        \n        def isSame(nums, index):\n            return nums[index]!= nums[index + 1]\n        \n        def getIsSame(nums, index):\n            if index == len(nums) - 1:\n                return True\n            if isSame(nums, index + 1):\n                return True\n            else:\n                return False\n        \n        n = len(nums)\n        if n < 2: return n\n        \n        for i in range(n):\n            for j in range(i + 1, n):\n                if isSame(nums, i):\n                    if getIsSame(nums, j):\n                        return [i, j]\n                if isSame(nums, j):\n                    if getIsSame(nums, i):\n                        return [i, j]\n        \n        return []\n    \n"
    },
    {
        "number": 4434,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, res = list(map(int, stdin.split()))\n    if sum(list(map(int, stdin.split()))) < 5*10**4:\n        print(res)\n        return \"\"\n    possible_moves = list(map(int, str(n)))\n    # print(possible_moves)\n    if sum(possible_moves) < n*10**4:\n        print(res)\n        return \"\"\n    # print(possible_moves)\n    # print(possible_moves)\n    tiles = list(map(int, list(str(n))))\n    # print(tiles)\n    count = 0\n    for tile in tiles:\n        if tile > 0:\n            if count % 2 == 0:\n                count += 1\n            else:\n                count += 1\n                count -= 1\n        else:\n            count = 1\n    print(count)\n    return \"\"\n\n-----Constraints-----\n\n1 <= t <= 200\nn <= 10^4\n\"\"\"\n\nclass Solution:\n    def minMoves(self, n: int) -> int:\n        dp = [[0 for _ in range(n)] for _ in range(n)]\n\n        def solve(x, y, moves):\n            if dp[x][y] == 0:\n                if moves == 0:\n                    return 0\n                return 1\n            if dp[x][y] == 1:\n                if moves == 0:\n                    return 0\n                return 2\n            if moves == 0:\n                return 0\n            dp[x][y] = 1\n            moves -= 1\n            if (x - 1) >= 0 and solve(x - 1, y, moves) == 0:\n                dp[x][y] = 2\n                moves -= 1\n            if (x + 1) < n and solve(x + 1, y, moves) == 0:\n                dp[x][y] = 3\n                moves -= 1\n            if (y - 1) >= 0 and solve(x, y - 1, moves) == 0:\n                dp[x][y] = 4\n                moves -= 1\n            if (y + 1) < n and solve(x, y + 1, moves) == 0:\n                dp[x][y] = 5\n                moves -= 1\n            return solve(x, y, moves)\n        \n        return solve(0, 0, 0)"
    },
    {
        "number": 4434,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str(n**2-1)"
    },
    {
        "number": 4434,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def solution_1(stdin: str) -> str:\n        n = list(map(int, stdin.split()))\n        n.sort(reverse=True)\n        return f'{len(n)}'\n\n    return str(min(map(lambda x: x * (x + 1) // 2, range(1, 5 * 10 ** 5))))\n\n\n    n = list(map(int, stdin.split()))\n    n.sort(reverse=True)\n    return f'{len(n)}'\n\n\n    n = list(map(int, stdin.split()))\n    n.sort(reverse=True)\n    return f'{len(n)}'\n    \n"
    },
    {
        "number": 4434,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.split()\n    n = list(map(int, n))\n    n = list(n)\n    n = sorted(n)\n    for i in range(1, len(n)):\n        if n[i-1] == 0:\n            n[i-1] = n[i]\n    n = tuple(n)\n    if n in count:\n        count[n] += 1\n    else:\n        count[n] = 1\n    count = sorted(count.items())\n    for i in range(len(count)):\n        count[i][1] += count[i][0] - count[i][0] * (len(count) - i)\n    count = tuple(count)\n    answer = count[0][1]\n    for i in range(1, len(n)):\n        answer = max(answer, count[i][1] * len(n) - count[i][0])\n    return str(answer)\n\ndef"
    },
    {
        "number": 4434,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin)+1)"
    },
    {
        "number": 4434,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, k, s = map(int, stdin.split())\n    \n    if n % 2!= 0:\n        return 0\n    \n    counter = 0\n    \n    for i in range(1, n * 2):\n        if n - i >= 0 and n - i + 1 >= 0:\n            counter += s * i\n    \n    return counter\n\ndef"
    },
    {
        "number": 4434,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2!= 0:\n        return \"No\"\n    n //= 2\n    count = 0\n    moves = 0\n    for i in range(1, n**2, 2):\n        count += 1\n        moves += i\n    return str(count) + \" \" + str(moves)\n\n\ndef"
    },
    {
        "number": 4434,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.strip())\n    for _ in range(t):\n        n = int(stdin.strip())\n        n2 = n % 10\n        n = n // 10\n        n3 = n % 10\n        n = n // 10\n        n2 = n2 + n2 % 10\n        n3 = n3 + n3 % 10\n        n2 = n2 + n2 % 10\n        n3 = n3 + n3 % 10\n        print(n)\n        print(n2)\n        print(n3)\n    return \"\"\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4434,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    from collections import Counter\n    def solve(board, row, col, count, start):\n        if row == 0 or col == 0 or count == 0:\n            return count\n        if (row == start + 1) and (col == start + 1):\n            if board[row][col] == count:\n                return solve(board, row, col, count + 1, start + 1)\n            return 0\n        if (row - 1 < 0) or (col - 1 < 0) or (row - 1 >= len(board)) or (col - 1 >= len(board[0])):\n            return 0\n        return solve(board, row - 1, col - 1, count + 1, start + 1) + solve(board, row - 1, col + 1, count + 1, start + 1) + solve(board, row + 1, col - 1, count + 1, start + 1) + solve(board, row + 1, col + 1, count + 1, start + 1)\n    n = int(stdin.strip())\n    board = [[int(stdin.strip()) for stdin_input in range(n)] for _ in range(n)]\n    print(solve(board, n, n, Counter(range(1, n*n)), n))"
    },
    {
        "number": 4434,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n % 2 == 1:\n        return 0\n    \n    def dfs(pos: int, count: int, n: int) -> int:\n        if count == n:\n            return count\n        \n        ans = 0\n        \n        if n == 0:\n            return 0\n        \n        for i in range(pos, n+1):\n            if n % 2 == 1:\n                ans += dfs(i, count+1, n//2)\n            else:\n                ans += dfs(i, count+1, n//2+1)\n                \n        return ans\n    \n    return str(dfs(1, 0, n))\n\"\"\"\n\ndef"
    },
    {
        "number": 4435,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = []\n    for i in range(n):\n        a.append(int(stdin.strip()))\n    return str(min(a))\n\n-----Running Time -----\nRuntime: 1242 ms, faster than 73.38% of Python3 online submissions for Jump Game.\nMemory Usage: 15.3 MB, less than 37.51% of Python3 online submissions for Jump Game.\n\n-----Constraints -----\n1 <= n <= 10^5\n\n-----Tips-----\nYou are given an array $a$ consisting of $n$ integers. In one move, you can jump from the position $i$ to the position $i - a_i$ (if $1 \\le i - a_i$) or to the position $i + a_i$ (if $i + a_i \\le n$).\n\nThe parity of $a_i$ is even if $a_i$ is odd.\n\"\"\"\n\ndef"
    },
    {
        "number": 4435,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    d = [0] * n\n    for i in range(1, n):\n        d[i] = (a[i] - a[i-1]) * 2 - d[i-1]\n    j = 0\n    for i in range(1, n):\n        if d[i] > d[j] or (d[i] == d[j] and i == n):\n            j = i\n    if d[j] > d[j-1] or (d[j] == d[j-1] and j == n):\n        return str(j)\n    else:\n        return str(j) + str(n - j)\n\ndef"
    },
    {
        "number": 4435,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.split()))\n    dp = [0] * n\n    dp[0] = 1\n    for i in range(1, n):\n        for j in range(i):\n            if a[j] % 2!= a[i] % 2:\n                dp[i] = max(dp[i], dp[j] + 1)\n            else:\n                dp[i] = max(dp[i], dp[j] - 1)\n    return str(n - dp[-1])\n\nOutput\n5\n2 2 2 1 1 -1 2 -1 2 -1\n\nExplanation\n\nIn the example above, we have a pair $5$ and $5$ which are opposite odd numbers.\nIn the output, the minimum number of jumps needed to reach any of the odd numbers is $2$ because $4$ is the opposite odd number.\n\"\"\"\n"
    },
    {
        "number": 4435,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def is_odd(a):\n        return a % 2!= 0\n\n    n = int(stdin.strip().split()[0])\n    a = list(map(int, stdin.strip().split()[1:]))\n    d = 1\n    l = len(a)\n    s = [0] * l\n    res = []\n    while len(res) < n:\n        s[d] = a[d]\n        res.append(d)\n        d += 1\n        if d == l:\n            d = 0\n    if is_odd(s[-1]):\n        s[-1] = 1 - s[-1]\n        s.append(0)\n    if -1 in s:\n        s.remove(-1)\n        s.append(0)\n    s.sort(reverse=True)\n    for i in range(len(s)-2):\n        if s[i] + 1!= s[i + 1] and s[i + 1]!= s[i + 2]:\n            if s[i] % 2 == 0:\n                s[i] += 1\n            else:\n                s[i] -= 1\n    return''.join(map(str, s))"
    },
    {
        "number": 4435,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = [int(i) for i in stdin.split()]\n    moves = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
    },
    {
        "number": 4435,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(i) for i in stdin.split()]\n    for i in range(n - 2):\n        a[i], a[i+1] = a[i+1], a[i]\n    for j in range(n-1):\n        if a[j] > a[j+1]:\n            a[j], a[j+1] = a[j+1], a[j]\n    return ''.join([str(i) for i in a])\n\nprint(solution(input()))"
    },
    {
        "number": 4435,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(i) for i in stdin.split()]\n    def find_odd(x):\n        for i in range(1, x + 1):\n            if a[i - 1] & 1 == 0:\n                return False\n        return True\n    def find_even(x):\n        for i in range(1, x + 1):\n            if a[i - 1] & 1 == 1:\n                return False\n        return True\n    for i in range(len(a) - 1):\n        if not find_odd(i):\n            if not find_even(i):\n                a[i] = -1\n    for i in range(len(a) - 1, -1, -1):\n        if not find_even(i):\n            a[i] = -1\n    return str(len(a))\n\n\"\"\"\n\nfrom math import log\nfrom collections import Counter\n\ndef"
    },
    {
        "number": 4435,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin)\n    nums = [int(x) for x in stdin.split()]\n    s = nums[0]\n    d = nums[1]\n    \n    for i in range(1,n):\n        \n        if (s%2)!= (d%2):\n            \n            return -1\n        \n        if s%2 == d%2:\n            \n            s = s + d\n            d = d//2\n        \n    return s\n"
    },
    {
        "number": 4435,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    if all(a[-1 - i] % 2!= 0 for i in range(len(a) - 1)):\n        return str(n * (n + 1) // 2)\n    else:\n        return str(n * (n - 1) // 2)"
    },
    {
        "number": 4435,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    jumps = 0\n    for i in range(1, int(stdin[-1]) + 1):\n        for j in range(i):\n            if a[j] % 2!= a[i - j - 1]:\n                jumps += 1\n    return str(jumps)\n    \n"
    },
    {
        "number": 4436,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    for line in stdin:\n        a, b, c = map(int, line.split())\n        if a*b*c > n:\n            continue\n        if a == b and b == c:\n            continue\n        if a == b*c or a == b/c or a == c/b:\n            continue\n        for i in range(1, 10**9 + 1):\n            if (a * i) % c == b * i % c:\n                break\n        else:\n            continue\n        if a * i % c == b * i % c:\n            return str(i) + \" \" + \"YES\"\n    return \"NO\""
    },
    {
        "number": 4436,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n=int(stdin)\n    a=[]\n    b=[]\n    c=[]\n    for _ in range(n):\n        a.append(int(stdin.split(' ')[0]))\n        b.append(int(stdin.split(' ')[1]))\n        c.append(int(stdin.split(' ')[2]))\n    ans = []\n    for i in a:\n        for j in b:\n            ans.append(2 * i * j)\n    for i in c:\n        for j in c:\n            ans.append(2 * i * j)\n    for i in ans:\n        if i in n:\n            print('YES')\n            return i\n        else:\n            print('NO')\n            return 'NO'\n    \n"
    },
    {
        "number": 4436,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return 'NO'\n'''\n\ndef"
    },
    {
        "number": 4436,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    b = list(map(int, stdin.strip().split()))\n    c = list(map(int, stdin.strip().split()))\n\n    if len(a)!= len(b) or len(a)!= len(c):\n        return \"NO\"\n\n    if a[0] * b[0] * c[0]!= n:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n-----Constraints-----\n\n1 <= stdin.length <= 100\n0 <= n <= 10^9\n0 <= a[i] <= 10^9\n0 <= b[i] <= 10^9\n0 <= c[i] <= 10^9\n\n-----Time complexity-----\nO(N) - N is the number of test cases.\nO(N) - N is the number of elements in the list.\nO(N) - N is the number of unique integers.\nO(N) - N is the number of repeated numbers.\nO(N) - N is the total number of unique integers.\nO(N) - N is the total number of repeated numbers.\n\n-----Space complexity-----\nO(N) - N is the number of unique integers.\nO(N) - N is the number of repeated numbers.\nO(N) - N is the total number of unique integers.\nO(N) - N is the total number of repeated numbers.\n\n-----Algorithm-----\n\nO(1)\n\nO(N)\n\nO(N)\nO(N)\n\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\nO(N)\n"
    },
    {
        "number": 4436,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a, b, c = map(int, stdin.split())\n    if n%a!= 0 or n%b!= 0 or n%c!= 0:\n        return \"NO\"\n    print(a*b*c)\n    return \"YES\""
    },
    {
        "number": 4436,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n    x = int(stdin.strip().split()[0])\n    y = int(stdin.strip().split()[1])\n    z = x * y\n    \n    if z < 1 or z > 10**9:\n        return \"NO\"\n    \n    else:\n        if z % 2 == 0:\n            return 'YES'\n        else:\n            return 'NO'\n"
    },
    {
        "number": 4436,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    arr = [list(map(int, input().split())) for _ in range(n)]\n    dp = [[0] * 2 for _ in range(n)]\n    for i in range(n):\n        for j in range(2):\n            dp[i][j] = arr[i][j]\n            dp[i][1-j] = arr[i][j]\n    for i in range(n):\n        for j in range(n):\n            for k in range(j+1,n):\n                dp[i][j] = max(dp[i][j], dp[i][k] + dp[k][j])\n    print(dp[0][0] if dp[0][0] <= n else 'NO')\n    print(*dp[0][1:])\n"
    },
    {
        "number": 4436,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    for i in range(1, n+1):\n        a, b, c = map(int, stdin.strip().split())\n        if 2*a*b*c < n:\n            return \"NO\"\n        elif 2*a*b*c == n:\n            return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 4436,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def dfs(a, b, c, res):\n        if len(res) == 3:\n            res.append(str(a * b * c))\n            return\n        if c - a <= b - c:\n            res.append(str(a * b * c))\n            return\n        res.append(str(a * b * c))\n        dfs(a * b * c, a, b, res)\n        dfs(a, b, c, res)\n        dfs(a, b, c, res)\n        dfs(a, b, c, res)\n        dfs(a, b, c, res)\n\n    for _ in range(int(stdin.strip())):\n        a, b, c = map(int, input().strip().split())\n        res = []\n        dfs(a, b, c, res)\n        res = ''.join(res)\n        print(res if 'NO' not in res else 'NO')\n"
    },
    {
        "number": 4436,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin)\n    \n    if(n % 10**9!= 0):\n        return \"NO\"\n    \n    \n    if(n == 0):\n        return \"NO\"\n    \n    for i in range(1, n):\n        if(i % 10**9!= 0):\n            return \"NO\"\n        \n        a = i%10**9\n        b = i//10**9\n        \n        if(a > b):\n            return \"NO\"\n        \n        if(a % 2 == 0):\n            c = a//2\n            \n        else:\n            c = (a - b)*3\n        \n        if(n < c):\n            return \"NO\"\n    \n    return \"YES\""
    },
    {
        "number": 4437,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    s = stdin.strip()\n    op = [0 for _ in range(n)]\n    i = 0\n    j = 0\n    while i < n:\n        while j < n and not s[i].isdigit():\n            j += 1\n        op[i] = int(s[i])\n        i += 1\n        while j < n and not s[i].isdigit():\n            i += 1\n        op[i] = int(s[i])\n        i += 1\n    return ''.join([str(i) for i in op if i!= 0])\n\n\ndef"
    },
    {
        "number": 4437,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    s = stdin.strip()\n    a, b = list(map(lambda x: x.lower(), s.split()))\n    m = len(a)\n    d = len(b)\n    if m > n:\n        return \"\"\n    \n    if m == n:\n        return ''.join(b[:m] + [a[0]] + b[m:])\n    elif m == d:\n        return ''.join(b[:d] + ['a'] + b[d:])\n    else:\n        return \"\"\n\ndef"
    },
    {
        "number": 4437,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    symbol = 'a'\n    n_list = []\n    for i in range(n):\n        n_list.append(alphabet.index(symbol))\n    \n    answer = len(n_list[0])\n    for i in range(n-1):\n        if n_list[i+1] > n_list[i]:\n            answer += 1\n    answer += 1\n    \n    return str(answer)\n\nprint(solution(\"4\"))\nprint(solution(\"6\"))"
    },
    {
        "number": 4437,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    answer = 0\n    n = int(stdin[0])\n    s = stdin[1]\n    l = len(s)\n    if n % 2 == 0:\n        if l % 2 == 0:\n            for i in range(l):\n                if s[i] == 'a':\n                    answer += 2\n                elif s[i] == 'b':\n                    answer += 1\n        else:\n            for i in range(l):\n                if s[i] == 'a':\n                    answer += 1\n                elif s[i] == 'b':\n                    answer += 1\n    else:\n        if l % 2 == 0:\n            for i in range(l):\n                if s[i] == 'a':\n                    answer += 2\n                elif s[i] == 'b':\n                    answer += 1\n        else:\n            for i in range(l):\n                if s[i] == 'a':\n                    answer += 1\n                elif s[i] == 'b':\n                    answer += 1\n    return str(answer)\n"
    },
    {
        "number": 4437,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    s = stdin.strip().replace(' ', '')\n    s = list(s)\n    m = 0\n    for i in range(1, n):\n        s[i] = s[i].replace('a', 'b')\n        s[i] = s[i].replace('b', 'a')\n        s[i] = ''.join(s[i])\n        m = m + len(s[i])\n    return str(m)\n\nprint(solution(input()))"
    },
    {
        "number": 4437,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[1:n]\n    s_len = len(s)\n    if s_len % 2 == 0:\n        s_len += 1\n        s = s[1:s_len] + s[0]\n        s = s[1:s_len] + s[0]\n    c = 0\n    for i in range(s_len):\n        a = s[i]\n        b = s[i+1]\n        if b == a:\n            c += 1\n    print(c)\n    return str(c)"
    },
    {
        "number": 4437,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    prefix = [''] * n\n    for i in range(n):\n        line = stdin.strip().split()\n        prefix[i] = ''.join(line[1::2])\n    ans = 0\n    for i in range(n):\n        for j in range(n - i - 1):\n            if prefix[i][j]!= prefix[i][j + 1]:\n                ans += 1\n                prefix[i] = prefix[i][:j + 1] + prefix[i][j + 1:]\n    return str(ans)\n-----Constraints-----\n\n1 <= n <= 105\n\n0 <= s[i] <= 'z' for i in range(n)\ns[i]!= 'a' or 'b'\ns[i]!= 'A' or 'B'\ns[i]!= 'a' or 'b'\ns[i]!= 'A' or 'B'\ns[i]!= 'a' or 'b'\ns[i]!= 'A' or 'B'\ns[i]!= 'a' or 'b'\n\n-----Time complexity-----\n\nO(n^2)\n\nO(n^2)\n\n\nO(n^2)\n"
    },
    {
        "number": 4437,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    n = int(s[0])\n    s = s[1]\n    if len(s) % 2!= 0:\n        return 0\n    s = list(s)\n    for i in range(len(s)):\n        if s[i] == 'a' or s[i] == 'b':\n            if s[i + 1] == 'a' or s[i + 1] == 'b':\n                for j in range(i, len(s), 2):\n                    s[j] = s[j + 1]\n                return ''.join(s)\n\n(3 3 2)\n(6 6)\n(1 1)\n\n(3 2)\n(6 6)\n(1 1)\n(6 5)\n(1 1)\n"
    },
    {
        "number": 4437,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    alphabet = list(string.ascii_lowercase)\n    prefix = []\n    for i in range(1, n + 1):\n        for j in range(i):\n            prefix.append(alphabet[j] + 'a' + alphabet[i - j - 1])\n        prefix.append(alphabet[i - 1] + 'a' + alphabet[i])\n    for _ in range(m):\n        n = int(stdin.split()[1])\n        prefix = prefix[n:] + prefix[:n]\n        print(*prefix)\n    return '\\n'.join(prefix)\n\"\"\"\n\ndef"
    },
    {
        "number": 4437,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    string = stdin\n    \n    for i in range(len(string) // 2):\n        string = string.replace(string[i], 'a', 'b')\n    \n    for i in range(len(string) // 2, len(string)):\n        string = string.replace(string[i], 'b', 'a')\n    \n    return string"
    },
    {
        "number": 4438,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    print(min(n, 9 + min(n, 10)))\n\nsolution(\"4 4\")\nsolution(\"4 3\")\nsolution(\"4 1\")\nsolution(\"4 0\")\nsolution(\"1 1\")\nsolution(\"1 2\")\nsolution(\"1 0\")\nsolution(\"2 3\")\nsolution(\"2 1\")\nsolution(\"2 0\")\nsolution(\"3 2\")\nsolution(\"3 0\")\nsolution(\"4 3\")\nsolution(\"4 1\")\nsolution(\"4 0\")\n"
    },
    {
        "number": 4438,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    stdin = [int(i) for i in stdin]\n    n = stdin[0]\n    p = stdin[1:1+n]\n    return''.join(map(str, sorted(set(p))))\n\ndef"
    },
    {
        "number": 4438,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin)\n    \n    def get_points():\n        return [map(int, stdin.split()) for _ in range(n)]\n    \n    def get_points_list():\n        return list(map(int, stdin.split()))\n    \n    def solve():\n        p_list = get_points_list()\n        \n        points_set = set(p_list)\n        \n        distance_list = [abs(p_list[i] - p_list[j]) for i in range(len(p_list)) for j in range(len(p_list)) if p_list[i] - p_list[j]!= 1]\n        \n        return min(distance_list)\n    \n    return str(min(solve() for _ in range(n)))\n    \n"
    },
    {
        "number": 4438,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n == 1:\n        return '1'\n    elif n == 2:\n        return '2'\n    elif n == 3:\n        return '3'\n    elif n == 4:\n        return '4'\n    elif n == 5:\n        return '5'\n    elif n == 6:\n        return '6'\n    else:\n        return '7'\n        \n    \nprint(solution(input()))\n"
    },
    {
        "number": 4438,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    \n    key_points = [list(map(int, input().split())) for _ in range(n)]\n    key_points.sort(key=lambda x: x[0]*x[1])\n    \n    \n    def find_dist(start_point, key_points):\n        max_dist = 0\n        for point in key_points:\n            dist = abs(start_point[0]-point[0]) + abs(start_point[1]-point[1])\n            if dist > max_dist:\n                max_dist = dist\n        return max_dist\n    \n    def find_min_dist(start_point, key_points):\n        start_point_dist = find_dist(start_point, key_points)\n        for point in key_points:\n            if start_point_dist < find_dist(point, key_points):\n                start_point_dist = find_dist(point, key_points)\n        return start_point_dist\n    \n    dist = 0\n    min_dist = find_min_dist(start_point=key_points[0], key_points=key_points)\n    for point in key_points:\n        if dist < find_min_dist(start_point=point, key_points=key_points):\n            dist = find_min_dist(start_point=point, key_points=key_points)\n        min_dist = min(min_dist, dist)\n    \n    print(min_dist)\n    return\n\n----- Constraints -----\n0 <= n <= 10^5\n\n----- Submissions -----\n1508\n\"\"\"\n\ndef"
    },
    {
        "number": 4438,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n        n = int(stdin[0])\n        points = [tuple(map(int, input().split())) for _ in range(n)]\n        cnt = 0\n        for p in points:\n            p_i = p[0]\n            p_j = p[1]\n            diff = p_i - p_j\n            if diff == 0:\n                cnt += 1\n            else:\n                cnt += 1\n                for i in range(p_i, p_j + 1):\n                    if i < 10 ** 9:\n                        if cnt <= 1:\n                            return str(i)\n                        else:\n                            break\n                    else:\n                        break\n        return str(cnt)\n"
    },
    {
        "number": 4438,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    lst = []\n    for i in range(1, n+1):\n        lst.append(list(map(int, stdin.split(' '))))\n    ans = 1e+9\n    for i in range(n):\n        for j in range(i+1, n):\n            ans = min(ans, abs(lst[i][0]-lst[j][0])+abs(lst[i][1]-lst[j][1]))\n    return str(ans)\nsolution(stdin)"
    },
    {
        "number": 4438,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n        n = int(stdin)\n        points = []\n        for i in range(n):\n            x, y = map(int, stdin.split())\n            points.append((x, y))\n        print(min(map(abs, points)))\n        return str(min(map(abs, points)))\n        \n\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n"
    },
    {
        "number": 4438,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin)\n    x1 = list(map(int, stdin.split()))\n    x2 = list(map(int, stdin.split()))\n    x1.sort()\n    x2.sort()\n    \n    def check(i):\n        if x1[i]!= x2[i]:\n            return False\n        if abs(x1[i] - x2[i]) == 1:\n            return False\n        else:\n            return True\n        \n    # \u043d\u0430\u0445\u043e\u0434\u0438\u043c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0443\u044e \u0434\u043b\u0438\u043d\u0443 \u0442\u0440\u0435\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a\u0430\n    max_length = (min(x1[0], x2[0]) - max(x1[0], x2[0])) + 1\n    for i in range(1, n):\n        if check(i):\n            if (max_length - (i - 1)) <= x1[i] - x2[i]:\n                max_length = (max_length - (i - 1)) + 1\n    # \u043d\u0430\u0445\u043e\u0434\u0438\u043c \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u0443\u044e \u0434\u043b\u0438\u043d\u0443 \u0442\u0440\u0435\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a\u0430\n    min_length = min(x1[0], x2[0])\n    for i in range(1, n):\n        if check(i):\n            if (min_length - (i - 1)) >= x1[i] - x2[i]:\n                min_length = (min_length - (i - 1)) + 1\n    # \u043d\u0430\u0445\u043e\u0434\u0438\u043c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u043f\u0443\u0442\u044c \u0447\u0435\u0440\u0435\u0437 \u0431\u043b\u0438\u0436\u0430\u0439\u0448\u0438\u0439 \u0448\u0430\u0433 \u0438 \u043f\u0435\u0440\u0435\u0431\u0438\u0440\u0430\u0435\u043c \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438\n    path = x1[n - 1] - x2[0]\n    for i in range(n - 2, -1, -1):\n        if (min_length - (i + 1)) <= path <= (max_length - (i + 1)) + 1:\n            path = path - (i + 1)\n    # \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \n    return str(path)\n"
    },
    {
        "number": 4438,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x, y = 0, 0\n    n = int(stdin)\n    grid = [[0 for _ in range(n)] for _ in range(n)]\n    for _ in range(n):\n        line = input()\n        line = [int(v) for v in line.split(' ')]\n        if line[1] == 0:\n            x, y = line[0], line[2]\n        elif line[1] == 1:\n            x, y = line[2], line[0]\n        elif line[1] == 2:\n            x, y = line[0], line[2]\n        else:\n            x, y = line[2], line[0]\n        for i in range(x - 1, x + 2):\n            for j in range(y - 1, y + 2):\n                grid[i][j] = 1\n    return \"\".join([str(grid[i][j]) for i in range(n) for j in range(n)])\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4439,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    for _ in range(int(stdin)):\n        a,b = map(int, stdin.split())\n        if a == 3 or b == 3:\n            print(2)\n            return\n        elif a == 1 or b == 2:\n            print(1)\n            return\n        else:\n            print(3)\n            return\n    \n"
    },
    {
        "number": 4439,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    numA = int(stdin.split()[0])\n    numB = int(stdin.split()[1])\n    if numA == 3 or numB == 3:\n        return 2\n    elif numA == 1 or numB == 1:\n        return 3\n    else:\n        return 1"
    },
    {
        "number": 4439,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    numbers = list(map(int, stdin.split()))\n    result = ''\n    for i in range(n):\n        for j in range(n):\n            if numbers[i] == 1 and numbers[j] == 3:\n                result += str(i) +''\n            elif numbers[i] == 2 and numbers[j] == 1:\n                result += str(i) +''\n            elif numbers[i] == 2 and numbers[j] == 2:\n                result += str(i) +''\n            elif numbers[i] == 2 and numbers[j] == 3:\n                result += str(i) +''\n    return result\n"
    },
    {
        "number": 4439,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 4439,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    b = [int(x) for x in stdin.split()]\n    a = [x for x in b if x > 0]\n    b = [x for x in b if x < 3]\n    c = b\n    return '2' if sum(a) > sum(c) else '1'\n\n2 2\n2\n\n2\n\n-----Sample Output-----\nSample Input\n3\n1\n\nSample Output\n1\n\nSample Input\n3\n2\n\nSample Output\n2\n\n'''\nimport sys\nf = sys.stdin\n"
    },
    {
        "number": 4439,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B = [int(i) for i in stdin.split()]\n    if A > B:\n        return '2'\n    if B > A:\n        return '1'\n    return '3'\n\ndef"
    },
    {
        "number": 4439,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin[0]) + int(stdin[1]))\n\ndef"
    },
    {
        "number": 4439,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    numbers = list(map(int, stdin.split()))\n    i = 0\n    while i < n:\n        for j in range(3):\n            if numbers[i] % 3 == j:\n                return j\n        i += 1\n    return \"3\"\n\nprint(solution(input()))\n'''"
    },
    {
        "number": 4439,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    score = 0\n    answer = ''\n    for num in stdin:\n        if num == 'A':\n            score += 1\n            answer += str(score)\n        elif num == 'B':\n            score -= 1\n            answer += str(score)\n        else:\n            answer += str(score)\n    return answer"
    },
    {
        "number": 4439,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A == 1 or B == 2:\n        return 1\n    if A == B == 3:\n        return 2\n    else:\n        return 3\n"
    },
    {
        "number": 4440,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    L = int(stdin)\n    for i in range(1, L + 1):\n        if L % i == 0:\n            print(L + L//i)\n            return L + L//i\n    print(\"Error\")\n    return \"Error\"\n\n\uc815\ud655\uc131 \uc548\uc5d0 \uac00\uc0b0\ud55c \uc18c\uc218\uc810 \uc218 \ucc28\uc774\ub97c \uc0b4\ud3b4\ubcf4\uc138\uc694.\n\uc815\ud655\uc131 \ubc1c\uc0dd\ud55c \uc218\uc5d0\uc11c\ub294 \uc18c\uc218\uc810\uc744 \uc81c\uc678\ud558\uace0 \ud574\uc11d\ub41c\ub2e4.\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4440,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    l = list(map(int, stdin.split()))\n    if len(l) > 1:\n        print('ERROR')\n        return None\n    if l[0]!= 0 and l[0]!= 1 and l[0]!= 2:\n        print('ERROR')\n        return None\n    return str(abs(sum(map(lambda x: x * x, l))))\n\n\n    pass\n"
    },
    {
        "number": 4440,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def f(l):\n        lst = []\n        lst.append(l)\n        for i in range(len(l)):\n            lst.append(l[i] + l[i+1] + l[i+2] + l[i+3])\n        return max(lst)\n\n    d = {0: 1, 1: 1, 2: 2}\n    s = f(d)\n    if s % 10 == 0:\n        print(s)\n        return\n    else:\n        print(\"error\")\n        return\n\ndef"
    },
    {
        "number": 4440,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    for t in range(2, int(stdin) + 1):\n        for a in range(1, int(stdin) / t):\n            for b in range(1, int(stdin) / t):\n                c = a + b\n                if a + b == c:\n                    c = a + 1\n                    if b == 1:\n                        if a == 1 and b == 1:\n                            print(0)\n                        else:\n                            print(max(abs(a - b), abs(a - c), abs(b - c)))\n                    else:\n                        print(max(abs(a - b), abs(a - c), abs(b - c)))\n                else:\n                    print(max(abs(a - b), abs(a - c), abs(b - c)))\n    return str(max(abs(a - b), abs(a - c), abs(b - c)))\n\nA = int(input())\nprint(solution(A))\n"
    },
    {
        "number": 4440,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    L = int(stdin.strip())\n    if L < 0:\n        return \"Error: Less then zero\"\n    x1, x2, x3 = [int(i) for i in stdin.split(\" \")]\n    if (x1 < 1) or (x1 > 10**5):\n        return \"Error: Invalid x1 value\"\n    if (x2 < 1) or (x2 > 10**5):\n        return \"Error: Invalid x2 value\"\n    if (x3 < 1) or (x3 > 10**5):\n        return \"Error: Invalid x3 value\"\n    if (x1+x2+x3)%1:\n        return \"Error: Invalid x3 value\"\n    if (x1+x3)%1:\n        return \"Error: Invalid x1 value\"\n    if (x1+x2)%1:\n        return \"Error: Invalid x2 value\"\n    if (x1+x3)%1:\n        return \"Error: Invalid x3 value\"\n    if (x1*x2*x3)%1:\n        return \"Error: Invalid x1 value\"\n    if (x1*x2)%1:\n        return \"Error: Invalid x2 value\"\n    if (x1*x3)%1:\n        return \"Error: Invalid x3 value\"\n    if (x1*x2*x3)%1:\n        return \"Error: Invalid x3 value\"\n    if (x1*x3)%1:\n        return \"Error: Invalid x1 value\"\n    if (x1*x2/x3)%1:\n        return \"Error: Invalid x2 value\"\n    if (x1*x2/x3)%1:\n        return \"Error: Invalid x3 value\"\n    if (x1*x3/x2)%1:\n        return \"Error: Invalid x3 value\"\n    if (x1*x3/x2)%1:\n        return \"Error: Invalid x1 value\"\n    if (x1*x2/x3)%1:\n        return \"Error: Invalid x2 value\"\n    if (x1*x2/x3)%1:\n        return \"Error: Invalid x3 value\"\n    if (x1*x2/x3)%1:\n        return \"Error: Invalid x1 value\"\n    if (x1*x3/x2)%1:\n        return \"Error: Invalid x3 value\"\n    if (x1*x2/x3)%1:\n        return \"Error: Invalid x2 value\"\n    if (x1*x3/x2)%1:\n        return \"Error: Invalid x3 value\"\n    if (x1*x3/x3)%1:\n        return \"Error: Invalid x3 value\"\n    if (x1*x2/x3)%1:\n        return \"Error: Invalid x2 value\"\n    if (x1*x3/x3)%1:\n        return \"Error: Invalid x3 value\"\n    if (x1*x2/x3)%1:\n        return \"Error: Invalid x2 value\"\n    if (x1*x3/x3)%1:\n        return \"Error: Invalid x3 value\"\n    if (x1*x2/x3)%1:\n        return \"Error: Invalid x2 value\"\n    if (x1*x3/x3)%1:\n        return \"Error: Invalid x3 value\"\n    if (x1*x2/x3)%1:\n        return \"Error: Invalid x2 value\"\n    if (x1*x3/x3)%1:\n        return \"Error: Invalid x3 value\"\n    if (x1*x2/x3)%1:\n        return \"Error: Invalid x2 value\"\n    if (x1*x3/x3)%1:\n        return \"Error: Invalid x3 value\"\n    if (x1*x2/x3)%1:\n        return \"Error: Invalid x2 value\"\n    if (x1*x3/x3)%1:\n        return \"Error: Invalid x3 value\"\n    if (x1*x2/x3)%1:\n        return \"Error: Invalid x2 value\"\n    if (x1*x3/x3)%1:\n        return \"Error: Invalid x3 value\"\n    if (x1*x2/x3)%1:\n        return \"Error: Invalid x2 value\"\n    if (x1*x3/x3)%1:\n        return \"Error: Invalid x3 value\"\n    if (x1*x2/x3)%1:\n        return \"Error: Invalid x2 value\"\n    if (x1*x3/x3)%1:\n        return \"Error: Invalid x3 value\"\n    if (x1*x2/x3)%1:\n        return \"Error: Invalid x2 value\"\n    if (x1*x3/x3)%1:\n        return \"Error: Invalid x3 value\"\n    if (x1*x2/x3)%1:\n        return \"Error: Invalid x2 value\"\n    if (x1*x3/x3)%1:\n        return \"Error: Invalid x3 value\"\n    if (x1*x2/x3)%1:\n        return \"Error: Invalid x2 value\"\n    if (x1*x3/x3)%1:\n        return \"Error: Invalid x3 value\"\n    if (x1*x2/x3)%1:\n        return \"Error: Invalid x2 value\"\n    if (x1*x3/x3)%1:\n        return \"Error: Invalid x3 value\"\n    if (x1*x2/x3)%1:\n        return \"Error: Invalid x2 value\"\n    if (x1*x3/x3)%1:\n        return \"Error: Invalid x3 value\"\n    if (x1*x2/x3)%1:\n        return \"Error: Invalid x2 value\"\n    if (x1*x3/x3)%1:\n        return \"Error: Invalid x3 value\"\n    if (x1*x2/x3)%1:\n        return \"Error: Invalid x2 value\"\n    if (x1*x3/x3)%1:\n        return \"Error: Invalid x3 value\"\n    if (x1*x2/x3)%1:\n        return \"Error: Invalid x2 value\"\n    if (x1*x3/x3)%1:\n        return \"Error: Invalid x3 value\"\n    if (x1*x2/x3)%1:\n        return \"Error: Invalid x2 value\"\n    if (x1*x3/x3)%1:\n        return \"Error: Invalid x3 value\"\n    if (x1*x2/x3)%1:\n        return \"Error: Invalid x2 value\"\n    if (x1*x3/x3)%1:\n        return \"Error: Invalid x3 value\"\n    if (x1*x2/x3)%1:\n        return \"Error: Invalid x2 value\"\n    if (x1*x3/x3)%1:\n        return \"Error: Invalid x3 value\"\n    if (x1*x2/x3)%1:\n        return \"Error: Invalid x2 value\"\n    if (x1*x3/x3)%1:\n        return \"Error: Invalid x3 value\"\n    if (x1*x2/x3)%1:\n        return \"Error: Invalid x2 value\"\n    if (x1*x3"
    },
    {
        "number": 4440,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    pass\n"
    },
    {
        "number": 4440,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input_str = stdin.strip()\n    max_vol = 0\n    for i in range(0, len(input_str)):\n        if input_str[i] == '(':\n            if len(input_str) > i + 1:\n                right = input_str[i + 1:i + 1 + len(input_str)]\n                left = input_str[:i]\n                if ''.join(map(str, right)) + ''.join(map(str, left)) == input_str:\n                    max_vol = max(int(right), int(left))\n    return str(max_vol)\n\nTEST\nInput:\n3\n(((((2)((3)())())((4)())())))\nOutput:\n1\n\nExplanation:\n1 * 1 * 1 = 1\n2 * 2 * 2 = 3\n3 * 3 * 3 = 6\n\nExplanation:\n2 * 2 * 2 = 6\n3 * 3 * 3 = 12\n\nOutput:\n1\n\nExplanation:\n2 * 2 * 2 = 6\n3 * 3 * 3 = 12\n\n\"\"\"\n\nclass Solution:\n    def volume(self, A):\n        r = 1\n        for l in A:\n            r *= float(l)\n        return r\n\n    def volume1(self, A):\n        l = 0\n        for i in range(len(A)):\n            if A[i]!= 0:\n                l += A[i]\n        return l"
    },
    {
        "number": 4440,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    l = list(map(int, stdin.split()))\n    max_cuboid = 0\n    for i in l:\n        max_cuboid = max(max_cuboid, 1 + i*(i+1)//2)\n    return str(abs(max_cuboid-sum(l)))\n    # return str((l[0]+l[1]+l[2])*(l[0]+l[1]+l[2])*(l[0]+l[1]+l[2]))\n    # return abs((l[0] + l[1] + l[2]) * (l[0] + l[1] + l[2]))"
    },
    {
        "number": 4440,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = 0\n    for l in stdin:\n        if l.isdigit():\n            n = int(l)\n    if n == 1:\n        return 1\n    return 0\n\nTime: O(logn)\nSpace: O(1)"
    },
    {
        "number": 4440,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n  return stdin\n\"\"\"\ndef"
    },
    {
        "number": 4441,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    for line in stdin:\n        if line.isdigit():\n            N = int(line)\n            if N < 1 or N > 2:\n                return \"Hello World\"\n            else:\n                print(str(N) + \" \" + str(N+1) + \" \" + str(N+2))\n        else:\n            print(\"Please input A, B as the first two numbers.\")\n            return \"Hello World\"\n    return \"Hello World\"\n"
    },
    {
        "number": 4441,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A >= 1 and B >= 1:\n        print(A + B)\n    else:\n        print(A)\n    return ''\n\n\"\"\"\n"
    },
    {
        "number": 4441,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(1, 5):\n        N = int(input())\n        a, b = map(int, stdin.split())\n        print(a+b)\n    return \"\"\n\n-----Sample Input-----\n2\n2\n2\n1\n\n-----Output-----\nHello World\n\n-----Sample Input-----\n2\n9\n2\n5\n2\n\n-----Output-----\nHello World\n\n-----Sample Input-----\n10\n1\n6\n3\n4\n\n-----Output-----\nHello World\n\n-----Sample Input-----\n10\n1\n6\n3\n5\n\n-----Output-----\nHello World\n\n-----Sample Input-----\n5\n9\n6\n3\n\n-----Output-----\nHello World\n\n-----Sample Input-----\n10\n5\n1\n\n-----Output-----\nHello World\n\n-----Sample Input-----\n7\n5\n3\n3\n\n-----Output-----\nHello World\n\n-----Sample Input-----\n7\n3\n2\n\n-----Output-----\nHello World\n\n-----Sample Input-----\n3\n4\n7\n\n-----Output-----\nHello World\n"
    },
    {
        "number": 4441,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    print(a+b)\n    return ''\n\nprint(solution(stdin))\n'''\n\n'''\nThe property of the Monotonic Array is that the largest element is in the array, but the smallest element is in the array.\n\nSo, for example, [1, 4, 3, 6, 5] is not monotonically decreasing, but, for any non-monotonic array, the smallest number is 4.\n\n\nGiven an array of integers, find the smallest element and the first occurrence of this number.\n\nFor example, the smallest number in the array is 1, and the first occurrence of 1 is index 0.\n\nWrite this program for him.  \n\n-----Constraints-----\n - A.length is in the range [1, 10,000].\n - A.length is also an integer between 1 and 10,000 (both inclusive).\n - 1 <= A[i] <= 10,000.\n\n-----Input-----\nInput is given from Standard Input in one of the following formats:  \n1\n\n2\nA\nB\n\n-----Output-----\nIf the array is monotonic, then you should print the smallest number, B.\n\nIf not, print -1.\n\nNote that if the array is not monotonic, you should print -1.\n'''\n\n'''\nThe property of the Monotonic Array is that the largest element is in the array, but the smallest element is in the array.\n\nSo, for example, [1, 4, 3, 6, 5] is not monotonically decreasing, but, for any non-monotonic array, the smallest number is 4.\n\nWrite this program for him.  \n\n-----Constraints-----\n - A.length is in the range [1, 10,000].\n - A.length is also an integer between 1 and 10,000 (both inclusive).\n - 1 <= A[i] <= 10,000.\n\n-----Input-----\nInput is given from Standard Input in one of the following formats:  \n1\n\n2\nA\nB\n\n-----Output-----\nIf the array is monotonic, then you should print the smallest number, B.\n\nIf not, print -1.\n\nNote that if the array is not monotonic, you should print -1.\n'''\n\n'''\nThe property of the Monotonic Array is that the largest element is in the array, but the smallest element is in the array.\n\nSo, for example, [1, 4, 3, 6, 5] is not monotonically decreasing, but, for any non-monotonic array, the smallest number is 4.\n\nWrite this program for him.  \n\n-----Constraints-----\n - A.length is in the range [1, 10,000].\n - A.length is also an integer between 1 and 10,000 (both inclusive).\n - 1 <= A[i] <= 10,000.\n\n-----Input-----\nInput is given from Standard Input in one of the following formats:  \n1\n\n2\nA\nB\n\n-----Output-----\nIf the array is monotonic, then you should print the smallest number, B.\n\nIf not, print -1.\n\nNote that if the array is not monotonic, you should print -1.\n'''\n\n'''\nThe property of the Monotonic Array is that the largest element is in the array, but the smallest element is in the array.\n\nSo, for example, [1, 4, 3, 6, 5] is not monotonically decreasing, but, for any non-monotonic array, the smallest number is 4.\n\nWrite this program for him.  \n\n-----Constraints-----\n - A.length is in the range [1, 10,000].\n - A.length is also an integer between 1 and 10,000 (both inclusive).\n - 1 <= A[i] <= 10,000.\n\n-----Input-----\nInput is given from Standard Input in one of the following formats:  \n1\n\n2\nA\nB\n\n-----Output-----\nIf the array is monotonic, then you should print the smallest number, B.\n\nIf not, print -1.\n\nNote that if the array is not monotonic, you should print -1.\n'''\n\n'''\nThe property of the Monotonic Array is that the largest element is in the array, but the smallest element is in the array.\n\nSo, for example, [1, 4, 3, 6, 5] is not monotonically decreasing, but, for any non-monotonic array, the smallest number is 4.\n\nWrite this program for him.  \n\n-----Constraints-----\n - A.length is in the range [1, 10,000].\n - A.length is also an integer between 1 and 10,000 (both inclusive).\n - 1 <= A[i] <= 10,000.\n\n-----Input-----\nInput is given from Standard Input in one of the following formats:  \n1\n\n2\nA\nB\n\n-----Output-----\nIf the array is monotonic, then you should print the smallest number, B.\n\nIf not, print -1.\n\nNote that if the array is not monotonic, you should print -1.\n'''\n\n'''\nThe property of the Monotonic Array is that the largest element is in the array, but the smallest element is in the array.\n\nSo, for example, [1, 4, 3, 6, 5] is not monotonically decreasing, but, for any non-monotonic array, the smallest number is 4.\n\nWrite this program for him.  \n\n-----Constraints-----\n - A.length is in the range [1, 10,000].\n - A.length is also an integer between 1 and 10,000 (both inclusive).\n - 1 <= A[i] <= 10,000.\n\n-----Input-----\nInput is given from Standard Input in one of the following formats:  \n1\n\n2\nA\nB\n\n-----Output-----\nIf the array is monotonic, then you should print the smallest number, B.\n\nIf not, print -1.\n\nNote that if the array is not monotonic, you should print -1.\n'''\n\n'''\nThe property of the Monotonic Array is that the largest element is in the array, but the smallest element is in the array.\n\nSo, for example, [1, 4, 3, 6, 5] is not monotonically decreasing, but, for any non-monotonic array, the smallest number is 4.\n\nWrite this program for him.  \n\n-----Constraints-----\n - A.length is in the range [1, 10,000].\n - A.length is also an integer between 1 and 10,000 (both inclusive).\n - 1 <= A[i] <= 10,000.\n\n-----Input-----\nInput is given from Standard Input in one of the following formats:  \n1\n\n2\nA\nB\n\n-----Output-----\nIf the array is monotonic, then you should print the smallest number, B.\n\nIf not, print -1.\n\nNote that if the array is not monotonic, you should print -1.\n'''\n\n'''\nThe property of the Monotonic Array is that the largest element is in the array, but the smallest element is in the array.\n\nSo, for example, [1, 4, 3, 6, 5] is not monotonically decreasing, but, for any non-monotonic array, the smallest number is 4.\n\nWrite this program for him.  \n\n-----Constraints-----\n - A.length is in the range ["
    },
    {
        "number": 4441,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A == 1:\n        answer = str(A+B)\n    else:\n        answer = str(A-B)\n    return answer\n\ndef"
    },
    {
        "number": 4441,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n%2==0:\n        answer = 'Hello World'\n    else:\n        answer = 'A+B'\n    return answer\n\n--- This method will run for 1 sec ---\n\"\"\""
    },
    {
        "number": 4441,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n == 1:\n        return 'Hello World'\n    elif n == 2:\n        return 'A+B'\n    else:\n        return str(n+1)\n    \n### additional non-recursive version\n"
    },
    {
        "number": 4441,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N == 1:\n        return 'Hello World'\n    elif N == 2:\n        return str(A+B)\n    else:\n        return str(A+B)+'+'+str(A+B)\n"
    },
    {
        "number": 4441,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"Hello World\""
    },
    {
        "number": 4441,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    A = int(stdin)\n    B = int(stdin)\n    answer = \"\"\n    if N==1:\n        answer = \"Hello World\"\n    elif N==2:\n        answer = A+B\n    return answer\n\n--------Constraints--------\n1\n1\n2\n1\n1\n1\n\n-----Time Limit-----\nTime Limit: 1 second\n\n--------Memory Limit--------\nTime Limit: 256 MB\n\n--------Input Format--------\nThe first line contains the space separated values of N and A.\n\nThe next N lines each contain an integer A.\n\nOutput Format\n\nOutput a single line containing the concatenation of Hello World if N=1, and Hello World if N=2.\n\nSample Input\n\n1\n3\n1 2 3 4\nSample Output\n\nHello World\n\n2\n1 2 3 4"
    },
    {
        "number": 4442,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    b, a = stdin.split()\n    a = a.split()\n    b = b.split()\n    \n    for i in range(len(a)):\n        a[i] = int(a[i])\n    for i in range(len(b)):\n        b[i] = int(b[i])\n        \n    result = \"\"\n    if(len(b) == len(a)):\n        for i in range(len(a)):\n            result += str(a[i]) + b[i]\n        \n    else:\n        print(\"\")\n        print(\"\")\n        print(\"\")\n        print(\"\")\n        for i in range(len(a)):\n            result += str(a[i]) + b[i]\n    return result\n\n'''\ndef"
    },
    {
        "number": 4442,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = \"\".join(str(s) for s in map(int, stdin.split()))\n    return \"\".join(sorted(s)[::-1])"
    },
    {
        "number": 4442,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    list1 = list(stdin)\n    result = []\n    for i in range(len(list1)):\n        b = int(list1[i])\n        a = int(list1[i + 1])\n        if b < a:\n            result.append(str(a))\n        else:\n            result.append(str(b))\n    return \"\".join(result)\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4442,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    def parse_string(string: str) -> int:\n        \n        # get the digits of the string\n        string_digits = [int(d) for d in string]\n        \n        # return the length of the string\n        return len(string_digits)\n        \n    # parse the input\n    a, b = map(int, stdin.split())\n    \n    # get the numbers of a and b\n    a_numbers = parse_string(a)\n    b_numbers = parse_string(b)\n    \n    # return the lexicographically smaller string\n    return a_numbers < b_numbers"
    },
    {
        "number": 4442,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n  a,b = stdin.split()\n  a = int(a)\n  b = int(b)\n  \n  if a<b:\n    return str(a) + str(b)\n  else:\n    return str(b) + str(a)"
    },
    {
        "number": 4442,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    num1 = int(stdin[0])\n    num2 = int(stdin[1])\n    print(solution_1(num1, num2))\n    return solution_2(num1, num2)\ndef"
    },
    {
        "number": 4442,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    string1 = stdin.split(' ')\n    string2 = stdin.split(' ')\n    if len(string1)!= len(string2):\n        print('')\n    else:\n        return sorted(string1, key=int) + sorted(string2, key=int)\n\nprint(solution('2 2 2 2'))\nprint(solution('4 3'))\nprint(solution('2 9'))\nprint(solution('2 2'))\nprint(solution('4 3'))\n"
    },
    {
        "number": 4442,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a == b:\n        return '3333'\n    if a < b:\n        return '444'\n    return '444'"
    },
    {
        "number": 4442,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(i) for i in stdin.split()]\n    l1, l2 = [b, a], [a, b]\n    l1 = list(map(lambda x: str(x), filter(lambda x: x <= 9, list(map(int, stdin.split())))) + [0])\n    l2 = list(map(lambda x: str(x), filter(lambda x: x <= 9, list(map(int, stdin.split())))) + [0])\n    l1.sort()\n    l2.sort()\n    l3 = list(filter(lambda x: x!= 0, l1 + l2))\n    return ''.join(l3)\n\ndef"
    },
    {
        "number": 4442,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    a = int(a)\n    b = int(b)\n    if a > b:\n        return str(a) + str(b)\n    else:\n        return str(b) + str(a)\n\"\"\"\n\nimport sys\n\nclass Solution:\n    def getLCA(self, A: str, B: str) -> int:\n        if len(A) < len(B):\n            return self.getLCA(B, A)\n        lca = 0\n        for i in range(len(A)):\n            lca += min(A[i], B[i])\n        return lca\n\ndef"
    },
    {
        "number": 4443,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    res = []\n    for ch in stdin.strip():\n        if ch in \"abcdefghijklmnopqrstuvwxyz\":\n            res.append(ch)\n    return ''.join(res)\n\ndef"
    },
    {
        "number": 4443,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4443,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    answer = \"\"\n    for word in stdin.split():\n        if len(word) >= 3:\n            answer += word[-3:]\n    return answer\n"
    },
    {
        "number": 4443,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    C = input()\n    a = ''\n    b = ''\n    for i in stdin:\n        if i == C:\n            a = C\n            C = ''\n        else:\n            C += i\n    if C!= '':\n        b = C[::-1]\n        print(a+b)\n    else:\n        print(a)\n    \n"
    },
    {
        "number": 4443,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n  word = stdin\n  while word:\n    l = word[0]\n    word = word[1:]\n    print(l, end=' ')\n    word = word[:l.index(l)] + word[l.index(l)+1:]\n  return ''.join(sorted(word))\n-----Explanation-----\na = 'a'\nprint(solution(a))"
    },
    {
        "number": 4443,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n    c=str(stdin.lower())\n    c=c.split()\n    if c[-1]==\"z\":\n        c.pop()\n    for i in range(len(c)):\n        print(c[i][-1])\n    return \"\".join(c)\n\ndef"
    },
    {
        "number": 4443,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n'''\nclass Solution:\n    def letterOrder(self, s):\n        char2num = {'a':0,'b':1,'c':2,'d':3,'e':4,'f':5,'g':6,'h':7,'i':8,'j':9,'k':10,'l':11,'m':12,'n':13,'o':14,'p':15,'q':16,'r':17,'s':18,'t':19,'u':20,'v':21,'w':22,'x':23,'y':24,'z':25}\n        for c in s:\n            if c not in char2num:\n                return False\n        for i in range(26):\n            if i < len(s):\n                if s[i] not in char2num:\n                    return False\n        return s\n"
    },
    {
        "number": 4443,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    str_list = list(stdin)\n    for i in range(1, len(str_list)):\n        if str_list[i] == 'z':\n            str_list[i] = 'a'\n        else:\n            break\n    return ''.join(str_list)"
    },
    {
        "number": 4443,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    str_list = list(stdin)\n    str_list.sort()\n    print(''.join(str_list[::-1]))\n    return ''.join(str_list[::-1])\n'''"
    },
    {
        "number": 4443,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split(\" \")\n    lowercase_letters = input[0].lower()\n    lowercase_letters = lowercase_letters.replace(\"a\", \"c\")\n    lowercase_letters = lowercase_letters.replace(\"b\", \"c\")\n    result = lowercase_letters[lowercase_letters.index(input[1][0])]\n    return result"
    },
    {
        "number": 4444,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join(sorted(stdin, key=lambda x: (x, len(x))))"
    },
    {
        "number": 4444,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def solve(S, T):\n        if len(S) == len(T):\n            print(S+T)\n            return\n        if len(S) > len(T):\n            for i in range(len(T), len(S)):\n                s = T[:i] + S\n                t = T[i:]\n                print(s+t)\n            return\n        for i in range(len(S)):\n            if S[i] == T[i]:\n                continue\n            s = S[:i] + T[i:]\n            t = T[i:]\n            print(s+t)\n\n    def main():\n        for _ in range(int(input())):\n            s, t = input().split()\n            s = \" \" + s\n            t = \" \" + t\n            solve(s, t)\n\n    main()\n-----Sample Input-----\noderatc\n\n-----Sample Output-----\natcoder\n\nWhen S =  oder and T =  atc, concatenating T and S in this order results in atcoder.\ndef"
    },
    {
        "number": 4444,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\nfrom collections import Counter\n\n\ndef"
    },
    {
        "number": 4444,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    result = ''\n    for line in stdin:\n        result += line.strip() +''\n    return result\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4444,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace(\" \",\"\").replace(\"\\n\",\"\").replace(\"\\t\",\"\")\n\nInput\n      T T\n\nOutput\n      T T\n\nConstraints\n1 <= S.length <= 100\n1 <= T.length <= 100\nS and T consist of lowercase English letters.\n\nSample Input\n  O\n  a\nSample Output\n   a\n\nInput\n    T T\n    T T\n\nSample Input\n    T T\n    T a\nSample Output\n    T T\n\"\"\"\n\ndef"
    },
    {
        "number": 4444,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n    return stdin.replace('\\n','').split(' ')\n\"\"\""
    },
    {
        "number": 4444,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n  S = stdin[0]\n  T = stdin[2]\n  T = T.upper()\n  T = T.replace(' ', '')\n  S = S.upper()\n  answer = []\n  for i in range(len(T)):\n    answer.append(S[i] + T[i])\n  return \"\".join(answer)\n'''\n\nclass Solution:\n    def __init__(self):\n        self.curr = []\n    def add(self, s):\n        curr = self.curr[len(self.curr) - 1]\n        if curr[-1]!= \".\":\n            self.curr.append(s)\n        else:\n            self.curr.append(curr[:-1] + s)\n        self.curr[len(self.curr) - 1] = s\n    def find(self, num):\n        for i in self.curr:\n            if num == i[-1]:\n                return i\n        return False\n    def concat(self, s):\n        if s[0]!= \".\":\n            self.add(s)\n        else:\n            self.curr = []\n            for i in s:\n                if i == \".\":\n                    self.curr.append(i)\n                else:\n                    self.curr.append(self.find(i))\n            self.curr = \"\".join(self.curr)\n        return self.curr\n"
    },
    {
        "number": 4444,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    string = []\n    for i in stdin:\n        string.append(i.upper())\n    s = \"\".join(string)\n    return s\n\n\"\"\"\ndef"
    },
    {
        "number": 4444,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n  S = stdin.split()\n  T = stdin.split()\n  T.append(T[0])\n  T.append(T[1])\n  return \"\".join(T)\n"
    },
    {
        "number": 4444,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip().split(\" \")\n    s = list(map(str, s))\n    s = \"\".join(s)\n    return s\n"
    },
    {
        "number": 4445,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    a.sort()\n    answer = 0\n    \n    for i in range(n):\n        if i%2!= 0:\n            answer += a[i]\n        else:\n            answer += a[n-1-i]\n            \n    return str(answer)\n\n\n\n\n-----TODO-----\n##  Hints\n##  \n##  Here we are going to write a function that will return the sum of non-deleted elements of the array after end of the game.\n##  \n##  1. If Polycarp can delete the whole array, return a negative integer.\n##  2. If Polycarp is not able to delete the whole array, return 0.\n##  3. Polycarp can delete a non-even-odd-even-odd-... element, return -1.\n##  4. Polycarp can delete a non-even-odd-even-odd-... element, return 0.\n##  \n##  Hint\n##  \n##  You can try to use the function `solution()` instead of just the sum of non-deleted elements.\n##  \n##  -----OUTPUT-----\n##  0\n##  '''\n##  def solution(stdin: str) -> str:\n##      n = int(stdin.strip())\n##      a = list(map(int, stdin.strip().split()))\n##      a.sort()\n##      answer = 0\n##      \n##      for i in range(n):\n##          if i%2!= 0:\n##              answer += a[i]\n##          else:\n##              answer += a[n-1-i]\n##              \n##          \n##      if answer == 0:\n##          return 0\n##      else:\n##          return str(answer)"
    },
    {
        "number": 4445,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, a = list(map(int, stdin.split()))\n    \n    for i in range(1, n+1):\n        a[i] = a[i-1] % 2\n    \n    return a[-1]\n'''\nimport sys\ndef"
    },
    {
        "number": 4445,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.split()))\n    print(sum(a))"
    },
    {
        "number": 4445,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    arr = list(map(int, stdin.split()))\n    if len(arr) < 1 or len(arr) > n:\n        return 0\n    result = sum([1 for i in arr if i % 2!= 0])\n    result -= sum([1 for i in arr if i % 2 == 0])\n    if result == 0:\n        return '0'\n    return str(int(result))\n"
    },
    {
        "number": 4445,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = [int(i) for i in stdin.split()]\n    return str(sum(a))\n"
    },
    {
        "number": 4445,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    a = list(a)\n    for _ in range(1, len(a)):\n        if a[0]!= a[-1]:\n            a[0] += a[-1]\n            a[-1] = 0\n        else:\n            a[-1] += a[0]\n            a.pop(0)\n        a.sort()\n    a = list(a)\n    return str(sum(a))\n"
    },
    {
        "number": 4445,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = [int(i) for i in stdin.split()]\n    for i in range(n):\n        if a[i] % 2!= 0:\n            a[i] = a[i] - 1\n    answer = 0\n    for i in a:\n        answer += i\n    print(answer)\n    return str(answer)\n\ndef"
    },
    {
        "number": 4445,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.split()\n    a = int(line[0])\n    n = int(line[1])\n    a_arr = list(map(int, line[2:]))\n    b = solution(n)\n    if b == 0:\n        return 0\n    a_arr.sort()\n    return a_arr[b - 1] + a_arr[b]\n\nprint(solution(stdin))\n\n'''\ndef"
    },
    {
        "number": 4445,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return str(min(map(int, stdin.split())))"
    },
    {
        "number": 4445,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a=list(map(int,stdin.split()))\n    start=a[0]\n    end=a[1]\n    c=[]\n    for i in range(start,end):\n        c.append(a[i])\n    sum=0\n    for i in range(0,len(c)):\n        sum=sum+abs(i-c[i])\n    return sum\n\ndef"
    }
]