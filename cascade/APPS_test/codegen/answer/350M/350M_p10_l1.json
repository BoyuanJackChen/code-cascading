[
    {
        "number": 4000,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    graph = [list(map(int, input().split())) for _ in range(n - 1)]\n    adj = [[] for _ in range(n - 1)]\n    for a, b, c in graph:\n        if a!= b:\n            adj[a].append((b, c))\n        if a!= c:\n            adj[a].append((b, c))\n        if b!= c:\n            adj[b].append((a, c))\n    res = 0\n    for v in range(n - 1):\n        a, b, c = adj[v]\n        tmp = []\n        for v2 in a:\n            tmp.append(v2)\n            for v3 in b:\n                tmp.append(v3)\n                tmp.append(c)\n        if len(tmp)!= 0:\n            res += 1\n        for v3 in a:\n            tmp.append(v3)\n            for v4 in b:\n                tmp.append(v4)\n                tmp.append(c)\n        if len(tmp)!= 0:\n            res += 1\n        for v3 in b:\n            tmp.append(v3)\n            for v4 in a:\n                tmp.append(v4)\n                tmp.append(c)\n        if len(tmp)!= 0:\n            res += 1\n        for v4 in c:\n            tmp.append(v4)\n            for v3 in a:\n                tmp.append(v3)\n                tmp.append(c)\n        if len(tmp)!= 0:\n            res += 1\n    return str(res)\n\n\n=======\n\nfrom collections import defaultdict\n\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        n = int(stdin.splitlines()[0])\n        graph = defaultdict(list)\n        for a, b, c in map(lambda x: list(map(int, x.split())), stdin.splitlines()[1:n + 1]):\n            graph[a].append((b, c))\n            graph[b].append((a, c))\n        for i in range(2, n + 1):\n            for a, b, c in graph[i]:\n                graph[a].append((a, c))\n        res = 0\n        for a in graph:\n            res += 1\n            for b in graph[a]:\n                res += 1\n                for c in graph[b]:\n                    res += 1\n        return str(res)\n"
    },
    {
        "number": 4000,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    edges = [tuple(map(int, input().split())) for _ in range(n-1)]\n    res = 0\n    a = 0\n    b = 0\n    c = 0\n    for edge in edges:\n        if a!= 0 and b!= 0:\n            if edge[0] == edge[1]:\n                b += 1\n            else:\n                a += 1\n        if a!= 0:\n            if edge[0] == edge[1]:\n                a += 1\n            else:\n                c += 1\n        if b!= 0 and c!= 0:\n            if edge[1] == edge[0]:\n                b += 1\n            else:\n                c += 1\n        if a!= 0:\n            if edge[0] == edge[1]:\n                a += 1\n            else:\n                c += 1\n        if b!= 0 and c!= 0:\n            if edge[1] == edge[0]:\n                b += 1\n            else:\n                c += 1\n    if a > b:\n        res = a\n    else:\n        res = b\n    print(res)\n\n\n\nSolution:"
    },
    {
        "number": 4000,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, *m = map(int, stdin)\n\n    visit = [False] * N\n\n    def dfs(i, start):\n        if i >= len(m):\n            return\n        if visit[i]:\n            return\n\n        visit[i] = True\n        a, b, c = m[i]\n        a, b, c = a - 1, b - 1, c - 1\n\n        dfs(a, start)\n        dfs(b, start)\n        dfs(c, start)\n\n    dfs(0, 0)\n    answer = ''\n    for i in range(N):\n        if visit[i]:\n            answer += str(i + 1)\n            continue\n        answer += str(i + 1) +''\n        dfs(i, 0)\n        answer += str(i + 1)\n    return answer"
    },
    {
        "number": 4000,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n        n=int(stdin.strip().split()[-1])\n        return solution."
    },
    {
        "number": 4000,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    edge_dict = {}\n    for i in range(n - 1):\n        a, b = map(int, stdin.split())\n        edge_dict[a] = [b]\n\n    edge_dict = sorted(edge_dict.items())\n    a, b = edge_dict[0][0], edge_dict[0][1]\n\n    if len(edge_dict) > 2:\n        answer = 0\n        for i in range(1, len(edge_dict)):\n            if a!= edge_dict[i][0] and b!= edge_dict[i][1]:\n                answer = max(answer, i + 1)\n        return str(answer)\n    return str(len(edge_dict))\n"
    },
    {
        "number": 4000,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"0\"\n    a, b, c = map(int, input().split())\n    a, b, c = (a, b, c) if a < b and a < c else (b, c, a)\n    path = [[a, b]]\n    result = []\n    while path:\n        i = path.pop()\n        for j in (i[0] + 1, i[1] + 1):\n            if 0 <= j < n:\n                path.append([j, i[0] + 1])\n                if j == c:\n                    result.append(1)\n                else:\n                    result.append(j + 1)\n    if len(result)!= 0:\n        result.sort()\n        print(*result)\n    else:\n        print(\"0\")\n    return \"0\"\n\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= a, b, c <= 10^5\n\nInput Format\n\nThe first line contains an integer $n$, the number of vertices in the tree.\n\nThe next $n - 1$ lines describe the edges of the tree in form $a_i, b_i$ ($1 \\le a_i$, $b_i \\le n$, $a_i \\ne b_i$). It is guaranteed that graph is a tree.\n\nConstraints\n\n0 <= a, b, c <= 10^5\n\nSample Input\n\n3\n1 2\n2 3\n3 4\n4 5\n\nSample Output\n\n5\n1 8 6\n\n\"\"\"\n"
    },
    {
        "number": 4000,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n        \n    n = int(stdin.strip())\n    \n    a = 1\n    b = n\n    c = n - 1\n    a_set = set()\n    b_set = set()\n    c_set = set()\n    a_list = list(map(int, stdin.strip().split()))\n    b_list = list(map(int, stdin.strip().split()))\n    c_list = list(map(int, stdin.strip().split()))\n    a_dict = {i:a_list[i] for i in range(len(a_list))}\n    b_dict = {i:b_list[i] for i in range(len(b_list))}\n    c_dict = {i:c_list[i] for i in range(len(c_list))}\n    a_dict_copy = a_dict.copy()\n    b_dict_copy = b_dict.copy()\n    c_dict_copy = c_dict.copy()\n    while (a <= b and a <= c):\n        a += 1\n        b += 1\n        c -= 1\n        a_set.update(a_dict_copy.keys())\n        b_set.update(b_dict_copy.keys())\n        c_set.update(c_dict_copy.keys())\n    if (a_dict_copy == a_dict and b_dict_copy == b_dict and c_dict_copy == c_dict):\n        return '5'\n    if (a_dict == a_dict_copy and b_dict == b_dict_copy and c_dict == c_dict_copy):\n        return '1'\n    if (a_dict == a_dict_copy and b_dict == b_dict_copy and c_dict == c_dict_copy):\n        return '5'\n    if (b_dict == b_dict_copy and c_dict == c_dict_copy):\n        return '1'\n    if (a_dict == a_dict_copy and b_dict == b_dict_copy and c_dict == c_dict_copy):\n        return '5'\n    if (a_dict == a_dict_copy and b_dict == b_dict_copy and c_dict == c_dict_copy):\n        return '1'\n    if (a_dict == a_dict_copy and b_dict == b_dict_copy and c_dict == c_dict_copy):\n        return '5'\n    if (b_dict == b_dict_copy and c_dict == c_dict_copy):\n        return '1'\n    if (a_dict == a_dict_copy and b_dict == b_dict_copy and c_dict == c_dict_copy):\n        return '5'\n    if (b_dict == b_dict_copy and c_dict == c_dict_copy):\n        return '1'\n    if (a_dict == a_dict_copy and b_dict == b_dict_copy and c_dict == c_dict_copy):\n        return '5'\n    if (b_dict == b_dict_copy and c_dict == c_dict_copy):\n        return '1'\n    if (a_dict == a_dict_copy and b_dict == b_dict_copy and c_dict == c_dict_copy):\n        return '5'\n    return '1'\n"
    },
    {
        "number": 4000,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a, b, c = map(int, stdin.split())\n    a, b, c = a - 1, b - 1, c - 1\n    path1 = list()\n    path2 = list()\n    path1.append(a)\n    path1.append(b)\n    path1.append(c)\n    path2.append(a)\n    path2.append(b)\n    path2.append(c)\n    path1.append(b)\n    path2.append(a)\n    path2.append(c)\n    for i in range(1, n):\n        a, b, c = a + 1, b + 1, c + 1\n        path1.append(a)\n        path2.append(b)\n        path1.append(c)\n        path2.append(a)\n        path2.append(b)\n        path1.append(c)\n        path2.append(b)\n    path1.sort()\n    path2.sort()\n    s = 0\n    for i in range(len(path1)):\n        s += path1[i] * path2[i]\n    if s > c:\n        return \"5\"\n    else:\n        return \"1\"\n\n\nn = int(stdin.readline().strip())\na = [int(stdin.readline().strip()) for i in range(n)]\nb = [int(stdin.readline().strip()) for i in range(n)]\nc = [int(stdin.readline().strip()) for i in range(n)]\n\nprint(solution(a))\n"
    },
    {
        "number": 4000,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    res, a, b, c = 0, 0, 0, 0\n    for line in stdin.split():\n        a, b, c = int(line[0]), int(line[1]), int(line[2])\n        res = max(res, a + b + c)\n        if a > b or a > c:\n            if b > a:\n                res += a + b + c\n                b, a, c = a, b, c\n            else:\n                res += a + c + b + a\n                b, c = b, a + c + b + c\n        if b > c:\n            res += c + b\n    return str(res)\n\n'Usage: python3 sol.py <input>\n\"\"\"\n\n\nclass Graph:\n\n    def __init__(self, n, edges):\n        self.n = n\n        self.edges = edges\n        self.graph = self.build_graph()\n        self.stack = []\n\n    def build_graph(self):\n        graph = dict()\n        for a, b in self.edges:\n            graph[(a, b)] = 1\n            graph[(b, a)] = 1\n        return graph\n\n    def print_graph(self):\n        print(self.graph)\n\n    def process_path(self, path):\n        stack = [path]\n        for i in range(len(path) - 1):\n            curr = stack.pop()\n            new = stack.append(curr[:])\n            new.extend(curr[1:])\n            new.extend([curr[0]] * curr[1])\n        return new\n\n    def get_all_paths(self, start, end, path=[]):\n        if start not in self.graph:\n            return path\n        if end not in self.graph:\n            return []\n        return self.get_all_paths(start, self.process_path(path + [start]), path)"
    },
    {
        "number": 4000,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    \n    a = []\n    b = []\n    c = []\n    \n    for _ in range(n - 1):\n        a.append(stdin.split())\n    \n    for i in range(n - 1):\n        b.append(stdin.split())\n        \n    for _ in range(n - 1):\n        c.append(stdin.split())\n    \n    \n    def check(a, b, c):\n        flag = 1\n        a = list(set(a))\n        b = list(set(b))\n        c = list(set(c))\n        \n        for i in range(len(a)):\n            for j in range(len(b)):\n                for k in range(len(c)):\n                    if i == j == k:\n                        continue\n                    elif i == j or j == k or i == k:\n                        continue\n                    else:\n                        flag += 1\n        \n        for i in range(len(c)):\n            if a == c[i]:\n                flag += 1\n                \n            elif b == c[i]:\n                flag += 1\n            \n            elif a == c[i] and b == c[i]:\n                flag += 1\n        \n        return flag\n    \n    \n    \n    res = 0\n    if check(a, b, c):\n        res = 5\n        \n    elif check(a, b, c):\n        res = 3\n        \n    else:\n        res = 1\n        \n    \n    \n    return str(res)\n        \n"
    },
    {
        "number": 4001,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    answer = []\n    for line in stdin.split():\n        x, y = map(int, line.split())\n        if x % y!= 0:\n            answer.append(x)\n            answer.append(y)\n    return''.join(str(x) for x in sorted(answer))"
    },
    {
        "number": 4001,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin.splitlines()[0])\n    y = int(stdin.splitlines()[1])\n    a = list(map(int, list(filter(lambda i: (i % x == 0) or (i % y == 0), range(x, y + 1)))))\n    a = a + list(map(lambda i: i * 2, range(x, y + 1))) + list(map(lambda i: i * 2, range(y, x + 1)))\n    return str(max(a))\n\n-----Constraints-----\n1 <= stdin.length <= 100\n0 <= stdin[i] <= 10^4\n1 <= x, y < 10^4\n\"\"\""
    },
    {
        "number": 4001,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    x, y = 1, 2\n    for i in range(3, n + 1, 2):\n        x, y = y, x * i\n    if x % 2 == 1:\n        x //= 2\n    if y % 2 == 1:\n        y //= 2\n    for i in range(3, n + 1, 2):\n        x, y = y, x * i\n    return str(x) + \" \" + str(y)\n\n\n-----Constraints-----\n1 <= n <= 10^4\n\n\n-----Example 1-----\nInput\n3\n1 2\n\nOutput\n1 3 2\n\n-----Constraints-----\n0 <= d_1, d_2 <= 10^4\n\n\n-----Example 2-----\nInput\n3\n1 4 1 2 3 4 2 4 1 2 4 1 2 4 1 2 4 1\n\nOutput\n1 3 2 4 4 1 2 4 1 2 4 1 2 4 1 2 4 1\n\n----Brute-force----\n0 <= d_i <= 10^5\n0 <= d_1 <= d_i\n0 <= d_2 <= 10^4\n\n----Optimized----\n0 <= x, y <= 10^6\n\ndp[i][j] = max(dp[i-1][j-1], dp[i-1][j], dp[i-1][j+1]) + dp[i][j]\n\n----Algorithm----\ndp[i][j] = dp[i-1][j] + dp[i][j-1] + dp[i-1][j-1]\n\nmax(dp[i-1][j-1], dp[i-1][j], dp[i-1][j+1])\n\nmax(x, y)"
    },
    {
        "number": 4001,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return list(map(int,stdin.split()))\n\ndef"
    },
    {
        "number": 4001,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    d = int(stdin[1])\n    for i in range(2, n + 1):\n        d = d * i\n    return d\n'''\n\nimport math\n\ndef"
    },
    {
        "number": 4001,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    x, y = sorted([x, y])\n    d = list(x)\n    d.sort()\n    d.append(x)\n    d.sort()\n    d.append(y)\n    d = [int(i) for i in d]\n    return ''.join(d)\n"
    },
    {
        "number": 4001,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    y = int(stdin)\n    def is_div(x, y):\n        return x % y == 0\n    def is_div_list(x, y):\n        #is_div_list(x, y)\n        if y == x:\n            return True\n        return False\n    def is_div_list_2(x, y):\n        #is_div_list_2(x, y)\n        if is_div(x, y):\n            return True\n        return False\n    def is_div_list_3(x, y):\n        #is_div_list_3(x, y)\n        if is_div_list(x, y):\n            return True\n        return False\n    def is_div_list_4(x, y):\n        #is_div_list_4(x, y)\n        if is_div_list_2(x, y):\n            return True\n        return False\n    def is_div_list_5(x, y):\n        #is_div_list_5(x, y)\n        if is_div_list_3(x, y):\n            return True\n        return False\n    def is_div_list_6(x, y):\n        #is_div_list_6(x, y)\n        if is_div_list_4(x, y):\n            return True\n        return False\n    def is_div_list_7(x, y):\n        #is_div_list_7(x, y)\n        if is_div_list_5(x, y):\n            return True\n        return False\n    def is_div_list_8(x, y):\n        #is_div_list_8(x, y)\n        if is_div_list_6(x, y):\n            return True\n        return False\n    def is_div_list_9(x, y):\n        #is_div_list_9(x, y)\n        if is_div_list_7(x, y):\n            return True\n        return False\n    def is_div_list_10(x, y):\n        #is_div_list_10(x, y)\n        if is_div_list_8(x, y):\n            return True\n        return False\n    x_list = [1]\n    y_list = []\n    for num in range(1, x+1):\n        if is_div(num, x):\n            x_list.append(num)\n            y_list.append(num)\n    y_list.sort()\n    #print(x_list, y_list)\n    #print(x_list[0], y_list[0])\n    x_list[0], y_list[0] = x_list[0], y_list[0]\n    #print(x_list, y_list)\n    for i in range(1, len(y_list)):\n        if is_div(x_list[i-1], y_list[i-1]):\n            x_list[i], y_list[i] = x_list[i], y_list[i]\n            #print(x_list, y_list)\n    return \"\".join(map(str, x_list)) + \" \" + \" \".join(map(str, y_list))"
    },
    {
        "number": 4001,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            d = [int(x) for x in stdin.split() if x.isdigit()]\n            if d[0] > d[1]:\n                d[0], d[1] = d[1], d[0]\n    print(*d)\n\n-----Sample Input-----\n\n3\n10 2 8 1 2 4 1 20 4 5\n\nSample Output\n\n20 8\n
    },
    {
        "number": 4001,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    ans = []\n    for i in range(int(stdin.strip())):\n        n = int(stdin.strip())\n        ans.append(n)\n        divisors = [i for i in range(1, n+1)]\n        for divisor in ans:\n            for k in range(1, divisor):\n                divisors[k-1] = divisors[k] + divisors[k-1]\n        ans = set(divisors)\n    return str(ans)"
    },
    {
        "number": 4001,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    d = {}\n    n = int(stdin.strip())\n    for i in range(n):\n        d[i] = int(stdin.strip())\n    return''.join(list(str(i) for i in sorted(list(d.keys()))))\n\n-----Constraints-----\n1 <= n <= 10^4\n1 <= d_i < 10^4\nstdin contains no leading or trailing whitespaces\nstdin contains only digits 0-9 and a non-negative integer\nstdin has at least one non-negative integer\nstdin contains no spaces\n\n------Time complexity-----\n\nSpace complexity: O(n)\n\n-----Code-----\n\ndef"
    },
    {
        "number": 4002,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = list(map(int, stdin.split()))\n    a = [list(map(int, stdin.split())) for i in range(n)]\n    a = sorted(a, key=lambda x: (x[0], x[1]))\n    k = sorted(k, reverse=True)\n    max = 0\n    for i in range(len(k)):\n        if k[i] > 0:\n            max += a[i][1] * k[i]\n    return str(max)\n"
    },
    {
        "number": 4002,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str(max(0, (max([sum(int(e) for e in line.split(' ')) // k])) for line in stdin.split()))\n\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= m <= 10^5\n1 <= k <= 10^5\n\nTime Limit: 1 sec\nSpace Limit: 1KB\n\n-----Alternatives-----\n\n1. Return sum of first index, then second index, then third index.\n\n\"\"\"\ndef"
    },
    {
        "number": 4002,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, m, k = map(int, stdin.split())\n    a = [[int(x) for x in input().split()] for i in range(n)]\n    \n    result = -1\n    \n    for i in range(m):\n        sum = 0\n        for j in range(n):\n            sum += a[j][i]\n        \n        result = max(result, sum % k)\n    \n    return str(result)\n"
    },
    {
        "number": 4002,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    \n    i_sums = [0]\n    j_sums = [0]\n    \n    for _ in range(n):\n        i_sums.append(map(int, stdin.split()))\n    \n    for _ in range(m):\n        j_sums.append(map(int, stdin.split()))\n        \n    j_sums = sorted(j_sums, key=lambda x: x[0])\n    for i in range(n):\n        j_sums[i][1] = j_sums[i][1] - k\n    \n    for i in range(n-1):\n        j_sums[i][1] = j_sums[i][1] // k\n        j_sums[i][2] = j_sums[i][2] % k\n        \n    result = 0\n    \n    for i in range(n-1):\n        i_sum = sum(j_sums[i])\n        result = max(i_sum, result)\n        \n    return str(result)\n\nprint(solution(stdin))"
    },
    {
        "number": 4002,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    return str(max(map(lambda x: (x % k) * (x // k), range(m))))\n\ndef"
    },
    {
        "number": 4002,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, m, k = map(int, stdin.split())\n    a = [[int(n * i) for i in range(m)] for j in range(n)]\n    \n    for i in range(m):\n        for j in range(n):\n            a[j][i] = a[j][i] if j!= i else 0\n    \n    maxSum = 0\n    for i in range(n):\n        maxSum += max(a[i]) if a[i] else 0\n    \n    result = str(maxSum)\n    \n    if maxSum % k!= 0:\n        result = \"-\" + result\n        \n    return result\n"
    },
    {
        "number": 4002,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = [[0 for _ in range(m)] for _ in range(n)]\n    for _ in range(n):\n        a[_][_] = int(stdin.strip())\n    ans = 0\n    for i in range(n):\n        for j in range(m):\n            ans = max(ans, sum([a[i][j] for i in range(m)]))\n    return str(ans)\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4002,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = []\n    \n    for _ in range(n):\n        a.append(list(map(int, stdin.split())))\n        \n    a = sorted(a, key=lambda x: sum(x[0:3]))\n    \n    answer = sum([x[0] for x in a]) % k\n    return str(answer)\n    pass\n"
    },
    {
        "number": 4002,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    m, n = map(int, stdin.split())\n    a = [0] * m\n    for j in range(n):\n        a[j] = map(int, stdin.split())\n    a.sort()\n    # print(a)\n    k = len(a) // 2\n    # print(k)\n    for i in range(m):\n        if a[i][0] % k!= 0:\n            return str(max(sum(a[i:k]) % k, a[i][0]))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4002,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    numbers = list(map(int, stdin.split()))\n    \n    #A set of all possible sums\n    possible_sum = set()\n    for i in range(1, m + 1):\n        for j in range(i, m, 2):\n            possible_sum.add(sum(numbers[i:j+1]))\n    \n    #Maximum sum\n    maximum_sum = 0\n    for i in possible_sum:\n        if i < k:\n            continue\n        if i % k == 0:\n            maximum_sum = max(i, maximum_sum)\n    return str(maximum_sum)\n\"\"\"\n\nclass Solution:\n    def maximumSum(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        n = len(nums)\n        if n <= 1 or n == 2:\n            return 0\n        \n        return max(self.get_maximum_sum(nums, 0, k-1),\n                   self.get_maximum_sum(nums, k, 0))\n        \n    \n    def get_maximum_sum(self, nums, start, end):\n        \n        if start >= end:\n            return 0\n        \n        if start == end:\n            return nums[start]\n        \n        return self.get_maximum_sum(nums, start+1, end) + self.get_maximum_sum(nums, start, end-1)\n        "
    },
    {
        "number": 4003,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    a, b = map(int, stdin.split())\n    for i in range(a, b+1):\n        print(i, end ='')\n    \n    return ''"
    },
    {
        "number": 4003,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    # a.sort()\n    return str(n) + \" \" +''.join(map(str, a))\n\n-----Constraints-----\n\n1 <= n <= 10^5\n\n1 <= a[i] <= 2^31 - 1\n\nFor every move you take you take at most $a[i]$.\n\n\n---Code---\nimport collections\nclass Solution:\n    def sequenceToString(self, A: List[int]) -> str:\n        answer = \"\"\n        # ans.sort()\n        # return answer.join(map(str, ans))\n        d = collections.defaultdict(int)\n        for a in A:\n            d[a] += 1\n            answer += str(d[a])\n            if a!= max(A):\n                answer += \" \"\n        return answer\n"
    },
    {
        "number": 4003,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    \n    # The initial order is:\n    # $i 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99\n    # It's the order of the sequence\n    \n    # Initialize the variables\n    i = 0\n    s = ''\n    \n    # Iterate through all elements\n    while i < n:\n        # Get the index of the element\n        j = i + 1\n        while j < n:\n            # Get the max element of the subsequence\n            if a[i] > a[j]:\n                # Update the sequence\n                s += 'L'\n            else:\n                # Update the sequence\n                s += 'R'\n            j += 1\n        i += 1\n        \n    # Return the sequence\n    return s\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4003,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    a.sort()\n    return str(len(a))\n    \n______________________________________________________________________________________________________________________________\n\ndef"
    },
    {
        "number": 4003,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    num = [int(i) for i in stdin.split()]\n    num.sort()\n    \n    m = int(n / 2)\n    \n    return ''.join([num[i] for i in range(m)]) + 'L' * n + 'R' * (m - n)\n\"\"\"\n\ndef"
    },
    {
        "number": 4003,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    a.sort()\n    a_max = a[-1]\n    for i in range(1, n):\n        if a_max == a[i-1]:\n            a_max = a[i]\n        else:\n            break\n    \n    result = str(a_max)\n    return result\n'''\ndef"
    },
    {
        "number": 4003,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    sequence = list(map(int, stdin.strip().split()))\n    answer = 0\n    l = len(sequence)\n    for i in range(l-1, -1, -1):\n        if sequence[i] > sequence[i+1]:\n            sequence[i], sequence[i+1] = sequence[i+1], sequence[i]\n            answer += 1\n    return answer * 'L' + ''.join(map(str, sequence[:l-1]))\n\ndef"
    },
    {
        "number": 4003,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # The problem is described in the problem statement.\n\n    # The first line of the input consists of $n$ lines of input.\n    # The second line of the input contains $n$ numbers $a_1, a_2, \\dots, a_n$\n    # where $a_i$ is the $i$-th element of $a$.\n\n    # Input is separated by a single space.\n\n    # Constraints\n    # 2 \u2264 n \u2264 8.\n\n    # Sample case\n    # 1\n    # 2 2 4 3 2\n    # 4 2 4 4 2\n    # 4\n    # Sample output\n    # 4\n    # LRRR\n\n    return\n\ndef"
    },
    {
        "number": 4003,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    nums = list(map(int, stdin.split()))\n    ans = []\n\n    for i in range(n):\n        if i == 0:\n            if nums[i] == 1:\n                ans.append(nums[i])\n        else:\n            if nums[i] == 1 and nums[i - 1] == 0:\n                ans.append(nums[i])\n            else:\n                if nums[i]!= nums[i - 1] + 1:\n                    ans.append(nums[i])\n    return \"\".join(ans)\n\nInput\n5\n1 2 4 3 2\n\nOutput\n4\nLRRR\n\nInput\n7\n1 3 5 6 5 4 2\n\nOutput\n6\nLRLRRR\n'''\n\ndef"
    },
    {
        "number": 4003,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin)\n    answer = []\n    for i in a:\n        if i == 0:\n            answer.append('L')\n        else:\n            answer.append('R')\n    answer = ''.join(answer)\n    return answer\n\n-----Solution-----\n\ndef"
    },
    {
        "number": 4004,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(min(map(int, stdin.split())))\n"
    },
    {
        "number": 4004,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    d = int(stdin.strip().replace(' ', ''))\n    a = []\n    for i in range(n):\n        a.append(int(stdin.strip().replace(' ', '')))\n    for j in range(1, n):\n        for i in range(n):\n            if i + j == n - 1:\n                continue\n            elif a[i] + d == a[i + 1] or a[i] - d == a[i + 1]:\n                continue\n            else:\n                a[i] += d\n                a[i + 1] -= d\n                a[i] = min(a[i], a[i + 1])\n    print(a)\n\n-----Constraints-----\n1 <= n <= 10^4\n1 <= a[i] <= 100\n\n-----Time Limit---5 seconds\nApproach:\ntime\nO(n)\nspace\nWe want to maximize the value of $D$ or is that we can eliminate the \"add\" operation\n\n\"\"\"\n\nclass Solution:\n    def minimumAddToMakeValid(self, s: str) -> int:\n        stack = []\n        for i in range(len(s)):\n            if s[i] == '(':\n                stack.append(i)\n            else:\n                if not stack:\n                    stack.append(i)\n                    continue\n                if s[stack[-1]] == '(':\n                    stack.pop()\n                    continue\n                if s[stack[-1]] == ')':\n                    stack.pop()\n                    continue\n        if stack:\n            return -1\n        else:\n            return len(s)"
    },
    {
        "number": 4004,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a=list(map(int,stdin.split()))\n    for i in range(len(a)):\n        a[i]=a[i]+a[i+1]\n    for i in range(len(a)):\n        if a[i]<0:\n            return -1\n    if a[0]!=a[1]:\n        return -1\n    for i in range(2,len(a)):\n        if a[i]>a[i-1]:\n            return -1\n    return a[0]\n        \n\n\n'''\nfrom collections import deque\n\ndef"
    },
    {
        "number": 4004,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, a = map(int, stdin.split())\n    a.sort()\n    \n    D = 0\n    min_value = -1\n    \n    for i in a:\n        D += i\n        if D > 0:\n            if min_value < D:\n                min_value = D\n            D = -D\n    \n    if min_value < 0:\n        return -1\n    else:\n        return min_value"
    },
    {
        "number": 4004,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n,d=map(int,stdin.split())\n    a=map(int,stdin.split())\n    return min(map(lambda x:max(0,x+d)-x,filter(lambda x:x>0,a)))"
    },
    {
        "number": 4004,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    \n    D = int(stdin.strip().rstrip('\\n'))\n    \n    a = list(map(int, input().rstrip().split()))\n    \n    c = 0\n    \n    for i in range(n):\n        c += a[i] - D\n        \n        if c < 0:\n            return str(D)\n        elif c == 0:\n            return str(D)\n        else:\n            c -= D\n    return str(D)\n"
    },
    {
        "number": 4004,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = []\n    for _ in range(n):\n        a.append(int(stdin))\n    answer = 0\n    for a_i in a:\n        answer = max(answer, abs(a_i))\n    return answer\n"
    },
    {
        "number": 4004,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin.rstrip())\n    \n    m = list(map(int, stdin.rstrip().split()))\n    \n    d = [0] * (n - 1)\n    \n    answer = 0\n    \n    for i in range(n - 1, 0, -1):\n        d[i - 1] = m[i] - m[i - 1]\n    \n    for i in range(n - 1, 0, -1):\n        answer = max(answer, d[i - 1])\n        \n    return answer"
    },
    {
        "number": 4004,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    D = int(stdin.split()[-1])\n    for i in range(n):\n        a[i] = a[i]+D\n    for j in range(n-1):\n        a[j] = a[j]-D\n    for k in range(n-1):\n        a[k] = a[k]-D\n    min_num = float('inf')\n    for i in range(n):\n        if i == 0:\n            a[i] = a[i] + D\n        if i == n-1:\n            a[i] = a[i] - D\n        if a[i] < min_num:\n            min_num = a[i]\n    if min_num == float('inf'):\n        print(-1)\n    else:\n        print(min_num)\n\nsolution(stdin)"
    },
    {
        "number": 4004,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.split()))\n    min_val = a[0]\n    for i in range(1, n):\n        val = a[i]\n        for j in range(i):\n            val = val + a[j]\n        if val < min_val:\n            min_val = val\n    return str(min_val)\n\nsolution('2 1 4 7 5')"
    },
    {
        "number": 4005,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # read the input\n    s = stdin\n    N, K = map(int, s.split())\n    # create an empty list\n    points = []\n    # create a for-loop to get each point of the list\n    for i in range(0, K):\n        x1, y1 = map(int, s.split())\n        x2, y2 = map(int, s.split())\n        # get the point\n        points.append((x1, y1))\n        points.append((x2, y2))\n    # get all the list points\n    for i in range(0, N-2):\n        for j in range(i+1, N-1):\n            for k in range(j+1, N):\n                x1, y1 = points[i]\n                x2, y2 = points[j]\n                x3, y3 = points[k]\n                x4, y4 = points[k+1]\n                # calculate the slope\n                a = ((y4-y3) * (y1-y2)) - ((y3-y2) * (y1-y4))\n                b = ((x4-x3) * (y1-y2)) - ((x3-x2) * (y1-y4))\n                # calculate the intercept\n                c = y4 - a*x4\n                d = y3 - b*x3\n                # calculate the area\n                area = abs(a*b) * abs(a*d)\n                if area > 0:\n                    # if the area is not zero, return YES\n                    return 'YES'\n    return 'NO'\n\n'''\n\n\n\ndef"
    },
    {
        "number": 4005,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, x_2, y_2, x_3, y_3, x_4, y_4 = map(float, stdin.split())\n    if (x_1 * x_3 + y_1 * y_3) < (x_2 * x_3 + y_2 * y_3) < (x_1 * x_4 + y_1 * y_4):\n        return \"YES\"\n    else:\n        return \"NO\"\n\nprint(solution(input()))\n\n-----Constraints-----\n0 <= x_1 <= 10^{6}\n0 <= y_1 <= 10^{6}\n0 <= x_2 <= 10^{6}\n0 <= y_2 <= 10^{6}\n0 <= x_3 <= 10^{6}\n0 <= y_3 <= 10^{6}\n0 <= x_4 <= 10^{6}\n0 <= y_4 <= 10^{6}\n\n-----Time Complexity-----\nO(N^4)\nO(1)\n\nO(N^2)\nO(N)\n"
    },
    {
        "number": 4005,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split(\" \"))\n    x_1 = x + y\n    y_1 = y - x\n    x_2 = x - y\n    y_2 = y + x\n    x_3 = x * y\n    y_3 = y / x\n    x_4 = x / y\n    y_4 = y / x\n    x_5 = (x_1 + x_2 + x_3 + x_4) / 4\n    y_5 = (y_1 + y_2 + y_3 + y_4) / 4\n    x_6 = x_1 - x_2\n    y_6 = y_1 - y_2\n    if x_1 == x_2 and y_1 == y_2:\n        print(\"YES\")\n    elif x_1 == x_2 or x_1 == x_3 or x_1 == x_4:\n        print(\"YES\")\n    elif y_1 == y_2 or y_1 == y_3 or y_1 == y_4:\n        print(\"YES\")\n    elif x_1 == x_3 and y_1 == y_3:\n        print(\"YES\")\n    elif x_1 == x_4 and y_1 == y_4:\n        print(\"YES\")\n    elif y_1 == y_5 or y_1 == y_6:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n"
    },
    {
        "number": 4005,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = map(int, stdin.split())\n    x3, y3, x4, y4 = map(int, stdin.split())\n    x5, y5, x6, y6 = map(int, stdin.split())\n    if abs(x1 - x2) < x2 or abs(x1 - x3) < x3 or abs(x1 - x4) < x4 or abs(x1 - x5) < x5 or abs(x1 - x6) < x6 or abs(x3 - x4) < x4 or abs(x3 - x5) < x5 or abs(x3 - x6) < x6:\n        return \"NO\"\n    if y1 == y3 or y1 == y4 or y1 == y5 or y1 == y6 or y1 == y7 or y1 == y8 or y1 == y9 or y1 == y10 or y1 == y11 or y1 == y12 or y1 == y13 or y1 == y14 or y1 == y15 or y1 == y16 or y1 == y17 or y1 == y18 or y1 == y19 or y1 == y20 or y1 == y21 or y1 == y22 or y1 == y23 or y1 == y24 or y1 == y25 or y1 == y26 or y1 == y27 or y1 == y28 or y1 == y29 or y1 == y30 or y1 == y31 or y1 == y32 or y1 == y33 or y1 == y34 or y1 == y35 or y1 == y36 or y1 == y37 or y1 == y38 or y1 == y39 or y1 == y40 or y1 == y41 or y1 == y42 or y1 == y43 or y1 == y44 or y1 == y45 or y1 == y46 or y1 == y47 or y1 == y48 or y1 == y49 or y1 == y50 or y1 == y51 or y1 == y52 or y1 == y53 or y1 == y54 or y1 == y55 or y1 == y56 or y1 == y57 or y1 == y58 or y1 == y59 or y1 == y60 or y1 == y61 or y1 == y62 or y1 == y63 or y1 == y64 or y1 == y65 or y1 == y66 or y1 == y67 or y1 == y68 or y1 == y69 or y1 == y70 or y1 == y71 or y1 == y72 or y1 == y73 or y1 == y74 or y1 == y75 or y1 == y76 or y1 == y77 or y1 == y78 or y1 == y79 or y1 == y80 or y1 == y81 or y1 == y82 or y1 == y83 or y1 == y84 or y1 == y85 or y1 == y86 or y1 == y87 or y1 == y88 or y1 == y89 or y1 == y90 or y1 == y91 or y1 == y92 or y1 == y93 or y1 == y94 or y1 == y95 or y1 == y96 or y1 == y97 or y1 == y98 or y1 == y99 or y1 == y100:\n        return \"YES\"\n    if abs(y1 - y2) < abs(y2 - y3) or abs(y1 - y3) < abs(y2 - y4) or abs(y1 - y4) < abs(y2 - y5) or abs(y1 - y5) < abs(y2 - y6) or abs(y1 - y6) < abs(y3 - y4) or abs(y1 - y4) < abs(y3 - y5) or abs(y1 - y5) < abs(y3 - y6) or abs(y1 - y6) < abs(y4 - y5) or abs(y1 - y5) < abs(y4 - y6) or abs(y1 - y6) < abs(y5 - y4) or abs(y1 - y4) < abs(y5 - y6) or abs(y1 - y6) < abs(y7 - y4) or abs(y1 - y4) < abs(y7 - y5) or abs(y1 - y5) < abs(y7 - y6) or abs(y1 - y6) < abs(y8 - y4) or abs(y1 - y4) < abs(y8 - y5) or abs(y1 - y5) < abs(y8 - y6) or abs(y1 - y6) < abs(y9 - y4) or abs(y1 - y4) < abs(y9 - y5) or abs(y1 - y5) < abs(y9 - y6) or abs(y1 - y6) < abs(y10 - y4) or abs(y1 - y4) < abs(y10 - y5) or abs(y1 - y5) < abs(y10 - y6) or abs(y1 - y6) < abs(y11 - y4) or abs(y1 - y4) < abs(y11 - y5) or abs(y1 - y5) < abs(y11 - y6) or abs(y1 - y6) < abs(y12 - y4) or abs(y1 - y4) < abs(y12 - y5)"
    },
    {
        "number": 4005,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, x_2, y_2 = map(int, stdin.split())\n    x_3, y_3, x_4, y_4 = map(int, stdin.split())\n    x_5, y_5, x_6, y_6 = map(int, stdin.split())\n    if x_1 <= x_3 <= x_4 and y_1 <= y_3 <= y_4:\n        return 'YES'\n    if x_1 <= x_5 <= x_6 and y_1 <= y_5 <= y_6:\n        return 'YES'\n    if x_1 <= x_3 <= x_4 and y_1 <= y_5 <= y_6:\n        return 'YES'\n    if x_1 <= x_5 <= x_6 and y_1 <= y_5 <= y_6:\n        return 'YES'\n    if x_1 <= x_3 <= x_4 and y_1 <= y_6 <= y_7:\n        return 'YES'\n    if x_1 <= x_5 <= x_6 and y_1 <= y_6 <= y_7:\n        return 'YES'\n    if x_1 <= x_5 <= x_6 and y_1 <= y_7 <= y_8:\n        return 'YES'\n    if x_1 <= x_5 <= x_6 and y_1 <= y_8 <= y_9:\n        return 'YES'\n    if x_1 <= x_6 <= x_7 and y_1 <= y_9 <= y_10:\n        return 'YES'\n    if x_1 <= x_7 <= x_8 and y_1 <= y_10 <= y_11:\n        return 'YES'\n    if x_1 <= x_7 <= x_8 and y_1 <= y_11 <= y_12:\n        return 'YES'\n    if x_1 <= x_8 <= x_9 and y_1 <= y_12 <= y_13:\n        return 'YES'\n    if x_1 <= x_9 <= x_10 and y_1 <= y_13 <= y_14:\n        return 'YES'\n    if x_1 <= x_9 <= x_10 and y_1 <= y_14 <= y_15:\n        return 'YES'\n    if x_1 <= x_10 <= x_11 and y_1 <= y_15 <= y_16:\n        return 'YES'\n    if x_1 <= x_10 <= x_11 and y_1 <= y_16 <= y_17:\n        return 'YES'\n    if x_1 <= x_11 <= x_12 and y_1 <= y_17 <= y_18:\n        return 'YES'\n    if x_1 <= x_12 <= x_13 and y_1 <= y_18 <= y_19:\n        return 'YES'\n    if x_1 <= x_12 <= x_13 and y_1 <= y_19 <= y_20:\n        return 'YES'\n    if x_1 <= x_13 <= x_14 and y_1 <= y_20 <= y_21:\n        return 'YES'\n    if x_1 <= x_14 <= x_15 and y_1 <= y_21 <= y_22:\n        return 'YES'\n    if x_1 <= x_14 <= x_15 and y_1 <= y_22 <= y_23:\n        return 'YES'\n    if x_1 <= x_15 <= x_16 and y_1 <= y_23 <= y_24:\n        return 'YES'\n    if x_1 <= x_15 <= x_16 and y_1 <= y_24 <= y_25:\n        return 'YES'\n    if x_1 <= x_16 <= x_17 and y_1 <= y_25 <= y_26:\n        return 'YES'\n    if x_1 <= x_17 <= x_18 and y_1 <= y_26 <= y_27:\n        return 'YES'\n    if x_1 <= x_17 <= x_18 and y_1 <= y_27 <= y_28:\n        return 'YES'\n    if x_1 <= x_18 <= x_19 and y_1 <= y_28 <= y_29:\n        return 'YES'\n    if x_1 <= x_18 <= x_19 and y_1 <= y_29 <= y_30:\n        return 'YES'\n    if x_1 <= x_19 <= x_20 and y_1 <= y_30 <= y_31:\n        return 'YES'\n    if x_1 <= x_19 <= x_20 and y_1 <= y_31 <= y_32:\n        return 'YES'\n    if x_1 <= x_20 <= x_21 and y_1 <= y_32 <= y_33:\n        return 'YES'\n    if x_1 <= x_21 <= x_22 and y_1 <= y_33 <= y_34:\n        return 'YES'\n    if x_1 <= x_22 <= x_23 and y_1 <= y_34 <= y_35:\n        return 'YES'\n    if x_1 <= x_22 <= x_23 and y_1 <= y_35 <= y_36:\n        return 'YES'\n    if x_1 <= x_23 <= x_24 and y_1 <= y_36 <= y_37:\n        return 'YES'\n    if x_1 <= x"
    },
    {
        "number": 4005,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    for std in stdin:\n        x1, y1, x2, y2 = map(int, std.split())\n        x3, y3, x4, y4 = map(int, std.split())\n        if x3 >= x1 and x3 <= x2 and y3 >= y1 and y3 <= y2:\n            if x3 >= x4 and x3 <= x4 and y3 >= y4 and y3 <= y4:\n                continue\n            else:\n                return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x, y = stdin.split()\n    x, y = [int(x) for x in x.split(' ')], [int(y) for y in y.split(' ')]\n    if (x[0] + x[1]) % 2 == (y[0] + y[1]) % 2:\n        return 'YES'\n    else:\n        return 'NO'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4005,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, x_2, y_2 = map(int, stdin.split())\n    x_3, y_3, x_4, y_4 = map(int, stdin.split())\n    x_5, y_5, x_6, y_6 = map(int, stdin.split())\n    \n    if abs(x_1 - x_2) > abs(x_3 - x_4) or abs(x_5 - x_6) > abs(y_1 - y_2) or abs(x_1 - x_3) > abs(x_5 - x_6):\n        return 'NO'\n    if abs(y_1 - y_2) > abs(y_3 - y_4) or abs(y_5 - y_6) > abs(x_1 - x_2) or abs(y_1 - y_3) > abs(y_5 - y_6):\n        return 'NO'\n    if abs(x_1 - x_2) > abs(x_3 - x_4) or abs(x_5 - x_6) > abs(y_1 - y_2) or abs(x_1 - x_3) > abs(x_5 - x_6):\n        return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 4005,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4005,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # 1. Standard input\n    x_1, y_1, x_2, y_2 = list(map(float, stdin.split(' ')))\n\n    # 2. Get the coordinates of the bottom left corner of the white sheet\n    x_3, y_3 = list(map(float, stdin.split(' ')))\n\n    # 3. Get the coordinates of the top right corner of the white sheet\n    x_4, y_4 = list(map(float, stdin.split(' ')))\n\n    # 4. Compare two white sheets\n    if x_1 + x_2 - 2 * x_3 <= x_4 <= x_1 + x_2 + 2 * x_3:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n-------------------------------------------------------------------\n\ndef"
    },
    {
        "number": 4006,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return 0\n    solution(str(n-1))\n    solution(str(n))\n    return len(set(map(int, str(n))))"
    },
    {
        "number": 4006,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def solve(start: int, n: int) -> int:\n        if start == n:\n            return 1\n        \n        res = 0\n        for i in range(start, n+1):\n            res += solve(i, n)\n        \n        return res\n    \n    return solve(0, int(stdin))\n\nRuntime: 72 ms, faster than 86.27% of Python3 online submissions for Different Number of Reachable Numbers.\nMemory Usage: 15.9 MB, less than 99.19% of Python3 online submissions for Different Number of Reachable Numbers.\n\"\"\"\n\nclass Solution:\n    def solve(self, n: str) -> int:\n        \n        n_map = {}\n        for i in range(len(n)-1, -1, -1):\n            cur = int(n[i])\n            if cur not in n_map:\n                n_map[cur] = 1\n            else:\n                n_map[cur] += 1\n                \n        result = 0\n        for cur, nums in n_map.items():\n            result += nums * (nums + 1) // 2\n        \n        return result\n        "
    },
    {
        "number": 4006,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    answer = 0\n    for _ in range(int(stdin)):\n        answer += 1\n    print(answer)\n    return str(answer)\n\n\n-----Constraints-----\n\n1 <= n <= 10^4\n\n\n-----Sample Input-----\n\nInput\n3\n\nOutput\n4\n\n\n-----Sample Output-----\n\n1\n\n1\n3\n\n\n-----Constraints-----\n\n1 <= n <= 10^6\n\n-----Submissions-----\n2\n2\n\n1\n2\n3\n\n\n-----Tested-----\n1098\n1099\n\"\"\"\n\ndef"
    },
    {
        "number": 4006,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    d = dict()\n    for i in range(1, n + 1):\n        d[i] = d.get(i, 0) + 1\n    for i in sorted(d.keys()):\n        if d[i] > 1:\n            return str(i)\n"
    },
    {
        "number": 4006,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(n):\n        if n % i == 0:\n            print(n // i)\n            break\n    else:\n        print(0)\n\n    return \"\"\n    \n    \n\n\n-----Constraints-----\n\n0 <= n <= 10^9\n\"\"\"\nimport unittest\n\ndef"
    },
    {
        "number": 4006,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    y = 0\n    for i in range(n):\n        if y == 0:\n            y = int(stdin[i])\n        else:\n            y = y + int(stdin[i])\n    return str(y)\n\"\"\"\n\nclass Solution:\n    def countReachableNumbers(self, nums):\n        def is_reachable(nums):\n            n = len(nums)\n            x = set(nums)\n            for i in range(n - 1):\n                if nums[i] + nums[i + 1] not in x:\n                    return False\n            return True\n\n        def is_reachable_2(nums):\n            n = len(nums)\n            x = set(nums)\n            for i in range(n - 2):\n                if nums[i] + nums[i + 1] + nums[i + 2] not in x:\n                    return False\n            return True\n\n        for i in nums:\n            if is_reachable(i):\n                yield i\n            else:\n                if is_reachable_2(i):\n                    yield i\n\n        return iter(yield from iter(nums))\n"
    },
    {
        "number": 4006,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    answer = 0\n    numbers = list(map(int,stdin.split()))\n    for number in numbers:\n        if number!= 1:\n            answer+=1\n        else:\n            continue\n    return str(answer)\n\nprint(solution(\"1098\"))\nprint(solution(\"10\"))\n"
    },
    {
        "number": 4006,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N,*_ = stdin\n    nums = list(map(int, list(str(N))))\n    n = len(nums)\n    for i in range(n):\n        for j in range(n-i):\n            if nums[j:j+i] == nums[j+i:j+i+2]:\n                nums[j+i] = 0\n    return ''.join(map(str,nums))\n\n-----Reference-----\nhttps://www.youtube.com/watch?v=SjkDh7kRs6Q\n\"\"\"\ndef"
    },
    {
        "number": 4006,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    count = 0\n    for _ in range(N):\n        for i in range(10):\n            try:\n                sum = int(stdin[:i]) + int(stdin[i+1:])\n            except IndexError:\n                continue\n            else:\n                if sum == N:\n                    count += 1\n                else:\n                    break\n    return str(count)\n\nn = 1098\nprint(solution(n))\n\n\n-----Advanced-----\n\nThe same idea applies to any number in $n$:\n\nThe numbers that are reachable from $1098$ are:\n\n$1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1098, 1099$.\n\nDefine a function that returns the number of different numbers that are reachable from $n$, which is defined by the following formula:\n\n$1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1098, 1099$\n$x_i$ and $y_i$ are generated by $i$ and $j$ respectively.\n\nThe number of different numbers that are reachable from $1098$ is $j$ + 1 + y_i$.\n\nBy preprocessing the input, we can detect the numbers that are reachable from $1098$ and not necessarily from $n$. For example, $1098$ will be a \"normal\" number, but not a \"overreach\" number. To add $1$ as a number to $n$, we use the following formula: $1 + n$ = $n + 1$. So, $1 + n$ will be the number of all numbers that are reachable from $1098$ because $n$ is reachable from $1$.\n\n$x_i$ and $y_i$ are preprocessed to obtain the preprocessed form of the number $1 + n$, which is the same as the normal form of the number $1 + n$. For example, $1 + n$ = $n + 1$, as the normal form $1 + n$ will be obtained by adding the number $1$ to $n$.\n\nAfter preprocessing $x_i$, $y_i$ is obtained by adding the number $1$ to $n$. Thus, if $x_i = $1$, $y_i = 0$, then $1 + n$ = $n + 1$.\n\nFinally, $x_i$ and $y_i$ are preprocessed to obtain the preprocessed form of the number $1 + n$, which is the same as the normal form of the number $1 + n$. For example, $1 + n$ = $n + 1$.\n\nSince $1 + n$ = $n + 1$, we are not interested in the normal form of $1 + n$ because it's not reachable from $1098$.\n\nWe can also calculate the number of different numbers that are reachable from $1098$ by using a recursive formula:\n\n$1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1098, 1099$\n$x_i$ and $y_i$ are preprocessed to obtain the preprocessed form of the number $1 + n$, which is the same as the normal form of the number $1 + n$. For example, $1 + n$ = $n + 1$, as the normal form $1 + n$ will be obtained by adding the number $1$ to $n$.\n\nAfter preprocessing $x_i$, $y_i$ is obtained by adding the number $1$ to $n$. Thus, if $x_i = $1$, $y_i = 0$, then $1 + n$ = $n + 1$.\n\nAfter preprocessing $x_i$, $y_i$ is obtained by adding the number $1$ to $n$. Thus, if $x_i = $1$, $y_i = 0$, then $1 + n$ = $n + 1$.\n\nAfter preprocessing $x_i$, $y_i$ is obtained by adding the number $1$ to $n$. Thus, if $x_i = $1$, $y_i = 0$, then $1 + n$ = $n + 1$.\n\nWe can calculate the number of different numbers that are reachable from $1098$ by using a depth-first approach. We iterate through $1098$ and update $x_i$, $y_i$ and $i$ for each number that was not seen already. For example, $1 + n$ = $n + 1$, which is not reachable from $1098$, but $x_i = $1$, $y_i = 0$, and $i = 2$. We update $x_i$, $y_i$ and $i$ for each new number.\n\nThen we calculate the number of different numbers that are reachable from $1098$ by using a depth-first approach. We iterate through $1098$ and update $x_i$, $y_i$ and $i$ for each new number that was not seen already. For example, $1 + n$ = $n + 1$, which is not reachable from $1098$, but $x_i = $1$, $y_i = 0$, and $i = 2$. We update $x_i$, $y_i$ and $i$ for each new number.\n\nFinally, we calculate the number of different numbers that are reachable from $1098$ by using a stack approach. We iterate through $1098$ and update $x_i$, $y_i$ and $i$ for each new number that was not seen already. For example, $1 + n$ = $n + 1$, which is not reachable from $1098$, but $x_i = $1$, $y_i = 0$, and $i = 2$. We update $x_i$, $y_i$ and $i$ for each new number.\n\nFinally, we calculate the number of different numbers that are reachable from $1098$ by using a stack approach. We iterate through $1098$ and update $x_i$, $y_i$ and $i$ for each new number that was not seen already. For example, $1 + n$ = $n + 1$, which is not reachable from $1098$, but $x_i = $1$, $y_i = 0$, and $i = 2$. We update $x_i$, $y_i$ and $i$ for each new number.\n\nWe calculate the number of different numbers that are reachable from $1098$ by using a stack approach. We iterate through $1098$ and update $x_i$, $y_i$ and $i$ for each new number that was not seen already. For example, $1 + n$ = $n + 1$, which is not reachable from $1098$, but $x_i = $1$, $y_i = 0$, and $i = 2$. We update $x"
    },
    {
        "number": 4006,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    def is_reachable(num: int) -> bool:\n        if num == n:\n            return True\n        if num < n:\n            return False\n        if num % 2 == 0:\n            return is_reachable(num // 2)\n        else:\n            return is_reachable(3 * num)\n\n    answer = 0\n    for i in range(1, n + 1):\n        if is_reachable(i):\n            answer += 1\n    return str(answer)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4007,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, f = map(int, stdin.split())\n    ans = []\n    for i in range(n):\n        ans.append(i + 1)\n    if n % 2 == 0:\n        ans.reverse()\n    else:\n        ans.reverse()\n    for i in range(1, n, 2):\n        ans.append(ans[i - 1] + ans[i + 1])\n    return \"\".join(map(str, ans))\n\ndef"
    },
    {
        "number": 4007,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, friends, answer = map(int, stdin.split())\n    friends = friends.split()\n    for i in range(friends[0]):\n        friends.pop(0)\n    if answer == 0:\n        for i in range(n-1):\n            friends.append(i)\n        friends.append(n-1)\n        answer = friends[0]\n    if answer == 1:\n        for i in range(n-1):\n            friends.append(i)\n        answer = friends[0]\n        friends.pop(0)\n        friends.append(n-1)\n        friends.pop(0)\n        answer = friends[0]\n    if answer == 2:\n        for i in range(n-1):\n            friends.append(i)\n        answer = friends[0]\n        friends.pop(0)\n        friends.pop(0)\n        friends.pop(0)\n        answer = friends[0]\n    if answer == 3:\n        for i in range(n-1):\n            friends.append(i)\n        answer = friends[0]\n        friends.pop(0)\n        friends.pop(0)\n        friends.pop(0)\n        answer = friends[0]\n    if answer == 4:\n        for i in range(n-1):\n            friends.append(i)\n        answer = friends[0]\n        friends.pop(0)\n        friends.pop(0)\n        friends.pop(0)\n        answer = friends[0]\n    return answer\n"
    },
    {
        "number": 4007,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    \n    a, b = [], []\n    for i in range(n):\n        a.append(int(stdin[i]))\n        b.append(int(stdin[i+1]))\n        \n    b.sort()\n    for i in range(n):\n        if a[i]!= b[i]:\n            return 'NO'\n    \n    return 'YES'\n\nprint(solution(stdin))"
    },
    {
        "number": 4007,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    gifts = []\n    for _ in range(n):\n        gifts.append([int(i) for i in stdin.strip().split()])\n    # print(gifts)\n    result = []\n    # print(gifts)\n    for i in range(1, n):\n        for j in range(n):\n            if gifts[i][j]!= 0:\n                result.append(gifts[i][j])\n                gifts[i][j] = 0\n    # print(result)\n    return \" \".join(map(str, result))\n"
    },
    {
        "number": 4007,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, *values = map(int, stdin.split())\n    friends = [0] * (n + 1)\n    \n    for i in values:\n        i = int(i)\n        if i == 0:\n            for j in range(n):\n                if friends[j] == 0:\n                    friends[j] = i\n        elif i > 0:\n            for j in range(n):\n                if friends[j] == 0:\n                    friends[j] = i + friends[j]\n    \n    answer = ''\n    for i in range(1, n + 1):\n        if friends[i] == 0:\n            answer += '0'\n        elif friends[i]!= i:\n            answer += '1'\n    \n    return answer\n\nprint(solution(input()))"
    },
    {
        "number": 4007,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(' ')[0])\n    friend = [int(x) for x in stdin.split(' ')[1].split(' ')]\n    \n    nf_friend = {}\n    for i in range(len(friend)):\n        if friend[i] not in nf_friend:\n            nf_friend[friend[i]] = i\n        else:\n            return ''\n    \n    s ='' * n\n    print(len(friend))\n    for i in range(len(friend)):\n        print(i)\n        s += str(nf_friend[friend[i]])\n    print(len(s))\n    return s\n\n    # nf_friend = {}\n    # for i in range(len(friend)):\n    #     nf_friend[friend[i]] = i\n    #     if friend[i] not in nf_friend:\n    #         print(friend[i])\n    #         nf_friend[friend[i]] = i\n    # print(len(friend))\n    # for i in range(len(friend)):\n    #     print(i)\n    #     s += str(nf_friend[friend[i]])\n    # print(len(s))\n    # return s\n"
    },
    {
        "number": 4007,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n,f,g=map(int,stdin.split(\" \"))\n    if n%f!= 0 or n < 2*g:\n        return \"error\"\n    for i in range(n//f):\n        if g-i in [g-x for x in range(f)]:\n            if g-i == f:\n                return str(i+1)+\" \"*g\n            else:\n                if g-i!= f:\n                    return str(i+1)+\" \"*g\n    return str(n//f)+\" \"*(f-1)+str(n-f*(f-1))"
    },
    {
        "number": 4007,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n        n,k=map(int,stdin.split())\n        dict=[]\n        ans=[]\n        \n        for i in range(n):\n            dict.append(list(map(int,stdin.split())))\n        for i in range(n):\n            for j in range(i+1,n):\n                for m in range(k):\n                    if dict[i][m]!=dict[j][m] and dict[i][m]!=0:\n                        dict[i][m]=1\n                        dict[j][m]=0\n        for i in range(n):\n            for j in range(i+1,n):\n                for m in range(k):\n                    if dict[j][m]==0:\n                        ans.append(i)\n                        ans.append(j)\n                        break\n        return '\\n'.join(str(e) for e in ans)\n        \n        \n    "
    },
    {
        "number": 4007,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    \n    total = 0\n    for _ in range(n):\n        total += map(int, stdin.split())\n        \n    friends = [0] * n\n    for i in range(n):\n        friends[i] = total - i\n    \n    for _ in range(m):\n        start, end = map(int, stdin.split())\n        start -= 1\n        end -= 1\n        if friends[start] > friends[end]:\n            friends[start] -= 1\n            friends[end] -= 1\n        elif friends[end] > friends[start]:\n            friends[end] -= 1\n            friends[start] -= 1\n    \n    for i in range(n):\n        if friends[i] > 0:\n            print(i+1)\n            return \"Yes\"\n    \n    print(len(friends))\n    return \"No\""
    },
    {
        "number": 4007,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    friends = []\n    for i in range(n):\n        friends.append(list(map(int, stdin.split())))\n    \n    for i in range(n-1):\n        for j in range(i+1, n):\n            if friends[i][0]!= friends[j][0] or friends[i][1]!= friends[j][1]:\n                continue\n            for k in range(n):\n                if friends[i][k] == friends[j][k]:\n                    continue\n                if friends[i][k] == friends[j][k] and friends[i][k]!= friends[j][k]:\n                    continue\n                if friends[i][k] == friends[j][k] and friends[i][k] == friends[j][k]:\n                    continue\n                if friends[i][k]!= friends[j][k] and friends[i][k]!= friends[j][k] and friends[i][k]!= friends[j][k]:\n                    continue\n                if friends[i][k] == friends[j][k] == friends[i][k] and friends[i][k]!= friends[j][k]:\n                    continue\n                if friends[i][k]!= friends[j][k]:\n                    continue\n                return str(i) +'' + str(j) +'' + str(k)\n    \n    \nprint(solution(stdin))"
    },
    {
        "number": 4008,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    answer = \"\"\n    n, k = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n\n    for i in range(0, k):\n        answer += \"YES\"\n        for j in range(i+1, k):\n            if arr[i]!= arr[j]:\n                answer += \"NO\"\n    return answer\n-----Constraints-----\n1 <= n <= 5000\n1 <= k <= 5000\n\nTime Limit: 2 seconds\nSpace Limit: 0,00\n\ndef"
    },
    {
        "number": 4008,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = [list(map(int, stdin.split())) for i in range(n)]\n    answer = \"NO\"\n    color_sums = []\n    for i in range(1, k+1):\n        if i <= n:\n            color_sum = 0\n            for j in range(n):\n                color_sum += a[j][i-1]\n            color_sums.append(color_sum)\n    answer = \"YES\"\n    for color in color_sums:\n        if answer == \"NO\":\n            answer = color\n        elif answer == color:\n            answer = \"NO\"\n            break\n    return answer\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4008,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    k = int(stdin[1])\n    a = list(map(int, stdin[2:]))\n\n    result = \"\"\n    color = [0] * (n + 1)\n    color[0] = 1\n\n    for i in range(n):\n        for j in range(k):\n            if j == 0:\n                if a[i] >= color[j]:\n                    color[j + 1] += color[j]\n                else:\n                    color[j + 1] = 0\n            elif j == k - 1:\n                if a[i] >= color[j]:\n                    color[j + 1] += color[j]\n                else:\n                    color[j + 1] = 0\n            else:\n                if a[i] >= color[j]:\n                    color[j + 1] += color[j]\n                    color[j] = 0\n                else:\n                    color[j + 1] = 0\n    for i in range(n):\n        if color[i] == 1:\n            result += \"YES\"\n        else:\n            result += \"NO\"\n\n    return result"
    },
    {
        "number": 4008,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, k = map(int, stdin.split())\n    if a <= k:\n        return \"NO\"\n    elif a - 1 <= k:\n        return \"YES\"\n    else:\n        return \"YES\""
    },
    {
        "number": 4008,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n == k:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4008,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n\n    nums = []\n    for i in range(0, n):\n        nums.append([int(x) for x in stdin.split()])\n    \n    if n < k:\n        return \"NO\"\n    \n    if n == 1:\n        return \"YES\"\n\n    result = []\n    for i in range(0, k-1):\n        #\ubaa8\ub4e0 \ud638\ub294 \uacf5\ubc31\uc73c\ub85c \uad6c\ubd84\ub418\uc5b4 \uc904 \uac83\uc774\ub2e4.\n        result.append(a[i]*nums[i][i+1]+a[i+1]*nums[i][i])\n    \n    return \"\".join(map(str, result))\n\n\n\nprint(solution(\"4 2\"))\nprint(solution(\"5 2\"))\nprint(solution(\"5 2\"))"
    },
    {
        "number": 4008,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n        \n        n, k = map(int, stdin.split())\n        a = [0]*k\n\n        for _ in range(n):\n            a[int(stdin.split()[0])-1] = int(stdin.split()[1])\n        \n        for i in range(k):\n            if a[i] == 0:\n                a[i] = 1\n        \n        c = [0]*(k-1)\n        for i in range(k-1):\n            c[i] = a[i+1] - a[i]\n        \n        if a[-1]==1:\n            c[-1] = 0\n\n        a.sort()\n        ans = \"\"\n\n        for i in range(k):\n            ans += str(a[i]) + \" \"\n            if i<k-1:\n                ans += str(c[i]) + \" \"\n\n        return ans\n\n        pass\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4008,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = [int(x) for x in stdin.split()]\n    \n    def _coloring(color):\n        return [[color]*i + [color] + [color]*(n-i-1) for i in range(k)]\n    \n    def coloring(color, i):\n        for j in range(i+1, k+1):\n            if a[i] == a[j]:\n                color = _coloring(color)\n        return color\n    \n    def colors(i):\n        color = [0]*(n-1)\n        for j in range(1, k):\n            if a[i] == a[j]:\n                color[j] = _coloring(color[j])\n        return color\n    \n    return ''.join([coloring(i, 0) for i in range(k)] + [coloring(k, 0)])\n"
    },
    {
        "number": 4008,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    colors = set()\n    \n    def is_valid(i, j, k, colors):\n        if i == k or j == k or i >= j or i < 0 or j < 0:\n            return False\n        if colors.issuperset(set(a[i])):\n            return False\n        if a[i] > k or a[j] > k:\n            return False\n        colors.add(a[i] + a[j])\n        return True\n    \n    def coloring(c):\n        if c in colors:\n            return False\n        if len(colors) == n:\n            return True\n        colors.add(c)\n        for i in range(n):\n            if is_valid(i, 0, n, colors):\n                coloring(c+a[i])\n            else:\n                coloring(c+a[i])\n        return False\n    \n    coloring('')\n    return 'NO'\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4008,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Hard-coded input\n    stdin = stdin.strip()\n    # Remove first and last character from string\n    stdin = stdin.lstrip(' ')\n    # Convert string to list\n    stdin = [int(s) for s in stdin.split()]\n    n = len(stdin)\n    # Initialize counters\n    cnt = [0] * n\n    \n    # Initialize the colors\n    # The color of first element of the array is c\n    c = stdin[0]\n    \n    # Set the color of the first element of the array\n    c = c % n\n    # Get the number of colors\n    n = stdin[c]\n    \n    # Iterate over the elements\n    # The color of the first element of the array is c\n    for i in range(1, n):\n        # Increase the counters\n        # The color of the element is c\n        c = c % n\n        # Get the number of colors\n        n = stdin[c]\n        # Set the color of the element\n        c = c % n\n        # Check if the color is different than the color of the previous element\n        if c!= c % n:\n            # If the color of the previous element is different than the color of the current element\n            # Set it\n            c = c % n\n            # Set the color of the current element\n            c = c % n\n    \n    # Return the answer\n    return \"YES\" if sum(cnt) % n == 0 else \"NO\"\n\n\ndef"
    },
    {
        "number": 4009,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split())\n    \n    return str(10**(x-y)) + str(10**(x+y))\n"
    },
    {
        "number": 4009,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x, y = stdin.split(\" \")\n    n, x, y = list(map(int, x.split(\" \")))\n    m, r = list(map(int, y.split(\" \")))\n    print(x % m)\n    print(x % m % r)\n    print(x % m % m)\n    print(x % m % n)\n    print(x % m % m)\n    print(x % n % m)\n    print(x % m % m)\n    print(x % n % n)\n    print(x % m % n % r)\n    print(x % m % n % m % r)\n    print(x % m % n % m % r)\n    return str(x % n % n % n % r)\n\nfor _ in range(int(input())):\n    print(solution(input()))\n"
    },
    {
        "number": 4009,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n,x,y = map(int,stdin.split())\n    result = 10**y\n    result = result - 10**x\n    while result % 10**y!= 0:\n        result = result - (10**y)\n    return str(result)\n"
    },
    {
        "number": 4009,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split())\n    while x % 10!= y % 10:\n        x += 1\n    x = x // 10\n    return str(x + y)\n\n\n-----Example 1-----\nInput\n10 2 4\n\nOutput\n3\n\nExplanation\nAfter applying two operations, the number obtained is $10^2 + 10^4$ when divided by $10^4$.\n\nAfter applying three operations, the number obtained is $10^2 + 10^2 + 10^2$ when divided by $10^2$.\n\nNote that a recursive function is called on the number to determine the remainder when it is divided by $10^x$. So, the number obtained is $10^2 + 10^2 + 10^2 + 10^2 + 10^2$.\n\n-----Example 2-----\nInput\n10 10 5\n\nOutput\n2\n\nExplanation\nAfter applying one operation, the number obtained is $10^2 + 10^3$ when divided by $10^5$.\n\nAfter applying two operations, the number obtained is $10^3 + 10^2 + 10^2 + 10^2 + 10^2 + 10^2 + 10^2 + 10^2 + 10^2 + 10^2$.\n\nNote that a recursive function is called on the number to determine the remainder when it is divided by $10^x$. So, the number obtained is
    },
    {
        "number": 4009,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nThe input contains only integer in the range $0 \\le x < n \\le 2 \\cdot 10^5$.\nOutput consists of integers $10^y$ (with leading zeroes), $10^x$ (with leading zeroes), $y$ (with leading zeroes)\n\nNotes\nInput is in standard form (e.g., the digits 1-3 represent $1, 2, and 3$).\n-9^0, 1, 0, $0, 0, 0$, $0, 0, 1$, $1, 0, 0$, $0, 1, 1$, $0, 1, 0$, $0, 0, 0$, $0, 0, 0$.\n-10^0, 1, 1, $0, 0, 0$, $0, 1, 0$, $1, 0, 0$, $0, 0, 0$, $0, 0, 1$, $0, 1, 0$, $0, 0, 1$, $0, 0, 1$\n-10^1, 1, 0, $0, 0, 0$, $0, 0, 0$, $0, 0, 0$, $0, 1, 1$, $1, 0, 0$, $0, 0, 1$, $0, 1, 0$, $0, 1, 0$, $0, 0, 1$\n-10^2, 1, 1, $0, 0, 0$, $0, 0, 0$, $0, 0, 0$, $0, 0, 0$, $0, 1, 1$, $1, 1, 0$, $0, 1, 0$, $0, 1, 1$, $0, 0, 1$\n\nExplanation\n\nInput: str = \"1010100101\"\nOutput: 3\n\nInput: str = \"1010101001\"\nOutput: 3\n\nInput: str = \"1010101100\"\nOutput: 4\n\nInput: str = \"1111001101\"\nOutput: 0\n\nInput: str = \"1111011101\"\nOutput: 0\n\nInput: str = \"1111011101\"\nOutput: 0\n\nInput: str = \"1111011101\"\nOutput: 1\n\nInput: str = \"1111111111\"\nOutput: 0\n\n\"\"\"\n\nimport math\n\ndef"
    },
    {
        "number": 4009,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = list(map(int, stdin.split()))\n    res = 0\n    while x:\n        if x & 1 == 1:\n            x = 10**x-1\n        else:\n            x = 10**x\n        res = max(res, x/y)\n    return str(res)\n\ndef"
    },
    {
        "number": 4009,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split())\n    \n    if n <= x:\n        n = x\n        x = n % x\n    if n <= y:\n        n = y\n        y = n % y\n    \n    return str(10**x - 10**y)\n    \nprint(solution(input()))"
    },
    {
        "number": 4009,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split())\n    remainder = 10**y\n    while n > x:\n        n = n // x\n        remainder -= 1\n    return str(n % remainder)\n"
    },
    {
        "number": 4009,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split())\n    m = int(str(n)[::-1])\n    return str(m % 10**x % 10**y)\n"
    },
    {
        "number": 4009,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n,x,y = map(int,stdin.split())\n    x,y = abs(x),abs(y)\n    while x>0:\n        if x>y:\n            x=x-y\n        else:\n            y=y*10\n    return str(10**(x+y))\n\n\ndef"
    },
    {
        "number": 4010,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip().split(' ')[0])\n    a = [int(stdin.strip().split(' ')[i]) for i in range(N)]\n    palin = True\n    for i in range(1, len(a)):\n        if a[i]!= a[i - 1]:\n            palin = False\n    if palin:\n        print('YES')\n    else:\n        print('NO')\n"
    },
    {
        "number": 4010,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    cnt = 0\n    for i in range(n):\n        palindrome = 0\n        #for j in range(n):\n        for j in range(n-i-1):\n            palindrome = (a[j] + a[j+1]) % 10007\n            # print(palindrome)\n            if palindrome == a[j]:\n                cnt += 1\n            # print(cnt)\n        if cnt == 3:\n            return \"YES\"\n        # print(cnt)\n        cnt = 0\n    return \"NO\"\n\nInput\n5\n3\n1 2 1\n5\n1 2 2 3 2\n3\n1 1 2\n4\n1 2 2 1\n10\n1 1 2 2 3 3 4 4 5\n\nOutput\nNO\nNO\nYES\nYES\nYES\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4010,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.strip())\n    for _ in range(a):\n        n = int(stdin.strip())\n        n_list = list(map(int, stdin.strip().split()))\n        n_list.sort()\n        \n        if n_list[n-1] == n_list[n-2] == n_list[n-3]:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n"
    },
    {
        "number": 4010,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.strip())\n    if a < 3:\n        return \"NO\"\n    for i in range(a):\n        if isPalindrome(a[i:i+3]):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    return \"YES\"\n\ndef"
    },
    {
        "number": 4010,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    a = []\n    for _ in range(q):\n        a.append(int(stdin.split()[-1]))\n    for i in range(q):\n        print(solution(f\"{i + 1} {n} {a[i]} {len(a) - i - 1} {a[i]} {a[i + 1]} {a[i + 2]} {a[i + 1]} {a[i + 2]}\") == \"YES\")\n\n\n----Input----\n\ninput\n5\n3\n1 2 1\n5\n1 2 2 3 2\n3\n1 1 2\n4\n1 2 2 1\n10\n1 1 2 2 3 3 4 4 5 5\n\noutput\nYES\nYES\nNO\nNO\n\n\n-----Solution-----\n\ndef"
    },
    {
        "number": 4010,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    for t in range(int(stdin)):\n        n = int(stdin.split()[1])\n        a = stdin.split()[2:]\n        for i in range(n):\n            a.remove(str(i))\n        answer = 'NO' if len(a) > 0 else 'YES'\n        print(answer)"
    },
    {
        "number": 4010,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.split()))\n    nums = []\n    for i in range(n):\n        if len(nums) > 1:\n            if nums[i]!= nums[i-1]:\n                return \"NO\"\n        if nums:\n            nums.append(a[i])\n    return \"YES\"\n"
    },
    {
        "number": 4010,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 3:\n        return \"YES\"\n    a = list(map(int, stdin.split()))\n    a.sort()\n    check = 0\n    for i in range(n-3):\n        # print(a[i:i+3])\n        if a[i] == a[i+3] and check == 0:\n            if check == 0:\n                check = 1\n            else:\n                return \"NO\"\n        else:\n            if check == 0:\n                check = 1\n            else:\n                return \"NO\"\n    return \"YES\""
    },
    {
        "number": 4010,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    palindrome = []\n    for i in range(n):\n        string = stdin.strip()\n        palindrome.append(string)\n    palindrome = ''.join(palindrome)\n    total = 0\n    for i in range(n):\n        for j in range(i, n):\n            total += 1\n            if palindrome[i] == palindrome[j]:\n                total -= 1\n    if total % 2 == 1:\n        return \"YES\"\n    else:\n        return \"NO\"\n\nfor _ in range(int(stdin.strip())):\n    print(solution(stdin.strip()))"
    },
    {
        "number": 4010,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.strip())\n    for i in range(t):\n        n = int(stdin.strip())\n        a = stdin.strip().split(\" \")\n        a = [int(i) for i in a]\n        s = 0\n        for i in a:\n            if i%3 == 0:\n                s += i\n        if s == 0:\n            print(\"YES\")\n        else:\n            print(\"NO\")"
    },
    {
        "number": 4011,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    if n < 10:\n        return str(n)\n    n_1 = n // 10**(n % 10)\n    for i in range(10):\n        a_1 = str(i)\n        a_2 = str(i+1)\n        a_3 = str(i+2)\n        a_4 = str(i+3)\n        a_5 = str(i+4)\n        a_6 = str(i+5)\n        a_7 = str(i+6)\n        a_8 = str(i+7)\n        a_9 = str(i+8)\n        a_10 = str(i+9)\n        a_1_f = str(f(a_1))\n        a_2_f = str(f(a_2))\n        a_3_f = str(f(a_3))\n        a_4_f = str(f(a_4))\n        a_5_f = str(f(a_5))\n        a_6_f = str(f(a_6))\n        a_7_f = str(f(a_7))\n        a_8_f = str(f(a_8))\n        a_9_f = str(f(a_9))\n        a_10_f = str(f(a_10))\n        a_1_f_1 = str(f(a_1_f + a_1))\n        a_2_f_1 = str(f(a_2_f + a_2))\n        a_3_f_1 = str(f(a_3_f + a_3))\n        a_4_f_1 = str(f(a_4_f + a_4))\n        a_5_f_1 = str(f(a_5_f + a_5))\n        a_6_f_1 = str(f(a_6_f + a_6))\n        a_7_f_1 = str(f(a_7_f + a_7))\n        a_8_f_1 = str(f(a_8_f + a_8))\n        a_9_f_1 = str(f(a_9_f + a_9))\n        a_10_f_1 = str(f(a_10_f + a_10))\n        a_1_f_2 = str(f(a_1_f_1 + a_1))\n        a_2_f_2 = str(f(a_2_f_1 + a_2))\n        a_3_f_2 = str(f(a_3_f_1 + a_3))\n        a_4_f_2 = str(f(a_4_f_1 + a_4))\n        a_5_f_2 = str(f(a_5_f_1 + a_5))\n        a_6_f_2 = str(f(a_6_f_1 + a_6))\n        a_7_f_2 = str(f(a_7_f_1 + a_7))\n        a_8_f_2 = str(f(a_8_f_1 + a_8))\n        a_9_f_2 = str(f(a_9_f_1 + a_9))\n        a_10_f_2 = str(f(a_10_f_1 + a_10))\n        a_1_f_3 = str(f(a_1_f_2 + a_1))\n        a_2_f_3 = str(f(a_2_f_2 + a_2))\n        a_3_f_3 = str(f(a_3_f_2 + a_3))\n        a_4_f_3 = str(f(a_4_f_2 + a_4))\n        a_5_f_3 = str(f(a_5_f_2 + a_5))\n        a_6_f_3 = str(f(a_6_f_2 + a_6))\n        a_7_f_3 = str(f(a_7_f_2 + a_7))\n        a_8_f_3 = str(f(a_8_f_2 + a_8))\n        a_9_f_3 = str(f(a_9_f_2 + a_9))\n        a_10_f_3 = str(f(a_10_f_2 + a_10))\n        a_1_f_4 = str(f(a_1_f_3 + a_1))\n        a_2_f_4 = str(f(a_2_f_3 + a_2))\n        a_3_f_4 = str(f(a_3_f_3 + a_3))\n        a_4_f_4 = str(f(a_4_f_3 + a_4))\n        a_5_f_4 = str(f(a_5_f_3 + a_5))\n        a_6_f_4 = str(f(a_6_f_3 + a_6))\n        a_7_f_4 = str(f(a_7_f_3 + a_7))\n        a_8_f_4 = str(f(a_8_f_3 + a_8))\n        a_9_f_4 = str(f(a_9_f_3 + a_9))\n        a_10_f_4 = str(f(a_10_f_3 + a_10))\n        a_1_f_5 = str(f(a_1_f_4 + a_1))\n        a_2_f_5 = str(f(a_2_f_4 + a_2))\n        a_3_f_5 = str(f(a_3_f_4 + a_3))\n        a_4_f_5 = str(f(a_4_f_4 + a_4))\n        a_5_f_5 = str(f(a_5_f_4 + a_5))\n        a_6_f_5 = str(f(a_6_f_4 + a_6))\n        a_7_f_5 = str(f(a_7_f_4 + a_7))\n        a_8_f_5 = str(f(a_8_f_4 + a_8))\n        a_9_f_5 = str(f(a_9_f_4 + a_9))\n        a_10_f_5 = str(f(a_10_f_4 + a_10))\n        a_1_f_6 = str(f(a_1_f_5 + a_"
    },
    {
        "number": 4011,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = input(stdin).split()\n    a = list(map(int, a))\n    f = input(stdin).split()\n    f = list(map(int, f))\n    for i in range(len(a)):\n        if a[i] <= 9:\n            a[i] = str(a[i])\n    for i in range(len(f)):\n        if f[i] >= 9:\n            f[i] = str(f[i])\n    a.sort()\n    f.sort()\n    for i in range(len(a)):\n        a[i] = int(a[i])\n    for i in range(len(f)):\n        f[i] = int(f[i])\n    f.sort()\n    sum = 0\n    result = ''\n    for i in range(len(f)):\n        if f[i]!= 0:\n            sum += f[i]\n            result = int(result) + int(a[i]) + int(sum)\n        else:\n            result += int(a[i])\n    return str(result)\n\n----- Test -----\nInput\n4\n1337\n1 2 5 4 6 6 3 1 9\n\nOutput\n1557\n\nInput\n5\n11111\n9 8 7 6 5 4 3 2 1\n\nOutput\n33\n\nInput\n2\n33\n1 1 1 1 1 1 1 1 1\n\nOutput\n33\n\ninput\n4\n1337\n1 2 5 4 6 6 3 1 9\n\noutput\n33\n\n-------\n\nInput\n6\n11111\n1 2 5 4 6 6 3 1 9\n\nOutput\n3\n9\n6 8 7 6 5 4 3 2 1\n\ndef"
    },
    {
        "number": 4011,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    def solve(i,n,s):\n        \n        if len(s)==n:\n            if i==0:\n                return i\n            elif i<n:\n                return solve(i+1,n,s)\n            else:\n                return solve(0,n,s)\n        else:\n            ans=s[i]\n            s.pop(i)\n            return ans\n    \n    n=int(stdin.strip())\n    s=[]\n    for i in range(n):\n        s.append(int(stdin.strip()[i]))\n    \n    print(solve(0,n,s))"
    },
    {
        "number": 4011,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    while n:\n        a = []\n        for i in range(9):\n            a.append(int(stdin[i]))\n        for i in range(9, 0, -1):\n            if a[i] == a[i - 1]:\n                a[i] = f(a[i - 1])\n            else:\n                break\n        else:\n            return \"\".join(map(str, a))\n        n -= 1\n    return \"0\"\n\"\"\"\n"
    },
    {
        "number": 4011,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    answer = 0\n    for i in range(1, 10):\n        ans = 0\n        for j in range(1, 10):\n            if j < i:\n                ans = j\n                break\n        answer = max(answer, ans)\n    return str(answer)"
    },
    {
        "number": 4011,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(i) for i in stdin.strip().split()]\n    def f(x):\n        return f(str(x)[::-1])\n    def g(x):\n        return f(str(x)[::-1])\n    def f(n):\n        ans = 0\n        for i in range(10):\n            ans += a[n - 1] * g(i)\n        return ans\n    return str(f(0))\n"
    },
    {
        "number": 4011,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    print(max(map(lambda x: f(x), range(1, A+1))))\n    print(max(map(lambda x: f(x), range(B, A+1))))\n    print(max(map(lambda x: f(x), range(1, B+1))))\n    \n\ndef"
    },
    {
        "number": 4011,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n,a,f=map(int,stdin.split())\n    a=list(map(int,a.split()))\n    m=0\n    for i in range(1,len(a)):\n        m=m+a[i-1]*f[i-1]\n    \n    return str(m)\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4011,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    a = int(stdin)\n    if a < 10 ** 5:\n        return a\n    \n    a -= 2 ** (len(str(a)) - 1)\n    b = int(a / 2)\n    \n    while b > 0:\n        if a % 2 == 0:\n            a = a // 2\n        else:\n            a = (a // 2) + 1\n        \n        b -= 1\n    \n    return str(a)\n        "
    },
    {
        "number": 4011,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = [int(i) for i in stdin.strip().split()]\n    f = [int(j) for j in stdin.strip().split()]\n    i = 0\n    f.sort()\n    while i < n:\n        if a[i] > 9:\n            a[i] = f[i]\n            i += 1\n        else:\n            i += 1\n    return ''.join([str(i) for i in a])\n"
    },
    {
        "number": 4012,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    answer = 0\n    \n    for n in range(int(stdin.strip())):\n        # get max value for a and b\n        a, b, c = map(int, stdin.strip().split())\n        \n        # solve for three numbers a, b, c\n        # (1) if a is not divisible by b, then solve for a+1\n        if a % b!= 0:\n            a = a + a % b\n            \n        # (2) if a is not divisible by c, then solve for a-1\n        if a % c!= 0:\n            a = a - a % c\n            \n        # (3) if b and c are not divisible by a, then solve for b+1\n        if b % a!= 0 or c % b!= 0:\n            b = b + b % a\n            \n        # (4) if c and a are not divisible by b, then solve for c+1\n        if c % a!= 0 or b % c!= 0:\n            c = c + c % a\n            \n        # (5) if a and c are both divisible by both numbers, then we can do the following\n        if (a % b == 0 and a % c == 0) or (a % b == 0 and b % c == 0) or (b % c == 0 and c % a == 0):\n            answer += 1\n            \n    return str(answer)\n\"\"\""
    },
    {
        "number": 4012,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    answer = 99999999999999999999999\n    for i in range(N):\n        operations = [int(x) for x in stdin.split()]\n        if i == 0:\n            for j in operations:\n                if j == 0:\n                    pass\n                else:\n                    answer = min(answer, j)\n        if i == N-1:\n            for j in operations:\n                if j == 0:\n                    pass\n                else:\n                    answer = min(answer, j)\n    print(answer)\n    return str(answer)\n\n-----Constraints-----\n\n1 <= t <= 100\n1 <= a, b, c <= 10^4\n\n-----Time Limit Before -----\n\nTime Limit: 1 sec\n\nTime Limit: 50 ms\n\n-----Time Limit After -----\n\nTime Limit: 2 sec\n\n-----Divisibility -----\n\nTime Limit: 4 sec\n\n-----Problems -----\n\n\"\"\""
    },
    {
        "number": 4012,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.strip())\n    for i in range(t):\n        a, b, c = map(int, stdin.strip().split(\" \"))\n        if a % b == 0 and a % c == 0:\n            print(min(a, b, c))\n        else:\n            print(0)\n            \n"
    },
    {
        "number": 4012,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[-1])\n    a, b, c = map(int, stdin.split())\n    \n    nums = [a]\n    for i in range(1, n):\n        nums.append(nums[-1] + a)\n        nums.append(nums[-1] - b)\n        nums.append(nums[-1] * c)\n    \n    return ''.join(map(str, nums))"
    },
    {
        "number": 4012,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, t = map(int, stdin.split())\n    res = \"0\"\n    for _ in range(t):\n        res = res + str(a + b + c)\n        a = a + 1\n        b = b + 2\n        c = c + 3\n    return res\n\"\"\"\n\nimport sys\n\nt = int(sys.stdin.readline().rstrip())\nfor _ in range(t):\n    a, b, c = map(int, sys.stdin.readline().split())\n    print(min(a, b, c))"
    },
    {
        "number": 4012,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    res = 0\n    while True:\n        val = max(b, c)\n        if val % a == 0 and val % b == 0 and val % c == 0:\n            res += 1\n        if val == b:\n            res += 1\n        if val == c:\n            res += 1\n        b, c = a, val\n        if b == 0 and c == 0:\n            break\n    if res > 1:\n        print(f'{res}')\n    else:\n        print(f'{res} {a}')\n    return str(res)"
    },
    {
        "number": 4012,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\ndef"
    },
    {
        "number": 4012,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.strip().split()[0])\n    a, b, c = list(map(int, stdin.strip().split()))\n    ans = a\n    for _ in range(t):\n        ans += b\n        ans += c\n    print(ans)\n    return str(ans)"
    },
    {
        "number": 4012,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    return min(a) + max(a)"
    },
    {
        "number": 4012,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    result = [-1] * n\n    cnt = 0\n    for i in range(n):\n        if i!= 0:\n            result[i] = result[i-1]\n        for j in range(i, n):\n            if result[j] == -1:\n                cnt += 1\n                result[j] = min(result[i:j+1]) + max(result[i:j+1])\n    return '{:.6f}'.format(result[n-1])\n\n\"\"\"\nclass Solution:\n    def minOperations(self, nums: List[int]) -> str:\n        return str(min(sum(nums[:len(nums)//2])+sum(nums[len(nums)//2:]), sum(nums[:len(nums)//2])))\n\"\"\""
    },
    {
        "number": 4013,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    a = sorted(a)\n    \n    ret = a[0]\n    for i in range(1,len(a)):\n        if (a[i] - a[i-1]) == 1:\n            ret -= 1\n        elif (a[i] - a[i-1]) == -1:\n            ret += 1\n    print(ret)\n    \n    return str(ret)\n\"\"\"\n\ndef"
    },
    {
        "number": 4013,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    return '0' if n-1 < len(a) else '1'\n\nprint(solution(\"3 100000 7\"))\n"
    },
    {
        "number": 4013,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    a.sort()\n    a = [a[i] - a[i-1] for i in range(1, n+1)]\n    return str(min(a))\n\n-----Advanced-----\n\ndef"
    },
    {
        "number": 4013,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    a.sort()\n    a.pop()\n    min_val = a[-1] - a[0]\n    for i in range(n):\n        if a[i] - a[i-1] < min_val:\n            min_val = a[i] - a[i-1]\n    return str(min_val)\n\ndef"
    },
    {
        "number": 4013,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = [int(x) for x in stdin.split()]\n    for i in range(n):\n        if a[i] == 1:\n            a[i] = a[i-1] - 1\n        elif a[i] == -1:\n            a[i] = 100000\n    for i in range(n, 2*n):\n        if a[i] == 1:\n            a[i] = a[i-1] - 1\n        elif a[i] == -1:\n            a[i] = 100000\n    return str(max(a))\n\nprint(solution(\"1 1 1 1 1 1\"))\nprint(solution(\"2 100000\"))\n\n\n\n\"\"\"\n"
    },
    {
        "number": 4013,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = [int(i) for i in stdin.split() if i.isdigit()]\n    idx = 0\n    while idx < n - 1:\n        if a[idx] == a[idx + 1]:\n            idx += 1\n            a[idx] -= 1\n        else:\n            idx += 1\n    if idx == n - 1:\n        return \"0\"\n    return str(abs(a[idx]))\n"
    },
    {
        "number": 4013,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    # print(a)\n    count = 0\n    for i in range(n-1):\n        count += abs(a[i] - a[i+1])\n    # print(count)\n    return str(count)\n\n\"\"\""
    },
    {
        "number": 4013,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    if N <= 0 or N > 10 ** 5:\n        return \"\"\n    a = [int(i) for i in list(stdin.strip())]\n    for i in range(1, N):\n        a[i] = a[i] - a[i - 1]\n    if len(set(a)) == 1:\n        return str(a[0])\n    return \"0\"\n\nN = int(input())\nprint(solution(input()))"
    },
    {
        "number": 4013,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    if n == 1:\n        return \"0\"\n    if n == 2:\n        return str(a - 1)\n    if n == 3:\n        return str(a - 1)\n    if n == 4:\n        return str(a - 1)\n    if n == 5:\n        return str(a - 1)\n    if n == 6:\n        return str(a - 1)\n    if n == 7:\n        return str(a - 1)\n    print(-1)\n\nprint(solution(\"2 4 3 2\"))\n\n\ndef"
    },
    {
        "number": 4013,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    a.sort()\n    a_len = len(a)\n    a_min = a[1] - a[0]\n    for i in range(2, a_len):\n        a_min = min(a_min, a[i])\n    \n    if a_min == 0:\n        return '0'\n    else:\n        return str(abs(n-a_min))\n"
    },
    {
        "number": 4014,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    schedules = []\n    for i in range(n):\n        schedules.append(list(map(int, stdin.split())))\n    petya = []\n    for i in range(n):\n        petya.append(0)\n    for i in range(m):\n        petya[i] = 1\n    cnt = 0\n    for i in range(n):\n        for j in range(n):\n            if petya[j] == 1 and schedules[j][i] == 1:\n                petya[i] = 1\n                cnt += 1\n                break\n    for i in range(n):\n        for j in range(n):\n            if petya[j] == 0 and schedules[j][i] == 1:\n                cnt += 1\n    if cnt == n * n:\n        return str(cnt)\n    else:\n        return '-1'\n"
    },
    {
        "number": 4014,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def solution1():\n        global n,m,s,d\n        n,m,s,d = map(int,stdin.split())\n        day_cnt=0\n        while s<=d:\n            day_cnt+=1\n            s+=m\n        return n*day_cnt\n\n    def solution2():\n        global n,m,s,d\n        n,m,s,d = map(int,stdin.split())\n        day_cnt=0\n        while s<=d:\n            day_cnt+=1\n            s+=m\n        return n*day_cnt\n    def solution3():\n        global n,m,s,d\n        n,m,s,d = map(int,stdin.split())\n        day_cnt=0\n        while s<=d:\n            day_cnt+=1\n            s+=m\n        return n*day_cnt\n    def solution4():\n        global n,m,s,d\n        n,m,s,d = map(int,stdin.split())\n        day_cnt=0\n        while s<=d:\n            day_cnt+=1\n            s+=m\n        return n*day_cnt\n    def solution5():\n        global n,m,s,d\n        n,m,s,d = map(int,stdin.split())\n        day_cnt=0\n        while s<=d:\n            day_cnt+=1\n            s+=m\n        return n*day_cnt\n\n    def solution6():\n        global n,m,s,d\n        n,m,s,d = map(int,stdin.split())\n        day_cnt=0\n        while s<=d:\n            day_cnt+=1\n            s+=m\n        return n*day_cnt\n    \n    def solution7():\n        global n,m,s,d\n        n,m,s,d = map(int,stdin.split())\n        day_cnt=0\n        while s<=d:\n            day_cnt+=1\n            s+=m\n        return n*day_cnt\n\n    def solution8():\n        global n,m,s,d\n        n,m,s,d = map(int,stdin.split())\n        day_cnt=0\n        while s<=d:\n            day_cnt+=1\n            s+=m\n        return n*day_cnt\n\n    def solution9():\n        global n,m,s,d\n        n,m,s,d = map(int,stdin.split())\n        day_cnt=0\n        while s<=d:\n            day_cnt+=1\n            s+=m\n        return n*day_cnt\n\n    def solution10():\n        global n,m,s,d\n        n,m,s,d = map(int,stdin.split())\n        day_cnt=0\n        while s<=d:\n            day_cnt+=1\n            s+=m\n        return n*day_cnt\n\n    def solution11():\n        global n,m,s,d\n        n,m,s,d = map(int,stdin.split())\n        day_cnt=0\n        while s<=d:\n            day_cnt+=1\n            s+=m\n        return n*day_cnt\n\n    def solution12():\n        global n,m,s,d\n        n,m,s,d = map(int,stdin.split())\n        day_cnt=0\n        while s<=d:\n            day_cnt+=1\n            s+=m\n        return n*day_cnt\n\n    def solution13():\n        global n,m,s,d\n        n,m,s,d = map(int,stdin.split())\n        day_cnt=0\n        while s<=d:\n            day_cnt+=1\n            s+=m\n        return n*day_cnt\n\n    def solution14():\n        global n,m,s,d\n        n,m,s,d = map(int,stdin.split())\n        day_cnt=0\n        while s<=d:\n            day_cnt+=1\n            s+=m\n        return n*day_cnt\n\n    def solution15():\n        global n,m,s,d\n        n,m,s,d = map(int,stdin.split())\n        day_cnt=0\n        while s<=d:\n            day_cnt+=1\n            s+=m\n        return n*day"
    },
    {
        "number": 4014,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    arr = []\n    for line in stdin.split('\\n'):\n        if line:\n            arr.append(line.split())\n    arr = [list(map(int, line)) for line in arr]\n    \n    count = 0\n    for i in range(1, len(arr)):\n        for j in range(1, len(arr[i])):\n            if arr[i][j] == arr[i - 1][j - 1] and arr[i][j] == arr[i - 1][j] and arr[i][j]!= arr[i][j - 1] + 1:\n                count += 1\n    return count\n\n\"\"\""
    },
    {
        "number": 4014,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # mapping from schedule to schedule name\n    id2name = {0: \"passing\", 1: \"preparing\", 2: \"alternating\", 3: \"passing\", 4: \"prepared\"}\n    \n    # creating an array of schedule for the first day\n    schedule1 = list(map(int, stdin.split()))\n    \n    # creating an array of schedule for the second day\n    schedule2 = []\n    for i in range(len(schedule1)):\n        schedule2.append(schedule1[i] - 1)\n    \n    # creating an array of schedule for the third day\n    schedule3 = []\n    for i in range(len(schedule1)):\n        for j in range(len(schedule1)):\n            if i < j:\n                schedule3.append(schedule1[i] - 1)\n                schedule3.append(schedule1[j] - 1)\n            elif i == j:\n                schedule3.append(schedule1[i] - 1)\n    \n    # creating an array of schedule for the fourth day\n    schedule4 = []\n    for i in range(len(schedule1)):\n        for j in range(len(schedule1)):\n            if i < j:\n                schedule4.append(schedule1[i] - 1)\n                schedule4.append(schedule1[j] - 1)\n            elif i == j:\n                schedule4.append(schedule1[i] - 1)\n    \n    # creating an array of schedule for the fifth day\n    schedule5 = []\n    for i in range(len(schedule1)):\n        for j in range(len(schedule1)):\n            if i < j:\n                schedule5.append(schedule1[i] - 1)\n                schedule5.append(schedule1[j] - 1)\n            elif i == j:\n                schedule5.append(schedule1[i] - 1)\n    \n    # checking if Petya is ready to prepare and pass a schedule\n    # if the current schedule is empty, he can't pass or prepare\n    # if the current schedule is not empty, he can prepare and pass a schedule\n    def is_ready(schedule):\n        if schedule[0] == schedule[1] and schedule[0] == schedule[2]:\n            return True\n        else:\n            return False\n    \n    def schedule_is_ready(schedule):\n        for i in range(3):\n            if schedule[i] == schedule[i+1]:\n                return True\n        return False\n    \n    def schedule_can_prepare(schedule):\n        for i in range(3):\n            if schedule[i] > schedule[i+1]:\n                return True\n        return False\n    \n    # checking if Petya can prepare any schedule\n    def check_prepare(schedule):\n        for i in range(3):\n            if schedule[i] > schedule[i+1]:\n                return True\n        return False\n    \n    # checking if Petya can prepare any schedule\n    def check_prepare_all(schedule):\n        for i in range(len(schedule)):\n            for j in range(len(schedule)):\n                if schedule[i] > schedule[j]:\n                    return True\n        return False\n    \n    # checking if Petya can pass the schedule\n    def check_pass(schedule):\n        for i in range(len(schedule)):\n            if schedule[i] < schedule[i+1]:\n                return True\n        return False\n    \n    # if the current schedule is empty, then Petya can prepare and pass a schedule\n    def check_ready_and_prepare(schedule):\n        if schedule[0] == schedule[1] and schedule[0] == schedule[2]:\n            return True\n        else:\n            return False\n    \n    def is_already_passed(schedule):\n        for i in range(len(schedule)):\n            if schedule[i] < schedule[i+1]:\n                return True\n        return False\n    \n    # if the current schedule is not empty, then Petya can prepare and pass a schedule\n    def is_prepare_and_pass(schedule):\n        for i in range(len(schedule)):\n            if schedule[i] > schedule[i+1]:\n                return True\n        return False\n    \n    # checking if Petya can prepare an exam\n    def check_prepare_for_exam(schedule):\n        if not is_ready(schedule):\n            return True\n        el"
    },
    {
        "number": 4014,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, m = map(int, stdin.split())\n    if n == 0 and m == 0:\n        return '-1'\n    \n    ans = []\n    s = [0] * n\n    \n    for _ in range(m):\n        n, s = map(int, stdin.split())\n        ans.append(s)\n    \n    for i in range(n):\n        for j in range(i+1,n):\n            s[i] += ans[j]\n            \n    s.sort()\n    \n    if n > 2:\n        ans.sort(key = lambda x: x[0])\n    \n    for x in ans:\n        for i in range(n):\n            if x[i] < x[i+1]:\n                if i == 0:\n                    ans[i+1] = ans[i+1] + x[i]\n                else:\n                    ans[i] = x[i] + x[i+1]\n                break\n            \n    return str(sum(ans))\n"
    },
    {
        "number": 4014,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    answer = 0\n    for i in range(1, n+1):\n        temp = i\n        if temp <= m:\n            answer += 1\n            temp = n\n        else:\n            answer -= 1\n            temp = 1\n    print(answer)\n    return answer\n\ndef"
    },
    {
        "number": 4014,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n, m = map(int, stdin[0].split())\n    schedule = list(map(int, stdin[1].split()))\n    answer = 0\n    while True:\n        if len(schedule) == 0:\n            answer += 1\n            break\n        else:\n            schedule.sort()\n            day = schedule.pop(0)\n            schedule.append(0)\n            if day == 0:\n                break\n            answer += len(schedule)\n            for j in range(len(schedule)):\n                schedule[j] -= 1\n                if schedule[j] == 0:\n                    schedule.pop(j)\n    print(answer)"
    },
    {
        "number": 4014,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if (n > m): return -1\n    # print(n, m)\n    if n == m:\n        return (n + 1)\n    elif m == 0:\n        return 0\n    elif n == 0:\n        return 1\n    else:\n        s1, d1, c1 = map(int, stdin.split())\n        s2, d2, c2 = map(int, stdin.split())\n        if (s1 >= s2 and d1 >= d2) or (s1 >= d1 and d2 >= d1) or (s2 >= d2 and d1 >= d2):\n            return 1\n        else:\n            return -1\n\ndef"
    },
    {
        "number": 4014,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    schedule = []\n    answer = []\n    for _ in range(n):\n        start = int(stdin.split()[0])\n        end = int(stdin.split()[1])\n        schedule.append(start)\n        schedule.append(end)\n        answer.append(start + end)\n    answer.sort()\n    for i in range(m):\n        schedule[i], answer[i] = answer[i], schedule[i]\n    return str(answer[0]) if answer[0]!= answer[1] else '-'\n\n----------------------------------------------------------------------------------------------------------------------\n-----Input-----\n\nThe first line contains two integers $n$ and $m$ $(2 \\le n \\le 100, 1 \\le m \\le n)$ \u2014 the number of days and the number of exams.\n\nEach of the following $m$ lines contains three integers $s_i$, $d_i$, $c_i$ $(1 \\le s_i < d_i \\le n, 1 \\le c_i \\le n)$ \u2014 the day, when questions for the $i$-th exam will be given, the day of the $i$-th exam, number of days Petya needs to prepare for the $i$-th exam. \n\nGuaranteed, that all the exams will be in different days. Questions for different exams can be given in the same day. It is possible that, in the day of some exam, the questions for other exams are given.\n\n\n-----Output-----\n\nIf Petya can not prepare and pass all the exams, print -1. In case of positive answer, print $n$ integers, where the $j$-th number is:  $(m + 1)$, if the $j$-th day is a day of some exam (recall that in each day no more than one exam is conducted),  zero, if in the $j$-th day Petya will have a rest,  $i$ ($1 \\le i \\le m$), if Petya will prepare for the $i$-th exam in the day $j$ (the total number of days Petya prepares for each exam should be strictly equal to the number of days needed to prepare it).\n\nAssume that the exams are numbered in order of appearing in the input, starting from $1$.\n\nIf there are multiple schedules, print any of them.\n\n\n-----Examples-----\nInput\n5 2\n1 3 1\n1 5 1\n\nOutput\n1 2 3 0 3 \n\nInput\n3 2\n4 7 2\n1 10 3\n8 9 1\n\nOutput\n2 2 2 1 1 0 4 3 4 4 \n\n\n\n-----Note-----\n\nIn the first example Petya can, for example, prepare for exam $1$ in the first day, prepare for exam $2$ in the second day, pass exam $1$ in the third day, relax in the fourth day, and pass exam $2$ in the fifth day. So, he can prepare and pass all exams.\n\nIn the second example, there are three days and two exams. So, Petya can prepare in only one day (because in two other days he should pass exams). Then Petya can not prepare and pass all exams.\n\nIn the third example, there are three days and two exams. So, Petya can prepare in only one day (because in two other days he should pass exams). Then Petya can not prepare and pass all exams.\n\nIf there are multiple schedules, print any of them.\n\n\n-----Example 1-----\nInput:\n3 2\n1 3 1\n1 5 1\n\nOutput:\n1 2 3 0 3 \n\n-----Example 2-----\nInput:\n2 2\n1 4 1\n\nOutput:\n0 0 0 0 0 \n\n-----Example 3-----\nInput:\n4 4\n1 5 2\n\nOutput:\n0 0 0 0 0 \n\n-----Example 4-----\nInput:\n7 6\n2 3 8\n9 2 7\n\nOutput:\n0 0 0 0 0 \n\n-----------------------------\n\nInput:\n15\n6\n5 2 5 3 5 6 5 7 6 8 8 9 9 9 10 3 3 3 5 3 7 3 9 9 9 10\n\nOutput:\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"
    },
    {
        "number": 4014,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    s, d = map(int, stdin.split())\n    c, *p = map(int, stdin.split())\n    \n    if s + d + c == n * m:\n        return str(n)\n    elif s + d + c == n * (m + 1):\n        return str(n + 1)\n    else:\n        if p == 1:\n            return str(n)\n        elif p == 2:\n            if d + c > n:\n                return str(n)\n            else:\n                return str(n + 1)\n        elif p == 3:\n            return str(n + 1)\n        elif p == 4:\n            return str(n + 2)\n    \n    \ndef"
    },
    {
        "number": 4015,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n < m:\n        m, n = n, m\n    elif n == m:\n        pass\n    else:\n        pass\n    return f'{n * (n + 1) // 2}'\n\n\n\ndef"
    },
    {
        "number": 4015,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\nimport math\n\ndef"
    },
    {
        "number": 4015,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    from math import factorial as fact\n    n,m=map(int,stdin.split())\n    if n*m==fact(n+m):\n        print(0)\n    else:\n        if n==0:\n            print(-1)\n        else:\n            print(fact(n)/fact(n-m+2)/fact(n-m+3)/fact(n-m+4)/fact(n-m+5)/fact(n-m+6)/fact(n-m+7)/fact(n-m+8)/fact(n-m+9)/fact(n-m+10)/fact(n-m+11))"
    },
    {
        "number": 4015,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin) * 2)\n\ndef"
    },
    {
        "number": 4015,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n > m:\n        return -1\n    if n == m:\n        return 0\n    l = [i for i in range(1, n + 1)]\n    r = [i for i in range(n - 1, 0, -1)]\n    possible_moves = r + l\n    if sum(possible_moves) == n:\n        return 0\n    for move in possible_moves:\n        if sum(range(move, n + 1)) == m:\n            return move\n    return -1\n\nThe solution for the first example is $49$:\n\nInput\n120 51840\n\nOutput\n7\n\nInput\n42 42\n\nOutput\n0\n\nInput\n48 72\n\nOutput\n-1\n\n------The second solution-------\n\nIn the first example, the possible sequence of moves is: $120 \\rightarrow 240 \\rightarrow 720 \\rightarrow 1440 \\rightarrow 4320 \\rightarrow 12960 \\rightarrow 25920 \\rightarrow 51840.$ The are $7$ steps in total.\n\nIn the second example, no moves are needed. Thus, the answer is $0$.\n\nIn the third example, it is impossible to transform $48$ to $72$.\n\n------The third solution-------\n\nIn the first example, the possible sequence of moves is: $120 \\rightarrow 240 \\rightarrow 720 \\rightarrow 1440 \\rightarrow 4320 \\rightarrow 12960 \\rightarrow 25920 \\rightarrow 51840.$ The are $7$ steps in total.\n\nIn the second example, no moves are needed. Thus, the answer is $0$.\n\nIn the third example, it is impossible to transform $48$ to $72$.\n\n------The solution for the first example is $49$:\n\nInput\n120 51840\n\nOutput\n7\n\nInput\n42 42\n\nOutput\n0\n\n------The solution for the first example is $49$:\n\nInput\n120 51840\n\nOutput\n7\n\nInput\n42 42\n\nOutput\n0\n\n------The solution for the first example is $49$:\n\nInput\n120 51840\n\nOutput\n7\n\nInput\n48 72\n\nOutput\n-1\n\n\n\n------The second solution-------\n\nIn the first example, the possible sequence of moves is: $120 \\rightarrow 240 \\rightarrow 720 \\rightarrow 1440 \\rightarrow 4320 \\rightarrow 12960 \\rightarrow 25920 \\rightarrow 51840.$ The are $7$ steps in total.\n\nIn the second example, no moves are needed. Thus, the answer is $0$.\n\nIn the third example, it is impossible to transform $48$ to $72$.\n\n------The third solution-------\n\nIn the first example, the possible sequence of moves is: $120 \\rightarrow 240 \\rightarrow 720 \\rightarrow 1440 \\rightarrow 4320 \\rightarrow 12960 \\rightarrow 25920 \\rightarrow 51840.$ The are $7$ steps in total.\n\nIn the second example, no moves are needed. Thus, the answer is $0$.\n\nIn the third example, it is impossible to transform $48$ to $72$.\n\n------The solution for the first example is $49$:\n\nInput\n120 51840\n\nOutput\n7\n\nInput\n42 42\n\nOutput\n0\n\n------The solution for the first example is $49$:\n\nInput\n120 51840\n\nOutput\n7\n\nInput\n48 72\n\nOutput\n-1\n\n------The second solution-------\n\nIn the first example, the possible sequence of moves is: $120 \\rightarrow 240 \\rightarrow 720 \\rightarrow 1440 \\rightarrow 4320 \\rightarrow 12960 \\rightarrow 25920 \\rightarrow 51840.$ The are $7$ steps in total.\n\nIn the second example, no moves are needed. Thus, the answer is $0$.\n\nIn the third example, it is impossible to transform $48$ to $72$.\n\n------The third solution-------\n\nIn the first example, the possible sequence of moves is: $120 \\rightarrow 240 \\rightarrow 720 \\rightarrow 1440 \\rightarrow 4320 \\rightarrow 12960 \\rightarrow 25920 \\rightarrow 51840.$ The are $7$ steps in total.\n\nIn the second example, no moves are needed. Thus, the answer is $0$.\n\nIn the third example, it is impossible to transform $48$ to $72$.\n\n------The solution for the first example is $49$:\n\nInput\n120 51840\n\nOutput\n7\n\nInput\n42 42\n\nOutput\n0\n\n------The solution for the first example is $49$:\n\nInput\n120 51840\n\nOutput\n7\n\nInput\n48 72\n\nOutput\n-1\n\n------The second solution-------\n\nIn the first example, the possible sequence of moves is: $120 \\rightarrow 240 \\rightarrow 720 \\rightarrow 1440 \\rightarrow 4320 \\rightarrow 12960 \\rightarrow 25920 \\rightarrow 51840.$ The are $7$ steps in total.\n\nIn the second example, no moves are needed. Thus, the answer is $0$.\n\nIn the third example, it is impossible to transform $48$ to $72$.\n\n------The third solution-------\n\nIn the first example, the possible sequence of moves is: $120 \\rightarrow 240 \\rightarrow 720 \\rightarrow 1440 \\rightarrow 4320 \\rightarrow 12960 \\rightarrow 25920 \\rightarrow 51840.$ The are $7$ steps in total.\n\nIn the second example, no moves are needed. Thus, the answer is $0$.\n\nIn the third example, it is impossible to transform $48$ to $72$.\n\n------The solution for the first example is $49$:\n\nInput\n120 51840\n\nOutput\n7\n\nInput\n42 42\n\nOutput\n0\n\n------The solution for the first example is $49$:\n\nInput\n120 51840\n\nOutput\n7\n\nInput\n48 72\n\nOutput\n-1\n\n------The second solution-------\n\nIn the first example, the possible sequence of moves is: $120 \\rightarrow 240 \\rightarrow 720 \\rightarrow 1440 \\rightarrow 4320 \\rightarrow 12960 \\rightarrow 25920 \\rightarrow 51840.$ The are $7$ steps in total.\n\nIn the second example, no moves are needed. Thus, the answer is $0$.\n\nIn the third example, it is impossible to transform $48$ to $72$.\n\n------The third solution-------\n\nIn the first example, the possible sequence of moves is: $120 \\rightarrow 240 \\rightarrow 720 \\rightarrow 1440 \\rightarrow 4320 \\rightarrow 12960 \\rightarrow 25920 \\rightarrow 51840.$ The are $7$ steps in total.\n\nIn the second example, no moves are needed. Thus, the answer is $0$.\n\nIn the third example, it is impossible to transform $48$ to $72$.\n\n------The solution for the first example is $49$:\n\nInput\n120 51840\n\nOutput\n7\n\nInput\n42 42\n\nOutput\n0\n\n------The solution for the first example is $49$:\n\nInput\n120 51840\n\nOutput\n7\n\nInput\n48 72\n\nOutput\n-1\n\n------The second solution-------\n\nIn the first example, the possible sequence of moves is: $120 \\rightarrow 240 \\rightarrow"
    },
    {
        "number": 4015,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin))\n"
    },
    {
        "number": 4015,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    m = int(stdin.strip())\n    if n < 0 or m < 0:\n        return -1\n    if n == 0 or m == 0:\n        return 0\n    curr = 1\n    moves = 0\n    \n    while curr <= m:\n        n -= 1\n        curr = (curr + n * curr) % m\n        moves += 1\n    return moves\n\n\n-----Example-----\n\nInput\n120 51840\n\nOutput\n7\n\nInput\n42 42\n\nOutput\n0\n\nInput\n48 72\n\nOutput\n-1\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= m <= 10^8\n\n-----Submissions-----\nYes\nYes\nYes\n\n-----Devs-----\nCollins\nCollins\nCollins\n\n-----Tests-----\nYes\nYes\nYes\n\nYes\n\"\"\""
    },
    {
        "number": 4015,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n------------------\nInput:\na: 120\nb: 42\n\nOutput:\nb: 12\n\nInput:\na: 48\nb: 72\n\nOutput:\n-1\n\n\nInput:\na: 100\nb: 144\n\nOutput:\n7\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4015,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    \n    def check(n,m):\n        def dfs(n,m,visit):\n            if n == m == 1:\n                return 0\n            if visit[n] == visit[m] == 0:\n                return 0\n            visit[n] = 1\n            visit[m] = 1\n            moves = 1\n            for i in range(1, n+1):\n                if visit[i] == 0:\n                    moves += dfs(i, m, visit)\n                else:\n                    moves += dfs(i, m, visit)\n            return moves\n        return dfs(n, m, [0 for i in range(n+1)])\n    \n    answer = check(n, m)\n    if answer == -1:\n        return \"1\"\n    if answer == 0:\n        return \"0\"\n    \n    return str(answer)\n"
    },
    {
        "number": 4015,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    answer = 0\n    for _ in range(int(stdin)):\n        n, m = map(int, stdin.split())\n        answer = max(answer, n * m)\n    return str(answer)\n\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= m <= 10^8\n0 <= stdin.length <= 105\n\n\n-----Time complexity-----\nO(n + m)\n\n\n-----Space complexity-----\nO(n + m)\n\n\n'''\nimport math\n\ndef"
    },
    {
        "number": 4016,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, k = map(int, stdin.split())\n    t = stdin.split()\n    \n    def check(i, t):\n        return str(i) in t\n    \n    if n!= len(t):\n        return None\n    \n    def find(s, l, r):\n        if r - l == 0:\n            return 0\n        \n        mid = l + r // 2\n        if t[mid] == t[i]:\n            return 1 + find(s, mid+1, r)\n        \n        elif check(i, t):\n            return 2 + find(s, l, mid)\n        \n        else:\n            return 2 + find(s, l, mid)\n    \n    if k >= len(t):\n        return None\n    \n    return''.join(sorted(map(str, sorted(map(int, t[:k])) + map(str, sorted(map(int, t[k:]))))[:k]))\n"
    },
    {
        "number": 4016,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    k = int(stdin.split()[1])\n    t = list(stdin.split())\n    lst = [t[i] for i in range(n)]\n    t = \"\".join(lst)\n    l = len(t)\n    res = []\n    for i in range(l):\n        res.append(t[i:i+k])\n    return \"\".join(res)\n\n\n-----Examples-----\n1\n2\n3\n1\n3\n2\n3\n\n1\n2\n\n2\n2\n1\n3\n2\n3\n\n3\n2\n1\n3\n2\n1\n1\n\n2\n3\n\n3\n1\n\n2\n1\n2\n3\n\n2\n1\n\n2\n1\n\n3\n2\n\n3\n2\n3\n1\n2\n\n3\n2\n1\n2\n2\n3\n\n1\n1\n\n2\n2\n2\n\n2\n2\n1\n2\n\n2\n1\n2\n3\n2\n3\n\n2\n1\n2\n2\n\n2\n1\n2\n3\n2\n\n3\n2\n1\n\n2\n2\n1\n2\n\n2\n3\n2\n\n2\n1\n2\n2\n3\n\n2\n1\n2\n2\n3\n\n1\n2\n2\n2\n\n2\n1\n2\n3\n\n2\n1\n2\n2\n2\n2\n\n3\n2\n2\n1\n2\n\n2\n1\n2\n1\n\n3\n2\n2\n2\n2\n\n2\n2\n\n3\n2\n\n2\n1\n2\n\n2\n1\n2\n2\n\n3\n2\n1\n2\n2\n\n3\n2\n2\n2\n\n2\n1\n2\n2\n2\n\n1\n1\n2\n2\n\n1\n2\n2\n2\n2\n\n1\n2\n2\n2\n2\n\n2\n2\n2\n\n2\n2\n2\n2\n\n3\n2\n\n2\n2\n2\n\n3\n2\n1\n2\n2\n2\n\n2\n2\n2\n\n2\n1\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n\n2\n2\n2\n2\n\n2\n2\n\n2\n2\n\n2\n2\n\n2\n2\n\n2\n2\n\n2\n1\n2\n1\n2\n\n2\n\n2\n\n2\n1\n2\n2\n1\n\n2\n2\n2\n\n3\n2\n\n2\n2\n2\n2\n2\n\n3\n1\n1\n2\n2\n\n2\n2\n1\n2\n1\n\n2\n2\n2\n2\n\n3\n2\n2\n1\n2\n\n2\n2\n2\n2\n\n2\n2\n2\n\n3\n2\n\n2\n2\n2\n2\n2\n\n2\n1\n2\n2\n2\n\n2\n1\n2\n2\n2\n\n2\n2\n\n2\n2\n\n2\n2\n2\n\n2\n2\n\n2\n2\n\n2\n2\n\n2\n\n2\n\n2\n\n2\n2\n\n2\n1\n2\n\n1\n2\n2\n\n2\n\n2\n\n2\n2\n2\n\n3\n2\n2\n2\n2\n\n3\n2\n\n1\n2\n\n2\n2\n2\n\n2\n2\n\n3\n2\n2\n2\n\n2\n2\n\n2\n2\n\n2\n2\n\n2\n1\n2\n2\n\n2\n\n2\n2\n\n2\n\n2\n\n2\n2\n\n2\n2\n\n2\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n2\n\n2\n\n2\n2\n\n2\n2\n\n2\n2\n\n2\n2\n\n2\n2\n\n2\n2\n\n2\n2\n\n2\n2\n\n2\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2\n\n2"
    },
    {
        "number": 4016,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = [s for s in stdin.split()]\n    st = set(s)\n    l = len(s)\n    l_max = l\n    if k < len(s):\n        for i in range(k):\n            l_max = min(l_max, l - i)\n        for i in range(l_max):\n            st.remove(s[i])\n    else:\n        for i in range(l - k):\n            st.remove(s[i])\n    print(*st)\n    return \"\".join(st)\n"
    },
    {
        "number": 4016,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.split()\n    m = len(s[0])\n    t = int(n*m/k)\n    numbers = list(range(n*m))\n    for i in range(n*m//k):\n        if s[i//m][i%m]!= t:\n            print('No')\n            return 'No'\n    for i in range(n*m//k):\n        if s[i//m][i%m] == t:\n            numbers[i//m] -= 1\n            if numbers[i//m] == 0:\n                numbers[i//m] += 1\n    return 'Yes' if numbers[0] == 0 else 'No'\n\n-----Constraints-----\n1 <= n <= 10^4\n1 <= k <= 10^4\n1 <= stdin.length <= 10^4\n\n-----Time Limit-----\nO(n^2*(m+1))\n\nn: length of string, m: length of substring, k: minimum possible length of substring\n\nn: length of string, m: length of substring, k: minimum possible length of substring\n\nn: length of string, m: length of substring, k: minimum possible length of substring\n\n\n-----Submissions-----\n2029\n\n-----Constraints-----\n0 <= n <= 100\n0 <= k <= 10^5\n0 <= stdin.length <= 10^5\n\n----Good candidate solution: ---\nn = int(input())\nm = int(input())\nk = int(input())\ns = input()\nprint(solution(s))\n"
    },
    {
        "number": 4016,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.strip())\n    l = int(stdin.strip().split(' ')[0])\n    t = stdin.strip().split(' ')[1]\n    count = k\n\n    if k == 0:\n        return t\n\n    s = list(t)\n    p = 1\n\n    while len(s) < l:\n        p = p * 2\n        s = s + s + s + s\n\n    for i in range(len(s)):\n        if len(s[i:]) == p:\n            count -= 1\n\n    return s[:l - count] + t\n"
    },
    {
        "number": 4016,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    t = \"\".join(stdin.split())\n    ans = \"\"\n    for i in range(len(t)):\n        for j in range(i + 1, min(i + k, len(t))):\n            ans += t[i:j]\n    return ans\n\nprint(solution(input()))\n"
    },
    {
        "number": 4016,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, k = map(int, stdin.split())\n    \n    ans = []\n    \n    for _ in range(n):\n        ans.append(stdin[:])\n        ans.append(stdin[n:])\n        \n    \n    \n    while k:\n        \n        i = 0\n        \n        while i + k <= n:\n            ans[i] += ans[i + k]\n            i += k\n            \n        k -= 1\n    \n    for i in ans:\n        print(i)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 4016,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n,k=list(map(int,stdin.split()))\n    l=list(map(int,stdin.split()))\n    s=list(map(str,stdin.split()))\n    l=list(set(l))\n    for i in range(n-1,-1,-1):\n        if s[i] not in l:\n            l.append(s[i])\n    solution=list()\n    for i in range(len(s)):\n        solution.append(s[i:i+k])\n    print(*solution)\n\n-----Constraints-----\n1 <= n <= 100\n1 <= k <= 10^4\n1 <= stdin.length <= 10^5\n\n--- Nguyen Van Duc ---\n\n\n\ndef"
    },
    {
        "number": 4016,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    n, k = int(s[0]), int(s[1])\n    t = s[2]\n    if len(t) > n:\n        print(''.join(t[:n] + t[n+1:]) +'')\n        return ''.join(t[:n] + t[n+1:]) +''\n    else:\n        print(t +'')\n        return t +''\n\n\n-----Constraints-----\n\n1 <= n <= 100\n1 <= k <= n\n0 <= t <= 10^9\n\n-----Time Limit-----\n\nO(n log n)\n\nO(n)\n\n-----Space Limit-----\n\nO(n)\n\nExample 1:\n\nInput\n3 4\naba\n\nOutput\nababababa\n\nExample 2:\n\nInput\n2 2\naa\n\nOutput\naaab\n\nExplanation\n\nThe best way is to check whether t is a substring of s.\n\nExample 3:\n\nInput\n1 1\nab\n\nOutput\n'ab'\n\nExample 4:\n\nInput\n1 3\na\n\nOutput\n'a'\n\nExample 5:\n\nInput\n1 1\nba\n\nOutput\n'ba'\n\n\n-----Constraints-----\n\n0 <= n <= 10^5\n0 <= k <= n\n0 <= t <= 10^9\n\n'''\n\nimport math\n\n\nclass Solution:\n    def minSubstring(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n        if len(s) + len(t) < len(s) + len(t):\n            return \"UNSATISFIABLE\"\n        elif len(s) == len(t) == 0:\n            return t\n        elif len(s) == 0:\n            return \"?\"\n        elif len(s) == 0:\n            return \"?\"\n        elif len(s) == 0:\n            return \"?\"\n\n        counter = Counter(t)\n\n        n = len(s)\n        prefix = []\n\n        start = 0\n        end = n - 1\n\n        while start <= end:\n            if s[start] not in counter:\n                start += 1\n            elif s[start] in counter:\n                counter[s[start]] -= 1\n                start += 1\n            if counter[s[start]] == 0:\n                del counter[s[start]]\n            elif counter[s[start]] > 0:\n                counter[s[start]] -= 1\n                end -= 1\n\n        while end >= 0:\n            if s[end] not in counter:\n                end -= 1\n            elif s[end] in counter:\n                counter[s[end]] -= 1\n                end -= 1\n            if counter[s[end]] == 0:\n                del counter[s[end]]\n            elif counter[s[end]] > 0:\n                counter[s[end]] -= 1\n                end -= 1\n        for char in t:\n            if char not in counter:\n                return \"?\"\n\n        return t\n"
    },
    {
        "number": 4016,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    N, K = map(int, stdin.split())\n    t = list(stdin.split())\n    t = t[::-1]\n    q = deque()\n    for i in range(len(t)):\n        if q:\n            q.popleft()\n        else:\n            q.append(t[i])\n        if len(q) >= K:\n            if q[0] == t[i]:\n                q.popleft()\n            else:\n                q.append(t[i])\n    print(len(set(q)))\n    return ''.join(q)\n\n-----Constraints-----\n1 <= n <= 100\n1 <= k <= n\n1 <= stdin.length <= 20\nstdin.length <= n * 10^4\nstdin.length <= n * 10^4\n\n------Time complexity-------\nO(n)\n\nO(n log k)\n\nn^k\n\nn^(k-1)\n\nO(n)\n\n------Space complexity-------\nO(1)\n\n\"\"\"\ndef"
    },
    {
        "number": 4017,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    arr = [int(i) for i in stdin.split()]\n    print(sum(arr)-sum(arr[::-1]))\n    print(arr[arr.index(max(arr))])"
    },
    {
        "number": 4017,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    print(len(a) % n)\n    return str(len(a) % n)\n\n\ndef"
    },
    {
        "number": 4017,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip().split(' ')[1].strip())\n    a = [int(i) for i in stdin.split(' ')[2:]]\n    k = 0\n    j = 0\n    while True:\n        if k == len(a):\n            j = 0\n            break\n        if a[k] == 2:\n            j += 1\n            k += 1\n        elif a[k] == 8:\n            k += 1\n        elif a[k] == 1:\n            j += 1\n        else:\n            k += 1\n    if j == 0:\n        return '0'\n    elif j == 1:\n        return '1' * (n-1)\n    else:\n        return '1' * j + '2' * (n-j-1)\n\n\nn = int(input())\na = [int(i) for i in input().split(' ')]\n\nprint(solution(n))\n"
    },
    {
        "number": 4017,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    stdin = stdin.replace(' ', '')\n    n = len(stdin)\n    answer = 0\n    for i in range(n):\n        for j in range(n-i-1):\n            if stdin[j] == stdin[j+1]:\n                answer += 1\n    return answer\n\nprint(solution(input()))"
    },
    {
        "number": 4017,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n  return \"\"\n'''\n"
    },
    {
        "number": 4017,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a = sorted(a)\n    k = 0\n    print(0)\n    while a[k]!= a[k-1]:\n        k += 1\n    k = k - 1\n    print(k)\n    while a[k] == a[k-1]:\n        k -= 1\n    if a[k-1] < a[k]:\n        print(k)\n    else:\n        print(k+1)\n    return str(k+1)\n\nInput\n5\n2 5 1 2 2\n\nOutput\n2\n1 4 \n'''\n\na = list(map(int, input().split()))\nprint(a[0])\nprint(a[1])\nprint(a[2])\n"
    },
    {
        "number": 4017,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    a = sorted(list(set(a)))\n    answer = 0\n    for i in range(n-1):\n        j = a.index(a[i+1])\n        if a[i+1] < a[i] + j:\n            answer += 1\n    return str(answer)\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= a[i] <= 10^5\n\n2\n1 2 2\n\nInput\n\n10\n10 10 10 10 10\n\nOutput\n\n0\n\n\n-----Time complexity-----\n\nO(n) in the first case.\nO(n) in the second case.\nO(n^3) in the third case.\n\nO(n^2) in the fourth case.\nO(n^2) in the fifth case.\n\n\n-----Space complexity-----\n\nO(n) in the first case.\nO(n) in the second case.\nO(n) in the third case.\nO(n) in the fourth case.\nO(n^3) in the fifth case.\n"
    },
    {
        "number": 4017,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    a = list(map(int, stdin.split()))\n    n = len(a)\n    \n    left, right = 0, n-1\n    result = []\n    \n    while left <= right:\n        if a[left] + a[right] == 0:\n            result.append(left)\n            result.append(right)\n            left += 1\n            right -= 1\n            continue\n        \n        mid = (left + right)//2\n        if a[mid] == a[left]:\n            result.append(mid)\n            right = mid - 1\n        else:\n            result.append(mid)\n            left = mid + 1\n    \n    for i in result:\n        print(i)\n    \n    return \" \".join(map(str, result))\n\n-----Constraints-----\n\n1 <= n <= 10^4\n0 <= a[i] <= 10^6\n\n'''\ndef"
    },
    {
        "number": 4017,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin)\n    answer = 0\n    for i,j in enumerate(a):\n        if a[i] % 2!= 0:\n            answer += (a[i] // 2)\n            \n    return str(answer)\n\n\n\n\n\ndef"
    },
    {
        "number": 4017,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a!= b:\n        a, b = b, a\n    a = list(map(int, str(a)))\n    # print(a)\n    # print(b)\n    if a == b:\n        return 0\n    if len(a) == 1:\n        a.insert(0, 0)\n    if len(a) == 2:\n        a.insert(0, 0)\n        a.insert(1, 1)\n    if len(a) == 3:\n        a.insert(1, 1)\n    # print(a)\n    # print(b)\n    good = [0] * (len(a) + 1)\n    for j in range(len(a)):\n        good[j] = a[j]\n        for i in range(j):\n            good[j] += a[i]\n    # print(good)\n    # print(a)\n    j = 0\n    while j < len(a):\n        # print(j, a[j])\n        # print(a)\n        # print(b)\n        if b - a[j] < good[j+1]:\n            # print(a,b)\n            break\n        else:\n            j += 1\n    return j + 1"
    },
    {
        "number": 4018,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = list(stdin.strip().lower())\n    #print(s)\n    dp = [0] * n\n    for i in range(n):\n        for j in range(k):\n            #print(j)\n            if s[i] == s[j]:\n                dp[i] += 1\n    #print(dp)\n    #print(n)\n    if k == 1:\n        return \"0\"\n    else:\n        return str(k - dp[n-1])"
    },
    {
        "number": 4018,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.split()\n    print(s[0])\n    return\n\n\n-----Constraints-----\n\n1 <= n <= 100\n1 <= k <= 10^{12}\n\n\n-----Time Limit: 1 minute (53%)-----\n\ndef"
    },
    {
        "number": 4018,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.split()\n    s = set(s)\n    s = sorted(s)\n    if len(s) == k:\n        return -1\n    if len(s) > k:\n        return 0\n    return min(s)\n"
    },
    {
        "number": 4018,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    for _ in range(int(stdin)):\n        s = stdin.strip().split()\n        if len(s) == 2:\n            s[1] = s[1].split(\" \")\n        else:\n            s[0] = s[0].split(\" \")\n        k = len(s[0])\n        if len(s) == 2:\n            for s_i in range(len(s[0])):\n                if s[0][s_i] in S:\n                    S[s_i] += int(s[1][s_i])\n        else:\n            for s_i in range(len(s[0])):\n                if s[0][s_i] in S:\n                    S[s_i] += int(s[1][s_i])\n                else:\n                    S[s_i] = int(s[1][s_i])\n    min_s = min(S.values())\n    answer = [0, 0]\n    for i in range(len(S)):\n        answer[1] += min_s - S[i]\n        answer[0] += 1\n    if answer[0] == 0:\n        return -1\n    return answer[0]"
    },
    {
        "number": 4018,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.split()\n    if n > k:\n        print(-1)\n        return\n    if len(s)!= n:\n        print(-1)\n        return\n    d = {}\n    for i in range(n):\n        d[s[i]] = 0\n    for i in range(n):\n        for j in range(i, n):\n            if s[i] == s[j]:\n                d[s[i]] += 1\n    print(len(set(d.values()))-1)\n    return\n\n\n\n-----Code-----\ndef"
    },
    {
        "number": 4018,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = list(map(int, stdin.split()))\n    if k <= len(s):\n        return -1\n    S = set(s)\n    if k < len(S):\n        return -1\n    totalCost = 0\n    for i in range(len(s)):\n        totalCost += abs(S.index(s[i]) - i)\n    return totalCost\n"
    },
    {
        "number": 4018,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    string = stdin.split()\n    if not n <= len(string):\n        return -1\n    if not all(0 <= i <= n for i in string):\n        return -1\n    for i in range(k):\n        string[i] += string[i+k-1]\n    if \"\".join(string) not in S:\n        return -1\n    return len(string)\n"
    },
    {
        "number": 4018,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.split()\n    s = stdin\n    print(solution(n,s))\n    return \"\""
    },
    {
        "number": 4018,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    lst = []\n    \n    for i in range(n):\n        lst.append(list(stdin[i].lower()))\n    \n    if n % 2 == 0:\n        s = set(lst[n//2])\n    else:\n        s = set(lst[n//2]+lst[n//2+1])\n        \n    s = list(s)\n    s.sort()\n    \n    for i in s:\n        cost = 0\n        \n        for j in range(n):\n            if i == lst[j]:\n                cost += 1\n        \n        if k > cost:\n            return -1\n    \n    return cost\n\n-----Constraints-----\n\n0 \u2264 n \u2264 10^6\n0 \u2264 k \u2264 10^12\n\nExamples\n\nInput 1\n\nasdf\n\nOutput 1\n\n0\n\nExplanation\n\nThere are two examples, one with $S = { \"asdf\", \"asd\", \"adf\", \"asf\", \"sdf\" } and the other one with $S = { \"a\", \"aa\", \"aa\", \"aaa\", \"aaa\" }\n\nExample 2\n\nInput 2\n\naaaaa\n\nOutput 2\n\n-1\n\nExplanation\n\nThere are two examples, one with $S = { \"aaaaa\", \"aaaaa\", \"aaaaa\", \"aaaaa\" } and the other one with $S = { \"aaaaa\", \"aaaaa\", \"aaaaa\", \"aaaaa\" }\n\nExample 3\n\nInput 3\n\nasdasd\n\nOutput 3\n\n-1\n\nExplanation\n\nThere are two examples, one with $S = { \"asdasd\", \"asdasd\", \"asdasd\", \"asdasd\" } and the other one with $S = { \"aaaaasd\", \"aaaaasd\", \"aaaaasd\", \"aaaaasd\" }\n\nExample 4\n\nInput 4\n\naaaaa\n\nOutput 4\n\n233\n\nExplanation\n\nThere are three examples, one with $S = { \"aaaaa\", \"aa\", \"aa\", \"aaa\", \"aaa\" } and the other one with $S = { \"a\", \"aa\", \"aa\", \"aaa\", \"aaa\" }\n\nExample 5\n\nInput 5\n\najihiushda\n\nOutput 5\n\n233\n\n\n-----Constraints-----\n\n0 \u2264 n \u2264 10^6\n0 \u2264 k \u2264 10^12\n\n\"\"\"\n\nimport math\n\n\nclass Solution:\n    def findMinCost(self, n, s, k):\n        \"\"\"\n        :type n: int\n        :type s: str\n        :type k: int\n        :rtype: int\n        \"\"\"\n        sum = 0\n        min = math.inf\n\n        for i in range(len(s)):\n            if k == 0:\n                return sum\n            if len(s[i]) >= k:\n                sum = sum + len(s[i])\n                k -= len(s[i])\n            else:\n                sum = sum + k\n\n        return sum\n"
    },
    {
        "number": 4018,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split(' ')\n    n = int(s[0])\n    k = int(s[1])\n\n    c = 0\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if len(set(s[i].lower()).intersection(set(s[j].lower())))!= len(set(s[j].lower()).intersection(set(s[i].lower()))):\n                c += 1\n    print(c)\n    return str(c)\n\n-----Constraints-----\n\n1 <= n, k <= 10^5\n\n-----Time Limit-----\n\nTime Limit: 1 sec\n\n\n-----Example 1-----\n\nInput\n5\nasd\nasdf\naaaaa\n\nOutput\n2\n\nInput\n4\nasdf\nasdf\naaaaa\naaaaa\n\nOutput\n-1\n\nInput\n5 7\naaaaa\naaaaa\naaaaa\naaaaa\naaaaa\n\nOutput\n15\n\nExample 2\n\nInput\n6\nasdf\nasdf\nasdf\nasdf\nasdf\nasdf\n\nOutput\n-1\n\nInput\n5\nasd\nasdf\nasd\nasd\nasd\nasd\nasd\n\nOutput\n19\n\nExample 3\n\nInput\n3\nasd\nasd\nasd\nasd\nasd\n\nOutput\n-1\n\nInput\n3\naasdf\nasd\nasd\nasd\nasd\nasd\nasd\nasd\n\nOutput\n25\n\nExample 4\n\nInput\n3\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd\nasd"
    },
    {
        "number": 4019,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    m = int(stdin.split(\"\\n\")[1])\n    numbers = [int(stdin[i:i+2]) for i in range(0, n, 2)]\n    edges = [[int(stdin[i:i+2])-1, int(stdin[i+1:i+3])-1] for i in range(0, m, 2)]\n    first_vertex = numbers[0]\n    d = numbers[1]\n    def check(number, edge):\n        if d == 0 and number == 1:\n            return False\n        elif d == 0 and number > 1:\n            return True\n        elif d == number:\n            return True\n        else:\n            return False\n    def find_vertex(first_vertex, edge):\n        for i in range(first_vertex, first_vertex+len(edges)):\n            if check(i, edge):\n                return i\n        return -1\n    def find_vertex_pair(first_vertex, edge):\n        edges.sort(key=lambda x:x[1])\n        for i in range(first_vertex, first_vertex+len(edges)):\n            if check(i, edge):\n                return i, edges[i][0]\n        return -1\n    def find_min_degree(edge):\n        s = 0\n        for i in range(edge[0], edge[1]+1):\n            if i == edge[0]:\n                continue\n            if s == 0:\n                s += i\n            else:\n                if s < i:\n                    s = i\n        return s\n    def find_max_degree(edge):\n        s = 0\n        for i in range(edge[1], edge[0]+1):\n            if i == edge[0]:\n                continue\n            if s == 0:\n                s += i\n            else:\n                if s > i:\n                    s = i\n        return s\n    def check_subset(edge_pair):\n        return True if edge_pair[0] <= edge_pair[1] else False\n    for i in range(n-1):\n        print(find_vertex(n-1, edges[i]), find_vertex_pair(n-1, edges[i]), find_vertex(n-1, edges[i]), find_vertex_pair(n-1, edges[i]), check(n-1, edges[i]), check_subset(edges[i]), find_min_degree(edges[i]), find_max_degree(edges[i]), sep=\"\\t\", end=\"\\n\")\n"
    },
    {
        "number": 4019,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = map(int, stdin.split())\n    deg = {}\n    for edge in edges:\n        if edge not in deg:\n            deg[edge] = 1\n        else:\n            deg[edge] += 1\n    answer = \"\"\n    for vertex in range(n):\n        if deg[vertex] == 1:\n            answer += \"YES\"\n            answer += str(vertex)\n            answer += \" \"\n        elif deg[vertex] > 1:\n            answer += \"NO\"\n            answer += str(vertex)\n            answer += \" \"\n    return answer\n\ndef"
    },
    {
        "number": 4019,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = []\n    for _ in range(m):\n        v, u = map(int, stdin.split())\n        edges.append((v, u))\n    visited = [False] * n\n    def dfs(v):\n        visited[v] = True\n        for u in range(n):\n            if not visited[u] and dfs(u) == 1:\n                return 1\n        return 0\n    return 'YES' if 1 in visited else 'NO' if dfs(0) == 1 else 'NO'\n"
    },
    {
        "number": 4019,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, D = list(map(int, stdin.split()))\n    edges = []\n    for _ in range(m):\n        v1, v2, weight = map(int, stdin.split())\n        edges.append((v1, v2, weight))\n    return 'YES' if find_spanning_tree(edges, D) == 'NO' else 'NO'\n\ndef"
    },
    {
        "number": 4019,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    vertices, edges = map(int, stdin.split())\n    global n\n    n = vertices\n    global m\n    m = edges\n    return solution_main(n, m)\n\n\ndef"
    },
    {
        "number": 4019,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    D, n, m = map(int, stdin.split())\n    edges = [tuple(map(int, stdin.split())) for i in range(m)]\n    \n    ans = []\n    for u, v in edges:\n        if u == v:\n            ans.append(u)\n        elif u == v + 1:\n            ans.append(v)\n        elif u == v - 1:\n            ans.append(v)\n        else:\n            if v > u:\n                ans.append(v)\n            else:\n                ans.append(u)\n    \n    if len(ans) == 0:\n        return \"NO\"\n    \n    return \"YES\" + \" \" * len(ans)\n\n\n-----Basic Tests-----\n(1)\nInput\n4 5 1\n1 2\n1 3\n1 4\n2 3\n3 4\n\nOutput\nYES\n2 1\n2 3\n3 4\n\n(2)\nInput\n4 4 3\n1 2\n1 3\n1 4\n2 3\n3 4\n\nOutput\nYES\n1 2\n1 3\n4 1\n\n(3)\nInput\n4 4 3\n1 2\n1 4\n2 3\n3 4\n\nOutput\nNO\n\n(4)\nInput\n4 4 3\n1 2\n1 4\n2 3\n3 4\n\nOutput\nNO\n(5)\nInput\n4 4 3\n1 2\n1 4\n2 3\n3 4\n\nOutput\nNO\n\n(6)\nInput\n4 4 3\n1 2\n1 4\n2 3\n3 4\n\nOutput\nNO\n(7)\nInput\n4 4 3\n1 2\n1 4\n2 3\n3 4\n\nOutput\nYES\n1 2\n1 4\n2 3\n3 4\n\n(8)\nInput\n4 4 3\n1 2\n1 4\n2 3\n3 4\n\nOutput\nNO\n(9)\nInput\n4 4 3\n1 2\n1 4\n2 3\n3 4\n\nOutput\nYES\n1 2\n1 4\n2 3\n3 4\n\n(10)\nInput\n4 4 3\n1 2\n1 4\n2 3\n3 4\n\nOutput\nYES\n1 2\n1 4\n2 3\n3 4\n\n(11)\nInput\n4 4 3\n1 2\n1 4\n2 3\n3 4\n\nOutput\nNO\n(12)\nInput\n4 4 3\n1 2\n1 4\n2 3\n3 4\n\nOutput\nNO\n(13)\nInput\n4 4 3\n1 2\n1 4\n2 3\n3 4\n\nOutput\nYES\n1 2\n1 4\n2 3\n3 4\n\n(14)\nInput\n4 4 3\n1 2\n1 4\n2 3\n3 4\n\nOutput\nYES\n1 2\n1 4\n2 3\n3 4\n\n(15)\nInput\n4 4 3\n1 2\n1 4\n2 3\n3 4\n\nOutput\nYES\n1 2\n1 4\n2 3\n3 4\n\n(16)\nInput\n4 4 3\n1 2\n1 4\n2 3\n3 4\n\nOutput\nNO\n(17)\nInput\n4 4 3\n1 2\n1 4\n2 3\n3 4\n\nOutput\nNO\n(18)\nInput\n4 4 3\n1 2\n1 4\n2 3\n3 4\n\nOutput\nYES\n1 2\n1 4\n2 3\n3 4\n\n(19)\nInput\n4 4 3\n1 2\n1 4\n2 3\n3 4\n\nOutput\nNO\n(20)\nInput\n4 4 3\n1 2\n1 4\n2 3\n3 4\n\nOutput\nYES\n1 2\n1 4\n2 3\n3 4\n\n(21)\nInput\n4 4 3\n1 2\n1 4\n2 3\n3 4\n\nOutput\nNO\n(22)\nInput\n4 4 3\n1 2\n1 4\n2 3\n3 4\n\nOutput\nYES\n1 2\n1 4\n2 3\n3 4\n\n(23)\nInput\n4 4 3\n1 2\n1 4\n2 3\n3 4\n\nOutput\nYES\n1 2\n1 4\n2 3\n3 4\n\n(24)\nInput\n4 4 3\n1 2\n1 4\n2 3\n3 4\n\nOutput\nYES\n1 2\n1 4\n2 3\n3 4\n\n(25)\nInput\n4 4 3\n1 2\n1 4\n2 3\n3 4\n\nOutput\nYES\n1 2\n1 4\n2 3\n3 4\n\n(26)\nInput\n4 4 3\n1 2\n1 4\n2 3\n3 4\n\nOutput\nNO\n(27)\nInput\n4 4 3\n1 2\n1 4\n2 3\n3 4\n\nOutput\nYES\n1 2\n1 4\n2 3\n3 4\n\n(28)\nInput\n4 4 3\n1 2\n1 4\n2 3\n3 4\n\nOutput\nYES\n1 2\n1 4\n2 3\n3 4\n\n(29)\nInput\n4 4 3\n1 2\n1 4\n2 3\n3 4\n\nOutput\nNO\n(30)\nInput\n4 4 3\n1 2\n1 4\n2 3\n3 4\n\nOutput\nYES\n1 2\n1 4\n2 3\n3 4\n\n(31)\nInput\n4 4 3\n1 2\n1 4\n2 3\n3 4\n\nOutput\nYES\n1 2\n1 4\n2 3\n3 4\n\n(32)\nInput\n4 4 3\n1 2\n1 4\n2 3\n3 4\n\nOutput\nNO\n(33)\nInput\n4 4 3\n1 2\n1 4\n2 3\n3 4\n\nOutput\nYES\n1 2\n1 4\n2 3\n3 4\n\n(34)\nInput\n4 4 3\n1 2\n1 4\n2 3\n3 4\n\nOutput\nYES\n1 2\n1 4\n2 3\n3 4\n\n(35)\nInput\n4 4 3\n1 2\n1 4\n2 3\n3 4\n\nOutput\nYES\n1 2\n1 4"
    },
    {
        "number": 4019,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, m = map(int, stdin.split())\n    \n    edges = list(map(int, stdin.split()))\n    \n    answer = \"\"\n    \n    #edge_label = [\n    #    (e[0], e[1] if e[0]!= e[1] else e[1])\n    #    for e in edges\n    #]\n    \n    #ans_list = []\n    \n    #answer = \"\"\n    \n    #for e in edge_label:\n    #    if e[0]!= e[1]:\n    #        answer += str(e[0]) + \" \"\n    #        answer += str(e[1]) + \" \"\n    #        ans_list.append(e[0])\n    #        ans_list.append(e[1])\n    #        answer += \"\\n\"\n    #        \n    #    if e[0] == e[1]:\n    #        answer += str(e[0]) + \" \"\n    #    if e[0] == e[2]:\n    #        answer += str(e[0]) + \" \"\n    #    if e[0] == e[3]:\n    #        answer += str(e[0]) + \" \"\n    #    if e[0] == e[4]:\n    #        answer += str(e[0]) + \" \"\n    #    if e[0] == e[5]:\n    #        answer += str(e[0]) + \" \"\n    #\n    #print(answer)\n    \n    \n    #  [Line] 1. take edges and form graph\n    #  [Line] 2. recurse\n    \n    graph = {\n        i: set() for i in range(n + 1)\n    }\n    \n    for e in edges:\n        graph[e[0]].add(e[1])\n        graph[e[1]].add(e[0])\n    \n    print(graph)\n    \n    \n    answer = \"\"\n    \n    #answer = \"\"\n    #\n    #for e in edges:\n    #    answer += str(e[0]) + \" \"\n    #    answer += str(e[1]) + \" \"\n    #    if e[0]!= e[1]:\n    #        answer += str(e[0]) + \" \"\n    #        answer += str(e[1]) + \" \"\n    #    else:\n    #        answer += str(e[0]) + \" \"\n    #        answer += str(e[1]) + \" \"\n    #    \n    #    if e[0] == e[1]:\n    #        answer += str(e[0]) + \" \"\n    #    if e[0] == e[2]:\n    #        answer += str(e[0]) + \" \"\n    #    if e[0] == e[3]:\n    #        answer += str(e[0]) + \" \"\n    #    if e[0] == e[4]:\n    #        answer += str(e[0]) + \" \"\n    #    if e[0] == e[5]:\n    #        answer += str(e[0]) + \" \"\n    #    \n    #    print(answer)\n    \n    #  [Line] 1. remove edges\n    #  [Line] 2. go through the graph\n    \n    #  [Line] 1. remove edges\n    #  [Line] 2. go through the graph\n    \n    for v in range(2, n + 1):\n        graph[v] = set()\n        for u in graph[v - 1]:\n            graph[u].add(v)\n            graph[v].add(u)\n            \n            if v!= u:\n                graph[v].remove(u)\n                graph[v].remove(u)\n    \n    #  [Line] 1. remove edges\n    #  [Line] 2. go through the graph\n    #\n    #  [Line] 1. remove edges\n    #  [Line] 2. go through the graph\n    \n    #  [Line] 1. remove edges\n    #  [Line] 2. go through the graph\n    \n    #  [Line] 1. remove edges\n    #  [Line] 2. go through the graph\n    \n    \n    #  [Line] 1. remove edges\n    #  [Line] 2. go through the graph\n    \n    #  [Line] 1. remove edges\n    #  [Line] 2. go through the graph\n    \n    #  [Line] 1. remove edges\n    #  [Line] 2. go through the graph\n    \n    #  [Line] 1. remove edges\n    #  [Line] 2. go through the graph\n    \n    \n    #  [Line] 1. remove edges\n    #  [Line] 2. go through the graph\n    #\n    #  [Line] 1. remove edges\n    #  [Line] 2. go through the graph\n    \n    #  [Line] 1. remove edges\n    #  [Line] 2. go through the graph\n    \n    #  [Line] 1. remove edges\n    #  [Line] 2. go through the graph\n    #\n    #  [Line] 1. remove edges\n    #  [Line] 2. go through the graph\n    #\n    #  [Line] 1. remove edges\n    #  [Line] 2. go through the graph\n    #\n    #  [Line] 1. remove edges\n    #  [Line] 2. go through the graph\n    #\n    #  [Line] 1. remove edges\n    #  [Line] 2. go through the graph\n    #\n    #  [Line] 1. remove edges\n    #  [Line] 2. go through the graph\n    #\n    #  [Line] 1. remove edges\n    #  [Line] 2. go through the graph\n    #\n    #  [Line] 1. remove edges\n"
    },
    {
        "number": 4019,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = map(int, stdin.split())\n\n    edges = []\n\n    for _ in range(m):\n        edges.append(tuple(map(int, stdin.split())))\n\n    def dfs(v, u):\n        if v == u:\n            return True\n        if v < u:\n            return False\n\n        if d[v] > d[u] + 1:\n            d[u] = d[v]\n            dfs(u, v)\n        return d[v] > d[u]\n\n    for i in range(n):\n        for v in range(n):\n            if dfs(v, i) == False:\n                return \"NO\"\n\n    for i in range(1, n-1):\n        for j in range(1, n-1):\n            for v in range(j+1, n):\n                if dfs(j, v) == True:\n                    edges.append(edges[j]+edges[v])\n\n    return \"YES\" if edges else \"NO\"\n\"\"\""
    },
    {
        "number": 4019,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # read\n    n, m, d = map(int, stdin.split())\n\n    # convert\n    edges = list(map(lambda x: (x[0] - 1, x[1]), list(map(lambda x: list(map(lambda y: y.strip(), x.split()))))) for x in stdin.splitlines())\n\n    # iterate\n    degree = dict()\n    for i in range(m):\n        degree[i + 1] = 0\n\n    for i in range(m):\n        for j in range(i + 1, m):\n            degree[edges[i][0] - 1] += edges[j][1]\n            degree[edges[j][0] - 1] += edges[i][1]\n\n    # check\n    if degree[1] == degree[2] or degree[3] == degree[4]:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n-----Basic Solution-----\n\ndef"
    },
    {
        "number": 4019,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4020,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split(\" \")\n    h = int(input[0].split(\":\")[0])\n    m = int(input[0].split(\":\")[1])\n    h_2 = int(input[1].split(\":\")[0])\n    m_2 = int(input[1].split(\":\")[1])\n    if (h + m) % 2 == 0:\n        if (h_2 - h) % 2 == 0:\n            return '{0:02d}:{0:02d}'.format((h_2 + h) // 60, (h_2 + h) % 60)\n        else:\n            return '{0:02d}:{0:02d}'.format(h_2 + h, h_2 - h)\n    else:\n        if (h_2 - h) % 2 == 0:\n            return '{0:02d}:{0:02d}'.format((h_2 + h) // 60, (h_2 + h) % 60)\n        else:\n            return '{0:02d}:{0:02d}'.format(h_2 + h, h_2 - h)\n        \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 4020,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    h_1, m_1 = map(int, stdin.split(\":\"))\n    h_2, m_2 = map(int, stdin.split(\":\"))\n    h_3 = (h_2 - h_1) * 60 + m_2 - m_1\n    print(h_3)\n    return '{:02d}:{:02d}'.format(h_3 // 60, h_3 % 60)\n\nprint(solution(\"01:02\"))\n"
    },
    {
        "number": 4020,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    answer = ''\n    \n    h_1, m_1 = map(int, stdin.split())\n    h_2, m_2 = map(int, stdin.split())\n    h_3 = (h_2 - h_1) * 60 + m_2 - m_1\n    m_3 = (m_2 - m_1) * 60\n\n    print(str(h_1)+':'+str(h_3))\n    print(str(m_1)+':'+str(m_2))\n    print(str(m_3)+':'+str(m_2))\n\n    return answer\n"
    },
    {
        "number": 4020,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    h_1, m_1 = map(int, stdin.split())\n    h_2, m_2 = map(int, stdin.split())\n    h_3 = (h_1 + h_2) // 2\n    m_3 = (m_1 + m_2) // 2\n    print(str(h_3) + \":\" + str(m_3))"
    },
    {
        "number": 4020,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    h_1, m_1 = map(int, stdin.split(' '))\n    h_2, m_2 = map(int, stdin.split(' '))\n    \n    h_3 = h_1 + h_2\n    m_3 = (m_1 + m_2) % 60\n    m_3 = m_3 if m_3 >= 0 else 0\n    m_3 = m_3 if m_3 <= 59 else 59\n    \n    return \":\".join(str(x) for x in [h_3, m_3])\n\"\"\"\n\ndef"
    },
    {
        "number": 4020,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4020,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s1, s2 = map(int, stdin.split())\n    m1, m2 = map(int, stdin.split())\n    h1, m1, h2, m2 = map(int, stdin.split())\n    if m1 >= m2:\n        h1 = h1 + (m1 - m2) // 60\n        m1 = m1 - m2 % 60\n    h3 = h1 + (h2 - h1) // (60*60)\n    m3 = m1 + (m2 - m1) // (60*60)\n    if m1 == m2:\n        if h3 >= h2:\n            h3 = h2 - h1\n        elif h3 == 0:\n            h3 = 1\n        else:\n            h3 += 1\n    return \":\".join([str(h3), str(m3)])\n\ndef"
    },
    {
        "number": 4020,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    h, m = stdin.split()\n    if int(h) < 0 or int(m) < 0:\n        return str(int(h) + int(m)) + \":00\"\n    else:\n        h += \":00\"\n        return h[:3] + \":\" + m + \":00\"\n\nprint(solution(input()))"
    },
    {
        "number": 4020,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    h1, h2, m1, m2, h3 = [int(i) for i in stdin.split(\":\")]\n    \n    if h1 < h2 and h1 < h3 and m1 < m2:\n        return \"{:02d}:{:02d}\".format(h1, m1)\n    elif h1 < h2 and m1 < m2:\n        return \"{:02d}:{:02d}\".format(h1, m1 + 60)\n    else:\n        return \"{:02d}:{:02d}\".format(h2, m2)"
    },
    {
        "number": 4020,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    contest = []\n    i = 0\n    while i < len(stdin):\n        j = 0\n        while j < len(stdin):\n            if i < j:\n                contest.append(int(stdin[i:j]))\n                j += 1\n            else:\n                j += 1\n        i += 1\n    contest.sort()\n    for x in contest:\n        x = int(x/60)\n        print(x, end=\" \")\n    print(\" \")\n    contest.reverse()\n    for x in contest:\n        x = int(x/60)\n        print(x, end=\" \")\n    print(\" \")\n    for x in contest:\n        x = int(x/60)\n        print(x, end=\" \")\n    print(\" \")\n    return \" \".join(str(x) for x in contest)\n"
    },
    {
        "number": 4021,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = 0\n    for i in range(len(stdin)):\n        if stdin[i].isdigit():\n            a = a * 10 + int(stdin[i])\n    print(a)\n    return str(a)\n'''\n\nimport sys\n\ndef"
    },
    {
        "number": 4021,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    answer = 0\n    for i in range(1, int(stdin) + 1):\n        answer += (i * (i + 1) * (i + 2)) // 6\n    return str(answer)\n'''\ndef"
    },
    {
        "number": 4021,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    for i in range(1, n+1):\n        if i%3 == 0:\n            print(i)\n        elif i%3 == 1:\n            print(i)\n        elif i%3 == 2:\n            print(i)\n"
    },
    {
        "number": 4021,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    d = {\n        1: '#',\n        2: '.',\n        3: '-',\n        4: '0',\n        5: '=',\n        6: '+'\n    }\n    table = []\n    for i in range(n + 1):\n        table.append(d[i])\n    table.reverse()\n    for i in range(1, n + 1):\n        k = 0\n        while k < i:\n            k += 1\n            tmp = table[k]\n            if i == 2 * k or i == 3 * k:\n                table[k] = table[k - 1]\n                table[k] = table[k - 1]\n            else:\n                table[k] = table[k - 1] + table[k - 2] + table[k - 3]\n                table[k] = table[k - 3]\n            if i % 2 == 0:\n                table[k] = table[k - 1]\n            else:\n                table[k] = table[k - 1] - table[k - 2]\n        table.reverse()\n    return ''.join(table)\n"
    },
    {
        "number": 4021,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(int(stdin)):\n        s=input()\n        print(sorted(s[::-1]))\n    return\n\n-----Constraints-----\n1 \u2264 a \u2264 100\n\nTime Limit: O(n)\n\nSpace Limit: O(1)\n\n\n-------Time Limit-------\n\nInput:\n2\n\nOutput:\n2\n\n\"\"\"\n\nimport math\n\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        ans = []\n        for i in stdin:\n            if i not in ans:\n                ans.append(i)\n            else:\n                ans.remove(i)\n        return ans[0]"
    },
    {
        "number": 4021,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a,b,c = map(int,stdin.split())\n    a *= 1e9\n    b *= 1e9\n    c *= 1e9\n    return str(abs(a-b)//c)\n\nOutput\n2\n\nExplanation\n2.5 = 2^(-1) + 1, which is 2.5 * 1e9 which is 9e9, which is 2.5 * 1e9 * 1e9 which is 9e9\n"
    },
    {
        "number": 4021,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a,b=map(int,stdin.split())\n    return str(a+b)\n"
    },
    {
        "number": 4021,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def count(p):\n        count = 1\n        for i in range(p):\n            if p % 2:\n                count += 1\n            else:\n                count = count + 1\n        return count\n    print(count(int(stdin)))\n\n------------------\n\nInput\n2\n\nOutput\n1\n\nInput\n6\n\nOutput\n3\n\nInput\n42\n\nOutput\n5\n\nInput\n27\n\nOutput\n8\n\nInput\n27\n\nOutput\n4\n\n------------------\n\nInput\n4\n\nOutput\n2\n\nInput\n42\n\nOutput\n3\n\nInput\n27\n\nOutput\n5\n\nInput\n27\n\nOutput\n2\n\nInput\n3\n\nOutput\n1\n\n------------------\n'''\n\ndef"
    },
    {
        "number": 4021,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = str(stdin).split(\" \")\n    print(a)\n    for i in a:\n        print(i)\n    print(\"\\n\")\n    return max(a)"
    },
    {
        "number": 4021,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    return str(N % 5 + 5)"
    },
    {
        "number": 4022,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(sorted(list(set(map(lambda x: len(x.split())))) - set(sorted(list(set(map(lambda x: len(x.split()))))) - set([x]))))\n\ndef"
    },
    {
        "number": 4022,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    seq = [int(x) for x in stdin.split()]\n    max_len = 0\n    for i in range(n):\n        max_len = max(seq[i], max_len)\n    seq.pop(n - 1)\n    seq.pop(0)\n    if max_len == 0:\n        return '0'\n    return str(max_len)\n\n\ndef"
    },
    {
        "number": 4022,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, *segments = map(int, stdin)\n    return solution1(n, segments)\n\ndef"
    },
    {
        "number": 4022,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[-1])\n    segments = [list(map(int, s.split())) for s in stdin.split()[:-1]]\n    segments = sorted(segments, key = lambda x: x[0])\n    i = 0\n    while len(segments) > 1:\n        if i % 2 == 0:\n            segments[i], segments[i + 1] = segments[i + 1], segments[i]\n        else:\n            segments[i], segments[i + 1] = segments[i + 1], segments[i]\n        i += 1\n    return str(sum(segments[-1][1:]))\n\n\n\ndef"
    },
    {
        "number": 4022,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    segments = []\n    for i in range(n):\n        line = stdin.split(\" \")\n        segments.append([int(i) for i in line[:-1]])\n    return solution(segments)\n\n\ndef"
    },
    {
        "number": 4022,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    segments = [tuple(map(int, l.split())) for l in stdin.splitlines()[1:n+1]]\n\n    def is_intersect(segment: tuple[int, int]) -> bool:\n        l_1, r_1 = segment[0], segment[1]\n        l_2, r_2 = segment[2], segment[3]\n        return l_1 < l_2 and r_1 < r_2\n\n    def check_intersect(segment: tuple[int, int]) -> tuple[int, int]:\n        s = tuple([(l1, r1) for l1, r1, l2, r2 in segments if is_intersect(l1, l2) and is_intersect(r1, r2)])\n        if not s:\n            return segment\n        if len(s) > 1:\n            return s[0]\n        return (s[0][0], s[0][1])\n\n    intersect_l = [check_intersect(segment) for segment in segments]\n    intersect_r = [check_intersect(segment) for segment in segments if not check_intersect(segment)]\n\n    if intersect_l and intersect_r:\n        return min(intersect_l[0][0], intersect_r[0][0]) + min(intersect_l[0][1], intersect_r[0][1])\n    elif intersect_l:\n        return min(intersect_l[0][0], intersect_l[0][1]) + min(intersect_r[0][0], intersect_r[0][1])\n    elif intersect_r:\n        return min(intersect_r[0][0], intersect_r[0][1]) + min(intersect_l[0][0], intersect_l[0][1])\n    else:\n        return 0\n\nprint(solution(input()))\n"
    },
    {
        "number": 4022,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    segments = []\n    for _ in range(n):\n        segments.append(list(map(int, stdin.split())))\n\n    segments.sort(key=lambda x: x[0])\n    intersect = None\n    #print(segments)\n    if len(segments)!= 1:\n        for i in range(1, len(segments)):\n            if segments[i][0] >= segments[i-1][1]:\n                intersect = segments[i]\n                break\n            if len(segments[i]) == 2:\n                segments.insert(i, segments[i][1], segments[i][0])\n                segments[i-1] = segments[i][1], segments[i][0]\n                #print(segments)\n    #print(intersect)\n    if intersect is not None:\n        intersect.append(intersect[0])\n        intersect.pop(0)\n        #print(intersect)\n    return max(len(intersect[0]), len(intersect[1]))\n\n#####\n"
    },
    {
        "number": 4022,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return"
    },
    {
        "number": 4022,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 4022,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip().split()[0])\n    l = list(map(int,stdin.strip().split()[1:]))\n    if n > len(l):\n        return ''\n    \n    intersection = []\n    n -= 1\n    if n > 0:\n        intersection.append(l[n])\n        for i in range(n, len(l)):\n            intersection.append(l[i])\n    if len(intersection) > 0:\n        return str(len(intersection))\n\n    return str(len(intersection))\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4023,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def solve(n: int, bricks: int, memo={}) -> str:\n        if n in memo:\n            return memo[n]\n        if n == 0:\n            return \"YES\"\n        if n == 1:\n            return \"NO\"\n        for a in [1, 2]:\n            for b in [2, 3, 4, 5]:\n                if not is_valid_wall(n, a, b):\n                    continue\n                remaining_bricks = bricks - (a * 2) + b\n                new_bricks = n - 2\n                if remaining_bricks == 0:\n                    new_bricks = n - 1\n                if not is_valid_wall(new_bricks, a, b):\n                    continue\n                new_bricks -= 2\n                new_bricks += 2\n                result = solve(new_bricks, remaining_bricks, memo)\n                memo[n] = result\n        return memo[n]\n    return solve(int(input()), int(input()))"
    },
    {
        "number": 4023,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip().split(' ')[0])\n    m = int(stdin.strip().split(' ')[1])\n    bricks = [int(x) for x in stdin.strip().split(' ')[2:]]\n    \n    def solution_helper(curr_bricks, curr_part):\n        if len(curr_bricks) == 1 and len(curr_bricks) == 2:\n            for i in range(3):\n                curr_bricks.append(curr_part * curr_part)\n            return curr_part\n        else:\n            brick_removed = curr_part\n            removed_parts = [curr_part]\n            for i in range(3):\n                removed_parts.append(removed_parts[-1] + curr_part)\n            removed_parts.append(removed_parts[-1] + curr_part)\n            for j in range(1, n):\n                part = solution_helper(removed_parts[:], curr_part + removed_parts[-1])\n                removed_parts.append(removed_parts[-1] + curr_part)\n                removed_parts.append(part)\n            return removed_parts[-1]\n        \n    \n    if m == 0:\n        answer = \"YES\"\n        return answer\n    elif n == 1:\n        answer = \"NO\"\n        return answer\n    else:\n        answer = solution_helper([], 1)\n        return answer\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n"
    },
    {
        "number": 4023,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    brick = []\n    brick_count = 0\n    for i in range(n):\n        a = list(map(int, input().split()))\n        if a[0] == 0:\n            brick.append(a[1])\n            brick_count += 1\n        else:\n            brick.append(a[1])\n    if sum(brick) == 0:\n        return \"YES\"\n    else:\n        brick_min_height = min(brick)\n        if brick_count >= len(brick):\n            return \"NO\"\n        else:\n            brick_count_max_height = max(brick)\n            if brick_min_height == brick_count_max_height:\n                brick_min_height -= 1\n                for i in range(brick_count):\n                    brick[i] -= 1\n                    brick[i] += 1\n            else:\n                brick_count = 0\n                for i in range(brick_count_max_height):\n                    if i < brick_min_height:\n                        brick_min_height += 1\n                        if brick_min_height == i:\n                            break\n                    else:\n                        brick[i] -= 1\n                        brick[i] += 1\n        for i in range(n):\n            if brick_min_height > brick[i]:\n                brick[i] -= brick_min_height\n            else:\n                brick[i] -= 1\n        return \"YES\"\n"
    },
    {
        "number": 4023,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, *height = map(int, stdin.split())\n    return \"YES\" if sum(height) == n else \"NO\""
    },
    {
        "number": 4023,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = list(map(int, stdin.split()))\n    if a == b:\n        return \"YES\"\n    s = 0\n    for i in range(a + 1, b + 1):\n        s += i * (i + 1) / 2\n    return \"NO\"\n"
    },
    {
        "number": 4023,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = [int(i) for i in stdin.strip().split()]\n    m = max(a)\n    cnt = 0\n    for i in range(n):\n        if a[i]!= m:\n            cnt += 1\n    return \"YES\" if cnt == n else \"NO\"\n"
    },
    {
        "number": 4023,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(i) for i in stdin.split()]\n    a = list(map(lambda x: x, a))\n    a = sorted(a, reverse=True)\n    if a[0] == a[-1]:\n        return \"NO\"\n    if len(a) == 2 and a[0]!= a[1]:\n        return \"NO\"\n    if len(a) == 2 and a[0] == a[1]:\n        return \"YES\"\n    if len(a) == 3:\n        return \"YES\"\n    print(\"NO\")\n    return \"YES\"\n\n\ndef"
    },
    {
        "number": 4023,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    nums = list(map(int, stdin.split()))\n    num = 0\n    for i in nums:\n        num += 2 ** i\n    diff = num - 2 ** n\n    if num + diff > n:\n        return \"NO\"\n    return \"YES\"\n\n\"\"\""
    },
    {
        "number": 4023,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    \n    if n == 1:\n        return \"YES\"\n    \n    for i in range(1, n+1):\n        a = list(map(int, stdin.split()))\n        if a[0] < a[1] < a[2] < a[3] < a[4] < a[5]:\n            return \"NO\"\n    \n    return \"YES\"\n\n\nExample\n\nInput:\n5\n2 2 2 2 2 2 5 5\n\nOutput:\nNO\n\nInput:\n5\n
    },
    {
        "number": 4023,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    heights = [int(i) for i in stdin.split()]\n    \n    for i in range(1, n+1):\n        curr = [i]\n        for j in range(len(heights)):\n            if heights[j] == 0:\n                break\n            else:\n                curr.append(heights[j] - 1)\n                heights[j] -= 1\n        \n        if heights[0] >= curr[0]:\n            print('NO')\n        else:\n            print('YES')\n    \n    return 'YES'"
    },
    {
        "number": 4024,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    \n    s = stdin.split()\n    S = set(s)\n    \n    while len(S)!= k:\n        if len(S) < n:\n            S.add(s[-1])\n            s.pop()\n        else:\n            S = S - {s[-1]}\n            s.pop()\n    \n    if len(S) < n:\n        S = S - {s[-1]}\n        s.pop()\n        S = S - {s[-1]}\n    \n    return str(len(S))\n'''\n\ndef"
    },
    {
        "number": 4024,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    S = set()\n    for i in range(n):\n        S.add(list(map(str, stdin.split()[i])))\n    if k > len(S):\n        return -1\n    \n    for i in range(k):\n        S.remove(min(S, key=len))\n    print(len(S))\n    return min(S)"
    },
    {
        "number": 4024,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = list(stdin.split())\n    s = set(s)\n    ans = 1\n    for i in range(n-1):\n        if s.issubset(set(s[i:])):\n            ans += 1\n    return ans if ans!= 0 else -1\n\n------------------\n\ndef"
    },
    {
        "number": 4024,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split()]\n    s = [i for i in range(1, n + 1)]\n    for _ in range(k):\n        s.remove(s[-1])\n    cost = 0\n    for i in s:\n        cost += len(str(i))\n    return cost\n"
    },
    {
        "number": 4024,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.split(' ')\n    S = set(s)\n    if n == 1:\n        if k == 1:\n            return -1\n        elif k > len(S):\n            return -1\n        else:\n            return len(S) - k\n    elif n == 2:\n        if len(S) == 0:\n            return -1\n        else:\n            return min(S)\n    else:\n        if len(S) == 0:\n            return -1\n        else:\n            s1, s2 = str(S), str(S)\n            if s1[0]!= s2[0]:\n                return -1\n            else:\n                return min(len(s1) - s2.index(s1[0]) - 1, len(s2) - s1.index(s2[0]) - 1)"
    },
    {
        "number": 4024,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin[:n]\n    t = stdin[n:].replace(\"\\n\", \"\").replace(\" \", \"\").lower()\n    S = set(list(s))\n    m = len(s)\n    cost = m - len(S)\n    if cost < k:\n        return -1\n    if k == 1:\n        return cost\n    S_len = len(S)\n    for i in range(m, m+k):\n        cost = cost + 1\n        if cost >= S_len:\n            continue\n        if t in S:\n            S.remove(t)\n        if S == set(list(s)):\n            return cost\n        S.add(t)\n    return -1\n"
    },
    {
        "number": 4024,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    import sys\n    \n    n, k = map(int, stdin.split())\n    \n    for _ in range(n):\n        s = list(stdin.split())\n        if len(s) > 0:\n            if len(set(s))!= len(s):\n                print(-1)\n                return\n            else:\n                if len(s) == 1:\n                    print(0)\n                    return\n                else:\n                    print(k*(k-1)//2)\n                    break\n        else:\n            print(0)\n            return\n        \n    \n\n-----Code-----\ndef"
    },
    {
        "number": 4024,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    S = set(map(int, stdin.split()))\n    res = 0\n    while len(S) > 0:\n        t = min(k, len(S))\n        if len(S) == t:\n            return \"-\"\n        if len(S) > t:\n            t = len(S)\n        for i in range(len(S) - 1, t - 1, -1):\n            if len(S) > t:\n                return str(i - len(S))\n            S.pop()\n    return \"-\""
    },
    {
        "number": 4024,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    s = list(stdin.split())\n    \n    if n < k:\n        return -1\n    \n    s = [str(i) for i in s]\n    \n    for i in range(1, len(s)):\n        s[i] = s[i][:-1]\n    \n    S = set(s)\n    \n    for i in S:\n        n -= 1\n        if n == 0:\n            return i\n    \n    return -1\n\nprint(solution(\"asdf\"))\nprint(solution(\"asd\"))\nprint(solution(\"aaaaa\"))\nprint(solution(\"\"))"
    },
    {
        "number": 4024,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin.splitlines()\n    n, k = map(int, string[0].split())\n    s = string[1]\n    string = [s[i:i+k] for i in range(0, len(s), k)]\n    answer = 0\n    for i in range(len(string)):\n        answer += len(string[i])\n    return answer\n\n-----Constraints-----\n\n1 <= n <= 200\n1 <= k <= 100\n1 <= s.length <= 200\ns contains only lowercase English letters.\n\"\"\"\n\nimport collections\n\nclass Solution:\n    def minCostToDeliverAll(self, n: int, k: int) -> int:\n        s = collections.deque([str(n)])\n        for i in range(n):\n            s.appendleft(str(i))\n        \n        def dfs(s, i, path):\n            if i == n:\n                return 0\n            \n            if len(path) == k:\n                return 1\n            \n            if s[i]!= path[-1]:\n                return dfs(s, i+1, path+[s[i]])\n            else:\n                return dfs(s, i+1, path+[s[i]]) + 1\n\n        return dfs(s, 0, [])\n\n\nprint(Solution().minCostToDeliverAll(4, 5))\nprint(Solution().minCostToDeliverAll(5, 6))\nprint(Solution().minCostToDeliverAll(10, 7))\nprint(Solution().minCostToDeliverAll(10, 8))\nprint(Solution().minCostToDeliverAll(10, 9))\n"
    },
    {
        "number": 4025,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def _solution(n):\n        a, b, c = [int(x) for x in stdin.split()]\n        days = 0\n        days += (b - a) * (a + b + c - 1)\n        days += (c - a) * (a + b + c - 1)\n        days += (n - a) * (a + b + c - 1)\n        days += n - a\n        return days\n    return _solution(int(stdin))\n\n\"\"\"\nfor _ in range(int(input())):\n    n = int(input())\n    a, b, c = [int(x) for x in input().split()]\n    days = 0\n    days += (b - a) * (a + b + c - 1)\n    days += (c - a) * (a + b + c - 1)\n    days += (n - a) * (a + b + c - 1)\n    days += n - a\n    print(days)\n\"\"\"\n"
    },
    {
        "number": 4025,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a+b+c>=7*10**8:\n        return '10'\n    if a+b+c==100:\n        return '7'\n    if (a+b+c<=7*10**8):\n        return '1'\n    if a+b+c==100:\n        return '2'\n    if (a+b+c<=7*10**8):\n        return '3'\n    if a+b+c==100:\n        return '4'\n    if (a+b+c<=7*10**8):\n        return '5'\n    if a+b+c==100:\n        return '6'\n    if (a+b+c<=7*10**8):\n        return '7'\n    if a+b+c==100:\n        return '8'\n    if (a+b+c<=7*10**8):\n        return '9'\n    return '10'\n\nfor _ in range(int(input())):\n    print(solution(input()))\n"
    },
    {
        "number": 4025,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    _stdin = stdin.split('\\n')\n    a, b, c = map(int, _stdin[0].split(' '))\n    _stdin = _stdin[1:]\n\n    def recur(day):\n        if day == len(_stdin):\n            return 0\n        val = int(_stdin[day])\n        if day == len(stdin):\n            return val\n        if val == 0:\n            return recur(day+1)\n        elif val < 0:\n            return val\n        else:\n            recur(day+1)\n            recur(day+1)\n            return val\n\n    return str(recur(0))\n\n\n-----Constraints-----\n\n1 <= stdin.length <= 7\n0 <= a, b, c <= 7\n\nOutput Format\n\nReturn the maximum number of days the cat can eat in a trip without additional food purchases, if Polycarp chooses the day of the week to start his trip optimally.\n\nSample Input\n\n2 1 1\n\nSample Output\n\n3\n\nExplanation\n\nPolycarp starts on Saturday and the cat eats fish food.\n\"\"\"\n\nimport sys\nfrom collections import deque\n\n\ndef"
    },
    {
        "number": 4025,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = list(map(int, stdin.split()))\n    days = 0\n    if a < b < c:\n        days = a + b + c\n    elif b < c < a:\n        days = b + c\n    elif c < a < b:\n        days = c + a\n    else:\n        days = a + b + c\n    return str(days)\n    \n"
    },
    {
        "number": 4025,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    food_tow = [int(stdin) for _ in range(2)]\n    food_tow.append(food_tow.pop(0))\n    food_tow.append(food_tow.pop(0))\n    food_tow.sort()\n    return str(sum(food_tow))"
    },
    {
        "number": 4025,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    p = list(map(int, stdin.split()))\n    dp = []\n    for i in range(n):\n        if i % 2 == 0:\n            t = 1 + p.pop(0)\n        else:\n            t = 0 + p.pop(0)\n        dp.append(t)\n    print(max(dp))\n    return ','.join([str(i) for i in dp])\nsolution(\"2 2 2\")\n"
    },
    {
        "number": 4025,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    num_dishes = int(stdin.split()[-1])\n    dishes = [int(dish) for dish in stdin.split()[:-1]]\n    days = sum(dishes)\n\n    dp = [[0] * days for _ in range(num_dishes)]\n\n    for i in range(num_dishes):\n        for j in range(i, days):\n            if i == 0:\n                dp[i][j] = dp[j][i] + (dishes[i] - 1)\n            elif j == 0:\n                dp[i][j] = dp[i - 1][j] + (dishes[i] - 1)\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + (dishes[i] - 1)\n\n    answer = max(dp[-1])\n    if answer == 0:\n        return \"Infinity\"\n    else:\n        return str(answer)\n\"\"\"\n\ndef"
    },
    {
        "number": 4025,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a <= b <= c:\n        return \"4\"\n    if a <= c <= b:\n        return \"7\"\n    if b <= c <= a:\n        return \"9\"\n    if a <= b <= c:\n        return \"1\"\n    if b <= a <= c:\n        return \"3\"\n    if c <= a <= b:\n        return \"2\"\n    if c <= b <= a:\n        return \"6\"\n    return \"0\"\n"
    },
    {
        "number": 4025,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(n):\n        stdin = stdin.replace(\"\\n\", \"\")\n        a, b, c = map(int, stdin.split(\" \"))\n        if a == 1:\n            if b == 1:\n                if c == 1:\n                    print(3)\n                elif c == 2:\n                    print(4)\n                else:\n                    print(7)\n            else:\n                print(9)\n        elif b == 1:\n            if c == 1:\n                print(4)\n            elif c == 2:\n                print(6)\n            else:\n                print(8)\n        else:\n            print(11)\n"
    },
    {
        "number": 4025,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(int(stdin)):\n        try:\n            a, b, c = map(int, stdin.split())\n            if (a >= 1 and b >= 1 and c >= 1) and (a % 7 == 1 or b % 7 == 1 or c % 7 == 1):\n                days = a\n                if a == 1:\n                    days += b\n                if a == 2:\n                    days += b\n                if a == 3:\n                    days += b\n                if a == 4:\n                    days += b\n                if a == 5:\n                    days += b\n                if a == 6:\n                    days += b\n                if a % 7 == 2 and b % 7 == 2 and c % 7 == 2:\n                    days += 99\n                if a % 7 == 0 and b % 7 == 0 and c % 7 == 0:\n                    days += 100\n                if a % 7 == 1 and b % 7 == 1 and c % 7 == 1:\n                    days += 99\n                if a % 7 == 2 and b % 7 == 2 and c % 7 == 2:\n                    days += 99\n                if a % 7 == 3 and b % 7 == 3 and c % 7 == 3:\n                    days += 99\n                if a % 7 == 4 and b % 7 == 4 and c % 7 == 4:\n                    days += 99\n                if a % 7 == 5 and b % 7 == 5 and c % 7 == 5:\n                    days += 99\n                if a % 7 == 6 and b % 7 == 6 and c % 7 == 6:\n                    days += 99\n                print(days)\n        except:\n            pass\n    return \"Task completed\"\n"
    }
]