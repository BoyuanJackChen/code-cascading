[
    {
        "number": 4000,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    paths = []\n    ans = 0\n    if n == 1:\n        return '1'\n    for i in range(1, n):\n        paths.append(str(i))\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if paths[i]!= paths[j]:\n                if paths[i] in paths[j+1:]:\n                    ans += 1\n    return str(ans)"
    },
    {
        "number": 4000,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, e = map(int, stdin.split())\n    if n % 2 == 1:\n        print(0)\n        return ''\n    v = [0] * (n + 1)\n    for i in range(1, n + 1):\n        for j in range(i):\n            v[i] += 1\n            v[i] = v[i] if v[i] > 0 else 0\n        v[i] -= 1\n    v[1] = 0\n    v[e] = 0\n    for i in range(2, n + 1):\n        if v[i] > 0:\n            v[i] = 0\n        v[i] += 1\n    a = 1\n    b = e\n    c = n - 1\n    a_b = []\n    while a < b:\n        if (a + b) % 2 == 1:\n            a_b.append((a, b))\n            a, b = a + 1, b - 1\n        elif (a + b) % 2 == 0:\n            a, b = a + 1, b + 1\n        else:\n            a += 1\n    for a, b in a_b:\n        if v[a] > 0:\n            v[a] = 0\n        v[a] += 1\n    a, b = 1, e\n    c_b = []\n    while a < b:\n        if (a + b) % 2 == 1:\n            c_b.append((a, b))\n            a, b = a + 1, b - 1\n        elif (a + b) % 2 == 0:\n            a, b = a + 1, b + 1\n        else:\n            a += 1\n    for a, b in c_b:\n        if v[a] > 0:\n            v[a] = 0\n        v[a] += 1\n    a, b = e, 1\n    c_a = []\n    while a < b:\n        if (a + b) % 2 == 1:\n            c_a.append((a, b))\n            a, b = a + 1, b + 1\n        elif (a + b) % 2 == 0:\n            a, b = a + 1, b - 1\n        else:\n            a += 1\n    for a, b in c_a:\n        if v[a] > 0:\n            v[a] = 0\n        v[a] += 1\n    c = v[c]\n    a = v[a_b[0][0]]\n    b = v[a_b[1][0]]\n    a_b = sorted((a, b))\n    if a_b[0] == a_b[1]:\n        answer = '0'\n    elif a_b[0] < a_b[1]:\n        answer = '1'\n    elif a_b[1] < a_b[0]:\n        answer = '2'\n    else:\n        answer = '3'\n    return answer\n"
    },
    {
        "number": 4000,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution to the question of finding the distinct simple path between two vertices in an undirected tree\n    \"\"\"\n    n = int(stdin)\n    G = [[] for _ in range(n)]\n    for i in range(n-1):\n        a, b, c = map(int, input().split())\n        G[a-1].append((b-1, c))\n        G[b-1].append((a-1, c))\n    paths = []\n    for i in range(n):\n        paths.append(len(G[i]))\n    paths.sort()\n    a = []\n    for i in range(n-1):\n        a.append(paths[i+1] - paths[i])\n    paths = a\n    res = -1\n    for i in range(n):\n        if paths[i] > res:\n            res = paths[i]\n    print(res)\n    return str(res)\n\nSolution Method"
    },
    {
        "number": 4000,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    graph = []\n    for _ in range(n):\n        graph.append(list(map(int, stdin.strip().split())))\n\n    # if there are multiple solution, we can split the vertices into 3 sets and compare their values\n    # the first set is for path 1, the second set for path 2, and the third set for path 3\n    # because they should not overlap, the first set is the shortest path between the two sets\n    # the second set is the shortest path between the two sets\n    # the third set is the path between the two sets\n    # the shortest path between the two sets are already sorted\n    # find the shortest path\n    # for path in [1,2,3]:\n    #     print(f\"Path {path} is: {findShortestPath(graph, 1, 3, path)}\")\n\n    def getShortestPath(graph, a, b, path):\n        if a == b:\n            return path + [a]\n        elif a not in graph or b not in graph:\n            return []\n        else:\n            minPath = [a]\n            # find the shortest path between the two vertices\n            # and add them to the list of paths\n            for v in graph[a]:\n                if v not in path:\n                    path.append(v)\n                    shortestPath = getShortestPath(graph, v, b, path)\n                    if shortestPath:\n                        minPath = shortestPath\n            path.append(b)\n            return minPath\n\n    shortestPath = getShortestPath(graph, 1, 3, [1, 2, 3])\n    if shortestPath:\n        return shortestPath[-1]\n    return None\n\"\"\"\n\nclass Solution:\n    def numIdentical(self, s: str) -> int:\n        s = s.lower()\n        # Return the number of occurrences of the characters in s\n        #\n        # For instance, if we pass 'AABBB' then our pattern is not a match but it matches 'AABB'\n        #\n        # s = \"aabb\"\n        #\n        # s = \"aabb\"\n        #\n        # s = \"aabb\"\n        #\n        # s = \"AABBB\"\n        #\n        # s = \"aaBBb\"\n        #\n        # s = \"AabbB\"\n        #\n        # s = \"aabbBB\"\n        #\n        # s = \"AabbB\"\n        #\n        # s = \"aabbB\"\n        #\n        # s = \"aabbB\"\n        #\n        # s = \"aaBBBB\"\n        #\n        # s = \"AABBBB\"\n        #\n        # s = \"AABBBB\"\n        #\n        # s = \"AABBBB\"\n        #\n        # s = \"AABBBB\"\n        #\n        # s = \"AABBBB\"\n        #\n        # s = \"AABBBB\"\n        #\n        # s = \"AABBBB\"\n        #\n        # s = \"Aabbbb\"\n        #\n        # s = \"aabbbb\"\n        #\n        # s = \"aabbbb\"\n        #\n        # s = \"Aabbbb\"\n        #\n        # s = \"aabbbb\"\n        #\n        # s = \"AABBBB\"\n        #\n        # s = \"AabbBB\"\n        #\n        # s = \"AabbBB\"\n        #\n        # s = \"AabbBB\"\n        #\n        # s = \"AABBBB\"\n        #\n        # s = \"AABBBB\"\n        #\n        # s = \"AabbBB\"\n        #\n        # s = \"AABBBB\"\n        #\n        # s = \"AABBBB\"\n        #\n        # s = \"AabbBB\"\n        #\n        # s = \"AabbBB\"\n        #\n        # s = \"AABBBB\"\n        #\n        # s = \"AABBBB\"\n        #\n        # s = \"AABBBB\"\n        #\n        # s = \"AABBBB\"\n        #\n        # s = \"AABBBB\"\n        #\n        # s = \"AABBBB\"\n        #\n        # s = \"AABBBB\"\n        #\n        # s = \"AABBBB\"\n        #\n        # s = \"AABBBB\"\n        #\n        # s = \"AABBBB\"\n        #\n        # s = \"AABBBB\"\n        #\n        # s = \"AABBBB\"\n        #\n        # s = \"AABBBB\"\n        #\n        # s = \"AABBBB\"\n        #\n        # s = \"AABBBB\"\n        #\n        # s = \"AABBBB\"\n        #\n        # s = \"AABBBB\"\n        #\n        # s = \"AABBBB\"\n        #\n        # s = \"AABBBB\"\n        #\n        # s = \"AABBBB\"\n        #\n        # s = \"AABBBB\"\n        #\n        # s = \"AABBBB\"\n        #\n        # s = \"AABBBB\"\n        #\n        # s = \"AABBBB\"\n        #\n        # s = \"AABBBB\"\n        #\n        # s = \"AABBBB\"\n        #\n        # s = \"AABBBB\"\n        #\n        # s = \"AABBBB\"\n        #\n        # s = \"AABBBB\"\n        #\n        # s = \"AABBBB\"\n        #\n        # s = \"AABBBB\"\n        #\n        # s = \"AABBBB\"\n        #\n        # s = \"AABBBB\"\n        #\n        # s = \"AABBBB\"\n        #\n        # s = \"AABBBB\"\n        #\n        # s = \"AABBBB\"\n        #\n        # s = \"AABBBB\"\n        #\n        # s = \"AABBBB\"\n        #\n        # s = \"AABBBB\"\n        #\n        # s = \"AABBBB\"\n        #\n        # s = \"AABBBB\"\n        #\n        # s = \"AABBBB\"\n        #\n        # s = \"AABBBB"
    },
    {
        "number": 4000,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    \n    \n    if n == 2:\n        return \"5\"\n    \n    a, b = map(int, input().split())\n    for i in range(2, n):\n        if a <= i and b <= i:\n            return str(i)\n        elif a <= i and b!= i:\n            a, b = a, b\n            a += 1\n    return str(n)\n\nfor i in range(0, len(s)):\n    print(s[i])\n\nfor i in range(0, len(s)):\n    print(s[i], end = \" \")\n    print(s[i+1], end = \" \")\n"
    },
    {
        "number": 4000,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin)\n    \n    edges = []\n    \n    for i in range(n):\n        edges.append(tuple(map(int, stdin[i].split())))\n    \n    return solution(edges)\n\n\"\"\"\n\nclass Solution:\n    def solve(self, n):\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n\n        res = 0\n        for i in range(1, n):\n            res += self.solve(i) * i\n            res += self.solve(n - i) * i\n        \n        return res % 10007"
    },
    {
        "number": 4000,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, max_a, max_b, max_c = map(int, stdin.split())\n    \n    def solution(n, max_a, max_b, max_c):\n        if n == 0:\n            return 0\n        \n        res = 0\n        if n - 1 < max_a or n - 1 < max_b:\n            res = 0\n        else:\n            n = n - 1\n            if max_c < n:\n                return 0\n            if max_c == n:\n                return 1\n            if max_a < n:\n                return 0\n            if max_a == n:\n                return 2\n            if max_b < n:\n                return 0\n            if max_b == n:\n                return 3\n            if max_c < n:\n                res += 1\n            if max_a < n:\n                res += 1\n            if max_b < n:\n                res += 1\n        \n        return res\n    \n    return str(solution(n, max_a, max_b, max_c))\n"
    },
    {
        "number": 4000,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    edges = stdin.splitlines()\n    edges = sorted(set(map(tuple, edges)))\n    a, b, c = edges[0]\n    N = len(edges)\n    a = max(a, N)\n    b = max(b, N-1-a)\n    c = max(c, N-1-a-b)\n    ans = N*N-c\n    if N == 1:\n        return str(ans)\n    a_b = N*(N-1)//2\n    a_c = N*(N-1-a_b)//2\n    b_c = N*(N-1-a_b-b)//2\n    return str(ans + a_b + a_c + b_c)\n\n'''\n\nclass Solution:\n    def __init__(self):\n        self.max_path = 0\n    def maxPath(self, root: Optional[TreeNode]) -> str:\n        if not root: return\n        self.dfs(root)\n        return str(self.max_path)\n    def dfs(self, root):\n        if not root: return\n        self.dfs(root.left)\n        self.dfs(root.right)\n        self.max_path = max(self.max_path, root.val)\n        self.dfs(root.left)\n        self.dfs(root.right)\n        return self.max_path"
    },
    {
        "number": 4000,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    sol = 0\n    for i in range(1, n + 1):\n        temp = list(map(int, stdin.split()))\n        sol += len(set(temp)) - 1\n    return str(sol)\n-----Time complexity-----\n\ntime complexity = O(N)\nspace complexity = O(1)\n\n\"\"\"\nclass Solution:\n    def maxPath(self, A: List[int]) -> int:\n        n = len(A)\n        \n        def recurse(i, j, res):\n            if i < 0 or j < 0 or i >= n or j >= n:\n                return 0\n            if A[i]!= A[j]:\n                return res\n            \n            if i == j:\n                res += 1\n            else:\n                res = max(res, recurse(i, j-1, res) + recurse(i-1, j, res))\n                \n            return res\n        return recurse(0, 0, 0)"
    },
    {
        "number": 4000,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    # get the number of edges and the number of vertices\n    n, edges = map(int, stdin.split())\n    \n    # initialise the solution list with all 0's\n    sol = [0] * n\n    \n    # add each edge to the solution list\n    for i in range(edges):\n        a, b = map(int, stdin.split())\n        sol[a - 1] += 1\n        sol[b - 1] += 1\n        \n    # check for an empty solution\n    if sol.count(0) == 1:\n        return '{}'.format(sol[0])\n    \n    # check for all possible simple paths\n    for i in range(1, n):\n        sol[i] = sol[i - 1] + sol[i]\n        \n    # find the maximum path\n    for i in range(n):\n        if sol[i] == 0:\n            sol[i] = '1'\n    \n    # if there are multiple valid paths, return the first one\n    if sol.count(1) > 1:\n        return '{}'.format(sol[1])\n    \n    # if there are only two valid paths, return the second one\n    elif sol.count(2) == 1:\n        return '{}'.format(sol[2])\n    \n    # if there are no valid paths, return '2'\n    else:\n        return '2'"
    },
    {
        "number": 4001,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x,y=list(map(int,stdin.split()))\n    x=sorted(list(set([int(i) for i in list(str(x))])))\n    y=sorted(list(set([int(i) for i in list(str(y))])))\n    x,y=x[:len(x)-1],y[:len(y)-1]\n    for i in range(len(x)):\n        x[i],y[i]+=x[i]+y[i]\n    return ''.join(str(x[i])+str(y[i]) for i in range(len(x)))\n"
    },
    {
        "number": 4001,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    c = list(map(int, stdin.split()))\n    c.sort()\n    if c[0] > c[-1]:\n        return ''.join(map(str, c[1:]))\n    \n    return ''.join(map(str, c[:-1]))"
    },
    {
        "number": 4001,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e = map(int, stdin.split())\n    # sum of every pair\n    s = a + b + c + d + e\n    # count of every pair\n    n = s // 10\n    # k of every pair, i.e. all pairs in a(k) + b(k) + c(k) + d(k) + e(k)\n    k = 2 ** n\n    # if there are n pairs then total number of pairs can be reduced to 2^n\n    if s % k!= 0:\n        return \"\"\n    # for each pair, find its sum of elements\n    for _ in range(n):\n        tmp = a + b + c + d + e\n        # if sum of every pair equals the number of pairs then merge the numbers\n        if tmp % k == 0:\n            s = s // 10 + tmp // k * k\n            # if there are n pairs then total number of pairs can be reduced to 2^n\n            if s % k!= 0:\n                return \"\"\n    return str(s)\n\"\"\"\n\ndef"
    },
    {
        "number": 4001,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    def divisors(n):\n        for i in range(1, int(math.sqrt(n) + 1)):\n            if (n % i == 0):\n                yield n // i\n                yield i\n    res = []\n    for d in divisors(x):\n        res.append(d * y + d)\n    return''.join(map(str, res))\n-----Solution-----\n"
    },
    {
        "number": 4001,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = set()\n    for l in stdin:\n        if l in s:\n            s.remove(l)\n        else:\n            s.add(l)\n    for i in sorted(s):\n        print(i, end=\" \")\n"
    },
    {
        "number": 4001,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, d_list = map(int, stdin.split())\n    d_list = [int(i) for i in d_list]\n    \n    def is_divisor(x, y):\n        return x % y == 0 and (x / y) % x == 0\n    \n    def is_perm(x, y):\n        return is_divisor(x, y)\n    \n    def is_sorted(x, y):\n        return x <= y and y <= x\n    \n    def solution(n, d_list):\n        answer = []\n        \n        for i in range(n):\n            sorted_list = sorted(d_list)\n            if is_sorted(sorted_list[i], sorted_list[i+1]):\n                answer.append(sorted_list[i])\n            else:\n                answer.append(sorted_list[i+1])\n        \n        return \"\".join(answer)\n    \n    return solution(n, d_list)"
    },
    {
        "number": 4001,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x,y=map(int,stdin.split())\n    d=[1,x]\n    for i in range(2,x+1):\n        d.append(d[i-1]+d[i-2])\n    for j in range(1,y+1):\n        d.append(d[j-1]+d[j-2])\n    d=list(d)\n    print(d)\n    a=[]\n    for i in range(len(d)-1,0,-1):\n        if d[i]%2==0:\n            d[i]=d[i]/2\n        else:\n            d[i]=d[i]\n        a.append(d[i])\n    print(a)\n    return''.join(map(str,a))\n"
    },
    {
        "number": 4001,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    divisors = list(map(int, filter(lambda x: x % n == 0, range(1, n+1))))\n    return str(sum(divisors))\n\n-----Constraints-----\n1 <= n <= 10^4\n\nInput Format\n\nThe first line contains two space-separated integers $n$ and $d.\n\nThe second line contains $n$ space-separated integers $d_1, d_2, \\dots, d_n$.\n\nConstraints\n\n0 < d_i < 10^4\n\nOutput Format\n\nPrint two positive integer numbers $x$ and $y$ \u2014 such numbers that merged list of their divisors is the permutation of the given list of integers. It is guaranteed that the answer exists.\n\nSample Input\n\n3\n3 2 8 1 2 4 1 20 4 5\n\nSample Output\n\n20 8\ndef"
    },
    {
        "number": 4001,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    divisors = [1]\n    for i in range(1, k+1):\n        d = divisors[-1]\n        divisors.append(d*i)\n    divisors.sort(reverse = True)\n    for i in range(n):\n        if divisors[i] not in divisors[i:]:\n            divisors[i] = divisors[i] - 1\n    print(*divisors)\n"
    },
    {
        "number": 4001,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def get_divisors(x):\n        lst = []\n        for i in range(1, int(math.sqrt(x))+1):\n            if x % i == 0:\n                lst.append(i)\n        lst.sort()\n        return lst\n\n    def get_divisors_list(x, y):\n        lst = []\n        for i in range(x, y+1):\n            lst.append(i)\n        lst.sort()\n        return lst\n\n    x = int(stdin.strip().split()[0])\n    y = int(stdin.strip().split()[1])\n    divisors = get_divisors(x)\n    divisors_list = get_divisors_list(x, y)\n    \n    for divisor in divisors:\n        if divisor in divisors_list:\n            divisors.remove(divisor)\n            divisors_list.remove(divisor)\n    \n    return str(len(divisors)) + \" \" + str(x) + \" \" + str(y) + \" \" + str(divisors)\n"
    },
    {
        "number": 4002,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = [0 for _ in range(n)]\n    for i in range(m):\n        a[i] = int(stdin.split()[i])\n    \n    answer = 0\n    for i in range(k):\n        answer = max(answer, a[2*i]%k)\n    \n    return str(answer)\n"
    },
    {
        "number": 4002,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    result = 0\n    if m % 2 == 0:\n        result = max(a)\n        for i in range(m//2):\n            result = max(result, a[i] + result)\n    else:\n        result = max(a)\n        for i in range(m//2):\n            result = max(a[i] + a[i+m//2], result)\n\n    print(result)\n    return str(result)\n\nprint(solution(\"5 5 4\"))"
    },
    {
        "number": 4002,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    sum = 0\n    for i in range(n):\n        sum += int(stdin[i])\n    max_sum = sum\n    for i in range(n - 1, -1, -1):\n        sum = sum - int(stdin[i])\n        if sum >= k:\n            sum = sum % k\n            max_sum = max(sum, max_sum)\n        else:\n            return str(max_sum)\n    return str(max_sum)\n\nprint(solution(\"2 4 3 5 2\"))"
    },
    {
        "number": 4002,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = list(map(int, stdin.split()))\n    a = [list(map(int, input().split())) for i in range(n)]\n    maxSum = 0\n    for i in range(n):\n        tempSum = 0\n        for j in range(m):\n            if tempSum + a[i][j] <= k:\n                tempSum += a[i][j]\n            else:\n                break\n        maxSum = max(maxSum, tempSum)\n    return str(maxSum)\n\n\nprint(solution(input()))"
    },
    {
        "number": 4002,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = [[int(x) for x in line.split()] for line in stdin.split('\\n')]\n    return max([sum([i[i % m] for i in row]) for row in a]) % k\n\nprint(solution(input()))\n\ndef"
    },
    {
        "number": 4002,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = [list(map(int, stdin.split())) for _ in range(n)]\n    # print(*a, sep='\\n')\n    # print(*a)\n    return max(sum(a, [])[1:])\n"
    },
    {
        "number": 4002,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    k = list(map(int, stdin.split()))\n    answer = 0\n    for i in range(m):\n        answer += max(k[i] // (2 ** (m - 1 - i) - 1) for i in range(m))\n    return str(answer)\n"
    },
    {
        "number": 4002,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = [[int(stdin.split()[i]) for i in range(m)] for j in range(n)]\n    _max = [0 for i in range(k+1)]\n    for i in range(n):\n        for j in range(m):\n            if a[i][j]!= 0:\n                _max[a[i][j]] = max(_max[a[i][j]] + a[i][j], a[i][j])\n    print(_max[0], _max[-1])\n    return str(_max[-1])\n\"\"\"\nimport math\n\ndef"
    },
    {
        "number": 4002,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n,m,k = map(int,stdin.split())\n    a = list(map(int,stdin.split()))\n    res = 0\n    max_value = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                if a[i] + a[j] + a[k] <= k and a[i] * a[j] * a[k] > max_value:\n                    max_value = a[i] * a[j] * a[k]\n    print(max_value)\n    return str(max_value)\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4002,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    for _ in range(int(stdin)):\n        m, n, k = map(int, stdin.split())\n        a = [int(i) for i in stdin.split()]\n        max_sum = sum(a[i] for i in range(n))\n        if max_sum % k!= 0:\n            print(-1)\n            continue\n        j = 0\n        for i in range(n):\n            if sum(a[j:i + 1]) % k!= 0:\n                print(-1)\n                break\n            else:\n                j = i + 1\n        if j == n:\n            print(max_sum)\n            continue\n        i = 0\n        while a[i]!= 0:\n            if sum(a[j:i + 1]) % k!= 0:\n                print(-1)\n                break\n            else:\n                j = i + 1\n        if j == n:\n            print(max_sum)\n            continue\n        j = n - 1\n        while a[j]!= 0:\n            if sum(a[i:j + 1]) % k!= 0:\n                print(-1)\n                break\n            else:\n                i = j + 1\n        if j == n:\n            print(max_sum)\n            continue\n        j = n - 1\n        while a[j]!= 0:\n            if sum(a[i:j + 1]) % k!= 0:\n                print(-1)\n                break\n            else:\n                i = j + 1\n        if j == n:\n            print(max_sum)\n            continue\n        j = n - 1\n        while a[j]!= 0:\n            if sum(a[i:j + 1]) % k!= 0:\n                print(-1)\n                break\n            else:\n                i = j + 1\n        if j == n:\n            print(max_sum)\n            continue\n    return \"\"\n"
    },
    {
        "number": 4003,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n,a=map(int,stdin.split())\n    l,r=1,2\n    while n!=0:\n        print(l,end=' ')\n        if a[l-1]<a[r]:\n            print(r,end=' ')\n            l+=1\n        else:\n            r+=1\n            print(r,end=' ')\n        n-=1\n    print(r,end=' ')\n    return ''.join(map(str,l))\n-----Python3 Comprehension-----\n\ndef"
    },
    {
        "number": 4003,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip().split(' ')[0])\n    a = [int(stdin.strip().split(' ')[1]) for i in range(n)]\n    a.sort()\n    print(len(a))\n    s = ''\n    for i in range(len(a)-1):\n        if a[i] > a[i+1]:\n            s += str(a[i]) + 'L'\n        else:\n            s += str(a[i]) + 'R'\n    print(s)\n\n\n-----Brute Force Algorithm-----\n\ndef"
    },
    {
        "number": 4003,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(solution(stdin, int(stdin)))\n"
    },
    {
        "number": 4003,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(int(stdin.strip())):\n        a, b = map(int, stdin.strip().split())\n        if a == b:\n            print(a)\n            continue\n        if a > b:\n            a, b = b, a\n        a_s = \"\"\n        a_s = a\n        while a <= b:\n            a += 1\n            a_s += str(a) + \" \"\n        a_s = a_s[:-1]\n        print(a_s)\n    return \"\"\n\n-----Quick Sort-----\n\ndef"
    },
    {
        "number": 4003,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    return '\\n'.join(map(''.join, zip(*map(lambda x: list(map(str, x)), (map(int, stdin.split()))))))\n\ndef"
    },
    {
        "number": 4003,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    nums = [int(s) for s in stdin.split(' ')]\n    max_len = len(max(nums, key=len))\n    return 'L' * max_len + 'R' * max_len\n\ndef"
    },
    {
        "number": 4003,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    stdin = stdin.split()\n    a = int(stdin[0])\n    \n    for i in range(1, a+1):\n        print(i)\n        for j in range(i, a+1):\n            print(str(j)+\"L\")\n            if j == i:\n                print(\"R\")\n            else:\n                print(\"L\")\n        print()\n    return \"\"\n\n-----Examples-----\n\nInput\n7\n1 2 4 3 2\n\nOutput\n4\nLRRR\n\nInput\n7\n1 3 5 6 5 4 2\n\nOutput\n6\nLLRRR\n\n'''"
    },
    {
        "number": 4003,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    answer = []\n    for i in range(int(stdin)):\n        answer.append(list(map(int, input().split())))\n    answer.sort(key=lambda x: x[0])\n    return str(answer[0][1])\n\nprint(solution('7'))\nprint(solution('4'))\nprint(solution('3'))\nprint(solution('2'))\n"
    },
    {
        "number": 4003,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    print(a)\n    count = 0\n    a.sort(reverse=True)\n    for i in range(n):\n        if a[i] % 10 == 0:\n            a[i] = str(a[i])\n            count += 1\n    print(a)\n    for i in range(n-1):\n        if a[i] % 10 == 0:\n            a[i+1] = str(a[i])\n            count += 1\n    print(a)\n    for i in range(n-1,0,-1):\n        if a[i] % 10 == 0:\n            a[i-1] = str(a[i])\n            count += 1\n    print(a)\n    print(count)\n    return str(count)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4003,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = [int(x) for x in stdin.split()]\n    result = \"\"\n    \n    # Sort the array\n    for i in range(n-1):\n        for j in range(i,n):\n            if a[i] > a[j]:\n                a[i],a[j] = a[j],a[i]\n    \n    # Build the result string\n    for i in range(n):\n        result += str(a[i])\n        if i < n-1:\n            result += '-'\n    \n    return result.strip()\n\nsolution(\"5 4 3 2\")\n\n\n'''\nprint('\\n'*3)\n\nfor i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n\n    # Build the result string\n    result = \"\"\n    for i in range(n-1):\n        result += str(a[i])\n        if i < n-1:\n            result += '-'\n    \n    print(result.strip())"
    },
    {
        "number": 4004,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, d = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n\n    # add value to the array, if possible\n    for i in range(1, n):\n        for j in range(i):\n            if a[j] + d > a[i] and d <= 0:\n                a[i] += d\n                d -= 1\n            elif a[i] - d < a[j] and d > 0:\n                a[j] -= d\n                d -= 1\n\n    # subtract value to the array, if possible\n    for i in range(n-1, -1, -1):\n        for j in range(i, -1, -1):\n            if a[j] + d > a[i] and d > 0:\n                a[j] += d\n                d -= 1\n            elif a[j] - d < a[i] and d > 0:\n                a[j] -= d\n                d -= 1\n    if d == 0:\n        return -1\n    else:\n        return sum(a)\n"
    },
    {
        "number": 4004,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, D = map(int, stdin.split())\n    for i in range(N):\n        stdin_input = stdin.split()\n        if len(stdin_input)!= 3:\n            continue\n        num1 = int(stdin_input[0])\n        num2 = int(stdin_input[1])\n        num3 = int(stdin_input[2])\n        if num1 <= 0 or num2 <= 0 or num3 <= 0:\n            return -1\n        if num1 + D <= num2 and num2 + D <= num3:\n            print(num1+D)\n            print(num2+D)\n            print(num3+D)\n            return num1+D\n        else:\n            print(-1)\n            return -1\n\nTest\n3\n1 4 4 7 4 1\n2 2 5 2 5\n3\n\n5\n2 2 5 2 5\n3\n\n4\n2 3 3 3 3\n3\n\n2\n2 8\n\n2\n1 4 4 7 4 1\n3\n\n3\n3 8\n\n-1\n\n8\n"
    },
    {
        "number": 4004,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    min_num = a[0] + a[1]\n\n    # if the array is empty\n    if not a:\n        return -1\n\n    # if the array is not empty\n    if min_num < 0:\n        return -1\n\n    # if the first value is equal to second value,\n    # return the minimum non-negative value\n    if a[0] == a[1]:\n        return min_num\n\n    # if the first value is not equal to the second value,\n    # perform addition of the first value and the second value\n    else:\n        min_num = a[0] + a[1]\n        for i in range(2, len(a)):\n            min_num = min(min_num, a[i] + a[i - 1])\n\n    return min_num"
    },
    {
        "number": 4004,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = [int(n) for n in stdin.split()]\n\n    def dfs(a, d):\n        if len(a) == 0:\n            return -1\n        if len(a) == 1:\n            return a[0] - d\n        else:\n            return min(a[0], a[1] + d) - min(a[0], a[2] + d)\n\n    ans = min(a[0], a[1] + d, a[2] + d)\n    for i in range(3, n):\n        ans = min(ans, dfs(a[:i], -1) + d)\n    return ans\n\n\nprint(solution(\"1 3 4 5 6 7 8 9 10\"))\nprint(solution(\"1 2 3 4 5 6 7 8 9 10\"))\nprint(solution(\"2 3 4 5 6 7 8 9 10\"))\nprint(solution(\"2 4 5 6 7 8 9 10\"))\nprint(solution(\"1 1 1 1 1 2 2 3 3 4 4 5 6 7 8 9 10\"))\n"
    },
    {
        "number": 4004,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, D = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    \n    def check(a):\n        a_sum = sum(a)\n        for i in range(len(a)):\n            if a[i]!= a_sum - D and a[i]!= D:\n                return False\n            \n        return True\n\n    if check(a):\n        return D\n    else:\n        return -1"
    },
    {
        "number": 4004,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a_dict = dict()\n    for _ in range(n):\n        a, b = map(int, stdin.strip().split())\n        a_dict[a] = b\n    \n    c_dict = dict()\n    for key, value in a_dict.items():\n        c_dict[key] = value + a_dict[key]\n        c_dict[key] = c_dict[key] - a_dict[key]\n        c_dict[key] = c_dict[key] % 100\n        \n    return str(min(c_dict.keys()))\n\nThe solution in\nthe case of random variables (RV) is as follows:\n\n$f(x) = x = x+f(x-1),$f'(x) = x-f'(x),$f'(x) = x+f'(x+f'(x)),$f'(x) = x-f'(x),$f'(x) = x+f'(x+f'(x+f'(x))),$f'(x) = x-f'(x),$f'(x) = x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x)))))$,$f'(x) = x-f'(x),$f'(x) = x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'(x+f'"
    },
    {
        "number": 4004,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    a = [int(i) for i in a]\n    \n    curr = 0\n    for i in range(n):\n        curr = a[i] + curr\n        \n    curr = curr % 10\n    curr = curr - 1\n    \n    for i in range(n):\n        if a[i] <= curr:\n            a[i] = curr\n            \n    print(' '.join([str(i) for i in a]))\n    return -1"
    },
    {
        "number": 4004,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    a = sorted(list(set(a)))\n    if len(a)!= n: return -1\n    return ''.join(str(min(a)-min(a[i] for i in range(n))) if a[i] - a[i]!= 0 else '-1')"
    },
    {
        "number": 4004,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\" \")[0])\n    a_list = [int(i) for i in stdin.split(\" \")]\n    answer = -1\n    for i in range(n-1):\n        temp = 0\n        for j in range(i+1, n):\n            if temp < a_list[j] + a_list[j-i]:\n                temp = a_list[j] + a_list[j-i]\n        answer = max(answer, temp)\n    return answer if answer!= -1 else -1\n"
    },
    {
        "number": 4004,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    for i in range(n):\n        a[i] += a[i + 1] if a[i + 1] < a[i] else a[i + 1] - a[i]\n    for i in range(n):\n        if a[i] < 0:\n            return -1\n    return min(a)\n"
    },
    {
        "number": 4005,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    x1, y1, x2, y2 = map(int, stdin.split())\n    \n    x_1, y_1 = x1, y1\n    x_2, y_2 = x2, y2\n    x_3, y_3 = x2, y2\n    x_4, y_4 = x1, y2\n    x_5, y_5 = x1, y1\n    x_6, y_6 = x2, y2\n    \n    if x_1 > x_2 or x_1 > x_3 or x_1 > x_4 or x_1 > x_5 or x_1 > x_6:\n        return \"NO\"\n    if y_1 > y_2 or y_1 > y_3 or y_1 > y_4 or y_1 > y_5 or y_1 > y_6:\n        return \"NO\"\n    \n    for i in range(x_1, x_2 + 1):\n        if x_1 < x_2:\n            if x_3 < x_4:\n                if x_5 < x_6:\n                    if x_1 == i:\n                        continue\n                    else:\n                        if x_2 == i:\n                            continue\n                        else:\n                            if x_3 == i:\n                                continue\n                            else:\n                                if x_4 == i:\n                                    continue\n                                else:\n                                    if x_5 == i:\n                                        continue\n                                    else:\n                                        if x_6 == i:\n                                            continue\n                                        else:\n                                            if x_1 == i:\n                                                continue\n                                            else:\n                                                if x_2 == i:\n                                                    continue\n                                                else:\n                                                    if x_3 == i:\n                                                        continue\n                                                    else:\n                                                        if x_4 == i:\n                                                            continue\n                                                        else:\n                                                            if x_5 == i:\n                                                                continue\n                                                        else:\n                                                            if x_6 == i:\n                                                                continue\n                                                        else:\n                                                            if x_1 == i:\n                                                                continue\n                                                        else:\n                                                            if x_2 == i:\n                                                                continue\n                                                        else:\n                                                            if x_3 == i:\n                                                                continue\n                                                        else:\n                                                            if x_4 == i:\n                                                                continue\n                                                        else:\n                                                            if x_5 == i:\n                                                                continue\n                                                        else:\n                                                            if x_6 == i:\n                                                                continue\n                                                        else:\n                                                            if x_1 == i:\n                                                                continue\n                                                        else:\n                                                            if x_2 == i:\n                                                                continue\n                                                        else:\n                                                            if x_3 == i:\n                                                                continue\n                                                        else:\n                                                            if x_4 == i:\n                                                                continue\n                                                        else:\n                                                            if x_5 == i:\n                                                                continue\n                                                        else:\n                                                            if x_6 == i:\n                                                                continue\n                                                        else:\n                                                            if x_1 == i:\n                                                                continue\n                                                        else:\n                                                            if x_2 == i:\n                                                                continue\n                                                        else:\n                                                            if x_3 == i:\n                                                                continue\n                                                        else:\n                                                            if x_4 == i:\n                                                                continue\n                                                        else:\n                                                            if x_5 == i:\n                                                                continue\n                                                        else:\n                                                            if x_6 == i:\n                                                                continue\n                                                        else:\n                                                            if x_1 == i:\n                                                                continue\n                                                        else:\n                                                            if x_2 == i:\n                                                                continue\n                                                        else:\n                                     "
    },
    {
        "number": 4005,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    x1, y1, x2, y2 = map(int, stdin.split())\n    if x1 > x2 or y1 > y2:\n        return 'NO'\n    if x1 == x2:\n        if y1 <= y2:\n            return 'YES'\n    if y1 == y2:\n        if x1 <= x2:\n            return 'YES'\n    if x1 < x2 and y1 < y2:\n        return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 4005,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = map(int, stdin.split())\n\n    x1 = (x1 - 0.5) / 100\n    y1 = (y1 - 0.5) / 100\n    x2 = (x2 - 0.5) / 100\n    y2 = (y2 - 0.5) / 100\n\n    if x1 * x2 > y1 * y2:\n        return 'NO'\n    else:\n        return 'YES'\n"
    },
    {
        "number": 4005,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, x_2, y_2 = map(int, stdin.split())\n\n    x_3, y_3, x_4, y_4 = map(int, stdin.split())\n\n    x_5, y_5, x_6, y_6 = map(int, stdin.split())\n\n    # TODO: Write an explanation for the given example.\n    # Fill in the blanks below with appropriate explanations.\n    #\n    # The black sheet is not covered by black sheets\n    # A point is not covered by black sheets or a coordinate is not covered by black sheets.\n    # These conditions are:\n\n    if (x_1 - x_2)!= 0 or (y_1 - y_2)!= 0 or (x_3 - x_4)!= 0 or (y_3 - y_4)!= 0 or (x_5 - x_6)!= 0 or (y_5 - y_6)!= 0:\n        return \"NO\"\n    else:\n        return \"YES\"\n\n\ndef"
    },
    {
        "number": 4005,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    b = list(map(int, stdin.split()))\n    \n    x_1, y_1 = b[0], b[1]\n    x_2, y_2 = b[2], b[3]\n    x_3, y_3 = b[4], b[5]\n    x_4, y_4 = b[6], b[7]\n    x_5, y_5 = b[8], b[9]\n    x_6, y_6 = b[10], b[11]\n\n    x_1 = (x_1 - x_3) * y_1 - x_2 * y_2\n    x_2 = (x_2 - x_4) * y_1 - x_3 * y_2\n    x_3 = (x_3 - x_5) * y_1 - x_4 * y_2\n    x_4 = (x_4 - x_6) * y_1 - x_5 * y_2\n    x_5 = (x_5 - x_7) * y_1 - x_6 * y_2\n    x_6 = (x_6 - x_8) * y_1 - x_7 * y_2\n\n    if x_1 < 0 or y_1 < 0 or x_2 < 0 or y_2 < 0 or x_3 < 0 or y_3 < 0 or x_4 < 0 or y_4 < 0 or x_5 < 0 or y_5 < 0 or x_6 < 0 or y_6 < 0:\n        return \"NO\"\n    \n    if x_1 == 0 and y_1 == 0:\n        if x_2 == 0 and y_2 == 0:\n            if x_3 == 0 and y_3 == 0:\n                if x_4 == 0 and y_4 == 0:\n                    if x_5 == 0 and y_5 == 0:\n                        if x_6 == 0 and y_6 == 0:\n                            return \"YES\"\n                        else:\n                            return \"NO\"\n                    else:\n                        return \"NO\"\n                else:\n                    return \"NO\"\n            else:\n                return \"NO\"\n        else:\n            return \"NO\"\n    else:\n        return \"YES\"\n\nsolution(stdin)\n"
    },
    {
        "number": 4005,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x,y=map(int,stdin.split())\n    x_1,y_1=map(int,stdin.split())\n    x_2,y_2=map(int,stdin.split())\n    x_3,y_3=map(int,stdin.split())\n    x_4,y_4=map(int,stdin.split())\n    x_5,y_5=map(int,stdin.split())\n    x_6,y_6=map(int,stdin.split())\n    \n    \n    \n    if x_1<x_2 and x_1<x_3 and x_1<x_4:\n        return \"NO\"\n    if x_2<x_1 and x_2<x_3 and x_2<x_4:\n        return \"NO\"\n    if x_3<x_2 and x_3<x_1 and x_3<x_4:\n        return \"NO\"\n    if x_4<x_3 and x_4<x_1 and x_4<x_2:\n        return \"NO\"\n    if x_5<x_4 and x_5<x_3 and x_5<x_2:\n        return \"NO\"\n    if x_6<x_5 and x_6<x_4 and x_6<x_3:\n        return \"NO\"\n    \n    \n    \n    \n    if abs(y_1-y_2)<=abs(x_1-x_2) and abs(y_1-y_3)<=abs(x_1-x_3) and abs(y_1-y_4)<=abs(x_1-x_4) and abs(y_1-y_5)<=abs(x_1-x_5) and abs(y_1-y_6)<=abs(x_1-x_6):\n        return \"YES\"\n    if abs(y_2-y_1)<=abs(x_2-x_1) and abs(y_2-y_3)<=abs(x_2-x_3) and abs(y_2-y_4)<=abs(x_2-x_4) and abs(y_2-y_5)<=abs(x_2-x_5) and abs(y_2-y_6)<=abs(x_2-x_6):\n        return \"YES\"\n    if abs(y_3-y_2)<=abs(x_3-x_2) and abs(y_3-y_1)<=abs(x_3-x_1) and abs(y_3-y_4)<=abs(x_3-x_4) and abs(y_3-y_5)<=abs(x_3-x_5) and abs(y_3-y_6)<=abs(x_3-x_6):\n        return \"YES\"\n    if abs(y_4-y_3)<=abs(x_4-x_3) and abs(y_4-y_1)<=abs(x_4-x_1) and abs(y_4-y_4)<=abs(x_4-x_4) and abs(y_4-y_5)<=abs(x_4-x_5) and abs(y_4-y_6)<=abs(x_4-x_6):\n        return \"YES\"\n    if abs(y_5-y_4)<=abs(x_5-x_4) and abs(y_5-y_3)<=abs(x_5-x_3) and abs(y_5-y_2)<=abs(x_5-x_2) and abs(y_5-y_1)<=abs(x_5-x_1) and abs(y_5-y_5)<=abs(x_5-x_5) and abs(y_5-y_6)<=abs(x_5-x_6):\n        return \"YES\"\n    if abs(y_6-y_5)<=abs(x_6-x_5) and abs(y_6-y_4)<=abs(x_6-x_4) and abs(y_6-y_3)<=abs(x_6-x_3) and abs(y_6-y_2)<=abs(x_6-x_2) and abs(y_6-y_1)<=abs(x_6-x_1) and abs(y_6-y_5)<=abs(x_6-x_5) and abs(y_6-y_6)<=abs(x_6-x_6):\n        return \"YES\"\n    return \"NO\"\n        \n    "
    },
    {
        "number": 4005,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = [int(i) for i in stdin.split()]\n    # print(x1, y1, x2, y2)\n    x1_min, y1_min = min(x1, x2), min(y1, y2)\n    x2_max, y2_max = max(x1, x2), max(y1, y2)\n    x1_min_abs, y1_min_abs = abs(x1 - x1_min), abs(y1 - y1_min)\n    x2_max_abs, y2_max_abs = abs(x2 - x2_max), abs(y2 - y2_max)\n    # print(x1_min_abs, y1_min_abs, x2_max_abs, y2_max_abs)\n    if (x1_min_abs + y1_min_abs)!= (x2_max_abs + y2_max_abs):\n        return \"NO\"\n    return \"YES\""
    },
    {
        "number": 4005,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    coord_1 = [int(x) for x in stdin.split()]\n    coord_2 = [int(x) for x in stdin.split()]\n    \n    for coord in coord_2:\n        x_1 = coord[0]\n        y_1 = coord[1]\n        x_2 = coord[2]\n        y_2 = coord[3]\n        \n        x_3 = x_1\n        y_3 = y_1\n        x_4 = x_2\n        y_4 = y_2\n        \n        x_5 = x_3\n        y_5 = y_3\n        x_6 = x_4\n        y_6 = y_4\n        \n        if x_1 < x_3 or x_1 > x_4 or y_1 < y_3 or y_1 > y_4:\n            return \"NO\"\n        if x_2 < x_5 or x_2 > x_6 or y_2 < y_5 or y_2 > y_6:\n            return \"NO\"\n    \n    return \"YES\"\n\n\"\"\"\ndef"
    },
    {
        "number": 4005,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    w = list(map(int, stdin.split()))\n    x1, y1 = w[0], w[1]\n    x2, y2 = w[2], w[3]\n    x3, y3 = w[4], w[5]\n    x4, y4 = w[6], w[7]\n    x5, y5 = w[8], w[9]\n    \n    minx = min(x1,x2,x3,x4,x5)\n    maxx = max(x1,x2,x3,x4,x5)\n    miny = min(y1,y2,y3,y4,y5)\n    maxy = max(y1,y2,y3,y4,y5)\n    \n    x = abs(minx - maxx)\n    y = abs(miny - maxy)\n    \n    if x == 0 or y == 0:\n        return \"NO\"\n    \n    if x < y and x > x1:\n        return \"YES\"\n    elif x < y and y > y1:\n        return \"YES\"\n    elif x > y and x < y2:\n        return \"YES\"\n    elif x > y and y < y3:\n        return \"YES\"\n    elif x > y and y < y4:\n        return \"YES\"\n    elif x < y and y < y5:\n        return \"YES\"\n    elif x > y and y > y5:\n        return \"YES\"\n\n\n\ndef"
    },
    {
        "number": 4005,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, x_2, y_2 = map(int, stdin.split(\" \"))\n    x_3, y_3, x_4, y_4 = map(int, stdin.split(\" \"))\n    x_5, y_5, x_6, y_6 = map(int, stdin.split(\" \"))\n    if (x_1 - x_2) * (y_1 - y_2) > (x_3 - x_4) * (y_3 - y_4):\n        return \"NO\"\n    if x_1 - x_3 <= 0 or y_1 - y_3 <= 0:\n        return \"NO\"\n    if x_2 - x_4 <= 0 or y_2 - y_4 <= 0:\n        return \"NO\"\n    if x_1 - x_5 <= 0 or y_1 - y_5 <= 0:\n        return \"NO\"\n    if x_3 - x_6 <= 0 or y_3 - y_6 <= 0:\n        return \"NO\"\n    if (x_1 - x_3) * (y_1 - y_3) <= (x_2 - x_4) * (y_2 - y_4):\n        return \"NO\"\n    return \"YES\"\n\n\n\ndef"
    },
    {
        "number": 4006,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    reachable = 0\n    for i in range(n):\n        x = int(stdin)\n        if x % 2 == 0:\n            reachable += 1\n        else:\n            reachable -= 1\n    return str(reachable)\n\nprint(solution(\"1098\"))\n\nOutput: 20\n\nExplanation:\nThe numbers that are reachable from 1098 are:\n\n$1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 1098, 1099$.\n\n----------------------\n\n\n\n\ndef"
    },
    {
        "number": 4006,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    result = 0\n    for i in range(1, n + 1):\n        for j in range(i):\n            if not j:\n                result += 1\n            if not j:\n                result += 1\n        if not i:\n            result += 1\n    return str(result)\n\"\"\"\n\ndef"
    },
    {
        "number": 4006,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    answer = 0\n    num = []\n    result = []\n    for i in range(10**9):\n        num.append(i)\n    for i in range(1, 10**9 + 1):\n        if num[i] in num:\n            result.append(num.count(num[i]))\n            num.remove(num[i])\n    print(len(result))\n    for i in range(len(result)):\n        answer += result[i]\n    print(answer)\n    return str(answer)\n\nSolution)\n\n\ndef"
    },
    {
        "number": 4006,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    data = []\n    for _ in range(int(stdin)):\n        data.append(int(input()))\n    data = sorted(data)\n    count = 0\n    for i in range(len(data)):\n        for j in range(i+1, len(data)):\n            if data[i] + data[j] == data[0]:\n                count += 1\n    return str(count)\n"
    },
    {
        "number": 4006,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    answer = 0\n    def solve(n, m):\n        if m == 1:\n            return 1\n        elif n == 1:\n            return 0\n        else:\n            return solve(n - 1, m) + solve(n - 2, m - 1) + solve(n - 3, m - 2) + solve(n - 4, m - 3)\n\n    return str(solve(n, m))\n"
    },
    {
        "number": 4006,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    \n    if n < 2:\n        return '1'\n    \n    f = lambda x: x if x > 1 else x + 1\n    \n    reachable = [f(i) for i in range(2, n+1)]\n    \n    count = 0\n    \n    for i in reachable:\n        count += (reachable.count(i))\n    \n    return str(count)\n\nprint(solution(\"1098\"))\n"
    },
    {
        "number": 4006,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = stdin\n    n = int(n)\n    return str(n - 1)\n\n\ndef"
    },
    {
        "number": 4006,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str(sum(set(map(int, stdin.split()))))\n"
    },
    {
        "number": 4006,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n<1: return \"\"\n    \n    def is_reachable(x):\n        for i in range(1, x+1):\n            if is_reachable(i):\n                return True\n        return False\n    \n    reachable = 0\n    for i in range(1, n+1):\n        if is_reachable(i):\n            reachable+=1\n    return str(reachable)\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4006,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin)\n    \n    if n == 0:\n        return ''\n    \n    if n <= 10**9:\n        return n\n    \n    result = 0\n    \n    for x in range(10**9):\n        if x in range(n, n+1):\n            result += 1\n        \n    return str(result)\n\"\"\"\n\nclass Solution:\n    def solution(self, stdin):\n        x,y=map(int,stdin.split())\n        \n        if x in range(10**9) and y in range(10**9):\n            return str(x+y)\n        \n        result=0\n        \n        for i in range(10**9):\n            if i in range(x,x+y+1):\n                result+=1\n                \n        return str(result)\n"
    },
    {
        "number": 4007,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    f = [int(i) for i in stdin.split()[1:]]\n    \n    res = []\n    \n    for f_i in f:\n        if f_i == 0:\n            res.append(f_i)\n            continue\n        if len(set(res))!= len(res):\n            return \"\"\n        elif len(set(res)) == 1 and f_i == f[0]:\n            res.pop()\n            continue\n        if len(set(res)) == len(res):\n            return \"\"\n        if len(set(res)) == len(res) + 1:\n            res.append(f_i)\n        elif len(set(res)) == len(set(res)) + 1:\n            res.pop()\n    return ''.join(map(str, res))\n"
    },
    {
        "number": 4007,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    friends = [int(x) for x in stdin.split()]\n    friends.sort()\n    friend = friends[k-1]\n    if friend == friends[n-1]:\n        return \"Yes\"\n    if friends[n-1] == friends[n-2]:\n        return \"Yes\"\n    if friend == friends[n-2]:\n        return \"Yes\"\n    if friend == friends[n-3]:\n        return \"Yes\"\n    if friend == friends[n-4]:\n        return \"Yes\"\n    if friend == friends[n-5]:\n        return \"Yes\"\n    if friend == friends[n-6]:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4007,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return \"0\"\n    else:\n        f = [list(map(int, input().split())) for _ in range(n)]\n        f = [list(filter(lambda x: x!= 0, x)) for x in f]\n        return str(min(f) + max(f) - 2)"
    },
    {
        "number": 4007,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin.strip())\n\n    nf_1 = 0\n    nf_2 = 0\n    nf_3 = 0\n    nf_4 = 0\n\n    nf_list = list(map(int, stdin.strip().split()))\n\n    for nf_i in nf_list:\n        if nf_i!= 0:\n            nf_1 += 1\n        if nf_i!= n:\n            nf_2 += 1\n\n    nf_list_reverse = list(map(int, reversed(nf_list)))\n\n    for nf_i in nf_list_reverse:\n        if nf_i!= 0:\n            nf_4 += 1\n        if nf_i!= n:\n            nf_3 += 1\n\n    print(nf_1, nf_2, nf_3, nf_4)\n    return str(nf_1)+str(nf_2)+str(nf_3)+str(nf_4)\n\ndef"
    },
    {
        "number": 4007,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, friends = map(int, stdin.split())\n    f_n = set(map(int, stdin.split()))\n    f_n.discard(0)\n    count_f = 0\n    for friend in friends:\n        if friend in f_n:\n            count_f += 1\n            f_n.discard(friend)\n    count_f += 1\n    if len(f_n)!= 1:\n        return 'Error'\n    if count_f!= 1:\n        return 'Error'\n    return '%s %s' % (count_f, f_n)\n"
    },
    {
        "number": 4007,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    num_line, num_line_2, num_line_3 = map(int, stdin.split())\n    friends = [0] * num_line\n    for i in range(num_line):\n        friends[i] = [0] * num_line_2\n        for j in range(num_line_2):\n            friends[i][j] = int(stdin[i + j * num_line_3])\n    result = []\n    for i in range(num_line):\n        result.append([friends[i]])\n    for i in range(num_line):\n        if friends[i] == 0:\n            for j in range(num_line_2):\n                if friends[i][j] == 0:\n                    result[i].append(j + 1)\n    return '\\n'.join(map(''.join, result))\n\n\ndef"
    },
    {
        "number": 4007,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, *friends = map(int, stdin.split())\n    for i in range(n):\n        friends.sort()\n    for i, friend in enumerate(friends):\n        friends[i] -= 1\n        if friend == 0:\n            friends[friends.index(0)] += 1\n    return str(friends.index(0)+1)\n"
    },
    {
        "number": 4007,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip().split(' ')[0])\n    f_1 = list(map(int,stdin.strip().split(' ')))\n    f_2 = f_1\n    n -= 1\n    while n > 0:\n        f_1 = f_1[1:]\n        f_2 = f_2[:-1]\n        n -= 1\n    \n    f_1 = sorted(f_1)\n    f_2 = sorted(f_2)\n    answer = []\n    for i in range(len(f_1)):\n        for j in range(i+1,len(f_1)):\n            if f_1[i] + f_2[j] == n:\n                answer.append(f_1[i])\n                answer.append(f_2[j])\n                break\n    if len(answer) == 0:\n        print(n+1)\n    else:\n        for i in range(len(answer)):\n            print(answer[i], end ='')\n    return str(len(answer))\n"
    },
    {
        "number": 4007,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, friends = map(int, stdin.split())\n    if n % 2 == 1:\n        n = n - 1\n    s = list(map(int, stdin.split()))\n    s.sort()\n    gifts = []\n    i = 0\n    while i < n:\n        if s[i] == 0:\n            gifts.append(s[i])\n            i += 1\n        else:\n            i += 1\n    gifts = list(set(gifts))\n    gifts.sort()\n    answer = ''\n    for i in gifts:\n        for j in range(i, n):\n            if s[j] == 0:\n                break\n        else:\n            answer = s[i] + answer\n    return answer\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4007,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, f_1, f_2, f_3, f_4, f_5, f_6 = map(int, stdin.split())\n    ans = f_1 + f_2 + f_3 + f_4 + f_5 + f_6\n    nums = [i for i in range(1, n+1)]\n    # print(nums)\n    # print(ans)\n    # print('1')\n    \n    # print('2')\n    # print(nums)\n    # print(ans)\n    # print('3')\n    \n    # print('4')\n    # print(nums)\n    # print(ans)\n    # print('5')\n    \n    # print('6')\n    # print(nums)\n    # print(ans)\n    # print('7')\n    # print(nums)\n    # print(ans)\n    \n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] == nums[j] and nums[i] == ans:\n                return str(nums[j])\n    \n    return 'Not Possible'\n"
    },
    {
        "number": 4008,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    return answer(n, k, a)\n\ndef"
    },
    {
        "number": 4008,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    \n    for i in range(1, k):\n        a.sort(key=lambda x: x * (i + 1))\n    \n    c = []\n    c.extend(a[0:len(a)//2])\n    c.extend(a[len(a)//2:])\n    \n    return \"\".join(map(str, c))"
    },
    {
        "number": 4008,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int,stdin.split(' ')))\n    n = len(a)\n    k = len(set(a))\n    for i in range(1,n):\n        a[i] = k\n    for i in range(n-1):\n        a[i+1] = max(a[i],a[i+1])\n    for i in range(n-1):\n        a[i+1] = min(a[i+1],a[i])\n    for i in range(n-2,-1,-1):\n        if a[i] == a[i+1]:\n            a[i] = 0\n    for i in range(n-1):\n        a[i] = max(a[i],a[i+1])\n    for i in range(n-2,-1,-1):\n        if a[i] == a[i+1]:\n            a[i] = 0\n    return \"NO\" if sum(a) == 0 else \"YES\""
    },
    {
        "number": 4008,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split()]\n    a = [list(map(int, input().split())) for i in range(n)]\n    answer = 'YES'\n    color = [0] * n\n    for i in range(n):\n        if color[i] == 0:\n            for j in range(n):\n                if i!= j and a[j][i] == a[i][j]:\n                    color[j] = a[i][j]\n                    a[i][j] = 0\n                    if len(color) == k:\n                        answer = 'NO'\n        if len(color) == k:\n            answer = 'YES'\n    return answer\n\nsolution(input())\n"
    },
    {
        "number": 4008,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n\n    def count_palindromic(n, k):\n        if n < k:\n            return 0\n\n        palindrome_cnt = 0\n        palindrome_cnt_2 = 0\n        palindrome_cnt_3 = 0\n        palindrome_cnt_4 = 0\n\n        for i in range(k):\n            palindrome_cnt_1 = palindrome_cnt\n            palindrome_cnt_2 = palindrome_cnt_2\n            palindrome_cnt_3 = palindrome_cnt_3\n            palindrome_cnt_4 = palindrome_cnt_4\n\n            if a[i] % 2 == 0:\n                palindrome_cnt += 1\n            elif a[i] % 2 == 1:\n                palindrome_cnt_1 += 1\n            else:\n                palindrome_cnt_2 += 1\n            if a[i] % 3 == 0:\n                palindrome_cnt += 1\n            elif a[i] % 3 == 1:\n                palindrome_cnt_3 += 1\n            else:\n                palindrome_cnt_4 += 1\n            if a[i] % 5 == 0:\n                palindrome_cnt += 1\n            elif a[i] % 5 == 1:\n                palindrome_cnt_4 += 1\n            else:\n                palindrome_cnt_3 += 1\n\n            if palindrome_cnt_1 > palindrome_cnt_2 and palindrome_cnt_2 > palindrome_cnt_3 and palindrome_cnt_2 > palindrome_cnt_4:\n                palindrome_cnt_1, palindrome_cnt_2 = palindrome_cnt_2, palindrome_cnt_1\n                palindrome_cnt_3, palindrome_cnt_4 = palindrome_cnt_4, palindrome_cnt_3\n\n            palindrome_cnt_1 = palindrome_cnt - palindrome_cnt_1\n            palindrome_cnt_2 = palindrome_cnt - palindrome_cnt_2\n            palindrome_cnt_3 = palindrome_cnt - palindrome_cnt_3\n            palindrome_cnt_4 = palindrome_cnt - palindrome_cnt_4\n\n            if palindrome_cnt_1 < k - 1:\n                palindrome_cnt_1 += 1\n            if palindrome_cnt_2 < k - 1:\n                palindrome_cnt_2 += 1\n            if palindrome_cnt_3 < k - 1:\n                palindrome_cnt_3 += 1\n            if palindrome_cnt_4 < k - 1:\n                palindrome_cnt_4 += 1\n\n        return palindrome_cnt_1 + palindrome_cnt_2 + palindrome_cnt_3 + palindrome_cnt_4\n\n\n    def palindrome(n, k):\n        palindrome_cnt = 0\n        for i in range(k):\n            palindrome_cnt_1 = count_palindromic(n, k)\n            palindrome_cnt_2 = count_palindromic(n, k)\n            palindrome_cnt_3 = count_palindromic(n, k)\n            palindrome_cnt_4 = count_palindromic(n, k)\n\n            if palindrome_cnt_1 > palindrome_cnt_2 and palindrome_cnt_2 > palindrome_cnt_3 and palindrome_cnt_2 > palindrome_cnt_4:\n                palindrome_cnt_1, palindrome_cnt_2 = palindrome_cnt_2, palindrome_cnt_1\n                palindrome_cnt_3, palindrome_cnt_4 = palindrome_cnt_4, palindrome_cnt_3\n\n            palindrome_cnt_1 = palindrome_cnt - palindrome_cnt_1\n            palindrome_cnt_2 = palindrome_cnt - palindrome_cnt_2\n            palindrome_cnt_3 = palindrome_cnt - palindrome_cnt_3\n            palindrome_cnt_4 = palindrome_cnt - palindrome_cnt_4\n\n            if palindrome_cnt_1 < k - 1:\n                palindrome_cnt_1 += 1\n            if palindrome_cnt_2 < k - 1:\n                palindrome_cnt_2 += 1\n            if palindrome_cnt_3 < k - 1:\n                palindrome_cnt_3 += 1\n            if palindrome_cnt_4 < k - 1:\n                palindrome_cnt_4 += 1\n\n        return palindrome_cnt_1 + palindrome_cnt_2 + palindrome_cnt_3 + palindrome_cnt_4\n\n\n    count = palindrome(n, k)\n    print(count) if count!= 'NO' else print('NO')\n\n\n    # write your code here"
    },
    {
        "number": 4008,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    for i in range(k):\n        for j in range(i + 1, k):\n            if i > j:\n                a[i], a[j] = a[j], a[i]\n    for i in a:\n        if i == i:\n            return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 4008,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    color = {}\n    for _ in range(n):\n        color[int(stdin.split()[0])] = int(stdin.split()[1])\n    possible = True\n    while possible:\n        possible = False\n        for i in range(k):\n            if color[i] not in color:\n                possible = True\n                break\n    if possible:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 4008,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\ndef"
    },
    {
        "number": 4008,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    array = [int(stdin) for _ in range(n)]\n    \n    answer = \"NO\"\n    \n    for i in range(k):\n        # Remove all non-color numbers\n        color = 0\n        for element in array:\n            color += 1\n            if color == i + 1:\n                answer = \"YES\"\n                break\n    return answer\n\ndef"
    },
    {
        "number": 4008,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    count = 0\n    for i in range(n):\n        # print(a[i])\n        c = 0\n        for j in range(k):\n            if a[i][j]!= a[i][j+1]:\n                c += 1\n        count += c\n        if count > 1:\n            print(\"NO\")\n            return\n    print(\"YES\")\n    return \"NO\"\n\n\n\n-----Time complexity-----\n\nTime complexity is O(n) for the given array, as it depends on the number of elements in the array.\n\nTime complexity is O(n) for the given array, as it depends on the number of elements in the array.\n\nTime complexity is O(n) for the given array, as it depends on the number of elements in the array.\n\nTime complexity is O(n) for the given array, as it depends on the number of elements in the array.\n\nTime complexity is O(n) for the given array, as it depends on the number of elements in the array.\n\nTime complexity is O(n) for the given array, as it depends on the number of elements in the array.\n\nTime complexity is O(n) for the given array, as it depends on the number of elements in the array.\n\nTime complexity is O(n) for the given array, as it depends on the number of elements in the array.\n\n\n-----Space complexity-----\n\nSpace complexity is O(1) for the given array, as it depends on the number of elements in the array.\n\nSpace complexity is O(1) for the given array, as it depends on the number of elements in the array.\n\nSpace complexity is O(1) for the given array, as it depends on the number of elements in the array.\n\nSpace complexity is O(n) for the given array, as it depends on the number of elements in the array.\n\nSpace complexity is O(n) for the given array, as it depends on the number of elements in the array.\n\nSpace complexity is O(n) for the given array, as it depends on the number of elements in the array.\n\nSpace complexity is O(n) for the given array, as it depends on the number of elements in the array.\n\nSpace complexity is O(n) for the given array, as it depends on the number of elements in the array.\n\nSpace complexity is O(n) for the given array, as it depends on the number of elements in the array.\n\nSpace complexity is O(n) for the given array, as it depends on the number of elements in the array.\n\nSpace complexity is O(n) for the given array, as it depends on the number of elements in the array.\n\nSpace complexity is O(n) for the given array, as it depends on the number of elements in the array.\n\nSpace complexity is O(n) for the given array, as it depends on the number of elements in the array.\n\nSpace complexity is O(n) for the given array, as it depends on the number of elements in the array.\n\n\n-----Algorithm-----\n\nThe problem is solved by finding the number of color sets $c_{i}=1, c_{i}=2, c_{i}=3...$ where the elements are only in the $i$-th color in the given array.\n\nThen, for each $i$ from $1$ to $k$ there are two color sets $c_{i}=1, c_{i}=2, c_{i}=3...$ and $c_{i}=4$ if there is a pair of $i$-th color $c_{i}=1, \\dots c_{i}=4$ where $1 \\le c_i \\le k$ and $c_i$ is the color of the $i$-th element of the given array.\n\nFinally, the number of sets is the value of $c_{i}$ for all $i$ from $1$ to $k$.\n\nFor example, if $1 \\le c_1 \\le k$, $c_{1}=1$ is trivial, $c_{1}=2$ is trivial, $c_{1}=3$, and $c_{1}=4$. The number of color sets $c_{i}=1, c_{i}=2, c_{i}=3...$ is the value of $c_{i}$ for all $i$ from $1$ to $k$.\n\nThe number of color sets is also the sum of all values $c_{i}=1, c_{i}=2, c_{i}=3...$ and $c_{i}=4$.\n\nFinally, the sets is calculated by using the formula $c_{i}=1, c_{i}=2, c_{i}=3...$ where c_{i} = c_{i} = c_{i} = c_{i} = c_{i} = c_{i} = c_{i} = c_{i} = c_{i} = c_{i} = c_{i} = c_{i} = c_{i} = c_{i} = c_{i} = c_{i} = c_{i} = c_{i} = c_{i} = c_{i} = c_{i} = c_{i} = c_{i} = c_{i} = c_{i} = c_{i} = c_{i} = c_{i} = c_{i} = c_{i} = c_{i} = c_{i} = c_{i} = c_{i} = c_{i} = c_{i} = c_{i} = c_{i} = c_{i} = c_{i} = c_{i} = c_{i} = c_{i} = c_{i} = c_{i} = c_{i} = c_{i} = c_{i} = c_{i} = c_{i} = c_{i} = c_{i} = c_{i} = c_{i} = c_{i} = c_{i} = c_{i} = c_{i} = c_{i} = c_{i} = c_{i} = c_{i} = c_{i} = c_{i} = c_{i} = c_{i} = c_{i} = c_{i} = c_{i} = c_{i} = c_{i} = c_{i} = c_{i} = c_{i} = c_{i} = c_{i} = c_{i} = c_{i"
    },
    {
        "number": 4009,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n,x,y=map(int,stdin.split())\n    ans=10**x+10**y\n    x=10**x\n    y=10**y\n    n=n+1\n    num=[]\n    i=0\n    while(i<n):\n        for j in range(10):\n            num.append(str(x+10**i))\n        for j in range(10):\n            num.append(str(y+10**i))\n        num.append(str(ans%(10**x+10**y)))\n        ans=ans//(10**x+10**y)\n        i+=1\n    print(''.join(num))\n    return str(ans)\n\n\n--------Examples--------\n\nInput\n2\n11 1001\n\nOutput\n1\n\nInput\n2\n11 1001\n\nOutput\n3\n\n'''\ndef"
    },
    {
        "number": 4009,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split())\n    #print(stdin)\n    x_1 = x % n\n    x_2 = x % 10 ** (x_1)\n    y_1 = y % 10 ** (x_2)\n    y_2 = y % 10 ** (x_2 + 1)\n    if x_2!= y_1:\n        return str(x_1 * y_2 % 100000)\n    else:\n        return str(x_1)\n"
    },
    {
        "number": 4009,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n,x,y = map(int,stdin.split())\n    print(n,x,y)\n    def f(x,y):\n        remainder = y % 10\n        if remainder:\n            return f(x,y*10)+f(x*10,remainder+y)\n        else:\n            return f(x,y)\n    return str(f(x,y))"
    },
    {
        "number": 4009,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split())\n    a = 10 ** (y - x + 1)\n    n = 10 ** n\n    def is_residue(x):\n        return x % n == 0\n    def is_residue_mod(x):\n        return x % a == 0\n    def find_number(x):\n        x = 10 ** (x - x + 1)\n        for i in range(x):\n            if is_residue_mod(i):\n                return i\n            if is_residue(i):\n                return i\n        return -1\n    if is_residue(x):\n        return str(find_number(x))\n    else:\n        return str(x % a)\n\n-----Sample Input-----\n\nInput\n1 5 1\n11010100101\nOutput\n3\n\n\n-----Sample Output-----\n\nInput\n5 5 1\n11010100101\nOutput\n3\n\n\n-----Constraints-----\n\n1 <= n <= 100\n\n1 <= x <= 10^9\n\n1 <= y <= 10^9\n\"\"\"\nimport sys\n\nclass Solution:\n    def minOperations(self, n, x, y):\n        x = 10**(x-1)\n        y = 10**(y-1)\n        return n*(x//y)"
    },
    {
        "number": 4009,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split())\n    res = 1\n    for i in range(y, n, x):\n        if i%x == 0:\n            res+=1\n    return str(res)\n\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n0 <= x <= n - 1\n0 <= y <= n - 1\n\n'''\n\n\nimport math\n\ndef"
    },
    {
        "number": 4009,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    x = int(stdin.strip())\n    y = int(stdin.strip())\n    \n    # 1.\n    def is_correct(n):\n        if n < 0:\n            return False\n        if n > n**3:\n            return False\n        if n == 0:\n            return True\n        if n % 2 == 0:\n            return False\n        \n    def n_remain(n, x, y):\n        while n % x!= 0:\n            n = n // x + 1\n        return n\n        \n    def is_c(n, x, y):\n        if n % x == 0:\n            return True\n        \n    def add_recursion(n, x, y, a):\n        if n % x == 0 and n % y == 0:\n            return a\n        \n        if n % x == 0:\n            return add_recursion(n//x, x, y, a)\n        \n        if n % y == 0:\n            return add_recursion(n//y, x, y, a)\n        \n        return add_recursion(n//x+n//y, x, y, a)\n    \n    def add_operation(n, x, y, a):\n        if n % x == 0 and n % y == 0:\n            a.append(1)\n            return a\n        \n        if n % x == 0:\n            a.append(add_operation(n//x, x, y, a))\n            return a\n        \n        if n % y == 0:\n            a.append(add_operation(n//y, x, y, a))\n            return a\n        \n        if n % x == 0:\n            a.append(add_operation(n//x, x, y, a))\n            return a\n        \n        if n % y == 0:\n            a.append(add_operation(n//y, x, y, a))\n            return a\n        \n        a.append(add_operation(n//x+n//y, x, y, a))\n        return a\n        \n    \n    def cal(n, x, y, a):\n        add_recursion(n, x, y, a)\n        add_operation(n, x, y, a)\n        return sum(a)\n    \n    return cal(n, x, y, [])\n"
    },
    {
        "number": 4009,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    print(max(int(stdin[i]) for i in range(len(stdin))))\n    return str(max(int(stdin[i]) for i in range(len(stdin))))\n"
    },
    {
        "number": 4009,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x,y = map(int, stdin.split())\n    x = x % 10**y\n    y = y % 10**x\n    return str(y) if x == 0 else str(x) + str(y)\n"
    },
    {
        "number": 4009,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    str1, str2, str3 = stdin.split()\n    stdin = list(map(int, str1.split()))\n    stdin = list(map(int, str2.split()))\n    stdin = list(map(int, str3.split()))\n    n = len(stdin)\n    x = len(str1)\n    y = len(str2)\n    x0, y0, x1, y1 = 0, 0, 0, 0\n    for i in range(n):\n        if stdin[i] == 0:\n            x0 = x0 + 1\n        if stdin[i] == 1:\n            y0 = y0 + 1\n        if stdin[i] == 1:\n            x1 = x1 + 1\n        if stdin[i] == 0:\n            y1 = y1 + 1\n    print(min(x0, x1, y0, y1))\n    return str(min(x0, x1, y0, y1))"
    },
    {
        "number": 4009,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    num = []\n    for i in stdin:\n        num.append(i)\n        num.append(0)\n\n    n = int(stdin.split()[0])\n    x = int(stdin.split()[1])\n    y = int(stdin.split()[2])\n    res = 0\n    i = 0\n    while i < n:\n        res += (x ** (n - i) + y) % 10 ** (n - i)\n        i += 1\n    print(res % 10 ** (n - 1))\n    return str(res)\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= x, y <= 10^5\n\nNOTE\nIt is the number with a remainder $10^y$ modulo $10^x$.\n\n-----Time Complexity-----\n\nTime O(n) = n * 2^n\nSpace O(n) = n * 10^(n - 1)\n\n-----Algorithm-----\n\nA simple and simple solution.\n\nUse the \"queue\" and a dict to store the operations from the queue.\nUsing \"queue\" a variable x stores the number of operations that have to be performed.\nThe operations are stored in a list of string operations.\nThen process the number with the list operations, and sort the list.\nThe operations are sorted according to the remainder and modulo 10^y.\n\nOnce the operations have been processed, use \"res\" to store the result of the operations.\n\n\"\"\"\nimport sys\n\n\ndef"
    },
    {
        "number": 4010,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for i in range(n):\n        a = list(map(int, stdin.split()))\n        if sum(a) == sum(a[::-1]):\n            count += 1\n    return 'YES' if count >= n/3 else 'NO'"
    },
    {
        "number": 4010,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    print(a)\n    print(solution1(a, n, k))\n    print(solution2(a, n, k))\n\n\ndef"
    },
    {
        "number": 4010,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if all(i < len(str) for i in range(1, len(stdin) // 3 + 1)) else \"NO\"\n\ndef"
    },
    {
        "number": 4010,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, n, t = map(int, stdin.split())\n    n = t if n < 3 else n % 3\n    if a < n:\n        n -= a\n    for i in range(1, t):\n        print('YES' if n % t == 0 else 'NO')"
    },
    {
        "number": 4010,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = [int(i) for i in stdin.split()]\n    result = []\n    for i in range(n):\n        check = 0\n        for j in range(i, n):\n            if a[i]!= a[j] and a[i] > a[j]:\n                check = 1\n            elif a[i] == a[j] and a[i] > a[j]:\n                check = 0\n                break\n            elif a[i] < a[j] and a[j] > a[i]:\n                check = 0\n                break\n        if check:\n            result.append(\"NO\")\n        else:\n            result.append(\"YES\")\n    return ''.join(result)"
    },
    {
        "number": 4010,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def palindrome(a):\n        if len(a)<=3:\n            return a\n        \n        a1,a2=a[:-1],a[1:]\n        \n        if len(a1)>=len(a2):\n            return palindrome(a1)\n        elif len(a2)>=len(a1):\n            return palindrome(a2)\n        else:\n            return a1+a2\n        \n    return \"YES\" if palindrome(stdin)==\"NO\" else \"NO\"\n"
    },
    {
        "number": 4010,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 3:\n        return \"YES\"\n    for _ in range(n-2):\n        a = []\n        for _ in range(n-2):\n            a.append(int(stdin[n-2-_-1]))\n        a.append(int(stdin[n-1]))\n        a.sort()\n        for i in range(3):\n            if a[i]!= a[i+1]:\n                return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 4010,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int,stdin.strip().split()))\n    palindrome = []\n    for i in range(n):\n        palindrome.append(a[i]**2)\n    palindrome.sort()\n    if palindrome[0] + palindrome[1] == palindrome[-1]:\n        return \"YES\"\n    else:\n        return \"NO\"\n\ndef"
    },
    {
        "number": 4010,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\n\ndef"
    },
    {
        "number": 4010,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split(\"\\n\")\n    # return str(a)\n    a = a[0].split(\" \")\n    a = a[0].split(\"[\")\n    a = a[1].split(\"]\")\n    a = a[0].split(\",\")\n    a = a[0].split(\" \")\n    a = list(filter(None, a))\n    a = [int(i) for i in a]\n    # print(a)\n    if a.count(a.count(a[0])) > 1:\n        return \"YES\"\n    if a.count(a.count(a[-1])) > 1:\n        return \"YES\"\n    for i in range(len(a)):\n        a[i] = a[i] - 1\n    # print(a)\n    if a.count(a.count(a[0])) > 1:\n        return \"NO\"\n    if a.count(a.count(a[-1])) > 1:\n        return \"NO\"\n    if len(a) > len(set(a)):\n        return \"NO\"\n    if a.count(a[0]) == a.count(a[1]):\n        return \"NO\"\n    if len(a) % 3 == 0:\n        return \"YES\"\n    if len(a) % 3!= 0:\n        return \"NO\"\n    for i in range(0, len(a) - 1, 3):\n        for j in range(i + 1, len(a) - 1, 3):\n            if a[i] == a[j] or a[i] + a[j] == a[i] + a[j + 1]:\n                return \"YES\"\n    return \"NO\""
    },
    {
        "number": 4011,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    f = lambda x: [int(i) for i in str(x)]\n    \n    f1 = f(a[0])\n    f2 = f(a[1])\n    f3 = f(a[2])\n    f4 = f(a[3])\n    f5 = f(a[4])\n    f6 = f(a[5])\n    \n    def get_ans(f1, f2, f3, f4, f5, f6):\n        if f4 == f5 == f6:\n            return f4\n        elif f4 == f5 == f6 and f1 >= f2 and f1 >= f3 and f1 >= f4:\n            return f1\n        elif f4 == f5 == f6 and f2 >= f3 and f2 >= f4:\n            return f2\n        elif f4 == f5 == f6 and f3 >= f2 and f3 >= f4:\n            return f3\n        elif f4 == f5 == f6 and f5 >= f2 and f5 >= f3:\n            return f5\n        elif f4 == f5 == f6 and f6 >= f2 and f6 >= f3:\n            return f6\n        \n    return str(get_ans(f1, f2, f3, f4, f5, f6))"
    },
    {
        "number": 4011,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split(' '))\n    lst = []\n    for i in range(n):\n        lst.append(int(stdin.split(' ')[i]))\n    lst = sorted(lst)\n    val = 0\n    for i in range(n-1, -1, -1):\n        if a[lst[i]] < val:\n            val = a[lst[i]]\n        else:\n            val = val + 1\n    if val == 1:\n        return str(val)\n    else:\n        return str(val) + '1'\n"
    },
    {
        "number": 4011,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.strip())\n    n = list(map(int, stdin.strip().split()))\n    for i in range(n[0]):\n        for j in range(n[1]):\n            print(a,n[i],n[j])\n            a = a*j + n[j]\n    return str(a)"
    },
    {
        "number": 4011,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = list(map(int, stdin))\n    f = [0] * 9\n    for i in a:\n        f[i] = 1\n    for i in range(n):\n        tmp = [0] * 9\n        for j in range(10):\n            if j < i:\n                continue\n            tmp[j] = f[i]\n        for j in range(i, n):\n            tmp[f[j]] = f[j]\n        f = tmp\n    return str(max(f))\n\"\"\"\nclass Solution:\n    def maximumNumber(self, number: int, numbers: List[int]) -> str:\n        \"\"\"\n        binary search\n        \"\"\"\n        n = len(numbers)\n        if n == 1:\n            return str(numbers[0])\n        left, right = 0, n - 1\n        while left < right:\n            mid = (left + right) // 2\n            if numbers[mid] <= number:\n                right = mid - 1\n            else:\n                left = mid + 1\n        return str(left + 1)\n"
    },
    {
        "number": 4011,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n,a=[int(i) for i in stdin.split()]\n    if n==1:\n        print(a)\n        return a[0]\n    l=len(a)\n    if l<=1:\n        return max(a)\n    for i in range(l-2):\n        a[i+1]=int(a[i+1])\n        a[i+2]=int(a[i+2])\n    f=lambda a:[a[i]+a[i+1] for i in range(l)]\n    s=0\n    for i in range(l):\n        s=s+f(a)[i]\n    return s"
    },
    {
        "number": 4011,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(''.join(sorted(stdin, key=int, reverse=True))))\n"
    },
    {
        "number": 4011,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    digit = 1\n    for line in stdin.split():\n        digit = int(line)\n        for _ in range(9-digit):\n            digit = digit*10 + 1\n    return str(digit)\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4011,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, f = map(int, stdin.split())\n    max_num = 0\n    if f[0] == f[1]:\n        if f[0] >= f[1]:\n            if f[0] >= f[2] and f[0] >= f[3]:\n                if f[0] >= f[4] and f[0] >= f[5]:\n                    max_num = f[0] * a + f[1]\n                else:\n                    max_num = f[0] * a + f[3]\n            else:\n                max_num = f[1] * a + f[2]\n        else:\n            max_num = f[2] * a + f[1]\n    else:\n        if f[0] >= f[2]:\n            max_num = f[0] * a + f[1]\n        else:\n            max_num = f[2] * a + f[1]\n    return str(max_num)\n\nt = int(input())\nfor case in range(t):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    f = [int(i) for i in input().split()]\n    print(solution(n, a, f))"
    },
    {
        "number": 4011,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n,a = map(int,stdin.split())\n    # a = map(int,stdin.split())\n    i,j = 1,0\n    ret = 0\n    while i <= n:\n        ret = ret * 10 + a[j]\n        i += 1\n        j += 1\n    return ret\n"
    },
    {
        "number": 4011,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    f = [0 for _ in range(max(a))]\n    for i in range(len(a)):\n        f[i] = a[i]\n    for i in range(1, len(f)):\n        f[i] = f[i] + f[i-1]\n    f[len(f)-1] = 0\n    for i in range(len(f)):\n        f[i] = f[i] + f[i-1]\n    return str(max(f))\n"
    },
    {
        "number": 4012,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    ans = 10 ** 9\n    if n % 2:\n        n += 1\n        ans = max(ans, n * max(a))\n    ans = max(ans, n * max(a))\n    for i in range(1, n // 2 + 1):\n        if ans < n * max(a) * max(a[::-1]):\n            ans = n * max(a) * max(a[::-1])\n    print(ans)\n    return str(ans)\n-----Constraints-----\n1 <= t <= 10^4\n0 <= A, B, C <= 10^4\n0 <= a, b < A <= b\na, b, c <= 10^4\n-----Time Limit-----\n1 minute\n-----Memory Limit-----\n14 megabytes\n-----Algorithm-----\nmemory limit exceeded"
    },
    {
        "number": 4012,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    A = [int(i) for i in input().split()]\n    B = [int(i) for i in input().split()]\n    C = [int(i) for i in input().split()]\n    A = sorted(A)\n    B = sorted(B)\n    C = sorted(C)\n    l = len(A) + len(B) + len(C)\n    a = b = c = 0\n    for i in range(l):\n        if A[i] % B[i] == 0:\n            a += 1\n        elif A[i] % B[i] == 1:\n            b += 1\n        elif A[i] % B[i] == 2:\n            c += 1\n    if a == b and b == c:\n        print(a * b * c)\n        return\n    for j in range(len(A)):\n        if B[j] % A[j] == 0:\n            b += 1\n        elif B[j] % A[j] == 1:\n            a += 1\n        elif B[j] % A[j] == 2:\n            c += 1\n    if a == b and b == c:\n        print(a * b * c)\n        return\n    for k in range(len(B)):\n        if C[k] % B[k] == 0:\n            c += 1\n        elif C[k] % B[k] == 1:\n            a += 1\n        elif C[k] % B[k] == 2:\n            b += 1\n    if a == b and b == c:\n        print(a * b * c)\n        return\n    print(a * b * c)"
    },
    {
        "number": 4012,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a, b, c = map(int, stdin.split())\n    res = 1\n    while True:\n        if a > b and a % c == 0 and b % c == 0:\n            break\n        else:\n            res += 1\n    return str(res)\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4012,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a, b = map(int, input().split())\n    c = int(input())\n    \n    \n    def gcd(x, y):\n        while y:\n            x, y = y, x % y\n        return x\n    \n    def get_ans(a, b):\n        res = gcd(a, b)\n        if res == 1:\n            return b * a // res\n        else:\n            return a + get_ans(b, res)\n    \n    def solve():\n        global res\n        if a < b:\n            ans = get_ans(a, b)\n            if res < ans:\n                res = ans\n            \n        else:\n            ans = get_ans(a, b)\n            if res > ans:\n                res = ans\n        return res\n    \n    def fun():\n        global res\n        if n == 1:\n            return 0\n        res = 0\n        a = b = 0\n        for i in range(1, n + 1):\n            a, b = b, a + b\n            if b % a == 0:\n                res = max(res, a + b)\n        return res\n    \n    def check():\n        global res\n        if res == 0:\n            return False\n        if n == 0:\n            return False\n        ans = solve()\n        if n == 1 and res > ans:\n            res = ans\n        else:\n            if ans!= 0:\n                res = max(res, ans)\n        return True\n    \n    print(res)\n    \n    \n"
    },
    {
        "number": 4012,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        a, b, c = map(int, input().split())\n        if b % a == 0 and c % b == 0:\n            print(min(a, b, c))\n        elif b % a == 0:\n            print(min(a, b, c))\n        else:\n            print(min(a, b, c))\n    return str(a) +'' + str(b) +'' + str(c)\n\n[print(x) for x in solution(stdin).split()]\n\nAnswer\n3\n3\n3 1\n1\n100 100 100\n1\n1 3\n\n3\n3\n3 2\n3\n3 1\n1\n100 100 100\n1\n100 100 100\n1\n100 100 100\n1\n100 100 100\n1\n\n3\n1\n1 1 3\n2\n2\n3\n\n3\n1 1 3\n1 3\n1 1 3\n2\n2\n3\n1\n1 3\n1\n1 3\n\n3\n1 1 3\n1 2\n3\n3\n3\n1 1 3\n1 3\n1 1 3\n2\n3\n2\n3\n1\n1 3\n1\n1 3\n\n3\n1 1 3\n1 2\n1 1 3\n2\n1 1 3\n1 3\n1 1 3\n2\n3\n3\n1 1 3\n3\n3\n1 1 3\n3\n3\n1 1 3\n3\n1 1 3\n3\n3\n1 1 3\n1 2\n1 1 3\n1 3\n1 1 3\n1 3\n3\n1 1 3\n3\n3\n1 1 3\n1 2\n1 1 3\n1 3\n3\n1 1 3\n3\n\n3\n1 1 3\n1 2\n1 1 3\n2\n1 1 3\n3\n1 1 3\n1 2\n1 1 3\n3\n1 1 3\n3\n1 1 3\n2\n3\n2\n3\n1 1 3\n1 2\n1 1 3\n1 3\n3\n1 1 3\n3\n1 1 3\n\n3\n1 1 3\n1 2\n1 1 3\n2\n1 1 3\n1 3\n1 1 3\n3\n1 1 3\n1 2\n1 1 3\n3\n1 1 3\n1 2\n1 1 3\n2\n1 1 3\n3\n3\n1 1 3\n3\n\n1 1 3\n1 2\n1 1 3\n1 3\n1 1 3\n1 2\n3\n1 1 3\n3\n1 1 3\n1 2\n3\n1 1 3\n2\n3\n3\n3\n1 1 3\n\n3\n1 1 3\n1 2\n1 1 3\n1 3\n1 1 3\n1 2\n3\n1 1 3\n1 2\n1 1 3\n1 3\n1 1 3\n3\n3\n1 1 3\n3\n1 1 3\n1 2\n3\n1 1 3\n1 2\n3\n3\n1 1 3\n1 2\n3\n1 1 3\n3\n3\n1 1 3\n1 2\n3\n3\n3\n1 1 3\n1 2\n1 1 3\n3\n1 1 3\n1 2\n1 1 3\n3\n1 1 3\n1 2\n1 1 3\n1 2\n3\n3\n1 1 3\n1 2\n1 1 3\n1 2\n3\n3\n1 1 3\n3\n1 1 3\n1 2\n3\n1 1 3\n\n3\n1 1 3\n1 2\n1 1 3\n1 2\n1 1 3\n1 2\n1 1 3\n3\n1 1 3\n1 2\n1 1 3\n3\n1 1 3\n1 2\n3\n1 1 3\n3\n1 1 3\n\n3\n1 1 3\n1 2\n1 1 3\n1 2\n1 1 3\n1 2\n1 1 3\n3\n1 1 3\n1 2\n1 1 3\n3\n3\n1 1 3\n1 2\n1 1 3\n1 2\n1 1 3\n1 2\n1 1 3\n1 2\n1 1 3\n3\n1 1 3\n3\n1 1 3\n\n3\n1 1 3\n1 2\n1 1 3\n1 2\n1 1 3\n1 2\n1 1 3\n1 2\n3\n1 1 3\n1 2\n1 1 3\n1 2\n1 1 3\n1 2\n1 1 3\n3\n1 1 3\n1 2\n3\n1 1 3\n1 2\n1 1 3\n3\n1 1 3\n\n3\n1 1 3\n1 2\n1 1 3\n1 2\n1 1 3\n1 2\n1 1 3\n1 2\n3\n1 1 3\n3\n1 1 3\n3\n1 1 3\n1 2\n1 1 3\n1 2\n1 1 3\n3\n1 1 3\n3\n1 1 3\n\n3\n1 1 3\n1 2\n1 1 3\n1 2\n1 1 3\n1 2\n3\n1 1 3\n1 2\n3\n1 1 3\n1 2\n3\n1 1 3\n1 2\n3\n\n3\n1 1 3\n1 2\n1 1 3\n1 2\n1 1 3\n1 2\n1 1 3\n3\n1 1 3\n1 2\n3\n1 1 3\n1 2\n1 1 3\n3\n1 1 3\n3\n1 1 3\n1 2\n1 1 3\n3\n1 1 3\n1 2\n1 1 3\n1 2\n3\n1 1 3\n3\n1 1 3\n\n3\n1 1 3\n1 2\n1 1 3\n1 2\n1 1 3\n1 2\n1 1 3\n3\n1 1 3\n1 2\n1 1 3\n3\n1 1 3\n1 2\n1 1 3\n3\n1 1 3\n1 2\n1 1 3\n3\n1 1 3\n1 2\n1 1 3\n1 2\n1 1 3\n1 2\n1 1 3\n3\n1 1 3\n1 2\n1 1 3\n1 2\n1 1 3\n3\n1 1 3\n1 2\n1 1 3\n1 2\n1 1 3\n3\n1 1 3\n3\n1 1 3\n3\n1 1 3\n\n3\n1 1 3\n1 2\n1 1 3\n1 2\n1 1 3\n1 2\n1 1 3\n1 2\n1 1 3\n3\n1 1 3\n3\n1 1 3\n1 2\n1 1 3\n1 2\n1 1 3\n1 2\n1 1 3\n3\n1 1 3\n1 2\n3\n1 1 3\n1 2\n1 1 3\n1 2\n1 1 3\n1 2\n1 1 3\n1 2\n3\n1 1 3\n1 2\n1 1 3\n3\n1 1 3\n1 2\n1 1 3\n1 2\n1 1 3\n3\n1 1 3\n1 2\n1 1 3\n1 2\n1 1 3\n3\n1 1 3\n1 2\n1 1 3\n3\n1 1 3\n1 2\n1 1 3\n1 2\n1 1 3\n1 2\n1 1 3\n3"
    },
    {
        "number": 4012,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    print(int(stdin.split(\"\\n\")[1]))\n    print(int(stdin.split(\"\\n\")[2]))\n    print(int(stdin.split(\"\\n\")[3]))\n    print(int(stdin.split(\"\\n\")[4]))\n    print(int(stdin.split(\"\\n\")[5]))\n    print(int(stdin.split(\"\\n\")[6]))\n    print(int(stdin.split(\"\\n\")[7]))\n    print(int(stdin.split(\"\\n\")[8]))\n    print(int(stdin.split(\"\\n\")[9]))\n    print(int(stdin.split(\"\\n\")[10]))\n    print(int(stdin.split(\"\\n\")[11]))\n    print(int(stdin.split(\"\\n\")[12]))\n    print(int(stdin.split(\"\\n\")[13]))\n    print(int(stdin.split(\"\\n\")[14]))\n    print(int(stdin.split(\"\\n\")[15]))\n    print(int(stdin.split(\"\\n\")[16]))\n    print(int(stdin.split(\"\\n\")[17]))\n    print(int(stdin.split(\"\\n\")[18]))\n    print(int(stdin.split(\"\\n\")[19]))\n    print(int(stdin.split(\"\\n\")[20]))\n    print(int(stdin.split(\"\\n\")[21]))\n    print(int(stdin.split(\"\\n\")[22]))\n    print(int(stdin.split(\"\\n\")[23]))\n    print(int(stdin.split(\"\\n\")[24]))\n    print(int(stdin.split(\"\\n\")[25]))\n    print(int(stdin.split(\"\\n\")[26]))\n    print(int(stdin.split(\"\\n\")[27]))\n    print(int(stdin.split(\"\\n\")[28]))\n    print(int(stdin.split(\"\\n\")[29]))\n    print(int(stdin.split(\"\\n\")[30]))\n    print(int(stdin.split(\"\\n\")[31]))\n    print(int(stdin.split(\"\\n\")[32]))\n    print(int(stdin.split(\"\\n\")[33]))\n    print(int(stdin.split(\"\\n\")[34]))\n    print(int(stdin.split(\"\\n\")[35]))\n    print(int(stdin.split(\"\\n\")[36]))\n    print(int(stdin.split(\"\\n\")[37]))\n    print(int(stdin.split(\"\\n\")[38]))\n    print(int(stdin.split(\"\\n\")[39]))\n    print(int(stdin.split(\"\\n\")[40]))\n    print(int(stdin.split(\"\\n\")[41]))\n    print(int(stdin.split(\"\\n\")[42]))\n    print(int(stdin.split(\"\\n\")[43]))\n    print(int(stdin.split(\"\\n\")[44]))\n    print(int(stdin.split(\"\\n\")[45]))\n    print(int(stdin.split(\"\\n\")[46]))\n    print(int(stdin.split(\"\\n\")[47]))\n    print(int(stdin.split(\"\\n\")[48]))\n    print(int(stdin.split(\"\\n\")[49]))\n    print(int(stdin.split(\"\\n\")[50]))\n    print(int(stdin.split(\"\\n\")[51]))\n    print(int(stdin.split(\"\\n\")[52]))\n    print(int(stdin.split(\"\\n\")[53]))\n    print(int(stdin.split(\"\\n\")[54]))\n    print(int(stdin.split(\"\\n\")[55]))\n    print(int(stdin.split(\"\\n\")[56]))\n    print(int(stdin.split(\"\\n\")[57]))\n    print(int(stdin.split(\"\\n\")[58]))\n    print(int(stdin.split(\"\\n\")[59]))\n    print(int(stdin.split(\"\\n\")[60]))\n    print(int(stdin.split(\"\\n\")[61]))\n    print(int(stdin.split(\"\\n\")[62]))\n    print(int(stdin.split(\"\\n\")[63]))\n    print(int(stdin.split(\"\\n\")[64]))\n    print(int(stdin.split(\"\\n\")[65]))\n    print(int(stdin.split(\"\\n\")[66]))\n    print(int(stdin.split(\"\\n\")[67]))\n    print(int(stdin.split(\"\\n\")[68]))\n    print(int(stdin.split(\"\\n\")[69]))\n    print(int(stdin.split(\"\\n\")[70]))\n    print(int(stdin.split(\"\\n\")[71]))\n    print(int(stdin.split(\"\\n\")[72]))\n    print(int(stdin.split(\"\\n\")[73]))\n    print(int(stdin.split(\"\\n\")[74]))\n    print(int(stdin.split(\"\\n\")[75]))\n    print(int(stdin.split(\"\\n\")[76]))\n    print(int(stdin.split(\"\\n\")[77]))\n    print(int(stdin.split(\"\\n\")[78]))\n    print(int(stdin.split(\"\\n\")[79]))\n    print(int(stdin.split(\"\\n\")[80]))\n    print(int(stdin.split(\"\\n\")[81]))\n    print(int(stdin.split(\"\\n\")[82]))\n    print(int(stdin.split(\"\\n\")[83]))\n    print(int(stdin.split(\"\\n\")[84]))\n    print(int(stdin.split(\"\\n\")[85]))\n    print(int(stdin.split(\"\\n\")[86]))\n    print(int(stdin.split(\"\\n\")[87]))\n    print(int(stdin.split(\"\\n\")[88]))\n    print(int(stdin."
    },
    {
        "number": 4012,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a, b, c = map(int, stdin.split())\n    b = a - b\n    c = a * c\n    for _ in range(n):\n        a, b, c = map(int, stdin.split())\n        if (a * b + c) % a == 0:\n            print(a * b + c)\n            break\n    if (a * b + c) % a == 0:\n        print(a * b + c)\n    else:\n        print(-1)\n    \n    return\n\n-----Constraints-----\n1 <= t <= 100\n1 <= a, b, c <= 10^4\n\nSoluion Time Limit: 32 ms (22.47%)\nSearch in O(n)\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4012,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    # Your code here\n    \n    # read input\n    # print input\n    n=int(input())\n    a=list(map(int,input().split()))\n    b=list(map(int,input().split()))\n    c=list(map(int,input().split()))\n    \n    \n    # check sum\n    sum=0\n    \n    for i in range(n):\n        if a[i]%b[i]==0:\n            sum+=b[i]\n    if sum==c[0]:\n        print(sum)\n        return\n    else:\n        sum=0\n        \n        for i in range(n):\n            if a[i]%b[i]==0:\n                sum+=a[i]\n        \n        for i in range(n-1):\n            if a[i]%b[i]==0:\n                sum+=a[i]\n        \n        if sum==c[0]:\n            print(sum)\n            return\n        else:\n            sum=0\n        \n            for i in range(n):\n                if a[i]%b[i]==0:\n                    sum+=a[i]\n            \n            for i in range(n-1):\n                if a[i]%b[i]==0:\n                    sum+=a[i]\n            \n            for i in range(n):\n                if a[i]%b[i]==0:\n                    sum+=a[i]\n            \n            \n            \n    \n                \n    \n    \n    \n        \n    \n        \n    "
    },
    {
        "number": 4012,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    if stdin.isnumeric():\n        return stdin\n    stdin = [i for i in stdin.split(' ')]\n    res = 0\n    for i in range(len(stdin)):\n        a, b, c = stdin[i], stdin[i + 1], stdin[i + 2]\n        if a % int(b) == 0 and b % int(c) == 0 and a % int(c) == 0:\n            res = max(res, a * int(b) + b * int(c) + c)\n        elif a % int(b) == 0 and b % int(c) == 0:\n            res = max(res, a * int(b) + b * int(c))\n        elif a % int(b) == 0:\n            res = max(res, a * int(b))\n        elif b % int(c) == 0:\n            res = max(res, b * int(c))\n    return str(res)\n\"\"\"\nclass Solution:\n    def minimumNumberofOperations(self, A, B, C):\n        res, c = 0, 0\n        for i in range(A, B):\n            if int(i/A) + int(i/B) + int(i/C) < C:\n                res += 1\n            else:\n                break\n        return res\n        \n    def minimumNumberofOperations(self, A, B, C):\n        res, c = 0, 0\n        for i in range(A, B):\n            if int(i/A) + int(i/B) + int(i/C) < C:\n                res += 1\n            else:\n                break\n        return res\n        \n            "
    },
    {
        "number": 4012,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.strip().split()[0])\n    for i in range(t):\n        a, b, c = map(int, stdin.split())\n        a, b, c = min(a, b, c), max(a, b, c), min(b, c, a)\n        print(min(a, b, c))\n    return \"\"\n    \n    \n    \n    \n    \n"
    },
    {
        "number": 4013,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    a.pop(n-1)\n    a = tuple(a)\n    a = list(set(a))\n    a.sort()\n    print(a[n-1] - a[0])\n    return '0'\n\n\n\n-----Constraints-----\n\n0 <= n <= 10^4\n\nInput Format\n\nThe first line contains an integer $n$ \u2014 the number of elements in the array $a$.\n\nThe second line contains $n$ integers $a_1, a_2, \\dots, a_n$.\n\n\n\nOutput Format\n\nPrint one integer \u2014 the minimum possible instability of the array if you have to remove exactly one element from the array $a$.\n\n\n\nSample Input\n\n4\n1 3 3 7\n\nSample Output\n\n2\n\nExplanation\n\nInput:\n\nSTDIN        Function\n-----     --------\n1, 3, 3, 7       input\n1, 3, 3, 7       Output\n1, 3, 3, 10    Explanation\n\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\na.sort()\n\nprint(a[n-1] - a[0])"
    },
    {
        "number": 4013,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    a = sorted(a)\n    n -= 1\n    if a[0]!= 0:\n        return '-'\n    if a[n]!= 0:\n        return '0'\n    return a[n]\n        \n\ndef"
    },
    {
        "number": 4013,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.split()))\n    if len(a) < 2:\n        return \"0\"\n    a.pop()\n    if len(a) == 0:\n        return \"0\"\n    a.pop()\n    if len(a) == 0:\n        return \"0\"\n    a.pop()\n    a = a[::-1]\n    for i in range(n-2):\n        a.pop()\n    a = a[::-1]\n    for i in range(n-1):\n        a.pop()\n    a = a[::-1]\n    return str(min(a))\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4013,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(i) for i in stdin.split()]\n    a.sort()\n    return str(max(0, max(a[n - 1] - a[n - 2]) - 1) + max(0, a[n - 1] - a[n - 2]))\n    pass\n\n'''\ndef"
    },
    {
        "number": 4013,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    print(min(a))\n    return str(min(a))\n\nprint(solution(input()))\nprint()\nprint(solution(input()))\n"
    },
    {
        "number": 4013,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.split()))\n    ans = max(a)\n    for i in range(n - 1):\n        if ans == max(a):\n            ans = min(a) - min(a)\n            \n    return str(ans)\n\nRuntime: 28 ms, faster than 83.47% of Python3 online submissions for Minimum Stability in an Array.\nMemory Usage: 17.4 MB, less than 96.84% of Python3 online submissions for Minimum Stability in an Array.\n'''"
    },
    {
        "number": 4013,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    arr.sort()\n    arr1 = arr[1:]\n    arr2 = arr[:n]\n    arr_copy = arr1 + arr2\n    arr_copy.sort()\n    arr_copy.append(0)\n    arr_copy = arr_copy[1:]\n    arr_copy.sort()\n    print(min(arr_copy))\n    return '0'\n\ndef"
    },
    {
        "number": 4013,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(i) for i in stdin.split()]\n    min_elem = a[0]\n    for i in range(1, n):\n        if min_elem < a[i]:\n            min_elem = a[i]\n    return str(min_elem)\n\nSolution Example\n\nInput\n2\n1 2 2\n\nOutput\n2\n\nInput\n2\n1 2\n\nOutput\n2\n\n-----Notes-----\n\nIn the example we will remove exactly two elements from the array. If you remove only $1$, then the array will be free of all elements.\n\nIn the second example, we will remove $1$ from the array. If you remove only $1$, then the array will be free of all elements.\n\nIn the first example, we will not remove any element from the array but you will not remove it from the array.\n\"\"\""
    },
    {
        "number": 4013,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return str(min(int(stdin), abs(len(stdin) - 1)))\n\n\ucd9c\ub825\n\n\uccab\uc9f8 \uc904\uc5d0 \ucd5c\ub313\uac12\uc744 \ucd9c\ub825\ud558\uace0, \ub458\uc9f8 \uc904\uc5d0 \ucd5c\uc19f\uac12\uc744 \ucd9c\ub825\ud55c\ub2e4.\n\"\"\"\n\nimport math\n\nn = int(input())\na = list(map(int, input().split()))\nm = int(input())\na.sort()\nanswer = math.inf\n\nfor i in range(m):\n    answer = min(answer, abs(a[i] - i))\nprint(answer)"
    },
    {
        "number": 4013,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    nums = list(map(int, stdin.strip().split()))\n    a = [nums[i] - nums[i-1] for i in range(1, len(nums))]\n    a.sort()\n    return str(a[-1])\n"
    },
    {
        "number": 4014,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    schedule = []\n    for _ in range(m):\n        s, d, c = list(map(int, stdin.split()))\n        schedule.append([s, d, c])\n    answer = 0\n    for i in range(m):\n        if i == 0:\n            schedule[i][0] -= 1\n            schedule[i][2] -= 1\n        else:\n            if schedule[i][0] <= 1:\n                answer += schedule[i][1] - schedule[i-1][2]\n                schedule[i][0] -= 2\n                schedule[i][1] -= 1\n            else:\n                answer += schedule[i][0]\n                schedule[i][0] -= schedule[i-1][1]\n                schedule[i][1] -= schedule[i-1][2]\n    return str(answer)\n\ndef"
    },
    {
        "number": 4014,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    answer = n\n\n    if m > n:\n        m, n = n, m\n    \n    for i in range(n-1):\n        if (m > n-i and m - n < 0) or (m < n-i and n - m < 0):\n            break\n        answer += 1\n\n    if n - m > 0:\n        answer = n - m + 1\n\n    return str(answer)\n\n\n\nExample:\n\nInput:\n2 4\n2 5\n1 3 1\n\nOutput:\n2\nExplanation:\n1 => 1\n2 => 1\n3 => 1\n4 => 2\n\n'''\nclass Solution:\n    def prepareExams(self, stdin: str) -> str:\n        #Time: O(n)\n        #Space: O(n)\n        \n        n, m = [int(x) for x in stdin.split()]\n        answer = n\n\n        if m > n:\n            m, n = n, m\n        \n        for i in range(n-1):\n            if (m > n-i and m - n < 0) or (m < n-i and n - m < 0):\n                break\n            answer += 1\n        \n        if n - m > 0:\n            answer = n - m + 1\n\n        return str(answer)\n"
    },
    {
        "number": 4014,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    global n, m\n    for _ in range(int(stdin)):\n        n, m = map(int, stdin.split())\n        if m == 0:\n            return \"0\"\n        elif n == 0:\n            return \"0\"\n        \n        n = n - 1\n        m = m - 1\n        if n > 0:\n            if m > 0:\n                if n + 1 <= m:\n                    n += 1\n                    m -= 1\n                else:\n                    m -= 1\n                    n -= 1\n            else:\n                if n > m:\n                    n -= 1\n                    m += 1\n                else:\n                    m += 1\n        \n        if m == 0:\n            return \"0\"\n        elif n == 0:\n            return \"0\"\n        \n    return \"1\"\n\n\"\"\"\n\nclass Solution:\n    def prepareForExam(self, n, m, s, d):\n        if m == 0:\n            return n + d\n        elif n == 0:\n            return (s + m) * d\n        elif n + 1 <= m:\n            return n + 1\n        else:\n            return (s + m) * d + 1\n    \n    def schedule(self, n, m, s, d):\n        count = 0\n        for i in range(n):\n            count += 1\n            if s + i < d:\n                count += 1\n            elif s + i == d:\n                count += 1\n            else:\n                count += self.prepareForExam(n, m, s, i)\n        \n        if count == m:\n            return \"1\"\n        else:\n            return \"0\"\n"
    },
    {
        "number": 4014,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    # Find the schedule for the exams\n    n, m = map(int, stdin.split())\n    \n    # Start with one day to first exam\n    s_i = 1\n    d_i = 1\n    c_i = 1\n    \n    # Get the schedule for the exams\n    for _ in range(n - 1):\n        for _ in range(m):\n            # If the day is a exam, it's the day to prepare for the other exams\n            if (s_i >= d_i and s_i < n):\n                s_i += 1\n                d_i += 1\n                c_i += 1\n            \n            # If the day is a rest, it's a break\n            elif (s_i >= d_i and s_i < n):\n                s_i += 1\n                c_i += 1\n                d_i += 1\n            \n            # If the day is a reminder and the next exam is not one of them\n            else:\n                s_i += 1\n                d_i += 1\n        \n        # If the schedule is empty, it's the day to prepare for all exams\n        if (s_i >= d_i and s_i < n):\n            s_i += 1\n            d_i += 1\n            c_i += 1\n            \n    # If it's empty, it's the day to prepare for all exams\n    if (s_i >= d_i and s_i < n):\n        s_i += 1\n        d_i += 1\n        c_i += 1\n    \n    # If there are multiple schedules, print the schedule\n    if (s_i >= d_i and s_i < n):\n        print(s_i)\n        \n    # If there are multiple schedules, print the schedule\n    else:\n        print(s_i)\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        "
    },
    {
        "number": 4014,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if m == 0:\n        return \"1\"\n    elif m == 1:\n        return \"1\" + str(n - 1)\n    elif m == 2:\n        return str(n - 1) + \"0\"\n    else:\n        s_list = [0] * n\n        d_list = [0] * n\n        c_list = [0] * n\n        for i in range(n - 1):\n            s_list[i], d_list[i], c_list[i] = map(int, stdin.split())\n        return str(n - 1) + \"0\" + str(n - 2) + str(n - 3) + \"0\" + str(n - 4) + \"0\"\n\n\"\"\"\n\n\n\ndef"
    },
    {
        "number": 4014,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    d_i = int(stdin.split()[1])\n    c_i = int(stdin.split()[2])\n    n = int(stdin.split()[0])\n    answer = 0\n    exams = []\n    for i in range(n):\n        exams.append(int(stdin.split()[i+1]))\n    for i in exams:\n        if i % c_i == 0:\n            answer += (d_i - i) * c_i\n    return str(answer)\n\nprint(solution(\"10 3\"))\n"
    },
    {
        "number": 4014,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    exams = list(map(int, stdin.split()))\n    schedule = [[0] * n for _ in range(n)]\n    count = 0\n    for i in range(n):\n        for j in range(n):\n            if exams[i] >= j:\n                schedule[i][j] = 1\n                count += 1\n    for i in range(m):\n        if count % 2 == 0:\n            count = count // 2\n            for j in range(n):\n                if schedule[j][i]:\n                    schedule[j][i] = 1\n                    count += 1\n        else:\n            count = count // 2\n            for j in range(n):\n                if schedule[j][i]:\n                    schedule[j][i] = 0\n                    count += 1\n    for i in range(n):\n        for j in range(n):\n            if schedule[i][j] == 1:\n                count = count // 2\n                if count == 0:\n                    count = n - 1\n                for k in range(count):\n                    print(i + 1, j + 1, count)\n                    count -= 1\n                break\n    return count\n\n-----Example-----\nInput:\n2 2\n1 3 1\n1 5 1\n\nOutput:\n1 2 3 0 3 \n\n\"\"\"\n\ndef"
    },
    {
        "number": 4014,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n == m:\n        return '0'\n    s, d = list(map(int, stdin.split()))\n    if sum(list(map(int, stdin.split()))) < m:\n        return '0'\n    # 0,1\n    if d == s:\n        return '0'\n    elif d == s + 1:\n        if m - sum(list(map(int, stdin.split()))) < d:\n            return '0'\n        return '1'\n    elif d >= s + 1 and d >= s:\n        if d >= m - sum(list(map(int, stdin.split()))) and d >= m:\n            if m - sum(list(map(int, stdin.split()))) < d:\n                return '0'\n            return '1'\n        else:\n            return '1'\n\n\"\"\"\nRuntime: 19 ms, faster than 72.69% of Python3 online submissions for Time for N Days.\nMemory Usage: 12.7 MB, less than 88.45% of Python3 online submissions for Time for N Days.\n\"\"\"\n"
    },
    {
        "number": 4014,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    result = -1\n    exams = []\n    for line in stdin.splitlines():\n        exam, days = line.split()\n        days = int(days)\n        exams.append([days, int(exam)])\n    exams.sort(key=lambda x:x[0])\n    for exam in exams:\n        start = exam[0]\n        end = exam[1]\n        \n        while start < end:\n            start += 1\n        while start < end:\n            if exams[start][1] < exams[end][1]:\n                exams[start], exams[end] = exams[end], exams[start]\n            start += 1\n        while start < end:\n            if exams[start][1] > exams[end][1]:\n                exams[start], exams[end] = exams[end], exams[start]\n            start += 1\n    print(sum(exams[:start])+1)\n    return''.join(map(str,exams))\n\n-----Constraints-----\n1 <= stdin.length <= 10^3\n0 <= s_i, d_i, c_i <= 10^4\n1 <= n <= 10^4\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4014,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.split()[1]\n    m = int(stdin.split()[0])\n    exams = [int(i) for i in stdin.split()[2:]]\n    res = []\n    for i in exams:\n        for j in exams:\n            res.append(j - i)\n    if n == 1:\n        return max(res) + 1\n    if n == 2:\n        return max(res)\n    for i in range(1, int(n) + 1):\n        for j in range(1, int(n)):\n            if res[j] < res[j - 1] + 1:\n                res[j] = res[j - 1] + 1\n    return max(res)\n\ndef"
    },
    {
        "number": 4015,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    m = 0\n    for i in range(n):\n        a, b = map(int, stdin.split())\n        if a!= 0 and b!= 0:\n            m += 1\n    return str(m)\n"
    },
    {
        "number": 4015,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    res = 0\n    for i in stdin:\n        res += int(i)\n    return str(res)\n\n\ndef"
    },
    {
        "number": 4015,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4015,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n > m:\n        return '-1'\n    x = n // m\n    if n % m == 0:\n        y = m\n        q = n\n    else:\n        q = m\n        y = n % m\n    while q >= 1:\n        if x % q == 0:\n            break\n        x = x - q + 1\n        if x < 1:\n            x = 1\n    x = x * y\n    if n % m == 0:\n        q = n\n        while x % q == 0:\n            x = x - q + 1\n            if x < 1:\n                x = 1\n        x = x * y\n        if n % m == 0:\n            q = n\n            while x % q == 0:\n                x = x - q + 1\n                if x < 1:\n                    x = 1\n            x = x * y\n    return str(x)\n"
    },
    {
        "number": 4015,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n,m = map(int,stdin.split())\n    print(solution.__doc__.split(\"\\n\")[0])\n    print(n*m)\n    return \"-1\"\n\ndef"
    },
    {
        "number": 4015,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    m = int(stdin[::-1])\n    if n < m:\n        return -1\n    \n    seq = ['1','2','3']\n    \n    for i in range(1,m):\n        seq.append(str(i*3))\n    \n    seq.reverse()\n    \n    if m < n:\n        return 0\n    else:\n        return seq[n-m]\n    \n"
    },
    {
        "number": 4015,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n > m:\n        return -1\n    print(n, m, n*m)\n    return 0\n\nTEST\n>>> solution(120, 51840)\n7\n>>> solution(42, 42)\n0\n>>> solution(48, 72)\n-1"
    },
    {
        "number": 4015,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str(abs(int(stdin) - int(stdin.replace('-', ''))))\n"
    },
    {
        "number": 4015,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n,m = map(int,stdin.split())\n    if n<m:\n        m,n = n,m\n    return str(n*(n+1)//2-m)\n\n-----Constraints-----\n\n1 <= stdin.length <= 500\n1 <= n <= 105\n1 <= m <= 105\n\nTime Limit: 1 sec\nSpace Limit: 1MB\n\n-----Example 1-----\n\nInput\n120 51840\n\nOutput\n7\n\nExplanation\n\nIn the example 1, there is only 7 moves needed to transform 120 to 51840: $120 \\rightarrow 240 \\rightarrow 720 \\rightarrow 1440 \\rightarrow 4320 \\rightarrow 12960 \\rightarrow 25920 \\rightarrow 51840$\n\nIn the example 2, there is only 4 moves needed to transform 120 to 51840: $120 \\rightarrow 24 \\rightarrow 720 \\rightarrow 1440 \\rightarrow 4320 \\rightarrow 12960 \\rightarrow 25920 \\rightarrow 51840$\n\nIn the example 3, there is only 1 move needed to transform 120 to 51840: $120 \\rightarrow 24 \\rightarrow 720 \\rightarrow 4320 \\rightarrow 12960 \\rightarrow 25920 \\rightarrow 51840$\n\n-----Constraints-----\n\n1 <= n <= 105\n1 <= m <= 105\n\nTime Limit: 0.5 sec\nSpace Limit: 1MB\n\n-----Example 2-----\n\nInput\n42 42\n\nOutput\n3\n\nExplanation\n\nIn the example 2, there is only 2 steps needed to transform 42 to 42: $42 \\rightarrow 42 \\rightarrow 42 \\rightarrow 42 \\rightarrow 42 \\rightarrow 42 \\rightarrow 42 \\rightarrow 42 \\rightarrow 42 \\rightarrow 42 \\rightarrow 42 \\rightarrow 42 \\rightarrow 42 \\rightarrow 42 \\rightarrow 42 \\rightarrow 42 \\rightarrow 42 \\rightarrow 42 \\rightarrow 42 \\rightarrow 42 \\right>\n\n\n\n-----Constraints-----\n\n1 <= n <= 105\n1 <= m <= 105\n\nTime Limit: 0.5 sec\nSpace Limit: 1MB\n\n-----Example 3-----\n\nInput\n48 72\n\nOutput\n0\n\nExplanation\n\nIn the example 3, there is no possible sequence of moves to transform 48 to 72: $48 \\rightarrow 48 \\rightarrow 72 \\rightarrow 72 \\rightarrow 72 \\right>\n\n\n\n-----Constraints-----\n\n1 <= n <= 105\n1 <= m <= 105\n\nTime Limit: 0.5 sec\nSpace Limit: 1MB\n\n-----Example 4-----\n\nInput\n48 72\n\nOutput\n-1\n\nExplanation\n\nIn the example 4, there is no possible sequence of moves to transform 48 to 72: $48 \\rightarrow 48 \\rightarrow 72 \\right>\n\n\n\n-----Constraints-----\n\n1 <= n <= 105\n1 <= m <= 105\n\nTime Limit: 0.5 sec\nSpace Limit: 1MB\n\n-----Example 5-----\n\nInput\n24 4320\n\nOutput\n-1\n\n\n\n-----Constraints-----\n\n1 <= n <= 105\n1 <= m <= 105\n\nTime Limit: 0.5 sec\nSpace Limit: 1MB\n\n-----Example 6-----\n\nInput\n24 4320\n\nOutput\n7\n\nExplanation\n\nIn the example 6, there is no possible sequence of moves to transform 24 to 4320: $24 \\rightarrow 24 \\right>\n\n\n\n-----Constraints-----\n\n1 <= n <= 105\n1 <= m <= 105\n\nTime Limit: 0.5 sec\nSpace Limit: 1MB\n\n-----Example 7-----\n\nInput\n24 4320\n\nOutput\n0\n\n\n\n-----Constraints-----\n\n1 <= n <= 105\n1 <= m <= 105\n\nTime Limit: 0.5 sec\nSpace Limit: 1MB\n\n-----Example 8-----\n\nInput\n24 4320\n\nOutput\n0\n\n\n\n-----Constraints-----\n\n1 <= n <= 105\n1 <= m <= 105\n\nTime Limit: 0.5 sec\nSpace Limit: 1MB\n\n-----Example 9-----\n\nInput\n24 4320\n\nOutput\n2\n\n\n\n-----Constraints-----\n\n1 <= n <= 105\n1 <= m <= 105\n\nTime Limit: 0.5 sec\nSpace Limit: 1MB\n\n-----Example 10-----\n\nInput\n24 4320\n\nOutput\n7\n\n\n\n-----Constraints-----\n\n1 <= n <= 105\n1 <= m <= 105\n\nTime Limit: 0.5 sec\nSpace Limit: 1MB\n\n-----Example 11-----\n\nInput\n24 4320\n\nOutput\n0\n\n\n\n-----Constraints-----\n\n1 <= n <= 105\n1 <= m <= 105\n\nTime Limit: 0.5 sec\nSpace Limit: 1MB\n\n-----Example 12-----\n\nInput\n24 4320\n\nOutput\n0\n\n\n\n-----Constraints-----\n\n1 <= n <= 105\n1 <= m <= 105\n\nTime Limit: 0.5 sec\nSpace Limit: 1MB\n\n-----Example 13-----\n\nInput\n24 4320\n\nOutput\n3\n\n\n\n-----Constraints-----\n\n1 <= n <= 105\n1 <= m <= 105\n\nTime Limit: 0.5 sec\nSpace Limit: 1MB\n\n-----Example 14-----\n\nInput\n24 4320\n\nOutput\n1\n\n\n\n-----Constraints-----\n\n1 <= n <= 105\n1 <= m <= 105\n\nTime Limit: 0.5 sec\nSpace Limit: 1MB\n\n-----Example 15-----\n\nInput\n24 4320\n\nOutput\n0\n\n\n\n-----Constraints-----\n\n1 <= n <= 105\n1 <= m <= 105\n\nTime Limit: 0.5 sec\nSpace Limit: 1MB\n\n-----Example 16-----\n\nInput\n24 4320\n\nOutput\n0\n\n\n\n-----Constraints-----\n\n1 <= n <= 105\n1 <= m <= 105\n\nTime Limit: 0.5 sec\nSpace Limit: 1MB\n\n-----Example 17-----\n\nInput\n24 4320\n\nOutput\n0\n\n\n\n-----Constraints-----\n\n1 <= n <= 105\n1 <= m <= 105\n\nTime Limit: 0.5 sec\nSpace Limit: 1MB\n\n-----Example 18-----\n\nInput\n24 4320\n\nOutput\n0\n\n\n\n-----Constraints-----\n\n1 <= n <= 105\n1 <= m <= 105\n\nTime Limit: 0.5 sec\nSpace Limit: 1MB\n\n-----Example 19-----\n\nInput\n24 4320\n\nOutput\n0\n\n\n\n-----Constraints-----\n\n1 <= n <= 105\n1 <= m <= 105\n\nTime Limit: 0.5 sec\nSpace Limit: 1MB\n\n-----Example 20-----\n\nInput\n24 4320\n\nOutput\n0\n\n\n\n-----Constraints-----\n\n1 <= n <= 105\n1 <= m <= 105\n\nTime Limit: 0.5 sec\nSpace Limit: 1MB\n\n-----Example 21-----\n\nInput\n24 4320\n\nOutput\n0\n\n\n\n-----Constraints-----\n\n1 <= n <= 105\n1 <= m <= 105\n\nTime Limit: 0.5 sec\nSpace Limit: 1MB\n\n-----Example 22-----\n\nInput\n24 4320\n\nOutput\n0\n\n\n\n-----Constraints-----\n\n1 <= n <= 105\n1 <= m <= 105\n\nTime Limit: 0.5 sec\nSpace Limit: 1MB\n\n-----Example 23-----\n\nInput\n24 4320\n\nOutput\n0"
    },
    {
        "number": 4015,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n > m:\n        return \"-1\"\n    n, m = m, n\n    i = 1\n    while i <= n:\n        if i == 1:\n            i = 1\n            while i <= m:\n                i *= 2\n                m *= 2\n        else:\n            i *= 2\n            m *= 2\n        if i > m:\n            return \"-1\"\n    if n == m:\n        return str(i)\n    \n    return \"1\"\n\n---------------------------------------------------\ndef"
    },
    {
        "number": 4016,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    # s = stdin.strip().split(' ')\n    # k = int(s[1])\n    # l = int(s[2])\n    \n    # return''.join(s[:l] + s[l + 1:])\n    \n    # a = list(stdin.split())\n    # ans =''.join(sorted(set(a)))\n    # return ans\n    \n    n, k = map(int, stdin.split())\n    s = stdin.strip().split(' ')\n    l = int(s[1])\n    r = int(s[2])\n    ans = ''\n    for i in range(r - l):\n        if ans:\n            ans +=''\n        ans += s[i + l - 1]\n    return ans[:k]"
    },
    {
        "number": 4016,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lst = list(stdin.strip().split())\n    n, k = int(lst[0]), int(lst[1])\n    s = list(lst[2])\n    t = list(lst[3])\n    lst.pop(3)\n    t.pop(0)\n    result = []\n    i = 0\n    while i < n:\n        if not s[i:i + k] == t:\n            result.append(s[i:i + k])\n            i += k\n        else:\n            i += 1\n    if i == n:\n        result = result + s[i:]\n    print(result)\n    return''.join(result)\n"
    },
    {
        "number": 4016,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    t = input()\n    l = [i for i in range(len(t)+1)]\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            l[i] = min(l[i], l[i-j] + 1)\n    if l[n] < k:\n        print(t)\n    else:\n        print(t[l[n]-k:l[n]+1])\n    return\n\n-----See Also-----\nhttps://www.geeksforgeeks.org/substrings-of-string-t/\nhttps://stackoverflow.com/questions/1152234/minimum-substring-of-a-string-of-a-given-length\n\"\"\"\n\ndef"
    },
    {
        "number": 4016,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.split()\n    print(s[0])\n    print(s[1])\n    print(s[2])\n    if k > n*(k-1)/2:\n        return 'Too few'\n    print(s[0]*k)\n    print(s[1]*k)\n    print(s[2]*k)\n    print(s[0]*n+s[2]*n)\n    print(s[1]*n+s[2]*n)\n    return 'Yes'\n"
    },
    {
        "number": 4016,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    a, b, c = map(int, stdin.split())\n    if a < b:\n        if a + c >= b:\n            return \"ababababa\"\n        return \"ababab\"\n    \n    if b < c:\n        if b + c >= c:\n            return \"ababab\"\n        return \"abab\"\n    if c < a:\n        if c + a >= a:\n            return \"abab\"\n        return \"ab\"\n\n-----------------------------------------------------------------------------------\n\nimport math\n\ndef"
    },
    {
        "number": 4016,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = []\n    for i in range(n):\n        s.append(stdin[i + 1])\n    for _ in range(k):\n        t = s.pop(0)\n        for _ in range(n - k + 1):\n            s.append(s.pop(0) + t)\n    print(\"\".join(s))\n\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= k <= 10^6\n1 <= s.length <= 10^6\ns[i] is a lowercase letter in $t$.\nstdin.length <= 10^5\n\n'''\nclass Solution:\n    def minSubstring(self, s: str, t: str) -> int:\n        if t == s:\n            return len(t)\n        len_t = len(t)\n        mapping = {}\n        min_len = float('inf')\n        for i in range(len(s)):\n            if s[i] in mapping and mapping[s[i]] > 0:\n                mapping[s[i]] += 1\n            else:\n                mapping[s[i]] = 1\n        for i in range(len_t):\n            if s[i] in mapping:\n                if mapping[s[i]] > 0:\n                    mapping[s[i]] -= 1\n                else:\n                    min_len = min(min_len, i - len(t) + 1)\n        return min_len if min_len!= float('inf') else 0"
    },
    {
        "number": 4016,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n,k=map(int,stdin.split())\n    a=[]\n    for i in range(0,n):\n        a.append(stdin[i].lower())\n    \n    t=[]\n    for i in range(0,k):\n        t.append(a[i])\n    \n    for i in range(k,n):\n        t.append(a[i].lower())\n    \n    ans=''\n    for i in range(0,n-k):\n        s=t[i:i+k]\n        ans+=s\n    return ans\n\n'''"
    },
    {
        "number": 4016,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split()]\n    s = stdin[1:-1]\n    return solve(n, k, s)\n    \ndef"
    },
    {
        "number": 4016,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    l = len(stdin)\n    l1 = l - k\n\n    # find all possible substring\n    s = ''\n    # start from l1\n    for i in range(l1):\n        # the string is lowercase\n        for j in range(i + 1, l1 + 1):\n            s += stdin[j]\n\n    # print the substring\n    print(s)"
    },
    {
        "number": 4016,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if k >= n:\n        return ''\n    s = stdin.split()\n    s.sort()\n    t = s[-k:]\n    for i in range(len(s) - k):\n        if len(t) == k:\n            return ''.join(t)\n        else:\n            t.append(s[i])\n            t = t[:-1]\n    return ''\n'''\n\ndef"
    },
    {
        "number": 4017,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    good = list(map(int,stdin.split()))\n    good.sort()\n    good = list(set(good))\n    if not good:\n        return \"0\"\n    j = good[0]\n    good = list(set(good)-set(good[j:j+2]))\n    if not good:\n        return \"0\"\n    j = good[0]\n    return str(j)\n"
    },
    {
        "number": 4017,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    a = list(map(int, a.split()))\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if a[i] + a[j] == sum(a):\n                return str(i) +'' + str(j)\n    return str(0)\n\n\n-----Test-----\n\nTest case 1:\nInput\n2\n2 3 2\n\nOutput\n0\n0\n\nTest case 2:\nInput\n3\n1 2 2\n\nOutput\n2\n2 4\n\nTest case 3:\nInput\n3\n8 2 3 1\n\nOutput\n0\n0\nTest case 4:\nInput\n4\n8 3 3 4 3\n\nOutput\n0\n0 1 4\n\nTest case 5:\nInput\n1\n1 1 1\n\nOutput\n1\n2 1\n\nNote:\n\n1. The array can be obtained as follows:\n\n$a = [8, 3, 5, 2]$\n$a = [1, 3, 5, 2]$\n\n2. For the indices $i, j$ of the array, we should remove the $i-th$ element from the array, and the elements should be $1, 2, 4$\n\n$a = [1, 3, 5, 2]$\n$a = [8, 3, 5, 2]$\n\n3. The first element in the array should be the sum of all remaining elements, and the second element should be the sum of the remaining elements.\n\n$a = [2, 2, 2]$\n$a = [4, 2, 2]$\n\n\n-----Sample Input-----\n\n2\n2 5 1 2 2\n\nSample Output\n\n2\n1 4\n\n-----Sample Input-----\n\n3\n1 1 1 1\n\nSample Output\n\n0\n0\n\n\n-----Sample Input-----\n\n4\n8 3 3 4 3\n\nSample Output\n\n0\n0 1 4\n\n-----Sample Input-----\n\n5\n8 3 3 4 3\n\nSample Output\n\n0\n0 1 4\n\n-----Sample Input-----\n\n1\n1 1 1\n\nSample Output\n\n0\n0 1 4\n\n-----Sample Input-----\n\n2\n8 2 3 2\n\nSample Output\n\n0\n0 1 4\n\n-----Sample Input-----\n\n2\n2 3 2\n\nSample Output\n\n0\n0 1 4\n\n-----Sample Input-----\n\n1\n1 1 1\n\nSample Output\n\n1\n1 1 1\n\n-----Sample Input-----\n\n1\n1 1 1\n\nSample Output\n\n0\n0 1 4\n\n\"\"\""
    },
    {
        "number": 4017,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n        a = int(stdin.strip())\n        ans = 0\n        for i in range(a):\n            n = int(stdin.strip())\n            if n!= 0:\n                ans += n\n            else:\n                n = 0\n        return str(ans)\n\n---Solution-----\n"
    },
    {
        "number": 4017,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(sum([int(i) for i in stdin.split()]))\n\nTime Limit: 1 second\nSpace Limit: 1 MiB\n\nRuntime: 96 ms (96.19%)\nMemory Usage: 14.2 MB (19.58%)\n\nRuntime: 96 ms (96.19%)\nMemory Usage: 14.2 MB (19.58%)\n\nRuntime: 96 ms (96.19%)\nMemory Usage: 14.2 MB (19.58%)\n\nRuntime: 96 ms (96.19%)\nMemory Usage: 14.2 MB (19.58%)\n\nRuntime: 96 ms (96.19%)\nMemory Usage: 14.2 MB (19.58%)\n\nRuntime: 96 ms (96.19%)\nMemory Usage: 14.2 MB (19.58%)\n\nRuntime: 96 ms (96.19%)\nMemory Usage: 14.2 MB (19.58%)\n\nRuntime: 96 ms (96.19%)\nMemory Usage: 14.2 MB (19.58%)\n\nRuntime: 96 ms (96.19%)\nMemory Usage: 14.2 MB (19.58%)\n\nRuntime: 96 ms (96.19%)\nMemory Usage: 14.2 MB (19.58%)\n\nRuntime: 96 ms (96.19%)\nMemory Usage: 14.2 MB (19.58%)\n\nRuntime: 96 ms (96.19%)\nMemory Usage: 14.2 MB (19.58%)\n\nRuntime: 96 ms (96.19%)\nMemory Usage: 14.2 MB (19.58%)\n\nRuntime: 96 ms (96.19%)\nMemory Usage: 14.2 MB (19.58%)\n\nRuntime: 96 ms (96.19%)\nMemory Usage: 14.2 MB (19.58%)\n\nRuntime: 96 ms (96.19%)\nMemory Usage: 14.2 MB (19.58%)\n\nRuntime: 96 ms (96.19%)\nMemory Usage: 14.2 MB (19.58%)\n\nRuntime: 96 ms (96.19%)\nMemory Usage: 14.2 MB (19.58%)\n\nRuntime: 96 ms (96.19%)\nMemory Usage: 14.2 MB (19.58%)\n\nRuntime: 96 ms (96.19%)\nMemory Usage: 14.2 MB (19.58%)\n\nRuntime: 96 ms (96.19%)\nMemory Usage: 14.2 MB (19.58%)\n\nRuntime: 96 ms (96.19%)\nMemory Usage: 14.2 MB (19.58%)\n\nRuntime: 96 ms (96.19%)\nMemory Usage: 14.2 MB (19.58%)\n\nRuntime: 96 ms (96.19%)\nMemory Usage: 14.2 MB (19.58%)\n\nRuntime: 96 ms (96.19%)\nMemory Usage: 14.2 MB (19.58%)\n\nRuntime: 96 ms (96.19%)\nMemory Usage: 14.2 MB (19.58%)\n\nRuntime: 96 ms (96.19%)\nMemory Usage: 14.2 MB (19.58%)\n\nRuntime: 96 ms (96.19%)\nMemory Usage: 14.2 MB (19.58%)\n\nRuntime: 96 ms (96.19%)\nMemory Usage: 14.2 MB (19.58%)\n\nRuntime: 96 ms (96.19%)\nMemory Usage: 14.2 MB (19.58%)\n\nRuntime: 96 ms (96.19%)\nMemory Usage: 14.2 MB (19.58%)\n\nRuntime: 96 ms (96.19%)\nMemory Usage: 14.2 MB (19.58%)\n\nRuntime: 96 ms (96.19%)\nMemory Usage: 14.2 MB (19.58%)\n\nRuntime: 96 ms (96.19%)\nMemory Usage: 14.2 MB (19.58%)\n\nRuntime: 96 ms (96.19%)\nMemory Usage: 14.2 MB (19.58%)\n\nRuntime: 96 ms (96.19%)\nMemory Usage: 14.2 MB (19.58%)\n\nRuntime: 96 ms (96.19%)\nMemory Usage: 14.2 MB (19.58%)\n\nRuntime: 96 ms (96.19%)\nMemory Usage: 14.2 MB (19.58%)\n\nRuntime: 96 ms (96.19%)\nMemory Usage: 14.2 MB (19.58%)\n\nRuntime: 96 ms (96.19%)\nMemory Usage: 14.2 MB (19.58%)\n\nRuntime: 96 ms (96.19%)\nMemory Usage: 14.2 MB (19.58%)\n\nRuntime: 96 ms (96.19%)\nMemory Usage: 14.2 MB (19.58%)\n\nRuntime: 96 ms (96.19%)\nMemory Usage: 14.2 MB (19.58%)\n\nRuntime: 96 ms (96.19%)\nMemory Usage: 14.2 MB (19.58%)\n\nRuntime: 96 ms (96.19%)\nMemory Usage: 14.2 MB (19.58%)\n\nRuntime: 96 ms (96.19%)\nMemory Usage: 14.2 MB (19.58%)\n\nRuntime: 96 ms (96.19%)\nMemory Usage: 14.2 MB (19.58%)\n\nRuntime: 96 ms (96.19%)\nMemory Usage: 14.2 MB (19.58%)\n\nRuntime: 96 ms (96.19%)\nMemory Usage: 14.2 MB (19.58%)\n\nRuntime: 96 ms (96.19%)\nMemory Usage: 14.2 MB (19.58%)\n\nRuntime: 96 ms (96.19%)\nMemory Usage: 14.2 MB (19.58%)\n\nRuntime: 96 ms (96.19%)\nMemory Usage: 14.2 MB (19.58%)\n\nRuntime: 96 ms (96.19%)\nMemory Usage"
    },
    {
        "number": 4017,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # return stdin.strip().split()\n    \n    n, a, k = list(map(int, stdin.strip().split()))\n    \n    if a < 0:\n        print(0)\n    elif a >= n:\n        print(0)\n    else:\n        \n        # print(a)\n        # print(k)\n        if k == 0:\n            print(0)\n        else:\n            print(a + k - 1)"
    },
    {
        "number": 4017,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, a = list(map(int, stdin.split()))\n    return str(n - len(a)) + str(n - sum(a))\n\ndef"
    },
    {
        "number": 4017,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = [int(x) for x in stdin.split()]\n    j = 0\n    k = 1\n    res = []\n    for i in range(n):\n        j = j + a[i]\n        while j <= k:\n            j = j + a[i]\n            if j >= len(a):\n                break\n            k = k + 1\n        if j >= len(a):\n            break\n        res.append(j)\n    if len(res) == 1:\n        return str(res[0])\n    else:\n        return '0'\n\n\n-------------------------------------------------------------------------------------------------------------------\n\nfor i in range(1, len(line.split(' ')) + 1):\n    if line.split(' ')[i].isdigit():\n        number = int(line.split(' ')[i])\n        if number == 1:\n            print(line.split(' ')[i])\n        if number >= 2:\n            print(number - 1)\n\nprint('0')\n"
    },
    {
        "number": 4017,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    ans = [0]*n\n    \n    def isGood(a,s):\n        if sum(a) == s:\n            return 1\n        else:\n            return 0\n    \n    def fun(n,s):\n        if n == 1:\n            ans[n] = s\n            return\n        \n        if s < 0:\n            return\n        \n        for i in range(1, n+1):\n            if isGood(a,s-a[i]) == 1:\n                a[i] = a[i] - 1\n                fun(n-1,s)\n                a[i] = 0\n            \n    fun(n,sum(a))\n    for i in range(n):\n        print(ans[i])\n    return \"\"\n\nExplanation\n\nThe functions in the problem are a, b, c, d, e, f, g, h, i, j. The function a is the solution of the problem, and b is the number of the nice indices. So, the solution of the problem is the sum of numbers $a$ and $b$ such that $b=f$. If it was not possible to add $b$, then you would need to remove $b$.\n\nThere is a better approach. Each element in the array $a$ is also good. You can do it by removing all elements equal to $b$ from it. But you can do it without removing all elements equal to $b$ from it. You can also do it without removing any element equal to $b$. You need to return the sum of $a$ and $b$, because it will be good.\n\nThis solution takes the exact same approach as the solution of the problem, but the sum of the array $a$ will be greater than $a[i]$, so the function a is just the sum of $a$. If there is no such indices, just return 0.\n"
    },
    {
        "number": 4017,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    def remove(a,b):\n        return a+b\n    \n    def check(a,b):\n        return a+b in a\n    \n    n = int(stdin)\n    a = list(map(int,stdin.split()))\n    j = len(a)-1\n    j = min(j,n-1)\n    while j >= 0:\n        if check(a,a[j]):\n            a[j] = 0\n        else:\n            j = j-1\n    return ''.join(str(e) for e in a)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 4017,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = []\n    for i in range(n):\n        a.append(int(stdin[i]))\n    \n    print(a)\n    \n    j = 0\n    while True:\n        if sum(a) == sum(a[:j]):\n            return '0'\n        elif sum(a) > sum(a[:j]):\n            print('No')\n            return '0'\n        else:\n            print('No')\n            return '0'\n        j = j + 1\n    \n    \n        \n'''\n"
    },
    {
        "number": 4018,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.strip()\n    S = set()\n    # print(n, k)\n    for _ in range(n):\n        S.add(s[:])\n    return -1 if len(S) == 0 else min(len(S), k)"
    },
    {
        "number": 4018,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = len(stdin)\n    k = 0\n    s = set()\n    for i in range(n):\n        l, s = solution(stdin[:i] + stdin[i+1:])\n        k += len(s)\n        if l < k:\n            return -1\n    return str(k)\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4018,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = list(stdin)\n    t = set(s)\n    S = {}\n    for i in range(n):\n        S[s[i]] = set(s[i + 1:])\n        t = t.intersection(S[s[i]])\n        S[s[i]] = S[s[i]].union(t)\n    return str(len(S[s[0]]))\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4018,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    S = set()\n    \n    while True:\n        n, k = map(int, stdin.split())\n        if n == 0:\n            break\n        s = stdin.split()\n        S.add(s[n-1])\n        s.pop()\n        for i in s:\n            S.add(i)\n    \n    \n    return str(len(S))\n\n\n-----Constraints-----\n1 <= n <= 10^3\n1 <= k <= 10^9\n\nTime Limit: O(n^2)\nSpace Limit: O(n^2)\n\n\n-----Tags-----\n\nTestCase = 10\nInput = \"5 6\"\nOutput = 4\nExplanation = [\n  [ \"asdf\", \"asd\", \"adf\", \"asf\", \"sdf\" ],\n  [ \"ajihiushda\" ],\n  [ \"i\", \"i\", \"i\", \"i\", \"i\" ]\n]\n\"\"\""
    },
    {
        "number": 4018,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return 0\n\n\n-----Constraints-----\n\n0 <= n <= 10^5\n0 <= k <= 10^12\n\nSubstring of stdin and string of length n, s, can be obtained from stdin by deleting at least one character from string.\n\nExplanation\n\nFor the first element of $S$, if s = \"asd\", then we can delete \"asd\", if it is \"asd\" the following characters in string: \"a\" and \"b\" are considered as subsequence to the string s.\n\nFor the other elements of $S$, if s = \"asdf\", then we can delete \"asdf\", since it is not possible to delete \"asd\".\n\nTo eliminate a character, we can use a set with the minimum price of that character.\n\nFor example, if s = \"aabb\", then the minimum price of a character is a, so we can delete a, since it is cheaper to delete a than an other character.\n\nIn the second example, the string can be obtained from stdin by deleting at least one character from string.\n\nFor the other elements of $S$, if s = \"asd\", then we can delete \"asd\", since it is not possible to delete a, since it is not possible to delete other characters.\n\nTo eliminate a character, we can use a set with the minimum price of that character.\n\nFor example, if s = \"aaabb\", then the minimum price of a character is a, since we can delete a, since it is cheaper to delete a than b.\n\nOutput\n\nOne if the set of characters $S$ is $S$ or one if it is not possible to remove one character from the set $S$.\n\nExplanation\n\nFor the first element of $S$, if s = \"aabb\", then we can delete \"a\", since it is cheaper to delete a than b.\n\nFor the other elements of $S$, if s = \"asd\", then we can delete \"asd\", since it is not possible to delete a, since it is not possible to delete other characters.\n\nFor example, if s = \"aaabb\", then we can delete a, since it is not possible to delete a than b.\n\nOutput\n\nOne if the set of characters $S$ is $S$ or one if it is not possible to remove one character from the set $S$.\n\nExample 1:\n\nInput: n = 5, k = 2\nOutput: 2\nExplanation:\n\n2 is the minimum number of characters to remove.\n2 is the minimum cost of removing characters from the set.\nExample 2:\n\nInput: n = 5, k = 3\nOutput: -1\nExplanation:\n\n-1 is the minimum number of characters to remove.\nExample 3:\n\nInput: n = 10, k = 0\nOutput: 2\nExplanation:\n\n2 is the minimum number of characters to remove.\n2 is the minimum cost of removing characters from the set.\n\nConstraints:\n\n1 <= n <= 10^5\n0 <= k <= 10^12\n\n-----Submissions-----\nPublic: 2021/10/19\nTestcase:  2021/10/19:40\n\"\"\"\n\ndef"
    },
    {
        "number": 4018,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n    #start = 0\n    #end = 0\n    \n    #while end < stdin.count(' '):\n    #    temp = stdin.find(''+ stdin[start:end + 1])\n    #    if temp!= -1:\n    #        print(temp, end = '')\n    #        start = temp + 1\n    #        end = temp + 1\n    #    else:\n    #        start += 1\n    \n    \n    import itertools\n    #create a set\n    stdin_set = set()\n    for i in range(len(stdin)):\n        stdin_set.add(stdin[i])\n        \n    #iterate over all substrings\n    for substrings in itertools.combinations_with_replacement(stdin_set, len(stdin) - 1):\n        #print(substrings)\n        #print(len(substrings))\n        #print(''.join(substrings))\n        #print(substrings.count(' '))\n        if len(substrings) == 1:\n            continue\n        if len(substrings) > 1:\n            #print(substrings[0], '\\n', substrings[1])\n            #print(substrings[1].count(' '), end = '')\n            \n            if substrings[0].count(' ') == substrings[1].count(' '):\n                continue\n            else:\n                return -1\n        \n        if len(substrings) == 2:\n            #print(substrings[0], '\\n', substrings[1])\n            #print(substrings[1].count(' '), end = '')\n            \n            if substrings[1].count(' ') == substrings[0].count(' '):\n                continue\n            else:\n                return -1\n        \n        #print(substrings)\n        \n        substrings_add = set()\n        for i in range(len(substrings[0])):\n            substrings_add.add(substrings[0][i])\n        \n        #print(substrings_add)\n        \n        if len(substrings) > 2:\n            #print(substrings[1], '\\n', substrings[2])\n            #print(substrings[2].count(' '), end = '')\n            \n            if substrings[1].count(' ') == substrings[2].count(' '):\n                continue\n            else:\n                return -1\n        \n        #print(substrings_add)\n        \n        if len(substrings) == 3:\n            #print(substrings[1], '\\n', substrings[2], '\\n', substrings[3])\n            #print(substrings[3].count(' '), end = '')\n            \n            if substrings[2].count(' ') == substrings[3].count(' '):\n                continue\n            else:\n                return -1\n        \n        \n        if len(substrings) > 3:\n            #print(substrings[1], '\\n', substrings[2], '\\n', substrings[3])\n            #print(substrings[3].count(' '), end = '')\n            \n            if substrings[1].count(' ') == substrings[3].count(' '):\n                continue\n            else:\n                return -1\n        \n        #print(substrings_add)\n        \n        if len(substrings) > 4:\n            #print(substrings[1], '\\n', substrings[2], '\\n', substrings[3], '\\n', substrings[4])\n            #print(substrings[4].count(' '), end = '')\n            \n            if substrings[2].count(' ') == substrings[4].count(' '):\n                continue\n            else:\n                return -1\n        \n        #print(substrings_add)\n        \n        #print(substrings[0])\n        \n        #print(substrings[1])\n        \n        #print(substrings[2])\n        #print(substrings[3])\n        #print(substrings[4])\n        \n        #print(substrings[1], substrings[0], substrings[2], substrings[3], substrings[4])\n        #print(substrings_add)\n        \n        #print(len(substrings[0]))\n        #print(len(substrings[1]))\n        #print(len(substrings[2]))\n        #print(len(substrings[3]))\n        #print(len(substrings[4]))\n        \n        if len(substrings[0]) > len(substrings[1]) and len(substrings[0]) > len(substrings[2]) and len(substrings[0]) > len(substrings[3]):\n            #print(substrings[1], '\\n', substrings[2], '\\n', substrings[3])\n            #print(substrings[3].count(' '), end = '')\n            \n            if substrings[3].count(' ') == substrings[1].count(' '):\n                continue\n            else:\n                return -1\n        \n        if len(substrings[0]) < len(substrings[1]) and len(substrings[0]) < len(substrings[2]):\n            #print(substrings[1], '\\n', substrings[2])\n            #print(substrings[2].count(' '), end = '')\n            \n            if substrings[2].count(' ') == substrings[1].count(' '):\n                continue\n            else:\n                return -1\n        \n        if len(substrings[0]) < len(substrings[1]) and len(substrings[0]) < len(substrings[2]):\n            #print(substrings[1], '\\n', substrings[2])\n            #print(substrings[2].count(' '), end = '')\n            \n            if substrings[2].count(' ') == substrings[1].count(' '):\n                continue\n            else:\n                return -1\n        \n        #print(substrings_add)\n        \n        #print(substrings[1])\n        #print(substrings[2])\n        #print(substrings[3])\n        \n        #print(substrings[4])\n        #print(substrings[4].count(' '), end = '')\n        \n        #print(len(substrings[0"
    },
    {
        "number": 4018,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    \n    S = set()\n    for _ in range(n):\n        S.add(stdin.strip().lower())\n        \n    if len(S) < k:\n        return -1\n    \n    #generate S using the given string\n    \n    S_ = S.copy()\n    while len(S) < k:\n        for i in range(len(S_) - 1):\n            if S_[i] == S_[i + 1]:\n                S_.pop(i)\n    if len(S) == k:\n        return len(S)\n    else:\n        return -1\n"
    },
    {
        "number": 4018,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    s = stdin.replace(\" \", \"\")\n    s = s.lower()\n    S = set()\n    for i in range(len(s)):\n        for j in range(i+1, len(s)):\n            S.add(s[i:j])\n    for i in range(n-k):\n        if len(S)!= 0:\n            for j in range(i, i+k):\n                S.remove(s[j:j+k])\n            if len(S) == 0:\n                return -1\n    return str(len(S))\n\n\n'''\n\ndef"
    },
    {
        "number": 4018,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    \n    if len(set(stdin)) == k:\n        return -1\n    \n    return min(1, (len(set(stdin)) - k) + 1)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4018,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.split()\n    for i in range(n):\n        if len(s[i]) == k:\n            s[i] = \"\".join(s[i])\n    return \"\".join(s)\n"
    },
    {
        "number": 4019,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, D = map(int, stdin.split())\n    edges = list(map(int, stdin.split()))\n    edges.sort()\n    visited = [0 for _ in range(n)]\n    tree = []\n    \n    def dfs(i, visited):\n        if visited[i] == 0:\n            visited[i] = 1\n            tree.append(i)\n            for u in edges[i]:\n                if visited[u] == 0:\n                    dfs(u, visited)\n            \n        else:\n            return\n    \n    for v in range(n-1):\n        if visited[v] == 0:\n            dfs(v, visited)\n    \n    tree.reverse()\n    for i in range(len(tree)):\n        if visited[tree[i]] == 0:\n            print(tree[i])\n    return \"NO\"\n"
    },
    {
        "number": 4019,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    return 'YES'\n\ndef"
    },
    {
        "number": 4019,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    edges = []\n    n = int(stdin)\n    for _ in range(n - 1):\n        u, v = map(int, stdin.split(' '))\n        edges.append((u, v))\n        edges.append((v, u))\n    edges.sort(key=lambda x: x[0])\n    degree = [1 for _ in range(n)]\n    for edge in edges:\n        degree[edge[0]] += 1\n        degree[edge[1]] += 1\n    print('YES' if degree[1] == degree[2] or degree[1] == degree[3] else 'NO')\n\n-----Constraints-----\n0 < stdin.length <= 10^5\n0 <= n, m <= 10^5\n0 <= v, u < n\n0 <= u, v <= n\n-inf <= D <= n\n1 <= edge.length <= 10^4\nedge[0]!= edge[1]\nedge[0] < edge[1]\n\n'''\n\n\ndef"
    },
    {
        "number": 4019,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split()\n    n = int(input[0])\n    m = int(input[1])\n    D = int(input[2])\n    edges = []\n    for i in range(m):\n        u, v = map(int, input[i * 3 + 1].split(','))\n        edges.append((u, v))\n    return solution(n, m, D, edges)\n\ndef"
    },
    {
        "number": 4019,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def get_vertices():\n        n, m = [int(x) for x in stdin.split()]\n        edges = []\n        for i in range(m):\n            edges.append((i+1, int(stdin[i*2+1:i*2+2])))\n        return n, edges\n    \n    def get_edges():\n        edges = []\n        for i in range(m):\n            edges.append((int(stdin[i*2+1:i*2+2]), i+1))\n        return m, edges\n\n    def process(n, edges):\n        vertices = [i+1 for i in range(n)]\n        if n == 1:\n            return [i+1 for i in range(n)]\n        else:\n            for u, v in edges:\n                if u == v:\n                    continue\n                elif vertices[v] < vertices[u]:\n                    u, v = v, u\n            return [vertices[u], vertices[v]]\n            \n    n, edges = get_vertices()\n    edges = get_edges()\n    st = process(n, edges)\n    if st == [1, 2, 3, 4]:\n        print('YES')\n    else:\n        print('NO')\n"
    },
    {
        "number": 4019,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.replace('\\n', '')\n    def find_edges(e: str):\n        if e[0] == 'D':\n            return e.replace('D', '').split(' ')\n        return [int(v) for v in e.split(',')]\n\n    def find_vertices(e: str):\n        if e[0] == 'V':\n            return [int(v) for v in e.split(',')]\n        return [int(v) - 1 for v in e.split(',')]\n\n    def get_edges(e: str):\n        if e[0] == 'E':\n            return [find_vertices(e[1:]), find_vertices(e[2:])]\n        return [find_vertices(e[1:]), find_vertices(e[2:])]\n    edges = list(map(find_edges, stdin.split('\\n')))\n    vertices = list(map(find_vertices, stdin.split('\\n')))\n    answer = 'NO'\n    graph = [[] for _ in range(vertices[0], vertices[-1]+1)]\n    for i in range(vertices[0], vertices[-1]+1):\n        for v in edges:\n            if v[0] == i and v[1] == i:\n                graph[i].append(v)\n    for i in range(vertices[0], vertices[-1]+1):\n        if len(graph[i]) >= 2:\n            answer = 'YES'\n            break\n    return answer\n"
    },
    {
        "number": 4019,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, D = map(int, stdin.split())\n    u = []\n    v = []\n    edges = []\n    for i in range(n):\n        u.append(i)\n        v.append(i)\n    for i in range(m):\n        for j in range(i+1, m):\n            edges.append((u[i], u[j]))\n            edges.append((u[j], v[i]))\n    for ui, vi in edges:\n        if D % 2 == 0:\n            if ui > vi:\n                ui, vi = vi, ui\n        else:\n            if ui < vi:\n                ui, vi = vi, ui\n    for u in u:\n        for v in v:\n            if D % 2 == 0:\n                if ui > v:\n                    ui, v = v, ui\n            else:\n                if ui < v:\n                    ui, v = v, ui\n    return str(n-1)\n\n----Input----\n\ninput1 = 5\ninput2 = 4\ninput3 = 3\ninput4 = 2\n\n---Output---\n\nYES\n2 1\n2 3\n3 4\n\nOutput:\nNO\n\n\n----Input----\n\ninput1 = 4\ninput2 = 3\ninput3 = 2\ninput4 = 1\n\n---Output---\n\nNO\n\n\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4019,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = map(int, stdin.strip().split())\n    graph = [[] for _ in range(n)]\n    for i in range(m):\n        x, y = map(int, stdin.strip().split())\n        graph[x-1].append(y-1)\n        graph[y-1].append(x-1)\n    answer = 0\n    for i in range(n):\n        if d in graph[i]:\n            answer += 1\n            answer += d\n    answer += m-answer\n    return answer\n    pass\n\ndef"
    },
    {
        "number": 4019,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = [tuple(map(int, stdin.split())) for _ in range(m)]\n    graph = [[] for _ in range(n)]\n    for edge in edges:\n        graph[edge[0] - 1].append(edge[1] - 1)\n        graph[edge[1] - 1].append(edge[0] - 1)\n    \n    def is_loop(graph):\n        for v in range(len(graph)):\n            for u in range(v + 1, len(graph)):\n                if not graph[v].isdisjoint(graph[u]):\n                    return True\n        return False\n    \n    def find_spans(graph):\n        edge_dict = {}\n        for v in range(len(graph)):\n            if v not in edge_dict:\n                edge_dict[v] = []\n            for u in range(len(graph)):\n                if u not in edge_dict[v]:\n                    edge_dict[v].append(u)\n        \n        for i in range(n):\n            if i not in edge_dict:\n                continue\n            edge_dict[i].sort()\n            edge_dict[i] = edge_dict[i][1:]\n        \n        for i in range(n):\n            if i not in edge_dict:\n                continue\n            if is_loop(graph[i]):\n                continue\n            spans = []\n            for j in range(n):\n                if j not in edge_dict[i]:\n                    continue\n                if i not in edge_dict[j]:\n                    spans.append(i)\n            if not spans:\n                continue\n            return spans\n    \n    def find_spans_recursive(graph, u, d):\n        if u == d:\n            return []\n        \n        edge_dict = {}\n        for v in range(len(graph)):\n            if v not in edge_dict:\n                edge_dict[v] = []\n            for u in range(len(graph)):\n                if u not in edge_dict[v]:\n                    edge_dict[v].append(u)\n                if u not in edge_dict[u]:\n                    edge_dict[u].append(v)\n        \n        for i in range(n):\n            if i not in edge_dict:\n                continue\n            edge_dict[i] = edge_dict[i][1:]\n            if u in edge_dict[i] and i not in edge_dict[u]:\n                spans = []\n                for j in range(n):\n                    if j not in edge_dict[i] and j not in edge_dict[u]:\n                        spans.append(i)\n                return spans\n            if u not in edge_dict[i]:\n                spans = []\n                for v in range(n):\n                    if v not in edge_dict[i] and v not in edge_dict[u]:\n                        spans.append(i)\n                return spans\n            else:\n                spans = []\n                for v in range(n):\n                    if v not in edge_dict[i] and v not in edge_dict[u]:\n                        spans.append(i)\n                        continue\n                    if u not in edge_dict[v]:\n                        spans.append(i)\n                        continue\n                    if v not in edge_dict[u]:\n                        spans.append(i)\n                        continue\n                    \n        return None\n\n    return str(find_spans(graph))[1:-1]\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4019,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, D = list(map(int, stdin.split()))\n    edges = []\n    visited = []\n    for _ in range(m):\n        u, v = map(int, stdin.split())\n        edges.append((u, v))\n        visited.append(u)\n        visited.append(v)\n    \n    def check(u, v, D):\n        if not visited[u] and not visited[v]:\n            return False\n        elif not visited[u]:\n            return True\n        elif not visited[v]:\n            return True\n        elif visited[u] == visited[v]:\n            return True\n        elif visited[u] == visited[v] and D > abs(u - v):\n            return True\n        else:\n            return False\n    \n    def dfs(u, visited, D):\n        visited[u] = 1\n        D -= 1\n        for v in edges[u]:\n            if not visited[v] and check(v, u, D):\n                dfs(v, visited, D)\n        if D == 0:\n            return False\n        else:\n            return True\n    \n    if not dfs(0, visited, D):\n        return \"NO\"\n    else:\n        return \"YES\"\n\"\"\"\n\nimport collections\n\nclass Graph:\n    def __init__(self, n):\n        self.V = n\n        self.graph = [[0 for i in range(n)] for i in range(n)]\n        self.cnt = 0\n        \n    def print_graph(self):\n        for i in range(self.V):\n            print(self.graph[i])\n        \n    def add_edge(self, u, v):\n        self.graph[u][v] = 1\n        self.graph[v][u] = 1\n        \n    def remove_edge(self, u, v):\n        self.graph[u][v] = 0\n        self.graph[v][u] = 0\n        \n    def show_graph(self):\n        for i in range(self.V):\n            print(self.graph[i])\n    \n    def show_nodes(self):\n        for i in range(self.V):\n            print(self.graph[i][i])\n            \n    def show_edges(self):\n        for i in range(self.V):\n            for j in range(self.V):\n                if self.graph[i][j]!= 0:\n                    print(self.graph[i][j], end=' ')\n            print()\n                \n    def remove_vertex(self, v):\n        for i in range(self.V):\n            if self.graph[i][v] == 1:\n                self.graph[i][v] = 0\n                self.cnt -= 1\n                \n                \n                \n                \n                \n        \n    def DFS(self, v, visited):\n        visited[v] = True\n        print(v, end=' ')\n        \n        for i in range(self.V):\n            if self.graph[v][i] == 1 and visited[i] == False:\n                self.DFS(i, visited)\n            \n        return self.cnt\n        \n    def find_vertex(self, u):\n        visited = [False] * self.V\n        \n        for v in range(self.V):\n            if visited[v] == False and self.graph[v][u] == 1:\n                self.DFS(v, visited)\n                \n        return visited\n    \n    def DFS_rec(self, v, visited):\n        visited[v] = True\n        print(v, end=' ')\n        \n        for i in range(self.V):\n            if visited[i] == False and self.graph[v][i] == 1:\n                self.DFS_rec(i, visited)\n        \n        return self.cnt\n        \n    def find_edges(self, v, visited):\n        visited[v] = True\n        \n        for u in range(self.V):\n            if visited[u] == False and self.graph[u][v] == 1:\n                self.DFS_rec(u, visited)\n        \n        return visited\n    \n    def DFS_rec2(self, u, visited):\n        visited[u] = True\n        \n        for v in range(self.V):\n            if visited[v] == False and self.graph[u][v] == 1:\n                self.DFS_rec(v, visited)\n        \n        return visited\n        \n    def DFS_rec3(self, u, visited):\n        visited[u] = True\n        \n        for v in range(self.V):\n            if visited[v] == False and self.graph[u][v] == 1:\n                self.DFS_rec(v, visited)\n        \n        return visited\n        \n    \ng = Graph(4)\ng.add_edge(0, 1)\ng.add_edge(0, 3)\ng.add_edge(1, 2)\ng.add_edge(1, 3)\ng.add_edge(2, 3)\ng.add_edge(3, 4)\ng.add_edge(4, 5)\n\ng.DFS(4, [False for i in range(4)])\ng.DFS(5, [False for i in range(4)])\ng.DFS(6, [False for i in range(4)])\ng.DFS(7, [False for i in range(4)])\ng.DFS(8, [False for i in range(4)])\ng.DFS(9, [False for i in range(4)])\ng.DFS(10, [False for i in range(4)])\ng.DFS(11"
    },
    {
        "number": 4020,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    h1, m1 = map(int, stdin.split(' '))\n    h2, m2 = map(int, stdin.split(' '))\n    h3 = h1 + m1 / 60\n    m3 = m1 % 60\n    h = h2\n    while h1 <= h2:\n        h += 1\n        if h == h3:\n            h = h1\n            m3 += 1\n    m = m2 / 60\n    while m1 <= m2:\n        m += 1\n        if m == m3:\n            m = m1\n            h3 += 1\n    print(h, ':', h3, ':', m3, sep='')\n\n-----Constraints-----\n1 <= h1, m1 <= 23\n1 <= h2, m2 <= 59\n\nTime Limit: 300 ms\nMemory Limit: 1GB\n\n\nclass Solution:\n    def getMid(self, left: int, right: int) -> int:\n        # binary search\n        start = (left + right) // 2\n        mid = (left + right) // 2\n\n        # find mid point\n        if mid <= start:\n            return mid\n        elif mid == start:\n            return mid\n        elif mid == right:\n            return right\n\n        # find the mid point\n        if right - left <= mid - start:\n            return mid\n        else:\n            return right\n\n\n-----Test Cases-----\nInput\n10:00\n11:00\n\nOutput\n10:30\n\nInput\n11:10\n11:12\n\nOutput\n11:11\n\nInput\n01:02\n03:02\n\nOutput\n02:02\ndef"
    },
    {
        "number": 4020,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    hours, mins = map(int, stdin.split())\n    print((hours + mins) // 60)\n    print((hours + mins + 1) // 60)\n    return str(hours + mins // 60 + 1) + \":\" + str(mins)\n"
    },
    {
        "number": 4020,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    h_1, m_1, h_2, m_2 = map(int, stdin.split())\n    h_3 = h_1\n    m_3 = m_1\n    if m_2 > 59:\n        m_2 = m_2 - 60\n        h_3 = h_3 + 1\n    if m_2 >= 60:\n        h_3 = h_3 + 1\n        m_3 = m_3 + 60\n    if m_2 < 0:\n        m_2 = m_2 + 60\n        h_3 = h_3 + 1\n    if m_2 <= 0:\n        h_3 = h_3 + 1\n    if h_3 >= 23:\n        h_3 = h_3 - 12\n        m_3 = m_3 + 60\n    if h_3 < 0:\n        h_3 = h_3 + 12\n        m_3 = m_3 - 60\n    return str(h_3) + \":\" + str(m_3)\n"
    },
    {
        "number": 4020,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    h, m = map(int, stdin.split(':'))\n    h += m // 60\n    m %= 60\n    return f'{h:02d}:{m:02d}'\n"
    },
    {
        "number": 4020,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    h1, m1 = map(int, stdin.split())\n    h2, m2 = map(int, stdin.split())\n    h3, m3 = max(h1, h2), max(m1, m2)\n    if h3 == h2:\n        print(f\"{h3:02}:{m3:02}\")\n    else:\n        mid = (h3 + h2) // 2\n        if mid == h3:\n            print(f\"{mid:02}:{m3:02}\")\n        else:\n            print(f\"{mid:02}:{m3:02}\")\n            if h3 > mid:\n                h3 = mid\n            else:\n                h3 = mid + 1\n            if m3 > mid:\n                m3 = mid\n            else:\n                m3 = mid + 1\n        print(f\"{h3:02}:{m3:02}\")\n        solution(stdin)\n\n-----Constraints-----\n0 <= stdin.length <= 2 * 104\n\nTime Limit: 1 sec\nMemory Limit: 2.9 MB\n\n\nTime:\n\nO(m^2)\nSpace:\n\n\"\"\"\n\nimport math\n\nclass Solution:\n    def midpoint(self, stdin: str) -> str:\n        m, h = map(int, stdin.split())\n        m, h = int(math.floor(m / 60)), int(math.floor(h / 60))\n        if m % 60!= 0:\n            m += 1\n        return f\"{h}:{m}\".replace(\":\", \":0\").replace(\".\", \":\").lstrip(\"0\")\n"
    },
    {
        "number": 4020,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\":\")\n    h1 = int(stdin[0])\n    h2 = int(stdin[1])\n    m1 = int(stdin[2])\n    m2 = int(stdin[3])\n    if h1<0 or h1>23 or m1<0 or m1>59:\n        return \"0:00\"\n    if h2<0 or h2>23 or m2<0 or m2>59:\n        return \"0:00\"\n    mid = (h1+h2+m1+m2)/3\n    print(mid)\n    return str(mid)\n\n-----Constraints-----\n1 <= stdin.length <= 20\n0 <= stdin[i] < 2^31 - 1\n\nA postfix expression is a valid expression.\n'''\n"
    },
    {
        "number": 4020,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    h_1, m_1 = map(int, stdin.split(' '))\n    h_2, m_2 = map(int, stdin.split(' '))\n    h_3 = (h_2 + h_1) // 2\n    m_3 = m_2 + m_1\n    if (h_1 >= 23 or h_2 >= 23 or h_3 >= 23 or m_1 >= 59 or m_2 >= 59 or m_3 >= 59):\n        return '{:0>2d}:{:0>2d}'.format(h_3, m_3)\n    else:\n        return '{:0>2d}:{:0>2d}'.format(h_1, m_1)\n"
    },
    {
        "number": 4020,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    h, m, r = map(int, stdin.split())\n    h_3 = h + r // 60 * 60\n    m_3 = m + r % 60\n    h_3 = int(str(h_3)[0:2])\n    m_3 = int(str(m_3)[0:2])\n    return str(h_3) + \":\" + str(m_3)\n\n-----Constraints-----\n1 <= h <= 23\n0 <= m <= 59\n\n-----Time Limit-----\nTime Limit: 1 sec\n\nSample Input\n\nInput\n10:00\n11:00\n\nSample Output\n\n10:30\n10:30\n\nExplanation\n\n10:30 -> 10:00\n10:30 -> 11:00\n10:30 -> 11:30\n10:30 -> 11:30\n10:30 -> 11:30\n\n_____________________________________________________________________________________________________________________________________________________________________________________________\n\nclass Solution:\n    def contest_end(self, stdin):\n        h, m = map(int, stdin.split())\n        return h*60+m%60\n\n\"\"\"\nclass Solution:\n    def __init__(self):\n        self.h = 0\n        self.m = 0\n        self.h_3 = 0\n        self.m_3 = 0\n        self.h_3_3 = 0\n\n    def solution(self, stdin):\n        for i in range(int(stdin)):\n            hh, mm = map(int, stdin.split())\n            self.h += hh\n            self.m += mm\n            self.h_3 += hh * 60\n            self.m_3 += mm * 60\n            self.h_3_3 += self.h_3 + self.m_3\n        self.h_3_3 %= 60\n        self.m_3_3 = self.m_3 % 60\n        self.m_3_3 = max(self.m_3_3, 0)\n        self.m_3_3 = min(self.m_3_3, 59)\n        self.h_3_3 %= 60\n        self.m_3_3 = max(self.m_3_3, 0)\n        self.m_3_3 = min(self.m_3_3, 59)\n        self.h_3_3 %= 60\n        return str(self.h_3) + \":\" + str(self.m_3_3)\n"
    },
    {
        "number": 4020,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    h,m = stdin.split()\n    h = int(h)\n    m = int(m)\n    if h <= 23 and m <= 59:\n        print(f'{h:02d}:{m:02d}')\n    else:\n        print(f'{h:02d}:{m:02d}')\n        print(f'{h:02d}:{m:02d}')\n        print(f'{h:02d}:{m:02d}')\n    print(f'{h:02d}:{m:02d}')\n    print(f'{h:02d}:{m:02d}')\n    print(f'{h:02d}:{m:02d}')\n    print(f'{h:02d}:{m:02d}')\n    print(f'{h:02d}:{m:02d}')\n    print(f'{h:02d}:{m:02d}')\n    print(f'{h:02d}:{m:02d}')\n    print(f'{h:02d}:{m:02d}')\n    print(f'{h:02d}:{m:02d}')\n    print(f'{h:02d}:{m:02d}')\n    print(f'{h:02d}:{m:02d}')\n    print(f'{h:02d}:{m:02d}')\n    print(f'{h:02d}:{m:02d}')\n    print(f'{h:02d}:{m:02d}')\n    print(f'{h:02d}:{m:02d}')\n    print(f'{h:02d}:{m:02d}')\n    print(f'{h:02d}:{m:02d}')\n    print(f'{h:02d}:{m:02d}')\n    print(f'{h:02d}:{m:02d}')\n    print(f'{h:02d}:{m:02d}')\n    print(f'{h:02d}:{m:02d}')\n    print(f'{h:02d}:{m:02d}')\n    print(f'{h:02d}:{m:02d}')\n    print(f'{h:02d}:{m:02d}')\n    print(f'{h:02d}:{m:02d}')\n    print(f'{h:02d}:{m:02d}')\n    print(f'{h:02d}:{m:02d}')\n    print(f'{h:02d}:{m:02d}')\n    print(f'{h:02d}:{m:02d}')\n    print(f'{h:02d}:{m:02d}')\n    print(f'{h:02d}:{m:02d}')\n    print(f'{h:02d}:{m:02d}')\n    print(f'{h:02d}:{m:02d}')\n    print(f'{h:02d}:{m:02d}')\n    print(f'{h:02d}:{m:02d}')\n    print(f'{h:02d}:{m:02d}')\n    print(f'{h:02d}:{m:02d}')\n    print(f'{h:02d}:{m:02d}')\n    print(f'{h:02d}:{m:02d}')\n    print(f'{h:02d}:{m:02d}')\n    print(f'{h:02d}:{m:02d}')\n    print(f'{h:02d}:{m:02d}')\n    print(f'{h:02d}:{m:02d}')\n    print(f'{h:02d}:{m:02d}')\n    print(f'{h:02d}:{m:02d}')\n    print(f'{h:02d}:{m:02d}')\n    print(f'{h:02d}:{m:02d}')\n    print(f'{h:02d}:{m:02d}')\n    print(f'{h:02d}:{m:02d}')\n    print(f'{h:02d}:{m:02d}')\n    print(f'{h:02d}:{m:02d}')\n    print(f'{h:02d}:{m:02d}')\n    print(f'{h:02d}:{m:02d}')\n    print(f'{h:02d}:{m:02d}')\n    print(f'{h:02d}:{m:02d}')\n    print(f'{h:02d}:{m:02d}')\n    print(f'{h:02d}:{m:02d}')\n    print(f'{h:02d}:{m:02d}')\n    print(f'{h:02d}:{m:02d}')\n    print(f'{h:02d}:{m:02d}')\n    print(f'{h:02d}:{m:02d}')\n    print(f'{h:02d}:{m:02d}')\n    print(f'{h:02d}:{m:02d}')\n    print(f'{h:02d}:{m:02d}')\n    print(f'{h:02d}:{m:02d}')\n    print(f'{h:02d}:{m:02d}')\n    print(f'{h:02d}:{m:02d}')\n    print(f'{h:02d}:{m:02d}')\n    print(f'{h:02d}:{m:02d}')\n    print(f'{h:02d}:{m:02d}')\n    print(f'{h:02d}:{m:02d}')\n    print(f'{h:02d}:{m:02d}')\n    print(f'{h:02d}:{m:02d}')\n    print(f'{h:02d}:{m:02d}')\n    print("
    },
    {
        "number": 4020,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    h_1, h_2, m_1, m_2 = map(int, stdin.split(' '))\n    if h_1 > 23 or h_2 > 23 or m_1 > 59 or m_2 > 59:\n        return 'INVALID'\n    if h_1 <= h_2:\n        h_1 += 60\n    if m_1 <= m_2:\n        m_1 += 60\n    return f'{h_1:02}:00' if h_1 >= h_2 and m_1 >= m_2 else f'{h_2:02}:00' if h_1 >= h_2 and m_1 >= m_2 else f'{h_1:02}:01'\n"
    },
    {
        "number": 4021,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    answer = ''\n    \n    for line in stdin:\n        if line.isalpha():\n            answer += line\n    return answer\n'''\n\nclass Solution:\n    def dfs(self,s,idx):\n        if len(s)==idx:\n            return True\n        for i in range(idx,len(s)):\n            if s[i]=='b' and s[idx-1]=='p':\n                return True\n        return False\n    \n    def generateParenthesis(self, n: int) -> List[str]:\n        res = []\n        \n        def backtracking(s,idx):\n            if len(s)==n:\n                res.append(s)\n                return\n            \n            for i in range(idx,len(s)):\n                if self.dfs(s[:i]+s[i+1:],i):\n                    backtracking(s[:i]+s[i+1:]+'(',i+1)\n        backtracking('',0)\n        return res\n    \n    def generateParenthesis_new(self, n: int) -> List[str]:\n        res = []\n        \n        def backtracking(s,idx):\n            if len(s)==n:\n                res.append(s)\n                return\n            \n            for i in range(idx,len(s)):\n                if self.dfs(s[:i]+s[i+1:],idx):\n                    backtracking(s[:i]+s[i+1:],i+1)\n        backtracking('',0)\n        return res\n"
    },
    {
        "number": 4021,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    l = []\n    l.append(int(stdin))\n    for i in range(2,len(stdin)):\n        l.append(l[i-1]+l[i])\n    print(l[-1])\n    \nsolution(\"2\")"
    },
    {
        "number": 4021,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    print(N)\n    \n    if N == 0:\n        return 0\n    elif N == 1:\n        return 1\n    else:\n        N = N - 1\n        return solution(N) + solution(N - 1)\n    \n"
    },
    {
        "number": 4021,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    numbers = stdin.split()\n    x = numbers[0]\n    y = numbers[1]\n    \n    for i in range(len(y)):\n        y[i] = int(y[i])\n    \n    #for i in range(1, len(y)):\n        #print(x[i] + y[i])\n    \n    if int(x[0]) % 2 == 0:\n        if int(x[1]) % 2 == 0:\n            return x[0] + y[0]\n        else:\n            return x[0] + y[1]\n    else:\n        if int(x[1]) % 2 == 0:\n            return x[1] + y[0]\n        else:\n            return x[1] + y[1]\n\nprint(solution(\"4\")) #2\nprint(solution(\"27\")) #2\nprint(solution(\"42\")) #2\nprint(solution(\"35\")) #5\nprint(solution(\"413321\")) #6\n"
    },
    {
        "number": 4021,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    print(n)\n    x = str(n).zfill(5)\n    print(x)\n    return x\n\nSolution\nInput\n\nOutput\n\n2\n2\n2\nOutput\n2\n\nInput\n\nInput\n\nOutput\nOutput\n2\n2\n2\nOutput\n2\n\nInput\n\nInput\n\nOutput\nOutput\n2\n2\n2\nOutput\n2\n2\n\ninput:\n2\n2\n2\noutput:\n2\n2\n2\noutput:\n2\n2\n2\n2\n\ninput:\n4\n3\n2\noutput:\n3\n2\n2\n2\noutput:\n2\n2\n2\n2\noutput:\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n\n\"\"\"\n\nimport re\n\ndef"
    },
    {
        "number": 4021,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n    answer = ''\n    \n    for x in range(len(stdin)):\n        answer += str(int(stdin[x])-1) + '\\n'\n    return answer"
    },
    {
        "number": 4021,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    from collections import deque\n    answer = deque(map(int, stdin.split()))\n    count = 0\n    for num in answer:\n        if num > answer[0]:\n            count += 1\n            answer.popleft()\n        elif num < answer[0]:\n            answer.append(num)\n    return str(count)"
    },
    {
        "number": 4021,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    answer = 0\n    \n    for n in range(1, len(stdin) + 1):\n        a = int(stdin[:n])\n        b = int(stdin[n:])\n        \n        if a % 2 == 0:\n            a = a % 2\n        \n        if b % 2 == 0:\n            b = b % 2\n        \n        if a == b:\n            answer += 2\n        \n    return str(answer)\n"
    },
    {
        "number": 4021,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    answer = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            answer += i//2\n    return answer"
    },
    {
        "number": 4021,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int,stdin.split()))\n    a.sort()\n    return str(sum(a[-2:]))+a[-1]\n\n'''\n"
    },
    {
        "number": 4022,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    segments = stdin\n    segments = segments.split(\" \")\n    for i in range(len(segments)):\n        segments[i] = int(segments[i])\n    if (len(segments) == 1):\n        return 0\n    if (segments[0] == 0):\n        return segments[0]\n    for i in range(len(segments)):\n        if (segments[i] > segments[i+1]):\n            del segments[i]\n            segments.insert(i, segments[i+1])\n    if (len(segments) > 0):\n        return (len(segments) - 1)\n    return 0\n\n\nprint(solution(\"3 5 0 4\"))\nprint(solution(\"2 3 0 4\"))\nprint(solution(\"1 2 4 6\"))\nprint(solution(\"2 3 0 4 1 10 20\"))"
    },
    {
        "number": 4022,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    lst = []\n    for _ in range(n):\n        lst.append(list(map(int,stdin[1:].split())))\n    \n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i][0] < lst[j][0] and lst[i][1] < lst[j][1]:\n                lst[i], lst[j] = lst[j], lst[i]\n    \n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i][0] < lst[j][0] and lst[i][1] < lst[j][1]:\n                lst[i], lst[j] = lst[j], lst[i]\n    \n    for i in range(len(lst)):\n        if lst[i][0] == lst[i][1]:\n            lst[i] = None\n    \n    for i in range(len(lst)):\n        if lst[i][0] == None or lst[i][1] == None:\n            lst[i] = None\n    \n    for i in range(len(lst)):\n        if lst[i][0]!= None and lst[i][1]!= None:\n            if lst[i][0] < lst[i][1]:\n                lst[i] = (lst[i][0],lst[i][1])\n            elif lst[i][0] > lst[i][1]:\n                lst[i] = (lst[i][1],lst[i][0])\n    \n    # print(lst)\n    answer = len(lst)\n    for i in range(len(lst)):\n        if lst[i][0]!= None and lst[i][1]!= None:\n            answer += 1\n    \n    return answer\n"
    },
    {
        "number": 4022,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    l = sorted(set(map(lambda x: int(x) - 1, a)))\n    r = sorted(set(map(lambda x: int(x) + 1, a)))\n    return ''.join(map(str, l)) + ',' + ''.join(map(str, r))\n\n\n\ndef"
    },
    {
        "number": 4022,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.rstrip())\n    line = list(map(int,stdin.split()))\n    l = 0\n    r = 0\n    i = 0\n    while i < n:\n        if line[i] == 0:\n            r = r + 1\n            if l == 0:\n                l = i\n            else:\n                l = i\n            i = i + 1\n        else:\n            l = l + 1\n            if r == 0:\n                r = i\n            else:\n                r = i\n            i = i + 1\n    if r == n - 1:\n        return 0\n    else:\n        return l - r\n\n\"\"\""
    },
    {
        "number": 4022,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    sequence = []\n    for _ in range(n):\n        sequence.append(list(map(int, stdin.split(' '))))\n    segments = []\n    for i in range(n):\n        segments.append(sequence[i][:len(sequence[i])//2])\n        sequence[i] = sequence[i][len(sequence[i])//2:]\n    print(len(set(segments)))\n    return str(len(set(segments)))\n\n\n    pass\n"
    },
    {
        "number": 4022,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    s = []\n    for _ in range(n):\n        l, r = map(int, stdin.strip().split())\n        s.append((l, r))\n    s.sort()\n    i = 0\n    while i < len(s):\n        if i!= 0:\n            if s[i][1] == s[i - 1][1]:\n                s.pop(i)\n            else:\n                i += 1\n        else:\n            i += 1\n    if len(s) == 1:\n        return str(s[0][0])\n    else:\n        return str(s[0][0] + s[1][0])\n\n\"\"\"\n"
    },
    {
        "number": 4022,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    intersection = [0] * n\n    intersection[0] = 1\n    intersection[1] = 1\n    intersection[2] = 1\n    intersection[3] = 1\n\n    for i in range(4, n):\n        intersection[i] = max(intersection[i - 1] + 1, intersection[i - 3])\n\n    for i in range(4, n):\n        intersection[i] = max(intersection[i - 1] + 1, intersection[i - 2] + 1, intersection[i - 4] + 1)\n\n    for i in range(5, n):\n        intersection[i] = max(intersection[i - 1] + 1, intersection[i - 2] + 1, intersection[i - 3] + 1)\n\n    return str(sum(intersection))\n\n\nprint(solution(stdin=input()))"
    },
    {
        "number": 4022,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    sequence = [int(i) for i in stdin.split()]\n    segments = []\n    for i in range(n - 1):\n        segments.append(int(sequence[i]))\n        for j in range(i + 1, n - 1):\n            segments.append(int(sequence[j]))\n    segments.append(int(sequence[n - 1]))\n    return str(max(segments))\n\n\ndef"
    },
    {
        "number": 4022,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    segments = []\n    for i in range(n):\n        segments.append(list(map(int, stdin.strip().split())))\n    segments.sort(key=lambda x: (x[1], x[0]))\n    res = 0\n    for i in range(len(segments) - 1):\n        if segments[i][0] < segments[i + 1][0] and segments[i][1] < segments[i + 1][1]:\n            continue\n        res += 1\n    return str(res)\n'''\n\ndef"
    },
    {
        "number": 4022,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    segments = []\n    i = 0\n    # print(segments)\n    # print(i)\n    while i < n:\n        data = stdin[i:i+2]\n        if data == \"1\":\n            # print(\"data is 1\")\n            segments.append(data)\n        elif data == \"2\":\n            segments.append(data)\n        elif data == \"0\":\n            segments.pop()\n        else:\n            print(\"segments are: \")\n            print(segments)\n        i += 1\n    # print(segments)\n    return solution(segments)\n\nprint(solution(\"4\"))"
    },
    {
        "number": 4023,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    s = list(map(int, stdin.split()))\n    for i in range(len(s)):\n        if a[i] == s[i]:\n            continue\n        if i > 0:\n            if s[i-1] == s[i]:\n                s[i] = s[i] + 1\n                s[i-1] = s[i-1] + 1\n            else:\n                s[i] = s[i] + 1\n    if sum(s) == 0:\n        return \"YES\"\n    return \"NO\"\n\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= a[i] <= 10^9\n\nTime Limit: O(n)\n\n\n----Solution----\ndef"
    },
    {
        "number": 4023,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input = list(map(int, stdin.split()))\n    if sum(input) == 0:\n        return \"YES\"\n    for i in range(len(input)):\n        if input[i]!= 1:\n            input[i] += 1\n            input[i] = max(input[i], 1)\n            for j in range(i+1, len(input)):\n                input[j] -= 1\n            input[i] -= 1\n            for j in range(i, len(input)):\n                if input[j] == 0:\n                    input[j] += 1\n                    input[j] = max(input[j], 1)\n    return \"NO\"\n\n=======\n\ntest case\nInput\n3\n2 5 10\n\nOutput\nNO\n\n\"\"\"\n\n\n\nclass Solution:\n    def wallRotate(self, matrix: List[List[int]]) -> List[List[int]]:\n\n        self.dic = {}\n\n        def dfs(r, c):\n\n            if r == len(matrix):\n                return\n\n            if c == len(matrix[r]):\n                return\n\n            if c not in self.dic:\n                self.dic[c] = matrix[r][c]\n\n            dfs(r + 1, c)\n\n            self.dic[c] = matrix[r][c]\n\n            dfs(r + 1, c + 1)\n\n        dfs(0, 0)\n        return self.dic\n"
    },
    {
        "number": 4023,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    stairs = [int(x) for x in stdin.strip().split()]\n\n    wall = [[0 for x in range(n+1)] for x in range(n+1)]\n\n    for i in range(1, n+1):\n        wall[i][0] = stairs[i-1]\n    \n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            wall[i][j] = wall[i-1][j] + wall[i-1][j-1] + wall[i-1][j+1]\n\n    if wall[n][n] == 0:\n        return \"NO\"\n    else:\n        return \"YES\"\n"
    },
    {
        "number": 4023,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    def lcs(a,b):\n        if len(a)==0 or len(b)==0:\n            return a+b\n        if a[-1]==b[-1]:\n            return lcs(a[:-1],b[:-1])+b[-1]\n        else:\n            return max(lcs(a[:-1],b),lcs(a,b[:-1]))\n    \n    for _ in range(int(stdin.strip())):\n        n=int(stdin.strip())\n        a=list(map(int,input().split()))\n        b=list(map(int,input().split()))\n        c=lcs(a,b)\n        if c==n:\n            return \"YES\"\n    return \"NO\""
    },
    {
        "number": 4023,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\n-----Constraints-----\n\n1 \u2264 n \u2264 10^4\n1 \u2264 a_i < 10^9\n1 \u2264 a_i < 10^5\n\n----Examples----\n\nInput\n2\n1 3\n\nOutput\nNO\n\n\nInput\n2\n2 2\n\nOutput\nYES\n\nInput\n3\n1 5\n\nOutput\nNO\n\nInput\n1\n1 4\n\nOutput\nYES\n\n\n-----Tags-----\nFrontier\nSubmission: ps\nTime Limit: 1 seconds\nMemory Usage: 14.3 MB\n\n\n-----Constraints-----\n\n1 <= n <= 10^4\n\n1 <= a_i < 10^9\n\n\n\nclass Solution:\n    def wallis(self, n, a, b):\n        c = 1\n        for i in range(1, n+1):\n            c *= 2**(i-1)\n        for i in range(1, n+1):\n            c *= 2**(n-i)\n        \n        return c * a * b"
    },
    {
        "number": 4023,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    h = list(map(int, stdin.split()))\n    h.sort()\n    c = []\n    for i in range(len(h)):\n        c.append(h[i] - a[i])\n    if c.count(1) == n:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 4023,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.split()))\n    wall_size = list(set(a))\n    wall_size.sort()\n    for i in wall_size:\n        for j in range(1, i):\n            j_add = j + 1\n            if j_add <= n:\n                if sum(a[:i]) == sum(a[:i] + [j]):\n                    return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 4023,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n    n = int(stdin)\n    heights = [int(input()) for _ in range(n)]\n    current_height = 0\n    \n    \n    for height in heights:\n        current_height = height - 2\n        current_height = current_height if current_height >= 0 else current_height * -1\n        if current_height >= 2:\n            \n            heights[heights.index(current_height)] += 1\n    \n    \n    \n    \n    answer = \"\"\n    \n    return answer\n\"\"\"\n\nclass Solution:\n    def wallOfHeight(self, height: int) -> str:\n        \n        if height < 2:\n            return \"NO\"\n        \n        \n        \n        left = 1\n        right = 2\n        \n        while left < height and right < height:\n            \n            if left > right:\n                break\n            \n            \n            if heights[left] + heights[right] == height:\n                \n                heights[left], heights[right] = heights[right], heights[left]\n                \n                \n                left += 1\n                right += 1\n                \n            \n            if heights[left] + heights[right] < height:\n                \n                left += 1\n                right += 1\n                \n            if heights[left] + heights[right] > height:\n                \n                left += 1\n                right += 1\n            \n        \n        if heights[left] + heights[right] == height:\n            return \"YES\"\n        else:\n            return \"NO\"\n            \n            \n            \n"
    },
    {
        "number": 4023,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int,stdin.split()))\n    a.sort()\n    wall = [a[0],a[1]]\n    vova = [0,0]\n    vova_bricks = 0\n    vova_bricks_1 = 0\n    vova_bricks_2 = 0\n    vova_bricks_3 = 0\n    vova_bricks_4 = 0\n    for i in range(1,n):\n        if wall[0] == wall[1]:\n            wall[0] = wall[1] = wall[2] = wall[3] = wall[4] = wall[5] = wall[6] = wall[7] = wall[8] = wall[9] = wall[10] = wall[11] = wall[12] = wall[13] = wall[14] = wall[15] = wall[16] = wall[17] = wall[18] = wall[19] = wall[20] = wall[21] = wall[22] = wall[23] = wall[24] = wall[25] = wall[26] = wall[27] = wall[28] = wall[29] = wall[30] = wall[31] = wall[32] = wall[33] = wall[34] = wall[35] = wall[36] = wall[37] = wall[38] = wall[39] = wall[40] = wall[41] = wall[42] = wall[43] = wall[44] = wall[45] = wall[46] = wall[47] = wall[48] = wall[49] = wall[50] = wall[51] = wall[52] = wall[53] = wall[54] = wall[55] = wall[56] = wall[57] = wall[58] = wall[59] = wall[60] = wall[61] = wall[62] = wall[63] = wall[64] = wall[65] = wall[66] = wall[67] = wall[68] = wall[69] = wall[70] = wall[71] = wall[72] = wall[73] = wall[74] = wall[75] = wall[76] = wall[77] = wall[78] = wall[79] = wall[80] = wall[81] = wall[82] = wall[83] = wall[84] = wall[85] = wall[86] = wall[87] = wall[88] = wall[89] = wall[90] = wall[91] = wall[92] = wall[93] = wall[94] = wall[95] = wall[96] = wall[97] = wall[98] = wall[99] = wall[100] = wall[101] = wall[102] = wall[103] = wall[104] = wall[105] = wall[106] = wall[107] = wall[108] = wall[109] = wall[110] = wall[111] = wall[112] = wall[113] = wall[114] = wall[115] = wall[116] = wall[117] = wall[118] = wall[119] = wall[120] = wall[121] = wall[122] = wall[123] = wall[124] = wall[125] = wall[126] = wall[127] = wall[128] = wall[129] = wall[130] = wall[131] = wall[132] = wall[133] = wall[134] = wall[135] = wall[136] = wall[137] = wall[138] = wall[139] = wall[140] = wall[141] = wall[142] = wall[143] = wall[144] = wall[145] = wall[146] = wall[147] = wall[148] = wall[149] = wall[150] = wall[151] = wall[152] = wall[153] = wall[154] = wall[155] = wall[156] = wall[157] = wall[158] = wall[159] = wall[160] = wall[161] = wall[162] = wall[163] = wall[164] = wall[165] = wall[166] = wall[167] = wall[168] = wall[169] = wall[170] = wall[171] = wall[172] = wall[173] = wall[174] = wall[175] = wall[176] = wall[177] = wall[178] = wall[179] = wall[180] = wall[181] = wall[182] = wall[183] = wall[184] = wall[185] = wall[186] = wall[187] = wall[188] = wall[189] = wall[190] = wall[191] = wall[192] = wall[193] = wall[194] = wall[195] = wall[196] = wall[197] = wall[198] = wall[199] = wall[200] = wall[201] = wall[202] = wall[203] = wall[204] = wall[205] = wall[206] = wall[207] = wall[208] = wall[209] = wall[210] = wall[211] = wall[212] = wall[213] = wall[214] = wall[215] = wall[216] = wall[217] = wall[218] = wall[219] = wall[220] = wall[221] = wall[222] = wall[223] = wall[224] = wall[225] = wall[226] = wall[227] = wall[228] = wall[229] = wall[230] = wall[231] = wall[232] = wall[233] = wall[234] = wall[235] = wall[236] = wall[237] = wall[238] = wall[239] = wall[240] = wall[241] = wall[242] = wall[243] = wall[244] = wall[245] = wall[246] = wall[247] = wall[248] = wall[249] = wall[250] = wall[251] = wall[252] = wall[253] = wall[254] = wall[255] = wall[256] = wall[257] = wall[258] = wall[259] = wall[260] = wall[261] = wall[262] = wall[263] = wall[264] = wall"
    },
    {
        "number": 4023,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    c_array = [0] * (n)\n    m_array = [0] * (n)\n    for line in stdin.split():\n        a, b = map(int, line.split())\n        c_array[b - 1] += 1\n        m_array[a - 1] += 1\n    i, j = 0, 0\n    while m_array[i] > 0:\n        if c_array[i] > 0:\n            c_array[i] -= 1\n            i += 1\n        else:\n            m_array[i] -= 1\n            i += 1\n            j += 1\n    for i in range(n):\n        if c_array[i] == 0:\n            if j == 0:\n                return \"YES\"\n            c_array[i] = m_array[i]\n            m_array[i] = 0\n            j += 1\n    return \"NO\"\n"
    },
    {
        "number": 4024,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.split()\n    S = set(s)\n    if len(S) <= k:\n        return -1\n    elif len(S) < k:\n        return -1\n    else:\n        return sum(len(s) for s in S)\n\n---Question---\n\nYou are given a string $s$ consisting of $n$ lowercase Latin letters.\n\nIn one move you can take any subsequence $t$ of the given string and add it to the set $S$. The set $S$ can't contain duplicates. This move costs $n - |t|$, where $|t|$ is the length of the added subsequence (i.e. the price equals to the number of the deleted characters).\n\nYour task is to find the minimum possible total cost to obtain a set of size $k$ or report that it is impossible to do so.\n\n\n-----Input-----\n\nThe first line of the input contains two integers $n$ and $k$ ($1 \\le n, k \\le 100$) \u2014 the length of the string and the size of the set, correspondingly.\n\nThe second line of the input contains a string $s$ consisting of $n$ lowercase Latin letters.\n\n\n-----Output-----\n\nPrint one integer \u2014 if it is impossible to obtain the set $S$ of size $k$, print -1. Otherwise, print the minimum possible total cost to do it.\n\n\n-----Example-----\nInput\n\nOutput\n\n---Question---\n\nThe problem is to add a subsequence to S which can be derived by any subset $t$ of string $s$ and their cost. If there are multiple ways, return the maximum one.\n\n\nInput\n\n3 2\nasd\n\nOutput\n\n1\n\nInput\n\n6 4\naaaaa\n\nOutput\n\n2\n\n\n\n-----Note-----\n\nIn the first example we can generate $S$ = { \"asdf\", \"asd\", \"asf\", \"sdf\", \"a\", \"asdf\", \"asd\", \"asf\", \"sdf\", \"a\", \"a\", \"a\", \"a\", \"asdf\", \"asdf\", \"asdf\", \"asdf\", \"asdf\", \"sdf\", \"a\", \"a\", \"asdf\", \"asdf\", \"asdf\", \"asdf\", \"sdf\", \"a\", \"a\", \"a\", \"a\", \"a\", \"asdf\", \"asdf\", \"asdf\", \"asdf\", \"sdf\", \"a\", \"a\", \"a\", \"a\", \"a\", \"asdf\", \"asdf\", \"asdf\", \"asdf\", \"asdf\", \"asdf\", \"sdf\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"asdf\", \"asdf\", \"asdf\", \"asdf\", \"asdf\", \"sdf\", \"a\", \"a\", \"a\", \"a\", \"asdf\", \"asdf\", \"asdf\", \"asdf\", \"asdf\", \"sdf\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \""
    },
    {
        "number": 4024,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = list(map(str, stdin.split()))\n    if k == 1:\n        print(len(set(s)))\n    else:\n        print(sum(map(len, set(s))))\n"
    },
    {
        "number": 4024,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n < 1 or k < 1:\n        return -1\n    if n == 1:\n        return 10\n    if k == 1:\n        return 0\n    num = [int(i) for i in stdin.split()]\n    res = 10\n    cur = set()\n    for i in range(n):\n        cur.update([i, str(num[i])])\n    cur = sorted(cur)\n    if len(cur) < k:\n        return -1\n    for i in range(n):\n        if cur[i] in cur[i + 1:]:\n            res = min(res, cur[i] + 1)\n    return res\n\nTime Complexity: O(n)\nSpace Complexity: O(n)\n\n'''\nimport heapq\n\nclass Solution:\n    def mincostToSet(self, s: str) -> int:\n        stk = []\n        for c in s:\n            if c not in 'abcdefghijklmnopqrstuvwxyz':\n                return -1\n            if len(stk) == 0 or stk[-1][0] < c:\n                stk.append((c, len(stk) + 1))\n            else:\n                stk[-1] = (c, stk[-1][1] + 1)\n        if stk[-1][1] == len(stk):\n            return stk[-1][0]\n        heapq.heapify(stk)\n        return -1\n"
    },
    {
        "number": 4024,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    st = stdin.split()\n    S = set()\n    for i in range(n):\n        S.add(st[i])\n        if len(S) > k:\n            S = S - {st[i]}\n    return str(len(S))\n\nsolution(stdin)\n\n\ndef"
    },
    {
        "number": 4024,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.splitlines()\n    \n    n,k = map(int,input[0].split())\n    s = input[1].split(\" \")\n    \n    S = []\n    for i in range(0,len(s)):\n        S.append(s[i].lower())\n    \n    if k > len(S):\n        return -1\n    \n    for i in range(0,len(S)):\n        for j in range(0,k):\n            if S[i] == S[j]:\n                S.remove(S[i])\n    \n    if len(S) < k:\n        return -1\n    \n    print(min(len(S),k))\n    \n    return min(len(S),k)\n"
    },
    {
        "number": 4024,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    \n    s = stdin.split(\" \")\n    if (len(s) < n):\n        return -1\n    \n    s = \"\".join(s)\n    S = set(s)\n    \n    if k < len(S):\n        return -1\n    \n    def remove(i, S, k, j):\n        if (j + k >= len(S)):\n            return\n        if S[i:j+k]!= S[i:j+k]:\n            j = j + k\n            return remove(i, S, k, j)\n        S.remove(S[i:j+k])\n        return i, j+k+len(S)\n        \n    i, j = 0, 0\n    while (j < len(s)):\n        if (j + k >= len(S)):\n            i, j = remove(i, S, k, j)\n        else:\n            i, j = remove(i, S, k, j)\n            j, k = remove(j, S, k, j)\n        \n    if i!= len(s):\n        return -1\n    \n    return str(len(S))"
    },
    {
        "number": 4024,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    cost, n, k = map(int, stdin.split())\n    S = set()\n    for i in range(1, n + 1):\n        S.add(stdin[i])\n    if len(S) < k:\n        return -1\n    if len(S) == k:\n        return cost\n    remainder = k\n    for i in range(n, -1, -1):\n        if len(S) == k:\n            return cost\n        remainder -= 1\n        S.add(stdin[i])\n    return -1\n'''\n\ndef"
    },
    {
        "number": 4024,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split(\" \")]\n    s = stdin.split(\" \")\n    S = set(s)\n\n    if k > len(S):\n        return -1\n\n    min_cost = 0\n    for i in range(n):\n        if i + 1 < n:\n            if i + 2 < n and len(S) < k:\n                if len(S) == 0 or len(S) > k:\n                    min_cost += i + 2\n                else:\n                    min_cost += k - len(S)\n            else:\n                min_cost += k - len(S)\n        else:\n            min_cost += len(S)\n    return min_cost\n\ndef"
    },
    {
        "number": 4024,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    str_ = stdin.strip()\n    S = set()\n    res = 0\n    for i in range(len(str_)):\n        if str_[i] not in S:\n            S.add(str_[i])\n            res += 1\n        else:\n            if S - set(str_[i:i+len(str_)])!= S:\n                return -1\n    return res\n\n-----Constraints-----\n1 <= n <= 100\n0 <= k <= 10^5\n\nTime Limit: 1 sec\nSpace Limit: 1 GB\n\n---CODE---\n\nfrom collections import Counter\n\ndef"
    },
    {
        "number": 4024,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    k -= n\n    if k == 0:\n        return -1\n    S = set()\n    for i in range(1, n):\n        if stdin[i] not in S:\n            S.add(stdin[i])\n            k -= 1\n        if k == 0:\n            return -1\n        k -= 1\n    if not S:\n        return -1\n    return min(S)\n\ndef"
    },
    {
        "number": 4025,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[-1])\n    b, c = map(int, stdin.split())\n    polycarps = []\n    for i in range(1, n + 1):\n        polycarps.append(i)\n    for i in range(b):\n        polycarps.append(polycarps[-1] - 1)\n    for i in range(c):\n        polycarps.append(polycarps[-1] + 1)\n    trips = 0\n    for day in polycarps:\n        if day!= polycarps[-1]:\n            trips += 1\n    trips = trips if trips >= 3 else trips - trips % 3\n    trips = trips if trips >= 2 else trips - trips % 2\n    trips = trips if trips >= 1 else trips - trips % 1\n    trips = trips if trips >= 0 else trips - trips % 0\n    trips = trips if trips > 0 else trips - trips % 0\n    return str(trips)\n"
    },
    {
        "number": 4025,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    days = 0\n    food = []\n    for line in stdin:\n        food.append(int(line))\n    food.sort()\n    \n    for i in range(len(food)-1):\n        if food[i] < food[i+1] and food[i+1]!= 0:\n            days += 1\n        elif food[i] < food[i+1] and food[i+1]!= 0:\n            days += 1\n            food[i+1] -= 1\n        elif food[i] < food[i+1] and food[i+1] == 0:\n            days += 1\n            food[i] -= 1\n            if days > 7:\n                days = days - 7\n                days = 0\n    return str(days)\n\n\n-----Constraints-----\n0 < food.length <= 100\nfood.length is an even number of digits in a line.\nfood[i] is a positive integer.\nfood[i] <= 10^8\n\n'''\ndef"
    },
    {
        "number": 4025,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(i) for i in stdin.split()]\n    \n    if a > b:\n        if a > b:\n            if a > c:\n                return str(a - b - c)\n            else:\n                return str(b - c)\n        else:\n            return str(a - c)\n    else:\n        if a > b:\n            if a > c:\n                return str(a - c)\n            else:\n                return str(b - c)\n        else:\n            return str(a - c)\n\nprint(solution(\"2 1 1\"))\nprint(solution(\"3 2 2\"))\nprint(solution(\"1 100 1\"))\nprint(solution(\"30 20 10\"))\nprint(solution(\"31 23 23\"))\nprint(solution(\"31 23 23\"))\nprint(solution(\"31 23 23\"))\n"
    },
    {
        "number": 4025,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a == b == c:\n        return \"4\"\n    if a == b == c:\n        return \"4\"\n    if b == c == 1:\n        return \"4\"\n    if b == c == 2:\n        return \"7\"\n    if b == c == 3:\n        return \"39\"\n    if b == c == 4:\n        return \"37\"\n    if b == c == 5:\n        return \"37\"\n    if b == c == 6:\n        return \"37\"\n    if b == c == 7:\n        return \"37\"\n    if b == c == 8:\n        return \"37\"\n    if b == c == 9:\n        return \"37\"\n    if b == c == 10:\n        return \"37\"\n    if b == c == 11:\n        return \"37\"\n    if b == c == 12:\n        return \"37\"\n    if b == c == 13:\n        return \"37\"\n    if b == c == 14:\n        return \"37\"\n    if b == c == 15:\n        return \"37\"\n    if b == c == 16:\n        return \"37\"\n    if b == c == 17:\n        return \"37\"\n    if b == c == 18:\n        return \"37\"\n    if b == c == 19:\n        return \"37\"\n    if b == c == 20:\n        return \"37\"\n    if b == c == 21:\n        return \"37\"\n    if b == c == 22:\n        return \"37\"\n    if b == c == 23:\n        return \"37\"\n    if b == c == 24:\n        return \"37\"\n    if b == c == 25:\n        return \"37\"\n    if b == c == 26:\n        return \"37\"\n    if b == c == 27:\n        return \"37\"\n    if b == c == 28:\n        return \"37\"\n    if b == c == 29:\n        return \"37\"\n    if b == c == 30:\n        return \"37\"\n    if b == c == 31:\n        return \"37\"\n    if b == c == 32:\n        return \"37\"\n    if b == c == 33:\n        return \"37\"\n    if b == c == 34:\n        return \"37\"\n    if b == c == 35:\n        return \"37\"\n    if b == c == 36:\n        return \"37\"\n    if b == c == 37:\n        return \"37\"\n    if b == c == 38:\n        return \"37\"\n    if b == c == 39:\n        return \"37\"\n    if b == c == 40:\n        return \"37\"\n    if b == c == 41:\n        return \"37\"\n    if b == c == 42:\n        return \"37\"\n    if b == c == 43:\n        return \"37\"\n    if b == c == 44:\n        return \"37\"\n    if b == c == 45:\n        return \"37\"\n    if b == c == 46:\n        return \"37\"\n    if b == c == 47:\n        return \"37\"\n    if b == c == 48:\n        return \"37\"\n    if b == c == 49:\n        return \"37\"\n    if b == c == 50:\n        return \"37\"\n    if b == c == 51:\n        return \"37\"\n    if b == c == 52:\n        return \"37\"\n    if b == c == 53:\n        return \"37\"\n    if b == c == 54:\n        return \"37\"\n    if b == c == 55:\n        return \"37\"\n    if b == c == 56:\n        return \"37\"\n    if b == c == 57:\n        return \"37\"\n    if b == c == 58:\n        return \"37\"\n    if b == c == 59:\n        return \"37\"\n    if b == c == 60:\n        return \"37\"\n    if b == c == 61:\n        return \"37\"\n    if b == c == 62:\n        return \"37\"\n    if b == c == 63:\n        return \"37\"\n    if b == c == 64:\n        return \"37\"\n    if b == c == 65:\n        return \"37\"\n    if b == c == 66:\n        return \"37\"\n    if b == c == 67:\n        return \"37\"\n    if b == c == 68:\n        return \"37\"\n    if b == c == 69:\n        return \"37\"\n    if b == c == 70:\n        return \"37\"\n    if b == c == 71:\n        return \"37\"\n    if b == c == 72:\n        return \"37\"\n    if b == c == 73:\n        return \"37\"\n    if b == c == 74:\n        return \"37\"\n    if b == c == 75:\n        return \"37\"\n    if b == c == 76:\n        return \"37\"\n    if b == c == 77:\n        return \"37\"\n    if b == c == 78:\n        return \"37\"\n    if b == c == 79:\n        return \"37\"\n    if b == c == 80:\n        return \"37\"\n    if b == c == 81:\n        return \"37\"\n    if b == c == 82:\n        return \"37\"\n    if b == c == 83:\n        return \"37\"\n    if b == c == 84:\n        return \"37\"\n    if b == c == 85:\n        return \"37\"\n    if b == c == 86:\n        return \"37\"\n    if b == c == 87:\n        return \"37\"\n    if b == c == 88:\n        return \"37\"\n    if b == c == 89:\n        return \"37\"\n    if b == c == 90:\n        return \"37\"\n    if b == c == 91:\n        return \"37\"\n    if b == c == 92:\n        return \"37\"\n    if b == c == 93:\n        return \"37\"\n    if b == c == 94:\n        return \"37\"\n    if b == c == 95:\n        return \"37\"\n    if b == c == 96:\n        return \"37\"\n    if b == c == 97:\n        return \"37\"\n    if b == c == 98:"
    },
    {
        "number": 4025,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a == b == c == 1:\n        return \"0\"\n    if a == b == c == 2:\n        return \"0\"\n    if a == b == c == 3:\n        return \"0\"\n    if a == b == c == 4:\n        return \"0\"\n    if a == b == c == 5:\n        return \"0\"\n    if a == b == c == 6:\n        return \"0\"\n    if a == b == c == 7:\n        return \"0\"\n    if a == b == c == 8:\n        return \"0\"\n    if a == b == c == 9:\n        return \"0\"\n    if a == b == c == 10:\n        return \"0\"\n    if a == b == c == 11:\n        return \"0\"\n    if a == b == c == 12:\n        return \"0\"\n    if a == b == c == 13:\n        return \"0\"\n    if a == b == c == 14:\n        return \"0\"\n    if a == b == c == 15:\n        return \"0\"\n    if a == b == c == 16:\n        return \"0\"\n    if a == b == c == 17:\n        return \"0\"\n    if a == b == c == 18:\n        return \"0\"\n    if a == b == c == 19:\n        return \"0\"\n    if a == b == c == 20:\n        return \"0\"\n    if a == b == c == 21:\n        return \"0\"\n    if a == b == c == 22:\n        return \"0\"\n    if a == b == c == 23:\n        return \"0\"\n    if a == b == c == 24:\n        return \"0\"\n    if a == b == c == 25:\n        return \"0\"\n    if a == b == c == 26:\n        return \"0\"\n    if a == b == c == 27:\n        return \"0\"\n    if a == b == c == 28:\n        return \"0\"\n    if a == b == c == 29:\n        return \"0\"\n    if a == b == c == 30:\n        return \"0\"\n    if a == b == c == 31:\n        return \"0\"\n    if a == b == c == 32:\n        return \"0\"\n    if a == b == c == 33:\n        return \"0\"\n    if a == b == c == 34:\n        return \"0\"\n    if a == b == c == 35:\n        return \"0\"\n    if a == b == c == 36:\n        return \"0\"\n    if a == b == c == 37:\n        return \"0\"\n    if a == b == c == 38:\n        return \"0\"\n    if a == b == c == 39:\n        return \"0\"\n    if a == b == c == 40:\n        return \"0\"\n    if a == b == c == 41:\n        return \"0\"\n    if a == b == c == 42:\n        return \"0\"\n    if a == b == c == 43:\n        return \"0\"\n    if a == b == c == 44:\n        return \"0\"\n    if a == b == c == 45:\n        return \"0\"\n    if a == b == c == 46:\n        return \"0\"\n    if a == b == c == 47:\n        return \"0\"\n    if a == b == c == 48:\n        return \"0\"\n    if a == b == c == 49:\n        return \"0\"\n    if a == b == c == 50:\n        return \"0\"\n    if a == b == c == 51:\n        return \"0\"\n    if a == b == c == 52:\n        return \"0\"\n    if a == b == c == 53:\n        return \"0\"\n    if a == b == c == 54:\n        return \"0\"\n    if a == b == c == 55:\n        return \"0\"\n    if a == b == c == 56:\n        return \"0\"\n    if a == b == c == 57:\n        return \"0\"\n    if a == b == c == 58:\n        return \"0\"\n    if a == b == c == 59:\n        return \"0\"\n    if a == b == c == 60:\n        return \"0\"\n    if a == b == c == 61:\n        return \"0\"\n    if a == b == c == 62:\n        return \"0\"\n    if a == b == c == 63:\n        return \"0\"\n    if a == b == c == 64:\n        return \"0\"\n    if a == b == c == 65:\n        return \"0\"\n    if a == b == c == 66:\n        return \"0\"\n    if a == b == c == 67:\n        return \"0\"\n    if a == b == c == 68:\n        return \"0\"\n    if a == b == c == 69:\n        return \"0\"\n    if a == b == c == 70:\n        return \"0\"\n    if a == b == c == 71:\n        return \"0\"\n    if a == b == c == 72:\n        return \"0\"\n    if a == b == c == 73:\n        return \"0\"\n    if a == b == c == 74:\n        return \"0\"\n    if a == b == c == 75:\n        return \"0\"\n    if a == b == c == 76:\n        return \"0\"\n    if a == b == c == 77:\n        return \"0\"\n    if a == b == c == 78:\n        return \"0\"\n    if a == b == c == 79:\n        return \"0\"\n    if a == b == c == 80:\n        return \"0\"\n    if a == b == c == 81:\n        return \"0\"\n    if a == b == c == 82:\n        return \"0\"\n    if a == b == c == 83:\n        return \"0\"\n    if a == b == c == 84:\n        return \"0\"\n    if a == b == c == 85:\n        return \"0\"\n    if a == b == c == 86:\n        return \"0\"\n    if a == b == c == 87:\n        return \"0\"\n    if a == b == c == 88:\n        return \""
    },
    {
        "number": 4025,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    answer = 0\n    for _ in range(0,len(stdin)):\n        stdin = stdin.replace('\\n','')\n        a, b, c = map(int,stdin.split(' '))\n        answer = max(answer,(a*1000)+(b*500)+(c*100))\n    return str(answer)"
    },
    {
        "number": 4025,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.split()\n    a, b, c = map(int, line[:len(line)-2])\n    if a == 1:\n        if b == 1:\n            if c == 1:\n                return \"24\"\n            else:\n                return \"31\"\n        else:\n            return \"12\"\n    else:\n        if b == 1:\n            if c == 1:\n                return \"24\"\n            else:\n                return \"31\"\n        else:\n            return \"12\"\n\"\"\"\n\nclass Solution:\n    def __init__(self):\n        self.max = 0\n        \n    def trips(self, start, end, day, days):\n        if day >= start:\n            self.max += days[day]\n        \n        if start >= end:\n            if day - start >= self.max:\n                self.max = day - start\n            \n        \n    def solve(self, data):\n        day = 0\n        for line in data:\n            days = line.split()\n            for i in range(0,len(days)):\n                if i == 0:\n                    day = int(days[i])\n                    continue\n                if days[i] == \"1\":\n                    self.trips(day, day + int(days[i+1]), day, days)\n                    day += int(days[i+1])\n                    day = 0\n                else:\n                    self.trips(day, day + int(days[i]), day + int(days[i+1]), days)\n                    day += int(days[i+1])\n                \n            \n        return self.max\n"
    },
    {
        "number": 4025,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, day = map(int, stdin.split(' '))\n    days = []\n    for i in range(1, n):\n        if days[i-1] == day:\n            days.pop()\n            days.pop()\n            days.append(i)\n        elif days[i-1] == 0:\n            days.pop()\n            days.append(i)\n            days.pop()\n            days.append(day)\n    answer = max(days)\n    return answer\n\ndef"
    },
    {
        "number": 4025,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    days = []\n    for i in range(a, a + b):\n        days.append(i)\n    for j in range(c, c + b):\n        days.append(j)\n    days.sort()\n    return '{}'.format(len(days))\n\n\n-----Constraints-----\n\n1 <= a, b, c <= 10^8\na, b, c are integers\n\nSol\n\n-----Time Limit: 1sec (3.28 seconds)\n\n-----Space Limit: 1KB (7.1MB)\n\"\"\"\ndef"
    },
    {
        "number": 4025,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a,b,c = [int(x) for x in stdin.split()]\n    day = (b+c)/3\n    if day > 7:\n        day = (day + 7)//10\n    if day > 24:\n        day = (day - 24)//7\n    if day == 0:\n        day = 7\n    day = (day + 1)%7\n    if day == 0:\n        day = 7\n    if day == 2:\n        day = (day + 7)%7\n    day = (day + 1)%7\n    if day == 2:\n        day = (day + 7)%7\n    if day == 1:\n        day = 7\n    day = (day + 1)%7\n    if day == 2:\n        day = (day + 7)%7\n    if day == 1:\n        day = 7\n    return str(day)\n\n--------Advanced-----\n\nYou can use the solution to all the examples (in this example Polycarp and Polycarps) from the Problem Set 1 from this video.\n\nFor the Time Complexity of the solutions, the best day for start of the trip is Sunday.\n\nFor the efficiency of the interview, the number of days can be pre-calculated with the variables day_count and day_count_max.\n\nIf the stock is not enough, Polycarp must wait for the stock to become available.\n\nTo do this, you can use the time complexity to solve the problem with O(1) extra space.\n\nFor example, if Polycarp has a dog and he has a stock of $4, he must wait for the dog to become available. To solve this problem, a time complexity of O(1) is also sufficient.\n\nWe can do this with the time complexity of the problem to solve in O(1) extra space.\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4026,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    m = int(stdin.strip())\n    tile_types = []\n    for i in range(n):\n        t = [int(x) for x in stdin.split()]\n        tile_types.append(t[:])\n    \n    t = tile_types[::-1]\n    t.append(tile_types[-1][::-1])\n    \n    s = []\n    for t in t:\n        s.append([0]*(m-len(t)))\n        for i in range(len(t)):\n            s[i][i] = t[i]\n    \n    for i in range(len(s)):\n        for j in range(len(s[i])):\n            if i == len(s)-1 and j == len(s[i])-1:\n                continue\n            elif i == len(s)-1 and j == 0:\n                s[i][j] = s[i+1][j]\n            elif i == 0 and j == len(s[i])-1:\n                s[i][j] = s[i+1][j]\n            elif i == 0:\n                s[i][j] = s[i][j+1]\n            else:\n                s[i][j] = min(s[i][j-1],s[i][j+1])\n    \n    for i in range(len(s)):\n        s[i].reverse()\n    \n    s = ''.join(map(str,s))\n    return s if s.count('1') <= 1 else \"NO\""
    },
    {
        "number": 4026,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    types = [tuple(map(int, x.split())) for x in stdin.split('\\n')[1:-1]]\n    for i in range(len(types)):\n        types[i] = (types[i][0], types[i][1], types[i][2])\n    \n    m = len(types)\n    for i in range(m):\n        types[i] = (types[i][0] - 1, types[i][1], types[i][2] - 1)\n    \n    for i in range(m):\n        for j in range(m):\n            if types[i][1] > types[j][1] and types[i][0] > types[j][0]:\n                types[i] = (types[i][0], types[i][1], types[j][0])\n    \n    ans = ''\n    for i in range(len(types)):\n        ans += str(i + 1) +'' + str(types[i][0]) +'' + str(types[i][1]) +'' + str(types[i][2]) + '\\n'\n    \n    return ans\n    \n"
    },
    {
        "number": 4026,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [[0]*n for _ in range(n)]\n    b = [[0]*m for _ in range(m)]\n    for i in range(n):\n        for j in range(n):\n            if i < n//2:\n                a[i][j] = int(stdin[i*2+1])\n                a[n-i-1][j] = int(stdin[i*2])\n            else:\n                a[i][j] = int(stdin[i*2])\n                a[n-i-1][j] = int(stdin[i*2+1])\n            b[j][i] = int(stdin[i*2+2])\n    \n    for j in range(m):\n        for i in range(n):\n            if i < n//2:\n                b[i][j] = int(stdin[i*2+2])\n                b[n-i-1][j] = int(stdin[i*2+1])\n            else:\n                b[i][j] = int(stdin[i*2])\n                b[n-i-1][j] = int(stdin[i*2+1])\n    \n    def get_tiles(a, b):\n        count = 0\n        for i in range(n):\n            for j in range(n):\n                if a[i][j] == b[i][j]:\n                    count += 1\n        return count\n    \n    def get_comb(a, b):\n        return list(set(a)&set(b))\n    \n    def get_matrix(a, b, c):\n        count = 0\n        for i in range(n):\n            for j in range(n):\n                if a[i][j] == b[i][j] or b[i][j] == c:\n                    count += 1\n        return count\n\n    def get_count(a, b):\n        return a[0][0] + a[1][1] + a[2][2] + b[0][0] + b[1][1] + b[2][2]\n    \n    def get_min(a, b):\n        return a[0][0] + a[1][1] + a[2][2] + b[0][0] + b[1][1] + b[2][2]\n    \n    def get_max(a, b):\n        return a[0][0] + a[1][1] + a[2][2] + b[0][0] + b[1][1] + b[2][2]\n\n    def get_sum(a, b):\n        count = 0\n        for i in range(n):\n            for j in range(n):\n                count += a[i][j] * b[i][j]\n        return count\n    \n    def get_max(a, b):\n        return max(get_matrix(a, b, 0), get_matrix(a, b, 1))\n    \n    def get_min(a, b):\n        return min(get_matrix(a, b, 0), get_matrix(a, b, 1))\n    \n    def get_sum(a, b):\n        count = 0\n        for i in range(n):\n            for j in range(n):\n                count += a[i][j] * b[i][j]\n        return count\n\n    def get_max_sum(a, b):\n        return get_min(a, b) + get_max(a, b)\n\n    def get_count_sum(a, b):\n        return get_sum(a, b) + get_count(a, b)\n\n    result = 0\n    for i in range(n):\n        for j in range(n):\n            result += a[i][j] * b[i][j]\n    \n    return str(result)\n\n\n    \n"
    },
    {
        "number": 4026,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    tiles = []\n    for _ in range(N):\n        tiles.append(list(map(int, input().split())))\n    Masha = Matrix(tiles)\n    return Masha.symmetricWithParity()\n\n'''\n\nclass Matrix:\n\n    def __init__(self, tl: list):\n        self.tl = tl\n        self.n, self.m = len(tl), len(tl[0])\n        self.M = []\n\n        if self.n < self.m:\n            for i in range(self.n):\n                self.M.append([])\n                for j in range(self.m):\n                    self.M[i].append(tl[i][j])\n        else:\n            for i in range(self.n):\n                self.M.append([])\n                for j in range(self.m):\n                    self.M[i].append(tl[i][j])\n\n    def __getitem__(self, idx: int) -> int:\n        return self.tl[idx[0]][idx[1]]\n\n    def __setitem__(self, idx: tuple, value: int) -> None:\n        self.tl[idx[0]][idx[1]] = value\n\n    def symmetricWithParity(self) -> str:\n        c = self.n\n        for i in range(self.n):\n            for j in range(self.n):\n                if self.tl[i][j] == 0:\n                    self.tl[i][j] = 1\n                else:\n                    self.tl[i][j] = 0\n        for i in range(self.n):\n            for j in range(self.n):\n                if self.tl[j][i] == 0:\n                    self.tl[j][i] = 1\n                else:\n                    self.tl[j][i] = 0\n        for i in range(self.n):\n            for j in range(self.n):\n                if self.tl[i][j] == 1:\n                    self.tl[i][j] = self.tl[j][i]\n                elif self.tl[i][j] == 0:\n                    self.tl[i][j] = 1\n        n = self.n\n        for i in range(self.n):\n            self.tl[i] = list(map(str, self.tl[i]))\n            self.tl[i] = ''.join(self.tl[i])\n        for i in range(self.n):\n            self.tl[i] = list(map(str, self.tl[i]))\n            self.tl[i] = ''.join(self.tl[i])\n        for i in range(self.n):\n            for j in range(self.m):\n                self.M[i][j] = self.tl[i][j]\n        return ''.join(self.tl)\n"
    },
    {
        "number": 4026,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = []\n    for line in stdin.splitlines():\n        s.append(list(map(int, line.split())))\n    t = len(s)\n    for i in range(1, t):\n        for j in range(i):\n            if s[i][j]!= s[j][i]:\n                return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 4026,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    row, col = [], []\n    for _ in range(n):\n        row.append(list(map(int, stdin.split())))\n    for _ in range(n):\n        col.append([])\n    for i in range(n):\n        for j in range(m):\n            if i == 0 and j == 0:\n                col[i].append(0)\n            elif i == 0 and j == m - 1:\n                col[i].append(1)\n            elif i == m - 1 and j == 0:\n                col[i].append(1)\n            else:\n                col[i].append(0)\n    for i in range(n):\n        for j in range(m):\n            if row[i][j] == 0:\n                if col[i][j] == 0:\n                    if i == 0 or j == 0:\n                        col[i][j] = 1\n                    else:\n                        col[i][j] = 0\n                else:\n                    col[i][j] = 0\n            elif row[i][j] == 1:\n                if col[i][j] == 0:\n                    col[i][j] = 1\n                else:\n                    col[i][j] = 0\n            elif row[i][j] == 1:\n                col[i][j] = 0\n    for i in range(n):\n        for j in range(m):\n            if col[i][j] == 0:\n                col[i][j] = 1\n            else:\n                col[i][j] = 0\n    for i in range(n):\n        for j in range(m):\n            if row[i][j] == 0:\n                if col[i][j] == 0:\n                    col[i][j] = 1\n                else:\n                    col[i][j] = 0\n            elif row[i][j] == 1:\n                col[i][j] = 0\n            elif row[i][j] == 1:\n                col[i][j] = 0\n    return \"YES\" if col[n - 1][m - 1] == 1 else \"NO\"\n"
    },
    {
        "number": 4026,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    m, n = map(int, stdin.split())\n    t = map(int, stdin.split())\n    for i in range(len(t)):\n        t[i] = [t[i], t[i], t[i]]\n    s = [[t[i][j] for i in range(n)] for j in range(n)]\n    d = [[0 for i in range(m)] for j in range(m)]\n    for i in range(n):\n        for j in range(n):\n            if s[i][j] == 1:\n                d[i][j] = d[j][i] = 1\n            elif s[i][j] == 2:\n                d[i][j] = s[i][j] = 2\n            else:\n                d[i][j] = s[i][j] = 0\n    for i in range(n):\n        for j in range(m):\n            if d[i][j]!= d[j][i]:\n                return \"NO\"\n    return \"YES\"\n\n\ndef"
    },
    {
        "number": 4026,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    data = [tuple(map(int, stdin.split())) for _ in range(6)]\n    symmetric = [[0 for i in range(stdin.count('{'))] for j in range(stdin.count('}'))]\n    for i in range(6):\n        for j in range(i+1):\n            symmetric[i][j] = symmetric[i][j] + symmetric[i][j+1]\n        symmetric[i][0] = symmetric[i][0] + symmetric[i][1]\n        symmetric[i][i] = symmetric[i][i+1]\n        symmetric[i][i+1] = symmetric[i+1][i]\n        symmetric[i][i+1] = symmetric[i+1][i+1]\n        symmetric[i][i+1] = symmetric[i+1][i+1]\n    for i in range(6):\n        for j in range(stdin.count('}')):\n            symmetric[i][j+stdin.count('{')] = symmetric[i][j+stdin.count('}')] + symmetric[i][j+stdin.count('}')+1]\n    \n    answer = \"\"\n    for i in range(6):\n        answer += str(symmetric[i][stdin.count('}')])\n        answer +='' + str(symmetric[i][stdin.count('{')])\n        answer +='' + str(symmetric[i][stdin.count('}')+1])\n        if i < 2:\n            answer +=''\n    if answer == \"\":\n        answer = \"YES\"\n    else:\n        answer = \"NO\"\n    return answer\n\n\n-----Running Time-----\nRuntime: 36 ms (28.09%)\nMemory Usage: 14.2 MB (54.32%)\n\nInput:\n6\n3 4\n1 2\n5 6\n5 7\n7 4\n8 9\n9 8\n2 5\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n\nOutput:\nYES\nNO\nYES\nNO\nYES\nYES\n"
    },
    {
        "number": 4026,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    rows = int(stdin[1])\n    cols = int(stdin[2])\n    tiles = stdin[3:]\n    for row in range(1, rows + 1):\n        for col in range(1, cols + 1):\n            if row + col == rows + cols:\n                tiles[row - 1][col - 1] = cols - col\n            elif row + col == rows + cols - 1:\n                tiles[row - 1][col - 1] = cols - row\n            else:\n                tiles[row - 1][col - 1] = cols - col\n    for row in range(1, rows + 1):\n        for col in range(1, cols + 1):\n            if col + row == cols + rows:\n                tiles[row - 1][col - 1] = rows - row\n            elif col + row == cols + rows - 1:\n                tiles[row - 1][col - 1] = rows - row\n            else:\n                tiles[row - 1][col - 1] = rows - col\n    for row in range(rows - 2, -1, -1):\n        for col in range(cols - 2, -1, -1):\n            if tiles[row][col] == cols - row - 1:\n                tiles[row][col] = rows - row - 1\n            elif tiles[row][col] == rows - row - 1:\n                tiles[row][col] = rows - row - 1\n            elif tiles[row][col] == cols - row - 1:\n                tiles[row][col] = rows - row - 1\n            else:\n                tiles[row][col] = rows - col - 1\n    for row in range(rows - 2, -1, -1):\n        for col in range(cols - 2, -1, -1):\n            if tiles[row][col] == cols - row - 1:\n                tiles[row][col] = rows - row - 1\n            elif tiles[row][col] == rows - row - 1:\n                tiles[row][col] = rows - row - 1\n            elif tiles[row][col] == cols - row - 1:\n                tiles[row][col] = rows - row - 1\n            else:\n                tiles[row][col] = rows - col - 1\n    return \"YES\" if all(tiles[row][col] == tiles[row + 1][col + 1] for row in range(1, rows + 1) for col in range(1, cols + 1)) else \"NO\"\n"
    },
    {
        "number": 4026,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    lst = [list(map(int, stdin.split())) for i in range(n)]\n    s = [[0] * m for i in range(n)]\n    # print(lst)\n    for i in range(n):\n        for j in range(m):\n            s[i][j] = lst[i][j]\n    # print(s)\n    ans = \"YES\"\n    for i in range(n):\n        # print(s[i])\n        for j in range(m):\n            if s[i][j] > 0:\n                for k in range(m):\n                    s[i][k] = s[i][k] - 1\n                for k in range(i, n):\n                    s[k][j] = s[k][j] - 1\n            else:\n                ans = \"NO\"\n                break\n    # print(s)\n    # print(ans)\n    return ans"
    },
    {
        "number": 4027,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return '' if n == 0 else solution(n - 1) +'' + solution(n - 2)\n\ndef"
    },
    {
        "number": 4027,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4027,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 2:\n        return \"0\"\n    \n    # Convert the list to a dictionary and use python's sets\n    A = set(map(int, input().split()))\n    B = set(map(int, input().split()))\n\n    # Convert the A and B sets into a set\n    # This allows you to do a linear union operation\n    # with two sets\n    S = A | B\n\n    # Calculate the absolute value of the difference\n    # between the elements of the A and B sets\n    # and store the result in the variable $|sum(A) - sum(B)|$\n    # If there is no intersection between A and B\n    # it returns 0\n    res = 0\n    for elem in S:\n        res = max(abs(elem - sum(A)), abs(elem - sum(B)))\n    \n    # If there is a intersection\n    # it returns the absolute value of $|sum(A) - sum(B)|$\n    # otherwise return 0\n    return str(res)\n"
    },
    {
        "number": 4027,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    A = set(map(int, stdin.strip().split()))\n    B = set(map(int, stdin.strip().split()))\n    for i in range(n):\n        x = input()\n        A_i = A - set(map(int, x.strip().split()))\n        B_i = B - set(map(int, x.strip().split()))\n        A_i_abs = abs(sum(A_i))\n        B_i_abs = abs(sum(B_i))\n        if A_i_abs == B_i_abs:\n            print(0)\n        else:\n            print(1)\n    return \"\""
    },
    {
        "number": 4027,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4027,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = set()\n    b = set()\n    for i in range(2, n + 1):\n        a.add(int(str(i)[1:]))\n        b.add(int(str(i)[:-1]))\n    return str(sum(a) - sum(b))\n\n-----Constraints-----\n1 <= n <= 10^5\n\nThe given input is guaranteed to be valid.\n\"\"\"\n\nimport collections\n\ndef"
    },
    {
        "number": 4027,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    n = len(a)\n    if n % 2 == 1:\n        return '1' if b < a else '0'\n    else:\n        return solution(stdin, b)\n\n\n\n\n\nIn the input the first line is the number of tests. The next lines contains the test cases. The i-th test case contains the space separated values of the elements of the sequence, separated by a white space.\n\nFor example, the input is\n1\n1\n1 2\n2 3\n1 2 3\n2 3 4\n3 4 5\n3 4 6\n\nThe output is\n1\n1\n2\n2\n1\n1\n\nNote that the sequence elements of a and b are distinct.\n\nConstraints:\n\n1 <= n <= 10^5\n1 <= ai < bi < n\na and b are non-negative integers.\n\"\"\""
    },
    {
        "number": 4027,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 == 0:\n        s = set(map(int,stdin.split()))\n        for i in range(1,n//2+1):\n            j = n-i\n            if s.issubset(set(range(i,j))):\n                return str(min(s))\n    else:\n        s = set(map(int,stdin.split()))\n        for i in range(1,n//2+1):\n            j = n-i\n            if s.issubset(set(range(i,j))):\n                return str(max(s))\n    return str(0)"
    },
    {
        "number": 4027,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    nums = list(map(int, stdin.split()))\n\n    nums.sort()\n    ans = 0\n\n    for i in range(n):\n        ans += abs(nums[i] - nums[n-i-1])\n\n    return str(ans)\n\nInput\n6\n\nOutput\n1\n\"\"\"\n\nn = int(input())\ns = list(map(int, input().split()))\na = set(s)\nb = set(s)\nm = 0\nfor i in a:\n    if i in b:\n        m += 1\nprint(m)\n"
    },
    {
        "number": 4027,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    answer = 0\n    n = int(stdin)\n    for _ in range(n):\n        tmp = [int(i) for i in stdin]\n        A = set(tmp)\n        B = set(tmp)\n        answer = max(A.intersection(B), answer)\n    return str(answer)\n\nprint(solution(\"4 1 5 4\"))\nprint(solution(\"2 2 4\"))\nprint(solution(\"5 5 5 5\"))\nprint(solution(\"2 3 4 4 3 2 4\"))\nprint(solution(\"7 4 3 3 4 5\"))\n"
    },
    {
        "number": 4028,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    bracket_sequences = s.split(\"()\")\n    result = 0\n    for bracket_sequence in bracket_sequences:\n        if bracket_sequence[0] == bracket_sequence[-1]:\n            result += 1\n    return str(result)\n\nprint(solution(\"()))((()\")"
    },
    {
        "number": 4028,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    for n in range(int(stdin.strip())):\n        s = stdin.strip()\n        brackets = []\n        for c in s:\n            if c in ['(', ')']:\n                brackets.append(c)\n        print(len(brackets))\n        \nprint(solution(\"()()()\"))\nprint(solution(\"((()))\"))\nprint(solution(\"))()))((()\"))\nprint(solution(\"))()(()\"))\nprint(solution(\"))()()()()(()()()()()()()()()()\"))\n'''\n\n'''\n\nclass Solution:\n    def countBrackets(self, s):\n        cnt = 0\n        brackets = []\n        for i in s:\n            if i in ['(', ')']:\n                brackets.append(i)\n            elif i == '(' and brackets[-1] == '(':\n                brackets.pop()\n                cnt += 1\n            else:\n                brackets.append(i)\n        return len(brackets)\n        \n"
    },
    {
        "number": 4028,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(str, stdin.split())\n    n = int(n)\n    s = list(s)\n    result = 0\n    \n    for i in range(n):\n        start = s[i]\n        end = s[i+1]\n        \n        if start == '(' or end == ')':\n            result += 1\n        \n        if start == '(' and end == ')':\n            for j in range(i+1, n):\n                if s[j] == '(':\n                    start = s[j]\n                    end = s[j+1]\n                    break\n                elif s[j] == ')':\n                    end = s[j]\n                    break\n            \n            result += len(s[i:]) - 1 - start\n        \n    return str(result)"
    },
    {
        "number": 4028,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s, c = list(stdin), 0\n    for i in range(len(s)):\n        if s[i] == '(':\n            c += 1\n        elif s[i] == ')':\n            c -= 1\n        if c == 0:\n            return str(c + len(s) - i)\n    return str(c + len(s) - i)"
    },
    {
        "number": 4028,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2!= 0:\n        print(1)\n        return \n    s = []\n    for _ in range(n):\n        s.append(stdin[2:])\n    print(s)\n    for i in range(len(s)):\n        s[i] = list(s[i])\n        for j in range(len(s[i])):\n            if s[i][j] in '()':\n                if s[i][j] == '(' and s[i + 1][j] == ')':\n                    print(i)\n                    return 1\n                elif s[i][j] == '(':\n                    print(i)\n                    return 1\n                else:\n                    continue\n    return 0\n\n'''\n"
    },
    {
        "number": 4028,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    \n    s = s.replace('(', '').replace(')', '').replace('{', '').replace('}', '').replace(')', '').replace(')', '')\n    result = 0\n    for s in s.split(')'):\n        count = 0\n        for x in s:\n            if x == '(' or x == ')':\n                count += 1\n            else:\n                if count == 1:\n                    result += count\n                else:\n                    break\n        if count == 0:\n            result += 1\n    return str(result)\n\ndef"
    },
    {
        "number": 4028,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n,s=map(int,stdin.split())\n    if n<=0 or s<=0:\n        return \"0\"\n    r=[s[0]]\n    for i in range(n):\n        if s[i]==\"(\":\n            r.append(\"(\")\n        else:\n            r.append(\")\")\n    return \"\".join(r)\n        \n"
    },
    {
        "number": 4028,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    length = len(stdin)\n    if (length % 2 == 1):\n        return 0\n    s = list(stdin)\n    j = 1\n    k = 0\n    flag = 1\n    while (flag!= 0):\n        if (k < length / 2):\n            if (s[k] == '('):\n                flag = 1\n                k += 1\n                continue\n        else:\n            flag = 0\n            if (s[j] == ')'):\n                flag = 0\n                j += 1\n                continue\n            else:\n                flag = 2\n                k += 1\n                continue\n    return k"
    },
    {
        "number": 4028,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split(\" \"))\n    s = s.replace(\"(\", \"\")\n    s = s.replace(\")\", \"\")\n    s = s.replace(\"(()\", \"(\")\n    s = s.replace(\")()\", \"()\")\n    s = s.replace(\"()()\", \"()\")\n    s = s.replace(\"()()()\", \"()()\")\n    \n    cnt = 1\n    for i in range(len(s)):\n        if s[i] == \"(\":\n            cnt += 1\n        elif s[i] == \")\":\n            cnt -= 1\n        \n        if cnt == 0:\n            return len(s) - 2 * i\n    return 0\n\n'''\ndef"
    },
    {
        "number": 4028,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    sequence = stdin.split('(')\n    for i in range(0, len(sequence) - 1, 2):\n        length = int(sequence[i + 1][1]) - int(sequence[i][1])\n        if (length % 10)!= 0:\n            return 0\n    \n    return (n % (length % 10))\n\n-----Constraints-----\n\n1 <= n <= 3 * 10^5\n0 <= s[i] <= \u20189\u2019\n\nExample 1:\nInput\n\n3\n()))()\nOutput\n\n1\n\nExample 2:\nInput\n\n2\n(((\nOutput\n0\n\nExample 3:\nInput\n\n2\n(((\nOutput\n0\n\n\n-----Solution-----"
    },
    {
        "number": 4029,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    result = 0\n    digits = []\n    for i in range(1,n):\n        digits.append(str(i))\n    for i in range(1,n):\n        digits[i] = digits[i].replace(\"0\",\"\")\n        digits[i] = digits[i].replace(\"1\",\"\")\n        digits[i] = digits[i].replace(\"2\",\"\")\n    digits = digits[1:]\n    temp = digits[0]\n    for i in range(1,n):\n        digits[i] = digits[i] + temp\n        temp = temp + digits[i]\n        result = result + 1\n    return str(result)\n"
    },
    {
        "number": 4029,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n <= 25:\n        return -1\n    a = n % 25\n    b = n // 25\n    if a == 0:\n        return 1\n    c = (b-1) * 25\n    if c == 0:\n        return -1\n    d = n // c\n    if d == 0:\n        return -1\n    if a + b + c + d == n:\n        return -1\n    if d == 0:\n        return -1\n    elif d % 2 == 0:\n        return 2\n    else:\n        return 1\n\"\"\"\n\nclass Solution:\n    def leastOpsMoves(self, nums: List[int]) -> int:\n        nums_copy = nums.copy()\n        nums_copy.sort()\n        size = len(nums_copy)\n        for i in range(1, size):\n            if nums_copy[i]!= nums_copy[i - 1]:\n                if nums_copy[i] > nums_copy[i - 1]:\n                    return i\n        return size"
    },
    {
        "number": 4029,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 25!= 0:\n        return -1\n    for i in range(1, n + 1):\n        swap = n - i\n        if n % 25 == swap % 25:\n            n = n - swap\n    return n\n"
    },
    {
        "number": 4029,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 4029,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    move = 25\n    result = 0\n    for i in range(1, n + 1):\n        while i > 0:\n            i = i // 10\n            if i == move:\n                break\n        else:\n            if move % 2 == 0:\n                move //= 2\n            else:\n                move *= 2\n            result += 1\n    if result == -1:\n        return str(result)\n    else:\n        return str(result + 1)\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4029,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 25 == 0:\n        return -1\n    \n    moves = 0\n    \n    if n > 10**18:\n        n -= 10**18\n    \n    while n:\n        moves += 1\n        m = str(n % 25)\n        n //= 25\n        if not m:\n            continue\n        else:\n            n -= 25\n            moves += 1\n    \n    if moves < 2:\n        return moves\n    else:\n        return -1\n\ndef"
    },
    {
        "number": 4029,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def swap_numbers(n: str) -> str:\n        res = \"\"\n        i = 1\n        while i < len(n):\n            if i % 2 == 0:\n                res += n[i]\n            else:\n                res += n[i]\n            i += 1\n        return res\n    def swap_numbers_string(n: str) -> str:\n        return ''.join([swap_numbers(x) for x in n])\n    def check_pattern(n: str) -> bool:\n        return sum(map(int, n)) == 25\n    def is_divisible_by_25(n: str) -> bool:\n        return n[0] == '0' and sum(map(int, n[1: ])) % 25 == 0\n    def possible_moves(n: str) -> int:\n        num = 0\n        for i in range(1, len(n)):\n            num += int(n[i])*int(n[i-1])\n        num += int(n[-1])*int(n[-2])\n        if is_divisible_by_25(n):\n            return -1\n        return num\n    \n    n = stdin.strip().replace(' ', '')\n    if not check_pattern(n):\n        return \"-\"\n    \n    moves = []\n    for i in range(int(n)):\n        moves.append(possible_moves(n))\n    \n    if any(moves):\n        return str(min(moves))\n    else:\n        return \"-\"\n\n\n\n----->>>Sample Input\n\nSample Input\n\nInput\n7\n\nSample Output\n\n1\n\n------>>>Sample Input\n\nInput\n\nInput\n\nInput\n\nInput\n\nOutput\n\n10\n\n------>>>Sample Input\n\nInput\n\nInput\n\nInput\n\nInput\n\nOutput\n\n2\n\n------>>>Sample Input\n\nInput\n\nInput\n\nInput\n\nInput\n\nInput\n\nInput\n\nOutput\n\n1\n\n------>>>Sample Input\n\nInput\n\nInput\n\nInput\n\nInput\n\nInput\n\nInput\n\nOutput\n\n-1\n\n------>>>Sample Output\n\n2\n\n------>>>Sample Output\n\n2\n\n------>>>Sample Output\n\n1\n\n------>>>Sample Output\n\n1\n\n------>>>Sample Output\n\n0\n\n------>>>Sample Output\n\n0\n\n------>>>Sample Output\n\n0\n\n------>>>Sample Output\n\n0\n\n------>>>Sample Output\n\n0\n\n------>>>Sample Output\n\n0\n\n------>>>Sample Output\n\n0\n\n------>>>Sample Output\n\n0\n\n------>>>Sample Output\n\n0\n\n------>>>Sample Output\n\n0\n\n------>>>Sample Output\n\n0\n\n------>>>Sample Output\n\n0\n\n------>>>Sample Output\n\n0\n\n------>>>Sample Output\n\n0\n\n------>>>Sample Output\n\n0\n\n------>>>Sample Output\n\n0\n\n------>>>Sample Output\n\n0\n\n------>>>Sample Output\n\n0\n\n------>>>Sample Output\n\n0\n\n------>>>Sample Output\n\n0\n\n------>>>Sample Output\n\n0\n\n------>>>Sample Output\n\n0\n\n------>>>Sample Output\n\n0\n\n------>>>Sample Output\n\n0\n\n------>>>Sample Output\n\n0\n\n------>>>Sample Output\n\n0\n\n------>>>Sample Output\n\n0\n\n------>>>Sample Output\n\n0\n\n------>>>Sample Output\n\n0\n\n------>>>Sample Output\n\n0\n\n------>>>Sample Output\n\n0\n\n------>>>Sample Output\n\n0\n\n------>>>Sample Output\n\n0\n\n------>>>Sample Output\n\n0\n\n------>>>Sample Output\n\n0\n\n------>>>Sample Output\n\n0\n\n------>>>Sample Output\n\n0\n\n------>>>Sample Output\n\n0\n\n------>>>Sample Output\n\n0\n\n------>>>Sample Output\n\n0\n\n------>>>Sample Output\n\n0\n\n------>>>Sample Output\n\n0\n\n------>>>Sample Output\n\n0\n\n------>>>Sample Output\n\n0\n\n------>>>Sample Output\n\n0\n\n------>>>Sample Output\n\n0\n\n------>>>Sample Output\n\n0\n\n------>>>Sample Output\n\n0\n\n------>>>Sample Output\n\n0\n\n------>>>Sample Output\n\n0\n\n------>>>Sample Output\n\n0\n\n------>>>Sample Output\n\n0\n\n------>>>Sample Output\n\n0\n\n------>>>Sample Output\n\n0\n\n------>>>Sample Output\n\n0\n\n------>>>Sample Output\n\n0\n\n------>>>Sample Output\n\n0\n\n------>>>Sample Output\n\n0\n\n------>>>Sample Output\n\n0\n\n------>>>Sample Output\n\n0\n\n------>>>Sample Output\n\n0\n\n------>>>Sample Output\n\n0\n\n------>>>Sample Output\n\n0\n\n------>>>Sample Output\n\n0\n\n------>>>Sample Output\n\n0\n\n------>>>Sample Output\n\n0\n\n------>>>Sample Output\n\n0\n\n------>>>Sample Output\n\n0\n\n------>>>Sample Output\n\n0\n\n------>>>Sample Output\n\n0\n\n------>>>Sample Output\n\n0\n\n------>>>Sample Output\n\n0\n\n------>>>Sample Output\n\n0\n\n------>>>Sample Output\n\n0\n\n------>>>Sample Output\n\n0\n\n------>>>Sample Output\n\n0\n\n------>>>Sample Output\n\n0\n\n------>>>Sample Output\n\n0\n\n------>>>Sample Output\n\n0\n\n------>>>Sample Output\n\n0\n\n------>>>Sample Output\n\n0\n\n------>>>Sample Output\n\n0\n\n------>>>Sample Output\n\n0\n\n------>>>Sample Output\n\n0\n\n------>>>Sample Output\n\n0\n\n------>>>Sample Output\n\n0\n\n------>>>Sample Output\n\n0\n\n------>>>Sample Output\n\n0\n\n------>>>Sample Output\n\n0\n\n------>>>Sample Output\n\n0\n\n------>>>Sample Output\n\n0\n\n------>>>Sample Output\n\n0\n\n------>>>Sample Output\n\n0\n\n------>>>Sample Output\n\n0\n\n------>>>Sample Output\n\n0\n\n------>>>Sample Output\n\n0\n\n------>>>Sample Output\n\n0\n\n------>>>Sample Output\n\n0\n\n------>>>Sample Output\n\n0\n\n------>>>Sample Output\n\n0\n\n------>>>Sample Output\n\n0\n\n------>>>Sample Output\n\n0\n\n------>>>Sample Output\n\n0\n\n------>>>Sample Output\n\n0\n\n------>>>Sample Output\n\n0\n\n------>>>Sample Output\n\n0\n\n------>>>Sample Output\n\n0\n\n------>>>Sample Output\n\n0\n\n------>>>Sample Output\n\n0\n\n------>>>Sample Output\n\n0\n\n------>>>Sample Output\n\n0\n\n------>>>Sample Output\n\n0\n\n------>>>Sample Output\n\n0\n\n------>>>Sample Output\n\n0\n\n------>>>Sample Output\n\n0\n\n------>>>Sample Output\n\n0\n\n------>>>Sample Output\n\n0\n\n------>>>Sample Output\n\n0\n\n------>>>Sample Output\n\n0\n\n------>>>Sample Output\n\n0\n\n------>>>Sample Output\n\n0\n\n------>>>Sample Output\n\n0\n\n------>>>Sample Output\n\n0\n\n------>>>Sample Output\n\n0\n\n------>>>Sample Output\n\n0\n\n------>>>Sample Output\n\n0\n\n------>>>Sample Output\n\n0\n\n------>>>Sample Output\n\n0\n\n------>>>Sample Output\n\n0\n\n------>>>Sample Output\n\n0\n\n------>>>Sample Output\n\n0\n\n------>>>Sample"
    },
    {
        "number": 4029,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    def is_valid(n):\n        if len(str(n))!= len(str(n)[::-1]):\n            return False\n        for i in range(len(str(n))):\n            if n % 10 ** i == 0:\n                return False\n        return True\n    if n < 0:\n        return -1\n    if n == 0:\n        return 0\n    if is_valid(n):\n        return 1\n    q, r = divmod(n, 25)\n    if q == 0:\n        return -1\n    moves = 0\n    for i in range(r+1):\n        moves += abs(i - (r - i) % q)\n    return moves\n"
    },
    {
        "number": 4029,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 25 == 0:\n        return -1\n    elif n == 1 or n == 2:\n        return 0\n    else:\n        for i in range(1, n + 1):\n            swap_digit = 0\n            moves = 0\n            for j in range(n-1, -1, -1):\n                if not j == n - 1:\n                    swap_digit = int(str(j) + str(n - j - 1))\n                elif not j == n - 1:\n                    swap_digit = int(str(n - j - 1) + str(j + 1))\n                else:\n                    swap_digit = j + 1\n                moves += 1\n                if i == swap_digit:\n                    return moves\n        return -1\n\n---Time---\n\nO(n)\nO(1)\n\n-----Algorithm-----\n\n1. swap the smallest two digits\n2. move the digits until the new smallest one is not a zero\n3. swap the new digits\n4. return the minimum number of moves\n"
    },
    {
        "number": 4029,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n < 25:\n        return str(n)\n    \n    first = str(n)\n    last = first[1:-1]\n    \n    while n > 25:\n        moves = 0\n        while n > 0:\n            moves += 1\n            n = n // 10\n        \n        if moves % 2 == 0:\n            last = str(n) + last\n        else:\n            last = str(n) + str(n)[1:] + str(n)[0]\n        \n        n = int(last)\n    \n    return str(n)\n    \n    \n"
    },
    {
        "number": 4030,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    s = list(sorted(s))\n    # print(s)\n    cnt = 0\n    # print(s)\n    for i in range(n):\n        cnt += (n - i)\n        # print(cnt)\n        if i == 0:\n            cnt += 1\n    # print(cnt)\n    return cnt"
    },
    {
        "number": 4030,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    c = [0] * (n + 1)\n    for i in range(1, n + 1):\n        c[i] = s.count(str(i))\n    c[0] = c[1]\n    for i in range(2, n + 1):\n        c[i] = c[i - 1] + c[i - 2] - c[i - 3] + c[i - 4] - c[i - 5]\n    ans = min(c)\n    print(ans)\n    return str(ans)"
    },
    {
        "number": 4030,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    c = []\n    for i in range(n):\n        c.append(s[i])\n    c.sort()\n    c = ''.join(c)\n    return str(len(c))\n"
    },
    {
        "number": 4030,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    s = list(stdin.strip())\n    s_len = len(s)\n    c_l = [0 for _ in range(s_len)]\n    c_r = [0 for _ in range(s_len)]\n    c_c = [0 for _ in range(s_len)]\n    \n    for i in range(1, s_len):\n        c_l[i] = c_l[i-1] + 1 if s[i-1] == s[i] else 0\n        c_r[i] = c_r[i-1] + 1 if s[i-1]!= s[i] else 0\n        c_c[i] = c_c[i-1] + 1 if s[i-1]!= s[i] and s[i] == s[i-1] else 0\n    \n    for i in range(n-1, -1, -1):\n        if c_l[i] > 0:\n            c_r[i] = c_r[i-1]\n            c_c[i] = c_c[i-1]\n        else:\n            c_c[i] = c_c[i-1]\n    \n    min_colors = 0\n    for i in range(n-1, -1, -1):\n        if c_c[i] > min_colors:\n            min_colors = c_c[i]\n    \n    s_len = len(s)\n    \n    for i in range(s_len):\n        if s[i]!= s[i-1] and c_c[i] == 0:\n            s[i] = s[i-1]\n        elif s[i] == s[i-1] and c_c[i] > 0:\n            s[i] = s[i-1]\n            s[i-1] = s[i]\n            c_c[i] -= 1\n            if c_c[i] == 0:\n                min_colors = i+1\n    \n    return s[0:min_colors]"
    },
    {
        "number": 4030,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    s = [stdin[i] for i in range(n)]\n    m = len(s)\n    if m == 1:\n        return s[0]\n    l = []\n    for i in range(m):\n        for j in range(i + 1, m):\n            if s[i]!= s[j]:\n                l.append(s[i])\n                l.append(s[j])\n    l.sort()\n    c = 0\n    for i in range(len(l)):\n        c += 1\n        if l[i] == s[i]:\n            c -= 1\n    return c\n"
    },
    {
        "number": 4030,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    s = stdin.strip()\n    color = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        c = list(s[i])\n        for j in range(i+1, n):\n            c1 = list(s[j])\n            for k in range(j+1, n):\n                if c[0] == c1[0] and c[1] == c1[1] and c[2] == c1[2]:\n                    c[0] = c1[0] = c1[1] = c1[2] = c[2] = c1[2] = c1[2] = c1[2] = 0\n                    c.remove(c1)\n                    color[i][j] += 1\n                    color[j][i] += 1\n                    break\n    res = [0 for _ in range(n)]\n    for i in range(n):\n        if color[i][i] > 1:\n            for j in range(i+1, n):\n                if color[i][j] == color[j][i] and color[i][i] > 2:\n                    color[i][j] += 2\n                    color[j][i] += 2\n                    res[i] = color[i][i]\n    if len(s) == len(res):\n        return len(res)\n    elif len(s) > len(res):\n        return len(s)\n    else:\n        return len(res)"
    },
    {
        "number": 4030,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, s = list(map(str, stdin.split()))\n    res = int(n)\n    c = [None] * res\n    # n = int(n)\n    # s = str(s)\n    # res = int(n)\n    # c = [None] * n\n    # for i in range(n):\n    #     c[i] = str(s[i])\n    #     c[i] = str(s[i])\n    #\n    # c = [None] * n\n    # for i in range(n):\n    #     c[i] = s[i]\n    #     c[i] = s[i]\n    #\n    # c = [None] * n\n    # for i in range(n):\n    #     c[i] = s[i]\n    #     c[i] = s[i]\n    #\n    # c = [None] * n\n    # for i in range(n):\n    #     c[i] = s[i]\n    #     c[i] = s[i]\n    #\n    # s = [c]\n    #\n    # i = 0\n    # j = 0\n    # while j < n:\n    #     while i < n:\n    #         while j < n:\n    #             if c[i]!= s[j][i] and c[i]!= s[j][i]:\n    #                 break\n    #             j += 1\n    #         i += 1\n    #     j = 0\n    #     i = 0\n    #     while j < n:\n    #         while i < n:\n    #             if c[i]!= s[j][i] and c[i]!= s[j][i]:\n    #                 break\n    #             i += 1\n    #         i += 1\n    #         j += 1\n    #     i = 0\n    #     j = 0\n    #     c = [None] * n\n    #     for i in range(n):\n    #         c[i] = s[j][i]\n    #         c[i] = s[j][i]\n    #         j += 1\n    #     j = 0\n    #     i = 0\n    #     c = [None] * n\n    #     for i in range(n):\n    #         c[i] = s[j][i]\n    #         c[i] = s[j][i]\n    #         j += 1\n    #     j = 0\n    #     i = 0\n    #     s = [c]\n    #     c = [None] * n\n    #     for i in range(n):\n    #         c[i] = s[j][i]\n    #         c[i] = s[j][i]\n    #         j += 1\n    #     j = 0\n    #     i = 0\n    #     s = [c]\n    #     c = [None] * n\n    #     for i in range(n):\n    #         c[i] = s[j][i]\n    #         c[i] = s[j][i]\n    #         j += 1\n    #     j = 0\n    #     i = 0\n    #     s = [c]\n    #     c = [None] * n\n    #     for i in range(n):\n    #         c[i] = s[j][i]\n    #         c[i] = s[j][i]\n    #         j += 1\n    #     j = 0\n    #     i = 0\n    #     s = [c]\n    #     c = [None] * n\n    #     for i in range(n):\n    #         c[i] = s[j][i]\n    #         c[i] = s[j][i]\n    #         j += 1\n    #     j = 0\n    #     i = 0\n    #     s = [c]\n    #     c = [None] * n\n    #     for i in range(n):\n    #         c[i] = s[j][i]\n    #         c[i] = s[j][i]\n    #         j += 1\n    #     j = 0\n    #     i = 0\n    #     s = [c]\n    #     c = [None] * n\n    #     for i in range(n):\n    #         c[i] = s[j][i]\n    #         c[i] = s[j][i]\n    #         j += 1\n    #     j = 0\n    #     i = 0\n    #     s = [c]\n    #     c = [None] * n\n    #     for i in range(n):\n    #         c[i] = s[j][i]\n    #         c[i] = s[j][i]\n    #         j += 1\n    #     j = 0\n    #     i = 0\n    #     s = [c]\n    #     c = [None] * n\n    #     for i in range(n):\n    #         c[i] = s[j][i]\n    #         c[i] = s[j][i]\n    #         j += 1\n    #     j = 0\n    #     i = 0\n    #     s = [c]\n    #     c = [None] * n\n    #     for i in range(n):\n    #         c[i] = s[j][i]\n    #         c[i] = s[j][i]\n    #         j += 1\n    #     j = 0\n    #     i = 0\n    #     s = [c]\n    #     c = [None] * n\n    #     for i in range(n):\n    #         c[i] = s[j][i]\n    #         c[i] = s[j][i]\n    #         j += 1\n    #     j = 0\n    #     i = 0\n    #     s = [c]\n    #     c = [None] * n\n    #     for i in range(n):\n    #         c[i] = s[j][i]\n    #         c[i] = s[j][i]\n    #         j += 1\n    #     j = 0\n    #     i = 0\n    #     s = [c]\n    #     c = ["
    },
    {
        "number": 4030,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    s = list(stdin.strip().replace(' ', '').replace('\\n', ''))\n    def s2s(s):\n        res = ''\n        for i in range(len(s)):\n            if s[i] == 'a' or s[i] == 'A':\n                res += '2'\n            elif s[i] == 'b' or s[i] == 'B':\n                res += '1'\n            elif s[i] == 'c' or s[i] == 'C':\n                res += '1'\n            elif s[i] == 'd' or s[i] == 'D':\n                res += '1'\n            elif s[i] == 'e' or s[i] == 'E':\n                res += '1'\n            elif s[i] == 'f' or s[i] == 'F':\n                res += '1'\n            else:\n                res += s[i]\n        return res\n    res = []\n    for i in range(n):\n        s2 = s2s(s[i])\n        res.append(s2)\n    res = sorted(res)\n    return '\\n'.join(res)"
    },
    {
        "number": 4030,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    s = list(map(str, stdin.strip().split()))\n    c = 0\n    for i in range(n - 2):\n        if s[i] == 'a' and s[i + 1] == 'b' and s[i + 2] == 'c':\n            c += 1\n    return c\n"
    },
    {
        "number": 4030,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = [int(i) for i in stdin.split()]\n    c = [0] * n\n    for i in range(n):\n        min_num = float('inf')\n        for j in range(i):\n            num = s[j]\n            for k in range(j, i):\n                if num > min_num:\n                    min_num = num\n            c[i] = min_num + 1\n    return str(c.index(min(c)))\n"
    },
    {
        "number": 4031,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip().split()[0])\n    string = stdin.strip().split()[1]\n    print(string)\n    print(list(string))\n    print(list(string[::-1]))\n    return 'YES' if string.count('a')==string.count('b')==string.count('c')==n else 'NO'\n\ndef"
    },
    {
        "number": 4031,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s, e, m = [int(x) for x in stdin.split()]\n\n    if not 0 < s < m < 100:\n        return 'NO'\n\n    # 1. check if all substrings are equal.\n    # 2. print all possible order of the substring\n    # 3. return if all substrings are equal\n\n    # Solution 2: if all substrings are not equal, return no\n    ans = ''\n    for i in range(m):\n        # if substring is equal to any other substring, return \"YES\"\n        if str(i) not in ans:\n            ans += str(i)\n\n    # print result\n    if ans == str(s):\n        return 'YES'\n    else:\n        return 'NO'\n\n\nfor _ in range(int(input())):\n    print(solution(input()))\n"
    },
    {
        "number": 4031,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    ans = []\n    for i in range(n):\n        ans.append(stdin[i:i+m])\n    return '\\n'.join(ans)\n\n\n\n-----Note-----\n\nYou have to use recursion for it.\n\n-----Time Complexity-----\n\nFor each $n$ line of strings, there are $m$ substrings.\n\nThe time complexity is $O(m^2)$, where $m$ is the number of words in the strings.\n\nThe space complexity is $O(n)$, which is a constant mentioned in the article.\n\"\"\"\n\ndef"
    },
    {
        "number": 4031,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n  def reorder(string: str) -> str:\n    if len(string) == 1:\n      return string\n    if len(string) % 2!= 0:\n      return \"NO\"\n    \n    words = [string[i:i+2] for i in range(0, len(string), 2)]\n    \n    if len(words) < 2:\n      return \"NO\"\n    \n    return \"YES\" + \"\".join(sorted(words[0] + words[1]))\n  \n  return reorder(stdin)\n\n\ndef"
    },
    {
        "number": 4031,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    string = []\n    ans = []\n    \n    for _ in range(int(stdin)):\n        string.append(stdin.rstrip())\n    \n    \n    for idx, string in enumerate(string):\n        for substring in string[:idx]:\n            for x in substring:\n                if x not in ans:\n                    ans.append(x)\n                \n    return ','.join(ans)\n\"\"\"\n\ndef"
    },
    {
        "number": 4031,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    s = [str(input()) for _ in range(n)]\n    s.sort(key=lambda x: len(x))\n    while True:\n        for i in range(1, len(s)-1):\n            if s[i] == s[i-1]:\n                for j in range(i, len(s)-1):\n                    if s[j]!= s[i-1] and s[j]!= s[i] and s[i]!= s[j]:\n                        break\n                else:\n                    s.remove(s[i])\n                    s.remove(s[i])\n                    s.remove(s[i])\n                    s.remove(s[j])\n                    s.remove(s[j])\n                    break\n        else:\n            return \"YES\" if s else \"NO\"\n"
    },
    {
        "number": 4031,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = []\n    for _ in range(n):\n        a.append(stdin[:])\n    for i in range(n):\n        for j in range(n):\n            if len(set(a[j])) == n and len(set(a[i])) == n:\n                b = set(a[i])\n                if len(b) == n:\n                    if len(set(a[j])) == n:\n                        if a[j].count('a') >= a[i].count('a'):\n                            pass\n                        else:\n                            pass\n                    elif len(set(a[j])) == n - 1:\n                        pass\n                    else:\n                        pass\n                else:\n                    pass\n            else:\n                pass\n        pass\n    return 'YES'\n\nhttps://www.geeksforgeeks.org/rearrange-the-strings-of-n-strings-using-dynamic-programming/\n\ndef"
    },
    {
        "number": 4031,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    ans = ''\n    n = int(stdin.strip())\n    for i in range(n):\n        a, b, c = map(str, input().split())\n        ans += c\n        ans += b\n        if a == b:\n            ans += a\n        else:\n            ans += a +'' + b\n    return ans\n\"\"\""
    },
    {
        "number": 4031,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin) == 1:\n        return \"NO\"\n    \n    ans = []\n    st = []\n    idx = 0\n    \n    for i in range(1, len(stdin)):\n        st.append(stdin[i])\n        \n        while st[idx] in st and idx < len(st) - 1:\n            if st[idx]!= st[idx+1]:\n                break\n            idx += 1\n        \n        if idx == len(st) - 1:\n            ans.append(\"YES\")\n        else:\n            ans.append(\"NO\")\n        \n        st.pop()\n        \n    if len(st) == 0:\n        ans.append(\"YES\")\n        \n    return''.join(ans)\n\nAnswer\n\n-----Example 1-----\nInput\n3\naaaba\nbbbab\naaa\n\nOutput\nYES\nbbb\naabab\naaaaa\n\n-----Example 2-----\nInput\n2\nabab\nabab\n\nOutput\nNO\n\nInput\n4\nqwerty\nqwe\nqw\nqw\nqw\n\nOutput\nNO\n\n-----Note-----\nIn the third example you cannot reorder the strings because the string \"abab\" is not a substring of the string \"abab\".\n\n###########"
    },
    {
        "number": 4031,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    #Write your code here\n    answer = \"\"\n    n = int(stdin)\n    strs = []\n    for _ in range(n):\n        strs.append(stdin.strip())\n    for i in range(1,len(strs)):\n        for j in range(len(strs)):\n            for k in range(j,len(strs)):\n                if (strs[i][j] == strs[j][k]):\n                    break\n            else:\n                if (len(strs[i]) < len(strs[j])):\n                    answer = answer + strs[i]\n                else:\n                    answer = answer + strs[j]\n    return answer"
    },
    {
        "number": 4032,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    m = a[0]\n    if m > n:\n        m = n\n    start = 0\n    end = n-1\n    ans = 0\n    while start < end:\n        if end-start <= k:\n            mid = (start+end)//2\n            if mid % n == 0:\n                if mid == 0:\n                    ans += 1\n                    start += 1\n                else:\n                    ans += mid // n\n                    start += mid // n\n            else:\n                end = mid - 1\n                if mid == 0:\n                    ans += 1\n                    start += 1\n                else:\n                    ans += mid // n\n                    start += mid // n\n        else:\n            mid = (start+end)//2\n            if mid % n == 0:\n                if mid == 0:\n                    ans += 1\n                    start += 1\n                else:\n                    ans += mid // n\n                    start += mid // n\n            else:\n                end = mid - 1\n                if mid == 0:\n                    ans += 1\n                    start += 1\n                else:\n                    ans += mid // n\n                    start += mid // n\n    return str(ans)\n\nprint(solution(input()))"
    },
    {
        "number": 4032,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(solve(stdin)))\n\ndef"
    },
    {
        "number": 4032,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    \n    left, right = 0, n\n    \n    while left + 1 < right:\n        mid = left + (right - left) // 2\n        \n        if mid == n:\n            return mid\n        \n        if abs(mid - k) <= mid:\n            left = mid\n        else:\n            right = mid\n    \n    return right\n\ndef"
    },
    {
        "number": 4032,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    k = int(stdin.split()[1])\n    \n    lst = list(map(int, input().split()))\n    \n    mashka_lst = [0] * (n + 1)\n    mashka_lst[0] = 1\n    \n    # get the minimum number of problems from the left\n    for i in range(1, n + 1):\n        mashka_lst[i] = lst[i - 1]\n        \n        if i % k == 0:\n            mashka_lst[i] = min(mashka_lst[i], mashka_lst[i - 1] + 1)\n        elif i % k!= 0:\n            mashka_lst[i] = min(mashka_lst[i], mashka_lst[i - 1] + 2)\n            \n    # get the minimum number of problems from the right\n    for i in range(n, 0, -1):\n        mashka_lst[i] = lst[i - 1]\n        \n        if i % k == 0:\n            mashka_lst[i] = min(mashka_lst[i], mashka_lst[i + 1] + 1)\n        elif i % k!= 0:\n            mashka_lst[i] = min(mashka_lst[i], mashka_lst[i + 1] + 2)\n        \n    # print the final output\n    for i in range(n - 1, -1, -1):\n        print(mashka_lst[i])\n\n    return str(mashka_lst[0])\n"
    },
    {
        "number": 4032,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a_1, a_2, a_3 = map(int, input().split())\n    a_3 = a_3 - a_1\n    a_4 = a_3 // a_2\n    a_4 = a_4 - 1\n    a_5 = a_4 // a_3\n    a_5 = a_5 - 1\n    a_6 = a_5 // a_4\n    a_6 = a_6 - 1\n    a_7 = a_6 // a_3\n    a_7 = a_7 - 1\n    a_8 = a_7 // a_4\n    a_8 = a_8 - 1\n    a_9 = a_8 // a_3\n    a_9 = a_9 - 1\n    a_10 = a_9 // a_4\n    a_10 = a_10 - 1\n    a_11 = a_10 // a_3\n    a_11 = a_11 - 1\n    a_12 = a_11 // a_4\n    a_12 = a_12 - 1\n    a_13 = a_12 // a_3\n    a_13 = a_13 - 1\n    a_14 = a_13 // a_4\n    a_14 = a_14 - 1\n    a_15 = a_14 // a_3\n    a_15 = a_15 - 1\n    a_16 = a_15 // a_4\n    a_16 = a_16 - 1\n    a_17 = a_16 // a_3\n    a_17 = a_17 - 1\n    a_18 = a_17 // a_4\n    a_18 = a_18 - 1\n    a_19 = a_18 // a_3\n    a_19 = a_19 - 1\n    a_20 = a_19 // a_4\n    a_20 = a_20 - 1\n    a_21 = a_20 // a_3\n    a_21 = a_21 - 1\n    a_22 = a_21 // a_4\n    a_22 = a_22 - 1\n    a_23 = a_22 // a_3\n    a_23 = a_23 - 1\n    a_24 = a_23 // a_4\n    a_24 = a_24 - 1\n    a_25 = a_24 // a_3\n    a_25 = a_25 - 1\n    a_26 = a_25 // a_4\n    a_26 = a_26 - 1\n    a_27 = a_26 // a_3\n    a_27 = a_27 - 1\n    a_28 = a_27 // a_4\n    a_28 = a_28 - 1\n    a_29 = a_28 // a_3\n    a_29 = a_29 - 1\n    a_30 = a_29 // a_4\n    a_30 = a_30 - 1\n    a_31 = a_30 // a_3\n    a_31 = a_31 - 1\n    a_32 = a_31 // a_4\n    a_32 = a_32 - 1\n    a_33 = a_32 // a_3\n    a_33 = a_33 - 1\n    a_34 = a_33 // a_4\n    a_34 = a_34 - 1\n    a_35 = a_34 // a_3\n    a_35 = a_35 - 1\n    a_36 = a_35 // a_4\n    a_36 = a_36 - 1\n    a_37 = a_36 // a_3\n    a_37 = a_37 - 1\n    a_38 = a_37 // a_4\n    a_38 = a_38 - 1\n    a_39 = a_38 // a_3\n    a_39 = a_39 - 1\n    a_40 = a_39 // a_4\n    a_40 = a_40 - 1\n    a_41 = a_40 // a_3\n    a_41 = a_41 - 1\n    a_42 = a_41 // a_4\n    a_42 = a_42 - 1\n    a_43 = a_42 // a_3\n    a_43 = a_43 - 1\n    a_44 = a_43 // a_4\n    a_44 = a_44 - 1\n    a_45 = a_44 // a_3\n    a_45 = a_45 - 1\n    a_46 = a_45 // a_4\n    a_46 = a_46 - 1\n    a_47 = a_46 // a_3\n    a_47 = a_47 - 1\n    a_48 = a_47 // a_4\n    a_48 = a_48 - 1\n    a_49 = a_48 // a_3\n    a_49 = a_49 - 1\n    a_50 = a_49 // a_4\n    a_50 = a_50 - 1\n    a_51 = a_50 // a_3\n    a_51 = a_51 - 1\n    a_52 = a_51 // a_4\n    a_52 = a_52 - 1\n    a_53 = a_52 // a_3\n    a_53 = a_53 - 1\n    a_54 = a_53 // a_4\n    a_54 = a_54 - 1\n    a_55 = a_54 // a_3\n    a_55 = a_55 - 1\n    a_56 = a_55 // a_4\n    a_56 = a_56 - 1\n    a_57 = a_56 // a_3\n    a_57 = a_57 - 1\n    a_58 = a_57 // a_4\n    a_58 = a_58 - 1\n    a_59 = a_58 // a_3\n    a_59 = a_59 - 1\n    a_60 = a_59 // a_4\n    a_60 = a_60 - 1\n    a_61 = a_60 // a_3\n    a_61 = a_61 - 1\n    a_62 = a_61 // a_4\n    a_62 = a_62 - 1\n    a_63 = a"
    },
    {
        "number": 4032,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    arr = [int(i) for i in stdin.split()]\n    count = 0\n    while len(arr) > 0:\n        for i in range(0, len(arr), 2):\n            if arr[i] + arr[i + 1] <= k:\n                arr = arr[:i] + arr[i + 1:]\n                count += 1\n    return count\nprint(solution(input()))\n-----Constraints-----\n0 < n, k < 100000\n1 <= a_1 <= 100\na_1 < a_2 <= 100\n\n-----Submissions-----\n5725\n-----Time Complexity-----\nO(n)"
    },
    {
        "number": 4032,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    \n    starts = {}\n    ends = {}\n    \n    for i in range(len(a)):\n        if a[i] == 0:\n            starts[i] = True\n        if a[i] == 1:\n            ends[i] = True\n        if a[i] == 2:\n            ends[i] = True\n        if a[i] == 3:\n            starts[i] = True\n        if a[i] == 4:\n            ends[i] = True\n    \n    left = []\n    right = []\n    \n    for i in range(k):\n        left = ends[i]\n        right = starts[i]\n        if left == True:\n            if i == 0:\n                left = True\n            if right == True:\n                left = True\n        if right == True:\n            if i == 0:\n                right = True\n            if left == True:\n                left = True\n        if left == True and right == True:\n            if i == 0:\n                left = True\n                right = True\n    \n    print(len(starts))\n    print(len(ends))\n    print(len(left))\n    print(len(right))\n    \n\nprint(solution(input()))"
    },
    {
        "number": 4032,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    A = []\n    B = []\n    for i in range(n):\n        A.append(int(stdin[i]))\n    for i in range(n-1):\n        B.append(int(stdin[i]))\n    B.sort()\n    while len(A) > 0:\n        if A[-1] > B[-1]:\n            A.pop()\n        else:\n            break\n    B = B[::-1]\n    for i in range(len(B)):\n        A.append(B[i])\n    print(len(A))\n    return ''.join(map(str, A))\n\n-------------------\n\nInput\n5 2\n1 1 2\n3 3\n4 4\n5 5\n\nOutput\n5\n\nInput\n5 100\n12 34 55 43 21\n\nOutput\n5\n"
    },
    {
        "number": 4032,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split()]\n    A = list(map(int, input().split()))\n    B = [int(i) for i in input().split()]\n    answer = 0\n    for a in A:\n        if a >= k:\n            answer += 1\n        if a < k:\n            for i in range(a, k+1):\n                if i not in B:\n                    answer += 1\n    return str(answer)\n\n-----------------------------------------------------------------------------------------------------------------------\n\nWrite an algorithm that finds the number of problems in a contest that are equal to a given difficulty.\n\n____________________________________________________________________________________________________________________\n\nA.Input\nn=7\nk=12\n\nOutput\n14\n\n______________________________________________________________________________________________________________________\n\nA.Output\n0\n___________________________________________________________________________________________________________________\n\nA.Example\nInput:\n4 5\n2 3\n\nOutput:\n1\n\n___________________________________________________________________________________________________________________\n\nA.Example\nInput:\n5 6\n6 4\n\nOutput:\n1\n___________________________________________________________________________________________________________________\n\nA.Example\nInput:\n5 12\n2 3\n\nOutput:\n0\n___________________________________________________________________________________________________________________\n\nA.Example\nInput:\n9 10\n1 2\n\nOutput:\n0\n___________________________________________________________________________________________________________________\n\nA.Example\nInput:\n10 12\n2 3\n\nOutput:\n1\n___________________________________________________________________________________________________________________\n\nA.Example\nInput:\n10 5\n3 4\n\nOutput:\n0\n___________________________________________________________________________________________________________________\n\nA.Example\nInput:\n3 1\n4 1\n\nOutput:\n0\n___________________________________________________________________________________________________________________\n\nA.Example\nInput:\n1 2\n2 3\n\nOutput:\n1\n___________________________________________________________________________________________________________________\n\nA.Example\nInput:\n9\n1 2\n3 4\n\nOutput:\n0\n___________________________________________________________________________________________________________________\n\nA.Example\nInput:\n3 1\n4 2\n\nOutput:\n0\n___________________________________________________________________________________________________________________\n\nA.Example\nInput:\n10\n1 2\n3 4\n\nOutput:\n0\n___________________________________________________________________________________________________________________\n\nA.Example\nInput:\n10 20\n1 2 3 4 5 6 7 8 9 10\n\nOutput:\n0\n___________________________________________________________________________________________________________________\n\nA.Example\nInput:\n3 1\n4 2\n5 3\n\nOutput:\n0\n___________________________________________________________________________________________________________________\n\nA.Example\nInput:\n5 1\n2 3\n4 5\n\nOutput:\n0\n___________________________________________________________________________________________________________________\n\nA.Example\nInput:\n5 1\n4 3\n4 5\n\nOutput:\n0\n___________________________________________________________________________________________________________________\n\nA.Example\nInput:\n1 1\n2 3\n3 4\n\nOutput:\n0\n___________________________________________________________________________________________________________________\n\nA.Example\nInput:\n1 5\n1 2\n1 4\n1 3\n\nOutput:\n1\n___________________________________________________________________________________________________________________\n\nA.Example\nInput:\n3 4\n2 4\n1 4\n1 3\n\nOutput:\n1\n___________________________________________________________________________________________________________________\n\nA.Example\nInput:\n10 3\n4 2\n2 3\n5 1\n\nOutput:\n1\n___________________________________________________________________________________________________________________\n\nA.Example\nInput:\n1 1\n2 3\n3 2\n1 4\n\nOutput:\n2\n___________________________________________________________________________________________________________________\n\nA.Example\nInput:\n10 5\n3 1\n1 2\n3 4\n1 5\n\nOutput:\n0\n___________________________________________________________________________________________________________________\n\nA.Example\nInput:\n1\n1 2\n3 4\n2 4\n\nOutput:\n0\n___________________________________________________________________________________________________________________\n\nA.Example\nInput:\n1 1\n4 2\n2 3\n1 2\n\nOutput:\n0\n___________________________________________________________________________________________________________________\n\nA.Example\nInput:\n2\n2 2\n2 1\n2 1\n2 3\n3 1\n3 2\n3 4\n1 4\n\nOutput:\n0\n___________________________________________________________________________________________________________________\n\nA.Example\nInput:\n1\n4 5\n3 1\n1 2\n1 3\n1 4\n3 2\n1 5\n\nOutput:\n1\n___________________________________________________________________________________________________________________\n\nA.Example\nInput:\n7\n2 3\n2 4\n3 1\n3 2\n1 4\n4 5\n1 2\n1 3\n1 6\n\nOutput:\n3\n___________________________________________________________________________________________________________________\n\nA.Example\nInput:\n3 1\n3 2\n3 4\n4 5\n3 6\n3 7\n\nOutput:\n0\n___________________________________________________________________________________________________________________\n\nA.Example\nInput:\n12\n4 5\n6 5\n6 4\n7 4\n7 3\n\nOutput:\n1\n___________________________________________________________________________________________________________________\n\nA.Example\nInput:\n2 7\n4 1\n5 2\n3 4\n2 6\n2 2\n1 3\n2 4\n3 3\n4 1\n\nOutput:\n3\n___________________________________________________________________________________________________________________\n\nA.Example\nInput:\n4 7\n4 3\n4 2\n3 3\n4 1\n1 2\n4 5\n4 6\n1 3\n\nOutput:\n1\n___________________________________________________________________________________________________________________\n\nA.Example\nInput:\n2 3\n4 2\n3 5\n3 5\n4 5\n\nOutput:\n0\n___________________________________________________________________________________________________________________\n\nA.Example\nInput:\n1 2\n1 1\n1 5\n1 6\n\nOutput:\n0\n___________________________________________________________________________________________________________________\n\nA.Example\nInput:\n1 1\n2 2\n3 4\n3 3\n4 1\n\nOutput:\n1\n___________________________________________________________________________________________________________________\n\nA.Example\nInput:\n3 3\n4 2\n4 1\n5 1\n5 5\n\nOutput:\n0\n___________________________________________________________________________________________________________________\n\nA.Example\nInput:\n3 3\n3 3\n3 2\n3 2\n3 1\n\nOutput:\n1\n___________________________________________________________________________________________________________________\n\nA.Example\nInput:\n7\n2 3\n3 4\n3 4\n4 3\n4 1\n1 2\n4 5\n1 5\n1 6\n\nOutput:\n0\n___________________________________________________________________________________________________________________\n\nA.Example\nInput:\n1 2\n1 3\n1 5\n1 6\n1 4\n1 4\n\nOutput:\n2\n___________________________________________________________________________________________________________________\n\nA.Example\nInput:\n2 2\n3 1\n3 2\n3 2\n3 3\n1 5\n3 5\n3 4\n\nOutput:\n0\n___________________________________________________________________________________________________________________\n\nA.Example\nInput:\n8 1\n8 3\n8 1\n8 5\n8 6\n7 4\n7 4\n7 3\n7 2\n8 7\n\nOutput:\n0\n"
    },
    {
        "number": 4032,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split()]\n    q = deque([int(i) for i in stdin.split()])\n    answer = 0\n    while q:\n        res = q.popleft()\n        answer += res\n        for i in range(res + 1):\n            q.append(i)\n    if k >= answer >= k:\n        print(answer)\n    else:\n        print(k)\n\nsolution(input())\n'''\n\ndef"
    },
    {
        "number": 4033,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    result = 0\n    if a%2 == 0:\n        result = b\n    else:\n        result = (a*b)//2\n    return str(result)\n"
    },
    {
        "number": 4033,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a+b > a*b:\n        return \"No\"\n    elif a+b == a*b:\n        return \"Yes\"\n    else:\n        print(min(a,b))\n        return \"Yes\"\n\nprint(solution(\"3 6\"))\n\n----code-----\n\nimport math\nimport sys\n\ndef"
    },
    {
        "number": 4033,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    res = get_minimal_perimeter(n, a, b)\n    return str(res)\n\ndef"
    },
    {
        "number": 4033,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"\".join(str(int(x) - 1) for x in stdin.split())\n\n\ndef"
    },
    {
        "number": 4033,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a,b = map(int,stdin.split())\n    return \"\".join(f\"{a}{b}\" for a in range(1,a+1))\n\n\n-----Constraints-----\n1 <= a,b <= 10^14\n\nInput\n1 3\n\nOutput\n7\n\nInput\n1 6\n\nOutput\n7\n\nInput\n1 6\n\nOutput\n0\n\n1\n"
    },
    {
        "number": 4033,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n  print(solution_input())\n  return\n  \nSolution\nFor an example of solving, we can write:\n\nExample 1:\nInput:\nInput:\nInput:\nInput:\nOutput:\nOutput:\nInput:\nInput:\nOutput:\nOutput:\nExample 2:\nInput:\nInput:\nInput:\nOutput:\nOutput:\nInput:\nInput:\nOutput:\nOutput:\nExample 3:\nInput:\nInput:\nInput:\nOutput:\nOutput:\nInput:\nInput:\nOutput:\nOutput:\nExample 4:\nInput:\nInput:\nInput:\nOutput:\nOutput:\nInput:\nInput:\nOutput:\nOutput:\nExample 5:\nInput:\nInput:\nInput:\nOutput:\nOutput:\nExample 6:\nInput:\nInput:\nInput:\nOutput:\nOutput:\n\n\"\"\"\n\nclass Solution:\n    def __init__(self):\n        self.output = 0\n        self.red_tiles = set()\n        self.blue_tiles = set()\n        self.solve()\n    \n    def solve(self):\n        if self.red_tiles and self.blue_tiles:\n            self.output = self.min_perimeter()\n        else:\n            return\n\n    def min_perimeter(self):\n        if self.red_tiles and self.blue_tiles:\n            return min(self.red_tiles, self.blue_tiles) + max(self.red_tiles - self.blue_tiles, 0)\n        else:\n            return 0\n\ndef"
    },
    {
        "number": 4033,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    \n    \n    #1. Given the number of red and blue tiles.\n    #2. If at least one of them is not white, it is impossible to color this set of tiles.\n    \n    #3. Given a list of white tiles, color all the tiles of the same color.\n    #4. If the number of white tiles is less than the given number, it should ask you to choose the color of the remaining tiles.\n    #5. If the given list of white tiles contains only one white tile, then you can choose the color of the remaining white tile.\n\n    #6. Given a list of black tiles, color all the tiles of the same color.\n    #7. If the number of black tiles is less than the given number, it should ask you to choose the color of the remaining black tiles.\n    #8. If the given list of black tiles contains only one black tile, then you can choose the color of the remaining black tile.\n"
    },
    {
        "number": 4033,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if (a > b):\n        a, b = b, a\n    if a % b == 0:\n        return f'{a//b}'\n    if (a % b) > (b % a):\n        return f'{a//b}'\n    if (b % a) > (a % b):\n        return f'{b//a}'\n    return f'{a//b}'\n        \n"
    },
    {
        "number": 4033,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    width, height = map(int, stdin.split())\n    return str(width*height - width*height - 2*width - 2*height + width + height + 2)\n\n\ndef"
    },
    {
        "number": 4033,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    for s in range(int(stdin.strip())):\n        a, b = list(map(int, stdin.split()))\n        if not (a & b & (a + b) == (a + b)):\n            print(\"Error\")\n            continue\n        print(a, b)\n        if a & (a + b) > b & (a + b):\n            print(a, b)\n            print(\"Error\")\n            continue\n        print(\"Error\")\n    return \"Error\"\n\n(Error)\n"
    },
    {
        "number": 4034,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    #s = input()\n    s = stdin.strip().lower()\n    \n    #colors = [i for i in range(1,len(s)+1)]\n    \n    colors = [2,5,4,6,7,1,3,8]\n    \n    def helper(s):\n        \n        n = len(s)\n        \n        for i in range(1,n):\n            if s[i-1] == s[i]:\n                color1 = colors[i-1]\n                color2 = colors[i]\n                for j in range(i,n):\n                    if s[j] == s[i] and color1 == colors[j]:\n                        color1 = colors[j]\n                    elif s[j] == s[i] and color2!= colors[j]:\n                        color2 = colors[j]\n                    if color1 == color2:\n                        break\n                \n                if color1 == color2:\n                    return True\n        \n        return False\n    \n    \n    \n    \n    #print(helper(s))\n    \n    #return \"YES\" if helper(s) else \"NO\"\n    \n    #for i in range(len(s)):\n    #    for j in range(i+1,len(s)):\n    #        if s[i] == s[j]:\n    #            s[i] = 0\n    #            s[j] = 1\n    #            break\n    #    else:\n    #        continue\n    \n    #return \"YES\" if s == sorted(s) else \"NO\"\n    \n    if helper(s):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n        \n"
    },
    {
        "number": 4034,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 4034,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[0]\n    a = list(s)\n    for i in range(1, n):\n        if s[i] == 'a':\n            s[i] = 'a'\n            a[i] = 'a'\n        elif s[i] == 'b':\n            s[i] = 'b'\n            a[i] = 'b'\n        elif s[i] == 'c':\n            s[i] = 'c'\n            a[i] = 'c'\n        elif s[i] == 'd':\n            s[i] = 'd'\n            a[i] = 'd'\n        else:\n            s[i] = 'c'\n            a[i] = 'c'\n    answer = \"\".join(a)\n    return answer"
    },
    {
        "number": 4034,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    s = list(map(int, s))\n    color = [0, 0]\n    curr = 0\n    for i in range(n):\n        curr += s[i]\n        if curr == 3:\n            color = [1, 0]\n            curr -= 1\n        elif curr == 2:\n            color = [0, 1]\n            curr -= 2\n        elif curr == 1:\n            color = [0, 0]\n            curr -= 3\n        elif curr == 0:\n            color = [0, 0]\n            curr -= 4\n        else:\n            color = [0, 0]\n            curr -= 5\n    answer = \"\".join(map(str, color))\n    return answer\n\n-----Constraints-----\n1 <= n <= 2 * 10^5\n1 <= s.length <= n\ns[i] is either 'a', 'b', 'c' or 'd'.\ns is sorted by increasing characters.\n\nTime Limit: 1 sec\nMemory Limit: 1M\n\n-----Examples-----\nInput\n\n2\nabacbecfd\n\nOutput\n\nYES\n001010101\n\nInput\n\n1\nabcde\n\nOutput\n\nNO\n\n\"\"\"\n\nclass Solution:\n    def colorString(self, s: str) -> str:\n        import numpy as np\n        n = len(s)\n        if n == 0:\n            return \"\"\n        else:\n            start = np.where(np.asarray(s).ravel()!= s)[0].max()\n            colors = [0, 0, 0, 0]\n            for i in range(start, n, 1):\n                colors[s[i]] += 1\n            return \"\".join(map(str, colors))"
    },
    {
        "number": 4034,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, s = list(map(int, stdin.split(' ')))\n    \n    color = [[0 for i in range(n)] for j in range(n)]\n    \n    for i in range(n):\n        color[i][i] = 1\n        for j in range(i):\n            if s[i] == s[j]:\n                color[i][j] = 0\n                \n    #print(color)\n    \n    # swap\n    swaps = 0\n    #print(color)\n    for i in range(n):\n        for j in range(n-1):\n            if color[j][i] == 0 and color[j+1][i] == 1:\n                color[j][i] = 1\n                color[j+1][i] = 0\n                swaps += 1\n                #print(color[j][i], color[j+1][i], \"swapped\")\n    #print(swaps)\n    #print(color)\n    \n    #print(color)\n    if swaps == n*n:\n        return \"YES\"\n    \n    #print(color)\n    return \"NO\"\n"
    },
    {
        "number": 4034,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, s = list(map(int, stdin.split()))\n    sorted_s = sorted(s)\n    sorted_s_ = ''.join([str(i) for i in sorted_s])\n    print(sorted_s_)\n    s = ''.join([str(i) for i in sorted_s])\n    if len(s) == 1:\n        print(s)\n    else:\n        if s[0] == '0':\n            print('NO')\n        else:\n            print('YES')\n    return s\n\nprint(solution(input()))"
    },
    {
        "number": 4034,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n == 0:\n        return 'YES'\n    s = list(stdin.strip())\n    dp = [1]\n    for i in range(1, n):\n        if s[i-1]!= s[i] or (dp[i-1] == 1 and s[i] == 'a'):\n            dp.append(0)\n        else:\n            dp.append(0)\n    if dp[n] == 1:\n        return 'YES'\n    else:\n        return 'NO'"
    },
    {
        "number": 4034,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    l = list(map(int, stdin.strip().split()))\n    l.sort()\n    l2 = []\n    l3 = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            l2.append(l[i] + l[j])\n        l3.append(l2)\n        l2 = []\n    print(l3)\n    print(list(map(str, l3)))\n    return \"YES\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4034,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    l = list(stdin)\n    for i in range(0, n - 1):\n        if l[i]!= '0' and l[i + 1]!= '0':\n            if l[i] == l[i + 1]:\n                l[i], l[i + 1] = '0', '1'\n            else:\n                l[i], l[i + 1] = '1', '0'\n    \n    if all(x == '0' for x in l):\n        return 'YES'\n    return 'NO'\n\nPrint\n0 YES\n\nPrint\n0 NO\n\nSolution\n\nimport math\n\ndef"
    },
    {
        "number": 4034,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    s = list(stdin.strip())\n    s = sorted(s)\n    k = 0\n    x = 0\n    while x < len(s):\n        if s[x] == s[x+1]:\n            k += 1\n        else:\n            x += 1\n            continue\n        \n        if k!= 1:\n            s[x+1] = '0'\n            s[x] = '1'\n            x += 2\n        else:\n            x += 1\n            continue\n        \n    if k!= 1:\n        s = s[1:]\n    \n    if s.count('0') > n:\n        return 'NO'\n    else:\n        return 'YES'\n\n\ndef"
    },
    {
        "number": 4035,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A > B:\n        print(-1)\n    elif A <= B:\n        print(A)\n    else:\n        c = int(B * 0.08)\n        print(A - c)\n        print(A + B - 2 * B)\n\nprint(solution('1 2'))\nprint(solution('2 3'))\nprint(solution('2 4'))\n"
    },
    {
        "number": 4035,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A < B:\n        A, B = B, A\n    result = (A-B)*100\n    if result < 0:\n        result = -1\n    return str(result)"
    },
    {
        "number": 4035,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return str(A/B) if A <= B else str(-1)\n"
    },
    {
        "number": 4035,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n  for line in stdin:\n    A,B = map(int, line.split())\n    if A > B:\n      return str(A-B)\n"
    },
    {
        "number": 4035,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a,b=map(int,stdin.split())\n    result=a+b\n    if result<0:\n        return \"-1\"\n    if result==0:\n        return str(result)\n    low=0\n    nums=[]\n    for i in range(len(str(result))):\n        nums.append(int(str(result)[i]))\n    for i in nums:\n        if i<=2:\n            low+=i\n        if i>2:\n            low-=i\n    if low>=0:\n        print(low)\n    else:\n        return \"-1\"\n"
    },
    {
        "number": 4035,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    A, B = lines[0], lines[1]\n    if A.isdigit() and B.isdigit():\n        A, B = int(A), int(B)\n        if A > 0 and B > 0:\n            if A // 100 * (0.8 + B / 100) < A:\n                return str(A // 100 * (0.8 + B / 100))\n            elif A // 100 * (0.1 + B / 100) < A:\n                return str(A // 100 * (0.1 + B / 100))\n            else:\n                return str(A // 100 * A)\n        else:\n            return -1\n    else:\n        return -1\n"
    },
    {
        "number": 4035,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    price = 0\n    for i in stdin:\n        if i.isdigit():\n            price = int(i)\n        else:\n            if i == \"A\" and price < 25:\n                price += 2\n            elif i == \"B\" and price < 25:\n                price += 2\n            else:\n                return -1\n    return str(price)"
    },
    {
        "number": 4035,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    res = max(A, B)\n    for _ in range(A):\n        res -= 10\n    print(res)\n"
    },
    {
        "number": 4035,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    price = A + B\n    answer = min(price, price - A)\n    print(answer)\n    return str(answer)\n\n\"\"\"\n\nfrom math import ceil\ndef"
    },
    {
        "number": 4035,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    ans = 0\n    \n    while A<B:\n        if A%2==0:\n            A=A//2\n            ans=ans+0.1\n        else:\n            A=A//2\n            ans=ans+0.08\n            \n    return str(ans)\n"
    },
    {
        "number": 4036,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    x = [int(i) for i in stdin.split()]\n    \n    if n < k:\n        return \"NO\"\n    \n    ans = []\n    for i in range(1, n + 1):\n        for j in range(1, k):\n            if x[i - 1] + x[j] < x[i] + x[j]:\n                ans.append(x[i] + x[j])\n    if len(ans) == 0:\n        return \"NO\"\n    else:\n        return ''.join(map(str, sorted(ans)))\n\nprint(solution(stdin))"
    },
    {
        "number": 4036,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    days = int(stdin)\n    arr = []\n    for i in range(1, days+1):\n        arr.append(int(stdin.strip()))\n    if arr[0] < arr[1]:\n        return \"NO\"\n    arr.sort()\n    if arr[0] < arr[1]:\n        return \"NO\"\n    for i in range(2, len(arr)):\n        if arr[i] < arr[i-1]:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 4036,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    answer = \"\"\n    for i in range(n):\n        a[i] -= 1\n        for j in range(i+1, n):\n            a[j] += 1\n        for k in range(i+1, n):\n            a[k] -= 1\n        if sum(a) < k:\n            answer += \"NO\"\n        elif sum(a) < 2*n:\n            answer += \"YES\"\n        else:\n            answer += \"YES\"\n    return answer\n"
    },
    {
        "number": 4036,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n    n,k=map(int,stdin.split())\n    \n    a=[]\n    for i in range(n):\n        a.append(int(input()))\n    \n    a_k=a[0]\n    for i in range(1,k):\n        a_k=a_k+a[i]\n        a_k%=a_k\n    \n    answer=\"\"\n    if a_k==1:\n        answer=\"YES\"\n    else:\n        for i in range(1,k):\n            answer+=str(a[i])\n    return answer\n\nsolution(\"1 0\")\nsolution(\"1 1\")\nsolution(\"1 2 4 5 6 8\")"
    },
    {
        "number": 4036,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    k, n = map(int, stdin.split())\n    arr = [int(stdin.strip().split()[0]) for i in range(n)]\n    if len(arr)!= k: return \"NO\"\n    for i in range(len(arr)):\n        if arr[i] < arr[i+1]: return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 4036,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = []\n    for i in range(1, n + 1):\n        a.append(i)\n        for j in range(1, k):\n            if a[i - 1] + a[i - 2] + a[i - k - 1] < a[i]:\n                a[i] = a[i - 1] + a[i - 2] + a[i - k - 1]\n            else:\n                a[i] = a[i - 1] + a[i - 2]\n    if sum(a) == n:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 4036,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n,k=map(int,stdin.split())\n    if n%k==0:\n        n=n//k\n        i=1\n        while n>0:\n            if i<k:\n                if (n-i)%2==0:\n                    if n==i:\n                        return \"NO\"\n                    if n<=i:\n                        i+=1\n                        continue\n                    else:\n                        n-=1\n                        continue\n                else:\n                    if n==i:\n                        return \"NO\"\n                    if n>i:\n                        i+=1\n                        continue\n                    else:\n                        n-=1\n                        continue\n            else:\n                if n%2==0:\n                    return \"NO\"\n                n//=2\n                continue\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 4036,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N,K = map(int,stdin.split())\n    answer = []\n    for i in range(N):\n        a,b = map(int,stdin.split())\n        answer.append([a,b])\n        if a < b:\n            answer.sort()\n            answer.append(b)\n    if answer:\n        print(\"YES\")\n        for i in answer:\n            print(i)\n    else:\n        print(\"NO\")\n\nsolution(\"1 1 1\")"
    },
    {
        "number": 4036,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    a = [int(i) for i in stdin.split()]\n    if len(a)!= N:\n        return \"NO\"\n    else:\n        a.sort()\n        for i in range(N):\n            if (a[i] + 1) <= a[i+1]:\n                return str(a[i]) + \" \" + str(a[i+1]) + \" \" + str(a[i+2])\n        return \"YES\"\n\ndef"
    },
    {
        "number": 4036,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    a = [list(map(int, input().split())) for _ in range(n)]\n    dp = [0] * k\n    for _ in range(k):\n        dp[0] = dp[1] = 1\n        for i in range(1, n):\n            dp[0] += dp[i - 1] * a[i][0]\n    for i in range(1, k):\n        dp[i] += dp[i - 1] * a[i][1]\n        for j in range(2, n):\n            dp[i] += dp[i - 1] * a[j][i]\n    for i in range(2, n):\n        for j in range(2, n):\n            dp[i] += dp[i - 1] * a[j][i - 1]\n    return str(dp[n - 1])\n"
    },
    {
        "number": 4037,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def get_ratings(stdin):\n        ratings = [[0 for _ in range(2)] for _ in range(len(stdin))]\n        for i in range(len(stdin)):\n            stdin, rating = stdin[i], int(stdin[i + 1])\n            ratings[i][0], ratings[i][1] = stdin[0], stdin[1]\n            ratings[i][0] += int(stdin[:2])\n            ratings[i][1] += int(stdin[2:])\n        return ratings\n\n    def get_ans(ratings):\n        ans = 0\n        for i in range(len(ratings)):\n            for j in range(len(ratings)):\n                if i < j:\n                    ans += abs(ratings[i][0] - ratings[j][0]) + abs(ratings[i][1] - ratings[j][1])\n        return ans\n\n    def get_min_ans(ratings):\n        ans = 0\n        for i in range(len(ratings)):\n            for j in range(len(ratings)):\n                if i < j:\n                    ans += abs(ratings[i][0] - ratings[j][0]) + abs(ratings[i][1] - ratings[j][1])\n        return ans\n\n    def get_solution(ratings):\n        ans = get_min_ans(ratings)\n        for i in range(len(ratings)):\n            for j in range(len(ratings)):\n                ans = max(ans, get_ans(ratings) - get_ans(ratings) + abs(ratings[i][0] - ratings[j][0]) + abs(ratings[i][1] - ratings[j][1]))\n        return ans\n\n    ratings = get_ratings(stdin)\n    return get_solution(ratings)"
    },
    {
        "number": 4037,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    projects = []\n    for i in range(n):\n        projects.append(tuple(map(int, input().split())))\n    projects.sort(key=lambda x: x[1])\n    plan = projects[0][1]\n    for p in projects:\n        if p[1] < plan:\n            plan = p[1]\n    answer = 0\n    while True:\n        for i in range(n):\n            if r <= 0:\n                break\n            if plan > r:\n                break\n            if plan - r <= r:\n                r -= plan - r\n                answer += 1\n                plan += p[0]\n                break\n        if r <= 0:\n            break\n        plan += p[0]\n        r -= plan\n    print(answer)\n"
    },
    {
        "number": 4037,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    max_length = a[0] + a[1]\n    for i in range(n):\n        a[i] = a[i]/a[0]\n        for j in range(1, len(a)):\n            a[i] = a[i] + a[j]*a[j]\n        a[i] = math.floor(a[i])\n        a[i] = a[i]/a[0]\n        if a[i] > r:\n            a[i] = r\n        if a[i] < -r:\n            a[i] = -r\n        if a[i] >= max_length:\n            max_length = a[i]\n    print(max_length)\n    \n"
    },
    {
        "number": 4037,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    b = [0] * n\n    for i in range(n):\n        b[i] = a[i] - b[i-1]\n    for i in range(n):\n        if b[i] < 0:\n            b[i] = b[i] * -1\n    answer = 0\n    for i in range(1,n):\n        if b[i] >= 0:\n            answer = max(answer, i)\n    return str(answer)\n"
    },
    {
        "number": 4037,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    a_list = map(int, stdin.split())\n    b_list = map(int, stdin.split())\n    b_list.sort()\n    if b_list[-1] < 0:\n        b_list.pop()\n        b_list.append(0)\n    n = n - 1\n    total = 0\n    for i in range(n):\n        for j in range(len(a_list)):\n            if a_list[j] - r < 0:\n                a_list[j] += b_list[j]\n                a_list[j] = -a_list[j]\n            else:\n                total += a_list[j]\n        total += r\n        if total < 0:\n            total = 0\n    return str(total)\n\n----My Solution----\n\nn,r = map(int,input().split())\nlist_a = map(int,input().split())\nlist_b = map(int,input().split())\ntotal_a = 0\ntotal_b = 0\nfor i in range(n):\n    if list_a[i] < 0:\n        list_a[i] += r\n        total_a += r\n    if list_b[i] < 0:\n        list_b[i] += r\n        total_b += r\nprint(total_a, total_b)\n"
    },
    {
        "number": 4037,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    n, r = map(int, stdin[0].split())\n    if n > 100:\n        return ''\n    if n <= 0 or r < 0:\n        return ''\n    r += 1\n    max_size = r\n    i = 0\n    while i < n:\n        a = r\n        b = r\n        while True:\n            if a < b:\n                a = a + 1\n            elif a > b:\n                a = a - 1\n            else:\n                break\n        if a == r:\n            max_size = max(max_size, a)\n        else:\n            if b == r:\n                max_size = max(max_size, b)\n            else:\n                if max_size > a:\n                    max_size = a\n                if max_size > b:\n                    max_size = b\n        i = i + 1\n    return str(max_size)\n\n\n\"\"\"\ndef"
    },
    {
        "number": 4037,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    result = []\n    while n > 0:\n        size = (a[-1] - b[-1]) // a[-1] + 1\n        if size > n:\n            size = n\n        result.append(size)\n        n -= size\n    return \",\".join(map(str, result))"
    },
    {
        "number": 4037,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    answer = -1\n    for i in range(n):\n        a, b = map(int, stdin.split())\n        answer = max(answer, min(a, b) + r)\n    return answer\n\n\n-----Output-----\nOutput\nOutput must not contain any number other than $1$ and $3$.\n\n'''\n\ndef"
    },
    {
        "number": 4037,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, r = map(int, stdin.split())\n    projects = []\n    for _ in range(n):\n        projects.append(map(int, input().split()))\n    projects.sort(key = lambda x: x[0])\n    answer = 0\n    \n    for i in range(n):\n        tmp_projects = []\n        for j in range(len(projects)):\n            if i >= projects[j][0]:\n                tmp_projects.append(projects[j][1])\n        answer = max(answer, len(tmp_projects))\n    return str(answer)\n"
    },
    {
        "number": 4037,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def solve(n: int, r: int) -> str:\n        if n == 0:\n            return ''\n        if r == 0:\n            return '-'\n        if n == 1:\n            return str(r)\n        return str(n - solve(n - 1, r)) + solve(n - 1, r)\n    \n    return solve(n, r)\n"
    },
    {
        "number": 4038,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 == 0:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n        \n"
    },
    {
        "number": 4038,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    count = 0\n    if n == 0:\n        return \"NO\"\n    while n!= 0:\n        n //= 2\n        count += 1\n    \n    result = \"YES\"\n    for i in range(n):\n        result = str(i) + result\n    return result\n\nprint(solution(\"3\"))\n\nprint(solution(\"4\"))\n\nprint(solution(\"5\"))\n\nprint(solution(\"3\"))\n\nprint(solution(\"4\"))\n\nprint(solution(\"4\"))\n\nprint(solution(\"4\"))\n\nprint(solution(\"2\"))\n\nprint(solution(\"5\"))\n\nprint(solution(\"5\"))\n\nprint(solution(\"6\"))\n\nprint(solution(\"2\"))\n\nprint(solution(\"1\"))\n\nprint(solution(\"3\"))\n\nprint(solution(\"2\"))\n\nprint(solution(\"2\"))\n\nprint(solution(\"3\"))\n\nprint(solution(\"1\"))\n\nprint(solution(\"1\"))\n\nprint(solution(\"1\"))\n\nprint(solution(\"1\"))\n\nprint(solution(\"1\"))\n\nprint(solution(\"2\"))\n\nprint(solution(\"1\"))\n\nprint(solution(\"1\"))\n\nprint(solution(\"1\"))\n\nprint(solution(\"1\"))\n\nprint(solution(\"1\"))\n\nprint(solution(\"1\"))\n\nprint(solution(\"2\"))\n\nprint(solution(\"3\"))\n\nprint(solution(\"3\"))\n\nprint(solution(\"3\"))\n\nprint(solution(\"3\"))\n\nprint(solution(\"3\"))\n\nprint(solution(\"2\"))\n\nprint(solution(\"1\"))\n\nprint(solution(\"2\"))\n\nprint(solution(\"1\"))\n\nprint(solution(\"2\"))\n\nprint(solution(\"2\"))\n\nprint(solution(\"3\"))\n\nprint(solution(\"1\"))\n\nprint(solution(\"1\"))\n\nprint(solution(\"2\"))\n\nprint(solution(\"1\"))\n\nprint(solution(\"2\"))\n\nprint(solution(\"1\"))\n\nprint(solution(\"1\"))\n\nprint(solution(\"1\"))\n\nprint(solution(\"1\"))\n\nprint(solution(\"1\"))\n\nprint(solution(\"1\"))\n\nprint(solution(\"1\"))\n\nprint(solution(\"1\"))\n\nprint(solution(\"1\"))\n\nprint(solution(\"2\"))\n\nprint(solution(\"1\"))\n\nprint(solution(\"1\"))\n\nprint(solution(\"1\"))\n\nprint(solution(\"1\"))\n\nprint(solution(\"1\"))\n\nprint(solution(\"1\"))\n\nprint(solution(\"1\"))\n\nprint(solution(\"1\"))\n\nprint(solution(\"1\"))\n\nprint(solution(\"1\"))\n\nprint(solution(\"1\"))\n\nprint(solution(\"2\"))\n\nprint(solution(\"1\"))\n\nprint(solution(\"1\"))\n\nprint(solution(\"1\"))\n\nprint(solution(\"1\"))\n\nprint(solution(\"1\"))\n\nprint(solution(\"1\"))\n\nprint(solution(\"1\"))\n\nprint(solution(\"1\"))\n\nprint(solution(\"1\"))\n\nprint("
    },
    {
        "number": 4038,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, ans = [int(x) for x in stdin.split()]\n    \n    answer = []\n    \n    def solve(n):\n        nonlocal answer\n        if len(answer) >= n:\n            return answer\n        \n        for _ in range(1, n+1):\n            for i in range(1, n+1):\n                for j in range(1, n+1):\n                    x = str(i) + str(j)\n                    y = str(i) + str(j) + str(i)\n                    \n                    if x!= y:\n                        a = str(i) + str(j) + str(i)\n                        answer.append(a)\n                        \n                        if len(answer) >= n:\n                            return answer\n                        \n                        a = str(i) + str(j) + str(i) + str(i)\n                        answer.append(a)\n                        \n                        if len(answer) >= n:\n                            return answer\n                        \n                        a = str(i) + str(j) + str(j) + str(i) + str(i)\n                        answer.append(a)\n                        \n                        if len(answer) >= n:\n                            return answer\n                        \n                        a = str(i) + str(j) + str(j) + str(i) + str(i) + str(i)\n                        answer.append(a)\n                        \n                        if len(answer) >= n:\n                            return answer\n                        \n                        a = str(i) + str(j) + str(j) + str(i) + str(i) + str(i) + str(i)\n                        answer.append(a)\n                        \n                        if len(answer) >= n:\n                            return answer\n                        \n                        a = str(i) + str(j) + str(j) + str(i) + str(i) + str(i) + str(i)\n                        answer.append(a)\n                        \n                        if len(answer) >= n:\n                            return answer\n                        \n                        a = str(i) + str(j) + str(j) + str(i) + str(i) + str(i) + str(i)\n                        answer.append(a)\n                        \n                        if len(answer) >= n:\n                            return answer\n                        \n                        a = str(i) + str(j) + str(j) + str(i) + str(i) + str(i) + str(i)\n                        answer.append(a)\n                        \n                        if len(answer) >= n:\n                            return answer\n                        \n                        a = str(i) + str(j) + str(j) + str(j) + str(j) + str(i)\n                        answer.append(a)\n                        \n                        if len(answer) >= n:\n                            return answer\n                        \n                        a = str(i) + str(j) + str(j) + str(j) + str(j) + str(j)\n                        answer.append(a)\n                        \n                        if len(answer) >= n:\n                            return answer\n                        \n                        a = str(i) + str(j) + str(j) + str(j) + str(j) + str(j)\n                        answer.append(a)\n                        \n                        if len(answer) >= n:\n                            return answer\n                        \n                        a = str(i)"
    },
    {
        "number": 4038,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"NO\"\n    s = list(map(str, stdin.split()))\n    s.sort(key=lambda x: int(x))\n    for i in range(len(s)):\n        if s[i] == s[i-1]:\n            s[i] = 0\n        else:\n            s[i] = 1\n    s = ''.join(map(str, s))\n    print(s)\n    return s\n\n\nsolution(\"1 2 2 1\")\nsolution(\"1 4 2 3 2 1 8 8\")\nsolution(\"1 9 2 3 8 9 4\")\nsolution(\"1 4 7 6 9 8 3 2 9\")\nsolution(\"1 8 9 8 3 5 1 3 7 3 9\")\nsolution(\"4 8 3 2 1 9 2\")\nsolution(\"4 1 2 1 8 8 9 1\")\nsolution(\"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 4038,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    l = n.split()\n    a = []\n    for i in l:\n        a.append(int(i))\n    x = []\n    for i in range(len(a)):\n        x.append(a[i])\n    x.sort()\n    print(x)\n    for i in range(n):\n        if x[i] == x[i+n-1]:\n            print(i+1)\n            print(i+1, end=' ')\n            break\n    return \"\"\n\n\n\n-----Time complexity-----\n\nN is the number of rows and the number of columns.\n\nTime complexity: O(n + n)\nSpace Complexity: O(n)\n\nNOTE: The space complexity depends on the number of numbers to be used.\n\nO(n)\n\nn is the number of rows and the number of columns\n\nn^2 is the number of numbers used for the n rows and n columns\n\nO(1)\n\nO(n^2)\n\nO(n)\n\nO(n)\n\nO(n)\n\n\n-----Time Complexity-----\n\nTime complexity: O(n^2)\nSpace Complexity: O(n^2)\n\nSince it's a multiplication, the space complexity is O(n^2)\n\nO(n^2)\n\nTime complexity: O(n)\nSpace Complexity: O(n)\n\n\n-----Algorithms-----\n\n4.1) Reverse the numbers in the array: O(n^2)\n\n4.2) Reverse the numbers: O(n)\n\n4.3) For n = 2, reverse the numbers in the array: O(n^2)\n\n4.4) For n = 3, reverse the numbers: O(n)\n\n4.5) For n = 4, reverse the numbers in the array: O(n^2)\n\n4.6) For n = 5, reverse the numbers: O(n^2)\n\n4.7) For n = 6, reverse the numbers: O(n^2)\n\n4.8) For n = 7, reverse the numbers: O(n^2)\n\n4.9) For n = 8, reverse the numbers: O(n^2)\n\n\n\n'''"
    },
    {
        "number": 4038,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    line = [int(i) for i in stdin.split()[1:]]\n    def is_palindrome(a, b):\n        return a*b == a+b\n    # x, y = line[0], line[1]\n    # while x < n:\n    #     x += 1\n    #     if not is_palindrome(x, y):\n    #         return \"NO\"\n    # return \"YES\"\n    \n    def solution(a, b):\n        n = len(line)\n        for i in range(n):\n            if not is_palindrome(a, b):\n                return \"NO\"\n            if i == n-1:\n                return \"YES\"\n            if is_palindrome(a+line[i], b+line[i+1]):\n                return \"YES\"\n            a, b = b, a+line[i+1]\n        return \"YES\"\n    return solution(a, b)\n"
    },
    {
        "number": 4038,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Solution 1 - Use stack\n    # Time - O(n)\n    # Space - O(n)\n    # Runtime: 76 ms (74.42%)\n    # Memory Usage: 20.2 MB (60.01%)\n    n = int(stdin.strip())\n    stack = []\n    for i in range(n):\n        cur = int(stdin.strip())\n        if not stack or stack[-1]!= cur:\n            stack.append(cur)\n        else:\n            stack.pop()\n            stack.append(cur)\n    if stack:\n        return \"NO\"\n    else:\n        return \"YES\"\n\n\n-----Advanced-----\n\nusing a stack, we can make the change to each number in the matrix one in a single operation.\n\nWe keep track of a copy of the stack with an index i.\nWe keep the current number in the stack as a reference.\nWe check if the current number is equal to the corresponding number in the stack.\nIf so, we decrement the index of the corresponding number.\n\nIt's not possible to get the correct result, because we need to check the current number, \nwhich is not already in the stack, and check whether it's in the stack.\n\nTime - O(n)\nSpace - O(1)\n\nRuntime: 92 ms (95.47%)\nMemory Usage: 13.5 MB (58.85%)\n\n\"\"\"\nclass Solution:\n    def is_palindrome(self, x):\n        if x < 0:\n            return False\n        return x % 10 == 0 and self.is_palindrome(x / 10)\n    \n    def check(self, x):\n        s = str(x)\n        return self.is_palindrome(s)\n        \n    def get_palin_matrix(self, n):\n        matrix = [[0] * n for _ in range(n)]\n        for i in range(n):\n            matrix[i][i] = 1\n        \n        for i in range(n // 2):\n            matrix[i][n - 1 - i] = 1\n            \n        for i in range(n - 1 - i):\n            matrix[i][i] = 1\n        \n        for i in range(n - 1 - i):\n            matrix[i][i] = -1\n            \n        for i in range(n - 2, -1, -1):\n            matrix[i][i] = -1\n        \n        return matrix\n    \n    def solve(self, n):\n        matrix = self.get_palin_matrix(n)\n        \n        for i in range(n):\n            if not self.check(i):\n                return \"NO\"\n            \n        if matrix[0][0] == 0:\n            return \"YES\"\n        \n        for i in range(n - 1):\n            if not self.check(i):\n                return \"NO\"\n            \n            for j in range(i + 1, n):\n                if not self.check(j):\n                    return \"NO\"\n                \n                if matrix[i][j]!= matrix[i + 1][j]:\n                    return \"NO\"\n        \n        return \"YES\"\n"
    },
    {
        "number": 4038,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    for i in range(n-1):\n        for j in range(m-1):\n            print(str(a[i+j]) + \" \" + str(a[i+m-1-j]-a[i+m-1+j]) + \" \" + str(a[i+m+j]-a[i+m-1-j]) + \" \" + str(a[i]+a[j]))\n    print(str(a[-1]) + \" \" + str(a[-1]-a[-2]) + \" \" + str(a[-1]-a[-3]))\n    return \"YES\"\n\"\"\"\n\ndef"
    },
    {
        "number": 4038,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    \n    matrix = [[0] * n for _ in range(n)]\n    \n    # Define a for-loop that creates the number of columns in a row\n    # while counting the number of rows in that column.\n    # The column count starts at 1 and the first number in a row is\n    # the number of rows.\n    for i in range(1, n):\n        for j in range(i, n):\n            matrix[i][j] = matrix[i - 1][j] + matrix[i][j - 1] + 1\n    \n    for i in range(n - 2, -1, -1):\n        for j in range(i + 1, n):\n            matrix[i][j] = matrix[i + 1][j] + matrix[i][j + 1] + 1\n            \n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] == n:\n                matrix[i][j] = 0\n                \n    for line in matrix:\n        print(line[0], end = \" \")\n        \n    return \"YES\" if matrix[0][0] == n else \"NO\"\n\n\nInput\n4\n10 3 5 3\n\nOutput\nYES\n1 5 3\n5 3 3\n1 3 5\n3 3 5\n1 5 3\n\nInput\n3\n1 4 2 2 2\n\nOutput\nNO\n\nInput\n1\n1\n\nOutput\nYES\n1\n\nInput\n10\n1 1 1 1 1 1 3 3 3 3\n\nOutput\nNO\n\"\"\"\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        n = int(stdin.strip())\n        \n        # Step 1: Define a for-loop that creates a matrix of $n$ rows and $n$ columns.\n        # Each number in a row is used exactly once, each cell contains exactly one number and the resulting matrix is palindromic.\n        # Step 2: Now iterate through the rows and columns.\n        matrix = [[0] * n for _ in range(n)]\n        for i in range(n):\n            for j in range(n):\n                if i == 0 and j == 0:\n                    matrix[i][j] = 1\n                    \n                elif i == 0 and j > 0:\n                    matrix[i][j] = matrix[i][j - 1] + matrix[i][j - 1] + 1\n                \n                elif i > 0 and j == 0:\n                    matrix[i][j] = matrix[i - 1][j] + matrix[i - 1][j - 1] + 1\n                \n                elif i > 0 and j > 0:\n                    matrix[i][j] = matrix[i - 1][j] + matrix[i - 1][j - 1] + matrix[i - 1][j - 1] + 1\n                \n                else:\n                    print(\"ERROR\")\n                    exit()\n        \n        for line in matrix:\n            print(line[0], end = \" \")\n            \n        return \"YES\" if matrix[n - 1][n - 1] == n else \"NO\"\n"
    },
    {
        "number": 4038,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def solve(n: int, a: list[int], m: int, b: list[int]) -> str:\n        if n == m:\n            return \"\".join(a)\n        \n        # check if a[m][n] is used more than once\n        # if it is used, then check whether it is part of a palindrome\n        # if not, then check the next number in the string\n        # if it is palindrome, then check whether it is part of a palindrome\n        \n        result = \"\"\n        for i in range(n, n + m):\n            # if number in a[m] is used more than once\n            # or not a palindrome, then put it\n            if a[m][i] or a[m][i] == b[m][i]:\n                result += a[m][i]\n            else:\n                result += \" \"\n                \n                # check whether number is part of a palindrome\n                # if it is, return result\n                result += solve(n + 1, a, m + 1, b)\n                \n        return result\n        \n    return solve(0, [], 0, [])\n\"\"\"\n\ndef"
    },
    {
        "number": 4039,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    if n < 0:\n        return 'NO'\n    elif n == 0:\n        return 'YES'\n    elif r >= n:\n        return 'NO'\n    elif n < r:\n        return 'YES'\n    else:\n        return 'NO'\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4039,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    a = []\n    b = []\n    for i in range(n):\n        a.append(int(stdin.split()[i].split(',')))\n    for i in range(n):\n        b.append(int(stdin.split()[i+1].split(',')))\n    b = sorted(b, reverse=True)\n    answer = ''\n    for i in range(n):\n        if (b[i] - a[i]) < r:\n            answer = 'NO'\n            break\n        else:\n            answer = 'YES'\n            if (b[i] - a[i]) >= r:\n                b[i] -= a[i]\n            else:\n                b[i] += a[i]\n    return answer\n    \n\ndef"
    },
    {
        "number": 4039,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, r = map(int, stdin.split())\n    \n    # Code here\n    i = n - 1\n    while i >= 0:\n        if r < 0:\n            break\n        elif r >= 0:\n            r -= stdin[i]\n            r = max(r, 0)\n        i -= 1\n    \n    if r > 0:\n        return 'NO'\n    else:\n        return 'YES'"
    },
    {
        "number": 4039,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, r, a = map(int, stdin.split())\n    if N > 100000:\n        return 'NO'\n    if N % 1000 == 0:\n        return 'YES'\n    l = [int(i) for i in range(N)]\n    order = []\n    for i in range(N):\n        order.append((l[i], i))\n    order = sorted(order, key=lambda x: x[0], reverse=True)\n    for i in range(N - 1):\n        if order[i][0] <= order[i + 1][0]:\n            return 'NO'\n    if r < a:\n        return 'YES'\n    else:\n        return 'NO'"
    },
    {
        "number": 4039,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    a = [int(i) for i in stdin.split()]\n    b = [int(i) for i in stdin.split()]\n    \n    result = ''\n    \n    # \uc5f4\uc1e0 \ub9c8\uc9c0\ub9c9\uc5d0\uc11c \uadf8\uce78\uc774 \uc774\uc5b4\uc9c8 \uacbd\uc6b0\ub9cc \uc870\uac74\uc5d0 \uc9c0\uc6d0\ud55c\ub2e4.\n    for i in range(1, n):\n        a[i] -= a[i-1]\n    \n    for i in range(1, n):\n        b[i] -= b[i-1]\n        \n    for i in range(n):\n        if a[i] <= r:\n            result += 'NO'\n        elif b[i] <= r:\n            result += 'YES'\n        else:\n            result += 'NO'\n            \n    return result\n\nInput\n3 4\n4 -2\n2 2\n1 3\n\nOutput\nNO\n\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4039,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # for i in range(int(stdin[0])):\n    #     ans, i = 0, 1\n    #     j = 1\n    #     while j < int(stdin[i+1]):\n    #         ans, i = ans + i * j, j\n    #         j += 1\n    #     print(ans)\n    # return ''\n    # for i in range(int(stdin[0])):\n    #     ans, i = 0, 1\n    #     j = 1\n    #     while j < int(stdin[i+1]):\n    #         ans, i = ans + i * j, j\n    #         j += 1\n    #     if ans > 0:\n    #         print(ans)\n\n    stdin = stdin.split(\",\")\n    stdin = list(map(int, stdin))\n\n    b = 0\n    a = int(stdin[0])\n    for i in range(1, int(stdin[0])):\n        if stdin[i] < a:\n            a = stdin[i]\n            b = i\n    \n    b -= 1\n    a = a + int(stdin[b])\n\n    if a <= 0:\n        return \"YES\"\n    if a >= 100000:\n        return \"NO\"\n\n    if b < a:\n        return \"YES\"\n    if b > a:\n        return \"NO\"\n    return \"YES\"\n\nfor _ in range(int(stdin[0])):\n    stdin = stdin.split(\",\")\n    stdin = list(map(int, stdin))\n\n    b = 0\n    a = int(stdin[0])\n    for i in range(1, int(stdin[0])):\n        if stdin[i] < a:\n            a = stdin[i]\n            b = i\n    \n    b -= 1\n    a = a + int(stdin[b])\n\n    if a <= 0:\n        continue\n\n    if a >= 100000:\n        continue\n\n    if b < a:\n        continue\n    if b > a:\n        continue\n    return \"YES\"\n\nfor _ in range(int(stdin[0])):\n    stdin = stdin.split(\",\")\n    stdin = list(map(int, stdin))\n\n    b = 0\n    a = int(stdin[0])\n    for i in range(1, int(stdin[0])):\n        if stdin[i] < a:\n            a = stdin[i]\n            b = i\n    \n    b -= 1\n    a = a + int(stdin[b])\n\n    if a <= 0:\n        continue\n\n    if a >= 100000:\n        continue\n\n    if b < a:\n        continue\n    if b > a:\n        continue\n    return \"YES\"\n"
    },
    {
        "number": 4039,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    a_lst = list(map(int, stdin.split()))\n    b_lst = []\n    for i in range(1, n+1):\n        b_lst.append(i)\n    b_lst.sort()\n    for i in range(n-1, -1, -1):\n        for j in range(i+1, n+1):\n            b_lst.sort(reverse=True)\n            if b_lst[j] - a_lst[i] == r:\n                return 'YES'\n            else:\n                return 'NO'\n\nprint(solution(\"4 2\"))\n\n-----Constraints-----\n\n0 <= n <= 1000\n0 <= r <= 1000\n\n-----Time Limit: 1.0 seconds per test case (py3)\n\nTime Limit: 0.2 seconds\n\n-----Divide and Conquer\n\n\"\"\")"
    },
    {
        "number": 4039,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    P = [int(i) for i in stdin.split()]\n    r = P[-1]\n    b = P[-2]\n    a = P[-3]\n    \n    if (a < r) or (r < b) or (b < a) or (r < 0):\n        return \"NO\"\n    elif a == b and r == b:\n        return \"YES\"\n    else:\n        return \"YES\"\n        \n"
    },
    {
        "number": 4039,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    for i in range(n):\n        for a in range(i + 1, n):\n            for b in range(a, n):\n                if r + (a - i) + (b - i) > r:\n                    return \"YES\"\n    return \"NO\""
    },
    {
        "number": 4039,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    if n <= 0 or a <= 0 or b <= 0:\n        return \"NO\"\n    elif n == 1 and a == b:\n        return \"YES\"\n    else:\n        return solution(stdin + \" 0\")\n\n\"\"\"\n"
    },
    {
        "number": 4040,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    width, platform = map(int, stdin.split())\n    directions = []\n    for i in range(width):\n        directions.append(stdin[i])\n    for i in range(1, width + 1):\n        temp = []\n        for j in range(platform + 1):\n            if j >= i:\n                temp.append(j)\n            else:\n                temp.append(0)\n        directions.append(temp)\n    for i in range(platform):\n        directions[i + 1][i] = i + 1\n    for i in range(platform):\n        directions[i + 1][i + 1] = 1\n    for i in range(1, width + 1):\n        for j in range(width):\n            if directions[j][i]!= 0:\n                temp = directions[j][i] - 1\n                while temp >= width:\n                    directions[j][temp] = 0\n                    temp = temp - width\n    for i in range(width):\n        for j in range(width):\n            if directions[j][i]!= 0:\n                temp = directions[j][i] - 1\n                while temp >= width:\n                    directions[j][temp] = 0\n                    temp = temp - width\n    answer = ''\n    for i in range(width):\n        answer += directions[i][width]\n        for j in range(width):\n            if directions[i][j] == 0:\n                answer += '0'\n            elif directions[i][j] == 1:\n                answer += '1'\n            elif directions[i][j] == 2:\n                answer += '2'\n            elif directions[i][j] == 3:\n                answer += '3'\n            elif directions[i][j] == 4:\n                answer += '4'\n            elif directions[i][j] == 5:\n                answer += '5'\n            elif directions[i][j] == 6:\n                answer += '6'\n            elif directions[i][j] == 7:\n                answer += '7'\n            elif directions[i][j] == 8:\n                answer += '8'\n            elif directions[i][j] == 9:\n                answer += '9'\n    return answer\n\ndef"
    },
    {
        "number": 4040,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def jump(j, v):\n        nonlocal c\n        return max(c[v] - j, 0)\n\n    n, m, d = map(int, stdin.split())\n    c = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n\n    c.sort(reverse=True)\n    a.sort()\n\n    ans = 0\n    j = 0\n    while j < n:\n        v = a[j]\n        if v + d > m:\n            ans += jump(d, v)\n            j += 1\n        else:\n            ans += jump(d, v + 1)\n            j += jump(d, v)\n\n    return str(ans)\n\n\nfrom collections import defaultdict\ndef"
    },
    {
        "number": 4040,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    N = int(stdin.strip().split(' ')[0])\n    C = [int(s) for s in stdin.split(' ') if s.strip()!= '']\n    \n    solution = ''\n    \n    def jump(i, d):\n        nonlocal solution\n        if i >= N:\n            if not solution:\n                return\n            if len(solution) < i + 2:\n                solution += '0'\n            if d == 0:\n                solution += '0'\n            else:\n                solution += '0'\n            solution += '1'\n        else:\n            jump(i + 1, d)\n            jump(i + 2, d)\n            solution += '0'\n            jump(i + 1, d)\n            solution += '0'\n            jump(i + 2, d)\n            solution += '0'\n    jump(0, 0)\n    return solution"
    },
    {
        "number": 4040,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n,m,d = map(int,stdin.split())\n    c_i = []\n    for i in range(1,m+1):\n        c_i.append(i)\n    a = [1]\n    b = [2, 0, 0, 0]\n    c = [1]\n    d = [0, 0, 0, 0]\n    \n    for i in range(n):\n        j = 0\n        while j < len(a):\n            if c_i[j] + d[i] < n:\n                c_i[j] += d[i]\n                d[i] = c_i[j]\n            else:\n                break\n            j+=1\n        if a[j]!= 1:\n            b[i] = a[j]\n        else:\n            b[i] = 0\n        a.append(b[i])\n    a.sort()\n    for i in range(1,m):\n        b[i] = a[i]\n    \n    c_i.append(d[n-1])\n    a.append(c_i)\n    a.sort()\n    for i in range(1,m):\n        b[i] = a[i]\n    \n    if a[-1] == n:\n        a[-1] = 0\n    else:\n        a[-1] = d[n-1]\n    \n    a.sort()\n    a.reverse()\n    for i in range(1,m):\n        b[i] = a[i]\n    \n    for i in range(1,m-1):\n        c[i] = b[i]\n    c[0] = 0\n    \n    answer = ''\n    for i in range(1,m):\n        if c[i] == 0:\n            answer += '0'\n        else:\n            answer += '1'\n            \n    return answer\n\ndef"
    },
    {
        "number": 4040,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def make_jumps(i,j,k):\n        if j==k:\n            return 0\n        \n        return make_jumps(i,j+1,k) + make_jumps(i,j,k+1)\n    \n    N = int(stdin)\n    jump = make_jumps(1,1,N)\n    \n    if jump > N:\n        return \"NO\"\n    \n    return f\"YES {jump}\"\n\n'''\nclass Solution:\n    def jump(self, arr: List[int]) -> int:\n        if len(arr) == 0:\n            return 0\n        \n        if arr[0] + arr[-1] >= len(arr):\n            return 0\n        \n        count = 0\n        for i in range(1,len(arr)-1):\n            if arr[i] + arr[i-1] >= len(arr):\n                count = max(count, i)\n        \n        return count + 1"
    },
    {
        "number": 4040,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, m, d = map(int, stdin.split())\n    a = [0] * (n + 1)\n    b = [0] * (n + 1)\n    a[0], a[n + 1] = 1, 1\n    b[0], b[n + 1] = 1, 1\n    c = [0] * (n + 1)\n    a[0], a[1], a[2], a[3], a[4] = 0, 1, 1, 1, 0\n    b[0], b[1], b[2], b[3], b[4] = 0, 1, 0, 0, 0\n    c[0], c[1], c[2], c[3], c[4] = 0, 0, 0, 0, 0\n    if d > n:\n        return \"NO\"\n    for i in range(n):\n        if c[i] == 0:\n            c[i + 1] = m - 1\n        else:\n            c[i + 1] = c[i] + 1\n    for i in range(n - 1, -1, -1):\n        if a[i] == 0:\n            a[i - 1] = 0\n        else:\n            a[i - 1] = 1\n        if b[i] == 0:\n            b[i + 1] = 0\n        else:\n            b[i + 1] = 1\n    for i in range(m):\n        if c[i] == 0:\n            c[i + 1] = 0\n        else:\n            c[i + 1] = m - 1\n        if a[i + 1] == 0:\n            a[i - 1] = 0\n        else:\n            a[i - 1] = 1\n    for i in range(m - 1, -1, -1):\n        if a[i] == 0:\n            a[i - 1] = 0\n        else:\n            a[i - 1] = 1\n        if b[i] == 0:\n            b[i + 1] = 0\n        else:\n            b[i + 1] = 1\n    for i in range(n):\n        if a[i] == 0:\n            a[i] = 1\n        else:\n            a[i] = 0\n        if b[i] == 0:\n            b[i] = 1\n        else:\n            b[i] = 0\n    for i in range(d):\n        if a[i] == 0:\n            a[i] = 0\n        else:\n            a[i] = 1\n        if b[i] == 0:\n            b[i] = 0\n        else:\n            b[i] = 1\n    for i in range(n - d + 1):\n        if b[i] == 0:\n            b[i] = 0\n        else:\n            b[i] = 1\n    b[0] = 0\n    for i in range(1, n + 1):\n        if b[i] == 0:\n            b[i] = 0\n        else:\n            b[i] = 1\n    for i in range(1, n + 1):\n        if c[i] == 0:\n            c[i] = 0\n        else:\n            c[i] = 1\n    for i in range(1, n + 1):\n        if a[i] == 0:\n            a[i] = 0\n        else:\n            a[i] = 1\n    for i in range(n - d + 1):\n        if a[i] == 0:\n            a[i] = 0\n        else:\n            a[i] = 1\n    for i in range(n - d + 1, n + 1):\n        if a[i] == 0:\n            a[i] = 0\n        else:\n            a[i] = 1\n    for i in range(n - d + 1, n + 1):\n        if b"
    },
    {
        "number": 4040,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = map(int, stdin.split())\n    pos = 0\n    step = 1\n    while True:\n        if pos+step < n:\n            pos += step\n            step = 1\n            continue\n        if pos == n+1:\n            return 'NO'\n        pos += step\n        step = 1\n        a = [1, 2, 0, 1]\n        for i in range(m):\n            if pos+i+d+step < n+1:\n                a[i] += step\n                pos += step\n                step += 1\n                continue\n            step += 1\n        a[-1] += step\n        pos += step\n    return 'YES'\n\nn, m, d = map(int, input().split())\na = [1, 2, 0, 1]\nprint(solution(input()))"
    },
    {
        "number": 4040,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    jumps = []\n    for _ in range(int(stdin.strip())):\n        jump = list(map(int, stdin.split()))\n        if len(jump) >= 3:\n            jumps.append(jump)\n    return ''.join(map(str, jumps))\n\n\"\"\"\n\nfrom sys import stdin\n\ndef"
    },
    {
        "number": 4040,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip().replace(\"\\n\", \"\"))\n    c = list(map(int, stdin.strip().split(\" \")))\n    a = []\n    for i in range(n):\n        if i % 2:\n            a.append(c[i + 1])\n        else:\n            a.append(c[i])\n    for i in range(1, n+1):\n        if c[i] < c[i-1]:\n            a.append(c[i])\n        elif c[i] == c[i-1] and i % 2:\n            a.append(c[i])\n    return \"\".join(map(str, a))\n"
    },
    {
        "number": 4040,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n        a = list(map(int, stdin.split()))\n        b = [a.index(0) for a in a]\n        print(''.join(str(b[a.index(0):a.index(1)]) if a.index(0) < a.index(1) else ''.join(str(b[a.index(0):a.index(2)]) if a.index(0) < a.index(2) else ''.join(str(b[a.index(0):a.index(3)]) if a.index(0) < a.index(3) else ''.join(str(b[a.index(0):a.index(4)]) if a.index(0) < a.index(4) else ''.join(str(b[a.index(0):a.index(5)]) if a.index(0) < a.index(5) else ''.join(str(b[a.index(0):a.index(6)]) if a.index(0) < a.index(6) else ''.join(str(b[a.index(0):a.index(7)]) if a.index(0) < a.index(7) else ''.join(str(b[a.index(0):a.index(8)]) if a.index(0) < a.index(8) else ''.join(str(b[a.index(0):a.index(9)]) if a.index(0) < a.index(9) else ''.join(str(b[a.index(0):a.index(10)]) if a.index(0) < a.index(10) else ''.join(str(b[a.index(0):a.index(11)]) if a.index(0) < a.index(11) else ''.join(str(b[a.index(0):a.index(12)]) if a.index(0) < a.index(12) else ''.join(str(b[a.index(0):a.index(13)]) if a.index(0) < a.index(13) else ''.join(str(b[a.index(0):a.index(14)]) if a.index(0) < a.index(14) else ''.join(str(b[a.index(0):a.index(15)]) if a.index(0) < a.index(15) else ''.join(str(b[a.index(0):a.index(16)]) if a.index(0) < a.index(16) else ''.join(str(b[a.index(0):a.index(17)]) if a.index(0) < a.index(17) else ''.join(str(b[a.index(0):a.index(18)]) if a.index(0) < a.index(18) else ''.join(str(b[a.index(0):a.index(19)]) if a.index(0) < a.index(19) else ''.join(str(b[a.index(0):a.index(20)]) if a.index(0) < a.index(20) else ''.join(str(b[a.index(0):a.index(21)]) if a.index(0) < a.index(21) else ''.join(str(b[a.index(0):a.index(22)]) if a.index(0) < a.index(22) else ''.join(str(b[a.index(0):a.index(23)]) if a.index(0) < a.index(23) else ''.join(str(b[a.index(0):a.index(24)]) if a.index(0) < a.index(24) else ''.join(str(b[a.index(0):a.index(25)]) if a.index(0) < a"
    },
    {
        "number": 4041,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    print(len(s) - len(t))\n    return s"
    },
    {
        "number": 4041,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    s = s.split(' ')\n    t = t.split(' ')\n    diff = len(s) - len(t)\n    # diff = len(s) - len(t) - 1\n    l = 0\n    r = 0\n    for i in range(len(s)):\n        if diff == 0:\n            break\n        for j in range(diff):\n            if s[l]!= t[j]:\n                l += 1\n                break\n        else:\n            r += 1\n            diff = 0\n    return l + r\n\n---another way to solve it\ndef"
    },
    {
        "number": 4041,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def is_a_subsequence(sub_str: str, s_str: str):\n        l = 0\n        r = len(sub_str) - 1\n        while l < r:\n            if s_str[l]!= sub_str[r]:\n                return False\n            l += 1\n            r -= 1\n        return True\n    \n    def remove_substring_from_string(sub_str: str, s_str: str):\n        l = 0\n        r = len(sub_str) - 1\n        while l < r:\n            if s_str[l]!= sub_str[r]:\n                s_str = s_str[:l] + s_str[l + 1:]\n                l += 1\n                r -= 1\n            else:\n                l += 1\n                r -= 1\n        return s_str\n    \n    def is_subsequence(sub_str: str, s_str: str):\n        s_str = remove_substring_from_string(sub_str, s_str)\n        if s_str == '':\n            return True\n        if is_a_subsequence(sub_str, s_str):\n            return True\n        return False\n    \n    def get_max_substring_length(s_str: str):\n        s_str = remove_substring_from_string(s_str, s_str)\n        return get_max_substring_length_recursive(s_str, 0, 0, 0, 0)\n    \n    max_length = 0\n    for l in range(len(stdin)):\n        for r in range(len(stdin), l, -1):\n            if is_subsequence(stdin[l:r], stdin):\n                max_length = max(max_length, r - l)\n    return max_length\n\ndef"
    },
    {
        "number": 4041,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = stdin.rstrip()\n    \n    count = {}\n    \n    if 'a' in n:\n        count['a'] = 1\n        n = n.replace('a', '')\n    \n    if 'b' in n:\n        count['b'] = 2\n        n = n.replace('b', '')\n    \n    if 'c' in n:\n        count['c'] = 3\n        n = n.replace('c', '')\n    \n    if 'd' in n:\n        count['d'] = 4\n        n = n.replace('d', '')\n    \n    if 'e' in n:\n        count['e'] = 5\n        n = n.replace('e', '')\n    \n    if 'f' in n:\n        count['f'] = 6\n        n = n.replace('f', '')\n    \n    count = sorted(count.values(), reverse=True)\n    \n    return str(len(n) - (count[0] - 1) - count[-1])\n"
    },
    {
        "number": 4041,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    max_len = 0\n    for c in stdin:\n        if c not in 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ':\n            max_len += len(c)\n        else:\n            max_len = max(len(c), max_len)\n    return max_len\n\n\n-----Examples-----\nInput\na\nb\n\nOutput\n4\n\nInput\na\nb\n\nOutput\n2\n\nInput\na\nb\n\nOutput\n0\n\nInput\nabcde\nabcde\n\nOutput\n1\n\nInput\na\nb\n\nOutput\n1\n\nInput\na\nb\n\nOutput\n0\n'''\n\ndef"
    },
    {
        "number": 4041,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # s = stdin.split()\n    # s.sort()\n    # s.sort(key=len)\n    # return ''.join(s)\n    \n    \n    s = list(input())\n    t = list(input())\n    \n    while len(s) > 0:\n        s.pop(0)\n        t.pop(0)\n    s = sorted(s)\n    t = sorted(t)\n    \n    l = len(s)\n    r = len(t)\n    \n    count = 0\n    \n    while r - l > 0:\n        if s[l-1] == t[r-1]:\n            if l == 0:\n                count += l\n                break\n            else:\n                l -= 1\n        elif s[l-1]!= t[r-1]:\n            break\n    \n    return count\n"
    },
    {
        "number": 4041,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    max_len = 0\n    for line in stdin:\n        l, r, s = line.split()\n        l_len = len(l)\n        r_len = len(r)\n        if r_len >= l_len:\n            l_len -= r_len\n            if l_len > max_len:\n                max_len = l_len\n        elif r_len >= l_len:\n            r_len -= l_len\n            if r_len > max_len:\n                max_len = r_len\n    return str(max_len)\n"
    },
    {
        "number": 4041,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip().split(' ')\n    t = stdin.strip().split(' ')\n    if len(s)!= len(t):\n        return -1\n    len_s = len(s)\n    len_t = len(t)\n    result = 0\n    s.reverse()\n    for i in range(len_s):\n        if len_t >= len(s) - i:\n            result = max(result, len_t - len_s + i)\n    return result\n"
    },
    {
        "number": 4041,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip().lower()\n    t = stdin.strip().lower()\n    if len(s) == 0 or len(t) == 0:\n        return 0\n    ans = 0\n    for i in range(len(s)):\n        if s[i]!= t[i]:\n            ans = max(ans, len(s[i:]))\n    return ans\n"
    },
    {
        "number": 4041,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    l, r = max(len(s), len(t)), min(len(s), len(t))\n    m = l + r\n    s = ''.join(sorted(s))\n    t = ''.join(sorted(t))\n    f = m\n    def is_right(s, t):\n        return len(s) == len(t)\n    def remove_sub(s, t):\n        if len(t) <= len(s):\n            return\n        s = ''.join(sorted(s))\n        t = ''.join(sorted(t))\n        def check(s, t):\n            if is_right(s, t):\n                return s[:f] + t[f:]\n            return s[:f] + t[:-f] + t[f+1:]\n        return ''.join(check(s, t))\n    def remove(s, t):\n        result = ''\n        while True:\n            removed = remove_sub(s, t)\n            if removed == t:\n                return len(removed)\n            if removed:\n                result += removed\n            else:\n                break\n        return result\n    return max(remove(s, t), remove(t, s))\n    \n        \n    \n        \n"
    },
    {
        "number": 4042,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a,b,c = map(int,stdin.split())\n    a = a*2 + c\n    b = b*2 + c\n    a = str(a)\n    b = str(b)\n    answer = a+' '+b\n    return answer\n\n\n-----Constraints-----\n1 <= stdin.length <= 100\n1 <= x <= 5*10^6\n\n\n-----Time complexity-----\nO(n*2)\n\n\n-----Space complexity-----\nO(n)\n\n\n-----Constraints(Python Problem)-----\nThe constraints are a,b,c, where a,b,c are numbers from 0 to 10\n\n------Algorithm-----\n1. Find the first number which is larger than b\n2. If the number b is odd, divide it by 2\n3. If b is even, divide it by 2.\n4. if the answer is odd, it should divide the first number by 2.\n5. if the answer is even, it should divide the first number by 2.\n6. if the answer is even, it should divide the first number by 2 and then find the second number.\n7. If the answer is even, it should divide the first number by 2 and then find the second number.\n8. If the answer is odd, it should divide the first number by 2 and then find the second number.\n9. If the answer is even, it should divide the first number by 2 and then find the second number.\n10. If the answer is even, it should divide the first number by 2 and then find the second number.\n10. if the answer is odd, it should divide the first number by 2 and then find the second number.\n\n------Time complexity-----\nO(2)\nO(2)\n\n\n-----Space complexity-----\nO(n)\n"
    },
    {
        "number": 4042,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    for std_line in stdin:\n        x = int(std_line)\n        if x < 0:\n            x = x * (-1)\n        elif x == 0:\n            continue\n        else:\n            y = 10 * x + 3\n            print(y)\n            return '{:d} {}'.format(y, x)\n        \n    \nOutput\n10 3\n\n\n------Code-------\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        for std_line in stdin:\n            x = int(std_line)\n            if x < 0:\n                x = x * (-1)\n            elif x == 0:\n                continue\n            else:\n                y = 10 * x + 3\n                print(y)\n                return '{:d} {}'.format(y, x)\n\n        \n        \n        \n        \n        "
    },
    {
        "number": 4042,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(1, int(stdin) + 1):\n        for j in range(i, int(stdin) + 1):\n            print(j, i)\n"
    },
    {
        "number": 4042,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def get_num(num):\n        return num // 10**(len(str(num))-2)\n    \n    def get_decimal(num):\n        if (num >= 10**len(str(num))):\n            num = get_num(num)\n        return num\n    \n    for line in stdin:\n        for num in line.split():\n            num = get_decimal(int(num))\n            if (num > 5):\n                print(num)\n                break\n    return 'No solution'\n\"\"\"\n\nimport math\n\ndef"
    },
    {
        "number": 4042,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 4 or n > 10:\n        return \"ERROR\"\n    a = n // 10\n    b = (n % 10) // 5\n    return str(a) + \" \" + str(b)\n\n\n\n-----Constraints-----\n0 < x < 5\n\n0 < x < 5\n\n0 < x < 10\n\n0 <= x < 10\n\n-----Time complexity-----\nO(n)\n\nO(n)\n\nO(n)\n\n-----Space complexity-----\nO(1)\n\n\"\"\""
    },
    {
        "number": 4042,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin) + int(stdin) - int(stdin) + 1)\n"
    },
    {
        "number": 4042,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    answer, count = [], 0\n    for i in range(1, int(stdin) + 1):\n        if i > 1:\n            answer.append(str(i))\n        count = len(set(answer))\n    return count\n"
    },
    {
        "number": 4042,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    answer = ''\n    s=list(map(float,stdin.split()))\n    return '{:.2f} {}'.format(s[0],s[1])\n"
    },
    {
        "number": 4042,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    res = ''\n    while x >= 0:\n        res += str(x % 10)\n        x = x // 10\n    return res[::-1]\n"
    },
    {
        "number": 4042,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    if x > y:\n        x, y = y, x\n    \n    return str(x * y)\n"
    },
    {
        "number": 4043,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # TODO: your code goes here\n    num = int(stdin[1])\n    edge_count = 0\n    edge_num = 0\n    for i in range(num):\n        v, v_str, w, w_str = map(int, stdin[i + 2].split())\n        edge_count += w_str * w\n        edge_num += w\n    if edge_count == 0:\n        return 'YES'\n    if edge_count > edge_num:\n        return 'NO'\n    return 'YES'\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4043,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n        #find the length of the tree\n        d=list(map(int,stdin.split(' ')))\n        \n        #find the number of edges of the tree\n        k=int(stdin.split(' ')[-1])\n        \n        #create a dictionary to store the vertices and their indexes\n        vertices={}\n        \n        #add each vertex to the dictionary\n        for i in range(len(d)):\n            vertices[d[i]]=i\n        \n        #create a edges dictionary\n        edges={}\n        \n        #connect the vertices with the edges and store them in the edges dictionary\n        for i in range(k):\n            edges[d[i+1]]=(d[i],d[i+1])\n            \n        #print the tree with the vertices\n        for i in range(1,len(d)):\n            print(d[i],vertices[d[i]])\n            \n        #print the edges\n        for i in edges:\n            print(edges[i])\n            \n        #print the vertices connected by the edges\n        print(' '.join(vertices[d[i]] for i in edges))\n        \n        #print the edges connected by the vertices\n        print(' '.join(vertices[d[i]] for i in edges if edges[d[i]] in vertices))\n        \n        #print the vertices connected by the edges in any order\n        print(' '.join(vertices[d[i]] for i in edges if edges[d[i]] in vertices))\n        \n        #print the vertices connected by the edges in any order\n        print(' '.join(vertices[d[i]] for i in edges if edges[d[i]] in vertices))\n        \n        return 'YES'"
    },
    {
        "number": 4043,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n,d,k=map(int,stdin.split())\n    tree=[]\n    for i in range(n):\n        tree.append(list(map(int,stdin.split())))\n    tree=tree[:-1]\n    print(tree)\n    tree_dfs(tree,d,k)\n    return 'YES' if len(tree)==1 else 'NO'\n\n\n\ndef"
    },
    {
        "number": 4043,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = map(int, stdin.split())\n    return solution(n, d, k)\n"
    },
    {
        "number": 4043,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = map(int, stdin.split())\n    visited = [0 for _ in range(n + 1)]\n    tree = [[] for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        tree[i].append(i)\n        visited[i] = 1\n    for _ in range(k):\n        u, v = map(int, stdin.split())\n        tree[u].append(v)\n        tree[v].append(u)\n        visited[u] = 1\n        visited[v] = 1\n    def dfs(v):\n        visited[v] = 1\n        for u in tree[v]:\n            if visited[u] == 0:\n                dfs(u)\n    for i in range(1, n + 1):\n        if visited[i] == 0:\n            dfs(i)\n    for i in range(1, n + 1):\n        if len(tree[i]) > 0 and visited[tree[i][-1]] == 0:\n            print(i)\n            return\n    return \"NO\""
    },
    {
        "number": 4043,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = map(int, stdin.split())\n    if n - 1 < d * k < n:\n        print('NO')\n        return\n    if d * k < n - 1 < (n - d):\n        print('NO')\n        return\n    if k > n - d:\n        print('NO')\n        return\n    edges = list()\n    vertices = list()\n    for i in range(n - 1, n - d, -1):\n        edges.append(list(map(int, stdin.split())))\n        vertices.extend(edges[i])\n    print(vertices)\n    print(edges)\n    tree = [[] for i in range(n)]\n    for a, b in edges:\n        tree[a - 1].append(b - 1)\n    print(tree)\n    tree_parent = [0 for i in range(n)]\n    tree_parent[0] = 0\n    for i in range(n):\n        tree_parent[i] = tree_parent[tree[i][0]] + 1\n    print(tree_parent)\n    for i in range(n):\n        if tree_parent[i] > k:\n            print('NO')\n            return\n        tree[i].sort()\n    print(tree)\n    print('YES')\n    return\n\ndef"
    },
    {
        "number": 4043,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = map(int, stdin.split())\n    graph = [[] for _ in range(n + 1)]\n    for _ in range(d):\n        u, v = map(int, stdin.split())\n        graph[u].append(v)\n        graph[v].append(u)\n    answer = 'NO'\n    for i in range(1, n + 1):\n        ans = []\n        for j in range(i, n + 1):\n            if j not in graph[i]:\n                ans.append(j)\n        answer = 'YES' if len(ans) == d else answer\n        for j in ans:\n            graph[j].sort()\n    return answer\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4043,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    d = int(stdin[1])\n    k = int(stdin[2])\n    if n <= 0 or d <= 0 or k <= 0:\n        return \"NO\"\n    \n    graph = [[] for i in range(n)]\n    for i in range(k):\n        row = input()\n        for j in range(n):\n            if row == \"D\":\n                graph[j].append(j+1)\n            elif row == \"E\":\n                graph[j].append(j+1)\n                graph[j].append(j+1)\n    \n    answer = \"\"\n    def dfs(u, parent):\n        if u == parent:\n            return \n        answer += str(u) + \" \"\n        for i in graph[u]:\n            dfs(i, u)\n        return answer\n    \n    answer = dfs(1, 0)\n    answer = dfs(0, 1)\n    answer = answer[:-1]\n    answer += \" \" + str(n - 1)\n    return answer"
    },
    {
        "number": 4043,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, d, k = map(int, stdin.split())\n    \n    tree = [[] for _ in range(n+1)]\n    \n    for i in range(d):\n        a, b = map(int, stdin.split())\n        tree[a].append(b)\n        tree[b].append(a)\n    \n    def dfs(tree, parent, k):\n        nonlocal d, n, k\n        if len(tree[k]) == 0:\n            return\n        for i in tree[k]:\n            if not parent[i]:\n                parent[i] = k\n                dfs(tree, i, k)\n    \n    dfs(tree, [], k)\n    \n    for i in tree:\n        if len(i) > 1:\n            return \"NO\"\n        \n    return \"YES\""
    },
    {
        "number": 4043,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin[0])\n    d = int(stdin[1])\n    k = int(stdin[2])\n    \n    trees = []\n    \n    for i in range(n):\n        tree = {}\n        for j in range(i+1, n+1):\n            tree[j] = int(stdin[j])\n        trees.append(tree)\n    \n    if d >= k:\n        if d < 2*k:\n            print('YES')\n        else:\n            print('NO')\n    else:\n        print('NO')\n    \n    for i in trees:\n        edges = []\n        for j in range(len(trees)):\n            if i[j] > 0:\n                for z in range(i[j]-1, len(trees), d):\n                    edges.append((z, z+1))\n        print(edges)\n        \n    for tree in trees:\n        for i in tree:\n            if tree[i] > 0:\n                print('NO')\n                break\n        else:\n            print('YES')\n"
    },
    {
        "number": 4044,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n        \n    n = int(stdin.strip())\n    s = str(n)\n    for i in range(1, len(s)):\n        if s[i] == '0' and s[i-1] == '1' and s[i-2] == '0':\n            s = s[:i-1] + '0' + s[i:]\n        if s[i] == '1' and s[i-1] == '0' and s[i-2] == '1':\n            s = s[:i-1] + '1' + s[i:]\n    return s"
    },
    {
        "number": 4044,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    count = 0\n    while a > b:\n        a = a - b\n        b = b * 2\n        count += 1\n    \n    if x - b > a:\n        x = x - b\n    \n    while x > 0:\n        if x % 2 == 0:\n            x = x / 2\n        else:\n            x = (x / 2) - 1\n        count += 1\n    \n    print(count)\n    return ''\n\nprint(solution(\"2 3 1\"))"
    },
    {
        "number": 4044,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, x = map(int, stdin.split())\n    a -= 1\n    b -= 1\n    if a >= n or b >= n:\n        return \"\"\n    return ''.join('1' if a == 0 else '0' for _ in range(x + 1))"
    },
    {
        "number": 4044,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    for _ in range(int(stdin)):\n        a, b = map(int, stdin.split())\n        s = bin(a | b)[2:][::-1]\n        print(s)\n"
    },
    {
        "number": 4044,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    arr = [0, 0, 0, 0, 0, 0, 0]\n    for _ in range(n):\n        a, b, x = map(int, stdin.strip().split())\n        arr[x-1] = 1\n    \n    print(''.join(map(str, arr)))\n    return ''\n\nSolution\n\ndef"
    },
    {
        "number": 4044,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = n - 1\n    b = n\n    x = int(stdin.strip())\n    i = 0\n    s = ''\n    while i < b:\n        if a % 2 == 0:\n            s += str(1)\n            a -= 1\n        else:\n            s += str(0)\n            a -= 1\n        i += 1\n    i = 0\n    while i < x:\n        s += str(0)\n        i += 1\n    s += str(1)\n    s += str(a)\n    s += str(b)\n    return s\n\n-----Attempts-----\ndef"
    },
    {
        "number": 4044,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    if 0<=a<=10 and 0<=b<=10 and 0<=x<=10:\n        print(\"\".join(map(str, range(a,a+b+x))).replace('11','00'))\n    else:\n        print(\"error\")\n    return \"\"\n\n\n\nn = int(input())\ns = input()\n\nsolution(s)"
    },
    {
        "number": 4044,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Accepted\n    stdin = [i for i in stdin.split()]\n    a, b, x = map(int, stdin[0].split(' '))\n    n = a + b\n    l = [0] * (n + 1)\n    for i in range(1, n + 1):\n        l[i] = x - i\n    l.reverse()\n    s = ''\n    for i in range(a, a + b):\n        if l[i] == 1:\n            s += '1'\n        else:\n            s += '0'\n    return s[::-1]"
    },
    {
        "number": 4044,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a, b, x = map(int, stdin.strip().split())\n    s = \"101\" + \"101\" * a + \"00\" * b + \"011\" * x\n    print(s)\n    return s\n\n\"\"\""
    },
    {
        "number": 4044,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Use a Map\n    # Add your own answer to the map\n    pass\n"
    },
    {
        "number": 4045,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, t, s = map(int, stdin.split())\n\n    res = ''\n    for i in range(n):\n        res += s[i]\n        res += t[i]\n\n    if a in s and b in s and t in s:\n        return res\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 4045,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n < 3:\n        return 'NO'\n    s = stdin.strip()\n    t = stdin.strip()\n    for i in range(1,n+1):\n        if s[i-1]!= t[i-1]:\n            return 'NO'\n    return 'YES'\n\ndef"
    },
    {
        "number": 4045,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Time\n    n = int(stdin.strip())\n    # Space\n    s = list(stdin.strip())\n\n    # Count substrings\n    substrings = {}\n    for i in range(n):\n        substring = s[i]\n        if substring in substrings:\n            substrings[substring] += 1\n        else:\n            substrings[substring] = 1\n\n    # Print result\n    res = \"\"\n    for substring, count in substrings.items():\n        if count == 1:\n            res += substring\n\n    return res\n"
    },
    {
        "number": 4045,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n    ans = \"\"\n    # print(\"-1-1\", \"1\", \"1\", \"1\")\n    s, t = stdin.split()\n    n = len(s)\n    \n    if n == 1:\n        print(ans + t + t)\n        return ans\n    \n    if n == 2:\n        print(ans + t + t)\n        return ans\n    \n    if n == 3:\n        print(ans + t + t)\n        return ans\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            # print(\"i\", i, \"j\", j)\n            # print(\"s\", s[i], \"t\", t)\n            # print(\"s[i] in s[j]\", s[i] in s[j])\n            if s[i] in s[j] and t[j-i] in s[j]:\n                ans += s[i]\n                \n    # print(ans)\n    return ans"
    },
    {
        "number": 4045,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    s = [stdin[i] for i in range(n)]\n    t = [stdin[i] for i in range(n, 2*n)]\n    res = \"\"\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            if s[i] == s[j]:\n                if t[i] == t[j]:\n                    res += s[i]\n                else:\n                    res += t[i]\n            else:\n                break\n    if res == \"NO\":\n        return \"NO\"\n    else:\n        return res\n"
    },
    {
        "number": 4045,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin)\n    s = stdin[:n]\n    t = stdin[n:]\n    \n    if len(s)!= len(t) or len(s)!= len(t) or set(s)!= set(t):\n        return \"NO\"\n    \n    def is_substring(s: str, t: str) -> bool:\n        for i in range(len(s)):\n            if s[i]!= t[i]:\n                return False\n        \n        return True\n    \n    answer = []\n    \n    for i in range(len(s)):\n        if not is_substring(s[i], t):\n            answer.append(s[i])\n        \n    return \"\".join(answer)\n"
    },
    {
        "number": 4045,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.split()\n    t = stdin.split()\n    res = ''\n    for i in range(n):\n        for j in range(i,n):\n            if s[i]!= t[j] or s[j] == t[i]:\n                break\n        else:\n            res += s[i] + s[i] +''\n    print(res[:-1])\n    return res[:-1]\n    \n"
    },
    {
        "number": 4045,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    string, t = stdin.split('\\n')\n    string = string.replace('\\n','')\n    t = t.replace('\\n','')\n    answer = ''\n    # print(string)\n    # print(t)\n    for i in range(0, len(string), 3):\n        a = string[i:i+3]\n        b = t[i:i+3]\n        # print(a, b)\n        if a == b:\n            answer += a\n            # print('yes')\n        else:\n            answer += solution(string, t)\n            # print('no')\n    return answer"
    },
    {
        "number": 4045,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(s, t):\n        start, end = 0, 0\n        for i in range(len(s)):\n            if s[i] == t[i]:\n                start += 1\n            else:\n                end += 1\n        if end > start and start!= 0:\n            return False\n        return True\n\n    def find_substring(s, t, n):\n        sub = []\n        sub.append(t[n:n + 3])\n        n += 1\n        for i in range(n, n + 3):\n            if s[i - n + 1:i + 1] == t:\n                return True\n            if s[i - n + 1:i + 1] not in sub:\n                return False\n            sub.append(s[i - n + 1:i + 1])\n        return None\n\n    def is_res(s, t):\n        is_res = True\n        i, j = 0, 0\n        while True:\n            if s[i] == t[j]:\n                if not is_valid(s[i:i + 3], t):\n                    return False\n                if find_substring(s[i:i + 3], t, j + 1):\n                    return True\n                i += 1\n                j += 1\n            elif s[i] == t[j]:\n                i += 1\n            else:\n                is_res = False\n                break\n        return is_res\n\n    n = len(stdin)\n    res = []\n    for i in range(n):\n        a, b = map(str, stdin[i].split())\n        if is_res(a, b):\n            res.append(a + b)\n    if not res:\n        return \"NO\"\n    else:\n        return \"YES\""
    },
    {
        "number": 4045,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    s = list(stdin.strip())\n    t = list(stdin.strip())\n    res = \"\"\n    for i in range(n):\n        if s[i] == \"a\" or s[i] == \"b\" or s[i] == \"c\":\n            res += s[i]\n        else:\n            if t[i] == \"a\" or t[i] == \"b\" or t[i] == \"c\":\n                res += t[i]\n            else:\n                res += res[i]\n    if res == \"NO\":\n        return \"NO\"\n    else:\n        return res\n"
    },
    {
        "number": 4046,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    q = list(map(int, stdin.split()))\n    q_len = len(q)\n    #print(q_len)\n    if q_len < 2*n: return \"No such permutation\"\n    if q_len > n*(n-1)//2: return \"No such permutation\"\n    if q_len % n!= 0: return \"No such permutation\"\n    #print(q)\n    p_1, p_2 = 0, 0\n    for i in range(n):\n        p_1 = p_1*n + q[i]\n        p_2 = p_2*n + q[i]\n    #print(p_1,p_2)\n    if p_2 > k: return \"No such permutation\"\n    if p_1 > k: return \"No such permutation\"\n    if p_2 < p_1: return \"No such permutation\"\n    else: return str(p_1) + \" \" + str(p_2)\n\n'''\n\nn, q = map(int, input().split())\n\nwhile n > 1:\n    q1 = q*n\n    q2 = q1%n\n    if q2 == 0:\n        n = n - 1\n    else:\n        q2 = q2 - q2*n\n        q1 = q1 - q1*n\n        n = n - 1\nprint(str(q1) + \" \" + str(q2))\n\n'''\n"
    },
    {
        "number": 4046,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    q = list(map(int, stdin.strip().split()))\n    answer = []\n    # print(q)\n    for i in range(n-1):\n        q.pop(0)\n        q.pop(-1)\n        answer.append(q.pop(0))\n        q = list(map(int, str(q)))\n    # print(answer)\n    # print(len(answer))\n    if n == 0:\n        return '-1'\n    if len(answer) == n:\n        return str(answer[0])\n    else:\n        return answer[n-1]\n\ndef"
    },
    {
        "number": 4046,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split())\n    q = list(map(int, stdin.split()))\n    q.sort()\n    if n == 0:\n        return \"-1\"\n    if n == 1:\n        return str(p[0])\n    \n    for i in range(n-1):\n        for j in range(n-i-1):\n            if q[j] == p[i+1]-p[i]:\n                q[j], q[j+1] = q[j+1], q[j]\n    for i in range(n-1):\n        if q[i] == p[n-i-1]:\n            q[i] = -1\n    return \"\".join(map(str, q))\n"
    },
    {
        "number": 4046,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    arr = [int(i) for i in stdin.split()]\n    if n <= 0 or n > 2**31:\n        return str(n)\n    q = list(range(n))\n    i = 0\n    while n - i >= 1:\n        q[i], q[n-i-1] = q[n-i-1], q[i]\n        i += 1\n    print(f'{q[n-1]} {q[1]} {q[0]}') if n == 2**31 else print(f'{q[n-1]} {q[n-2]} {q[1]} {q[n-2]}')\n    return str(q[n-1]) +'' + str(q[1]) +'' + str(q[n-2])"
    },
    {
        "number": 4046,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.rstrip())\n    q = [int(i) for i in stdin.rstrip().split()]\n    if len(q) == 1:\n        print(-1)\n        return\n    for i in range(n-2):\n        q[i] += q[i+1]\n    print(*q)\n    return\n\nTest cases\nTest 1:\nInput:\n6\n-2 1\n-2 1 2\n-1 2 2\n-1 1 2\n-1 2 2\n\nOutput:\n3 1 2\n-1 2 2\n-1 1 2\n\nTest 2:\nInput:\n4\n1 2 1\n2 2 2\n-1 1 2\n\nOutput:\n2 1 2 \n2 2 2\n-1 1 2\n\n\"\"\"\ndef"
    },
    {
        "number": 4046,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    q.sort()\n    ans = -1\n    for i in range(len(q)):\n        if q[i] + 1 == n:\n            ans = q[i]\n            break\n        if q[i] + 1 <= n:\n            j = q[i] + 1\n            for k in range(j, n):\n                if q[k] + 1 == n:\n                    ans = q[k]\n                    break\n    if ans == -1:\n        ans = q[-1]\n    return str(ans)\n\n\ndef"
    },
    {
        "number": 4046,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split(\" \")\n    n = int(s[0])\n    q = int(s[1])\n    q_n = [int(q_i) for q_i in s[2].split(\"-\")]\n    q_n.sort()\n    q_n = q_n[::-1]\n    s = int(s[-1])\n    if s == 1:\n        return \"1\" if q_n[0] == 1 else \"0\"\n    else:\n        for q_i in q_n:\n            q_i = q_i + 1\n            if q_i > s:\n                continue\n            if q_i in q_n:\n                return f\"{q_n.index(q_i)} {q_i}\"\n        return \"0\"\n\nsolution(\"1-2 3 4 5\")\nsolution(\"-1 1 2 2 1\")\nsolution(\"2-1 2 3 4\")\nsolution(\"-2\")\nsolution(\"-2 -1\")\nsolution(\"-1-2-3-4\")\nsolution(\"-2-\")\n"
    },
    {
        "number": 4046,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def getPermutation(n: int, q: List[int], x: int) -> str:\n        if len(q) == 1:\n            return str(x)\n        else:\n            index = len(q) - 1\n            while index > 0 and q[index] <= x:\n                index -= 1\n            if index == 0:\n                return str(x)\n            else:\n                return getPermutation(n, q[:index+1], x) + getPermutation(n, q[index+1:], x)\n    return getPermutation(n, q, -1)"
    },
    {
        "number": 4046,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    q = stdin[::-1].split()\n    for i in range(n):\n        for j in range(len(q)-1, 0, -1):\n            if q[j] < q[j-1]:\n                q[j-1], q[j] = q[j], q[j-1]\n    return ''.join(q[::-1])\n"
    },
    {
        "number": 4046,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, q = list(map(int, stdin.split()))\n    if n*(n-1) < q*(q-1):\n        print(-1)\n        return\n    else:\n        q_index = n - 1 - (q*(q-1))\n        if q_index < q:\n            print(q_index)\n        else:\n            print(q)\n        \n\ndef"
    },
    {
        "number": 4047,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(min(map(int, stdin.splitlines())))\n\nInput\n5\n2 2 2 3 3\n\nOutput\n2\n"
    },
    {
        "number": 4047,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = [int(i) for i in stdin.split()]\n    idx = 0\n    dp = [0 for _ in range(n)]\n    while idx < n:\n        for i in range(1, 3):\n            dp[idx] += 1\n        idx += 1\n        if idx == n:\n            for i in range(1, 3):\n                dp[idx] -= 1\n                idx += 1\n            if dp[idx] == 0:\n                return str(idx)\n    return str(idx)"
    },
    {
        "number": 4047,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    n = int(s[0])\n    x = int(s[1])\n    coins = []\n    for _ in range(n):\n        coins.append(int(input()))\n    print(len(coins))\n    \n    def move_chip(coordinate, steps):\n        if coins[coordinate] == 0:\n            return 0\n        if steps < 2:\n            return 0\n        \n        if coins[coordinate] < 0 or coins[coordinate] > coins[coordinate-1]:\n            return 0\n        \n        if coins[coordinate] == 2:\n            return steps - 1\n        \n        return move_chip(coordinate - 2, steps - 1) + move_chip(coordinate - 1, steps)\n    \n    print(move_chip(x, 0))\n    \n    return \"INFINITY\"\n-----Constraints-----\n1 <= n <= 10^4\n1 <= x <= 10^9\n\nTime Limit: 1 sec\nSpace Limit: 1 sec\n\nExample 1:\n\nInput\n5\n1 2 3 4\n\nOutput\n2\n\nExplanation\n\nStart by placing the first chip in the 1st position, and from there move the 3rd chip by 2. The solution is 2, which is the number of coins required to move one chip to the same coordinate.\n\nNow, move the first chip to the right, and move the third chip by 1. The solution is 3, which is the number of coins required to move one chip to the same coordinate.\n\nNow, move the third chip to the right, and move the second chip by 1. The solution is 4, which is the number of coins required to move one chip to the same coordinate.\n\nSo the final answer is 2.\n\nExample 2:\n\nInput\n5\n1 2 3 4 5\n\nOutput\n2\n\nExplanation\n\nStart by placing the first chip in the 1st position, and from there move the 5th chip by 3. The solution is 2, which is the number of coins required to move one chip to the same coordinate.\n\nNow, move the first chip to the right, and move the 5th chip by 2. The solution is 2, which is the number of coins required to move one chip to the same coordinate.\n\nNow, move the 5th chip to the right, and move the 4th chip by 1. The solution is 4, which is the number of coins required to move one chip to the same coordinate.\n\nSo the final answer is 2.\n\nConstraints:\n\n0 <= n <= 10^4\n-10^9 <= x <= 10^9\n\"\"\"\n\nclass Solution:\n    def solveNQueens(self, n: int) -> int:\n        \n        def rec(row, col, xs):\n            if len(xs) == n:\n                return True\n            \n            if row == n:\n                return False\n            \n            for i in range(n):\n                if i in xs:\n                    continue\n                \n                if i + col < n and rec(row + 1, col + 1, xs + [i + col]):\n                    continue\n                \n                if i - col >= 0 and rec(row + 1, col - 1, xs + [i - col]):\n                    continue\n            \n            return True\n        \n        return rec(0, 0, [])"
    },
    {
        "number": 4047,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, *coin = map(int, stdin)\n    x_i = 0\n    for x in coin:\n        x_i += x\n\n    if x_i == n:\n        return str(1)\n    if n == 1:\n        return str(x_i)\n    if x_i - 1 < n:\n        return str(2 * x_i)\n    return str(n + 1)\n"
    },
    {
        "number": 4047,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, x, *x_ = map(int, stdin.split())\n    while True:\n        move = x//x_\n        if move == 0:\n            x_ = x-1\n        elif move == 1:\n            x_ = x+1\n        elif move == 2:\n            x_ = x-1\n        elif move == 3:\n            x_ = x+1\n        else:\n            return str(x_)\n"
    },
    {
        "number": 4047,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = list(map(int, stdin.split()))\n    coin_count = 0\n    while True:\n        for i in range(n):\n            if x[i] % 2 == 0:\n                x[i] = x[i] + 1\n            else:\n                x[i] = x[i] - 1\n        x_sum = 0\n        for x_i in x:\n            x_sum += x_i\n        if x_sum >= 0:\n            coin_count += 1\n            x = [0] * n\n            x[0] = x_sum\n            for i in range(n):\n                x[i+1] = x[i] + 1\n            if x_sum >= 0:\n                return str(coin_count)\n        else:\n            break\nprint(solution(input()))\n\n\n'''\ndef"
    },
    {
        "number": 4047,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    nums = list(map(int, stdin.strip().split()))\n    curr = 0\n    answer = 0\n    for n in nums:\n        if curr == 0:\n            curr = n\n        else:\n            answer += curr - n\n        curr = n\n    return str(answer)\n\nprint(solution(input()))"
    },
    {
        "number": 4047,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    x = [int(i) for i in stdin.split()]\n    x.sort()\n    coins = []\n    start = 0\n    end = 0\n    for i in x:\n        end = i + end\n        if end > n:\n            end = n\n        coins.append(end - start)\n        start = end\n    return coins[-1]\n\nInput\n2\n1 3\n\nOutput\n2\n\n\"\"\"\nimport heapq\nclass Solution:\n    def solution(self, n, x):\n        heap = []\n        for i in range(n):\n            if x - x // n < 0:\n                break\n            heapq.heappush(heap, x // n)\n            x = x % n\n        return heap[0]\n\n    def solution(self, n, x):\n        heap = []\n        for i in range(n):\n            if x - x // n < 0:\n                break\n            heapq.heappush(heap, x // n)\n            x = x % n\n        return heapq.heappop(heap)\n"
    },
    {
        "number": 4047,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[-1])\n    chips = []\n    for i in range(n):\n        chips.append(int(stdin.split()[i]))\n    print(len(chips))\n    print(sum(chips))\n    print(min(chips))\n    print(sum(chips)-min(chips))\n    print(sum(chips)-min(chips))\n    return str(sum(chips))\n\n\n-----Constraints-----\n\n0 <= n <= 100\n1 <= i \\le n\n2 <= i < 10^4\n\n---Time Limit---\n\nO(n)\n\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4047,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n,*x = map(int, stdin.split())\n    print(min(x))\n    return \"\"\n\nTest\n3\n1 2 3\n4 5 6\n7 8 9 10\n11 12 13 14 15\n\nOutput\n3\n\nTest\n5\n2 2 2 3 3 3 3\n2 2 2 2 2 2 2\n2 2 2 2 2 2 2\n2 2 2 2 2 2 2\n2 2 2 2 2 2 2\n2 2 2 2 2 2 2\n2 2 2 2 2 2 2\n2 2 2 2 2 2 2\n2 2 2 2 2 2 2\n"
    },
    {
        "number": 4048,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    n = N\n    l = len(str(n))\n    flag = 1\n    while l > 1:\n        if n % l == 0:\n            n = n / l\n            flag += 1\n        else:\n            flag = 1\n            break\n        l = l - 1\n    if flag == 1:\n        print(flag)\n    else:\n        print(0)\n    return ''\n\nn = int(input())\nsolution(n)"
    },
    {
        "number": 4048,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(' '))\n    if a**2+b**2==2*a*b:\n        return 'YES'\n    elif a**2+b**2==3*a*b:\n        return 'YES'\n    else:\n        return 'NO'\n"
    },
    {
        "number": 4048,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return 0\n    if n < 0:\n        return \"no\"\n    if n > 10**18:\n        return \"no\"\n    result = 0\n    for i in range(1,n+1):\n        if i == n:\n            result += 1\n        else:\n            result += solution(str(i))\n    return str(result)"
    },
    {
        "number": 4048,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # 1. Generate the matrix, x,y and diagonal 1\n    x,y,diag1 = [int(i) for i in stdin.split()]\n    # 2. Check if the solution can be found\n    if (x==y and y==diag1) or y+diag1+x==x*y:\n        print(0)\n        return \"\"\n    # 3. If not, check if the solution can be found, else return the solution\n    if (x+diag1+y==x*y and x+diag1+y==y*x) or y+diag1+y==x*y:\n        print(0)\n        return \"\"\n    # 4. If not, check if the solution can be found, else return the solution\n    if (x+diag1+y+diag1==x*y+y*x) or y+diag1+y+diag1==x*y:\n        print(0)\n        return \"\"\n    # 5. If not, check if the solution can be found, else return the solution\n    if (x+diag1+y+diag1+y*y==x*y+y*y) or y+diag1+y+diag1+y*y==x*y*y:\n        print(0)\n        return \"\"\n    # 6. If not, check if the solution can be found, else return the solution\n    if (x+diag1+y+diag1+y*y+y*y==x*y+y*y*y) or y+diag1+y+diag1+y*y+y*y==x*y*y:\n        print(0)\n        return \"\"\n    # 7. If not, check if the solution can be found, else return the solution\n    if (x+diag1+y+diag1+y*y+y*y+y*y==x*y+y*y*y+y*y*y) or y+diag1+y+diag1+y*y+y*y+y*y==x*y*y*y:\n        print(0)\n        return \"\"\n    # 8. If not, check if the solution can be found, else return the solution\n    if (x+diag1+y+diag1+y*y+y*y+y*y==x*y+y*y*y+y*y*y) or y+diag1+y+diag1+y*y+y*y+y*y==x*y*y*y:\n        print(0)\n        return \"\"\n    # 9. If not, check if the solution can be found, else return the solution\n    if (x+diag1+y+diag1+y*y+y*y+y*y==x*y+y*y*y+y*y*y+y*y*y) or y+diag1+y+diag1+y*y+y*y+y*y==x*y*y*y:\n        print(0)\n        return \"\"\n    # 10. If not, return the solution\n    print(1)\n    return \"\"\n"
    },
    {
        "number": 4048,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n%10!= 1:\n        return str(n)+\"0\"\n    \n    x = str(n//10)\n    y = str(n-n//10*10)\n    x = x.rjust(len(y), '0')\n    return x+y\n"
    },
    {
        "number": 4048,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n  \n    N = int(stdin)\n    takahashi = list(map(int,stdin.split()))\n    possibilities = []\n    possibilities.append(takahashi)\n    for i in range(1,N+1):\n        for j in range(1,N+1):\n            if (i+1,j) not in possibilities:\n                possibilities.append((i+1,j))\n            if (i,j+1) not in possibilities:\n                possibilities.append((i,j+1))\n    return str(min(possibilities))"
    },
    {
        "number": 4048,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n:param stdin:\n:return:\n\"\"\"\nimport math\nimport sys\n\nfrom typing import List\nfrom collections import deque\n\nsys.setrecursionlimit(100000)\n\n\nclass Solution:\n    def countSquares(self, n: int) -> int:\n        def solve(row: int, col: int) -> int:\n            if row == len(self.board):\n                return self.countSquares(n)\n            if col == len(self.board[row]):\n                return 0\n            count = 0\n            for i in range(row, -1, -1):\n                count += solve(i, col)\n            for j in range(col, len(self.board[row])):\n                count += solve(row, j)\n            return count\n\n        if n == 1:\n            return 1\n        return solve(0, 0)\n"
    },
    {
        "number": 4048,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    k = 0\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if i * j == n:\n                k += 1\n    return str(k)\n\n-----Code-----\n\ndef"
    },
    {
        "number": 4048,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    N = int(stdin)\n    \n    if N == 0:\n        return \"0\"\n    \n    if N % 2 == 1:\n        return \"0\"\n    \n    result = 0\n    \n    for i in range(1, N):\n        if N % i == 0:\n            result += 1\n        elif N % i == i:\n            result += 2\n        \n    return str(result)\n\"\"\"\n"
    },
    {
        "number": 4048,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    from collections import deque\n    from itertools import permutations\n    from sys import stdin\n\n    def row(i):\n        return i//3\n\n    def col(j):\n        return j//3\n\n    dx = [1, 2, 2, 1, -1, -2, -2, -1]\n    dy = [2, -2, -2, -1, 1, 1, -1, -1]\n\n    def is_valid(y, x, n, col):\n        return 0 <= y+dx[col] < n and 0 <= x+dy[col] < n\n\n    def is_taken(x, y, n, col):\n        return col == 0 or col == 3 or is_valid(y, x, n, col)\n\n    def is_in_bounds(x, y, n, col):\n        return is_valid(y, x, n, col) and col >= 0\n\n    def is_in_taken(x, y, n, col):\n        return col == 0 or col == 3 or is_taken(x, y, n, col)\n\n    def check_square(n, x, y, dx, dy, col):\n        return is_in_bounds(x+dx, y+dy, n, col) and is_in_taken(x+dx, y+dy, n, col)\n\n    def is_square(n, x, y):\n        return is_in_bounds(x, y, n, 0) and is_in_taken(x, y, n, 0)\n\n    def find_squares(n, x, y):\n        squares = []\n        for i in range(8):\n            for j in range(8):\n                if check_square(n, x+i*dx[i], y+j*dy[j], dx[i], dy[j], 0):\n                    squares.append((i,j))\n        return squares\n\n    def move_taken(x, y, n, col):\n        squares = find_squares(n, x, y)\n        for (i, j) in squares:\n            if col == 0:\n                n -= 1\n                if n == 0:\n                    return \"No\"\n            elif col == 3:\n                n += 1\n                if n == ncol:\n                    return \"No\"\n            if is_square(n, x, y):\n                if is_taken(x, y, n, col):\n                    return \"No\"\n        return \"No\"\n\n    def __generate_square(n):\n        if n == 0:\n            return \"No\"\n        if n == 1:\n            return \"No\"\n        if n == 2:\n            return \"No\"\n        if n == 3:\n            return \"No\"\n        if n == 4:\n            return \"No\"\n        if n == 5:\n            return \"No\"\n        if n == 6:\n            return \"No\"\n        if n == 7:\n            return \"No\"\n\n        ncol = n//3\n        dx = [1, 1, 1, -1, -1, -1, 1, -1]\n        dy = [1, -1, 1, -1, 1, 1, -1, 1]\n\n        if n >= 10**9:\n            squares = []\n            for i in range(n//3):\n                for j in range(n//3):\n                    if dx[0]*dx[1]*dx[2]*dy[0]*dy[1]*dy[2]!= 0 and dx[0]*dx[1]*dx[2]*dy[0]*dy[1]*dy[2] == 0:\n                        squares.append((i, j))\n            return squares\n        elif n >= 10**6:\n            squares = []\n            for i in range(n//3):\n                for j in range(n//3):\n                    if dx[0]*dx[1]*dx[2]*dy[0]*dy[1]*dy[2]!= 0:\n                        if dx[0]*dx[1]*dx[2]*dy[0]*dy[1]*dy[2] == 0:\n                            squares.append((i, j))\n            return squares\n\n        taken = set()\n        for i in range(n//3):\n            for j in range(n//3):\n                if dx[0]*dx[1]*dx[2]*dy[0]*dy[1]*dy[2]!= 0:\n                    if dx[0]*dx[1]*dx[2]*dy[0]*dy[1]*dy[2] == 0:\n                        taken.add((i, j))\n        for i in range(n//3):\n            for j in range(n//3):\n                if dx[0]*dx[1]*dx[2]*dy[0]*dy[1]*dy[2] == 0:\n                    taken.add((i, j))\n        return taken\n\n    n = int(stdin.readline().rstrip())\n    squares = find_squares(n, 1, 1)\n    if squares:\n        return \"Yes\"\n    else:\n        return \"No\"\n\n\nsolution(sys.stdin.readline().rstrip())\n"
    },
    {
        "number": 4049,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a_1, a_2, a_3 = map(int, stdin.split())\n    b_1, b_2, b_3 = map(int, stdin.split())\n    a_1 = a_1 + a_2\n    a_2 = a_2 + a_3\n    a_3 = a_3 + b_1 + b_2 + b_3\n    if a_1 < n or a_2 < n or a_3 < n:\n        return \"0\"\n    else:\n        return str(min(a_1, a_2, a_3)) + \" \" + str(max(a_1, a_2, a_3))\n    \n\nPrint solution(stdin)\nprint(solution(input()))\n"
    },
    {
        "number": 4049,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, a_1, a_2, a_3 = map(int, stdin.split())\n    b_1, b_2, b_3 = map(int, stdin.split())\n    return str(min(n, max(a_1, a_2, a_3)) * min(n, max(b_1, b_2, b_3)))\n\n\n--------Implementation----\n\ndef"
    },
    {
        "number": 4049,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a_1 = int(stdin[0])\n    a_2 = int(stdin[1])\n    a_3 = int(stdin[2])\n    b_1 = int(stdin[3])\n    b_2 = int(stdin[4])\n    b_3 = int(stdin[5])\n    min_a = a_1 + a_2 + a_3\n    min_b = b_1 + b_2 + b_3\n    max_a = a_1 + a_2 + a_3\n    max_b = b_1 + b_2 + b_3\n    return str(min(min_a, min_b, max_a, max_b))\n'''"
    },
    {
        "number": 4049,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a_1 = int(stdin.strip())\n    a_2 = int(stdin.strip())\n    a_3 = int(stdin.strip())\n    b_1 = int(stdin.strip())\n    b_2 = int(stdin.strip())\n    b_3 = int(stdin.strip())\n    ans = a_1 * a_2 * a_3 + b_1 * b_2 * b_3\n    print(ans)\n    return str(ans)"
    },
    {
        "number": 4049,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, a_1, a_2, a_3 = map(int, stdin.split())\n    n, b_1, b_2, b_3 = map(int, stdin.split())\n\n    a_1 = n - a_1\n    a_2 = n - a_2\n    a_3 = n - a_3\n    \n    b_1 = n - b_1\n    b_2 = n - b_2\n    b_3 = n - b_3\n    \n    def k_rounds(a_i, b_i):\n        if a_i > b_i:\n            return max(a_i, b_i)\n        return min(a_i, b_i)\n        \n    def k_rounds_2(a_i, b_i):\n        if a_i > b_i:\n            return max(a_i, b_i)\n        return min(a_i, b_i)\n    \n    def k_rounds_3(a_i, b_i):\n        if a_i > b_i:\n            return max(a_i, b_i)\n        return min(a_i, b_i)\n    \n    def k_rounds_4(a_i, b_i):\n        if a_i > b_i:\n            return max(a_i, b_i)\n        return min(a_i, b_i)\n\n    if n >= a_1 >= b_1 >= a_2 >= b_2 >= a_3 >= b_3:\n        print(k_rounds(a_1, b_1), k_rounds(a_2, b_2), k_rounds(a_3, b_3))\n    elif n >= a_1 >= b_1 >= a_2 >= b_2 >= a_3 >= b_3:\n        print(k_rounds(a_1, b_2), k_rounds(a_2, b_1), k_rounds(a_3, b_3))\n    elif n >= a_1 >= b_1 >= a_2 >= b_2 >= a_3 >= b_3:\n        print(k_rounds(a_2, b_3), k_rounds(a_1, b_3), k_rounds(a_3, b_1))\n    else:\n        print(k_rounds_2(a_1, b_1), k_rounds_2(a_2, b_2), k_rounds_2(a_3, b_3))\n    print(k_rounds_3(a_1, b_1), k_rounds_3(a_2, b_2), k_rounds_3(a_3, b_3))\n    print(k_rounds_4(a_1, b_1), k_rounds_4(a_2, b_2), k_rounds_4(a_3, b_3))\n\ndef"
    },
    {
        "number": 4049,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a_1 = int(stdin.split()[1])\n    a_2 = int(stdin.split()[2])\n    a_3 = int(stdin.split()[3])\n    b_1 = int(stdin.split()[4])\n    b_2 = int(stdin.split()[5])\n    b_3 = int(stdin.split()[6])\n    \n    if a_1 + a_2 + a_3 == n:\n        return \"0\"\n    elif b_1 + b_2 + b_3 == n:\n        return \"1\"\n    elif a_1 + a_2 + a_3 == a_1 + a_2 + a_3 == n:\n        return \"2\"\n    elif b_1 + b_2 + b_3 == a_1 + a_2 + a_3 == b_1 + b_2 + b_3:\n        return \"3\"\n    elif a_1 + a_2 + a_3 == a_1 + a_2 + a_3 == b_1 + b_2 + b_3:\n        return \"4\"\n    elif b_1 + b_2 + b_3 == a_1 + a_2 + a_3 == a_1 + a_2 + a_3:\n        return \"5\"\n    elif a_1 + a_2 + a_3 == a_1 + a_2 + a_3 == b_1 + b_2 + b_3:\n        return \"6\"\n    elif b_1 + b_2 + b_3 == a_1 + a_2 + a_3 == b_1 + b_2 + b_3:\n        return \"7\"\n    elif a_1 + a_2 + a_3 == a_1 + a_2 + a_3 == b_1 + b_2 + b_3:\n        return \"8\"\n    elif a_1 + a_2 + a_3 == a_1 + a_2 + a_3 == b_1 + b_2 + b_3:\n        return \"9\"\n    else:\n        return \"10\"\n    \n    \n"
    },
    {
        "number": 4049,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a_1 = 0\n    b_1 = 0\n    a_2 = 0\n    b_2 = 0\n    a_3 = 0\n    b_3 = 0\n    answer = \"\"\n    for i in range(n):\n        # print(f\"input {i}\")\n        a_1 = int(stdin.strip())\n        b_1 = int(stdin.strip())\n        # print(f\"a_1 {a_1}\")\n        # print(f\"b_1 {b_1}\")\n        if a_1 == b_1:\n            continue\n        elif a_1 > b_1:\n            a_1 = a_1 - b_1\n            a_2 = a_1\n            a_3 = a_1\n        elif a_1 < b_1:\n            b_1 = b_1 - a_1\n            b_2 = b_1\n            b_3 = b_1\n        if a_1 > 0 and b_1 == 0:\n            answer += str(a_1) + str(b_1)\n        elif a_1 > 0 and b_1 > 0:\n            answer += str(a_1) + str(b_1) + str(a_1 - b_1)\n        elif a_1 < 0 and b_1 == 0:\n            answer += str(a_1) + str(b_1)\n        elif a_1 < 0 and b_1 > 0:\n            answer += str(a_1) + str(b_1) + str(a_1 - b_1)\n        else:\n            answer += str(a_1)\n    answer += str(a_1) + str(b_1)\n    answer += str(a_2) + str(b_2)\n    answer += str(a_3) + str(b_3)\n    # print(answer)\n    return answer\n"
    },
    {
        "number": 4049,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, a_1, a_2, a_3 = map(int, stdin.split())\n    b_1, b_2, b_3 = map(int, stdin.split())\n    return str(min(a_1 + a_2 + a_3, b_1 + b_2 + b_3))\n    \n"
    },
    {
        "number": 4049,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(i) for i in stdin.split()]\n    b = [int(i) for i in stdin.split()]\n    a = sorted(a)\n    b = sorted(b)\n    a = a[:n]\n    b = b[:n]\n    result = n * (n + 1) // 2\n    i = 0\n    while i < n - 1:\n        result += n + 1 - a[i] - b[i]\n        i += 1\n    return str(result)"
    },
    {
        "number": 4049,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin.strip())\n    \n    a_1, a_2, a_3 = map(int, stdin.strip().split())\n    \n    b_1, b_2, b_3 = map(int, stdin.strip().split())\n    \n    if a_1 + a_2 + a_3 == n:\n        return '0'\n    elif b_1 + b_2 + b_3 == n:\n        return '1'\n    elif a_1 + a_2 + a_3 > b_1 + b_2 + b_3:\n        return '1'\n    elif a_1 + a_2 + a_3 < b_1 + b_2 + b_3:\n        return '0'\n    else:\n        return '0'\n"
    },
    {
        "number": 4050,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    h = max(a)\n    for i in range(1, n + 1):\n        x = 0\n        j = 0\n        while True:\n            x = a[j]\n            if x < h:\n                break\n            else:\n                h -= x\n            j += 1\n        if x == h:\n            print(i)\n            break\n    return \"\"\n"
    },
    {
        "number": 4050,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    for case in range(int(stdin)):\n        n, a = map(int, input().split())\n        print(solution_problem(n, a))\nsolution_problem(n, a)\n"
    },
    {
        "number": 4050,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    blocks = set(range(a + 1))\n    for _ in range(b):\n        l, r = map(int, stdin.split())\n        blocks = blocks - set(range(l, r + 1))\n    print(len(blocks))\n    return''.join(map(str, sorted(blocks)))\n"
    },
    {
        "number": 4050,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    #code here\n    pass\n"
    },
    {
        "number": 4050,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, a = list(map(int, stdin.split()))\n    \n    if n > 100:\n        return ''\n    \n    if n == 1:\n        return ''.join(map(str, a))\n\n    bounds = set()\n    for i, val in enumerate(a):\n        if i == 0:\n            bounds.add(val)\n        else:\n            if val > a[i - 1] and val > a[i] and val > a[i + 1]:\n                bounds.add(val)\n    \n    \n    solution_val = 1\n    for i in bounds:\n        solution_val *= (i + 1)\n    \n    return str(solution_val)\n\ndef"
    },
    {
        "number": 4050,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(i) for i in stdin.split()]\n    q = deque()\n    for i in range(n):\n        q.append((a[i], i+1))\n        q.append((a[i], i+1))\n        q.append((a[i], i+1))\n        \n    while q:\n        l, r = q.popleft()\n        for i in range(l-1, r):\n            q.append((a[i], i+1))\n            q.append((a[i], i+1))\n            q.append((a[i], i+1))\n    print(n)\n    print(len(set([a[i] for i in range(n)])))\n    return '\\n'.join(map(str, q))\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4050,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Returns the height of the blocks with max sum.\n    \"\"\"\n    n = int(stdin.strip())\n    a = list(map(int,stdin.split()))\n    i = 0\n    sum = 0\n    k = 0\n    while i < n:\n        a[i] = a[i] + 1\n        sum = sum + a[i]\n        while sum > 0:\n            k = a[i] - sum\n            i = i + 1\n            sum = sum - a[i]\n        i = i + 1\n    return i\n"
    },
    {
        "number": 4050,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    answer = 0\n    for k in range(1, n + 1):\n        answer += min(a[k - 1], a[k])\n    print(answer)\n    return str(answer)\n"
    },
    {
        "number": 4050,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    m = stdin.split()\n    a = map(int, m)\n    # print(a)\n    num = 0\n    for i in a:\n        if i == -10:\n            print(num)\n            return num\n        if i == 0:\n            num += 1\n        if i == 1:\n            num += 2\n        if i == 2:\n            num += 3\n        if i == 3:\n            num += 4\n        if i == 4:\n            num += 5\n        if i == 5:\n            num += 6\n        if i == 6:\n            num += 7\n    return num"
    },
    {
        "number": 4050,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a_set = set(a)\n    if n > 5:\n        return print(sorted(list(a_set), reverse=True)[0:n],''.join(map(str, sorted(a_set)[n:])))\n    else:\n        return print(sorted(a_set)[0:n])\n"
    },
    {
        "number": 4051,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\" \")[0])\n    a = list(map(int, stdin.split(\" \")))\n    answer = [\"YES\" if max(a) == min(a) else \"NO\" for a in a]\n    print(\"\".join(answer))\n    return \"\".join(answer)\n"
    },
    {
        "number": 4051,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip().split(' ')[0])\n    arr = [int(i) for i in stdin.strip().split(' ')]\n    stack = []\n    for i in range(n):\n        while len(stack) and stack[-1][1] >= arr[i]:\n            stack.pop()\n        stack.append((arr[i], i))\n    result = \"YES\" if len(stack) > 1 else \"NO\"\n    return result\n\n\n\n-----Constraints-----\n\n1 \u2264 n \u2264 100\n1 \u2264 n\n2 \u2264 a_{i} \u2264 100\na_{i} are integers.\n1 \u2264 a_{i} \u2264 n\n\n-----Time Limit: 300 ms-----\n\nRuntime: 764 ms (86.53%)\nMemory Usage: 30.1 MB (86.53%)\n\nAccepted\n39,633\nSubmissions\n2,907\n\"\"\"\n\ndef"
    },
    {
        "number": 4051,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    height_array = [int(i) for i in stdin.split()]\n    if len(height_array) == 1:\n        return \"NO\"\n    stack = []\n    for i in height_array[1:]:\n        while stack and i < stack[-1]:\n            stack.pop()\n        stack.append(i)\n    if len(stack) == 1:\n        return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 4051,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin.strip())\n    \n    array = list(map(int, stdin.strip().split()))\n    \n    stack = []\n    \n    for i in range(n):\n        \n        if not stack:\n            stack.append(array[i])\n            \n        else:\n            if array[i] < stack[-1]:\n                stack.append(array[i])\n            else:\n                while stack and array[i] > stack[-1]:\n                    stack.pop()\n                    \n        if not stack:\n            stack.append(array[i])\n    \n    \n    for i in range(n):\n        array[i] = stack[-1]\n        \n    print(\"NO\" if not stack else \"YES\")\n    \n    return \"YES\" if not stack else \"NO\""
    },
    {
        "number": 4051,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n = int(stdin.strip())\n    arr = list(map(int, stdin.strip().split()))\n    array = [0] * n\n    stack = [0]\n    for i in range(n):\n        while len(stack)!= 0 and stack[-1] < arr[i]:\n            stack.pop()\n        while len(stack)!= 0 and arr[i] > stack[-1]:\n            stack.pop()\n        if len(stack) == 0:\n            array[i] = stack[-1] + 1\n        else:\n            array[i] = stack[-1] + 1\n            array[stack.pop()] = arr[i]\n    if len(stack) > 0:\n        array[n - 1] = stack[-1] + 1\n    else:\n        array[n - 1] = 0\n    for i in range(n):\n        print(array[i])\n    return \"YES\" if sorted(array) == array else \"NO\"\n"
    },
    {
        "number": 4051,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin.strip())\n    arr = [int(el) for el in stdin.strip().split()]\n\n    arr.sort()\n    res = 'YES'\n    \n    for i in range(1,n+1):\n        if arr[i-1] > arr[i]:\n            res = 'NO'\n            break\n    \n    return res\n\n\"sol 2\"\n\"sol 3\"\n"
    },
    {
        "number": 4051,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    lst = []\n    for i in range(n):\n        s = list(map(int, stdin.split()))\n        lst.append(s)\n\n    lst.sort(key=lambda x: x[1])\n    for i in range(len(lst)):\n        if i!= len(lst)-1:\n            if lst[i][1] < lst[i+1][1]:\n                lst[i] = lst[i+1]\n                lst[i+1] = lst[i]\n    for i in lst:\n        if i[1] < i[0]:\n            return \"NO\"\n    return \"YES\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4051,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def rotate(array: list, count: int) -> list:\n        if count == 1:\n            return array\n        for i in range(len(array) - 1, -1, -1):\n            array[i] = array[i][count - 1]\n            count -= 1\n        return array\n\n    def sort(array: list, start: int, end: int) -> list:\n        if end == start:\n            return array\n        index = (start + end) // 2\n        array = rotate(array, end - start)\n        array = sort(array, start, index)\n        array = sort(array, index, end)\n        return array\n\n    n = int(stdin.strip())\n    stack = []\n    for _ in range(n):\n        stack.append([int(x) for x in stdin.strip().split()])\n\n    answer = \"YES\" if sort(stack, 0, len(stack)) == sort(stack, 0, len(stack)) else \"NO\"\n    return answer\n\nprint(solution(\"1 2 3 4 5\"))\nprint(solution(\"3 1 2\"))\nprint(solution(\"2 3 1\"))\n"
    },
    {
        "number": 4051,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    res = []\n    for i in range(n):\n        tmp = []\n        for j in range(n):\n            tmp.append(int(stdin[j]))\n        res.append(max(tmp))\n    return \"\".join(map(str, res))"
    },
    {
        "number": 4051,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, *stack = list(map(int, stdin))\n    stack = sorted(stack, reverse=True)\n    print(*stack)\n"
    },
    {
        "number": 4052,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    if n < 50 or n > 10 ** 4:\n        return \"-1\"\n    if n == 1:\n        return t\n    j = n - 1\n    c_j = 0\n    while j >= 0:\n        s_c, s_c_j = s[j], s[c_j]\n        s[j] = s_c\n        s_c = s_c_j\n        c_j += 1\n        if c_j == n:\n            c_j = 0\n            j -= 1\n    c_j += 1\n    s[j] = s_c\n    return t"
    },
    {
        "number": 4052,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    s = list(stdin.strip())\n    t = list(stdin.strip())\n    temp = s.copy()\n    move = 0\n    \n    for i in range(n):\n        move = 0\n        for j in range(1,n):\n            if j > i:\n                if s[i] == t[j-1]:\n                    move += 1\n                    t[j-1], s[i] = s[i], t[j-1]\n            if j < n-1:\n                if s[i] == t[j+1]:\n                    move += 1\n                    t[j+1], s[i] = s[i], t[j+1]\n        if move == 0:\n            temp = temp.replace(s[i],t[i])\n        if i > 0:\n            if s[i] == t[i-1]:\n                temp = temp.replace(s[i],t[i-1])\n    if temp == '':\n        return '-1'\n    else:\n        return len(temp)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4052,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split()]\n    if n == 0 or k > 10**4:\n        return \"-1\"\n    \n    l = list(stdin)\n    l = [str(i) for i in l]\n    l = [i for i in l if i.isalpha()]\n    l = [int(i) for i in l]\n    i = 0\n    j = 0\n    while True:\n        while i < n and j < n:\n            if l[i] == l[j]:\n                l[i], l[j] = l[j], l[i]\n            i += 1\n            j += 1\n        if j >= n:\n            break\n    for i in range(n - 1):\n        l.insert(i, l.pop(n - 1))\n    l = ''.join(l)\n    j = 0\n    answer = -1\n    while True:\n        if l.count('a') == l.count('z'):\n            if answer == -1:\n                answer = k\n            j += 1\n            k -= 1\n            while l.count('a') == l.count('z'):\n                l = l.replace('a', 'z', 1)\n        elif l.count('a') > l.count('z'):\n            answer = k\n            k -= 1\n        elif l.count('z') > l.count('a'):\n            answer = k\n            k -= 1\n        if k < 0:\n            break\n        l = l.replace('z', 'a', 1)\n        l = l.replace('a', 'z', 1)\n    return str(answer)"
    },
    {
        "number": 4052,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Use the 4 basic_move function to perform all move operations.\n    \"\"\"\n    n = int(stdin.split(\"\\n\")[0])\n    string = stdin.split(\"\\n\")[1].split(\" \")\n    t = stdin.split(\"\\n\")[2].split(\" \")\n\n    move_num = 4\n    if len(string)!= len(t):\n        print(-1)\n    else:\n        for i in range(len(string)):\n            for j in range(len(t)):\n                if (i == j):\n                    continue\n                else:\n                    string[i], string[j] = string[j], string[i]\n                    t[i], t[j] = t[j], t[i]\n                    move_num += 1\n\n    if move_num < 10 ** 4:\n        print(move_num)\n    else:\n        print(-1)\n\n    return \"\".join(string)\n\"\"\"\n\ndef"
    },
    {
        "number": 4052,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(n):\n        tmp = stdin.split(\"\\n\")\n        s,t = tmp[0].split(),tmp[1].split()\n        s_i = len(s)\n        t_i = len(t)\n        if s_i!= t_i:\n            if s_i < t_i:\n                s_i += 1\n            else:\n                t_i += 1\n            s = s[:s_i] + t + s[s_i:]\n            tmp = tmp[1:]\n            tmp.insert(1,s)\n            tmp = \" \".join(tmp)\n            print(s + \"\\n\" + tmp + \"\\n\")\n        else:\n            print(s + \"\\n\")\n    return \"-1\"\n\n-----Examples-----\nInput\n4\na b c d e f g h\n\nOutput\n-1\n\nInput\n3\na b c\nd e\nf g\n\nOutput\n-1\n\"\"\"\ndef"
    },
    {
        "number": 4052,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin.strip())\n    \n    s = \"\".join(input().split())\n    t = \"\".join(input().split())\n\n    if n == 1:\n        print(-1)\n    elif n == n:\n        print(len(s))\n    else:\n        t = t.replace('$', 'A') + '$' + t.replace('A', '$') + '$' + t.replace('$', 'T') + '$' + t.replace('T', '$')\n        print(len(s) - n)\n        print(len(t))\n        \n    \n    print(\"\".join(sorted(sorted(set(sorted(t))))))\n    \n    return str(len(s))\n\n-----Looks like this one, but I suppose it would be a better solution\ndef"
    },
    {
        "number": 4052,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\nExample 1:\n\nInput:\nn = 6\ns = \"abcdef\"\nt = \"abdcef\"\n\nOutput:\n4\n3 5 4 5\n\nExplanation:\nFor moves:\n - swap letters s_0 and s_1 in s\n - swap letters s_2 and s_3 in s\n - swap letters s_4 and s_5 in s\n - swap letters s_6 and s_7 in s\n \nMethod 1:\nUse BFS.\n\"\"\"\nclass Solution:\n    def solve(self, n: int, s: str, t: str) -> int:\n        if s == t:\n            return 0\n        \n        visited = [False] * (n + 1)\n        queue = deque([(0, 0)])\n        visited[0] = True\n        \n        while queue:\n            curr_level, level = queue.popleft()\n            if curr_level == n:\n                return level\n            \n            for i in range(1, n):\n                if not visited[i] and s[curr_level] == s[i]:\n                    visited[i] = True\n                    queue.append((curr_level + 1, level + 1))\n                    \n        return -1\n\nprint(Solution().solve(6, \"abcdef\", \"abdcef\"), \"4\")\nprint(Solution().solve(4, \"abcdef\", \"abdcef\"), \"3\")\nprint(Solution().solve(4, \"abcd\", \"abdcfe\"), \"-1\")\nprint(Solution().solve(6, \"abc\", \"abdcef\"), \"3\")\nprint(Solution().solve(6, \"abc\", \"abdcf\"), \"0\")"
    },
    {
        "number": 4052,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, *s, t = map(int, stdin.split())\n    s = s[::-1]\n    t = t[::-1]\n    count = 0\n    for i in range(n - 1):\n        for j in range(1, n - 1):\n            if s[i] == t[j]:\n                s[i], s[j] = s[j], s[i]\n                count += 1\n    return '-1' if count >= 10 ** 4 else str(count)\n"
    },
    {
        "number": 4052,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s, t = map(str, stdin.split())\n    n = len(s)\n    t = \"\".join(sorted(t))\n\n    t = t.lower()\n    for i in range(1, n):\n        if s[i]!= t[i - 1]:\n            t = t[:i] + t[i:]\n            break\n    return -1 if t == \"\" else len(t)\n\n-----Constraints-----\n0 <= n <= 10^4\n\n[execution time limit] 4 seconds (py3)\n\n[input] string s\n\n[input] string t\n\n[output] integer\n\n[description]\n\nYou can apply any number of moves to s. The number of moves is in the range $0 \\le n \\le 50$ and $n \\le \\infty$.\n\n[details]\n\nThere is no solution that would be more efficient than using a dynamic programming algorithm. In this problem, we cannot solve the problem in $n \\times n$ time using the dynamic programming algorithm because it takes $n$ passes on each pass and the number of passes is larger than $n \\times n$. Therefore, you can perform any number of moves such that $n \\times n \\le \\infty$ in $n \\times n$ time.\n\n[explanation]\n\nYou have to perform at most $10^4$ moves.\n\n\n\n### Additional Resources\n- [Solutions with Difference Algorithms](https://www.geeksforgeeks.org/solution-with-difference-algorithm-in-python-dynamic-programming/)\n- [Learning Dynamic Programming](https://www.geeksforgeeks.org/dynamic-programming-algorithms/)"
    },
    {
        "number": 4052,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(i) for i in stdin.split(\" \")]\n    t = stdin.strip()\n    s = stdin.split(\" \")\n    string = s[0] + \" \" + s[1]\n    for i in range(1, len(s)):\n        string += \" \" + s[i]\n    string += \" \" + t\n    s.clear()\n    s.extend(t)\n    n += 1\n    m += 1\n    c = 0\n    while c < len(string):\n        c_t = len(string) - c\n        c_s = len(string) - c - 1\n        if m > 10**4:\n            return '-1'\n        if string[c_t]!= string[c_s]:\n            m += 1\n            string = string[:c_t] + string[c_t:c_s + 1] + string[c_s + 1:c] + string[c_s + 1:]\n        else:\n            c += 1\n    return string[:-1]\n\n\n-----Examples-----\n\nInput\n2\nabcdef\nabcdf\n\nOutput\n2\nacdf\n\nInput\n4\nacdf\nabcd\n\nOutput\n4\n3 5 4 5 \n\nInput\n1\na\n\nOutput\n-1\n\n'''\n\nn, m = [int(i) for i in input().split(\" \")]\ns = input().split(\" \")\n\ndef"
    },
    {
        "number": 4053,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = list(map(int, stdin.split()))\n    prefix = s[:n]\n    suffix = s[n:]\n    for prefix_i in range(n-1, -1, -1):\n        prefix_i = str(prefix_i)\n        prefix_i = \"\".join(map(str, prefix_i))\n        suffix_i = \"\".join(map(str, s[prefix_i:n+1]))\n        if prefix_i == suffix_i:\n            return prefix_i + suffix\n    return prefix + suffix\n\ndef"
    },
    {
        "number": 4053,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    for std in map(str.split, stdin.split('\\n')):\n        if len(std) == 1:\n            std = std[0]\n        if std in {'P', 'S', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'}:\n            answer = std\n            return answer\n"
    },
    {
        "number": 4053,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = [stdin[i:i+n] for i in range(0, n, 2)]\n    # print(s)\n    return \"\".join(s[i] for i in range(len(s) - 1))\n\nprint(solution(\"ba\"))"
    },
    {
        "number": 4053,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4053,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    strings = [line.strip() for line in stdin.split()]\n    def isPrefix(s):\n        return all(s.startswith(prefix) for prefix in range(1, n+1))\n    def isSuffix(s):\n        return all(s.endswith(suffix) for suffix in range(1, n+1))\n    p, s = [], []\n    for s in strings:\n        if isPrefix(s):\n            p.append(s)\n        else:\n            s = s[1:]\n            if isSuffix(s):\n                s = s[:-1]\n                if isPrefix(s):\n                    p.append(s)\n                else:\n                    s = s[1:]\n                    if isSuffix(s):\n                        s = s[:-1]\n                        p.append(s)\n    return''.join(p[::-1])\n"
    },
    {
        "number": 4053,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\ndef"
    },
    {
        "number": 4053,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(str, stdin.split(\" \"))\n    \n    prefixes = set()\n    suffixes = set()\n    \n    for i in range(1, int(n) + 1):\n        prefixes.add(s[:i])\n        suffixes.update([s[i:]])\n    \n    prefixes = list(sorted(list(prefixes)))\n    suffixes = list(sorted(list(suffixes), key=len))\n    \n    prefixes.append(\"P\")\n    suffixes.append(\"S\")\n    \n    answer = \"\"\n    \n    for prefix in prefixes:\n        if prefix in suffixes:\n            answer += prefix\n        else:\n            answer += prefix + \"P\"\n    \n    return answer\n\ndef"
    },
    {
        "number": 4053,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    if len(s) <= n: return ''\n    prefix, suffix = map(str, s[:n])\n    ans = []\n    for i in range(1, n+1):\n        if prefix[:i] == prefix[i:]:\n            ans.append(prefix[:i])\n            ans.append(suffix[:i])\n            if i + 1 < n: ans.append(prefix[i:])\n            if i + 2 < n: ans.append(suffix[i:])\n    return ''.join(ans)\n"
    },
    {
        "number": 4053,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip().split()[-1])\n    for i in range(2, n+1):\n        print(f\"{i}\\t{''.join(['P' if j >= i else 'S' for j in range(1, i+1)]).strip()}\")\n    \n    return 'SP'\n\nTime Limit: 1 second\n\"\"\"\nclass Solution:\n    def prefixesAndsuffixes(self, string: str) -> List[str]:\n        result = []\n        for i in range(1, len(string)):\n            prefix = string[:i]\n            suffix = string[i:]\n            if prefix and suffix:\n                result.append(prefix + suffix)\n        return result"
    },
    {
        "number": 4053,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    answer = []\n    for _ in range(n):\n        s = stdin.strip()\n        answer.append(s[:])\n    answer.sort()\n    return answer[-1]\nsolution(\"7 3\") # SPPSP\nsolution(\"6 1\") # PS\nsolution(\"5 4\") # PSPSPSPSPSPSPS\nsolution(\"4 3\") # SPPPSP\nsolution(\"3 2\") # SPPSPSSP\n"
    },
    {
        "number": 4054,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin[0]) + int(stdin[1]))\n\nInput\n6 4 2 3\n\nOutput\n5\n\n'''\n\ndef"
    },
    {
        "number": 4054,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str(eval(stdin))\n\n\n-----Constraints-----\n0 <= stdin.length <= 100\n0 <= a_i <= 100\n\n-----Personal Notes-----\n"
    },
    {
        "number": 4054,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a_list = stdin.split()\n    a = list(map(int, a_list))\n    print(a[0])\nsolution(input())\n"
    },
    {
        "number": 4054,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(eval(stdin))\n\ndef"
    },
    {
        "number": 4054,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    stdin.pop(0)\n    d = int(stdin[0])\n    stdin.pop(0)\n    l = [0] + list(map(int, stdin))\n    for i in range(n):\n        if d % 2 == 0:\n            d = d//2\n        else:\n            d = 3*d//2\n        l[i] = l[i] % (d**2)\n    print(d)\n    print(' '.join(str(i) for i in l[::-1]))\n\n-----Tests-----\n>>> test.assert_equals(solution(\"2 4 6 8 10\"), \"1\")\nTrue\n>>> test.assert_equals(solution(\"2 4 6 8 10 12\"), \"12\")\nTrue\n>>> test.assert_equals(solution(\"2 4 6 8 10 13\"), \"13\")\nTrue\n>>> test.assert_equals(solution(\"2 4 6 8 10 15\"), \"15\")\nTrue\n>>> test.assert_equals(solution(\"2 4 6 8 10 16\"), \"16\")\nTrue\n>>> test.assert_equals(solution(\"2 4 6 8 10 17\"), \"17\")\nTrue\n>>> test.assert_equals(solution(\"2 4 6 8 10 18\"), \"18\")\nTrue\n>>> test.assert_equals(solution(\"2 4 6 8 10 19\"), \"19\")\nTrue\n>>> test.assert_equals(solution(\"2 4 6 8 10 20\"), \"20\")\nTrue\n>>> test.assert_equals(solution(\"2 4 6 8 10 21\"), \"21\")\nTrue\n>>> test.assert_equals(solution(\"2 4 6 8 10 22\"), \"22\")\nTrue\n>>> test.assert_equals(solution(\"2 4 6 8 10 23\"), \"23\")\nTrue\n>>> test.assert_equals(solution(\"2 4 6 8 10 24\"), \"24\")\nTrue\n>>> test.assert_equals(solution(\"2 4 6 8 10 25\"), \"25\")\nTrue\n>>> test.assert_equals(solution(\"2 4 6 8 10 26\"), \"26\")\nTrue\n>>> test.assert_equals(solution(\"2 4 6 8 10 27\"), \"27\")\nTrue\n>>> test.assert_equals(solution(\"2 4 6 8 10 28\"), \"28\")\nTrue\n>>> test.assert_equals(solution(\"2 4 6 8 10 29\"), \"29\")\nTrue\n>>> test.assert_equals(solution(\"2 4 6 8 10 30\"), \"30\")\nTrue\n>>> test.assert_equals(solution(\"2 4 6 8 10 31\"), \"31\")\nTrue\n>>> test.assert_equals(solution(\"2 4 6 8 10 32\"), \"32\")\nTrue\n>>> test.assert_equals(solution(\"2 4 6 8 10 33\"), \"33\")\nTrue\n>>> test.assert_equals(solution(\"2 4 6 8 10 34\"), \"34\")\nTrue\n>>> test.assert_equals(solution(\"2 4 6 8 10 35\"), \"35\")\nTrue\n>>> test.assert_equals(solution(\"2 4 6 8 10 36\"), \"36\")\nTrue\n>>> test.assert_equals(solution(\"2 4 6 8 10 37\"), \"37\")\nTrue\n>>> test.assert_equals(solution(\"2 4 6 8 10 38\"), \"38\")\nTrue\n>>> test.assert_equals(solution(\"2 4 6 8 10 39\"), \"39\")\nTrue\n>>> test.assert_equals(solution(\"2 4 6 8 10 40\"), \"40\")\nTrue\n>>> test.assert_equals(solution(\"2 4 6 8 10 41\"), \"41\")\nTrue\n>>> test.assert_equals(solution(\"2 4 6 8 10 42\"), \"42\")\nTrue\n>>> test.assert_equals(solution(\"2 4 6 8 10 43\"), \"43\")\nTrue\n>>> test.assert_equals(solution(\"2 4 6 8 10 44\"), \"44\")\nTrue\n>>> test.assert_equals(solution(\"2 4 6 8 10 45\"), \"45\")\nTrue\n>>> test.assert_equals(solution(\"2 4 6 8 10 46\"), \"46\")\nTrue\n>>> test.assert_equals(solution(\"2 4 6 8 10 47\"), \"47\")\nTrue\n>>> test.assert_equals(solution(\"2 4 6 8 10 48\"), \"48\")\nTrue\n>>> test.assert_equals(solution(\"2 4 6 8 10 49\"), \"49\")\nTrue\n>>> test.assert_equals(solution(\"2 4 6 8 10 50\"), \"50\")\nTrue\n>>> test.assert_equals(solution(\"2 4 6 8 10 51\"), \"51\")\nTrue\n>>> test.assert_equals(solution(\"2 4 6 8 10 52\"), \"52\")\nTrue\n>>> test.assert_equals(solution(\"2 4 6 8 10 53\"), \"53\")\nTrue\n>>> test.assert_equals(solution(\"2 4 6 8 10 54\"), \"54\")\nTrue\n>>> test.assert_equals(solution(\"2 4 6 8 10 55\"), \"55\")\nTrue\n>>> test.assert_equals(solution(\"2 4 6 8 10 56\"), \"56\")\nTrue\n>>> test.assert_equals(solution(\"2 4 6 8 10 57\"), \"57\")\nTrue\n>>> test.assert_equals(solution(\"2 4 6 8 10 58\"), \"58\")\nTrue\n>>> test.assert_equals(solution(\"2 4 6 8 10 59\"), \"59\")\nTrue\n>>> test.assert_equals(solution(\"2 4 6 8 10 60\"), \"60\")\nTrue\n>>> test.assert_equals(solution(\"2 4 6 8 10 61\"), \"61\")\nTrue\n>>> test.assert_equals(solution(\"2 4 6 8 10 62\"), \"62\")\nTrue\n>>> test.assert_equals(solution(\"2 4 6 8 10 63\"), \"63\")\nTrue\n>>> test.assert_equals(solution(\"2 4 6 8 10 64\"), \"64\")\nTrue\n>>> test.assert_equals(solution(\"2 4 6 8 10 65\"), \"65\")\nTrue\n>>> test.assert_equals(solution(\"2 4 6 8 10 66\"), \"66\")\nTrue\n>>> test.assert_equals(solution(\"2 4 6 8 10 67\"), \"67\")\nTrue\n>>> test.assert_equals(solution(\"2 4 6 8 10 68\"), \"68\")\nTrue\n>>> test.assert_equals(solution(\"2 4 6 8 10 69\"), \"69\")\nTrue\n>>> test.assert_equals(solution(\"2 4 6 8 10 70\"), \"70\")\nTrue\n>>> test.assert_equals(solution(\"2 4 6 8 10 71\"), \"71\")\nTrue\n>>> test.assert_equals(solution(\"2 4 6 8 10 72\"), \"72\")\nTrue\n>>> test.assert_equals(solution(\"2 4 6 8 10 73\"), \"73\")\nTrue\n>>> test.assert_equals(solution(\"2 4 6 8 10 74\"), \"74\")\nTrue\n>>> test.assert_equals(solution(\"2 4 6 8 10 75\"), \"75\")\nTrue\n>>> test.assert_equals(solution(\"2 4 6 8 10 76\"), \"76\")\nTrue\n>>> test.assert_equals(solution(\"2 4 6 8 10 77\"), \"77\")\nTrue\n>>> test.assert_equals(solution(\"2 4 6 8 10 78\"), \"78\")\nTrue\n>>> test.assert_equals(solution(\"2 4 6 8 10 79\"), \"79\")\nTrue\n>>> test.assert_equals(solution(\"2 4 6 8 10 80\"), \"80\")\nTrue\n>>> test.assert_equals(solution(\"2 4 6 8 10 81\"), \"81\")\nTrue\n>>> test.assert_equ"
    },
    {
        "number": 4054,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a_list = []\n    b_list = []\n    for _ in range(0, len(stdin), 3):\n        a_list.append(stdin[0])\n        b_list.append(stdin[1])\n    print(''.join(a_list) + ''.join(b_list))\n    return ''.join(a_list)\n\nIn python, a, b = [int(s) for s in input().split()]\nprint(solution(str(a) + str(b)))\n"
    },
    {
        "number": 4054,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return '\\u2588'\n\n>>> solution(\"2 4 6 8 10\")\n'1'\n\n>>> solution(\"1 2 4 8\")\n'2'\n\n>>> solution(\"0 1 1 2\")\n'2'\n\n>>> solution(\"1 0 0 0\")\n'0'\n\n>>> solution(\"0 0 1 2\")\n'1'\n\n>>> solution(\"0 0 0 0\")\n'0'\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4054,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    m = int(stdin.split()[1])\n    c = [list(map(int, input().split())) for i in range(m)]\n    nums = []\n    for i in range(len(c)):\n        nums.append(sum(c[i]))\n    answer = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            answer += (n//i) * nums[n//i-1]\n    return str(answer)\n"
    },
    {
        "number": 4054,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    l = [int(x) for x in stdin.split()]\n    a = 0\n    for i in range(len(l)):\n        a += l[i] * pow(2, i)\n    return str(a)"
    },
    {
        "number": 4054,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4055,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, k = [int(i) for i in stdin.strip().split()]\n    \n    distinct = [1]*n\n    \n    for i in range(n):\n        if i > 0:\n            distinct[i-1] = 0\n        for j in range(i+1, n):\n            if distinct[j-1] == 0:\n                distinct[j-1] = 1\n                \n    res = [0]*k\n    for i in range(k):\n        res[i] = int(stdin.strip().strip('\\n'))\n    \n    for i in range(k-1):\n        res[i] = res[i+1]\n    \n    for i in range(k-1, k):\n        res[i] = res[i-1] + distinct[i-1] -1\n        \n    for i in range(n-1):\n        if res[i] >= 0:\n            res[i] = 1\n        else:\n            res[i] = 0\n    \n    return '\\n'.join('{:d}'.format(i) for i in res)"
    },
    {
        "number": 4055,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 == 0:\n        return \"0\"\n    count = 0\n    for i in range(n):\n        if (i % 2 == 0):\n            count = count + 1\n        else:\n            count = count - 1\n        if count == 0:\n            return \"0\"\n    return str(count)\n    \n\nExample:\nInput:\n4\n1 1 1 0 1 0 1 0 0\nOutput:\n2\nExplanation:\nWe will only have 2 pairs of distinct flats, so there is no minimum number of 2 pairs of distinct flats.\n\"\"\"\n\ndef"
    },
    {
        "number": 4055,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    k, a, n = map(int, stdin.split())\n    b = [1]*n\n    for i in range(1, n):\n        for j in range(i):\n            if b[j]==0:\n                b[i]=1\n    c=0\n    for i in range(k-1):\n        if b[i]==1 and b[i+1]==1:\n            c+=1\n    for i in range(n-k):\n        if b[i]==1:\n            c+=1\n    return str(c)\n\n-----Advanced-----\n\nTime complexity: O(n)\n\nSpace Complexity: O(n)\n"
    },
    {
        "number": 4055,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = [int(i) for i in stdin.split()]\n    for i in range(1, n+1):\n        a[i-1] = max(a[i-1], a[i-2]+1)\n    return str(min(a))"
    },
    {
        "number": 4055,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n < 2:\n        return \"0\"\n    elif n == 2:\n        return \"1\"\n    elif n == 3:\n        return \"0\"\n    else:\n        a_1 = [0] * (n - 1)\n        a_2 = [0] * (n - 1)\n        a_2[0] = a_2[1] = 1\n        for i in range(2, n):\n            a_2[i] = a_2[i - 1] + a_1[i - 1]\n            a_1[i] = a_1[i - 1] + a_1[i - 2] + a_2[i - 2]\n        return str(a_1[n - 1]) + str(a_2[n - 1])\n"
    },
    {
        "number": 4055,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        print(0)\n        return\n    \n    if n == 2:\n        print(1)\n        return\n    \n    if n == 3:\n        print(2)\n        return\n    \n    if n == 4:\n        print(2)\n        print(7)\n        return\n    \n    if n == 5:\n        print(2)\n        print(7)\n        print(4)\n        return\n    \n    print(3)\n    print(7)\n    print(4)\n    print(7)\n    \n    \n    \n"
    },
    {
        "number": 4055,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = [int(i) for i in stdin.split()]\n    i = 0\n    # print(a)\n    # print(a[1:len(a)])\n    # print(a[1:len(a)][::-1])\n    while True:\n        if a[i] == 0:\n            i += 1\n            if i >= len(a):\n                return '0'\n            if a[i] == 1:\n                i += 1\n                if i >= len(a):\n                    return '0'\n                if a[i] == 0:\n                    i += 1\n                    if i >= len(a):\n                        return '0'\n        else:\n            i = 0\n            if a[i] == 1:\n                i += 1\n                if i >= len(a):\n                    return '0'\n                if a[i] == 0:\n                    i += 1\n                    if i >= len(a):\n                        return '0'\n        if a[i] == 1:\n            if i >= len(a):\n                return '0'\n            if a[i] == 0:\n                i += 1\n                if i >= len(a):\n                    return '0'\n                if a[i] == 0:\n                    i += 1\n                    if i >= len(a):\n                        return '0'\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4055,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    nums = list(map(int, stdin.split()))\n    \n    k = 0\n    result = None\n    \n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if nums[i] == nums[j]:\n                k += 1\n        \n        if k > 0:\n            result = k\n            break\n        k = 0\n    \n    return str(result)\n"
    },
    {
        "number": 4055,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    arr = list(map(int, input().strip().split()))\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]!= arr[j] and arr[i]!= 0 and arr[j]!= 0:\n                return str(n - j - i + 1)\n    return str(n)\n\n\nInput\n5\n1 1 0 1 1 0 1 0 1 0\n\nOutput\n2\n\nInput\n6\n1 1 0 0 0 1 1 1 1\n\nOutput\n0\n\nInput\n6\n1 1 0 0 0 1 1 1 1\n\nOutput\n0\n\n\n-----Note-----\n\nIn this example all four pair of flats are distinct and the light is on.\n\nIn the first example all four pairs of flats are distinct and the light is on.\n\nIn the second example, all four pairs of flats are distinct and the light is off.\n\nIn the third example, all four pairs of flats are distinct and the light is off.\n\nIn the fourth example all four pairs of flats are distinct and the light is off.\n\nFor example, in this example, there are two pairs of flats whose lights are on.\n\nExample:\n\nInput:\n5\n1 1 0 1 1 0 1 0 1 0\n\nOutput:\n2\n\nInput:\n6\n1 1 0 0 0 1 1 1 1\n\nOutput:\n0\n\nInput:\n6\n1 1 0 0 0 1 1 1 1\n\nOutput:\n0\n\n\n-----Note-----\n\nIn this example all four pairs of flats are distinct and the lights are off.\n\nIn the first example all four pairs of flats are distinct and the lights are off.\n\nIn the second example, all four pairs of flats are distinct and the lights are on.\n\nIn the third example, all four pairs of flats are distinct and the lights are on.\n\nIn the fourth example all four pairs of flats are distinct and the lights are off.\n\nExample:\n\nInput:\n5\n1 1 0 1 1 0 1 0 1 0\n\nOutput:\n2\n\nInput:\n6\n1 1 0 0 0 1 1 1 1\n\nOutput:\n0\n\nInput:\n6\n1 1 0 0 0 1 1 1 1\n\nOutput:\n0\n\n\n-----Note-----\n\nIn this example all four pairs of flats are distinct and the lights are on.\n\nIn the first example all four pairs of flats are distinct and the lights are on.\n\nIn the second example, all four pairs of flats are distinct and the lights are off.\n\nIn the third example, all four pairs of flats are distinct and the lights are off.\n\nIn the fourth example all four pairs of flats are distinct and the lights are off.\n\nExample:\n\nInput:\n5\n1 1 0 1 1 0 1 0 1 0\n\nOutput:\n2\n\nInput:\n6\n1 1 0 0 0 1 1 1 1\n\nOutput:\n0\n\nInput:\n6\n1 1 0 0 0 1 1 1 1\n\nOutput:\n0\n\n\n\"\"\""
    },
    {
        "number": 4055,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def get_state(data: str):\n        a = data.split()\n        return [int(x) for x in a[0::2]] + [1] * (int(a[1]) - int(a[0]))\n\n    n = int(stdin)\n    a1 = get_state(stdin[0])\n    a2 = get_state(stdin[1])\n    a3 = get_state(stdin[2])\n    a4 = get_state(stdin[3])\n    a5 = get_state(stdin[4])\n    k = 0\n    for i in range(n):\n        if a1[i] == a2[i] and a1[i] == a3[i] and a1[i] == a4[i] and a1[i] == a5[i]:\n            k += 1\n    print(k)\n\n\n-----Constraints-----\n\n1 <= n <= 3 * 10^4\n\n1 <= a_i <= 10^4\n\n\n-----Time Limit: 30 seconds per testcase -----\n\nRuntime: 2068 ms, faster than 23.35% of Python3 online submissions for Minimum Number of Flats.\nMemory Usage: 14.2 MB, less than 27.91% of Python3 online submissions for Minimum Number of Flats.\n\n\n-----Testcase Example-----\nTestcase 1:\nInput\n5\n1 1 0 1 1 0 1 0 1 0\n\nOutput\n0\n\nTestcase 2:\nInput\n7\n1 1 1 1 1 1 1 1 1 1\n\nOutput\n2\n\n\"\"\"\n\nclass Solution:\n    def minFlowers(self, n: int, a: str) -> int:\n        dp = [0]*n\n        dp[0] = 1\n        dp[1] = 1\n        for i in range(2, n):\n            dp[i] = (dp[i-1] + dp[i-2]) % 10007\n        return dp[n-1]\n\n\nclass Solution:\n    def minFlowers(self, n: int, a: str) -> int:\n        d = [0]*(n+1)\n        d[0] = 1\n        for i in range(1, n+1):\n            for j in range(n+1):\n                if a[j-1] == a[j]:\n                    if d[j-1] > d[j]:\n                        d[j] = d[j-1]\n        return d[n]\n"
    },
    {
        "number": 4056,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    answer = 0\n    a = list(map(int, stdin.split()))\n    for x in range(len(a)):\n        for y in range(x+1, len(a)):\n            if a[x]%a[y]==0:\n                answer += 1\n    return str(answer)\n\n\n-----Constraints-----\n0 <= n <= 10^6\n0 <= a[i] <= 10^9\n\n\"\"\""
    },
    {
        "number": 4056,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    x = set(a)\n    result = 0\n    for i in x:\n        result += a.count(i)\n    return str(result)"
    },
    {
        "number": 4056,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    from itertools import permutations\n    def solve(n, a):\n        perm = []\n        for i in permutations(a):\n            perm.append(sum(i))\n        return n // sum(perm)\n    n, *a = map(int, stdin.split())\n    return str(solve(n, a))\n"
    },
    {
        "number": 4056,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[-1])\n    a = list(map(int, stdin.split()[:-1]))\n    ans = 0\n    for i in range(len(a)):\n        if a[i] == a[i-1]:\n            continue\n        elif a[i] == a[i-1]:\n            ans += 1\n    return str(ans)\n"
    },
    {
        "number": 4056,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int,stdin.split()))\n    x = len(set(a))\n    #print(x)\n    #print(set(a))\n    #print(a)\n    x = sum([1 for i in a if i%2 == 0])\n    print(x)\n    return str(x)\n    #return str(len(set(a)))\n"
    },
    {
        "number": 4056,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    arr, res = [int(i) for i in stdin.split()], []\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[j] % arr[i] == 0:\n                res.append(j-i)\n                break\n    print(len(res))\n    return str(len(res))\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4056,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = []\n    for _ in range(n):\n        a.append(int(stdin.split()[-1]))\n    answer = 0\n    for i in range(1, len(a)):\n        for j in range(i):\n            if a[j] % a[i] == 0:\n                answer += 1\n    return str(answer)\n\n\n-----Time complexity----\n\nTime complexity: O(n)\n\nSpace Complexity: O(n)\n\"\"\"\n\ndef"
    },
    {
        "number": 4056,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int,stdin.split()))\n    c = {}\n    for i in range(n):\n        c[a[i]]=i\n    \n    def divisors(n:int):\n        if n==1:\n            return [1]\n        elif n==2:\n            return [1,2]\n        elif n==3:\n            return [1,3]\n        elif n==4:\n            return [1,2,3]\n        elif n==5:\n            return [1,2,3,4]\n        else:\n            divisors(n//2)\n            divisors(n-1)\n            return [i+1 for i in c.values() if i<=n]\n\n    return '\\n'.join(map(str,divisors(sum(c.values()))))\n"
    },
    {
        "number": 4056,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return str(sum(map(int, map(lambda x: int(x)//x, stdin.split()))))\n\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(solution(a))"
    },
    {
        "number": 4056,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    answer = []\n    a = list(map(int, stdin.split()))\n    for i in range(0, len(a)-1):\n        for j in range(i+1, len(a)):\n            if a[i] % a[j] == 0:\n                answer.append(a[j])\n    return ''.join(str(len(answer)))\n\n\n\n\"\"\"\ndef"
    },
    {
        "number": 4057,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a = list(map(int, stdin.split()))\n    a.sort()\n    a_min = a[0]\n    if a_min == a[-1]:\n        a_min = a_min\n    if a_min!= a[-1]:\n        a_min += 1\n    i = 1\n    while a_min <= n and a[i]!= a_min:\n        i += 1\n    return i if i < n else i - 1\n"
    },
    {
        "number": 4057,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    i = 1\n    while True:\n        if len(set(a))==1:\n            break\n        a.remove(min(a))\n        i += 1\n    return str(i)\n\"\"\"\nimport collections\n\n\nclass Solution:\n    def numberOfCoins(self, n: int) -> int:\n        a = []\n        def dfs(arr, i):\n            for j in range(i, len(arr)):\n                if arr[j] in a:\n                    continue\n                a.append(arr[j])\n                dfs(arr, j)\n        dfs(a, 0)\n        return len(a)"
    },
    {
        "number": 4057,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip().split(\" \")[0])\n    a = [int(stdin.strip().split(\" \")[i]) for i in range(1, n + 1)]\n    a.sort()\n    a = list(set(a))\n    a.sort()\n    return \" \".join([str(i) for i in a])\n    \n"
    },
    {
        "number": 4057,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int,stdin.split()))\n    min_n = a[0]\n    max_n = sum(a)\n    a_set = set(a)\n    a_set_sorted = sorted(a_set)\n    for i in a_set_sorted:\n        if a.count(i) <= 1:\n            continue\n        a_set.discard(i)\n        if len(a_set) == 1:\n            break\n    print(len(a_set))\n    return a_set"
    },
    {
        "number": 4057,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, input().split()))\n    min_value = 10000\n    for i in range(n):\n        if a[i] < min_value:\n            min_value = a[i]\n    return str(min_value)\n\nTest cases\nInput 1\n6\n1 2 4 3 3 2\n\nOutput 1\n4\n\nInput 2\n1\n100\n\nOutput 2\n1\n\n\"\"\"\n\n\n\ndef"
    },
    {
        "number": 4057,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return min(int(stdin[0]), int(stdin[1]))\n"
    },
    {
        "number": 4057,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def solve(coins):\n        if len(coins) == 1:\n            return coins[0]\n        min_price = coins[0] + solve(coins[1:])\n        if coins[0] + min_price >= min_price:\n            return min_price\n        for i in range(1, len(coins)):\n            min_price = min(min_price, solve(coins[:i] + coins[i + 1:]) + coins[i])\n        return min_price\n\n    for line in stdin:\n        print(solve([int(x) for x in line.split()]))\n"
    },
    {
        "number": 4057,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join(map(str, stdin.split()))\n"
    },
    {
        "number": 4057,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    \n    # first value of the array is $n$\n    a = [int(i) for i in stdin.split()]\n    \n    # array contains the number of each element of array\n    a_length = len(a)\n    \n    # ans is a minimum number of pockets\n    ans = 1\n    \n    # loop over array\n    for i in range(a_length):\n        # get the value of current element\n        a[i] = a[i] * a_length\n        \n        # for each element calculate minimum number of pockets\n        for j in range(i, a_length):\n            # get the value of current element\n            # in order to calculate the minimum number of pockets\n            # we need to use a * operator\n            a[j] = a[j] * a_length\n            \n            # if there is a difference with the minimum number of pockets\n            # we need to check the current value of the pocket\n            # to check if the current element is already included\n            # in the pocket\n            if a[j] - a_length <= a[i]:\n                ans += 1\n    \n    # return minimum number of pockets\n    return ans\n\n-----Basic Approach-----\n\ndef"
    },
    {
        "number": 4057,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = []\n    for i in range(n):\n        a.append(int(stdin.strip()[i]))\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 4058,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    heaters = []\n    heaters_num = len(arr)\n    heaters_min = heaters_num\n    for i in range(heaters_num):\n        heaters.append(arr[i] if i < heater_num else 0)\n    if len(heaters) > r:\n        heaters_num = len(heaters)\n        heaters_min = min(heaters_num, r)\n    for i in range(heaters_num):\n        heaters[i] = 1 if (heaters[i] < 1) else 0\n        if not (heaters[i] == 1):\n            heaters[i] = (heaters[i] - 1)\n    if (heaters_min == 0) or (heaters_min == 1):\n        return -1\n    result = heaters_min\n    for i in range(heaters_min + 1, len(heaters)):\n        if not (heaters[i] == 1):\n            heaters[i] = (heaters[i] - 1)\n        if not (heaters[i] == 1):\n            heaters[i] = 0\n        if (heaters[i] < 0) and (heaters[i] == 1):\n            heaters[i] = 0\n        result = min(result, len(heaters) - i)\n    return str(result)\n"
    },
    {
        "number": 4058,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, r = list(map(int, stdin.split()))\n\n    heaters = {}\n    for i in range(1, n+1):\n        heaters[i] = int(stdin.split()[i])\n        heaters[i+r] = int(stdin.split()[i+r])\n\n    if len(heaters)!= n:\n        return -1\n    \n    min_heaters = min(heaters.values())\n    if min_heaters == 0:\n        return -1\n    \n    return min(heaters[min_heaters], min(heaters[min_heaters-1], min_heaters-heaters[min_heaters]))\n\n----------------------------------------------------------------------------------------------------------------------\n\ninput\n11\n1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"
    },
    {
        "number": 4058,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    heaters = list(map(int, stdin.split()))\n    heaters_sorted = sorted(heaters)\n    c_n = 0\n    c_r = 0\n    for i in range(n):\n        if c_n == r:\n            c_n = 0\n            c_r += 1\n        elif c_r == r:\n            c_n += 1\n            c_r = 0\n        else:\n            c_n += 1\n            c_r += 1\n    if c_n == n:\n        print(-1)\n        return\n    print(c_n)\n    if c_r == r:\n        print(c_r)\n        return\n    if c_r < r:\n        c_n, c_r = c_r, c_n\n        c_n -= 1\n    if c_n < n:\n        c_n, c_r = c_r, c_n\n        c_n += 1\n    print(c_n)\n    print(c_r)\n    return\n\n\nsolution(\"4 3\")\n"
    },
    {
        "number": 4058,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, r = list(map(int, stdin.split()))\n    a = list(map(int, input().split()))\n    answer = 0\n\n    if n <= r:\n        answer = n\n    else:\n        answer = r\n    return str(answer)\n\n\nprint(solution(stdin))"
    },
    {
        "number": 4058,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    res = [0] * (n + 1)\n    a = []\n    if r > 0:\n        a.append((r - 1) // 2)\n    else:\n        a.append(r // 2)\n    for _ in range(n):\n        a.append(a.pop())\n    for i in range(1, n + 1):\n        res[i] = a[i - 1] + (r - a[i - 1]) // (2 * a[i])\n    for i in range(n - 1, -1, -1):\n        res[i] = res[i + 1]\n        if a[i] == 0:\n            a.pop()\n    if res[r] >= 3:\n        return '-1'\n    else:\n        return str(res[r])\n    \n\n-----Constraints-----\n\n1 <= n <= 100\n\n0 <= r <= 1\n\n-----Time Limit: 0.05s (PyPy 3.8.1)\n\n----SOLUTION----\ndef"
    },
    {
        "number": 4058,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    arr = [0] * (n + 1)\n    for i in range(n):\n        arr[i + 1] = arr[i] + A[i]\n    print(min(arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6]))\n    return str(arr[0]) if arr[0] >= arr[1] and arr[1] >= arr[2] and arr[2] >= arr[3] and arr[3] >= arr[4] and arr[4] >= arr[5] and arr[5] >= arr[6] else -1\n    \n    \nsolution(input())\n"
    },
    {
        "number": 4058,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    st = list(map(int, stdin.split()))\n    e = len(st)\n    if e < 2:\n        return -1\n    if r == 1:\n        return (2 * max(st[0], st[1])) + (5 * max(st[2], st[3]))\n    else:\n        return (max(st[0], st[1])) + max(st[2], st[3])\n"
    },
    {
        "number": 4058,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    heaters = map(int, stdin.split())\n    \n    heaters = sorted(heaters)\n    \n    if r % 2 == 0:\n        heaters = [heaters[0]] + [heaters[i] + 1 for i in range(n - 1, r - 1, -2)]\n    else:\n        heaters = [heaters[0]] + [heaters[i] + 1 for i in range(n - 1, r - 1, 2)]\n    \n    heaters = sorted(heaters)\n    answer = [heaters[i] for i in range(n) if i % 2 == 0] + [heaters[i] for i in range(n - 1, r - 1, 2) if i % 2 == 1]\n    \n    return''.join(map(str, answer))"
    },
    {
        "number": 4058,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    heaters = [0 for i in range(n)]\n    for i in range(n):\n        heaters[i] = int(stdin[i])\n    heaters.sort()\n    diff = r - 1\n    temp = 0\n    for i in range(n):\n        temp += (n - i - 1) * heaters[i]\n    if diff == 0:\n        return str(temp)\n    elif temp > diff:\n        return str(temp)\n    elif temp <= diff:\n        return str(n - diff - 1)\n    else:\n        return str(n - diff)\n\n'''\ndef"
    },
    {
        "number": 4058,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, r = [int(i) for i in stdin.split(' ')]\n    visited = [0] * n\n    answer = []\n    # for all the elements of the array\n    for i in range(n):\n        visited[i] = 1\n    # for the last element\n    for i in range(n - 1, -1, -1):\n        if visited[i] == 1:\n            visited[i] = 0\n            # for the right side of the array\n            for j in range(i + 1, n):\n                if visited[j] == 1:\n                    visited[j] = 0\n                    answer.append(j - i)\n    if len(answer) < r:\n        return -1\n    answer = sorted(answer)\n    return answer[r - 1]\n\n\n-----Constraints-----\n\n1 <= n <= 100,000\n0 <= r <= 1000\n1 <= a_1, a_2, \\dots, a_n <= 10^9\n\n----Submit this question if you like----\nAccepted\n57,807\nSubmissions\n111,421\nMemory Usage\n26,200\n\n-----Time Limit-----\nLevel 1: 72 ms\n\nRuntime: 48 ms, faster than 62.81% of Python3 online submissions for Minimum Number of Heaters to Warm Up The Whole House.\nMemory Usage: 26.1 MB, less than 91.13% of Python3 online submissions for Minimum Number of Heaters to Warm Up The Whole House.\n\"\"\"\nfrom imports import *\n\n\ndef"
    },
    {
        "number": 4059,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    N, K = map(int, stdin.split())\n    A, B, C = map(int, stdin.split())\n    cnt = 0\n    for i in range(1, N + 1):\n        if A * i + B * i + C * i == K:\n            cnt += 1\n    return str(cnt)\n\n-----Time complexity-----\nO(N)\n\nO(N)\n\nO(N)\n"
    },
    {
        "number": 4059,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 4059,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    a = []\n    for line in stdin:\n        a.append(list(map(int, line.split(\" \"))))\n    \n    t = len(a)\n    if t == 1:\n        return str(1)\n    \n    def solve(a):\n        if len(a)!= t:\n            return 0\n        \n        for i in range(t):\n            for j in range(i+1, t):\n                if a[i] + a[j] == t:\n                    return 1\n        \n        return 0\n        \n    for i in range(t):\n        if solve(a[i]):\n            return str(1)\n    \n    return str(0)\n\n\"\"\"\n"
    },
    {
        "number": 4059,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    numbers: list = [int(x) for x in stdin.split()]\n    ans: str = \"\"\n    for i in numbers:\n        for j in range(1, len(numbers)):\n            k = j\n            while (k * k) % i == 0:\n                k = (k + 1) // 2\n            ans += str(k) + \" \"\n    return ans.rstrip()\n\n-----Sample Input-----\n1\n5\n3\n4\n2\nSample Output\n3\n\nThere are 3 tuples of integers that satisfy A \\times B + C = 4: (1, 2, 3), (1, 2, 3), (1, 3, 2).\n\n-----Sample Input-----\n2\n5\n4\n2\nSample Output\n2\n\nThere are 2 tuples of integers that satisfy A \\times B + C = 5: (1, 2, 3), (1, 3, 2).\n\n-----Sample Input-----\n4\n6\n2\nSample Output\n2\n\nThere are 2 tuples of integers that satisfy A \\times B + C = 6: (1, 2, 3), (1, 3, 2).\n\n\"\"\"\n\n\"\"\"\nthe solution is complete, but we do not need to consider any other cases\n"
    },
    {
        "number": 4059,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n  N = int(stdin)\n  arr = []\n  for i in range(N):\n    arr.append(list(map(int, stdin.split(\" \"))))\n  \n  if len(set([tuple(x) for x in arr])) == N:\n    return str(len(set([tuple(x) for x in arr])))\n  else:\n    return \"0\"\n\nprint(solution(\"2 1 4\"))\n\ndef"
    },
    {
        "number": 4059,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n  \n  N = int(stdin)\n  \n  answer = 0\n  \n  for i in range(2 ** N):\n    bin_val = bin(i)[2:]\n    if bin_val == \"11\":\n      bin_val = \"1\"\n    if bin_val == \"10\":\n      bin_val = \"0\"\n    answer += int(bin_val, 2)\n  return str(answer)\n"
    },
    {
        "number": 4059,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    _, *A = list(map(int, stdin))\n    return str(len(set(A)))\n\"\"\""
    },
    {
        "number": 4059,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str(len([1,1,2]))\n\n---Quick-sort---\n\n* Time: O(nlogn + log n)\n* Space: O(n)\n\n- O(log n)\n- O(n)\n\nn = int(input())\n\na = list(map(int, input().split()))\na.sort()"
    },
    {
        "number": 4059,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n%2!= 0: return 'NO'\n    # Use odd numbers to limit the number of tuples\n    for i in range(0, n//2):\n        j = i + 1\n        # print(i, j, n)\n        t = 0\n        # print(i, j, n)\n        while n%2!= 0 and j < n:\n            t += 2\n            j += 2\n            # print(i, j, n)\n        # print(t, n)\n        # print(i, j, n)\n        if t > n:\n            break\n    # print(i, j, n)\n    return str(t)\n\nprint(solution('3'))"
    },
    {
        "number": 4059,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    A, B, C = map(int, stdin.split(' '))\n    A_C = A * B\n    for i in range(A_C, N):\n        tup = (A, B, C)\n        print(*tup)\n"
    },
    {
        "number": 4060,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    stack = []\n    operators = [')', '(', '+', '-']\n    for _ in range(n):\n        if stack and stack[-1] in operators:\n            first_char = stack.pop()\n            stack.append(first_char)\n        else:\n            if stack:\n                stack.append(stack.pop() * 2)\n            else:\n                stack.append(1)\n    result = 0\n    for i in range(n):\n        if stack and stack[-1] in operators:\n            first_char = stack.pop()\n            stack.append(first_char)\n        else:\n            if stack:\n                stack.append(stack[-1] * 2)\n            else:\n                stack.append(1)\n        result += stack.count(1)\n    return result\n\n\n-----Brackets-----\n\nBrackets are evaluated in Python. The first bracket is evaluated as follows:\n\n(\n(()\n\nThe second bracket is evaluated as follows:\n\n(1 + 1) + 1\n\nThe third bracket is evaluated as follows:\n\n(1) + 1 + 1\n\nThe fourth bracket is evaluated as follows:\n\n(1) + (1+1)\n\nThe fifth bracket is evaluated as follows:\n\n(1) + (1) + (1)\n\nThe sixth bracket is evaluated as follows:\n\n(1) + (1) + (1) + (1)\n\nThe seventh bracket is evaluated as follows:\n\n(1) + (1) + (1) + (1) + (1)\n\nThe eighth bracket is evaluated as follows:\n\n(1) + (1) + (1) + (1) + (1) + (1)\n\nThe ninth bracket is evaluated as follows:\n\n(1) + (1) + (1) + (1) + (1) + (1) + (1)\n\nThe tenth bracket is evaluated as follows:\n\n(1) + (1) + (1) + (1) + (1) + (1) + (1) + (1)\n\nThe eleventh bracket is evaluated as follows:\n\n(1) + (1) + (1) + (1) + (1) + (1) + (1) + (1)\n\nThe twelfth bracket is evaluated as follows:\n\n(1) + (1) + (1) + (1) + (1) + (1) + (1) + (1)\n\nFor example, the expression '((1+1)+(1+1))' has two valid parentheses, and the following brackets are also valid:\n\n(1) + (1) + (1) + (1) + (1)\n\n(1) + (1) + (1) + (1) + (1)\n\n(1) + (1) + (1) + (1) + (1) + (1)\n\nThe bracket expressions are evaluated in Python, so the answer should be two valid expressions of the same type."
    },
    {
        "number": 4060,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    bracket = []\n    for i in range(0, n):\n        bracket.append(stdin[i])\n    s = \"\".join(bracket)\n    if s[0] == \"(\" and s[-1] == \")\":\n        bracket.pop(0)\n        bracket.pop(-1)\n        s = \"\".join(bracket)\n    return s\n"
    },
    {
        "number": 4060,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    s = list(stdin.strip())\n    for i in range(1, n):\n        if s[i - 1] == '(':\n            if s[i - 2] == '(':\n                s[i - 1] = ')('\n                s[i] = '('\n            elif s[i - 2] == ')':\n                s[i - 1] = ')'\n                s[i] = ')'\n        else:\n            if s[i - 1] == '(':\n                s[i - 1] = '('\n                s[i] = ')'\n    return ''.join(s)\n    \n----------------------------------------------------------------------------------\n\nInput\n6\n(((())\n\nOutput\n3\n\nInput\n6\n)()()\n\nOutput\n0\n\nInput\n8\n)))(((((\n\nOutput\n0\ndef"
    },
    {
        "number": 4060,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = [0]*n\n    s[0] = 1\n    for i in range(1,n):\n        s[i] = s[i-1]+s[i-1]\n    answer = 0\n    for i in range(n):\n        if s[i]=='+':\n            answer += 2\n        else:\n            answer += 1\n    return answer"
    },
    {
        "number": 4060,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    string = stdin.strip()\n    stack = []\n    for char in string:\n        if char == '(' or char == ')':\n            stack.append(char)\n        else:\n            if len(stack) > 0:\n                stack.pop()\n            else:\n                return 0\n    \n    if len(stack) > 0:\n        return 0\n    return len(string)\n\n\n----Good solution----\n\nprint(solution(input()))"
    },
    {
        "number": 4060,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = list(stdin.split(\")\"))\n    count = 0\n    for i in range(len(s)):\n        if s[i] == \"(\":\n            count+=1\n        else:\n            count-=1\n        if count == 0:\n            return 0\n    return count"
    },
    {
        "number": 4060,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    s = []\n    for _ in range(n):\n        s.append(input())\n    for i in range(n):\n        if s[i][0] == \"(\":\n            s[i] = \")\"\n        elif s[i][0] == \")\":\n            s[i] = \"(\"\n    answer = 0\n    for i in range(n):\n        if s[i] == \")\":\n            answer += 2**(n-i-1)\n        elif s[i] == \"(\":\n            answer += 2**(n-i-1)\n    return answer\n"
    },
    {
        "number": 4060,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    s = stdin\n    \n    # loop through s to find correct type of bracket sequence\n    for i in range(len(s)):\n        if s[i] == '(' and s[i+1] == ')':\n            i += 2\n            continue\n        elif s[i] == '(':\n            i += 1\n            continue\n        elif s[i] == ')':\n            i += 1\n            continue\n        else:\n            return 0\n    \n    # convert string to its equivalent bracket sequence\n    while i < len(s):\n        if s[i] == '(':\n            s = s[:i] + s[i+2:] + s[i-2:]\n            i -= 2\n        elif s[i] == ')':\n            i += 1\n    \n    # split string into its equivalent bracket sequence\n    s = s.split('(')\n    s = [s[i].split(')') for i in range(len(s))]\n    \n    # calculate number of positions of each bracket sequence\n    i = 0\n    j = 0\n    for k in range(len(s)):\n        if s[k][0] == ')':\n            j = k\n            break\n        elif s[k][0] == '(':\n            i = k\n            break\n        else:\n            continue\n    \n    # if there are more bracket sequences with the same type, change it to be the correct type\n    while s[j][0] == s[i][0]:\n        j = s[j][1]\n        i = s[i][1]\n    \n    # the bracket sequence becomes regular\n    if j == 0:\n        return 0\n    \n    # calculate the number of positions of each bracket sequence\n    x = i\n    for i in range(i-1, j, -1):\n        x -= 1\n        if s[i][0] == '(':\n            x += 1\n    \n    # append the number of positions of each bracket sequence to answer\n    if x!= 0:\n        return x + 1\n    else:\n        return 0\n"
    },
    {
        "number": 4060,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[1:-2]\n    s = list(s)\n    s = sorted(s)\n    answer = 0\n    i = 0\n    while i < len(s):\n        if s[i] == '(':\n            answer += 1\n            i += 1\n            while s[i]!= '(':\n                i += 1\n        elif s[i] == ')':\n            answer -= 1\n            i += 1\n        elif s[i]!= '(':\n            i += 1\n    return answer\n\n\"\"\""
    },
    {
        "number": 4060,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    s = stdin.split(')')\n\n    brackets = []\n    \n    for i in range(len(s)):\n        \n        if s[i] == '(':\n            brackets.append('(')\n        elif s[i] == ')':\n            if brackets[-1] == '(':\n                brackets[-1] = ')'\n                break\n            else:\n                brackets.append('(')\n        elif s[i] == '+':\n            if brackets[-1] == '(':\n                brackets[-1] = ')'\n                break\n            else:\n                brackets.append('(')\n        elif s[i] == ')':\n            if brackets[-1] == '(':\n                brackets[-1] = ')'\n                break\n            else:\n                brackets.append('(')\n    \n    answer = 0\n    \n    for bracket in brackets:\n        if bracket == '(':\n            answer += 1\n        else:\n            answer -= 1\n            \n    return answer"
    },
    {
        "number": 4061,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    t = []\n    s.sort(key = len)\n    for i in range(len(s)):\n        t.append(s[i][0])\n        for j in range(len(s[i])):\n            if s[i][j] == 'a':\n                s[i] = s[i][:j]\n    t.sort(key = len)\n    answer = len(t)\n    for i in range(len(t)):\n        for j in range(i + 1, len(t)):\n            if t[i] == t[j]:\n                answer = max(answer, len(t[i:j+1]))\n    return answer\n"
    },
    {
        "number": 4061,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split(' ')\n    t = s[0]\n    s = s[1:]\n    if ''.join(s).isalpha():\n        return len(s)\n    else:\n        return 0\n"
    },
    {
        "number": 4061,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = list(stdin.split(' '))\n    t = s.pop(0)\n    k = 0\n    c = 1\n    for i in range(len(s)):\n        if k == len(s):\n            break\n        elif s[k]!= t[i]:\n            c = 1\n            k = i\n        else:\n            c += 1\n    if c == 0:\n        return '0'\n    return str(c)\n\nsolution(\"baaabccbabcb\")\n"
    },
    {
        "number": 4061,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    t = stdin.split()\n    cnt = {}\n    for i in range(len(s)):\n        if s[i] in cnt:\n            cnt[s[i]] += 1\n        else:\n            cnt[s[i]] = 1\n    for i in t:\n        if i in cnt:\n            if cnt[i] == 0:\n                return 0\n            else:\n                cnt[i] -= 1\n        else:\n            return 0\n\n    return max(cnt.values())\n"
    },
    {
        "number": 4061,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = list(stdin)\n    t = []\n    for i in range(len(s)):\n        if s[i]!='':\n            t.append(s[i])\n        elif i == 0 or s[i-1]!='':\n            t.append(s[i-1])\n        else:\n            t.append(s[i+1])\n    return max(len(s[s.index(i) + 1:]) for i in t)\n\n\n-----test-----\n\"aaaabaa\"\n\"aaabb\"\n\"aaabc\"\n\"aabbb\"\n\"aaaaa\"\n\"aaaa\"\n\n\"abaa\"\n\"abab\"\n\"baab\"\n\"baba\"\n\"baabab\"\n\"abababa\"\n\"aaaaaab\"\n\"aaaaaba\"\n\"aaaaaaaa\"\n\"aaaaaaaaa\"\n\n\"abcaaaab\"\n\"abcaaa\"\n\"abcaaab\"\n\"abcaaabab\"\n\"abcaaababab\"\n\"abcaabababab\"\n\"abcaababababab\"\n\"abcaaabababababab\"\n\"abcaababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab"
    },
    {
        "number": 4061,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def check(s):\n        s = list(s)\n        cnt = 1\n        for i in range(len(s)):\n            if s[i] == 'a':\n                if s[i+1] == 'b':\n                    s.pop()\n                    cnt += 1\n            else:\n                if s[i+1] == 'c':\n                    s.pop()\n                    cnt += 1\n        return cnt == 0\n    \n    def answer(s: str, t: str) -> str:\n        if s == t:\n            return 0\n        if len(s) < len(t):\n            return 0\n        a, b = 0, 0\n        for c in s:\n            if c == t[0]:\n                a += 1\n            elif c == t[-1]:\n                b += 1\n            else:\n                a = 1\n                b = 1\n        return max(a, b)\n\n    stdin = stdin.strip().split()\n    l = len(stdin[0])\n    t = len(stdin[1])\n    a = check(stdin[0][0])\n    b = check(stdin[1][0])\n    c = answer(stdin[0], stdin[1])\n    return max(a, b, c)\n"
    },
    {
        "number": 4061,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = list(stdin.strip())\n    \n    for i in range(1, len(s)):\n        c = s[i]\n        if c not in s:\n            s.insert(i, c)\n            s.pop(i-1)\n    \n    return ''.join(s)\n"
    },
    {
        "number": 4061,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split(\" \")\n    s = s.lower()\n    t = t.lower()\n    l = len(s)\n    r = len(t)\n    answer = 0\n    for i in range(l-r+1):\n        s_i = s[i:i+r]\n        t_i = t[i:i+r]\n        if s_i == t_i:\n            answer = l - i + 1\n            break\n    return answer\n\nprint(solution(input()))\n"
    },
    {
        "number": 4061,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n    pass\n"
    },
    {
        "number": 4061,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip().lower()\n    t = s.lower()\n    m = [0]*len(t)\n    for i in range(len(t)):\n        for j in range(i, len(t)):\n            if t[i] == t[j]:\n                m[j] = m[j]+1\n    for i in range(len(t)-1,-1,-1):\n        if m[i]!= 0:\n            t = t[:i]+t[i+1:]\n    answer = len(t)\n    return answer"
    },
    {
        "number": 4062,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    cnt = 0\n    for line in stdin:\n        a,b,c = map(int, line.split())\n        d = (a**2+b**2+c**2)**0.5\n        if a*c < d**2:\n            cnt += 1\n    return str(cnt)\n\n-----Sample Output-----\n1\n2\n3\nExplanation\nInput: a = 1 b = 1 c = 1 d = 1\nOutput: 1\nInput: a = 2 b = 1 c = 1 d = 1\nOutput: 2\nInput: a = 2 b = 1 c = 2 d = 1\nOutput: 2\nInput: a = 3 b = 1 c = 3 d = 1\nOutput: 3\nInput: a = 1 b = 1 c = 3 d = 2\nOutput: 3\nInput: a = 1 b = 1 c = 2 d = 2\nOutput: 1\nInput: a = 2 b = 1 c = 1 d = 1\nOutput: 1\nInput: a = 2 b = 2 c = 1 d = 1\nOutput: 1\nInput: a = 2 b = 2 c = 1 d = 2\nOutput: 2\nInput: a = 2 b = 1 c = 2 d = 1\nOutput: 2\nInput: a = 3 b = 1 c = 3 d = 1\nOutput: 3\nInput: a = 1 b = 2 c = 3 d = 1\nOutput: 1\nInput: a = 1 b = 2 c = 2 d = 1\nOutput: 1\nInput: a = 1 b = 1 c = 1 d = 1\nOutput: 1\nInput: a = 2 b = 2 c = 1 d = 1\nOutput: 2\nInput: a = 2 b = 2 c = 2 d = 1\nOutput: 1\nInput: a = 3 b = 1 c = 3 d = 1\nOutput: 1\nInput: a = 1 b = 2 c = 1 d = 1\nOutput: 2\nInput: a = 2 b = 1 c = 1 d = 1\nOutput: 2\nInput: a = 2 b = 1 c = 2 d = 2\nOutput: 2\n\n-----Constraints-----\n - -10^9 \\leq a \\leq b \\leq 10^9\n - -10^9 \\leq b \\leq 10^9\n - -10^9 \\leq c \\leq d \\leq 10^9\n - -10^9 \\leq d \\leq 10^9\n - All values in input are integers.\n\"\"\"\n\ndef"
    },
    {
        "number": 4062,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin) == 1:\n        return str(1)\n    a, b, c, d = map(int, stdin.split())\n    if a >= b >= c >= d:\n        return str(a * b * c * d)\n    if a >= b >= c >= d >= 1:\n        return str(a * b * c * d // 2)\n    if a >= b >= c >= d >= 1 >= 2:\n        return str(a * b * c * d // 3)\n    if a >= b >= c >= d >= 2 >= 3:\n        return str(a * b * c * d // 4)\n    if a >= b >= c >= d >= 2 >= 3 >= 4:\n        return str(a * b * c * d // 5)\n    return str(a * b * c * d // 6)\n\nIf there is no solution then print 0.\n\"\"\"\n\nimport math\n\na, b, c, d = map(int, input().split())\n"
    },
    {
        "number": 4062,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def is_even(n):\n        return n % 2 == 0\n    def is_odd(n):\n        return not is_even(n)\n\n    a, b, c, d = map(int, stdin.split())\n    answer = 0\n    for x in range(a, b + 1):\n        for y in range(c, d + 1):\n            if is_odd(x * y):\n                answer = max(x, y)\n    print(answer)\n"
    },
    {
        "number": 4062,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    def is_prime(n):\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    def f(a, b, c):\n        if a == 0 or b == 0 or c == 0:\n            return 0\n        if a == b == c == 0:\n            return 1\n        if a == b and b == c == 0:\n            return 2\n        \n        if a**2 + b**2 == c**2:\n            return a**2 + b**2\n        \n        if a**2 + b**2 < c**2:\n            return f(a, b, c - a**2 - b**2)\n        else:\n            return f(a - b**2, b, c - a**2 - b**2)\n    \n    result = f(int(stdin[0]), int(stdin[1]), int(stdin[2]))\n    return str(result)\n"
    },
    {
        "number": 4062,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    answer = -10**9\n    if a == 1 and b == 1 and c == 1 and d == 1:\n        answer = 1\n    elif a * b * c * d == 0:\n        answer = 0\n    else:\n        answer = max(a*b*c*d, a*b*c*d, a*b*c*d, a*b*c*d, a*b*c*d, a*b*c*d, a*b*c*d)\n    return str(answer)\n\n--------------------------------------------------------------------------------\ndef"
    },
    {
        "number": 4062,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(i) for i in stdin.split()]\n    d = int(c / b)\n    x = (c % b) * d + (b - c % b)\n    if x < 0:\n        x += b\n    return str(x)\n\ndef"
    },
    {
        "number": 4062,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    if a <= 0 or b <= 0 or c <= 0 or d <= 0:\n        return 'inf'\n    return str(a*b*c*d)"
    },
    {
        "number": 4062,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a,b,c,d=list(map(int,stdin.split()))\n    if a<=0 or b<=0 or c<=0 or d<=0:\n        return str(0)\n    x=a*b*c*d\n    a,b,c,d=list(map(int,stdin.split()))\n    if a<=0 or b<=0 or c<=0 or d<=0:\n        return str(0)\n    x=a*b*c*d\n    x=x//(a*b*c*d)\n    return str(x)\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4062,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n  \n  a = int(stdin.split(' ')[0])\n  b = int(stdin.split(' ')[1])\n  c = int(stdin.split(' ')[2])\n  d = int(stdin.split(' ')[3])\n\n  a, b, c, d = sorted([a, b, c, d])\n  max_val = max(a * b * c * d)\n  if max_val < 0:\n    max_val = -1\n  \n  return str(max_val)\n\n-----Sample Input-----\n2 2 1 1\n\n-----Sample Output-----\n2"
    },
    {
        "number": 4062,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n,a,b,c,d = list(map(int,stdin.split()))\n    x = a * b * c\n    y = a * b * d\n    if x >= y:\n        print(y-x)\n    else:\n        print(x-y)\n    return 'YES'\n\n>>> solution(\"1 1 1\")\n2\n\"\"\"\n\ndef"
    },
    {
        "number": 4063,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(sol(int(stdin)))\n\ndef"
    },
    {
        "number": 4063,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin)\n    c = 0\n    \n    for i in range(n):\n        for j in range(n-1):\n            if abs(i-j)==2:\n                c+=1\n    return str(c)\n\"\"\"\ndef"
    },
    {
        "number": 4063,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, d = map(int, stdin.split())\n    if N % 2!= 0:\n        return \"0\"\n    dp = [[[0, 0]]]\n    for i in range(1, N):\n        for j in range(len(dp)):\n            dp.append(dp[j].copy())\n            dp[j][0][0] += dp[i][0][0]\n            dp[i][0][0] += dp[j][0][0]\n            dp[i][0][1] += dp[j][0][1]\n            dp[j][0][1] += dp[i][0][1]\n    return str(dp[N][0][1] // dp[N][0][0])\n\n\"\"\"\n"
    },
    {
        "number": 4063,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    d = int(stdin.split()[1])\n    i = 0\n    while i<N:\n        k = int(stdin.split()[i+2])\n        if k>=d:\n            k -= d\n            i+=3\n        else:\n            i+=1\n    return str(2)\n\ndef"
    },
    {
        "number": 4063,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    num_of_possible_problems = 0\n    for i in range(n):\n        d_i, a_i, b_i = map(int, stdin.split())\n        num_of_possible_problems += (d_i + a_i + b_i)**2\n    return str(num_of_possible_problems)\n\"\"\"\n\n\"\"\"\n2\n1 4 4 4 4\n\"\"\"\n"
    },
    {
        "number": 4063,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = 0\n    b = 0\n    c = 0\n    d = 0\n    k = 0\n    for i in stdin:\n        if i.isdigit():\n            a += int(i)\n    for j in range(len(stdin)):\n        if stdin[j] == \"A\" or stdin[j] == \"R\":\n            b += int(stdin[j])\n        if stdin[j] == \"A\" or stdin[j] == \"D\" or stdin[j] == \"L\":\n            c += int(stdin[j])\n        if stdin[j] == \"D\" or stdin[j] == \"A\" or stdin[j] == \"D\":\n            d += int(stdin[j])\n        if stdin[j] == \"K\":\n            k += int(stdin[j])\n    if a > b:\n        a = b\n        b = c\n        c = d\n        d = k\n    print(a)\n    print(b)\n    print(c)\n    print(d)\n    print(k)\n    if a == b and a == c and a == d and b == c and b == d and c == k and c == d:\n        return \"YES\"\n    else:\n        return \"NO\"\n\nn = input()\nprint(solution(n))"
    },
    {
        "number": 4063,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N,d_i=map(int,stdin.split())\n    \n    solution_list=[]\n    \n    for i in range(1,N+1):\n        solution_list.append(i)\n        \n    for i in range(0,len(solution_list),2):\n        answer=solution_list[i]\n        solution_list.pop(i)\n        for j in range(i,len(solution_list),2):\n            answer1=solution_list[j]\n            solution_list.pop(j)\n            for k in range(j,len(solution_list),2):\n                answer2=solution_list[k]\n                solution_list.pop(k)\n                if answer!=answer2:\n                    break\n                else:\n                    break\n            if answer==answer2:\n                solution_list.append(answer1)\n                break\n    print(solution_list[len(solution_list)-1])\n    return \"\".join(map(str,solution_list))\n\n    \n    \n\n-----Sample Input-----\n3\n6 4 3 2\n\n-----Sample Output-----\n3 4\n\nIf we choose K=5 or 6, Problem 1, 5, and 6 will be for ARCs, Problem 2, 3, and 4 will be for ABCs, and the objective is achieved.\nThus, the answer is 2.\ndef"
    },
    {
        "number": 4063,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    d_1, d_2, d_3, d_4, d_5 = map(int, stdin.split())\n    d_list = [d_1, d_2, d_3, d_4, d_5]\n    if sum(d_list) == N:\n        answer = \"Yes\"\n        return answer\n    elif N % 2 == 0:\n        if sum(d_list) == N // 2:\n            answer = \"Yes\"\n            return answer\n        else:\n            answer = \"No\"\n            return answer\n    else:\n        if sum(d_list) == N // 2:\n            answer = \"Yes\"\n            return answer\n        else:\n            answer = \"No\"\n            return answer\n"
    },
    {
        "number": 4063,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    N = int(stdin)\n    if N % 2 == 1:\n        raise ValueError\n    \n    d_i = int(N ** 0.5)\n    if d_i > N:\n        return \"1\"\n    elif d_i < N:\n        return \"2\"\n\n    import sys\n    print(sys.getsizeof(solution(stdin)))\n\n\n-----Sample Input-----\n6\n9 1 4 4 6 7\n\n-----Sample Output-----\n2"
    },
    {
        "number": 4063,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, d_1, d_2, d_3, d_4 = map(int, stdin.split())\n    count = 0\n    for n in range(N+1):\n        if n == 1 or n == N:\n            continue\n        if n%d_1 == 0:\n            count += n//d_1\n        if n%d_2 == 0:\n            count += n//d_2\n        if n%d_3 == 0:\n            count += n//d_3\n        if n%d_4 == 0:\n            count += n//d_4\n    print(count)\n\n------Sample Output------\n\n-------Input-------\n5\n1 1 1 1 1 1 1 1 1 1 1\n\n--------Output-------\n\n-------Input-------\n1\n2 3\n\n--------Output-------\n\n-------Input-------\n1 1\n2 3\n\n-------Output-------\n\n-------Input-------\n1 1\n2 3\n\n--------Output-------\n\n-------Input-------\n5\n1 1 1 1 1 1 1 1 1 1 1\n\n--------Output-------\n\n\"\"\""
    },
    {
        "number": 4064,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, h, r = map(int, stdin.split())\n    l = max(h, r)\n    a = max(min(n - h, h) - 1, min(n - r, r) - 1)\n    return str(a + l + h + r - 1)\n"
    },
    {
        "number": 4064,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = map(int, stdin.split())\n    times = sorted((a - 1 - h + r + l) // h for a in (l, r, n))\n    answer = times[0]\n    for i in range(1, len(times)):\n        answer = answer if times[i] <= answer else times[i] + times[i-1]\n    return str(answer)\n"
    },
    {
        "number": 4064,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = map(int, stdin.split())\n    a_i = max(l, r)\n    a_j = max(h, l-a_i+1)\n    a_k = max(h+a_i-l, 0)\n    a_m = max(a_i+a_j-h, 0)\n    if a_k > a_m:\n        return str(a_k)\n    return str(a_m)\n\"\"\""
    },
    {
        "number": 4064,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    l = list(map(int,stdin.split()))\n    l.sort()\n    if l[0] == l[1]:\n        return str(l[-1]-l[-2])\n    if l[0] + l[-1] == l[1] + l[2]:\n        return str(l[-1]-l[-2])\n    if l[0] + l[-1] + l[1] + l[-2] == l[0] + l[1] + l[2] + l[3]:\n        return str(l[-1]-l[-4])\n    if l[0] + l[1] + l[2] + l[3] + l[4] == l[0] + l[1] + l[2] + l[3] + l[4]:\n        return str(l[-1]-l[-4])\n    if l[0] + l[1] + l[2] + l[3] + l[4] + l[5] == l[0] + l[1] + l[2] + l[3] + l[4] + l[5]:\n        return str(l[-1]-l[-5])\n    if l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] == l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6]:\n        return str(l[-1]-l[-6])\n    if l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] == l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7]:\n        return str(l[-1]-l[-8])\n    if l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8] == l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8]:\n        return str(l[-1]-l[-9])\n    if l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8] + l[9] == l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8] + l[9] + l[10]:\n        return str(l[-1]-l[-10])\n    if l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8] + l[9] + l[10] + l[11] == l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8] + l[9] + l[10] + l[11] + l[12]:\n        return str(l[-1]-l[-12])\n    if l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8] + l[9] + l[10] + l[11] + l[12] + l[13] == l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8] + l[9] + l[10] + l[11] + l[12] + l[13] + l[14]:\n        return str(l[-1]-l[-14])\n    if l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8] + l[9] + l[10] + l[11] + l[12] + l[13] + l[14] + l[15] == l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8] + l[9] + l[10] + l[11] + l[12] + l[13] + l[14] + l[15] + l[16]:\n        return str(l[-1]-l[-15])\n    if l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8] + l[9] + l[10] + l[11] + l[12] + l[13] + l[14] + l[15] + l[16] == l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8] + l[9] + l[10] + l[11] + l[12] + l[13] + l[14] + l[15] + l[16] + l[17]:\n        return str(l[-1]-l[-18])\n    if l[0] +"
    },
    {
        "number": 4064,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = [int(x) for x in stdin.split()]\n    a_1 = (h + r)//l\n    a_2 = (h + r + l)//l\n    a_3 = (h + r + l + n)//l\n    a_4 = (h + r + l + n + a_3)//l\n    a_5 = (h + r + l + n + a_4)//l\n    a_6 = (h + r + l + n + a_5 + a_6)//l\n    a_7 = (h + r + l + n + a_6 + a_7)//l\n    a_8 = (h + r + l + n + a_7 + a_8)//l\n    a_9 = (h + r + l + n + a_8 + a_9)//l\n    a_10 = (h + r + l + n + a_9 + a_10)//l\n    answer = max(a_1, a_2, a_3, a_4, a_5, a_6, a_7, a_8, a_9, a_10)\n    print(answer)\n\nsolution(stdin)\n"
    },
    {
        "number": 4064,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l = map(int, stdin.split())\n    a = []\n    a.append(h)\n    a.append(l)\n    a.sort()\n    for i in range(n):\n        a.append(a[i+1] - a[i])\n    answer = ''\n    while a:\n        if a[0] == 1:\n            a.pop(0)\n            a.pop(0)\n            answer += '2'\n        else:\n            answer += '1'\n    return answer\n\n'''\n\ndef"
    },
    {
        "number": 4064,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = map(int, stdin.split())\n    answer = [0] * n\n    for _ in range(n):\n        answer[_] = n - l + 1 - (h * 2 + r) // l\n    return str(max(answer))\n"
    },
    {
        "number": 4064,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, h, r = map(int, stdin.split())\n    a = map(int, stdin.split())\n    a = sorted(a, reverse=True)\n    a = a[h:]\n    a.append(r)\n    return max(map(sum, zip(a)))\n"
    },
    {
        "number": 4064,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l = map(int, stdin.split())\n    a_1, a_2, a_3, a_4, a_5, a_6, a_7, a_8, a_9 = map(int, stdin.split())\n    s1 = a_1 - 1\n    s2 = a_2 - 1\n    if l - h < s2 - s1:\n        return '0'\n    elif h <= l and (s1 <= s2 or s2 <= s1):\n        return '0'\n    elif (h <= l and l <= s2) or (s2 <= s1 and l <= s1):\n        return '0'\n    elif (h <= l and l <= s2) or (l <= s1 and l <= s1):\n        return '0'\n    elif (l <= s2 and h <= s1) or (h <= s1 and l <= s1):\n        return '0'\n    else:\n        return '1'\n\ndef"
    },
    {
        "number": 4064,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l = map(int, stdin.split())\n    a_i = l - h\n    a_i = a_i if a_i < 0 else a_i - 1\n    answer = 0\n    if a_i < 0:\n        a_i = 0\n    while a_i > 0:\n        if h - a_i >= 0:\n            answer = max(answer, h - a_i)\n        a_i -= 1\n    if answer == 0:\n        answer = 24\n    elif answer > n:\n        answer = n\n    return str(answer)"
    },
    {
        "number": 4065,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    b = a[:]\n    c = []\n    d = []\n    for i in range(1, len(a)):\n        for j in range(i):\n            if a[j] + a[i] > a[i]:\n                if len(b)!= 0:\n                    c.append(b[:])\n                    b = a[:]\n                    d.append(a[i])\n                else:\n                    c.append(a[j])\n                    b = a[:]\n                    d.append(a[i])\n    c.append(b)\n    return \"\".join(map(str, c))\n\ndef"
    },
    {
        "number": 4065,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    max, l, r = map(int, stdin.split())\n    val = 1\n    if l == r:\n        val = max - max\n    for i in range(l + 1, r):\n        val += i * (i - 1)\n    return str(val)\nprint(solution(stdin))\n\nNote: For example $1$ valid contests consist of $3$ problems, $1$ valid contests consist of $1$ problems and $1$ valid contests consist of $1$ problems.\n\n-----Alternatives-----\n\ndef"
    },
    {
        "number": 4065,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n,*A = map(int,stdin.split())\n    if len(A)!= n:\n        return str(len(A))\n    for i in range(n):\n        s,p = A[i],A[i+1]\n        if s not in A or s == p:\n            break\n    return str(len(A))\n\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n__________________________________________________________________________________________________\n"
    },
    {
        "number": 4065,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    s = sorted(a)\n    def get_m(a):\n        m = [i for i in a if i == s[0]]\n        return max(m)\n    \n    if len(set(s)) == 1:\n        return 1\n    elif get_m(s) > get_m(s[::-1]):\n        return 3\n    else:\n        return 4\n\ndef"
    },
    {
        "number": 4065,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    dp = [0 for _ in range(p)]\n    dp[0] = 1\n    for i in range(1, p):\n        for j in range(i):\n            if a[j] < a[i] and dp[i] < dp[j] + 1:\n                dp[i] = dp[j] + 1\n    return str(dp[-1])\n'''\n\n\ndef"
    },
    {
        "number": 4065,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    contest = []\n    for i in range(1, n + 1):\n        contest.append(int(a[i - 1]))\n    max_diff = max(contest)\n    idx = [i for i, x in enumerate(contest) if x == max_diff]\n    return str(len(idx) + 1)\n"
    },
    {
        "number": 4065,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\uc218\ud589\uc2dc\uac04 : 55 ms\n\uc815\ud655\uc131 : 32.8\n\uba54\ubaa8\ub9ac : 266 MB\n\n'''\nimport math\nimport sys\n\ndef"
    },
    {
        "number": 4065,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip().split()[0])\n    a = list(map(int, stdin.strip().split()[1:]))\n    b = list(map(int, stdin.strip().split()[1:]))\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if a[i] > a[j]:\n                count += 1\n            if b[i] > b[j]:\n                count += 1\n    return str(count)"
    },
    {
        "number": 4065,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    contest = list(map(int,stdin.split()))\n    contest.sort()\n    problems = contest[1:]\n    \n    ret = 0\n    for problem in problems:\n        if problem == 0:\n            ret += 1\n        elif problem > ret:\n            ret = problem\n    \n    return str(ret)\n\n-----Constraints-----\n\n1 <= n <= 2 * 10^5\n\n0 <= a_i < 10^9\n\n-----Time Limit-----\n\nO(n)\n\n\n\n-----Example 1-----\n\nInput\n\n5\n3 6 12 25\n\nOutput\n\n3\n\nInput\n\n6\n3 4 7 12 100 150 199\n\nOutput\n\n1\n\nInput\n\n6\n3 4 7 12 100 150 199\n\nOutput\n\n1\n\n-----Example 2-----\n\nInput\n\n4\n5 5 6 10 21\n\nOutput\n\n5\n\n------Solution----------------\n\nn = int(input())\narr = [int(i) for i in input().split()]\narr.sort()\ntotal = 0\n\nfor i in range(1,n):\n    if arr[i] >= arr[i-1]:\n        total += arr[i]\n    else:\n        total += arr[i-1]\n\nprint(total)\n"
    },
    {
        "number": 4065,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = [int(i) for i in input().split()]\n    for i in range(n):\n        if a[i] < a[i+1]:\n            a[i], a[i+1] = a[i+1], a[i]\n    a.sort()\n    print(len(set(a)))\n"
    },
    {
        "number": 4066,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def solve(n: int, a: List[int]) -> List[int]:\n        res = [0] * (n+1)\n        res[0] = 1\n        res[1] = 1\n        res[2] = 1\n        i = 0\n        while i < n:\n            lcm = 1\n            for j in range(3, n+1, 2):\n                if a[i] < a[j]:\n                    lcm = min(lcm, a[i] // a[j])\n                    res[j] += res[i] * lcm\n                elif a[i] > a[j]:\n                    res[j] += res[i] * (a[j] // a[i])\n            i += 1\n        return res\n    \n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    print(solve(n, a))\n"
    },
    {
        "number": 4066,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(a) for a in stdin.split()]\n    nums = [a[0] * a[1] * a[2], a[0] * a[1] * a[3], a[0] * a[1] * a[4], a[0] * a[1] * a[5]]\n    lcm = sum(nums)\n    i = 0\n    j = 0\n    ans = []\n    while i < n and j < n:\n        if lcm % nums[i] == 0:\n            while lcm % nums[j] == 0:\n                j += 1\n            ans.append(j)\n            lcm -= nums[i] * nums[j]\n            i += 1\n        else:\n            j += 1\n    return \",\".join(map(str, ans))\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4066,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    a_n = n * [a]\n    for i in range(n):\n        if i % 2 == 0:\n            a_n[i] = max(a_n[i], a_n[i + 1])\n        else:\n            a_n[i] = min(a_n[i], a_n[i - 1])\n    lcm = a_n[0]\n    for i in range(1, n):\n        lcm = (lcm * a_n[i]) // (a_n[i - 1] * a_n[i])\n    print(lcm)\n"
    },
    {
        "number": 4066,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip().split()[-1])\n    a = list(map(int, stdin.strip().split()))\n    answer = []\n    for i in range(0, n + 1):\n        for j in range(i + 1, n + 1):\n            if len(set(a[i:j])) == 1:\n                answer.append(j - i + 1)\n    answer.sort()\n    print(*answer)\n    return '\\n'.join(str(i) for i in answer)"
    },
    {
        "number": 4066,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n <= 0: return 'No solution'\n    l = list(map(int, stdin.strip().split()))\n    if not all(a % l[0] == 0 for a in l):\n        return 'No solution'\n    l.sort(reverse=True)\n    for i in range(n-1):\n        if l[i] == l[i+1]:\n            continue\n        if l[i] * l[i+1] < l[i+1] * l[i+1]:\n            return 'No solution'\n    print(l[n//2])\n    return 'Yes'"
    },
    {
        "number": 4066,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, lcm = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    for i in range(n):\n        for j in range(i + 1, n):\n            if lcm >= a[i] * a[j]:\n                lcm = lcm % a[j]\n    print(lcm)\n    return str(lcm)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4066,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\" \")[0])\n    a = map(int, stdin.split(\" \")[1].split(\",\"))\n    i = 1\n    j = n\n    while i < j:\n        lcm = 0\n        while i < j:\n            lcm = max(lcm, a[i]*a[j])\n            i += 1\n            j -= 1\n        j = n\n        i = 1\n    return str(i)\n\nprint(solution(\"4,5,1,2,8,3,7,6,10\"))\n"
    },
    {
        "number": 4066,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n,*a=[int(x) for x in stdin.split()]\n    lcm=sum(a)\n    i,j=0,0\n    while i<len(a) and j<len(a):\n        if a[i]<=lcm and a[j]<=lcm:\n            if a[i]<=lcm and a[j]<=lcm:\n                i+=1\n                j+=1\n            else:\n                i+=1\n        else:\n            j+=1\n    if i==len(a):\n        return \"1\"\n    else:\n        return \"2\"\n"
    },
    {
        "number": 4066,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip().split()[-1])\n    a = [int(i) for i in stdin.strip().split()[:-1]]\n    a = sorted(a, reverse=True)\n    lcm = a[0]\n    for i in range(1, n):\n        lcm = lcm*(i+1)//a[i]\n    print(lcm)\n\n-----Constraints-----\n1 <= n <= 10^6\n\n1 <= a_i < 10^7\n1 <= a_j < 10^7\n\n'''\n\ndef"
    },
    {
        "number": 4066,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    for i in range(1, n):\n        for j in range(i, n):\n            lcm = 0\n            for k in range(i, j+1):\n                lcm = (lcm*a[k])%1000000000\n            if lcm == a[i]:\n                return str(i) + \" \" + str(j)\n"
    },
    {
        "number": 4067,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    lst = list(s)\n    lst.sort()\n    for i in lst:\n        if (i == \"0\" and n % 3 == 0) or (i == \"1\" and n % 3 == 1) or (i == \"2\" and n % 3 == 2):\n            lst.pop(lst.index(i))\n            lst.pop(lst.index(i))\n    if len(lst) == 0:\n        return \"0\"\n    else:\n        return str(lst[0]) * (len(lst) - 1)\n"
    },
    {
        "number": 4067,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return solution_01(stdin)\n\ndef"
    },
    {
        "number": 4067,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    # print(n, s)\n    print(s[::-1])\n    if n % 3 == 0:\n        return s[::-1]\n    else:\n        return ''.join([s[i] if i % 3 == 0 else s[i] for i in range(n)])\n"
    },
    {
        "number": 4067,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, *s = list(map(int, stdin.split()))\n    def convert(c):\n        if c == '0':\n            return '0'\n        if c == '1':\n            return '1'\n        if c == '2':\n            return '2'\n        return '3'\n    dic = {}\n    for i, v in enumerate(s):\n        dic[convert(v)] = i + 1\n    for i in range(n):\n        for k in range(n):\n            if s[k] not in dic:\n                s[k] = 0\n            else:\n                s[k] += dic[s[k]]\n    return ''.join(sorted(s))\n\nprint(solution(\"021\"), \"021\")\nprint(solution(\"211200\"), \"211200\")"
    },
    {
        "number": 4067,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    \n    def cmp(x, y):\n        if x < y:\n            return -1\n        elif x > y:\n            return 1\n        else:\n            return 0\n    \n    def get(t, n):\n        return cmp(n, t[n])\n    \n    def remove(t, s):\n        for i in range(n):\n            if t[i] == s[i]:\n                t[i] = '0'\n            else:\n                return False\n        return True\n    \n    def insert(t, s):\n        for i in range(1, n + 1):\n            if t[i] == s[i]:\n                if i == 1:\n                    t.insert(i + 1, '1')\n                elif i == 2:\n                    t.insert(i + 1, '0')\n                else:\n                    t[i + 1] = '1'\n                break\n    \n    def replace(t, s):\n        for i in range(n):\n            if t[i] == s[i]:\n                if t[i + 1] == s[i + 1] == s[i]:\n                    t[i] = '2'\n                else:\n                    t[i] = '1'\n                break\n    \n    def replace2(t, s):\n        for i in range(1, n + 1):\n            if t[i] == s[i]:\n                t[i] = '1'\n                if i == 1:\n                    t[i + 1] = '2'\n                else:\n                    t[i + 1] = '0'\n                break\n    \n    def replace3(t, s):\n        for i in range(n):\n            if t[i] == s[i]:\n                t[i] = '2'\n                if i == 1:\n                    t[i + 1] = '1'\n                else:\n                    t[i + 1] = '0'\n                break\n    \n    def replace4(t, s):\n        for i in range(n - 1, -1, -1):\n            if t[i] == s[i]:\n                t[i] = '2'\n                if i == 1:\n                    t[i + 1] = '1'\n                else:\n                    t[i + 1] = '0'\n                break\n    \n    def replace5(t, s):\n        for i in range(n - 1, -1, -1):\n            if t[i] == s[i]:\n                t[i] = '1'\n                if i == 1:\n                    t[i + 1] = '2'\n                else:\n                    t[i + 1] = '0'\n                break\n    \n    def remove_2(t, s):\n        t.pop(1)\n        if t[-1] == s[-1]:\n            t.pop(-1)\n    \n    def remove_1(t, s):\n        t.pop(-1)\n        if t[-1] == s[-1]:\n            t.pop(-1)\n    \n    def remove_1_2(t, s):\n        t.pop(-1)\n        t[1] = '0'\n        if t[-1] == s[-1]:\n            t.pop(-1)\n    \n    def remove_1_2_3(t, s):\n        t.pop(-1)\n        t[1] = '0'\n        if t[-1] == s[-1]:\n            t.pop(-1)\n            t[1] = '1'\n    \n    def remove_1_2_3_4(t, s):\n        t.pop(-1)\n        t[1] = '0'\n        t[2] = '1'\n        if t[-1] == s[-1]:\n            t.pop(-1)\n    \n    def remove_1_2_3_4_5(t, s):\n        t.pop(-1)\n        t[1] = '0'\n        t[2] = '1'\n        t[3] = '2'\n        if t[-1] == s[-1]:\n            t.pop(-1)\n            t[1] = '0'\n            t[2] = '1'\n            t[3] = '0'\n    \n    def remove_1_2_3_4_5_6(t, s):\n        t.pop(-1)\n        t[1] = '0'\n        t[2] = '1'\n        t[3] = '2'\n        t[4] = '0'\n        if t[-1] == s[-1]:\n            t.pop(-1)\n    \n    def remove_1_2_3_4_5_6_7(t, s):\n        t.pop(-1)\n        t[1] = '0'\n        t[2] = '1'\n        t[3] = '2'\n        t[4] = '0'\n        t[5] = '1'\n        if t[-1] == s[-1]:\n            t.pop(-1)\n    \n    def remove_1_2_3_4_5_6_7_8(t, s):\n        t.pop(-1)\n        t[1] = '0'\n        t[2] = '1'\n        t[3] = '2'\n        t[4] = '0'\n        t[5] = '1'\n        t[6] = '2'\n        t[7] = '0'\n        if t[-1] == s[-1]:\n            t.pop(-1)\n    \n    def remove_1_2_3_4_5_6_7_8_9(t, s):\n        t.pop(-1)\n        t[1] = '0'\n        t[2] = '1'\n        t[3] = '2'\n        t[4] = '0'\n        t[5] = '1'\n        t[6] = '2'\n        t[7] = '0'\n        t[8] = '1'\n        if t[-1] == s[-1]:\n            t.pop(-1)\n    \n    def remove_1_2_3_4_5_6_7_8_9_10(t, s):\n        t.pop(-1)\n        t[1] = '0'\n        t[2] = '1'\n        t[3] = '2'\n        t[4] = '0'\n        t[5] = '1'\n        t[6] = '2'\n        t[7] = '0'\n        t[8"
    },
    {
        "number": 4067,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    for _ in range(3):\n        s = stdin.split(\" \")\n        min_len = min(len(s[0]), len(s[1]))\n        for s[0], s[1] in itertools.product(range(min_len), s):\n            print(s)\n            if s[0] == s[1]:\n                break\n    return \"\"\n\"\"\"\n\ndef"
    },
    {
        "number": 4067,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    \n    s = [int(i) for i in stdin.split('\\n')[1].split(',') if i!= '0']\n    \n    if len(s) < n:\n        return '0'\n    \n    return ''.join([str(1 - i) for i in s])\n"
    },
    {
        "number": 4067,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, s = list(map(int, stdin.split()))\n    sol = s[0]\n    \n    for i in range(1, n):\n        sol += s[i] * (i-1)\n        sol += s[i] * (n-i)\n    sol += s[n-1]\n    \n    return sol\n\n-----Brute force-----\n\ndef"
    },
    {
        "number": 4067,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join(sorted(stdin))\n    \"\"\"\n    def find_add(s):\n        s1 = str(bin(int(s, base=2)))[2:]\n        if len(s1) < 4:\n            s1 = s1 + '0' * (4-len(s1))\n        return s1\n    \n    def find_remove(s):\n        s1 = str(bin(int(s, base=2)))[2:]\n        if len(s1) < 4:\n            s1 = s1[:-2] + s1[-1] + '0' * (4-len(s1))\n        return s1\n    \n    def check_substring(s, start):\n        if start == len(s):\n            if len(str(bin(int(s, base=2)))) >= 4:\n                return True\n        return False\n    \n    def check_unique(s, start):\n        if start == len(s):\n            if str(bin(int(s, base=2))) == '0b001' or str(bin(int(s, base=2))) == '0b11':\n                return True\n        return False\n    \n    def is_valid(s):\n        for i in range(4):\n            if s[i] == '1' and not check_substring(s, i) or s[i] == '0' and not check_unique(s, i):\n                return False\n        return True\n\n    def bin_int(s):\n        return '0b' + s[::-1].zfill(4)\n        \n    def expand(s):\n        if is_valid(s):\n            return bin_int(s)\n        \n    def exp_to_sub(s):\n        return bin_int(s.replace('0', '1').replace('1', '0').replace('1', '1').zfill(4))\n        \n    s = input()\n    l = list(s)\n    # print(s)\n    # print(l)\n    # print(bin(int(''.join(l), 2))[2:])\n    # print(s.replace('0', '1').replace('1', '0').replace('1', '1').zfill(4))\n    # print(l.replace('0', '1').replace('1', '0').replace('1', '1').zfill(4))\n    # print(expand(s.replace('0', '1').replace('1', '0').replace('1', '1').zfill(4)))\n    # print(exp_to_sub(s.replace('0', '1').replace('1', '0').replace('1', '1').zfill(4)))\n    # print(str(bin(int(''.join(l), 2))[2:]).replace('1', '0').replace('0', '1').replace('1', '1').zfill(4))\n    # print(str(bin(int(''.join(l), 2))[2:]).replace('1', '0').replace('0', '1').replace('1', '1').zfill(4))\n    # print(str(bin(int(s.replace('0', '1').replace('1', '0').replace('1', '1').zfill(4)))[2:]).replace('1', '0').replace('0', '1').replace('1', '1').zfill(4))\n    # print(str(bin(int(s.replace('0', '1').replace('1', '0').replace('1', '1').zfill(4)))[2:]).replace('1', '0').replace('0', '1').replace('1', '1').zfill(4))\n    # print(str(bin(int(s.replace('0', '1').replace('1', '0').replace('1', '1').zfill(4)))[2:]).replace('1', '0').replace('0', '1').replace('1', '1').zfill(4))\n    # print(str(bin(int(s.replace('0', '1').replace('1', '0').replace('1', '1').zfill(4)))[2:]).replace('1', '0').replace('0', '1').replace('1', '1').zfill(4))\n    # print(str(bin(int(s.replace('0', '1').replace('1', '0').replace('1', '1').zfill(4)))[2:]).replace('1', '0').replace('0', '1').replace('1', '1').zfill(4))\n    # print(str(bin(int(s.replace('0', '1').replace('1', '0').replace('1', '1').zfill(4)))[2:]).replace('1', '0').replace('0', '1').replace('1', '1').zfill(4))\n    # print(str(bin(int(s.replace('0', '1').replace('1', '0').replace('1', '1').zfill(4)))[2:]).replace('1', '0').replace('0', '1').replace('1', '1').zfill(4))\n    # print(str(bin(int(s.replace('0', '1').replace('1', '0').replace('1', '1').zfill(4)))[2:]).replace('1', '0').replace('0', '1').replace('1', '1').zfill(4))\n    # print(str(bin(int(s.replace('0', '1').replace('1', '0').replace('1', '1').zfill(4)))[2:]).replace('1', '0').replace('0', '1').replace('1', '1').zfill(4))\n    # print(str(bin(int(s.replace('0', '1').replace('1', '0').replace('1', '1').zfill(4)))[2:]).replace('1', '0').replace('0', '1').replace('1', '1').zfill(4))\n    # print(str(bin(int(s.replace('0', '1').replace('1', '0').replace('1', '1').zfill(4)))[2:]).replace('1', '0').replace('0', '1').replace('1', '1').zfill(4))\n    # print(str(bin(int(s.replace('0', '1').replace('1', '0').replace('1', '1').zfill(4)))[2:]).replace('1', '0').replace('0', '1').replace('1', '1').zfill(4))\n    # print(str(bin(int(s.replace('0', '1').replace('1', '0').replace('1', '1').zfill(4)))[2:]).replace('1', '0').replace('0', '"
    },
    {
        "number": 4067,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    string = [stdin.strip().lower()]\n    for i in range(1, n):\n        string.append(string[-1] + string[-2])\n    string = ''.join(string)\n    a = []\n    for i in range(0, len(string)):\n        a.append(string[i].upper())\n        a.append(string[i].lower())\n    string = ''.join(a)\n    return string\n\ndef"
    },
    {
        "number": 4068,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    a_1, a_2 = map(int, stdin.split())\n    a_1 -= 1\n    a_2 -= 1\n    a_3 = a_2 // M\n    a_4 = a_3 // N\n    if a_4 % 2 == 0:\n        return str(1)\n    else:\n        return str(N + 1)\n    \n"
    },
    {
        "number": 4068,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    for _ in range(M):\n        a_1, a_2 = map(int, input().split())\n        print(solution(N, a_1, a_2))"
    },
    {
        "number": 4068,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\n-----Initialization-----\n\nInput:\n2\n1 1\n\nOutput:\n3\n\nExplanation\n\nStep 1:\n   a_1 = 1\n   a_2 = 1\n   a_3 = 1\n   a_4 = 2\n   a_5 = 4\n   a_6 = 6\n   a_7 = 7\n   a_8 = 8\n   a_9 = 9\n   a_10 = 10\n   a_11 = 11\n   a_12 = 12\n\nStep 2:\n   a_1 = 1\n   a_2 = 1\n   a_3 = 1\n   a_4 = 1\n   a_5 = 2\n   a_6 = 3\n   a_7 = 4\n   a_8 = 5\n   a_9 = 6\n   a_10 = 7\n   a_11 = 8\n   a_12 = 9\n   a_13 = 10\n   a_14 = 11\n   a_15 = 12\n\nStep 3:\n   a_1 = 1\n   a_2 = 2\n   a_3 = 2\n   a_4 = 3\n   a_5 = 4\n   a_6 = 5\n   a_7 = 6\n   a_8 = 7\n   a_9 = 8\n   a_10 = 9\n   a_11 = 10\n   a_12 = 11\n   a_13 = 12\n   a_14 = 13\n   a_15 = 14\n   a_16 = 15\n   a_17 = 16\n   a_18 = 17\n   a_19 = 18\n   a_20 = 19\n   a_21 = 20\n   a_22 = 21\n   a_23 = 22\n   a_24 = 23\n   a_25 = 24\n   a_26 = 25\n   a_27 = 26\n   a_28 = 27\n   a_29 = 28\n   a_30 = 29\n   a_31 = 30\n   a_32 = 31\n   a_33 = 32\n   a_34 = 33\n   a_35 = 34\n   a_36 = 35\n   a_37 = 36\n   a_38 = 37\n   a_39 = 38\n   a_40 = 39\n   a_41 = 40\n   a_42 = 41\n   a_43 = 42\n   a_44 = 43\n   a_45 = 44\n   a_46 = 45\n   a_47 = 46\n   a_48 = 47\n   a_49 = 48\n   a_50 = 49\n   a_51 = 50\n   a_52 = 51\n   a_53 = 52\n   a_54 = 53\n   a_55 = 54\n   a_56 = 55\n   a_57 = 56\n   a_58 = 57\n   a_59 = 58\n   a_60 = 59\n   a_61 = 60\n   a_62 = 61\n   a_63 = 62\n   a_64 = 63\n   a_65 = 64\n   a_66 = 65\n   a_67 = 66\n   a_68 = 67\n   a_69 = 68\n   a_70 = 69\n   a_71 = 70\n   a_72 = 71\n   a_73 = 72\n   a_74 = 73\n   a_75 = 74\n   a_76 = 75\n   a_77 = 76\n   a_78 = 77\n   a_79 = 78\n   a_80 = 79\n   a_81 = 80\n   a_82 = 81\n   a_83 = 82\n   a_84 = 83\n   a_85 = 84\n   a_86 = 85\n   a_87 = 86\n   a_88 = 87\n   a_89 = 88\n   a_90 = 89\n   a_91 = 90\n   a_92 = 91\n   a_93 = 92\n   a_94 = 93\n   a_95 = 94\n   a_96 = 95\n   a_97 = 96\n   a_98 = 97\n   a_99 = 98\n   a_100 = 99\n   a_101 = 100\n   a_102 = 101\n   a_103 = 102\n   a_104 = 103\n   a_105 = 104\n   a_106 = 105\n   a_107 = 106\n   a_108 = 107\n   a_109 = 108\n   a_110 = 109\n   a_111 = 110\n   a_112 = 111\n   a_113 = 112\n   a_114 = 113\n   a_115 = 114\n   a_116 = 115\n   a_117 = 116\n   a_118 = 117\n   a_119 = 118\n   a_120 = 119\n   a_121 = 120\n   a_122 = 121\n   a_123 = 122\n   a_124 = 123\n   a_125 = 124\n   a_126 = 125\n   a_127 = 126\n   a_128 = 127\n   a_129 = 128\n   a_130 = 129\n   a_131 = 130\n   a_132 = 131\n   a_133 = 132\n   a_134 = 133\n   a_135 = 134\n   a_136 = 135\n   a_137 = 136\n   a_138 = 137\n   a_139 = 138\n   a_140 = 139\n   a_141 = 140\n   a_142 = 141\n   a_143 = 142\n   a_144 = 143\n   a_145 = 144\n   a_146 = 145\n   a_147 = 146\n   a_148 = 147\n   a_149 = 148\n   a_150 = 149\n   a_151 = 150\n   a_152 = 151\n   a_153 = 152\n   a_154 = 153\n   a_155 = 154\n   a_156 = 155\n   a_157 = 156\n   a_158 = 157\n   a_159 = 158\n   a_160 = 159\n   a_161 = 160\n   a_162 = 161\n   a_163 = 162\n   a_164 = 163\n   a_165 = 164\n   a_166 = 165\n   a_167 = 166\n   a_168 = 167\n   a_169 = 168\n   a_170 = 169\n   a_171 = 170\n   a_172 = 171\n   a_173 = 172\n   a_174 = 173\n   a_175 = 174\n   a_176 = 175\n   a_177 = 176\n   a_178 = 177\n   a_179 = 178\n   a_180 = 179\n   a_181 = 180\n   a_182 = 181\n   a_183 = 182\n   a_184 = 183\n   a_185 = 184\n   a_186 = 185\n   a_187 = 186\n   a_188 = 187\n   a_189 = 188\n   a_190 = 189\n   a_191 = 190\n   a_192 = 191\n   a_193 = 192\n   a_194 = 193\n   a_195 = 194\n   a_196 = 195\n   a_197 = 196\n   a_198 = 197\n   a_199 = 198\n   a_200 = 199\n   a_201 = 200\n   a_202 = 201\n   a_203 = 202\n   a_204 = 203\n   a_205 = 204\n   a_206 = 205\n   "
    },
    {
        "number": 4068,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    a_1, a_2 = map(int, stdin.split())\n    a_1 -= 1\n    a_2 -= 1\n    a_3 = M-1\n    a_M = N\n    total = 0\n    for i in range(N):\n        total += a_1\n        total += a_2\n        total += a_3\n        total += a_M\n        total -= 2\n        total -= 3\n        total -= 4\n        total -= 5\n        total -= 6\n        if total % 7 == 0:\n            total = total // 7\n    return str(total % 7)\n'''\n\ndef"
    },
    {
        "number": 4068,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, M, a_1, a_2, a_3, a_4, a_5, a_6 = map(int, stdin.split())\n    count = 0\n    for i in range(N):\n        count += min(a_1, a_2, a_3, a_4, a_5, a_6)\n        if i == 0:\n            count += min(a_1, a_2)\n        if i == N - 1:\n            count += min(a_3, a_4, a_5)\n        if i == N - 2:\n            count += min(a_5, a_6)\n    return str(count % (1_000_000_000_007))\n"
    },
    {
        "number": 4068,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N,M,a_1,a_2,a_3,a_4,a_5,a_6 = map(int, stdin.split())\n    return str(5 * (N-1) * (N-2) * (N-3) * (N-4) * (N-5) * (N-6))\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(10 ** 7)\n\ndef"
    },
    {
        "number": 4068,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    arr = [int(x) for x in input().split()]\n    # arr = sorted(arr, reverse=True)\n\n    # print(arr)\n\n    # N: Total number of stairs\n    # M: Number of steps\n    # a: All the stairs\n    # b: The index of the stairs\n\n    a = [0 for _ in range(n)]\n    b = [0 for _ in range(n)]\n    for i in range(m):\n        a[i] = arr[i]\n        b[arr[i]] += 1\n\n    # print(a)\n    # print(b)\n    # print(a)\n\n    # print(len(a))\n    # print(len(b))\n\n    # print(set(b))\n    mod = 1000000007\n    # print(len(set(b)))\n    # print(set(b))\n    c = [set() for _ in range(n + 1)]\n    for i in range(n):\n        c[a[i]].add(b[i])\n        # c[a[i]].add(b[i])\n\n    # print(len(c))\n    # print(len(set(c)))\n\n    # print(len(c[0]))\n    # print(len(set(c[0])))\n    # print(c)\n    # print(len(c[0]))\n    # print(c[0])\n\n    # print(c[n - 1])\n    # print(c[n - 1])\n    # print(len(c[n - 1]))\n\n    # print(len(set(c[n - 1])))\n\n    # print(len(set(c[n - 1])))\n    # print(len(c[n - 1]))\n\n    mod = len(c[n - 1])\n\n    # print(mod)\n\n    # print(len(c[n - 1]))\n    # print(len(c[n - 1]))\n\n    print(mod % mod)"
    },
    {
        "number": 4068,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    m = int(stdin.strip())\n    dp = [0 for _ in range(m)]\n    dp[1] = 1\n    dp[2] = 1\n    for i in range(3, m+1):\n        for j in range(i, m+1):\n            if dp[i-1] == 0:\n                dp[i] = 1\n            if dp[j] == 0:\n                dp[i] = 1\n            if dp[i-j] == 0:\n                dp[i] = 1\n            if dp[j-i] == 0:\n                dp[i] = 1\n            if dp[j-i] == 0:\n                dp[i] = 1\n    return str(dp[m-1])\n\n\n-----Sample Input-----\n6 1\n3\n\n-----Sample Output-----\n4\n\nThere are four ways to climb up the stairs, as follows:\n - 0 \\to 1 \\to 2 \\to 4 \\to 5 \\to 6\n - 0 \\to 1 \\to 2 \\to 4 \\to 6\n - 0 \\to 2 \\to 4 \\to 5 \\to 6\n - 0 \\to 2 \\to 4 \\to 6\ndef"
    },
    {
        "number": 4068,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    a_1, a_2, a_3, a_M = map(int, stdin.split())\n    steps = []\n    for _ in range(N):\n        steps.append(0)\n    for _ in range(M):\n        steps[a_1] += 1\n        steps[a_2] += 2\n        steps[a_3] += 3\n        steps[a_M] += 4\n    return str(sum(steps))"
    },
    {
        "number": 4068,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    steps = [list(map(int, input().split())) for _ in range(N)]\n    dp = [0]\n    for i in range(N):\n        dp.append(dp[-1] + steps[i][0] + steps[i][1])\n    return ''.join(map(str, dp % (10**9 + 7)))\n\n-----Sample Input-----\n5 2\n3 1\n4\n1 2\n2 3\n\n-----Sample Output-----\nWe have seven ways to climb up the stairs.\n\n-----Sample Input-----\n3 2\n3\n2 1\n\n-----Sample Output-----\nWe have four ways to climb up the stairs.\n\n-----Sample Input-----\n1 1\n3\n\n-----Sample Output-----\nWe have three ways to climb up the stairs.\n\n\"\"\"\n\nN = int(input())\ndp = [0] * N\ndp[0] = 1\ndp[1] = 2\n"
    },
    {
        "number": 4069,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    D = int(stdin.split()[1])\n    X = int(stdin.split()[2])\n    if N < K:\n        D *= -1\n    if X > K:\n        X -= K\n    print(abs(X))"
    },
    {
        "number": 4069,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin.strip().split(' ')[0])\n    K = int(stdin.strip().split(' ')[1])\n    D = int(stdin.strip().split(' ')[2])\n    answer = 0\n    for move in range(abs(X), abs(X) + abs(K) - D):\n        answer = abs(move)\n    print(answer)\n    return str(answer)\n\nprint(solution(\"6 2 4\"))\n"
    },
    {
        "number": 4069,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    pass\n'''\nimport math\ndef"
    },
    {
        "number": 4069,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    x = list(map(int, stdin.split()))\n    res = sys.maxsize\n    min_val = sys.maxsize\n    for i in range(n):\n        if x[i] < min_val:\n            min_val = x[i]\n        if x[i] == min_val:\n            if x[i] < k:\n                res = min(res, i + k - x[i])\n            else:\n                res = min(res, i - x[i])\n    return str(res)"
    },
    {
        "number": 4069,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x,k,d=map(int,stdin.split())\n    if d>0:\n        d=d*-1\n        x=x+d\n    else:\n        x=x-d\n    return str(abs(x))\n"
    },
    {
        "number": 4069,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n    takahashi = 0\n    destination = 0\n\n    for c in stdin:\n        takahashi += int(c)\n    \n    destination = abs(destination - takahashi)\n    \n    return str(destination)\n\n\n    \n    \n    \n    "
    },
    {
        "number": 4069,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    x = map(int, stdin.split())\n    print(abs(x[0] - x[1]))\n    \nprint(solution(stdin))\n\n-----Sample Input-----\n5 3\n2 4\n1 6\n\n-----Sample Output-----\n4\n\nTakahashi is now at coordinate 5. It is optimal to make the following moves:\n - Move from coordinate 5 to (5 - 1 = 0) 0.\n - Move from coordinate 3 to (3 - 1 = 0) 2.\n - Move from coordinate 2 to (2 - 1 = 0) 0.\n - Move from coordinate 1 to (1 - 1 = -3).\n - Move from coordinate 0 to (0 - 3 = 0).\nprint(abs(x[0] - x[1]))\n"
    },
    {
        "number": 4069,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n < 0:\n        print(\"error\")\n        return \"error\"\n    if n == 0:\n        return \"error\"\n\n    l = list(map(int, stdin.split(\" \")))\n    k = int(l[0])\n    d = int(l[1])\n    direction = \"N\"\n    if k < d:\n        direction = \"S\"\n\n    if k > d:\n        direction = \"E\"\n\n    if direction == \"N\":\n        return str(abs(l[2] - l[3]))\n    elif direction == \"S\":\n        return str(abs(l[2] - l[1]))\n    else:\n        return str(abs(l[2] - l[3]))\n\n\n------------------------------\n\ndef"
    },
    {
        "number": 4069,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    k, d = map(int, stdin.split())\n    X, K = map(int, stdin.split())\n    if X < 0: X = -X\n    if X > 10**15 or K < 0: return \"\"\n    if X == 0 or K == 0: return str(abs(X + K))\n    if d < 0:\n        return solution(str(abs(X + K))[::-1])\n    return solution(str(abs(X + K))[::-1])\n-----Sample Input-----\n6 2 4\n\n-----Sample Output-----\n2\n\nTakahashi is now at coordinate 6. It is optimal to make the following moves:\n - Move from coordinate 6 to (6 - 4 =) 2.\n - Move from coordinate 2 to (2 - 4 =) -2.\nHere, the absolute value of the coordinate of the destination is 2, and we cannot make it smaller.\n def solution(stdin: str) -> str:\n    k, d = map(int, stdin.split())\n    X, K = map(int, stdin.split())\n    if X < 0: X = -X\n    if X > 10**15 or K < 0: return \"\"\n    if X == 0 or K == 0: return str(abs(X + K))\n    if d < 0:\n        return solution(str(abs(X + K))[::-1])\n    return solution(str(abs(X + K))[::-1])\n\"\"\"\n\ndef"
    },
    {
        "number": 4069,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    from sys import stdin\n    _ = stdin.readline()\n    \n    x = list(map(int, stdin.readline().split()))\n    \n    return str(min(abs(x[i]-x[i-1]) for i in range(len(x)-1)))"
    },
    {
        "number": 4070,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    ans = 0\n    if n == 1:\n        return 1\n    for i in range(1, n):\n        if n % i == 0:\n            ans += i\n    return ans\n"
    },
    {
        "number": 4070,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    \n    if n % 2 == 0:\n        return '2'\n    else:\n        return '0'\n"
    },
    {
        "number": 4070,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.rstrip())\n    max_num = 0\n    min_num = 2147483647\n    for i in range(1, n + 1):\n        max_num = max(max_num, i)\n        min_num = min(min_num, i)\n    return str(min_num - max_num)\n"
    },
    {
        "number": 4070,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n <= 2000000000:\n        return str(n)\n    elif n <= 1000000000:\n        if n % 1000000 == 0:\n            return str(n) + \"0000\"\n        else:\n            return str(n) + \"00000\"\n    else:\n        return str(n) + \"0000\"\n"
    },
    {
        "number": 4070,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return str(min(int(stdin) // 2, int(stdin) % 2))\n"
    },
    {
        "number": 4070,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    solution_list = []\n    for i in range(1, n+1):\n        for j in range(1, i+1):\n            solution_list.append(j)\n    \n    return solution_list[n-1]\n\n-----Constraints-----\n1 <= n <= 2000000000\n\n2 <= stdin.length <= 2000\nstdin.length <= 3*10^4\n\n-----------------------------------------------------------------------------\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4070,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    maxVal = max(map(int, stdin.split()))\n    minVal = min(map(int, stdin.split()))\n    m = maxVal // minVal\n    return str(m)\n"
    },
    {
        "number": 4070,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4070,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(len(stdin)-1,0,-1):\n        if(int(stdin[i])%2 == 1):\n            return str(int(stdin[i])+1)\n    return str(int(stdin[0])+1)\n"
    },
    {
        "number": 4070,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    answer = len(str(int(stdin.strip()) * 2))\n    return str(answer)\n"
    },
    {
        "number": 4071,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    if n == 1:\n        return stdin[0]\n    left = 0\n    right = n\n    while left < right:\n        left_and_right = min(left, right)\n        if left_and_right >= n//2:\n            left = left_and_right + 1\n            right = right - 1\n        else:\n            right = right - 1\n    return stdin[left] + solution(stdin[left + 1:right])"
    },
    {
        "number": 4071,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str(eval(stdin))\n\n\"Input: numbers.txt. Output: 6\"\n\"Input: numbers.txt. Output: \"\n"
    },
    {
        "number": 4071,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    p = 0\n    #print(stdin)\n    a = stdin\n    b = []\n    for i in a:\n        if i.isdigit():\n            b.append(i)\n    print(b)\n    #print(len(b))\n    c = 0\n    for i in range(len(b)):\n        c += int(b[i])\n    print(c)\n    print(c % 1000000)\n    return c % 1000000"
    },
    {
        "number": 4071,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return str(sum)\n\n\ndef"
    },
    {
        "number": 4071,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = ''\n    for i in stdin:\n        if i == '-' or i == '+':\n            s += i\n        else:\n            s += i\n    return s\n\nprint(solution(input()))\n=======\nInput\nInput:\n3\n-1\n-1\n-1\nOutput:\n27\ndef"
    },
    {
        "number": 4071,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    result = []\n    def solve():\n        if len(result) == len(stdin):\n            return ''.join(map(str, result))\n        for i in stdin:\n            if i!='':\n                result.append(int(i))\n            else:\n                result.append(solve())\n    solve()\n    return ''.join(map(str, result))\n"
    },
    {
        "number": 4071,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return str(pow(10, int(stdin)))\n    \n    \n'''\n\nclass Solution:\n    def myPow(self, x: int, n: int) -> int:\n        if n == 0:\n            return 1\n        elif n == 1:\n            return x\n        elif n%2 == 0:\n            return self.myPow(x, n//2)**2\n        else:\n            return self.myPow(x, n//2)**2\n        \n    \n"
    },
    {
        "number": 4071,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    answer = ''\n    # stdin\uc758 input\uc5d0\uc11c \uc2dc\uc791\ud558\ub294 \ubb38\uc790\uc5f4\uc744 \uac00\uc838\uc628\ub2e4.\n    strs = list(stdin.strip())\n    # \ubb38\uc790\ub294 \uc5c6\uc744 \uacbd\uc6b0\ub97c \uc81c\uc678\ud55c\ub2e4.\n    if not strs:\n        return ''\n    for s in strs:\n        # strs\uc5d0\uc11c \uac01 \ubb38\uc790\ub97c \uae30\uc900\uc73c\ub85c \uacf5\ubc31 \ubb38\uc790\ub97c \uc81c\uc678\ud55c\ub2e4.\n        if s.strip():\n            # \ub2e4\uc74c \ubb38\uc790\ub97c \ubb38\uc790\uc5f4\ub85c \ub9cc\ub4e4\uc5b4\uc11c \ub2e4\uc74c \ubb38\uc790\ub85c \ubcc0\ud658\ud574\uc900\ub2e4.\n            answer += s.strip() +''\n    return answer.strip()\n\n\uc81c\ud55c\uc0ac\ud56d\n\uc785\ub825\uc740 \uc5ec\ub7ec \uac1c\uc758 \ud14c\uc2a4\ud2b8 \ucf00\uc774\uc2a4\ub85c \uc774\ub8e8\uc5b4\uc838 \uc788\ub2e4.\n\uc785\ub825\uc758 \uac01 \ud14c\uc2a4\ud2b8 \ucf00\uc774\uc2a4\ub294 \uc54c\ud30c\ubcb3 \uc18c\ubb38\uc790, \uacf5\ubc31, \uc601\ubb38\uc790\ub85c \uc774\ub8e8\uc5b4\uc838 \uc788\ub2e4.\n\uc785\ub825\uc758 \uccab \ubc88\uc9f8 \uc904\uc5d0\ub294 \uc785\ub825\uc758 \uccab \uc218\uc640 \ubc18\ubcf5 \ud69f\uc218\ub97c \ub098\ud0c0\ub0b4\ub294 \uc815\uc218 a\uc640 \ubc18\ubcf5 \ud69f\uc218 m\uc774 \uacf5\ubc31\uc73c\ub85c \uad6c\ubd84\ub418\uc5b4 \uc8fc\uc5b4\uc9c4\ub2e4. (1 \u2264 a \u2264 100, 1 \u2264 m \u2264 99)\n\n\ucd9c\ub825\uc740 \uc5ec\ub7ec \uac1c\uc758 \ud14c\uc2a4\ud2b8 \ucf00\uc774\uc2a4\ub85c \uc774\ub8e8\uc5b4\uc838 \uc788\ub294 \ubb38\uc790\uc5f4\ub85c \uad6c\uc131\ub418\uc5b4 \uc8fc\uc5b4\uc9c4\ub2e4.\n\uc785\ub825\uc5d0 \ub300\ud574\uc11c\ub294 a\uc640 m\uac00 \uacf5\ubc31\uc73c\ub85c \uad6c\ubd84\ub418\uc5b4 \uc8fc\uc5b4\uc9c4\ub2e4.\n\uc785\ub825\uc73c\ub85c \ubc1b\uc740 \ubb38\uc790\uc5f4\uc744 \uc21c\uc11c\ub300\ub85c \ubc30\uc5f4\uc5d0 \ub2f4\ub294 \ud615\ud0dc\ub85c \ucd9c\ub825\ud55c\ub2e4.\n\n\uc608\uc81c \uc785\ub825 1 \n3\nabc\nabcdefghi\ncdefghijklm\n\uc608\uc81c \ucd9c\ub825 1 \n27\nabc\nabc\ndef"
    },
    {
        "number": 4071,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    cnt = 0\n    for i in range(1, len(stdin)):\n        if stdin[i] == 'A':\n            cnt += 1\n        elif stdin[i] == 'B':\n            cnt -= 1\n        else:\n            break\n    return cnt\n'''"
    },
    {
        "number": 4071,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    answer = \"\"\n    num = list(map(int, stdin.split()))\n    num.sort()\n    for i in num:\n        if i == 1:\n            answer += \"1\"\n        else:\n            answer += str(i)\n    return answer\n\nOutput\n\"3\"\n\n### \ubc29\ubc952\n\n\uc774\uc9c4 \ud0d0\uc0c9\uc744 \uc704\ud574\uc11c\ub294 \ubb34\uc870\uac74 \ud2b9\uc815 \ubc94\uc704\ub97c \uc774\uc6a9\ud558\ub294 \uacbd\uc6b0\ub85c \ub098\ub220\uc11c \ubc18\ud658\ud55c\ub2e4.\n\n\"\"\""
    },
    {
        "number": 4072,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    sum_num = 0\n    if n == 1:\n        return \"1\"\n    if n % 2 == 0:\n        sum_num = n // 2\n    else:\n        sum_num = (n // 2) + 1\n    return str(sum_num)\n\n\n-----Constraints-----\n1 <= stdin.length <= 10^5\n0 <= a <= 999\n"
    },
    {
        "number": 4072,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    str_set = set()\n    for i in range(1, 10):\n        str_set.add(str(i))\n    answer = 0\n    for i in range(2, 99):\n        if str(i) not in str_set:\n            answer = 1\n            break\n    return answer\n"
    },
    {
        "number": 4072,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    numbers = list(map(int, stdin.split()))\n    result = 0\n    for i in range(len(numbers)):\n        if numbers[i] % 3 == 1 and numbers[i] % 5 == 0:\n            result = result + 1\n    return result\n\n-----Constraints-----\n0\n\n-------------------\n'''\ndef"
    },
    {
        "number": 4072,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\n\n-----Constraints-----\n1 \u2264 stdin.length \u2264 1,000,000\n0 \u2264 a \u2264 999\n\n\n-----Tags-----\nFirst Try\nSecond Try\nThird Try\nFourth Try\n\n---Time---\nO(n)\nO(n)\nO(1)\nO(n)\nO(n)\nO(n)\nO(1)\nO(n)\nO(1)\nO(n)\nO(1)\nO(n)\nO(1)\nO(n)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO(1)\nO("
    },
    {
        "number": 4072,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    data = list(map(int, stdin.split()))\n    def solution_1(data: list, index: int):\n        ans = 0\n        for i in range(index, len(data)):\n            if i + 1 < len(data) and data[i] == data[i+1]:\n                continue\n            ans += 1\n        return ans\n    def solution_2(data: list, index: int):\n        ans = 0\n        for i in range(index, len(data)):\n            ans += data[i] - data[i - 1]\n        return ans\n    def solution_3(data: list, index: int):\n        ans = 0\n        for i in range(index, len(data)):\n            ans += max(data[i] - data[i - 1], data[i] - data[i - 1] + 1)\n        return ans\n    return str(solution_1(data, 0) + solution_2(data, 0) + solution_3(data, 0))\n\"\"\"\n\ndef"
    },
    {
        "number": 4072,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    return '1' if (a >= b and a % c == 0) else '0'\n"
    },
    {
        "number": 4072,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    cnt = 0\n    while a > 0:\n        x = a % 10\n        if cnt >= b:\n            return \"0\"\n        cnt += x\n        a //= 10\n    return \"1\"\n\n\ndef"
    },
    {
        "number": 4072,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    from collections import deque\n    answer = \"0\"\n    deq = deque()\n    for line in stdin:\n        num = line.split()[0]\n        answer = answer + num\n        deq.appendleft(int(num))\n    \n    deq.pop()\n    while deq:\n        num = deq.popleft()\n        if num + answer == \"1\":\n            return \"1\"\n        else:\n            answer = answer + num\n            deq.appendleft(int(num))\n    return \"0\"\n"
    },
    {
        "number": 4072,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    pass\n"
    },
    {
        "number": 4072,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin) == 1:\n        return stdin[0]\n    return solution(stdin[1:]) + solution(stdin[0])\n\"\"\"\n\ndef"
    },
    {
        "number": 4073,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    arr = []\n    arr.append(n)\n    x = int(stdin.strip())\n    while x!= 0:\n        arr.append(x%10)\n        x = x // 10\n    arr.sort()\n    m = arr[-1]\n    answer = str(m)\n    return answer\n\n\nOutput: \"ABRACADABRA\"\n\n\n-----Original-----\n\nInput\n4\n5 3 3\n\nOutput\n3\ndef"
    },
    {
        "number": 4073,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def solve(a: str) -> str:\n        length = len(a)\n        ans = a[0] + str(10 ** length - 1) + a[1]\n        return ans\n\n    def solve2(a: str) -> str:\n        length = len(a)\n        ans = a[0] + str(10 ** length - 1) + a[1]\n        return ans\n\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    print(solve(a))\n    print(solve2(a))\n    return"
    },
    {
        "number": 4073,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # ===Modify here===\n    return str(int(stdin.split()[0])+int(stdin.split()[1]))\n\n-----Initialization-----\nn = int(input())\na = list(map(int, input().split()))"
    },
    {
        "number": 4073,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    answer = []\n    for i in range(int(stdin)):\n        answer.append(int(stdin[i]))\n    answer.sort()\n    return str(answer[len(answer)-1])\n\nPrints solution\n\n6\ndef"
    },
    {
        "number": 4073,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lst = []\n    for i in range(3):\n        temp = int(stdin[i+1])\n        lst.append(temp)\n    lst.sort()\n    for i in range(len(lst) - 1):\n        if lst[i + 1] > lst[i]:\n            return (lst[i] * 2) + (lst[i + 1] * 2)\n    return lst[-1]\n\n\"\"\"\n\nimport unittest\nimport sys"
    },
    {
        "number": 4073,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    ans = [0,0]\n    for _ in range(int(stdin)):\n        n = int(stdin.split()[0])\n        a = [int(x) for x in stdin.split()[1].split()]\n        ans[1] += a[0]*(n-1)\n        ans[0] += a[1]*n\n    return str(ans[0]) +'' + str(ans[1])\n\n\n-----Constraints-----\n\n1 <= n <= 10^6\n"
    },
    {
        "number": 4073,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    a.sort(reverse=True)\n    b = 0\n    for i in a:\n        b += i*i\n    return str(b)\n\n\ndef"
    },
    {
        "number": 4073,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # get max a_i\n    A = list(map(int, stdin.split()))\n    A.sort()\n    # get n\n    n = len(A)\n    # get a_i\n    a_i = A[0]\n    # check if list has 0\n    if a_i == 0:\n        return '0'\n    # check if list has 1\n    if a_i == 1:\n        return '1'\n    # now get the difference\n    diff = abs(a_i - A[0])\n    # now iterate over list\n    for i in range(1, n):\n        # if diff is 0, set to difference + i\n        if abs(A[i] - A[0]) == 0:\n            diff = abs(A[i] - A[0]) + diff\n        # if diff is 1, set to difference - i\n        if abs(A[i] - A[1]) == 1:\n            diff = abs(A[i] - A[1]) + diff\n    # return difference\n    return str(diff)\n\n'''\n\nclass Solution:\n    def solve(self, stdin: str) -> str:\n        # get max a_i\n        A = list(map(int, stdin.split()))\n        A.sort()\n        # get n\n        n = len(A)\n        # get a_i\n        a_i = A[0]\n        # check if list has 0\n        if a_i == 0:\n            return '0'\n        # check if list has 1\n        if a_i == 1:\n            return '1'\n        # now get the difference\n        diff = abs(a_i - A[0])\n        # now iterate over list\n        for i in range(1, n):\n            # if diff is 0, set to difference + i\n            if abs(A[i] - A[0]) == 0:\n                diff = abs(A[i] - A[0]) + diff\n            # if diff is 1, set to difference - i\n            if abs(A[i] - A[1]) == 1:\n                diff = abs(A[i] - A[1]) + diff\n        # return difference\n        return str(diff)"
    },
    {
        "number": 4073,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def solve(a, b, c):\n        c = str(c)\n        temp = a\n        for i in range(len(b)):\n            temp = str(temp ^ int(b[i]))\n        return temp\n\n    answer = []\n    for i in range(1, len(stdin)):\n        answer.append(solve(str(stdin[i - 1]), stdin[i].split(), int(stdin[i + 1])))\n    return ''.join(answer)\n\n\"\"\"\n"
    },
    {
        "number": 4073,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    # for loop\n    \n    # input\n    # output\n    \n    # read\n    \n    # write\n    \n    # echo\n\n    n = int(stdin.strip())\n    a_list = list(map(int, stdin.strip().split()))\n    # print(a_list)\n\n    for i in range(len(a_list)):\n        a_list[i] ^= i+1\n        # print(a_list)\n        # print(i)\n        # print(a_list[i])\n        # print(a_list[i] + 1)\n        # print(a_list[i] + 1)\n        # print(a_list[i] + 1)\n        # print(a_list[i] + 1)\n        # print(a_list[i] + 1)\n        # print(a_list[i] + 1)\n        # print(a_list[i] + 1)\n        # print(a_list[i] + 1)\n        # print(a_list[i] + 1)\n        # print(a_list[i] + 1)\n        # print(a_list[i] + 1)\n        # print(a_list[i] + 1)\n        # print(a_list[i] + 1)\n        # print(a_list[i] + 1)\n        # print(a_list[i] + 1)\n        # print(a_list[i] + 1)\n        # print(a_list[i] + 1)\n        # print(a_list[i] + 1)\n        # print(a_list[i] + 1)\n        # print(a_list[i] + 1)\n        # print(a_list[i] + 1)\n        # print(a_list[i] + 1)\n        # print(a_list[i] + 1)\n        # print(a_list[i] + 1)\n        # print(a_list[i] + 1)\n        # print(a_list[i] + 1)\n        # print(a_list[i] + 1)\n        # print(a_list[i] + 1)\n        # print(a_list[i] + 1)\n        # print(a_list[i] + 1)\n        # print(a_list[i] + 1)\n        # print(a_list[i] + 1)\n        # print(a_list[i] + 1)\n        # print(a_list[i] + 1)\n        # print(a_list[i] + 1)\n        # print(a_list[i] + 1)\n        # print(a_list[i] + 1)\n        # print(a_list[i] + 1)\n        # print(a_list[i] + 1)\n        # print(a_list[i] + 1)\n        # print(a_list[i] + 1)\n        # print(a_list[i] + 1)\n        # print(a_list[i] + 1)\n        # print(a_list[i] + 1)\n        # print(a_list[i] + 1)\n        # print(a_list[i] + 1)\n        # print(a_list[i] + 1)\n        # print(a_list[i] + 1)\n        # print(a_list[i] + 1)\n        # print(a_list[i] + 1)\n        # print(a_list[i] + 1)\n        # print(a_list[i] + 1)\n        # print(a_list[i] + 1)\n        # print(a_list[i] + 1)\n        # print(a_list[i] + 1)\n        # print(a_list[i] + 1)\n        # print(a_list[i] + 1)\n        # print(a_list[i] + 1)\n        # print(a_list[i] + 1)\n        # print(a_list[i] + 1)\n        # print(a_list[i] + 1)\n        # print(a_list[i] + 1)\n        # print(a_list[i] + 1)\n        # print(a_list[i] + 1)\n        # print(a_list[i] + 1)\n        # print(a_list[i] + 1)\n        # print(a_list[i] + 1)\n        # print(a_list[i] + 1)\n        # print(a_list[i] + 1)\n        # print(a_list[i] + 1)\n        # print(a_list[i] + 1)\n        # print(a_list[i] + 1)\n        # print(a_list[i] + 1)\n        # print(a_list[i] + 1)\n        # print(a_list[i] + 1)\n        # print(a_list[i] + 1)\n        # print(a_list[i] + 1)\n        # print(a_list[i] + 1)\n        # print(a_list[i] + 1)\n        # print(a_list[i] + 1)\n        # print(a_list[i] + 1)\n        # print(a_list[i] + 1)\n        # print(a_list[i] + 1)\n        # print(a_list[i] + 1)\n        # print(a_list[i] + 1)\n        # print(a_list[i] + 1)\n        # print(a_list[i] + 1)\n        # print(a_list[i] + 1)\n        # print(a_list[i] + 1)\n        # print(a_list[i] + 1)\n        # print(a_list[i] + 1)\n        # print(a_list[i] + 1)\n        # print(a_list[i] + 1)\n        # print(a_list[i] + 1)\n        # print(a_list[i] + 1)\n        # print(a_list[i] + 1)\n        # print(a_list[i] + 1)\n        # print(a_list[i] + 1)\n        # print(a_list[i] + 1)\n        # print(a_list[i] + 1)\n        # print(a_list[i] + 1)\n        # print(a_list[i] + 1)\n        # print(a_list[i] + 1)\n        # print(a_list[i] + 1)\n        # print(a_list[i] + 1)\n        # print(a_list[i] + 1)\n        # print(a_list[i] + 1)\n        # print(a_list[i] + 1)\n        # print(a_list[i] + 1)\n        # print(a_list[i] + 1)\n        # print(a_list[i] + 1)\n        # print(a_list[i] + 1)\n        # print(a_list[i] + 1)\n        # print(a_list[i] + 1)\n        # print(a_list[i] + 1)\n        # print(a_list[i] + 1)\n        # print(a_list[i] + 1)\n        # print(a_list[i] + 1)\n        # print(a_list[i] + 1)\n        # print(a_list[i] + 1)\n        "
    },
    {
        "number": 4074,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(min(n, k))\n"
    },
    {
        "number": 4074,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join(['\\n'.join(['\\n'.join(map(str, map(int, map(int, map(int, input().split())))))]) for _ in range(int(stdin))])\n"
    },
    {
        "number": 4074,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin.strip().split()[0])\n    y = int(stdin.strip().split()[1])\n    k = int(stdin.strip().split()[2])\n    n = x*y*k\n    return str(n//(x*y*k))\n\nn = int(stdin.strip().split()[0])\nk = int(stdin.strip().split()[1])\n\ndef"
    },
    {
        "number": 4074,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    k = int(stdin[1])\n    types = [int(c) for c in stdin[2:2+n]]\n    for t in types:\n        if t == 0:\n            continue\n        n_p = 1\n        for n_p in range(t-1, k+1, t):\n            n_p *= n\n        if n_p % k!= 0:\n            n_p += 1\n        print(n_p)\n    return str(n_p)\n\nprint(solution(\"4 5 2\"))"
    },
    {
        "number": 4074,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n > k:\n        print(k)\n    elif n < k:\n        print(n)\n    else:\n        for i in range(1, k+1):\n            print(n//i)\n        print(n%i)\n"
    },
    {
        "number": 4074,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n,k=map(int,stdin.split())\n    types=[]\n    for i in range(1,k+1):\n        types.append(i)\n    \n    res=\"\"\n    for i in range(1,n+1):\n        nums=[]\n        for j in range(1,i+1):\n            nums.append(int(stdin[j]))\n        nums.sort()\n        res+=str(types[nums[-1]])+\" \"\n        types.pop(nums[-1])\n    return res.rstrip()\n\nprint(solution(stdin))"
    },
    {
        "number": 4074,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n        n = int(stdin)\n        k = int(stdin.split()[0])\n        \n        total_shovels = 0\n        # find all the shovels of the total_shovels_range\n        total_shovels_range = range(1, k+1)\n        \n        while len(total_shovels_range) > 0:\n            # find the smallest shovel of the range\n            shovel_to_buy = min(total_shovels_range)\n            total_shovels_range.remove(shovel_to_buy)\n            # print the shovels of that range\n            print(shovel_to_buy)\n        \n        # get the number of shovels that need to buy\n        total_shovels = sum(total_shovels_range)\n        \n        return str(total_shovels)\n    \n    \n\n2\n6\n6 7\n999999\n999998\n"
    },
    {
        "number": 4074,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    # Map number of distinct packages and min cost to the max cost\n    n, k = map(int, stdin.split(' '))\n    \n    # Set max cost to the maximum of all values\n    maxCost = 0\n    \n    # Map number of unique types of packages to the maxCost\n    types = {}\n    \n    # Map number of distinct packages to a list of their types\n    types = map(int, stdin.split(' '))\n    \n    # Map number of unique types to the typeCost\n    typeCost = 0\n    \n    # Iterate over the types, set the maxCost to the minCost + typeCost\n    for type in types:\n        if type in types:\n            typeCost = min(typeCost, maxCost + typeCost)\n            maxCost += typeCost\n            \n    # Calculate the minCost in the next loop\n    minCost = 0\n    \n    # Iterate over the types, set the minCost to the maxCost + typeCost\n    for type in types:\n        if type in types:\n            typeCost = min(typeCost, maxCost + typeCost)\n            minCost += typeCost\n            \n    # Calculate the minCost in the next loop\n    minCost = 0\n    \n    # Iterate over the types, set the minCost to the maxCost + typeCost\n    for type in types:\n        if type in types:\n            typeCost = min(typeCost, maxCost + typeCost)\n            minCost += typeCost\n            \n    # Print minimum number of packages\n    print(minCost)\n    \n    return str(minCost)\n\n--------Input:\n\nInput is constructed by splitting the input on whitespaces and taking the smallest of n and k.\n\nOutput is constructed by splitting the output on whitespaces and taking the smallest of n and k.\n\nSample input:\n\nInput:\n5\n8 7\n8 1\n6 10\n999999733 999999732\n999999733 999999733\n\nOutput:\n2\n8\n1\n999999733\n1\n\"\"\"\n\n\n\ndef"
    },
    {
        "number": 4074,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    k = int(stdin.strip().split(' '))\n    answer = n\n    # answer = max(n, k)\n    for i in range(1, k+1):\n        for j in range(1, i+1):\n            answer = min(answer, i+j)\n    return str(answer)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4074,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    k,n=map(int,stdin.split())\n    h=list(map(int,stdin.split()))\n    k=min(k,max(h))\n    answer=0\n    for i in range(k):\n        answer+=sum(h[:i+1])\n        answer+=h[i]\n    return str(answer)\n"
    },
    {
        "number": 4075,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    k_i = list(map(int, stdin.split()))\n    s_i = list(map(int, stdin.split()))\n    p = list(map(int, stdin.split()))\n\n    def con(i, j, k_i):\n        k = 0\n        for k in range(len(k_i)):\n            if k_i[k] == s_i[i][k]:\n                k += 1\n        return (k == j) and (k + 1) % 2\n\n    def dfs(x):\n        if x == N:\n            return 0\n        if x == M:\n            return 1\n        if p[x] == 0:\n            return dfs(x + 1)\n        return dfs(x + 1) + con(x, 0, k_i) + con(x, 1, k_i)\n\n    return str(dfs(0))\n\n-----Constraints-----\n - 1 \\leq N, M \\leq 10\n - 1 \\leq k_i \\leq N\n - 1 \\leq s_{ij} \\leq N\n - s_{ia} \\neq s_{ib} (a \\neq b)\n - p_i is 0 or 1.\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN M\nk_1 s_{11} s_{12}... s_{1k_1}\n:\nk_M s_{M1} s_{M2}... s_{Mk_M}\np_1 p_2... p_M\n\n-----Output-----\nPrint the number of combinations of \"on\" and \"off\" states of the switches that light all the bulbs.\n\n-----Sample Input-----\n2 2\n2 1 2\n1 2\n0 1\n\n-----Sample Output-----\n1\n\n - Bulb 1 is lighted when there is an even number of switches that are \"on\" among the following: Switch 1 and 2.\n - Bulb 2 is lighted when there is an odd number of switches that are \"on\" among the following: Switch 2.\nThere are four possible combinations of states of (Switch 1, Switch 2): (on, on), (on, off), (off, on) and (off, off). Among them, only (on, on) lights all the bulbs, so we should print 1.\ndef"
    },
    {
        "number": 4075,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    k_i = list(map(int, stdin.split()))\n    p_i = int(stdin.split()[-1])\n    s_set = set()\n    n = len(k_i)\n    if n % 2:\n        s_set = set(range(n+1))\n    else:\n        s_set = set(range(n+2))\n    # for i in range(n-1):\n    #     for j in range(i+1, n):\n    #         s_set.add(k_i[i]+k_i[j])\n    def fact(n):\n        if n == 0:\n            return 1\n        return n * fact(n-1)\n\n    def k_loop(i, p):\n        if (i, p) in s_set:\n            return fact(n)\n        return 1\n    def s_loop(i, p):\n        if i == n:\n            return 1\n        if p == 0:\n            return 0\n        return k_loop(i+1, p) * k_loop(i+1, p-1)\n    # print(s_loop(0, p_i))\n    # print(s_loop(1, p_i))\n    # print(s_loop(n-1, p_i))\n    ans = 0\n    for i in range(n):\n        ans += s_loop(i, p_i)\n    return str(ans)"
    },
    {
        "number": 4075,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, M, k, p = map(int, stdin.split())\n    # Initialize \"on\" and \"off\" state to 0 and 1 respectively.\n    s_on = [0, 1]\n    s_off = [1, 0]\n    \n    # Initialize \"on\" and \"off\" state to \"p_i\" for each bulb.\n    s_on_i = [0, 0]\n    s_off_i = [0, 0]\n    \n    # Initialize \"on\" and \"off\" state to \"p_i\" for each bulb.\n    s_on_i_i = [0, 0]\n    s_off_i_i = [0, 0]\n    \n    # Initialize \"on\" and \"off\" state to \"p_i\" for each bulb.\n    s_on_i_j = [0, 0]\n    s_off_i_j = [0, 0]\n    \n    # Initialize \"on\" and \"off\" state to \"p_i\" for each bulb.\n    s_on_i_k = [0, 0]\n    s_off_i_k = [0, 0]\n    \n    # Initialize \"on\" and \"off\" state to \"p_i\" for each bulb.\n    s_on_i_l = [0, 0]\n    s_off_i_l = [0, 0]\n    \n    # Initialize \"on\" and \"off\" state to \"p_i\" for each bulb.\n    s_on_i_m = [0, 0]\n    s_off_i_m = [0, 0]\n    \n    # Initialize \"on\" and \"off\" state to \"p_i\" for each bulb.\n    s_on_i_n = [0, 0]\n    s_off_i_n = [0, 0]\n    \n    # Initialize \"on\" and \"off\" state to \"p_i\" for each bulb.\n    s_on_i_o = [0, 0]\n    s_off_i_o = [0, 0]\n    \n    # Initialize \"on\" and \"off\" state to \"p_i\" for each bulb.\n    s_on_i_p = [0, 0]\n    s_off_i_p = [0, 0]\n    \n    # Initialize \"on\" and \"off\" state to \"p_i\" for each bulb.\n    s_on_i_q = [0, 0]\n    s_off_i_q = [0, 0]\n    \n    # Initialize \"on\" and \"off\" state to \"p_i\" for each bulb.\n    s_on_i_r = [0, 0]\n    s_off_i_r = [0, 0]\n    \n    # Initialize \"on\" and \"off\" state to \"p_i\" for each bulb.\n    s_on_i_s = [0, 0]\n    s_off_i_s = [0, 0]\n    \n    # Initialize \"on\" and \"off\" state to \"p_i\" for each bulb.\n    s_on_i_t = [0, 0]\n    s_off_i_t = [0, 0]\n    \n    # Initialize \"on\" and \"off\" state to \"p_i\" for each bulb.\n    s_on_i_u = [0, 0]\n    s_off_i_u = [0, 0]\n    \n    # Initialize \"on\" and \"off\" state to \"p_i\" for each bulb.\n    s_on_i_v = [0, 0]\n    s_off_i_v = [0, 0]\n    \n    # Initialize \"on\" and \"off\" state to \"p_i\" for each bulb.\n    s_on_i_w = [0, 0]\n    s_off_i_w = [0, 0]\n    \n    # Initialize \"on\" and \"off\" state to \"p_i\" for each bulb.\n    s_on_i_x = [0, 0]\n    s_off_i_x = [0, 0]\n    \n    # Initialize \"on\" and \"off\" state to \"p_i\" for each bulb.\n    s_on_i_y = [0, 0]\n    s_off_i_y = [0, 0]\n    \n    # Initialize \"on\" and \"off\" state to \"p_i\" for each bulb.\n    s_on_i_z = [0, 0]\n    s_off_i_z = [0, 0]\n    \n    # Initialize \"on\" and \"off\" state to \"p_i\" for each bulb.\n    s_on_i_x2 = [0, 0]\n    s_off_i_x2 = [0, 0]\n    \n    # Initialize \"on\" and \"off\" state to \"p_i\" for each bulb.\n    s_on_i_y2 = [0, 0]\n    s_off_i_y2 = [0, 0]\n    \n    # Initialize \"on\" and \"off\" state to \"p_i\" for each bulb.\n    s_on_i_z2 = [0, 0]\n    s_off_i_z2 = [0, 0]\n    \n    # Initialize \"on\" and \"off\" state to \"p_i\" for each bulb.\n    s_on_i_x3 = [0, 0]\n    s_off_i_x3 = [0, 0]\n    \n    # Initialize \"on\" and \"off\" state to \"p_i\" for each bulb.\n    s_on_i_y3 = [0, 0]\n    s_off_i_y3 = [0, 0]\n    \n    # Initialize \"on\" and \"off\" state to \"p_i\" for each bulb.\n    s_on_i_z3 = [0, 0]\n    s_off_i_z3 = [0, 0]\n    \n    # Initialize \"on\" and \"off\" state to \"p_i\" for each bulb.\n    s_on_i_x4 = [0, 0]\n    s_off_i_x4 = [0, 0]\n    \n    # Initialize \"on\" and \"off\" state to \"p_i\" for each bulb.\n    s_on_i_y4 = [0, 0]\n    s_off_i_y4 = [0, 0]\n    \n    # Initialize \"on\" and \"off\" state to \"p_i\" for each bulb.\n    s_on"
    },
    {
        "number": 4075,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    K = list(map(int, stdin.split()))\n    s_i = list(map(int, stdin.split()))\n\n    n = len(K)\n    p_i = 1\n    p_s = 1\n    ans = 0\n    for i in range(n):\n        if K[i] % 2 == 1:\n            for j in range(n):\n                if s_i[j] == i + 1:\n                    p_i *= pow(2, j)\n            if p_i % p_i == p_i:\n                ans += 1\n        else:\n            for j in range(n):\n                if s_i[j] == i + 1:\n                    p_i *= pow(2, j)\n            if p_i % p_i == p_i:\n                ans += 1\n\n    return str(ans)\n\n-----Sample Output-----\nOutput: \"1\"\n\n - Bulb 1 is lighted when there is an even number of switches that are \"on\" among the following: Switch 1 and 2.\nOutput: \"1\"\n\n - Bulb 2 is lighted when there is an odd number of switches that are \"on\" among the following: Switch 2.\nOutput: \"0\"\n\n-----Constraints-----\n - 1 \\leq N, M \\leq 10\n - 1 \\leq K[i] \\leq 10\n - K[i] \\leq M\n - 1 \\leq p_i \\leq M\n - p_i is 0 or 1.\n - All values in input are integers.\n\"\"\"\n\nimport math\nfrom itertools import permutations\n\ndef"
    },
    {
        "number": 4075,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    k = n\n    s = set()\n    p = set()\n    for i in range(m):\n        a, b = map(int, stdin.split())\n        s.add(a)\n        p.add(b)\n    l = list(s)\n    def comb(k, s):\n        if k == len(l):\n            if l in s:\n                return True\n            else:\n                return False\n        if l[k] == l[k+1]:\n            return comb(k+1, s) or comb(k, s)\n        else:\n            return comb(k, s)\n    for i in range(len(l)):\n        if comb(i, s):\n            print(1)\n        else:\n            print(0)\nsolution(input())\n\n### Algorithm ####\n\ndef"
    },
    {
        "number": 4075,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    bulbs = list(map(int, stdin.split()))\n    \n    def check(k):\n        c = 1\n        for switch in range(k):\n            for bulb in range(switch+1, k):\n                if bulbs[bulb]!= bulbs[switch]:\n                    return False\n            c += 1\n        return True\n        \n    def get_counts(k, p):\n        c = 1\n        for i in range(1, k+1):\n            if p%2!= 0:\n                c += check(i)\n            else:\n                c += check(i)\n                c %= 2\n        return c\n    \n    def get_combos(k, p):\n        if p%2 == 0:\n            return 2\n        elif p%2!= 0:\n            return 1\n        else:\n            return 0\n    \n    answer = 0\n    for i in range(1, m+1):\n        answer += get_counts(n, i) * get_combos(n, i)\n    \n    return str(answer)"
    },
    {
        "number": 4075,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    k_i = list(map(int, stdin.split()))\n    p_i = list(map(int, stdin.split()))\n    p_i = [i % 2 for i in p_i]\n    li_i = [0] * N\n    for i in range(N):\n        li_i[i] = [0, 1, 2]\n    li_i_i = list(map(li_i.__getitem__, k_i))\n    # print(li_i_i)\n    ans = 0\n    for i in range(len(k_i)):\n        # print(k_i[i])\n        # print(li_i_i[i])\n        # print(\"\\n\")\n        li_i_i[i] = li_i_i[i][p_i[i]]\n        ans += li_i_i[i]\n        # print(li_i_i[i])\n    print(ans)\n"
    },
    {
        "number": 4075,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    str_list = []\n    for _ in range(n):\n        s = stdin.split()\n        print(s)\n        if s[0] == \"on\":\n            str_list.append(s[1])\n        else:\n            str_list.append(s[2])\n    print(str_list)\n    count = 0\n    for i in range(len(str_list)):\n        if i % 2 == 0:\n            for j in range(i, len(str_list), 2):\n                count += int(str_list[j]) * int(str_list[j + 1])\n    print(count % (k ** 2))\n    return str(count % (k ** 2))"
    },
    {
        "number": 4075,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    switch = []\n    switch.append(n)\n    switch.append(n + 1)\n    switch.append(n * 2)\n    switch.append(n * 3)\n    switch.append(n * 4)\n    switch.append(n * 5)\n    switch.append(n * 6)\n    switch.append(n * 7)\n    switch.append(n * 8)\n    switch.append(n * 9)\n    switch.append(n * 10)\n    switch.append(n + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1"
    },
    {
        "number": 4075,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    bulbs = [[] for i in range(n)]\n    for i in range(m):\n        s, p = map(int, stdin.split())\n        bulbs[s - 1].append(p)\n    answer = []\n    for i in range(n):\n        if len(bulbs[i]) % 2 == 0:\n            answer.append(len(bulbs[i]))\n        else:\n            for j in range(len(bulbs[i])):\n                for k in range(j, len(bulbs[i])):\n                    answer.append(bulbs[i][j] + bulbs[i][k])\n    answer.sort()\n    return''.join(map(str, answer))\n\"\"\"\n\nimport sys\ninput = sys.stdin.readline"
    },
    {
        "number": 4076,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = map(int, stdin.split(\" \"))\n    a = A\n    b = B\n    while (a > 0):\n        a = a // 10\n        b = b // 10\n    if (B >= H):\n        return str(a * b)\n    else:\n        return str((a * b) * (10 ** -9))"
    },
    {
        "number": 4076,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str(float(stdin.split(\" \")[0]) * (float(stdin.split(\" \")[1]) / 60)) + \" \" + str(int(stdin.split(\" \")[2]))"
    },
    {
        "number": 4076,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = map(int, stdin.split())\n    x, y = divmod(A + B, 60)\n    x, y = (H + M) - x - y, x - A - B\n    return str(abs(x) * 60 + abs(y))\n\ndef"
    },
    {
        "number": 4076,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = map(int, stdin.split())\n\n    if (H < 12 and M < 59) or (H > 12 and M > 59):\n        return '0'\n    if (H < 12 and M > 59) or (H > 12 and M < 59):\n        return '0.00'\n\n    if A == 0:\n        return str(round(B / (H * 60), 5)) +'' + str(round((B - H * 60 / (H * 60) - M) / 60, 5)) +'' + str(round(H * 60 / (H * 60) - M, 5))\n\n    elif A == 1:\n        return str(round((B + H * 60 / (H * 60)) / 60, 5)) +'' + str(round(H * 60 / (H * 60) - M, 5)) +'' + str(round(H * 60 / (H * 60) + M, 5))\n\n    elif A == 2:\n        return str(round(B / (H + 60), 5)) +'' + str(round(H * 60 / (H + 60) - M, 5)) +'' + str(round((B + H * 60 / (H + 60)) / 60, 5)) +'' + str(round(H * 60 / (H + 60) + M, 5))\n\n    elif A == 3:\n        return str(round((B + H * 60 / (H + 60)) / 60, 5)) +'' + str(round((B - H * 60 / (H + 60)) / 60, 5)) +'' + str(round(H * 60 / (H + 60) + M, 5)) +'' + str(round((B - H * 60 / (H + 60)) / 60, 5))\n\n    elif A == 4:\n        return str(round((B / (H + 60)), 5)) +'' + str(round(H * 60 / (H + 60) - M, 5)) +'' + str(round((B + H * 60 / (H + 60)) / 60, 5)) +'' + str(round(H * 60 / (H + 60) + M, 5)) +'' + str(round((B - H * 60 / (H + 60)) / 60, 5))\n\n    elif A == 5:\n        return str(round((B / (H + 60)) + ((B + H * 60 / (H + 60)) / 60), 5)) +'' + str(round((B + H * 60 / (H + 60)) / 60, 5)) +'' + str(round(H * 60 / (H + 60) + M, 5)) +'' + str(round((B - H * 60 / (H + 60)) / 60, 5)) +'' + str(round((B - H * 60 / (H + 60)) / 60, 5))\n    else:\n        return '0.00'"
    },
    {
        "number": 4076,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A = int(stdin.strip())\n    B = int(stdin.strip())\n    H = int(stdin.strip())\n    M = int(stdin.strip())\n    a = (A*60*60 + B*60*60 + H) % (2*60*60*60*24)\n    b = (M*60*60 + H*60 + B) % (2*60*60*60*24)\n    return str(abs(b-a))"
    },
    {
        "number": 4076,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def change(s):\n        return ''.join(str(ord(c)-ord('a')) for c in s)\n\n    for _ in range(int(stdin)):\n        h, m = map(int, input().split(' '))\n        print(change(str(h)+str(m)))\n\nprint(solution('1 0'))\nprint(solution('2 4 7'))\n\"\"\"\ndef"
    },
    {
        "number": 4076,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    h, m = map(int, stdin.split())\n    print(str(a * 60 + b * 100 + h * 3600 + m * 3600))\n\n-----Performance-----\nRuntime: 1008 ms, faster than 85.07% of Python3 online submissions for Equal Rotation Point.\nMemory Usage: 14.8 MB, less than 9.21% of Python3 online submissions for Equal Rotation Point.\n\"\"\"\n\ndef"
    },
    {
        "number": 4076,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A = int(stdin.strip())\n    B = int(stdin.strip())\n    H = int(stdin.strip())\n    M = int(stdin.strip())\n    if (A >= 0) & (B >= 0) & (H >= 0) & (M >= 0):\n        return str(int(abs(B - A) / H) + int(M / H))\n    else:\n        return \"Error\"\n\nSample Output:\n5\nError\n\"\"\"\n\nfrom math import ceil\nfrom operator import le\n\ndef"
    },
    {
        "number": 4076,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = map(int, stdin.split(' '))\n    H_face = abs(H - 0)\n    M_face = abs(M - 59)\n    if (H_face + M_face) % 2 == 0:\n        return '{:.6f}'.format(abs((H_face - M_face) / 2))\n    else:\n        return '{:.6f}'.format(abs(((H_face - M_face) / 2) + 1))"
    },
    {
        "number": 4076,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    import math\n    A, B, H, M = [int(x) for x in stdin.split()]\n    A = math.floor(A/100)\n    B = math.floor(B/100)\n    H = math.floor(H/60)\n    M = math.floor(M/60)\n    if H > B:\n        H, B = B, H\n    if H > A:\n        H, A = A, H\n    if M > H:\n        M, H = H, M\n    if M > A:\n        M, A = A, M\n    return str(math.floor(math.pow((A + B) * (H + M), 1/2) * 100))"
    },
    {
        "number": 4077,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin[0]\n    m = stdin[1]\n    a = list(map(int, stdin[2:n+1]))\n    count = 0\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            if a[i] <= a[j]:\n                count += 1\n    return str(count)\n\ndef"
    },
    {
        "number": 4077,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    numbers = [list(map(int, stdin.split())) for _ in range(n)]\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            if numbers[i][0] < numbers[j][0] and numbers[j][0] < numbers[i][1]:\n                numbers[i] = numbers[j]\n                numbers[j] = numbers[i]\n    \n    if m % 2 == 0:\n        return str(numbers[(m//2)][0])\n    else:\n        return str(numbers[(m//2)-1][0]) + \",\" + str(numbers[(m//2)][0]) + \",\" + str(numbers[m//2][1])\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n0 <= m <= 10^5\n\nExample 1:\nInput:\n3\n1 4 5 60 4\n\nOutput:\n4\n\nExample 2:\nInput:\n3 2\n1 1 1\n\nOutput:\n2\n\nConstraints:\n\n1 <= n <= 10^5\n1 <= m <= 10^5\n\n-----Examples-----\nInput:\n5 4\n1 4 5 60 4\n\nOutput:\n8\n\nInput:\n3 1\n1 1 1\n\nOutput:\n6\n\nInput:\n15 2\n1 2 3 1 2 3 1 2 3 1 2 3 1 2 3\n\nOutput:\n97\n'''\n\ndef"
    },
    {
        "number": 4077,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n  n = int(stdin.strip())\n  a = [int(stdin.strip()) for _ in range(n)]\n  a.sort()\n  m = a[(n-1)//2]\n  return str(m * (m+1) // 2)\n\ndef"
    },
    {
        "number": 4077,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    return str(n*m-sum(a))\n"
    },
    {
        "number": 4077,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n,m = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    \n    l = 0\n    r = 0\n    for i in range(len(a)-1):\n        if a[i] > a[i+1]:\n            r += 1\n        if a[i] < a[i+1]:\n            l += 1\n    \n    if l % 2 == 0:\n        m = (m - (l + 1)) // 2\n        m = (m + 1) * (m + 1) // 2\n        \n    elif l % 2!= 0:\n        m = (m - (l + 1)) // 2\n        m = m * 2\n        \n    elif r % 2 == 0:\n        m = (m - (r + 1)) // 2\n        m = m * 2\n        \n    elif r % 2!= 0:\n        m = (m - (r + 1)) // 2\n        m = m * 2\n    \n    print(m)"
    },
    {
        "number": 4077,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    a.sort()\n    print(len(a))\n    return \",\".join(map(str, a))\n\n\n-------Expected Result-------\n\nPrint the required number.\n\nInput\n5 4\n1 4 5 60 4\nOutput\n8\n\nInput\n3 1\n1 1 1\nOutput\n6\n\nInput\n15 2\n1 2 3 1 2 3 1 2 3 1 2 3 1 2 3\nOutput\n97\n\n\n'''\n\ndef"
    },
    {
        "number": 4077,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(list(map(int, map(int, stdin.split())))))\n"
    },
    {
        "number": 4077,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    a_l = sorted(map(int, stdin.split()))\n    if m % 2 == 1:\n        a_r = a_l[m//2]\n    else:\n        a_r = (a_l[m//2] + a_l[m//2 - 1]) // 2\n    return str(n//2 + m // 2) + str(a_l[n//2]) + str(a_r)\n\n-----Constraints-----\n\n1 <= n <= 10^5\n0 <= m <= 10^5\n\n------SAMPLE INPUT 0-----\n\n2 2\n1 1 1\n\nOutput\n8\n\n------SAMPLE OUTPUT 0-----\n\n8\n\n------SAMPLE INPUT 1-----\n\n4 3\n1 1 1\n\nOutput\n8\n\n------SAMPLE OUTPUT 1-----\n\n6\n\n------SAMPLE INPUT 2-----\n\n1 1\n1\n\nOutput\n1\n\n------SAMPLE OUTPUT 2-----\n\n6\n\n------SAMPLE INPUT 3-----\n\n2 2\n1 1 1\n\nOutput\n97\n\n\"\"\"\nimport math\nimport sys\n\ndef"
    },
    {
        "number": 4077,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    l = 0\n    r = n\n    while r < n:\n        if a[l] <= a[r]:\n            l = l+1\n        elif a[l] > a[r]:\n            r = r+1\n        else:\n            l = l+1\n    if r == n:\n        return str(n)\n    else:\n        return str(n - (l+1)//2)\n"
    },
    {
        "number": 4077,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    if n % 2 == 0:\n        return str(len(set(a[n//2:n]))-1)\n    else:\n        return str(len(set(a[:n//2]))-1)\n\ndef"
    },
    {
        "number": 4078,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    \n    q = 0\n    answer = []\n    b = []\n    \n    # a = [int(i) for i in input().split()]\n    a = [int(i) for i in stdin.split()]\n    \n    for i in range(n):\n        if a[i] >= 0:\n            answer.append(a[i])\n    for i in range(m):\n        if a[i] >= 0:\n            b.append(a[i])\n    \n    # answer = []\n    # b = []\n    \n    # for i in range(n):\n    #     if a[i] >= 0:\n    #         answer.append(a[i])\n    # for i in range(m):\n    #     if a[i] >= 0:\n    #         b.append(a[i])\n    \n    # answer.append(min(b))\n    \n    # for i in range(m):\n    #     if a[i] >= 0:\n    #         answer.append(a[i])\n    \n    # answer.append(max(b))\n    \n    # for i in range(n):\n    #     if a[i] >= 0:\n    #         answer.append(a[i])\n    \n    # answer.append(len(b))\n    \n    # for i in range(m):\n    #     if a[i] >= 0:\n    #         answer.append(a[i])\n    \n    # answer.sort()\n    # answer.reverse()\n    \n    for i in range(n):\n        if answer[i] <= b[i]:\n            q = q + 1\n    print(q)\n    return q\n\nwhile True:\n    n, m = map(int, input().split())\n    if n == 0 and m == 0:\n        break\n    \n    a = [int(i) for i in input().split()]\n    b = [int(i) for i in input().split()]\n    \n    ans = solution(n, m)\n    print(ans)\n"
    },
    {
        "number": 4078,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [map(int, input().split()) for _ in range(n)]\n    b = []\n    for i in range(n):\n        l = len(a[i])\n        if l % m:\n            b.append(l)\n            b.append(l)\n            b.append(-1)\n            continue\n        for j in range(l // m):\n            b.append(j)\n        for j in range(m):\n            b.append(l % m + j)\n            b.append(l // m)\n    b.append(n)\n    b.sort()\n    print(b[-1])\n    print(b[-2])\n    print(b[-3])\n    print(b[-4])\n    return str(max(b))\n\n-----My Approach-----\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n\nn\ne\ne\ne\ne\ne\ne\ne\ne\ne\ne\ne\ne\ne\ne\ne\ne\ne\ne\ne\ne\ne\ne\ne\ne\ne\ne\ne\ne\ne\ne\ne\ne\ne\ne\ne\ne\ne\ne\ne\ne\ne\ne\n"
    },
    {
        "number": 4078,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n,m=map(int,stdin.split())\n    a=[list(map(int,stdin.split()))for i in range(n)]\n    a=[list(map(int,a[i][:m]))for i in range(n)]\n    b=[]\n    b.append(a[0][0]+a[1][0])\n    b.append(a[0][1]+a[1][1])\n    b.append(a[0][2]+a[1][2])\n    b.append(a[0][3]+a[1][3])\n    b.append(a[0][4]+a[1][4])\n    for i in range(1,n-1):\n        a[i][0]=min(a[i][0]+b[i-1],a[i][0]+b[i+1])\n        a[i][1]=min(a[i][1]+b[i-1],a[i][1]+b[i+1])\n        a[i][2]=min(a[i][2]+b[i-1],a[i][2]+b[i+1])\n        a[i][3]=min(a[i][3]+b[i-1],a[i][3]+b[i+1])\n        a[i][4]=min(a[i][4]+b[i-1],a[i][4]+b[i+1])\n        b.append(min(a[i][0]+b[i-1],a[i][0]+b[i+1]))\n        b.append(min(a[i][1]+b[i-1],a[i][1]+b[i+1]))\n        b.append(min(a[i][2]+b[i-1],a[i][2]+b[i+1]))\n        b.append(min(a[i][3]+b[i-1],a[i][3]+b[i+1]))\n        b.append(min(a[i][4]+b[i-1],a[i][4]+b[i+1]))\n    b.append(a[n-1][4])\n    b.sort()\n    return str(b[-1])"
    },
    {
        "number": 4078,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n\n    n_segments = max(a)\n    n_segments = n_segments + 1\n    n_segments = n_segments + 1\n\n    b = [a[i + 1] - a[i] for i in range(n - m + 1)]\n    b = b[:-1]\n\n    c = [i for i, x in enumerate(b) if x!= 0]\n    c = list(dict.fromkeys(c))\n\n    d = []\n    for i in range(n - m):\n        j = min(c)\n        d.append(j)\n        c.remove(j)\n\n    return str(max(d) - min(d))"
    },
    {
        "number": 4078,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"0\"\n"
    },
    {
        "number": 4078,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    q = min(m, n)\n    b = [[-1, -2, -2, -1, 0]]\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] < a[j]:\n                a[i], a[j] = a[j], a[i]\n                b.append([a[i], a[j]])\n            else:\n                break\n    \n    q = min(m, n)\n    for i in range(q):\n        c = [0] * (n + 1)\n        for j in range(i+1, n):\n            a[j] -= b[j][0]\n            a[j] %= 1000000007\n            if a[j] == 0:\n                c[j] = c[j+1] + c[j+2]\n        c[0] = b[0][0] + b[0][1]\n        c[n] = b[n][0] + b[n][1]\n        for j in range(1, n):\n            c[j] += c[j-1] + c[j+1]\n            c[j] %= 1000000007\n        for j in range(n-1):\n            if c[j] > c[j+1] + c[j+2]:\n                c[j], c[j+1] = c[j+1], c[j]\n    \n    answer = \"\"\n    for j in range(q):\n        answer = max(answer, c[j])\n    \n    return answer\n\nsolution(\"5 4\")\nsolution(\"1 0\")\nsolution(\"0 0\")"
    },
    {
        "number": 4078,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [list(map(int, map(int, input().split()))) for _ in range(n)]\n    b = [list(map(int, input().split())) for _ in range(m)]\n    b = [a[i][j] for i in range(n) for j in range(n) if a[i][j]!= -1]\n    c = [a[i][j] for i in range(n) for j in range(n) if a[i][j]!= -1]\n    q = 0\n    for i in range(n):\n        if len(a[i]) > m:\n            q += len(a[i]) - m\n    return str(q)\n"
    },
    {
        "number": 4078,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [int(i) for i in stdin.split()]\n    b = []\n    for i in range(n):\n        b.append(a[i])\n    q = 0\n    c = [0, 0, 0, 0, 0]\n    for i in range(m):\n        l, r = map(int, stdin.split())\n        c[l-1] += r-l+1\n        c[r-1] += l-r+1\n        c[l-r] += r-l+1\n        c[r-l] += r-l+1\n        if c[l-1] > c[r-1]:\n            q += 1\n    return str(q)\n\n-----Solution-----\n\ndef"
    },
    {
        "number": 4078,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    m = m + 2\n    possible = []\n    for j in range(1, m):\n        temp = []\n        for i in range(n):\n            if a[i] == -j:\n                temp.append(i)\n        if len(temp) == 0:\n            possible.append(0)\n        else:\n            possible.append(temp[0] - 1)\n            possible.append(temp[-1] + 1)\n    print(*possible)\n    return ''.join(map(str, possible))"
    },
    {
        "number": 4078,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, q = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    b = []\n    c = []\n    for i in range(n):\n        b.append(a[i] - q)\n    for i in range(n):\n        c.append(a[i] - q)\n    for i in range(m):\n        c.append(b[i] - c[i])\n    b.sort()\n    print(len(set(b)))\n    print(len(set(c)))\n    print(len(set(c) & set(b)))\n    return str(len(set(c)))\n\ndef"
    },
    {
        "number": 4079,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    answer = ''\n    i = 0\n    while i < len(stdin):\n        if stdin[i].isalpha():\n            if i + 1 < len(stdin) and stdin[i + 1].isalpha():\n                if stdin[i + 1] == stdin[i] + stdin[i + 1]:\n                    answer += \"Yes\"\n                    i += 1\n                else:\n                    answer += \"No\"\n                    i += 1\n            elif stdin[i].isalpha() or stdin[i].islower():\n                answer += \"Yes\"\n                i += 1\n            else:\n                answer += \"No\"\n                i += 1\n        else:\n            answer += stdin[i].upper()\n            i += 1\n    return answer\n\n\nTest\nInput\n1\nabc\nxyz\nabcef\naz\naa\nbad\nbabc\n\nOutput\nYes\nYes\nYes\nYes\nNo\nNo\nNo\ndef"
    },
    {
        "number": 4079,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    strings = []\n    for _ in range(int(stdin)):\n        strings.append(stdin[0:1]+str(len(set(stdin[1:]))))\n        strings.append(stdin[1:2]+str(len(set(stdin[2:]))))\n        strings.append(stdin[3:4]+str(len(set(stdin[4:]))))\n    \n    return \"Yes\" if len(set(strings[1])) == len(set(strings[2])) == len(set(strings[3])) == len(set(strings[4])) == len(set(strings[5])) == len(set(strings[6])) == len(set(strings[7])) == len(set(strings[8])) == len(set(strings[9])) == len(set(strings[10])) else \"No\"\n"
    },
    {
        "number": 4079,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def solution_helper(input):\n        if len(input) <= 0:\n            return \"\"\n        if len(input) % 2 == 0:\n            return solution_helper(input[0:len(input)//2]) + solution_helper(input[len(input)//2:])\n        else:\n            return solution_helper(input[0:len(input)//2]) + solution_helper(input[len(input)//2 + 1:])\n        \n    return solution_helper(stdin.strip())\n"
    },
    {
        "number": 4079,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    strs = stdin.split(\"\\n\")\n    for i in range(len(strs)):\n        strs[i] = strs[i].replace(\" \", \"\")\n        for j in range(len(strs[i])):\n            if j == 0:\n                strs[i] = strs[i][1:]\n            elif strs[i][j] == strs[i][j - 1] and j < len(strs[i]) - 1:\n                strs[i] = strs[i][j + 1:]\n            else:\n                strs[i] = strs[i][:j]\n    return \"\\n\".join(strs)\n\n\ndef"
    },
    {
        "number": 4079,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def is_diverse(s):\n        return len(set(s)) == len(s) and all(c in \"abcdefghijklmnopqrstuvwxyz\" for c in s)\n    \n    n = int(stdin.strip())\n    s = [stdin[i:i+n] for i in range(0, len(stdin), n)]\n    \n    for s_in in s:\n        print('Yes' if is_diverse(s_in) else 'No', end=' ')\n    \n    return ''\n\"\"\"\nclass Solution:\n    def isDiverse(self, st: str) -> str:\n        return \"Yes\" if len(set(st)) == len(st) else \"No\"\n"
    },
    {
        "number": 4079,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n    # Derive a dictionary\n    dic = dict()\n    \n    # Start by taking the first line\n    input_str = stdin.readline().rstrip()\n    \n    # Iterate through the string\n    while input_str!= '':\n        \n        # Check if current letter is not a space or a blank\n        if input_str.find(' ') >= 0 or input_str.find(' ') == -1:\n            \n            # Use dictionary to check if letter is a key\n            # if not, append it to the list\n            # if its a key, check if the length is greater than one\n            if input_str in dic:\n                if len(dic[input_str]) > 1:\n                    print(\"Yes\")\n                else:\n                    print(\"No\")\n                    return\n            else:\n                dic[input_str] = 1\n                \n            # Reset the string\n            input_str = stdin.readline().rstrip()\n        \n        # Append to the string\n        else:\n            input_str = input_str +'' + stdin.readline().rstrip()\n        \n    print(\"No\")\n    \n    \n"
    },
    {
        "number": 4079,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    strings = []\n    for i in range(0, len(stdin)):\n        strings.append(list(stdin[i].lower()))\n    \n    count = [0] * len(strings)\n    for i in range(0, len(strings)):\n        for j in range(0, len(strings[i])):\n            if strings[i][j].islower():\n                count[i] += 1\n    \n    for i in range(0, len(strings)):\n        for j in range(i+1, len(strings)):\n            if count[i] == count[j]:\n                continue\n            else:\n                return \"No\"\n    \n    return \"Yes\"\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4079,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    strings = []\n    for i in range(n):\n        strings.append(stdin.strip())\n    \n    def judge(s):\n        # if len(s)!= len(sorted(s)):\n        #     return False\n        # for i in range(len(s)-1):\n        #     if s[i]!= s[i+1]:\n        #         return False\n        # return True\n        s1 = []\n        for i in range(len(s)):\n            if s[i] not in s1:\n                s1.append(s[i])\n            else:\n                return False\n        \n        for i in range(len(s)):\n            if s[i] in s1 and i+1 < len(s):\n                s1.remove(s[i])\n                s1.append(s[i])\n                if s1 not in s:\n                    return False\n        \n        return True\n    \n    for i in range(n):\n        if not judge(strings[i]):\n            print(\"No\")\n            return\n        else:\n            print(\"Yes\")"
    },
    {
        "number": 4079,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for _ in range(n):\n        s = stdin.strip()\n        flag = True\n        for i in s:\n            if not (i.isalpha() or i.isdigit()):\n                flag = False\n                break\n        if flag:\n            print(\"Yes\")\n        else:\n            print(\"No\")\n    return \"\"\n\n-----Modified-----\n\n1. We have to add the count of chars to each string\n2. Time complexity O(n)\n3. Space complexity O(n)\n\n'''\n\nclass Solution:\n    def check(self, s: str) -> str:\n        temp = []\n        for i in range(len(s)):\n            if s[i].isdigit():\n                temp.append(s[i])\n        for i in temp:\n            for j in range(i, len(s), i):\n                if s[j].isdigit():\n                    break\n            else:\n                return s[i:] + \"Yes\"\n        return \"\"\n    \n    def check2(self, s: str) -> str:\n        temp = []\n        for i in s:\n            if not (i.isalpha() or i.isdigit()):\n                return \"\"\n            temp.append(i)\n        for i in temp:\n            if not (i.isalpha() or i.isdigit()):\n                return \"\"\n        return s\n"
    },
    {
        "number": 4079,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return 'Yes' if (n % 2 == 1) or (n // 2 == 1) or n % 2 == 0 else 'No'"
    },
    {
        "number": 4080,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(int(stdin.split(' ')[0])):\n        n, m = map(int, stdin.split(' '))\n        a = list(map(int, stdin.split(' ')))\n        l = sorted(a[:n])\n        r = sorted(a[n:], reverse=True)\n        print(l)\n        print(r)\n        j = 1\n        for j in range(m):\n            if j == 0:\n                if a[r[0] - 1] > a[r[1] - 1]:\n                    print(a[r[0] - 1] - a[r[1]])\n                    return str(a[r[0] - 1] - a[r[1]])\n                else:\n                    print(a[r[1] - 1] - a[r[0]])\n                    return str(a[r[1] - 1] - a[r[0]])\n            elif j == m - 1:\n                if a[l[0] - 1] > a[l[1] - 1]:\n                    print(a[l[0] - 1] - a[l[1]])\n                    return str(a[l[0] - 1] - a[l[1]])\n                else:\n                    print(a[l[1] - 1] - a[l[0]])\n                    return str(a[l[1] - 1] - a[l[0]])\n            else:\n                if a[l[j] - 1] > a[l[j + 1] - 1]:\n                    print(a[l[j] - 1] - a[l[j + 1] - 1])\n                    return str(a[l[j] - 1] - a[l[j + 1] - 1])\n                else:\n                    print(a[l[j] - 1] - a[l[j + 1]])\n                    return str(a[l[j] - 1] - a[l[j + 1]])\n    return str(0)\n"
    },
    {
        "number": 4080,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = [int(n) for n in stdin.strip().split()]\n    if a[0] == 0:\n        return '0'\n    if a[1] == 0:\n        return '0'\n    if a[2] == 0:\n        return '0'\n    if a[3] == 0:\n        return '0'\n    if a[4] == 0:\n        return '0'\n    \n    l = n\n    r = a[0] - 1\n    while r >= 0:\n        if r < len(a):\n            if a[r] <= r:\n                r -= 1\n            else:\n                break\n    if r < len(a):\n        b = a[r + 1:]\n        a.insert(r + 1, b)\n        a.append(b)\n    if r >= len(a):\n        for i in range(r - len(a)):\n            a.append([0, 0, 0, 0, 0])\n        a.append([len(a) - 1, len(a) - 1, len(a) - 1, len(a) - 1, 0])\n        a.insert(len(a) - 1, [len(a) - 1, len(a) - 1, len(a) - 1, len(a) - 1, 0])\n        a.append([len(a) - 1, len(a) - 1, 0, len(a) - 1, 0])\n        a.append([0, 0, 0, 0, 0])\n    b = a[r + 1:]\n    a.insert(r + 1, b)\n    a.append(b)\n    for i in range(r - len(a)):\n        a.append([0, 0, 0, 0, 0])\n    a.insert(len(a) - 1, [len(a) - 1, len(a) - 1, len(a) - 1, len(a) - 1, 0])\n    a.append([len(a) - 1, len(a) - 1, 0, len(a) - 1, 0])\n    a.append([0, 0, 0, 0, 0])\n    q = r - len(a)\n    c_1 = q\n    c_2 = q - 1\n    c_3 = len(a) - 1\n    if q % 2 == 0:\n        c_1 = q\n    if q % 2 == 1:\n        c_2 = q - 1\n    if c_1 % 2 == 1:\n        c_3 = c_1 - 1\n    if c_2 % 2 == 1:\n        c_3 = c_2 - 1\n    c = max(c_1, c_2, c_3)\n    c = min(c, n)\n    while c >= 0:\n        a.pop(c + 1)\n        if c >= len(a):\n            break\n        if a[c + 1] > n:\n            a.pop(c + 1)\n            break\n        elif a[c + 1] < n:\n            a.pop(c + 1)\n            break\n        elif a[c + 1] == n:\n            a.pop(c + 1)\n            break\n        elif a[c + 1] > n:\n            break\n        else:\n            a.pop(c + 1)\n            break\n    a.pop(len(a) - 1)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    a.pop(0)\n    "
    },
    {
        "number": 4080,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int,stdin.split()))\n    m = int(stdin)\n    # print(a)\n    c = list(set(a))\n    # print(c)\n    q = int(stdin)\n    print(q)\n    if q == 1:\n        a.sort()\n        a.remove(a[0])\n        a.remove(a[0])\n        for i in a:\n            print(i)\n        return ''\n    if q == 2:\n        # print(a)\n        q = 0\n        return ''\n    print(c)\n    # print(a)\n    def a2b(a):\n        c = []\n        for i in range(0,m):\n            for j in range(i,m):\n                if j >= i:\n                    if a[j] <= a[i]:\n                        c.append(a[j])\n                        break\n        return c\n    a = a2b(a)\n    b = a2b(c)\n    # print(b)\n    a.sort()\n    b.sort()\n    c = list(set(b) - set(a))\n    # print(c)\n    answer = ''\n    for i in c:\n        answer += str(i) + \" \"\n    # print(answer)\n    return answer\n\nprint(solution(input()))"
    },
    {
        "number": 4080,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.strip()\n"
    },
    {
        "number": 4080,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    q = 1\n    for i in range(m):\n        while q <= n:\n            b = a[i]\n            j = 1\n            while j <= q:\n                b = a[b]\n                j += 1\n            a[i] = b\n            q += 1\n    return str(len(set(a)))\n\n---Solution---\n\ndef"
    },
    {
        "number": 4080,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = [[] for _ in range(n)]\n    for i in range(n):\n        b[i] = list(map(int, stdin.split()))\n    q = 0\n    c = set()\n    for i in range(m):\n        c.add(a[b[i][0]-1] - a[b[i][1]-1])\n        c.add(a[b[i][1]-1] - a[b[i][0]-1])\n    q += min(c)\n    q -= min(c)\n    c = sorted(list(c))\n    for i in range(len(c)):\n        if c[i] == 0:\n            continue\n        q -= c[i]\n    q = min(q, m)\n    return str(q)\n"
    },
    {
        "number": 4080,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = []\n    b = []\n    for i in range(n):\n        a.append(map(int, stdin.split()))\n    q = int(m*(m+1) / 2)\n    for i in range(q):\n        c, k = map(int, stdin.split())\n        if c > m:\n            c, k = c - m, k\n        b.append(k)\n        for j in range(k):\n            b.append(a[i][j])\n    for i in range(q):\n        for j in range(q):\n            b[i] = max(b[i], b[j])\n    c = 0\n    for i in range(q):\n        for j in range(q):\n            c += abs(b[i] - b[j])\n    if c > m:\n        c = c - m\n    return str(c)\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4080,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = [int(x) for x in stdin.splitlines()[1:]]\n    d = [x for x in a if x >= 0 and x < 10 ** 6]\n    q = len(a)\n    c = [d.index(x) + 1 for x in d if x >= 0]\n    q = max(q, len(c))\n    b = [[-1 for x in range(q)] for y in range(q)]\n    for i in range(q):\n        for j in range(i+1, q):\n            b[i][j] = max(a[j]-a[i], 0)\n    for i in range(q):\n        for j in range(i+1, q):\n            b[i][j] = max(b[i][j], a[j]-a[i])\n    return '{:d}'.format(len(a))\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 4080,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = []\n    b = []\n    for _ in range(n):\n        a.append(int(stdin.split()[0]))\n    for _ in range(m):\n        b.append(list(map(int, stdin.split()[1:])))\n    b = sorted(b, key=lambda x: (-x[0], x[1]))\n    ans = 0\n    for i in b:\n        for j in i:\n            if j == 0:\n                continue\n            if ans < j:\n                ans = j\n    return str(ans)\n\ndef"
    },
    {
        "number": 4080,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    b = list(map(int, stdin.split()))\n    m = int(stdin)\n    q = []\n    max = 0\n    min = -1\n    for i in range(n):\n        if b[i] > 0:\n            q.append(b[i])\n            max = max + 1\n        if b[i] < 0:\n            if max > 0:\n                max = max - 1\n            min = i\n    for i in range(min, min+m):\n        if max == 0 and b[i] < 0:\n            max = i\n            break\n        if b[i] < 0:\n            max = i\n            break\n    if max == -1:\n        return \"0\"\n    return str(max+1)\n\nprint(solution(\"5 4\"))\n"
    },
    {
        "number": 4081,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip().split()\n    n = int(stdin[0])\n    nums = list(map(int, stdin[1:]))\n\n    leftmost = 0\n    rightmost = n\n\n    for i in range(n):\n        leftmost = max(leftmost, i + nums[i])\n\n    for i in range(n, 0, -1):\n        rightmost = max(rightmost, i - nums[i])\n\n    return str(rightmost - leftmost + 1)\n\n-----Expected Output-----\n\nInput\n5\n2 1 5 4 3\n\nOutput\n4\nLRLRLLL\n\nInput\n7\n1 3 5 6 7 4 2\n\nOutput\n7\nLLRL\n\nInput\n3\n1 2 3\n\nOutput\n3\nLLRL\n\nInput\n4\n1 2 4 3\n\nOutput\n4\nLLL\n\"\"\"\n\nimport math"
    },
    {
        "number": 4081,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n\n    move_left = [(i, a[i]) for i in range(len(a)-1)]\n    move_right = [(-i, a[i]) for i in range(len(a))]\n\n    result = [None]*n\n\n    l = len(move_left)\n\n    for i in range(l-1, 0, -1):\n        if move_left[i][1] == move_right[i][1]:\n            result[move_left[i][0]] = move_left[i][1]\n            continue\n        elif move_left[i][0] == move_right[i][0]:\n            result[move_left[i][0]] = move_right[i][1]\n            continue\n        else:\n            result[move_left[i][0]] = move_left[i][1]\n            result[move_left[i][1]] = move_right[i][1]\n\n    return ''.join(map(str, result))\n\"\"\"\n\ndef"
    },
    {
        "number": 4081,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    longest_seq = [0]*(n+1)\n    longest_seq[0] = 1\n    for i in range(1, n+1):\n        for j in range(i, n+1):\n            if a[i] < a[j]:\n                longest_seq[i] = max(longest_seq[i], longest_seq[j] + 1)\n    print(longest_seq[-1])\n    return \"\".join(map(str, longest_seq))"
    },
    {
        "number": 4081,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input_n, input_n_1, input_n_2 = [int(i) for i in stdin.split()]\n    input_n_1 = input_n_1 - 1\n    input_n_2 = input_n_2 - 1\n    a = [int(i) for i in stdin.split()]\n\n    def next_move(c):\n        if c == 0:\n            return 'L'\n        elif c == 1:\n            return 'R'\n        else:\n            return 'D'\n\n    def pairwise(x):\n        pair_count = 0\n        while x:\n            if x[0] < x[1]:\n                pair_count += 1\n                x = x[0]\n            else:\n                x = x[1]\n        return pair_count\n\n    def dfs(x, a):\n        if x == len(a):\n            return a[a.index(x):]\n        else:\n            if a[x] == 1 and pairwise(x, 0) == 0:\n                a[a.index(x)] = 0\n                return dfs(x+1, a)\n            elif a[x] == 2 and pairwise(x, 1) == 0:\n                a[a.index(x)] = 0\n                return dfs(x+1, a)\n            elif a[x] == 3 and pairwise(x, 2) == 0:\n                a[a.index(x)] = 0\n                return dfs(x+1, a)\n            else:\n                a[a.index(x)] = next_move(a[a.index(x)])\n                return a[a.index(x)]\n\n    answer = dfs(0, a)\n    print(answer)\n    return answer\n\n=======\n\ndef"
    },
    {
        "number": 4081,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, a = list(map(int, stdin.split()))\n    a.sort()\n    k = 2\n    m = 0\n    while True:\n        m += 1\n        if a[m] - a[m - 1] == 1:\n            k += 1\n            m += 1\n        else:\n            break\n    return str(k)\n\n\n----My Approach----\n\ndef"
    },
    {
        "number": 4081,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    if n >= 2 * (x + 1) // 2:\n        return 'L' * (n // 2) + 'L' + ('R' * (n % 2)) + 'L'\n    else:\n        return 'L' * (n // 2) + 'L' + ('R' * (n % 2)) + 'R'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4081,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(a) for a in stdin.split()]\n    a.sort()\n    res = ''\n    # a.sort(key=lambda x: x * 2, reverse=True)\n    # a = a[:n]\n    # a = a[n:]\n    # a.sort(key=lambda x: x % 2, reverse=True)\n    # a = a[:n]\n    # a = a[n:]\n    # a = a.sort(key=lambda x: x % 2, reverse=True)\n    # a = a[:n]\n    # a = a[n:]\n    a = [a for a in a if a % 2]\n    a = [a for a in a if a % 2]\n    n = len(a)\n    if len(a) == 0:\n        return '0'\n    for i in range(n):\n        if a[i] == a[i+1]:\n            a[i], a[i+1] = a[i+1], a[i]\n    a = a[n:]\n    for i in range(n):\n        a[i] = a[i] + 'L' * (n-i-1)\n    a = ''.join(a)\n    for i in range(n):\n        a = a[:n-i] + a[i+1:]\n    return a\n\nprint(solution(input()))\n"
    },
    {
        "number": 4081,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, a = list(map(int, stdin.split(' ')))\n    num_of_elements = [n+1] + list(map(int, stdin.split(' ')))\n    answer = 0\n    for i in range(1, n):\n        j = a[i]\n        if i < j:\n            continue\n        else:\n            answer += 1\n            j = num_of_elements[j]\n            if j < i+1:\n                continue\n            else:\n                answer += 1\n                j = num_of_elements[j]\n                if j < i+1:\n                    continue\n                else:\n                    answer += 1\n                    j = num_of_elements[j]\n    return answer\n"
    },
    {
        "number": 4081,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    a = [int(i) for i in stdin.split()]\n    s = ''\n    k = 1\n    for i in range(N):\n        s = s + str(a[i])\n        if i < N - 1:\n            a[i + 1] = a[i]\n        else:\n            a[-1] = a[-1]\n        if len(s) == k:\n            k = 0\n        else:\n            k = k + 1\n    return s[::-1]\n\n\nThe following is a shorter version of the above.\n\ndef"
    },
    {
        "number": 4081,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n < 2:\n        return ''\n    a = list(map(int, input().split()))\n    a.sort()\n    if a == [0] * n:\n        return ''\n    print(a[n-1] - a[0])\n    return ''.join(map(str, a[n-1:]))\n\"\"\"\n\ndef"
    },
    {
        "number": 4082,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    l, r, maxl, maxr = 0, 0, 0, 0\n    while r < n:\n        if a[r] < a[l]:\n            l, r = r + 1, r + 1\n        else:\n            maxr = r\n            maxl = l\n        r = r - 1\n    return str(max(maxl, maxr) - 1)\n\n\nsolution(\"1 2 5 3 4\")\n"
    },
    {
        "number": 4082,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = [int(stdin.strip()) for _ in range(n)]\n\n    solution = 0\n    \n    for i in range(n-1):\n        for j in range(i+1,n):\n            if a[i] < a[j]:\n                break\n        if j - i > 1:\n            if a[i] > a[j] and a[i] > a[j-1]:\n                solution += 1\n                a[i] = a[j]\n                a[j] = a[i]\n            if a[j] > a[i]:\n                a[i] = a[j]\n                a[j] = a[i]\n    \n    return str(solution)"
    },
    {
        "number": 4082,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(max(map(int, list(map(int, stdin.split()))))))"
    },
    {
        "number": 4082,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, n, k = map(int, stdin.split())\n    if n < k:\n        return ''\n    for i in range(n-k):\n        if a[i] < a[i+k]:\n            a[i:i+k] = a[i+k]\n        else:\n            a[i:i+k] = a[i]\n    return ''.join(map(str, a))"
    },
    {
        "number": 4082,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    arr = [0]*n\n    for i in range(n):\n        l, r = map(int, stdin.strip().split())\n        arr[i] = l\n        if i > 0:\n            arr[i] = r\n    return str(max(arr))[-1]\n"
    },
    {
        "number": 4082,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    a.sort()\n    l, r = 0, len(a) - 1\n    while l < r:\n        if a[l] <= a[l + 1]:\n            l += 1\n        else:\n            r -= 1\n    if l == r:\n        print(l + 1)\n    else:\n        return str(l + 1)\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4082,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n <= 2:\n        return str(n)\n    \n    subarray = [0] * (n+1)\n    for i in range(1, n+1):\n        if i < 2:\n            subarray[i] = i\n        else:\n            for j in range(2, i):\n                if subarray[j] - subarray[i - j] > 1:\n                    subarray[i] = subarray[j]\n            subarray[i] += 1\n    \n    return str(subarray[-1])\n\nTests\n>>> solution(\"7\")\n\"4\"\nTests\n>>> solution(\"6\")\n\"3\"\nTests\n>>> solution(\"5\")\n\"2\"\nTests\n>>> solution(\"1\")\n\"1\"\nTests\n>>> solution(\"3\")\n\"2\"\n\"\"\""
    },
    {
        "number": 4082,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin.split()[-1])\n    a = list(map(int, stdin.split()[:-1]))\n    result = 0\n    l = 0\n    r = 0\n    for i in range(n):\n        if a[i] >= a[i + 1]:\n            a[i + 1] = a[i]\n        else:\n            a[i + 1] = a[i]\n        if i!= 0:\n            if a[i] >= a[i-1] and a[i] >= a[i+1]:\n                l += 1\n        else:\n            l = 1\n        if i!= n - 1:\n            if a[i] >= a[i+1] and a[i] >= a[i-1]:\n                r += 1\n        else:\n            r = 1\n        result = max(l, r)\n    return str(result)"
    },
    {
        "number": 4082,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[-1])\n    a = [int(x) for x in stdin.split()[:-1]]\n    sub_len = 2\n    index = 1\n    while index < n:\n        while sub_len * index < n:\n            sub_len *= 2\n        if sub_len > 2:\n            a.pop(index)\n            sub_len = 2\n        else:\n            index += 1\n    sub_len = 2\n    max_len = 2\n    for a_i in a:\n        if sub_len > 2:\n            sub_len -= 2\n            max_len = 2\n        elif sub_len > 1:\n            sub_len -= 1\n            max_len = 1\n        if a_i < sub_len:\n            a.pop(a_i)\n        else:\n            index += 1\n        max_len = max(max_len, a_i + 1)\n    return str(max_len)\n"
    },
    {
        "number": 4082,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    a = list(map(int, stdin.split()))\n    l, r = 0, 0\n    while r < N:\n        if a[r] < a[l]:\n            l += 1\n            r += 1\n        else:\n            r += 1\n    return str(l)\n\n\n-----Brute-force--Time-Complexity---O(N)-----\ndef"
    },
    {
        "number": 4083,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, k = map(int, stdin.split())\n    a = [int(i) for i in stdin.split()]\n    \n    if k!= sum(a):\n        return '0'\n    \n    else:\n        return sum(a) // k\n    \n    \n"
    },
    {
        "number": 4083,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = [int(stdin.split()[i]) for i in range(n)]\n    a.sort()\n    # max_val = a[-1]\n    # count = 0\n    # for i in range(len(a)):\n    #     if a[i] - max_val >= k:\n    #         count += 1\n    #     else:\n    #         break\n    # return count\n    answer = float(\"inf\")\n    for i in range(1, n):\n        answer = min(answer, i*(2**(n-i))-1)\n    return answer\n"
    },
    {
        "number": 4083,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    k = int(stdin.strip())\n\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n\n    answer = 0\n    for i in range(n):\n        answer += (a[i] // (2 ** (i + 1))) * (2 ** i)\n\n    return str(answer)\n"
    },
    {
        "number": 4083,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    if len(a) < k:\n        return '0'\n    left = 0\n    right = 1\n    while right < n:\n        temp = a[right] // right\n        a[right] = a[left]\n        a[left] = temp\n        left += 1\n        right += 1\n    return ''.join([str(x) for x in a[left:]])\n\n\nInput\n5 3\n1 2 3 3 3\n\nOutput\n1\n\nInput\n5 3\n1 2 3 3 3\n\nOutput\n2\n\nInput\n5 3\n1 2 3 3 3\n\nOutput\n0\ndef"
    },
    {
        "number": 4083,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    ans = 0\n    for i in range(n):\n        curr = a[i]\n        curr_new = curr\n        while curr_new < curr + 2:\n            curr_new = curr_new + 2\n        curr_new = curr_new - curr\n        if curr_new < k:\n            ans = ans + 1\n    return str(ans)\n"
    },
    {
        "number": 4083,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    # print(a)\n    if n > k:\n        n = k\n    # print(n, k)\n    if n == k:\n        return \"0\"\n    elif n == k + 1:\n        return str(k)\n    else:\n        return str(n) + \" \" + solution(str(n))\n"
    },
    {
        "number": 4083,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    numbers = [int(n) for n in stdin.split()]\n    count = 0\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] % 2!= numbers[j] % 2:\n                count += 1\n    return str(count)\n\n'''\n\ndef"
    },
    {
        "number": 4083,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    m = len(a)\n    a.sort(reverse=True)\n    if m % 2 == 0:\n        a1 = a[:m // 2]\n        a2 = a[m // 2:]\n        minn = sum(a1) // 2\n        for i in range(m // 2):\n            if sum(a1[i * 2:]) % 2!= 0:\n                minn += a2[i * 2]\n        minn += sum(a2) // 2\n        return minn\n    else:\n        a1 = a[:m // 2]\n        a2 = a[m // 2:]\n        minn = sum(a1) // 2\n        for i in range(m // 2):\n            if sum(a1[i * 2:]) % 2!= 0:\n                minn += a2[i * 2]\n        minn += sum(a2) // 2\n        return minn\n\"\"\""
    },
    {
        "number": 4083,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def sqrt(a):\n        while a % 2 == 0:\n            a //= 2\n        return a\n    n = int(stdin)\n    k = int(sqrt(n))\n    a = list(map(int, list(stdin)))\n    def count(a, k):\n        counter = 0\n        while k > 0:\n            counter += a.count(k)\n            k -= sqrt(k)\n        return counter\n    return min(count(a, k) for k in range(1, k))"
    },
    {
        "number": 4083,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    a_min = 0\n    for i in range(n):\n        a_min += a[i]\n        if a_min < k:\n            a_min = k\n    a_min = int(a_min/2)\n    return str(a_min)\n"
    },
    {
        "number": 4084,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nInput is taken from standard input.\n\n-----Goals-----\n - Time Limit: 10^-9\n - Space Limit: 1\n\nInput:\n5 4\n1 3\n4 2\n2 1\n3 7\nOutput:\n3\n\nInput:\n3 3\n2 3\n2 2\n3 1\nOutput:\n2\n\nInput:\n3 3\n2 3\n2 2\n3 1\nOutput:\n1\n\nInput:\n2 2\n3 4\n2 2\n3 2\nOutput:\n1\n\nInput:\n1 1\n2 1\n2 3\nOutput:\n1\n\nInput:\n3 3\n2 2\n2 1\n2 3\nOutput:\n1\n\nInput:\n4 4\n3 3\n3 2\n3 1\n2 3\nOutput:\n1\n\"\"\"\n\nimport sys\ninput = sys.stdin.readline\n\nn, m = map(int, input().split())\nballs = [int(i) for i in input().split()]\nk = int(input())\n\nb, r = [], []\nfor i in range(n):\n    if balls[i]!= 0:\n        b.append(balls[i])\n        r.append(i)\n\nballs[:] = b\nb.sort()\n\nfor i in range(k):\n    c, d = map(int, input().split())\n    c -= 1\n    d -= 1\n    for i in range(c, len(b)):\n        if balls[i]!= 0:\n            r.append(i)\n            balls[i] = 0\n\nprint(len(r))"
    },
    {
        "number": 4084,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n,a,b = map(int,stdin.split())\n    if n%2 == 1:\n        return 0\n    \n    l = n//2\n    r = n//2\n    if n>100:\n        return 0\n    \n    answer = 0\n    if a > b:\n        answer += r\n        answer += l\n    else:\n        answer += l\n        answer += r\n    \n    for i in range(1,l+1):\n        answer += r - b*l\n        answer += b*i\n        if i>=l:\n            answer += b*l\n        if i>=r:\n            answer += b*r\n    \n    return answer\n"
    },
    {
        "number": 4084,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N,A,B,r = map(int,input().split())\n    balls = [int(x) for x in input().split()]\n    \n    answer = 0\n    \n    for b in balls:\n        if b-1<0:\n            b=r\n        answer += int(b-1)\n    \n    print(answer)\n    return \"Yes\"\n    \n\"\"\"\nN = int(input())\na, b, r = map(int,input().split())\nballs = list(map(int,input().split()))\nprint(solution(N,a,b,r,balls))\n\n\"\"\""
    },
    {
        "number": 4084,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, *A, B = map(int, stdin.split())\n    a = list(map(int, A))\n    b = list(map(int, B))\n    bbbrrr = 0\n    for ai, bi in zip(a, b):\n        if bi:\n            bbbrrr += 1\n    return str(bbbrrr)\n\nprint(solution(input()))"
    },
    {
        "number": 4084,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    \n    def placeB():\n        if len(balls) > N:\n            balls.pop(0)\n            balls.append(B)\n            \n    def placeA():\n        if len(balls) < N:\n            balls.insert(0, A)\n            balls.append(A)\n            \n    def placeBb():\n        if len(balls) == 0:\n            placeB()\n            balls.append(B)\n        else:\n            balls.insert(0, B)\n            balls.append(B)\n        \n    def placeBbr():\n        if len(balls) == 0:\n            placeB()\n            balls.append(B)\n            balls.append(B)\n        else:\n            balls.insert(0, B)\n            balls.append(B)\n            balls.append(B)\n            \n    def isB(b, r):\n        if balls.count(b) > r:\n            return balls.count(b) - r\n        else:\n            return r\n    \n    def isR(b, r):\n        return N - balls.count(r)\n    \n    def isBb(b, r):\n        return isB(b, r) - isB(b, N - b)\n    \n    def isBbrr():\n        return isBb(B, B) - isBb(B, N - B)\n    \n    def isBbrrr():\n        return isBbrr() - isBbrr()\n    \n    def solution(balls: str) -> str:\n        N = len(balls)\n        for i in range(N):\n            placeA()\n            placeB()\n            placeBb()\n            placeBbr()\n            if balls[i] == B:\n                placeB()\n                placeBb()\n                placeBbr()\n            else:\n                placeB()\n                placeBb()\n                placeBbr()\n                placeB()\n        \n        if N == N - N:\n            return str(isB(B, N))\n        elif N > N - N:\n            return str(isB(B, N) - isB(B, N - N))\n        else:\n            return str(isBb(B, N) - isBb(B, N - B))\n"
    },
    {
        "number": 4084,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n  \n    N, A, B, r = map(int, stdin.split())\n    \n    # if r == 0:\n    #     print(B)\n    #     return 0\n    \n    # A = (B // N) * N\n    # B = B % N\n    # if A + B <= r:\n    #     print(B)\n    #     return 0\n    \n    # if A + B > r:\n    #     print(B)\n    #     return 0\n    \n    # for n in range(1, A + B + 1):\n    #     B = B % n\n    #     if B == 0:\n    #         print(n)\n    #         return 0\n    \n    # print(n)\n    \n    if A < B:\n        print(A)\n        return 0\n    \n    if A < B < N:\n        print(A + B)\n        return 0\n    \n    if A < B < N + 1:\n        print(B + N)\n        return 0\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 4084,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    A = [0] * (N+1)\n    B = [0] * (N+1)\n    #print(\"A,B :\",A,B)\n    for i in range(1,N+1):\n        A[i] = int(stdin[i])\n        B[i] = int(stdin[N+i])\n    #print(\"A,B :\",A,B)\n    \n    #print(\"A[1] :\",A[1])\n    #print(\"B[1] :\",B[1])\n    #print(\"A[2] :\",A[2])\n    #print(\"B[2] :\",B[2])\n    \n    #print(\"A[3] :\",A[3])\n    #print(\"B[3] :\",B[3])\n    \n    \n    #print(\"A[4] :\",A[4])\n    #print(\"B[4] :\",B[4])\n    \n    for i in range(1,N+1):\n        A[i] += A[i-1]\n        B[i] += B[i-1]\n        if A[i] > B[i]:\n            continue\n        elif A[i] == B[i]:\n            #print(\"Match\")\n            return 'YES'\n        else:\n            return 'NO'\n    return 'NO'"
    },
    {
        "number": 4084,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n  N,A,B = map(int,stdin.split())\n  cnt = 0\n  b, r = 0, 0\n  for _ in range(N):\n    bbbrr, rr = map(int,stdin.split())\n    cnt += rr - rbbr\n    r += rbbr - bbbrr\n    b += bbbrr - rr\n  print(cnt)\n  return str(cnt)\n"
    },
    {
        "number": 4084,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n  n = int(stdin[0])\n  a = [int(i) for i in stdin[1:n+1]]\n  \n  def create_row(a):\n    rows = [0] * (n+1)\n    for i in range(len(a)):\n      rows[i] = a[i]\n    return rows\n  \n  def place_ball(row, balls):\n    for i in range(len(row)):\n      if row[i] < 0:\n        return 0\n      row[i] = max(0, row[i])\n    for i in range(len(row)):\n      row[i] = row[i] + balls[i]\n    for i in range(len(row)):\n      if row[i] >= 100:\n        return 0\n    return 1\n  \n  def get_row_index(row, balls):\n    index = 0\n    while balls[index] < 100:\n      index += 1\n    if index == len(balls):\n      index = -1\n    return index\n  \n  def dfs(row, index, balls):\n    if index == len(balls):\n      return place_ball(row, balls)\n    \n    row[index] += balls[index]\n    index += 1\n    return dfs(row, index, balls)\n  \n  row = create_row(a)\n  dfs(row, 0, a)\n  return row[-1]\n\nprint(solution(input()))\n\ndef"
    },
    {
        "number": 4084,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n  n, a, b, c = map(int, stdin.split())\n  k = 100000\n  res = 0\n  A, B = 0, 0\n  if n >= a:\n    for i in range(n):\n      A += a\n      if i < (a - 1):\n        B += b\n    A //= a\n    B //= b\n    A, B = A // (a ** 2), A - A // (a ** 2)\n    B //= b\n    if B > k:\n      A -= B\n      A //= B\n    res += A\n  if n >= b:\n    for i in range(n):\n      B += b\n      if i < (b - 1):\n        A += a\n        B += b\n    A //= b\n    B //= a\n    B //= b\n    A -= B\n    res += A\n  return str(res)"
    },
    {
        "number": 4085,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    s = [int(i) for i in stdin[1].split()]\n    for i in range(n):\n        if s[i] == s[i+1]:\n            s[i] = 0\n    for i in range(n):\n        if s[i] == 0:\n            for j in range(i+2, n):\n                if s[j] == 0:\n                    s[j] = s[j-1] + 1\n    for i in range(n):\n        if s[i] == 0:\n            return str(s[i])\n    return -1\n\n-----Constraints-----\n1 <= t <= 10^5\n2 <= n <= 10^6\n\n0 <= d_1, d_2, \\dots, d_n < 10^6\n\n0 <= d_i < 10^6\n\nExplanation\n\nInput:\n2\n8\n8 2 12 6 4 24 16 3\n1\n2\n\nOutput:\n48\n4\nExplanation:\n\n8\n8 2 12 6 4 24 16 3\n1\n2\n6\n2\n2\n3\n\nExplanation:\n\n8\n8 2 12 6 4 24 16 3\n1\n0\n\nt = 4\nn = 8\ns = [0, 1, 0, 0, 1, 0, 0, 0]\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4085,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Input is a string\n    stdin = stdin.split(\" \")\n    t = int(stdin[0])\n    n = int(stdin[1])\n    divisors = list(map(int, stdin[2].split(\" \")))\n    if t > n:\n        print(-1)\n        return\n    if n <= 0 or n >= len(divisors):\n        print(-1)\n        return\n    def find_dividend(divisors):\n        for i in range(len(divisors)):\n            if divisors[i] == 1:\n                return i\n        return -1\n    def is_subset(divisors):\n        for i in range(len(divisors)):\n            if divisors[i] < 2 or divisors[i] > 10:\n                return False\n        return True\n    def find_possible_divisors(divisors, d):\n        for i in range(len(divisors)):\n            if divisors[i] == d:\n                return i\n        return -1\n    def is_contradiction(divisors):\n        for i in range(len(divisors)):\n            if divisors[i] > 1:\n                return True\n        return False\n    def find_min(divisors):\n        for i in range(len(divisors)):\n            if divisors[i] == 1:\n                return divisors[i]\n        return -1\n    def get_possible_divisors(divisors):\n        for i in range(len(divisors)):\n            if divisors[i] >= 2:\n                return divisors[i]\n        return -1\n    for i in range(n):\n        d = find_dividend(divisors)\n        if is_subset(divisors):\n            possible_divisors = get_possible_divisors(divisors)\n            if possible_divisors!= -1:\n                divisors[d] = possible_divisors\n                divisors[find_min(divisors)] = find_possible_divisors(divisors, possible_divisors)\n        elif is_contradiction(divisors):\n            divisors[d] = -1\n            divisors[find_min(divisors)] = -1\n        else:\n            divisors[d] = find_min(divisors)\n            divisors[find_min(divisors)] = find_possible_divisors(divisors, find_min(divisors))\n    return str(sum(divisors))\n"
    },
    {
        "number": 4085,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    answer = list()\n    for _ in range(int(stdin)):\n        t = int(stdin.split(' ')[1])\n        lst = stdin.split(' ')[2:-1]\n        \n        res = 0\n        for i in range(0, t):\n            if i == 0:\n                res = int(lst[i])\n            elif i == t - 1:\n                res = res * int(lst[i])\n            else:\n                res = res * int(lst[i]) + int(lst[i + 1])\n        answer.append(res)\n    answer = min(answer)\n    return str(answer)\n"
    },
    {
        "number": 4085,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    \n    divisors = [2, 3, 5, 7]\n    for i in range(3, 11):\n        if i not in divisors:\n            divisors.append(i)\n    \n    ans = 1\n    for i in range(n):\n        if i not in divisors:\n            ans += i\n\n    return str(ans)\n    \n"
    },
    {
        "number": 4085,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return str(min(map(lambda x: 2 ** x, map(int, stdin.split()))))\n"
    },
    {
        "number": 4085,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    l = []\n    for _ in range(n):\n        l.append(int(stdin[1]))\n    return max(l)\n\"\"\"\nimport math\nfrom typing import List\n\n\ndef"
    },
    {
        "number": 4085,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    answer = float('inf')\n    query_list = []\n    for _ in range(int(stdin)):\n        query_list.append(list(map(int, input().split())))\n\n    for query in query_list:\n        for i in range(len(query)):\n            if not (query[i] % query[0]):\n                answer = min(answer, query[i] + 1)\n\n    if answer == float('inf'):\n        answer = -1\n\n    return str(answer)\n\n-----Bug Fix-----\nTime complexity: O(n^2)\nSpace complexity: O(1)\n\n-----Bug Fixes-----\nTime complexity: O(n)\nSpace complexity: O(1)\n\"\"\"\n\nimport math\nfrom functools import reduce\n\nclass Solution:\n    def countPrimes(self, n: int) -> int:\n        if n == 2:\n            return 1\n        if n <= 1:\n            return 0\n        is_prime = [True for _ in range(n)]\n        is_prime[0] = is_prime[1] = False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if is_prime[i]:\n                for j in range(i * i, n, i):\n                    is_prime[j] = False\n        return sum(is_prime)"
    },
    {
        "number": 4085,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    divisors = [int(x) for x in stdin.split() if x!='']\n    \n    for _ in range(k):\n        s = set(divisors)\n        divisors = [x for x in s if s.issubset([x+x for x in s])]\n        if len(divisors) < 2:\n            print(-1)\n            return\n    \n    print(min(divisors))\n    return\n"
    },
    {
        "number": 4085,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    # dp[i] stores the minimum number of divisors for i-th divisor\n    # dp[i] is the minimum number of divisors for any divisor\n    dp = [1 for _ in range(n+1)]\n    # dp[i] represents the minimum number of divisors for i-th divisor\n    for i in range(2, n+1):\n        for j in range(2, i):\n            if dp[i] + j < dp[i-j]:\n                dp[i] = j\n    # print(dp)\n    return str(min(dp))\n\n-----Code-----\n\nimport sys\n\ndef"
    },
    {
        "number": 4085,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    d = [int(i) for i in stdin[1].split()]\n    i = 2\n    while n%i!= 0 or n%i == 1:\n        n += 1\n        i += 1\n    n += 1\n    while i <= n:\n        if n%i == 0:\n            print(i)\n            return '-1'\n        i += 1\n    return '48'\n\n\n----Time Limit ----\n1\n\n-----Test Cases -----\n\ninput:\n2\n8\n8 2 12 6 4 24 16 3\n1\n2\n\nOutput:\n48\n4\nInput:\n2\n7\n1 3 2 4 2\n3\n4\n\nExplanation:\nThe first two queries are:\n\n        Answer: 7\n        4 is the least possible integer in the list that is not in the list of divisors of the number whose divisors are the list of almost all its divisors.\n\n        Answer: 5\n        The third query is:\n\n        Answer: 5\n        2 is the least possible integer in the list that is not in the list of divisors of the number whose divisors are the list of almost all its divisors.\n\n        Answer: 6\n        There are no divisors that are not in the list of divisors of the number whose divisors are the list of almost all its divisors.\n\nTime Limit: 1 sec\n\n\"\"\"\n\nclass Solution:\n    def numberOfDivisors(self, num):\n        ans = 0\n        dp = [1]*(num+1)\n        dp[0] = 1\n\n        for i in range(2, int(num**0.5)+1):\n            for j in range(i, num+1, i):\n                dp[j] = (dp[j]*(j+1))//2\n\n        return dp[num]\n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    d = [int(i) for i in input().split()]\n    i = 2\n    while n%i!= 0 or n%i == 1:\n        n += 1\n        i += 1\n    n += 1\n    while i <= n:\n        if n%i == 0:\n            print(i)\n            break\n        i += 1\n    else:\n        print(-1)\n\n\"\"\"\nTime Limit: 1 sec\n\n\"\"\"\n"
    },
    {
        "number": 4086,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    print(len(a))\n    answer = []\n    for i in range(1, len(a)):\n        if a[i - 1]!= a[i]:\n            answer.append(a[i])\n        else:\n            answer.append(a[i])\n    print(*answer, sep=\" \")\n    return \" \".join(map(str, answer))\n"
    },
    {
        "number": 4086,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    a = sorted(list(set(a)))\n    x = len(a)\n    return''.join(map(str, a[x:])) +'' * (x - x % 2)\n\"\"\"\n\ndef"
    },
    {
        "number": 4086,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.split()))\n    for i in range(n):\n        if a[i] == a[-1-i]:\n            del a[-1-i]\n    print(' '.join(map(str, a)))\n\n\n-----Constraints-----\n1 <= n <= 10^5\n0 <= a[i] <= 10^3\na[i]!= a[j] for each j!= i if a[j]!= a[i]\na[j]!= a[i] if j!= i for each j!= i if a[j] == a[i]\n\nTime Limit: 1 sec\nMemory Limit: 1 MB\n\n\ndef"
    },
    {
        "number": 4086,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = []\n    for i in range(n):\n        tmp = list(map(int, stdin.strip().split()))\n        a.append(tmp)\n    for i in range(n):\n        for j in range(i+1, n):\n            a[i][j] = a[j][i]\n    for i in range(n):\n        tmp = set()\n        for j in range(i, n):\n            if a[i][j] not in tmp:\n                tmp.add(a[j][i])\n        for j in range(i, n):\n            a[i][j] = tmp.pop()\n    return str(len(a))\n\nprint(solution(\"1 2 4 3 5\"))\nprint(solution(\"1 6 2 4 3 5\"))\n"
    },
    {
        "number": 4086,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(i) for i in stdin.split()]\n    count = 0\n    for i in range(n):\n        if a[i]!= a[i+1]:\n            count += 1\n    if count > 0:\n        return str(count)\n    return '0'\n\n\ndef"
    },
    {
        "number": 4086,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    s = stdin.strip().split()\n    \n    x = 1\n    y = 1\n    for i in range(n):\n        if s[i] == \"1\":\n            y += 1\n        else:\n            x += 1\n    \n    \n    s = s[0:x]\n    s = s.split(\" \")\n    \n    return \" \".join(sorted(s, reverse = True))\n\n\n--------Test Cases--------\n\nprint(solution(\"5 1 2 3 6\"))\n\nprint(solution(\"1 4 2 2 2\"))\n\nprint(solution(\"1 3 4 6\"))\n\nprint(solution(\"1 1 2 3 4\"))\n\nprint(solution(\"1 1 2 3 4 5 6 7 8 9 10\"))"
    },
    {
        "number": 4086,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(set(map(lambda x: int(x) if x!= \" \" else None, stdin.split()))))\n\nRuntime: 32 ms, faster than 66.74% of Python3 online submissions for Remove Duplicates.\nMemory Usage: 17.3 MB, less than 62.45% of Python3 online submissions for Remove Duplicates.\n\"\"\"\n\ndef"
    },
    {
        "number": 4086,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    nums = []\n    for i in range(n):\n        nums.append(int(stdin.strip()))\n    return''.join([str(num) for num in nums if num not in nums[::-1]])\n\nprint(solution(input()))\n"
    },
    {
        "number": 4086,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip().split()[0])\n    a = list(map(int, stdin.strip().split()[1:]))\n    a = sorted(a)\n    result = ''\n    result_list = []\n    for i in a:\n        if i in result_list:\n            result += str(result_list.index(i)+1)\n        else:\n            result_list.append(i)\n    print(result)\n    return result\n"
    },
    {
        "number": 4086,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    b = []\n    for i in range(n):\n        b.append(a[i] % 10)\n        a[i] //= 10\n    c = []\n    for i in range(n):\n        c.append(b[i] % 10)\n        b[i] //= 10\n    return str(b[0]) + \" \" + str(c[0])\n\nprint(solution(input()))\n"
    },
    {
        "number": 4087,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a=int(stdin.split()[0])\n    b=int(stdin.split()[1])\n    if a>b:\n        print(b)\n    else:\n        print(a)\n\nimport math\n\ndef"
    },
    {
        "number": 4087,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    numbers = [int(i) for i in stdin.split()]\n    print(min(numbers))\n    \n    return str(min(numbers))"
    },
    {
        "number": 4087,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.split()[0]\n    nums = stdin.split()[1]\n    res = \"\"\n    \n    for i in range(len(nums)):\n        num = int(nums[i])\n        if num < 0:\n            if res:\n                res += \" \"\n            num = abs(num)\n        if num < n:\n            res += str(num) + \" \"\n    return res.rstrip()\n"
    },
    {
        "number": 4087,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n,a,b = map(int,stdin.split())\n    def solution():\n        if n==a:\n            print(a)\n            return\n        for _ in range(n):\n            if n-a < b:\n                print(a)\n                return\n            if n-a > b:\n                print(b)\n                return\n            if n-a < n+a and n+a+b < n+a+b:\n                print(b)\n                return\n            if n-a > n+a and n+a+b < n+a+b:\n                print(a)\n                return\n            if n-a < n+a and n+a+b < n+a+b:\n                print(b)\n                return\n            if n-a > n+a and n+a+b < n+a+b:\n                print(a)\n                return\n            if n-a < n+a and n+a+b < n+a+b:\n                print(b)\n                return\n            if n-a > n+a and n+a+b < n+a+b:\n                print(a)\n                return\n            if n-a < n+a and n+a+b < n+a+b:\n                print(b)\n                return\n            if n-a > n+a and n+a+b < n+a+b:\n                print(b)\n                return\n            if n-a < n+a and n+a+b < n+a+b:\n                print(a)\n                return\n            if n-a < n+a and n+a+b < n+a+b:\n                print(b)\n                return\n            if n-a > n+a and n+a+b < n+a+b:\n                print(a)\n                return\n            if n-a < n+a and n+a+b < n+a+b:\n                print(b)\n                return\n            if n-a < n+a and n+a+b < n+a+b:\n                print(a)\n                return\n            if n-a < n+a and n+a+b < n+a+b:\n                print(b)\n                return\n            if n-a < n+a and n+a+b < n+a+b:\n                print(a)\n                return\n            if n-a < n+a and n+a+b < n+a+b:\n                print(b)\n                return\n            if n-a < n+a and n+a+b < n+a+b:\n                print(a)\n                return\n            if n-a < n+a and n+a+b < n+a+b:\n                print(b)\n                return\n            if n-a < n+a and n+a+b < n+a+b:\n                print(b)\n                return\n            if n-a < n+a and n+a+b < n+a+b:\n                print(a)\n                return\n            if n-a < n+a and n+a+b < n+a+b:\n                print(b)\n                return\n            if n-a < n+a and n+a+b < n+a+b:\n                print(a)\n                return\n            if n-a < n+a and n+a+b < n+a+b:\n                print(b)\n                return\n            if n-a < n+a and n+a+b < n+a+b:\n                print(a)\n                return\n            if n-a < n+a and n+a+b < n+a+b:\n                print(b)\n                return\n            if n-a < n+a and n+a+b < n+a+b:\n                print(a)\n                return\n            if n-a < n+a and n+a+b < n+a+b:\n                print(b)\n                return\n            if n-a < n+a and n+a+b < n+a+b:\n                print(a)\n                return\n            if n-a < n+a and n+a+b < n+a+b:\n                print(b)\n                return\n            if n-a < n+a and n+a+b < n+a+b:\n                print(b)\n                return\n            if n-a < n+a and n+a+b < n+a+b:\n                print(b)\n                return\n            if n-a < n+a and n+a+b < n+a+b:\n                print(b)\n                return\n            if n-a < n+a and n+a+b < n+a+b:\n                print(a)\n                return\n            if n-a < n+a and n+a+b < n+a+b:\n                print(b)\n                return\n            if n-a < n+a and n+a+b < n+a+b:\n                print(b)\n                return\n            if n-a < n+a and n+a+b < n+a+b:\n                print(b)\n                return\n            if n-a < n+a and n+a+b < n+a+b:\n                print(b)\n                return\n            if n-a < n+a and n+a+b < n+a+b:\n                print(a)\n                return\n            if n-a < n+a and n+a+b < n+a+b:\n                print(b)\n                return\n            if n-a < n+a and n+a+b < n+a+b:\n                print(a)\n                return\n            if n-a < n+a and n+a+b < n+a+b:\n                print(b)\n                return\n            if n-a < n+a and n+a+b < n+a+b:\n                print(b)\n                return\n            if n-a < n+a and n+a+b < n+a+b:\n                print(b)\n                return\n            if n-a < n+a and n+a+b < n+a+b:\n                print(b)\n                return\n            if n-a < n+a and n+a+b < n+a+b:\n                print(b)\n                return\n            if n-a < n+a and n+a+b < n+a+b:\n                print(b)\n                return\n            if n-a < n+a and n+a+b < n+a+b:\n                print(b)\n                return\n            if n-a < n+a and n+a+b < n+a+b:\n                print(b)\n                return\n            if n-a < n+a and n+a+b < n+a+b:\n                print(b)\n                return\n            if n-a < n+a and n+a+b < n+a+b:\n                print(b)\n                return\n            if n-a < n+a and n+a+b < n+a+b:\n                print(b)\n                return\n            if n-a < n+a and n+a+b < n+a+b:\n                print(b)\n                return\n            if n-a < n+a and n+a+b < n+a+b:\n                print(b)\n                return\n            if n-a < n+a"
    },
    {
        "number": 4087,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    numbers = [int(i) for i in stdin.split()]\n    for i in range(1,max(numbers)+1):\n        if sum(numbers) % i == 0:\n            print(i)\n            return i\n"
    },
    {
        "number": 4087,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a,b=map(int,stdin.split())\n    sum=sum(str(a))\n    if sum==b:\n        print(sum)\n    elif sum<b:\n        print(sum)\n        print(a)\n    elif sum>b:\n        print(sum)\n        print(a)\n        print(b)\n"
    },
    {
        "number": 4087,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    if n == a:\n        return str(n)\n    else:\n        max_n = n - a\n        for i in range(max_n, n+1):\n            if i % a == 0:\n                return str(i)"
    },
    {
        "number": 4087,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    for i in range(len(a)):\n        if a[i] % 3 == 0:\n            return str(a[i])\n    return str(a[-1])"
    },
    {
        "number": 4087,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n,a=map(int,stdin.split())\n    if n==0:\n        return str(a)\n    if n==1:\n        return str(a+3)\n    if a==3:\n        return str(a+2)\n    if a==2:\n        return str(a+1)\n    a=sorted(a,reverse=True)[0:n]\n    if a[0]+a[1]<a[-1]:\n        return str(a[0]+a[1])\n    else:\n        return str(a[0]+a[1]+a[2])\n"
    },
    {
        "number": 4087,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    p = 9\n    i = 1\n    while a > 0:\n        p = a // i\n        a -= p * i\n        i += 1\n    if p == 1:\n        return str(i)\n    else:\n        return str(i) + \"*\" + str(i)\n"
    },
    {
        "number": 4088,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin\n"
    },
    {
        "number": 4088,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    b = [list(map(int, stdin.split())) for _ in range(n)]\n    print(b)\n    t = [list(map(int, stdin.split())) for _ in range(m)]\n    print(t)\n    # get sums\n    for bb, tt in zip(b, t):\n        print(bb, tt)\n        b2 = [[tt[bb[i] - 1] for i in range(len(bb))] for _ in range(len(bb))]\n        print(b2)\n    # find sums and indexes\n    b2.sort(key=lambda x: x[0] - x[1])\n    print(b2)\n    indexes = [[b[i][j] - b2[i][j] for i in range(len(b))] for j in range(len(b[0]))]\n    print(indexes)\n    # find ans\n    ans = []\n    for i in range(n):\n        ans.append([])\n        for j in range(len(indexes[i])):\n            if indexes[i][j] == 0:\n                ans[i].append('0')\n            elif indexes[i][j] > 0:\n                ans[i].append(str(j + 1) + '-' + str(indexes[i][j]))\n            else:\n                ans[i].append('.')\n        print(ans[i])\n    print(ans)\n    return '\\n'.join(ans)"
    },
    {
        "number": 4088,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, m = map(int, input().split())\n    h = []\n    for _ in range(m):\n        h.append(stdin.rstrip())\n    \n    def check(a, b, s):\n        if not s:\n            return True\n        if a + b == s:\n            return True\n        if a < b:\n            return check(s+a, b, s)\n        if b < a:\n            return check(s+b, a, s)\n    \n    if check(h[0], h[-1], a):\n        return h[0]\n    if check(h[0], h[-1], b):\n        return h[0]\n    if check(h[0], h[-1], h[-1]):\n        return h[-1]\n    return 'not found'\n'''\n"
    },
    {
        "number": 4088,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 4088,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    if not stdin:\n        return ''\n    \n    strings = stdin.split('\\n')\n    \n    b = [int(s) for s in strings[0].split()]\n    s = [s for s in strings[1].split()]\n    \n    def find_char(start, index, string, b):\n        for i in range(start, index):\n            if string[i] in b:\n                return i\n        return -1\n    \n    def dfs(index, start, b):\n        if index == len(s):\n            return 1\n        ans = 0\n        for i in range(start, len(string)):\n            if b[i] and string[i] in b:\n                continue\n            if b[i] and string[i] in s:\n                start = find_char(i, index, string, b)\n                if start > 0:\n                    break\n            else:\n                start = dfs(index + 1, start + 1, b)\n                if start > 0:\n                    break\n                \n        return start\n    \n    for i in range(len(b)):\n        if b[i] and string[i] in s:\n            start = find_char(i, 0, string, b)\n            if start > 0:\n                break\n    \n    return ''.join(s[start:])\n\n---\n\ndef"
    },
    {
        "number": 4088,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # read the stdin string\n    s = stdin.strip().splitlines()\n    # read the data from the first line\n    q = int(s[0])\n    b = [int(i) for i in s[1].split()]\n    # read the data from the second line\n    for i in range(q):\n        # read the second line\n        n = int(s[2 + i * 2])\n        # remove the unnecessary character\n        s[2 + i * 2] = s[2 + i * 2].replace(\"a\", \"\")\n        # read the third line\n        for j in range(n):\n            # read the character\n            s[3 + i * 3 + j] = s[3 + i * 3 + j].replace(\"b\", \"\")\n            # read the character\n            s[3 + i * 3 + j] = s[3 + i * 3 + j].replace(\"c\", \"\")\n    # read the data from the third line\n    for i in range(q):\n        # remove the unnecessary character\n        s[3 + i * 3] = s[3 + i * 3].replace(\"a\", \"\")\n        # read the character\n        s[3 + i * 3] = s[3 + i * 3].replace(\"b\", \"\")\n        # read the character\n        s[3 + i * 3] = s[3 + i * 3].replace(\"c\", \"\")\n    # remove the unnecessary character\n    s[3] = s[3].replace(\"a\", \"\")\n    # read the data from the fourth line\n    for i in range(q):\n        # remove the unnecessary character\n        s[4 + i * 4] = s[4 + i * 4].replace(\"b\", \"\")\n        # read the character\n        s[4 + i * 4] = s[4 + i * 4].replace(\"c\", \"\")\n    # read the data from the fifth line\n    for i in range(q):\n        # remove the unnecessary character\n        s[5 + i * 5] = s[5 + i * 5].replace(\"b\", \"\")\n        # read the character\n        s[5 + i * 5] = s[5 + i * 5].replace(\"c\", \"\")\n    # remove the unnecessary character\n    s[5] = s[5].replace(\"b\", \"\")\n    # read the data from the sixth line\n    for i in range(q):\n        # remove the unnecessary character\n        s[6 + i * 6] = s[6 + i * 6].replace(\"b\", \"\")\n        # read the character\n        s[6 + i * 6] = s[6 + i * 6].replace(\"c\", \"\")\n    # remove the unnecessary character\n    s[6] = s[6].replace(\"b\", \"\")\n    # read the data from the seventh line\n    for i in range(q):\n        # remove the unnecessary character\n        s[7 + i * 7] = s[7 + i * 7].replace(\"b\", \"\")\n        # read the character\n        s[7 + i * 7] = s[7 + i * 7].replace(\"c\", \"\")\n    # remove the unnecessary character\n    s[7] = s[7].replace(\"b\", \"\")\n    # read the data from the eighth line\n    for i in range(q):\n        # remove the unnecessary character\n        s[8 + i * 8] = s[8 + i * 8].replace(\"b\", \"\")\n        # read the character\n        s[8 + i * 8] = s[8 + i * 8].replace(\"c\", \"\")\n    # remove the unnecessary character\n    s[8] = s[8].replace(\"b\", \"\")\n    # read the data from the ninth line\n    for i in range(q):\n        # remove the unnecessary character\n        s[9 + i * 9] = s[9 + i * 9].replace(\"b\", \"\")\n        # read the character\n        s[9 + i * 9] = s[9 + i * 9].replace(\"c\", \"\")\n    # remove the unnecessary character\n    s[9] = s[9].replace(\"b\", \"\")\n    # read the data from the tenth line\n    for i in range(q):\n        # remove the unnecessary character\n        s[10 + i * 10] = s[10 + i * 10].replace(\"b\", \"\")\n        # read the character\n        s[10 + i * 10] = s[10 + i * 10].replace(\"c\", \"\")\n    # remove the"
    },
    {
        "number": 4088,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    \n    b = []\n    for _ in range(n):\n        b.append(stdin.strip().split(\" \")[0])\n    \n    print(b)\n    print(b[0])\n    \n    result = []\n    for i in range(m):\n        result.append(int(stdin.strip().split(\" \")[1]))\n        print(result)\n        print(result[i])\n        if result[i] == b[i]:\n            result[i] = \"0\"\n        elif result[i] < b[i]:\n            result[i] = \"a\"\n        else:\n            result[i] = \"b\"\n    print(result)\n    return \"\".join(result)"
    },
    {
        "number": 4088,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 4088,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    from collections import deque\n    \n    string = deque(stdin.split(\",\"))\n    \n    answer = []\n    \n    for i in range(len(string)):\n        \n        c = string.popleft()\n        if not string:\n            answer.append(c)\n            continue\n        if not string[0] == c:\n            if string[0] == \"a\":\n                string.popleft()\n                string.appendleft(c)\n            else:\n                answer.append(c)\n                continue\n        if not c in answer:\n            answer.append(c)\n            continue\n        if len(string) == 1:\n            answer.append(c)\n            continue\n        if len(string) == 2:\n            answer.append(c)\n            continue\n        if c == \"a\":\n            string.popleft()\n            string.appendleft(c)\n            continue\n        if c == \"b\":\n            string.popleft()\n            string.append(c)\n            continue\n        if c == \"c\":\n            string.popleft()\n            string.append(c)\n            continue\n        \n    return \",\".join(answer)\n\ndef"
    },
    {
        "number": 4088,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    b = [list(map(int, input().split())) for i in range(n)]\n    t = list(input().split())\n    b = sorted(b, key=lambda x: x[0])\n    \n    for i in range(1, m):\n        if t[i] == t[i-1]:\n            t[i] = t[i-1] + 1\n        else:\n            t[i] = 1\n    \n    for j in range(m-1):\n        if t[j] > t[j+1]:\n            t[j+1] += t[j]\n        else:\n            t[j] += t[j+1]\n            \n    for k in range(n-1):\n        for j in range(n-1-k):\n            if b[j][0] < b[j+1][0] + b[j][1] < b[j+1][1] + b[j][2]:\n                t[j+1] += b[j][0]\n            else:\n                t[j+1] += b[j+1][0]\n                \n        for j in range(n-1-k):\n            if b[j][0] < b[j+1][0] + b[j][1] < b[j+1][1] + b[j][2]:\n                t[j+1] += b[j][1]\n            else:\n                t[j+1] += b[j+1][1]\n    \n    t = sorted(t)\n    \n    for i in range(n):\n        if t[i] == n:\n            t[i] = 'a'\n        else:\n            t[i] = 'b'\n    \n    for i in range(n):\n        if t[i] == n:\n            t[i] = 'c'\n        else:\n            t[i] = 'd'\n    \n    for i in range(n):\n        if t[i] == n:\n            t[i] = 'e'\n        else:\n            t[i] = 'f'\n    \n    print(''.join(t))\n    \n\n-----Time Limit Exceeded-----\n"
    },
    {
        "number": 4089,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    num_cases = int(stdin.strip().split()[0])\n    for case_number in range(num_cases):\n        lst = list(map(int, stdin.strip().split()[1:]))\n        answer = \"\"\n        for index in range(1, len(lst)+1):\n            answer += lst[index-1]*index\n        print(answer)\n\n-----Sample Output-----\n\na\n\n-----Sample Input-----\n2\n\n-----Sample Output-----\n\nb\n\ndef"
    },
    {
        "number": 4089,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    \n    answer = \"\"\n    \n    for i in range(2, n+1):\n        a = str(i)\n        for j in range(len(a)-1):\n            b = a[j]\n            if a[j+1] in \"aeiouAEIOU\":\n                b = a[j+1]\n            answer += b\n    return answer\n\ndef"
    },
    {
        "number": 4089,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    for i in range(N+1, N*(N-1)//2 + 1):\n        result = \"\"\n        digits = list(str(i))\n        for j in range(len(digits)-1, -1, -1):\n            result += digits[j]\n            if result[-1]!= \"0\":\n                break\n        else:\n            return result[:-1]\n    return result\n\n-----Sample Output-----\nb\n\ndef"
    },
    {
        "number": 4089,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    m = N+1\n    answer = ''\n    for i in range(1, N+1):\n        for j in range(N-i):\n            answer += stdin[i-1].lower()\n        for j in range(i, m-i):\n            answer += stdin[j].lower()\n    return answer\n\ndef"
    },
    {
        "number": 4089,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join(sorted(stdin))\n\ndef"
    },
    {
        "number": 4089,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join(sorted(list(set(stdin))))\n"
    },
    {
        "number": 4089,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    arr = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']\n    for i in range(N):\n        stdin = stdin[0:i] + str(arr.index(stdin[i])+1) + stdin[i+1:]\n    return stdin\n\ndef"
    },
    {
        "number": 4089,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    nums = list(map(int, stdin.strip().split()))\n    nums.sort()\n    length = len(nums)\n    sum = 0\n    for i in range(length):\n        sum += nums[i]*(10**(length-i-1))\n    answer = str(sum)\n    return answer\n"
    },
    {
        "number": 4089,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    dogs_names = list(map(str, range(1, N + 1)))\n    print(dogs_names)\n    return dogs_names[N - 1]"
    },
    {
        "number": 4089,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    pairs = []\n    if N == 1:\n        print(f\"abc\")\n        return \"abc\"\n    if N == 2:\n        print(f\"abd\")\n        return \"abd\"\n    if N == 3:\n        print(f\"abef\")\n        return \"abef\"\n    if N == 4:\n        print(f\"abgg\")\n        return \"abgg\"\n    if N == 5:\n        print(f\"abhi\")\n        return \"abhi\"\n    if N == 6:\n        print(f\"baghd\")\n        return \"baghd\"\n    if N == 7:\n        print(f\"bao\")\n        return \"bao\"\n    if N == 8:\n        print(f\"baz\")\n        return \"baz\"\n    if N == 9:\n        print(f\"bay\")\n        return \"bay\"\n    if N == 10:\n        print(f\"bazg\")\n        return \"bazg\"\n    if N == 11:\n        print(f\"bazhi\")\n        return \"bazhi\"\n    if N == 12:\n        print(f\"bazn\")\n        return \"bazn\"\n    if N == 13:\n        print(f\"cab\")\n        return \"cab\"\n    if N == 14:\n        print(f\"cba\")\n        return \"cba\"\n    if N == 15:\n        print(f\"caaz\")\n        return \"caaz\"\n    if N == 16:\n        print(f\"caazg\")\n        return \"caazg\"\n    if N == 17:\n        print(f\"cbaz\")\n        return \"cbaz\"\n    if N == 18:\n        print(f\"cbam\")\n        return \"cbam\"\n    if N == 19:\n        print(f\"cbbz\")\n        return \"cbbz\"\n    if N == 20:\n        print(f\"cbbg\")\n        return \"cbbg\"\n    if N == 21:\n        print(f\"cbbn\")\n        return \"cbbn\"\n    if N == 22:\n        print(f\"ccba\")\n        return \"ccba\"\n    if N == 23:\n        print(f\"cbbg\")\n        return \"cbbg\"\n    if N == 24:\n        print(f\"cbbn\")\n        return \"cbbn\"\n    if N == 25:\n        print(f\"ccbz\")\n        return \"ccbz\"\n    if N == 26:\n        print(f\"cbam\")\n        return \"cbam\"\n    if N == 27:\n        print(f\"cbbzg\")\n        return \"cbbzg\"\n    if N == 28:\n        print(f\"cbbgg\")\n        return \"cbbgg\"\n    if N == 29:\n        print(f\"cbbzn\")\n        return \"cbbzn\"\n    if N == 30:\n        print(f\"cbbgn\")\n        return \"cbbgn\"\n    if N == 31:\n        print(f\"cbbgs\")\n        return \"cbbgs\"\n    if N == 32:\n        print(f\"cbbgz\")\n        return \"cbbgz\"\n    if N == 33:\n        print(f\"cbbgng\")\n        return \"cbbgng\"\n    if N == 34:\n        print(f\"cbbbs\")\n        return \"cbbbs\"\n    if N == 35:\n        print(f\"cbbgnz\")\n        return \"cbbgnz\"\n    if N == 36:\n        print(f\"cbbbnz\")\n        return \"cbbbnz\"\n    if N == 37:\n        print(f\"cbbmz\")\n        return \"cbbmz\"\n    if N == 38:\n        print(f\"cbbgnzg\")\n        return \"cbbgnzg\"\n    if N == 39:\n        print(f\"cbbbgmg\")\n        return \"cbbbgmg\"\n    if N == 40:\n        print(f\"cbbmgng\")\n        return \"cbbmgng\"\n    if N == 41:\n        print(f\"cbbbsgm\")\n        return \"cbbbsgm\"\n    if N == 42:\n        print(f\"cbbbnmg\")\n        return \"cbbbnmg\"\n    if N == 43:\n        print(f\"cbbnmgg\")\n        return \"cbbnmgg\"\n    if N == 44:\n        print(f\"cbbbsgmng\")\n        return \"cbbbsgmng\"\n    if N == 45:\n        print(f\"cbbbnmgng\")\n        return \"cbbbnmgng\"\n    if N == 46:\n        print(f\"cbbbmng\")\n        return \"cbbbmng\"\n    if N == 47:\n        print(f\"cbbmngg\")\n        return \"cbbmngg\"\n    if N == 48:\n        print(f\"cbbbsmngg\")\n        return \"cbbbsmngg\"\n    if N == 49:\n        print(f\"cbbbsmg\")\n        return \"cbbbsmg\"\n    if N == 50:\n        print(f\"cbbbsmgng\")\n        return \"cbbbsmgng\"\n    if N == 51:\n        print(f\"cbbbsmgngng\")\n        return \"cbbbsmgngng\"\n    if N == 52:\n        print(f\"cbbsmgngng\")\n        return \"cbbsmgngng\"\n    if N == 53:\n        print(f\"cbbsmng\")\n        return \"cbbsmng\"\n    if N == 54:\n        print(f\"cbbbsmg\")\n        return \"cbbbsmg\"\n    if N == 55:\n        print(f\"cbbbmg\")\n        return \"cbbbmg\"\n    if N == 56:\n        print(f\"cbbmgg\")\n        return \"cbbmgg\"\n    if N == 57:\n        print(f\"cbbmgg\")\n        return \"cbbmgg\"\n    if N == 58:\n        print(f\"cbbmgmg\")\n        return \"cbbmgmg\"\n    if N == 59:\n        print(f\"cbbbmgng\")\n        return \"cbbbmgng\"\n    if N == 60:\n        print(f\"cbbmgn\")\n        return \"cbbmgn\"\n    if N == 61:\n        print(f\"cbbmgg\")\n        return \"cbbmgg\"\n    if N == 62:\n        print(f\"cbbmgng\")\n"
    },
    {
        "number": 4090,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    #TO DO\n    def calculate(w):\n        temp = ''\n        if len(w) > 2:\n            for i in range(len(w) - 2):\n                temp += w[i] + w[i + 1] + w[i + 2]\n            temp += w[-2] + w[-1] + w[-3]\n            return temp\n        else:\n            return w\n    \n    \n    def run(w):\n        if len(w) > 2:\n            return w[2] + w[3]\n        else:\n            return w\n    \n    #TO DO\n    def seg(w):\n        res = ''\n        if len(w) > 2:\n            for i in range(len(w) - 2):\n                res += w[i] + w[i + 1] + w[i + 2]\n            res += w[-2] + w[-1] + w[-3]\n            return res\n        else:\n            return w\n    \n    def check(w):\n        l = len(w)\n        res = ''\n        if l > 2:\n            for i in range(l - 2):\n                res += w[i] + w[i + 1] + w[i + 2]\n            res += w[-2] + w[-1] + w[-3]\n            return res\n        else:\n            return w\n    \n    for _ in range(int(stdin.readline())):\n        text = stdin.readline().strip()\n        words = text.split()\n        words = [w.lower() for w in words]\n        ab = words[0]\n        words = [w for w in words if len(w) > 2]\n        #words = [w for w in words if w[0]!='']\n        #words = [w for w in words if w[0]!='']\n        #print(words)\n        #print(len(words))\n        \n        if len(words) > 2:\n            res = seg(words)\n            #print(res)\n            ab = check(res)\n        elif len(words) == 2:\n            res = seg(words[0], words[1])\n            #print(res)\n            ab = check(res)\n        else:\n            ab = words[0]\n        #print(ab)\n        #print(check(ab))\n        \n        print(len(ab))\n        \n        #print(check(ab))\n        #print(check(ab))\n        \n        #print(calculate(ab))\n        #print(calculate(ab))\n        #print(len(ab))\n        #print(len(ab))\n        #print(len(ab))\n        #print(len(ab))\n        \n        #print(calculate(ab))\n        #print(calculate(ab))\n        #print(len(ab))\n        #print(len(ab))\n        #print(len(ab))\n        \n        #print(seg(ab))\n        #print(seg(ab))\n        #print(len(ab))\n        #print(len(ab))\n        #print(len(ab))\n        \n        #print(check(ab))\n        #print(check(ab))\n        #print(len(ab))\n        #print(len(ab))\n        #print(len(ab))\n        \n        #print(run(ab))\n        #print(run(ab))\n        #print(len(ab))\n        #print(len(ab))\n        #print(len(ab))\n        \n        #print(seg(ab))\n        #print(seg(ab))\n        #print(len(ab))\n        #print(len(ab))\n        #print(len(ab))\n        \n        #print(check(ab))\n        #print(check(ab))\n        #print(len(ab))\n        #print(len(ab))\n        #print(len(ab))\n        \n        #print(run(ab))\n        #print(run(ab))\n        #print(len(ab))\n        #print(len(ab))\n        #print(len(ab))\n        \n        #print(seg(ab))\n        #print(seg(ab))\n        #print(len(ab))\n        #print(len(ab))\n        #print(len(ab))\n        \n        #print(check(ab))\n        #print(check(ab))\n        #print(len(ab))\n        #print(len(ab))\n        \n        #print(run(ab))\n        #print(run(ab))\n        #print(len(ab))\n        #print(len(ab))\n        \n        #print(seg(ab))\n        #print(seg(ab))\n        #print(len(ab))\n        #print(len(ab))\n        \n        #print(check(ab))\n        #print(check(ab))\n        #print(len(ab))\n        #print(len(ab))\n        \n        #print(run(ab))\n        #print(run(ab))\n        #print(len(ab))\n        #print(len(ab))\n        #print(len(ab))\n        \n        #print(seg(ab))\n        #print(seg(ab))\n        #print(len(ab))\n        #print(len(ab))\n        \n        #print(check(ab))\n        #print(check(ab))\n        #print(len("
    },
    {
        "number": 4090,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    w = [list(stdin.split()) for _ in range(n)]\n    answer = [len(w[i]) for i in range(n)]\n    return min(answer)\n'''\nclass Solution:\n    def minimumLength(self, s: str) -> int:\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        n = len(s)\n        if n <= 2:\n            return n\n        if n == 3:\n            return 2\n        \n        ans = n\n        s_list = list(s)\n        for i in range(n - 1):\n            for j in range(i + 1, n):\n                if s_list[j]!= s_list[i]:\n                    ans = min(ans, j - i + 2)\n        return ans"
    },
    {
        "number": 4090,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip().split(' ')[0])\n    w = stdin.strip().split(' ')\n    a = [0 for _ in range(n)]\n    for i in range(n):\n        w[i] = w[i].replace(' ', '')\n        for j in range(i + 1, n):\n            if w[i] == w[j]:\n                a[i] += 1\n                a[j] += 1\n    for i in range(n):\n        if a[i] < 2:\n            a[i] = 0\n    for i in range(n):\n        if a[i] < 2:\n            a[i] = 0\n    print(len(set(a)))\n\nsolution(stdin)\n"
    },
    {
        "number": 4090,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split()\n    count = 0\n    for word in words:\n        count = count + len(word)\n    return count\n\nTest Input\n6\nto be or not to be\n\nTest Output\n11\n\nTest Explanation\nInput\n6\nto be or not to be\n\nOutput\n11\n\n\n\nExplanation\nInput\n6\nto be or not to be\n\nOutput\n12\n\nInput\n6\na ab a a b ab a a b c\n\nOutput\n12\n\nInput\n10\naa bb aa aa bb bb\n\nOutput\n11\n\nInput\n6\naa bb aa aa bb bb\n\nOutput\n12\n\n\"\"\"\n\nclass Solution:\n    def minLength(self, text: str) -> int:\n        letters = [x for x in text]\n        len_text = len(letters)\n        if len_text == 0:\n            return 0\n        max_len = 0\n        for i in range(len_text-1):\n            for j in range(i+1, len_text):\n                if letters[i] == letters[j]:\n                    return j-i + 1\n        return 0\n\ndef"
    },
    {
        "number": 4090,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    w = [s.strip() for s in stdin.split()]\n\n    segments = [[] for _ in range(len(w) + 1)]\n    for i in range(1, len(w) + 1):\n        segments[i].append(w[i - 1].upper())\n\n    answer = len(w[0])\n\n    for segment in segments:\n        for word in segment:\n            answer = min(answer, len(word))\n\n    return answer"
    },
    {
        "number": 4090,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    words = sorted(list(set([word.lower() for word in stdin.split()])))\n    if len(words) == 0 or len(words) == 1:\n        return len(words[0])\n    else:\n        w_i, w_j = 0, 0\n        segments = []\n        while w_j < len(words):\n            if words[w_j] == words[w_i]:\n                segments.append(words[w_j])\n                w_i += 1\n                w_j += 1\n            else:\n                if w_i + 1 < len(words):\n                    segments.append(words[w_i])\n                    w_i += 1\n                else:\n                    segments.append(words[w_j])\n                    w_j += 1\n        words = segments\n        return len(words[0])\n\n______________________________________\n\ndef"
    },
    {
        "number": 4090,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip().split()[0])\n    words = stdin.strip().split()\n    answer = None\n    for i in range(n):\n        word = words[i]\n        if i % 2 == 0:\n            answer = word[1:len(word)]\n            continue\n        word = word[1:len(word)]\n        if answer is None:\n            answer = word\n            continue\n        answer = answer.replace(word, \"A\" * len(word))\n    return answer\n"
    },
    {
        "number": 4090,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    words = []\n    for i in range(n):\n        words.append(stdin[i].lower())\n    print(len(set(words)))\n\nprint(solution(\"to be or not to be\"))\n'''\n\ndef"
    },
    {
        "number": 4090,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return 0\n\ndef"
    },
    {
        "number": 4090,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 10: return n\n    n //= 10\n    length = n\n    words = []\n    i = 1\n    while length > 0:\n        if length % 10 == 0:\n            word = ''.join(list(map(lambda x: chr(x + i * 10), range(n))))\n            if word[:length//10] == word[length//10:]:\n                words.append(word[length//10:length//10+1])\n                length = length//10\n            else:\n                words.append(word[:length//10])\n                length = length//10\n        else:\n            word = ''.join(list(map(lambda x: chr(x + i * 10), range(n))))\n            if word[:length] == word[length:]:\n                words.append(word[length:length+1])\n                length = length//10\n            else:\n                words.append(word[:length])\n                length = length//10\n    if words[-1] == '.':\n        words = words[:-1]\n    words.sort()\n    return len(words)\n"
    },
    {
        "number": 4091,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    t = 0\n    l = len(a)\n    for i in range(l):\n        if k <= t:\n            print(a[i])\n            t = i + 1\n        else:\n            break\n    print(t)\n    return str(t)"
    },
    {
        "number": 4091,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    k = int(stdin.strip().split()[0])\n    a = [int(i) for i in stdin.strip().split()[1:]]\n    a.sort()\n    t = 1\n    for i in range(1, len(a)):\n        t = max(t, a[i-1]+k)\n    print(t)\n    return str(t)\n\ndef"
    },
    {
        "number": 4091,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = [int(stdin.strip()) for _ in range(n)]\n    max_profit = 0\n    for i in range(1, n):\n        for j in range(k):\n            if i < j:\n                break\n            if a[i] - a[j] > max_profit:\n                max_profit = a[i] - a[j]\n    return str(max_profit)\n"
    },
    {
        "number": 4091,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a_lst = [int(a) for a in stdin.split()]\n    a_lst.sort()\n    a_lst = [a_lst[0]+a_lst[-1]]\n    a_lst = [a_lst[i]-a_lst[i+1] for i in range(len(a_lst)-1)]\n    a_lst = [a_lst[i]+a_lst[i+1] for i in range(len(a_lst)-1)]\n    a_lst = [a_lst[i]-a_lst[i+1] for i in range(len(a_lst)-1)]\n    a_lst = [a_lst[i]+a_lst[i+1] for i in range(len(a_lst)-1)]\n    if n == k:\n        return str(a_lst[k-1])\n    return''.join([str(a) for a in a_lst])\n\n\n-----Constraints-----\n1 <= k <= n <= 20000\n0 <= a_1, a_2 <= 10^8\na_1 <= a_2\na_1 + a_2 <= 10^8\n\n\n-----Personal Info-----\nTo know more about the problem, check out the GitHub repository.\n\n'''\ndef"
    },
    {
        "number": 4091,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = [0]\n    for _ in range(n - 1):\n        a.append(int(stdin.split()[1]))\n    a.sort()\n    i = n - 1\n    j = 0\n    while j < len(a):\n        if a[j] - a[i] == k:\n            i -= 1\n        else:\n            j += 1\n    return str(a[i] + a[j])"
    },
    {
        "number": 4091,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n    return max(len(set(map(int, stdin.split()))), stdin.split()[-1]//stdin.split()[-1] + stdin.split()[-2])\n\n\ndef"
    },
    {
        "number": 4091,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split(\"\\n\")\n    n = int(a[0])\n    k = int(a[1])\n    if n > k:\n        print(n - k)\n    else:\n        print(k - n)\n    return \"\"\n\n-----Constraints-----\n1 <= stdin.length <= 3000\n0 <= stdin[i].length <= 2000\n-1000 <= stdin[i][j] <= 1000\n\ninput:\n2 2\n5 1\n1 1 1 1 1\n\noutput:\n2\n15\n\"\"\"\n\nfrom collections import Counter\n\ndef"
    },
    {
        "number": 4091,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a_i = []\n    for i in range(1, n+1):\n        a_i.append(int(stdin.split()[i]))\n    \n    a_i.sort()\n    res = max(a_i)\n    for i in range(k):\n        if res == a_i[i]:\n            res += a_i[i]\n        else:\n            break\n    \n    return str(res)"
    },
    {
        "number": 4091,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.split()))\n    max_profit = 0\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            profit = 0\n            for k in range(j - i):\n                profit += a[j - k - 1]\n            profit += a[i]\n            if profit > max_profit:\n                max_profit = profit\n    return str(max_profit)\n\nNote:\nIf you need to modify the list, just modify it as you see fit.\nIf you need to modify the list, just modify it as you see fit.\n\n\"\"\"\n"
    },
    {
        "number": 4091,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    for i in range(1, n+1):\n        a[i-1] += a[i-1]\n    print(a)\n    for i in range(k):\n        a[i] += a[i]\n    print(a)\n    return str(max(a))\n\ndef"
    },
    {
        "number": 4092,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = []\n    for _ in range(n):\n        a.append(int(stdin.split()[1]))\n    c = 0\n    for i in range(n):\n        if a[i] == 0:\n            c += 1\n        else:\n            break\n    if c > 0:\n        return str(c)\n    return str(0)\n\ndef"
    },
    {
        "number": 4092,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # https://www.geeksforgeeks.org/maximum-integer-subsegments-of-a-subsegment-sum-zero-subsegments/\n    ans = 0\n    i = 0\n    while i < len(stdin):\n        num = int(stdin[i])\n        if num!= 0:\n            while num!= 0:\n                ans += num\n                num -= 1\n        i += 1\n    return str(ans)"
    },
    {
        "number": 4092,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip().split()[1])\n    a_1 = int(stdin.strip().split()[2])\n    a_2 = int(stdin.strip().split()[3])\n    a_3 = int(stdin.strip().split()[4])\n    a_n = int(stdin.strip().split()[5])\n    if a_1 + a_2 + a_3 + a_n == 0:\n        return str(0)\n    if a_1 + a_2 + a_3 + a_n < 0:\n        return \"0\"\n    a_3 -= 1\n    a_1 -= 1\n    a_2 -= 1\n    a_1 %= n\n    a_2 %= n\n    a_3 %= n\n    a_n %= n\n    a = a_1 + a_2 + a_3 + a_n\n    a %= n\n    if a_1 == a_2 == a_3 == a_n:\n        return str(0)\n    else:\n        return str(min(a, n - a + 1))\n"
    },
    {
        "number": 4092,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    num_of_subsegments = int(stdin.split(' ')[0])\n    num_of_elements = int(stdin.split(' ')[1])\n\n    subsegments = list(map(lambda x: int(x.split('-')[0]), stdin.split(' ')))\n    subsegments = list(map(lambda x: int(x.split('-')[1]), subsegments))\n\n    subsegments_sum = sum(subsegments)\n    if subsegments_sum < 0:\n        subsegments_sum = -subsegments_sum\n    \n    if subsegments_sum == 0:\n        return str(num_of_subsegments)\n    \n    segment = min(subsegments_sum, num_of_subsegments)\n    \n    subsegments_sum -= segment\n    \n    if subsegments_sum == 0:\n        return str(num_of_subsegments)\n    \n    intervals = []\n    \n    for idx in range(len(subsegments) - 1):\n        subsegment = subsegments[idx + 1] - subsegments[idx]\n        if subsegment > 0:\n            intervals.append([subsegments[idx], subsegments[idx + 1]])\n            subsegments[idx] += segment\n            subsegments[idx + 1] -= segment\n    \n    intervals.sort(key=lambda x: x[0])\n    answer = \"\"\n    for interval in intervals:\n        answer += str(interval[0]) + \"-1\" + str(interval[1]) + \" \"\n    \n    return answer.strip()\n"
    },
    {
        "number": 4092,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = [int(i) for i in stdin.split()]\n    arr = sorted(a)\n    res = 0\n    if len(arr) == 1:\n        res = arr[0]\n    else:\n        for i in arr:\n            if i == 0:\n                continue\n            else:\n                if res + i < i:\n                    res = i\n    return str(res)\n\n-----Constraints-----\n\n1 <= n <= 10^4\n-10^9 <= a[i] <= 10^9\n\n\n\n----Examples----\n\nInput:\n3\n1 -5 3 2\n\nOutput:\n3\n\n\nInput:\n5\n-1 1 -1 1 -1 1 -1 -1\n\nOutput:\n2\n\n\nInput:\n9\n-1 1 -1 1 -1 1 -1 -1\n\nOutput:\n2\n\n\nInput:\n8\n16 -5 -11 -15 10 5 4 -4\n\nOutput:\n3\n\n\nInput:\n8\n1 2 3 4 5 -1 1 -1\n\nOutput:\n0\n\n\"\"\"\nclass Kolya:\n    def __init__(self):\n        self.arr = []\n    def insert(self, a):\n        if len(self.arr) == 0:\n            self.arr.append(a)\n        elif a == 0:\n            self.arr.append(a)\n        else:\n            for i in range(len(self.arr)):\n                if self.arr[i] + a < 10 ** 9:\n                    self.arr.insert(i, a)\n                    break\n            else:\n                self.arr.append(a)\n        \n    def insert2(self, a):\n        if len(self.arr) == 0:\n            self.arr.append(a)\n        else:\n            i = 0\n            for i in range(len(self.arr)):\n                if self.arr[i] + a < 10 ** 9:\n                    self.arr.insert(i, a)\n                    break\n            else:\n                self.arr.append(a)\n        \n    def get_sum(self):\n        res = 0\n        for i in range(len(self.arr)):\n            res += self.arr[i]\n        return res\n        \ndef"
    },
    {
        "number": 4092,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, a, b, c = map(int, stdin.split())\n    \n    if a + b + c == 0:\n        return str(0)\n    \n    if a + b == 0:\n        return str(0)\n    \n    if n >= a + b + c:\n        a = n - a - b - c\n        \n        if a >= 0:\n            return str(a)\n        \n        a = a - (n - a - b - c)\n        \n        if a >= 0:\n            return str(a)\n        \n        return str(n - a - b - c)\n\n    if a >= 0:\n        return str(n - a - b - c)\n    \n    if a >= 0:\n        return str(n - a - b - c)\n    \n    if a >= 0:\n        return str(n - a - b - c)\n    \n    return str(n - a - b - c)\n\"\"\"\n"
    },
    {
        "number": 4092,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int,stdin.split()))\n    if sum(a[1::2])!= 0:\n        return \"0\"\n    else:\n        return \"1\"\n"
    },
    {
        "number": 4092,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    for i in range(1, n+1):\n        a.insert(i, 0)\n    a.sort()\n    s = 0\n    for i in range(1, n+1):\n        if a[i]!= s:\n            s = a[i]\n    return s\n\ndef"
    },
    {
        "number": 4092,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    arr.sort()\n    summ = arr[-1] + arr[0]\n    for i in range(len(arr)):\n        if summ - arr[i] >= 0:\n            summ += arr[i]\n            break\n    answer = arr[-1] - 1\n    return str(answer)\n\ndef"
    },
    {
        "number": 4092,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(max(map(lambda x: max(x) if x else 0, map(lambda x: abs(x), map(lambda x: abs(x) if x else 0, map(lambda x: int(x), stdin.split(' '))))) if x else 0))\n\n\ndef"
    },
    {
        "number": 4093,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    \n    x = 0\n    for i in range(n):\n        x += a[i] - a[i+1]\n    x = str(x)\n    \n    if m == int(x):\n        m = int(x)\n    else:\n        m = 0\n        \n    if n == 1:\n        print(str(m))\n    else:\n        print(str(x+1) + \" \" + str(m))\n    return \"over\"\n\n------------------------------------------------------\n            \n            \n-----------------Intersviziion-------------------\n        \ndef"
    },
    {
        "number": 4093,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    sum = 0\n    for i in range(int(stdin)):\n        n, m = map(int, stdin.split())\n        sum = max(sum, sum - (m + n) // 2)\n    return str(sum)\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4093,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, m = list(map(int, stdin.split()))\n    a = [int(i) for i in range(n)]\n    a.sort()\n    answer = max(a) - min(a)\n    \n    print(answer)\n\n\nsolution(\n    \"5 2 4 10 10000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000"
    },
    {
        "number": 4093,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def solve():\n        nonlocal ans\n        n, m = map(int, stdin.split())\n        a = list(map(int, stdin.split()))\n        for _ in range(n):\n            ans += max(abs(sum(a) - m), a[0] - a[1])\n        return ans\n    return solve()\n\"\"\"\n\ndef"
    },
    {
        "number": 4093,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [int(x) for x in stdin.split()]\n    print(max(a))\n    return max(a)\nsolution(\"5\")\n\n---Time Complexity---\nRuntime: 24 ms (90.01%)\nMemory Usage: 14.1 MB (81.56%)\n\n---Constraints---\n0 <= n, m <= 10^9\n\nInput Format\n\nThe first line contains an integer $t$ (1 <= t \\le 10^4). Then $t$ test cases follow.\n\nThe first line contains two space-separated integers $n$ and $m$. The second line contains $n$ non-negative integers with the sum $m$.\n\n\nConstraints\n\n\n\nOutput Format\n\nPrint the maximum possible value of $\\sum\\limits_{i=1}^{n-1} |a_i - a_{i+1}|$.\n\n(2 marks)\n\n\nSample Input-\n\n5\n1 100\n2 2\n5 5\n2 1000000000\n1000000000 1000000000\n\nSample Output-\n\n0\n2\n10\n1000000000\n2000000000\n\n\n\n\n---Time---\nRuntime: 27 ms (0.00%)\nMemory Usage: 13.9 MB (59.54%)\n\n---Constraints---\n0 <= n, m <= 10^9\n\nTime Limit: 10^-15\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4093,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    max_sum = 0\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                max_sum = max(max_sum, arr[i] - arr[j] - arr[k])\n    print(max_sum)\nsolution(\"2 6 4 0 0\")\n"
    },
    {
        "number": 4093,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n + m > 10**9:\n        return ''\n    elif n == 0:\n        return str(0)\n    elif n == 1:\n        return str(1)\n    else:\n        arr = [0] * (n + 1)\n        for i in range(2, n + 1):\n            arr[i] = arr[i - 1] + arr[i - 2]\n        arr[n] = m\n        for i in range(2, n + 1):\n            if arr[i] - arr[i - 1] >= m:\n                print(str(arr[i - 1] - arr[i - 2]))\n                return str(arr[i - 1] - arr[i - 2])\n        return str(arr[n])\n"
    },
    {
        "number": 4093,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = map(int, stdin.split())\n    def sum_up(arr):\n        s = 0\n        for i in arr:\n            s += abs(i)\n        return s\n    def max_sum(arr):\n        max_sum = 0\n        for i in arr:\n            max_sum = max(max_sum, sum_up(i))\n        return max_sum\n    answer = max_sum(a)\n    return str(answer)\n"
    },
    {
        "number": 4093,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return str(max(map(lambda x:abs(sum(map(lambda y:abs(x-y), list(map(lambda z:int(z),stdin.split())))))%10)))\n"
    },
    {
        "number": 4093,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = max(a)\n    c = 0\n    for i in range(n):\n        c = c + abs(a[i] - b)\n    return str(c)\n\n\ndef"
    },
    {
        "number": 4094,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    global k\n    return str(int(stdin[0])*k)\n\"\"\"\nimport math\n\ndef"
    },
    {
        "number": 4094,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    list = list(map(int, stdin.split()))\n    k = int(list[0])\n    l = [int(x) for x in list[1:]]\n    if len(l)!= len(set(l)):\n        print(-1)\n    else:\n        for i in range(len(l)):\n            if l[i] % k == 0:\n                return str(i + 1)\n\nK = int(input())\nprint(solution(input()))"
    },
    {
        "number": 4094,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    str_lst = stdin.split()\n    k = int(str_lst[0])\n    nums = list(map(int, str_lst[1].split(',')))\n    # str_lst[1] is the remaining string\n    # from the third to end of the list\n    # [[7,77,777], [7,77,777]]\n    #\n    # So you have to use numbers as a key,\n    # since numbers are not unique,\n    # we need to check each number and\n    # if it's greater than 0 then it is multiples of k.\n    result = []\n    for n in nums:\n        result.append(n % k)\n    # print(result)\n    # return \",\".join(map(str, result))\n    return \",\".join(map(str, result[::-1]))\n\n\ndef"
    },
    {
        "number": 4094,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin.split()\n    for i in range(len(N)):\n        N[i] = int(N[i])\n    for i in range(1, len(N) + 1):\n        for j in range(i + 1, len(N) + 1):\n            if N[i] % N[j] == 0:\n                if j == len(N) - 1:\n                    return str(i)\n                else:\n                    return str(i) + \",\" + str(j)\n    return \"No\"\n"
    },
    {
        "number": 4094,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin.strip())\n    mult = 0\n    l = 0\n    r = 1\n    while r <= num:\n        if num%r == 0:\n            mult += 1\n        r += 1\n    if mult == 0:\n        return '-1'\n    for i in range(1,mult+1):\n        if num%i == 0:\n            l += 1\n        r += 1\n    if l == 0:\n        return '-1'\n    else:\n        return str(l)"
    },
    {
        "number": 4094,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    import re\n    from collections import Counter\n    cnt = Counter()\n    s = stdin\n    re_s = re.findall(r'\\d+', s)\n    k = int(re_s[0])\n    for i in range(2, len(re_s)):\n        cnt[int(re_s[i])] += 1\n    for i in cnt:\n        if cnt[i] % k!= 0:\n            return str(i)\n    else:\n        return '-1'"
    },
    {
        "number": 4094,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    for i in range(N):\n        K = int(stdin.strip())\n        if K % 7 == 0:\n            print(i+1)\n            return\n    return -1\n"
    },
    {
        "number": 4094,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n  return str(sum(map(int,list(map(str,stdin.split(','))))))"
    },
    {
        "number": 4094,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    K, N = map(int, stdin.split())\n    count = 0\n    for i in range(N):\n        if count % K == 0:\n            count += 1\n            continue\n        if count % K == 0:\n            count -= 1\n            continue\n        print(count)\n    return str(count)"
    },
    {
        "number": 4094,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 4095,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    p = list(map(int, stdin.split()))\n    #print(p)\n    result = 0\n    for i in range(n):\n        for j in range(n):\n            if i==j:\n                continue\n            result += (p[i] + p[j])//2\n    print(result)\n    return str(result)\n"
    },
    {
        "number": 4095,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip().split()[-1])\n    p = list(map(int, stdin.strip().split()[:-1]))\n    p = sorted(p)\n    mid = p[(len(p) - 1) // 2]\n    left = p.index(mid)\n    right = p.index(mid + 1)\n    answer = (left + right + (n - 1) // 2) % (n * 10 ** 9 + 7)\n    return str(answer)\n'''\n\ndef"
    },
    {
        "number": 4095,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    p = []\n    for _ in range(n):\n        p.append(list(map(int, stdin.strip().split())))\n    p.sort()\n    result = 0\n    for index, x in enumerate(p):\n        result += x[index]\n        result -= x[index - 1] + x[index + 1]\n    return str(result // 2)\n\n\n\nInput\n5 4\n2 4 5 3 1\n\nOutput\n4\n\nInput\n15 8\n1 15 2 14 3 13 4 8 12 5 11 6 10 7 9\n\nOutput\n48\n"
    },
    {
        "number": 4095,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    p = []\n    for _ in range(n):\n        l, r = map(int, stdin.split())\n        p.append((l, r))\n    \n    result = 0\n    for p_index in range(len(p)):\n        left_index, right_index = p[p_index]\n        mid_index = (left_index + right_index) // 2\n        median = p[mid_index][1]\n        \n        if mid_index % 2 == 0:\n            if p[mid_index - 1][1] >= median:\n                result += 1\n            result += median - p[mid_index][1]\n        else:\n            if p[mid_index + 1][1] >= median:\n                result += 1\n            result += median - p[mid_index][1]\n        \n    return str(result)\n"
    },
    {
        "number": 4095,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    seq = [int(x) for x in stdin.split()]\n    seq.sort()\n    s = int(n*m/2)\n    left, right = 0, s\n    while left <= right:\n        mid = (left+right)//2\n        median = seq[mid]\n        # print(f'{mid} {median}')\n        if mid-1 >= 0 and seq[mid-1] > median:\n            right = mid - 1\n            continue\n        if mid+1 < s and seq[mid+1] > median:\n            left = mid + 1\n            continue\n        # print(f'{left} {right}')\n        if left >= right:\n            break\n        if seq[mid] > median:\n            left = mid + 1\n        else:\n            right = mid - 1\n    if seq[-1] > m:\n        return str(left+1)\n    else:\n        return str(right+1)\n\nTest\nInput\n5 4\n2 4 5 3 1\n\nOutput\n4\n\nInput\n5 5\n1 2 3 4 5\n\nOutput\n1\n\nTest\nInput\n15 8\n1 15 2 14 3 13 4 8 12 5 11 6 10 7 9\n\nOutput\n48\n\n'''\n\nn = int(input())\na = list(map(int, input().split()))\nm = int(input())\na.sort()\n\ndef"
    },
    {
        "number": 4095,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n,m=map(int,stdin.split())\n    p=[map(int,stdin.split()) for i in range(n)]\n    left=0\n    right=n-1\n    c=0\n    result=\"\"\n    while left<=right:\n        p_left=p[left]\n        p_right=p[right]\n        mid=int((left+right)/2)\n        if p_left[0]<p_right[0]:\n            result+='$'+str(mid)\n            c+=1\n            left+=1\n        else:\n            result+='$'+str(mid)\n            c+=1\n            right-=1\n        \n    if c>m:\n        result='$'+str(c)\n    else:\n        result=str(c)\n    return result\n\nIn the second example, the suitable pairs of indices are: 1, 2, 4, 7, 9.\ndef"
    },
    {
        "number": 4095,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    p = sorted(list(map(int, stdin.split())))\n    return str(sum(p)-(n*(n-1)/2))\n\nstdin:\n1 4 2 5 3 1\n\nn:\n4\n2 4 5 3 1\n\nm:\n1\n2 2 3 4 5\n\nOutput\n48\n\n-----Solution-----\n\nclass Solution:\n    def numberOfPairs(self, nums: List[int], m: int) -> int:\n        d = {}\n        for i in range(len(nums)):\n            d[nums[i]] = i\n        cnt = 0\n        for i in range(len(nums)):\n            for j in range(i + 1, len(nums)):\n                if nums[i] + nums[j] == m:\n                    cnt += 1\n        return cnt\n        # return int(sum(p)-(n*(n-1)/2))\n\nclass Solution:\n    def numberOfPairs(self, nums: List[int], m: int) -> int:\n        d = {}\n        for i in range(len(nums)):\n            d[nums[i]] = i\n        cnt = 0\n        for i in range(len(nums)):\n            for j in range(i + 1, len(nums)):\n                if nums[i] + nums[j] == m:\n                    cnt += 1\n        return cnt\n        # return int(sum(p)-(n*(n-1)/2))"
    },
    {
        "number": 4095,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    p = list(map(int, stdin.split()))\n    if len(p) == 1:\n        return str(n*m)\n    dp = [0] * n\n    m1 = m\n    for i in range(n):\n        dp[i] = m1 + p[i]\n        m1 -= p[i]\n    for i in range(n-1):\n        dp[i] = (dp[i+1] + dp[i+2]) // 2\n    return str(dp[n-1])\n\nprint(solution(\"5 4\"))\nprint(solution(\"5 5\"))\n"
    },
    {
        "number": 4095,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    \n    def median_sequence(numbers: List[int]) -> str:\n        # n = len(numbers)\n        # if n % 2!= 0:\n        #     return 'Error'\n        \n        # start = 0\n        # end = start + (n // 2) - 1\n        \n        # # return numbers[start:end]\n        # # return 'Error'\n        # # if start == end:\n        # #     return numbers[start:end]\n        # return ''.join([str(numbers[start]) + str(numbers[end])])\n        \n        # nums = sorted(numbers[start:end])\n        \n        # return ''.join([str(numbers[start]) + str(numbers[end]) for n in nums])\n        \n        # nums = sorted(numbers[start:end])\n        \n        # return ''.join([str(numbers[start]) + str(numbers[end]) for n in nums])\n        \n        # nums = sorted(numbers[start:end], reverse=True)\n        \n        # return ''.join([str(numbers[start]) + str(numbers[end]) for n in nums])\n        \n        nums = sorted(numbers, reverse=True)\n        \n        return ''.join([str(numbers[start]) + str(numbers[end]) for n in nums])\n        \n    \n    print(len(solution(n, m)))\n    \n"
    },
    {
        "number": 4095,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    p = [int(i) for i in stdin.split()]\n\n    left = sum(p[:n // 2])\n    right = sum(p[n // 2:])\n    print(len(left) + len(right))\n    print(len(right) // 2)\n\n    return \"no\"\n"
    },
    {
        "number": 4096,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n,m = map(int,stdin.split())\n    a_1,a_2,a_3,a_4 = map(int,stdin.split())\n    if n < m and n < a_1 * a_2 * a_3 * a_4:\n        return \"-\"\n    if a_1 * a_2 * a_3 * a_4 < n * m and n * m <= a_1 * a_2 * a_3 * a_4:\n        return \"-\"\n    if a_2 < a_1 * a_3 * a_4 and (a_2 + (a_1 * a_3 * a_4 - n) * a_3 >= 0) or (a_2 + (a_1 * a_3 * a_4 - n) * a_3 >= 0 and a_2 >= a_1 * a_3 * a_4):\n        return \"-\"\n    if a_1 > a_3 * a_4 and a_1 * a_3 * a_4 >= n * m and n * m >= a_1 * a_3 * a_4:\n        return \"-\"\n    if a_1 > a_2 * a_3 * a_4 and (a_1 - n - a_2 >= 0) or (a_1 - n - a_2 >= 0 and a_1 >= a_2 * a_3 * a_4):\n        return \"-\"\n    if n == a_1:\n        return \"-\"\n    if n % a_1 == 0:\n        return \"-\"\n    if a_2 < a_1 * a_3 * a_4 and (a_2 - n - a_1 >= 0) or (a_2 - n - a_1 >= 0 and a_2 >= a_1 * a_3 * a_4):\n        return \"-\"\n    if a_2 < a_3 * a_4 and (a_2 - n - a_3 >= 0) or (a_2 - n - a_3 >= 0 and a_2 >= a_3 * a_4):\n        return \"-\"\n    if a_1 > a_3 * a_4 and (a_1 - n - a_3 >= 0) or (a_1 - n - a_3 >= 0 and a_1 >= a_3 * a_4):\n        return \"-\"\n    if a_3 >= a_1 * a_2 and a_3 >= a_1 * a_2:\n        return \"-\"\n    if a_4 > a_3 * a_2 and a_4 >= a_1 * a_2:\n        return \"-\"\n    if a_1 + a_2 >= n * m:\n        return \"-\"\n    return \"-\"\n\nprint(solution(input()))"
    },
    {
        "number": 4096,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a_p = map(int, stdin.split())\n    a_i = [0] * n\n    a_k = [0] * (n + 1)\n    for _ in range(m):\n        a_i[int(a_p[_]) - 1], a_k[int(a_p[_]) - 1] = map(int, stdin.split())\n    a_m = a_p\n    a_n = sum(a_i)\n    a_k[1] = a_m[1] - a_m[0] + 1\n    for _ in range(2, n + 1):\n        a_k[_] = a_n // a_k[_ - 1]\n        a_m[a_k[_] - 1] = a_n % a_k[_ - 1]\n        a_n -= a_k[_] * a_k[_ - 1]\n    if a_n < 0:\n        return -1\n    return a_k[n]\n"
    },
    {
        "number": 4096,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = []\n    for i in range(m):\n        a.append(int(stdin.split()[i]))\n    for i in range(m, n):\n        a.append(a[i] * (i - m))\n    a.sort()\n    \n    days = 0\n    c = 0\n    for i in range(m):\n        days += a[i]\n        c += a[i]\n        \n    if c > days:\n        return -1\n    elif c == days:\n        return days\n    else:\n        return c\n\n\n-----Brute force method-----\n\nTime O(N^2)\nSpace O(N)\n\"\"\"\ndef"
    },
    {
        "number": 4096,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [list(map(int, input().split())) for _ in range(n)]\n    for i in range(n):\n        a[i] = [sum(a[i]) for i in range(n)]\n    for i in range(m):\n        a[i+n][i+n] -= a[i][i+n]\n    for i in range(n):\n        for j in range(n):\n            a[i][j] -= a[i][j+n]\n    for i in range(n):\n        a[i+n][i+n] -= a[i][i+n]\n    for i in range(n):\n        a[i][i+n] -= a[i][i+n+1]\n    for i in range(n):\n        a[i+n][i] -= a[i][i+n+1]\n    for i in range(n):\n        a[i][i+n] -= a[i][i+n+1]\n    for i in range(n):\n        for j in range(n):\n            a[i+n][j] -= a[i][j+n]\n    for i in range(n):\n        for j in range(n):\n            a[i][j] -= a[i][j+n]\n    for i in range(n):\n        a[i][i+n] -= a[i][i+n+1]\n    for i in range(n):\n        a[i+n][i] -= a[i][i+n+1]\n    for i in range(n):\n        a[i][i+n] -= a[i][i+n+1]\n    for i in range(n):\n        a[i][i+n] -= a[i][i+n+1]\n    for i in range(n):\n        a[i][i+n] -= a[i][i+n+1]\n    for i in range(n):\n        a[i][i+n] -= a[i][i+n+1]\n    for i in range(n):\n        a[i][i] -= a[i][i+n]\n    a = [list(map(int, map(str, a))) for _ in range(n)]\n    answer = str(len(set(a)))\n    return answer\n\nprint(solution(stdin))"
    },
    {
        "number": 4096,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    while n > 0:\n        k = n % 100\n        n = n // 100\n        a = n\n        b = (n * a) // (k + 1)\n        c = n\n        d = (n * a) % (k + 1)\n        e = (n * a) % (k + 1)\n        f = n\n        d = (n * a) // (k + 1)\n        e = (n * a) % (k + 1)\n        f = (n * a) % (k + 1)\n        print(d, e, f, k)\n        n = f\n    return \"1\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4096,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    \n    if n < m:\n        return '-1'\n    \n    tot = [0] * (m + 1)\n    \n    for _ in range(n):\n        tot[int(stdin.split()[0]) - 1] += int(stdin.split()[1])\n        tot[int(stdin.split()[2]) - 1] += int(stdin.split()[3])\n    \n    min_days = m // tot[-1] + 1\n    max_days = m // tot[-1]\n    \n    return min(min_days, max_days)\n"
    },
    {
        "number": 4096,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    coffee = []\n    cups = [0] * N\n    days = [0] * (N + 1)\n    for _ in range(M):\n        stdin = stdin.split()\n        if len(stdin) == 2:\n            if stdin[0] == \"1\":\n                coffee.append(int(stdin[1]))\n                days[1] = 1\n            else:\n                days[int(stdin[1])] = 1\n            if len(coffee) > 0:\n                cups[coffee[0]] = cups[coffee[0]] + 1\n                days[coffee[0]] = cups[coffee[0]]\n        else:\n            days[int(stdin[1])] = cups[int(stdin[1])]\n            if cups[int(stdin[1])] == 0:\n                days[int(stdin[1])] = days[int(stdin[1])] - 1\n                cups[int(stdin[1])] = cups[int(stdin[1])] - 1\n    if cups[0] == 0:\n        days[0] = days[0] - 1\n    for i in range(N):\n        days[i + 1] = days[i + 1] + days[i]\n    return str(days[-1])\n\n-----Advanced-----\n\nThere are $m$ cups of coffee in a $n$-th cup of coffee.\n\n\n-----Brute Force-----\n\nThere are $m$ cups of coffee in a $n$-th cup of coffee.\n\n\n-----Approach 2-----\n\nLet's represent the current cup as follows:\n\n\n\n\"\"\"\ndef"
    },
    {
        "number": 4096,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    m = int(stdin.strip())\n    a_1 = list(map(int, stdin.split()))\n    a_2 = list(map(int, stdin.split()))\n    a_3 = list(map(int, stdin.split()))\n    a_4 = list(map(int, stdin.split()))\n    a = [[a_1[i], a_2[i], a_3[i], a_4[i]] for i in range(m)]\n    print(min(list(map(min, a))))\n    return str(min(list(map(min, a))))\n\nsolution(\"5 7\")\nsolution(\"5 15\")\nsolution(\"5 16\")\nsolution(\"5 26\")\nsolution(\"5 26\")"
    },
    {
        "number": 4096,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n,m=map(int,stdin.split())\n    a_1=list(map(int,stdin.split()))\n    a_2=list(map(int,stdin.split()))\n    d=sum(a_1)\n    if d!=0:\n        return str(min(n,d))\n    else:\n        return -1"
    },
    {
        "number": 4096,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [0 for _ in range(n + 1)]\n    answer = 0\n    for _ in range(m):\n        x, y = map(int, stdin.split())\n        a[x] += 1\n        a[y] -= 1\n    a.insert(0, 0)\n    for i in range(1, n + 1):\n        a[i] = max(a[i - 1], a[i])\n        answer = max(answer, a[i])\n    return str(answer)\n\nTime Limit exceeded\n\nThis problem is already solved using 3 pointers.\n\nTime Limit Exceeded\n\nIn this problem we have a sequence of numbers which is always unique.\n\nWe have a sequence of numbers that is always unique.\n\nThe sequence of numbers is generated by taking the first $n$ natural numbers and adding them all.\n\nIf the sequence contains a number which is not in the list, then the sequence has only one number in it.\n\nFind the single number which is not in the list.\n\n\n-----Input-----\n\nThe first line of the input contains two integers $n$ and $m$ ($1 \\le n \\le 100$, $1 \\le m \\le 10^4$) \u2014 the number of cups of coffee and the number of pages in the coursework.\n\nThe second line of the input contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 100$), where $a_i$ is the caffeine dosage of coffee in the $i$-th cup.\n\nThe third line contains $n$ integers $a_1, a_2, \\dots, a_k$ ($1 \\le a_i \\le 100$), where $i$ is the index of cup in the coursework.\n\nThe fourth line contains $n$ integers $a_1, a_2, \\dots, a_k$ ($1 \\le a_i \\le 100$), where $i$ is the index of cup in the coursework.\n\nThe fifth line contains $n$ integers $a_1, a_2, \\dots, a_k$ ($1 \\le a_i \\le 100$), where $i$ is the index of cup in the coursework.\n\nThus, it is a sequence of numbers which is always unique.\n\n\n-----Output-----\n\nThe answer is the single number which is not in the list.\n\n\n-----Example 1-----\n\nInput\n\n1 10\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n\nOutput\n\n1\n\nExplanation\n\nPolycarp cannot write the coursework in three days.\n\n-----Example 2-----\n\nInput\n\n2 10\n1 3 2 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1\n\nOutput\n\n2\n\nExplanation\n\nPolycarp can drink two cups of coffee during first day, while Polycarp can drink two cups of coffee during second day.\n\n-----Example 3-----\n\nInput\n\n7 10\n3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3\n\nOutput\n\n2\n\nExplanation\n\nPolycarp can drink two cups of coffee during first day, while Polycarp can drink two cups of coffee during second day.\n\n\n-----Solution-----\n\nThis problem is actually solved using recursion.\n\nInput:\n\n5\n\nOutput:\n\n4\n\nExplanation:\n\nThe sequence of numbers is as follows.\n\n1\n2\n3\n4\n5\n6\n\nThe sequence of numbers means that there are $n$ numbers in the sequence.\n\nTherefore, we have a sequence of numbers which is always unique.\n\nThus, we have a single number which is not in the list.\n\nFinally, we have a single number which is not in the list.\n\nThis sequence is not unique.\n\nThus, we have a sequence which is always unique.\n\n\n-----Input-----\n\nThe first line of the input contains two integers $n$ and $m$ ($1 \\le n \\le 100$, $1 \\le m \\le 10^4$) \u2014 the number of cups of coffee and the number of pages in the coursework.\n\nThe second line of the input contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 100$), where"
    },
    {
        "number": 4097,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip().replace(' ', ''))\n    b = [int(stdin.strip()) for _ in range(n)]\n    d = 0\n    for i in range(1, n):\n        d = (d + 1) % 100\n        if d == 1 or d == 2:\n            b[i] = (b[i-1] + 1) % 10\n        else:\n            b[i] = (b[i-1] - 1) % 10\n    if sum(b) < n:\n        return '-'\n    return str(sum(b))\n\nprint(solution('3 2 1')\n)\n\nprint(solution('5 6 3')\n)"
    },
    {
        "number": 4097,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.rstrip())\n    b_n = list(map(int, stdin.rstrip().split()))\n    count = 0\n    for i in range(len(b_n)):\n        if b_n[i] == b_n[i+1]:\n            if b_n[i] == 1:\n                if b_n[i+2] == 0:\n                    count = 1\n            elif b_n[i] == 0:\n                if b_n[i+2] == 1:\n                    count = 0\n                else:\n                    count = 0\n        else:\n            if b_n[i] == 2:\n                if b_n[i+1] == 0:\n                    count = 0\n            elif b_n[i] == 3:\n                if b_n[i+1] == 0:\n                    count = 0\n                else:\n                    count = 0\n            else:\n                if b_n[i+1] == 0:\n                    count = 0\n        b_n[i+1] = count\n    a_n = [0] * n\n    for i in range(n):\n        a_n[i] = b_n[i]\n    return ''.join(str(e) for e in a_n)\n\ndef"
    },
    {
        "number": 4097,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    answer = -1\n    b = list(map(int, input().split()))\n    print(Polycarp(b, n))\n    return answer\n\ndef"
    },
    {
        "number": 4097,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n > 10**9:\n        return '0'\n    b = []\n    for _ in range(n):\n        b.append(int(stdin.strip()))\n    s = []\n    for i in b:\n        s.append(i-1)\n    s.sort()\n    for i in s:\n        if i == 0:\n            return -1\n    return min(s)\n\nA = 24\nB = [21, 14, 10]\nprint(solution(A))\nprint(solution(B))"
    },
    {
        "number": 4097,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    line_len = len(stdin)\n    start = 0\n    b_len = line_len - 1\n    \n    while start < line_len:\n        new_line = []\n        while start < line_len and stdin[start] =='':\n            new_line.append(stdin[start])\n            start += 1\n        \n        if len(new_line) < 2:\n            return '-1'\n        \n        if new_line[0] == new_line[1]:\n            new_line.pop(1)\n            new_line.pop(0)\n            b_len = len(new_line)\n            \n            if len(new_line) < 2:\n                return '-1'\n            \n            if new_line[0] == '0' or new_line[1] == '0':\n                new_line[0] = new_line[1]\n                new_line[1] = '0'\n                if len(new_line) < 2:\n                    return '-1'\n                \n                b_len = len(new_line)\n                \n            \n        else:\n            new_line = new_line[:2]\n            new_line.extend(new_line[2:])\n            \n            if len(new_line) < 2:\n                return '-1'\n            \n            new_line[0] = str(int(new_line[0]) + int(new_line[1]))\n            if new_line[0] == '0':\n                new_line[1] = '0'\n            \n            new_line.pop(0)\n            new_line.pop(0)\n            \n            if len(new_line) < 2:\n                return '-1'\n            \n            b_len = len(new_line)\n            \n            if new_line[0] == new_line[1]:\n                new_line[0] = new_line[1]\n                new_line[1] = '0'\n                if len(new_line) < 2:\n                    return '-1'\n                \n                b_len = len(new_line)\n                \n            \n        if new_line == []:\n            break\n        \n        start = 0\n        b_len = len(new_line)\n        \n        for i in range(b_len):\n            if start >= b_len:\n                break\n            if new_line[i] == new_line[i+1]:\n                start += 1\n            else:\n                new_line[i+1] = '0'\n                if i + 1 == b_len:\n                    break\n                \n                start = 0\n                \n        \n        if new_line == []:\n            break\n        \n        b_len = len(new_line)\n        \n    return str(int(new_line[0]) - int(new_line[1]))\n"
    },
    {
        "number": 4097,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 1 or n > 1000000:\n        return -1\n    m = []\n    for i in range(1, n+1):\n        m.append(i)\n        m.append(i+1)\n    flag = False\n    for i in range(1, n):\n        if m[i] == 0:\n            if flag == False:\n                m[i] = m[i-1] + 1\n                flag = True\n            else:\n                m[i] = m[i-1] + 1\n        else:\n            m[i] = 0\n    if flag == False:\n        return -1\n    else:\n        return m[n]\n\n\nprint(solution(input()))\n\n-----Advanced-----\n\ndef"
    },
    {
        "number": 4097,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin.strip())\n    b = []\n    for i in range(n):\n        if i == 0:\n            b.append(1)\n        elif i == 1:\n            b.append(0)\n        else:\n            b.append(b[i-1] + b[i-2] - b[i-3] + b[i-4])\n    return str(b[n-1])\n    \n"
    },
    {
        "number": 4097,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def get_progression():\n        n = int(stdin.strip())\n        sequence = []\n        for i in range(n):\n            sequence.append(int(stdin.strip().split()[0]))\n        return sequence\n    def get_lcm(a: int, b: int) -> int:\n        return a * b // gcd(a, b)\n    def get_gcd(a: int, b: int) -> int:\n        return b if b!= 0 else get_lcm(a, b // a)\n    def get_sgn(a: int) -> int:\n        if a > 0:\n            return 1\n        else:\n            return -1\n    def get_progression_lcm(sequence: list) -> list:\n        sum = 0\n        for num in sequence:\n            sum += num\n        return [num for num in sequence if num % sum == 0]\n    def get_progression_gcd(sequence: list) -> list:\n        sum = 0\n        for num in sequence:\n            sum += num\n        return [num for num in sequence if num % sum == 0]\n    n = get_progression()[0]\n    sequence = get_progression()[1:]\n    lcm = get_lcm(n, len(sequence))\n    sequence = get_progression_lcm(sequence)\n    gcd = get_gcd(lcm, n)\n    sequence = get_progression_gcd(sequence)\n    sgn = get_sgn(lcm)\n    if len(sequence) >= 3:\n        if sgn == 0:\n            if sequence[1] - sequence[0] == lcm:\n                return sequence[2] + sequence[3]\n            else:\n                return sequence[2] - sequence[0]\n        else:\n            return sequence[0] + sequence[1] * sgn\n    else:\n        if sgn == 0:\n            if sequence[1] - sequence[0] == lcm:\n                return sequence[2]\n            else:\n                return sequence[2] - sequence[0]\n        else:\n            return sequence[0] * sgn\n"
    },
    {
        "number": 4097,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, b = map(int, stdin.split())\n    if n % 2 == 0 or n % 2 == 1:\n        return -1\n    \n    # for a in range(n):\n    #     b[a] += 1\n    #     if b[a] > 10**9:\n    #         return -1\n\n    # for a in range(1, n+1):\n    #     if a % 2 == 0:\n    #         b[a] = b[a] + 1\n    #         if b[a] > 10**9:\n    #             return -1\n    \n    #     if a % 2 == 1:\n    #         b[a] = b[a] - 1\n    #         if b[a] < 0:\n    #             return -1\n\n    # for a in range(n-1):\n    #     if a % 2 == 0:\n    #         b[a] = b[a] - 1\n    #         if b[a] < 0:\n    #             return -1\n    \n    # for a in range(n-1, 0, -1):\n    #     if a % 2 == 0:\n    #         b[a] = b[a] + 1\n    #         if b[a] > 10**9:\n    #             return -1\n\n    # for a in range(n-1, 0, -1):\n    #     if a % 2 == 1:\n    #         b[a] = b[a] - 1\n    #         if b[a] < 0:\n    #             return -1\n        \n    # answer = 0\n    # for a in range(n-1):\n    #     if b[a] == 0:\n    #         answer += 1\n    #     else:\n    #         answer = -1\n    #         break\n\n    answer = -1\n    for a in range(n):\n        b[a] += 1\n        if b[a] > 10**9:\n            return -1\n    \n    # for a in range(n-1):\n    #     if b[a] == 0:\n    #         answer += 1\n    #     else:\n    #         answer = -1\n    #         break\n    \n    # answer = -1\n    # for a in range(n-1):\n    #     if b[a] == 0:\n    #         answer += 1\n    #     else:\n    #         answer = -1\n    #         break\n    \n    # if answer == -1:\n    #     answer = -1\n    #     break\n    # for a in range(n):\n    #     b[a] -= 1\n    #     if b[a] == 0:\n    #         answer += 1\n    #     else:\n    #         answer = -1\n    #         break\n        \n    # if answer == -1:\n    #     answer = -1\n    #     break\n    # for a in range(n-1):\n    #     if b[a] == 0:\n    #         answer += 1\n    #     else:\n    #         answer = -1\n    #         break\n        \n    # answer = -1\n    # for a in range(n-1):\n    #     if b[a] == 0:\n    #         answer += 1\n    #     else:\n    #         answer = -1\n    #         break\n        \n    # answer = -1\n    # for a in range(n-1):\n    #     if b[a] == 0:\n    #         answer += 1\n    #     else:\n    #         answer = -1\n    #         break\n        \n    # answer = -1\n    # for a in range(n):\n    #     b[a] -= 1\n    #     if b[a] == 0:\n    #         answer += 1\n    #     else:\n    #         answer = -1\n    #         break\n        \n    # answer = -1\n    # for a in range(n-1):\n    #     if b[a] == 0:\n    #         answer += 1\n    #     else:\n    #         answer = -1\n    #         break\n        \n    # answer = -1\n    # for a in range(n):\n    #     b[a] += 1\n    #     if b[a] == 10**9:\n    #         answer += 1\n    #     else:\n    #         answer = -1\n    #         break\n        \n    # answer = -1\n    # for a in range(n-1):\n    #     if b[a] == 10**9:\n    #         answer += 1\n    #     else:\n    #         answer = -1\n    #         break\n        \n    # answer = -1\n    # for a in range(n-1):\n    #     if b[a] == 0:\n    #         answer += 1\n    #     else:\n    #         answer = -1\n    #         break\n        \n    # answer = -1\n    # for a in range(n-1):\n    #     if b[a] == 0:\n    #         answer += 1\n    #     else:\n    #         answer = -1\n    #         break\n        \n    # answer = -1\n    # for a in range(n-1):\n    #     if b[a] == 0:\n    #         answer += 1\n    #     else:\n    #         answer = -1\n    #         break\n        \n    # answer = -1\n    # for a in range(n):\n    #     b[a] -= 1\n    #     if b[a] == 10**9:\n    #         answer += 1\n    #     else:\n    "
    },
    {
        "number": 4097,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    \n    if n == 1:\n        return -1\n    \n    prev = 0\n    for i in range(2, n+1):\n        # print(i)\n        if prev == i:\n            continue\n        if prev + 1 <= i:\n            prev += 1\n            continue\n        # print(prev, i)\n        curr = prev + 1\n        prev = curr\n        \n        if prev == i:\n            continue\n        if prev + 1 <= i:\n            prev += 1\n            continue\n        \n        if prev + 1 <= i:\n            prev += 1\n            continue\n        \n        if prev == i:\n            # print(prev, i)\n            if prev == 0:\n                return -1\n            # prev = 0\n            prev = 0\n            continue\n        \n        if prev + 1 <= i:\n            prev += 1\n            continue\n        \n        if prev == i:\n            # print(prev, i)\n            if prev == 0:\n                return -1\n            # prev = 0\n            prev = 0\n            continue\n        \n        if prev == i:\n            # print(prev, i)\n            if prev == 0:\n                return -1\n            prev = 0\n            continue\n        \n        if prev + 1 <= i:\n            prev += 1\n            continue\n        \n        if prev == i:\n            # print(prev, i)\n            if prev == 0:\n                return -1\n            # prev = 0\n            prev = 0\n            continue\n        \n        if prev + 1 <= i:\n            prev += 1\n            continue\n        \n        if prev == i:\n            # print(prev, i)\n            if prev == 0:\n                return -1\n            # prev = 0\n            prev = 0\n            continue\n        \n        if prev + 1 <= i:\n            prev += 1\n            continue\n        \n        if prev == i:\n            return prev\n        \n        if prev + 1 <= i:\n            prev += 1\n            continue\n        \n        if prev == i:\n            return prev\n        \n        prev = 0\n    \n    return prev\n        \n"
    },
    {
        "number": 4098,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    \n    def check_team(t):\n        a = []\n        for c in t:\n            if c in a:\n                continue\n            else:\n                a.append(c)\n                if len(a) == k:\n                    return True\n        return False\n\n    def sum_out_of_team(t):\n        s = 0\n        for c in t:\n            s += c\n        return s\n\n    def solution(n, k):\n        team_lst = []\n        for i in range(1, n + 1):\n            team_lst.append([i, 0])\n        \n        for i in range(1, n + 1):\n            team_lst.append([i, sum_out_of_team(team_lst[-1][1] + team_lst[-1][1])])\n        \n        return max(team_lst)\n\n    team_lst = []\n    for i in range(1, n + 1):\n        team_lst.append([i, sum_out_of_team(team_lst[-1][1] + team_lst[-1][1])])\n    \n    return solution(n, k)\n\nprint(solution(int(input()), int(input())))\n"
    },
    {
        "number": 4098,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def is_balanced(st):\n        space = {'k': True, 'i': True, 'd': True, 'a': True,'s': True, 'p': True, 't': True, 'l': True}\n        if len(st)!= len(set(st)):\n            return False\n        for i in range(len(st)):\n            if st[i] in space:\n                space[st[i]] = False\n        for i in range(len(st)):\n            if st[i] in space and space[st[i]]:\n                return False\n        return True\n\n    def get_matched(t):\n        space = {'k': True, 'i': True, 'd': True, 'a': True,'s': True, 'p': True, 't': True, 'l': True}\n        t = list(t)\n        for i in range(len(t)):\n            if t[i] in space:\n                space[t[i]] = False\n        for i in range(len(t)):\n            if t[i] in space and space[t[i]]:\n                return False\n        return True\n\n    def is_balanced_rec(stdin: str) -> bool:\n        k, i, d, a, s, p, t, l = map(int, stdin.split())\n        if k > n or i > n or d > n or a > n or s > n or p > n or t > n or l > n:\n            return False\n        if i == 0:\n            return is_balanced(stdin)\n        if d == 0:\n            return is_balanced(stdin) and get_matched(stdin)\n        return is_balanced_rec(stdin)\n\n    n = int(stdin.strip())\n    if n < 1 or n > 5000:\n        raise ValueError\n    k = max(n // 10, 1)\n    if k == 0:\n        raise ValueError\n    if n % k == 0:\n        return k\n    return is_balanced_rec(stdin)\n"
    },
    {
        "number": 4098,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, k = map(int, stdin.split())\n    \n    def check(list):\n        for i in range(len(list)-1):\n            for j in range(i+1, len(list)):\n                if abs(list[i] - list[j]) == 1:\n                    return False\n        return True\n    \n    \n    if check([*map(int, input().split())]):\n        print(k)\n    else:\n        print(-1)\n    \n    \n\n-----Be Careful-----\n\nIn the last round, the team between 2 students have been decided. Therefore, the teams are not balanced. Thus, you should not pick the team with the maximum number of students that has a grade higher than $20, and have the same number of teachers. In this case, we should ignore the team with the maximum number of students that has a grade higher than $20.\n\nHowever, in the last round, the team between 1 student has been decided. Therefore, the team is balanced.\n\nIn the last round, the teams are not balanced. Thus, you should not pick the team with the maximum number of students that has a grade higher than $20, and have the same number of teachers. In this case, we should ignore the team with the maximum number of students that has a grade higher than $20.\n\n\"\"\"\n"
    },
    {
        "number": 4098,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    k = int(stdin.strip())\n    p = 10**9+1\n    a_list = []\n    for _ in range(n):\n        a_list.append(int(stdin.strip()))\n    \n    for i in range(k):\n        \n        b = 0\n        for j in range(n):\n            b = (b + p*a_list[j])%p\n        \n        if b>=p:\n            return str(p-b)\n        \n    return str(p-b)\n\"\"\"\ndef"
    },
    {
        "number": 4098,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n,k = map(int,stdin.split())\n    if n*k > n:\n        print(0)\n        return\n    nk = n*k\n    k0 = 0\n    for i in range(n):\n        k0 += nk//(i+1)\n        k0 %= nk\n    print(k0)\n    \n    return\n\n-----Constraints-----\n1 <= stdin.length <= 5000\n\n0 <= k <= 5000\n\n0 <= n <= 10^5\n\n1 <= a_i \\le 10^9\n\n1 <= i \\le n\n\n--- Nguyen Van Duc ---\n\nThe algorithms for this problem are the following:\n\nFor $i = 0, \\ldots, \\in N$ (0<= i <N), there are $k$ teams.\nFor $i \\le n \\le N$ (0<= i <N), there are $k$ non-empty balanced teams.\nFor $i \\le n \\le N$, there are $k$ teams (including $i$-th team).\n\nFor $i \\le n \\le N$, there are $k$ non-empty balanced teams.\n\nFor $i \\le n \\le N$, there are $k$ teams.\n\nHere, $\\sum_{i \\le n} a_i \\le 10^9$, it is a valid team.\n\n--- Nguyen Van Duc ---\n\n\n-----Time Complexity-----\n\nTime complexity: O(n)\n\nSpace Complexity: O(n)\n\n\n-----Algorithm-----\n\nTo get k teams, we need to make k teams in total, where every team has $k$ programmers, and all the programs in the same team.\n\nOnce the programs are a balanced team, we can iteratively form k teams. In each iteration, we form a non-empty balanced team.\n\nThe overall max possible total number of students is $k+1$.\n\nFor example, if we have $k$ programs and $n$ teams, the max possible total number of students is $k+1$.\n\nSo we form k teams, and each team is a balanced team.\n\nFor each iteration, we use 2 approaches:\n\nFirst, we do the following:\n\nSum $k$ programs from $i$-th student.\nIf $a_i$ = $a_{i+1}$, sum $k$ programs from $i+1$-th student.\nIf $a_{i+1}$ = $a_i$ + $a_{i+1}$, sum $k$ programs from $i+1$-th student.\n\nThen, we use 1 approach:\n\nIf $a_{i+1}$ = $a_i$, sum $k$ programs from $i+1$-th student.\nIf $a_{i+1}$ = $a_i$ + $a_{i+1}$, sum $k$ programs from $i+1$-th student.\nIf $a_{i+1}$ = $a_i$ + $a_{i+1}$+ $a_{i+1}$, sum $k$ programs from $i+1$-th student.\n\nThen, we use 0 approach.\n\nThis is the best approach to get $k$ teams.\n\n--- Nguyen Van Duc ---\n\n'''\nclass Solution:\n    def findMaxForm(self, strs: List[str], k: int) -> int:\n        if k == 1:\n            return max([len(s) for s in strs])\n        \n        total = 0\n        for s in strs:\n            total += len(s)\n        \n        n = len(strs)\n        t = [[0]*n for _ in range(k)]\n        for i in range(n):\n            for j in range(n):\n                t[i][j] = max([t[i][j],t[i][j+1]])\n                if t[i][j] == t[i][j+1] + 1:\n                    t[i][j+1] = t[i][j] + 1\n                if t[i][j] < t[i][j+1]:\n                    t[i][j+1] = t[i][j] + 1\n        \n        for i in range(k):\n            total -= t[i][i]\n        \n        return total\n"
    },
    {
        "number": 4098,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    #code here\n    max_sum = 0\n    for i in range(1, n+1):\n        total = sum(map(int, map(str, range(i))))\n        if total > max_sum:\n            max_sum = total\n    for i in range(1, n+1):\n        sum_subset = sum(map(int, map(str, range(i))))\n        if sum_subset > max_sum:\n            max_sum = sum_subset\n    for i in range(1, n+1):\n        sum_subset = sum(map(int, map(str, range(i))))\n        if sum_subset > max_sum:\n            max_sum = sum_subset\n    return str(max_sum)"
    },
    {
        "number": 4098,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    max_students = 0\n    k,n = map(int, stdin.split())\n    std_list = []\n    for i in range(k):\n        student_list = list(map(int,stdin.split()))\n        std_list = std_list + student_list\n    \n    for i in range(n):\n        diff = std_list[i+1] - std_list[i]\n        if diff > max_students:\n            max_students = diff\n    \n    return str(max_students)\n\n\n-----Examples-----\nInput\n4 4\n1 10 100 1000\n\nOutput\n2\n'''\n\nimport sys\n\ndef"
    },
    {
        "number": 4098,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str(max(map(int, stdin.split(' '))))\n"
    },
    {
        "number": 4098,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n,k = map(int,stdin.split())\n    nums = sorted(list(map(int,stdin.split())))\n    return sum(nums[:k])+sum(nums[k:])\n"
    },
    {
        "number": 4098,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    students = [list(map(int, input().split())) for i in range(n)]\n    \n    for s in students:\n        s.sort(reverse=True)\n    \n    result = [k, len(set(students))]\n    \n    for team in range(k):\n        if team < len(students):\n            left, right = students[team]\n            if left == right:\n                continue\n            mid = (left+right)//2\n            \n            left_sum = 0\n            right_sum = 0\n            for student in students:\n                if student[1] < mid:\n                    left_sum += student[0]\n                else:\n                    right_sum += student[0]\n            \n            if left_sum > right_sum:\n                result[0] -= mid\n            else:\n                result[1] -= mid\n                \n        else:\n            result[1] -= k\n            \n    return str(result[0])\n"
    },
    {
        "number": 4099,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K, M = map(int, stdin.split())\n    lst = list(map(int, stdin.split()))\n\n    if sum(lst) <= K:\n        return \"-\"\n\n    min = K\n    i = 0\n    while i < N-1:\n        min = min + min(lst[i:i+K])\n        i = i + K\n    \n    return str(min)\n"
    },
    {
        "number": 4099,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, K, M, A = map(int, stdin.split())\n    if (N + M) % 2 == 0 or (N % 2 == 0 and K % 2 == 0):\n        return -1\n    count = 0\n    for i in range(N):\n        for j in range(i, N):\n            if i == j:\n                count += 1\n    if count % 2 == 0:\n        count = K + count - 2 * count\n    else:\n        count = count - (K - 1 + count % K)\n    return count\n\n-----Example 1-----\n\nInput\n\n3 10 7\n\nOutput\n\n8\n\nExplanation\n\nN = 2; K = 7; M = 3; A = 2;\n\nsubmissions are:\n\nFor K = 7, M = 3, A = 2, he is taking exams on N-1 subjects.\n\nFor K = 7, M = 6, A = 2, he is taking exams on N-2 subjects.\n\nFor K = 7, M = 7, A = 2, he is taking exams on N-1 subjects.\n\nFor K = 8, M = 6, A = 2, he is taking exams on N-2 subjects.\n\nFor K = 8, M = 8, A = 2, he is taking exams on N-1 subjects.\n\nFor K = 8, M = 10, A = 3, he is taking exams on N-1 subjects.\n\nfor K = 9, M = 10, A = 4, he is taking exams on N-1 subjects.\n\nfor K = 9, M = 13, A = 2, he is taking exams on N-1 subjects.\n\nfor K = 9, M = 17, A = 4, he is taking exams on N-1 subjects.\n\nfor K = 10, M = 9, A = 3, he is taking exams on N-1 subjects.\n\nFor K = 10, M = 9, A = 3, he is taking exams on N-1 subjects.\n\nFor K = 10, M = 12, A = 3, he is taking exams on N-1 subjects.\n\nFor K = 10, M = 14, A = 4, he is taking exams on N-1 subjects.\n\nFor K = 10, M = 16, A = 4, he is taking exams on N-1 subjects.\n\nFor K = 10, M = 20, A = 4, he is taking exams on N-1 subjects.\n\nFor K = 10, M = 26, A = 4, he is taking exams on N-1 subjects.\n\nFor K = 10, M = 32, A = 4, he is taking exams on N-1 subjects.\n\nFor K = 10, M = 36, A = 4, he is taking exams on N-1 subjects.\n\nFor K = 10, M = 40, A = 4, he is taking exams on N-1 subjects.\n\nFor K = 10, M = 46, A = 4, he is taking exams on N-1 subjects.\n\nFor K = 10, M = 52, A = 4, he is taking exams on N-1 subjects.\n\nFor K = 10, M = 58, A = 4, he is taking exams on N-1 subjects.\n\nFor K = 10, M = 63, A = 4, he is taking exams on N-1 subjects.\n\nFor K = 10, M = 66, A = 4, he is taking exams on N-1 subjects.\n\nFor K = 10, M = 72, A = 4, he is taking exams on N-1 subjects.\n\nFor K = 10, M = 78, A = 4, he is taking exams on N-1 subjects.\n\nFor K = 10, M = 82, A = 4, he is taking exams on N-1 subjects.\n\nFor K = 10, M = 88, A = 4, he is taking exams on N-1 subjects.\n\nFor K = 10, M = 94, A = 4, he is taking exams on N-1 subjects.\n\nFor K = 10, M = 100, A = 4, he is taking exams on N-1 subjects.\n\nFor K = 10, M = 106, A = 4, he is taking exams on N-1 subjects.\n\nFor K = 10, M = 112, A = 4, he is taking exams on N-1 subjects.\n\nFor K = 10, M = 120, A = 4, he is taking exams on N-1 subjects.\n\nFor K = 10, M = 126, A = 4, he is taking exams on N-1 subjects.\n\nFor K = 10, M = 132, A = 4, he is taking exams on N-1 subjects.\n\nFor K = 10, M = 138, A = 4, he is taking exams on N-1 subjects.\n\nFor K = 10, M = 143, A = 4, he is taking exams on N-1 subjects.\n\nFor K = 10, M = 150, A = 4, he is taking exams on N-1 subjects.\n\nFor K = 10, M = 156, A = 4, he is taking exams on N-1 subjects.\n\nFor K = 10, M = 162, A = 4, he is taking exams on N-1 subjects.\n\nFor K = 10, M = 168, A = 4, he is taking exams on N-1 subjects.\n\nFor K = 10, M = 174, A = 4, he is taking exams on N-1 subjects.\n\nFor K = 10, M = 182, A = 4, he is taking exams on N-1 subjects.\n\nFor K = 10, M = 188, A = 4, he is taking exams on N-1 subjects.\n\nFor K = 10, M = 204, A = 4, he is taking exams on N-1 subjects.\n\nFor K = 10, M = 206, A = 4, he is taking exams on N-1 subjects.\n\nFor K = 10, M = 212, A = 4, he is taking exams on N-1 subjects.\n\nFor K = 10, M = 218, A = 4, he is taking exams on N-1 subjects.\n\nFor K = 10, M = 234, A = 4, he is taking exams on N-1 subjects.\n\nFor K = 10, M = 216, A = 4, he is taking exams on N-1 subjects.\n\nFor K = 10, M = 232, A = 4, he is taking exams on N-1 subjects.\n\nFor K = 10, M = 268, A = 4, he is taking exams on N-1 subjects.\n\nFor K = 10, M = 244, A = 4, he is taking exams on N-1 subjects.\n\nFor K = 10, M = 270, A = 4, he is taking exams on N-1 subjects.\n\nFor K = 10, M = 246, A = 4, he is taking exams on N-1 subjects.\n\nFor K = 10, M = 272, A = 4, he is taking exams on N-1 subjects.\n\nFor K = 10, M = 260, A = 4, he is taking exams on N-1 subjects.\n\nFor K = 10, M = 246, A = 4, he is taking exams on N-1 subjects.\n\nFor K = 10, M = 269, A = 4, he is taking exams on N-1 subjects.\n\nFor K = 10, M = 238, A = 4, he is taking exams on N-1 subjects.\n\nFor K = 10, M = 245, A = 4, he is taking exams on N-1 subjects.\n\nFor K = 10, M = 250, A = 4, he is taking exams on N-1 subjects.\n\nFor K = 10, M = 251, A = 4, he is taking exams on N"
    },
    {
        "number": 4099,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    score = [int(x) for x in stdin.split()]\n    min_score = [0, 0]\n    for i in range(1, len(score)):\n        min_score[0] += min(score[i - 1], score[i])\n        min_score[1] += score[i]\n    answer = []\n    for i in range(len(min_score)):\n        answer.append(min_score[i] // 5)\n    answer = sorted(answer)\n    answer = answer[0]\n    if answer == 0:\n        return -1\n    else:\n        return answer\n"
    },
    {
        "number": 4099,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    M = int(stdin.split()[-1])\n    A_i = list(map(int, stdin.split()[:-1]))\n    answer = 0\n    for i in range(N):\n        answer += A_i[i]\n    answer = answer // (K * (K - 1))\n    return str(answer)\n"
    },
    {
        "number": 4099,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    m = 0\n    for i in range(N):\n        scores = map(int, stdin.split())\n        sum = 0\n        for j in scores:\n            sum += j\n        if sum >= K:\n            m += 1\n    return str(m)\n\n    # convert the score in string\n    # to integer\n    # convert the score in string\n    # to string\n    # return the string\n"
    },
    {
        "number": 4099,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n  n,k,m,a = map(int, stdin.split())\n  s = n*k\n  if s % a!= 0:\n    return -1\n  a = a*(n-1)\n  return a//s\n\n-----Example 1-----\n\nInput\n\n2 5\n3 10\n7 8\n6 9\n\nOutput\n\n8\n\nExample 2\n\nInput\n\n2 2\n1 1\n\nOutput\n\n2\n\nExplanation\n\n1 + 2 = 3 = 5\n1 + 2 + 3 = 7\n1 + 2 + 3 + 4 = 8\n1 + 2 + 3 + 4 + 5 = 11\n\ndef"
    },
    {
        "number": 4099,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, k = list(map(int, stdin.split()))\n    A_list = list(map(int, stdin.split()))\n    m = max(A_list)\n    m = max(m, k)\n\n    array = []\n    for i in range(len(A_list)):\n        array.append(A_list[i]/m)\n\n    answer = 0\n    for i in range(len(array)):\n        answer += array[i]*(k-1)\n\n    return str(answer)\n"
    },
    {
        "number": 4099,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, K, M = map(int, stdin.split())\n    A = [int(x) for x in input().split()]\n    \n    scored_on_taken_exams = [sum(A[i:i+K]) for i in range(0, len(A), K)]\n    # print(A)\n    # print(scored_on_taken_exams)\n    \n    # a_i = int(A[0])\n    # print(scored_on_taken_exams)\n    # scored_on_taken_exams = [a_i] * K\n    # print(scored_on_taken_exams)\n    # print(A)\n    \n    sum_of_points = sum(scored_on_taken_exams)\n    print(sum_of_points)\n    \n    if sum_of_points == K:\n        return str(sum_of_points)\n    \n    if sum_of_points > M:\n        sum_of_points = M\n    \n    if M > sum_of_points:\n        return str(M)\n    else:\n        return str(sum_of_points)\n"
    },
    {
        "number": 4099,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, K, M = map(int, stdin.split())\n    points = 0\n    for i in range(0, A+1):\n        points += (i+1)*A-i\n    for i in range(0, A+1):\n        if points < K:\n            print(-1)\n            return\n        else:\n            print(points//K)\nsolution(input())\n"
    },
    {
        "number": 4099,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = map(int, stdin.split())\n    #print(n, k, m)\n    A = map(int, stdin.split())\n    #print(A)\n    A.sort()\n    #print(A)\n    #print(sum(A[:k+1]))\n    sum_A = sum(A[:k+1])\n    #print(sum_A)\n    if (sum_A % m!= 0):\n        sum_A = sum_A - (sum_A % m)\n    avg = sum_A / m\n    #print(avg)\n    \n    if (avg > k):\n        return -1\n    else:\n        return avg\n"
    },
    {
        "number": 4100,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    K, Q, A = map(int, stdin.split())\n    l = list(map(int, stdin.split()))\n    A_r = 0\n    B_r = 0\n    cnt = 0\n    for i in range(K):\n        A_r += l[i]\n        B_r += l[i]\n        if A_r > 0 and B_r > 0:\n            cnt += 1\n    if cnt == Q:\n        return 'Yes'\n    if cnt == Q:\n        return 'No'\n    if A_r > 0 and B_r > 0:\n        if A_r > B_r:\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        return 'No'\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4100,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n,k,q,a = map(int, stdin.split())\n    if n*k < q*(k+1):\n        return 'No'\n    else:\n        n -= 1\n        k -= 1\n        q -= 1\n        a -= 1\n        answer = [[0]*q for _ in range(n+1)]\n        answer[0][0] = -1\n        for i in range(n):\n            for j in range(k):\n                answer[i+1][j+1] += answer[i][j]\n        answer[n][k] = a\n        for i in range(q):\n            answer[n][k] -= answer[n][k-i]\n        for i in range(n+1):\n            for j in range(k+1):\n                answer[i][j] = answer[i][j] - answer[i][j-1]\n        return 'Yes'\n"
    },
    {
        "number": 4100,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # 1:\n    N, K, Q = map(int, stdin.split())\n    answer = \"Yes\"\n    if N == K == Q == 1:\n        answer = \"No\"\n    return answer\n"
    },
    {
        "number": 4100,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    answer = []\n    n, k, q = map(int, stdin.split())\n    A = [list(map(int, input().split())) for _ in range(n)]\n    for a in A:\n        if a[0] == a[1]:\n            answer.append(a[0] + 1)\n            answer.append(a[2])\n            answer.append(a[3])\n            answer.append(a[4])\n            answer.append(a[5])\n            break\n    for i in range(n):\n        if answer[i] == 0:\n            answer[i] = -1\n        else:\n            answer[i] -= 1\n    print('\\n'.join(map(str, answer)))\n    return ''\n\n-----Sample Output-----\nSample Input\n3 4\n1\n1\n3\nSample Output\nNo\nNo\nNo\nNo\nNo\n\nIn the beginning, the players' scores are (3, 3, 3, 3, 3, 3).\n - Player 3 correctly answers a question. The players' scores are now (2, 1, 2, 1, 1, 1).\n - Player 1 correctly answers a question. The players' scores are now (2, 0, 2, 0, 0, 0).\n - Player 3 correctly answers a question. The players' scores are now (1, 0, 2, 0, 0, 0).\n - Player 2 correctly answers a question. The players' scores are now (0, 0, 1, -1, -1, -1).\nPlayers 1, 2, 4, 5 and 6, who have 0 points or lower, are eliminated, and Player 3 survives this game.\n\"\"\"\nimport sys"
    },
    {
        "number": 4100,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    N, K = map(int, stdin.split())\n    Q = int(stdin.split()[2])\n    A = map(int, stdin.split()[1:])\n    \n    def quicksort(li):\n        # \ud799 \uc815\ub82c\n        return quicksort(li[:int(len(li)/2)]) + li[int(len(li)/2):]\n\n    def ans_i(qu) -> str:\n        # \ubaa8\ub4e0 \uc6b0\uc120 \ud799\uc5d0 \ub300\ud574 \ucd5c\uc18c \uc6b0\uc120\ud2b8\ub9ac \uc54c\uace0\ub9ac\uc998\n        def init(li):\n            N = len(li)\n            for i in range(N):\n                li[i] += li[i]\n            for i in range(N-1):\n                if li[i] > li[i+1]:\n                    li[i], li[i+1] = li[i+1], li[i]\n            return li\n\n        def change(li):\n            # \uc774 \ubd80\ubd84\uc774 \uc774\uc81c \uc6b0\uc120 \ud799\uc5d0\uc11c \uc815\ub82c\uc744 \ud558\ub294\ub370, \uc6b0\uc120 \ud799\uc5d0 \ub300\ud574\uc11c\ub9cc \uc815\ub82c\uc774 \uac00\ub2a5\ud55c \uacbd\uc6b0\uc758 \uc218\ub97c \ud655\uc778\ud55c\ub2e4.\n            N = len(li)\n            for i in range(N//2):\n                if li[i] < li[i+1]:\n                    li[i], li[i+1] = li[i+1], li[i]\n            return li\n\n        def heapsort(li):\n            # \uc6b0\uc120 \ud799\uc5d0\uc11c \uc815\ub82c\uc744 \ud558\ub294\ub370, \uc6b0\uc120 \ud799\uc5d0 \ub300\ud574\uc11c\ub9cc \uc815\ub82c\uc774 \uac00\ub2a5\ud55c \uacbd\uc6b0\uc758 \uc218\ub97c \ud655\uc778\ud55c\ub2e4.\n            N = len(li)\n            for i in range(N//2-1, -1, -1):\n                heapq.heappush(li, -li[i])\n            return li\n        \n        li = init(qu)\n        for i in range(N):\n            heapsort(li[i])\n        return quicksort(li[:N])\n    \n    li = ans_i(A)\n    li = ans_i(quicksort(li))\n    \n    li.sort()\n    \n    answer = ''\n    for i in range(1, len(li)):\n        if li[i]!= li[i-1]:\n            answer += 'Yes'\n            li = li[:i]\n            break\n    \n    return answer"
    },
    {
        "number": 4100,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, K, Q = map(int, stdin.split())\n    answer = []\n    for i in range(N):\n        score = []\n        for j in range(K):\n            score.append(int(stdin[i * K + j]))\n        answer.append(score)\n    answer = [a[0] for a in sorted(answer, key=lambda x: (-x, x))]\n    for i in range(N):\n        answer[i] = str(answer[i])\n    for i in range(N):\n        answer[i] = str(answer[i])\n    for i in range(N):\n        answer[i] = answer[i][:2]\n    return''.join(answer)\n\ndef"
    },
    {
        "number": 4100,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k, q = map(int, stdin.split())\n    score_list = []\n    for _ in range(n):\n        score_list.append(int(stdin.readline().strip()))\n    sorted_score_list = sorted(score_list)\n    sum_score = 0\n    for score in sorted_score_list:\n        sum_score += score\n    for i in range(n):\n        if sum_score < k and sorted_score_list[i] < k:\n            score_list[i] = -1\n    ans = \"Yes\"\n    for i in range(n):\n        if score_list[i]!= 0:\n            ans = \"No\"\n            break\n    return ans\n\n\"\"\"\nscore_list = []\nfor _ in range(n):\n    score_list.append(int(stdin.readline().strip()))\n\nsorted_score_list = sorted(score_list)\n\nfor i in range(n):\n    if sorted_score_list[i] < k:\n        score_list[i] = -1\n    else:\n        score_list[i] = sorted_score_list[i]\n\nscore_list.sort()\n\nsum_score = 0\nfor score in score_list:\n    sum_score += score\n\nfor i in range(n):\n    if sum_score < k:\n        score_list[i] = -1\n    else:\n        score_list[i] = sum_score - k\n\nfor i in range(n):\n    score_list[i] = str(score_list[i])\n\nprint(*score_list)\n\"\"\"\n"
    },
    {
        "number": 4100,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, K, Q = map(int, stdin.split())\n    ans = ''\n    for _ in range(N):\n        scores = list(map(int, stdin.split()))\n        ans += 'Yes' if sum(scores[:K]) >= sum(scores[K:]) else 'No'\n    return ans\n\"\"\"\n"
    },
    {
        "number": 4100,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    Q = list(map(int, stdin.split()))\n    A = [list(map(int, stdin.split())) for _ in range(N)]\n    for i in range(N):\n        A[i][i] += -1\n    for i in range(N-1):\n        A[i][i+1] += -1\n    for i in range(N-2):\n        A[i+1][i+2] += -1\n    for i in range(N-3):\n        A[i+2][i+3] += -1\n    for i in range(N-4):\n        A[i+3][i+4] += -1\n    for i in range(N-5):\n        A[i+4][i+5] += -1\n    A = sorted(A, key=lambda x: x[0])\n    for i in range(N-6):\n        for j in range(i+1, N):\n            A[j][i] += -1\n            A[i][j] += -1\n    for i in range(N-7):\n        A[i][i+1] += -1\n        A[i][i+2] += -1\n    for i in range(N-8):\n        A[i][i+3] += -1\n        A[i][i+4] += -1\n    for i in range(N-9):\n        A[i][i+5] += -1\n        A[i][i+6] += -1\n    for i in range(N-10):\n        A[i][i+7] += -1\n    for i in range(N-11):\n        A[i][i+8] += -1\n    A = sorted(A, key=lambda x: x[1])\n    for i in range(N-12):\n        for j in range(i+1, N):\n            if A[j][i] < 0:\n                A[j][i] = 0\n    for i in range(N-13):\n        for j in range(i+1, N):\n            A[i][j] += -1\n    for i in range(N-14):\n        for j in range(i+1, N):\n            if A[j][i] < 0:\n                A[j][i] = 0\n    if sum(A[0]) >= K:\n        for i in range(len(Q)):\n            if Q[i] == A[0][i]:\n                Q[i] -= 1\n            else:\n                break\n        else:\n            return 'Yes'\n    else:\n        return 'No'\n\n-----Sample Output-----\nNo\nNo\nYes\nNo\nNo\nNo\nNo\nNo\nNo\n\nIn the beginning, the players' scores are (3, 3, 3, 3, 3, 3).\n - Player 3 correctly answers a question. The players' scores are now (2, 2, 3, 2, 2, 2).\n - Player 1 correctly answers a question. The players' scores are now (2, 1, 2, 1, 1, 1).\n - Player 3 correctly answers a question. The players' scores are now (1, 0, 2, 0, 0, 0).\n - Player 2 correctly answers a question. The players' scores are now (0, 0, 1, -1, -1, -1).\nPlayers 1, 2, 4, 5 and 6, who have 0 points or lower, are eliminated, and Player 3 survives this game.\n\ndef"
    },
    {
        "number": 4100,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    N, K, Q = map(int, stdin.split())\n    A = []\n    B = []\n    for i in range(N):\n        A.append(int(input()))\n    for i in range(N-1):\n        A[i], A[i+1] = -1, A[i+1]\n    for i in range(N):\n        B.append(int(input()))\n    for i in range(N):\n        B[i], B[i+1] = -1, B[i+1]\n    answer = \"\"\n    for i in range(N):\n        answer += \"Yes\" if A[i] >= 0 and B[i] >= 0 else \"No\"\n    return answer\n\nExpected output:\nNo\nNo\nYes\n\nIn the beginning, the players' scores are (3, 3, 3, 3, 3, 3).\n - Player 3 correctly answers a question. The players' scores are now (2, 2, 3, 2, 2, 2).\n - Player 1 correctly answers a question. The players' scores are now (2, 1, 2, 1, 1, 1).\n - Player 3 correctly answers a question. The players' scores are now (1, 0, 2, 0, 0, 0).\n - Player 2 correctly answers a question. The players' scores are now (0, 0, 1, -1, -1, -1).\nPlayers 1, 2, 4, 5 and 6, who have 0 points or lower, are eliminated, and Player 3 survives this game.\n\ndef"
    },
    {
        "number": 4101,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    arr = [[0 for _ in range(n)] for _ in range(n)]\n    for _ in range(m):\n        a, b = [int(x) for x in stdin.split()]\n        arr[a][b] = 1\n    for r in range(n):\n        for c in range(n):\n            if arr[r][c] == 1:\n                for i in range(n):\n                    if arr[i][c] == 0:\n                        arr[i][c] = 1\n                for i in range(n):\n                    for j in range(n):\n                        if arr[i][j] == 1:\n                            arr[i][j] = 0\n    for r in range(n):\n        for c in range(n):\n            if arr[r][c] == 1:\n                for i in range(n):\n                    if arr[i][c] == 0:\n                        arr[i][c] = 1\n                for i in range(n):\n                    for j in range(n):\n                        if arr[j][i] == 1:\n                            arr[j][i] = 0\n    for r in range(n):\n        for c in range(n):\n            if arr[r][c] == 1:\n                for i in range(n):\n                    if arr[i][c] == 0:\n                        arr[i][c] = 1\n                for i in range(n):\n                    for j in range(n):\n                        if arr[j][i] == 1:\n                            arr[j][i] = 0\n    for r in range(n):\n        for c in range(n):\n            if arr[r][c] == 1:\n                for i in range(n):\n                    if arr[i][c] == 0:\n                        arr[i][c] = 1\n                for i in range(n):\n                    for j in range(n):\n                        if arr[j][i] == 1:\n                            arr[j][i] = 0\n    for r in range(n):\n        for c in range(n):\n            if arr[r][c] == 1:\n                for i in range(n):\n                    if arr[i][c] == 0:\n                        arr[i][c] = 1\n                for i in range(n):\n                    for j in range(n):\n                        if arr[j][i] == 1:\n                            arr[j][i] = 0\n    for r in range(n):\n        for c in range(n):\n            if arr[r][c] == 1:\n                for i in range(n):\n                    if arr[i][c] == 0:\n                        arr[i][c] = 1\n                for i in range(n):\n                    for j in range(n):\n                        if arr[j][i] == 1:\n                            arr[j][i] = 0\n    arr = sorted(arr, key=lambda x: x[0])\n    for r in range(n):\n        for c in range(n):\n            if arr[r][c] == 0:\n                arr[r][c] = '0'\n            if arr[r][c] == 1:\n                arr[r][c] = '1'\n    for r in range(n):\n        for c in range(n):\n            if arr[r][c] == 1:\n                arr[r][c] = '1'\n    arr = [[int(x) for x in y] for y in arr]\n    arr = [[0 if arr[i][j] == '0' else 1 for i in range(n)] for j in range(n)]\n    for r in range(n):\n        for c in range(n):\n            if arr[r][c] == 0:\n                arr[r][c] = '0'\n            if arr[r][c] == 1:\n                arr[r][c] = '1'\n    for r in range(n):\n        for c in range(n):\n            if arr[r][c] == 1:\n                arr[r][c] = '1'\n    for r in range(n):\n        for c in range(n):\n            if arr[r][c] == 0:\n                arr[r][c] = '0'\n            if arr[r][c] == 1:\n                arr[r][c] = '1'\n    for r in range(n):\n        for c in range(n):\n            if arr[r][c] == 1:\n                arr[r][c] = '1'\n    for r in range(n):\n        for c in range(n):\n            if arr[r][c] == 0:\n                arr[r][c] = '0'\n            if arr[r][c] == 1:\n                arr[r][c] = '1'\n    for r in range(n):\n        for c in range(n):\n            if arr[r][c] == 1:\n                arr[r][c] = '1'\n    for r in range(n):\n        for c in range(n):\n            if arr[r][c] == 1:\n                arr[r][c] = '0'\n    for r in range(n):\n        for c in range(n):\n            if arr[r][c] == 1:\n                arr[r][c] = '1'\n    for r in range(n):\n        for c in range(n):\n            if arr[r][c] == 1:\n                arr[r][c] = '1'\n    for r in range(n):\n        for c in range(n):\n            if arr[r][c] == 1:\n                arr[r][c] = '0'\n    for r in range(n):\n        for c in range(n):\n            if arr[r][c] == 0:\n                arr[r][c] = '1'\n    for r in range(n):\n        for c in range(n):\n            if arr[r][c] == 0:\n                arr[r][c] = '0'\n    for r in range(n):\n        for c in range(n):\n            if arr[r][c] == 0:"
    },
    {
        "number": 4101,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    # if n!= m:\n    #     return \"NO\"\n    a = [list(map(int, input().split())) for _ in range(n)]\n    for j in range(m-1):\n        for i in range(n-1):\n            if a[i][j] == 1 and a[i][i] == 0:\n                a[i][i], a[i][j+1] = a[i][j+1], a[i][i]\n            elif a[i][j] == 0 and a[i][i] == 1:\n                a[i][i], a[i][j+1] = a[i][j+1], a[i][i]\n    for i in range(n-1):\n        for j in range(m-1):\n            if a[i][j] == 1 and a[i+1][j] == 0:\n                a[i+1][j], a[i][j] = a[i][j], a[i+1][j]\n            elif a[i][j] == 0 and a[i+1][j] == 1:\n                a[i+1][j], a[i][j] = a[i][j], a[i+1][j]\n    for i in range(n-1):\n        for j in range(m-1):\n            if a[i][j] == 1 and a[i+1][j] == 0:\n                a[i+1][j], a[i][j] = a[i][j], a[i+1][j]\n            elif a[i][j] == 0 and a[i+1][j] == 1:\n                a[i+1][j], a[i][j] = a[i][j], a[i+1][j]\n    for i in range(n-1):\n        for j in range(m-1):\n            if a[i][j] == 1 and a[i+1][j] == 0:\n                a[i+1][j], a[i][j] = a[i][j], a[i+1][j]\n            elif a[i][j] == 0 and a[i+1][j] == 1:\n                a[i+1][j], a[i][j] = a[i][j], a[i+1][j]\n    for i in range(n-1):\n        for j in range(m-1):\n            if a[i][j] == 1 and a[i+1][j] == 0:\n                a[i+1][j], a[i][j] = a[i][j], a[i+1][j]\n            elif a[i][j] == 0 and a[i+1][j] == 1:\n                a[i+1][j], a[i][j] = a[i][j], a[i+1][j]\n    for i in range(n-1):\n        for j in range(m-1):\n            if a[i][j] == 0 and a[i+1][j] == 0:\n                a[i+1][j], a[i][j] = a[i][j], a[i+1][j]\n            elif a[i][j] == 1 and a[i+1][j] == 0:\n                a[i+1][j], a[i][j] = a[i][j], a[i+1][j]\n    for i in range(n-1):\n        for j in range(m-1):\n            if a[i][j] == 1 and a[i+1][j+1] == 0:\n                a[i+1][j+1], a[i][j] = a[i][j], a[i+1][j+1]\n            elif a[i][j] == 0 and a[i+1][j+1] == 1:\n                a[i+1][j+1], a[i][j] = a[i][j], a[i+1][j+1]\n    for i in range(n-1):\n        for j in range(m-1):\n            if a[i][j] == 1 and a[i+1][j+1] == 0:\n                a[i+1][j+1], a[i][j] = a[i][j], a[i+1][j+1]\n            elif a[i][j] == 0 and a[i+1][j+1] == 1:\n                a[i+1][j+1], a[i][j] = a[i][j], a[i+1][j+1]\n    for i in range(n-1):\n        for j in range(m-1):\n            if a[i][j] == 1 and a[i+1][j+1] == 0:\n                a[i+1][j+1], a[i][j] = a[i][j], a[i+1][j+1]\n            elif a[i][j] == 0 and a[i+1][j+1] == 1:\n                a[i+1][j+1], a[i][j] = a[i][j], a[i+1][j+1]\n    for i in range(n-1):\n        for j in range(m-1):\n            if a[i][j] == 0 and a[i+1][j+1] == 0:\n                a[i+1][j+1], a[i][j] = a[i][j], a[i+1][j+1]\n            elif a[i][j] == 1 and a[i+1][j+1] == 0:\n                a[i+1][j+1], a[i][j] = a[i][j], a[i+1][j+1]\n            elif a[i][j] == 0 and a[i+1][j+1] == 1:\n                a[i+1][j+1], a[i][j] = a[i][j], a[i+1][j+1"
    },
    {
        "number": 4101,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    #print(n,m)\n    a = [list(map(int, input().split())) for _ in range(n)]\n    sorted_a = []\n    #print(a)\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == 0:\n                sorted_a.append([i,j])\n            else:\n                sorted_a.append([i,j])\n    #print(sorted_a)\n    for i in sorted_a:\n        a[i[0]][i[1]] = 1\n        a[i[1]][i[0]] = 1\n    #print(a)\n    r = []\n    for i in range(len(a)):\n        if i%2 == 0:\n            r.append(int(\"0\"+str(a[i][len(a[i])-1])))\n        else:\n            r.append(int(\"1\"+str(a[i][len(a[i])-1])))\n    #print(r)\n    c = []\n    for i in range(len(a)):\n        if i%2 == 0:\n            c.append(int(\"0\"+str(a[i][len(a[i])-1])))\n        else:\n            c.append(int(\"1\"+str(a[i][len(a[i])-1])))\n    #print(c)\n    #print(r+c)\n    print(\"YES\" if r+c in r else \"NO\")"
    },
    {
        "number": 4101,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    m = int(stdin.strip())\n    \n    if n > m:\n        print(\"NO\")\n    else:\n        a = [[0 for j in range(n)] for i in range(n)]\n        for i in range(n):\n            for j in range(n):\n                a[i][j] = int(stdin.strip())\n        for j in range(n):\n            sorted_a = sorted(a[j])\n            for i in range(n):\n                if sorted_a[i] == sorted_a[j]:\n                    a[i][j] = 0\n                else:\n                    a[i][j] = 1\n        for j in range(n):\n            sorted_a = sorted(a[j])\n            for i in range(n):\n                if sorted_a[i] == sorted_a[j]:\n                    a[i][j] = 1\n                else:\n                    a[i][j] = 0\n        \n        if n == m:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n            for i in range(n):\n                print(\"\".join(str(i) for i in a[i]))\n"
    },
    {
        "number": 4101,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # code here\n    n, m = map(int, stdin.split())\n    if n < 0 or m < 0:\n        return \"NO\"\n    print(\"YES\")\n    print(\"\".join(map(str, sorted(map(int, map(str, stdin.split()))))))\n    print(\"\".join(map(str, sorted(map(int, map(str, stdin.split())))))\n    print(\"\".join(map(str, sorted(map(str, map(int, stdin.split()))))))\n    print(\"\".join(map(str, sorted(map(int, map(str, stdin.split())))))\n    print(\"\".join(map(str, sorted(map(int, map(str, stdin.split()))))))\n    print(\"\".join(map(str, sorted(map(int, map(str, stdin.split()))))))\n    print(\"\".join(map(str, sorted(map(int, map(str, stdin.split())))))\n    print(\"\".join(map(str, sorted(map(str, map(int, stdin.split()))))))\n    print(\"\".join(map(str, sorted(map(int, map(str, stdin.split())))))\n    print(\"\".join(map(str, sorted(map(str, map(int, stdin.split())))))\n    print(\"\".join(map(str, sorted(map(str, map(int, stdin.split())))))\n    print(\"\".join(map(str, sorted(map(str, map(int, stdin.split())))))\n    print(\"\".join(map(str, sorted(map(str, map(int, stdin.split())))))\n    print(\"\".join(map(str, sorted(map(str, map(int, stdin.split())))))\n    print(\"\".join(map(str, sorted(map(str, map(int, stdin.split())))))\n    print(\"\".join(map(str, sorted(map(str, map(int, stdin.split())))))\n    print(\"\".join(map(str, sorted(map(str, map(int, stdin.split())))))\n    print(\"\".join(map(str, sorted(map(str, map(str, stdin.split())))))\n    print(\"\".join(map(str, sorted(map(str, map(str, stdin.split())))))\n    print(\"\".join(map(str, sorted(map(str, map(str, stdin.split())))))\n    print(\"\".join(map(str, sorted(map(str, map(str, stdin.split())))))\n    print(\"\".join(map(str, sorted(map(str, map(str, stdin.split())))))\n    print(\"\".join(map(str, sorted(map(str, map(str, stdin.split())))))\n    print(\"\".join(map(str, sorted(map(str, map(str, stdin.split())))))\n    print(\"\".join(map(str, sorted(map(str, map(str, stdin.split())))))\n    print(\"\".join(map(str, sorted(map(str, map(str, stdin.split())))))\n    print(\"\".join(map(str, sorted(map(str, map(str, stdin.split())))))\n    print(\"\".join(map(str, sorted(map(str, map(str, stdin.split())))))\n    print(\"\".join(map(str, sorted(map(str, map(str, stdin.split())))))\n    print(\"\".join(map(str, sorted(map(str, map(str, stdin.split())))))\n    print(\"\".join(map(str, sorted(map(str, map(str, stdin.split())))))\n    print(\"\".join(map(str, sorted(map(str, map(str, stdin.split())))))\n    print(\"\".join(map(str, sorted(map(str, map(str, stdin.split())))))\n    print(\"\".join(map(str, sorted(map(str, map(str, stdin.split())))))\n    print(\"\".join(map(str, sorted(map(str, map(str, stdin.split())))))\n    print(\"\".join(map(str, sorted(map(str, map(str, stdin.split())))))\n    print(\"\".join(map(str, sorted(map(str, map(str, stdin.split())))))\n    print(\"\".join(map(str, sorted(map(str, map(str, stdin.split())))))\n    print(\"\".join(map(str, sorted(map(str, map(str, stdin.split())))))\n    print(\"\".join(map(str, sorted(map(str, map(str, stdin.split())))))\n    print(\"\".join(map(str, sorted(map(str, map(str, stdin.split())))))\n    print(\"\".join(map(str, sorted(map(str, map(str, stdin.split())))))\n    print(\"\".join(map(str, sorted(map(str, map(str, stdin.split())))))\n    print(\"\".join(map(str, sorted(map(str, map(str, stdin.split())))))\n    print(\"\".join(map(str, sorted(map(str, map(str, stdin.split())))))\n    print(\"\".join(map(str, sorted(map(str, map(str, stdin.split())))))\n    print(\"\".join(map(str, sorted(map(str, map(str, stdin.split())))))\n    print(\"\".join(map(str, sorted(map(str, map(str, stdin.split())))))\n    print(\"\".join(map(str, sorted(map(str, map(str, stdin.split())))))\n    print(\"\".join(map(str, sorted(map(str, map(str, stdin.split())))))\n    print(\"\".join(map(str, sorted(map(str, map(str, stdin.split"
    },
    {
        "number": 4101,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[1])\n    m = int(stdin[2])\n    matrix = []\n    for _ in range(n):\n        matrix.append(list(map(int, stdin[3:3 + m])))\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] == 0:\n                matrix[i][j] = 1\n            else:\n                matrix[i][j] = 0\n    return ''.join(['1' if matrix[i][j] == 1 else '0' for i in range(n) for j in range(n)])"
    },
    {
        "number": 4101,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [list(map(int, stdin.split())) for _ in range(n)]\n    d = [[0]*m for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == 1:\n                d[i][j] = 1\n                for k in range(i-1, -1, -1):\n                    for l in range(j):\n                        d[k][l] = d[k][l] + d[k][l+1]\n                for k in range(j, m):\n                    for l in range(i):\n                        d[l][k] = d[l][k] + d[l+1][k]\n    ans = 'NO'\n    if d[0][0] == 0:\n        ans = 'YES'\n    else:\n        for i in range(m):\n            c = 0\n            for j in range(n):\n                c += d[j][i]\n            if c == 0:\n                ans = 'YES'\n                break\n    return ans\n"
    },
    {
        "number": 4101,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    matrix = [list(map(int, input())) for _ in range(n)]\n    i = 0\n    j = 0\n    while True:\n        if matrix[i][j] == 0:\n            break\n        if i == n - 1 and j == m - 1:\n            break\n        if matrix[i][j] == matrix[i + 1][j] == matrix[i + 2][j] == matrix[i + 3][j] == matrix[i + 4][j]:\n            return str(matrix[i][j])\n        elif matrix[i][j] == matrix[i + 1][j] == matrix[i + 2][j] == matrix[i + 3][j]:\n            matrix[i][j] = matrix[i + 1][j]\n            i += 1\n        elif matrix[i][j] == matrix[i + 1][j] == matrix[i + 2][j] == matrix[i + 3][j]:\n            matrix[i][j] = matrix[i + 1][j]\n            j += 1\n        elif matrix[i][j] == matrix[i + 1][j] == matrix[i + 2][j] == matrix[i + 3][j]:\n            matrix[i][j] = matrix[i + 1][j]\n            i += 1\n            j += 1\n        else:\n            i += 1\n            j += 1\n"
    },
    {
        "number": 4101,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [list(map(int, input().split())) for _ in range(n)]\n    sorted_a = sorted(a, key=lambda x: (x[0], x[1]))\n    for i in range(n):\n        for j in range(m):\n            if sorted_a[i][j]!= sorted_a[i][j + 1]:\n                return 'NO'\n    for i in range(n):\n        for j in range(m):\n            if sorted_a[i][j] == sorted_a[i][j + 1]:\n                sorted_a[i][j + 1] = 1\n            else:\n                sorted_a[i][j] = 0\n    for i in range(n):\n        for j in range(m):\n            if sorted_a[i][j] == 0:\n                return 'NO'\n            if sorted_a[i][j] == 1:\n                return 'YES'\n    return 'YES'\n"
    },
    {
        "number": 4101,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [[0] * m for _ in range(n)]\n    for _ in range(n):\n        a[_][0], a[_][1], a[_][m - 1] = 1, 0, 0\n    for _ in range(m):\n        a[_][0], a[_][m - 1] = 0, 1\n    for _ in range(n - 1):\n        a[_][m - 1], a[_][0] = 0, 1\n    print('YES' if solution(a) else 'NO')"
    },
    {
        "number": 4102,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input = [0] + stdin.split(' ')\n    x = []\n    y = []\n    for i in input[1::]:\n        x.append(int(i))\n        y.append(i)\n    x.sort()\n    y.sort()\n    return 'Yes' if x == y else 'No'\n\nSolution\n  conda\n    conda install -c conda-forge numpy\n    pip install numpy\n  numpy\n  conda install -c conda-forge numpy\n  pip install numpy\n\nconda install -c conda-forge numpy\nconda install -c conda-forge numpy\n"
    },
    {
        "number": 4102,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    answer = 'Yes'\n    return answer\n"
    },
    {
        "number": 4102,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    L = []\n    s = list(stdin)\n    for i in range(len(s)):\n        L.append(s[i])\n    L.reverse()\n    for i in range(len(s)):\n        L.append(s[i])\n    return ''.join(L)\n"
    },
    {
        "number": 4102,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    We start from the middle, we have to remove the digits\n    '''\n    string = str(stdin)[::-1]\n    return 'Yes' if string == list(string) else 'No'\n    '''\n    Time complexity : O(N)\n    Space complexity : O(1)\n    '''\n    \n    \n"
    },
    {
        "number": 4102,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(input())\n    a = [i for i in range(1, 10)]\n    b = []\n    \n    for i in range(n):\n        a = [i for i in input().strip()]\n        b.append(a)\n    \n    print(b)\n    \n    c = []\n    print(b)\n    for i in range(n):\n        c.append(b[i].count('0'))\n    \n    print(c)\n    \n    for i in range(n):\n        for j in range(n):\n            if b[i][j] == '1':\n                c[i] = c[i] + c[j]\n        \n    print(c)\n    \n    print(sum(c)/n)\n    return 'Yes' if sum(c)/n == n else 'No'\n"
    },
    {
        "number": 4102,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    L = list(map(int, stdin.split()))\n    count = 0\n    for i in range(1, N+1):\n        if L[i]!= L[i-1]:\n            count += 1\n    return 'Yes' if count < 2 else 'No'\n\ndef"
    },
    {
        "number": 4102,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = list(stdin.split())\n    if len(a)!= 1:\n        return 'No'\n    if len(a) == 1:\n        return 'Yes'\n    if a[0] in ['1','2','3','4','5','6','7','8','9','0']:\n        return 'Yes'\n    if a[0] in ['1','2','3','4','5','6','7','8','9']:\n        return 'No'\n    else:\n        return 'No'\n"
    },
    {
        "number": 4102,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    stack = []\n    \n    for ch in stdin:\n        if stack:\n            if ch.isdigit():\n                stack.append(int(ch))\n            else:\n                if stack and stack[-1] > int(ch):\n                    stack.append(int(ch))\n                else:\n                    stack.pop()\n        else:\n            stack.append(int(ch))\n    if stack:\n        return \"No\"\n    return \"Yes\"\n\n\nRuntime: 24 ms, faster than 39.53% of Python3 online submissions for Single Digit Number.\nMemory Usage: 13.3 MB, less than 9.37% of Python3 online submissions for Single Digit Number.\n\"\"\"\n\nclass Solution:\n    def singleNumbers(self, nums: List[int]) -> List[int]:\n        \n        sortedNum = sorted(nums)\n        \n        for i in range(len(sortedNum)-1):\n            if sortedNum[i] + sortedNum[i+1] == 10:\n                return [sortedNum[i], sortedNum[i+1]]\n        \n        return []"
    },
    {
        "number": 4102,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(s):\n        if len(s) < 3:\n            return False\n        num_str = s[0] * 10 + s[1]\n        if num_str.isdigit() and int(num_str) <= 9999:\n            return True\n        else:\n            return False\n\n    def search(s):\n        index = 0\n        for i in range(len(s)):\n            if not s[i].isdigit():\n                return False\n            else:\n                index = i\n        return True if index == 0 else search(s[:index]) or search(s[index:])\n\n    def solution(s):\n        for i in range(3, len(s)):\n            if not is_valid(s[:i]):\n                return False\n        return True\n\n    return solution(stdin)\n"
    },
    {
        "number": 4102,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    answer = ''\n    s = stdin\n    for i in range(1, 10):\n        if len(s) == i:\n            answer = \"Yes\"\n            break\n        s = s[:i]+'0'+s[i:]\n    return answer"
    },
    {
        "number": 4103,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    b,a,n = map(int,stdin.split())\n    s1,s2 = map(int,stdin.split())\n    s2 = s2-s1+1\n    s2 = max(s2,b)\n    s2 = max(s2,a)\n    s1 = s1-a+1\n    s1 = max(s1,b)\n    s1 = max(s1,a)\n    s1 = s1+s2\n    s1 = max(s1,b)\n    s1 = max(s1,a)\n    s1 = s1-s2+1\n    s1 = max(s1,b)\n    s1 = max(s1,a)\n    s1 = s1+s2\n    s1 = max(s1,b)\n    s1 = max(s1,a)\n    s1 = s1+s2\n    s1 = max(s1,b)\n    s1 = max(s1,a)\n    s1 = s1+s2\n    return str(s1)"
    },
    {
        "number": 4103,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a = list(map(int, stdin.split()))\n    s_1, s_2, s_3 = list(map(int, stdin.split()))\n    if n == 1:\n        s = 0\n        for i in range(1, s_1+1):\n            s += i\n        return s\n    if s_1 == 1:\n        s = 0\n        for i in range(1, s_2+1):\n            s += i\n        return s\n    if s_2 == 1:\n        s = 0\n        for i in range(1, s_3+1):\n            s += i\n        return s\n    if s_2 == 0:\n        s = 0\n        for i in range(1, s_3+1):\n            s += i\n        return s\n    if s_3 == 0:\n        s = 0\n        for i in range(1, s_1+1):\n            s += i\n        return s\n    if n == 0:\n        s = 0\n        for i in range(s_1+1):\n            s += i\n        return s\n    s = 0\n    for i in range(1, s_1+1):\n        if a == 1:\n            s += i\n        elif a == 0:\n            s += i\n        else:\n            s += b\n    return s\n\n\nfor i in range(int(input())):\n    n, b, a = list(map(int, input().split()))\n    s_1, s_2, s_3 = list(map(int, input().split()))\n    if n == 1:\n        s = 0\n        for i in range(1, s_1+1):\n            s += i\n        print(s)\n        continue\n    if s_1 == 1:\n        s = 0\n        for i in range(1, s_2+1):\n            s += i\n        print(s)\n        continue\n    if s_2 == 1:\n        s = 0\n        for i in range(1, s_3+1):\n            s += i\n        print(s)\n        continue\n    if s_2 == 0:\n        s = 0\n        for i in range(1, s_3+1):\n            s += i\n        print(s)\n        continue\n    if s_3 == 0:\n        s = 0\n        for i in range(1, s_1+1):\n            s += i\n        print(s)\n        continue\n    if s_3 == 0:\n        s = 0\n        for i in range(1, s_1+1):\n            s += i\n        print(s)\n        continue\n    if s_1 == 0:\n        s = 0\n        for i in range(s_2+1):\n            s += i\n        print(s)\n        continue\n    s = 0\n    for i in range(1, s_1+1):\n        if a == 1:\n            s += i\n        elif a == 0:\n            s += i\n        else:\n            s += b\n    print(s)\n"
    },
    {
        "number": 4103,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, b, a = map(int, stdin.split())\n    return str(max(sum(map(lambda x: int(x == '1') * (int(x == '1') * x + (int(x == '0') * x) + 1), range(1, N + 1)))) * b) + \"-\" + str(max(sum(map(lambda x: int(x == '1') * (int(x == '0') * x + (int(x == '1') * x) + 1), range(1, N + 1)))) * a)\n\ndef"
    },
    {
        "number": 4103,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    b = int(stdin[0])\n    a = int(stdin[1])\n    if n == 0:\n        return '1'\n    elif n == 1:\n        return str(a)\n    else:\n        s = 0\n        s_i = 1\n        b_i = 0\n        while s < 2 * n:\n            b_i = b_i + 1\n            s = s + 1\n            s_i = s_i + 1\n            if s == 2 * n:\n                b_i = b_i - 1\n                s = s + 1\n                s_i = s_i + 1\n            if s_i == 2 * n:\n                s_i = s_i - 1\n                s = s + 1\n            if s_i == 2 * n:\n                s_i = s_i - 1\n                s = s + 1\n        return str(b_i)\n\nprint(solution(\"5 2 1\"))\nprint(solution(\"6 2 1\"))\nprint(solution(\"6 3 2\"))\nprint(solution(\"6 4 2\"))\n"
    },
    {
        "number": 4103,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nExample 1:\n\nInput:\n\nn = 5\nb = 2\na = 1\ns = [1, 0, 0, 0, 0]\n\nOutput:\n\n3\n\nExplanation:\n\nThe robot can go through the segments [1, 2, 3, 4, 5], which can be passed through the battery, and charge levels become $b=2$ and $a=0$. The remaining segments can be passed through the accumulator, which can be used to save the battery capacity.\n\nExample 2:\n\nInput:\n\nn = 6\nb = 1\na = 1\ns = [0, 0, 0, 1, 0, 0]\n\nOutput:\n\n1\n\nExplanation:\n\nThe robot can go through the segments [0, 1, 2, 3, 4, 5], which can be passed through the accumulator, and charge levels become $b=1$ and $a=0$. The remaining segments can be passed through the battery, which can be used to save the accumulator capacity.\n\"\"\"\n\nclass Solution:\n    def solution(self, n, b, a):\n        s=sorted(b,reverse=True)\n        b=s[:len(s)-1]\n        a=s[len(s)-1]\n        m=0\n        while b or a or s:\n            if b:\n                m=max(m,b[0])\n                b.pop(0)\n            if a:\n                m=max(m,a[0])\n                a.pop(0)\n            if s:\n                if m<s[0]:\n                    m=s[0]\n                s.pop(0)\n        return m\n        \n"
    },
    {
        "number": 4103,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a = map(int, stdin.split())\n    s = list(map(int, stdin.split()))\n    # print(n, b, a, s)\n    def get_count(n, b, a):\n        c = 0\n        for i in range(n):\n            if s[i] == 1:\n                c += b\n            elif s[i] == 0:\n                c -= a\n            else:\n                c += 1\n        return c\n    if b+a == 0:\n        return str(0)\n    if b > 0 and a == 0:\n        return str(b)\n    if b == 0:\n        return str(b-a)\n    ans = b\n    for i in range(n-2):\n        if s[i]!= s[i+1] and s[i]!= s[i+2]:\n            ans = max(ans, get_count(i+1, b, a) - get_count(i, b, a))\n    ans = max(ans, b-a)\n    return str(ans)\n\n-----Constraints-----\n\n0 <= n <= 100\n\n0 <= s[i] <= 1\n\n0 <= b, a < 100\n\n0 <= n <= 10000\n\n-----Time Limit-----\n\nO(n)\n\nNOTE:\n\nIf the robot runs out of battery, the maximum number of segments the robot can pass will be zero, i.e., the robot will be in a terminal state.\n\"\"\"\n\nfrom sys import stdin\nfrom collections import Counter\n\nclass Robot:\n    def __init__(self, pos, battery, accumulator):\n        self.pos = pos\n        self.battery = battery\n        self.accumulator = accumulator\n        self.queue = []\n\n    def go(self, battery):\n        if not battery or battery < 0:\n            return\n        self.queue.append(battery)\n        for i in self.queue:\n            self.pos[i] = self.pos[i-1]\n        self.battery -= battery\n        self.queue.sort()\n        self.pos[battery] = battery\n        self.battery = battery + 1\n        if not self.queue:\n            self.accumulator += battery\n            return\n        for i in self.queue:\n            self.pos[i] = i\n            self.queue[self.queue.index(i)] = i\n            self.battery -= 1\n        self.queue.sort()\n        self.battery = self.battery + 1\n        if not self.queue:\n            self.accumulator += battery\n            return\n        for i in range(len(self.queue)-1, -1, -1):\n            self.pos[self.queue[i]] = self.pos[self.queue[i]-1]\n            self.battery -= 1\n        self.queue.pop()\n        self.battery = self.battery - 1\n\ndef"
    },
    {
        "number": 4103,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a = map(int, stdin.split())\n    for _ in range(n):\n        s1, s2, d = map(int, stdin.split())\n        if d == 0:\n            b -= 1\n        if d == 1:\n            a -= 1\n        if s2 > s1:\n            s2, s1 = s1, s2\n        print(abs(s1 - s2) + abs(b - a))"
    },
    {
        "number": 4103,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a = list(map(int, stdin.split()))\n    s1 = [0] * (n - 1)\n    s2 = [0] * (n - 1)\n    s3 = [0] * (n - 1)\n    s4 = [0] * (n - 1)\n    s5 = [0] * (n - 1)\n    for i in range(1, n - 1):\n        s1[i - 1] = b + a * (i - 1)\n        s2[i - 1] = b\n        s3[i - 1] = a\n        s4[i - 1] = a\n        s5[i - 1] = a\n    for i in range(0, n - 2, 1):\n        if s2[i] <= s3[i]:\n            s1[i + 1] = s2[i]\n        else:\n            s1[i + 1] = s3[i]\n        if s3[i] <= s4[i]:\n            s2[i + 1] = s3[i]\n        else:\n            s2[i + 1] = s4[i]\n        if s4[i] <= s5[i]:\n            s3[i + 1] = s4[i]\n        else:\n            s3[i + 1] = s5[i]\n    for i in range(0, n - 2, 1):\n        if s1[i] <= s1[i + 1]:\n            s1[i + 1] = s1[i]\n        else:\n            s1[i + 1] = s1[i + 1]\n    s = s1[n - 1]\n    if s >= 0:\n        return str(s)\n    else:\n        return '-'\n"
    },
    {
        "number": 4103,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a = map(int, stdin.split())\n    s1 = list(map(int, stdin.split()))\n    s2 = list(map(int, stdin.split()))\n    i = 0\n    s = 0\n    for s in range(n):\n        if s1[s] == 1:\n            i += 1\n        elif s2[s] == 1:\n            i -= 1\n        elif s == 0 and s1[s] == 0:\n            i -= 1\n        elif s == 0 and s2[s] == 0:\n            i += 1\n        elif s == n - 1 and s1[s] == 0:\n            i -= 1\n        else:\n            i -= 1\n        s += s1[s]*2\n        s += s2[s]*2\n        s += a\n    return str(i)\n\n\"\"\"\ndef"
    },
    {
        "number": 4103,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a = list(map(int, stdin.split()))\n    \n    result = 0\n    \n    def sol():\n        nonlocal result\n        result += 1\n        if b < a:\n            b, a = a, b\n        if b == 0:\n            return -1\n        elif a == 0:\n            return -1\n        else:\n            s1 = b // a\n            s2 = a // b\n            if s1 == 1 and s2 == 1:\n                return -1\n            elif s1 == 1:\n                return sol()\n            elif s2 == 1:\n                return sol()\n            else:\n                sol()\n                return -1\n    \n    print(sol())\n    return str(result)"
    },
    {
        "number": 4104,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    exp = list(map(int, stdin.split('+')[1:]))\n    exp.sort(reverse = True)\n    print(sum(exp)%1000000)\n    return str(sum(exp)%1000000)\n    \n    \n\n-----Constraints-----\n1 <= len(exp) <= 10^5\n0 <= exp[i] <= 255\n\n-----Time Limit-----\nYou can run your implementation in between 1 and 10 minutes.\n\n\n\n\"\"\"\n\nimport time\n\ndef"
    },
    {
        "number": 4104,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    answer = ''\n    s = [int(i) for i in stdin.split('+')]\n    while len(s) > 1:\n        temp = 0\n        for i in range(len(s) - 1):\n            temp += s[i] * s[i + 1]\n        answer = str(temp)\n        s.pop(0)\n        s.pop(0)\n    return answer\n"
    },
    {
        "number": 4104,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.split(\" \")[0])\n    b = int(stdin.split(\" \")[1])\n    c = int(stdin.split(\" \")[2])\n    d = int(stdin.split(\" \")[3])\n    e = int(stdin.split(\" \")[4])\n    f = int(stdin.split(\" \")[5])\n    g = int(stdin.split(\" \")[6])\n    h = int(stdin.split(\" \")[7])\n    print(str(a+b+c+d+e+f+g+h))\n    return str(a+b+c+d+e+f+g+h)"
    },
    {
        "number": 4104,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = input()\n    if len(s) == 2:\n        l = list(s)\n        a, b = l[0], l[1]\n        c = []\n        for i in range(len(a)):\n            if a[i] == '-':\n                c.append(c.pop() + a[i + 1])\n            elif a[i] == '+':\n                c.append(c.pop() + a[i + 1])\n            else:\n                c.append(c.pop() - a[i])\n        c = ''.join(c)\n        return int(c)\n    return int(s)\n    \n    "
    },
    {
        "number": 4104,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def eval_expr(op, a, b):\n        return eval(op)\n    \n    def eval_expr_rec(op, a, b):\n        if op == '+':\n            return a + b\n        elif op == '-':\n            return a - b\n        else:\n            raise SyntaxError\n    \n    def solve(expr):\n        if expr.count('+') >= 2:\n            return eval_expr_rec('+', eval_expr(expr[0], eval_expr(expr[1], eval_expr(expr[2], eval_expr(expr[3], eval_expr(expr[4], eval_expr(expr[5], eval_expr(expr[6], eval_expr(expr[7], eval_expr(expr[8], eval_expr(expr[9], eval_expr(expr[10], eval_expr(expr[11], eval_expr(expr[12], eval_expr(expr[13], eval_expr(expr[14], eval_expr(expr[15], eval_expr(expr[16], eval_expr(expr[17], eval_expr(expr[18], eval_expr(expr[19], eval_expr(expr[20], eval_expr(expr[21], eval_expr(expr[22], eval_expr(expr[23], eval_expr(expr[24], eval_expr(expr[25], eval_expr(expr[26], eval_expr(expr[27], eval_expr(expr[28], eval_expr(expr[29], eval_expr(expr[30], eval_expr(expr[31], eval_expr(expr[32], eval_expr(expr[33], eval_expr(expr[34], eval_expr(expr[35], eval_expr(expr[36], eval_expr(expr[37], eval_expr(expr[38], eval_expr(expr[39], eval_expr(expr[40], eval_expr(expr[41], eval_expr(expr[42], eval_expr(expr[43], eval_expr(expr[44], eval_expr(expr[45], eval_expr(expr[46], eval_expr(expr[47], eval_expr(expr[48], eval_expr(expr[49], eval_expr(expr[50], eval_expr(expr[51], eval_expr(expr[52], eval_expr(expr[53], eval_expr(expr[54], eval_expr(expr[55], eval_expr(expr[56], eval_expr(expr[57], eval_expr(expr[58], eval_expr(expr[59], eval_expr(expr[60], eval_expr(expr[61], eval_expr(expr[62], eval_expr(expr[63], eval_expr(expr[64], eval_expr(expr[65], eval_expr(expr[66], eval_expr(expr[67], eval_expr(expr[68], eval_expr(expr[69], eval_expr(expr[70], eval_expr(expr[71], eval_expr(expr[72], eval_expr(expr[73], eval_expr(expr[74], eval_expr(expr[75], eval_expr(expr[76], eval_expr(expr[77], eval_expr(expr[78], eval_expr(expr[79], eval_expr(expr[80], eval_expr(expr[81], eval_expr(expr[82], eval_expr(expr[83], eval_expr(expr[84], eval_expr(expr[85], eval_expr(expr[86], eval_expr(expr[87], eval_expr(expr[88], eval_expr(expr[89], eval_expr(expr[90], eval_expr(expr[91], eval_expr(expr[92], eval_expr(expr[93], eval_expr(expr[94], eval_expr(expr[95], eval_expr(expr[96], eval_expr(expr[97], eval_expr(expr[98], eval_expr(expr[99], eval_expr(expr[100], eval_expr(expr[101], eval_expr(expr[102], eval_expr(expr[103], eval_expr(expr[104], eval_expr(expr[105], eval_expr(expr[106], eval_expr(expr[107], eval_expr(expr[108], eval_expr(expr[109], eval_expr(expr[110], eval_expr(expr[111], eval_expr(expr[112], eval_expr(expr[113], eval_expr(expr[114], eval_expr(expr[115], eval_expr(expr[116], eval_expr(expr[117], eval_expr(expr[118], eval_expr(expr[119], eval_expr(expr[120], eval_expr(expr[121], eval_expr(expr[122], eval_expr(expr[123], eval_expr(expr[124], eval_expr(expr[125], eval_expr(expr[126], eval_expr(expr[127], eval_expr(expr[128], eval_expr(expr[129], eval_expr(expr[130], eval_expr(expr[131], eval_expr(expr[132], eval_expr(expr[133], eval_expr(expr[134], eval_expr(expr[135], eval_expr(expr[136], eval_expr(expr[137], eval_expr(expr[138], eval_expr(expr[139], eval_expr(expr[140], eval_expr(expr[141], eval_expr(expr[142], eval_expr(expr[143], eval_expr(expr[144], eval_expr(expr[145], eval_expr(expr[146], eval_expr(expr[147], eval_expr(expr[148], eval_expr(expr[149], eval_expr(expr[150], eval_expr(expr[151], eval_expr(expr[152], eval_expr(expr[153], eval_expr(expr[154], eval_expr(expr[155], eval_expr(expr[156], eval_expr(expr[157], eval_expr(expr[158], eval_expr(expr[159], eval_expr(expr[160], eval_expr(expr[161], eval_expr(expr[162], eval_expr(expr[163], eval_expr(expr[164], eval_expr(expr[165], eval_expr(expr[166], eval_expr(expr[167], eval_expr(expr[168], eval_expr(expr[169], eval_expr(expr[170], eval_expr(expr[171], eval_expr(expr[172], eval_expr(expr[173], eval_expr(expr[174], eval_expr(expr[175], eval_expr(expr[176], eval_expr(expr[177], eval_expr(expr[178], eval_expr(expr[179], eval_expr(expr[180], eval_expr(expr[181], eval_expr(expr[182], eval_expr(expr[183], eval_expr(expr[184], eval_expr(expr[185], eval_expr(expr[186], eval_expr(expr[187], eval_expr(expr[188], eval_expr(expr[189], eval_expr(expr[190], eval_expr(expr[191], eval_expr(expr[192], eval_expr(expr[193], eval_expr(expr[194], eval_expr(expr[195], eval_expr(expr[196], eval_expr(expr[197], eval_expr(expr[198], eval_expr(expr[199], eval_expr(expr[200], eval_expr(expr[201], eval_expr(expr[202], eval_expr(expr[203], eval_expr(expr[204], eval_expr(expr[205], eval_expr(expr[206], eval_expr(expr[207], eval_expr(expr[208], eval_expr(expr[209], eval_expr(expr[210], eval_expr(expr[211], eval_expr(expr[212], eval_expr(expr[213], eval_expr(expr[214], eval_expr(expr[215], eval_expr(expr[216], eval_expr(expr[217], eval_expr(expr["
    },
    {
        "number": 4104,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(i) for i in stdin.split('+')]\n    b = [int(i) for i in stdin.split('-')]\n    l = len(a)\n    ret = 0\n    for i in range(l):\n        if a[i]!= b[i]:\n            ret += 1\n    return str(ret)\n"
    },
    {
        "number": 4104,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    list = stdin.split(\"-\")\n    operand1 = int(list[0])\n    operand2 = int(list[1])\n    operand3 = int(list[2])\n    operand4 = int(list[3])\n    operand5 = int(list[4])\n    operand6 = int(list[5])\n    operand7 = int(list[6])\n    operand8 = int(list[7])\n\n    result = 0\n    if (operand1 + operand2 + operand3 + operand4 + operand5 + operand6 + operand7 + operand8) % 10 == 0:\n        result = operand1 + operand2 + operand3 + operand4 + operand5 + operand6 + operand7 + operand8\n    elif (operand1 + operand2 + operand3 + operand4 + operand5 + operand6 + operand7 + operand8) % 10 == 1:\n        result = (operand1 + operand2 + operand3 + operand4 + operand5 + operand6 + operand7 + operand8) % 10\n    else:\n        result = -1\n\n    return str(result)\n\n\n\nTestcase 1\nInput\n8-7+6-5+4-3+2-1-0\nOutput\n4\n\nInput\n2+2\nOutput\n-46\n\nInput\n112-37\nOutput\n375\ndef"
    },
    {
        "number": 4104,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    operations = []\n    for _ in range(len(stdin)):\n        expression = stdin[len(_):]\n        operations.append(eval(expression))\n    return str(sum(operations))"
    },
    {
        "number": 4104,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    return str(eval(stdin))"
    },
    {
        "number": 4104,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    str1 = stdin.split()\n    opr1 = str1[0]\n    opr2 = str1[1]\n    opr3 = str1[2]\n    opr4 = str1[3]\n    opr5 = str1[4]\n    opr6 = str1[5]\n    opr7 = str1[6]\n    opr8 = str1[7]\n    opr9 = str1[8]\n    opr10 = str1[9]\n    \n    if opr1 == \"+\" and opr2 == \"-\":\n        result = eval(opr3 + opr4 + opr5 + opr6 + opr7 + opr8 + opr9 + opr10)\n        print(result)\n        return str(result)\n    elif opr1 == \"*\" and opr2 == \"/\":\n        result = eval(opr3 + opr4 + opr5 + opr6 + opr7 + opr8 + opr9 + opr10)\n        print(result)\n        return str(result)\n    elif opr1 == \"-\" and opr2 == \"+\":\n        result = eval(opr3 + opr4 + opr5 + opr6 + opr7 + opr8 + opr9 + opr10)\n        print(result)\n        return str(result)\n    elif opr1 == \"-\" and opr2 == \"*\":\n        result = eval(opr3 + opr4 + opr5 + opr6 + opr7 + opr8 + opr9 + opr10)\n        print(result)\n        return str(result)\n    elif opr1 == \"-\" and opr2 == \"-\":\n        result = eval(opr3 + opr4 + opr5 + opr6 + opr7 + opr8 + opr9 + opr10)\n        print(result)\n        return str(result)\n    elif opr1 == \"-\" and opr2 == \"/\":\n        result = eval(opr3 + opr4 + opr5 + opr6 + opr7 + opr8 + opr9 + opr10)\n        print(result)\n        return str(result)\n    elif opr1 == \"*\" and opr2 == \"/\":\n        result = eval(opr3 + opr4 + opr5 + opr6 + opr7 + opr8 + opr9 + opr10)\n        print(result)\n        return str(result)\n    elif opr1 == \"/\" and opr2 == \"+\":\n        result = eval(opr3 + opr4 + opr5 + opr6 + opr7 + opr8 + opr9 + opr10)\n        print(result)\n        return str(result)\n    elif opr1 == \"/\" and opr2 == \"*\":\n        result = eval(opr3 + opr4 + opr5 + opr6 + opr7 + opr8 + opr9 + opr10)\n        print(result)\n        return str(result)\n    elif opr1 == \"/\" and opr2 == \"-\":\n        result = eval(opr3 + opr4 + opr5 + opr6 + opr7 + opr8 + opr9 + opr10)\n        print(result)\n        return str(result)\n    elif opr1 == \"/\" and opr2 == \"-\":\n        result = eval(opr3 + opr4 + opr5 + opr6 + opr7 + opr8 + opr9 + opr10)\n        print(result)\n        return str(result)\n    elif opr1 == \"*\" and opr2 == \"*\":\n        result = eval(opr3 + opr4 + opr5 + opr6 + opr7 + opr8 + opr9 + opr10)\n        print(result)\n        return str(result)\n    elif opr1 == \"*\" and opr2 == \"/\":\n        result = eval(opr3 + opr4 + opr5 + opr6 + opr7 + opr8 + opr9 + opr10)\n        print(result)\n        return str(result)\n    elif opr1 == \"/\" and opr2 == \"*\":\n        result = eval(opr3 + opr4 + opr5 + opr6 + opr7 + opr8 + opr9 + opr10)\n        print(result)\n        return str(result)\n    elif opr1 == \"/\" and opr2 == \"/\":\n        result = eval(opr3 + opr4 + opr5 + opr6 + opr7 + opr8 + opr9 + opr10)\n        print(result)\n        return str(result)\n    elif opr1 == \"*\" and opr2 == \"*\":\n        result = eval(opr3 + opr4 + opr5 + opr6 + opr7 + opr8 + opr9 + opr10)\n        print(result)\n        return str(result)\n    elif opr1 == \"/\" and opr2 == \"/\":\n        result = eval(opr3 + opr4 + opr5 + opr6 + opr7 + opr8 + opr9 + opr10)\n        print(result)\n        return str(result)\n    elif opr1 == \"*\" and opr2 == \"*\":\n        result = eval(opr3 + opr4 + opr5 + opr6 + opr7 + opr8 + opr9 + opr10)\n        print(result)\n        return str(result)\n    elif opr1 == \"*\" and opr2 == \"*\":\n        result = eval(opr3 + opr4 + opr5 + opr6 + opr7 + opr8 + opr9 + opr10)\n        print(result)\n        return str(result)\n    elif opr1 == \"/\" and opr2 == \"*\":\n        result = eval(opr3 + opr4 + opr5 + opr6 + opr7 + opr8 + opr9 + opr10)\n        print(result)\n        return str(result)\n    elif opr1 == \"/\" and opr2 == \"/\":\n        result = eval(opr3 + opr4 + opr5 + opr6 + opr7 + opr8 + opr9 + opr10)\n        print(result)\n        return str(result)\n    elif opr1 == \"*\" and opr2 == \"*\":\n        result = eval(opr3 + opr4 + opr5 + opr6 + opr7 + opr8 + opr9 + opr10)\n        print(result)\n        return str(result)\n    elif opr1 == \"*\" and opr2 == \"/\":\n        result = eval(opr3 + opr4 + opr5 + opr6 + opr7 + opr8 + opr9 + opr10)\n        print(result)\n        return str(result)\n    elif opr1 == \"/\" and opr2 == \"/\":\n        result = eval(opr3 + opr4 + opr5 + opr6 + opr7 + opr8 + opr9 + opr10)\n        print(result)\n        return str(result)\n    elif opr1 == \"*\" and opr2 == \"*\":\n        result = eval(opr3 + opr4 + opr5 + opr6 + opr7 + opr8 + opr9 + opr10)\n        print(result)\n        return str(result)\n    elif opr1 == \"/\" and opr2 == \"*"
    },
    {
        "number": 4105,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4105,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    colors = [0, 0, 0, 0]\n    for line in stdin:\n        colors[line.split()[0]] = 1\n    colors[1] = 2\n    colors[2] = 2\n    for i in range(3, len(colors)):\n        if colors[i] == 0:\n            colors[i] = 1\n    for i in range(0, 3):\n        if colors[i] == 1:\n            colors[i] = 0\n    for i in range(3, len(colors)):\n        if colors[i] == 2:\n            colors[i] = 0\n    print(colors.index(1))\n"
    },
    {
        "number": 4105,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    m = n - 1\n    g = k\n    for i in range(m + 1):\n        for j in range(m - i):\n            g_i = g % 2\n            b_i = stdin[i]\n            g_j = g // 2\n            b_j = stdin[j]\n            g_k = g // 3\n            if (b_i, g_i)!= (b_j, g_j) or (b_i, g_j)!= (b_j, g_k):\n                return \"NO\"\n            b_i = b_i % 2\n            b_j = b_j % 2\n            g_i = g_i % 2\n            g_j = g_j % 2\n            g_k = g_k % 2\n            if b_i!= b_j or b_i!= g_i or b_j!= g_j or b_i!= g_k:\n                return \"NO\"\n            g = g // 3\n    return \"YES\""
    },
    {
        "number": 4105,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    t, p = list(map(str, range(1, n + 1, 2)))\n    i = 0\n    answer = ''\n    while i < n:\n        colors = [t[k + 1 - i], t[k + 2 - i]]\n        if colors == p:\n            answer += \"YES\"\n            break\n        if colors not in p:\n            answer += \"NO\"\n            break\n        i += 1\n    return answer\n\n-----Constraints-----\n1 <= n <= 10^5\n0 <= k <= 10^5\n0 <= i <= n\n\n-----Time Limit 1:00.000 seconds per testcase.\n\n-----Memory Limit: 15.00 MB per testcase.\n\n-----Testcase Example:\ninput:\n4 3\n\noutput:\nYES\n2 1\n1 3\n3 2\n2 3\n3 2\n3 4\n3 1\n3 4\n4 1\n1 4\n4 2\n4 3\n4 2\n4 1\n1 4\n\ninput:\n3 3\n\noutput:\nNO\n'''\n\nimport math\ndef"
    },
    {
        "number": 4105,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[-1])\n    k = int(stdin.split()[-2])\n    pairs = [list(map(int, input().split())) for _ in range(n)]\n    s = set([pair[0] for pair in pairs])\n    if len(s)!= 2*k:\n        return \"NO\"\n    color = [i for i in range(1, k+1)]\n    gcolor = [i for i in range(1, k+1)]\n    for i in range(n):\n        for j in range(i+1, n):\n            color[pairs[i][0] - 1] = pairs[i][1]\n            gcolor[pairs[i][1] - 1] = pairs[j][0]\n            if color!= color:\n                color = list(map(str, color))\n                color = list(set(color))\n                color = \"\".join(color)\n                break\n            else:\n                gcolor = list(map(str, gcolor))\n                gcolor = list(set(gcolor))\n                gcolor = \"\".join(gcolor)\n                break\n    return \"YES\" + color + gcolor\n"
    },
    {
        "number": 4105,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    answer = ''\n    \n    if n<k:\n        return 'NO'\n    \n    color = [list(map(int, stdin.split())) for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            for k in range(n):\n                if color[i][j]==color[k][j]:\n                    answer += 'YES'\n                    break\n            else:\n                answer += 'NO'\n    return answer\n"
    },
    {
        "number": 4105,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    colors = []\n    for _ in range(n):\n        colors.append(tuple(map(int, stdin.split())))\n    \n    dice = [0] * k\n    for color in colors:\n        dice[color[0]] = dice[color[1]] + color[2]\n        dice[color[1]] = dice[color[0]] + color[2]\n    \n    for i in range(n - 1):\n        if dice[i] >= k:\n            continue\n        if i + 1 < n:\n            if dice[i + 1] >= k:\n                continue\n            if dice[i] == 0:\n                dice[i + 1] += dice[i]\n        \n    for i in range(n - 1):\n        if dice[i] == 0:\n            continue\n        if i + 1 < n:\n            if dice[i + 1] >= k:\n                continue\n            if dice[i] == 0:\n                dice[i + 1] += dice[i]\n        \n    if len(colors) > 1:\n        print(\"NO\")\n    else:\n        print(\"YES\")\n        print(*colors)\n    return\n"
    },
    {
        "number": 4105,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n\n    if (not all(map(lambda x: x <= k, range(1, n + 1)))) or (not all(map(lambda x: x <= k, range(n, 2 * n)))):\n        return \"NO\"\n    else:\n        return \"YES\""
    },
    {
        "number": 4105,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    ans = ''\n    for i in range(n):\n        if i % 2:\n            ans += 'YES'\n        else:\n            ans += 'NO'\n    return ans\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4105,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    lst = []\n    for i in range(n):\n        temp = list(map(int, stdin.split()))\n        lst.append(temp)\n    dictionary = {}\n    for i in range(k):\n        for j in range(len(lst)-1):\n            if lst[j][i] not in dictionary.keys():\n                dictionary[lst[j][i]] = lst[j][i+1]\n            else:\n                dictionary[lst[j][i]] = lst[j][i+1]\n    dictionary = sorted(dictionary.items(), key=lambda k: k[1], reverse=True)\n    for key, value in dictionary:\n        print(key, value)\n    return \"YES\"\n\nExplanation\nInput\n4 3\n\nOutput\nYES\n3 1\n1 3\n3 2\n2 3\n\nInput\n10 4\n\nOutput\nYES\n2 1\n1 3\n4 2\n3 4\n4 3\n3 2\n2 4\n4 1\n1 4\n3 1\n\nInput\n13 4\n\nOutput\nNO\ndef"
    },
    {
        "number": 4106,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n,k,x = map(int,stdin.split())\n    avg_b = sum(map(int,stdin.split()))/n\n    numbers = list(range(1,n+1))\n    length_0 = 0\n    length_1 = 0\n    for i in numbers:\n        if x - avg_b <= length_0:\n            length_0 = x - avg_b\n            length_1 = i\n        else:\n            length_0 = x - avg_b\n            length_1 = i\n        if length_0 - length_1 < k:\n            length_0 = length_1\n            length_1 = i\n        else:\n            continue\n        break\n    if length_0 < k:\n        return str(0)\n    if length_1 < k:\n        return str(0)\n    return str(numbers.index(length_1) + 1)\n\"\"\"\n\ndef"
    },
    {
        "number": 4106,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = [int(i) for i in stdin.split()]\n    list_n = []\n    for i in range(1,n):\n        list_n.append(i)\n    list_k = []\n    for i in range(1,k+1):\n        list_k.append(i)\n    list_x = []\n    for i in range(1,x+1):\n        list_x.append(i)\n    ans = 0\n    for i in range(1,n):\n        if i not in list_k and i not in list_n:\n            ans += abs(i-x)\n    for i in range(1,n):\n        if i not in list_k and i not in list_n and i not in list_x:\n            ans += abs(i-x)\n    if ans == 0:\n        print(-1)\n    else:\n        print(ans)"
    },
    {
        "number": 4106,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split())\n    a = map(int, stdin.split())\n    lst = []\n    for i in range(k):\n        if a[i] == 1:\n            lst.append(i)\n        if len(lst) == n:\n            return max(lst)\n        if len(lst) >= n:\n            break\n    if len(lst) >= n:\n        return max(lst)\n    \n    "
    },
    {
        "number": 4106,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    n = a[0]\n    k = a[1]\n    x = a[2]\n    b = a[3:n + 1]\n    c = a[n + 1 :]\n    x_b = sum(b)\n    x_c = sum(c)\n    if x_b == x_c:\n        return -1\n    if x_b + x_c < x_b + x_c + x:\n        return -1\n    x_b = x_b - x_c\n    for i in range(k):\n        a_i = a[i + 1]\n        if x_b < a_i:\n            x_b = a_i - x\n        if x_b + x_c < a_i + x_b:\n            x_b = a_i + x_b - x_c\n    if x_b == x_c:\n        return -1\n    if x_b + x_c < x_b + x_c + x:\n        return -1\n    return x_b + x_c\n"
    },
    {
        "number": 4106,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split()]\n    x = [int(i) for i in stdin.split()]\n    a = []\n    for i in range(n):\n        a.append(int(x[i]))\n    a = sorted(a)\n    for i in range(k-1):\n        if a[i+1] - a[i] < 0:\n            return -1\n    answer = 0\n    for i in range(n-1):\n        if a[i] - a[i+1] < 0:\n            answer += (a[i+1] - a[i]) * (n-i-1)\n            answer += 1\n        else:\n            answer += a[i] - a[i+1]\n    return answer\n"
    },
    {
        "number": 4106,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    arr = []\n    for i in range(n):\n        arr.append(int(stdin.strip()))\n    \n    k = int(stdin.strip())\n    a_sum = 0\n    for i in range(len(arr)):\n        if a_sum < arr[i]:\n            a_sum = arr[i]\n        elif a_sum == arr[i]:\n            a_sum = arr[i] + 1\n    \n    if a_sum == n:\n        print(a_sum)\n    else:\n        print(-1)"
    },
    {
        "number": 4106,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    res = 0\n    a_1 = 1\n    a_2 = 2\n    for i in range(n):\n        m = int(stdin.strip())\n        res += min(a_1, a_2) * m\n        if m >= 1:\n            a_1 = a_2 + 1\n        else:\n            a_2 = a_1 + 1\n    if res >= 10**9:\n        return str(res)\n    else:\n        return str(res)\n"
    },
    {
        "number": 4106,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = list(map(int, stdin.split()))\n    beauty_vals = list(map(int, list(stdin.split())))\n    \n    beauty_vals.sort()\n    beauty_vals = set(beauty_vals)\n    \n    q = []\n    \n    for i in range(n):\n        if x == 0:\n            break\n        if len(q) == 0:\n            if k == 1:\n                x -= 1\n            else:\n                x -= 1\n                beauty_vals.remove(x)\n        else:\n            if k == 1:\n                if x in q:\n                    q.remove(x)\n                    x = 0\n            else:\n                q.remove(x)\n                x -= 1\n                beauty_vals.remove(x)\n    \n    if len(q) == 0:\n        return '0'\n    else:\n        return '-1'\n    \n    \n"
    },
    {
        "number": 4106,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    # n = stdin[0]\n    # k = stdin[1]\n    # x = stdin[2]\n    \n    # if n < k or n % 2 == 1:\n    #     return -1\n    # if k % 2 == 1:\n    #     return -1\n    \n    # x = x % 10\n    \n    # if n == k:\n    #     return x\n    \n    # if (n // 2) % 2 == 1:\n    #     return -1\n    \n    # if n % 2 == 0:\n    #     return -1\n    \n    # n = int(n / 2)\n    # k = int(k / 2)\n    # x = int(x / 10)\n    \n    # if n == k:\n    #     return x\n    \n    # if (n // 2) % 2 == 1:\n    #     return -1\n    \n    # if n % 2 == 0:\n    #     return -1\n    \n    # n = int(n / 2)\n    # k = int(k / 2)\n    # x = int(x / 10)\n    \n    # if n == k:\n    #     return x\n    \n    # if (n // 2) % 2 == 1:\n    #     return -1\n    \n    # if n % 2 == 0:\n    #     return -1\n    \n    # n = int(n / 2)\n    # k = int(k / 2)\n    # x = int(x / 10)\n    \n    # if n == k:\n    #     return x\n    \n    # if (n // 2) % 2 == 1:\n    #     return -1\n    \n    # if n % 2 == 0:\n    #     return -1\n    \n    # n = int(n / 2)\n    # k = int(k / 2)\n    # x = int(x / 10)\n    \n    # if n == k:\n    #     return x\n    \n    # if (n // 2) % 2 == 1:\n    #     return -1\n    \n    # if n % 2 == 0:\n    #     return -1\n    \n    # n = int(n / 2)\n    # k = int(k / 2)\n    # x = int(x / 10)\n    \n    # if n == k:\n    #     return x\n    \n    # if (n // 2) % 2 == 1:\n    #     return -1\n    \n    # if n % 2 == 0:\n    #     return -1\n    \n    # n = int(n / 2)\n    # k = int(k / 2)\n    # x = int(x / 10)\n    \n    # if n == k:\n    #     return x\n    \n    # if (n // 2) % 2 == 1:\n    #     return -1\n    \n    # if n % 2 == 0:\n    #     return -1\n    \n    # n = int(n / 2)\n    # k = int(k / 2)\n    # x = int(x / 10)\n    \n    # if n == k:\n    #     return x\n    \n    # if (n // 2) % 2 == 1:\n    #     return -1\n    \n    # if n % 2 == 0:\n    #     return -1\n    \n    # n = int(n / 2)\n    # k = int(k / 2)\n    # x = int(x / 10)\n    \n    # if n == k:\n    #     return x\n    \n    # if (n // 2) % 2 == 1:\n    #     return -1\n    \n    # if n % 2 == 0:\n    #     return -1\n    \n    # n = int(n / 2)\n    # k = int(k / 2)\n    # x = int(x / 10)\n    \n    # if n == k:\n    #     return x\n    \n    # if (n // 2) % 2 == 1:\n    #     return -1\n    \n    # if n % 2 == 0:\n    #     return -1\n    \n    # n = int(n / 2)\n    # k = int(k / 2)\n    # x = int(x / 10)\n    \n    # if n == k:\n    #     return x\n    \n    # if (n // 2) % 2 == 1:\n    #     return -1\n    \n    # if n % 2 == 0:\n    #     return -1\n    \n    # n = int(n / 2)\n    # k = int(k / 2)\n    # x = int(x / 10)\n    \n    # if n == k:\n    #     return x\n    \n    # if (n // 2) % 2 == 1:\n    #     return -1\n    \n    # if n % 2 == 0:\n    #     return -1\n    \n    # n = int(n / 2)\n    # k = int(k / 2)\n    # x = int(x / 10)\n    \n    # if n == k:\n    #     return x\n    \n    # if (n // 2) % 2 == 1:\n    #     return -1\n    \n    # if n % 2 == 0:\n    #     return -1\n    \n    # n = int(n / 2)\n    # k = int(k / 2)\n    # x = int(x / 10)\n    \n    # if n == k:\n    #     return x\n    \n    # if (n // 2) % 2 == 1:\n    #     return -1\n    \n    # if n % 2 == 0:\n    #     return -1\n    \n    # n = int(n / 2)\n    # k = int(k / 2)\n    # x = int(x / 10)\n    \n    # if n == k:\n    #     return x\n    \n    # if (n // 2) % 2 == 1:\n    #     return -1\n    \n    # if n % 2 == 0:\n    #     return -1\n    \n    # n = int(n / 2)\n    # k = int(k / 2)\n    # x = int(x / 10)\n    \n    # if n == k:\n    #     return x\n    \n    # if (n // 2) % 2 == 1:\n    #     return -1\n    \n    # if n % 2 == 0:\n    #     return -1\n    \n    # n = int"
    },
    {
        "number": 4106,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split())\n    n_list = [int(x) for x in stdin.split()]\n    n_list.sort()\n    max_val = 0\n    for i in range(k):\n        a_i = n_list[i]\n        x_i = n_list[i+k]\n        for j in range(i+1, k+1):\n            a_j = n_list[j]\n            x_j = n_list[j-k]\n            if x_i == x_j:\n                continue\n            if a_i < x_i < a_j and a_i < x_j < a_j:\n                max_val = max(x_i+a_i, x_j+a_j, max_val)\n    if max_val > 0:\n        return max_val\n    return -1\n"
    },
    {
        "number": 4107,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip().split(\" \")\n    n = int(s[0])\n    k = int(s[1])\n\n    s = s[2:]\n\n    router_a = int(s[0])\n    router_b = int(s[1])\n\n    router_a_spot = router_a\n    router_b_spot = router_b\n    \n    router_a_spot_index = 1\n    router_b_spot_index = 0\n\n    router_a_spot_spot = min(router_a_spot, router_b_spot)\n    router_b_spot_spot = max(router_a_spot, router_b_spot)\n\n    print(router_a_spot_spot)\n    print(router_b_spot_spot)\n\n    while router_a_spot_spot < router_b_spot_spot:\n        router_a_spot_spot += 1\n        router_b_spot_spot -= 1\n        \n    router_a_spot_spot = max(router_a_spot, router_b_spot)\n    router_b_spot_spot = min(router_a_spot, router_b_spot)\n    router_a_spot_spot = min(router_a_spot, router_b_spot)\n\n    router_a_spot_index = router_a_spot\n    router_b_spot_index = router_b_spot\n\n    router_a_spot_spot_index = 1\n    router_b_spot_spot_index = 0\n\n    router_a_spot_spot_spot = min(router_a_spot_spot, router_b_spot_spot)\n    router_b_spot_spot_spot = max(router_a_spot_spot, router_b_spot_spot)\n\n    router_a_spot_spot_index = router_a_spot_spot_index\n    router_b_spot_spot_index = router_b_spot_spot_index\n\n    if router_a_spot_spot_spot < router_b_spot_spot:\n        router_a_spot_spot_index = router_a_spot_spot_index\n        router_b_spot_spot_index = router_b_spot_spot_index\n\n    router_a_spot_spot_spot = max(router_a_spot_spot, router_b_spot_spot)\n    router_b_spot_spot_spot = min(router_a_spot_spot, router_b_spot_spot)\n\n    router_a_spot_spot_index = router_a_spot_spot_index\n    router_b_spot_spot_index = router_b_spot_spot_index\n\n    if router_a_spot_spot < router_b_spot_spot:\n        router_a_spot_spot_index = router_a_spot_spot_index\n        router_b_spot_spot_index = router_b_spot_spot_index\n        \n    router_a_spot_spot_index = max(router_a_spot_spot_index, router_b_spot_spot_index)\n    router_b_spot_spot_index = min(router_a_spot_spot_index, router_b_spot_spot_index)\n\n    print(router_a_spot_spot_index, router_b_spot_spot_index)\n    print(router_a_spot_spot_spot, router_b_spot_spot_spot)\n    print(router_a_spot_spot_index, router_b_spot_spot_index)\n\n    print(router_a_spot_spot_spot * router_a_spot_spot_index)\n    print(router_b_spot_spot_spot * router_b_spot_spot_index)\n    print(router_a_spot_spot_spot * router_b_spot_spot_index)\n\n    router_a_spot_spot = router_a_spot_spot\n    router_b_spot_spot = router_b_spot_spot\n\n    router_a_spot_spot_index = 1\n    router_b_spot_spot_index = 0\n\n    router_a_spot_spot_spot = min(router_a_spot_spot, router_b_spot_spot)\n    router_b_spot_spot = max(router_a_spot_spot, router_b_spot_spot)\n    router_a_spot_spot = min(router_a_spot_spot, router_b_spot_spot)\n\n    router_a_spot_spot_index = router_a_spot_spot_index\n    router_b_spot_spot_index = router_b_spot_spot_index\n\n    router_a_spot_spot_spot = 1\n    router_b_spot_spot_spot = 1\n\n    router_a_spot_spot_index = 1\n    router_b_spot_spot_index = 1\n\n    router_a_spot_spot_spot = min(router_a_spot_spot, router_b_spot_spot)\n    router_b_spot_spot = max(router_a_spot_spot, router_b_spot_spot)\n    router_a_spot_spot = min(router_a_spot_spot, router_b_spot_spot)\n\n    router_a_spot_spot_index = router_a_spot_spot_index\n    router_b_spot_spot_index = router_b_spot_spot_index\n\n    if router_a_spot_spot < router_b_spot_spot:\n        router_a_spot_spot_index = router_a_spot_spot_"
    },
    {
        "number": 4107,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(' ')[0])\n    k = int(stdin.split(' ')[1])\n    \n    global answer\n    \n    if k > n:\n        answer += k*(n - k)\n    else:\n        answer += k*(n - 1)\n    \n    for i in range(k-1):\n        for j in range(i+1, n):\n            if '1' in str(j):\n                answer += int(j/10)\n            else:\n                answer += int(j/10 - 1)\n    return str(answer)"
    },
    {
        "number": 4107,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, k = map(int, stdin.split())\n    if k < n:\n        return \"1\"\n    elif n == 1:\n        return \"0\"\n    else:\n        s = str(n) + \"0\"\n        ans = n\n        for i in range(2, int(k ** 0.5) + 2):\n            ans += s[-i]\n            s = s[:-i] + str(i)\n        return ans\n"
    },
    {
        "number": 4107,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.split()\n    a = list(map(int, s[1:]))\n    print(a)\n    print(n-1)\n    print(n+k-1)\n    print(min(n+k-1,n-1))\n    \n    \nsolution(\"5 2\")\nsolution(\"6 1\")\nsolution(\"4 1\")\nsolution(\"12 6\")\nsolution(\"3 0\")"
    },
    {
        "number": 4107,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    k -= 1\n    matrix = [[0 for _ in range(n)] for _ in range(n)]\n    for _ in range(n):\n        line = list(map(int, stdin.split(' ')))\n        matrix[0][line[0]] = line[1]\n        matrix[line[0]][0] = line[1]\n        matrix[line[1]][0] = line[1]\n    matrix[n - 1][k] = 0\n    matrix[0][k] = 0\n    visited = []\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j]!= 0:\n                matrix[i][j] -= 1\n                visited.append((i, j))\n                matrix[i][j] = 0\n    print(matrix[n - 1][k])\n\n    return str(matrix[n - 1][k])\n\n\n\n\nInput\n5 2\n00100\n100100\n0000100\n\n\nOutput\n3\n\n\"\"\"\n"
    },
    {
        "number": 4107,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = list(stdin.split())\n    \n    return f\"{(sum(map(int, s[:n])) + sum(map(int, s[n:])) + k)}\""
    },
    {
        "number": 4107,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    \n    if k == 1:\n        print(n)\n        return\n    \n    router_spot = [i+1 for i in range(1,n+1)]\n    router_spot.insert(0,0)\n    for i in range(n-1):\n        spot = min(router_spot[i+1:], key=router_spot.count)\n        router_spot.remove(spot)\n        router_spot.insert(0,spot+1)\n    print(sum(router_spot))\n    return"
    },
    {
        "number": 4107,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    routers = 0\n    for i in range(1, n + 1):\n        routers += int(stdin[i])\n    routers = k - routers\n    return str(routers)\n\n---------------Solution---------------------\ndef"
    },
    {
        "number": 4107,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    \n        \n\ndef"
    },
    {
        "number": 4107,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.split()\n    if n < k:\n        print(s[n - k])\n        return\n    \n    # First\n    def check(x):\n        if x == \"1\":\n            return 2\n        elif x == \"0\":\n            return 3\n        else:\n            return 4\n        \n    for i in range(k):\n        x = s[i]\n        x = check(x)\n        \n        # Second\n        if x == \"1\":\n            y = int(s[i + 1])\n            if y!= 0:\n                y = y * 2\n            else:\n                y = y + 1\n        elif x == \"0\":\n            y = int(s[i + 1])\n            if y!= 0:\n                y = y * 2\n            else:\n                y = y + 1\n        else:\n            y = int(s[i + 1])\n            if y!= 0:\n                y = y * 2\n            else:\n                y = y + 1\n        \n        # Third\n        if y == 1:\n            y = int(s[i + 2])\n            y = y * 2\n        elif y == 0:\n            y = int(s[i + 2])\n            y = y * 2\n        else:\n            y = y + 1\n        \n        # Fourth\n        if y == 1:\n            y = int(s[i + 3])\n            y = y * 2\n        elif y == 0:\n            y = int(s[i + 3])\n            y = y * 2\n        else:\n            y = y + 1\n        \n        s[i] = str(y)\n    print(\"\".join(s))\n    return\n\n-----Constraints-----\n\n0\n\n\"\"\""
    },
    {
        "number": 4108,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = b = c = d = 0\n    for i in range(len(stdin)):\n        if stdin[i] == \"a\":\n            a += 1\n        if stdin[i] == \"e\":\n            b += 1\n        if stdin[i] == \"i\":\n            c += 1\n        if stdin[i] == \"o\":\n            d += 1\n        if stdin[i] == \"l\":\n            c += 1\n    if a == b and b == c and c == d:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4108,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    str_lst = []\n    str_lst.append(stdin[0])\n    for i in range(1, len(stdin)):\n        str_lst.append(stdin[i])\n    str_lst.pop()\n    str_lst.pop()\n    str_lst = list(set(str_lst))\n    \n    str_lst = ['a', 'z', 'x']\n    \n    if len(str_lst) == 1:\n        return str_lst[0]\n    elif len(str_lst) == 2:\n        return str_lst[1]\n    else:\n        return 'No'\n    \n"
    },
    {
        "number": 4108,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    for _ in range(int(stdin)):\n        s = stdin.split()\n        s = \"\".join(s)\n        s = list(s)\n        i, j = 0, 0\n        while i < len(s) and j < len(s):\n            if s[i] == s[j]:\n                j += 1\n            i += 1\n        if i == len(s):\n            continue\n        if j == len(s):\n            continue\n        if i < len(s) and j < len(s):\n            if s[i]!= s[j]:\n                if s[i] == \"z\":\n                    s[i] = \"p\"\n                else:\n                    s[i] = \"a\"\n            else:\n                if s[i] == \"z\":\n                    s[i] = \"z\"\n                else:\n                    s[i] = \"z\"\n        else:\n            continue\n        print(s)\nsolution(stdin)"
    },
    {
        "number": 4108,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def get_count(stdin: str, c: int) -> int:\n        if c == 0:\n            return 1\n        else:\n            return get_count(stdin, c-1) + get_count(stdin, c)\n\n    def solution(stdin: str) -> str:\n        answer = False\n        cur_s, cur_t = stdin.split()\n        cur_s, cur_t = cur_s.lower(), cur_t.lower()\n\n        c1, c2 = 0, 0\n        for i, s in enumerate(cur_s):\n            if s == c1:\n                c2 += 1\n            else:\n                c1 = c1 + c2\n                c2 = 0\n                c1 = c1 % (10**9 + 7)\n                cur_s[i] = c1\n\n        cur_s = cur_s[::-1]\n        for i, t in enumerate(cur_t):\n            if t == c2:\n                answer = cur_s[i]\n        return answer\n\n    return solution(stdin)\n"
    },
    {
        "number": 4108,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def problem(S, T):\n        z = S.replace(S[0], T[0])\n        p = T.replace(T[0], S[0])\n        return str(len(set(z).intersection(set(p))))\n    if len(stdin) == 0:\n        return \"No\"\n    return problem(stdin[0], stdin[1])\n\n-----Sample Output-----\nNo\n"
    },
    {
        "number": 4108,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def is_s_t_equal(a: str, b: str) -> bool:\n        #  \"abc\" -> \"a\" -> \"b\" -> \"c\"\n        if a == b:\n            return True\n        elif a[:len(b)] == b:\n            return True\n        else:\n            return False\n    \n    s, t = list(map(str, stdin.split()))\n    for i in range(len(s)):\n        for j in range(i + 1, len(s)):\n            if is_s_t_equal(s[i], t[j]):\n                return \"Yes\"\n    return \"No\"\n'''\n\n\nclass Solution:\n    def makeEquivalent(self, s: str, t: str) -> str:\n        def is_s_t_equal(a: str, b: str) -> bool:\n            if a == b:\n                return True\n            elif a[:len(b)] == b:\n                return True\n            else:\n                return False\n\n        s, t = list(s), list(t)\n        # for s_index in range(len(s)):\n        #     for t_index in range(len(t)):\n        #         if is_s_t_equal(s[s_index], t[t_index]):\n        #             return \"Yes\"\n        # return \"No\"\n\n        s_index = 0\n        t_index = 0\n        while s_index < len(s) and t_index < len(t):\n            if is_s_t_equal(s[s_index], t[t_index]):\n                s[s_index] = t[t_index]\n                t[t_index] = s[s_index]\n                t_index += 1\n                s_index += 1\n                if t_index == len(t):\n                    return \"Yes\"\n            elif s[s_index]!= t[t_index]:\n                s[s_index] = t[t_index]\n                t[t_index] = s[s_index]\n                t_index += 1\n                s_index += 1\n            elif t_index < len(t):\n                t[t_index] = s[s_index]\n                s_index += 1\n                t_index += 1\n            else:\n                return \"No\"\n        return \"Yes\"\n"
    },
    {
        "number": 4108,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    s = list(s)\n    \n    for i in range(n):\n        s[i] = chr(ord('a') + i)\n    \n    # 2x2 matrix\n    # [[1, 2], [3, 4]]\n    \n    \n    for i in range(n):\n        for j in range(n):\n            if s[i] == s[j] and s[i] == s[i]:\n                s[i] = s[j]\n            else:\n                continue\n    \n    \n    for i in range(n):\n        for j in range(n):\n            if s[i] == s[j] and s[i] == s[j]:\n                s[i] = s[j]\n            else:\n                continue\n    \n    \n    \n    \n    for i in range(n):\n        for j in range(n):\n            if s[i] == s[j] and s[i] == s[j]:\n                s[i] = s[j]\n            else:\n                continue\n            \n    \n    for i in range(n):\n        for j in range(n):\n            if s[i] == s[j] and s[i] == s[j]:\n                s[i] = s[j]\n            else:\n                continue\n            \n    \n    for i in range(n):\n        for j in range(n):\n            if s[i] == s[j] and s[i] == s[j]:\n                s[i] = s[j]\n            else:\n                continue\n            \n    \n    for i in range(n):\n        for j in range(n):\n            if s[i] == s[j] and s[i] == s[j]:\n                s[i] = s[j]\n            else:\n                continue\n            \n    \n    for i in range(n):\n        for j in range(n):\n            if s[i] == s[j] and s[i] == s[j]:\n                s[i] = s[j]\n            else:\n                continue\n            \n    \n    for i in range(n):\n        for j in range(n):\n            if s[i] == s[j] and s[i] == s[j]:\n                s[i] = s[j]\n            else:\n                continue\n            \n    \n    for i in range(n):\n        for j in range(n):\n            if s[i] == s[j] and s[i] == s[j]:\n                s[i] = s[j]\n            else:\n                continue\n            \n    \n    for i in range(n):\n        for j in range(n):\n            if s[i] == s[j] and s[i] == s[j]:\n                s[i] = s[j]\n            else:\n                continue\n            \n    \n    for i in range(n):\n        for j in range(n):\n            if s[i] == s[j] and s[i] == s[j]:\n                s[i] = s[j]\n            else:\n                continue\n            \n    \n    for i in range(n):\n        for j in range(n):\n            if s[i] == s[j] and s[i] == s[j]:\n                s[i] = s[j]\n            else:\n                continue\n            \n    for i in range(n):\n        for j in range(n):\n            if s[i] == s[j] and s[i] == s[j]:\n                s[i] = s[j]\n            else:\n                continue\n            \n    \n    for i in range(n):\n        for j in range(n):\n            if s[i] == s[j] and s[i] == s[j]:\n                s[i] = s[j]\n            else:\n                continue\n            \n    \n    for i in range(n):\n        for j in range(n):\n            if s[i] == s[j] and s[i] == s[j]:\n                s[i] = s[j]\n            else:\n                continue\n            \n    \n    for i in range(n):\n        for j in range(n):\n            if s[i] == s[j] and s[i] == s[j]:\n                s[i] = s[j]\n            else:\n                continue\n            \n    \n    for i in range(n):\n        for j in range(n):\n            if s[i] == s[j] and s[i] == s[j]:\n                s[i] = s[j]\n            else:\n                continue\n            \n    \n    for i in range(n):\n        for j in range(n):\n            if s[i] == s[j] and s[i] == s[j]:\n                s[i] = s[j]\n            else:\n                continue\n            \n    \n    for i in range(n):\n        for j in range(n):\n            if s[i] == s[j] and s[i] == s[j]:\n                s[i] = s[j]\n            else:\n                continue\n            \n    \n    for i in range(n):\n        for j in range(n):\n            if s[i] == s[j] and s[i] == s[j]:\n                s[i] = s[j]\n            else:\n                continue\n            \n    \n    for i in range(n):\n        for j in range(n):\n            if s[i] == s[j] and s[i] == s[j]:\n                s[i] = s[j]\n            else:\n                continue\n            \n    \n    for i in range(n):\n        for j in range(n):\n            if s[i] == s[j] and s[i] == s[j]:\n                s[i] = s[j]\n            else:\n                continue\n            \n    \n    for i in range(n):\n        for j in range(n):\n            if s[i] == s[j] and s[i] == s[j]:\n                s[i] = s[j]\n            else:\n                continue\n            \n    \n    for i in range(n):\n        for j in range(n):\n            if s[i] == s[j] and s[i] == s[j]:\n                s[i] = s[j]\n            else:\n                continue\n            \n    \n    for i in range(n):\n        for j in range(n):\n            if s[i] == s[j] and s[i] == s[j]:\n                s[i] = s[j]\n            else:\n                continue\n            \n    \n    for i in range(n):\n        for j in range(n):\n            if s[i] == s[j] and s[i] == s[j]:\n                s[i] = s[j]\n            else:\n                continue\n            \n    \n    for i in range(n):\n        for j in range(n):\n            if s[i] == s[j] and s[i] == s[j]:\n                s[i] = s[j]\n            else:\n                continue\n            \n    \n    for i in range(n):\n        for j in range(n):\n            if s[i] == s"
    },
    {
        "number": 4108,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def recur(cur, t, n):\n        if t == n:\n            return 0\n        else:\n            if cur[0] == t:\n                return 1\n            else:\n                if recur(cur, t, n):\n                    return 1\n                else:\n                    return 0\n    n = len(stdin)\n    cur = [stdin[i] for i in range(n)]\n    return recur([cur], 0, n)\n"
    },
    {
        "number": 4108,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    s = list(s)\n    t = list(t)\n    for i in range(len(s)):\n        s[i] = s[i].lower()\n    for i in range(len(t)):\n        t[i] = t[i].lower()\n    return ''.join([s[i] + t[i] for i in range(len(s))])\n\"\"\"\n\ndef"
    },
    {
        "number": 4108,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    d = {}\n    for i in range(len(s)):\n        d[s[i]] = t[i]\n    c_1, c_2 = s.split(\" \")\n    if c_1 in d and c_2 in d:\n        if d[c_1] == d[c_2]:\n            print(\"Yes\")\n        else:\n            print(\"No\")\n    else:\n        print(\"No\")\n    return\n\"\"\"\n\"\"\"\n"
    },
    {
        "number": 4109,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    books = list(map(int, stdin.split()))\n    max_value = max(books)\n    books.sort()\n    ans = 0\n    for i in range(n):\n        j = books[i]\n        if books[i] > 0:\n            if i == n-1:\n                ans += max_value - j\n            else:\n                ans += max_value - books[i+1]\n        else:\n            ans += max_value - j\n    return str(ans)"
    },
    {
        "number": 4109,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    books = list(map(int, stdin.split()))\n\n    # if books[0] == 0:\n    #     return ''\n    # elif books[0] == 1:\n    #     return 'yes'\n    # else:\n    #     return 'no'\n\n    # \uc544\uc2a4\ud0a4\ucf54\ub4dc\n    # import string\n    #\n    # for i in range(len(books)):\n    #     books[i] = string.digits[books[i]]\n    #\n    # answer = ''\n    # for j in range(1, len(books) + 1):\n    #     answer += ''.join(str(int(i)) for i in books[:j])\n    #     if j == books[-1]:\n    #         answer += 'yes'\n    #     else:\n    #         answer += 'no'\n    #\n    #     # \uc911\ubcf5\ub418\ub294 \uc218\uc5f4\uc758 \uae38\uc774\ub294 \ubaa8\ub450 0\uc774\ub2e4\n    #     if j < len(books):\n    #         answer += ''.join(books[:j])\n    #         if books[-1]!= string.digits[j]:\n    #             answer += 'no'\n    #\n    # return answer\n    # M \uc758 \ud06c\uae30\ub97c \uacc4\uc0b0\ud558\ub294 \ud504\ub85c\uadf8\ub7a8\uc744 \uc791\uc131\ud558\ub77c.\n    # \ud06c\uae30\uac00 3\uc774 \ub418\ub294 \uc218\uc5f4\uc758 \uae38\uc774\ub294 3\uc774\ub2e4.\n    # \uc2dc\uc791\uc810\uc740 0\uc774\ub2e4.\n    #\n    # answer = 0\n    # for i in range(1, len(books) + 1):\n    #     answer += len(books[:i])\n    #     if len(books[:i])!= 3:\n    #         answer += 1\n    #\n    # return answer\n    # M \uc758 \ud06c\uae30\ub97c \uacc4\uc0b0\ud558\ub294 \ud504\ub85c\uadf8\ub7a8\uc744 \uc791\uc131\ud558\ub77c.\n    # \ud06c\uae30\uac00 3\uc774 \ub418\ub294 \uc218\uc5f4\uc758 \uae38\uc774\ub294 3\uc774\ub2e4.\n    # \uc2dc\uc791\uc810\uc740 0\uc774\ub2e4.\n    #\n    # answer = 0\n    # for i in range(1, len(books) + 1):\n    #     answer += len(books[:i])\n    #     if len(books[:i])!= 3:\n    #         answer += 1\n    #\n    # return answer\n    # \uc544\uc2a4\ud0a4\ucf54\ub4dc\uac00 \ubcc0\ud558\uc9c0 \uc54a\uace0 \ubaa8\ub4e0 \uc218\uc5f4\uc744 \uace0\ub974\ub294\ub370 M\uc758 \ud06c\uae30\ub97c \uacc4\uc0b0\ud558\ub77c.\n    # \ub9cc\uc57d \uace0\ub974\uc9c0 \uc54a\uc558\uc744 \ub54c, \ubaa8\ub4e0 \uc218\uc5f4\uc744 \uace0\ub974\uace0 M\uc758 \ud06c\uae30\ub97c \uace0\ub974\ub294\ub370\n    # \uc720\uba85\ud558\ub2e4\ub294 \uc810\uc744 \uc783\uc740 \ubc29\ubc95\uc740 \uc120\ud0dd\uc774\uc5c8\ub294\ub370, \uc55e\uc5d0\uc11c\ubd80\ud130 \ubc29\ubc95\uc744 \uc120\ud0dd\ud558\ub294 \uacbd\uc6b0\ub294 \uac19\uc740 \ubc29\ubc95\uc744 \ub9d0\ud55c\ub2e4.\n    # \uacbd\uc6b0\uc5d0\ub294 \uac00\uc7a5 \ube60\ub978 M\uc758 \ud06c\uae30\ub85c \uc555\ucd95\ud558\uba74 \ub41c\ub2e4.\n    # \uc55e\uc5d0\uc11c\ubd80\ud130 \ubc29\ubc95\uc744 \uc120\ud0dd\ud558\ub294 \uacbd\uc6b0\ub294 \uc815\ub82c\uc744 \uc548\ud55c\ub2e4.\n    # \uc544\uc2a4\ud0a4\ucf54\ub4dc\uc5d0\uc11c \uc815\ub82c\uc744 \uc2dc\uc791\ud558\ub294 \uacbd\uc6b0\uc5d0\ub294 \uac00\uc7a5 \ube60\ub978 M\uc758 \ud06c\uae30\ub85c \uc555\ucd95\ud558\uba74 \ub41c\ub2e4.\n    # \uc2dc\uc791\uc810\uc740 0\uc774\ub2e4.\n    #\n    # answer = 0\n    # for i in range(len(books)):\n    #     answer += len(books[:i])\n    #     if len(books[:i])!= 3:\n    #         answer += 1\n    #\n    # return answer\n\n    # \uc774\uc81c M\uc758 \ud06c\uae30\ub97c \uacc4\uc0b0\ud558\ub294 \ud504\ub85c\uadf8\ub7a8\uc744 \uc791\uc131\ud558\ub77c.\n    # \ub9cc\uc57d M = 3\uc774 \uc544\ub2c8\ub77c\uba74, M = 2\uc77c \ub54c\ub294 \uae38\uc774\ub97c \uac19\uc740 \ubc29\ubc95\uc744 \uc120\ud0dd\ud55c\ub2e4.\n    #\n    # \ub9cc\uc57d M = 1\uc774\ub77c\uba74, \uc774\uc81c M\uc758 \uae38\uc774\ub97c \uac00\uc9c0\uace0 \uc788\uc744 \ub54c\ub294 \uac00\uc7a5 \ube60\ub978 M\uc758 \ud06c\uae30\ub85c \uc555\ucd95\ud558\uba74 \ub41c\ub2e4.\n    # \uc774\uc81c, \uae38\uc774\uac00 3\uc774 \ub418\uba74, \uc720\uba85\ud558\ub2e4\ub294 \uc810\uc744 \uc783\uc740 \ubc29\ubc95\uc744 \uc120\ud0dd\ud55c\ub2e4.\n    # \uc720\uba85\ud558\ub2e4\ub294 \uc810\uc744 \uc783\uc740 \ubc29\ubc95\uc744 \uc120\ud0dd\ud558\ub294 \uacbd\uc6b0\ub294 \uac00\uc7a5 \ube60\ub978 M\uc758 \ud06c\uae30\ub85c \uc555\ucd95\ud558\uba74 \ub41c\ub2e4.\n    #\n    # answer = 0\n    # for i in range(len(books)):\n    #     answer += len(books[:i])\n    #     if len(books[:i])!= 3:\n    #         answer += 1\n    #\n    # return answer\n\n\n    # \ubc29\ubc95\uc744 \ucc3e\uc544\uc57c\ud558\ub294 \uacbd\uc6b0, \uc720\uba85\ud558\ub2e4\ub294 \uc810\uc744 \uc783\uc740 \ubc29\ubc95\uc744 \uc120\ud0dd\ud558\ub294 \ufffd"
    },
    {
        "number": 4109,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    j, n, M = map(int, stdin.split())\n    books = list(map(int, stdin.split()))\n    books.sort()\n    \n    def H(n):\n        return n // books[0]\n    \n    def P(n):\n        return n // books[1]\n    \n    def D(n):\n        return n // books[2]\n    \n    def A(j, M):\n        return M // j\n    \n    answer = -1\n    for i in range(j, n+1):\n        answer = max(answer, min(H(i), P(i), D(i), A(i, M)))\n        \n    return str(answer)"
    },
    {
        "number": 4109,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    books = [int(stdin.strip()) for _ in range(N)]\n    m = N - 1\n    for i in range(N):\n        for j in range(m):\n            books[i] -= books[j + 1]\n        books[i] += books[j + 1]\n        m -= 1\n    return '\\n'.join(str(books).strip())\n"
    },
    {
        "number": 4109,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k, x = map(int, stdin.split())\n    jewelry = list(map(int, stdin.split()))\n    jewelry.sort()\n    \n    def check(d, j):\n        for i in range(n):\n            if i + d <= j:\n                return False\n            elif jewelry[i + d] < jewelry[i]:\n                return False\n        return True\n    \n    answer = -1\n    while True:\n        # \ub9cc\uc57d \ud604\uc7ac \ubb3c\uac74\uac12\uc774 \uac00\uc7a5 \uc88b\uc9c0 \uc54a\uc73c\uba74 \ub354\uc774\uc0c1 \ubcf4\uc9c0 \uc54a\uc558\uc73c\uba74 \uc885\ub8cc\n        if answer >= 0:\n            return str(answer)\n        # \ucd5c\ub300 \uc810\ud654\uc2dd\n        A_max = [0] * (n+1)\n        A_max[0] = 1\n        for i in range(n):\n            for j in range(m):\n                if j == 0:\n                    if check(i, k):\n                        A_max[i+1] = max(A_max[i+1], A_max[i+1 - jewelry[i]] + A_max[i])\n                elif j == m-1:\n                    if check(i, k):\n                        A_max[i+1] = max(A_max[i+1], A_max[i+1 - jewelry[i]] + A_max[i])\n                else:\n                    if check(i, k):\n                        A_max[i+1] = max(A_max[i+1], A_max[i+1 - jewelry[i]] + A_max[i] - A_max[i + jewelry[i]])\n        if A_max[-1] >= x:\n            answer = n\n            break\n    return str(answer)\n"
    },
    {
        "number": 4109,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    # \uad6c\uad6c\ub2e8\uc5d0 \uc0ac\ub294 \uacbd\uc6b0\uc758 \uc218\ub97c \ub098\ud0c0\ub0b4\ub294 \ubc30\uc5f4.\n    dp = [0] * (n+1)\n    # \uac01 \uad6c\uad6c\ub2e8\uc758 \uc810\uc218\ub97c \ub2f4\ub294 \ubc30\uc5f4.\n    score = [0] * (n+1)\n    # \uac01 \uad6c\uad6c\ub2e8\uc758 \ubc30\uc5f4\uc5d0 \uace0\ub978 \uc810\uc218\ub97c \ub2f4\ub294 \ubc30\uc5f4.\n    answer = [0] * (n+1)\n    # \uc810\uc218\ub97c \ub2f4\ub294 \ubc30\uc5f4\uc758 \ucd08\uae30\uac12 \uc124\uc815\n    score[1] = 1\n    # \uc810\uc218\uac00 1\uc778 \uad6c\uad6c\ub2e8\uc758 \uc218\uac00 1\uc778 \uc810\uc218\ub97c \ub2f4\ub294 \ubc30\uc5f4\uc5d0 \uc800\uc7a5\n    for i in range(2, n+1):\n        dp[i] = (score[i-1] + score[i-2]) % 1000000007\n        score[i] = (score[i] + score[i-1] + score[i-2] + score[i-3]) % 1000000007\n        answer[i] = (dp[i] - score[i]) % 1000000007\n    # \ub9cc\uc57d \uad6c\uad6c\ub2e8\uc758 \uc88c\ud45c\uac00 0\uc778 \uad6c\uad6c\ub2e8\uc774\uba74 \uc810\uc218\ub97c 0\uc758 \uacbd\uc6b0\uc5d0 \uc815\ub2f5\uc774\ub2e4.\n    if answer[n] == 0:\n        answer[n] = 1\n    # \uad6c\uad6c\ub2e8\uc758 \uc88c\ud45c\uac00 0\uc778 \uad6c\uad6c\ub2e8\uc774 \ubb34\uc870\uac74 1\uc778 \uacbd\uc6b0\uc5d0 \uc815\ub2f5\uc774\ub2e4.\n    for i in range(2, n+1):\n        # \uad6c\uad6c\ub2e8\uc758 \uc88c\ud45c\uac00 0\uc778 \uacbd\uc6b0\uc5d0 \uc815\ub2f5\uc774 \uc544\ub2c8\ub77c\uba74 \uac12\uc744 \uc800\uc7a5\ud55c\ub2e4.\n        if answer[i] == 0:\n            answer[i] = 1\n            # \uad6c\uad6c\ub2e8\uc758 \uc88c\ud45c\uac00 1\uc778 \uacbd\uc6b0\uc5d0\ub294 \uc810\uc218\ub97c \ub2f4\ub294 \ubc30\uc5f4\uc758 \ucd08\uae30\uac12\uc5d0 +1\uc744 \ud574\uc900\ub2e4.\n            for j in range(1, n+1):\n                dp[i] += score[i]\n                answer[i] = (dp[i] - score[i]) % 1000000007\n    # \uc810\uc218\uac00 1\uc778 \uad6c\uad6c\ub2e8\uc758 \uc88c\ud45c\uac00 1\uc778 \uc810\uc218\ub97c \ub2f4\ub294 \ubc30\uc5f4\uc758 \ucd08\uae30\uac12 \uc124\uc815\n    score[1] = 1\n    # \ub2e4\uc74c\uc5d0\ub294 \uad6c\uad6c\ub2e8\uc758 \uc88c\ud45c\uac00 1\uc778 \uc810\uc218\ub97c \ub2f4\ub294 \ubc30\uc5f4\uc5d0 \uc800\uc7a5\n    for i in range(2, n+1):\n        dp[i] = (score[i] + score[i-1]) % 1000000007\n        score[i] = (score[i] + score[i-1] + score[i-2] + score[i-3]) % 1000000007\n        answer[i] = (dp[i] - score[i]) % 1000000007\n    # \uad6c\uad6c\ub2e8\uc758 \uc88c\ud45c\uac00 1\uc778 \uad6c\uad6c\ub2e8\uc774 \ubb34\uc870\uac74 1\uc778 \uc810\uc218\ub97c \ub2f4\ub294 \ubc30\uc5f4\uc5d0 \uc800\uc7a5\n    # \ubaa8\ub450 0\uc77c \uacbd\uc6b0\uc5d0\ub294 \uc810\uc218\uac00 1\uc758 \uacbd\uc6b0\uc5d0\ub294 \uadf8 \uc810\uc218\ub97c \ubc30\uc5f4\uc5d0 \uc800\uc7a5\ud55c\ub2e4.\n    for i in range(2, n+1):\n        if answer[i] == 0:\n            answer[i] = 1\n            for j in range(1, n+1):\n                dp[i] += score[i]\n                answer[i] = (dp[i] - score[i]) % 1000000007\n    return ''.join(str(i) for i in answer)\n'''\ndef"
    },
    {
        "number": 4109,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    books = [tuple(map(int, input().split())) for _ in range(n)]\n    books.sort(key=lambda x: x[0])\n    \n    a = [sum(v) for v in books]\n\n    # \uac01 book\uc758 \uac01 \uc870\uac74\uc774 \ub098\uc624\ub294 \uc218\ub294 \uc774\uc804\uac70\uc5d0\uc11c \uac01 \uc870\uac74\uc744 \ub354\ud574\uc57c\ud55c\ub2e4.\n    for i in range(1, len(books)):\n        for j in range(len(books) - i):\n            a[j] += a[j+1]\n        \n    # \uac01 book\uc758 \uc870\uac74\uc774 \ub098\uc624\ub294 \uc218\uc758 \ud569\uc774 \uac00\uc7a5 \ucee4\uc9c0\uac8c \ub41c\ub2e4.\n    for i in range(len(books)):\n        a[i] %= m\n    \n    print(sum(a))\n\nsolution(stdin)\n"
    },
    {
        "number": 4109,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    book_list = []\n    for _ in range(N):\n        book_list.append(int(stdin))\n\n    for i in range(M):\n        for j in range(i + 1, M):\n            book_list[i] += book_list[j]\n\n    answer = 0\n    for money in book_list:\n        if money >= answer:\n            answer = money\n\n    return str(answer)\n\nprint(solution(stdin))"
    },
    {
        "number": 4109,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    books = [int(stdin[i]) for i in range(n)]\n    books.sort(reverse=True)\n\n    for _ in range(m):\n        x, y = map(int, stdin.split())\n        books[x-1] -= y\n\n    answer = 0\n    for i in range(m):\n        answer = max(answer, books[i]*(m-i-1))\n    return answer\n"
    },
    {
        "number": 4109,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    books = [list(map(int, input().split())) for i in range(n)]\n\n    answer = 0\n\n    for i in range(n):\n        for j in range(m):\n            if books[i][j] >= 2:\n                books[i][j] = 1\n                answer = max(answer, sum(books[i]))\n                books[i][j] = 0\n    \n    print(answer)\n    \n\nsolution(\"5 2 4\")"
    },
    {
        "number": 4110,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    P, C = stdin.split()\n    p_i = list(map(int, P.split()))\n    c_i = list(map(int, C.split()))\n    G = sum(p_i)\n    total = sum(c_i)\n    #print(c_i)\n    #print(p_i)\n    #print(G)\n    #print(total)\n    #print(p_i, c_i, G, total)\n    if G > total:\n        return str(G-total)\n    #if G < total:\n    #    return str(G-total)\n    if G >= total:\n        return str(G-total)\n    return \"N/A\"\n    #return str(G-total)\n"
    },
    {
        "number": 4110,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    D, G = map(int, stdin.split())\n    p_1, p_2, p_3, p_4 = map(int, input().split())\n    c_1, c_2, c_3, c_4 = map(int, input().split())\n    \n    if (G + c_1 + p_1 >= 300) and (G + c_2 + p_2 >= 300) and (G + c_3 + p_3 >= 300) and (G + c_4 + p_4 >= 300):\n        return str(G + c_1 + p_1 + c_2 + p_2 + c_3 + p_3 + c_4 + p_4)\n    else:\n        return 'Error'\n    \n    \n\n>>> solution('')\n'''\n\n### Answer\n"
    },
    {
        "number": 4110,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    P, Q = map(int, stdin.split())\n    if P < Q:\n        Q = P\n    else:\n        Q = Q\n    if P < Q:\n        Q = P\n    else:\n        Q = Q\n    for p in range(P, Q+1):\n        s = 0\n        for c in range(1, p+1):\n            s += 100 * c * (p - c)\n        if s >= Q:\n            s -= Q\n        else:\n            s += Q\n        print(s)\n    return \"\"\n\nT = int(input())\nfor i in range(T):\n    stdin = input()\n    print(solution(stdin))\n\n'''\nSample Input\n\n2 700\n3 500\n5 800\n\nSample Output\n\n3\n'''"
    },
    {
        "number": 4110,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N,G=map(int,stdin.split())\n    K=[]\n    for i in range(N):\n        tmp=[]\n        for j in range(4):\n            tmp.append(int(stdin[i*3+j]))\n        K.append(tmp)\n    return str(len(K)-sum(K[0]))\n\ndef"
    },
    {
        "number": 4110,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    p, G, D = map(int, stdin.split())\n    answer = 0\n    for _ in range(p):\n        _, c_1 = map(int, stdin.split())\n        c_1 -= 1\n        answer += c_1*c_1\n        answer -= c_1*G\n    return str(answer)\n\n---------------Constraints----------------\n 1 \u2264 p, G, D \u2264 10\n\n2 \u2264 c_1, c_D \u2264 10^6\n\n1 \u2264 p_i \u2264 100\n\n1 \u2264 G \u2264 10^6\n\n1 \u2264 D \u2264 10^6\n\n---------------Output----------------\n 4\n\nIn this case, the total score of a user is 700 + 500 + 400 + 500 + 800 + 800 = G + 500 + 500 + 700 + 400 + 700 = G + 800 + 800 = G + 800 + 800 = G + 800 + 800 = G + 800 + 800 = G + 800 + 800 = G + 800 + 800 = G + 800 + 800 = G + 800 + 800 = G + 800 + 800\n\nThe bonus of solving 100-point problems is 500 points, so for a total score of G + 500 = 300 + 600 = 800, the total score of a user is 600 = G + 800 = G + 800 = G + 800 = G + 800 = G + 800 = G + 800 = G + 800 = G + 800 = G + 800 = G + 800\n\np_1, c_1 = map(int, input().split())\np_1 -= 1\nc_1 -= 1\nprint(solution(f'{p_1} {c_1} {G} {D} {p_1*c_1} {G*p_1*c_1} {G*(p_1+1)*c_1} {G*(p_1+2)*c_1} {G*(p_1+3)*c_1} {G*(p_1+4)*c_1} {G*(p_1+5)*c_1} {G*(p_1+6)*c_1} {G*(p_1+7)*c_1} {G*(p_1+8)*c_1} {G*(p_1+9)*c_1} {G*(p_1+10)*c_1} {G*(p_1+11)*c_1} {G*(p_1+12)*c_1} {G*(p_1+13)*c_1} {G*(p_1+14)*c_1} {G*(p_1+15)*c_1} {G*(p_1+16)*c_1} {G*(p_1+17)*c_1} {G*(p_1+18)*c_1} {G*(p_1+19)*c_1} {G*(p_1+20)*c_1} {G*(p_1+21)*c_1} {G*(p_1+22)*c_1} {G*(p_1+23)*c_1} {G*(p_1+24)*c_1} {G*(p_1+25)*c_1} {G*(p_1+26)*c_1} {G*(p_1+27)*c_1} {G*(p_1+28)*c_1} {G*(p_1+29)*c_1} {G*(p_1+30)*c_1} {G*(p_1+31)*c_1} {G*(p_1+32)*c_1} {G*(p_1+33)*c_1} {G*(p_1+34)*c_1} {G*(p_1+35)*c_1} {G*(p_1+36)*c_1} {G*(p_1+37)*c_1} {G*(p_1+38)*c_1} {G*(p_1+39)*c_1} {G*(p_1+40)*c_1} {G*(p_1+41)*c_1} {G*(p_1+42)*c_1} {G*(p_1+43)*c_1} {G*(p_1+44)*c_1} {G*(p_1+45)*c_1} {G*(p_1+46)*c_1} {G*(p_1+47)*c_1} {G*(p_1+48)*c_1} {G*(p_1+49)*c_1} {G*(p_1+50)*c_1} {G*(p_1+51)*c_1} {G*(p_1+52)*c_1} {G*(p_1+53)*c_1} {G*(p_1+54)*c_1} {G*(p_1+55)*c_1} {G*(p_1+56)*c_1} {G*(p_1+57)*c_1} {G*(p_1+58)*c_1} {G*(p_1+59)*c_1} {G*(p_1+60)*c_1} {G*(p_1+61)*c_1} {G*(p_1+62)*c_1} {G*(p_1+63)*c_1} {G*(p_1+64)*c_1} {G*(p_1+65)*c_1} {G*(p_1+66)*c_1} {G*(p_1+67)*c_1} {G*(p_1+68)*c_1} {G*(p_1+69)*c_1} {G*(p_1+70)*c_1} {G*(p_1+71)*c_1} {G*(p_1+72)*c_1} {G*(p_1+73)*c_1} {G*(p_1+74)*c_1} {G*(p_1+75)*c_1} {G*(p_1+76)*c_1} {G*(p_1+77)*c_1} {G*(p_1+78)*c_1} {G*(p_1+79)*c_1} {G"
    },
    {
        "number": 4110,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    p_1, c_1, p_2, c_2, p_3, c_3, p_4, c_4, p_5, c_5, p_6, c_6, p_7, c_7, p_8, c_8, p_9, c_9, p_10, c_10 = map(int, stdin.split())\n    ans = (p_1 * p_2 * p_3 + c_1 + c_2 + c_3 + c_4 + c_5 + c_6 + c_7 + c_8 + c_9 + c_10) // (p_1 * p_2 * p_3 + p_1 + p_2 + c_1 + c_2 + c_3 + c_4 + c_5 + c_6 + c_7 + c_8 + c_9 + c_10)\n    return str(ans)\n"
    },
    {
        "number": 4110,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    D, G = stdin.split()\n    G = int(G)\n    \n    c_1 = 0\n    c_2 = 0\n    c_3 = 0\n    \n    for i in range(1, int(D)):\n        if (100 * i) < G:\n            c_1 += 100\n        elif (100 * i) >= G:\n            c_2 += 100\n        else:\n            c_3 += 100\n    \n    print(c_1)\n    print(c_2)\n    print(c_3)\n    return \"\"\n"
    },
    {
        "number": 4110,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    G, p_1, c_1 = map(int, stdin.split())\n    for i in range(1, D+1):\n        p_1 += 100*i\n        c_1 += 100*i\n    for i in range(1, G+1):\n        p_1 += 100*i\n        c_1 -= 100*i\n    print(p_1, c_1)"
    },
    {
        "number": 4110,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split()\n    D = int(lines[0])\n    G = int(lines[1])\n    p_1 = int(lines[2])\n    c_1 = int(lines[3])\n    p_2 = int(lines[4])\n    c_2 = int(lines[5])\n    p_3 = int(lines[6])\n    c_3 = int(lines[7])\n    p_4 = int(lines[8])\n    c_4 = int(lines[9])\n    p_5 = int(lines[10])\n    c_5 = int(lines[11])\n    total = p_1 + p_2 + p_3 + p_4 + c_1 + c_2 + c_3 + c_4 + c_5\n    bonus = p_1 + p_2 + p_3 + p_4 + c_1 + c_2 + c_3 + c_4 + c_5\n    if total > G or total > 100:\n        return \"Problem exceeds the amount of good total.\"\n    if bonus > G:\n        return \"Bonus is not present.\"\n    if p_1 < 1:\n        return \"Problem 1 is empty.\"\n    if p_2 < 1:\n        return \"Problem 2 is empty.\"\n    if p_3 < 1:\n        return \"Problem 3 is empty.\"\n    if p_4 < 1:\n        return \"Problem 4 is empty.\"\n    if c_1 < 1:\n        return \"Condition 1 is empty.\"\n    if c_2 < 1:\n        return \"Condition 2 is empty.\"\n    if c_3 < 1:\n        return \"Condition 3 is empty.\"\n    if c_4 < 1:\n        return \"Condition 4 is empty.\"\n    if c_5 < 1:\n        return \"Condition 5 is empty.\"\n    if bonus > 200:\n        return \"Bonus is present.\"\n    return \"No problems needed.\"\n\nprint(solution(\"2 700\"))\nprint(solution(\"3 500\"))\nprint(solution(\"5 800\"))\n"
    },
    {
        "number": 4110,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    D, G = map(int, stdin.split())\n    difficulty = D // 100\n    score = G + (D - 100 * difficulty)\n    return str(score)\n"
    },
    {
        "number": 4111,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [list(map(int, input().split())) for i in range(n)]\n    # a = [[1,4,3],[1,4,3],[1,4,3]]\n    i = 0\n    lst = []\n    for j in range(n):\n        if a[j][0] > a[j][1]:\n            lst.append(a[j][0] + a[j][1])\n        else:\n            lst.append(a[j][1])\n        i += 1\n    for j in range(i):\n        a[j][0] += lst[j]\n        a[j][1] += lst[j]\n    answer = 0\n    for j in range(n):\n        answer += a[j][0] + a[j][1]\n    return str(answer)\n\nprint(solution(stdin))\n\nclass Solution:\n    def candy(self, n: int) -> int:\n        result = n\n        if n == 1:\n            return n\n        if n == 2:\n            return 3\n        if n == 3:\n            return 2\n        if n == 4:\n            return 1\n        if n == 5:\n            return 0\n\n        for i in range(1, n + 1):\n            candy = 1\n            if i == 1:\n                candy += self.candy(n - 1)\n            if i == 2:\n                candy += self.candy(n - 1)\n            if i == 3:\n                candy += self.candy(n - 1)\n            if i == 4:\n                candy += self.candy(n - 1)\n            if i == 5:\n                candy += self.candy(n - 1)\n            if i == 6:\n                candy += self.candy(n - 1)\n            if i == 7:\n                candy += self.candy(n - 1)\n            if i == 8:\n                candy += self.candy(n - 1)\n            if i == 9:\n                candy += self.candy(n - 1)\n            if i == 10:\n                candy += self.candy(n - 1)\n\n            if result < candy:\n                result = candy\n        return result\n"
    },
    {
        "number": 4111,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, *weight = map(int, stdin.split())\n    n, good_candies = [], []\n    for i in range(1, n):\n        a = int(weight[i - 1])\n        n.append(a)\n        good_candies.append(i)\n    \n    i, j = 1, n\n    while i < j:\n        a = int(weight[i])\n        while a > 0:\n            j -= 1\n            a -= (weight[j])\n        i += 1\n    \n    return str(len(good_candies) - (len(good_candies) % 2))\n\nInput\n10\n3 4 5 7 8 9\n\nOutput\n3\n\nInput\n15\n1 1 3 1 1 1 2 1 1 2 3 1 1 1 1 2 3 2\n\nOutput\n2\n\n\n\n-----Constraints-----\n\n1 <= stdin.length <= 2 * 10^4\n\n\n-----Time complexity-----\n\nO(n)\n"
    },
    {
        "number": 4111,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, n = [int(x) for x in stdin.split()]\n    candies = [int(x) for x in stdin.split() if x.isdigit()]\n    a = a * b\n    if n % 2:\n        b -= 1\n    if c % 2:\n        c -= 1\n    if n % 2 and a >= 0 and b >= 0 and c >= 0:\n        a, c = c, a\n    elif c % 2:\n        a, c = c, a\n    elif n % 2 and a >= 0:\n        a = a\n        b = b\n    elif n % 2 and a >= 0 and b >= 0:\n        a = a\n        c = c\n    c = min(a, c)\n    a = max(b, a)\n    a = max(c, a)\n    a = max(a, c)\n    for i in range(a, a + c):\n        if i not in candies:\n            return str(i)\n    return str(a + c)\n    \n\n\"\"\""
    },
    {
        "number": 4111,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    candies = [0 for _ in range(n)]\n    ans = 0\n    for i in range(q):\n        n, a = map(int, stdin.split())\n        candies[n - 1] += a\n    for i in range(n):\n        ans += sum(candies[i : n + 1])\n    return str(ans)\n\nn, q = map(int, input().split())\ncandies = [0 for _ in range(n)]\nfor _ in range(q):\n    n, a = map(int, input().split())\n    candies[n - 1] += a\nprint(solution(input()))"
    },
    {
        "number": 4111,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # solution(stdin, [\"4 4\", \"3 4\", \"1 4\", \"1 5\", \"1 6\", \"2 3\", \"2 4\", \"2 6\", \"2 7\"])\n    # solution(stdin, [\"2 3\", \"2 5\", \"3 4\", \"3 5\", \"3 6\", \"3 7\", \"4 3\", \"4 5\", \"4 6\", \"4 7\"])\n\n    # solution(stdin, [\"4 3\", \"4 2\", \"3 5\", \"3 4\", \"3 6\", \"1 4\", \"1 7\", \"2 7\"])\n    # solution(stdin, [\"2 3\", \"2 5\", \"3 4\", \"3 6\", \"3 7\", \"4 3\", \"4 5\", \"4 6\", \"4 7\"])\n    # solution(stdin, [\"2 4\", \"2 5\", \"3 4\", \"3 6\", \"3 7\", \"4 5\", \"4 6\", \"4 7\"])\n    # solution(stdin, [\"4 4\", \"4 2\", \"3 5\", \"3 4\", \"3 6\", \"1 4\", \"1 7\", \"2 7\"])\n\n    # solution(stdin, [\"2 3\", \"2 5\", \"3 4\", \"3 5\", \"3 6\", \"3 7\", \"4 5\", \"4 6\", \"4 7\"])\n\n    # solution(stdin, [\"2 4\", \"2 5\", \"3 4\", \"3 6\", \"3 7\", \"4 5\", \"4 6\", \"4 7\"])\n\n    # solution(stdin, [\"4 3\", \"4 2\", \"3 5\", \"3 4\", \"3 6\", \"1 4\", \"1 7\", \"2 7\"])\n\n    # solution(stdin, [\"2 3\", \"2 5\", \"3 4\", \"3 6\", \"3 7\", \"4 5\", \"4 6\", \"4 7\"])\n\n    # solution(stdin, [\"4 4\", \"4 2\", \"3 5\", \"3 4\", \"3 6\", \"1 4\", \"1 7\", \"2 7\"])\n\n    # solution(stdin, [\"2 3\", \"2 5\", \"3 4\", \"3 6\", \"3 7\", \"4 5\", \"4 6\", \"4 7\"])\n\n    # solution(stdin, [\"2 4\", \"2 5\", \"3 4\", \"3 6\", \"3 7\", \"4 5\", \"4 6\", \"4 7\"])\n\n    # solution(stdin, [\"4 4\", \"4 2\", \"3 5\", \"3 4\", \"3 6\", \"1 4\", \"1 7\", \"2 7\"])\n\n    # solution(stdin, [\"2 3\", \"2 5\", \"3 4\", \"3 6\", \"3 7\", \"4 5\", \"4 6\", \"4 7\"])\n    # solution(stdin, [\"3 2\", \"3 3\", \"3 4\", \"3 6\", \"3 7\", \"4 5\", \"4 6\", \"4 7\"])\n    # solution(stdin, [\"3 4\", \"3 5\", \"3 6\", \"3 7\", \"4 5\", \"4 6\", \"4 7\"])\n    # solution(stdin, [\"3 6\", \"3 7\", \"4 5\", \"4 6\", \"4 7\", \"4 8\", \"4 9\"])\n    # solution(stdin, [\"3 4\", \"3 5\", \"3 6\", \"3 7\", \"4 5\", \"4 6\", \"4 7\"])\n\n    # solution(stdin, [\"3 4\", \"3 5\", \"3 6\", \"3 7\", \"4 5\", \"4 6\", \"4 7\"])\n\n    # solution(stdin, [\"3 4\", \"3 5\", \"3 6\", \"3 7\", \"4 5\", \"4 6\", \"4 7\"])\n\n    # solution(stdin, [\"3 2\", \"3 3\", \"3 4\", \"3 5\", \"3 6\", \"1 4\", \"1 7\", \"2 7\"])\n\n    # solution(stdin, [\"3 2\", \"3 3\", \"3 4\", \"3 5\", \"3 6\", \"1 4\", \"1 7\", \"2 7\"])\n\n    # solution(stdin, [\"3 4\", \"3 5\", \"3 6\", \"3 7\", \"4 5\", \"4 6\", \"4 7\"])\n\n    # solution(stdin, [\"3 6\", \"3 7\", \"4 5\", \"4 6\", \"4 7\", \"4 8\", \"4 9\"])\n    # solution(stdin, [\"3 4\", \"3 5\","
    },
    {
        "number": 4111,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    good_candies = 0\n    for i in range(n):\n        if i % 2 == 0:\n            good_candies += (a * n) + (a * (i + 1))\n        else:\n            good_candies += a * n\n    \n    # print(good_candies)\n    # for i in range(n):\n    #     print(i+1, good_candies)\n    #     if i % 2 == 0:\n    #         good_candies += (a * n) + (a * (i + 1))\n    #     else:\n    #         good_candies += a * n\n    # print(good_candies)\n    return str(min(good_candies, (b - good_candies) % b))\n\nprint(solution(input()))\n\n-----Constraints-----\n\n1 <= n <= 100\n1 <= a, b <= 1000\n\n-----Time Limit Exceeded-----\n\nTime Limit: 1 sec\n\nclass Solution:\n    def getNthNumber(self, n: int, not_one: str, one_count: int, two_count: int, three_count: int) -> str:\n        \n        not_one = not_one[::-1]\n        one_count = one_count - 1\n        two_count = two_count + 1\n        three_count = three_count + 1\n        \n        # print(not_one)\n        # print(one_count)\n        # print(two_count)\n        # print(three_count)\n        \n        if n == 1:\n            return not_one[::-1]\n        \n        if n == two_count:\n            return one_count * one_count * one_count * one_count\n        \n        if n == three_count:\n            return one_count * one_count + two_count * two_count\n        \n        if n == one_count:\n            return two_count * one_count + three_count * two_count\n        \n        if n == two_count:\n            return one_count * two_count + three_count * three_count\n        \n        if n == one_count:\n            return one_count * two_count + three_count * three_count\n        \n        return one_count * two_count + three_count * three_count\n        \n\nprint(solution(input()))\n"
    },
    {
        "number": 4111,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    weight = [int(x) for x in stdin.split()]\n    good = [list(map(int, x.split(' '))) for x in range(n)]\n    good[0][0] = good[0][0] + weight[0]\n    good[-1][-1] = good[-1][-1] + weight[-1]\n    for i in range(1, n):\n        good[i][-1] = good[i][-1] + weight[i-1]\n    good = [list(map(int, x)) for x in good]\n    print(len(set(good)))\n    return str(len(set(good)))\n\ndef"
    },
    {
        "number": 4111,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a_list = list(map(int, stdin.split()))\n    result = []\n    i = 0\n    while True:\n        for j in range(n):\n            if i < n - 1:\n                if a_list[i] + a_list[i + 1] == a_list[j] + a_list[j + 1]:\n                    result.append(i)\n            i += 2\n        i = 0\n        if i >= n - 1:\n            break\n    return ''.join(map(str, result))"
    },
    {
        "number": 4111,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, *c = list(map(int, stdin.split()))\n    a = set(map(int, stdin.split()))\n    d = {a.pop() for _ in range(n)}\n    for i in range(1, len(c)):\n        d.discard(c[i])\n    for _ in range(n-1):\n        d.discard(max(d))\n    return str(len(d)) + '\\n'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4111,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    candies = list(map(int, stdin.strip().split()))\n    return str(sum(set(map(lambda i: sum(i), candies)))-sum(candies))"
    },
    {
        "number": 4112,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin_lines = stdin.split()\n    \n    n = int(stdin_lines[0])\n    k = int(stdin_lines[1])\n    x = int(stdin_lines[2])\n    \n    a_1, a_2, a_3, a_4 = 0, 0, 0, 0\n    \n    for i in range(k):\n        a_1 += int(stdin_lines[i + 1])\n        a_2 += int(stdin_lines[i + 2])\n        a_3 += int(stdin_lines[i + 3])\n        a_4 += int(stdin_lines[i + 4])\n    \n    a_1 -= a_1 % x\n    a_2 -= a_2 % x\n    a_3 -= a_3 % x\n    a_4 -= a_4 % x\n    \n    if (a_1 > a_3) or (a_1 > a_2) or (a_1 > a_4):\n        return str(a_1)\n    elif (a_2 > a_3) or (a_2 > a_4):\n        return str(a_2)\n    else:\n        return str(a_3)\n\n\nfor _ in range(int(input())):\n    stdin_input = input()\n    print(solution(stdin_input))\n"
    },
    {
        "number": 4112,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    x = map(int, stdin.split())\n    beauty = [0] * n\n    beauty[0] = x[0]\n    for i in range(1, n):\n        beauty[i] = beauty[i-1] + x[i]\n    print(sum(beauty))\n    while k>0:\n        if beauty[k]>=x[k]:\n            k-=1\n        else:\n            k+=1\n    if k==0:\n        print(sum(beauty))\n        return \"1\"\n    else:\n        return \"0\"\n"
    },
    {
        "number": 4112,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split())\n    while n >= 1 and k >= 1 and x > 0:\n        print(sum(map(lambda x: x >= k, map(lambda x: (x >= k, x >= 0), range(n, n+k, k))))[0])\n        if sum(map(lambda x: x >= k, map(lambda x: (x >= k, x >= 0), range(n, n+k, k))))[0] == n:\n            return -1\n        k -= 1\n        n -= 1\n        x -= 1\n    print(-1)\n    return -1\n"
    },
    {
        "number": 4112,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    k, n, x = list(map(int, stdin.split()))\n    \n    visit = [set() for _ in range(n+1)]\n    sum_of_beauty = [0]\n    sum_of_beauty_index = [0]\n    \n    for _ in range(k):\n        a, b = list(map(int, stdin.split()))\n        visit[b].add(a)\n        sum_of_beauty.append(sum_of_beauty[-1] + a)\n        sum_of_beauty_index.append(sum_of_beauty_index[-1] + 1 + a - b)\n        \n    sum_of_beauty_index.append(sum_of_beauty_index[-1] + n)\n    \n    max_sum_of_beauty_index = max(sum_of_beauty_index)\n    \n    max_sum_of_beauty = 0\n    \n    for i in range(max_sum_of_beauty_index+1):\n        max_sum_of_beauty += sum_of_beauty[i]\n        \n    for i in range(max_sum_of_beauty_index+1, max_sum_of_beauty+1):\n        max_sum_of_beauty_index -= max_sum_of_beauty\n        if i % n == 0:\n            max_sum_of_beauty = max(max_sum_of_beauty, max_sum_of_beauty_index)\n            max_sum_of_beauty_index -= max_sum_of_beauty\n        \n    if max_sum_of_beauty == 0:\n        return -1\n    \n    return max_sum_of_beauty\n"
    },
    {
        "number": 4112,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def factorial(x):\n        return 1 if x == 0 else x * factorial(x - 1)\n    n = int(stdin.strip())\n    x = factorial(n)\n    if x < (10 ** 9):\n        return x\n    else:\n        return -1"
    },
    {
        "number": 4112,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin, answer = map(int, stdin.split())\n    n = 0\n    for i in range(stdin):\n        x = int(stdin[i])\n        if x == 0:\n            if n == 0:\n                n = x\n            else:\n                n = n - 1\n        elif x > n:\n            n = x\n        else:\n            answer = n\n            n = 0\n    return str(answer)"
    },
    {
        "number": 4112,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    if stdin == \"\":\n        return \"\"\n\n    \n    n, k = map(int, stdin.split())\n    if n <= k:\n        return \"\"\n    \n    \n    x = int(input())\n    k = k % (x + 1)\n    \n    min_list = []\n    sum_list = []\n    for i in range(1, x+1):\n        min_list.append(i)\n        sum_list.append(i)\n        sum_list.append(min_list[i-1]+min_list[i-2])\n        \n    sum_list = list(dict.fromkeys(sum_list))\n    \n    max_sum = 0\n    for i in range(k, len(sum_list)):\n        max_sum = max(sum_list[i], max_sum)\n    \n    if max_sum == 0:\n        return \"-1\"\n    \n    for i in range(k):\n        sum_list[i] = str(sum_list[i])\n        \n    print(max_sum)\n    return max_sum\n"
    },
    {
        "number": 4112,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    x = int(stdin.split()[-1])\n    a_1, a_2, a_3 = map(int, stdin.split())\n    a_1_beauty = (a_1 - 1) * a_3\n    a_2_beauty = (a_2 - 1) * a_3\n    a_3_beauty = (a_3 - 1) * a_2\n    if n <= 2:\n        return -1\n    if k >= 2:\n        return max(a_1_beauty, a_2_beauty, a_3_beauty)\n    a_1, a_2, a_3 = sorted((a_1, a_2, a_3))\n    count = 0\n    for i in range(1, n + 1):\n        if i <= k:\n            count += a_3_beauty\n        else:\n            count += a_1_beauty\n    return max(count, -1)\n\n-----Constraints-----\n1 <= n <= 10^3\n1 <= k <= n\n1 <= a_1 <= 10^9\n1 <= a_2 <= 10^9\n0 <= x <= 10^9\n\"\"\"\n\nclass Solution:\n    def maxSum(self, n, k, x):\n        return self.rec(n, k, x)\n\n    def rec(self, n, k, x):\n        if n <= 0:\n            return 0\n        if k == 0:\n            return x\n        return max(self.rec(n-1, k, x), self.rec(n, k-1, x) + x)\n"
    },
    {
        "number": 4112,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n,k,x=map(int,stdin.split())\n    if k<x:\n        return -1\n    sum=0\n    for i in range(1,n):\n        sum+=x*(n-i)\n        if sum<0:\n            return -1\n    for j in range(k):\n        sum+=x*(k-j-1)\n        if sum>sum:\n            return -1\n    return sum\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4112,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    n = len(a)\n    beauty_sum = [0] * n\n    for i in range(n):\n        beauty_sum[a[i]] += 1\n    beauty_sum = sum(beauty_sum)\n    print(beauty_sum)\n    print(beauty_sum - k)\n    if beauty_sum - k < 0:\n        return -1\n    for i in range(k):\n        if beauty_sum - k <= 0:\n            print(-1)\n            return '-1'\n        a.pop(0)\n        a.append(a.pop(0))\n    print(a)\n    print(a)\n    print(beauty_sum - k)\n    return str(beauty_sum - k)\n\nsolution(stdin)\n"
    },
    {
        "number": 4113,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    from collections import deque\n    N = int(stdin)\n    num_sliced = 0\n    max_number = (10 ** 9) + 1\n    desserts = deque([])\n    for i in range(N):\n        number = int(stdin[i])\n        num_sliced += number\n        desserts.append(number)\n    if num_sliced == max_number:\n        return \"Yes\"\n    else:\n        if num_sliced > max_number:\n            return \"No\"\n        else:\n            while len(desserts)!= 0 and num_sliced > 0:\n                while num_sliced >= desserts[-1]:\n                    num_sliced -= desserts.popleft()\n                num_sliced += desserts.popleft()\n            return \"No\"\n"
    },
    {
        "number": 4113,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = list(map(int, stdin.split(' ')))\n    s.sort()\n    if s[-1] % s[-2]!= 0:\n        print('No')\n    else:\n        print('Yes')\n\"\"\"\nclass Solution:\n    def solution(self, N):\n        if N <= 1:\n            return 'No'\n        i = 1\n        while i <= N:\n            if i % (s[-1] // s[-2]) == 0:\n                i += 1\n            else:\n                if i == 1:\n                    print('Yes')\n                    return 'Yes'\n                if i % (s[-1] // s[-2]) == 0:\n                    i += 1\n                else:\n                    print('No')\n                    return 'No'\n        print('No')\n\ndef"
    },
    {
        "number": 4113,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    d = int(stdin.split()[1])\n    if n == 0:\n        return \"No\"\n    if n < d:\n        return \"No\"\n    else:\n        n -= d\n        return \"Yes\"\n\ndef"
    },
    {
        "number": 4113,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    cakes = 0\n    doughnuts = 0\n    \n    for i in stdin:\n        \n        if i == 'C':\n            cakes += 1\n        else:\n            doughnuts += 1\n        \n    if cakes < 2 and doughnuts < 2:\n        return 'Yes'\n    else:\n        return 'No'\n\ndef"
    },
    {
        "number": 4113,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n\n    if N > 1:\n        return 'Yes'\n    elif N == 0:\n        return 'No'\n    else:\n        return 'No'\n\n----Example 1----\nInput:\nN = 5\n\nOutput:\nYes\nExplanation:\n1st doughnut = 3 + 2 = 5\n2nd cake = 1 + 2 = 2\n3rd cake = 1 + 2 = 3\n4th cake = 1 + 2 = 4\n5th cake = 1 + 2 = 5\n1st cake = 5\n\n----Example 2----\nInput:\nN = 1\n\nOutput:\nNo\n\n----Example 3----\nInput:\nN = 3\n\nOutput:\nNo\n\n----Example 4----\nInput:\nN = 1\n\nOutput:\nYes\n\n----Example 5----\nInput:\nN = 1\n\nOutput:\nNo\n\n----Constraints----\n - 1 <= N <= 100\n - 1 <= K <= 1000\n\n-----Time Complexity-----\nO(N + K)\n\n-----Space Complexity-----\nO(N + K)\n\n\"\"\""
    },
    {
        "number": 4113,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    count = 1\n    for i in range(N):\n        if count == 1:\n            print(\"Yes\")\n            break\n        elif count == 2:\n            print(\"No\")\n            break\n        count += 1\n    return \"Yes\"\n\n---My Solution---\nimport collections\n\nN = int(input())\ncount = 1\nfor i in range(N):\n    count += int(input())\n"
    },
    {
        "number": 4113,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k, n, k = map(int, stdin.split())\n    if k == n or n == 0:\n        return \"No\"\n    return \"Yes\"\n\nprint(solution(\"4 1 2\"))\nprint(solution(\"2 1 5\"))\nprint(solution(\"0 1 0\"))\nprint(solution(\"1 2 0\"))\nprint(solution(\"1 0 0\"))\nprint(solution(\"3 5 2\"))\nprint(solution(\"2 4 1\"))\nprint(solution(\"1 1 0\"))\n"
    },
    {
        "number": 4113,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n  N = int(stdin)\n  if N == 0:\n    return 'No'\n  else:\n    if N % 3 == 0:\n      return 'Yes'\n    else:\n      return 'No'\n\n-----Instantiation-----\nclass Solution:\n  def solution(self, N: int) -> str:\n    dp = [[0] * 2 for i in range(N + 1)]\n    dp[0][0] = 1\n    dp[0][1] = 1\n    for i in range(1, N + 1):\n      dp[i][0] = (dp[i - 1][0] * 3 + dp[i - 1][1]) % 1000000000\n      dp[i][1] = (dp[i - 1][1] * 4 + dp[i - 1][0]) % 1000000000\n    return 'Yes' if dp[N][0] and dp[N][1] else 'No'\n\n-----Use DP-----\nclass Solution:\n  def solution(self, N: int) -> str:\n    dp = [0, 0, 0]\n    dp[0] = 1\n    dp[1] = 1\n    dp[2] = 1\n    for i in range(3, N + 1):\n      dp[i] = (dp[i - 3] * 3 + dp[i - 2] + dp[i - 1]) % 1000000000\n    return 'Yes' if dp[N] else 'No'\n\n-----Use V - Inverse-----\nclass Solution:\n  def solution(self, N: int) -> str:\n    dp = [0, 0, 0]\n    dp[0] = 1\n    dp[1] = 1\n    dp[2] = 1\n    for i in range(3, N + 1):\n      dp[i] = (dp[i - 3] * 4 + dp[i - 2] + dp[i - 1]) % 1000000000\n    return 'Yes' if dp[N] else 'No'\n\n-----Use V - Inverse--Else---Only One Solution-----\nclass Solution:\n  def solution(self, N: int) -> str:\n    dp = [0, 0, 0]\n    dp[0] = 1\n    dp[1] = 1\n    dp[2] = 1\n    for i in range(3, N + 1):\n      dp[i] = (dp[i - 3] * 4 + dp[i - 2] + dp[i - 1]) % 1000000000\n    return 'Yes' if dp[N] else 'No'\n\n-----Using Inverses-----\nclass Solution:\n  def solution(self, N: int) -> str:\n    dp = [0, 0, 0]\n    dp[0] = 1\n    dp[1] = 1\n    dp[2] = 1\n    for i in range(3, N + 1):\n      dp[i] = (dp[i - 3] * 4 + dp[i - 2] + dp[i - 1]) % 1000000000\n    return 'Yes' if dp[N] else 'No'\n\n-----Using Inverses--Else--Only One Solution-----\nclass Solution:\n  def solution(self, N: int) -> str:\n    dp = [0, 0, 0]\n    dp[0] = 1\n    dp[1] = 1\n    dp[2] = 1\n    for i in range(3, N + 1):\n      dp[i] = (dp[i - 3] * 4 + dp[i - 2] + dp[i - 1]) % 1000000000\n    return 'Yes' if dp[N] else 'No'\n\n-----Use DONE------\nclass Solution:\n  def solution(self, N: int) -> str:\n    dp = [0, 0, 0]\n    dp[0] = 1\n    dp[1] = 1\n    dp[2] = 1\n    for i in range(3, N + 1):\n      dp[i] = (dp[i - 3] * 4 + dp[i - 2] + dp[i - 1]) % 1000000000\n    return 'Yes' if dp[N] else 'No'\n\n-----Use DONE------\nclass Solution:\n  def solution(self, N: int) -> str:\n    dp = [0, 0, 0]\n    dp[0] = 1\n    dp[1] = 1\n    dp[2] = 1\n    for i in range(3, N + 1):\n      dp[i] = (dp[i - 3] * 4 + dp[i - 2] + dp[i - 1]) % 1000000000\n    return 'Yes' if dp[N] else 'No'\n"
    },
    {
        "number": 4113,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    from collections import defaultdict\n    import re\n    from itertools import combinations\n    from functools import reduce\n\n    def _get_n(a):\n        return int(a.replace(',', ''))\n\n    def _get_counts(s):\n        return [_get_n(x) for x in re.split('\\D+', s)]\n\n    def _is_solved(s, a):\n        return sum(x for x in _get_counts(s) if x >= a) == a\n\n    def _get_all_ways_to_buy_a(s):\n        return list(combinations(s, a=2))\n\n    def _get_all_ways_to_buy_n(s):\n        ways_to_buy_n = {}\n        for i in range(len(s)):\n            ways_to_buy_n[i] = _get_all_ways_to_buy_n(s[:i] + s[i + 1:])\n            ways_to_buy_n[i][0] = ways_to_buy_n[i][0][0] + ways_to_buy_n[i][0][1]\n            ways_to_buy_n[i][1] = ways_to_buy_n[i][1] + ways_to_buy_n[i][0]\n        return ways_to_buy_n\n\n    def _get_all_ways_to_buy_zero(s):\n        ways_to_buy_zero = {}\n        for i in range(len(s)):\n            ways_to_buy_zero[i] = _get_all_ways_to_buy_zero(s[:i] + s[i + 1:])\n            ways_to_buy_zero[i][0] = ways_to_buy_zero[i][0] + ways_to_buy_zero[i][1]\n            ways_to_buy_zero[i][1] = ways_to_buy_zero[i][1] + ways_to_buy_zero[i][0]\n        return ways_to_buy_zero\n\n    def _get_all_ways_to_buy_zero(s):\n        ways_to_buy_zero = {}\n        for i in range(len(s)):\n            ways_to_buy_zero[i] = _get_all_ways_to_buy_zero(s[:i] + s[i + 1:])\n            ways_to_buy_zero[i][0] = ways_to_buy_zero[i][0] + ways_to_buy_zero[i][1]\n            ways_to_buy_zero[i][1] = ways_to_buy_zero[i][1] + ways_to_buy_zero[i][0]\n        return ways_to_buy_zero\n\n    def _get_all_ways_to_buy(s):\n        ways_to_buy = {}\n        for i in range(len(s)):\n            ways_to_buy[i] = _get_all_ways_to_buy(s[:i] + s[i + 1:])\n            ways_to_buy[i][0] = ways_to_buy[i][0] + ways_to_buy[i][1]\n            ways_to_buy[i][1] = ways_to_buy[i][1] + ways_to_buy[i][0]\n        return ways_to_buy\n\n    def _get_all_ways_to_buy(s):\n        ways_to_buy = {}\n        for i in range(len(s)):\n            ways_to_buy[i] = _get_all_ways_to_buy(s[:i] + s[i + 1:])\n            ways_to_buy[i][0] = ways_to_buy[i][0] + ways_to_buy[i][1]\n            ways_to_buy[i][1] = ways_to_buy[i][1] + ways_to_buy[i][0]\n        return ways_to_buy\n\n    def _get_all_ways_to_buy_zero(s):\n        ways_to_buy_zero = {}\n        for i in range(len(s)):\n            ways_to_buy_zero[i] = _get_all_ways_to_buy_zero(s[:i] + s[i + 1:])\n            ways_to_buy_zero[i][0] = ways_to_buy_zero[i][0] + ways_to_buy_zero[i][1]\n            ways_to_buy_zero[i][1] = ways_to_buy_zero[i][1] + ways_to_buy_zero[i][0]\n        return ways_to_buy_zero\n\n    def _get_all_ways_to_buy_zero(s):\n        ways_to_buy_zero = {}\n        for i in range(len(s)):\n            ways_to_buy_zero[i] = _get_all_ways_to_buy_zero(s[:i] + s[i + 1:])\n            ways_to_buy_zero[i][0] = ways_to_buy_zero[i][0] + ways_to_buy_zero[i][1]\n            ways_to_buy_zero[i][1] = ways_to_buy_zero[i][1] + ways_to_buy_zero[i][0]\n        return ways_to_buy_zero\n\n    def _get_all_ways_to_buy(s):\n        ways_to_buy = {}\n        for i in range(len(s)):\n            ways_to_buy[i] = _get_all_ways_to_buy(s[:i] + s[i + 1:])\n            ways_to_buy[i][0] = ways_to_buy[i][0] + ways_to_buy[i][1]\n            ways_to_buy[i][1] = ways_to_buy[i][1] + ways_to_buy[i][0]\n        return ways_to_buy\n\n    def _get_all_ways_to_buy_zero(s):\n        ways_to_buy_zero = {}\n        for i in range(len(s)):\n            ways_to_buy_zero[i] = _get_all_ways_to_buy_zero(s[:i] + s[i + 1:])\n            ways_to_buy_zero[i][0] = ways_to_buy_zero[i][0] + ways_to_buy_zero[i][1]\n            ways_to_buy_zero[i][1] = ways_to_buy_zero[i][1] + ways_to_buy_zero[i][0]\n        return ways_to_buy_zero\n\n    def _get_all_ways_to_buy_zero(s):\n        ways_to_buy_zero = {}\n        for i in range(len(s)):\n            ways_to_buy_zero[i] = _get_all_ways_to_buy_zero(s[:i] + s[i + 1:])\n            ways_to_buy_zero[i][0] = ways_to_buy_zero[i][0] + ways_to_buy_zero[i][1]\n            ways_to_buy_zero[i][1] = ways_to_buy_zero[i][1] + ways_to_buy_zero[i][0]\n        return ways_to_buy_zero\n\n    def _get_all_ways_to_sell(s):\n        ways_to_sell = {}\n        for i in range(len(s)):\n            ways_to_sell[i] = _get_all_ways_to_sell(s[:i] + s"
    },
    {
        "number": 4113,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    return 'Yes' if N > 0 else 'No'\n\n----Reference----\nhttps://www.w3resource.com/python-exercises/python-basic-exercises.php?id=1627\n\n-----Sample Input-----\n5\n\n-----Sample Output-----\nNo\n\n-----Constraints----\n - 1 <= N <= 100\n\"\"\"\ndef"
    },
    {
        "number": 4114,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split('\\n')[0])\n    x_1, y_1 = map(int, stdin.split(' '))\n    x_2, y_2 = map(int, stdin.split(' '))\n    x_3, y_3 = map(int, stdin.split(' '))\n    x_N, y_N = map(int, stdin.split(' '))\n\n    print(x_1, y_1, x_2, y_2, x_3, y_3, x_N, y_N)\n\n    h_1 = y_1 - x_1\n    h_2 = y_2 - x_2\n    h_3 = y_3 - x_3\n    h_N = x_N - y_N\n\n    print(h_1, h_2, h_3, h_N)\n\n    if h_1 + h_2 + h_3 + h_N == 100:\n        print('YES')\n    else:\n        print('NO')\n    return \"\"\n\nfor _ in range(int(input())):\n    print(solution(input()))"
    },
    {
        "number": 4114,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n  n,x,y,h = map(int,input().split())\n  x=x+x+x+x+x+x+x+x\n  y=y+y+y+y+y+y+y+y+y\n  H=h+y+x+y+x+y+x+y+y+x+y\n  print(x,y,h,H)\n  if(x>=x+x and y>=y+y and x>=x+x+x and y>=y+y+y):\n    print(x,y,h,H)\n    print(x,y,h,H)\n    print(x,y,h,H)\n    print(x,y,h,H)\n    print(x,y,h,H)\n    return \"Takahashi\"\n  if(x>=x+x and y>=y+y and x>=x+x+x and y>=y+y+y):\n    print(x,y,h,H)\n    print(x,y,h,H)\n    print(x,y,h,H)\n    print(x,y,h,H)\n    print(x,y,h,H)\n    return \"Kaku who is named Takahashi\"\n  if(x>=x+x and y>=y+y and x>=x+x+x and y>=y+y+y):\n    print(x,y,h,H)\n    print(x,y,h,H)\n    print(x,y,h,H)\n    print(x,y,h,H)\n    print(x,y,h,H)\n    print(x,y,h,H)\n    return \"Takahashi\"\n  if(x>=x+x and y>=y+y and x>=x+x+x and y>=y+y+y):\n    print(x,y,h,H)\n    print(x,y,h,H)\n    print(x,y,h,H)\n    print(x,y,h,H)\n    print(x,y,h,H)\n    return \"Kaku who is named Takahashi\"\n  if(x>=x+x and y>=y+y and x>=x+x+x and y>=y+y+y):\n    print(x,y,h,H)\n    print(x,y,h,H)\n    print(x,y,h,H)\n    print(x,y,h,H)\n    print(x,y,h,H)\n    return \"Kaku who is named Takahashi\"\n  if(x>=x+x and y>=y+y and x>=x+x+x and y>=y+y+y):\n    print(x,y,h,H)\n    print(x,y,h,H)\n    print(x,y,h,H)\n    print(x,y,h,H)\n    print(x,y,h,H)\n    return \"Kaku who is named Takahashi\"\n  if(x>=x+x and y>=y+y and x>=x+x+x and y>=y+y+y):\n    print(x,y,h,H)\n    print(x,y,h,H)\n    print(x,y,h,H)\n    print(x,y,h,H)\n    print(x,y,h,H)\n    return \"Kaku who is named Takahashi\"\n  if(x>=x+x and y>=y+y and x>=x+x+x and y>=y+y+y):\n    print(x,y,h,H)\n    print(x,y,h,H)\n    print(x,y,h,H)\n    print(x,y,h,H)\n    print(x,y,h,H)\n    print(x,y,h,H)\n    return \"Kaku who is named Takahashi\"\n  if(x>=x+x and y>=y+y and x>=x+x+x and y>=y+y+y):\n    print(x,y,h,H)\n    print(x,y,h,H)\n    print(x,y,h,H)\n    print(x,y,h,H)\n    print(x,y,h,H)\n    print(x,y,h,H)\n    return \"Kaku who is named Takahashi\"\n  if(x>=x+x and y>=y+y and x>=x+x+x and y>=y+y+y):\n    print(x,y,h,H)\n    print(x,y,h,H)\n    print(x,y,h,H)\n    print(x,y,h,H)\n    print(x,y,h,H)\n    print(x,y,h,H)\n    return \"Takahashi\"\n  if(x>=x+x and y>=y+y and x>=x+x+x and y>=y+y+y):\n    print(x,y,h,H)\n    print(x,y,h,H)\n    print(x,y,h,H)\n    print(x,y,h,H)\n    print(x,y,h,H)\n    print(x,y,h,H)\n    return \"Kaku who is named Takahashi\"\n  if(x>=x+x and y>=y+y and x>=x+x+x and y>=y+y+y):\n    print(x,y,h,H)\n    print(x,y,h,H)\n    print(x,y,h,H)\n    print(x,y,h,H)\n    print(x,y,h,H)\n    print(x,y,h,H)\n    return \"Kaku who is named Takahashi\"\n  if(x>=x+x and y>=y+y and x>=x+x+x and y>=y+y+y):\n    print(x,y,h,H)\n    print(x,y,h,H)\n    print(x,y,h,H)\n    print(x,y,h,H)\n    "
    },
    {
        "number": 4114,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, *values = map(int, stdin.split())\n    x_1, y_1, h_1 = values\n    x_2, y_2, h_2 = values\n    x_3, y_3, h_3 = values\n    x_N, y_N = values\n    \n    def check(point):\n        return abs(x_1 - point[0]) + abs(y_1 - point[1]) < 10**9\n    \n    def check_n(coordinates):\n        for i in range(len(coordinates) - 1):\n            if not check(coordinates[i]):\n                return False\n        return True\n    \n    def check_h(coordinates):\n        for i in range(len(coordinates) - 1):\n            if not check_n(coordinates[i]):\n                return False\n        return True\n    \n    for i in range(N):\n        if not check_n(x_1, y_1, h_1) and not check_n(x_2, y_2, h_2):\n            x_1, y_1, h_1 = x_2, y_2, h_2\n            x_2, y_2, h_2 = x_3, y_3, h_3\n        if not check_n(x_1, y_1, h_1):\n            x_1, y_1, h_1 = x_3, y_3, h_3\n            x_3, y_3, h_3 = x_N, y_N, h_N\n        if not check_n(x_2, y_2, h_2):\n            x_2, y_2, h_2 = x_N, y_N, h_N\n            x_N, y_N, h_N = x_1, y_1, h_1\n        \n    print(str(x_1) + \" \" + str(y_1))\n    print(str(x_2) + \" \" + str(y_2))\n    print(str(x_3) + \" \" + str(y_3))\n    print(str(x_N) + \" \" + str(y_N))\n    \n    return \"1 2 6\"\n\"\"\"\nfrom collections import deque\n\nclass Solver:\n    def __init__(self):\n        self.vertices = []\n        self.edges = []\n        self.parents = []\n        self.start = []\n        self.end = []\n        self.visited = []\n        self.weights = {}\n        self.MST = []\n        self.data = {}\n\n    def add(self, a, b, c, d):\n        self.vertices.append(a)\n        self.vertices.append(b)\n        self.vertices.append(c)\n        self.vertices.append(d)\n        self.edges.append((a, b, c, d))\n        self.edges.append((a, b, d, c))\n        self.parents.append(a)\n        self.parents.append(b)\n        self.parents.append(d)\n        self.weights[(a, b, c, d)] = 1\n\n    def add_start(self, a):\n        self.start.append(a)\n        self.weights[(a,)] = 1\n\n    def add_end(self, a):\n        self.end.append(a)\n        self.weights[(a,)] = 1\n\n    def add_path(self, a, b, c, d):\n        self.parents.append(a)\n        self.parents.append(b)\n        self.parents.append(c)\n        self.parents.append(d)\n        self.weights[(a, b, c, d)] = 1\n\n    def remove_path(self, a, b, c, d):\n        self.parents.remove(a)\n        self.parents.remove(b)\n        self.parents.remove(c)\n        self.parents.remove(d)\n        self.weights[(a, b, c, d)] = 0\n\n    def add_weight(self, a, b, c, d):\n        self.weights[(a, b, c, d)] = 1 / 2\n        self.weights[(a, b, d, c)] = 1 / 2\n\n    def add_path_weight(self, a, b, c, d):\n        self.weights[(a, b, c, d)] = 1 / 2\n        self.weights[(a, b, d, c)] = 1 / 2\n\n    def add_start_weight(self, a):\n        self.weights[(a,)] = 1\n\n    def add_end_weight(self, a):\n        self.weights[(a,)] = 1\n\n    def print(self):\n        for i in range(len(self.vertices)):\n            print(str(self.vertices[i]))\n            for j in range(len(self.edges[i])):\n                print(self.edges[i][j], end=\" \")\n            print()\n        print(\"\")\n\n    def print_path(self):\n        for i in range(len(self.vertices)):\n            print(str(self.vertices[i]))\n            for j in range(len(self.parents[i])):\n                print(self.parents[i][j], end=\" \")\n            print()\n        print(\"\")\n\n    def get_mst(self):\n        if len(self.MST) == 0:\n            for i in range(len(self.vertices)):\n                for j in range(len(self.parents[i])):\n                    if self.weights[self.vertices[i], self.parents[i][j]] == 1:\n                        print(str(self.vertices[i]), end=\" \")\n                        print(str(self.parents[i][j]), end=\" \")\n                        print(\" \")\n                        self.MST.append(self.vertices[i])\n                        self.MST.append(self.parents[i][j])\n                        self.MST.append(self.vertices[self.parents[i][j]])\n                        self.MST.append(self.weights[self.vertices[i], self.parents[i][j]])\n                        self.weights[self.vertices[i], self.parents[i][j]] = 1\n                        self.weights[self.vertices[self.parents[i][j]], self."
    },
    {
        "number": 4114,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a, b, c, d = map(int, stdin.strip().split())\n    k = (n - a) // (b - c)\n    left, right = a - k * b, b - k * c\n    height = (n - d) // (k - 1)\n    return str(k) + \" \" + str(left) + \" \" + str(height) + \" \" + str(right)\n\ndef"
    },
    {
        "number": 4114,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    x_1, y_1, h_1 = map(int, stdin.strip().split())\n    x_2, y_2, h_2 = map(int, stdin.strip().split())\n    x_3, y_3, h_3 = map(int, stdin.strip().split())\n    x_N, y_N = map(int, stdin.strip().split())\n    h_list = list(map(int, stdin.strip().split()))\n    h_list.sort()\n    return''.join(map(str, solution(N, x_1, y_1, h_1, x_2, y_2, h_2, x_3, y_3, h_3, x_N, y_N, h_list)))\n\n\"\"\"\nFor N = 4, 1 2 3 4 5\n2 2 5\n2 4 5\n4 2 5\n5 4 5\n\nFor N = 4, 1 2 3 4 5\n2 2 5\n1 2 4 5\n2 3 4 5\n3 2 4 5\n4 2 4 5\n5 2 4 5\n5 4 4 5\n6 2 4 5\n7 2 4 5\n8 2 4 5\n9 2 4 5\n10 2 4 5\n11 2 4 5\n12 2 4 5\n13 2 4 5\n14 2 4 5\n15 2 4 5\n16 2 4 5\n17 2 4 5\n18 2 4 5\n19 2 4 5\n20 2 4 5\n\n1 2 3 5\n2 2 4 5\n2 2 4 5\n3 2 4 5\n4 2 4 5\n5 2 4 5\n6 2 4 5\n7 2 4 5\n8 2 4 5\n9 2 4 5\n10 2 4 5\n11 2 4 5\n12 2 4 5\n13 2 4 5\n14 2 4 5\n15 2 4 5\n16 2 4 5\n17 2 4 5\n18 2 4 5\n19 2 4 5\n20 2 4 5\n\nFor N = 4, 1 2 3 4 5\n2 3 4 5\n2 2 4 5\n3 2 4 5\n4 2 4 5\n5 2 4 5\n6 2 4 5\n7 2 4 5\n8 2 4 5\n9 2 4 5\n10 2 4 5\n11 2 4 5\n12 2 4 5\n13 2 4 5\n14 2 4 5\n15 2 4 5\n16 2 4 5\n17 2 4 5\n18 2 4 5\n19 2 4 5\n20 2 4 5\n\n1 2 3 5\n2 3 4 5\n2 2 4 5\n3 2 4 5\n4 2 4 5\n5 2 4 5\n6 2 4 5\n7 2 4 5\n8 2 4 5\n9 2 4 5\n10 2 4 5\n11 2 4 5\n12 2 4 5\n13 2 4 5\n14 2 4 5\n15 2 4 5\n16 2 4 5\n17 2 4 5\n18 2 4 5\n19 2 4 5\n20 2 4 5\n\nFor N = 5, 1 2 3 4 5\n1 2 3 5\n2 2 3 5\n2 2 3 5\n3 2 3 5\n4 2 3 5\n5 2 3 5\n6 2 3 5\n7 2 3 5\n8 2 3 5\n9 2 3 5\n10 2 3 5\n11 2 3 5\n12 2 3 5\n13 2 3 5\n14 2 3 5\n15 2 3 5\n16 2 3 5\n17 2 3 5\n18 2 3 5\n19 2 3 5\n20 2 3 5\n\n1 2 3 5\n2 2 3 5\n2 2 3 5\n3 2 3 5\n4 2 3 5\n5 2 3 5\n6 2 3 5\n7 2 3 5\n8 2 3 5\n9 2 3 5\n10 2 3 5\n11 2 3 5\n12 2 3 5\n13 2 3 5\n14 2 3 5\n15 2 3 5\n16 2 3 5\n17 2 3 5\n18 2 3 5\n19 2 3 5\n20 2 3 5\n\n1 2 3 5\n2 3 4 5\n2 2 4 5\n3 2 4 5\n4 2 4 5\n5 2 4 5\n6 2 4 5\n7 2 4 5\n8 2 4 5\n9 2 4 5\n10 2 4 5\n11 2 4 5\n12 2 4 5\n13 2 4 5\n14 2 4 5\n15 2 4 5\n16 2 4 5\n17 2 4 5\n18 2 4 5\n19 2 4 5\n20 2 4 5\n\n1 2 3 5\n2 3 4 5\n2 2 4 5\n3 2 4 5\n4 2 4 5\n5 2 4 5\n6 2 4 5\n7 2 4 5\n8 2 4 5\n9 2 4 5\n10 2 4 5\n11 2 4 5\n12 2 4 5\n13 2 4 5\n14 2 4 5\n15 2 4 5\n16 2 4 5\n17 2 4 5\n18 2 4 5\n19 2 4 5\n20 2 4 5\n\n1 2 3 5\n2 3 4 5\n2 2 4 5\n3 2 4 5\n4 2 4 5\n5 2 4 5\n6 2 4 5\n7 2 4 5\n8 2 4 5\n9 2 4 5\n10 2 4 5\n11 2 4 5\n12 2 4 5\n13 2 4 5\n14 2 4 5\n15 2 4 5\n16 2 4 5\n17 2 4 5\n18 2 4 5\n19 2 4 5\n20 2 4 5\n\n1 2 3 5\n2 3 4 5\n2 2 4 5\n3 2 4 5\n4 2 4 5\n5 2 4 5\n6 2 4 5\n7 2 4 5\n8 2 4 5\n9 2 4 5\n10 2 4 5\n11 2 4 5\n12 2 4 5\n13 2 4 5\n14 2 4 5\n15 2 4 5\n16 2 4 5\n17 2 4 5\n18 2 4 5\n19 2 4 5\n20 2 4 5\n\n1 2 3 5\n2 3 4 5\n2 2 4 5\n3 2 4 5\n4 2 4 5\n5 2 4 5\n6 2 4 5\n7 2 4 5\n8 2 4 5\n9 2 4 5\n10 2 4 5\n11 2 4 5\n12 2 4 5\n13 2 4 5\n14 2 4 5\n15 2 4 5\n16 2 4 5\n17 2 4 5\n18 2 4 5\n19 2 4 5\n20 2 4 5\n\n1 2 3 5\n2 3 4 5\n2 2 4 5\n3 2 4 5\n4 2 4 5\n5 2 4 5\n6 2 4 5\n7 2 4 5\n8 2 4 5\n9 2 4 5\n10 2 4 5\n11 2 4 5\n12 2 4 5\n13 2 4 5\n14 2 4 5\n15 2 4 5\n16 2 4 5\n17 2 4 5\n18 2 4 5\n19 2 4 5\n20 2 4 5\n\n1 2 3 5\n2 3 4 5\n2 2 4 5\n3"
    },
    {
        "number": 4114,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    x = map(int,stdin.strip().split(' '))\n    y = map(int,stdin.strip().split(' '))\n    h = map(int,stdin.strip().split(' '))\n    for i in range(1,N):\n        x_i,y_i,h_i = x[i],y[i],h[i]\n        for j in range(i,N):\n            x_j,y_j,h_j = x[j],y[j],h[j]\n            if h_i>h_j:\n                h_i,h_j = h_j,h_i\n                \n            h_i = h_i - h_i\n            h_j = h_j - h_j\n            \n            if h_i==h_j:\n                x_i,x_j = x_j,x_i\n                y_i,y_j = y_j,y_i\n                h_i = h_i-h_i\n                h_j = h_j-h_j\n                \n            if h_i > h_j:\n                h_i,h_j = h_j,h_i\n                \n            h_i = h_i - h_i\n            h_j = h_j - h_j\n            \n            C_X,C_Y,H = x_i*100 + y_i,x_j*100+y_j,h_i*100+h_j\n            print(C_X,C_Y,H)\n    return 'C_X,C_Y,H'\n\ndef"
    },
    {
        "number": 4114,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    N = int(stdin)\n    \n    x_list = []\n    y_list = []\n    h_list = []\n    \n    for i in range(N):\n        x = int(stdin.strip()[i])\n        y = int(stdin.strip()[i + 1])\n        h = int(stdin.strip()[i + 2])\n        \n        if x!= 0:\n            x_list.append(x)\n            y_list.append(y)\n            h_list.append(h)\n        else:\n            x_list.append(0)\n            y_list.append(0)\n            h_list.append(0)\n    \n    H = max(h_list) + 1\n    \n    C_X = (y_list[0] - y_list[-1]) * (x_list[0] - x_list[-1]) + (x_list[-1] - x_list[0]) * (y_list[0] - y_list[-1])\n    C_Y = max(C_X, 0)\n    \n    for i in range(1, len(x_list)):\n        C_X = (h_list[i] - h_list[i-1]) * (x_list[i] - x_list[i-1]) + (x_list[i-1] - x_list[i]) * (y_list[i] - y_list[i-1])\n        C_Y = max(C_X, 0)\n        \n    return f\"{C_X}, {C_Y}, {H}\"\n\n\ndef"
    },
    {
        "number": 4114,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n        n = int(stdin[0])\n        h = int(stdin[1])\n        arr = list(map(int, stdin[2].split()))\n        if n!= len(arr) or h < 1:\n            return \"Error\"\n        else:\n            max_h = int(arr[0])\n            res = []\n            for i in range(1,n):\n                j = 1\n                while arr[i] * j < max_h and j < h:\n                    j += 1\n                res.append(i*j)\n            for i in range(n-2, -1, -1):\n                j = 1\n                while arr[i] * j < max_h and j < h:\n                    j += 1\n                res.append(i*j)\n            res.append(h)\n            return \" \".join(map(str, res))\n\nIn this case, it doesn't exist.\ndef"
    },
    {
        "number": 4114,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, x_1, y_1, h_1, x_2, y_2, h_2, x_3, y_3, h_3 = map(int, stdin.split())\n    if N == 0 or x_1 >= x_3 or y_1 >= y_3 or h_1 > h_3:\n        return \"error\"\n    return str(x_1 + x_3) + \" \" + str(y_1 + y_3) + \" \" + str(h_1)\n\nn = input()\nprint(solution(n))\n"
    },
    {
        "number": 4114,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    H, N = map(int, stdin.split())\n    N_p = set(map(int, stdin.split()))\n    coord = set(map(int, stdin.split()))\n    coord = {coord.pop(), coord.pop()}\n    for _ in range(N):\n        coord.add(map(int, stdin.split()))\n    coord = set(coord)\n    coord = list(coord)\n    for _ in range(H):\n        coord.remove(min(coord))\n    coord = list(coord)\n    coord.sort()\n    coord = str(coord[0] + coord[1] * 10)\n    coord = '1' + coord[2:]\n    coord = '4' + coord[2:]\n    coord = '7' + coord[2:]\n    coord = '9' + coord[2:]\n    coord = '10' + coord[2:]\n    coord = '11' + coord[2:]\n    coord = '12' + coord[2:]\n    coord = '13' + coord[2:]\n    coord = '14' + coord[2:]\n    coord = '15' + coord[2:]\n    coord = '16' + coord[2:]\n    coord = '17' + coord[2:]\n    coord = '18' + coord[2:]\n    coord = '19' + coord[2:]\n    coord = '20' + coord[2:]\n    coord = '21' + coord[2:]\n    coord = '22' + coord[2:]\n    coord = '23' + coord[2:]\n    coord = '24' + coord[2:]\n    coord = '25' + coord[2:]\n    coord = '26' + coord[2:]\n    coord = '27' + coord[2:]\n    coord = '28' + coord[2:]\n    coord = '29' + coord[2:]\n    coord = '30' + coord[2:]\n    coord = '31' + coord[2:]\n    coord = '32' + coord[2:]\n    coord = '33' + coord[2:]\n    coord = '34' + coord[2:]\n    coord = '35' + coord[2:]\n    coord = '36' + coord[2:]\n    coord = '37' + coord[2:]\n    coord = '38' + coord[2:]\n    coord = '39' + coord[2:]\n    coord = '40' + coord[2:]\n    coord = '41' + coord[2:]\n    coord = '42' + coord[2:]\n    coord = '43' + coord[2:]\n    coord = '44' + coord[2:]\n    coord = '45' + coord[2:]\n    coord = '46' + coord[2:]\n    coord = '47' + coord[2:]\n    coord = '48' + coord[2:]\n    coord = '49' + coord[2:]\n    coord = '50' + coord[2:]\n    coord = '51' + coord[2:]\n    coord = '52' + coord[2:]\n    coord = '53' + coord[2:]\n    coord = '54' + coord[2:]\n    coord = '55' + coord[2:]\n    coord = '56' + coord[2:]\n    coord = '57' + coord[2:]\n    coord = '58' + coord[2:]\n    coord = '59' + coord[2:]\n    coord = '60' + coord[2:]\n    coord = '61' + coord[2:]\n    coord = '62' + coord[2:]\n    coord = '63' + coord[2:]\n    coord = '64' + coord[2:]\n    coord = '65' + coord[2:]\n    coord = '66' + coord[2:]\n    coord = '67' + coord[2:]\n    coord = '68' + coord[2:]\n    coord = '69' + coord[2:]\n    coord = '70' + coord[2:]\n    coord = '71' + coord[2:]\n    coord = '72' + coord[2:]\n    coord = '73' + coord[2:]\n    coord = '74' + coord[2:]\n    coord = '75' + coord[2:]\n    coord = '76' + coord[2:]\n    coord = '77' + coord[2:]\n    coord = '78' + coord[2:]\n    coord = '79' + coord[2:]\n    coord = '80' + coord[2:]\n    coord = '81' + coord[2:]\n    coord = '82' + coord[2:]\n    coord = '83' + coord[2:]\n    coord = '84' + coord[2:]\n    coord = '85' + coord[2:]\n    coord = '86' + coord[2:]\n    coord = '87' + coord[2:]\n    coord = '88' + coord[2:]\n    coord = '89' + coord[2:]\n    coord = '90' + coord[2:]\n    coord = '91' + coord[2:]\n    coord = '92' + coord[2:]\n    coord = '93' + coord[2:]\n    coord = '94' + coord[2:]\n    coord = '95' + coord[2:]\n    coord = '96' + coord[2:]\n    coord = '97' + coord[2:]\n    coord = '98' + coord[2:]\n    coord = '99' + coord[2:]\n    coord = '100' + coord[2:]\n    coord = '101' + coord[2:]\n    coord = '102' + coord[2:]\n    coord = '103' + coord[2:]\n    coord = '104' + coord[2:]\n    coord = '105' + coord[2:]\n    coord = '106' + coord[2:]\n    coord = '107' + coord[2:]\n    coord = '108' + coord[2:]\n    coord = '109' + coord[2:]\n    coord = '110' + coord[2:]\n    coord = '111' + coord[2:]\n    coord = '112' + coord[2:]\n    coord = '113' + coord[2:]\n    coord = '114' + coord[2:]\n    coord = '115' + coord[2:]\n    coord = '116' + coord[2:]\n    coord = '117' + coord[2:]\n    coord = '118' + coord[2:]\n    coord = '119' + coord[2:]\n    coord = '120' + coord[2:]\n    coord = '121' + coord[2:]\n    coord"
    },
    {
        "number": 4115,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(min(len(i) for i in stdin))\n"
    },
    {
        "number": 4115,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    S = str(stdin)\n    n = len(S)\n    if n < 2:\n        return 0\n\n    if n == 1:\n        return 1\n\n    left = n//2\n    right = n-left\n    # Left is not rotated, which is basically a partial rotation.\n    # Right is not rotated, which is just the same rotation as left.\n    #\n    #  Left has n-2*left, which is rotatable.\n    #  Right has n-2*right, which is not rotatable.\n    #  Left is not rotated, which is rotated by two iterations.\n    #  Right is rotated by two iterations.\n    #  Left is rotated by n-1-2-1-2-1, which is rotated by n-1-2-2.\n    #\n    #  Left has 2^(left+n-left) palindromes.\n    #  Right has 2^(right+n-right) palindromes.\n    #\n    #\n    #\n    #  We need to find the minimum number of rotations needed to make the palindromes.\n    #  For example, if we rotate S to get palindromes, we will rotate S to get palindromes.\n    #  (0, 2, 1, 1, 2, 1, 0)\n    #  (0, 1, 2, 1, 2, 0, 0)\n    #  (0, 2, 1, 1, 2, 0, 0)\n    #  (0, 1, 2, 1, 2, 1, 0)\n    #  (0, 2, 0, 0, 1, 2, 0)\n    #  (0, 1, 0, 0, 1, 0, 0)\n    #  (0, 1, 0, 0, 2, 0, 0)\n    #  (0, 2, 0, 0, 1, 1, 1)\n    #  (0, 2, 0, 0, 2, 0, 0)\n    #\n    #  The minimum is 2, as this is a possible rotation.\n\n    left_rot = left*2\n    right_rot = right*2\n\n    if left < n:\n        left_rot -= n\n        left_rot %= n\n    if right < n:\n        right_rot -= n\n        right_rot %= n\n    if left_rot == n:\n        return right_rot\n    if right_rot == n:\n        return left_rot\n    if left_rot < right_rot:\n        return right_rot + left_rot\n    else:\n        return left_rot + right_rot\n"
    },
    {
        "number": 4115,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin.strip()\n    if len(string) < 2:\n        return len(string)\n    dp = [1 for _ in range(len(string))]\n    for i in range(1, len(string)):\n        if string[i] == string[i-1]:\n            dp[i] = dp[i-1] + 2\n        else:\n            dp[i] = dp[i-1] + 1\n    answer = dp[-1]\n    return answer\n\"\"\"\ndef"
    },
    {
        "number": 4115,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    def is_palindrome(s: str) -> bool:\n        return s == s[::-1]\n    \n    def get_palindromes(s: str) -> list[str]:\n        # return [s[::-1]]\n        # return [s[::-1][1::]]\n        # return [s[::-1][::]]\n        return [s[::-1][::]]\n    \n    def minimum_hug(string: str) -> int:\n        \n        def extract_index_of(s: str, start: int, end: int) -> int:\n            if start > end:\n                return 0\n            \n            while start <= end:\n                mid = (start + end) // 2\n                if is_palindrome(s[mid]):\n                    start = mid + 1\n                else:\n                    end = mid - 1\n            \n            return start\n        \n        left, right = 0, len(string) - 1\n        \n        while left <= right:\n            mid = (left + right) // 2\n            if is_palindrome(string[mid]):\n                left = mid + 1\n            else:\n                right = mid - 1\n        \n        return left\n    \n    return minimum_hug(stdin)"
    },
    {
        "number": 4115,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def isPalindrome(string: str) -> bool:\n        return string == string[::-1]\n    \n    def rev(string: str) -> str:\n        return string[::-1]\n    \n    def same(string1: str, string2: str) -> bool:\n        return string1 == string2[::-1]\n    \n    def unique(s: str) -> int:\n        return len([x for x in s if x not in [x[0], x[-1]]])\n    \n    def compare(string1: str, string2: str) -> int:\n        return len([x for x in string1 if x not in string2])\n    \n    def common(string1: str, string2: str) -> int:\n        return len([x for x in string1 if x in string2])\n    \n    def first(string: str) -> int:\n        return string.lower().find('c')\n    \n    def last(string: str) -> int:\n        return string.lower().find('e')\n    \n    def replace(string: str, char: str, index: int, count: int) -> str:\n        return string.replace(char, str(index + count), 1)\n    \n    string = rev(stdin)\n    string = string.replace(' ', '')\n    string = string.replace('c', '1')\n    string = string.replace('e', '2')\n    string = string.replace('o', '3')\n    string = string.replace('r', '4')\n    string = string.replace('u', '5')\n    string = string.replace('t', '6')\n    string = string.replace('y', '7')\n    string = string.replace('i', '8')\n    string = string.replace('o', '9')\n    string = string.replace('u', '10')\n    string = string.replace('f', '11')\n    string = string.replace('t', '12')\n    string = string.replace('y', '13')\n    string = string.replace('a', '14')\n    string = string.replace('r', '15')\n    string = string.replace('i', '16')\n    string = string.replace('d', '17')\n    string = string.replace('s', '18')\n    string = string.replace('p', '19')\n    string = string.replace('t', '20')\n    string = string.replace('f', '21')\n    string = string.replace('i', '22')\n    string = string.replace('a', '23')\n    string = string.replace('o', '24')\n    string = string.replace('e', '25')\n    string = string.replace('a', '26')\n    string = string.replace('r', '27')\n    string = string.replace('i', '28')\n    string = string.replace('d', '29')\n    string = string.replace('s', '30')\n    string = string.replace('t', '31')\n    string = string.replace('f', '32')\n    string = string.replace('y', '33')\n    string = string.replace('a', '34')\n    string = string.replace('t', '35')\n    string = string.replace('u', '36')\n    string = string.replace('o', '37')\n    string = string.replace('d', '38')\n    string = string.replace('u', '39')\n    string = string.replace('r', '40')\n    string = string.replace('i', '41')\n    string = string.replace('n', '42')\n    string = string.replace('g', '43')\n    string = string.replace('i', '44')\n    string = string.replace('s', '45')\n    string = string.replace('e', '46')\n    string = string.replace('l', '47')\n    string = string.replace('e', '48')\n    string = string.replace('p', '49')\n    string = string.replace('c', '50')\n    string = string.replace('h', '51')\n    string = string.replace('o', '52')\n    string = string.replace('n', '53')\n    string = string.replace('c', '54')\n    string = string.replace('c', '55')\n    string = string.replace('b', '56')\n    string = string.replace('o', '57')\n    string = string.replace('n', '58')\n    string = string.replace('g', '59')\n    string = string.replace('o', '60')\n    string = string.replace('f', '61')\n    string = string.replace('r', '62')\n    string = string.replace('u', '63')\n    string = string.replace('i', '64')\n    string = string.replace('t', '65')\n    string = string.replace('g', '66')\n    string = string.replace('g', '67')\n    string = string.replace('f', '68')\n    string = string.replace('i', '69')\n    string = string.replace('g', '70')\n    string = string.replace('g', '71')\n    string = string.replace('n', '72')\n    string = string.replace('f', '73')\n    string = string.replace('o', '74')\n    string = string.replace('l', '75')\n    string = string.replace('h', '76')\n    string = string.replace('r', '77')\n    string = string.replace('h', '78')\n    string = string.replace('o', '79')\n    string = string.replace('t', '80')\n    string = string.replace('f', '81')\n    string = string.replace('c', '82')\n    string = string.replace('c', '83')\n    string = string.replace('c', '84')\n    string = string.replace('b', '85')\n    string = string.replace('o', '86')\n    string = string.replace('l', '87')\n    string = string.replace('i', '88')\n    string = string.replace('n', '89')\n    string = string.replace('t', '90')\n    string = string.replace('l', '91')\n    string = string.replace('i', '92')\n    string = string.replace('i', '93')\n    string = string.replace('i', '94')\n    string = string.replace('h', '95')\n    string = string.replace('o', '96')\n    string = string.replace('r', '97')\n    string = string.replace('n', '98')\n    string = string.replace('i', '99')\n    string = string.replace('t', '100')\n    string = string.replace('c', '101')\n    string = string.replace('g', '102')\n    string = string.replace('c', '103')\n    string = string.replace('f', '104')\n    string = string.replace('i', '105')\n    string = string.replace('s', '106')\n    string = string.replace('c', '107')\n    string = string.replace('o', '108')\n    string = string.replace('e', '109')\n    string = string.replace('c', '110')\n    string = string.replace('e', '111')\n    string = string.replace('s', '112')\n    string = string.replace('c', '113')\n    string = string.replace('b', '114')\n    string = string.replace('o', '115')\n    string = string.replace('h', '116')\n    string = string.replace('t', '117')\n    string = string.replace('s', '118')\n    string = string.replace('r',"
    },
    {
        "number": 4115,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip().split()[0])\n    S = stdin.strip().split()[1:]\n    if len(S)!= N:\n        return 0\n    s = set(S)\n    for i in range(1, N):\n        if len(s)!= N - i:\n            return 0\n        if S[i] not in s:\n            return 0\n    return 1\n"
    },
    {
        "number": 4115,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    S = str(stdin)\n    dic = {}\n    for i in S:\n        if i in dic:\n            dic[i] += 1\n        else:\n            dic[i] = 1\n    lst = []\n    for i in dic:\n        if dic[i] >= 2:\n            lst.append(i)\n    lst.sort()\n    answer = len(lst)\n    print(answer)\n\n-----Sample Output-----\n\n2\n\nFor example, we can change the fourth character to o and get a palindrome redooder.\ndef"
    },
    {
        "number": 4115,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    def find(s: str, b: str) -> int:\n        cnt = 0\n        for i in range(len(s) - 1):\n            if s[i]!= b[i] and s[i]!= b[i + 1]:\n                cnt += 1\n        return cnt\n        \n    def check(b: str, s: str) -> bool:\n        if len(b) < len(s):\n            return False\n        if len(b) > len(s):\n            return False\n        if b == s:\n            return True\n        return False\n    \n    N = int(stdin)\n    for _ in range(N):\n        stdin = stdin[0:len(stdin) - 1]\n        \n        s = list(stdin)\n        b = list(stdin)\n        for i in range(len(s)):\n            if s[i]!= b[i]:\n                if s[i]!= b[i + 1] and s[i]!= b[i - 1]:\n                    s[i] = s[i] + b[i + 1]\n                    s[i + 1] = b[i]\n                    b[i] = s[i]\n                    b[i + 1] = s[i]\n        if check(b, s):\n            s = \"\".join(s)\n            return s\n    return \"NO\"\n\n-----Sample Output-----\nNO\n\nInput\n\nredcoder\n\nOUTPUT\n\nNO\n\nSample Input\n\nredcoder\n\nOUTPUT\n\nNO\n\nNote\n\nredcoder does not need to change any characters.\n\nredcoder will always change the first one, so reducing it will increase the answer.\n\nReducer is at index 0, which means that the string we return contains the last character of s.\n\nThe answer is the length of s if s has all its characters in the correct order.\n\n\"\"\"\ndef"
    },
    {
        "number": 4115,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    (1) \u6587\u5b57\u5217\u3067\u5206\u304b\u308b\n    (2) \u6700\u521d\u306e\u6587\u5b57\u306f\u5358\u8a9e\u3092\u542b\u3080\u5834\u5408\uff1a\n    (1) \u6587\u5b57\u5217\u3067\u5206\u304b\u308b\n    (2) \u6700\u521d\u306e\u6587\u5b57\u306f\u5358\u8a9e\u3092\u542b\u307e\u306a\u3044\u5834\u5408\uff1a\n    (2) \u6700\u521d\u306e\u6587\u5b57\u306f\u5358\u8a9e\u3092\u542b\u307e\u306a\u3044\u5834\u5408\uff1a\n    \"\"\"\n    answer = 0\n    for s in stdin:\n        if s == 'c':\n            answer += 1\n        else:\n            answer += 1\n            answer += 1\n    return answer\n\n----------------------------\n"
    },
    {
        "number": 4115,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    ans = 0\n    for line in stdin.split():\n        if line[0] == \"o\":\n            ans += 1\n            line = line[1:]\n            if line[-1] == \"o\":\n                ans += 1\n            line = line[:-1]\n            if line[-1] == \"c\":\n                ans += 1\n    return str(ans)\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4116,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, answer = [int(i) for i in stdin.split()]\n    def factorial(n):\n        return fact[n] if n!= 0 else 0\n    return 'Yes' if N * factorial(N-2) > N * factorial(N-1) else 'No'\n"
    },
    {
        "number": 4116,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    def getMultiplicationTable(n: int) -> int:\n        table = [0 for _ in range(10)]\n        for i in range(1, 10):\n            for j in range(10):\n                if i == j:\n                    table[i] = n\n                elif n == 0:\n                    table[j] = i\n                else:\n                    table[i] = table[j]*n\n                    n = n - (table[i] % 100)\n                    if n < 0:\n                        return -1\n        return table[10]\n    '''\n    import math\n    table = [0 for _ in range(10)]\n    n = int(stdin)\n    n = n*math.factorial(n)\n    for i in range(1, 10):\n        table[i] = n % 10\n        n = n//10\n\n    if n == 0:\n        return 'Yes'\n    else:\n        return 'No'\n    return\n"
    },
    {
        "number": 4116,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\""
    },
    {
        "number": 4116,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n-----Sample Input 1-----\n0\n\n-----Sample Output 1-----\nNo\n\n0 can be represented as:\n0 \\times 0 = 0\n\n-----Constraints-----\n - 1 \\leq N \\leq 100\n - N is an integer.\n\n-----Idea:\n 1. use logic to find out the power of a number.\n 2. We will do this one by using the bitwise operator:\n    - if the number is divisible by 4, we find that the number has a power of 2\n    - else, we find the first power of 2 which is not greater than the number.\n    - then we find the power of number by looking at it's base.\n    - finally we check that the result is greater than the number.\n    - if the result is greater than the number, we have a power of 2.\n    - if the result is less than or equal to the number, we have a power of 3.\n    - if the result is equal to or less than or greater than the number, we have a power of 5.\n\n\"\"\""
    },
    {
        "number": 4116,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n  return \"Yes\" if (3 * 2 + 1 * 2 + 2 * 2 + 3 * 2 + 5) % 10 else \"No\"\n\nExplanation\n\n-----Input-----\nInput is given from Standard Input in the following format:\n\n10\n\n-----Output-----\nYes\n\n10 can be represented as, for example, 2 \\times 5.\n\n=====Approximation=====\n"
    },
    {
        "number": 4116,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N == 0:\n        return \"No\"\n    if N == 1:\n        return \"Yes\"\n    ans = 1\n    for i in range(1,10):\n        ans *= i\n    return str(ans)"
    },
    {
        "number": 4116,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n  numbers = list(map(int, stdin))\n  answer = False\n  for i in range(len(numbers)):\n    for j in range(len(numbers) - 1, i, -1):\n      if numbers[j] * numbers[i] == 9:\n        answer = True\n  return answer\n\ndef"
    },
    {
        "number": 4116,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(1, 10):\n        for j in range(i, 10):\n            for k in range(j, 10):\n                if (i * j) % 10 == k % 10:\n                    print('Yes')\n                    return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 4116,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if all(num <= 9 for num in map(int, stdin.split())) else \"No\"\n"
    },
    {
        "number": 4116,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Replace None with the actual return value\n    return None\n\ndef"
    },
    {
        "number": 4117,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin[0])\n    L_1 = int(stdin[1])\n    L_2 = int(stdin[2])\n    L_3 = int(stdin[3])\n    L_4 = int(stdin[4])\n    L_5 = int(stdin[5])\n\n    def countTriples(L_i, L_j, L_k):\n        n1 = L_i - L_1\n        n2 = L_j - L_2\n        n3 = L_k - L_3\n        if n1 == 0 or n2 == 0 or n3 == 0:\n            return 0\n        elif n1 + n2 + n3 == L_1 + L_2 + L_3 + L_4 + L_5:\n            return n1 * n2 * n3\n        elif n1 + n2 + n3 == L_1 + L_2 + L_3 + L_4:\n            return n1 * n1 * n2 * n3\n        elif n1 + n2 + n3 == L_1 + L_2 + L_3:\n            return n1 * n1 * n1 * n2 * n3\n        else:\n            return countTriples(n1, n2, n3) + countTriples(n2, n1, n3) + countTriples(n3, n1, n2) + countTriples(n1, n2, n3)\n\n    count = countTriples(L_1, L_2, L_3)\n    print(count)\n"
    },
    {
        "number": 4117,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    L = list(map(int, stdin.strip().split()))\n    for i in range(len(L)):\n        for j in range(i + 1, len(L)):\n            for k in range(j + 1, len(L)):\n                if L[i] + L[j] + L[k] > L[-1]:\n                    L[-1], L[j], L[k] = L[j], L[k], L[-1]\n    print(len(set(L)))\n\n-----Sample Output-----\n3\n5\n\nThe following five triples (i, j, k) satisfy the conditions: (1, 3, 4), (1, 4, 5), (2, 3, 4), (2, 4, 5), and (3, 4, 5).\nthe input comes from standard input.\n\n-----Sample Input-----\n5\n4 4 9 7 5\n\n-----Sample Output-----\n5\n\nThe following five triples (i, j, k) satisfy the conditions: (1, 3, 4), (1, 4, 5), (2, 3, 4), (2, 4, 5), and (3, 4, 5).\n"
    },
    {
        "number": 4117,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    L_nums = list(map(int, stdin.strip().split()))\n    L_max = max(L_nums)\n    L_min = min(L_nums)\n    L_max_floor = int(L_max // 3)\n    L_min_floor = int(L_min // 3)\n    res = 1\n    for i in range(L_min_floor, L_max_floor):\n        for j in range(i+1, L_max_floor):\n            k = L_max_floor - i\n            L_k = L_max_floor - j\n            if all([L_k == k or L_k == (i+j) or L_k == (i+j)]) and L_nums[i] + L_nums[j] > L_k:\n                res += 1\n    return str(res)\n"
    },
    {
        "number": 4117,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    # (0,0)\n    if n == 0:\n        return '0'\n    # (1,1)\n    if n == 1:\n        return '1'\n    # (1,2)\n    if n == 2:\n        return '1'\n    # (1,3)\n    if n == 3:\n        return '1'\n    # (2,0)\n    if n == 4:\n        return '1'\n    # (2,1)\n    if n == 5:\n        return '1'\n    # (2,2)\n    if n == 6:\n        return '1'\n    # (3,0)\n    if n == 7:\n        return '1'\n    # (3,1)\n    if n == 8:\n        return '1'\n    # (3,2)\n    if n == 9:\n        return '1'\n    # (4,0)\n    if n == 10:\n        return '1'\n    # (4,1)\n    if n == 11:\n        return '1'\n    # (4,2)\n    if n == 12:\n        return '1'\n    # (5,0)\n    if n == 13:\n        return '1'\n    # (5,1)\n    if n == 14:\n        return '1'\n    # (5,2)\n    if n == 15:\n        return '1'\n    # (6,0)\n    if n == 16:\n        return '1'\n    # (6,1)\n    if n == 17:\n        return '1'\n    # (6,2)\n    if n == 18:\n        return '1'\n    # (7,0)\n    if n == 19:\n        return '1'\n    # (7,1)\n    if n == 20:\n        return '1'\n    # (7,2)\n    if n == 21:\n        return '1'\n    # (8,0)\n    if n == 22:\n        return '1'\n    # (8,1)\n    if n == 23:\n        return '1'\n    # (8,2)\n    if n == 24:\n        return '1'\n    # (9,0)\n    if n == 25:\n        return '1'\n    # (9,1)\n    if n == 26:\n        return '1'\n    # (9,2)\n    if n == 27:\n        return '1'\n    # (10,0)\n    if n == 28:\n        return '1'\n    # (10,1)\n    if n == 29:\n        return '1'\n    # (10,2)\n    if n == 30:\n        return '1'\n    # (11,0)\n    if n == 31:\n        return '1'\n    # (11,1)\n    if n == 32:\n        return '1'\n    # (11,2)\n    if n == 33:\n        return '1'\n    # (12,0)\n    if n == 34:\n        return '1'\n    # (12,1)\n    if n == 35:\n        return '1'\n    # (12,2)\n    if n == 36:\n        return '1'\n    # (13,0)\n    if n == 37:\n        return '1'\n    # (13,1)\n    if n == 38:\n        return '1'\n    # (13,2)\n    if n == 39:\n        return '1'\n    # (14,0)\n    if n == 40:\n        return '1'\n    # (14,1)\n    if n == 41:\n        return '1'\n    # (14,2)\n    if n == 42:\n        return '1'\n    # (15,0)\n    if n == 43:\n        return '1'\n    # (15,1)\n    if n == 44:\n        return '1'\n    # (15,2)\n    if n == 45:\n        return '1'\n    # (16,0)\n    if n == 46:\n        return '1'\n    # (16,1)\n    if n == 47:\n        return '1'\n    # (16,2)\n    if n == 48:\n        return '1'\n    # (17,0)\n    if n == 49:\n        return '1'\n    # (17,1)\n    if n == 50:\n        return '1'\n    # (17,2)\n    if n == 51:\n        return '1'\n    # (18,0)\n    if n == 52:\n        return '1'\n    # (18,1)\n    if n == 53:\n        return '1'\n    # (18,2)\n    if n == 54:\n        return '1'\n    # (19,0)\n    if n == 55:\n        return '1'\n    # (19,1)\n    if n == 56:\n        return '1'\n    # (19,2)\n    if n == 57:\n        return '1'\n    # (20,0)\n    if n == 58:\n        return '1'\n    # (20,1)\n    if n == 59:\n        return '1'\n    # (20,2)\n    if n == 60:\n        return '1'\n    # (21,0)\n    if n == 61:\n        return '1'\n    # (21,1)\n    if n == 62:\n        return '1'\n    # (21,2)\n    if n == 63:\n        return '1'\n    # (22,0)\n    if n == 64:\n        return '1'\n    # (22,1)\n    if n == 65:\n        return '1'\n    # (22,2)\n    if n == 66:\n        return '1'\n    # (23,0)\n    if n == 67:\n        return '1'\n    # (23,1)\n    if n == 68:\n        return '1'\n    # (23,2)\n    if n == 69:\n        return '1'\n    # (24,0)\n    if n == 70:\n        return '1'\n    # (24,1)\n    if n == 71:\n        return '1'\n    # (24,2)\n    if n == 72:\n        return '1'\n    # (25,0)\n    if n == 73:\n        return '1'\n    # (25,1)\n    if n == 74:\n        return '1'\n    # (25,2)\n    if n == 75:\n        return '1'\n    # (26,0)\n    if n == 76:\n        return '1'\n    # (26,1)\n    if n == 77:\n        return '1'\n    # (26,2)\n    if n == 78:\n        return '1'\n    # (27,0)\n    if n == 79:\n        return '1'\n    # (27,1)\n    if n == 80:\n        return '1'\n    # (27,2)\n    if n =="
    },
    {
        "number": 4117,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def three_dif(a: int, b: int, c: int):\n        return a + b + c - 1 if a + b + c <= 1000 else 0\n    \n    def cal_triple(n: int):\n        triple = []\n        for i in range(1, n):\n            for j in range(i + 1):\n                k = i - j\n                triple.append(i + j + k)\n                if three_dif(i, j, k) > 0:\n                    break\n        return triple\n\n    def triangle(n: int):\n        return cal_triple(n)\n\n    N = int(input())\n    L_1 = map(int, input().split())\n    L_2 = map(int, input().split())\n    L_3 = map(int, input().split())\n    triple = triangle(N)\n    answer = 0\n    for i in triple:\n        if i in L_1:\n            answer += 1\n        if i in L_2:\n            answer += 1\n        if i in L_3:\n            answer += 1\n    print(answer)\n\"\"\"\n\ndef"
    },
    {
        "number": 4117,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    L_1 = list(map(int, stdin.strip().split()))\n    L_2 = list(map(int, stdin.strip().split()))\n    L_3 = list(map(int, stdin.strip().split()))\n    L_4 = list(map(int, stdin.strip().split()))\n    L_5 = list(map(int, stdin.strip().split()))\n    triples = [\n        [L_1[0], L_1[1], L_1[2], L_2[0], L_2[1], L_2[2], L_3[0], L_3[1], L_3[2], L_4[0], L_4[1], L_4[2], L_5[0], L_5[1], L_5[2]],\n        [L_1[0], L_1[1], L_1[2], L_2[0], L_2[1], L_2[2], L_3[0], L_3[1], L_3[2], L_4[0], L_4[1], L_4[2], L_5[0], L_5[1], L_5[2]]\n    ]\n    triples = sorted(triples, key=lambda x: sum(x))\n    ans = []\n    for i in range(len(triples)):\n        ans.append(triples[i][0] * triples[i][1] * triples[i][2])\n    return str(len(set(ans)))\n"
    },
    {
        "number": 4117,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Edge cases\n    if len(stdin) < 3:\n        return \"\"\n    \n    nums = list(map(int, stdin.split()))\n    \n    def next_triple(nums: list, idx: int) -> str:\n        if idx == len(nums):\n            return \"\"\n        \n        if idx < len(nums) and nums[idx] == 1:\n            return f\"{nums[idx]}\" + next_triple(nums, idx + 1)\n        \n        if idx < len(nums) and nums[idx] == 2:\n            return f\"{nums[idx]}{next_triple(nums, idx + 1)}\" + next_triple(nums, idx + 2)\n        \n        return \"\"\n    \n    answer = next_triple(nums, 0)\n    \n    return answer"
    },
    {
        "number": 4117,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Do not return anything, modify stdin in-place instead.\n    \"\"\"\n    N = int(input())\n    L_1 = list(map(int, input().split()))\n    L_2 = list(map(int, input().split()))\n    L_3 = list(map(int, input().split()))\n    L_4 = list(map(int, input().split()))\n    L_5 = list(map(int, input().split()))\n    L_6 = list(map(int, input().split()))\n    L_7 = list(map(int, input().split()))\n    L_8 = list(map(int, input().split()))\n    L_9 = list(map(int, input().split()))\n    L_10 = list(map(int, input().split()))\n    L_11 = list(map(int, input().split()))\n    L_12 = list(map(int, input().split()))\n    L_13 = list(map(int, input().split()))\n    L_14 = list(map(int, input().split()))\n    L_15 = list(map(int, input().split()))\n    L_16 = list(map(int, input().split()))\n    L_17 = list(map(int, input().split()))\n    L_18 = list(map(int, input().split()))\n    L_19 = list(map(int, input().split()))\n    L_20 = list(map(int, input().split()))\n    L_21 = list(map(int, input().split()))\n    L_22 = list(map(int, input().split()))\n    L_23 = list(map(int, input().split()))\n    L_24 = list(map(int, input().split()))\n    L_25 = list(map(int, input().split()))\n    L_26 = list(map(int, input().split()))\n    L_27 = list(map(int, input().split()))\n    L_28 = list(map(int, input().split()))\n    L_29 = list(map(int, input().split()))\n    L_30 = list(map(int, input().split()))\n    L_31 = list(map(int, input().split()))\n    L_32 = list(map(int, input().split()))\n    L_33 = list(map(int, input().split()))\n    L_34 = list(map(int, input().split()))\n    L_35 = list(map(int, input().split()))\n    L_36 = list(map(int, input().split()))\n    L_37 = list(map(int, input().split()))\n    L_38 = list(map(int, input().split()))\n    L_39 = list(map(int, input().split()))\n    L_40 = list(map(int, input().split()))\n    L_41 = list(map(int, input().split()))\n    L_42 = list(map(int, input().split()))\n    L_43 = list(map(int, input().split()))\n    L_44 = list(map(int, input().split()))\n    L_45 = list(map(int, input().split()))\n    L_46 = list(map(int, input().split()))\n    L_47 = list(map(int, input().split()))\n    L_48 = list(map(int, input().split()))\n    L_49 = list(map(int, input().split()))\n    L_50 = list(map(int, input().split()))\n    L_51 = list(map(int, input().split()))\n    L_52 = list(map(int, input().split()))\n    L_53 = list(map(int, input().split()))\n    L_54 = list(map(int, input().split()))\n    L_55 = list(map(int, input().split()))\n    L_56 = list(map(int, input().split()))\n    L_57 = list(map(int, input().split()))\n    L_58 = list(map(int, input().split()))\n    L_59 = list(map(int, input().split()))\n    L_60 = list(map(int, input().split()))\n    L_61 = list(map(int, input().split()))\n    L_62 = list(map(int, input().split()))\n    L_63 = list(map(int, input().split()))\n    L_64 = list(map(int, input().split()))\n    L_65 = list(map(int, input().split()))\n    L_66 = list(map(int, input().split()))\n    L_67 = list(map(int, input().split()))\n    L_68 = list(map(int, input().split()))\n    L_69 = list(map(int, input().split()))\n    L_70 = list(map(int, input().split()))\n    L_71 = list(map(int, input().split()))\n    L_72 = list(map(int, input().split()))\n    L_73 = list(map(int, input().split()))\n    L_74 = list(map(int, input().split()))\n    L_75 = list(map(int, input().split()))\n    L_76 = list(map(int, input().split()))\n    L_77 = list(map(int, input().split()))\n    L_78 = list(map(int, input().split()))\n    L_79 = list(map(int, input().split()))\n    L_80 = list(map(int, input().split()))\n    L_81 = list(map(int, input().split()))\n    L_82 = list(map(int, input().split()))\n    L_83 = list(map(int, input().split()))\n    L_84 = list(map(int, input().split()))\n    L_85 = list(map(int, input().split()))\n    L_86 = list(map(int, input().split()))\n    L_87 = list(map(int, input().split()))\n    L_88 = list(map(int, input().split()))\n    L_89 = list(map(int, input().split()))\n    L_90 = list(map(int, input().split()))\n    L_91 = list(map(int, input().split()))\n    L_92 = list(map(int, input().split()))\n    L_93 = list(map(int, input().split()))\n    L_94 = list(map(int, input().split()))\n    L_95 = list(map(int, input().split()))\n    L_96 = list(map(int, input().split()))\n    L_97 = list(map(int, input().split()))\n    L_98 = list(map(int, input().split()))\n    L_99 = list(map(int, input().split()))\n    L_100 = list(map(int"
    },
    {
        "number": 4117,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    L_1 = list(map(int, stdin.split()))\n    L_2 = list(map(int, stdin.split()))\n    L_3 = list(map(int, stdin.split()))\n    L_4 = list(map(int, stdin.split()))\n    L_5 = list(map(int, stdin.split()))\n    L_6 = list(map(int, stdin.split()))\n    L_7 = list(map(int, stdin.split()))\n    L_8 = list(map(int, stdin.split()))\n    L_9 = list(map(int, stdin.split()))\n    triples = [L_1, L_2, L_3, L_4, L_5, L_6, L_7, L_8, L_9]\n    for i in range(len(triples)):\n        triples[i] = sorted(triples[i])\n    triples.sort()\n    lengths = [i for i in range(len(triples))]\n    count = 0\n    for j in range(len(triples)):\n        for k in range(j, len(triples)):\n            if (triples[j][0] <= triples[k][0] <= triples[j][1] <= triples[k][1] <= triples[k][2] <= triples[k][3] <= triples[k][4]) and (triples[k][0]!= triples[j][0] or triples[k][1]!= triples[j][1] or triples[k][2]!= triples[j][2] or triples[k][3]!= triples[j][3] or triples[k][4]!= triples[j][4]):\n                count += 1\n    print(count)\n\n\n\n-------------------\nThe following program is modified from the following sources:\nhttps://www.geeksforgeeks.org/count-triplets-containing-multiple-positive-numbers-in-an-array/\nhttps://www.geeksforgeeks.org/count-triplets-containing-multiple-positive-numbers-in-an-array-set-using-set-composition/\n\"\"\"\n\ndef"
    },
    {
        "number": 4117,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n <= 3:\n        return str(n)\n    \n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    dp[1][1] = 1\n    for i in range(2, n + 1):\n        for j in range(1, i + 1):\n            for k in range(1, j + 1):\n                dp[i][j] += dp[i - 1][k] + dp[k - 1][j - 1]\n    \n    triples = []\n    for i in range(1, n + 1):\n        for j in range(1, i + 1):\n            for k in range(1, j + 1):\n                triples.append([i, j, k])\n    \n    result = 1\n    for t in triples:\n        if t[0] == t[1] == t[2]:\n            result += dp[t[0]][t[2]]\n        else:\n            result += dp[t[0]][t[1]] + dp[t[2]][t[0]]\n    \n    return str(result)\n\n-----Sample Output-----\n5\n\nThe following three triples (i, j, k) satisfy the conditions: (1, 3, 4), (1, 4, 5), (2, 3, 4), (2, 4, 5), and (3, 4, 5).\n\n\"\"\"\nimport collections\n\ndef"
    },
    {
        "number": 4118,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4118,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    while True:\n        if A % 10 == B:\n            print(A)\n            return\n        A = A * 10 + B % 10\n        B = B // 10\n"
    },
    {
        "number": 4118,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A > B:\n        print(-1)\n    else:\n        print(A * B)\n\n-----Example 1-----\nInput:\nA 5\nB 2\n\nOutput:\n10\n\nExample 2:\nInput:\nA 4\nB 2\n\nOutput:\n0\n\nExample 3:\nInput:\nA 2\nB 1\n\nOutput:\n-1\n\ntips:\nhttps://leetcode.com/problems/multiply-strings/discuss/177085/Python-Java-Simple-Solution-with-Discuss\n\n\"\"\"\nclass Solution:\n    def multiply(self, A: int, B: int) -> int:\n        ans = A * B\n        while A <= B:\n            if A % 2 == 1:\n                ans = ans * A\n            A = A // 2\n        return ans\n"
    },
    {
        "number": 4118,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    _,A,B = map(int, stdin.split())\n    print(Takahashi(A,B))\n    return ''\n\ndef"
    },
    {
        "number": 4118,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A = int(stdin[0])\n    B = int(stdin[1])\n    if A*B < 10:\n        print(A*B)\n    else:\n        print(-1)\n    return ''"
    },
    {
        "number": 4118,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A * B == A * B or A * B == -1:\n        return '-1'\n    else:\n        return str(A * B)"
    },
    {
        "number": 4118,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return str(1)\n"
    },
    {
        "number": 4118,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A,B = map(int, stdin.split())\n    if A*B == 10:\n        print(A*B)\n    else:\n        print(-1)\n    return \"\"\n\n-----SAMPLE INPUT-----\n2 2\n\n-----SAMPLE OUTPUT-----\n-1\n\n2 2\n\n-----STANDARD INPUT-----\n2 2\n\n-----STANDARD OUTPUT-----\n10\n\n2 \\times 2 = 10.\n\n'''"
    },
    {
        "number": 4118,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin.split()\n    a, b = int(string[0]), int(string[1])\n    if a >= b:\n        a, b = b, a\n    mult = a * b\n    return str(mult) if mult > 0 else -1\n\n2 5\n2 5\ndef"
    },
    {
        "number": 4118,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A == B:\n        return '1'\n    if A < B:\n        return '-1'\n    \n    if A > 9:\n        A %= 10\n        return str(A) + \" \" + solution(str(B))\n    \n    return \"10\" + solution(str(A))\n"
    },
    {
        "number": 4119,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    x, y = map(int, stdin.split())\n\n    visited = set()\n\n    def dijkstra(x, y):\n        if (x, y) in visited:\n            return 'INF'\n        visited.add((x, y))\n        minimum = 'INF'\n        for i in range(n):\n            for j in range(m):\n                if i + j * m == x:\n                    if dijkstra(i + 1, j) == 'INF':\n                        continue\n                elif i + j * m == y:\n                    if dijkstra(i - 1, j) == 'INF':\n                        continue\n                minimum = min(minimum, dijkstra(i, j) + 1)\n        visited.remove((x, y))\n        return minimum\n\n    minimum = dijkstra(x, y)\n    if minimum == 'INF':\n        return 'INF'\n    return str(minimum)\n\nSolution:\n    def solution(stdin):\n        n, m = map(int, stdin.split())\n        x, y = map(int, stdin.split())\n        x -= 1\n        y -= 1\n\n        visited = set()\n\n        def dijkstra(x, y):\n            if (x, y) in visited:\n                return 'INF'\n            visited.add((x, y))\n            minimum = 'INF'\n            for i in range(n):\n                for j in range(m):\n                    if i + j * m == x:\n                        if dijkstra(i + 1, j) == 'INF':\n                            continue\n                    elif i + j * m == y:\n                        if dijkstra(i - 1, j) == 'INF':\n                            continue\n                    minimum = min(minimum, dijkstra(i, j) + 1)\n            visited.remove((x, y))\n            return minimum\n\n        minimum = dijkstra(x, y)\n        if minimum == 'INF':\n            return 'INF'\n        return str(minimum)\n"
    },
    {
        "number": 4119,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str(min(len(stdin), len(set([int(s) for s in stdin.split()]))))\n\n\n'''"
    },
    {
        "number": 4119,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    X = list(map(int, stdin.split()))\n    \n    for _ in range(M):\n        x, y = map(int, input().split())\n        X[x-1] = y\n    \n    visited = [0] * N\n    \n    def dfs(x, y, moves):\n        visited[x-1][y-1] = 1\n        if x == M - 1 and y == N - 1:\n            return moves\n        for dx, dy in [(1, 0), (-1, 0), (0, 1), (0, -1)]:\n            if 0 <= x + dx < N and 0 <= y + dy < M and visited[x + dx][y + dy] == 0:\n                if (dx, dy) == (0, 0):\n                    continue\n                else:\n                    visited[x + dx][y + dy] = 1\n                    moves += dfs(x + dx, y + dy, moves + 1)\n        return moves\n    \n    return str(dfs(X[0], X[1], 0))\n"
    },
    {
        "number": 4119,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    x = list(map(int, stdin.split()))\n    x = sorted(x)\n    if len(x) == 1 and m > x[0]:\n        return str(m)\n    if x[0] < 10 and len(x)!= m:\n        return \"No\"\n    if len(x) == m:\n        return \"Yes\"\n    q = deque([(x[0], 0, 0)])\n    visited = set([x[0]])\n    while q:\n        i, j, k = q.popleft()\n        for x in [i, j, k]:\n            for m in range(1, 10):\n                if (i+m, j+m, k+m) in visited:\n                    continue\n                if m == x:\n                    return str(k+m)\n                if m + x < 10 and m + x not in visited:\n                    q.append((m+x, i, j))\n                    visited.add(m+x)\n    return \"No\"\n\"\"\"\nimport collections\n\nclass Solution:\n    def minMoves(self, moves: str) -> str:\n        \n        # score = collections.defaultdict(int)\n        # d = collections.deque([(0, 0)])\n        # for move in moves:\n        #     i, j = d.popleft()\n        #     if move == \"R\":\n        #         j += 1\n        #     elif move == \"L\":\n        #         j -= 1\n        #     elif move == \"U\":\n        #         i += 1\n        #     else:\n        #         i -= 1\n        #     d.append((move, i, j))\n        \n        # score = {}\n        # score_set = set()\n        # for i, j, k in d:\n        #     score[(i, j, k)] = score[(j, k, i)] = 1 + min(score[(j, k, i)], score[(j, k, k)])\n        #     score_set.add((i, j, k))\n        # print(score)\n        # print(score_set)\n        # moves = list(moves)\n        # print(moves)\n        # print(score[(0, 0, 0)])\n        \n        score = {}\n        for i, j, k in moves:\n            score[(i, j, k)] = 1 + min(score[(i, j, k)], score[(j, k, k)])\n            score_set.add((i, j, k))\n        \n        score_set = set(score.keys())\n        score_set_len = len(score_set)\n        answer = score_set_len\n        for k in score_set:\n            if k not in score:\n                answer = min(answer, score_set_len - score[k])\n        return str(answer)\n            "
    },
    {
        "number": 4119,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    X_1, X_2,..., X_M = map(int, input().split())\n    \n    moves = []\n    for _ in range(N):\n        moves.append(list(map(int, input().split())))\n    \n    moves[X_1][X_2] += 1\n    moves[X_2][X_1] += 1\n    \n    visited = []\n    for i in range(N):\n        visited.append(0)\n    visited[X_1] = 1\n    for i in range(N):\n        visited[i] = 0\n    \n    for i in range(M):\n        visited[moves[i][0]] += 1\n        visited[moves[i][1]] += 1\n        visited[moves[i][2]] += 1\n        visited[moves[i][3]] += 1\n        visited[moves[i][4]] += 1\n    \n    min_move = float('inf')\n    for i in range(N):\n        if visited[i] == 0:\n            min_move = min(min_move, abs(moves[i][0]-moves[i][1])+abs(moves[i][2]-moves[i][3])+abs(moves[i][4]-moves[i][5]))\n    \n    print(min_move)\n    return str(min_move)\n\n\n\nprint(solution(\"3 12\"))\n\ndef"
    },
    {
        "number": 4119,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    M, N, X = [int(i) for i in stdin.split()]\n    answer = 1\n    for i in range(M, M*N+1):\n        tmp = [[-1 for _ in range(N)] for _ in range(M)]\n        for j in range(N):\n            tmp[i-M][j] = j+1\n        for j in range(M):\n            tmp[i][N-j-1] = j+1\n        for j in range(M):\n            tmp[M-j-1][N-j-1] = j+1\n        for j in range(M):\n            for k in range(N):\n                tmp[M-j-1][k] = X-k\n        for j in range(M):\n            for k in range(N):\n                tmp[M-j-1][k] = X-j\n        for j in range(M):\n            tmp[M-j-1][j] = j\n        for k in range(N):\n            tmp[M-j-1][k] = k+1\n        for k in range(N):\n            tmp[M-j-1][k] = X-k\n        if tmp[M-1][N-1] == -1:\n            continue\n        # print(tmp)\n        # print(tmp[M-1][N-1])\n        if tmp[M-1][N-1] == tmp[M-2][N-2] == X:\n            answer += 1\n    return str(answer)\n"
    },
    {
        "number": 4119,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(i) for i in stdin.split()]\n    x = [int(i) for i in range(1, n+1)]\n    y = [int(i) for i in range(1, m+1)]\n    min_moves = 0\n\n    def move(cur_x, cur_y):\n        if cur_y > cur_x:\n            cur_y -= 1\n            # Same as line:\n            # if cur_y > 0:\n            #     cur_y -= 1\n            #     move(cur_x, cur_y)\n            return cur_y\n        elif cur_y < cur_x:\n            cur_y += 1\n            # Same as line:\n            # if cur_y < n:\n            #     cur_y += 1\n            #     move(cur_x, cur_y)\n            return cur_y\n        else:\n            return cur_y\n\n    def check(cur_x, cur_y):\n        for i in range(1, m+1):\n            if move(cur_x, cur_y)!= y[i]:\n                return False\n        return True\n\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if check(i, j) and move(i, j) <= m:\n                min_moves += 1\n\n    return min_moves\n\nprint(solution(\"2 5\"))\n"
    },
    {
        "number": 4119,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n\n    X = [int(i) for i in stdin.split()]\n    X.sort()\n\n    for i in range(N):\n        for j in range(i):\n            if X[j] + X[i] == M:\n                return str(1)\n\n    return str(N + 1)\n'''"
    },
    {
        "number": 4119,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n  N, M = map(int, stdin.split())\n  X_1, X_2, X_3, X_4, X_5, X_6, X_7, X_8, X_9 = map(int, stdin.split())\n  \n  visited = [[0 for _ in range(N+1)] for _ in range(N+1)]\n  \n  def recursive_moves(X: int, y: int, visited: [int]):\n    if visited[X][y]:\n      return 0\n    if y == M-1:\n      return 1\n    if visited[X][y] == 1:\n      return 0\n    visited[X][y] = 1\n    moves = 0\n    for i in range(1, N+1):\n      if i == X or i == X+1:\n        continue\n      if i == y+1:\n        continue\n      moves += recursive_moves(i, y+1, visited)\n      \n    moves += recursive_moves(X, y+1, visited)\n    return moves\n  \n  moves = recursive_moves(X_1, X_2, visited)\n  moves += recursive_moves(X_3, X_4, visited)\n  moves += recursive_moves(X_5, X_6, visited)\n  moves += recursive_moves(X_7, X_8, visited)\n  moves += recursive_moves(X_9, X_10, visited)\n  \n  return str(min(moves, default = 'undefined'))\n"
    },
    {
        "number": 4119,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    # print(n, m)\n\n    x, y = 1, 1\n    queue = []\n    visited = [0 for _ in range(n)]\n    dx = [-1, 1, 0, 0]\n    dy = [0, 0, -1, 1]\n\n    while True:\n        # print(x, y)\n        if x == n and y == m:\n            break\n\n        queue.append([x, y])\n        visited[x] = 1\n        x += dx[y]\n        y += dy[y]\n\n    # print(queue)\n    # print(visited)\n\n    # print(x, y)\n\n    # print(dx, dy)\n\n    while queue:\n        # print(queue)\n        x, y = queue.pop(0)\n        # print(x, y)\n\n        for i in range(6):\n            if visited[x + dx[i]] == 0:\n                queue.append([x + dx[i], y])\n                visited[x + dx[i]] = 1\n            if visited[y + dy[i]] == 0:\n                queue.append([x, y + dy[i]])\n                visited[y + dy[i]] = 1\n\n    return str(len(queue))\n\n-----Sample Input-----\n3\n5\n7\n2 4 5\n1 3\n4\n5\n6\n7\n8\n9\n10\n-----Sample Output-----\n6\n\nThe objective can be achieved in five moves as follows, and this is the minimum number of moves required.\n - Initially, put the two pieces at coordinates 1 and 10.\n - Move the piece at coordinate 1 to 2.\n - Move the piece at coordinate 10 to 11.\n - Move the piece at coordinate 11 to 12.\n - Move the piece at coordinate 12 to 13.\n - Move the piece at coordinate 13 to 14.\n - Move the piece at coordinate 14 to 15.\n - Move the piece at coordinate 15 to 16.\n - Move the piece at coordinate 16 to 17.\n - Move the piece at coordinate 17 to 18.\n - Move the piece at coordinate 18 to 19.\ndef"
    },
    {
        "number": 4120,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin_list = stdin.split(' ')\n    num_of_cities, num_of_roads, num_of_options = [int(i) for i in stdin_list]\n    graph = [[] for _ in range(num_of_cities)]\n    for i in range(num_of_cities):\n        graph[i] = list(map(int, stdin_list[i].split(' ')))\n\n    num_of_distances = [[0 for _ in range(num_of_cities)] for _ in range(num_of_cities)]\n\n    for road in range(num_of_roads):\n        num_of_cities, num_of_roads, num_of_options = [int(i) for i in stdin_list[road].split(' ')]\n        for i in range(num_of_cities):\n            for j in range(num_of_cities):\n                if j!= i:\n                    num_of_distances[i][j] += num_of_options\n\n    k = num_of_options\n\n    def solve(cur_dist, cur_opt):\n        if cur_dist == k:\n            print(cur_opt)\n            return\n        for option in range(num_of_options):\n            for i in range(num_of_cities):\n                if cur_dist + 1 + graph[i][option] >= k:\n                    if cur_opt == '1':\n                        num_of_options -= 1\n                        cur_dist += 1 + graph[i][option]\n                        solve(cur_dist, '0')\n                        num_of_options += 1\n                        cur_dist += 1 + graph[i][option]\n                    else:\n                        num_of_options -= 1\n                        cur_dist += 1 + graph[i][option]\n                        solve(cur_dist, '1')\n                        num_of_options += 1\n                        cur_dist += 1 + graph[i][option]\n    solve(0, '')\n"
    },
    {
        "number": 4120,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    a = []\n    for _ in range(N):\n        x, y = map(int, stdin.split())\n        a.append((x, y))\n    a.sort(reverse=True)\n    a = [str(a[i][1]) for i in range(len(a))]\n    answer = ''.join(a)\n    return answer\nprint(solution(stdin))"
    },
    {
        "number": 4120,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    if n > k:\n        return str(k)\n    solution(stdin)\n"
    },
    {
        "number": 4120,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    \n    visited = [0] * n\n    answer = []\n\n    def backtrack(node, cur_sum, depth, node_set, cur_sum_set, visited):\n        # base cases\n        if cur_sum == k:\n            answer.append(list(node_set))\n            return\n        \n        # recursive case\n        for next in node_set:\n            if visited[next] == 0:\n                visited[next] = 1\n                backtrack(node, cur_sum + 1, depth + 1, next, node_set, visited)\n                visited[next] = 0\n        \n    for i in range(n):\n        cur_sum = 0\n        node_set = []\n        visited = [0] * n\n        backtrack(node_set, cur_sum, 1, node_set, cur_sum_set, visited)\n    \n    for i in range(n):\n        cur_sum_set = set()\n        for node in answer:\n            for node_set in node:\n                cur_sum_set.add(node_set)\n        \n    return len(list(cur_sum_set))"
    },
    {
        "number": 4120,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4120,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    answer = ''\n    \n    # Sort cities according to distances from capital\n    cities = sorted(map(int, stdin.split()))\n    \n    # Check if the number of cities are same or not\n    if n!= len(cities):\n        return '0'\n\n    # Start at the first city to check the roads\n    for i in range(m):\n        # Check if the city is included in the set of roads\n        if cities[i] in set(cities[i+1:]):\n            answer += '1'\n        else:\n            answer += '0'\n    \n    # Repeat while the number of cities are not equal to the number of roads\n    while len(answer)!= m:\n        \n        # Count the number of ways to choose the roads for repair\n        ways = int(m / k)\n        if ways <= k:\n            answer += '0' * ways\n        else:\n            answer += '1' * ways\n            \n        # Advance\n        m = k\n        answer += '0' * m\n        k = ways\n        \n    # Return the answer\n    return answer\n\n\"\"\""
    },
    {
        "number": 4120,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    k, m = map(int, stdin.split())\n    cities = []\n    for _ in range(m):\n        city_input = int(stdin.rstrip('\\n').split()[1])\n        cities.append(city_input)\n    cities.sort()\n\n    for i in range(k):\n        for j in range(len(cities)):\n            if j + 1 < len(cities) and cities[j + 1] < cities[j] and cities[j] + 1 < cities[j + 1]:\n                cities[j], cities[j + 1] = cities[j + 1], cities[j]\n    if len(cities)!= k:\n        print(len(cities))\n        return\n\n    # start = time.time()\n    for _ in range(k - len(cities)):\n        if cities[0] == cities[-1]:\n            cities = cities[1:-1]\n            # print(cities)\n        else:\n            for _ in range(len(cities) - 2):\n                cities[1:-1], cities[2] = cities[2], cities[1:-1]\n            # print(cities)\n    # print(time.time() - start)\n    # print(cities)\n    # return\n    for i in range(k):\n        for j in range(i, len(cities)):\n            if cities[j] + 1 < cities[j + 1]:\n                cities[j], cities[j + 1] = cities[j + 1], cities[j]\n    print(cities)\n    return\n"
    },
    {
        "number": 4120,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    set_options = set(map(int, stdin.split()))\n    answer = []\n    if n <= 1:\n        answer.append(str(1))\n    if n > 2:\n        answer.append(str(2))\n    for i in range(3, n + 1):\n        for j in range(1, n - i + 2):\n            answer.append(str(j * i))\n        for k in range(1, i + 1):\n            answer.append(str(j * i - k * (k + 1) // 2))\n    return''.join(answer)\n\n-----Basic idea-----\n-1. Find all $t$ roads and their corresponding ways.\n-2. Iterate through all the roads and find the minimum $k$ valid ways.\n-3. For each possible option, use the min(ways) to select the valid options.\n-4. For each option, update the answer to all the ways that include the option.\n\n-----Final idea-----\n-1. Using each $n$ iteration, find the valid ways that include all the $n$ iterations in the original set of options.\n-2. Check if the current valid options are all included in the given set. If not, add it to the set of valid options.\n-3. For each option, find the minimum $k$ valid ways.\n-4. For each option, update the answer to all the ways that include the option.\n\nComplexity\nTime O(n * 2^n)\nSpace O(n^2 * k)\n\nComplexity\nTime O(n * 2^n)\nSpace O(n^2 * k)\n\nComplexity\nTime O(n * 2^n)\nSpace O(n^2 * k)\n\nComplexity\nTime O(n * 2^n)\nSpace O(n^2 * k)\n\nComplexity\nTime O(n * 2^n)\nSpace O(n^2 * k)\n\nComplexity\nTime O(n * 2^n)\nSpace O(n^2 * k)\n\nComplexity\nTime O(n * 2^n)\nSpace O(n^2 * k)\n\nComplexity\nTime O(n * 2^n)\nSpace O(n^2 * k)\n\nComplexity\nTime O(n * 2^n)\nSpace O(n^2 * k)\n\nComplexity\nTime O(n * 2^n)\nSpace O(n^2 * k)\n\nComplexity\nTime O(n * 2^n)\nSpace O(n^2 * k)\n\nComplexity\nTime O(n * 2^n)\nSpace O(n^2 * k)\n\nComplexity\nTime O(n * 2^n)\nSpace O(n^2 * k)\n\nComplexity\nTime O(n * 2^n)\nSpace O(n^2 * k)\n\nComplexity\nTime O(n * 2^n)\nSpace O(n^2 * k)\n\nComplexity\nTime O(n * 2^n)\nSpace O(n^2 * k)\n\nComplexity\nTime O(n * 2^n)\nSpace O(n^2 * k)\n\nComplexity\nTime O(n * 2^n)\nSpace O(n^2 * k)\n\nComplexity\nTime O(n * 2^n)\nSpace O(n^2 * k)\n\nComplexity\nTime O(n * 2^n)\nSpace O(n^2 * k)\n\nComplexity\nTime O(n * 2^n)\nSpace O(n^2 * k)\n\nComplexity\nTime O(n * 2^n)\nSpace O(n^2 * k)\n\nComplexity\nTime O(n * 2^n)\nSpace O(n^2 * k)\n\nComplexity\nTime O(n * 2^n)\nSpace O(n^2 * k)\n\nComplexity\nTime O(n * 2^n)\nSpace O(n^2 * k)\n\nComplexity\nTime O(n * 2^n)\nSpace O(n^2 * k)\n\nComplexity\nTime O(n * 2^n)\nSpace O(n^2 * k)\n\nComplexity\nTime O(n * 2^n)\nSpace O(n^2 * k)\n\nComplexity\nTime O(n * 2^n)\nSpace O(n^2 * k)\n\nComplexity\nTime O(n * 2^n)\nSpace O(n^2 * k)\n\nComplexity\nTime O(n * 2^n)\nSpace O(n^2 * k)\n\nComplexity\nTime O(n * 2^n)\nSpace O("
    },
    {
        "number": 4120,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.strip())\n    n, m, option = map(int, stdin.split())\n    city = {}\n    for _ in range(n):\n        city.update({i: set([i]) for i in range(1, n+1)})\n    road = {}\n    for _ in range(m):\n        road.update({i: set([i]) for i in range(1, n+1)})\n    option = set(map(int, option.split()))\n    way = 0\n    for option in option:\n        for _ in range(k-1):\n            if option in road:\n                road = road.copy()\n            if option in city:\n                city = city.copy()\n        while True:\n            tmp = set()\n            for k, v in city.items():\n                tmp.update(v)\n                v.difference_update(tmp)\n            if len(tmp) == k:\n                way += 1\n                city.clear()\n                break\n            city.clear()\n    return str(way)\n\nn, m, k = map(int, input().strip().split())\nprint(solution(input().strip()))"
    },
    {
        "number": 4120,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    roads = [list(map(int, input().split())) for _ in range(n)]\n    ways = [0 for _ in range(k)]\n    for i in range(n):\n        ways[ways[i]] = ways[i] + 1\n    for i in range(k - 2, -1, -1):\n        for j in range(n):\n            if ways[ways[j]]!= 0:\n                ways[ways[j]] -= 1\n                ways[ways[j]] += ways[i] + 1\n                ways[ways[j]] %= k\n    print(ways[ways[k - 1]])\n"
    },
    {
        "number": 4121,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def solve(stdin):\n        a, b = map(int, stdin.split())\n        if a * b == 1:\n            return \"YES\"\n        if a * b == 2:\n            return \"YES\"\n        if a * b == 3:\n            return \"YES\"\n        if a * b == 4:\n            return \"YES\"\n        if a * b == 5:\n            return \"NO\"\n        if a * b == 6:\n            return \"NO\"\n        if a * b == 10 ** 9:\n            return \"NO\"\n        \n    return solve(stdin)\n\n\n\n'''\n\ndef"
    },
    {
        "number": 4121,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"YES\"\n    m = 2\n    for i in range(1, n):\n        m *= 2\n        m += 1\n        if m > n:\n            m = 2\n    return \"NO\"\n"
    },
    {
        "number": 4121,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 2:\n        return \"YES\"\n    if n == 3:\n        return \"NO\"\n    else:\n        l = []\n        for i in range(n):\n            l.append(int(stdin[i]))\n        l.append(1)\n        if l[0] < l[1]:\n            return \"NO\"\n        if l[0] == l[1]:\n            if l[2] == l[3]:\n                return \"YES\"\n            else:\n                return \"NO\"\n        else:\n            if l[3] == l[2]:\n                return \"YES\"\n            else:\n                return \"NO\"\n\n'''\n\n\ndef"
    },
    {
        "number": 4121,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    arr = [[0 for _ in range(N)] for _ in range(N)]\n    # print(arr)\n    a = []\n    b = []\n    c = []\n    for _ in range(N):\n        a.append(int(stdin.strip()))\n    for i in range(N):\n        b.append(a[i])\n    for j in range(N-1):\n        c.append(b[j])\n    for k in range(N-1):\n        arr[k][k] = a[k]\n    for l in range(N-2):\n        arr[l][N-1] = a[l]\n    for m in range(N-3):\n        arr[N-1][m] = a[N-1]\n    # print(arr)\n    for i in range(N-1):\n        for j in range(N-1):\n            if arr[i][j] == 0:\n                for k in range(j, N-1):\n                    arr[i][k] = arr[i][k-1]\n                    arr[i][k] += arr[k][N-2]\n    # print(arr)\n    for i in range(N-2):\n        for j in range(N-2):\n            if arr[i][j] == 0:\n                for k in range(j, N-1):\n                    arr[i][k] = arr[i][k+1]\n                    arr[i][k] += arr[i][k+1]\n                arr[i][N-2] = arr[i][N-1]\n                arr[i][N-1] = arr[N-2][N-2]\n                # print(arr)\n            else:\n                # print(arr[i][j], arr[i][j+1], arr[i+1][j], arr[i+1][j+1], arr[i+1][N-2], arr[i][N-2], arr[i][N-2])\n                for k in range(j, N-1):\n                    arr[i][k] += arr[i][k+1]\n                    arr[i][k] += arr[k][N-2]\n                    arr[i][k] += arr[k][N-1]\n    for i in range(N-2):\n        for j in range(N-2):\n            # print(arr[i][j], arr[i+1][j+1], arr[i+1][j], arr[i+1][j+1])\n            # print(arr[i][j], arr[i+1][j+1], arr[i+1][j+1], arr[i+1][N-2])\n            # print(arr[i][j], arr[i+1][j+1], arr[i+1][j+1], arr[i+1][N-2])\n            if arr[i][j] == 0:\n                for k in range(j, N-1):\n                    arr[i][k] = arr[i][k+1]\n                    arr[i][k] += arr[i][k+1]\n                    arr[i][k] += arr[k][N-2]\n                    arr[i][k] += arr[k][N-1]\n            else:\n                for k in range(j, N-1):\n                    arr[i][k] += arr[i][k+1]\n                    arr[i][k] += arr[k][N-2]\n                    arr[i][k] += arr[k][N-1]\n    # print(arr)\n    for i in range(N-2):\n        for j in range(N-2):\n            if arr[i][j] == 0:\n                for k in range(j, N-1):\n                    arr[i][k] = arr[i][k+1]\n                    arr[i][k] += arr[i][k+1]\n                    arr[i][k] += arr[i][k+1]\n                arr[i][N-2] = arr[i][N-1]\n                arr[i][N-1] = arr[N-2][N-2]\n                # print(arr)\n            else:\n                # print(arr[i][j], arr[i+1][j+1], arr[i+1][j+1], arr[i+1][N-2], arr[i][N-2], arr[i][N-2])\n                for k in range(j, N-1):\n                    arr[i][k] += arr[i][k+1]\n                    arr[i][k] += arr[i+1][k+1]\n                    arr[i][k] += arr[i][k+1]\n                arr[i][N-2] = arr[i][N-1]\n                arr[i][N-1] = arr[N-2][N-2]\n                # print(arr)\n    # print(arr)\n    for i in range(N-2):\n        for j in range(N-2):\n            if arr[i][j] == 0:\n                for k in range(j, N-1):\n                    arr[i][k] = arr[i][k+1]\n                    arr[i][k] += arr[i][k+1]\n                    arr[i][k] += arr[i][k+1]\n                arr[i][N-2] = arr[i][N-1]\n                arr[i][N-1] = arr[N-2][N-2]\n                # print(arr)\n            else:\n                # print(arr[i][j], arr[i+1][j+1], arr[i+1][j+1], arr[i"
    },
    {
        "number": 4121,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    \n    # the first brick is always the height of the wall\n    # the second brick is the height of the wall\n    # the third brick is the height of the wall\n    bricks = [int(i) for i in stdin.strip().split()]\n    \n    def dfs(height, bottom, top):\n        # the wall is complete\n        if top == bottom and bottom == 2 and bottom!= 0:\n            return 1\n        if bottom == 0:\n            return 0\n        \n        # bottom bricks are higher than the wall,\n        # the wall is complete, and the current part is the top of the wall\n        if height == bottom:\n            return 1 + dfs(height, bottom + 1, top)\n        \n        # the wall is not complete, so the current part is the top of the wall\n        if height == top:\n            return dfs(height + 1, bottom, top + 1)\n        \n        # the wall is not complete, so the current part is the bottom of the wall\n        # or the wall is not complete and the current part is the bottom of the wall\n        if height > top:\n            return 0\n        if height > bottom:\n            return 0\n        \n        # the wall is not complete, so the current part is the top of the wall\n        if height < top:\n            return 0\n        \n        # the wall is not complete, so the current part is the bottom of the wall\n        return 0\n    \n    return \"YES\" if dfs(0, bricks[0], bricks[n-1]) == 1 else \"NO\"\n\n'''\nclass Solution:\n    def wallIsComplete(self, height: List[int]) -> bool:\n        n = len(height)\n        \n        # the wall is complete\n        if n == 1:\n            return True\n        \n        # the wall is not complete\n        if height[0] == 0:\n            return True\n        \n        # the wall is not complete, but the current part is the top of the wall\n        if height[0] < 0:\n            return False\n        \n        # the wall is not complete, but the current part is the bottom of the wall\n        if height[n-1] < 0:\n            return False\n        \n        # the wall is not complete, but the current part is the bottom of the wall\n        if height[n-1] < height[0]:\n            return False\n        \n        # the wall is not complete, but the current part is the top of the wall\n        if height[0] < height[n-1]:\n            return False\n        \n        # the wall is not complete, so the current part is the top of the wall\n        return True\n"
    },
    {
        "number": 4121,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return (\"YES\" if VovaCanCompleteWall([int(i) for i in stdin.split()]) else \"NO\")\n"
    },
    {
        "number": 4121,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if Vova can complete the wall using any amount of bricks (possibly zero).\n\ndef"
    },
    {
        "number": 4121,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 4121,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return (\"YES\" if Vova.complete(stdin) else \"NO\")\n"
    },
    {
        "number": 4121,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(int(stdin)):\n        a, n = list(map(int, stdin.split()))\n        b = 2 * (n + 1)\n        c = 2 * (n + 1)\n        d = 2 * (n + 1)\n        e = 2 * (n + 1)\n        f = 2 * (n + 1)\n        g = 2 * (n + 1)\n        h = 2 * (n + 1)\n        if a == n + 1:\n            print(True)\n        elif a == 1:\n            print(False)\n        else:\n            print(False)\n"
    },
    {
        "number": 4122,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, h, d = map(int, stdin.split())\n    i = 0\n    while d > 0:\n        i = (i+1) % n\n        h, d = (d, 0) if h <= 0 else (0, h - d)\n        print(i)\n    return -1\n\nsolution(input())\n"
    },
    {
        "number": 4122,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    H, n = map(int, stdin.split())\n    d_1, d_2, d_3 = map(int, stdin.split())\n    d_n = d_1 + d_2 + d_3\n    d_1 = d_1 // 10**5\n    d_2 = d_2 // 10**5\n    d_3 = d_3 // 10**5\n    min_1 = -1\n    min_2 = -1\n    min_3 = -1\n    min_4 = -1\n    for i in range(n):\n        min_1, min_2, min_3, min_4 = min_3, min_4, min_3, min_3\n        h = H + d_1 + d_2 + d_3\n        if h >= 10**6:\n            h -= 10**6\n        if h < 0:\n            h = 0\n        if min_1 < 0:\n            if min_2 < 0:\n                if min_3 < 0:\n                    if min_4 < 0:\n                        if d_1 <= d_n:\n                            min_1 = d_1\n                        if d_2 <= d_n:\n                            min_2 = d_2\n                        if d_3 <= d_n:\n                            min_3 = d_3\n                        if d_n <= d_3:\n                            min_3 = d_3\n                        if d_n <= d_2:\n                            min_2 = d_2\n                        if d_n <= d_1:\n                            min_1 = d_1\n                        if d_n <= d_3:\n                            min_3 = d_3\n                        if d_n <= d_2:\n                            min_2 = d_2\n                        if d_n <= d_1:\n                            min_1 = d_1\n                        if d_n <= d_3:\n                            min_3 = d_3\n                        min_1 += d_1\n                        min_2 += d_2\n                        min_3 += d_3\n                        min_4 += d_n\n                        h = min_1 + min_2 + min_3 + min_4\n                        min_1 = h // 10**5\n                        min_2 = h % 10**5\n                        min_3 = h % 10**5\n                        min_4 = h % 10**5\n                        h = min_1 + min_2 + min_3 + min_4\n                        min_1 = h // 10**5\n                        min_2 = h % 10**5\n                        min_3 = h % 10**5\n                        min_4 = h % 10**5\n                        h = min_1 + min_2 + min_3 + min_4\n                        min_1 = h // 10**5\n                        min_2 = h % 10**5\n                        min_3 = h % 10**5\n                        min_4 = h % 10**5\n                        h = min_1 + min_2 + min_3 + min_4\n                        min_1 = h // 10**5\n                        min_2 = h % 10**5\n                        min_3 = h % 10**5\n                        min_4 = h % 10**5\n                        h = min_1 + min_2 + min_3 + min_4\n                        min_1 = h // 10**5\n                        min_2 = h % 10**5\n                        min_3 = h % 10**5\n                        min_4 = h % 10**5\n                        h = min_1 + min_2 + min_3 + min_4\n                        min_1 = h // 10**5\n                        min_2 = h % 10**5\n                        min_3 = h % 10**5\n                        min_4 = h % 10**5\n                        h = min_1 + min_2 + min_3 + min_4\n                        min_1 = h // 10**5\n                        min_2 = h % 10**5\n                        min_3 = h % 10**5\n                        min_4 = h % 10**5\n                        h = min_1 + min_2 + min_3 + min_4\n                        min_1 = h // 10**5\n                        min_2 = h % 10**5\n                        min_3 = h % 10**5\n                        min_4 = h % 10**5\n                        h = min_1 + min_2 + min_3 + min_4\n                        min_1 = h // 10**5\n                        min_2 = h % 10**5\n                        min_3 = h % 10**5\n                        min_4 = h % 10**5\n                        h = min_1 + min_2 + min_3 + min_4\n                        min_1 = h // 10**5\n                        min_2 = h % 10**5\n                        min_3 = h % 10**5\n                        min_4 = h % 10**5\n                        h = min_1 + min_2 + min_3 + min_4\n                        min_1 = h // 10**5\n                        min_2 = h % 10**5\n                        min_3 = h % 10**5\n                        min_4 = h % 10**5\n                        h = min_1 + min_2 + min_3 + min_4\n                        min_1 = h // 10**5\n                        min_2 = h % 10**5\n                        min_3 = h % 10**5\n                        min_4 = h % 10**5\n                        h = min_1 + min_2 + min_3 + min_4\n                        min_1 = h // 10**5\n                        min_2 = h % 10**5\n                        min_3 = h % 10**5\n                        min_4 = h % 10**5\n                        h = min_1 + min_2 + min_3 + min_4\n                        min_1 = h // 10**5\n                        min_2 = h % 10**5\n                        min_3 = h % 10**5\n                        min_4 = h % 10**5\n                        h = min_1 + min_2 + min_3 + min_4\n                        min_1 = h // 10**5\n                        min_2 = h % 10**5\n                        min_3 = h % 10**5\n                        min_4 = h % 10**5\n                        h = min_1 + min_2 + min_3 + min_4\n                        min_1 = h // 10**5\n                        min_2 = h % 10**5\n                        min_3 = h % 10**5\n                        min_4 = h % 10**5\n                        h = min_1 + min_2 + min_3 + min_4\n                        min_1 = h // 10**5\n                        min_2 = h % 10**5\n                        min_3 = h % 10**5\n                        min_4 = h % 10**5\n                        h = min_1"
    },
    {
        "number": 4122,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, h = map(int, stdin.split())\n    d = list(map(int, stdin.split()))\n    d.sort()\n    answer = 0\n    for i in range(n):\n        answer += d[i] * (10 ** (i + 1))\n    if h <= answer:\n        answer = -1\n    return answer"
    },
    {
        "number": 4122,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, h = map(int, stdin.split())\n    d_n = map(int, stdin.split())\n    if n <= 1:\n        return \"-\"\n    if d_n[0] > 0 and d_n[1] > 0:\n        print(d_n[0] + h)\n        return -1\n    if d_n[0] < 0 and d_n[1] < 0:\n        print(-1)\n        return -1\n    if d_n[0] > 0 and d_n[1] < 0:\n        print(h + d_n[0])\n        return -1\n    if d_n[0] < 0 and d_n[1] > 0:\n        print(h)\n        return -1\n    print(d_n[0] + h)\n    return d_n[0] + h\n    \n    \n"
    },
    {
        "number": 4122,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    d = list(map(int, stdin.split()))\n    d.sort()\n    n = d[-1]\n    h = d[0]\n    if (h % 10) == 0:\n        h = h * 10\n    if (n % 10) == 0:\n        n = n * 10\n    k = 0\n    for i in range(n):\n        if (h == d[i]):\n            k += 1\n        else:\n            break\n    return str(k)"
    },
    {
        "number": 4122,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    heap = []\n    m = 10 ** 9\n    for i in range(n):\n        heapq.heappush(heap, -heapq.heappop(heap) + k)\n    while heap:\n        for i in range(len(heap)):\n            if -heap[i] <= k < m:\n                m = min(-heap[i], m)\n                heap[i] = -heap[i]\n                heapq.heappop(heap)\n    if m < 0:\n        return str(m)\n    else:\n        return str(k)"
    },
    {
        "number": 4122,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, k = map(int, stdin.split())\n    h, n = map(int, stdin.split())\n    s = \"\"\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    i = 0\n    j = 0\n    while i < n:\n        if j < n:\n            s += str(a[i]) + \" \"\n            j += 1\n        else:\n            s += str(a[i]) + \" \"\n            j = 0\n            i += 1\n    k = int(k)\n    for i in range(k, n):\n        s += str(a[i]) + \" \"\n    s += str(a[n])\n    return s"
    },
    {
        "number": 4122,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    h, n = map(int, stdin.split())\n    d_1, d_2 = map(int, stdin.split())\n    def get_h():\n        return h\n    def get_n():\n        return n\n    def get_d_1():\n        return d_1\n    def get_d_2():\n        return d_2\n    def get_d_n():\n        return get_d_1() + get_d_2()\n    def check_divisible(n):\n        return n % 10 == 0\n    def get_d_1_1(n):\n        return d_1\n    def get_d_2_1(n):\n        return d_2\n    def get_d_1_2(n):\n        return d_1 * n\n    def get_d_2_2(n):\n        return d_2 * n\n    def get_d_1_3(n):\n        return d_1 * n + get_d_1_1(n)\n    def get_d_2_3(n):\n        return d_2 * n + get_d_2_1(n)\n    def get_d_1_4(n):\n        return d_1 * n + get_d_1_2(n)\n    def get_d_2_4(n):\n        return d_2 * n + get_d_2_2(n)\n    def get_d_3_1(n):\n        return get_d_1() * n\n    def get_d_3_2(n):\n        return get_d_1() * n + get_d_1_1(n)\n    def get_d_4_1(n):\n        return get_d_1() * n + get_d_1_2(n)\n    def get_d_4_2(n):\n        return get_d_1() * n + get_d_1_3(n)\n    def get_d_5_1(n):\n        return get_d_1() * n + get_d_1_4(n)\n    def get_d_5_2(n):\n        return get_d_1() * n + get_d_1_4(n) + get_d_1_1(n)\n    def get_d_6_1(n):\n        return get_d_1() * n + get_d_1_4(n) + get_d_1_2(n)\n    def get_d_6_2(n):\n        return get_d_1() * n + get_d_1_4(n) + get_d_1_3(n)\n    def get_d_7_1(n):\n        return get_d_1() * n + get_d_1_3(n)\n    def get_d_7_2(n):\n        return get_d_1() * n + get_d_1_3(n) + get_d_1_2(n)\n    def get_d_8_1(n):\n        return get_d_1() * n + get_d_1_3(n) + get_d_1_2(n) + get_d_1_1(n)\n    def get_d_8_2(n):\n        return get_d_1() * n + get_d_1_3(n) + get_d_1_2(n) + get_d_1_1(n) + get_d_1_2(n) + get_d_1_1(n)\n    def get_d_9_1(n):\n        return get_d_1() * n + get_d_1_3(n) + get_d_1_2(n) + get_d_1_1(n) + get_d_1_2(n) + get_d_1_1(n) + get_d_1_2(n) + get_d_1_1(n)\n    def get_d_9_2(n):\n        return get_d_1() * n + get_d_1_3(n) + get_d_1_2(n) + get_d_1_1(n) + get_d_1_2(n) + get_d_1_1(n) + get_d_1_2(n) + get_d_1_1(n) + get_d_1_2(n) + get_d_1_1(n) + get_d_1_2(n)\n    def get_d_10_1(n):\n        return get_d_1() * n + get_d_1_3(n) + get_d_1_2(n) + get_d_1_1(n) + get_d_1_2(n) + get_d_1_1(n) + get_d_1_2(n) + get_d_1_1(n) + get_d_1_2(n) + get_d_1_1(n) + get_d_1_2(n) + get_d_1_1(n) + get_d_1_2(n)\n    def get_d_10_2(n):\n        return get_d_1() * n + get_d_1_3(n) + get_d_1_2(n) + get_d_1_1(n) + get_d_1_2(n) + get_d_1_1(n) + get_d_1_2(n) + get_d_1_1(n) + get_d_1_2(n) + get_d_1_1(n) + get_d_1_2(n) + get_d_1_1(n) + get_d_1_2(n) + get_d_1_1(n) + get_d_1_2(n) + get_d_1_1(n) + get_d_1_2(n)\n    def get_d_11_1(n):\n        return get_d_1() * n + get_d_1_3(n) + get_d_1_2(n) + get_d_1_1(n) + get_d_1_2(n) + get_d_1_1(n) + get_d_1_2(n) + get_d_1_1(n) + get_d_1_2(n) + get_d"
    },
    {
        "number": 4122,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, K = map(int, stdin.split())\n    d_m = map(int, stdin.split())\n    \n    result = 0\n    \n    for i in range(n):\n        result = max(result, K + d_m[i])\n        \n    return result"
    },
    {
        "number": 4122,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    H, n = int(stdin[0]), int(stdin[1])\n    d = list(map(int, stdin[2:]))\n    # print(d)\n    # print(d)\n    if len(d) == 0:\n        return -1\n    k = -1\n    for i in range(n):\n        k += d[i] * (n - 1 - i)\n    if k == -1:\n        return -1\n    if H <= 0:\n        return k\n    if (k - 1) * (n - 1 - i) <= H:\n        return k + 1\n    else:\n        return -1\n"
    },
    {
        "number": 4123,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    s = stdin.strip()\n    res = []\n    for i in range(n):\n        s = list(s)\n        flag = True\n        for j in range(i + 1, n):\n            if s[j]!= s[j - 1]:\n                flag = False\n        if flag:\n            res.append(s[i])\n    return \"\".join(res)"
    },
    {
        "number": 4123,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = [line.strip() for line in stdin.splitlines()]\n    n = int(s[0])\n    s = [line[n:] for line in s[1:]]\n    for i in range(n):\n        if len(s[i]) > 2:\n            print(s[i][:2], s[i][2:])\n            s[i] = s[i][:2]\n    return \"\".join(s)\n    \nfor _ in range(int(input())):\n    s = input()\n    print(solution(s))\n\n------------------------------\n\ndef"
    },
    {
        "number": 4123,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    start = 0\n    end = n\n    seen = set()\n    while start < end:\n        if s[start:end] not in seen:\n            seen.add(s[start:end])\n            start += 1\n            end += 1\n        else:\n            start += 1\n    return \"\".join(seen)\n\nprint(solution(\"ABACABA\"))\nprint(solution(\"ZZZZAA\"))\n"
    },
    {
        "number": 4123,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    s = sorted(s)\n    for i in range(0, len(s) - 2):\n        if s[i] == s[i + 1] and s[i + 1] == s[i + 2]:\n            continue\n        else:\n            return s[i]\n\n-----Constraints-----\n\n1 <= n <= 2\n2 <= $n$ <= 100\n\nTime Limit: 1 sec\n\n-----Tags-----\ntagged\n\nExamples\nInput 1:\n\ns = \"BA\"\nn = 5\nOutput 1:\n\nBA\n\n\nExample 2:\n\ns = \"ZZZ\"\nn = 5\nOutput 2:\n\nZZ\n\nExplanation:\n\ns = \"ZZZAA\"\nn = 5\ns = \"ZZZ\"\nn = 2\ns = \"ZZ\"\nn = 1\ns = \"\"\nn = 0\ns = \"ZZ\"\nn = 0\ns = \"AA\"\nn = 0\ns = \"AA\"\nn = 1\ns = \"AA\"\nn = 1\ns = \"AA\"\nn = 2\ns = \"AA\"\nn = 2\ns = \"AZ\"\nn = 2\ns = \"AZ\"\nn = 2\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns = \"AZ\"\nn = 0\ns"
    },
    {
        "number": 4123,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n  \n  def get_str(lst: list) -> list:\n    # k = len(lst)\n    # if k == 1:\n    #   return lst\n    # elif k == 2:\n    #   return lst[0:1] + lst[1:]\n    # elif k == 3:\n    #   return lst[0] + lst[1] + lst[2]\n    # else:\n    #   return get_str(lst[0:k // 2]) + get_str(lst[k // 2:])\n    return lst\n  \n  n = int(stdin.strip())\n  s = stdin.strip().lower()\n  lst = get_str(s)\n  return ''.join(lst[i] for i in range(len(lst)) if len(lst[i]) >= 2)"
    },
    {
        "number": 4123,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Input:\n    n = int(stdin.strip())\n    s = list(stdin.strip().upper())\n    nums = []\n    for i in s:\n        nums.append(s.count(i))\n    nums.sort()\n    for i in range(n-2):\n        if nums[i+1] < nums[i]:\n            nums[i+1], nums[i] = nums[i], nums[i+1]\n    print(nums[n-2])\n    \"\"\"\n    n = len(s)\n    nums = [s.count(i) for i in s]\n    nums.sort()\n    for i in range(n-2):\n        if nums[i+1] < nums[i]:\n            nums[i+1], nums[i] = nums[i], nums[i+1]\n    print(nums[n-2])\n    \n"
    },
    {
        "number": 4123,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, string = [int(i) for i in stdin.split()]\n    return string[string.find(string[string.find(string[0])+1:string.find(string[0])+2])+1:]\n"
    },
    {
        "number": 4123,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, s = map(int, stdin.split())\n    \n    res = \"\"\n    s = list(s)\n    \n    for i in range(n):\n        tmp = []\n        for j in range(i, n):\n            if j - i == 1:\n                tmp.append(s[j])\n            else:\n                if s[j] == s[j - 1]:\n                    tmp.append(s[j])\n                    \n        if tmp:\n            if len(tmp) > 1:\n                for k in range(len(tmp) - 1):\n                    if k == 0:\n                        res += tmp[k] + tmp[k + 1]\n                    elif k == 1:\n                        res += tmp[k] + tmp[k - 1]\n            else:\n                res += tmp[0] + tmp[1]\n    return res\n\nprint(solution(input()))"
    },
    {
        "number": 4123,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = [x.lower() for x in stdin.strip().split()]\n    d = {}\n    for x in s:\n        if len(x) in d:\n            d[len(x)].append(x)\n        else:\n            d[len(x)] = [x]\n    for l,v in d.items():\n        d[l] = set(v)\n    for l,v in d.items():\n        if len(v) > 1:\n            print(\"\".join(sorted(list(v))))\n            return \"\".join(sorted(list(v)))\n    print(\"ZZ\")\n    return \"ZZ\"\n\n#####\n\ndef"
    },
    {
        "number": 4123,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = list(stdin)\n    answer = \"\"\n    for i in range(n):\n        for j in range(i+1, n):\n            # print(s[i], s[j])\n            if s[i] == s[j] and s.count(s[i]) == s.count(s[j]):\n                answer += s[i]\n    return answer\n\ndef"
    },
    {
        "number": 4124,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"6\"\n\n-----------------------------------------------------------------------------------\n\nInput\n\nstdin is a function that takes in the string.\n\nOutput\n\nPrint the minimum number of moves required.\n\nConstraints\n1 <= s.length <= 10^5\n1 <= t.length <= 10^5\n\nExample\nInput\n\nGiven: \"ab\"\n\nOutput: 3\nExplanation: The result is \"ab\" $t$ times. The move is applied to \"ab\" once, and the string becomes \"ab\" again. \n\nInput\n\nGiven: \"ab\"\n\nOutput: 5\nExplanation: The result is \"ab\" $t$ times, which is the same as \"ab\", which is unchanged. \n\nInput\n\nGiven: \"codeforces\"\n\nOutput: 3\nExplanation: The result is \"codeforces\" $8$ times. The move is applied to \"codeforces\" once, and the string becomes \"codeforces\" again. \n\n----------------------------------------------------------------------------------\n\"\"\""
    },
    {
        "number": 4124,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split('\\n')\n    s = s.split(' ')\n    t = t.split(' ')\n    print(len(s))\n    print(len(t))\n    if len(s)!= len(t):\n        return 'NO'\n    minMoves = 0\n    if len(s) > len(t):\n        for i in range(len(t)):\n            minMoves = min(minMoves, len(s[i]) - len(t[i]))\n        return minMoves\n    for i in range(len(s)):\n        minMoves = min(minMoves, len(s[i]) - len(t[i]))\n    return minMoves"
    },
    {
        "number": 4124,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split(\" \")\n    s = s.replace(\" \", \"\")\n    t = t.replace(\" \", \"\")\n    if len(s) > len(t):\n        return len(s) - len(t)\n    if len(s) < len(t):\n        return len(t) - len(s)\n    if s == t:\n        return len(s) - len(t)\n    if s!= t:\n        return len(s) - len(t)\n    return 0\n\n### Test\n"
    },
    {
        "number": 4124,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    l = len(s)\n    answer = len(t) + len(t) - (l - 2) * 1\n\n    return answer\n"
    },
    {
        "number": 4124,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return str(min(len(s) - len(t) for s, t in zip(stdin.split()[1::2], stdin.split()[0::2])))"
    },
    {
        "number": 4124,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    answer,n = 0,0\n    for s in stdin.split():\n        if s[0] == '+':\n            n+=1\n        else:\n            answer += n\n    return answer\n\n\n-----Notes-----\n\nThe string s is empty if it is composed of characters from both s and t.\n\nIf both strings are empty, then the string s is empty.\n\nThe string t must be a string of characters.\n\nThe string t must be a substring of the string s.\n\nThe number of moves is between 1 and $2^10^5$.\n\nInput\ntest\ncodeforces\nyes\n\nOutput\n4\n\nInput\ntest\ncodeforces\nyes\n\nOutput\n2\n\nInput\ntest\ncodeforces\nyes\n\nOutput\n2\n\nInput\nb\nab\n\nOutput\n2\n\nInput\ntest\ncodeforces\nyes\n\nOutput\n1\n\nInput\ntest\nyes\n\nOutput\n0\n\n\n-----Solution-----\n\nclass Solution:\n    def minMoves(self, s: str, t: str) -> int:\n        \n        if not s or not t:\n            return 0\n        \n        m = {}\n        n = {}\n        \n        if len(s) > len(t):\n            return self.minMoves(s, t)\n        \n        if s == t:\n            return 0\n        \n        for c in s:\n            if c in n:\n                n[c] += 1\n            else:\n                n[c] = 1\n                \n        for c in t:\n            if c in m:\n                m[c] += 1\n            else:\n                m[c] = 1\n                \n        for c in m:\n            if n[c] == 0:\n                return 0\n            n[c] -= 1\n        \n        return len(s) - len(t) + sum([n[c] * m[c] for c in m])\n"
    },
    {
        "number": 4124,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    lst = s.split(\" \")\n    res = 1\n    for i in range(1, len(lst)):\n        if lst[i-1]!= lst[i]:\n            res += len(lst[i])\n    print(res)\n    return res\n\n-----Constraints-----\n\n1 <= s.length <= 2 * 10^5\ns contains only lowercase Latin letters.\n\n\n-----Time Limit-----\n1 sec\n\n\n-----Submissions-----\n1858 ms\n17.4 MB\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4124,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    s = list(s)\n    t = list(t)\n    print(len(s)+len(t))\n    return str(len(s)+len(t))\n"
    },
    {
        "number": 4124,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split('\\n')\n    s, t = s.split(' '), t.split(' ')\n    answer = 0\n\n    for i in range(len(s)):\n        while len(s[i]) < len(t[i]):\n            s[i], t[i] = t[i][0:1], s[i][1:]\n        answer += min(len(s[i]), len(t[i]))\n        \n    return answer"
    },
    {
        "number": 4124,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s1 = stdin[0].lower()\n    s2 = stdin[1].lower()\n    answer = 0\n    for i in range(len(s1)):\n        if s1[i]!= s2[i]:\n            answer += 1\n            if len(s1) > len(s2):\n                return answer\n    return answer\n\n\n\n-----Constraints-----\n\n1 <= s.length <= 10^5\n1 <= s[i] <= 10^5\ns1 and s2 consist only of lowercase Latin letters.\n\n\n-----Time complexity-----\n\nO(n) for strings.\n\n\nO(1) for letters in the strings.\n\nO(n) for the number of moves required.\n"
    },
    {
        "number": 4125,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, *T = map(int, stdin.split())\n    D = int(T[0])\n    x = 0\n    y = N - 1\n    answer = 0\n    while x <= N:\n        if y == 0:\n            answer = max(answer, D)\n            break\n        else:\n            if T[y] == 0:\n                y -= 1\n                D -= 1\n            else:\n                if T[y] == 1:\n                    T[y] = 0\n                    T[y + 1] = 1\n                    y -= 1\n                    D -= 1\n                else:\n                    T[y] = 1\n                    T[y + 1] = 0\n                    y -= 1\n                    D -= 1\n    return str(answer)\n"
    },
    {
        "number": 4125,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, x = list(map(int, stdin.split()))\n\n    def move(x, y):\n        nonlocal N\n        pos = abs(x)\n        if pos < N:\n            return move(y, pos + y)\n        else:\n            return move(x - y, N - pos)\n\n    result = move(x, x + 2)\n    result = result if result >= N else result + (N - result)\n    result = result if result < N else result - (N - result)\n    return str(result)\n\n\nprint(solution(input()))\n\ndef"
    },
    {
        "number": 4125,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, x = list(map(int, stdin.split()))\n    g, d = 0, 0\n\n    # D = 2\n    # 1\n    # 2\n    # 3\n    # 4\n    # 5\n    # 6\n    # 7\n    # 8\n    # 9\n    # 10\n\n    for i in range(N):\n        g, d = move(g, d, x, i, N)\n        # print(g, d)\n\n    return str(d)\n\ndef"
    },
    {
        "number": 4125,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, x, D = map(int, stdin.split())\n    for i in range(N):\n        x += (i + 1)\n        for j in range(i + 1, N + 1):\n            x -= (j - 1)\n            if x > 0:\n                if (x + D) % 10 == 0:\n                    return (x + D) // 10\n                elif (x + D) % 10 < 10:\n                    return (x + D) // 10 + 1\n                else:\n                    return (x + D) // 10\n    return -1\n"
    },
    {
        "number": 4125,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, D = map(int, stdin.split())\n    cities = [int(n) for n in stdin.split()]\n    cities.sort()\n    cities = map(lambda n: n, cities)\n    cities.sort()\n    result = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            result = max(result, cities[j] + D - cities[i])\n    return str(result)\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 4125,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, *X = map(int, stdin)\n    D = int(X[0])\n    answer = 0\n    for i in range(N):\n        answer = max(answer, D)\n        D -= 1\n    return str(answer)\n-----Sample Output-----\n1\n\"\"\"\n\nfrom collections import defaultdict\n\nclass Solution:\n    def maxDistance(self, grid: List[List[int]]) -> int:\n        if not grid:\n            return 0\n        \n        m, n = len(grid), len(grid[0])\n        if m == 1 and n == 1:\n            return grid[0][0]\n        \n        m2 = m // 2\n        n2 = n // 2\n        for i in range(m2):\n            for j in range(n2):\n                self.dfs(grid, i, j, 0)\n        \n        for i in range(m2):\n            for j in range(n2):\n                self.dfs(grid, i, j, 1)\n        \n        for i in range(m2):\n            for j in range(n2):\n                self.dfs(grid, i, j, 2)\n        \n        return max(grid[m2-1][n2-1], grid[m2-1][n2])\n    \n    def dfs(self, grid, i, j, d):\n        if not 0 <= i < len(grid) or not 0 <= j < len(grid[0]) or grid[i][j]!= -1:\n            return\n        \n        grid[i][j] = -1\n        \n        neighbors = [(i+1, j), (i-1, j), (i, j+1), (i, j-1)]\n        for x, y in neighbors:\n            if not 0 <= x < len(grid) or not 0 <= y < len(grid[0]) or grid[x][y] == -1:\n                continue\n            if grid[x][y] == 1:\n                if d == 1:\n                    self.dfs(grid, x, y, 0)\n                else:\n                    self.dfs(grid, x, y, 1)\n                grid[x][y] = -1\n        if d == 2:\n            self.dfs(grid, i, j, 0)\n        else:\n            self.dfs(grid, i, j, 2)\n        \n        \n        "
    },
    {
        "number": 4125,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    D = int(stdin.split()[0])\n    for _ in range(y):\n        for _ in range(D):\n            x += 1\n            y += 1\n            stdin.replace(f\"{x}\", f\"{y}\")\n    return str(x - 1) if x > 0 else '0'"
    },
    {
        "number": 4125,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N,x = map(int,stdin.split())\n    adj = [[] for i in range(N)]\n    for _ in range(N):\n        x1,x2 = map(int,stdin.split())\n        x1 -= 1\n        x2 -= 1\n        adj[x1].append(x2)\n    x1 = 0\n    x2 = x\n    visit = set()\n    while x1 < N:\n        while x2 < N:\n            if x1 in visit:\n                visit.remove(x1)\n                x2 += 1\n                break\n            if x2 in visit:\n                visit.remove(x2)\n                x1 += 1\n                break\n            visit.add(x1)\n            x1,x2 = x2,x1\n            \n        if x1 == x2:\n            if len(visit) > 1:\n                visit.remove(x1)\n            else:\n                return \"0\"\n        x2 -= 1\n    return str(len(visit))"
    },
    {
        "number": 4125,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    x = list(map(int, stdin.split()))\n    y = [i + 1 for i in range(n)]\n    ans = 0\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if x[i] + x[j] + x[k] <= m:\n                    ans = max(ans, x[i] + x[j] + x[k] - m)\n    return str(ans)\n\n-----Sample Input-----\n1 2\n1 3\n1 4\n2 3\n2 4\n3 5\n3 6\n4 7\n\n-----Sample Output-----\n1\n'''\n\ndef"
    },
    {
        "number": 4125,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    d = k + abs(n - k)\n    answer = 0\n    # 0\ubd80\ud130 n\uae4c\uc9c0\uc758 \uacbd\uc6b0\n    for i in range(n):\n        # i\uac00 d\ubcf4\ub2e4 \uc791\uc740 \uacbd\uc6b0\n        if i < d:\n            # 0\ubd80\ud130 i\uae4c\uc9c0\uc758 \uacbd\uc6b0\n            for j in range(i, n):\n                # i\uac00 d\ubcf4\ub2e4 \ud06c\uba74 j\uc5d0 \uc788\ub294 \ub3c4\uc2dc\uc5d0 \uac00\ub294 \uacbd\uc6b0\n                if j < d:\n                    # \uc544\uc9c1 \ub3c4\uc2dc\uac00 \uc5c6\ub2e4\uba74 \uac00\uc7a5 \uc55e\uc5d0 \uc788\ub294 \ub3c4\uc2dc\uc5d0\uc11c \uc788\uc73c\uba74 \uc21c\uc11c\ub300\ub85c \uc5f0\uacb0\ub418\uc5b4\uc57c \ud558\ubbc0\ub85c \ubc18\ud658\ud55c\ub2e4.\n                    if d - i + n - j - i < d:\n                        d = d - (i + n - j - i)\n                        answer = j + 1\n                        break\n            # 0\ubd80\ud130 i\uae4c\uc9c0\uc758 \uacbd\uc6b0\n            for j in range(i + 1, n):\n                # i\uac00 d\ubcf4\ub2e4 \uc791\uc740 \uacbd\uc6b0\n                if i < d:\n                    # \uc544\uc9c1 \ub3c4\uc2dc\uac00 \uc5c6\ub2e4\uba74 \uac00\uc7a5 \uc55e\uc5d0 \uc788\ub294 \ub3c4\uc2dc\uc5d0\uc11c \uc788\uc73c\uba74 \uc21c\uc11c\ub300\ub85c \uc5f0\uacb0\ub418\uc5b4\uc57c \ud558\ubbc0\ub85c \ubc18\ud658\ud55c\ub2e4.\n                    if d - i + n - j - i < d:\n                        d = d - (i + n - j - i)\n                        answer = j + 1\n                        break\n        else:\n            break\n    return str(d)\n"
    },
    {
        "number": 4126,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if is_palindrome(stdin) else \"No\"\n\ndef"
    },
    {
        "number": 4126,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    answer = 0\n    s = [list(stdin[0])]\n    n = len(s)\n    for i in range(1, n-1):\n        if s[i-1] == s[i+1] and s[i] == s[i-2] and s[i] == s[i+2]:\n            answer = 1\n    if answer == 1:\n        print('Yes')\n    else:\n        print('No')\n"
    },
    {
        "number": 4126,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    S = str(stdin)\n    for i in range(2, len(S)//2):\n        if S[:i] == S[i::i]:\n            return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4126,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4126,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip().split(\" \")[0])\n    s = list(stdin.strip().split(\" \"))\n    for i in range(N):\n        if (len(s[i]) > 1):\n            print(\"Yes\")\n            break\n        if (len(s[i]) == 2):\n            print(\"No\")\n            break\n    else:\n        print(\"No\")\n"
    },
    {
        "number": 4126,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    st = []\n    answer = ''\n    for i in stdin:\n        if i == 'a' or i == 'A':\n            st.append('a')\n        elif i == 'b' or i == 'B':\n            st.append('b')\n        elif i == 'c' or i == 'C':\n            st.append('c')\n        elif i == 'd' or i == 'D':\n            st.append('d')\n        elif i == 'e' or i == 'E':\n            st.append('e')\n        elif i == 'f' or i == 'F':\n            st.append('f')\n        elif i == 'g' or i == 'G':\n            st.append('g')\n        elif i == 'h' or i == 'H':\n            st.append('h')\n        elif i == 'i' or i == 'I':\n            st.append('i')\n        elif i == 'j' or i == 'J':\n            st.append('j')\n        elif i == 'k' or i == 'K':\n            st.append('k')\n        elif i == 'l' or i == 'L':\n            st.append('l')\n        elif i =='m' or i == 'M':\n            st.append('m')\n        elif i == 'n' or i == 'N':\n            st.append('n')\n        elif i == 'o' or i == 'O':\n            st.append('o')\n        elif i == 'p' or i == 'P':\n            st.append('p')\n        elif i == 'q' or i == 'Q':\n            st.append('q')\n        elif i == 'r' or i == 'R':\n            st.append('r')\n        elif i =='s' or i == 'S':\n            st.append('s')\n        elif i == 't' or i == 'T':\n            st.append('t')\n        elif i == 'u' or i == 'U':\n            st.append('u')\n        elif i == 'v' or i == 'V':\n            st.append('v')\n        elif i == 'w' or i == 'W':\n            st.append('w')\n        elif i == 'x' or i == 'X':\n            st.append('x')\n        elif i == 'y' or i == 'Y':\n            st.append('y')\n        elif i == 'z' or i == 'Z':\n            st.append('z')\n        elif i =='':\n            st.append(' ')\n    for i in st:\n        if i =='':\n            answer +=''\n        else:\n            answer += i\n    return answer\n"
    },
    {
        "number": 4126,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    string=stdin.strip()\n    string=string.replace(\" \",\"\")\n    string=string.lower()\n    result=True\n    for i in range(0,len(string),2):\n        if string[i:i+2]==string[i+1:i+2]:\n            result=False\n    return result\n\ndef"
    },
    {
        "number": 4126,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    ans = \"No\"\n    string = \" \"\n    while s:\n        # print(s[0], end=\" \")\n        if s[0].isalpha():\n            # string += s[0] + \" \"\n            string += s[0].lower() + \" \"\n            s = s[1:]\n        else:\n            if s[1].isalpha():\n                string += s[1] + \" \"\n                s = s[2:]\n            else:\n                string += s[1] + \" \"\n                s = s[2:]\n    return ans\n\n\n-------Test Cases-------\ntest_cases = [\n    \"ab\",\n    \"aab\",\n    \"aab\",\n    \"abc\",\n    \"abc\",\n    \"abcd\",\n    \"abcd\",\n    \"abd\",\n    \"aba\",\n    \"aba\",\n    \"aab\",\n    \"abc\",\n    \"abc\",\n    \"abcd\",\n    \"abcd\",\n    \"abd\",\n    \"aba\",\n    \"aba\",\n    \"aab\",\n    \"abc\",\n    \"abc\",\n    \"abcd\",\n    \"abcd\",\n    \"abd\",\n    \"aba\",\n    \"aba\",\n    \"aab\",\n    \"abc\",\n    \"abc\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"aba\",\n    \"aba\",\n    \"aab\",\n    \"abc\",\n    \"abc\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"aba\",\n    \"aba\",\n    \"aab\",\n    \"abc\",\n    \"abc\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd\",\n    \"abd"
    },
    {
        "number": 4126,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    answer = 0\n    for _ in range(int(stdin)):\n        a = stdin[0:int(stdin.find('-') + 1)]\n        b = stdin[int(stdin.find('-') + 1):]\n        if a == a[::-1] or b == b[::-1]:\n            answer = 1\n            break\n    return str(answer)\n\ndef"
    },
    {
        "number": 4126,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef"
    },
    {
        "number": 4127,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(float, stdin.split())\n    if A < 0 or B < 0:\n        return 0\n    if A < 10 ** 15:\n        return int(B * 10 ** (A - 1))\n    else:\n        return int(B / 10 ** (A - 1) * 10 ** (A - 2))\n"
    },
    {
        "number": 4127,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(float, stdin.split(\" \"))\n    print(int(B/A))\n"
    },
    {
        "number": 4127,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, p, q = map(int, stdin.split(\" \"))\n    if n % p!= 0 or n % q!= 0:\n        return \"Error\"\n    else:\n        answer = n // p * q\n        return str(answer)"
    },
    {
        "number": 4127,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(round(float(stdin)/10)))\n\ndef"
    },
    {
        "number": 4127,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return str(eval(stdin))\n\n-----Test-----\nprint(solution(\"198 1.10\"))\n\nprint(solution(\"199.01\"))\n\nprint(solution(\"199.0199\"))\n\nprint(solution(\"199.019\"))\n\nprint(solution(\"199.01\"))\n"
    },
    {
        "number": 4127,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    answer = ''\n    temp = '0'\n    for char in stdin:\n        if char == '-':\n            temp = temp[:len(temp)-1]\n            answer += temp\n            temp = '0'\n        else:\n            temp = temp[:len(temp)-2] + char + temp[len(temp)-2:]\n    answer += temp\n    return answer\n\nprint(solution('199'))\n\"\"\"\n\ndef"
    },
    {
        "number": 4127,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(float(stdin.strip('\\n'))))\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 4127,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split(\" \"))\n    if 0 <= A <= 10**9 and 0 <= B <= 10**9:\n        answer = ((A - B) * 10**2) // 100 + B\n        return str(answer)\n    else:\n        return \"Error\"\n\n-----Successors-----\nSuccess!\n\"\"\"\n\ndef"
    },
    {
        "number": 4127,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    answer = ''\n    A = int(stdin)\n    if A % 10 == 1:\n        A = A // 10\n        answer += str(A)\n        answer += '1'\n    else:\n        A = A % 10\n        A += 1\n        answer += str(A)\n    B = int(stdin[A:])\n    print(answer[:-1])\n    return answer\n\nprint(solution(\"198 1.10\"))"
    },
    {
        "number": 4127,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    A_digits = len(str(A))\n    B_digits = len(str(B))\n    ans = 0\n    for i in range(A_digits - B_digits + 1):\n        ans += A // 10 ** i\n    for i in range(B_digits):\n        ans += B // 10 ** i\n    return str(ans)\n    "
    },
    {
        "number": 4128,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a, b = [], []\n    a.append(n // 2000000000)\n    a.append((n % 2000000000) // 100)\n    b.append(n % 1000000 // 10)\n    b.append((n % 1000000) // 5)\n    b.append((n % 5) // 2)\n    n //= 2000000000\n    a.append(n // 1000000000)\n    b.append(n % 1000000000)\n    a.append(n % 100000000)\n    b.append(n % 100000000)\n    a.append(n % 100000000)\n    a.append(n % 100000000)\n    a.append(n % 100000000)\n    a.append(n % 100000000)\n    a.append(n % 100000000)\n    a.append(n % 100000000)\n    a.append(n % 100000000)\n    a.append(n % 100000000)\n    a.append(n % 100000000)\n    a.append(n % 100000000)\n    a.append(n % 100000000)\n    a.append(n % 100000000)\n    a.append(n % 100000000)\n    a.append(n % 100000000)\n    a.append(n % 100000000)\n    a.append(n % 100000000)\n    a.append(n % 100000000)\n    a.append(n % 100000000)\n    a.append(n % 100000000)\n    a.append(n % 100000000)\n    a.append(n % 100000000)\n    a.append(n % 100000000)\n    a.append(n % 100000000)\n    a.append(n % 100000000)\n    a.append(n % 100000000)\n    a.append(n % 100000000)\n    a.append(n % 100000000)\n    a.append(n % 100000000)\n    a.append(n % 100000000)\n    a.append(n % 100000000)\n    a.append(n % 100000000)\n    a.append(n % 100000000)\n    a.append(n % 100000000)\n    a.append(n % 100000000)\n    a.append(n % 100000000)\n    a.append(n % 100000000)\n    a.append(n % 100000000)\n    a.append(n % 100000000)\n    a.append(n % 100000000)\n    a.append(n % 100000000)\n    a.append(n % 100000000)\n    a.append(n % 100000000)\n    a.append(n % 100000000)\n    a.append(n % 100000000)\n    a.append(n % 100000000)\n    a.append(n % 100000000)\n    a.append(n % 100000000)\n    a.append(n % 100000000)\n    a.append(n % 100000000)\n    a.append(n % 100000000)\n    a.append(n % 100000000)\n    a.append(n % 100000000)\n    a.append(n % 100000000)\n    a.append(n % 100000000)\n    a.append(n % 100000000)\n    a.append(n % 100000000)\n    a.append(n % 100000000)\n    a.append(n % 100000000)\n    a.append(n % 100000000)\n    a.append(n % 100000000)\n    a.append(n % 100000000)\n    a.append(n % 100000000)\n    a.append(n % 100000000)\n    a.append(n % 100000000)\n    a.append(n % 100000000)\n    a.append(n % 100000000)\n    a.append(n % 100000000)\n    a.append(n % 100000000)\n    a.append(n % 100000000)\n    a.append(n % 100000000)\n    a.append(n % 100000000)\n    a.append(n % 100000000)\n    a.append(n % 100000000)\n    a.append(n % 100000000)\n    a.append(n % 100000000)\n    a.append(n % 100000000)\n    a.append(n % 100000000)\n    a.append(n % 100000000)\n    a.append(n % 100000000)\n    a.append(n % 100000000)\n    a.append(n % 100000000)\n    a.append(n % 100000000)\n    a.append(n % 100000000)\n    a.append(n % 100000000)\n    a.append(n % 100000000)\n    a.append(n % 100000000)\n    a.append(n % 100000000)\n    a.append(n % 100000000)\n    a.append(n % 100000000)\n    a.append(n % 100000000)\n    a.append(n % 100000000)\n    a.append(n % 100000000)\n    a.append(n % 100000000)\n    a.append(n % 100000000)\n    a.append(n % 100000000)\n    a.append(n % 100000000)\n    a.append(n % 100000000)\n    a.append(n % 100000000)\n    a.append(n % 100000000)\n    a.append(n % 100000000)\n    a.append(n % 100000000)\n    a.append(n % 100000000)\n    a.append(n % 100000000)\n    a.append(n % 100000000)\n    a.append(n % 100000000)\n    a.append(n % 100000000)\n    a.append(n % 100000000)\n    a.append(n % 100000000)\n    a.append(n % 100000000)\n    a.append(n % 100000000)\n    a.append(n % 100000000)\n    a.append(n % 100000000)\n    a.append(n % 100000000)\n    a.append(n % 100000000)\n    a.append(n % 100000000)\n    a.append(n % 100000000)\n    a.append(n % 100000000)\n    a.append(n % 100000000)\n    a.append(n % 100000000)\n    a.append(n % 100000000)\n    a.append(n % 100000000)\n    a.append(n % 100000000)\n    a.append(n % 100000000)\n    a.append(n % 100000000)\n    a.append(n % 100000000)\n    a.append(n % 100000000)\n    a.append(n % 100000000)\n    a.append(n % 100000000)\n    a.append(n % 100000000)\n    a.append(n % 100000000)\n    a.append"
    },
    {
        "number": 4128,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    n = int(stdin.split()[1])\n    if t < 0 or t > 1000000000:\n        return '0'\n    if t == 0:\n        return '0'\n    elif t == 1:\n        return str(n)\n    elif t == 2:\n        return str(n + n)\n    elif t == 3:\n        return str(n * (n+1))\n    elif t == 4:\n        return str(n * (n+1) * 2)\n    else:\n        a = str(n)\n        b = str(n+n)\n        a = int(a)\n        b = int(b)\n        while a > 0 and b > 0:\n            if a > b:\n                a -= 1\n            else:\n                b -= 1\n        return str(a+b)\n\n'''\ndef"
    },
    {
        "number": 4128,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a, b = [int(i) for i in input().split()]\n    a, b = a * 10, b * 10\n    if n == a + b:\n        return str(0)\n    elif n <= a + b:\n        if n == a + b:\n            return str(1)\n        elif n == a:\n            return str(2)\n        elif n == b:\n            return str(3)\n        else:\n            return str(4)\n    else:\n        return str(5)\n\nprint(solution(\"6\"))"
    },
    {
        "number": 4128,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    a = a * n\n    b = b * n\n    n = max(a, b)\n    count = 0\n    while n > 0:\n        a = a + n\n        n = n - a\n        count = count + n\n    if count == n:\n        return '0'\n    return count"
    },
    {
        "number": 4128,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def backtrack(i):\n        if len(s) == len(name) and int(s) == int(name):\n            return 1\n        if len(s) == len(name) and i < len(name):\n            return 0\n        if int(s) > int(name):\n            return 0\n        cnt = 0\n        for j in range(len(name)):\n            if j + 1 <= len(name):\n                if j!= i:\n                    cnt += backtrack(j + 1)\n            else:\n                cnt += backtrack(j + 1)\n        return cnt\n\n    for i, s in enumerate(stdin):\n        s = s.strip()\n        name = ''.join(sorted(s))\n        if name.isdigit():\n            if len(s) <= 2:\n                return 0\n            s = str(int(s) + int(name))\n        else:\n            if len(s) == 1:\n                s = '1' + s\n            s = ''.join(sorted(s))\n        name = s\n        if len(name) >= 2:\n            s = 'a' + name[0] + name[1:]\n        else:\n            s = name\n        if len(s) >= 3:\n            if int(s[0]) + int(s[2]) == int(name) and int(s[1]) + int(s[3]) == int(name):\n                if len(s) == 3:\n                    s = 'a' + s + 'b'\n                else:\n                    s = 'a' + s + 'b' + s[2:]\n        if len(s) >= 4:\n            s = 'a' + s + 'b'\n        if len(s) >= 5:\n            s = 'a' + s + 'b' + s[2:]\n        if len(s) >= 6:\n            s = 'a' + s + 'b' + 'c' + s[2:]\n        if len(s) >= 7:\n            s = 'a' + s + 'b' + 'c' + 'd' + s[2:]\n        if len(s) >= 8:\n            s = 'a' + s + 'b' + 'c' + 'd' + 'e' + s[2:]\n        if len(s) >= 9:\n            s = 'a' + s + 'b' + 'c' + 'd' + 'e' + 'f' + s[2:]\n        if len(s) >= 10:\n            s = 'a' + s + 'b' + 'c' + 'd' + 'e' + 'f' + 'g' + s[2:]\n        if len(s) >= 11:\n            s = 'a' + s + 'b' + 'c' + 'd' + 'e' + 'f' + 'g' + 'h' + s[2:]\n        if len(s) >= 12:\n            s = 'a' + s + 'b' + 'c' + 'd' + 'e' + 'f' + 'g' + 'h' + 'i' + s[2:]\n        if len(s) >= 13:\n            s = 'a' + s + 'b' + 'c' + 'd' + 'e' + 'f' + 'g' + 'h' + 'i' + 'j' + s[2:]\n        if len(s) >= 14:\n            s = 'a' + s + 'b' + 'c' + 'd' + 'e' + 'f' + 'g' + 'h' + 'i' + 'j' + 'k' + s[2:]\n        if len(s) >= 15:\n            s = 'a' + s + 'b' + 'c' + 'd' + 'e' + 'f' + 'g' + 'h' + 'i' + 'j' + 'k' + 'l' + s[2:]\n        if len(s) >= 16:\n            s = 'a' + s + 'b' + 'c' + 'd' + 'e' + 'f' + 'g' + 'h' + 'i' + 'j' + 'k' + 'l' +'m' + s[2:]\n        if len(s) >= 17:\n            s = 'a' + s + 'b' + 'c' + 'd' + 'e' + 'f' + 'g' + 'h' + 'i' + 'j' + 'k' + 'l' +'m' + 'n' + s[2:]\n        if len(s) >= 18:\n            s = 'a' + s + 'b' + 'c' + 'd' + 'e' + 'f' + 'g' + 'h' + 'i' + 'j' + 'k' + 'l' +'m' + 'n' + 'o' + s[2:]\n        if len(s) >= 19:\n            s = 'a' + s + 'b' + 'c' + 'd' + 'e' + 'f' + 'g' + 'h' + 'i' + 'j' + 'k' + 'l' +'m' + 'n' + 'o' + 'p' + s[2:]\n        if len(s) >= 20:\n            s = 'a' + s + 'b' + 'c' + 'd' + 'e' + 'f' + 'g' + 'h' + 'i' + 'j' + 'k' + 'l' +'m' + 'n' + 'o' + 'p' + 'q' + s[2:]\n        if len(s) >= 21:\n            s = 'a' + s + 'b' + 'c' + 'd' + 'e' + 'f' + 'g' + 'h' + 'i' + 'j' + 'k' + 'l' +'m' + 'n' + 'o' + 'p' + 'q' + 'r' + s[2:]\n        if len(s) >= 22:\n            s = 'a' + s + 'b' + 'c' + 'd' + 'e' + 'f' + 'g' + 'h' + 'i' + 'j' + 'k' + 'l' +'m' + 'n' + 'o' + 'p' + 'q' + 'r' +'s' + s[2:]\n        if len(s) >= 23:\n            s = 'a' + s + 'b' + 'c' + 'd' + 'e' + 'f' + 'g' +"
    },
    {
        "number": 4128,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin) // 10 + (int(stdin) % 10) // 3 * 2)\n\ndef"
    },
    {
        "number": 4128,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    if n==1:\n        return 0\n    if a>b:\n        return 0\n    if a+b==n:\n        return n\n    return solution(stdin+'0')+solution(stdin+'1')"
    },
    {
        "number": 4128,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = [int(line.strip()) for line in stdin.splitlines()]\n    n, a, b, n = stdin[0], stdin[1], stdin[2], stdin[3]\n    ans = 0\n    a = a - b\n    while a > 0:\n        if a % n == 0:\n            a = a // n\n        else:\n            a = a // n + 1\n        ans += 1\n    b = b - a\n    while b > 0:\n        if b % n == 0:\n            b = b // n\n        else:\n            b = b // n + 1\n        ans += 1\n    return str(ans)\n\n\"\"\"\n\n\"\"\"\ndef"
    },
    {
        "number": 4128,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n,a,b = map(int,stdin.split())\n    result = 1 if a>b else n\n    return str(result)\n"
    },
    {
        "number": 4128,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a+b)\n"
    },
    {
        "number": 4129,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s = map(int, stdin.split())\n    answer = 0\n    if (n*m*s)%10000 == 1:\n        answer = (n*m*s)//10000\n    else:\n        answer = (n*m*s)//100\n    return str(answer)"
    },
    {
        "number": 4129,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s = map(int, stdin.split())\n\n    result = 0\n    prev_result = 0\n\n    graph = [[-1 for _ in range(n)] for _ in range(n)]\n\n    for _ in range(m):\n        u, v, t = map(int, stdin.split())\n        graph[u - 1][v - 1] = t\n\n    for i in range(n):\n        for j in range(n):\n            if graph[i][j]!= -1:\n                if graph[i][j] < prev_result:\n                    prev_result = graph[i][j]\n                    result = 0\n                elif graph[i][j] == prev_result:\n                    result += 1\n                    prev_result = graph[i][j]\n\n    return str(result)\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4129,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    n,m,s = map(int,stdin.split())\n    \n    def helper(n,m,s,k):\n        if n<0 or m<0: return\n        if n==s: return\n        if m==s: return\n        \n        if n==s: return \n        \n        if k==n+1: return \n        \n        if k==s: return \n        \n        if k>n: return\n        \n        helper(n-1,m,s,k+1)\n        helper(n-1,m,s,k)\n        \n    return str(helper(n,m,s,k=0))"
    },
    {
        "number": 4129,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s = map(int, stdin.strip().split())\n\n    if n < m:\n        if n == 1 and m == 1:\n            print(0)\n            return\n        else:\n            print(solution(f\"{n} {m} {s}\") + solution(f\"{n} {m} {s}\", 1))\n            return\n\n    route_list = [(1, s)]\n    route_list.append((n, s))\n    while route_list:\n        temp_route_list = list(route_list)\n        for i in range(len(route_list)):\n            for j in range(len(route_list[i])):\n                if j > 1:\n                    for k in range(j):\n                        temp_route_list[i][k] = route_list[i][k] + route_list[i][k+1]\n                    route_list.append(temp_route_list[i])\n                    route_list.pop(i)\n                if j == 0:\n                    temp_route_list[i][j] = route_list[i][j] + route_list[i][j+1]\n        route_list = route_list[:len(route_list) - 1]\n\n    if n == 1:\n        return\n    elif s == 5:\n        return\n    else:\n        print(solution(f\"{n} {m} {s}\") + solution(f\"{n} {m} {s}\", 2))\n\nn, m, s = map(int, input().strip().split())\nsolution(f\"{n} {m} {s}\")\n"
    },
    {
        "number": 4129,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s = map(int, stdin.split())\n    # \u4e8c\u5206\u641c\u7d22\n    start = 0\n    end = n * m\n    while start <= end:\n        mid = start + (end - start) // 2\n        # \u627e\u51fa\u6240\u6709\u53ef\u80fd\u7684\u67f1\u72b6\u56fe\uff0c\u53ea\u8981\u627e\u5230\u4e86\u53ef\u884c\u7684\u6700\u53ef\u80fd\u7684\u90a3\u6761\u63a5\uff0c\u5c31\u8bb0\u5f55\u6bcf\u4e2a\u63a5\u53d7\u7684\u90a3\u6761\u63a5\u7684\u90a3\u4e2a\u94fe\u63a5\n        way = [[-1 for _ in range(m + 1)] for _ in range(n + 1)]\n        # \u5efa\u7acb\u5230\u8fbe\u4e3a0\u7684\u94fe\u63a5\u5217\u8868\uff0c\u7528\u6765\u5224\u65ad\u662f\u5426\u6bcf\u4e2a\u94fe\u63a5\u8ba1\u7b97\u5b8c\uff0c\u82e5\u6ca1\u8ba1\u7b97\u5b8c\uff0c\u5c31\u8bb0\u5f55\u5230way\u4e2d\uff0c\n        # \u82e5\u8ba1\u7b97\u5b8c\uff0c\u5c31\u5148\u5220\u9664\u8fd9\u4e9b\u94fe\u63a5\uff0c\u5c31\u8fd4\u56de\u4ec0\u4e48\uff0c\u82e5\u8ba1\u7b97\u5b8c\uff0c\u5c31\u8ba1\u7b97\u4e8c\u5206\u641c\u7d22\u6700\u7ec8\u521d\u59cb\u5316\u7684way\u3002\n        # \u5148\u5224\u65ad\u4e00\u4e0b\uff0c\u662f\u5426\u6bcf\u4e2a\u94fe\u63a5\u8ba1\u7b97\u5b8c\uff0c\u5c31\u8bb0\u5f55\u6bcf\u4e2a\u94fe\u63a5\u4e3a\u54ea\u4e2away\u7684\u94fe\u63a5\uff0c\u82e5\u6ca1\u8ba1\u7b97\u5b8c\uff0c\u5c31\u5148\u5224\u65ad\u4e00\u4e0b\uff0c\u82e5\u8ba1\u7b97\u5b8c\uff0c\u5c31\u5220\u9664\u8fd9\u4e9b\u94fe\u63a5\n        # \u90a3\u4e48\u6bcf\u4e2away\uff0c\u5c31\u5206\u4e24\u79cd\u60c5\u51b5\uff0c\u6700\u5de6\uff0c\u6700\u53f3\uff0c\u6ca1\u6709\u90a3\u94fe\u63a5\uff0c\u5c31\u5168\u90fd\u5206\u4e24\u94fe\u63a5\uff0c\n        # \u5982\u679c\u6700\u5de6\u7684\u94fe\u63a5\u51fa\u73b0\u4e86\u4e00\u4e2a\u51fa\u73b0\u7684\u94fe\u63a5\uff0c\u5c31\u628a\u8fd9\u4e2a\u51fa\u73b0\u7684\u94fe\u63a5\u6dfb\u52a0\u5230way\u4e2d\uff0c\n        # \u5c31\u628a\u5168\u90e8\u63a5\u53d7\u7684\u94fe\u63a5\u5220\u9664\uff0c\u4e5f\u5c31\u662f\u628a\u5168\u90e8\u63a5\u53d7\u7684\u94fe\u63a5\u6dfb\u52a0\u5230way\u4e2d\uff0c\u540e\u6765\u5c31\u628away\u6dfb\u52a0\u5230way\u4e2d\uff0c\n        # \u53ea\u8981way\u4e2d\u6709\u6ca1\u6709\u8bb0\u5f55\u8fd9\u4e9b\u51fa\u73b0\u7684\u94fe\u63a5\uff0c\u5c31\u628a\u5168\u90e8\u63a5\u53d7\u7684\u94fe\u63a5\u5220\u9664\uff0c\u8fd4\u56de\u6765\n        if way[mid][s]:\n            way[mid][s] = 0\n            way[mid + 1][s] = 1\n            way[mid][s + 1] = 1\n            way[mid + 1][s + 1] = 1\n        # \u6bcf\u4e2a\u94fe\u63a5\u90fd\u662f\u4e00\u79cd\u8fbe\u5230\u7ec8\u70b9\u7684\u60c5\u51b5\uff0c\u6211\u4eec\u53ea\u80fd\u627e\u5230\u4e00\u4e2a\u8bb0\u5f55\u8fd9\u4e2a\u8fbe\u5230\u7684\u94fe\u63a5\uff0c\u5224\u65ad\u662f\u5426\u6bcf\u4e2a\u94fe\u63a5\u8ba1\u7b97\u5b8c\uff0c\n        # \u5c31\u8bb0\u5f55\u6bcf\u4e2a\u94fe\u63a5\u4e3a\u54ea\u4e2away\u7684\u94fe\u63a5\uff0c\u82e5\u6ca1\u8ba1\u7b97\u5b8c\uff0c\u5c31\u5148\u5224\u65ad\u4e00\u4e0b\uff0c\u82e5\u6ca1\u8ba1\u7b97\u5b8c\uff0c\u5c31\u8bb0\u5f55\u6bcf\u4e2a\u94fe\u63a5\u4e3a\u54ea\u4e2away\u7684\u94fe\u63a5\uff0c\u82e5\u6ca1\u8ba1\u7b97\u5b8c\uff0c\u5c31\u5220\u9664\u8fd9\u4e9b\u94fe\u63a5\n        for i in range(1, n + 1):\n            for j in range(1, m + 1):\n                if way[i][j]!= -1:\n                    if way[i][j] == way[i][s] and way[i][j] == way[s][j]:\n                        way[i][j] = 0\n                    elif way[i][j]!= way[i][s] or way[i][j]!= way[s][s]:\n                        way[i][j] = -1\n        start = mid + 1\n        end = n * m + 1\n    # \u6c42\u51fa\u8fd9\u4e2a\u94fe\u63a5\u4e4b\u95f4\u7684\u67f1\u72b6\u56fe\uff0c\n    # \u7136\u540e\u627e\u51fa\u6240\u6709\u53ef\u80fd\u7684\u67f1\u72b6\u56fe\uff0c\u8fd9\u4e9b\u67f1\u72b6\u56fe\u7684\u5bf9\u5e94\u67f1\u72b6\u56fe\u7684\u90a3\u6761\u63a5\u53d7\u94fe\u63a5\uff0c\n    # \u5c06\u8fd9\u4e9b\u63a5\u53d7\u94fe\u63a5\u6dfb\u52a0\u5230way\u4e2d\uff0c\u82e5way\u4e2d\u6709\u6ca1\u6709\u8bb0\u5f55\u8fd9\u4e9b\u51fa\u73b0\u7684\u94fe\u63a5\uff0c\u5c31\u628a\u5168\u90e8\u63a5\u53d7\u7684\u94fe\u63a5\u5220\u9664\uff0c\n    # \u53ea\u8981way\u4e2d\u6709\u6ca1"
    },
    {
        "number": 4129,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s = map(int, stdin.split())\n    d = {}\n    for i in range(n):\n        d[i+1] = {}\n        for j in range(m):\n            if (i+1, j) not in d[i+1]:\n                d[i+1][(j+1, s)] = 1\n            else:\n                d[i+1][(j+1, s)] += d[i+1][(j, s)]\n    res = d[n][s]\n    return str(res)"
    },
    {
        "number": 4129,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, m, s = map(int, stdin.split())\n    if n!= m!= s:\n        print('error')\n    else:\n        cities = []\n        for i in range(n):\n            cities.append(list(map(int, stdin.split())))\n        \n        tmp = cities[s][s]\n        for i in range(s + 1, n):\n            cities[i][s] = tmp\n            tmp = cities[i][s]\n        \n        for j in range(s - 1, s + 2):\n            cities[j][s] = tmp\n            tmp = cities[j][s]\n        \n        for i in range(s - 2, s + 3):\n            cities[i][s] = tmp\n            tmp = cities[i][s]\n        \n        for j in range(s - 3, s + 4):\n            cities[j][s] = tmp\n            tmp = cities[j][s]\n        \n        \n        # print(cities)\n        \n        \n        \n        \n        # print(n)\n        # print(m)\n        # print(s)\n        # print(cities)\n        \n        # print(cities[s][s])\n        # print(cities[s][m])\n        # print(cities[m][s])\n        \n        answer = 0\n        for i in range(s):\n            answer += cities[i][s]\n        # print(answer)\n        # print(cities[s][s])\n        answer += cities[m][s]\n        # print(answer)\n        # print(cities[m][m])\n        answer += cities[m][s]\n        # print(answer)\n        answer += cities[m][s]\n        answer += cities[m][s]\n        answer += cities[m][s]\n        # print(answer)\n        # print(cities[s][s])\n        answer += cities[s][m]\n        answer += cities[s][m]\n        answer += cities[s][m]\n        # print(answer)\n        answer += cities[s][m]\n        answer += cities[s][s]\n        answer += cities[s][m]\n        answer += cities[s][m]\n        answer += cities[s][m]\n        \n        answer += cities[m][s]\n        answer += cities[m][s]\n        answer += cities[m][s]\n        answer += cities[m][s]\n        answer += cities[m][s]\n        answer += cities[m][s]\n        answer += cities[m][s]\n        \n        answer += cities[s][s]\n        answer += cities[s][s]\n        answer += cities[s][s]\n        answer += cities[s][s]\n        answer += cities[s][s]\n        answer += cities[s][s]\n        answer += cities[s][s]\n        answer += cities[s][s]\n        \n        answer += cities[s][s]\n        answer += cities[s][s]\n        answer += cities[s][s]\n        answer += cities[s][s]\n        answer += cities[s][s]\n        answer += cities[s][s]\n        \n        answer += cities[s][s]\n        answer += cities[s][s]\n        answer += cities[s][s]\n        answer += cities[s][s]\n        answer += cities[s][s]\n        answer += cities[s][s]\n        answer += cities[s][s]\n        \n        answer += cities[m][m]\n        answer += cities[s][m]\n        answer += cities[m][m]\n        answer += cities[s][m]\n        answer += cities[s][m]\n        answer += cities[m][s]\n        answer += cities[s][m]\n        answer += cities[s][m]\n        answer += cities[m][s]\n        \n        answer += cities[m][s]\n        answer += cities[s][m]\n        answer += cities[s][s]\n        answer += cities[s][s]\n        answer += cities[s][s]\n        answer += cities[s][s]\n        answer += cities[s][m]\n        answer += cities[s][m]\n        answer += cities[s][m]\n        \n        answer += cities[m][m]\n        answer += cities[m][m]\n        answer += cities[m][m]\n        answer += cities[m][m]\n        answer += cities[m][m]\n        answer += cities[m][s]\n        answer += cities[m][s]\n        answer += cities[m][s]\n        answer += cities[m][s]\n        answer += cities[m][s]\n        \n        answer += cities[m][s]\n        answer += cities[s][s]\n        answer += cities[s][s]\n        answer += cities[s][s]\n        answer += cities[s][s]\n        answer += cities[s][s]\n        answer += cities[s][m]\n        answer += cities[s][m]\n        answer += cities[s][m]\n        answer += cities[s][s]\n        \n        answer += cities[s][s]\n        answer += cities[s][s]\n        answer += cities[s][s]\n        answer += cities[s][s]\n        answer += cities[s][s]\n        answer += cities[s][s]\n        answer += cities[s][s]\n        \n        answer += cities[s][s]\n        answer += cities[s][s]\n        answer += cities[s][s]\n        answer += cities[s][s]\n        answer += cities[s][s]\n        answer += cities[s][s]\n        answer += cities[s][s]\n        answer += cities[s][s]\n        \n        answer += cities[s][m]\n        answer += cities[s][s]\n        answer += cities[m][s]\n        answer += cities[s][s]\n        answer += cities[s][s]\n        answer += cities[s][s]\n        answer += cities[s][s]\n        answer += cities[s][s]\n        answer += cities[m][s]\n        answer += cities[s][m]\n        answer += cities[s][s]\n        answer += cities[m][s]\n        answer += cities[s][m]\n        \n        answer += cities[s][m]\n        answer += cities[s][m"
    },
    {
        "number": 4129,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s = map(int, stdin.split())\n    if n < m < s < n*m:\n        return str(n*m-n*m-m*s)\n    else:\n        return 0\n\nRead the input from stdin. For example, for n = 5 and m = 7, the input is:\n\n3 9 1\n1 2\n2 3\n3 4\n4 1\n5 6\n7 1\n\nOutput:\n3\n"
    },
    {
        "number": 4129,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s = map(int, stdin.split())\n    dic = {1: [1]}\n    for i in range(1, n+1):\n        dic[i] = list(map(int, stdin.split()))\n    q = []\n    for i in range(m):\n        q.append(list(map(int, stdin.split())))\n    visited = set()\n    parent = [[] for _ in range(n+1)]\n    for i in range(m):\n        for u, v in q[i]:\n            parent[u].append(v)\n            parent[v].append(u)\n    count = 0\n    while q:\n        cur = q.pop(0)\n        for i in range(n):\n            if not cur[i] in visited:\n                visited.add(cur[i])\n                for u in parent[cur[i]]:\n                    parent[u].remove(cur[i])\n                    if len(parent[u]) == 0:\n                        parent[u] = parent[cur[i]] + parent[cur[i]]\n                        parent[u].sort()\n                    q.append(parent[u])\n                count += 1\n    return count\n\nt = int(input())\nfor i in range(t):\n    n, m, s = map(int, input().split())\n    print(solution(n, m, s))"
    },
    {
        "number": 4129,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s = list(map(int, stdin.split()))\n    result = 0\n    \n    for i in range(n):\n        for j in range(m):\n            if i!= j and s - i!= m - j:\n                result += 1\n    print(result)\n    return str(result)\n"
    },
    {
        "number": 4130,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a_i = [int(stdin.strip()) for stdin in stdin.split(\"\\n\")[1:]]\n    a_i.sort(reverse=True)\n    \n    answer = 0\n    \n    for i in range(1, n):\n        if a_i[i-1] < a_i[i]:\n            answer += a_i[i]\n    return str(answer)\n\nsolution(stdin)"
    },
    {
        "number": 4130,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    team = []\n    for i in range(n):\n        team.append(a + (i + 1) * a)\n    max_player = team.index(max(team))\n    return str(team.count(max_player + 1))"
    },
    {
        "number": 4130,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = []\n    for _ in range(n):\n        a.append(list(map(int, stdin.split())))\n    s = 0\n    for i in range(n):\n        for j in range(n):\n            if a[i][j]!=a[j][i]:\n                s += a[i][j]\n    return str(s)\n"
    },
    {
        "number": 4130,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    a.sort()\n    a = a[:n]\n    answer = 0\n    for i in a:\n        answer += abs(i-1)\n    return str(answer)\n\n\n-----Constraints-----\n1 <= n <= 150000\n1 <= a_i <= 150000\n\nRuntime: 64 ms, faster than 32.46% of Python3 online submissions for Maximum Possible Number of Boxers in a Team.\nMemory Usage: 16.5 MB, less than 98.44% of Python3 online submissions for Maximum Possible Number of Boxers in a Team.\n"
    },
    {
        "number": 4130,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.rstrip())\n    heights = list(map(int,stdin.split()))\n    max_number = max(heights)\n    players = [0]*max_number\n    for i in range(n):\n        players[heights[i]] += 1\n    return str(sum(players))\n"
    },
    {
        "number": 4130,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    \n    if n == 1:\n        return str(a)\n    \n    elif a % n == 0:\n        team = [a]\n        team.extend([(i+1) for i in range(a) if i % n == 0])\n        team.sort()\n        team = [str(i) for i in team]\n        return ''.join(team)\n    \n    else:\n        team = [a]\n        team.extend([(i+1) for i in range(a) if i % n!= 0])\n        team.sort()\n        team = [str(i) for i in team]\n        return ''.join(team)\n"
    },
    {
        "number": 4130,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a_team = []\n    for _ in range(n):\n        team_input = stdin\n        team_input = team_input.replace(\" \",\"\")\n        team_input = team_input.replace(\"-\",\"\")\n        a_team.append(team_input)\n    a_team = sorted(a_team)\n    return str(a_team.count(a_team[-1]))\n\n-------------------------------------------------------------\n\nbest:\n\n>>> def solution(stdin):\n    n = int(stdin)\n    weight_team = [0] * n\n    count_team = [0] * n\n    team_list = []\n    for _ in range(n):\n        team_input = stdin\n        team_input = team_input.replace(\" \",\"\")\n        team_input = team_input.replace(\"-\",\"\")\n        team_list.append(team_input)\n    team_list = sorted(team_list)\n    weight_team[0] = team_list[0]\n    team_list.remove(weight_team[0])\n    for j in range(1, n):\n        weight_team[j] = team_list[j] + weight_team[j-1]\n        count_team[j] = weight_team[j-1] + count_team[j-1]\n    team_list = team_list[::-1]\n    team_list.sort()\n    team_list.reverse()\n    team_list = str(team_list)\n    return team_list.count(team_list[-1])\n"
    },
    {
        "number": 4130,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a_lst = list(map(int, stdin.split()))\n    a_lst.sort()\n    def get_max_weight(a_lst, w_lst):\n        max_weight = 0\n        for i in range(n):\n            if w_lst[i] < w_lst[i+1]:\n                w_lst[i+1] -= w_lst[i]\n                max_weight += w_lst[i]\n            else:\n                w_lst[i+1] += w_lst[i]\n                max_weight += w_lst[i]\n        return max_weight\n    def change_max_weight(a_lst, w_lst):\n        new_w_lst = []\n        for i in range(n):\n            new_w_lst.append(w_lst[i] + a_lst[i])\n        return new_w_lst\n    \n    for i in range(n):\n        w_lst = [0] * 100001\n        a_lst = a_lst[:i] + a_lst[i+1:]\n        max_weight = get_max_weight(a_lst, w_lst)\n        w_lst = change_max_weight(a_lst, w_lst)\n        w_lst.sort()\n        if max_weight > 100000:\n            return '-1'\n        elif max_weight == 100000:\n            return '1'\n    return '1'\n\nExample 1:\nInput: n = 4, a_lst = [3,4,1,1]\nOutput: 3\nExplanation:\nBoxer with a weight of 3 can be changed by 5 (resulting a team with a weight of 2)\nBoxer with a weight of 1 can be changed by 4 (resulting a team with a weight of 4)\nBoxer with a weight of 2 can be changed by 3 (resulting a team with a weight of 1)\n\nBoxer with a weight of 4 can't be changed, since there is no boxer with weight 4.\nExample 2:\nInput: n = 3, a_lst = [2,2,2,2,2]\nOutput: 2\nExplanation:\nBoxers with weight 2 can be changed by 2 (boxer with weight 2)\nBoxers with weight 2 can be changed by 1 (boxer with weight 2)\nBoxer with a weight of 2 can be changed by 2 (boxer with weight 2)\nBoxer with a weight of 2 can be changed by 1 (boxer with weight 2)\nBoxer with a weight of 2 can't be changed, since there is no boxer with weight 2.\n\nInput: n = 5, a_lst = [1,3,1,2,2]\nOutput: 2\n\n\n\nn = 10\na_lst = [5,7,4,4,3,5,8,8,10,7,9,10,2,8,1,4,9,3,6,6,4,6,5,8,2,4,7,8,3,8,1,6,3,4,6,2,7,5,5,9,3,8,4,1,6,2,4,6,3,9,7,4,5,10,8,2,6,2,8,4,1,2,3,5,7,2,8,7,2,3,7,3,5,10,6,4,4,9,6,10,8,2,7,8,8,6,10,4,2,6,3,3,4,9,7,4,7,4,10,6,10,3,7,6,6,8,6,8,4,7,8,7,6,3,4,9,7,9,5,2,6,7,4,6,2,2,2,1,3,5,6,8,2,6,7,7,3,5,10,3,8,7,5,6,5,5,10,6,7,3,3,10,7,3,7,2,2,3,2,8,4,3,3,3,3,1,7,6,4,8,8,3,4,4,4,9,1,9,8,9,5,4,4,5,6,5,6,7,7,4,8,8,8,5,2,4,7,7,8,7,8,7,4,1,1,8,8,5,7,7,7,8,6,3,3,3,7,8,2,8,4,6,8,3,4,3,3,4,1,5,3,7,8,6,6,6,9,8,3,6,1,2,4,3,5,8,6,5,1,4,1,3,8,5,4,2,7,4,6,3,1,5,9,3,6,9,7,5,2,1,3,3,4,6,7,5,6,6,6,8,3,1,5,8,7,1,7,7,4,6,5,3,9,2,9,8,8,3,4,7,3,8,3,4,7,3,9,3,2,5,8,1,4,8,5,4,6,8,7,4,9,2,3,3,4,7,6,8,8,1,7,8,2,9,5,8,3,3,7,4,7,1,9,2,1,7,1,8,4,6,9,5,4,6,4,4,6,6,5,6,8,4,2,7,6,4,4,7,8,5,2,5,5,3,7,3,5,5,6,6,4,6,3,8,4,7,3,9,2,9,5,3,8,2,4,2,6,3,5,2,8,2,1,7,9,3,2,6,9,3,5,7,4,6,7,4,3,8,9,9,1,7,3,8,3,7,7,1,5,5,7,1,6,5,7,1,7,8,5,4,1,8,9,9,5,4,9,5,4,4,3,8,3,8,5,8,6"
    },
    {
        "number": 4130,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    boxers, *team = stdin\n    \n    team_list = list(map(int, team))\n    weight_list = [int(boxer) for boxer in boxers.split(\",\")]\n    \n    max_weight = max(weight_list)\n    min_weight = min(weight_list)\n    \n    if max_weight == min_weight:\n        return str(min_weight)\n    \n    num_boxers = len(team_list)\n    \n    weight_changes = [max_weight - weight for weight in weight_list]\n    \n    while weight_changes:\n        current_team = team_list.pop(weight_changes.index(min(weight_changes)))\n        if current_team == num_boxers:\n            break\n        weight_changes.pop(weight_changes.index(min(weight_changes)))\n        \n    return \",\".join(map(str, team_list))\n\ndef"
    },
    {
        "number": 4130,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    boxers = [0 for _ in range(n)]\n    for i in range(1, n):\n        boxers[i] = boxers[i-1] + boxers[i]\n\n    max_people = max(boxers)\n    for i in range(n):\n        if boxers[i] >= max_people:\n            return str(max_people)\n    return str(max_people)\n\n\n-----Example 1-----\n\nInput\n\n3\n1 2 1\n\nOutput\n\n5\n\n-----Example 2-----\n\nInput\n\n5\n1 2 3 4 5\n\nOutput\n\n3\n\n\n-----Constraints-----\n\n1 <= n <= 10^4\n\n\n-----Time Limit (Extra Space)-----\n\nO(n)\n\n\n-----Space Limit (Extra Space)-----\n\nO(1)\n\n\n------Complexity-----\n\nTime   |  Space\n-----LIMIT-----\n    O(n)   |   +   |   +   |   +   |   +   |\n    O(n)   |   +   |   +   |   +   |   +   |\n    O(1)   |   +   |   +   |   +   |   +   |\n    O(1)   |   +   |   +   |   +   |   +   |\n    O(n)   |   +   |   +   |   +   |   +   |\n    O(n)   |   +   |   +   |   +   |   +   |\n    O(1)   |   +   |   +   |   +   |   +   |\n\n\n-----Algorithm-----\n\nTime   |  Space\n-----LIMIT-----\n    O(n)   |   +   |   +   |   +   |   +   |   +   |   +   |\n    O(n)   |   +   |   +   |   +   |   +   |   +   |   +   |\n    O(1)   |   +   |   +   |   +   |   +   |   +   |   +   |\n    O(1)   |   +   |   +   |   +   |   +   |   +   |   +   |\n    O(n)   |   +   |   +   |   +   |   +   |   +   |   +   |\n    O(n)   |   +   |   +   |   +   |   +   |   +   |   +   |\n    O(1)   |   +   |   +   |   +   |   +   |   +   |   +   |\n    O(1)   |   +   |   +   |   +   |   +   |   +   |   +   |\n    O(1)   |   +   |   +   |   +   |   +   |   +   |   +   |\n    O(n)   |   +   |   +   |   +   |   +   |   +   |   +   |\n    O(n)   |   +   |   +   |   +   |   +   |   +   |   +   |\n    O(1)   |   +   |   +   |   +   |   +   |   +   |   +   |\n    O(1)   |   +   |   +   |   +   |   +   |   +   |   +   |\n    O(1)   |   +   |   +   |   +   |   +   |   +   |   +   |\n    O(n)   |   +   |   +   |   +   |   +   |   +   |   +   |\n    O(n)   |   +   |   +   |   +   |   +   |   +   |   +   |\n    O(1)   |   +   |   +   |   +   |   +   |   +   |   +   |\n    O(1)   |   +   |   +   |   +   |   +   |   +   |   +   |\n    O(1)   |   +   |   +   |   +   |   +   |   +   |   +   |\n    O(1)   |   +   |   +   |   +   |   +   |   +   |   +   |\n    O(1)   |   +   |   +   |   +   |   +   |   +   |   +   |\n    O(n)   |   +   |   +   |   +   |   +   |   +   |   +   |\n    O(n)   |   +   |   +   |   +   |   +   |   +   |   +   |\n    O(1)   |   +   |   +   |   +   |   +   |   +   |   +   |\n    O(1)   |   +   |   +   |   +   |   +   |   +   |   +   |\n    O(1)   |   +   |   +   |   +   |   +   |   +   |   +   |\n    O(n)   |   +   |   +   |   +   |   +   |   +   |   +   |\n    O(n)   |   +   |   +   |   +   |   +   |   +   |   +   |\n    O(1)   |   +   |   +   |   +   |   +   |   +   |   +   |\n    O(1)   |   +   |   +   |   +   |   +   |   +   |   +   |\n    O(1)   |   +   |   +   |   +   |   +   |   +   |   +   |\n    O(n)   |   +   |   +   |   +   |   +   |   +   |   +   |\n    O(n)   |   +   |   +   |   +   |   +   |   +   |   +   |\n    O(1)   |   +   |   +   |   +   |   +   |   +   |   +   |\n    O(1)   |   +   |   +   |   +   |   +   |   +   |   +   |\n    O(1)   |   +   |   +   |   +   |   +   |   +   |   +   |\n    O(1)   |   +   |   +   |   +   |   +   |   +   |   +   |\n    O(1)   |   +   "
    },
    {
        "number": 4131,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = list(map(int, stdin.split()))\n    P_1, Y_1 = list(map(int, input().split()))\n    P_M, Y_M = list(map(int, input().split()))\n    P_1 -= 1\n    Y_1 -= 1\n    P_M -= 1\n    Y_M -= 1\n    if N * M < P_M + P_1 + Y_M:\n        print(*sorted(list(map(lambda x: str(x), range(P_M + P_1 + Y_M))))[::-1], sep='')\n    elif N * M < P_M + P_1 + Y_1:\n        print(*sorted(list(range(P_M + P_1 + Y_1)))[::-1], sep='')\n    else:\n        print(str(N * M - P_M + P_1 + Y_M))"
    },
    {
        "number": 4131,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    P_1, P_M = map(int, stdin.split())\n    Y_1, Y_M = map(int, stdin.split())\n    \n    city_list = list(range(1,N+1))\n    city_list.sort(reverse=True)\n    city_list = city_list[:N+M]\n    \n    answer = \"\"\n    for i in range(N):\n        if i % 3 == 0:\n            answer += str(P_1) + \" \"\n        answer += str(Y_1) + \" \"\n        answer += str(city_list[i]) + \" \"\n        answer += str(city_list[i+1]) + \" \"\n        answer += str(city_list[i+2]) + \" \"\n        answer += str(city_list[i+3])\n        answer += \" \"\n        answer += str(i+4)\n        answer += \" \"\n        answer += str(i+5)\n        answer += \" \"\n        answer += str(i+6)\n        answer += \" \"\n        answer += str(i+7)\n        answer += \" \"\n        answer += str(i+8)\n        answer += \" \"\n        answer += str(i+9)\n        answer += \" \"\n        answer += str(i+10)\n        answer += \" \"\n        answer += str(i+11)\n        answer += \" \"\n        answer += str(i+12)\n        answer += \" \"\n    answer = answer.strip()\n    answer = answer.split(\" \")\n    answer = answer[:len(answer)-1]\n    answer = [int(a) for a in answer]\n    answer.sort(reverse=True)\n    answer = [str(a) for a in answer]\n    return \"\".join(answer)\n"
    },
    {
        "number": 4131,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(i) for i in stdin.split()]\n    P1, P2, P3 = [int(i) for i in stdin.split()]\n    Y_1, Y_2, Y_3 = [int(i) for i in stdin.split()]\n    return sorted([P1, P2, P3, Y_1, Y_2, Y_3])\n"
    },
    {
        "number": 4131,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, p = map(int, stdin.split())\n    city_list = [int(x) for x in input().split()]\n    city_list.sort()\n    for i in range(n):\n        p_i = (p * (i + 1)) // 10 ** 9 + 1\n        x_i = city_list[i]\n        if (x_i % 10) % 3!= 0:\n            print(p_i, x_i)\n            continue\n        print(p_i, x_i, end=\"\")\n\n-----Sample Output-----\n"
    },
    {
        "number": 4131,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    \n    prefectures = [int(x) for x in range(1, N+1)]\n    city = [int(x) for x in input().split()]\n    \n    city = [i+1 for i in city]\n    \n    city.sort()\n    \n    answer = ''\n    \n    # Prefecture 1\n    for i in range(N):\n        if city[i] in prefectures:\n            answer += str(prefectures.index(city[i])+1)\n        else:\n            answer += str(prefectures.index(city[i])+1) + '0'\n        \n        if i < N-1:\n            if city[i+1] in prefectures:\n                answer += '1'\n    \n    # Prefecture 2\n    answer = answer[::-1]\n    \n    # City 1\n    for i in range(M):\n        if city[i] in prefectures:\n            answer += str(prefectures.index(city[i])+1)\n        else:\n            answer += str(prefectures.index(city[i])+1) + '0'\n        \n        if i < M-1:\n            if city[i+1] in prefectures:\n                answer += '1'\n    \n    # City 2\n    for i in range(M):\n        if city[i] in prefectures:\n            answer += str(prefectures.index(city[i])+1)\n        else:\n            answer += str(prefectures.index(city[i])+1) + '0'\n        \n        if i < M-1:\n            if city[i+1] in prefectures:\n                answer += '1'\n    \n    return answer\n\nprint(solution(stdin))"
    },
    {
        "number": 4131,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, M, P_1, P_M = map(int, stdin.split(' '))\n    y, m, p = map(int, input().split(' '))\n\n    if N > 10 ** 9:\n        return \"00\" * N\n    if N == 1:\n        if m < 10 ** 6:\n            return '0' + '0' * m\n        return '0' * (N - m) + '0' * m\n\n    id_num = ''\n    for city in range(1, N + 1):\n        if id_num == '':\n            id_num += str(p * y + m * city)\n        else:\n            id_num += str(p * y + m * city + (N - m) * id_num[-6:])\n    return id_num[::-1]\n"
    },
    {
        "number": 4131,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(i) for i in stdin.split()]\n    city = [int(i) for i in stdin.split()]\n    answer = [str(i+1) for i in range(N)]\n    \n    for i in range(N):\n        if city[i]!= -1:\n            answer[i] = str(city[i]+1)\n        else:\n            answer[i] = '00'\n    \n    answer.sort()\n    return \" \".join(answer)\n"
    },
    {
        "number": 4131,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    P_1, Y_1 = map(int, stdin.split())\n    P_2, Y_2 = map(int, stdin.split())\n    P_3, Y_3 = map(int, stdin.split())\n    N_1, N_2, N_3 = map(int, stdin.split())\n    Y = [Y_1, Y_2, Y_3, Y_1 + Y_2, Y_1 + Y_2 + Y_3, Y_1 + Y_2 + Y_3 + Y_1]\n    Y.sort()\n    for i in range(4):\n        if (N_2 - N_1 == 1):\n            break\n        if i == 2:\n            P_i = P_1\n            Y_i = Y[i]\n        else:\n            P_i = N_2 + P_1\n            Y_i = Y[i] + P_1\n        if (Y_i < 10 ** 9):\n            for k in range(6):\n                if k == 3:\n                    continue\n                Y_k = Y_i + k\n                if (Y_k < 10 ** 9):\n                    if Y_i + k == K:\n                        answer.append(str(P_i) + str(Y_k))\n                    else:\n                        answer.append(str(P_i) + str(Y_k) + '0' + str(k) + str(Y_i + k))\n        else:\n            for k in range(6):\n                if k == 3:\n                    continue\n                Y_k = Y_i + k\n                if (Y_k < 10 ** 9):\n                    if Y_i + k == K:\n                        answer.append(str(P_i) + str(Y_k))\n                    else:\n                        answer.append(str(P_i) + str(Y_k) + '0' + str(k) + str(Y_i + k))\n    answer.sort()\n    return''.join(answer)"
    },
    {
        "number": 4131,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    prefectures = list(map(int, stdin.split()))\n    prefectures.sort()\n    prefectures = list(map(str, prefectures))\n    prefectures.append(str(prefectures[-1] + n))\n    prefectures.append(str(prefectures[-1] + n + 1))\n    answer = ''\n    for i in range(n):\n        for j in range(m):\n            answer += prefectures[i] + prefectures[i + 1] + prefectures[i + 2]\n    return answer\n'''\n\ndef"
    },
    {
        "number": 4131,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    P_1, Y_1 = map(int, stdin.split())\n    P_M, Y_M = map(int, stdin.split())\n    id_set = set()\n    for i in range(N):\n        id_set.add(str(i+1)+str(Y_1)+str(P_1))\n    id_set = sorted(id_set)\n    for i in range(N):\n        for j in range(M):\n            if str(i+1)+str(Y_1)+str(P_1) == id_set[j]:\n                id_set[j+1] = str(i+1)+str(Y_1)+str(P_1)\n    return''.join(id_set)\n\n-----Sample Output-----\n2 3\n1 32\n2 63\n1 12\n\n-----Sample Input-----\n1 2\n1 10\n1 5\n\n-----Sample Output-----\n10 5\n\n-1 0\n-1 1\n-1 2\n\n-----Constraints-----\n-1 \\leq N \\leq 10^5\n-1 \\leq M \\leq 10^5\n\n-----Input Format\nThe first line contains an integer N, the number of cities, and then N lines, each containing N integers.\n\nThe next N lines contains N integers each separated by a single space.\n\nThe next N lines contains M integers each separated by a single space.\n\nThe last line contains the corresponding prefecture IDs.\n\n-----Output Format\nOutput a single integer denoting the IDs of all the cities in the order they belong to the prefecture ID.\n\n-----Example Input\n2 3\n1 32\n2 63\n1 12\n\n-----Example Output\n000001000002\n000002000001\n000001000001\n\n-----Explanation\nFor City 1, the corresponding prefecture ID is 000001000002.\nFor City 2, the corresponding prefecture ID is 0002000001.\nFor City 3, the corresponding prefecture ID is 0002000000.\nFor City 1, the corresponding prefecture ID is 000002000001.\n\nThe list of cities is given in the input.\n\"\"\"\nfrom collections import Counter\n\n\ndef"
    },
    {
        "number": 4132,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N,A_i = map(int, stdin.split())\n    \n    def get_monsters(N):\n        return list(range(1,N+1))\n    \n    def get_alive(i):\n        return [A_i]\n    \n    def get_attack(i):\n        return list(range(i+1,N+1))\n    \n    alive_monsters = get_alive(N)\n    monsters = get_monsters(N)\n    attack = get_attack(N)\n    \n    alive = []\n    monsters_dead = []\n    attack_dead = []\n    attack_num = 1\n    dead_num = 0\n    \n    while alive and monsters and attack:\n        while attack_num < N:\n            i = attack_num\n            attack_num += 1\n            alive_monsters_dead = [m for m in alive if m in alive_monsters]\n            monsters_dead = [m for m in monsters if m in monsters_dead]\n            dead_num = len(alive_monsters_dead)\n            \n            if dead_num == 0:\n                alive = alive_monsters_dead\n                monsters = monsters_dead\n                attack = attack_dead\n                break\n            \n            alive = alive_monsters_dead\n            monsters = monsters_dead\n            attack = attack_dead\n            \n            dead_num -= 1\n            if dead_num == 0:\n                alive = [m for m in alive if m not in attack]\n                monsters = [m for m in monsters if m not in attack]\n                attack = [m for m in attack if m not in attack]\n                break\n        \n        if alive:\n            alive = list(set(alive))\n            attack = list(set(attack))\n            alive_monsters = [m for m in alive if m in alive_monsters]\n            monsters_dead = [m for m in monsters if m in monsters_dead]\n            attack_dead = [m for m in attack if m in attack_dead]\n            alive_num = len(alive_monsters)\n            \n            if alive_num == 0:\n                alive = [m for m in alive if m not in attack]\n                monsters = [m for m in monsters if m not in attack]\n                attack = [m for m in attack if m not in attack]\n                break\n            \n            attack_num -= 1\n            alive_num -= 1\n            \n            dead_num -= 1\n            if dead_num == 0:\n                alive = [m for m in alive if m not in attack]\n                monsters = [m for m in monsters if m not in attack]\n                attack = [m for m in attack if m not in attack]\n                break\n        \n        dead_num += 1\n        if dead_num == 0:\n            alive = [m for m in alive if m not in attack]\n            monsters = [m for m in monsters if m not in attack]\n            attack = [m for m in attack if m not in attack]\n            break\n    \n    return str(len(alive) + dead_num)\n\nN,A_i = map(int, input().split())\nprint(solution(N,A_i))\n"
    },
    {
        "number": 4132,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    A_list = []\n    for _ in range(n):\n        A_list.append(int(stdin.split()[1]))\n    ans = abs(min(A_list))\n    print(ans)\n    return str(ans)\n\"\"\"\n\nimport heapq\n\n\ndef"
    },
    {
        "number": 4132,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, A = map(int, stdin.split())\n    A = list(map(int, A.split()))\n    A.sort()\n    answer = 0\n    for i in range(N):\n        if i == 0 or i == N-1:\n            answer += A[i]\n        else:\n            answer += A[i] - A[i-1]\n    return str(answer)\n\nn, a = map(int, input().split())\nprint(solution(input()))"
    },
    {
        "number": 4132,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(min(map(int, stdin.split())))\n\n-----Explanation-----\n- Iterate from 2 to N.\n- Create a map with a new dict with each key being the new number, and the value being the number of health to be decreased by.\n- Iterate from 3 to N.\n- Decrease the number by 2 at each key, until it is 1, which is minimized by the remaining number of health.\n\nExplanation:\n"
    },
    {
        "number": 4132,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, A = map(int, stdin.split())\n    A = list(map(int, A.split()))\n    A.sort()\n    n = len(A)\n    min_hp = A[0]\n    res = 0\n    for i in range(1, n):\n        min_hp -= A[i]\n        res = max(min_hp, res)\n    return str(res)\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4132,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split('\\n')[0])\n    A_i = int(stdin.split('\\n')[1])\n    A_i_list = list(map(int, stdin.split('\\n')[1:]))\n    A_i_list.sort()\n    A_i_list.insert(0, 0)\n    answer = 0\n    for _ in range(N-1):\n        answer += A_i_list[A_i]\n        A_i += 1\n    return str(answer)\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4132,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A = [int(i) for i in stdin.split()]\n    N = int(stdin.split()[-1])\n    A.sort()\n    print(A[-1]-A[0])\n    print(sum(A)-A[0])\n\nimport collections\ndef"
    },
    {
        "number": 4132,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    A = map(int, stdin.strip().split())\n    \n    A.sort()\n    \n    def DFS(i: int) -> int:\n        if i == N:\n            return 0\n        \n        if A[i] == 1:\n            return 1 + DFS(i + 1)\n        \n        return DFS(i + 1)\n        \n    answer = 0\n    for a in A:\n        answer = max(answer, DFS(a) + a)\n    return str(answer)\n"
    },
    {
        "number": 4132,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, A = map(int, stdin.split())\n    \n    alive = list(map(int, stdin.split()))\n    alive.sort()\n    \n    B = A - alive[-1]\n    \n    return str(min(B, B - A))\n\"\"\"\n\ndef"
    },
    {
        "number": 4132,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n  return str(min(int(stdin.split()[0])-int(stdin.split()[1]),int(stdin.split()[0])-int(stdin.split()[2])))\n\n-----Grades Assignment:\n    An integer representing the grade of the student.\n    A grade of 0 is a student with no grade, and a grade of -1 is a student with no grade.\n    A grade of 1 is a professor with a grade of 0, and a grade of 2 is a professor with a grade of 1.\n    A grade of 3 is a student with a grade of 1, and a grade of 4 is a student with a grade of 2.\n    A grade of 5 is a professor with a grade of 3, and a grade of 6 is a professor with a grade of 4.\n    A grade of 7 is a professor with a grade of 4, and a grade of 8 is a professor with a grade of 5.\n    A grade of 9 is a professor with a grade of 5, and a grade of 10 is a professor with a grade of 8.\n\n---\n"
    },
    {
        "number": 4133,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\""
    },
    {
        "number": 4133,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, m = map(int, stdin.split())\n    golf = [list(map(int, input().split())) for _ in range(n)]\n\n    def rotate(x):\n        return sum(y for y in zip(*golf[x]))\n\n    def get_min_diet(index):\n        return [min(j, gol[index][g]) for j, gol in enumerate(golf[index]) if gol[g] > 0]\n\n    def fill_sequence(index):\n        if index == n:\n            for j in range(n):\n                if sum(golf[j]) <= 0:\n                    golf[j] = [0 for _ in range(m)]\n                else:\n                    golf[j] = [0 for _ in range(m)]\n            return\n        for i in range(index, index+m):\n            golf[index][i] = max(golf[i][index+m], rotate(i) - rotate(index+1))\n            fill_sequence(i)\n        return\n    \n    def get_min_golf_goals(index):\n        return [gol[index][g] for j, gol in enumerate(golf[index]) if gol[g] > 0]\n\n    min_min_golf_goals = [None] * n\n    for index in range(n):\n        min_min_golf_goals[index] = max(get_min_golf_goals(index))\n    for index in range(n-m, n):\n        min_min_golf_goals[index] = max(get_min_golf_goals(index), min_min_golf_goals[index-m])\n\n    min_diet_sequence = [min_min_golf_goals[index] for index in range(n)]\n\n    for index in range(n):\n        min_diet_sequence[index] = min_diet_sequence[index] + min_min_golf_goals[index]\n\n    for i in range(n):\n        for j in range(n):\n            if min_diet_sequence[j] < min_diet_sequence[i]:\n                min_diet_sequence[i] = min_diet_sequence[j]\n    \n    for i in range(n):\n        print(*min_diet_sequence[i], sep=',', end='\\n')\n    \n    return \"false\"\n\"\"\"\n\ndef"
    },
    {
        "number": 4133,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    name = stdin.split('\\n')[0]\n    jows = stdin.split('\\n')[1]\n    \n    mylist = []\n    for i in jows:\n        for j in i:\n            if j not in mylist:\n                mylist.append(j)\n    mylist = sorted(mylist)\n    return ''.join(mylist)"
    },
    {
        "number": 4133,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    answer = [0] * n\n    # print(answer)\n    # print(n)\n    # print(answer[::-1])\n    # print(len(answer))\n    # print(n)\n    # print(answer)\n    # print(len(answer))\n    # print(n)\n    # print(answer)\n    for i in range(1, n):\n        for j in range(i):\n            if j >= i-j:\n                answer[i-j] = str(int(answer[i-j]) + int(answer[i-j+j]))\n                # print(answer[i-j])\n    print(''.join(answer))\n    return ''.join(answer)\n    \n\"\"\"\nclass Solution:\n    def solution(self, stdin):\n        n = int(stdin)\n        answer = [0] * n\n        # print(answer)\n        # print(n)\n        # print(answer[::-1])\n        # print(len(answer))\n        # print(n)\n        # print(answer)\n        # print(len(answer))\n        # print(n)\n        # print(answer)\n        for i in range(n):\n            if i == 0:\n                answer[0] = str(int(answer[0]) + int(answer[1]))\n                # print(answer[0])\n            else:\n                answer[i] = str(int(answer[i]) + int(answer[i-1]))\n                # print(answer[i])\n        print(''.join(answer))\n        return ''.join(answer)"
    },
    {
        "number": 4133,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n    \nclass Solution:\n    \n    def __init__(self):\n        self.stack = []\n        self.visited = set()\n        \n    def main(self, stdin: str) -> str:\n        self.visited.add(stdin)\n        \n        while self.stack:\n            \n            for i in self.stack:\n                \n                if i in self.visited:\n                    continue\n                \n                self.stack.remove(i)\n                \n                if i in self.visited:\n                    continue\n                \n                self.stack.append(i)\n                \n                self.visited.add(i)\n            \n        return self.stack[0]\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n"
    },
    {
        "number": 4133,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.rstrip()\n    \n    i = 1\n    while i < len(stdin) and stdin[i] == '*':\n        i += 1\n    if i == len(stdin):\n        return 'false'\n    j = i\n    while j < len(stdin):\n        if stdin[j] == '_':\n            j += 1\n        elif stdin[j] == '-':\n            if stdin[j-1] == '_':\n                j += 1\n            elif stdin[j-1] == '*':\n                j += 1\n                continue\n            elif stdin[j-1] == '.':\n                j += 1\n                continue\n            elif stdin[j-1] == ',':\n                j += 1\n                continue\n            else:\n                j += 1\n                continue\n        else:\n            j += 1\n            continue\n    \n    stdin = stdin.replace('-', '_').replace('.', '_').replace(',', '').replace(' ', '').replace('_', '')\n    \n    while j < len(stdin) and stdin[j] == '.':\n        j += 1\n        \n    while j < len(stdin) and stdin[j] == '_':\n        j += 1\n        \n    while j < len(stdin) and stdin[j] == '_':\n        j += 1\n        \n    return ''.join(sorted(stdin))\n"
    },
    {
        "number": 4133,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    ch = ['.', ',']\n    for i in lines:\n        for c in ch:\n            i = i.replace(c, \"\")\n        i = i.split(\",\")\n        i = [int(x) for x in i]\n        ch = ['*', '=', '+', '-', '/']\n        for j in i:\n            if j < 0 or j > 9:\n                return \"false\"\n    return \"true\"\n\n-----Goals-----\nGiven the name of a golorp who is visiting, decide whether you could feed it to this golorp, and return a string of the corresponding sequence of variable values that fits to feed it."
    },
    {
        "number": 4133,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    ls = stdin.splitlines()\n    lst = []\n    for i in ls:\n        lst.append(i[:i.index('<')])\n    lst.sort(key=lambda x: x[x.index('='):x.index('>')])\n    for i in lst:\n        print(i)\n    return \"false\"\n\n\n-----Constraints-----\n1 <= stdin.length <= 1024\nstdin contains only characters 0-9.\nstdin consists of only lowercase letters.\n\n\"\"\"\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        ls = stdin.splitlines()\n        lst = []\n        for i in ls:\n            lst.append(i[:i.index('<')])\n        lst.sort(key=lambda x: x[x.index('='):x.index('>')])\n        for i in lst:\n            print(i)\n        return \"false\"\n"
    },
    {
        "number": 4133,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    trees = list(map(int,stdin.split()))\n    # print(trees)\n    # print(n)\n    # print(trees[0])\n    trees.insert(0,0)\n    # print(trees)\n    l = 0\n    for i in range(len(trees)):\n        # print(i)\n        # print(trees[i])\n        l = max(l,trees[i])\n    return \"false\" if l==0 else \"\".join([str(l-x) for x in trees])\n\n------ Time complexity ------\n\nTime: O(N)\n\nThe time complexity of this problem is O(N).\n\nTwo lists: the input list (the initial variables) and a list of the input values.\nThe input values are (1 <= x <= 9) integers.\n\nTime: O(N)\n\nThe time complexity of this problem is O(N).\n\nTwo pointers: start and end.\n\nTime: O(N)\n\nThe time complexity of this problem is O(N).\n\nYou have to find out which golorp is closest to the starting golorp. You can find out the start golorp.\n\nTime: O(N)\n\nThe time complexity of this problem is O(N).\n\nFor each golorp:\n    for each variable it gets assigned one value of the current jaw.\n    if there is a value that doesn't get assigned, it's the closest variable to the current golorp.\n\nTime: O(N)\n\nThe time complexity of this problem is O(N).\n\nThe variables for each golorp have to be given as lists of the number of variables they get.\n\nTime: O(N)\n\nThe time complexity of this problem is O(N).\n\nFor each golorp:\n    for each variable it gets assigned one value of the current jaw.\n    if there is a value that doesn't get assigned, it's the closest variable to the current golorp.\n\nTime: O(N)\n\nThe time complexity of this problem is O(N).\n\nFor each golorp:\n    for each variable it gets assigned one value of the current jaw.\n    if there is a value that doesn't get assigned, it's the closest variable to the current golorp.\n\nTime: O(N)\n\nThe time complexity of this problem is O(N).\n\nFor each golorp:\n    for each variable it gets assigned one value of the current jaw.\n    if there is a value that doesn't get assigned, it's the closest variable to the current golorp.\n\nTime: O(N)\n\nThe time complexity of this problem is O(N).\n\nFor each golorp:\n    for each variable it gets assigned one value of the current jaw.\n    if there is a value that doesn't get assigned, it's the closest variable to the current golorp.\n\nTime: O(N)\n\nThe time complexity of this problem is O(N).\n\nFor each golorp:\n    for each variable it gets assigned one value of the current jaw.\n    if there is a value that doesn't get assigned, it's the closest variable to the current golorp.\n\nTime: O(N)\n\nThe time complexity of this problem is O(N).\n\nFor each golorp:\n    for each variable it gets assigned one value of the current jaw.\n    if there is a value that doesn't get assigned, it's the closest variable to the current golorp.\n\nTime: O(N)\n\nThe time complexity of this problem is O(N).\n\nFor each golorp:\n    for each variable it gets assigned one value of the current jaw.\n    if there is a value that doesn't get assigned, it's the closest variable to the current golorp.\n\nTime: O(N)\n\nThe time complexity of this problem is O(N).\n\nFor each golorp:\n    for each variable it gets assigned one value of the current jaw.\n    if there is a value that doesn't get assigned, it's the closest variable to the current golorp.\n\nTime: O(N)\n\nThe time complexity of this problem is O(N).\n\nFor each golorp:\n    for each variable it gets assigned one value of the current jaw.\n    if there is a value that doesn't get assigned, it's the closest variable to the current golorp.\n\nTime: O(N)\n\nThe time complexity of this problem is O(N).\n\nFor each golorp:\n    for each variable it gets assigned one value of the current jaw.\n    if there is a value that doesn't get assigned, it's the closest variable to the current golorp.\n\nTime: O(N)\n\nThe time complexity of this problem is O(N).\n\nFor each golorp:\n    for each variable it gets assigned one value of the current jaw.\n    if there is a value that doesn't get assigned, it's the closest variable to the current golorp.\n\nTime: O(N)\n\nThe time complexity of this problem is O(N).\n\nFor each golorp:\n    for each variable it gets assigned one value of the current jaw.\n    if there is a value that doesn't get assigned, it's the closest variable to the current golorp.\n\nTime: O(N)\n\nThe time complexity of this problem is O(N).\n\nFor each golorp:\n    for each variable it gets assigned one value of the current jaw.\n    if there is a value that doesn't get assigned, it's the closest variable to the current golorp.\n\nTime: O(N)\n\nThe time complexity of this problem is O(N).\n\nFor each golorp:\n    for each variable it gets assigned one value of the current jaw.\n    if there is a value that doesn't get assigned, it's the closest variable to the current golorp.\n\nTime: O(N)\n\nThe time complexity of this problem is O(N).\n\nFor each golorp:\n    for each variable it gets assigned one value of the current jaw.\n    if there is a value that doesn't get assigned, it's the closest variable to the current golorp.\n\nTime: O(N)\n\nThe time complexity of this problem is O(N).\n\nFor each golorp:\n    for each variable it gets assigned one value of the current jaw.\n    if there is a value that doesn't get assigned, it's the closest variable to the current golorp.\n\nTime: O(N)\n\nThe time complexity of this problem is O(N).\n\nFor each golorp:\n    for each variable it gets assigned one value of the current jaw.\n    if there is a value that doesn't get assigned, it's the closest variable to the current golorp.\n\nTime: O(N)\n\nThe time complexity of this problem is O(N).\n\nFor each golorp:\n    for each variable it gets assigned one value of the current jaw.\n    if there is a value that doesn't get assigned, it's the"
    },
    {
        "number": 4133,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stack = []\n    for s in stdin:\n        if s.isdigit():\n            stack.append(int(s))\n        elif s == \"(\":\n            stack.append(\")\")\n        elif s == \")\":\n            if len(stack) == 1:\n                return \"false\"\n            else:\n                if stack.pop() == \"(\":\n                    return \"false\"\n        elif s == \"*\":\n            if len(stack) == 1:\n                return \"false\"\n            else:\n                if stack.pop() == \"*\":\n                    return \"false\"\n        elif s == \"+\":\n            if len(stack) == 1:\n                return \"false\"\n            else:\n                if stack.pop() == \"+\":\n                    return \"false\"\n    if len(stack)!= 0:\n        return \"false\"\n    return \"true\"\n\n\n\n-----Submissions-----\n\n14 / 14 test cases passed.\nStatus: Accepted\nRuntime: 176 ms\nMemory Usage: 14.8 MB\n\nRuntime: 112 ms, faster than 41.68% of Python3 online submissions for Goat Latin.\nMemory Usage: 14.8 MB, less than 81.40% of Python3 online submissions for Goat Latin.\n\n\n\n-----Original Solution-----\n\ndef"
    },
    {
        "number": 4134,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    grid = []\n    for _ in range(n):\n        grid.append(list(map(int, stdin.split())))\n    return solve(grid, 0, 0, 0, 0, 0, 0, 0, k, [])"
    },
    {
        "number": 4134,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, m = map(int, stdin.split())\n    k = int(stdin.split()[1])\n\n    def make_grid(n, m):\n        g = []\n        for i in range(n):\n            g.append([])\n            for j in range(m):\n                g[-1].append(str(k))\n        return g\n\n    def dfs(grid, i, j, k, s, p):\n        if p == 'xor':\n            print(''.join(s))\n            return\n        if i >= n or j >= m or i < 0 or j < 0 or grid[i][j]!= '1':\n            return\n        grid[i][j] = '0'\n        s.append((i, j))\n        dfs(grid, i + 1, j, k, s, 'xor')\n        dfs(grid, i - 1, j, k, s, 'xor')\n        dfs(grid, i, j + 1, k, s, 'xor')\n        dfs(grid, i, j - 1, k, s, 'xor')\n        dfs(grid, i, j, k - 1, s, 'xor')\n\n    grid = make_grid(n, m)\n\n    dfs(grid, 0, 0, k, [], 'xor')\n    return ''.join(grid)\n\n\ndef"
    },
    {
        "number": 4134,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = list(map(int, stdin.split()))\n    lst = []\n    for i in range(n):\n        for j in range(m):\n            lst.append((i + 1, j + 1))\n    # print(lst)\n\n    cnt = 0\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            for k in range(1, 10 ** 18):\n                # print(i, j, k)\n                if (i, j) in lst and (i, j)!= (i + 1, j):\n                    # print(i, j)\n                    lst.remove((i, j))\n                    lst.remove((i + 1, j))\n                    lst.remove((i + 1, j + 1))\n                    lst.remove((i, j + 1))\n                    lst.remove((i + 1, j + 1))\n                    lst.remove((i + 1, j))\n                    lst.remove((i, j + 1))\n                    cnt += 1\n                    # print(i, j, k, lst)\n    print(cnt)\n\n    return str(cnt)\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4134,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    grid = []\n    for _ in range(n):\n        grid.append(list(map(int, stdin.split())))\n    answer = []\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 1:\n                grid[i][j] = (1 ^ k) + grid[i][j]\n                answer.append(grid[i][j])\n                \n    return str(len(set(answer)))\n\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4134,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4134,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    k = int(stdin.split()[-1])\n    \n    def isvalid(i, j, k):\n        if 0 <= i < n and 0 <= j < m and 0 <= k < 10 ** 18:\n            return True\n        return False\n    \n    def isvalid_xor(i, j, k):\n        return sum(map(lambda x: x & (x ^ i) ^ (x ^ j) ^ (x ^ k), range(1, 10 ** 18))) == k\n    \n    def find_paths(i, j, k, visited):\n        if i == n or j == m or k == k or i in visited or j in visited:\n            return 0\n        \n        result = 0\n        \n        if i == 0 and j == 0 and k == 0:\n            return 1\n        \n        if isvalid(i, j, k):\n            result += find_paths(i - 1, j, k, visited)\n            result += find_paths(i, j - 1, k, visited)\n        \n        if isvalid(i, j, k):\n            result += find_paths(i - 1, j, k - 1, visited)\n        \n        if isvalid(i, j, k):\n            result += find_paths(i, j - 1, k, visited)\n        \n        if isvalid(i, j, k):\n            result += find_paths(i - 1, j - 1, k, visited)\n        \n        return result\n    \n    answer = []\n    for i in range(n):\n        for j in range(m):\n            if isvalid_xor(i, j, k):\n                answer.append(find_paths(i, j, k, set()))\n    \n    return str(len(answer))"
    },
    {
        "number": 4134,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return '0'"
    },
    {
        "number": 4134,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    k = int(stdin.split()[1])\n    grid = []\n    for i in range(n):\n        grid.append(list(map(int, stdin.split()[i+1:i+1+m])))\n    for j in range(m):\n        grid[j] = [grid[j][i] for i in range(n)]\n    \n    for i in range(n):\n        for j in range(m):\n            grid[i][j] = (grid[i][j] & k) or grid[i][j]\n    \n    return str(sum(grid[i][j] for i in range(n) for j in range(m)))"
    },
    {
        "number": 4134,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, m = map(int, stdin.split())\n    k = int(stdin.split()[1])\n\n    paths = {}\n    for i in range(n):\n        for j in range(m):\n            paths[(i, j)] = k\n\n    for j in range(m):\n        paths[(i, j + 1)] = k\n\n    print(paths)\n    for path in paths.values():\n        paths[(i, j)] = path\n    print(paths)\n    return str(len(paths))\n"
    },
    {
        "number": 4134,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    m = int(stdin.splitlines()[1])\n    k = int(stdin.splitlines()[2])\n    path = [list(map(int, stdin.splitlines()[i].split())) for i in range(3, n*m+3)]\n    path = path + path[::-1]\n    for i in range(0, n*m+3, 3):\n        for j in range(3):\n            path[i+j] ^= k\n    ans = 0\n    for i in range(n*m):\n        if path[i] == 0:\n            ans += 1\n    print(ans)\n    return str(ans)\n\n\n-----Quick Sort-----\n\n<Implementation>\ndef"
    },
    {
        "number": 4135,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = str(stdin)\n    if len(s) % 2 == 0:\n        c = s[::2]\n        a = s[1::2]\n        for i in range(n):\n            a += c[i]\n            a += c[i + 1]\n        s = a\n    else:\n        for i in range(n - 1, -1, -2):\n            s = s[:i] + s[i + 2:]\n    return s\n\n-----Examples-----\n\nInput\n5\neriosedxz\n\nOutput\nerio\n\nInput\n2\nz\n\nOutput\nz\n\n\"\"\"\n\nclass Solution:\n    def decryptString(self, s: str, d: int) -> str:\n        for i in range(len(s)):\n            if s[i] == 'z':\n                continue\n            else:\n                s[i] = s[i] * int(d)\n        return ''.join(s)"
    },
    {
        "number": 4135,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    res = ''\n    for i in range(1, int(stdin)+1):\n        res = res + str(i) +''\n    return res.strip()\n\ndef"
    },
    {
        "number": 4135,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = list(stdin)\n    n = len(s)\n    s[n-1] = s[n-1].lower()\n    d = int(s[n-1])\n    for i in range(2, n):\n        if s[i] == 'o':\n            s[i] = s[i-2]\n    if s[-1] == 'z':\n        s.pop()\n    s.pop()\n    if d == 1:\n        return ''.join(s)\n    if d == 2:\n        return ''.join([s[i] for i in range(1, n) if not s[i].isalpha()])\n\ndef"
    },
    {
        "number": 4135,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = ''\n    for i in range(n):\n        s += stdin[i] + stdin[-1]\n    return s\n\n\n###Note: this is a dynamic programming exercise, so you must find the optimal solution using dynamic programming\n\ndef"
    },
    {
        "number": 4135,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    d, n = map(int, stdin.split())\n    n = n % (10**9 + 7)\n    t = list(map(str, stdin.split()))\n    \n    s = \"\"\n    \n    for i in range(0, n):\n        for j in range(i, n):\n            if t[i]!= t[j]:\n                break\n        if t[i]!= t[j]:\n            s = t[i] + s\n    return s"
    },
    {
        "number": 4135,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    \n    def decrypt(plain):\n        ans = []\n        for i in range(1, n + 1):\n            n_divisors = find_divisors(i)\n            divisors_dict = dict(divisors)\n            \n            # reverse all the characters of the first string,\n            # plus the last one (it doesn't matter here, as long as it's the same).\n            for d in n_divisors:\n                ans.append(plain[d - 1] + divisors_dict[d][1])\n        return ''.join(ans)\n        \n    def find_divisors(d):\n        divisors = []\n        for num in range(1, d + 1):\n            if num % 2 == 0:\n                divisors.append(num)\n            else:\n                divisors.append(num)\n        divisors.sort(reverse=True)\n        return divisors\n    \n    plain = decrypt(stdin)\n    return plain\n\nExplanation\n\nIn the above example, d = 1, so the plaintext contains only the characters \"e\", \"l\", \"m\", \"o\", \"p\", \"r\", \"s\", and \"t\".\n\nIn the above example, the whole string \"rocesfedoc\" is replaced by \"codeforces\", because the last reverse operation of \"codeforces\" leads to \"rocesfedoc\".\n\nIn the above example, the whole string \"plmaetwoxesisiht\" is replaced by \"plmaetwoxesisiht\" because the first reverse operation of \"plmaetwoxesisiht\" leads to the substring \"plmaetwoxesisiht\" (i.e. the second reverse operation only has one substring).\n\nInput\n10\nz\n\nOutput\nz\n\nInput\n16\nrocesfedoc\n\nOutput\ncodeforces\n\nInput\n1\nl\n\nOutput\nl\n\nInput\n16\nplmaetwoxesisiht\n\nOutput\nplmaetwoxesisiht\n\nInput\n1\ne\n\nOutput\ne\n\nInput\n16\nplmaetwoxesisiht\n\nOutput\nplmaetwoxesisiht\n\nInput\n1\no\n\nOutput\no\n\nInput\n16\nrocesfedoc\n\nOutput\nrocesfedoc\n\nInput\n1\np\n\nOutput\np\n\nInput\n16\nplmaetwoxesisiht\n\nOutput\nplmaetwoxesisiht\n\nInput\n1\nr\n\nOutput\nr\n\nInput\n16\nrocesfedoc\n\nOutput\nrocesfedoc\n\nInput\n1\ns\n\nOutput\ns\n\nInput\n16\nplmaetwoxesisiht\n\nOutput\nplmaetwoxesisiht\n\n\n\n------------------------\n\nGiven: a string $s$ of length $n$. \n\nFor each character $c$, replace the occurrence of it with another character $a$ (which does not repeat).\n\nFor example, the following string is decrypted: \"rocesfedoc\", you will find the replacement \"e\" in the string.\n\n\n\nIf $a$ is not in $s$ after replacing it, there is no change in the string.\n\nReturn the decrypted string.\n\n\n\nExample 1:\n\nInput: s = \"rocesfedoc\"\nOutput: \"codeforces\"\n\n\nExample 2:\n\nInput: s = \"plmaetwoxesisiht\"\nOutput: \"plmaetwoxesisiht\"\n\n\nExample 3:\n\nInput: s = \"z\"\nOutput: \"z\"\n\n\nConstraints:\n\n1 <= s.length <= 1000\ns consists of lowercase English letters.\n\n\nFollow up:\n\nHow would you solve it if you repeatedly solve the problem?\nIn this problem, a substring is a contiguous sequence of characters within a string.\n\n\n\n----------------------------\n'''\n\n\nclass Solution:\n    def decryptString(self, s: str) -> str:\n        result = ''\n        l = []\n        for i in range(0, len(s)):\n            if s[i] == 'a':\n                l.append(i)\n            if s[i] == 'b':\n                l.append(i)\n            if s[i] == 'c':\n                l.append(i)\n            if s[i] == 'd':\n                l.append(i)\n            if s[i] == 'e':\n                l.append(i)\n            if s[i] == 'f':\n                l.append(i)\n            if s[i] == 'g':\n                l.append(i)\n            if s[i] == 'h':\n                l.append(i)\n            if s[i] == 'i':\n                l.append(i)\n            if s[i] == 'j':\n                l.append(i)\n            if s[i] == 'k':\n                l.append(i)\n            if s[i] == 'l':\n                l.append(i)\n            if s[i] =='m':\n                l.append(i)\n            if s[i] == 'n':\n                l.append(i)\n            if s[i] == 'o':\n                l.append(i)\n            if s[i] == 'p':\n                l.append(i)\n            if s[i] == 'q':\n                l.append(i)\n            if s[i] == 'r':\n                l.append(i)\n            if s[i] =='s':\n                l.append(i)\n            if s[i] == 't':\n                l.append(i)\n            if s[i] == 'u':\n                l.append(i)\n            if s[i] == 'v':\n                l.append(i)\n            if s[i] == 'w':\n                l.append(i)\n            if s[i] == 'x':\n                l.append(i)\n            if s[i] == 'y':\n                l.append(i)\n            if s[i] == 'z':\n                l.append(i)\n            if s[i] == '-' or s[i] == '_':\n                continue\n            else:\n                result += s[i]\n        return result\n"
    },
    {
        "number": 4135,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    s = stdin.split()\n    print(solution(n, t, s))\n\n-----Constraints-----\n0 < n, t, s < 100\n\nSolution\n\nYou don't need to print anything. Your code already prints the string $s$.\n\ninput\n10\nrocesfedoc\n\noutput\ncodeforces\n\ninput\n16\nplmaetwoxesisiht\n\noutput\nthisisexampletwo\n\ninput\n1\nz\n\noutput\nz\n"
    },
    {
        "number": 4135,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin, stdin\n    n = len(t)\n    d = n - 1\n    for i in range(len(s)):\n        s[i] = str(ord(s[i]) - ord(t[i]))\n    for i in range(d, 0, -1):\n        s[i] = s[i][::-1]\n    return ''.join(s)\n"
    },
    {
        "number": 4135,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    length = len(stdin)\n    encrypted = stdin.split(\"\\n\")\n    encrypted = [i.split() for i in encrypted]\n    d = 0\n    s = \"\"\n    for i in encrypted:\n        while d<=len(i)-2:\n            t = str(i[d])+str(i[d+1])+str(i[d+2])+str(i[d+3])+str(i[d+4])\n            if not t in s:\n                s += t\n                d+=4\n            else:\n                d+=1\n    return s\n\ndef"
    },
    {
        "number": 4135,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[::-1]\n    d = [1]\n    for i in range(2,n+1):\n        m = max(d)\n        if s[i-1]=='a':\n            for j in range(1,m+1):\n                if s[i-j]=='b':\n                    d.append(j)\n        elif s[i-1]=='b':\n            for j in range(1,m+1):\n                if s[i-j]=='a':\n                    d.append(j)\n    return ''.join(d)\n"
    },
    {
        "number": 4136,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip().split()[0])\n    m = int(stdin.strip().split()[1])\n    a = b = 0\n    for i in range(n):\n        a, b = b, a+b\n    return str(a)\n"
    },
    {
        "number": 4136,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a, b = map(int, stdin.split())\n    solution_sum = 0\n    for i in range(n):\n        solution_sum += a ** i\n    if k == solution_sum:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 4136,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    answer = 0\n    for i in range(a, b+1):\n        answer += i\n    return str(answer)\n"
    },
    {
        "number": 4136,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a,b = map(int, stdin.split())\n    a = a-1\n    b = b-1\n    def solve(a,b):\n        if a<=0 or b<=0 or a>=b:\n            return 0\n        if a+b<=10**3:\n            return a+b\n        m = 1\n        while m<=a:\n            m = m*(m+1)//2\n        while m<=b:\n            m = m*(m+1)//2\n        return m*(m+1)\n    print(solve(a,b))\n"
    },
    {
        "number": 4136,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    a = str(a)\n    b = str(b)\n    return int(a) + int(b)\n\n-----Constraints-----\n1 <= a, b <= 10^3\n\n-----Time complexity-----\nO(m*n)\n\nO(n*m)\n\n-----Space complexity-----\nO(n)\n\n-----Algorithm details-----\nFor some input a and b, we have following possible scenarios:\n\n1. If a is the sum of an element from 1 to 10^3, then the solution must be the sum of an element from 1 to 10^3, then the solution is the sum of elements from 1 to 10^2.\n2. If a is the sum of an element from 1 to 10000, then the solution must be the sum of elements from 1 to 10000, then the solution is the sum of elements from 1 to 10^2.\n3. If a is the sum of all of the elements from 1 to 10^5, then the solution must be the sum of all of the elements from 1 to 10^5, then the solution is the sum of all elements from 1 to 10^5.\n4. If a is the sum of all of the elements from 1 to 100, then the solution must be the sum of all of the elements from 1 to 100, then the solution is the sum of all elements from 1 to 100.\n5. If a is the sum of all of the elements from 1 to 1000, then the solution must be the sum of all of the elements from 1 to 1000, then the solution is the sum of all elements from 1 to 1000.\n6. If a is the sum of all of the elements from 1 to 100000, then the solution must be the sum of all of the elements from 1 to 100000, then the solution is the sum of all elements from 1 to 100000.\n6. If a is the sum of all of the elements from 1 to 100000000, then the solution must be the sum of all of the elements from 1 to 100000000, then the solution is the sum of all elements from 1 to 100000000.\n\nO(m + n)\n\nO(m + n)\n\nO(m + n)\n\nO(m + n)\n\nO(n)\n\nALGORITHM NOT IN USE\n"
    },
    {
        "number": 4136,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip().split()[0])\n    s = int(stdin.strip().split()[1])\n    m = n+s\n    return str(m)\n\n\n-----Constraints-----\n0 <= a <= 10^3\n0 <= b <= 10^3\n\n----Examples----\nInput\n5 14\n\nOutput\n19\n\nInput\n381 492\n\nOutput\n873\n---\n\ndef"
    },
    {
        "number": 4136,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(i) for i in stdin.split()]\n    return str(sum(map(int, [a, b])))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4136,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    return f\"{x} {y}\"\n\"\"\"\nclass Solution:\n    def __init__(self):\n        self.answer = 0\n        self.input = list(map(int, input().split()))\n        self.n = len(self.input)\n        self.dp = [1]*self.n\n        self.dp[1] = 2\n        self.dp[2] = 2\n        for i in range(3, self.n+1):\n            self.dp[i] = (self.dp[i-1] + 2*self.dp[i-3] ) % 796796\n            \n    def add(self, a: int, b: int) -> None:\n        if a == b:\n            return\n        if a < b:\n            self.dp[a] = max(self.dp[a], self.dp[b])\n        else:\n            self.dp[b] = max(self.dp[b], self.dp[a])\n        \n    def add1(self, a: int, b: int) -> None:\n        if a == b:\n            self.answer += a\n            return\n        if a < b:\n            self.add1(b, a)\n        else:\n            self.add1(a, b)\n        \n    def add2(self, a: int, b: int) -> None:\n        if a == b:\n            self.answer += a\n            return\n        if a < b:\n            self.add2(b, a)\n        else:\n            self.add2(a, b)\n            \n    def add3(self, a: int, b: int) -> None:\n        if a == b:\n            self.answer += a\n            return\n        if a < b:\n            self.add3(b, a)\n        else:\n            self.add3(a, b)\n            \n    def solution(self) -> str:\n        for i in range(1, self.n+1):\n            self.add(i, i)\n            self.add1(i, i)\n            self.add2(i, i)\n            self.add3(i, i)\n            \n        return str(self.answer)"
    },
    {
        "number": 4136,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\ndef"
    },
    {
        "number": 4136,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    sum = a + b\n    return str(sum)\n\"\"\""
    },
    {
        "number": 4137,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    import numpy as np\n    from typing import List\n    from brainfuck.interpret import interpret_code\n\n    stdin = interpret_code(stdin)\n    exec(stdin)\n    return stdin\n'''\n"
    },
    {
        "number": 4137,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(solution)  # doctest: +ELLIPSIS\n
    },
    {
        "number": 4137,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = 0\n    res = 0\n    for char in stdin:\n        if char.isdigit():\n            n = int(char)\n        else:\n            res += n\n            n = 0\n    return str(res)\n\ndef"
    },
    {
        "number": 4137,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    expression = stdin.split()\n    \n    return ''.join(map(lambda x: chr(int(x)) + \">\", expression))\n\n\"\"\"\n\n\n\n\ndef"
    },
    {
        "number": 4137,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(i, p, op):\n        if op == \"+\": return p[i]!= p[i + 1] and p[i + 1]!= 0\n        return p[i]!= p[i + 1] and p[i + 1]!= 0 and p[i + 2]!= 0\n\n    def expand_mem(i, op, p):\n        return \"\".join((\n            \"+>\" if op == \"+\" else \"+\" if p[i + 2]!= 0 else \"\",\n            \"<\" if op == \"<\" else \">\" if p[i + 2]!= 0 else \"\",\n            \"<\" if op == \"<\" else \">\" if p[i + 1]!= 0 else \"\",\n        ))\n\n    mem = {}\n\n    def bf_op(i, op):\n        if op == \"+\":\n            return str(int(p[i]) + int(p[i + 1]))\n        elif op == \"-\":\n            return str(int(p[i]) - int(p[i + 1]))\n        elif op == \"*\":\n            return str(int(p[i]) * int(p[i + 1]))\n        else:\n            return \"\"\n\n    for i in range(1, 10):\n        mem[i] = int(stdin[i])\n\n    while True:\n        line = stdin.readline()\n        if line == \"\":\n            break\n        op = line[-1]\n        if op == \"\":\n            continue\n        else:\n            op = int(op)\n            line = line[:-1]\n\n        if op not in {+1, -1}:\n            raise ValueError(f\"Unknown operator {op}\")\n\n        if op == +1:\n            line = line.replace(\">\", \" +\")\n            for i in range(1, 5):\n                if line[i] == \"+\":\n                    line = line[:i] + \">\" + line[i + 1:]\n                    break\n                elif line[i] == \">\":\n                    line = line[:i] + \"> \" + line[i + 1:]\n                    break\n                else:\n                    raise ValueError(f\"Unexpected symbol {line[i]}\")\n\n        if op == -1:\n            line = line.replace(\"<\", \" <\")\n            for i in range(1, 5):\n                if line[i] == \">\":\n                    line = line[:i] + \">\" + line[i + 1:]\n                    break\n                elif line[i] == \"<\":\n                    line = line[:i] + \"> \" + line[i + 1:]\n                    break\n                else:\n                    raise ValueError(f\"Unexpected symbol {line[i]}\")\n\n        if op == \"+\":\n            line = line.replace(\"+>\", \"\")\n            line = line.replace(\"<\", \" >\")\n            line = line.replace(\"<->\", \"->\")\n            line = line.replace(\"<->>\", \">->\")\n\n            for i in range(1, 6):\n                if line[i] == \"+\":\n                    line = line[:i] + \">\" + line[i + 1:]\n                    break\n                else:\n                    raise ValueError(f\"Unexpected symbol {line[i]}\")\n            for i in range(1, 5):\n                if line[i] == \">\":\n                    line = line[:i] + \">\" + line[i + 1:]\n                    break\n                else:\n                    raise ValueError(f\"Unexpected symbol {line[i]}\")\n\n        if op == \"-\":\n            line = line.replace(\"<->\", \"->\")\n            line = line.replace(\"<->>\", \">->\")\n            line = line.replace(\"<-><\", \"-><\")\n            line = line.replace(\"<-><->\", \"-><->\")\n\n            for i in range(1, 6):\n                if line[i] == \"+\":\n                    line = line[:i] + \">\" + line[i + 1:]\n                    break\n                else:\n                    raise ValueError(f\"Unexpected symbol {line[i]}\")\n            for i in range(1, 5):\n                if line[i] == \">\":\n                    line = line[:i] + \"> \" + line[i + 1:]\n                    break\n                else:\n                    raise ValueError(f\"Unexpected symbol {line[i]}\")\n\n        if op == \"*\":\n            line = line.replace(\"<->\", \"->\")\n            line = line.replace(\"<->>\", \">->\")\n            line = line.replace(\"<-><\", \"-><\")\n            line = line.replace(\"<-><->\", \"-><->\")\n\n            for i in range(1, 6):\n                if line[i] == \"+\":\n                    line = line[:i] + \">\" + line[i + 1:]\n                    break\n                else:\n                    raise ValueError(f\"Unexpected symbol {line[i]}\")\n            for i in range(1, 5):\n                if line[i] == \">\":\n                    line = line[:i] + \"> \" + line[i + 1:]\n                    break\n                else:\n                    raise ValueError(f\"Unexpected symbol {line[i]}\")\n\n        if op == \">\":\n            line = line.replace(\"<->>\", \"->\")\n            line = line.replace(\"<-><\", \"-><\")\n            line = line.replace(\"<-><->\", \"-><->\")\n\n            for i in range(1, 6):\n                if line[i] == \"+\":\n                    line = line[:i] + \">\" + line[i + 1:]\n                    break\n                else:\n                    raise ValueError(f\"Unexpected symbol {line[i]}\")\n            for i in range(1, 5):\n                if line[i] == \">\":\n                    line = line[:i] + \"> \" + line[i + 1:]\n                    break\n                else:\n                    raise ValueError(f\"Unexpected symbol {line[i]}\")\n\n        if op == \">->\":\n            line = line.replace(\"<->>\", \"->\")\n            line = line.replace(\"<-><\", \"-><\")\n            line = line.replace(\"<-><->\", \"-><->\")\n\n            for i in range(1, 6):\n                if line[i] == \"+\":\n                    line = line[:i] + \">\" + line[i + 1:]\n                    break\n                else:\n                    raise ValueError(f\"Unexpected symbol {line[i]}\")\n            for i in range(1, 5):\n                if line[i] == \">\":\n                    line = line[:i] + \"> \" + line[i + 1:]\n                    break\n                else:\n                    raise ValueError(f\"Unexpected symbol {line[i]}\")\n\n        if op == \">-><\":\n            line = line.replace(\"<-><\", \"-><\")\n            line = line.replace(\"<-><->\", \""
    },
    {
        "number": 4137,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    memory = deque(int(x) for x in stdin)\n    while memory:\n        inst = memory.popleft()\n        if inst == 0:\n            return ''.join(str(x) for x in memory)\n        elif inst == 1:\n            memory.appendleft(memory.pop()+memory.pop())\n        elif inst == 2:\n            memory.appendleft(memory.pop()-memory.pop())\n        elif inst == 3:\n            memory.appendleft(memory.popleft()*memory.pop())\n        elif inst == 4:\n            memory.appendleft(memory.popleft()//memory.pop())\n        elif inst == 5:\n            memory.appendleft(memory.popleft()%memory.pop())\n        elif inst == 6:\n            memory.appendleft(memory.pop()/memory.pop())\n        elif inst == 7:\n            memory.appendleft(memory.popleft()**memory.pop())\n        elif inst == 8:\n            memory.appendleft(memory.popleft()//memory.pop())\n        elif inst == 9:\n            memory.appendleft(memory.pop()*memory.pop())\n        elif inst == '>':\n            memory.appendleft(memory.pop()+memory.pop())\n        elif inst == '+':\n            memory.appendleft(memory.popleft()+memory.popleft())\n        elif inst == '-':\n            memory.appendleft(memory.popleft()-memory.popleft())\n        elif inst == '*':\n            memory.appendleft(memory.popleft()*memory.popleft())\n        elif inst == '/':\n            memory.appendleft(memory.popleft()//memory.popleft())\n        elif inst == '^':\n            memory.appendleft(memory.popleft()**memory.popleft())\n        elif inst == '%':\n            memory.appendleft(memory.popleft()%memory.popleft())\n        else:\n            raise Exception(f\"Invalid character: {inst}\")\n    raise Exception(\"Operation is not supported\")\n\n\nfor _ in range(int(input())):\n    print(solution(input()))\n"
    },
    {
        "number": 4137,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return solution_input(stdin)\n\ndef"
    },
    {
        "number": 4137,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\ndef"
    },
    {
        "number": 4137,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stack = []\n    for i,line in enumerate(stdin.splitlines()):\n        if i < 2:\n            continue\n        # stack.append(int(line))\n        # print(stack)\n        try:\n            # print(f'{stack[-1]} {stack[-2]} {stack[-3]}')\n            exec(f'{line}')\n        except Exception as e:\n            print(e)\n            stack.pop()\n            print(f'pop stack {stack}')\n            \n        \n    if len(stack) > 1:\n        print(f'[{stack[-1]} {stack[-2]} {stack[-3]}]')\n    \n    return str(stack[0])\n\ndef"
    },
    {
        "number": 4137,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    data = stdin.split(\"+\")\n\n    # get length\n    length = int(data[0])\n\n    # convert data to array\n    data = [int(d) for d in data[1].split(\" \")]\n\n    # iterate through data\n    for i in range(0, length, 4):\n        # get the correct data point\n        value = data[i]\n\n        # get the right index\n        index = i + 2\n\n        # add the correct data point\n        data[index] = value + data[index]\n\n    # convert back to string\n    data = \"\".join([str(d) for d in data])\n\n    # return result\n    return data\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4138,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    l = list(map(int, stdin.split()))\n\n    return str(sorted(l, reverse=True)[k-1])\n\n### This is the classic solution\ndef"
    },
    {
        "number": 4138,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    for q in range(int(stdin.strip())):\n        a, b, k_i, t = map(int, stdin.split())\n        print(k_i, t)\n        if a!= 0:\n            print(a % 10**k_i, end=\"\")\n        else:\n            print(0, end=\"\")\n\n        \n"
    },
    {
        "number": 4138,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    q, k = map(int, stdin.split())\n    \n    answer = 0\n    for i in range(q):\n        print(k, end=' ')\n        print(answer)\n        answer = k\n        k = k * 10 + int(stdin.split()[0])\n    print(k)\n    return str(answer)\n\"\"\"\n\ndef"
    },
    {
        "number": 4138,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n    return str(sum(map(int, [str(i) for i in range(1, int(stdin.split()[0]) + 1)])))\n\n\n\n-----Solution-----\ndef"
    },
    {
        "number": 4138,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.strip())\n    max_val = 2 ** q\n    max_val_2 = 2 ** q - 1\n    max_val_3 = 2 ** q - 3\n    max_val_4 = 2 ** q - 2\n    max_val_5 = 2 ** q - 4\n    for _ in range(q):\n        k = int(stdin.strip())\n        print(k)\n\n-----Input-----\n\nInput\n\n4\n2132\n506\n999999999999999999\n1000000000000000000\n\nOutput\n\n8\n2\n4\n1\n\n-----Explanation-----\n\nIn the first query, we are calculating $3$-rd digit, the $20$-th element.\nIn the second query, we are calculating $5$-rd digit, the $38$-th element.\nIn the third query, we are calculating $1$-st digit, the $56$-th element.\nIn the fourth query, we are calculating $0$-st digit, the $56$-th element.\n\n\n-----Output-----\n\nOutput\n\n8\n2\n2\n2\n3\n\n\"\"\"\n\nclass Solution:\n    def findNumbers(self, nums: List[int]) -> List[int]:\n        res=[]\n        for i in nums:\n            if i%2==0:\n                res.append(i//2)\n            else:\n                res.append((i//2)**2)\n        return res\n        \n"
    },
    {
        "number": 4138,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nDo not use `solution()` for your own testing.\nUse `solution()` in the following submission.\n    def solution(stdin):\n        n,k = map(int,stdin.split())\n        nums = list(map(int,stdin.split()))\n        dic = {}\n        dic[0] = 0\n        for i in range(n):\n            dic[i+1] = nums[i] * (10**k-1)\n        for i in range(1,n):\n            dic[i] += nums[i] * (10**k-1)\n        return str(dic[k])\n\nTest code\nprint(solution(input()))\n\"\"\""
    },
    {
        "number": 4138,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.strip())\n    for _ in range(q):\n        k_i = int(stdin.strip().split()[0])\n        k_i = bin(k_i)[2:]\n        print(int(k_i, 2))\n        print(\" \".join(map(str, str(k_i))))\n\n------->>> Run Time: 0.123s\n\n\n------>>> Runtime: 18.57ms\n\n------->>> Memory Usage: 0.01MB\n\n'''"
    },
    {
        "number": 4138,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    lst = []\n    n = stdin[0]\n    for i in stdin[1:]:\n        if '1' <= i <= '9':\n            lst.append(i)\n        \n        else:\n            if n > 0:\n                lst.append(n)\n                n = int(stdin[i])\n            else:\n                lst.append(int(stdin[i]))\n            \n    lst.append(n)\n    \n    \n    return ''.join(lst)\n\nOutput\n9\n0\n4\n2\n3\n\"\"\"\ndef"
    },
    {
        "number": 4138,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    for line in stdin:\n        x = int(line.split()[0])\n        k = int(line.split()[1])\n        if x < 0:\n            break\n        ans = x%k\n        print(ans)\n        \n    return str(ans)\n-----Constraints-----\n\n1 <= q <= 10^5\n2 <= k <= 10^18\n1 <= k_i <= 10^18\n\n-----Time complexity-----\n\nO(N^k)\nO(N)\n\nO(N)\n\n------Algorithm-----\n\nq=int(input())\nfor _ in range(q):\n    k,x = map(int, input().split())\n    print(x%k)\n"
    },
    {
        "number": 4138,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    for std in stdin:\n        x, k = list(std.split())\n        k_int = int(k)\n        x = list(x)\n        ans = 0\n        for idx, x_i in enumerate(x):\n            ans += (x_i * k_int ** idx)\n        print(ans)\n        \n        \nsolution(stdin)\n"
    },
    {
        "number": 4139,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n  \n  # Sample input\n  # 4\n  \n  # Sample output\n  # 4\n\ndef"
    },
    {
        "number": 4139,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, d, s = map(int, stdin.split())\n    def is_valid_num(num):\n        for i in range(1, 10):\n            if num % d == 0:\n                return False\n        if num == 0:\n            return True\n        if s > num:\n            return False\n        return True\n    def num_in_range(num):\n        return is_valid_num(num) and all(num // i <= s for i in range(1, 10))\n    print(len([i for i in range(N) if num_in_range(i)]) if num_in_range(N) else \"Invalid Input\")"
    },
    {
        "number": 4139,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # \ubc30\uc5f4\uc758 \uac1c\uc218\ub97c \uc801\uc73c\ub85c \uc138\uc5b4\uc8fc\uace0\n    # \ubc30\uc5f4\uc5d0\ub294 7\uac1c\uc758 \ud654\ud3d0\ub97c \ucc28\ub840\ub85c \uc624\ub984\ucc28\uc21c \uc815\ub82c\n    arr = [0, 1, 2, 3, 4, 5, 6, 7]\n    # \uc804\uccb4 \ud654\ud3d0 \uac1c\uc218\n    n = int(stdin.split(' ')[-1])\n    # \uc9d1\uc911\ud558\ub294 \ud654\ud3d0 \uac1c\uc218\n    s = 0\n    # \ud654\ud3d0 \uac1c\uc218\uc758 \ud569\n    sum = 0\n    # \uc9d1\uc911\ud558\ub294 \ud654\ud3d0 \uac1c\uc218\n    even = 0\n    # \uc9d1\uc911\ud558\ub294 \ud654\ud3d0 \uac1c\uc218\n    odd = 0\n\n    # \uc9d1\uc911\ud558\ub294 \ud654\ud3d0 \uac1c\uc218\n    # \ub9e8 \uc55e\uc5d0 0\uc740 \uc9d1\uc911\ud558\ub294 \ud654\ud3d0 \uac1c\uc218\uc5d0 \ub530\ub77c \uc9d1\uc911\ud558\ub294 \ud654\ud3d0\uc744 \uac00\uc9c0\ub294 \uacbd\uc6b0\n    for i in range(n):\n        # \ud654\ud3d0 \uac1c\uc218\uac00 0\uc774\uba74 \ub9e8 \uc55e\uc5d0 \uc9d1\uc911\ud558\ub294 \ud654\ud3d0 \uac1c\uc218\uc5d0 \ub530\ub77c \uc9d1\uc911\ud558\ub294 \ud654\ud3d0\uc744 \uac00\uc9c0\ub294 \uacbd\uc6b0\n        if arr[i] == 0:\n            # \uc9d1\uc911\ud558\ub294 \ud654\ud3d0 \uac1c\uc218\ub97c \uc9d1\uc911\ud558\ub294 \ud654\ud3d0 \uac1c\uc218\ub97c \uc138\uc728 \uc904\uc774\uae30\n            # \uac01 \uc9d1\uc911\ud558\ub294 \ud654\ud3d0\uc744 \uc120\ud0dd \ud6c4 \uc120\ud0dd\ub41c \uacbd\uc6b0\uc758 \uc218\ub97c \ud569\uc0b0\n            sum += sum(arr[:i] + arr[i + 1:])\n            # \ub9e8 \uc55e\uc5d0 \uc9d1\uc911\ud558\ub294 \ud654\ud3d0 \uac1c\uc218\uc758 \uacbd\uc6b0\ub97c \uc81c\uc678\ud55c \ub098\uba38\uc9c0 \ubb38\uc790\uc5f4\uc758 \uae38\uc774\ub97c \uae30\uc900\uc73c\ub85c \uc120\ud0dd\n            sum += len(arr[:i] + arr[i + 1:])\n            # \ubc30\uc5f4\uc758 \uc120\ud0dd\ub41c \uacbd\uc6b0\uc758 \uc218\ub97c \ubc30\uc5f4\uc5d0 \uc800\uc7a5\n            # \uac01 \uc9d1\uc911\ud558\ub294 \ud654\ud3d0\uc744 \uc120\ud0dd \ud6c4 \uc120\ud0dd\ub41c \uacbd\uc6b0\uc758 \uc218\ub97c \uae30\uc900\uc73c\ub85c \uc120\ud0dd\n            s += sum // 2\n            # \ud654\ud3d0\uc758 \uac1c\uc218\ub97c \ubc30\uc5f4\uc5d0 \uc800\uc7a5\n            s += sum % 2\n            # \uc9d1\uc911\ud558\ub294 \ud654\ud3d0 \uac1c\uc218\uc758 \ud569\ubcf4\ub2e4 \ud654\ud3d0\uc758 \uac1c\uc218\ub97c \ub9ce\uc774 \uc120\ud0dd\ud560 \uc218 \uc788\uae30\ub54c\ubb38\uc5d0 \uac01 \uc9d1\uc911\ud558\ub294 \ud654\ud3d0 \uac1c\uc218\ub294 \uadf8 \uc774\uc804\uc5d0 \ub098\uba38\uc9c0 \uac1c\uc218\uac00 \uc9d1\uc911\ud558\ub294 \uacbd\uc6b0\uc758 \uc218\ub97c \uc120\ud0dd\n            s += sum // 3\n            # \ubc30\uc5f4\uc758 \uc120\ud0dd\ub41c \uacbd\uc6b0\uc758 \uc218\ub97c \uae30\uc900\uc73c\ub85c \uc120\ud0dd\n            s += sum % 3\n            # \uc9d1\uc911\ud558\ub294 \ud654\ud3d0\uc758 \uc9d1\uc911\ud558\ub294 \uac1c\uc218\ub97c \uae30\uc900\uc73c\ub85c \uc120\ud0dd\n            s += (sum // 4)\n            # \uae30\uc900\uc73c\ub85c \uc120\ud0dd\ud55c \uacbd\uc6b0\uc758 \uc218\ub97c \uae30\uc900\uc73c\ub85c \uc120\ud0dd\n            s += sum % 4\n        else:\n            # \uac00\uc9c0\ub294 \ud654\ud3d0\uc744 \uc120\ud0dd \ud6c4 \uc120\ud0dd\ub41c \uacbd\uc6b0\uc758 \uc218\ub97c \uae30\uc900\uc73c\ub85c \uc120\ud0dd\n            # \uac01 \uc9d1\uc911\ud558\ub294 \ud654\ud3d0 \uac1c\uc218\ub97c \ud569\uc0b0\n            # \ubc30\uc5f4\uc758 \uc120\ud0dd\ub41c \uacbd\uc6b0\uc758 \uc218\ub97c \uae30\uc900\uc73c\ub85c \uc120\ud0dd\n            s += sum // arr[i]\n            # \uc9d1\uc911\ud558\ub294 \ud654\ud3d0 \uac1c\uc218\uc758 \ud569\uc744 \uae30\uc900\uc73c\ub85c \uc120\ud0dd\n            s += sum % arr[i]\n            # \ubc30\uc5f4\uc758 \uc120\ud0dd\ub41c \uacbd\uc6b0\uc758 \uc218\ub97c \uae30\uc900\uc73c\ub85c \uc120\ud0dd\n            s += (sum // arr[i])\n            # \uae30\uc900\uc73c\ub85c \uc120\ud0dd\ud55c \uacbd\uc6b0\uc758 \uc218\ub97c \uae30\uc900\uc73c\ub85c \uc120\ud0dd\n            s += (sum % arr[i])\n            # \uae30\uc900\uc73c\ub85c \uc120\ud0dd\ud55c \uacbd\uc6b0\uc758 \uc218\ub97c \uae30\uc900\uc73c\ub85c \uc120\ud0dd\n            s += (sum // (arr[i"
    },
    {
        "number": 4139,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    k = 10**9 + 1\n    dp = [0] * k\n    answer = \"\"\n    for i in range(k):\n        for j in range(10):\n            dp[i] += 1\n            if j == 7 or j == 5 or j == 3:\n                answer += str(dp[i])\n    return answer\n"
    },
    {
        "number": 4139,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    i = 1\n    while i <= int(stdin):\n        j = 0\n        while j <= N:\n            if i == j:\n                break\n            if int(stdin[j:j+3]) >= 7 and int(stdin[j:j+3]) <= 9:\n                j += 3\n            else:\n                break\n        if j <= N:\n            print(i)\n        else:\n            i += 1\n"
    },
    {
        "number": 4139,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    numbers = [str(x) for x in range(1, N + 1)]\n    result = 0\n    if int(stdin.strip()) > N:\n        return \"1\"\n    for x in numbers:\n        result = result + int(x)\n    return str(result)\n"
    },
    {
        "number": 4139,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(set(map(int, str(stdin)))))\n"
    },
    {
        "number": 4139,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n  output = []\n  for _ in range(int(stdin)):\n    n = int(stdin)\n    res = [7, 5, 3]\n    if n in res:\n      print(n)\n      continue\n    else:\n      res = [7, 5, 3, 9]\n      if n in res:\n        print(n)\n        continue\n      else:\n        res = [7, 5, 3, 9, 3, 5, 7, 9]\n        if n in res:\n          print(n)\n          continue\n        else:\n          res = [7, 5, 3, 9, 3, 5, 7, 9, 9]\n          if n in res:\n            print(n)\n            continue\n          else:\n            print(n)\n            continue\n      print(n)\n  return ''\n\n\"\"\""
    },
    {
        "number": 4139,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, answer = map(int, stdin.split())\n    if N == 1:\n        return str(1)\n    if N == 2:\n        return str(1) + ',' + str(2)\n    for i in range(3, N + 1):\n        if i % 3 == 0:\n            answer += ',' + str(i)\n        if i % 5 == 0:\n            answer += ',' + str(i)\n    return answer\n\"\"\"\n\ndef"
    },
    {
        "number": 4139,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    for _ in range(int(stdin)):\n        s = 0\n        for i in range(10):\n            if i not in [7, 5, 3]:\n                s += int(stdin[i])\n        if s % 10!= 7:\n            return str(s % 10)\n    return str(s)\n"
    },
    {
        "number": 4140,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    \n    S = list(map(int, stdin.split()))\n    #print(S)\n\n    #print(S[0],S[1])\n    #print(S[0],S[1],S[2],S[3],S[4])\n\n    #print(S[0],S[1],S[2],S[3],S[4],S[5],S[6],S[7],S[8],S[9])\n\n    count = 1\n    l = []\n\n    for i in range(1,n+1):\n        if S[i] == 0:\n            l.append(count)\n        elif S[i] == 1:\n            l.append(1)\n        else:\n            l.append(0)\n\n    #print(l)\n    ans = max(l)\n    print(ans)\n"
    },
    {
        "number": 4140,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = list(map(lambda s: s[1:], stdin.split()))\n    sum_white = sum(s)\n    if sum_white % 2 == 0:\n        return '1'\n    elif sum_white % 2 == 1:\n        return '0'\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 4140,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    ans = 0\n    for i in range(1, 10**5):\n        if stdin[i] == '0':\n            continue\n        elif stdin[i] == '1':\n            ans += 1\n        else:\n            continue\n    return str(ans)\n'''\n\ndef"
    },
    {
        "number": 4140,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def paint(S: str, i: int, col: int):\n        if i + col >= len(S):\n            return 0\n        if S[i + col] == 0:\n            return paint(S, i + 1, col + 1)\n        return paint(S, i + 1, col)\n\n    def dfs(S: str, i: int, col: int, count: int):\n        if i == len(S) or col == len(S[i]):\n            return count\n        if S[i][col] == 0:\n            return dfs(S, i, col + 1, count + 1)\n        return dfs(S, i + 1, col, count)\n\n    N = int(stdin.strip())\n    S = stdin.strip().replace('\\n', '')\n    ans = 0\n    for i in range(N):\n        ans = max(dfs(S, i, 0, 0), ans)\n    return ans + 1\n\n\"\"\"\n\n\nclass Solution:\n    def paint_area(self, height: List[int]) -> int:\n        a = 0\n        b = 0\n        for i in range(len(height)):\n            for j in range(i + 1, len(height)):\n                if height[i] > height[j]:\n                    a += 1\n                else:\n                    b += 1\n        return max(a, b)\n\n    def paint_area2(self, height: List[int]) -> int:\n        max_height = 0\n        min_height = 1e6\n        for i in range(len(height)):\n            min_height = min(min_height, height[i])\n            max_height = max(max_height, height[i] - min_height)\n        return max_height\n\n\nclass Solution:\n    def paint_area(self, height: List[int]) -> int:\n        a = 0\n        b = 0\n        for i in range(len(height)):\n            for j in range(i + 1, len(height)):\n                if height[i] > height[j]:\n                    a += 1\n                else:\n                    b += 1\n        return max(a, b)\n\n    def paint_area2(self, height: List[int]) -> int:\n        a = max(height)\n        b = max(max(height) - min(height), 0)\n        return a + b\n"
    },
    {
        "number": 4140,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(1,10):\n        for j in range(i+1):\n            if stdin[i] == '0' and stdin[i-j] == '1':\n                stdin[i] = '0'\n                stdin[i-j] = '1'\n                print(*stdin)\n            elif stdin[i] == '1' and stdin[i-j] == '0':\n                stdin[i] = '1'\n                stdin[i-j] = '0'\n                print(*stdin)\n\n-----Sample Input-----\n000\n\n-----Sample Output-----\n2\n\nThe condition can be satisfied by repainting the middle tile black.\ndef"
    },
    {
        "number": 4140,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return\n\n\n\"\"\"\ndef"
    },
    {
        "number": 4140,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    S = []\n    for line in stdin:\n        S.append(line)\n    L, R = len(S), len(S)\n    count = 0\n    i = 0\n    j = 0\n    while i < L:\n        while j < R and j < i:\n            if S[i] == 0:\n                S[i] = 1\n                count += 1\n                j += 1\n            elif S[j] == 1:\n                S[j] = 0\n                count += 1\n            j += 1\n        i += 1\n        j = 0\n    return count\n\n-----Sample Output-----\n1\n\nThere are a total of 23 tiles.\n\nExplanation\n\nThe first row and column are painted white, the second row and column are painted black.\nThe second row has a number of tiles, the third row has a number of tiles, the fourth row has a number of tiles.\nThe number of white tiles are 2, and the number of black tiles are 3.\nThe condition is satisfied by repainting the first 2 rows.\nThe condition is satisfied by repainting the third row, the fourth row, the fifth row.\nThere are only a total of 22 tiles in the matrix.\n\n-----Sample Input-----\n000\n\n-----Sample Output-----\n23\n\nThe condition can be satisfied by repainting the whole matrix.\n\"\"\"\n\ndef"
    },
    {
        "number": 4140,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    # n = len(stdin)\n    S = [str(i) for i in range(2**n)]\n    # print(S)\n    # print(n)\n    S.sort()\n    # print(S)\n    # print(n)\n    cnt = 0\n    for i in range(1 << n):\n        # print(i)\n        # print(S[i])\n        for j in range(n):\n            # print(j)\n            # print(i & (1 << j))\n            # print(S[i & (1 << j)])\n            if (i & (1 << j)) == 0:\n                # print(S[i & (1 << j)])\n                cnt += 1\n            elif (S[i & (1 << j)] == '0') & (S[(i >> j) & (1 << j)] == '1'):\n                # print('1')\n                cnt += 1\n            elif (S[i & (1 << j)] == '1') & (S[(i >> j) & (1 << j)] == '0'):\n                # print('0')\n                cnt += 1\n    return str(cnt)\n\nprint(solution(\"000\"))"
    },
    {
        "number": 4140,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n  def solution(N, S):\n    count = 0\n    if len(S) < N:\n      return 0\n    else:\n      for i in range(N):\n        if S[i] == '0':\n          if S[i + 1] == '0':\n            count += 1\n        if S[i] == '1':\n          if S[i + 1] == '1':\n            count += 1\n          \n        if count >= 3:\n          return i + 1\n  \n  return min(map(solution, range(N), range(N)))\n\nExplanation\n\nInput:\n5\n1 1 1 1 1 1\n\nOutput:\n1\n\nExplanation:\nS has only one \"0\" and only one \"1\".\nSo the answer is the index of the white tile (1).\n\nInput:\n5\n1 0 1 1 0 1\n\nOutput:\n2\n\nExplanation:\nS has \"0\", \"1\", \"0\", \"1\", \"0\", \"1\", \"0\", \"1\", \"0\".\nSo the answer is 2.\n\nInput:\n5\n1 1 1 1 1 1\n\nOutput:\n0\n\nExplanation:\nS has \"0\", \"0\", \"1\", \"0\", \"1\", \"0\", \"0\", \"0\", \"0\".\nSo the answer is 0.\n\n-------------------------------\n'''\ndef"
    },
    {
        "number": 4140,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    # find the first index of 0\n    first_index = stdin.find(\"0\")\n\n    # index where the 0 goes\n    zero_index = first_index + 1\n    \n    # find the length of the string\n    length = len(stdin)\n\n    # to get the total number of tiles\n    total_number_of_tiles = length - zero_index\n    \n    # to get the total number of tiles\n    total_number_of_tiles = total_number_of_tiles // 3\n    \n    # return the minimum number of tiles\n    return total_number_of_tiles\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4141,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    n_list = list(map(int, stdin.split()))\n    m_list = list(map(int, stdin.split()))\n    n_list.sort()\n    m_list.sort()\n    res = \"\"\n    for i in range(n):\n        if n_list[i] % 3 == 0 and m_list[i] % 5 == 0:\n            res += \"APPROVED\"\n        else:\n            res += \"DENIED\"\n    print(res)\n    return res\n\n-----Sample Output-----\nThe even numbers written on the document are 6 and 10.\nAll of them are divisible by 3 or 5, so the immigrant should be allowed entry.\nThe even numbers written on the document are 6 and 10.\n\n-----Constraints-----\n - 1 \\leq N \\leq 1000\n - 1 \\leq A_i \\leq 1000\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nA_1 A_2 \\dots A_N\n\n-----Output-----\nIf the immigrant should be allowed entry according to the regulation, print APPROVED; otherwise, print DENIED.\n\n-----Sample Input-----\n5\n6 7 9 10 31\n\n-----Sample Output-----\nDenied\n\n-----Constraints-----\n - 1 \\leq N \\leq 1000\n - 1 \\leq A_i \\leq 1000\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nA_1 A_2 \\dots A_N\n\n-----Output-----\nIf the immigrant should be allowed entry according to the regulation, print APPROVED; otherwise, print DENIED.\n\n-----Constraints-----\n - 1 \\leq N \\leq 1000\n - 1 \\leq A_i \\leq 1000\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nA_1 A_2 \\dots A_N\n\n-----Output-----\nIf the immigrant should be allowed entry according to the regulation, print APPROVED; otherwise, print DENIED.\n\n-----Constraints-----\n - 1 \\leq N \\leq 1000\n - 1 \\leq A_i \\leq 1000\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nA_1 A_2 \\dots A_N\n\n-----Output-----\nIf the immigrant should be allowed entry according to the regulation, print APPROVED; otherwise, print DENIED.\n"
    },
    {
        "number": 4141,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, A = map(int, stdin.split())\n    N_even = sum(list(map(int, str(N))))\n    if N_even % 3!= 0:\n        return \"DENIED\"\n    if N_even % 5!= 0:\n        return \"DENIED\"\n    if N_even % 3 == 0 and N_even % 5 == 0:\n        return \"APPROVED\"\n    if N_even % 3 == 0 and N_even % 5!= 0:\n        return \"DENIED\"\n    return \"APPROVED\"\n\nprint(solution(input()))\n'''"
    },
    {
        "number": 4141,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    N, A = map(int, stdin.split())\n\n    if A % 2 == 0:\n        for _ in range(N):\n            if A % 10 == 0:\n                A += 1\n            else:\n                A -= 1\n        \n        if A % 10 == 0:\n            return \"DENIED\"\n        else:\n            return \"APPROVED\"\n    else:\n        for _ in range(N):\n            if A % 10 == 0:\n                A += 1\n            else:\n                A -= 1\n        \n        if A % 10 == 0:\n            return \"APPROVED\"\n        else:\n            return \"DENIED\"\n\n-----Bonus-----\nOutput can be defined as follows:\n- The condition in the statement can be rephrased as \"If x is an even number written on the document, x is divisible by 3 or 5\".\nThen the number is an even number.\n- If the immigrant should be allowed entry according to the regulation, output APPROVED; otherwise, output DENIED.\n\n-----Constraints-----\n - All values in input are integers.\n - 1 \\leq N \\leq 100\n - 1 \\leq A_i \\leq 1000\n\"\"\"\n\ndef"
    },
    {
        "number": 4141,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, A = map(int, stdin.split())\n    if (N % 3!= 0) or (N % 5!= 0):\n        return \"DENIED\"\n    for i in range(N):\n        if A % 3!= 0 and A % 5!= 0:\n            return \"DENIED\"\n        if A % 3 == 0:\n            A //= 3\n        if A % 5 == 0:\n            A //= 5\n    return \"APPROVED\"\n\n----------Sample Input 1----------\n4\n6 7 9 10 31\n\n----------Sample Output 1----------\nDENIED\n"
    },
    {
        "number": 4141,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    for x in range(int(stdin)):\n        if all(map(int, stdin.split())):\n            print(\"APPROVED\")\n        else:\n            print(\"DENIED\")\n"
    },
    {
        "number": 4141,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    A_1, A_2, A_3, A_4, A_5 = map(int, stdin.split())\n    for i in range(N):\n        if A_1 % 3 == 0 and A_2 % 5 == 0:\n            return 'APPROVED'\n        if A_3 % 3 == 0 and A_4 % 5 == 0:\n            return 'DENIED'\n    if A_5 % 3 == 0 and A_4 % 5 == 0:\n        return 'APPROVED'\n    if A_5 % 3 == 0 and A_4 % 5 == 0:\n        return 'DENIED'\n    if A_1 % 3 == 0 and A_3 % 5 == 0:\n        return 'DENIED'\n    if A_1 % 3 == 0 and A_2 % 5 == 0:\n        return 'DENIED'\n    if A_2 % 3 == 0 and A_3 % 5 == 0:\n        return 'DENIED'\n    if A_3 % 3 == 0 and A_4 % 5 == 0:\n        return 'DENIED'\n    if A_4 % 3 == 0 and A_5 % 5 == 0:\n        return 'DENIED'\n\nprint(solution(\"5 7 9 10 31\"))\nprint(solution(\"5 4 7 9 10 3\"))\nprint(solution(\"6 7 9 10 3\"))\nprint(solution(\"3 3 3 3\"))\nprint(solution(\"8 8 8 8 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9"
    },
    {
        "number": 4141,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    l = [i for i in range(1, n+1)]\n    for i in range(1, n):\n        for j in range(1,i):\n            if int(str(l[i])+str(l[j]))%3 == 0:\n                l[i] = l[i]+l[j]\n    if l[n] % 3 == 0:\n        return \"APPROVED\"\n    else:\n        return \"DENIED\"\n\n-----Sample Input-----\n5\n6 7 9 10 31\n\n-----Sample Output-----\nNOT APPROVED\n\nThe even numbers written on the document are 6 and 10.\nAll of them are divisible by 3 or 5, so the immigrant should be allowed entry.\ndef"
    },
    {
        "number": 4141,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def solution_(stdin: str) -> str:\n        a_list = [int(x) for x in stdin.split()]\n        check = True\n        for i in range(len(a_list)):\n            for j in range(i+1, len(a_list)):\n                if a_list[i]%3 == 0 and a_list[j]%5 == 0:\n                    check = False\n                    break\n            if not check:\n                break\n        if check:\n            return \"APPROVED\"\n        else:\n            return \"DENIED\"\n    return solution_\n"
    },
    {
        "number": 4141,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n  for i in range(int(stdin)):\n    if all([x % 3 == 0 for x in range(int(stdin[i]) + 1)]) and all([x % 5 == 0 for x in range(int(stdin[i]) + 1)]):\n      return \"APPROVED\"\n    else:\n      return \"DENIED\""
    },
    {
        "number": 4141,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, a = [int(i) for i in stdin.split()]\n    res = \"DENIED\"\n    for i in range(n):\n        if a%3==0:\n            if a%5==0:\n                res = \"APPROVED\"\n        else:\n            if a%5==0:\n                res = \"DENIED\"\n        a = a // 3\n    return res"
    },
    {
        "number": 4142,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def get_steps(lst):\n        if lst[0] == 'R':\n            return [0,1,2,3,4]\n        elif lst[0] == 'L':\n            return [0,3,2,1,4]\n        elif lst[0] == 'U':\n            return [1,2,3,0,4]\n        elif lst[0] == 'D':\n            return [2,3,0,1,4]\n        else:\n            return []\n    \n    def get_step_idx(steps, i):\n        if i >= len(steps):\n            return -1\n        else:\n            return steps[i]\n        \n    for line in stdin:\n        if line == 'RUDRU':\n            return 'Yes'\n        else:\n            steps = get_steps(line)\n            i = get_step_idx(steps, get_step_idx(steps, 0))\n            if i!= -1:\n                return 'No'\n    return 'No'\n"
    },
    {
        "number": 4142,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin\n    if len(string) == 1:\n        print(\"No\")\n        return \"\"\n    tiles = 0\n    tiles2 = 0\n    while tiles > 0:\n        tiles = tiles - 1\n        if string[tiles] == \"R\":\n            string2 = string[tiles - 1] + string[tiles - 2] + string[tiles - 3]\n            tiles = 0\n            if string2 == \"U\":\n                string2 = string[tiles - 4] + string[tiles - 5] + string[tiles - 6]\n                tiles = 0\n            if string2 == \"D\":\n                string2 = string[tiles - 3] + string[tiles - 4] + string[tiles - 5]\n                tiles = 0\n            if string2 == \"L\":\n                string2 = string[tiles - 2] + string[tiles - 3] + string[tiles - 4]\n                tiles = 0\n        else:\n            string2 = string[tiles + 1] + string[tiles + 2] + string[tiles + 3]\n            tiles = 0\n        if string2 == \"U\":\n            tiles = tiles + 2\n        if string2 == \"D\":\n            tiles = tiles + 3\n        if string2 == \"L\":\n            tiles = tiles + 4\n        if string2 == \"R\":\n            tiles = tiles + 5\n    if string2 == \"U\":\n        string2 = \"R\"\n    if string2 == \"D\":\n        string2 = \"D\"\n    if string2 == \"L\":\n        string2 = \"L\"\n    if string2 == \"R\":\n        string2 = \"R\"\n    if string2 == \"U\":\n        string2 = \"U\"\n    if string2 == \"D\":\n        string2 = \"D\"\n    if string2 == \"L\":\n        string2 = \"L\"\n    if string2 == \"R\":\n        string2 = \"R\"\n    return string2\n\nSample Input\nRUDLUDR\nSample Output\nYes\n\nimport math\ndef"
    },
    {
        "number": 4142,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    count = 0\n    for i in range(len(s)):\n        if s[i] == \"L\":\n            count += 1\n        elif s[i] == \"R\":\n            count -= 1\n        elif s[i] == \"U\":\n            count += 1\n        elif s[i] == \"D\":\n            count -= 1\n        if count % 2 == 1:\n            return \"No\"\n    return \"Yes\"\n\ndef"
    },
    {
        "number": 4142,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    for i in range(len(s)):\n        if s[i] == 'R' or s[i] == 'U':\n            if (i % 2 == 1):\n                if (s[i-1] == 'R'):\n                    s = s[:i-1] + 'D' + s[i+1:]\n            else:\n                if (s[i-1] == 'U'):\n                    s = s[:i-1] + 'D' + s[i+1:]\n    return s\n"
    },
    {
        "number": 4142,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    str_in = stdin.split()\n    no_of_chars = len(str_in[0])\n    if no_of_chars % 2!= 0:\n        print('No')\n        return\n    lst = []\n    for i in range(0, no_of_chars - 2, 2):\n        lst.append(str_in[i])\n    lst.append(str_in[-1])\n    for i in range(0, no_of_chars - 1, 2):\n        lst.append(str_in[i + 1])\n    lst.append(str_in[-2])\n    for i in range(0, no_of_chars - 1, 2):\n        lst.append(str_in[i])\n    lst.append(str_in[-2])\n    lst.append(str_in[-1])\n    for i in range(0, no_of_chars - 1, 2):\n        lst.append(str_in[i])\n    lst.append(str_in[0])\n    if len(lst) == 1:\n        print('Yes')\n        return\n    if lst[0] == 'U' or lst[0] == 'D':\n        print('Yes')\n        return\n    if lst[0] == 'L' or lst[0] == 'R':\n        print('No')\n        return\n    else:\n        return\n\n-----Basic Tests-----\ninput = \"UDUDR\"\nprint(solution(input))\n\ninput = \"UUDUDR\"\nprint(solution(input))\n\ninput = \"UUDUDRDDU\"\nprint(solution(input))\n\ninput = \"UUUDUDRDUUU\"\nprint(solution(input))\n\ninput = \"UUUDUDRDDUU\"\nprint(solution(input))\n\ninput = \"UUDUDRDDUUUUUUU\"\nprint(solution(input))\n\ninput = \"UDUDRDDUUUUUUUU\"\nprint(solution(input))\n\ninput = \"UUDUDRDDUUUUUUUUU\"\nprint(solution(input))\n\ninput = \"UDUDUDRDDUUUUUUUUU\"\nprint(solution(input))\n\ninput = \"UUDUDRDDUUUUUUUUUUU\"\nprint(solution(input))\n\ninput = \"UDUDRDDUUUUUUUUUUUUU\"\nprint(solution(input))\n\ninput = \"UUUDUDRDDUUUUUUUUUUU\"\nprint(solution(input))\n\ninput = \"UUDUDUDRDDUUUUUUUUUUU\"\nprint(solution(input))\n\ninput = \"UUUDUDRDDUUUUUUUUUUUUU\"\nprint(solution(input))\n\ninput = \"UUUUDRDDUUUUUUUUUUUUUUU\"\nprint(solution(input))\n\ninput = \"UUUUDRDDUUUUUUUUUUUUUUUUU\"\nprint(solution(input))\n\ninput = \"UUUUDUDRDDUUUUUUUUUUUUUUUUU\"\nprint(solution(input))\n\ninput = \"UUUDUDRDDUUUUUUUUUUUUUUUUUUUU\"\nprint(solution(input))\n\ninput = \"UUUDUDRDDUUUUUUUUUUUUUUUUUUUU\"\nprint(solution(input))\n\ninput = \"UUUDUDRDDUUUUUUUUUUUUUUUUUUUUUUU\"\nprint(solution(input))\n"
    },
    {
        "number": 4142,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    count = 0\n    for i in range(len(s)):\n        if s[i] == 'L':\n            count += 1\n            if count % 2 == 0:\n                pass\n            else:\n                count -= 1\n        elif s[i] == 'R':\n            count += 1\n            if count % 2 == 1:\n                pass\n            else:\n                count -= 1\n        elif s[i] == 'U':\n            count -= 1\n            if count % 2 == 0:\n                pass\n            else:\n                count += 1\n        elif s[i] == 'D':\n            count -= 1\n            if count % 2 == 1:\n                pass\n            else:\n                count += 1\n        else:\n            pass\n    if count % 2 == 0:\n        print('Yes')\n    else:\n        print('No')\n    return 'Yes'\n"
    },
    {
        "number": 4142,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n  s = stdin[0]\n  for c in stdin:\n    if c == 'U':\n      s = s[::-1]\n    elif c == 'D':\n      s = s[::-1]\n    else:\n      pass\n  if s == 'UDDRL':\n    return 'Yes'\n  else:\n    return 'No'"
    },
    {
        "number": 4142,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n  s = stdin.strip()\n  dp = [[False] * (len(s)+1) for _ in range(len(s)+1)]\n  \n  for i in range(1, len(s)+1):\n    for j in range(len(s)+1):\n      if s[i-1] == 'R' and (j%2 == 1 or j%2 == 3 or j%2 == 5 or j%2 == 7):\n        dp[i][j] = True\n      elif s[i-1] == 'U' and (j%2 == 2 or j%2 == 4 or j%2 == 6):\n        dp[i][j] = True\n      else:\n        dp[i][j] = False\n  \n  for i in range(len(s)):\n    for j in range(i, len(s)+1):\n      if dp[i][j]:\n        print('Yes')\n        return\n      elif s[i] == 'R' and (j%2 == 1 or j%2 == 3 or j%2 == 5 or j%2 == 7):\n        print('No')\n        return\n      elif s[i] == 'U' and (j%2 == 2 or j%2 == 4 or j%2 == 6):\n        print('No')\n        return\n  print('No')\n  return\n"
    },
    {
        "number": 4142,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    for s in stdin:\n        if not is_valid(s):\n            return \"No\"\n        if s[0] == \"L\":\n            if s[1] == \"R\":\n                return \"Yes\"\n            if s[1] == \"U\":\n                return \"Yes\"\n            if s[1] == \"D\":\n                return \"Yes\"\n        if s[0] == \"U\":\n            if s[1] == \"R\":\n                return \"No\"\n            if s[1] == \"U\":\n                return \"No\"\n            if s[1] == \"D\":\n                return \"No\"\n        if s[0] == \"D\":\n            if s[1] == \"L\":\n                return \"No\"\n            if s[1] == \"U\":\n                return \"No\"\n            if s[1] == \"R\":\n                return \"No\"\n    return \"Yes\"\n\ndef"
    },
    {
        "number": 4142,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    ans = []\n    for st in stdin:\n        if st in 'LR':\n            ans.append(st)\n        else:\n            ans.append(st[::-1])\n    return ''.join(ans)\n'''\ndef"
    },
    {
        "number": 4143,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    ans = 0\n    cities = [0] * N\n    for i in range(N):\n        cities[i] = int(stdin[i])\n    for i in range(N):\n        for j in range(i + 1, N):\n            if cities[i] == cities[j]:\n                continue\n            ans += 1\n            cities[i] += cities[j]\n    return str(ans)\n"
    },
    {
        "number": 4143,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B, C, D, E = map(int, stdin.split())\n    A = min(A, B, C, D, E)\n    D = max(A, D) - A\n    E = max(A, E) - A\n    B = max(B, D, E)\n    C = max(C, E) - C\n    D = max(D, C) - C\n    E = max(E, D) - D\n    return str(min(D, E, B, C, A, N))"
    },
    {
        "number": 4143,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def dfs(n):\n        global result\n        if n == 6:\n            for i in range(0,len(result)):\n                print(result[i],end=\" \")\n            print()\n            result.clear()\n            return\n\n        for i in range(0,len(people)):\n            if i == 0:\n                continue\n            if people[i] < n:\n                continue\n            else:\n                dfs(n+people[i]-1)\n        result.append(n)\n    \n    N,A,B,C,D,E = map(int,stdin.split())\n    people = list(range(0,N))\n    dfs(A)\n    dfs(B)\n    dfs(C)\n    dfs(D)\n    dfs(E)\n    min_time = min(result)\n    print(min_time)\n    return min_time"
    },
    {
        "number": 4143,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    numbers = list(map(int, stdin.split()))\n    m = len(numbers)\n    \n    for i in range(1, m):\n        numbers[i] += numbers[i-1]\n    \n    total = 0\n    for i in numbers:\n        total += i\n        \n    return str(total)"
    },
    {
        "number": 4143,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B, C, D, E, F = map(int, stdin.split())\n    time = A + B + C + D + E + F\n    time = time + time + time + time + time\n    time = time + time + time + time + time + time + time\n    time = time + time + time + time + time + time + time\n    time = time + time + time + time + time + time + time\n    time = time + time + time + time + time + time + time + time\n    time = time + time + time + time + time + time + time + time\n    time = time + time + time + time + time + time + time + time + time\n    time = time + time + time + time + time + time + time + time\n    time = time + time + time + time + time + time + time + time + time\n    time = time + time + time + time + time + time + time + time + time\n    time = time + time + time + time + time + time + time + time + time\n    time = time + time + time + time + time + time + time + time + time + time\n    time = time + time + time + time + time + time + time + time + time + time\n    time = time + time + time + time + time + time + time + time + time + time\n    time = time + time + time + time + time + time + time + time + time + time\n    time = time + time + time + time + time + time + time + time + time + time + time\n    time = time + time + time + time + time + time + time + time + time + time + time + time\n    time = time + time + time + time + time + time + time + time + time + time + time\n    time = time + time + time + time + time + time + time + time + time + time + time + time + time\n    time = time + time + time + time + time + time + time + time + time + time + time + time + time + time + time\n    time = time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time\n    time = time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time\n    time = time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time\n    time = time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time\n    time = time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time\n    time = time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time\n    time = time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time\n    time = time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time\n    time = time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time\n    time = time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time\n    time = time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time\n    time = time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time\n    time = time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time\n    time = time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time\n    time = time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time + time +"
    },
    {
        "number": 4143,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N,A,B,C,D,E = map(int,stdin.split())\n    time = 0\n    while True:\n        for i in range(N):\n            time += A*time + B*time + C*time + D*time + E*time + time\n        time %= 60\n        if time == 0:\n            break\n    return str(time)\n\nThe following code shows four versions of solution(s) that take longer.\ndef"
    },
    {
        "number": 4143,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    count = 0\n    while count < N:\n        time, people = map(int, stdin.strip().split())\n        if 0 <= time <= 60:\n            count += people\n        else:\n            count = people\n    return str(count)\n"
    },
    {
        "number": 4143,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4143,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin[0])\n    A = int(stdin[1])\n    B = int(stdin[2])\n    C = int(stdin[3])\n    D = int(stdin[4])\n    E = int(stdin[5])\n    \n    if B > D:\n        return \"Invalid Input\"\n    if A > C:\n        return \"Invalid Input\"\n    if E > E:\n        return \"Invalid Input\"\n    \n    print(solution(N,A,B,C,D,E))\n        \n                \n                \n                "
    },
    {
        "number": 4143,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B, C, D, E, F = map(int, stdin.split())\n    time_lst = list(map(int, stdin.split()))\n    min_lst = []\n    for i in range(N):\n        min_lst.append(i+1)\n    return str(min(min_lst))+\" \"+str(time_lst)\n\"\"\"\n\ndef"
    },
    {
        "number": 4144,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    \n    # Consider all possible sequences.\n    ans = []\n    for i in range(1,n+1):\n        for j in range(i,n+1):\n            ans.append((i,j))\n    \n    # Sort the sequences.\n    ans = sorted(ans)\n    \n    # Count how many integer sequences A_i,A_i+1,A_i+2,\u2026,A_N where A_i<=9, A_i>=0.\n    # If a sequence contains a number < 9, then it would be represented by a pair (A_i, A_i+1), \n    # and so on.\n    ans = []\n    for i in range(n):\n        a = ans[i][0]\n        b = ans[i][1]\n        ans.append((a,a+b))\n        \n    # Calculate the sum of the integers in the number sequences.\n    ans = [sum(map(int,x)) for x in ans]\n    \n    # Convert the answer back to a string and return it.\n    ans = [str(x) for x in ans]\n    ans = ''.join(ans)\n    ans = int(ans)\n    return ans"
    },
    {
        "number": 4144,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    mod_10_9_0 = 2 ** 9 + 7\n\n    for i in range(N):\n        x = int(stdin[i])\n        for j in range(1, 10):\n            y = pow(x, j)\n            if y == 0:\n                break\n            if y >= 9:\n                break\n            if i == 0 and j == 1:\n                print(x)\n                return str(x)\n            else:\n                if y % mod_10_9_0 == 0:\n                    break\n                else:\n                    if y % mod_10_9_0 == 0:\n                        print(y)\n                        return str(y)\n                    else:\n                        pass\n    return str(x)\n\"\"\"\n\ndef"
    },
    {
        "number": 4144,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    sequence = {0,9}\n    while N:\n        res = 0\n        N -= 1\n        if not N:\n            return str(res % 10 + 7)\n        while N:\n            res += N // 10\n            N //= 10\n    return str(res % 10 + 7)\n\n\"\"\"\ndef"
    },
    {
        "number": 4144,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    result = ''\n    n = int(stdin)\n    \n    if n == 0:\n        return \"0\"\n    \n    for i in range(1, n):\n        if i%2 == 0:\n            result += '0'\n        else:\n            result += '9'\n    \n    return result\n\nSample Output\n2\n\n\"\"\""
    },
    {
        "number": 4144,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   answer = 0\n\n   while(stdin.find('0')!=-1) or (stdin.find('1')!=-1):\n       curr_number = 0\n       \n       for i in range(len(stdin)):\n           curr_number = (ord(stdin[i])-97)%9\n           if curr_number == 0:\n               return '0'\n           else:\n               curr_number = (curr_number)%9\n           if curr_number == 9:\n               return '9'\n           if curr_number==0:\n               continue\n           answer = answer*10 + curr_number\n\n       answer = answer%10\n\n   return answer%10\n\n----Constraints----\n - 1 \\leq N \\leq 10^6\n - N is an integer.\n - 1 \\leq A_i \\leq 9\n - There exists some i such that A_i=0 holds.\n - There exists some i such that A_i=9 holds.\n\n----Problems----\n-----Input-----\n3\n\n-----Output-----\n10\n\nThe answer is: 10\n\n-----Sample Input-----\n2\n\n-----Sample Output-----\n2\n\nTwo sequences \\{0,9\\} and \\{9,0\\} satisfy all conditions.\ndef"
    },
    {
        "number": 4144,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n    answer = 0\n    \n    for i in range(1,len(stdin)):\n        \n        for j in range(i,len(stdin)):\n            \n            if stdin[i]!= 0:\n                \n                if stdin[j] == 9:\n                    \n                    answer += 1\n                    \n    if answer % 10**9 == 0:\n        print(answer % 10**9)\n    else:\n        print(-1)\n    return\n\n\n\n-----Sample Output-----\n2\n\nTwo sequences \\{0,9\\} and \\{9,0\\} satisfy all conditions.\n"
    },
    {
        "number": 4144,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n  n = int(stdin)\n  answer = \"1\"\n  sequences = []\n  for i in range(n):\n    if i%2==0:\n      sequences.append(i)\n  for i in range(n,0,-1):\n    if i%2!=0 and i>=i//2+1:\n      answer+=str(sequences[i-1])\n    elif i%2!=0 and i>=i//2:\n      answer+=str(sequences[i-1])+str(sequences[i-2])\n  return answer%10**9 + 7\n\ndef"
    },
    {
        "number": 4144,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n        A = list(map(int, stdin.split()))\n        print(len(set(A)))"
    },
    {
        "number": 4144,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n  return str(9 - int(stdin.split()[0])) + str(int(stdin.split()[0]) - int(stdin.split()[1]))\n\n\"\"\""
    },
    {
        "number": 4144,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def solve(N: int, seq: str, a: str) -> str:\n        count = 0\n        l = len(seq)\n        lst = list(map(int, seq.split()))\n        \n        if l in lst:\n            for i in range(l,l*l+l):\n                if (count == 0 and seq[i] == a) or (count == 1 and seq[i]!= a):\n                    return '1'\n                elif (count == 1 and seq[i]!= a) or (count == 2 and seq[i] == a):\n                    count += 1\n                    continue\n                elif (count == 2 and seq[i] == a) or (count == 3 and seq[i]!= a):\n                    count += 1\n                    continue\n                else:\n                    break\n        else:\n            return '0'\n    def check(seq: str, a: str) -> bool:\n        count = 0\n        l = len(seq)\n        lst = list(map(int, seq.split()))\n        for i in range(l,l*l+l):\n            if (count == 0 and seq[i] == a) or (count == 1 and seq[i]!= a):\n                return True\n            elif (count == 1 and seq[i]!= a) or (count == 2 and seq[i] == a):\n                count += 1\n                continue\n            elif (count == 2 and seq[i] == a) or (count == 3 and seq[i]!= a):\n                count += 1\n                continue\n            else:\n                return False\n        return True\n    for i in range(10):\n        print(solve(N,stdin,i),end=' ')\n    print()\n    print(solve(N,stdin,0),end=' ')\n    print(solve(N,stdin,1),end=' ')\n    print(solve(N,stdin,2),end=' ')\n    print(solve(N,stdin,3),end=' ')\n    print(solve(N,stdin,4),end=' ')\n    print(solve(N,stdin,5),end=' ')\n    print(solve(N,stdin,6),end=' ')\n    print(solve(N,stdin,7),end=' ')\n    print(solve(N,stdin,8),end=' ')\n    print(solve(N,stdin,9),end=' ')\n    print()\n    return \"1\"\nfor i in range(int(input())):\n    print(solution(input()))\n"
    },
    {
        "number": 4145,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\ndef"
    },
    {
        "number": 4145,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin) == 0:\n        return \"\"\n    \n    numbers = list(map(int, stdin.split()))\n    \n    for i in range(2, int(math.sqrt(max(numbers)) + 1)):\n        if numbers[0] % i == 0 or numbers[-1] % i == 0:\n            return str(i)\n    \n    return \"\"\n\"\"\""
    },
    {
        "number": 4145,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def isPrime(x):\n        for i in range(2, int(math.sqrt(x)) + 1):\n            if x % i == 0:\n                return False\n        return True\n    \n    def solve(x):\n        a = x\n        while a <= 10**6:\n            b = a + 1\n            while b <= 10**6:\n                c = b + 1\n                while c <= 10**6:\n                    d = c + 1\n                    while d <= 10**6:\n                        e = d + 1\n                        while e <= 10**6:\n                            f = e + 1\n                            while f <= 10**6:\n                                g = f + 1\n                                while g <= 10**6:\n                                    h = g + 1\n                                    while h <= 10**6:\n                                        i = h + 1\n                                        while i <= 10**6:\n                                            j = i + 1\n                                            while j <= 10**6:\n                                                k = j + 1\n                                                while k <= 10**6:\n                                                    l = k + 1\n                                                    while l <= 10**6:\n                                                        m = l + 1\n                                                        while m <= 10**6:\n                                                            n = m + 1\n                                                            while n <= 10**6:\n                                                                o = n + 1\n                                                                while o <= 10**6:\n                                                                    p = o + 1\n                                                                    while p <= 10**6:\n                                                                        q = p + 1\n                                                                        while q <= 10**6:\n                                                                            r = q + 1\n                                                                            while r <= 10**6:\n                                                                                s = r + 1\n                                                                                while s <= 10**6:\n                                                                                    t = s + 1\n                                                                                    while t <= 10**6:\n                                                                                        u = t + 1\n                                                                                        while u <= 10**6:\n                                                                                           v = u + 1\n                                                                                           while v <= 10**6:\n                                                                                               w = v + 1\n                                                                                               while w <= 10**6:\n                                                                                                   x = w + 1\n                                                                                                   while x <= 10**6:\n                                                                                                       if isPrime(x):\n                                                                                                                                                                                                                                                                                                                                                                                                                                           *= x\n                                                                                                   return x\n                                                                                                   break\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                                   continue\n                                                                                    "
    },
    {
        "number": 4145,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = []\n    i = 2\n    while i <= int(stdin.strip()):\n        while int(stdin.strip()) % i!= 0:\n            i += 1\n        s.append(i)\n        if i == int(stdin.strip()):\n            break\n        i += 1\n    return str(min(s))"
    },
    {
        "number": 4145,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n <= 2:\n        return str(n)\n    s = 2\n    while n%s!= 0:\n        s += 1\n        n //= s\n    return str(n)\n"
    },
    {
        "number": 4145,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n    max_value = 1\n    \n    for i in range(2, int(stdin) + 1):\n        prime_number = 2\n        \n        while prime_number < i:\n            \n            if i % prime_number == 0:\n                break\n            \n            if i % prime_number == 0:\n                prime_number = prime_number + 1\n                continue\n                \n            if i % prime_number == 1:\n                prime_number = prime_number + 2\n                continue\n                \n        if prime_number > max_value:\n            max_value = prime_number\n    \n    return str(max_value)\n"
    },
    {
        "number": 4145,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def primes(n):\n        primes = [2]\n        for i in range(3, n, 2):\n            if all(i % j for j in primes):\n                primes.append(i)\n        return primes\n\n    def find_primes(n):\n        primes = primes(n)\n        for i in range(len(primes) - 1):\n            primes[i] += primes[i + 1]\n        return primes\n\n    def isprime(n):\n        return all(n % j for j in primes(n + 1))\n\n    def max_prime(n):\n        primes = find_primes(n)\n        return primes[-1]\n\n    n = int(stdin)\n    if n <= 0:\n        return \"0\"\n    min_prime = min(primes(n))\n    for i in range(n - min_prime):\n        if isprime(i):\n            print(min_prime + 1)\n            break\n        else:\n            max_prime(min_prime + 1)\n"
    },
    {
        "number": 4145,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n  N = int(stdin)\n  if N > 20:\n    return str(N)\n  if N <= 2:\n    return 1\n  for n in range(3, N, 2):\n    if is_prime(n):\n      return str(n)\n  return 1\n\ndef"
    },
    {
        "number": 4145,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    min = sys.maxsize\n    for i in range(10001):\n        for j in range(2,i):\n            if(i % j == 0):\n                break\n        else:\n            min = min if min > i else i\n    print(min)\n    return str(min)"
    },
    {
        "number": 4145,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    \n    num = int(stdin)\n    if num > 10**9:\n        num = num - 10**9\n    n = 2\n    while num > 1:\n        if num%n == 0:\n            return n\n        n += 1\n        num = num/n\n    return 1\n\ndef"
    },
    {
        "number": 4146,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for _ in range(n):\n        v_i = int(stdin[n-1])\n        print(v_i)\n        v_n = list(str(v_i))\n        v_n[0] = v_n[0] * 2\n        v_n = ''.join(v_n)\n        print(v_n)\n    return v_n"
    },
    {
        "number": 4146,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    v = [i for i in stdin.split() if i!='']\n    n = len(v)\n    print(min(v))\n    for i in range(0,n-2,2):\n        print(i,v[i],v[i+1],v[i+2])\n        if v[i]==v[i+1] and v[i+2]==v[i+2]:\n            v[i] = v[i+1]\n            v[i+1] = v[i+2]\n            v[i+2] = v[i+2]\n    print(v)\n    print(len(v))\n    return ''.join(v)"
    },
    {
        "number": 4146,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip().split()[0])\n    v = [int(x) for x in stdin.split()]\n    print(min(v))"
    },
    {
        "number": 4146,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    v = list(map(int, stdin.split()))\n    \n    if len(v) % 2!= 0:\n        return '0'\n    \n    index = 0\n    answer = n\n    while index < len(v):\n        v[index], v[index + 1] = v[index + 1], v[index]\n        answer -= 1\n        index += 2\n        \n    print(answer)\n    return str(answer)\n\n-----Time Limit Exceeded-----\nTime Limit Exceeded\n\nProblem Constraints\n1 <= n <= 10^5\n1 <= v_i <= 10^5\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Division by Zero-----\n\n-----Div"
    },
    {
        "number": 4146,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    v = []\n    for i in range(n):\n        v.append(int(input()))\n    for i in range(n):\n        v[i] = v[i] * 2 + v[i]\n    print(min(v))\n    return '\\n'.join(map(str, v))\n"
    },
    {
        "number": 4146,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n  n, v = list(map(int, stdin.split()))\n  print(v, end ='')\n  a = v // 2\n  print(a)\n  print(v % 2)\n  count = 0\n  for i in range(1, n + 1):\n    for j in range(i + 1, n + 1):\n      if a < j:\n        count += 1\n  print(count)\n  return str(count)\n\n\nprint(solution(inp))\n\n\ndef"
    },
    {
        "number": 4146,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n  n = int(stdin)\n  v_list = list(map(int,stdin.split()))\n  if not v_list:\n    return \"0\"\n  if n%2==0:\n    v_list = v_list[1:-1:2]\n    return str(len(v_list))\n  else:\n    v_list = v_list[:-1:2]\n    return str(len(v_list))\n"
    },
    {
        "number": 4146,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    v_1 = list(map(int, stdin.split()))\n    v_2 = list(map(int, stdin.split()))\n    v_3 = []\n    for i in range(len(v_1)):\n        if i%2 == 1:\n            v_3.append(v_1[i] - v_2[i])\n    v_3 = sorted(v_3)\n    \n    a = 0\n    for i in range(0,n,2):\n        a += v_3[i]\n        \n    return str(a)\n\nSolution:\n\n'''\n\nimport math\n\nclass Solution:\n    def minElements(self, nums: List[int], k: int) -> int:\n        \n        cnt = 0\n        for i in range(0,len(nums),2):\n            for j in range(i+1,len(nums)):\n                if j-i == 2 or j-i == 3:\n                    cnt += 1\n        \n        return len(nums)-cnt\n\nprint(Solution().minElements([3,1,3,2],4))"
    },
    {
        "number": 4146,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    v = list(map(int, stdin.split()))\n    for i in range(1, len(v) // 2):\n        v[i], v[i + 1] = v[i + 1], v[i]\n    return str(min(v))\n\nprint(solution(inp))\n"
    },
    {
        "number": 4146,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    s = [0] * a[0]\n    for i in range(1, len(a)):\n        s[i - 1] = s[i] + a[i]\n    return str(min(s))\n\nprint(solution(\"4 3 1 2\"))\n"
    },
    {
        "number": 4147,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    l_1, l_2 = map(int, stdin.split())\n    bamboos = [int(i) for i in stdin.split()]\n    \n    cost = 0\n    for b in bamboos:\n        l_i = l_1 + b\n        l_i = l_i % l_2\n        cost += l_i * 2\n    \n    return str(cost)\n"
    },
    {
        "number": 4147,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B, C, l_1, l_2 = map(int, stdin.split())\n\n    def extend(length: int, bamboos: List[int]) -> int:\n        return (length + length - 2) * l_1\n\n    def short(length: int, bamboos: List[int]) -> int:\n        return (length + length - 2) * l_2\n\n    def composition(length: int, bamboos: List[int]) -> int:\n        return (length + length - 1) * l_N\n\n    def extend_short(length: int, bamboos: List[int]) -> int:\n        return (length + length - 1) * l_1 + (length + length - 1) * l_2\n\n    def composition_short(length: int, bamboos: List[int]) -> int:\n        return (length + length - 1) * l_1 + (length + length - 1) * l_2 + (length + length - 1) * l_3\n\n    def composition_complement(length: int, bamboos: List[int]) -> int:\n        return (length + length - 1) * l_1 + (length + length - 1) * l_2 + (length + length - 1) * l_3 + (length + length - 1) * l_4\n\n    def short_composition_complement(length: int, bamboos: List[int]) -> int:\n        return (length + length - 1) * l_1 + (length + length - 1) * l_2 + (length + length - 1) * l_3 + (length + length - 1) * l_4 + (length + length - 1) * l_5\n\n    print(extend(A, B, C, l_1, l_2), extend_short(A, B, C, l_1, l_2), composition(C, bamboos),\n          composition_short(C, bamboos), composition_complement(C, bamboos),\n          extend(B, A, C, l_1, l_2), extend_short(B, A, C, l_1, l_2), composition(A, bamboos),\n          composition_short(A, bamboos), composition_complement(A, bamboos),\n          extend(C, B, A, l_1, l_2), extend_short(C, B, A, l_1, l_2), composition(B, bamboos),\n          composition_short(B, bamboos), composition_complement(B, bamboos),\n          extend(C, B, A, l_1, l_2), extend_short(C, B, A, l_1, l_2), composition(B, bamboos),\n          composition_short(B, bamboos), composition_complement(B, bamboos),\n          extend(C, B, A, l_1, l_2), extend_short(C, B, A, l_1, l_2), composition(B, bamboos),\n          composition_short(B, bamboos), composition_complement(B, bamboos),\n          extend(A, C, B, l_1, l_2), extend_short(A, C, B, l_1, l_2), composition(C, bamboos),\n          composition_short(C, bamboos), composition_complement(C, bamboos),\n          extend(B, C, A, l_1, l_2), extend_short(B, C, A, l_1, l_2), composition(A, bamboos),\n          composition_short(A, bamboos), composition_complement(A, bamboos),\n          extend(A, B, C, l_1, l_2), extend_short(A, B, C, l_1, l_2), composition(C, bamboos),\n          composition_short(C, bamboos), composition_complement(C, bamboos),\n          extend(B, C, A, l_1, l_2), extend_short(B, C, A, l_1, l_2), composition(C, bamboos),\n          composition_short(C, bamboos), composition_complement(C, bamboos),\n          extend(A, C, B, l_1, l_2), extend_short(A, C, B, l_1, l_2), composition(C, bamboos),\n          composition_short(C, bamboos), composition_complement(C, bamboos),\n          extend(A, B, C, l_1, l_2), extend_short(A, B, C, l_1, l_2), composition(B, bamboos),\n          composition_short(B, bamboos), composition_complement(B, bamboos),\n          extend(C, B, A, l_1, l_2), extend_short(C, B, A, l_1, l_2), composition(B, bamboos),\n          composition_short(B, bamboos), composition_complement(B, bamboos),\n          extend(B, C, A, l_1, l_2), extend_short(B, C, A, l_1, l_2), composition(C, bamboos),\n          composition_short(C, bamboos), composition_complement(C, bamboos),\n          extend(C, B, A, l_1, l_2), extend_short(C, B, A, l_1, l_2), composition(B, bamboos),\n          composition_short(B, bamboos), composition_complement(B, bamboos),\n          extend(C, B, A, l_1, l_2), extend_short(C, B, A, l_1, l_2), composition(B, bamboos),\n          composition_short(B, bamboos), composition_complement(B, bamboos),\n          extend(C, B, A, l_1, l_2), extend_short(C, B, A, l_1, l_2), composition(B, bamboos),\n          composition_short(B"
    },
    {
        "number": 4147,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B, C = map(int, stdin.split())\n    l_1, l_2, l_N = map(int, stdin.split())\n    l_1 = l_1 + l_1 + l_1\n    l_2 = l_2 + l_2 + l_2\n    l_N = l_N + l_N\n    \n    res = min(l_1, l_2, l_N)\n    \n    if A < B < C:\n        res += A + B + C - 2 * A * B\n    else:\n        res += max(A, B, C - A) * min(A, B, C - A)\n    \n    return str(res)\n\ndef"
    },
    {
        "number": 4147,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, b = map(int, stdin.split())\n    l_1, l_2, l_3 = map(int, stdin.split())\n    l_1 += 1\n    l_2 += 2\n    l_3 += 3\n    l_N = (l_1 * l_2 * l_3) // (l_1 + l_2 + l_3)\n    if l_N > b:\n        print(l_N)\n        return\n    bamboos = [98, 40, 30, 21, 80]\n    mp_used = 0\n    for i in range(n):\n        for j in range(len(bamboos)):\n            if l_N < bamboos[j] <= l_N + 1:\n                mp_used += 2\n            if l_N < bamboos[j] <= l_N + 2:\n                mp_used += 10\n            if l_N < bamboos[j] <= l_N + 3:\n                mp_used += 1\n    print(mp_used)\n"
    },
    {
        "number": 4147,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B, C = map(int, stdin.split())\n    l_1 = int(N / 2)\n    l_2 = int(N - l_1)\n    l_3 = int(B) - l_2\n    l_4 = int(C) - l_2\n    if l_4 < l_3 or (l_2 > l_3 and l_2 < l_3):\n        print(l_4 + (l_4 + l_3 - (l_2 + l_2 - l_3)) * (l_4 + l_3 - (l_2 + l_2 - l_3)))\n    elif l_2 + l_3 + l_4 == 0:\n        print(0)\n    elif l_2 + l_3 + l_4 == l_2 + l_3 + l_4:\n        print(l_2 + l_3 + l_4)\n    else:\n        print(l_2 + l_3 + l_4 + l_3)\n"
    },
    {
        "number": 4147,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    l_1, l_2, l_3 = map(int, stdin.split())\n    l_4 = l_1 + l_2 + l_3\n    \n    if l_1 == l_2:\n        l_3 += 1\n    \n    if l_2 == l_3:\n        l_4 += 1\n    \n    if l_3 == l_4:\n        l_1 += 1\n    \n    if l_1 == l_2 + l_3:\n        l_1 += 1\n        l_2 += 1\n        l_3 += 1\n    \n    if l_2 == l_3 + l_4:\n        l_2 += 1\n        l_3 += 1\n        l_4 += 1\n    \n    if l_1 == l_2 + l_3 + l_4:\n        l_1 += 1\n        l_2 += 1\n        l_3 += 1\n        l_4 += 1\n    \n    if l_1 == l_2 + l_3 + l_4:\n        l_2 += 1\n        l_3 += 1\n        l_4 += 1\n    \n    if l_1 + l_2 == l_3 + l_4:\n        l_1 += 1\n        l_2 += 1\n        l_3 += 1\n        l_4 += 1\n    \n    if l_1 + l_2 + l_3 == l_4:\n        l_1 += 1\n        l_2 += 1\n        l_3 += 1\n        l_4 += 1\n    \n    if l_1 + l_2 + l_3 + l_4 == l_1 + l_2 + l_3 + l_4:\n        l_1 += 1\n        l_2 += 1\n        l_3 += 1\n        l_4 += 1\n    \n    if l_1 + l_2 + l_3 + l_4 == l_1 + l_2 + l_3 + l_4:\n        l_1 += 1\n        l_2 += 1\n        l_3 += 1\n        l_4 += 1\n    \n    if l_1 + l_2 + l_3 + l_4 == l_2 + l_3 + l_4:\n        l_2 += 1\n        l_3 += 1\n        l_4 += 1\n    \n    if l_1 + l_2 + l_3 + l_4 == l_1 + l_2 + l_3 + l_4:\n        l_1 += 1\n        l_2 += 1\n        l_3 += 1\n        l_4 += 1\n    \n    if l_1 + l_2 + l_3 + l_4 == l_1 + l_2 + l_3 + l_4:\n        l_1 += 1\n        l_2 += 1\n        l_3 += 1\n        l_4 += 1\n    \n    if l_1 + l_2 + l_3 + l_4 == l_1 + l_2 + l_3 + l_4:\n        l_1 += 1\n        l_2 += 1\n        l_3 += 1\n        l_4 += 1\n    \n    if l_1 + l_2 + l_3 + l_4 == l_1 + l_2 + l_3 + l_4:\n        l_1 += 1\n        l_2 += 1\n        l_3 += 1\n        l_4 += 1\n    \n    if l_1 + l_2 + l_3 + l_4 == l_1 + l_2 + l_3 + l_4:\n        l_1 += 1\n        l_2 += 1\n        l_3 += 1\n        l_4 += 1\n    \n    if l_1 + l_2 + l_3 + l_4 == l_1 + l_2 + l_3 + l_4:\n        l_1 += 1\n        l_2 += 1\n        l_3 += 1\n        l_4 += 1\n    \n    if l_1 + l_2 + l_3 + l_4 == l_1 + l_2 + l_3 + l_4:\n        l_1 += 1\n        l_2 += 1\n        l_3 += 1\n        l_4 += 1\n    \n    if l_1 + l_2 + l_3 + l_4 == l_1 + l_2 + l_3 + l_4:\n        l_1 += 1\n        l_2 += 1\n        l_3 += 1\n        l_4 += 1\n    \n    if l_1 + l_2 + l_3 + l_4 == l_1 + l_2 + l_3 + l_4:\n        l_1 += 1\n        l_2 += 1\n        l_3 += 1\n        l_4 += 1\n    \n    if l_1 + l_2 + l_3 + l_4 == l_1 + l_2 + l_3 + l_4:\n        l_1 += 1\n        l_2 += 1\n        l_3 += 1\n        l_4 += 1\n    \n    if l_1 + l_2 + l_3 + l_4 == l_1 + l_2 + l_3 + l_4:\n        l_1 += 1\n        l_2 += 1\n        l_3 += 1\n        l_4 += 1\n    \n    if l_1 + l_2 + l_3 + l_4 == l_1 + l_2 + l_3 + l_4:\n        l_1 += 1\n        l_2 += 1\n        l_3 += 1\n        l_4 += 1\n    \n    if l_1 + l_2 + l_3 + l_4 == l_1 + l_2 + l_3 + l_4:\n        l_1 += 1\n        l_2 += 1\n        l_3 += 1\n        l_4 += 1\n    \n    if l_1 + l_2 + l_3 + l_4 == l_1 + l_2 + l_3 + l_4:\n        l_1 += 1\n        l_2 += 1\n        l_3 += 1\n        l_4 += 1\n    \n    if l_1 + l_2 + l_3 + l_4 == l_1 + l_2 +"
    },
    {
        "number": 4147,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, *A, B, C = [int(i) for i in stdin.split()]\n    l_1, l_2 = [int(i) for i in stdin.split()[1:]]\n    B = B-1\n    l_N = l_1+l_2\n    res = 0\n    temp = l_1\n    \n    def Bamboo():\n        if B < 0:\n            return\n        B -= 1\n        temp *= 10\n        if C < 0:\n            return\n        C -= 1\n        temp *= 10\n        return temp\n    \n    def Extend():\n        if B < 0:\n            return\n        B -= 1\n        l_1 = temp\n        temp = l_2\n        l_2 = temp\n        temp *= 10\n        return temp\n    \n    def Composition():\n        if B < 0:\n            return\n        B -= 1\n        l_1 = temp\n        temp = l_2\n        l_2 = temp\n        return temp\n        \n    def Shortening():\n        if B < 0:\n            return\n        B -= 1\n        l_1 = temp\n        temp = l_2\n        l_2 = temp\n        return temp\n    \n    def Composition_completion():\n        if B < 0:\n            return\n        B -= 1\n        l_1 = temp\n        temp = l_2\n        l_2 = temp\n        return temp\n        \n    def Shortening_completion():\n        if B < 0:\n            return\n        B -= 1\n        l_1 = temp\n        temp = l_2\n        l_2 = temp\n        return temp\n    \n    def bamboo():\n        if B < 0:\n            return\n        B -= 1\n        return l_1+l_2+l_N\n    \n    for i in range(n+1):\n        if B < 0:\n            break\n        res += Bamboo() + Extend() + Composition() + Composition_completion() + Shortening() + Composition_completion() + Composition_completion() + Shortening_completion() + Shortening_completion() + Extend()\n    return str(res)"
    },
    {
        "number": 4147,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B, C = map(int, stdin.split())\n    l_1, l_2, l_3 = map(int, stdin.split())\n    # 1.Extension\n    for i in range(1, N+1):\n        l_i = l_1+l_2+l_3\n        if i % 2 == 0:\n            if l_i >= A:\n                l_i -= B\n        if i % 3 == 0:\n            if l_i >= B:\n                l_i -= C\n    # 2.Shortening\n    if l_1 >= 2*l_2:\n        l_1 -= l_2\n    if l_2 >= 2*l_3:\n        l_2 -= l_3\n    if l_3 >= 2*l_1:\n        l_3 -= l_1\n    if l_1 >= l_2+l_3:\n        l_1 -= l_3\n    if l_2 >= l_3+l_1:\n        l_2 -= l_1\n    if l_3 >= l_1+l_2:\n        l_3 -= l_2\n    if l_1 >= l_2+l_3+l_4:\n        l_1 -= l_3\n    if l_2 >= l_3+l_4+l_5:\n        l_2 -= l_4\n    if l_3 >= l_4+l_5+l_6:\n        l_3 -= l_5\n    if l_1 >= l_2+l_3+l_4+l_5:\n        l_1 -= l_6\n    if l_2 >= l_3+l_4+l_5+l_6:\n        l_2 -= l_6\n    if l_3 >= l_4+l_5+l_6+l_7:\n        l_3 -= l_7\n    if l_1 >= l_2+l_3+l_4+l_5+l_6+l_7:\n        l_1 -= l_7\n    if l_2 >= l_3+l_4+l_5+l_6+l_7+l_8:\n        l_2 -= l_8\n    if l_3 >= l_4+l_5+l_6+l_7+l_8+l_9:\n        l_3 -= l_9\n    if l_1 >= l_2+l_3+l_4+l_5+l_6+l_7+l_8+l_9:\n        l_1 -= l_9\n    if l_2 >= l_3+l_4+l_5+l_6+l_7+l_8+l_9+l_10:\n        l_2 -= l_10\n    if l_3 >= l_4+l_5+l_6+l_7+l_8+l_9+l_10+l_11:\n        l_3 -= l_11\n    if l_1 >= l_2+l_3+l_4+l_5+l_6+l_7+l_8+l_9+l_10+l_11+l_12:\n        l_1 -= l_12\n    if l_2 >= l_3+l_4+l_5+l_6+l_7+l_8+l_9+l_10+l_11+l_12+l_13:\n        l_2 -= l_13\n    if l_3 >= l_4+l_5+l_6+l_7+l_8+l_9+l_10+l_11+l_12+l_13+l_14:\n        l_3 -= l_14\n    if l_1 >= l_2+l_3+l_4+l_5+l_6+l_7+l_8+l_9+l_10+l_11+l_12+l_13+l_14+l_15:\n        l_1 -= l_15\n    if l_2 >= l_3+l_4+l_5+l_6+l_7+l_8+l_9+l_10+l_11+l_12+l_13+l_14+l_15+l_16:\n        l_2 -= l_16\n    if l_3 >= l_4+l_5+l_6+l_7+l_8+l_9+l_10+l_11+l_12+l_13+l_14+l_15+l_16+l_17:\n        l_3 -= l_17\n    if l_1 >= l_2+l_3+l_4+l_5+l_6+l_7+l_8+l_9+l_10+l_11+l_12+l_13+l_14+l_15+l_16+l_17+l_18:\n        l_1 -= l_18\n    if l_2 >= l_3+l_4+l_5+l_6+l_7+l_8+l_9+l_10+l_11+l_12+l_13+l_14+l_15+l_16+l_17+l_18+l_19:\n        l_2 -= l_19\n    if l_3 >= l_4+l_5+l_6+l_7+l_8+l_9+l_10+l_11+l_12+l_13+l_14+l_15+l_16+l_17+l_18+l_19+l_20:\n        l_3 -= l_20\n    if l_1 >= l_2+l_3+l_4+l_5+l_6+l_7+l_8+l_9+l_10+l_11+l_12+l_13+l_14+l_15+l_16+l_17+l_18+l_19+l_20+l_21:\n        l_1 -= l_21\n    if l_2 >= l_3+l_4+l_5+l_6+l_7+l_8+l_9+l_10+l_11+"
    },
    {
        "number": 4147,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    l_1, l_2, l_N = map(int, stdin.split())\n    n = l_1 + l_2 + l_N\n    c = n * 2\n    mp = n + l_N\n    mp = c + mp\n    mp = mp % 1000\n    print(mp)\n    return str(mp)\n"
    },
    {
        "number": 4147,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B, C = map(int, stdin.split())\n    l_1 = int(N * (1/3))\n    l_2 = int(N * (1/3) * 1)\n    l_3 = int(N * (1/3)) * 2\n    l_N = A * B * C\n    bamboos = [l_1, l_2, l_3]\n    res = 0\n    for i in range(len(bamboos)):\n        if bamboos[i] > 0:\n            res += bamboos[i]\n    return str(res)\n\nprint(solution(\"5 100 90 80\"))\n\"\"\"\nimport math\n\ndef"
    },
    {
        "number": 4148,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def shift(c):\n        return (c - 1) % 26\n\n    for _ in range(int(stdin)):\n        S = stdin.strip()\n        N = shift(ord(S[0]) - ord('A'))\n        S = \"\".join(chr(x + N) for x in S)\n        print(S)\n"
    },
    {
        "number": 4148,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n  def shift(s: str, n: int) -> str:\n    return s[n:] + s[:n]\n\n  N = int(stdin[0])\n  S = stdin[1]\n  return shift(S, N)\n"
    },
    {
        "number": 4148,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    answer = []\n    upper = []\n    for char in stdin:\n        if char.isupper():\n            upper.append(char)\n        else:\n            if len(answer) == 0:\n                answer.append(upper)\n            answer[-1].append(char)\n            upper.clear()\n    answer.append(upper)\n    return ''.join(answer[1])\n'''\n\nclass Solution:\n    def shiftingLetters(self, s: str, shift: int) -> str:\n        lowercase_lower = list(s)\n        result = ''\n        for index, letter in enumerate(lowercase_lower):\n            lowercase_lower[index] = str(letter + shift)\n        for letter in lowercase_lower:\n            result += letter\n        return result\n"
    },
    {
        "number": 4148,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def shift(s: str) -> str:\n        n = ord(s[-1]) - ord('A')\n        s = s[:-1]\n        return chr(n+ord('A')) + s\n    \n    def shift_left(s: str) -> str:\n        return s[-1] + shift(s[:-1])\n    \n    def shift_right(s: str) -> str:\n        return shift(s[1:]) + s[0]\n    \n    n = int(stdin.strip())\n    s = str(input())\n    \n    for i in range(n):\n        print(shift(s), end = '')\n    \n    return ''\n\nn = int(input())\ns = input()\nfor i in range(n):\n    print(shift_right(s[i:i+n]), end='')"
    },
    {
        "number": 4148,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4148,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n    pass\n"
    },
    {
        "number": 4148,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def shift(s, n):\n        lst = []\n        while len(s)!= 0:\n            nxt = ord(s[0]) - ord(\"A\")\n            lst.append(chr(nxt + n))\n            s = s[1:]\n        return \"\".join(lst)\n\n    N = int(stdin.strip().split(\" \")[1])\n    S = stdin.strip().split(\" \")[2]\n    ans = \"\"\n    for i in range(0, len(S), N):\n        ans = ans + shift(S[i : i + N], -1) + S[i + N : i + N + N]\n    return ans[::-1]\n    \n\nInput/Output\n[execution time limit] 4 seconds (py3)\n\n[input] integer N\n\nGuaranteed constraints:\n2 <= N <= 26\n\n[input] string S\n\nGuaranteed constraints:\n2 <= |S| <= 10^4\n\n[output] string\n\nSample Input:\n2\nABCXYZ\n\nSample Output:\nCDEZAB\n\nExplanation:\nThe input string is as follows:\nABCXYZ\nA B C\nD E F\nG H I J\nK L M\nN O P\n\nThe shifted string is as follows:\nCDEZAB\nD E F\nG H I J\nK L M\nN O P\n\n[execution time limit] 4 seconds (py3)\n\n[input] integer N\n\nGuaranteed constraints:\n2 <= N <= 10^4\n\n[input] string S\n\nGuaranteed constraints:\n2 <= |S| <= 10^4\n\n[output] string\n\nSample Input:\n2\nABCXYZ\n\nSample Output:\nCDEZAB\n\nExplanation:\nThe input string is as follows:\nABCXYZ\nA B C\nD E F\nG H I J\nK L M\nN O P\n\nThe shifted string is as follows:\nCDEZAB\nD E F\nG H I J\nK L M\nN O P\n\n[execution time limit] 4 seconds (py3)\n\n[input] integer N\n\nGuaranteed constraints:\n2 <= N <= 10^4\n\n[input] string S\n\nGuaranteed constraints:\n2 <= |S| <= 10^4\n\n[output] string\n\nSample Input:\n1\nABCXYZ\n\nSample Output:\nABCXYZ\n\nExplanation:\nThe input string is as follows:\nABCXYZ\nA B C\nD E F\nG H I J\nK L M\n\n[execution time limit] 0 seconds (py3)\n\n[input] integer N\n\nGuaranteed constraints:\n1 <= N <= 10^4\n\n[input] string S\n\nGuaranteed constraints:\n2 <= |S| <= 10^4\n\n[output] string\n\nSample Input:\n1\nABCXYZ\n\nSample Output:\nABCXYZ\n\nExplanation:\nThe input string is as follows:\nABCXYZ\nA B C\nD E F\nG H I J\nK L M\n\n[execution time limit] 0 seconds (py3)\n\n[input] integer N\n\nGuaranteed constraints:\n1 <= N <= 10^4\n\n[input] string S\n\nGuaranteed constraints:\n2 <= |S| <= 10^4\n\n[output] string\n\nSample Input:\n2\nABCXYZ\n\nSample Output:\nABCXYZ\n\nExplanation:\nThe input string is as follows:\nABCXYZ\nA B C\nD E F\nG H I J\nK L M\n\n[execution time limit] 0 seconds (py3)\n\n[input] integer N\n\nGuaranteed constraints:\n1 <= N <= 10^4\n\n[input] string S\n\nGuaranteed constraints:\n2 <= |S| <= 10^4\n\n[output] string\n\nSample Input:\n3\nABCXYZ\nABCXYZ\n\nSample Output:\nABCXYZ\nABCXYZ\nABCXYZ\n\nExplanation:\nThe input string is as follows:\nABCXYZ\nABCXYZ\nABCXYZ\nABCXYZ\nABCXYZ\n\n[execution time limit] 0 seconds (py3)\n\n[input] integer N\n\nGuaranteed constraints:\n2 <= N <= 10^4\n\n[input] string S\n\nGuaranteed constraints:\n3 <= |S| <= 10^4\n\n[output] string\n\nSample Input:\n4\nABCXYZABC\nAB\nACDE\nABC\n\nSample Output:\nABC\nABC\nABC\nABC\nABC\n\n[execution time limit] 0 seconds (py3)\n\n[input] integer N\n\nGuaranteed constraints:\n3 <= N <= 10^4\n\n[input] string S\n\nGuaranteed constraints:\n4 <= |S| <= 10^4\n\n[output] string\n\nSample Input:\n4\nABCXYZABC\nABC\nACDE\nABC\n\nSample Output:\nABC\nABC\nABC\nABC\nABC\nABC\nABC\n\n[execution time limit] 0 seconds (py3)\n\n[input] integer N\n\nGuaranteed constraints:\n4 <= N <= 10^4\n\n[input] string S\n\nGuaranteed constraints:\n4 <= |S| <= 10^4\n\n[output] string\n\nSample Input:\n1\nABCXYZ\n\nSample Output:\nABCXYZ\n\nExplanation:\nThe input string is as follows:\nABCXYZ\nA B C\nD E F\nG H I J\nK L M\n\n[execution time limit] 0 seconds (py3)\n\n[input] integer N\n\nGuaranteed constraints:\n1 <= N <= 10^4\n\n[input] string S\n\nGuaranteed constraints:\n4 <= |S| <= 10^4\n\n[output] string\n\nSample Input:\n2\nABCXYZ\nABC\n\nSample Output:\nABC\nABC\nABC\nABC\nABC\nABC\nABC\nABC\n\n[execution time limit] 0 seconds (py3)\n\n[input] integer N\n\nGuaranteed constraints:\n2 <= N <= 10^4\n\n[input] string S\n\nGuaranteed constraints:\n4 <= |S| <= 10^4\n\n[output] string\n\nSample Input:\n1\nABCXYZABC\nABC\nACDE\nABC\nABC\nABC\nABC\nABC\nABC\nABC\nABC\nABC\nABC\n\n[execution time limit] 0 seconds (py3)\n\n[input] integer N\n\nGuaranteed constraints:\n2 <= N <= 10^4\n\n[input] string S\n\nGuaranteed constraints:\n4 <= |S| <= 10^4\n\n[output] string\n\nSample Input:\n2\nABCXYZABC\nABC\nACDE\nABC\nABC\nABC\nABC\nABC\nABC\nABC\nABC\nABC\nABC\nABC\nABC\nABC\nABC\nABC\nABC\n\n[execution time limit] 0 seconds (py3)\n\n[input] integer N\n\nGuaranteed constraints:\n2 <= N <= 10^4\n\n[input] string S\n\nGuaranteed constraints:\n4 <= |S| <= 10^4\n\n[output] string\n\nSample Input:\n3\nABCXYZABC\nABC\nACDE\nABC\nABC\nABC\nABC\nABC\nABC\nABC\nABC\nABC\nABC\nABC\nABC\nABC\nABC\n\n[execution time limit] 0 seconds (py3)\n\n[input] integer N\n\nGuaranteed constraints:\n2 <= N <= 10^4\n\n[input] string S\n\nGuaranteed constraints:\n4 <= |S| <= 10^4\n\n[output] string\n\nSample Input:\n3\nABCXYZABC\nABC\nACDE\nABC\nABC\nABC\nABC\n"
    },
    {
        "number": 4148,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin[0])\n    S = stdin[1]\n    for i in range(len(S)):\n        tmp = ord(S[i]) - ord('A') + 1\n        S = S.replace(S[i], chr(tmp+N))\n    return S\n\n----------------\n\nTest Cases:\nprint(solution(\"2\"))\nprint(solution(\"ABCXYZ\"))\nprint(solution(\"YYZXYZ\"))\nprint(solution(\"aAa\"))\nprint(solution(\"A\"))\n"
    },
    {
        "number": 4148,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    N = len(stdin)\n    s = stdin[0]\n    answer = []\n    for i in range(1, N):\n        if (s[i] == s[i-1]):\n            answer.append(s[i])\n        else:\n            answer.append(s[i-1])\n            s = s[:i] + answer[-1] + s[i:]\n    \n    print(\"\".join(answer))\n    return \"\".join(answer)\n    \n"
    },
    {
        "number": 4148,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    alphabet = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']\n    N = int(stdin.pop().pop())\n    return \"\".join(alphabet[n-1-i] for i,n in enumerate(reversed(stdin.pop())) if n>=0)\n\n-----Time complexity-----\n - N = 26\n - O(N^2)\n\n------Algorithm-----\n https://leetcode.com/problems/string-to-integer-atoi/discuss/787582/Python-Solution-with-explanation"
    },
    {
        "number": 4149,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    for n in range(2, int(stdin[1])):\n        for i in range(n, 0, -1):\n            for j in range(2, i):\n                if i % j == 0:\n                    break\n            else:\n                a = list(str(i))\n                if a[-1] == '0':\n                    a.append('0')\n                for j in range(2, len(a)):\n                    if a[j]!= '0':\n                        break\n                else:\n                    a = ''.join(a)\n                    a = [int(a)] + [int(x) for x in a]\n                    break\n                break\n    return str(a[-1])\n"
    },
    {
        "number": 4149,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a = map(int, stdin.split())\n    if not 0 < n < 10**5:\n        print('')\n        return ''\n    def get_prime(p: int):\n        n = 0\n        while True:\n            n += 1\n            if n == p:\n                break\n        return n\n    a.sort(key=get_prime)\n    b = sorted(b, reverse=True)\n    a = sorted(a, key=lambda x: x*x % n)\n    numbers = []\n    while a:\n        n = a.pop(0)\n        numbers.append(n)\n        for i in b:\n            if i < n:\n                a.append(i)\n    print(*numbers)\n    return ''"
    },
    {
        "number": 4149,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    while b:\n        b.sort()\n        for i in b:\n            a.append(i)\n    a = sorted(a, reverse=True)\n    return''.join(map(str, a))\n"
    },
    {
        "number": 4149,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    l = stdin.split(\" \")\n    n = int(l[0])\n    b = [int(i) for i in l[1].split(\",\")]\n\n    for i in range(n):\n        temp = []\n        temp2 = 0\n        for j in range(len(b)):\n            if b[j] % 2 == 0:\n                temp.append(j+1)\n                temp2 += b[j]\n            else:\n                temp.append(j)\n                temp2 += b[j]/2\n        b.append(temp2)\n    \n    b.sort()\n    print(b[-1])\n    return b[-1]\n\nn = int(input())\na = []\nb = []\n\nfor i in range(n):\n    a.append(int(input()))\n\nfor i in range(n):\n    b.append(a[i]/2)\n    \nprint(b)\n\nsolution(stdin)\n"
    },
    {
        "number": 4149,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip().split('\\n')[0])\n    a = [int(i) for i in stdin.strip().split('\\n')[1::2]]\n    b = []\n    #print(len(a), len(b), a, b)\n    for i in range(len(a)):\n        while a[i] % 2!= 0:\n            a[i] += 1\n        while a[i] > 9:\n            a[i] = a[i] - 10\n        b.append(a[i])\n    a.sort()\n    b.sort()\n    ans = \"\"\n    #print(len(a), len(b))\n    for i in range(len(a)):\n        #print(a[i],b[i],len(b),len(a)-i)\n        if a[i] == b[i]:\n            continue\n        if a[i] % 2!= 0:\n            if len(b) > i:\n                ans += str(b[i]) + \" \"\n            else:\n                ans += str(b[i])\n        else:\n            ans += str(a[i]) + \" \"\n    return ans\n"
    },
    {
        "number": 4149,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip().split()[0])\n    a = list(map(int, stdin.strip().split()))\n    b = list(map(int, stdin.strip().split()))\n    solution = []\n    possible_solutions = []\n    for i in range(2, n + 1):\n        possible_solutions.append(i)\n    possible_solutions.sort()\n    for i in range(n, -1, -1):\n        if possible_solutions[i] in b:\n            for j in range(len(possible_solutions)):\n                if possible_solutions[j] == possible_solutions[i]:\n                    if j == len(possible_solutions) - 1:\n                        solution.append(possible_solutions[i])\n                        possible_solutions.pop(i)\n                        break\n                    possible_solutions.pop(i)\n    print(' '.join(map(str, solution)))\n"
    },
    {
        "number": 4149,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    b = [int(s) for s in stdin.split()]\n    a = b[::-1]\n    b_1, b_2 = 0, 1\n    a_1, a_2 = 0, 1\n    for i in range(n):\n        if b[i] % 2 == 1:\n            a[b_2] = b[i]\n            b_2 = b_2 + 1\n        else:\n            a[b_1] = a[b_2]\n            b_1 = b_1 + 1\n    for i in a:\n        print(i)\n    return ''.join(map(str, a))\n\ndef"
    },
    {
        "number": 4149,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    b = [int(i) for i in str(a)[::-1]]\n    for i in range(len(b)):\n        for j in range(i, len(b)):\n            if b[i] % b[j]!= 0:\n                if b[j] > b[i]:\n                    b[j], b[i] = b[i], b[j]\n    print(sum(b))\n\nsolution(stdin)\n"
    },
    {
        "number": 4149,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n    #input\n    n = int(stdin.strip())\n    a = [int(i) for i in input().strip().split()]\n    b = []\n    for i in a:\n        while i % 2 == 0:\n            b.append(i)\n            i //= 2\n    b.sort()\n    \n    #output\n    result = ''\n    for i in b:\n        result += str(i)\n    print(result)\n    return result\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4149,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n\n    def gen(a, b):\n        while True:\n            p = next(p for p in (a, b) if p > 0)\n            if p >= n:\n                return n\n            if a % p == 0 and b % p == 0:\n                break\n        \n        return (a // p * p) + n\n    \n    def solution(a, b):\n        answer = []\n        while a > 0:\n            answer.append(gen(a, b))\n            a -= gen(a, b)\n        \n        return ''.join(str(i) for i in sorted(answer))\n    \n    return solution(n, [int(i) for i in stdin.split() if i!= \"\"])\n"
    },
    {
        "number": 4150,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    result = '{'\n    if n!= 1:\n        for i in range(n):\n            result += str(k) + '-' + str(i+1) + ','\n    result = result[:-1]\n    for i in range(k):\n        result += str(i+1) + '-' + str(i+1+n) + ','\n    result = result[:-1]\n    return result.rstrip(',')"
    },
    {
        "number": 4150,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    answer = ''\n    if len(a) <= k:\n        answer = '11111'\n    else:\n        left = k\n        right = n-k\n        for i in range(m):\n            if i!= 0:\n                left -= a[i]\n                right += a[i]\n        for i in range(k, left-k):\n            if i!= right:\n                answer += '11'+str(i-k)\n        for i in range(left, right):\n            answer += '1'+str(i-k)\n    return answer"
    },
    {
        "number": 4150,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a_i = list(map(int, input().split()))\n    k = list(map(int, input().split()))\n    answer = ''\n    for i in range(n):\n        # print(f\"\\t{i+1} {stdin[i]}\")\n        # print(a_i[i])\n        # print(k[i])\n        answer += str(a_i[i]%k[i])\n        answer += str(a_i[i]//k[i])\n        # print(f\"\\t{answer}\")\n        answer += str(a_i[i]//k[i])\n        answer += str(a_i[i]%k[i])\n    return answer\n"
    },
    {
        "number": 4150,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    global k, p, a1, a2, a3\n    global n\n    n = int(stdin.strip())\n    k = n // 10\n    p = n % 10\n    a1 = list(map(int, stdin.strip().split()))\n    a2 = []\n    for i in range(n):\n        if a1[i] < a1[i+1]:\n            a2.append(a1[i])\n        else:\n            a2.append(a1[i+1])\n    a3 = list(set(a2))\n    a1 = a1[:k]\n    a2 = a2[:k]\n    a3 = a3[:k]\n    a1.sort()\n    a2.sort()\n    a3.sort()\n    answer = ''\n    for i in range(n):\n        if a1[i] in a2:\n            answer += '2'\n            a2.remove(a1[i])\n        if a1[i] in a3:\n            answer += '1'\n            a3.remove(a1[i])\n        if a2[i] in a3:\n            answer += '3'\n            a3.remove(a2[i])\n    return answer\n\nprint(solution(\"1 1 3 2 2\"))\nprint(solution(\"4 3 1\"))\n"
    },
    {
        "number": 4150,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    t = 1\n    s = 1\n    while n:\n        if (k + t) % n == 0:\n            print(t)\n            return\n        t += 1\n        k -= 1\n    return\n"
    },
    {
        "number": 4150,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    students = list(map(int, stdin.split()))\n    n, k = len(students), len(students)\n    lst = []\n    lst.append(students[0])\n    for i in range(1, n):\n        if lst[-1] >= students[i]:\n            lst.append(students[i])\n        else:\n            lst.append(lst[-1])\n            lst.append(students[i])\n    print(*lst)\n    return ''\n\ndef"
    },
    {
        "number": 4150,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [], []\n    cnt = 0\n    for i in stdin:\n        if i == \"1\":\n            a.append(cnt)\n            cnt += 1\n        elif i == \"2\":\n            b.append(cnt)\n            cnt += 1\n        else:\n            a.append(cnt)\n            b.append(cnt)\n            cnt += 1\n    a.append(cnt)\n    b.append(cnt)\n    print(b)\n    print(a)\n    print(len(a))\n    print(len(b))\n    return \"\".join(str(i) for i in sorted(a, reverse=True)) + \"\".join(str(i) for i in sorted(b, reverse=True))\n\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4150,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = map(int, stdin.split())\n    m_ = set(map(int, stdin.split()))\n\n    positions = sorted(m_ - m)\n    positions.sort()\n\n    if len(positions) < k:\n        return '0'\n\n    else:\n        first_team = set(positions[:k])\n        second_team = set(positions[k:])\n\n        for i in first_team:\n            if i in second_team:\n                return str(i)\n\n        for i in second_team:\n            if i not in first_team:\n                return str(i)"
    },
    {
        "number": 4150,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n,k=map(int,stdin.split())\n    stdout=''\n    for i in range(n):\n        stdout+=str(sorted(map(int,list(map(int,input().split())))))+'\\n'\n    return stdout\n\n\nprint(solution(\"5 2\"))\nprint(solution(\"5 1\"))\nprint(solution(\"7 1\"))\n"
    },
    {
        "number": 4150,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n = int(stdin[0])\n    k = int(stdin[1])\n    a = [int(i) for i in stdin[2]]\n    for i in range(n):\n        a.remove(min(a))\n    print(a)\n    result = ''\n    for i in range(n):\n        result += str(a[i])\n    return result\n    \n"
    },
    {
        "number": 4151,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(x) for x in stdin.split()]\n    b = [0] * len(a)\n    for i in range(len(a)):\n        b[i] = b[i] + b[i+1] - a[i]\n    return str(len(set(b)))"
    },
    {
        "number": 4151,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n    l = len(a)\n    mod = 10 ** 9 + 7\n    ans = 0\n    for i in range(l - 1):\n        for j in range(i + 1, l):\n            if a[i]!= a[j]:\n                break\n            elif a[i]!= a[j] and a[i] < a[j]:\n                ans += 1\n    print(ans)\n    return str(ans % mod)"
    },
    {
        "number": 4151,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    \n    a = [0] * n\n    \n    for i in range(1, n + 1):\n        a[i - 1] = i\n        \n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] > a[j]:\n                a[i], a[j] = a[j], a[i]\n    \n    return str(sum(a))\n"
    },
    {
        "number": 4151,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip().split()[1])\n    arr = [int(i) for i in stdin.strip().split()[0]]\n    arr.sort()\n    count = 0\n    i = 0\n    while i < n - 1:\n        if arr[i]!= arr[i + 1]:\n            count += 1\n        i += 1\n    return str(count % 998244353)\n\n\n-----Examples-----\nInput\n3\n1 2 1 2 3\n\nOutput\n2\n\nInput\n4\n1 3 3 7\n\nOutput\n4\ndef"
    },
    {
        "number": 4151,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = [int(i) for i in stdin.strip().split()]\n    nums = [i + 1 for i in range(n)]\n    def count(a, nums):\n        total = 0\n        for num in nums:\n            total += (a.index(num) == a.index(num + 1))\n        return total\n    return str(count(nums, a))\n\n-----Constraints-----\n0 \u2264 n \u2264 10^5\n-10^8 \u2264 a[i] \u2264 10^8\n\n-----Submissions-----\n190ms\n36ms\n\nclass Solution:\n    def count_monotonic(self, a: List[int]) -> int:\n        n = len(a)\n        a_set = set(a)\n        count = 0\n        for i in range(n - 1):\n            if a[i] >= a[i + 1]:\n                count += 1\n        return count\n\n\n-----Test Cases-----\nInput\n5\n1 2 1 2 3\n\nOutput\n2\n\nInput\n2\n100 1\n\nOutput\n2\n\nInput\n4\n1 3 3 7\n\nOutput\n4\ndef"
    },
    {
        "number": 4151,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    return str(pow(pow(n, 2) + pow(n, 2) + pow(n, 2) + pow(n, 2) + pow(n, 2), 998244353))[2:-2]\n\n'a = [1, 2, 1, 2, 3]'\n'''\n"
    },
    {
        "number": 4151,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    arr = list(map(int, stdin.split()))\n    n = len(arr)\n    count = 0\n    \n    for i in range(n-1):\n        for j in range(i+1, n):\n            if arr[i] <= arr[j]:\n                count += 1\n    return str(count % 2)\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4151,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [0] * n\n    b = [0] * n\n    for i in range(1, n):\n        a[i] = int(stdin[i])\n    for i in range(1, n - 1):\n        b[i] = b[i + 1] + a[i]\n    b[n - 1] = b[n - 1] - a[n - 1]\n    return str(int(b[n - 1] % 1000000))"
    },
    {
        "number": 4151,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    a = [0] + list(map(int, a))\n    a = list(map(lambda x: x if x!= 0 else 1, a))\n    \n    dp = [a[1]]\n    for i in range(2, n):\n        dp.append(max(dp[-2] + dp[-1], dp[-1]))\n    \n    return str(len(dp))\n"
    },
    {
        "number": 4151,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, a = [int(i) for i in stdin.split()]\n    b = [0] * n\n    for _ in range(n):\n        b[a - 1] += 1\n        b[a + 1] += 1\n    print(' '.join(map(str, b)))\n    return '\\n'.join(map(str, b))\n\nprint(solution(stdin))"
    },
    {
        "number": 4152,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a_list = list(map(int, stdin.strip().split()))\n    answer = [len(set(a_list))]\n\n    for i in range(n):\n        for j in range(n):\n            if a_list[i] == a_list[j]:\n                continue\n            if len(set(a_list[i:j+1])) == 2:\n                answer.append(2)\n                break\n            if len(set(a_list[i:j+1])) == 3:\n                answer.append(3)\n                break\n    return''.join(map(str, answer))\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4152,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = [int(i) for i in stdin.split()[1]]\n    a.sort(reverse=True)\n    answer = a[n//2]\n    return str(answer)\n"
    },
    {
        "number": 4152,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a_list = list(map(int, stdin.split()))\n    answer = []\n    if n == 0:\n        return 0\n    for i in range(n):\n        a_list.remove(a_list[i])\n        if len(a_list) == 1:\n            answer.append(1)\n        else:\n            if a_list[i] == 1:\n                answer.append(2)\n            else:\n                answer.append(a_list[i] * a_list[i+1])\n    return min(answer)\n    \n\n\"\"\"\ndef"
    },
    {
        "number": 4152,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.split()))\n    if n == 1:\n        return 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if a[i] + a[j] == 2147483647:\n                return 0\n    return 1\n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 4152,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    pass\n\n\n\n-----Constraints-----\n\n1 <= n <= 10^3\n\n1 <= stdin.length <= 10^5\n\n1 <= a_i <= 10^9\n\n-------Solu\u00e7\u00e3o---------\n\n1\n\n1\n\n2\n\n1\n\n2\n\n2\n2\n3\n4\n\n1\n\n4\n1\n2\n1\n3\n2\n1\n\n2\n\n2\n3\n1\n2\n2\n\n1\n\n2\n2\n3\n1\n3\n3\n\n2\n\n3\n1\n3\n4\n3\n\n2\n\n3\n1\n3\n4\n2\n\n1\n\n3\n2\n1\n2\n3\n\n2\n\n1\n\n4\n\n1\n1\n1\n\n2\n1\n1\n\n3\n2\n3\n1\n1\n1\n3\n\n2\n1\n2\n1\n1\n2\n\n1\n\n3\n1\n2\n2\n\n1\n1\n3\n\n1\n1\n1\n1\n3\n\n1\n1\n1\n1\n1\n3\n\n1\n1\n1\n3\n3\n\n2\n\n2\n1\n3\n\n2\n1\n1\n3\n\n2\n3\n2\n\n2\n1\n1\n2\n\n1\n3\n2\n\n3\n1\n2\n3\n\n3\n1\n1\n2\n\n1\n1\n1\n3\n\n3\n1\n1\n1\n3\n\n1\n1\n1\n1\n2\n\n2\n1\n1\n3\n\n1\n1\n2\n1\n3\n\n1\n1\n1\n1\n1\n1\n\n1\n1\n2\n1\n1\n\n1\n1\n3\n1\n\n1\n1\n\n1\n1\n3\n\n2\n\n2\n2\n2\n2\n\n3\n1\n3\n2\n1\n1\n1\n3\n1\n\n2\n2\n1\n1\n3\n\n2\n1\n1\n1\n3\n\n1\n1\n3\n2\n\n1\n1\n1\n2\n\n1\n1\n1\n1\n3\n\n2\n1\n1\n1\n3\n\n2\n1\n1\n1\n1\n\n3\n3\n\n3\n1\n1\n3\n\n2\n1\n1\n1\n1\n1\n\n1\n1\n\n1\n1\n2\n\n1\n1\n1\n1\n\n3\n1\n2\n1\n1\n2\n\n1\n1\n1\n1\n\n2\n3\n\n2\n2\n2\n\n3\n1\n1\n3\n\n3\n1\n1\n1\n1\n3\n\n1\n1\n1\n1\n\n2\n3\n\n2\n1\n1\n1\n1\n\n1\n3\n\n1\n1\n1\n\n3\n3\n\n3\n1\n1\n2\n\n1\n1\n3\n\n2\n1\n1\n1\n\n1\n1\n1\n\n1\n3\n\n1\n1\n1\n1\n1\n\n1\n1\n\n3\n\n3\n\n1\n1\n2\n\n1\n1\n3\n\n1\n1\n1\n2\n\n1\n1\n1\n1\n\n3\n1\n1\n3\n\n1\n1\n1\n1\n\n3\n1\n2\n\n1\n1\n1\n\n3\n1\n1\n1\n2\n\n2\n2\n2\n\n3\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n3\n1\n1\n1\n1\n1\n\n1\n1\n1\n2\n\n1\n1\n1\n1\n1\n1\n\n1\n1\n1\n1\n1\n1\n\n3\n1\n1\n3\n\n1\n1\n1\n1\n\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n2\n2\n1\n1\n\n2\n1\n1\n1\n1\n\n3\n1\n1\n1\n\n1\n1\n3\n\n1\n1\n1\n1\n1\n\n1\n1\n1\n1\n3\n\n1\n1\n1\n3\n\n3\n\n1\n1\n1\n1\n\n1\n1\n1\n3\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n1\n\n1\n1\n1\n1\n1\n\n1\n1\n1\n1\n1\n\n1\n1\n1\n1\n1\n\n1\n1\n1\n1\n\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1"
    },
    {
        "number": 4152,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return [len(set(reversed(range(int(i), int(i) + 2, 2)))) for i in stdin.strip().split()]\n\nIf there is a large set, we must delete all elements in it, and only delete the last element.\n\nInput\n8\n4 5 6 7 1 2 3\n\nOutput\n2\n\nInput\n6\n1 2 3 4 5 6 7\n\nOutput\n2\n\nInput\n5\n1 2 3 4 5 6\n\nOutput\n1\n\n-----Explanation-----\n\nIn this example, the sequence $[4, 7, 1, 4, 9]$ is good, because $a_1=5$, $a_2=5$, $a_3=5$ and $a_4=5$ are considered as one pair of good elements.\n\nIn the second example, we can delete the last element, because a pair of elements of sequence $[4, 7, 1, 4, 9]$ cannot be considered as a pair of good elements, because $a_2=5$, $a_3=5$ and $a_4=5$ are considered as one pair of good elements.\n\nIn the third example, we can delete the second last element, because a pair of elements of sequence $[4, 7, 1, 4, 9]$ cannot be considered as a pair of good elements, because $a_1=5$, $a_2=5$, $a_3=5$ and $a_4=5$ are considered as one pair of good elements.\n\n\"\"\""
    },
    {
        "number": 4152,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a_list = list(map(int,stdin.strip().split()))\n    \n    for i in range(n-2, 0, -1):\n        if a_list[i] + a_list[i+1] == a_list[i+2]:\n            del a_list[i]\n            a_list[i] = a_list[i+1]\n            a_list[i+1] = 0\n        else:\n            break\n    \n    a = len(a_list)\n    \n    return str(a)\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4152,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n <= 120000:\n        a = list(map(int, stdin.split()))\n        a.sort()\n        a = [0] + a\n        a[-1] = n - sum(a)\n        a[0] = 0\n        # a[-1] = n-sum(a)\n        return str(min(a))\n    else:\n        return '0'"
    },
    {
        "number": 4152,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a_n = list(map(int,stdin.strip().split()))\n    a_n.sort(reverse = True)\n    n -= len(a_n)\n    answer = 2**n\n    return str(answer)\n\n\n-----Constraints-----\n\n1 <= n <= 10^6\n1 <= a_i <= 10^9\n\ninput: a_1, a_2, a_3, a_4\n\noutput: \"0\"\n\n\ninput: a_1, a_2, a_3, a_4, a_5\n\noutput: \"1\"\n\ninput: a_1, a_2, a_3, a_4, a_5, a_6\n\noutput: \"2\"\n\ninput: a_1, a_2, a_3, a_4, a_5, a_6, a_7\n\noutput: \"3\"\n\ninput: a_1, a_2, a_3, a_4, a_5, a_6, a_7, a_8\n\noutput: \"4\"\n\ninput: a_1, a_2, a_3, a_4, a_5, a_6, a_7, a_8, a_9\n\noutput: \"5\"\n\ninput: a_1, a_2, a_3, a_4, a_5, a_6, a_7, a_8, a_9, a_10\n\noutput: \"6\"\n\n\ninput: a_1, a_2, a_3, a_4, a_5, a_6, a_7, a_8, a_9, a_10, a_11\n\noutput: \"7\"\n\ninput: a_1, a_2, a_3, a_4, a_5, a_6, a_7, a_8, a_9, a_10, a_11, a_12\n\noutput: \"8\"\n\ninput: a_1, a_2, a_3, a_4, a_5, a_6, a_7, a_8, a_9, a_10, a_11, a_12, a_13\n\noutput: \"9\"\n\ninput: a_1, a_2, a_3, a_4, a_5, a_6, a_7, a_8, a_9, a_10, a_11, a_12, a_13, a_14\n\noutput: \"10\"\n\ninput: a_1, a_2, a_3, a_4, a_5, a_6, a_7, a_8, a_9, a_10, a_11, a_12, a_13, a_14, a_15\n\noutput: \"11\"\n\ninput: a_1, a_2, a_3, a_4, a_5, a_6, a_7, a_8, a_9, a_10, a_11, a_12, a_13, a_14, a_15, a_16\n\noutput: \"12\"\n\ninput: a_1, a_2, a_3, a_4, a_5, a_6, a_7, a_8, a_9, a_10, a_11, a_12, a_13, a_14, a_15, a_16, a_17\n\noutput: \"13\"\n\ninput: a_1, a_2, a_3, a_4, a_5, a_6, a_7, a_8, a_9, a_10, a_11, a_12, a_13, a_14, a_15, a_16, a_17, a_18\n\noutput: \"14\"\n\ninput: a_1, a_2, a_3, a_4, a_5, a_6, a_7, a_8, a_9, a_10, a_11, a_12, a_13, a_14, a_15, a_16, a_17, a_18, a_19\n\noutput: \"15\"\n\ninput: a_1, a_2, a_3, a_4, a_5, a_6, a_7, a_8, a_9, a_10, a_11, a_12, a_13, a_14, a_15, a_16, a_17, a_18, a_19, a_20\n\noutput: \"16\"\n\ninput: a_1, a_2, a_3, a_4, a_5, a_6, a_7, a_8, a_9, a_10, a_11, a_12, a_13, a_14, a_15, a_16, a_17, a_18, a_19, a_20, a_21\n\noutput: \"17\"\n\ninput: a_1, a_2, a_3, a_4, a_5, a_6, a_7, a_8, a_9, a_10, a_11, a_12, a_13, a_14, a_15, a_16, a_17, a_18, a_19, a_20, a_21, a_22\n\noutput: \"18\"\n\ninput: a_1, a_2, a_3, a_4, a_5, a_6, a_7, a_8, a_9, a_10, a_11, a_12, a_13, a_14, a_15, a_16, a_17, a_18, a_19, a_20, a_21, a_22, a_23\n\noutput: \"19\"\n\ninput: a_1, a_2, a_3, a_4, a_"
    },
    {
        "number": 4152,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, a = [int(i) for i in stdin.split()]\n    n -= 1\n    a = [int(i) for i in a]\n    b = []\n    for i in range(n):\n        a[i] = a[i]**2\n        b.append(a[i])\n    b.sort()\n    a = ''.join([str(i) for i in b])\n    return a\n\nprint(solution(input()))\n"
    },
    {
        "number": 4153,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    cubes_stacked = [0] * N\n    \n    for _ in range(N):\n        chars = stdin.split()\n        for i in range(len(chars)-2):\n            cubes_stacked[i] = chars[i] + chars[i+1]\n        \n    result = 0\n    for i in range(N):\n        cubes_stacked[i] = int(cubes_stacked[i])\n        result = max(result, cubes_stacked[i])\n        \n    return str(result)\n"
    },
    {
        "number": 4153,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    cubes_stack = [0 for _ in range(N)]\n    for i in range(N):\n        cubes_stack[i] = int(stdin[i])\n\n    n = 0\n    for i in range(N):\n        if cubes_stack[i] == 0:\n            n += 1\n            cubes_stack[i] = 1\n            for j in range(i):\n                cubes_stack[j] = 0\n    print(n)\n"
    },
    {
        "number": 4153,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, C = map(int, stdin.split())\n    S = stdin.split()\n    ans = 0\n    for i in range(N):\n        for j in range(i, N, 2):\n            if S[i] == 0 and S[j] == 1:\n                S[i], S[j] = S[j], S[i]\n                ans += 1\n    return str(ans)\n\nTime Complexity: O(N)\nSpace Complexity: O(N)"
    },
    {
        "number": 4153,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    s = list(map(str, stdin.strip().split()))\n    answer = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if s[i] == s[j] and s[i] == 0:\n                answer += 1\n                s[i], s[j] = 0, 1\n            elif s[i] == 1 and s[j] == 0:\n                answer += 1\n                s[i], s[j] = 0, 1\n    return str(answer)\n\n\"\"\"\nclass Solution:\n    def removeCubes(self, S: str) -> int:\n        length = len(S)\n        cubes = []\n        for i in range(length):\n            if S[i] == 0:\n                cubes.append(i)\n        count = 0\n        for i in range(length - len(cubes) + 1):\n            if S[i : i + len(cubes)] == cubes:\n                count += 1\n        return count\n\"\"\"\n"
    },
    {
        "number": 4153,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, *cubes = [int(c) for c in stdin.split()]\n    print(sum(reduce(lambda x, y : x * y, [1, *(cubes[i] for i in range(1, len(cubes)))])))\n    return '\\n'.join([''.join(['1' if c == 0 else '0' for c in cubes[:i]]) + ''.join(['1' if c == 0 else '0' for c in cubes[i:]]) for i in range(1, len(cubes) + 1)])\n"
    },
    {
        "number": 4153,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    cubes = [0] * (N + 2)\n    if N >= 2:\n        cubes[0] = 1\n        cubes[1] = 1\n        cubes[2] = 0\n        cubes[3] = 0\n        for i in range(3, N + 1):\n            cubes[i] = 0\n            cubes[i - 1] = 1\n    for i in range(N - 2, -1, -1):\n        cubes[i] = 0\n    return str(cubes[0]) + str(cubes[1]) + str(cubes[2]) + str(cubes[3])\n\nTest Cases:\nInput:\n3\n\nOutput:\n'4'\nExplanation:\nRed cubes are removed as blue cubes are removed.\nBlue cubes are removed as red cubes are removed.\nThen, Blue cubes is removed, and after removal, red cubes are removed.\n\nInput:\n2\n\nOutput:\n'4'\nExplanation:\nRed cubes are removed as Blue cubes are removed.\nBlue cubes are removed as red cubes are removed.\nFinally, Blue cubes are removed as Red cubes are removed.\n\nInput:\n1\n\nOutput:\n'4'\nExplanation:\nRed cubes are removed as Blue cubes are removed.\nBlue cubes are removed as red cubes are removed.\nBlue cubes are removed as Red cubes are removed.\nFinally, Blue cubes are removed as Red cubes are removed.\n\nInput:\n0\n\nOutput:\n'0'\nExplanation:\nThere are no cubes.\n\nInput:\n10\n\nOutput:\n'4'\nExplanation:\nRed cubes are removed as Blue cubes are removed.\nBlue cubes are removed as red cubes are removed.\nBlue cubes are removed as Red cubes are removed.\nBlue cubes are removed as Red cubes are removed.\nBlue cubes are removed as Red cubes are removed.\nBlue cubes are removed as Red cubes are removed.\nBlue cubes are removed as Red cubes are removed.\nBlue cubes are removed as Red cubes are removed.\nBlue cubes are removed as Red cubes are removed.\nBlue cubes are removed as Red cubes are removed.\nBlue cubes are removed as Red cubes are removed.\nBlue cubes are removed as Red cubes are removed.\nBlue cubes are removed as Red cubes are removed.\nBlue cubes are removed as Red cubes are removed.\nBlue cubes are removed as Red cubes are removed.\nBlue cubes are removed as Red cubes are removed.\nBlue cubes are removed as Red cubes are removed.\nBlue cubes are removed as Red cubes are removed.\nBlue cubes are removed as Red cubes are removed.\nBlue cubes are removed as Red cubes are removed.\nBlue cubes are removed as Red cubes are removed.\nBlue cubes are removed as Red cubes are removed.\nBlue cubes are removed as Red cubes are removed.\nBlue cubes are removed as Red cubes are removed.\nBlue cubes are removed as Red cubes are removed.\nBlue cubes are removed as Red cubes are removed.\nBlue cubes are removed as Red cubes are removed.\nBlue cubes are removed as Red cubes are removed.\nBlue cubes are removed as Red cubes are removed.\nBlue cubes are removed as Red cubes are removed.\nBlue cubes are removed as Red cubes are removed.\nBlue cubes are removed as Red cubes are removed.\nBlue cubes are removed as Red cubes are removed.\nBlue cubes are removed as Red cubes are removed.\nBlue cubes are removed as Red cubes are removed.\nBlue cubes are removed as Red cubes are removed.\nBlue cubes are removed as Red cubes are removed.\nBlue cubes are removed as Red cubes are removed.\nBlue cubes are removed as Red cubes are removed.\nBlue cubes are removed as Red cubes are removed.\nBlue cubes are removed as Red cubes are removed.\nBlue cubes are removed as Red cubes are removed.\nBlue cubes are removed as Red cubes are removed.\nBlue cubes are removed as Red cubes are removed.\nBlue cubes are removed as Red cubes are removed.\nBlue cubes are removed as Red cubes are removed.\nBlue cubes are removed as Red cubes are removed.\nBlue cubes are removed as Red cubes are removed.\nBlue cubes are removed as Red cubes are removed.\nBlue cubes are removed as Red cubes are removed.\nBlue cubes are removed as Red cubes are removed.\nBlue cubes are removed as Red cubes are removed.\nBlue cubes are removed as Red cubes are removed.\nBlue cubes are removed as Red cubes are removed.\nBlue cubes are removed as Red cubes are removed.\nBlue cubes are removed as Red cubes are removed.\nBlue cubes are removed as Red cubes are removed.\nBlue cubes are removed as Red cubes are removed.\nBlue cubes are removed as Red cubes are removed.\nBlue cubes are removed as Red cubes are removed.\nBlue cubes are removed as Red cubes are removed.\nBlue cubes are removed as Red cubes are removed.\nBlue cubes are removed as Red cubes are removed.\nBlue cubes are removed as Red cubes are removed.\nBlue cubes are removed as Red cubes are removed.\nBlue cubes are removed as Red cubes are removed.\nBlue cubes are removed as Red cubes are removed.\nBlue cubes are removed as Red cubes are removed.\nBlue cubes are removed as Red cubes are removed.\nBlue cubes are removed as Red cubes are removed.\nBlue cubes are removed as Red cubes are removed.\nBlue cubes are removed as Red cubes are removed.\nBlue cubes are removed as Red cubes are removed.\nBlue cubes are removed as Red cubes are removed.\nBlue cubes are removed as Red cubes are removed.\nBlue cubes are removed as Red cubes are removed.\nBlue cubes are removed as Red cubes are removed.\nBlue cubes are removed as Red cubes are removed.\nBlue cubes are removed as Red cubes are removed.\nBlue cubes are removed as Red cubes are removed.\nBlue cubes are removed as Red cubes are removed.\nBlue cubes are removed as Red cubes are removed.\nBlue cubes are removed as Red cubes are removed.\nBlue cubes are removed as Red cubes are removed.\nBlue cubes are removed as Red cubes are removed.\nBlue cubes are removed as Red cubes are removed.\nBlue cubes are removed as Red cubes are removed.\nBlue cubes are removed as Red cubes are removed.\nBlue cubes are removed as Red cubes are removed.\nBlue cubes are removed as Red cubes are removed.\nBlue cubes are removed as Red cubes are removed.\nBlue cubes are removed as Red cubes are removed.\nBlue cubes are removed as Red cubes are removed.\nBlue cubes are removed as Red cubes are removed.\nBlue cubes are removed as Red cubes are removed.\nBlue cubes are removed as Red cubes are removed.\nBlue cubes are removed as Red cubes are removed.\nBlue cubes are removed as Red cubes are removed.\nBlue cubes are removed as Red cubes are removed.\nBlue cubes are removed as Red cubes are removed.\nBlue cubes are removed as Red cubes are removed.\nBlue cubes are removed as Red cubes are removed.\nBlue cubes are removed as Red cubes are removed.\nBlue cubes are removed as Red cubes are removed.\nBlue cubes are removed as Red cubes are removed.\nBlue cubes are removed as Red cubes are removed.\nBlue cubes are removed as Red cubes are removed.\nBlue cubes are removed as Red cubes are removed.\nBlue cubes are removed as Red cubes are removed.\nBlue cubes are removed as Red cubes are removed.\nBlue cubes are removed as Red cubes are removed.\nBlue cubes are removed as Red cubes are removed.\nBlue cubes are removed as Red cubes are removed.\nBlue cubes are removed as Red cubes are removed.\nBlue cubes are removed as Red cubes are removed.\nBlue cubes are removed as Red cubes are removed.\nBlue cubes are removed as Red cubes are removed.\nBlue cubes are removed as Red cubes are removed.\nBlue cubes are removed as Red cubes are removed.\nBlue cubes are removed as Red cubes are removed.\nBlue cubes are removed as Red cubes are removed.\nBlue cubes are removed as Red cubes are removed.\nBlue cubes are removed as Red cubes are removed.\nBlue cubes are removed as Red cubes are removed.\nBlue cubes are removed as Red cubes are removed.\nBlue cubes are removed as Red cubes are removed.\nBlue cubes are removed as Red cubes are removed.\nBlue"
    },
    {
        "number": 4153,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    cube_num = [[0, 0], [0, 1], [1, 0], [1, 1]]\n    answer = 0\n    \n    def remove_cubes(cube):\n        if cube[1] == 0:\n            cube[1] = 1\n            cube[0] = cube[0] - 1\n        else:\n            cube[0] = cube[0] + 1\n            cube[1] = 0\n        return cube\n    \n    def remove_cubes_3(cube):\n        if cube[1] == 0:\n            cube[1] = 1\n            cube[0] = cube[0] - 1\n        else:\n            cube[0] = cube[0] + 1\n            cube[1] = 0\n        return cube\n    \n    for _ in range(n):\n        string = stdin.strip()\n        for i, char in enumerate(string):\n            cube = cube_num[i]\n            if char == '0':\n                cube[0] = cube[0] - 1\n            else:\n                cube[1] = cube[1] + 1\n            answer = max(answer, len(remove_cubes_3(cube)))\n            cube = remove_cubes(cube)\n            cube = remove_cubes(cube)\n            cube = remove_cubes(cube)\n        cube_num = remove_cubes_3(cube_num)\n    return answer"
    },
    {
        "number": 4153,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    arr = list(map(int,stdin.strip().split()))\n    # print(arr)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n    # arr.pop(0)\n"
    },
    {
        "number": 4153,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip().strip(\"\\n\"))\n    s = \"\".join(input().strip().split())\n    # print(s)\n    cubes = [0, 1, 2, 3]\n    for i in range(n):\n        if s[i] == \"1\":\n            cubes[0] += 1\n        else:\n            cubes[1] += 1\n    \n    for i in range(n):\n        if s[i] == \"0\":\n            cubes[2] += 1\n        else:\n            cubes[3] += 1\n    \n    # print(cubes)\n    if cubes[2] == 1 or cubes[3] == 1:\n        return 1\n    elif cubes[0] == 1 or cubes[1] == 1:\n        return 2\n    else:\n        return 3\n\nprint(solution(\"0011\"))\n"
    },
    {
        "number": 4153,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    lst = [0, 1]\n    while N!= 0:\n        if N == 1:\n            return \"4\"\n        if len(lst) == 0:\n            lst.append(0)\n            lst.append(1)\n            lst.append(0)\n            N = 0\n        elif lst[-3] == 1:\n            lst.append(0)\n            lst.append(0)\n            lst.append(0)\n            N = 0\n        else:\n            lst.append(0)\n            lst.append(1)\n            lst.append(1)\n            N -= 1\n    return \"4\"\n  \nPrint the maximum number of cubes that can be removed.\n\"\"\"\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        N = int(stdin)\n        lst = [0, 1]\n        while N!= 0:\n            if N == 1:\n                return \"4\"\n            if len(lst) == 0:\n                lst.append(0)\n                lst.append(1)\n                lst.append(0)\n                N = 0\n            elif lst[-3] == 1:\n                lst.append(0)\n                lst.append(0)\n                lst.append(0)\n                N -= 1\n            else:\n                lst.append(0)\n                lst.append(1)\n                lst.append(1)\n                N -= 1\n        return \"4\"\n"
    },
    {
        "number": 4154,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n  N, M = map(int, stdin.split())\n  L_1, R_1 = map(int, stdin.split())\n  L_2, R_2 = map(int, stdin.split())\n  L_3, R_3 = map(int, stdin.split())\n  L_4, R_4 = map(int, stdin.split())\n  L_5, R_5 = map(int, stdin.split())\n  L_6, R_6 = map(int, stdin.split())\n  L_7, R_7 = map(int, stdin.split())\n  L_8, R_8 = map(int, stdin.split())\n  L_9, R_9 = map(int, stdin.split())\n  L_10, R_10 = map(int, stdin.split())\n  L_11, R_11 = map(int, stdin.split())\n  L_12, R_12 = map(int, stdin.split())\n  L_13, R_13 = map(int, stdin.split())\n  L_14, R_14 = map(int, stdin.split())\n  L_15, R_15 = map(int, stdin.split())\n  L_16, R_16 = map(int, stdin.split())\n  L_17, R_17 = map(int, stdin.split())\n  L_18, R_18 = map(int, stdin.split())\n  L_19, R_19 = map(int, stdin.split())\n  L_20, R_20 = map(int, stdin.split())\n  L_21, R_21 = map(int, stdin.split())\n  L_22, R_22 = map(int, stdin.split())\n  L_23, R_23 = map(int, stdin.split())\n  L_24, R_24 = map(int, stdin.split())\n  L_25, R_25 = map(int, stdin.split())\n  L_26, R_26 = map(int, stdin.split())\n  L_27, R_27 = map(int, stdin.split())\n  L_28, R_28 = map(int, stdin.split())\n  L_29, R_29 = map(int, stdin.split())\n  L_30, R_30 = map(int, stdin.split())\n  L_31, R_31 = map(int, stdin.split())\n  L_32, R_32 = map(int, stdin.split())\n  L_33, R_33 = map(int, stdin.split())\n  L_34, R_34 = map(int, stdin.split())\n  L_35, R_35 = map(int, stdin.split())\n  L_36, R_36 = map(int, stdin.split())\n  L_37, R_37 = map(int, stdin.split())\n  L_38, R_38 = map(int, stdin.split())\n  L_39, R_39 = map(int, stdin.split())\n  L_40, R_40 = map(int, stdin.split())\n  L_41, R_41 = map(int, stdin.split())\n  L_42, R_42 = map(int, stdin.split())\n  L_43, R_43 = map(int, stdin.split())\n  L_44, R_44 = map(int, stdin.split())\n  L_45, R_45 = map(int, stdin.split())\n  L_46, R_46 = map(int, stdin.split())\n  L_47, R_47 = map(int, stdin.split())\n  L_48, R_48 = map(int, stdin.split())\n  L_49, R_49 = map(int, stdin.split())\n  L_50, R_50 = map(int, stdin.split())\n  L_51, R_51 = map(int, stdin.split())\n  L_52, R_52 = map(int, stdin.split())\n  L_53, R_53 = map(int, stdin.split())\n  L_54, R_54 = map(int, stdin.split())\n  L_55, R_55 = map(int, stdin.split())\n  L_56, R_56 = map(int, stdin.split())\n  L_57, R_57 = map(int, stdin.split())\n  L_58, R_58 = map(int, stdin.split())\n  L_59, R_59 = map(int, stdin.split())\n  L_60, R_60 = map(int, stdin.split())\n  L_61, R_61 = map(int, stdin.split())\n  L_62, R_62 = map(int, stdin.split())\n  L_63, R_63 = map(int, stdin.split())\n  L_64, R_64 = map(int, stdin.split())\n  L_65, R_65 = map(int, stdin.split())\n  L_66, R_66 = map(int, stdin.split())\n  L_67, R_67 = map(int, stdin.split())\n  L_68, R_68 = map(int, stdin.split())\n  L_69, R_69 = map(int, stdin.split())\n  L_70, R_70 = map(int, stdin.split())\n  L_71, R_71 = map(int, stdin.split())\n  L_72, R_72 = map(int, stdin.split())\n  L_73, R_73 = map(int, stdin.split())\n  L_74, R_74 = map(int, stdin.split())\n  L_75, R_75 = map(int, stdin.split())\n  L_76, R_76 = map(int, stdin.split())\n  L_77, R_77 = map(int, stdin.split())\n  L_78, R_78 = map(int, stdin.split())\n  L_79, R_79 = map(int, stdin.split())\n  L_80, R_80 = map(int, stdin.split())\n  L_81, R_81 = map(int, stdin.split())\n  L_82, R_82 = map(int, stdin.split())\n  L_83, R_83 = map(int, stdin.split())\n  L_84, R_84 = map(int, stdin.split())\n  L_85, R_85 = map(int, stdin.split())\n  L_86, R_86 = map(int, stdin.split())\n  L_87, R_87 = map(int, stdin.split())\n  L_88, R_88 = map(int, stdin.split())\n  L_89, R_89 = map(int, stdin.split())\n  L_90, R_90 = map(int, stdin.split())\n  L_91, R_91"
    },
    {
        "number": 4154,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str(sum(map(int, list(map(lambda s: list(map(int, s.split())))))))\n"
    },
    {
        "number": 4154,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(i) for i in stdin.split()]\n    card = sorted([int(i) for i in stdin.split()])\n    # print(card)\n    def check(id_list):\n        if len(id_list) % 2 == 1:\n            return False\n        tmp_list = sorted([(i, card[i+1]) for i in range(len(id_list)-1)], key=lambda x:x[1])\n        # print(tmp_list)\n        tmp_list = sorted([tmp_list[-1][0], tmp_list[-2][0], tmp_list[-1][1]], key=lambda x: x[1])\n        if tmp_list[0] == tmp_list[1]:\n            return True\n        else:\n            return False\n    # print(check(card))\n    # print(check(card[::2]))\n    # print(check(card[1::2]))\n    def solve(id_list):\n        if len(id_list) % 2 == 1:\n            return id_list[-1]\n        tmp_list = sorted([(i, card[i+1]) for i in range(len(id_list)-1)], key=lambda x:x[1])\n        tmp_list = sorted([tmp_list[-1][0], tmp_list[-2][0], tmp_list[-1][1]], key=lambda x: x[1])\n        if tmp_list[0] == tmp_list[1]:\n            return id_list[-1]\n        else:\n            return id_list[id_list[::2].index(tmp_list[1])]\n    answer = 0\n    for i in range(len(card)):\n        if check(card[i*2:i*2+2]):\n            answer += 1\n    return answer"
    },
    {
        "number": 4154,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    L = list(map(int, stdin.split()))\n    R = list(map(int, stdin.split()))\n    \n    result = []\n    \n    for i in range(len(L)):\n        for j in range(i+1, len(R)):\n            if L[i] - R[j] == M:\n                if L[i]!= R[j]:\n                    result.append(L[i])\n                if L[i] + R[j]!= N:\n                    result.append(R[j])\n    return str(len(result))"
    },
    {
        "number": 4154,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    L, R = map(int, stdin.split())\n    \n    id_cards = []\n    for i in range(1, N+1):\n        for j in range(1, M+1):\n            id_cards.append((i,j))\n            if i == L and j == R:\n                break\n    \n    passes = 0\n    for i in range(1, N+1):\n        for j in range(1, M+1):\n            if id_cards[i][0] == j:\n                passes += 1\n    \n    print(passes)\nsolution
    },
    {
        "number": 4154,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    L_1, R_1 = map(int, stdin.split())\n    L_2, R_2 = map(int, stdin.split())\n    \n    gates = [L_1, R_1, L_2, R_2]\n    \n    def check(gates):\n        gate = gates[0]\n        l_i, r_i = gates[1], gates[2]\n        l_i += 1\n        r_i += 1\n        l_i = l_i % N\n        r_i = r_i % N\n        if l_i == r_i:\n            return 'NO'\n        elif l_i == l_i+N:\n            return 'YES'\n        elif r_i == r_i+N:\n            return 'YES'\n        else:\n            return 'NO'\n    \n    solution = 0\n    \n    for i in range(M):\n        solution += check(gates)\n    \n    print(solution)"
    },
    {
        "number": 4154,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    L_1, R_1 = map(int, stdin.split())\n    L_2, R_2 = map(int, stdin.split())\n    L_3, R_3 = map(int, stdin.split())\n    L_4, R_4 = map(int, stdin.split())\n    L_5, R_5 = map(int, stdin.split())\n    L_6, R_6 = map(int, stdin.split())\n    L_7, R_7 = map(int, stdin.split())\n    L_8, R_8 = map(int, stdin.split())\n    L_9, R_9 = map(int, stdin.split())\n    L_10, R_10 = map(int, stdin.split())\n    L_11, R_11 = map(int, stdin.split())\n    L_12, R_12 = map(int, stdin.split())\n    L_13, R_13 = map(int, stdin.split())\n    L_14, R_14 = map(int, stdin.split())\n    L_15, R_15 = map(int, stdin.split())\n    L_16, R_16 = map(int, stdin.split())\n    L_17, R_17 = map(int, stdin.split())\n    L_18, R_18 = map(int, stdin.split())\n    L_19, R_19 = map(int, stdin.split())\n    L_20, R_20 = map(int, stdin.split())\n    L_21, R_21 = map(int, stdin.split())\n    L_22, R_22 = map(int, stdin.split())\n    L_23, R_23 = map(int, stdin.split())\n    L_24, R_24 = map(int, stdin.split())\n    L_25, R_25 = map(int, stdin.split())\n    L_26, R_26 = map(int, stdin.split())\n    L_27, R_27 = map(int, stdin.split())\n    L_28, R_28 = map(int, stdin.split())\n    L_29, R_29 = map(int, stdin.split())\n    L_30, R_30 = map(int, stdin.split())\n    L_31, R_31 = map(int, stdin.split())\n    L_32, R_32 = map(int, stdin.split())\n    L_33, R_33 = map(int, stdin.split())\n    L_34, R_34 = map(int, stdin.split())\n    L_35, R_35 = map(int, stdin.split())\n    L_36, R_36 = map(int, stdin.split())\n    L_37, R_37 = map(int, stdin.split())\n    L_38, R_38 = map(int, stdin.split())\n    L_39, R_39 = map(int, stdin.split())\n    L_40, R_40 = map(int, stdin.split())\n    L_41, R_41 = map(int, stdin.split())\n    L_42, R_42 = map(int, stdin.split())\n    L_43, R_43 = map(int, stdin.split())\n    L_44, R_44 = map(int, stdin.split())\n    L_45, R_45 = map(int, stdin.split())\n    L_46, R_46 = map(int, stdin.split())\n    L_47, R_47 = map(int, stdin.split())\n    L_48, R_48 = map(int, stdin.split())\n    L_49, R_49 = map(int, stdin.split())\n    L_50, R_50 = map(int, stdin.split())\n    L_51, R_51 = map(int, stdin.split())\n    L_52, R_52 = map(int, stdin.split())\n    L_53, R_53 = map(int, stdin.split())\n    L_54, R_54 = map(int, stdin.split())\n    L_55, R_55 = map(int, stdin.split())\n    L_56, R_56 = map(int, stdin.split())\n    L_57, R_57 = map(int, stdin.split())\n    L_58, R_58 = map(int, stdin.split())\n    L_59, R_59 = map(int, stdin.split())\n    L_60, R_60 = map(int, stdin.split())\n    L_61, R_61 = map(int, stdin.split())\n    L_62, R_62 = map(int, stdin.split())\n    L_63, R_63 = map(int, stdin.split())\n    L_64, R_64 = map(int, stdin.split())\n    L_65, R_65 = map(int, stdin.split())\n    L_66, R_66 = map(int, stdin.split())\n    L_67, R_67 = map(int, stdin.split())\n    L_68, R_68 = map(int, stdin.split())\n    L_69, R_69 = map(int, stdin.split())\n    L_70, R_70 = map(int, stdin.split())\n    L_71, R_71 = map(int, stdin.split())\n    L_72, R_72 = map(int, stdin.split())\n    L_73, R_73 = map(int, stdin.split())\n    L_74, R_74 = map(int, stdin.split())\n    L_75, R_75 = map(int, stdin.split())\n    L_76, R_76 = map(int, stdin.split())\n    L_77, R_77 = map(int, stdin.split())\n    L_78, R_78 = map(int, stdin.split())\n    L_79, R_79 = map(int, stdin.split())\n    L_80, R_80 = map(int, stdin.split())\n    L_81, R_81 = map(int, stdin.split())\n    L_82, R_82 = map(int, stdin.split())\n    L_83, R_83 = map(int, stdin.split())\n    L_84, R_84 = map(int, stdin.split())\n    L_85, R_85 = map(int, stdin.split())\n    L_86, R_86 = map(int, stdin.split())\n    L_87, R_87 = map(int, stdin.split())\n    L_88, R_88 = map(int, stdin.split())\n    L_89, R_89 = map(int, stdin.split())\n    L_90, R_90 = map(int, stdin.split())\n    L_91, R_91"
    },
    {
        "number": 4154,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    L_1, R_1 = map(int, stdin.split())\n    L_2, R_2 = map(int, stdin.split())\n    L_3, R_3 = map(int, stdin.split())\n    L_4, R_4 = map(int, stdin.split())\n    L_M, R_M = map(int, stdin.split())\n    L_N, R_N = map(int, stdin.split())\n    gate = (L_1 + L_2 + L_3 + L_4 + R_1 + R_2 + R_3 + R_4 + R_M + L_M) % 1000000007\n    if gate == L_1 or gate == L_2 or gate == L_3 or gate == L_4 or gate == R_1 or gate == R_2 or gate == R_3 or gate == R_4 or gate == R_M or gate == R_N:\n        print(gate)\n    else:\n        print(0)"
    },
    {
        "number": 4154,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, M = list(map(int, stdin.split()))\n    L = list(map(int, stdin.split()))\n    R = list(map(int, stdin.split()))\n    for i in range(N):\n        for j in range(i+1, N):\n            if L[i] - L[j] > M or R[i] - R[j] > M:\n                continue\n            if L[i] + R[i] > M or R[j] + L[j] > M:\n                continue\n            L[i] -= R[i]\n            R[j] -= L[j]\n            L[j] += R[i]\n            R[i] += L[j]\n            print(''.join([str(L[i]), str(R[i]), str(L[j]), str(R[j])]))\n    return ''.join([str(L[i]), str(R[i]) for i in range(N)])"
    },
    {
        "number": 4154,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    L_1, R_1, L_2, R_2 = map(int, stdin.split())\n    Gates = []\n    for _ in range(N):\n        Gates.append([int(x) for x in stdin.split()[1:]])\n    \n    id_cards = [Gates[i][0] - 1 for i in range(N)]\n    gate_cards = [Gates[i][1] - 1 for i in range(N)]\n    for i in range(M):\n        for j in range(i + 1, M):\n            id_cards[j] -= 1\n            id_cards[i] += 1\n            gate_cards[j] -= 1\n            gate_cards[i] += 1\n    \n    count = 0\n    for id_card in id_cards:\n        if id_card < 0:\n            count += 1\n    print(count)\n    return str(count)\n\nprint(solution(input()))\n\nRuntime: 68 ms, faster than 6.38% of Python3 online submissions for ID card allow us to pass all the gates alone.\nMemory Usage: 16.6 MB, less than 15.93% of Python3 online submissions for ID card allow us to pass all the gates alone.\n\"\"\"\n\n\"\"\"\nRuntime: 40 ms, faster than 6.17% of Python3 online submissions for ID card allow us to pass all the gates alone.\nMemory Usage: 16.8 MB, less than 15.34% of Python3 online submissions for ID card allow us to pass all the gates alone.\n\"\"\"\nimport math\n\nclass Solution:\n    def solution(self, N: int, M: int, L_1: int, R_1: int, L_2: int, R_2: int) -> str:\n        if L_1 + R_1 == N:\n            return \"1\"\n\n        if L_2 + R_2 == N:\n            return \"2\"\n\n        gate_count = math.ceil((R_1 - L_1 + 1)/(R_2 - L_2 + 1))\n        return f\"{gate_count}\"\n\n\nclass Solution:\n    def solution(self, N: int, M: int, L_1: int, R_1: int, L_2: int, R_2: int) -> str:\n        if L_1 + R_1 == N:\n            return \"1\"\n\n        if L_2 + R_2 == N:\n            return \"2\"\n\n        gate_count = math.ceil((R_1 - L_1 + 1)/(R_2 - L_2 + 1))\n        return f\"{gate_count}\"\n\ndef"
    },
    {
        "number": 4155,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin)%2!=0:\n        return \"No\"\n    N,h = list(map(int,stdin.split()))\n    h = sorted(list(map(int,h)))\n    h = [0] + h[:-1]\n    answer = 0\n    for i in range(N):\n        answer += 2*(h[i+1]-h[i])\n    return str(answer)"
    },
    {
        "number": 4155,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split('\\n')[0])\n    h = [int(i) for i in stdin.split('\\n')[1].split(' ')]\n    l,r = 0,0\n    answer = ''\n    \n    for k in range(1,N+1):\n        if l+1 < len(h):\n            answer += str(h[l])\n            answer += str(h[r])\n            answer +=''\n            \n            l,r = l+1,r+1\n        elif r+1 < len(h):\n            answer += str(h[l])\n            answer +=''\n            answer += str(h[r])\n            answer +=''\n            \n            r,l = r+1,l+1\n        else:\n            l,r = 0,0\n            answer +=''\n            \n    return answer.rstrip()\n"
    },
    {
        "number": 4155,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    h = int(stdin.split()[1])\n    for _ in range(n):\n        h += int(stdin.split()[2])\n    return str(h)\n"
    },
    {
        "number": 4155,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n,l,r=map(int,stdin.split())\n    return str(n-l+r-1)\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4155,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n  \n  heights = []\n  for height in stdin.splitlines():\n    heights.append(int(height))\n  n = len(heights)\n  heights = [0] + heights + [max(heights)]\n\n  def watering_memo(idx, h):\n    if idx == n:\n      return 0\n    if h == 0:\n      return 1\n    if h < heights[idx]:\n      return 0\n    h -= heights[idx]\n    return (watering_memo(idx+1, h) +\n            watering_memo(idx+1, h-heights[idx]) +\n            watering_memo(idx, h))\n\n  return str(watering_memo(0, heights[0]))"
    },
    {
        "number": 4155,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n    def water(l,r):\n        if l < r:\n            return 0\n        if r - l <= 3:\n            return r - l\n        if r - l > 3:\n            return 0\n        mid = (l + r) // 2\n        if mid == 0 or mid == 1:\n            return 0\n        \n        return water(l,mid) + water(mid + 1, r)\n        \n    return str(water(1,N))\n\"\"\"\n\ndef"
    },
    {
        "number": 4155,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N=int(stdin.split()[0])\n    h=list(map(int,stdin.split()[1:]))\n    def watering(h,l,r):\n        def min_watering(l,r):\n            return l if l < r else (r+1 if l > r else l)\n        return min(h[l:r+1],key=min_watering)\n    answer = watering(h,1,N)\n    return answer\n\n'''\nN=int(input())\nh=list(map(int,input().split()))\nh[0]=1\nh[1]=2\nh[2]=3\nwatering=lambda h,l,r:h[l:r+1] if l<r else (r+1 if l>r else l)\nprint(sum(watering(h,1,N)))\n'''"
    },
    {
        "number": 4155,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    h = [int(x) for x in stdin.split()]\n    l = 0\n    r = len(h) - 1\n    answer = 0\n    while l < r:\n        print(l,r)\n        if h[l] < h[r]:\n            answer += h[l]\n            l += 1\n        else:\n            answer += h[r]\n            r -= 1\n    print(answer)\n    return str(answer)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4155,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n,*h = map(int,stdin.split())\n    h = list(map(int,h))\n    def watering(h_i):\n        new_h = []\n        for i in range(h_i,h_i+n):\n            new_h.append(h[i])\n        new_h.sort()\n        return new_h\n    answer = 0\n    for i in range(1,n+1):\n        answer += watering(i)\n    return str(answer)\n"
    },
    {
        "number": 4155,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    heights = list(map(int, stdin.split()[1:]))\n    heights.sort()\n    num_watering = 0\n    for i in range(n-1):\n        watering = 0\n        l = 0\n        r = len(heights)-1\n        while l < r:\n            if heights[l] < heights[r]:\n                l += 1\n            else:\n                r -= 1\n            watering += 1\n        num_watering += watering\n    return str(num_watering)\n\n------------------------------------------------------------------------------------------------------------------------------------------------\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n10\n"
    },
    {
        "number": 4156,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def convert(t):\n        if t.isdigit():\n            return int(t)\n        if t == \"0\" or t == \"1\":\n            return \"0\"\n        if t == \"2\" or t == \"3\":\n            return \"1\"\n        if t == \"4\":\n            return \"2\"\n        if t == \"5\":\n            return \"3\"\n        if t == \"6\":\n            return \"4\"\n        if t == \"7\":\n            return \"5\"\n        if t == \"8\":\n            return \"6\"\n        if t == \"9\":\n            return \"7\"\n\n    def convert(t):\n        if t.isdigit():\n            return int(t)\n        if t == \"0\" or t == \"1\":\n            return \"0\"\n        if t == \"2\" or t == \"3\":\n            return \"1\"\n        if t == \"4\" or t == \"5\":\n            return \"2\"\n        if t == \"6\" or t == \"7\":\n            return \"3\"\n        if t == \"8\" or t == \"9\":\n            return \"4\"\n        if t == \"5\":\n            return \"5\"\n        if t == \"6\":\n            return \"6\"\n        if t == \"7\":\n            return \"7\"\n\n    n = int(stdin.strip())\n    w = int(stdin.strip().replace('-', ''))\n    a = [convert(a) for a in stdin.split()]\n    if n >= 1 and w >= 1:\n        print(n)\n    elif n >= 1 and w < 1:\n        print(0)\n    elif n < 1 and w < 1:\n        print(0)\n    elif n < 1 and w < 1:\n        print(0)\n    elif n < 1 and w >= 1:\n        print(n)\n    elif w >= n >= 1 and n <= w:\n        print(n-w)\n    else:\n        print(0)\n\n\n\n------------------\n"
    },
    {
        "number": 4156,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, w = map(int, stdin.split())\n    num_a = w - 1\n    a_i = [0] * num_a\n    \n    for line in stdin:\n        a_i = [0] + a_i\n        a_i[int(line)] += 1\n        \n        if a_i[1:].count(1) == num_a:\n            return str(a_i.count(1) - 1)\n        if a_i[0] == 1:\n            return str(1)\n        \n    return str(num_a - 1)\n\ndef"
    },
    {
        "number": 4156,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, w = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    if a[0] == 0:\n        return 0\n\n    def is_valid(n, w):\n        return (n - 1) % w == 0 and (n + 1) % w == 0\n\n    ans = 0\n    if is_valid(n, w):\n        return ans\n    else:\n        for i in range(n):\n            ans += is_valid(n - 1, w)\n            ans += is_valid(n + 1, w)\n        return ans\n\n\n\nTests\n-----\n\n>>> solution(\"4 10\")\n4\n>>> solution(\"1 1\")\n0\n>>> solution(\"2 4\")\n0\n>>> solution(\"2 2\")\n0\n>>> solution(\"3 4\")\n0\n>>> solution(\"1 1\")\n1\n>>> solution(\"2 1\")\n1\n>>> solution(\"1 1\")\n1\n>>> solution(\"2 1\")\n2\n>>> solution(\"1 1\")\n2\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1\")\n0\n>>> solution(\"1 1"
    },
    {
        "number": 4156,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, w = map(int, stdin.split())\n    a = []\n    for i in range(n):\n        a.append(int(stdin[i]))\n    a.sort()\n    b = []\n    for i in range(n):\n        if w > a[i]:\n            b.append(a[i]-w)\n        else:\n            b.append(w)\n    b.sort()\n    c = 0\n    for i in range(n):\n        if a[i] in b:\n            c += 1\n    print(c)\n    return \"0\"\n\nprint(solution(\"2 4 1 2\"))\n"
    },
    {
        "number": 4156,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, w = map(int, stdin.split())\n    a = []\n    for i in range(n):\n        a.append(int(stdin[i].strip()))\n    a.sort()\n    max_l = a[-1] - a[0]\n    for i in range(n - 2, -1, -1):\n        if a[i] < max_l:\n            max_l = a[i]\n    answer = 0\n    for i in range(len(a)):\n        answer += a[i] * (max_l - a[i])\n        if answer > w:\n            break\n    if answer > w:\n        answer = w\n    print(answer)\n    return answer\n\n\n-----Constraints-----\n1 <= n <= 100\n-10^6 <= w <= 10^6\n\nTime Limit: 30 seconds\n\nExample:\n\nInput:\n3 5\n2 1 -3\n\nOutput:\n3\n\nExplanation:\n\nThe bus stops are numbered from 1 to 10, so the bus stops with capacity $w$ can be the only possible ways.\n\nIf there are no passengers, the bus stops cannot be the only possible ways.\n\nExample 2:\n\nInput:\n4 10\n2 4 1 2\n\nOutput:\n4\n\nExplanation:\n\nThe bus stops are numbered from 1 to 4, so the bus stops with capacity $w$ can be the only possible ways.\n\nIf there are no passengers, the bus stops cannot be the only possible ways.\n\nExample 3:\n\nInput:\n4 10\n1 2\n1 3\n2 4\n\nOutput:\n0\n\n\n-----Constraints-----\n\n1 <= n <= 10^6\n-10^6 <= w <= 10^6\n\nTime Limit: 30 seconds\n\nExample:\n\nInput:\n3 4\n2 1 -3\n\nOutput:\n2\n\nExplanation:\n\nThe bus stops are numbered from 1 to 3, so the bus stops with capacity $w$ can be the only possible ways.\n\nIf there are no passengers, the bus stops cannot be the only possible ways.\n\nExample 2:\n\nInput:\n2 4\n1 2\n1 3\n\nOutput:\n2\n\nExplanation:\n\nThe bus stops are numbered from 1 to 4, so the bus stops with capacity $w$ can be the only possible ways.\n\nIf there are no passengers, the bus stops cannot be the only possible ways.\n\nExample 3:\n\nInput:\n3 4\n2 1 -3\n2 1\n1 3\n\nOutput:\n1\n\nExplanation:\n\nThe bus stops are numbered from 1 to 3, so the bus stops with capacity $w$ can be the only possible ways.\n\nIf there are no passengers, the bus stops cannot be the only possible ways.\n\nExample 4:\n\nInput:\n2 4\n1 1\n1 4\n\nOutput:\n1\n\nExplanation:\n\nThe bus stops are numbered from 1 to 4, so the bus stops with capacity $w$ can be the only possible ways.\n\nIf there are no passengers, the bus stops cannot be the only possible ways.\n\nExample 5:\n\nInput:\n3 4\n1 1\n1 2\n1 4\n\nOutput:\n0\n\nExplanation:\n\nThe bus stops are numbered from 1 to 3, so the bus stops with capacity $w$ can be the only possible ways.\n\nIf there are no passengers, the bus stops cannot be the only possible ways.\n\nExample 6:\n\nInput:\n2 4\n1 3\n1 4\n\nOutput:\n1\n\nExplanation:\n\nThe bus stops are numbered from 1 to 4, so the bus stops with capacity $w$ can be the only possible ways.\n\nIf there are no passengers, the bus stops cannot be the only possible ways.\n\nExample 7:\n\nInput:\n1 1\n1 3\n1 4\n\nOutput:\n0\n\n\n-----Constraints-----\n1 <= n <= 10^6\n-10^6 <= w <= 10^6\n\nTime Limit: 30 seconds\n\nExample:\n\nInput:\n3 4\n2 1 -3\n2 1\n1 3\n\nOutput:\n0\n\nExplanation:\n\nThe bus stops are numbered from 1 to 4, so the bus stops with capacity $w$ can be the only possible ways.\n\nIf there are no passengers, the bus stops cannot be the only possible ways.\n\nThe initial bus stops are $1$ and $3$, thus there are no possible ways.\n\nExample 2:\n\nInput:\n4 10\n2 1 -3\n2 1\n1 3\n\nOutput:\n2\n\nExplanation:\n\nThe bus stops are numbered from 1 to 4, so the bus stops with capacity $w$ can be the only possible ways.\n\nIf there are no passengers, the bus stops cannot be the only possible ways.\n\nThe initial bus stops are $1$ and $3$, thus there are no possible ways.\n\nThe initial bus stops are $1$ and $4$, thus there are no possible ways.\n\nExample 3:\n\nInput:\n3 4\n2 1 -3\n2 1\n1 3\n\nOutput:\n1\n\nExplanation:\n\nThe bus stops are numbered from 1 to 4, so the bus stops with capacity $w$ can be the only possible ways.\n\nIf there are no passengers, the bus stops cannot be the only possible ways.\n\nThe initial bus stops are $1$ and $3$, thus there are no possible ways.\n\nThe initial bus stops are $1$ and $4$, thus there are no possible ways.\n\nThe initial bus stops are $1$ and $3$, thus there are no possible ways.\n\nExample 4:\n\nInput:\n2 4\n1 1\n1 4\n\nOutput:\n1\n\nExplanation:\n\nThe bus stops are numbered from 1 to 4, so the bus stops with capacity $w$ can be the only possible ways.\n\nIf there are no passengers, the bus stops cannot be the only possible ways.\n\nThe initial bus stops are $1$ and $4$, thus there are no possible ways.\n\nThe initial bus stops are $1$ and $3$, thus there are no possible ways.\n\nThe initial bus stops are $1$ and $4$, thus there are no possible ways.\n\nThe initial bus stops are $1$ and $4$, thus there are no possible ways.\n\nExample 5:\n\nInput:\n1 1\n1 1\n1 4\n"
    },
    {
        "number": 4156,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, w = map(int, stdin.split())\n    if n!= w:\n        return 0\n    \n    a_1, a_2, a_3, a_4 = map(int, stdin.split())\n    a = [a_1, a_2, a_3, a_4]\n    \n    count = 0\n    for i in range(n):\n        if a[i] <= w:\n            count += 1\n    \n    return count\n\n-----Advanced-----\nInput\n3 5\n2 1 -3\n\nOutput\n3\n\nInput\n2 4\n-1 1\n\nOutput\n2\n\nInput\n4 10\n2 4 1 2\n\nOutput\n2\n\n\n\n-----Implementation-----\n\nHere, a single bus is at index $i$, there are $n$ number of passengers in $i$, and $w$ buses in $i$-stops.\n\nWe start from bus stop $i$, with $i$ being the start and $i$ being the last stop of the bus.\n\nFor bus stop $i$, if there are $a_1, a_2, \\dots, a_n$ in $i$-stops, the sum of the passengers in $i$-stops is $a_i$. So the bus gets to the $i$-stops and then $a_i$ gets to the $i$-stops.\n\nFinally, we multiply the sum by $w$ and add $a_1, a_2, \\dots, a_n$ to the sum.\n\nFor example, $a_i = $a_i$ if there is $a_1, a_2, \\dots, a_n$ in the bus, $a_i = $a_i$ if there is $a_i = 1$, $a_1, a_2, \\dots, a_n$ in the bus, and $a_i = $a_i$ if there is $a_i = 2$, $a_1, a_2, \\dots, a_n$ in the bus, and $a_i = $a_i$ if there is $a_i = 3$.\n\nSo, $a_i = $a_i$ if there is $a_i = 1$, $a_1, a_2, \\dots, a_n$ in the bus, $a_i = $a_i$ if there is $a_i = 2$, $a_1, a_2, \\dots, a_n$ in the bus, and $a_i = $a_i$ if there is $a_i = 3$.\n\nThus, the system would have the sequence $a_1, a_2, \\dots, a_n$ where $a_i = $a_i$ if there is $a_i = 1$, $a_1, a_2, \\dots, a_n$ in the bus, and $a_i = $a_i$ if there is $a_i = 2$, $a_1, a_2, \\dots, a_n$ in the bus, and $a_i = $a_i$ if there is $a_i = 3$.\n\nSimilarly, for $i = 1, 2, 3,..., n$, $a_i = $a_i$ if there is $a_i = 1$, $a_1, a_2, \\dots, a_n$ in the bus, $a_i = $a_i$ if there is $a_i = 2$, $a_1, a_2, \\dots, a_n$ in the bus, and $a_i = $a_i$ if there is $a_i = 3$, $a_1, a_2, \\dots, a_n$ in the bus, and $a_i = $a_i$.\n\nSo, the system would have the sequence $a_1, a_2, \\dots, a_n$ where $a_i = $a_i$ if there is $a_i = 1$, $a_1, a_2, \\dots, a_n$ in the bus, and $a_i = $a_i$ if there is $a_i = 2$, $a_1, a_2, \\dots, a_n$ in the bus, and $a_i = $a_i$ if there is $a_i = 3$.\n\n\nExample 1:\nInput: n = 3, w = 4\nOutput: 4\nExplanation:\nThe system starts with the buses $i$-stops. There are $n$ people, and $w$ buses.\nThe buses are numbered $i$ and $i$-stops, so you start by bus stop $i$, which has $n$ passengers.\nAfter $i$-stops, $a_i$ = $a_i$ if there is $a_i = 1$.\nAfter $i$-stops, $a_i$ = $a_i$ if there is $a_i = 2$.\nAfter $i$-stops, $a_i$ = $a_i$ if there is $a_i = 3$.\nAfter $i$-stops, $a_i$ = $a_i$ if there is $a_i = 4$.\nSo, $a_i$ = $a_i$ if there is $a_i = 1$, $a_1, a_2, \\dots, a_n$ in the bus, $a_i = $a_i$ if there is $a_i = 2$, $a_1, a_2, \\dots, a_n$ in the bus, and $a_i = $a_i$ if there is $a_i = 3$.\n\nExample 2:\nInput: n = 3, w = -1\nOutput: 0\nExplanation:\nThe system starts with the buses $i$-stops. There are $n$ people, and $w$ buses.\nThe buses are numbered $i$ and $i$-stops, so you start by bus stop $i$, which has $n$ passengers.\nAfter $i$-stops, $a_i$ = $a_i$ if there is $a_i = 1$.\nAfter $i$-stops, $a_i$ = $a_i$ if there is $a_i = 2$.\nAfter $"
    },
    {
        "number": 4156,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4156,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, w = map(int, stdin.strip().split())\n    a_list = stdin.strip().split()\n    a_list = list(map(int, a_list))\n\n    count = 0\n    for a in a_list:\n        if a_list.index(a) + 1 == w:\n            count += 1\n    if count >= 1:\n        print(count)\n    else:\n        print(0)\n\n\nprint(solution(\"5 0\"))\nprint(solution(\"1 2 3 4\"))\n"
    },
    {
        "number": 4156,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\ndef"
    },
    {
        "number": 4156,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, w = map(int, stdin.split())\n    a = map(int, stdin.split())\n    nums = []\n    for i in range(n):\n        nums.append(a[i])\n    for i in range(n):\n        for j in range(i, n):\n            if i + j <= n:\n                nums[i] += nums[j]\n    return str(nums[-1])\n\n-----Test-----\nInput\n4 10\n2 4 1 2\n\nOutput\n4\n\nInput\n2 4\n-1 1\n\nOutput\n0\n\n-----Constraints-----\n1 <= n <= 10^4\n0 <= w <= 10^6\n-10^6 <= a[i] <= 10^6\n\n-----Example-----------------\nInput\n3 5\n2 1 -3\n\nOutput\n2\n\nInput\n4 10\n2 1 -3\n\nOutput\n3\n\n-----Constraints-----\n1 <= n <= 10^4\n-10^6 <= a[i] <= 10^6\n\n-----Example-----------------\nInput\n3 5\n2 1 -3\n\nOutput\n3\n\n'''"
    },
    {
        "number": 4157,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(n) for n in stdin.split()]\n    x, y = 0, 0\n    for i in range(n):\n        if a[i] % 3 == 0:\n            y = i\n            break\n        elif a[i] % 3 == 1:\n            x = i\n            break\n        else:\n            y = (i + 1) % n\n    x, y = y, x\n    a = [a[x] * a[y]]\n    while n > 1:\n        a[0], a[1] = a[1], a[0]\n        n = n - 1\n        x = y\n        y = x + 1\n        if x >= n:\n            y = n\n            x = x - n\n    a = a[:n]\n    return \"\".join(map(str, a))\n'''\n\ndef"
    },
    {
        "number": 4157,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    A = list(map(int, stdin.strip().split()))\n    for i in range(n):\n        if A[i]!= A[i+1]:\n            A[i+1] *= 2\n    A.sort()\n    for i in range(n-1):\n        A[i] *= 3\n    A.sort()\n    return''.join(str(i) for i in A)"
    },
    {
        "number": 4157,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \n\"\"\""
    },
    {
        "number": 4157,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    # print(n)\n    answer = ''\n    for i in range(1, n+1):\n        answer += str(i) + \" \"\n    answer = answer[:-1]\n    # print(answer)\n    numbers = stdin.split()\n    for i in range(n):\n        numbers[i] = int(numbers[i])\n    answer = answer.replace(str(numbers[0]), str(numbers[1]*numbers[0]))\n    answer = answer.replace(str(numbers[-1]), str(numbers[-2]*numbers[-1]))\n    return answer\n\nprint(solution('4 6 12')\n"
    },
    {
        "number": 4157,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin) // 3) + str((int(stdin) // 3)) * 3\n\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 4157,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    sequence = [int(i) for i in stdin.split()]\n    sequence = sorted(sequence)\n    \n    for i in range(n-2):\n        sequence[i] *= 3\n    for i in range(n-2, n):\n        sequence[i] *= 2\n        \n    for i in range(n-2, n):\n        sequence[i] *= 2\n    sequence.sort()\n    \n    answer = \"\"\n    for i in range(n-1):\n        answer += str(sequence[i]) + str(sequence[i+1]) + str(sequence[i+2])\n    return answer\n"
    },
    {
        "number": 4157,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    ans = \"\"\n    for i in range(1, n):\n        x = int(stdin[i])\n        for j in range(i+1, n):\n            x = (x*3)+(int(stdin[j])*2)\n        ans += str(x)\n    return ans\n\nprint(solution(input()))\n\n\ndef"
    },
    {
        "number": 4157,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    print(n)\n    list_ = []\n    for i in range(1, n+1):\n        x = n-i\n        x = str(x)\n        x = int(x)\n        if x==9:\n            x = '9'\n        list_.append(x)\n    print(list_)\n    if len(list_)==3:\n        return list_[2]\n    elif len(list_)==2:\n        return list_[1]\n    else:\n        return list_[0]\n\n\n\n\n\ndef"
    },
    {
        "number": 4157,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 2:\n        return '200'\n    if n % 3 == 0 and n % 2 == 0:\n        return str(n // 2) + '000'\n    if n % 3 == 0 and n % 2!= 0:\n        return str(n // 3) + '000'\n    return str(n // 2) + str(n % 3)\n\n------------------\n"
    },
    {
        "number": 4157,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, x = [int(i) for i in stdin.split()]\n    a = [int(i) for i in range(1, n + 1, 2)]\n\n    # print(a)\n    # a.sort(reverse=True)\n    # print(a)\n\n    if n % 2 == 0:\n        # \u4f59\u4e0b\u6700\u540e\u4e00\u4f4d\u7684\u6570\uff0c\u9700\u8981\u8fdb\u4f4d\n        c = n // 2\n        x -= c\n        a[-1] *= 2\n        a[-2] *= 3\n        a[-3] *= 2\n        a[-4] *= 2\n        a[-5] *= 2\n\n    else:\n        # \u4f59\u4e0b\u6700\u540e\u4e00\u4f4d\u7684\u6570\uff0c\u9700\u8981\u51cf\u4e00\u4f4d\n        c = n // 2 - 1\n        x -= c\n        a[-1] *= 3\n        a[-2] *= 2\n        a[-3] *= 2\n        a[-4] *= 2\n        a[-5] *= 2\n\n    answer = \"\"\n    for i in range(n):\n        answer += str(a[i])\n\n    return answer\n"
    },
    {
        "number": 4158,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, lst = map(int, stdin.split())\n    print(max(lst))\n    print(*lst)\n    return \"\"\n\ndef"
    },
    {
        "number": 4158,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    x = list(map(int, stdin.split()))\n    points = [0]\n    for i in range(n):\n        if x[i] < 0:\n            points.append(i)\n    n = len(points)\n    ans = 0\n    for i in range(n):\n        # print(i, points[i])\n        for j in range(i+1, n):\n            # print(j, points[j])\n            if points[j] - points[i] == 2**k:\n                ans += 1\n                # print(ans, points[j], points[i])\n    return str(ans)\n"
    },
    {
        "number": 4158,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    if n == 1:\n        return str(a*b)\n    else:\n        return '\\n'.join(map(str, range(n-1, n+2)))\n\n\nInput\n4\n-1 1 -2 0 3 5\nOutput\n1\n3\nInput\n1\n-1 1 -2 0 3\nOutput\n1\n3\n'''\n\nn = int(input())\nx = [int(input()) for _ in range(n)]\nm = int(input())\n\npossible = []\nfor i in range(n):\n    for j in range(i+1, n):\n        possible.append((x[i], x[j]))\n\nprint(len(possible))"
    },
    {
        "number": 4158,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip().split()[0])\n    x = [int(i) for i in stdin.strip().split()[1:]]\n    x.sort()\n    x = list(map(lambda x: [x[i] for i in range(len(x)) if x[i] - x[i-1] > 2**(x[i]-x[i-1])], x))\n    print(x)\n    print(len(set(x)))\n    \nsolution(sys.stdin.readline())\n'''\n\nimport sys\ninput = sys.stdin.readline\n\ndef"
    },
    {
        "number": 4158,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    points = []\n    for _ in range(n):\n        x, y = map(int, stdin.split())\n        points.append((x,y))\n    # idea: sort the coordinates and use the last element as the start point\n    points.sort()\n    # print(points)\n    for x, y in points:\n        if x == y:\n            continue\n        # print(x, y)\n        # print(2**(abs(x-y)))\n        if (2**(abs(x-y))) == 2:\n            return str(x*y)\n    return '0'\n\n-----Constraints-----\n1 <= n <= 10^5\n-10^9 <= x_i <= 10^9\n\nTime Limit: 1 sec\nSample Runtime: 20 ms\nSample Memory Usage: 15.3 MB\n\nComplexity:\nTime: O(2^n)\nSpace: O(n)\n\n\"\"\"\nclass Solution:\n    def findSubsetX(self, nums: List[int], x: int) -> List[int]:\n        if not nums: return []\n        n, m = len(nums), len(nums[0])\n        # print(n, m)\n        \n        # sort the coordinates and store the last element as the start point\n        nums.sort()\n        # print(nums)\n        \n        # get all possible points with the start point\n        self.nums = nums\n        self.ans = []\n        self.res = []\n        \n        self.dp(n, 0, [], 0)\n        \n        return self.res\n    \n    def dp(self, n, i, s, count):\n        # print(n, i, s, count)\n        if count == n:\n            self.ans.append(s)\n            return\n        \n        # get all possible points with the start point\n        self.nums[i][count] = 1\n        \n        for j in range(i+1, n):\n            # print(self.nums[j])\n            if self.nums[j][count] == 1:\n                # print(self.nums[j])\n                # print(s, count)\n                self.dp(n, j, s + [self.nums[j][0]], count + 1)\n                # print(self.nums[j])\n        \n    \n"
    },
    {
        "number": 4158,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    res = [0 for _ in range(n)]\n    subsets = []\n    for _ in range(n):\n        x, y = map(int, stdin.split())\n        if y in res:\n            continue\n        if x in res:\n            continue\n        if 2**x - 2**y in res:\n            continue\n        subsets.append((x, y))\n        res[y] += 1\n        res[x] -= 1\n    for _ in range(n):\n        if res[res[x] + res[y] - 1] == 0:\n            continue\n        else:\n            subsets.append((res[x] + res[y], res[x] + res[y] - 1))\n            res[x] -= 1\n            res[y] -= 1\n    for subset in subsets:\n        print(subset[1])\nsolution(\"4 3 2\")\nsolution(\"4 1 2 5\")\n"
    },
    {
        "number": 4158,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n        n = int(stdin.strip())\n        x = list(map(int, stdin.strip().split()))\n        x.sort()\n        answer = [x[0]]\n        #print(x)\n        j = 1\n        while j <= n:\n            #print(j)\n            ans = 0\n            if x[j] == x[j-1]:\n                i = 0\n                while i < j:\n                    if x[i] == x[i-1]:\n                        i += 1\n                    else:\n                        break\n                ans += 2**(j - i)\n                #print(ans)\n            else:\n                break\n            answer.append(x[j])\n            j += 1\n        answer.sort()\n        #print(answer)\n        if answer == sorted(answer):\n            return str(len(answer))\n        else:\n            return '-1'\n\nprint(solution(input()))"
    },
    {
        "number": 4158,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = list(map(int, stdin.split()))\n    \n    def check(point):\n        if point == []:\n            return True\n        if len(set(map(abs, point)))!= len(point):\n            return False\n        return True\n    \n    def solution(a, b):\n        for i in range(n):\n            for j in range(i + 1, n):\n                if a[i]!= a[j] and b[i]!= b[j]:\n                    return False\n            if a[i]!= b[i]:\n                return False\n        return True\n        \n    def p1(a, b):\n        return list(map(abs, a)) + list(map(abs, b))\n    \n    def p2(a, b):\n        return list(map(abs, a)) * 2 + list(map(abs, b))\n    \n    def p3(a, b):\n        a.sort()\n        b.sort()\n        d = 1\n        for i in range(len(a) - 1):\n            if a[i] > b[i]:\n                d = 1\n            elif a[i] < b[i]:\n                d = -1\n        return d * 2 + 2 ** (len(a) - 1)\n        \n    return max(p1(a, b), p2(a, b), p3(a, b))\n"
    },
    {
        "number": 4158,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, *data = list(map(int, stdin))\n    m = 0\n    for i in data:\n        m = max(m, 2 ** i)\n    k = n - m\n    arr = []\n    for i in range(1, k+1):\n        if i * i == k:\n            continue\n        for j in range(i, k+1, i):\n            arr.append(j)\n    return''.join(map(str, arr))\n\n\ndef"
    },
    {
        "number": 4158,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def bfs(i, cur):\n        if i == len(stdin):\n            return [[cur]]\n        if i == 0:\n            return [[cur]]\n        ans = []\n        for j in range(i, len(stdin)):\n            n = stdin[j]\n            cur.append(n)\n            for k in bfs(j + 1, cur):\n                cur.pop()\n                if len(cur) == 0:\n                    ans.append(k)\n            cur.pop()\n        return ans\n    stdin = stdin.split()\n    return str(bfs(0, []))\n\n\n-----Constraints-----\n\n1 <= n <= 100\n-10^9 <= x_i <= 10^9\n-10^9 <= x_j <= 10^9\n\n-----Time Limit: 10.000 seconds per testcase -----\nclass Solution:\n    def __init__(self):\n        self.result = 0\n    def largestSumSubset(self, nums: List[int]) -> str:\n        n = len(nums)\n        if n == 1:\n            return str(nums[0])\n        dp = [[0 for _ in range(n)] for _ in range(n)]\n        dp[0][0] = nums[0]\n        for i in range(1, n):\n            dp[i][0] = max(dp[i-1][0], dp[i-1][1] + nums[i])\n        for i in range(1, n):\n            for j in range(i+1):\n                if j+1 < n:\n                    dp[i][j+1] = max(dp[i-1][j+1], dp[i-1][j]) + nums[i]\n                else:\n                    dp[i][j+1] = dp[i-1][j] + nums[i]\n        return str(max(dp[n-1]))\n"
    },
    {
        "number": 4159,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    K, *A = map(int, stdin.split())\n    if K == 1:\n        return \"1\"\n    if A == 1:\n        return \"2\"\n    n = len(A)\n    if n == 0:\n        return \"0\"\n    lst = list(map(int, str(A)))\n    lst.sort()\n    sum = 0\n    for i in range(n - 1):\n        if i < n - 2:\n            if lst[i] == lst[i + 1]:\n                sum += 1\n                lst[i + 1] = lst[i]\n                lst[i] = 1\n            else:\n                break\n        if i < n - 3:\n            if lst[i + 1] == lst[i + 2]:\n                sum += 1\n                lst[i + 1] = lst[i]\n                lst[i] = 2\n            else:\n                break\n    answer = str(sum)\n    answer = answer.replace('2', '1').replace('3', '2')\n    return answer\n\n\n\"\"\"\nRuntime: 44 ms (29.8%)\nMemory Usage: 14.1 MB (29.8%)\n\nRuntime: 36 ms (44.19%)\nMemory Usage: 14.2 MB (44.19%)\n\nRuntime: 76 ms (44.89%)\nMemory Usage: 14.2 MB (44.89%)\n\nRuntime: 72 ms (44.89%)\nMemory Usage: 14.1 MB (44.89%)\n\nRuntime: 76 ms (52.52%)\nMemory Usage: 14.1 MB (52.52%)\n\nRuntime: 76 ms (50.41%)\nMemory Usage: 14.1 MB (50.41%)\n\nRuntime: 76 ms (49.88%)\nMemory Usage: 14.1 MB (49.88%)\n\nRuntime: 76 ms (49.88%)\nMemory Usage: 14.2 MB (49.88%)\n\nRuntime: 76 ms (50.41%)\nMemory Usage: 14.2 MB (50.41%)\n\nRuntime: 76 ms (49.88%)\nMemory Usage: 14.2 MB (49.88%)\n\nRuntime: 76 ms (49.88%)\nMemory Usage: 14.1 MB (49.88%)\n\nRuntime: 76 ms (49.88%)\nMemory Usage: 14.2 MB (49.88%)\n\nRuntime: 76 ms (50.41%)\nMemory Usage: 14.2 MB (50.41%)\n\nRuntime: 76 ms (49.88%)\nMemory Usage: 14.2 MB (49.88%)\n\nRuntime: 76 ms (50.41%)\nMemory Usage: 14.1 MB (50.41%)\n\nRuntime: 76 ms (49.88%)\nMemory Usage: 14.2 MB (49.88%)\n\nRuntime: 76 ms (50.41%)\nMemory Usage: 14.2 MB (50.41%)\n\nRuntime: 76 ms (49.88%)\nMemory Usage: 14.2 MB (49.88%)\n\nRuntime: 76 ms (50.41%)\nMemory Usage: 14.1 MB (50.41%)\n\nRuntime: 76 ms (49.88%)\nMemory Usage: 14.1 MB (49.88%)\n\nRuntime: 76 ms (49.88%)\nMemory Usage: 14.1 MB (49.88%)\n\nRuntime: 76 ms (49.88%)\nMemory Usage: 14.2 MB (49.88%)\n\nRuntime: 76 ms (50.41%)\nMemory Usage: 14.2 MB (50.41%)\n\nRuntime: 76 ms (49.88%)\nMemory Usage: 14.2 MB (49.88%)\n\nRuntime: 76 ms (50.41%)\nMemory Usage: 14.1 MB (50.41%)\n\nRuntime: 76 ms (50.41%)\nMemory Usage: 14.1 MB (50.41%)\n\nRuntime: 76 ms (49.88%)\nMemory Usage: 14.2 MB (49.88%)\n\nRuntime: 76 ms (49.88%)\nMemory Usage: 14.2 MB (49.88%)\n\nRuntime: 76 ms (50.41%)\nMemory Usage: 14.2 MB (50.41%)\n\nRuntime: 76 ms (49.88%)\nMemory Usage: 14.2 MB (49.88%)\n\nRuntime: 76 ms (49.88%)\nMemory Usage: 14.2 MB (49.88%)\n\nRuntime: 76 ms (50.41%)\nMemory Usage: 14.1 MB (50.41%)\n\nRuntime: 76 ms (49.88%)\nMemory Usage: 14.2 MB (49.88%)\n\nRuntime: 76 ms (49.88%)\nMemory Usage: 14.2 MB (49.88%)\n\nRuntime: 76 ms (50.41%)\nMemory Usage: 14.1 MB (50.41%)\n\nRuntime: 76 ms (49.88%)\nMemory Usage: 14.2 MB (49.88%)\n\nRuntime: 76 ms (49.88%)\nMemory Usage: 14.2 MB (49.88%)\n\nRuntime: 76 ms (50.41%)\nMemory Usage: 14.1 MB (50.41%)\n\nRuntime: 76 ms (49.88%)\nMemory Usage: 14.2 MB (49.88%)\n\nRuntime: 76 ms (49.88%)\nMemory Usage: 14.2 MB (49.88%)\n\nRuntime: 76 ms (50.41%)\nMemory Usage: 14.2 MB (50.41%)\n\nRuntime: 76 ms (49.88%)\nMemory Usage: 14.2 MB (49.88%)\n\nRuntime: 76 ms (49.88%)\nMemory Usage: 14.2 MB (49.88%)\n\nRuntime: 76 ms (50.41%)\nMemory Usage: 14.1 MB (50.41%)\n\nRuntime: 76 ms (49.88%)\nMemory Usage: 14.2 MB (49.88%)\n\nRuntime: 76 ms (49.88%)\nMemory Usage: 14.2 MB (49.88%)\n\nRuntime: 76 ms (49.88%)\nMemory Usage: 14.2 MB (49.88%)\n\nRuntime: 76 ms (50.41%)\nMemory Usage: 14.1 MB (50.41%)\n\nRuntime: 76 ms (49.88%)\nMemory Usage: 14.2 MB (49.88%)\n\nRuntime: 76 ms (50.41%)\nMemory Usage: 14.2 MB (50.41%)\n\nRuntime: 76 ms (49.88%)\nMemory Usage: 14.2 MB (49.88%)\n\nRuntime: 76 ms (50.41%)\nMemory Usage: 14.1 MB (50.41%)\n\nRuntime: 76 ms (49.88%)\nMemory Usage: 14.2 MB (49.88%)\n\nRuntime: 76 ms (49.88%)\nMemory Usage: 14.2 MB (49.88%)\n\nRuntime: 76 ms (50.41%)\nMemory Usage: 14.2 MB (50.41%)\n\nRuntime: 76 ms (49.88%)\nMemory Usage: 14.1 MB (49.88%)\n\nRuntime: 76 ms (49.88%)\nMemory Usage: 14.2 MB (49.88%)\n\nRuntime: 76 ms (50.41%)\nMemory Usage: 14.2 MB (50.41%)\n\nRuntime: 76 ms (49.88%)\nMemory Usage: 14.2 MB (49.88%)\n\nRuntime: 76 ms (49.88%)\nMemory Usage: 14.2 MB (49.88%)\n\nRuntime: 76 ms (50.41%)\nMemory Usage: 14.1 MB (50.41%)\n\nRuntime: 76 ms (49."
    },
    {
        "number": 4159,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N,K = map(int,stdin.split())\n    A = list(map(int,stdin.split()))\n    Aoki = [0] * 10\n    for i in A:\n        if Aoki[i] == 0:\n            Aoki[i] = 1\n        else:\n            Aoki[i] = 0\n    for i in range(K):\n        if A[i] == A[i+1]:\n            A[i+1] = 0\n            A[i] = 0\n        else:\n            break\n    \n    for i in A:\n        if i == 0:\n            print(Aoki[i])\n        else:\n            print(Aoki[i]-Aoki[i-1])\n            \n\n-----Sample Output-----\n0\n\nTakahashi will do the following:\n - He has two cookies, so he eats one of them.\n - Now he has one cookie left, and he eats it.\n - Now he has no cookies left, but Aoki has three, so Takahashi eats one of them.\nThus, in the end, Takahashi will have 0 cookies, and Aoki will have 2.\n\n-----Constraints-----\n - 0 \\leq A \\leq 10^{12}\n - 0 \\leq B \\leq 10^{12}\n - 0 \\leq K \\leq 10^{12}\n - All values in input are integers.\n\"\"\"\n\ndef"
    },
    {
        "number": 4159,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = 0\n    b = 0\n    k = 0\n    for i in range(int(stdin.split()[0])):\n        a, b = map(int, stdin.split())\n        k += a\n    print(k)\n    return str(k)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4159,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(takahashi(stdin) + aoki(stdin))"
    },
    {
        "number": 4159,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    k, n = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    b = []\n    for i in a:\n        b.append(i)\n    b.sort(reverse=True)\n    return str(len(b) - (k * n))\n\ndef"
    },
    {
        "number": 4159,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    K = int(stdin.split()[1])\n    a, b = 1, 1\n    \n    for _ in range(K):\n        a, b = b, a + b\n    \n    return str(a) + \" \" + str(b)\n"
    },
    {
        "number": 4159,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n    takahashi = set()\n    aoki = set()\n    for i in range(A):\n        takahashi.add(i + 1)\n    for i in range(B):\n        aoki.add(i + 1)\n    \n    # aoki\ub97c K\ubc88 \ubc18\ubcf5\ud558\uae30\n    while K >= len(aoki) and len(aoki) < K:\n        # aoki\uc5d0\uc11c \ub098\uc628 \ub3c8\uae4c\uc9c0\uc758 \uc22b\uc790\ub97c \ud655\uc778\n        num = list(aoki)[0]\n        # \ub098\uc628 \uc218\uac00 aoki\uc5d0\uc11c \ub098\uc628 \uc218\uac00 K\ubc88\uc774\uba74 \ubc18\ubcf5\ubb38\uc744 \ube60\uc838\ub098\uc628\ub2e4.\n        if num in aoki:\n            aoki.remove(num)\n            # Aoki\uc5d0\uc11c \ub098\uc628 \uc218\uac00 K\ubc88\uc774\uba74, \ubc18\ubcf5\ubb38\uc744 \ube60\uc838\ub098\uc628\ub2e4.\n            continue\n        # \uc218\uac00 aoki\uc5d0\uc11c \ub098\uc628 \uc218\ub294 \uc0ac\uc6a9\ud558\uc9c0 \uc54a\ub294\ub2e4\uba74,\n        # \ubc18\ubcf5\ubb38\uc744 \ube60\uc838\ub098\uc628\ub2e4.\n        else:\n            K -= len(aoki)\n            aoki.add(num)\n            continue\n    # aoki\uc5d0\uc11c \ub098\uc628 \uc218\uac00 K\ubc88\uc774\uba74, \ubc18\ubcf5\ubb38\uc744 \ube60\uc838\ub098\uc628\ub2e4.\n    # aoki\uc5d0\uc11c \ub098\uc628 \uc218\uac00 K\ubc88\uc774\uba74, \ubc18\ubcf5\ubb38\uc744 \ube60\uc838\ub098\uc628\ub2e4.\n    while K >= len(takahashi):\n        num = list(takahashi)[0]\n        # aoki\uc5d0\uc11c \ub098\uc628 \uc218\uac00 aoki\uc5d0\uc11c \ub098\uc628 \uc218\uac00 K\ubc88\uc774\uba74, \ubc18\ubcf5\ubb38\uc744 \ube60\uc838\ub098\uc628\ub2e4.\n        if num in aoki:\n            aoki.remove(num)\n            # Aoki\uc5d0\uc11c \ub098\uc628 \uc218\uac00 K\ubc88\uc774\uba74, \ubc18\ubcf5\ubb38\uc744 \ube60\uc838\ub098\uc628\ub2e4.\n            continue\n        # \uc218\uac00 aoki\uc5d0\uc11c \ub098\uc628 \uc218\ub294 \uc0ac\uc6a9\ud558\uc9c0 \uc54a\ub294\ub2e4\uba74, \ubc18\ubcf5\ubb38\uc744 \ube60\uc838\ub098\uc628\ub2e4.\n        else:\n            takahashi.remove(num)\n            # aoki\uc5d0\uc11c \ub098\uc628 \uc218\uac00 aoki\uc5d0\uc11c \ub098\uc628 \uc218\uac00 K\ubc88\uc774\uba74, \ubc18\ubcf5\ubb38\uc744 \ube60\uc838\ub098\uc628\ub2e4.\n            continue\n    # aoki\uc5d0\uc11c \ub098\uc628 \uc218\uac00 K\ubc88\uc774\uba74, \ubc18\ubcf5\ubb38\uc744 \ube60\uc838\ub098\uc628\ub2e4.\n    # \uc774\ub54c, aoki\uc5d0\uc11c \ub098\uc628 \uc218\uac00 K\ubc88\uc774\uba74, \ubc18\ubcf5\ubb38\uc744 \ube60\uc838\ub098\uc628\ub2e4.\n    # \ub098\uc628 \uc218\uac00 K\ubc88\uc774\uba74, aoki\uc5d0\uc11c \ub098\uc628 \uc218\uac00 K\ubc88\uc774\uba74, \ubc18\ubcf5\ubb38\uc744 \ube60\uc838\ub098\uc628\ub2e4.\n    while K >= len(aoki):\n        num = list(aoki)[0]\n        # \uc218\uac00 aoki\uc5d0\uc11c \ub098\uc628 \uc218\uac00 aoki\uc5d0\uc11c \ub098\uc628 \uc218\uac00 K\ubc88\uc774\uba74, \ubc18\ubcf5\ubb38\uc744 \ube60\uc838\ub098\uc628\ub2e4.\n        if num in takahashi:\n            takahashi.remove(num)\n            # aoki\uc5d0\uc11c \ub098\uc628 \uc218\uac00 aoki\uc5d0\uc11c \ub098\uc628 \uc218\uac00 K\ubc88\uc774\uba74, \ubc18\ubcf5\ubb38\uc744 \ube60\uc838\ub098\uc628\ub2e4.\n            continue\n        # \uc218\uac00 aoki\uc5d0\uc11c \ub098\uc628 \uc218\ub294 \uc0ac\uc6a9\ud558\uc9c0 \uc54a\ub294\ub2e4\uba74, \ubc18\ubcf5\ubb38\uc744 \ube60\uc838\ub098\uc628\ub2e4.\n        else:\n            aoki.remove(num)\n            # aoki\uc5d0\uc11c \ub098\uc628 \uc218\uac00 aoki\uc5d0\uc11c \ub098\uc628 \uc218\uac00 K\ubc88\uc774\uba74, \ubc18\ubcf5\ubb38\uc744 \ube60\uc838\ub098\uc628\ub2e4.\n            continue\n    # aoki\uc5d0\uc11c \ub098\uc628 \uc218\uac00 K\ubc88\uc774\uba74, \ubc18\ubcf5\ubb38\uc744 \ube60\uc838\ub098\uc628\ub2e4.\n    # \uc774\ub54c, aoki\uc5d0\uc11c \ub098\uc628 \uc218\uac00 K\ubc88\uc774\uba74, \ubc18\ubcf5\ubb38\uc744 \ube60\uc838\ub098\uc628\ub2e4.\n    # \ub098\uc628 \uc218\uac00 K\ubc88\uc774\uba74, \ubc18\ubcf5\ubb38\uc744 \ube60\uc838\ub098\uc628\ub2e4.\n    # \ub098\uc628 \uc218\uac00 K\ubc88\uc774\uba74, \ubc18\ubcf5\ubb38\uc744 \ube60\uc838\ub098\uc628\ub2e4.\n    # \ub098\uc628 \uc218\uac00 K"
    },
    {
        "number": 4159,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    T, A = list(map(int, stdin.split(' ')))\n    Takahashi = 0\n    Aoki = 0\n    for i in range(T):\n        Aoki = 0\n        Aoki += list(map(int, stdin.split(' ')))\n        Takahashi += A[0] - A[1]\n        A[1] = A[1] - A[0]\n        A[0] = T[i] - T[i-1]\n        if A[0] <= 0:\n            break\n        if A[0] >= T[i]:\n            A[0] = T[i]\n    Aoki.sort()\n    print(Takahashi - Aoki[-1])\n    return str(Takahashi - Aoki[-1])\n\n-----Constraints-----\n - 0 \\leq T \\leq 10^12\n - 0 \\leq A \\leq 10^{12}\n - 0 \\leq B \\leq 10^{12}\n - 0 \\leq K \\leq 10^{12}\n - All values in input are integers.\n\"\"\"\n\nimport math\n\ndef"
    },
    {
        "number": 4159,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    K = int(stdin.split()[-1])\n    A_cookies, B_cookies = A + 1, B + 1\n    print(A_cookies, B_cookies)\n    while A_cookies < B_cookies:\n        if A_cookies > B_cookies:\n            A_cookies, B_cookies = B_cookies, A_cookies\n        else:\n            A_cookies += A_cookies\n        print(A_cookies, B_cookies)\n    print(A_cookies)\n    print(B_cookies)\n    return str(A_cookies) + str(B_cookies)\n\n\uc5ec\uae30\uc11c \uc624\ub298\ub3c4 \uc88b\uae30 \ubabb\ud558\ub2c8 \uc21c\uc11c\ub97c \ubc14\ub00c\uc5c8\ub358 \uac83\uc774 \uc544\uc608 \uc624\ub798\ub418\uc5b4\uc788\uc74c.\n\ub530\ub77c\uc11c \uc5b4\ub5bb\uac8c \ud558\ub294 \uc790\uc138\ud55c\uac83\uc740 \uc798\ubabb\ud588\ub294\ub370? \uc774\uac83\uc744 \ubc30\uc6b4\uc9c0 \ubabb\ud588\ub2e4.\n\ub530\ub77c\uc11c \uc88b\uc544\uc694\ud55c \uc77c\uc740 \uc5b4\ub5bb\uac8c \ud560\uae4c? \uc5b4\ub5bb\uac8c \ud558\ub294\uc9c0 \ucc3e\uc544\ub0b4\uae30.\n\ub098\ub3c4 \uc88b\uc740 \ud480\uc774\uc774\ub2e4.\n\ub530\ub77c\uc11c \ud480\uc774\ud55c \ucf54\ub4dc\uc784. \uc774\ub7f0\ub290\ub08c\uc73c\ub85c \uc54c\uace0 \uc788\ub294\ub370? \uc911\uc694\ud55c \uc810\uc744 \uc810\uc218\ub85c \uc120\ud0dd\ud574\ub3c4\ub41c\ub2e4.\n\uc815\ubd80\ub294 \uac00\ub294\uae30\uac00 \uc77c\uc815\ud558\ub294\uac83\uc774\ub77c\uace0 \uc0dd\uac01\ud574\uc57c \ud558\ub294\ub370? \uc5b4\ub5bb\uac8c \ud558\ub294\uc9c0 \ucc3e\uc544\ub0b4\uc9c0\ub294 \ubb34\uc870\uac74 \uc88b\uc544\uc694\ud558\ub294\ub370?\n\ud30c\uc774\uc36c\uc758 \uace0\ubbfc\uc774 \ub354 \uc88b\uc544\uc694\ub294 \ud558\ub294\ub370?\n\ub530\ub77c\uc11c \ub2f5\uc5d0 \ub530\ub77c\uc62c\ub824\uac00\ub294 \uc810\uc740 \uc544\uc608 \ub098\ub294\uac83\uc774\uae30\uc5d0 \uc9c4\ud589\ud558\uc9c0 \ubabb\ud55c\ub2e4.\n\uc815\ubd80\ub294 \ud480\uc774\uc758 \ub2f5\uc5d0\uc11c\ub294 \uc88b\uc740 \ub098\ub3c4 \ucc3e\uc544\ub0b4\ub294 \uac83\uc774 \uc544\ub2c8\ub358 \uc5b4\ub5bb\uac8c \uc0dd\uac01\ud574\ub3c4 \ub418\uc5c8\uc5c8\ub294\ub370?\n\ub530\ub77c\uc11c \uc810\uc218\ub97c \uac00\uc9c0\uace0 \uc788\uc744\ub54c\ub294 \ud30c\uc774\uc36c\uc758 \uace0\ubbfc\uc774 \ud574\uc57c\ud558\ub294 \ubb38\uc81c\ub294 \ub354 \uc88b\uac8c \ub9ce\uc558\ub2e4.\n\ub530\ub77c\uc11c \ud480\uc774\ud55c \ucf54\ub4dc\uc784. \uc774\ub7f0\ub294 \ub300\ubd80\ubd84 \uc21c\uc11c\ub300\ub85c \ub2f5\uc744 \uac00\uc9c0\ub294 \ud480\uc774\uc774\ub294 \ud504\ub85c\uadf8\ub798\ubc0d\uc774 \ub354 \uc88b\uc544\uc694\ub294\uc9c0\ub294 \uc62c\ubc14\ub978 \uc810\uc774\ub2e4.\n\uc6b0\uc120 \uc810\uc218\uc758 \uacc4\uc0b0\uc744 \ub354\ud574\uc8fc\uba74 \ub354 \uc88b\uc740 \ud480\uc774\uc640 \ube44\uc2b7\ud558\uac8c \ud480\uc5c8\ub2e4.\n\ub098\ub294 \ud480\uc774\uc6a9\uc5d0\uc11c\ub3c4 \uc88b\uc740 \uc810\uc218\uc758 \uacc4\uc0b0\uc744 \ud1b5\ud574 \ub354 \uc88b\uc740 \ud480\uc774\uc640 \ube44\uc2b7\ud558\ub2e4.\n\ub530\ub77c\uc11c \uc6b0\uc120\uc810\uc218\ub97c \uac00\uc9c0\uace0 \uc788\ub294 \ud480\uc774\uc774\ub77c\ub294 \ubc29\uc2dd\uc73c\ub85c \ud480\uc5c8\ub294\ub370 \ud504\ub85c\uadf8\ub798\ubc0d \uc5b4\ub824\uc6cc\ubcf4\ub358 \ub370\uc774\ud130\ub97c \ud30c\uc545\ud558\uace0 \ud55c \uc0ac\ub78c\uc5d0\uac8c \ud480\uc5c8\uc5c8\ub358 \ubc29\uc2dd\uc744 \ucc3e\uc544\ub0b4\uc57c \ud558\ub294\ub370 \uadf8\ub9ac\uace0 \uc790\uc138\ud55c \uc810\uc218\uc758 \uac1c\uc218\ub97c \ud30c\uc545\ud574\uc57c \ud558\ub294\ub370 \uadf8\ub7f0\ub370 \uc5b4\ub5bb\uac8c \ud558\ub294\uc9c0 \ucc3e\uc544\ub0b4\uc57c \ud558\ub294\ub370 \uadf8\ub798\uc11c \uac19\uc740 \uac12\uc744 \ud504\ub85c\uadf8\ub798\ubc0d\uc744 \ud588\uc5c8\ub2e4.\n\uadf8\ub9ac\uace0 \uac1c\uc218\ub97c \ud30c\uc545\ud558\ub294 \ud480\uc774\uc758 \uc2dc\uac04\uc744 \ubbf8\ub9ac \ud1b5\ud574 \ud574\uacb0\ud558\uba74 \ub354 \uc88b\uc740 \ud480\uc774\uc640 \ube44\uc2b7\ud558\ub2e4.\n\uadf8"
    },
    {
        "number": 4159,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 4160,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solve the problem.\n    \"\"\"\n    X = int(stdin.strip())\n    if X < 100:\n        return \"1\"\n    else:\n        return \"2\"\n    #     pass\n"
    },
    {
        "number": 4160,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str(sum(list(map(lambda x: int(x) * (2 ** 18), stdin))))\n"
    },
    {
        "number": 4160,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    b = list(map(int, stdin.strip().split()))\n    def calc_balance(a, b):\n        return a * b\n    def calc_balance_recur(a, b, n, d, q, y):\n        if n == d:\n            if calc_balance_recur(d, b, 0, d, q, y) >= q:\n                print(q)\n            return\n        if q < 0:\n            return\n        if q >= calc_balance_recur(d, b, n, d - q, q, y):\n            print(y)\n            return\n        q -= calc_balance_recur(d, b, n + 1, d, q, y + b[n] / b[d])\n        if n < d:\n            calc_balance_recur(d, b, n + 1, d, q, y + b[n] / b[d])\n    calc_balance_recur(0, b, N, 0, 0, 0)\n"
    },
    {
        "number": 4160,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip().split()[0])\n    nums = [int(n) for n in stdin.split()]\n    dp = [0]*n\n    dp[0] = 1\n    for i in range(1,n):\n        for j in range(i):\n            if nums[j]>nums[i]:\n                dp[i]+=1\n    print(dp[n-1])"
    },
    {
        "number": 4160,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    return str(n * (x / 100))\n"
    },
    {
        "number": 4160,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n  X,balance = 0,0\n  for i in range(len(stdin)):\n    x,b = stdin[i].split()\n    x = int(x)\n    X = X + x\n    if X > 10:\n      X = X - 10\n      balance += X\n  return str(balance)\n"
    },
    {
        "number": 4160,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\npublic static int solution(int X) {\n    int sum = 0;\n    for(int i = 1; i <= X; i++) {\n        sum += Math.floor(X / i) - 1;\n    }\n    return sum;\n}\n"
    },
    {
        "number": 4160,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    p, q = map(int, stdin.split())\n    while p > 0 and q > 0:\n        if p >= q:\n            p -= q\n            q = 0\n        else:\n            q -= p\n            p = 0\n    if p > 0:\n        return str(p)\n    else:\n        return str(q)\n\n\nSample Output\n3\n\n5\n\n12\n\nExplanation\nGiven 3, 5, and 12 years, the balance is 101 + 102 + 103 = 77.\n\nGiven 2, 4, and 12 years, the balance is 77 + 77 + 77 = 113.\n\nGiven 3, 2, and 12 years, the balance is 113 + 113 = 156.\n\nGiven 1 year, the balance is 1.\n'''"
    },
    {
        "number": 4160,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # --- Input Format ---\n    # stdin: an input string\n    #\n    # --- Output Format ---\n    # A string of the form \"YES\" if the balance reaches 101, \"NO\" otherwise.\n\n    # --- Constraints ---\n    # 1 <= X <= 10^18\n\n    X, Y = map(int, stdin.split())\n    c = 101 * (Y / 100) ** (1/100)\n    if c > X:\n        print('NO')\n    else:\n        print('YES')\n    # --- Another Way ---\n    # print('YES' if X <= c else 'NO')\n    # --- Another Way ---\n    # if X < c:\n    #     print('NO')\n    # else:\n    #     print('YES')\n    # --- Another Way ---\n    # print(X / 100)\n    # print(int(round(c)))\n    # --- Another Way ---\n    # print(X / 100)\n    # print(int(round(c)))"
    },
    {
        "number": 4160,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n  X = int(stdin)\n  days = 0\n  while X >= 100:\n    days += 1\n    X = X - 100\n  return str(days)"
    },
    {
        "number": 4161,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    A = map(int, input().split())\n    B = map(int, input().split())\n    C = map(int, input().split())\n    gcd = 0\n    for a in A:\n        for b in B:\n            for c in C:\n                gcd = max(gcd, int(a * b * c))\n    print(gcd)\n\n\n\n-----Constraints-----\n 1 <= K <= 200\n\n-----Input-----\nK\n\n-----Output-----\nPrint the value of \\displaystyle{\\sum_{a=1}^{K}\\sum_{b=1}^{K}\\sum_{c=1}^{K} \\gcd(a,b,c)}.\n\n-----Sample Input-----\n2\n\n-----Sample Output-----\n11\n\n\\gcd(1,1,1)+\\gcd(1,1,2)+\\gcd(1,2,1)+\\gcd(1,2,2)+\\gcd(2,1,1)+\\gcd(2,1,2)+\\gcd(2,2,1)+\\gcd(2,2,2)=1+1+1+1+1+1+1+1+1+1+1+1+1+2=11\nThus, the answer is 11.\ndef"
    },
    {
        "number": 4161,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def get_K(line: str) -> int:\n        sum_ = 0\n        for char in line:\n            sum_ += int(char)\n        return sum_\n\n    N = int(stdin.strip())\n    # print(N)\n    result = 0\n    for line in stdin:\n        # print(line)\n        K = get_K(line)\n        if K == 1:\n            result += 1\n    # print(result)\n    return str(result)\n-----Sample Input-----\n2\n1 2 3\nOutput:\n9\n-----Sample Output-----\n2\n\"\"\"\n\nK = int(input())\ndef"
    },
    {
        "number": 4161,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin)\n    n = len(str(K))\n    c = K\n    arr = [0 for i in range(K)]\n    for i in range(K):\n        arr[i] = i\n    arr.sort()\n    x = arr[K-1] + arr[K-2] + arr[K-3]\n    \n    for i in range(K):\n        arr[i] -= 1\n        arr[K-i-1] += 1\n        arr[K-i-2] -= 1\n        arr[K-i-3] += 1\n        \n        \n    answer = x % 10\n    print(answer)\n    return str(answer)\n\n=======\ndef"
    },
    {
        "number": 4161,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N,K = map(int, stdin.split())\n    if N == 1:\n        print(0)\n        return\n    S = ','.join(map(str, range(1,N+1)))\n    A = ','.join(map(str, range(1,N+1)))\n    B = ','.join(map(str, range(1,N+1)))\n    C = ','.join(map(str, range(1,N+1)))\n    gcd_list = []\n    for i in range(1,N+1):\n        for j in range(1,i+1):\n            gcd = gcd(i,j,K)\n            if gcd not in gcd_list:\n                gcd_list.append(gcd)\n    gcd_sum = 0\n    for i in gcd_list:\n        gcd_sum += i\n    if gcd_sum == N:\n        print(gcd_sum)\n    else:\n        print(-1)\n    return\n\n-----Good luck!\n"
    },
    {
        "number": 4161,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin.split()[0])\n    N,M,X = map(int,stdin.split())\n    A = list(map(int,stdin.split()))\n    A = [str(x) for x in A]\n    A = \"\".join(A)\n    lcm = 1\n    for i in range(K-1):\n        lcm = lcm*(K-i-1)//(i+1)\n    lcm = lcm*(K-1)\n    A = [i*lcm for i in A]\n    A = \"\".join(A)\n    sumA = 0\n    for i in range(len(A)):\n        sumA += int(A[i])\n    answer = str(sumA//lcm)\n    return answer\n\nprint(solution(input()))"
    },
    {
        "number": 4161,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N,K = map(int,stdin.split())\n    if N == K:\n        print(K)\n        return\n    \n    #print(N,K)\n    if N > K:\n        print(\"ERROR\")\n        return\n    print(len(set(map(int,str(N-K))) & set(str(K))))\n    \n"
    },
    {
        "number": 4161,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    K, N = map(int, stdin.split())\n    C = list(map(int, stdin.split()))\n    \n    l = 0\n    r = 0\n    for i in range(N):\n        if C[i] % K == 0:\n            l = l + 1\n        else:\n            r = r + 1\n    print(l, r, K)\n    return str(l*r*K)"
    },
    {
        "number": 4161,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    K, *_ = map(int, stdin)\n    if K < 2:\n        return str(0)\n    \n    gcd_table = [[1, 1], [1, 2], [2, 1], [2, 2]]\n    \n    while gcd_table:\n        gcd = gcd_table.pop()\n        if gcd[0] == gcd[1]:\n            gcd_table.append(gcd[1]*gcd[1])\n            continue\n        \n        for i in range(K-1):\n            if gcd_table[i][1] % gcd[1] == 0:\n                gcd_table[i][0] = gcd[0]\n                gcd_table[i][1] //= gcd[0]\n                break\n        \n        for i in range(K-1, 0, -1):\n            if gcd_table[i][1] % gcd[0] == 0:\n                gcd_table[i][0] = gcd[0]\n                gcd_table[i][1] //= gcd[0]\n                break\n    \n    answer = str(gcd_table[0][0])\n    for i in gcd_table[1:]:\n        answer += str(i[0]) + str(i[1])\n    return answer\n\ndef"
    },
    {
        "number": 4161,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    global ans\n    ans = 1\n    return str(ans)\n\"\"\"\n\ndef"
    },
    {
        "number": 4161,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    answer = ''\n    K = int(stdin)\n    if K == 1:\n        return str(1)\n    if K == 2:\n        return str(1)\n    if K == 3:\n        return str(1)\n    while True:\n        sum1 = 0\n        sum2 = 0\n        for i in range(1, K + 1):\n            sum1 += i\n        for i in range(1, K + 1):\n            sum2 += i\n        if sum1 % 2 == 0 and sum2 % 2 == 0:\n            answer = str(sum1)\n            break\n        else:\n            sum1 = 0\n            sum2 = 0\n        for i in range(1, K + 1):\n            sum1 += i\n            sum2 += i\n        if sum1 % 2 == 0:\n            answer += str(sum1)\n        else:\n            sum1 = 0\n            sum2 = 0\n        for i in range(1, K + 1):\n            sum1 += i\n            sum2 += i\n        if sum1 % 2 == 0 and sum2 % 2 == 0:\n            answer += str(sum1)\n            break\n        else:\n            sum1 = 0\n            sum2 = 0\n        for i in range(1, K + 1):\n            sum1 += i\n            sum2 += i\n        if sum1 % 2 == 0:\n            answer += str(sum1)\n            break\n        else:\n            sum1 = 0\n            sum2 = 0\n        for i in range(1, K + 1):\n            sum1 += i\n            sum2 += i\n        if sum1 % 2 == 0 and sum2 % 2 == 0:\n            answer += str(sum1)\n            break\n        else:\n            sum1 = 0\n            sum2 = 0\n        for i in range(1, K + 1):\n            sum1 += i\n            sum2 += i\n        if sum1 % 2 == 0:\n            answer += str(sum1)\n            break\n        else:\n            sum1 = 0\n            sum2 = 0\n        for i in range(1, K + 1):\n            sum1 += i\n            sum2 += i\n        if sum1 % 2 == 0:\n            answer += str(sum1)\n            break\n        else:\n            sum1 = 0\n            sum2 = 0\n        for i in range(1, K + 1):\n            sum1 += i\n            sum2 += i\n        if sum1 % 2 == 0 and sum2 % 2 == 0:\n            answer += str(sum1)\n            break\n        else:\n            sum1 = 0\n            sum2 = 0\n        for i in range(1, K + 1):\n            sum1 += i\n            sum2 += i\n        if sum1 % 2 == 0:\n            answer += str(sum1)\n            break\n        else:\n            sum1 = 0\n            sum2 = 0\n        for i in range(1, K + 1):\n            sum1 += i\n            sum2 += i\n        if sum1 % 2 == 0:\n            answer += str(sum1)\n            break\n        else:\n            sum1 = 0\n            sum2 = 0\n        for i in range(1, K + 1):\n            sum1 += i\n            sum2 += i\n        if sum1 % 2 == 0 and sum2 % 2 == 0:\n            answer += str(sum1)\n            break\n        else:\n            sum1 = 0\n            sum2 = 0\n        for i in range(1, K + 1):\n            sum1 += i\n            sum2 += i\n        if sum1 % 2 == 0:\n            answer += str(sum1)\n            break\n        else:\n            sum1 = 0\n            sum2 = 0\n        for i in range(1, K + 1):\n            sum1 += i\n            sum2 += i\n        if sum1 % 2 == 0 and sum2 % 2 == 0:\n            answer += str(sum1)\n            break\n        else:\n            sum1 = 0\n            sum2 = 0\n        for i in range(1, K + 1):\n            sum1 += i\n            sum2 += i\n        if sum1 % 2 == 0:\n            answer += str(sum1)\n            break\n        else:\n            sum1 = 0\n            sum2 = 0\n        for i in range(1, K + 1):\n            sum1 += i\n            sum2 += i\n        if sum1 % 2 == 0:\n            answer += str(sum1)\n            break\n        else:\n            sum1 = 0\n            sum2 = 0\n        for i in range(1, K + 1):\n            sum1 += i\n            sum2 += i\n        if sum1 % 2 == 0:\n            answer += str(sum1)\n            break\n        else:\n            sum1 = 0\n            sum2 = 0\n        for i in range(1, K + 1):\n            sum1 += i\n            sum2 += i\n        if sum1 % 2 == 0:\n            answer += str(sum1)\n            break\n        else:\n            sum1 = 0\n            sum2 = 0\n        for i in range(1, K + 1):\n            sum1 += i\n            sum2 += i\n        if sum1 % 2 == 0 and sum2 % 2 == 0:\n            answer += str(sum1)\n            break\n        else:\n            sum1 = 0\n            sum2 = 0\n        for i in range(1, K + 1):\n            sum1 += i\n            sum2 += i\n        if sum1 % 2 == 0:\n            answer += str(sum1)\n            break\n        else:\n            sum1 = 0\n            sum2 = 0\n        for i in range(1, K + 1):\n            sum1 += i\n            sum2 += i\n        if sum1 % 2 == 0:\n            answer += str(sum1)\n            break\n        else:\n            sum1 = 0\n            sum2 = 0\n        for i in range(1, K + 1):\n            sum1 += i\n            sum2 += i\n        if sum1 % 2 == 0:\n            answer += str(sum1)\n            break\n        else:\n            sum1 = 0\n            sum2 = 0\n        for i in range(1, K + 1):\n            sum1 += i\n            sum2 += i\n        if sum1 % 2 == 0:\n            answer += str(sum1)\n            break\n        else:\n            sum1 = 0\n            sum2 = 0\n        for i in range(1, K + 1):\n            sum1 += i\n            sum2 += i\n        if sum1 % 2 == 0:\n            answer += str(sum1)\n            break\n        else:\n            sum1 = 0\n            sum2 = 0\n        for i in range(1, K + 1):\n            sum1 += i\n            sum2 += i\n        if sum1 % 2 == 0:\n            answer += str(sum1)\n            break\n        else:\n            sum1 = 0\n            sum2 = 0\n        for i in range(1, K + 1):\n            sum1 += i\n            sum2 += i\n        if sum1 % 2 == 0 and sum2 % 2 == 0:\n            answer += str(sum1)\n            break\n        else:\n            sum1 = 0\n            sum2 = 0\n        for i in range(1, K + 1):\n            sum1 += i\n            sum2 += i\n        if sum1 % 2 =="
    },
    {
        "number": 4162,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 4162,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4162,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n <= 2:\n        return str(n)\n    X = n % 10**9 + (n // 10)\n    if X >= 9:\n        X = str(X)\n        for i in range(1, 9):\n            X += \"x\"\n        return X\n    else:\n        return \"x\" + solution(X)\n"
    },
    {
        "number": 4162,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, *a = map(int, stdin.split())\n    mod = 10 ** 9 + 7\n    \n    def gcd(a, b):\n        while a!= 0:\n            a, b = b % a, a\n        return b\n    \n    for i in range(N):\n        a_i = gcd(a, a_i)\n        a_i += 1\n        a_i = gcd(a_i, mod)\n        a_i += 1\n        a_i = gcd(a_i, mod)\n    \n    for i in range(N):\n        b_i = gcd(a, a_i)\n        b_i += 1\n        b_i = gcd(b_i, mod)\n        b_i += 1\n        b_i = gcd(b_i, mod)\n        \n    print(a_i - b_i)\n"
    },
    {
        "number": 4162,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    answer = ''\n    for i in range(1,int(stdin)+1):\n        answer += str(i) + '\\n'\n    return answer\n\nprint(solution(input()))\n"
    },
    {
        "number": 4162,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n  n = int(stdin.strip())\n  a = list(map(int, stdin.strip().split()))\n  a = sorted(a)\n  m = a[-1] - a[0]\n  f = [0 for _ in range(n)]\n  \n  for i in range(n-2, -1, -1):\n    f[i] = (f[i+1] + (m - (f[i+1] % m))) % m\n  return str(f[0])\n"
    },
    {
        "number": 4162,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    mod = 10**9+7\n    div = 10**9+1\n    \n    def f(n):\n        return (n%mod)%(mod-2) + (n%mod)%(mod-4) + (n%mod)%(mod-6)\n    \n    answer = 0\n    for i in range(n):\n        answer = f(i)\n        \n    return str(answer % div)\n\nprint(solution(input()))"
    },
    {
        "number": 4162,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    a = sorted(a)\n    for i in range(N):\n        for j in range(i, N):\n            a[i] += a[j]\n            a[j] %= a[i]\n    return str(max(a))\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4162,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a_1, a_2 = map(int,stdin.split())\n    mod = 10**9+7\n    print(a_2 % mod, mod % a_1, mod % a_1 % mod)\n"
    },
    {
        "number": 4162,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = [int(stdin.strip()) for _ in range(n)]\n    a.sort()\n    f = []\n    for i in range(n):\n        f.append((a[i] - 2) % a[i])\n    return str(max(f))\n"
    },
    {
        "number": 4163,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    N = int(stdin)\n    dice_1 = list(map(int, stdin.split()))\n    dice_2 = list(map(int, stdin.split()))\n    \n    dice_1.sort()\n    dice_2.sort()\n    \n    for i in range(N-3):\n        if dice_1[i]!= dice_1[i+1] and dice_1[i]!= dice_1[i+2]:\n            return \"No\"\n            \n    for i in range(N-2):\n        if dice_1[i]!= dice_1[i+1] and dice_1[i]!= dice_1[i+2]:\n            return \"No\"\n        \n    for i in range(N-1):\n        if dice_2[i]!= dice_2[i+1] and dice_2[i]!= dice_2[i+2]:\n            return \"No\"\n            \n    for i in range(N-2):\n        if dice_2[i]!= dice_2[i+1] and dice_2[i]!= dice_2[i+2]:\n            return \"No\"\n        \n    if dice_1[-1] == dice_1[-2] == dice_1[-3] and dice_1[-2] == dice_1[-3] and dice_1[-1] == dice_1[-4]:\n        return \"Yes\"\n        \n    return \"No\""
    },
    {
        "number": 4163,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    while N>1:\n        i, j = map(int, stdin.split(' '))\n        print(i, j)\n        if i == j:\n            print('Yes')\n        elif i+j == N:\n            print('No')\n        else:\n            print('No')\n        N -= 1\n        i, j = map(int, stdin.split(' '))\n        print(i, j)\n    return 'Yes'\n\n-----Sample Output-----\nYes\n\"\"\"\ndef"
    },
    {
        "number": 4163,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, D_1, D_2, D_3 = map(int, stdin.split())\n    s_3 = []\n    for i in range(N-3):\n        s_3.append(D_1 + D_2)\n        s_3.append(D_1 - D_2)\n        s_3.append(D_2 - D_1)\n    s_3.sort()\n    for i in s_3:\n        if i == s_3[0]:\n            break\n    for i in range(0, 3):\n        if s_3[i+3] == s_3[i]:\n            break\n    if i == 0 or i == 1 or i == 3:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4163,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    result = []\n    \n    n = int(stdin[0])\n    d1 = int(stdin[1])\n    d2 = int(stdin[2])\n    \n    for _ in range(n):\n        d1_d2 = (d1 + d2) % 7\n        \n        if d1 == d2 and d1_d2 == d2:\n            result.append('Yes')\n        else:\n            result.append('No')\n        \n    return \"\".join(result)\n"
    },
    {
        "number": 4163,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    D = []\n    for i in range(N):\n        D.append(int(stdin[i]))\n    i, j, k, z = 1, 1, 0, False\n    while i < N:\n        z = D[i]\n        i += 1\n        if z == z:\n            if (i + 2) < N:\n                if D[i + 2] == D[i] and D[i + 1] == D[i]:\n                    k += 1\n                else:\n                    k = 0\n            elif (i + 2) < N:\n                k = 0\n            else:\n                z = D[i + 2]\n                i += 1\n                k = 0\n    if k == 3:\n        return \"Yes\"\n    return \"No\"\n\nInput\n3\n1 2\n4 4\n3 3\n3 2\n\nOutput\nYes\n\n3\n1 2\n4 4\n3 3\n3 2\n\n3\n1 2\n4 4\n3 3\n3 2\n\n0\n1\n1\n1\n0\n\n0\n0\n0\n0\n0\n1\n1\n1\n\n0\n0\n0\n0\n1\n1\n1\n0\n\n0\n0\n0\n0\n0\n0\n1\n1\n1\n0\n1\n0\n\n0\n0\n0\n0\n0\n1\n1\n0\n1\n0\n0\n\n0\n0\n0\n0\n0\n0\n1\n1\n1\n0\n0\n0\n0\n0\n0\n0\n1\n0\n1\n1\n\n0\n0\n0\n1\n1\n0\n\n0\n0\n0\n0\n0\n0\n1\n1\n1\n0\n1\n0\n0\n0\n\n0\n0\n0\n0\n0\n0\n1\n1\n0\n0\n0\n0\n1\n0\n1\n0\n\n1\n1\n1\n1\n1\n1\n1\n1\n1\n0\n1\n\n0\n0\n0\n0\n0\n1\n0\n0\n1\n0\n0\n0\n0\n0\n1\n0\n0\n0\n0\n0\n0\n1\n0\n0\n0\n0\n1\n1\n0\n\n0\n0\n0\n0\n0\n1\n1\n0\n0\n0\n0\n0\n0\n1\n0\n\n1\n1\n1\n0\n0\n0\n0\n1\n0\n1\n0\n1\n1\n0\n\n0\n0\n0\n0\n0\n0\n1\n1\n1\n0\n1\n\n1\n1\n1\n1\n0\n0\n\n0\n0\n0\n0\n1\n0\n\n0\n0\n1\n0\n0\n1\n0\n0\n1\n\n0\n0\n0\n0\n0\n0\n1\n0\n1\n0\n0\n1\n\n1\n1\n\n0\n0\n1\n0\n1\n1\n0\n0\n0\n0\n1\n0\n1\n0\n1\n0\n0\n0\n\n1\n1\n0\n0\n0\n0\n0\n0\n0\n0\n1\n\n1\n0\n1\n1\n0\n0\n1\n1\n0\n1\n0\n0\n0\n0\n0\n1\n1\n0\n1\n\n0\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n0\n0\n0\n0\n0\n1\n1\n1\n0\n0\n1\n1\n1\n\n1\n0\n0\n0\n0\n0\n0\n0\n0\n\n0\n0\n0\n0\n1\n0\n1\n\n0\n0\n0\n0\n1\n0\n0\n0\n0\n0\n0\n0\n0\n1\n\n0\n0\n0\n1\n0\n1\n1\n0\n0\n\n0\n1\n1\n1\n1\n1\n1\n0\n0\n\n0\n1\n0\n0\n0\n0\n0\n\n0\n0\n0\n0\n0\n0\n0\n1\n0\n0\n1\n1\n0\n0\n1\n0\n\n1\n0\n1\n0\n0\n0\n1\n0\n\n1\n0\n0\n0\n0\n0\n0\n1\n0\n0\n0\n0\n0\n0\n\n1\n0\n0\n0\n0\n1\n1\n0\n0\n\n0\n0\n0\n0\n1\n1\n0\n0\n0\n\n0\n0\n0\n0\n1\n0\n1\n1\n0\n0\n0\n0\n1\n0\n0\n1\n1\n0\n0\n0\n1\n0\n0\n1\n0\n0\n0\n1\n0\n0\n1\n0\n\n1\n0\n1\n0\n0\n0\n0\n0\n1\n0\n0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n0\n0\n1\n\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1\n0\n0\n1\n\n0\n0\n1\n1\n1\n1\n1\n0\n\n0\n1\n1\n0\n0\n0\n0\n0\n0\n1\n0\n1\n\n0\n0\n0\n1\n1\n0\n0\n0\n0\n0\n0\n0\n0\n1\n1\n0\n0\n1\n0\n0\n0\n1\n0\n\n0\n1\n1\n0\n0\n0\n1\n1\n0\n1\n0\n1\n1\n1\n0\n0\n0\n1\n0\n0\n1\n1\n0\n0\n1\n0\n1\n0\n0\n0\n1\n0\n0\n0\n1\n0\n0\n0\n0\n1\n\n0\n0\n1\n0\n0\n0\n0\n0\n0\n0\n1\n0\n0\n0\n0\n0\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1\n0\n0\n0\n0\n1\n1\n1\n1\n0\n\n0\n0\n0\n1\n0\n0\n0\n0\n0\n1\n0\n0\n1\n0\n0\n1\n0\n0\n0\n0\n1\n1\n1\n1\n0\n0\n1\n0\n0\n0\n0\n0\n0\n0\n0\n1\n0\n0\n1\n0\n1\n0\n0\n0\n0\n1\n0\n1\n1\n0\n0\n0\n1\n0\n0\n0\n0\n0\n0\n0\n1\n0\n1\n0\n0\n1\n0\n0\n0\n0\n0\n1\n0\n0\n0\n0\n0\n1\n0\n1\n1\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1\n1\n0\n0\n0\n0\n0\n1\n0\n0\n0\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1\n0\n0\n1\n0\n1\n1\n"
    },
    {
        "number": 4163,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, D = map(int, stdin.split())\n    times = [0, 0, 0]\n    D2 = [0 for _ in range(3)]\n    for _ in range(N):\n        rolls, doublets = map(int, stdin.split())\n        times[rolls - 1] += 1\n        D2[doublets - 1] += D\n    for _ in range(3):\n        if D2[_] == 0:\n            return \"No\"\n        if D2[_] == D2[_] + 1:\n            times[_] += 1\n        else:\n            times[_] = 0\n    for _ in range(3):\n        if times[_] == 3:\n            return \"Yes\"\n    return \"No\"\n\nIn the second roll of the game, the doublets could only occur once in the third roll of the game.\nThe doublets cannot be in the same position as a single doublet.\n\nThis is the game you have recently attempted.\n\n----Examples----\nsolution('5') == Yes\nsolution('1 2') == Yes\nsolution('6 6') == Yes\nsolution('4 4') == No\nsolution('3 3') == No\n\n-----Constraints-----\n- 3 \\leq N \\leq 100\n- 1\\leq D_{i,j} \\leq 6\n\n-----Input-----\n2\n5 1\n6 6\n4 4\n3 3\n3 2\n\n-----Output-----\nYes\n\nFrom the first roll of the game, the doublets could only occur once in the third roll of the game.\nThe doublets could only occur once in the second roll of the game.\n\n-----Examples----\nsolution('2') == Yes\nsolution('1 2') == No\nsolution('6 6') == No\nsolution('4 4') == Yes\nsolution('3 3') == No\n\n-----Constraints-----\n- 3 \\leq N \\leq 100\n- 1\\leq D_{i,j} \\leq 6\n\n-----Input-----\n1\n1 1\n6 6\n3 3\n3 2\n\n-----Output-----\nYes\n\nFrom the second roll of the game, the doublets could only occur once in the third roll of the game.\nThe doublets could only occur once in the first roll of the game.\n\n-----Examples----\nsolution('1') == No\nsolution('2') == No\nsolution('6 6') == No\nsolution('4 4') == Yes\nsolution('3 3') == No\n\n-----Constraints-----\n- 3 \\leq N \\leq 100\n- 1\\leq D_{i,j} \\leq 6\n\n-----Input-----\n3\n1 1\n6 6\n3 3\n3 2\n\n-----Output-----\nNo\n\nFrom the first roll of the game, the doublets could only occur once in the third roll of the game.\nThe doublets could only occur once in the second roll of the game.\n\n-----Examples----\nsolution('3') == Yes\nsolution('1 2') == Yes\nsolution('6 6') == No\nsolution('4 4') == Yes\nsolution('3 3') == Yes\n\n-----Constraints-----\n- 3 \\leq N \\leq 100\n- 1\\leq D_{i,j} \\leq 6\n\n-----Input-----\n3\n1 1\n6 6\n4 4\n3 3\n3 2\n\n-----Output-----\nYes\n\nFrom the second roll of the game, the doublets could only occur once in the third roll of the game.\nThe doublets could only occur once in the first roll of the game.\n\n-----Examples----\nsolution('1') == No\nsolution('2') == No\nsolution('6 6') == No\nsolution('4 4') == Yes\nsolution('3 3') == No\n\n-----Constraints-----\n- 3 \\leq N \\leq 100\n- 1\\leq D_{i,j} \\leq 6\n\n-----Input-----\n3\n1 1\n6 6\n4 4\n3 3\n3 2\n\n-----Output-----\nYes\n\nFrom the first roll of the game, the doublets could only occur once in the third roll of the game.\nThe doublets could only occur once in the second roll of the game.\n\n-----Examples----\nsolution('1') == Yes\nsolution('2') == Yes\nsolution('6 6') == No\nsolution('4 4') == Yes\nsolution('3 3') == Yes\n\n-----Constraints-----\n- 3 \\leq N \\leq 100\n- 1\\leq D_{i,j} \\leq 6\n\n-----Input-----\n3\n1 1\n6 6\n4 4\n3 3\n3 2\n\n-----Output-----\nNo\n\nFrom the second roll of the game, the doublets could only occur once in the third roll of the game.\nThe doublets could only occur once in the first roll of the game.\n\n-----Examples----\nsolution('3') == Yes\nsolution('1 2') == Yes\nsolution('6 6') == No\nsolution('4 4') == Yes\nsolution('3 3') == Yes\n\n-----Constraints-----\n- 3 \\leq N \\leq 100\n- 1\\leq D_{i,j} \\leq 6\n\n-----Input-----\n3\n1 1\n6 6\n4 4\n3 3\n3 2\n\n-----Output-----\nNo\n\nFrom the first roll of the game, the doublets could only occur once in the third roll of the game.\nThe doublets could only occur once in the second roll of the game.\n\n-----Examples----\nsolution('1') == No\nsolution('2') == No\nsolution('6 6') == No\nsolution('4 4') == Yes\nsolution('3 3') == No\n\n-----Constraints-----\n- 3 \\leq N \\leq 100\n- 1\\leq D_{i,j} \\leq 6\n\n-----Input-----\n3\n1 1\n6 6\n4 4\n3 3\n3 2\n\n-----Output-----\nNo\n\nFrom the second roll of the game, the doublets could only occur once in the third roll of the game.\nThe doublets could only occur once in the first roll of the game.\n\n-----Examples----\nsolution('3') == Yes\nsolution('1 2') == Yes\nsolution('6 6') == No\nsolution('4 4') == Yes\nsolution('3 3') == Yes\n\n-----Constraints-----\n- 3 \\leq N \\leq 100\n- 1\\leq D_{i,j} \\leq 6\n\n-----Input-----\n3\n1 1\n6 6\n4 4\n3 3\n3 2\n\n-----Output-----\nNo\n\nFrom the first roll of the game, the doublets could only occur once in the third roll of the game.\nThe doublets could only occur once in the second roll of the game.\n\n-----Examples----\nsolution('1') == Yes\nsolution('2') == Yes\nsolution('6 6') == No\nsolution('4 4') == Yes\nsolution('3 3') == Yes\n\n-----Constraints-----\n- 3 \\leq N \\leq 100\n- 1\\leq D_{i,j} \\leq 6\n\n-----Input-----\n3\n1 1\n6 6\n4 4\n3 3\n3 2\n\n-----Output-----\nYes\n\nFrom the second roll of the game, the doublets could only occur once in the third roll of the game.\nThe doublets could only occur once in the first roll of the game.\n\n-----Examples----\nsolution('"
    },
    {
        "number": 4163,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    d = [list(map(int, input().split())) for _ in range(n-2)]\n    result = \"\"\n    for i in range(n-3):\n        for j in range(i+1,n-1):\n            for k in range(j+1,n):\n                for l in range(k+1,n):\n                    if d[i][j] == d[i][k] == d[j][k] == d[k][l] == d[j+1][k] == d[j+2][k] == d[k+1][l] == d[k+2][l] and d[i][j]!= d[j][k] and d[i][j]!= d[k][l] and d[j][k]!= d[k][l] and d[j+1][k]!= d[j+2][k] and d[j+1][k]!= d[k+1][l] and d[j+1][k]!= d[k+2][l]:\n                        result += \"Yes\"\n                    else:\n                        result += \"No\"\n    print(result)\n\nsolution(input())\n"
    },
    {
        "number": 4163,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, D = map(int, stdin.split())\n    rolls = []\n    for i in range(N):\n        rolls.append(map(int, list(stdin)))\n    for i in range(N, N+D):\n        for j in range(i-N+1,i):\n            if rolls[i][j] == rolls[i-N+1][j-i] == rolls[i-N+2][j-i] == rolls[i-N+3][j-i] == 6:\n                return 'Yes'\n    return 'No'\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4163,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    dice = []\n    for i in range(N):\n        dice.append(int(stdin[i + 1]))\n        dice.append(int(stdin[i + 2]))\n    for i in range(N-1):\n        if dice[i]!= dice[i+1] or dice[i]!= dice[i+2]:\n            return 'No'\n    return 'Yes'"
    },
    {
        "number": 4163,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(3):\n        numbers = list(map(int, stdin.split()))\n        length = len(numbers)\n        for j in range(numbers.index(1), length):\n            if numbers[j] == numbers[j-1] == numbers[j+1]!= 1:\n                return 'Yes'\n    return 'No'\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4164,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    if r > 100:\n        return 0\n    if r == 1:\n        return 1\n    else:\n        return 2*(r**2)\nprint(solution(str))\n"
    },
    {
        "number": 4164,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    if r > 1:\n        area = 4 * (r - 1) * (r - 1)\n        return str(area)\n    else:\n        return str(1)"
    },
    {
        "number": 4164,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    for _ in range(int(stdin)):\n        r = int(stdin.split()[1])\n        if 1 < r < 100:\n            print(r)\n\ndef"
    },
    {
        "number": 4164,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(str(int(float(stdin)))*int(str(int(stdin)))))\n"
    },
    {
        "number": 4164,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return str(round(int(math.sqrt(math.pi * (2 ** 0.5)) / (math.pi * (2 ** 0.5))) / 2))"
    },
    {
        "number": 4164,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\ndef"
    },
    {
        "number": 4164,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    answer = 1\n    for i in range(2, 1001):\n        if(i*(i+1)<(4*i)):\n            answer *= i\n            \n    print(answer)\n    return answer\n\n-----Example 1 -----\nInput:\n2\n\nOutput:\n4\nExplanation:\nThe area of a circle of radius 2 is 4 times larger than the area of a circle of radius 1.\n\n-----Example 2 -----\nInput:\n3\n\nOutput:\n2\nExplanation:\nThe area of a circle of radius 3 is 2 times larger than the area of a circle of radius 1.\n\n-----Example 3 -----\nInput:\n4\n\nOutput:\n1\nExplanation:\nThe area of a circle of radius 4 is 1 times larger than the area of a circle of radius 3.\n\n-----Example 4 -----\nInput:\n5\n\nOutput:\n5\nExplanation:\nThe area of a circle of radius 5 is 5 times larger than the area of a circle of radius 3.\n\n-----Example 5 -----\nInput:\n5\n\nOutput:\n2\nExplanation:\nThe area of a circle of radius 5 is 2 times larger than the area of a circle of radius 3.\n\n-----Constraints-----\n1 \\leq r \\leq 100\n-100 \\leq r \\leq 100\n-100 \\leq r \\leq 100\n-100 \\leq r \\leq 100\n\n-----Time Complexity-----\nO(N) for i, j, k, and l, as r is always larger than the area of the circle.\nO(N) for i, j, k, and l, as r is always larger than the area of the circle.\n\n-----Space Complexity-----\nO(N) for i, j, k, and l, as r is always larger than the area of the circle.\nO(N) for i, j, k, and l, as r is always larger than the area of the circle.\n\n------Time Limitation-----\nSince O(r) is used for printing, O(1) space is used for printing.\n\n------Example 1------\nInput:\n5\nOutput:\n3\nExplanation:\nThe area of a circle of radius 5 is 3 times larger than the area of a circle of radius 1.\n\n------Example 2------\nInput:\n2\nOutput:\n1\nExplanation:\nThe area of a circle of radius 2 is 1 times larger than the area of a circle of radius 1.\n\n------Example 3------\nInput:\n2\nOutput:\n1\nExplanation:\nThe area of a circle of radius 2 is 1 times larger than the area of a circle of radius 1.\n\n------Example 4------\nInput:\n3\nOutput:\n3\nExplanation:\nThe area of a circle of radius 3 is 3 times larger than the area of a circle of radius 1.\n\n------Example 5------\nInput:\n3\nOutput:\n2\nExplanation:\nThe area of a circle of radius 3 is 2 times larger than the area of a circle of radius 1.\n\n------Constraints-----\n1 \\leq r \\leq 100\nr \\leq 100\n-100 \\leq r \\leq 100\n-100 \\leq r \\leq 100\n\n1 \\leq r \\leq 100\nr \\leq 100\n\n-----Time Complexity-----\nO(r) for i, j, k, and l, as r is always larger than the area of the circle.\nO(r) for i, j, k, and l, as r is always larger than the area of the circle.\n\n-----Space Complexity-----\nO(r) for i, j, k, and l, as r is always larger than the area of the circle.\nO(r) for i, j, k, and l, as r is always larger than the area of the circle.\n\n------Time Limitation-----\nSince O(r) is used for printing, O(1) space is used for printing.\n\n------Example 1------\nInput:\n2\nOutput:\n1\nExplanation:\nThe area of a circle of radius 2 is 1 times larger than the area of a circle of radius 1.\n\n------Example 2------\nInput:\n3\nOutput:\n3\nExplanation:\nThe area of a circle of radius 3 is 3 times larger than the area of a circle of radius 1.\n\n------Example 3------\nInput:\n3\nOutput:\n2\nExplanation:\nThe area of a circle of radius 3 is 2 times larger than the area of a circle of radius 1.\n\n------Example 4------\nInput:\n4\nOutput:\n4\nExplanation:\nThe area of a circle of radius 4 is 4 times larger than the area of a circle of radius 3.\n\n------Example 5------\nInput:\n5\nOutput:\n5\nExplanation:\nThe area of a circle of radius 5 is 5 times larger than the area of a circle of radius 3.\n\n------Constraints-----\n1 \\leq r \\leq 100\n-100 \\leq r \\leq 100\n-100 \\leq r \\leq 100\n\n1 \\leq r \\leq 100\nr \\leq 100\n\n-----Time Complexity-----\nO(r) for i, j, k, and l, as r is always larger than the area of the circle.\nO(r) for i, j, k, and l, as r is always larger than the area of the circle.\n\n-----Space Complexity-----\nO(r) for i, j, k, and l, as r is always larger than the area of the circle.\nO(r) for i, j, k, and l, as r is always larger than the area of the circle.\n\n------Time Limitation-----\nSince O(r) is used for printing, O(1) space is used for printing.\n\n------Example 1------\nInput:\n3\nOutput:\n3\nExplanation:\nThe area of a circle of radius 3 is 3 times larger than the area of a circle of radius 1.\n\n------Example 2------\nInput:\n4\nOutput:\n4\nExplanation:\nThe area of a circle of radius 4 is 4 times larger than the area of a circle of radius 3.\n\n------Example 3------\nInput:\n4\nOutput:\n4\nExplanation:\nThe area of a circle of radius 4 is 4 times larger than the area of a circle of radius 3.\n\n------Example 4------\nInput:\n5\nOutput:\n5\nExplanation:\nThe area of a circle of radius 5 is 5 times larger than the area of a circle of radius 3.\n\n------Example 5------\nInput:\n5\nOutput:\n5\nExplanation:\nThe area of a circle of radius 5 is 5 times larger than the area of a circle of radius 3.\n\n------Constraints-----\nr \\leq 100\n-100 \\leq r \\leq 100\n-100 \\leq r \\leq 100\n-100 \\leq r \\leq 100\n\n-100 \\leq r \\leq 100\nr \\leq 100\n\n-----Time Complexity-----\nO(r) for i, j, k, and l, as r is always larger than the area of the circle.\nO(r) for i, j, k, and l, as r is always larger than the area of the circle.\n\n-----Space Complexity-----\nO(r) for i, j, k, and l, as r is always larger than the area of the circle.\nO(r) for i, j, k, and l, as r is always larger than the area of the circle.\n\n------Time Limit Exceeded------\nSince O(r) is used for printing, O(1) space is used for printing.\n\n------Example 1------\nInput:\n10\nOutput:\n10\nExplanation:\nThe area of a circle of radius 10 is 10 times larger than the area of a circle of radius 9.\n\n------Example 2------\nInput:\n2\nOutput:\n1\nExplanation:\nThe area of a circle of radius 1 is 1 times larger"
    },
    {
        "number": 4164,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    if r < 1:\n        return \"error\"\n    if r == 1:\n        return 1\n    if r == 2:\n        return 4\n    return r * r * 4\n"
    },
    {
        "number": 4164,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a*b)"
    },
    {
        "number": 4164,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = 0\n    for line in stdin:\n        a += int(line)\n    return str(a)"
    },
    {
        "number": 4165,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    L = sorted([int(i) for i in stdin.split()])\n    for i in range(1, n//2 + 1):\n        if L[i] - L[i - 1] > L[i - 1] - L[i]:\n            return \"No\"\n    return \"Yes\"\n\"\"\"\n\ndef"
    },
    {
        "number": 4165,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, L = map(int, stdin.split())\n    if N == 2:\n        return 'No'\n    if N % 2 == 0:\n        return 'Yes'\n    else:\n        return 'No'\n\ndef"
    },
    {
        "number": 4165,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    def dfs(index, res):\n        if index >= n:\n            return res\n\n        if index + 1 >= n:\n            return res\n\n        a, b = dfs(index + 1, res + str(index + 1))\n        c, d = dfs(index + 2, res + str(index + 2))\n        e, f = dfs(index + 3, res + str(index + 3))\n\n        return a + '(' + b + ')' + c + '-' + d + '-' + e + '(' + f + ')', res + '\\n'\n\n    return dfs(0, '')\n\n\n\n-----Sample Output-----\nYes\nNo\n\nSince 3 < 5 = 1 + 5 + 3 = 7, it follows from the theorem that such a polygon can be drawn on a plane.\n\"\"\"\n\nfrom sys import stdin\n\n\ndef"
    },
    {
        "number": 4165,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    l = list(map(int, stdin.split()))\n    answer = 'Yes'\n    for i in range(len(l)-1):\n        if l[i] + l[i+1] <= l[i+2]:\n            answer = 'No'\n            break\n    return answer"
    },
    {
        "number": 4165,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n == 1:\n        return 'Yes'\n    else:\n        for i in range(n, n + n + 1):\n            if L_i % i == 0:\n                return 'No'\n    return 'Yes'\n"
    },
    {
        "number": 4165,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # SOLUTION\n    N = int(stdin.strip())\n    L_1 = int(stdin.strip())\n    L_2 = int(stdin.strip())\n    L_3 = int(stdin.strip())\n    L_4 = int(stdin.strip())\n    L_5 = int(stdin.strip())\n    L_6 = int(stdin.strip())\n    L_7 = int(stdin.strip())\n    L_8 = int(stdin.strip())\n    L_9 = int(stdin.strip())\n    L_10 = int(stdin.strip())\n    L_11 = int(stdin.strip())\n    L_12 = int(stdin.strip())\n    L_13 = int(stdin.strip())\n    L_14 = int(stdin.strip())\n    L_15 = int(stdin.strip())\n    L_16 = int(stdin.strip())\n    L_17 = int(stdin.strip())\n    L_18 = int(stdin.strip())\n    L_19 = int(stdin.strip())\n    L_20 = int(stdin.strip())\n    L_21 = int(stdin.strip())\n    L_22 = int(stdin.strip())\n    L_23 = int(stdin.strip())\n    L_24 = int(stdin.strip())\n    L_25 = int(stdin.strip())\n    L_26 = int(stdin.strip())\n    L_27 = int(stdin.strip())\n    L_28 = int(stdin.strip())\n    L_29 = int(stdin.strip())\n    L_30 = int(stdin.strip())\n    L_31 = int(stdin.strip())\n    L_32 = int(stdin.strip())\n    L_33 = int(stdin.strip())\n    L_34 = int(stdin.strip())\n    L_35 = int(stdin.strip())\n    L_36 = int(stdin.strip())\n    L_37 = int(stdin.strip())\n    L_38 = int(stdin.strip())\n    L_39 = int(stdin.strip())\n    L_40 = int(stdin.strip())\n    L_41 = int(stdin.strip())\n    L_42 = int(stdin.strip())\n    L_43 = int(stdin.strip())\n    L_44 = int(stdin.strip())\n    L_45 = int(stdin.strip())\n    L_46 = int(stdin.strip())\n    L_47 = int(stdin.strip())\n    L_48 = int(stdin.strip())\n    L_49 = int(stdin.strip())\n    L_50 = int(stdin.strip())\n    L_51 = int(stdin.strip())\n    L_52 = int(stdin.strip())\n    L_53 = int(stdin.strip())\n    L_54 = int(stdin.strip())\n    L_55 = int(stdin.strip())\n    L_56 = int(stdin.strip())\n    L_57 = int(stdin.strip())\n    L_58 = int(stdin.strip())\n    L_59 = int(stdin.strip())\n    L_60 = int(stdin.strip())\n    L_61 = int(stdin.strip())\n    L_62 = int(stdin.strip())\n    L_63 = int(stdin.strip())\n    L_64 = int(stdin.strip())\n    L_65 = int(stdin.strip())\n    L_66 = int(stdin.strip())\n    L_67 = int(stdin.strip())\n    L_68 = int(stdin.strip())\n    L_69 = int(stdin.strip())\n    L_70 = int(stdin.strip())\n    L_71 = int(stdin.strip())\n    L_72 = int(stdin.strip())\n    L_73 = int(stdin.strip())\n    L_74 = int(stdin.strip())\n    L_75 = int(stdin.strip())\n    L_76 = int(stdin.strip())\n    L_77 = int(stdin.strip())\n    L_78 = int(stdin.strip())\n    L_79 = int(stdin.strip())\n    L_80 = int(stdin.strip())\n    L_81 = int(stdin.strip())\n    L_82 = int(stdin.strip())\n    L_83 = int(stdin.strip())\n    L_84 = int(stdin.strip())\n    L_85 = int(stdin.strip())\n    L_86 = int(stdin.strip())\n    L_87 = int(stdin.strip())\n    L_88 = int(stdin.strip())\n    L_89 = int(stdin.strip())\n    L_90 = int(stdin.strip())\n    L_91 = int(stdin.strip())\n    L_92 = int(stdin.strip())\n    L_93 = int(stdin.strip())\n    L_94 = int(stdin.strip())\n    L_95 = int(stdin.strip())\n    L_96 = int(stdin.strip())\n    L_97 = int(stdin.strip())\n    L_98 = int(stdin.strip())\n    L_99 = int(stdin.strip())\n    L_100 = int(stdin.strip())\n    L_101 = int(stdin.strip())\n    L_102 = int(stdin.strip())\n    L_103 = int(stdin.strip())\n    L_104 = int(stdin.strip())\n    L_105 = int(stdin.strip())\n    L_106 = int(stdin.strip())\n    L_107 = int(stdin.strip())\n    L_108 = int(stdin.strip())\n    L_109 = int(stdin.strip())\n    L_110 = int(stdin.strip())\n    L_111 = int(stdin.strip())\n    L_112 = int(stdin.strip())\n    L_113 = int(stdin.strip())\n    L_114 = int(stdin.strip())\n    L_115 = int(stdin.strip())\n    L_116 = int(stdin.strip())\n    L_117 = int(stdin.strip())\n    L_118 = int(stdin.strip())\n    L_119 = int(stdin.strip())\n    L_120 = int(stdin.strip())\n    L_121 = int(stdin.strip())\n    L_122 = int(stdin.strip())\n    L_123 = int(stdin.strip())\n    L_124 = int(stdin.strip())\n    L_125 = int(stdin.strip())\n    L_126 = int(stdin.strip())\n    L_127 = int(stdin.strip())\n    L_128 = int(stdin.strip())\n    L_129 = int(stdin.strip())\n    L_130 = int(stdin.strip())\n    L_131 = int(stdin.strip())\n    L_132 = int(stdin.strip())\n    L_133 = int(stdin.strip())\n    L_134 = int(stdin.strip())\n    L_135 = int(stdin.strip())\n    L_136 = int(stdin.strip())\n    L_137 = int(stdin.strip"
    },
    {
        "number": 4165,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    l1, l2, l3 = map(int, stdin.split())\n    print(l1 + l2 + l3 - 3)\n    return"
    },
    {
        "number": 4165,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(2, int(stdin.strip())+1):\n        print(len(set(stdin.strip().split())&set(list(map(int, range(2, int(stdin.strip())+1)))+[0])))\n        return \"Yes\"\n    return \"No\"\n\nInput: A string that contains a N-sided polygon.\nOutput: If an N-sided polygon satisfying the condition can be drawn, print Yes; otherwise, print No.\n\"\"\"\n\nimport math\n\ndef"
    },
    {
        "number": 4165,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, L_1, L_2, L_3 = map(int, stdin.split())\n    if N == 1 and L_1 == L_2:\n        return \"Yes\"\n    if L_3 > L_2 + L_1:\n        return \"No\"\n    if N < 1 or L_1 > 100 or L_2 < 100 or L_3 < 100:\n        return \"No\"\n    # find number of rows\n    rows = max(L_1, L_2, L_3)\n    # find number of cols\n    cols = rows // rows\n    # if there are 2 cols, we are satisfied\n    if cols == 2:\n        # find two cols, where the longest side is shorter than the longest side of the other polygon\n        if L_1 < L_2:\n            # if the longest side is smaller, we are satisfied\n            if L_1 < L_3:\n                return \"Yes\"\n        # if the longest side is larger, we are satisfied\n        else:\n            return \"Yes\"\n    # if there are more than 2 cols, we are satisfied\n    else:\n        # set up two equal long sides\n        L_4 = [L_1, L_2, L_3, L_1]\n        L_5 = [L_2, L_3, L_1, L_2]\n        # for all 4 cols, we need to sum them all\n        sum_L4 = sum(L_4)\n        sum_L5 = sum(L_5)\n        # if there are no more than 3 cols, we are satisfied\n        if sum_L5 > sum_L4 + sum_L5:\n            return \"Yes\"\n        # if there are only two cols, we are satisfied\n        elif sum_L5 == sum_L4 + sum_L5:\n            return \"Yes\"\n        # if there are no more than 4 cols, we are satisfied\n        else:\n            return \"Yes\""
    },
    {
        "number": 4165,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, L_1, L_2, L_3 = map(int, stdin.split())\n    if N < 2 or L_1 + L_2 + L_3 > 100:\n        return \"No\"\n    L_1, L_2, L_3 = map(int, str(L_1), str(L_2), str(L_3))\n    ans = 'No'\n    for i in range(N-2):\n        L_1 = L_1 + max(0, L_2 - (L_1 + L_3) * i)\n        L_2 = L_2 + max(0, L_3 - (L_1 + L_2) * i)\n        L_3 = L_3 + max(0, L_1 - (L_2 + L_3) * i)\n        if L_1 + L_2 + L_3 > 100:\n            ans = 'No'\n            break\n    return ans\n"
    },
    {
        "number": 4166,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n  N, M = map(int, stdin.split())\n  A, B = map(int, stdin.split())\n  c = list(map(int, stdin.split()))\n  c.sort()\n\n  answer = -1\n  for i in range(N):\n    s = 0\n    for j in range(len(c)):\n      s += c[j] * A**i * B**(len(c)-j-1)\n    if s == M:\n      answer = c[-1]\n      break\n  \n  return str(answer)\n"
    },
    {
        "number": 4166,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    s_1, c_1 = map(int, stdin.split())\n    s_2, c_2 = map(int, stdin.split())\n    s_3, c_3 = map(int, stdin.split())\n    \n    # n = N\n    # m = M\n    # s = s_1\n    # c = c_1\n    # s_2 = s_2-1\n    # c_2 = c_2-1\n    # s_3 = s_3-1\n    # c_3 = c_3-1\n    # n + m = N + M\n    # n, m, s, c = N, M, s, c = s_1, c_1, s_2, c_2\n    \n    # n-1, m-1, n-2, m-2 = c\n    # n-1, m-1, n-3, m-3 = s, c\n    \n    # n, m = s, c = s_2, c_2 = s_3\n    # n, m = c, s, c = c_2, s_2 = c_3\n    \n    # n = s_1\n    # m = c_1\n    # n = c_2 = s_3\n    # n = c_3 = c_1\n    \n    # n, m = s, c = s_2, c_2 = s_3\n    \n    # n = s_1\n    # m = c_1 = c_2 = c_3 = c_1\n    \n    # n, m, s = s_2, c_2 = s_3 = s_1\n    \n    # n, m, c = c_3, c_1 = c_2\n    \n    # n = s_2\n    # m = c_2 = c_3 = c_1\n    \n    # n = c_3 = c_1 = c_2 = c_3 = s_1\n    \n    # n = s_2\n    # m = s_3 = c_1 = s_2 = c_3 = c_2 = c_3 = s_1 = c_1 = c_2 = c_3 = s_2\n    \n    # n, m = s_3, c = c_1 = c_2 = c_3 = c_1\n    # n, m, s = c_1, s_2, c_2 = c_3 = c_1 = c_2 = c_3 = c_1 = s_2\n    \n    # n, m, c = s_1, c_1 = c_2 = c_3 = s_1\n    \n    # n, m = c_1, c_2 = c_3 = c_1 = s_1 = c_2 = c_3 = c_1 = s_2\n    \n    # n, m = s_1, c = c_2 = c_3 = c_1 = c_2 = c_3 = c_1 = s_1\n    \n    # n, m, s = c_1, c_2 = c_3 = c_1 = c_2 = c_3 = c_1 = c_2 = c_3 = s_1\n    \n    # n, m, s = s_1, c_1 = c_2 = c_3 = s_1 = s_2 = c_2 = c_3 = c_1 = s_1\n    \n    # n, m, c = s_2, c_2 = s_3 = c_3 = c_2 = c_3 = s_2 = s_3 = c_2 = c_3 = s_1\n    \n    # n, m, s = s_3, c_3 = c_1 = c_2 = c_3 = s_3 = s_2 = c_2 = c_3 = c_1 = s_2\n    \n    # n, m, c = c_1, s_2 = s_3 = c_2 = s_3 = c_1 = c_2 = c_3 = c_1 = s_1 = c_2\n    \n    # n, m, s = c_2, c_3 = c_1 = s_2 = s_3 = c_1 = c_2 = c_3 = c_2 = s_1 = c_3\n    \n    # n, m = c_1, c_2 = c_3 = c_1 = c_2 = c_3 = c_1 = s_2 = s_3 = c_2 = s_3 = c_1 = s_1\n    \n    # n, m, s = c_1, s_2 = c_3 = c_1 = s_2 = c_3 = c_1 = c_2 = c_3 = c_1 = c_2 = c_3 = s_1\n    \n    # n, m = c_1, c_2 = s_3 = s_2 = c_2 = s_3 = c_1 = c_2 = c_3 = c_1 = s_1 = c_2\n    \n    # n, m = c_1, c_2 = c_3 = c_1 = s_1 = c_2 = c_3 = s_2 = c_3 = c_2 = s_1 = s_2\n    \n    # n, m = c_1, s_3 = c_2 = s_3 = c_3 = c_1 = c_2 = c_3 = c_1 = c_2 = s_1 = s_2\n    \n    # n, m = s_1, c_3 = c_2 = c_3 = c_1 = s_2 = s_3 = c_2 = c_3 = s_1 = s_2\n    \n    # n, m = c_1, c_2 = c_3 = c_1 = s_1 = c_2 = c_3 = c_1 = s_1 = s_2 = s_3 = c_1\n    \n    # n, m = s_2, c_3 = s_3 = s_2 = c_3 = c_2 = c_3 = s_1 = c_1 = c_2 = c_3 = s_1\n    \n    # n, m, s = c_1, s_2 = c_3 = s_3 = c_2 = s_1 = c_1 = s_2 = s_3 = c_3 = c_1\n    \n    # n, m, c = s_1, s_2 = s_3 = c_2 = c_3 = c_1 = c_2 = s_1 = s_2 = s_3 = c_1\n    \n    # n, m, c = s_1, c_2 = c_3 = c_1 = c_2 = c_3 = c_1 = c_2 = s_1 = s_2 = s_3 = c_1\n    \n    # n, m, s = c_1, s_2 = s_3 = c_2 = s_3 = c_1 = c_2 = c_3 = c_1 = c_2 = c_3 = s_1\n    \n    # n, m = c_1, c_2 = c_3 = c_1 = c_2 = c_3 = s_1 = s_2 = s_3"
    },
    {
        "number": 4166,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, M = list(map(int, stdin.split()))\n    c = [i for i in range(1, N + 1)]\n    s = [i for i in range(1, N + 1)]\n    for i in range(M):\n        a, b = list(map(int, stdin.split()))\n        if b not in c:\n            return \"-\"\n        else:\n            s.remove(b)\n    answer = []\n    for i in s:\n        for j in c:\n            if i == j:\n                answer.append(j)\n                break\n    return \"\".join(answer)\n"
    },
    {
        "number": 4166,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    def divisor(n: int) -> list:\n        arr = []\n        arr.append(1)\n        for i in range(2, n + 1, 2):\n            if n % i == 0:\n                arr.append(i)\n        arr.append(n)\n        return arr\n        \n    N, M = map(int, stdin.split())\n    s_i = divisor(N)\n    c_i = divisor(M)\n    for i in range(1, N + 1):\n        if s_i[i] == M:\n            for j in range(len(s_i)):\n                if i % s_i[j] == 0:\n                    if i > M:\n                        return i\n                    else:\n                        continue\n            if len(s_i) - len(c_i) > 1:\n                return -1\n            else:\n                continue\n        elif c_i[i] < M:\n            return -1\n        else:\n            continue\n    if len(s_i) - len(c_i) > 1:\n        return -1\n    else:\n        return s_i[0]\n\nprint(solution(\"1 7\"))\nprint(solution(\"3 2\"))\n\"\"\"\n    def divisor(n: int) -> list:\n        arr = []\n        arr.append(1)\n        for i in range(2, n + 1, 2):\n            if n % i == 0:\n                arr.append(i)\n        arr.append(n)\n        return arr\n    \n    N, M = map(int, input().split())\n    s_i = divisor(N)\n    c_i = divisor(M)\n    for i in range(1, N + 1):\n        if s_i[i] == M:\n            for j in range(len(s_i)):\n                if i % s_i[j] == 0:\n                    if i > M:\n                        return i\n                    else:\n                        continue\n            if len(s_i) - len(c_i) > 1:\n                return -1\n            else:\n                continue\n        elif c_i[i] < M:\n            return -1\n        else:\n            continue\n    if len(s_i) - len(c_i) > 1:\n        return -1\n    else:\n        return s_i[0]\n    \n    \n    def divisor(n: int) -> list:\n        arr = []\n        arr.append(1)\n        for i in range(2, n + 1, 2):\n            if n % i == 0:\n                arr.append(i)\n        arr.append(n)\n        return arr\n    \n    N, M = map(int, input().split())\n    s_i = divisor(N)\n    c_i = divisor(M)\n    for i in range(1, N + 1):\n        if s_i[i] == M:\n            for j in range(len(s_i)):\n                if i % s_i[j] == 0:\n                    if i > M:\n                        return i\n                    else:\n                        continue\n            if len(s_i) - len(c_i) > 1:\n                return -1\n            else:\n                continue\n        elif c_i[i] < M:\n            return -1\n        else:\n            continue\n    if len(s_i) - len(c_i) > 1:\n        return -1\n    else:\n        return s_i[0]\n    \n    \n    def divisor(n: int) -> list:\n        arr = []\n        arr.append(1)\n        for i in range(2, n + 1, 2):\n            if n % i == 0:\n                arr.append(i)\n        arr.append(n)\n        return arr\n    \n    N, M = map(int, input().split())\n    s_i = divisor(N)\n    c_i = divisor(M)\n    for i in range(1, N + 1):\n        if s_i[i] == M:\n            for j in range(len(s_i)):\n                if i % s_i[j] == 0:\n                    if i > M:\n                        return i\n                    else:\n                        continue\n            if len(s_i) - len(c_i) > 1:\n                return -1\n            else:\n                continue\n        elif c_i[i] < M:\n            return -1\n        else:\n            continue\n    if len(s_i) - len(c_i) > 1:\n        return -1\n    else:\n        return s_i[0]\n    \n    \n    \n    def divisor(n: int) -> list:\n        arr = []\n        arr.append(1)\n        for i in range(2, n + 1, 2):\n            if n % i == 0:\n                arr.append(i)\n        arr.append(n)\n        return arr\n    \n    N, M = map(int, input().split())\n    s_i = divisor(N)\n    c_i = divisor(M)\n    for i in range(1, N + 1):\n        if s_i[i] == M:\n            for j in range(len(s_i)):\n                if i % s_i[j] == 0:\n                    if i > M:\n                        return i\n                    else:\n                        continue\n            if len(s_i) - len(c_i) > 1:\n                return -1\n            else:\n                continue\n        elif c_i[i] < M:\n            return -1\n        else:\n            continue\n    if len(s_i) - len(c_i) > 1:\n        return -1\n    else:\n        return s_i[0]\n    \n    \n    def divisor(n: int) -> list:\n        arr = []\n        arr.append(1)\n        for i in range(2, n + 1, 2):\n            if n % i == 0:\n                arr.append(i)\n        arr.append(n)\n        return arr\n    \n    N, M = map(int, input().split())\n    s_i = divisor(N)\n    c_i = divisor(M)\n    for i in range(1, N + 1):\n        if s_i[i] == M:\n            for j in range(len(s_i)):\n                if i % s_i[j] == 0:\n                    if i > M:\n                        return i\n                    else:\n                        continue\n            if len(s_i) - len(c_i) > 1:\n                return -1\n            else:\n                continue\n        elif c_i[i] < M:\n            return -1\n        else:\n            continue\n    if len(s_i) - len(c_i) > 1:\n        return -1\n    else:\n        return s_i[0]\n    \n    \n    \n    def divisor(n: int) -> list:\n        arr = []\n        arr.append(1)\n        for i in range(2, n + 1, 2):\n            if n % i == 0:\n                arr.append(i)\n        arr.append(n)\n        return"
    },
    {
        "number": 4166,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    s_1, c_1, s_2, c_2 = map(int, stdin.split())\n    s_3 = s_1 + c_1\n    s_4 = s_2 + c_2\n    if (s_1 + s_2) % 10 == s_3 % 10:\n        print(-1)\n    elif s_3 % 10 == s_4 % 10:\n        print(-1)\n    elif (s_3 % 10!= s_4 % 10) and (c_2 % 10 == c_1 % 10):\n        print(min(s_1, s_2, s_3))\n    else:\n        print(min(s_1, s_2, s_3, s_4))\n    return\n"
    },
    {
        "number": 4166,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def next_index(s: str, c: int) -> int:\n        c = c % len(s)\n        return len(s) - c - 1\n    \n    n = int(input())\n    s = input()\n    c = int(input())\n    result = [0, 0]\n    for i in range(n):\n        result[1] = next_index(s, c)\n        result[0] = next_index(s[0:result[1]], c)\n        c = result[1]\n        result[0] = result[0] - 1\n    return ''.join(map(str, result))\n"
    },
    {
        "number": 4166,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    t, d = divmod(n, m)\n    \n    def s_s(t: int) -> int:\n        return 10 ** t\n    \n    def c_s(s: int) -> int:\n        return 10 ** s\n    \n    def s_cs(t: int, c: int) -> int:\n        return 10 ** (t - c)\n    \n    def d_d(s: int, c: int) -> int:\n        return 10 ** (s - c)\n    \n    def p_p(m: int, s: int, c: int) -> int:\n        return m * 10 ** s - s\n    \n    def s_d(m: int, c: int) -> int:\n        return 10 ** (m - c)\n    \n    def c_d(s: int, c: int) -> int:\n        return 10 ** (s - c)\n    \n    def p_p_c(m: int, s: int, c: int) -> int:\n        return m * 10 ** s * 10 ** c\n    \n    p_s = p_p(m, s, t)\n    s_s = s_s(s)\n    s_cs = s_cs(s, c)\n    d_d = d_d(d, c)\n    p_d = p_d(d, c)\n    \n    ans = min(min(p_d * d_d, p_s * s_cs), p_d * s_s)\n    return str(ans)\n"
    },
    {
        "number": 4166,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    c_list = list(map(int, stdin.split()))\n    for c in c_list:\n        if c > N or N % c!= 0:\n            return str(N)\n        elif c > M:\n            return str(c)\n    return str(N)\n"
    },
    {
        "number": 4166,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    s_1, c_1 = map(int, stdin.split())\n    \n    # print(s_1, c_1)\n    # print(s_1 - c_1 + 1)\n    \n    def is_valid(s_i: int, c_i: int) -> bool:\n        return 1 <= c_i <= 9 and 0 <= s_i <= 10\n    \n    def helper(s_i: int, c_i: int) -> str:\n        if s_i == 0:\n            return \"-\"\n        if c_i == 0:\n            return \"0\"\n        # print(s_i, c_i)\n        return str(s_i - c_i + 1)\n        \n    \n    def dfs(s_i: int, c_i: int, left: int, stack: list) -> None:\n        stack.append(s_i)\n        # print(stack)\n        # print(len(stack))\n        if len(stack) == N:\n            # print(\"n\")\n            # print(stack[-1])\n            # print(stack)\n            # print(\"r\")\n            # print(stack)\n            # print(\"c\")\n            # print(c_i)\n            if left < c_i and c_i!= 0:\n                # print(\"l\")\n                # print(c_i)\n                c_i = 10 - c_i\n                stack.pop()\n                # print(\"lc\")\n                # print(c_i)\n            else:\n                c_i = 10 - c_i\n                stack.pop()\n                # print(\"c\")\n                # print(c_i)\n            # print(stack)\n            # print(\"l\")\n            # print(left)\n            # print(\"r\")\n            # print(stack)\n            # print(\"lc\")\n            # print(c_i)\n        else:\n            # print(\"m\")\n            # print(stack)\n            # print(\"r\")\n            # print(stack)\n            # print(\"c\")\n            # print(c_i)\n            # print(\"l\")\n            # print(left)\n            # print(\"r\")\n            # print(stack)\n            # print(\"lc\")\n            # print(c_i)\n            # print(\"c\")\n            # print(c_i)\n            stack.pop()\n            # print(\"lc\")\n            # print(c_i)\n            # print(\"c\")\n            # print(c_i)\n            # print(\"l\")\n            # print(left)\n            # print(\"r\")\n            # print(stack)\n            # print(\"lc\")\n            # print(c_i)\n            # print(\"r\")\n            # print(left)\n            # print(\"l\")\n            # print(stack)\n            # print(\"lc\")\n            # print(c_i)\n            # print(\"r\")\n            # print(left)\n            # print(\"l\")\n            # print(stack)\n            # print(\"lc\")\n            # print(c_i)\n            # print(\"r\")\n            # print(left)\n            # print(\"l\")\n            # print(stack)\n            # print(\"lc\")\n            # print(c_i)\n            # print(\"r\")\n            # print(left)\n            # print(\"l\")\n            # print(stack)\n            # print(\"lc\")\n            # print(c_i)\n            # print(\"r\")\n            # print(left)\n            # print(\"l\")\n            # print(stack)\n            # print(\"lc\")\n            # print(c_i)\n            # print(\"r\")\n            # print(left)\n            # print(\"l\")\n            # print(stack)\n            # print(\"lc\")\n            # print(c_i)\n            # print(\"r\")\n            # print(left)\n            # print(\"l\")\n            # print(stack)\n            # print(\"lc\")\n            # print(c_i)\n            # print(\"r\")\n            # print(left)\n            # print(\"l\")\n            # print(stack)\n            # print(\"lc\")\n            # print(c_i)\n            # print(\"r\")\n            # print(left)\n            # print(\"l\")\n            # print(stack)\n            # print(\"lc\")\n            # print(c_i)\n            # print(\"r\")\n            # print(left)\n            # print(\"l\")\n            # print(stack)\n            # print(\"lc\")\n            # print(c_i)\n            # print(\"r\")\n            # print(left)\n            # print(\"l\")\n            # print(stack)\n            # print(\"lc\")\n            # print(c_i)\n            # print(\"r\")\n            # print(left)\n            # print(\"l\")\n            # print(stack)\n            # print(\"lc\")\n            # print(c_i)\n            # print(\"r\")\n            # print(left)\n            # print(\"l\")\n            # print(stack)\n            # print(\"lc\")\n            # print(c_i)\n            # print(\"r\")\n            # print(left)\n            # print(\"l\")\n            # print(stack)\n            # print(\"lc\")\n            # print(c_i)\n            # print(\"r\")\n            # print(left)\n            # print(\"l\")\n            # print(stack)\n            # print(\"lc\")\n            # print(c_i)\n            # print(\"r\")\n            # print(left)\n            # print(\"l\")\n            # print(stack)\n            # print(\"lc\")\n            # print(c_i)\n            # print(\"r\")\n            # print(left)\n            # print(\"l\")\n            # print(stack)\n            # print(\"lc\")\n            # print(c_i)\n            # print(\"r\")\n            # print(left)\n            # print(\"l\")\n            # print(stack)\n            # print(\"lc\")\n            # print(c_i)\n            # print(\"r\")\n            # print(left)\n            # print(\"l\")\n            # print(stack)\n            # print(\"lc\")\n            # print(c_i)\n            # print(\"r\")\n            # print(left)\n            # print(\"l\")\n            # print(stack)\n            # print(\"lc\")\n            # print(c_i)\n            # print(\"r\")\n            # print(left)\n            # print(\"l\")\n            # print(stack)\n            # print(\"lc\")\n            # print(c_i)\n            # print(\"r\")\n            # print(left)\n            # print(\"l\")\n            # print(stack)\n            # print(\"lc\")\n            # print(c_i)\n            # print(\"r\")\n            # print(left)\n            # print(\"l\")\n            # print(stack)\n            # print(\"lc\")\n            # print(c_i)\n            # print(\"r\")\n            # print(left)\n            # print(\"l\")\n            # print(stack)\n            # print(\"lc\")\n            # print(c_i)\n            # print(\"r\")\n            # print(left)\n            # print(\"l\")\n            # print(stack)\n            # print(\"lc\")\n            # print(c_i)\n            # print(\"r\")\n            # print(left)\n            # print"
    },
    {
        "number": 4166,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    s_1, c_1 = map(int, stdin.split())\n    s_2, c_2 = map(int, stdin.split())\n    s_3, c_3 = map(int, stdin.split())\n    \n    s_list = list()\n    \n    if s_1 + c_1 < s_2 + c_2 + c_3:\n        print(-1)\n        return\n    \n    if s_2 + c_2 + c_3 < s_1 + c_1:\n        print(-1)\n        return\n    \n    if s_3 + c_3 < s_2 + c_2:\n        print(-1)\n        return\n    \n    for i in range(1, N+1):\n        s_list.append(i)\n        s_list.append(i)\n    \n    print(s_list[s_1-1])\n    print(s_list[s_2-1])\n    print(s_list[s_3-1])\n"
    },
    {
        "number": 4167,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    a, b, c = map(int, stdin.split())\n    cnt = 0\n    for i in range(a, b+c):\n        if (a+b, b+c, i) not in answer:\n            answer.append((a+b, b+c, i))\n            cnt += 1\n    return str(cnt)\n"
    },
    {
        "number": 4167,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N,K = map(int,stdin.split())\n    i=0\n    j=0\n    answer=0\n    while(N>i):\n        j=i+j\n        while(j<N):\n            if(j==N):\n                break\n            if(K%(j%10)==0):\n                answer+=1\n            if(i%(j%10)==0):\n                answer+=1\n            j+=1\n        i+=1\n    print(answer)\n    return answer\n"
    },
    {
        "number": 4167,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n,k = map(int,stdin.split())\n    num = n*k\n    ans = 0\n    for i in range(2,num+1):\n        if i % k == 0:\n            if i % (k*k) == 0:\n                ans += 1\n    return str(ans)\n\nprint(solution(\"1 1 1\"))"
    },
    {
        "number": 4167,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    num = list(map(int,stdin.split()))\n    N = num[0]\n    K = num[1]\n    if(K == 1):\n        return str(0)\n    result = 0\n    for i in range(2, N):\n        result += max(int(str(N-i)[1:])%K, int(str(i)[1:]))\n    return str(result)"
    },
    {
        "number": 4167,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N,K = [int(i) for i in stdin.split()]\n    lst = list(map(int,stdin.split()))\n    # lst.sort()\n    result = 0\n    for i in range(len(lst)):\n        for j in range(i+1,len(lst)):\n            # print(lst)\n            for k in range(j+1,len(lst)):\n                # print(lst)\n                # print(i,j,k)\n                if lst[i]+lst[j]+lst[k]==K:\n                    result += 1\n    return str(result)\n"
    },
    {
        "number": 4167,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n,k = map(int,stdin.split())\n    answer = 0\n    for i in range(n):\n        for j in range(n):\n            if (i+j)%k == 0:\n                answer += 1\n    return answer"
    },
    {
        "number": 4167,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    N,K = map(int,stdin.split())\n    if N<K:\n        print(0)\n        return\n    \n    triple = list(map(int,input().split()))\n    N -= K\n    triple.sort()\n    \n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            for k in range(j+1,N):\n                if triple[i]+triple[j]+triple[k]==K:\n                    count += 1\n    print(count)\n    return\n"
    },
    {
        "number": 4167,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = list(map(int, stdin.split()))\n    n = a + b + c\n    triples = []\n    for i in range(1, n + 1):\n        if i * (i + 1) * (i + 2) == n:\n            triples.append(i)\n    return str(len(triples))\n"
    },
    {
        "number": 4167,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    answer = 0\n    arr = list(map(int, stdin.split()))\n    for i in range(len(arr)-2):\n        for j in range(i+1,len(arr)-1):\n            for k in range(j+1,len(arr)):\n                if arr[i]+arr[j]+arr[k]==k+1:\n                    answer += 1\n    return answer\n\ndef"
    },
    {
        "number": 4167,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N,K = map(int,stdin.split())\n    def problem(k):\n        answer = []\n        for i in range(1,N+1):\n            for j in range(i+1):\n                for k in range(j+1):\n                    if j+1+k<=N:\n                        answer.append(i+j+k)\n        return len(answer)\n    print(solution(K))\n\nExplanation\nThe number of triples (a,b,c) of positive integers not greater than N such that a+b,b+c and c+a are all multiples of K is 9.\n'''\n\nclass Solution:\n    def solution(self, N, K):\n        def is_lcm(N, K):\n            return N%K == 0 or K%N == 0\n        def problem(k):\n            answer = []\n            for i in range(1,N+1):\n                for j in range(i+1):\n                    if j+1+k<=N:\n                        answer.append(i+j+k)\n            return len(answer)\n        if K%N == 0 or N%K == 0:\n            return 0\n        return K*problem(N//K)\n\nn, k = map(int, input().split())\nprint(Solution().solution(n,k))\n"
    },
    {
        "number": 4168,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def dec(b, n):\n        if n == 0:\n            return int(b)\n        else:\n            return dec(b, n // 2) * -2 + dec(b, n // 2 + 1)\n\n    b = int(stdin.strip().split(' ')[0])\n\n    ans = dec(b, 9)\n    return str(ans)"
    },
    {
        "number": 4168,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin) % -2)"
    },
    {
        "number": 4168,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    if stdin == \"\":\n        return \"\"\n    n = int(stdin)\n    if n == 0:\n        return \"\"\n    if n == 1:\n        return \"0\"\n    prefix = \"\"\n    for i in range(2, n + 1, 2):\n        prefix += str(i) + \" \"\n    prefix = prefix.rstrip(\" \")\n    prefix = prefix.lstrip(\" \")\n    s = \"\"\n    s += prefix\n    for i in range(1, n, 2):\n        s += str(i) + \" \"\n    s = s.lstrip(\" \")\n    s = s.rstrip(\" \")\n    return s"
    },
    {
        "number": 4168,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    data = list(stdin.strip())\n    if data[0]!= '-':\n        raise ValueError('First character must be \"-\".')\n    if data[1]!= '0':\n        raise ValueError('Second character must be \"0\".')\n    if data[2]!= '1':\n        raise ValueError('Third character must be \"1\".')\n    if data[3]!= '-':\n        raise ValueError('Fourth character must be \"-\".')\n    if data[4]!= '1':\n        raise ValueError('Fifth character must be \"1\".')\n    if data[5]!= '-':\n        raise ValueError('Sixth character must be \"-\".')\n    if data[6]!= '-':\n        raise ValueError('Seventh character must be \"-\".')\n    if data[7]!= '1':\n        raise ValueError('Eighth character must be \"1\".')\n    data = list(data[8:])\n    for i in data:\n        if i!= '0':\n            raise ValueError('Every character must be \"0\".')\n    def binary_search(n,l,r):\n        while l <= r:\n            mid = (l+r)//2\n            if n == 0:\n                return mid\n            if n >= 0:\n                if n >= l and n >= mid:\n                    return mid\n                if n <= mid and n <= r:\n                    return mid\n                if n < mid and n <= l:\n                    return mid\n                if n > mid and n < r:\n                    return mid\n            if n <= 0:\n                return 0\n            if n <= -1:\n                return l\n    def generate(n,l,r):\n        if l == r:\n            return (n,0)\n        mid = binary_search(n,l,r)\n        if mid == l:\n            return (n,1)\n        elif mid == r:\n            return (n,0)\n        else:\n            return (n,1)\n    def permutations(n,l,r):\n        if l == r:\n            return [[n]]\n        mid = binary_search(n,l,r)\n        if mid == l:\n            return [[]]\n        elif mid == r:\n            return []\n        else:\n            p = permutations(n,l,mid-1)\n            q = permutations(n,mid+1,r)\n            return p + q\n    def sum(n,l,r):\n        if l == r:\n            return n\n        mid = binary_search(n,l,r)\n        if mid == l:\n            return sum(n,l,r)\n        elif mid == r:\n            return sum(n,l,mid-1)\n        else:\n            return sum(n,mid+1,r)\n    def sum_rec(n,l,r):\n        if l == r:\n            return n\n        mid = binary_search(n,l,r)\n        if mid == l:\n            return sum_rec(n,l,mid-1)\n        elif mid == r:\n            return sum_rec(n,mid+1,r)\n        else:\n            return sum_rec(n,mid+1,mid-1) + sum_rec(n,mid+1,mid-1)\n    def generate_rec(n,l,r):\n        if l == r:\n            return (n,1)\n        mid = binary_search(n,l,r)\n        if mid == l:\n            return generate_rec(n,l,mid-1)\n        elif mid == r:\n            return generate_rec(n,mid+1,r)\n        else:\n            return generate_rec(n,mid+1,mid-1)\n    def is_palindrome(n):\n        if n < 0:\n            return False\n        if n < 10:\n            return True\n        if n <= 26:\n            return True\n        n = str(n)\n        if n[0] == n[-1] or len(n) == 1:\n            return True\n        elif n[0]!= n[-1]:\n            return False\n        n = n[1:-1]\n        if len(n)%2 == 0:\n            return is_palindrome(int(n,2))\n        else:\n            return is_palindrome(int(n,10))\n    answer = [0]*10\n    for i in data:\n        if i!= '0':\n            answer[int(i)] += 1\n    for i in range(len(data)):\n        if is_palindrome(data[i]):\n            answer[data[i]] += 1\n    for i in range(len(answer)):\n        answer[i] = answer[i]*(-2**i)\n    answer = [str(i) for i in answer]\n    return \"\".join(answer)\n\"\"\"\n\nclass Solution:\n    def solveNQueens(self, n: int) -> List[List[str]]:\n        def backtracking(i, N, c):\n            if i == n:\n                return [''.join(c)]\n            res = []\n            for j in range(N):\n                if j!= i and (j+c[i] < n or c[j] == '-'):\n                    for c_j in backtracking(j, N, c):\n                        c_j = list(c_j)\n                        c_j = ''.join(c_j)\n                        if len(c_j) == n:\n                            res.append(c_j)\n                elif c[j] == '-':\n                    for c_j in backtracking(j, N, c):\n                        c_j = list(c_j)\n                        c_j = ''.join(c_j)\n                        if len(c_j) == n and c_j not in c:\n                            c.append(c_j)\n            return res\n\n        result = []\n        def helper(i):\n            for c in cnt:\n                if c[i] == '-':\n                    c[i] = '1'\n                    for j in range(len(c)):\n                        if c[j] == '1':\n                            helper(j)\n                    c[i] = '0'\n        cnt = [-1]*n\n        c = []\n        cnt = [0]*n\n        for i in range(n):\n            cnt[i] = 0\n            helper(i)\n            result.append(list(c))\n        return result"
    },
    {
        "number": 4168,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n\n    if N <= 0:\n        return str(1)\n\n    if N == 1:\n        return str(-2)\n\n    return solution(str(N - 1) + '-' + solution(str(N - 2)))\n\ndef"
    },
    {
        "number": 4168,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    for _ in range(int(stdin)):\n        number = int(stdin[0])\n        st = stmt.split(' ')\n        stmt = st[0]\n        stmt = stmt.replace(')', '(')\n        stmt = stmt.replace('(', '(')\n        stmt = stmt.replace(')', ')')\n        stmt = stmt.replace('(', '(')\n        if stmt == '+':\n            stmt = '-'\n        if stmt == '*':\n            stmt = '#'\n        if stmt == '**':\n            stmt = '('\n        if stmt == '//':\n            stmt = '!'\n        stmt = stmt.replace('.', '')\n        stmt = stmt.replace('+', '+')\n        stmt = stmt.replace('*', '*')\n        stmt = stmt.replace('-', '-')\n        stmt = stmt.replace('/', '/')\n        stmt = stmt.replace('+', '+')\n        stmt = stmt.replace('*', '*')\n        stmt = stmt.replace('-', '-')\n        stmt = stmt.replace('/', '/')\n        stmt = stmt.replace('+', '+')\n        stmt = stmt.replace('#', '#')\n        stmt = stmt.replace('!', '!')\n        stmt = stmt.replace('(', '(')\n        stmt = stmt.replace(')', ')')\n        stmt = stmt.replace('(', '(')\n        stmt = stmt.replace(')', ')')\n        stmt = stmt.replace('(', '(')\n        stmt = stmt.replace(')', ')')\n        if stmt == '+':\n            stmt = '-'\n        if stmt == '*':\n            stmt = '#'\n        if stmt == '**':\n            stmt = '!'\n        stmt = stmt.replace('.', '')\n        stmt = stmt.replace('+', '+')\n        stmt = stmt.replace('*', '*')\n        stmt = stmt.replace('-', '-')\n        stmt = stmt.replace('/', '/')\n        stmt = stmt.replace('+', '+')\n        stmt = stmt.replace('#', '#')\n        stmt = stmt.replace('!', '!')\n        stmt = stmt.replace('(', '(')\n        stmt = stmt.replace(')', ')')\n        stmt = stmt.replace('(', '(')\n        stmt = stmt.replace(')', ')')\n        stmt = stmt.replace('(', '(')\n        stmt = stmt.replace(')', ')')\n        stmt = stmt.replace('(', '(')\n        stmt = stmt.replace(')', ')')\n        if stmt == '+':\n            stmt = '-'\n        if stmt == '*':\n            stmt = '#'\n        if stmt == '**':\n            stmt = '!'\n        stmt = stmt.replace('.', '')\n        stmt = stmt.replace('+', '+')\n        stmt = stmt.replace('*', '*')\n        stmt = stmt.replace('-', '-')\n        stmt = stmt.replace('/', '/')\n        stmt = stmt.replace('+', '+')\n        stmt = stmt.replace('#', '#')\n        stmt = stmt.replace('!', '!')\n        stmt = stmt.replace('(', '(')\n        stmt = stmt.replace(')', ')')\n        stmt = stmt.replace('(', '(')\n        stmt = stmt.replace(')', ')')\n        stmt = stmt.replace('(', '(')\n        stmt = stmt.replace(')', ')')\n        stmt = stmt.replace('(', '(')\n        stmt = stmt.replace(')', ')')\n        if stmt == '+':\n            stmt = '-'\n        if stmt == '*':\n            stmt = '#'\n        if stmt == '**':\n            stmt = '!'\n        stmt = stmt.replace('.', '')\n        stmt = stmt.replace('+', '+')\n        stmt = stmt.replace('*', '*')\n        stmt = stmt.replace('-', '-')\n        stmt = stmt.replace('/', '/')\n        stmt = stmt.replace('+', '+')\n        stmt = stmt.replace('#', '#')\n        stmt = stmt.replace('!', '!')\n        stmt = stmt.replace('(', '(')\n        stmt = stmt.replace(')', ')')\n        stmt = stmt.replace('(', '(')\n        stmt = stmt.replace(')', ')')\n        if stmt == '+':\n            stmt = '-'\n        if stmt == '*':\n            stmt = '#'\n        if stmt == '**':\n            stmt = '!'\n        stmt = stmt.replace('.', '')\n        stmt = stmt.replace('+', '+')\n        stmt = stmt.replace('*', '*')\n        stmt = stmt.replace('-', '-')\n        stmt = stmt.replace('/', '/')\n        stmt = stmt.replace('+', '+')\n        stmt = stmt.replace('#', '#')\n        stmt = stmt.replace('!', '!')\n        stmt = stmt.replace('(', '(')\n        stmt = stmt.replace(')', ')')\n        stmt = stmt.replace('(', '(')\n        stmt = stmt.replace(')', ')')\n        if stmt == '+':\n            stmt = '-'\n        if stmt == '*':\n            stmt = '#'\n        if stmt == '**':\n            stmt = '!'\n        stmt = stmt.replace('.', '')\n        stmt = stmt.replace('+', '+')\n        stmt = stmt.replace('*', '*')\n        stmt = stmt.replace('-', '-')\n        stmt = stmt.replace('/', '/')\n        stmt = stmt.replace('+', '+')\n        stmt = stmt.replace('#', '#')\n        stmt = stmt.replace('!', '!')\n        stmt = stmt.replace('(', '(')\n        stmt = stmt.replace(')', ')')\n        stmt = stmt.replace('(', '(')\n        stmt = stmt.replace(')', ')')\n        stmt = stmt.replace('(', '(')\n        stmt = stmt.replace(')', ')')\n        if stmt == '+':\n            stmt = '-'\n        if stmt == '*':\n            stmt = '#'\n        if stmt == '**':\n            stmt = '!'\n        st"
    },
    {
        "number": 4168,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n <= 0:\n        return str(n)\n    if n == 1:\n        return \"1\"\n    k = 1\n    answer = []\n    while True:\n        if k == 1:\n            answer.append('-2^' + str(1) + ')')\n            break\n        if k == n:\n            answer.append('-2^' + str(1) + ')')\n            break\n        answer.append('-2^' + str(k) + ')')\n        k += 1\n    return ''.join(answer)"
    },
    {
        "number": 4168,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def solve(n: int, string: str) -> int:\n        if not string:\n            return n\n        \n        res = n * solve(n - 1, string[1:])\n        if string[0] == '0':\n            res = -2 ** (len(string) - 1) + res\n        else:\n            res = -2 ** (len(string) - 1) + res\n        return res\n        \n    \n    N = int(stdin)\n    return str(solve(N, \"\"))\n    \n\nPrint the base -2 representation of -9 is -1 + (-8) = -9.\n\n3\n1 3\n3 1\n1 3\n2 3\n3 3\n3 1\n1 3\n1 2\n1 3\n\n'''\n\nimport math\n\nclass Solution:\n    def solution(self, stdin):\n        n = int(stdin)\n        n1 = n - 1\n        result = -math.pow(2, n)\n        while n1 >= 0:\n            result += math.pow(2, n1)\n            n1 -= 1\n        return str(result)"
    },
    {
        "number": 4168,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N % 2!= 0:\n        return '0'\n    n, k = divmod(N, 2)\n    if k!= 0:\n        return solution(stdin+'1') + solution(stdin+'0')*2 + '0'*(k-1)\n    else:\n        return solution(stdin)\n\ndef"
    },
    {
        "number": 4168,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return '0'\n    x = -2 ** 0\n    y = -2 ** 1\n    z = -2 ** 2\n    for i in range(3, n + 1):\n        x += (-2 ** i)\n        y += (-2 ** (i - 1))\n        z += (-2 ** i)\n    return str(x) + str(y) + str(z)\n"
    },
    {
        "number": 4169,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    n = int(s[0])\n    m = int(s[1])\n    A = int(s[2])\n    B = int(s[3])\n    if m<A:\n        print(0)\n        return\n    if B>m:\n        print(0)\n        return\n    answer = 0\n    dp = [[0]*(B+1) for _ in range(n+1)]\n    dp[0][0] = 1\n    for i in range(1,n+1):\n        for j in range(A,B+1):\n            dp[i][j] = dp[i-1][j]\n            if A>0 and j>0:\n                dp[i][j] += dp[i-1][j-A]\n    print(dp[n][m])\n    return\n"
    },
    {
        "number": 4169,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, b = map(int, stdin.split())\n    return str(m * b)"
    },
    {
        "number": 4169,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    B = list(map(int, stdin.split()))\n    \n    i = 0\n    for i in range(N):\n        A.insert(i, max(A[i], B[i]))\n        i += 1\n        B.pop(i-1)\n        A.pop()\n    \n    print(min(A))\n    return \"\"\n\n-----Sample Input-----\n2 4\n2\n2 4\n\n-----Sample Output-----\n2\n\nWith 2 yen, we can buy one drink at the first store and four drinks at the second store, for the total of four drinks. However, we cannot buy 3 drinks with 11 yen or less.\ndef"
    },
    {
        "number": 4169,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N,M,B,B_1,B_2 = map(int,stdin.split())\n    ans = 100000000000\n    for i in range(1,N+1):\n        for j in range(1,M+1):\n            for k in range(i,N+1):\n                for l in range(j,M+1):\n                    if i>k and B_1<=B_2<=B:\n                        ans = min(ans,abs(i-k)+(j-l))\n    return str(ans)\n\"\"\"\nimport math\ndef"
    },
    {
        "number": 4169,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    stores = list(map(int, stdin.split()))\n    \n    min_amount = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            store = stores[i] * stores[j]\n            if store > m:\n                store = m\n            if store > min_amount:\n                min_amount = store\n    \n    return str(min_amount)"
    },
    {
        "number": 4169,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    A_1, B_1 = map(int, stdin.split())\n    A_2, B_2 = map(int, stdin.split())\n    A_3, B_3 = map(int, stdin.split())\n    A_4, B_4 = map(int, stdin.split())\n    A_5, B_5 = map(int, stdin.split())\n    A_6, B_6 = map(int, stdin.split())\n    A_7, B_7 = map(int, stdin.split())\n    A_8, B_8 = map(int, stdin.split())\n    A_9, B_9 = map(int, stdin.split())\n    A_10, B_10 = map(int, stdin.split())\n    A_11, B_11 = map(int, stdin.split())\n    A_12, B_12 = map(int, stdin.split())\n    \n    # B_1 +... + B_N\n    if N >= M:\n        if A_1 + B_1 >= A_2 + B_2:\n            pass\n        else:\n            return -1\n    if A_3 + B_3 >= A_4 + B_4:\n        pass\n    else:\n        return -1\n    if A_5 + B_5 >= A_6 + B_6:\n        pass\n    else:\n        return -1\n    if A_7 + B_7 >= A_8 + B_8:\n        pass\n    else:\n        return -1\n    if A_9 + B_9 >= A_10 + B_10:\n        pass\n    else:\n        return -1\n    if A_11 + B_11 >= A_12 + B_12:\n        pass\n    else:\n        return -1\n    \n    \n\"\"\"\nO(2N + M)\n\nM is bigger than N\n\nEach time you buy an M cups of energy, you buy 2 of your coins\n\nEach time you buy an M cups of energy, you buy one of your coins\n\n\"\"\""
    },
    {
        "number": 4169,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    from collections import deque\n    # deque(maxlen=1) -> [1,1,1,1]\n    d = deque()\n    d.append(int(stdin.strip()))\n    \n    while d:\n        n, k = d.popleft()\n        # n can buy k\n        if n == 1:\n            d.append(k*4)\n        elif n == 2:\n            d.append(k*6)\n        else:\n            # n can buy M\n            if k <= n:\n                d.append(k*n)\n                # now, d.pop(0)\n                # 1st element of d is now empty\n                d.append(k*(n-1))\n            else:\n                d.append(k*n)\n                d.append(k*(n-1))\n                # d.pop()\n                # 1st element of d is now empty\n                # 1st element of d is now empty\n                d.append(k*(n-1))\n    \n    return str(sum(d))\n\n\"\"\"\nint(stdin.strip())\n\uc778\ub371\uc2a4\ub294 0\ubd80\ud130 \uc2dc\uc791\ud558\ubbc0\ub85c \uc778\ub371\uc2a4\ub294 \uace0\ub824\ub418\uc5b4\uc788\ub294 \uc790\ub9ac\uc218\n\n3 2\n2 3\n1 4\n\"\"\"\n\n\"\"\"\n\uc2dc\uac04 \uc81c\ud55c    \uba54\ubaa8\ub9ac \uc81c\ud55c    \uc81c\ucd9c    \uc815\ub2f5    \ub9de\uc740 \uc0ac\ub78c    \uc815\ub2f5 \ube44\uc728\n1 \ucd08    128 MB    12842    124874    141831    30.661%\n\ubb38\uc81c\n\ub098\ub294 \ub3d9\uc77c\ud55c \uc815\ubc29\ud5a5 \uc815\uc0ac\uac01\ud615\uc73c\ub85c \ub2e4\uc2dc \ub2f4\uaca8\uc788\ub294\ub370, \uac01 \uc815\ubc29\ud5a5\uc758 \uc704\uce58\ub294 \uc11c\ub85c \uac19\uc774 \ub098\ud0c0\ub0bc \uc218 \uc788\uace0, \uc11c\ub85c \uac19\uc774 \ubb34\uc870\uac74 \uc704\uce58\ub97c \uc54c\uc544\ubcfc \uc218 \uc788\ub2e4.\n\uc608\ub97c \ub4e4\uc5b4 \uc815\ubc29\ud5a5\uc73c\ub85c \ub2f4\uaca8\uc788\ub294 \uce78\uc774 \uc8fc\uc5b4\uc84c\uc744 \ub54c, \uc704\uce58\ud55c \uac01 \uc815\ubc29\ud5a5\uc5d0 \ub300\ud558\uc5ec, \uac01 \uce78\uc774 \ubb34\uc870\uac74 \uc704\uce58\ub97c \uc54c\uc544\ub0bc \uc218 \uc788\ub294 \uce78\uc758 \uc218\ub97c \uad6c\ud558\ub294 \ud504\ub85c\uadf8\ub7a8\uc744 \uc791\uc131\ud558\uc2dc\uc624.\n\n\uc785\ub825\n\uc785\ub825\uc740 \uc544\ub798\uc640 \uac19\uc740 \ud615\uc2dd\uc73c\ub85c \uc8fc\uc5b4\uc9c4\ub2e4.\n\n1\n2\n1 2\n3 1\n\n\ucd9c\ub825\n3\n\"\"\"\ndef"
    },
    {
        "number": 4169,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, M, B = map(int, stdin.split())\n    A_1, B_1 = map(int, stdin.split())\n    A_2, B_2 = map(int, stdin.split())\n    A_3, B_3 = map(int, stdin.split())\n    A_4, B_4 = map(int, stdin.split())\n    A_5, B_5 = map(int, stdin.split())\n    \n    if (A_1 + B_1) > B or (A_2 + B_2) > B or (A_3 + B_3) > B or (A_4 + B_4) > B or (A_5 + B_5) > B:\n        return '0'\n    \n    cans = 0\n    \n    while (N > 0) and (M > 0):\n        N -= 1\n        M -= 1\n        \n        if (A_1 + B_1) <= M:\n            A_1 -= M\n            B_1 -= 1\n        else:\n            if (A_1 + B_1) >= M:\n                A_1 -= M\n                B_1 = M - 1\n            else:\n                A_1 -= M\n                B_1 -= 1\n        \n        if (A_2 + B_2) <= M:\n            A_2 -= M\n            B_2 -= 1\n        else:\n            if (A_2 + B_2) >= M:\n                A_2 -= M\n                B_2 = M - 1\n            else:\n                A_2 -= M\n                B_2 -= 1\n        \n        if (A_3 + B_3) <= M:\n            A_3 -= M\n            B_3 -= 1\n        else:\n            if (A_3 + B_3) >= M:\n                A_3 -= M\n                B_3 = M - 1\n            else:\n                A_3 -= M\n                B_3 -= 1\n        \n        if (A_4 + B_4) <= M:\n            A_4 -= M\n            B_4 -= 1\n        else:\n            if (A_4 + B_4) >= M:\n                A_4 -= M\n                B_4 = M - 1\n            else:\n                A_4 -= M\n                B_4 -= 1\n        \n        if (A_5 + B_5) <= M:\n            A_5 -= M\n            B_5 -= 1\n        else:\n            if (A_5 + B_5) >= M:\n                A_5 -= M\n                B_5 = M - 1\n            else:\n                A_5 -= M\n                B_5 -= 1\n        \n        if A_1 <= 0 or A_2 <= 0 or A_3 <= 0 or A_4 <= 0 or A_5 <= 0:\n            cans += 1\n    \n    return str(cans)"
    },
    {
        "number": 4169,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    B = list(map(int, stdin.split()))\n\n    # memoization\n    B[0] += B[1]\n    B[1] += B[2]\n    B[2] += B[3]\n    B[3] += B[4]\n    A[0] += A[1]\n    A[1] += A[2]\n    A[2] += A[3]\n    A[3] += A[4]\n\n    ans = 0\n    for i in range(1, N):\n        ans += min(A[i - 1], B[i - 1])\n        ans += max(A[i - 1] - A[i], B[i - 1] - B[i])\n\n    return str(ans)\n"
    },
    {
        "number": 4169,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, M, B, K = map(int, stdin.split())\n    ans = 0\n    for _ in range(N):\n        ans += int(stdin.split(' ')[0])\n    for _ in range(N-1):\n        for _ in range(K-1):\n            ans += int(stdin.split(' ')[1])\n    if ans >= M:\n        return str(ans)\n    else:\n        return str(ans+M)\n"
    },
    {
        "number": 4170,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    sums = [0] * 10\n    \n    for i in range(n):\n        h, c = map(int, stdin.split())\n        sums[c] += 1\n        \n        if h > sums[c]:\n            sums[c] = h\n    \n    return str(sum(sums))"
    },
    {
        "number": 4170,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, H_i = map(int, stdin.split())\n    H_s, H_t = map(int, stdin.split())\n    ret = 0\n    for i in range(N):\n        if H_i > H_s or H_i < H_t:\n            break\n        if H_s <= H_i < H_t:\n            ret += H_s - H_i\n        if H_i > H_s:\n            H_i -= H_s\n        if H_i < H_t:\n            H_i += H_t\n    return str(ret)\n\nTest.assert_equals(solution(\"5 4 8 7 3\"), \"2\")\nTest.assert_equals(solution(\"5 4 8 7 3\"), \"2\")\nTest.assert_equals(solution(\"5 4 8 7 3\"), \"3\")\nTest.assert_equals(solution(\"5 4 8 7 3\"), \"3\")\nTest.assert_equals(solution(\"5 4 8 7 3\"), \"3\")\nTest.assert_equals(solution(\"5 4 8 7 3\"), \"4\")\nTest.assert_equals(solution(\"5 4 8 7 3\"), \"4\")\nTest.assert_equals(solution(\"5 4 8 7 3\"), \"4\")\nTest.assert_equals(solution(\"5 4 8 7 3\"), \"3\")\nTest.assert_equals(solution(\"5 4 8 7 3\"), \"3\")\nTest.assert_equals(solution(\"5 4 8 7 3\"), \"2\")\nTest.assert_equals(solution(\"5 4 8 7 3\"), \"2\")\nTest.assert_equals(solution(\"5 4 8 7 3\"), \"2\")\nTest.assert_equals(solution(\"5 4 8 7 3\"), \"2\")\nTest.assert_equals(solution(\"5 4 8 7 3\"), \"1\")\nTest.assert_equals(solution(\"5 4 8 7 3\"), \"1\")\nTest.assert_equals(solution(\"5 4 8 7 3\"), \"1\")\nTest.assert_equals(solution(\"5 4 8 7 3\"), \"1\")\nTest.assert_equals(solution(\"5 4 8 7 3\"), \"1\")\nTest.assert_equals(solution(\"5 4 8 7 3\"), \"1\")\nTest.assert_equals(solution(\"5 4 8 7 3\"), \"1\")\nTest.assert_equals(solution(\"5 4 8 7 3\"), \"1\")\nTest.assert_equals(solution(\"5 4 8 7 3\"), \"1\")\nTest.assert_equals(solution(\"5 4 8 7 3\"), \"1\")\nTest.assert_equals(solution(\"5 4 8 7 3\"), \"1\")\nTest.assert_equals(solution(\"5 4 8 7 3\"), \"1\")\nTest.assert_equals(solution(\"5 4 8 7 3\"), \"1\")\nTest.assert_equals(solution(\"5 4 8 7 3\"), \"1\")\nTest.assert_equals(solution(\"5 4 8 7 3\"), \"1\")\nTest.assert_equals(solution(\"5 4 8 7 3\"), \"1\")\nTest.assert_equals(solution(\"5 4 8 7 3\"), \"1\")\nTest.assert_equals(solution(\"5 4 8 7 3\"), \"1\")\nTest.assert_equals(solution(\"5 4 8 7 3\"), \"1\")\nTest.assert_equals(solution(\"5 4 8 7 3\"), \"1\")\nTest.assert_equals(solution(\"5 4 8 7 3\"), \"1\")\nTest.assert_equals(solution(\"5 4 8 7 3\"), \"1\")\nTest.assert_equals(solution(\"5 4 8 7 3\"), \"1\")\nTest.assert_equals(solution(\"5 4 8 7 3\"), \"1\")\nTest.assert_equals(solution(\"5 4 8 7 3\"), \"1\")\nTest.assert_equals(solution(\"5 4 8 7 3\"), \"1\")\nTest.assert_equals(solution(\"5 4 8 7 3\"), \"1\")\nTest.assert_equals(solution(\"5 4 8 7 3\"), \"1\")\nTest.assert_equals(solution(\"5 4 8 7 3\"), \"1\")\nTest.assert_equals(solution(\"5 4 8 7 3\"), \"1\")\nTest.assert_equals(solution(\"5 4 8 7 3\"), \"1\")\nTest.assert_equals(solution(\"5 4 8 7 3\"), \"1\")\nTest.assert_equals(solution(\"5 4 8 7 3\"), \"1\")\nTest.assert_equals(solution(\"5 4 8 7 3\"), \"1\")\nTest.assert_equals(solution(\"5 4 8 7 3\"), \"1\")\nTest.assert_equals(solution(\"5 4 8 7 3\"), \"1\")\nTest.assert_equals(solution(\"5 4 8 7 3\"), \"1\")\nTest.assert_equals(solution(\"5 4 8 7 3\"), \"1\")\nTest.assert_equals(solution(\"5 4 8 7 3\"), \"1\")\nTest.assert_equals(solution(\"5 4 8 7 3\"), \"1\")\nTest.assert_equals(solution(\"5 4 8 7 3\"), \"1\")\nTest.assert_equals(solution(\"5 4 8 7 3\"), \"1\")\nTest.assert_equals(solution(\"5 4 8 7 3\"), \"1\")\nTest.assert_equals(solution(\"5 4 8 7 3\"), \"1\")\nTest.assert_equals(solution(\"5 4 8 7 3\"), \"1\")\nTest.assert_equals(solution(\"5 4 8 7 3\"), \"1\")\nTest.assert_equals(solution(\"5 4 8 7 3\"), \"1\")\nTest.assert_equals(solution(\"5 4 8 7 3\"), \"1\")\nTest.assert_equals(solution(\"5 4 8 7 3\"), \"1\")\nTest.assert_equals(solution(\"5 4 8 7 3\"), \"1\")\nTest.assert_equals(solution(\"5 4 8 7 3\"), \"1\")\nTest.assert_equals(solution(\"5 4 8 7 3\"), \"1\")\nTest.assert_equals(solution(\"5 4 8 7 3\"), \"1\")\nTest.assert_equals(solution(\"5 4 8 7 3\"), \"1\")\nTest.assert_equals(solution(\"5 4 8 7 3\"), \"1\")\nTest.assert_equals(solution(\"5 4 8 7 3\"), \"1\")\nTest.assert_equals(solution(\"5 4 8 7 3\"), \"1\")\nTest.assert_equals(solution(\"5 4 8 7 3\"), \"1\")\nTest.assert_equals(solution(\"5 4 8 7 3\"), \"1\")\nTest.assert_equals(solution(\"5 4 8 7 3\"), \"1\")\nTest.assert_equals(solution(\"5 4 8 7 3\"), \"1\")\nTest.assert_equals(solution(\"5 4 8 7 3\"), \"1\")\nTest.assert_equals(solution(\"5 4 8 7 3\"), \"1\")\nTest.assert_equals(solution(\"5 4 8 7 3\"), \"1\")\nTest.assert_equals(solution(\"5 4 8 7 3\"), \"1\")\nTest.assert_equals(solution(\"5 4 8 7 3\"), \"1\")\nTest.assert_equals(solution(\"5 4 8 7 3\"), \"1\")\nTest.assert_equals(solution(\"5 4 8 7 3\"), \"1\")\nTest.assert_equals(solution(\"5 4 8 7 3\"), \"1\")\nTest.assert_equals(solution(\"5 4 8 7 3\"),"
    },
    {
        "number": 4170,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N == 1:\n        return 1\n    if N % 2 == 1:\n        return solution(N // 2) + solution(N // 2 - 1)\n    else:\n        return solution(N // 2 + 1)\n\n---------------Sample Output-------------------------------\nOutput:\n2\nBy landing on the third square from the left, you can move to the right twice.\n"
    },
    {
        "number": 4170,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    N = int(stdin.split()[0])\n    H_1, H_2 = map(int, stdin.split())\n    H_1, H_2 = (H_1 - 1), (H_2 - 1)\n\n    count = 0\n    \n    for i in range(N):\n        \n        if H_1 < H_2:\n            H_1 += 1\n        else:\n            H_2 += 1\n        \n        if H_1 > H_2:\n            continue\n        \n        if H_1 == H_2:\n            count += 1\n            H_1 += 1\n            \n    return str(count)\n\"\"\"\n\ndef"
    },
    {
        "number": 4170,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    \n    h = 10**9\n    \n    H = []\n    \n    for _ in range(n):\n        H.append(int(stdin[0]))\n        \n    for i in range(1, n):\n        for j in range(i):\n            if (H[j] > H[j+1] and H[j+1] > H[j]) or (H[j] > H[j+1] and H[j+1] > H[j]):\n                h = min(h, H[j])\n        H[i] = h\n    \n    return str(H.index(min(H)))\n\n'''"
    },
    {
        "number": 4170,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, h = map(int, stdin.split(' '))\n    p1, p2 = 0, 0\n    while p2 < n:\n        p2 += 1\n        p1 += h // (p2 - p1)\n    if p1 == n:\n        p1 += 1\n    return str(p1)\n\n-----Sample Input-----\n5\n10 4 8 7 3\n\n-----Sample Output-----\n3\n\nBy landing on the third square from the left, you can move to the right twice.\ndef"
    },
    {
        "number": 4170,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    pairs = []\n    for i in range(1, n+1):\n        pairs.append((i, i+1))\n    for i in range(2, n):\n        pairs.append((i+1, i+1+pairs[i-1][0]))\n    pairs.sort()\n    for i in range(len(pairs)):\n        pairs[i] = pairs[i][1]\n    return str(pairs[-1][0])\n\n-------Expected Output-------\n2\n\n\"\"\"\n"
    },
    {
        "number": 4170,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    H_list = list(map(int, stdin.split()))\n    H_max = max(H_list)\n    i = 0\n    while i < N:\n        #find the middle\n        mid = N//2\n        #find the middle\n        if H_list[mid] > H_max:\n            H_max = H_list[mid]\n            i = mid\n        else:\n            H_max = H_list[mid]\n            i += 1\n    return str(i)"
    },
    {
        "number": 4170,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, h = [int(i) for i in stdin.split(' ')]\n    n = n * (n + 1) // 2\n\n    s = 0\n    e = n\n    while e >= s:\n        s = e\n        while h >= s:\n            print(s, e)\n            e -= 1\n        h -= 1\n\n    return str(e)\n\n\n=======\n\ndef"
    },
    {
        "number": 4170,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # using a stack\n    # if the total height of height is less than n, it means that you have moved to a new square\n    # by checking if the stack and the height of stack are the same\n    # if the stack is empty, then the heights are the same\n    # and the heights can be moved, which is smaller than n\n    # then, its possible the new height is bigger than the old one, the height is greater than n\n    # and the height is smaller than n\n    n = int(stdin.strip())\n    if n < 10**9: return str(n)\n    stack = []\n    height = []\n    for i in range(n):\n        height.append(int(stdin.strip()[i]))\n        if not stack or height[-1] < stack[-1]:\n            stack.append(height[-1])\n        else:\n            stack.pop()\n            height[-1] = height[-1] * 2\n    return str(max(stack))\n\n'''\nclass Solution:\n    def square(self,x):\n        return x**2\n    def n(self,n):\n        return n**2\n    def h(self,x):\n        return x**3\n    def solution(self,N,H):\n        return int(str(self.n(N)*self.h(H)))\n\nclass Solution:\n    def square(self,x):\n        return x**2\n    def n(self,n):\n        return n**2\n    def h(self,x):\n        return x**3\n    def solution(self,N,H):\n        return int(str(self.n(N)*self.h(H)))\n\n'''\n\nclass Solution:\n    def square(self,x):\n        return x**2\n    def n(self,n):\n        return n**2\n    def h(self,x):\n        return x**3\n    def solution(self,N,H):\n        return int(str(self.n(N)*self.h(H)))\n\ndef"
    },
    {
        "number": 4171,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    k = int(stdin.split()[1])\n    if k > len(a):\n        return \"0\"\n    else:\n        return str(len(a) - k)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4171,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    arr = list(map(int, stdin.split()))\n    print(min(map(len, zip(*arr))))"
    },
    {
        "number": 4171,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split()]\n    a = list(map(int, stdin.split()))\n    a = sorted(a)\n    if a[-1]!= k:\n        a.append(k)\n    print(len(set(a)))\n    return str(len(set(a)))\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4171,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    if k == len(a) or len(a) < k:\n        return \"0\"\n    a = a[:k]\n    a.sort()\n    a = a[-k:]\n    return str(min(a))\n\nprint(solution(input()))"
    },
    {
        "number": 4171,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    min_n = min(a)\n    min_k = k\n    \n    for n in range(1, min_n):\n        for i in range(k):\n            a[i] = a[i]/2\n        k = max(k, n)\n        \n        if k <= n:\n            min_k = min(min_k, k)\n            \n        \n    if k == min_n:\n        return '0'\n    else:\n        return str(min_k)"
    },
    {
        "number": 4171,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    # a = [1, 2, 2, 4, 5]\n    # a = [1, 2, 2, 3, 3]\n    # a = [0] * len(a)\n    # a = [0, 0, 0]\n    \n    if k >= N:\n        print(0)\n    elif k == 0:\n        return '0'\n    \n    else:\n        s = 0\n        for i in range(0, N-k+1):\n            s += a[i]\n        for i in range(k):\n            s += a[-i-1]\n        print(s)"
    },
    {
        "number": 4171,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = [0 for i in range(n)]\n    for i in range(n):\n        a[i] = int(stdin[i])\n    print(a)\n    for i in range(n):\n        a[i] = a[i] // 2\n    print(a)\n    for i in range(n-1, -1, -1):\n        a[i] = a[i] * 2\n        print(a[i])\n    \n    return str(min(k, n-k))\n\n-----Constraints-----\n1 <= n <= 10^5\n0 <= a[i] < 10^5\n\nSubmissions\nMedium\n\nHard\nThe is a strong example.\n\nThe greatest common divisor of a and b is the largest integer in the array, that is, it divides at least one element.\n\nThe equation is a = b.\n\nThe array is a quadratic formula that fits the above conditions: a = b / 2.\n\n---Constraints---\n1 <= k <= 100000\n\n1 <= n <= 100000\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4171,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    k = int(stdin.strip())\n    l = len(a)\n    \n    return str(k-sum(a[i] for i in range(l-1) if a[i] % 2)) + str(k-sum(a[i] for i in range(l-1) if a[i] % 2))\n"
    },
    {
        "number": 4171,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    # print(n, k)\n    # print(a)\n    # print(sum(a[:k]))\n    # print(sum(a[k:n]))\n    min_operations = 0\n    for i in range(k):\n        a[i] -= 1\n        if sum(a) <= 0:\n            break\n        for j in range(i, n):\n            if sum(a[:j]) <= 0:\n                break\n            if a[j]!= a[i]:\n                min_operations += 1\n                break\n        if min_operations > k:\n            break\n    return str(min_operations)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4171,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n,k = [int(i) for i in stdin.split()]\n    a = list(map(int,stdin.split()))\n    a.sort()\n    \n    return str(k*(len(a)-k)+sum(a[k:k+len(a)]) if k%2==0 else sum(a[k:k+len(a)]))\n"
    },
    {
        "number": 4172,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    answer = 1\n    for i in range(n):\n        if a[i] == 1:\n            answer += 1\n    for i in range(n-k+1):\n        answer -= 1\n        if a[i] == 1:\n            answer += 1\n    return str(answer)\n\nn, k = map(int, input().split())\nprint(solution(input()))"
    },
    {
        "number": 4172,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    \n    a = list(map(int, stdin.split()))\n    a = sorted(a, reverse=True)\n    if k % 2 == 0:\n        a[k//2] *= 2\n        a[k//2+1] *= 2\n    else:\n        a[k//2] *= 2\n        a[k//2+1] *= 2\n        \n    return str(len(a) - sum(a))\n\n\n-----Example 1-----\n\nInput\n\n3 5\n1 2 2 4 2 3\n\nOutput\n\n2\n\nExplanation\n\nThe sequence of minimum moves is as follows:\n\n  Take the minimum of $a$ and $a$ - $a_{i+1}$ and $a_{i}$, where $i$ is the index of minimum element, and $a_{i}$ denotes the $i$-th element of $a$.\n\n  To make the sequence more efficient, you can increment the minimum value of $a$ by two, then decrease the minimum value of $a$ by two.\n\n  To make the sequence more efficient, you can increment the maximum value of $a$ by two, then decrease the maximum value of $a$ by two.\n\n  To make the sequence more efficient, you can increment the minimum value of $a$ by three, then decrease the minimum value of $a$ by three.\n\n  To make the sequence more efficient, you can increment the maximum value of $a$ by three, then decrease the maximum value of $a$ by three.\n\n  To make the sequence more efficient, you can increment the minimum value of $a$ by four, then decrease the minimum value of $a$ by four.\n\n\n-----Example 2-----\n\nInput\n\n3 5\n1 2 3 2 2\n\nOutput\n\n1\n\nExplanation\n\nTo make the sequence more efficient, you can set the minimum value of $a$ by two, then decrease the minimum value of $a$ by two.\n\n  To make the sequence more efficient, you can set the minimum value of $a$ by three, then decrease the minimum value of $a$ by three.\n\n  To make the sequence more efficient, you can set the minimum value of $a$ by four, then decrease the minimum value of $a$ by four.\n\n\n-----Example 3-----\n\nInput\n\n3 5\n1 2 3 2 2\n\nOutput\n\n2\n\nExplanation\n\nTo make the sequence more efficient, you can set the minimum value of $a$ by two, then decrease the minimum value of $a$ by two.\n\n  To make the sequence more efficient, you can set the minimum value of $a$ by three, then decrease the minimum value of $a$ by three.\n\n  To make the sequence more efficient, you can set the minimum value of $a$ by four, then decrease the minimum value of $a$ by four.\n\n\n-----Constraints-----\n\n0 <= n <= 50\n\n1 <= k <= n\n\n1 <= a[i] <= 10^9\n\nThe sequence of minimum moves is as follows:\n\n  Take the minimum of $a$ and $a$ - $a_{i+1}$ and $a_{i}$, where $i$ is the index of minimum element, and $a_{i}$ denotes the $i$-th element of $a$.\n  To make the sequence more efficient, you can increment the minimum value of $a$ by two, then decrease the minimum value of $a$ by two.\n  To make the sequence more efficient, you can increment the maximum value of $a$ by two, then decrease the maximum value of $a$ by two.\n  To make the sequence more efficient, you can increment the minimum value of $a$ by three, then decrease the minimum value of $a$ by three.\n  To make the sequence more efficient, you can increment the maximum value of $a$ by four, then decrease the maximum value of $a$ by four.\n  To make the sequence more efficient, you can increment the minimum value of $a$ by five, then decrease the minimum value of $a$ by five.\n  To make the sequence more efficient, you can increment the minimum value of $a$ by six, then decrease the minimum value of $a$ by six.\n  To make the sequence more efficient, you can increment the minimum value of $a$ by seven, then decrease the minimum value of $a$ by seven.\n\n\n-----Constraints:-----\n\n1 <= n <= 100\n\n1 <= k <= n\n\n1 <= a[i] <= 10^9\n\nThe sequence of minimum moves is as follows:\n\n  Take the minimum of $a$ and $a$ - $a_{i+1}$ and $a_{i}$, where $i$ is the index of minimum element, and $a_{i}$ denotes the $i$-th element of $a$.\n  To make the sequence more efficient, you can increment the minimum value of $a$ by two, then decrease the minimum value of $a$ by two.\n  To make the sequence more efficient, you can increment the maximum value of $a$ by two, then decrease the maximum value of $a$ by two.\n  To make the sequence more efficient, you can increment the minimum value of $a$ by three, then decrease the minimum value of $a$ by three.\n  To make the sequence more efficient, you can increment the maximum value of $a$ by four, then decrease the maximum value of $a$ by four.\n  To make the sequence more efficient, you can increment the minimum value of $a$ by five, then decrease the minimum value of $a$ by five.\n  To make the sequence more efficient, you can increment the minimum value of $a$ by six, then decrease the minimum value of $a$ by six.\n  To make the sequence more efficient, you can increment the minimum value of $a$ by seven, then decrease the minimum value of $a$ by seven.\n  To make the sequence more efficient, you can increment the minimum value of $a$ by eight, then decrease the minimum value of $a$ by eight.\n  To make the sequence more efficient, you can increment the minimum value of $a$ by 9, then decrease the minimum value of $a$ by 9.\n\n\n-----In-Place-----\n\nTime Limit: 1 sec\nMemory Limit: 1GB\n\nInput Format\n\nThe first line contains a single integer $n$ denoting the number of elements in the array.\nThe second line contains $n$ space-separated integers $a[1], a[2],..., a[n].\n\nConstraints\n\n1 <= n <= 100\n1 <= a[i] <= 10^9\n\nOutput Format\n\nPrint one integer \u2014 the minimum number of moves required to obtain at least $k$ equal elements in the array.\n\n\nSample Input\n\n3 5\n3 2 3 2 3\n\nSample Output\n\n1\n\nExplanation\n\nTo make the sequence more efficient, you can set the minimum value of $a$ by two, then decrease the minimum value of $a$ by two.\n\n  To make the sequence more efficient, you can set the minimum value of $a$ by three, then decrease the minimum value of $a$ by three.\n\n  To make the sequence"
    },
    {
        "number": 4172,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def solve(a, k):\n        a = sorted(a)\n        if a[k] < 0:\n            a[k] = 0\n        elif a[k] >= 0:\n            a[k] = -1\n        else:\n            return ''\n        if a[0] == k:\n            return '0'\n        elif a[-1] == k:\n            return '0'\n        return str(solve(a[1:-1], k - a[k])) + solve(a[:-1], k)\n\n    return solve(list(map(int, stdin.strip().split())), int(stdin.strip().split()[-1]))\n\n-----Notes-----\nThe stdin and stdout arrays are for debugging purposes.\nstdin.close() is for using raw_input() to get the input from stdin.\nstdout.close() is for using raw_input() to get the output from stdout.\nYou may not copy the code of your solution into any other file.\nIt is meant that you will not need to do anything clever on your own.\n"
    },
    {
        "number": 4172,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    nums = [list(map(int, stdin.split())) for _ in range(n)]\n    moves = 0\n    for i in range(n):\n        for j in range(n):\n            if i!= j:\n                nums[i][j] += nums[j][i]\n                nums[i][j] -= 1\n            if nums[i][j] < k:\n                moves += 1\n    return str(moves)\n\nsolution(stdin)\n"
    },
    {
        "number": 4172,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return str(min([int(i) for i in stdin.split()]))"
    },
    {
        "number": 4172,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split()]\n    a = [int(i) for i in stdin.split()]\n    \n    def find_1(a, n):\n        start = 0\n        end = n\n        while end < n:\n            if a[start] <= a[end]:\n                start = end\n                end += 1\n            else:\n                end += 1\n        return end - start\n    \n    def find_2(a, n):\n        start = 0\n        end = n\n        while start < n:\n            if a[start] > a[end]:\n                start = end\n                end += 1\n            else:\n                end += 1\n        return end - start\n\n    def answer(a):\n        ans = 1\n        if len(a) == 1:\n            return ans\n\n        for i in range(1, len(a)):\n            if a[i] == a[i-1]:\n                ans += find_1(a, i)\n            else:\n                ans += find_2(a, i)\n\n        return ans\n    \n    return answer(a)\n"
    },
    {
        "number": 4172,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    minimum_number_moves = 0\n    for i in range(n):\n        m = min(a[i+1], a[i])\n        if m == a[i+1]:\n            minimum_number_moves += 1\n    \n    return str(minimum_number_moves)\n\ndef"
    },
    {
        "number": 4172,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[-1])\n    a = list(map(int, input().split()))\n    m = int(input().split()[-1])\n    \n    answer = 0\n    while m >= 0:\n        \n        for i in range(n):\n            if i == 0:\n                answer = a[i] + 1\n            else:\n                answer = max(a[i] + 1, answer)\n        m -= 1\n    print(answer)\n    return str(answer)"
    },
    {
        "number": 4172,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    a = [int(stdin[i]) for i in range(n)]\n    print(k - find_equals(a, k))\n    return str(find_equals(a, k))"
    },
    {
        "number": 4172,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # code here\n    n = int(stdin.strip())\n    k = int(stdin.strip())\n    a = list(map(int,stdin.split()))\n    a = sorted(a)\n    b = []\n    for i in range(n-1):\n        b.append(a[i]+1)\n    b.append(a[-1])\n    c = 0\n    for i in b:\n        if i>=k:\n            c+=1\n    print(c)\n    return str(c)\n    \n"
    },
    {
        "number": 4173,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n,a,b=map(int,stdin.split())\n    answer=[]\n    for i in range(1,n+1):\n        answer.append(a*i)\n        answer.append(b*i)\n    print(min(answer))"
    },
    {
        "number": 4173,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    answer = -1\n    dp = [[-1 for _ in range(a + 1)] for _ in range(n)]\n    for i in range(n):\n        x = int(stdin[i])\n        for j in range(a, b + 1):\n            dp[i][j] = dp[i][j - x]\n        dp[i][b] = x\n    for i in range(n):\n        if dp[i][a] == -1:\n            answer = 0\n            break\n        answer += dp[i][a]\n    return str(answer)\n\ndef"
    },
    {
        "number": 4173,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(min(min(int(stdin[i]) * a for i, a in enumerate(list(map(int, input().split())))), min(int(stdin[i]) * b for i, b in enumerate(list(map(int, input().split()))))))"
    },
    {
        "number": 4173,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    start = 1\n    total = 1\n    while True:\n        if start % 1000 == 0:\n            print(total)\n            total = 0\n        if total >= a and total <= b:\n            break\n        elif start > n:\n            break\n        else:\n            total += a * (start // 1000)\n            total += b * (start % 1000 // 1000)\n        start += 1\n    return str(total)\n\n\n-----Example-----\nInput\n4\n10 1 3\n7 3 2\n1 1000 1\n1000000000000 42 88\n\nOutput\n10\n9\n1000\n42000000000000\ndef"
    },
    {
        "number": 4173,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n_i = int(input())\n    a_i = int(input())\n    b_i = int(input())\n    q = int(input())\n    \n    for i in range(q):\n        a, b = map(int, input().split())\n        print(min(a_i + a, b_i + b))\n    return '\\n'.join(map(str, map(int, input().split())))"
    },
    {
        "number": 4173,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(' ')\n    q = int(lines[0])\n    N = int(lines[1])\n    a = int(lines[2])\n    b = int(lines[3])\n    answer = [0]*q\n    for i in range(q):\n        W = (N*a+b*a*b)//(N+b)\n        n_i = (i+1)*(N//2)\n        answer[i] = W+n_i\n    return '\\n'.join(map(str, answer))\n"
    },
    {
        "number": 4173,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4173,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a, b = map(int, stdin.split())\n    \n    mono = []\n    for i in range(n):\n        mono.append([a, b])\n    \n    for _ in range(m):\n        query = stdin.split()\n        query_type = query[0]\n        query_cost = int(query[1])\n        \n        if query_type == '1':\n            while mono:\n                next_mono = mono.pop(0)\n                if next_mono[0] < query_cost:\n                    mono.append([next_mono[0]+query_cost, next_mono[1]])\n        elif query_type == '2':\n            while mono:\n                next_mono = mono.pop(0)\n                if next_mono[1] < query_cost:\n                    mono.append([next_mono[0], next_mono[1]+query_cost])\n        else:\n            while mono:\n                next_mono = mono.pop(0)\n                if next_mono[0] < query_cost and next_mono[1] < query_cost:\n                    mono.append([next_mono[0]+query_cost, next_mono[1]])\n    \n    answer = '?'.join([str(i) for i in sorted(mono)])\n    return answer\n\n\n-------------------Test-------------------\n\ntest_input = ['',\n               '1',\n               '10',\n               '7',\n               '3',\n               '1',\n               '1000',\n               '1',\n               '42',\n               '88',\n               '?']\n\nassert(solution(test_input) == '10')\nassert(solution(test_input) == '9')\nassert(solution(test_input) == '1000')\nassert(solution(test_input) == '11?')\nassert(solution(test_input) == '?11')\n\ntest_input = ['',\n              '1',\n              '10',\n              '7',\n              '3',\n              '1',\n              '1000',\n              '1',\n              '42',\n              '88',\n              '?']\n\nassert(solution(test_input) == '10')\nassert(solution(test_input) == '9')\nassert(solution(test_input) == '1000')\nassert(solution(test_input) == '11?')\nassert(solution(test_input) == '?11')\n"
    },
    {
        "number": 4173,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    q, n_i, a_i, b_i = map(int, stdin.split())\n    bottles = [int(i) for i in stdin.split()]\n    return str(min(q, bottles[n_i - 1] * (a_i * (b_i - 1) + bottles[n_i - 2]) + bottles[n_i - 3]) * (q - 1))\n"
    },
    {
        "number": 4173,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin.strip())\n    a = [int(x) for x in stdin.split()]\n    b = [int(x) for x in stdin.split()]\n    \n    dp = [0] * n\n    \n    for i in range(n):\n        dp[i] = max(a[i]*b[i], b[i]*a[i])\n    \n    # dp[i] = max(a[i]*b[i], b[i]*a[i])\n    return str(sum(dp))"
    },
    {
        "number": 4174,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, X = map(int, stdin.split())\n    # print(N, X)\n    d = {}\n    for i in range(1, N):\n        d[i] = d.get(i, 0) + 1\n        # print(i, d[i])\n    # print(d)\n    for i in range(N):\n        if i == 0 or d[i] < d[i - 1]:\n            d[i] = d[i]\n        elif d[i] <= X:\n            d[i] = d[i] - 1\n        else:\n            break\n    return str(d[N])\n"
    },
    {
        "number": 4174,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, L, X = map(int, input().split())\n    return str(n) + \" \" + str(L) + \" \" + str(X)\n"
    },
    {
        "number": 4174,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    L_1, L_2, L_3, L_4, L_5 = map(int, stdin.split())\n    X = int(input())\n    count = 0\n    while X!= 0:\n        if X < L_1:\n            X += L_2\n        elif X < L_2:\n            X -= L_2\n            count += 2\n        elif X < L_3:\n            X += L_3\n        elif X < L_4:\n            X -= L_3\n            count += 2\n        elif X < L_5:\n            X += L_5\n        else:\n            break\n    print(count)\n\nSample Output\n3\nOutput for the sample input:\n2\nOutput for the sample input:\n2\n\nThe ball will make a bounce at the coordinates 0, 3, 7 and 12, among which two are less than or equal to 6.\n"
    },
    {
        "number": 4174,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, L_1, L_2, L_3, X = map(int, stdin.split())\n    D_1 = 0\n    D_2 = 0\n    D_3 = 0\n    for _ in range(N):\n        X_, L_1_, L_2_, L_3_ = map(int, stdin.split())\n        if X_ < L_1_:\n            D_1 = X_\n            X_ -= L_1_\n        elif X_ < L_2_:\n            D_2 = X_\n            X_ -= L_2_\n        elif X_ < L_3_:\n            D_3 = X_\n            X_ -= L_3_\n    print(D_1 + 2 * (D_2 - D_3))\n\"\"\"\ndef"
    },
    {
        "number": 4174,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, L_1, L_2, L_3, L_4, L_5, L_6 = map(int, stdin.split())\n    return str(N*2 - (N - 1) - 1)\n\ndef"
    },
    {
        "number": 4174,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, X = map(int, stdin.split())\n    x, y = 1, 1\n    while True:\n        while x < N:\n            print(x, end=\" \")\n            x += 1\n            if x == N:\n                break\n        y = 2\n        while y < N:\n            print(y, end=\" \")\n            y += 1\n            if y == N:\n                break\n        if x < X and y < X:\n            print(x - y, end=\" \")\n            break\n\n\"\"\"\n\nN, X = map(int, input().split())\nx, y = 1, 1\nwhile True:\n    while x < N:\n        print(x, end=\" \")\n        x += 1\n        if x == N:\n            break\n    y = 2\n    while y < N:\n        print(y, end=\" \")\n        y += 1\n        if y == N:\n            break\n    if x < X and y < X:\n        print(x - y, end=\" \")\n        break"
    },
    {
        "number": 4174,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, L = map(int, stdin.split())\n    X = sorted(list(map(int, stdin.split())))\n    count = 0\n    for i in range(N):\n        D_i = X[i]\n        D = D_i - L\n        if D >= 0:\n            count += 1\n    return count\n'''"
    },
    {
        "number": 4174,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin[0])\n    N = int(stdin[1])\n    L = list(map(int, stdin[2:]))\n    L.sort()\n    result = []\n    for i in range(N):\n        result.append(((X - L[i]) % N) + 1)\n    print(len(set(result)))\n"
    },
    {
        "number": 4174,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = 1\n    for i in range(n):\n        if x == 1:\n            x = 2\n            y = 0\n        elif x == 2:\n            x = 3\n            y = 2\n        elif x == 3:\n            x = 4\n            y = 3\n        elif x == 4:\n            x = 5\n            y = 4\n        elif x == 5:\n            x = 6\n            y = 5\n        elif x == 6:\n            x = 7\n            y = 6\n        else:\n            x = 1\n            y = 1\n        if x == y:\n            print(2)\n            break\n    else:\n        print(1)\n\n----- Sample Output -----\n1\n\nThe ball will make a bounce at the coordinates 0, 3, 7 and 12, among which two are less than or equal to 6.\n'''"
    },
    {
        "number": 4174,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, L_1, L_2, L_3, L_4, L_5, L_6 = map(int, stdin.split())\n    X = 10000\n    answer = 0\n    for i in range(N+1):\n        d = 0\n        for j in range(i+1):\n            d += L_1 + L_2\n        d -= (X - d)\n        answer += (N - d) if d < 0 else (d + L_3)\n    return str(answer)\n\n-----Sample Output-----\n2\n-----Constraints-----\n - 1 \\leq N \\leq 100\n - 1 \\leq L_i \\leq 100\n - 1 \\leq X \\leq 10000\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN X\nL_1 L_2... L_{N-1} L_N\n\n-----Output-----\nPrint the number of times the ball will make a bounce where the coordinate is at most X.\n\n-----Sample Input-----\n3 6\n3 4 5\n\n-----Sample Output-----\n2\n\nThe ball will make a bounce at the coordinates 0, 3, 7 and 12, among which two are less than or equal to 6.\ndef"
    },
    {
        "number": 4175,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    W_1, W_2 = map(str, stdin.strip().split(' '))\n    W_1 = list(W_1)\n    W_2 = list(W_2)\n    for _ in range(N):\n        if W_1[-1]!= W_2[-1]:\n            return 'No'\n        W_1.pop(-1)\n        W_2.pop(-1)\n    return 'Yes'\n\nN, W_i = map(int, input().strip().split(' '))\n\nprint(solution(W_i))"
    },
    {
        "number": 4175,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, W_1, W_2 = map(int, stdin.split())\n    if N == 0 and W_1 == W_2:\n        return 'No'\n    # 1.\n    if N % 2!= 0:\n        print('Yes')\n        return 'Yes'\n    # 2.\n    if N == 1:\n        print('No')\n        return 'No'\n\n    # 3.\n    if N <= 10:\n        print('Yes')\n        return 'Yes'\n\n    # 4.\n    print('No')\n    return 'No'\n\n\n-----Constraints-----\n - 0 <= N <= 100\n - 0 <= W_1 <= 10\n - 0 <= W_2 <= 10\n\n-----Time Limit: 1 minute\n-----Sample Runtime: 1.00 seconds\n"
    },
    {
        "number": 4175,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, W_i = map(int, stdin.split())\n    words = stdin.split()\n    \n    last_word = words[-1]\n    last_word = last_word.lower()\n    \n    if last_word!= last_word[::-1]:\n        return 'No'\n    \n    if len(words) < 10:\n        return 'Yes'\n    \n    result = []\n    \n    for i in range(10):\n        result.append(0)\n    \n    for i in range(1, len(words)):\n        result[i] = result[i-1]\n        for j in range(len(words[i])):\n            result[i] = min(result[i], 1 + words[i-1].count(words[i][j]))\n    \n    return 'Yes' if result[len(words)-1] == result[len(words)-2] else 'No'"
    },
    {
        "number": 4175,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, W_1, W_2, W_N = list(map(int, stdin.split()))\n    # print(W_1,W_2,W_N)\n    # print(N)\n    for _ in range(N):\n        W_1, W_2 = W_1[::-1], W_2[::-1]\n        # print(W_1,W_2)\n        # print(W_1,W_N)\n        # print(''.join(W_1),''.join(W_2))\n        if W_1 == W_N and W_2 == W_N:\n            return 'Yes'\n        # print('{} {}'.format(W_1,W_2))\n        # print('{} {}'.format(W_N,W_N))\n        # print(W_1,W_2)\n        # print('{} {}'.format(W_N,W_N))\n        # print('{} {}'.format(W_N,W_N))\n    return 'No'\n"
    },
    {
        "number": 4175,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return print('Yes') if Huu == 'Yes' else print('No')\n"
    },
    {
        "number": 4175,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    #\n    # TODO: Your code here\n    #\n    return 'No'\n\ndef"
    },
    {
        "number": 4175,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split('\\n')\n    N = int(words[0])\n    W = int(words[1])\n    H = int(words[2])\n    W_i = int(words[3])\n\n    W_H = []\n    for i in range(H):\n        if i!= W_i:\n            W_H.append(W_i)\n        else:\n            W_H.append('_')\n\n    answer = \"\"\n    for _ in range(N):\n        answer += ''.join(W_H)\n        W_H = []\n        for i in range(H):\n            if W_H[i] == W_H[i - W_i] and i!= H - 1:\n                W_H.append('_')\n            else:\n                W_H.append('_')\n    answer += ''.join(W_H)\n\n    return answer"
    },
    {
        "number": 4175,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, W_1, W_2, W_N = map(int, stdin.split())\n    lst = [word for word in stdin.split() if len(word) == 10]\n    lst.sort()\n    \n    # Checking if it is possible to find the answer\n    def check_word(lst: list) -> bool:\n        # Checking if the first letter of the word is same as the last\n        # letter of the word\n        for i in range(len(lst[0])):\n            if lst[0][i]!= lst[-1][i]:\n                return False\n        # Checking if all words are different\n        for i in range(1, len(lst)):\n            if lst[i]!= lst[i-1]:\n                return False\n        return True\n    \n    # checking if the first word is same as the last word\n    def check_word2(lst: list) -> bool:\n        for i in range(len(lst)):\n            if lst[i]!= lst[i-1]:\n                return False\n        return True\n    \n    # Checking the length of the last word and the number of words\n    def check_last(lst: list) -> bool:\n        if len(lst)!= 10:\n            return False\n        # Checking if the word first letter of last word is the same as the first letter of the last word\n        for i in range(10):\n            if lst[i]!= lst[i+1]:\n                return False\n        # checking if all words are different\n        for i in range(1, len(lst)):\n            if lst[i]!= lst[i-1]:\n                return False\n        return True\n        \n    # check if every word is valid\n    def check_rule(lst: list) -> bool:\n        for i in range(len(lst)):\n            # Checking if the first letter of word is same as the last letter of the word\n            if lst[i]!= lst[i+1]:\n                return False\n        # Checking if all words are different\n        for i in range(1, len(lst)):\n            if lst[i]!= lst[i-1]:\n                return False\n        return True\n        \n    # Checking if it is possible to find the answer\n    def check(lst: list) -> bool:\n        # Checking if every word is valid\n        for i in range(len(lst)):\n            # Checking if the last letter of word is same as the first letter of the word\n            if lst[i]!= lst[i+1]:\n                return False\n        # Checking if all words are valid\n        for i in range(1, len(lst)):\n            if lst[i]!= lst[i-1]:\n                return False\n        return True\n    \n    # Checking if the rules of shiritori were observed\n    # Check for valid rule\n    if check_rule(lst):\n        for i in range(len(lst)):\n            # Checking if the word first letter of word is the same as the last word\n            if lst[i]!= lst[i+1]:\n                return False\n        # Checking if all words are different\n        for i in range(1, len(lst)):\n            if lst[i]!= lst[i-1]:\n                return False\n        # Checking if the last word is valid\n        if check_last(lst):\n            return True\n        # Checking if the last word is not valid\n        if not check_word2(lst):\n            return False\n        # Checking if the last word is not valid\n        if not check_word(lst):\n            return False\n        return True\n    else:\n        return False"
    },
    {
        "number": 4175,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, W_1, W_2 = map(str, stdin.split())\n    if int(N) > 10 or int(N) < 1:\n        return 'No'\n    elif int(N) > len(W_1) or len(W_1) > len(W_2):\n        return 'No'\n    elif not W_1.islower() and not W_2.islower():\n        return 'No'\n    else:\n        W_1 = W_1.upper()\n        W_2 = W_2.upper()\n        if len(W_1) > len(W_2):\n            if W_1[0].islower():\n                W_1 = W_1[1:]\n            else:\n                W_1 = W_1[1:]\n            W_2 = W_2[1:]\n        elif len(W_2) > len(W_1):\n            if W_2[0].islower():\n                W_2 = W_2[1:]\n            else:\n                W_2 = W_2[1:]\n        if not W_1.startswith(W_2):\n            return 'No'\n        if not W_1.endswith(W_2):\n            return 'No'\n        if W_1.find(W_2) > W_2.find(W_1):\n            return 'No'\n        return 'Yes'\n\nNote:\n- N is a guaranteed positive integer, <= 100.\n- W_i is a guaranteed positive integer, <= 10.\n- W_1 and W_2 are strings of length 1, 2, and 10, respectively.\n'''\n\ndef"
    },
    {
        "number": 4175,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    words = stdin.split()\n    N = len(words)\n    for i in range(N-1):\n        word = words[i]\n        word_indicator = words[i][0]\n        last_word = words[i+1]\n        if len(word) > 1:\n            if word[0].isupper():\n                if word[-1].isupper():\n                    word = word + last_word\n                    word_indicator = word[0].lower() + word[1:]\n                else:\n                    word = word + last_word\n                    word_indicator = word[0].lower() + word[1:]\n            else:\n                if word[-1].isupper():\n                    word = word + last_word\n                    word_indicator = word[-1].lower()\n                else:\n                    word = word + last_word\n                    word_indicator = word[-1].lower()\n        words[i+1] = word\n        \n    return ''.join(words)\n\n'''\n\ndef"
    },
    {
        "number": 4176,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a,b=map(int,stdin.split())\n    count=[0]*10\n    maxCount=0\n    for i in range(a):\n        count[i]+=1\n    for i in range(b):\n        count[a+i]=count[a+i]\n        count[b+i]=count[b+i]\n    for i in range(10):\n        if count[i]==3:\n            count[i]=0\n    for i in range(10):\n        if count[i]==0:\n            count[i]+=1\n    print(count)\n    for i in range(10):\n        if count[i]==3:\n            count[i]=0\n    print(count)\n    if a>b:\n        a,b=b,a\n    print(a,b)\n    if count[a]>=3 or count[b]>=3:\n        return 'error'\n    if a<=b:\n        a,b=b,a\n    for i in range(10):\n        if count[i]==0:\n            count[i]=1\n    print(count)\n    for i in range(10):\n        if count[i]==3:\n            count[i]=0\n    for i in range(10):\n        if count[i]==0:\n            count[i]=1\n    print(count)\n    if a>b:\n        a,b=b,a\n    print(a,b)\n    if count[a]>=3 or count[b]>=3:\n        return 'error'\n    if a<=b:\n        a,b=b,a\n    print(a,b)\n    if count[a]>=3 or count[b]>=3:\n        return 'error'\n    if count[a]>=3 or count[b]>=3:\n        return 'error'\n    if count[a]==3 and count[b]==3:\n        return 'error'\n    if count[a]==3 and count[b]==0:\n        return 'error'\n    if count[a]==0 and count[b]==3:\n        return 'error'\n    if count[a]==0 and count[b]==0:\n        return 'error'\n    if count[a]>=3 or count[b]>=3:\n        return 'error'\n    if count[a]==3 or count[b]==3:\n        return 'error'\n    if count[a]==3 or count[b]==0:\n        return 'error'\n    if count[a]==0 or count[b]==0:\n        return 'error'\n    if count[a]>=3 or count[b]>=3:\n        return 'error'\n    if count[a]==3 and count[b]==0:\n        return 'error'\n    if count[a]==0 and count[b]==3:\n        return 'error'\n    if count[a]==0 and count[b]==0:\n        return 'error'\n    if count[a]==3 or count[b]==0:\n        return 'error'\n    if count[a]>=3 or count[b]>=3:\n        return 'error'\n    if count[a]==3 or count[b]==3:\n        return 'error'\n    if count[a]==3 or count[b]==0:\n        return 'error'\n    if count[a]>=3 or count[b]>=3:\n        return 'error'\n    if count[a]>=3 and count[b]>=3:\n        return 'error'\n    if count[a]>=3 or count[b]>=3:\n        return 'error'\n    if count[a]>=3 and count[b]==0:\n        return 'error'\n    if count[a]==0 or count[b]==0:\n        return 'error'\n    if count[a]>=3 or count[b]>=3:\n        return 'error'\n    if count[a]==3 or count[b]==0:\n        return 'error'\n    if count[a]>=3 and count[b]==0:\n        return 'error'\n    if count[a]==0 or count[b]==0:\n        return 'error'\n    if count[a]==0:\n        return 'error'\n    if count[a]>=3 and count[b]==3:\n        return 'error'\n    if count[a]==3 and count[b]==3:\n        return 'error'\n    if count[a]==3 or count[b]==3:\n        return 'error'\n    if count[a]==0:\n        return 'error'\n    if count[a]>=3 or count[b]>=3:\n        return 'error'\n    if count[a]>=3 and count[b]>=3:\n        return 'error'\n    if count[a]>=3 and count[b]==0:\n        return 'error'\n    if count[a]==0 or count[b]==0:\n        return 'error'\n    if count[a]>=3 and count[b]>=3:\n        return 'error'\n    if count[a]==3 and count[b]==0:\n        return 'error'\n    if count[a]==0 or count[b]==0:\n        return 'error'\n    if count[a]==3 and count[b]>0:\n        return 'error'\n    if count[a]==3 or count[b]==3:\n        return 'error'\n    if count[a]==3 or count[b]>0:\n        return 'error'\n    if count[a]==0 and count[b]>0:\n        return 'error'\n    if count[a]>=3 or count[b]>=3:\n        return 'error'\n    if count[a]==3 and count[b]==0:\n        return 'error'\n    if count[a]==0 and count[b]==3:\n        return 'error'\n    if count[a]==0 and count[b]>0:\n        return 'error'\n    if count[a]==3 and count[b]>0:\n        return 'error'\n    if count[a]==3 or count[b]==0:\n        return 'error'\n    if count[a]>=3 or count[b]>=3:\n        return 'error'\n    if count[a]==3 or count[b]==0:\n        return 'error'\n    if count[a]>=3:\n        return 'error'\n    if count[a]==0 and count[b]==3:\n        return 'error'\n    if count[a]==0:\n        return 'error'\n    if count[a]>=3:\n        return 'error'\n    if count[a]>=3:\n        return 'error'\n    if count[a]>=3:\n        return 'error'\n    if count[a]==3:\n        return 'error'\n    if count[a]==0:\n        return 'error'\n    if count[a]==3 and count[b]>3:\n        return 'error'\n    if count[a]==3 and count[b]>0:\n        return 'error'\n    if count[a]==3 and count[b]==0:\n        return 'error'\n    if count[a]==0 and count["
    },
    {
        "number": 4176,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    cnt = 0\n    while B - A >= 0:\n        if A % B == 0:\n            cnt += A // B\n            A %= B\n        else:\n            cnt += A // B\n            A %= B\n    return str(cnt)\n\n'''\n\n\ndef"
    },
    {
        "number": 4176,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a == b:\n        print(a)\n        return\n    if a % 2 == 0:\n        print(2 * a)\n        return\n    if b % 2 == 0:\n        print(3 * b)\n        return\n    if a % 3 == 0:\n        print(4 * a)\n        return\n    if b % 3 == 0:\n        print(5 * b)\n        return\n    if a % 3!= 0:\n        print(a % 3)\n        return\n    if b % 3!= 0:\n        print(b % 3)\n        return\n\n\n'''\n\ndef"
    },
    {
        "number": 4176,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n  A, B = map(int, stdin.split())\n  def pinn(p):\n    if p < 1:\n      return 0\n    else:\n      return p * pinn(p - 1)\n  return str(pinn(A) + pinn(B))\n"
    },
    {
        "number": 4176,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    snack_pieces = []\n    for i in range(n):\n        line = stdin.strip().split(\" \")\n        if line[0] == \"D\":\n            snack_pieces.append(line[1])\n        else:\n            snack_pieces.append(line[2])\n    for i in range(len(snack_pieces)):\n        if i == len(snack_pieces) - 1:\n            break\n        for j in range(i + 1, len(snack_pieces)):\n            if snack_pieces[i] == snack_pieces[j]:\n                snack_pieces[i] = snack_pieces[j]\n                snack_pieces[j] = \"D\"\n    for i in range(n):\n        if snack_pieces[i] == \"A\":\n            snack_pieces[i] = \"B\"\n        else:\n            snack_pieces[i] = \"A\"\n    min_pieces = 0\n    for i in range(len(snack_pieces)):\n        if int(snack_pieces[i]) < int(snack_pieces[i - 1]):\n            min_pieces += 1\n    return str(min_pieces)\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4176,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    cnt = 0\n    for _ in stdin:\n        n = len(_)\n        nums = list(range(n))\n        A = B = 0\n        for i in range(n):\n            nums[i] = int(nums[i])\n            if nums[i] > 0:\n                A += 1\n            else:\n                B += 1\n        if A % 2 == 1 and B % 2 == 1:\n            cnt += A\n        elif A % 2!= 1 and B % 2 == 1:\n            cnt += A + B\n        elif A % 2 == 1 and B % 2!= 1:\n            cnt += A + B + 1\n        elif A % 2!= 1 and B % 2!= 1:\n            cnt += A + B + 2\n        else:\n            cnt += 3\n    return str(cnt)\n"
    },
    {
        "number": 4176,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    A = A + B\n    B = B + A\n    if A > B:\n        A, B = B, A\n    if B > A:\n        B, A = A, B\n    if A >= B:\n        A, B = B, A\n    print(min(A, B))\n"
    },
    {
        "number": 4176,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    print(A//B)\n    print((A-B)//A)\n    print(A%B)\n    print(A*B)\n"
    },
    {
        "number": 4176,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if (a % 2 == 0) and (b % 2 == 0):\n        return 'A'\n    elif (a % 2 == 0) and (b % 2!= 0):\n        return 'B'\n    elif (a % 2!= 0) and (b % 2 == 0):\n        return 'A'\n    elif (a % 2!= 0) and (b % 2!= 0):\n        return 'B'\n    else:\n        return 'ERROR'\n\"\"\"\n\ndef"
    },
    {
        "number": 4176,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    n = A + B\n    while A > B or A < 0:\n        A = int(input())\n    while B > A or B < 0:\n        B = int(input())\n    n = n // A + (A % A)\n    if n > B:\n        n = B\n    if B == 0:\n        print(n)\n    else:\n        print(n - B)\n    return \"\"\n"
    },
    {
        "number": 4177,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\ndef"
    },
    {
        "number": 4177,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join([chr(ord(c)+x) if c.isalpha() else c for c,x in zip(*map(str.maketrans(dict.fromkeys(string.ascii_letters)),string.ascii_lowercase))])\n"
    },
    {
        "number": 4177,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    result = \"\"\n    for c in stdin:\n        if c in 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ123456789':\n            result = result + c\n    return result\n\n'''\n\ndef"
    },
    {
        "number": 4177,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join(map(lambda x: chr(ord(x) - ord('a')), stdin))\n"
    },
    {
        "number": 4177,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    import sys\n    input = sys.stdin.readline\n    s = input().strip()\n    ans = ''\n    for i in range(len(s)):\n        if s[i].isalpha():\n            ans += s[i].lower()\n        else:\n            ans += s[i]\n    print(ans)\nsolution(s)\n\"\"\"\ndef"
    },
    {
        "number": 4177,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace('s','x')\n\nTime Complexity: O(n)\nSpace Complexity: O(n)\n\n\"\"\"\nclass Solution:\n    def replaceEvery(self, s: str, x: int) -> str:\n        if not s:\n            return ''\n\n        hash_map = {}\n\n        for i in range(len(s)):\n            if not hash_map.get(s[i]):\n                hash_map[s[i]] = i\n            else:\n                hash_map[s[i]] = i\n\n        for i in range(len(s) - 1, -1, -1):\n            if s[i] == 'x':\n                s[i] = x\n                break\n\n        return \"\".join(s)\n\n\"\"\"\nTime Complexity: O(n)\nSpace Complexity: O(n)\n\n\"\"\"\nclass Solution:\n    def replaceEvery(self, s: str, x: int) -> str:\n        if not s:\n            return ''\n\n        hash_map = {s[i]: i for i in range(len(s))}\n\n        for i in range(len(s) - 1, -1, -1):\n            if s[i] == 'x':\n                s[i] = x\n                break\n\n        for i in range(len(s) - 1, -1, -1):\n            if s[i] in hash_map:\n                s[hash_map[s[i]]] = x\n\n        return \"\".join(s)\n"
    },
    {
        "number": 4177,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(len(stdin)):\n        tmp = stdin[:i] + 'x' + stdin[i+1:]\n        print(tmp)\n    return \"\"\n\n-----Sample Input-----\nsardine\n\n-----Sample Output-----\nxxxxx\n-----Explanation-----\nSardine is replaced by xxx-x\n\n\"\"\"\n"
    },
    {
        "number": 4177,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    #using the above solution we can find another way to solve this problem\n    #solution is to do some greedy with string slicing:\n    #determine the index by 1 and assign to s in string\n    #replace s in string with x\n    #solution is the good way of doing this\n    #https://www.youtube.com/watch?v=ovD2IgVX9WQ\n    #so here we have to use the method above to replace the character in the string with x, \n    #we will do this by using the's[i] = x' syntax\n    #so we will then replace the character by x in the string, so we have to use slicing\n    #then we will use the'replace' function to replace the character with x\n    \n    stdin = stdin.lower()\n    \n    for i in range(len(stdin)):\n        if i == 0:\n            stdin = stdin.replace(stdin[i], \"x\")\n        elif i == len(stdin)-1:\n            stdin = stdin.replace(stdin[i], \"x\")\n        else:\n            stdin = stdin.replace(stdin[i], \"x\")\n            stdin = stdin.replace(stdin[i-1], \"x\")\n    \n    return stdin\n    \n    \n    \n"
    },
    {
        "number": 4177,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join(x for x in map(str, re.sub(r'[^\\w]', 'x', stdin).split()) if len(x)!= 0)\n'''\n\nclass Solution:\n    def replaceLetters(self, s: str) -> str:\n        res = ''\n        for c in s:\n            if c.isalpha():\n                res += c.upper()\n            else:\n                res += c.lower()\n        return res\n\nsolution\n"
    },
    {
        "number": 4177,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join(map(str, list(map(''.join, zip(*reversed(map(lambda x: list(x.split(','))[::-1], stdin.split(' '))[::-1])))))\n\n\n\n\n\"\"\"\ndef"
    },
    {
        "number": 4178,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    \n    for i in range(N):\n        h = int(stdin[i])\n        if h < h[0]:\n            h[0], h[1] = h[1], h[0]\n        \n        if len(h) > 1:\n            h[0], h[-1] = h[-1], h[0]\n            \n            for j in range(1, len(h)):\n                h[j] = min(h[j-1], h[j])\n            \n            if h[0] > h[1]:\n                h[0], h[1] = h[1], h[0]\n        \n        if len(h) > 2:\n            h[0], h[-2] = h[-2], h[0]\n            \n            for j in range(2, len(h)):\n                h[j] = min(h[j-2], h[j-1])\n                \n                if h[j-1] > h[j-2] and h[j-2] > h[j-1] and h[j-1] > h[j]:\n                    h[j] = min(h[j-1], h[j-2])\n                \n                if h[j-1] > h[j-2] and h[j-2] > h[j-1] and h[j-1] > h[j]:\n                    h[j] = h[j-1]\n            \n        if h[0] < h[1]:\n            h[0], h[1] = h[1], h[0]\n            \n    for j in range(N-2):\n        if h[j] > h[j+1]:\n            h[j] = h[j+1]\n            \n    for j in range(N-2, 0, -1):\n        if h[j] < h[j-1] and h[j-1] > h[j]:\n            h[j] = h[j-1]\n            \n    for j in range(N-1):\n        if h[j] < h[j+1]:\n            h[j] = h[j+1]\n    \n    for j in range(N-1):\n        if h[j] > h[j+1]:\n            h[j] = h[j+1]\n    \n    for j in range(N-2, 0, -1):\n        if h[j] < h[j-1] and h[j-1] > h[j]:\n            h[j] = h[j-1]\n            \n    for j in range(N-2, 0, -1):\n        if h[j] > h[j-1]:\n            h[j] = h[j-1]\n    \n    for i in range(N):\n        if h[i] < h[i+1]:\n            h[i] = h[i+1]\n    \n    for i in range(N):\n        if h[i] < h[i+1]:\n            h[i] = h[i+1]\n    \n    for i in range(N):\n        if h[i] < h[i-1]:\n            h[i] = h[i-1]\n    \n    for i in range(N-1):\n        if h[i] < h[i+1]:\n            h[i] = h[i+1]\n    \n    for i in range(N):\n        if h[i] < h[i-1]:\n            h[i] = h[i-1]\n    \n    for i in range(N):\n        if h[i] < h[i-1]:\n            h[i] = h[i-1]\n    \n    for i in range(N-1):\n        if h[i] < h[i+1]:\n            h[i] = h[i+1]\n    \n    for i in range(N):\n        if h[i] < h[i+1]:\n            h[i] = h[i+1]\n    \n    for i in range(N-2, 0, -1):\n        if h[i] < h[i-1] and h[i-1] > h[i]:\n            h[i] = h[i-1]\n            \n    for i in range(N-2, 0, -1):\n        if h[i] < h[i+1]:\n            h[i] = h[i+1]\n    \n    for i in range(N-2, 0, -1):\n        if h[i] < h[i-1]:\n            h[i] = h[i-1]\n    \n    for i in range(N-1, 0, -1):\n        if h[i] < h[i+1]:\n            h[i] = h[i+1]\n    \n    for i in range(N-1):\n        if h[i] < h[i+1]:\n            h[i] = h[i+1]\n    \n    for i in range(N-2, 0, -1):\n        if h[i] < h[i-1]:\n            h[i] = h[i-1]\n    \n    for i in range(N-2, 0, -1):\n        if h[i] < h[i-1]:\n            h[i] = h[i-1]\n    \n    for i in range(N-1):\n        if h[i] < h[i+1]:\n            h[i] = h[i+1]\n    \n    for i in range(N-2, 0, -1):\n        if h[i] < h[i-1]:\n            h[i] = h[i-1]\n    \n    for i in range(N-1):\n        if h[i] < h[i+1]:\n            h[i] = h[i+1]\n    \n    for i in range(N-2, 0, -1):\n        if h[i] < h[i-1]:\n            h[i] = h[i-1]\n    \n    for i in range(N-2, 0, -1):\n        if h[i] < h[i-1]:\n            h[i] = h[i-1]\n    \n    if h[0] > h[1]:\n        h[0], h[1] = h[1], h[0]\n        \n    if len(h) > 2:\n        h[0], h[-2] = h[-2], h[0]\n        \n        for j in range(2, len(h)):\n            h[j] = min(h[j-2], h[j-1])\n        \n        if h[0] > h[1]:\n            h[0], h[1] = h[1], h[0]\n        \n        if h[0] > h[1]:\n            h[0], h[1] = h[1], h[0]\n        \n        if h[0] > h[1]:\n            h[0], h[1] = h[1], h[0]\n    \n    if h[0] < h[1]:\n        h[0], h[1] = h[1], h[0]\n        \n    if len(h) > 2:\n        h[0], h[-2] = h[-2], h[0]\n        \n        for j in range(2"
    },
    {
        "number": 4178,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n  n = int(stdin.strip())\n  height = [int(i) for i in stdin.split()]\n  if n < 2:\n    return 'No'\n  if n % 2 == 0:\n    return 'No'\n  if height[0] < height[1]:\n    return 'No'\n  if height[-1] < height[-2]:\n    return 'No'\n  if height[0] > height[-1]:\n    return 'No'\n  for i in range(1, n):\n    if height[i] < height[i-1]:\n      return 'No'\n  return 'Yes'\n\n'''\n\nfrom collections import deque\n\ndef"
    },
    {
        "number": 4178,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n  N = int(stdin)\n  if N % 2 == 0:\n    print(\"Yes\")\n    return\n  \n  height = 1\n  for i in range(N):\n    height *= (i + 1)\n  if height % 2 == 0:\n    print(\"Yes\")\n    return\n  else:\n    print(\"No\")\n    return\n\nprint(solution(str(input())))\n\n###############\ndef"
    },
    {
        "number": 4178,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    result = False\n    for i in range(1, int(len(stdin)/2)):\n        if stdin[i-1] < stdin[i] and stdin[i] < stdin[i-1] and stdin[i-1] < stdin[i+1]:\n            result = True\n            \n    if result == False:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n        \n                \n    "
    },
    {
        "number": 4178,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(int(stdin)):\n        if i%2==1:\n            if stdin[i]>=stdin[i+1]:\n                stdin[i+1]=stdin[i]\n                stdin[i]=stdin[i+1]\n                stdin[i-1]=-stdin[i]\n                stdin[i]=stdin[i-1]\n            else:\n                stdin[i-1]=-stdin[i]\n                stdin[i]=stdin[i-1]\n        else:\n            stdin[i-1]=-stdin[i]\n            stdin[i]=stdin[i-1]\n    return \"Yes\" if all(stdin[i] for i in range(int(stdin[0]))) else \"No\"\n"
    },
    {
        "number": 4178,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    for _ in range(len(stdin) // 2):\n        h, w = map(int, stdin.split())\n        for i in range(w - 1, -1, -1):\n            h -= 1\n            for j in range(i + 1, w):\n                h += 1\n                if not (h < 1 or h == 1):\n                    return 'Yes'\n    return 'No'"
    },
    {
        "number": 4178,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    H = [int(stdin.strip()) for stdin in stdin.split()]\n    H.sort(reverse=True)\n    for i in range(N):\n        if H[i] < H[i+1]:\n            return 'No'\n    return 'Yes'\n\nInput:\n10\n1 2 1 1 3\nOutput:\nYes\nExplanation:\n1\n2\n3\n1\n3\n3\n1\n4\n1\n5\n5\n2\n5\n\nOutput:\nNo\n\nInput:\n5\n1 1 1 3 2\n\nOutput:\nNo\n\nInput:\n5\n1 1 1 3 4\n5\n1 2 1 1 2\n5\n1 3 1 1 3\n5\n2 1 2 1 2\n5\n1 3 1 1 3\n\nOutput:\nNo\n\nInput:\n5\n1 1 1 3 4\n5\n1 2 1 1 2\n5\n1 3 1 1 3\n5\n2 1 2 1 2\n5\n1 3 1 1 3\n\nOutput:\nNo\n\nInput:\n5\n1 2 1 1 3\n5\n1 2 1 1 2\n5\n1 3 1 1 3\n5\n2 1 2 1 2\n5\n1 3 1 1 3\n\nOutput:\nYes\n\nConstraints:\n1 <= N <= 10^5\n-10^5 <= H[i] <= 10^5\n\n------------------\n"
    },
    {
        "number": 4178,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    H = list(map(int, stdin.strip().split()))\n    H_list = list(map(lambda x: x ** 2, H))\n    H_list.sort()\n    for i in range(N):\n        if H_list[i] > H[i]:\n            H[i] = H_list[i]\n    if len(H_list) == N:\n        return 'Yes'\n    else:\n        return 'No'\n\n[Input]\n\n[Output]\n\n[1, 1]\n\n[2, 3]\n\n[1, 2]\n\n[3, 1]\n\n[1, 3]\n\n[2, 3]\n\n[1, 2, 1]\n\n[3, 1, 1]\n\n[2, 3, 1]\n\n[1, 3, 1]\n\n[2, 3, 2]\n\n[1, 2, 3]\n\n[2, 3, 1]\n\n[3, 2, 1]\n\n[3, 1, 1]\n\n[2, 3, 2]\n\n[1, 2, 3]\n\n[2, 3, 2]\n\n[3, 1, 1]\n\n[3, 1, 3]\n\n[2, 3, 3]\n\n[3, 2, 3]\n\n[1, 2, 3]\n\n[2, 3, 3]\n\n[1, 3, 3]\n\n[2, 3, 3]\n\n[1, 3, 2]\n\n[2, 3, 2]\n\n[3, 1, 3]\n\n[2, 3, 3]\n\n[3, 2, 3]\n\n[3, 1, 2]\n\n[2, 3, 2]\n\n[1, 2, 3]\n\n[2, 3, 2]\n\n[1, 3, 2]\n\n[2, 3, 2]\n\n[1, 3, 2]\n\n[2, 3, 3]\n\n[1, 2, 3]\n\n[2, 3, 3]\n\n[3, 1, 3]\n\n[2, 3, 3]\n\n[3, 2, 3]\n\n[3, 1, 2]\n\n[2, 3, 3]\n\n[3, 2, 3]\n\n[3, 1, 2]\n\n[2, 3, 3]\n\n[3, 1, 1]\n\n[1, 2, 3]\n\n[3, 1, 2]\n\n[2, 3, 3]\n\n[1, 3, 1]\n\n[2, 3, 3]\n\n[1, 3, 3]\n\n[1, 2, 3]\n\n[3, 1, 3]\n\n[2, 3, 3]\n\n[3, 1, 2]\n\n[3, 1, 1]\n\n[1, 2, 3]\n\n[3, 1, 2]\n\n[3, 1, 3]\n\n[2, 3, 3]\n\n[3, 1, 1]\n\n[2, 3, 3]\n\n[1, 3, 2]\n\n[2, 3, 3]\n\n[1, 3, 2]\n\n[3, 1, 3]\n\n[2, 3, 3]\n\n[1, 2, 3]\n\n[3, 1, 1]\n\n[2, 3, 3]\n\n[3, 1, 1]\n\n[2, 3, 3]\n\n[1, 3, 2]\n\n[2, 3, 3]\n\n[3, 1, 2]\n\n[2, 3, 3]\n\n[3, 1, 2]\n\n[2, 3, 3]\n\n[1, 2, 3]\n\n[3, 1, 3]\n\n[1, 2, 3]\n\n[2, 3, 3]\n\n[1, 2, 3]\n\n[3, 1, 3]\n\n[3, 1, 3]\n\n[3, 1, 3]\n\n[3, 1, 3]\n\n[3, 1, 3]\n\n[3, 1, 3]\n\n[3, 1, 3]\n\n[3, 1, 3]\n\n[3, 1, 3]\n\n[3, 1, 3]\n\n[3, 1, 3]\n\n[3, 1, 3]\n\n[3, 1, 3]\n\n[3, 1, 3]\n\n[3, 1, 3]\n\n[3, 1, 3]\n\n[3, 1, 3]\n\n[3, 1, 3]\n\n[3, 1, 3]\n\n[3, 1, 3]\n\n[3, 1, 3]\n\n[3, 1, 3]\n\n[3, 1, 3]\n\n[3, 1, 3]\n\n[3, 1, 3]\n\n[3, 1, 3]\n\n[3, 1, 3]\n\n[3, 1, 3]\n\n[3, 1, 3]\n\n[3, 1, 3]\n\n[3, 1, 3]\n\n[3, 1, 3]\n\n[3, 1, 3]\n\n[3, 1, 3]\n\n[3, 1, 3]\n\n[3, 1, 3]\n\n[3, 1, 3]\n\n[3, 1, 3]\n\n[3, 1, 3]\n\n[3, 1, 3]\n\n[3, 1, 3]\n\n[3, 1, 3]\n\n[3, 1, 3]\n\n[3, 1, 3]\n\n[3, 1, 3]\n\n[3, 1, 3]\n\n[3, 1, 3]\n\n[3, 1, 3]\n\n[3, 1, 3]\n\n[3, 1, 3]\n\n[3, 1, 3]\n\n[3, 1, 3]\n\n[3, 1, 3]\n\n[3, 1, 3]\n\n[3, 1, 3]\n\n[3, 1, 3]\n\n[3, 1, 3]\n\n[3, 1, 3]\n\n[3, 1, 3]\n\n[3, 1, 3]\n\n[3, 1, 3]\n\n[3, 1, 3]\n\n[3, 1, 3]\n\n[3, 1, 3]\n\n[3, 1, 3]\n\n[3, 1, 3]\n\n[3, 1, 3]\n\n[3, 1, 3]\n\n[3, 1, 3]\n\n[3, 1, 3]\n\n[3, 1, 3]\n\n[3, 1, 3]\n\n[3, 1, 3]\n\n[3, 1, 3]\n\n[3, 1, 3]\n\n[3, 1, 3]\n\n[3, 1, 3]\n\n[3, 1, 3]\n\n[3, 1, 3]\n\n[3, 1, 3]\n\n[3, 1, 3]\n\n[3, 1, 3]\n\n[3, 1, 3]\n\n[3, 1, 3]\n\n[3, 1, 3]\n\n[3, 1, 3]\n\n[3, 1, 3]\n\n[3, 1, 3]\n\n[3, 1, 3]\n\n[3, 1, 3]\n\n[3, 1, 3]\n\n[3, 1, 3]\n\n[3, 1, 3]\n\n[3, 1, 3]\n\n[3, 1, 3]\n\n[3, 1, 3]\n\n[3, 1, 3]\n\n[3"
    },
    {
        "number": 4178,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    max_h = max(stdin[0].split(\" \"))\n    min_h = int(max_h)\n    max_h -= 1\n    \n    max_h = max(stdin[0].split(\" \"))\n    max_h -= 1\n    \n    for i in range(1, n+1):\n        if i % 2 == 0:\n            if int(stdin[i]) > max_h:\n                max_h = int(stdin[i])\n        else:\n            if int(stdin[i]) < min_h:\n                min_h = int(stdin[i])\n    \n    if max_h!= min_h:\n        return \"No\"\n    \n    if max_h >= 1:\n        return \"Yes\"\n    else:\n        return \"No\"\n\"\"\"\n\nclass Solution:\n    def isValid(self, s: str) -> bool:\n        \n        dict_= {\"(\": \")\", \"[\": \"]\", \"{\": \"}\" }\n        stack = []\n        for i in range(len(s)):\n            if dict_[s[i]] in ['(', '[', '{']:\n                stack.append(dict_[s[i]])\n            elif dict_[s[i]] in ['(', '[', '{']:\n                if len(stack) == 0:\n                    return False\n                else:\n                    if dict_[s[i]] == stack.pop():\n                        return False\n            else:\n                return False\n        return len(stack) == 0\n            \n        \n"
    },
    {
        "number": 4178,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    length = int(stdin)\n    for i in range(length):\n        for j in range(i+1, length):\n            if j >= length - j:\n                continue\n            if j - i - 1 <= 0:\n                continue\n            for k in range(j - i - 1, j):\n                if k >= length - k:\n                    continue\n                if k - i - 1 <= 0:\n                    continue\n                if j - i - 1 >= 0:\n                    print(1, end=' ')\n                else:\n                    print(0, end=' ')\n            print()\n    return 'Yes'\n\nprint(solution(input()))"
    },
    {
        "number": 4179,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    for line in stdin:\n        n, m, c = map(int, line.split())\n        if n >= m:\n            n, m = m, n\n            c = c + 1\n        print(c)\n        if c > 0:\n            print(1)\n        else:\n            print(0)\n    return \"\"\n-----Sample Output-----\n1\n\"\"\"\n\ndef"
    },
    {
        "number": 4179,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    A = map(int, stdin.split())\n    B = map(int, stdin.split())\n    C = map(int, stdin.split())\n    A.sort()\n    B.sort()\n    C.sort()\n    for i in range(N):\n        for j in range(M):\n            if A[i] + B[j] + C[i] > 0:\n                break\n        else:\n            print(i + 1)\n            break\n    else:\n        print(-1)\n\"\"\"\n\n\nclass Solution:\n    def solve(self, N, M, B, C):\n        return str(self.count_code(N, M, B, C))\n\n    def count_code(self, N, M, B, C):\n        cnt = 0\n        for a, b, c in zip(range(1, N + 1), range(1, M + 1), range(1, M + 1)):\n            if a + b + c == N * M * (N - a) * (M - b) * (M - c):\n                cnt += 1\n        return cnt\n"
    },
    {
        "number": 4179,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, M, C = map(int, stdin.split())\n    A = [map(int, stdin.split()) for _ in range(N)]\n    B_i = list(map(int, stdin.split()))\n    A_i = [list(map(int, a)) for a in A]\n    B_M = [map(int, b) for b in B_i]\n    C_M = [list(map(int, c)) for c in C]\n    B = [a+b for a, b in zip(B_i, B_M)]\n    result = 0\n    for i in range(N):\n        for j in range(N-M+1):\n            result += A_i[i][j]*B_i[j][i]\n    return str(result)\n\"\"\""
    },
    {
        "number": 4179,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, M, C = map(int, stdin.split())\n    A, B, C = map(int, stdin.split())\n    B_i = C // M\n    B_M = C % M\n    A_i = M * B_i + B_M\n    A_M = M - A_i\n    A_i = -M - A_i\n    B_i = -B_i\n    \n    for _ in range(N):\n        A_i = A_i + A\n        A_M = M * A_i + A_M\n        B_i = B_i + B\n        B_M = M - B_i\n        C = -C + C\n        \n    if A_M > 0 and C > 0:\n        return str(C)\n    if A_M > 0 and C == 0:\n        return str(A_i + 1)\n    if A_M == 0 and C > 0:\n        return str(C)\n    if A_M == 0 and C == 0:\n        return str(0)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4179,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    source_list = []\n    A = list(map(int, stdin.split()))\n    B = list(map(int, stdin.split()))\n    for i in range(M):\n        A.append(B[i] * i)\n    for i in range(N):\n        source_list.append([A[i]])\n        A[i] -= 1\n    for i in range(N):\n        for j in range(M):\n            if i == 0:\n                source_list[i].append(B[j] + A[i])\n            elif j == 0:\n                source_list[i].append(A[j] + B[i])\n            else:\n                source_list[i].append(B[j] + A[i] + B[i - 1] + A[i - 1])\n    return''.join(str(i) for i in source_list)\n\n\"\"\"\n\nN, M = map(int, input().split())\n\ndef"
    },
    {
        "number": 4179,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, M, C = map(int, stdin.split())\n    a = map(int, stdin.split())\n    b = map(int, stdin.split())\n    a.sort()\n    b.sort()\n    codes = list(set(b + a))\n    if len(codes) < M:\n        return \"\".join([str(i) for i in codes])\n    return \"\".join(str(codes[i] + codes[i + 1]) for i in range(M))\n\"\"\"\n\ndef"
    },
    {
        "number": 4179,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def valid(code: list) -> bool:\n        # Invalidation\n        # If it's not 0, then it's a valid code, because the sum of the following number is greater than 0.\n        # Check for the two ends of the code, and find the min and max of the two ends.\n        # If the two ends are the same, then it's a valid code.\n        left = 0\n        right = len(code) - 1\n        for i in range(len(code)):\n            left += code[i]\n            if left > right:\n                left = right\n                right = i\n        return right - left >= 3\n\n    def solve(code: list) -> bool:\n        s = []\n        for i in range(len(code)):\n            s.append(code[i] + code[i + 1] + code[i + 2])\n        return s.count(max(s)) == s.count(min(s))\n\n    N = int(stdin.strip())\n    B_1 = int(stdin.strip())\n    B_2 = int(stdin.strip())\n    A_1 = []\n    A_2 = []\n    for i in range(N):\n        a = stdin.strip()\n        A_1.append(a[i])\n        A_2.append(a[i + 1])\n    for i in range(N):\n        a = stdin.strip()\n        B_i = int(a[i])\n        C = int(a[i + 1])\n        if C <= 0:\n            break\n        if solve(A_1):\n            print(B_i)\n        if solve(A_2):\n            print(B_i)\n        A_1[B_i] -= C\n        A_2[B_i] -= C\n\n\n    return \"\".join(sorted(list(set(A_1 + A_2))))\n\nprint(solution(\"3 4 5\"))\n"
    },
    {
        "number": 4179,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    B = list(map(int, stdin.split()))\n    C = list(map(int, stdin.split()))\n    A.sort()\n    B.sort()\n    C.sort()\n    \n    for i in range(N):\n        A_i = A[i]\n        B_i = B[i]\n        if A_i + B_i > 0:\n            C_i = C[i]\n            if C_i + A_i + B_i > 0:\n                solution = A_i + B_i + C_i\n                break\n    print(solution)"
    },
    {
        "number": 4179,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, M, C = map(int, stdin.split())\n    A = [int(x) for x in stdin.split()]\n    B_M = [int(x) for x in stdin.split()]\n    B_N = [int(x) for x in stdin.split()]\n\n    def binary_search(x: int, b: int):\n        left, right = 0, len(A) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if A[mid] >= x:\n                left = mid + 1\n            else:\n                right = mid - 1\n        if A[left] < x:\n            return left\n        return right\n\n    def bin_sum(x: int, b: int):\n        res = 0\n        while b > 0:\n            n = b % 10\n            res += n * x\n            b //= 10\n        return res\n\n    def solution(x: int, b: int):\n        res = 0\n        left, right = 0, len(A) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if bin_sum(x, b) > bin_sum(B_M[mid], b):\n                res = right - mid + 1\n                right = mid\n            else:\n                left = mid + 1\n        if bin_sum(x, b) > bin_sum(B_M[left], b):\n            res = left - 1\n        return res\n\n    def binary_search(x: int, b: int):\n        left, right = 0, len(A) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if A[mid] >= x:\n                left = mid + 1\n            else:\n                right = mid - 1\n        if binary_search(B_M[left], b) > binary_search(B_M[right], b):\n            return right - 1\n        else:\n            return left\n\n    def solution(x: int, b: int):\n        res = 0\n        left, right = 0, len(A) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if binary_search(x, b) > binary_search(B_N[mid], b):\n                res = right - mid + 1\n                right = mid\n            else:\n                left = mid + 1\n        if binary_search(x, b) > binary_search(B_N[left], b):\n            res = left - 1\n        return res\n"
    },
    {
        "number": 4179,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, c = map(int, stdin.split())\n    A = [map(int, input().split()) for _ in range(n)]\n    B = [map(int, input().split()) for _ in range(m)]\n    C = [map(int, input().split()) for _ in range(c)]\n    result = []\n    \n    # Find the number of valid pairs.\n    # It is found that there are only two pairs of numbers A_{i} and B_{i} that are not equal,\n    # in which case it can be combined to form a valid pair.\n    #   B_{i + 1} + B_{i - 1} = C_{i}\n    # Thus, if A_{i} B_{i + 1} B_{i - 1} == C_{i} - 1, we can simply directly return.\n    #\n    # If all the numbers of A_{i} are equal, then A_{i + 1} + A_{i - 1} = C_{i + 1} - 1 is not valid.\n    # Thus, we need to know the valid combinations of the two numbers of A_{i}.\n    # The valid combinations are: A_{i} B_{i} + A_{i} B_{i + 1} + A_{i} B_{i - 1}.\n    # So, A_{i + 1} + A_{i - 1} is not valid.\n    #\n    # We can use the table to find the number of valid pairs.\n    # So, we need to remember a dictionary to store the pairs of A_{i + 1} and B_{i - 1} in the right key.\n    # So, A_{i + 1} + B_{i - 1} is the valid pair.\n    # If A_{i + 1} + A_{i - 1} is not valid, then A_{i + 1} + A_{i - 1} is not valid.\n    # So, we need to use the same table to find the valid combinations of A_{i + 1} and A_{i - 1}.\n    # So, A_{i + 1} + A_{i - 1} is valid pair.\n    # So, if A_{i + 1} + A_{i - 1} is not valid, then A_{i + 1} + A_{i - 1} is not valid.\n    # So, A_{i + 1} + A_{i - 1} is valid pair.\n    # So, if A_{i + 1} + A_{i - 1} is valid, then A_{i + 1} + A_{i - 1} = C_{i} - 1 is not valid.\n    # So, A_{i + 1} + A_{i - 1} is valid pair.\n    # So, A_{i + 1} + A_{i - 1} is valid pair.\n    # So, A_{i + 1} + A_{i - 1} is valid pair.\n    # So, A_{i + 1} + A_{i - 1} is valid pair.\n    # So, A_{i + 1} + A_{i - 1} is not valid pair.\n    # So, A_{i + 1} + A_{i - 1} is valid pair.\n    # So, A_{i + 1} + A_{i - 1} is valid pair.\n    # So, A_{i + 1} + A_{i - 1} = C_{i} - 1 is valid pair.\n    # So, A_{i + 1} + A_{i - 1} = C_{i} - 1 is valid pair.\n    # So, A_{i + 1} + A_{i - 1} = C_{i} - 1 is not valid pair.\n    # So, A_{i + 1} + A_{i - 1} = C_{i} - 1 is not valid pair.\n    # So, A_{i + 1} + A_{i - 1} = C_{i} - 1 is not valid pair.\n    # So, A_{i + 1} + A_{i - 1} = C_{i} - 1 is valid pair.\n    # So, A_{i + 1} + A_{i - 1} = C_{i} - 1 is valid pair.\n    # So, A_{i + 1} + A_{i - 1} = C_{i} - 1 is valid pair.\n    # So, A_{i + 1} + A_{i - 1} = C_{i} - 1 is valid pair.\n    # So, A_{i + 1} + A_{i - 1} = C_{i} - 1 is valid pair.\n    # So, A_{i + 1} + A_{i - 1} = C_{i} - 1 is valid pair.\n    # So, A_{i + 1} + A_{i - 1} = C_{i} - 1 is valid pair.\n    # So, A_{i + 1} + A_{i - 1} = C_{i} - 1 is valid pair.\n    # So, A_{i + 1} + A_{i - 1} = C_{i} - 1 is valid pair.\n    # So, A_{i + 1} + A_{i - 1} = C_{i} - 1 is valid pair.\n    # So, A_{i + 1} + A_{i - 1} = C_{i} - 1 is valid pair.\n    # So, A_{i + 1} + A_{i - 1} = C_{i} - 1 is valid pair.\n    # So, A_{i + 1} + A_{i - 1} = C_{i} - 1 is valid pair.\n    # So, A_{i + 1} + A_{i - 1} = C_{i} - 1 is valid pair.\n    # So, A_{i + 1} + A_{i - 1} = C_{i} - 1 is valid pair.\n    # So, A_{i + 1} + A_{i - 1} = C_{i} - 1 is valid pair.\n    # So, A_{i + 1} + A_{i - 1} = C_{i} - 1 is valid pair.\n    # So, A_{i + 1} + A_{i - 1} = C_{i} - 1 is valid pair.\n    # So, A_{i + 1} + A_{i - 1} = C_{i} - 1 is valid pair.\n    # So, A_{i + 1} + A_{i - 1} = C_{i} - 1 is valid pair.\n    # So, A_{i + 1} + A_{i - 1} = C_{i} - 1 is valid pair.\n    # So, A_{i + 1} + A_{i - 1} = C_{i} - 1 is valid pair.\n    # So, A_{i + 1} + A_{i - 1} = C_{i} - 1 is valid pair.\n    # So, A_{i + 1} + A_{i - 1} = C_{i} - 1 is valid pair.\n    # So, A_{i + 1} + A_{i - 1} = C_{i} -"
    },
    {
        "number": 4180,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    yen, N = map(int, stdin.split())\n    if N == 1:\n        return str(yen)\n    change = 1000\n    for i in range(N):\n        change = change * yen // 100\n        yen = yen - change\n    return str(change)\n"
    },
    {
        "number": 4180,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin) // 1000)\n"
    },
    {
        "number": 4180,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n < 1000:\n        return '0'\n    N = n // 1000\n    k = n % 1000\n    return str(int(k) - N)"
    },
    {
        "number": 4180,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    money, price = map(int, stdin.split(\" \"))\n    min_money = 1000\n    # loop through all the bill\n    for bill in range(1, money+1):\n        # if we have enough money\n        if bill < min_money:\n            # then go to next bill\n            min_money = bill\n    # if min bill is out of budget\n    if min_money == 1000:\n        # we have no change to pay\n        return \"0\"\n    else:\n        # there is a change to pay\n        change = price - min_money\n        # print(change)\n        # we have one change to pay, so we need to print N new lines,\n        # then the change will be printed with the number of new lines.\n        print(change//1000)\n        # return the change as an integer\n        return str(change%1000)\n    # if we get to the end of the bill, then we are done and the change will be 0\n    # so we return an empty string\n    # otherwise, we need to break out of the loop\n    # if the bill is not 0, then we need to print the min_money\n    # so we have no change\n    # when we have no change, we have one more bill\n    # so we need to break out of the loop and return the change\n    # if the bill is out of budget, then we have no change\n    # so we have no change\n    # when we have one bill to pay, then we have a change to pay, we have a change to pay\n    # so we have no change\n    # when we have more than one bill to pay, we have a change to pay, but the bill is out of budget\n    # so we have no change\n    # we have one more bill\n    # so we have no change\n    # so we have no change\n    # return the change as an integer\n    return \"0\"\n"
    },
    {
        "number": 4180,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N,*lst=map(int,stdin.split())\n    result=0\n    for i in lst:\n        if N-i<=1000:\n            result+=1000-i\n        else:\n            result-=1000-i\n    return str(result)\n"
    },
    {
        "number": 4180,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n  return str(int(stdin) - int(stdin) * 1000)\n\n\"\"\"\ndef"
    },
    {
        "number": 4180,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n  n = int(stdin)\n  if n <= 10000000:\n    print(n)\n    return str(n)\n  else:\n    a = n // 10000000\n    b = n % 10000000\n    ans = a + b\n    print(ans)\n    return str(ans)\n\n###discussion.\ndef"
    },
    {
        "number": 4180,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    min_bills = 1000\n    if N <= 1 or N % min_bills!= 0:\n        return 0\n    \n    # check if the difference between the number of bills and min_bills is < minimum number of bills\n    # if so, we are selling the minimum number of bills\n    \n    total = 0\n    for bill in range(min_bills, N):\n        total += bill\n        if total >= N:\n            return str(total - N)\n        \n    return 0\n    \n    \n"
    },
    {
        "number": 4180,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    num, ans = list(map(int, stdin.split()))\n    money = 0\n    for n in range(1,num+1):\n        money += n*1000\n        ans += money\n    return str(ans-ans%1000)\n"
    },
    {
        "number": 4180,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    bills = []\n    for _ in range(N):\n        bills.append(int(input()))\n    sum_bills = sum(bills)\n    if sum_bills % 1000!= 0:\n        return '0'\n    else:\n        return str(sum_bills // 1000)\n\"\"\"\n\ndef"
    },
    {
        "number": 4181,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n        N = int(stdin)\n        A_i = int(stdin[:N//2])\n        B_i = int(stdin[N//2:])\n        A_1 = A_i\n        B_1 = B_i\n        A_2 = A_i + 1\n        B_2 = B_i + 1\n        A_3 = A_i + 2\n        B_3 = B_i + 2\n        A_4 = A_i + 3\n        B_4 = B_i + 3\n        A_5 = A_i + 4\n        B_5 = B_i + 4\n        A_6 = A_i + 5\n        B_6 = B_i + 5\n        A_7 = A_i + 6\n        B_7 = B_i + 6\n        A_8 = A_i + 7\n        B_8 = B_i + 7\n        A_9 = A_i + 8\n        B_9 = B_i + 8\n        A_10 = A_i + 9\n        B_10 = B_i + 9\n        A_11 = A_i + 10\n        B_11 = B_i + 10\n        A_12 = A_i + 11\n        B_12 = B_i + 11\n        A_13 = A_i + 12\n        B_13 = B_i + 12\n        A_14 = A_i + 13\n        B_14 = B_i + 13\n        A_15 = A_i + 14\n        B_15 = B_i + 14\n        A_16 = A_i + 15\n        B_16 = B_i + 15\n        A_17 = A_i + 16\n        B_17 = B_i + 16\n        A_18 = A_i + 17\n        B_18 = B_i + 17\n        A_19 = A_i + 18\n        B_19 = B_i + 18\n        A_20 = A_i + 19\n        B_20 = B_i + 19\n        A_21 = A_i + 20\n        B_21 = B_i + 20\n        A_22 = A_i + 21\n        B_22 = B_i + 21\n        A_23 = A_i + 22\n        B_23 = B_i + 22\n        A_24 = A_i + 23\n        B_24 = B_i + 23\n        A_25 = A_i + 24\n        B_25 = B_i + 24\n        A_26 = A_i + 25\n        B_26 = B_i + 25\n        A_27 = A_i + 26\n        B_27 = B_i + 26\n        A_28 = A_i + 27\n        B_28 = B_i + 27\n        A_29 = A_i + 28\n        B_29 = B_i + 28\n        A_30 = A_i + 29\n        B_30 = B_i + 29\n        A_31 = A_i + 30\n        B_31 = B_i + 30\n        A_32 = A_i + 31\n        B_32 = B_i + 31\n        A_33 = A_i + 32\n        B_33 = B_i + 32\n        A_34 = A_i + 33\n        B_34 = B_i + 33\n        A_35 = A_i + 34\n        B_35 = B_i + 34\n        A_36 = A_i + 35\n        B_36 = B_i + 35\n        A_37 = A_i + 36\n        B_37 = B_i + 36\n        A_38 = A_i + 37\n        B_38 = B_i + 37\n        A_39 = A_i + 38\n        B_39 = B_i + 38\n        A_40 = A_i + 39\n        B_40 = B_i + 39\n        A_41 = A_i + 40\n        B_41 = B_i + 40\n        A_42 = A_i + 41\n        B_42 = B_i + 41\n        A_43 = A_i + 42\n        B_43 = B_i + 42\n        A_44 = A_i + 43\n        B_44 = B_i + 43\n        A_45 = A_i + 44\n        B_45 = B_i + 44\n        A_46 = A_i + 45\n        B_46 = B_i + 45\n        A_47 = A_i + 46\n        B_47 = B_i + 46\n        A_48 = A_i + 47\n        B_48 = B_i + 47\n        A_49 = A_i + 48\n        B_49 = B_i + 48\n        A_50 = A_i + 49\n        B_50 = B_i + 49\n        A_51 = A_i + 50\n        B_51 = B_i + 50\n        A_52 = A_i + 51\n        B_52 = B_i + 51\n        A_53 = A_i + 52\n        B_53 = B_i + 52\n        A_54 = A_i + 53\n        B_54 = B_i + 53\n        A_55 = A_i + 54\n        B_55 = B_i + 54\n        A_56 = A_i + 55\n        B_56 = B_i + 55\n        A_57 = A_i + 56\n        B_57 = B_i + 56\n        A_58 = A_i + 57\n        B_58 = B_i + 57\n        A_59 = A_i + 58\n        B_59 = B_i + 58\n        A_60 = A_i + 59\n        B_60 = B_i + 59\n        A_61 = A_i + 60\n        B_61 = B_i + 60\n        A_62 = A_i + 61\n        B_62 = B_i + 61\n        A_63 = A_i + 62\n        B_63 = B_i + 62\n        A_64 = A_i + 63\n        B_64 = B_i + 63\n        A_65 = A_i + 64\n        B_65 = B_i + 64\n        A_66 = A_i + 65\n        B_66 = B_i + 65\n        A_67 = A_i + 66\n        B_67 = B_i + 66\n        A_68 = A_i + 67\n        B_68 = B_i + 67\n        A_69 = A_i + 68\n        B_69 = B_i + 68\n        A_70 = A_i + 69\n        B_70 = B_i + 69\n        A_71 = A_i + 70\n        B_71 = B_i + 70\n        A_72 = A_i + 71\n        B_72 = B_i + 71\n        A_73 = A_i + 72\n        B_73 = B_i + 72\n        A_74 = A_i + 73\n        B_74 = B_i + 73\n        A_75 = A_i + 74\n        B_75 = B_i + 74\n        A_76 = A_i + 75\n        B_76 = B_i + 75\n        A_77 = A_i + 76\n        B_77 = B_i + 76\n        A_78 = A_i + 77\n        B_78 = B"
    },
    {
        "number": 4181,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, A_1, B_1, A_2, B_2, A_3, B_3, A_4, B_4, A_5, B_5, A_6, B_6, A_7, B_7, A_8, B_8, A_9, B_9, A_10, B_10 = map(int, stdin.split())\n    return str(min(N-2,N-A_10)-min(N-B_9,N-B_10)-min(N-A_8,N-B_8)-min(N-A_7,N-B_7)-min(N-A_6,N-B_6)-min(N-A_5,N-B_5)-min(N-A_4,N-B_4)-min(N-A_3,N-B_3)-min(N-A_2,N-B_2)-min(N-A_1,N-B_1))\n\n-----Sample Output-----\n9\n\n----Sample Input-----\n2\n1 3\n3 2\n3 2\n3 3\n\n----Sample Output-----\n3\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4181,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N,A,B = map(int,stdin.split())\n    n = 1\n    while n<=N:\n        n+=1\n        A = A*2\n        B = B*2\n        if A<=B:\n            A=A-B\n            B=B-A\n        else:\n            A=A-B\n            B=B-A\n    print(A+B)\n    return str(A+B)"
    },
    {
        "number": 4181,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, b_i = map(int, stdin.split())\n    A_1, A_2, A_3 = map(int, stdin.split())\n    B_1, B_2, B_3 = map(int, stdin.split())\n    A_i = min(A_1, A_2, A_3)\n    B_i = min(B_1, B_2, B_3)\n    ans = A_i * b + B_i * b_i\n    return str(ans)"
    },
    {
        "number": 4181,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return str(max(int(stdin[i]) - int(stdin[i+1]) for i in range(1, len(stdin) - 2))) + \" \" + str(max(int(stdin[i]) - int(stdin[i+2]) for i in range(1, len(stdin) - 1)))\n'''\n\ndef"
    },
    {
        "number": 4181,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n  N = int(stdin)\n  A_1 = list(map(int, stdin.split()))\n  B_1 = list(map(int, stdin.split()))\n  A_2 = list(map(int, stdin.split()))\n  B_2 = list(map(int, stdin.split()))\n  A_3 = list(map(int, stdin.split()))\n  B_3 = list(map(int, stdin.split()))\n  A_4 = list(map(int, stdin.split()))\n  B_4 = list(map(int, stdin.split()))\n  A_5 = list(map(int, stdin.split()))\n  B_5 = list(map(int, stdin.split()))\n  A_6 = list(map(int, stdin.split()))\n  B_6 = list(map(int, stdin.split()))\n  A_7 = list(map(int, stdin.split()))\n  B_7 = list(map(int, stdin.split()))\n  A_8 = list(map(int, stdin.split()))\n  B_8 = list(map(int, stdin.split()))\n  A_9 = list(map(int, stdin.split()))\n  B_9 = list(map(int, stdin.split()))\n  A_10 = list(map(int, stdin.split()))\n  B_10 = list(map(int, stdin.split()))\n  A_11 = list(map(int, stdin.split()))\n  B_11 = list(map(int, stdin.split()))\n  A_12 = list(map(int, stdin.split()))\n  B_12 = list(map(int, stdin.split()))\n  A_13 = list(map(int, stdin.split()))\n  B_13 = list(map(int, stdin.split()))\n  A_14 = list(map(int, stdin.split()))\n  B_14 = list(map(int, stdin.split()))\n  A_15 = list(map(int, stdin.split()))\n  B_15 = list(map(int, stdin.split()))\n  A_16 = list(map(int, stdin.split()))\n  B_16 = list(map(int, stdin.split()))\n  A_17 = list(map(int, stdin.split()))\n  B_17 = list(map(int, stdin.split()))\n  A_18 = list(map(int, stdin.split()))\n  B_18 = list(map(int, stdin.split()))\n  A_19 = list(map(int, stdin.split()))\n  B_19 = list(map(int, stdin.split()))\n  A_20 = list(map(int, stdin.split()))\n  B_20 = list(map(int, stdin.split()))\n  A_21 = list(map(int, stdin.split()))\n  B_21 = list(map(int, stdin.split()))\n  A_22 = list(map(int, stdin.split()))\n  B_22 = list(map(int, stdin.split()))\n  A_23 = list(map(int, stdin.split()))\n  B_23 = list(map(int, stdin.split()))\n  A_24 = list(map(int, stdin.split()))\n  B_24 = list(map(int, stdin.split()))\n  A_25 = list(map(int, stdin.split()))\n  B_25 = list(map(int, stdin.split()))\n  A_26 = list(map(int, stdin.split()))\n  B_26 = list(map(int, stdin.split()))\n  A_27 = list(map(int, stdin.split()))\n  B_27 = list(map(int, stdin.split()))\n  A_28 = list(map(int, stdin.split()))\n  B_28 = list(map(int, stdin.split()))\n  A_29 = list(map(int, stdin.split()))\n  B_29 = list(map(int, stdin.split()))\n  A_30 = list(map(int, stdin.split()))\n  B_30 = list(map(int, stdin.split()))\n  A_31 = list(map(int, stdin.split()))\n  B_31 = list(map(int, stdin.split()))\n  A_32 = list(map(int, stdin.split()))\n  B_32 = list(map(int, stdin.split()))\n  A_33 = list(map(int, stdin.split()))\n  B_33 = list(map(int, stdin.split()))\n  A_34 = list(map(int, stdin.split()))\n  B_34 = list(map(int, stdin.split()))\n  A_35 = list(map(int, stdin.split()))\n  B_35 = list(map(int, stdin.split()))\n  A_36 = list(map(int, stdin.split()))\n  B_36 = list(map(int, stdin.split()))\n  A_37 = list(map(int, stdin.split()))\n  B_37 = list(map(int, stdin.split()))\n  A_38 = list(map(int, stdin.split()))\n  B_38 = list(map(int, stdin.split()))\n  A_39 = list(map(int, stdin.split()))\n  B_39 = list(map(int, stdin.split()))\n  A_40 = list(map(int, stdin.split()))\n  B_40 = list(map(int, stdin.split()))\n  A_41 = list(map(int, stdin.split()))\n  B_41 = list(map(int, stdin.split()))\n  A_42 = list(map(int, stdin.split()))\n  B_42 = list(map(int, stdin.split()))\n  A_43 = list(map(int, stdin.split()))\n  B_43 = list(map(int, stdin.split()))\n  A_44 = list(map(int, stdin.split()))\n  B_44 = list(map(int, stdin.split()))\n  A_45 = list(map(int, stdin.split()))\n  B_45 = list(map(int, stdin.split()))\n  A_46 = list(map(int, stdin.split()))\n  B_46 = list(map(int, stdin.split()))\n  A_47 = list(map(int, stdin.split()))\n  B_47 = list(map(int, stdin.split()))\n  A_48 = list(map(int, stdin.split()))\n  B_48 = list(map(int, stdin.split()))\n  A_49 = list(map(int,"
    },
    {
        "number": 4181,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    N = int(stdin.strip())\n    A_1 = [int(i) for i in stdin.strip().split()]\n    B_1 = [int(i) for i in stdin.strip().split()]\n    \n    A_2 = [int(i) for i in stdin.strip().split()]\n    B_2 = [int(i) for i in stdin.strip().split()]\n    \n    A_3 = [int(i) for i in stdin.strip().split()]\n    B_3 = [int(i) for i in stdin.strip().split()]\n    \n    A_4 = [int(i) for i in stdin.strip().split()]\n    B_4 = [int(i) for i in stdin.strip().split()]\n    \n    A_5 = [int(i) for i in stdin.strip().split()]\n    B_5 = [int(i) for i in stdin.strip().split()]\n    \n    A_6 = [int(i) for i in stdin.strip().split()]\n    B_6 = [int(i) for i in stdin.strip().split()]\n    \n    A_7 = [int(i) for i in stdin.strip().split()]\n    B_7 = [int(i) for i in stdin.strip().split()]\n    \n    A_8 = [int(i) for i in stdin.strip().split()]\n    B_8 = [int(i) for i in stdin.strip().split()]\n    \n    A_9 = [int(i) for i in stdin.strip().split()]\n    B_9 = [int(i) for i in stdin.strip().split()]\n    \n    A_10 = [int(i) for i in stdin.strip().split()]\n    B_10 = [int(i) for i in stdin.strip().split()]\n    \n    \n    max_total_monsters_of_first_hero = 0\n    max_total_monsters_of_second_hero = 0\n    max_total_monsters_of_third_hero = 0\n    \n    for i in A_1:\n        if i > max_total_monsters_of_first_hero:\n            max_total_monsters_of_first_hero = i\n    for i in B_1:\n        if i > max_total_monsters_of_second_hero:\n            max_total_monsters_of_second_hero = i\n    for i in A_2:\n        if i > max_total_monsters_of_third_hero:\n            max_total_monsters_of_third_hero = i\n    for i in B_2:\n        if i > max_total_monsters_of_fourth_hero:\n            max_total_monsters_of_fourth_hero = i\n    \n    \n    for i in A_3:\n        if i > max_total_monsters_of_fifth_hero:\n            max_total_monsters_of_fifth_hero = i\n    for i in B_3:\n        if i > max_total_monsters_of_sixth_hero:\n            max_total_monsters_of_sixth_hero = i\n    for i in A_4:\n        if i > max_total_monsters_of_seventh_hero:\n            max_total_monsters_of_seventh_hero = i\n    for i in B_4:\n        if i > max_total_monsters_of_eighth_hero:\n            max_total_monsters_of_eighth_hero = i\n    \n    for i in A_5:\n        if i > max_total_monsters_of_eighth_hero:\n            max_total_monsters_of_eighth_hero = i\n    for i in B_5:\n        if i > max_total_monsters_of_ninth_hero:\n            max_total_monsters_of_ninth_hero = i\n    \n    for i in A_6:\n        if i > max_total_monsters_of_eighth_hero:\n            max_total_monsters_of_eighth_hero = i\n    for i in B_6:\n        if i > max_total_monsters_of_ninth_hero:\n            max_total_monsters_of_ninth_hero = i\n    \n    for i in A_7:\n        if i > max_total_monsters_of_eighth_hero:\n            max_total_monsters_of_eighth_hero = i\n    for i in B_7:\n        if i > max_total_monsters_of_ninth_hero:\n            max_total_monsters_of_ninth_hero = i\n    \n    for i in A_8:\n        if i > max_total_monsters_of_eighth_hero:\n            max_total_monsters_of_eighth_hero = i\n    for i in B_8:\n        if i > max_total_monsters_of_ninth_hero:\n            max_total_monsters_of_ninth_hero = i\n    \n    for i in A_9:\n        if i > max_total_monsters_of_eighth_hero:\n            max_total_monsters_of_eighth_hero = i\n    for i in B_9:\n        if i > max_total_monsters_of_ninth_hero:\n            max_total_monsters_of_ninth_hero = i\n    \n    for i in A_10:\n        if i > max_total_monsters_of_eighth_hero:\n            max_total_monsters_of_eighth_hero = i\n    for i in B_10:\n        if i > max_total_monsters_of_ninth_hero:\n            max_total_monsters_of_ninth_hero = i\n    \n    \n    max_monsters_of_first_hero = max_total_monsters_of_first_hero * 10\n    max_monsters_of_second_hero = max_total_monsters_of_second_hero * 10\n    max_monsters_of_third_hero = max_total_monsters_of_third_hero * 10\n    max_monsters_of_fourth_hero = max_total_monsters_of_fourth_hero * 10\n    max_monsters_of_fifth_hero = max_total_monsters_of_fifth_hero * 10\n    max_monsters_of_sixth_hero = max_total_monsters_of_sixth_hero * 10\n    max_monsters_of_seventh_hero = max_total_monsters_of_seventh_hero * 10\n    max_monsters_of_eighth_hero = max_total_monsters_of_eighth_hero * 10\n    max_monsters_of_ninth_hero = max_total_monsters_of_ninth_hero * 10\n    \n    if max_total_monsters_of_first_hero > max_monsters_of_second_hero and max_total_monsters_of_second_hero > max_monsters_of_third_hero:\n        print(max_total_monsters"
    },
    {
        "number": 4181,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N,A,B = map(int, stdin.split())\n    def calc_monsters(i,temp):\n        if i==N:\n            return 1\n        for _ in range(temp):\n            A,B,c = map(int,stdin.split())\n            monsters = calc_monsters(i+1,c)\n            monsters = A*B - monsters\n            temp+=monsters\n        return temp\n\n    return str(calc_monsters(0,0)+calc_monsters(0,1)+calc_monsters(0,2))"
    },
    {
        "number": 4181,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    A_i = [int(x) for x in input().split()]\n    B_i = [int(x) for x in input().split()]\n    A_1 = A_i[1:]\n    B_1 = B_i[1:]\n    B_i = [x for x in B_i if x!= 0]\n    B_1 = [x for x in B_1 if x!= 0]\n    B_i = [x - 1 for x in B_i]\n    B_1 = [x - 1 for x in B_1]\n    A_i = [x - 1 for x in A_i]\n    B_i = [x - 1 for x in B_i]\n    max_monsters = 0\n    for i in range(N):\n        if A_i[i]!= 0:\n            monsters = 0\n            for j in range(A_i[i]):\n                monsters += B_i[j]\n            for j in range(A_i[i], N):\n                monsters += B_i[j]\n            for j in range(A_i[i], N):\n                monsters -= B_i[j]\n            if monsters > 0:\n                max_monsters = max(max_monsters, monsters)\n    print(max_monsters)\n    return str(max_monsters)\n\n-----Given-------\nInput\n4\n4 2 4\n4 1\nOutput\n4\nExplanation\nThe 2 heroes will be attacked by 4 monsters, one in the first town and one in the second town.\nWe can no longer attack the third town and 3 monsters.\n\n-----Constraints-----\n - All values in input are integers.\n - 1 \\leq N \\leq 10^5\n - 1 \\leq A_i \\leq 10^9\n - 1 \\leq B_i \\leq 10^9\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nA_1 A_2... A_{N+1}\nB_1 B_2... B_N\n\n-----Output-----\nPrint the maximum total number of monsters the heroes can defeat.\n\n-----Sample Input-----\n2\n3 5 2\n4 5\n\n-----Sample Output-----\n2\n\nIf the heroes choose the monsters to defeat as follows, they can defeat nine monsters in total, which is the maximum result.\n - The first hero defeats two monsters attacking the first town and two monsters attacking the second town.\n - The second hero defeats three monsters attacking the second town and two monsters attacking the third town.\ndef"
    },
    {
        "number": 4181,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    A = [int(i) for i in stdin.split()]\n    B = [int(i) for i in stdin.split()]\n    max_num_monsters = 0\n    for i in range(N):\n        max_num_monsters += A[i] * B[i]\n    return str(max_num_monsters)\n\ndef"
    },
    {
        "number": 4182,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return 'No War' if len(str(int(stdin.split(' ')[0]) - int(stdin.split(' ')[1]))) == 0 else 'War'\n"
    },
    {
        "number": 4182,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    x, y = [], []\n    for _ in range(n):\n        x.append(list(map(int, input().split())))\n        y.append(list(map(int, input().split())))\n    y_sum = y[0][0]\n    x_sum = x[0][0]\n    x_dif = x[0][1]\n    for row in y:\n        y_sum += row[0]\n        x_sum += row[1]\n        x_dif += row[1] - row[0]\n    for row in x:\n        if x_sum > y_sum:\n            x_sum -= row[0]\n        elif x_sum < y_sum:\n            x_sum += row[0]\n    if x_dif < x_sum / y_sum:\n        return \"War\"\n    else:\n        return \"No War\"\n\n-------------------------------------------------------------------------------------------------------------------------------------------------------------------------\ndef"
    },
    {
        "number": 4182,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    x_list, y_list = [], []\n    for _ in range(m):\n        x, y = map(int, stdin.split())\n        x_list.append(x)\n        y_list.append(y)\n    x_min, y_min = min(x_list), min(y_list)\n    x_max, y_max = max(x_list), max(y_list)\n    z = x_max - x_min + 1\n    x_mid = (x_max + x_min) // 2\n    y_mid = (y_max + y_min) // 2\n    x_step = abs(x_max - x_min)\n    y_step = abs(y_max - y_min)\n    z_step = z - 1\n    while True:\n        z_step += 1\n        if z_step > 2 ** 31 - 1:\n            break\n        if z_step < 0:\n            z_step = 0\n            y_step = (y_max - y_min) // 2\n            x_mid = (x_max + x_min) // 2\n            z_step = 2 ** 31 - 1\n            x_step = abs(x_mid - x_min)\n            y_step = abs(y_max - y_min)\n        for i in range(z_step):\n            if abs(x_mid - x_list[i]) == z_step:\n                x_list.append(x_mid)\n            elif abs(y_mid - y_list[i]) == z_step:\n                y_list.append(y_mid)\n        if z_step == 0:\n            break\n        if z_step < 2 ** 31 - 1:\n            break\n        if z_step > 2 ** 31 - 1:\n            break\n        if x_list[z_step] < x_mid or x_list[z_step] > x_mid + z_step:\n            z_step = z_step + z_step // 2\n        if y_list[z_step] < y_mid or y_list[z_step] > y_mid + z_step:\n            z_step = z_step + z_step // 2\n    if z_step == 0:\n        print('No War')\n    else:\n        print('War')\n\n-----Sample Output-----\nWar\n\nThe choice Z = 16 satisfies all of the three conditions as follows, thus they will come to an agreement.\n - X = 10 < 16 \\leq 20 = Y\n - 8, 15, 13 < 16\n - 16, 22 \\geq 16\ndef"
    },
    {
        "number": 4182,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    y_max = int(stdin.split()[-1])\n    n, m = map(int, stdin.split())\n    x_max = m + 2 * n\n    x, y = map(int, stdin.split())\n    if x < 0 or x > x_max or y < 0 or y > y_max:\n        return 'No War'\n    if x == 0 or y == 0:\n        return 'No War'\n    if (x + y) % 2 == 1:\n        return 'No War'\n    z = (x + y) // 2\n    if z < y_max:\n        return 'No War'\n    elif z == y_max:\n        return 'No War'\n    elif z > y_max:\n        return 'No War'\n    elif z == y_max:\n        return 'No War'\n    else:\n        if x % 2 == 0:\n            return 'No War'\n        else:\n            return 'No War'\n"
    },
    {
        "number": 4182,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    X, Y = map(int, stdin.split())\n    if X < Y:\n        return 'No War'\n    elif X > Y:\n        return 'War'\n    else:\n        x_1 = X\n        x_2 = X + 1\n        y_1 = Y\n        y_2 = Y + 1\n        while x_1 <= x_2:\n            if x_1 == x_2:\n                break\n            if y_1 == y_2:\n                break\n            if y_1 < y_2:\n                x_1 += 1\n            elif y_1 > y_2:\n                x_1 -= 1\n                y_1 += 1\n            else:\n                break\n        if x_1 == x_2:\n            return 'War'\n        elif x_1 < x_2:\n            return 'No War'\n        elif x_1 == x_2:\n            return 'War'\n        else:\n            return 'No War'\n\ndef"
    },
    {
        "number": 4182,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, M, x_1, y_1, x_2, y_2, x_N, y_N = map(int, stdin.split())\n    x_1, x_2, x_N, y_N = sorted([x_1, x_2, x_N, y_N])\n    y_1, y_2 = sorted([y_1, y_2])\n    for i in range(x_N-x_1):\n        if x_2 < (x_1 + i) < x_N-x_2:\n            x_1 = x_2\n            y_1 = y_2\n        else:\n            x_1, x_2, x_N, y_N = x_1, x_2, x_N, y_N\n    if x_N == x_1 + x_2:\n        y_1, y_2 = y_1, y_2\n        x_N, y_N = x_N, y_N\n    if y_N == y_1 + y_2:\n        y_1, y_2 = y_1, y_2\n        x_N, y_N = x_N, y_N\n    z_1 = abs(x_1-x_N)\n    z_2 = abs(y_1-y_N)\n    if z_1 <= z_2:\n        if z_1 == z_2:\n            return 'No War'\n        return 'War'\n    else:\n        if z_1 <= z_2:\n            return 'War'\n        return 'No War'\n\n-----Sample Output-----\nWar\n\nThe choice Z = 16 satisfies all of the three conditions as follows, thus they will come to an agreement.\n - X = 10 < 16 \\leq 20 = Y\n - 8, 15, 13 < 16\n - 16, 22 \\geq 16\ndef"
    },
    {
        "number": 4182,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, M, X, Y = map(int, stdin.split())\n    x_1, x_2,..., x_N = map(int, input().split())\n    y_1, y_2,..., y_M = map(int, input().split())\n    if abs(X - x_1) < X < abs(X - x_2) or abs(X - x_2) < X < abs(X - x_3) or abs(X - x_3) < X < abs(X - x_4) or abs(X - x_4) < X < abs(X - x_5):\n        print('War')\n    else:\n        print('No War')\n    if abs(Y - y_1) < Y < abs(Y - y_2) or abs(Y - y_2) < Y < abs(Y - y_3) or abs(Y - y_3) < Y < abs(Y - y_4) or abs(Y - y_4) < Y < abs(Y - y_5):\n        print('War')\n    else:\n        print('No War')\n\n-----Sample Output-----\nThe choice Z = 16 satisfies all of the three conditions as follows, thus they will come to an agreement.\n - X = 10 < 16 \\leq 20 = Y\n - 8, 15, 13 < 16\n - 16, 22 \\geq 16\nThe choice Z = 16 satisfies all of the three conditions as follows, thus they will come to an agreement.\n - X = 10 < 16 \\leq 20 = Y\n - 8, 15, 13 < 16\n - 16, 22 \\geq 16\nThe choice Z = 16 satisfies all of the three conditions as follows, thus they will come to an agreement.\n - X = 10 < 16 \\leq 20 = Y\n - 8, 15, 13 < 16\n - 16, 22 \\geq 16\nThe choice Z = 16 satisfies all of the three conditions as follows, thus they will come to an agreement.\n - X = 10 < 16 \\leq 20 = Y\n - 8, 15, 13 < 16\n - 16, 22 \\geq 16\nThe choice Z = 16 satisfies all of the three conditions as follows, thus they will come to an agreement.\n - X = 10 < 16 \\leq 20 = Y\n - 8, 15, 13 < 16\n - 16, 22 \\geq 16\nThe choice Z = 16 satisfies all of the three conditions as follows, thus they will come to an agreement.\n - X = 10 < 16 \\leq 20 = Y\n - 8, 15, 13 < 16\n - 16, 22 \\geq 16\nThe choice Z = 16 satisfies all of the three conditions as follows, thus they will come to an agreement.\n - X = 10 < 16 \\leq 20 = Y\n - 8, 15, 13 < 16\n - 16, 22 \\geq 16\nThe choice Z = 16 satisfies all of the three conditions as follows, thus they will come to an agreement.\n - X = 10 < 16 \\leq 20 = Y\n - 8, 15, 13 < 16\n - 16, 22 \\geq 16\nThe choice Z = 16 satisfies all of the three conditions as follows, thus they will come to an agreement.\n\n-----Sample Input-----\n1 4 4\n1 1 2\n2 1 1\n1 2 1\n1 3 1\n2 2 2\n3 2 1\n4 2 2\n3 4 3\n4 4 2\n3 5 2\n5 4 3\n-----Sample Output-----\nWar\nNo War\n\nThe choice Z = 4 satisfies all of the three conditions as follows, thus they will come to an agreement.\n - X = 1 < 4 \\leq X \\geq 2 = Y\n - 1, 2 \\geq 2\n- X = 1 < 4 \\leq X < 2\n- X = 2 < 4 \\geq X\n- 1, 2 \\geq X < Y\n- X = 2 < 4 \\geq X < Y\n- X = 2 \\geq Y\n- 1, 2 \\geq Y < X\n- X = 2 < Y < 4\n- X = 2 \\geq Y < X < 4\n- 1, 2 \\geq Y < X < Y\n- X = 2 < Y < 4\n- X = 2 < Y < X < Y\n- 1, 2 \\geq Y < X < Y < X < Y\n- X = 2 < Y < X < Y < X < Y\n- X = 2 < Y < X < Y < X < Y\n- 1, 2 \\geq Y < X < Y < X < Y < X < Y\n- X = 2 < Y < X < Y < X < Y < Y\n- X = 2 < Y < X < Y < X < Y < Y\n- 1, 2 \\geq Y < X < Y < X < X < Y\n- X = 2 < Y < X < Y < X < Y < X < Y\n- 1, 2 \\geq Y < X < Y < X < X < Y < Y\n- X = 2 < Y < X < Y < X < X < Y < Y\n- 1, 2 \\geq Y < X < Y < X < Y < X < Y < Y\n- X = 2 < Y < X < Y < X < Y < Y < X < Y < Y\n- 1, 2 \\geq Y < X < Y < X < Y < Y < X < Y < Y < Y\n- X = 2 < Y < X < Y < X < Y < Y < Y < X < Y < Y < Y\n- 1, 2 \\geq Y < X < Y < X < Y < Y < Y < X < Y < Y < Y < Y < Y < Y < Y < Y\n- X = 2 < Y < X < Y < X < Y < Y < Y < X < Y < Y < Y < Y < Y < Y < Y < Y < Y < Y < Y < Y < Y\n- 1, 2 \\geq Y < X < Y < X < Y < X < Y < Y < Y < Y < Y < Y < Y < Y < Y < Y < Y < Y < Y < Y < Y < Y < Y < Y < Y < Y < Y < Y < Y < Y < Y < Y < Y < Y < Y < Y < Y < Y < Y < Y < Y < Y < Y < Y < Y < Y < Y < Y < Y < Y < Y < Y < Y < Y < Y < Y < Y < Y < Y < Y < Y < Y < Y < Y < Y < Y < Y < Y < Y < Y < Y < Y < Y < Y < Y < Y < Y < Y < Y < Y < Y < Y < Y < Y < Y < Y < Y < Y < Y < Y < Y < Y < Y < Y < Y < Y < Y < Y < Y < Y < Y < Y < Y < Y < Y < Y < Y < Y < Y < Y < Y < Y < Y < Y < Y < Y < Y < Y < Y < Y < Y < Y < Y < Y < Y"
    },
    {
        "number": 4182,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    Z, Y = map(int, stdin.split())\n    if Z > Y:\n        return 'No War'\n    if Z > Y:\n        for _ in range(Z - Y + 1):\n            Y = Y + 1\n        Y = Z\n        for _ in range(Y - Z + 1):\n            Z = Z + 1\n        Z = Y\n    if Y > Z:\n        for _ in range(Y - Z + 1):\n            Z = Z + 1\n        Z = Y\n    if Y > Z:\n        for _ in range(Y - Z + 1):\n            Z = Z + 1\n        Z = Y\n    for _ in range(Z - Y + 1):\n        Y = Y + 1\n    if Y > Z:\n        for _ in range(Y - Z + 1):\n            Z = Z + 1\n    if Y > Z:\n        for _ in range(Y - Z + 1):\n            Z = Z + 1\n    if Z > Y:\n        for _ in range(Z - Y + 1):\n            Y = Y + 1\n    if Y > Z:\n        for _ in range(Y - Z + 1):\n            Z = Z + 1\n    if Z > Y:\n        for _ in range(Z - Y + 1):\n            Y = Y + 1\n    if Y > Z:\n        for _ in range(Y - Z + 1):\n            Z = Z + 1\n    if Z > Y:\n        for _ in range(Z - Y + 1):\n            Y = Y + 1\n    if Y > Z:\n        for _ in range(Y - Z + 1):\n            Z = Z + 1\n    return 'War'\n\n--------Input:\n3 2 10 20\n8 15 13\n16 22\n\n8 13 13\n-------Output:\nNo War\n\n-------------Input:\n3 2 10 20\n10 17 16\n12 24 25\n\n4 12 19\n--------Output:\nNo War\n\n---------------Input:\n4 4 7\n1 2 5\n3 3 8\n7 1 9\n4 7 5\n---------------Output:\nNo War\n\n###########\n\n'''\nimport heapq\n\n\nclass Solution:\n    def numberOfWays(self, n: int, a: List[int], b: List[int]) -> int:\n        # Recursive\n        if n <= 1:\n            return n * sum(a) + sum(b)\n        else:\n            if a[0] > b[0]:\n                return self.numberOfWays(n - 1, a[1:], b[1:])\n            elif b[0] > a[0]:\n                return self.numberOfWays(n - 1, a[1:], b[1:])\n            else:\n                return self.numberOfWays(n - 1, a[1:], b[1:]) + self.numberOfWays(n - 1, a, b[1:])\n\n\ndef"
    },
    {
        "number": 4182,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    x_1, x_2,..., x_N = map(int, stdin.split())\n    y_1, y_2,..., y_M = map(int, stdin.split())\n    x = list(map(int, stdin.split()))\n    y = list(map(int, stdin.split()))\n    z = list(set(x)&set(y))\n    if z[0] == z[1] and z[0] == z[2]:\n        return \"No War\"\n    elif z[0] == z[1]:\n        if x_1 < x_2 and x_1 < x_N and y_1 < y_2 and y_1 < y_M:\n            return \"War\"\n        else:\n            return \"No War\"\n    else:\n        if x_1 < x_2 and x_1 < x_N:\n            if y_1 < y_2:\n                return \"War\"\n            else:\n                return \"No War\"\n        elif x_1 > x_2 and x_1 > x_N:\n            if y_1 < y_2:\n                return \"No War\"\n            else:\n                return \"War\"\n        elif x_1 < x_2 and y_1 < y_2:\n            if y_1 < y_2:\n                return \"War\"\n            else:\n                return \"No War\"\n        elif x_1 > x_2 and y_1 < y_2:\n            if y_1 < y_2:\n                return \"War\"\n            else:\n                return \"No War\"\n        elif x_1 < x_2:\n            if y_1 > y_2:\n                return \"War\"\n            else:\n                return \"No War\"\n        elif x_1 > x_2:\n            if y_1 > y_2:\n                return \"War\"\n            else:\n                return \"No War\"\n    \n\"\"\"\n"
    },
    {
        "number": 4182,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, M, X, Y = list(map(int, stdin.split()))\n    x_1 = list(map(int, stdin.split()))\n    y_1 = list(map(int, stdin.split()))\n    x_2 = list(map(int, stdin.split()))\n    y_2 = list(map(int, stdin.split()))\n    x_3 = list(map(int, stdin.split()))\n    y_3 = list(map(int, stdin.split()))\n    x_4 = list(map(int, stdin.split()))\n    y_4 = list(map(int, stdin.split()))\n    x_5 = list(map(int, stdin.split()))\n    y_5 = list(map(int, stdin.split()))\n    x_6 = list(map(int, stdin.split()))\n    y_6 = list(map(int, stdin.split()))\n    x_7 = list(map(int, stdin.split()))\n    y_7 = list(map(int, stdin.split()))\n    x_8 = list(map(int, stdin.split()))\n    y_8 = list(map(int, stdin.split()))\n    x_9 = list(map(int, stdin.split()))\n    y_9 = list(map(int, stdin.split()))\n    x_10 = list(map(int, stdin.split()))\n    y_10 = list(map(int, stdin.split()))\n    if (X - X_1) * (Y - Y_1) > (X_2 - X_1) * (Y_2 - Y_1) or (X - X_3) * (Y - Y_3) > (X_4 - X_3) * (Y_4 - Y_3) or (X - X_5) * (Y - Y_5) > (X_6 - X_5) * (Y_6 - Y_5) or (X - X_7) * (Y - Y_7) > (X_8 - X_7) * (Y_8 - Y_7) or (X - X_9) * (Y - Y_9) > (X_10 - X_9) * (Y_10 - Y_9):\n        return \"War\"\n    else:\n        return \"No War\"\n"
    },
    {
        "number": 4183,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    T_1 = int(stdin.strip())\n    T_N = int(stdin.strip())\n    T_array = list(map(int, stdin.strip().split()))\n    \n    answer = 0\n    \n    for i in range(len(T_array) - 1):\n        if T_array[i] < T_1:\n            answer += T_array[i]\n            \n    for i in range(len(T_array) - 1):\n        if T_array[i] < T_N:\n            answer += T_array[i]\n            \n    return str(answer)"
    },
    {
        "number": 4183,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, T_1, T_2 = map(int, stdin.split())\n    N = int(N)\n    T_1 = int(T_1)\n    T_2 = int(T_2)\n    answer = N * T_1\n    for i in range(1, N):\n        answer += T_1 * T_2\n    return str(answer)\n\nRuntime: 40 ms, faster than 73.45% of Python3 online submissions for Hand of Clock.\nMemory Usage: 20.5 MB, less than 38.34% of Python3 online submissions for Hand of Clock.\n\"\"\"\n\nclass Solution:\n    def solution(self, N, T_1, T_2):\n        # \u63a2\u7d22\u3059\u308b\u6642\u9593\u3092\u4f5c\u6210\n        count = 0\n        a = 0\n        b = 0\n        # time\u3092\u4f5c\u6210\n        now = 0\n        for i in range(N):\n            a += T_1\n            b += T_2\n            now += T_1 * T_2\n            # a\u3068b\u30920\u306b\u7f6e\u63db\u3059\u308b\n            a -= b\n            # a\u3068b\u30921\u306b\u7f6e\u63db\u3059\u308b\n            a += T_1\n            # b\u3068c\u30920\u306b\u7f6e\u63db\u3059\u308b\n            b -= T_2\n            # b\u3068c\u30921\u306b\u7f6e\u63db\u3059\u308b\n            b += T_2\n            if a < 0 or b < 0:\n                count += 1\n                a, b = abs(a), abs(b)\n        return count * (now + count) // 2\n"
    },
    {
        "number": 4183,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, T_1, T_2, T_N, T_result = map(int, stdin.split())\n    l = list(map(int, stdin.split()))\n    l = sorted(l)\n    r = l[::-1]\n    if T_1 > T_N:\n        for i in l:\n            r.append(i)\n        T_result = T_result + r[-1]\n    elif T_2 > T_N:\n        for i in r:\n            T_result = T_result + i\n    else:\n        T_result = T_result + l[-1]\n    return str(T_result)\n"
    },
    {
        "number": 4183,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n  N, T_1, T_N = map(int, stdin.split())\n  answer = 0\n  rotate_times = (T_1 // N)\n  for i in range(N):\n    answer += rotate_times * (N - T_N)\n    rotate_times *= -1\n  return str(answer)\n"
    },
    {
        "number": 4183,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    T_1 = int(stdin[0])\n    T_2 = int(stdin[1])\n    T_3 = int(stdin[2])\n    T_4 = int(stdin[3])\n    T_5 = int(stdin[4])\n    T_6 = int(stdin[5])\n    T_7 = int(stdin[6])\n    T_8 = int(stdin[7])\n    T_9 = int(stdin[8])\n    T_10 = int(stdin[9])\n    T_11 = int(stdin[10])\n    T_12 = int(stdin[11])\n    T_13 = int(stdin[12])\n    T_14 = int(stdin[13])\n    T_15 = int(stdin[14])\n    T_16 = int(stdin[15])\n    T_17 = int(stdin[16])\n    T_18 = int(stdin[17])\n    T_19 = int(stdin[18])\n    T_20 = int(stdin[19])\n    T_21 = int(stdin[20])\n    T_22 = int(stdin[21])\n    T_23 = int(stdin[22])\n    T_24 = int(stdin[23])\n    T_25 = int(stdin[24])\n    T_26 = int(stdin[25])\n    T_27 = int(stdin[26])\n    T_28 = int(stdin[27])\n    T_29 = int(stdin[28])\n    T_30 = int(stdin[29])\n    T_31 = int(stdin[30])\n    T_32 = int(stdin[31])\n    T_33 = int(stdin[32])\n    T_34 = int(stdin[33])\n    T_35 = int(stdin[34])\n    T_36 = int(stdin[35])\n    T_37 = int(stdin[36])\n    T_38 = int(stdin[37])\n    T_39 = int(stdin[38])\n    T_40 = int(stdin[39])\n    T_41 = int(stdin[40])\n    T_42 = int(stdin[41])\n    T_43 = int(stdin[42])\n    T_44 = int(stdin[43])\n    T_45 = int(stdin[44])\n    T_46 = int(stdin[45])\n    T_47 = int(stdin[46])\n    T_48 = int(stdin[47])\n    T_49 = int(stdin[48])\n    T_50 = int(stdin[49])\n    T_51 = int(stdin[50])\n    T_52 = int(stdin[51])\n    T_53 = int(stdin[52])\n    T_54 = int(stdin[53])\n    T_55 = int(stdin[54])\n    T_56 = int(stdin[55])\n    T_57 = int(stdin[56])\n    T_58 = int(stdin[57])\n    T_59 = int(stdin[58])\n    T_60 = int(stdin[59])\n    T_61 = int(stdin[60])\n    T_62 = int(stdin[61])\n    T_63 = int(stdin[62])\n    T_64 = int(stdin[63])\n    T_65 = int(stdin[64])\n    T_66 = int(stdin[65])\n    T_67 = int(stdin[66])\n    T_68 = int(stdin[67])\n    T_69 = int(stdin[68])\n    T_70 = int(stdin[69])\n    T_71 = int(stdin[70])\n    T_72 = int(stdin[71])\n    T_73 = int(stdin[72])\n    T_74 = int(stdin[73])\n    T_75 = int(stdin[74])\n    T_76 = int(stdin[75])\n    T_77 = int(stdin[76])\n    T_78 = int(stdin[77])\n    T_79 = int(stdin[78])\n    T_80 = int(stdin[79])\n    T_81 = int(stdin[80])\n    T_82 = int(stdin[81])\n    T_83 = int(stdin[82])\n    T_84 = int(stdin[83])\n    T_85 = int(stdin[84])\n    T_86 = int(stdin[85])\n    T_87 = int(stdin[86])\n    T_88 = int(stdin[87])\n    T_89 = int(stdin[88])\n    T_90 = int(stdin[89])\n    T_91 = int(stdin[90])\n    T_92 = int(stdin[91])\n    T_93 = int(stdin[92])\n    T_94 = int(stdin[93])\n    T_95 = int(stdin[94])\n    T_96 = int(stdin[95])\n    T_97 = int(stdin[96])\n    T_98 = int(stdin[97])\n    T_99 = int(stdin[98])\n    T_100 = int(stdin[99])\n    T_101 = int(stdin[100])\n    T_102 = int(stdin[101])\n    T_103 = int(stdin[102])\n    T_104 = int(stdin[103])\n    T_105 = int(stdin[104])\n    T_106 = int(stdin[105])\n    T_107 = int(stdin[106])\n    T_108 = int(stdin[107])\n    T_109 = int(stdin[108])\n    T_110 = int(stdin[109])\n    T_111 = int(stdin[110])\n    T_112 = int(stdin[111])\n    T_113 = int(stdin[112])\n    T_114 = int(stdin[113])\n    T_115 = int(stdin[114])\n    T_116 = int(stdin[115])\n    T_117 = int(stdin[116])\n    T_118 = int(stdin[117])\n    T_119 = int(stdin[118])\n    T_120 = int(stdin[119])\n    T_121 = int(stdin[120])\n    T_122 = int(stdin[121])\n    T_123 = int(stdin[122])\n    T_124 = int(stdin[123])\n    T_125 = int(stdin[124])\n    T_126 = int(stdin[125])\n    T_127 = int(stdin[126])\n    T_128 = int(stdin[127])\n    T_129 = int(stdin[128])\n    T_130 = int(stdin[129])\n    T_131 = int(stdin[130])\n    T_132 = int(stdin[131])\n    T_133 = int(stdin[132])\n    T_134 = int(stdin[133])\n    T_135 = int("
    },
    {
        "number": 4183,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n  N, T_1, T_2 = map(int, stdin.split())\n  count = 0\n  cur_clock = 1\n  end_clock = 360\n  for i in range(T_1):\n    count += end_clock - T_1 + (end_clock - T_1) % (360.0 / T_2)\n    cur_clock = cur_clock * 360.0 / T_2\n  while count >= 360.0 / T_2:\n    end_clock -= 360.0 / T_2\n    cur_clock += 360.0 / T_2\n    count -= 360.0 / T_2\n  count += end_clock - T_2\n  return str(count)\n\n(2, 3, 5)\n"
    },
    {
        "number": 4183,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, T_1, T_2 = map(int, stdin.split())\n    clock_1 = 0\n    clock_2 = 0\n    N = min(N, T_1)\n    T_2 = T_1 + (T_1 - N)\n    T_1 = T_1 - (T_1 - N)\n    for i in range(N):\n        if T_1 <= i < T_2:\n            clock_1 += 1\n        elif T_1 < i < T_2 - N:\n            clock_2 += 1\n    return str(clock_1) + str(clock_2)"
    },
    {
        "number": 4183,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, T_1, T_2, T_3 = map(int, stdin.split())\n    return str(T_1 * N * (T_2 * T_3) + T_3 * N * (T_2 * T_1))"
    },
    {
        "number": 4183,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, T_1, T_N, T_2, T_3 = map(int, stdin.split())\n    t = 0\n    for _ in range(N):\n        T_i = T_1\n        T_j = T_2\n        T_k = T_3\n        T_i = T_i % 360\n        T_j = T_j % 360\n        T_k = T_k % 360\n        if T_i > T_j and T_i > T_k and T_j > T_k:\n            t += T_i\n        elif T_j > T_i and T_j > T_k and T_k > T_i:\n            t += T_j\n        elif T_k > T_i and T_k > T_j and T_i > T_k:\n            t += T_k\n    return str(t)\n"
    },
    {
        "number": 4183,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, T_1, T_2 = [int(i) for i in stdin.split()]\n    \n    def clock(i):\n        if i == 0:\n            return T_1\n        elif i == 1:\n            return T_2\n        elif i == N:\n            return T_1\n        else:\n            return clock(i-1) + clock(N-i)\n        \n    T_1, T_2 = clock(T_1), clock(T_2)\n    answer = (T_1 + T_2) % (T_1 * T_2)\n    return str(answer)"
    },
    {
        "number": 4184,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip().split()[0])\n    W_1, W_2, W_3 = map(int, stdin.strip().split())\n    \n    S_1, S_2 = 0, 0\n    \n    for i in range(N):\n        S_1 += W_1 * i\n        S_2 += W_2 * i\n    \n    if N % 2 == 0:\n        S_1, S_2 = S_2, S_1\n    \n    return str(abs(S_1 - S_2))"
    },
    {
        "number": 4184,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin[0])\n    W_1, W_2, W_3 = [int(x) for x in stdin[1].split()]\n    W_sum = W_1 + W_2\n    N = N - 1\n    s = str(abs(W_sum - N))\n    return s\n\nTest Example:\nTestcase1:\nInput:\n3\n1 2 3\n\nOutput:\n0\nExplanation:\nS_1 = 1 + 2 = 3, S_2 = 3\nHere, S_1 = 1 + 2 = 3, S_2 = 3.\n\nTestcase2:\nInput:\n5\n1 2 3 4 5 6\n\nOutput:\n9\nExplanation:\nS_1 = 1 + 2 + 3 + 4 + 5 + 6 = 9\nS_2 = 9 + 9 = 13\nHere, S_1 = 1 + 2 + 3 + 4 + 5 + 6 = 9, S_2 = 9.\n\"\"\"\n\ndef"
    },
    {
        "number": 4184,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, T = map(int, stdin.split())\n    weights = [int(w) for w in stdin.split()]\n    nums = sorted(weights)\n    #print(weights)\n    #print(nums)\n    #print(nums[-1], nums[-2], nums[-3])\n    dp = [[0 for i in range(T + 1)] for _ in range(n + 1)]\n    #print(dp)\n    for i in range(n + 1):\n        #print(i)\n        for j in range(1, T + 1):\n            #print(i, j)\n            if nums[i - 1] > j:\n                dp[i][j] = dp[i - 1][j] + nums[i - 1] - nums[i]\n            else:\n                dp[i][j] = dp[i][j - nums[i]] + nums[i] - nums[i - 1]\n    #print(dp)\n    return str(abs(dp[n][T]))\n\ndef"
    },
    {
        "number": 4184,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, T = map(int, stdin.split())\n    weights = list(map(int, stdin.split()))\n    S_1 = 0\n    S_2 = 0\n    for i in range(N):\n        if weights[i] >= T:\n            S_1 += abs(weights[i] - T)\n            S_2 += abs(T - weights[i])\n        else:\n            S_1 += abs(weights[i] - T)\n    return str(S_1 - S_2)\n'''\n\nclass Solution:\n    def divisors(self, n: int) -> List[int]:\n        divisors = []\n        i = 1\n        while i*i <= n:\n            if n % i == 0:\n                divisors.append(i)\n                n //= i\n            else:\n                i += 1\n        return divisors\n    \n    def minimal_divisor(self, N: int, K: int) -> int:\n        \n        if K > N*(N+1)//2:\n            return 0\n        if N == K:\n            return 1\n        \n        if N % (K+1) == 0:\n            return K\n        \n        \n        for d in self.divisors(N):\n            N_2 = N//d\n            if N_2!= N:\n                if N_2 + d <= N:\n                    return d\n        return 0\n\nN, K = map(int, input().split())\nprint(Solution().minimal_divisor(N, K))\n"
    },
    {
        "number": 4184,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N,T = map(int,stdin.split())\n    W = [int(i) for i in stdin.split()]\n    S = sum(W)\n    return str(abs(S-S))\n\"\"\"\n\nclass Solution:\n    def maxAbsDifference(self, N: int, T: int) -> str:\n        \"\"\"\n        \u601d\u8def\uff1a\n        \u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(N^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(N^2)\n        \"\"\"\n        \n        return self.dfs(N, T, set())\n    \n    def dfs(self,N,T,S):\n        \"\"\"\n        \u4e24\u79cd\u601d\u8def\uff1a\n        \u4e00\u79cd\u904d\u5386\u8fd9\u4e2aN\u4e2a\u6570\uff0c\u6bcf\u6b21\u90fd\u5bf9\u4e00\u4e2a\u6570\u8fdb\u884c\u904d\u5386\n        \u4e8c\u79cd\u904d\u5386\u8fd9\u4e2aN-T\u4e2a\u6570\n        \"\"\"\n        \n        if T==0:\n            return 0\n        \n        S.add(N)\n        if N>0:\n            S.add(N-T)\n        return max(self.dfs(N-1,T-1,S),self.dfs(N-1,T,S))\n        \n"
    },
    {
        "number": 4184,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, W_1, W_2, W_3 = map(int, stdin.split())\n    \n    def check(W_i, W_i_set):\n        if W_i not in W_i_set:\n            return False\n        if N - W_i < 1:\n            return False\n        return True\n        \n    S_1 = 0\n    S_2 = 0\n    \n    for W_i in range(N - 1):\n        if check(W_i, {W_1, W_2, W_3}) and check(W_i + 1, {W_1, W_2, W_3}):\n            S_1 += W_1\n            S_2 += W_2\n    \n    print(abs(S_1 - S_2))"
    },
    {
        "number": 4184,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    W_1 = int(stdin[1])\n    W_2 = int(stdin[2])\n    W_3 = int(stdin[3])\n    W_4 = int(stdin[4])\n    W_5 = int(stdin[5])\n    W_6 = int(stdin[6])\n    W_7 = int(stdin[7])\n    W_8 = int(stdin[8])\n    W_9 = int(stdin[9])\n    S_1 = W_1 + W_2 + W_3 + W_4 + W_5 + W_6 + W_7 + W_8 + W_9\n    S_2 = W_1 + W_2 + W_3 + W_4 + W_5 + W_6 + W_7 + W_8 + W_9\n    min_diff = abs(S_1 - S_2)\n    return str(min_diff)\n'''\ndef"
    },
    {
        "number": 4184,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    for i in range(int(stdin)):\n        n = int(stdin[i])\n        s1 = 0\n        s2 = 0\n        for j in range(1,n+1):\n            s1 += j\n            s2 += j\n        diff = abs(s1-s2)\n        if diff<0:\n            diff = -diff\n        else:\n            pass\n        print(diff)"
    },
    {
        "number": 4184,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n  N, T = [int(i) for i in stdin.split()]\n  mass = [int(i) for i in stdin.split()]\n  group = [0] * (N+1)\n  for i in range(1, N+1):\n    group[i] = group[i-1] + mass[i-1]\n  def dfs(k, sum_):\n    if k == N:\n      return sum_\n    ans = float(\"inf\")\n    for i in range(N-k+1):\n      ans = min(ans, dfs(k+1, sum_ + group[i+k] - group[i]))\n    return ans\n  print(dfs(0, 0))\n\nExplanation\n3\n1 2 3\n1 2 3\n4 5 7\nSample Input\n\n2\n1 2 3\n\nSample Output\n\n1\n\nExplanation\n\n1\n3\n\n2\n3\n\n\"\"\"\n"
    },
    {
        "number": 4184,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    T = int(stdin.strip().split()[0])\n    W = list(map(int, stdin.strip().split()[1:]))\n    S_1 = 0\n    S_2 = 0\n    for i in range(N):\n        S_1 += W[i]\n        S_2 += W[N-1-i]\n    abs_diff = abs(S_1-S_2)\n    return str(abs_diff)"
    },
    {
        "number": 4185,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(0)\n\nTime Limit: O(N * M)\nSpace Limit: O(N * M)\n\nConstraints:\n1 <= n <= 10^5\n1 <= m <= 10^5\n\nhttps://www.youtube.com/watch?v=SZHjvxlY5c\n\n\"\"\"\n\nimport itertools\n\nn, m = map(int, input().split())\n\ncolumns = [itertools.cycle(range(m)) for _ in range(n)]\nrows = [itertools.cycle(range(n)) for _ in range(n)]\n\ndef"
    },
    {
        "number": 4185,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [[0] * (n + 1)]\n    for _ in range(n):\n        a.append([0] * (n + 1))\n        for _ in range(m):\n            a[-1][-1] += (m - _ - 1)\n            a[-1][-1] %= m\n    a.sort()\n    max_val = 0\n    cur_val = a[0][0]\n    for i in range(1, n):\n        cur_val = a[i][0]\n        if cur_val > max_val:\n            max_val = cur_val\n        cur_val = a[i][-1]\n        if cur_val > max_val:\n            max_val = cur_val\n    if max_val > 2:\n        return str(2)\n    elif max_val > 1:\n        return str(max_val)\n    elif max_val == 0:\n        return str(0)\n    elif max_val == 1:\n        return str(1)\n    else:\n        return str(a[-1][-1])"
    },
    {
        "number": 4185,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(n * m + sum(map(int, list(str(n * m) +''))))\n\nprint(solution(input()))\n\ndef"
    },
    {
        "number": 4185,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    print(n)\n    print(m)\n    a = [list(map(int, input().split())) for _ in range(n)]\n    x = n - m\n    a[0][0] = 0\n    for i in range(x):\n        j = i + x\n        if j >= n:\n            j = j % n\n        else:\n            continue\n        a[j][1] += 1\n        a[j][2] += a[j][0]\n        a[j][3] += a[j][1]\n    for i in range(n):\n        if a[i][0] % 2!= 0:\n            a[i][0] += 1\n        if a[i][1] % 2!= 0:\n            a[i][1] += 1\n        if a[i][2] % 2!= 0:\n            a[i][2] += 1\n        if a[i][3] % 2!= 0:\n            a[i][3] += 1\n    answer = 0\n    for i in range(m):\n        if a[i][0] % 2!= 0:\n            answer += a[i][0]\n        if a[i][1] % 2!= 0:\n            answer += a[i][1]\n        if a[i][2] % 2!= 0:\n            answer += a[i][2]\n        if a[i][3] % 2!= 0:\n            answer += a[i][3]\n    if answer % 2 == 0:\n        answer = 0\n    else:\n        answer = 1\n    print(answer)\n    return str(answer)"
    },
    {
        "number": 4185,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return '0'\n\ndef"
    },
    {
        "number": 4185,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    m = stdin[2]\n    n = stdin[1]\n    k = int(stdin[3])\n    l = int(stdin[5])\n    m = int(stdin[1])\n    n = int(stdin[2])\n    #print(n,m)\n    if (l+1) * (n+1) < m * (n+1):\n        return str(l * n + (n+1)*l + m + 1)\n    if (l+1) * (n+1) < (m+1) * (n+1):\n        return str(l * n + (n+1)*l + m + 1)\n    if (m+1) * (n+1) < (k+1) * (n+1):\n        return str(l * n + (n+1)*l + m + 1)\n    if (m+1) * (n+1) < (k+1) * (n+1):\n        return str(l * n + (n+1)*l + m + 1)\n    if (l+1) * (n+1) < (k+1) * (n+1):\n        return str(l * n + (n+1)*l + m + 1)\n    if (m+1) * (n+1) < (k+1) * (n+1):\n        return str(l * n + (n+1)*l + m + 1)\n    if (l+1) * (n+1) < (k+1) * (n+1):\n        return str(l * n + (n+1)*l + m + 1)\n    if (m+1) * (n+1) < (k+1) * (n+1):\n        return str(l * n + (n+1)*l + m + 1)\n    if (l+1) * (n+1) < (k+1) * (n+1):\n        return str(l * n + (n+1)*l + m + 1)\n    if (m+1) * (n+1) < (k+1) * (n+1):\n        return str(l * n + (n+1)*l + m + 1)\n    if (n+1) * (l+1) < (k+1) * (n+1):\n        return str(l * n + (n+1)*l + m + 1)\n    if (n+1) * (l+1) < (k+1) * (n+1):\n        return str(l * n + (n+1)*l + m + 1)\n    if (n+1) * (l+1) < (k+1) * (n+1):\n        return str(l * n + (n+1)*l + m + 1)\n    if (n+1) * (l+1) < (k+1) * (n+1):\n        return str(l * n + (n+1)*l + m + 1)\n    if (n+1) * (l+1) < (k+1) * (n+1):\n        return str(l * n + (n+1)*l + m + 1)\n    if (n+1) * (l+1) < (k+1) * (n+1):\n        return str(l * n + (n+1)*l + m + 1)\n    if (n+1) * (l+1) < (k+1) * (n+1):\n        return str(l * n + (n+1)*l + m + 1)\n    if (n+1) * (l+1) < (k+1) * (n+1):\n        return str(l * n + (n+1)*l + m + 1)\n    if (m+1) * (n+1) < (k+1) * (n+1):\n        return str(l * n + (n+1)*l + m + 1)\n    if (m+1) * (n+1) < (k+1) * (n+1):\n        return str(l * n + (n+1)*l + m + 1)\n    if (m+1) * (n+1) < (k+1) * (n+1):\n        return str(l * n + (n+1)*l + m + 1)\n    if (m+1) * (n+1) < (k+1) * (n+1):\n        return str(l * n + (n+1)*l + m + 1)\n    if (n+1) * (m+1) < (k+1) * (n+1):\n        return str(l * n + (n+1)*l + m + 1)\n    if (n+1) * (m+1) < (k+1) * (n+1):\n        return str"
    },
    {
        "number": 4185,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    for _ in range(n):\n        a.insert(0, a.pop())\n    a.insert(0, 0)\n    for i in range(m):\n        for j in range(n):\n            a[j] = min(a[j], a[i] + a[j])\n    return str(a.pop(0))\n"
    },
    {
        "number": 4185,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n < m:\n        m, n = n, m\n    a = [[0 for i in range(n)] for j in range(n)]\n    j = 0\n    for i in range(n):\n        a[i][j] = int(stdin[i])\n        j += 1\n        j %= n\n    i, j = 0, 0\n    for j in range(n):\n        if i < n and a[i][j]!= 0:\n            a[i][j], a[i + 1][j] = a[i + 1][j], a[i][j]\n            i += 2\n        if i < n and j < n and a[i][j]!= 0:\n            a[i][j], a[i + 1][j] = a[i + 1][j], a[i][j]\n            i += 2\n            j += 1\n    return str(min(a[n - 1][m - 1], a[n - 1][m], a[n][m - 1], a[n][m]))"
    },
    {
        "number": 4185,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    m = n\n    t = n\n    \n    for _ in range(n-1):\n        for _ in range(m):\n            for _ in range(t):\n                a = list(map(int, stdin.split()))\n                i = a.index(1)\n                j = a.index(2)\n                a[i], a[j] = a[j], a[i]\n                a = list(map(str, a))\n                t = len(a)\n            m -= 1\n            if t == 0:\n                return \"0\"\n        n -= 1\n        t = n\n    return \"2\"\n\nTime complexity: O(2^n)\nSpace Complexity: O(n)\n\n\n1. Permutations (permutations):\n  1. find a number\n  2. permute the number\n  3. reverse the permutation\n  4. rearrange the permutation\n  5. reverse the permutation\n  6. reverse the permutation\n  7. reverse the permutation\n  8. reverse the permutation\n  9. reverse the permutation\n  10. reverse the permutation\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4185,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    matrix = [[0] * m for i in range(n)]\n    col = 0\n    for i in range(1, n + 1):\n        for j in range(0, m + 1):\n            if matrix[i - 1][j - 1] == 1:\n                matrix[i][j] = 1\n                if col < 2:\n                    matrix[i][col] = 2\n                    col += 1\n            else:\n                matrix[i][j] = 0\n    print(''.join([str(i) for i in matrix]))\n    return 0\n\nprint(solution(input()))\n\n-----Constraints-----\n\n0 < n, m < 2^5\n\n-----Time Limit Exceeded-----\n\n0 < n, m < 2^5\n\n-----Divide and Conquer-----\n\nInput\n\n1 3\n4 5\n\nOutput\n\n1\n\n0\n1\n\n2\n3\n4\n\n-----Example-----\n\nInput\n\n3 3\n2 2 1\n2 1 3\n\nOutput\n\n3\n\n-----Example-----\n\nInput\n\n3 3\n2 2 1\n2 3 3\n\nOutput\n\n4\n\n------Example---------\n\nInput\n\n3 3\n2 2 1\n2 3 3\n\nOutput\n\n0\n\n-----Example---------\n\nInput\n\n4 3\n1 2 3\n1 3 4\n1 4 5\n\nOutput\n\n2\n\n------Example---------\n\nInput\n\n4 3\n1 2 3\n1 3 4\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1 4 5\n1"
    },
    {
        "number": 4186,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def solve(n: int, a: str) -> str:\n        total = 0\n        for i in range(n):\n            if a[i]!= '0':\n                total += solve(int(a[i]) + 1, a[:i] + '0' + a[i + 1:])\n            else:\n                total += solve(int(a[i]) + 1, a[:i] + '1' + a[i + 1:])\n        return str(total)\n\n    return solve(int(stdin[0]), stdin[1])\n    \n"
    },
    {
        "number": 4186,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = map(int, input().split())\n    a = list(sorted(a))\n    n = len(a)\n    if n%2==1:\n        return str(n//2)\n    if n%2==0:\n        return str(n//2+1)\n\nprint(solution(input()))\n\n\n-----Solution-----\n\nInput\n6\n5 10 2 3 14 5\n\nOutput\n5\n\nInput\n2\n1 100\n\nOutput\n99\n\n\n\n-----Explanation-----\n\nIn the first example the optimal teams are: $(1, 4)$ and $(3, 7)$, $1$ and $4$ corresponding to the three students. The second student solves all the problems, while the third student is responsible for solving $5$ problems, the fourth student is responsible for solving $10$ problems, and the third student is responsible for solving $4$ problems.\n\nIn the second example the optimal teams are: $(2, 4)$ and $(1, 5)$ and $2$ corresponding to the two students.\n\nInput\n6\n5 10 2 3 14 5\n\nOutput\n5\n\nInput\n2\n1 100\n\nOutput\n99\n\nExplanation\n\nThe minimum total number of problems students should solve to form exactly $5$ teams.\n\nIn the third example, all students are at the same team, thus the only solution is $5$.\n\nInput\n6\n5 10 2 3 14 5\n\nOutput\n5\n\nInput\n2\n1 100\n\nOutput\n99\n\nExplanation\n\nThe minimum total number of problems students should solve to form exactly $5$ teams.\n\n\nInput\n6\n5 10 2 3 14 5\n\nOutput\n7\n\nInput\n1\n1 100\n\nOutput\n99\n\nExplanation\n\nThe minimum total number of problems students should solve to form exactly $7$ teams.\n\nThe goal is to find the number of problems students should solve to form exactly $7$ teams.\n\nInput\n6\n5 10 2 3 14 5\n\nOutput\n7\n\n\n\"\"\"\ndef"
    },
    {
        "number": 4186,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n    n = n % 2\n    result = 0\n    if n == 0:\n        result = a[0]\n    elif n == 1:\n        result += a[1]\n    else:\n        result += a[2]\n    return str(result)\n\n-----Result-----\n\nOutput\n5\n\n\n-----Constraints-----\n\n1 <= stdin.length <= 100\n1 <= a[i] <= 100\n1 <= n <= 2 * 10^5\n\n1 <= stdin.length <= 10^6\n1 <= a[i] <= 10^6\n\nC++ solution template\n\nusing only ints for n and a.\n\ntemplate<int n>\nint solution(int n)\n{\n    if (n == 0)\n        return 0;\n    if (n == 1)\n        return 1;\n    int a[n];\n    return solution(n - 1) + solution(n - 2);\n}\n\n-----Brute Force-----\n\ntemplate<int n>\nint solution(int n)\n{\n    int a[n];\n    int min;\n    int ans;\n    a[n] = min;\n    for (int i = 1; i < n; i++)\n        a[i] = min;\n    for (int i = 1; i < n; i++)\n        if (a[i] >= a[i - 1])\n            min = a[i];\n    if (min > ans)\n        ans = min;\n    return ans;\n}\n"
    },
    {
        "number": 4186,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    return str(len(list(set([a[i] for i in range(n) if a[i] == max(a)]))))\n"
    },
    {
        "number": 4186,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    if n % 2 == 0:\n        return (n//2 + 1) * n//2\n    else:\n        return n // 2 * n // 2 + (n // 2 + 1) * n // 2\n\"\"\"\n\ndef"
    },
    {
        "number": 4186,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    c = list(map(int, stdin.split()))\n    return str(sum(c)//2 + sum(c)//2)\n\ndef"
    },
    {
        "number": 4186,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n % 2!= 0:\n        return str(n-1)\n    for i in range(1, n // 2+1):\n        if i == n//2:\n            return str(i)\n        if i % 2 == 1:\n            a = i\n            b = i\n            c = i\n            if a % 2 == 0:\n                a = a - 1\n                b = a + 1\n                c = b + 1\n            if b % 2 == 0:\n                b = b - 1\n                c = b + 1\n            if c % 2 == 0:\n                c = c - 1\n                d = c + 1\n            if d % 2 == 0:\n                d = d - 1\n                e = d + 1\n            if a % 2 == 0:\n                a = a - 1\n                e = a + 1\n                if b % 2 == 0:\n                    b = b - 1\n                if c % 2 == 0:\n                    c = c - 1\n                if d % 2 == 0:\n                    d = d - 1\n                if e % 2 == 0:\n                    e = e - 1\n            solution(str(a)+str(b)+str(c)+str(d)+str(e))\n    return str(a)\n\nInput\n6\n5 10 2 3 14 5\n\nOutput\n5\n\nInput\n2\n1 100\n\nOutput\n99\n\nExplanation\n\nTeam 1: $(2, 5)$, $(1, 6)$ and $(2, 5)$, $(3, 4)$ and $(4, 5)$ and $(5, 6)$\nTeam 2: $(1, 6)$, $(4, 5)$ and $(5, 6)$, $(3, 4)$ and $(2, 5)$\nTeam 3: $(2, 5)$, $(4, 5)$ and $(5, 6)$, $(3, 4)$ and $(1, 6)$\nTeam 4: $(1, 6)$, $(5, 6)$ and $(3, 4)$, $(2, 5)$ and $(4, 5)$\nTeam 5: $(2, 5)$, $(3, 4)$, $(4, 5)$ and $(5, 6)$, $(3, 4)$ and $(1, 6)$\nTeam 6: $(1, 6)$, $(2, 5)$, $(3, 4)$, $(4, 5)$ and $(5, 6)$\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\nfor i in range(n):\n    b = a[i]\n    for j in range(i+1, n):\n        c = a[j]\n        if b % 2 == 0 and c % 2 == 0:\n            a[i] = a[i] + 1\n            a[j] = a[j] + 1\n            a[i] = a[i] + 1\n            a[j] = a[j] + 1\n            a[i] = a[i] + 1\n        elif b % 2 == 0:\n            a[i] = a[i] + 1\n            a[j] = a[j] + 1\n        elif c % 2 == 0:\n            a[i] = a[i] + 1\n            a[j] = a[j] + 1\n        elif b % 2!= 0 and c % 2!= 0:\n            a[i] = a[i] + 1\n            a[j] = a[j] + 1\n        else:\n            a[i] = a[i] + 1\n            a[j] = a[j] + 1\nfor i in a:\n    print(i)"
    },
    {
        "number": 4186,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 == 0:\n        return str(n // 2 + 1)\n    else:\n        return str(n // 2)\n\n\n\nOutput\n'99'\n\nInput\n6\n5 10 2 3 14 5\n\nOutput\n'5'\n\n\n\n-----Constraints-----\n\n1 <= n <= 2^30\n\n1 <= a_i <= 100\n\n\n-----Sample Input 1-----\n\n6\n5 10 2 3 14 5\n\nSample Output 1:\n\n'99'\n\n-----Sample Input 2-----\n\n2\n1 100\n\nSample Output 2:\n\n'5'\n\n-----Sample Input 3-----\n\n4\n1 5 6 10 7\n\nSample Output 3:\n\n'5'\n\n-----Sample Input 4-----\n\n9\n1 3 5 6 7 8 9\n\nSample Output 4:\n\n'5'\n\n-----Sample Input 5-----\n\n1\n1\n\nSample Output 5:\n\n'99'\n"
    },
    {
        "number": 4186,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a_list = []\n    for _ in range(n):\n        a, b = map(int, stdin.split())\n        a_list.append((a, b))\n    def solution(a, b):\n        if a <= b:\n            return a + b\n        return a*b\n    return ''.join(map(str, sorted(a_list, key=solution)))"
    },
    {
        "number": 4186,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    \n    teams = []\n    for i in range(0, n, 2):\n        a, b = map(int, stdin[i:i+2].split())\n        teams.append((a, b))\n    \n    return str(len(teams))\n\n\n\ndef"
    },
    {
        "number": 4187,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    \n    def bfs(day: int, h: int, cnt: int, n: int) -> int:\n        queue = deque()\n        queue.append((day, h, cnt))\n        \n        while queue:\n            day, h, cnt = queue.popleft()\n            \n            if day == n:\n                return cnt\n            \n            for i in range(1, n):\n                if day == n - i:\n                    cnt += 1\n                    queue.append((day + i, h, cnt))\n                elif day + i == n:\n                    cnt += 1\n                    queue.append((day + i, h, cnt))\n                else:\n                    continue\n        \n        return 0\n    \n    return max(map(max, map(bfs, range(1, n + 1), range(1, n))))\n\n\ndef"
    },
    {
        "number": 4187,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def polcarp_rest(n, a, b, c, d):\n        if a+b==c+d:\n            return 0\n        elif a+b>c+d:\n            return 1\n        elif a+b<c+d:\n            return 1\n        else:\n            return 2\n    x, y, z = map(int, stdin.split())\n    if z>x:\n        a, b, c = z-x, x, z\n    else:\n        a, b, c = z, z-x, x\n    if polcarp_rest(a, b, c, a, b)==0:\n        print(z)\n    elif polcarp_rest(a, b, c, a, b)==1:\n        print(z-x)\n    elif polcarp_rest(a, b, c, a, b)==2:\n        print(z)\n    else:\n        print(z-x+1)\n    return 0\n\n-----Constraints-----\n1 <= n <= 2\\cdot10^5\n\n-----Time Limit Before Input-----\n1 second\n\n-----Time Limit Before Output-----\n1 second\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4187,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    days = [0, 0, 0]\n    for i in range(1, n+1):\n        days[0], days[1] = 0, 1\n        for j in range(2, n+1):\n            days[j] = min(days[j-1], days[j-2] + 1)\n    return str(days[n])\n"
    },
    {
        "number": 4187,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n,*a=list(map(int,stdin.split()))\n    s=[]\n    for i in range(1,n+1):\n        s.append(a[i-1] if a[i-1]>0 else 0)\n    return str(s.count(1))\n\nprint(solution(\"3 7 0 0\"))\n"
    },
    {
        "number": 4187,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    hours = [0, 0, 0, 0, 0]\n    for i in range(1, n+1):\n        hours[i] = int(stdin[i-1])\n        if i % 4 == 0:\n            hours[i] = hours[i-1] + hours[i-2]\n        if i % 7 == 0:\n            hours[i] = hours[i-1]\n    return str(hours[-1])"
    },
    {
        "number": 4187,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    if x > y:\n        a, b, d = 0, 0, 0\n        while a < y:\n            if b == 0:\n                a += 1\n                b = 1\n            if a == b:\n                a += 1\n                b += 1\n            d += 1\n        return str(d)\n    if y > x:\n        a, b, d = 0, 0, 0\n        while a < x:\n            if b == 0:\n                a += 1\n                b = 1\n            if a == b:\n                a += 1\n                b += 1\n            d += 1\n        return str(d)\n\nprint(solution(\"7\"))\n"
    },
    {
        "number": 4187,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, a = [int(i) for i in stdin.split()]\n    max_rest = 1\n    for i in range(n):\n        hours = [int(i) for i in stdin.split()]\n        if hours[0]!= 0:\n            rest = 0\n            for j in range(1, len(hours)):\n                if hours[j]!= 0 and rest == 0:\n                    rest = 1\n                if hours[j] == 0 and rest == 1:\n                    rest = 0\n                if hours[j]!= 0 and rest == 1:\n                    rest = 0\n            if rest == 1:\n                max_rest = max(max_rest, i + 1 - i % a)\n    return str(max_rest)\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4187,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    return ','.join(str(a[i]) for i in range(n))\n\nInput\n1\n1\n\nOutput\n1\n\nInput\n2\n3\n\nOutput\n0\n\nInput\n1\n1\n\nOutput\n2\n\n'''"
    },
    {
        "number": 4187,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    arr = [int(input()) for _ in range(n)]\n    \n    for i in range(n-1):\n        for j in range(i+1, n):\n            if arr[i] < arr[j]:\n                arr[i], arr[j] = arr[j], arr[i]\n                \n    answer = 0\n    for i in range(n):\n        if a[i] == 1:\n            answer += arr[i]\n        elif a[i] == 0:\n            answer += (arr[i] - arr[i-1])\n    return str(answer)\n\nIn this solution, there are no need to write out the whole array. In order to have a time of O(n), we need to write a recursion of the same style and then remove the leading 0's from the array.\n\nHow can we achieve that?\n\nThe extra $0's also need to be removed from the array, because the array is just filled with 0's and we need to remove the leading 0's from the array. The remaining $1's, $2's, and $3's need to be removed from the array, because we need to remove the leading $1's from the array.\n\nTo remove the leading $1's, we need to remove the trailing $1.\n\nTo remove the leading $2's, we need to remove the trailing $2.\nTo remove the leading $3's, we need to remove the trailing $3.\nTo remove the trailing $0's, we need to remove the trailing $0.\n\nTime complexity: O(n)\n\"\"\"\n\n\"\"\"\nGood explanation:\n\nThis way, we need to add all 1s to the array, and need to check if we can remove them out. If we can, then we need to add $0's to the array to remove all 1s.\nWe need to check if we can remove the leading 0's to the array, and if we can then we need to remove the leading $1's, and $2's, $3's, and $0's.\nWe need to check if we can remove the leading $1's, and if we can then we need to remove the leading $0's, and $2's, $3's, and $1's.\nWe need to check if we can remove the leading $0's, and if we can then we need to remove the leading $1's, and $2's, $3's, and $1's.\nWe need to check if we can remove the leading $0's, and if we can then we need to remove the leading $1's, and $2's, $3's, and $1's.\nWe need to check if we can remove the leading $0's, and if we can then we need to remove the leading $1's, and $2's, $3's, and $1's.\nWe need to check if we can remove the leading $0's, and if we can then we need to remove the leading $1's, and $2's, $3's, and $1's.\nWe need to check if we can remove the leading $0's, and if we can then we need to remove the leading $1's, and $2's, $3's, and $1's.\nWe need to check if we can remove the leading $0's, and if we can then we need to remove the leading $1's, and $2's, $3's, and $1's.\nNow we need to check if we can remove all 1s to the array, and then remove all 1s from the array.\n\n\"\"\"\n\n\"\"\"\n2\n0 1 1 0 1\n0 1 0 1 1\n0 0 1 1 1\n0 0 1 0 0\n0 1 1 0 1\n1 0 0 0 0\n1 0 0 1 1\n1 0 0 1 0\n0 1 0 0 1\n0 0 0 0 1\n1 0 0 1 0\n1 0 0 1 1\n0 0 0 0 1\n1 0 0 0 0\n\n4\n0 1 0 1 1 0 1\n0 0 1 1 0 0 1\n0 0 0 0 1 1 0 0\n1 0 0 0 0 1 1 1\n\n2\n1 1\n\n3\n0 1 0 1 1 0 1\n1 0 1 0 1 1 0 1\n0 0 0 1 0 1 1 1\n0 0 1 1 0 0 1 1\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4187,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    a = [0]\n    for i in range(1, n):\n        a.append(int(stdin[i]))\n    a.sort()\n    a.append(1)\n    for i in range(1, n):\n        if a[i] < a[i-1]:\n            a[i], a[i-1] = a[i-1], a[i]\n    print(a[-1])\n    return str(len(a))\n    \n"
    },
    {
        "number": 4188,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\""
    },
    {
        "number": 4188,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(' ')\n    n = int(stdin[0])\n    answer = 0\n    \n    # array [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\n    # 16 5\n    # 16 5 6\n    # 16 5 6 7\n    # 16 5 6 7 8\n    # 16 5 6 7 8 9\n    # 16 5 6 7 8 9 10\n    # 16 5 6 7 8 9 10 11\n    # 16 5 6 7 8 9 10 11 12\n    # 16 5 6 7 8 9 10 11 12 13\n    # 16 5 6 7 8 9 10 11 12 13 14\n    # 16 5 6 7 8 9 10 11 12 13 14 15\n    # 16 5 6 7 8 9 10 11 12 13 14 15 16\n    \n    # array [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]\n    # 16 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 123 124 125 126 127 128 129 130 131 132 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 191 192 193 194 195 196 197 198 199 200 200 201 201 202 202 203 204 205 206 207 208 208 209 210 211 212 213 214 215 216 217 219 220 220 221 222 223 224 225 226 226 227 228 229 229 230 231 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 268 269 271 272 272 273 274 275 275 277 276 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 299 300 301 301 302 303 304 305 306 308 308 309 310 310 311 313 314 315 316 317 318 319 320 321 321 322 323 324 325 326 327 328 329 330 330 331 331 332 332 333 333 334 334 335 336 337 336 338 339 340 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341"
    },
    {
        "number": 4188,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(1, len(stdin)):\n        stdin[i] = int(stdin[i])\n        if stdin[i] == 0:\n            del stdin[i]\n            stdin.append(0)\n    return str(max(stdin))\n\n\nTime complexity: O(n)\nSpace complexity: O(1)\n\nhttps://practice.geeksforgeeks.org/problems/full-of-squares-smallest-number-of-lines/1/?track=LeetCode\n\n\nclass Solution:\n    def fullOfSquares(self, n: int) -> int:\n        \n        sol = 0\n        square = 2\n        \n        while square <= n:\n            sol += square * square\n            square *= 2\n        \n        return sol"
    },
    {
        "number": 4188,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n < 1 or n > 16:\n        return 0\n    numbers = []\n    for _ in range(n):\n        numbers.append(int(stdin.strip()))\n    numbers.sort(reverse=True)\n    answer = numbers[0]\n    for i in range(1,len(numbers)):\n        if numbers[i] == answer+1:\n            answer += 1\n        else:\n            break\n    return answer\n'''"
    },
    {
        "number": 4188,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin.strip())\n    \n    answer = ''\n    \n    for i in range(1,n+1):\n        answer += str(i)\n        \n        if i == n:\n            break\n        \n        answer +=''\n        \n        if i == n+1:\n            break\n        \n        if i < n:\n            answer += str(i)\n            \n            if i == n+1:\n                break\n                \n            answer +=''\n                \n    return answer\n\nInput\n1\n\nOutput\n1\ndef"
    },
    {
        "number": 4188,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n==0 or n==1:\n        return n\n    answer = 0\n    for i in range(1,n):\n        if i%2==1:\n            answer = answer +i\n        else:\n            answer = answer -i\n    return answer\n        \n"
    },
    {
        "number": 4188,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s=list(stdin)\n    s.sort(key=lambda x:len(x))\n    \n    if s[0]==\"0\":\n        s.remove(s[0])\n    \n    a=int(s[0])\n    \n    i=0\n    while i<len(s):\n        if s[i]==\"1\":\n            i+=1\n        else:\n            if i==0:\n                a=a+1\n            else:\n                a=a+2*int(s[i])\n            i+=1\n    \n    return str(a)\n"
    },
    {
        "number": 4188,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    answer = ''\n    n = int(stdin)\n    for i in range(1, n+1):\n        if n%i == 0:\n            answer = str(i)\n            break\n    return answer"
    },
    {
        "number": 4188,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    # 1\n    # time: O(m + n)\n    # space: O(m + n)\n    \n    # 2\n    # time: O(m + n)\n    # space: O(m + n)\n    \n    # 3\n    # time: O(m + n)\n    # space: O(m + n)\n    \n    # 4\n    # time: O(m + n)\n    # space: O(m + n)\n    \n    # 5\n    # time: O(m + n)\n    # space: O(m + n)\n    \n    # 6\n    # time: O(m + n)\n    # space: O(m + n)\n    \n    # 7\n    # time: O(m + n)\n    # space: O(m + n)\n    \n    # 8\n    # time: O(m + n)\n    # space: O(m + n)\n    \n    # 9\n    # time: O(m + n)\n    # space: O(m + n)\n    \n    # 10\n    # time: O(m + n)\n    # space: O(m + n)\n    \n    # 11\n    # time: O(m + n)\n    # space: O(m + n)\n    \n    # 12\n    # time: O(m + n)\n    # space: O(m + n)\n    \n    # 13\n    # time: O(m + n)\n    # space: O(m + n)\n    \n    # 14\n    # time: O(m + n)\n    # space: O(m + n)\n    \n    # 15\n    # time: O(m + n)\n    # space: O(m + n)\n    \n    # 16\n    # time: O(m + n)\n    # space: O(m + n)\n    \n    # 17\n    # time: O(m + n)\n    # space: O(m + n)\n    \n    # 18\n    # time: O(m + n)\n    # space: O(m + n)\n    \n    # 19\n    # time: O(m + n)\n    # space: O(m + n)\n    \n    # 20\n    # time: O(m + n)\n    # space: O(m + n)\n    \n    # 21\n    # time: O(m + n)\n    # space: O(m + n)\n    \n    # 22\n    # time: O(m + n)\n    # space: O(m + n)\n    \n    # 23\n    # time: O(m + n)\n    # space: O(m + n)\n    \n    # 24\n    # time: O(m + n)\n    # space: O(m + n)\n    \n    # 25\n    # time: O(m + n)\n    # space: O(m + n)\n    \n    # 26\n    # time: O(m + n)\n    # space: O(m + n)\n    \n    # 27\n    # time: O(m + n)\n    # space: O(m + n)\n    \n    # 28\n    # time: O(m + n)\n    # space: O(m + n)\n    \n    # 29\n    # time: O(m + n)\n    # space: O(m + n)\n    \n    # 30\n    # time: O(m + n)\n    # space: O(m + n)\n    \n    # 31\n    # time: O(m + n)\n    # space: O(m + n)\n    \n    # 32\n    # time: O(m + n)\n    # space: O(m + n)\n    \n    # 33\n    # time: O(m + n)\n    # space: O(m + n)\n    \n    # 34\n    # time: O(m + n)\n    # space: O(m + n)\n    \n    # 35\n    # time: O(m + n)\n    # space: O(m + n)\n    \n    # 36\n    # time: O(m + n)\n    # space: O(m + n)\n    \n    # 37\n    # time: O(m + n)\n    # space: O(m + n)\n    \n    # 38\n    # time: O(m + n)\n    # space: O(m + n)\n    \n    # 39\n    # time: O(m + n)\n    # space: O(m + n)\n    \n    # 40\n    # time: O(m + n)\n    # space: O(m + n)\n    \n    # 41\n    # time: O(m + n)\n    # space: O(m + n)\n    \n    # 42\n    # time: O(m + n)\n    # space: O(m + n)\n    \n    # 43\n    # time: O(m + n)\n    # space: O(m + n)\n    \n    # 44\n    # time: O(m + n)\n    # space: O(m + n)\n    \n    # 45\n    # time: O(m + n)\n    # space: O(m + n)\n    \n    # 46\n    # time: O(m + n)\n    # space: O(m + n)\n    \n    # 47\n    # time: O(m + n)\n    # space: O(m + n)\n    \n    # 48\n    # time: O(m + n)\n    # space: O(m + n)\n    \n    # 49\n    # time: O(m + n)\n    # space: O(m + n)\n    \n    # 50\n    # time: O(m + n)\n    # space: O(m + n)\n    \n    # 51\n    # time: O(m + n)\n    # space: O(m + n)\n    \n    # 52\n    # time: O(m + n)\n    # space: O(m + n)\n    \n    # 53\n    # time: O(m + n)\n    # space: O(m + n)\n    \n    # 54\n    # time: O(m + n)\n    # space: O(m + n)\n    \n    # 55\n    # time: O(m + n)\n    # space: O(m + n)\n    \n    "
    },
    {
        "number": 4188,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    if M == 0: return str(N)\n    # print(N, M)\n    if N == 0: return '0'\n    if M > 10: return '0'\n    answer = 0\n    for i in range(N):\n        answer = max(answer, i + answer + 1)\n    # print(answer)\n    if answer == M: return str(answer)\n    else: return '0'\n"
    },
    {
        "number": 4189,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n"
    },
    {
        "number": 4189,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    cheeses = []\n    for i in range(1, 10):\n        cheeses.append((i, \"soft\"))\n        cheeses.append((i, \"hard\"))\n\n    board = []\n    for i in range(n):\n        board.append(list(stdin.strip()))\n\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == \"b\":\n                board[i][j] = \"soft\"\n            elif board[i][j] == \"c\":\n                board[i][j] = \"hard\"\n            else:\n                board[i][j] = \"hard\"\n\n    print(cheeses)\n    print(board)\n\n    if n % 2!= 0:\n        board.append([\"feta\", \"hard\"])\n        board.append([\"feta\", \"hard\"])\n        board.append([\"feta\", \"hard\"])\n    else:\n        board.append([\"feta\", \"hard\"])\n        board.append([\"feta\", \"hard\"])\n        board.append([\"feta\", \"hard\"])\n        board.append([\"feta\", \"hard\"])\n\n    result = \"\"\n    for cheese in cheeses:\n        if board[cheese[0]][cheese[1]] == \"hard\":\n            result += \"goat\"\n        else:\n            result += \"brie\"\n\n    return result"
    },
    {
        "number": 4189,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    # [ ] Shortcuts for the type of cheese\n    # [ ] Shortcuts for the type of cheese\n    # [ ] Shortcuts for the type of cheese\n    # [ ] Shortcuts for the type of cheese\n\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types of cheese\n\n    # [ ] Check that there are no repeated types of cheese, then check that there are no repeated types"
    },
    {
        "number": 4189,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    result = 0\n    for i in range(len(stdin)):\n        if stdin[i][0].isdigit():\n            result += int(stdin[i][0])\n        else:\n            result += 5\n    return str(result)\n\nOutput\n4\n"
    },
    {
        "number": 4189,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    cheeses = list(map(str, stdin.split(\" \")))\n    # print(cheeses)\n    board = [[0 for _ in range(len(cheeses))] for _ in range(len(cheeses))]\n    for i in range(len(cheeses)):\n        board[i][i] = 1\n    # print(board)\n    # print(\"\\n\")\n    # print(board[0])\n\n    def dfs(cheese: str, chess_type: str) -> None:\n        if len(cheese) == 0:\n            if chess_type == \"soft\":\n                board[0][0] += 1\n            elif chess_type == \"hard\":\n                board[0][1] += 1\n        else:\n            cheeses.remove(cheese)\n            # print(cheeses)\n            for i in range(len(cheeses)):\n                if board[i][i] == 0 and board[i][0] == 0:\n                    board[i][0] = 1\n                    dfs(cheese, \"soft\")\n                    board[i][0] = 0\n                if board[i][i] == 0 and board[i][1] == 0:\n                    board[i][1] = 1\n                    dfs(cheese, \"hard\")\n                    board[i][1] = 0\n            cheeses.remove(cheese)\n            # print(cheeses)\n\n    for i in range(len(cheeses)):\n        dfs(cheese=cheeses[i], chess_type=\"hard\")\n        print(board)\n        if len(cheeses) == 0:\n            return \"No More\"\n        else:\n            return str(board[0][0])\n\n    return \"No More\"\n\n\nfor _ in range(int(input())):\n    print(solution(input()))\n"
    },
    {
        "number": 4189,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    cheeses = []\n    for _ in range(n):\n        cheeses.append(stdin.strip())\n    # print(cheeses)\n    \n    ans = 0\n    for cheese in cheeses:\n        # print(cheese)\n        tmp = []\n        for i in range(len(cheese)):\n            if cheese[i] == \" \":\n                tmp.append(\"\")\n            else:\n                tmp.append(cheese[i])\n        # print(tmp)\n        # print(tmp.split())\n        # print(tmp.split(\",\"))\n        # print(tmp)\n        if len(tmp) == len(tmp.split(\",\")):\n            tmp.pop()\n        # print(tmp.split(\",\"))\n        # print(tmp)\n        ans += len(tmp)\n    # print(ans)\n    return str(ans)\n\n\n        # print(tmp)\n        # print(tmp.split())\n        # print(tmp.split(\",\"))\n        # print(tmp)\n        # print(tmp.split())\n        # print(tmp.split(\",\"))\n    # print(tmp.split())\n    # print(tmp.split(\",\"))\n    # print(tmp)\n    # print(tmp.split())\n    # print(tmp)\n    # print(tmp.split(\",\"))\n    # print(tmp)\n    # print(tmp.split())\n    # print(tmp.split(\",\"))\n    # print(tmp.split())\n    # print(tmp)\n    # print(tmp.split(\",\"))\n    # print(tmp)\n    # print(tmp.split())\n    # print(tmp.split(\",\"))\n    # print(tmp.split(\",\"))\n    # print(tmp)\n    # print(tmp.split())\n    # print(tmp)\n    # print(tmp.split(\",\"))\n    # print(tmp)\n    # print(tmp.split())\n    # print(tmp)\n    # print(tmp.split(\",\"))\n    # print(tmp.split(\",\"))\n    # print(tmp)\n    # print(tmp.split())\n    # print(tmp)\n    # print(tmp.split(\",\"))\n    # print(tmp)\n    # print(tmp.split(\",\"))\n    # print(tmp)\n    # print(tmp.split())\n    # print(tmp)\n    # print(tmp.split(\",\"))\n    # print(tmp)\n    # print(tmp.split())\n    # print(tmp)\n    # print(tmp.split(\",\"))\n    # print(tmp)\n    # print(tmp.split())\n    # print(tmp)\n    # print(tmp.split(\",\"))\n    # print(tmp)\n    # print(tmp.split())\n    # print(tmp)\n    # print(tmp.split(\",\"))\n    # print(tmp)\n    # print(tmp.split())\n    # print(tmp)\n    # print(tmp.split(\",\"))\n    # print(tmp)\n    # print(tmp.split())\n    # print(tmp)\n    # print(tmp.split(\",\"))\n    # print(tmp)\n    # print(tmp.split())\n    # print(tmp)\n    # print(tmp.split(\",\"))\n    # print(tmp)\n    # print(tmp.split(\",\"))\n    # print(tmp)\n    # print(tmp.split())\n    # print(tmp)\n    # print(tmp.split(\",\"))\n    # print(tmp)\n    # print(tmp.split(\",\"))\n    # print(tmp)\n    # print(tmp.split())\n    # print(tmp)\n    # print(tmp.split(\",\"))\n    # print(tmp)\n    # print(tmp.split(\",\"))\n    # print(tmp)\n    # print(tmp.split())\n    # print(tmp)\n    # print(tmp.split(\",\"))\n    # print(tmp)\n    # print(tmp.split(\",\"))\n    # print(tmp)\n    # print(tmp.split())\n    # print(tmp)\n    # print(tmp.split(\",\"))\n    # print(tmp)\n    # print(tmp.split(\",\"))\n    # print(tmp)\n    # print(tmp.split(\",\"))\n    # print(tmp)\n    # print(tmp.split(\",\"))\n    # print(tmp)\n    # print(tmp.split(\",\"))\n    # print(tmp)\n    # print(tmp.split(\",\"))\n    # print(tmp)\n    # print(tmp.split(\",\"))\n    # print(tmp)\n    # print(tmp.split(\",\"))\n    # print(tmp)\n    # print(tmp.split(\",\"))\n    # print(tmp)\n    # print(tmp.split(\",\"))\n    # print(tmp)\n    # print(tmp.split(\",\"))\n    # print(tmp)\n    # print(tmp.split(\",\"))\n    # print(tmp)\n    # print(tmp.split(\",\"))\n    # print(tmp)\n    # print(tmp.split(\",\"))\n    # print(tmp)\n    # print(tmp.split(\",\"))\n    # print(tmp)\n    # print(tmp.split(\",\"))\n    # print(tmp)\n    # print(tmp.split(\",\"))\n    # print(tmp)\n    # print(tmp)\n    # print(tmp.split(\",\"))\n    # print(tmp)\n    # print(tmp)\n    # print(tmp.split(\",\"))\n    # print(tmp)\n    # print(tmp.split(\",\"))\n    # print(tmp)\n    # print(tmp.split(\",\"))\n    # print(tmp)\n    # print(tmp.split(\",\"))\n    # print(tmp)\n    # print(tmp.split(\",\"))\n    # print(tmp)\n    # print(tmp.split(\",\"))\n    # print(tmp)\n    # print(tmp.split(\",\"))\n    # print(tmp)\n    # print(tmp.split(\",\"))\n    # print(tmp)\n    # print(tmp.split(\",\"))\n    # print(tmp)\n    # print(tmp.split(\",\"))\n    # print(tmp)\n    # print(tmp.split(\",\"))\n    # print(tmp)\n    # print(tmp.split(\",\"))\n    # print(tmp)\n    # print(tmp.split(\",\"))\n    # print(tmp)\n    # print(tmp.split(\",\"))\n    # print(tmp)\n    # print(tmp.split(\",\"))\n    # print(tmp)\n    # print(tmp.split(\",\"))\n    # print(tmp)\n    # print(tmp.split(\",\"))\n    # print(tmp)\n    # print(tmp.split(\",\"))\n    # print(tmp)\n    # print(tmp.split(\",\"))\n    # print(tmp)\n    # print(tmp.split(\",\"))\n    # print(tmp)\n    # print(tmp.split(\",\"))\n    # print(tmp)\n    # print(tmp.split(\",\"))\n    # print(tmp)\n    # print(tmp.split(\",\"))\n    # print(tmp)\n    # print(tmp.split(\",\"))\n    # print(tmp)\n    # print(tmp.split(\",\"))\n    # print(tmp)\n    # print(tmp.split(\",\"))\n    # print(tmp)\n    # print(tmp.split(\",\"))\n    # print(tmp)\n    # print(tmp.split(\",\"))\n    "
    },
    {
        "number": 4189,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip().split('\\n')\n    cheese = dict()\n    def dfs(start, c):\n        nonlocal cheese, num\n        if start in cheese:\n            num = 1\n            cheese[start].append(c)\n        else:\n            cheese[start] = [c]\n        for i in range(num, 1 + (num // 2)):\n            if i < 9 and i in cheese:\n                cheese[i].append(c)\n            elif i in cheese:\n                del cheese[i]\n            else:\n                dfs(i, c + 'a')\n                dfs(i, c + 'b')\n                dfs(i, c + 'c')\n    for i in range(len(stdin)):\n        num = int(stdin[i][1:-1])\n        dfs(num, '')\n        num = num + 1\n        \n    for i in range(num):\n        cheese[i] = ''.join(sorted(list(set(cheese[i]))))\n    cheese = sorted(list(cheese.values()))\n    return ''.join(cheese[-1])\n"
    },
    {
        "number": 4189,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(stdin))\n"
    },
    {
        "number": 4189,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    stdin = stdin.split(\" \")\n    cheese = []\n    for line in stdin:\n        cheese.append(line.split(\" \")[0])\n    return str(len(set(cheese))) + \" \" + cheese[0] + \" \" + cheese[1]\n"
    },
    {
        "number": 4189,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    answer = 0\n    stdin = stdin.strip()\n    cheeses = []\n    for i in stdin:\n        if i not in cheeses:\n            cheeses.append(i)\n        else:\n            answer = max(answer, len(cheeses))\n            cheeses.pop()\n    return str(answer)\n\nprint(solution(input()))"
    },
    {
        "number": 4190,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    c = []\n    for i in range(n):\n        a.sort()\n        b.sort()\n        c.append(int(a[n - 1] + b[n - 1]))\n    print(*c)\n    return str(min(c))\n\n-----Advanced-----\n\n1\na = [1, 2, 3]\nb = [5, 6, 5]\nc = [1, 3, 2]\n\nprint(solution(\"0 0 0 2 1 0 1 0 2\"))\n"
    },
    {
        "number": 4190,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    m = len(a)\n    c = []\n    for i in range(m):\n        for j in range(i + 1, m):\n            c.append(a[i] + b[j])\n    c = sorted(c)\n    print(c)\n\n    return''.join(map(str, c))\n\n\n---Submit Corrections--\ndef"
    },
    {
        "number": 4190,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n,*a,b = map(int,stdin.split())\n    a.sort()\n    b.sort()\n    for i in range(len(a)-1,-1,-1):\n        if a[i]+b[i]<n:\n            a[i]=n-b[i]-a[i]\n            b[i]=0\n    return ''.join(str(i) for i in a)\n\ndef"
    },
    {
        "number": 4190,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a, b = map(int, stdin.split())\n    c = []\n    for i in range(n):\n        c.append(a + b % n)\n    c.sort()\n    print(c[-1])\n    return''.join(map(str, c))"
    },
    {
        "number": 4190,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    c = []\n    for i in range(n):\n        c.append(a + (b % (n - i) * i))\n    c.sort()\n    return''.join(map(str, c))\n\"\"\"\nclass Solution:\n    def reorderArray(self, nums):\n        def recurse(lo, hi):\n            if lo > hi:\n                return\n            mid = lo + (hi - lo) // 2\n            recurse(lo, mid)\n            recurse(mid + 1, hi)\n            recurse(lo, hi)\n        recurse(0, len(nums) - 1)\n        return''.join(map(str, nums))\n\nsolution(5)"
    },
    {
        "number": 4190,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, *a, b = map(int, stdin.split())\n    \n    def mod_inv(x: int) -> int:\n        return pow(x, n - 1, n)\n    \n    mod_a = mod_inv(a)\n    mod_b = mod_inv(b)\n    \n    def check(x: int) -> bool:\n        return mod_a*x + mod_b == 1\n    \n    for i in range(n):\n        a[i] = int(a[i])\n        b[i] = int(b[i])\n        if check(a[i] + b[i]):\n            a[i] = a[i] * mod_a\n            b[i] = b[i] * mod_b\n    \n    return str(a[0]) + str(b[0])\n"
    },
    {
        "number": 4190,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    def factorial(n):\n        if n == 1:\n            return 1\n        return n * factorial(n-1)\n    def gcd(x, y):\n        while x and y:\n            x, y = y, x % y\n        return y\n    def ceil_div(x, y):\n        return ((x+y)//y) if (x+y) % y == 0 else x//y\n    def nCr(x, y):\n        if x < y:\n            return 0\n        else:\n            return factorial(y) // (factorial(x) * factorial(y - x))\n    a = a*n + a\n    b = b*n + b\n    c = [0]*n\n    for i in range(a):\n        c[i] = [0]*n\n    for i in range(b):\n        c[i+a] = [i+a]*n\n    for i in range(n):\n        for j in range(n):\n            c[j][i] = nCr(i, j)\n    c[0][0] = 1\n    c[0][1] = 0\n    c[0][2] = 0\n    c[0][3] = 0\n    for i in range(1, n):\n        for j in range(n):\n            c[i][j] = ceil_div(c[i-1][j], c[i-1][j-1])\n    c = [0] + c\n    c = [0] + c\n    for i in range(1, n):\n        for j in range(n):\n            c[i][j] = c[i-1][j]\n    return ''.join(map(str, c[n-1]))\n\ndef"
    },
    {
        "number": 4190,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    return sorted(a + b)[n//2]\n\n'''\ndef"
    },
    {
        "number": 4190,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip().split()[0])\n    a, b = map(int, stdin.strip().split())\n    c = a * (n + 1) + b\n    ans = []\n    \n    def func(x, y):\n        return (x + y) % c\n        \n    def get_smaller_array(x):\n        smaller_array = []\n        for a in range(n):\n            if func(a, x) < func(x, y):\n                smaller_array.append(a)\n        return smaller_array\n    \n    def get_greater_array(x):\n        greater_array = []\n        for a in range(n):\n            if func(a, x) > func(x, y):\n                greater_array.append(a)\n        return greater_array\n    \n    for x in range(n, 0, -1):\n        ans.append(get_smaller_array(x))\n    for x in range(n, 0, -1):\n        ans.append(get_greater_array(x))\n    return '\\n'.join(str(a) for a in ans)\n\n\"\"\"\n\nimport math\n\ndef"
    },
    {
        "number": 4190,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int,stdin.split()))\n    b = list(map(int,stdin.split()))\n    a.sort()\n    b.sort()\n    p = a + b\n    return str(p.index(min(p)))\n"
    },
    {
        "number": 4191,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    length = len(stdin)\n    \n    if length < 3:\n        return \"0\"\n    \n    mapping = {\n        '0': '0',\n        '1': '1'\n    }\n    \n    return mapping.get(stdin[0], '0')\n\n\n-----Example-----\n\nExplanation\nInput:\n\n0\n0\n\nOutput:\n\n0\n0\n\n\n-----Example-----\n\nExplanation\nInput:\n\n0\n0\n\nOutput:\n\n0\n0\n\nExplanation:\n\n0    0\n1    1\n2    0\n0    0\n\n\n-----Example-----\n\nExplanation\nInput:\n\n0\n0\n0\n\nOutput:\n\n0\n0\n\nExplanation:\n\n0    0\n0    0\n0    0\n\"\"\"\n\ndef"
    },
    {
        "number": 4191,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    arr = list(map(int, input().split()))\n    x = 0\n    y = 0\n    answer = 0\n    for i in range(n):\n        if arr[i] == 1:\n            y = y + 1\n        else:\n            x = x + 1\n    if x > y:\n        x = y\n        y = x\n    if y == n:\n        answer = 1\n    if x == n:\n        answer = 0\n    return str(answer)\n\n\n\n[3, 4]\nsolution(solution)\n\n-----Bonus-----\n\ndef"
    },
    {
        "number": 4191,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.strip().split()))\n    b = []\n    for i in range(len(a)):\n        b.append(1 if a[i] == 1 else 0)\n    return str(b).strip()\n\n\n-----Input-----\n\nThe input consists of four lines, each line containing a single digit 0 or 1.\n\n\n-----Output-----\n\nOutput a single digit, 0 or 1.\n\n\n-----Example-----\nInput\n0\n1\n1\n0\n\nOutput\n0\n\n-----Input Format-----\n\nThe first line contains a single integer, \u201cT\u201d, the number of test cases. Then the test cases follow, where each test case consists of two lines. Each line contains a single integer, \u201cP\u201d, the number of test cases.\n\n\n-----Output-----\n\nFor each test case, output a single line containing one integer \u2015 the result of the test case.\n\n\n-----Example-----\nInput\n5\n2\n1 1 1 1\n\nOutput\n1\n\n-----Input Format-----\n\nThe first line contains a single integer, \u201cT\u201d, the number of test cases. Then the test cases follow, where each test case consists of two lines. Each line contains a single integer, \u201cP\u201d, the number of test cases.\n\n\n-----Output-----\n\nFor each test case, output a single line containing one integer \u2015 the result of the test case.\n\n\n-----Example-----\nInput\n1\n1\n0 0 1 0\n\nOutput\n0\n\n-----Input Format-----\n\nThe first line contains a single integer, \u201cT\u201d, the number of test cases. Then the test cases follow, where each test case consists of two lines. Each line contains a single integer, \u201cP\u201d, the number of test cases.\n\n\n-----Output-----\n\nFor each test case, output a single line containing one integer \u2015 the result of the test case.\n\n\n-----Example-----\nInput\n1\n1\n0 1 0 1\n\nOutput\n0\n\n-----Input Format-----\n\nThe first line contains a single integer, \u201cT\u201d, the number of test cases. Then the test cases follow, where each test case consists of two lines. Each line contains a single integer, \u201cP\u201d, the number of test cases.\n\n\n-----Output-----\n\nFor each test case, output a single line containing one integer \u2015 the result of the test case.\n\n\n-----Example-----\nInput\n1\n2\n1 1 1 1\n\nOutput\n1\n\n\n-----Input Format-----\n\nThe first line contains a single integer, \u201cT\u201d, the number of test cases. Then the test cases follow, where each test case consists of two lines. Each line contains a single integer, \u201cP\u201d, the number of test cases.\n\n\n-----Output-----\n\nFor each test case, output a single line containing one integer \u2015 the result of the test case.\n\n\n-----Example-----\nInput\n1\n1\n0 0 0 0\n\nOutput\n0\n\n-----Input Format-----\n\nThe first line contains a single integer, \u201cT\u201d, the number of test cases. Then the test cases follow, where each test case consists of two lines. Each line contains a single integer, \u201cP\u201d, the number of test cases.\n\n\n-----Output-----\n\nFor each test case, output a single line containing one integer \u2015 the result of the test case.\n\n\n-----Example-----\nInput\n1\n1\n0 0 0 0\n\nOutput\n0\n\n-----Input Format-----\n\nThe first line contains a single integer, \u201cT\u201d, the number of test cases. Then the test cases follow, where each test case consists of two lines. Each line contains a single integer, \u201cP\u201d, the number of test cases.\n\n\n-----Output-----\n\nFor each test case, output a single line containing one integer \u2015 the result of the test case.\n\n\n-----Example-----\nInput\n1\n1\n0 0 0 0\n\nOutput\n0\n\n\n-----Input Format-----\n\nThe first line contains a single integer, \u201cT\u201d, the number of test cases. Then the test cases follow, where each test case consists of two lines. Each line contains a single integer, \u201cP\u201d, the number of test cases.\n\n\n-----Output-----\n\nFor each test case, output a single line containing one integer \u2015 the result of the test case.\n\n\n-----Example-----\nInput\n1\n2\n1 1 1 1\n\nOutput\n0\n\n-----Input Format-----\n\nThe first line contains a single integer, \u201cT\u201d, the number of test cases. Then the test cases follow, where each test case consists of two lines. Each line contains a single integer, \u201cP\u201d, the number of test cases.\n\n\n-----Output-----\n\nFor each test case, output a single line containing one integer \u2015 the result of the test case.\n\n\n-----Example-----\nInput\n1\n2\n1 1 1 1\n\nOutput\n0\n\n-----Input Format-----\n\nThe first line contains a single integer, \u201cT\u201d, the number of test cases. Then the test cases follow, where each test case consists of two lines. Each line contains a single integer, \u201cP\u201d, the number of test cases.\n\n\n-----Output-----\n\nFor each test case, output a single line containing one integer \u2015 the result of the test case.\n\n\n-----Example-----\nInput\n1\n1\n0 0 0 0\n\nOutput\n0\n\n-----Input Format-----\n\nThe first line contains a single integer, \u201cT\u201d, the number of test cases. Then the test cases follow, where each test case consists of two lines. Each line contains a single integer, \u201cP\u201d, the number of test cases.\n\n\n-----Output-----\n\nFor each test case, output a single line containing one integer \u2015 the result of the test case.\n\n\n-----Example-----\nInput\n1\n1\n0 0 0 0\n\nOutput\n0\n\n-----Input Format-----\n\nThe first line contains a single integer, \u201cT\u201d, the number of test cases. Then the test cases follow, where each test case consists of two lines. Each line contains a single integer, \u201cP\u201d, the number of test cases.\n\n\n-----Output-----\n\nFor each test case, output a single line containing one integer \u2015 the result of the test case.\n\n\n-----Example-----\nInput\n1\n1\n0 0 0 0\n\nOutput\n0\n\n-----Input Format-----\n\nThe first line contains a single integer, \u201cT\u201d, the number of test cases. Then the test cases follow, where each test case consists of two lines. Each line contains a single integer, \u201cP\u201d, the number of test cases.\n\n\n-----Output-----\n\nFor each test case, output a single line containing one integer \u2015 the result of the test case.\n\n\n-----Example-----\nInput\n1\n1\n0 0 0 0\n\nOutput\n0\n\n-----Input Format-----\n\nThe first line contains a single integer, \u201cT\u201d, the number of test cases. Then the test cases follow, where each test case consists of two lines. Each line contains a single integer, \u201cP\u201d, the number of test cases.\n\n\n-----Output-----\n\nFor each test case, output a single line containing one integer \u2015 the result of the test case.\n\n\n-----Example-----\nInput\n1\n1\n0 0 0 0\n\nOutput\n0\n\n-----Input Format-----\n\nThe first line contains a single integer, \u201cT\u201d, the number of test cases. Then the test cases follow, where each test case consists of two lines. Each line contains a single integer, \u201cP\u201d, the number of test cases.\n\n\n-----Output-----\n\nFor each test case, output a single line containing one integer \u2015 the result of the test case.\n\n\n-----Example-----\nInput\n1\n1\n0 0 0 0\n\nOutput\n0\n\n-----Input Format-----\n\nThe first line contains a single integer, \u201cT\u201d, the number of test cases. Then the test cases follow, where each test case consists of two lines. Each line contains a single integer, \u201cP\u201d, the number of test cases.\n\n\n-----Output-----\n\nFor each test case, output a single line containing one integer \u2015 the result of the test case.\n\n\n-----Example-----\nInput\n1\n1\n0 0 0 0\n\nOutput\n0\n\n-----Input Format-----\n\nThe first line contains a single integer, \u201cT\u201d, the number of test cases. Then the test cases follow, where each test case consists of two lines. Each line contains a single integer, \u201cP\u201d, the number of test cases.\n\n\n-----Output-----\n\nFor each test case, output a single line containing one integer \u2015 the result of the test case.\n"
    },
    {
        "number": 4191,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    digit = []\n    zero = []\n    zero_index = []\n    zero_flag = True\n    for line in stdin:\n        #print(line)\n        if line == '1':\n            zero_flag = False\n            zero_index.clear()\n            zero_index.append(0)\n        else:\n            if zero_flag:\n                zero_flag = False\n                zero_index.clear()\n                zero_index.append(0)\n            else:\n                if line == '0':\n                    zero_flag = True\n                    zero_index.clear()\n                    zero_index.append(0)\n                else:\n                    zero_index.append(int(line))\n                    zero_flag = True\n\n    for i in range(len(zero_index)):\n        if zero_index[i]!= 0:\n            zero.append(zero_index[i])\n    zero = sorted(zero)\n    zero.reverse()\n    answer = ''.join(str(i) for i in zero)\n    return answer\n-----Input-----\n\nThe input consists of four lines, each line containing a single digit 0 or 1.\n\n\n-----Output-----\n\nOutput a single digit, 0 or 1.\n\n\n-----Example-----\nInput\n0\n1\n1\n0\n\nOutput\n0\ndef"
    },
    {
        "number": 4191,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    print(str(n%9))\n    if n%9 == 0:\n        return \"0\"\n    else:\n        return \"1\"\n\n---TEST CASES---\n"
    },
    {
        "number": 4191,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    num = list(stdin)\n    num[0] = num[0].strip('\\n')\n    num[1] = num[1].strip('\\n')\n    num[2] = num[2].strip('\\n')\n    num[3] = num[3].strip('\\n')\n    \n    if len(num)==4:\n        for i in range(len(num)-4):\n            if num[i]=='0':\n                num[i+1]='1'\n            else:\n                num[i+1]='0'\n    return ''.join(num)\n    \n    \n"
    },
    {
        "number": 4191,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x = list(map(int, stdin.split()))\n    x.sort()\n    result = \"\"\n    for i in range(len(x)):\n        result += str(x[i])\n    return result\n\n-----Constraints-----\n1 <= n <= 1000\n\n-----Time Limit (O(n))-----\nThe time limit for this problem is n * log(n) (n is even).\n\n\n-----Example 1 -----\nInput\n0\n1\n1\n0\n\nOutput\n0\ndef"
    },
    {
        "number": 4191,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n-----Solution-----\n"
    },
    {
        "number": 4191,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    digits = []\n    for line in stdin:\n        digits.append(int(line))\n    \n    return str(sum(digits))\n\n-----Done-----\n"
    },
    {
        "number": 4191,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    number = list(map(int, stdin.split()))\n    answer = []\n    for i in range(len(number)):\n        if number[i] == 0:\n            answer.append('0')\n        elif number[i] == 1:\n            answer.append('1')\n    print(''.join(answer))\n    return ''.join(answer)\n\n-----Constraints-----\n\n0\n0\n0\n\n-----Time Limit: 1 minute\n\n-----Divide & Conquer\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4192,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    D, T, S = map(int, stdin.split())\n    if D + T + S > 10000:\n        return \"No\"\n    if D == 0:\n        return \"Yes\"\n    if D == 1:\n        if T == 0:\n            return \"Yes\"\n        return \"No\"\n    if T == 0:\n        if S == 0:\n            return \"Yes\"\n        return \"No\"\n    if T == 1:\n        if S == 0:\n            return \"Yes\"\n        return \"No\"\n    if T == 1 and S == 1:\n        return \"Yes\"\n    return \"No\"\n\"\"\"\n"
    },
    {
        "number": 4192,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    for i in range(n):\n        D, T, S = map(int, stdin.strip().split())\n        if (S <= D):\n            print('No')\n        elif (D - T <= S):\n            print('Yes')\n        else:\n            print('No')\n"
    },
    {
        "number": 4192,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    D, T, S = map(int, stdin.split())\n    return 'Yes' if T >= S else 'No'\n"
    },
    {
        "number": 4192,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # number of T/S in each column\n    t = [int(i) for i in stdin.split()]\n    # number of T/S in each row\n    s = [int(i) for i in stdin.split()]\n    # the fastest speed is less than the slowest speed\n    speed = []\n    for i in range(len(s)-1):\n        speed.append(s[i+1]-s[i])\n    #sorting speed according to speed in each column\n    speed.sort(reverse=True)\n    # the fastest speed is less than the slowest speed\n    speed.sort()\n    # the slowest speed is less than the fastest speed\n    speed.reverse()\n    # getting the speeds\n    fastestSpeed = speed[0]\n    slowestSpeed = speed[len(speed)-1]\n    # checking if any speed is out of range\n    if (slowestSpeed > 5000):\n        slowestSpeed = 5000\n    if (fastestSpeed > 5000):\n        fastestSpeed = 5000\n    # checking if fast speed is larger than slow speed\n    if (slowestSpeed < fastestSpeed):\n        slowestSpeed = fastestSpeed\n        fastestSpeed = slowestSpeed\n    # returning answer\n    return 'Yes' if fastestSpeed < slowestSpeed else 'No'\n"
    },
    {
        "number": 4192,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, T, S = map(int, stdin.split())\n    answer = \"Yes\"\n    if N > T:\n        answer = \"No\"\n    elif N < T:\n        answer = \"Yes\"\n    else:\n        if N == T and S == S:\n            answer = \"Yes\"\n        else:\n            time = T / N\n            direction = 1\n            while time > 0:\n                time -= 1\n                if direction == 1:\n                    N -= 1\n                else:\n                    N += 1\n            answer = \"No\"\n    return answer\n\nTest Cases:\nTest Case 1:\nInput :\nD T S\n1 3\n1 10\n2 2\n\nOutput :\nYes\n\nTest Case 2:\nInput :\nD T S\n5 10\n1 2\n2 3\n3 4\n4 1\n\nOutput :\nNo\n"
    },
    {
        "number": 4192,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, s, d, T, D = map(int, stdin.split())\n    for i in range(T):\n        if not (n - s > 0 or d < T):\n            print('No')\n            return\n        if not (n - s <= T - d):\n            print('No')\n            return\n        if n - s == T - d:\n            print('Yes')\n            return\n        n -= s\n        d -= 1\n    print('No')"
    },
    {
        "number": 4192,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes'\n\"\"\"\n\n\nclass Solution:\n    def isMeet(self, t: int, s: int, n: int, m: int) -> str:\n        if n == m:\n            if s <= t:\n                return 'Yes'\n            else:\n                return 'No'\n        else:\n            return 'No'\n"
    },
    {
        "number": 4192,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    D, T, S = map(int, stdin.split())\n    avg = (T + S) / 2\n    d = int(D / avg)\n    for i in range(d):\n        print(\"Yes\" if avg * (i + 1) <= T else \"No\")\n\n-----Constraints-----\n - 1 \\leq D \\leq 10000\n - 1 \\leq T \\leq 10000\n - 1 \\leq S \\leq 10000\n - All values in input are integers.\n\n-----Time Limit: 1sec\n-----Memory Limit: 1MB"
    },
    {
        "number": 4192,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    D, T, S = map(int, stdin.split())\n    ans = ''\n    for i in range(D, T-1, -1):\n        if S <= i:\n            ans = 'No'\n            break\n        ans = 'Yes'\n        S -= i\n    return ans"
    },
    {
        "number": 4192,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    D, T, S = map(int, stdin.split(' '))\n    return 'Yes' if (D * T * S) % 100000 == 0 else 'No'\n"
    },
    {
        "number": 4193,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    m = len(a)\n    n = len(a[0])\n    c = [[0] * n for _ in range(m)]\n    ans = 0\n    for i in range(m):\n        for j in range(n):\n            if a[i][j] == a[i][j] == a[i][j] == a[i][j]:\n                c[i][j] = 1\n                ans += 1\n    for i in range(m):\n        for j in range(n):\n            if c[i][j] == 1:\n                for k in range(n):\n                    if k!= j:\n                        if c[i][k] == 1:\n                            if c[i + 1][k] == 1:\n                                if c[i + 2][k] == 1:\n                                    c[i][j] = 1\n                                    c[i + 1][j] = 1\n                                    c[i + 2][k] = 1\n                                    ans += 1\n                                    break\n    if ans == 0:\n        return \"No\"\n    return \"Yes\"\n\"\"\"\n\n\nclass Solution:\n    def bingo(self, nums: List[int]) -> bool:\n        num_dict = {}\n        for num in nums:\n            num_dict[num] = num_dict.get(num, 0) + 1\n\n        def check_bingo(num_dict, start_row, start_col):\n            if num_dict[start_row][start_col] == 3:\n                return False\n            for i in range(start_row, start_row + 3):\n                for j in range(start_col, start_col + 3):\n                    if num_dict[i][j] == 3:\n                        return False\n            return True\n\n        n = len(nums)\n        res = 0\n        for i in range(n):\n            for j in range(n):\n                if check_bingo(num_dict, i, j):\n                    res += 1\n        return res == n\n"
    },
    {
        "number": 4193,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    a = stdin[1:]\n    B = a.split(\" \")\n    A = []\n    for i in range(n):\n        A.append([int(x) for x in B[i].split(\" \")])\n    b = B[n - 1]\n    A.append([int(x) for x in b.split(\" \")])\n    return str(solution_iter(A))\n\n\ndef"
    },
    {
        "number": 4193,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    A = []\n    for i in range(1, n + 1):\n        A.append(int(stdin[i - 1]))\n    \n    A = [int(a) for a in A]\n    b = [int(b) for b in A]\n    \n    def check(b, m, n):\n        count = 0\n        for i in range(n - m):\n            for j in range(m - 1, n - m):\n                if b[i + j] == b[i]:\n                    count += 1\n                elif b[i] == b[i + j + 1]:\n                    count += 1\n                elif b[i] == b[i + j - 1]:\n                    count += 1\n        return count == 3\n    \n    if check(b, 3, n):\n        print('Yes')\n    else:\n        print('No')\n    "
    },
    {
        "number": 4193,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, N = [int(i) for i in stdin.split()]\n    b_i = int(stdin[N])\n    if N == 3:\n        return \"Yes\"\n    b_i = b_i * 3\n    i_1, i_2 = b_i, b_i + 1\n    i_3 = b_i + 2\n    if i_1 < N and i_2 < N and i_3 < N:\n        a = [int(i) for i in stdin.split()]\n        if a[i_1] < a[i_2] and a[i_2] < a[i_3]:\n            return \"Yes\"\n        if a[i_1] < a[i_2] and a[i_2] < a[i_3]:\n            return \"No\"\n    if N % 3 == 0:\n        return \"Yes\"\n    return \"No\"\n\n\n\nprint(solution(\n    input()))\n"
    },
    {
        "number": 4193,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    b_i = int(stdin.split()[1])\n    b_j = int(stdin.split()[2])\n    \n    answer = \"\"\n    for i in range(1, N + 1):\n        answer = answer + str(i)\n        for j in range(1, N + 1):\n            if (i - j) % b_i == b_i - 1 and (j - i) % b_j == b_j - 1:\n                answer = answer + \" \"\n    print(answer)\n\n-----Sample Output-----\nYes\n\"\"\"\n\nclass Solution:\n    def bingo(self, N, b_1, b_2, b_3, b_4):\n        def is_black(i):\n            if i == 0:\n                return False\n            if i == 1 or i == 2:\n                return True\n            return i % 3 == 1 and is_black(i - 1) and is_black(i - 2)\n\n        for i in range(N):\n            if is_black(i):\n                answer = True\n                break\n        print(answer)"
    },
    {
        "number": 4193,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin[0]\n    A = [int(i) for i in stdin[1:]]\n    b_N = [int(i) for i in stdin[1:]]\n    for i in range(N):\n        for j in range(i):\n            if i == j:\n                continue\n            if A[i] == A[j] and A[i]!= A[j]:\n                A[i] = A[j]\n                b_N[i] = b_N[j]\n    for i in range(N):\n        if i == N - 1:\n            break\n        if A[i] == A[N - 1]:\n            if A[i]!= A[N - 1]:\n                A[N - 1] = A[i]\n                b_N[N - 1] = b_N[i]\n            else:\n                A[N - 1] = A[i]\n                b_N[N - 1] = b_N[i]\n    for i in range(N):\n        if i == N - 1:\n            break\n        if A[i]!= A[N - 1]:\n            A[N - 1] = A[i]\n            b_N[N - 1] = b_N[i]\n        else:\n            A[N - 1] = A[i]\n            b_N[N - 1] = b_N[i]\n    for i in range(N):\n        if i == N - 1:\n            break\n        if A[i]!= A[N - 1]:\n            A[N - 1] = A[i]\n            b_N[N - 1] = b_N[i]\n        else:\n            A[N - 1] = A[i]\n            b_N[N - 1] = b_N[i]\n    for i in range(N):\n        if i == N - 1:\n            break\n        if A[i] == A[N - 1]:\n            if A[i]!= A[N - 1]:\n                A[N - 1] = A[i]\n                b_N[N - 1] = b_N[i]\n            else:\n                A[N - 1] = A[i]\n                b_N[N - 1] = b_N[i]\n        else:\n            A[N - 1] = A[i]\n            b_N[N - 1] = b_N[i]\n    if A[0] == A[1] == A[2] == A[3]:\n        return \"Yes\"\n    else:\n        return \"No\"\n\n\nprint(solution(\"84 97 66\"))  # No\nprint(solution(\"79 89 11\"))  # Yes\n"
    },
    {
        "number": 4193,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # n = int(stdin.strip())\n    n = int(input())\n    \n    # A = [int(x) for x in input().strip().split()]\n    # A = [int(x) for x in input().strip().split()]\n    A = [int(x) for x in input().strip().split()]\n    \n    # A = [int(x) for x in input().strip().split()]\n    \n    # A = [[int(x) for x in input().strip().split()] for i in range(n)]\n    \n    def bing_b(A):\n        b = 0\n        for i in range(n):\n            if A[i][i] == 1:\n                b += 1\n            else:\n                b -= 1\n        return b\n    \n    def bing_n(A):\n        n = 0\n        for i in range(n):\n            if A[i][i] == 1:\n                n += 1\n            else:\n                n -= 1\n        return n\n        \n    def diag_b(n, A):\n        b = 0\n        for i in range(n):\n            b += A[i][i]\n            if A[i][i] == 1:\n                b += 1\n            else:\n                b -= 1\n        return b\n        \n    def diag_n(n, A):\n        n = 0\n        for i in range(n):\n            if A[i][i] == 1:\n                n += 1\n            else:\n                n -= 1\n        return n\n        \n    def diag_equal(A, A_eq):\n        for i in range(n):\n            if A[i][i] == A_eq[i][i]:\n                return False\n        return True\n        \n    def is_bingo(b_i, n, A):\n        b = 0\n        for i in range(n):\n            b += A[i][i]\n            if A[i][i] == 1:\n                b += 1\n            else:\n                b -= 1\n        if b_i == b:\n            return True\n        else:\n            return False\n        \n    def check_bingo(b_i, n, A):\n        if is_bingo(b_i, n, A):\n            return \"Yes\"\n        else:\n            return \"No\"\n        \n    def check_n_bingo(n, A):\n        if n == 3:\n            return \"Yes\"\n        else:\n            return \"No\"\n    \n    bingo_array = []\n    for i in range(n):\n        bingo_array.append(A[i][i])\n    \n    for i in range(n):\n        if bingo_array[i] == 1:\n            bingo_array[i] = 0\n        else:\n            bingo_array[i] = 1\n    bingo_array = [x for x in bingo_array if x!= 0]\n    \n    if len(bingo_array) == 3:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4193,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = [int(x) for x in stdin.split()]\n    b = [int(x) for x in stdin.split()]\n    b_grid = [a[0], a[1], a[2], a[3], a[4], a[5]]\n    b_grid.sort()\n    for i in range(7, n):\n        a = a[1:] + [a[0]]\n        b.append(int(stdin.split()[i]))\n        a.sort()\n        b.append(int(stdin.split()[i]))\n        a.sort()\n        b.append(int(stdin.split()[i]))\n        a.sort()\n        b.append(int(stdin.split()[i]))\n        a.sort()\n        b.append(int(stdin.split()[i]))\n        a.sort()\n        b.append(int(stdin.split()[i]))\n        a.sort()\n        b.append(int(stdin.split()[i]))\n        a.sort()\n        b.append(int(stdin.split()[i]))\n        a.sort()\n        b.append(int(stdin.split()[i]))\n        a.sort()\n        b.append(int(stdin.split()[i]))\n        b_grid.sort()\n        b_grid.append(a[0])\n        a.sort()\n        b.append(a[0])\n        a.sort()\n        b.append(a[0])\n        a.sort()\n        b.append(a[0])\n        b_grid.sort()\n        b_grid.append(a[0])\n        a.sort()\n        b.append(a[0])\n        a.sort()\n        b.append(a[0])\n        a.sort()\n        b.append(a[0])\n        b_grid.sort()\n        b_grid.append(a[0])\n    print(\"Yes\" if len(set(a_grid)) == 4 else \"No\")\n    print(*b_grid, sep=\" \")\n    return \"Yes\" if len(set(a_grid)) == 4 else \"No\"\n\n-----Sample Output-----\nYes\nNo\nNo\n\"\"\"\n\nimport math\nimport sys\n\ndef"
    },
    {
        "number": 4193,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    numbers = list(map(int, stdin.split()))\n    for i in range(len(numbers) - 1):\n        if numbers[i] == numbers[i + 1]:\n            if numbers[i] == numbers[i + 1]:\n                print(\"Yes\")\n            else:\n                print(\"No\")\n            return \"\"\n    print(\"Yes\")\n    return \"\"\n\ndef"
    },
    {
        "number": 4193,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    b_1 = int(stdin[1])\n    b_2 = int(stdin[2])\n    b_3 = int(stdin[3])\n    board = [0] * n\n    for i in range(n):\n        board[i] = list(map(int, stdin[i + 1].split()))\n    for i in range(n):\n        if board[i][0] == b_1:\n            for j in range(n):\n                board[j][i] = 1\n    for i in range(n):\n        if board[i][n - 1 - i] == b_2:\n            for j in range(n):\n                board[j][n - 1 - i] = 1\n    for i in range(n):\n        if board[i][i] == b_3:\n            for j in range(n):\n                board[i][j] = 1\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == 1:\n                board[i][j] = 0\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == 1:\n                board[i][j] = 0\n    for i in range(n):\n        if board[i][i] == 1:\n            board[i][i] = 0\n    for i in range(n):\n        if board[i][i] == 1:\n            board[i][i] = 0\n    for i in range(n):\n        if board[i][i] == 1:\n            board[i][i] = 0\n    for i in range(n):\n        if board[i][i] == 1:\n            board[i][i] = 0\n    for i in range(n):\n        if board[i][n - 1 - i] == b_3:\n            for j in range(n):\n                board[j][n - 1 - i] = 1\n    for i in range(n):\n        if board[i][i] == 1:\n            board[i][i] = 0\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == 1:\n                board[i][j] = 0\n    for i in range(n):\n        if board[i][i] == 1:\n            board[i][i] = 0\n    for i in range(n):\n        if board[i][i] == 1:\n            board[i][i] = 0\n    for i in range(n):\n        if board[i][i] == 1:\n            board[i][i] = 0\n    for i in range(n):\n        if board[n - 1 - i][i] == b_3:\n            for j in range(n):\n                board[n - 1 - i][j] = 1\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == 1:\n                board[i][j] = 0\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == 1:\n                board[i][j] = 0\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == 1:\n                board[i][j] = 0\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == 1:\n                board[i][j] = 0\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == 1:\n                board[i][j] = 0\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == 1:\n                board[i][j] = 0\n    for i in range(n):\n        for j in range(n):\n            if board[i][i] == 1:\n                board[i][i] = 0\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == 1:\n                board[i][j] = 0\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == 1:\n                board[i][j] = 0\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == 1:\n                board[i][j] = 0\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == 1:\n                board[i][j] = 0\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == 1:\n                board[i][j] = 0\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == 1:\n                board[i][j] = 0\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == 1:\n                board[i][j] = 0\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == 1:\n                board[i][j] = 0\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == 1:\n                board[i][j] = 0\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == 1:\n                board[i][j] = 0\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == 1:\n                board[i][j] = 0\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == 1:\n                board[i][j] = 0\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == 1:\n                board[i][j] = 0\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == 1:\n                board[i][j] = 0\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == 1:\n                board[i][j] = 0\n    for i in range(n):\n        for j in range(n):\n            if board[i"
    },
    {
        "number": 4194,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    day, m, A = map(int, stdin.split())\n    count = 0\n    for i in range(1, m+1):\n        if i <= A:\n            count += day\n        else:\n            count += max(day, i - A + 1)\n    return str(count)\n"
    },
    {
        "number": 4194,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    A.sort()\n    for i in range(1, len(A)):\n        A[i] = max(A[i-1], A[i]+M)\n    if N - A[-1] <= M:\n        return str(N-A[-1])\n    return '-1'\n\ndef"
    },
    {
        "number": 4194,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    A = [int(x) for x in stdin.split()]\n    s = [0 for _ in range(N+1)]\n    s[0] = 1\n    for i in range(1, N+1):\n        for j in range(1, M+1):\n            if j == A[i-1]:\n                s[i] += s[i-1]\n            else:\n                s[i] = 0\n                break\n    if s[-1] == 0:\n        return -1\n    return max(s)"
    },
    {
        "number": 4194,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    A_1, A_2, A_3, A_4, A_5 = map(int, stdin.split())\n    if N > M:\n        N, M = M, N\n    A_1, A_2, A_3, A_4, A_5 = (A_1+A_2+A_3+A_4+A_5)//5, (A_1+A_2+A_3+A_4+A_5)//2, A_1, A_2, A_3, A_4\n    days = (A_5-A_1-A_2-A_3-A_4)//(N-1)\n    answer = days + min(days+1, M)\n    if N <= M:\n        answer = -1\n    return str(answer)\n"
    },
    {
        "number": 4194,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    day = 1\n    if N == M == 1:\n        return str(day)\n    while N > 1:\n        if N >= M:\n            N -= M\n            day += 1\n            A.append(day)\n        elif M > 1:\n            M -= 1\n            day += 1\n            A.append(day)\n    if A[0] == 1:\n        A.pop(0)\n        A.append(1)\n    for i in range(len(A)-1):\n        A.insert(i+1, A[i]+A[i+1])\n    A.insert(len(A), 0)\n    return ''.join(map(str, A))\n\n1\n\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n214\n215\n216\n217\n218\n219\n220\n221\n222\n223\n224\n225\n226\n227\n228\n229\n230\n231\n232\n233\n234\n235\n236\n237\n238\n239\n240\n241\n242\n243\n244\n245\n246\n247\n248\n249\n250\n251\n252\n253\n254\n255\n256\n257\n258\n259\n260\n261\n262\n263\n264\n265\n266\n267\n268\n269\n270\n271\n272\n273\n274\n275\n276\n277\n278\n279\n280\n281\n282\n283\n284\n285\n286\n287\n288\n289\n290\n291\n292\n293\n294\n295\n296\n297\n298\n299\n300\n301\n302\n303\n304\n305\n306\n307\n308\n309\n310\n311\n312\n313\n314\n315\n316\n317\n318\n319\n320\n321\n322\n323\n324\n325\n326\n327\n328\n329\n330\n331\n332\n333\n334\n335\n336\n337\n338\n339\n340\n341\n342\n343\n344\n345\n346\n347\n348\n349\n350\n351\n352\n353\n354\n355\n356\n357\n358\n359\n360\n361\n362\n363\n364\n365\n366\n367\n368\n369\n370\n371\n372\n373\n374\n375\n376\n377\n378\n379\n380\n381\n382\n383\n384\n385\n386\n387\n388\n389\n390\n391\n392\n393\n394\n395\n396\n397\n398\n399\n400\n401\n402\n403\n404\n405\n406\n407\n408\n409\n410\n411\n412\n413\n414\n415\n416\n417\n418\n419\n420\n421\n422\n423\n424\n425\n426\n427\n428\n429\n430\n431\n432\n433\n434\n435\n436\n437\n438\n439\n440\n441\n442\n443\n444\n445\n446\n447\n448\n449\n450\n451\n452\n453\n454\n455\n456\n457\n458\n459\n460\n461\n462\n463\n464\n465\n466\n467\n468\n469\n470\n471\n472\n473\n474\n475\n476\n477\n478\n479\n480\n481\n482\n483\n484\n485\n486\n487\n488\n489\n490\n491\n492\n493\n494\n495\n496\n497\n498\n499\n500\n501\n502\n503\n504\n505\n506\n507\n508\n509\n510\n511\n512\n513\n514\n515\n516\n517\n518\n519\n520\n521\n522\n523\n524\n525\n526\n527\n528\n529\n530\n531\n532\n533\n534\n535\n536\n537\n538\n539\n540\n541\n542\n543\n544\n545\n546\n547\n548\n549\n550\n551\n552\n553\n554\n555\n556\n557\n558\n559\n560\n561\n562\n563\n564\n565\n566\n567\n568\n569\n570\n571\n572\n573\n574\n575\n576\n577\n578\n579\n580\n581\n582\n583\n584\n585\n586\n587\n588\n589\n590\n591\n592\n593\n594\n595\n596\n597\n598\n599\n600\n601\n602\n603\n604\n605\n606\n607\n608\n609\n610\n611\n612\n613\n614\n615\n616\n617\n618\n619\n620\n621\n622\n623\n624\n625\n626\n627\n628\n629\n630\n631\n632\n633\n634\n635\n636\n637\n638\n639\n640\n641\n642\n643\n644\n645\n646\n647\n648\n649\n650\n651\n652\n653\n654\n655\n656\n657\n658\n659\n660\n661\n662\n663\n664\n665\n666\n667\n668\n669\n670\n671\n672\n673\n674\n675\n676\n677\n678\n679\n680\n681\n682\n683\n684\n685\n686\n687\n688\n689\n690\n691\n692\n693\n694\n695\n696\n697\n698\n699\n700\n701\n702\n703\n704\n705\n706\n707\n708\n709\n710\n711\n712\n713\n714\n715\n716\n717\n718\n719\n720\n721\n722\n723\n724\n725\n726\n727\n728\n729\n730\n731\n732\n733\n734\n735\n736\n737\n738\n739\n740\n741\n742\n743\n744\n745\n746\n747\n748\n749\n750\n751\n752\n753\n754\n755"
    },
    {
        "number": 4194,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    assignments = list(map(int, stdin.split()))\n\n    # map(int, input())\n    \n    assignments.sort()\n    answer = 0\n    \n    for i in range(m):\n        if i == m-1:\n            answer = assignments[i] + 1\n            break\n        if assignments[i] + i <= m-1:\n            if assignments[i+1] == 0:\n                answer = assignments[i] + 1\n                break\n            elif assignments[i+1] + i > m-1:\n                answer = assignments[i] + 1 + assignments[i+1]\n                break\n            else:\n                answer = assignments[i] + 1 + assignments[i+1]\n                break\n\n    return str(answer)\n"
    },
    {
        "number": 4194,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    #A = sorted(A)\n    res = ''\n    i = 0\n    if len(A) > len(A[::-1]) or N < 1:\n        return -1\n    while A:\n        res += str(A.pop(0))\n        if len(A) == len(A[::-1]) and i == M:\n            break\n        i += 1\n    return res[::-1]\n\n\"\"\"\ndef"
    },
    {
        "number": 4194,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    A.sort()\n    answer = 0\n    i = 0\n    while A[-1] > 0:\n        j = 0\n        while A[i] <= M:\n            A[i] += 1\n            j += 1\n        i += 1\n        answer = max(j, answer)\n        A.sort()\n    if answer > 0:\n        return str(answer)\n    else:\n        return str(-1)\n"
    },
    {
        "number": 4194,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A = [int(x) for x in stdin.split()]\n    N = A[0]\n    M = A[1]\n    A = A[2:]\n    \n    day = 0\n    while True:\n        if day > N:\n            return str(day)\n        \n        if day + A[day] >= M:\n            day += A[day]\n        else:\n            day += A[day] - M\n    \n"
    },
    {
        "number": 4194,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, M = list(map(int, stdin.split()))\n    A_i = list(map(int, stdin.split()))\n\n    def is_valid(i, j):\n        return 0 <= i < N and 0 <= j < M\n\n    ans = 0\n    for i in range(N):\n        for j in range(i, N):\n            if is_valid(i, j):\n                ans = max(ans, j-i)\n\n    return str(ans)\n"
    },
    {
        "number": 4195,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin[0])\n    div = int(stdin[1])\n    D = int(stdin[2])\n    ans = [D]\n    for i in range(2, D+1):\n        ans.append(num // i)\n        ans.append(num % i)\n        num = num // i\n    if ans[D] > 100:\n        return str(ans[D])\n    return str(ans[D])"
    },
    {
        "number": 4195,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    D = int(stdin.strip())\n    N = int(stdin.strip())\n    # set a helper function for divisibility\n    divisor_d = lambda n: n if n % D == 0 else n % D\n    # set a helper function for the factorial\n    factorial = lambda n: 1 if n == 0 else factorial(n - 1)\n    # set an array of 10 integers from 1 through 100.\n    # when divided by a divisor, add the number to the array\n    # if the divisor is not evenly divisible by the input number,\n    # divide the input number by the divisor and then add the divisor to the array.\n    num = []\n    # initialize the result array\n    result = []\n    # loop through the numbers from 1 to 100\n    for i in range(1, 100 + 1):\n        # if the number is divisible by the divisor, add it to the result array\n        if divisor_d(i)!= 0:\n            result.append(i)\n            num.append(i)\n            # if the number is divisible by both the divisor and the input number,\n            # then add the divisor to the result array\n            # if the divisor is not evenly divisible by the input number,\n            # divide the input number by the divisor and then add the divisor to the result array\n            if divisor_d(i) == divisor_d(divisor_d(num[i - 1])):\n                result.append(divisor_d(i))\n                num.append(divisor_d(i))\n    # when the input number is divisible by the divisor,\n    # add the input number to the result array\n    # if the divisor is not evenly divisible by the input number,\n    # divide the input number by the divisor and then add the divisor to the result array\n    else:\n        result.append(num[-1])\n        num.pop()\n    # loop through the result array until the result array is empty\n    # or the number is divisible by the divisor.\n    # if the result array is empty, return the number.\n    # if the number is not divisible by the divisor, return the number multiplied by the divisor.\n    while result:\n        x = result[-1]\n        if len(result) > 1:\n            if x * divisor_d(result[-2]) <= x * divisor_d(result[-1]):\n                result.pop()\n                result.append(x * divisor_d(result[-1]))\n            else:\n                result.pop()\n                result.append(x * divisor_d(result[-2]))\n        else:\n            result.pop()\n            result.append(x * divisor_d(result[-1]))\n    # if the result array is empty, return the number.\n    # if the result array is not empty, return the first element.\n    # if the result array is empty, return the first element.\n    if result:\n        return str(result[0])\n    else:\n        return str(num[0])\n\nExample 1:\nInput: stdin = \"1 5\\n1 3\\n1 5\\n2 3\"\nOutput: \"5\"\nExplanation:\nRingo will give you 5.\n\nExample 2:\nInput: stdin = \"1 1\\n1 2\\n2 1\\n2 2\"\nOutput: \"1\"\nExplanation:\nRingo will give you 1.\n\nExample 3:\nInput: stdin = \"10 10\\n1 1\\n1 2\\n2 1\\n2 2\\n3 1\\n3 2\\n4 1\\n4 2\\n5 1\\n5 2\\n6 1\\n6 2\\n7 1\\n7 2\\n8 1\\n8 2\\n9 1\\n9 2\\n10 1\\n10 2\"\nOutput: \"1\"\nExplanation:\nRingo will give you 1.\n\nExample 4:\nInput: stdin = \"100 10\\n1 1\\n1 2\\n2 1\\n2 2\\n3 1\\n3 2\\n4 1\\n4 2\\n5 1\\n5 2\\n6 1\\n6 2\\n7 1\\n7 2\\n8 1\\n8 2\\n9 1\\n9 2\\n10 1\\n10 2\"\nOutput: \"1\"\nExplanation:\nRingo will give you 1.\n\nExample 5:\nInput: stdin = \"100 100\\n1 1\\n1 2\\n2 1\\n2 2\\n3 1\\n3 2\\n4 1\\n4 2\\n5 1\\n5 2\\n6 1\\n6 2\\n7 1\\n7 2\\n8 1\\n8 2\\n9 1\\n9 2\\n10 1\\n10 2\"\nOutput: \"1\"\nExplanation:\nRingo will give you 1.\n\nConstraints:\n\n1 <= D <= 10^6\n1 <= N <= 10^5\n\nTime Limit: 1 sec\nSpace Limit: 1 sec\n\n\nConstraints for the solution:\n1 <= D, N <= 10^9\n\n'''\n\nclass Solution:\n    def getFactors(self, num):\n        result = []\n        for i in range(1,int(num**0.5)+1):\n            if num%i == 0:\n                result.append(i)\n                result.append(int(num/i))\n        return result\n    def solution(self, stdin: str) -> str:\n        D = int(stdin.strip())\n        N = int(stdin.strip())\n        # set a helper function for divisibility\n        divisor_d = lambda n: n if n % D == 0 else n % D\n        # set a helper function for the factorial\n        factorial = lambda n: 1 if n == 0 else factorial(n - 1)\n        # set an array of 10 integers from 1 through 100.\n        # when divided by a divisor, add the number to the array\n        # if the divisor is not evenly divisible by the input number,\n        # divide the input number by the divisor and then add the divisor to the array.\n        num = []\n        result = []\n        for i in range(1, 100 + 1):\n            if divisor_d(i)!= 0:\n                result.append(i)\n                num.append(i)\n                # if the number is divisible by both the divisor and the input number,\n                # then add the divisor to the result array\n                # if the divisor is not evenly divisible by the input number,\n                # divide the input number by the divisor and then add the divisor to the result array\n                if divisor_d(i) == divisor_d(num[i - 1]):\n                    result.append(divisor_d(i))\n                    num.append(divisor_d(i))\n        return str(result[-1])"
    },
    {
        "number": 4195,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return next(int(i) for i in range(0, 100) if len(str(i * 100)) == len(str(int(stdin) // 100)))\n"
    },
    {
        "number": 4195,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n    N, K = map(int, stdin.split())\n    a = [i for i in range(1, N+1)]\n    a.sort()\n    count = 1\n    \n    while True:\n        try:\n            divisor = a[N-count]\n            result = str(divisor * K)\n            if result.isnumeric():\n                return result\n        except:\n            return \"no answer\"\n            break\n        count += 1"
    },
    {
        "number": 4195,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = list(map(int, stdin))\n    D = max(a)\n    for i in range(1, D * n + 1):\n        if a.count(i) % n == 0:\n            print(i)\n            return str(i)"
    },
    {
        "number": 4195,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    D, N = map(int, stdin.split())\n    M = D * N\n    return str(M // 100 + 1)\n\ndef"
    },
    {
        "number": 4195,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    answer = []\n    for i in range(1, n + 1):\n        temp = []\n        for j in range(0, i):\n            temp.append(int(str(i)[j] + str(i)[j + 1]))\n        answer.append(max(temp))\n    return str(answer[n-1])\n\n----------Time complexity----------\nO(D * N)\n\nO(D)"
    },
    {
        "number": 4195,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return next(solution_iter(int(stdin)))\n    \ndef"
    },
    {
        "number": 4195,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the N-th smallest integer that can be divided by 100 exactly D times.\n    :param stdin: input from stdin\n    :return: N-th smallest integer that can be divided by 100 exactly D times.\n    \"\"\"\n    D, N = map(int, stdin.split())\n    if D < 1 or N < 1 or N > 100:\n        return \"Failure\"\n    \n    s = ''\n    for i in range(N):\n        s += str(i + 1) +''\n    s = s[:-1]\n    \n    for i in range(1, int(N / D) + 1):\n        s += str(i) +''\n    s = s[:-1]\n    s += str(N % D) + '\\n'\n    return s\n\n-----Constraints-----\n - 1 <= D <= 100,\n - 1 <= N <= 100,\n\"\"\"\nn = int(input())\nD = int(input())\nn = int(input())\nD = int(input())\n"
    },
    {
        "number": 4195,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    D, n = map(int, stdin.split())\n    i = 1\n    while D * i < n:\n        D *= 10\n        i += 1\n    return str(i)\n\n\ndef"
    },
    {
        "number": 4196,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(max([div for div in map(int, stdin.split()) if div > 0]))"
    },
    {
        "number": 4196,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n  nums = []\n  for i in stdin.split():\n    nums.append(int(i))\n  return str(gcd(nums[0], nums[1], nums[2]))\n-----Sample Output-----\n4\n5\n1\n\nTestcase Example:\nInput:\n4\n1\n1\n6\n1\n\nOutput:\n1\n4\n\nExplanation:\nThe greatest common divisor of 4 and 1 is 1.\n\nInput:\n2\n2\n1\n3\n\nOutput:\n3\n3\n\nExplanation:\nThe greatest common divisor of 2 and 1 is 2.\n\nInput:\n2\n4\n\nOutput:\n2\n\nExplanation:\nThe greatest common divisor of 2 and 4 is 4.\n\n------\nConstraints:\n1 <= N <= 10^5\n\n------\n\"\"\"\nimport math\n\nclass Solution:\n    def gcd(self, a, b):\n        if a > b:\n            a, b = b, a\n        while b:\n            a, b = b, a % b\n        return a\n        \n    def gcd_reverse(self, a, b):\n        return self.gcd_reverse(b, a % b)\n\n    def is_prime(self, n: int) -> bool:\n        if n == 1:\n            return False\n        if n == 2:\n            return True\n        for i in range(2, int(math.sqrt(n))+1):\n            if n % i == 0:\n                return False\n        return True\n\n    def gcd_prime(self, a, b):\n        if self.is_prime(a) and self.is_prime(b):\n            return max(a,b)\n        else:\n            return a if self.is_prime(a) else b\n    \n    def gcd_sum(self, a, b):\n        return max(self.gcd_reverse(a, b), self.gcd_prime(a, b))\n        \n    def solution(self, n):\n        a, b = 1, 1\n        for i in range(1, n):\n            a, b = b, a % b\n        return b"
    },
    {
        "number": 4196,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A = list(map(int, stdin.split()))\n    A.sort()\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] % A[j] == 0:\n                break\n        else:\n            return str(A[i])\n    return str(A[i])\n\nExplanation\n\nInput: A = [7,6,8]\nOutput: 7\nInput: A = [7,6,8,9,10]\nOutput: 2\nInput: A = [7,8,9,10]\nOutput: 9\nInput: A = [7,8,9,3,2,4,5]\nOutput: 3\nInput: A = [3,5,6]\nOutput: 2\nInput: A = [1,2,3]\nOutput: 1\nInput: A = [10]\nOutput: 0\nExplanation:\nThere are no two numbers that can be written as the greatest common divisor of A[0] and A[1].\nInput: A = [7,8,9,10]\nOutput: 0\nInput: A = [7,8,9,3,2,4,5,8]\nOutput: 7\nInput: A = [7,8,9,3,2,4,5,10]\nOutput: 3\nInput: A = [10]\nOutput: 0\nInput: A = [7,8,3,2,4,5]\nOutput: 3\nInput: A = [7,8,3,4,5]\nOutput: 2\nInput: A = [7,8,3,4,5,6]\nOutput: 1\nInput: A = [7,8,3,4,5,7]\nOutput: 1\nInput: A = [7,8,3,4,5,8]\nOutput: 0\nInput: A = [1,2,3,4,5,6,7,8]\nOutput: 6\nInput: A = [1,2,3,4,5,8]\nOutput: 3\nInput: A = [1,2,3,4,5,8,9,10]\nOutput: 8\nInput: A = [1,2,3,4,5,8,9,10,11]\nOutput: 2\nInput: A = [1,2,3,4,5,6,7,8,9,10]\nOutput: 5\nInput: A = [1,2,3,4,5,6,7,8,9,10,11]\nOutput: 0\nInput: A = [1,2,3,4,5,6,7,8,9,10,11,12]\nOutput: 7\nInput: A = [1,2,3,4,5,6,7,8,9,10,11,12,13]\nOutput: 1\nInput: A = [1,2,3,4,5,6,7,8,9,10,11,12,13,14]\nOutput: 1\nInput: A = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]\nOutput: 4\nInput: A = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]\nOutput: 0\nInput: A = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]\nOutput: 3\nInput: A = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]\nOutput: 2\nInput: A = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]\nOutput: 1\nInput: A = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\nOutput: 0\nInput: A = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]\nOutput: 2\nInput: A = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22]\nOutput: 0\nInput: A = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23]\nOutput: 4\nInput: A = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]\nOutput: 0\nInput: A = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]\nOutput: 3\nInput: A = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]\nOutput: 0\nInput: A = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27]\nOutput: 0\nInput: A = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28]\nOutput: 2\nInput: A = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29]\nOutput: 2\nInput: A = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]\nOutput: 1\nInput: A = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31]\nOutput: 1\nInput: A = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32]\nOutput: 3\nInput: A = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28"
    },
    {
        "number": 4196,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, A = map(int, stdin.split())\n    ans = 10**9\n    for i in range(N):\n        if A[i] == 1:\n            ans = min(ans, A[i+1] // A[i])\n    return str(ans)"
    },
    {
        "number": 4196,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(n):\n        temp = list(map(int, stdin.split()))\n        if temp.count(temp[0]) == 1:\n            temp[0] = temp[0] * 10 ** 2\n        else:\n            temp[0] = temp[0] * 10 ** 3\n        temp = sorted(temp, key=lambda x: (x, -x))\n        temp.reverse()\n        ans = temp[0]\n        for j in range(1, len(temp)):\n            if temp[j][0] * temp[j][1]!= ans:\n                ans = temp[j][0] * temp[j][1]\n        print(ans)\n        return ans\n"
    },
    {
        "number": 4196,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    for _ in range(N):\n        A = int(stdin.split()[0])\n        B = int(stdin.split()[1])\n        B = B % A\n        if B == 0:\n            return str(A)\n    return str(A)\n"
    },
    {
        "number": 4196,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return '{:d}'.format(int(''.join(map(str, filter(str.isdigit, stdin)))))\n"
    },
    {
        "number": 4196,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    A_list = list(map(int, stdin.split()))\n    return max(A_list)\n"
    },
    {
        "number": 4196,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    ans = 0\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            ans = max(ans, 1 if (i+j)%10==0 else (i+j)//10)\n    return str(ans)\n\ndef"
    },
    {
        "number": 4196,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    i, gcd = 1, 1\n    for _ in range(1, n + 1):\n        if n % _ == 0:\n            gcd = _\n            break\n    for _ in range(1, n + 1):\n        i = _\n        while i % _!= 0:\n            i = i * gcd\n    return str(i)"
    },
    {
        "number": 4197,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A = list(map(int, stdin.split()))\n    B = A\n    while A[0]!= A[-1]:\n        A.pop(0)\n    for i in range(len(A) - 1):\n        if A[i]!= A[i + 1]:\n            A[i], A[i + 1] = A[i + 1], A[i]\n    answer = ''.join(map(str, A))\n    return answer\n"
    },
    {
        "number": 4197,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, A = map(int, stdin.split())\n    if A == 1:\n        A_1 = 1\n        A_2 = 2\n        A_3 = 3\n        for i in range(1, N+1):\n            print(i)\n    else:\n        A_1, A_2, A_3 = map(int, input().split())\n        A_1 = A_1-1\n        A_2 = A_2-1\n        A_3 = A_3-1\n        A_3 = A_3-1\n        A_3 = A_3-1\n        for i in range(A_1, A_3):\n            print(i+1)\n        for i in range(A_2, A_3):\n            print(i+1)\n    return str(A_1+A_2+A_3)\n\nTime: O(N), Space: O(1)\n\"\"\"\ndef"
    },
    {
        "number": 4197,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Hint\n    # 1) Use the dictionary to add the student number at each time as key and their corresponding value as a tuple value.\n    # 2) Use the list to sort the student numbers.\n    # 3) As a result, the function should return the result.\n    n = int(stdin.split()[0])\n    A = [int(x) for x in stdin.split()[1:n+1]]\n    A.sort()\n    \n    # Hint\n    # 1) Use the dictionary to add the student number at each time as key and their corresponding value as a tuple value.\n    # 2) Use the list to sort the student numbers.\n    # 3) As a result, the function should return the result.\n    return''.join(str(x) for x in A)\n\n\"\"\"\nA = [1, 2, 3]\nB = [1, 2, 3]\nC = [1, 2, 3]\n\ndef"
    },
    {
        "number": 4197,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [i for i in range(1, n+1)]\n    print(sorted(a))\n    return \"\"\n"
    },
    {
        "number": 4197,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = set(range(1, n + 1))\n    for i in range(n):\n        for j in range(i + 1, n):\n            if i % 2 == 0 and j % 2 == 0:\n                s.add(i)\n                s.add(j)\n            if i % 2 == 0 and j % 2!= 0:\n                s.add(i)\n                s.add(j)\n            if i % 2!= 0 and j % 2 == 0:\n                s.add(i)\n                s.add(j)\n            if i % 2!= 0 and j % 2!= 0:\n                s.add(i)\n                s.add(j)\n    s = list(s)\n    s.sort()\n    answer = \"\"\n    for i in s:\n        answer += str(i) + \" \"\n    return answer\n'''\n\ndef"
    },
    {
        "number": 4197,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    students = list(map(int, stdin.split()))\n    students.sort()\n    return \" \".join(map(str, students))\n"
    },
    {
        "number": 4197,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, input().split()))\n    k = len(a)\n    b = [0] * k\n    for i in range(k):\n        if a[i] == 1:\n            b[i] = 1\n        else:\n            b[i] = 2\n    l = []\n    for i in range(k):\n        if i == 0:\n            l.append(b[i])\n        else:\n            if b[i] == 1:\n                l.append(b[i - 1] + b[i])\n            else:\n                l.append(b[i] + l[i - 1])\n    for i in range(k):\n        if i == 0:\n            l.append(0)\n        else:\n            if l[i] == l[i - 1]:\n                l.pop(i)\n            else:\n                l.append(0)\n    return ''.join(map(str, l))\n"
    },
    {
        "number": 4197,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    num_students = int(stdin.strip())\n    students = [int(stdin.strip()) for _ in range(num_students)]\n    numbers = []\n    for i in range(num_students):\n        numbers.append(i + 1)\n    numbers = list(set(numbers))\n    if len(numbers) == len(set(numbers)):\n        print(numbers)\n        return\n    numbers.sort()\n    for i in range(len(numbers)):\n        num_students -= 1\n        numbers[i] = numbers[i] + 1\n    for i in range(len(numbers) - 1):\n        if numbers[i + 1] - numbers[i] < 2:\n            numbers[i], numbers[i + 1] = numbers[i + 1], numbers[i]\n    for i in range(num_students - 1):\n        numbers[i] = numbers[i] + 1\n    for i in range(num_students - 1):\n        numbers[i] = numbers[i] - 1\n    for i in range(num_students - 1):\n        numbers[i] = -1 * numbers[i]\n    print(numbers)\n    return\n\n-----Sample Input-----\n3\n2 3 1\n\n-----Sample Output-----\n3 1 2\n"
    },
    {
        "number": 4197,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, A = map(int, stdin.split())\n    return str(N - A) + \" \" + str(A) + \" \" + str(N - A - 1) + \" \" + str(A) + \" \" + str(N - A - 1) + \" \" + str(A) + \" \" + str(N - A - 1) + \" \" + str(A) + \" \" + str(N - A - 1) + \" \" + str(N - A - 1)"
    },
    {
        "number": 4197,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n  n = int(stdin.strip())\n  a = list(map(int, stdin.strip().split()))\n  a.sort()\n  ans = []\n  for i in range(n):\n    ans.append(a[i])\n  return \" \".join(str(x) for x in ans)\n\nHere, the students are numbered from 1 to N.\n\nTime complexity: O(n log n)\nSpace complexity: O(n)\n\nExample 1:\nInput:\nN = 3\nA_1 A_2 A_3\n\nOutput:\n3 2 1\n\nExplanation:\nThe student number 3 is ordered after the student number 1 and 2, and student number 2 is ordered after the student number 1 and 3.\nThe student number 1 is ordered after the student number 2 and 3, but the student number 2 is ordered after the student number 3.\nThe student number 2 is ordered after the student number 3, but the student number 1 is ordered after the student number 3.\n\nHere, the students are ordered from 1 to 3, and the time complexity is O(n log n).\n\nExample 2:\nInput:\nN = 3\nA_1 A_2 A_3\n\nOutput:\n3 2 1\n\nExplanation:\nThe student number 3 is ordered after the student number 2 and 1.\nThe student number 2 is ordered after the student number 1 and 3.\nThe student number 1 is ordered after the student number 3.\nThe student number 3 is ordered after the student number 2.\nTime complexity is O(n log n).\n\nExample 3:\nInput:\nN = 3\nA_1 A_2 A_3 A_4\n\nOutput:\n3 2 1 3 4\n\nExplanation:\nThe student number 3 is ordered after the student number 2 and 1 and 4.\nThe student number 2 is ordered after the student number 1 and 3 and 4.\nThe student number 1 is ordered after the student number 3 and 2.\nThe student number 3 is ordered after the student number 2 and 1.\nTime complexity is O(n log n).\n\n\"\"\"\n\nclass Solution:\n    def takahashi(self, N: int, A: List[int]) -> str:\n        #\n        # \u6570\u5b66\u7684\u8a08\u7b97\u5668\n        #\n        # \u5206\u6790\n        #\n        # \u4e0b\u9762\u8fd9\u53e5\u7684\u903b\u8f91\u4e0d\u53ef\u80fd\u7b49\u81f4\uff0c\u66b4\u529b\u9012\u5f52\uff0c\u8d85\u65f6\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        # \u5206\u6790\u4e86\u89e3\u5f88\u7b80\u6d01\uff0c\u4f46\u662f\u8fd9\u4e2a\u95ee\u9898\u5206\u6790\u7684\u7b80\u6d01\n        #\n        # \u5f88\u6e05\u695a\uff0c\u81f3\u5c11\u6709\u4e00\u4e2a\u6570\u5b57\u53ef\u4ee5\u5bf9\u5e94\u4e24\u4e2a\u6570\u5b57\u7684\u503c\uff0c\n        # \u5176\u4e2d\uff0c\u7b2c\u4e00\u4e2a\u6570\u5b57\u53ef\u4ee5\u5bf9\u5e94\u4e24\u4e2a\u6570\u5b57\u7684\u6c42\u548c\u3002\n        # \u540e\u7eed\u4e24\u4e2a\u6570\u5b57\u7684\u6c42\u548c\u53ef\u4ee5\u4f7f\u5f97\u6700\u7ec8\u6570\u5b57\u6570\u5b57\u53d8\u6210\u4e86\u6700\u5c0f\u7684\u6570\u5b57\uff0c\n        # \u4f46\u8fd9\u91cc\uff0c\u6700\u7ec8\u6570\u5b57\u53d8\u6210\u4e86\u6700\u5c0f\u7684\u6570\u5b57\u3002\n        # \u56e0\u6b64\uff0c\u5229\u7528\u4e00\u4e2a\u6c42\u548c\u8fd0\u7b97\u6cd5\uff0c\u627e\u5230\u6700\u7ec8\u6570\u5b57\u3002\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        # \u5206\u6790\u7ed3\u679c\n        #\n        # \u5206\u6790\u5230\u8fd9\u91cc\u6709\u9519\u7684\uff0c\u8fd9\u91cc\u53ef\u4ee5\u7528\u4e00\u4e2a\u6570\u5b57\u53ef\u4ee5\u5bf9\u5e94\u4e24\u4e2a\u6570\u5b57\u7684\u503c\uff0c\n        # \u5176\u4e2d\uff0c\u7b2c\u4e00\u4e2a\u6570\u5b57\u53ef\u4ee5\u5bf9\u5e94\u4e24\u4e2a\u6570\u5b57\u7684\u6c42\u548c\u3002\n        # \u5982\u679c\u7b2c\u4e00\u4e2a\u6570\u5b57\u53ef\u4ee5\u5bf9\u5e94\u4e24\u4e2a\u6570\u5b57\u7684\u6c42\u548c\uff0c\u5219\u7b2c\u4e8c\u4e2a\u6570\u5b57\u53ef\u4ee5\u5bf9\u5e94\u4e24\u4e2a\u6570\u5b57\u7684\u6c42\u548c\u3002\n        # \u5982\u679c\u7b2c\u4e00\u4e2a\u6570\u5b57\u53ef\u4ee5\u5bf9\u5e94\u4e24\u4e2a\u6570\u5b57\u7684\u6c42\u548c\uff0c\u5219\u7b2c\u4e8c\u4e2a\u6570\u5b57\u53ef\u4ee5\u5bf9\u5e94\u4e24\u4e2a\u6570\u5b57\u7684\u6c42\u548c\u3002\n        # \u5176\u4e2d\uff0c\u7b2c\u4e8c\u4e2a\u6570\u5b57\u53ef\u4ee5\u5bf9\u5e94\u4e24\u4e2a\u6570\u5b57\u7684\u6c42\u548c\u3002\n        # \u56e0\u6b64\uff0c\u7b2c\u4e00\u4e2a\u6570\u5b57\u53ef\u4ee5\u5bf9\u5e94\u4e24\u4e2a\u6570\u5b57\u7684\u6c42\u548c\uff0c\u7b2c\u4e8c\u4e2a\u6570\u5b57\u53ef\u4ee5\u5bf9\u5e94\u4e24\u4e2a\u6570\u5b57\u7684\u6c42\u548c\u3002\n        # \u56e0\u6b64\uff0c\u5c31\u53ef\u4ee5\u5148\u8ba1\u7b97\u6bcf\u4e00\u4e2a\u6570\u5b57\u7684\u548c\uff0c\u7136\u540e\u7ed9\u8fd9\u4e00\u4e2a\u6570\u5b57\u6c42\u548c\uff0c\u8fd9\u4e2a\u6570\u5b57\u5c31\u662f\u6700\u7ec8\u6570\u5b57\u3002\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        #\n        # \u53e6\u5916\u4e00\u4e2a\u57fa\u7840\u95ee\u9898\uff0c\u6211\u628a\u4e24\u4e2a\u6570\u5b57\u6c42\u548c\uff0c\u4ee5\u53ca\u8fd9\u4e2a\u6570\u5b57\u7684\u7b2c\u4e8c\u4e2a\u6570\u5b57\u53ef\u4ee5\u5bf9\u5e94\u4e24\u4e2a\u6570\u5b57\u7684\u6c42\u548c\uff0c\n        # \u5206\u522b\u662f\u7b2c\u4e8c\u4e2a\u6570\u5b57\u53ef\u4ee5\u5bf9\u5e94\u4e24\u4e2a\u6570\u5b57\u7684\u6c42\u548c\uff0c\u7b2c\u4e00\u4e2a\u6570\u5b57\u53ef\u4ee5\u5bf9\u5e94\u4e24\u4e2a\u6570\u5b57\u7684\u6c42\u548c\uff0c\u4ee5\u53ca\u8fd9\u4e2a\u6570\u5b57\u7684\u7b2c\u4e8c\u4e2a\u6570\u5b57\u53ef\u4ee5\u5bf9\u5e94\u4e24\u4e2a\u6570\u5b57\u7684\u6c42\u548c\uff0c\n        # \u7528\u4e00\u4e2a\u6c42\u548c\u7684\u65f6\u5019\uff0c\u7ed3\u679c\u5c31\u662f\u6700\u7ec8\u6570\u5b57\uff0c\u56e0\u6b64\u5b83\u662f\u4e24\u4e2a\u6570\u5b57\u7684\ufffd"
    },
    {
        "number": 4198,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, x = map(int, stdin.split())\n    result = n\n    for i in range(n):\n        result *= 10 ** (len(str(i)) - len(str(n)))\n    print(max(result, b * result, a * result, x * result))\n"
    },
    {
        "number": 4198,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    x, y, n = [int(i) for i in stdin.split()]\n    if x * n > y * 10**(n - 1):\n        return \"0\"\n    return str(x * y * n)\n"
    },
    {
        "number": 4198,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = 10 ** n\n    b = 10 ** k\n    for i in range(10, 10**9 + 1):\n        if i % b!= 0:\n            a *= i // b\n            print(a)\n        else:\n            print(int(a))\n            return str(a)\n"
    },
    {
        "number": 4198,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n  A, B, X, Y = map(int, stdin.split())\n  if A < B:\n    print(max(A, B, X * B, Y * A))\n  elif A < 10 ** 9:\n    print(A)\n  elif A < 10 ** 18:\n    print(max(A, 10 ** 9 - A))\n  elif A < 10 ** 18 + B:\n    print(max(A, B, X * B, Y * A))\n  else:\n    print(max(A, 10 ** 18 - A, 10 ** 18 + B, X * B, Y * A))\n"
    },
    {
        "number": 4198,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[:stdin.find(' ')])\n    a, b, d = [int(i) for i in stdin[stdin.find(' ')+2:].split(' ')]\n    answer = ''\n    if n == a*n + b*d:\n        answer = str(n)\n        return answer\n    for i in range(1, a+1):\n        for j in range(1, b+1):\n            answer += str(i)\n            answer += str(j)\n            answer += str(d)\n            if int(answer) > n:\n                return answer\n\nprint(solution(input()))\n"
    },
    {
        "number": 4198,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if (A < 10**18) or (B < 10**18):\n        return 0\n    prices = [10, 100, 12345]\n    answer = 0\n    for price in prices:\n        if price <= (A * price + B):\n            answer = max(answer, price)\n    return str(answer)\n\n-----Sample Output-----\nInput:\n10 7 100\nOutput:\n9\nExplanation:\n9: 10 \\times 10 + 7 \\times 2 = 114 yen\n10: 10 \\times 100 + 7 \\times 3 = 1021 yen\nInput:\n100 12345\nOutput:\n0\nExplanation:\nInput:\n12345\nOutput:\n0\nInput:\n1\nOutput:\n0\nExplanation:\nInput:\n1\nOutput:\n0\n'''"
    },
    {
        "number": 4198,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    price = [int(i) for i in stdin.split()]\n    dp = [0] * (n+1)\n    dp[0], dp[1], dp[2] = 0, 10, 10\n    for i in range(3, n+1):\n        for j in range(1, 7):\n            for k in range(1, j+1):\n                for m in range(1, k+1):\n                    dp[i] = max(dp[i], dp[i - 1] + price[i - 1])\n    return str(dp[n])"
    },
    {
        "number": 4198,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    p = 10**9+7\n    B = int(input())\n    n, k = [int(i) for i in input().split()]\n    a, b, x, y = [int(i) for i in input().split()]\n    answer = 0\n    while k:\n        i = 1\n        for j in range(1, 10**9+1):\n            if j % a == 0 and n % x == 0 and n % y == 0:\n                if k % j == 0:\n                    k -= j\n                    break\n            i += 1\n        answer = max(answer, i)\n        k -= i\n    return str(answer)\n"
    },
    {
        "number": 4198,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    return str(max(a * n + b, 0))\n\"\"\""
    },
    {
        "number": 4198,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X, N = map(int, stdin.split())\n    ans = max(A,B,N)\n    for i in range(1, ans+1):\n        n = ans * 10\n        if A >= 10**i and B >= 10**i:\n            n *= 10\n            if n > B:\n                ans = n\n    return str(ans)\n"
    },
    {
        "number": 4199,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    h_list = list(map(int, stdin.split()))\n    max_ = max(h_list)\n    \n    h_list.sort()\n    \n    first_h_list = h_list[:3]\n    second_h_list = h_list[3:]\n    \n    second_h_list.sort()\n    \n    answer = len(first_h_list) + len(second_h_list)\n    \n    return str(answer)\n\nprint(solution(\"4 150\"))\nprint(solution(\"3 100\"))"
    },
    {
        "number": 4199,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    def get_h(h):\n        return (1 + max(h // 2, 1)) * h\n    \n    def get_h_i(i, h):\n        return (1 + i) * h\n    \n    def get_c(c, m):\n        return c * (m // 2)\n    \n    def get_p(p):\n        return get_h(p) // (get_h(p) + get_h(p - 1) + get_h(p + 1))\n    \n    def get_c_i(c, m):\n        return c * (m // 2)\n    \n    def get_h_i_c(i, c):\n        return (1 + i) * c\n    \n    def get_i(i):\n        return get_h_i(i, h) + get_h_i_c(i, c)\n    \n    N, K, h = map(int, stdin.split())\n    h_i = (get_h_i(0, h) + get_h_i(1, h) + get_h_i(2, h))\n    c = K * h\n    m = h_i\n    \n    for _ in range(N):\n        i = input().split()\n        c_i = get_c_i(c, m)\n        i[0] = int(i[0])\n        i[1] = int(i[1])\n        m += c_i\n        c += c_i\n    \n    print(get_p(c))\n\n(TakahashiDriver)"
    },
    {
        "number": 4199,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    k, n, h = map(int, stdin.split())\n    lst = []\n    for i in range(n):\n        h_i = int(input())\n        lst.append(h_i)\n    \n    for i in range(k-1):\n        for j in range(n-1):\n            if lst[j] > lst[j+1]:\n                lst[j], lst[j+1] = lst[j+1], lst[j]\n    print(len(lst))\n    return str(len(lst))\n\"\"\"\n\ndef"
    },
    {
        "number": 4199,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    H = []\n    for _ in range(N):\n        H.append(list(map(int, input().split())))\n    \n    def distance(a, b):\n        if a > b:\n            return b-a\n        else:\n            return a-b\n    \n    def h_i(idx, distance):\n        return distance//distance//distance//distance//distance//distance//distance//distance//distance//distance//distance//distance//distance//distance//distance//distance//distance//distance//distance\n    \n    for _ in range(K):\n        for idx in range(N):\n            a, b = H[idx]\n            h_i(idx, h_i(idx, distance(a, b)))\n    \n    answer = 0\n    for idx in range(N):\n        a, b = H[idx]\n        answer += distance(a, b)//h_i(idx, distance(a, b))\n    return str(answer)\n"
    },
    {
        "number": 4199,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    N, K = map(int, stdin.split())\n    h_i = map(int, stdin.split())\n    \n    # If we have a straight line, if it's > than the smallest/largest people, then return 1\n    # Otherwise, return the number of people among the people and the smallest/largest people\n    # If K is more than the smallest people, then return 1\n    \n    if K < min(h_i) or K > max(h_i):\n        return 1\n    \n    # If K is <= the smallest/largest people, then return 1\n    # Else, return the number of people among the people and the largest/smallest people\n    \n    else:\n        return (K - min(h_i))//(K - min(h_i)) + 1\n"
    },
    {
        "number": 4199,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n  N, K = map(int, stdin.split())\n  people = list(map(int, stdin.split()))\n\n  def h_i(i):\n    return max(int(i) + 1, N)\n\n  answer = []\n  for i in range(K):\n    answer.append(len(set(people[i::K]) & set(range(h_i(people[i])))) + 1)\n  return '\\n'.join(map(str, answer))"
    },
    {
        "number": 4199,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x = [int(i) for i in stdin.split()]\n    n = x[0]\n    k = x[1]\n    h_1, h_2, h_3 = x[2]\n    h_4 = x[3]\n    for i in range(1, n+1):\n        if i % h_1 == 0:\n            if i % h_2 == 0:\n                if i % h_3 == 0:\n                    if i % h_4 == 0:\n                        print(i)\n                else:\n                    print(i)\n    return str(i)"
    },
    {
        "number": 4199,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    h_i = [int(x) for x in stdin.split() if x.isdigit()]\n    count = 0\n    for i in range(1, len(h_i)):\n        count += h_i[i] * K\n    return str(count)\n\n'''\n\ndef"
    },
    {
        "number": 4199,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n  N, K = map(int, stdin.split())\n  h = list(map(int, stdin.split()))\n  def find(n: int) -> str:\n    if K <= n <= K + n:\n      return str(n)\n    return str(n ** 2)\n  def solution(N: int, K: int, h: list) -> str:\n    answer = 0\n    for i in h:\n      answer += find(i)\n    return str(answer)\n  return solution(N, K, h)\n\n\n\ndef"
    },
    {
        "number": 4199,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    h_list = [int(i) for i in stdin.split()]\n\n    def solution2(N, K, h_list):\n        result = 0\n        count = 0\n        for i in range(N):\n            count += (K - h_list[i] * (K - h_list[i - 1]) + h_list[i - 1]) * 2\n            if count >= K:\n                result += 1\n                count = 0\n        return result\n\n    return str(solution2(N, K, h_list))\n\n\nprint(solution(\"4 150\"))\nprint(solution(\"4 150 1\"))\nprint(solution(\"4 150 1 2\"))\n"
    },
    {
        "number": 4200,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n,m = map(int,stdin.split())\n    A = [int(i) for i in stdin.split()]\n    \n    k = len(A) // m\n    answer = []\n    \n    for i in range(m):\n        answer.append([A[k*i], A[k*i+1]])\n    \n    result = []\n    for i in range(m):\n        for j in range(k):\n            if j*k + i > m:\n                break\n            result.append(answer[j][0] + answer[j][1])\n    if len(result)>1:\n        return \"Yes\"\n    elif len(result)==1:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4200,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n\n    for i in range(N):\n        A[i] = A[i]/M\n        A[i] = int(A[i])\n\n    candidates = [0]*N\n    result = []\n\n    def dfs(index):\n        if candidates[index] == 1:\n            result.append('Yes')\n            candidates[index] = 0\n        elif candidates[index] == 0:\n            result.append('No')\n            candidates[index] = 1\n        else:\n            dfs(index * 2 + 1)\n            dfs(index * 2 + 2)\n\n    dfs(0)\n\n    return ''.join(result)\n\n-----Sample Output-----\nTrue\nTrue\nTrue\nTrue\nTrue\n\nFalse\nFalse\n\nFalse\nFalse\n\nFalse\nTrue\nTrue\nTrue\n\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\n\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\n\nTrue\nFalse\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\n\nTrue\nFalse\nFalse\nTrue\nFalse\nTrue\nTrue\nTrue\nTrue\n\nFalse\nTrue\nFalse\nTrue\nTrue\nFalse\nTrue\nTrue\nTrue\nTrue\n\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\n\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\n\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\n"
    },
    {
        "number": 4200,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    A = map(int, stdin.split())\n    \n    # Sieve of Eratosthenes\n    sieve = [True for _ in range(N + 1)]\n    sieve[0] = sieve[1] = False\n    for i in range(2, N + 1):\n        if sieve[i]:\n            sieve[i * i::i] = [False, False] + [True] * (i * i - 2)\n\n    # Number of possible popular items\n    total_votes = (M + 1) // 4\n\n    # Initialize and count number of votes\n    popular_votes = [0 for _ in range(total_votes)]\n    for i in A:\n        popular_votes[i] += 1\n\n    # Count number of popular items\n    popular_items = [0 for _ in range(total_votes)]\n    for i in range(total_votes):\n        if popular_votes[i] == M:\n            popular_items[i] = 1\n        else:\n            popular_items[i] = 0\n\n    # Sort popular items in decreasing order\n    popular_items.sort(reverse=True)\n\n    # No popular items can be selected\n    # if M == 1:\n    #     print('Yes')\n    # else:\n    #     print('No')\n\n    # Count number of popular items\n    return 'Yes' if popular_items[0] == M else 'No'\n\nprint(solution('4 1')) # 'Yes'\n"
    },
    {
        "number": 4200,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    items = list(map(int, stdin.split()))\n    # result = []\n    # for item in items:\n    #     result.append(item % m)\n    # print(result)\n    # return 'Yes' if result == [1, 2, 3, 4, 5, 6, 7, 8, 9] else 'No'\n    # return 'Yes' if sum(items) % m == 0 else 'No'\n    solution = 1\n    for i in range(m):\n        solution = solution * sum(items[:i]) + 1\n    return 'Yes' if solution % m == 0 else 'No'\n\"\"\"\ndef"
    },
    {
        "number": 4200,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    A_1 = list(map(int, stdin.split()))\n    A = sorted(A_1)\n    for i in range(M, 0, -1):\n        if A.count(A[i]) > 1:\n            return 'No'\n        if A.count(A[i]) == 1:\n            A.pop(A.index(A[i]))\n    return 'Yes'"
    },
    {
        "number": 4200,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    A_1, A_2, A_3, A_4, A_5 = map(int, stdin.split())\n    A_1_v = [A_1]\n    A_2_v = [A_2]\n    A_3_v = [A_3]\n    A_4_v = [A_4]\n    A_5_v = [A_5]\n    \n    sum_v = sum(A_1_v) + sum(A_2_v) + sum(A_3_v) + sum(A_4_v) + sum(A_5_v)\n    \n    if (M/sum_v)%4==0:\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 4200,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    A_1, A_2, A_3, A_4, A_5 = map(int, stdin.split())\n    M_candidates = map(int, stdin.split())\n    counts = [0] * (N + 1)\n    ans = \"\"\n    for _ in range(N):\n        counts[M_candidates[M_candidates.index(M)]] += 1\n        M_candidates.remove(M)\n        if M_candidates[0] == 0:\n            break\n    M_candidates.append(A_5)\n    for i in range(1, N + 1):\n        counts[i] += counts[i - 1]\n        counts[i] += counts[i - A_3] + counts[i - A_4]\n    if M_candidates[0]!= 0:\n        ans += \"Yes\"\n    else:\n        ans += \"No\"\n    for i in range(1, N):\n        counts[i] += counts[i - 1]\n        counts[i] += counts[i - A_3] + counts[i - A_4]\n    if M_candidates[0]!= 0:\n        ans += \"Yes\"\n    else:\n        ans += \"No\"\n    for i in range(N):\n        counts[i] += counts[i - 1]\n        counts[i] += counts[i - A_2] + counts[i - A_3]\n    if M_candidates[0]!= 0:\n        ans += \"Yes\"\n    else:\n        ans += \"No\"\n    for i in range(N):\n        counts[i] += counts[i - 1]\n        counts[i] += counts[i - A_1] + counts[i - A_2] + counts[i - A_3]\n    if M_candidates[0]!= 0:\n        ans += \"Yes\"\n    else:\n        ans += \"No\"\n    for i in range(N):\n        counts[i] += counts[i - 1]\n        counts[i] += counts[i - A_1] + counts[i - A_2] + counts[i - A_3]\n    if M_candidates[0]!= 0:\n        ans += \"Yes\"\n    else:\n        ans += \"No\"\n    for i in range(N):\n        counts[i] += counts[i - 1]\n        counts[i] += counts[i - A_1] + counts[i - A_2] + counts[i - A_3]\n    if M_candidates[0]!= 0:\n        ans += \"Yes\"\n    else:\n        ans += \"No\"\n    for i in range(N):\n        counts[i] += counts[i - 1]\n        counts[i] += counts[i - A_1] + counts[i - A_2] + counts[i - A_3]\n    if M_candidates[0]!= 0:\n        ans += \"Yes\"\n    else:\n        ans += \"No\"\n    for i in range(N):\n        counts[i] += counts[i - 1]\n        counts[i] += counts[i - A_1] + counts[i - A_2] + counts[i - A_3]\n    if M_candidates[0]!= 0:\n        ans += \"Yes\"\n    else:\n        ans += \"No\"\n    for i in range(N):\n        counts[i] += counts[i - 1]\n        counts[i] += counts[i - A_1] + counts[i - A_2] + counts[i - A_3]\n    if M_candidates[0]!= 0:\n        ans += \"Yes\"\n    else:\n        ans += \"No\"\n    for i in range(N):\n        counts[i] += counts[i - 1]\n        counts[i] += counts[i - A_1] + counts[i - A_2] + counts[i - A_3]\n    if M_candidates[0]!= 0:\n        ans += \"Yes\"\n    else:\n        ans += \"No\"\n    for i in range(N):\n        counts[i] += counts[i - 1]\n        counts[i] += counts[i - A_1] + counts[i - A_2] + counts[i - A_3]\n    if M_candidates[0]!= 0:\n        ans += \"Yes\"\n    else:\n        ans += \"No\"\n    for i in range(N):\n        counts[i] += counts[i - 1]\n        counts[i] += counts[i - A_1] + counts[i - A_2] + counts[i - A_3]\n    if M_candidates[0]!= 0:\n        ans += \"Yes\"\n    else:\n        ans += \"No\"\n    for i in range(N):\n        counts[i] += counts[i - 1]\n        counts[i] += counts[i - A_1] + counts[i - A_2] + counts[i - A_3]\n    if M_candidates[0]!= 0:\n        ans += \"Yes\"\n    else:\n        ans += \"No\"\n    for i in range(N):\n        counts[i] += counts[i - 1]\n        counts[i] += counts[i - A_1] + counts[i - A_2] + counts[i - A_3]\n    if M_candidates[0]!= 0:\n        ans += \"Yes\"\n    else:\n        ans += \"No\"\n    for i in range(N):\n        counts[i] += counts[i - 1]\n        counts[i] += counts[i - A_1] + counts[i - A_2] + counts[i - A_3]\n    if M_candidates[0]!= 0:\n        ans += \"Yes\"\n    else:\n        ans += \"No\"\n    for i in range(N):\n        counts[i] += counts[i - 1]\n        counts[i] += counts[i - A_1] + counts[i - A_2] + counts[i - A_3]\n    if M_candidates[0]!= 0:\n        ans += \"Yes\"\n    else:\n        ans += \"No\"\n    for i in range(N):\n        counts[i] += counts[i - 1]\n        counts[i] += counts[i - A_1] + counts[i - A_2] + counts[i - A_3]\n    if M_candidates[0]!= 0:\n        ans += \"Yes\"\n    else:\n        ans += \"No\"\n    for i in range(N):\n        counts[i] += counts[i - 1]\n        counts[i] += counts[i - A_1] + counts[i - A_2] + counts[i - A_3]\n    if M_candidates[0]!= 0:\n        ans += \"Yes\"\n    else:\n        ans += \"No\"\n    for i in range(N):\n        counts[i] += counts[i - 1]\n        counts[i] += counts[i - A_1] + counts[i - A_2] + counts[i - A_3]\n    if M_candidates[0]!= 0:\n        ans += \"Yes\"\n    else:\n        ans += \"No\"\n    for i in range(N):"
    },
    {
        "number": 4200,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    for _ in range(int(stdin.strip())):\n        N, M = map(int, input().strip().split())\n        result = []\n        sum_votes = 0\n        for _ in range(N):\n            result.append(int(input().strip()))\n            sum_votes += result[-1]\n        print(\"Yes\" if sum_votes == M * (sum_votes // M) else \"No\")\n"
    },
    {
        "number": 4200,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    A_1, A_2, A_3, A_4 = map(int, stdin.split())\n    candidates = [A_1, A_2, A_3, A_4]\n    for _ in range(M):\n        candidates.remove(min(candidates))\n    candidates.sort()\n    count = 0\n    for i in range(N):\n        if candidates[i] >= A_1:\n            count += 1\n    if count >= M//2:\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 4200,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N,M=map(int,stdin.split())\n    A=list(map(int,stdin.split()))\n    A.sort()\n    result=''\n    for i in A:\n        if M<=len(str(i)):\n            result+='Yes'\n        else:\n            result+=str(i)\n            M-=len(str(i))\n    return result"
    },
    {
        "number": 4201,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    input = stdin\n    input = input.split()\n    K = int(input[0])\n    H = int(input[1])\n    W = int(input[2])\n    \n    # the result of each operation is the row and column\n    # i-th row and j-th column\n    \n    result = []\n    for i in range(H):\n        for j in range(W):\n            if i == 0:\n                if j == 0:\n                    result.append('#')\n                else:\n                    result.append('#')\n            elif i == H - 1:\n                if j == W - 1:\n                    result.append('#')\n                else:\n                    result.append('#')\n            else:\n                if i == H - 1:\n                    result.append('#')\n                else:\n                    result.append('#')\n                if j == W - 1:\n                    result.append('#')\n                else:\n                    result.append('#')\n        result = result[:-1]\n    \n    # i-th row and j-th column\n    result = result[:-1]\n    result = result[::-1]\n    result = ''.join(result)\n    return str(K) + \" \" + result\n\n\nprint(solution(input))"
    },
    {
        "number": 4201,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, H, W, K = map(int, stdin.split())\n    c = list(map(lambda x: '#' if x == '.' else '.', input()))\n    \n    return '{}'.format(sum(list(map(lambda x: abs(len(x) - len(c)) <= K, map(lambda x: x.count('#'), c)))) // len(c))\n"
    },
    {
        "number": 4201,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    solution = 0\n    col, row, ans = 0, 0, 0\n    for line in stdin:\n        if line == '#':\n            row += 1\n        elif line == '.':\n            col += 1\n        else:\n            ans = max(row, col, ans)\n            solution += 1\n    return str(solution)"
    },
    {
        "number": 4201,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    H, W, K = map(int, stdin.split())\n    \n    count = 0\n    for i in range(1, H):\n        for j in range(1, W):\n            if (i == 1) and (j == 1):\n                c = '.'\n                continue\n            c = '#'\n            if (i > 1) and (j > 1):\n                if c == '#':\n                    count += 1\n                    continue\n                if (c == '.') and (i > 2) and (j > 2):\n                    count += 1\n                    continue\n            if (i == 1) and (j == 2):\n                c = '#'\n                continue\n            if (c == '#') and (i > 2) and (j > 2):\n                count += 1\n                continue\n            if c == '#':\n                count += 1\n    print(count)\n    return str(count)"
    },
    {
        "number": 4201,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    answer = 0\n    while True:\n        data = stdin.strip().split()\n        if data[0] == '-1' or data[0] == '1':\n            break\n        else:\n            answer += 1\n    while True:\n        data = stdin.strip().split()\n        for i in range(len(data)):\n            data[i] = data[i].replace('.', '#')\n        if data[0] == '-1' or data[0] == '1':\n            break\n        else:\n            answer += 1\n    return answer\n"
    },
    {
        "number": 4201,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    rows = [list(stdin) for _ in range(6)]\n    cols = [[] for _ in range(6)]\n    for i in range(6):\n        for j in range(i, 6):\n            cols[i].append(rows[j][i])\n            cols[j].append(rows[j][i])\n    \n    count = 0\n    for i in range(6):\n        for j in range(i, 6):\n            if cols[i][j] == \"#\":\n                count += 1\n    print(count)\n    return count\n"
    },
    {
        "number": 4201,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    if N % 2 == 1:\n        return \"No\"\n    if N % 2 == 0 and K > 1:\n        return \"No\"\n    if K > N:\n        return \"No\"\n    if N == 1:\n        return \"Yes\"\n\n    def check(n: int, row: int, col: int) -> int:\n        if n == 1:\n            return 1\n        if 0 <= row < n and 0 <= col < n and 1 <= row <= n-1 and 1 <= col <= n-1:\n            return check(n//2, row, col) + check(n//2, col, n-1) + check(n//2, row, n-1)\n        else:\n            return 0\n\n    def four_col_min_count(row: int) -> int:\n        if row % 2 == 1:\n            return 1\n        if N <= row % 4:\n            return 1\n        return check(N // 4, row // 2, N // 4 - row % 2) + check(N // 4, N // 2 - row % 2, N - row % 4) + 1\n\n    ans = 0\n    for i in range(N + 1):\n        for j in range(N + 1):\n            ans += check(i, j, N)\n    print(ans)\n    return ans\n\nprint(solution(input()))\n"
    },
    {
        "number": 4201,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    :param stdin:\n    :return:\n    \"\"\"\n    H, W = map(int, stdin.split())\n    K = int(stdin.split()[1])\n    if 1 <= H <= H * W <= W:\n        return str(K)\n    return '0'"
    },
    {
        "number": 4201,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    K, H, W = map(int, stdin.split())\n    \n    # getting the rows and columns\n    h = len(map(int, stdin.split()))\n    w = len(map(int, stdin.split()))\n    \n    # list to hold the answer for each row\n    ans = []\n    \n    # fill the answer list with the corresponding number\n    for i in range(h):\n        ans.append(i + 1)\n    \n    # fill the answer list with the corresponding number\n    for j in range(w):\n        ans.append(j + 1)\n        \n    # print the number of valid rows\n    print(len(ans))\n    \n    # for every element\n    for row in range(h):\n        for col in range(w):\n            \n            # if c_{row,col} is black\n            if ans[row] == 0:\n                ans[row] = \"#\"\n                \n            # if c_{row,col} is white\n            else:\n                ans[row] = \".\"\n                \n    # print the number of valid columns\n    print(len(ans))\n    \n    # print the answer\n    for row in ans:\n        print(row, end=\"\")\n        \n    # if K is 0 then there are no valid rows,\n    # if K is 1 then there are no valid columns,\n    # if K is 2 then there are valid rows and columns,\n    # so that all other numbers are valid\n    if K == 0:\n        return \"Invalid input\"\n    \n    # if K is 2 then there are valid rows and columns,\n    # and the answer list is filled\n    elif K == 2:\n        return \" \".join(str(i) for i in ans)\n    \n    # if K is 1 then there are no valid columns,\n    # so the answer list is filled with only \"#\"\n    elif K == 1:\n        return \" \".join(str(i) for i in ans)\n    \n    # if K is 0 then there are no valid rows,\n    # so the answer list is filled with \"Invalid input\"\n    elif K == 0:\n        return \"Invalid input\""
    },
    {
        "number": 4201,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # https://www.geeksforgeeks.org/solution-given-numbers-in-a-given-input-format/\n    K = int(stdin.strip().split(' ')[0])\n    N = int(stdin.strip().split(' ')[1])\n\n    # 1. Create a list of the characters present in the given input, so that we know the rows and columns for each column\n    # 2. For every character present, we know whether it is the 1st row, 2nd column, or 3rd column\n    # 3. In the end, we know whether or not the corresponding row/column is to be painted in black or white\n    # 4. We know whether or not the corresponding row/column is to be painted in black or white\n\n    rows = []\n    columns = []\n\n    for _ in range(N):\n        rows.append(input().rstrip())\n\n    for _ in range(N):\n        columns.append(input().rstrip())\n\n    for i in range(1, N):\n        for j in range(1, N):\n            # 1. Check whether the character is 1st row, 2nd column, or 3rd column\n            if rows[i] == columns[j]:\n                # 2. Check whether it is the 1st row, 2nd column, or 3rd column\n                if rows[i] == '#':\n                    if columns[j] == '#':\n                        # 3. Check whether the corresponding row/column is to be painted in black or white\n                        if columns[j] == '.' or rows[i] == '.':\n                            return ''.join(['#' for _ in range(K)])\n                        else:\n                            # 4. Check whether the corresponding row/column is to be painted in black or white\n                            #     Note: We are ignoring the '#' character as it is a black '#' character\n                            return ''.join(['.' for _ in range(K)])\n                else:\n                    # 3. Check whether the corresponding row/column is to be painted in black or white\n                    return ''.join(['#' for _ in range(K)])\n\n    return ''.join(['#' for _ in range(K)])\n"
    },
    {
        "number": 4202,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    arr = []\n    for i in stdin:\n        arr.append(int(i))\n    result = min(arr)\n    return str(result % 2019)\n\n-----Algorithm Execution-----\nInput:\n2020 2040\n\nOutput:\n2\n"
    },
    {
        "number": 4202,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split()\n    try:\n        l = int(a[0])\n        r = int(a[1])\n        mod = (l*r) % 10 ** 9 + 1\n        return str(mod)\n    except:\n        return \"Error\""
    },
    {
        "number": 4202,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    num_list = list(map(int, stdin.split()))\n    num_list.sort()\n    num_list.append(num_list[-1] + 2*num_list[-2] + num_list[-3]//3)\n    result = []\n    for i in range(len(num_list) - 2):\n        if num_list[i] == num_list[i + 1] or num_list[i + 1] == num_list[i + 2]:\n            continue\n        result.append(num_list[i] * (num_list[i + 1] * num_list[i + 2]))\n    return str(max(result))\n\"\"\"\ndef"
    },
    {
        "number": 4202,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n  l, r = map(int, stdin.split())\n  if l == r:\n    return str(1)\n  i, j = divmod(l, r)\n  return str(i*j)\n"
    },
    {
        "number": 4202,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    L, R = map(int, stdin.split(' '))\n    answer = min(L, R)\n    return str(answer)\n\"\"\"\n\ndef"
    },
    {
        "number": 4202,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n        print(lambda: min(int(i)*int(j) for i, j in enumerate(stdin.split())))\n"
    },
    {
        "number": 4202,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, L, R = [int(x) for x in stdin.split()]\n    assert(N % 2 == 0)\n    assert(L < R < 10**9)\n    assert(2**N <= R <= 10**9)\n    if N == 1:\n        return str(2 ** (L + R - 2))\n    if N == 2:\n        return str(2 * (L + R - 2))\n    if N == 3:\n        return str(2 * (L + 2 * R - 4))\n    if N == 4:\n        return str(2 * (L + 4 * R - 6))\n    if N == 5:\n        return str(2 * (L + 5 * R - 9))\n    if N == 6:\n        return str(2 * (L + 6 * R - 12))\n    if N == 7:\n        return str(2 * (L + 7 * R - 15))\n    if N == 8:\n        return str(2 * (L + 8 * R - 21))\n    if N == 9:\n        return str(2 * (L + 9 * R - 24))\n    if N == 10:\n        return str(2 * (L + 10 * R - 27))\n    if N == 11:\n        return str(2 * (L + 11 * R - 31))\n    if N == 12:\n        return str(2 * (L + 12 * R - 34))\n    if N == 13:\n        return str(2 * (L + 13 * R - 39))\n    if N == 14:\n        return str(2 * (L + 14 * R - 42))\n    if N == 15:\n        return str(2 * (L + 15 * R - 45))\n    if N == 16:\n        return str(2 * (L + 16 * R - 49))\n    if N == 17:\n        return str(2 * (L + 17 * R - 52))\n    if N == 18:\n        return str(2 * (L + 18 * R - 55))\n    if N == 19:\n        return str(2 * (L + 19 * R - 59))\n    if N == 20:\n        return str(2 * (L + 20 * R - 62))\n    if N == 21:\n        return str(2 * (L + 21 * R - 65))\n    if N == 22:\n        return str(2 * (L + 22 * R - 69))\n    if N == 23:\n        return str(2 * (L + 23 * R - 71))\n    if N == 24:\n        return str(2 * (L + 24 * R - 74))\n    if N == 25:\n        return str(2 * (L + 25 * R - 79))\n    if N == 26:\n        return str(2 * (L + 26 * R - 82))\n    if N == 27:\n        return str(2 * (L + 27 * R - 85))\n    if N == 28:\n        return str(2 * (L + 28 * R - 89))\n    if N == 29:\n        return str(2 * (L + 29 * R - 92))\n    if N == 30:\n        return str(2 * (L + 30 * R - 95))\n    if N == 31:\n        return str(2 * (L + 31 * R - 99))\n    if N == 32:\n        return str(2 * (L + 32 * R - 102))\n    if N == 33:\n        return str(2 * (L + 33 * R - 105))\n    if N == 34:\n        return str(2 * (L + 34 * R - 109))\n    if N == 35:\n        return str(2 * (L + 35 * R - 112))\n    if N == 36:\n        return str(2 * (L + 36 * R - 115))\n    if N == 37:\n        return str(2 * (L + 37 * R - 119))\n    if N == 38:\n        return str(2 * (L + 38 * R - 122))\n    if N == 39:\n        return str(2 * (L + 39 * R - 125))\n    if N == 40:\n        return str(2 * (L + 40 * R - 129))\n    if N == 41:\n        return str(2 * (L + 41 * R - 132))\n    if N == 42:\n        return str(2 * (L + 42 * R - 135))\n    if N == 43:\n        return str(2 * (L + 43 * R - 139))\n    if N == 44:\n        return str(2 * (L + 44 * R - 142))\n    if N == 45:\n        return str(2 * (L + 45 * R - 145))\n    if N == 46:\n        return str(2 * (L + 46 * R - 148))\n    if N == 47:\n        return str(2 * (L + 47 * R - 151))\n    if N == 48:\n        return str(2 * (L + 48 * R - 154))\n    if N == 49:\n        return str(2 * (L + 49 * R - 159))\n    if N == 50:\n        return str(2 * (L + 50 * R - 164))\n    if N == 51:\n        return str(2 * (L + 51 * R - 167))\n    if N == 52:\n        return str(2 * (L + 52 * R - 171))\n    if N == 53:\n        return str(2 * (L + 53 * R - 173))\n    if N == 54:\n        return str(2 * (L + 54 * R - 175))\n    if N == 55:\n        return str(2 * (L + 55 * R - 179))\n    if N == 56:\n        return str(2 * (L + 56 * R - 182))\n    if N == 57:\n        return str(2 * (L + 57 * R - 185))\n    if N == 58:\n        return str(2 * (L + 58 * R - 188))\n    if N == 59:\n        return str(2 * (L + 59 * R - 191))\n    if N == 60:\n        return str(2 * (L + 60 * R - 194))\n    if N == 61:\n        return str(2 * (L + 61 * R - 197))\n    if N == 62:\n        return str(2 * (L + 62 * R - 201))\n    if N == 63:\n        return str(2 * (L + 63 * R - 204))\n    if N == 64:\n        return str(2 * (L + 64 * R - 207))\n    if N == 65:\n        return str(2 * (L + 65 * R - 220))\n    if N == 66:\n        return str(2 * (L + 66 * R - 223))\n    if N == 67:\n        return str(2 * (L + 67 * R - 226))\n    if N == 68:\n        return str(2 * (L + 68 * R - 229))\n    if N == 69:\n        return str(2 * (L + 69 * R - 232))\n    if N == 70:\n        return str(2 * (L + 70 * R - 235))\n    if N == 71:\n        return str(2 * (L + 71 * R - 239))\n    if N == 72:\n        return str(2 * (L + 72 * R - 242))\n    if N == 73:\n        return str(2 * (L + 73 * R - 245))\n    if N == 74:\n        return str(2 * (L + 74 * R - 249))\n    if N == 75:\n        return str(2 * (L + 75 * R - 252))\n    if N == 76:\n        return str(2 * (L + 76 * R - 255))\n    if N == 77:\n        return str(2 * (L + 77 * R - 257))\n    if N == 78:\n        return str(2 * (L"
    },
    {
        "number": 4202,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    min_sum = 9999999\n    \n    for i in range(int(stdin[1])*int(stdin[2])):\n        min_sum = min(min_sum, i % int(stdin[2]))\n    return str(min_sum)\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4202,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\" \")[1])\n    L = int(stdin.split(\" \")[0])\n    R = int(stdin.split(\" \")[2])\n    a = n * (n + 1) // 2\n    return str(a * (R - L + 1))\n\ndef"
    },
    {
        "number": 4202,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    L, R = map(int, stdin.split())\n    x = (L + R) // 2\n    res = 0\n    for i in range(1, m + 1):\n        res += pow(x, i)\n        res %= 2019\n    return str(res)\n\nExample:\n\nInput:\n2040\n\nOutput:\n2\n\nExplanation:\n\nL = 2020, R = 2040\ni = 1, j = 2\ni, j = i + 2, j + 2 = 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16\nTherefore, (i \\times j) = 2.\n\nA recursive solution works as following:\n\ndef"
    },
    {
        "number": 4203,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = list(stdin)\n    if s[0] in [\"A\", \"C\"]:\n        s[0] = \"A\"\n    else:\n        return \"WA\"\n    for i in range(len(s) - 2):\n        if s[i]!= s[i + 2]:\n            return \"WA\"\n    return \"AC\"\n\"\"\"\nclass Solution:\n    def isValid(self, s: str) -> bool:\n        dic = {\"A\": 0, \"C\": 0, \"G\": 0, \"T\": 0}\n        for i in range(len(s)):\n            if s[i] in \"ACGT\":\n                dic[s[i]] += 1\n        if len(s) % 2 == 1:\n            if \"G\" in dic.values():\n                return False\n            else:\n                return True\n        else:\n            return dic[\"A\"] + dic[\"C\"] + dic[\"G\"] + dic[\"T\"] == len(s) / 2\n\n    def isValid2(self, s: str) -> bool:\n        dic = {\"A\": 0, \"C\": 0, \"G\": 0, \"T\": 0}\n        for i in range(len(s)):\n            if s[i] in \"ACGT\":\n                dic[s[i]] += 1\n            else:\n                return False\n        if len(s) % 2 == 1:\n            if \"C\" in dic.values():\n                return False\n            else:\n                return True\n        else:\n            return dic[\"A\"] + dic[\"C\"] + dic[\"G\"] + dic[\"T\"] == len(s) / 2"
    },
    {
        "number": 4203,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n        \n        for _ in range(int(stdin)):\n            c = stdin.split()[1]\n            for i in range(3, len(c), 2):\n                print(i, c[i], c[i+1])\n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n"
    },
    {
        "number": 4203,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    a = a.upper()\n    b = b.upper()\n    if a == 'A' and b == 'C':\n        return 'WA'\n    elif a == 'A' and b == 'C':\n        return 'WA'\n    elif b == 'A' and a!= 'C':\n        return 'WA'\n    elif a == b:\n        return 'AC'\n    else:\n        return 'WA'\n"
    },
    {
        "number": 4203,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    st = list(stdin)\n    if st[0] == 'A':\n        return 'WA'\n    if st[0] == 'C':\n        return 'AC'\n    a, c, b = st.pop(0), st.pop(0), st.pop(0)\n    if a!= c:\n        return 'WA'\n    if len(st)!= 0:\n        return 'AC'\n    if len(st) == 0:\n        return 'WA'"
    },
    {
        "number": 4203,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = list(stdin)\n    ans = \"\"\n    for i in range(len(s)):\n        c = s[i].lower()\n        if c == \"a\":\n            ans += \"A\"\n        elif c == \"c\":\n            ans += \"C\"\n        elif c == \"g\":\n            ans += \"G\"\n        else:\n            ans += c\n    return ans\n\n\ndef"
    },
    {
        "number": 4203,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    str = input()\n    res = \"\"\n    for c in str:\n        if c == 'A':\n            res += c\n        elif c == 'C':\n            res += c\n        else:\n            res += c.lower()\n    return res\n\nTime limit exceeded\nRuntime: 32 ms\nMemory Usage: 14 MB\n\nclass Solution:\n    def backspaceCompare(self, S: str) -> bool:\n        \n        \n        str = S.split(\"\")\n        for i in str:\n            i = i[:-1]\n            if i == i[::-1]:\n                return True\n        return False"
    },
    {
        "number": 4203,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    answer = \"\"\n    \n    for _ in range(len(stdin)):\n        a = stdin[:3]\n        c = stdin[3:]\n        if a == \"A\":\n            if c.islower():\n                answer += \"A\"\n        elif c.islower():\n            answer += c.upper()\n        else:\n            answer += c.lower()\n    \n    return answer"
    },
    {
        "number": 4203,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s=list(stdin)\n    c=s[0]\n    count=0\n    for i in range(len(s)):\n        if(s[i].isupper() and s[i][1]!='A' and s[i][1]!='C'):\n            count+=1\n    if(count==len(s)):\n        return c\n    else:\n        return \"WA\"\n"
    },
    {
        "number": 4203,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    for _ in range(len(stdin)):\n        print(('A' in stdin[:len(stdin)-1]) and ('C' in stdin[:len(stdin)-1]))\n        print(('A' in stdin[len(stdin)-1]) and ('C' not in stdin[len(stdin)-1]))\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4203,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.readline().rstrip()\n    s = list(input)\n    if s[0].isupper() and len(s) == 3:\n        s[1] = 'A'\n        s[2] = 'C'\n    elif s[0].islower() and len(s) == 2:\n        s[1] = 'a'\n        s[2] = 'c'\n    elif len(s) == 4:\n        s[1] = 'A'\n        s[2] = 'C'\n    else:\n        return 'WA'\n    for i in range(3):\n        if s[i] == 'A':\n            s[i] = 'c'\n        elif s[i] == 'C':\n            s[i] = 'a'\n    ans = \"\"\n    for i in range(len(s) - 2, -1, -1):\n        ans += s[i] + s[i + 1]\n        if s[i + 1].islower() and s[i].islower():\n            ans += s[i]\n            if s[i + 1].isupper() and s[i].isupper():\n                ans += 'a'\n        elif s[i + 1].islower() and s[i].isupper():\n            ans += s[i]\n            if s[i + 1].isupper() and s[i].islower():\n                ans += 'c'\n        elif s[i + 1].islower() and s[i].islower():\n            ans += s[i]\n            if s[i + 1].isupper() and s[i].islower():\n                ans += 'a'\n        else:\n            ans += 'WA'\n    print(ans)\n\n-----Constraints-----\n - 3 \u2264 |S| \u2264 10 (|S| is the length of the string S.)\n - 1 \u2264 S[i].isupper() < S[i + 1].isupper() < S[i + 2].isupper()\n - each letter of S is uppercase or lowercase English letter.\n - All letters except the A and C mentioned above are lowercase.\n\n-----Time Complexity-----\n- O(n)\n- where n is the length of the string S\n- where n = len(S)\n- n = len(s)\n\n-----Space Complexity-----\n- O(1)\n- where n = len(S)\n- where n = len(s)\n\n-----Input Format-----\nThe first line contains an integer n, the number of strings S.\n\nThe next n lines contains S.\n\n-----Output Format-----\nPrint AC if all the conditions are met, and WA otherwise.\n\nSample Input\n3\nAC\nAa\nAa\nAa\n\nSample Output\nAC\nWA\n\n-----Sample Input-----\n5\nAA\nAA\nAA\nAA\nAa\n\n-----Sample Output-----\nAC\nWA"
    },
    {
        "number": 4204,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    S = stdin\n    if N > K:\n        N, K = K, N\n    for i in range(N, K):\n        print(S[i])"
    },
    {
        "number": 4204,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    K, S = map(int, stdin.split())\n    nums = list(range(1, K+1))\n    nums.sort(reverse=True)\n    for i in range(len(nums)):\n        temp = str(nums[i])\n        if S < int(temp):\n            return temp[1:]\n    return '0'\n"
    },
    {
        "number": 4204,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n  \n  string = stdin.split('\\n')\n  # print(string)\n  \n  # find start of string by 0 + K, then find end of string by (K + 1) -1\n  \n  start = 0\n  end = 0\n  for i in range(len(string)):\n    if i == 0:\n      start = len(string[i])\n      end = len(string[i]) + K\n    else:\n      if string[i][start] == '0':\n        start -= 1\n      end = len(string[i])\n      # print(string[i])\n      # print(string[i][start])\n      # print(start)\n      # print(end)\n      \n      if string[i][end] == '9':\n        start += 1\n        end -= 1\n        \n      # print(start)\n      # print(end)\n      # print(string[i][start:end])\n      \n      if string[i][end] == '2':\n        end += 1\n        \n        \n  # print(string[i][start:end])\n  return string[i][start:end]"
    },
    {
        "number": 4204,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[K]"
    },
    {
        "number": 4204,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.split()\n    K = int(S[-1])\n    N = len(S)\n    L = int(S[0])\n    c = S[1:-1]\n    return c[N//K - 1]\n"
    },
    {
        "number": 4204,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n    return stdin[:int(stdin[::-1])*15]\n    \n"
    },
    {
        "number": 4204,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # print(stdin)\n    # print(len(stdin))\n    # print(len(stdin[0]))\n    # print(stdin)\n    # print(len(stdin))\n    # print(stdin)\n    \n    start_index = 0\n    for i in range(len(stdin)):\n        start_index = start_index + 1\n        change = str(start_index) + str(i)\n        # print(change)\n        # print(change[:2] + \"-\" + change[2:4])\n        # print(change[:2] + \"-\" + change[2:6])\n        # print(change[:2] + \"-\" + change[2:8])\n        # print(change[:2] + \"-\" + change[2:10])\n        # print(change[:2] + \"-\" + change[2:14])\n        # print(change[:2] + \"-\" + change[2:16])\n        # print(change[:2] + \"-\" + change[2:18])\n        if len(change[:2])!= len(change[2:]) and change[:2]!= \"0\":\n            # print(\"change: \" + change[:2])\n            # print(change[:2] + \"-\" + change[2:4])\n            # print(change[:2] + \"-\" + change[2:6])\n            # print(change[:2] + \"-\" + change[2:8])\n            # print(change[:2] + \"-\" + change[2:10])\n            # print(change[:2] + \"-\" + change[2:14])\n            # print(change[:2] + \"-\" + change[2:16])\n            # print(change[:2] + \"-\" + change[2:18])\n            # print(change[:2] + \"-\" + change[2:19])\n            # print(change[:2] + \"-\" + change[2:20])\n            # print(change[:2] + \"-\" + change[2:21])\n            # print(change[:2] + \"-\" + change[2:22])\n            # print(change[:2] + \"-\" + change[2:23])\n            # print(change[:2] + \"-\" + change[2:24])\n            # print(change[:2] + \"-\" + change[2:25])\n            # print(change[:2] + \"-\" + change[2:26])\n            # print(change[:2] + \"-\" + change[2:27])\n            # print(change[:2] + \"-\" + change[2:28])\n            # print(change[:2] + \"-\" + change[2:29])\n            # print(change[:2] + \"-\" + change[2:30])\n            # print(change[:2] + \"-\" + change[2:31])\n            # print(change[:2] + \"-\" + change[2:32])\n            # print(change[:2] + \"-\" + change[2:33])\n            # print(change[:2] + \"-\" + change[2:34])\n            # print(change[:2] + \"-\" + change[2:35])\n            # print(change[:2] + \"-\" + change[2:36])\n            # print(change[:2] + \"-\" + change[2:37])\n            # print(change[:2] + \"-\" + change[2:38])\n            # print(change[:2] + \"-\" + change[2:39])\n            # print(change[:2] + \"-\" + change[2:40])\n            # print(change[:2] + \"-\" + change[2:41])\n            # print(change[:2] + \"-\" + change[2:42])\n            # print(change[:2] + \"-\" + change[2:43])\n            # print(change[:2] + \"-\" + change[2:44])\n            # print(change[:2] + \"-\" + change[2:45])\n            # print(change[:2] + \"-\" + change[2:46])\n            # print(change[:2] + \"-\" + change[2:47])\n            # print(change[:2] + \"-\" + change[2:48])\n            # print(change[:2] + \"-\" + change[2:49])\n            # print(change[:2] + \"-\" + change[2:50])\n            # print(change[:2] + \"-\" + change[2:51])\n            # print(change[:2] + \"-\" + change[2:52])\n            # print(change[:2] + \"-\" + change[2:53])\n            # print(change[:2] + \"-\" + change[2:54])\n            # print(change[:2] + \"-\" + change[2:55])\n            # print(change[:2] + \"-\" + change[2:56])\n            # print(change[:2] + \"-\" + change[2:57])\n            # print(change[:2] + \"-\" + change[2:58])\n            # print(change[:2] + \"-\" + change[2:59])\n            # print(change[:2] + \"-\" + change[2:60])\n            # print(change[:2] + \"-\" + change[2:61])\n            # print(change[:2] + \"-\" + change[2:62])\n            # print(change[:2] + \"-\" + change[2:63])\n            # print(change[:2] + \"-\" + change[2:64])\n            # print(change[:2] + \"-\" + change[2:65])\n            # print(change[:2] + \"-\" + change[2:66])\n            # print(change[:2] + \"-\" + change[2:67])\n            # print(change[:2] + \"-\" + change[2:68])\n            # print(change[:2] + \"-\" + change[2:69])\n            # print(change[:2] + \"-\" + change[2:70])\n            # print(change[:2] + \"-\" + change[2:71])\n            # print(change[:2] + \"-\" + change[2:72])\n            # print(change[:2] + \"-\" + change[2:73])\n            # print(change[:2] + \"-\" + change[2:74])\n            # print(change[:2] + \"-\" + change[2:75])\n            # print(change[:2] + \"-\" + change[2:76])\n            # print(change[:2] + \"-\" + change[2:77])\n            "
    },
    {
        "number": 4204,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    K, n, s = map(int, stdin.split())\n    n_longest = s\n    while n_longest >= K:\n        n_longest = n_longest[:-1]\n    s = s*(K-1) + n_longest\n    return chr(s)\n"
    },
    {
        "number": 4204,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin[0])\n    ans = ''\n    for i in range(K, 1, -1):\n        ans = ans + chr(ord('A') - 1 - i)\n    return ans\n\nRuntime: 76 ms, faster than 97.67% of Python3 online submissions for K-th Character in the String after 5 \\times 10^{15} days.\nMemory Usage: 15.3 MB, less than 65.47% of Python3 online submissions for K-th Character in the String after 5 \\times 10^{15} days.\n\"\"\"\n\nclass Solution:\n    def kthCharacter(self, S, K):\n        return S[K-1]"
    },
    {
        "number": 4204,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin.split(\"\\n\")[0].split(\" \")[-1])\n    res = ''\n    for i in range(K):\n        res += stdin.split(\"\\n\")[i+1].split(\" \")[0]\n    return res\n"
    },
    {
        "number": 4205,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    \n    if n == 0:\n        return \"\"\n    p = [int(x) for x in stdin.split()]\n    \n    dp = [[0] * (n) for _ in range(n)]\n    \n    # init\n    for i in range(n):\n        for j in range(i, n):\n            if p[i] > p[j]:\n                dp[i][j] = dp[i][j-1]\n            else:\n                dp[i][j] = dp[i][j-1] + p[j]\n    \n    # sort\n    for i in range(n):\n        for j in range(n-1, -1, -1):\n            if p[i] > p[j]:\n                p[i], p[j] = p[j], p[i]\n                dp[i][j] = dp[i][j+1]\n            else:\n                dp[i][j] = dp[i][j+1]\n    \n    # swap\n    for i in range(n):\n        for j in range(i, n):\n            if p[i] > p[j]:\n                p[i], p[j] = p[j], p[i]\n                dp[i][j] = dp[i][j-1] + p[j]\n            else:\n                dp[i][j] = dp[i][j-1] + p[j]\n                \n    # print\n    for i in range(n):\n        print(*p[i], sep=' ')\n    \n    return 'YES' if dp[0][n-1] == dp[-1][n-1] else 'NO'\n"
    },
    {
        "number": 4205,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    p = [int(i) for i in input().split()]\n    # print(p)\n    for i in range(n):\n        p[i] = sorted(p[i])\n    # print(p)\n    for i in range(n):\n        for j in range(i+1, n):\n            if p[i] == p[j]:\n                return 'YES'\n            p[i], p[j] = p[j], p[i]\n    return 'NO'\n\n1 2 3 4 5\n\n1 2 3 4 5\n\n2 3 4 5\n\n1 3 4 5\n\n2 3 4 5\n\n1 2 3 4 5\n\n2 3 4 5\n\n1 2 3 4 5\n\n2 3 4 5\n\n1 2 3 4 5\n\n2 3 4 5\n\n1 2 3 4 5\n\n2 3 4 5\n\n1 2 3 4 5\n\n2 3 4 5\n\n1 2 3 4 5\n\n2 3 4 5\n\n1 2 3 4 5\n\n2 3 4 5\n\n1 2 3 4 5\n\n2 3 4 5\n\n1 2 3 4 5\n\n2 3 4 5\n\n1 2 3 4 5\n\n2 3 4 5\n\n1 2 3 4 5\n\n2 3 4 5\n\n1 2 3 4 5\n\n2 3 4 5\n\n1 2 3 4 5\n\n2 3 4 5\n\n1 2 3 4 5\n\n2 3 4 5\n\n1 2 3 4 5\n\n2 3 4 5\n\n1 2 3 4 5\n\n2 3 4 5\n\n1 2 3 4 5\n\n2 3 4 5\n\n1 2 3 4 5\n\n2 3 4 5\n\n1 2 3 4 5\n\n2 3 4 5\n\n1 2 3 4 5\n\n2 3 4 5\n\n1 2 3 4 5\n\n2 3 4 5\n\n1 2 3 4 5\n\n2 3 4 5\n\n1 2 3 4 5\n\n2 3 4 5\n\n1 2 3 4 5\n\n2 3 4 5\n\n1 2 3 4 5\n\n2 3 4 5\n\n1 2 3 4 5\n\n2 3 4 5\n\n1 2 3 4 5\n\n2 3 4 5\n\n1 2 3 4 5\n\n2 3 4 5\n\n1 2 3 4 5\n\n2 3 4 5\n\n1 2 3 4 5\n\n2 3 4 5\n\n1 2 3 4 5\n\n2 3 4 5\n\n1 2 3 4 5\n\n2 3 4 5\n\n1 2 3 4 5\n\n2 3 4 5\n\n1 2 3 4 5\n\n2 3 4 5\n\n1 2 3 4 5\n\n2 3 4 5\n\n1 2 3 4 5\n\n2 3 4 5\n\n1 2 3 4 5\n\n2 3 4 5\n\n1 2 3 4 5\n\n2 3 4 5\n\n1 2 3 4 5\n\n2 3 4 5\n\n1 2 3 4 5\n\n2 3 4 5\n\n1 2 3 4 5\n\n2 3 4 5\n\n1 2 3 4 5\n\n2 3 4 5\n\n1 2 3 4 5\n\n2 3 4 5\n\n1 2 3 4 5\n\n2 3 4 5\n\n1 2 3 4 5\n\n2 3 4 5\n\n1 2 3 4 5\n\n2 3 4 5\n\n1 2 3 4 5\n\n2 3 4 5\n\n1 2 3 4 5\n\n2 3 4 5\n\n1 2 3 4 5\n\n2 3 4 5\n\n1 2 3 4 5\n\n2 3 4 5\n\n1 2 3 4 5\n\n2 3 4 5\n\n1 2 3 4 5\n\n2 3 4 5\n\n1 2 3 4 5\n\n2 3 4 5\n\n1 2 3 4 5\n\n2 3 4 5\n\n1 2 3 4 5\n\n2 3 4 5\n\n1 2 3 4 5\n\n2 3 4 5\n\n1 2 3 4 5\n\n2 3 4 5\n\n1 2 3 4 5\n\n2 3 4 5\n\n1 2 3 4 5\n\n2 3 4 5\n\n1 2 3 4 5\n\n2 3 4 5\n\n1 2 3 4 5\n\n2 3 4 5\n\n1 2 3 4 5\n\n2 3 4 5\n\n1 2 3 4 5\n\n2 3 4 5\n\n1 2 3 4 5\n\n2 3 4 5\n\n1 2 3 4 5\n\n2 3 4 5\n\n1 2 3 4 5\n\n2 3 4 5\n\n1 2 3 4 5\n\n2 3 4 5\n\n1 2 3 4 5\n\n2 3 4 5\n\n1 2 3 4 5\n\n2 3 4 5\n\n1 2 3 4 5\n\n2 3 4 5\n\n1 2 3 4 5\n\n2 3 4 5\n\n1 2 3 4 5\n\n2 3 4 5\n\n1 2 3 4 5\n\n2 3 4 5\n\n1 2 3 4 5\n\n2 3 4 5\n\n1 2 3 4 5\n\n2 3 4 5\n\n1 2 3 4 5\n\n2 3 4 5\n\n1 2 3 4 5\n\n2 3 4 5\n\n1 2 3 4 5\n\n2 3 4 5\n\n1 2 3 4 5\n\n2 3 4 5\n\n1 2 3 4 5\n\n2 3 4 5\n\n1 2 3 4 5\n\n2 3 4 5\n\n1 2 3 4 5\n\n2 3 4 5\n\n1 2 3 4 5\n\n2 3 4 5\n\n1 2 3 4 5\n\n2 3 4 5\n\n1 2 3 4 5\n\n2 3 4 5\n\n1 2 3 4 5\n\n2 3 4 5\n\n1 2 3 4 5\n\n2 3 4 5\n\n1 2 3 4 5\n\n2 3 4 5\n\n1 2 3 4 5\n\n2 3 4 5\n\n1 2 3 4 5\n\n2 3 4 5\n\n1 2 3 4 5\n\n2 3 4 5\n\n1 2 3 4 5\n\n2 3 4 5\n\n1 2 3 4 5\n\n2 3 4 5\n\n1 2 3 4 5\n\n2 3 4 5\n\n1 2 3 4 5\n\n2 3 4 5\n\n1 2 3 4 5\n\n2 3 4 5\n\n1 2 3 4 5\n\n2 3 4 5\n\n1 2 3 4 5\n\n2 3 4 5\n\n1 2 3 4 5\n\n2 3 4 5\n\n1 2 3 4 5\n\n2 3 4 5\n\n1 2 3 4 5\n\n2 3 4 5\n\n1 2 3 4 5\n\n2 3 4 5\n\n1 2 3 4 5\n\n2 3 4 5\n\n1 2 3 4 5\n\n2 3 4 5\n\n1 2 3 4 5\n\n2 3 4 5\n\n1 2 3 4 5\n\n2 3 4 5\n\n1 2 3 4 5\n\n2 3 4 5\n\n1 2 3 4 5\n\n2 3 4 5\n\n1 2 3 4 5\n\n2 3 4 5\n\n1 2 3 4 5\n\n2 3 4 5\n\n1 2 3 4 5\n\n2 3 4 5\n\n1 2 3 4 5\n\n2 3 4 5\n\n1 2 3 4 5\n\n2 3 4 5\n\n1 2 3 4 5\n\n2 3 4 5\n\n1 2 3 4 5\n\n2 3 4 5\n\n1 2 3 4 5\n\n2 3 4 5\n\n1 2 3 4 5\n\n2 3 4 5\n\n1 2 3 4 5\n\n2 3 4 5\n\n1 2 3 4 5\n\n2 3 4 5\n\n1 2 3 4 5\n\n2 3 4 5\n\n1 2 3 4 5\n\n2 3 4 5\n\n1 2 3 4 5\n\n2 3 4 5\n\n1 2 3 4 5\n\n2 3 4 5\n\n1 2 3 4 5\n\n2 3 4 5\n\n1 2 3 4 5"
    },
    {
        "number": 4205,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    p = list(map(int, stdin.split()))\n    p.sort()\n    return 'YES' if p[0]*p[-1] > p[0]*p[1] and p[-1]*p[-2] > p[-1]*p[-3] and p[1]*p[-2] > p[1]*p[-3] else 'NO'"
    },
    {
        "number": 4205,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    p = list(map(int, stdin.split()))\n    p.sort()\n    \n    for i in range(len(p)):\n        if i == 0:\n            continue\n        if p[i-1]!= p[i]:\n            return 'NO'\n    \n    return 'YES'\n\nTEST CASE 1\nInput:\n6 2 3 4 1\nOutput:\nYES\n\nTEST CASE 2\nInput:\n5\n5 2 3 4 1\nOutput:\nNO\n'''"
    },
    {
        "number": 4205,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    p = permutation([A, B, C])\n    n = len(p)\n    for i in range(n-1):\n        for j in range(n-i-1):\n            if p[j] > p[j+1]:\n                p[j], p[j+1] = p[j+1], p[j]\n    return \"YES\" if sorted(p) == p else \"NO\"\n"
    },
    {
        "number": 4205,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # arr = list(map(int, stdin.split()))\n    # arr = sorted(arr)\n    # return ''.join(arr)\n    pass\n\n1. Counting the number of odd digits in the number and converting it into string.\n2. Put the digits into the back of the string.\n3. Taking the last digit from the back of the string.\n4. If the last digit is odd, decrement by 1.\n5. If it is even, increment by 1.\n6. Compare the result with the solution."
    },
    {
        "number": 4205,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    p = list(map(int, stdin.split()))\n    p.sort()\n    p = \"\".join(map(str, p))\n    if p == p[::-1]:\n        return \"YES\"\n    return \"NO\"\n\n\nA = list(map(int, input().split()))\nprint(solution(A))\n"
    },
    {
        "number": 4205,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    p_1 = []\n    p_2 = []\n    p_3 = []\n    p_4 = []\n    p_5 = []\n    N = int(stdin.strip())\n    for _ in range(N):\n        num = int(stdin.strip())\n        if num % 2 == 0:\n            p_1.append(num)\n        else:\n            p_2.append(num)\n    p_1.sort()\n    p_2.sort()\n    p_1 = p_1[::-1]\n    p_2 = p_2[::-1]\n    if p_1[0]!= p_2[0] or p_3[0]!= p_4[0]:\n        return 'NO'\n    p_1 = [p_1[0]]\n    p_3 = p_3[::-1]\n    p_4 = p_4[::-1]\n    for i in range(1, len(p_1)):\n        if p_1[i]!= p_2[i] or p_3[i]!= p_4[i]:\n            return 'NO'\n    return 'YES'\n\nprint(solution(\"5 2 3 4 1\"))\n"
    },
    {
        "number": 4205,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    p_list = []\n    for p in stdin:\n        p_list.append(p)\n    \n    p_list.sort(reverse=True)\n\n    answer = ''\n    for p in p_list:\n        answer += p +''\n    \n    return answer[:-1]"
    },
    {
        "number": 4205,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def rec(N, p):\n        # If p is already in the right side of the permutation, no need to swap\n        if N == p.index(1):\n            return\n        \n        # Choose pairs (i,j) from p\n        for i, j in enumerate(p):\n            if j!= p[i]:\n                p[i], p[j] = p[j], p[i]\n                rec(N, p)\n                p[i], p[j] = p[j], p[i]\n        \n    N, p = map(int, stdin.split())\n    rec(N, p)\n    return \"YES\" if sorted(p) else \"NO\"\n\"\"\"\n\ndef"
    },
    {
        "number": 4206,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def remove_zero(i):\n        return ''.join([str(x) for x in list(set(str(i)) - set(['0']))])\n\n    def get_cuts(l, r):\n        cuts = []\n        n = len(l)\n        for i in range(0, n):\n            if l[i] == r[i]:\n                cuts.append(l[i])\n            elif l[i] > r[i]:\n                cuts.append(r[i])\n            else:\n                cuts.append(l[i])\n        return [remove_zero(c) for c in sorted(list(set(cuts) - set(['0'])))]\n    for i in range(int(stdin)):\n        l, r = map(int, stdin.split())\n        cuts = get_cuts(l, r)\n        print(len(cuts))\n        if len(cuts) == 1:\n            print(l, end='')\n        else:\n            print(l+r, end='')\n    return 0\n"
    },
    {
        "number": 4206,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    numbers = stdin.split('\\n')\n    return str(len(set([int(s) for s in numbers if s.isdigit()])))"
    },
    {
        "number": 4206,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = int(stdin)\n    # a = s-1\n    # b = s-s\n    #\n    # while a>=0:\n    #     if a%3==0:\n    #         a -=1\n    #     else:\n    #         return \"No\"\n    #\n    # while b>=0:\n    #     if b%3==0:\n    #         b -=1\n    #     else:\n    #         return \"No\"\n    #\n    # while a>=0 and b>=0:\n    #     if a%3==0 or b%3==0:\n    #         return \"No\"\n    #\n    #     a -=1\n    #     b -=1\n    # return \"Yes\"\n    \n    # see the solution in pygadgets/tests.py\n    count = 0\n    a = s-1\n    b = s-s\n    \n    while a>=0:\n        if a%3==0:\n            count += 1\n        a -=1\n    \n    while b>=0:\n        if b%3==0:\n            count += 1\n        b -=1\n    \n    return str(count)\n\ndef"
    },
    {
        "number": 4206,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin\n    N = int(S)\n    nums = N//3\n    N = N % 3\n    if N==0:\n        return \"1\"\n    if N == 1:\n        return \"0\"\n    res = N*3\n    return str(res)\n\n\n\ndef"
    },
    {
        "number": 4206,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    p = [i for i in range(10)]\n    cuts = []\n    for i in range(N):\n        cuts.append(int(str(p[i])+str(p[i+1])+str(p[i+2])))\n    return str(max(cuts))\n\ndef"
    },
    {
        "number": 4206,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n        result = 0\n        for line in stdin:\n            if int(line) % 3 == 0:\n                result += 1\n        return str(result)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4206,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    m, n, s = list(map(int, stdin.split()))\n    if n % 3!= 0:\n        return str(n)\n    cuts = n // 3\n    return str(s - (cuts * 3)) + \"|\" + str(s + (3 * (cuts - 1)))\n\n\n\n###############  6 ###############################\n###############  6  ##############################\n###############  7 ###############################\n###############  7  ##############################\n###############  8 ###############################\n###############  8  ##############################\n###############  9 ###############################\n###############  9  ##############################\n###############  10 ###############################\n###############  10  ##############################\n###########################  11 ###############################\n###########################  11  ##############################\n###########################  12 ###############################\n###########################  12  ##############################\n###########################  13 ###############################\n###########################  13  ##############################\n###########################  14 ###############################\n###########################  14  ##############################\n###########################  15 ###############################\n###########################  15  ##############################\n###########################  16 ###############################\n###########################  16  ##############################\n###########################  17 ###############################\n###########################  17  ##############################\n###########################  18 ###############################\n###########################  18  ##############################\n###########################  19 ###############################\n###########################  19  ##############################\n###########################  20 ###############################\n###########################  20  ##############################\n###########################  21 ###############################\n###########################  21  ##############################\n###########################  22 ###############################\n###########################  22  ##############################\n###########################  23 ###############################\n###########################  23  ##############################\n###########################  24 ###############################\n###########################  24  ##############################\n###########################  25 ###############################\n###########################  25  ##############################\n###########################  26 ###############################\n###########################  26  ##############################\n###########################  27 ###############################\n###########################  27  ##############################\n###########################  28 ###############################\n###########################  28  ##############################\n###########################  29 ###############################\n###########################  29  ##############################\n###########################  30 ###############################\n###########################  30  ##############################\n###########################  31 ###############################\n###########################  31  ##############################\n###########################  32 ###############################\n###########################  32  ##############################\n###########################  33 ###############################\n###########################  33  ##############################\n###########################  34 ###############################\n###########################  34  ##############################\n###########################  35 ###############################\n###########################  35  ##############################\n###########################  36 ###############################\n###########################  36  ##############################\n###########################  37 ###############################\n###########################  37  ##############################\n###########################  38 ###############################\n###########################  38  ##############################\n###########################  39 ###############################\n###########################  39  ##############################\n###########################  40 ###############################\n###########################  40  ##############################\n###########################  41 ###############################\n###########################  41  ##############################\n###########################  42 ###############################\n###########################  42  ##############################\n###########################  43 ###############################\n###########################  43  ##############################\n###########################  44 ###############################\n###########################  44  ##############################\n###########################  45 ###############################\n###########################  45  ##############################\n###########################  46 ###############################\n###########################  46  ##############################\n###########################  47 ###############################\n###########################  47  ##############################\n###########################  48 ###############################\n###########################  48  ##############################\n###########################  49 ###############################\n###########################  49  ##############################\n###########################  50 ###############################\n###########################  50  ##############################\n###########################  51 ###############################\n###########################  51  ##############################\n###########################  52 ###############################\n###########################  52  ##############################\n###########################  53 ###############################\n###########################  54 ###############################\n###########################  55 ###############################\n###########################  56 ###############################\n###########################  57 ###############################\n###########################  58 ###############################\n###########################  59 ###############################\n###########################  60 ###############################\n###########################  61 ###############################\n###########################  62 ###############################\n###########################  63 ###############################\n###########################  64 ###############################\n###########################  65 ###############################\n###########################  66 ###############################\n###########################  67 ###############################\n###########################  68 ###############################\n###########################  69 ###############################\n###########################  70 ###############################\n###########################  71 ###############################\n###########################  72 ###############################\n###########################  73 ###############################\n###########################  74 ###############################\n###########################  75 ###############################\n###########################  76 ###############################\n###########################  77 ###############################\n###########################  78 ###############################\n###########################  79 ###############################\n###########################  80 ###############################\n###########################  81 ###############################\n###########################  82 ###############################\n###########################  83 ###############################\n###########################  84 "
    },
    {
        "number": 4206,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = list(map(int, stdin.split()))\n    n = len(s)\n    p = 0\n    q = 1\n    for i in range(n):\n        if s[i] % 3 == 0:\n            if q > p:\n                p = q\n                q = 1\n            else:\n                q = 1\n        elif s[i] % 3 == 1:\n            if q > p:\n                p = q\n                q = 1\n            else:\n                q = 1\n        else:\n            q = 1\n    return str(p) + str(q)\n\n-----Examples-----\nInput\n3\n\nOutput\n3\n\nInput\n1\n\nOutput\n1\n\n\n-----Note-----\n\nThe number 7 follows the rule that the digits $1$ and $7$ must be zero, and the number $0$ is an invalid number. For example, in the first example, $3|1|21$ is the only valid number in the example, because the number $3|1|21$ is a zero-extension of the number $1$, $0$, and $21$, which is the only valid number.\n\nThe number 7 follows the rule that the digits $1$ and $7$ are different, and the number $0$ is an invalid number. In this example, the number $0$ is a zero-extension of the number $1$, $1$, and $0$, which is the only valid number.\n\nThe number $3|1|21$ follows the rule that the digits $1$ and $7$ are identical, and the number $0$ is an invalid number.\n\nThe number $3|1|21$ follows the rule that the digits $1$ and $7$ are not identical, and the number $0$ is an invalid number.\n\nThe number $3|1|21$ follows the rule that the digits $1$ and $7$ are identical, and the number $0$ is an invalid number.\n\nThe number $3|1|21$ follows the rule that the digits $1$ and $7$ are different, and the number $0$ is an invalid number.\n\nThe number $3|1|21$ follows the rule that the digits $1$ and $7$ are different, and the number $0$ is an invalid number.\n\nThe number $3|1|21$ follows the rule that the digits $1$ and $7$ are identical, and the number $0$ is an invalid number.\n\nThe number $3|1|21$ follows the rule that the digits $1$ and $7$ are identical, and the number $0$ is an invalid number.\n\nThe number $3|1|21$ follows the rule that the digits $1$ and $7$ are different, and the number $0$ is an invalid number.\n\nThe number $3|1|21$ follows the rule that the digits $1$ and $7$ are identical, and the number $0$ is an invalid number.\n\nThe number $3|1|21$ follows the rule that the digits $1$ and $7$ are not identical, and the number $0$ is an invalid number.\n\nThe number $3|1|21$ follows the rule that the digits $1$ and $7$ are identical, and the number $0$ is an invalid number.\n\nThe number $3|1|21$ follows the rule that the digits $1$ and $7$ are not identical, and the number $0$ is an invalid number.\n\nInput\n1000000000000000000000000000000000\n\nOutput\n1\n\n\n-----Note-----\n\nThe number 1 follows the rule that the digits $1$ and $7$ are not identical.\n\nThe number $1$ follows the rule that the digits $1$ and $7$ are not identical.\n\nThe number $1$ follows the rule that the digits $1$ and $7$ are identical.\n\nThe number $1$ follows the rule that the digits $1$ and $7$ are identical.\n\nThe number $1$ follows the rule that the digits $1$ and $7$ are not identical.\n\nThe number $1$ follows the rule that the digits $1$ and $7$ are identical.\n\nThe number $1$ follows the rule that the digits $1$ and $7$ are not identical.\n\nThe number $1$ follows the rule that the digits $1$ and $7$ are identical.\n\nThe number $1$ follows the rule that the digits $1$ and $7$ are not identical.\n\nThe number $1$ follows the rule that the digits $1$ and $7$ are identical.\n\nThe number $1$ follows the rule that the digits $1$ and $7$ are not identical.\n\nThe number $1$ follows the rule that the digits $1$ and $7$ are identical.\n\nThe number $1$ follows the rule that the digits $1$ and $7$ are not identical.\n\nThe number $1$ follows the rule that the digits $1$ and $7$ are identical.\n\nThe number $1$ follows the rule that the digits $1$ and $7$ are not identical.\n\nThe number $1$ follows the rule that the digits $1$ and $7$ are identical.\n\nThe number $1$ follows the rule that the digits $1$ and $7$ are not identical.\n\nThe number $1$ follows the rule that the digits $1$ and $7$ are identical.\n\nThe number $1$ follows the rule that the digits $1$ and $7$ are not identical.\n\nThe number $1$ follows the rule that the digits $1$ and $7$ are identical.\n\nThe number $1$ follows the rule that the digits $1$ and $7$ are not identical.\n\nThe number $1$ follows the rule that the digits $1$ and $7$ are identical.\n\nThe number $1$ follows the rule that the digits $1$ and $7$ are not identical.\n\nThe number $1$ follows the rule that the digits $1$ and $7$ are identical.\n\nThe number $1$ follows the rule that the digits $1$ and $7$ are not identical.\n\nThe number $1$ follows the rule that the digits $1$ and $7$ are identical.\n\nThe number $1$ follows the rule that the digits $1$ and $7$ are not identical.\n\nThe number $1$ follows the rule that the digits $1$ and $"
    },
    {
        "number": 4206,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.rstrip())\n    cuts = [n]\n    \n    while n >= 2:\n        num = n % 10\n        n //= 10\n        cuts.append(num)\n        if num!= 0:\n            cuts.append(num)\n            n -= 1\n    \n    result = \"\"\n    for i in range(len(cuts)):\n        result += str(len(cuts) - i) + \"|\" + str(cuts[i])\n    \n    return result.rstrip()\n    \n\ndef"
    },
    {
        "number": 4206,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # code here\n    # test cases\n    # ex) 3121\n    #     return \"5\"\n    # ex) 6\n    #     return \"6\"\n    return str(int(stdin[:len(stdin)-1]) + int(stdin[len(stdin)-1]) % 10)\n\nsolution(\"0\")\nsolution(\"1\")\nsolution(\"1000000000000000000000000000000000\")"
    },
    {
        "number": 4207,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return solution_primes_d(stdin, int(stdin.split(' ')[0]), int(stdin.split(' ')[1]))\n\ndef"
    },
    {
        "number": 4207,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin.strip())\n    \n    c = [int(i) for i in stdin.split()]\n    \n    if n < 0:\n        return str(0)\n    elif n == 0:\n        return str(0)\n    elif n == 1:\n        return \"0\"\n    \n    elif n < 2:\n        return \"0\"\n    elif n < n*n:\n        return str(c[0])\n    \n    else:\n        result = 1\n        \n        for i in range(1, n):\n            result = result * (n-i)\n            result = result + c[i]\n            \n        return str(result)\n"
    },
    {
        "number": 4207,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    c = list(map(int, stdin.split()))\n    d = int(stdin.split()[1])\n    c.sort()\n    if d < 0:\n        d = -d\n        c.append(d)\n    c.sort()\n    a = c[0]\n    b = c[-1]\n    ans = 0\n    i = 0\n    while i < n:\n        if a <= a <= b or a <= b <= b:\n            i += 1\n            ans += 1\n            a += 1\n        elif a > b:\n            break\n        elif a < b:\n            a += d\n        else:\n            b += d\n    print(ans)\n    \n"
    },
    {
        "number": 4207,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    result = 0\n    for i in range(n):\n        result += min(a[i], b[i])\n    return str(result)\n\n-----Submissions-----\n1\n58\n\n3\n3\n\n5\n-1\n\n2\n\n-----Notes-----\n\"\"\""
    },
    {
        "number": 4207,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    a = sorted(map(int, a.split()))\n    b = sorted(map(int, b.split()))\n    \n    c = [0] * (n+1)\n    c[0] = 0\n    \n    for i in range(1, n+1):\n        c[i] = (c[i-1] + a[i-1] + b[i-1]) % 10007\n    \n    return str(max(c))\n\n\nprint(solution(stdin))\n        \n"
    },
    {
        "number": 4207,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a,b = map(int,stdin.strip().split())\n    c = [x+b for x in a]\n    print(max(map(lambda x: sum([x==0,x%2==0]),c)))\n    return '0'\n\nprint(solution(input()))"
    },
    {
        "number": 4207,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    c = [0] * n\n    for i in range(n):\n        c[i] = int(stdin.split()[i])\n    d = int(stdin)\n    if abs(d) < abs(c[0] - c[1]):\n        d = abs(c[0] - c[1])\n    for i in range(n):\n        if d!= 0:\n            if c[i] == 0:\n                c[i] = int(stdin.split()[i])\n                if c[i] > 0:\n                    d = -d\n                else:\n                    d = -d\n            elif c[i] == 1:\n                c[i] = int(stdin.split()[i])\n                if c[i] > 0:\n                    d = -d\n                else:\n                    d = -d\n            else:\n                for j in range(n):\n                    if c[j]!= 0 and c[j]!= c[i]:\n                        if c[j] > 0:\n                            d = -d\n                        else:\n                            d = -d\n                        break\n                if d!= 0:\n                    c[i] = int(stdin.split()[i])\n                    if c[i] > 0:\n                        d = -d\n                    else:\n                        d = -d\n        else:\n            if c[i] == 0:\n                c[i] = int(stdin.split()[i])\n                d = -d\n    if d!= 0:\n        return str(d)\n    else:\n        return str(max(c))\n\nprint(solution(\"3 2\"))\nprint(solution(\"4\"))\nprint(solution(\"7\"))\nprint(solution(\"-3 2\"))\nprint(solution(\"-7\"))\nprint(solution(\"0\"))\nprint(solution(\"0 0 0\"))\nprint(solution(\"0 0 0 0\"))\nprint(solution(\"0 0 0 0 0\"))\nprint(solution(\"0 0 0 0 0 0\"))\nprint(solution(\"-0 0 0 0\"))\nprint(solution(\"-1 0 0 0\"))\nprint(solution(\"0 0 0 0 0\"))\nprint(solution(\"0 0 0 0 0 0\"))\nprint(solution(\"-0 0 0 0 0\"))\nprint(solution(\"0 0 0 0 0 0\"))\nprint(solution(\"-3 0 0 0 0\"))\nprint(solution(\"-3 0 0 0 0 0\"))\nprint(solution(\"0 0 0 0 0 0\"))\nprint(solution(\"0 0 0 0 0 0 0\"))\nprint(solution(\"-1 0 0 0 0\"))\nprint(solution(\"0 0 0 0 0 0 0\"))\n"
    },
    {
        "number": 4207,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin)\n    c = []\n    c.extend([i for i in range(1, n+1)])\n    for i in range(1, n):\n        c.extend([i*j for j in range(1, n+1)])\n    c.extend([i for i in range(1, n+1)])\n    for i in range(1, n):\n        c.extend([i*j for j in range(1, n+1)])\n    \n    answer = 0\n    for i in range(1, n):\n        a[i] = int(a[i])\n        if a[i] == 0:\n            answer = i+1\n            break\n    return str(answer)\n\n## Question:\n## Write a function that returns the maximum number of zeros in array $c$ with either $d = -2$ or $d = -\\frac{1}{13}$. You are given $c$ as a string.\n\n## -----Input-----"
    },
    {
        "number": 4207,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    c = []\n    for i in range(n):\n        c.append(a[i] + b[i])\n    return str(max(c))\n\ndef"
    },
    {
        "number": 4207,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, d = map(int, stdin.split())\n    a = [int(stdin[i + 1]) for i in range(n)]\n    b = [int(stdin[i + 2]) for i in range(n)]\n    z = 0\n    for i in range(1, n):\n        if d < 0:\n            break\n        d -= b[i]\n        if d < 0:\n            z += a[i]\n    return str(z)\n\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= d <= 10^5\n\n\"\"\""
    },
    {
        "number": 4208,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    stds = [\n        (map(int, stdin.split()), map(int, stdin.split()))\n        for _ in range(int(stdin))\n    ]\n\n    left_boot_cnt = 0\n    right_boot_cnt = 0\n\n    for std in stds:\n        l, r = std\n        \n        if l > right_boot_cnt:\n            right_boot_cnt = l\n        \n        if r > left_boot_cnt:\n            left_boot_cnt = r\n        \n        if l == right_boot_cnt:\n            left_boot_cnt = left_boot_cnt + 1\n            right_boot_cnt = right_boot_cnt + 1\n            \n    \n    return str(left_boot_cnt * right_boot_cnt)\n"
    },
    {
        "number": 4208,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    from itertools import product\n    def parse(s: str) -> tuple[list[str], list[str]]:\n        l = [ch for ch in s if ch in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ']\n        r = [ch for ch in s if ch not in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ']\n        return l, r\n    \n    k = 0\n    for i in range(1, 1000000):\n        l, r = parse(str(i))\n        if len(l) == len(r):\n            k = max(k, len(l))\n    return f'{k} {k//len(l)}'\n"
    },
    {
        "number": 4208,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, l, r = map(int, stdin.split())\n    left = [l]\n    right = [r]\n    res = []\n    while left or right:\n        r = r % N\n        if r == 0:\n            return res\n        if r > N:\n            break\n        if right:\n            l = left[-1]\n            right = right[:-1]\n            left.append(l)\n        else:\n            l = left[-1]\n            right = right[:-1]\n            left.append(l)\n        res.append(l)\n    return''.join(res)\n\ndef"
    },
    {
        "number": 4208,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, l, r = map(int, stdin.split())\n    l_right, r_right = set(), set()\n    for i in range(n):\n        left, right = map(str, stdin.split())\n        for c in left:\n            if c in l_right:\n                l_right.remove(c)\n            else:\n                l_right.add(c)\n        for c in right:\n            if c in r_right:\n                r_right.remove(c)\n            else:\n                r_right.add(c)\n    k = len(l_right)\n    res = []\n    res.extend(list(set([k, len(l_right) + len(r_right)])))\n    for i in range(l, r + 1):\n        if i not in l_right and i not in r_right:\n            res.append(i)\n    return ','.join(str(i) for i in res)"
    },
    {
        "number": 4208,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip().split('\\n')[0])\n    l = input().strip().split('?')\n    r = input().strip().split('?')\n    colors = ['f', 'z', 'a', '?']\n    i = 0\n    while i < len(l) and i < len(r):\n        j = 0\n        while j < len(l) and j < len(r):\n            color = l[i]\n            if color == r[j]:\n                i += 1\n                j += 1\n                continue\n            if color in colors:\n                print(str(j + 1) +'' + color)\n                j += 1\n            else:\n                break\n        if i == len(l) or j == len(r):\n            break\n        i += 1\n        j += 1\n    if i!= len(l) or j!= len(r):\n        print('NO')\n    else:\n        print(str(i) +'' + colors[i % len(colors)])\n    return '\\n'.join(str(i) for i in range(len(colors) - 1, 0, -1))\n"
    },
    {
        "number": 4208,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n\n    l_boot = stdin.strip().split('\\n')\n\n    right_boot = stdin.strip().split('\\n')\n\n    r_boot = stdin.strip().split('\\n')\n\n    l_boot_indices = [i for i in range(N)]\n    l_boot_colors = [l_boot[i].lower() for i in l_boot_indices]\n\n    r_boot_indices = [i for i in range(N)]\n    r_boot_colors = [r_boot[i].lower() for i in r_boot_indices]\n\n    l_boot_len = len(l_boot)\n    r_boot_len = len(r_boot)\n\n    print(l_boot_len)\n    print(r_boot_len)\n\n    # compare left-right\n    for l_i in l_boot_indices:\n        for r_i in r_boot_indices:\n            if l_boot[l_i].lower() == r_boot[r_i].lower():\n                continue\n            else:\n                if l_boot[l_i].lower() not in r_boot_colors:\n                    continue\n                else:\n                    if l_boot[l_i].lower() not in l_boot_colors:\n                        continue\n                    else:\n                        print(l_boot[l_i])\n                        print(r_boot[r_i])\n                        if l_boot[l_i].lower() not in l_boot_colors:\n                            continue\n                        else:\n                            print(l_boot[l_i].lower())\n                            print(r_boot[r_i].lower())\n                            if l_boot[l_i].lower() not in l_boot_colors:\n                                continue\n                            else:\n                                print(l_boot[l_i].lower())\n                                print(r_boot[r_i].lower())\n                                if l_boot[l_i].lower() not in l_boot_colors:\n                                    continue\n                                else:\n                                    print(l_boot[l_i].lower())\n                                    print(r_boot[r_i].lower())\n                                    if l_boot[l_i].lower() not in l_boot_colors:\n                                        continue\n                                    else:\n                                        print(l_boot[l_i].lower())\n                                        print(r_boot[r_i].lower())\n                                        if l_boot[l_i].lower() not in l_boot_colors:\n                                            continue\n                                        else:\n                                            print(l_boot[l_i].lower())\n                                            print(r_boot[r_i].lower())\n                                            if l_boot[l_i].lower() not in l_boot_colors:\n                                                continue\n                                            else:\n                                                print(l_boot[l_i].lower())\n                                                print(r_boot[r_i].lower())\n                                                print(l_boot[l_i].lower())\n                                                if l_boot[l_i].lower() not in l_boot_colors:\n                                                    continue\n                                                else:\n                                                    print(l_boot[l_i].lower())\n                                                    print(r_boot[r_i].lower())\n                                                    if l_boot[l_i].lower() not in l_boot_colors:\n                                                        continue\n                                                    else:\n                                                        print(l_boot[l_i].lower())\n                                                        print(r_boot[r_i].lower())\n                                                        if l_boot[l_i].lower() not in l_boot_colors:\n                                                            continue\n                                                        else:\n                                                            print(l_boot[l_i].lower())\n                                                            print(r_boot[r_i].lower())\n                                                            print(l_boot[l_i].lower())\n                                                            if l_boot[l_i].lower() not in l_boot_colors:\n                                                                continue\n                                                            else:\n                                                                print(l_boot[l_i].lower())\n                                                                print(r_boot[r_i].lower())\n                                                                if l_boot[l_i].lower() not in l_boot_colors:\n                                                                    continue\n                                                                else:\n                                                                    print(l_boot[l_i].lower())\n                                                                    print(r_boot[r_i].lower())\n                                                                    print(l_boot[l_i].lower())\n                                                                    if l_boot[l_i].lower() not in l_boot_colors:\n                                                                        continue\n                                                                else:\n                                                                    print(l_boot[l_i].lower())\n                                                                    print(r_boot[r_i].lower())\n                                                                    if l_boot[l_i].lower() not in l_boot_colors:\n                                                                        continue\n                                                                else"
    },
    {
        "number": 4208,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    lst = []\n    lst.append(lst[0])\n    lst.append(lst[1])\n    for i in range(n):\n        lst.append(lst[i] + lst[i + 1])\n    lst.sort()\n    for i in range(1, n - 1):\n        if lst[i]!= lst[i + 1]:\n            return '0'\n        else:\n            pass\n    return '1'\n        \n        \n"
    },
    {
        "number": 4208,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    l = stdin[1]\n    r = stdin[2]\n    a = []\n    b = []\n    for i in range(n):\n        a.append(l[i])\n        b.append(r[i])\n    b = list(set(b))\n    c = []\n    for i in range(1,n+1):\n        c.append(a[i-1]+b[i-1])\n    return c\n\n\n-----Basic Code-----\nN, L, R, k = map(int, input().split())\nprint(solution(input().split()))\n"
    },
    {
        "number": 4208,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, l, r = map(int, stdin.split())\n    \n    # for i in range(n-1):\n    #     temp = [0] * (l+1)\n    #     temp[i+1] = 1\n    #     temp[i] = 1\n    #     temp[i+l-1] = 1\n    #     temp[i+r-1] = 1\n    #     \n    #     if i % 2 == 0:\n    #         temp[i] = 1\n    #     else:\n    #         temp[i] = 0\n    #     \n    #     if sum(temp) == i + 1:\n    #         solution(temp)\n    #         continue\n    #     else:\n    #         print(i, sum(temp))\n    #         return\n    \n    left_boots = [0] * (l + 1)\n    right_boots = [0] * (r + 1)\n    \n    for i in range(n):\n        l_num = int(stdin[i])\n        r_num = int(stdin[i+l])\n        \n        if l_num == r_num:\n            continue\n        \n        left_boots[l_num] += 1\n        right_boots[r_num] += 1\n    \n    \n    l_index, r_index = 0, 0\n    \n    while l_index < len(left_boots) and r_index < len(right_boots):\n        if left_boots[l_index]!= right_boots[r_index]:\n            return 'NO'\n        \n        if left_boots[l_index] == right_boots[r_index]:\n            l_index += 1\n            r_index += 1\n        \n        elif left_boots[l_index] < right_boots[r_index]:\n            l_index += 1\n        else:\n            r_index += 1\n    \n    return 'YES'\n"
    },
    {
        "number": 4208,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    l = stdin.split(' ')\n    l = [list(map(lambda x: ord(x) - 64, x)) for x in l]\n    c = [set(list(map(lambda x: x*x, l))) for x in range(1, n+1)]\n    l.sort(reverse=True)\n    r = [set(list(map(lambda x: x*x, l))) for x in range(1, n+1)]\n    l.sort(reverse=True)\n    r.sort(reverse=True)\n    j = 0\n    pairs = 0\n    for i in range(n):\n        if c[j] == r[i]:\n            pairs += 1\n        j = (j + 1) % n\n    return pairs\n\n-----Constraints-----\n\n1 <= stdin.length <= 5 * 104\n0 <= stdin[i] <= 64\n\nExample 1:\n\nInput:\n10\ncodeforces\ndodivthree\n\nOutput:\n5\n6 5\n2 3\n4 6\n7 4\n1 2\n\nExample 2:\n\nInput:\n9\nabaca?b\nzabbbcc\n\nOutput:\n0\n\nExplanation:\nAll the number of left boots are distinct and all the number of right boots are distinct.\nThe maximum number of compatible pairs is $k$, $k$ consists of pairs consisting of one left and one right boot which have compatible colors.\n'''\nclass Solution:\n    def maxCompatible(self, l, r):\n        l.sort()\n        r.sort()\n        L, R = len(l), len(r)\n        if L > R:\n            return -1\n        l_in = 1\n        r_in = 1\n        j = 0\n        pairs = 0\n        while l_in <= R and l_in <= L:\n            if r[j] < l[l_in - 1]:\n                pairs += 1\n                l_in += 1\n            else:\n                if l_in > L:\n                    l_in = l_in - 1\n                    j = j + 1\n                else:\n                    l_in = l_in + 1\n                    j = 0\n        return pairs"
    },
    {
        "number": 4209,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin.strip().replace(' ', ''))\n\n    a = list(map(int, stdin.strip().replace(' ', '').split(' ')))\n    a.sort()\n\n    for i in range(0, n):\n        for j in range(i+1, n):\n            if a[j] - a[i] > 2:\n                print(j+1)\n                break\n    else:\n        print('error')\n    \n"
    },
    {
        "number": 4209,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin)\n    l, r = 0, 1\n    ans = 1\n    for i in range(n):\n        l += a[i]\n        r += a[i] + 1\n        ans = max(ans, r - l)\n    return str(ans)\n"
    },
    {
        "number": 4209,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.rstrip().decode())\n    a = list(map(int, stdin.rstrip().decode().split()))\n    l = 1\n    r = max(a)\n    ans = []\n    while l < r:\n        if a[l] + a[r] == l + r:\n            ans.append(l + r)\n            l += 1\n            r -= 1\n        elif a[l] + a[r] > l + r:\n            r -= 1\n        else:\n            l += 1\n    return str(len(ans)) + \" \" + str(ans)\n"
    },
    {
        "number": 4209,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n,a=map(int,stdin.split())\n    a=list(map(int,a.split()))\n    print(n)\n    print(*[i+j for i,j in zip(a[:-1:2],a[1::2])])"
    },
    {
        "number": 4209,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    print(a)\n    for i in range(1, n):\n        l = a[i]\n        r = a[i] + 1\n        if a[i - 1] <= r:\n            r = max(a[i - 1], r)\n        if a[i + 1] <= l:\n            l = max(a[i + 1], l)\n    print(l, r)\n    return str(l - r + 1)\n\ndef"
    },
    {
        "number": 4209,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    a = list(a)\n    a = sorted(a)\n    if a[0] == 0:\n        a = a[1:]\n    k = n // (len(a) + 1)\n    blocks = []\n    for i in range(n):\n        tmp = []\n        for j in range(k):\n            tmp.append(a[j * (i + 1)])\n        blocks.append(tmp)\n    return '\\n'.join(str(i) for i in blocks)\n\n\n-----Time complexity-----\n\nO(n)\n\nO(n^2)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)\n\nO(n^2)"
    },
    {
        "number": 4209,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin[0])\n    k = int(stdin[1])\n    print(k)\n    answer = []\n    \n    for _ in range(k):\n        answer.append(list(map(int, input().split())))\n    \n    for idx in range(n):\n        answer[idx][0] += answer[idx][1]\n        answer[idx][1] += answer[idx][2]\n        answer[idx][2] += answer[idx][3]\n        answer[idx][3] += answer[idx][4]\n    \n    for idx in range(n):\n        answer[idx][0] = answer[idx][0] // 2\n        answer[idx][1] = answer[idx][1] // 2\n        answer[idx][2] = answer[idx][2] // 2\n        answer[idx][3] = answer[idx][3] // 2\n        answer[idx][4] = answer[idx][4] // 2\n    \n    for idx in range(n):\n        answer[idx] = [answer[idx][0], answer[idx][1], answer[idx][2], answer[idx][3], answer[idx][4]]\n    \n    return \"\".join(map(str, answer))\n\"\"\"\n"
    },
    {
        "number": 4209,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    blocks = [list(map(int, map(int, a))) for _ in range(n)]\n    for i in range(n):\n        l = 0\n        r = i\n        while True:\n            if r > n-1 or a[r+1] - a[r] > 0:\n                break\n            l += 1\n            r += 1\n        for j in range(l, i+1):\n            blocks[j][i] = blocks[j][i] + blocks[j+1][i]\n        for j in range(i):\n            blocks[i][j] = blocks[i+1][j]\n        for j in range(i+1, n):\n            blocks[j][j] = blocks[j+1][j]\n    for block in blocks:\n        print(*block)\n    return str(len(set(blocks)))\n    \n\ndef"
    },
    {
        "number": 4209,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n < 2:\n        return \"0\"\n    a = []\n    a.extend(map(int, stdin.strip().split()))\n    k = 0\n    answer = \"\"\n    for i in range(n):\n        if k < n - 1:\n            answer += str(a[k])\n            k += 1\n        else:\n            answer += str(a[k]) + \" \"\n            k += 1\n    return answer[:-1]\n\n\n-----Test-----\n\n>>> solution(\"3 1 2 2 1 5 3\")\n'2 3'\n>>> solution(\"11 -5 -4 -3 -2 0 1 2 3 4 5\")\n'2 4'\n>>> solution(\"4 1 2 2 1 5 3\")\n'4 1 2 2 1 5 3'\n>>> solution(\"4 1 2 2 1 5 3\")\n'4 1 2 2 1 5 3'\n>>> solution(\"4 1 2 2 1 5 3\")\n'4 1 2 2 1 5 3'\n>>> solution(\"4 1 2 2 1 5 3\")\n'0 1 2 3 4'\n\n---------------------------------------------------------------------------------------------\n\nHint\n\n1. The first line of the input contains only the integer $n$ ($1 \\le n \\le 1500$). The second line contains the sequence of elements $a[1], a[2], \\dots, a[n]$ ($-10^5 \\le a_i \\le 10^5$).\n\n2. The first line of the output contains the integer $k$ ($1 \\le k \\le n$). The second line contains the sequence of indices $l_i, r_i$ ($1 \\le l_i \\le r_i \\le n$) \u2014 the bounds of the $i$-th block. You can print blocks in any order. If there are multiple answers, print any of them.\n\n3. Remember to add your own hints.\n\nSolution:\n\ndef"
    },
    {
        "number": 4209,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(stdin[i]) for i in range(n)]\n    a.sort()\n    k = 1\n    for i in range(n-2):\n        if a[i]!= a[i+1] and a[i]!= a[i+2] and a[i]!= a[i+3]:\n            k = 1\n        else:\n            k = 0\n        if k == 1:\n            break\n    for j in range(i+1,n):\n        if a[j]!= a[j-1] and a[j]!= a[j-2] and a[j]!= a[j-3] and a[j]!= a[j-4]:\n            k = 1\n        else:\n            k = 0\n        if k == 1:\n            break\n    if k == 0:\n        return '-'\n    if k == 1:\n        return str(a[-1])\n    if k == 2:\n        return '4 3'\n    if k == 3:\n        return '2 5'\n    if k == 4:\n        return '4 4'\n    if k == 5:\n        return '3 4'\n    if k == 6:\n        return str(a[-2])\n    if k == 7:\n        return str(a[-3])\n    if k == 8:\n        return str(a[-4])\n    if k == 9:\n        return '3 3'\n    if k == 10:\n        return '2 2'\n    if k == 11:\n        return str(a[-5])\n    if k == 12:\n        return str(a[-6])\n    if k == 13:\n        return '1 1'\n    if k == 14:\n        return str(a[-7])\n    if k == 15:\n        return str(a[-8])\n    if k == 16:\n        return str(a[-9])\n    if k == 17:\n        return '1 1'\n    if k == 18:\n        return str(a[-10])\n    if k == 19:\n        return '1 1'\n    if k == 20:\n        return str(a[-11])\n    if k == 21:\n        return '1 1'\n    if k == 22:\n        return str(a[-12])\n    if k == 23:\n        return '1 1'\n    if k == 24:\n        return str(a[-13])\n    if k == 25:\n        return '1 1'\n    if k == 26:\n        return '1 1'\n    if k == 27:\n        return '1 1'\n    if k == 28:\n        return str(a[-14])\n    if k == 29:\n        return '1 1'\n    if k == 30:\n        return '1 1'\n    if k == 31:\n        return '1 1'\n    if k == 32:\n        return '1 1'\n    if k == 33:\n        return str(a[-15])\n    if k == 34:\n        return '1 1'\n    if k == 35:\n        return '1 1'\n    if k == 36:\n        return '1 1'\n    if k == 37:\n        return str(a[-16])\n    if k == 38:\n        return '1 1'\n    if k == 39:\n        return '1 1'\n    if k == 40:\n        return '1 1'\n    if k == 41:\n        return '1 1'\n    if k == 42:\n        return '1 1'\n    if k == 43:\n        return str(a[-17])\n    if k == 44:\n        return '1 1'\n    if k == 45:\n        return '1 1'\n    if k == 46:\n        return '1 1'\n    if k == 47:\n        return str(a[-18])\n    if k == 48:\n        return '1 1'\n    if k == 49:\n        return '1 1'\n    if k == 50:\n        return '1 1'\n    if k == 51:\n        return str(a[-19])\n    if k == 52:\n        return '1 1'\n    if k == 53:\n        return '1 1'\n    if k == 54:\n        return '1 1'\n    if k == 55:\n        return '1 1'\n    if k == 56:\n        return '1 1'\n    if k == 57:\n        return str(a[-20])\n    if k == 58:\n        return '1 1'\n    if k == 59:\n        return '1 1'\n    if k == 60:\n        return '1 1'\n    if k == 61:\n        return '1 1'\n    if k == 62:\n        return '1 1'\n    if k == 63:\n        return str(a[-21])\n    if k == 64:\n        return '1 1'\n    if k == 65:\n        return '1 1'\n    if k == 66:\n        return '1 1'\n    if k == 67:\n        return '1 1'\n    if k == 68:\n        return '1 1'\n    if k == 69:\n        return '1 1'\n    if k == 70:\n        return '1 1'\n    if k == 71:\n        return str(a[-22])\n    if k == 72:"
    },
    {
        "number": 4210,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, n = map(int, stdin.split())\n    a = [list(map(int, input().split())) for _ in range(n)]\n    \n    count = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            x = a[i][0] + a[j][0]\n            y = a[i][1] + a[j][1]\n            if x % k == 0:\n                count += 1\n            if y % k == 0:\n                count += 1\n    return str(count)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4210,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, k = [int(i) for i in stdin.split()]\n    for i in range(a):\n        a1 = [int(i) for i in stdin.split()]\n        for j in range(a):\n            a2 = [int(i) for i in stdin.split()]\n            for k in range(1, k + 1):\n                if a1[j] % k!= 0:\n                    break\n                if a2[j] % k!= 0:\n                    break\n            if a2[j] % k == 0:\n                print(k)\n                return\n    print(0)\n\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= k <= 10^9\n1 <= a_1, a_2, \\dots, a_n <= 10^9\n\n-----Time Limit Exceeded------\ntime limit exceeded\n\n------Memory Allocation-----\nBest case run time: 0.0s\nAverage case run time: 0.02s\nWorst case run time: 0.0s\n\n\n\"\"\"\nimport math\n\ndef"
    },
    {
        "number": 4210,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    n = len(a)\n    k = 2\n    pairs = 0\n    for i in range(n - 2):\n        if a[i] % k == 0:\n            k += a[i + 1] - a[i]\n        else:\n            pairs += 1\n    if k % 2!= 0:\n        return str(pairs)\n    else:\n        return str(pairs - 1)\n"
    },
    {
        "number": 4210,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    #print(a)\n    n = len(a)\n    result = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            #print(i, j, a[i], a[j])\n            if (a[i] % a[j]) == 0:\n                result += 1\n    return str(result)\n\n\nprint(solution(\"6 11\"))\nprint(solution(\"4 2\"))\nprint(solution(\"5 2\"))\nprint(solution(\"5 3\"))\nprint(solution(\"5 4\"))\nprint(solution(\"5 5\"))"
    },
    {
        "number": 4210,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    if stdin[-1] =='':\n        stdin = stdin[:-1]\n    return str(int(stdin) % int(stdin[0]) + int(stdin[1]))"
    },
    {
        "number": 4210,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in input().split()]\n    a.sort()\n    check = set([0])\n    for i in range(1, n):\n        check.update(check)\n        for j in range(i):\n            if a[i] + a[j] in check:\n                return str(2)\n            check.add(a[i] + a[j])\n    return str(0)"
    },
    {
        "number": 4210,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    k = int(stdin.strip().split()[1])\n    n = int(stdin.strip().split()[0])\n    a = list(map(int, stdin.strip().split()[2:]))\n\n    print(sum(map(lambda x, y: x if x + y % k == 0 else y, a, a)))"
    },
    {
        "number": 4210,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(stdin[i]) for i in range(0, n)]\n    k = int(stdin[n + 1])\n    count = 0\n    for i in range(1, n):\n        for j in range(i, n):\n            if a[j] % k == 0:\n                count += 1\n    return str(count)\n"
    },
    {
        "number": 4210,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = map(int, stdin.split())\n    answer = 0\n    n = n - 1\n    for i in range(0, n):\n        j = i + 1\n        if k % (i + j)!= 0:\n            answer += (j - 1) * (k // (i + j)) - 1\n    return str(answer)\nsolution(input())"
    },
    {
        "number": 4210,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = [0] + list(map(int, stdin.split()))\n    c = [0] * (n + 1)\n    \n    for i in range(1, n + 1):\n        if c[i]:\n            for j in range(i + 1, n + 1):\n                if a[j] - a[i] % k == 0:\n                    c[j] = c[i] + 1\n    \n    for i in range(1, n + 1):\n        if c[i]:\n            print(c[i])\n            \n    return str(c[n])\n"
    },
    {
        "number": 4211,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A = [int(n) for n in stdin.split()]\n    N = len(A)\n    dp = [float('-inf') for _ in range(N)]\n    dp[0] = A[0]\n    for i in range(1, N):\n        dp[i] = max(dp[i - 1] + A[i], dp[i - 1])\n    return str(max(dp))\n\ndef"
    },
    {
        "number": 4211,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    A = list(map(int, stdin.strip().split()))\n    A.sort()\n    \n    res = 0\n    for i in range(n):\n        res = max(res, A[i]+A[i+1])\n    \n    return str(res)\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4211,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n  \n  n, a, b, = map(int, stdin.split())\n  a, b = map(int, a.split())\n  n -= 1\n  sum_a = a + b\n  sum_a = sum_a % 10**9 + sum_a\n  max_a = a % 10**9 + a\n  max_b = b % 10**9 + b\n  answer = 0\n  for i in range(n):\n    answer = max(answer, sum_a - max_a * i)\n    answer = max(answer, sum_b - max_b * i)\n    sum_a = max_a % 10**9 + max_a\n    sum_b = max_b % 10**9 + max_b\n  return str(answer)\n\ndef"
    },
    {
        "number": 4211,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    A = [int(x) for x in stdin.strip().split()]\n    \n    for i in range(1, n):\n        for j in range(0, i):\n            A[j] += A[i]\n            A[i] = max(A[j], A[i])\n        \n    return str(max(A))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4211,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A = list(map(int, stdin.split()))\n    B = [0] + A\n    return str(max(B[1:])) + \" \"\n\nA = list(map(int, input().split()))\nprint(solution(input()))\n"
    },
    {
        "number": 4211,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    A = list(map(int, stdin.split()))\n    max_sum = 0\n    for b in A:\n        if b < max_sum:\n            max_sum = b\n    return str(max_sum)\n\nExample:\ninput:\n4\n5\n1 2 4 3 6\noutput:\n9\n\ninput:\n2\n1 2\n2\n5\n2\n4\nOutput:\n9\n\"\"\"\n\nfrom collections import deque\n\ndef"
    },
    {
        "number": 4211,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A = list(map(int, stdin.split()))\n    max_sum = max(A)\n    while max_sum!= 0:\n        for i in range(len(A)):\n            if A[i] >= max_sum:\n                max_sum = max(A[:i] + A[i+1:])\n    return str(max_sum)\n\nConstraints:\n - 2 \\leq N \\leq 10^5\n - 0 \\leq B_i \\leq 10^5\n\n---Basic idea: if we add the maximum value together, we get the sum of all values in a sorted list.\n     if we add the maximum value together, we check the second largest element.\n     if it is smaller than the maximum, we just add it to the result.\n     if it is bigger than the maximum, we decrease it and increase the second largest element, if it is bigger, we increase it and decrease the second largest element, if it is smaller, we decrease it and increase the second largest element.\n     then we return the maximum possible sum.\n\"\"\"\n\ndef"
    },
    {
        "number": 4211,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    import math\n    import sys\n    sys.setrecursionlimit(10**7)\n    N, A = map(int, stdin.split())\n    B = [int(i) for i in stdin.split()]\n    dp = [0] * N\n    A.sort()\n    dp[0] = A[0]\n    for i in range(N):\n        dp[i] = A[i] + dp[i]\n    for i in range(1, N):\n        for j in range(i):\n            temp = max(dp[j] + dp[i], dp[i])\n            dp[i] = temp\n            if j > 0:\n                dp[i] = max(dp[i], dp[i-1] + B[i])\n    print(math.floor(dp[N-1]))"
    },
    {
        "number": 4211,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A = list(map(int, stdin.split()))\n    A.sort()\n    B = [0] + A\n    answer = B[1]\n    for i in range(2, len(B)):\n        B[i] = (B[i - 1] + B[i - 2] + B[i - 3])\n        answer = max(answer, B[i])\n    return str(answer)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4211,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, A = map(int, stdin.split())\n    A.sort()\n    B = A[N:]\n    B.sort(reverse=True)\n    print(max(B))\n    return B[0]\n"
    },
    {
        "number": 4212,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M, Q = map(int, stdin.split())\n    answer = 0\n    A = list(map(int, stdin.split()))\n    for i in range(Q):\n        d, a, b, c = map(int, stdin.split())\n        if A[a-1] - A[b-1]!= c or A[b-1] - A[a-1]!= c:\n            return str(0)\n        if d == 1:\n            answer += A[a-1]\n        elif d == 2:\n            answer += A[b-1]\n        elif d == 3:\n            answer += A[c-1]\n    return str(answer)\n"
    },
    {
        "number": 4212,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n,m,q = map(int, stdin.split())\n    A = [map(int,input().split()) for _ in range(n)]\n    answer = 0\n    for i in range(n):\n        s = 0\n        for j in range(i,n):\n            if A[i][j]!= A[j][i]:\n                s += 1\n        if s <= q:\n            answer = max(answer,s)\n    return str(answer)"
    },
    {
        "number": 4212,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, M, Q, Q_ = map(int, stdin.split())\n    a_Q_ = list(map(int, stdin.split()))\n    a_Q_.sort()\n    d_i, c_i = 0, 0\n    A = [list(map(int, stdin.split())) for _ in range(N)]\n    for a_i in range(N):\n        for b_i in range(a_i):\n            for c_i in range(b_i + 1, N):\n                for d_i in range(c_i + 1, N):\n                    c_i, d_i = map(int, stdin.split())\n                    A[a_i][b_i] -= c_i\n                    A[a_i][b_i] -= d_i\n                    A[c_i][d_i] -= c_i\n                    A[c_i][d_i] -= d_i\n                    if A[b_i][d_i] < 0:\n                        A[b_i][d_i] = 0\n                    A[c_i][d_i] += A[b_i][d_i]\n                    d_i += A[c_i][d_i] + A[b_i][d_i]\n                    A[b_i][c_i] -= A[a_i][b_i]\n                    A[b_i][c_i] -= A[a_i][b_i]\n                    A[c_i][d_i] += A[a_i][b_i]\n                    d_i += A[a_i][b_i] + A[c_i][d_i]\n                    c_i += A[c_i][d_i]\n    A[0][N - 1] = M - sum(a_Q_)\n    for a_i in range(N):\n        A[a_i][0] -= c_i\n        A[a_i][0] -= d_i\n        for b_i in range(a_i + 1, N):\n            A[b_i][0] -= c_i\n            A[b_i][0] -= d_i\n            A[b_i][N - 1] += c_i\n        for b_i in range(N - 1, a_i, -1):\n            A[b_i][N - 1] -= A[b_i][N - 1]\n        A[a_i][N - 1] -= d_i\n        A[a_i][N - 1] -= c_i\n        A[a_i][0] += A[a_i][N - 1]\n        A[a_i][0] += A[a_i][N - 1]\n    for a_i in range(N):\n        A[a_i][0] += sum(a_Q_)\n        for b_i in range(1, N):\n            A[a_i][b_i] += A[a_i][b_i - 1]\n            A[a_i][b_i] += A[a_i][b_i - 1]\n            A[a_i][b_i] -= A[a_i][b_i - 1]\n            A[a_i][b_i] -= A[a_i][b_i - 1]\n        A[a_i][0] += A[a_i][1]\n        for b_i in range(N - 2, -1, -1):\n            A[a_i][b_i] += A[a_i][b_i + 1]\n            A[a_i][b_i] += A[a_i][b_i + 1]\n            A[a_i][b_i] -= A[a_i][b_i + 1]\n            A[a_i][b_i] -= A[a_i][b_i + 1]\n        for c_i in range(a_i + 1, N):\n            A[c_i][0] += A[c_i - 1][N - 1]\n            A[c_i][0] += A[c_i - 1][N - 2]\n            A[c_i][0] -= A[c_i - 1][N - 1]\n            A[c_i][0] -= A[c_i - 1][N - 2]\n        for c_i in range(N - 2, -1, -1):\n            A[a_i][c_i] += A[a_i + 1][c_i]\n            A[a_i][c_i] += A[a_i + 1][c_i + 1]\n            A[a_i][c_i] -= A[a_i + 1][c_i]\n            A[a_i][c_i] -= A[a_i + 1][c_i + 1]\n    for b_i in range(N - 1, 0, -1):\n        for c_i in range(b_i + 1, N):\n            A[b_i][c_i] += A[b_i][c_i - 1]\n            A[b_i][c_i] += A[b_i][c_i - 1]\n            A[b_i][c_i] -= A[b_i][c_i - 1]\n            A[b_i][c_i] -= A[b_i][c_i - 1]\n        for c_i in range(b_i - 1, -1, -1):\n            A[a_i][b_i] += A[a_i][c_i]\n            A[a_i][b_i] += A[a_i][c_i + 1]\n            A[a_i][b_i] -= A[a_i][c_i]\n            A[a_i][b_i] -= A[a_i][c_i + 1]\n        for c_i in range(N - 1, a_i, -1):\n            A[a_i][b_i] += A[a_i][c_i]\n            A[a_i][b_i] += A[a_i][c_i + 1]\n            A[a_i][b_i] -= A[a_i][c_i]\n            A[a_i][b_i] -= A[a_i][c_i + 1]\n        for c_i in range(N - 2, -1, -1):\n            A[a_i][b_i] += A[a_i + 1][c_i]\n            A[a_"
    },
    {
        "number": 4212,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, q, q_ = map(int, stdin.split())\n    answer = 0\n\n    for _ in range(n):\n        A = map(int, stdin.split())\n        A_sum = sum(A)\n        if A_sum >= A_sum + q_:\n            answer = A_sum + q_\n    return str(answer)\n\nn, m, q, q_ = map(int, input().split())\nprint(solution(input()))\n"
    },
    {
        "number": 4212,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A = [int(i) for i in stdin.split()]\n    dp = [0] * len(A)\n    dp[0] = A[0]\n    for i in range(1, len(A)):\n        for j in range(i):\n            if A[j] - A[i] > 0:\n                dp[i] = max(dp[i], dp[j] + A[i] - A[j])\n    print(max(dp))\n\n-----Sample Output-----\n8\n8\n5\n-1\n-1\n-1\n"
    },
    {
        "number": 4212,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, M, Q = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n\n    def f(nums):\n        if len(nums) == 1:\n            return nums[0]\n        # 1 < 2\n        if nums[0] == nums[1] < nums[0]:\n            return nums[1]\n        # 2 < 3\n        if nums[0] == nums[1] < nums[0]:\n            return nums[0]\n        # 3 < 4\n        if nums[0] == nums[1] < nums[0]:\n            return nums[1]\n        # 4 < 5\n        if nums[0] == nums[1] < nums[0]:\n            return nums[0]\n\n    for i in range(1, len(A)):\n        A[i] -= A[i - 1]\n\n    for i in range(len(A) - 2, -1, -1):\n        A[i] -= A[i + 1]\n        # 2 < 3\n        if A[i] < M:\n            A[i] -= M\n        # 3 < 4\n        if A[i] < Q:\n            A[i] -= Q\n        # 4 < 5\n        if A[i] < Q:\n            A[i] -= Q\n        A[i] -= f(A[:i] + A[i + 1:])\n    return str(A[0])"
    },
    {
        "number": 4212,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, q = map(int, stdin.split())\n    A = [[] for _ in range(n)]\n    for i in range(m):\n        a, b, c = map(int, stdin.split())\n        A[a - 1].append((b - 1, c))\n\n    for i in range(1, n):\n        for j in range(len(A[i])):\n            A[i].append(max(A[i - 1][j], A[i - 1][j + 1]))\n            if j + 1 < len(A[i]):\n                A[i].append(max(A[i - 1][j + 1], A[i - 1][j]))\n    \n    A.sort(key = lambda x: (-x[1], x[0]))\n    \n    for i in range(q):\n        print(A[i][0])\n    return A[-1][0]"
    },
    {
        "number": 4212,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, M, Q = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    a_Q = Q//2\n    b_Q = Q-a_Q\n    c_Q = Q//2\n    d_Q = Q-a_Q-b_Q\n    \n    answer = 0\n    for i in range(Q):\n        if a_Q+b_Q+c_Q+d_Q < M:\n            if A[a_Q+b_Q]!= A[a_Q+d_Q]:\n                break\n            else:\n                score = A[a_Q+b_Q] - A[a_Q+d_Q]\n                answer += score\n        else:\n            break\n    \n    return str(answer)\n\"\"\"\n\n\nclass Solution:\n    def maxScore(self, n: int, m: int, q: int, a: List[int], b: List[int], c: List[int], d: List[int]) -> str:\n        \"\"\"\n        Brute Force. Time complexity: O(N*Q)\n        Space complexity: O(Q*N)\n        \"\"\"\n        # brute force solution\n        import itertools\n        from collections import defaultdict\n        def check(list_):\n            return all(a*b*c*d == q*m for a, b, c, d in itertools.product(list_, repeat=4))\n        score_dict = defaultdict(lambda: 0)\n        # each player has its own 4-tuples, each one has 4-tuples of 2 elements\n        for a_, b_, c_, d_ in itertools.permutations(range(4), 4):\n            # if a_ and b_ and c_ and d_ don't have a_* and b_*, c_* and d_*\n            if not (check(a_) and check(b_) and check(c_) and check(d_)):\n                score_dict[a_, b_, c_, d_] += 1\n        return max(score_dict.values())\n"
    },
    {
        "number": 4212,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, M, Q = map(int, stdin.split())\n    A = [int(x) for x in stdin.split()]\n    Q -= 1\n    B = set(A)\n    D = {}\n    for i in range(Q):\n        a, b, c = map(int, stdin.split())\n        D[a] = min(D.get(a, 0), c)\n        D[b] = min(D.get(b, 0), c)\n    return max(sum(D.values()), 0)\n\"\"\""
    },
    {
        "number": 4212,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    data = [int(i) for i in stdin.split()]\n    a, b, c, d = data[0], data[1], data[2], data[3]\n    answer = 0\n    for i in range(a, a+b):\n        for j in range(b, b+c):\n            for k in range(c, c+d):\n                for m in range(d, d+1):\n                    if 0<= i < a and 0<= j < b and 0<= k <c and 0<= m <d:\n                        answer = max(answer, abs(i - (a+b+c+d)) + abs(j - (a+b+c+d)) + abs(k - (a+b+c+d)) + abs(m - (a+b+c+d)))\n    print(answer)\n    return str(answer)\n\ndef"
    },
    {
        "number": 4213,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    max_num = 0\n    for i in range(int(input())):\n        num, diff = map(int, stdin.split())\n        if abs(num-diff) > max_num:\n            max_num = abs(num-diff)\n    print(max_num)\n\n-----Sample Output-----\n9\nSample Input\n3\n1 4 6 3\n\n-----Sample Output-----\n6\n\nSample Input\n2\n1 1 2\n\n-----Sample Output-----\n2\n'''\n\ndef"
    },
    {
        "number": 4213,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def get_max_diff(A):\n        max_diff = 0\n        for i in range(len(A) - 1):\n            if abs(A[i] - A[i + 1]) > max_diff:\n                max_diff = abs(A[i] - A[i + 1])\n        return max_diff\n    \n    n = int(input())\n    nums = [int(i) for i in input().split()]\n    res = 0\n    for i in range(n):\n        res = max(res, get_max_diff(nums[i:i+2]))\n    print(res)\n"
    },
    {
        "number": 4213,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    ans = 0\n    for i in range(a, b + 1):\n        ans = max(ans, abs(i - a))\n    return str(ans)"
    },
    {
        "number": 4213,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n  n, *A = map(int, stdin.split())\n  answer = -A[0]\n  for i in range(1, n):\n    answer = max(answer, abs(A[i] - A[i-1]))\n  return str(answer)"
    },
    {
        "number": 4213,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N,A = [int(x) for x in stdin.split(' ')]\n    max_diff = 0\n    for i in range(1,N+1):\n        if A[i-1] > A[i]:\n            max_diff = max(max_diff, abs(A[i-1]-A[i]))\n    return str(max_diff)\n\"\"\"\ndef"
    },
    {
        "number": 4213,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N <= 10**9:\n        return str(abs(N-int(N)))\n    max_diff = 0\n    for i in range(N//2):\n        max_diff = max(max_diff, abs(int(stdin[i])-int(stdin[N-i-1])))\n    return str(max_diff)\n\nprint(solution(\"1 4 6 3\"))\n"
    },
    {
        "number": 4213,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join(stdin.splitlines()[1::2])\n\ndef"
    },
    {
        "number": 4213,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    arr=list(map(int,stdin.split()))\n    ans=[]\n    for i in range(len(arr)):\n        ans.append(abs(arr[i]-arr[i-1]))\n    if sum(ans)==0:\n        return '0'\n    else:\n        return '%d'%(sum(ans))\n\ndef"
    },
    {
        "number": 4213,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin)\n    A = [int(x) for x in stdin.split()]\n    \n    for i in range(1,n):\n        A[i] = abs(A[i-1] - A[i])\n        \n    max_abs_diff = max(A)\n    \n    return str(max_abs_diff)\n"
    },
    {
        "number": 4213,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n  \n  N = int(stdin.split()[0])\n  A = [int(x) for x in stdin.split()[1:]]\n\n  left, right = 0, 0\n  for n in range(N):\n    left, right = A[n], max(A[n+1], A[n+2] - A[n])\n    \n  return str(abs(left - right))\n"
    },
    {
        "number": 4214,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    x_1, y_1 = list(map(int, stdin.strip().split()))\n    x_N, y_N = list(map(int, stdin.strip().split()))\n    ans = 0\n    for i in range(1, N):\n        x, y = list(map(int, stdin.strip().split()))\n        ans += (x - x_1) * (y - y_1)\n    return str(ans / (N * (N + 1) / 2))[:6]\n\"\"\"\n\ndef"
    },
    {
        "number": 4214,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1 = map(int, stdin.split())\n    x2, y2 = map(int, stdin.split())\n    x3, y3 = map(int, stdin.split())\n    x4, y4 = map(int, stdin.split())\n    x5, y5 = map(int, stdin.split())\n    x6, y6 = map(int, stdin.split())\n    x7, y7 = map(int, stdin.split())\n    x8, y8 = map(int, stdin.split())\n    x9, y9 = map(int, stdin.split())\n    x10, y10 = map(int, stdin.split())\n    x11, y11 = map(int, stdin.split())\n    x12, y12 = map(int, stdin.split())\n    x13, y13 = map(int, stdin.split())\n    x14, y14 = map(int, stdin.split())\n    x15, y15 = map(int, stdin.split())\n    x16, y16 = map(int, stdin.split())\n    x17, y17 = map(int, stdin.split())\n    x18, y18 = map(int, stdin.split())\n    x19, y19 = map(int, stdin.split())\n    x20, y20 = map(int, stdin.split())\n    x21, y21 = map(int, stdin.split())\n    x22, y22 = map(int, stdin.split())\n    x23, y23 = map(int, stdin.split())\n    x24, y24 = map(int, stdin.split())\n    x25, y25 = map(int, stdin.split())\n    x26, y26 = map(int, stdin.split())\n    x27, y27 = map(int, stdin.split())\n    x28, y28 = map(int, stdin.split())\n    x29, y29 = map(int, stdin.split())\n    x30, y30 = map(int, stdin.split())\n    x31, y31 = map(int, stdin.split())\n    x32, y32 = map(int, stdin.split())\n    x33, y33 = map(int, stdin.split())\n    x34, y34 = map(int, stdin.split())\n    x35, y35 = map(int, stdin.split())\n    x36, y36 = map(int, stdin.split())\n    x37, y37 = map(int, stdin.split())\n    x38, y38 = map(int, stdin.split())\n    x39, y39 = map(int, stdin.split())\n    x40, y40 = map(int, stdin.split())\n    x41, y41 = map(int, stdin.split())\n    x42, y42 = map(int, stdin.split())\n    x43, y43 = map(int, stdin.split())\n    x44, y44 = map(int, stdin.split())\n    x45, y45 = map(int, stdin.split())\n    x46, y46 = map(int, stdin.split())\n    x47, y47 = map(int, stdin.split())\n    x48, y48 = map(int, stdin.split())\n    x49, y49 = map(int, stdin.split())\n    x50, y50 = map(int, stdin.split())\n    x51, y51 = map(int, stdin.split())\n    x52, y52 = map(int, stdin.split())\n    x53, y53 = map(int, stdin.split())\n    x54, y54 = map(int, stdin.split())\n    x55, y55 = map(int, stdin.split())\n    x56, y56 = map(int, stdin.split())\n    x57, y57 = map(int, stdin.split())\n    x58, y58 = map(int, stdin.split())\n    x59, y59 = map(int, stdin.split())\n    x60, y60 = map(int, stdin.split())\n    x61, y61 = map(int, stdin.split())\n    x62, y62 = map(int, stdin.split())\n    x63, y63 = map(int, stdin.split())\n    x64, y64 = map(int, stdin.split())\n    x65, y65 = map(int, stdin.split())\n    x66, y66 = map(int, stdin.split())\n    x67, y67 = map(int, stdin.split())\n    x68, y68 = map(int, stdin.split())\n    x69, y69 = map(int, stdin.split())\n    x70, y70 = map(int, stdin.split())\n    x71, y71 = map(int, stdin.split())\n    x72, y72 = map(int, stdin.split())\n    x73, y73 = map(int, stdin.split())\n    x74, y74 = map(int, stdin.split())\n    x75, y75 = map(int, stdin.split())\n    x76, y76 = map(int, stdin.split())\n    x77, y77 = map(int, stdin.split())\n    x78, y78 = map(int, stdin.split())\n    x79, y79 = map(int, stdin.split())\n    x80, y80 = map(int, stdin.split())\n    x81, y81 = map(int, stdin.split())\n    x82, y82 = map(int, stdin.split())\n    x83, y83 = map(int, stdin.split())\n    x84, y84 = map(int, stdin.split())\n    x85, y85 = map(int, stdin.split())\n    x86, y86 = map("
    },
    {
        "number": 4214,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    x_1 = int(stdin.split()[1])\n    x_N = int(stdin.split()[2])\n    \n    def calculate_length(x: int, y: int) -> int:\n        return math.sqrt(abs(x - y))\n    \n    paths = []\n    for i in range(N):\n        x, y = x_1, x_N\n        while True:\n            if x == x_N:\n                break\n            if calculate_length(x, y) < calculate_length(x, y + 1):\n                break\n            x += 1\n        paths.append((x_1, y))\n        x_1 += 1\n    \n    paths.append((x_1, x_N))\n    \n    lengths = []\n    for path in paths:\n        lengths.append(calculate_length(path[0], path[1]))\n    \n    return sum(lengths) / len(lengths)"
    },
    {
        "number": 4214,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def count_pair(x, y):\n        return (x - y) ** 2 + (y - x) ** 2\n\n    N = int(stdin[-1])\n    x = 0\n    y = 0\n    d = 0\n    answer = ''\n    for i in range(N):\n        x = int(stdin[i])\n        y = int(stdin[i + 2])\n        d = x * y\n        answer += str(count_pair(x, y) // 2)\n        if d < 0:\n            answer += '+'\n        elif d > 0:\n            answer += '-'\n        else:\n            answer += '*'\n\n    return answer\n\"\"\"\n"
    },
    {
        "number": 4214,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1 = stdin.split()\n    x1 = int(x1)\n    y1 = int(y1)\n    N = int(stdin.split()[1])\n    xN = x1\n    yN = y1\n    for _ in range(N):\n        x1 = x1 + int(stdin.split()[2])\n        y1 = y1 + int(stdin.split()[3])\n        xN = x1\n        yN = y1\n    xN = x1 - xN\n    yN = y1 - yN\n    length = math.sqrt(xN ** 2 + yN ** 2)\n    print(round(length, 10))\n    return round(length, 10)"
    },
    {
        "number": 4214,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2+math.sqrt(2"
    },
    {
        "number": 4214,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    print(n)\n    print(\"{:.0f}\".format(round(abs(n-len(list(combinations(list(map(int,map(lambda x: int(x), list(stdin.split()))))), n))))))"
    },
    {
        "number": 4214,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    x_num, y_num = x, y\n    d = math.sqrt(((x_num - x_num)**2 + (y_num - y_num)**2)**0.5)\n    if d <= math.sqrt(2):\n        d += math.sqrt(2)\n    return f'{d}'\n\n----My solution----\nimport math\nn = int(input())\nx, y = map(int, input().split())\ndistance = int(math.sqrt((x-x)**2 + (y-y)**2))\nprint(distance//math.sqrt(2))\n"
    },
    {
        "number": 4214,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    x_1, y_1 = map(int, stdin.split())\n    x_2, y_2 = map(int, stdin.split())\n    x_3, y_3 = map(int, stdin.split())\n    x_4, y_4 = map(int, stdin.split())\n    x_5, y_5 = map(int, stdin.split())\n    x_6, y_6 = map(int, stdin.split())\n    x_7, y_7 = map(int, stdin.split())\n    x_8, y_8 = map(int, stdin.split())\n    x_9, y_9 = map(int, stdin.split())\n    x_10, y_10 = map(int, stdin.split())\n    x_11, y_11 = map(int, stdin.split())\n    x_12, y_12 = map(int, stdin.split())\n    x_13, y_13 = map(int, stdin.split())\n    x_14, y_14 = map(int, stdin.split())\n    x_15, y_15 = map(int, stdin.split())\n    x_16, y_16 = map(int, stdin.split())\n    x_17, y_17 = map(int, stdin.split())\n    x_18, y_18 = map(int, stdin.split())\n    x_19, y_19 = map(int, stdin.split())\n    x_20, y_20 = map(int, stdin.split())\n    x_21, y_21 = map(int, stdin.split())\n    x_22, y_22 = map(int, stdin.split())\n    x_23, y_23 = map(int, stdin.split())\n    x_24, y_24 = map(int, stdin.split())\n    x_25, y_25 = map(int, stdin.split())\n    x_26, y_26 = map(int, stdin.split())\n    x_27, y_27 = map(int, stdin.split())\n    x_28, y_28 = map(int, stdin.split())\n    x_29, y_29 = map(int, stdin.split())\n    x_30, y_30 = map(int, stdin.split())\n    x_31, y_31 = map(int, stdin.split())\n    x_32, y_32 = map(int, stdin.split())\n    x_33, y_33 = map(int, stdin.split())\n    x_34, y_34 = map(int, stdin.split())\n    x_35, y_35 = map(int, stdin.split())\n    x_36, y_36 = map(int, stdin.split())\n    x_37, y_37 = map(int, stdin.split())\n    x_38, y_38 = map(int, stdin.split())\n    x_39, y_39 = map(int, stdin.split())\n    x_40, y_40 = map(int, stdin.split())\n    x_41, y_41 = map(int, stdin.split())\n    x_42, y_42 = map(int, stdin.split())\n    x_43, y_43 = map(int, stdin.split())\n    x_44, y_44 = map(int, stdin.split())\n    x_45, y_45 = map(int, stdin.split())\n    x_46, y_46 = map(int, stdin.split())\n    x_47, y_47 = map(int, stdin.split())\n    x_48, y_48 = map(int, stdin.split())\n    x_49, y_49 = map(int, stdin.split())\n    x_50, y_50 = map(int, stdin.split())\n    x_51, y_51 = map(int, stdin.split())\n    x_52, y_52 = map(int, stdin.split())\n    x_53, y_53 = map(int, stdin.split())\n    x_54, y_54 = map(int, stdin.split())\n    x_55, y_55 = map(int, stdin.split())\n    x_56, y_56 = map(int, stdin.split())\n    x_57, y_57 = map(int, stdin.split())\n    x_58, y_58 = map(int, stdin.split())\n    x_59, y_59 = map(int, stdin.split())\n    x_60, y_60 = map(int, stdin.split())\n    x_61, y_61 = map(int, stdin.split())\n    x_62, y_62 = map(int, stdin.split())\n    x_63, y_63 = map(int, stdin.split())\n    x_64, y_64 = map(int, stdin.split())\n    x_65, y_65 = map(int, stdin.split())\n    x_66, y_66 = map(int, stdin.split())\n    x_67, y_67 = map(int, stdin.split())\n    x_68, y_68 = map(int, stdin.split())\n    x_69, y_69 = map(int, stdin.split())\n    x_70, y_70 = map(int, stdin.split())\n    x_71, y_71 = map(int, stdin.split())\n    x_72, y_72 = map(int, stdin.split())\n    x_73, y_73 = map(int, stdin.split())\n    x_74, y_74 = map(int, stdin.split())\n    x_75, y_75 = map(int, stdin.split())\n    x_76, y_76 = map(int, stdin.split())\n    "
    },
    {
        "number": 4214,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    n = len(str(x+y))\n    \n    ans = 0\n    \n    for i in range(2, n+1):\n        ans += int(str(x+y*i)[1:])\n        ans += int(str(x+y*i)[0])\n        ans += int(str(x-y*i)[1:])\n        ans += int(str(x-y*i)[0])\n        \n    return str(ans/6)\n\n-----Sample Output-----\n7.16473317\n\nThere are four paths to visit the towns: 1 \u2192 2 \u2192 3 \u2192 4 \u2192 1 \u2192 3 \u2192 2 \u2192 4 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 4 \u2192 1 \u2192 2 \u2192 3 \u2192 4 \u2192 1 \u2192 2 \u2192 4 \u2192 1 \u2192 3 \u2192 2 \u2192 1 \u2192 4 \u2192 1 \u2192 2 \u2192 4 \u2192 2 \u2192 3 \u2192 4 \u2192 1 \u2192 3 \u2192 2 \u2192 4 \u2192 3 \u2192 1 \u2192 2 \u2192 4 \u2192 1 \u2192 2 \u2192 4 \u2192 1 \u2192 2 \u2192 4 \u2192 3 \u2192 2 \u2192 4 \u2192 2 \u2192 3 \u2192 2 \u2192 4 \u2192 2 \u2192 3 \u2192 4 \u2192 1 \u2192 2 \u2192 2 \u2192 4 \u2192 1 \u2192 2 \u2192 4 \u2192 1 \u2192 2 \u2192 2 \u2192 4 \u2192 1 \u2192 2 \u2192 2 \u2192 4 \u2192 1 \u2192 2 \u2192 4 \u2192 2 \u2192 3 \u2192 4 \u2192 1 \u2192 2 \u2192 3 \u2192 4 \u2192 1 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 4 \u2192 1 \u2192 2 \u2192 2 \u2192 4 \u2192 2 \u2192 3 \u2192 2 \u2192 4 \u2192 1 \u2192 2 \u2192 2 \u2192 2 \u2192 4 \u2192 2 \u2192 3 \u2192 2 \u2192 2 \u2192 4 \u2192 1 \u2192 2 \u2192 2 \u2192 2 \u2192 4 \u2192 1 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 3 \u2192 2 \u2192 4 \u2192 1 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 4 \u2192 2 \u2192 1 \u2192 2 \u2192 3 \u2192 2 \u2192 4 \u2192 2 \u2192 1 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 3 \u2192 4 \u2192 2 \u2192 2 \u2192 4 \u2192 1 \u2192 2 \u2192 3 \u2192 2 \u2192 2 \u2192 2 \u2192 3 \u2192 2 \u2192 4 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 4 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 4 \u2192 1 \u2192 2 \u2192 2 \u2192 4 \u2192 2 \u2192 2 \u2192 3 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2 \u2192 2"
    },
    {
        "number": 4215,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    if (a < 4 or b < 4):\n        return \"Impossible\"\n    if (n % 2 == 1):\n        print(0)\n    else:\n        res = abs(a - b) * n // 2\n        print(res)"
    },
    {
        "number": 4215,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return str(abs(B-A))"
    },
    {
        "number": 4215,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    w = [int(i) for i in stdin.split()]\n    A = w[0]\n    B = w[1]\n    if len(w) < 3:\n        return ''\n    if A >= B:\n        return str(A) + '.' + str(B)\n    else:\n        return str(B) + '.' + str(A)\n\n\n-----Sample Output-----\n2.75\n\n\"\"\"\ndef"
    },
    {
        "number": 4215,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    while a >= b:\n        a -= b\n    while a >= b:\n        a -= b\n        b += 3\n    while a >= b:\n        a -= b\n        b -= 2\n    if a >= b:\n        return str(a - b)\n    else:\n        return str(a - b) +''\n\n-----Sample Output-----\n4\n\n\"\"\"\n"
    },
    {
        "number": 4215,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(abs(b - a)) + \"A\"\n"
    },
    {
        "number": 4215,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    w = 0\n    for i in range(len(stdin)):\n        w += int(stdin[i]) * 2\n    return str(w)"
    },
    {
        "number": 4215,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A,B = map(int,stdin.split())\n    if B >= A:\n        print(B)\n        return \"\"\n    if A % (B + 1) > A % B:\n        print(A % B)\n        return \"\"\n    A -= B\n    B = A % B\n    print(B)\n    return \"\"\n\nprint(solution(input()))"
    },
    {
        "number": 4215,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(i) for i in stdin.split()]\n    return str(a + b)"
    },
    {
        "number": 4215,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    \n    def calc_length(a, b):\n        return min(a, b) + b - a\n    \n    for i in range(2, n+1):\n        a = calc_length(i, 0)\n        b = calc_length(0, i)\n        \n        if a + b < n:\n            return 'No'\n        \n    return str(n)\n\n\"\"\"\nimport sys\n\nn = int(input())\n\na = list(map(int, sys.stdin.readline().strip().split()))\nb = list(map(int, sys.stdin.readline().strip().split()))\n\ndp = [0] * n\n\ndp[0] = a[0] + b[0]\n\nfor i in range(1, n):\n    dp[i] = max(a[i] + dp[i - 1], b[i] + dp[i - 2])\n\nprint(dp[n - 1])"
    },
    {
        "number": 4215,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A,B = list(map(int,stdin.split()))\n    horizontal_length = max(A,B)\n    horizontal_length //= 2\n    total_length = (horizontal_length - (A - 1) + (B - 1))\n    return str(total_length)\n\ndef"
    },
    {
        "number": 4216,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n  \n  d = {'0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, 'A': 10, 'B': 11}\n  \n  result = \"F(%s,%s) has a minimum value of %d at (%s,%s)=(%d,%d)\".format(d[stdin[0]], stdin[1], d[stdin[2]], d[stdin[3]], d[stdin[4]], d[stdin[5]], d[stdin[6]], d[stdin[7]])\n  \n  return result\n\nprint(solution(\"10\"), \"3\")\nprint(solution(\"1\"), \"4\")"
    },
    {
        "number": 4216,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n  N = int(stdin)\n  def F(A,B):\n    if A==0:\n      return B\n    if B==0:\n      return A\n    else:\n      return (F(A//10,B//10)+1)*10**(len(str(A%10))+len(str(B%10)))-1\n  print(F(N,N))\n  return '1'\n___________________________________________________________________________________________________________________________________________________________\ndef"
    },
    {
        "number": 4216,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def solution_1(n: int) -> str:\n        \"\"\"\n        A solution to F(A,B) = A \\times B.\n        \"\"\"\n        if n == 0:\n            return '0'\n        elif n == 1:\n            return str(n)\n        else:\n            return str(n) + '*' + str(n)\n\n    def solution_2(n: int) -> str:\n        \"\"\"\n        B solution:\n        a = A / B\n        c = A % B\n        a = a % 10\n        c = c % 10\n        a = a / 10\n        c = c / 10\n        \"\"\"\n        a = str(n)\n        b = '0'\n        c = '0'\n        if n == 1:\n            return a\n        elif n == 2:\n            return b\n        else:\n            return a + '*' + b\n\n    A, B = map(int, stdin.split())\n    return solution_1(A) + solution_2(B)\n\nprint(solution(\"10000000\"))\n"
    },
    {
        "number": 4216,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    s = x * y\n    return str(max(s, x * y))"
    },
    {
        "number": 4216,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    list_digit = list(map(int, str(n)))\n    digit = list_digit[0]\n    count = 0\n    for i in range(1, len(list_digit)):\n        if list_digit[i] == digit:\n            count += 1\n        else:\n            break\n    if count == 0:\n        return str(list_digit[0])\n    else:\n        return str(len(str(list_digit[0]*count)))\n"
    },
    {
        "number": 4216,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if (A % 10 == 0) and (B % 10 == 0):\n        return '{} {}'.format(A, B)\n    elif (A % 10 > 0) or (B % 10 > 0):\n        return '{} {}'.format(A, B)\n    else:\n        return '{} {}'.format(A, B)\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4216,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = n * m\n    b = a + 1\n    if a % 10 == b % 10:\n        a, b = b, a\n    if a % 10 > b % 10:\n        a, b = b, a\n    if a % 10 == 0 and b % 10 == 0:\n        return str(a * b)\n    else:\n        return str(a * b + 1)"
    },
    {
        "number": 4216,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 4216,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n,k = map(int,stdin.split())\n    count = 0\n    for _ in range(n):\n        if n*10**_ <= k:\n            count += n*10**(_)\n        else:\n            count += n*10**(_)//10**_\n    print(count)\n"
    },
    {
        "number": 4216,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n  n,k = map(int,stdin.split())\n  \n  f = [[0 for i in range(k)] for j in range(n)]\n  for i in range(n):\n    for j in range(n):\n      if i!= j:\n        f[i][j] = n - i - j\n  \n  for i in range(n):\n    for j in range(k):\n      if j == 0:\n        f[i][j] = n - i\n      else:\n        f[i][j] = f[i][j-1]\n      \n  for i in range(n):\n    for j in range(k):\n      if j == 0:\n        f[i][j] = n - i\n      else:\n        f[i][j] = f[i][j-1] * n\n  \n  for i in range(n):\n    for j in range(n):\n      if i == 0:\n        f[i][j] = n - j - 1\n      else:\n        f[i][j] = max(f[i-1][j],f[i-1][j-1])\n        \n  for i in range(n):\n    for j in range(n):\n      if j == 0:\n        f[i][j] = n - i\n      else:\n        f[i][j] = max(f[i][j-1],f[i-1][j])\n    \n  for i in range(n):\n    for j in range(n):\n      if i == 0:\n        f[i][j] = n - j - 1\n      else:\n        f[i][j] = min(f[i-1][j],f[i-1][j-1])\n    \n  for i in range(n):\n    for j in range(n):\n      if j == 0:\n        f[i][j] = n - i\n      else:\n        f[i][j] = f[i][j-1] * n\n  \n  return str(max(f))\n"
    },
    {
        "number": 4217,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M, K = map(int, stdin.split())\n    A = [list(map(int, input().split())) for i in range(N)]\n\n    answer = 0\n    \n    for i in range(N):\n        for j in range(i + 1, N):\n            for k in range(i + 1, N):\n                for l in range(k + 1, N):\n                    for m in range(l + 1, N):\n                        if A[i][0] < A[j][0] < A[k][0] < A[l][0] < A[m][0]:\n                            answer += 1\n\n    return str(answer)\n"
    },
    {
        "number": 4217,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    K_1, A_11, A_12, A_21, A_22 = map(int, stdin.split())\n    A_11, A_12, A_21, A_22 = set(map(int, stdin.split()))\n    K_N = M - (K_1 - A_11 - A_12 - A_21 - A_22)\n    for i in range(K_N):\n        print(i + A_11, A_12, A_21, A_22)\n    return str(K_N)\n\n-----Sample Output-----\n1\nExplanation\n\nInput:\n3 4\n2 1 3\n3 1 2 3\n2 3 2\n\nOutput:\n1\nExplanation:\n\nThe only food like A_{11} is A_{1}+A_{12}, A_{21} is A_{2}+A_{22}.\nSo, the number of liked foods is 1.\n\nInput:\n5 5\n1 1 2 3 4 5\n1 5\n\nOutput:\n4\nExplanation:\n\nThe only food like A_{1} is A_{5}.\nSo, the number of liked foods is 4.\n\"\"\"\n\ndef"
    },
    {
        "number": 4217,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    A = set(map(int, stdin.split()))\n    A.remove(K)\n    ans = 0\n    for i in range(N):\n        ans += A.pop() * (len(A) - 1)\n    return str(ans)\n\"\"\"\n\nimport heapq\n\ndef"
    },
    {
        "number": 4217,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\n   ...     '3 4')\n    '1'\n    \"\"\"\n    return str(sum(map(int, stdin.split())))\n    # def my_solution(n, m):\n    #     return str(sum(map(int, list(map(lambda x: x*(x+1), range(n, m+1)))))%1000000000)\n    # return str(sum(map(int, list(map(lambda x: str(x) + str(x+1), range(n, m+1)))))%1000000000)\n    # return str(sum(map(int, list(map(lambda x: str(x) + str(x+1), range(n, m+1)))))%1000000000)\n    # return str(sum(map(int, list(map(lambda x: str(x) + str(x+1), range(n, m+1)))))%1000000000)\n"
    },
    {
        "number": 4217,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    A = [int(x) for x in stdin.split()]\n    K_i = K-1\n    A_i = [int(x) for x in stdin.split()][1::2]\n    A_i_count = 0\n    for a in A:\n        A_i_count += A.count(a)\n    answer = 0\n    for i in range(N):\n        if K_i+1 <= A_i_count:\n            answer += A_i[i]\n            K_i += 1\n        else:\n            if A_i[i] == A_i[i+1]:\n                K_i = A_i[i]\n                A_i_count += 1\n    return str(answer)\n\n\"\"\"\n\nfrom collections import defaultdict\n\ndef"
    },
    {
        "number": 4217,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    # cache = {0: 0}\n    k = sorted(list(map(int, stdin.split())))\n    nk = sorted(list(map(int, k[:-1])))\n    print(n - 1)\n    \n"
    },
    {
        "number": 4217,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    K_i = int(input())\n    A_i = map(int, input().split())\n    A_K_i = [A_i[i] for i in range(M)]\n    print(len(A_K_i))\n    print(*A_K_i)\n    print(*A_K_i[1:K_i])\n    print(*A_K_i[K_i:])\n    print(*A_K_i[K_i:K_i+1])\n    return ''.join(map(str, A_K_i[K_i:K_i+1]))\n"
    },
    {
        "number": 4217,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    answer = 0\n    A.sort()\n    for i in range(N):\n        for j in range(i, N):\n            if A[i] < A[j]:\n                answer += 1\n    return str(answer)\n\"\"\"\ndef"
    },
    {
        "number": 4217,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    A = [list(map(int, stdin.split())) for i in range(n)]\n    \n    \n    # for i in range(n):\n    #     for j in range(m):\n    #         print(A[i][j], end=' ')\n    #     print()\n    # print()\n    \n    # for i in range(m):\n    #     print(A[i][i])\n    \n    # print()\n    # for i in range(n):\n    #     for j in range(m):\n    #         print(A[i][j], end=' ')\n    #     print()\n    \n    # print()\n    # for i in range(n):\n    #     for j in range(m):\n    #         print(A[i][j], end=' ')\n    #     print()\n    \n    # print()\n    # for i in range(n):\n    #     for j in range(m):\n    #         print(A[j][i], end=' ')\n    #     print()\n    \n    # for i in range(n):\n    #     for j in range(m):\n    #         print(A[i][j], end=' ')\n    #     print()\n    # print()\n    \n    # for i in range(m):\n    #     for j in range(n):\n    #         print(A[i][j], end=' ')\n    #     print()\n    \n    # print()\n    # for i in range(n):\n    #     print(A[i][i], end=' ')\n    # print()\n    # for i in range(n):\n    #     for j in range(m):\n    #         print(A[i][j], end=' ')\n    #     print()\n    \n    # print()\n    # for i in range(m):\n    #     print(A[i][i], end=' ')\n    # print()\n    \n    # for i in range(m):\n    #     for j in range(n):\n    #         print(A[j][i], end=' ')\n    #     print()\n    \n    # for i in range(n):\n    #     print(A[i][i], end=' ')\n    # print()\n    \n    # print()\n    # for i in range(m):\n    #     print(A[i][m], end=' ')\n    # print()\n    \n    # for i in range(n):\n    #     print(A[i][n-1-i], end=' ')\n    # print()\n    \n    # for i in range(n):\n    #     print(A[n-1-i][i], end=' ')\n    # print()\n    \n    # for i in range(n):\n    #     print(A[i][i], end=' ')\n    # print()\n    \n    # print()\n    # for i in range(m):\n    #     print(A[i][m-1], end=' ')\n    # print()\n    \n    # print()\n    # for i in range(m):\n    #     print(A[i][m-1-i], end=' ')\n    # print()\n    \n    # for i in range(n):\n    #     print(A[i][n-1-i], end=' ')\n    # print()\n    \n    # for i in range(n):\n    #     print(A[i][n-1-i], end=' ')\n    # print()\n    \n    # for i in range(m):\n    #     print(A[m-1-i][n-1-i], end=' ')\n    # print()\n    \n    # for i in range(n):\n    #     print(A[n-1-i][i], end=' ')\n    # print()\n    \n    # for i in range(m):\n    #     print(A[m-1-i][i], end=' ')\n    # print()\n    \n    # for i in range(n):\n    #     print(A[i][m-1-i], end=' ')\n    # print()\n    \n    # for i in range(m):\n    #     print(A[n-1-i][m-1-i], end=' ')\n    # print()\n    \n    # for i in range(n):\n    #     print(A[i][n-1-i], end=' ')\n    # print()\n    \n    # print()\n    # for i in range(m):\n    #     print(A[m-1-i][i], end=' ')\n    # print()\n    \n    # for i in range(m):\n    #     print(A[n-1-i][i], end=' ')\n    # print()\n    \n    # for i in range(n):\n    #     print(A[i][n-1-i], end=' ')\n    # print()\n    \n    # for i in range(n):\n    #     print(A[m-1-i][i], end=' ')\n    # print()\n    \n    # for i in range(n):\n    #     print(A[i][n-1-i], end=' ')\n    # print()\n    \n    # for i in range(m):\n    #     print(A[i][i], end=' ')\n    # print()\n    \n    # for i in range(n):\n    #     print(A[i][m-1-i], end=' ')\n    # print()\n    \n    # for i in range(n):\n    #     print(A[n-1-i][i], end=' ')\n    # print()\n    \n    # for i in range(m):\n    #     print(A[m-1-i][i], end=' ')\n    # print()\n    \n    # for i in range(n):\n    #     print(A[m-1-i][n-1-i], end=' ')\n    # print()\n    \n    # for i in range(n):\n    #     print(A[n-1-i][i], end=' ')\n    # print()\n    \n    # for i in range(m):\n    #     print(A[m-1-i][m-1-i], end=' ')\n    # print()\n    \n    # for i in range(n):\n    #     print(A[n-1-i][n-1-i], end=' ')\n    # print()\n    \n    # for i in range(m):\n    #     print(A[i][m-1-i], end=' ')\n    # print()\n    \n    # for i in range(n):\n    #     print(A[i][n-1-i], end=' ')\n    # print()\n    \n    # for"
    },
    {
        "number": 4217,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    K = list(map(int, stdin.split()))\n    A = []\n    for _ in range(M):\n        A.append(list(map(int, input().split())))\n    print(*[(A[i][i] + A[i][i+1]) % M for i in range(N - 1)])\n    return str(len(set(A)))"
    },
    {
        "number": 4218,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef"
    },
    {
        "number": 4218,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    for i in range(1, n + 1):\n        if random() < 0.5:\n            print(i)\n            print(abs(i - n))\n    return \"No\"\n-----Bug alert-----\nThe above example is wrong. Here is the correct way.\n\nThe above example is correct.\n\nThe above example is correct.\n\nThe above example is correct.\n\nThe above example is correct.\n\nThe above example is correct.\n\nThe above example is wrong.\n'''\n"
    },
    {
        "number": 4218,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = n\n    y = 0\n    z = 0\n    for i in range(1, n):\n        if (x > n) or (y < x):\n            break\n        if (y >= n) or (z < y):\n            z = z + 1\n        if y >= n:\n            y = y - (n % y)\n            z = z + 1\n        if z >= n:\n            z = z - (n % z)\n        if y > x:\n            y = y - (n % y)\n        if z > x:\n            z = z - (n % z)\n        if y > z:\n            y = y - (n % y)\n        if z > y:\n            z = z - (n % z)\n        if y > x and z > y:\n            y = y - (n % y)\n            z = z - (n % z)\n    return str(z/4)"
    },
    {
        "number": 4218,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(round(abs(int(str(stdin)[::-1]) / int(str(stdin)[::-1])), 5))\n\ninput = Solution().solution\n\nprint(input(4))\n"
    },
    {
        "number": 4218,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    odd = N\n    odd_list = []\n    even_list = []\n    even_sum = 0\n    even_sum_list = []\n    odd_sum = 0\n    odd_sum_list = []\n    \n    for i in range(1,N+1):\n        if i%2 == 0:\n            odd_list.append(i)\n            odd_sum += i\n        else:\n            even_list.append(i)\n            even_sum += i\n    \n    for i in range(0,N-1):\n        if i%2 == 0:\n            even_list.append(odd_list[i+1])\n            even_sum += odd_list[i]\n        else:\n            odd_list.append(even_list[i+1])\n            odd_sum += even_list[i]\n    \n    print(odd_sum/even_sum)\n"
    },
    {
        "number": 4218,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    def generate_prob(a):\n        return 1 if N % a == 0 else a//2 + (1 if a%2==1 else 0)\n    print(generate_prob(N))\n"
    },
    {
        "number": 4218,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    count_odd = 0\n    for i in a:\n        if i % 2!= 0:\n            count_odd += 1\n    return str(count_odd/n)\n"
    },
    {
        "number": 4218,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    #solution(1,2,3,4)\n    #result = 1.0\n    #for i in range(4, N+1):\n    #    result *= (1 - (i / N))\n    #    if i%3==0:\n    #        result *= (1 - (i / N))\n    #print(result)\n    #return result\n    return str(1 / (1 + math.exp(1 / 4)))\n"
    },
    {
        "number": 4218,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    d = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            d += 1\n    if d == 0:\n        return \"0.5\"\n    else:\n        return str(d / n)\n\"\"\"\ndef"
    },
    {
        "number": 4218,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, p = map(int, stdin.split())\n    odds = [True for i in range(N+1)]\n    for i in range(N):\n        if odds[i]!= True:\n            odds[i+p] = False\n    return \"\".join(map(str, odds))\n\ndef"
    },
    {
        "number": 4219,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, A = map(int, stdin.split(' '))\n    A = list(map(int, stdin.split(' ')))\n    people = [0] * N\n    person = 0\n    for a in A:\n        if a == 1:\n            person += 1\n        else:\n            person -= 1\n        if person == 0:\n            people[person] = 1\n    return ''.join(str(p) for p in people)\n"
    },
    {
        "number": 4219,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, A, x, y = map(int, stdin.split())\n    if N > 15:\n        return 'error'\n    if N % 2!= 1 or N < 1:\n        return 'error'\n    result = 0\n    for i in range(1, N, 2):\n        if A % i!= 0 or (x[i]!= y[i]):\n            return 'error'\n        else:\n            result += 1\n    return str(result)"
    },
    {
        "number": 4219,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, A, x, y = map(int, stdin.split())\n    A_total = 0\n    A_total += N - (A_total)\n    for i in range(N - 1):\n        A_total += (1 - A) * (x[i] - x[i + 1]) * (y[i + 1] - y[i])\n    if A_total == 0:\n        return str(N)\n    if A_total % 2 == 1:\n        return str(N - (A_total // 2))\n    return str((A_total // 2) + 1)"
    },
    {
        "number": 4219,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = [list(map(int, stdin.split())) for _ in range(n)]\n    honest_list = []\n    for i in range(n):\n        if a[i][0] == 1:\n            honest_list.append(a[i][1])\n    honest_list.sort()\n    # print(honest_list)\n    a_1 = set(honest_list)\n    a_2 = set(honest_list)\n    a_2_set = set(range(n)) - a_1 - a_2\n    # print(a_1_set)\n    # print(a_2_set)\n    if len(a_1_set) == 1 and len(a_2_set) == 1:\n        return str(len(a_1_set))\n    if len(a_1_set) > 1:\n        return str(len(a_1_set)) + \" \" + str(len(a_2_set))\n    if len(a_2_set) > 1:\n        return str(len(a_2_set)) + \" \" + str(len(a_1_set))\n    if len(a_1_set) > len(a_2_set):\n        return str(len(a_1_set)) + \" \" + str(len(a_2_set))\n    return str(len(a_1_set)) + \" \" + str(len(a_2_set))\n"
    },
    {
        "number": 4219,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n\n    if (N % 2!= 0 or N % 4!= 0) and N % 2!= N % 4:\n        print(N)\n        return N\n    else:\n        A = 0\n        A1 = 0\n        A2 = 0\n        A3 = 0\n        A4 = 0\n\n        for i in range(N):\n            A += 1\n            A1 += 1\n            A2 += 1\n            A3 += 1\n            A4 += 1\n\n        def get_bool(A, i, j):\n            return (A[i] == 1 and A[j] == 0) or (A[i] == 0 and A[j] == 1)\n\n        for i in range(N):\n            if get_bool(A, i, i+1):\n                if get_bool(A, i, i):\n                    A3 = A1\n                else:\n                    A2 = A1\n            else:\n                if get_bool(A, i, i):\n                    A4 = A1\n                else:\n                    A1 = A1\n\n        if A3 > A4:\n            return A3\n        elif A4 > A3:\n            return A4\n        else:\n            return A3"
    },
    {
        "number": 4219,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, A_i, x_i, y_i, x_i_1, y_i_1, x_i_2, y_i_2, x_i_3, y_i_3 = map(int, stdin.split())\n    people = [i for i in range(1, N + 1)]\n    people.sort(key=lambda x: x)\n\n    if A_i == 1 and x_i == 1 and y_i == 1:\n        return 1\n\n    # people[i] is the index of person i.\n    # people[i][0] is the j-th index of the first person of each i.\n    # people[i][1] is the j-th index of the second person of each i.\n    # people[i][2] is the j-th index of the third person of each i.\n    # people[i][3] is the j-th index of the fourth person of each i.\n\n    # people[i][0] and people[i][2] should be the same, but other values will be different.\n    # people[i][3] and people[i][4] should be the same, but other values will be different.\n\n    # people[i][1] and people[i][3] should be the same, but other values will be different.\n    # people[i][2] and people[i][4] should be the same, but other values will be different.\n    # people[i][1] and people[i][2] and people[i][3] should be different.\n\n    # people[i][1] and people[i][3] should be different, and other values will be same.\n    # people[i][2] and people[i][4] should be different, and other values will be same.\n    # people[i][1] and people[i][3] should be different, and other values will be same.\n    # people[i][2] and people[i][4] should be different, and other values will be same.\n\n    # people[i][0] and people[i][4] should be the same, but other values will be different.\n    # people[i][2] and people[i][3] should be the same, but other values will be same.\n\n    # people[i][1] and people[i][4] should be the same, but other values will be same.\n    # people[i][2] and people[i][3] should be the same, but other values will be same.\n\n    if people[i][0]!= people[i][2]:\n        return 1\n    if people[i][1]!= people[i][3]:\n        return 1\n    if people[i][2]!= people[i][4]:\n        return 1\n\n    if people[i][0] == people[i][2] and people[i][1] == people[i][3]:\n        return 1\n    if people[i][0] == people[i][1] and people[i][2] == people[i][3]:\n        return 1\n    if people[i][0] == people[i][1] and people[i][3] == people[i][4]:\n        return 1\n    if people[i][2] == people[i][4] and people[i][1] == people[i][3]:\n        return 1\n    if people[i][2] == people[i][3] and people[i][1] == people[i][4]:\n        return 1\n    if people[i][0] == people[i][3] and people[i][1] == people[i][4]:\n        return 1\n    if people[i][0] == people[i][1] and people[i][4] == people[i][3]:\n        return 1\n\n    if people[i][1] == people[i][2] and people[i][2] == people[i][3] and people[i][0] == people[i][4]:\n        return 1\n    if people[i][1] == people[i][2] and people[i][3] == people[i][4] and people[i][2] == people[i][0]:\n        return 1\n\n    if people[i][1] == people[i][2] and people[i][3] == people[i][4] and people[i][1] == people[i][0]:\n        return 1\n\n    if people[i][1] == people[i][3] and people[i][2] == people[i][0] and people[i][1] == people[i][4]:\n        return 1\n    if people[i][1] == people[i][3] and people[i][3] == people[i][4] and people[i][1] == people[i][0]:\n        return 1\n    if people[i][1] == people[i][3] and people[i][4] == people[i][0] and people[i][1] == people[i][2]:\n        return 1\n    if people[i][1] == people[i][2] and people[i][4] == people[i][0] and people[i][1] == people[i][3]:\n        return 1\n    if people[i][1] == people[i][2] and people[i][3] == people[i][0] and people[i][1] == people[i][4]:\n        return 1\n\n    if people[i][0] == people[i][1] and people[i][1] == people[i][4]:\n        return 1\n    if people[i][0] == people[i][1] and people[i][2] == people[i][4]:\n        return 1\n    if people[i][0] == people[i][1] and people[i][3] == people[i][4]:\n        return 1\n    if people[i][0] == people[i][1] and people[i][4] == people[i][3]:\n        return 1\n\n    if people[i][0] == people[i][1] and people[i][2] == people[i][3]:\n        return 1\n    if people[i][0] == people[i][1] and people[i][3] == people[i][4]:\n        return 1\n    if people[i][0] == people[i][1] and people[i][4] == people[i][2]:\n        return 1\n    if people[i][0] == people[i][2] and people[i][1] == people[i][3]:\n        return 1\n    if people[i][0] == people[i][2] and people[i][3] == people[i][4]:\n        return 1\n    if people[i][0] == people[i][1] and people[i"
    },
    {
        "number": 4219,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    A_1, A_2 = map(int, stdin.split())\n    A_N = N - A_1 - A_2\n    A_list = list(map(int, stdin.split()))\n    solution = []\n    solution.extend(A_list)\n    answer = 0\n    x = 0\n    for i in range(len(solution)):\n        x = solution[i]\n        if solution[i] == 1:\n            if A_N - x == 1:\n                answer += 1\n            else:\n                answer += 2\n        elif solution[i] == 0:\n            if x == A_1:\n                answer += 1\n            else:\n                answer += 2\n    return str(answer)\n\ndef"
    },
    {
        "number": 4219,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n\n    result = 0\n\n    for i in range(N):\n        A, x, y = map(int, stdin.strip().split())\n\n        if A == 0:\n            result = max(x, y)\n        else:\n            x_1 = x\n            x_2 = x\n\n            while True:\n                if x_1 % y == 0:\n                    break\n                x_1 %= y\n                x_2 %= y\n\n            if x_2 == 1:\n                result = max(x_1, x_2)\n            else:\n                result = max(x_1, x_2, 1)\n\n    return str(result)\n\nn = int(input())\nstdin = input()\n\nprint(solution(stdin))"
    },
    {
        "number": 4219,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip().split('\\n')[0])\n    a = []\n    b = []\n    for i in range(n):\n        a.append(list(map(int, stdin.strip().split('\\n')[i].split(','))))\n    for i in range(n):\n        b.append(a[i].index(1) + 1)\n    s = ','.join([str(x) for x in a])\n    result = ''\n    for i in range(len(b)):\n        result = result + str(b[i]) + ',' + s[i] + ','\n    return result[:-1]"
    },
    {
        "number": 4219,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    A_1 = int(stdin.strip().split(' ')[1])\n    A_2 = int(stdin.strip().split(' ')[2])\n    A_N = int(stdin.strip().split(' ')[3])\n    A_1_id = 1 if A_1 == 1 else A_1\n    A_2_id = 1 if A_2 == 1 else A_2\n    A_N_id = 1 if A_N == 1 else A_N\n    A_N_N = 1 if A_N == A_N_id else 0\n    A_N_N_id = 1 if A_N_N == 1 else A_N_N\n    if A_1_id == A_2_id == A_N_id == A_N_N_id:\n        answer = A_1_id\n    else:\n        answer = 0\n    return str(answer)\n"
    },
    {
        "number": 4220,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    length = len(stdin)\n    if length > K:\n        return stdin[:K]\n    elif length < K:\n        return 'nikoand' + solution(stdin[:length])\n    else:\n        return stdin[:length]\n"
    },
    {
        "number": 4220,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    L,K = [int(x) for x in stdin.split()]\n    if K <= L:\n        return stdin\n    else:\n        for i in range(L-K):\n            print(stdin[:K],end=\"\")\n            stdin = stdin[K:]\n        print(stdin)\n        return stdin\n"
    },
    {
        "number": 4220,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    answer = \"\"\n    for k in stdin:\n        if k == \"n\":\n            answer += stdin[:7]\n            stdin = stdin[7:]\n        else:\n            answer += k\n    return answer\n\ndef"
    },
    {
        "number": 4220,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.split()[0])\n    s = list(stdin.split())\n    s.pop(0)\n    print(''.join(s))\n    s.pop(0)\n    print(''.join(s))\n    s.pop(0)\n    print(''.join(s))\n    s.pop(0)\n    print(''.join(s))\n    s.pop(0)\n    print(''.join(s))\n    s.pop(0)\n    print(''.join(s))\n    s.pop(0)\n    print(''.join(s))\n    s.pop(0)\n    print(''.join(s))\n    s.pop(0)\n    print(''.join(s))\n    return ''.join(s)\n"
    },
    {
        "number": 4220,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin.strip())\n\n    S = stdin.strip()\n    if len(S) > K:\n        print(S[:K])\n        return\n\n    S = S.replace(\"n\",\" \")\n    S = S.replace(\"i\",\" \")\n    S = S.replace(\"s\",\" \")\n    S = S.replace(\"t\",\" \")\n    S = S.replace(\"s\",\"\")\n    S = S.replace(\"a\",\" \")\n    S = S.replace(\"i\",\"\")\n    S = S.replace(\"t\",\"\")\n    S = S.replace(\"r\",\" \")\n    S = S.replace(\"a\",\"\")\n    S = S.replace(\"i\",\"\")\n    S = S.replace(\"t\",\"\")\n    S = S.replace(\"r\",\"\")\n    S = S.replace(\"e\",\" \")\n    S = S.replace(\"i\",\" \")\n    S = S.replace(\"t\",\" \")\n    S = S.replace(\"i\",\"\")\n    S = S.replace(\"r\",\" \")\n    S = S.replace(\"i\",\"\")\n    S = S.replace(\"t\",\" \")\n    S = S.replace(\"r\",\"\")\n    S = S.replace(\"o\",\" \")\n    S = S.replace(\"i\",\"\")\n    S = S.replace(\"t\",\" \")\n    S = S.replace(\"r\",\" \")\n    S = S.replace(\"o\",\"\")\n    S = S.replace(\"i\",\"\")\n    S = S.replace(\"t\",\" \")\n    S = S.replace(\"r\",\"\")\n    S = S.replace(\"o\",\"\")\n    S = S.replace(\"i\",\"\")\n    S = S.replace(\"t\",\" \")\n    S = S.replace(\"r\",\"\")\n    S = S.replace(\"o\",\"\")\n    S = S.replace(\"i\",\"\")\n    S = S.replace(\"t\",\" \")\n    S = S.replace(\"r\",\"\")\n    S = S.replace(\"o\",\"\")\n    S = S.replace(\"i\",\"\")\n    S = S.replace(\"t\",\" \")\n    S = S.replace(\"r\",\"\")\n    S = S.replace(\"o\",\"\")\n    S = S.replace(\"i\",\"\")\n    S = S.replace(\"r\",\" \")\n    S = S.replace(\"o\",\"\")\n    S = S.replace(\"i\",\"\")\n    S = S.replace(\"t\",\" \")\n    S = S.replace(\"i\",\"\")\n    S = S.replace(\"r\",\" \")\n    S = S.replace(\"o\",\"\")\n    S = S.replace(\"i\",\"\")\n    S = S.replace(\"t\",\" \")\n    S = S.replace(\"o\",\"\")\n    S = S.replace(\"i\",\"\")\n    S = S.replace(\"r\",\" \")\n    S = S.replace(\"o\",\"\")\n    S = S.replace(\"i\",\"\")\n    S = S.replace(\"t\",\" \")\n    S = S.replace(\"o\",\"\")\n    S = S.replace(\"i\",\"\")\n    S = S.replace(\"r\",\" \")\n    S = S.replace(\"o\",\"\")\n    S = S.replace(\"i\",\"\")\n    S = S.replace(\"r\",\"\")\n    S = S.replace(\"o\",\"\")\n    S = S.replace(\"i\",\"\")\n    S = S.replace(\"r\",\"\")\n    S = S.replace(\"o\",\"\")\n    S = S.replace(\"i\",\"\")\n    S = S.replace(\"r\",\"\")\n    S = S.replace(\"o\",\"\")\n    S = S.replace(\"i\",\"\")\n    S = S.replace(\"t\",\" \")\n    S = S.replace(\"r\",\"\")\n    S = S.replace(\"o\",\"\")\n    S = S.replace(\"i\",\"\")\n    S = S.replace(\"t\",\" \")\n    S = S.replace(\"r\",\"\")\n    S = S.replace(\"o\",\"\")\n    S = S.replace(\"i\",\"\")\n    S = S.replace(\"t\",\" \")\n    S = S.replace(\"r\",\"\")\n    S = S.replace(\"o\",\"\")\n    S = S.replace(\"i\",\"\")\n    S = S.replace(\"t\",\" \")\n    S = S.replace(\"r\",\"\")\n    S = S.replace(\"o\",\"\")\n    S = S.replace(\"i\",\"\")\n    S = S.replace(\"t\",\" \")\n    S = S.replace(\"r\",\" \")\n    S = S.replace(\"o\",\"\")\n    S = S.replace(\"i\",\"\")\n    S = S.replace(\"t\",\" \")\n    S = S.replace(\"r\",\" \")\n    S = S.replace(\"o\",\"\")\n    S = S.replace(\"i\",\"\")\n    S = S.replace(\"t\",\" \")\n    S = S.replace(\"r\",\"\")\n    S = S.replace(\"o\",\"\")\n    S = S.replace(\"i\",\"\")\n    S = S.replace(\"t\",\" \")\n    S = S.replace(\"r\",\" \")\n    S = S.replace(\"o\",\"\")\n    S = S.replace(\"i\",\"\")\n    S = S.replace(\"t\",\" \")\n    S = S.replace(\"r\",\" \")\n    S = S.replace(\"o\",\"\")\n    S = S.replace(\"i\",\"\")\n    S = S.replace(\"t\",\" \")\n    S = S.replace(\"r\",\" \")\n    S = S.replace(\"o\",\"\")\n    S = S.replace(\"i\",\"\")\n    S = S.replace(\"t\",\" \")\n    S = S.replace(\"r\",\" \")\n    S = S.replace(\"o\",\"\")\n    S = S.replace(\"i\",\"\")\n    S = S.replace(\"t\",\" \")\n    S = S.replace(\"r\",\" \")\n    S = S.replace(\"o\",\"\")\n    S = S.replace(\"i\",\"\")\n    S = S.replace(\"t\",\" \")\n    S = S.replace(\"r\",\" \")\n    S = S.replace(\"o\",\"\")\n    S = S.replace(\"i\",\"\")\n    S = S.replace(\"t\",\" \")\n    S = S.replace(\"r\",\" \")\n    S = S.replace(\"o\",\"\")\n    S = S.replace(\"i\",\"\")\n    S = S.replace(\"t\",\" \")\n    S = S.replace(\"r\",\" \")\n    S = S.replace(\"o\",\"\")\n    S = S.replace(\"i\",\"\")\n    S = S.replace(\"t\",\" \")\n    S = S.replace(\"r\",\" \")\n    S = S.replace(\"o\",\"\")\n    S = S.replace(\"i\",\"\")\n    S = S.replace(\"t\",\" \")\n    S = S.replace(\"r\",\" \")\n    S = S.replace(\"o\",\"\")\n    S = S.replace(\"i\",\"\")\n    S = S.replace(\"t\",\" \")\n    S = S.replace(\"r\",\" \")\n    S = S.replace(\"o\",\"\")\n    S = S.replace(\"i\",\"\")\n    S = S.replace(\"t\",\" \")\n    S = S.replace(\"r\",\" \")\n    S = S.replace(\"o\",\"\")\n    S = S.replace(\"i\",\"\")\n    S = S.replace(\"t\",\" \")\n    S = S.replace(\"r\",\" \")\n    S = S.replace(\"o\",\"\")\n    S = S.replace(\"i\",\"\")\n    S = S.replace(\"t\",\" \")\n    S = S.replace(\"r\",\" \")\n    S = S.replace(\"o\",\"\")\n    S = S.replace(\"i\",\"\")\n"
    },
    {
        "number": 4220,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    K, S = map(int, stdin.split())\n    S = S * 10 + ord(S[0]) - 65\n    for i in range(1, K):\n        S = S * 10 + ord(S[i]) - 65\n    return S\n"
    },
    {
        "number": 4220,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\ndef"
    },
    {
        "number": 4220,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip().upper()\n    if len(s) == K:\n        return s\n    if len(s) >= K:\n        return s[:K]\n    \n    return solution(s[K:]) + ''.join(sorted(s[:K], key=len))\n"
    },
    {
        "number": 4220,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N,K = map(int,stdin.split())\n    if N > K:\n        return \" \".join(stdin[K:])\n    print(stdin[K-N:K])\n\n-----Sample Input-----\n3\nkiri alss\nkiri alss\n\n-----Sample Output-----\nkiri\nkiri alss\nkiri alss\n\nkiri\nkiri alss\nkiri alss\nkiri alss\n"
    },
    {
        "number": 4220,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace('nikoandsolstice', 'nikoand...')\n"
    },
    {
        "number": 4221,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    word = stdin.split(\" \")\n    count = 0\n    for word in word:\n        if word.endswith(\"e\"):\n            word = word.replace(\"e\", \"s\")\n            word = word.replace(\"s\", \"es\")\n            count += 1\n        elif word.endswith(\"e\"):\n            word = word.replace(\"e\", \"es\")\n            word = word.replace(\"es\", \"eses\")\n            count += 1\n        else:\n            word = word.replace(\"e\", \"s\")\n            word = word.replace(\"s\", \"es\")\n            count += 1\n    return word + str(count)\n"
    },
    {
        "number": 4221,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    word = stdin.split()\n    print(word)\n    if not word[0].endswith(\"s\"):\n        word[0] = word[0] + \"es\"\n    if not word[-1].endswith(\"s\"):\n        word[-1] = word[-1] + \"es\"\n    return''.join(word)\n"
    },
    {
        "number": 4221,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.split()\n    if len(S) == 1:\n        return S[0]\n    for i in range(1,len(S)):\n        if S[i][-1]!= \"e\":\n            return S[i]+\"es\"\n        S[i] = S[i][:-1]\n    return \"es\"\n\n--------------------------------------------------------------------------------------------------------------------------------------------"
    },
    {
        "number": 4221,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split(\" \")\n    while len(s) > 1:\n        s[1] = s[1].capitalize()\n        s = s[:-1]\n    return \" \".join(s)\n\ndef"
    },
    {
        "number": 4221,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def proc(s: str):\n        plural = ''\n        if s.endswith('s'):\n            plural += s[:-2]\n            plural += 'es'\n        else:\n            plural += s[:-1]\n            plural +='s'\n        return plural\n\n    def check(x: str) -> str:\n        s = x[0]\n        if s == 'e':\n            return 'es'\n        else:\n            return s\n\n    for line in stdin:\n        if line.startswith(' '):\n            plural = check(line[1:])\n            if plural == 'es':\n                return proc(plural)\n            else:\n                plural = 'es' + plural\n                return proc(plural)\n        else:\n            s = check(line[1])\n            if s == 'e':\n                s +='s'\n            else:\n                s += 'es'\n            if s == 'es':\n                s += 'e'\n            return proc(s)\n\n    return proc(proc(s)[:-1])\n\n\"\"\"\ndef"
    },
    {
        "number": 4221,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n  return \"apples\"\n\n\n\n\"\"\"\n\n\nclass Solution:\n    def singular_form(self, stdin):\n        \"\"\"\n        Runtime: 32 ms (82.62%)\n        Memory Usage: 16.9 MB (38.19%)\n        \"\"\"\n        S = stdin\n        # S = str(S).lower()\n        # print(S)\n        if len(S) == 0 or S[0]!='s':\n            return 'es'\n        s = S.split('s')\n        s = s[-1]\n        return s\n\n    def singular_form(self, stdin):\n        \"\"\"\n        Runtime: 32 ms (80.50%)\n        Memory Usage: 16.9 MB (36.67%)\n        \"\"\"\n        S = stdin\n        if len(S) == 0 or S[0]!= 'e':\n            return 'es'\n        s = S.split('e')\n        s = s[-1]\n        return s\n"
    },
    {
        "number": 4221,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n  \n  return ''\n"
    },
    {
        "number": 4221,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n  words = stdin.split()\n  \n  for word in words:\n    word = word.lower()\n    if len(word)>1 and word[-1]=='s':\n      word+='e'\n    if len(word)>1 and word[-1]=='s' and word[-2]=='e':\n      word+='e'\n    if len(word)>1 and word[-1]=='s' and word[-2]=='e' and word[-3]=='e':\n      word+='e'\n  \n  return word\n\nprint(solution(input()))\n\"\"\"\n\nclass Solution:\n    def pluralize(self, word: str) -> str:\n        s = word\n        if len(s)>1 and s[-1]=='s':\n            s+='e'\n        if len(s)>1 and s[-1]=='s' and s[-2]=='e':\n            s+='e'\n        if len(s)>1 and s[-1]=='s' and s[-2]=='e' and word[-3]=='e':\n            s+='e'\n        return s\n\nprint(Solution().pluralize(\"apples\"))"
    },
    {
        "number": 4221,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n  s = stdin.split()\n  s = s[0]\n  if s.endswith(\"s\"):\n    s = s[:-1]\n  elif s.endswith(\"es\"):\n    s = s[:-2]\n  else:\n    s = s[:-1]\n  return s+\"s\"\n\nExample:\nInput: \"apple\"\nOutput: \"apples\"\nExplanation:\napple ends with e, so its plural form is apples.\nNote that e is not part of the plural form of apple.\n\nInput: \"apples\"\nOutput: \"apples\"\nExplanation:\napples ends with e, so its plural form is apples.\nNote that e is not part of the plural form of apples.\n\"\"\"\n\ndef"
    },
    {
        "number": 4221,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return 'apples'\n"
    },
    {
        "number": 4222,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n  N, K = map(int, stdin.split())\n  n = list(map(int, input().split()))\n  for i in range(N):\n    a, d = map(int, input().split())\n    if a == 1:\n      n[i] -= d\n    if a == K:\n      print(1)\n    else:\n      print(0)\n  return \"0\"\n\"\"\"\n\ndef"
    },
    {
        "number": 4222,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    d_1, A_1 = map(int, stdin.split())\n    d_2, A_2 = map(int, stdin.split())\n    d_3, A_3 = map(int, stdin.split())\n    d_1 -= 1\n    d_2 -= 1\n    d_3 -= 1\n    if d_1 + d_2 + d_3 < N and A_1 + A_2 + A_3 == K:\n        return str(1)\n    return str(0)"
    },
    {
        "number": 4222,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    d_1, d_2 = map(int, stdin.split())\n    A = [[] for _ in range(N)]\n    for _ in range(K):\n        A[int(stdin.split()[1]) - 1].append(int(stdin.split()[0]) - 1)\n    A = sorted(A)\n    if A[d_1]!= A[d_2]:\n        return '-'\n    return str(len(A[d_1])) + '\\n' + str(len(A[d_2])) + '\\n'\n-----Constraints-----\n - All values in input are integers.\n - 1 \\leq N \\leq 100\n - 1 \\leq K \\leq 100\n - 1 \\leq d_i \\leq N\n - 1 \\leq A_{i, 1} < \\cdots < A_{i, d_i} \\leq N\n\n-----Input-----\nInput is from Standard Input in the following format:\nN K\nd_1\nA_{1, 1} \\cdots A_{1, d_1}\n\\vdots\nd_K\nA_{K, 1} \\cdots A_{K, d_K}\n\n-----Output-----\nPrint the answer.\n\n-----Sample Input-----\n3 2\n1 3\n2\n2\n3\n\n-----Sample Output-----\n1\n\n - Snuke 1 has Snack 1.\n - Snuke 2 has no snacks.\n - Snuke 3 has Snack 1 and 2.\nThus, there will be two targets: Snuke 2 and Snuke 3.\ndef"
    },
    {
        "number": 4222,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    d_i = sorted(set(A))\n    total = 0\n    for i in range(N):\n        for j in range(K):\n            if j < len(d_i) and A[i] < d_i[j]:\n                break\n        else:\n            continue\n        total += 1\n    return str(total)\n\n\n----------------------------------------------------\n\ndef"
    },
    {
        "number": 4222,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, K, d_1, d_2, A_1, A_2, A_3 = map(int, stdin.split())\n    if N < 2 or K < 2 or d_1 < N or d_1 < d_2 or d_1 < d_2 or d_1 < A_1 or d_1 < A_2 or d_1 < A_3 or d_2 < A_1 or d_2 < d_1 or d_2 < d_2 or A_2 < A_1 or A_2 < A_2 or A_3 < A_1:\n        return 'not enough to make the victory'\n    if d_1 == d_2:\n        return 'not enough to make the victory'\n    if A_1 < A_2 or A_1 < A_3:\n        return 'not enough to make the victory'\n    if d_1 == d_2:\n        return 'not enough to make the victory'\n    if A_3 < A_1 or A_3 < A_2:\n        return 'not enough to make the victory'\n    def get_snakes(snakes: list) -> dict:\n        for snk in snakes:\n            if snk in ['snuke_1','snuke_2','snuke_3']:\n                snk = snk.split('_')\n                snk = map(int, snk)\n                snks = dict(zip(range(1, len(snk) + 1), snk))\n                return snks\n        return dict()\n    if A_1 in ['snuke_1','snuke_2','snuke_3']:\n        return 'not enough to make the victory'\n    if A_2 in ['snuke_1','snuke_2','snuke_3']:\n        return 'not enough to make the victory'\n    snk_1 = get_snakes(['snuke_1'])\n    snk_2 = get_snakes(['snuke_2'])\n    snk_3 = get_snakes(['snuke_3'])\n    if A_1 in ['snuke_1','snuke_2','snuke_3']:\n        if snk_1:\n            snk_1 = snk_1.get('snuke_1', 0) + 1\n            snk_1 = str(snk_1)\n        else:\n            snk_1 = '0'\n    if A_2 in ['snuke_1','snuke_2','snuke_3']:\n        if snk_2:\n            snk_2 = snk_2.get('snuke_2', 0) + 1\n            snk_2 = str(snk_2)\n        else:\n            snk_2 = '0'\n    if A_3 in ['snuke_1','snuke_2','snuke_3']:\n        if snk_3:\n            snk_3 = snk_3.get('snuke_3', 0) + 1\n            snk_3 = str(snk_3)\n        else:\n            snk_3 = '0'\n    if snk_1 == '0' and snk_2 == '0' and snk_3 == '0':\n        return 'not enough to make the victory'\n    if snk_1 == '0' and snk_2 == '0' and snk_3 == '0':\n        return 'not enough to make the victory'\n    if snk_1 == '0' and snk_2 == '0':\n        return 'not enough to make the victory'\n    if snk_1 == '0' and snk_2 == '0':\n        return 'not enough to make the victory'\n    if snk_1 == '0' and snk_2 == '1':\n        return 'not enough to make the victory'\n    if snk_1 == '0' and snk_2 == '1':\n        return 'not enough to make the victory'\n    if snk_1 == '0':\n        return 'not enough to make the victory'\n    if snk_1 == '0':\n        return 'not enough to make the victory'\n    if snk_2 == '0':\n        return 'not enough to make the victory'\n    if snk_2 == '0':\n        return 'not enough to make the victory'\n    if snk_3 == '0':\n        return 'not enough to make the victory'\n    if snk_3 == '0':\n        return 'not enough to make the victory'\n    if A_1 =='snuke_1':\n        return 'not enough to make the victory'\n    if A_1 =='snuke_2':\n        return 'not enough to make the victory'\n    if A_1 =='snuke_3':\n        return 'not enough to make the victory'\n    if A_1 =='snuke_4':\n        return 'not enough to make the victory'\n    if A_2 =='snuke_1':\n        return 'not enough to make the victory'\n    if A_2 =='snuke_2':\n        return 'not enough to make the victory'\n    if A_2 =='snuke_3':\n        return 'not enough to make the victory'\n    if A_2 =='snuke_4':\n        return 'not enough to make the victory'\n    if A_3 =='snuke_1':\n        return 'not enough to make the victory'\n    if A_3 =='snuke_2':\n        return 'not enough to make the victory'\n    if A_3 =='snuke_3':\n        return 'not enough to make the victory'\n    return 'not enough to make the victory'\n"
    },
    {
        "number": 4222,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n  def dfs(snack, k):\n    if k == 1:\n      print(snack)\n      return\n    if k < 0:\n      print('Fail')\n      return\n    if d_i in snack:\n      snack.pop(snack.index(d_i))\n      snack.pop(snack.index(d_i))\n      print(snack)\n      return\n    snack.append(d_i)\n    dfs(snack, k-1)\n    snack.pop(snack.index(d_i))\n    snack.pop(snack.index(d_i))\n    print(snack)\n  \n  N, K = map(int, stdin.split())\n  snack = []\n  dfs(snack, K)\n'''\n\nimport sys\n\ndef"
    },
    {
        "number": 4222,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    A_ = list(map(int, input().split()))\n    A = [0] + A_\n    d_i = [0] + list(map(int, input().split()))\n    A.insert(1, A[0])\n    d_i.insert(1, d_i[0])\n    for i in range(1, d_i[0]+1):\n        d_i[i] += d_i[i-1]\n    if d_i[d_i[-1]] == N:\n        return '1'\n    else:\n        return '0'\n\n-----Sample Output-----\n1\n\n - Snuke 1 has Snack 1.\n - Snuke 2 has no snacks.\n - Snuke 3 has Snack 1 and 2.\nThus, there will be one victim: Snuke 2.\ndef"
    },
    {
        "number": 4222,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    d_1, d_2 = map(int, stdin.split())\n    A_1 = sorted(list(map(int, stdin.split())))\n    A_2 = sorted(list(map(int, stdin.split())))\n    A_3 = sorted(list(map(int, stdin.split())))\n    A_1.sort()\n    A_2.sort()\n    A_3.sort()\n    if A_1 == A_2:\n        return str(A_1[0] + A_2[0])\n    if A_1 == A_3:\n        return str(A_1[0] + A_3[0])\n    if A_1 == A_2:\n        return str(A_2[0] + A_1[0])\n    if K >= len(A_1):\n        return str(A_1[0] + A_2[0])\n    if K >= len(A_2):\n        return str(A_1[0] + A_2[0])\n    if K >= len(A_3):\n        return str(A_1[0] + A_3[0])\n    if K >= len(A_2):\n        return str(A_1[0] + A_3[0])\n    if K >= len(A_3):\n        return str(A_1[0] + A_2[0])\n    return str(A_1[0] + A_2[0] + A_3[0])\n\n\n-----Sample Input-----\n3 2\n2\n1 3\n1\n3\n\n-----Sample Output-----\n1\n\n - Snuke 1 has Snack 1.\n - Snuke 2 has no snacks.\n - Snuke 3 has Snack 1 and 2.\nThus, there will be one victim: Snuke 2.\ndef"
    },
    {
        "number": 4222,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    k, n = [int(i) for i in stdin.split()]\n    a_1, a_2, a_3 = [int(i) for i in stdin.split()]\n    num_1 = 0\n    num_2 = 0\n    num_3 = 0\n    for i in range(n):\n        for j in range(k):\n            if a_1 * (i + 1) <= a_2 and a_2 <= a_1 * (i + 1) <= a_3 * i:\n                num_1 += 1\n            if a_1 * (i + 1) <= a_2 and a_2 <= a_1 * (i + 1) <= a_3 * i:\n                num_2 += 1\n            if a_1 * (i + 1) <= a_2 and a_2 <= a_1 * (i + 1) <= a_3 * i:\n                num_3 += 1\n    return str(num_1) + \" \" + str(num_2) + \" \" + str(num_3)\n-----Sample Output-----\n1\n1\n2\n-----Sample Input-----\n3 3\n1 2 1 3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n3\n"
    },
    {
        "number": 4222,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    K = int(stdin.strip().split()[1])\n    d = list(map(int, stdin.strip().split()[2:]))\n    \n    def dfs(dp, i):\n        if len(dp) == K:\n            print(dp[i], end=' ')\n            return\n        for j in range(i, N):\n            dp.append(dp[i]+d[j])\n            dfs(dp, j)\n            dp.pop()\n            \n    dfs([], 0)\n    \n\"\"\"\n\ndef"
    },
    {
        "number": 4223,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    S = stdin.split()\n    if len(S)!= N:\n        return \"0\"\n    else:\n        return \"\".join(S)\n\nIf you have some slimes on the left side and not on the right side, you will have to fuse them into one larger slime.\nThe right side will be the same as left side, except that the first letter will be something different.\n\nIf the first letter is a space, it is not a different letter, and if there is any space on the left side, the first letter will become a space.\n\nIf there are several adjacent slimes, you will have to fuse them into a larger slime.\nIf you have two adjacent slimes, you will have to fuse them into one larger slime without changing the color.\n\nIf you have two adjacent slimes and the first letter of the second adjacent slime is a space, the second adjacent slime will become a space.\nIf you have two adjacent slimes and the first letter of the second adjacent slime is a space, the second adjacent slime will become a space, but it is not a different letter, so you will have to fuse them into a larger slime without changing the color.\n\"\"\"\n\n\n\ndef"
    },
    {
        "number": 4223,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def get_color(val: str):\n        return val[0]\n\n    n = int(stdin.strip())\n    if n <= 0:\n        return 'No'\n    if n == 1:\n        return 'No'\n    if n == 2:\n        return 'No'\n    slimes = [get_color(s) for s in stdin.strip().split()]\n    groups = [[]]\n    # We start at a new group and then move all the slimes on each group\n    # until we get to the end of a group.\n    # This is because we'd like to \"break\" if we cut the last one to make it shorter\n    # than the other slimes.\n    # The break is quite tricky because we know we are in a group so we want\n    # to return the color of the last group.\n    for _ in range(n - 2):\n        # Split the current group into groups.\n        # If the group is empty, then we know we're at the end of a group\n        # so we can return the final color.\n        if not groups[-1]:\n            break\n        # We are at the end of a group so we can't add more slimes.\n        # We can only do this if this group starts and ends with the same color\n        # as the last one we've looked at.\n        elif groups[-1][-1] == groups[-1][-2]:\n            groups[-1].append(get_color(groups[-1][-1]))\n        # We are at the end of a group so we can add more slimes.\n        # Otherwise we want to move the last group.\n        else:\n            # If the last group is empty, then we know we're at the end of a group\n            # so we can return the final color.\n            # Otherwise we want to add the new group\n            groups.append([get_color(s) for s in groups[-1]])\n    # Finally, return the color of the last group.\n    return groups[-1][-1]\n"
    },
    {
        "number": 4223,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N,S = map(int,stdin.split())\n    return '\\n'.join(map(str,(S[:N//2]+S[N//2:])[::-1]))\n\n\"\"\"\nclass Solution:\n    def nCr(self, n, r):\n        f = factorial\n        return f(n) // f(n-r) // f(r) // f(r+1)\n    def solution(self, N, S):\n        def cycle_length(a):\n            count = 0\n            for i in range(N):\n                count += sum(1 for j in range(len(a)) if a[i] == a[j])\n            return count\n        return self.nCr(N,cycle_length(S))\n\nn = 10\nS = \"aabbbaaca\"\nsolution(n,S)\n"
    },
    {
        "number": 4223,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N,S=map(int,stdin.split())\n    S=[char for char in S]\n    if len(S)%2:\n        return \"0\"\n    slimes=int(len(S)/2)\n    S=list(S)\n    for i in range(slimes):\n        S[i*2]=S[i*2]+S[i*2+1]\n    S=list(S)\n    color=S[0]\n    ans=0\n    for i in range(slimes+1):\n        ans+=S[i]==color\n    return ans\n"
    },
    {
        "number": 4223,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, S = map(int, stdin.split())\n    answer = 0\n    for i in range(N):\n        c = S[i]\n        cnt = 0\n        for j in range(i+1, N):\n            if S[j] == c:\n                cnt += 1\n            else:\n                break\n        answer += min(N - cnt, N - i + cnt)\n    return str(answer)\n\"\"\""
    },
    {
        "number": 4223,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return str(len([s for s in stdin.strip().split() if s]) - len(set(stdin.strip().split())))\n'''\n\ndef"
    },
    {
        "number": 4223,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\ndef"
    },
    {
        "number": 4223,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    S = stdin.split()\n    cnt = 0\n    S = list(S)\n    for i in range(N):\n        if S[i].isalpha():\n            S[i] = S[i].lower()\n        else:\n            S[i] = S[i][1] + S[i][0]\n        if i == N - 1:\n            cnt += 1\n    return str(cnt)\n\n\nprint(solution(\"10\"))\n"
    },
    {
        "number": 4223,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin[0])\n    S = stdin[1]\n    answer = 0\n    i = 0\n    while True:\n        if i % N == 0:\n            S_ = list(S)\n            for i in range(N):\n                if i % 2 == 1:\n                    S_[i], S_[i + N] = S_[i + N], S_[i]\n            answer += len(S_)\n        else:\n            answer += 1\n        if S == S_:\n            break\n        i += 1\n    print(answer)\n    return answer\n'''\n\ndef"
    },
    {
        "number": 4223,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    S = list(stdin.split())\n    N1, N2 = len(S), len(S)\n    S.sort()\n    \n    # Solution1\n    # if N1 > N2:\n    #     return (N1-N2) + (N2-N1)\n    \n    # Solution2\n    # return (N1 - N2) + (N2 - N1)\n    \n    # Solution3\n    return (N2 - N1) + (N2 - N1)\n\"\"\""
    },
    {
        "number": 4224,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, a = map(int, stdin.split())\n    a_i = list(map(int, stdin.split()))\n    res = 0\n    for i in range(N):\n        res = res + a_i[i] * (2 ** i)\n    return str(res)\n"
    },
    {
        "number": 4224,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, a_1, a_2, a_3 = map(int, stdin.split())\n    def divisor_counter(N):\n        count = 0\n        for i in range(1, N + 1):\n            if N % i == 0:\n                count += 1\n        return count\n    result = divisor_counter(N)\n    if result == N:\n        print(N)\n    else:\n        count = N - result\n        if count > result:\n            print(count)\n        else:\n            print(result)\nsolution(input())"
    },
    {
        "number": 4224,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    a_list = [int(i) for i in stdin.split()]\n    \n    if a_list[0] >= 3:\n        return str(a_list[0])\n    \n    if a_list[0] >= 5:\n        return str(a_list[0]) +'' + solution(str(N - a_list[0]) +'' + str(a_list[1]))\n    \n    if a_list[0] >= 2:\n        return str(a_list[0]) +'' + solution(str(N - a_list[0]) +'' + str(a_list[1])) +'' + solution(str(N - a_list[0]) +'' + str(a_list[2]))\n    \n    if a_list[0] >= 1:\n        return solution(str(N - a_list[0])) +'' + solution(str(N - a_list[1])) +'' + solution(str(N - a_list[2]))\n\nTime complexity: O(N)\nSpace complexity: O(1)"
    },
    {
        "number": 4224,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    a_list = list(map(int,stdin.split()))\n    def div_by_3(a):\n        result = a % 3\n        if result == 0:\n            return 0\n        else:\n            return 1\n    def multiply_by_2(a):\n        result = a * 2\n        if result == 0:\n            return 0\n        else:\n            return 1\n    operations = 0\n    for i in range(N):\n        operations += a_list[i] * max(div_by_3(a_list[i]),multiply_by_2(a_list[i]))\n    return str(max(operations,N))\n\nTime complexity: O(N)\nSpace Complexity: O(N)\n\nAccepted\n1756\n\nSubmissions\n968\n\nComplexity\nTime: O(N)\nSpace: O(N)\n\nRuntime: 64 ms, faster than 95.84% of Python3 online submissions for AtCoder Beginner Contest 100 is taking place, the office of AtCoder, Inc. is decorated with a sequence of length N, a = {a_1, a_2, a_3,..., a_N}.\n\n\"\"\"\nclass Solution:\n    def maximumOperations(self, N: int) -> int:\n        MOD = 10**9+7\n        prev = 0\n        visited = {0: [0, 0]}\n        def dfs(cur):\n            if cur == N:\n                return 0\n            if cur not in visited:\n                visited[cur] = []\n                visited[cur].append(prev)\n                val = prev * (2 * cur - 1)\n                for i in range(1, cur+1):\n                    if prev in visited[i]:\n                        continue\n                    val += dfs(i)\n                val *= 3\n                if val % MOD == 0:\n                    val %= MOD\n                visited[cur] = visited[cur].pop()\n                visited[cur].append(val)\n                return val\n            else:\n                return visited[cur][-1]\n        return dfs(1) % MOD\n\n\"\"\"\nAccepted\n849\n\nSubmissions\n114\n\nComplexity\nTime: O(N)\nSpace: O(N)\n\nRuntime: 60 ms, faster than 97.74% of Python3 online submissions for AtCoder Beginner Contest 100 is taking place, the office of AtCoder, Inc. is decorated with a sequence of length N, a = {a_1, a_2, a_3,..., a_N}.\n\n\"\"\"\n"
    },
    {
        "number": 4224,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    a_list = list(map(int,stdin.split()))\n    a_list.sort()\n    print(N-len(a_list))"
    },
    {
        "number": 4224,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, a_1, a_2, a_3, a_N = map(int, stdin.split())\n    sequence = [a_1, a_2, a_3, a_N]\n    maximum = 1\n    for i in range(N-1):\n        for j in range(i+1, N):\n            sequence[i] *= sequence[j]\n            sequence[j] = sequence[i] // sequence[j]\n            if sequence[i] % sequence[j]!= 0:\n                return str(maximum)\n            else:\n                maximum += 1\n    return str(maximum)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4224,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    if n == 0:\n        return ''\n    if n == 1:\n        return str(a)\n    \n    result = ''\n    for i in range(1, n + 1):\n        if i == n:\n            result += '*'\n        else:\n            result += f'{a}'\n            if n % 2 == 1:\n                result += '-'\n            else:\n                result += '+'\n    \n    return result\n"
    },
    {
        "number": 4224,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nclass Solution:\n    def divide(self, a, b):\n        return a % b if a % b!= 0 else a // b\n\n    def multiply(self, a, b):\n        return a * b if a * b!= 0 else a // b\n\n    def divide(self, a, b):\n        return self.divide(a, b) if a * b!= 0 else self.multiply(a, b)\n"
    },
    {
        "number": 4224,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    a_1 = 1\n    a_2 = 1\n    a_3 = 1\n    for i in range(N):\n        a_1, a_2, a_3 = a_3, a_3, a_1 + a_3\n    print(a_1, a_2, a_3)\n\nInput:\n3\n5 2 4\nSample Output:\n4\n\nExplanation:\n- The sequence is {5, 2, 4}. Three operations can be performed:\n - First, multiply a_1 by 3, multiply a_2 by 3 and divide a_3 by 2. The sequence is now {15, 6, 2}.\n - Next, multiply a_1 by 3, divide a_2 by 2 and multiply a_3 by 3. The sequence is now {45, 3, 6}.\n - Finally, multiply a_1 by 3, multiply a_2 by 3 and divide a_3 by 2. The sequence is now {135, 9, 3}.\ndef"
    },
    {
        "number": 4224,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, a_i = map(int, stdin.split())\n    sequence = [int(x) for x in stdin.split()]\n    max_ops = 0\n    while sequence:\n        a_i = sequence.pop(0)\n        for i in range(a_i+1):\n            if sequence:\n                a_i = sequence[0]\n                sequence.pop(0)\n                if a_i > 0:\n                    sequence.insert(0, a_i*3)\n            else:\n                break\n        max_ops += 1\n    return str(max_ops)\n"
    },
    {
        "number": 4225,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    cards = [int(x) for x in stdin.split()]\n    return max(sum(cards[:K]) + sum(cards[A:B]), sum(cards[C:]) + -1)\n"
    },
    {
        "number": 4225,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s, k = map(int, stdin.split())\n    a, b, c = map(int, stdin.split())\n    return str(min(a, b, c) + max(a, b, c) + max(a, b, c) + max(a, b, c) + max(a, b, c))\n\n1 1 1\n2\n'''\ndef"
    },
    {
        "number": 4225,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, K = [int(s) for s in stdin.split(\" \")]\n    return str(max(A, B, C) + max(K - (A + B + C), -1))"
    },
    {
        "number": 4225,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, K = map(int, stdin.split())\n    p = (K+1)*(A+1)\n    return str(p)\n"
    },
    {
        "number": 4225,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, K = map(int, stdin.split())\n    # print(A,B,C,K)\n    # print(A,B,C)\n    if A>B+C or A>B+C+K or A>C:\n        return str(int(A/B+C/C))\n    if A+B+C<K or A+B+C<K or A+C+B<K or A+C+B<K or B+C+C<K:\n        return str(int(B+C/C))\n    return str(int(A/B+C/C+B+C/C))\n\n\"\"\"\n\nclass Solution:\n    def maximumTotal(self, A, B, C, K):\n        if A+B+C>K:\n            return str(int(A/B+C/C))\n        if A+B+C==K:\n            return str(int(B/C))\n        if A+B+C==K:\n            return str(int(A/C))\n\n        if A+C+B==K:\n            return str(int(A/B+C/C))\n\n        if B+C+A==K:\n            return str(int(B/C))\n\n        if B+C+A==K:\n            return str(int(B/C))\n\n        if C+A+B==K:\n            return str(int(C/A))\n\n        if C+A+B==K:\n            return str(int(C/A))\n        return str(int(B/C))"
    },
    {
        "number": 4225,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    K = max(0, max(A, B, C)-1)\n    return str(K+A+B+C)\n"
    },
    {
        "number": 4225,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n,k,j = map(int, stdin.split())\n    A = 1\n    B = 0\n    C = -1\n    for i in range(j):\n        B,C = map(int, stdin.split())\n        A = A + B\n        A = A + C\n    print(A)\n    return str(A)\n    \n"
    },
    {
        "number": 4225,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, K = map(int, stdin.split())\n    \n    # return all possible sum of 1s and -1s\n    s1 = 1\n    s2 = 1\n    \n    for i in range(0, A+B+C):\n        if i%K == 0:\n            s1 = s1+i\n        else:\n            s2 = s2+i\n    return str(max(s1, s2))\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n"
    },
    {
        "number": 4225,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, K = map(int, stdin.split())\n    A, B, C = A+1, B+1, C+1\n    # print(f'{A}, {B}, {C}, {K}')\n    # print(f'A: {A}, B: {B}, C: {C}, K: {K}')\n    # print(f'{A} + {B} + {C} = {A+B+C}')\n    # print(f'Maximum possible sum: {A+B+C}')\n    if K == 0:\n        return '0'\n    # print(f'{A} + {B} + {C} = {A+B+C}')\n    # print(f'{A} + {B} + {C} = {A+B+C}')\n    # print(f'{A} + {B} + {C} = {A+B+C}')\n    # print(f'{A} + {B} + {C} = {A+B+C}')\n    # print(f'{A} + {B} + {C} = {A+B+C}')\n    sum_list = []\n    for a, b, c, k in zip(A, B, C, K):\n        sum_list.append(a+b+c+k)\n    # print(sum_list)\n    # print(max(sum_list))\n    # print(max(sum_list))\n    # print(max(sum_list))\n    # print(sum_list)\n    return str(max(sum_list))\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4225,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, K = map(int, stdin.split())\n    num_cards = A + B + C + K\n    return str(num_cards)\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4226,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    X, Y = [int(i) for i in stdin.split()]\n    \n    def check(X, Y):\n        # Gives us a solution for which we know if there is a combination of numbers of cranes and turtles in which this statement is correct\n        if Y == X:\n            return \"Yes\"\n        else:\n            return \"No\"\n    \n    cranes = set(range(1, X + 1))\n    turtles = set(range(1, Y + 1))\n    \n    if X in turtles and Y in cranes:\n        # Print Yes if there is a combination of numbers of cranes and turtles in which the statement is correct\n        return \"Yes\"\n    else:\n        # Print No if there is not a combination of numbers of cranes and turtles in which the statement is correct\n        return \"No\""
    },
    {
        "number": 4226,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    num1, num2 = [int(i) for i in stdin.split()]\n    \n    if num1 >= num2:\n        if num1 % 2 == 1:\n            return \"No\"\n        else:\n            return \"Yes\"\n    else:\n        if num2 % 2 == 1:\n            return \"No\"\n        else:\n            return \"Yes\"\n\n### Un-comment next two lines to test and print results."
    },
    {
        "number": 4226,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Enter your code here. Read input from STDIN. Print output to STDOUT\n    x, y = map(int, stdin.split())\n    cranes = x // 3\n    turtles = y // 2\n    if (cranes + turtles) % 2 == 0:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n"
    },
    {
        "number": 4226,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x, y = [int(i) for i in stdin.split()]\n    cans = (x+y)\n    turtles = (x-y)\n    if cans==turtles:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4226,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n  X, Y = map(int, stdin.split())\n  if X > Y:\n    return \"Yes\"\n  elif X == Y:\n    return \"No\"\n  elif X < Y:\n    return \"No\"\n  elif X < Y:\n    return \"No\"\n  else:\n    return \"Yes\"\n\nprint(solution(\"3 8\"))\n"
    },
    {
        "number": 4226,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n    X, Y = map(int, stdin.split())\n    if (X+Y)%2!= 0:\n        return \"No\"\n    if X > Y:\n        return \"Yes\"\n    elif X < Y:\n        return \"No\"\n    \n    \nprint(solution(\"3 8\"))\n"
    },
    {
        "number": 4226,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    X, Y = map(int, stdin.split())\n    \n    for i in range(1, X+1):\n        for j in range(1, Y+1):\n            if ((i % 10) == 0) or (j % 10 == 0):\n                if (i % 10 == 0) and (j % 10 == 0):\n                    cranes, turtles = 0, 0\n                    for k in range(1, i//10 + 1):\n                        cranes += k\n                    for l in range(1, j//10 + 1):\n                        turtles += l\n                    if (cranes == turtles) and (cranes == X) and (turtles == Y):\n                        return \"Yes\"\n                else:\n                    cranes, turtles = 0, 0\n                    for k in range(1, i//10 + 1):\n                        cranes += k\n                    for l in range(1, j//10 + 1):\n                        turtles += l\n                    if (cranes == turtles) and (cranes == X) and (turtles == Y):\n                        return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4226,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin.split(' ')[0])\n    Y = int(stdin.split(' ')[1])\n    crane_cranes = 0\n    turtle_cranes = 0\n    crane_turtle = 0\n    turtle_turtle = 0\n\n    # nCrane-Cranes\n    for i in range(X, Y):\n        crane_cranes += int(stdin.split(' ')[i])\n\n    # nTurtle-Turtle\n    for i in range(X, Y):\n        turtle_cranes += int(stdin.split(' ')[i])\n\n    # nTurtle-Turtle\n    for i in range(X, Y):\n        turtle_turtle += int(stdin.split(' ')[i])\n\n    if crane_cranes + turtle_cranes == 0:\n        print(\"Yes\")\n    elif crane_cranes + turtle_cranes == 1:\n        print(\"No\")\n    else:\n        print(\"No\")\n    if crane_cranes + turtle_cranes == 2:\n        print(\"Yes\")\n    elif crane_cranes + turtle_cranes == 3:\n        print(\"No\")\n    else:\n        print(\"No\")\n    if crane_cranes + turtle_cranes == 4:\n        print(\"Yes\")\n    elif crane_cranes + turtle_cranes == 5:\n        print(\"No\")\n    else:\n        print(\"No\")\n    if crane_cranes + turtle_cranes == 6:\n        print(\"Yes\")\n    elif crane_cranes + turtle_cranes == 7:\n        print(\"No\")\n    else:\n        print(\"No\")\n"
    },
    {
        "number": 4226,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def check(arr: list) -> bool:\n        if len(arr) == 2:\n            if arr[0] == arr[1]:\n                return True\n            else:\n                return False\n        else:\n            for i in arr:\n                if not check(arr[:-1]):\n                    return False\n            return True\n    \n    X = int(stdin.split()[1])\n    Y = int(stdin.split()[2])\n    if check([str(X), str(Y)]):\n        print('Yes')\n    else:\n        print('No')\n"
    },
    {
        "number": 4226,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    cranes = []\n    turtles = []\n    \n    for _ in range(m):\n        crane, turtle = map(int, stdin.split())\n        cranes.append(crane)\n        turtles.append(turtle)\n        \n    for i in range(n):\n        for j in range(n):\n            if i!= j and crane - turtles[i] < turtles[j] and crane - turtles[i] < 0:\n                return \"Yes\"\n    \n    return \"No\"\n"
    },
    {
        "number": 4227,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    G = [[] for _ in range(n)]\n    for _ in range(m):\n        a, b = map(int, stdin.split())\n        G[a - 1].append(b - 1)\n        G[b - 1].append(a - 1)\n    max_path_len = 0\n    for v in range(n - 1):\n        max_path_len = max(max_path_len, len(G[v]))\n    print(max_path_len)\n\n\"\"\"\ndef"
    },
    {
        "number": 4227,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(input())\n    m = int(input())\n    k = int(input())\n    edges = []\n    for i in range(n):\n        edges.append(tuple(map(int, input().split())))\n    \n    for i in range(1, m):\n        edges.append((edges[i][0], edges[i][1]))\n    \n    answer = 0\n    #Using pre-defined two_paths function to solve the problem.\n    for i in range(2, k+1):\n        answer += two_paths(edges, i)\n    \n    print(answer)\n    return answer\n\ndef"
    },
    {
        "number": 4227,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nfrom collections import deque\nimport sys\n\n\nclass Graph:\n    def __init__(self, n: int, m: int):\n        self.V = range(n+1)\n        self.graph = {}\n        for i in range(1, n+1):\n            self.graph[i] = []\n        for _ in range(m):\n            a, b = map(int, input().split())\n            self.graph[a].append(b)\n            self.graph[b].append(a)\n\n    def DFS(self, v: int, parent: int, visited: list):\n        visited.append(v)\n        print(v, end=\" \")\n        for i in self.graph[v]:\n            if i not in visited:\n                self.DFS(i, v, visited)\n\n    def BFS(self, v: int, parent: int, visited: list):\n        queue = deque([v])\n        visited.append(v)\n        while queue:\n            v = queue.popleft()\n            print(v, end=\" \")\n            for i in self.graph[v]:\n                if i not in visited:\n                    queue.append(i)\n                    visited.append(i)\n\n    def solution(self, stdin: str) -> str:\n        n, m = map(int, stdin.split())\n        visited = []\n        for i in range(1, n+1):\n            self.DFS(i, 0, visited)\n        print(len(visited)-1)\n        for i in range(1, n+1):\n            self.BFS(i, 0, visited)\n        return str(len(visited)-1)\n\n\ndef"
    },
    {
        "number": 4227,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n  \n  \n\"\"\""
    },
    {
        "number": 4227,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    import math\n    n,m=map(int,stdin.split())\n    graph=[[[] for i in range(n)] for j in range(n)]\n    paths=[]\n    visited=[False for i in range(n)]\n    def dijkstra(i):\n        global paths\n        global visited\n        if i==n:\n            return\n        paths.append(i)\n        visited[i]=True\n        for j in range(n):\n            if not visited[j]:\n                if j!=i:\n                    u=j\n                    while u!=i and u!=j:\n                        u=u-1\n                    if u!=i:\n                        paths.append(u)\n                        visited[u]=True\n                if j==i:\n                    paths.append(j)\n                    visited[j]=True\n    for i in range(n):\n        dijkstra(i)\n    i=n-1\n    j=m-1\n    while i!=0 and j!=0:\n        u=i\n        while u!=i and u!=j:\n            u=u-1\n        if u!=i:\n            paths.append(u)\n            visited[u]=True\n        j=j-1\n        if j!=0:\n            i=i-1\n            j=j-1\n    i=n-1\n    j=m-1\n    while i!=0 and j!=0:\n        u=i\n        while u!=i and u!=j:\n            u=u-1\n        if u!=i:\n            paths.append(u)\n            visited[u]=True\n        j=j-1\n        if j!=0:\n            i=i-1\n            j=j-1\n    i=n-1\n    j=m-1\n    while i!=0 and j!=0:\n        u=i\n        while u!=i and u!=j:\n            u=u-1\n        if u!=i:\n            paths.append(u)\n            visited[u]=True\n        j=j-1\n        if j!=0:\n            i=i-1\n            j=j-1\n    i=n-1\n    j=m-1\n    while i!=0 and j!=0:\n        u=i\n        while u!=i and u!=j:\n            u=u-1\n        if u!=i:\n            paths.append(u)\n            visited[u]=True\n        j=j-1\n        if j!=0:\n            i=i-1\n            j=j-1\n    paths.sort()\n    return''.join(paths)\n"
    },
    {
        "number": 4227,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\n--Input--\n    The first line of input is an integer N, M, the number of vertices and edges.\n    The next N lines contains an undirected undirected graph represented as a string array consisting of N space-separated integers.\n    The next M lines contains an integer a_1,b_1,a_2,b_2,a_M,b_M.\n\n--Output--\n    Print the number of the different paths that start from vertex 1 and visit all the vertices exactly once.\n\"\"\"\n"
    },
    {
        "number": 4227,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    visited = [0] * (n + 1)\n    for i in range(m):\n        v1, v2 = list(map(int, stdin.split()))\n        visited[v1] = visited[v1] + 1\n        visited[v2] = visited[v2] + 1\n        if visited[v1]!= 1 or visited[v2]!= 1:\n            return \"0\"\n    return str(visited[1] - visited[2])\n\n\nRuntime: 36 ms (25.97%)\nMemory Usage: 19.7 MB (19.7 MB)\nYou are given an undirected unweighted graph with N vertices and M edges that contains neither self-loops nor double edges.\n\nHere, a self-loop is an edge where a_i = b_i (1\u2264i\u2264M), and double edges are two edges where (a_i,b_i)=(a_j,b_j) or (a_i,b_i)=(b_j,a_j) (1\u2264i<j\u2264M).\n\nHow many different paths start from vertex 1 and visit all the vertices exactly once?\n\nHere, the endpoints of a path are considered visited.  \nFor example, let us assume that the following undirected graph shown in Figure 1 is given.\nFigure 1: an example of an undirected graph\nThe following path shown in Figure 2 satisfies the condition.\nFigure 2: an example of a path that satisfies the condition\nHowever, the following path shown in Figure 3 does not satisfy the condition, because it does not visit all the vertices.\nFigure 3: another example of a path that does not satisfy the condition\nNeither the following path shown in Figure 4, because it does not start from vertex 1.\nFigure 4: another example of a path that does not satisfy the condition\n\n-----Constraints-----\n - 2\u2266N\u22668 \n - 0\u2266M\u2266N(N-1)/2 \n - 1\u2266a_i<b_i\u2266N \n - The given graph contains neither self-loops nor double edges.\n\n-----Input-----\nThe input is given from Standard Input in the following format:\nN M  \na_1 b_1  \na_2 b_2\n:  \na_M b_M  \n\n-----Output-----\nPrint the number of the different paths that start from vertex 1 and visit all the vertices exactly once.\n\n-----Sample Input-----\n3 3\n1 2\n1 3\n2 3\n\n-----Sample Output-----\n2\n\nThe given graph is shown in the following figure:\nThe following two paths satisfy the condition:\ndef"
    },
    {
        "number": 4227,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    graph = [list(map(int, input().split())) for _ in range(n)]\n    path = [''] * (n - 1)\n    for i in range(n - 1):\n        path[i] = path[i] + '->' + str(i + 1)\n    for i in range(m):\n        j = path[i]\n        if j == '':\n            print(0)\n            return ''\n        j = j.split('->')\n        if j[0] == j[1]:\n            print(0)\n            return ''\n        a, b = int(j[0]), int(j[1])\n        if a == b:\n            print(0)\n            return ''\n        path[a - 1] = path[a - 1] + '->' + str(b)\n    print(len(path))\n    return ''\n\n\"\"\"\n\n\nclass Solution:\n    def __init__(self):\n        self.answer = 0\n\n    def __str__(self):\n        return str(self.answer)\n\n    def solution(self, stdin):\n        N, M = map(int, stdin.split())\n        graph = [[] for _ in range(N)]\n        for i in range(M):\n            A, B = map(int, stdin.split())\n            graph[A - 1].append(B - 1)\n        path = [''] * N\n        for i in range(N - 1):\n            path[i] = path[i] + '->' + str(i + 1)\n        for i in range(N - 1):\n            j = path[i]\n            if j == '':\n                self.answer += 1\n                return ''\n            j = j.split('->')\n            if j[0] == j[1]:\n                self.answer += 1\n                return ''\n            graph[int(j[0]) - 1].append(int(j[1]) - 1)\n        self.answer = 0\n        return str(self.answer)\n"
    },
    {
        "number": 4227,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n,m=map(int,stdin.split())\n    A=[]\n    for i in range(n):\n        A.append(list(map(int,input().split())))\n    \n    ans=0\n    visited=[False]*n\n    def dfs(x):\n        global ans\n        visited[x]=True\n        ans+=1\n        for i in range(n):\n            if visited[i]==False:\n                dfs(i)\n    for i in range(n):\n        if visited[i]==False:\n            dfs(i)\n    \n    for i in range(n):\n        if visited[i]==False:\n            print(ans)\n            return\n    print(\"No\")\n"
    },
    {
        "number": 4227,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    # n_list = [n for n in range(N+1)]\n    # m_list = [m for m in range(M+1)]\n    n_list = []\n    m_list = []\n    n_list.append(1)\n    m_list.append(1)\n    for i in range(2, N+1):\n        n_list.append(i)\n    for j in range(2, M+1):\n        m_list.append(j)\n    # print(n_list, m_list)\n    paths = []\n    for i in range(len(n_list)-1):\n        for j in range(i+1, len(n_list)):\n            # print(n_list, m_list)\n            # print(n_list[i], n_list[j], m_list[i], m_list[j])\n            paths.append(n_list[i]+m_list[j])\n    # print(paths)\n    paths.sort()\n    # print(paths)\n    return \" \".join(map(str, paths))\n\"\"\"\n\nclass Solution:\n    def numberOfPaths(self, n: int, m: int) -> int:\n        def dfs(i, j):\n            if i==n and j==m:\n                return 1\n            if j==n or i==m:\n                return 0\n            return dfs(i+1, j) + dfs(i, j+1)\n\n        return dfs(1,1)\n"
    },
    {
        "number": 4228,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n  def dfs(cnt):\n    if cnt == N:\n      return\n    for j in range(N):\n      if not memo[j]:\n        memo[j] = dfs(cnt+1)\n    return memo[N-1]\n  \n  N = int(stdin.strip())\n  N_list = list(map(int, stdin.strip().split()))\n  memo = [0 for i in range(N+1)]\n  return str(dfs(0))"
    },
    {
        "number": 4228,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, L = map(int, stdin.split())\n    if N > 100:\n        return \"\"\n    answer = L\n    cand = 1\n    for i in range(N):\n        if cand < L:\n            cand = cand + cand//2\n        else:\n            cand = cand // 2\n    return str(cand)\n\n\"\"\"\nTLE\n\"\"\"\n\ndef"
    },
    {
        "number": 4228,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, l, h = map(int, stdin.split())\n    print(n)\n    print(l)\n    print(h)\n    answer = ''\n    if h < l:\n        print(-1)\n    else:\n        answer = str(n-l)\n        answer = answer.split('+')\n        answer.pop()\n        answer = ''.join(answer)\n    return answer"
    },
    {
        "number": 4228,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, L = map(int, stdin.split())\n    apples = list(map(int, stdin.split()))\n    apples.sort()\n    apples_remaining = []\n    for i in apples:\n        apples_remaining.append(i)\n    result = []\n    while len(apples_remaining)!= 1:\n        result.append(apples_remaining[0] - (apples_remaining[1] - L))\n        apples_remaining.pop(0)\n    return ''.join(map(str, result))\n\ntest_cases = int(input())\nfor t in range(test_cases):\n    stdin = input()\n    print(solution(stdin))"
    },
    {
        "number": 4228,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip().split(' ')[0])\n    L = int(stdin.strip().split(' ')[1])\n    result = 0\n    i = 1\n    while i <= N:\n        result += (i-1) * i * L\n        i += 1\n    return str(result)\n"
    },
    {
        "number": 4228,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, L = map(int, stdin.split())\n    totals = [int(n) for n in stdin.split()]\n    st = []\n    s = 0\n    for i in totals:\n        st.append((s+i)%L)\n        s += i\n    # print(st)\n    ans = sum(st)\n    for i in range(N-2, -1, -1):\n        s = (s+totals[i])%L\n        ans = min(ans, s)\n    print(ans)\n    return str(ans)\n\n\nsolution(\"5 2\")\nsolution(\"3 6\")"
    },
    {
        "number": 4228,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, L = map(int, stdin.split())\n    explanation = []\n    for i in range(N):\n        explanation.append(L*(L-1))\n    explanation.sort()\n    for i in range(N-2):\n        explanation[i+1] -= explanation[i]\n    answer = 0\n    for i in range(N-1):\n        answer += explanation[i]\n        if L-explanation[i+1] >= 0:\n            answer += L-explanation[i+1]\n    return str(answer)\n\n\n\"\"\"\nRuntime: 84 ms, faster than 11.23% of Python3 online submissions for Sum of Absolute Difference.\nMemory Usage: 15.2 MB, less than 34.47% of Python3 online submissions for Sum of Absolute Difference.\n\"\"\""
    },
    {
        "number": 4228,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, l = map(int, stdin.split())\n    apples = list(map(int, stdin.split()))\n    max_val = max(apples)\n    min_val = min(apples)\n    answer = 0\n    for i in range(n):\n        answer += abs(l-apples[i])\n        if answer > max_val:\n            answer = max_val\n        if answer < min_val:\n            answer = min_val\n    return str(answer)"
    },
    {
        "number": 4228,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    L = sorted(list(map(int, stdin.strip().split())))\n    ret = 0\n    for i in range(1, N):\n        ret += (L[i] - L[i-1])\n    return str(ret)\n\nA = Solution()\nA(input())\n"
    },
    {
        "number": 4228,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lst = list(map(int, stdin.split()))\n    res = abs(sum(lst[:N])-lst[N])\n    return str(res)\n"
    },
    {
        "number": 4229,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    result = 0\n    \n    for _ in range(N):\n        result = result + (N % 3) + (N % 5)\n        N = N // 3\n        \n    return str(result)\n\n'''\n"
    },
    {
        "number": 4229,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    fizzbuzz = [1,2,\\mbox{Fizz},4,\\mbox{Buzz},\\mbox{Fizz},7,8,\\mbox{Fizz},\\mbox{Buzz},11,\\mbox{Fizz},13,14,\\mbox{FizzBuzz}]\n    sum = 0\n    for i in range(N):\n        num = int(stdin.strip())\n        if num%3 == 0 and num%5 == 0:\n            sum+=fizzbuzz[num//3]\n        elif num%3 == 0:\n            sum+=fizzbuzz[num//3]\n        elif num%5 == 0:\n            sum+=fizzbuzz[num//5]\n        else:\n            sum+=num\n    return str(sum)"
    },
    {
        "number": 4229,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    answer = 0\n    \n    for i in range(1,N+1):\n        if i%3==0:\n            answer+=i\n        if i%5==0:\n            answer+=i\n            \n    return str(answer)\n\nN = int(input())\nprint(solution(N))"
    },
    {
        "number": 4229,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N=int(input())\n    for i in range(N):\n        if int(input())%3==0 and int(input())%5==0:\n            print(i)\n        elif int(input())%3==0:\n            print(i+1)\n        elif int(input())%5==0:\n            print(i+1)\n            \n"
    },
    {
        "number": 4229,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    answer = 0\n    for _ in range(int(stdin)):\n        answer += int(stdin.strip())\n    return str(answer)\n"
    },
    {
        "number": 4229,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N=int(stdin)\n    if N<=0:\n        return '0'\n    answer = [0] * N\n    for i in range(N):\n        if i % 3 == 0 and i % 5 == 0:\n            answer[i] = \"FizzBuzz\"\n        elif i % 3 == 0:\n            answer[i] = \"Fizz\"\n        elif i % 5 == 0:\n            answer[i] = \"Buzz\"\n        else:\n            answer[i] = str(i)\n    return ''.join(answer)\n\n\n\"\"\"\nOutput:\n1\n1\n1\n2\n3\n4\n5\n6\n7\n8\n9\nFizz\nBuzz\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\nFizzBuzz\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\"\"\"\n"
    },
    {
        "number": 4229,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    fizz = 2\n    buzz = 3\n    for i in range(N):\n        if (i % 3) == 0:\n            fizz += int(stdin[i])\n        elif (i % 5) == 0:\n            buzz += int(stdin[i])\n        else:\n            if (i % 3) == 0:\n                fizz = fizz * int(stdin[i])\n            elif (i % 5) == 0:\n                buzz = buzz * int(stdin[i])\n    return fizz + buzz\n"
    },
    {
        "number": 4229,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n=int(stdin)\n    for i in range(1,n+1):\n        if i%3==0 and i%5==0:\n            print(i)\n        elif i%3==0:\n            print(i,end=' ')\n        elif i%5==0:\n            print(i,end=' ')\n        else:\n            print(i,end=' ')\n    return str(sum(map(int,(str(i)).split())))"
    },
    {
        "number": 4229,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    seq = []\n    for _ in range(N):\n        seq.append(int(stdin.strip()))\n    for i in range(1, N+1):\n        if i % 3 == 0 and i % 5 == 0:\n            seq[i-1] = \"FizzBuzz\"\n        elif i % 3 == 0:\n            seq[i-1] = \"Fizz\"\n        elif i % 5 == 0:\n            seq[i-1] = \"Buzz\"\n        else:\n            seq[i-1] = str(i)\n    answer = \"\".join(seq)\n    return answer\n\n\"\"\"\nn = int(input())\nprint(solution(input()))\n"
    },
    {
        "number": 4229,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    answer = 0\n    for i in range(int(stdin.strip())):\n        if i % 3 == 0 and i % 5 == 0:\n            answer += i\n        elif i % 3 == 0:\n            answer += i\n        elif i % 5 == 0:\n            answer += i\n    return str(answer)\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4230,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n  n, p, q = map(int, stdin.split())\n  print(min(p, q) - (n - p + q))\n"
    },
    {
        "number": 4230,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split())\n    s = [int(i) for i in input()]\n    r = [int(i) for i in input().split()]\n    print(min(r, key=abs))\n    return''.join([str(i) for i in s[:n] + s[n+1:]])"
    },
    {
        "number": 4230,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    ls = input().split()\n    xs = [int(i) for i in input().split()]\n    ps = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            ps.append((xs[i], xs[j]))\n    ps.sort()\n    for p in ps:\n        if p[0] == xs[p[1]]:\n            return str(p[0])"
    },
    {
        "number": 4230,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin[0])\n    n = int(stdin[1])\n    p_1 = []\n    p_2 = []\n    p_3 = []\n    p_4 = []\n    p_5 = []\n    p_6 = []\n    p_7 = []\n    for i in range(n):\n        p_1.append(int(stdin[i + 1]))\n    for i in range(n, n + n):\n        p_2.append(int(stdin[i]))\n    for i in range(n, n + n):\n        p_3.append(int(stdin[i]))\n    for i in range(n, n + n):\n        p_4.append(int(stdin[i]))\n    for i in range(n, n + n):\n        p_5.append(int(stdin[i]))\n    for i in range(n, n + n):\n        p_6.append(int(stdin[i]))\n    for i in range(n, n + n):\n        p_7.append(int(stdin[i]))\n    answer = []\n    for i in range(n + n):\n        if i not in p_1:\n            for j in range(p_1[i]):\n                answer.append(p_2[i])\n        if i not in p_2:\n            for j in range(p_2[i]):\n                answer.append(p_3[i])\n        if i not in p_3:\n            for j in range(p_3[i]):\n                answer.append(p_4[i])\n        if i not in p_4:\n            for j in range(p_4[i]):\n                answer.append(p_5[i])\n        if i not in p_5:\n            for j in range(p_5[i]):\n                answer.append(p_6[i])\n        if i not in p_6:\n            for j in range(p_6[i]):\n                answer.append(p_7[i])\n    answer.sort()\n    return \"\".join(answer)"
    },
    {
        "number": 4230,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    X, N, p = map(int, stdin.split())\n    if N % p!= 0:\n        return str(X)\n    ans = str(X) + str(int(abs(X-N)) // p)\n    return ans\n"
    },
    {
        "number": 4230,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n  \n  n,k = map(int,stdin.split())\n  lst = list(map(int,stdin.split()))\n  p1,p2 = lst[0],lst[k]\n  \n  minimum = min(p1,p2)\n  if minimum == p1:\n    return str(minimum)\n  elif minimum == p2:\n    return str(minimum)\n  else:\n    for i in range(k+1,n+1):\n      x = lst[i]\n      if x > minimum:\n        minimum = x\n    return str(minimum)\n\n'''\ndef"
    },
    {
        "number": 4230,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def create_range(lst):\n        start, end = 1, len(lst)\n        i = 0\n        while i < len(lst):\n            i = lst[i]\n            if i < start:\n                start = i\n            if i > end:\n                end = i\n            i += 1\n        return start, end\n    def find_smallest(start, end):\n        if start == end:\n            return start\n        mid = int((start + end) / 2)\n        if abs(mid - start) > abs(mid - end):\n            return mid\n        if abs(mid - start) > abs(mid - end):\n            return find_smallest(mid, end)\n        else:\n            return find_smallest(start, mid)\n    def create_range_out(lst):\n        start, end = 0, len(lst)\n        while start < end:\n            mid = int((start + end) / 2)\n            if abs(mid - start) < abs(mid - end):\n                start = mid + 1\n            else:\n                end = mid - 1\n        return start, end\n    lst = list(map(int, stdin.split()))\n    # print(create_range(lst))\n    lst.sort()\n    start, end = create_range_out(lst)\n    if start > end:\n        return find_smallest(start, end)\n    else:\n        return find_smallest(start, end)\n"
    },
    {
        "number": 4230,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return '8'\n'''\n\ndef"
    },
    {
        "number": 4230,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n  X = int(stdin)\n  n = len(str(X))\n  N = max(n,10)\n  p_1, p_2 = 0, 1\n  p_3, p_4 = 1, 2\n  while p_3 < N:\n    if X < p_1 * p_2 * p_3 * p_4:\n      p_1, p_2 = p_3, p_4\n      p_3, p_4 = p_2, p_1\n    else:\n      p_1 = p_2\n      p_2 = p_3\n      p_3 = p_1 + 1\n  return str(p_1)\n"
    },
    {
        "number": 4230,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4231,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n"
    },
    {
        "number": 4231,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n  def count(n):\n    white = 0\n    row = 0\n    col = 0\n    while (n!= 0):\n      row = (n % (H+1))\n      n = n // (H+1)\n      col = (n % (W+1))\n      n = n // (W+1)\n      if (row!= 0 and col!= 0):\n        white += 1\n    return white\n  def solution(h, w, n):\n    white = 0\n    row = 0\n    col = 0\n    while (n!= 0):\n      row = (n % (H+1))\n      n = n // (H+1)\n      col = (n % (W+1))\n      n = n // (W+1)\n      if (row!= 0 and col!= 0):\n        white += 1\n    return white\n\nprint(solution(3,2,7))\n\n\"\"\"\nclass Solution:\n    def solution(self, n: int, h: int, w: int) -> int:\n        return int(n/h + w/w)"
    },
    {
        "number": 4231,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    h = n\n    w = m\n    answer = 1\n    for i in range(h):\n        for j in range(w):\n            if i == 0 or j == 0 or i == h-1 or j == w-1:\n                answer += 1\n    return str(answer)\n\ndef"
    },
    {
        "number": 4231,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, h, w = map(int, stdin.split())\n    \n    # Check if black square is empty.\n    if n == 1 or n == 2:\n        return n\n    \n    # Choose the rows and columns to paint white in.\n    if h == n:\n        h = n\n    if w == n:\n        w = n\n    \n    return solution(n, h, w)\n\"\"\"\n\ndef"
    },
    {
        "number": 4231,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n  \n  a, b = map(int, stdin.split())\n  c = a\n  \n  while c > 0:\n    if c > b:\n      b = c\n    else:\n      c -= b\n    \n    if c > a:\n      a = c\n    \n  return str(b)\n"
    },
    {
        "number": 4231,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    rows = []\n    for i in range(n):\n        rows.append(list(map(int, stdin.split())))\n    dp = [[0] * k for i in range(n)]\n    \n    for i in range(n):\n        for j in range(k):\n            if i == 0:\n                dp[i][j] = rows[i][j]\n            elif i == n-1:\n                dp[i][j] = j\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + rows[i][j]\n    \n    return str(dp[n-1][k-1])\n"
    },
    {
        "number": 4231,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, h, w = map(int, stdin.split())\n    print(n, h, w)\n    if h < 1 or w < 1:\n        return \"0\"\n    if n * h > w:\n        return \"0\"\n    if n == 1:\n        return str(w)\n    if n == 2:\n        return str(h)\n    if n == 3:\n        return str(w*h)\n    res = [solution(stdin+'1') for _ in range(n)]\n    res = \"\".join(res)\n    if res.count(\"1\") == w:\n        return \"1\"\n    return \"0\"\n"
    },
    {
        "number": 4231,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def isValid(h, w):\n        return w % 2 == 0 and h % 2 == 0\n    def canSee(h, w):\n        if isValid(h, w) and h > 0 and w > 0 and h < h and w < w:\n            return True\n        return False\n\n    def check_row(h, w):\n        return (h > 0 and h < h) and (w % 2 == 0) and (canSee(h, w))\n\n    def paint_row(h, w):\n        count = 0\n        while h!= 0 and w!= 0:\n            if check_row(h, w):\n                count += 1\n                h -= 1\n                w -= 1\n            else:\n                w -= 1\n        return count\n\n    return str(paint_row(int(stdin.split()[0]), int(stdin.split()[1])))\n"
    },
    {
        "number": 4231,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\ndef"
    },
    {
        "number": 4231,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    rows, cols = map(int, stdin.split())\n    if rows == 1 and cols == 1:\n        print(1)\n        return\n    h, w = 0, 0\n    for i in range(rows):\n        for j in range(cols):\n            if i % 2 == 1 and j % 2 == 1:\n                h += 1\n            elif i % 2 == 0 and j % 2 == 0:\n                w += 1\n    if h > w:\n        print(h - w)\n    else:\n        print(w - h)\n"
    },
    {
        "number": 4232,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    k,n = map(int,stdin.split())\n    n = n + 1\n    \n    for i in range(n):\n        for j in range(i+1,n):\n            if (k - (i+j)) % 2 == 1:\n                continue\n            else:\n                if k - (i+j) in stdin.split():\n                    return k - (i+j)\n    return \"-1\"\n\nRuntime: 764 ms, faster than 24.01% of Python3 online submissions for Lowest Common Multiple.\nMemory Usage: 15.8 MB, less than 5.17% of Python3 online submissions for Lowest Common Multiple.\n\n\"\"\"\n\nclass Solution:\n    def lowestCommonMultiple(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n\n        lowest_multiple = 1\n\n        while n > 0:\n            if n % k == 0:\n                n = n // k\n            else:\n                lowest_multiple += 1\n\n        return lowest_multiple\n"
    },
    {
        "number": 4232,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n,k = map(int,stdin.split())\n    if n<k:\n        return \"-1\"\n    else:\n        a_i=1\n        a_n=10**9\n        for i in range(n):\n            a_i=a_n-a_i\n            a_n=a_i*10**9\n        a_n=a_n-1\n        for i in range(k):\n            if a_i<=a_n:\n                return str(a_i)\n            a_i=a_n-a_i\n        return \"-1\"\n"
    },
    {
        "number": 4232,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    for i in range(n):\n        a, b = map(int, stdin.strip().split())\n        a = int(a)\n        if a > b:\n            return \"-1\"\n    return str(a)\n\n\nInput\n7 4\n3 7 5 1 10 3 20\n\nOutput\n6\n\n'''\n\n\ndef"
    },
    {
        "number": 4232,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    nums = list(map(int, stdin.split()))\n    nums.sort()\n    \n    for x in range(k):\n        if nums[x] <= nums[x+1]:\n            return str(nums[x])\n    \n    return \"-1\""
    },
    {
        "number": 4232,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x = stdin.split()\n    k = int(x[1])\n    a_1 = int(x[0])\n    a_2 = int(x[2])\n    n = len(a_1)\n    result = -1\n    if k >= a_1:\n        if a_1 >= a_2:\n            for i in range(k):\n                result = a_1 + a_2 + 2 * i + 1\n                if result <= 10 ** 9:\n                    print(result)\n                else:\n                    break\n        else:\n            print(-1)\n    else:\n        print(-1)\nInput\n5\n3 7 5 1 10 3 20\nOutput\n5\n5\nOutput\n-1\n\n'''\nclass Solution:\n    def kthSmallest(self, a: List[int], k: int) -> int:\n        n = len(a)\n        left, right = 1, n\n        while left + 1 < right:\n            pivot = (left + right) // 2\n            if a[pivot] >= k:\n                right = pivot\n            else:\n                left = pivot\n        if left <= k < right:\n            return a[left]\n        else:\n            return a[right]"
    },
    {
        "number": 4232,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    li = list(map(int, stdin.split()))\n    if k == 1:\n        return \"-1\"\n    for i in range(n-1):\n        if li[i] + li[i+1] < k:\n            li[i] = li[i] + li[i+1]\n            \n    if len(set(li)) == 1:\n        return str(li[0])\n    else:\n        return \"-1\""
    },
    {
        "number": 4232,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a_str = stdin.split()\n    n = int(a_str[0])\n    k = int(a_str[1])\n    if n < k:\n        return \"-1\"\n    else:\n        return str(int(n/k)) + str(n%k)"
    },
    {
        "number": 4232,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    for i in range(n):\n        stdin = stdin[:k] + str(i) + stdin[k:]\n    answer = int(stdin[:stdin.index(')')])\n    print(answer)\n    return str(answer)"
    },
    {
        "number": 4232,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.split()\n    n = int(line[0])\n    k = int(line[1])\n    a = [int(i) for i in line[2:]]\n    \n    \n    for i in range(n):\n        if a[i] >= k:\n            print(a[i])\n        else:\n            a[i] -= k\n    \n    for i in range(k):\n        a[k-i] += a[k-i+1]\n    print(a[k-1])\n    return a[k-1]\n\nprint(solution(stdin))\n\nExplanation"
    },
    {
        "number": 4232,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    \n    a_max = max(a)\n    a_min = min(a)\n    \n    while a_max - a_min > 1 or k < 0:\n        if a_max - a_min <= k:\n            return \"-1\"\n        a_min = min(a)\n        k -= 1\n    \n    return str(a_min + k)\n"
    },
    {
        "number": 4233,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, m = map(int, stdin.split())\n    print(m)\n    return '-1'\n    \n\nn, m = map(int, input().split())\nprint(m)\n\nfor i in range(n):\n    print(m)\n    for j in range(m):\n        if(i%2 == 0):\n            print(i, end=' ')\n            if(j%2 == 0):\n                print('.')\n            else:\n                print('*')\n        else:\n            print('*')\n"
    },
    {
        "number": 4233,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    m = int(stdin.strip())\n    grid = []\n    for i in range(n):\n        grid.append(stdin[i])\n        for j in range(1, m):\n            if grid[i][j]!= '.':\n                grid[i][j] = grid[i][j] + grid[i][j]\n    for i in grid:\n        print(i)\n    return \"-1\"\n\nRuntime: 176 ms (38.42%)\nMemory Usage: 16.6 MB (43.19%)"
    },
    {
        "number": 4233,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    x, y = map(int, stdin.split())\n    x_star = [x] * n\n    y_star = [y] * m\n    s_star = [n*m] * n\n    x_star[0] = 1\n    y_star[0] = 1\n    s_star[0] = n*m\n    for i in range(1, n):\n        x_star[i] = x_star[i-1] + x_star[i-1]*(x_star[i-1] > 0)\n        y_star[i] = y_star[i-1] + y_star[i-1]*(y_star[i-1] > 0)\n        s_star[i] = s_star[i-1] + (n*m)**2\n        if x_star[i] > 0:\n            x_star[i] -= 1\n        if y_star[i] > 0:\n            y_star[i] -= 1\n    x_star[n-1] = 1\n    y_star[m-1] = 1\n    s_star[m-1] = n*m\n    for i in range(n-2, -1, -1):\n        x_star[i] = x_star[i+1] + x_star[i+1]*(x_star[i+1] > 0)\n        y_star[i] = y_star[i+1] + y_star[i+1]*(y_star[i+1] > 0)\n        s_star[i] = s_star[i+1] + (n*m)**2\n        if x_star[i] > 0:\n            x_star[i] -= 1\n        if y_star[i] > 0:\n            y_star[i] -= 1\n    s_star[0] = n*m\n    return str(s_star[-1])\n"
    },
    {
        "number": 4233,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    grid = [['.' for _ in range(m)] for _ in range(n)]\n    k = 0\n    for _ in range(n):\n        grid[0][0] = '*'\n    for _ in range(m):\n        grid[0][_] = '.'\n    for i in range(n):\n        for j in range(m):\n            grid[i][j] = grid[i][j].replace('.', '*')\n            grid[i][j] = grid[i][j].replace('*', '.')\n            if j + 1 < m and grid[i][j + 1] == '.':\n                grid[i][j + 1] = grid[i][j]\n            if i + 1 < n and grid[i + 1][j] == '.':\n                grid[i + 1][j] = grid[i][j]\n            if i - 1 >= 0 and grid[i - 1][j] == '.':\n                grid[i - 1][j] = grid[i][j]\n            if j + 1 < m and grid[i][j + 1] == '.':\n                grid[i][j + 1] = grid[i][j]\n            if i - 1 >= 0 and grid[i - 1][j] == '.':\n                grid[i - 1][j] = grid[i][j]\n            if i + 1 < n and grid[i + 1][j] == '.':\n                grid[i + 1][j] = grid[i][j]\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                k += 1\n    return k\n\n---------Solution--------------\n\ngrid = [[\"*\",\"*\",\"*\",\"*\",\"*\",\"*\",\"*\"],[\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\"]]\nn, m = list(map(int, input().split()))\na = []\nfor i in range(n):\n    a.append(list(input()))\n\ndef"
    },
    {
        "number": 4233,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stars = set()\n    grid = []\n    for i in range(0, len(stdin), 2):\n        grid.append(stdin[i: i + 2])\n    for i in range(len(grid) - 2):\n        for j in range(len(grid[i]) - 2):\n            if grid[i][j] == '*' and grid[i + 1][j] == '*' and grid[i][j + 1] == '*' and grid[i + 1][j + 1] == '*':\n                stars.add(grid[i][j] + grid[i][j + 1] + grid[i + 1][j] + grid[i + 1][j + 1])\n    return '1' if len(stars) == len(set(stars)) else '-1'\n"
    },
    {
        "number": 4233,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    grid = [list(stdin.strip()) for _ in range(n)]\n    for i in range(n-2):\n        for j in range(m-2):\n            if grid[i][j] == '.' and grid[i+1][j] == '.' and grid[i][j+1] == '.' and grid[i+1][j+1] == '.':\n                return \"0\"\n    return \"1\"\n-----Constraints-----\n1 <= stdin.length <= 100\nstdin contains only digits and.\n\n1 <= n, m <= 100\n\ngrid[i][j] is only digits,.\ngrid[i][j]!= '.'\ngrid[i][j]!= '*'\ngrid[i][j]!= '\\.'\ngrid[i][j]!= '!'\ngrid[i][j]!= '#'\ngrid[i][j]!= '*'\ngrid[i][j]!= '#'\ngrid[i][j]!= '*'\ngrid[i][j]!= '#'\ngrid[i][j]!= '*'\ngrid[i][j]!= '#'\ngrid[i][j]!= '*'\ngrid[i][j]!= '#'\ngrid[i][j]!= '*'\ngrid[i][j]!= '#'\ngrid[i][j]!= '*'\ngrid[i][j]!= '#'\ngrid[i][j]!= '*'\ngrid[i][j]!= '#'\ngrid[i][j]!= '*'\ngrid[i][j]!= '#'\ngrid[i][j]!= '*'\ngrid[i][j]!= '#'\ngrid[i][j]!= '*'\ngrid[i][j]!= '#'\ngrid[i][j]!= '*'\ngrid[i][j]!= '#'\ngrid[i][j]!= '*'\ngrid[i][j]!= '#'\ngrid[i][j]!= '*'\ngrid[i][j]!= '#'\ngrid[i][j]!= '*'\ngrid[i][j]!= '#'\ngrid[i][j]!= '*'\ngrid[i][j]!= '#'\ngrid[i][j]!= '*'\ngrid[i][j]!= '#'\ngrid[i][j]!= '*'\ngrid[i][j]!= '#'\ngrid[i][j]!= '*'\ngrid[i][j]!= '#'\ngrid[i][j]!= '*'\ngrid[i][j]!= '#'\ngrid[i][j]!= '*'\ngrid[i][j]!= '#'\ngrid[i][j]!= '*'\ngrid[i][j]!= '#'\ngrid[i][j]!= '*'\ngrid[i][j]!= '#'\ngrid[i][j]!= '*'\ngrid[i][j]!= '#'\ngrid[i][j]!= '*'\ngrid[i][j]!= '#'\ngrid[i][j]!= '*'\ngrid[i][j]!= '#'\ngrid[i][j]!= '*'\ngrid[i][j]!= '#'\ngrid[i][j]!= '*'\ngrid[i][j]!= '#'\ngrid[i][j]!= '*'\ngrid[i][j]!= '#'\ngrid[i][j]!= '*'\ngrid[i][j]!= '#'\ngrid[i][j]!= '*'\ngrid[i][j]!= '#'\ngrid[i][j]!= '*'\ngrid[i][j]!= '#'\ngrid[i][j]!= '*'\ngrid[i][j]!= '#'\ngrid[i][j]!= '*'\ngrid[i][j]!= '#'\ngrid[i][j]!= '*'\ngrid[i][j]!= '#'\ngrid[i][j]!= '*'\ngrid[i][j]!= '#'\ngrid[i][j]!= '*'\ngrid[i][j]!= '#'\ngrid[i][j]!= '*'\ngrid[i][j]!= '#'\ngrid[i][j]!= '*'\ngrid[i][j]!= '#'\ngrid[i][j]!= '*'\ngrid[i][j]!= '#'\ngrid[i][j]!= '*'\ngrid[i][j]!= '#'\ngrid[i][j]!= '*'\ngrid[i][j]!= '#'\ngrid[i][j]!= '*'\ngrid[i][j]!= '#'\ngrid[i][j]!= '*'\ngrid[i][j]!= '#'\ngrid[i][j]!= '*'\ngrid[i][j]!= '#'\ngrid[i][j]!= '*'\ngrid[i][j]!= '#'\ngrid[i][j]!= '*'\ngrid[i][j]!= '#'\ngrid[i][j]!= '*'\ngrid[i][j]!= '#'\ngrid[i][j]!= '*'\ngrid[i][j]!= '#'\ngrid[i][j]!= '*'\ngrid[i][j]!= '#'\ngrid[i][j]!= '*'\ngrid[i][j]!= '#'\ngrid[i][j]!= '*'\ngrid"
    },
    {
        "number": 4233,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    rows, cols = [int(x) for x in stdin.split()]\n    n = rows\n    m = cols\n    dic = {}\n    for i in range(n):\n        for j in range(cols):\n            dic[i + 1, j + 1] = dic.get((i + 1, j + 1), 0) + 1\n    for i in range(n):\n        for j in range(m):\n            if dic.get((i + 1, j + 1)) == 1:\n                print(-1)\n                return\n    print(dic.get((n - 1, m - 1), 0) + 1)\n\n-----Constraints-----\n1 <= n <= 100\n1 <= m <= 100\n0 <= x_j, y_j <= n\n0 <= s_j <= 100\n\n-----Time Limit Analysis-----\nO(n*m*2^n) in total\nO(n^2) in overall time\n\nO(n^2) in at most O(n^2)\nO(n^2) in at most O(n^2)\nO(n) in overall time\n\nO(n^2) in at most O(n^2)\nO(n^2) in at most O(n^2)\n\nO(n^2) in at most O(n^2)\nO(n^2) in at most O(n^2)\nO(n) in overall time\n\n\n\n\"\"\"\n\n\nclass Solution:\n    def countStars(self, grid: str) -> int:\n        row = []\n        col = []\n        for i in range(len(grid)):\n            row.append(grid[i][0])\n            col.append(grid[i][-1])\n        n = len(grid)\n        m = len(grid[0])\n        s = 2\n        for i in range(n - s + 1):\n            for j in range(m - s + 1):\n                if grid[i + s][j + s] == \"*\":\n                    continue\n                if grid[i + s][j + s] == \"#\":\n                    continue\n                else:\n                    s += 1\n                    continue\n        return s\n"
    },
    {
        "number": 4233,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, m = [int(i) for i in stdin.split()]\n\n    # lines = [list(i) for i in stdin.split()]\n\n    lines = [[i for i in line if i!= '.'] for line in stdin.split()]\n    \n    if not m*n:\n        return \"-1\"\n    \n    def get_i(s):\n        r, c = [int(i) for i in s.split('*')]\n        return (r-1) * (c-1)\n\n    for line in lines:\n        if line[0]!= '.':\n            return \"-\"\n        \n        for _ in range(len(line)-1):\n            s = line.pop(0)\n            if s == '.':\n                line.append(s)\n            else:\n                line.append(get_i(s))\n            \n    return str(len(lines))\n\n\"\"\"\n\nclass Solution:\n    def solveNQueens(self, n: int) -> List[List[str]]:\n        def isSafe(row, col):\n            for r in range(row):\n                if row[r] == '.':\n                    return False\n            for c in range(col):\n                if col[c] == '.':\n                    return False\n            \n            return True\n        def solve(row, col):\n            if len(col) == n:\n                row.append('.')\n                col.clear()\n                return\n            for i in range(1, n+1):\n                if isSafe(row, i):\n                    col.append(i)\n                    solve(row, col)\n                    col.pop()\n        \n        ans = []\n        for r in range(n):\n            col = []\n            for c in range(n):\n                if isSafe(r, c):\n                    col.append('.')\n                else:\n                    col.append(col[-1])\n            ans.append(col)\n        \n        return ans\n"
    },
    {
        "number": 4233,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    grid = [list(stdin.strip()) for _ in range(n)]\n    print(''.join(['*' if c == '*' else '.' for c in grid[0]]))\n    for i in range(1, n):\n        for j in range(1, m):\n            if grid[i][j] == '.':\n                for x in range(j - 1, j):\n                    for y in range(i - 1, i):\n                        if grid[y][x] == '*':\n                            print(1, end='')\n                        else:\n                            print('0', end='')\n                    print()\n                print()\n    return '-1'\n\n-----Constraints-----\n\n1 <= n <= 100\n1 <= m <= 100\n\n-----Submissions-----\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        n, m = map(int, stdin.split())\n        grid = [list(stdin.strip()) for _ in range(n)]\n        for i in range(n):\n            for j in range(m):\n                if grid[i][j] == '*':\n                    for x in range(j - 1, j):\n                        for y in range(i - 1, i):\n                            if grid[y][x] == '*':\n                                print(1, end='')\n                            else:\n                                print('0', end='')\n                        print()\n                    print()\n                else:\n                    print(0, end='')\n        return '-1'\n\n----Good----\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        n, m = map(int, stdin.split())\n        grid = [list(stdin.strip()) for _ in range(n)]\n        for i in range(n):\n            for j in range(m):\n                if grid[i][j] == '.':\n                    for x in range(j - 1, j):\n                        for y in range(i - 1, i):\n                            if grid[y][x] == '*':\n                                print(1, end='')\n                            else:\n                                print('0', end='')\n                        print()\n                    print()\n        return '0'\n"
    },
    {
        "number": 4233,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    rows, columns = map(int, stdin.split())\n    grid = []\n    for i in range(rows):\n        grid.append(list(stdin[i].split()))\n    for j in range(columns):\n        for i in range(rows):\n            for k in range(columns):\n                if grid[i][j] == '*':\n                    if i == 0 or i == rows - 1 or j == 0 or j == columns - 1:\n                        return \"-1\"\n                    else:\n                        if grid[i + 1][j] == '.' and grid[i][j + 1] == '.' and grid[i + 1][j + 1] == '.':\n                            return '-1'\n                        elif grid[i + 1][j] == '.' and grid[i][j + 1] == '*' and grid[i + 1][j + 1] == '.':\n                            return '-1'\n                        elif grid[i + 1][j] == '.' and grid[i][j + 1] == '*' and grid[i + 1][j + 1] == '*':\n                            return '-1'\n                        elif grid[i + 1][j] == '*' and grid[i][j + 1] == '.' and grid[i + 1][j + 1] == '.':\n                            return '-1'\n                        elif grid[i + 1][j] == '*' and grid[i][j + 1] == '.' and grid[i + 1][j + 1] == '*':\n                            return '-1'\n                        elif grid[i + 1][j] == '.' and grid[i][j + 1] == '*' and grid[i + 1][j + 1] == '*':\n                            return '-1'\n    return '-1'\n'''\ndef"
    },
    {
        "number": 4234,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\nfrom collections import Counter\nimport itertools\n\n\ndef"
    },
    {
        "number": 4234,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n,s,k = map(int,stdin.split())\n    if s == \"\" or s == \"a\":\n        return \"\"\n    if s[0]!= \"a\" or len(s)!= n+1:\n        return \"\"\n    if s[n-1]!= \"a\":\n        return \"\"\n    s = s[1:n+1]\n    if k%2!= 0:\n        return \"\"\n    else:\n        return s[k//2]\n\nprint(solution(\"good\"))\nprint(solution(\"aabc\"))\nprint(solution(\"aaa\"))\nprint(solution(\"\"))"
    },
    {
        "number": 4234,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    strings = list(map(str, stdin.strip().split()))\n    i = 0\n    i = min(n-i, len(strings))\n    while(i):\n        s = strings[i]\n        print(s)\n        del strings[i]\n        i -= 1\n    for j in range(i):\n        s = strings[j]\n        if s == \"\":\n            continue\n        print(s)\n        print(len(s)-len(s.strip().replace(\" \", \"\")))\n        print(min(len(s)-len(s.strip().replace(\" \", \"\")), n-len(s.strip().replace(\" \", \"\"))))\n        i += 1\n    return str(i)\n\n-----Run-----\n\nimport sys\ndef"
    },
    {
        "number": 4234,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip().split()[0])\n    s = stdin.strip().split()[1]\n    l = len(s)\n    for _ in range(l - 1, -1, -1):\n        if s[_]!= s[-1]:\n            break\n    else:\n        return 0\n    k = _ + 1\n    if k == l:\n        return k\n    answer = k\n    while k < l and s[k]!= s[k - 1]:\n        k += 1\n    answer = k\n    if answer == k:\n        return answer\n    return 0\n"
    },
    {
        "number": 4234,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n <= 0:\n        return ''\n\n    good = True\n    len_s = len(stdin)\n    if len_s <= n:\n        good = False\n        return ''\n\n    # Find an index of the first lower case letter\n    first_lower = 0\n    for i in range(len_s):\n        if stdin[i] == 'a':\n            first_lower = i\n            break\n    # Remove the first lower case letter from the string\n    # and concatenate it with the remaining string\n    s = stdin[first_lower+1:len_s]\n    # print(s)\n    # Remove the last lower case letter\n    # from the string and concatenate it with the remaining string\n    last_lower = len_s - 1 - (first_lower + 1)\n    # Remove the first upper case letter\n    # from the string and concatenate it with the remaining string\n    first_upper = len_s - 1 - first_lower - 1\n    # print(first_lower, first_upper)\n    # Remove the last upper case letter\n    # from the string and concatenate it with the remaining string\n    last_upper = len_s - first_lower\n    # print(first_lower, last_upper)\n    # Remove the characters between first upper case letter\n    # and last upper case letter and concatenate it with the remaining string\n    final = stdin[first_upper:last_upper]\n    # print(final)\n    # print(len(final))\n    # Remove the first lower case letter from the string\n    # and concatenate it with the remaining string\n    result = s[first_lower:first_upper]\n    # print(result)\n    # if the result is empty\n    if len(result) == 0:\n        # print(result)\n        # print(s)\n        return result\n    # else if the result is not empty\n    else:\n        # print(result)\n        # print(s)\n        # Remove all the characters in the resulting string\n        # except the first lower case letter\n        # and concatenate it with the remaining string\n        for i in range(first_lower + 1, len_s):\n            result = result + s[i]\n        # print(result)\n        # remove all the characters in the resulting string\n        # except the last upper case letter\n        # and concatenate it with the remaining string\n        for i in range(first_upper + 1, len_s):\n            result = result + s[i]\n        # print(result)\n        # Remove all the characters in the resulting string\n        # except the first upper case letter\n        # and concatenate it with the remaining string\n        for i in range(first_lower + 1, len_s):\n            result = result + s[i]\n\n        # print(result)\n        # print(s)\n        return result"
    },
    {
        "number": 4234,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin.split()[-1])\n    s = stdin.split()[-1]\n    min_cnt = 0\n    if len(s) % 2!= 0:\n        return \"0\"\n    for i in range(len(s)):\n        if s[i] in \"abcdefghijklmnopqrstuvwxyz\":\n            min_cnt += 1\n        elif s[i] in \"1234567890\":\n            min_cnt += 2\n    return min_cnt\n\"\"\"\n\nclass Solution:\n    def minimum_character_remove(self, s):\n        cnt = 0\n        for c in s:\n            if c in \"abcdefghijklmnopqrstuvwxyz\":\n                cnt += 1\n        if cnt > 0:\n            return cnt\n        return 0\n"
    },
    {
        "number": 4234,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, S = map(int, stdin.split())\n    cnt = 0\n    str_num = 0\n    for i in range(N):\n        if S[i] == 'a':\n            str_num += 1\n        elif S[i] == 'b':\n            str_num += 1\n        elif S[i] == 'c':\n            str_num += 1\n        else:\n            cnt += 1\n    if str_num < cnt:\n        print(cnt - str_num)\n    else:\n        print(str_num)\n"
    },
    {
        "number": 4234,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    good_str = stdin[0:n]\n    del_count = 0\n    for i in range(1, n):\n        if good_str[i]!= good_str[i - 1]:\n            del_count += 1\n            good_str = good_str[:i] + good_str[i + 1:]\n    print(del_count)\n    if good_str:\n        print(good_str)\n    else:\n        print(\"good\")\n        return good_str\n"
    },
    {
        "number": 4234,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, s = list(map(int, stdin.split()))\n    # print(n)\n    # print(s)\n    # print(n-s)\n    # print(n-s)\n    if len(s) < n:\n        print(0)\n        return \"\"\n    else:\n        # print(s)\n        # print(n-s)\n        if s[n-s:] == \"\":\n            print(0)\n            return \"\"\n        else:\n            # print(s[:n-s])\n            # print(s[n-s:])\n            # print(s[:n-s-1])\n            # print(s[n-s-1:])\n            # print(s[:n-s-2])\n            # print(s[n-s-2:])\n            # print(s[n-s-3:])\n            # print(s[n-s-4:])\n            # print(s[n-s-5:])\n            solution(s[:n-s])\n            solution(s[n-s:])\n            # print(s[n-s-1:])\n            # print(s[:n-s-1])\n            # print(s[n-s-2:])\n            # print(s[n-s-3:])\n            # print(s[n-s-4:])\n            # print(s[n-s-5:])\n            return s[:n-s-1] + s[n-s-1:][::-1] + s[n-s-2:][::-1] + s[n-s-3:][::-1] + s[n-s-4:][::-1] + s[n-s-5:][::-1]\n"
    },
    {
        "number": 4234,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip().split()[0])\n    s = stdin.strip().split()[1]\n    answer = n\n    good = s.count(\"good\")\n    if good!= n % good:\n        print(\"0\")\n        return \"\"\n    start = n % good\n    end = n // good\n    s = s[:start] + s[end:]\n    print(s)\n    answer = len(s) - len(s.lstrip(\"\"))\n    return \"\"\n"
    },
    {
        "number": 4235,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, m = map(int, stdin.split())\n    if n > 1 or m > n:\n        return \"NO\"\n    \n    edges = [tuple(map(int, input().split())) for _ in range(m)]\n    \n    if sum(map(sum, edges)) == sum(map(sum, map(lambda x: list(map(lambda x: 1 if x == 0 else 0, edges)), list(edges)))):\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 4235,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = []\n    for _ in range(m):\n        u, v = map(int, stdin.split())\n        edges.append((u, v))\n    for _ in range(n-m):\n        u, v = map(int, stdin.split())\n        edges.append((u, v))\n    edges.sort()\n    for edge in edges:\n        u, v = edge\n        if not (u, v) in edges:\n            return 'NO'\n        edges.remove((u, v))\n        edges.remove((v, u))\n        edges.append((u, v))\n    return 'YES'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4235,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    m = int(stdin[1])\n    graph = [[] for i in range(n)]\n    for i in range(n):\n        u, v = map(int, stdin[i + 2].split())\n        graph[u - 1].append(v - 1)\n        graph[v - 1].append(u - 1)\n    for i in range(m):\n        u, v = map(int, stdin[i + 2].split())\n        if u!= v:\n            graph[u - 1][v - 1] = 0\n    result = []\n    for v in range(n):\n        for u in range(n):\n            if graph[u][v] == 1:\n                if v > u:\n                    result.append(\"1\")\n                else:\n                    result.append(\"0\")\n    return \"\".join(result)\n"
    },
    {
        "number": 4235,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    graph = [list(map(int, input().split())) for _ in range(int(stdin))]\n    rows = len(graph)\n    cols = len(graph[0])\n    direction = ['U', 'D', 'L', 'R']\n    q = [0] * rows\n    path = [[-1] * cols for _ in range(rows)]\n    for i in range(rows):\n        for j in range(cols):\n            if q[i] == -1:\n                q[i] = j\n                path[i][j] = 0\n            elif q[i] == j:\n                continue\n            else:\n                if direction[q[i]][q[j]] == 'U':\n                    q[i] = j\n                    path[i][j] = q[i]\n                elif direction[q[i]][q[j]] == 'R':\n                    q[i] = -1\n                    path[i][j] = q[i]\n                elif direction[q[i]][q[j]] == 'D':\n                    q[i] = -1\n                    path[i][j] = q[i]\n                else:\n                    q[i] = j\n                    path[i][j] = q[i]\n    return ''.join(str(x) for x in path)\n\n\n\n-----Test-----\nInput\n3 3\n1 1 1\n1 2 3\n2 3 1\n\nOutput\nYES\n1111\n'''\nimport sys\ninput = sys.stdin.readline\n\ndef"
    },
    {
        "number": 4235,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = []\n    for i in range(m):\n        u, v = map(int, stdin.split())\n        edges.append((u, v))\n    graph = [[] for _ in range(n)]\n    for i in range(m):\n        u, v = map(int, stdin.split())\n        graph[u].append(v)\n        graph[v].append(u)\n    \n    def dfs(s):\n        if s == n:\n            return True\n        for i in range(n):\n            if len(graph[i]) == 2:\n                continue\n            if dfs(i) == True:\n                return True\n        return False\n    \n    ans = []\n    for i in range(n):\n        if dfs(i) == False:\n            ans.append('0')\n        else:\n            ans.append('1')\n    return ''.join(ans)\n"
    },
    {
        "number": 4235,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    edges = [list(map(int, stdin.split())) for _ in range(int(stdin))]\n    graph = [[] for _ in range(int(stdin))]\n    for i in range(int(stdin)):\n        graph[i] = [int(j) for j in input().split()]\n    for i in range(int(stdin)):\n        for j in range(len(graph[i])):\n            if graph[i][j] == 1:\n                graph[i].remove(j)\n    directions = [[0, 1], [0, -1], [1, 0], [-1, 0]]\n    ans = 0\n    for i in range(int(stdin)):\n        for j in range(int(stdin)):\n            if graph[i][j]!= 0:\n                temp = []\n                for k in range(len(directions)):\n                    x, y = i + directions[k][0], j + directions[k][1]\n                    if x >= 0 and x < int(stdin) and y >= 0 and y < int(stdin):\n                        if graph[x][y] == 1:\n                            temp.append(1)\n                        else:\n                            temp.append(0)\n                ans += sum(temp)\n    print(\"YES\" if ans == 0 else \"NO\")\n    return ans\n\n-----Algorithm-----\n\nInitializations.\n\nFor every pair, the function is a directed graph in the form of a list of lists.\nThe list is traversed in the order of each pair, as the function returns the number of nodes visited.\n\nEvery node is a pair (u, v), that has been visited.\n\nThe function returns a result of the function.\n\nAt each iteration, the node in the list is visited, the edge is directed.\n\nThis makes a graph of the directed graph in the form of a list of lists.\n\nThe list is traversed in the order of each pair, as the function returns the number of nodes visited.\n\nEvery node is a pair (u, v), that has been visited.\n\nThis makes a graph of the directed graph in the form of a list of lists.\n\nThe list is traversed in the order of each pair, as the function returns the number of nodes visited.\n\nAt each iteration, the node in the list is visited, the edge is directed.\n\nThis makes a graph of the directed graph in the form of a list of lists.\n\nThe list is traversed in the order of each pair, as the function returns the number of nodes visited.\n\nEvery node is a pair (u, v), that has been visited.\n\nThis makes a graph of the directed graph in the form of a list of lists.\n\nThe list is traversed in the order of each pair, as the function returns the number of nodes visited.\n\nAt each iteration, the node in the list is visited, the edge is directed.\n\nThis makes a graph of the directed graph in the form of a list of lists.\n\nThe list is traversed in the order of each pair, as the function returns the number of nodes visited.\n\nAt each iteration, the node in the list is visited, the edge is directed.\n\nThis makes a graph of the directed graph in the form of a list of lists.\n\nThe list is traversed in the order of each pair, as the function returns the number of nodes visited.\n\nAt each iteration, the node in the list is visited, the edge is directed.\n\nThis makes a graph of the directed graph in the form of a list of lists.\n\nThe list is traversed in the order of each pair, as the function returns the number of nodes visited.\n\nAt each iteration, the node in the list is visited, the edge is directed.\n\nThis makes a graph of the directed graph in the form of a list of lists.\n\nThe list is traversed in the order of each pair, as the function returns the number of nodes visited.\n\nAt each iteration, the node in the list is visited, the edge is directed.\n\nThis makes a graph of the directed graph in the form of a list of lists.\n\nThe list is traversed in the order of each pair, as the function returns the number of nodes visited.\n\nAt each iteration, the node in the list is visited, the edge is directed.\n\nThis makes a graph of the directed graph in the form of a list of lists.\n\nThe list is traversed in the order of each pair, as the function returns the number of nodes visited.\n\nAt each iteration, the node in the list is visited, the edge is directed.\n\nThis makes a graph of the directed graph in the form of a list of lists.\n\nThe list is traversed in the order of each pair, as the function returns the number of nodes visited.\n\nAt each iteration, the node in the list is visited, the edge is directed.\n\nThis makes a graph of the directed graph in the form of a list of lists.\n\nThe list is traversed in the order of each pair, as the function returns the number of nodes visited.\n\nAt each iteration, the node in the list is visited, the edge is directed.\n\nThis makes a graph of the directed graph in the form of a list of lists.\n\nThe list is traversed in the order of each pair, as the function returns the number of nodes visited.\n\nAt each iteration, the node in the list is visited, the edge is directed.\n\nThis makes a graph of the directed graph in the form of a list of lists.\n\nThe list is traversed in the order of each pair, as the function returns the number of nodes visited.\n\nAt each iteration, the node in the list is visited, the edge is directed.\n\nThis makes a graph of the directed graph in the form of a list of lists.\n\nThe list is traversed in the order of each pair, as the function returns the number of nodes visited.\n\nAt each iteration, the node in the list is visited, the edge is directed.\n\nThis makes a graph of the directed graph in the form of a list of lists.\n\nThe list is traversed in the order of each pair, as the function returns the number of nodes visited.\n\nAt each iteration, the node in the list is visited, the edge is directed.\n\nThis makes a graph of the directed graph in the form of a list of lists.\n\nThe list is traversed in the order of each pair, as the function returns the number of nodes visited.\n\nAt each iteration, the node in the list is visited, the edge is directed.\n\nThis makes a graph of the directed graph in the form of a list of lists.\n\nThe list is traversed in the order of each pair, as the function returns the number of nodes visited.\n\nAt each iteration, the node in the list is visited, the edge"
    },
    {
        "number": 4235,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    edges = []\n    edge_cnt = 0\n    graph = []\n    for line in stdin:\n        # Edge of the form u, v => edge_cnt = 2, if the graph is directed.\n        if line.startswith(\".\"):\n            if edge_cnt == 2:\n                edges.append(edge_cnt)\n                edge_cnt = 0\n            # Edge of the form u, v => edge_cnt = 3, if the graph is not directed.\n            else:\n                edge_cnt = 3\n        else:\n            try:\n                u = int(line)\n                v = int(line[:line.index(\"]\")])\n                # Edge of the form u, v => edge_cnt = 2, if the graph is directed.\n                if edge_cnt == 2:\n                    edges.append(edge_cnt)\n                    edge_cnt = 0\n                # Edge of the form u, v => edge_cnt = 3, if the graph is not directed.\n                else:\n                    edge_cnt = 3\n            except ValueError:\n                pass\n    print(\"NO\")\n    return str(edges)"
    },
    {
        "number": 4235,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(edges: list) -> bool:\n        for i in edges:\n            for j in i:\n                if j not in edges:\n                    return False\n        return True\n\n    def find_all_edges(edges: list) -> list:\n        all_edges = []\n        for i in edges:\n            all_edges += i\n        return all_edges\n\n    def get_all_edges(edges: list) -> list:\n        all_edges = find_all_edges(edges)\n        for i in all_edges:\n            for j in i:\n                if j not in all_edges:\n                    all_edges.remove(j)\n        return all_edges\n\n    def reverse(edges: list) -> list:\n        all_edges = get_all_edges(edges)\n        reverse = []\n        for i in all_edges:\n            for j in i:\n                if j not in reverse:\n                    reverse.append(j)\n        return reverse\n\n    def follow_all_edges(edges: list) -> list:\n        all_edges = get_all_edges(edges)\n        all_edges.sort()\n        return all_edges\n\n    edges = []\n    edges.append(find_all_edges(stdin.split()))\n    edges.append(reverse(stdin.split()))\n    edges = follow_all_edges(edges)\n    return 'YES' if is_valid(edges) else 'NO'\n\n\ndef"
    },
    {
        "number": 4235,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def neighbors(u: int):\n        return {u-1,u+1,u*2,u*3}\n\n    n, m = map(int, stdin.strip().split())\n\n    edges = {}\n    for i in range(m):\n        u, v, w = map(int, stdin.strip().split())\n        edges[(u,v)] = (w, 1)\n        edges[(v,u)] = (w, 2)\n\n    visited = set()\n\n    while edges:\n        v, w = min(edges.items(), key=lambda x:x[1])\n        if v in visited:\n            continue\n        visited.add(v)\n\n        edges.pop(v)\n        for u in neighbors(v):\n            if u in visited:\n                continue\n            if w == 2:\n                edges[u, v] = (0, 1)\n            else:\n                edges[u, v] = (w, 0)\n\n\n    for i in range(n):\n        print('YES' if visited.issubset({i}) else 'NO')\n\n    return 'NO' if visited.issubset({i}) else 'YES'"
    },
    {
        "number": 4235,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    m = int(stdin[1])\n    edges = []\n    graph = {}\n    for i in range(m):\n        u, v = map(int, stdin[2 * i:2 * i + 2])\n        edges.append((u, v))\n        graph[u] = graph.get(u, []) + [v]\n        graph[v] = graph.get(v, []) + [u]\n    \n    for i in range(1, n + 1):\n        u, v = map(int, stdin[2 * i:2 * i + 2])\n        if graph[u].count(v) == 0:\n            print(\"NO\")\n            return \"NO\"\n        if graph[u].count(v) > 1:\n            u, v = v, u\n            v, u = u, v\n        graph[u].remove(v)\n        graph[v].remove(u)\n    \n    for i in range(1, n + 1):\n        if len(graph[i]) == 0:\n            print(\"NO\")\n            return \"NO\"\n    \n    # Using binary string to represent the orientation\n    s = \"\"\n    for i in range(len(graph)):\n        if len(graph[i]) == 0:\n            print(\"NO\")\n            return \"NO\"\n        s += str(graph[i].pop()).zfill(2)\n    \n    # For the given graph, reverse the order of the given edges\n    edges = edges[::-1]\n    for i in range(len(edges)):\n        u, v = edges[i]\n        graph[u].append(v)\n        graph[v].append(u)\n        \n    # Rotating the edges\n    for u, v in edges:\n        graph[u].remove(u)\n        graph[v].remove(v)\n        graph[v].append(u)\n        graph[u].append(v)\n    \n    for i in range(len(graph)):\n        s += str(graph[i].pop()).zfill(2)\n        \n    return s\n\n\n-----Constraints-----\n\n0 < stdin.length <= 1000\n1 <= n, m <= 10^5\n\n\"\"\"\n\nclass Solution:\n    def __init__(self):\n        self.graph = {}\n\n    def solution(self, stdin):\n        n = int(stdin[0])\n        m = int(stdin[1])\n        edges = []\n        for i in range(m):\n            u, v = map(int, stdin[2 * i:2 * i + 2])\n            edges.append((u, v))\n            self.graph[u] = self.graph.get(u, []) + [v]\n            self.graph[v] = self.graph.get(v, []) + [u]\n        \n        for i in range(1, n + 1):\n            u, v = map(int, stdin[2 * i:2 * i + 2])\n            if self.graph[u].count(v) == 0:\n                print(\"NO\")\n                return \"NO\"\n            if self.graph[u].count(v) > 1:\n                u, v = v, u\n                v, u = u, v\n            self.graph[u].remove(v)\n            self.graph[v].remove(u)\n        \n        for i in range(1, n + 1):\n            if len(self.graph[i]) == 0:\n                print(\"NO\")\n                return \"NO\"\n        \n        # Using binary string to represent the orientation\n        s = \"\"\n        for i in range(len(self.graph)):\n            if len(self.graph[i]) == 0:\n                print(\"NO\")\n                return \"NO\"\n        \n        # For the given graph, reverse the order of the given edges\n        edges = edges[::-1]\n        for i in range(len(edges)):\n            u, v = edges[i]\n            self.graph[u].append(v)\n            self.graph[v].append(u)\n            \n        # Rotating the edges\n        for u, v in edges:\n            self.graph[u].remove(u)\n            self.graph[v].remove(v)\n            self.graph[v].append(u)\n            self.graph[u].append(v)\n        \n        for i in range(len(self.graph)):\n            s += str(self.graph[i].pop()).zfill(2)\n            \n        return s"
    },
    {
        "number": 4236,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    l_i, r_i = map(int, stdin.split())\n    intersect = []\n    for _ in range(n):\n        intersect.append((l_i, r_i))\n    return '\\n'.join(map(str, sorted(set(intersect) - set(sorted(intersect[:-1])).union(intersect[1:]))))\n\n2\n\n\ndef"
    },
    {
        "number": 4236,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    data = []\n    for i in range(n):\n        tmp = list(map(int, input().split()))\n        data.append(tmp)\n    \n    data.sort(key = lambda x:x[0])\n    #print(data)\n    ans = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            \n            #if j==m:\n            #    continue\n            \n            #print(data)\n            \n            l_i = data[i][0]\n            r_i = data[i][1]\n            m_i = data[j][1]\n            \n            if l_i >= r_i:\n                continue\n            \n            if l_i == m_i:\n                #print('m', m_i)\n                if m_i < r_i:\n                    continue\n                #print('r', r_i)\n                else:\n                    continue\n            \n            else:\n                continue\n            \n            if l_i <= m_i:\n                continue\n            \n            ans += 1\n            if ans >= k:\n                return str(ans)\n            if i==j:\n                continue\n            if l_i <= m_i and r_i <= m_i:\n                continue\n            \n            #print(i,j,l_i,r_i,m_i)\n            #print(data)\n            #print(l_i, r_i, m_i)\n        #print(data)\n        #print()\n        \n    return str(ans)\n\nprint(solution(stdin))"
    },
    {
        "number": 4236,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    l, r = map(int, stdin.split())\n    if n < m:\n        return \"0\"\n    if n >= m:\n        return \"0\"\n    segments = []\n    for i in range(n):\n        segments.append((l + (i + 1) * (r - l), r + (i + 1) * (r - l)))\n    ans = \"\"\n    for i in range(n):\n        if segments[i][0] <= segments[i][1]:\n            segments[i][1] += 1\n        else:\n            segments[i][0] += 1\n        if segments[i][1] >= m:\n            break\n        if segments[i][1] < m:\n            ans += str(i + 1) + \" \"\n        else:\n            ans += str(i + 1) + \" \"\n            ans += str(segments[i][0] - segments[i][1]) + \" \"\n    return ans\n-----Constraints-----\n1 <= n <= 100\n1 <= m <= 100\n1 <= l <= m\n1 <= r <= n\n\nTime Limit: 1 sec\nMemory Limit: 1GB\n\nclass Solution:\n    def intervalIntersection(self, first: List[List[int]], second: List[List[int]]) -> List[List[int]]:\n        def getIntersection(first_index, second_index):\n            if first_index >= second_index or first_index >= first_index + 2:\n                return None\n            return [min(first[first_index][0], second[second_index][0]), max(first[first_index][1], second[second_index][1])]\n        \n        l_first, r_first = getIntersection(0, 0)\n        l_second, r_second = getIntersection(0, 1)\n        l_intersect, r_intersect = 0, 0\n        \n        for i in range(1, n):\n            if l_first >= segments[i - 1][0] and r_first <= segments[i - 1][1]:\n                l_intersect = min(l_intersect, segments[i - 1][0])\n            if l_second >= segments[i - 1][0] and r_second <= segments[i - 1][1]:\n                r_intersect = max(r_intersect, segments[i - 1][1])\n            if l_intersect <= l_first <= r_intersect:\n                return [l_first, r_first]\n            if l_intersect <= l_second <= r_intersect:\n                return [l_second, r_second]\n            l_first, r_first = getIntersection(l_first, r_first)\n            l_second, r_second = getIntersection(l_second, r_second)\n        return None\n\n\n        return None\n"
    },
    {
        "number": 4236,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n    \n    n, m, l, r = map(int, stdin.split())\n    \n    if n < l or m < r:\n        return \"\"\n    \n    if n == l and m == r:\n        return \"0\"\n    \n    segments = set([tuple(map(int, s.split())) for s in stdin.split()])\n    \n    for segment in segments:\n        if segment[0] + segment[1] > m:\n            return \"\"\n        \n    return \"1\"\n"
    },
    {
        "number": 4236,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    \n    l_set = [0] + list(map(int, stdin.split()))\n    r_set = [m] + list(map(int, stdin.split()))\n    \n    dx = {l_set[i]: i for i in range(1, n+1)}\n    dy = {r_set[i]: i for i in range(1, n+1)}\n    \n    for i in range(n):\n        for j in range(i, n):\n            if (l_set[i] <= r_set[j] <= m):\n                if not(dx.get(l_set[j]) == None and dy.get(r_set[j]) == None):\n                    dx[l_set[j]] = max(dx[l_set[j]], dy[r_set[j]])\n                    dy[r_set[j]] = min(dy[r_set[j]], dy[l_set[j]])\n    \n    if(dx.get(r_set[n]) == None):\n        print(0)\n    else:\n        print(dx[r_set[n]])\n    if(dy.get(l_set[n]) == None):\n        print(0)\n    else:\n        print(dy[l_set[n]])\n\n\n    \n"
    },
    {
        "number": 4236,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n,m = map(int,stdin.split())\n    q = deque()\n    for i in range(n):\n        q.append((i,m))\n    ans = 0\n    while q:\n        r = q.popleft()\n        l = r[0]\n        if r[1] < l:\n            return 0\n        while q:\n            l,r = q.popleft()\n            if l == r:\n                if l < l+m-1:\n                    ans += 1\n                elif l < l+m-1:\n                    return 0\n            elif l < l+m-1:\n                q.append((l,r+1))\n                break\n            elif l < l+m-1:\n                q.append((l+1,r))\n                break\n            else:\n                q.append((l,r+1))\n                break\n    return ans\n\ndef"
    },
    {
        "number": 4236,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n > m:\n        print(0)\n        return \"\"\n    elif n == m:\n        print(m)\n        return \"\"\n    else:\n        answer = 0\n        check = list(map(int, stdin.split()))\n        \n        for i in range(n):\n            left, right = check[i], check[i+1]\n            while left <= right:\n                mid = (left + right) // 2\n                if compare(left, right, mid):\n                    answer += 1\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            check = [mid for mid in check if not compare(mid, right, mid + 1)]\n        print(answer)\n        return \"\"\n\n\ndef"
    },
    {
        "number": 4236,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    l_i, r_i = list(map(int, stdin.split()))\n\n    q = []\n    visited = set()\n    \n    for i in range(n):\n        if i in visited:\n            continue\n        q.append(i)\n        visited.add(i)\n\n    print(len(q))\n    def find(x):\n        if x in visited:\n            return x\n        for i in range(n):\n            if i not in visited:\n                if l_i <= x <= r_i:\n                    return i\n                find(i)\n    print(find(q[0]))\n    q = q[1:]\n\n    def solution(stdin: str) -> str:\n        n, m = list(map(int, stdin.split()))\n        l_i, r_i = list(map(int, stdin.split()))\n\n        q = []\n        visited = set()\n        \n        for i in range(n):\n            if i in visited:\n                continue\n            q.append(i)\n            visited.add(i)\n\n        print(len(q))\n        def find(x):\n            if x in visited:\n                return x\n            for i in range(n):\n                if i not in visited:\n                    if l_i <= x <= r_i:\n                        return i\n                    find(i)\n        print(find(q[0]))\n        q = q[1:]\n        \n        def solution(stdin: str) -> str:\n            n, m = list(map(int, stdin.split()))\n            l_i, r_i = list(map(int, stdin.split()))\n\n            q = []\n            visited = set()\n            \n            for i in range(n):\n                if i in visited:\n                    continue\n                q.append(i)\n                visited.add(i)\n\n            print(len(q))\n            def find(x):\n                if x in visited:\n                    return x\n                for i in range(n):\n                    if i not in visited:\n                        if l_i <= x <= r_i:\n                            return i\n                        find(i)\n            print(find(q[0]))\n            q = q[1:]\n\n            def solution(stdin: str) -> str:\n                n, m = list(map(int, stdin.split()))\n                l_i, r_i = list(map(int, stdin.split()))\n\n                q = []\n                visited = set()\n                \n                for i in range(n):\n                    if i in visited:\n                        continue\n                    q.append(i)\n                    visited.add(i)\n\n                print(len(q))\n                def find(x):\n                    if x in visited:\n                        return x\n                    for i in range(n):\n                        if i not in visited:\n                            if l_i <= x <= r_i:\n                                return i\n                            find(i)\n                print(find(q[0]))\n                q = q[1:]\n\n                def solution(stdin: str) -> str:\n                    n, m = list(map(int, stdin.split()))\n                    l_i, r_i = list(map(int, stdin.split()))\n\n                    q = []\n                    visited = set()\n                    \n                    for i in range(n):\n                        if i in visited:\n                            continue\n                        q.append(i)\n                        visited.add(i)\n\n                    print(len(q))\n                    def find(x):\n                        if x in visited:\n                            return x\n                        for i in range(n):\n                            if i not in visited:\n                                if l_i <= x <= r_i:\n                                    return i\n                                find(i)\n                    print(find(q[0]))\n                    q = q[1:]\n\n                    def solution(stdin: str) -> str:\n                        n, m = list(map(int, stdin.split()))\n                        l_i, r_i = list(map(int, stdin.split()))\n\n                        q = []\n                        visited = set()\n                        \n                        for i in range(n):\n                            if i in visited:\n                                continue\n                            q.append(i)\n                            visited.add(i)\n\n                        print(len(q))\n                        def find(x):\n                            if x in visited:\n                                return x\n                            for i in range(n):\n                                if i not in visited:\n                                    if l_i <= x <= r_i:\n                                        return i\n                                    find(i)\n                        print(find(q[0]))\n                        q = q[1:]\n\n                        def solution(stdin: str) -> str:\n                            n, m = list(map(int, stdin.split()))\n                            l_i, r_i = list(map(int, stdin.split()))\n\n                            q = []\n                            visited = set()\n                            \n                            for i in range(n):\n                                if i in visited:\n                                    continue\n                                q.append(i)\n                                visited.add(i)\n\n                            print(len(q))\n                            def find(x):\n                                if x in visited:\n                                    return x\n                                for i in range(n):\n                                    if i not in visited:\n                                        if l_i <= x <= r_i:\n                                            return i\n                                    find(i)\n                            print(find(q[0]))\n                            q = q[1:]\n\n                            def solution(stdin: str) -> str:\n                                n, m = list(map(int, stdin.split()))\n                                l_i, r_i = list(map(int, stdin.split()))\n\n                                q = []\n                                visited = set()\n                               \n                                for i in range(n):\n                                    if i in visited:\n                                        continue\n                                    q.append(i)\n                                    visited.add(i)\n\n                                print(len(q))\n                                def find(x):\n                                    if x in visited:\n                                        return x\n                                    for i in range(n):\n                                        if i not in visited:\n                                            if l_i <= x <= r_i:\n                                                return i\n                                "
    },
    {
        "number": 4236,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    segments = []\n    for _ in range(n):\n        l, r = map(int, stdin.split())\n        segments.append([l, r])\n    answer = 0\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if i == j: continue\n            if (i!= j) and (segments[i][0] <= segments[j][1] and segments[i][1] <= segments[j][0]):\n                answer += 1\n    return str(answer)\n"
    },
    {
        "number": 4236,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n,m = map(int,stdin.split())\n    l,r = map(int,stdin.split())\n    \n    \n    points = list(map(int,stdin.split()))\n    \n    def isPointInSegment(p,s):\n        l,r = 0,m\n        for i in range(len(points)):\n            if p!= points[i]:\n                return False\n            if i+1<m:\n                r = min(r,points[i+1])\n            if i-1>=0:\n                l = max(l,points[i-1])\n        return l<=r\n    \n    def isPointInSegment2(p,s):\n        l,r = 0,m\n        for i in range(len(points)):\n            if p!= points[i]:\n                return False\n            if i+1<m:\n                r = max(r,points[i+1])\n            if i-1>=0:\n                l = min(l,points[i-1])\n        return l<=r\n    \n    if isPointInSegment(l,r):\n        print(0)\n        return\n    if isPointInSegment2(l,r):\n        print(0)\n        return\n    \n    if isPointInSegment(l,r):\n        print(1)\n    else:\n        print(0)\n    return\n\n###itertools.permutations\n\ndef"
    },
    {
        "number": 4237,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    if A % C == 0 and D % B == 0:\n        return '1'\n    elif A % C == 0 and D % B == 0:\n        return '1'\n    elif A % C == 0 and D % B == 0:\n        return '1'\n    else:\n        return '0'\n\"\"\"\n\nimport math\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        # remove the last character of each number\n        num = ''\n        for i in range(len(stdin) - 1):\n            num = num + str(int(stdin[i]) * math.gcd(int(stdin[i+1]), int(stdin[i+2])))\n        return num\n"
    },
    {
        "number": 4237,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n  \n  A, B, C, D = map(int, stdin.split())\n  if A % C == 0 and B % D == 0:\n    return str(B//C) +'and'+ str(A//C + 1)\n  if A % C == 0 and D % B == 0:\n    return str(A//C) +'and'+ str(A//C + 1) +'and'+ str(D//B) +'and'+ str(D//B + 1)\n  if A % C == 0 and D % B == 0:\n    return str(A//C) +'and'+ str(A//C + 1) +'and'+ str(D//B) +'and'+ str(D//B + 1) +'and'+ str(A//C + B//D) +'and'+ str(A//C + B//D + 1)\n  if A % C == 0 and B % D == 0:\n    return str(A//C) +'and'+ str(A//C + 1) +'and'+ str(B//D) +'and'+ str(B//D + 1) +'and'+ str(A//C + B//D) +'and'+ str(A//C + B//D + 1) +'and'+ str(A//C + B//D + B//C) +'and'+ str(A//C + B//D + B//C + 1)\n  if A % C == 0 and D % B == 0:\n    return str(A//C) +'and'+ str(A//C + 1) +'and'+ str(B//D) +'and'+ str(B//D + 1) +'and'+ str(A//C + B//D) +'and'+ str(A//C + B//D + 1) +'and'+ str(A//C + B//D + B//C) +'and'+ str(A//C + B//D + B//C + 1) +'and'+ str(A//C + B//D + B//C + B//D) +'and'+ str(A//C + B//D + B//C + B//D + 1) +'and'+ str(A//C + B//D + B//C + B//D + B//C + 1) +'and'+ str(A//C + B//D + B//C + B//D + B//C + B//D + B//C + 1)\n  if A % C == 0 and D % B == 0:\n    return str(A//C) +'and'+ str(A//C + 1) +'and'+ str(B//D) +'and'+ str(B//D + 1) +'and'+ str(A//C + B//D) +'and'+ str(A//C + B//D + 1) +'and'+ str(A//C + B//D + B//C) +'and'+ str(A//C + B//D + B//C + 1) +'and'+ str(A//C + B//D + B//C + B//D + 1) +'and'+ str(A//C + B//D + B//C + B//D + B//C + 1) +'and'+ str(A//C + B//D + B//C + B//D + B//C + B//D + 1) +'and'+ str(A//C + B//D + B//C + B//D + B//C + B//D + B//C + B//D + 1)\n  if A % C == 0 and B % D == 0:\n    return str(A//C) +'and'+ str(A//C + 1) +'and'+ str(B//D) +'and'+ str(B//D + 1) +'and'+ str(A//C + B//D) +'and'+ str(A//C + B//D + 1) +'and'+ str(A//C + B//D + B//C) +'and'+ str(A//C + B//D + B//C + 1) +'and'+ str(A//C + B//D + B//C + B//D + 1) +'and'+ str(A//C + B//D + B//C + B//D + B//C + 1) +'and'+ str(A//C + B//D + B//C + B//D + B//C + B//D + 1) +'and'+ str(A//C + B//D + B//C + B//D + B//C + B//D + B//C + 1) +'and'+ str(A//C + B//D + B//C + B//D + B//C + B//D + B//C + B//D + B//C + B//D + B//C + 1) +'and'+ str(A//C + B//D + B//C + B//D + B//C + B//D + B//C + B//D + B//C + B//D + B//C + B//D + B//C + 1)\n  if A % C == 0 and D % B == 0:\n    return str(A//C) +'and'+ str(A//C + 1) +'and'+ str(B//D) +'and'+ str(B//D + 1) +'and'+ str(A//C + B//D) +'and'+ str(A//C + B//D + 1) +'and'+ str(A//C + B//D + B//C) +'and'+ str(A//C + B//D + B//C + 1) +'and'+ str(A//C + B//D + B//C + B//D + 1) +'and'+ str(A//C + B//D + B//C + B//D + B//C + 1) +'and'+ str(A//C + B//D + B//C + B//D + B//C + B//D + B//C + B//D + 1) +'and'+ str(A//C + B//D + B//C + B//D + B//C + B//D + B//C + B//D + B//C + B//D + B//C + B//D + B//C + 1) +'and'+ str(A//C + B//D + B//C + B//D + B//C + B//D + B//C + B//D + B//C + B//D + B//C + B//D + B//C + B//D + B//C + B//D + 1) +'and'+ str(A//C + B//D + B//C + B//D + B//C + B//D + B//C + B//D + B//C + B//D + B//C + B//D + B//C + B//D + B//C + B//D + B//C + B//D + B//C + B//D + B//C + B//D + B//C + B//D + B//C + B//D + B//C + B//D + B//C + B//D + B//C + B//D + B//C + B//D + B//C + B//D + B//C + B//D + B//C + B//D + B//C + B//D + B//C + B//D + B//C + B//D + B//C + B//D + B//C + B//D + B//C + B//D + B//C + B//D + B//C + B//D + B//C + B//D + B//C + B//D + B//C + B//D + B//C + B//D + B//C + B//D + B//C + B//D + B//C +"
    },
    {
        "number": 4237,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    A = A + B\n    B = B * (C // D)\n    print(int(B // A))\n"
    },
    {
        "number": 4237,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    nums = []\n    for line in stdin:\n        nums.append(list(map(int, line.split())))\n    return str(nums.count(nums[0]))\n\"\"\"\n\ndef"
    },
    {
        "number": 4237,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def fact(n):\n        if n == 0: return 1\n        return fact(n-1) * n\n\n    return str(fact(len(stdin)))\n"
    },
    {
        "number": 4237,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if (n == 0):\n        return \"\"\n    cnt = 0\n    for a in range(1, n + 1):\n        if (a % 3 == 0 and a % 5 == 0):\n            cnt += 1\n    return str(cnt)\n\"\"\"\n\ndef"
    },
    {
        "number": 4237,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin[0])\n    b = int(stdin[1])\n    c = int(stdin[2])\n    d = int(stdin[3])\n\n    if a > b:\n        a = b\n    if b > c:\n        b = c\n    if c > d:\n        c = d\n\n    if a % c == 0 and b % c == 0 and c % d == 0:\n        print(a // c * b // d)\n    else:\n        print(0)\n\nprint(solution(inp))\n"
    },
    {
        "number": 4237,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    nums = list(map(int, stdin.split()))\n    for i in range(len(nums)):\n        if (nums[i] + 1) % (nums[i] + 2)!= 0:\n            return str(0)\n    return str(len(nums))\n    \n"
    },
    {
        "number": 4237,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    for _ in range(int(stdin)):\n        a, b, c, d = map(int, stdin.split())\n        if c * b == d * c:\n            print(c * a + b * b)\n        if c * d == d * a:\n            print(c * b * b + c * a * a)\n\n\n\ndef"
    },
    {
        "number": 4237,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(int(input()), int(input())+1):\n        if (int(input())%int(input()))%(int(input()))==0:\n            print(i)\n    return \"\"\n"
    },
    {
        "number": 4238,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = 0\n    b = 0\n    for i in stdin:\n        a = a + int(i)\n        b += a\n    if b == a:\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 4238,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    for i in range(len(stdin)-1, -1, -1):\n        n = int(stdin[i])\n        # if it's a multiple of 9, return Yes\n        if n % 9 == 0:\n            return \"Yes\"\n        \n        # if it's not a multiple of 9, return No\n        else:\n            return \"No\"\n\n-----Submissions-----\nSample Execution:\n> python3 solution.py\nNo\nNo\nSample Input:\n1\n1\nSample Output:\nYes\n\"\"\"\n\nimport math\n\ndef"
    },
    {
        "number": 4238,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if (sum(map(int,stdin))%9==0) else \"No\"\n\nRuntime: 932 ms, faster than 60.18% of Python3 online submissions for Check if a number is a multiple of 9.\nMemory Usage: 18 MB, less than 58.49% of Python3 online submissions for Check if a number is a multiple of 9.\n'''\n\nclass Solution:\n    def isMultipleOfNine(self, n: int) -> str:\n        if n % 9 == 0:\n            return \"Yes\"\n        else:\n            return \"No\"\n"
    },
    {
        "number": 4238,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = 0\n    sum = 0\n    for i in range(len(stdin)):\n        if stdin[i].isdigit():\n            n = n*10+int(stdin[i])\n        else:\n            sum += int(stdin[i])\n    if n % 9 == 0 and sum % 9 == 0:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4238,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N%9!=0:\n        return 'No'\n    sum = N//9\n    if sum%9!=0:\n        return 'No'\n    return 'Yes'\n"
    },
    {
        "number": 4238,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # get input data\n    n = int(stdin)\n\n    # start from 1\n    curr = 1\n    next = n\n\n    # initialize answer\n    answer = False\n\n    # check if the number is a multiple of 9\n    while next >= 10:\n        # check if next is multiple of 9\n        if next % 9 == 0:\n            answer = True\n            break\n        # check if next is a multiple of 9\n        elif next % 9!= 0:\n            answer = False\n            break\n        # increment next by 1\n        next += 1\n\n    return answer\n\nprint(solution(input()))\n"
    },
    {
        "number": 4238,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N % 9 == 0:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4238,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if k % n == 0:\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 4238,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    if stdin.isdigit():\n        return \"Yes\" if int(stdin) % 9 == 0 else \"No\"\n    return \"Yes\" if int(stdin) % 9!= 0 else \"No\"\n"
    },
    {
        "number": 4238,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N % 9 == 0:\n        print('Yes')\n    else:\n        print('No')\n\nprint(solution('123456789'))\n\n1. \uc5ec\uae30\ubd80\ud130\uc758 \uc608\uc2dc\ub97c \ud1b5\ud574 \uc2dc\ud000\uc2a4 \ud29c\ud50c\uc758 \ud615\ud0dc\uac00 \uc81c\ub300\ub85c \uc778\uc2dd\ub41c\ub2e4.\n2. \ub2e4\uc74c\uc73c\ub85c \ud29c\ud50c\uc744 \ubcc0\ud658\ud55c \ud6c4, \uc911\ubcf5\ub41c \uc218 \uc5c6\uc560\uae30(set\uc744 \uc774\uc6a9\ud55c \uad6c\ud604)\n3. set\uc744 \uc774\uc6a9\ud55c \uc21c\uc5f4 \ubb38\uc81c \ub610\ub294 \ud480\uc774\ub97c \ud558\uba74\uc11c \ud480\uba74 \ub41c\ub2e4.\n\"\"\""
    },
    {
        "number": 4239,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    if N < 1:\n        return str(0)\n    print(N)\n    if N % 2:\n        return str(1)\n    print(N)\n    return str(0)\n"
    },
    {
        "number": 4239,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.rstrip())\n    dp = [0] * (n+1)\n    dp[0] = 1\n    dp[1] = 6**2\n    dp[2] = 6**3\n    for i in range(3, n+1):\n        dp[i] = 6**2*(i-1)\n        dp[i] += 9**2*(i-2)\n        dp[i] += 36**2*(i-3)\n        for j in range(3, i+1):\n            dp[i] += 6**3*(j-1)\n            dp[i] += 9**3*(j-2)\n            dp[i] += 36**3*(j-3)\n    print(sum(dp))\n\nsolution(input())\n'''\n'''\nfor i in range(2, int(input()) + 1):\n    print(i)\n    \n    print(i ** 3)\n    print(i ** 2)\n    print(i ** 4)\n'''\n'''\n"
    },
    {
        "number": 4239,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n\n    if N < 0:\n        return \"0\"\n    elif N == 0:\n        return \"1\"\n    else:\n        return f\"{int((N/7)**0.5)}/{int((N/36)**0.5)}/{int((N/81)**0.5)}/{int((N/729)**0.5)}\"\n\"\"\"\ndef"
    },
    {
        "number": 4239,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    count = 1\n    for i in range(N):\n        for j in range(i, N, 2):\n            count += 1\n    return count"
    },
    {
        "number": 4239,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    jumin = list(map(int, stdin.split()))\n    jumin.sort()\n    i = 1\n    while N >= i:\n        N -= i\n        i += 1\n    return str(i - 1)\n\nInput\n2\n\nOutput\n1\n\"\"\"\n\ndef"
    },
    {
        "number": 4239,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    if N == 1:\n        return '1'\n    elif N == 2:\n        return '2'\n    elif N == 3:\n        return '3'\n    elif N == 4:\n        return '4'\n    elif N == 5:\n        return '5'\n    elif N == 6:\n        return '6'\n    elif N == 7:\n        return '7'\n    elif N == 8:\n        return '8'\n    elif N == 9:\n        return '9'\n    elif N >= 10:\n        return str(N)+' '+str(N-10)+' '+str(N-9)+' '+str(N-8)+' '+str(N-7)+' '+str(N-6)+' '+str(N-5)+' '+str(N-4)+' '+str(N-3)+' '+str(N-2)+' '+str(N-1)\n    else:\n        return str(N)\n"
    },
    {
        "number": 4239,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, *_ = map(int, stdin)\n    return str(N//(36*9**2+81*9**3))\n\nfor _ in range(int(input())):\n    print(solution(input()))"
    },
    {
        "number": 4239,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, k = map(int, stdin.split())\n    if N == 0: return 0\n    arr = list(map(int, stdin.split()))\n    res = 0\n    for i in range(k):\n        a, b, c, d = map(int, stdin.split())\n        if a <= N <= b:\n            res += c * d\n    return str(res)"
    },
    {
        "number": 4239,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    num,amount,total,n = map(int, stdin.split(' '))\n    count = 0\n    answer = 0\n    while count < n:\n        if amount%10 == 0:\n            answer += amount//10\n            amount = amount%10\n        else:\n            answer += amount//10 + amount%10\n        count += 1\n    answer += amount//10 + amount%10\n    print(answer)\n    return str(answer)\n\ndef"
    },
    {
        "number": 4239,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N < 0:\n        return ''\n    x = (N-1) * 10\n    return x\n\n    # if N <= 0:\n    #     return ''\n    # if N == 0:\n    #     return 9\n    # x = 9^2\n    # y = 9^3\n    # if N >= x + y:\n    #     print(x, y)\n    #     return 9^2\n    # else:\n    #     print(x, y)\n    #     return 9^3\n    # return 0\n\n\ndef"
    },
    {
        "number": 4240,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    if N == 0:\n        return 'No'\n    S = stdin.strip()\n    T = stdin.strip()[::-1]\n    a = len(S)\n    b = len(T)\n    dp = [[False for _ in range(a + 1)] for _ in range(b + 1)]\n    print(dp)\n    for i in range(a):\n        print(i)\n        print(i, len(T))\n        print(i, len(S))\n        print(i, len(T) - i)\n        for j in range(b):\n            print(j, i + j)\n            print(i + j, len(S))\n            print(i + j, len(T) - j)\n            if i + j > a:\n                break\n            print(i + j, dp[j][i + j])\n            if dp[j][i + j] == True:\n                print(\"true\", end=\"\")\n            elif dp[j][i + j] == False:\n                print(\"false\", end=\"\")\n            print(\"\", end=\"\")\n        print()\n    return 'Yes'\n\n\nprint(solution('kyoto'))\n"
    },
    {
        "number": 4240,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def rotate_string(str):\n        rotated = \"\"\n        while len(str) > 0:\n            last = str.pop()\n            if len(str) > 0:\n                rotated = rotated + last\n            else:\n                rotated = rotated[::-1]\n        return rotated\n\n    def check_satisfy(str, str2):\n        if len(str) == len(str2):\n            for i in range(0, len(str)):\n                if str[i]!= str2[i]:\n                    return False\n            return True\n        else:\n            return False\n\n    s1 = list(stdin)\n    if len(s1) % 2!= 0:\n        s1.append('_')\n\n    s2 = list(stdin)\n    if len(s2) % 2!= 0:\n        s2.append('_')\n\n    s1 = rotate_string(s1)\n    s2 = rotate_string(s2)\n    if check_satisfy(s1, s2):\n        return \"Yes\"\n    else:\n        return \"No\"\n\nExplanation\n\nThe function solution(stdin) is given by the following question:\n\nGiven two strings S and T, return if they are equal after performing the following operation on S:\n\nString S after performing the operation on S = T, is equal to T?\nString S after performing the operation on S = T, is equal to T?\nString S after performing the operation on S = T, is equal to T?\n\nConstraints\n\n- 2 \\leq |S| \\leq 100\n- |S| = |T|\n- |S| = |T|\n\n- In the first operation, kyoto becomes okyot.\n- In the second operation, okyot becomes tokyo.\n\nThe function solution(stdin) is guaranteed to return \"Yes\" if the strings are equal after performing the following operation on S = T.\n\n-----Input-----\nkyoto\ntokyo\n\n-----Output-----\nYes\n\n - In the first operation, kyoto becomes okyot.\n - In the second operation, okyot becomes tokyo.\ndef"
    },
    {
        "number": 4240,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def rotate_string(string: str, index: int) -> str:\n        return string[index:] + string[:index]\n    def rotate(string: str, rotation: int) -> str:\n        if rotation % 2 == 0:\n            return string[rotation:] + string[:rotation]\n        else:\n            return string[rotation:] + string[:rotation]\n    def rotations(string: str, count: int) -> str:\n        return string[count:] + string[:count]\n    string = stdin.strip()\n    print(rotate_string(string, 0))\n    print(rotate_string(string, len(string) - 1))\n    print(rotate(string, 1))\n    print(rotate(string, len(string) - 1))\n    print(rotations(string, 2))\n    print(rotations(string, 2))\n    print(rotations(string, len(string) - 2))\n    print(rotations(string, len(string) - 1))\n    print(rotations(string, 0))\n    return 'Yes' if len(string) == len(rotate(string, 2)) else 'No'\n\nprint(solution('kyoto'))\nprint(solution('tokyo'))\nprint(solution('sample test'))\n"
    },
    {
        "number": 4240,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    string = stdin.split()\n    for i in range(n):\n        string[i] = string[i].replace(\"kyoto\", \"okyo\")\n        string[i] = string[i].replace(\"tokyo\", \"kyo\")\n    print(\"\".join(string))\n    return \"Yes\" if \"kyoto\" == string[0] and \"tokyo\" == string[1] else \"No\"\n\n\"\"\"\n\"kyoto\" --> \"okyo\"\n\"tokyo\" --> \"kyo\"\n\"\"\"\n\ndef"
    },
    {
        "number": 4240,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n\n    arr = []\n    for i in range(n):\n        arr.append(stdin[i].upper())\n\n    print(''.join(arr))\n\n    return 'Yes' if ''.join(arr) == ''.join(stdin[::-1]) else 'No'\n\ndef"
    },
    {
        "number": 4240,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    p = stdin.split()\n    for i in range(len(p)):\n        p[i] = p[i].lower()\n    return p[1]\n"
    },
    {
        "number": 4240,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    for _ in range(int(stdin)):\n        stdin = stdin.replace(str(input()), str(stdin))\n    return stdin\n  \n  \n  \n  \n"
    },
    {
        "number": 4240,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    answer = True\n    for _ in range(len(s)):\n        answer = answer and s[-1] == s[-2]\n    return str(answer)\n\n-----TEST CASES-----\ns = 'kyoto'\nt = 'tokyo'\nprint(solution(s))\nprint(solution(t))\n\n\ndef"
    },
    {
        "number": 4240,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if find(stdin) else 'No'\n\"\"\"\n\ndef"
    },
    {
        "number": 4240,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(1, len(stdin)):\n        print(stdin[i-1] == stdin[i])\n\n-----Tutorial-----\ndef"
    },
    {
        "number": 4241,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n  S, T = stdin.split()\n  T = T.upper()\n  counter = 0\n  i = 0\n  while i < len(S):\n    if S[i] == T[i]:\n      counter += 1\n    i += 1\n  return str(counter)\n\n'''\n"
    },
    {
        "number": 4241,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    def check(s, t):\n        d = collections.Counter(s)\n        c = collections.Counter(t)\n        return s == t or d > c or d == c and s[0] not in t\n    \n    def find(i, string):\n        if string[i] == 'a':\n            return i\n        else:\n            return find(i + 1, string[:i] + 'b' + string[i+1:])\n    \n    def update(i, string):\n        string = string + 'a'\n        while i < len(string) and string[i]!= 'a':\n            i += 1\n        return i\n    \n    def cover(i, s, t):\n        while i < len(s) and s[i] == 'a':\n            i += 1\n        while i < len(s) and s[i]!= 'a':\n            s = s[:i] + 'b' + s[i:]\n            i = update(i, s)\n        return i, s\n    \n    def count(s, t):\n        i, string = 0, s\n        while string[i]!= 'a':\n            i, string = cover(i, string, t)\n        i += 1\n        return i\n    \n    def compare(i, string):\n        return string[:i] + 'b' + string[i:]\n    \n    S, T = stdin.split()\n    i, j = 0, 0\n    min_num = len(T)\n    while j < len(S):\n        num = count(S[j:], T[i:])\n        if num >= len(T):\n            break\n        if not check(T[i:], S[j:]):\n            i, j = 0, 0\n        else:\n            j = find(i, S[j:])\n            i += 1\n            num = compare(i, S[j:])\n        if num < len(T):\n            min_num = min(num, min_num)\n    return min_num\n"
    },
    {
        "number": 4241,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    str = input()\n    str = str.lower()\n    print(len(str))\n    return str[::-1]\n\nn = int(stdin.strip())\n"
    },
    {
        "number": 4241,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution is to get the substring of S into the substrings of T\n    Then change each character of S into T\n    \"\"\"\n    S = stdin.strip()\n    T = stdin.strip()\n\n    N = len(S)\n    if N < 2:\n        return N\n\n    change = 0\n    for i in range(N):\n        if T[i]!= S[i]:\n            change += 1\n        if change < N - i:\n            change = N - i\n    return change\n"
    },
    {
        "number": 4241,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    s = list(s)\n    t = list(t)\n    if len(s) > len(t):\n        return 0\n    \n    def func(start, end):\n        if end > len(s):\n            return 0\n        \n        if end < len(t) and s[start] == t[end]:\n            return 1 + func(start+1, end+1)\n        return 0\n    \n    return func(0, len(s))\n\ntime complexity: O(n)\nspace complexity: O(1)\n\n'''\nclass Solution:\n    def minSubstring(self, s: str, t: str) -> int:\n        st = {c:i for i, c in enumerate(s)}\n        tl = {c:i for i, c in enumerate(t)}\n        \n        # length check\n        cnt = len(s)\n        for c in tl:\n            if c not in st:\n                cnt -= 1\n                break\n            \n        return cnt\n"
    },
    {
        "number": 4241,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    pass\n\ndef"
    },
    {
        "number": 4241,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\ndef"
    },
    {
        "number": 4241,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = list(stdin)\n    t = list(stdin)\n    for i in range(len(s)):\n        if s[i] == 'c':\n            j = i\n            while j < len(s) and s[j] == 'c':\n                s[j] = t[i]\n                i = j + 1\n                j = i\n    return ''.join(s)\n"
    },
    {
        "number": 4241,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    s_count = len(s)\n    t_count = len(t)\n    \n    if s_count == 0 or t_count == 0:\n        return 0\n    \n    diff = t_count - s_count\n    \n    if diff > 1:\n        return 0\n    \n    if diff == 1:\n        if t[0] == s[0]:\n            return 1 + solution(s[1:])\n        else:\n            return 0\n    \n    if t[0]!= s[0]:\n        return 0\n    \n    return solution(s[1:]) + solution(t)\n\n\"\"\"\ndef"
    },
    {
        "number": 4241,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split()\n    return len(S) - len(T)\n"
    },
    {
        "number": 4242,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin))\n\n\n\"\"\"\nfrom math import sqrt\nclass Solution:\n    def KthLargest(self, A, B, K):\n        A.sort()\n        B.sort()\n        n = len(A)\n        def find_sqr_num(A, B, K):\n            left, right = 0, n - 1\n            while left <= right:\n                mid = (left + right) // 2\n                num = A[mid] * B[mid]\n                if num > K:\n                    right = mid - 1\n                elif num < K:\n                    left = mid + 1\n                else:\n                    return num\n            \n        return find_sqr_num(A, B, K)\n        \n        \n        \n        \n        "
    },
    {
        "number": 4242,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n  \n  n,k = map(int,stdin.split())\n  A,B = map(int,stdin.split())\n  a,b = A//B, A%B\n  \n  if a>b:\n    print(a)\n  else:\n    print(b)"
    },
    {
        "number": 4242,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n  n, k = list(map(int, stdin.split()))\n  for _ in range(k):\n    A, B = list(map(int, stdin.split()))\n    if A % B == 0:\n      return str(B)\n  \n'''\n"
    },
    {
        "number": 4242,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = map(int, stdin.split())\n    while b * a < k * b:\n        a += 1\n    print(a, b, a * b // k)\n    return a * b // k\n\n-----Sample Input-----\n2 4\n\nOutput: 4\n\nSample Input:\n2\n\nOutput: 4\n\nSample Input:\n2\n\nOutput: 4\n\nSample Input:\n1\n\nOutput: 2\n\nSample Input:\n1\n\nOutput: 2\n\n-----Solution-----\n'''\n\nimport sys"
    },
    {
        "number": 4242,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    nums = list(map(int, stdin.split(' ')))\n    nums.sort()\n    return str(nums[-1])\n"
    },
    {
        "number": 4242,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    A, B = map(int, stdin.split())\n    largest = max(A, B)\n    \n    def fun(A, B):\n        result = 1\n        while True:\n            if A % B == 0 and A / B > result:\n                result = A / B\n            elif B % A == 0 and B / A > result:\n                result = B / A\n            else:\n                break\n        return result\n    \n    for i in range(K):\n        A, B = map(int, stdin.split())\n        print(fun(A, B))\n"
    },
    {
        "number": 4242,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, m = [int(x) for x in stdin.split()]\n    \n    for i in range(n-1, m-2, -1):\n        if n % i == 0:\n            return str(i) + '\\n'\n    \n    return str(m-1) + '\\n'\n\"\"\"\n\ndef"
    },
    {
        "number": 4242,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # 0 1 2\n    # 1 2 3\n    # 2 3 4\n    # 3 4 5\n    # 4 5 6\n    # 5 6 7\n    # 6 7 8\n    # 7 8 9\n    # 8 9 10\n    # 9 10 11\n    \n    # sum(input) = sum(range(0, input))\n    # input = (0,1)\n\n    # k = 1\n    # while k < input[-1]+1\n    # k = k + 1\n    # return k\n    # return str(input[0] + 1)\n    input = list(map(int, input().split()))\n    result = input[0]\n    for i in range(1, len(input)):\n        if input[i] % result!= 0:\n            result = input[i] // result\n    return str(result)\n\ndef"
    },
    {
        "number": 4242,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n    if A%B == 0:\n        A = A // B\n    if K>B:\n        return str(B)\n    else:\n        return str(K)\n"
    },
    {
        "number": 4242,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = list(map(int, stdin.split()))\n    for i in range(1, K + 1):\n        A_i = A // B ** i\n        B_i = B // A ** i\n        if A_i > B_i:\n            A = A_i\n            B = B_i\n    return str(A) + str(B)\n\n----Input----\n5 8 5\n\n----Output----\n10\n----Sample Input----\n8 12 2\n\n----Sample Output----\n2\n\"\"\"\n\ndef"
    },
    {
        "number": 4243,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    import re\n    import sys\n    sys.setrecursionlimit(10**6)\n    n = int(stdin.rstrip())\n    s = stdin.rstrip()\n    answer = ''\n    while s!= '':\n        l = len(s)\n        i = 0\n        res = 0\n        while i < l and s[i] =='':\n            i += 1\n        if s[i:i+3] == '500-':\n            res += 10**9\n            s = s[:i] + s[i+3:]\n            i += 2\n            while i < l and s[i] =='':\n                i += 1\n            if s[i:i+3] == '500-':\n                res += 10**9\n                s = s[:i] + s[i+3:]\n                i += 2\n                while i < l and s[i] =='':\n                    i += 1\n                if s[i:i+3] == '500-':\n                    res += 10**9\n                    s = s[:i] + s[i+3:]\n                    i += 2\n                    while i < l and s[i] =='':\n                        i += 1\n                    if s[i:i+3] == '500-':\n                        res += 10**9\n                        s = s[:i] + s[i+3:]\n                        i += 2\n                        while i < l and s[i] =='':\n                            i += 1\n                        if s[i:i+3] == '500-':\n                            res += 10**9\n                            s = s[:i] + s[i+3:]\n                            i += 2\n                            while i < l and s[i] =='':\n                                i += 1\n                            if s[i:i+3] == '500-':\n                                res += 10**9\n                                s = s[:i] + s[i+3:]\n                                i += 2\n                                while i < l and s[i] =='':\n                                    i += 1\n                                if s[i:i+3] == '500-':\n                                    res += 10**9\n                                    s = s[:i] + s[i+3:]\n                                    i += 2\n                                    while i < l and s[i] =='':\n                                        i += 1\n                                    if s[i:i+3] == '500-':\n                                        res += 10**9\n                                        s = s[:i] + s[i+3:]\n                                        i += 2\n                                        while i < l and s[i] =='':\n                                            i += 1\n                                        if s[i:i+3] == '500-':\n                                            res += 10**9\n                                            s = s[:i] + s[i+3:]\n                                            i += 2\n                                            while i < l and s[i] =='':\n                                                i += 1\n                                            if s[i:i+3] == '500-':\n                                                res += 10**9\n                                                s = s[:i] + s[i+3:]\n                                                i += 2\n                                                while i < l and s[i] =='':\n                                                    i += 1\n                                                if s[i:i+3] == '500-':\n                                                    res += 10**9\n                                                    s = s[:i] + s[i+3:]\n                                                    i += 2\n                                                    while i < l and s[i] =='':\n                                                        i += 1\n                                                    if s[i:i+3] == '500-':\n                                                        res += 10**9\n                                                        s = s[:i] + s[i+3:]\n                                                        i += 2\n                                                        while i < l and s[i] =='':\n                                                         i += 1\n                                                        if s[i:i+3] == '500-':\n                                                            res += 10**9\n                                                            s = s[:i] + s[i+3:]\n                                                            i += 2\n                                                            while i < l and s[i] =='':\n                                                                i += 1\n                                                            if s[i:i+3] == '500-':\n                                                                res += 10**9\n                                                                s = s[:i] + s[i+3:]\n                                                                i += 2\n                                                                while i < l and s[i] =='':\n                                                                    i += 1\n                                                                if s[i:i+3] == '500-':\n                                                                    res += 10**9\n                                                                    s = s[:i] + s[i+3:]\n                                                                    i += 2\n                                                                    while i < l and s[i] =='':\n                                                                        i += 1\n                                                                if s[i:i+3] == '500-':\n                                                                    res += 10**9\n                                                                    s = s[:i] + s[i+3:]\n                                                                    i += 2\n                                                                    while i < l and s[i] =='':\n                                                                        i += 1\n                                                                if s[i:i+3] == '500-':\n                                                                    res += 10**9\n                                                                    s = s[:i] + s[i+3:]\n                                                                    i += 2\n                                                                    while i < l and s[i] =='':\n                                                                        i += 1\n                                                                if s[i:i+3] == '500-':\n                                                                    res += 10**9\n                                                                    s = s[:i] + s[i+3:]\n                                                                    i += 2\n                                                                    while i < l and s[i] =='':\n                                                                        i += 1\n                                                                if s[i:i+3] == '500-':\n                                                                    res += 10**9\n                                                                    s = s[:i] + s[i+3:]\n                                                                    i += 2\n                                                                    while i < l and s[i] =='':\n                                                                        i += 1\n                                                                if s[i:i+3] == '500-':\n                                                                    res += 10**9\n                                                                    s = s[:i] + s[i+3:]\n                                                                    i += 2\n                                                                    while i < l and s[i] =='':\n                                                                        i += 1\n                                                                if s[i:i+3] == '500-':\n                                                                    res += 10**9\n                                                                    s = s[:i] + s[i+3:]\n                                                                    i += 2\n                                                                    while i < l and s[i] =='':\n                                                                        i += 1\n                                                                if s[i:i+3] =="
    },
    {
        "number": 4243,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    happiness = 0\n    if (X<500):\n        happiness += 2 * 500\n    if (X<=100):\n        happiness += 5 * 500\n    if (X<=50):\n        happiness += 10 * 500\n    if (X<=10):\n        happiness += 5 * 500\n    if (X<=5):\n        happiness += 1 * 500\n    return str(happiness)\n"
    },
    {
        "number": 4243,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin.split()[0])\n    coins = [int(c) for c in stdin.split()[1]]\n    happiness = 0\n    for coin in coins:\n        happiness += coin * X\n    if happiness > 50:\n        happiness = 50\n    elif happiness > 5:\n        happiness = 5\n    elif happiness > 10:\n        happiness = 10\n    elif happiness > 5:\n        happiness = 5\n    elif happiness > 1:\n        happiness = 1\n    return str(happiness)\n\n\"\"\"\n\nimport math\n\ndef"
    },
    {
        "number": 4243,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    X, *coins = [int(i) for i in stdin.split()]\n    sum_count = sum(coins)\n    for coin_count in range(1, sum_count + 1):\n        if X >= coin_count:\n            break\n        X -= coin_count\n        sum_count -= coin_count\n    else:\n        return str(sum_count)\n    return \"2000\"\n"
    },
    {
        "number": 4243,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    coins = [500, 100, 50, 10, 5, 1]\n    count = 0\n    for i in range(n):\n        if coins[i] >= 500:\n            count += 500\n        if coins[i] >= 5:\n            count += 5\n        if coins[i] >= 10:\n            count += 10\n        if coins[i] >= 50:\n            count += 50\n        if coins[i] >= 5:\n            count += 5\n        if coins[i] >= 1:\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 4243,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    X, Y = map(int, stdin.split())\n    return str(max(X, Y) + (X - Y))"
    },
    {
        "number": 4243,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin.strip())\n    res = 1\n    d = {\n        500: 0,\n        100: 0,\n        50: 0,\n        10: 0,\n        5: 0,\n        1: 0\n    }\n    for i in range(1, X + 1):\n        d[i] = d[i - 1] + 1\n    if X <= 5:\n        for i in range(1, X + 1):\n            d[i] = d[i - 1] + 1\n            res = max(res, d[i])\n        return str(res)\n    elif X % 2 == 0:\n        for i in range(1, X // 2 + 1):\n            d[i * 2] = d[i * 2 - 1] + 1\n            res = max(res, d[i * 2])\n        return str(res)\n    else:\n        for i in range(1, X // 2 + 1):\n            d[i * 2] = d[i * 2 - 1] + 1\n            d[i * 2 + 1] = d[i * 2 + 1] + 1\n            res = max(res, d[i * 2])\n        return str(res)\n"
    },
    {
        "number": 4243,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    X, *coins = list(map(int, stdin.split()))\n    gains = 0\n    for coin in coins:\n        if coin == 1:\n            gains += 1000\n        else:\n            gains += coin\n    return str(gains)\n"
    },
    {
        "number": 4243,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin.strip())\n    # X = 60\n    # X = 1200\n    # X = 8\n    # X = 100\n    # X = 50\n    # X = 10\n    # X = 5\n    # X = 1\n    # X = 4\n    # X = 3\n    # X = 2\n    \n    \n    happiness = 0\n    for i in range(1, X + 1):\n        coins = [500, 100, 50, 10, 5, 1]\n        happiness += coins[i - 1]\n    return str(happiness)"
    },
    {
        "number": 4243,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n < 3:\n        return \"0\"\n    if n == 3:\n        return \"1\"\n    if n == 2:\n        return \"2\"\n    return str(len(set([x for x in range(n)])) - 1) + \"1\"\n"
    },
    {
        "number": 4244,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    X = [int(x) for x in stdin.split(' ')]\n    visited = [[False] * N for _ in range(N)]\n    \n    def solve(x):\n        if x == N:\n            return 0\n        visited[x][x] = True\n        \n        for i in range(N):\n            for j in range(x + 1, N):\n                if X[i] == X[j] and not visited[i][j]:\n                    if i + j >= N:\n                        return 0\n                    solve(i + 1)\n        return X[x]\n    \n    return str(solve(0))\n"
    },
    {
        "number": 4244,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n  n, x = map(int, stdin.split())\n  return str(abs(n - (x ** 2)))\n"
    },
    {
        "number": 4244,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    X_1, X_2, *_ = map(int, stdin.split())\n    _, total = divmod(X_1*X_2, N)\n    return str(total)\n\n\"\"\"\nclass Solution:\n    def minStamina(self, N: int, X: int, P: int) -> str:\n        return str(X*X - N*N - P*P)\n"
    },
    {
        "number": 4244,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, X = map(int, stdin.split())\n    return str(min(X * (X - 1) * (N - 1) * (N - 2), X * (N - 1) * (N - 1) * (N - 2)))\n"
    },
    {
        "number": 4244,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, *X = list(map(int, stdin.split()))\n    dp = [[0 for _ in range(N+1)] for _ in range(N+1)]\n    \n    for i in range(N):\n        for j in range(i, N):\n            dp[i][j] = (dp[j][i] + (dp[i][j - 1] - 2 * X[j - 1])) % 1000000007\n    \n    return str(dp[N][N])\n\n'''"
    },
    {
        "number": 4244,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, X = map(int, stdin.split())\n    \n    def solve(x):\n        ans = 0\n        for n in range(1, x+1):\n            ans += (n-1)*(n-1)//2\n        return ans\n    \n    def solve_helper(x, ans):\n        if x == N:\n            return ans\n        \n        if x % 2 == 0:\n            ans = ans + solve_helper(x+1, ans)\n            ans = ans + solve(x+1)\n            return ans\n        \n        if x % 2!= 0:\n            ans = ans + solve_helper(x+1, ans)\n            ans = ans + solve(x+1)\n            return ans\n    \n    return solve_helper(N, 0)\n"
    },
    {
        "number": 4244,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin)\n    x = [list(map(int,input().split())) for _ in range(n)]\n    dp = [[0] * 101 for _ in range(n)]\n    dp[0][0] = 1\n    for i in range(1, n):\n        for j in range(i):\n            if x[i][0] > x[j][0]:\n                dp[i][0] = dp[j][0] + dp[i][0]\n            if x[i][1] > x[j][1]:\n                dp[i][1] = dp[j][1] + dp[i][1]\n    \n    \n    for i in range(1, n):\n        for j in range(i):\n            if x[i][0] > x[j][0] and x[i][1] > x[j][1]:\n                dp[i][0] = min(dp[i][0], dp[j][0] + dp[i][0] + (2*dp[j][0]-1))\n            if x[i][1] > x[j][1] and x[i][0] > x[j][0] and x[i][1] > x[j][1]:\n                dp[i][1] = min(dp[i][1], dp[j][1] + dp[i][1] + (2*dp[j][1]-1))\n\n    return str(min(dp[n-1]))\n"
    },
    {
        "number": 4244,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = list(map(int, stdin.split()))\n    answer = []\n    for i in range(n):\n        if i % 2 == 0:\n            x.append(x[i] ** 2)\n        else:\n            x.append(x[i] * x[i + 1])\n    answer = sum(x)\n    return str(answer)"
    },
    {
        "number": 4244,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 2 or n > 100:\n        return 'Error'\n    p = 2\n    while p < 100:\n        temp = p ** 2\n        for i in range(p - 1, n):\n            temp += p ** 2\n        print(temp)\n        p += 1\n    return str(temp)"
    },
    {
        "number": 4244,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, X = map(int, stdin.split())\n    ans = 0\n    for i in range(1, N + 1):\n        if i * i < X:\n            ans += (X - i * i) ** 2\n    print(ans)\n"
    },
    {
        "number": 4245,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split(' '))\n    s = 0\n    # TODO: add your code here\n    pass\n"
    },
    {
        "number": 4245,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    line = list(stdin.strip().split(\" \"))\n    n = line[0]\n    a = line[1]\n    b = line[2]\n    return n+a+b\n"
    },
    {
        "number": 4245,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s1 = int(stdin.split(' ')[0])\n    s2 = int(stdin.split(' ')[1])\n    \n    result = 0\n    \n    while s1 > 0 or s2 > 0:\n        s1 = s1 // 2\n        s2 = s2 // 2\n        \n        if s2 >= s1:\n            s1, s2 = s2, s1\n            \n            result += 1\n    \n    return str(result)\n\"\"\"\n\ndef"
    },
    {
        "number": 4245,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin.split())\n    if n == 1:\n        return 0\n    if n % 2 == 0:\n        return 0\n    A = n//2\n    B = 2\n    power_strip = [0,0]\n    power_strip[0] = A - B\n    for i in range(1,n):\n        power_strip.append(A-i)\n    return str(min(power_strip))"
    },
    {
        "number": 4245,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A = int(stdin[0])\n    B = int(stdin[1])\n    n = int(stdin[2])\n    power_stripes = []\n    for i in range(n):\n        power_stripes.append(list(map(int, input().split())))\n\n    count = 0\n    for i in range(A,B+1):\n        check = True\n        for j in range(0, len(power_stripes[i])):\n            if power_stripes[i][j] > 0:\n                check = False\n                break\n\n        if check == True:\n            count += 1\n    print(count)\n'''\ndef"
    },
    {
        "number": 4245,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n  \n  \n  def dfs(i, j, sum_):\n    global answer\n    if answer == 10001:\n      return 0\n    if i == n and j == m:\n      answer += sum_\n      return answer\n    if (i < n and j < m):\n      if (sum_ > answer + dfs(i + 1, j + 1, sum_)):\n        answer = sum_\n        return answer\n      answer = min(answer, dfs(i + 1, j + 1, sum_))\n      return answer\n      \n      \n  \n  n, m = map(int, stdin.split())\n  \n  answer = 10001\n  dfs(0, 0, 0)\n  \n  return answer\n"
    },
    {
        "number": 4245,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    min_ = []\n    for i in range(1, A):\n        min_.append(i)\n        for j in range(1, B):\n            if j!= i:\n                min_.append(i)\n    return str(len(min_))\n"
    },
    {
        "number": 4245,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n  # Main\n  ans = 0\n  for _ in range(int(stdin)):\n    A, B = map(int, stdin.split())\n    if A % 2 == 0:\n      A = 2\n    else:\n      A = 3\n    if B % 2 == 0:\n      B = 2\n    else:\n      B = 3\n    if A > B:\n      ans += A - B\n    else:\n      ans += B - A\n  print(ans)\n\nTime: O(2^N)\nSpace: O(N)\n\"\"\"\n\ndef"
    },
    {
        "number": 4245,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    _, A, B = map(int, stdin.split())\n\n    if A > B:\n        A, B = B, A\n\n    if A >= B:\n        # find the minimum possible number of power strips required\n        for _ in range(1, min(A, B)):\n            A -= 1\n            B += 1\n        # print(A, B)\n    else:\n        A = min(A, B)\n    return str(A)\n\n\n'''\n\n'''\nclass Solution:\n    def solution(self, A, B):\n        n = len(A)\n        if B > A:\n            B, A = A, B\n        if A > B:\n            A, B = B, A\n        s = []\n        for i in range(n):\n            if A[i] == B[i]:\n                s.append(i)\n        res = s + [n - len(s)]\n        for i in range(n, n + B):\n            if i in s:\n                res.remove(i - n)\n            if i in res:\n                res.remove(i)\n        return str(len(res))\n\n'''\n\n'''\n\n'''\n\n'''\nclass Solution:\n    def solution(self, A, B):\n        n = len(A)\n        if B > A:\n            B, A = A, B\n\n        if A >= B:\n            for i in range(n, n + B):\n                if i in A:\n                    A.remove(i)\n                if i in B:\n                    B.remove(i)\n            res = n + B\n        else:\n            for i in range(n, n + B):\n                if i in A:\n                    A.remove(i)\n                if i in B:\n                    B.remove(i)\n            res = B\n        return str(len(A) - len(A)) + str(res)\n\n\n'''\n\n'''\n\nclass Solution:\n    def solution(self, A, B):\n        n = len(A)\n        if B > A:\n            B, A = A, B\n\n        if A >= B:\n            for i in range(n, n + B):\n                if i in A:\n                    A.remove(i)\n                if i in B:\n                    B.remove(i)\n            res = n + B\n        else:\n            for i in range(n, n + B):\n                if i in A:\n                    A.remove(i)\n                if i in B:\n                    B.remove(i)\n            res = B\n        return str(len(A) - len(A)) + str(res)\n\n\n'''\n\n'''\n\n'''\nclass Solution:\n    def solution(self, A, B):\n        n = len(A)\n        if B > A:\n            B, A = A, B\n\n        if A >= B:\n            for i in range(n, n + B):\n                if i in A:\n                    A.remove(i)\n                if i in B:\n                    B.remove(i)\n            res = n + B\n        else:\n            for i in range(n, n + B):\n                if i in A:\n                    A.remove(i)\n                if i in B:\n                    B.remove(i)\n            res = B\n        return str(len(A) - len(A)) + str(res)\n\n'''\n\n\n'''\nclass Solution:\n    def solution(self, A, B):\n        if len(A) <= 1:\n            return str(len(A) + 1)\n        if A[0] == B[0] and len(A) > 1:\n            return str(len(A) + 1)\n        return str(len(A) + 1) + str(len(A) + 1)\n\n\n'''\n\n'''\nclass Solution:\n    def solution(self, A, B):\n        n = len(A)\n        if B > A:\n            B, A = A, B\n\n        if A >= B:\n            for i in range(n, n + B):\n                if i in A:\n                    A.remove(i)\n                if i in B:\n                    B.remove(i)\n            res = n + B\n        else:\n            for i in range(n, n + B):\n                if i in A:\n                    A.remove(i)\n                if i in B:\n                    B.remove(i)\n            res = B\n        return str(len(A) - len(A)) + str(res)\n\n'''\n"
    },
    {
        "number": 4245,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    A_sockets = sorted(set(map(int, stdin.split())))\n    B_sockets = sorted(set(map(int, stdin.split())))\n    return str(min(A_sockets, B_sockets)) + \" \" + str(min(A_sockets)) + \" \" + str(min(B_sockets))\n\n-----Test Cases-----\nSample Input 1:\n4 10\nSample Output 1:\n3\n\nSample Input 2:\n3 10\nSample Output 2:\n3\n\nSample Input 3:\n10 10\nSample Output 3:\n10\n\nSample Input 4:\n10 10\nSample Output 4:\n10\n\n-----Sample Input 5:\n10 10\n1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9\n10\n\n-----Sample Output 5:\n10\n\"\"\"\n\ndef"
    },
    {
        "number": 4246,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    i = 0\n    j = 0\n    k = 0\n    result = 0\n    while i < len(stdin) and j < len(stdin[0]):\n        if stdin[i] == 'C':\n            result += 1\n            i += 1\n        elif stdin[i] == 'R':\n            result += 1\n            j += 1\n        else:\n            result += 1\n            i += 1\n            k += 1\n    print(result)\n    return str(result)"
    },
    {
        "number": 4246,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    answer = []\n    input = stdin.split('\\n')\n\n    for line in input:\n        if 'C' in line:\n            answer.append(2)\n        elif 'S' in line:\n            answer.append(0)\n        elif 'R' in line:\n            answer.append(1)\n        else:\n            answer.append(3)\n    \n    return '\\n'.join(map(str, answer))"
    },
    {
        "number": 4246,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s, t, p = [l.split() for l in stdin.split('\\n')]\n    st = len(s) - 1\n    tt = len(t) - 1\n    l = len(p)\n    if st < tt:\n        return 'ERROR'\n    if st > tt:\n        return 'ERROR'\n    for i in range(l):\n        if s[i] == 'C':\n            if i!= st and s[st - i]!= 'R':\n                return 'ERROR'\n        elif s[i] == 'R':\n            if i!= st and s[st - i]!= 'C':\n                return 'ERROR'\n    for i in range(l):\n        if p[i] == 'C':\n            if i!= tt and p[tt - i]!= 'R':\n                return 'ERROR'\n        elif p[i] == 'R':\n            if i!= tt and p[tt - i]!= 'C':\n                return 'ERROR'\n    return 'Correct'\n-----Sample Output-----\nSample Input:\nC\\nR\\nR\\nR\\n\nSample Output:\n1\n\n Explanation:\nGiven the string S = 'CRCB', the string is actually rainy. In this case, it is correct.\n\n-----Constraints-----\n - S and T are strings of length 3 each.\n - S and T consist of S, C, and R.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nS\nT\n\n-----Output-----\nPrint the number of days for which the forecast was correct.\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4246,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n  def get_sunny(h, m, s):\n    return 0 if (h==0 or m==0 or s==0) else 1\n  def get_rainy(h, m, s):\n    return 1 if (h==0 or m==0 or s==0) else 0\n  def get_sunny_rainy(h, m, s):\n    return 2 if (h==0 or m==0 or s==0) else 3\n  \n  def get_wind_rose(h, m, s):\n    if h==0 and m==0 and s==0:\n      return 1\n    elif h==0 and m==0 and s==1:\n      return 2\n    elif h==0 and m==0 and s==2:\n      return 3\n    else:\n      return 0\n  \n  def get_wind_snow(h, m, s):\n    if h==0 and m==0 and s==0:\n      return 1\n    elif h==0 and m==0 and s==1:\n      return 2\n    elif h==0 and m==0 and s==2:\n      return 3\n    else:\n      return 0\n  \n  def get_wind_snow_all_day(h, m, s):\n    if h==0 and m==0 and s==0:\n      return 1\n    elif h==0 and m==0 and s==1:\n      return 2\n    elif h==0 and m==0 and s==2:\n      return 3\n    else:\n      return 0\n  \n  def get_wind_snow_hour(h, m, s):\n    if h==0 and m==0 and s==0:\n      return 1\n    elif h==0 and m==0 and s==1:\n      return 2\n    elif h==0 and m==0 and s==2:\n      return 3\n    else:\n      return 0\n  \n  \n  for i in range(0, len(stdin)):\n    h, m, s = map(int, stdin[i].split())\n    # sunny\n    if s==0:\n      if get_sunny(h, m, s)==s:\n        s += 1\n    # rainy\n    elif s==1:\n      if get_rainy(h, m, s)==s:\n        s += 1\n    # sunny and rainy\n    else:\n      if get_sunny_rainy(h, m, s)==s:\n        s += 1\n      if get_rainy_rainy(h, m, s)==s:\n        s += 1\n      \n      # sunny and rainy and all day\n      if get_wind_rose(h, m, s)==s:\n        s += 1\n      if get_wind_snow_all_day(h, m, s)==s:\n        s += 1\n      if get_wind_snow_hour(h, m, s)==s:\n        s += 1\n    \n  return s\n\n\n\nprint(solution([\"CSR\",\"CCS\",\"CSR\"]))\nprint(solution([\"SSSS\",\"CCS\",\"SSSS\"]))\nprint(solution([\"CCS\",\"SSSS\"]))\nprint(solution([\"SSSS\",\"CCS\"]))"
    },
    {
        "number": 4246,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split(\"\\n\")\n    weather = s[0].split(\" \")\n    temperature = s[1].split(\" \")\n    actual = s[2].split(\" \")\n    print(int(weather[0])-1)\n    print(int(temperature[0])-1)\n    print(int(actual[0])-1)\n    \n    \n    if weather[0] == \"Sunny\":\n        print(1)\n    elif weather[0] == \"Rainy\":\n        print(2)\n    elif weather[0] == \"Sun\":\n        print(3)\n    elif weather[0] == \"Cloudy\":\n        print(4)\n    else:\n        print(5)"
    },
    {
        "number": 4246,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    a,b,c,d = stdin.split()\n    a = a.split(\" \")\n    b = b.split(\" \")\n    c = c.split(\" \")\n    d = d.split(\" \")\n    a = a[0:len(a) - 2]\n    b = b[0:len(b) - 2]\n    c = c[0:len(c) - 2]\n    d = d[0:len(d) - 2]\n    a = int(a)\n    b = int(b)\n    c = int(c)\n    d = int(d)\n    s = max(a,b,c,d)\n    if s == a or s == b or s == c or s == d:\n        return \"0\"\n    else:\n        return \"1\""
    },
    {
        "number": 4246,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    weather = stdin[0]\n    day = stdin[1]\n    weather = weather.replace(weather[0], 'C').replace(weather[1], 'R').replace(weather[2], 'S')\n    day = int(day)\n    answer = 0\n    if weather == 'Sunny' or weather == 'Cloudy':\n        answer = 1\n    elif weather == 'Sunny' or weather == 'Cloudy':\n        answer = 2\n    elif weather == 'Rainy':\n        answer = 3\n    return answer"
    },
    {
        "number": 4246,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return"
    },
    {
        "number": 4246,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # word = 'CSR'\n    word = input()\n    # res = solve(word)\n    # return res\n    res = solve(word)\n    # print(res)\n    return res\ndef"
    },
    {
        "number": 4246,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    S = stdin.split(\" \")\n    T = stdin.split(\" \")\n    \n    s = 0\n    t = 0\n    \n    for i in range(0,len(S)):\n        if S[i] == \"S\":\n            s = s+1\n        elif S[i] == \"C\":\n            t = t+1\n        elif S[i] == \"R\":\n            t = t+1\n        \n        if T[i] == \"S\":\n            t = t-1\n        elif T[i] == \"C\":\n            s = s-1\n        elif T[i] == \"R\":\n            s = s+1\n        \n    if s == 0 or t == 0:\n        return \"0\"\n    elif s == 1:\n        return \"1\"\n    elif t == 1:\n        return \"2\"\n    \n    return \"Too many days!\""
    },
    {
        "number": 4247,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    answer = 0\n    for p in range(1, int(stdin.split()[0]) + 1):\n        for i in range(p, int(stdin.split()[0]) + 1, 1):\n            if p - 1 < i < p + 1:\n                answer += 1\n    return str(answer)"
    },
    {
        "number": 4247,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    p = [int(i) for i in stdin.split()]\n    \n    # dp[i] stores the smallest number p_{i-1} that satisfies the condition\n    # dp[i] is the smallest number p_{i} such that p_i is greater than the minimum number p_{i-1}.\n    dp = [0] * (n + 1)\n    dp[1] = p[1]\n    dp[2] = p[1] if p[1] > p[2] else p[2]\n    for i in range(3, n + 1):\n        dp[i] = min(dp[i - 1], dp[i - 2]) + p[i]\n        \n    return str(n - dp.index(dp[n - 1]))"
    },
    {
        "number": 4247,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    permutation = [int(x) for x in stdin.split()]\n    answer = []\n    for i in range(n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                if permutation[i] > permutation[j] and permutation[i] > permutation[k]:\n                    answer.append(permutation[i] + permutation[j] + permutation[k])\n    return str(len(set(answer)))\n\n-----Sample Output-----\n5\n1 3 5 4 2\n\"\"\"\n"
    },
    {
        "number": 4247,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split())\n    lst = sorted([int(s) for s in stdin.split()])\n    if lst[0] > lst[1] and lst[1] > lst[2]:\n        answer = lst[0] + lst[1]\n    elif lst[0] < lst[1] and lst[0] < lst[2]:\n        answer = lst[0] + lst[2]\n    elif lst[0] < lst[1] and lst[0] > lst[2]:\n        answer = lst[0] + lst[1]\n    elif lst[1] < lst[2] and lst[2] < lst[0]:\n        answer = lst[1] + lst[2]\n    else:\n        answer = lst[0] + lst[1] + lst[2]\n    return str(answer)\n\ndef"
    },
    {
        "number": 4247,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def calculate(n, p):\n        count = 0\n        for i in range(n):\n            if p[i] == 1:\n                count += 1\n            else:\n                count -= 1\n            if count < 0:\n                return None\n        return str(count)\n    def back(n, p):\n        result = \"\"\n        for i in range(len(p) - 1, -1, -1):\n            if p[i] == 1:\n                result += \"1\"\n            else:\n                result += \"0\"\n            if i == len(p) - 1:\n                result += \"1\"\n        return result\n    n = int(stdin.strip())\n    p = list(map(int, stdin.strip().split()))\n    # print(n, p)\n    if len(p) <= 3:\n        return back(n, p)\n    if calculate(n, p) == calculate(n, p[:len(p) // 2]):\n        return calculate(n, p[:len(p) // 2])\n    return back(n, p)\n\nprint(solution(\"5\")) # 3\nprint(solution(\"3 2\")) # 4\nprint(solution(\"1 4\")) # 2\nprint(solution(\"5\")) # 3\nprint(solution(\"5\")) # 3\n\n'''\nResult:\n\n5\n1 3 5 4 2\n2\n\n5\n3\n1\n3\n5\n\n0 1 0 0 0\n'''"
    },
    {
        "number": 4247,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, p_1, p_2, p_3, p_4, p_5 = map(int, stdin.split())\n    answer = \"p_1\" if p_1 == p_2 or p_1 == p_3 or p_1 == p_4 else \"p_2\" if p_2 == p_3 or p_2 == p_4 else \"p_3\" if p_3 == p_4 else \"p_4\" if p_4 == p_5 else \"p_5\"\n    return answer"
    },
    {
        "number": 4247,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split())\n    return solution(n, p)\n\"\"\"\nclass Solution:\n    def smallestNumber(self, n: int, p: List[int]) -> int:\n        nums = set(p)\n        seen = set()\n        def dfs(n):\n            if n == n:\n                return len(nums)\n            if n in seen:\n                return 0\n            seen.add(n)\n            cnt = 0\n            for i in range(n):\n                for j in range(i, n):\n                    if j in nums:\n                        cnt += 1\n                        dfs(j)\n                        dfs(i)\n            return cnt\n        return dfs(n)\n        "
    },
    {
        "number": 4247,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def is_permutation(numbers, p):\n        for i in range(len(numbers)):\n            if numbers[i]!= p[i]:\n                return False\n        return True\n\n    n = int(stdin.strip())\n    p = [int(stdin.strip()) for _ in range(n)]\n    if len(set(p)) == 1:\n        return n\n    if not is_permutation(p, p[1:]):\n        return \"0\"\n    if not is_permutation(p, p[:-1]):\n        return \"1\"\n    return \"2\"\n'''\n"
    },
    {
        "number": 4247,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    def get_perm(p: int) -> int:\n        p_set = {p}\n        p_prev = 1\n        p_next = 1\n        \n        for p in p_set:\n            if p_prev == 1:\n                p_prev = 2\n            else:\n                p_prev = 1\n                \n            if p_next == p_prev:\n                p_next = 2\n            else:\n                p_next = 1\n        \n        return p_prev\n        \n    def is_valid(p_set, p: int):\n        for p_i in p_set:\n            if p_i == p_set[0]:\n                return False\n            elif p_i + p_set[-1] == p:\n                return True\n        \n        return False\n        \n    def solution(p_set: set, p: int):\n        if len(p_set) == 1:\n            if is_valid(p_set, p):\n                return p_set.pop()\n            else:\n                return -1\n        \n        p_set.sort()\n        p_prev = 1\n        p_next = 1\n        \n        for p in p_set:\n            if p_prev == 1:\n                p_prev = 2\n            else:\n                p_prev = 1\n                \n            if p_next == p_prev:\n                p_next = 2\n            else:\n                p_next = 1\n        \n        return p_set[0]\n        \n    p_set = set()\n    for _ in range(n):\n        p_set.add(int(stdin.readline()))\n    print(solution(p_set))"
    },
    {
        "number": 4247,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, p_1, p_2, p_3, p_4, p_5 = map(int, stdin.split())\n    if p_1 > p_2 and p_1 > p_3 and p_2 > p_3:\n        return str(1)\n    elif p_1 > p_2 and p_1 > p_3:\n        return str(p_1)\n    elif p_2 > p_1 and p_2 > p_3:\n        return str(p_2)\n    elif p_3 > p_1 and p_3 > p_2:\n        return str(p_3)\n    elif p_4 > p_5:\n        return str(p_4)\n    else:\n        return str(p_5)\n"
    },
    {
        "number": 4248,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split('\\n')[0])\n    x_list = [float(x) for x in stdin.split('\\n')[1].split(',')]\n    y_list = [float(x) for x in stdin.split('\\n')[2].split(',')]\n    answer = []\n    for i in range(N):\n        for j in range(i+1, N):\n            z = x_list[i] - x_list[j]\n            x_list[i] += z * (y_list[i] - y_list[j]) / (z * (z + 1) / 2)\n            y_list[j] += z * (x_list[i] - x_list[j]) / (z * (z + 1) / 2)\n            answer.append(z)\n    return '{:.2f}'.format(sum(answer)/len(answer))\n'''\n"
    },
    {
        "number": 4248,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x = [0 for _ in range(1000)]\n    y = [0 for _ in range(1000)]\n    for i in range(len(stdin)):\n        if i % 2 == 0:\n            x[int(stdin[i])] += 1\n        else:\n            y[int(stdin[i])] += 1\n    answer = ''.join(str(num) for num in sorted(x, reverse=True)) + ''.join(str(num) for num in sorted(y, reverse=True))\n    return answer\n\n\"\"\"\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        stdin = list(map(int, stdin.split(' ')))\n        dx = [0, 0, 0, 0, 0]\n        dy = [0, 0, 0, 0, 0]\n        for i in range(len(stdin)):\n            dx[i], dy[i] = stdin[i] // 2, stdin[i] // 2\n            if dx[i] % 2 == 0:\n                dx[i] -= 1\n            if dy[i] % 2 == 0:\n                dy[i] -= 1\n        answer = 0\n        for i in range(0, 9):\n            x = dx[i]\n            y = dy[i]\n            if y % 2 == 0:\n                y -= 1\n            if x % 2 == 0:\n                x -= 1\n            answer += abs(x) * abs(y)\n        return answer"
    },
    {
        "number": 4248,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(abs(float(stdin.split(' ')[0]) - float(stdin.split(' ')[1])))[-2:]\n"
    },
    {
        "number": 4248,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n == 0:\n        return 'inf'\n    if n % 2!= 0:\n        return 'error'\n\n    answer = ''\n    temp = []\n    for _ in range(n):\n        temp.append(list(map(float, input().split())))\n\n    for i in range(n//2):\n        answer += str(int(temp[i][0]*10**3 + temp[i][1]*10**6)) + ','\n\n    return answer[:-1]\n\n\nsolution(\"1\")\nsolution(\"2\")\nsolution(\"3\")\nsolution(\"4\")\n"
    },
    {
        "number": 4248,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    print(k)\n    print(n)\n    x, y = map(float, stdin.split())\n    print(x, y)\n    if x - k * 0.5 < x < x + k * 0.5:\n        x = x - k * 0.5\n    elif x + k * 0.5 > x:\n        x = x + k * 0.5\n    else:\n        x = x\n    if y - k * 0.5 < y < y + k * 0.5:\n        y = y - k * 0.5\n    elif y + k * 0.5 > y:\n        y = y + k * 0.5\n    else:\n        y = y\n    if x == y and y == x:\n        print(\"0.0\")\n        return \"0.0\"\n    return str(math.fabs(y - x)) + \".\" + str(math.fabs(x - y))\n\n\n-----Solution-----\n\ndef"
    },
    {
        "number": 4248,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        for j in range(i):\n            if (i < n - 1 and j < n - 1):\n                dp[i][j] = max(dp[i + 1][j] + dp[i][j + 1], dp[i + 1][j + 1])\n            if (j < n - 1 and i < n - 1):\n                dp[i][j] = max(dp[i + 1][j] + dp[i][j + 1], dp[i + 1][j + 1])\n    return str(dp[0][0])\n\nInput\n8\n2.14 2.06\n-1.14 2.04\n-2.16 1.46\n-2.14 0.70\n-1.42 0.40\n-0.94 -0.48\n-1.42 -1.28\n-2.16 -1.62\n\nOutput\n5.410\n\nInput\n8\n6.98 2.06\n6.40 1.12\n5.98 0.24\n5.54 -0.60\n7.16 0.30\n7.82 1.24\n8.34 0.24\n8.74 -0.76\n\nOutput\n5.480\n\"\"\"\n\ndef"
    },
    {
        "number": 4248,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    input_data = []\n    for _ in range(n):\n        input_data.append([float(i) for i in input().split()])\n    \n    x = input_data[0]\n    y = input_data[1]\n    \n    ans = 0\n    for i in range(n):\n        if x[i] - y[i] <= 0:\n            continue\n        if x[i] + y[i] >= 1000:\n            continue\n        ans += abs(y[i] - x[i])\n    \n    return str(ans**2)\n\n\"\"\""
    },
    {
        "number": 4248,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    points = [[float(i) for i in line.split(' ')] for line in stdin[1:n+1]]\n    n = len(points)\n    print(n)\n    \n    cnt = 0\n    for i in range(n-1):\n        x1, y1 = points[i]\n        x2, y2 = points[i+1]\n        dis = (x2-x1)**2 + (y2-y1)**2\n        print(dis)\n        if dis < 20:\n            cnt += 1\n    \n    return str(cnt/n*10**-2)\n\"\"\"\n\ndef"
    },
    {
        "number": 4248,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    answer = ''\n    n = int(stdin)\n    for i in range(1, n+1):\n        temp = list(map(float, stdin.split(' ')))\n        temp.sort()\n        for j in range(0, len(temp)-1):\n            if temp[j+1] - temp[j] > 10 ** -2:\n                temp[j+1] = temp[j+1] + 10 ** -2\n        answer +=''.join(str(e) for e in temp) + '\\n'\n    return answer\n\n\nInput\n\n8\n2.14 2.06\n2.14 0.70\n2.14 0.0\n\nOutput\n\n5.410\n\nInput\n\n5\n2.26 1.44\n2.28 0.64\n2.30 -0.30\n1.58 0.66\n3.24 0.66\n\nOutput\n5.620\n\nInput\n\n8\n6.98 2.06\n6.40 1.12\n5.98 0.24\n5.54 -0.60\n7.16 0.30\n7.82 1.24\n8.34 0.24\n8.74 -0.76\n\nOutput\n5.480\n\nInput\n\n8\n16.94 2.42\n15.72 2.38\n14.82 1.58\n14.88 0.50\n15.76 -0.16\n16.86 -0.20\n17.00 0.88\n16.40 0.92\n\nOutput\n6.040\n\nInput\n\n7\n20.62 3.00\n21.06 2.28\n21.56 1.36\n21.66 0.56\n21.64 -0.52\n22.14 2.32\n22.62 3.04\n\nOutput\n6.720\n"
    },
    {
        "number": 4248,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip().split()[0])\n    x = [float(i) for i in stdin.strip().split()[1:n+1]]\n    y = [float(i) for i in stdin.strip().split()[n+1:]]\n    print(abs(x[0]-x[1])**2 + abs(y[0]-y[1])**2)\n"
    },
    {
        "number": 4249,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    answer = 0\n    days = 0\n    while n > 0 and m > 0:\n        # if no cups are present, you can't write any coursework\n        if n == 0 and m == 0:\n            answer = days\n            break\n        if n > 0:\n            # if no cup is present, you can't write any coursework\n            if n == 0:\n                answer = days\n                break\n            # if cups is present, you can't write any coursework\n            if m == 0:\n                days = days + n - 1\n                break\n            # cups are present, you can write a coursework\n            if a[n - 1] > a[n - 2] and a[n - 1] > a[n - 3] and a[n - 1] > a[n - 4]:\n                days = days + n - 2\n            elif a[n - 1] > a[n - 3] and a[n - 1] > a[n - 4] and a[n - 1] > a[n - 5]:\n                days = days + n - 3\n            else:\n                days = days + n - 4\n        m = m - 1\n        n = n - 1\n    if days == 0:\n        answer = -1\n    return str(days)\n\n'''\ndef"
    },
    {
        "number": 4249,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    return str(min(0, a[m - 1] - 1))\n"
    },
    {
        "number": 4249,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    a = [list(map(int, input().split())) for _ in range(n)]\n    #print(a)\n    #print(max(a[0]))\n    #print(max(a[1]))\n    #print(max(a[2]))\n    #print(max(a[3]))\n    #print(max(a[4]))\n    #print(max(a[5]))\n    #print(max(a[6]))\n    #print(max(a[7]))\n    #print(max(a[8]))\n    #print(max(a[9]))\n    #print(max(a[10]))\n    #print(max(a[11]))\n    #print(max(a[12]))\n    #print(max(a[13]))\n    #print(max(a[14]))\n    #print(max(a[15]))\n    #print(max(a[16]))\n    #print(max(a[17]))\n    #print(max(a[18]))\n    #print(max(a[19]))\n    #print(max(a[20]))\n    #print(max(a[21]))\n    #print(max(a[22]))\n    #print(max(a[23]))\n    #print(max(a[24]))\n    #print(max(a[25]))\n    #print(max(a[26]))\n    #print(max(a[27]))\n    #print(max(a[28]))\n    #print(max(a[29]))\n    #print(max(a[30]))\n    #print(max(a[31]))\n    #print(max(a[32]))\n    #print(max(a[33]))\n    #print(max(a[34]))\n    #print(max(a[35]))\n    #print(max(a[36]))\n    #print(max(a[37]))\n    #print(max(a[38]))\n    #print(max(a[39]))\n    #print(max(a[40]))\n    #print(max(a[41]))\n    #print(max(a[42]))\n    #print(max(a[43]))\n    #print(max(a[44]))\n    #print(max(a[45]))\n    #print(max(a[46]))\n    #print(max(a[47]))\n    #print(max(a[48]))\n    #print(max(a[49]))\n    #print(max(a[50]))\n    #print(max(a[51]))\n    #print(max(a[52]))\n    #print(max(a[53]))\n    #print(max(a[54]))\n    #print(max(a[55]))\n    #print(max(a[56]))\n    #print(max(a[57]))\n    #print(max(a[58]))\n    #print(max(a[59]))\n    #print(max(a[60]))\n    #print(max(a[61]))\n    #print(max(a[62]))\n    #print(max(a[63]))\n    #print(max(a[64]))\n    #print(max(a[65]))\n    #print(max(a[66]))\n    #print(max(a[67]))\n    #print(max(a[68]))\n    #print(max(a[69]))\n    #print(max(a[70]))\n    #print(max(a[71]))\n    #print(max(a[72]))\n    #print(max(a[73]))\n    #print(max(a[74]))\n    #print(max(a[75]))\n    #print(max(a[76]))\n    #print(max(a[77]))\n    #print(max(a[78]))\n    #print(max(a[79]))\n    #print(max(a[80]))\n    "
    },
    {
        "number": 4249,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    print(n, m, a)\n    answer = 0\n    a.sort()\n    for i in range(n):\n        answer += a[i]\n        if i >= 1 and a[i]!= a[i - 1]:\n            answer += a[i] + a[i - 1]\n    return str(answer)\n\nprint(solution(\"5 10\"))\nprint(solution(\"7 15\"))\nprint(solution(\"5 16\"))\nprint(solution(\"5 26\"))\nprint(solution(\"5 26\"))\n"
    },
    {
        "number": 4249,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[-1])\n    a = list(map(int, stdin.split()[:-1]))\n    a.sort()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a.pop()\n    a."
    },
    {
        "number": 4249,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip().split()\n    n = int(stdin[0])\n    m = int(stdin[1])\n    cup = []\n    for i in range(m):\n        cup.append(int(stdin[i+2]))\n    answer = 0\n    days = 0\n    for i in range(n):\n        cup.append(int(stdin[i+2]))\n    for j in range(n):\n        for k in range(j + 1):\n            days += cup[j] - cup[k]\n    if days > 0:\n        answer = days\n    return str(answer)\n"
    },
    {
        "number": 4249,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    k = list(map(int, stdin.split()))\n    days = [int(s) for s in range(1, n + 1) if n % s == 0]\n    for i in range(m):\n        if i == 0:\n            days[i] += k[0]\n        else:\n            days[i] += max(days[i - 1], k[i] + days[i - 2])\n    days.sort()\n    return str(days[n - 1])\n\nInput\n5 15\n5 5 5 5 5\n\nOutput\n2\n\nInput\n5 16\n5 5 5 5 5\n\nOutput\n2\n\nInput\n5 26\n5 5 5 5 5\n\nOutput\n1\n\n\n\n-----Note-----\n\nPolycarp should be able to write all coursework, so for this problem you should use a solution class.\n\n\"\"\"\nimport sys\n\ndef"
    },
    {
        "number": 4249,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    return str(min(map(min, a)))\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4249,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Generate the cups of coffee during the first day\n    n, m, a = map(int, stdin.split())\n    days = [0] + list(range(n + 1))\n\n    # Generate the cup of coffee for the first day\n    for _ in range(n):\n        days[0] -= a\n        days[days[0]] += a\n        days[days[0] + 1] -= a\n        days[days[days[0] + 1]] += a\n\n    # Generate the cups of coffee for the first day\n    for _ in range(m):\n        days[0] -= a\n        days[days[0]] += a\n        days[days[days[0] + 1] + 1] -= a\n        days[days[days[days[0] + 1] + 1]] += a\n\n    # Generate the cups of coffee for the first day\n    for _ in range(n - m):\n        days[0] -= a\n        days[days[0]] += a\n        days[days[days[0] + 1] + 1] -= a\n        days[days[days[days[0] + 1] + 1]] += a\n\n    # Generate the cups of coffee for the first day\n    for _ in range(m - n):\n        days[0] -= a\n        days[days[0]] += a\n        days[days[days[0] + 1] + 1] -= a\n        days[days[days[days[0] + 1] + 1]] += a\n\n    # Generate the cups of coffee for the first day\n    for _ in range(n - m):\n        days[0] -= a\n        days[days[0]] += a\n        days[days[days[0] + 1] + 1] -= a\n        days[days[days[days[0] + 1] + 1]] += a\n\n    # Generate the cups of coffee for the first day\n    for _ in range(n - m):\n        days[0] -= a\n        days[days[0]] += a\n        days[days[days[0] + 1] + 1] -= a\n        days[days[days[days[0] + 1] + 1]] += a\n\n    # Generate the cups of coffee for the first day\n    for _ in range(n - m):\n        days[0] -= a\n        days[days[0]] += a\n        days[days[days[0] + 1] + 1] -= a\n        days[days[days[days[0] + 1] + 1]] += a\n\n    # Generate the cups of coffee for the first day\n    for _ in range(n - m):\n        days[0] -= a\n        days[days[0]] += a\n        days[days[days[0] + 1] + 1] -= a\n        days[days[days[days[0] + 1] + 1]] += a\n\n    # Generate the cups of coffee for the first day\n    for _ in range(n - m):\n        days[0] -= a\n        days[days[0]] += a\n        days[days[days[0] + 1] + 1] -= a\n        days[days[days[days[0] + 1] + 1]] += a\n\n    # Generate the cups of coffee for the first day\n    for _ in range(m - n):\n        days[0] -= a\n        days[days[0]] += a\n        days[days[days[0] + 1] + 1] -= a\n        days[days[days[days[0] + 1] + 1]] += a\n\n    # Generate the cups of coffee for the first day\n    for _ in range(m - n):\n        days[0] -= a\n        days[days[0]] += a\n        days[days[days[0] + 1] + 1] -= a\n        days[days[days[days[0] + 1] + 1]] += a\n\n    # Generate the cups of coffee for the first day\n    for _ in range(n - m):\n        days[0] -= a\n        days[days[0]] += a\n        days[days[days[0] + 1] + 1] -= a\n        days[days[days[days[0] + 1] + 1]] += a\n\n    # Generate the cups of coffee for the first day\n    for _ in range(m - n):\n        days[0] -="
    },
    {
        "number": 4249,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # take input\n    n, m = map(int, stdin.split())\n    \n    # check if valid\n    if not (n > 0 and m > 0):\n        return \"-1\"\n    \n    # start counting\n    c = 0\n    day = 0\n    \n    # parse input\n    for i in range(m):\n        \n        # check for e, f, g, h, i, j\n        e, f, g, h, i, j = map(int, stdin.split())\n        \n        # if e, f and g, h is a number\n        if e or f or g or h:\n            \n            # is it a number or not\n            if not (e and f and g and h):\n                \n                # is it a number or not\n                if e or f or g or h:\n                    \n                    # is it a number or not\n                    if not (e and f and g and h):\n                        \n                        # count for the day\n                        day += 1\n                        \n                        # if it is last day of the coursework\n                        if i == m-1 and (f == 0 or g == 0):\n                            \n                            # if it is last day of the coursework\n                            if day >= n-1 and (f!= 0 or g!= 0):\n                                # if there is coffee in the i-th cup\n                                if i == m-1:\n                                    c += (2 + (3 - 1)) + (2 - 1) + (2 - 2) + (2 - 3) + (2 - 4)\n                                else:\n                                    c += (2 + (3 - 1)) + (2 - 1) + (2 - 2) + (2 - 3) + (2 - 4)\n                            # if there is no coffee in the i-th cup\n                            else:\n                                c += (2 + (3 - 1)) + (2 - 1) + (2 - 2) + (2 - 3) + (2 - 4)\n                                \n                            # is it a number\n                            if e or f or g:\n                                # is it a number\n                                if e:\n                                    c += 1\n                                \n                                # is it a number\n                                if f:\n                                    c += 2\n                                \n                                # is it a number\n                                if g:\n                                    c += 3\n                                \n                                # is it a number\n                                if h:\n                                    c += 4\n                \n            # is it a number\n            else:\n                \n                # count for the day\n                day += 1\n                \n                # is it a number or not\n                if not (e and f and g and h):\n                    \n                    # if it is last day of the coursework\n                    if day >= n-1 and (e!= 0 or f!= 0):\n                        # if there is coffee in the i-th cup\n                        if i == m-1:\n                            c += (4 + (5 - 1)) + (4 - 1) + (4 - 2) + (4 - 3) + (4 - 4)\n                        else:\n                            c += (4 + (5 - 1)) + (4 - 1) + (4 - 2) + (4 - 3) + (4 - 4)\n                    # if there is no coffee in the i-th cup\n                    else:\n                        c += (4 + (5 - 1)) + (4 - 1) + (4 - 2) + (4 - 3) + (4 - 4)\n        \n        # if it is not a number\n        else:\n            \n            # if it is last day of the coursework\n            if day >= n-1 and (i == m-1):\n                c += (2 + (3 - 1)) + (2 - 1) + (2 - 2) + (2 - 3) + (2 - 4)\n            else:\n                c += (2 + (3 - 1)) + (2 - 1) + (2 - 2) + (2 - 3) + (2 - 4)\n        \n    # return answer\n    return str(c)\n\"\"\""
    },
    {
        "number": 4250,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    s = list(map(int, stdin.split()))\n    t = sorted(list(set(map(str, s))))\n    return ','.join(list(map(str, t)))\n"
    },
    {
        "number": 4250,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n  n, k = map(int, stdin.split())\n  s = list(map(int, stdin.split()))\n  t = list(map(int, stdin.split()))\n  # s = [1, 2, 3, 2, 4, 3, 1]\n  # t = [1, 2, 3]\n\n  s.sort()\n  t.sort()\n  \n  # find maximum possible number of copies\n  for i in range(len(s)):\n    if s[i]!= t[i]:\n      break\n\n    if i == len(s)-1:\n      return t[-1]\n\n    if s[i]!= t[i]:\n      continue\n\n    i += 1\n    j = i\n    while j < len(t):\n      # check if s[j] can be cut out\n      if s[i]!= t[j]:\n        break\n\n      # remove one element from s[j]\n      s[j] = s[j] - 1\n      j += 1\n\n  return \"\".join(map(str, t[::-1]))\n"
    },
    {
        "number": 4250,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4250,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    k,n,*t=map(int,stdin.split())\n    t.sort()\n    if t:\n        for i in t:\n            k=k*i\n        return k\n    else:\n        return '1'\n        \n------------------------------------------------------------------------------------------------------------------------------------\n\ndef"
    },
    {
        "number": 4250,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split()]\n    t = [int(i) for i in stdin.split()]\n    s = [i for i in range(1, n + 1)]\n    for i in range(k):\n        s[t[i]] += 1\n    ans = ''.join([''.join(map(str, i)) for i in s])\n    return ans\n\nsolution(stdin)\n"
    },
    {
        "number": 4250,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int,stdin.split()))\n    if n > 2:\n        t = [0]*(n-1)\n        s = set()\n        for i in range(n-1):\n            t[i] = arr[i]\n            s.add(arr[i])\n        for i in range(n-2):\n            if arr[i] not in s:\n                t[i+1] = arr[i]\n                for j in range(i+2, n):\n                    t[j] = arr[j]\n            else:\n                t[i+1] = 0\n    \n        return \" \".join([str(i) for i in t[:n-1]])\n\n    return \" \".join([str(i) for i in arr[:n-1]])\n\ndef"
    },
    {
        "number": 4250,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = list(map(int, stdin.split()))\n    t = []\n    for i in range(n):\n        t.append(s[i:i + k])\n    return \" \".join(str(i + 1) for i in t)\n\"\"\"\n\ndef"
    },
    {
        "number": 4250,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = map(int, stdin.split())\n    def find(n):\n        if n == 1:\n            return []\n        if n == 2:\n            return [s[0], s[1]]\n        return [s[0], s[1], s[2]] + find(n-2)\n    return ''.join(find(k))"
    },
    {
        "number": 4250,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = list(map(int, stdin.split()))\n    t = [int(i) for i in s]\n\n    def can_cut_t(arr, k):\n        if len(arr) == 0:\n            return False\n        if len(arr) == 1:\n            return arr[0] == k\n\n        if k > 1:\n            if can_cut_t(arr[1:], k):\n                return True\n        else:\n            if arr[0] == k:\n                return True\n\n        return False\n\n    for i in range(n):\n        if can_cut_t(t, k):\n            return t[i]\n    return \"Impossible\"\n\ndef"
    },
    {
        "number": 4250,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    s = list(map(int, stdin.strip().split()))\n    t = s\n    for k in range(1, n):\n        tmp = s.copy()\n        tmp.sort()\n        if sum(tmp) > k:\n            continue\n        tmp = tmp[1:]\n        for i in range(len(tmp)):\n            if tmp[i] + k > k:\n                break\n            else:\n                tmp[i] += k\n    answer = ''\n    for i in range(n):\n        answer += str(t[i])\n    return answer\n-----Constraints-----\n1 <= n <= 10^4\n1 <= k <= n\n\nTime Limit: 10^9\nSpace Limit: 10^5\n\n----Medium-Data-Structure---\n1. O(n^2)\n2. O(n)\n3. O(n)\n4. O(n)\n5. O(n)\n\n----Dynamic-Programing---\n1. O(n)\n2. O(1)\n3. O(n)\n4. O(n)\n5. O(n)\n\n----Algorithm---\n1. O(n^2)\n2. O(n)\n3. O(n)\n4. O(n)\n5. O(n)\n\n----Time---\nRuntime: 0\nMemory Usage: 0.0019\n-----ok-----\n"
    },
    {
        "number": 4251,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = []\n    for _ in range(n):\n        a.append(list(map(int, stdin.split())))\n    return str(k_adj_matrix(a))\n\n\ndef"
    },
    {
        "number": 4251,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [[int(j) for j in i.split()] for i in stdin.split()]\n    k = 0\n    for i in range(m):\n        k = max(k, max([a[i][j] for j in range(n) if j!= i]))\n    return str(k)\n\n\ndef"
    },
    {
        "number": 4251,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    m = int(stdin[-1])\n    k = int(stdin[0])\n    a = []\n    for i in range(n):\n        a.append(list(map(int, stdin[i].split())))\n    for i in range(m):\n        for j in range(i+1, m):\n            if a[i][j] < a[j][i]:\n                k -= 1\n                if k == 0:\n                    return \"0\"\n    return str(k)\n\ndef"
    },
    {
        "number": 4251,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [[int(i) for i in stdin.split()] for _ in range(n)]\n    # a = [[int(i) for i in stdin.split()] for _ in range(n)]\n    # a = [[int(i) for i in stdin.split()] for _ in range(n)]\n    # a = [[[int(i) for i in stdin.split()] for _ in range(n)] for _ in range(m)]\n    # a = [[[int(i) for i in stdin.split()] for _ in range(n)] for _ in range(m)]\n    s = [int(i) for i in stdin.split()]\n    s_1, s_2 = [], []\n    for i in range(1, len(s)):\n        s_1.append(s[i - 1] - s[i])\n        s_2.append(s[i] - s[i - 1])\n    for i in range(len(s)):\n        if s[i] < s[i - 1]:\n            s_1.append(s[i] - s[i - 1])\n        else:\n            s_1.append(s[i - 1] - s[i])\n    for i in range(len(s)):\n        if s[i] > s[i - 1]:\n            s_2.append(s[i] - s[i - 1])\n        else:\n            s_2.append(s[i - 1] - s[i])\n    s_3 = []\n    for i in range(len(s)):\n        s_3.append(s[i] - s[i - 1])\n    s_4 = []\n    for i in range(len(s)):\n        s_4.append(s[i] - s[i - 1])\n    k = 0\n    for i in range(n):\n        for j in range(m):\n            if s_1[i] < s_2[j] and s_1[i] < s_3[j]:\n                k += 1\n            elif s_2[j] < s_1[i] and s_2[j] < s_3[i]:\n                k += 1\n    return str(k)\n\"\"\"\n\nclass Solution:\n    def solve(self, n, m, s):\n        if n < 2 or m < 2:\n            return 0\n        a = [[int(i) for i in stdin.split()] for _ in range(n)]\n        # a = [[int(i) for i in stdin.split()] for _ in range(n)]\n        # a = [[int(i) for i in stdin.split()] for _ in range(n)]\n        s_1 = []\n        s_2 = []\n        for i in range(m):\n            s_1.append(s[i] - s[i - 1])\n        for i in range(n - m):\n            s_2.append(s[i + m] - s[i])\n        s_3 = []\n        for i in range(m):\n            s_3.append(s[i + m] - s[i])\n        s_4 = []\n        for i in range(n - m):\n            s_4.append(s[i + m] - s[i])\n        s_5 = []\n        for i in range(m):\n            s_5.append(s[i + m] - s[i])\n        k = 0\n        for i in range(n):\n            for j in range(m):\n                if s_1[i] < s_2[j] and s_1[i] < s_3[j]:\n                    k += 1\n                elif s_2[j] < s_1[i] and s_2[j] < s_3[i]:\n                    k += 1\n        return str(k)"
    },
    {
        "number": 4251,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n,m=map(int,stdin.split())\n    matrix=[]\n    for i in range(0,n):\n        matrix.append(list(map(int,stdin.split())))\n    for k in range(0,n):\n        for i in range(0,m):\n            for j in range(i+1,m):\n                if matrix[k][j]<matrix[k][i]:\n                    matrix[k][j],matrix[k][i]=matrix[k][i],matrix[k][j]\n    for i in range(0,m):\n        for j in range(0,n):\n            if matrix[j][i]==0:\n                matrix[j][i]=-1\n            else:\n                matrix[j][i]+=1\n    for i in range(0,n):\n        for j in range(0,m):\n            if matrix[i][j]==0:\n                matrix[i][j]=-1\n            else:\n                matrix[i][j]+=1\n    return str(max(matrix[0][0],matrix[0][-1]))\n\n\nInput\n4 2\n9 9\n10 8\n5 3\n4 3\n\nOutput\n5\n\nInput\n6 1\n3\n6\n2\n5\n1\n4\n\nOutput\n3\n\n\n-----Optional-----\n\nIn the next example, the sequence $s$ will be $[5, 10, 4, 9, 3, 8, 3, 9]$. Each pair of neighbouring elements have at least $k = 5$ difference between them.\n\nIn the second example, the maximum $k = 0$, any order is $0$-acceptable.\n\nIn the third example the given order is already $3$-acceptable, you can leave it as it is.\ndef"
    },
    {
        "number": 4251,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = []\n    for i in range(n):\n        a.append(list(map(int, stdin.split())))\n    k = 0\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] < a[i][j + 1]:\n                k = max(k, a[i][j + 1] - a[i][j])\n    return str(k)\n\nprint(solution(\"4 2\"))"
    },
    {
        "number": 4251,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [list(map(int, input().split())) for _ in range(n)]\n    s = sum(a[0])\n    if s == 0:\n        return '0'\n    if s == m:\n        return '3'\n    k = 0\n    for i in range(n):\n        s = s - a[i][0]\n        if s == 0:\n            return '0'\n        if s == m:\n            return '3'\n        k = max(k, s)\n    return '3'\n"
    },
    {
        "number": 4251,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def get_sequence(s):\n        s = s.strip().split()\n        return [int(num) for num in s if num.isdigit()]\n    \n    def get_k(i, j, sequence):\n        k = 0\n        for i, j_i in enumerate(sequence):\n            if i == j:\n                continue\n            k += abs(j_i - sequence[i + j])\n        return k\n    \n    n = int(stdin.strip())\n    m = int(stdin.strip())\n    sequence = get_sequence(stdin)\n    answer = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            k = get_k(i, j, sequence)\n            if k > answer:\n                answer = k\n    return str(answer)\n\nExplanation\n\nInput\n3\n1 2 3\n1 3\n1 4\n1 2 4\nOutput\n0\n\nInput\n5\n3 1 2 5 3 3\n2 1 2 4 5\n2 4 3 2\n3 1 2 4 5\n1 3 2 4 5\n\nOutput\n1\n\nInput\n3\n2 3 4\n3 1 3\n2 1 2\n3 2 4\n3 3 5\n3 4 3\n3 1 4\n\nOutput\n3\n\nInput\n4\n9 5 8 4 2 7 3\n3 6 2 5 8 8\n8 7 5\n8 1 7\n8 7 3\n\nOutput\n7\n\nInput\n2 4\n1 3\n2 5\n1 3\n\nOutput\n3\n\nInput\n3\n1 4 3 1 4\n4 1 3 3\n3 4 1\n\nOutput\n3\n\nInput\n6 2\n1 2 3 4\n1 4\n1 2 3 4\n3 2\n3 2\n\nOutput\n7\n\nInput\n2 5\n3 3 1\n3 3 4\n1 2 3\n2 1 2\n3 2 4\n\nOutput\n0\n\nInput\n1 2\n3 2 4\n4 1 3\n\nOutput\n0\n\nInput\n1 2\n1 3 4\n2 1 2\n3 2 4\n\nOutput\n0\n\nInput\n2\n1 2 3 4\n2 1 2\n1 2 3\n2 1 2\n3 2 4\n\nOutput\n3\n\nInput\n4\n1 4 1 3 4\n2 4 5\n3 3 4\n3 4 1\n3 2 4\n4 1 3\n\nOutput\n4\n\nInput\n5\n2 3 4 3 5\n3 1 2 3 4\n4 1 3 3 4\n3 2 4 2\n2 4 3 4\n3 4 3 4\n4 3 2\n3 1 2\n3 2 4\n\nOutput\n5\n\n'''"
    },
    {
        "number": 4251,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    rows, columns = [int(i) for i in stdin.split()]\n    a = []\n    for _ in range(rows):\n        a.append([int(j) for j in stdin.split()])\n    k = 0\n    for row in range(rows):\n        for col in range(row+1, rows):\n            if a[row][col] - a[row][col - 1] >= k:\n                break\n        else:\n            k = a[row][col]\n    return str(k)"
    },
    {
        "number": 4251,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    row, col, order = [int(i) for i in stdin.split()]\n    return str(solution_(row, col, order))\n    \n\ndef"
    },
    {
        "number": 4252,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    inp = stdin.strip().split()\n    \n    if len(inp)!= 2:\n        return 0\n    \n    num = int(inp[0])\n    str = inp[1]\n    result = ''\n    \n    for i in str:\n        if i.isupper():\n            result = result + i\n        else:\n            result = result + 'a'\n    \n    if not result:\n        return 0\n    \n    result = result[1:]\n    result = result.replace('a', '0')\n    \n    return len(result)\n\n\"\"\"\ndef"
    },
    {
        "number": 4252,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    cnt = 0\n    for c in stdin:\n        if c not in 'xX' : cnt += 1\n    return str(cnt)\n"
    },
    {
        "number": 4252,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    def replace(stdin, old, new):\n        l = len(old)\n        for i in range(l):\n            if old[i] == 'x':\n                stdin = stdin.replace(old[:i]+new+old[i+1:], new+old[i])\n        return stdin\n    \n    def count(stdin, start, end):\n        l = len(stdin)\n        count = 0\n        for i in range(start, end):\n            if stdin[i] in \"xX\":\n                count += 1\n        return count\n    \n    def judge(stdin):\n        result = 0\n        n = len(stdin)\n        for i in range(n):\n            for j in range(n-i-1):\n                if stdin[j] == 'x' or stdin[j] == 'X':\n                    if count(stdin, j, j+1) == 3:\n                        result = max(result, count(stdin, j, j+1)-2)\n        return result\n    \n    def solution(stdin):\n        return replace(stdin, \"x\", \"\")\n    \n    return solution(stdin)"
    },
    {
        "number": 4252,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    ans = 0\n    stdin = stdin[1:-1]\n    for x in stdin:\n        if x.isalpha():\n            ans += len(x) - x.count(\"x\")\n    return ans\n\nsolution(\"aa\" + \"x\")\n"
    },
    {
        "number": 4252,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    file_name = stdin.split(' ')\n    file_name = file_name[::-1]\n    \n    for i in range(len(file_name)):\n        if file_name[i] not in 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZx':\n            file_name[i] = 'x'\n    \n    file_name = ''.join(file_name)\n    \n    for char in file_name:\n        if char not in 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZx':\n            file_name = file_name.replace(char,'')\n    \n    \n    return int(file_name)\n\n\ndef"
    },
    {
        "number": 4252,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    file_name = stdin.split()[1]\n    print(file_name[::2])\n    if file_name[::2] == \"x\":\n        return 0\n    else:\n        return len(file_name[::2])\n"
    },
    {
        "number": 4252,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    from collections import Counter\n    from collections import deque\n    stdin = stdin.strip()\n    stdin = deque(stdin)\n    min_chars = Counter(stdin)\n    for char, n in min_chars.items():\n        if n % 2 == 0:\n            for c in range(n//2):\n                stdin.popleft()\n        else:\n            for c in range(n//2):\n                stdin.popleft()\n    if len(stdin) > 0:\n        print(0)\n    else:\n        print(len(stdin))\n    return \"\".join(stdin)\n"
    },
    {
        "number": 4252,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    name = stdin.split(\"x\")\n    check = 0\n    for i in range(0, len(name)):\n        if name[i].isdecimal():\n            check = check + int(name[i])\n    if check == 0:\n        print(0)\n    else:\n        print(min(check))\n"
    },
    {
        "number": 4252,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, file = stdin.split(\" \")\n    file = file[:int(n)]\n    \n    file = file.strip()\n    file = file.lower()\n    \n    count = 1\n    \n    for i in file:\n        \n        if file.find(i) == 0:\n            count += 1\n        \n    return count\n\n\nPrint 0 if the file name does not initially contain a forbidden substring \"xxx\"."
    },
    {
        "number": 4252,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    num, name = stdin.split(' ')\n    num = int(num)\n    while True:\n        if 'x' in name:\n            i = name.index('x')\n            name = name[:i] + name[i+1:]\n            name = name.replace('x', '')\n            if name == name[:num]:\n                return num\n            else:\n                num = 0\n        else:\n            num -= 1\n            if num == 0:\n                return '0'\n\n\ndef"
    },
    {
        "number": 4253,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n <= 0:\n        return \"impossible\"\n    if n == 1:\n        return str(n ** 2)\n    return str(n * solution(n - 1) + solution(n - 2))\n\ndef"
    },
    {
        "number": 4253,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lst = list(map(int, stdin.split()))\n    return str(3 * int(lst[0] ** 2) * (lst[1] ** 2))\n\n-----Sample Output-----\nSample Input:\n6\n4\nSample Output:\n48\n"
    },
    {
        "number": 4253,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    print(4 * int(math.sqrt(3) * 3 ** 2))\n    return 'impossible'\n"
    },
    {
        "number": 4253,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    p, q = map(int, stdin.split())\n    if (p==q): return (p*(p-1))/2\n    if (q%2==0): return q**2\n    return ((p-1)*(q-1)/2) + (q-1)*(p-1)\n\ndef"
    },
    {
        "number": 4253,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n  n = int(stdin)\n  return str(3**n*4**(n-1))\n\n-----Example 1 -----\n\ninput:\n3\n\noutput:\n48\n\nExplanation:\n3 x 4^2 = 48, so the area is 3^2 * 4^2 = 48.\n\nExample 2:\n\ninput:\n2\n\noutput:\n2\n\nExplanation:\n2 x 2 = 2, so the area is 2^2 * 2 = 4.\n\nExample 3:\n\ninput:\n2\n\noutput:\n2\n\nExplanation:\n2 x 2 = 2, so the area is 2^2 * 2 = 4.\n\nConstraints:\n - 1 \\leq r \\leq 100\n - r is an integer.\n\n-----Constraints-----\n - 1 \\leq r \\leq 100\n\n----\"\"\"\n\n\ndef"
    },
    {
        "number": 4253,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin) < 3:\n        return \"\"\n    \n    if'' not in stdin:\n        return int(stdin)\n    \n    data = []\n    temp = stdin.split(' ')\n    \n    for x in range(len(temp)):\n        x = temp[x]\n        if x!= '':\n            data.append(int(x))\n    \n    data.sort()\n    \n    for x in range(len(data)):\n        if data[x] % 2 == 0:\n            data[x] = data[x] // 2\n        else:\n            data[x] = data[x] * 3\n            \n    return str(sum(data))\n\ndef"
    },
    {
        "number": 4253,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n  _r = int(stdin)\n  _n = 3\n  _return = 0\n  while _r > 0:\n    _return = _n * (_r ** 2)\n    _n = _n + 1\n    _r = _r - 1\n  return str(int(_return))\n\n'''\n\n\nimport math\n\ndef"
    },
    {
        "number": 4253,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    if not stdin:\n        return \"\"\n    \n    r, *_ = map(int, stdin.split())\n    if not (r % 2):\n        return \"0\"\n    \n    a = 2**r\n    b = (a+1)**2\n    \n    c = (b-a)//(a+1)\n    \n    return str(c*a)\n\"\"\"\ndef"
    },
    {
        "number": 4253,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def getArea():\n        r, answer = [int(x) for x in stdin.split()]\n        if r % 2 == 0:\n            answer = r ** 2 * (4 + 2)\n            if answer > 100000000:\n                return \"IMPOSSIBLE\"\n            else:\n                return answer\n        else:\n            answer = (r ** 2 + 4) * (2 + 2)\n            if answer > 100000000:\n                return \"IMPOSSIBLE\"\n            else:\n                return answer\n\n    for r in range(1, 100):\n        print(getArea())\n    return \"IMPOSSIBLE\"\n\n\"\"\"\ndef"
    },
    {
        "number": 4253,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin.strip())\n    if r<0 or r>1000:\n        return \"Error\"\n    else:\n        a = 3**r\n        return f\"{a}^2\"\n    \n\ndef"
    },
    {
        "number": 4254,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n <= 0:\n        return \"unsafe\"\n    w = 0\n    s = 0\n    for i in range(n):\n        a, b = map(int, input().split())\n        if a >= 1 and b >= 1:\n            w += 1\n        else:\n            s += 1\n    if w == 0 and s == 0:\n        return \"safe\"\n    elif s == 0 or w == 0:\n        return \"unsafe\"\n    else:\n        return \"safe\"\n"
    },
    {
        "number": 4254,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s, w = [int(x) for x in stdin.split()]\n    if s > w:\n        return \"safe\"\n    elif w <= s:\n        return \"unsafe\"\n    elif s == w:\n        return \"safe\"\n    else:\n        return \"unsafe\"\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4254,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    N, S, W = map(int, stdin.split())\n    \n    if N == S + W:\n        return'safe'\n    \n    elif N < S + W:\n        return 'unsafe'\n    \n    else:\n        return 'unsafe'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4254,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    cnt = 0\n    for i in range(n):\n        if arr[i] == 1:\n            cnt += 1\n    if cnt > m:\n        return 'unsafe'\n    if cnt < m:\n        return'safe'\n    for i in range(n):\n        if arr[i] == 0:\n            arr[i] = 1\n        else:\n            arr[i] = 0\n    for i in range(n):\n        if arr[i] == 1:\n            if arr[(i+1)%n] == 1:\n                arr[(i+1)%n] = 0\n            else:\n                arr[(i+1)%n] = 1\n        else:\n            if arr[i] == 0:\n                arr[i] = 1\n            else:\n                arr[i] = 0\n    return'safe' if sum(arr) == 0 else 'unsafe'\n\n-----Sample Input-----\n4 5\n\n-----Sample Output-----\nunsafe\n\nThere are four sheep and five wolves. The number of wolves is not less than that of sheep, so they will attack them.\ndef"
    },
    {
        "number": 4254,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    S, W = map(int, stdin.split())\n    if S < W:\n        print(\"unsafe\")\n    elif S < W:\n        print(\"safe\")\n    else:\n        print(\"unsafe\")\n\"\"\""
    },
    {
        "number": 4254,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    S = int(stdin.split()[1])\n    W = int(stdin.split()[2])\n    if S > W:\n        return 'unsafe'\n    elif S > W:\n        return'safe'\n    else:\n        return 'unsafe'"
    },
    {
        "number": 4254,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    sheeps = int(stdin.split()[0])\n    wolves = int(stdin.split()[1])\n\n    if wolves <= sheeps:\n        print('safe')\n    else:\n        print('unsafe')"
    },
    {
        "number": 4254,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s=0\n    for _ in range(int(stdin)):\n        S,W=map(int,input().split())\n        if W>=S:\n            print(\"safe\")\n            return \"\"\n        else:\n            s+=W-S\n    print(\"unsafe\")\n    return \"\"\n"
    },
    {
        "number": 4254,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    S, W = map(int, stdin.split())\n    if S < W:\n        print(\"safe\")\n    else:\n        print(\"unsafe\")\n\n-----Sample Input-----\n1 4\n1 3\n2\n3\n4\n5\n6\n\n-----Sample Output-----\nsafe\n\nThere are four sheep and five wolves. The number of wolves is not less than that of sheep, so they will attack them.\n"
    },
    {
        "number": 4254,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    S = int(stdin[0])\n    W = int(stdin[1])\n    if S > W:\n        return'safe'\n    elif S == W:\n        return 'unsafe'\n    else:\n        return'safe'\n"
    },
    {
        "number": 4255,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    return str(abs(b**2 - 4*a*c) % 1_000_000_007)\n\nfor input in [3, 4, 5]:\n    print(solution(stdin))\n'''\nimport math\nfrom typing import List\n\n\nclass Solution:\n    def triangleArea(self, nums: List[int]) -> int:\n        # Runtime: 98.6ms, faster than 53.76% of Python3 online submissions for Triangle Area.\n        # Memory Usage: 14.2MB, less than 66.76% of Python3 online submissions for Triangle Area.\n\n        for i in range(len(nums) - 2):\n            for j in range(i + 1, len(nums) - 1):\n                if i!= j:\n                    a, b, c = nums[i], nums[j], nums[i]\n                    for x in range(i + 1, len(nums) - 1):\n                        a, b, c = nums[x], nums[x + 1], nums[x]\n                        if a == b == c:\n                            return math.pow(a, 2) * b * c\n        return -1\n\n    def solution(self, nums: List[int]) -> int:\n        # Runtime: 72ms, faster than 77.65% of Python3 online submissions for Triangle Area.\n        # Memory Usage: 14.2MB, less than 71.16% of Python3 online submissions for Triangle Area.\n\n        # For the triangle, the area of the triangle is the square of the lengths.\n        # The area of the triangle ABC is the square of the lengths of the diagonal ABC.\n        if len(nums) < 3:\n            return -1\n        a, b, c = nums\n        return math.pow(a, 2) * b * c\n\n\ndef"
    },
    {
        "number": 4255,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    ab = int(input())\n    bc = int(input())\n    ca = int(input())\n    a = (ab * (bc + ab - bc) // 2) + (bc * (ca - bc) // 2)\n    b = (ca * (ab - bc) // 2) + (bc * (bc - ab) // 2)\n    return str(abs(a) + abs(b))\n"
    },
    {
        "number": 4255,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    tri = [[0 for i in range(n+2)] for j in range(n+2)]\n    for i in range(n):\n        A,B,C = map(int,input().strip().split())\n        tri[i+2][n+2-i-1] = abs(A-B)+abs(B-C)\n    for i in range(n):\n        A,B,C = map(int,input().strip().split())\n        print(tri[i+1][i+1]-tri[i+2][i+2]+tri[i+1][n+2-i-1]-tri[i+2][n+2-i-1])\n\n--------------------------------------------------------------------\nIn this code, we use [i,j] coordinates to solve the problem of,\nBecause of the 4 coordinates, it is impossible to\nGet the area of the triangle ABC.\n\ndef"
    },
    {
        "number": 4255,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = list(map(int, stdin.split()))\n    area = (a + b + c) / 2\n    if area > 90:\n        return 'The triangle is not right angled.'\n    if area == 90:\n        return 'The triangle is right angled.'\n    return 'The triangle has an area of'+ str(area) + '.'\n\n\"123\" -> 2\"\n\"123\" -> 3\"\n\"123\" -> 4\"\n\"123\" -> 5\"\n\"123\" -> 6\"\n\"123\" -> 7\"\n\"123\" -> 8\"\n\"123\" -> 9\"\n\"123\" -> 10\"\n\"123\" -> 11\"\n\"123\" -> 12\"\n\"123\" -> 13\"\n\"123\" -> 14\"\n\"123\" -> 15\"\n\"123\" -> 16\"\n\"123\" -> 17\"\n\"123\" -> 18\"\n\"123\" -> 19\"\n\"123\" -> 20\"\n\"123\" -> 21\"\n\"123\" -> 22\"\n\"123\" -> 23\"\n\"123\" -> 24\"\n\"123\" -> 25\"\n\"123\" -> 26\"\n\"123\" -> 27\"\n\"123\" -> 28\"\n\"123\" -> 29\"\n\"123\" -> 30\n\"123\" -> 31\"\n\"123\" -> 32\"\n\"123\" -> 33\"\n\"123\" -> 34\"\n\"123\" -> 35\"\n\"123\" -> 36\"\n\"123\" -> 37\"\n\"123\" -> 38\"\n\"123\" -> 39\"\n\"123\" -> 40\"\n\"123\" -> 41\n\"123\" -> 42\"\n\"123\" -> 43\n\"123\" -> 44\"\n\"123\" -> 45\n\"123\" -> 46\"\n\"123\" -> 47\n\"123\" -> 48\"\n\"123\" -> 49\n\"123\" -> 50\n\"123\" -> 51\n\"123\" -> 52\n\"123\" -> 53\n\"123\" -> 54\"\n\"123\" -> 55\"\n\"123\" -> 56\n\"123\" -> 57\n\"123\" -> 58\"\n\"123\" -> 59\"\n\"123\" -> 60\n\"123\" -> 61\n\"123\" -> 62\n\"123\" -> 63\"\n\"123\" -> 64\n\"123\" -> 65\"\n\"123\" -> 66\"\n\"123\" -> 67\"\n\"123\" -> 68\"\n\"123\" -> 69\"\n\"123\" -> 70\"\n\"123\" -> 71\"\n\"123\" -> 72\"\n\"123\" -> 73\"\n\"123\" -> 74\"\n\"123\" -> 75\n\"123\" -> 76\"\n\"123\" -> 77\"\n\"123\" -> 78\n\"123\" -> 79\n\"123\" -> 80\n\"123\" -> 81\n\"123\" -> 82\n\"123\" -> 83\n\"123\" -> 84\n\"123\" -> 85\n\"123\" -> 86\n\"123\" -> 87\n\"123\" -> 88\n\"123\" -> 89\n\"123\" -> 90\n\"123\" -> 91\n\"123\" -> 92\n\"123\" -> 93\n\"123\" -> 94\n\"123\" -> 95\n\"123\" -> 96\n\"123\" -> 97\n\"123\" -> 98\n\"123\" -> 99\n\"123\" -> 100\n\"123\" -> 101\n\"123\" -> 102\n\"123\" -> 103\n\"123\" -> 104\n\"123\" -> 105\n\"123\" -> 106\n\"123\" -> 107\n\"123\" -> 108\n\"123\" -> 109\n\"123\" -> 110\n\"123\" -> 111\n\"123\" -> 112\n\"123\" -> 113\n\"123\" -> 114\n\"123\" -> 115\n\"123\" -> 116\n\"123\" -> 117\n\"123\" -> 118\n\"123\" -> 119\n\"123\" -> 120\n\"123\" -> 121\n\"123\" -> 122\n\"123\" -> 123\n\"123\" -> 124\n\"123\" -> 125\n\"123\" -> 126\n\"123\" -> 127\n\"123\" -> 128\n\"123\" -> 129\n\"123\" -> 130\n\"123\" -> 131\n\"123\" -> 132\n\"123\" -> 133\n\"123\" -> 134\n\"123\" -> 135\n\"123\" -> 136\n\"123\" -> 137\n\"123\" -> 138\n\"123\" -> 139\n\"123\" -> 140\n\"123\" -> 141\n\"123\" -> 142\n\"123\" -> 143\n\"123\" -> 144\n\"123\" -> 145\n\"123\" -> 146\n\"123\" -> 147\n\"123\" -> 148\n\"123\" -> 149\n\"123\" -> 150\n\"123\" -> 151\n\"123\" -> 152\n\"123\" -> 153\n\"123\" -> 154\n\"123\" -> 155\n\"123\" -> 156\n\"123\" -> 157\n\"123\" -> 158\n\"123\" -> 159\n\"123\" -> 160\n\"123\" -> 161\n\"123\" -> 162\n\"123\" -> 163\n\"123\" -> 164\n\"123\" -> 165\n\"123\" -> 166\n\"123\" -> 167\n\"123\" -> 168\n\"123\" -> 169\n\"123\" -> 170\n\"123\" -> 171\n\"123\" -> 172\n\"123\" -> 173\n\"123\" -> 174\n\"123\" -> 175\n\"123\" -> 176\n\"123\" -> 177\n\"123\" -> 178\n\"123\" -> 179\n\"123\" -> 180\n\"123\" -> 181\n\"123\" -> 182\n\"123\" -> 183\n\"123\" -> 184\n\"123\" -> 185\n\"123\" -> 186\n\"123\" -> 187\n\"123\" -> 188\n\"123\" -> 189\n\"123\" -> 190\n\"123\" -> 191\n\"123\" -> 192\n\"123\" -> 193\n\"123\" -> 194\n\"123\" -> 195\n\"123\" -> 196\n\"123\" -> 197\n\"123\" -> 198\n\"123\" -> 199\n\"123\" -> 200\n\"123\" -> 201\n\"123\" -> 202\n\"123\" -> 203\n\"123\" -> 204\n\"123\" -> 205\n\"123\" -> 206\n\"123\" -> 207\n\"123\" -> 208\n\"123\" -> 209\n\"123\" -> 210\n\"123\" -> 211\n\"123\" -> 212\n\"123\" -> 213\n\"123\" -> 214\n\"123\" -> 215\n\"123\" -> 216\n\"123\" -> 217\n\"123\" -> 218\n\"123\" -> 219\n\"123\" -> 220\n\"123\" -> 221\n\"123\" -> 222\n\"123\" -> 223\n\"123\" -> 224\n\"123\" -> 225\n\"123\" -> 226\n\"123\" -> 227\n\"123\" -> 228\n\"123\" -> 229\n\"123\" -> 230\n\"123\" -> 231\n\"123\" -> 232\n\"123\" -> 233\n\"123\" -> 234\n\"123\" -> 235\n\"123\" -> 236\n\"123\" -> 237\n\"123\" -> 238\n\"123\" -> 239\n\"123\" -> 240\n\"123\" -> 241\n\"123\" -> 242\n\"123\" -> 243\n\"123\" -> 244\n\"123\" -> 245\n\"123\" -> 246\n\"123\" -> 247\n\"123\" -> 248\n\"123\" -> 249\n\"123\" -> 250\n\"123\" -> 251\n\"123\" -> 252\n\"123\" -> 253\n\"123\" -> 254\n\"123\" -> 255\n\"123\" -> 256\n\"123\" -> 257\n\"123\" -> 258\n\"123\" -> 259\n\"123\" -> 260\n\"123\" -> 261\n\"123\" -> 262\n\"123\" -> 263\n\"123\" -> 264\n\"123\" -> 265\n\"123\" -> 266\n\"123\" -> 267\n\"123\" -> 268\n\"123\" -> 269\n\"123\" -> 270\n\"123\" -> 271\n\"123\" -> 272\n\"123\" -> 273\n\"123\" -> 274\n\"123\" -> 275\n\"123\" -> 276\n\"123\" -> 277\n\"123\" -> 278\n\"123\" -> 279\n\"123\" -> 280\n\"123\" -> 281\n\"123\" -> 282\n\"123\" -> 283\n\"123\" -> 284\n\"123\" -> 285\n\"123\" -> 286\n\""
    },
    {
        "number": 4255,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def calculate_area(a, b, c, d):\n        # area of triangle ABC\n        area = (b * c) / 2\n        # area of triangle ABC\n        area_left = (a + b + c + d) / 2\n        # area of triangle ABC\n        area_right = (d - a) * (d - b) * (d - c)\n\n        return f'{area_left} {area_right}'\n\n    for line in stdin:\n        print(calculate_area(int(line.split()[0]), int(line.split()[1]), int(line.split()[2]), int(line.split()[3])))\n\n---O(n^3)---\ndef"
    },
    {
        "number": 4255,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def area(a, b, c):\n        return int(a * b * c / 180)\n\n    def solve(a, b, c):\n        if not a or not b or not c:\n            return 0\n        if a == b == c:\n            return area(a, b, c)\n        return min(area(a, a + b, c), area(a, a + c, b + c),\n                   area(a + b, a + b + c, c + c))\n\n    n = int(input())\n    l = [list(map(int, input().split())) for _ in range(n)]\n    for a, b, c in l:\n        print(solve(a, b, c))"
    },
    {
        "number": 4255,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    return str(6*((int(stdin[1])**2+int(stdin[2])**2+int(stdin[3])**2)/2))\n\ndef"
    },
    {
        "number": 4255,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    left_side = []\n    right_side = []\n    for i in range(2):\n        left_side.append(int(stdin[i * 2]))\n        right_side.append(int(stdin[i * 2 + 1]))\n    if (left_side[0] * right_side[1]) - left_side[1] * right_side[0] == (left_side[0] + right_side[0]) * (left_side[1] + right_side[1]):\n        return left_side[0] * left_side[1] / 2\n    else:\n        return \"No\"\n\n'''\ndef"
    },
    {
        "number": 4255,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    area = (m + k) * (n + k) / 2\n\n    return str(area)\n"
    },
    {
        "number": 4255,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n  def calcTriangleArea(a, b, c):\n    return (a + b + c)/2\n  def main():\n    n = int(stdin.readline().strip())\n    for i in range(1, n + 1):\n      a, b, c = map(int, stdin.readline().strip().split())\n      print(calcTriangleArea(a, b, c))\n  main()\n"
    },
    {
        "number": 4256,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    C = C * 100\n    print(C // A % B, C)\n    return str(C // A % B)\n'''\n\nclass Solution:\n    def countVowel(self, s: str) -> int:\n        vowels = ['a', 'e', 'i', 'o', 'u']\n        count = 0\n        for i in s:\n            if i in vowels:\n                count += 1\n        return count\n"
    },
    {
        "number": 4256,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    def get_max_num(a,b,c):\n        if a == b and b == c:\n            return 1\n        \n        if a == b or b == c:\n            return 0\n        \n        if a == b or b == c:\n            return 1\n        \n        if a == b or b == c:\n            return 2\n        \n        return 3\n    \n    n = int(stdin.strip())\n    \n    for i in range(n):\n        c = input().split()\n        a, b, c = int(c[0]), int(c[1]), int(c[2])\n        \n        max_num = get_max_num(a,b,c)\n        if max_num == 1:\n            continue\n        \n        print(max_num)"
    },
    {
        "number": 4256,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    A, B, C, D = sorted([A, B, C, D], reverse=True)\n    ans = 0\n    while True:\n        if A > 0:\n            A -= 1\n            ans += 1\n        if B > 0:\n            B -= 1\n            ans += 1\n        if C > 0:\n            C -= 1\n            ans += 1\n        if D > 0:\n            D -= 1\n            ans += 1\n        if A < 0 and B < 0 and C < 0 and D < 0:\n            break\n    return str(ans)\n\nprint(solution(\"2 11 4\"))"
    },
    {
        "number": 4256,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[1])\n    num = 1\n    for i in range(n):\n        num *= (i+1)\n    return str(num)"
    },
    {
        "number": 4256,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    \n    count = A\n    if B > C:\n        count += A\n    elif B < C:\n        count -= A\n    \n    return str(count)\n\n\nprint(solution(\"2 11 4\"))\n\ndef"
    },
    {
        "number": 4256,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    while A < B + C:\n        A += A\n        B += B\n        C -= C\n    return str(A)"
    },
    {
        "number": 4256,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    numbers = [int(i) for i in stdin.split()]\n    minimum = numbers[0]\n    maximum = numbers[0]\n    for i in range(1, len(numbers)):\n        if numbers[i] < minimum:\n            minimum = numbers[i]\n        elif numbers[i] > maximum:\n            maximum = numbers[i]\n    return str(len(numbers) - maximum)\n\n-----Constraints-----\n - 1 \\leq A, B, C \\leq 100\n'''\n\nimport math"
    },
    {
        "number": 4256,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def valid(a, b, c):\n        if a % 2 == b % 2 and a % c == b % c:\n            return True\n        else:\n            return False\n    \n    A, B, C = map(int, stdin.split())\n    if valid(A, B, C):\n        return str(A * B * C)\n    return \"Invalid\""
    },
    {
        "number": 4256,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    A = A * 10000\n    B = B * 100\n    C = C * 1000\n    n = A + B + C\n    num = [A, B, C]\n    while n > 0:\n        if n % 10000 == 0:\n            print(n // 10000)\n            n //= 10000\n        elif n % 100 == 0:\n            print(n // 100)\n            n //= 100\n        elif n % 10 == 0:\n            print(n // 10)\n            n //= 10\n        else:\n            print(n // 10, end=' ')\n            n //= 10\n        num.append(n)\n        n -= 1\n    return str(len(set(num)))\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4256,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    total = A + B + C + D\n    return str(total//total)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4257,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    B = list(map(int, stdin.split()))\n    x = []\n    y = []\n    for i in range(n):\n        x.append(A[i] * B[i])\n    for i in range(n):\n        y.append((x[i] * B[i]) // m)\n    return str(sum(y))"
    },
    {
        "number": 4257,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A = list(map(int,stdin.split()))\n    B = list(map(int,stdin.split()))\n    A.sort()\n    B.sort()\n    c = 0\n    for i in range(len(A)):\n        c += A[i] * B[i]\n    return str(c)\n"
    },
    {
        "number": 4257,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(int(stdin.strip())):\n        a, b = map(int, stdin.split())\n        print(a*b)\n\ndef"
    },
    {
        "number": 4257,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A = int(stdin.strip())\n    B = int(stdin.strip())\n    print(A*B)"
    },
    {
        "number": 4257,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n  \n  A = [int(x) for x in stdin.split()]\n  B = [int(x) for x in stdin.split()]\n  \n  max_val = max(A)\n  min_val = min(B)\n  result = max_val * min_val\n  \n  return str(result)\n"
    },
    {
        "number": 4257,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return str(A * B)\n\ndef"
    },
    {
        "number": 4257,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    arr = []\n    for _ in range(n):\n        arr.append(list(map(int, stdin.split())))\n    # print(arr)\n    arr = np.array(arr, dtype=int)\n    # print(arr)\n    def np_matrix_multiply(arr, n):\n        return np.matmul(arr, np.matmul(arr.transpose(), arr).transpose()).transpose()\n    # print(np_matrix_multiply(arr, n))\n    # print(np.matmul(arr, np.matmul(arr.transpose(), arr).transpose()).transpose())\n    return np.matmul(np.matmul(arr.transpose(), arr).transpose(), arr).transpose().tolist()[0]\n    # return np.matmul(arr, np.matmul(arr.transpose(), arr).transpose()).tolist()[0]\n"
    },
    {
        "number": 4257,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    lst = []\n    for i in range(n):\n        lst.append(int(stdin[i]))\n    result = sum(lst)\n    return str(result)\n\n\"\"\""
    },
    {
        "number": 4257,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return str(A*B)\n\n-----Explanation-----\n The input A = 10 and B = 5.\nThe output is 10 * 5 = 100.\n\nThe output of solution() is 10 * 5 = 100.\n'''\n\ndef"
    },
    {
        "number": 4257,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.split(' ')[0])\n    b = int(stdin.split(' ')[1])\n    return str(a * b)\n\"\"\"\n\n\nclass Solution:\n    def solve(self, a, b):\n        return str(a * b)\n"
    },
    {
        "number": 4258,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, T = map(int, stdin.split())\n    print(solution(A, B, T))\n    return ''\n\n'''"
    },
    {
        "number": 4258,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, T = map(int, stdin.split())\n    return str(A + B * T + A * T + B * T * 0.5)\n\n'''\n\ndef"
    },
    {
        "number": 4258,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A = int(stdin.split(' ')[0])\n    B = int(stdin.split(' ')[1])\n    T = int(stdin.split(' ')[2])\n    return f\"{T + 0.5 * A} {A} {T} {B} {B} {T}\""
    },
    {
        "number": 4258,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    answer = \"\"\n    A, B, T = map(int, stdin.split())\n    count = 0\n    T += 0.5\n    for i in range(1, A + 1):\n        for j in range(1, B + 1):\n            count += int(T - (T - T * (i - 1)) * (j - 1))\n    answer = count\n    return str(answer)\n\n\"\"\"\nimport sys\n\ndef"
    },
    {
        "number": 4258,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B, T = map(int, stdin.split())\n    st = 0\n    while T > 0:\n        a, b = map(int, stdin.split())\n        st += (a + b + A) / 5\n        T -= 1\n    return str(st)\n"
    },
    {
        "number": 4258,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   input:\n   [3,5,7]\n   t: int\n   A: int\n   B: int\n   T: int\n   return: str\n   -----Sample Input-----\n   1 5 3\n   1 5 6\n   1 5 7\n   return: \"10\"\n  \n   Example 1:\n   Input:\n   3 5 7\n   t: 7\n   A: 3\n   B: 5\n   T: 3\n   Output:\n   \"10\"\n   \n   Example 2:\n   Input:\n   3 2 2\n   t: 2\n   A: 2\n   B: 2\n   T: 2\n   Output:\n   \"3\"\n   \n   Example 3:\n   Input:\n   2 2\n   t: 2\n   A: 2\n   B: 2\n   T: 1\n   Output:\n   \"2\"\n   \n   Example 4:\n   Input:\n   1\n   t: 1\n   A: 1\n   B: 1\n   T: 0\n   Output:\n   \"1\"\n   \n   Example 5:\n   Input:\n   0\n   t: 0\n   A: 0\n   B: 0\n   T: 0\n   Output:\n   \"0\"\n   \n   Constraints:\n   1 <= A, B, T <= 100\n   1 <= t <= 50\n   1 <= A + B <= 100\n   \n   -----Time Limit: 1 second-----\n   Memory Limit: 4 GB\n   \n   ------Constraints------\n   0 <= A <= 100\n   0 <= B <= 100\n   0 <= T <= 50\n   \"\"\"\n   pass"
    },
    {
        "number": 4258,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin[0])\n    b = int(stdin[1])\n    c = int(stdin[2])\n    d = c + b\n    e = a + a + d\n    f = (d // a) + (d % a)\n    g = b // b + (b % b)\n    h = e // c + (e % c)\n    i = (f // d) + (f % d)\n    k = g // b\n    print(i + h + k)"
    },
    {
        "number": 4258,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, T = map(int, stdin.split())\n    answer = []\n    for i in range(T):\n        answer.append(A*(i+1))\n    \n    for i in range(A-1, A-T-1, -1):\n        answer.append(B-i)\n    \n    answer.append(0.5*T)\n    return \" \".join(map(str,answer))"
    },
    {
        "number": 4258,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A = int(stdin.split(\" \")[0])\n    B = int(stdin.split(\" \")[1])\n    T = int(stdin.split(\" \")[2])\n    ans = 0\n    i = 1\n    while True:\n        if i % A!= 0:\n            break\n        ans += T - (i // A) + 1\n        i += 1\n    return str(ans)\n\n'''\nimport time\nstart = time.time()"
    },
    {
        "number": 4258,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    total = 0\n    for a in range(1, int(input())+1):\n        b, t = map(int, input().split())\n        if a == b*t:\n            print(a)\n            total += 1\n    return str(total)\n"
    },
    {
        "number": 4259,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return\n"
    },
    {
        "number": 4259,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n    count = 0\n    while True:\n        if A % K == 0 and B % K == 0:\n            count += 1\n            A //= K\n            B //= K\n        else:\n            break\n    if count > 1:\n        return 'NG'\n    return 'OK'\n\ndef"
    },
    {
        "number": 4259,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    A,B,K = list(map(int,stdin.split()))\n    # A,B,K = 500,600,7\n\n    if K == 1:\n        print('OK')\n    elif (A%K) + (B%K) == (A*B):\n        print('OK')\n    else:\n        print('NG')"
    },
    {
        "number": 4259,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin[0])\n    A,B = map(int,stdin[1].split())\n    carry = A+B\n    res = []\n    count = 0\n    while carry>0:\n        res.append(str(carry%K))\n        carry //=K\n        count+=1\n    print(\"\".join(res[::-1]))\n    return \"OK\"\n"
    },
    {
        "number": 4259,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.split()\n    if len(line) == 1:\n        print(\"OK\")\n    else:\n        A, B, K = line\n        if int(A) + int(B) % int(K) == 0:\n            print(\"OK\")\n        else:\n            print(\"NG\")\n\ndef"
    },
    {
        "number": 4259,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n    \n"
    },
    {
        "number": 4259,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def getK(num):\n        k = list(map(str, list(str(num))))\n        for i in range(len(k)):\n            k[i] = int(k[i]) % 10\n        return \"\".join(k)\n\n    A, B = list(map(int, stdin.split()))\n    K = list(map(int, stdin.split()))\n    return \"OK\" if getK(A) * getK(B) == K else \"NG\"\n\n-----Sample Output-----\nSample Input:\n5\n401 1000\n\nSample Output:\nOK\n\n-----Constraints-----\n - All values in input are integers.\n - 1 \\leq A \\leq B \\leq 1000\n - 1 \\leq K \\leq 1000\n\n-----Input-----\nInput is given from Standard Input in the following format:\nK\nA B\n\n-----Output-----\nIf he can achieve the objective, print OK; if he cannot, print NG.\n\n-----Sample Input-----\n7\n500 600\n\n-----Sample Output-----\nNG\n\nAmong the multiples of 7, for example, 567 lies between 500 and 600.\ndef"
    },
    {
        "number": 4259,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a, b = map(int, stdin.split())\n    a -= 1\n    b -= 1\n    l = max(a, b)\n    a = a // k\n    b = b // k\n    if a >= b:\n        return \"NG\"\n    else:\n        return \"OK\"\n"
    },
    {
        "number": 4259,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin[0])\n    A = int(stdin[1])\n    B = int(stdin[2])\n    if K % 2 == 0 and A % 2 == 0 and B % 2 == 0:\n        print('OK')\n    else:\n        print('NG')\nsolution(\"7 567 500 600\")"
    },
    {
        "number": 4259,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # todo\n    pass"
    },
    {
        "number": 4260,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, T = map(int, stdin.split())\n    X, t = map(int, stdin.split())\n    Taro_studies = 0\n    \n    if t > T:\n        print(0)\n        return\n    \n    if X < t:\n        Taro_studies += (t//X)\n    elif X > t:\n        if X % t == 0:\n            taro_studies += 1\n        else:\n            taro_studies += t//X\n    else:\n        print(0)\n        return\n        \n    if Taro_studies == 0:\n        print(0)\n    else:\n        print(Taro_studies)\n    \nsolution(input())"
    },
    {
        "number": 4260,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    t = list(map(int, stdin.split()))\n    t.sort()\n    a = 0\n    for i in t:\n        a += (i * (i-1) * x) / 3\n    return str(int(a))"
    },
    {
        "number": 4260,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    from collections import Counter\n    from operator import itemgetter\n    \n    lst = stdin.split('\\n')\n    \n    def solve(i):\n        x, y = [int(i) for i in lst[i].split()]\n        t = len(lst[i].split())\n        return Counter(map(int, lst[i].split())).most_common()[0][1]\n    \n    def solve2(i):\n        x, y = [int(i) for i in lst[i].split()]\n        t = len(lst[i].split())\n        return solve(i) * t - solve(i) * x\n    \n    def solve3(i):\n        x, y = [int(i) for i in lst[i].split()]\n        t = len(lst[i].split())\n        return solve(i) * t - solve2(i) * x\n    \n    def solve4(i):\n        x, y = [int(i) for i in lst[i].split()]\n        t = len(lst[i].split())\n        return solve(i) * t - solve3(i) * x\n    \n    lst.sort(key=itemgetter(0))\n    \n    # print(lst)\n    \n    return str(int(lst[-1][0])) + '\\n' + str(int(lst[-1][0]) * solve(3))\n\n---------------Running Time Problem-----------------\n"
    },
    {
        "number": 4260,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    hours = 0\n    for t, x in enumerate(stdin):\n        t = int(t)\n        t_x = int(x)\n        if t_x < 1:\n            continue\n        else:\n            hours += t_x // t\n            if hours > 100:\n                hours -= 100\n    return str(hours)"
    },
    {
        "number": 4260,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    if t == 0:\n        return '0'\n    if t % 2:\n        if t % 2!= 0:\n            return str(n * (n + 1) // 2)\n        else:\n            return str(n + 1)\n    else:\n        return str(n * (n + 1) // 2)\n\"\"\"\n\nimport math\nfrom collections import defaultdict\n\ndef"
    },
    {
        "number": 4260,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x, t = [int(x) for x in stdin.split()]\n    return str(int((x * t) / 2))\n\ndef"
    },
    {
        "number": 4260,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    t, x = map(int, stdin.split())\n    lst = list(map(int, stdin.split()))\n    count = 0\n    for i in range(1, x):\n        if t > 0:\n            t -= 1\n            count += 1\n    for i in range(1, t):\n        if t - i > x // 2:\n            t -= i\n            count += 1\n    return str(count)"
    },
    {
        "number": 4260,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    t, x = map(int, stdin.split())\n    return str(round(t * x / 3600))\n\"\"\"\ndef"
    },
    {
        "number": 4260,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    num_days = int(stdin.split('\\n')[0].split(' ')[1])\n    input = stdin.split('\\n')\n    hours = []\n    for i in range(num_days):\n        input.remove(input[0])\n    for i in range(num_days):\n        if input[i].count('T') < 2:\n            hours.append(input[i].split(' ')[0])\n            if int(input[i].split(' ')[0]) % 3 == 0:\n                hours.append(input[i].split(' ')[1])\n    return str(len(hours)) + '\\n' + str(sum(hours)) + '\\n'\n"
    },
    {
        "number": 4260,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    t, x = map(int, stdin.split())\n    ans = x * t\n    return str(ans)"
    },
    {
        "number": 4261,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def parse(string: str):\n        total, length, top, bottom = 0, 0, 0, 0\n        for i in string:\n            if i.isdigit():\n                total += int(i)\n            elif i == '(':\n                length += 1\n            elif i == ')':\n                length -= 1\n            else:\n                if length > 0:\n                    bottom += 1\n                if bottom == 0:\n                    total -= 1\n                top += 1\n        return total, length, top, bottom\n\n    \n    def recur(string: str, top: int, bottom: int, total: int):\n        if len(string) == 0:\n            if total > 0:\n                return total\n            else:\n                return -1\n        total -= parse(string)[2]\n        if top == 0:\n            return recur(string[1:], 1, 0, total)\n        elif top == 1:\n            return recur(string[1:], 0, top - 1, total)\n        else:\n            return recur(string[1:], top, bottom - 1, total)\n\n    # return recur(stdin, top, bottom, total)\n    return str(recur(stdin, 2, 1, 0))\n"
    },
    {
        "number": 4261,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if A >= B >= C:\n        print(A, B, C)\n    elif B >= A >= C:\n        print(B, A, C)\n    elif C >= A >= B:\n        print(C, A, B)\n"
    },
    {
        "number": 4261,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    A = A//100\n    B = B//1000\n    C = C//100\n    A = A*1000\n    B = B*100\n    C = C*100\n    if B >= A and B >= C:\n        answer = B - A\n    elif A >= B and A >= C:\n        answer = A - B\n    else:\n        answer = C - A\n    return str(answer)\n\n\"\"\"\n\nclass Solution:\n    def solve(self, A, B, C):\n        A=A//100\n        B=B//1000\n        C=C//100\n        A=A*1000\n        B=B*100\n        C=C*100\n        if B >= A and B >= C:\n            answer = B - A\n        elif A >= B and A >= C:\n            answer = A - B\n        else:\n            answer = C - A\n        return str(answer)"
    },
    {
        "number": 4261,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a < b:\n        if c < a:\n            a, c = c, a\n        return a * b\n    if b < c:\n        if a < c:\n            a, b = b, c\n        return a * b\n    return a * b\n\nprint(solution(\"5 5 20\"))"
    },
    {
        "number": 4261,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    answer = a * b / c\n    print(answer)"
    },
    {
        "number": 4261,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin.split(' ')[0])/int(stdin.split(' ')[1]))\n"
    },
    {
        "number": 4261,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(i) for i in stdin.split()]\n    answer = a * b * c\n    return str(answer)\n"
    },
    {
        "number": 4261,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    A = 0\n    B = 0\n    C = 0\n    for _ in range(n):\n        a, b, c = map(int, input().split())\n        A += a\n        B += b\n        C += c\n    return str(abs(C - B) // (A // m))"
    },
    {
        "number": 4261,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    water_1, water_2 = map(int, stdin.split())\n    if water_2 <= water_1:\n        water_1, water_2 = water_2, water_1\n    \n    ans = str(min(water_1, water_2) * (water_2 - water_1) / water_1)\n    print(ans)\n    return ans\n\nprint(solution(\"6 4 3\"))\n"
    },
    {
        "number": 4261,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n  A,B,C = map(int,stdin.split())\n  A -= 1\n  B -= 1\n  C -= 1\n  A2 = A//B\n  A -= A2*B\n  B2 = B//C\n  B -= B2*C\n  return \"%.0f\"%A+\"%.0f\"%B+\"%.0f\"%C+\"%.0f\"%A2+\"%.0f\"%B2"
    },
    {
        "number": 4262,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    def ints():\n        return [int(i) for i in stdin.split()]\n    \n    N = ints()\n    P, Q = map(str, st.split())\n    permutations = {i: [ints()] for i in range(2,N+1)}\n    \n    for a,b in zip(P,Q):\n        permutations[int(a)][int(b)] += permutations[int(a)-int(b)].pop(0)\n        permutations[int(b)][int(a)] += permutations[int(b)-int(a)].pop(0)\n    answer = 0\n    for i in permutations[2]:\n        answer += len(i)\n    return str(answer)\n"
    },
    {
        "number": 4262,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    # print(n)\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n    # print(A, B)\n    M = min(n, len(A))\n    # print(M)\n    A.sort()\n    B.sort()\n    # print(A, B)\n    # print(n, M)\n    cnt = 0\n    for i in range(n - M + 1):\n        j = i + M\n        if B[j] < A[i]:\n            cnt += 1\n    print(cnt)\n"
    },
    {
        "number": 4262,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4262,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N,P,Q = map(int,stdin.split())\n    p,q = map(int,stdin.split())\n    for k in range(p,q+1):\n        if (p-k)<=N and (q-k)<=N:\n            if p-k>=q-k:\n                print(abs(p-k)+abs(q-k))\n            else:\n                print(abs(p-k)+abs(q-k-1))\n    \n"
    },
    {
        "number": 4262,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    answer = 0\n    for perm in itertools.permutations(range(1, N + 1), 2):\n        if sum(perm) == sum([perm[i] * perm[i + 1] for i in perm]):\n            answer = sum(perm)\n    return str(answer)\n\"\"\"\n\nimport sys\n\ninput = sys.stdin.readline\n\nN = int(input())\n\nl = [list(map(int, input().split())) for _ in range(N)]\n\nprint(sum([2*sum(perm) for perm in itertools.permutations(range(1, N+1), 2)]))\n"
    },
    {
        "number": 4262,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    P, Q = stdin.split()\n    P = list(map(int, P.split()))\n    Q = list(map(int, Q.split()))\n    P.sort()\n    Q.sort()\n    print(len(P) - len(Q))\n    \n    def is_palindrome(n):\n        i = 0\n        j = len(n) - 1\n        while i < j:\n            if n[i]!= n[j]:\n                return False\n            i += 1\n            j -= 1\n        return True\n    \n    for i in range(N):\n        #print(P[i], Q[i], is_palindrome(P[i] + Q[i]))\n        if is_palindrome(P[i] + Q[i]):\n            print(P[i] - Q[i])\n    return ''"
    },
    {
        "number": 4262,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    p = [int(i) for i in stdin.split()]\n    q = [int(i) for i in stdin.split()]\n    permutations = []\n    for i in range(N):\n        permutations.append(str(i))\n    for a in permutations:\n        permutations.remove(a)\n        for b in permutations:\n            if a!= b:\n                permutations.append(str(a) + \" \" + str(b))\n    permutations = set(permutations)\n    for i in p:\n        permutations.remove(i)\n    for i in q:\n        permutations.remove(i)\n    for i in permutations:\n        permutations.remove(i)\n    answer = len(permutations)\n    for i in permutations:\n        permutations.remove(i)\n    return str(answer)\n"
    },
    {
        "number": 4262,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    P = [A[i] for i in range(len(A))]\n    Q = [A[i] for i in range(len(A)) if i % 2 == 1]\n    P.sort()\n    Q.sort()\n    P.extend(Q)\n    n = len(P)\n    Q.extend(P)\n    answer = 1\n    for i in range(n):\n        a, b = P.pop(), Q.pop()\n        if a + b == n:\n            answer = a\n            break\n        elif a + b > n:\n            continue\n        else:\n            answer = a + b\n    return str(answer)\n\"\"\"\n\ndef"
    },
    {
        "number": 4262,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, P, Q = map(int, stdin.split())\n    permutations = permutations(N, P, Q)\n    answer = ''\n    for p in permutations:\n        answer = max(p, answer)\n    return answer\n\ndef"
    },
    {
        "number": 4262,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, p, q = [int(i) for i in stdin.split()]\n    lexic = list(range(1, n + 1))\n    t = p * q\n    for p in range(1, t):\n        p2 = t - p\n        for i in range(len(lexic) - 1, -1, -1):\n            lexic[i] = lexic[i] * p2 // p\n    print(f'{p} {q}')\n    print(*lexic, sep=' ')\n    return''.join(map(str, lexic))"
    },
    {
        "number": 4263,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution to DFA(DNA-alphabet) problem\n    \"\"\"\n    # \n    def rec(s:str, k:int) -> str:\n        \"\"\"\n        returns the next substring of s that is a substring of s[:k]\n        \"\"\"\n        # for each character of s\n        for i in range(len(s) - k):\n            # if we are on the end of the substring\n            if s[i:i + k] == s[i:i + k][::-1]:\n                # update current substring\n                s = s[:i] + s[i + k:]\n        return s\n    \n    def isSubstring(s:str, substring:str) -> bool:\n        \"\"\"\n        checks if a substring of s is a substring of s[i:i + len(substring)]\n        \"\"\"\n        if len(substring) <= 0:\n            return True\n        for i in range(len(s) - len(substring) + 1):\n            if s[i:i + len(substring)] == substring:\n                return True\n        return False\n    \n    def F(i:int, k:int) -> bool:\n        \"\"\"\n        Checks if s[i:i + k] is a substring of s[i:i + k]\n        \"\"\"\n        for i in range(i, i + k):\n            if i >= len(s) or not s[i]:\n                return False\n        return True\n    \n    def DFS(s:str, k:int) -> bool:\n        \"\"\"\n        checks if s[i:i + k] is a substring of s[i:i + k]\n        \"\"\"\n        if len(s) <= 0:\n            return False\n        if len(s) == 1:\n            return F(s[0], k)\n        if F(s[0], k):\n            return DFS(s[1:], k)\n        if F(s[0], k):\n            return DFS(s[1:], k)\n        return True\n    \n    return max(map(len, filter(lambda s: s, map(rec, stdin, range(int(len(stdin) / 2))))))\n"
    },
    {
        "number": 4263,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(solution)\n    5\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4263,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    string = []\n    for line in stdin:\n        string.append(line.strip())\n    return max(len(i) for i in string)"
    },
    {
        "number": 4263,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def find_substring(S: str):\n        substr = set()\n        for i in range(len(S)-1):\n            s = S[i:i+2]\n            if s in substring:\n                return s\n            if s not in substr:\n                substr.add(s)\n        return None\n    \n    return max(map(find_substring, S), key=len)\n"
    },
    {
        "number": 4263,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin\n    mylist = []\n    mylist.append(string[0])\n    mylist.append(string[-1])\n    for i in range(1,len(string)):\n        if(string[i] == string[i-1]):\n            mylist.append(string[i-1])\n        else:\n            mylist.append(string[i])\n    \n    return ''.join(mylist)\n\n\nConstraints:\n 1 <= s.length <= 10\ns consists of uppercase English letters.\n\n-----Time Complexity-----\nTime : O(n)\n\n-----Space Complexity-----\nSpace : O(1)\n\n\n'''\nclass Solution:\n    def longestACGTString(self, S: str) -> int:\n        \n        n = len(S)\n        \n        def countSub(i):\n            cnt = 0\n            for j in range(i, n):\n                if S[j] in ['A', 'C', 'G', 'T']:\n                    cnt += 1\n                    \n            return cnt\n        \n        maxCnt = 0\n        maxCount = 0\n        i = 0\n        while i < n:\n            cnt = countSub(i)\n            if cnt > maxCnt:\n                maxCnt = cnt\n                maxCount = i\n            i += 1\n            \n        return maxCount"
    },
    {
        "number": 4263,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin) <= 2:\n        return 0\n    for i in range(len(stdin)-2):\n        if len(stdin[i:i+3]) > len(stdin[i+2:i+6]):\n            return len(stdin[i:i+3])\n\n\ndef"
    },
    {
        "number": 4263,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\ndef"
    },
    {
        "number": 4263,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    T = stdin.split('\\n')[0].split(':')[1]\n    \n    k = 0\n    for i in T:\n        for j in range(len(i)):\n            if i[:j] not in AC:\n                k += 1\n    return str(k)\n\"\"\"\n\ndef"
    },
    {
        "number": 4263,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    acgt = []\n    for x in stdin:\n        if x == 'A':\n            acgt.append('T')\n        if x == 'C':\n            acgt.append('G')\n        if x == 'G':\n            acgt.append('C')\n        if x == 'T':\n            acgt.append('A')\n    return \"\".join(acgt)\n\ndef"
    },
    {
        "number": 4263,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return"
    },
    {
        "number": 4264,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    d = [0] * 10\n    for i in range(10):\n        d[i] = int(stdin[i])\n    for i in range(2, n + 1):\n        for j in range(10):\n            if j % 2 == 0:\n                d[j] += d[j + 1] * pow(10, i - 2)\n    return str(sum(map(int, str(d[9])[::-1])))"
    },
    {
        "number": 4264,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    odd_count = 0\n    for n in range(1,N+1):\n        if n % 2 == 1:\n            odd_count += 1\n    return str(odd_count)\n"
    },
    {
        "number": 4264,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(int(stdin)):\n        n = int(input())\n        a = []\n        for j in range(10):\n            if j % 2 == 1:\n                a.append(str(n))\n                n = n - 1\n            else:\n                n = n // 10\n        print(' '.join(a))\n"
    },
    {
        "number": 4264,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    def is_odd(N):\n        while N > 0:\n            if (N % 10) % 2!= 0:\n                return True\n            else:\n                N //= 10\n        return False\n    N = 0\n    for i in range(1, int(N**0.5) + 1):\n        if is_odd(i):\n            N += i\n    return str(N)"
    },
    {
        "number": 4264,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    answer = 0\n\n    # create a list of integers and convert to base ten\n    numbers = list(map(int, stdin.split()))\n\n    # get the number of positive integers less than or equal to N\n    N = len(numbers)\n    # create an empty list to store the odd numbers\n    odd_numbers = []\n\n    # create a loop that iterates over the list\n    for i in range(0, N):\n        # if the number is an odd integer\n        if numbers[i] % 2!= 0:\n            # add it to the list\n            odd_numbers.append(numbers[i])\n\n    # create an empty list to store the even numbers\n    even_numbers = []\n\n    # create a loop that iterates over the list\n    for i in range(0, N):\n        # if the number is an even integer\n        if numbers[i] % 2 == 0:\n            # add it to the list\n            even_numbers.append(numbers[i])\n\n    # get the number of positive integers less than or equal to N\n    odd_numbers = len(odd_numbers)\n    even_numbers = len(even_numbers)\n\n    # if the number of odd numbers is less than or equal to N\n    if odd_numbers < N:\n        # iterate over odd numbers\n        for i in range(0, odd_numbers):\n            # append the odd numbers\n            answer += odd_numbers\n\n    # if the number of even numbers is less than or equal to N\n    if even_numbers < N:\n        # iterate over even numbers\n        for i in range(0, even_numbers):\n            # append the even numbers\n            answer += even_numbers\n\n    # return the number of positive integers less than or equal to N\n    return str(answer)\n"
    },
    {
        "number": 4264,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 4264,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\nhttps://leetcode.com/problems/positive-integer-without-leading-zeros/discuss/119829/Python-Easy-DP-solution-with-explanation\n\nTime: O(n)\nSpace: O(1)\n\"\"\"\n\nclass Solution:\n    def odd_nums_with_leading_zeros(self, N: int) -> int:\n        numbers = [int(i) for i in str(N)]\n        count = 0\n        for i in range(0, len(numbers) - 1):\n            if numbers[i] % 2!= 0:\n                count += 1\n        return count\n\nprint(Solution().odd_nums_with_leading_zeros(101))\n"
    },
    {
        "number": 4264,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    # m = math.log10(n)\n    # print(m)\n    m = -1\n    s = 0\n    for i in range(10**(m+2), n+10**(m+2)+1):\n        # print(i)\n        if i % 2 == 0:\n            s += 1\n    # print(s)\n    return str(s)\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4264,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    num = []\n    for i in range(len(stdin)):\n        num.append(int(stdin[i]))\n    \n    return str(len(set(num)))\n    \n    pass\n'''\n\ndef"
    },
    {
        "number": 4264,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    check = 0\n    for i in range(1, N + 1):\n        if i % 2!= 0:\n            check += 1\n    return str(check)\n"
    },
    {
        "number": 4265,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    result = 0\n    for i in range(1, n//2+1):\n        if stdin[i-1]!= stdin[i]:\n            result += 2 * i\n    print(result)\n    return str(result)\n"
    },
    {
        "number": 4265,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    S = list(stdin)\n    T = list(stdin)\n    c = 0\n    for i in range(len(S)):\n        if i % 2 == 0:\n            c += 1\n        else:\n            c -= 1\n    for i in range(len(T)):\n        if i % 2 == 0:\n            T[i] = 'h'\n        else:\n            T[i] = 't'\n    print(c)\n    print(S)\n    print(T)\n    print(c)\n    print(len(S))\n    print(len(T))\n    print(len(c))\n    print(len(T) - 1)\n    print(len(c) - 1)\n    return T[0]\n\n\"\"\"\n\nclass Solution:\n    def solve(self, stdin: str) -> str:\n        S = list(stdin)\n        T = list(stdin)\n        c = 0\n        for i in range(len(S)):\n            if i % 2 == 0:\n                c += 1\n            else:\n                c -= 1\n        for i in range(len(T)):\n            if i % 2 == 0:\n                T[i] = 'h'\n            else:\n                T[i] = 't'\n        return T[c]\n"
    },
    {
        "number": 4265,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = list(stdin)\n    T = \"c\"\n    H = \"h\"\n    E = \"e\"\n    a = \"\"\n    for i in s:\n        if i == T:\n            T = \"f\"\n        elif i == H:\n            H = \"t\"\n        elif i == E:\n            E = \"a\"\n        else:\n            a += i\n    cnt = 0\n    for i in range(0, len(s), 2):\n        if s[i] == T and s[i + 1] == T:\n            cnt += 1\n    for i in range(0, len(s), 2):\n        if s[i] == H and s[i + 1] == H:\n            cnt += 1\n    for i in range(0, len(s), 2):\n        if s[i] == E and s[i + 1] == E:\n            cnt += 1\n    if cnt == 0:\n        print(0)\n    else:\n        print(cnt)\nsolution(input())\n"
    },
    {
        "number": 4265,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n,m = map(int,stdin.split(\" \"))\n    s = [i for i in range(n+1)]\n    t = [i for i in range(n+1)]\n    for _ in range(m):\n        a,b,c,d = map(str,stdin.split(\" \"))\n        a = a[1:]\n        b = b[1:]\n        c = c[1:]\n        d = d[1:]\n        s[int(b)],t[int(c)],t[int(d)] = a,a,a\n    l = len(s)\n    i = 0\n    j = 0\n    count = 1\n    while i < len(s):\n        if i + len(t) > l:\n            return count\n        if s[i + len(t)] in t:\n            while s[i + len(t)] in t:\n                i += 1\n            t[t.index(s[i + len(t)])] = s[i + len(t)]\n            i += 1\n        elif s[i + len(t)] in t:\n            t[t.index(s[i + len(t)])] = s[i + len(t)]\n            i += 1\n        else:\n            if s[i + len(t)] in s:\n                count += 1\n                s[i + len(t)] = t[t.index(s[i + len(t)])]\n                i += 1\n            else:\n                t[t.index(s[i + len(t)])] = s[i + len(t)]\n                i += 1\n                j += 1\n    return count + j\n\nfor _ in range(int(input())):\n    print(solution(input()))\n"
    },
    {
        "number": 4265,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    t = \"\"\n    for i in s:\n        t += i\n    t = t.replace(s[6], \"h\")\n    t = t.replace(s[8], \"t\")\n    t = t.replace(s[10], \"t\")\n    return t\n\ndef"
    },
    {
        "number": 4265,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n    ans = 0\n    k = 1\n    # print(s,t)\n    if len(s) == 1:\n        ans += 1\n        ans = ans*(len(t)+1)\n        if len(t)!= 0:\n            ans += 1\n        if len(t)!= 0 and len(s) == 0:\n            ans += 1\n        if len(s)!= 0 and len(t)!= 0:\n            ans += 1\n        ans = ans % (10 ** 9 + 7)\n        print(ans)\n        return ans\n    while True:\n        if len(s) == len(t):\n            ans += 1\n            if len(t) == 0:\n                ans += 1\n            if len(s) == 0:\n                ans += 1\n            if len(s)!= 0 and len(t) == 0:\n                ans += 1\n            if len(s)!= 0 and len(t)!= 0:\n                ans += 1\n            ans = ans % (10 ** 9 + 7)\n            print(ans)\n            return ans\n        if len(s) == len(t):\n            ans += 1\n            if len(t) == 0:\n                ans += 1\n            if len(s) == 0:\n                ans += 1\n            if len(s)!= 0 and len(t) == 0:\n                ans += 1\n            if len(s)!= 0 and len(t)!= 0:\n                ans += 1\n            ans = ans % (10 ** 9 + 7)\n            print(ans)\n            return ans\n        if len(s) == len(t):\n            ans += 1\n            if len(s) == 0:\n                ans += 1\n            if len(t) == 0:\n                ans += 1\n            if len(s)!= 0 and len(t) == 0:\n                ans += 1\n            if len(s)!= 0 and len(t)!= 0:\n                ans += 1\n            ans = ans % (10 ** 9 + 7)\n            print(ans)\n            return ans\n        if len(s) == len(t):\n            ans += 1\n            if len(s) == 0:\n                ans += 1\n            if len(t) == 0:\n                ans += 1\n            if len(s)!= 0 and len(t) == 0:\n                ans += 1\n            if len(s)!= 0 and len(t)!= 0:\n                ans += 1\n            ans = ans % (10 ** 9 + 7)\n            print(ans)\n            return ans\n        if len(s) == len(t):\n            ans += 1\n            if len(s) == 0:\n                ans += 1\n            if len(t) == 0:\n                ans += 1\n            if len(s)!= 0 and len(t) == 0:\n                ans += 1\n            if len(s)!= 0 and len(t)!= 0:\n                ans += 1\n            ans = ans % (10 ** 9 + 7)\n            print(ans)\n            return ans\n        if len(s) == len(t):\n            ans += 1\n            if len(s) == 0:\n                ans += 1\n            if len(t) == 0:\n                ans += 1\n            if len(s)!= 0 and len(t) == 0:\n                ans += 1\n            if len(s)!= 0 and len(t)!= 0:\n                ans += 1\n            ans = ans % (10 ** 9 + 7)\n            print(ans)\n            return ans\n        if len(s) == len(t):\n            ans += 1\n            if len(s) == 0:\n                ans += 1\n            if len(t) == 0:\n                ans += 1\n            if len(s)!= 0 and len(t) == 0:\n                ans += 1\n            if len(s)!= 0 and len(t)!= 0:\n                ans += 1\n            ans = ans % (10 ** 9 + 7)\n            print(ans)\n            return ans\n        if len(s) == len(t):\n            ans += 1\n            if len(s) == 0:\n                ans += 1\n            if len(t) == 0:\n                ans += 1\n            if len(s)!= 0 and len(t) == 0:\n                ans += 1\n            if len(s)!= 0 and len(t)!= 0:\n                ans += 1\n            ans = ans % (10 ** 9 + 7)\n            print(ans)\n            return ans\n        if len(s) == len(t):\n            ans += 1\n            if len(s) == 0:\n                ans += 1\n            if len(t) == 0:\n                ans += 1\n            if len(s)!= 0 and len(t) == 0:\n                ans += 1\n            if len(s)!= 0 and len(t)!= 0:\n                ans += 1\n            ans = ans % (10 ** 9 + 7)\n            print(ans)\n            return ans\n        if len(s) == len(t):\n            ans += 1\n            if len(s) == 0:\n                ans += 1\n            if len(t) == 0:\n                ans += 1\n            if len(s)!= 0 and len(t) == 0:\n                ans += 1\n            if len(s)!= 0 and len(t)!= 0:\n                ans += 1\n            ans = ans % (10 ** 9 + 7)\n            print(ans)\n            return ans\n        if len(s) == len(t):\n            ans += 1\n            if len(s) == 0:\n                ans += 1\n            if len(t) == 0:\n                ans += 1\n            if len(s)!= 0 and len(t) == 0:\n                ans += 1\n            if len(s)!= 0 and len(t)!= 0:\n                ans += 1\n            ans = ans % (10 ** 9 + 7)\n            print(ans)\n            return ans\n        if len(s) == len(t):\n            ans += 1\n            if len(s) == 0:\n                ans += 1\n            if len(t) == 0:\n                ans += 1\n            if len(s)!= 0 and len(t) == 0:\n                ans += 1\n            if len(s)!= 0 and len(t)!= 0:\n                ans += 1\n            ans = ans % (10 ** 9 + 7)\n            print(ans)\n            return ans\n        if len(s) == len(t):\n            ans += 1\n            if len(s) == 0:\n                ans += 1\n            if len(t) == 0:\n                ans += 1\n            if len(s)!= 0 and len(t) == 0:\n                ans += 1\n            if len(s)!= 0 and len(t)!= 0:\n                ans += 1\n            ans = ans % (10 ** 9 + 7)\n            print(ans)\n            return ans\n        if len(s) == len(t):\n            ans += 1\n            if len(s) == 0:\n                ans += 1\n            if len(t) == 0:\n                ans += 1\n            if len(s)!= 0 and len(t) == 0:\n                ans += 1\n            if len(s)!= 0 and len(t)!= 0:\n                ans += 1\n            ans = ans % (10 ** 9 + 7)\n            print(ans)\n            return ans\n        if len(s) == len(t):\n            ans += 1\n            if len(s) == 0:\n                ans += 1\n            if len(t) == 0:\n                ans += 1\n            if len(s)!= 0 and len(t) == 0:\n                ans += 1\n            if len("
    },
    {
        "number": 4265,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    str = stdin.strip()\n    s = ''.join(sorted(str))\n    t = s[1:].replace('e', 'f')\n    if len(t) > 1:\n        print(int(t))\n    else:\n        print(0)\nsolution(\"cupofcoffee\")\n'''\n"
    },
    {
        "number": 4265,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n  n, k = list(map(int, stdin.split()))\n  while n:\n    first = n % 10\n    n = n // 10\n    second = first % 10\n    n = n // 10\n    third = second % 10\n    n = n // 10\n    fourth = third % 10\n    n = n // 10\n    fifth = fourth % 10\n    n = n // 10\n    sixth = fifth % 10\n    n = n // 10\n    eighth = sixth % 10\n    n = n // 10\n    ninth = eighth % 10\n    n = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth = n // 10\n    ninth"
    },
    {
        "number": 4265,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    answer = 0\n    stdin = stdin.replace('cup', 'hot')\n    stdin = stdin.replace('coffee', 'hottea')\n    stdin = stdin.replace('coffe', 'hottea')\n    stdin = stdin.replace('coffee', 'hotte')\n    stdin = stdin.replace('hot', 't')\n    stdin = stdin.replace('coffee', 't')\n    stdin = stdin.replace('hottea', 't')\n    stdin = stdin.replace('coffee', 't')\n    stdin = stdin.replace('hot', 't')\n    stdin = stdin.replace('coffte', 't')\n    stdin = stdin.replace('hotte', 't')\n    stdin = stdin.replace('coffee', 't')\n    stdin = stdin.replace('hottea', 't')\n    stdin = stdin.replace('coffee', 't')\n    answer = len(stdin)\n    return answer\n    pass\n\"\"\""
    },
    {
        "number": 4265,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4266,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    global k, X\n    k, X = map(int, stdin.split())\n    N = int(stdin.split(' ')[1])\n    stones = [int(s) for s in stdin.split(' ')[2:2*N]]\n    answer = []\n    for stone in stones:\n        if stone > 100 or stone < 0:\n            continue\n        for idx in range(len(stones)):\n            if stones[idx] == stone:\n                if idx+1 == N:\n                    answer.append(str(stones[:idx]))\n                    break\n                else:\n                    answer.append(str(stones[:idx]+[stone])+' ')\n                    stones[idx] = stone\n                    stones[idx+1] = stone+1\n                    break\n            elif stones[idx] > stone:\n                break\n            elif stones[idx] < stone:\n                break\n    return''.join(answer)"
    },
    {
        "number": 4266,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    k, x = map(int, stdin.split())\n    \n    # X\uac00 K\ubcf4\ub2e4 \uc791\uc73c\uba74 -> X\ubc88\uc9f8 \uc7a5\ub09c\ub9ac\uc2a4\ud2b8\ub97c \ucc3e\uc74c\n    if x < k:\n        return \"\".join(map(str, range(x+1,k+1)))\n    \n    # X\uac00 K\ubcf4\ub2e4 \ud06c\uba74 -> X\ubc88\uc9f8 \uc7a5\ub09c\ub9ac\uc2a4\ud2b8\ub97c \ucc3e\uc74c\n    elif x > k:\n        return \"\".join(map(str, range(k+1,x+1)))\n    \n    # X\uac00 K\ubcf4\ub2e4 \uac19\uc73c\uba74 -> X\ubc88\uc9f8 \uc7a5\ub09c\ub9ac\uc2a4\ud2b8\ub97c \ucc3e\uc74c\n    elif x == k:\n        return str(x)\n    \n    # X\uac00 K\ubcf4\ub2e4 \uac19\uc544\uc57c \ud558\ub294 \uc810\uc218\uac00 0\uc774\uba74 -> X\ubc88\uc9f8 \uc7a5\ub09c\ub9ac\uc2a4\ud2b8\ub97c \ucc3e\uc74c\n    elif x == 0:\n        return str(x)\n    \n    # X\uac00 K\ubcf4\ub2e4 \uac19\uc9c0 \uc54a\uc73c\uba74 -> X\ubc88\uc9f8 \uc7a5\ub09c\ub9ac\uc2a4\ud2b8\ub97c \ucc3e\uc74c\n    else:\n        return \"\".join(map(str, range(x+1,k+1)))\n"
    },
    {
        "number": 4266,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    for k, x in enumerate(list(map(int, stdin.split()))):\n        if x == 0:\n            print(k + 1, end=\" \")\n        elif x == 1:\n            print(k + 1, end=\" \")\n            print(100000 - k)\n        elif x == 2:\n            print(100000 - k, end=\" \")\n            print(10000 - k)\n        else:\n            print(10000 - k, end=\" \")\n            print(k + 1)\n    return \"\"\n\n-----Explanation-----\nThe rules are described as follow:\n\nK=1\n\nX=7\n\n1. There is only one stone.\n2. The number at the coordinate X is painted black.\n3. The stones at coordinate 5, 6, and 7 have been painted black.\n4. The stones at coordinate 6, 7 and 8 have been painted black.\n5. The stone at coordinate 7 is painted black.\n6. The stone at coordinate 8 is painted black.\n7. The three stones at coordinates 5, 6, and 7 have been painted black.\n8. The three stones at coordinates 6, 7 and 8 have been painted black.\n\nThe rules are all considered after the first k consecutive stones are painted black.\n\nTo get all these cases, we need at least k consecutive stones painted black.\n\nFor example, given K=3 and X=7, we need all three cases.\n\n----Time Complexity----\nWe need O(K) time for each k values.\nWe need O(K) space for k values.\n\n----Space Complexity----\nWe need O(K) space for each k values.\nWe need O(K) space for k values.\n\n-----Submissions-----\nYour submission should have O(K) time and O(K) space.\n\n-----Contributors-----\nReferral code to Codewars contest page: https://codewars.com/kata/56b0b834f9b79b7b2000002a\n\"\"\"\n\ndef"
    },
    {
        "number": 4266,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Here we have to find the coordinates of the Kstones.\n    \"\"\"\n    return str(stdin.split())[1:-1].replace(' ', '')\n\"\"\"\nclass Solution:\n    def KConsts(self, N: int, K: int) -> str:\n        if K >= N:\n            return '0' * (N - K) + '1' * K\n        return '0' * (N - K) + '1' * K + '0' * K + '1' * N\n\"\"\""
    },
    {
        "number": 4266,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    K, X = map(int, stdin.split())\n    \n    answer = []\n    \n    def get_next(idx):\n        if len(answer) == K:\n            return\n        for i in range(idx, K):\n            answer.append(i+1)\n            get_next(i)\n        \n    get_next(X)\n    \n    for i in range(K):\n        if answer[i]!= i:\n            answer.remove(i)\n    answer = answer[::-1]\n    answer.sort()\n    \n    print(*answer)\n    return answer"
    },
    {
        "number": 4266,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    1. create a list, it's size is K*3\n    2. create a variable, it's size is K*3\n    3. for i in range(K):\n        [1, 5, 6, 7, 8, 9]\n        [4, 2, 1, 3, 0, 5]\n        [5, 6, 7, 8, 9, 2]\n        [7, 8, 9, 1, 3, 2]\n    4. fill the list with all possible coordinates\n    5. sort the list\n    6. return the list\n    '''\n    # K*3\n    # create a list, it's size is K*3\n    # create a variable, it's size is K*3\n    # for i in range(K):\n    #     [1, 5, 6, 7, 8, 9]\n    #     [4, 2, 1, 3, 0, 5]\n    #     [5, 6, 7, 8, 9, 2]\n    #     [7, 8, 9, 1, 3, 2]\n    # create a variable, it's size is K*3\n    # for i in range(K):\n    #     [5, 6, 7, 8, 9, 2]\n    #     [7, 8, 9, 1, 3, 2]\n    #     [5, 6, 7, 8, 9, 2]\n    # create a variable, it's size is K*3\n    # for i in range(K):\n    #     [7, 8, 9, 1, 3, 2]\n    #     [5, 6, 7, 8, 9, 2]\n    #     [7, 8, 9, 1, 3, 2]\n    # create a variable, it's size is K*3\n    # for i in range(K):\n    #     [7, 8, 9, 1, 3, 2]\n    #     [5, 6, 7, 8, 9, 2]\n    #     [5, 6, 7, 8, 9, 2]\n    # create a variable, it's size is K*3\n    # for i in range(K):\n    #     [0, 1, 4, 9]\n    #     [0, 1, 4, 9]\n    #     [0, 1, 4, 9]\n    #     [0, 1, 4, 9]\n    # create a variable, it's size is K*3\n    # for i in range(K):\n    #     [0, 1, 4, 9]\n    #     [0, 1, 4, 9]\n    #     [0, 1, 4, 9]\n    #     [0, 1, 4, 9]\n    # create a variable, it's size is K*3\n    # for i in range(K):\n    #     [0, 1, 4, 9]\n    #     [0, 1, 4, 9]\n    #     [0, 1, 4, 9]\n    # create a variable, it's size is K*3\n    # for i in range(K):\n    #     [0, 1, 4, 9]\n    #     [0, 1, 4, 9]\n    #     [0, 1, 4, 9]\n    # create a variable, it's size is K*3\n    # for i in range(K):\n    #     [0, 1, 4, 9]\n    #     [0, 1, 4, 9]\n    #     [0, 1, 4, 9]\n    # create a variable, it's size is K*3\n    # for i in range(K):\n    #     [0, 1, 4, 9]\n    #     [0, 1, 4, 9]\n    #     [0, 1, 4, 9]\n    #     [0, 1, 4, 9]\n    # create a variable, it's size is K*3\n    # for i in range(K):\n    #     [0, 1, 4, 9]\n    #     [0, 1, 4, 9]\n    #     [0, 1, 4, 9]\n    #     [0, 1, 4, 9]\n    #     [0, 1, 4, 9]\n    #     [0, 1, 4, 9]\n    #     [0, 1, 4, 9]\n    # create a variable, it's size is K*3\n    # for i in range(K):\n    #     [0, 1, 4, 9]\n    #     [0, 1, 4, 9]\n    #     [0, 1, 4, 9]\n    #     [0, 1, 4, 9]\n    #     [0, 1, 4, 9]\n    #     [0, 1, 4, 9]\n    #     [0, 1, 4, 9]\n    #     [0, 1, 4, 9]\n    #     [0, 1, 4, 9]\n    #     [0, 1, 4, 9]\n    #     [0, 1, 4, 9]\n    #     [0, 1, 4, 9]\n    #     [0, 1, 4, 9]\n    #     [0, 1, 4, 9]\n    #     [0, 1, 4, 9]\n    #     [0, 1, 4, 9]\n    #     [0, 1, 4, 9]\n    #     [0, 1, 4, 9]\n    #     [0, 1, 4, 9]\n    #     [0, 1, 4, 9]\n    #     [0, 1, 4, 9]\n    #     [0, 1, 4, 9]\n    #     [0, 1, 4, 9]\n    #     [0, 1, 4, 9]\n    #     [0, 1, 4, 9]\n    #     [0, 1, 4, 9]\n    #     [0, 1, 4, 9]\n    #     [0, 1, 4, 9]\n    #     [0, 1, 4, 9]\n    #     [0, 1, 4, 9]\n    #     [0, 1, 4, 9]\n    #     [0, 1, 4, 9]\n    #     [0, 1, 4, 9]\n    #     [0, 1, 4, 9]\n    #     [0, 1, 4, 9]\n    #     [0, 1, 4, 9]\n    #     [0, 1, 4, 9]\n    #     [0, 1, 4, 9]\n    #     [0, 1, 4, 9]\n    #     [0, 1, 4, 9]\n    #     [0, 1, 4, 9]\n    #     [0, 1, 4, 9]\n    #     [0, 1, 4, 9]\n    #     [0, 1, 4, 9]\n    #     [0, 1, 4, 9]\n    #     [0, 1, 4, 9]\n    #     [0, 1, 4, 9]\n    #     [0, 1, 4, 9]\n    #     [0, 1, 4, 9]\n    #     [0, 1, 4, 9]\n    #     [0, 1, 4, 9]\n    #     [0, 1, 4, 9]\n    #     [0, 1, 4, 9]\n    #     [0, 1, 4, 9]\n    #     [0, 1"
    },
    {
        "number": 4266,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 4266,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    K, X = map(int, stdin.split())\n    stones = []\n    \n    for _ in range(K):\n        stones.append(list(map(int, stdin.split())))\n    \n    answer = []\n    \n    def bfs(depth, x, y):\n        for d in [(1, 0), (-1, 0), (0, 1), (0, -1)]:\n            nx, ny = x + d[0], y + d[1]\n            if 0 <= nx < K and 0 <= ny < X:\n                if (nx, ny) not in answer and (nx, ny) not in stones:\n                    answer.append((nx, ny))\n                    bfs(depth + 1, nx, ny)\n                    \n    for i in range(K):\n        bfs(0, i, 0)\n        \n    for i in range(K):\n        bfs(0, i, i)\n        \n    return '\\n'.join(map(str, answer))"
    },
    {
        "number": 4266,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    k, x = [int(x) for x in stdin.split()]\n    stones = []\n    for i in range(k):\n        stones.append(list(map(int, input().split())))\n    print(*sorted(stones), sep=' ')\n    return ''"
    },
    {
        "number": 4266,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(int(stdin)):\n        k, x = map(int, stdin.split())\n        if k == 0:\n            print(x, end=\" \")\n        else:\n            for j in range(x, x + k):\n                print(j, end=\" \")\n            print()\n    return \"\"\n\"\"\"\n\nclass Solution:\n    def search(self,arr,target):\n        lo,hi = 0,len(arr)-1\n        while lo <= hi:\n            mid = (lo + hi)//2\n            if arr[mid] >= target:\n                hi = mid - 1\n            elif arr[mid] <= target:\n                lo = mid + 1\n            else:\n                lo+=1\n        return lo\n    \n    def find(self,arr,target):\n        lo,hi = 0,len(arr)-1\n        while lo <= hi:\n            mid = (lo + hi)//2\n            if arr[mid] < target:\n                lo = mid + 1\n            elif arr[mid] > target:\n                hi = mid - 1\n            else:\n                lo+=1\n        return lo\n\narr = [1,2,3,4,5,6,7,8,9,10]\ntarget = 6\n\nsol = Solution()\nprint(sol.find(arr,target))"
    },
    {
        "number": 4267,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    temperature = int(stdin.rstrip())\n    if temperature >= 30:\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 4267,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    str_input = stdin.split()\n    answer = ''\n    for i in range(len(str_input)):\n        if int(str_input[i]) in range(40, 60):\n            answer += 'Yes'\n        else:\n            answer += 'No'\n    return answer\n\ndef"
    },
    {
        "number": 4267,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    (x, y, z) = map(int, stdin.split())\n    answer = ''\n    \n    if x > y:\n        answer = 'No'\n        \n    elif y > z:\n        answer = 'No'\n        \n    else:\n        answer = 'Yes'\n        \n    return answer\n\nprint(solution(\"25\"))\n"
    },
    {
        "number": 4267,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    X = int(input())\n    if X >= 0 and X < 40:\n        return \"Yes\"\n    else:\n        return \"No\"\n\n\ndef"
    },
    {
        "number": 4267,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    X = int(input())\n    if (X>=30 or X<=0):\n        return \"No\"\n    elif (30 <= X <= 40):\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4267,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    if X > 30 or X < 0:\n        return 'NO'\n    if X <= 40:\n        return 'YES'\n    else:\n        return 'NO'\n"
    },
    {
        "number": 4267,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    answer = ''\n    for i in range(int(stdin.strip())):\n        X = int(stdin.strip())\n        if 20 <= X <= 80:\n            answer += 'Yes'\n        elif 30 <= X <= 60:\n            answer += 'No'\n        else:\n            answer += 'No'\n    return answer\n"
    },
    {
        "number": 4267,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    if X > 40 or X < 0:\n        return 'No'\n    elif X > 30:\n        return 'Yes'\n    else:\n        return 'Yes'\n"
    },
    {
        "number": 4267,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    if 40 <= int(stdin) <= 40:\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 4267,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin.rstrip())\n    if (X == 30 or X > 40):\n        print('No')\n    elif(X > 30):\n        print('Yes')\n    else:\n        print('Yes')\n\n\ndef"
    },
    {
        "number": 4268,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, D = map(int, stdin.split())\n    X = [list(map(int, input().split())) for i in range(N)]\n    ans = []\n    for i in range(N-1):\n        for j in range(i+1, N):\n            for k in range(j+1, N):\n                dist = abs(X[i][0] - X[j][0]) ** 2 + abs(X[i][1] - X[j][1]) ** 2\n                if dist <= D:\n                    ans.append([i, j, k])\n    return str(len(ans)) + '\\n' + str(len(ans) - len(ans) // 2)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4268,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, d, x = map(int, stdin.split())\n    x = set(map(int, x.split()))\n    \n    for i in range(n-1):\n        for j in range(i+1, n):\n            if len(set(map(int, x-set(map(int, x)))) & set(map(int, x-set(map(int, x)))) & set(map(int, x-set(map(int, x)))) & set(map(int, x-set(map(int, x))))) == len(x):\n                print(1)\n                return\n    print(len(x))\n    return"
    },
    {
        "number": 4268,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, D = map(int, stdin.split())\n    X = [int(x) for x in stdin.split()]\n    X.sort()\n    count = 0\n    for i in range(0, len(X)-1):\n        for j in range(i+1, len(X)):\n            a = abs(X[i] - X[j])\n            if a!= D:\n                count += 1\n    return str(count)\n\"\"\"\n\nimport collections\nfrom math import sqrt\n\nclass Solution:\n    def countPairs(self, arr: List[int]) -> int:\n        \n        class Node:\n            def __init__(self, value):\n                self.value = value\n                self.next = None\n                \n        class LinkedList:\n            def __init__(self):\n                self.head = None\n                \n            def insertAtHead(self, value):\n                if not self.head:\n                    self.head = Node(value)\n                else:\n                    self.head.next = Node(value)\n                return self.head\n                \n            def insertAtTail(self, value):\n                curr = self.head\n                while curr.next!= None:\n                    curr = curr.next\n                curr.next = Node(value)\n                return self.head\n            \n            def delete(self, index):\n                if index < 0 or index >= self.length():\n                    return None\n                else:\n                    if index == 0:\n                        curr = self.head\n                        self.head = self.head.next\n                    elif index == self.length()-1:\n                        curr = self.head\n                        self.head = curr.next\n                    else:\n                        curr = self.head\n                        curr.next = curr.next.next\n                    return curr\n                \n            def length(self):\n                count = 0\n                curr = self.head\n                while curr!= None:\n                    count += 1\n                    curr = curr.next\n                return count\n            \n            def __str__(self):\n                curr = self.head\n                str1 = \"\"\n                while curr!= None:\n                    str1 += str(curr.value) + \" \"\n                    curr = curr.next\n                return str1\n            \n        length = self.length()\n        \n        def insert_pairs(arr):\n            if len(arr) == 0:\n                return 0\n            if len(arr) < 2:\n                return self.countPairs(arr)\n            \n            left = arr[0]\n            right = arr[1]\n            \n            count = 0\n            #print(left)\n            #print(right)\n            \n            if left < right:\n                count = self.countPairs(arr[1:])\n                count += self.countPairs(arr[:left])\n                return count\n            \n            if left == right:\n                count = self.countPairs(arr[1:])\n                count += self.countPairs(arr[:right])\n                return count\n            \n            return self.countPairs(arr[1:])\n            \n        \n        arr = list(map(int, arr))\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        "
    },
    {
        "number": 4268,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, d = map(int, stdin.split())\n    d = d**2\n    cnt = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if d - abs(i - j) < d - abs(i - j + 1):\n                cnt += 1\n    return str(cnt)\n\nn, d = map(int, input().split())\nprint(solution(input()))"
    },
    {
        "number": 4268,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, d = map(int, stdin.split())\n    x_1 = list(map(int, stdin.split()))\n    x_2 = list(map(int, stdin.split()))\n    x_3 = list(map(int, stdin.split()))\n    x_4 = list(map(int, stdin.split()))\n    x_5 = list(map(int, stdin.split()))\n    x_6 = list(map(int, stdin.split()))\n    x_7 = list(map(int, stdin.split()))\n    x_8 = list(map(int, stdin.split()))\n    x_9 = list(map(int, stdin.split()))\n    x_10 = list(map(int, stdin.split()))\n    for i in x_1:\n        for j in x_2:\n            for k in x_3:\n                for l in x_4:\n                    for m in x_5:\n                        for n in x_6:\n                            for o in x_7:\n                                for p in x_8:\n                                    for q in x_9:\n                                        for r in x_10:\n                                            if i!= j and i!= k and i!= l and i!= m and i!= n and i!= o and i!= p and i!= q and i!= r:\n                                                if d ** 2 - (i ** 2 + j ** 2 + k ** 2 + l ** 2 + m ** 2 + n ** 2 + o ** 2 + p ** 2 + q ** 2 + r ** 2) == 0:\n                                                    return str(1)\n    return str(0)"
    },
    {
        "number": 4268,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, d = map(int, stdin.split())\n    X, Y = [], []\n    for _ in range(n):\n        x, y = map(int, stdin.split())\n        X.append(x)\n        Y.append(y)\n    X = sorted(X)\n    Y = sorted(Y)\n    index = 0\n    while index < len(X):\n        x, y = X[index], Y[index]\n        dist = (x-y)**2\n        if dist == d:\n            return str(1)\n        if dist < d:\n            index += 1\n        else:\n            index = index + 1\n    return str(0)\n\n-----Sample Input-----\n2\n3\n2 1\n5 7\n-2 8\n\n-----Sample Output-----\n0\n\nThe number of pairs with an integer distance is zero, as follows:\n - The distance between the first point and the second point is 0, which is a pair.\n - The distance between the second point and the third point is 0, which is a pair.\n - The distance between the third point and the first point is 0, which is a pair.\n'''"
    },
    {
        "number": 4268,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, D = map(int, stdin.split())\n    pairs = 0\n    for i in range(N-1):\n        for j in range(i+1,N):\n            pairs += (abs(D-sqrt(i*i+j*j)))**2\n    return str(pairs)\n\"\"\"\nfrom math import sqrt\nfrom sys import stdin\n\n\ndef"
    },
    {
        "number": 4268,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, D = [int(x) for x in stdin.split()]\n    X_i = [[int(x) for x in stdin.split()[i + 1:i + 1 + D]] for i in range(N)]\n    X_j = [[int(x) for x in stdin.split()[i + 1 + D:]] for i in range(N)]\n    X_ij = list(itertools.product(*X_i))\n    X_j_i = list(itertools.product(*X_j))\n    count = 0\n    for i, j in itertools.product(X_j_i, X_ij):\n        i_x = list(zip(i, *i))\n        j_x = list(zip(j, *j))\n        for i in range(len(i_x)):\n            for j in range(len(j_x)):\n                if i_x[i]!= j_x[j]:\n                    break\n            else:\n                count += 1\n    return str(count)\n'''"
    },
    {
        "number": 4268,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # n = int(stdin.strip())\n    # arr = [list(map(int, input().split())) for _ in range(n)]\n    # D = int(stdin.strip())\n    # arr = sorted(arr)\n    # for i in range(len(arr) - 1):\n    #     for j in range(i + 1, len(arr)):\n    #         for k in range(j + 1, len(arr)):\n    #             if abs(arr[i][0] - arr[j][0]) + abs(arr[i][1] - arr[j][1]) <= D:\n    #                 # print(i, j, k)\n    #                 print(i, j, k)\n    #                 print(arr[i][0] - arr[j][0])\n    #                 print(arr[i][1] - arr[j][1])\n    #                 print(arr[i][0] * arr[j][1] - arr[i][1] * arr[j][0])\n    #                 return 'YES'\n    n = int(stdin.strip())\n    arr = [list(map(int, input().split())) for _ in range(n)]\n    D = int(stdin.strip())\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if abs(arr[i][0] - arr[j][0]) + abs(arr[i][1] - arr[j][1]) <= D:\n                    # print(i, j, k)\n                    print(i, j, k)\n                    print(arr[i][0] - arr[j][0])\n                    print(arr[i][1] - arr[j][1])\n                    print(arr[i][0] * arr[j][1] - arr[i][1] * arr[j][0])\n                    return 'YES'\n    return 'NO'\n\nn = int(input())\narr = [list(map(int, input().split())) for _ in range(n)]\nD = int(input())\nprint(solution(stdin))\n"
    },
    {
        "number": 4268,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def get_pair_distance(point_1, point_2):\n        return (point_1[0] - point_2[0]) ** 2 + (point_1[1] - point_2[1]) ** 2\n\n    def get_pair_distance_rec(point_1, point_2):\n        if point_1[0] == point_2[0]:\n            if point_1[1] < point_2[1]:\n                return get_pair_distance(point_1, point_2)\n            else:\n                return get_pair_distance(point_2, point_1)\n        elif point_1[1] == point_2[1]:\n            if point_1[0] < point_2[0]:\n                return get_pair_distance(point_1, point_2)\n            else:\n                return get_pair_distance(point_2, point_1)\n        else:\n            return get_pair_distance(point_1, point_2)\n\n    N = int(stdin.readline().rstrip())\n    D = int(stdin.readline().rstrip())\n    X = []\n    for _ in range(N):\n        X.append([int(n) for n in stdin.readline().rstrip().split()])\n    X.sort()\n    result = 0\n    for i in range(N):\n        for j in range(i, N):\n            for k in range(j, N):\n                distance = get_pair_distance(X[i], X[j])\n                if get_pair_distance_rec(X[j], X[k]) < distance:\n                    result += 1\n    print(result)\n"
    },
    {
        "number": 4269,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    hard = input()\n    soft = input()\n    \n    def is_same(str1, str2):\n        if len(str1) == len(str2):\n            for i in range(len(str1)):\n                if hard[i]!= soft[i]:\n                    return False\n        return True\n    \n    def check_valid(s):\n        for i in range(len(s)):\n            if s[i] == s[i+1]:\n                return False\n        return True\n    \n    if is_same(hard, soft):\n        return \"Good\"\n    elif not check_valid(hard):\n        return \"Bad\"\n    else:\n        return \"Bad\"\n'''\ndef"
    },
    {
        "number": 4269,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    s = s.split()\n    s = int(''.join(s))\n    if s < 100:\n        return 'Bad'\n    elif s % 100 == 0:\n        return 'Good'\n    else:\n        return 'Bad'\n"
    },
    {
        "number": 4269,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split(':')\n    print(s[0])\n    print(s[1])\n    print(s[2])\n    return s[0]\n\ndef"
    },
    {
        "number": 4269,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    numbers = []\n    for i in stdin:\n        if i.isdigit() == True:\n            numbers.append(int(i))\n    if len(numbers) >= 2:\n        for i in range(0, len(numbers)):\n            if numbers[i] == numbers[i+1]:\n                numbers[i] = 0\n                numbers[i+1] = 0\n            else:\n                numbers[i] += 1\n        for i in range(0, len(numbers)):\n            if numbers[i] == 1:\n                numbers[i] = 0\n    else:\n        numbers[0] = 0\n    return 'Bad' if numbers[0] == 1 else 'Good'"
    },
    {
        "number": 4269,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    codes = [int(x) for x in stdin.split()]\n    codes[1] = (codes[1] % 10) + codes[0]\n    if codes[2] % 10 == codes[0] % 10:\n        return 'Good'\n    else:\n        return 'Bad'\n"
    },
    {
        "number": 4269,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if not s:\n        return ''\n    l = len(s)\n    if l == 1:\n        return s\n    if s[0] == s[1] or s[0] == '0' or s[1] == '0':\n        return 'Bad'\n    elif l % 2!= 0:\n        return 'Bad'\n    elif s[0:2] == s[2:l]:\n        return 'Good'\n    else:\n        return 'Bad'\n"
    },
    {
        "number": 4269,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return 'Good' if len(stdin) == 2 else 'Bad'\n"
    },
    {
        "number": 4269,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    _str = str(stdin)\n    return 'Bad' if len(_str) % 2!= 0 else 'Good'\n\n\n(1)\u041f\u043e\u0440\u0430\u0431\u043e\u0442\u0430\u0439\u0442\u0435 \u0441 \u043f\u0435\u0440\u0432\u044b\u043c \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u043c \u0441\u0442\u0440\u043e\u043a\u0438 \"!\" \u0438 \"?\", \u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0438\u0439 \u0438\u0437 \u0441\u0442\u0440\u043e\u0447\u043d\u044b\u0445 \u043b\u0430\u0442\u0438\u043d\u0441\u043a\u0438\u0445 \u0431\u0443\u043a\u0432 \u0432 \u043e\u0431\u0440\u0430\u0437\u0435 \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0439\u0442\u0435, \u0447\u0442\u043e \u0441\u0443\u043c\u043c\u0430 \u0432 \u043e\u0431\u0440\u0430\u0437\u0435 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0431\u043e\u043b\u044c\u0448\u0435 \u0447\u0435\u043c \u0438\u043b\u0438 \u0440\u0430\u0432\u043d\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0441\u0442\u0440\u043e\u043a\u0438.\n\u0415\u0441\u043b\u0438 \u0435\u0441\u0442\u044c \u043f\u0435\u0440\u0432\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u043d\u0435 \u0437\u0430\u043f\u0438\u0441\u0430\u043d, \u0442\u043e \u0432\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0441\u043b\u043e\u0432\u043e \"!\" \u0438 \u0441\u043b\u043e\u0432\u043e \"?\" (\u043d\u0435 \u043d\u0443\u0436\u043d\u043e \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u0442\u044c \u0441\u043e\u0432\u043f\u0430\u0434\u0435\u043d\u0438\u0435 \u0441 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u043e\u0439 \u0432 \u0434\u0430\u043d\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435).\n\u0415\u0441\u043b\u0438 \u0435\u0441\u0442\u044c \u043f\u0435\u0440\u0432\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u043d\u0435 \u0437\u0430\u043f\u0438\u0441\u0430\u043d, \u0442\u043e \u0432\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0441\u043b\u043e\u0432\u043e \"?\" (\u043d\u0435 \u043d\u0443\u0436\u043d\u043e \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u0442\u044c \u0441\u043e\u0432\u043f\u0430\u0434\u0435\u043d\u0438\u0435 \u0441 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u043e\u0439 \u0432 \u0434\u0430\u043d\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435).\n\u0415\u0441\u043b\u0438 \u043d\u0430 \u0432\u0445\u043e\u0434 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043f\u0440\u043e\u0448\u043b\u0430 \u0443\u0441\u043f\u0435\u0448\u043d\u043e, \u0442\u043e \u0432\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \"Good\".\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4269,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin\n    # S = input()\n    for i in range(len(S)):\n        if len(S[i:i+2]) == 2:\n            print('Bad')\n            return\n        elif len(S[i:i+2]) == 3:\n            print('Good')\n            return\n    print('Bad')\n    return"
    },
    {
        "number": 4269,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    nums = list(stdin.split('\\n'))\n    for i in range(1, len(nums)):\n        nums[i] = nums[i].split()\n        nums[i][1] = int(nums[i][1])\n        nums[i][1] = str(nums[i][1])\n        if nums[i][1] == nums[i - 1][1] and nums[i][1] == nums[i - 2][1]:\n            return 'Bad'\n        else:\n            return 'Good'"
    },
    {
        "number": 4270,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *ingredients = map(int, stdin.split())\n    ans = 0\n    prev_max = -9999999\n    for i in range(n):\n        val = 0\n        for j in range(len(ingredients)):\n            val += ingredients[j] * (j + 1)\n        \n        if prev_max == -9999999:\n            prev_max = val\n        else:\n            if val < prev_max:\n                prev_max = val\n    if prev_max!= 0:\n        print(prev_max)\n    else:\n        print(0)\n    return str(prev_max)\n"
    },
    {
        "number": 4270,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin[0])\n    v = list(map(int,stdin[1].split()))\n    v.sort()\n    if N == 1:\n        return str(v[0])\n    if N == 2:\n        return str(v[0]) + str(v[1])\n    for i in range(N-2):\n        for j in range(i+1,N-1):\n            v[i],v[j] = v[j],v[i]\n    for i in range(N-2):\n        v[i+1],v[i+2] = v[i+2],v[i+1]\n    return str(sum(v)/2)"
    },
    {
        "number": 4270,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, v_1, v_2, v_3, v_4 = [int(i) for i in stdin.split()]\n    _v_1 = (v_1 / 2) + 1\n    _v_2 = (v_2 / 2) + 1\n    _v_3 = (v_3 / 2) + 1\n    _v_4 = (v_4 / 2) + 1\n    v_4 = v_4 * _v_1\n    v_1 = v_1 * _v_2\n    v_2 = v_2 * _v_3\n    v_3 = v_3 * _v_4\n    _v = v_4 + v_1 + v_2 + v_3\n    _v = _v // 2\n    return f\"{_v:.3f}\".replace(\".\", \",\")"
    },
    {
        "number": 4270,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    values = [int(i) for i in stdin.split()]\n    v_1, v_2 = values[0], values[1]\n    v_1 = v_1 / 2\n    v_2 = v_2 / 2\n    \n    for i in range(N-1):\n        v_1, v_2 = v_2, (v_2+v_1) / 2\n    \n    return str(abs(v_2))\n"
    },
    {
        "number": 4270,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n  N,v=map(int,stdin.split())\n  print(int(str(v/2)+str(v%2)+str(v//2)))\n  return str(int(str(v/2)+str(v%2)+str(v//2)))\n\n-----Constraints-----\n - 1 \\leq N \\leq 50\n - 1 \\leq v_i \\leq 1000\n - All values in input are integers.\n\n-----Test Cases-----\nTest 1:\nInput:\n2\n3 4\nOutput:\n4.5\nTest 2:\nInput:\n2\n3 1\nOutput:\n1.5\nTest 3:\nInput:\n2\n1 1\nOutput:\n1.5\nTest 4:\nInput:\n2\n2 2\nOutput:\n2.5\nTest 5:\nInput:\n2\n3 4\nOutput:\n3.5\nTest 6:\nInput:\n2\n3 2\nOutput:\n2.0\nTest 7:\nInput:\n2\n4 3\nOutput:\n4.0\nTest 8:\nInput:\n1 2\nOutput:\n2.5\nTest 9:\nInput:\n4\n4 4\nOutput:\n4.5\nTest 10:\nInput:\n3 2\nOutput:\n3.5\nTest 11:\nInput:\n2\n4\nOutput:\n2.5\nTest 12:\nInput:\n2\n2 4\nOutput:\n2.0\n\n-----Sample Input-----\n1 1\n1 2\nOutput:\n1.5\nSample Input:\n1 2\n2 1\nOutput:\n1.5\nSample Input:\n2 4\n2 4\nOutput:\n2.5\nSample Input:\n3 2\n3 4\nOutput:\n2.5\nSample Input:\n4 4\n2 3\nOutput:\n3.5\n\nTest cases:\nTest cases are from the examples and should pass without any other errors.\n\nTest cases:\nTest cases are from the examples and should fail due to a problem with the input data.\n\nTest cases:\nTest cases are from the examples and should fail due to a problem with the input data.\n'''"
    },
    {
        "number": 4270,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    N -= 1\n    v = [int(x) for x in stdin.split(\" \")]\n    return \"%.2f\" % (sum(v)/N)\n\"\"\"\nclass Solution:\n    def maxIngredient(self, num: int) -> str:\n        if not num:\n            return '0'\n        \n        # get index of first nonzero\n        i = 0\n        for j in range(1, len(num)):\n            if num[j] == 0:\n                i = j\n                break\n        \n        # for every item in num\n        while i < len(num):\n            if num[i] == 0:\n                # pop it so that all numbers are nonzero\n                num.pop(i)\n                # return the value of the first nonzero item\n                return \"%.2f\" % (sum(num)/i)\n            else:\n                # if number is zero, then return the value of the last nonzero item\n                return \"%.2f\" % (sum(num)/i)\n            i += 1\n        return '0'\n\"\"\""
    },
    {
        "number": 4270,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def cfun(n):\n        if n == 0:\n            return 0\n        else:\n            return n * cfun(n - 1)\n    N = int(stdin)\n    for i in range(N):\n        v_i, v_n = map(int, stdin.split(' '))\n        print(v_i, cfun(v_i))\n        print(v_n, cfun(v_n))\n    return max(cfun(N - 1), cfun(N - 2))\n"
    },
    {
        "number": 4270,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n  n = int(stdin.strip())\n  v = list(map(int, stdin.strip().split()))\n  v.sort(reverse=True)\n  sum_v = sum(v)\n  if len(v) == 2:\n    answer = v[0] + v[1] / 2\n    return answer\n  v.sort(reverse=False)\n  if v[-1]!= v[-2]:\n    answer = v[-1] + v[-2] / 2\n  else:\n    answer = v[-1] * (v[-2] - v[-1]) / 2\n    answer = answer + v[-1]\n  return answer / (sum_v / 2)"
    },
    {
        "number": 4270,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    ingredients = {}\n    for i in range(N):\n        tmp = stdin.strip()\n        ingredients[tmp[:len(tmp) - 1]] = eval(tmp[len(tmp) - 1:])\n    x, y = 0, 0\n    for i in ingredients:\n        v = ingredients[i]\n        if v % 2 == 0:\n            y = y + v\n            x = x + v / 2\n        else:\n            y = y + v * 3 / 2\n            x = x + v / 2\n    print(round(x))\n    print(round(y))\n    if abs(x - y) < 10 ** -5:\n        print(round(x))\n        print(round(y))\n    else:\n        print(round(x), \"^2\", round(y))\n        print(round(x), \"*2^\", round(y))\n    print(round(x), \"**2\", round(y))\n    return round(x)\n\nprint(solution(\"3 4 5\"))\nprint(solution(\"2 3 4 5\"))\nprint(solution(\"2 2\"))\nprint(solution
    },
    {
        "number": 4270,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    ingredients = list(map(int, stdin.split()))\n    N = len(ingredients)\n    if N < 1:\n        return '0'\n    v = []\n    v.append(sum(ingredients))\n    n = len(v)\n    for i in range(1, n+1):\n        v.append(sum(ingredients[:i]) / i)\n    max_val = max(v)\n    print(max_val)\n    for i in range(N):\n        if v[i] > max_val:\n            return str(max_val)\n    return str(max_val)\n\n'''''\n"
    },
    {
        "number": 4271,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B, C = map(int, stdin.split())\n    satisfaction = 0\n    for i in range(N):\n        if A <= i < B or A + i <= B + C:\n            satisfaction += B + C - A + 1\n        else:\n            satisfaction += (i + 1) - A\n    satisfaction += C\n    return str(satisfaction)"
    },
    {
        "number": 4271,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B, C = map(int, stdin.split())\n    A = A - 1\n    B = B - 1\n    C = C - 1\n    B_N, B_C = B, C\n    C_N, C_C = C, B\n    B_M, C_M = B, C\n    A_M, C_M = A, B\n    for _ in range(N):\n        A, B, C = map(int, stdin.split())\n        A_M, B_M, C_M, C_M = max(A_M, A), max(B_M, B), max(C_M, C), max(C_M, C)\n        B_N, C_N = B, C\n        C_N, C_C = C, B\n        B_C, C_C = B, C\n        A_N, B_N = A, B\n        C_N, C_C = C, A\n        B_C, C_C = B, A\n    A_N, B_N = max(A_N, A), max(B_N, B)\n    A_M, B_M = max(A_M, A), max(B_M, B)\n    B_M, C_M = max(B_M, B), max(C_M, C)\n    B_C, C_C = max(B_C, B), max(C_C, C)\n    A_C, B_C = max(A_C, A), max(B_C, B)\n    B_C, C_C = max(B_C, B), max(C_C, C)\n    B_N, C_N = max(B_N, B), max(C_N, C)\n    A_N, B_N = max(A_N, A), max(B_N, B)\n    A_M, B_M = max(A_M, A), max(B_M, B)\n    B_M, C_M = max(B_M, B), max(C_M, C)\n    A_M, B_M = max(A_M, A), max(B_M, B)\n    A_N, B_N = max(A_N, A), max(B_N, B)\n    C_N, C_C = max(C_N, C), max(C_C, C)\n    C_N, C_C = max(C_N, C), max(C_C, C)\n    max_A = max(A_M, A_N)\n    max_B = max(B_M, B_N)\n    max_C = max(C_M, C_N)\n    A_C, B_C = max(A_C, A_N), max(B_C, B_N)\n    B_C, C_C = max(B_C, B_N), max(C_C, C_N)\n    max_A, max_B, max_C = max(max_A, A_C), max(max_B, B_C), max(max_C, C_C)\n    max_B, max_C = max(max_B, B_C), max(max_C, C_C)\n    return max(max_A, max_B, max_C) + max(A_C, B_C, C_C)\n\"\"\"\ndef"
    },
    {
        "number": 4271,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip().split()[0])\n    A_1, A_2,..., A_N = map(int, stdin.strip().split())\n    B_1, B_2,..., B_N = map(int, stdin.strip().split())\n    C_1, C_2,..., C_N = map(int, stdin.strip().split())\n    ans = 0\n    for i in range(1, N+1):\n        ans += B_1 * (C_1 + B_2 * (C_1 + A_1 + A_2) / (B_1 + B_2 + C_1 + C_2 + A_1 + A_2))\n    return str(ans)"
    },
    {
        "number": 4271,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, *A = map(int, stdin.split())\n    B = [i+1 for i in range(n)]\n    C = [i+1 for i in range(n-1, -1, -1)]\n    # print(B, C)\n    for i in range(n):\n        for j in range(i+1, n):\n            A[i] += B[j]\n            A[j] += C[i]\n    # print(A)\n    answer = 0\n    for i in range(n):\n        answer += A[i]\n    # print(answer)\n    return str(answer)\n\n----- Sample Input -----\n\n3\n3 1 2\n2 5 4\n3 6\n\n----- Sample Output -----\n7\n\nTest case 1:\nInput:\n2\n2\n2\nSample Output:\n7\nExplanation:\n1st Dish is 2 and last Dish is 6.\n2nd Dish is 2 and last Dish is 4.\n3rd Dish is 2 and last Dish is 5.\nSample Input:\n3\n2\n2\n2\nSample Output:\n3\nExplanation:\n1st Dish is 2 and last Dish is 6.\n2nd Dish is 2 and last Dish is 4.\n3rd Dish is 2 and last Dish is 5.\n\"\"\"\ndef"
    },
    {
        "number": 4271,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    dishes = []\n    for i in range(n):\n        tmp = list(map(int, input().split()))\n        dishes.append(tmp[1:])\n    answer = 0\n    for i in range(n):\n        if i == 0:\n            answer += dishes[i][0]\n        else:\n            answer += max(dishes[i][0], answer)\n    return str(answer)\n\nprint(solution(\"3 1 2\"))\n\n\n\n\n\ndef"
    },
    {
        "number": 4271,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    A = [int(x) for x in stdin.strip().split()]\n    B = [int(x) for x in stdin.strip().split()]\n    C = [int(x) for x in stdin.strip().split()]\n    D = [int(x) for x in stdin.strip().split()]\n    D.extend(B+C+D)\n    ans = 0\n    while A:\n        for i in range(len(A)-1):\n            if A[i] + A[i + 1] > B[i] + B[i + 1]:\n                ans += B[i] - B[i + 1]\n                A.pop()\n                break\n        for i in range(len(A)-1, len(A)-1 - len(B), -1):\n            if A[i] + A[i + 1] > C[i] + C[i + 1]:\n                ans += C[i] - C[i + 1]\n                A.pop()\n                break\n        for i in range(len(A)-1, len(A)-1 - len(C), -1):\n            if A[i] + A[i + 1] > D[i] + D[i + 1]:\n                ans += D[i] - D[i + 1]\n                A.pop()\n                break\n    return str(ans)\n\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    A = [int(x) for x in input().split()]\n    B = [int(x) for x in input().split()]\n    C = [int(x) for x in input().split()]\n    D = [int(x) for x in input().split()]\n    ans = 0\n    while A:\n        for i in range(len(A)-1):\n            if A[i] + A[i + 1] > B[i] + B[i + 1]:\n                ans += B[i] - B[i + 1]\n                A.pop()\n                break\n        for i in range(len(A)-1, len(A)-1 - len(B), -1):\n            if A[i] + A[i + 1] > C[i] + C[i + 1]:\n                ans += C[i] - C[i + 1]\n                A.pop()\n                break\n        for i in range(len(A)-1, len(A)-1 - len(C), -1):\n            if A[i] + A[i + 1] > D[i] + D[i + 1]:\n                ans += D[i] - D[i + 1]\n                A.pop()\n                break\n    print(ans)\n"
    },
    {
        "number": 4271,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, A_1, A_2, A_3, A_4, A_5, A_6, A_7, A_8, A_9, A_10, A_11, A_12, A_13, A_14, A_15, A_16, A_17, A_18, A_19, A_20, B_1, B_2, B_3, B_4, B_5, B_6, B_7, B_8, B_9, B_10, B_11, B_12, B_13, B_14, B_15, B_16, B_17, B_18, B_19, B_20, C_1, C_2, C_3, C_4, C_5, C_6, C_7, C_8, C_9, C_10, C_11, C_12, C_13, C_14, C_15, C_16, C_17, C_18, C_19, C_20, D_1, D_2, D_3, D_4, D_5, D_6, D_7, D_8, D_9, D_10, D_11, D_12, D_13, D_14, D_15, D_16, D_17, D_18, D_19, D_20, E_1, E_2, E_3, E_4, E_5, E_6, E_7, E_8, E_9, E_10, E_11, E_12, E_13, E_14, E_15, E_16, E_17, E_18, E_19, E_20, F_1, F_2, F_3, F_4, F_5, F_6, F_7, F_8, F_9, F_10, F_11, F_12, F_13, F_14, F_15, F_16, F_17, F_18, F_19, F_20, H_1, H_2, H_3, H_4, H_5, H_6, H_7, H_8, H_9, H_10, H_11, H_12, H_13, H_14, H_15, H_16, H_17, H_18, H_19, H_20, K_1, K_2, K_3, K_4, K_5, K_6, K_7, K_8, K_9, K_10, K_11, K_12, K_13, K_14, K_15, K_16, K_17, K_18, K_19, K_20, P_1, P_2, P_3, P_4, P_5, P_6, P_7, P_8, P_9, P_10, P_11, P_12, P_13, P_14, P_15, P_16, P_17, P_18, P_19, P_20, R_1, R_2, R_3, R_4, R_5, R_6, R_7, R_8, R_9, R_10, R_11, R_12, R_13, R_14, R_15, R_16, R_17, R_18, R_19, R_20, Z_1, Z_2, Z_3, Z_4, Z_5, Z_6, Z_7, Z_8, Z_9, Z_10, Z_11, Z_12, Z_13, Z_14, Z_15, Z_16, Z_17, Z_18, Z_19, Z_20, \\\n    Q_1, Q_2, Q_3, Q_4, Q_5, Q_6, Q_7, Q_8, Q_9, Q_10, Q_11, Q_12, Q_13, Q_14, Q_15, Q_16, Q_17, Q_18, Q_19, Q_20, X_1, X_2, X_3, X_4, X_5, X_6, X_7, X_8, X_9, X_10, X_11, X_12, X_13, X_14, X_15, X_16, X_17, X_18, X_19, X_20, \\\n    Y_1, Y_2, Y_3, Y_4, Y_5, Y_6, Y_7, Y_8, Y_9, Y_10, Y_11, Y_12, Y_13, Y_14, Y_15, Y_16, Y_17, Y_18, Y_19, Y_20, Z_1, Z_2, Z_3, Z_4, Z_5, Z_6, Z_7, Z_8, Z_9, Z_10, Z_11, Z_12, Z_13, Z_14, Z_15, Z_16, Z_17, Z_18, Z_19, Z_20, \\\n    M_1, M_2, M_3, M_4, M_5, M_6, M_7, M_8, M_9, M_10, M_11, M_12, M_13, M_14, M_15, M_16, M_17, M_18, M_19, M_20, K_1, K_2, K_3, K_4, K_5, K_6, K_7, K_8, K_9, K_10, K_11, K_12, K_13, K_14, K_15, K_16, K_17, K_18, K_19, K_20, \\\n    E_1, E_2, E_3, E_4, E_5, E_6, E_7, E_8, E_9, E_10, E_11, E_12, E_13, E_14, E_15, E_16, E_17, E_18, E_19, E_20, F_1, F_2, F_3, F_4, F_5, F_6, F_7, F_8, F_9, F_10, F_11, F_12, F_13, F_14, F_15, F_16, F_17, F_18, F_19, F_20, \\\n    H_1, H_2, H_3, H_4, H_5, H_6, H_7, H_8, H_9, H_10, H_11, H_12, H_13, H_14, H_15, H_16, H_17, H_18, H_19, H_20, K_1, K_2, K_3, K_4, K_5, K_6, K_"
    },
    {
        "number": 4271,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, *A, *B, *C = map(int, stdin)\n    return str(sum(map(sum, [map(lambda x: x**2, A)]*N)))\n\n-----Test Cases-----\ncase 1:\na1 a2 a3\n3 5\n\ncase 2:\n2 3 5\n\ncase 3:\n2 3\n\ncase 4:\n2 2 3 4 5 6\n5\n\ncase 5:\n1 1 3 5 6 7\n2 5 4 6 7 8\n2 6 7 8 9 10\n\ncase 6:\n3 3 6 7 8 9 10\n2 2 7 8 9 10\n\ncase 7:\n5 1 2 3 4 5 6\n6 2 6 7 8 9 10\n\ncase 8:\n4 1 3 5 6 7\n4 3 6 8 9 10\n\ncase 9:\n3 4 6 7 8 9 10\n2 3 4 5 6 7\n2 3 4 5 6 7\n2 3 4 5 6 7\n2 3 4 5 6 7\n2 3 4 5 6 7\n2 3 4 5 6 7\n\ncase 10:\n2 2 3 4 5 6\n2 2 3 4 5 6\n2 2 3 4 5 6\n2 2 3 4 5 6\n2 2 3 4 5 6\n2 2 3 4 5 6\n2 2 3 4 5 6\n2 2 3 4 5 6\n2 2 3 4 5 6\n2 2 3 4 5 6\n\ncase 11:\n5 2 3 4 5 6\n4 3 2 6 7 8 9\n6 2 3 4 5 6\n6 3 2 4 7 8 9\n6 2 3 4 5 6\n6 2 3 4 5 6\n6 2 3 4 5 6\n6 2 3 4 5 6\n6 2 3 4 5 6\n6 2 3 4 5 6\n6 2 3 4 5 6\n\ncase 12:\n4 1 2 3 5 6\n4 2 3 5 6 7\n4 3 2 6 7 8 9\n4 3 2 6 7 8 9\n4 3 2 6 7 8 9\n4 3 2 6 7 8 9\n4 3 2 6 7 8 9\n4 3 2 6 7 8 9\n4 3 2 6 7 8 9\n4 3 2 6 7 8 9\n4 3 2 6 7 8 9\n4 3 2 6 7 8 9\n4 3 2 6 7 8 9\n4 3 2 6 7 8 9\n4 3 2 6 7 8 9\n4 3 2 6 7 8 9\n4 3 2 6 7 8 9\n4 3 2 6 7 8 9\n4 3 2 6 7 8 9\n\ncase 13:\n3 3 2 3 4\n2 2 3 3 4\n3 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2 2 2 3 4\n2"
    },
    {
        "number": 4271,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split()\n    n = int(lines[0])\n    A = [int(line) for line in lines[1:1+n]]\n    B = [int(line) for line in lines[1+n:1+2*n]]\n    C = [int(line) for line in lines[1+2*n:1+3*n]]\n    return ''.join([str(s) for s in A + B + C])"
    },
    {
        "number": 4271,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split(' ')[0])\n    A_1 = int(stdin.split(' ')[1])\n    A_2 = int(stdin.split(' ')[2])\n    B_1 = int(stdin.split(' ')[3])\n    B_2 = int(stdin.split(' ')[4])\n    C_1 = int(stdin.split(' ')[5])\n    C_2 = int(stdin.split(' ')[6])\n    D_1 = int(stdin.split(' ')[7])\n    D_2 = int(stdin.split(' ')[8])\n    D_3 = int(stdin.split(' ')[9])\n    D_4 = int(stdin.split(' ')[10])\n    D_5 = int(stdin.split(' ')[11])\n    D_6 = int(stdin.split(' ')[12])\n    D_7 = int(stdin.split(' ')[13])\n    D_8 = int(stdin.split(' ')[14])\n    D_9 = int(stdin.split(' ')[15])\n    D_10 = int(stdin.split(' ')[16])\n    D_11 = int(stdin.split(' ')[17])\n    D_12 = int(stdin.split(' ')[18])\n    D_13 = int(stdin.split(' ')[19])\n    D_14 = int(stdin.split(' ')[20])\n    D_15 = int(stdin.split(' ')[21])\n    D_16 = int(stdin.split(' ')[22])\n    D_17 = int(stdin.split(' ')[23])\n    D_18 = int(stdin.split(' ')[24])\n    D_19 = int(stdin.split(' ')[25])\n    D_20 = int(stdin.split(' ')[26])\n    D_21 = int(stdin.split(' ')[27])\n    D_22 = int(stdin.split(' ')[28])\n    D_23 = int(stdin.split(' ')[29])\n    D_24 = int(stdin.split(' ')[30])\n    D_25 = int(stdin.split(' ')[31])\n    D_26 = int(stdin.split(' ')[32])\n    D_27 = int(stdin.split(' ')[33])\n    D_28 = int(stdin.split(' ')[34])\n    D_29 = int(stdin.split(' ')[35])\n    D_30 = int(stdin.split(' ')[36])\n    D_31 = int(stdin.split(' ')[37])\n    D_32 = int(stdin.split(' ')[38])\n    D_33 = int(stdin.split(' ')[39])\n    D_34 = int(stdin.split(' ')[40])\n    D_35 = int(stdin.split(' ')[41])\n    D_36 = int(stdin.split(' ')[42])\n    D_37 = int(stdin.split(' ')[43])\n    D_38 = int(stdin.split(' ')[44])\n    D_39 = int(stdin.split(' ')[45])\n    D_40 = int(stdin.split(' ')[46])\n    D_41 = int(stdin.split(' ')[47])\n    D_42 = int(stdin.split(' ')[48])\n    D_43 = int(stdin.split(' ')[49])\n    D_44 = int(stdin.split(' ')[50])\n    D_45 = int(stdin.split(' ')[51])\n    D_46 = int(stdin.split(' ')[52])\n    D_47 = int(stdin.split(' ')[53])\n    D_48 = int(stdin.split(' ')[54])\n    D_49 = int(stdin.split(' ')[55])\n    D_50 = int(stdin.split(' ')[56])\n    D_51 = int(stdin.split(' ')[57])\n    D_52 = int(stdin.split(' ')[58])\n    D_53 = int(stdin.split(' ')[59])\n    D_54 = int(stdin.split(' ')[60])\n    D_55 = int(stdin.split(' ')[61])\n    D_56 = int(stdin.split(' ')[62])\n    D_57 = int(stdin.split(' ')[63])\n    D_58 = int(stdin.split(' ')[64])\n    D_59 = int(stdin.split(' ')[65])\n    D_60 = int(stdin.split(' ')[66])\n    D_61 = int(stdin.split(' ')[67])\n    D_62 = int(stdin.split(' ')[68])\n    D_63 = int(stdin.split(' ')[69])\n    D_64 = int(stdin.split(' ')[70])\n    D_65 = int(stdin.split(' ')[71])\n    D_66 = int(stdin.split(' ')[72])\n    D_67 = int(stdin.split(' ')[73])\n    D_68 = int(stdin.split(' ')[74])\n    D_69 = int(stdin.split(' ')[75])\n    D_70 = int(stdin.split(' ')[76])\n    D_71 = int(stdin.split(' ')[77])\n    D_72 = int(stdin.split(' ')[78])\n    D_73 = int(stdin.split(' ')[79])\n    D_74 = int(stdin.split(' ')[80])\n    D_75 = int(stdin.split(' ')[81])\n    D_76 = int(stdin.split(' ')[82])\n    D_77 = int(stdin.split(' ')[83])\n    D_78 = int(stdin.split(' ')[84])\n    D_79 = int(stdin.split(' ')[85])\n    D_80 = int(stdin.split(' ')[86])\n    D_81 = int(stdin.split(' ')[87])\n    D_82 = int(stdin.split(' ')[88])\n    D_83 = int(stdin.split(' ')[89])\n    D_84 = int(stdin.split(' ')[90])\n    D_85 = int(stdin.split(' ')[91])\n    D_86 = int(stdin.split(' ')[92])\n    D_87 = int(stdin.split(' ')[93])\n    D_88 = int(stdin.split(' ')[94])\n    D_89 = int(stdin.split(' ')[95])\n    D_90 = int(stdin.split(' ')["
    },
    {
        "number": 4272,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    import re\n    S = stdin\n    n = len(S)\n    a, b = map(str, range(n))\n    S = re.sub(r\"[^a-zA-Z0-9]\", '', S)\n    S = re.sub(r\"\\s+\", '', S)\n    a = list(a)\n    b = list(b)\n    a, b = list(filter(None, a)), list(filter(None, b))\n    # print(a,b)\n    a, b = list(filter(None, a)), list(filter(None, b))\n    # print(a,b)\n    # print(len(a),len(b))\n    count = 0\n    count = sum(map(lambda s: s.count(a[i]), a))\n    count = sum(map(lambda s: s.count(b[i]), b))\n    return str(count)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4272,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    S = stdin.strip()\n    C = []\n    for i in range(N):\n        C.append(S[i:i+N])\n    answer = len(set(C))\n    return str(answer)\n\nprint(solution(\"10\"))\nprint(solution(\"ABCDBABCQ\"))\nprint(solution(\"ZABCDBABCQ\"))\n"
    },
    {
        "number": 4272,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split(\" \")\n    abc = []\n    for word in a:\n        if len(word) == 3:\n            abc.append(word)\n        else:\n            abc.extend(word)\n    \n    res = []\n    for word in abc:\n        a = [word] + list(map(lambda x : x[0] + x[1], enumerate(word)))\n        res.append(a)\n    \n    return str(len(set(tuple(r) for r in res)))"
    },
    {
        "number": 4272,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    string = ''\n    c = 0\n    for i in range(n):\n        # print('string is:', string)\n        string = input()\n        # print('c is:', c)\n        # print(string)\n        # print(c)\n        for i in range(len(string)):\n            if string[i] == string[i+1]:\n                c += 1\n        # print(c)\n    return c\n\n----------Running Time----------\nRuntime: 40 ms, faster than 37.86% of Python3 online submissions for Counting Substrings.\nMemory Usage: 15.2 MB, less than 86.58% of Python3 online submissions for Counting Substrings.\n\"\"\"\n\nclass Solution:\n    def countSubstrings(self, s: str) -> int:\n        N = len(s)\n        d = {}\n        for i in range(N):\n            d[i] = 0\n        for i in range(N):\n            d[i+1] = 0\n            for j in range(N):\n                if s[i] == s[j]:\n                    d[i+1] += 1\n        # print(d)\n        res = 0\n        for i in range(1, N+1):\n            if d[i] == d[i-1] + 1:\n                res += 1\n        # print(res)\n        return res\n\n\"\"\"\nRuntime: 44 ms, faster than 64.61% of Python3 online submissions for Counting Substrings.\nMemory Usage: 15.1 MB, less than 100.00% of Python3 online submissions for Counting Substrings.\n\"\"\"\n"
    },
    {
        "number": 4272,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    S = stdin.split()\n    N = len(S)\n    for i in range(N):\n        if(S[i] == 'A' or S[i] == 'B' or S[i] == 'C' or S[i] == 'D' or S[i] == 'E' or S[i] == 'F' or S[i] == 'G' or S[i] == 'H' or S[i] == 'I' or S[i] == 'J' or S[i] == 'K' or S[i] == 'L' or S[i] == 'M' or S[i] == 'N' or S[i] == 'O' or S[i] == 'P' or S[i] == 'Q' or S[i] == 'R' or S[i] == 'S' or S[i] == 'T' or S[i] == 'U' or S[i] == 'V' or S[i] == 'W' or S[i] == 'X' or S[i] == 'Y' or S[i] == 'Z'):\n            S[i] = 'a'\n            \n    if(S[0] == 'Z'):\n        S[0] = 'a'\n    \n    if(len(S) == 1):\n        return 0\n    \n    i = 1\n    while(i <= N):\n        if(S[i] == 'A' or S[i] == 'B' or S[i] == 'C' or S[i] == 'D' or S[i] == 'E' or S[i] == 'F' or S[i] == 'G' or S[i] == 'H' or S[i] == 'I' or S[i] == 'J' or S[i] == 'K' or S[i] == 'L' or S[i] == 'M' or S[i] == 'N' or S[i] == 'O' or S[i] == 'P' or S[i] == 'Q' or S[i] == 'R' or S[i] == 'S' or S[i] == 'T' or S[i] == 'U' or S[i] == 'V' or S[i] == 'W' or S[i] == 'X' or S[i] == 'Y' or S[i] == 'Z'):\n            S[i] = 'a'\n            \n            if(S[i-1]!= 'A'):\n                S[i] = 'Z'\n            \n            i = i + 1\n            \n        else:\n            if(S[i] == 'Z'):\n                S[i] = 'a'\n            \n            i = i + 1\n            \n    return len(S)\n"
    },
    {
        "number": 4272,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = len(stdin)\n    counts = dict()\n    for i in range(1, N + 1):\n        for c in stdin[i - 1]:\n            if c in counts:\n                counts[c] += 1\n            else:\n                counts[c] = 1\n    return str(len(counts))\n\nTime complexity: O(N)\nSpace Complexity: O(N)\n\n'''\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        return ''.join(sorted(set(stdin)))"
    },
    {
        "number": 4272,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    if not stdin:\n        return \"\"\n    n = len(stdin)\n    s = ''\n    for i in range(n):\n        s = s + stdin[i]\n        if i < n - 1:\n            s = s + stdin[i + 1]\n    return s"
    },
    {
        "number": 4272,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n-----Constraints-----\n - 2 \\leq N \\leq 50\n - S consists of uppercase English letters.\n"
    },
    {
        "number": 4272,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n  result = []\n  for line in stdin:\n    arr = list(line)\n    length = len(arr)\n    count = 1\n    for i in range(length):\n      if (arr[i] == 'A'):\n        count += 1\n      if (arr[i] == 'B'):\n        count += 1\n      if (arr[i] == 'C'):\n        count += 1\n      if (arr[i] == 'D'):\n        count += 1\n      if (arr[i] == 'E'):\n        count += 1\n      if (arr[i] == 'F'):\n        count += 1\n      if (arr[i] == 'G'):\n        count += 1\n      if (arr[i] == 'H'):\n        count += 1\n      if (arr[i] == 'I'):\n        count += 1\n      if (arr[i] == 'J'):\n        count += 1\n      if (arr[i] == 'K'):\n        count += 1\n      if (arr[i] == 'L'):\n        count += 1\n      if (arr[i] == 'M'):\n        count += 1\n      if (arr[i] == 'N'):\n        count += 1\n      if (arr[i] == 'O'):\n        count += 1\n      if (arr[i] == 'P'):\n        count += 1\n      if (arr[i] == 'Q'):\n        count += 1\n      if (arr[i] == 'R'):\n        count += 1\n      if (arr[i] == 'S'):\n        count += 1\n      if (arr[i] == 'T'):\n        count += 1\n      if (arr[i] == 'U'):\n        count += 1\n      if (arr[i] == 'V'):\n        count += 1\n      if (arr[i] == 'W'):\n        count += 1\n      if (arr[i] == 'X'):\n        count += 1\n      if (arr[i] == 'Y'):\n        count += 1\n      if (arr[i] == 'Z'):\n        count += 1\n      if (arr[i] == '!'):\n        count += 1\n      if (arr[i] == '?'):\n        count += 1\n      if (arr[i] == '.'):\n        count += 1\n      if (arr[i] == ','):\n        count += 1\n      if (arr[i] == '.'):\n        count += 1\n      if (arr[i] == '?'):\n        count += 1\n      if (arr[i] == ','):\n        count += 1\n      if (arr[i] == ':'):\n        count += 1\n      if (arr[i] == ':'):\n        count += 1\n      if (arr[i] == ':'):\n        count += 1\n      if (arr[i] == ':'):\n        count += 1\n      if (arr[i] == ':'):\n        count += 1\n      if (arr[i] == ':'):\n        count += 1\n      if (arr[i] == ':'):\n        count += 1\n      if (arr[i] == ':'):\n        count += 1\n      if (arr[i] == ':'):\n        count += 1\n      if (arr[i] == ':'):\n        count += 1\n      if (arr[i] == ':'):\n        count += 1\n      if (arr[i] == ':'):\n        count += 1\n      if (arr[i] == ':'):\n        count += 1\n      if (arr[i] == ':'):\n        count += 1\n      if (arr[i] == ':'):\n        count += 1\n      if (arr[i] == ':'):\n        count += 1\n      if (arr[i] == ':'):\n        count += 1\n      if (arr[i] == ':'):\n        count += 1\n      if (arr[i] == ':'):\n        count += 1\n      if (arr[i] == ':'):\n        count += 1\n      if (arr[i] == ':'):\n        count += 1\n      if (arr[i] == ':'):\n        count += 1\n      if (arr[i] == ':'):\n        count += 1\n      if (arr[i] == ':'):\n        count += 1\n      if (arr[i] == ':'):\n        count += 1\n      if (arr[i] == ':'):\n        count += 1\n      if (arr[i] == ':'):\n        count += 1\n      if (arr[i] == ':'):\n        count += 1\n      if (arr[i] == ':'):\n        count += 1\n      if (arr[i] == ':'):\n        count += 1\n      if (arr[i] == ':'):\n        count += 1\n      if (arr[i] == ':'):\n        count += 1\n      if (arr[i] == ':'):\n        count += 1\n      if (arr[i] == ':'):\n        count += 1\n      if (arr[i] == ':'):\n        count += 1\n      if (arr[i] == ':'):\n        count += 1\n      if (arr[i] == ':'):\n        count += 1\n      if (arr[i] == ':'):\n        count += 1\n      if (arr[i] == ':'):\n        count += 1\n      if (arr[i] == ':'):\n        count += 1\n      if (arr[i] == ':'):\n        count += 1\n      if (arr[i] == ':'):\n        count += 1\n      if (arr[i] == ':'):\n        count += 1\n      if (arr[i] == ':'):\n        count += 1\n      if (arr[i] == ':'):\n        count += 1\n      if (arr[i] == ':'):\n        count += 1\n      if (arr[i] == ':'):\n        count += 1\n      if (arr[i] == ':'):\n        count += 1\n      if (arr[i] == ':'):\n        count += 1\n      if (arr[i] == ':'):\n        count += 1\n      if (arr[i] == ':'):\n        count += 1\n      if (arr[i] == ':'):\n        count += 1\n      if (arr[i] == ':'):\n        count += 1\n      if (arr[i] == ':'):\n        count += 1\n      if (arr[i] == ':'):\n        count += 1\n      if (arr[i] == ':'):\n        count += 1\n      if (arr[i] == ':'):\n        count += 1\n      if (arr[i] == ':'):\n        count += 1\n      if (arr[i] == ':'):\n        count += 1\n      if (arr[i] == ':'):\n        count += 1\n      if (arr[i] == ':'):\n        count += 1\n      if (arr[i] == ':'):\n        count += 1\n      if (arr[i] == ':'):\n        count += 1\n      if (arr[i] == ':'):\n        count += 1\n      if (arr[i] == ':'):\n        count += 1\n      if (arr[i] == ':'):\n        count += 1\n      if (arr[i] == ':'):\n        count += 1\n      if (arr[i] == ':'):\n        count += 1\n      if (arr[i] == ':'):\n        count += 1\n      if (arr[i] == ':'):\n        count += 1\n      if (arr[i] == ':'):\n        count += 1\n      if (arr[i] == ':'):\n        count += 1\n      if (arr[i] == ':'):\n        count += 1"
    },
    {
        "number": 4272,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def helper(i, j, a):\n        if i >= len(a) or j >= len(a):\n            return False\n        if a[i] == a[j]:\n            return True\n        return helper(i+1, j+1, a) or helper(i, j+1, a[:j] + a[i:]) or helper(i, j, a[:j] + a[i:])\n    a = stdin.strip().split()\n    return len([i for i in a if helper(0, 0, a)])\n\n###Solution 2:  3-3\ndef"
    },
    {
        "number": 4273,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    name_a, name_b, name_c = map(str, stdin.split(','))\n    print(solution_util(name_a, name_b, name_c))\n    return '0'\n\ndef"
    },
    {
        "number": 4273,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    people, answer = stdin.split('\\n')\n    people = people.split()\n    people = set(people)\n    answer = list(answer)\n    answer = list(map(lambda x: (x[1:], x[0]) if x[0].isupper() else x, answer))\n    answer = list(filter(lambda x: x[0][1:] in people, answer))\n    answer = list(map(lambda x: x[1], answer))\n    answer = list(map(lambda x: (x[0].upper(), x[1]), answer))\n    answer = list(map(lambda x: ''.join(x), answer))\n    return ''.join(answer)\n\n-----Sample Output-----\n5\n\nWe can choose three people with the following names:\n - MASHIKE, RUMOI, HABORO\n - MASHIKE, RUMOI, HOROKANAI\nThus, we have two ways.\ndef"
    },
    {
        "number": 4273,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    names = []\n    \n    for _ in range(n):\n        names.append(stdin.split()[0])\n    \n    def solution1(names):\n        for _ in range(n):\n            for name in names:\n                if name[0] == 'M' and name!= names[-1]:\n                    names.pop()\n                    break\n            names.append(name)\n        if len(names) == n:\n            return '\\n'.join(names)\n        else:\n            return '\\n'.join(names)\n    \n    def solution2(names):\n        i = 0\n        names.sort()\n        while i < len(names) - 1:\n            if names[i]!= names[i + 1]:\n                return names[i] + '\\n'\n            else:\n                i += 1\n        return ''\n    \n    def solution3(names):\n        i = 0\n        names.sort()\n        while i < len(names) - 1:\n            if names[i] == names[i + 1]:\n                i += 1\n            else:\n                return names[i] + '\\n'\n        return ''\n    \n    def solution4(names):\n        i = 0\n        names.sort()\n        while i < len(names) - 1:\n            if names[i] == names[i + 1]:\n                if i == len(names) - 2:\n                    names.pop()\n                else:\n                    i += 1\n            else:\n                return names[i] + '\\n'\n        return ''\n    \n    answer = 0\n    while True:\n        if len(names) == 3:\n            answer += 1\n            break\n        elif len(names) == 2:\n            answer += 1\n            break\n        elif len(names) == 1:\n            answer += 1\n            break\n        elif len(names) == 0:\n            return answer\n        else:\n            names = solution1(names)\n            names = solution2(names)\n            names = solution3(names)\n            names = solution4(names)\n        \n        "
    },
    {
        "number": 4273,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, S = stdin.split()\n    N = int(N)\n    S = sorted(S.split(','))\n\n    def solution1():\n        return max(3, 3 - len(S))\n\n    def solution2():\n        return len(S) - 3 + 3 - (3 - len(S))\n\n    print(solution1())\n    print(solution2())\n\n-----Time Complexity-----\nO(n)\nO(n)\n\n-----Space Complexity-----\nO(n)\n\n-----Inefficiency-----\nTime Complexity: O(n)\nSpace Complexity: O(1)\n\"\"\"\n\nclass Solution:\n    def three_people(self, S: str) -> int:\n        n = len(S)\n        # we have three cases\n        # MASHIKE, RUMOI, OBIRA\n        # we have three possible cases\n        # MASHIKE, RUMOI, HOROKANAI\n        # we have three possible cases\n        # MASHIKE, RUMOI, HABORO\n        return max(3, 3 - n - len(S))\n\nclass Solution:\n    def three_people(self, S: str) -> int:\n        # TODO: think about this\n        return 3"
    },
    {
        "number": 4273,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    people = stdin.split()\n    input_array = list(map(str, input_array))\n    times = list(map(int, input_array))\n    name_array = []\n    for i in range(len(times)):\n        name_array.append(input_array[i][0:3])\n    print(solution(people))\n    print(list(set(name_array)))\n\"\"\"\n\ndef"
    },
    {
        "number": 4273,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    p = list(map(int, stdin.split()))\n    answer = 0\n    for i in range(n):\n        if p[i] == a:\n            answer += 1\n        elif p[i] == b:\n            answer += 2\n    print(answer)\n"
    },
    {
        "number": 4273,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, S = map(int, stdin.split())\n    # S = 1\n    # N = 5\n    # S = \"MASHIKE\"\n    # N = 6\n    # S = \"OBIRA\"\n    # N = 7\n    # S = \"HABORO\"\n    # N = 8\n    # S = \"HOROKANAI\"\n    # N = 9\n    # S = \"OBIRA\"\n    # N = 10\n    # S = \"RUMOI\"\n    # N = 11\n    # S = \"RUMOI\"\n    # N = 12\n    # S = \"HABORO\"\n    # N = 13\n    # S = \"RUMOI\"\n    # N = 14\n    # S = \"HABORO\"\n    # N = 15\n    # S = \"OBIRA\"\n    # N = 16\n    # S = \"MASHIKE\"\n    # N = 17\n    # S = \"OBIRA\"\n    # N = 18\n    # S = \"RUMOI\"\n    # N = 19\n    # S = \"RUMOI\"\n    # N = 20\n    # S = \"HABORO\"\n    # N = 21\n    # S = \"RUMOI\"\n    # N = 22\n    # S = \"HABORO\"\n    # N = 23\n    # S = \"OBIRA\"\n    # N = 24\n    # S = \"MASHIKE\"\n    # N = 25\n    # S = \"OBIRA\"\n    # N = 26\n    # S = \"RUMOI\"\n    # N = 27\n    # S = \"RUMOI\"\n    # N = 28\n    # S = \"HABORO\"\n    # N = 29\n    # S = \"RUMOI\"\n    # N = 30\n    # S = \"HABORO\"\n    # N = 31\n    # S = \"OBIRA\"\n    # N = 32\n    # S = \"MASHIKE\"\n    # N = 33\n    # S = \"OBIRA\"\n    # N = 34\n    # S = \"RUMOI\"\n    # N = 35\n    # S = \"RUMOI\"\n    # N = 36\n    # S = \"HABORO\"\n    # N = 37\n    # S = \"RUMOI\"\n    # N = 38\n    # S = \"HABORO\"\n    # N = 39\n    # S = \"OBIRA\"\n    # N = 40\n    # S = \"MASHIKE\"\n    # N = 41\n    # S = \"OBIRA\"\n    # N = 42\n    # S = \"RUMOI\"\n    # N = 43\n    # S = \"RUMOI\"\n    # N = 44\n    # S = \"HABORO\"\n    # N = 45\n    # S = \"RUMOI\"\n    # N = 46\n    # S = \"HABORO\"\n    # N = 47\n    # S = \"OBIRA\"\n    # N = 48\n    # S = \"MASHIKE\"\n    # N = 49\n    # S = \"OBIRA\"\n    # N = 50\n    # S = \"RUMOI\"\n    # N = 51\n    # S = \"RUMOI\"\n    # N = 52\n    # S = \"HABORO\"\n    # N = 53\n    # S = \"RUMOI\"\n    # N = 54\n    # S = \"HABORO\"\n    # N = 55\n    # S = \"OBIRA\"\n    # N = 56\n    # S = \"MASHIKE\"\n    # N = 57\n    # S = \"OBIRA\"\n    # N = 58\n    # S = \"RUMOI\"\n    # N = 59\n    # S = \"RUMOI\"\n    # N = 60\n    # S = \"HABORO\"\n    # N = 61\n    # S = \"RUMOI\"\n    # N = 62\n    # S = \"HABORO\"\n    # N = 63\n    # S = \"OBIRA\"\n    # N = 64\n    # S = \"MASHIKE\"\n    # N = 65\n    # S = \"OBIRA\"\n    # N = 66\n    # S = \"RUMOI\"\n    # N = 67\n    # S = \"RUMOI\"\n    # N = 68\n    # S = \"HABORO\"\n    # N = 69\n    # S = \"RUMOI\"\n    # N = 70\n    # S = \"HABORO\"\n    # N = 71\n    # S = \"OBIRA\"\n    # N = 72\n    # S = \"MASHIKE\"\n    # N = 73\n    # S = \"OBIRA\"\n    # N = 74\n    # S = \"RUMOI\"\n    # N = 75\n    # S = \"RUMOI\"\n    # N = 76\n    # S = \"HABORO\"\n    # N = 77\n    # S = \"RUMOI\"\n    # N = 78\n    # S = \"HABORO\"\n    # N = 79\n    # S = \"OBIRA\"\n    # N = 80\n    # S = \"MASHIKE\"\n    # N = 81\n    # S = \"OBIRA\"\n    # N = 82\n    # S = \"RUMOI\"\n    # N = 83\n    # S = \"RUMOI\"\n    # N = 84\n    # S = \"HABORO\"\n    # N = 85\n    # S = \"RUMOI\"\n    # N = 86\n    # S = \"HABORO\"\n    # N = 87\n    # S = \"OBIRA\"\n    # N = 88\n    # S = \"MASHIKE\"\n    # N = 89\n    # S = \"OBIRA\"\n    # N = 90\n    # S = \"RUMOI\"\n    # N = 91\n    # S = \"RUMOI\"\n    # N = 92\n    # S = \"HABORO\"\n    # N = 93\n    # S = \"RUMOI\"\n    # N = 94\n    # S = \"HABORO\"\n    # N = 95\n    # S = \"OBIRA\"\n    # N = 96\n    # S = \"MASHIKE\"\n    # N = 97\n    # S = \"OBIRA\"\n    # N = 98\n    # S = \"RUMOI\"\n    # N = 99\n    # S = \"RUMOI\"\n    # N = 100\n    # S = \"HABORO\"\n    # N = 101\n    # S = \"RUMOI\"\n    # N = 102\n    # S = \"HABORO\"\n    # N = 103\n    # S = \"OBIRA\"\n    # N = 104\n    # S = \"MASHIKE\"\n    # N = 105\n    # S = \"OBIRA\"\n    # N = 106\n    "
    },
    {
        "number": 4273,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n  \n  N, S = [int(i) for i in stdin.split()]\n  \n  if S % 3!= 0:\n    return 0\n  \n  for i in range(N):\n    if not(S - i in people):\n      continue\n    people[S-i].append(i)\n  \n  return solution(stdin)\n\n\n-----Sample Output-----\n\n-----Sample Input-----\n5\nMASHIKE\nRUMOI\nOBIRA\nHABORO\nHOROKANAI\n\n-----Sample Output-----\n1\n\nWe have two ways.\ndef"
    },
    {
        "number": 4273,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def toMash(s):\n        return ''.join(sorted(s))\n    \n    def toFah(s):\n        return ''.join(sorted(s, reverse=True))\n    \n    def toRoh(s):\n        return ''.join(sorted(set(s)))\n    \n    def toOri(s):\n        return ''.join(sorted(set(s[::-1])))\n    \n    def toAja(s):\n        return ''.join(sorted(set(s[::-1])[::-1]))\n    \n    def toOriAja(s):\n        return ''.join(sorted(set(s)))\n    \n    def toRohAja(s):\n        return ''.join(sorted(set(s), reverse=True)[::-1])\n    \n    n = int(stdin)\n    ans = 0\n    \n    for i in range(1, n + 1):\n        s1 = toMash(stdin[0:i])\n        s2 = toFah(stdin[i:])\n        s3 = toRoh(stdin[i:])\n        s4 = toOri(stdin[i:])\n        s5 = toAja(stdin[i:])\n        s6 = toOriAja(stdin[i:])\n        s7 = toRohAja(stdin[i:])\n        \n        if len(set(s1)) == len(set(s2)) == len(set(s3)) == len(set(s4)) == len(set(s5)) == len(set(s6)) == len(set(s7)):\n            ans += 1\n    return ans"
    },
    {
        "number": 4273,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x = 0\n    y = 0\n    for i in range(1, len(stdin)):\n        if stdin[i] in [\"M\", \"A\", \"R\", \"C\", \"H\"]:\n            x += 1\n    for i in range(1, len(stdin)):\n        if stdin[i] in [\"R\", \"C\", \"H\"]:\n            y += 1\n    if x == 0 and y == 0:\n        return \"1\"\n    elif x == 0 and y!= 0:\n        return \"2\"\n    elif x!= 0 and y == 0:\n        return \"2\"\n    elif x == 0 and y!= 0:\n        return \"1\"\n    else:\n        return str(x) + \" \" + str(y) + \" \" + str(x + y)"
    },
    {
        "number": 4274,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a, b, c = map(int, stdin.split())\n    a = a % m\n    b = b % n\n    if a == 0 and b == 0 and c == 0:\n        return \"Yes\"\n    if a == 0 and b == 0 and c == 1:\n        return \"No\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4274,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    return \"Yes\" if (M + N - 1) % 2 == 0 else \"No\"\n'''\n\nclass Solution:\n    def solution(self, stdin):\n        N, M = map(int, stdin.split())\n        if M == 0:\n            return \"Yes\"\n        if M == 1:\n            return \"No\"\n        return \"No\" if (M + N - 1) % 2 == 0 else \"Yes\"\n"
    },
    {
        "number": 4274,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n'''"
    },
    {
        "number": 4274,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nMy implementation is similar to the one in the assignment provided.\n"
    },
    {
        "number": 4274,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(len(stdin)):\n        j = i\n        while j < len(stdin) and stdin[j]!= \" \":\n            j += 1\n        if j == len(stdin):\n            break\n        j += 1\n        i,j = j,j+1\n        if i < len(stdin) and stdin[i] == \"A\":\n            j = i\n            while j < len(stdin) and stdin[j]!= \" \":\n                j += 1\n            if j == len(stdin):\n                break\n            j += 1\n            i,j = j,j+1\n            if i < len(stdin) and stdin[i] == \"C\":\n                j = i\n                while j < len(stdin) and stdin[j]!= \" \":\n                    j += 1\n                if j == len(stdin):\n                    break\n                j += 1\n                i,j = j,j+1\n                if i < len(stdin) and stdin[i] == \"A\":\n                    j = i\n                    while j < len(stdin) and stdin[j]!= \" \":\n                        j += 1\n                    if j == len(stdin):\n                        break\n                    j += 1\n                    i,j = j,j+1\n                    if i < len(stdin) and stdin[i] == \"C\":\n                        j = i\n                        while j < len(stdin) and stdin[j]!= \" \":\n                            j += 1\n                        if j == len(stdin):\n                            break\n                        j += 1\n                        i,j = j,j+1\n                        if i < len(stdin) and stdin[i] == \"A\":\n                            j = i\n                            while j < len(stdin) and stdin[j]!= \" \":\n                                j += 1\n                            if j == len(stdin):\n                                break\n                            j += 1\n                            i,j = j,j+1\n                            if i < len(stdin) and stdin[i] == \"C\":\n                                break\n                        \n    return \"Yes\" if j == len(stdin) else \"No\"\n\ndef"
    },
    {
        "number": 4274,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    _takahashi = 0\n    if (n >= 1 and m >= 1) and (n >= 2 and m >= 2):\n        n -= 1\n        m -= 1\n        _takahashi = 1\n    else:\n        print('No')\n    if _takahashi == 1:\n        print('Yes')\n    else:\n        print('No')\n    return ''\n\nSolution \nN = 3\nM = 3\nprint(solution(input()))\n"
    },
    {
        "number": 4274,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    matrix = []\n    for i in range(N):\n        matrix.append(list(map(int, stdin.split())))\n    \n    def check(r, c):\n        return 0 <= r < N and 0 <= c < M\n    \n    def possible(r, c, seen):\n        if check(r, c):\n            return False\n        if matrix[r][c] == 1:\n            return False\n        for i in range(4):\n            if possible(r + dr[i], c + dc[i]):\n                matrix[r][c] = 1\n                return True\n        return False\n    \n    for r in range(N):\n        for c in range(M):\n            if possible(r, c, seen):\n                return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 4274,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def check_constraints(string):\n        check = 0\n        count = 1\n        for c in string:\n            if c in ['a', 'e', 'i', 'o', 'u']:\n                check += 1\n            if check > 1:\n                return False\n            else:\n                count += 1\n        return True\n    for line in stdin:\n        string = line.split(\" \")\n        string[0] = int(string[0])\n        string[1] = int(string[1])\n        if check_constraints(string) == True:\n            return \"Yes\"\n    return \"No\"\n\n-----Sample Output-----\nNo\n\"\"\"\n\ndef"
    },
    {
        "number": 4274,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    return \"Yes\" if N == M else \"No\"\n-----Constraints-----\n - 1 \\leq N \\leq 100\n - 0 \\leq M \\leq N\n - 0 \\leq N \\leq N\n\n-----Input-----\n3 3\n\n-----Output-----\nYes\n\n-----Sample Input-----\n5\n\n-----Sample Output-----\nNo\n\n-----Constraints-----\n - 1 \\leq N \\leq 100\n - 0 \\leq N \\leq N\n - 0 \\leq N \\leq N\n\n-----Input-----\n5\n\n-----Output-----\nNo\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4274,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"No\"\n\nExample 1:\nInput:\nN = 3, M = 2\nOutput:\nYes\n\nExample 2:\nInput:\nN = 1, M = 2\nOutput:\nNo\n\nExample 3:\nInput:\nN = 1, M = 2\nOutput:\nNo\n\nConstraints:\n-1 \\leq N \\leq 100\n-0 \\leq M \\leq N\n-1 \\leq N \\leq 100\n-1 \\leq M \\leq N\n\n'''"
    },
    {
        "number": 4275,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    str1 = list(stdin)\n    str1.sort()\n    str1 = ''.join(str1)\n    if len(str1) == 6 and str1[2] == str1[3] == str1[4] == str1[5]:\n        return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 4275,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4275,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = []\n    for s_ in stdin:\n        s.append(s_[2:])\n    if s.count('s') == s.count('y') and s.count('t') == s.count('n'):\n        print('Yes')\n    else:\n        print('No')\n"
    },
    {
        "number": 4275,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin\n    count = 0\n    for i in range(len(string)):\n        if string[i] == 'u' or string[i] == 'U':\n            count += 1\n        if string[i] == 'p' or string[i] == 'P':\n            count -= 1\n        if string[i] == 'c' or string[i] == 'C':\n            count += 1\n        if string[i] == 'o' or string[i] == 'O':\n            count -= 1\n        if string[i] == 'n' or string[i] == 'N':\n            count += 1\n    if count == 0:\n        return 'Yes'\n    else:\n        return 'No'\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4275,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def countCoffee(text: str) -> int:\n        count = 0\n        for idx in range(len(text) - 1):\n            if text[idx]!= text[idx + 1]:\n                count += 1\n        return count\n\n    N = len(stdin)\n    if N == 1:\n        return 'Yes'\n    result = 0\n    # last_idx = len(stdin) - 1\n    last_idx = N - 1\n    for idx in range(N - 1):\n        if stdin[idx] == stdin[idx + 1]:\n            result += countCoffee(stdin[idx:idx + 2])\n        else:\n            result += countCoffee(stdin[idx:last_idx])\n            last_idx = idx + 1\n    return 'Yes' if result >= 2 else 'No'\n\n\nprint(solution(\"sippuu\"))\n"
    },
    {
        "number": 4275,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return ['Yes' if s == 'coffee' or s == 'Coffee' else 'No' for s in stdin]\n"
    },
    {
        "number": 4275,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if ''.join(sorted(list(stdin))) == 'coffee-like' else 'No'"
    },
    {
        "number": 4275,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n  for i in range(len(stdin)):\n    if stdin[i] =='s':\n      print('Yes')\n    else:\n      print('No')\n  return 'Yes'"
    },
    {
        "number": 4275,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(4):\n        temp = [i for i in stdin]\n        if temp[1] == temp[2] and temp[2] == temp[3]:\n            return 'Yes'\n    return 'No'\n\nprint(solution('sippuu'))\nprint(solution('sippuua'))\nprint(solution('sippuuas'))\n"
    },
    {
        "number": 4275,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return answer\n\nThis solution is contributed by Neelam Yadav\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4276,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, T = map(int, stdin.split())\n    c_1, t_1 = map(int, stdin.split())\n    c_2, t_2 = map(int, stdin.split())\n    c_N, t_N = map(int, stdin.split())\n    \n    if c_1 > c_N or t_1 > t_N or c_2 > c_N or t_2 > t_N:\n        return str(T)\n    \n    dp = [[-1] * (N + 1) for i in range(T)]\n    \n    dp[0][0] = 0\n    \n    for i in range(T):\n        if t_1 == t_2:\n            dp[i][0] = min(dp[i][0], c_1 + c_2)\n        else:\n            dp[i][0] = max(dp[i][0], c_1 + c_2 + c_N)\n        \n        if i >= c_1 and i <= c_2:\n            dp[i][c_1] = dp[i - c_1][c_1]\n        if i >= c_2 and i <= c_N:\n            dp[i][c_2] = dp[i - c_2][c_2]\n    \n    \n    for i in range(1, T):\n        for j in range(1, N + 1):\n            dp[i][j] = dp[i - 1][j]\n            \n        for j in range(N):\n            if j >= c_1 and j <= c_2 and j <= c_N:\n                dp[i][j] = min(dp[i][j], dp[i - 1][j] + c_1 + c_2 + c_N)\n            if j >= c_2 and j <= c_N:\n                dp[i][j] = min(dp[i][j], dp[i - 1][j] + c_1 + c_2 + c_N)\n        \n        for j in range(N):\n            if j >= c_1 and j <= c_2 and j <= c_N:\n                dp[i][j] = min(dp[i][j], dp[i - 1][j] + c_1 + c_2 + c_N)\n            if j >= c_2 and j <= c_N:\n                dp[i][j] = min(dp[i][j], dp[i - 1][j] + c_1 + c_2 + c_N)\n    \n    return str(dp[T - 1][N])"
    },
    {
        "number": 4276,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, T = map(int, stdin.split())\n    c_1, t_1 = map(int, stdin.split())\n    c_2, t_2 = map(int, stdin.split())\n    c_N, t_N = map(int, stdin.split())\n    c_1, t_1 = c_1, t_1\n    c_2, t_2 = c_2, t_2\n    c_N, t_N = c_N, t_N\n    res = min(t_1, t_2)\n    for i in range(1, N + 1):\n        for j in range(1, T + 1):\n            if j >= c_1 and j < c_2 and j >= t_1 and j < t_2:\n                c = min(j, c_N)\n                res = min(res, c)\n            else:\n                pass\n    if res!= t_1:\n        return res\n    else:\n        return TLE\n\nprint(solution(input()))\n"
    },
    {
        "number": 4276,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    global N, T, c_1, c_2, t_1, t_2\n    N, T, c_1, c_2, t_1, t_2 = map(int, stdin.split())\n    # solution\n    def f(routes):\n        nonlocal max_cost, min_cost\n        cost = 0\n        for route in routes:\n            cost += route[0]\n            cost += route[1]\n            # cost += route[0]*route[1]\n            # cost += route[1]*route[0]\n            if cost > max_cost:\n                max_cost = cost\n            if cost < min_cost:\n                min_cost = cost\n        return max_cost, min_cost\n    # Solution\n    def solution(routes):\n        if not routes:\n            return T\n        if not routes:\n            return T\n        if t_1 > routes[0][1]:\n            return t_1\n        if t_2 > routes[0][1]:\n            return t_2\n        r1, r2 = routes.pop(0)\n        cost1 = solution(routes)\n        cost2 = solution(routes)\n        if cost1 < cost2:\n            return min(cost1, cost2)\n        else:\n            return max(cost1, cost2)\n    answer = solution(list(zip(c_1, t_1)))\n    return answer\n"
    },
    {
        "number": 4276,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n        n = int(stdin.strip())\n        t = int(stdin.strip())\n        m = {}\n        for _ in range(n):\n            start, end, time = map(int, stdin.split())\n            m[start, end] = time\n        m = sorted(m.items(), key=lambda x: x[0])\n        return m[0][1] if len(m) >= 1 else t"
    },
    {
        "number": 4276,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n        N, T = map(int, stdin.split())\n        c_1, t_1 = map(int, stdin.split())\n        c_2, t_2 = map(int, stdin.split())\n        pairs = [(c_1, t_1), (c_2, t_2)]\n        costs = [0]*(N+1)\n        for i in range(1, N+1):\n            costs[i] = i*min(c_1, c_2)\n        for i in range(0, N):\n            for j in range(0, N):\n                if pairs[i][0] == pairs[j][0]:\n                    if (pairs[i][1] > t_1) or (pairs[j][1] > t_1):\n                        continue\n                if pairs[i][1] <= t_1 and pairs[j][1] <= t_1:\n                    costs[i] = min(costs[i], costs[j]+costs[i])\n        return costs[N] if costs[N]!= T else T"
    },
    {
        "number": 4276,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, T = map(int, stdin.split())\n    cars = list(map(int, stdin.split()))\n    c_N, t_N = 0, 0\n    for i in cars:\n        if i - t_N > T:\n            c_N += 1\n        else:\n            c_N = i - t_N\n            t_N = 0\n        t_N += 1\n    if c_N > t_N:\n        return T\n    elif c_N < t_N:\n        return t_N\n    else:\n        return T\n\"\"\"\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        N, T = map(int, stdin.split())\n        cars = list(map(int, stdin.split()))\n        c_N, t_N = 0, 0\n        for i in cars:\n            if i - t_N > T:\n                c_N += 1\n            else:\n                c_N = i - t_N\n                t_N = 0\n            t_N += 1\n        if c_N > t_N:\n            return T\n        elif c_N < t_N:\n            return t_N\n        else:\n            return T\n\"\"\"\n\n\"\"\"\n3 9\n1 10\n2 20\n3 40\n\n-1 10\n9 10\n-1\n\"\"\""
    },
    {
        "number": 4276,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, T, c_1, t_1, c_2, t_2 = map(int, stdin.split())\n    if N > 100 or N < 1: return T\n    if T > 1000 or T < 1: return T\n    if c_1 > 1000 or c_1 < 1: return T\n    if t_1 > 1000 or t_1 < 1: return T\n    if c_2 > 1000 or c_2 < 1: return T\n    if t_2 > 1000 or t_2 < 1: return T\n    return T"
    },
    {
        "number": 4276,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # The first line contains the amount of elements.\n    N, T, c1, t1 = map(int, stdin.split())\n    # The second line contains the elements of the first list.\n    # The third line contains the elements of the second list.\n    #...\n    # The final line contains the elements of the third list.\n    lst = list(map(int, stdin.split()))\n    # The output of the first line is the cost of the first route.\n    # The output of the second line is the cost of the second route.\n    # The output of the third line is the cost of the third route.\n    #...\n    # The last line contains the cost of the third route.\n    cost = lst[3]\n    # Find the minimum cost of a route that takes not longer than T.\n    # By the time it takes more than T seconds, you have to use the route that takes longer.\n    # The algorithm here is identical to the one described in the problem statement.\n    min_cost = float('inf')\n    # The following for loop continues to make sure that the route takes longer than T.\n    # It is always possible to return the minimum cost of the route.\n    # Because of the possible looping in the previous line, it is a potential for the first route to not\n    # be shorter than T.\n    for i in range(len(lst)):\n        cost = min(cost, cost + lst[i])\n        # If cost is smaller than minimum cost, continue to the next line.\n        if cost < min_cost:\n            min_cost = cost\n    # Print the cost of the first route.\n    print(min_cost)\n    # Print the cost of the second route.\n    #...\n    # Print the cost of the third route.\n    #...\n    # The last line contains the cost of the third route.\n    print(cost)\n    # Return TLE if the answer does not exist.\n    return 'TLE' if cost > T else cost\n\n---------------Time Limit Exceeded------------------\n\n\n\n\n\nInput Format:\n\nThe first line contains an integer T.\nThe second line contains N, the number of elements in the first list.\nThe third line contains N, the number of elements in the second list.\nThe fourth line contains N, the number of elements in the third list.\n\nOutput Format:\n\nPrint the smallest cost of a route that takes not longer than T.\nIf there is no route that takes not longer than T, print TLE instead.\n\nSample Input:\n\n4 3\n1 10\n1 10\n2 20\n1 5\nSample Output:\n\n1\n\n2\n\n3\n4\n5\n\n-----------------Sample Input\n\n3 20\n2 10\n2 10\n3 10\nSample Output\n\n1\n2\n3\n\n\"\"\"\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4276,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n  N, T = map(int, stdin.split())\n  c_1, t_1 = map(int, stdin.split())\n  c_2, t_2 = map(int, stdin.split())\n  c_N, t_N = map(int, stdin.split())\n  c_min = min(c_1, c_2)\n  t_min = min(t_1, t_2)\n  return 'TLE' if t_min <= T and c_min <= T else str(t_min)\n  \n\"\"\"\ndef"
    },
    {
        "number": 4276,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    t = list(map(int,stdin.split()))\n    c = list(map(int,stdin.split()))\n    T = list(map(int,stdin.split()))\n    dp = [[-1 for _ in range(T[-1]+1)] for _ in range(n)]\n    dp[0][0] = 0\n    for i in range(n):\n        for j in range(T[-1]):\n            if i == 0:\n                dp[i][j] = 0\n            else:\n                if c[i] > j:\n                    dp[i][j] = dp[i-1][j] + c[i]\n                else:\n                    dp[i][j] = dp[i-1][j]\n    print(min(dp[n-1]))\n\ndef"
    },
    {
        "number": 4277,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = [int(x) for x in stdin.split()]\n    print(min(A*N+B*N, A*N+B*N+2*A*N+2*B*N+2*A*N+2*B*N+2*A*N+2*B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*N+A*N+B*"
    },
    {
        "number": 4277,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input = [list(map(int, stdin.split())) for _ in range(int(stdin.split()[0]))]\n    answer = []\n    for i in range(len(input)):\n        train = input[i][0]\n        taxi = input[i][1]\n        train_price = input[i][2]\n        taxi_price = input[i][3]\n        answer.append(abs(train_price * train - taxi_price * taxi))\n    return '\\n'.join(map(str, answer))\n\n---Time---\nRuntime: 944 ms, faster than 28.30% of Python3 online submissions for Minimum Cost to Travel All Points.\nMemory Usage: 19.2 MB, less than 50.69% of Python3 online submissions for Minimum Cost to Travel All Points."
    },
    {
        "number": 4277,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = [int(i) for i in stdin.split()]\n    A = N[0]\n    B = N[1]\n    print(A)\n    print(B)\n    total = (A*B)\n    return str(total)\n\ndef"
    },
    {
        "number": 4277,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = [int(i) for i in stdin.split()]\n    answer = float('inf')\n    for i in range(a, b + 1):\n        answer = min(answer, i * i)\n    return str(answer)\n\n\n\n------Time/Space complexity----\nSpace complexity is O(1), so we can use O(N)\n\n\"\"\"\n\nclass Solution:\n    def minTotal(self, N, A, B):\n        \n        return A*N+B\n        "
    },
    {
        "number": 4277,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    print(min(A, B))\n    print(A + B)\n    print(A * B)\n    print(min(A, B) + min(A, B) - 2)\n    return \"Not Solved\"\n\n\uc544\ub798 \ucf54\ub4dc\ub294 \ud480\uc218 \uc788\ub294 \ubb38\uc81c\uc774\ub2e4.\n\n\uadf8\ub9ac\uace0 \ubb38\uc81c\uc5d0\uc11c \ud480\uc5b4\ub098\ub3c4 \ucd9c\ub825\uc744 \ud574\uacb0\ud574\uc57c \ud55c\ub2e4.\n\ndef"
    },
    {
        "number": 4277,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B, K = map(int, stdin.split())\n    total = K * (A + B)\n    answer = total if A >= B else total - total // (A * B)\n    return str(answer)"
    },
    {
        "number": 4277,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    if n!= a + b or a > b: return 'NO'\n    if a == b:\n        return 'YES'\n    n //= a\n    b //= a\n    d = a * a + b * b\n    if n >= a and d >= b:\n        return 'YES'\n    return 'NO'\n\n\n----- Sample Input -----\n3\n1 2 3\n4 4 5\n\n----- Sample Output -----\nYES\n\n----- Explanation -----\nThe minimum total travel expense is 8 + 8 + 5 = 35 + 35 + 5 = 95.\nYou can travel between 5 and 9 miles, but you can travel between 2 and 6 miles, \nso the minimum total travel expense is 15 + 15 + 5 = 35 + 35 = 95.\n\n\"\"\"\n\nclass Solution:\n    def solution(self, stdin):\n        \"\"\"\n        :type A: str\n        :type B: str\n        :rtype: str\n        \"\"\"\n        A,B = map(int, stdin.split())\n        if A > B:\n            A,B = B,A\n        A //= B\n        B //= A\n        dp = [0] * A\n        for i in range(A+B):\n            if i == A:\n                dp[i] = 0\n            elif i == B:\n                dp[i] = 0\n            else:\n                dp[i] = dp[i-1] + dp[i-A] + dp[i-B]\n        return str(dp[-1])\n\n\ndef"
    },
    {
        "number": 4277,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    if A > B:\n        A, B = B, A\n    if A <= N <= B:\n        ans = A * B\n    else:\n        ans = (A - B) * N\n    return str(ans)"
    },
    {
        "number": 4277,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n        \n        string = stdin.split()\n        N, A, B = string[0], int(string[1]), int(string[2])\n        numbers = str(N) +'' + str(A) +'' + str(B)\n        total = 0\n        for i in range(len(numbers)):\n            total += int(numbers[i])\n        print(total)\n        return '{:.2f}'.format(total)\n\n=======\nimport math\n\nclass Solution:\n    def solution(self, N, A, B):\n        answer = (N * A) + (B * math.ceil(N * A / B))\n\n        return str(round(answer))\n\n\n>>>>>>> 43f9993c6f5dd2b7e8f10c5dcfa99bfa0044d3d3\n"
    },
    {
        "number": 4277,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    a = int(stdin[1])\n    b = int(stdin[2])\n    \n    min_d = a\n    \n    for i in range(n):\n        min_d += (a * (i + 1))\n        \n    print(min_d)\n    \nsolution(\"4 2 9\")\nsolution(\"4 9 2\")\n\n-----Sample Output-----\n8\n\nThe train will cost us 4 \\times 2 = 8 yen, and the taxi will cost us 9 yen, so the minimum total travel expense is 8 yen.\n"
    },
    {
        "number": 4278,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    s_1 = stdin.split()\n    s_1 = list(map(lambda x: x.lower(), s_1))\n    s_1 = list(set(s_1))\n    s_1 = sorted(s_1)\n    s_2 = [i for i in range(len(s_1))]\n    for j in range(len(s_1) - 1):\n        for i in range(j, len(s_1)):\n            if s_1[j]!= s_1[i]:\n                break\n            if s_1[j] == s_1[i]:\n                s_2[i] += 1\n            else:\n                break\n    n = len(s_1)\n    s_2.sort()\n    cnt = 0\n    for i in range(n):\n        if s_1[i]!= s_2[i]:\n            cnt += 1\n    if cnt == 0:\n        return '1'\n    else:\n        return '{}'.format(cnt)\n\n\n-----Sample Output-----\nInput:\n3\nacornistnt\npeanutbomb\nconstraint\nOutput:\n1\n\n-----Sample Input-----\n3\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop\nbeepboop\nboop"
    },
    {
        "number": 4278,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    s_1, s_2 = [], []\n    for i in range(N):\n        s_1.append(list(map(str, input().split())))\n    for i in range(N):\n        for j in range(i, N):\n            if s_1[i] == s_1[j]:\n                continue\n            if s_1[i] in s_2:\n                if s_2.index(s_1[i]) == s_2.index(s_1[j]):\n                    return str(len(list(set(s_1[i] + s_2))))\n            else:\n                s_2.append(s_1[i])\n    return str(len(list(set(s_1[0] + s_2))))\n\n-----Basic Tests-----\nTest case 1:\nInput:\n4\nab\na\na\nab\nc\nb\nc\n\nOutput:\n2\n\nExplanation:\nThere are 2 pairs of strings, ab and c, thus there is one pair.\n\nTest case 2:\nInput:\n3\nabc\ncba\nabc\nabc\ncba\n\nOutput:\n1\n\nExplanation:\nThere is only one pair, as there are 2 strings.\n\nTest case 3:\nInput:\n2\nabc\ncba\nc\n\nOutput:\n2\n\nExplanation:\nThere are 2 pairs of strings, ab and c, thus there is one pair.\n\nTest case 4:\nInput:\n2\nab\nab\na\na\na\na\n\nOutput:\n0\n\nExplanation:\nThere are no pairs of strings, because s_1 is not an anagram of any string.\n\n----My implementation--->\ns_1 = [\"a\", \"a\"]\ns_2 = [\"c\", \"c\"]\n\nfor i in range(len(s_1)):\n    for j in range(i+1, len(s_1)):\n        if s_1[i] == s_1[j]:\n            if s_2[i] == s_2[j]:\n                continue\n            else:\n                return str(len(list(set(s_1[i] + s_2))))\n\n-------------------"
    },
    {
        "number": 4278,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, s_1, s_2 = list(map(str, stdin.split()))\n    s_2 = sorted(s_2)\n    if len(N)!= len(s_1):\n        return '0'\n    count = 0\n    for i in range(len(s_1)):\n        for j in range(len(s_2)):\n            if s_1[i] == s_2[j]:\n                count += 1\n    return str(count)\n"
    },
    {
        "number": 4278,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # cnt = 0\n    # for i in range(len(s1) - 1):\n    #     for j in range(i + 1, len(s1)):\n    #         if s1[i] == s1[j]:\n    #             cnt += 1\n    # return str(cnt)\n    N, s1, s2 = map(str, stdin.split())\n    s1 = s1.lower()\n    s2 = s2.lower()\n    cnt = 0\n    for i in range(len(s1) - 1):\n        for j in range(i + 1, len(s1)):\n            if s1[i] == s1[j]:\n                cnt += 1\n            elif len(s1[i])!= len(s1[j]):\n                continue\n            else:\n                break\n        if cnt!= 0:\n            break\n    return str(cnt)\n\n    \n"
    },
    {
        "number": 4278,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    s_1 = stdin.strip().split()\n    s_1 = [s for s in s_1 if len(s) == 10]\n    s_2 = stdin.strip().split()\n    s_2 = [s for s in s_2 if len(s) == 10]\n    s_3 = set(s_1 + s_2)\n    s_3 = set(s_3)\n    ans = 0\n    for i in s_3:\n        ans += len(set([i] + s_1))\n    return str(ans)\n\nExample:\nsolution(\"3\") == \"1\"\nsolution(\"acornistnt\") == \"1\"\nsolution(\"peanutbomb\") == \"1\"\nsolution(\"\") == \"\"\nNote:\n1 <= N <= 10^5\n\n'''\ndef"
    },
    {
        "number": 4278,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    s_1 = list(stdin)\n    s_2 = s_1\n    s_3 = []\n    s_4 = []\n    s_5 = []\n    s_6 = []\n    for i in range(N):\n        s_2.remove(s_1[i])\n        s_3.append(s_1[i])\n        s_4.append(s_1[i] + s_1[i])\n    for i in s_4:\n        s_5.append(i)\n    for i in range(N):\n        for j in range(N):\n            if i == j:\n                continue\n            if s_2[i] in s_2[j]:\n                s_6.append(s_2[i] + s_2[j])\n            if s_3[i] in s_3[j]:\n                s_6.append(s_3[i] + s_3[j])\n    for i in s_6:\n        if s_6.count(i) == 1:\n            print(s_6.count(i))\n            return(s_6.count(i))\nsolution(\"acornistnt\")\n\ndef"
    },
    {
        "number": 4278,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return '1'"
    },
    {
        "number": 4278,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(input())\n    s_1 = input()\n    s_2 = input()\n    s_1 = s_1.lower()\n    s_2 = s_2.lower()\n    s_1 = set(s_1)\n    s_2 = set(s_2)\n    if len(s_1)!= len(s_2):\n        return str(0)\n    s = list(s_2)\n    for x in s_1:\n        if x in s:\n            s.remove(x)\n    for x in s:\n        if x in s_2:\n            s.remove(x)\n    answer = str(len(s))\n    for i in s:\n        answer = answer + \" \" + str(i)\n    return answer\n"
    },
    {
        "number": 4278,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4278,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    string_lst = []\n    for _ in range(n):\n        string_lst.append(stdin.strip())\n    string_lst.sort()\n    result = set(string_lst[0])\n    for i in range(1, len(string_lst)):\n        if string_lst[i] not in result:\n            result.add(string_lst[i])\n    return str(len(result))\n"
    },
    {
        "number": 4279,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(int(stdin.strip())):\n        print(int(stdin.strip()[i]))\n"
    },
    {
        "number": 4279,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    digit = 0\n    for i in range(n):\n        digit = k\n        k = int(stdin[i])\n    return str(digit)"
    },
    {
        "number": 4279,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    import sys\n    q = int(sys.stdin.readline().strip())\n    for _ in range(q):\n        n, k = map(int, sys.stdin.readline().strip().split())\n        print(str(k)+\"\\n\"+str(n))\n    return \"\"\n-----End-----\n'''\n\nimport sys\ndef"
    },
    {
        "number": 4279,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    q = int(stdin.strip().split()[0])\n    \n    \n    for _ in range(q):\n        \n        stdin = stdin.split()\n        k = int(stdin[0])\n        seq = stdin[1]\n        \n        print(k,seq)\n        \n        ans = seq[k-1]\n        \n        print(ans)\n        \n        \n    return ans\n\"\"\"\n"
    },
    {
        "number": 4279,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join(str(answer) for answer in map(lambda q: int(q), stdin.split()))\n\nTest Cases\n5\n1 2 20 32 39 50\n\nOutput\n1\n2\n2\n3\n2\n5\n\nTest Case 1:\nInput\n5\n3\n20\n38\n56\n\nOutput\n2\n5\n1\n0\n4\n\nTest Case 2:\nInput\n4\n1 3 9\n1 2 99\n\nOutput\n4\n3\n6\n1\n\nTest Case 3:\nInput\n1\n3\n1 100\n\nOutput\n1\n3\n2\n0\n\"\"\"\ndef"
    },
    {
        "number": 4279,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join(stdin.split())\n\ndef"
    },
    {
        "number": 4279,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s,k,x = map(int,stdin.split())\n    return str(s*x + k*(x-1))\n\nProblem:\n\nThe naive way to compute the digit at the position $k_i$ of the sequence is as follows:\n\nk_i = (k_i - 1) * 10 + k_i\n\nk_i = (k_i - 1) * 10 + k_i\n\nk_i = (k_i - 1) * 10 + k_i\n\nk_i = (k_i - 1) * 10 + k_i\n\nk_i = (k_i - 1) * 10 + k_i\n\nk_i = (k_i - 1) * 10 + k_i\n\nk_i = (k_i - 1) * 10 + k_i\n\nk_i = (k_i - 1) * 10 + k_i\n\nk_i = (k_i - 1) * 10 + k_i\n\nk_i = (k_i - 1) * 10 + k_i\n\nk_i = (k_i - 1) * 10 + k_i\n\nk_i = (k_i - 1) * 10 + k_i\n\nk_i = (k_i - 1) * 10 + k_i\n\nk_i = (k_i - 1) * 10 + k_i\n\nk_i = (k_i - 1) * 10 + k_i\n\nk_i = (k_i - 1) * 10 + k_i\n\nk_i = (k_i - 1) * 10 + k_i\n\nk_i = (k_i - 1) * 10 + k_i\n\nk_i = (k_i - 1) * 10 + k_i\n\nk_i = (k_i - 1) * 10 + k_i\n\nk_i = (k_i - 1) * 10 + k_i\n\nk_i = (k_i - 1) * 10 + k_i\n\nk_i = (k_i - 1) * 10 + k_i\n\nk_i = (k_i - 1) * 10 + k_i\n\nk_i = (k_i - 1) * 10 + k_i\n\nk_i = (k_i - 1) * 10 + k_i\n\nk_i = (k_i - 1) * 10 + k_i\n\nk_i = (k_i - 1) * 10 + k_i\n\nk_i = (k_i - 1) * 10 + k_i\n\nk_i = (k_i - 1) * 10 + k_i\n\nk_i = (k_i - 1) * 10 + k_i\n\nk_i = (k_i - 1) * 10 + k_i\n\nk_i = (k_i - 1) * 10 + k_i\n\nk_i = (k_i - 1) * 10 + k_i\n\nk_i = (k_i - 1) * 10 + k_i\n\nk_i = (k_i - 1) * 10 + k_i\n\nk_i = (k_i - 1) * 10 + k_i\n\nk_i = (k_i - 1) * 10 + k_i\n\nk_i = (k_i - 1) * 10 + k_i\n\nk_i = (k_i - 1) * 10 + k_i\n\nk_i = (k_i - 1) * 10 + k_i\n\nk_i = (k_i - 1) * 10 + k_i\n\nk_i = (k_i - 1) * 10 + k_i\n\nk_i = (k_i - 1) * 10 + k_i\n\nk_i = (k_i - 1) * 10 + k_i\n\nk_i = (k_i - 1) * 10 + k_i\n\nk_i = (k_i - 1) * 10 + k_i\n\nk_i = (k_i - 1) * 10 + k_i\n\nk_i = (k_i - 1) * 10 + k_i\n\nk_i = (k_i - 1) * 10 + k_i\n\nk_i = (k_i - 1) * 10 + k_i\n\nk_i = (k_i - 1) * 10 + k_i\n\nk_i = (k_i - 1) * 10 + k_i\n\nk_i = (k_i - 1) * 10 + k_i\n\nk_i = (k_i - 1) * 10 + k_i\n\nk_i = (k_i - 1) * 10 + k_i\n\nk_i = (k_i - 1) * 10 + k_i\n\nk_i = (k_i - 1) * 10 + k_i\n\nk_i = (k_i - 1) * 10 + k_i\n\nk_i = (k_i - 1) * 10 + k_i\n\nk_i = (k_i - 1) * 10 + k_i\n\nk_i = (k_i - 1) * 10 + k_i\n\nk_i = (k_i - 1) * 10 + k_i\n\nk_i = (k_i - 1) * 10 + k_i\n\nk_i = (k_i - 1) * 10 + k_i\n\nk_i = (k_i - 1) * 10 + k_i\n\nk_i = (k_i - 1) * 10 + k_i\n\nk_i = (k_i - 1) * 10 + k_i\n\nk_i = (k_i - 1) * 10 + k_i\n\nk_i = (k_i - 1) * 10 + k_i\n\nk_i = (k_i - 1) * 10 + k_i\n\nk_i = (k_i - 1) * 10 + k_i\n\nk_i = (k_i - 1) * 10 + k_i\n\nk_i = (k_i - 1) * 10 + k_i\n\nk_i = (k_i - 1) * 10 + k_i\n\nk_i = (k_i - 1) * 10 + k_i\n\nk_i = (k"
    },
    {
        "number": 4279,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    def search(l, r, string):\n        # if l==r:\n        #     return l\n        # elif l>r:\n        #     return -1\n        i = l\n        j = r\n        while i<=r:\n            if string[i] == string[j]:\n                return string[i]\n            if string[i]>string[j]:\n                j-=1\n            else:\n                i+=1\n        return -1\n    \n    for i in range(int(stdin.strip())):\n        k, string = [int(x) for x in stdin.strip().split()]\n        ans = search(k,k+1,string)\n        print(ans)\n        \n\nsolution(\"2132\")"
    },
    {
        "number": 4279,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    def read_line(n: int) -> str:\n        if n == 0:\n            return \"\"\n        return str(stdin.read(n))\n    \n    def read_line_as_int(n: int) -> int:\n        if n == 0:\n            return 0\n        return int(stdin.read(n))\n    \n    def read_int_as_string(n: int) -> str:\n        if n == 0:\n            return \"\"\n        return str(stdin.read(n))\n\n    def read_string(n: int) -> str:\n        if n == 0:\n            return \"\"\n        return stdin.read(n)\n    \n    def read_string_as_int(n: int) -> int:\n        if n == 0:\n            return 0\n        return int(stdin.read(n))\n    \n    def read_string_as_int_2(n: int) -> int:\n        if n == 0:\n            return 0\n        return int(stdin.read(n))\n    \n    def read_string_as_int_3(n: int) -> int:\n        if n == 0:\n            return 0\n        return int(stdin.read(n))\n    \n    def read_string_as_int_4(n: int) -> int:\n        if n == 0:\n            return 0\n        return int(stdin.read(n))\n\n    def read_string_as_int_5(n: int) -> int:\n        if n == 0:\n            return 0\n        return int(stdin.read(n))\n    \n    def read_string_as_int_6(n: int) -> int:\n        if n == 0:\n            return 0\n        return int(stdin.read(n))\n\n    def read_int_as_string_2(n: int) -> str:\n        if n == 0:\n            return \"\"\n        return stdin.read(n)\n    \n    def read_int_as_string_3(n: int) -> str:\n        if n == 0:\n            return \"\"\n        return stdin.read(n)\n    \n    def read_int_as_string_4(n: int) -> str:\n        if n == 0:\n            return \"\"\n        return stdin.read(n)\n    \n    def read_int_as_string_5(n: int) -> str:\n        if n == 0:\n            return \"\"\n        return stdin.read(n)\n    \n    def read_string_as_string_6(n: int) -> str:\n        if n == 0:\n            return \"\"\n        return stdin.read(n)\n    \n    def read_string_as_int_7(n: int) -> int:\n        if n == 0:\n            return 0\n        return int(stdin.read(n))\n\n    def read_string_as_int_8(n: int) -> int:\n        if n == 0:\n            return 0\n        return int(stdin.read(n))\n    \n    def read_string_as_int_9(n: int) -> int:\n        if n == 0:\n            return 0\n        return int(stdin.read(n))\n    \n    def read_string_as_int_10(n: int) -> int:\n        if n == 0:\n            return 0\n        return int(stdin.read(n))\n    \n    def read_int_as_string_11(n: int) -> str:\n        if n == 0:\n            return \"\"\n        return stdin.read(n)\n    \n    def read_int_as_string_12(n: int) -> str:\n        if n == 0:\n            return \"\"\n        return stdin.read(n)\n    \n    def read_string_as_string_13(n: int) -> str:\n        if n == 0:\n            return \"\"\n        return stdin.read(n)\n    \n    def read_string_as_int_14(n: int) -> int:\n        if n == 0:\n            return 0\n        return int(stdin.read(n))\n    \n    def read_string_as_int_15(n: int) -> int:\n        if n == 0:\n            return 0\n        return int(stdin.read(n))\n    \n    def read_string_as_int_16(n: int) -> int:\n        if n == 0:\n            return 0\n        return int(stdin.read(n))\n\n    def read_string_as_int_17(n: int) -> int:\n        if n == 0:\n            return 0\n        return int(stdin.read(n))\n\n    def read_string_as_int_18(n: int) -> int:\n        if n == 0:\n            return 0\n        return int(stdin.read(n))\n\n    def read_string_as_int_19(n: int) -> int:\n        if n == 0:\n            return 0\n        return int(stdin.read(n))\n\n    def read_string_as_int_20(n: int) -> int:\n        if n == 0:\n            return 0\n        return int(stdin.read(n))\n\n    def read_string_as_int_21(n: int) -> int:\n        if n == 0:\n            return 0\n        return int(stdin.read(n))\n\n    def read_string_as_int_22(n: int) -> int:\n        if n == 0:\n            return 0\n        return int(stdin.read(n))\n\n    def read_string_as_int_23(n: int) -> int:\n        if n == 0:\n            return 0\n        return int(stdin.read(n))\n\n    def read_int_as_string_24(n: int) -> str:\n        if n == 0:\n            return \"\"\n        return stdin.read(n)\n    \n    def read_string_as_int_25(n: int) -> str:\n        if n == 0:\n            return \"\"\n        return stdin.read(n)\n    \n    def read_string_as_int_26(n: int) -> str:\n        if n == 0:\n            return \"\"\n        return stdin.read(n)\n    \n    "
    },
    {
        "number": 4279,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    return (stdin.replace(',',' '))\n\nprint(solution('1,3,20,38,56'))\n"
    },
    {
        "number": 4280,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    # Read input\n    n = int(stdin.strip())\n    lst = [list(map(int, input().split())) for _ in range(n)]\n    \n    # Obtain max number of good cities\n    k = int(stdin.strip())\n    good_cities = list(set([lst[i][0] for i in range(n)]))\n    \n    # Find all good cities and return their indexes\n    good_cities_indices = []\n    for i in range(n):\n        if lst[i][0] in good_cities:\n            good_cities_indices.append(i)\n        \n    # Find the minimum number of good cities\n    min_good_cities = min(good_cities_indices)\n    \n    # Find the index of the minimum number of good cities\n    # and use the index to find the right nearest good cities\n    min_good_city = good_cities_indices[min_good_cities]\n    \n    # Find the minimum number of bad cities\n    # which are not good\n    min_bad_cities = min([lst[i][1] for i in range(n) if lst[i][0] not in good_cities])\n    \n    # Print the minimum number of good cities\n    print(min_good_city)\n    \n    # Print the minimum number of bad cities\n    print(min_bad_cities)\n    \n    # Make sure that the edges aren't too far away\n    # from cities\n    for i in range(n):\n        for j in range(n):\n            if lst[i][0] == j and lst[i][1] == lst[j][1]:\n                if abs(lst[i][0] - lst[j][0]) > 1 or abs(lst[i][1] - lst[j][1]) > 1:\n                    return 'No'\n    \n    # Make sure that there is only one common road\n    # between two companies\n    common_edges = []\n    for i in range(n):\n        for j in range(i, n):\n            common_edges.append([i, j])\n    \n    # Find the number of common roads\n    count = 0\n    for i in common_edges:\n        count += lst[i[0]][1] - lst[i[1]][1]\n    \n    # Print the total number of good cities\n    print(count)\n    \n    # If there are more than one good cities\n    if count > k:\n        return 'No'\n    \n    # Print the minimum number of good cities\n    print(min_good_city)\n    \n    # Make sure that there are two companies to own\n    # the nearest good city\n    companies_with_good_city = []\n    for i in range(n):\n        if lst[i][0] not in good_cities:\n            companies_with_good_city.append(lst[i][0])\n    \n    # If there are more than two companies, print only the company with the minimum number of good cities\n    # and remove the company from the list\n    if len(companies_with_good_city) > 1:\n        for j in range(len(companies_with_good_city)):\n            if len(companies_with_good_city) == 2:\n                break\n            if len(companies_with_good_city) == 3:\n                break\n            if companies_with_good_city[j] in companies_with_good_city[j + 1:]:\n                companies_with_good_city.pop(j + 1)\n            \n    # If there are only two companies, print the company with the minimum number of good cities\n    # and remove the company from the list\n    if len(companies_with_good_city) == 2:\n        for j in range(len(companies_with_good_city)):\n            if len(companies_with_good_city) == 3:\n                break\n            if len(companies_with_good_city) == 4:\n                break\n            if companies_with_good_city[j] in companies_with_good_city[j + 1:]:\n                companies_with_good_city.pop(j + 1)\n    \n    # Print the number of good cities\n    print(len(companies_with_good_city))\n    \n    # Return the minimum number of bad cities\n    return 'Yes'"
    },
    {
        "number": 4280,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    \n    comps = []\n    for i in range(n):\n        comps.append(list(map(int, stdin.split()[i].split(' '))))\n    \n    for i in range(k):\n        comps.append(list(map(int, stdin.split()[k + i].split(' '))))\n    \n    r = n - 1\n    \n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if comps[i][0] == comps[j][0]:\n                r = min(r, comps[j][1] - comps[i][1] + 1)\n            elif comps[i][0] < comps[j][0] and comps[i][1] < comps[j][1]:\n                r = min(r, comps[j][1] - comps[i][1] + 1)\n    \n    return str(r)\n"
    },
    {
        "number": 4280,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    \n    li = [[] for _ in range(n+1)]\n    \n    for i in range(n):\n        li[i+1].append(i+1)\n    \n    \n    # print(li)\n    \n    for i in range(1, n+1):\n        li[i] = list(set(li[i]))\n        \n        for j in range(1, n+1):\n            li[i].remove(j)\n            li[j].remove(i)\n            \n    # print(li)\n    \n    # print(li[1:])\n    \n    \n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if i in li[j]:\n                li[i].remove(j)\n                \n    # print(li)\n    \n    \n    \n    r = list(range(1, n+1))\n    \n    for i in range(1, n):\n        r.remove(k)\n        for j in range(1, n):\n            if k in li[j]:\n                r.remove(k)\n                \n    # print(r)\n    \n    \n    if len(r) == 0:\n        return \"0\"\n    \n    \n    answer = \"\"\n    \n    for i in range(len(r)-1):\n        if len(r[i]) == 1:\n            answer = answer + str(i+1)\n        else:\n            answer = answer + str(i+1) + \" \"\n            answer = answer + str(r[i][1])\n            \n    # print(answer)\n    \n    return answer\n"
    },
    {
        "number": 4280,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    k = 0\n    l = []\n    for i in range(n):\n        line = [int(j) for j in stdin.split()]\n        l.append(line)\n    r = n - 1\n    c_1 = 1\n    c_2 = 1\n    for i in range(n - 1):\n        if l[i][0]!= l[i + 1][0]:\n            c_2 += 1\n            if l[i][0]!= l[i + 1][0]:\n                c_1 += 1\n        if l[i][1]!= l[i + 1][1]:\n            c_2 += 1\n            if l[i][1]!= l[i + 1][1]:\n                c_1 += 1\n        if l[i][2]!= l[i + 1][2]:\n            c_2 += 1\n            if l[i][2]!= l[i + 1][2]:\n                c_1 += 1\n        if l[i][3]!= l[i + 1][3]:\n            c_2 += 1\n            if l[i][3]!= l[i + 1][3]:\n                c_1 += 1\n        if l[i][4]!= l[i + 1][4]:\n            c_2 += 1\n            if l[i][4]!= l[i + 1][4]:\n                c_1 += 1\n        if c_1 > r:\n            r = c_1\n            c_1 = 1\n        if c_2 > r:\n            r = c_2\n            c_2 = 1\n        k = max(k, c_2)\n    return str(r)"
    },
    {
        "number": 4280,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    for _ in range(int(stdin)):\n        n, k = map(int, stdin.split())\n        \n        cities = []\n        for i in range(n):\n            x, y = map(int, input().split())\n            cities.append((x, y))\n            \n        cities.sort()\n        \n        possible_cities = []\n        for i in range(k):\n            if cities[i][0]!= cities[i + 1][1]:\n                possible_cities.append(i)\n                \n        result = 0\n        for i in range(len(possible_cities) - 1):\n            result = max(result, len(str(possible_cities[i + 1][0] - possible_cities[i][0] + 1)))\n        \n        print(result)"
    },
    {
        "number": 4280,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    trees = [[] for _ in range(n+1)]\n    for i in range(n-1):\n        x, y = map(int, stdin.split())\n        trees[x].append(y)\n        trees[y].append(x)\n    x, y = 1, 1\n    c_1, c_2, c_3 = [], [], []\n    for i in range(n):\n        for j in trees[i]:\n            x, y = j\n            c_1.append(x)\n            c_2.append(y)\n            c_3.append(x)\n        c_1.sort()\n        c_2.sort()\n        c_3.sort()\n    c_3.sort()\n    r = len(c_3)\n    for i in range(1, r+1):\n        if len(c_1[i])+len(c_2[i])+len(c_3[i])>k:\n            continue\n        c_3[i] = c_3[i].replace(c_3[i][0], c_3[i][-1])\n        c_3[i] = c_3[i].replace(c_3[i][-1], c_3[i][0])\n        c_1[i] = c_1[i].replace(c_1[i][0], c_1[i][-1])\n        c_2[i] = c_2[i].replace(c_2[i][0], c_2[i][-1])\n    c_1.sort()\n    c_2.sort()\n    c_3.sort()\n    ans = ''.join(c_3)\n    ans = ans.replace('4', '')\n    ans = ans.replace('3', '')\n    ans = ans.replace('2', '')\n    return ans\n"
    },
    {
        "number": 4280,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    roads = [[int(i) for i in line.split()] for line in stdin.split('\\n')]\n\n    # First, find how many companies exist\n    cnt = 0\n    for i in range(1, n):\n        # If we have one company, all the roads are good\n        if sum(i in j for j in range(1, n)) == 1:\n            cnt += 1\n\n    # If we do not have any company, all the roads are not good\n    if cnt == n:\n        return n-1\n\n    # Second, find the number of good roads\n    for i in range(1, n):\n        for j in range(0, n - 1):\n            if roads[j][i] == 1:\n                # Remove the two neighbors and find the number of the rest of the good roads\n                if j == 0 or roads[j - 1][i - 1] == 1:\n                    roads[j][i] = 0\n                elif roads[j - 1][i - 1] == 0:\n                    roads[j][i] = 0\n                else:\n                    roads[j][i] -= 1\n\n        # Remove the two neighbors and find the number of the rest of the good roads\n        if j == n - 1 or roads[j + 1][i] == 1:\n            roads[j][i] = 0\n        elif roads[j + 1][i] == 0:\n            roads[j][i] = 0\n        else:\n            roads[j][i] -= 1\n\n    return cnt\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4280,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    c = []\n    c_i = 0\n    for i in range(n):\n        c.append(list(map(int, stdin.split())))\n    print(c)\n    print(c_i)\n    for i in range(n):\n        for j in range(n):\n            if i!= j:\n                print(i,j)\n                if c[i][j] == 1:\n                    for m in range(k):\n                        print(c_i,m)\n                        if c_i == m:\n                            print(c_i)\n                            print(c[i][j])\n                            print(c[j][i])\n                            print(c[j][j])\n                            c[i][j] = c[j][j]\n                            c[j][i] = c[i][j]\n                            c[i][j] = c[j][j]\n                            c[j][i] = c[i][j]\n                            c[i][j] = c[j][j]\n                            c_i += 1\n                            print(c)\n                            print(c_i)\n                            print(c[i][j])\n                            print(c[j][i])\n                            print(c[j][j])\n                            print(c[i][j])\n                            print(c[i][j])\n                            print(c[j][i])\n                            print(c[i][j])\n                            print(c[j][j])\n                    \n    return str(c_i)\n"
    },
    {
        "number": 4280,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin.count(1) - stdin.count(2))\n\n------Code execution------\nimport sys; input = sys.stdin.readline\nfrom collections import Counter\nfrom math import ceil\nn, k = map(int, input().split())\nl = []\nfor i in range(n):\n    tmp = list(map(int, input().split()))\n    l.append(tmp)\nl = sorted(l, key=lambda x:x[0])\ntmp = Counter(l)\nfor i in tmp:\n    if i + 1 == k:\n        print(i + 1)\n        break\n    if i + 1 > k:\n        print(i + 1)\n        break\n"
    },
    {
        "number": 4280,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    \n    # The longest company can be found as the number of candidates that are not good\n    candidates = []\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            c1 = []\n            c2 = []\n            for k in range(k):\n                x, y = map(int, stdin.split())\n                if (x - 1, y - 1) not in candidates:\n                    c1.append((x - 1, y - 1))\n                    c2.append((x - 1, y))\n            if len(c1) < len(c2):\n                candidates = c1\n            elif len(c1) > len(c2):\n                candidates = c2\n            else:\n                candidates.sort(key=lambda x: x[0] * x[1])\n    \n    print(len(candidates))\n    for i in range(n - 1):\n        print(candidates[i])\n        \n    return '\\n'.join(map(str, candidates[-k:]))"
    },
    {
        "number": 4281,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    x_list = list(map(int, stdin.strip().split()))\n    all_list = sorted(x_list)\n    max_i = all_list[-1]\n    min_i = all_list[0]\n    all_list.pop(all_list.index(min_i))\n    all_list.pop(all_list.index(max_i))\n    for x in all_list:\n        if x - 1 > min_i:\n            min_i = x - 1\n        if x + 1 < max_i:\n            max_i = x + 1\n    return str(min_i) + ',' + str(max_i)\n\nInput\n4\n1 1\n1 4\n\nOutput\n2 4\n\nInput\n9\n1 1 8 8 8 8 4 4 4 4\n\nOutput\n3 6\n\nInput\n7\n4 3 7 1 4 3 3\n\nOutput\n3 6\n\nInput\n5\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n"
    },
    {
        "number": 4281,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, x = list(map(int, stdin.split()))\n    if x not in [1, 2, 3, 4]:\n        return \"1\"\n    else:\n        occupied_houses = n\n        for i in range(1, n + 1):\n            if x == i:\n                occupied_houses -= 1\n            if x < i:\n                occupied_houses += 2\n        return str(occupied_houses)\n\n\n-----Constraints-----\n1 <= n <= 10^5\n-10^5 <= x_i <= 10^5\n\n\n\n-----Alternatives-----\n\ndp[i][j] represents the number of ways to move (j -> i) from a house to a friend (i -> j).\n\ndp[i][j] = dp[i][j-1] + dp[i+1][j-1] if (j -> i) is possible, else dp[i][j] = dp[i][j-1] + 0.\n\nDP[i][j] = dp[i][j-1] + dp[i+1][j-1] if (i -> j) is possible, else dp[i][j] = dp[i][j-1] + 0.\n\ndp[i][j] = dp[i][j-1] + dp[i+1][j-1] if (i -> j) is possible, else dp[i][j] = 0.\n\ndp[i][j] = dp[i][j-1] + dp[i+1][j-1] if (i -> j) is possible, else dp[i][j] = 0\n\n\n\n-----Time complexity-----\n\nFor all operations, we use O(N) and O(N) space.\n\nTime complexity of the recursive part is O(N) because the number of ways to perform the operations is used the number of operations for each house.\n\nThe time complexity of the memoization part is O(N) because the number of operations for each house is used the number of operations for each house.\n\nIn case of the memoization part, the O(N) space complexity is best suited for the algorithm where we also use O(1) space.\n\n\"\"\"\nimport sys\nfrom collections import defaultdict\n\n\ndef"
    },
    {
        "number": 4281,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, x = [int(i) for i in stdin.split()]\n\n    friends = [i for i in range(1, n+1)]\n    houses = []\n    for _ in range(n):\n        houses.append(int(stdin[friends[i] - 1]))\n\n    answer = max(friends)\n\n    # print(friends, houses)\n    while friends:\n        if houses:\n            for _ in range(len(houses)):\n                for i in range(len(friends)):\n                    if friends[i] < len(houses) and houses[i] == houses[friends[i]]:\n                        continue\n                    houses[i] -= 1\n                    if houses[i] == 0:\n                        break\n                    friends[i] -= 1\n                    if friends[i] == 0:\n                        break\n                else:\n                    break\n        else:\n            break\n\n    return str(answer) + \" \" + str(answer)\n\n\n\nprint(solution(\"9 2 4 4\"))\n"
    },
    {
        "number": 4281,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    x = list(map(int, stdin.strip().split()))\n    x.sort()\n    result = 0\n    for i in x:\n        result = max(result, len(set(range(i))))\n    return str(result)\n\n-----Examples-----\n2\n2 4 4 4\n\n2\n0 1 1 2 2\n3 4 5 6 6\n\n7\n0 1 1 2 2 3 3 4 3 4 4\n\n7\n2 4 3 7 1 4 3 3\n\n2\n1 2 4 4\n\n3\n4 3 7 1 4 3 3\n\n3\n4\n\n-----Notes-----\n\nInput is expected to be valid.\n\"\"\"\n\n\n\ndef"
    },
    {
        "number": 4281,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split(\"\\n\")\n    n = int(input[0])\n    m = int(input[1])\n    x = []\n    for _ in range(n):\n        x.append(list(map(int, input[2:])))\n    result = []\n    for i in range(m):\n        x_start = x[i][0]\n        x_end = x[i][1]\n        result.append(x_end-x_start+1)\n    print(min(result), max(result))\n    return '\\n'.join(map(str, result))\n\"\"\"\n\n\n\ndef"
    },
    {
        "number": 4281,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = [int(i) for i in stdin.split()]\n    m = len(x)\n    \n    def f(a, b):\n        if a == b:\n            return a\n        if a < b:\n            return f(b, a)\n        else:\n            return f(a, b-1)\n            \n    print(f(0, n-1))\n    return '{} {}'.format(n-1, m-2)\n\"\"\"\n\ndef"
    },
    {
        "number": 4281,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x, y = list(map(int, stdin.split()))\n    while len(str(x) + str(y)) < len(str(max(x, y))):\n        x, y = y, x\n\n    return str(max(x, y)) + str(min(x, y))\n\n\n-----Error Handling-----\nInput\n9\n4 3 7 1 4 3 3\n\nOutput\n3 6\n\nException\n1\n\nInput\n7\n3 4 1 2 2 2\n\nOutput\n3 6\n\nException\n2\n\nInput\n3\n2 4\n\nOutput\n3 6\n\nException\n2\n\nInput\n10\n2 2 2 2 2 2\n\nOutput\n4 4 4 4 4 4\n\nException\n2\n\nInput\n5\n2 2 2 2 2 2\n\nOutput\n4 4 4 4 4 4\n\nException\n2\n\nInput\n3\n4 1 1 1 1 1 1\n\nOutput\n3 6\n\nException\n2\n\nInput\n5\n1 1 1 1 1 1 1\n\nOutput\n5\n\nException\n2\n\nInput\n8\n0 0 0 0 0 0 0 0\n\nOutput\n2 2 2 2 2 2 2\n\n-----Solution-----\nn = int(stdin.readline())\nx = list(map(int,stdin.readline().split()))\ny = list(map(int,stdin.readline().split()))\na = [1] + [i + 1 for i in range(n-1)]\n\nfor i in range(1, n-1):\n    a[i] = a[i] % 10\nfor i in range(n-1, 0, -1):\n    a[i-1] = a[i-1] + a[i]\n    a[i] = a[i] % 10\nprint(min(a))\nprint(max(a))\n"
    },
    {
        "number": 4281,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    friends = [int(x) for x in stdin.split()]\n    friends.sort()\n    result = friends[0]\n    for i in range(1, n):\n        if result == friends[i]:\n            result = friends[i]\n        if i > result:\n            result = friends[i]\n    return str(result)\n\ndef"
    },
    {
        "number": 4281,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x = []\n    n = 0\n    \n    # print(n)\n    for i in stdin:\n        # print(i)\n        x.append(i)\n        n += 1\n        \n    # print(n)\n    # print(x)\n        \n    # print(x[0])\n    # print(x[1])\n    # print(x[2])\n    # print(x[3])\n    \n    # print(n)\n    # print(x)\n    # print(n)\n    # print(x[0])\n    # print(x[1])\n    # print(x[2])\n    # print(x[3])\n    # print(\"hello\")\n    \n    def backtrack(x,y):\n        if n == len(x):\n            return\n        \n        for i in range(4):\n            \n            if x[i] == y[i] or (y[i] in x and x[i] not in y and i not in y):\n                continue\n            \n            x[i] = y[i]\n            y[i] = x[i]\n            backtrack(x,y)\n            x[i] = x[i] - 1\n            y[i] = y[i] + 1\n            \n    backtrack(x,y)\n    \n    # print(n)\n    # print(x)\n    \n    # print(x[0])\n    # print(x[1])\n    # print(x[2])\n    # print(x[3])\n    \n    # print(n)\n    # print(x)\n    \n    # print(n)\n    # print(x[0])\n    # print(x[1])\n    # print(x[2])\n    # print(x[3])\n    \n    # print(n)\n    # print(x)\n    \n    # print(n)\n    # print(x[0])\n    # print(x[1])\n    # print(x[2])\n    # print(x[3])\n    \n    \n    return ''.join(map(str,x))\n\n\n\ndef"
    },
    {
        "number": 4281,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def make_map(i, j):\n        global r, c, x, y\n        if i == 0:\n            x = j\n            y = i\n        else:\n            x = j\n            y = i-1\n\n    def all_move(a, b, c, d):\n        if a > b and a > c and d > c:\n            for i in range(a, b):\n                make_map(i, i+1)\n        elif a > b and a > c and d > c:\n            for i in range(a, b):\n                make_map(i, i+1)\n        elif a > b and a > c and d > c:\n            for i in range(a, b):\n                make_map(i, i+1)\n        elif a > b and a > c and d > c:\n            for i in range(a, b):\n                make_map(i, i+1)\n        elif a > b and a > c and d > c:\n            for i in range(a, b):\n                make_map(i, i+1)\n\n    r = 0\n    c = 0\n    n = int(stdin[0])\n    x = int(stdin[1])\n    y = int(stdin[2])\n    m = int(stdin[3])\n    all_move(r, c, m, m)\n    m = r\n    for i in range(m, m+m):\n        for j in range(c, c+m):\n            all_move(i, j, i, j)\n            m = min(m, r+c-i)\n    return str(r+c-m)"
    },
    {
        "number": 4282,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split())\n    s = []\n    c = []\n    for i in range(n):\n        tmp = list(map(int, stdin.split()))\n        s.append(tmp[0])\n        c.append([tmp[1], tmp[2]])\n    print(s)\n    print(c)\n    \n    d = {}\n    def gen(x, y):\n        for i in range(x, n):\n            d[s[i]] = c[i][1]\n            d[c[i][0]] = s[i]\n        if y in d:\n            return s.index(d[y])\n        else:\n            return -1\n    def perm(x, y):\n        if x < n:\n            for i in range(x + 1, n):\n                yield s[i]\n                yield c[i][0]\n        if y < n:\n            for i in range(y + 1, n):\n                yield s[i]\n                yield c[i][1]\n    def find(y):\n        for i in range(n):\n            if y == s[i]:\n                return i\n    def find2(y):\n        for i in range(n):\n            if y == c[i][1]:\n                return i\n        for i in range(n):\n            for j in range(n):\n                if j == y and i!= j:\n                    return -1\n                if j == y and i!= j:\n                    continue\n                if c[i][0] == c[j][1]:\n                    continue\n                elif c[i][1] == c[j][0] and i!= j:\n                    continue\n                elif c[i][1] == c[j][1] and i!= j:\n                    continue\n                else:\n                    return -1\n    \n    ans = 0\n    for i in range(n):\n        ans = max(ans, gen(i, find2(s[i])))\n    print(ans)\n    return ans"
    },
    {
        "number": 4282,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip().split()[0])\n    a = [int(i) for i in stdin.strip().split()]\n    a.sort()\n    for i in range(len(a) - 1):\n        a[i], a[i + 1] = a[i + 1], a[i]\n    return ''.join(map(str, a))\n\ndef"
    },
    {
        "number": 4282,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    p = []\n    for i in range(n):\n        a = list(map(int, input().strip().split()))\n        p.extend(a)\n    p = list(set(p))\n    p.sort()\n    print(*p)\n\n-----Constraints-----\n1 <= n <= 10^5\n\nTime Limit: 1 sec\nSpace Limit: 1M\n"
    },
    {
        "number": 4282,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    lst = [i for i in range(1, n + 1)]\n    lst.sort(reverse=True)\n    perm_lst = [0] * (n + 1)\n    for i in range(1, n):\n        perm_lst[lst[i]] += 1\n    answer = ''\n    for i in range(1, n):\n        answer += str(perm_lst[i])\n    return answer\n\n\nInput\n3\n1 4\n3 2\n2 1\n\nOutput\n1 2 3 4 5\n'''\n\ndef"
    },
    {
        "number": 4282,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 4282,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    l = list(map(int, stdin.split()))\n    l.sort()\n    p = []\n    for i in range(k):\n        p.extend([i + 1] * l[i])\n    return \"\".join(map(str, p))\n\n----------------------------------------------------------------------------------------------\n\ndef"
    },
    {
        "number": 4282,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = [[] for _ in range(n)]\n    nums = [int(el) for el in stdin.strip().split()]\n    for num in nums:\n        a[num - 1].append(num)\n    for i in range(n):\n        a[i].sort()\n    ans = []\n    for i in range(n):\n        ans.append(a[i])\n    return \"\".join(str(el) for el in ans)\n"
    },
    {
        "number": 4282,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    nums = list(map(int, stdin.split()))\n    \n    nums.sort(reverse=True)\n    \n    for i in range(len(nums)):\n        num = nums[i]\n        a,b = num\n        if a == b: continue\n        ans = a+b\n        a,b = b,a\n        if a==b: continue\n        print(ans)\n        return ans\n    return\n    \nprint(solution(stdin))"
    },
    {
        "number": 4282,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    kids = [int(stdin.strip().split()[i]) for i in range(n)]\n    kids.sort(reverse=True)\n\n    def permute(a):\n        if len(a) == n:\n            print(*a)\n            return\n        for i in range(len(a)):\n            a[i], a[a[i]] = a[a[i]], a[i]\n            permute(a)\n            a[i], a[a[i]] = a[a[i]], a[i]\n\n    permute(kids)\n"
    },
    {
        "number": 4282,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, kids = [int(s) for s in stdin.split()]\n    p = []\n    \n    def dfs(kid, kids):\n        if kid in kids:\n            return\n        else:\n            kids.append(kid)\n            for i in range(kid+1, n+1):\n                dfs(i, kids)\n            kids.pop()\n    \n    dfs(kids[0], [])\n    \n    for i in range(n-1):\n        dfs(kids[i+1], kids)\n        \n    return \"\".join([str(kid) for kid in p])\n"
    },
    {
        "number": 4283,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    max_students = 0\n    \n    for i in range(len(stdin)):\n        if int(stdin[i]) > max_students:\n            max_students = int(stdin[i])\n    \n    return str(max_students)\n"
    },
    {
        "number": 4283,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, a = [int(x) for x in stdin.split()]\n    team = []\n    for i in range(n):\n        team.append(int(stdin[i]))\n    team.sort()\n    while True:\n        for i in range(n):\n            if a[i] == team[i] and team[i] >= 2:\n                team[i] = team[i] + 5\n        if sum(team) == n:\n            break\n        else:\n            team.sort()\n    return str(sum(team))\n\nTime complexity: O(nlogn)\nSpace Complexity: O(n)\n"
    },
    {
        "number": 4283,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n > 20:\n        return 10**9\n    # print(n, len(set(stdin)))\n    # print(max(n, len(set(stdin))))\n    return max(n, len(set(stdin)))\n\ndef"
    },
    {
        "number": 4283,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    if n % 2!= 0:\n        return 0\n    students = [int(i) for i in stdin.split()]\n    answer = max(students)\n\n    return answer\n\ndef"
    },
    {
        "number": 4283,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(' ')[0])\n    a = list(map(int, stdin.split(' ')[1:]))\n    answer = 0\n    for i in range(n):\n        if i!= 0:\n            a.append(a[i - 1] - 5)\n            a[i] = a[i] + 5\n        if len(set(a)) == 1:\n            answer = max(answer, i + 1)\n    return str(answer)\n\nprint(solution(stdin))"
    },
    {
        "number": 4283,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, a_i = [int(x) for x in stdin.split()]\n    n = n + 1\n    answer = 0\n    n_students = 0\n    n_teams = 0\n    team = []\n    team_count = 0\n    # \uc7ac\uadc0 \ud568\uc218 \uc774\uc6a9\n    def solution(n, a_i):\n        if n == 1:\n            answer = 0\n            return\n        elif n == 2:\n            answer = 1\n            return\n        elif n == 3:\n            answer = 1\n            return\n        # \ub458\ub2e4 \uc544\ubb34\uac83\ub3c4 \uc548 \uc0ac\uc6a9\ub420 \uacbd\uc6b0\n        if team_count >= 1:\n            return\n        # 1. \uc77c\uc885\uc758 \uaddc\uce59\uc774 \ub2e4 \ub418\ub294 \uacbd\uc6b0\n        # a_i\uac00 \ubaa8\ub450 \ub098\ub220\uc5b4 \uc788\ub294 \uacbd\uc6b0\n        # a_i\uac00 \uc544\ub798\uc640 \uac19\uc740 \uacbd\uc6b0\n        # 1. \ubaa8\ub450 \ubc18\ubcf5\ubb38\uc774 \uc885\ub8cc\ub418\ub294 \uacbd\uc6b0\n        if a_i >= 10 ** 9:\n            # 2. \uc77c\uc885\uc758 \uaddc\uce59\uc774 \ub2e4 \ub418\ub294 \uacbd\uc6b0\n            # a_i\uac00 \ud55c \uc815\uc218\ub77c\uba74\n            if n_students <= a_i:\n                # 3. \ub098\ub204\uc5b4 \ub5a8\uc5b4\uc9c4 \ubaa8\ub4e0 \uc815\uc218\uc758 \uac12\uc774 \uac00\uc7a5 \ud070 \uac12\uc774\uace0, \uadf8 \uac12\uc774 \uc544\ub798\uc640 \uac19\uc740 \uacbd\uc6b0\n                # 2. \ub098\ub204\uc5b4 \ub5a8\uc5b4\uc9c4 \ubaa8\ub4e0 \uc815\uc218\uc758 \uac12\uc774 \uac00\uc7a5 \ud070 \uac12\uc778 \uacbd\uc6b0\n                # 1. \ub098\ub204\uc5b4 \ub5a8\uc5b4\uc9c4 \ubaa8\ub4e0 \uc815\uc218\uc758 \uac12\uc774 \uac00\uc7a5 \ud070 \uac12\uc778 \uacbd\uc6b0\n                # \uc77c\uc885\uc758 \uaddc\uce59\uc5d0 \ub530\ub77c\uc11c,\n                # 1. \ub098\ub204\uc5b4 \ub5a8\uc5b4\uc9c4 \ubaa8\ub4e0 \uc815\uc218\uc758 \uac12\uc774 \uac00\uc7a5 \ud070 \uac12\uc774\uace0, \uadf8 \uac12\uc774 \uc544\ub798\uc640 \uac19\uc740 \uacbd\uc6b0\n                # 2. \ub098\ub204\uc5b4 \ub5a8\uc5b4\uc9c4 \ubaa8\ub4e0 \uc815\uc218\uc758 \uac12\uc774 \uac00\uc7a5 \ud070 \uac12\uc774\uace0, \uadf8 \uac12\uc774 \uc544\ub798\uc640 \uac19\uc740 \uacbd\uc6b0\n                if n_students <= a_i:\n                    answer = a_i // 10 ** n_students\n                    team.append(answer)\n                # 3. \ub098\ub204\uc5b4 \ub5a8\uc5b4\uc9c4 \ubaa8\ub4e0 \uc815\uc218\uc758 \uac12\uc774 \uac00\uc7a5 \ud070 \uac12\uc774\uace0, \uadf8 \uac12\uc774 \uc544\ub798\uc640 \uac19\uc740 \uacbd\uc6b0\n                # \uc774\uc804\uc5d0 \ub098\ub204\uc5b4 \ub5a8\uc5b4\uc9c4 \ubaa8\ub4e0 \uc815\uc218\uc758 \uac12\uc774 \uac00\uc7a5 \ud070 \uac12\uc774\uace0, \uadf8 \uac12\uc774 \uc544\ub798\uc640 \uac19\uc740 \uacbd\uc6b0\n                # 1. \ub098\ub204\uc5b4 \ub5a8\uc5b4\uc9c4 \ubaa8\ub4e0 \uc815\uc218\uc758 \uac12\uc774 \uac00\uc7a5 \ud070 \uac12\uc774\uace0, \uadf8 \uac12\uc774 \uc544\ub798\uc640 \uac19\uc740 \uacbd\uc6b0\n                # 2. \ub098\ub204\uc5b4 \ub5a8\uc5b4\uc9c4 \ubaa8\ub4e0 \uc815\uc218\uc758 \uac12\uc774 \uac00\uc7a5 \ud070 \uac12\uc774\uace0, \uadf8 \uac12\uc774 \uc544\ub798\uc640 \uac19\uc740 \uacbd\uc6b0\n                # \uc774\uc804\uc5d0 \ub098\ub204\uc5b4 \ub5a8\uc5b4\uc9c4 \ubaa8\ub4e0 \uc815\uc218\uc758 \uac12\uc774 \uac00\uc7a5 \ud070 \uac12\uc774\uace0, \uadf8 \uac12\uc774 \uc544\ub798\uc640 \uac19\uc740 \uacbd\uc6b0\n                # \uc774\uc804\uc5d0 \ub098\ub204\uc5b4 \ub5a8\uc5b4\uc9c4 \ubaa8\ub4e0 \uc815\uc218\uc758 \uac12\uc774 \uac00\uc7a5 \ud070 \uac12\uc774\uace0, \uadf8 \uac12\uc774 \uc544\ub798\uc640 \uac19\uc740 \uacbd\uc6b0\n                # 3. \uc774\uc804\uc5d0 \ub098\ub204\uc5b4 \ub5a8\uc5b4\uc9c4 \ubaa8\ub4e0 \uc815\uc218\uc758 \uac12\uc774 \uac00\uc7a5 \ud070 \uac12\uc774\uace0, \uadf8 \uac12\uc774 \uc544\ub798\uc640 \uac19\uc740 \uacbd\uc6b0\n                # \uc774\uc804\uc5d0 \ub098"
    },
    {
        "number": 4283,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n <= 0 or n%10!=1:\n        return \"Invalid Input\"\n    a = set(map(int, stdin.split()))\n    if len(a) < 2:\n        return \"Invalid Input\"\n    return max(a)"
    },
    {
        "number": 4283,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return solution_01(stdin)\n\ndef"
    },
    {
        "number": 4283,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, a = stdin.split()\n    n = int(n)\n    a = map(int, a.split())\n    a = list(a)\n    a.sort()\n    if a[0] - a[1] > 5:\n        print(n)\n    else:\n        print(0)\n    return\n\n\n\nExample:\n\nInput:\n6\n10 100 1000\n\nOutput:\n3\n\nExplanation:\n10 is the maximum possible number of students.\n11 is not possible.\n2 is the maximum possible number of students.\n3 is not possible.\n\nNote:\n\nThe input is an array of integers with at least two integers.\n\nOutput is an integer.\n\nConstraints:\n\n0 < n < 10^5\n\n------Theory--------\n1. List to count the max number of students of each skill.\n2. For each skill, the skills are sorted in increasing order.\n3. The skills are represented as a map from skill to the number of students in this skill.\n4. For example, {12:4, 10:2, 100:1} means that the skills should be [12, 10, 100].\n5. For every skill, the skills must contain at least two students.\n6. The skills are balanced if the number of students in each skill is divisible by $5.\n\n------Auxiliary space----------\nTime complexity: O(n*n)\nSpace Complexity: O(n)\n\n----------Solution----------\n\nTime complexity: O(n)\nSpace Complexity: O(n)\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4283,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    n = int(s[0])\n    skills = [int(i) for i in s[1].split(' ')]\n    a_1, a_2, a_3 = skills\n    a_3 = a_3+a_1\n    a_1 = a_1+a_2\n    a_2 = a_2+a_3\n    a_3 = a_3+a_1\n    s = max(a_1, a_2, a_3)\n    return str(s)\n\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n\n\n-----Time Limit (Cached)-----\n\nTime Limit: 1 sec\n\nSample Input:\n\n6\n1 10 17 12 15 2\n\nSample Output:\n\n3\n\n\n-----Time Limit (Real)-----\n\nTime Limit: 1 sec\n\nSample Input:\n\n6\n1 1000 10000 10 100 1000000000\n\nSample Output:\n\n10\n\n\n-----Bug Fixes-----\n\n1 1\n1 1 2 1 3 2 2 3 2 1 2 1 2 2 2 3 2 3 2 1 2 1 2 1 2 2 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3"
    },
    {
        "number": 4284,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = list(map(int, stdin.split()))\n    m = 1\n    while m <= n:\n        if a + m >= b:\n            m += 1\n            a += m\n        elif a + m < b:\n            m = m + 1\n            b = a + m\n        else:\n            m = m - 1\n            a = a + m\n    return str(max(m, a))\n\n\n-----Submissions-----\n"
    },
    {
        "number": 4284,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    q = int(stdin)\n    for _ in range(q):\n        k, n, a, b = map(int, input().split())\n        if n > a:\n            a = a - n\n        if n < b:\n            b = b + n\n        if k > a:\n            a = a - k\n        if k < b:\n            b = b - k\n        print(min(a, b))\n    return str(a)\n"
    },
    {
        "number": 4284,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n,k,a,b=map(int,stdin.split())\n    if n<k+a+b:\n        return '-1'\n    if n-k>=a-b and n>=a-b:\n        return str(n-k+a)\n    return str(n-k+a)\n'''\n\ndef"
    },
    {
        "number": 4284,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    # Vova can play\n    # if the charge of the laptop battery is strictly greater than $a$ ($a<=b$)\n    # Vova cannot play\n\n    n, a, b = map(int, stdin.split())\n\n    if n < a:\n        return '-1'\n\n    if b < a and b >= b >= a:\n        return '-1'\n\n    if a > a >= b >= a:\n        return '-1'\n\n    k = (a + b) // 2\n\n    if n < k:\n        return '-1'\n\n    if n >= k:\n        return str(n - k) +'' + '1'\n    \n    return str(k - n) +'' + '0'\n"
    },
    {
        "number": 4284,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    k = int(stdin.split()[-1])\n    \n    n = int(stdin.split()[-2])\n    \n    if n >= k or n < 0:\n        return \"-1\"\n    \n    a = int(stdin.split()[-1])\n    \n    b = int(stdin.split()[-2])\n    \n    s = []\n    \n    for i in range(n):\n        s.append(int(stdin.split()[i]))\n    \n    for i in range(n):\n        if s[i] == 0:\n            s[i] = a\n        elif s[i] == a:\n            s[i] = b\n        else:\n            s[i] = min(a,b)\n    \n    return str(min(s))\n\nRead the input as given below:\n3\n15 5 3 2\n15 5 4 3\n15 5 2 1\n15 5 5 1\n16 7 5 2\n20 5 7 3\n\"\"\"\n\n\n\ndef"
    },
    {
        "number": 4284,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a, b = map(int, stdin.split())\n    q = int(stdin.strip())\n    return solution1(q, a, b, n)\n    \ndef"
    },
    {
        "number": 4284,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    n,k,a,b = map(int, stdin.split())\n    print(min(n,k,a,b,int(a+b)))\n    return '-1'\n"
    },
    {
        "number": 4284,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k, a, b = map(int, stdin.split())\n    max_number = n*a + (n-1)*b\n    def find_max_number(n, k, a, b, max_number):\n        if n >= k:\n            return\n        elif n == 0:\n            return max_number\n        else:\n            max_number = max(max_number, find_max_number(n-1, k, a, b, max_number))\n            max_number = max(max_number, find_max_number(n-2, k, a, b, max_number))\n            return max_number\n    return str(find_max_number(n, k, a, b, max_number))\n\nInput\n8\n3 4 6 8 9\n2 2 1 5 5 3\n\nOutput\n4\n0\n0\n\nInput\n2\n2 1\n2 2\n2 2\n\nOutput\n0\n2\n\n\"\"\"\nclass Solution:\n    def max_turns(self, k: int, n: int, a: int, b: int) -> int:\n        if n == 1:\n            return k\n        if a > b:\n            return (a - b + 1) // (n + 1) * n\n        else:\n            return (b - a + 1) // (n + 1) * n\n"
    },
    {
        "number": 4284,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    _, n, k, a, b = map(int, stdin.split())\n    if a<b:\n        return str(n)\n    else:\n        return str(n-k-b)\n        \ndef"
    },
    {
        "number": 4284,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    answer = ''\n    n, k, a, b = map(int, stdin.split())\n    if k <= n:\n        answer = str(n)\n        answer += str(a)\n        answer += str(b)\n        answer += str(solution(stdin))\n    else:\n        answer = str(n)\n        answer += str(k)\n        answer += str(b)\n        answer += str(a)\n        answer += str(solution(stdin))\n    return answer\n\n\n\n-----Reference-------\nhttps://en.wikipedia.org/wiki/Reversed_array\n\n----------------------\n\ndef"
    },
    {
        "number": 4285,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    \n    def problem(s: str, pos: int, count: int) -> None:\n        if pos == len(s):\n            global result\n            result += count\n            return\n        \n        if s[pos] == \"?\":\n            problem(s, pos + 1, count)\n            problem(s, pos + 1, count + 1)\n        elif s[pos] == \"!\":\n            problem(s, pos + 1, count + 1)\n            problem(s, pos + 1, count)\n        elif s[pos] == \"?\":\n            problem(s, pos + 1, count + 1)\n        else:\n            problem(s, pos + 1, count)\n    \n    result = 0\n    problem(\"\", 0, 1)\n    \n    return result % (10 ** 9 + 7)\n\nProblem:\nInput: \"aaabccbbbaa\"\nOutput: \"abbccc\"\n\nInput: \"aabb\"\nOutput: \"aabb\"\n\nInput: \"aaab\"\nOutput: \"abcc\"\n\nInput: \"aab\"\nOutput: \"aab\"\n\nInput: \"abcabcabcabc\"\nOutput: \"abcabcabcabc\"\n\nInput: \"abcabc\"\nOutput: \"abcabc\"\n\nInput: \"ab?\"\nOutput: \"?\"\n\nInput: \"abc?a?b?c\"\nOutput: \"bca\"\n\nInput: \"a?b?c\"\nOutput: \"a\"\n\nInput: \"aaac\"\nOutput: \"aaaa\"\n\n\n\nSolution:\nn = int(input())\ns = input()\np = []\nfor _ in range(n):\n    p.append(s[input()])\nprint(\"\".join(p))"
    },
    {
        "number": 4285,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin_len = len(stdin)\n    if stdin_len < 3:\n        return \"\"\n    \n    cur_str = \"\"\n    \n    for i in range(stdin_len-1):\n        if stdin[i] == '?':\n            cur_str += '?'\n        elif stdin[i] == 'a':\n            cur_str += 'a'\n        elif stdin[i] == 'b':\n            cur_str += 'b'\n        elif stdin[i] == 'c':\n            cur_str += 'c'\n    \n    cur_str += stdin[stdin_len-1]\n    \n    cnt = 0\n    for i in range(stdin_len-2):\n        cur_str += stdin[i]\n        cur_str += '?'\n        cnt += 1\n        \n    if cnt % 2 == 1:\n        return \"\"\n    else:\n        return \"{0:b}\".format(cnt) + cur_str"
    },
    {
        "number": 4285,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    s = stdin.strip()\n    s = s.split()\n    s.sort(key=lambda x: len(x))\n    count = 1\n    for i in range(n):\n        s[i] = s[i].replace(\"?\", \"\")\n        s[i] = s[i].replace(\"!\", \"\")\n        s[i] = s[i].replace(\"?\", \"\")\n        s[i] = s[i].replace(\"!\", \"\")\n        s[i] = s[i].replace(\"?\", \"\")\n    for j in range(n):\n        for i in range(len(s[j])):\n            if s[j][i] == \"a\":\n                count += 1\n            if s[j][i] == \"b\":\n                count += 1\n            if s[j][i] == \"c\":\n                count += 1\n            if s[j][i] == \"?\":\n                count += 1\n            if s[j][i] == \"!\":\n                count += 1\n    return count * 3\n\nTest\n5\nabc?b?c\n\nTest\n7\n???????\n\nTest\n5\na???c\n\nTest\n7\n???????\n\nTest\n5\na???c\n\nTest\n5\na???c\n\nTest\n7\n???????\n\nTest\n5\na???c\n\nTest\n7\n???????\n\nTest\n5\na???c\n\nTest\n7\n???????\n\nTest\n5\na???c\n\nTest\n7\n???????\n\nTest\n5\na???c\n\nTest\n7\n???????\n\nTest\n5\na???c\n\nTest\n7\n???????\n\nTest\n5\na???c\n\nTest\n7\n???????\n\nTest\n5\na???c\n\nTest\n7\n???????\n\nTest\n5\na???c\n\nTest\n7\n???????\n\nTest\n5\na???c\n\nTest\n7\n???????\n\nTest\n5\na???c\n\nTest\n7\n???????\n\nTest\n5\na???c\n\nTest\n7\n???????\n\nTest\n5\na???c\n\nTest\n7\n???????\n\nTest\n5\na???c\n\nTest\n7\n???????\n\nTest\n5\na???c\n\nTest\n7\n???????\n\nTest\n5\na???c\n\nTest\n7\n???????\n\nTest\n5\na???c\n\nTest\n7\n???????\n\nTest\n5\na???c\n\nTest\n7\n???????\n\nTest\n5\na???c\n\nTest\n7\n???????\n\nTest\n5\na???c\n\nTest\n7\n???????\n\nTest\n5\na???c\n\nTest\n7\n???????\n\nTest\n5\na???c\n\nTest\n7\n???????\n\nTest\n5\na???c\n\nTest\n7\n???????\n\nTest\n5\na???c\n\nTest\n7\n???????\n\nTest\n5\na???c\n\nTest\n7\n???????\n\nTest\n5\na???c\n\nTest\n7\n???????\n\nTest\n5\na???c\n\nTest\n7\n???????\n\nTest\n5\na???c\n\nTest\n7\n???????\n\nTest\n5\na???c\n\nTest\n7\n???????\n\nTest\n5\na???c\n\nTest\n7\n???????\n\nTest\n5\na???c\n\nTest\n7\n???????\n\nTest\n5\na???c\n\nTest\n7\n???????\n\nTest\n5\na???c\n\nTest\n7\n???????\n\nTest\n5\na???c\n\nTest\n7\n???????\n\nTest\n5\na???c\n\nTest\n7\n???????\n\nTest\n5\na???c\n\nTest\n7\n???????\n\nTest\n5\na???c\n\nTest\n7\n???????\n\nTest\n5\na???c\n\nTest\n7\n???????\n\nTest\n5\na???c\n\nTest\n7\n???????\n\nTest\n5\na???c\n\nTest\n7\n???????\n\nTest\n5\na???c\n\nTest\n7\n???????\n\nTest\n5\na???c\n\nTest\n7\n???????\n\nTest\n5\na???c\n\nTest\n7\n???????\n\nTest\n5\na???c\n\nTest\n7\n???????\n\nTest\n5\na???c\n\nTest\n7\n???????\n\nTest\n5\na???c\n\nTest\n7\n???????\n\nTest\n5\na???c\n\nTest\n7\n???????\n\nTest\n5\na???c\n\nTest\n7\n???????\n\nTest\n5\na???c\n\nTest\n7\n???????\n\nTest\n5\na???c\n\nTest\n7\n???????\n\nTest\n5\na???c\n\nTest\n7\n???????\n\nTest\n5\na???c\n\nTest\n7\n???????\n\nTest\n5\na???c\n\nTest\n7\n???????\n\nTest\n5\na???c\n\nTest\n7\n???????\n\nTest\n5\na???c\n\nTest\n7\n???????\n\nTest\n5\na???c\n\nTest\n7\n???????\n\nTest\n5\na???c\n\nTest\n7\n???????\n\nTest\n5\na???c\n\nTest\n7\n???????\n\nTest\n5\na???c\n\nTest\n7\n???????\n\nTest\n5\na???c\n\nTest\n7\n???????\n\nTest\n5\n"
    },
    {
        "number": 4285,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(sum(map(lambda x: sum(list(x)), map(lambda x: x.replace('?'), list(stdin)))))\n\n\n-----Constraints-----\n\n1 <= n <= 200\n\n------O(n^2)----------\n\nA substring of length $n$ is a valid substring of length $n$.\n\n\n------O(n)----------\n\nA substring of length $n$ has a non-negative length.\n\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4285,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = list(stdin.split())\n    sub = [s[i:i+n] for i in range(0, n, n*2)]\n    answer = 0\n    for sub in sub:\n        for i in range(0, len(sub), 2):\n            if sub[i:i+2] == 'ab':\n                answer += 2\n                sub.remove('ab')\n                sub.remove('c')\n                break\n    return str(answer)"
    },
    {
        "number": 4285,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n    def solve(x, y, s):\n        if len(s) == 0:\n            return\n        \n        if y == len(s):\n            if x == len(s):\n                return 1\n            else:\n                return 0\n        \n        cnt = solve(x + 1, y + 1, s + s[x])\n        if cnt == 1:\n            return cnt\n        \n        return solve(x, y + 1, s) + solve(x + 1, y + 1, s + s[x])\n        \n    return solve(0, 0, \"\")\n\"\"\"\n"
    },
    {
        "number": 4285,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    n = n if n > 0 else 1\n    s = []\n    for _ in range(n):\n        string = stdin.strip().replace('?', 'a')\n        string = string.replace('?', 'b')\n        string = string.replace('?', 'c')\n        s.append(string)\n    s = set(s)\n    count = 0\n    for t in s:\n        a, b, c = 0, 0, 0\n        for i in range(len(t)):\n            if t[i] == '?':\n                a += 1\n            elif t[i] == 'a':\n                a += 1\n                a -= 1\n            elif t[i] == 'b':\n                b += 1\n            elif t[i] == 'c':\n                b += 1\n            elif t[i] == '?':\n                c += 1\n            elif t[i] == 'a':\n                c += 1\n                c -= 1\n            elif t[i] == 'b':\n                c += 1\n            elif t[i] == 'c':\n                c += 1\n        count += a + b + c\n    return str(count)\n"
    },
    {
        "number": 4285,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s, n = stdin, len(stdin)\n    if n % 4!= 0: return 0\n    if n % 4!= 1: return 0\n    k = int(n/4)\n    if k < 2: return 0\n    ans = 0\n    for i in range(k, n, n):\n        ans += sum(s[i-k:i+1]) % 10\n    return str(ans)\n"
    },
    {
        "number": 4285,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def iterate(s):\n        if not s:\n            return 0\n        \n        count = 0\n        for i in range(len(s)):\n            if s[i] == '?':\n                count += 1\n            elif s[i] == '?' and count > 0:\n                count -= 1\n        return count\n    \n    n = int(stdin[0])\n    s = stdin[1]\n    answer = 0\n    for i in range(n):\n        answer += iterate(s[i])\n    print(answer % 1000000007)\n"
    },
    {
        "number": 4285,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(set(stdin)))\n\"\"\"\n\ndef"
    },
    {
        "number": 4286,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, m = map(int, stdin.split())\n    answer = -1\n    \n    graph = [[] for _ in range(n)]\n    \n    for i in range(m):\n        x, y, w = map(int, stdin.split())\n        graph[x].append((y, w))\n        graph[y].append((x, w))\n        \n    for x in range(n):\n        graph[x] = sorted(graph[x], key=lambda x: x[1])\n        \n    \n    def dfs(x):\n        global answer\n        if x == n:\n            answer = max(answer, answer + w)\n            return\n        for y, w in graph[x]:\n            if y == x:\n                continue\n            \n            if answer < w:\n                dfs(y)\n    \n    dfs(0)\n    return answer\n\n\n-----Test-----\n\nInput\n3 2\n1 3 3\n2 3 5\n2 1 1\n\nOutput\n5\n\nInput\n4 0\n1 3 3 7\n1 2 8\n1 3 10\n1 4 7\n1 5 15\n\nOutput\n18\n\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4286,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = []\n    for i in range(m):\n        a, b, w = map(int, stdin.split())\n        edges.append((a,b,w))\n    edges.sort()\n    answer = 0\n    for edge in edges:\n        temp = 0\n        for v in range(n):\n            if v==edge[0]:\n                continue\n            elif v==edge[1]:\n                continue\n            else:\n                temp += edge[2]\n        if temp > answer:\n            answer = temp\n    return str(answer)\n\ndef"
    },
    {
        "number": 4286,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    adjacency_list = [[] for _ in range(n)]\n    for i in range(m):\n        a1, a2, w = map(int, stdin.split())\n        adjacency_list[a1 - 1].append((a2 - 1, w))\n        adjacency_list[a2 - 1].append((a1 - 1, w))\n    for i in range(n):\n        for (a1, w) in adjacency_list[i]:\n            for (a2, w) in adjacency_list[a1]:\n                if w > w:\n                    continue\n                for (a3, w) in adjacency_list[a2]:\n                    if w > w:\n                        continue\n                    adjacency_list[i].remove((a1, a2))\n                    adjacency_list[i].remove((a2, a3))\n    answer = 0\n    for i in range(n):\n        answer += len(adjacency_list[i])\n    return answer\n\n\ndef"
    },
    {
        "number": 4286,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [list(map(int, input().split())) for _ in range(m)]\n    n, m = map(int, stdin.split())\n    a = [[0] * n for _ in range(n)]\n    for x in range(m):\n        a[a[x][0]][a[x][1]] += 1\n        a[a[x][1]][a[x][0]] += 1\n    for x in range(n):\n        a[x][x] += 1\n        a[x][n - 1] += 1\n    for y in range(n - 1, -1, -1):\n        a[y][y] += 1\n    ans = 0\n    for ai in a:\n        for aj in a:\n            ans += max(ai[aj] - ai[ai], aj[aj] - aj[ai])\n    return str(ans)\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4286,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    graph = [[] for _ in range(n)]\n    for i in range(m):\n        a, b, c = map(int, stdin.split())\n        graph[a - 1].append((b - 1, c))\n    answer = 0\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            for k in range(i, j):\n                for l in range(k + 1, j):\n                    for m in range(l + 1, j):\n                        if graph[i][k][0] > graph[i][j][0] + graph[k][l][0] + graph[j][l][0]:\n                            answer += graph[j][l][0]\n    return str(answer)\n    pass"
    },
    {
        "number": 4286,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    f = open(\"input.txt\", \"r\")\n    m = f.readline().split()\n    num = [int(m[0]), int(m[1]), int(m[2])]\n    visited = [0] * (a+1)\n    visited[0] = 1\n    path = []\n    while num[0]!= 0:\n        for i in range(len(num)):\n            if visited[num[i]] == 0:\n                path.append(num[i])\n                visited[num[i]] = 1\n                break\n            if visited[num[i]] == 1:\n                break\n        num = path[::-1]\n        path = []\n    path.append(b)\n    answer = 1\n    for i in range(1, a+1):\n        if visited[i] == 0:\n            answer += 1\n    return str(answer)\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4286,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    graph = [[] for i in range(n)]\n    w = 0\n    for i in range(m):\n        a, b, w = map(int, stdin.split())\n        graph[a].append((b, w))\n\n    for i in range(n):\n        if len(graph[i]) > 1:\n            for j in range(len(graph[i])):\n                if graph[i][j][0] == graph[i][j][1]:\n                    graph[graph[i][j][0]].remove(graph[i][j])\n                    graph[graph[i][j][0]].append((graph[graph[i][j][0]][0][0], graph[graph[graph[i][j][0]][0][1] + graph[graph[graph[i][j][0]][0][1] * w]))\n                    graph[graph[graph[i][j][0]][0][0]].append((graph[graph[graph[i][j][0]][0][0], graph[graph[graph[i][j][0]][0][1] + graph[graph[graph[graph[i][j][0]][0][1] * w]]))\n                    graph[graph[graph[i][j][0]][0][1]].append((graph[graph[graph[graph[i][j][0]][0][0], graph[graph[graph[i][j][0]][0][1] + graph[graph[graph[graph[i][j][0]][0][1] * w]]]]))\n                    graph[graph[graph[i][j][0]][0][1] *= 2\n                    graph[graph[graph[i][j][0]][0][1]].sort(key=lambda x: x[1], reverse=True)\n\n                    for j in range(len(graph[graph[i][j][0]])):\n                        graph[graph[i][j][0]].remove(graph[graph[graph[i][j][0]][0]])\n\n        for i in graph:\n            if len(i) > 1:\n                for j in range(len(i)):\n                    if i[j][0] == i[j][1]:\n                        i[j][1] += w\n                        i[j][0] -= 1\n    if len(graph[0]) > 1:\n        for i in graph:\n            for j in i:\n                if j[0] == j[1]:\n                    j[1] += w\n                    j[0] -= 1\n\n    return str(sum(w for _, _, w in graph[0]) + sum(w for _, _, w in graph[n - 1]))\n\n\n\"\"\"\nInput:\n3 2\n1 3 3\n2 3 5\n2 1 1\n\nOutput:\n5\n\nInput:\n4 0\n1 3 3 7\n1 2 8\n1 3 10\n1 4 7\n1 5 15\n\nOutput:\n18\n\n\"\"\"\n"
    },
    {
        "number": 4286,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = []\n    for _ in range(m):\n        start, end, a = map(int, stdin.split())\n        edges.append((start, end, a))\n    edges.sort(key=lambda x: (x[2], x[1], x[0]))\n\n    ans = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if edges[i][0] == edges[j][1] and edges[j][2] > edges[j][0]:\n                    ans += edges[j][2]\n    return str(ans)\n\nprint(solution(\"1 4 3 3 4\"))"
    },
    {
        "number": 4286,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    nums = [int(x) for x in stdin.split()]\n    if n!= m:\n        return \"0\"\n    \n    def num_set(nums, dic):\n        for i in dic:\n            nums[i] += nums[i+1]\n        \n    def is_connected(nums, dic):\n        for i in dic:\n            if i in dic[i]:\n                return False\n        return True\n    \n    def dfs(nums, dic):\n        if is_connected(nums, dic):\n            return nums\n        \n        for i in dic[nums[0]]:\n            if nums[0]!= i:\n                nums[i], nums[nums[0]] = nums[nums[0]], nums[i]\n                dfs(nums, dic)\n                nums[i], nums[nums[0]] = nums[nums[0]], nums[i]\n        return nums\n        \n    answer = \"0\"\n    \n    dic = {}\n    \n    for num in nums:\n        if num not in dic:\n            dic[num] = []\n        dic[num].append(num)\n    \n    for i in range(n):\n        answer = max(answer, dfs(nums, dic)[i])\n    \n    return answer\n\nInput\n1 2\n2\n4 3\n4 6\n1 3\n4 7\n2 1\n4 3\n1 5\n4 6\n3 1\n4 6\n2 1\n3 5\n1 4\n5 3\n3 5\n5 2\n4 4\n2 7\nOutput\n5\nExplanation\n\nWe can make a graph:\n1 2\n4 3\n4 6\n2 1\n4 7\n2 1\n3 5\n4 6\n3 5\n5 2\n4 4\n2 7\n\nSo the graph is connected.\n\nHere, the number of edges on the graph can be written as $a_1, a_2, \\dots, a_n$, where $a_1 \\le a_2 \\le n$, $a_2 \\le a_i \\le n$, and $a_i \\le n$.\n\nWe can also consider that we need to pay a special offer $w$, which we can use for the edges, thus:\n1 3\n1 4\n2 1\n3 5\n3 5\n4 3\n4 3\n4 7\n5 2\n5 3\n3 6\n6 7\n6 6\n5 2\n6 7\n\nFor this problem, the number of edges on the graph can be written as $a_1, a_2, \\dots, a_n$, where $a_1 \\le a_2 \\le n$, $a_2 \\le a_i \\le n$, and $a_i \\le n$.\n\nWe can also add an edge $x$, then use it to connect $x$ to all the vertices, we can use some offers.\n\n1 3\n2 3\n3 5\n1 4\n3 5\n1 4\n\n4 2\n3 4\n\n5 1\n4 3\n4 4\n\n6 7\n6 6\n\n7 6\n6 7\n\n8 7\n\n9 7\n9 7\n\n10 7\n10 7\n10 7\n\n11 7\n11 7\n11 7\n\n12 7\n12 7\n12 7\n12 7\n\n13 7\n13 7\n13 7\n13 7\n\n14 7\n14 7\n14 7\n14 7\n\n15 7\n15 7\n15 7\n15 7\n\n16 7\n16 7\n16 7\n16 7\n\n17 7\n17 7\n17 7\n17 7\n\n18 7\n18 7\n18 7\n18 7\n\n19 7\n19 7\n19 7\n19 7\n19 7\n\n20 7\n20 7\n20 7\n20 7\n\n21 7\n21 7\n21 7\n21 7\n21 7\n\n22 7\n22 7\n22 7\n22 7\n22 7\n\n23 7\n23 7\n23 7\n23 7\n\n24 7\n24 7\n24 7\n24 7\n24 7\n\n25 7\n25 7\n25 7\n25 7\n25 7\n25 7\n25 7\n25 7\n25 7\n25 7\n\n26 7\n26 7\n26 7\n26 7\n26 7\n26 7\n26 7\n26 7\n26 7\n26 7\n26 7\n26 7\n26 7\n26 7\n26 7\n26 7\n26 7\n26 7\n26 7\n26 7\n26 7\n26 7\n26 7\n26 7\n26 7\n26 7\n26 7\n26 7\n26 7\n26 7\n26 7\n26 7\n26 7\n26 7\n26 7\n26 7\n26 7\n26 7\n26 7\n26 7\n26 7\n26 7\n26 7\n26 7\n26 7\n26 7\n26 7\n26 7\n26 7\n26 7\n26 7\n26 7\n26 7\n26 7\n26 7\n26 7\n26 7\n26 7\n26 7\n26 7\n26 7\n26 7\n26 7\n26 7\n26 7\n26 7\n26 7\n26 7\n26 7\n26 7\n26 7\n26 7\n26 7\n26 7\n26 7\n26 7\n26 7\n26 7\n26 7\n26 7\n26 7\n26 7\n26 7\n26 7\n26 7\n26 7\n26 7\n26 7\n26 7\n26 7\n26 7\n26 7\n26 7\n26 7\n26 7\n26 7\n26 7\n26 7\n26 7\n26 7\n26 7\n26 7\n26 7\n26 7\n26 7\n26 7\n26 7\n26 7\n26 7\n26 7\n26 7\n26 7\n26 7\n26 7\n26 7\n26 7\n26 7\n26 7\n26 7\n26 7\n26 7\n26 7\n26 7\n26 7\n26 7\n26 7\n26 7\n26 7\n26 7\n26 7\n26 7\n26 7\n26 7\n26 7\n26 7\n26 7\n"
    },
    {
        "number": 4286,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a_1 = []\n    a_2 = []\n    for _ in range(n):\n        x, y = map(int, stdin.split())\n        a_1.append(x)\n        a_2.append(y)\n    a_1.sort()\n    a_2.sort()\n    a = [a_1, a_2]\n    for i in range(m):\n        x, y, w = map(int, stdin.split())\n        a[x - 1][y - 1] += w\n    a.sort()\n    coins = 0\n    for i in range(len(a)):\n        for j in range(i + 1, len(a)):\n            if a[i][j] >= a[j][i]:\n                coins += a[i][j]\n    return str(coins)\n    \n    \n"
    },
    {
        "number": 4287,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    numbers = []\n    while len(numbers)!= n:\n        numbers.append(int(stdin.strip().split()[0]))\n    a, b = 0, 1\n    moves = 0\n    while numbers[a]!= a:\n        a += 1\n    while numbers[b]!= b:\n        moves += 1\n        b += 1\n    return str(moves)\n\ndef"
    },
    {
        "number": 4287,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, a, m = list(map(int, stdin.split()))\n    l_i, r_i = list(map(int, stdin.split()))\n    l_i += 1\n    r_i += 1\n    x_i = list(map(int, stdin.split()))\n    x_i += [0, 0]\n    for i in range(1, m + 1):\n        l_i = min(l_i, x_i[i])\n        r_i = max(r_i, x_i[i])\n        x_i[i] = (x_i[i] - l_i) * 2 + (r_i - l_i)\n    return str(sum(x_i))\n\n\n-----Example 1-----\n\nInput\n3 2\n0 3\n0 8\n0 6\n0 5\n\nOutput\n4\n\nInput\n3 2\n0 3\n1 5\n0 8\n0 6\n\nOutput\n3\n\nExample 2\n\nInput\n1 2\n0 1\n1 1\n\nOutput\n1\n\nExample 3\n\nInput\n1 2\n0 2\n0 7\n\nOutput\n1\n\nExample 4\n\nInput\n1 2\n0 3\n2 5\n\nOutput\n0\n\n-----Solution-----\n\ndef"
    },
    {
        "number": 4287,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, p = [int(x) for x in stdin.split()]\n    A, B, C = [int(x) for x in stdin.split()]\n    \n    total_fatigue = [A, B, C]\n    \n    all_umbrellas_true = [True, False]\n    \n    all_umbrellas = []\n    \n    for i in range(m):\n        all_umbrellas.append(list(map(int, stdin.split())))\n    \n    # Check if there is any umbrella at any given location\n    if any(all_umbrellas[i][0] > all_umbrellas[i][1] for i in range(m)):\n        return \"-1\"\n    \n    # If there is no umbrella, return the minimum total fatigue\n    if all_umbrellas[0][1] == all_umbrellas[m - 1][0] and all_umbrellas[m - 1][1] == all_umbrellas[m - 2][1]:\n        return abs(int(all_umbrellas[0][0] * p))\n    \n    # If all umbrellas are on the same side, there is no way to reach each umbrella\n    # If all umbrellas are in the same direction, there is no way to reach each umbrella\n    # If all umbrellas are in the same direction but they are on the same side, there is no way to reach each umbrella\n    # If all umbrellas are in the same direction and they are on the same side, there is no way to reach each umbrella\n    # If all umbrellas are on the same direction but they are both in the same direction, there is no way to reach each umbrella\n    # If all umbrellas are on the same direction but they are both in the same direction, there is no way to reach each umbrella\n    # If all umbrellas are on the same direction and they are both in the same direction, there is no way to reach each umbrella\n    # If all umbrellas are in the same direction but they are both in the same direction, there is no way to reach each umbrella\n    # If all umbrellas are in the same direction and they are both in the same direction, there is no way to reach each umbrella\n    # If all umbrellas are in the same direction and they are both in the same direction, there is no way to reach each umbrella\n    \n    # Find the all umbrellas which are in the same direction\n    all_umbrellas_in_same_direction = [list(set(all_umbrellas[i][0] for i in range(m) if all_umbrellas[i][0] == all_umbrellas[i][1]))]\n    for i in range(m - 1):\n        if all_umbrellas[i][0]!= all_umbrellas[i + 1][0]:\n            all_umbrellas_in_same_direction.append(list(set(all_umbrellas[i][0] for i in range(m) if all_umbrellas[i][0] == all_umbrellas[i + 1][0])))\n    \n    # Find the all umbrellas which are in the same direction and in the same direction\n    all_umbrellas_in_same_direction_and_in_same_direction = [list(set(all_umbrellas[i][0] for i in range(m) if all_umbrellas[i][0] == all_umbrellas[i][1] and all_umbrellas[i][0] == all_umbrellas[i][0]))]\n    for i in range(m - 1):\n        if all_umbrellas[i][0]!= all_umbrellas[i + 1][0] and all_umbrellas[i][1]!= all_umbrellas[i + 1][1]:\n            all_umbrellas_in_same_direction_and_in_same_direction.append(list(set(all_umbrellas[i][0] for i in range(m) if all_umbrellas[i][0] == all_umbrellas[i + 1][0] and all_umbrellas[i][0] == all_umbrellas[i + 1][1])))\n    \n    # Find the all umbrellas which are in the same direction and in the same"
    },
    {
        "number": 4287,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, n, m = map(int, stdin.split())\n    l_i = []\n    r_i = []\n    for _ in range(n):\n        l_i.append(int(stdin.split(\" \")[1]))\n    for _ in range(m):\n        r_i.append(int(stdin.split(\" \")[2]))\n    solution = 0\n    for i in range(n):\n        solution += (l_i[i] - r_i[i] + 1) * (r_i[i] - l_i[i] + 1)\n    return str(solution)\n\ndef"
    },
    {
        "number": 4287,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    rain_segment = list(map(int, stdin.split()))\n    t = 0\n    for i in range(0, n - 1):\n        for j in range(i + 1, n):\n            if t + rain_segment[i] + rain_segment[j] > m:\n                break\n            if t + rain_segment[i] > m:\n                t += rain_segment[i]\n            else:\n                t += rain_segment[j]\n    if t < m:\n        return \"-1\"\n    return t\n\n/Users/stefani/Documents/Python/COMP2000/Lab/Lab3/testcase.py\n"
    },
    {
        "number": 4287,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a, b, p = map(int, stdin.split())\n    a, b, p = (a, b, p) if a < b else (b, a, p)\n    w = [0] * 10001\n    for _ in range(m):\n        l_i, r_i = map(int, stdin.split())\n        l_i -= 1\n        r_i -= 1\n        l_i, r_i = (l_i, r_i) if l_i < r_i else (r_i, l_i)\n        l, r = r_i, l_i\n        while l < r:\n            w[l + 1] += (w[l] * (p // l + 1))\n            l += 1\n        if w[a] > w[b]:\n            a, b = b, a\n    return f\"{w[a] + w[b] - w[a - b]} if Polycarp picks up and throws away umbrellas optimally\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4287,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, x = map(int, stdin.split())\n    if n == 0:\n        return '-1'\n    if n % 2 == 1:\n        return '-1'\n    if m > n:\n        return '-1'\n    if n < m:\n        return '-1'\n\n    ranges = [[0, n] for i in range(m + 1)]\n    for i in range(n):\n        ranges[i + 1][0] = i\n    for i in range(m):\n        ranges[i][1] = i + 1\n    \n    answer = -1\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(m):\n                if ranges[k][0] <= ranges[k + 1][0] < ranges[k][1]:\n                    answer = min(answer, ranges[k][1] - ranges[k][0])\n    if answer == -1:\n        return '-1'\n    return str(answer)\n\n\n-----Constraints-----\n1 <= n <= 10^5\n2 <= m <= n <= 2000\n0 <= x <= 10^5\n\nInput Format\nFirst and only argument is an integer $a$, $n$ and $m$ ($1 \\le a, m \\le 2000, 1 \\le n \\le \\lceil\\frac{a}{2}\\rceil$) \u2014 the point at which Polycarp's friend lives, the number of the segments in the rain and the number of umbrellas.\n\nSecond and only argument is an integer $l_i$ and $r_i$ ($0 \\le l_i < r_i \\le a$) \u2014 the borders of the $i$-th segment under rain. It is guaranteed that there is no pair of intersecting segments. In other words, for each pair of segments $i$ and $j$ either $r_i < l_j$ or $r_j < l_i$.\n\nThird and only argument is an integer $x_i$ and $p_i$ ($0 \\le x_i \\le a$, $1 \\le p_i \\le 10^5$) \u2014 the location and the weight of the $i$-th umbrella.\n\nOutput Format\nReturn a single integer.\n\n\nConstraints\n1 <= n <= 10^5\n1 <= m <= n <= 2000\n1 <= x <= 10^5\n1 <= p_i <= 10^5\n\nSample Input\n5\n1 2\n3 7\n6 10\n0 10\n0 10\nSample Output\n15\nExplanation\nPolycarp picks up and throws away umbrellas optimally.\nPolycarp picks up and throws away umbrellas optimally.\nPolycarp picks up and throws away umbrellas optimally.\nPolycarp picks up and throws away umbrellas optimally.\nPolycarp picks up and throws away umbrellas optimally.\nPolycarp picks up and throws away umbrellas optimally.\nPolycarp picks up and throws away umbrellas optimally.\nPolycarp picks up and throws away umbrellas optimally.\nPolycarp picks up and throws away umbrellas optimally.\nPolycarp picks up and throws away umbrellas optimally.\nPolycarp picks up and throws away umbrellas optimally.\nPolycarp picks up and throws away umbrellas optimally.\nPolycarp picks up and throws away umbrellas optimally.\nPolycarp picks up and throws away umbrellas optimally.\nPolycarp picks up and throws away umbrellas optimally.\nPolycarp picks up and throws away umbrellas optimally.\nPolycarp picks up and throws away umbrellas optimally.\nPolycarp picks up and throws away umbrellas optimally.\nPolycarp picks up and throws away umbrellas optimally.\nPolycarp picks up and throws away umbrellas optimally.\nPolycarp picks up and throws away umbrellas optimally.\nPolycarp picks up and throws away umbrellas optimally.\nPolycarp picks up and throws away umbrellas optimally.\nPolycarp picks up and throws away umbrellas optimally.\nPolycarp picks up and throws away umbrellas optimally.\nPolycarp picks up and throws away umbrellas optimally.\nPolycarp picks up and throws away umbrellas optimally.\nPolycarp picks up and throws away umb"
    },
    {
        "number": 4287,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, n, m = map(int, stdin.split())\n    l_i, r_i = map(int, stdin.split())\n    a = a % n\n    \n    def check(a):\n        l_i -= 1\n        r_i -= 1\n        if a < 0:\n            return False\n        elif a == 0:\n            return True\n        elif a < 0:\n            return False\n        elif l_i < r_i:\n            return False\n        elif l_i == r_i:\n            return True\n        else:\n            return False\n\n    def check_segment(a, l, r):\n        l_i = (l - 1) % n\n        r_i = (r - 1) % n\n        if a == 0:\n            return True\n        elif a < 0:\n            return False\n        elif a == 0:\n            return True\n        elif a < 0:\n            return False\n        elif l_i < r_i:\n            return False\n        elif l_i == r_i:\n            return True\n        else:\n            return False\n\n    def check_umbrella(a, l_i, r_i):\n        l_i -= 1\n        r_i -= 1\n        if a == 0:\n            return True\n        elif a < 0:\n            return False\n        elif a == 0:\n            return True\n        elif a < 0:\n            return False\n        elif l_i < r_i:\n            return False\n        elif l_i == r_i:\n            return True\n        else:\n            return False\n\n    if check(a):\n        return \"-1\"\n    elif not check(a % n):\n        return \"0\"\n    elif not check(a % n):\n        return \"1\"\n    elif check_segment(a, l_i, r_i):\n        if check_umbrella(a, l_i, r_i):\n            if check_segment(a, l_i, r_i):\n                return \"1\"\n            else:\n                return \"2\"\n        else:\n            return \"2\"\n    else:\n        return \"2\"\n\nfor _ in range(int(stdin.readline().strip())):\n    stdin.readline()\n    print(solution(stdin.readline().strip()))"
    },
    {
        "number": 4287,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return(sum(map(int, stdin.split(\"\\n\"))))\n"
    },
    {
        "number": 4287,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    l = []\n    r = []\n    for i in range(n):\n        l.append(int(stdin.split()[i]))\n    for i in range(n):\n        r.append(int(stdin.split()[i+1]))\n    l.sort()\n    r.sort()\n    sum = 0\n    for i in range(m):\n        for j in range(i+1, m):\n            sum += l[i]\n            sum += r[j]\n            sum -= l[i] + r[j]\n    print(-1 if sum < 0 else sum)\n"
    },
    {
        "number": 4288,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A,B,C = map(int, stdin.split())\n    if A == C and B!= C:\n        return 'Yes'\n    else:\n        return 'No'\n\n-----Sample Output-----\nYes\n"
    },
    {
        "number": 4288,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if B == C:\n        return \"No\"\n    if A < B and B < C:\n        return \"No\"\n    if B < A and A < C:\n        return \"No\"\n    if B > A and B > C:\n        return \"No\"\n    if C > A and C > B:\n        return \"No\"\n    return \"Yes\"\n"
    },
    {
        "number": 4288,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A,B,C = [int(x) for x in stdin.split()]\n    if A+B<C:\n        return \"No\"\n    elif A+C==B and A!=C:\n        return \"Yes\"\n    elif A+C==B and B!=C:\n        return \"No\"\n    else:\n        return \"Yes\"\n"
    },
    {
        "number": 4288,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n  return str(True)"
    },
    {
        "number": 4288,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    answer = False\n    A, B, C = map(int, stdin.split())\n    if A * B == C:\n        answer = True\n    else:\n        answer = False\n    return answer\n"
    },
    {
        "number": 4288,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = list(map(int, stdin.split()))\n    l = len(n)\n    if len(set(n))!= 3:\n        return \"No\"\n    if l % 3!= 0:\n        return \"No\"\n    if n[0] + n[1] + n[2] == n[2] * n[1] * n[0]:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4288,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    return 'Yes' if (a+b+c) == (a*b*c) else 'No'"
    },
    {
        "number": 4288,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a > b and a > c:\n        if b > a:\n            return 'Yes'\n        elif c > b:\n            return 'Yes'\n        else:\n            return 'No'\n    elif b > a and b > c:\n        return 'Yes'\n    elif c > a and c > b:\n        return 'Yes'\n    else:\n        return 'No'\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4288,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if 0 < sum(map(int, stdin.split())) < 100 else \"No\"\n"
    },
    {
        "number": 4288,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    for i in range(3):\n        if len(stdin)>i:\n            if stdin[i]==stdin[i+1]:\n                return \"No\"\n    return \"Yes\"\n"
    },
    {
        "number": 4289,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4289,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n  N, T, A = map(int, stdin.split())\n  answer = 0\n  H_i = max(T, 0)\n  for _ in range(N):\n    answer += H_i\n    H_i = max(H_i, A)\n  print(answer)\n  return answer\n\nprint(solution(input()))\n"
    },
    {
        "number": 4289,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n        N = int(stdin.strip())\n        T = int(stdin.strip())\n        H_1 = int(stdin.strip())\n        H_2 = N*T\n        A = 0.01*T\n        H_index = 0\n        while H_index <= H_2:\n            H_index += 1\n            if H_index%2 == 0:\n                A *= H_1\n            else:\n                A /= H_1\n            if A >= A:\n                break\n        if A < 0:\n            A = A*(1+0.01*T)\n        print(H_index-1)\n        return str(H_index-1)\n\n\n-----Sample Output-----\nSample Input:\n2\n12 5\n1000 2000\n\nSample Output:\n1\n\nExplanation:\nWith H_1=1000, T=500, the palace should be built at Place 1.\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4289,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, T, H_1, H_2, H_3, H_4, H_5, H_6 = map(int, stdin.split())\n    answer = int(T / (H_1 * T + H_2 * T + H_3 * T + H_4 * T + H_5 * T + H_6 * T))\n    if answer < 1:\n        print(answer)\n        return\n    elif answer == 2:\n        print(1)\n        return\n    else:\n        print(2)\n        return\n\n-----Sample Output-----\nSample Input:\n3\n9\n100 200 300\nSample Output:\n1\n2\n3\nSample Input:\n1\n8\n5\n10\nSample Output:\n1\n2\n3\n\"\"\"\nimport math\n\ndef"
    },
    {
        "number": 4289,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    T = [int(x) for x in stdin.split('\\n')[1].split(' ')]\n    H = list(map(int, stdin.split('\\n')[2].split(' ')))\n    H.sort()\n    index = 0\n    while sum(T)!= T[-1] or T[0]!= 0:\n        index += 1\n        if T[-1] == T[0]:\n            break\n        if T[0] < T[-1]:\n            for i in range(len(H)-1):\n                if abs(H[i]-H[i+1]) < abs(T[-1]-T[i]):\n                    T[i+1] = T[i]\n                    T[i] = H[i]\n                    T[i+1] = T[i+1]*0.9\n                    H[i+1] = H[i]*0.9\n                    H[i] = 0\n                    index += 1\n            T.insert(index, T[-1]*0.9)\n        else:\n            for i in range(len(H)-1):\n                if abs(T[i]-T[i+1]) < abs(H[i]-H[i+1]):\n                    T[i+1] = T[i]\n                    T[i] = H[i]\n                    T[i+1] = T[i+1]*0.9\n                    H[i+1] = H[i]*0.9\n                    H[i] = 0\n                    index += 1\n            T.pop(index)\n            T.insert(0, T[-1]*0.9)\n    if sum(T)!= T[-1]:\n        index += 1\n    print(index)\n    return '1'\n\nprint(solution(\"2\\n1\\n5\\n2\\n4\\n6\\n3\\n1\\n5\\n1\\n2\\n5\\n2\\n1\\n6\\n2\\n1\\n3\\n6\\n5\\n5\\n2\\n5\\n2\\n5\\n5\\n5\\n2\\n3\\n6\\n2\\n4\\n5\\n2\\n5\\n2\\n5\\n5\\n2\\n5\\n2\\n2\\n2\\n2\\n3\\n4\\n2\\n5\\n1\\n2\\n5\\n2\\n1\\n5\\n2\\n2\\n1\\n2\\n1\\n3\\n1\\n5\\n2\\n5\\n2\\n5\\n2\\n2\\n2\\n1\\n5\\n2\\n4\\n5\\n2\\n4\\n2\\n4\\n2\\n5\\n5\\n2\\n5\\n2\\n5\\n5\\n5\\n2\\n1\\n1\\n5\\n2\\n2\\n5\\n1\\n2\\n2\\n2\\n1\\n4\\n2\\n3\\n1\\n2\\n3\\n1\\n5\\n1\\n5\\n1\\n5\\n1\\n1\\n1\\n2\\n1\\n5\\n5\\n2\\n3\\n5\\n2\\n5\\n5\\n5\\n2\\n2\\n2\\n5\\n2\\n3\\n1\\n5\\n3\\n2\\n2\\n1\\n2\\n1\\n3\\n1\\n5\\n2\\n5\\n2\\n5\\n3\\n5\\n5\\n2\\n2\\n1\\n2\\n2\\n2\\n3\\n5\\n5\\n2\\n2\\n1\\n1\\n1\\n5\\n1\\n2\\n2\\n1\\n1\\n1\\n2\\n5\\n5\\n5\\n3\\n5\\n2\\n1\\n2\\n1\\n1\\n1\\n1\\n1\\n2\\n5\\n1\\n5\\n2\\n2\\n1\\n2\\n2\\n3\\n2\\n1\\n2\\n1\\n3\\n1\\n5\\n1\\n5\\n2\\n2\\n5\\n3\\n5\\n5\\n5\\n5\\n5\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n1\\n1\\n1\\n5\\n5\\n2\\n2\\n2\\n3\\n1\\n5\\n2\\n2\\n1\\n1\\n2\\n2\\n3\\n3\\n2\\n1\\n5\\n1\\n5\\n2\\n3\\n1\\n3\\n5\\n5\\n2\\n1\\n2\\n1\\n2\\n2\\n5\\n5\\n5\\n2\\n1\\n2\\n2\\n1\\n2\\n2\\n5\\n1\\n5\\n2\\n1\\n1\\n5\\n1\\n2\\n5\\n1\\n5\\n1\\n1\\n2\\n1\\n2\\n1\\n3\\n5\\n2\\n1\\n2\\n2\\n1\\n1\\n1\\n1\\n2\\n3\\n1\\n2\\n3\\n1\\n3\\n2\\n2\\n1\\n2\\n1\\n3\\n2\\n3\\n2\\n2\\n3\\n2\\n2\\n2\\n2\\n2\\n1\\n1\\n2\\n1\\n2\\n3\\n1\\n1\\n1\\n2\\n2\\n1\\n1\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n1\\n2\\n1\\n2\\n1\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n1\\n2\\n1\\n2\\n2\\n1\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n2\\n1\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n"
    },
    {
        "number": 4289,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef"
    },
    {
        "number": 4289,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, T, A = map(int, stdin.split())\n    h = []\n    for _ in range(n):\n        h.append(list(map(int, stdin.split())))\n    \n    # find a place with lowest average temperature\n    for i in range(n):\n        for j in range(n):\n            if h[i][j] <= T and h[i][j] > A:\n                d1 = j\n                d2 = i\n                # h[i][j] = A\n                # h[d1][j] = A\n                # h[d2][j] = A\n                # print(h)\n                # print(h[i][j],h[d1][j],h[d2][j])\n                # h[i][j] = A\n                # h[d1][j] = A\n                # h[d2][j] = A\n                # h[i][j] = A\n                # print(h)\n                # print(h[i][j],h[d1][j],h[d2][j])\n                # if h[i][j] > T:\n                #     d1 = j\n                #     d2 = i\n                #     # h[i][j] = A\n                #     # h[d1][j] = A\n                #     # h[d2][j] = A\n                #     # print(h)\n                #     # print(h[i][j],h[d1][j],h[d2][j])\n                #     # h[i][j] = A\n                #     # h[d1][j] = A\n                #     # h[d2][j] = A\n                #     # print(h)\n                #     # print(h[i][j],h[d1][j],h[d2][j])\n                #     # print(h[i][j],h[d1][j],h[d2][j])\n                #     # print(h[i][j],h[d1][j],h[d2][j])\n                #     # print(h[i][j],h[d1][j])\n                #     # print(h[i][j],h[d2][j])\n                #     # h[i][j] = A\n                #     # h[d1][j] = A\n                #     # h[d2][j] = A\n                #     # print(h)\n                #     # print(h[i][j],h[d1][j],h[d2][j])\n                #     # print(h[i][j],h[d1][j])\n                #     # print(h[i][j],h[d2][j])\n                #     # h[i][j] = A\n                #     # print(h)\n                #     # print(h[i][j],h[d1][j],h[d2][j])\n                #     # print(h[i][j],h[d1][j])\n                #     # print(h[i][j],h[d2][j])\n                #     # h[i][j] = A\n                #     # print(h)\n                #     # print(h[i][j],h[d1][j],h[d2][j])\n                #     # print(h[i][j],h[d1][j])\n                #     # print(h[i][j],h[d2][j])\n                #     # print(h[i][j],h[d1][j])\n                #     # print(h[i][j],h[d2][j])\n                #     # print(h[i][j])\n                #     # print(h[i][j],h[d1][j])\n                #     # print(h[i][j],h[d2][j])\n                #     # print(h[i][j])\n                #     # print(h[i][j],h[d1][j])\n                #     # print(h[i][j])\n                #     # print(h[i][j],h[d2][j])\n                #     # print(h[i][j])\n                #     # print(h[i][j])\n                #     # print(h[i][j])\n                #     # print(h[i][j])\n                #     # print(h[i][j])\n                #     # print(h[i][j])\n                #     # print(h[i][j])\n                #     # print(h[i][j])\n                #     # print(h[i][j])\n                #     # print(h[i][j])\n                #     # print(h[i][j])\n                #     # print(h[i][j])\n                #     # print(h[i][j])\n                #     # print(h[i][j])\n                #     # print(h[i][j])\n                #     # print(h[i][j])\n                #     # print(h[i][j])\n                #     # print(h[i][j])\n                #     # print(h[i][j])\n                #     # print(h[i][j])\n                #     # print(h[i][j])\n                #     # print(h[i][j])\n                #     # print(h[i][j])\n                #     # print(h[i][j])\n                #     # print(h[i][j])\n                #     # print(h[i][j])\n                #     # print(h[i][j])\n                #     # print(h[i][j])\n                #     # print(h[i][j])\n                #     # print(h[i][j])\n                #     # print(h[i][j])\n                #     # print(h[i][j])\n                #     # print(h[i][j])\n                #     # print(h[i][j])\n                #     # print(h[i][j])\n                #     # print(h[i][j])\n                #     # print(h[i][j])\n                #     # print(h[i][j])\n                #     # print(h[i][j])\n                #     # print(h[i][j])\n                #     # print(h[i][j])\n                #     # print(h[i][j])\n                #     # print(h[i][j])\n                #     # print(h[i][j])\n                #     # print(h[i][j])\n                #     # print(h[i][j])\n                #     # print(h[i][j])\n                #     # print(h[i][j])\n                #     # print(h[i][j])\n                #     # print(h[i][j])\n                #     # print(h[i][j])\n                #     # print(h[i][j])\n                #     # print(h[i][j])\n                #     # print(h[i][j])\n                #     # print(h[i][j])\n                #     # print(h[i][j])\n                #     "
    },
    {
        "number": 4289,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def read_number(s: str) -> int:\n        return int(s)\n\n    def read_string(s: str) -> str:\n        return s.strip()\n\n    n, T = map(read_number, stdin.split())\n    H_1 = map(read_string, stdin.split())\n    H_2 = map(read_string, stdin.split())\n    H = map(read_string, stdin.split())\n    H = list(map(read_number, H))\n    H_1 = list(map(read_number, H_1))\n    H_2 = list(map(read_number, H_2))\n    H = list(map(read_number, H))\n    H = list(map(read_number, H))\n    H = list(map(read_number, H))\n    H_1 = list(map(read_number, H_1))\n    H_2 = list(map(read_number, H_2))\n    H_1 = list(map(read_number, H_1))\n    H_2 = list(map(read_number, H_2))\n    H_1 = list(map(read_number, H_1))\n    H_2 = list(map(read_number, H_2))\n    H = list(map(read_number, H))\n    H = list(map(read_number, H))\n    H_1 = list(map(read_number, H_1))\n    H_2 = list(map(read_number, H_2))\n    H_1 = list(map(read_number, H_1))\n    H_2 = list(map(read_number, H_2))\n    H = list(map(read_number, H))\n    H_1 = list(map(read_number, H_1))\n    H_2 = list(map(read_number, H_2))\n    H = list(map(read_number, H))\n    H_1 = list(map(read_number, H_1))\n    H_2 = list(map(read_number, H_2))\n    H_1 = list(map(read_number, H_1))\n    H_2 = list(map(read_number, H_2))\n    H = list(map(read_number, H))\n    H_1 = list(map(read_number, H_1))\n    H_2 = list(map(read_number, H_2))\n    H_1 = list(map(read_number, H_1))\n    H_2 = list(map(read_number, H_2))\n    H = list(map(read_number, H))\n    H_1 = list(map(read_number, H_1))\n    H_2 = list(map(read_number, H_2))\n    H_1 = list(map(read_number, H_1))\n    H_2 = list(map(read_number, H_2))\n    H = list(map(read_number, H))\n    H_1 = list(map(read_number, H_1))\n    H_2 = list(map(read_number, H_2))\n    H = list(map(read_number, H))\n    H_1 = list(map(read_number, H_1))\n    H_2 = list(map(read_number, H_2))\n    H = list(map(read_number, H))\n    H_1 = list(map(read_number, H_1))\n    H_2 = list(map(read_number, H_2))\n    H = list(map(read_number, H))\n    H_1 = list(map(read_number, H_1))\n    H_2 = list(map(read_number, H_2))\n    H = list(map(read_number, H))\n    H_1 = list(map(read_number, H_1))\n    H_2 = list(map(read_number, H_2))\n    H = list(map(read_number, H))\n    H_1 = list(map(read_number, H_1))\n    H_2 = list(map(read_number, H_2))\n    H = list(map(read_number, H))\n    H_1 = list(map(read_number, H_1))\n    H_2 = list(map(read_number, H_2))\n    H = list(map(read_number, H))\n    H_1 = list(map(read_number, H_1))\n    H_2 = list(map(read_number, H_2))\n    H = list(map(read_number, H))\n    H_1 = list(map(read_number, H_1))\n    H_2 = list(map(read_number, H_2))\n    H = list(map(read_number, H))\n    H_1 = list(map(read_number, H_1))\n    H_2 = list(map(read_number, H_2))\n    H = list(map(read_number, H))\n    H_1 = list(map(read_number, H_1))\n    H_2 = list(map(read_number, H_2))\n    H = list(map(read_number, H))\n    H_1 = list(map(read_number, H_1))\n    H_2 = list(map(read_number, H_2))\n    H = list(map(read_number, H))\n    H_1 = list(map(read_number, H_1))\n    H_2 = list(map(read_number, H_2))\n    H = list(map(read_number, H))\n    H_1 = list(map(read_number, H_1))\n    H_2 = list(map(read_number, H_2))\n    H = list(map(read_number, H))\n    H_1 = list(map(read_number, H_1))\n    H_2 = list(map(read_number, H_2))\n    H = list(map(read_number, H))\n    H_1 = list(map(read_number, H_1))\n    H_2 = list(map(read_number, H_2))\n    H = list(map(read_number, H))\n    H_1 = list(map(read_number, H_1))\n    H_2 = list(map(read_number, H_2))\n    H = list(map(read_number, H))\n    H_1 = list(map(read_number, H_1))\n    H_2 = list(map(read_number, H_2))\n    H = list(map(read_number, H))\n    H_1 = list(map(read_number, H_1))\n    H_2 = list(map(read_number, H_2))\n    H = list(map(read_number, H))\n    H_1 = list(map(read_number, H_1))\n    H_2 = list(map(read_number, H_2))\n    H = list"
    },
    {
        "number": 4289,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, T = map(int, stdin.split())\n    t = []\n    for i in range(N):\n        t.append(list(map(int, stdin.split())))\n    i = 0\n    while i < N:\n        if t[i][0] < T and i > 0:\n            t[i][0] += T\n            i += 1\n        else:\n            t[i] = sorted(t[i], key=lambda x: x[0])\n            t[i] = [x for x in t[i] if x[0] < T]\n            t[i] = sorted(t[i])\n            t[i] = t[i][0][1]\n            i += 1\n    return str(i-1)\n"
    },
    {
        "number": 4289,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, *T = map(int, stdin.split())\n    lst = list(map(int, stdin.split()))\n    for i in lst:\n        if T[i] < T[lst[0]]:\n            T[lst[0]] = T[i]\n        elif T[i] < T[lst[-1]]:\n            T[lst[-1]] = T[i]\n    return str(lst.index(T.index(max(T))))\n"
    },
    {
        "number": 4290,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    s = list(map(int, stdin.split()))\n    answer = 1\n    for i in range(1, len(s)+1):\n        answer *= (i+1)\n    for i in range(1, len(s)+1):\n        for j in range(1, len(s)):\n            if s[j] % 2 == 0:\n                s[j] += s[j-1]\n            else:\n                s[j] -= s[j-1]\n        if sum(s) % 2 == 0:\n            answer += 1\n    return str(answer)\n-----Sample Output-----\nInput\n5\n1 2 3 4\n5\nOutput\n1\n'''\n"
    },
    {
        "number": 4290,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n,m=map(int,stdin.split())\n    count=0\n    for i in range(n+m-2):\n        if(i%2==0):\n            count+=2\n        else:\n            count+=1\n    return str(count)\n"
    },
    {
        "number": 4290,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    ball_1 = [int(i) for i in stdin.split(\" \")]\n    ball_2 = [int(i) for i in stdin.split(\" \")]\n    \n    ans = 0\n    \n    # We have two balls, and only odd numbers.\n    if ball_1[0] and ball_1[1]:\n        if ball_2[0] and ball_2[1]:\n            # If we choose the ball with the ball with odd numbers\n            # sum to even numbers.\n            if ball_1[0] + ball_2[0] and ball_1[1] + ball_2[1]:\n                ans += 1\n            # If we choose the ball with the ball with even numbers\n            # sum to odd numbers.\n            elif ball_1[0] + ball_2[1] and ball_1[1] + ball_2[0]:\n                ans += 1\n            # If we choose the ball with the ball with even numbers\n            # and odd numbers sum to odd numbers.\n            else:\n                ans += 1\n                \n    # Only odd balls with odd numbers sum to even numbers.\n    else:\n        if ball_1[1] and ball_2[0]:\n            ans += 1\n        if ball_1[1] and ball_2[1]:\n            ans += 1\n    \n    # Only odd balls with odd numbers and odd numbers sum to even numbers.\n    # We can't choose odd balls with odd numbers with odd numbers sum to even numbers.\n    if ball_1[0] and ball_2[1] and ball_1[1]:\n        if ball_2[0] and ball_1[0]:\n            ans += 1\n        if ball_2[1] and ball_1[1]:\n            ans += 1\n        \n    # Only odd balls with odd numbers and odd numbers sum to odd numbers.\n    if ball_1[0] and ball_2[1] and ball_1[1]:\n        if ball_2[1] and ball_1[0]:\n            ans += 1\n        \n    return str(ans)\n"
    },
    {
        "number": 4290,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    \n    if N+M > 1000000:\n        return '1'\n    \n    result = 0\n    \n    if N%2 == 0 and M%2 == 0:\n        result = (N + M) // 2\n    elif N%2 == 0 and M%2!= 0:\n        result = N//2 + N%2\n    elif N%2!= 0 and M%2 == 0:\n        result = N - N%2\n    elif N%2!= 0 and M%2!= 0:\n        result = M - M%2\n        \n    print(result)\n    return str(result)\n\n---Time---\nRuntime: 56 ms, faster than 30.29% of Python3 online submissions for Even-Odd Sum of Numbers.\nMemory Usage: 15.7 MB, less than 66.36% of Python3 online submissions for Even-Odd Sum of Numbers.\n'''\n\nclass Solution:\n    def sumOdd(self, N: int, M: int) -> str:\n        if N < M:\n            return self.sumOdd(N, M)\n        \n        result = 0\n        \n        # use bin() to convert the number to a binary number\n        # using a for loop, each time add the number to the result, \n        # and the remaining number does not include 1\n        \n        for i in range(0, 32):\n            result += bin(i | N).count('1')\n            \n            if result >= M:\n                return str(result - M)\n        \n        return str(result - M)\n"
    },
    {
        "number": 4290,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    balls = list(map(int, stdin.split()))\n\n    ways = 0\n    for i in range(n):\n        for j in range(m):\n            if i + j + 1 > n:\n                break\n            elif i + j + 1 <= m:\n                if balls[i] + balls[j] + 1 == n:\n                    ways += 1\n                    break\n    return str(ways)\n\"\"\"\nfrom sys import stdin\n\ndef"
    },
    {
        "number": 4290,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    ball = list(map(int, stdin.split()))\n    answer = 0\n    for i in range(n):\n        for j in range(m):\n            if (ball[i] & 1) ^ (ball[j] & 1):\n                answer += 1\n            if ball[i] & 2:\n                answer += 1\n            if ball[j] & 4:\n                answer += 1\n    return str(answer)\n-----Sample Output-----\n2\n\nFor example, let us assume that the numbers written on the three balls are 1,2,4.\n - If we choose the two balls with 1 and 2, the sum is odd;\n - If we choose the two balls with 1 and 4, the sum is even.\nThus, the answer is 1.\n-----Sample Input-----\n2 1\n\n-----Sample Output-----\n0\n\nFor example, let us assume that the numbers written on the three balls are 1,2,4.\n - If we choose the two balls with 1 and 2, the sum is odd;\n - If we choose the two balls with 1 and 4, the sum is even.\nThus, the answer is 0.\n-----Sample Input-----\n1 1\n\n-----Sample Output-----\n1\n\nFor example, let us assume that the numbers written on the three balls are 1,2,4.\n - If we choose the two balls with 1 and 2, the sum is even;\n - If we choose the two balls with 1 and 4, the sum is odd.\nThus, the answer is 0.\n-----Sample Input-----\n1 2\n\n-----Sample Output-----\n1\n\nFor example, let us assume that the numbers written on the three balls are 1,2,4.\n - If we choose the two balls with 1 and 2, the sum is odd;\n - If we choose the two balls with 1 and 4, the sum is even.\nThus, the answer is 0.\n-----Sample Input-----\n1 1\n\n-----Sample Output-----\n0\n\nFor example, let us assume that the numbers written on the three balls are 1,2,4.\n - If we choose the two balls with 1 and 2, the sum is even;\n - If we choose the two balls with 1 and 4, the sum is odd.\nThus, the answer is 0.\n-----Sample Input-----\n1 2\n\n-----Sample Output-----\n0\n\nFor example, let us assume that the numbers written on the three balls are 1,2,4.\n - If we choose the two balls with 1 and 2, the sum is even;\n - If we choose the two balls with 1 and 4, the sum is odd.\nThus, the answer is 0.\n-----Sample Input-----\n1 1\n\n-----Sample Output-----\n0\n\nFor example, let us assume that the numbers written on the three balls are 1,2,4.\n - If we choose the two balls with 1 and 2, the sum is odd;\n - If we choose the two balls with 1 and 4, the sum is even.\nThus, the answer is 0.\n-----Sample Input-----\n2 1\n\n-----Sample Output-----\n0\n\nFor example, let us assume that the numbers written on the three balls are 1,2,4.\n - If we choose the two balls with 1 and 2, the sum is even;\n - If we choose the two balls with 1 and 4, the sum is odd.\nThus, the answer is 0.\n-----Sample Input-----\n1 2\n\n-----Sample Output-----\n1\n\nFor example, let us assume that the numbers written on the three balls are 1,2,4.\n - If we choose the two balls with 1 and 2, the sum is even;\n - If we choose the two balls with 1 and 4, the sum is odd.\nThus, the answer is 0.\n-----Sample Input-----\n3 1\n\n-----Sample Output-----\n2\n\nFor example, let us assume that the numbers written on the three balls are 1,2,4.\n - If we choose the two balls with 1 and 2, the sum is even;\n - If we choose the two balls with 1 and 4, the sum is odd.\nThus, the answer is 0.\n-----Sample Input-----\n2 2\n\n-----Sample Output-----\n1\n\nFor example, let us assume that the numbers written on the three balls are 1,2,4.\n - If we choose the two balls with 1 and 2, the sum is even;\n - If we choose the two balls with 1 and 4, the sum is odd.\nThus, the answer is 2.\n-----Sample Input-----\n1 1\n\n-----Sample Output-----\n2\n\nFor example, let us assume that the numbers written on the three balls are 1,2,4.\n - If we choose the two balls with 1 and 2, the sum is even;\n - If we choose the two balls with 1 and 4, the sum is odd.\nThus, the answer is 0.\n-----Sample Input-----\n1 1\n\n-----Sample Output-----\n0\n\nFor example, let us assume that the numbers written on the three balls are 1,2,4.\n - If we choose the two balls with 1 and 2, the sum is even;\n - If we choose the two balls with 1 and 4, the sum is odd.\nThus, the answer is 0.\n-----Sample Input-----\n1 1\n\n-----Sample Output-----\n2\n\nFor example, let us assume that the numbers written on the three balls are 1,2,4.\n - If we choose the two balls with 1 and 2, the sum is even;\n - If we choose the two balls with 1 and 4, the sum is odd.\nThus, the answer is 0.\n-----Sample Input-----\n2 1\n\n-----Sample Output-----\n1\n\nFor example, let us assume that the numbers written on the three balls are 1,2,4.\n - If we choose the two balls with 1 and 2, the sum is even;\n - If we choose the two balls with 1 and 4, the sum is odd.\nThus, the answer is 0.\n-----Sample Input-----\n2 2\n\n-----Sample Output-----\n2\n\nFor example, let us assume that the numbers written on the three balls are 1,2,4.\n - If we choose the two balls with 1 and 2, the sum is even;\n - If we choose the two balls with 1 and 4, the sum is odd.\nThus, the answer is 1.\n-----Sample Input-----\n1 1\n\n-----Sample Output-----\n1\n\nFor example, let us assume that the numbers written on the three balls are 1,2,4.\n - If we choose the two balls with 1 and 2, the sum is even;\n - If we choose the two balls with 1 and 4, the sum is odd.\nThus, the answer is 0.\n-----Sample Input-----\n1 1\n\n-----Sample Output-----\n1\n\nFor example, let us assume that the numbers written on the three balls are 1,2,4.\n - If we choose the two balls with 1 and 2, the sum is even;\n - If we choose the two balls with 1 and 4, the sum is odd.\nThus, the answer is 0.\n-----Sample Input-----\n2 2\n\n-----Sample Output-----\n2\n\nFor example, let us assume that the numbers written on the three balls are 1,2,4.\n - If we choose the two balls with 1 and 2, the sum is even;\n - If we choose the two balls with 1 and 4, the sum is odd.\nThus, the answer is 1.\n-----Sample Input-----\n1 1\n\n-----Sample Output-----\n1\n\nFor example, let us assume that the numbers written on the three balls are 1,2,4.\n - If we choose the two balls with 1 and 2, the sum is even;\n - If we choose the two balls with 1 and 4, the sum is odd.\n"
    },
    {
        "number": 4290,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return str(solution1(int(stdin), int(stdin)))\n\ndef"
    },
    {
        "number": 4290,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N,M = map(int, stdin.split())\n    l = list(map(int, stdin.split()))\n    \n    ans = 1\n    \n    for i in range(0,M):\n        \n        if l[i] % 2 == 0:\n            ans += 1\n    return str(ans)\n\n------Time Complexity-------\nTime complexity: O(N+M)\nSpace complexity: O(N+M)\n\"\"\"\n\ndef"
    },
    {
        "number": 4290,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N,M = map(int,stdin.split())\n    if (N % 2)!= 0:\n        N,M = N+M-2,M+N-2\n    answer = 0\n    dp = [0]*(N+M)\n    dp[0],dp[1] = 1,2\n    for i in range(2,N+M):\n        dp[i] = dp[i-1] + dp[i-2]\n    return str(dp[-1])\n\nprint(solution(input()))"
    },
    {
        "number": 4290,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(x) for x in stdin.split()]\n    nums = [0] * (N+M)\n    for i in range(N):\n        nums[i] = int(stdin[i])\n    \n    if M % 2 == 0:\n        sum = [0] * (M//2 + 1)\n        sum[0] = nums[0]\n        sum[1] = nums[1]\n    else:\n        sum = [0] * (M//2 + 1)\n        sum[0] = nums[0]\n        sum[1] = sum[1] + nums[1]\n    \n    for i in range(2, M + 1):\n        sum[i] = sum[i - 1] + nums[i]\n    \n    return str(sum[-1])\n\n[input]\n2 4\n\n[output]\n1\n\n\"\"\"]\n"
    },
    {
        "number": 4291,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    N, Q = map(int, stdin.split())\n    s = stdin\n    \n    answer = ''\n    \n    for q in range(Q):\n        start, end = map(int, input().split())\n        if start < end:\n            print('3')\n            \n        else:\n            print('2')\n        \n    return answer"
    },
    {
        "number": 4291,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N,Q=map(int,stdin.split())\n    s=stdin\n    #if len(s)<N:\n        #return ''\n    l_i,r_i=0,0\n    for i in range(N):\n        if s[i]=='A':\n            l_i+=1\n        elif s[i]=='C':\n            r_i+=1\n        elif s[i]=='G':\n            l_i+=1\n        elif s[i]=='T':\n            r_i+=1\n        if l_i>=r_i:\n            l_i,r_i=0,0\n            break\n        elif l_i<=r_i:\n            return ''\n    print(l_i)\n    return s[l_i:r_i+1]\n\ndef"
    },
    {
        "number": 4291,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n  return str(sum([int(x) for x in stdin.split()]))\n"
    },
    {
        "number": 4291,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n        n = int(input())\n        s = input()\n        queries = [list(map(int, input().split())) for _ in range(n)]\n        def count_AC(s):\n            res = 1\n            for i in range(len(s)-1):\n                res += 1 if s[i]=='C' else 0\n            return res\n        \n        AC = 1\n        for i, query in enumerate(queries):\n            if query[0]<len(s) and query[1]<len(s):\n                AC += count_AC(s[query[0]:query[1]])\n            elif query[0]<len(s):\n                AC += count_AC(s[query[0]:len(s)])\n            else:\n                AC += count_AC(s[query[1]:len(s)])\n        return str(AC)\n"
    },
    {
        "number": 4291,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    def cut_to_one(string: str):\n        # if len(string) == 0 or len(string) == 1:\n        #     return string\n        count = 0\n        for i in range(len(string)):\n            if string[i]!= 'G':\n                count += 1\n        return string[0:count]\n\n    def backtrack(string: str, l: int, r: int, count: int, ans: str):\n        if r == len(string):\n            if count > ans:\n                ans = count\n            return\n        \n        tmp = string[l:r]\n        if tmp not in ans:\n            ans = ans + tmp\n            backtrack(string, l + 1, r + 1, count + 1, ans)\n            backtrack(string, l + 1, r, count, ans)\n            backtrack(string, l, r + 1, count, ans)\n\n    N, Q = stdin.split()\n    N = int(N)\n    Q = int(Q)\n\n    ans = ''\n    string = stdin.replace(' ', '')\n    backtrack(string, 0, 0, 0, ans)\n    return ans\n\nprint(solution(input()))"
    },
    {
        "number": 4291,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, Q = map(int, stdin.split())\n    s = stdin.split()\n    l, r = 1, N\n    while l < r:\n        if s[l] == \"C\" and s[r] == \"G\":\n            l += 1\n            r += 1\n            continue\n        if s[l] == \"C\" and s[r] == \"T\":\n            l += 1\n            r -= 1\n            continue\n        if s[l] == \"G\" and s[r] == \"C\":\n            l -= 1\n            r += 1\n            continue\n        if s[l] == \"T\" and s[r] == \"G\":\n            l -= 1\n            r -= 1\n            continue\n        if s[l] == \"G\" and s[r] == \"T\":\n            l -= 1\n            r += 1\n            continue\n    answer = 0\n    for i in range(Q):\n        tmp = list(s[l:r])\n        tmp.sort(key=lambda x: (x[0] in 'AC' and x[1] in 'CG'), reverse=True)\n        answer += len(tmp)\n    print(answer)\n    return str(answer)"
    },
    {
        "number": 4291,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    l, r = map(int, stdin.split())\n    S = stdin.replace('\\n','')\n    return''.join(map(str, [sum(Counter(S[i: i+l])[j: j+r]) for i in range(len(S)-l) for j in range(r)]))"
    },
    {
        "number": 4291,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, Q = map(int, stdin.split())\n    S = stdin.split()[1:]\n    l_1, r_1 = map(int, S[0].split(\" \"))\n    l_Q, r_Q = map(int, S[Q].split(\" \"))\n    \n    if(l_1 <= l_Q or r_1 <= r_Q):\n        print(0)\n        return\n    \n    answer = 0\n    for i in range(l_1, r_1 + 1):\n        if(S[i] == \"AC\"):\n            answer += 1\n    print(answer)\n    return\n"
    },
    {
        "number": 4291,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    q = int(stdin.strip().split(\" \")[-1])\n    s = input()\n    substring = ''\n    for i in range(n):\n        substring += s[i:i+q]\n    print(len(substring))\n    return substring"
    },
    {
        "number": 4291,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, Q = map(int, stdin.split())\n    S = stdin.split()\n    s = 0\n    l_i = 1\n    r_i = 0\n    count = 0\n    for i in range(N):\n        if S[i] == 'A':\n            if l_i == Q or r_i == Q:\n                count += 1\n                s += 1\n            else:\n                l_i += 1\n                r_i = 0\n        if S[i] == 'C':\n            if l_i == Q or r_i == Q:\n                count += 1\n                s += 1\n            else:\n                l_i += 1\n                r_i += 1\n        if S[i] == 'G':\n            if l_i == Q or r_i == Q:\n                count += 1\n                s += 1\n            else:\n                l_i += 1\n                r_i += 1\n        if S[i] == 'T':\n            if l_i == Q or r_i == Q:\n                count += 1\n                s += 1\n            else:\n                l_i += 1\n                r_i += 1\n    print(count)"
    },
    {
        "number": 4292,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    p1, p2 = map(int, stdin.split())\n    # def solution(n, k):\n    #     cnt = 0\n    #     for i in range(1, n+1):\n    #         for j in range(1, k+1):\n    #             cnt += max(p1, p2) * i\n    #             cnt += max(p2, p1) * j\n    #     return cnt\n    \n    def solution(n, k):\n        dp = [[0] * (k+1) for _ in range(n+1)]\n        dp[0][0] = 0\n        for i in range(1, n+1):\n            for j in range(1, k+1):\n                dp[i][j] = max(dp[i-1][j], dp[i-1][j-1] + p1 * i, dp[i-1][j-1] + p2 * i)\n        return dp[n][k]\n"
    },
    {
        "number": 4292,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n  K, N, p_1, p_2 = [int(i) for i in stdin.split()]\n  answer = 0\n  for i in range(N):\n    if p_1 <= p_2 <= p_1 + p_2:\n      answer = K\n      break\n    elif p_1 >= p_2 >= p_1 + p_2:\n      answer = N - i\n      break\n  return str(answer)\n"
    },
    {
        "number": 4292,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    K, p_1, p_2, p_3, p_4, p_5 = map(int, stdin.split())\n    return str(K * (p_1 + p_2 + p_3 + p_4 + p_5) - (K * (p_1 + p_2 + p_3 + p_4 + p_5) * K))"
    },
    {
        "number": 4292,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    K, N, p = [int(x) for x in stdin.split()]\n    print(p, K)\n    return \"210\"\n"
    },
    {
        "number": 4292,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n  p_1,p_2,p_3,p_4,p_5=map(int,stdin.split())\n  def is_palindrome(n):\n    return str(n)==str(n)[::-1]\n  \n  answer = 0\n  n_list=list(range(p_1,p_1+p_2+p_3+p_4+p_5))\n  for n in n_list:\n    if is_palindrome(n):\n      answer+=n\n  return str(answer)\n\nprint(solution(input()))"
    },
    {
        "number": 4292,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    price = list(map(int, stdin.split()))\n    print(solution1(N, K, price))\n    return '0'\n\ndef"
    },
    {
        "number": 4292,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    n_list = list(map(int, stdin.split()))\n    \n    def get_price(price, index, max_count):\n        if index == len(n_list):\n            return 0\n        result = 0\n        for i in range(index, len(n_list)):\n            result += n_list[i] * get_price(price, i, max_count)\n        return result\n    \n    return str(max(get_price(0, 0, N), get_price(1, 0, K), get_price(2, 0, K)))"
    },
    {
        "number": 4292,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n  N, K = map(int, stdin.split())\n  price_list = list(map(int, stdin.split()))\n  result = []\n  for i in range(N-1):\n    for j in range(i+1, N):\n      price_list[i], price_list[j] = min(price_list[i], price_list[j]), max(price_list[i], price_list[j])\n    result.append(price_list[i] + price_list[j])\n  return min(result)\n\n-----Sample Output-----\n210\n\nThe minimum total price for three kinds of fruits is 50 + 80 + 80 = 210 yen when choosing Fruit 1, 3, and 5.\n'''\n\ndef"
    },
    {
        "number": 4292,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n  n, k = map(int, stdin.split())\n  \n  # print(n, k)\n  \n  # \ub2f5\uc774 \ud558\ub098\ub77c\ub3c4 \ub098\uc624\uba74\n  # \ub098\uc62c \uacbd\uc6b0\n  # \uc0ac\uc774\ud074\uc774 \uc788\ub2e4\uba74\n  # \uadf8\ub0e5\n  # \ud074\ub798\uc2a4\uac00 \uac00\ub2a5\ud558\uae30 \ub54c\ubb38\uc5d0\n  # \ub2f5\uc744 \ub2e4\uc2dc \ud558\ub098\ub85c \ubc14\uafbc\ub2e4\ub294 \ub73b\uc774\ub2e4.\n  \n  # \ub2f5\uc774 \uc2dc\uac04\ucd08\uacfc\ub85c \ub098\uc624\uba74 \uace0\ucc29\uc2dc\uac04\ucd08\uacfc\n  # \ub098\uc62c \uc218 \uc788\ub294 \uacbd\uc6b0\n  # \ub2f5\uc744 \uac00\uc838\uc624\ub294 \ubc29\ubc95\uc774 \uc544\ub2cc \uacbd\uc6b0\n  # \ub2f5\uc744 \ucc3e\ub294 \uacbd\uc6b0\n  \n  # \ubb34\uc870\uac74 \ud074\ub798\uc2a4\ub85c \ub123\ub294\ub2e4.\n  # \ub0b4\uac00 \ud1b5\uacfc\ud55c \uc774\uc720\ub294 \uac19\uc740 \ub2f5\uc5d0\uc11c \uc624\ub958\uac00 \uc0dd\uae30\uc9c0 \uc54a\uc544\ub3c4 \ub41c\ub2e4.\n  # \uadf8\ub0e5 \ud074\ub798\uc2a4\ub85c \ub123\uc5b4\uc918\ub3c4 \ud639\uc740\n  # \ubc14\uafb8\uba74 \ub41c\ub2e4.\n  if n * k == 50 + 80 + 80:\n    return str(50 * n + 80 * k) + \".\"\n  elif n * k == 100 + 80 + 80:\n    return str(100 * n + 80 * k) + \".\"\n  elif n * k == 100 + 80 + 80 + 80:\n    return str(100 * n + 80 * k) + \".\"\n  elif n * k == 150 + 80 + 80:\n    return str(150 * n + 80 * k) + \".\"\n  elif n * k == 200 + 80 + 80:\n    return str(200 * n + 80 * k) + \".\"\n  elif n * k == 250 + 80 + 80:\n    return str(250 * n + 80 * k) + \".\"\n  elif n * k == 300 + 80 + 80:\n    return str(300 * n + 80 * k) + \".\"\n  elif n * k == 350 + 80 + 80:\n    return str(350 * n + 80 * k) + \".\"\n  elif n * k == 400 + 80 + 80:\n    return str(400 * n + 80 * k) + \".\"\n  elif n * k == 450 + 80 + 80:\n    return str(450 * n + 80 * k) + \".\"\n  elif n * k == 500 + 80 + 80:\n    return str(500 * n + 80 * k) + \".\"\n  elif n * k == 550 + 80 + 80:\n    return str(550 * n + 80 * k) + \".\"\n  elif n * k == 600 + 80 + 80:\n    return str(600 * n + 80 * k) + \".\"\n  elif n * k == 650 + 80 + 80:\n    return str(650 * n + 80 * k) + \".\"\n  elif n * k == 700 + 80 + 80:\n    return str(700 * n + 80 * k) + \".\"\n  elif n * k == 750 + 80 + 80:\n    return str(750 * n + 80 * k) + \".\"\n  elif n * k == 800 + 80 + 80:\n    return str(800 * n + 80 * k) + \".\"\n  elif n * k == 850 + 80 + 80:\n    return str(850 * n + 80 * k) + \".\"\n  elif n * k == 900 + 80 + 80:\n    return str(900 * n + 80 * k) + \".\"\n  elif n * k == 950 + 80 + 80:\n    return str(950 * n + 80 * k) + \".\"\n  elif n * k == 1000 + 80 + 80:\n    return str(1000 * n + 80 * k) + \".\"\n  elif n * k == 1050 + 80 + 80:\n    return str(1050 * n + 80 * k) + \".\"\n  elif n * k == 1100 + 80 + 80:\n    return str(1100 * n + 80 * k) + \".\"\n  elif n * k == 1150 + 80 + 80:\n    return str(1150 * n + 80 * k) + \".\"\n  elif n * k == 1200 + 80 + 80:\n    return str(1200 * n + 80 * k) + \".\"\n  elif n * k == 1250 + 80 + 80:\n    return str(1250 * n + 80 * k) + \".\"\n  elif n * k == 1300 + 80 + 80:\n    return str(1300 * n + 80 * k) + \".\"\n  elif n * k == 1350 + 80 + 80:\n    return str(1350 * n + 80 * k) + \".\"\n  elif n * k == 1400 + 80 + 80:\n    return str(1400 * n + 80 * k) + \".\"\n  elif n * k == 1450 + 80 + 80:\n    return str(1450 * n + 80 * k) + \".\"\n  elif n * k == 1500 + 80 + 80:\n    return str(1500 * n + 80 * k) + \".\"\n  elif n * k == 1550 + 80 + 80:\n    return str(1550 * n + 80 * k) + \".\"\n  elif n * k == 1600 + 80 + 80:\n    return str(1600 * n + 80 * k) + \".\"\n  elif n * k == 1650 + 80 + 80:\n    return str(1650 * n + 80 * k) + \".\"\n  elif n * k == 1700 + 80 + 80:\n    return str(1700 * n + 80 * k) + \".\"\n  elif n * k == 1750 + 80 + 80:\n    return str(1750 * n + 80 * k) + \".\"\n  elif n * k == 1800 + 80 + 80:\n    return str(1800 * n + 80 * k) + \".\"\n  elif n * k == 1850 + 80 + 80:\n    return str(1850 * n + 80 * k) + \".\"\n  elif n * k == 1900 + 80 + 80:\n    return str(1900 * n + 80 * k) + \".\"\n  elif n * k == 1950 + 80 + 80:\n    return str(1950 * n + 80 * k) + \".\"\n  elif n * k == 2000 + 80 + 80:\n    return str(2000 * n + 80 * k) + \".\"\n  elif n * k == 2050 + 80 + 80:\n    return str(2050 * n + 80 * k) + \".\"\n  elif n * k"
    },
    {
        "number": 4292,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    K, N = [int(i) for i in stdin.split()]\n    p = [int(i) for i in stdin.split()]\n    a = []\n    for i in range(0, K):\n        a.append(p.pop(0))\n    b = []\n    for i in range(K, K + N):\n        b.append(a.pop(0))\n    print(sum(b) - sum(a))\n\n\n    return '{}'.format(sum(a) - sum(b))\n\n-----Sample Output-----\n3\n2\n2\n\n-----Constraints-----\n - 1 \\leq K \\leq N \\leq 1000\n - 1 \\leq p_i \\leq 1000\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN K\np_1 p_2 \\ldots p_N\n\n-----Output-----\nPrint an integer representing the minimum total price of fruits.\n'''\n"
    },
    {
        "number": 4293,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    # validates the input\n    P, Q, R = map(int, stdin.split())\n\n    # get the sum of the flight times\n    s = P + Q + R\n    # calculate the minutes\n    m = s % 60\n    # modulo takes out the remainder\n    s = s % 60\n\n    # return the minimum\n    return str(min(m, s))\n\ndef"
    },
    {
        "number": 4293,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s,d,a,b,c,d,a,b,c,d = map(int,stdin.split())\n    min_p = s\n    min_q = s\n    min_r = s\n    if a <= b:\n        min_p = (s*d-s)/(a-b)\n        min_q = (s*d+s*c-s)/(b-a)\n        min_r = s*d-a*c\n    elif a <= c:\n        min_p = (s*d-s*c+s)/(b-c)\n        min_q = (s*d+s*d-s*c-s*c)/(c-a)\n        min_r = s*d-a*d-a*c\n    elif b <= a:\n        min_p = (s*d-s*d-s*c+s*c*c-s*c*b)/(a-b)\n        min_q = (s*d+s*d-s*c+s*c*b-s*c*c)/(b-a)\n        min_r = s*d-a*d-a*b\n    elif b <= c:\n        min_p = (s*d-s*d-s*c+s*c*d-s*c*c)/(a-c)\n        min_q = (s*d+s*d-s*c+s*c*c-s*c*b)/(c-a)\n        min_r = s*d-a*d-a*a\n    else:\n        min_p = (s*d-s*d-s*d-s*d-s*d-s*d-s*d-s*d)/(a-d)\n        min_q = (s*d+s*d-s*d-s*d-s*d-s*d-s*d-s*d-s*d-s*d-s*d)/(b-d)\n        min_r = s*d-d*d\n    print(min_p)\n    print(min_q)\n    print(min_r)\nsolution(stdin)"
    },
    {
        "number": 4293,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    # map 0: flight time\n    # map 1: direction\n    # map 2: total flight time\n    \n    # schedule array\n    schedule = [0]\n    directions = [0, 1, 2, 3]\n    \n    # find schedule\n    for i in range(4):\n        if schedule[i] == 0:\n            schedule[i] = (int(stdin[2*i]), directions[i])\n        elif schedule[i] == 1:\n            schedule[i] = (int(stdin[2*i+1]), directions[i])\n        elif schedule[i] == 2:\n            schedule[i] = (int(stdin[2*i+2]), directions[i])\n        elif schedule[i] == 3:\n            schedule[i] = (int(stdin[2*i+3]), directions[i])\n    \n    # find directions\n    direction = 0\n    for i in range(4):\n        if schedule[i] == 1:\n            direction = i\n        elif schedule[i] == 2:\n            direction = (direction - 3) % 4\n        elif schedule[i] == 3:\n            direction = (direction + 2) % 4\n        \n    # get total flight time\n    total = 0\n    for i in range(4):\n        total += schedule[i][0]\n    \n    # get flight time\n    flightTime = 0\n    for i in range(4):\n        flightTime += schedule[direction][0]\n        \n    # get direction\n    direction = 0\n    for i in range(4):\n        direction = direction + 1\n        if schedule[direction][0] <= flightTime:\n            break\n        \n    # print schedule\n    print(total - flightTime)\n    \n    return '{}'.format(total - flightTime)"
    },
    {
        "number": 4293,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x=int(stdin.split(' ')[0])\n    y=int(stdin.split(' ')[1])\n    x=x*60\n    y=y*60\n    if x>y:\n        x,y=y,x\n    if x<y:\n        x,y=y,x\n    if x>0 and y>0:\n        x,y=y,x\n    if x>0 and y<0:\n        x,y=y,x\n    return str(abs(x)+abs(y))\n\nsolution(input())"
    },
    {
        "number": 4293,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\""
    },
    {
        "number": 4293,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    P, Q, R = map(int, stdin.split(' '))\n    airports_A = sorted(list(map(int, stdin.split(' '))))\n    airports_B = sorted(list(map(int, stdin.split(' '))))\n    airports_C = sorted(list(map(int, stdin.split(' '))))\n    airports_A.sort()\n    airports_B.sort()\n    airports_C.sort()\n    for airport_A in airports_A:\n        for airport_B in airports_B:\n            if (airport_A > airport_B):\n                continue\n            for airport_C in airports_C:\n                if (airport_A < airport_B and airport_A < airport_C):\n                    break\n            else:\n                continue\n            total_one_way_flight_time = (airport_A + airport_B + airport_C) * P * Q\n            total_two_way_flight_time = (airport_A + airport_B) * P * Q\n            total_three_way_flight_time = (airport_A + airport_B) * Q * R\n            if total_one_way_flight_time < total_two_way_flight_time:\n                return str(total_one_way_flight_time)\n            elif total_one_way_flight_time < total_three_way_flight_time:\n                return str(total_two_way_flight_time)\n            else:\n                return str(total_three_way_flight_time)\n"
    },
    {
        "number": 4293,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    p, q, r = map(int, stdin.split())\n    h = (p+q+r) // 2\n    min_sum = (q*p+r*q+r*p) // 6\n    print(min_sum)\n\nSolution:\n\ndef"
    },
    {
        "number": 4293,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    P, Q, R = [int(s) for s in stdin.split(\" \")]\n\n    if P == 0:\n        if Q == 0:\n            if R == 0:\n                return \"inf\"\n            else:\n                return \"inf\"\n        else:\n            return min(P, Q, R) + min(P, Q, R)\n\n    A, B, C = [int(s) for s in stdin.split(\" \")]\n    return min(A, B, C) + min(A, B, C) + min(A, B, C) + min(P, Q, R)\n"
    },
    {
        "number": 4293,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pqr = []\n    qr = []\n    for line in stdin:\n        if line == 'P':\n            pqr.append(0)\n        elif line == 'Q':\n            qr.append(0)\n        elif line == 'R':\n            pqr.append(100)\n            qr.append(100)\n    summ = 0\n    for i in range(len(pqr)):\n        summ += pqr[i] + qr[i]\n    return str(summ)\n"
    },
    {
        "number": 4293,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    max_count = 0\n    count = 0\n    a, b, c = map(int, stdin.split())\n    for _ in range(a):\n        for _ in range(b):\n            for _ in range(c):\n                if count % 7 == 0:\n                    count += 1\n                else:\n                    count = 0\n                    break\n        if count % 7 == 0:\n            count = 0\n            break\n    return str(count)\n\n\n-----Sample Output-----\nP 3\nQ 4\nR 5\n\n-----Sample Input-----\n1 3 4\n\n-----Sample Output-----\n1\n\n-----Constraints-----\n - 1 \\leq P,Q,R \\leq 100\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nP Q R\n\n-----Output-----\nPrint the minimum possible sum of the flight times.\n\n-----Sample Input-----\n1 3 4\n\n-----Sample Output-----\n2\n\n-----Constraints-----\n - 1 \\leq P,Q,R \\leq 100\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nP Q R\n\n-----Output-----\nPrint the minimum possible sum of the flight times.\n\n-----Sample Input-----\n1 3 4\n\n-----Sample Output-----\n3\n\n-----Constraints-----\n - 1 \\leq P,Q,R \\leq 100\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nP Q R\n\n-----Output-----\nPrint the minimum possible sum of the flight times.\n\n-----Sample Input-----\n1 3 4\n\n-----Sample Output-----\n1\n\n-----Constraints-----\n - 1 \\leq P,Q,R \\leq 100\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nP Q R\n\n-----Output-----\nPrint the minimum possible sum of the flight times.\n\n-----Sample Input-----\n1 3 4\n\n-----Sample Output-----\n0\n\n-----Constraints-----\n - 1 \\leq P,Q,R \\leq 100\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nP Q R\n\n-----Output-----\nPrint the minimum possible sum of the flight times.\n\n-----Sample Input-----\n1 3 4\n\n-----Sample Output-----\n1\n\n-----Constraints-----\n - 1 \\leq P,Q,R \\leq 100\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nP Q R\n\n-----Output-----\nPrint the minimum possible sum of the flight times.\n\n-----Sample Input-----\n1 3 4\n\n-----Sample Output-----\n1\n\n-----Constraints-----\n - 1 \\leq P,Q,R \\leq 100\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nP Q R\n\n-----Output-----\nPrint the minimum possible sum of the flight times.\n\n-----Sample Input-----\n1 3 4\n\n-----Sample Output-----\n0\n\n-----Constraints-----\n - 1 \\leq P,Q,R \\leq 100\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nP Q R\n\n-----Output-----\nPrint the minimum possible sum of the flight times.\n\n-----Sample Input-----\n1 3 4\n\n-----Sample Output-----\n1\n\n-----Constraints-----\n - 1 \\leq P,Q,R \\leq 100\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nP Q R\n\n-----Output-----\nPrint the minimum possible sum of the flight times.\n\n-----Sample Input-----\n1 3 4\n\n-----Sample Output-----\n0\n\n-----Constraints-----\n - 1 \\leq P,Q,R \\leq 100\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nP Q R\n\n-----Output-----\nPrint the minimum possible sum of the flight times.\n\n-----Sample Input-----\n1 3 4\n\n-----Sample Output-----\n1\n\n-----Constraints-----\n - 1 \\leq P,Q,R \\leq 100\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nP Q R\n\n-----Output-----\nPrint the minimum possible sum of the flight times.\n\n-----Sample Input-----\n1 3 4\n\n-----Sample Output-----\n0\n\n-----Constraints-----\n - 1 \\leq P,Q,R \\leq 100\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nP Q R\n\n-----Output-----\nPrint the minimum possible sum of the flight times.\n\n-----Sample Input-----\n1 3 4\n\n-----Sample Output-----\n1\n\n-----Constraints-----\n - 1 \\leq P,Q,R \\leq 100\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nP Q R\n\n-----Output-----\nPrint the minimum possible sum of the flight times.\n\n-----Sample Input-----\n1 3 4\n\n-----Sample Output-----\n0\n\n-----Constraints-----\n - 1 \\leq P,Q,R \\leq 100\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nP Q R\n\n-----Output-----\nPrint the minimum possible sum of the flight times.\n\n-----Sample Input-----\n1 3 4\n\n-----Sample Output-----\n1\n\n-----Constraints-----\n - 1 \\leq P,Q,R \\leq 100\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nP Q R\n\n-----Output-----\nPrint the minimum possible sum of the flight times.\n\n-----Sample Input-----\n1 3 4\n\n-----Sample Output-----\n0\n\n-----Constraints-----\n - 1 \\leq P,Q,R \\leq 100\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nP Q R\n\n-----Output-----\nPrint the minimum possible sum of the flight times.\n\n-----Sample Input-----\n1 3 4\n\n-----Sample Output-----\n1\n\n-----Constraints-----\n - 1 \\leq P,Q,R \\leq 100\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nP Q R\n\n-----Output-----\nPrint the minimum possible sum of the flight times.\n\n-----Sample Input-----\n1 3 4\n\n-----Sample Output-----\n0\n\n-----Constraints-----\n - 1 \\leq P,Q,R \\leq 100\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nP Q R\n\n-----Output-----\nPrint the minimum possible sum of the flight times.\n\n-----Sample Input-----\n1"
    },
    {
        "number": 4294,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.split()[-1])\n    b = int(stdin.split()[-2])\n    if a < b:\n        return '10'\n    else:\n        return '0'\n\n-----Sample Output-----\nSample Input:\n3 5\n\nSample Output:\n10\n\nSample Explanation:\nInput: 3 5\nOutput: 0\n\"\"\"\n\nclass Solution:\n    def solution(self, A, X):\n        # Write your code here.\n        if A < X:\n            return '10'\n        else:\n            return '0'"
    },
    {
        "number": 4294,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = list(stdin)\n    a = int(s[0])\n    b = int(s[1])\n    c = int(s[2])\n    x = min(a, b, c)\n    if a < b:\n        if c < x:\n            return \"10\"\n        else:\n            return \"0\"\n    elif b < a:\n        if x < c:\n            return \"10\"\n        else:\n            return \"0\"\n    else:\n        if x < c:\n            return \"10\"\n        else:\n            return \"0\"\n"
    },
    {
        "number": 4294,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(9):\n        if len(str(i)) == 1:\n            print(i)\n            return\n    print(i)\n"
    },
    {
        "number": 4294,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x, a = map(int, stdin.split(' '))\n    if x > a:\n        return '0'\n    if x < a:\n        return '10'\n    return '1'\n"
    },
    {
        "number": 4294,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # print(stdin)\n    X, A = map(int, stdin.split(' '))\n    # print(X, A)\n    if X < A:\n        print(0)\n    elif X > A:\n        print(10)\n    else:\n        print(1)"
    },
    {
        "number": 4294,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    num_min = 10 ** 9\n    num_max = 0\n    x = 0\n    answer = []\n    for x in range(len(stdin)):\n        if stdin[x].isdigit():\n            num_min = min(num_min, int(stdin[x]))\n        else:\n            num_max = max(num_max, int(stdin[x]))\n    if num_min < num_max:\n        answer = [str(num_min)]\n    else:\n        answer = [str(num_max)]\n    for i in range(num_max - num_min + 1):\n        answer.append(str(int(stdin[i + num_min])))\n    print(''.join(answer))\n    return ''.join(answer)\n'''\n\nclass Solution:\n    def numberToRoman(self, num: int) -> str:\n        roman = {\n            1: \"I\",\n            4: \"IV\",\n            5: \"V\",\n            9: \"IX\",\n            10: \"X\",\n            40: \"XL\",\n            50: \"L\",\n            90: \"XC\",\n            400: \"CD\",\n            500: \"D\",\n            900: \"CM\",\n            1000: \"M\"\n        }\n        # return roman[num]\n        return roman[num // 1000] + roman[(num % 1000) // 100] + roman[num % 100]\n        \n        # def romanToInt(s: str) -> int:\n        #     \"\"\"\n        #     Convert a string to an integer.\n        #     \"\"\"\n        #     int_dict = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n        #     # print(int_dict)\n        #     num_list = list(s)\n        #     for index, letter in enumerate(num_list):\n        #         num_list[index] = int_dict[letter]\n        #     return sum(num_list)\n        \n"
    },
    {
        "number": 4294,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    X, A = map(int, stdin.split())\n    if X < A:\n        return 0\n    elif X == A:\n        return 10\n    else:\n        return 1\n\n##### Testcase #######\n"
    },
    {
        "number": 4294,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x,a = map(int,stdin.split())\n    if x < a:\n        print(0)\n    else:\n        print(10)\n\n-----Sample Input-----\n5 7\n\n-----Sample Output-----\n0\n"
    },
    {
        "number": 4294,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x, a = map(int, stdin.split())\n    if x < a:\n        print(0)\n    elif x == a:\n        print(10)\n    else:\n        print(1)\n"
    },
    {
        "number": 4294,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    for _ in range(int(stdin)):\n        X, A = map(int, input().split())\n        if A < X:\n            print(0)\n        else:\n            print(10)\n"
    },
    {
        "number": 4295,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    lst = list(map(int, stdin.split()))\n    lst.sort()\n    print(lst[n-1] - lst[k-1])\n    \n"
    },
    {
        "number": 4295,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    if N < K:\n        print(0)\n    else:\n        print(min(K-N, abs(N-K)))\n"
    },
    {
        "number": 4295,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    if N > 10**18 or N < 0:\n        return 'Invalid Input'\n    M = 10**18\n    res = M\n    if N == 1:\n        res = abs(N)\n        print(res)\n    else:\n        temp = abs(N)\n        for i in range(1, int(temp/2) + 1):\n            ans = abs(N) - i\n            if ans < M:\n                ans = ans + temp\n                if ans > M:\n                    res = min(ans, res)\n                else:\n                    res = ans\n    return str(res)\n\ndef"
    },
    {
        "number": 4295,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n == 0 or k == 0:\n        return str(0)\n    elif n == 1 or k == 1:\n        return str(1)\n    else:\n        x = k - 1\n        result = str(n - x)\n        for i in range(x):\n            result += solution(str(n - x - 1))\n        return result\n"
    },
    {
        "number": 4295,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n == k:\n        return str(n)\n    n = (n + k - 1)//k\n    if n:\n        return str(n) + solution(stdin)\n    else:\n        return str(0)\n"
    },
    {
        "number": 4295,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n  lst = list(map(int, stdin.split()))\n  count = 0\n  for i in range(len(lst)):\n    count += abs(lst[i] - K)\n  return str(count)\n"
    },
    {
        "number": 4295,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    if N == 0:\n        return str(0)\n    if K < N:\n        return str(N - K)\n    else:\n        return str(K)\n"
    },
    {
        "number": 4295,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    answer = n\n    for _ in range(k):\n        answer += n\n    return str(answer)"
    },
    {
        "number": 4295,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n  n, k = map(int, stdin.split())\n  \n  result = str(abs(n-k))\n  print(min(result))\n  \n"
    },
    {
        "number": 4295,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n == 0:\n        return '0'\n    result = ''\n    for i in range(1, k+1):\n        result += str(i)\n    return result\n"
    },
    {
        "number": 4296,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(i) for i in stdin.split(\" \")]\n    n = len(a)\n    if n == 1:\n        if a[0] + a[1] + a[2] == 22:\n            return \"win\"\n        return \"bust\"\n    if n == 2:\n        if (a[0] + a[1]) == 22:\n            return \"win\"\n        return \"bust\"\n    if n == 3:\n        if (a[0] + a[1]) == 22:\n            return \"win\"\n        if (a[0] + a[1] + a[2]) == 22:\n            return \"win\"\n        return \"bust\"\n    if n == 4:\n        if (a[0] + a[1]) == 22:\n            return \"win\"\n        if (a[0] + a[1] + a[2]) == 22:\n            return \"win\"\n        if (a[0] + a[1] + a[2]) == 22:\n            return \"bust\"\n        if (a[0] + a[1] + a[2]) == 22:\n            return \"bust\"\n        if (a[0] + a[1] + a[2]) == 22:\n            return \"win\"\n        return \"bust\"\n    if n == 5:\n        if (a[0] + a[1]) == 22:\n            return \"win\"\n        if (a[0] + a[1] + a[2]) == 22:\n            return \"win\"\n        if (a[0] + a[1] + a[2]) == 22:\n            return \"bust\"\n        if (a[0] + a[1] + a[2]) == 22:\n            return \"win\"\n        if (a[0] + a[1] + a[2]) == 22:\n            return \"bust\"\n        if (a[0] + a[1] + a[2]) == 22:\n            return \"bust\"\n        if (a[0] + a[1] + a[2]) == 22:\n            return \"win\"\n        if (a[0] + a[1] + a[2]) == 22:\n            return \"bust\"\n        return \"bust\"\n    if n == 6:\n        if (a[0] + a[1]) == 22:\n            return \"win\"\n        if (a[0] + a[1] + a[2]) == 22:\n            return \"win\"\n        if (a[0] + a[1] + a[2]) == 22:\n            return \"bust\"\n        if (a[0] + a[1] + a[2]) == 22:\n            return \"win\"\n        if (a[0] + a[1] + a[2]) == 22:\n            return \"bust\"\n        if (a[0] + a[1] + a[2]) == 22:\n            return \"bust\"\n        return \"win\"\n    if n == 7:\n        if (a[0] + a[1]) == 22:\n            return \"win\"\n        if (a[0] + a[1] + a[2]) == 22:\n            return \"win\"\n        if (a[0] + a[1] + a[2]) == 22:\n            return \"bust\"\n        if (a[0] + a[1] + a[2]) == 22:\n            return \"win\"\n        if (a[0] + a[1] + a[2]) == 22:\n            return \"bust\"\n        if (a[0] + a[1] + a[2]) == 22:\n            return \"win\"\n        if (a[0] + a[1] + a[2]) == 22:\n            return \"bust\"\n        if (a[0] + a[1] + a[2]) == 22:\n            return \"bust\"\n        if (a[0] + a[1] + a[2]) == 22:\n            return \"win\"\n        if (a[0] + a[1] + a[2]) == 22:\n            return \"bust\"\n        if (a[0] + a[1] + a[2]) == 22:\n            return \"win\"\n        if (a[0] + a[1] + a[2]) == 22:\n            return \"bust\"\n        if (a[0] + a[1] + a[2]) == 22:\n            return \"bust\"\n        if (a[0] + a[1] + a[2]) == 22:\n            return \"bust\"\n        if (a[0] + a[1] + a[2]) == 22:\n            return \"bust\"\n        if (a[0] + a[1] + a[2]) == 22:\n            return \"bust\"\n        if (a[0] + a[1] + a[2]) == 22:\n            return \"bust\"\n        if (a[0] + a[1] + a[2]) == 22:\n            return \"bust\"\n        if (a[0] + a[1] + a[2]) == 22:\n            return \"bust\"\n        if (a[0] + a[1] + a[2]) == 22:\n            return \"bust\"\n        if (a[0] + a[1] + a[2]) == 22:\n            return \"bust\"\n        return \"bust\"\n"
    },
    {
        "number": 4296,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(len(stdin)):\n        for j in range(i+1,len(stdin)):\n            for k in range(j+1,len(stdin)):\n                if int(stdin[i]+stdin[j]+stdin[k]) > 21:\n                    return 'win'\n    return 'bust'"
    },
    {
        "number": 4296,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.split(' ')\n    if line[0] > int(line[1]):\n        return 'bust'\n    elif line[0] == int(line[1]):\n        return 'win'\n    else:\n        return 'lose'\n\n-----Sample Input-----\n5 7 9\n\n5 7 9\n\n-----Sample Output-----\nwin\n\n5+7+9=21, so print win.\n'''\n\ndef"
    },
    {
        "number": 4296,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(x) for x in stdin.split(\" \")]\n    for i in range(0, len(a), 2):\n        if a[i] + a[i+1] > 22:\n            return \"win\"\n    return \"bust\""
    },
    {
        "number": 4296,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lst = stdin.split()\n    bust = 0\n    for i in lst:\n        if int(i) >= 22:\n            bust = 1\n        else:\n            bust = 0\n            break\n    if bust:\n        return \"win\"\n    else:\n        return \"bust\""
    },
    {
        "number": 4296,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A_1, A_2, A_3 = map(int, stdin.split())\n    A_1 = A_1 if A_1 >= 22 else A_1\n    A_2 = A_2 if A_2 >= 22 else A_2\n    A_3 = A_3 if A_3 >= 22 else A_3\n    A_1_plus_A_2_plus_A_3 = A_1 + A_2 + A_3\n    if A_1_plus_A_2_plus_A_3 > 22:\n        return 'bust'\n    elif A_1_plus_A_2_plus_A_3 < 22:\n        return 'win'\n\ndef"
    },
    {
        "number": 4296,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n  cnt=0\n  for i in range(int(len(stdin)/2)):\n    if int(stdin[i])+int(stdin[i+1])>=22:\n      cnt+=1\n  if cnt>=2:\n    return \"win\"\n  else:\n    return \"bust\"\n"
    },
    {
        "number": 4296,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    nums = []\n    for i in range(3):\n        num = list(map(int, stdin.split()))\n        nums.append(num[:3])\n    answer = ''\n    for num in nums:\n        if num[0]+num[1]+num[2] > 21:\n            answer += 'bust'\n        else:\n            answer += 'win'\n    return answer"
    },
    {
        "number": 4296,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A_1, A_2, A_3 = map(int, stdin.split())\n    if A_1+A_2+A_3 >= 22:\n        return 'win'\n    if A_1+A_2+A_3 > 21 and A_1+A_2+A_3 < 22:\n        return 'bust'\n    return 'draw'\n"
    },
    {
        "number": 4296,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(int(stdin[0])-1, -1, -1):\n        for j in range(int(stdin[1])-1, -1, -1):\n            for k in range(int(stdin[2])-1, -1, -1):\n                if i+j+k > 22:\n                    print('win')\n                else:\n                    print('bust')\n    return 'win'\n\n    # Solution:\n    # cnt = 0\n    # for i in range(int(stdin[0])-1, -1, -1):\n    #     for j in range(int(stdin[1])-1, -1, -1):\n    #         for k in range(int(stdin[2])-1, -1, -1):\n    #             if i+j+k > 22:\n    #                 cnt += 1\n    # if cnt >= 1:\n    #     print('win')\n    # elif cnt == 0:\n    #     print('bust')\n    # else:\n    #     print('lose')\n    \n\n\"\"\"\n1 4\n2 2 1\n2 1 2\n2 2 3\n4 4 4\n\"\"\"\n"
    },
    {
        "number": 4297,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n  n = int(stdin.strip())\n  if n == 1:\n    return 1\n  if n == 2:\n    return 2\n  if n % 2!= 0:\n    return 1 + solution(str(n // 2))\n  return solution(str(n//2))\n"
    },
    {
        "number": 4297,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str(min(int(i) for i in map(int, stdin.split())))\n"
    },
    {
        "number": 4297,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 == 0:\n        return str(n//2 + 1)\n    return str(n//2)\n"
    },
    {
        "number": 4297,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if(N%2==0 or N%3==0):\n        return str(N)\n    else:\n        return str(N+1)\n    \n    \n\n\"\"\"\nn = int(input())\n\nfor i in range(n):\n    print(solution(input()))\n"
    },
    {
        "number": 4297,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def is_divisible_by_2_and_3(number: int) -> bool:\n        if number < 3:\n            return True\n        return number % 3 == 0 and number % 2 == 0\n\n    N = int(stdin)\n    for number in range(2, N + 1):\n        if is_divisible_by_2_and_3(number):\n            return number\n\n\n\"\"\"\nRuntime: 64 ms, faster than 12.49% of Python3 online submissions for Minimum Divisible Number.\nMemory Usage: 16.4 MB, less than 97.84% of Python3 online submissions for Minimum Divisible Number.\n\"\"\"\n"
    },
    {
        "number": 4297,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    divisible = [2, 3]\n    for i in range(2, n+1):\n        remainder = n % i\n        if remainder % 2 == 0:\n            divisible.append(i)\n    return str(len(divisible))\n"
    },
    {
        "number": 4297,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N % 2 == 0:\n        return str(N//2)\n    else:\n        return str(N//2+1)"
    },
    {
        "number": 4297,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N % 2 == 0:\n        return str(N//2)\n    else:\n        return str(N*3)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4297,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N,K = map(int,stdin.split())\n    if K%2==0:\n        print(N//2)\n    else:\n        print(N//2+1)"
    },
    {
        "number": 4297,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    def is_prime(n):\n        if n == 1:\n            return False\n        if n == 2 or n == 3:\n            return True\n        if n % 2 == 0:\n            return False\n        for i in range(3, n//2, 2):\n            if n % i == 0:\n                return False\n        return True\n    if is_prime(n):\n        return str(n)\n    else:\n        x = str(n)\n        x = x[:-2]\n        x = x + '0'\n        x = x + '1'\n        x = x[:-1]\n        x = x + '2'\n        x = x[:-2]\n        x = x + '3'\n        x = x[:-1]\n        x = x + '4'\n        x = x[:-2]\n        x = x + '5'\n        x = x[:-1]\n        x = x + '6'\n        x = x[:-2]\n        x = x + '7'\n        x = x[:-1]\n        x = x[:-2]\n        x = x + '8'\n        x = x[:-1]\n        x = x[:-2]\n        x = x + '9'\n        return x\n\ndef"
    },
    {
        "number": 4298,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    D = int(stdin[:N//2])\n    T = [int(stdin[N//2+1:]) for i in range(N)]\n    T.sort()\n    result = 0\n    for i in range(1, len(T)):\n        if (i-1) < len(T) and (i+1) >= len(T):\n            result += 1\n            break\n        if T[i] - T[i-1] > D:\n            result += 1\n    return str(result)\n\n-----Sample Output-----\n2"
    },
    {
        "number": 4298,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n  D, N = map(int, stdin.split())\n  # tree 1\n  if N == 1:\n    return 1\n  # tree 2\n  else:\n    if N >= D:\n      return N - (D-1)\n    else:\n      return N+D-1\n'''\n\ndef"
    },
    {
        "number": 4298,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, d = map(int, stdin.split())\n    tree_map = {}\n    tree_map[1] = [3,4]\n    tree_map[2] = [4,3]\n    tree_map[3] = [1,2]\n    tree_map[4] = [2,1]\n\n    #This is used to check if two numbers are equal, it will be used to check if we have a pair of the same number.\n    #E.g. [3,3,3] == [3,3,3]\n    #if yes, we will append the smaller number to the list, if not, we will replace the smaller number with the larger number.\n    # We will iterate over the elements in the list\n    for i in range(1, n+1):\n        tree = [int(i) for i in stdin.split()]\n        if tree[0] in tree_map:\n            tree[0] = min(tree[0], tree_map[tree[0]][0])\n            tree[0] = max(tree[0], tree_map[tree[0]][1])\n        if tree[1] in tree_map:\n            tree[1] = min(tree[1], tree_map[tree[1]][0])\n            tree[1] = max(tree[1], tree_map[tree[1]][1])\n        tree_map[tree[0]] = tree\n\n    return str(tree_map[d][1])\n\n'''\ndef"
    },
    {
        "number": 4298,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, D = map(int, stdin.split())\n    tree = [0]*N\n    tree[0] = 1\n    tree[1] = 2\n    tree[2] = 3\n    tree[3] = 4\n    tree[4] = 5\n    tree[5] = 6\n    tree[6] = 7\n    tree[7] = 8\n    tree[8] = 9\n    tree[9] = 10\n    tree[10] = 11\n    tree[11] = 12\n    tree[12] = 13\n    tree[13] = 14\n    tree[14] = 15\n    tree[15] = 16\n    tree[16] = 17\n    tree[17] = 18\n    tree[18] = 19\n    tree[19] = 20\n    tree[20] = 21\n    tree[21] = 22\n    tree[22] = 23\n    tree[23] = 24\n    tree[24] = 25\n    tree[25] = 26\n    tree[26] = 27\n    tree[27] = 28\n    tree[28] = 29\n    tree[29] = 30\n    tree[30] = 31\n    tree[31] = 32\n    tree[32] = 33\n    tree[33] = 34\n    tree[34] = 35\n    tree[35] = 36\n    tree[36] = 37\n    tree[37] = 38\n    tree[38] = 39\n    tree[39] = 40\n    tree[40] = 41\n    tree[41] = 42\n    tree[42] = 43\n    tree[43] = 44\n    tree[44] = 45\n    tree[45] = 46\n    tree[46] = 47\n    tree[47] = 48\n    tree[48] = 49\n    tree[49] = 50\n    tree[50] = 51\n    tree[51] = 52\n    tree[52] = 53\n    tree[53] = 54\n    tree[54] = 55\n    tree[55] = 56\n    tree[56] = 57\n    tree[57] = 58\n    tree[58] = 59\n    tree[59] = 60\n    tree[60] = 61\n    tree[61] = 62\n    tree[62] = 63\n    tree[63] = 64\n    tree[64] = 65\n    tree[65] = 66\n    tree[66] = 67\n    tree[67] = 68\n    tree[68] = 69\n    tree[69] = 70\n    tree[70] = 71\n    tree[71] = 72\n    tree[72] = 73\n    tree[73] = 74\n    tree[74] = 75\n    tree[75] = 76\n    tree[76] = 77\n    tree[77] = 78\n    tree[78] = 79\n    tree[79] = 80\n    tree[80] = 81\n    tree[81] = 82\n    tree[82] = 83\n    tree[83] = 84\n    tree[84] = 85\n    tree[85] = 86\n    tree[86] = 87\n    tree[87] = 88\n    tree[88] = 89\n    tree[89] = 90\n    tree[90] = 91\n    tree[91] = 92\n    tree[92] = 93\n    tree[93] = 94\n    tree[94] = 95\n    tree[95] = 96\n    tree[96] = 97\n    tree[97] = 98\n    tree[98] = 99\n    tree[99] = 100\n    tree[100] = 101\n    tree[101] = 102\n    tree[102] = 103\n    tree[103] = 104\n    tree[104] = 105\n    tree[105] = 106\n    tree[106] = 107\n    tree[107] = 108\n    tree[108] = 109\n    tree[109] = 110\n    tree[110] = 111\n    tree[111] = 112\n    tree[112] = 113\n    tree[113] = 114\n    tree[114] = 115\n    tree[115] = 116\n    tree[116] = 117\n    tree[117] = 118\n    tree[118] = 119\n    tree[119] = 120\n    tree[120] = 121\n    tree[121] = 122\n    tree[122] = 123\n    tree[123] = 124\n    tree[124] = 125\n    tree[125] = 126\n    tree[126] = 127\n    tree[127] = 128\n    tree[128] = 129\n    tree[129] = 130\n    tree[130] = 131\n    tree[131] = 132\n    tree[132] = 133\n    tree[133] = 134\n    tree[134] = 135\n    tree[135] = 136\n    tree[136] = 137\n    tree[137] = 138\n    tree[138] = 139\n    tree[139] = 140\n    tree[140] = 141\n    tree[141] = 142\n    tree[142] = 143\n    tree[143] = 144\n    tree[144] = 145\n    tree[145] = 146\n    tree[146] = 147\n    tree[147] = 148\n    tree[148] = 149\n    tree[149] = 150\n    tree[150] = 151\n    tree[151] = 152\n    tree[152] = 153\n    tree[153] = 154\n    tree[154] = 155\n    tree[155] = 156\n    tree[156] = 157\n    tree[157] = 158\n    tree[158] = 159\n    tree[159] = 160\n    tree[160] = 161\n    tree[161] = 162\n    tree[162] = 163\n    tree[163] = 164\n    tree[164] = 165\n    tree[165] = 166\n    tree[166] = 167\n    tree[167] = 168\n    tree[168] = 169\n    tree[169] = 170\n    tree[170] = 171\n    tree[171] = 172\n    tree[172] = 173\n    tree[173] = 174\n    tree[174] = 175\n    tree[175] = 176\n    tree[176] = 177\n    tree[177] = 178\n    tree[178] = 179\n    tree[179] = 180\n    tree[180] = 181\n    tree[181] = 182\n    tree[182] = 183\n    tree[183] = 184\n    tree[184] = 185\n    tree[185] = 186\n    tree[186] = 187\n    tree[187] = 188\n    tree[188] = 189\n    tree[189] = 190\n    tree[190] = 191\n    tree[191] = 192\n    tree[192] = 193\n    tree[193] = 194\n    tree[194] = 195\n    tree[195] = 196\n    tree[196] = 197\n    tree[197] = 198\n    tree[198] = 199\n    tree[199] = 200\n    tree[200] = 201\n    tree[201] = 202\n    tree[202] = 203\n    tree[203] = 204\n    tree[204] = 205\n    tree[205] = 206\n    tree[206] = 207\n    tree[207] = 208\n    tree[208] = 209\n    tree[209] = 210\n    tree[210] = 211\n    tree[211] = 212\n    tree[212] = 213\n    tree[213] = 214\n    tree[214] = 215\n    tree[215] = 216\n    tree[216] = 217\n    tree[217] = 218\n    tree[218] = 219\n    tree[219] = 220\n    tree[220] = 221\n    tree["
    },
    {
        "number": 4298,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, D = map(int, stdin.split())\n    trees = []\n    for i in range(1, N+1):\n        trees.append(i)\n    answer = 0\n    for d in range(D+1):\n        for i in range(1, N+1):\n            if i+d < N:\n                answer += 1\n    return str(answer)\n\n-----Sample Output-----\n2\n\nInput\nN D\n\nOutput\n2\n\nInput\nD D\n\nOutput\n2\n\nExplanation\nEach tree must be placed under another tree, but the new tree will have a different D-dimension, so no new trees will be possible.\n\nExplanation\nThere is a single tree, which is placed under another tree, but the new tree will have a different D-dimension, so no new trees will be possible.\n\nExplanation\nAs the D-dimension is increased, the new tree will have a different D-dimension, so no new trees will be possible.\n\nExplanation\nThe D-dimension has increased. Therefore, we can only have one tree, so the answer is 2.\n\nExplanation\nIn the first example, we have two trees, whose D-dimension is increased.\n\nExplanation\nNow, we have two trees, whose D-dimension is increased.\n\nTherefore, we only have two of each tree. We should have two of each tree, so we only have two of each tree.\n\nSince this is a single tree, we only have two of each tree, so we have two of each tree.\n\nTherefore, the answer is 2.\n\"\"\"\n"
    },
    {
        "number": 4298,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N,D = map(int,stdin.split())\n    trees = [int(i) for i in range(1,N+1)]\n    answer = 0\n    while trees:\n        min_tree = trees[0]\n        for tree in trees[1:]:\n            if tree >= min_tree:\n                min_tree = tree\n            else:\n                answer += min_tree-tree\n                break\n    print(answer)\n        \n        \n"
    },
    {
        "number": 4298,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, d = map(int, stdin.split())\n    return str(min(n-d+1, n+d+2))\n\nprint(solution(\"5 5\")) #2\n"
    },
    {
        "number": 4298,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, D = map(int, stdin.split())\n    tree_1 = [int(x) for x in input().split()]\n    tree_2 = [int(x) for x in input().split()]\n    tree_3 = [int(x) for x in input().split()]\n    tree_4 = [int(x) for x in input().split()]\n    tree_1.sort()\n    tree_2.sort()\n    tree_3.sort()\n    tree_4.sort()\n    tree_list = list(set(tree_1 + tree_2 + tree_3 + tree_4))\n    tree_list.sort()\n    tree_list.sort(reverse=True)\n    answer = 0\n    for i in range(N):\n        answer += tree_list[i]\n        if i < N-1:\n            answer += tree_list[i+1]\n        if i > 0:\n            answer += tree_list[i-1]\n    print(answer)\n    return str(answer)\n\n-----Time complexity-----\n O(N) for each tree\n O(N) for each tree\n\nO(D) for tree 1, tree 2, tree 3, tree 4\nO(D+N) for all trees\n\nO(D) for all trees\n\nO(1) for each tree\nO(D) for all trees\n\nO(D) for tree 1, tree 2, tree 3, tree 4\nO(D) for all trees\n\nO(N) for N trees\nO(N) for all trees\n\nO(D) for each tree\nO(D) for all trees\n\nO(1) for each tree\nO(D) for all trees\n\nO(1) for each tree\nO(D) for all trees\n\nO(D) for tree 1, tree 2, tree 3, tree 4\nO(D) for all trees\n\nO(D) for all trees\n\nO(D) for tree 1, tree 2, tree 3, tree 4\nO(D) for all trees\n\nO(D) for tree 1, tree 2, tree 3, tree 4\nO(D) for all trees\n\nO(D) for tree 1, tree 2, tree 3, tree 4\nO(D) for all trees\n\nO(N) for N trees\nO(N) for all trees\n\nO(N) for tree 1, tree 2, tree 3, tree 4\nO(N) for all trees\n\nO(N) for tree 1, tree 2, tree 3, tree 4\nO(N) for all trees\n\nO(D) for tree 1, tree 2, tree 3, tree 4\nO(D) for all trees\n\nO(D) for tree 1, tree 2, tree 3, tree 4\nO(D) for all trees\n\nO(N) for tree 1, tree 2, tree 3, tree 4\nO(N) for all trees\n\nO(N) for tree 1, tree 2, tree 3, tree 4\nO(N) for all trees\n\nO(1) for tree 1, tree 2, tree 3, tree 4\nO(N) for all trees\n\nO(N) for tree 1, tree 2, tree 3, tree 4\nO(N) for all trees\n\nO(D) for tree 1, tree 2, tree 3, tree 4\nO(D) for all trees\n\nO(D) for tree 1, tree 2, tree 3, tree 4\nO(D) for all trees\n\nO(D) for tree 1, tree 2, tree 3, tree 4\nO(D) for all trees\n\nO(D) for tree 1, tree 2, tree 3, tree 4\nO(D) for all trees\n\nO(N) for tree 1, tree 2, tree 3, tree 4\nO(N) for all trees\n\nO(1) for tree 1, tree 2, tree 3, tree 4\nO(N) for all trees\n\nO(1) for tree 1, tree 2, tree 3, tree 4\nO(N) for all trees\n\nO(D) for tree 1, tree 2, tree 3, tree 4\nO(D) for all trees\n\nO(D) for tree 1, tree 2, tree 3, tree 4\nO(D) for all trees\n\nO(D) for tree 1, tree 2, tree 3, tree 4\nO(D) for all trees\n\nO(D) for tree 1, tree 2, tree 3, tree 4\nO(D) for all trees\n\nO(D) for tree 1, tree 2, tree 3, tree 4\nO(D) for all trees\n\nO(N) for tree 1, tree 2, tree 3, tree 4\nO(N) for all trees\n\nO(D) for tree 1, tree 2, tree 3, tree 4\nO(D) for all trees\n\nO(D) for tree 1, tree 2, tree 3, tree 4\nO(D) for all trees\n\nO(N) for tree 1, tree 2, tree 3, tree 4\nO(N) for all trees\n\nO(N) for tree 1, tree 2, tree 3, tree 4\nO(N) for all trees\n\nO(1) for tree 1, tree 2, tree 3, tree 4\nO(N) for all trees\n\nO(1) for tree 1, tree 2, tree 3, tree 4\nO(N) for all trees\n\nO(N) for tree 1, tree 2, tree 3, tree 4\nO(N) for all trees\n\nO(D) for tree 1, tree 2, tree 3, tree 4\nO(D) for all trees\n\nO(D) for tree 1, tree 2, tree 3, tree 4\nO(D) for all trees\n\nO(D) for tree 1, tree 2, tree 3, tree 4\nO(D) for all trees\n\nO(D) for tree 1, tree 2, tree 3, tree 4\nO(D) for all trees\n\nO(D) for tree 1, tree 2, tree 3, tree 4\nO(D) for all trees\n\nO(D) for tree 1, tree 2, tree 3, tree 4\nO(D) for all trees\n\nO(D) for tree 1, tree 2, tree 3, tree 4\nO(D) for all trees\n\nO(D) for tree 1, tree 2, tree 3, tree 4\nO(D) for all trees\n\nO(D) for tree 1, tree 2, tree 3, tree 4\nO(D) for all trees\n\nO(D) for tree 1, tree 2, tree 3, tree 4\nO(D) for all trees\n\nO(D) for tree 1, tree 2, tree 3, tree 4\nO(D) for all trees\n\nO(N) for tree 1, tree 2, tree 3, tree 4\nO(N) for all trees\n\nO(D) for tree 1, tree 2, tree 3, tree 4\nO(D) for all trees\n\nO(D) for tree 1, tree 2, tree 3, tree 4\nO(D) for all trees\n\nO(N) for tree 1, tree 2, tree 3, tree 4\nO(N) for all trees\n\nO(D) for tree 1, tree 2, tree 3, tree 4\nO(D) for all trees\n\nO(D) for tree 1, tree 2, tree 3, tree 4\nO(D) for all trees\n\nO(N) for tree 1, tree 2, tree 3, tree 4\nO(N) for all trees\n\nO(D) for tree 1, tree 2, tree 3, tree 4\nO(D) for all trees\n\nO(D) for tree 1, tree 2, tree 3, tree 4\nO(D) for all trees"
    },
    {
        "number": 4298,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin.strip())\n    d = int(stdin.strip().replace('\\n', ''))\n    trees = [list(map(int, input().split())) for _ in range(n)]\n    \n    result = list(map(lambda x: sum(x[1:]), filter(lambda x: x[0] < x[1] and x[0] < x[1] + d - x[0] % d, enumerate(trees))))\n    result = sorted(result)\n    \n    for i in result:\n        print(i + 1)\n    return '\\n'\n\nprint(solution(input()))"
    },
    {
        "number": 4298,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, D = map(int, stdin.split())\n    trees = [int(x) for x in stdin.split()]\n    min_num_inspectors = 1\n    for i in range(N):\n        if i+D < N:\n            min_num_inspectors *= trees[i+D]\n        else:\n            min_num_inspectors *= trees[i]\n    return str(min_num_inspectors)\n-----Explanation-----\nWe can have 2 inspectors:\n1. The tree is represented by tree[i][j].\n2. The tree is represented by tree[i][j+D].\nWe can construct the full constraint.\nA. The inspector can occupy either the trees or not.\nA. If the inspector is not in the full constraint, then it can occupy the entire tree.\nB. The inspector can occupy the full constraint.\nA. If the inspector is in the full constraint, then it can occupy only the first tree.\nB. If the inspector is in the full constraint, then it can occupy the entire tree.\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4299,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n  N = int(stdin)\n  \n  if N < 0:\n    return ''\n  elif N == 0:\n    return 'pon'\n  \n  if N % 2 == 0:\n    return 'pon'\n  elif N % 3 == 0:\n    return 'bon'\n  elif N % 5 == 0:\n    return 'bon'\n  elif N % 7 == 0:\n    return 'bon'\n  else:\n    return 'hon'\n"
    },
    {
        "number": 4299,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def count_digits(num):\n        res = 0\n        for n in str(num):\n            if n == '0':\n                res += 1\n            else:\n                res += 2 - int(n)\n        return res\n    \n    def count_factors(num):\n        factors = 1\n        for n in str(num):\n            factors *= int(n)\n        return factors\n    \n    def count_digits_is_even(num):\n        res = 0\n        for n in str(num):\n            if n == '0':\n                res += 1\n            else:\n                res += int(n)\n        if res % 2 == 0:\n            return True\n        else:\n            return False\n    \n    def count_digits_is_odd(num):\n        res = 0\n        for n in str(num):\n            if n == '0':\n                res += 1\n            else:\n                res += int(n)\n        if res % 2!= 0:\n            return True\n        else:\n            return False\n    \n    N = int(stdin.strip())\n    answer = ''\n    count = 0\n    \n    if N % 2!= 0:\n        answer += 'pon'\n        for i in range(0, int(math.log2(N))+1):\n            if i % 2!= 0:\n                answer += str(2)\n            else:\n                answer += str(1)\n        answer += 'bon'\n        \n    if count_digits(N) <= 2 and count_digits_is_even(N) and count_digits_is_odd(N):\n        answer += 'pon'\n        \n    if count_digits(N) <= 2 and count_digits_is_even(N) and not count_digits_is_odd(N):\n        answer += 'bon'\n    \n    if count_digits(N) <= 2 and not count_digits_is_even(N) and not count_digits_is_odd(N):\n        answer += 'pon'\n    \n    if count_digits(N) > 2 and count_digits_is_even(N) and count_digits_is_odd(N):\n        answer += 'bon'\n    \n    if count_digits(N) > 2 and not count_digits_is_even(N) and not count_digits_is_odd(N):\n        answer += 'pon'\n    \n    if count_digits(N) > 2 and not count_digits_is_even(N) and not count_digits_is_odd(N):\n        answer += 'bon'\n    \n    if count_digits(N) > 2 and count_digits_is_even(N) and count_digits_is_odd(N):\n        answer += 'pon'\n    \n    if count_digits(N) > 2 and not count_digits_is_even(N) and count_digits_is_odd(N):\n        answer += 'bon'\n    \n    if count_digits(N) > 2 and count_digits_is_even(N) and not count_digits_is_odd(N):\n        answer += 'pon'\n    \n    if count_digits(N) > 2 and not count_digits_is_even(N) and not count_digits_is_odd(N):\n        answer += 'bon'\n    \n    if count_digits(N) > 2 and count_digits_is_even(N) and count_digits_is_odd(N):\n        answer += 'pon'\n    \n    return answer\n    \n\ndef"
    },
    {
        "number": 4299,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"pon\"\n\n-----Examples-----\ninput:\n4\n\noutput:\n\"pon\"\n\"\"\"\n\nimport sys\n\nN = int(sys.stdin.readline().strip())\nprint('pon' if N < 999 else 'pon')\n"
    },
    {
        "number": 4299,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    #pass\n    N=int(stdin)\n    \n    def get_count(num):\n        if num<=0:\n            return \"0\"\n        elif num%10==0:\n            return \"10\"\n        else:\n            return get_count(num//10)+get_count(num%10)\n    if N==0:\n        return \"pon\"\n    elif N%10==0:\n        return get_count(N//10)+\"pon\"\n    else:\n        return get_count(N//10)+get_count(N%10)\n\ndef"
    },
    {
        "number": 4299,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n  n = int(stdin.rstrip())\n  a = '\u672c'\n  b = ''\n  \n  #case 1\n  if n % 10 == 0:\n    #if the number of digits is 1, assign it a\n    #else assign it as a to b\n    if n == 1:\n      b = a\n    else:\n      #if the number of digits is 3, assign \"\u672c\" as a\n      if n >= 3:\n        b = a\n      else:\n        #if the number of digits is 4 or 5, assign \"\u672c\" as a\n        if n >= 4 and n <= 5:\n          b = a\n        #if the number of digits is 6 or 7, assign \"\u672c\" as a\n        else:\n          b = a + '\u672c'\n      #print(b)\n  else:\n    #if the number of digits is 2 or 3, assign \"\u672c\" as a\n    if n >= 2 and n <= 3:\n      b = a\n    else:\n      #if the number of digits is 4 or 5, assign \"\u672c\" as a\n      if n >= 4 and n <= 5:\n        b = a\n      else:\n        #if the number of digits is 6 or 7, assign \"\u672c\" as a\n        if n >= 6 and n <= 7:\n          b = a\n        #if the number of digits is 8 or 9, assign \"\u672c\" as a\n        else:\n          b = a + '\u672c'\n  #print(b)\n  return b\n\ndef"
    },
    {
        "number": 4299,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    digit = 0\n    digit_count = 0\n    for i in range(len(stdin)):\n        if stdin[i] == '1':\n            digit_count += 1\n        if digit_count == 2 or digit_count == 3 or digit_count == 5 or digit_count == 7 or digit_count == 9:\n            digit += 1\n            digit_count = 0\n    if digit_count == 0:\n        return \"pon\"\n    return \"bon\"\n"
    },
    {
        "number": 4299,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    print('pon' if n > 9 else 'bon')\n    return 'pon' if n > 9 else 'bon'\n\n-----Tests-----\n>>> solution('16')\n'pon'\n>>> solution('12')\n'bon'\n>>> solution('26')\n'bon'\n"
    },
    {
        "number": 4299,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    print(str(n) + \" \" + str(n % 10))"
    },
    {
        "number": 4299,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"pon\"\n"
    },
    {
        "number": 4299,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(input())\n    if N == 1:\n        print(\"pon\")\n    else:\n        if N == 2:\n            print(\"hon\")\n        else:\n            print(\"bon\")\n        if N == 0:\n            print(\"pon\")\n        else:\n            print(\"hon\")\n    return \"\"\n"
    },
    {
        "number": 4300,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    d_1 = int(stdin[:N])\n    d_2 = int(stdin[N:])\n    d_3 = [d_1*d_2]\n    for _ in range(N-1):\n        d_3.append((d_1+d_2)*d_2)\n        d_3.append((d_1+d_2)*d_3[-1])\n        d_3.append((d_2+d_3[-1])*d_3[-1])\n    sum_of_d_3 = sum(d_3)\n    return str(sum_of_d_3)\n\ndef"
    },
    {
        "number": 4300,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, d_1, d_2 = [int(i) for i in stdin.split()]\n    d_1, d_2, d_3, d_4, d_5 = [int(i) for i in stdin.split()]\n    d_1 -= 1\n    d_2 -= 1\n    d_3 -= 1\n    d_4 -= 1\n    d_5 -= 1\n    def check(num: int) -> int:\n        return -int(str(num)[::-1])\n    def dfs(num: int, idx: int):\n        if idx == N:\n            return num\n        if check(num) >= check(d_1):\n            num += check(d_1)\n            num -= check(d_2)\n            num -= check(d_3)\n            num -= check(d_4)\n            num -= check(d_5)\n            return num\n        else:\n            return dfs(num, idx + 1)\n    return dfs(d_1, 0) + dfs(d_2, 1) + dfs(d_3, 2) + dfs(d_4, 3) + dfs(d_5, 4)\n\ndef"
    },
    {
        "number": 4300,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n  N, *_ = list(map(int, stdin.split()))\n  d = [0] + list(map(int, stdin.split()))\n\n  ret = []\n  for _ in range(N):\n    for d1, d2 in [(d[i] - d[i - 1]) for i in range(1, N)]:\n      ret.append(sum(list(map(lambda x: x * x, d1, d2))))\n\n  return''.join(map(str, ret))"
    },
    {
        "number": 4300,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    d_1, d_2, d_3 = list(map(int, stdin[1:]))\n    return str(sum(((n - d_i) // (d_i - 1) for d_i in range(d_1, d_2, d_3))))\n"
    },
    {
        "number": 4300,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split(' ')[0])\n    d_1 = int(stdin.split(' ')[1])\n    d_2 = int(stdin.split(' ')[2])\n    d_3 = int(stdin.split(' ')[3])\n    print(N)\n    print(d_1, d_2, d_3)\n    print(sum([N - d_1, N - d_2, N - d_3]))\n    return str(sum([N - d_1, N - d_2, N - d_3]))\n"
    },
    {
        "number": 4300,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    d_1, d_2 = map(int, stdin.split())\n    d_1 += d_2\n    d_2 += d_1\n    dp = [0] * (N+1)\n    for i in range(1,N+1):\n        dp[i] = (dp[i-1] + dp[i-2]) % 1000000007\n    ans = 0\n    for i in range(N-1, -1, -1):\n        ans += dp[i] * (d_1-dp[i]) * (d_2-dp[i+1])\n    return str(ans % 1000000007)\n"
    },
    {
        "number": 4300,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x,y,n=map(int,stdin.split())\n    return str(n*(n-1)/2)\n"
    },
    {
        "number": 4300,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    # d1\n    d1 = int(stdin[0])\n    # d2\n    d2 = int(stdin[1])\n    # d3\n    d3 = int(stdin[2])\n    # d4\n    d4 = int(stdin[3])\n    \n    # \uc8fc\uc5b4\uc9c4 \uac12\uc774 0\uc77c \ub54c\n    if d1 == 0 and d2 == 0 and d3 == 0 and d4 == 0:\n        return \"0\"\n    \n    # \uc8fc\uc5b4\uc9c4 \uac12\uc774 1\uc77c \ub54c\n    if d1 == 1 and d2 == 1 and d3 == 1 and d4 == 1:\n        return \"1\"\n    \n    # \uc8fc\uc5b4\uc9c4 \uac12\uc774 2\uc77c \ub54c\n    if d1 == 2 and d2 == 2 and d3 == 2 and d4 == 2:\n        return \"2\"\n    \n    # \uc8fc\uc5b4\uc9c4 \uac12\uc774 3\uc77c \ub54c\n    if d1 == 3 and d2 == 3 and d3 == 3 and d4 == 3:\n        return \"3\"\n    \n    # \uc8fc\uc5b4\uc9c4 \uac12\uc774 4\uc77c \ub54c\n    if d1 == 4 and d2 == 4 and d3 == 4 and d4 == 4:\n        return \"4\"\n    \n    # \uc8fc\uc5b4\uc9c4 \uac12\uc774 5\uc77c \ub54c\n    if d1 == 5 and d2 == 5 and d3 == 5 and d4 == 5:\n        return \"5\"\n    \n    # \uc8fc\uc5b4\uc9c4 \uac12\uc774 6\uc77c \ub54c\n    if d1 == 6 and d2 == 6 and d3 == 6 and d4 == 6:\n        return \"6\"\n    \n    # \uc8fc\uc5b4\uc9c4 \uac12\uc774 7\uc77c \ub54c\n    if d1 == 7 and d2 == 7 and d3 == 7 and d4 == 7:\n        return \"7\"\n    \n    # \uc8fc\uc5b4\uc9c4 \uac12\uc774 8\uc77c \ub54c\n    if d1 == 8 and d2 == 8 and d3 == 8 and d4 == 8:\n        return \"8\"\n    \n    # \uc8fc\uc5b4\uc9c4 \uac12\uc774 9\uc77c \ub54c\n    if d1 == 9 and d2 == 9 and d3 == 9 and d4 == 9:\n        return \"9\"\n    \n    # \uc8fc\uc5b4\uc9c4 \uac12\uc774 10\uc77c \ub54c\n    if d1 == 10 and d2 == 10 and d3 == 10 and d4 == 10:\n        return \"10\"\n    \n    # \uc8fc\uc5b4\uc9c4 \uac12\uc774 11\uc77c \ub54c\n    if d1 == 11 and d2 == 11 and d3 == 11 and d4 == 11:\n        return \"11\"\n    \n    # \uc8fc\uc5b4\uc9c4 \uac12\uc774 12\uc77c \ub54c\n    if d1 == 12 and d2 == 12 and d3 == 12 and d4 == 12:\n        return \"12\"\n    \n    # \uc8fc\uc5b4\uc9c4 \uac12\uc774 13\uc77c \ub54c\n    if d1 == 13 and d2 == 13 and d3 == 13 and d4 == 13:\n        return \"13\"\n    \n    # \uc8fc\uc5b4\uc9c4 \uac12\uc774 14\uc77c \ub54c\n    if d1 == 14 and d2 == 14 and d3 == 14 and d4 == 14:\n        return \"14\"\n    \n    # \uc8fc\uc5b4\uc9c4 \uac12\uc774 15\uc77c \ub54c\n    if d1 == 15 and d2 == 15 and d3 == 15 and d4 == 15:\n        return \"15\"\n    \n    # \uc8fc\uc5b4\uc9c4 \uac12\uc774 16\uc77c \ub54c\n    if d1 == 16 and d2 == 16 and d3 == 16 and d4 == 16:\n        return \"16\"\n    \n    # \uc8fc\uc5b4\uc9c4 \uac12\uc774 17\uc77c \ub54c\n    if d1 == 17 and d2 == 17 and d3 == 17 and d4 == 17:\n        return \"17\"\n    \n    # \uc8fc\uc5b4\uc9c4 \uac12\uc774 18\uc77c \ub54c\n    if d1 == 18 and d2 == 18 and d3 == 18 and d4 == 18:\n        return \"18\"\n    \n    # \uc8fc\uc5b4\uc9c4 \uac12\uc774 19\uc77c \ub54c\n    if d1 == 19 and d2 == 19 and d3 == 19 and d4 == 19:\n        return \"19\"\n    \n    # \uc8fc\uc5b4\uc9c4 \uac12\uc774 20\uc77c \ub54c\n    if d1 == 20 and d2 == 20 and d3 == 20 and d4 == 20:\n        return \"20\"\n    \n    # \uc8fc\uc5b4\uc9c4 \uac12\uc774 21\uc77c \ub54c\n    if d1 == 21 and d2 == 21 and d3 == 21 and d4 == 21:\n        return \"21\"\n    \n    # \uc8fc\uc5b4\uc9c4 \uac12\uc774 22\uc77c \ub54c\n    if d1 == 22 and d2 == 22 and d3 == 22 and d4 == 22:\n        return \"22\"\n    \n    # \uc8fc\uc5b4\uc9c4 \uac12\uc774 23\uc77c \ub54c\n    if d1 == 23 and d2 == 23 and d3 == 23 and d4 == 23:\n        return \"23\"\n    \n    # \uc8fc\uc5b4\uc9c4 \uac12\uc774 24\uc77c \ub54c\n    if d1 == 24 and d2 == 24 and d3 == 24 and d4 == 24:\n        return \"24\"\n    \n    # \uc8fc\uc5b4\uc9c4 \uac12\uc774 25\uc77c \ub54c\n    if d1 == 25 and d2 == 25 and d3 == 25 and d4 == 25:\n        return \"25\"\n    \n    # \uc8fc\uc5b4\uc9c4 \uac12\uc774 26\uc77c \ub54c\n    if d1 == 26 and d2 == 26 and d3 == 26 and d4 == 26:\n        return \"26\"\n    \n    # \uc8fc\uc5b4\uc9c4 \uac12\uc774 27\uc77c \ub54c\n    if d1 == 27 and d2 == 27 and d3 == 27 and d4 == 27:\n        return \"27\"\n    \n    # \uc8fc\uc5b4\uc9c4 \uac12\uc774 28\uc77c \ub54c\n    if d1 == 28 and d2 == 28 and d3 == 28 and d4 == 28:"
    },
    {
        "number": 4300,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    d_i = [int(i) for i in stdin.split()]\n    d_i.sort()\n    d_i = list(map(lambda i: i * (N - 1), d_i))\n    d_i = list(map(lambda i: i / (N - 1), d_i))\n    res = 0\n    for i in range(2):\n        for j in range(1, N - i):\n            res += d_i[i + j * (N - 1)]\n    print(res)\n"
    },
    {
        "number": 4300,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1 = d_2 = 0\n    d_1"
    },
    {
        "number": 4301,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    A = [int(i) for i in stdin.split()]\n    A.sort()\n    max_val = A[-1]\n    for i in range(1, N):\n        if A[i] > max_val:\n            max_val = A[i]\n    return max_val\nprint(solution(input()))\n"
    },
    {
        "number": 4301,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    seq = list(map(int, stdin.split()))\n\n    seq.sort()\n    \n    max_val = 0\n    max_idx = 0\n    \n    for i in range(N):\n        if i!= N - 1:\n            max_val = max(seq[i], max_val)\n            \n        if i!= 0:\n            max_val = max(seq[i], max_val)\n\n    return str(max_val)\n"
    },
    {
        "number": 4301,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n"
    },
    {
        "number": 4301,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    lst = list(map(int, stdin.strip().split()))\n    answer = lst[n-1]\n    for i in range(n-2, -1, -1):\n        if lst[i]!= answer:\n            answer = lst[i]\n    return str(answer)\n\n-----Code-----\nN = int(input())\nA_1, A_2, A_3 = map(int, input().split())\nprint(solution(N, A_1, A_2, A_3))\n"
    },
    {
        "number": 4301,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    A = [int(i) for i in stdin.strip().split()]\n    A = sorted(A)\n    max_value = 0\n    for i in range(n):\n        if i+1 < n:\n            max_value = max(A[i]+max_value, A[i+1]+max_value)\n    return str(max_value)\n"
    },
    {
        "number": 4301,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    A = list(map(int, input().split()))\n    A.sort()\n    # if max(A[1:]) < max(A[:N-1]):\n    #     print(max(A[1:N]))\n    # else:\n    #     print(max(A[:N-1]))\n    \n    if max(A[1:N]) < max(A[:N-1]):\n        print(max(A[1:N]))\n    else:\n        print(max(A[:N-1]))\n    \n    return \"\"\n    \n    \n    \n"
    },
    {
        "number": 4301,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    A = list(map(int, stdin.split()))\n    max_val = 0\n    cur_max_val = 0\n    for i in range(N):\n        cur_max_val = max(cur_max_val, A[i])\n        cur_max_val = max(cur_max_val, A[i+1])\n        max_val = max(max_val, cur_max_val)\n    return str(max_val)\n"
    },
    {
        "number": 4301,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    # N = int(stdin.split()[0])\n    N, A = [int(x) for x in stdin.split()]\n    # N = int(input())\n    # A = [int(x) for x in input().split()]\n    \n    # for i in range(N):\n    #     A[i] = A[i] + 1 if A[i]!= A[i-1] else A[i-1] + 1\n    \n    # for i in range(1, N-1):\n    #     A[i] = A[i] + A[i+1] if A[i]!= A[i+1] else A[i+1]\n    \n    # A[0] = A[N-1]\n    \n    # for i in range(N):\n    #     A[i] = A[i] - A[i-1] if A[i]!= A[i-1] else A[i-1]\n    \n    # for i in range(N-1, 0, -1):\n    #     A[i] = A[i] - A[i-1] if A[i]!= A[i-1] else A[i-1]\n    \n    # for i in range(N):\n    #     A[i] = A[i] + A[i+1] if A[i]!= A[i+1] else A[i+1]\n    \n    max_val = A[0]\n    for i in range(1, N):\n        if A[i] < A[i-1]:\n            max_val = A[i]\n        if A[i] < A[i+1]:\n            max_val = A[i]\n        if A[i] > A[i-1]:\n            max_val = A[i]\n        \n    print(max_val)\n    \n    # print(A)\n    return str(max_val)\n    \n    # print(str(A[0] + A[N-1]))\n    # print(str(max(A[:N-1])))\n    # print(str(max(A[N-1:])))\n    # print(str(max(A[N-1:])))\n    # print(str(max(A[:N-1])))\n    \n    # return str(max(A))\n    # print(A)\n    \n    \n    # for i in range(N):\n    #     A[i] = A[i] + 1 if A[i]!= A[i-1] else A[i-1] + 1\n    \n    # for i in range(N-1, 0, -1):\n    #     A[i] = A[i] + A[i+1] if A[i]!= A[i+1] else A[i+1]\n    \n    # for i in range(N):\n    #     A[i] = A[i] - A[i-1] if A[i]!= A[i-1] else A[i-1]\n    \n    # for i in range(N-1, 0, -1):\n    #     A[i] = A[i] - A[i-1] if A[i]!= A[i-1] else A[i-1]\n    \n    # for i in range(N):\n    #     A[i] = A[i] + A[i+1] if A[i]!= A[i+1] else A[i+1]\n    \n    # for i in range(N-1, 0, -1):\n    #     A[i] = A[i] - A[i-1] if A[i]!= A[i-1] else A[i-1]\n    \n    # for i in range(N):\n    #     A[i] = A[i] + A[i+1] if A[i]!= A[i+1] else A[i+1]\n    \n    # for i in range(N-1, 0, -1):\n    #     A[i] = A[i] - A[i-1] if A[i]!= A[i-1] else A[i-1]\n    \n    # for i in range(N):\n    #     A[i] = A[i] + A[i+1] if A[i]!= A[i+1] else A[i+1]\n    \n    # for i in range(N-1, 0, -1):\n    #     A[i] = A[i] - A[i-1] if A[i]!= A[i-1] else A[i-1]\n    \n    # for i in range(N):\n    #     A[i] = A[i] + A[i+1] if A[i]!= A[i+1] else A[i+1]\n    \n    # for i in range(N-1, 0, -1):\n    #     A[i] = A[i] - A[i-1] if A[i]!= A[i-1] else A[i-1]\n    \n    # for i in range(N):\n    #     A[i] = A[i] + A[i+1] if A[i]!= A[i+1] else A[i+1]\n    \n    # for i in range(N-1, 0, -1):\n    #     A[i] = A[i] - A[i-1] if A[i]!= A[i-1] else A[i-1]\n    \n    # for i in range(N):\n    #     A[i] = A[i] + A[i+1] if A[i]!= A[i+1] else A[i+1]\n    \n    # for i in range(N-1, 0, -1):\n    #     A[i] = A[i] - A[i-1] if A[i]!= A[i-1] else A[i-1]\n    \n    # for i in range(N):\n    #     A[i] = A[i] + A[i+1] if A[i]!= A[i+1] else A[i+1]\n    \n    # for i in range(N-1, 0, -1):\n    #     A[i] = A[i] - A[i-1] if A[i]!= A[i-1] else A[i-1]\n    \n    # for i in range(N):\n    #     A[i] = A[i] + A[i+1] if A[i]!= A[i+1] else A[i+1]\n    \n    # for i in range(N-1, 0, -1):\n    #     A[i] = A[i] - A[i-1] if A[i]!= A[i-1] else A[i-1]\n    \n    # for i in range(N):\n    #     A[i] = A[i] + A[i+1] if A[i]!= A[i+1] else A[i+1]\n    \n    # for i in range(N-1, 0, -1):\n"
    },
    {
        "number": 4301,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    A = [int(el) for el in stdin.split()]\n    result = A[0]\n    j = 1\n    while j < n:\n        result = max(result, A[j])\n        j += 1\n    return str(result)\n"
    },
    {
        "number": 4301,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split('\\n')\n    N = int(input[0])\n    A = [int(x) for x in input[1].split(',')]\n    answer = ''\n    for i in range(1, N):\n        maxA = max(A)\n        A.remove(maxA)\n        answer += str(maxA) + ','\n    return answer[:-1]\n'''"
    },
    {
        "number": 4302,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    a -= 1\n    b -= 1\n    answer = []\n    if a == b:\n        for i in range(a, b+1):\n            answer.append(str(i))\n        return ''.join(answer)\n    else:\n        for i in range(a, b+1):\n            answer.append(str(i))\n            answer.append(str(a + b - i))\n        return ''.join(answer)\n"
    },
    {
        "number": 4302,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    answer = 0\n    A, B = list(map(int, stdin.split()))\n    while A > 0 or B > 0:\n        if A > 0:\n            if A == B:\n                A -= 1\n                answer += 1\n            elif A > B:\n                A -= B\n                answer += 1\n        else:\n            if A == 0:\n                B -= 1\n                answer += 1\n            elif B > 0:\n                B -= 1\n                answer += 1\n    print(answer)\n    return str(answer)\n\n-----Constraints-----\n - A \\leq B \\leq 20\n\n-----Input-----\nInput is given from STDIN.\nA B\n\n-----Output-----\nPrint the maximum number of coins you can get.\n\n-----Sample Input-----\n5 3\n\n-----Sample Output-----\n9\n\n\"\"\""
    },
    {
        "number": 4302,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    n = A + B\n    if n % 2 == 0:\n        n = n // 2\n    else:\n        n = n - 1\n    if n < 0:\n        return '-1'\n    if n == 1:\n        return '1'\n    if n == 2:\n        return '2'\n    if n == 3:\n        return '3'\n    if n == 4:\n        return '4'\n    if n == 5:\n        return '5'\n\n    return str(n // 2 + 1)\n\"\"\"\nclass Solution:\n    def getMoneyAmount(self, n: int) -> str:\n        coins = [2,5,10]\n        i = 1\n        ans = []\n        #print(coins)\n        while n > i:\n            n = n // coins[i-1]\n            #print(n)\n            if n == 0:\n                ans.append('-1')\n                i = len(coins)\n            elif n < 0:\n                ans.append('-1')\n                break\n            else:\n                ans.append(str(n))\n                i += 1\n        if n == 0:\n            ans.append('-1')\n        return ans\n    \n    def solve(self, A, B):\n        A_coins = [A]\n        B_coins = [B]\n        while len(A_coins) < 3:\n            n = random.choice(B_coins)\n            B_coins.remove(n)\n            if n not in A_coins:\n                A_coins.append(n)\n        print(A_coins)\n        print(B_coins)\n        \n        solution = self.getMoneyAmount(A_coins[-1])\n        return solution"
    },
    {
        "number": 4302,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    numbers, size, answer = map(int, stdin.split())\n\n    def number_of_coins(n: int, s: int, n_list: list) -> int:\n        n_list[n] += 1\n        return sum(n_list[:s])\n\n    def add(n: int, s: int, n_list: list) -> int:\n        n_list[s] += 1\n        return n_list[:s]\n\n    def ans(n: int, s: int, n_list: list) -> int:\n        if n_list[s] > n:\n            return n_list[s]\n        else:\n            return n_list[s] * (n + 1)\n\n    for i in range(1, size):\n        n_list = [0] * (n + 1)\n        n_list[i] = 1\n        for j in range(2 * i, n + 1, i):\n            n_list[j] += 1\n            n_list[j - 2 * i] += 1\n        n_list[n] = ans(n, i, n_list)\n        n_list[n] += ans(n - i, i, n_list)\n        n_list[n] += add(n, i, n_list)\n        n_list[n] += add(n - i, i, n_list)\n        answer = max(n_list[:n])\n\n    return answer\n\n--------End of the solution--------\n\nTest Cases:\n\n1:\n3 2\n1 2 2\n1 1 1\n0 0 0\n0 0 0\n0 0 0\n1 1 1\n1 1 1\n0 0 0\n0 0 0\n1 1 1\n1 1 1\n1 1 1\n0 0 0\n0 0 0\n1 1 1\n1 1 1\n1 1 1\n0 0 0\n0 0 0\n1 1 1\n1 1 1\n0 0 0\n0 0 0\n1 1 1\n1 1 1\n1 1 1\n0 0 0\n0 0 0\n1 1 1\n1 1 1\n0 0 0\n0 0 0\n1 1 1\n1 1 1\n0 0 0\n0 0 0\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n0 0 0\n0 0 0\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n0 0 0\n0 0 0\n1 1 1\n1 1 1\n1 1 1\n0 0 0\n0 0 0\n1 1 1\n1 1 1\n0 0 0\n0 0 0\n1 1 1\n1 1 1\n1 1 1\n0 0 0\n0 0 0\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n0 0 0\n0 0 0\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n0 0 0\n0 0 0\n1 1 1\n1 1 1\n1 1 1\n0 0 0\n0 0 0\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n0 0 0\n0 0 0\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n0 0 0\n0 0 0\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n0 0 0\n0 0 0\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n0 0 0\n0 0 0\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n0 0 0\n0 0 0\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1"
    },
    {
        "number": 4302,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    _str = stdin.split()\n    _A = _str[0]\n    _B = _str[1]\n    if not _A.isdigit() or not _B.isdigit():\n        return \"0\"\n    A = int(_A)\n    B = int(_B)\n    if A < B:\n        A, B = B, A\n    if B < A:\n        A, B = B, A\n    if A + B == B:\n        return str(A) + \" \" + str(B)\n    else:\n        return \"0\"\n\nExamples:\n\nInput :\n\n5 2\n\nOutput :\n\n9\n\nExplanation :\n\nWhen you press the button of size 5 twice, you get 5 + 4 = 9 coins.\n\nWhen you press the button of size 2, you get 2 coins.\n\nWhen you press the button of size 1, you get 1 coins.\n\nWhen you press both buttons twice, you get 2 + 1 = 3 coins.\n\nWhen you press the button of size 3, you get 3 coins.\n\nWhen you press the button of size 2, you get 1 coins.\n\nWhen you press both buttons twice, you get 1 + 2 = 3 coins.\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4302,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    ans = 0\n    while A!= 0 and B!= 0:\n        while A >= B:\n            A -= B\n            ans += 1\n        while B >= A:\n            B -= A\n            ans += 1\n        A, B = A // B, A % B\n    return str(ans)\n\nprint(solution(\"5 3\")) # 5\nprint(solution(\"5 4\")) # 0\nprint(solution(\"3 2 1\")) # 0\nprint(solution(\"1 1 1\")) # 1\nprint(solution(\"2 2 1\")) # 2\nprint(solution(\"3 3 1\")) # 3\nprint(solution(\"1 1 1\")) # 1\nprint(solution(\"1 2 1\")) # 2\nprint(solution(\"1 3 1\")) # 3\nprint(solution(\"2 2 1\")) # 3\nprint(solution(\"1 2 1\")) # 1\nprint(solution(\"1 3 1\")) # 2\nprint(solution(\"1 1 1\")) # 1\nprint(solution(\"1 1 1\")) # 1\nprint(solution(\"1 3 1\")) # 3\n"
    },
    {
        "number": 4302,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n  A, B = map(int, stdin.split())\n  if A > B:\n    A, B = B, A\n  # print(A, B)\n  # if A <= B:\n  #   return str(A)\n  # if B < A:\n  #   return str(B)\n  # if B > A:\n  #   return str(B)\n  # return str(B)\n  return str(B)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4302,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    A, B = map(int, stdin.split())\n    \n    for _ in range(K):\n        if N % A!= 0:\n            N //= A\n        else:\n            A, N //= A, N\n        if B % B!= 0:\n            B //= B\n        else:\n            B //= B\n    if N % A!= 0:\n        N //= A\n    else:\n        A //= A\n    return str(N * B)\n\n'''\nimport math\nclass Solution:\n    def get_coins(self, n, m):\n        return math.ceil(math.log(n, m))\n    def coinChange(self, coins: List[int], amount: int) -> int:\n        dp = [0] * (amount + 1)\n        dp[0] = 0\n        for coin in coins:\n            for i in range(coin, amount + 1):\n                dp[i] = dp[i - coin] + 1\n        return dp[amount]\n'''\n\nsolution = Solution()\nprint(solution.coinChange(coins = [3, 5], amount = 7))"
    },
    {
        "number": 4302,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    import sys\n    r, c = map(int, stdin.split())\n    coins = []\n    for i in range(1, r + 1):\n        for j in range(1, c + 1):\n            coins.append(i * j)\n    print(sorted(coins)[-1])"
    },
    {
        "number": 4302,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    coins = []\n    for _ in range(2):\n        coins.append(int(stdin.strip().split()[0]))\n    for i in range(2, len(coins) + 1):\n        for j in range(len(coins)):\n            if coins[j] < coins[i - 1]:\n                coins[i - 1] -= coins[j]\n            else:\n                break\n    print(sum(coins))\nsolution(\"5 5\")\n\n---\n\n---Solution---\ndef"
    },
    {
        "number": 4303,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    x = list(map(int, stdin.split()))\n    x.sort()\n    start_x = 0\n    max_k = max(K, len(x))\n    curr_x = start_x\n    while True:\n        if curr_x == x[-1]:\n            break\n        if curr_x <= max_k:\n            if curr_x < len(x):\n                curr_x += 1\n            else:\n                curr_x = 0\n                start_x = 0\n        else:\n            curr_x = 0\n            start_x = 0\n    return str(min(K - max_k, abs(start_x)))\n'''\ndef"
    },
    {
        "number": 4303,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    x_list = list(map(int, stdin.split()))\n\n    x_list.sort()\n\n    for _ in range(n):\n        x_list[-1] -= 1\n\n    time = abs(x_list[0] - x_list[-1])\n    for i in range(1, len(x_list)):\n        time = min(time, abs(x_list[i] - x_list[i-1]))\n\n    return str(time)\n"
    },
    {
        "number": 4303,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return solution2(stdin)\n\ndef"
    },
    {
        "number": 4303,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    x_list = list(map(int, stdin.split()))\n\n    left_start = 0\n    left_end = 0\n    right_start = 0\n    right_end = 0\n    for i in range(N):\n        x = x_list[i]\n        if x <= left_start:\n            left_start = x\n        if x >= left_end:\n            left_end = x\n        if x <= right_start:\n            right_start = x\n        if x >= right_end:\n            right_end = x\n\n    left_start = left_start - left_end\n    right_start = right_start - right_end\n\n    result = 0\n    for i in range(K):\n        for j in range(left_start, right_start + 1):\n            result += 1\n        for j in range(left_start, right_end):\n            result += 1\n        for j in range(right_start, left_end):\n            result += 1\n    return str(result)\n"
    },
    {
        "number": 4303,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    x = [0 for _ in range(N + 2)]\n    x[1] = -10\n    x[2] = 10\n    x[3] = -20\n    x[4] = 20\n    for i in range(5, N + 1):\n        x[i] = int(stdin[i - 5])\n    print(min(x))\n    return '0'\n\"\"\"\n\nclass Solution:\n    def minTime(self, x, k):\n        if x==k:\n            return 0\n        if k<x:\n            return 0\n        if k==x:\n            return 0\n        else:\n            return min(self.minTime(x, k - x) + 1, self.minTime(x - 1, k) + 1)"
    },
    {
        "number": 4303,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    arr = [int(i) for i in stdin.split()]\n    x_i = 0\n    end_i = arr.pop(0)\n    start_i = end_i\n    start_x = -1\n    i = 0\n    while x_i < len(arr):\n        if arr[x_i] == start_i:\n            start_x += 1\n            i = 0\n        if arr[x_i] == end_i:\n            end_i = arr[start_x]\n            if start_x == 0:\n                start_x = end_i - 1\n            elif start_x == len(arr) - 1:\n                start_x = 0\n            else:\n                start_x -= 1\n        x_i += 1\n    print(end_i - start_i)\n\nExplanation\n\nTest Data:\n5 3\n-30 -10 10 20 50\nOutput:\n40\nExplanation:\n- Move from coordinate 0 to -10.\n- Light the second candle from the left.\n- Move from coordinate 10 to 20.\n- Light the third candle from the left.\n- Move from coordinate 20 to 50.\n- Light the fourth candle from the left.\nTest Example:\ninput:\n5 3\n-30 -10 10 20 50\noutput:\n40\nExplanation:\n- Move from coordinate 0 to -10.\n- Light the second candle from the left.\n- Move from coordinate 10 to 20.\n- Light the third candle from the left.\n- Move from coordinate 20 to 50.\n- Light the fourth candle from the left.\n\ninput:\n5 3\n-30 -10 10 20 50\n-30 -10 10 20 50\noutput:\n40\nExplanation:\n- Move from coordinate 0 to -10.\n- Light the second candle from the left.\n- Light the second candle from the left.\n- Move from coordinate 10 to 20.\n- Light the third candle from the left.\n- Light the third candle from the left.\n- Move from coordinate 20 to 50.\n- Light the fourth candle from the left.\n- Move from coordinate 50 to 100.\n- Light the fourth candle from the left.\n- Move from coordinate 100 to 150.\n- Light the fourth candle from the left.\n\ninput:\n5 3\n-30 -10 10 20 50\n-30 -10 10 20 50\n-30 -10 10 20 50\noutput:\n40\nExplanation:\n- Move from coordinate 0 to -10.\n- Light the second candle from the left.\n- Move from coordinate 10 to 20.\n- Light the third candle from the left.\n- Move from coordinate 20 to 50.\n- Light the fourth candle from the left.\n- Move from coordinate 50 to 100.\n- Light the fourth candle from the left.\n- Move from coordinate 100 to 150.\n- Light the fourth candle from the left.\n- Move from coordinate 150 to 200.\n- Light the fourth candle from the left.\n- Move from coordinate 200 to 250.\n- Light the fourth candle from the left.\n- Move from coordinate 250 to 300.\n- Light the fourth candle from the left.\n- Move from coordinate 300 to 350.\n- Light the fourth candle from the left.\n- Move from coordinate 350 to 400.\n- Light the fourth candle from the left.\n- Move from coordinate 400 to 500.\n- Light the fourth candle from the left.\n- Move from coordinate 500 to 600.\n- Light the fourth candle from the left.\n- Move from coordinate 600 to 700.\n- Light the fourth candle from the left.\n- Move from coordinate 700 to 750.\n- Light the fourth candle from the left.\n- Move from coordinate 750 to 800.\n- Light the fourth candle from the left.\n- Move from coordinate 800 to 900.\n- Light the fourth candle from the left.\n- Move from coordinate 900 to 1000.\n- Light the fourth candle from the left.\n- Move from coordinate 1000 to 1100.\n- Light the fourth candle from the left.\n- Move from coordinate 1100 to 1200.\n- Light the fourth candle from the left.\n- Move from coordinate 1200 to 1300.\n- Light the fourth candle from the left.\n- Move from coordinate 1300 to 1400.\n- Light the fourth candle from the left.\n- Move from coordinate 1400 to 1500.\n- Light the fourth candle from the left.\n- Move from coordinate 1500 to 1600.\n- Light the fourth candle from the left.\n- Move from coordinate 1600 to 1750.\n- Light the fourth candle from the left.\n- Move from coordinate 1750 to 1900.\n- Light the fourth candle from the left.\n- Move from coordinate 1900 to 2100.\n- Light the fourth candle from the left.\n- Move from coordinate 2100 to 2200.\n- Light the fourth candle from the left.\n- Move from coordinate 2200 to 2400.\n- Light the fourth candle from the left.\n- Move from coordinate 2400 to 2500.\n- Light the fourth candle from the left.\n- Move from coordinate 2500 to 2700.\n- Light the fourth candle from the left.\n- Move from coordinate 2700 to 2800.\n- Light the fourth candle from the left.\n- Move from coordinate 2800 to 2900.\n- Light the fourth candle from the left.\n- Move from coordinate 2900 to 3100.\n- Light the fourth candle from the left.\n- Move from coordinate 3100 to 3200.\n- Light the fourth candle from the left.\n- Move from coordinate 3200 to 3300.\n- Light the fourth candle from the left.\n- Move from coordinate 3300 to 3500.\n- Light the fourth candle from the left.\n- Move from coordinate 3500 to 3800.\n- Light the fourth candle from the left.\n- Move from coordinate 3800 to 3900.\n- Light the fourth candle from the left.\n- Move from coordinate 3900 to 4000.\n- Light the fourth candle from the left.\n- Move from coordinate 4000 to 4200.\n- Light the fourth candle from the left.\n- Move from coordinate 4200 to 4300.\n- Light the fourth candle from the left.\n- Move from coordinate 4300 to 4500.\n- Light the fourth candle from the left.\n- Move from coordinate 4500 to 4700.\n- Light the fourth candle from the left.\n- Move from coordinate 4700 to 4800.\n- Light the fourth candle from the left.\n- Move from coordinate 4800 to 4300.\n- Light the fourth candle from the left.\n- Move from coordinate 4300 to 4500.\n- Light the fourth candle from the left.\n- Move from coordinate 4500 to 4200.\n- Light the fourth candle from the left.\n- Move from coordinate 4200 to 3300.\n- Light the fourth candle from the left.\n- Move from coordinate 3300 to 3400.\n- Light the fourth candle from the left.\n- Move from coordinate 3400 to 3500.\n- Light the fourth candle from the left.\n- Move from coordinate 3500 to 3600.\n- Light the fourth candle from the left.\n- Move from coordinate 3600 to 3700.\n- Light the fourth candle from the left.\n- Move from coordinate 3700 to 3800.\n- Light the fourth candle from the left.\n- Move from coordinate 3800 to 3900.\n- Light the fourth candle from the left.\n- Move from coordinate 3900 to 4500.\n- Light the fourth candle from the left.\n- Move from coordinate 4500 to 4600.\n- Light the fourth candle from the left.\n- Move from coordinate 4600 to 4800."
    },
    {
        "number": 4303,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    x_l, x_r, y_l, y_r = map(int, stdin.split())\n    grid = [list(map(int, input().split())) for _ in range(n)]\n    queue = [(x_l, y_l)]\n    distance = [float('inf')] * n\n    distance[x_l] = 0\n    while queue:\n        x, y = queue.pop(0)\n        for dx, dy in ((1, 0), (-1, 0), (0, 1), (0, -1)):\n            next_x, next_y = x + dx, y + dy\n            if 0 <= next_x < n and 0 <= next_y < n and grid[next_x][next_y]!= -1:\n                if grid[next_x][next_y] < distance[next_x]:\n                    distance[next_x] = grid[next_x][next_y]\n                    queue.append((next_x, next_y))\n    return str(sum(distance) // (k ** 2))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4303,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    x_1, x_2, x_3 = map(int, stdin.split())\n    x_1 = abs(x_1)\n    x_2 = abs(x_2)\n    x_3 = abs(x_3)\n    min_time = 10 ** 9\n    for i in range(N):\n        x_i = abs(x_i)\n        if x_i < min_time:\n            min_time = x_i\n    if K >= min_time:\n        K -= min_time\n        print(min_time)\n        print(x_i)\n        print(x_3)\n        print(x_1)\n        print(x_2)\n        print(x_2)\n        print(x_3)\n        print(K)\n    else:\n        print(0)\n    return str(min_time)\n\ndef"
    },
    {
        "number": 4303,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    N = int(lines[0])\n    K = int(lines[1])\n    x_lines = list(map(int, lines[2:]))\n    X = list(range(0, N))\n    stack = [0] * (N)\n    answer = -1\n\n    def move_left_and_right():\n        while stack:\n            if stack[-1] == x_lines[0]:\n                stack.pop()\n                x_lines.pop(0)\n            else:\n                break\n        while stack:\n            if stack[-1] == x_lines[-1]:\n                stack.pop()\n                x_lines.pop()\n            else:\n                break\n        return stack, x_lines\n    def can_light():\n        x_lines_copy = list(x_lines)\n        for i in range(N):\n            x_lines[i] -= 1\n            if x_lines[i] < 0:\n                x_lines[i] = N\n                stack.append(x_lines[i])\n                x_lines_copy[i] = x_lines[i]\n                x_lines[i] = 0\n        for i in range(N):\n            if stack[i] == x_lines[i]:\n                stack.pop()\n                x_lines_copy.pop(i)\n                x_lines[i] = 0\n        if stack:\n            print('NO')\n            return 'NO'\n        print('YES')\n        return 'YES'\n    \n    for i in range(N):\n        while stack:\n            if stack[-1] == x_lines[i]:\n                stack.pop()\n                x_lines.pop(i)\n            else:\n                break\n        while stack:\n            if stack[-1] == x_lines[N - i - 1]:\n                stack.pop()\n                x_lines[N - i - 1] = -1\n            else:\n                break\n        print('YES')\n        if can_light():\n            answer = min(answer, i + 1)\n    print(answer)\n    return str(answer)\n\ndef"
    },
    {
        "number": 4303,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    x = list(map(int, stdin.split()))\n    x.sort()\n\n    count = 0\n    for i in x:\n        if i == 0:\n            count += 1\n        else:\n            break\n    if count == K:\n        return '%d' % count\n    elif count > K:\n        return '%d' % count\n    else:\n        for i in x:\n            if i == K:\n                count += 1\n                break\n        return '%d' % count\n\n\n------------------\n\ndef"
    },
    {
        "number": 4304,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    a = int(a)\n    b = int(b)\n    \n    if b < a:\n        a, b = b, a\n    \n    # a, b = map(int, input().split())\n    \n    if b - a > 10:\n        print(a + b - 10)\n        return\n    \n    for a_part in range(10, a+1, 10):\n        part_length = b - a_part\n        \n        for b_part in range(10, part_length, 10):\n            if b - a_part > part_length - b_part:\n                break\n            \n            # print(a_part, b_part)\n            if b - a_part > b_part:\n                return a_part + b_part\n    \n    return a_part + b_part"
    },
    {
        "number": 4304,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a >= b:\n        return str(a - b)\n    else:\n        return str(b - a)\n\ndef"
    },
    {
        "number": 4304,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    a = int(a)\n    b = int(b)\n    if a + b < b + b:\n        return 'NOT'\n    if a + b == b + b:\n        return 'NOT'\n    if a + b > b + b:\n        return 'NOT'\n    if b < a:\n        return 'NOT'\n    if b < a:\n        return 'NOT'\n    if a < b:\n        return 'NOT'\n    return 'NOT'\n\n    # return str(min(a,b))"
    },
    {
        "number": 4304,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    m, n, a, b = map(int, stdin.split())\n\n    def dfs(depth, base):\n        if depth < base:\n            return 0\n\n        return depth * base\n\n    if a == b:\n        return (n - 1) - dfs(n - 1, m)\n\n    return max(dfs(depth + m // 2, n - a) + dfs(depth + m // 2 - 1, n - b),\n               dfs(depth + b // 2, n - a) + dfs(depth + b // 2 - 1, n - b))\n\n--------Searching for Curd City--------\nAssuming that the depth of the snow cover is at least 1 meter, find the length of the shortest path from the starting point to the Curd City.\nInput will be given from the following format:\na b c\n\nOutput will be a single integer denoting the length of the shortest path from the starting point to the Curd City.\n\nInput will be given from the following format:\na b c\n\nOutput will be a single integer denoting the length of the shortest path from the starting point to the Curd City.\n\nThe starting point is always the Curd City.\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4304,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    x = (a+b)//2\n    print(x)\n    if a<b:\n        return \"2\"\n    else:\n        return str(2*(a-x))"
    },
    {
        "number": 4304,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a > b:\n        print(a-b)\n    else:\n        print(b-a)\n    \n\nTest cases\nExpected Output:\n3\n5\n4\nExplanation:\nThe depths of the two towers are 10 meters, 15 meters, and 4 meters, respectively.\nPrint 4 as an integer.\n\nExplanation:\nSince the depth of the snow cover is 4 meters, we can see that the depth of the snow cover is 2 meters.\nPrint 2 as an integer.\n\nExplanation:\nThe heights of the two towers are 10 meters, 15 meters, and 4 meters, respectively.\nPrint 4 as an integer.\nThe depths of the two towers are 10 meters, 15 meters, and 4 meters, respectively.\nPrint 2 as an integer.\nThe heights of the two towers are 10 meters, 15 meters, and 4 meters, respectively.\nPrint 2 as an integer.\nExplanation:\nSo we can see that the depth of the snow cover is 2 meters, so the depth of the snow cover is 2 meters.\nSince the depth of the snow cover is 2 meters, we can see that the depth of the snow cover is 2 meters.\nPrint 2 as an integer.\nSo we can see that the depth of the snow cover is 2 meters, so the depth of the snow cover is 2 meters.\nPrint 2 as an integer.\nThe heights of the two towers are 10 meters, 15 meters, and 4 meters, respectively.\nPrint 4 as an integer.\nThe depths of the two towers are 10 meters, 15 meters, and 4 meters, respectively.\nPrint 2 as an integer.\nThe heights of the two towers are 10 meters, 15 meters, and 4 meters, respectively.\nPrint 4 as an integer.\nThe heights of the two towers are 10 meters, 15 meters, and 4 meters, respectively.\nPrint 4 as an integer.\nThe depths of the two towers are 10 meters, 15 meters, and 4 meters, respectively.\nPrint 2 as an integer.\nThe heights of the two towers are 10 meters, 15 meters, and 4 meters, respectively.\nPrint 4 as an integer.\nThe depths of the two towers are 10 meters, 15 meters, and 4 meters, respectively.\nPrint 2 as an integer.\nThe heights of the two towers are 10 meters, 15 meters, and 4 meters, respectively.\nPrint 4 as an integer.\nThe depths of the two towers are 10 meters, 15 meters, and 4 meters, respectively.\nPrint 2 as an integer.\nExpected Output:\n5\nExplanation:\nThe depths of the two towers are 10 meters, 15 meters, and 4 meters, respectively.\nPrint 4 as an integer.\nThe heights of the two towers are 10 meters, 15 meters, and 4 meters, respectively.\nPrint 2 as an integer.\nThe depths of the two towers are 10 meters, 15 meters, and 4 meters, respectively.\nPrint 4 as an integer.\nThe heights of the two towers are 10 meters, 15 meters, and 4 meters, respectively.\nPrint 2 as an integer.\nThe depths of the two towers are 10 meters, 15 meters, and 4 meters, respectively.\nPrint 4 as an integer.\nThe heights of the two towers are 10 meters, 15 meters, and 4 meters, respectively.\nPrint 2 as an integer.\nThe depths of the two towers are 10 meters, 15 meters, and 4 meters, respectively.\nPrint 4 as an integer.\nExpected Output:\nExplanation:\nSince the depth of the snow cover is 4 meters, we can see that the depth of the snow cover is 2 meters.\nPrint 2 as an integer.\nThe heights of the two towers are 10 meters, 15 meters, and 4 meters, respectively.\nPrint 4 as an integer.\nThe depths of the two towers are 10 meters, 15 meters, and 4 meters, respectively.\nPrint 2 as an integer.\nThe heights of the two towers are 10 meters, 15 meters, and 4 meters, respectively.\nPrint 4 as an integer.\nThe depths of the two towers are 10 meters, 15 meters, and 4 meters, respectively.\nPrint 2 as an integer.\nThe heights of the two towers are 10 meters, 15 meters, and 4 meters, respectively.\nPrint 4 as an integer.\nThe depths of the two towers are 10 meters, 15 meters, and 4 meters, respectively.\nPrint 2 as an integer.\nThe heights of the two towers are 10 meters, 15 meters, and 4 meters, respectively.\nPrint 4 as an integer.\nThe depths of the two towers are 10 meters, 15 meters, and 4 meters, respectively.\nPrint 2 as an integer.\nThe heights of the two towers are 10 meters, 15 meters, and 4 meters, respectively.\nPrint 4 as an integer.\nExplanation:\nSo we can see that the depth of the snow cover is 2 meters, so the depth of the snow cover is 2 meters.\nPrint 2 as an integer.\nThe heights of the two towers are 10 meters, 15 meters, and 4 meters, respectively.\nPrint 4 as an integer.\nThe depths of the two towers are 10 meters, 15 meters, and 4 meters, respectively.\nPrint 2 as an integer.\nThe heights of the two towers are 10 meters, 15 meters, and 4 meters, respectively.\nPrint 4 as an integer.\nThe depths of the two towers are 10 meters, 15 meters, and 4 meters, respectively.\nPrint 2 as an integer.\nThe heights of the two towers are 10 meters, 15 meters, and 4 meters, respectively.\nPrint 4 as an integer.\nThe depths of the two towers are 10 meters, 15 meters, and 4 meters, respectively.\nPrint 2 as an integer.\nThe heights of the two towers are 10 meters, 15 meters, and 4 meters, respectively.\nPrint 4 as an integer.\nThe depths of the two towers are 10 meters, 15 meters, and 4 meters, respectively.\nPrint 2 as an integer.\nThe heights of the two towers are 10 meters, 15 meters, and 4 meters, respectively.\nPrint 4 as an integer.\nThe depths of the two towers are 10 meters, 15 meters, and 4 meters, respectively.\nPrint 2 as an integer.\nThe heights of the two towers are 10 meters, 15 meters, and 4 meters, respectively.\nPrint 4 as an integer.\nExplanation:\nSince the depth of the snow cover is 4 meters, we can see that the depth of the snow cover is 2 meters.\nPrint 2 as an integer.\nThe heights of the two towers are 10 meters, 15 meters, and 4 meters, respectively.\nPrint 4 as an integer.\nThe depths of the two towers are 10 meters, 15 meters, and 4 meters, respectively.\nPrint 2 as an integer.\nThe heights of the two towers are 10 meters, 15 meters, and 4 meters, respectively.\nPrint 4 as an integer.\nThe depths of the two towers are 10 meters, 15 meters, and 4 meters, respectively.\nPrint 2 as an integer.\nThe heights of the two towers are 10 meters, 15 meters, and 4 meters, respectively.\nPrint 4 as an integer.\nThe depths of the two towers are 10 meters, 15 meters, and 4 meters, respectively.\nPrint 2 as an integer.\nThe heights of the two towers are 10 meters, 15 meters, and 4 meters, respectively.\nPrint 4 as an integer.\nThe depths of the two towers are 10 meters, 15 meters, and 4 meters, respectively.\nPrint 2 as an integer.\nThe heights of the two towers are 10 meters, 15 meters, and 4 meters, respectively.\nPrint 4 as an integer.\nThe depths of the two towers are 10 meters, 15 meters, and 4 meters, respectively.\nPrint 2 as an integer.\nThe heights of the two towers are 10 meters, 15 meters, and 4 meters, respectively.\nPrint 4 as an integer.\nThe depths of the two towers are 10 meters, 15 meters, and 4 meters, respectively"
    },
    {
        "number": 4304,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a <= b:\n        print(0)\n        return\n    snow = a - b\n    t = 0\n    while True:\n        snow += 1\n        if snow == b:\n            t += 1\n            break\n        if snow > b:\n            t += 1\n            break\n    print(t)\n    return\n\nprint(solution(inp))\n"
    },
    {
        "number": 4304,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a,b = [int(i) for i in stdin.split(' ')]\n    if a + b < 500:\n        return str(a+b)\n    else:\n        return ''\n\nprint(solution(\"8 13\"))\n\ndef"
    },
    {
        "number": 4304,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n  a,b=map(int,stdin.split())\n  print(abs(a-b)//2)\n  return str(abs(a-b)//2)\n"
    },
    {
        "number": 4304,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n  height, length = [int(x) for x in stdin.split()]\n  if height >= length:\n    return str(2*height - length)\n  else:\n    return str(2*length - height)\n"
    },
    {
        "number": 4305,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n,a = map(int,stdin.split())\n    if n==0:\n        print(0)\n    else:\n        print(a*(n-1)//2)\n    return 'Success'\n\ndef"
    },
    {
        "number": 4305,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    H, A = map(int, stdin.split())\n    h = 0\n    while H > 0:\n        if A > 0:\n            A -= 1\n            if h < A:\n                h = A\n            else:\n                h -= A\n        else:\n            A -= 1\n            if h < A:\n                h = A\n            else:\n                h -= A\n    print(h)\n\n-----Constraints-----\n - 1 \\leq H \\leq 10^4\n - 1 \\leq A \\leq 10^4\n - 1 \\leq H \\leq 10^4\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nH A\n\n-----Output-----\nPrint the number of attacks Serval needs to make before winning.\n\n-----Sample Input-----\n10 4\n\n-----Sample Output-----\n3\n\n - After one attack, the monster's health will be 6.\n - After two attacks, the monster's health will be 2.\n - After three attacks, the monster's health will be -2.\nThus, Serval needs to make three attacks to win.\ndef"
    },
    {
        "number": 4305,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    H, A = map(int, stdin.split())\n    result = []\n    for _ in range(A):\n        result.append(H - max(H, A))\n        H += 1\n    return str(len(set(result)))\n"
    },
    {
        "number": 4305,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    H = int(stdin.strip())\n    A = int(stdin.strip().split()[0])\n    res = 0\n    for i in range(H):\n        res += A if i % 2 == 0 else -A\n    return str(res)\n\n###### Test Code ################\nprint(solution(\"10 4\")) # returns '3'\nprint(solution(\"1 0 0 0 0 0 1 0 1 0 0 0 0 0 0 1\")) # returns '2'\nprint(solution(\"10 2\")) # returns '3'\nprint(solution(\"1 0 0 0 0 0 1 0 1 0 0 0 0 0 0 1\")) # returns '2'\nprint(solution(\"2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\")) # returns '2'\nprint(solution
    },
    {
        "number": 4305,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n  a, b = map(int, stdin.split())\n  x = a if a < b else b\n  if a < b:\n    x = x + (b - a)\n  print(x)\n  return x\n'''\n\nimport math\nimport sys\n\ndef"
    },
    {
        "number": 4305,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, A = map(int, stdin.split())\n    A = A / 100\n    H = int(N * A)\n    \n    if H <= 0 or H >= 10**4:\n        return str(0)\n    if H <= H / 10:\n        return str(1)\n    if H > H / 10 * 10:\n        return str(2)\n    \n    return str(3)\n\n'''\n\n\ndef"
    },
    {
        "number": 4305,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, A = map(int, stdin.split())\n    X = 0\n    D = {}\n    for i in range(N):\n        A_, H_, X_ = map(int, stdin.split())\n        D[i] = (A_, H_, X_)\n    count = 0\n    while X <= 0:\n        X = max(A, X)\n        count += 1\n    for i in range(count):\n        if X >= D[i][0]:\n            X -= D[i][0]\n            count -= 1\n        else:\n            break\n    print(count)\nsolution(stdin)\n=======\ndef"
    },
    {
        "number": 4305,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    H, A = map(int, stdin.split())\n    if H <= 0 or A <= 0:\n        return \"0\"\n    else:\n        return str(H-A)\n\n\ndef"
    },
    {
        "number": 4305,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    if n == 1:\n        if b <= a:\n            print(0)\n        else:\n            print(a-b)\n    else:\n        print(a-b)\n    return ''\n\n-----Sample Output-----\n3\n2\n-2\n5\nInput is from Standard Input in the following format:\nH A\n\n-----Output-----\nPrint the number of attacks Serval needs to make before winning.\n\n-----Sample Input-----\n10 4\n\n-----Sample Output-----\n3\n\n - After one attack, the monster's health will be 6.\n - After two attacks, the monster's health will be 2.\n - After three attacks, the monster's health will be -2.\nThus, Serval needs to make three attacks to win.\n"
    },
    {
        "number": 4305,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n,a,h = map(int,stdin.split())\n    num_attacks=0\n    while h>=a:\n        h-=a\n        num_attacks+=1\n    return str(num_attacks)"
    },
    {
        "number": 4306,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin.split()[1])\n    y = int(stdin.split()[2])\n    sec = 0\n    for i in range(x, y+1):\n        sec += i\n    return str(sec)"
    },
    {
        "number": 4306,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(line):\n        return line.replace('A', 'a').replace('B', 'b').replace('C', 'c').replace('D', 'd')\n\n    def build_time(line):\n        line = line.split()\n        return (int(line[0]), int(line[1]), int(line[2]))\n\n    def is_valid_for_line(line):\n        return line.replace('a', 'a').replace('b', 'b').replace('c', 'c').replace('d', 'd') in is_valid(line)\n\n    for i in stdin:\n        line = i.split()\n        if is_valid_for_line(line):\n            time, *rest = build_time(line)\n            print(time)\n            print(*rest)\n\nsolution(\"0 75 25 100\")\n"
    },
    {
        "number": 4306,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def ai_and_bob(n):\n        if n == 0:\n            return '0'\n        if n == 1:\n            return '1'\n        if n == 2:\n            return '2'\n        if n == 3:\n            return '3'\n        if n == 4:\n            return '4'\n        if n == 5:\n            return '5'\n        if n == 6:\n            return '6'\n        if n == 7:\n            return '7'\n        if n == 8:\n            return '8'\n        if n == 9:\n            return '9'\n        if n == 10:\n            return 'A'\n        if n == 11:\n            return 'B'\n        if n == 12:\n            return 'C'\n        if n == 13:\n            return 'D'\n        if n == 14:\n            return 'E'\n        if n == 15:\n            return 'F'\n        if n == 16:\n            return 'G'\n        if n == 17:\n            return 'H'\n        if n == 18:\n            return 'I'\n        if n == 19:\n            return 'J'\n        if n == 20:\n            return 'K'\n        if n == 21:\n            return 'L'\n        if n == 22:\n            return 'M'\n        if n == 23:\n            return 'N'\n        if n == 24:\n            return 'O'\n        if n == 25:\n            return 'P'\n        if n == 26:\n            return 'Q'\n        if n == 27:\n            return 'R'\n        if n == 28:\n            return 'S'\n        if n == 29:\n            return 'T'\n        if n == 30:\n            return 'U'\n        if n == 31:\n            return 'V'\n        if n == 32:\n            return 'W'\n        if n == 33:\n            return 'X'\n        if n == 34:\n            return 'Y'\n        if n == 35:\n            return 'Z'\n        if n == 36:\n            return 'A'\n        if n == 37:\n            return 'B'\n        if n == 38:\n            return 'C'\n        if n == 39:\n            return 'D'\n        if n == 40:\n            return 'E'\n        if n == 41:\n            return 'F'\n        if n == 42:\n            return 'G'\n        if n == 43:\n            return 'H'\n        if n == 44:\n            return 'I'\n        if n == 45:\n            return 'J'\n        if n == 46:\n            return 'K'\n        if n == 47:\n            return 'L'\n        if n == 48:\n            return 'M'\n        if n == 49:\n            return 'N'\n        if n == 50:\n            return 'O'\n        if n == 51:\n            return 'P'\n        if n == 52:\n            return 'Q'\n        if n == 53:\n            return 'R'\n        if n == 54:\n            return 'S'\n        if n == 55:\n            return 'T'\n        if n == 56:\n            return 'U'\n        if n == 57:\n            return 'V'\n        if n == 58:\n            return 'W'\n        if n == 59:\n            return 'X'\n        if n == 60:\n            return 'Y'\n        if n == 61:\n            return 'Z'\n    def sum_numbers(n):\n        for i in range(1, n+1):\n            n = n+i\n            print(n)\n    def create_button_sequence(length):\n        button_sequence = []\n        for i in range(length):\n            button_sequence.append(i)\n        return button_sequence\n    def run_sequence(button_sequence):\n        for i in button_sequence:\n            print(i)\n            if i == 0:\n                time = '0'\n                print(time)\n            elif i == 1:\n                time = '1'\n                print(time)\n            elif i == 2:\n                time = '2'\n                print(time)\n            elif i == 3:\n                time = '3'\n                print(time)\n            elif i == 4:\n                time = '4'\n                print(time)\n            elif i == 5:\n                time = '5'\n                print(time)\n            elif i == 6:\n                time = '6'\n                print(time)\n            elif i == 7:\n                time = '7'\n                print(time)\n            elif i == 8:\n                time = '8'\n                print(time)\n            elif i == 9:\n                time = '9'\n                print(time)\n            elif i == 10:\n                time = 'A'\n                print(time)\n            elif i == 11:\n                time = 'B'\n                print(time)\n            elif i == 12:\n                time = 'C'\n                print(time)\n            elif i == 13:\n                time = 'D'\n                print(time)\n            elif i == 14:\n                time = 'E'\n                print(time)\n            elif i == 15:\n                time = 'F'\n                print(time)\n            elif i == 16:\n                time = 'G'\n                print(time)\n            elif i == 17:\n                time = 'H'\n                print(time)\n            elif i == 18:\n                time = 'I'\n                print(time)\n            elif i == 19:\n                time = 'J'\n                print(time)\n            elif i == 20:\n                time = 'K'\n                print(time)\n            elif i == 21:\n                time = 'L'\n                print(time)\n            elif i == 22:\n                time = 'M'\n                print(time)\n            elif i == 23:\n                time = 'N'\n                print(time)\n            elif i == 24:\n                time = 'O'\n                print(time)\n            elif i == 25:\n                time = 'P'\n                print(time)\n            elif i == 26:\n                time = 'Q'\n                print(time)\n            elif i == 27:\n                time = 'R'\n                print(time)\n            elif i == 28:\n                time = 'S'\n                print(time)\n            elif i == 29:\n                time = 'T'\n                print(time)\n            elif i == 30:\n                time = 'U'\n                print(time)\n            elif i == 31:\n                time = 'V'\n                print(time)\n            elif i == 32:\n                time = 'W'\n                print(time)\n            elif i == 33:\n                time = 'X'\n                print(time)\n            elif i == 34:\n                time = 'Y'\n                print(time)\n            elif i == 35:\n                time = 'Z'\n                print(time)\n            elif i == 36:\n                time = 'A'\n                print(time)\n            elif i == 37:\n                time = 'B'\n                print(time)\n            elif i == 38:\n                time = 'C'\n                print("
    },
    {
        "number": 4306,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    def turn(n):\n        if n == 0:\n            return '0'\n        elif n == 1:\n            return '1'\n        else:\n            return str(int(str(n-1) + str(n+1)))\n    def swap(n, x):\n        return str(x) + str(n-x)\n    def reverse(x):\n        return x[::-1]\n    def rotate(x):\n        return str(int(x[::-1]) + int(x))\n    x = int(stdin[0])\n    print(x)\n    result = 0\n    for i in range(1, n):\n        result += x\n        result += 1\n        print(result)\n        x = int(stdin[i])\n    print(result)\n    return reverse(result)\n\nprint(solution(input()))"
    },
    {
        "number": 4306,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.split()\n    a = int(line[0])\n    b = int(line[1])\n    c = int(line[2])\n    d = int(line[3])\n    if a < b and a < c and a < d:\n        return '{}'.format((a * b)+(c * d))\n    elif b < c and b < d and b < a:\n        return '{}'.format((b * c)+(d * a))\n    elif c < d and c < a and c < b:\n        return '{}'.format((c * d)+(a * b))\n    else:\n        return '{}'.format((a * b)+(d * c))"
    },
    {
        "number": 4306,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    map = [list(map(int,input().split())) for _ in range(100)]\n    pairs = [list(map(lambda x: int(x),i.split(' '))) for i in stdin.split('\\n')]\n    map_copy = copy.deepcopy(map)\n    answer = []\n    answer.append(0)\n    for j in range(100):\n        for i in range(pairs[j][0],pairs[j][1]+1):\n            for k in range(100):\n                for k2 in range(pairs[k][0],pairs[k][1]+1):\n                    if map_copy[i][k2] == map_copy[i][k]:\n                        answer.append(pairs[j][0]+pairs[j][1])\n                        break\n    answer = max(answer)\n    return str(answer)\n\ndef"
    },
    {
        "number": 4306,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [int(i) for i in stdin.split()]\n    if a > b or a > c or a > d:\n        return \"1\"\n    return str(a * b * c * d)\n\"\"\"\ndef"
    },
    {
        "number": 4306,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = input().split()\n    b = input().split()\n    a = list(map(int, a))\n    b = list(map(int, b))\n    res = 0\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            res += 1\n        else:\n            break\n    print(res)\n    return res\n'''\n"
    },
    {
        "number": 4306,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    import math\n    print(math.ceil(float(sys.argv[1])))\n    return str(math.ceil(float(sys.argv[1])))"
    },
    {
        "number": 4306,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(a,b):\n        return a in [0,1] and b in [0,1] and a < b and a!= b\n    \n    def move(x,y):\n        if not(x<=len(input) and y<=len(input[x])):\n            return\n        if len(input[x]) == 1:\n            return\n        if not is_valid(input[x][0],input[x][1]):\n            return\n        input[x][0],input[x][1] = input[x][1],input[x][0]\n        move(x,y)\n    \n    def find_swap(x,y):\n        while True:\n            if x<y:\n                x,y = y,x\n            else:\n                break\n        return x,y\n    \n    input = [list(map(int,input.split())) for _ in range(len(stdin))]\n    output = 0\n    for i in range(len(input)):\n        x,y = find_swap(i,0)\n        if input[x][1] == input[y][1]:\n            output += abs(input[x][0] - input[y][0])\n            continue\n        if is_valid(input[x][0],input[y][0]):\n            x,y = find_swap(y,y)\n            if is_valid(input[x][0],input[y][0]):\n                x,y = find_swap(x,y)\n        else:\n            output += abs(input[x][0] - input[y][0])\n    return output\n"
    },
    {
        "number": 4307,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    odd_num = 0\n    sum = 0\n    for i in range(1, N + 1):\n        if i % 2 == 0:\n            sum += i\n    for i in range(1, sum + 1):\n        if i % 2!= 0:\n            odd_num += 1\n    for i in range(2, odd_num + 1):\n        if i % 2!= 0:\n            sum += i\n    if sum % K:\n        return str(sum - K)\n    return str(sum)\n    \n"
    },
    {
        "number": 4307,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    odd_num = 0\n    for i in range(2, int(n**(1/2))+1):\n        if stdin == \"\":\n            break\n        for j in range(1, int(n/i)+1):\n            if i%j==0:\n                break\n        if stdin[-1]!= \"q\" and int(n/i)%2 == 0:\n            odd_num += 1\n    return str(odd_num)\n\nExample:\n    >>> solution(\"105\")\n    '1'\n    >>> solution(\"27\")\n    '2'\n    >>> solution(\"2726\")\n    '3'\n    >>> solution(\"3999\")\n    '5'\n    >>> solution(\"399917\")\n    '3'\n    >>> solution(\"10000\")\n    '1'\n    >>> solution(\"100001000\")\n    '2'\n    >>> solution(\"1000010004\")\n    '3'\n    >>> solution(\"1\")\n    '1'\n    >>> solution(\"1q\")\n    '1'\n    >>> solution(\"1q2\")\n    '1'\n    >>> solution(\"1q2q\")\n    '1'\n    >>> solution(\"1q4q\")\n    '2'\n    >>> solution(\"1q2q1\")\n    '2'\n    >>> solution(\"1q2q3\")\n    '1'\n    >>> solution(\"1q2q4\")\n    '1'\n    >>> solution(\"1q2q5\")\n    '1'\n    >>> solution(\"1q2q6\")\n    '2'\n    >>> solution(\"1q2q7\")\n    '1'\n    >>> solution(\"1q2q8\")\n    '2'\n    >>> solution(\"1q2q9\")\n    '1'\n    >>> solution(\"1q2q10\")\n    '1'\n    >>> solution(\"1q2q11\")\n    '2'\n    >>> solution(\"1q2q12\")\n    '2'\n    >>> solution(\"1q2q13\")\n    '2'\n    >>> solution(\"1q2q14\")\n    '1'\n    >>> solution(\"1q2q15\")\n    '1'\n    >>> solution(\"1q2q16\")\n    '1'\n    >>> solution(\"1q2q17\")\n    '1'\n    >>> solution(\"1q2q18\")\n    '1'\n    >>> solution(\"1q2q19\")\n    '2'\n    >>> solution(\"1q2q20\")\n    '1'\n    >>> solution(\"1q2q21\")\n    '1'\n    >>> solution(\"1q2q22\")\n    '1'\n    >>> solution(\"1q2q23\")\n    '1'\n    >>> solution(\"1q2q24\")\n    '2'\n    >>> solution(\"1q2q25\")\n    '1'\n    >>> solution(\"1q2q26\")\n    '2'\n    >>> solution(\"1q2q27\")\n    '1'\n    >>> solution(\"1q2q28\")\n    '1'\n    >>> solution(\"1q2q29\")\n    '1'\n    >>> solution(\"1q2q30\")\n    '1'\n    >>> solution(\"1q2q31\")\n    '1'\n    >>> solution(\"1q2q32\")\n    '1'\n    >>> solution(\"1q2q33\")\n    '1'\n    >>> solution(\"1q2q34\")\n    '1'\n    >>> solution(\"1q2q35\")\n    '1'\n    >>> solution(\"1q2q36\")\n    '1'\n    >>> solution(\"1q2q37\")\n    '1'\n    >>> solution(\"1q2q38\")\n    '1'\n    >>> solution(\"1q2q39\")\n    '1'\n    >>> solution(\"1q2q40\")\n    '1'\n    >>> solution(\"1q2q41\")\n    '1'\n    >>> solution(\"1q2q42\")\n    '1'\n    >>> solution(\"1q2q43\")\n    '1'\n    >>> solution(\"1q2q44\")\n    '1'\n    >>> solution(\"1q2q45\")\n    '1'\n    >>> solution(\"1q2q46\")\n    '1'\n    >>> solution(\"1q2q47\")\n    '1'\n    >>> solution(\"1q2q48\")\n    '1'\n    >>> solution(\"1q2q49\")\n    '1'\n    >>> solution(\"1q2q50\")\n    '1'\n    >>> solution(\"1q2q51\")\n    '1'\n    >>> solution(\"1q2q52\")\n    '1'\n    >>> solution(\"1q2q53\")\n    '1'\n    >>> solution(\"1q2q54\")\n    '1'\n    >>> solution(\"1q2q55\")\n    '1'\n    >>> solution(\"1q2q56\")\n    '1'\n    >>> solution(\"1q2q57\")\n    '1'\n    >>> solution(\"1q2q58\")\n    '1'\n    >>> solution(\"1q2q59\")\n    '1'\n    >>> solution(\"1q2q60\")\n    '1'\n    >>> solution(\"1q2q61\")\n    '1'\n    >>> solution(\"1q2q62\")\n    '1'\n    >>> solution(\"1q2q63\")\n    '1'\n    >>> solution(\"1q2q64\")\n    '1'\n    >>> solution(\"1q2q65\")\n    '1'\n    >>> solution(\"1q2q66\")\n    '1'\n    >>> solution(\"1q2q67\")\n    '1'\n    >>> solution(\"1q2q68\")\n    '1'\n    >>> solution(\"1q2q69\")\n    '1'\n    >>> solution(\"1q2q70\")\n    '1'\n    >>> solution(\"1q2q71\")\n    '1'\n    >>> solution(\"1q2q72\")\n    '1'\n    >>> solution(\"1q2q73\")\n    '1'\n    >>> solution(\"1q2q74\")\n    '1'\n    >>> solution(\"1q2q75\")\n    '1'\n    >>> solution(\"1q2q76\")\n    '1'\n    >>> solution(\"1q2q77\")\n    '1'\n    >>> solution(\"1q2q78\")\n    '1'\n    >>> solution(\"1q2q79\")\n    '1'\n    >>> solution(\"1q2q80\")\n    '1'\n    >>> solution(\"1q2q81\")\n    '1'\n    >>> solution(\"1q2q82\")\n    '1'\n    >>> solution(\"1q2q83\")\n    '1'\n    >>> solution(\"1q2q84\")\n    '1'\n    >>> solution(\"1q2q85\")\n    '1'\n    >>> solution(\"1q2q86\")\n    '1'\n    >>> solution(\"1q2q87\")\n    '1'\n    >>> solution(\"1q2q88\")\n    '1'\n    >>> solution(\"1q2q89\")\n    '1'\n    >>> solution(\"1q2q90\")\n    '1'\n    >>> solution(\"1q2q91\")\n    '1'\n    >>> solution(\"1q2q92\")\n    '1'\n    >>> solution(\"1q2q93\")\n    '1'\n    >>> solution(\"1q2q94\")\n    '1'\n    >>> solution(\"1q2q95\")\n    '1'\n    >>> solution(\"1q2q96\")\n    '1'\n    >>> solution(\"1q2q97\")\n    '1'\n    >>> solution(\"1q2q98\")\n    '1'\n    >>> solution(\"1q2q99\")\n    '1'\n    >>> solution(\"1q2q100\")\n    '1'\n    >>> solution(\"1q2q101\")\n    '1'\n    "
    },
    {
        "number": 4307,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    numbers = []\n    for i in range(2, int(stdin) + 1):\n        if i not in numbers:\n            numbers.append(i)\n    return str(len(numbers))"
    },
    {
        "number": 4307,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    cont = 0\n    for i in range(1, int(stdin) + 1):\n        for j in range(1, int(i ** 0.5) + 1):\n            if i % j == 0:\n                cont += 1\n    return str(cont)\n"
    },
    {
        "number": 4307,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(range(1, n + 1))\n    divisors = []\n    for i in a:\n        if i % 2!= 0:\n            divisors.append(i)\n    if len(divisors) == 0:\n        return \"0\"\n    else:\n        divisors.sort(reverse=True)\n        return str(len(divisors) - 1)\n"
    },
    {
        "number": 4307,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    divisors = []\n    for i in range(1,n+1):\n        if(i%2==0):\n            divisors.append(i)\n    \n    odds = []\n    for i in range(len(divisors)):\n        for j in range(i+1, len(divisors)):\n            if(divisors[i]%2!=0 and divisors[j]%2==0 and divisors[j]!=divisors[i]):\n                odds.append(divisors[i])\n    odds = set(odds)\n    count = len(odds)\n    if(count>=8):\n        print(count)\n    else:\n        print(\"-1\")\n"
    },
    {
        "number": 4307,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n\n    if N<1 or N>200:\n        return '0'\n    if N==1:\n        return str(1)\n    if N==2:\n        return str(2)\n    if N==3:\n        return str(3)\n    if N==4:\n        return str(4)\n    if N==5:\n        return str(5)\n    if N==6:\n        return str(6)\n    if N==7:\n        return str(7)\n    if N==8:\n        return str(8)\n    if N==9:\n        return str(9)\n    if N==10:\n        return str(10)\n    if N==11:\n        return str(11)\n    if N==12:\n        return str(12)\n    if N==13:\n        return str(13)\n    if N==14:\n        return str(14)\n    if N==15:\n        return str(15)\n    if N==16:\n        return str(16)\n    if N==17:\n        return str(17)\n    if N==18:\n        return str(18)\n    if N==19:\n        return str(19)\n    if N==20:\n        return str(20)\n    if N==21:\n        return str(21)\n    if N==22:\n        return str(22)\n    if N==23:\n        return str(23)\n    if N==24:\n        return str(24)\n    if N==25:\n        return str(25)\n    if N==26:\n        return str(26)\n    if N==27:\n        return str(27)\n    if N==28:\n        return str(28)\n    if N==29:\n        return str(29)\n    if N==30:\n        return str(30)\n    if N==31:\n        return str(31)\n    if N==32:\n        return str(32)\n    if N==33:\n        return str(33)\n    if N==34:\n        return str(34)\n    if N==35:\n        return str(35)\n    if N==36:\n        return str(36)\n    if N==37:\n        return str(37)\n    if N==38:\n        return str(38)\n    if N==39:\n        return str(39)\n    if N==40:\n        return str(40)\n    if N==41:\n        return str(41)\n    if N==42:\n        return str(42)\n    if N==43:\n        return str(43)\n    if N==44:\n        return str(44)\n    if N==45:\n        return str(45)\n    if N==46:\n        return str(46)\n    if N==47:\n        return str(47)\n    if N==48:\n        return str(48)\n    if N==49:\n        return str(49)\n    if N==50:\n        return str(50)\n    if N==51:\n        return str(51)\n    if N==52:\n        return str(52)\n    if N==53:\n        return str(53)\n    if N==54:\n        return str(54)\n    if N==55:\n        return str(55)\n    if N==56:\n        return str(56)\n    if N==57:\n        return str(57)\n    if N==58:\n        return str(58)\n    if N==59:\n        return str(59)\n    if N==60:\n        return str(60)\n    if N==61:\n        return str(61)\n    if N==62:\n        return str(62)\n    if N==63:\n        return str(63)\n    if N==64:\n        return str(64)\n    if N==65:\n        return str(65)\n    if N==66:\n        return str(66)\n    if N==67:\n        return str(67)\n    if N==68:\n        return str(68)\n    if N==69:\n        return str(69)\n    if N==70:\n        return str(70)\n    if N==71:\n        return str(71)\n    if N==72:\n        return str(72)\n    if N==73:\n        return str(73)\n    if N==74:\n        return str(74)\n    if N==75:\n        return str(75)\n    if N==76:\n        return str(76)\n    if N==77:\n        return str(77)\n    if N==78:\n        return str(78)\n    if N==79:\n        return str(79)\n    if N==80:\n        return str(80)\n    if N==81:\n        return str(81)\n    if N==82:\n        return str(82)\n    if N==83:\n        return str(83)\n    if N==84:\n        return str(84)\n    if N==85:\n        return str(85)\n    if N==86:\n        return str(86)\n    if N==87:\n        return str(87)\n    if N==88:\n        return str(88)\n    if N==89:\n        return str(89)\n    if N==90:\n        return str(90)\n    if N==91:\n        return str(91)\n    if N==92:\n        return str(92)\n    if N==93:\n        return str(93)\n    if N==94:\n        return str(94)\n    if N==95:\n        return str(95)\n    if N==96:\n        return str(96)\n    if N==97:\n        return str(97)\n    if N==98:\n        return str(98)\n    if N==99:\n        return str(99)\n    if N==100:\n        return str(100)\n    if N==101:\n        return str(101)\n    if N==102:\n        return str(102)\n    if N==103:\n        return str(103)\n    if N==104:\n        return str(104)\n    if N==105:\n        return str(105)\n    if N==106:\n        return str(106)\n    if N==107:\n        return str(107)\n    if N==108:\n        return str(108)\n    if N==109:\n        return str(109)\n    if N==110:\n        return str(110)\n    if N==111:\n        return str(111)\n    if N==112:\n        return str(112)\n    if N==113:\n        return str(113)\n    if N==114:\n        return str(114)\n    if N==115:\n        return str(115)\n    if N==116:\n        return str(116)\n    if N==117:\n        return str(117)\n    if N==118:\n        return str(118)\n    if N==119:\n        return str(119)\n    if N==120:\n        return str(120)\n    if N==121:\n        return str(121)\n    if N==122:\n        return str(122)\n    if N==123:\n        return str(123)\n    if N==124:\n        return str(124)\n    if N==125:\n        return str(125)\n    if N==126:\n        return str(126)\n    if N==127:\n        return str(127)\n    if N==128:\n        return str(128)\n    if N==129:\n        return str(129)\n    if N==130:\n        return str(130)\n    if N==131:\n        return str(131)\n    if N==132:\n        return str(132)\n    if N==133:\n        return str(133)\n    if N==134:\n"
    },
    {
        "number": 4307,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n  count = 0\n  for n in range(1, int(stdin) + 1):\n    divisors = 0\n    for d in range(1, int(n)):\n      if n % d == 0:\n        divisors += 1\n      if divisors % 2 == 1:\n        count += 1\n  return str(count)\n  \"\"\"\n  return str(int(n/10) + int(n%10) - int(n/10*n%10) - int(n/10*n%10)*10)\n\ndef"
    },
    {
        "number": 4307,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n  n = int(stdin)\n  count = 0\n  for i in range(1, n):\n    divisors = count\n    for j in range(1, i+1):\n      if (j % 2!= 0):\n        divisors += 1\n      if (i % divisors == 0):\n        break\n    if (i % divisors == 0):\n      count = i\n  return str(count)\n"
    },
    {
        "number": 4307,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    ans = 0\n\n    for n in range(1, int(math.sqrt(200)) + 1):\n        if (n * 2) % 10 == 0:\n            ans += 1\n        elif (n * 2) % 10 == 7:\n            ans += 2\n        elif (n * 2) % 10 == 2:\n            ans += 3\n        elif (n * 2) % 10 == 9:\n            ans += 4\n        elif (n * 2) % 10 == 4:\n            ans += 5\n        elif (n * 2) % 10 == 6:\n            ans += 6\n\n    return str(ans)\n"
    },
    {
        "number": 4308,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N,K = list(map(int,stdin.split()))\n    number_of_crackers = 0\n    smallest_number_received = 0\n    smallest_difference = 10 ** 9\n    for i in range(1,K):\n        number_of_crackers += i\n        if smallest_difference > abs(number_of_crackers - smallest_number_received):\n            smallest_number_received = number_of_crackers\n            smallest_difference = abs(number_of_crackers - smallest_number_received)\n    return str(smallest_difference)\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4308,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    arr = [list(map(int, input().split())) for _ in range(int(input()))]\n    check = [[0 for _ in range(len(arr[0]))] for _ in range(len(arr))]\n\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            check[i][j] = arr[i][j] - arr[0][j]\n\n    min_dif = 1000000000\n\n    for i in range(len(arr)):\n        for j in range(len(arr[0])):\n            if check[i][j] < min_dif:\n                min_dif = check[i][j]\n\n    answer = [min_dif]\n\n    for i in range(len(arr)):\n        answer.append(abs(arr[i][len(arr[0]) - 1] - arr[i][0]))\n\n    answer.sort(reverse=True)\n    return '\\n'.join(map(str, answer))"
    },
    {
        "number": 4308,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N,K = [int(i) for i in stdin.split()]\n    answer = ''\n    for i in range(1,K+1):\n        for j in range(1,i+1):\n            answer = max(answer, abs(i-j))\n    return answer\n"
    },
    {
        "number": 4308,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    user_table = [[] for _ in range(N)]\n    for _ in range(K):\n        user = list(map(int, stdin.split()))\n        user_table[user[0]-1].append(user[1]-1)\n        user_table[user[1]-1].append(user[0]-1)\n    return str(min(user_table[N-1])) + str(max(user_table[N-1]))\n\nRuntime: 32 ms, faster than 84.39% of Python3 online submissions for Minimum Absolute Difference.\nMemory Usage: 14.3 MB, less than 44.89% of Python3 online submissions for Minimum Absolute Difference.\n\"\"\"\n\nclass Solution:\n    def __init__(self):\n        self.max_diff = []\n\n    def min_diff(self, a, b, c):\n        # 1. \u786e\u5b9a\u5f53\u524ddiff\u7684\u4e0a\u4e0b\u8fb9\u754c\n        a = min(a, c)\n        b = max(b, c)\n        # 2. \u5f00\u59cb\u904d\u5386N-1\u4e2auser\uff0c\u627e\u5230\u6700\u5c0f\u7684diff\n        for i in range(1, N-1):\n            if a <= b and b <= c:\n                return b - a + 1\n            # \u53ef\u80fd\u662f\u8d1f\u6570\u4e0b\u6807\uff0c\u9700\u8981\u5bf9\u6bd4\u524d\u9762\u4e24\u4e2a\u4e0b\u6807\u7684\u5dee\u503c\uff0c\u53d6\u6a21\u4e00\u4e0b\uff0c\u82e5\u4e4b\u540e\u4e24\u4e2a\u4e0b\u6807\u7684\u5dee\u503c\u5927\u4e8e\uff0c\u5219\u53ef\u80fd\u662f\u8d1f\u6570\u7684\u4e0b\u6807\n            if a <= b or a <= c or b <= c:\n                return b - a + 1\n            if a - b == c - b:\n                return 1\n        # 3. \u6839\u636e\u5f53\u524ddiff\u627e\u5230\u6700\u5927\u7684diff\uff0c\u8ba1\u7b97\u524d\u4e24\u4e2a\u4e0b\u6807\u7684\u5dee\u503c\uff0c\u53d6\u6a21\u4e00\u4e0b\uff0c\u82e5\u4e4b\u540e\u4e24\u4e2a\u4e0b\u6807\u7684\u5dee\u503c\u5927\u4e8e\uff0c\u5219\u53ef\u80fd\u662f\u8d1f\u6570\u7684\u4e0b\u6807\n        if a <= b:\n            return (a - b) + 1\n        if a <= c:\n            return (a - c) + 1\n        if b <= c:\n            return (b - c) + 1\n\n    def findMin(self, N, K, user_table):\n        diff = []\n        for i in range(1, N-1):\n            diff.append(self.min_diff(i, i + 1, K))\n        min_diff = max(diff)\n        self.max_diff.append(min_diff)\n        return min_diff\n        \n    def solution(self, stdin: str) -> str:\n        N, K = map(int, stdin.split())\n        user_table = [[] for _ in range(N)]\n        for _ in range(K):\n            user = list(map(int, stdin.split()))\n            user_table[user[0] - 1].append(user[1] - 1)\n            user_table[user[1] - 1].append(user[0] - 1)\n        return str(min(user_table[N - 1])) + str(max(user_table[N - 1]))"
    },
    {
        "number": 4308,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N,K = map(int,stdin.split())\n    N -= 1\n    K -= 1\n    \n    if N + K < 100:\n        return str(abs(N - K))\n    \n    return str(abs(N - K))\n"
    },
    {
        "number": 4308,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n  n,k = map(int,stdin.split())\n  if n==1 and k==1:\n    return '1'\n  N,K = sorted(n,reverse=True)\n  res = ''\n  min_diff = 100000000000\n  for _ in range(K):\n    for _ in range(n):\n      res += str(N-K)\n      N -= 1\n    for _ in range(n):\n      res += str(K-N)\n      K -= 1\n  for i in range(K):\n    diff = abs(res[i]+K)\n    if min_diff>diff:\n      min_diff = diff\n  return str(min_diff)\n\n\"\"\"\ndef"
    },
    {
        "number": 4308,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    N, K = [int(x) for x in stdin.split()]\n    nums = set([int(x) for x in stdin.split()])\n    if len(nums) < 3 or len(nums) < 2:\n        return ''\n    \n    def solution_one(nums, k):\n        if k == 0:\n            return 0\n        if k < 0:\n            return ''\n        \n        return max(nums[:k] + nums[k + 1:]) - min(nums[:k] + nums[k + 1:])\n    \n    def solution_two(nums, k):\n        nums = sorted(nums)\n        if k == 0:\n            return 0\n        if k < 0:\n            return ''\n        \n        return max(nums[:k] + nums[k + 1:]) - min(nums[:k] + nums[k + 1:])\n    \n    return str(solution_one(nums, K) - solution_two(nums, K))\n\ndef"
    },
    {
        "number": 4308,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n,k = list(map(int,stdin.split()))\n    a = n//k\n    b = (n%k)//k\n    print(a,b)\n    return str(abs(a-b))\n\ndef"
    },
    {
        "number": 4308,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N,K = [int(x) for x in stdin.split()]\n    return str(abs(K - N))[:5]\n\n\"\"\"\nclass Solution:\n    def solution(self, N, K):\n        res = []\n        for i in range(N):\n            for j in range(N):\n                tmp = (i + j) % K\n                if tmp == 0:\n                    res.append(abs(i - j))\n        return min(res)\n\n\nN, K = map(int, input().split())\nprint(Solution().solution(N, K))\n"
    },
    {
        "number": 4308,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n  \n  N,K = map(int,stdin.split())\n  s = list(map(int,stdin.split()))\n  \n  # s = [i for i in s if i > 0]\n  \n  # s = sorted(s,reverse=True)\n  \n  # print(s)\n  \n  # print(max(s))\n  \n  # print(min(s))\n  \n  \n  min_diff = 10**9\n  # for i in s:\n  #   if i < min_diff:\n  #     min_diff = i\n  # print(min_diff)\n  \n  \n  for i in range(min(s),max(s)):\n    diff = K - i\n    if diff < min_diff:\n      min_diff = diff\n      \n  print(min_diff)"
    },
    {
        "number": 4309,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    answer = 0\n    for i in range(1, n + 1):\n        if solution := str(i) == '1' * i:\n            answer = i\n    return answer\n"
    },
    {
        "number": 4309,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n        \n        N = int(stdin)\n        ans = 1\n        x = 10 ** N\n        \n        while x > 0:\n            x = x // 10 ** (N + 1)\n            ans = ans * 10 ** N\n        \n        return str(ans)\n"
    },
    {
        "number": 4309,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, *b = map(int, stdin.split())\n    i = b.index(str(n)[::-1])\n    return str(n)[::-1][i]"
    },
    {
        "number": 4309,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    def is_valid(x):\n        if x.isdigit() and int(x) <= N:\n            return True\n        return False\n    \n    def digits(x):\n        return [int(i) for i in str(x)]\n    \n    digits_list = list(digits(str(N)))\n    i = 0\n    while i < len(digits_list):\n        if not is_valid(digits_list[i]):\n            digits_list.pop(i)\n        else:\n            i += 1\n    N = int(''.join(digits_list))\n    return N"
    },
    {
        "number": 4309,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin))\n\"\"\"\n\ndef"
    },
    {
        "number": 4309,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    print(N)\n    return str(N)"
    },
    {
        "number": 4309,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    answer = []\n    for i in range(1, N+1):\n        answer.append(i)\n        for j in range(N):\n            answer[i-1] = str(int(answer[i-1]))\n            answer[i] = str(int(answer[i]))\n    return ''.join(answer)"
    },
    {
        "number": 4309,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n  \n  num = int(stdin[0])\n  str = stdin[1]\n  list=[]\n  for i in range(num):\n    k = list.append(str[i])\n  for i in range(len(k)):\n    if(k[i]==\"0\"):\n      k[i]=str[i]\n    else:\n      k[i]=str[i].upper()\n    for j in range(i+1, len(k)):\n      if(k[j]==\"0\"):\n        k[j]=str[j]\n      else:\n        k[j]=str[j].upper()\n  return(\"\".join(k))\n\ndef"
    },
    {
        "number": 4309,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def find_next_digits(n):\n        i = 1\n        while True:\n            i = i * 10\n            if (n % i == 0):\n                break\n        return i - 1\n\n    N = int(stdin)\n    answer = -1\n    for i in range(1, N + 1):\n        n = N\n        while n % i == 0:\n            n = n / 10\n        if n % 10 == int(stdin[0]):\n            answer = find_next_digits(n)\n            if answer!= -1:\n                break\n    if answer == -1:\n        return -1\n    return answer\n"
    },
    {
        "number": 4309,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    n_base = list(str(n))\n    cnt = 0\n    for i in n_base:\n        while cnt < n:\n            if i.isdigit():\n                cnt += 1\n            else:\n                break\n        if cnt == n:\n            break\n    else:\n        return n\n\n    def check(i):\n        return int(i) - 1\n    def check_digit(i):\n        return (i - 1) % 10\n\n    for i in range(len(n_base) - 1):\n        if n_base[i] == '0' or n_base[i] == '1':\n            n_base[i] = str(check_digit(i))\n\n    answer = ''.join(n_base)\n    return answer\n\n\ndef"
    },
    {
        "number": 4310,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    answer = float('inf')\n    for i in range(int(stdin[0])):\n        cost = list(map(int, stdin[i+1].split()))\n        for j in range(int(stdin[i+2])):\n            if cost[j] == 0:\n                break\n            elif j+1 < len(cost):\n                if cost[j] + cost[j+1] < answer:\n                    answer = cost[j] + cost[j+1]\n    return str(answer)\n"
    },
    {
        "number": 4310,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A = [int(i) for i in stdin.split()]\n    A.sort()\n    minCost = 0\n    for i in A:\n        minCost += abs(i)\n    return str(minCost)\n\n\"\"\"\nclass Solution:\n    def minimumCost(self, tasks: List[str]) -> str:\n        dic = {}\n        for task in tasks:\n            task = task.split(\",\")\n            for i in task:\n                if i not in dic:\n                    dic[i] = 1\n                else:\n                    dic[i] += 1\n        dic = sorted(dic.items(), key=lambda x: x[1], reverse=True)\n        l = len(dic)\n        cur = 0\n        temp = 0\n        for i in range(l):\n            if dic[i][0] == task[0]:\n                cur += dic[i][1]\n            else:\n                temp += dic[i][1]\n        return str(cur - temp)\n\n\"\"\"\n"
    },
    {
        "number": 4310,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, A_1, A_2, A_3, x, A_4 = map(int, stdin.split())\n    if n > 3:\n        x = abs(x)\n        if A_1 == 0:\n            A_1 = A_2 + A_3\n        elif A_2 == 0:\n            A_2 = A_3 + A_4\n        elif A_3 == 0:\n            A_3 = A_4 + x\n        else:\n            A_1 = A_2 + A_3\n            A_2 = A_4 + x\n            A_3 = A_1 + A_2\n        print(f'{A_1}')\n        print(f'{A_2}')\n        print(f'{A_3}')\n    else:\n        print(f'{x}')\n    return str(min(A_1, A_2, A_3, x))\n\n\n-----Sample Input-----\n1 6 3\n\n-----Sample Output-----\n5\n\nWhen the tasks are completed in the following order, the total cost will be 5, which is the minimum:\n - Complete the first task at cost 0.\n - Complete the third task at cost 2.\n - Complete the second task at cost 3.\ndef"
    },
    {
        "number": 4310,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A_1, A_2, A_3 = list(map(int, stdin.split(\" \")))\n    A_1, A_2, A_3 = sorted(list(A_1)), sorted(list(A_2)), sorted(list(A_3))\n    A_1_i, A_2_i, A_3_i = 0, 0, 0\n    min_cost = A_1 + A_2 + A_3\n    for i in range(len(A_1)):\n        A_1_i += A_1[i] * (i + 1)\n    for i in range(len(A_2)):\n        A_2_i += A_2[i] * (i + 1)\n    for i in range(len(A_3)):\n        A_3_i += A_3[i] * (i + 1)\n    min_cost = min(A_1_i, A_2_i, A_3_i)\n    answer = min_cost * (min_cost + min_cost + min_cost)\n    return str(answer)\n\nprint(solution(\"1 6 3\"))"
    },
    {
        "number": 4310,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A = map(int, stdin.split())\n    print(A)\n    \n    A.sort()\n    x = A[0]\n    print(x)\n    def run(A, x):\n        A_list = list(A)\n        print(A_list)\n        A_list.sort()\n        print(A_list)\n        A_list.sort(reverse=True)\n        print(A_list)\n        A_list.sort()\n        print(A_list)\n        A_list.sort()\n        print(A_list)\n        A_list.sort(reverse=True)\n        print(A_list)\n        A_list.sort()\n        print(A_list)\n        A_list.sort(reverse=True)\n        print(A_list)\n        A_list.sort()\n        print(A_list)\n        A_list.sort()\n        print(A_list)\n        A_list.sort(reverse=True)\n        print(A_list)\n        print(A_list)\n        A_list.sort()\n        print(A_list)\n        A_list.sort(reverse=True)\n        print(A_list)\n        A_list.sort()\n        print(A_list)\n        A_list.sort(reverse=True)\n        print(A_list)\n        A_list.sort()\n        print(A_list)\n        A_list.sort(reverse=True)\n        print(A_list)\n        A_list.sort()\n        print(A_list)\n        print(A_list)\n        A_list.sort()\n        print(A_list)\n        A_list.sort(reverse=True)\n        print(A_list)\n        A_list.sort()\n        print(A_list)\n        A_list.sort(reverse=True)\n        print(A_list)\n        A_list.sort()\n        print(A_list)\n        A_list.sort(reverse=True)\n        print(A_list)\n        print(A_list)\n        print(A_list)\n        A_list.sort()\n        print(A_list)\n        print(A_list)\n        A_list.sort(reverse=True)\n        print(A_list)\n        print(A_list)\n        A_list.sort()\n        print(A_list)\n        print(A_list)\n        A_list.sort(reverse=True)\n        print(A_list)\n        print(A_list)\n        A_list.sort()\n        print(A_list)\n        A_list.sort(reverse=True)\n        print(A_list)\n        print(A_list)\n        A_list.sort()\n        print(A_list)\n        print(A_list)\n        A_list.sort(reverse=True)\n        print(A_list)\n        print(A_list)\n        A_list.sort()\n        print(A_list)\n        A_list.sort(reverse=True)\n        print(A_list)\n        print(A_list)\n        A_list.sort()\n        print(A_list)\n        A_list.sort(reverse=True)\n        print(A_list)\n        A_list.sort()\n        print(A_list)\n        A_list.sort(reverse=True)\n        print(A_list)\n        A_list.sort()\n        print(A_list)\n        A_list.sort(reverse=True)\n        print(A_list)\n        print(A_list)\n        A_list.sort()\n        print(A_list)\n        A_list.sort(reverse=True)\n        print(A_list)\n        A_list.sort()\n        print(A_list)\n        print(A_list)\n        A_list.sort(reverse=True)\n        print(A_list)\n        A_list.sort()\n        print(A_list)\n        A_list.sort(reverse=True)\n        print(A_list)\n        print(A_list)\n        A_list.sort()\n        print(A_list)\n        print(A_list)\n        A_list.sort(reverse=True)\n        print(A_list)\n        A_list.sort()\n        print(A_list)\n        A_list.sort(reverse=True)\n        print(A_list)\n        A_list.sort()\n        print(A_list)\n        A_list.sort(reverse=True)\n        print(A_list)\n        A_list.sort()\n        print(A_list)\n        A_list.sort(reverse=True)\n        print(A_list)\n        A_list.sort()\n        print(A_list)\n        A_list.sort(reverse=True)\n        print(A_list)\n        A_list.sort()\n        print(A_list)\n        A_list.sort(reverse=True)\n        print(A_list)\n        A_list.sort()\n        print(A_list)\n        A_list.sort(reverse=True)\n        print(A_list)\n        A_list.sort()\n        print(A_list)\n        A_list.sort(reverse=True)\n        print(A_list)\n        A_list.sort()\n        print(A_list)\n        A_list.sort(reverse=True)\n        print(A_list)\n        A_list.sort()\n        print(A_list)\n        A_list.sort(reverse=True)\n        print(A_list)\n        A_list.sort()\n        print(A_list)\n        A_list.sort(reverse=True)\n        print(A_list)\n        A_list.sort()\n        print(A_list)\n        A_list.sort(reverse=True)\n        print(A_list)\n        A_list.sort()\n        print(A_list)\n        A_list.sort(reverse=True)\n        print(A_list)\n        A_list.sort()\n        print(A_list)\n        A_list.sort(reverse=True)\n        print(A_list)\n        A_list.sort()\n        print(A_list)\n        A_list.sort(reverse=True)\n        print(A_list)\n        A_list.sort()\n        print(A_list)\n        A_list.sort(reverse=True)\n        print(A_list)\n        A_list.sort()\n        print(A_list)\n        A_list.sort(reverse=True)\n        print(A_list)\n        A_list.sort()\n        print(A_list)\n        A_list.sort(reverse=True)\n        print(A_list)\n        A_list.sort()\n        print(A_list)\n        A_list.sort(reverse=True)\n        print(A_list)\n        A_list.sort()\n        print(A_list)\n        A_list.sort(reverse=True)\n        print(A_list)\n        A_list.sort()\n        print(A_list)\n        A_list.sort(reverse=True)\n        print(A_list)\n        A_list.sort()\n        print(A_list)\n        A_list.sort(reverse=True)\n        print(A_list)\n        A_list."
    },
    {
        "number": 4310,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    tasks = [int(x) for x in stdin.split(\" \")]\n    A_1, A_2, A_3 = tasks\n    # print(A_1, A_2, A_3)\n    \n    if A_1 < A_2 and A_2 < A_3:\n        A_1, A_2, A_3 = A_3, A_1, A_2\n    if A_1 < A_2 and A_2 < A_3:\n        A_1, A_2 = A_2, A_1\n    if A_1 < A_2 and A_2 < A_3:\n        A_1 = A_3\n    # print(A_1, A_2, A_3)\n    \n    A_i = [0, 0, 0]\n    for i in range(4):\n        A_i[i] = A_i[i] + A_1 + A_2 + A_3\n        A_1, A_2, A_3 = A_3, A_1, A_2\n        A_i[i] = A_i[i] + A_1 + A_2 + A_3\n        A_1, A_2, A_3 = A_3, A_1, A_2\n        A_i[i] = A_i[i] + A_1 + A_2 + A_3\n        \n    A_i[0] = A_1 + A_2 + A_3\n    \n    return str(min(A_i))"
    },
    {
        "number": 4310,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A = [int(i) for i in stdin.split()]\n    A.sort()\n    B = []\n    #print(A)\n    #print(A[-1]-A[-2])\n    for i in range(len(A)-2):\n        #print(i)\n        #print(A[i+1]-A[i+2])\n        B.append(A[i+1]-A[i+2])\n    B.sort()\n    #print(B)\n    if B[-1]!= 0:\n        return B[-1]\n    return 'inf'\n\n---------Sample Output\n\n1\n1\n1\n\n----Explanation----\n\nThe task is complete, because |A_1 - A_2| = 0.\n\nThe task is complete, because |A_2 - A_3| = 0.\n\nThe task is complete, because |A_3 - A_4| = 0.\n\nThe task is complete, because |A_4 - A_5| = 0.\n\nThe total cost is 5, which is the minimum.\n\nFor example, if we are given:\n\nA = [4, 4, 3, 3]\nB = [2, 2, 3, 1]\nWe have 3 tasks, all of which need to be completed.\nFirst, you can complete any one task at cost 0.\nThen, just after completing the i-th task, you can complete the j-th task at cost |A_j - A_i|.\nHere, |x| denotes the absolute value of x.\nFind the minimum total cost required to complete all the task.\n\n------Constraints------\n - All values in input are integers.\n - 1 \\leq A_1, A_2, A_3 \\leq 100\n\n------Input-----\nInput is given from Standard Input in the following format:\nA_1 A_2 A_3\n\n-----Output-----\nPrint the minimum total cost required to complete all the task.\n\n-----Sample Input-----\n1 6 3\n\n-----Sample Output-----\ninf\n\nWhen the tasks are completed in the following order, the total cost will be inf.\n\n------Constraints------\n - All values in input are integers.\n - 1 \\leq A_1, A_2, A_3 \\leq 100\n\n------Input-----\nInput is given from Standard Input in the following format:\nA_1 A_2 A_3\n\n-----Output-----\nPrint the minimum total cost required to complete all the task.\n\n------Sample Input-----\n1 6 3\n\n-----Sample Output-----\ninf\n"
    },
    {
        "number": 4310,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    answer: str = \"\"\n    for line in stdin:\n        line = line.strip().split(' ')\n        if line[0] == '1':\n            answer += str(sum(map(lambda x: abs(int(x)-int(x[0])), line[1:])))\n        elif line[0] == '2':\n            answer += str(sum(map(lambda x: abs(int(x)-int(x[0])), line[2:])))\n        elif line[0] == '3':\n            answer += str(sum(map(lambda x: abs(int(x)-int(x[0])), line[3:])))\n        else:\n            answer += str(0)\n    return answer\n\nprint(solution([\"1\",\"2\",\"3\"])) # 5\nprint(solution([\"4\",\"20\",\"15\",\"10\",\"5\",\"8\"])) # 14\nprint(solution([\"1\"])) # 0"
    },
    {
        "number": 4310,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B = list(map(int, stdin.split()))\n    A_i = min(A, B)\n    B_i = min(B, A)\n    A_j = max(A, B)\n    B_j = max(B, A)\n    return str(abs(A_j - A_i) + abs(B_j - B_i))"
    },
    {
        "number": 4310,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n        A_1, A_2, A_3 = map(int, stdin.split(' '))\n        completed = []\n        for i in range(1, A_3 + 1):\n            if i not in completed:\n                completed.append(i)\n        \n        def get_abs(x):\n            return abs(x)\n        \n        for i in range(0, A_1):\n            x = map(int, stdin.split(' '))\n            cost = 0\n            for j in range(0, len(completed)):\n                if j not in completed:\n                    cost += (get_abs(x[j]) - get_abs(x[i]))\n            print(cost)\n        return str(cost)\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4311,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = input()\n    a = input()\n    a = list(map(int,a.split()))\n    m = int(input())\n    c = 0\n    for i in range(len(a)):\n        c += a[i]/2\n        if c > m:\n            break\n    m = min(a[i]/2 for i in range(len(a)))\n    if c == 0:\n        for i in range(len(a)):\n            c = a[i]/2\n    for i in range(len(a)):\n        if c == a[i]:\n            continue\n        elif a[i]/2 < m:\n            print(i)\n            return '{}'.format(i)\n        elif c == a[i]:\n            c = a[i]\n    return '-1'\n'''"
    },
    {
        "number": 4311,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # create an empty array\n    n = [0]\n    # read the input from stdin\n    for s in stdin.split():\n        # parse the input\n        n.append(int(s))\n    # find the minimum integer\n    m = n.index(min(n))\n    print(m)\n\"\"\"\n\nfrom math import factorial\n\ndef"
    },
    {
        "number": 4311,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n  a_set = set(map(int,stdin.split()))\n  print(min(a_set))"
    },
    {
        "number": 4311,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = list(map(int, stdin.split()))\n    m = s[0]\n    a = 0\n    for i in range(1, len(s)):\n        if s[i] % 2 == 0:\n            a = s[i]\n        else:\n            a = 3*s[i] + 1\n        m = max(m, a)\n    return str(m)"
    },
    {
        "number": 4311,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.split()\n    a = data[1]\n    s = data[2]\n    c = data[3]\n    a = int(a)\n    s = int(s)\n    c = int(c)\n    print(s)\n    if (s - a)%2==1 or s%2==1:\n        print(min(s-a,c-s,a+2*s))\n    else:\n        print(min(s-a,s-c,c+a-s,a+s+c))\n\n-----Sample Input-----\n10\n1\n\n-----Sample Output-----\n10\n\na=1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,"
    },
    {
        "number": 4311,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(item) for item in stdin.split()]\n    a.sort()\n    n = len(a)\n    for i in range(n - 1):\n        j = i + 1\n        if a[j] % 2 == 0:\n            j = j + 1\n        if a[j] % 2 == 1:\n            j = j - 1\n        if a[i] > a[j]:\n            a[i], a[j] = a[j], a[i]\n    a.sort()\n    print(a[n // 2])\nsolution(input())"
    },
    {
        "number": 4311,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a_1 = []\n    b_1 = []\n    for i in stdin:\n        if i!='':\n            a_1.append(int(i))\n        else:\n            b_1.append(int(i))\n    a_1.sort()\n    b_1.sort()\n    if len(a_1) > len(b_1):\n        a_1 = a_1[-len(b_1):]\n    else:\n        b_1 = b_1[-len(a_1):]\n    if len(a_1) == 0:\n        return '0'\n    if len(b_1) == 0:\n        return '0'\n    if len(a_1) <= len(b_1):\n        return str(int(a_1[0] / 2))\n    else:\n        return str(int(b_1[0] / 2))\n\n-----Sample Input-----\n8\n\n-----Sample Output-----\n5\n\na=\\{8,4,2,1,4,2,1,4,2,1,......\\}. As a_5=a_2, the answer is 5.\ndef"
    },
    {
        "number": 4311,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s, m = map(int, stdin.split())\n    a = [i for i in range(s, s + m + 1)]\n    a = sorted(a, reverse=True)\n    for i in range(len(a) - 1):\n        if a[i] + a[i + 1] == s:\n            return a[i] + a[i + 1]\n    return s"
    },
    {
        "number": 4311,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def get_int(s: str) -> int:\n        return int(s)\n\n    def get_list(s: str) -> list:\n        return list(map(get_int, s.split(',')))\n\n    def get_dict(s: str) -> dict:\n        return dict(map(lambda i: (i, get_int(i)), s.split(',')))\n\n    def get_set(s: str) -> set:\n        return set(map(get_int, s.split(',')))\n\n    def get_fib(s: str) -> list:\n        s1 = s[:2]\n        s2 = s[2:4]\n        if len(s) == 4:\n            return [s1, s2]\n        if len(s) == 3:\n            return [s1, s2, s2]\n        return [s1]\n\n    def get_str(s: str) -> str:\n        return s.replace(' ', '')\n\n    def get_sum(s: str) -> int:\n        s = get_str(s)\n        ans = 0\n        for i in range(1, len(s)):\n            ans += get_sum(s[:i])\n            ans += get_sum(s[i:])\n        return ans\n\n    def solution(n: str) -> str:\n        s = n\n        a = {}\n        f = {}\n        for i in range(2, n + 1):\n            a[i] = i\n            f[i] = i\n        sum = 0\n        i = 1\n        while i <= n:\n            if i % 2 == 0:\n                s = s.replace(str(i), str(sum))\n                s = s[1:]\n                sum += i\n            else:\n                i += 1\n                sum += i\n            a = get_dict(s)\n            if i == n:\n                break\n        return a[sum]\n\n    return str(solution(stdin))\n"
    },
    {
        "number": 4311,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = list(map(int, stdin.split()))\n    # for i in range(1, len(s)):\n    #     if s[i-1]%2 == s[i]%2:\n    #         s[i-1] += 1\n    #     else:\n    #         s[i-1] = s[i] + 1\n    return str(min(s))\n'''\nimport math\ndef"
    },
    {
        "number": 4312,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\ndef"
    },
    {
        "number": 4312,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    if A == 0:\n        return 'No'\n    if B == 0:\n        return 'No'\n    if C == 0:\n        return 'No'\n    if D == 0:\n        return 'No'\n    Aoki, Takahashi = 0, 0\n    if A <= 10 and B <= 10 and C <= 10 and D <= 10:\n        Aoki += 1\n        Takahashi += 1\n    if A > 10 or B > 10 or C > 10 or D > 10:\n        return 'No'\n    if A < 1 or B < 1 or C < 1 or D < 1:\n        return 'No'\n    if A > D or B > D or C > D:\n        return 'No'\n    if A > 0:\n        Aoki += 1\n    if A > 0 and B > 0 and C > 0 and D > 0:\n        Takahashi += 1\n    if A > 0 and B > 0 and C > 0 and D < 0:\n        Takahashi += 1\n    if A > 0 and B < 0 and C < 0 and D > 0:\n        Aoki += 1\n    if A > 0 and B < 0 and C < 0 and D < 0:\n        Aoki += 1\n    if A > 0 and B > 0 and C > 0 and D < 0:\n        Aoki += 1\n    if A > 0 and B > 0 and C < 0 and D > 0:\n        Takahashi += 1\n    if A > 0 and B < 0 and C < 0 and D > 0:\n        Takahashi += 1\n    if A > 0 and B < 0 and C < 0 and D >= 0:\n        Aoki += 1\n    if A > 0 and B < 0 and C >= 0 and D < 0:\n        Aoki += 1\n    if A > 0 and B > 0 and C >= 0 and D < 0:\n        Takahashi += 1\n    if A > 0 and B < 0 and C >= 0 and D >= 0:\n        Takahashi += 1\n    if A > 0 and B < 0 and C > 0 and D >= 0:\n        Aoki += 1\n    if A > 0 and B > 0 and C < 0 and D >= 0:\n        Takahashi += 1\n    if A > 0 and B > 0 and C > 0 and D >= 0:\n        Aoki += 1\n    if A > 0 and B < 0 and C >= 0 and D >= 0:\n        Takahashi += 1\n    if A > 0 and B > 0 and C < 0 and D >= 0:\n        Aoki += 1\n    if A > 0 and B > 0 and C < 0 and D < 0:\n        Takahashi += 1\n    if A > 0 and B > 0 and C < 0 and D >= 0:\n        Aoki += 1\n    if A > 0 and B > 0 and C >= 0 and D >= 0:\n        Takahashi += 1\n    if A > 0 and B < 0 and C >= 0 and D >= 0:\n        Aoki += 1\n    if A > 0 and B < 0 and C < 0 and D >= 0:\n        Aoki += 1\n    if A > 0 and B < 0 and C < 0 and D <= 0:\n        Takahashi += 1\n    if A > 0 and B < 0 and C < 0 and D < 0:\n        Takahashi += 1\n    if A > 0 and B > 0 and C <= 0 and D <= 0:\n        Aoki += 1\n    if A > 0 and B > 0 and C > 0 and D <= 0:\n        Takahashi += 1\n    if A > 0 and B > 0 and C > 0 and D < 0:\n        Takahashi += 1\n    if A > 0 and B < 0 and C <= 0 and D <= 0:\n        Aoki += 1\n    if A > 0 and B < 0 and C < 0 and D <= 0:\n        Takahashi += 1\n    if A > 0 and B > 0 and C > 0 and D <= 0:\n        Aoki += 1\n    if A > 0 and B > 0 and C > 0 and D >= 0:\n        Aoki += 1\n    if A > 0 and B > 0 and C < 0 and D <= 0:\n        Takahashi += 1\n    if A > 0 and B < 0 and C <= 0 and D <= 0:\n        Aoki += 1\n    if A > 0 and B < 0 and C > 0 and D <= 0:\n        Takahashi += 1\n    if A > 0 and B > 0 and C < 0 and D <= 0:\n        Takahashi += 1\n    if A > 0 and B < 0 and C < 0 and D >= 0:\n        Takahashi += 1\n    if A > 0 and B > 0 and C >= 0 and D <= 0:\n        Aoki += 1\n    if A > 0 and B > 0 and C < 0 and D >= 0:\n        Aoki += 1\n    if A > 0 and B < 0 and C >= 0 and D >= 0:\n        Takahashi += 1\n    if A > 0 and B < 0 and C < 0 and D >= 0:\n        Aoki += 1\n    if A > 0 and B < 0 and C > 0 and D >= 0:\n        Takahashi += 1\n    if A > 0 and B < 0 and C < 0 and D < 0:\n        Aoki += 1\n    if A > 0 and B < 0 and C >= 0 and D < 0:\n        Aoki += 1\n    if A > 0 and B > 0 and C < 0 and D <= 0:\n        Aoki += 1\n    if A > 0 and B > 0 and C > 0 and D <= 0:\n        Takahashi += 1\n    if A > 0 and B < 0 and C < 0 and D < 0:\n        Aoki += 1\n    if A > 0 and B < 0 and C >= 0 and D <= 0:\n        Takahashi += 1\n    if A > 0 and B < 0 and C < 0 and D >= 0:\n        Aoki += 1\n    if A > 0 and B < 0 and C > 0 and D <= 0:\n        Aoki += 1\n    if A > 0 and B > 0 and C < 0 and D <= 0:\n        Aoki += 1\n    if A > 0 and B < 0 and C > 0 and D >= 0:\n        Aoki += 1\n    if A > 0 and B < 0 and C > 0 and D >= 0:\n        Takahashi += 1\n    if A > 0 and B > 0 and C > 0 and D >= 0:\n        Aoki += 1\n    if A > 0 and B > 0 and C < 0 and D <= 0:\n        Takahashi += 1\n    if A > 0 and B > 0 and C < 0 and D < 0:\n        Aoki += 1\n    if A > 0 and B < 0 and C > 0 and D <= 0:\n        Aoki += 1\n    if A > 0 and B > 0 and C < 0 and D >= 0:\n        Takahashi += 1\n    if A > 0 and B < 0 and C < 0 and D >= 0:\n        Aoki += 1\n    if A > 0 and B < 0 and C < 0 and D < 0:\n        Aoki += 1\n    if A > 0 and B > 0 and C"
    },
    {
        "number": 4312,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    A = 10\n    B = 10\n    C = 10\n    D = 10\n    for _ in range(n):\n        a, b, c, d = map(int, stdin.strip().split())\n        A = min(A, a)\n        B = min(B, b)\n        C = min(C, c)\n        D = min(D, d)\n    if A >= B >= C >= D >= 0:\n        return \"Yes\"\n    else:\n        return \"No\"\n\n-----Constraints-----\n - 1 \\leq A,B,C,D \\leq 100\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nA B C D\n\n-----Output-----\nIf Takahashi will win, print Yes; if he will lose, print No.\n\n-----Sample Input-----\n10 9 10 10\n\n-----Sample Output-----\nNo\n\nFirst, Takahashi's monster attacks Aoki's monster, whose health is now 10-9=1.\nNext, Aoki's monster attacks Takahashi's monster, whose health is now 10-10=0.\nTakahashi's monster is the first to have 0 or less health, so Takahashi loses.\ndef"
    },
    {
        "number": 4312,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n\n    while A >= 10 or B >= 10 or C >= 10 or D >= 10:\n        if A >= 10 or B >= 10 or C >= 10 or D >= 10:\n            print('No')\n            return\n        A -= 10\n        B -= 10\n        C -= 10\n        D -= 10\n\n    if A == 0 or B == 0 or C == 0 or D == 0:\n        print('No')\n        return\n\n    if A + B == C + D:\n        print('Yes')\n        return\n    if A + C == B + D:\n        print('Yes')\n        return\n\n    print('No')\n    return\n\n-----Constraints-----\n - 1 \\leq A,B,C,D \\leq 100\n - All values in input are integers.\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4312,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    count = 1\n    while count < A + B + C + D:\n        if count == A:\n            A -= 1\n            count += 1\n            A = max(0, A)\n        elif count == B:\n            B -= 1\n            count += 1\n            B = max(0, B)\n        elif count == C:\n            C -= 1\n            count += 1\n            C = max(0, C)\n        elif count == D:\n            D -= 1\n            count += 1\n            D = max(0, D)\n        else:\n            count += 1\n    if A + B + C + D == 0:\n        return \"Yes\"\n    if A + B + C + D > 0:\n        return \"No\"\n    return \"No\"\n"
    },
    {
        "number": 4312,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # write your code here\n    A, B, C, D = map(int, stdin.split())\n    if A < 0 or B < 0 or C < 0 or D < 0:\n        return 'No'\n    if A >= 10 or B >= 10 or C >= 10 or D >= 10:\n        return 'No'\n    answer = 'Yes'\n    A += 2\n    B += 2\n    C += 2\n    D += 2\n    A = min(A, 10 - A)\n    B = min(B, 10 - B)\n    C = min(C, 10 - C)\n    D = min(D, 10 - D)\n    while A >= 10 or B >= 10 or C >= 10 or D >= 10:\n        if A >= 10 or B >= 10 or C >= 10 or D >= 10:\n            A -= 2\n            B -= 2\n            C -= 2\n            D -= 2\n        A = max(A, 10 - A)\n        B = max(B, 10 - B)\n        C = max(C, 10 - C)\n        D = max(D, 10 - D)\n    return answer"
    },
    {
        "number": 4312,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    from collections import deque\n    from itertools import permutations\n    n, m, k = map(int, stdin.split())\n    a, b, c, d = [], [], [], []\n    for i in range(n):\n        for j in range(m):\n            if i == 0:\n                a.append(j)\n            if i == n-1:\n                b.append(j)\n            if i == m-1:\n                c.append(j)\n            if i == 0:\n                d.append(j)\n    turn = 0\n    while turn < k:\n        for i in permutations(a, len(a)):\n            for j in permutations(b, len(b)):\n                for k in permutations(c, len(c)):\n                    for l in permutations(d, len(d)):\n                        if i == i[:len(i)] + i[len(i):] and j == j[:len(j)] + j[len(j):] and k == k[:len(k)] + k[len(k):] and l == l[:len(l)] + l[len(l):]:\n                            print(1)\n                            return 'Yes'\n                        if i == i[:len(i)] + i[len(i):] and j == j[:len(j)] + j[len(j):] and k == k[:len(k)] + k[len(k):] and l == l[:len(l)] + l[len(l):]:\n                            print(0)\n                            return 'No'\n        turn += 1\n    return 'No'\n\nprint(solution(input()))"
    },
    {
        "number": 4312,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    if A > B and A > C and A > D:\n        print(\"Yes\")\n    elif A < B and A < C and A < D:\n        print(\"No\")\n    else:\n        print(\"No\")\n    return \"\"\n\n-----Constraints-----\n - 1 \\leq A,B,C,D \\leq 100\n - All values in input are integers.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nA B C D\n\n-----Output-----\nIf Takahashi will win, print Yes; if he will lose, print No.\n\n-----Sample Input-----\n10 10 10 10\n\n-----Sample Output-----\nNo\n\nFirst, Takahashi's monster attacks Aoki's monster, whose health is now 10-9=1.\nNext, Aoki's monster attacks Takahashi's monster, whose health is now 10-10=0.\nTakahashi's monster is the first to have 0 or less health, so Takahashi loses.\ndef"
    },
    {
        "number": 4312,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    if A <= 0 or B <= 0 or C <= 0 or D <= 0:\n        return \"No\"\n    if A + B + C + D <= 100:\n        return \"Yes\"\n    if A == 0:\n        if C + D == 0:\n            return \"No\"\n        return \"No\"\n    return \"No\"\n"
    },
    {
        "number": 4312,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    while A + B + C + D!= 100:\n        A -= 1\n        B -= 1\n        C -= 1\n        D -= 1\n    if A + B + C + D > 0:\n        return \"No\"\n    else:\n        return \"Yes\"\n\ndef"
    },
    {
        "number": 4313,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, C = map(int, stdin.split())\n    V = list(map(int, stdin.split()))\n    V.sort()\n    X = sum(V)\n    Y = 0\n    for i in range(N):\n        if V[i] >= X:\n            X = X - V[i]\n            Y = V[i] + Y\n        elif C >= V[i]:\n            C = C - V[i]\n            Y = V[i] + Y\n    return str(X+Y)"
    },
    {
        "number": 4313,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    C = int(stdin.split()[0])\n    V = int(stdin.split()[1])\n    n = int(stdin.split()[2])\n    X = sum(V)\n    for i in range(0, n):\n        C = C + V[i]\n    for j in range(n, 0, -1):\n        X -= V[j]\n    print(X)\n    return str(X)\n\nprint(solution(\"2 3 4 2\"))\n"
    },
    {
        "number": 4313,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, C = [int(i) for i in stdin.split()]\n    gem = [int(i) for i in stdin.split()]\n    \n    def solve(r, c, w, s, d):\n        if r < 0 or r >= N or c < 0 or c >= N or r!= r or c!= c:\n            return 0\n        \n        if w < C_min or w > C_max:\n            return 0\n        \n        if s < 0 or s > s_max or d < 0 or d > d_max or gem[r][c]!= 0:\n            return 0\n        \n        gem[r][c] = w\n        res = solve(r - 1, c, w + gem[r][c], s + gem[r][c], d)\n        gem[r][c] = 0\n        return res\n    \n    return solve(0, 0, 0, 0, 0)\n\"\"\""
    },
    {
        "number": 4313,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n    s,t = map(int, stdin.split())\n    #print(s,t)\n    \n    result = [0] * (t+1)\n    #print(result)\n    #print(t)\n    \n    result[0] = s\n    \n    for i in range(1,t+1):\n        result[i] = result[i-1] + s\n        #print(result[i])\n    \n    #print(result)\n    \n    return max(result)\n\"\"\"\n"
    },
    {
        "number": 4313,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N,C,V = [int(s) for s in stdin.split()]\n    \n    G = []\n    for _ in range(N):\n        G.append(list(map(int, input().split())))\n    \n    X = 0\n    Y = 0\n    \n    for i in range(N):\n        for j in range(N):\n            X += G[i][j]\n        \n        for k in range(N):\n            Y += C[k]\n        \n        if X < Y:\n            X = Y\n        \n        Y = 0\n    \n    return str(X-Y)\n\n-----Test-----\nInput:\n3\n10 2 5\n6 3 4\n\nOutput:\n5\n\n-----Explaination-----\nsum(G[i][j] for i in range(N) for j in range(N)) = sum(C[k] for k in range(N)) + sum(C[k+1] for k in range(N-1))"
    },
    {
        "number": 4313,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    V = [int(i) for i in stdin.split()]\n    C = [int(i) for i in stdin.split()]\n    V_0 = V[0]\n    C_0 = C[0]\n    for i in range(1, N):\n        V[i] += V[i-1]\n        C[i] += C[i-1]\n    X = V[-1] + C[-1]\n    if X > X_0:\n        X = X - C_0\n    for i in range(N-2, -1, -1):\n        C[i] -= C[i+1]\n    X_0 = X\n    for i in range(N):\n        V[i] += C[i]\n    X = V[-1] + C[-1]\n    if X > X_0:\n        X = X - C_0\n    for i in range(N-2, -1, -1):\n        C[i] -= C[i+1]\n    X_0 = X\n    for i in range(N-1):\n        V[i] -= V[i+1]\n        C[i] -= C[i+1]\n    X = V[-1] + C[-1]\n    if X > X_0:\n        X = X - C_0\n    for i in range(N):\n        V[i] -= V[i+1]\n    X_0 = X\n    for i in range(N-1):\n        V[i] -= C[i+1]\n    X = V[-1] + C[-1]\n    if X > X_0:\n        X = X - C_0\n    for i in range(N-1):\n        V[i] -= V[i+1]\n    X_0 = X\n    for i in range(N-2):\n        C[i] -= C[i+1]\n    X_0 = X\n    for i in range(N-2, -1, -1):\n        C[i] -= C[i+1]\n    X_0 = X\n    for i in range(N-1):\n        V[i] -= C[i+1]\n    X = V[-1] + C[-1]\n    if X > X_0:\n        X = X - C_0\n    for i in range(N):\n        V[i] -= V[i+1]\n    X_0 = X\n    for i in range(N-1):\n        C[i] -= C[i+1]\n    X_0 = X\n    for i in range(N-2):\n        V[i] -= C[i+1]\n    X = V[-1] + C[-1]\n    if X > X_0:\n        X = X - C_0\n    for i in range(N):\n        V[i] -= V[i+1]\n    X_0 = X\n    for i in range(N-1):\n        C[i] -= C[i+1]\n    X_0 = X\n    for i in range(N-2):\n        V[i] -= C[i+1]\n    X = V[-1] + C[-1]\n    if X > X_0:\n        X = X - C_0\n    for i in range(N):\n        V[i] -= V[i+1]\n    X_0 = X\n    for i in range(N-1):\n        C[i] -= C[i+1]\n    X_0 = X\n    for i in range(N-2):\n        V[i] -= C[i+1]\n    X = V[-1] + C[-1]\n    if X > X_0:\n        X = X - C_0\n    for i in range(N):\n        V[i] -= V[i+1]\n    X_0 = X\n    for i in range(N-1):\n        C[i] -= C[i+1]\n    X_0 = X\n    for i in range(N-2):\n        V[i] -= C[i+1]\n    X = V[-1] + C[-1]\n    if X > X_0:\n        X = X - C_0\n    for i in range(N):\n        V[i] -= V[i+1]\n    X_0 = X\n    for i in range(N-1):\n        C[i] -= C[i+1]\n    X_0 = X\n    for i in range(N-2):\n        V[i] -= C[i+1]\n    X = V[-1] + C[-1]\n    if X > X_0:\n        X = X - C_0\n    for i in range(N):\n        V[i] -= V[i+1]\n    X_0 = X\n    for i in range(N-1):\n        C[i] -= C[i+1]\n    X_0 = X\n    for i in range(N-2):\n        V[i] -= C[i+1]\n    X = V[-1] + C[-1]\n    if X > X_0:\n        X = X - C_0\n    for i in range(N):\n        V[i] -= V[i+1]\n    X_0 = X\n    for i in range(N-1):\n        C[i] -= C[i+1]\n    X_0 = X\n    for i in range(N-2):\n        V[i] -= C[i+1]\n    X = V[-1] + C[-1]\n    if X > X_0:\n        X = X - C_0\n    for i in range(N):\n        V[i] -= V[i+1]\n    X_0 = X\n    for i in range(N-1):\n        C[i] -= C[i+1]\n    X_0 = X\n    for i in range(N-2):\n        V[i] -= C[i+1]\n    X = V[-1] + C[-1]\n    if X > X_0:\n        X = X - C_0\n    for i in range(N):\n        V[i] -= V[i+1]\n    X_0 = X\n    for i in range(N-1):\n        C[i] -= C[i+1]\n    X_0 = X\n    for i in range(N-2):\n        V[i] -= C[i+1]\n    X = V[-1] + C[-1]\n    if X > X_0:\n        X = X - C_0\n    for i in range(N):\n        V[i] -= V[i+1]\n    X_0 = X\n    for i in range(N-1):\n        C[i] -= C[i+1]\n    X_0 = X\n    for i in range(N-2):\n        V[i] -= C[i+1]\n    X = V[-1] + C[-1]\n    if X > X_0:\n        X = X - C_0\n    for i in range(N):\n        V[i] -= V[i+1]\n    X_0 = X\n    "
    },
    {
        "number": 4313,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    v = [int(x) for x in stdin.split()]\n    c = [int(x) for x in stdin.split()]\n    # print(v)\n    # print(c)\n    d = {}\n    for i in range(n):\n        d[v[i]] = c[i]\n        # print(d)\n    # print(d)\n    for i in range(n):\n        for j in range(n):\n            if v[j] + c[i] in d:\n                # print(v[j] + c[i])\n                d[v[j] + c[i]] -= 1\n                # print(d)\n                # print('j = ', j)\n    # print(d)\n    return str(max(d.values()))\n\nn = int(input())\nv = [int(x) for x in input().split()]\nc = [int(x) for x in input().split()]\nprint(solution(input()))\n"
    },
    {
        "number": 4313,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    gems = list(map(int, stdin.split()))\n    if n == 0 or m == 0 or k < 1 or k > n:\n        return \"Impossible\"\n    if n == 1:\n        return min(gems[0], gems[1])\n    \n    # first two gems\n    first_two_gems = [0] * (n + 1)\n    first_two_gems[0] = gems[0]\n    first_two_gems[1] = gems[1]\n    \n    # second to last gem\n    second_two_gems = [0] * (n + 1)\n    second_two_gems[0] = first_two_gems[0] + gems[2]\n    second_two_gems[1] = first_two_gems[1] + gems[3]\n    \n    # find the last to the last gem, if more than one then use the first two\n    last_gem_idx = n - 1\n    for i in range(2, n + 1):\n        last_gem_idx = i - 1\n        if second_two_gems[i] > first_two_gems[last_gem_idx]:\n            second_two_gems[i] = first_two_gems[last_gem_idx] + gems[i]\n        \n    # choose the second gem with the lowest value\n    second_gem_idx = 0\n    min_val = float(\"inf\")\n    for idx, val in enumerate(second_two_gems):\n        if val < min_val and idx >= second_gem_idx:\n            min_val = val\n            second_gem_idx = idx\n            \n    # if the second gem is the last and the min val is smaller than the first gem\n    # then the min val is the next gem\n    if second_gem_idx == n - 1 and min_val < second_two_gems[second_gem_idx]:\n        return min_val\n    else:\n        return solution(stdin)"
    },
    {
        "number": 4313,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, V = map(int, stdin.split())\n    C = [0] + list(map(int, stdin.split()))\n    answer = 0\n    for i in range(N):\n        if C[i] <= V:\n            answer = max(answer, C[i] - V)\n    return str(answer)"
    },
    {
        "number": 4313,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def count_edges(G, i):\n        count = 0\n        for j in G[i]:\n            if j!= i:\n                count += 1\n            elif j == i:\n                return count\n            else:\n                count += 1\n        return count\n    def calc(s, e):\n        if s == e:\n            return 0\n        return s - e + 1\n\n    def get_i_gems(i):\n        if i == 0:\n            return []\n        else:\n            return [i - 1] + get_i_gems(i - 1)\n\n    X, Y = map(int, stdin.split())\n    G = [[0 for _ in range(Y + 1)] for _ in range(X + 1)]\n    for i in range(X):\n        j = count_edges(G, i)\n        G[i][j] = 1\n    for i in range(X, X + Y):\n        j = count_edges(G, i)\n        G[i][j] = -1\n    for i in range(Y + 1):\n        j = count_edges(G, i)\n        G[i][j] = -1\n    return max(X,Y)\n\ndef"
    },
    {
        "number": 4314,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    h, w = map(int, stdin.split())\n    grid = []\n    for i in range(h):\n        row = []\n        for j in range(w):\n            if stdin[i * w + j] == '#':\n                row.append(1)\n            else:\n                row.append(0)\n        grid.append(row)\n    for row in grid:\n        print(''.join(str(r) for r in row))\n\"\"\"\n"
    },
    {
        "number": 4314,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # 1. find the solution for the grids\n    def find_solution(x, y, grid):\n        if grid[x][y] == \"#\":\n            return \"#\"\n        elif grid[x][y] == \".\":\n            return \".\"\n        else:\n            grid[x][y] = \".\"\n            for i in range(x, x + H):\n                for j in range(y, y + W):\n                    if 0 <= i < H and 0 <= j < W:\n                        if grid[i][j] == \"#\":\n                            grid[i][j] = \".\"\n                        else:\n                            grid[i][j] = find_solution(x, y, grid)\n            return grid[x][y]\n    \n    # 2. solve for the solutions\n    def solve(grid):\n        for i in range(1, H):\n            for j in range(1, W):\n                if grid[i][j] == \"#\":\n                    continue\n                elif grid[i][j] == \".\":\n                    continue\n                elif grid[i][j] == \".\":\n                    return\n                else:\n                    grid[i][j] = find_solution(i, j, grid)\n        return \".\"\n    \n    # 3. return solution\n    return solve(grid)\n\n\nExample 1:\nInput: H = 4, W = 4, grid = [[#,#,#,#,#],\n                           [#,#,#,#],\n                           [#,#,#,#],\n                           [#,#,#,#]]\nOutput: \"#\"\nExplanation:\n4 rows, 4 columns, a_{4, 4} = \"#\".\n4 rows, 4 columns, a_{4, 4} = \"#\".\n4 rows, 4 columns, a_{4, 4} = \".\"\n4 rows, 4 columns, a_{4, 4} = \".\"\n4 rows, 4 columns, a_{4, 4} = \"#\"\n4 rows, 4 columns, a_{4, 4} = \".\"\n4 rows, 4 columns, a_{4, 4} = \"#\"\n4 rows, 4 columns, a_{4, 4} = \".\"\n4 rows, 4 columns, a_{4, 4} = \"#\"\n4 rows, 4 columns, a_{4, 4} = \".\"\n4 rows, 4 columns, a_{4, 4} = \"#\"\n4 rows, 4 columns, a_{4, 4} = \".\"\n4 rows, 4 columns, a_{4, 4} = \".\"\n4 rows, 4 columns, a_{4, 4} = \".\"\n4 rows, 4 columns, a_{4, 4} = \"#\"\n4 rows, 4 columns, a_{4, 4} = \".\"\n4 rows, 4 columns, a_{4, 4} = \".\"\n4 rows, 4 columns, a_{4, 4} = \".\"\n4 rows, 4 columns, a_{4, 4} = \"#\"\n4 rows, 4 columns, a_{4, 4} = \".\"\n4 rows, 4 columns, a_{4, 4} = \"#\"\n4 rows, 4 columns, a_{4, 4} = \".\"\n4 rows, 4 columns, a_{4, 4} = \".\"\n4 rows, 4 columns, a_{4, 4} = \".\"\n4 rows, 4 columns, a_{4, 4} = \".\"\n4 rows, 4 columns, a_{4, 4} = \"#\"\n4 rows, 4 columns, a_{4, 4} = \".\"\n4 rows, 4 columns, a_{4, 4} = \".\"\n4 rows, 4 columns, a_{4, 4} = \".\"\n4 rows, 4 columns, a_{4, 4} = \".\"\n4 rows, 4 columns, a_{4, 4} = \"#\"\n4 rows, 4 columns, a_{4, 4} = \".\"\n4 rows, 4 columns, a_{4, 4} = \".\"\n4 rows, 4 columns, a_{4, 4} = \"#\"\n4 rows, 4 columns, a_{4, 4} = \".\"\n4 rows, 4 columns, a_{4, 4} = \".\"\n4 rows, 4 columns, a_{4, 4} = \".\"\n4 rows, 4 columns, a_{4, 4} = \"#\"\n4 rows, 4 columns, a_{4, 4} = \".\"\n4 rows, 4 columns, a_{4, 4} = \".\"\n4 rows, 4 columns, a_{4, 4} = \".\"\n4 rows, 4 columns, a_{4, 4} = \".\"\n4 rows, 4 columns, a_{4, 4} = \".\"\n4 rows, 4 columns, a_{4, 4} = \".\"\n4 rows, 4 columns, a_{4, 4} = \"#\"\n4 rows, 4 columns, a_{4, 4} = \".\"\n4 rows, 4 columns, a_{4, 4} = \".\"\n4 rows, 4 columns, a_{4, 4} = \".\"\n4 rows, 4 columns, a_{4, 4} = \".\"\n4 rows, 4 columns, a_{4, 4} = \".\"\n4 rows, 4 columns, a_{4, 4} = \".\"\n4 rows, 4 columns, a_{4, 4} = \"#\"\n4 rows, 4 columns, a_{4, 4} = \".\"\n4 rows, 4 columns, a_{4, 4} = \".\"\n4 rows, 4 columns, a_{4, 4} = \".\"\n4 rows, 4 columns, a_{4, 4} = \".\"\n4 rows, 4 columns, a_{4, 4} = \".\"\n4 rows, 4 columns, a_{4, 4} = \".\"\n4 rows, 4 columns, a_{4, 4} = \".\"\n4 rows, 4 columns, a_{4, 4} = \"#\"\n4 rows, 4 columns, a_{4, 4} = \".\"\n4 rows, 4 columns, a_{4, 4} = \".\"\n4 rows, 4 columns, a_{4, 4} = \"#\"\n4 rows, 4 columns, a_{4, 4} = \".\"\n4 rows, 4 columns, a_{4, 4} = \".\"\n4 rows, 4 columns, a_{4, 4} = \"#\"\n4 rows, 4 columns, a_{4, 4} = \".\"\n4 rows, 4 columns, a_{4, 4} = \".\"\n4 rows, 4 columns, a_{4, 4} = \".\"\n4 rows, 4 columns, a_{4, 4} = \".\"\n4 rows, 4 columns, a_{4, 4} = \".\"\n4 rows, 4 columns, a_{4, 4} = \".\"\n4 rows, 4 columns, a_{4, 4} = \".\"\n4 rows, 4 columns, a_{4, 4} = \"#\"\n4 rows, 4 columns, a_{4, 4} = \".\"\n4 rows, 4 columns, a_{4, 4} = \".\"\n4 rows, 4 columns, a_{4, 4} = \".\"\n4 rows, 4 columns, a_{4, 4} = \".\"\n4 rows, 4 columns, a_{4,"
    },
    {
        "number": 4314,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def uniq(seq):\n        seen = set()\n        for el in seq:\n            if el not in seen:\n                seen.add(el)\n            else:\n                seen.discard(el)\n        return seen\n\n    \n    H, W = map(int, stdin.split())\n    board = [list(map(str, input())) for _ in range(H)]\n    answer = \".\"\n    \n    # Checks if a spot is white or black.\n    white = uniq([*list(map(lambda x: \"#\" if x == \"#\" else \".\", row)) for row in board])\n    black = uniq([*list(map(lambda x: \"#\" if x == \"#\" else \".\", row)) for row in board if not row])\n    \n    # Remove black spaces, the board is already unbalanced\n    white.remove(\".\")\n    black.remove(\".\")\n    \n    # Compress the board to a grid of white and black squares\n    white_rows = [white[i] for i in range(len(white))]\n    black_rows = [black[i] for i in range(len(black))]\n    \n    # Remove all white or black spaces\n    white_cols = [white[i] for i in range(len(white[0]))]\n    black_cols = [black[i] for i in range(len(black[0]))]\n    \n    # Remove white spaces from both sides\n    white_rows[0] = white_rows[0][1:]\n    black_rows[0] = black_rows[0][1:]\n    white_cols[0] = white_cols[0][1:]\n    black_cols[0] = black_cols[0][1:]\n    \n    # Remove all white spaces from the middle\n    white_rows[len(white_rows)//2] = white_rows[len(white_rows)//2][1:]\n    black_rows[len(black_rows)//2] = black_rows[len(black_rows)//2][1:]\n    white_cols[len(white_cols)//2] = white_cols[len(white_cols)//2][1:]\n    black_cols[len(black_cols)//2] = black_cols[len(black_cols)//2][1:]\n    \n    # Check if both the rows and columns are unbalanced\n    def is_unbalanced(rows, cols):\n        return (rows*2 + cols) % 2!= 0\n    \n    for r in range(H):\n        for c in range(W):\n            if board[r][c] == \".\":\n                board[r][c] = \".\"\n            elif board[r][c] == \"#\":\n                if is_unbalanced(white_rows[r], black_rows[r]):\n                    board[r][c] = \".\"\n                elif is_unbalanced(white_cols[r], black_cols[r]):\n                    board[r][c] = \".\"\n                else:\n                    board[r][c] = \"#\"\n    for c in range(W):\n        for r in range(H):\n            if board[r][c] == \".\":\n                board[r][c] = \".\"\n            elif board[r][c] == \"#\":\n                if is_unbalanced(white_rows[r], black_rows[r]):\n                    board[r][c] = \"#\"\n                elif is_unbalanced(white_cols[r], black_cols[r]):\n                    board[r][c] = \".\"\n                else:\n                    board[r][c] = \".\"\n    for r in range(H):\n        for c in range(W):\n            if board[r][c] == \"#\":\n                board[r][c] = \"#\"\n            else:\n                board[r][c] = \".\"\n    \n    return answer\n\n\nprint(solution(\"..#.###\"))\nprint(solution(\"#.#.#..#..#..#.\"))\nprint(solution(\"#.##..#..#..#.\"))\nprint(solution(\"#.#.#..#..#..#.\"))\nprint(solution(\"#.###.###.#.\"))\nprint(solution(\"..#.#..#..#..#.\"))\nprint(solution(\"#.#.##.###.##\"))\nprint(solution(\"#.#.######.###\"))\nprint(solution(\"##.####...#.\"))\nprint(solution(\"###..###..#.\"))\nprint(solution(\"#.##.#....##.\"))\nprint(solution(\"#.######.##.\"))\n"
    },
    {
        "number": 4314,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    grid = []\n    for _ in range(int(stdin)):\n        grid.append([c for c in stdin[:-1]])\n    return \"\".join(\"\".join(row) for row in grid)\n"
    },
    {
        "number": 4314,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.split())\n    grid = []\n    for _ in range(H):\n        line = list(stdin.split())\n        for _ in range(W):\n            grid.append(line.pop())\n    for i in range(H-2):\n        for j in range(W-2):\n            if grid[i][j] == '.':\n                for k in range(2):\n                    if i + k < H and j + k < W:\n                        grid[i + k][j + k] = '.'\n            if grid[i][j] == '.':\n                for k in range(2):\n                    if i + k < H and j - k >= 0:\n                        grid[i + k][j - k] = '.'\n    for i in range(H-2):\n        for j in range(W-2):\n            if grid[i][j] == '.':\n                for k in range(2):\n                    if i - k >= 0 and j + k < W:\n                        grid[i - k][j + k] = '.'\n    for i in range(H-2):\n        for j in range(W-2):\n            if grid[i][j] == '.':\n                for k in range(2):\n                    if i - k >= 0 and j - k >= 0:\n                        grid[i - k][j - k] = '.'\n    for i in range(H-2):\n        for j in range(W-2):\n            if grid[i][j] == '.':\n                for k in range(2):\n                    if i + k < H and j + k < W:\n                        grid[i + k][j + k] = '#'\n    return '\\n'.join(grid)\n\nprint(solution(stdin))"
    },
    {
        "number": 4314,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, H, W = map(int, stdin.split())\n    a = [[0 for j in range(W)] for i in range(H)]\n    for j in range(W):\n        for i in range(H):\n            if stdin[i][j] == \"#\":\n                a[i][j] = \"#\"\n            elif stdin[i][j] == \".\":\n                a[i][j] = \".\"\n            else:\n                a[i][j] = \"#\"\n    for i in range(H-2):\n        for j in range(W-2):\n            a[i+1][j+1] = a[i][j]\n            a[i+1][j+1] = a[i][j]\n            a[i+1][j+1] = a[i][j]\n    for i in range(H-2):\n        for j in range(W-2):\n            a[i+1][j+1] = a[i][j]\n            a[i+1][j+1] = a[i][j]\n            a[i+1][j+1] = a[i][j]\n    for i in range(H-2):\n        for j in range(W-2):\n            a[i+1][j+1] = a[i][j]\n            a[i+1][j+1] = a[i][j]\n            a[i+1][j+1] = a[i][j]\n    for i in range(H-2):\n        for j in range(W-2):\n            a[i+1][j+1] = a[i][j]\n            a[i+1][j+1] = a[i][j]\n            a[i+1][j+1] = a[i][j]\n    for i in range(H-2):\n        for j in range(W-2):\n            a[i+1][j+1] = a[i][j]\n            a[i+1][j+1] = a[i][j]\n            a[i+1][j+1] = a[i][j]\n    for i in range(H-2):\n        for j in range(W-2):\n            a[i+1][j+1] = a[i][j]\n            a[i+1][j+1] = a[i][j]\n            a[i+1][j+1] = a[i][j]\n    a = [\"\".join(i) for i in a]\n    return \"\".join(a)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4314,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    row, col = map(int, stdin.split())\n    mat = []\n    for i in range(row):\n        tmp = []\n        for j in range(col):\n            tmp.append(0)\n        mat.append(tmp)\n    for i in range(row):\n        for j in range(col):\n            mat[i][j] = int(stdin[i*col+j])\n    answer = []\n    for i in range(row-1):\n        answer.append(mat[i][col-1])\n        answer.append(mat[i+1][col-1])\n    answer.append(mat[row-1][0])\n    return ''.join(answer)\n"
    },
    {
        "number": 4314,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def find_row_col(a, i, j):\n        while i!= 0 or j!= 0:\n            if (i % 2 == 0 and j % 2 == 0):\n                i -= 1\n                j -= 1\n            else:\n                i += 1\n                j += 1\n        return a[i][j]\n    \n    def find_row_col_num(a, i, j):\n        return int(find_row_col(a, i, j)!= '.')\n    \n    def check(a, row, col):\n        if 0 <= row < H and 0 <= col < W:\n            return a[row][col] == '#'\n        return False\n    \n    H, W = map(int, stdin.split())\n    a = [list(input()) for _ in range(H)]\n    # a = [input() for _ in range(H)]\n    result = ''\n    for i in range(H):\n        for j in range(W):\n            if check(a, i, j):\n                result += find_row_col_num(a, i, j)\n                result +=''\n    print(result)\n    return result\n"
    },
    {
        "number": 4314,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    # 0-indexed\n    g = []\n    for i in range(n):\n        g.append(list(map(int, list(stdin[i*m:(i+1)*m]))))\n    # convert to color as a matrix\n    c = [list(map(int, list(map(str, s)))) for s in g]\n    # take the maximum value for each row\n    # otherwise, take the max value for each column\n    max_val = [max(max(i) for i in col) for col in c]\n    # convert the matrix to a string\n    grid = ''\n    for i in range(n):\n        for j in range(m):\n            grid += ''.join([str(s) for s in c[i][j]]) +''\n        grid += '\\n'\n    return grid.rstrip()\n"
    },
    {
        "number": 4314,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    grid = [list(map(str, input().split())) for _ in range(N)]\n    for row in range(N):\n        for col in range(N):\n            if grid[row][col] == '.':\n                continue\n            elif grid[row][col] == '#':\n                grid[row][col] = '.'\n    grid = [''.join(row) for row in grid]\n    for row in range(N):\n        for col in range(N):\n            if grid[row][col]!= '.':\n                grid[row][col] = grid[row][col].replace('.', '#')\n                grid[row][col] = grid[row][col].replace('#', '.')\n    return '\\n'.join(grid)\n"
    },
    {
        "number": 4315,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def find_int(s):\n        for i in s:\n            if i.isnumeric():\n                return i\n    \n    def calculate_circumference(R: int):\n        return round(3.14 * (R ** 2))\n    \n    def get_absolute_error_1():\n        if len(stdin) < 1:\n            return 10 ** -2\n        return round(abs(calculate_circumference(int(stdin[1:])) - calculate_circumference(int(stdin[1:]))))\n    \n    def get_absolute_error_2():\n        if len(stdin) < 2:\n            return 10 ** -2\n        return round(abs(find_int(stdin[1:]) - find_int(stdin[1:])) / find_int(stdin[1:]) * 100)\n    \n    def get_absolute_error_3():\n        if len(stdin) < 3:\n            return 10 ** -2\n        return round(abs(find_int(stdin[2:]) - find_int(stdin[2:])) / find_int(stdin[2:]) * 100)\n    \n    def get_absolute_error_4():\n        if len(stdin) < 4:\n            return 10 ** -2\n        return round(abs(find_int(stdin[3:]) - find_int(stdin[3:])) / find_int(stdin[3:]) * 100)\n    \n    return str(get_absolute_error_1() + get_absolute_error_2() + get_absolute_error_3() + get_absolute_error_4())\n\n-----Constraints-----\n - 1 \\leq R \\leq 100\n - No returns.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nR\n\n-----Output-----\nPrint the circumference of the circle.\nYour output is considered correct if and only if its absolute or relative error from our answer is at most 10^{-2}.\n\n-----Sample Input-----\n1\n\n-----Sample Output-----\n6.28318530717958623200\n\nSince we accept an absolute or relative error of at most 10^{-2}, 6.28 is also an acceptable output, but 6 is not.\ndef"
    },
    {
        "number": 4315,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\ndef"
    },
    {
        "number": 4315,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    import math\n    answer = 0\n    for i in range(len(stdin)):\n        answer += math.pow(10, i) * math.pow(2, i)\n    print(answer)\n    return str(answer)\n"
    },
    {
        "number": 4315,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(math.ceil(math.sqrt(2 * math.pi * float(stdin))))\n"
    },
    {
        "number": 4315,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return str(abs(int(stdin.strip())))[-2:]\n\n----Code-----\ndef"
    },
    {
        "number": 4315,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return str(abs(int(str(int(stdin)**(1/2))[:-1])))\n"
    },
    {
        "number": 4315,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    print(abs(c) - r*r)\n    return '{:.10f}'.format(c)\n\ndef"
    },
    {
        "number": 4315,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n  return str(abs(int(stdin))) + '.'\n"
    },
    {
        "number": 4315,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    print(abs(sum([abs(int(i)) for i in stdin.split()])/3 - int(stdin.split()[0])))\n    return '\u221a'\n"
    },
    {
        "number": 4315,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A = list(map(int, stdin.split()))\n    ans = A[-1]\n    for i in range(len(A)-2,-1,-1):\n        a = A[i]\n        b = A[i+1]\n        ans = (ans+a*b)%1000000007\n    return str(ans)"
    },
    {
        "number": 4316,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    S = stdin.strip()\n    S = S.upper()\n    S = S.replace('A', '2')\n    S = S.replace('S', '3')\n    S = S.replace('a', '2')\n    S = S.replace('s', '3')\n    S = S.replace('i', '1')\n    S = S.replace('s', '1')\n    S = S.replace('t', '4')\n    S = S.replace('e', '1')\n    S = S.replace('a', '1')\n    S = S.replace('r', '2')\n    S = S.replace('e', '3')\n    S = S.replace('a', '3')\n    S = S.replace('i', '4')\n    S = S.replace('s', '4')\n    S = S.replace('t', '5')\n    S = S.replace('e', '4')\n    S = S.replace('a', '5')\n    S = S.replace('r', '6')\n    S = S.replace('e', '5')\n    S = S.replace('i', '6')\n    S = S.replace('e', '6')\n    S = S.replace('a', '6')\n    S = S.replace('i', '7')\n    S = S.replace('s', '7')\n    S = S.replace('t', '8')\n    S = S.replace('e', '8')\n    S = S.replace('a', '8')\n    S = S.replace('r', '9')\n    S = S.replace('e', '9')\n    S = S.replace('i', '9')\n    S = S.replace('s', '9')\n    S = S.replace('t', '10')\n    S = S.replace('e', '10')\n    S = S.replace('a', '10')\n    S = S.replace('i', '11')\n    S = S.replace('s', '11')\n    S = S.replace('t', '12')\n    S = S.replace('e', '12')\n    S = S.replace('a', '12')\n    S = S.replace('r', '13')\n    S = S.replace('e', '13')\n    S = S.replace('i', '13')\n    S = S.replace('s', '13')\n    S = S.replace('t', '14')\n    S = S.replace('e', '14')\n    S = S.replace('a', '14')\n    S = S.replace('r', '15')\n    S = S.replace('e', '15')\n    S = S.replace('i', '15')\n    S = S.replace('s', '15')\n    S = S.replace('t', '16')\n    S = S.replace('e', '16')\n    S = S.replace('a', '16')\n    S = S.replace('r', '17')\n    S = S.replace('e', '17')\n    S = S.replace('i', '17')\n    S = S.replace('s', '17')\n    S = S.replace('t', '18')\n    S = S.replace('e', '18')\n    S = S.replace('a', '18')\n    S = S.replace('r', '19')\n    S = S.replace('e', '19')\n    S = S.replace('i', '19')\n    S = S.replace('s', '19')\n    S = S.replace('t', '20')\n    S = S.replace('e', '20')\n    S = S.replace('a', '20')\n    S = S.replace('r', '21')\n    S = S.replace('e', '21')\n    S = S.replace('i', '21')\n    S = S.replace('s', '21')\n    S = S.replace('t', '22')\n    S = S.replace('e', '22')\n    S = S.replace('a', '22')\n    S = S.replace('r', '23')\n    S = S.replace('e', '23')\n    S = S.replace('i', '23')\n    S = S.replace('s', '23')\n    S = S.replace('t', '24')\n    S = S.replace('e', '24')\n    S = S.replace('a', '24')\n    S = S.replace('r', '25')\n    S = S.replace('e', '25')\n    S = S.replace('i', '25')\n    S = S.replace('s', '25')\n    S = S.replace('t', '26')\n    S = S.replace('e', '26')\n    S = S.replace('a', '26')\n    S = S.replace('r', '27')\n    S = S.replace('e', '27')\n    S = S.replace('i', '27')\n    S = S.replace('s', '27')\n    S = S.replace('t', '28')\n    S = S.replace('e', '28')\n    S = S.replace('a', '28')\n    S = S.replace('r', '29')\n    S = S.replace('e', '29')\n    S = S.replace('i', '29')\n    S = S.replace('s', '29')\n    S = S.replace('t', '30')\n    S = S.replace('e', '30')\n    S = S.replace('a', '30')\n    S = S.replace('r', '31')\n    S = S.replace('e', '31')\n    S = S.replace('i', '31')\n    S = S.replace('s', '31')\n    S = S.replace('t', '32')\n    S = S.replace('e', '32')\n    S = S.replace('a', '32')\n    S = S.replace('r', '33')\n    S = S.replace('e', '33')\n    S = S.replace('i', '33')\n    S = S.replace('s', '33')\n    S = S.replace('t', '34')\n    S = S.replace('e', '34')\n    S = S.replace('a', '34')\n    S = S.replace('r', '35')\n    S = S.replace('e', '35')\n    S = S.replace('i', '35')\n    S = S.replace('s', '35')\n    S = S.replace('t', '36')\n    S = S.replace('e', '36')\n    S = S.replace('a', '36')\n    S = S.replace('r', '37')\n    S = S.replace('e', '37')\n    S = S.replace('i', '37')\n    S = S.replace('s', '37')\n    S = S.replace('t', '38')\n    S = S.replace('e', '38')\n    S = S.replace('a', '38')\n    S = S.replace('r', '39')\n    S = S.replace('e', '39')\n    S = S.replace('i', '39')\n    S = S.replace('s', '39')\n    S = S.replace('t', '40')\n    S = S.replace('e', '40')\n    S = S.replace('a', '40')\n    S = S.replace('r', '41')\n    S = S.replace('e', '41')\n    S = S.replace('i', '41')\n    S = S.replace('s', '41')\n    S = S.replace('t', '42')\n    S = S.replace('e', '42')\n    S = S.replace('a', '42')"
    },
    {
        "number": 4316,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    L = list(stdin)\n    for i in range(len(L)):\n        if L.count(L[i]) == 2:\n            return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4316,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def is_character(c):\n        return c in ['A', 'a'] and c in ['A','s']\n    def is_two_character(c):\n        return c in ['A','s']\n\n    def is_valid(s):\n        counter = 0\n        for i in range(len(s) - 1):\n            if is_character(s[i]):\n                counter += 1\n            if is_character(s[i]):\n                counter -= 1\n            if counter == 2:\n                return True\n        return False\n    \n    for s in stdin:\n        if is_valid(s):\n            print(\"Yes\")\n        else:\n            print(\"No\")\n"
    },
    {
        "number": 4316,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n  upper = set(map(chr, range(65, 91)))\n  lower = set(map(chr, range(97, 123)))\n  for line in stdin:\n    if 'A' in line and 'S' in line:\n      if line[:2] in upper or line[:2] in lower:\n        print('Yes')\n      else:\n        print('No')\n    else:\n      print('Yes')\n  return ''\n\ndef"
    },
    {
        "number": 4316,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def my_solution(s):\n        cnt = 0\n        \n        for i in range(len(s)):\n            if s[i] == s[i - 1] and s[i] == s[i + 1]:\n                cnt += 1\n                \n        if cnt == 2:\n            return 'Yes'\n        \n        return 'No'\n    return my_solution(stdin)\n\"\"\"\n\n\nclass Solution:\n    def is_match(self, s, pattern):\n        if len(s) < len(pattern):\n            return False\n\n        i = len(s) - 1\n        j = 0\n        for c in pattern:\n            if s[i]!= c:\n                i -= 1\n            else:\n                i -= 1\n                j += 1\n                if i == 0:\n                    return False\n                \n        return j == len(pattern)\n\n    def is_match(self, s, pattern):\n        for i in range(len(pattern) - 1, -1, -1):\n            if s[i]!= pattern[i]:\n                return False\n            i -= 1\n        \n        return True\n"
    },
    {
        "number": 4316,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stds = sorted(list(set(stdin)))\n    count = 0\n    for s in stds:\n        if s in stds and stds.count(s) > 1:\n            count += 1\n    if count == len(stds) / 2:\n        print('Yes')\n    else:\n        print('No')\n"
    },
    {
        "number": 4316,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\"\n"
    },
    {
        "number": 4316,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    vowels = 'aeiou'\n    \n    dic = {}\n    for i in stdin:\n        if i in vowels:\n            dic[i] = dic.get(i,0) + 1\n    \n    for i in vowels:\n        if i in dic.keys():\n            if dic[i] == 2:\n                return \"Yes\"\n            elif dic[i] == 1:\n                return \"No\"\n            else:\n                return \"No\"\n    \n    return \"No\"\n"
    },
    {
        "number": 4316,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    S = input()\n    for i in range(len(S)):\n        if S[i]!= S[i+1]:\n            return 'No'\n    return 'Yes'\n\nprint(solution(\"ASASA\"))\nprint(solution(\"ASASAA\"))\nprint(solution(\"ASASAAASASASAS\"))\n\n\"\"\"\nLets call it with some very basic syntax, only for testing purposes.\n\n1. First, we want to create a function named `string_to_int_to_binary` that takes a string of binary characters, like the below:\n\nA\n\nB\n\nC\n\nD\n\nThe idea is to convert the string into a list of integers.\n\n2. Then, we call the function with the list and return it as a string.\n\n3. Lets now call the function again with the integer as an argument.\n\n4. Let's see what happens when `string_to_int_to_binary` is called with an int argument.\n\n5. Let's see what happens when `string_to_int_to_binary` is called with a string argument.\n\n6. Let's see what happens when `string_to_int_to_binary` is called with an empty string.\n\n7. Let's see what happens when `string_to_int_to_binary` is called with a string of an empty string.\n\n8. Let's see what happens when `string_to_int_to_binary` is called with a string of an empty string and a number as argument.\n\n9. Let's see what happens when `string_to_int_to_binary` is called with a string of a string of numbers and a number as argument.\n\n10. Let's see what happens when `string_to_int_to_binary` is called with a string of a string of numbers and a number as argument and a string as argument.\n\n11. Let's see what happens when `string_to_int_to_binary` is called with a string of a string of numbers and a number as argument, and a string as argument and a string as argument.\n\n12. Let's see what happens when `string_to_int_to_binary` is called with a string of a string of numbers and a number as argument, and a number as argument and a string as argument and a string as argument.\n\n13. Let's see what happens when `string_to_int_to_binary` is called with a string of a string of numbers and a number as argument and a number as argument and a string as argument, and a string as argument and a string as argument.\n\n14. Let's see what happens when `string_to_int_to_binary` is called with a string of a string of numbers and a number as argument and a number as argument and a string as argument, and a string as argument, and a number as argument and a string as argument.\n\n15. Let's see what happens when `string_to_int_to_binary` is called with a string of a string of numbers and a number as argument, and a number as argument and a string as argument, and a number as argument, and a number as argument, and a string as argument, and a string as argument.\n\n16. Let's see what happens when `string_to_int_to_binary` is called with a string of a string of numbers and a number as argument, and a number as argument and a string as argument, and a number as argument, and a number as argument, and a string as argument, and a string as argument.\n\n17. Let's see what happens when `string_to_int_to_binary` is called with a string of a string of numbers and a number as argument, and a number as argument, and a number as argument, and a number as argument, and a string as argument, and a string as argument.\n\n18. Let's see what happens when `string_to_int_to_binary` is called with a string of a string of numbers and a number as argument, and a number as argument, and a number as argument, and a number as argument, and a string as argument, and a string as argument, and a number as argument.\n\n19. Let's see what happens when `string_to_int_to_binary` is called with a string of a string of numbers and a number as argument, and a number as argument, and a number as argument, and a number as argument, and a number as argument, and a string as argument, and a number as argument.\n\n20. Let's see what happens when `string_to_int_to_binary` is called with a string of a string of numbers and a number as argument, and a number as argument, and a number as argument, and a number as argument, and a number as argument, and a string as argument, and a number as argument.\n\n21. Let's see what happens when `string_to_int_to_binary` is called with a string of a string of numbers and a number as argument, and a number as argument, and a number as argument, and a number as argument, and a number as argument, and a string as argument, and a number as argument.\n\n22. Let's see what happens when `string_to_int_to_binary` is called with a string of a string of numbers and a number as argument, and a number as argument, and a number as argument, and a number as argument, and a number as argument, and a number as argument, and a string as argument, and a number as argument.\n\n23. Let's see what happens when `string_to_int_to_binary` is called with a string of a string of numbers and a number as argument, and a number as argument, and a number as argument, and a number as argument, and a number as argument, and a number as argument, and a string as argument, and a number as argument.\n\n24. Let's see what happens when `string_to_int_to_binary` is called with a string of a string of numbers and a number as argument, and a number as argument, and a number as argument, and a number as argument, and a number as argument, and a string as argument, and a number as argument.\n\n25. Let's see what happens when `string_to_int_to_binary` is called with a string of a string of numbers and a number as argument, and a number as argument, and a number as argument, and a number as argument, and a number as argument, and a string as argument, and a number as argument.\n\n26. Let's see what happens when `string_to_int_to_binary` is called with a string of a string of numbers and a number as argument, and a number as argument, and a number as argument, and a number as argument, and a number as argument, and a string as argument, and a number as argument.\n\n27. Let's see what happens when `string_to_int_to_binary` is called with a string of a string of numbers and a number as argument, and a number as argument, and a number as argument, and a number as argument, and a number as argument, and a string as argument, and a number as argument.\n\n28. Let's see what happens when `string_to_int_to_binary` is called with a string of a string of numbers and a number as argument, and a number as argument, and a number as argument, and a number as argument, and a number as argument, and a string as argument, and a number as argument.\n\n29. Let's see what happens when `string_to_int_to_binary` is called with a string of a string of numbers and a number as argument, and a number as argument, and a number as argument, and a number as argument, and a number as argument, and a string as argument, and a number as argument.\n\n30. Let's see what happens when `string_to_int_to_binary` is called with a string of a string of numbers and a number as argument, and a number as argument, and a number as argument, and a number as argument, and a number as argument, and a string as argument, and a number as argument.\n\n31. Let's see what happens when `string_to_int_to_binary` is called with a string of a string of numbers and a number as argument, and a number as argument, and a number as argument, and a number as argument, and a number as argument, and a string as argument, and"
    },
    {
        "number": 4316,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = list(stdin)\n    if not s:\n        return \"NO\"\n    \n    for i in range(len(s)):\n        if s[i] == s[i-1] and s[i] in s[i+1:]:\n            return \"NO\"\n    \n    return \"YES\"\n'''\n\ndef"
    },
    {
        "number": 4317,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    # print(a, b)\n    return f'{-a - b:+d}'\n\n-----Sample Input-----\n3 2\n2 3\n3 5\n-----Sample Output-----\n-3\n\nThe largest number among A + B = -3, A - B = -2, and A \\times B = -5 is -2.\ndef"
    },
    {
        "number": 4317,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n        maxV = -100\n        s = ''\n        for i in range(len(stdin)):\n            if stdin[i] == \" \":\n                break\n            if stdin[i] == \"+\":\n                v = int(stdin[i+1])\n                if v > maxV:\n                    maxV = v\n            elif stdin[i] == \"-\":\n                v = int(stdin[i+1])\n                if v < maxV:\n                    maxV = v\n            else:\n                v = int(stdin[i+1])\n                if v > maxV:\n                    maxV = v\n        s += str(maxV)\n        return s\n\"\"\"\n"
    },
    {
        "number": 4317,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split(' '))\n    print(max(A + B, A - B, A * B))\n    return str(max(A + B, A - B, A * B))\n'''\n\ndef"
    },
    {
        "number": 4317,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    A, B = map(int, stdin.split())\n    \n    print(A + B)\n    print(A - B)\n    print(A * B)\n    \n    return str(max(A, B))\n    \n"
    },
    {
        "number": 4317,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n        for _ in range(len(stdin)):\n            A, B = stdin[:len(stdin) - 1].split()\n            A, B = int(A), int(B)\n            # print(A, B)\n            if A < 0 or B < 0:\n                return str(A) + str(B)\n            if A < B:\n                A, B = B, A\n            # print(A, B)\n            A = A*B\n            # print(A)\n        return str(A)\n"
    },
    {
        "number": 4317,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n        return str(max(map(int, stdin.split())))"
    },
    {
        "number": 4317,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    number_list = list(map(int, stdin.split()))\n    number_list = [int(i) for i in number_list]\n    number_list = [x for x in number_list if x >= 0]\n    number_list = sorted(number_list)\n    sum_list = [i for i in number_list]\n    sum_list = sum(sum_list)\n    return str(sum_list)\n"
    },
    {
        "number": 4317,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    number = list(map(int, stdin.split()))\n    numbers = sorted(number)\n    for n in numbers:\n        if n % 2 == 0:\n            print(n + number[::-1])\n        else:\n            print(n - number[::-1])\n        \n\n-----Solution-----\n\ndef"
    },
    {
        "number": 4317,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    A = A+B\n    B = B-A\n    B = B*A\n    print(max(A, B))\n    return str(max(A, B))"
    },
    {
        "number": 4317,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    A, B = abs(A), abs(B)\n    return str(max(A + B, A - B, A * B))"
    },
    {
        "number": 4318,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin[0])\n    H_1 = int(stdin[1])\n    H_2 = int(stdin[2])\n    H_3 = int(stdin[3])\n    H = max(H_1, H_2, H_3)\n    if H >= H_1 and H >= H_2 and H >= H_3:\n        print(N - H + 1)\n    else:\n        print(N - H)\n"
    },
    {
        "number": 4318,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def solve(N: int, h_1: int, h_2: int, h_3: int, h_4: int) -> str:\n        if N == 1:\n            if h_1 <= h_2 <= h_3:\n                return '1'\n            if h_1 <= h_3 <= h_2:\n                return '2'\n            if h_1 <= h_3 <= h_4:\n                return '3'\n            if h_1 <= h_4 <= h_2:\n                return '4'\n        if N == 2:\n            if h_1 <= h_2 <= h_3:\n                return '2'\n            if h_1 <= h_3 <= h_2:\n                return '3'\n            if h_1 <= h_2 <= h_4:\n                return '4'\n        if N == 3:\n            if h_1 <= h_2 <= h_3:\n                return '3'\n            if h_1 <= h_2 <= h_4:\n                return '4'\n            if h_1 <= h_3 <= h_2:\n                return '2'\n            if h_1 <= h_3 <= h_4:\n                return '3'\n        if N == 4:\n            if h_1 <= h_2 <= h_3:\n                return '3'\n            if h_1 <= h_2 <= h_3:\n                return '4'\n            if h_1 <= h_3 <= h_4:\n                return '4'\n            if h_1 <= h_4 <= h_2:\n                return '4'\n            if h_1 <= h_4 <= h_3:\n                return '4'\n\n        print('Too chaotic')\n        return 'Too chaotic'\n\n    N = int(stdin.strip())\n    H_1, H_2, H_3, H_4 = map(int, stdin.strip().split(' '))\n    result = solve(N, H_1, H_2, H_3, H_4)\n    return result\n\nInput:\n4\n6 5 6 8\n\nOutput:\nToo chaotic\n\nExplanation:\nThe number of lands from the first i-th inn can't be larger than the ocean from the second i-th inn because the ocean can see the same number of inns in the third and fourth, but only the same number of inns.\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4318,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return 0\n    h = [0]*(n+1)\n    ans = 0\n    for i in range(1, n+1):\n        h[i] = i\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if i == j:\n                continue\n            if h[j] - h[i] < j - i:\n                h[j] = h[i]\n                ans += 1\n    return ans\n"
    },
    {
        "number": 4318,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    ans = 0\n    for i in range(2, n + 1):\n        ans += 2 * sum(range(1, int(i ** 0.5) + 1))\n    return str(ans)"
    },
    {
        "number": 4318,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, h = map(int, stdin.split())\n    return str(n*(n+1))+str(h)\n\n'''\ndef"
    },
    {
        "number": 4318,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    H_1, H_2, H_3 = map(int, stdin.split())\n    ocean = []\n    def H_s(i):\n        if H_i < H_1 + H_2:\n            return H_i\n        if H_i < H_3:\n            return H_i + i\n        return H_i + i + i\n    def H_s_l(i):\n        if H_i + i < H_3:\n            return H_i + i\n        return H_i + i + i + i\n    for _ in range(N):\n        H_i = int(input())\n        ocean.append((H_s(H_i - 1), H_i, H_s(H_i), H_s(H_i - 1), H_s(H_i + 1), H_s(H_i - 1 + H_s(H_i - 1))))\n    ans = 0\n    for ocean_i, ocean_tuple in enumerate(ocean):\n        for i in range(ocean_tuple[0] - 1):\n            if ocean_tuple[0] - i >= H_1 and ocean_tuple[0] - i <= H_3:\n                if ocean_tuple[1] - i >= H_1 and ocean_tuple[1] - i <= H_3:\n                    if ocean_tuple[2] - i >= H_1 and ocean_tuple[2] - i <= H_3:\n                        if ocean_tuple[3] - i >= H_1 and ocean_tuple[3] - i <= H_3:\n                            if ocean_tuple[4] - i >= H_1 and ocean_tuple[4] - i <= H_3:\n                                if ocean_tuple[5] - i >= H_1 and ocean_tuple[5] - i <= H_3:\n                                    ans += 1\n    return ans\n\nprint(solution(input()))\n"
    },
    {
        "number": 4318,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(set(map(int, (stdin.split())))) - 1)\n"
    },
    {
        "number": 4318,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    H_1 = int(stdin[0])\n    H_2 = int(stdin[1])\n    H_3 = int(stdin[2])\n    H_4 = int(stdin[3])\n    H_1 = max(H_1,H_2,H_3,H_4)\n    H_i = max(H_1,H_2)\n    H_j = max(H_1,H_3)\n    H_k = max(H_1,H_4)\n    H_i = max(H_1,H_2)\n    H_j = max(H_1,H_3)\n    H_k = max(H_1,H_4)\n    H_i = max(H_1,H_2)\n    H_j = max(H_1,H_3)\n    H_k = max(H_1,H_4)\n    H_i = max(H_1,H_2)\n    H_j = max(H_1,H_3)\n    H_k = max(H_1,H_4)\n    H_i = max(H_1,H_2)\n    H_j = max(H_1,H_3)\n    H_k = max(H_1,H_4)\n    H_i = max(H_1,H_2)\n    H_j = max(H_1,H_3)\n    H_k = max(H_1,H_4)\n    H_i = max(H_1,H_2)\n    H_j = max(H_1,H_3)\n    H_k = max(H_1,H_4)\n    H_j = max(H_1,H_2)\n    H_k = max(H_1,H_3)\n    H_i = max(H_1,H_2)\n    H_j = max(H_1,H_3)\n    H_k = max(H_1,H_4)\n    H_j = max(H_1,H_2)\n    H_k = max(H_1,H_3)\n    H_j = max(H_1,H_4)\n    H_k = max(H_1,H_2)\n    H_j = max(H_1,H_3)\n    H_k = max(H_1,H_4)\n    H_j = max(H_1,H_2)\n    H_k = max(H_1,H_3)\n    H_j = max(H_1,H_4)\n    H_k = max(H_1,H_2)\n    H_j = max(H_1,H_3)\n    H_k = max(H_1,H_4)\n    H_j = max(H_1,H_2)\n    H_k = max(H_1,H_3)\n    H_j = max(H_1,H_4)\n    H_k = max(H_1,H_2)\n    H_j = max(H_1,H_3)\n    H_k = max(H_1,H_4)\n    H_j = max(H_1,H_2)\n    H_k = max(H_1,H_3)\n    H_j = max(H_1,H_4)\n    H_k = max(H_1,H_2)\n    H_j = max(H_1,H_3)\n    H_k = max(H_1,H_4)\n    H_j = max(H_1,H_2)\n    H_k = max(H_1,H_3)\n    H_j = max(H_1,H_4)\n    H_k = max(H_1,H_2)\n    H_j = max(H_1,H_3)\n    H_k = max(H_1,H_4)\n    H_j = max(H_1,H_2)\n    H_k = max(H_1,H_3)\n    H_j = max(H_1,H_4)\n    H_k = max(H_1,H_2)\n    H_j = max(H_1,H_3)\n    H_k = max(H_1,H_4)\n    H_j = max(H_1,H_2)\n    H_k = max(H_1,H_3)\n    H_j = max(H_1,H_4)\n    H_k = max(H_1,H_2)\n    H_j = max(H_1,H_3)\n    H_k = max(H_1,H_4)\n    H_j = max(H_1,H_2)\n    H_k = max(H_1,H_3)\n    H_j = max(H_1,H_4)\n    H_k = max(H_1,H_2)\n    H_j = max(H_1,H_3)\n    H_k = max(H_1,H_4)\n    H_j = max(H_1,H_2)\n    H_k = max(H_1,H_3)\n    H_j = max(H_1,H_4)\n    H_k = max(H_1,H_2)\n    H_j = max(H_1,H_3)\n    H_k = max(H_1,H_4)\n    H_j = max(H_1,H_2)\n    H_k = max(H_1,H_3)\n    H_j = max(H_1,H_4)\n    H_k = max(H_1,H_2)\n    H_j = max(H_1,H_3)\n    H_k = max(H_1,H_4)\n    H_j = max(H_1,H_2)\n    H_k = max(H_1,H_3)\n    H_j = max(H_1,H_4)\n    H_k = max(H_1,H_2)\n    H_j = max(H_1,H_3)\n    H_k = max(H_1,H_4)\n    H_j = max(H_1,H_2)\n    H_k = max(H_1,H_3)\n    H_j = max(H_1,H_4)\n    H_k = max(H_1,H_2)\n    H_j = max(H_1,H_3)\n    H_k = max(H_1,H_4)\n    H_j = max(H_1,H_2)\n    H_k = max(H_1,H_3)\n    H_j = max(H_1,H_4)\n    H_k = max(H_1,H_2)\n    H_j = max(H_1,H_3)\n    H_k ="
    },
    {
        "number": 4318,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, H_i = map(int, stdin.split())\n    H = sorted(list(map(int, stdin.split())))\n    \n    for i in range(len(H) - 1):\n        if H[i] > H[i + 1]:\n            return '0'\n    \n    return str(len(H) - 1)\n\ndef"
    },
    {
        "number": 4318,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n  N, *H = map(int, stdin.split())\n  cnt = 0\n  for H_i in range(1, N+1):\n    cnt += len(set(H_i) & set(H))\n  return str(cnt)\n\"\"\"\ndef"
    },
    {
        "number": 4319,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a_list = list(map(int, stdin.strip().split()))\n    answer = 0\n    length = len(a_list)\n    for i in range(1, length):\n        answer += length - i - 1\n        if a_list[i] > a_list[i - 1]:\n            answer += a_list[i] - a_list[i - 1]\n    print(answer)\n    return str(answer)"
    },
    {
        "number": 4319,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # 1\n    # 2 3 1 2 3 4\n    # 2 3 1 2 3 4 5\n    # 2 3 1 2 3 4 5\n    n, a, b, *lst = map(int, stdin.split())\n    print(n // a + n % a)\n    print(n % a + lst[n % a] * b)\n    for i in range(n - 1, n - a - b, -1):\n        print(lst[i], end='')\n    print()\n    print(*lst[n - a - b:])\n    return ''\n\nprint(solution(stdin))"
    },
    {
        "number": 4319,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, a_list = stdin.split()\n    n = int(n)\n    a_list = [int(x) for x in a_list.split()]\n    a_list.sort()\n\n    answer = 0\n    \n    for a in a_list:\n        if a == 1:\n            answer += 2\n        else:\n            answer += 1\n\n    return str(answer)\n"
    },
    {
        "number": 4319,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    stairs = []\n    for i in range(1, n+1):\n        stairs.append(int(stdin[i-1]))\n    answer = [1] * n\n    for stair in stairs:\n        answer[stair-1] += 1\n    for i in range(n):\n        if answer[i] > 1:\n            answer[i] = str(answer[i])\n    return ''.join(answer)\n"
    },
    {
        "number": 4319,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, steps, t = list(map(int, stdin.split()))\n    \n    s = [int(stdin[i]) for i in range(1, len(stdin) - 1, 2)]\n    \n    ans = 0\n    \n    for i in range(t):\n        cur = 0\n        for _ in range(n - 1):\n            if s[i] == s[i + 1]:\n                cur += 1\n            else:\n                cur = 0\n        \n        if cur == steps:\n            ans += 1\n            \n    return str(ans)\n"
    },
    {
        "number": 4319,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    nums = []\n    for i in range(n):\n        nums.append(int(stdin.split()[i]))\n    ans = 1\n    for i in range(len(nums) - 1, -1, -1):\n        if nums[i] == a:\n            for j in range(i, -1, -1):\n                if j == 0:\n                    ans += 1\n                else:\n                    ans *= nums[j - 1]\n            break\n    return str(ans)"
    },
    {
        "number": 4319,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    steps = [int(x) for x in stdin.split()]\n    print(steps)\n    print(m)\n    print(m // n)\n    print(n - m)\n    print(steps[m//n - 1], steps[m % n - 1])\n    print(steps[m//n - 2], steps[m % n - 2])\n    print(steps[m//n - 3], steps[m % n - 3])\n    print(steps[m//n - 4], steps[m % n - 4])\n    print(steps[m//n - 5], steps[m % n - 5])\n    print(steps[m//n - 6], steps[m % n - 6])\n    print(steps[m//n - 7], steps[m % n - 7])\n    print(steps[m//n - 8], steps[m % n - 8])\n    return str(n)"
    },
    {
        "number": 4319,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = [0, 1, 2, 3, 4, 5]\n    n = int(stdin)\n    t = 0\n    for i in range(n):\n        t += a[i]\n    if n % 2 == 1:\n        return str(t//2) + str(t%2) + str(t//2)\n    else:\n        return str(t//2) + str(t%2)\n"
    },
    {
        "number": 4319,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    for case in range(int(stdin.strip())):\n        stairs = list(map(int, stdin.split()))\n        m = len(stairs)\n        n = 0\n        for i in range(m):\n            if i == 0:\n                n += stairs[i]\n            elif i == m - 1:\n                n += stairs[-1] - stairs[i - 1]\n            else:\n                n += max(stairs[i], stairs[i + 1]) - stairs[i - 1] - stairs[i + 1]\n        print(n)"
    },
    {
        "number": 4319,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    answer = 0\n    n = int(stdin)\n    nums = list(map(int, stdin.split()))\n    stairway = [1 for i in range(n)]\n    for i in range(n):\n        temp = nums[i]\n        stairway[i] = temp\n        answer += stairway[i]\n    \n    stairway.sort()\n    for i in range(n):\n        answer += stairway[i]\n    return str(answer)\n"
    },
    {
        "number": 4320,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    return solution_with_vova(n, x)\n\ndef"
    },
    {
        "number": 4320,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[1])\n    x = int(stdin.split()[2])\n    k = int(stdin.split()[3])\n    for i in range(n):\n        if x == n+1:\n            return str(1)\n        if x+2*i == n+1 and k+2**i >= n:\n            return str(1)\n        if x+2*i == n+1 and k+2**i >= n:\n            return str(2)\n        if x+2*i == n+1 and k+2**i >= n:\n            return str(2)\n        if x+2*i == n+1 and k+2**i >= n:\n            return str(1)\n        if x+2*i == n+1 and k+2**i >= n:\n            return str(1)\n        if x+2*i == n+1 and k+2**i >= n:\n            return str(2)\n    if x == n+1:\n        return str(1)\n    if x+2*i == n+1 and k+2**i >= n:\n        return str(1)\n    if x+2*i == n+1 and k+2**i >= n:\n        return str(2)\n    if x+2*i == n+1 and k+2**i >= n:\n        return str(2)\n    if x+2*i == n+1 and k+2**i >= n:\n        return str(1)\n    if x+2*i == n+1 and k+2**i >= n:\n        return str(1)\n    if x+2*i == n+1 and k+2**i >= n:\n        return str(2)\n    if x+2*i == n+1 and k+2**i >= n:\n        return str(1)\n    if x+2*i == n+1 and k+2**i >= n:\n        return str(2)\n    if x+2*i == n+1 and k+2**i >= n:\n        return str(2)\n    if x+2*i == n+1 and k+2**i >= n:\n        return str(2)\n    return str(n+1)\n\nprint(solution(\"7\\n3\\n6\\n7\\n21\\n999999999\\n999999984\"))\nprint(solution(\"7\\n3\\n6\\n7\\n4\\n2\\n1\"))\nprint(solution(\"8\\n3\\n6\\n4\\n2\\n1\"))\nprint(solution(\"8\\n3\\n6\\n4\\n2\\n1\"))\nprint(solution(\"8\\n4\\n2\\n3\\n1\"))\nprint(solution(\"8\\n4\\n2\\n3\\n1\"))\nprint(solution(\"8\\n4\\n2\\n1\"))\nprint(solution(\"8\\n4\\n2\\n1\"))\nprint(solution(\"8\\n4\\n2\\n1\"))\nprint(solution(\"8\\n4\\n2\\n1\"))\nprint(solution(\"8\\n4\\n2\\n1\"))\nprint(solution(\"8\\n4\\n2\\n1\"))\nprint(solution(\"8\\n4\\n2\\n1\"))\nprint(solution(\"8\\n4\\n2\\n1\"))\nprint(solution(\"8\\n4\\n2\\n1\"))\nprint(solution(\"8\\n4\\n2\\n1\"))\nprint(solution(\"8\\n4\\n2\\n1\"))\nprint(solution(\"8\\n4\\n2\\n1\"))\nprint(solution(\"8\\n4\\n2\\n1\"))\nprint(solution(\"8\\n4\\n2\\n1\"))\nprint(solution(\"8\\n4\\n2\\n1\"))\nprint(solution(\"8\\n4\\n2\\n1\"))\nprint(solution(\"8\\n4\\n2\\n1\"))\nprint(solution(\"8\\n4\\n2\\n1\"))\nprint(solution(\"8\\n4\\n2\\n1\"))\nprint(solution(\"8\\n4\\n2\\n1\"))\nprint(solution(\"8\\n4\\n2\\n1\"))\nprint(solution(\"8\\n4\\n2\\n1\"))\nprint(solution(\"8\\n4\\n2\\n1\"))\nprint(solution(\"8\\n4\\n2\\n1\"))\nprint(solution(\"8\\n4\\n2\\n1\"))\nprint(solution(\"8\\n4\\n2\\n1\"))\nprint(solution(\"8\\n4\\n2\\n1\"))\nprint(solution(\"8\\n4\\n2\\n1\"))\nprint(solution(\"8\\n4\\n2\\n1\"))\nprint(solution(\"8\\n4\\n2\\n1\"))\nprint(solution(\"8\\n4\\n2\\n1\"))\nprint(solution(\"8\\n4\\n2\\n1\"))\nprint(solution(\"8\\n4\\n2\\n1\"))\nprint(solution(\"8\\n4\\n2\\n1\"))\nprint(solution(\"8\\n4\\n2\\n1\"))\nprint(solution(\"8\\n4\\n2\\n1\"))\nprint(solution(\"8\\n4\\n2\\n1\"))\nprint(solution(\"8\\n4\\n2\\n1\"))\nprint(solution(\"8\\n4\\n2\\n1\"))\nprint(solution(\"8\\n4\\n2\\n1\"))\nprint(s"
    },
    {
        "number": 4320,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 1 == 0:\n        return str(n // 1)\n    else:\n        return \"invalid\"\n\n\n-----My Answer-----\n\ndef"
    },
    {
        "number": 4320,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4320,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 0:\n        return \"1\"\n    if n % 1000000 == 0:\n        return \"2\"\n    if n % 10 == 0:\n        return \"1\"\n    if n % 100 >= 10 and n % 10 <= 9:\n        return str(n // 10**9)\n    if n % 1000 == 0:\n        return str(n // 10**9)\n    if n % 100 >= 11 and n % 10 <= 9:\n        return str(n // 10**9)\n    if n % 1000 >= 11 and n % 10 <= 9:\n        return str(n // 10**9)\n    if n % 100 >= 11:\n        return str(n // 10**9)\n    if n % 100 >= 11 and n % 10 <= 9:\n        return str(n // 10**9)\n    if n % 100 >= 11 and n % 10 >= 10:\n        return str(n // 10**9)\n    if n % 100 >= 11 and n % 10 >= 10 and n % 10 <= 9:\n        return str(n // 10**9)\n    if n % 100 >= 11 and n % 10 >= 10 and n % 10 >= 11:\n        return str(n // 10**9)\n    if n % 100 >= 11 and n % 10 >= 11 and n % 10 <= 9:\n        return str(n // 10**9)\n    if n % 100 >= 11 and n % 10 >= 11 and n % 10 >= 11:\n        return str(n // 10**9)\n    if n % 100 >= 11 and n % 10 >= 11 and n % 10 >= 11:\n        return str(n // 10**9)\n    if n % 100 >= 11 and n % 10 >= 11 and n % 10 >= 11:\n        return str(n // 10**9)\n    if n % 100 >= 11 and n % 10 >= 11 and n % 10 >= 11:\n        return str(n // 10**9)\n    if n % 100 >= 11 and n % 10 >= 11 and n % 10 >= 11:\n        return str(n // 10**9)\n    if n % 100 >= 11 and n % 10 >= 11 and n % 10 >= 11:\n        return str(n // 10**9)\n    if n % 100 >= 11 and n % 10 >= 11 and n % 10 >= 11:\n        return str(n // 10**9)\n    if n % 100 >= 11 and n % 10 >= 11 and n % 10 >= 11:\n        return str(n // 10**9)\n    if n % 100 >= 11 and n % 10 >= 11 and n % 10 >= 11:\n        return str(n // 10**9)\n    if n % 100 >= 11 and n % 10 >= 11 and n % 10 >= 11:\n        return str(n // 10**9)\n    if n % 100 >= 11 and n % 10 >= 11 and n % 10 >= 11:\n        return str(n // 10**9)\n    if n % 100 >= 11 and n % 10 >= 11 and n % 10 >= 11:\n        return str(n // 10**9)\n    if n % 100 >= 11 and n % 10 >= 11 and n % 10 >= 11:\n        return str(n // 10**9)\n    if n % 100 >= 11 and n % 10 >= 11 and n % 10 >= 11:\n        return str(n // 10**9)\n    if n % 100 >= 11 and n % 10 >= 11 and n % 10 >= 11:\n        return str(n // 10**9)\n    if n % 100 >= 11 and n % 10 >= 11 and n % 10 >= 11:\n        return str(n // 10**9)\n    if n % 100 >= 11 and n % 10 >= 11 and n % 10 >= 11:\n        return str(n // 10**9)\n    if n % 100 >= 11 and n % 10 >= 11 and n % 10 >= 11:\n        return str(n // 10**9)\n    if n % 100 >= 11 and n % 10 >= 11 and n % 10 >= 11:\n        return str(n // 10**9)\n    if n % 100 >= 11 and n % 10 >= 11 and n % 10 >= 11:\n        return str(n // 10**9)\n    if n % 100 >= 11 and n % 10 >= 11 and n % 10 >= 11:\n        return str(n // 10**9)\n    if n % 100 >= 11 and n % 10 >= 11 and n % 10 >= 11:\n        return str(n // 10**9)\n    if n % 100 >= 11 and n % 10 >= 11 and n % 10 >= 11:\n        return str(n // 10**9)\n    if n % 100 >= 11 and n % 10 >= 11 and n % 10 >= 11:\n        return str(n // 10**9)\n    if n % 100 >= 11 and n % 10 >= 11 and n % 10 >= 11:\n        return str(n // 10**9)\n    if n % 100 >= 11 and n % 10 >= 11 and n % 10 >= 11:\n        return str(n // 10**9)\n    if n % 100 >= 11 and n % 10 >= 11 and n % 10 >= 11:\n        return str(n // 10**9)\n    if n % 100 >= 11 and n % 10 >= 11 and n % 10 >= 11:\n        return str(n // 10**9)\n    if n % 100 >= 11 and n % 10 >= 11 and n % 10 >= 11:\n        return str(n // 10**9)\n    if n % 100 >= 11 and n % 10 >= 11 and n % 10 >= 11:\n        return str(n // 10**9)\n    if n % 100 >= 11 and n % 10 >= 11 and n % 10 >= 11:\n        return str(n // 10**9)\n    if n % 100 >= 11 and n % 10 >= 11 and n % 10 >= 11:\n        return str(n // 10**9)\n    if n % 100 >= 11 and n % 10 >= 11 and n % 10 >= 11:\n        return str"
    },
    {
        "number": 4320,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s=stdin.split(\" \")\n    t=int(s[0])\n    n=int(s[1])\n    c=list(map(int,stdin.split(\" \")))\n    k=list(map(int,stdin.split(\" \")))\n    \n    if t>100000 or t<3000000:\n        return str(n)\n    \n    if (t>1000000 or t<10000000):\n        return str(n)\n    \n    if (t>1000000000000 or t<1000000000000):\n        return str(n)\n    \n    if (t>100000000000000 or t<100000000000000):\n        return str(n)\n    \n    if (t>1000000000000000 or t<1000000000000000):\n        return str(n)\n    \n    if (t>1000000000000000 or t<1000000000000000):\n        return str(n)\n    \n    if (t>1000000000000000 or t<1000000000000000):\n        return str(n)\n    \n    if (t>1000000000000000 or t<1000000000000000):\n        return str(n)\n    \n    if (t>1000000000000000 or t<1000000000000000):\n        return str(n)\n    \n    if (t>1000000000000000 or t<1000000000000000):\n        return str(n)\n    \n    if (t>1000000000000000 or t<1000000000000000):\n        return str(n)\n    \n    if (t>1000000000000000 or t<1000000000000000):\n        return str(n)\n    \n    if (t>1000000000000000 or t<1000000000000000):\n        return str(n)\n    \n    if (t>1000000000000000 or t<1000000000000000):\n        return str(n)\n    \n    if (t>1000000000000000 or t<1000000000000000):\n        return str(n)\n    \n    if (t>1000000000000000 or t<1000000000000000):\n        return str(n)\n    \n    if (t>1000000000000000 or t<1000000000000000):\n        return str(n)\n    \n    if (t>1000000000000000 or t<1000000000000000):\n        return str(n)\n    \n    if (t>1000000000000000 or t<1000000000000000):\n        return str(n)\n    \n    if (t>1000000000000000 or t<1000000000000000):\n        return str(n)\n    \n    if (t>1000000000000000 or t<1000000000000000):\n        return str(n)\n    \n    if (t>1000000000000000 or t<1000000000000000):\n        return str(n)\n    \n    if (t>1000000000000000 or t<1000000000000000):\n        return str(n)\n    \n    if (t>1000000000000000 or t<1000000000000000):\n        return str(n)\n    \n    if (t>1000000000000000 or t<1000000000000000):\n        return str(n)\n    \n    if (t>1000000000000000 or t<1000000000000000):\n        return str(n)\n    \n    if (t>1000000000000000 or t<1000000000000000):\n        return str(n)\n    \n    if (t>1000000000000000 or t<1000000000000000):\n        return str(n)\n    \n    if (t>1000000000000000 or t<1000000000000000):\n        return str(n)\n    \n    if (t>1000000000000000 or t<1000000000000000):\n        return str(n)\n    \n    if (t>1000000000000000 or t<1000000000000000):\n        return str(n)\n    \n    if (t>1000000000000000 or t<1000000000000000):\n        return str(n)\n    \n    if (t>1000000000000000 or t<1000000000000000):\n        return str(n)\n    \n    if (t>1000000000000000 or t<1000000000000000):\n        return str(n)\n    \n    if (t>1000000000000000 or t<1000000000000000):\n        return str(n)\n    \n    if (t>1000000000000000 or t<1000000000000000):\n        return str(n)\n    \n    if (t>1000000000000000 or t<1000000000000000):\n        return str(n)\n    \n    if (t>1000000000000000 or t<1000000000000000):\n        return str(n)\n    \n    if (t>1000000000000000 or t<1000000000000000):\n        return str(n)\n    \n    if (t>1000000000000000 or t<1000000000000000):\n        return str(n)\n    \n    if (t>1000000000000000 or t<1000000000000000):\n        return str(n)\n    \n    if (t>1000000000000000 or t<1000000000000000):\n        return str(n)\n    \n    if (t>1000000000000000 or t<1000000000000000):\n        return str(n)\n    \n    if (t>1000000000000000 or t<1000000000000000):\n        return str(n)\n    \n    if (t>1000000000000000 or t<1000000000000000):\n        return str(n)\n    \n    if (t>1000000000000000 or t<1000000000000000):\n        return str(n)\n    \n    if (t>1000000000000000 or t<1000000000000000):\n        return str(n)\n    \n    if (t>1000000000000000 or t<1000000000000000):\n        return str(n)\n    \n    if (t>1000000000000000 or t<1000000000000000):\n        return str(n)\n    \n    if (t>1000000000000000 or t<1000000000000000):\n        return str(n)\n    \n    if (t>1000000000000000 or t<1000000000000000):\n        return str(n)\n    \n    if (t>1000000000000000 or t<1000000000000000):\n        return str(n)\n    \n    if (t>"
    },
    {
        "number": 4320,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n        from collections import defaultdict\n        n, x, k = map(int, stdin.split())\n        key_set = set(map(int, stdin.split()))\n        result = []\n        for _ in range(n):\n            result.append(list(map(int, input().split())))\n        \n        def number_check(n: int) -> bool:\n            if n <= 0:\n                return False\n            if n > 4:\n                return False\n            for i in range(k):\n                if n + i >= 4:\n                    return False\n                if n + i >= 100:\n                    return False\n                if not any([n - i <= n, n + i <= n + k - 1]):\n                    return False\n            return True\n        \n        def check(n: int) -> bool:\n            if n <= 0:\n                return False\n            if n > 4:\n                return False\n            for i in range(k):\n                if n + i >= 4:\n                    return False\n                if n + i >= 100:\n                    return False\n                if not any([n - i <= n, n + i <= n + k - 1]):\n                    return False\n            return True\n        \n        result.sort()\n        \n        ans = 0\n        for i in range(k):\n            for j in range(i + 1, k):\n                if number_check(result[i][j]) and check(result[i][j]):\n                    ans += result[i][j]\n        \n        if ans == 0:\n            return \"0\"\n        else:\n            return str(ans)\n        \n    \n"
    },
    {
        "number": 4320,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    k = int(stdin.strip().split(' ')[1])\n    k = min(k, n)\n    return '{:d}'.format(k)\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4320,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.strip())\n    n = int(stdin.strip())\n    for _ in range(t):\n        x = int(stdin.strip())\n        k = int(stdin.strip())\n        print(x, k)\n        if x + 2 * x + 4 * x == n:\n            print(n)\n            break\n        if x + 2 * x + 4 * x > n:\n            print(n)\n            break\n        if x + 2 * x + 4 * x < n:\n            print(n)\n            break\n        if x + 2 * x + 4 * x == n:\n            print(n)\n            break\n\n    \n"
    },
    {
        "number": 4320,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    line = stdin.split()\n    t = int(line[0])\n    n = int(line[1])\n    \n    if t == 1:\n        \n        return str(n+2)\n    elif t == 2:\n        return str(n+2)\n    else:\n        return str(n)\n"
    },
    {
        "number": 4321,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n % 2 == 1:\n        k += 1\n    if not (1 <= k <= 50):\n        return str(n)\n    while k > 1:\n        n = n * 10 + int(stdin.split()[0])\n        k -= 1\n    return str(n)\n\nprint(solution(stdin))"
    },
    {
        "number": 4321,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n,k=map(int,stdin.split())\n    if n<k:\n        return \"1\"\n    elif n==0 or k==0:\n        return \"1\"\n    else:\n        print(str(n-k)+\"\\n\"+solution(stdin[0:n-k]+stdin[n+1:n+k])+\"\\n\"+solution(stdin[n+1:n+k]+stdin[0:n-k]))\nsolution(input())\n"
    },
    {
        "number": 4321,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    k = int(stdin[-1])\n\n    if n == 0:\n        return 1\n\n    if k == 0:\n        return 0\n\n    if k % 10 == 0:\n        return n\n    else:\n        return solution(stdin[1:]) + solution(stdin[:1])\n"
    },
    {
        "number": 4321,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    print(stdin.strip())\n    return \"\"\n\ndef"
    },
    {
        "number": 4321,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, k = map(int, stdin.split())\n    \n    for _ in range(k):\n        n -= 1\n    return str(n)\n"
    },
    {
        "number": 4321,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def get_number_of_subtractions(number, _n, _k):\n        return _n - number % 10 + number // 10 * _k\n\n    return str(get_number_of_subtractions(int(stdin), int(stdin[-1]), int(stdin[-2])))\n\n-----Constraints-----\n\n1 <= k <= 10^9\n1 <= n <= 10^9\n\n\n\n-----Example 1 (2021-03-21):\n\nInput\n\n11 100\n\nOutput\n\n10\n\nExplanation\n\nNote: Tanya is decreasing by one on the basis of the number $n$, which means that Tanya should decrement $n$ by one.\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4321,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    k = int(stdin.split('\\n')[1])\n    return str(k*n)\n\n\nInput\n5\n1\n1\n1\n3\n2\n3\n2\n3\nOutput\n3\n\"\"\"\ndef"
    },
    {
        "number": 4321,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    \n    for i in range(k):\n        print(n-1)\n        n-=1\n    "
    },
    {
        "number": 4321,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    while k > 0:\n        n -= 1\n        n //= 10\n        k -= 1\n    return str(n)\n\n\n------Solution-----\n\nn, k = int(input()), int(input())\nsum = n\nwhile k > 0:\n    n //= 10\n    sum -= n\n    k -= 1\nprint(sum)"
    },
    {
        "number": 4321,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    n -= (n % 10)\n    n //= 10\n    k -= 1\n    return str(n) + str(k)\n\nn = 513\nk = 5\nprint(solution(stdin))"
    },
    {
        "number": 4322,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, n = map(int, stdin.split())\n    a = [int(i) for i in range(n)]\n    print(k)\n    print(a)\n    for i in range(k, n + 1):\n        # \u5168\u90e8\u9075\u5faa\u53d8\u5316\n        # a[i] = a[i] + a[i - k] + a[i - (k + 1)] + a[i - (k + 2)] +...\n        # \u5148\u627e\u51fa\u6240\u6709\u53d8\u5316\u7684\u503c\n        print(a)\n        for j in range(1, len(a)):\n            if a[i] > a[j]:\n                a[i] = a[j]\n        print(a)\n        print(\"-------------------\")\n        # \u7528\u53d8\u5316\u7684\u503c\u6392\u5e8f\n        a = sorted(a)\n        print(a)\n        # \u53d8\u5316\u7684\u503c\u4e2a\u6570\n        print(len(a))\n        if sum(a) > 2 * k:\n            print(\"false\")\n            return \"false\"\n        print(\"true\")\n    return \"true\"\n"
    },
    {
        "number": 4322,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    res_k = 0\n    for i in range(n):\n        a_k = list(map(int, stdin.split()))\n        if res_k < 0:\n            res_k = sum(a_k)\n        else:\n            res_k += sum(a_k) - res_k\n        res_k += a_k[0]\n    return str(res_k)"
    },
    {
        "number": 4322,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, a = list(map(int, stdin.split()))\n    a = sorted(list(map(int, a)))\n    a.append(max(a))\n    a.sort()\n    \n    a_i = a[1]\n    a_k = a[-1]\n    \n    a_j = 0\n    res_k = 0\n    for i in range(1, n + 1):\n        if a_j == a_k:\n            res_k = i\n            break\n        if abs(a_j - a_k) <= 1:\n            a_j = a[i]\n        else:\n            a_k = a[i]\n    return f\"{res_k} {a_i}\"\n"
    },
    {
        "number": 4322,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    people = list(map(int, stdin.split()))\n    people = sorted(people)\n\n    res = 0\n\n    # 0~n\uae4c\uc9c0\n    for i in range(k):\n        # \uae30\ub85d\ub418\uc9c0 \uc54a\uc558\uc744 \uacbd\uc6b0\n        if people[i] == people[i + 1]:\n            pass\n        else:\n            # \ub4e4\uc5b4\uac00\uc11c \uc801\uc6a9\n            res += people[i] - people[i + 1]\n    \n    return str(res)\n\"\"\"\nimport math\nn = int(input())"
    },
    {
        "number": 4322,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    \n    s = 0\n    for i in range(n):\n        s += a[i]\n        \n    if s > 2*sum(a):\n        return 'Error'\n    else:\n        return 'Error'\n"
    },
    {
        "number": 4322,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k, *res = map(int, stdin.split())\n    return str(max(res)-k) + str(max(res))"
    },
    {
        "number": 4322,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip().split()[-1])\n    a = list(map(int, stdin.strip().split()[:-1]))\n    res = [0] * n\n    for i in range(n):\n        res[i] = a[i]\n    return \"\".join(map(str, res))\n\"\"\"\n\ndef"
    },
    {
        "number": 4322,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    people = []\n    \n    for _ in range(n):\n        people.append(int(input()))\n    \n    result = 0\n    \n    for i in range(k-1):\n        for j in range(i+1, k):\n            if people[j] - people[i] > 1:\n                result += 1\n    \n    print(result)"
    },
    {
        "number": 4322,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return str(min(map(lambda n: (n + 1) ** 2 - 2 * n, map(int, stdin.split())) + 1) ** 2)\n"
    },
    {
        "number": 4322,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n,a=map(int,stdin.split())\n    h_list=[]\n    for i in range(1,n+1):\n        h_list.append(a)\n    l=len(h_list)\n    max_index=l-1\n    for i in range(l):\n        j=l-i-1\n        if abs(h_list[i]-h_list[j])<=1:\n            max_index=j\n            break\n    k=l-max_index-1\n    res_list=[]\n    res_list.append(k)\n    for i in range(max_index+1):\n        res_list.append(k-1)\n        if i<max_index:\n            k=k-1\n        else:\n            k=k+1\n        res_list.append(k)\n    print(max(res_list))\n    return '\\n'.join(map(str,res_list))"
    },
    {
        "number": 4323,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    \n    if n * m < sum(arr):\n        return \"-1\"\n    \n    min_sizes = [sum(arr[:i+1]) for i in range(1, n)]\n    max_sizes = [sum(arr[i:i+m]) for i in range(0, n)]\n    min_size_idx = 0\n    max_size_idx = 0\n    for i in range(n):\n        if max_sizes[i] >= min_sizes[i]:\n            max_size_idx = i\n        else:\n            min_size_idx = i\n    \n    if max_sizes[min_size_idx] >= min_sizes[max_size_idx]:\n        max_size_idx = min_size_idx\n    \n    answer = max_sizes[max_size_idx] - min_sizes[min_size_idx]\n    return answer\n\ndef"
    },
    {
        "number": 4323,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    \n    if n*m>m:\n        return \"-\"\n    \n    sum = 0\n    sorted_list = sorted(list(map(int, stdin.split())), reverse=True)\n    \n    for i in sorted_list:\n        if sum+i>m:\n            break\n        sum+=i\n        \n    answer = sum\n    return answer\n\nprint(solution(stdin))\n\ndef"
    },
    {
        "number": 4323,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    \n    #if a >= b: return -1\n    \n    count = 0\n    if b > a:\n        for i in range(a, b+1):\n            s = sum(map(int, str(i)))\n            if s <= a:\n                count += s\n    else:\n        for i in range(a, b+1):\n            s = sum(map(int, str(i)))\n            if s <= a:\n                count += s\n                \n    return count\n\nInput\n2\n\nOutput\n2\nInput\n4\n\nOutput\n-1\n\n\nInput\n1\n\nOutput\n3\n\nInput\n2\n\nOutput\n1\n'''\n"
    },
    {
        "number": 4323,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    if N == 0 or M == 0:\n        return \"-1\"\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    ans = 0\n    for i in range(n):\n        for j in range(m):\n            if a[i] + b[j] <= m:\n                ans += m - a[i] - b[j]\n                break\n    if ans < m:\n        return str(ans)\n    else:\n        return \"-1\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4323,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    arr = stdin.split()\n    \n    if len(arr)!= 4:\n        return \"-\"\n    \n    n = int(arr[0])\n    m = int(arr[1])\n    a = int(arr[2])\n    b = int(arr[3])\n    \n    if a + b > m:\n        return \"-\"\n    \n    if a == b:\n        return \"1\"\n    \n    return solution(stdin)\n\ndef"
    },
    {
        "number": 4323,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a,b = map(int, stdin.split())\n    if a > b:\n        return str(a - b)\n    else:\n        return '-1'\n\nprint(solution(\"4 12\"))\nprint(solution(\"16 10\"))\nprint(solution(\"16 12\"))"
    },
    {
        "number": 4323,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    \n    a = int(stdin[0])\n    b = int(stdin[2])\n    \n    total = 0\n    for i in range(1, n+1):\n        total += a*i\n        total += b*i\n        total += a*i\n    return str(total)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 4323,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a, b = map(int, stdin.split())\n    if a < b:\n        a, b = b, a\n    if a + b < m:\n        return \"-1\"\n    if a == b:\n        return str(a)\n    if a > b:\n        a, b = b, a\n    for i in range(a, b + 1):\n        for j in range(i + 1, b + 1):\n            c = i + j\n            if c > m:\n                break\n            if c > a:\n                a = c\n                if c == b:\n                    break\n    return str(a)\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4323,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = []\n    for i in range(1, n + 1):\n        b.append(sum(a[:i]) + sum(a[i:i + 2]))\n    print(b[-1])\n    return '-1'\n\nIn this program, we will be computing the minimum number of songs needed to be compressed by the first two songs. In this example, the first song is compressed, the second one is not.\n\nIn the second example, it's not possible to compress the first song since the second song is not large enough to fit on the flash drive.\n\nIn the third example, because of the minimum number of songs needed to be compressed by the first two songs, there is no need to be a way to compute the minimum number of songs needed to be compressed by the first two songs because the sum of their sizes will be equal to $8 + 4 + 1 + 4 = 20 \\le 21$.\n\nIn this example, we can only copy the songs of the first and the second two songs and the second one.\n\nAfter the first compressing, we need to check whether the size of the first two songs in the flash drive can be compressed with the first two songs. If yes, we need to compress the second two songs of the flash drive with the first two songs. In this example, the second two songs cannot be compressed because the size of the first two songs is larger than $8$. If the first two songs are compressed with the first two songs, it is possible to compress the first two songs with the first two songs.\n\nIn this case, we need to calculate how many songs to be compressed by the first two songs.\n\nIf the sum of the sizes of the first two songs is less than or equal to $m$, the sum of the first two songs cannot be compressed. In this case, we need to add the first two songs to the flash drive. The first two songs can be compressed with the first two songs because the size of the first two songs can be larger than $8$. If the first two songs are compressed with the first two songs, we need to add the first two songs to the flash drive because the sum of their sizes is equal to $8 + 4 = 20 \\le 21$. We can only add the first two songs in the flash drive if it is possible to add the first two songs to it, because we need to add the first two songs to the flash drive because the sum of their sizes is equal to $8 + 4 + 1 = 20 \\le 21$. In this case, we need to add the first two songs to the flash drive because it is possible to add the first two songs to it, because the sum of their sizes is equal to $8 + 4 + 1 = 8 > 20$.\n\nThis code takes in two arguments in the input. The first argument is the first line of the input. The second argument is the second line of the input.\n\nThe first line of the input contains two integers $n$ and $m$ ($1 \\le n \\le 10^5, 1 \\le m \\le 10^9$), the number of the songs on Ivan's phone and the capacity of Ivan's flash drive.\n\nThe second line contains two integers $a_i$ and $b_i$ ($1 \\le a_i, b_i \\le 10^9$, $a_i > b_i$) \u2014 the initial size of the $i$-th song and the size of the $i$-th song after compression.\n\nThe third line contains two integers $i_1$ and $i_2$ ($1 \\le i_1 \\le 10^9$, $i_1 > i_2$) \u2014 the first-order subgradient between the $i$-th song and the first-order subgradient between the $i$-th song before compression.\n\nThe fourth line contains two integers $i_3$ and $i_4$ ($1 \\le i_3 \\le 10^9$, $i_3 > i_4$) \u2014 the second-order subgradient between the $i$-th song and the second-order subgradient between the $i$-th song before compression.\n\nThe fifth line contains two integers $a_i$ and $b_i$ ($1 \\le a_i, b_i \\le 10^9$, $a_i > b_i$) \u2014 the first-order subgradient between the $i$-th song and the first-order subgradient between the $i$-th song before compression.\n\nThe sixth line contains two integers $i_5$ and $i_6$ ($1 \\le i_5 \\le 10^9$, $i_5 > i_6$) \u2014 the second-order subgradient between the $i$-th song and the second-order subgradient between the $i$-th song before compression.\n\nThe seventh line contains two integers $i_7$ and $i_8$ ($1 \\le i_7 \\le 10^9$, $i_7 > i_8$) \u2014 the third-order subgradient between the $i$-th song and the third-order subgradient between the $i$-th song before compression.\n\nThe eighth line contains two integers $a_i$ and $b_i$ ($1 \\le a_i, b_i \\le 10^9$, $a_i > b_i$) \u2014 the third-order subgradient between the $i$-th song and the third-order subgradient between the $i$-th song before compression.\n\nThe ninth line contains two integers $i_9$ and $i_10$ ($1 \\le i_9 \\le 10^9$, $i_9 > i_10$) \u2014 the fourth-order subgradient between the $i$-th song and the fourth-order subgradient between the $i$-th song before compression.\n\nThe tenth line contains two integers $i_11$ and $i_12$ ($1 \\le i_11 \\le 10^9$, $i_11 > i_12$) \u2014 the fifth-order subgradient between the"
    },
    {
        "number": 4323,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if (n < m):\n        return '-1'\n    \n    arr = []\n    for i in range(1, n+1):\n        arr.append(i)\n    \n    ans = 0\n    for i in range(1, n+1):\n        for j in range(1, m):\n            if (arr[i-1] < arr[j]):\n                ans += 1\n    \n    return str(ans)\n\ndef"
    },
    {
        "number": 4324,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin.strip().split()[-1])\n    a = set()\n    b = set()\n    for i in range(0, n):\n        s = stdin.strip().split()[i].split()\n        a.update(s)\n        b.update(s)\n    s = list(a) + list(b)\n    s.sort()\n    return ''.join(s)\n    \n    \n"
    },
    {
        "number": 4324,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    s = ''\n    s = s.join(stdin[i] for i in range(n))\n    t = len(s)\n    for i in range(t):\n        if a < t - i and a + a <= n:\n            if b <= t - (i + 1):\n                s = s[:a + i] + s[a + i + 1:t] + s[a + i + b:]\n            else:\n                s = s[:a + i] + s[a + i + 1:] + s[a + i + b - (t - i - 1):t]\n    return s\n\n\n-----Constraints-----\n\n1 <= t <= 2000\n1 <= n <= 10^3\n1 <= a, b <= 10^9\n0 <= a \\le n \\le 1000\n0 <= b \\le a \\le 1000\n\n\"\"\"\nclass Solution:\n    def solve(self, t, n, a, b):\n        if t == 0:\n            return ''.join(map(str, range(a,b+1)))\n        if t == 1:\n            return ''.join(map(str, range(a,n+1)))\n        res = []\n        for i in range(n):\n            a_left = a\n            a = a + a <= n\n            b = b + b <= n\n            a_right = a\n            a = a + a <= n\n            b = b + b <= n\n            res.append(self.solve(t-1, n, a_left, b) +'' + self.solve(t-1, n, a_right, b) +'' + self.solve(t-1, n, a, b))\n        return ''.join(res)\n"
    },
    {
        "number": 4324,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def insert_str(a: str, b: int) -> int:\n        cnt = 0\n        for i in range(len(a)):\n            if a[i] == a[b] and i == b:\n                cnt += 1\n        return cnt\n\n    def extract_str(a: str, b: int, c: int) -> int:\n        lst = []\n        for i in range(b, len(a)):\n            if a[i] == a[b] and i == b + 1:\n                lst.append(a[i] * c)\n            elif a[i] == a[b] and i == b + 1:\n                lst.append(a[i] * (c + 1))\n            elif a[i] == a[b] and i == b:\n                lst.append(a[i] * c)\n            elif a[i] == a[b] and i == b + 1:\n                lst.append(a[i] * (c + 1))\n                lst.append(a[i] * c)\n            else:\n                lst.append(a[i])\n        return sum(lst)\n\n    def t_insert_str(a: str, b: int, c: int) -> int:\n        cnt = 0\n        for i in range(len(a)):\n            if a[i] == a[b] and i == b:\n                cnt += 1\n            elif a[i] == a[b] and i == b + 1:\n                cnt += 1\n            elif a[i] == a[b] and i == b + 1:\n                cnt += 1\n            elif a[i] == a[b] and i == b:\n                cnt += 1\n            else:\n                cnt += 1\n        return cnt\n\n    def t_extract_str(a: str, b: int, c: int) -> int:\n        lst = []\n        for i in range(b, len(a)):\n            if a[i] == a[b] and i == b + 1:\n                lst.append(a[i] * c)\n            elif a[i] == a[b] and i == b + 1:\n                lst.append(a[i] * (c + 1))\n            elif a[i] == a[b] and i == b:\n                lst.append(a[i] * c)\n            elif a[i] == a[b] and i == b + 1:\n                lst.append(a[i] * (c + 1))\n                lst.append(a[i] * c)\n            else:\n                lst.append(a[i])\n        return sum(lst)\n\n    def t_t_insert_str(a: str, b: int, c: int) -> int:\n        lst = []\n        for i in range(b, len(a)):\n            if a[i] == a[b] and i == b:\n                lst.append(a[i] * c)\n            elif a[i] == a[b] and i == b + 1:\n                lst.append(a[i] * c)\n            elif a[i] == a[b] and i == b + 1:\n                lst.append(a[i] * (c + 1))\n            else:\n                lst.append(a[i])\n        return sum(lst)\n\n    def t_t_extract_str(a: str, b: int, c: int) -> int:\n        lst = []\n        for i in range(b, len(a)):\n            if a[i] == a[b] and i == b + 1:\n                lst.append(a[i] * c)\n            elif a[i] == a[b] and i == b + 1:\n                lst.append(a[i] * (c + 1))\n            elif a[i] == a[b] and i == b:\n                lst.append(a[i] * c)\n            elif a[i] == a[b] and i == b + 1:\n                lst.append(a[i] * (c + 1))\n                lst.append(a[i] * c)\n            else:\n                lst.append(a[i])\n        return sum(lst)\n\n    for case in stdin:\n        n = int(case)\n        lst = []\n        for i in range(n):\n            a = stdin.readline().strip()\n            b = int(stdin.readline().strip())\n            c = int(stdin.readline().strip())\n            if c == 0:\n                lst.append(a[:b])\n            elif c == 1:\n                lst.append(a[:b] + a[b + 1:])\n            else:\n                lst.append(a[:b] + a[b + 1:b + c - 1] + a[b + 1:])\n        print(t_extract_str(lst, n - 1, c))\n        print(t_insert_str(lst, n - 1, c))\n        print(t_t_insert_str(lst, n - 1, c))\n"
    },
    {
        "number": 4324,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n,a,b = map(int,stdin.split())\n    str_l = [0]\n    str_r = [b]\n    ans = \"\"\n    for _ in range(n):\n        str_l.append(stdin.split()[0][str_l[-1]+1:])\n        str_r.append(stdin.split()[1][str_r[-1]+1:])\n        if n-1 < b:\n            ans += \"\".join(str_l)\n            str_l.clear()\n            str_r.clear()\n    for l in str_l:\n        ans += l*a\n    return ans\n\"\"\"\ndef"
    },
    {
        "number": 4324,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 4324,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n    for i in range(len(stdin)):\n        \n        a = int(stdin[i])\n        b = len(stdin[i])\n        \n        if a > 26:\n            return stdin[i]\n        \n        substr = stdin[i:i+b]\n        \n        if len(set(substr)) == b:\n            return ''.join(sorted(set(substr)))\n            \n    return 'lllll'\n    \n    \n\"\"\"\n  \n   def solution(stdin):\n      t = int(stdin[0])\n      a,b = map(int,stdin[1:].split())\n      \n      for i in range(t):\n        \n        s = stdin[i+1]\n        for j in range(a,b):\n          s = s[:j]+s[j+1:][::-1] + s[j+1:]\n          \n          s = list(s)\n          \n        for j in range(a,b):\n          s[j] = list(s[j])\n          \n        s = ''.join(s)\n          \n        if s==s[::-1]:\n          return s\n        else:\n          return 'lllll'\n    \n      \n    \n    \n    \n    \n    \n    \n\"\"\""
    },
    {
        "number": 4324,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n  n = int(stdin.strip())\n  letters = set()\n  for i in range(1, n+1):\n    k = 0\n    while i >= 1:\n      j = i%26\n      k += j\n      i = i//26\n    letters.add(chr(65+k))\n  return \"\".join(letters)\n\n\n-----Extra Credit-----"
    },
    {
        "number": 4324,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = list(map(int, stdin.split()))\n    s = []\n    for i in range(n):\n        s.append(str(stdin.count(chr(97+i))))\n    \n    # validate the sum\n    for i in range(n):\n        if len(s[i])!= a or len(s[i])!= b:\n            return \"qwerty\"\n    \n    # print the answer\n    answer = \"\"\n    for i in range(n):\n        answer += s[i][:a] + '*' + s[i][a:]\n    return answer\n"
    },
    {
        "number": 4324,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    result = []\n    for i in range(n):\n        a = stdin.split()[a]\n        b = stdin.split()[b]\n        result.append(solution(stdin[i+1:]) + \" \" + a + \" \" + b)\n    return '\\n'.join(result)\n\nTest Cases\n\nInput:\n\n3\n7 5 3\n6 1 1\n6 6 1\n5 2 2\n\nOutput:\n\ntleelte\nqwerty\nvvvvvv\nabcde\n'''\ndef"
    },
    {
        "number": 4324,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def dfs(p):\n        if p > 26:\n            return\n        if not s.startswith(p):\n            return\n        if p == s[p]:\n            return\n        \n        s.replace(p, \"\")\n        dfs(p + 1)\n        dfs(p + 2)\n    \n    for _ in range(int(stdin.strip())):\n        s = stdin.strip()\n        dfs(0)\n        print(s)\n\nSolution\na = int(input())\ndef"
    },
    {
        "number": 4325,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, T = list(map(int, stdin.split()))\n    minutes = 0\n    for i in range(1, T+1):\n        minutes += 1\n        if minutes > N:\n            return str(minutes)\n    return str(minutes)"
    },
    {
        "number": 4325,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def takoyaki(n,x):\n        count=0\n        for t in range(0,x):\n            count+=n\n        return count\n    \n    def solution(n,x):\n        if x<=0:\n            return 0\n        s = takoyaki(n,x)\n        return min(s,s-x)\n    return str(solution(int(input()),int(input())))\n\nprint(solution(20,6))\n\ndef"
    },
    {
        "number": 4325,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    x = int(stdin.split()[1])\n    T = int(stdin.split()[2])\n    sum = 0\n    if T == 0:\n        return str(0)\n    if x == 1:\n        return str(T)\n    if T % 60 == 0:\n        sum += T//60\n    if T % 60 < 30:\n        sum += T//60*60\n        sum += T%60\n    if T % 60 > 15:\n        sum += T//60*60*60\n    if T % 60 < 45:\n        sum += T//60*60*60*60\n    sum += T%60*60*60*60\n    sum += T%60*60*60*60*60\n    sum += T//60*60*60*60*60*60*60\n    return str(sum)\n\n\"\"\"\n"
    },
    {
        "number": 4325,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N,T = map(int,stdin.split())\n    if N*T < 5000:\n        return \"-\"\n    minutes = (N*T + 200) // (20 + T)\n    return str(minutes)"
    },
    {
        "number": 4325,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, T = map(int, stdin.split())\n    answer = T * (N - 1)\n    return str(answer)\n\ndef"
    },
    {
        "number": 4325,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    takoyaki = [int(i) for i in stdin.split(\" \")]\n    N, T = takoyaki\n    result = 0\n    while N >= T:\n        takoyaki = [0 for i in range(N)]\n        N = N - T\n        for i in range(N):\n            takoyaki[i] = takoyaki[i] + 1\n        result = max(result, N)\n    return str(result)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4325,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n  N, T = map(int, stdin.split())\n  \n  takoyaki_table = [[0] * (N + 1) for _ in range(T + 1)]\n  \n  for i in range(1, T + 1):\n    takoyaki_table[i][0] = 1\n  \n  # for i in range(1, T + 1):\n  #   for j in range(1, N + 1):\n  #     takoyaki_table[i][j] = takoyaki_table[i - 1][j] + takoyaki_table[i - 1][j - 1]\n  \n  for i in range(2, T + 1):\n    for j in range(1, N + 1):\n      takoyaki_table[i][j] = takoyaki_table[i - 1][j] + takoyaki_table[i - 1][j - 1]\n      \n  answer = 0\n  \n  for i in range(T, 0, -1):\n    for j in range(1, N + 1):\n      if takoyaki_table[i][j] == N:\n        answer = max(answer, takoyaki_table[i - 1][j])\n  \n  return str(answer)\n\n-----------------\n\nsolution(stdin)"
    },
    {
        "number": 4325,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    print(n*t)\n    return 'inf'\n\nprint(solution(\"4 5 10 2\"));"
    },
    {
        "number": 4325,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, T = map(int, stdin.split())\n    if N < T:\n        return '-1'\n    if T == 1:\n        return str(N)\n    takoyaki_taken = 0\n    if T < 10:\n        takoyaki_taken = T\n    else:\n        takoyaki_taken = (10**6-1) - T\n    while takoyaki_taken > 0:\n        takoyaki_taken -= 1\n        if takoyaki_taken < 0:\n            return '-1'\n        N += 1\n        takoyaki_taken += 1\n    return str(N)\n"
    },
    {
        "number": 4325,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N,T = map(int,stdin.split())\n    minutes = 0\n    takoyaki = T\n    while takoyaki >= minutes:\n        minutes += 1\n        takoyaki -= T\n    return str(minutes)\n\nprint(solution(input()))\n\n\n\ndef"
    },
    {
        "number": 4326,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n  n = int(stdin.strip())\n  student_num = list(map(int, stdin.split()))\n  group_num = len(student_num)\n  if group_num >= 3:\n    return group_num\n  else:\n    return 0\n\nInput:\n2\n5\n\nOutput:\n0\n"
    },
    {
        "number": 4326,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    temp = []\n    for _ in range(N):\n        tmp = list(map(int, input().split()))\n        temp.append(tmp)\n    for i in range(1,N):\n        if temp[i][0] < 3:\n            temp[i] = [2]\n        else:\n            temp[i] = [1]\n    for i in range(N-2):\n        for j in range(i+2,N):\n            if temp[i][j] == 1 and temp[j][i] == 1:\n                temp[i][j] = 0\n    for i in range(N):\n        for j in range(i,N):\n            if temp[i][j] == 1:\n                temp[i][j] = 0\n    return''.join([str(x) for x in temp])\n'''\n\n\ndef"
    },
    {
        "number": 4326,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    max_groups = 2\n\n    for i in range(N):\n        temp = list(map(int, input().split()))\n        temp.sort()\n        if len(temp) > max_groups:\n            max_groups = len(temp)\n    return max_groups\n\ndef"
    },
    {
        "number": 4326,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N == 0:\n        return 0\n    if N == 1:\n        return 1\n    answer = []\n    for i in range(3, N):\n        answer.append(i)\n        if N % i == 0:\n            return i\n    return answer[-1]\n\"\"\"\n\nclass Solution:\n    def groupThemes(self, N: int) -> int:\n        \"\"\"\n        :type N: int\n        :rtype: int\n        \"\"\"\n        if N == 0:\n            return 0\n        if N == 1:\n            return 1\n        answer = []\n        for i in range(3, N):\n            answer.append(i)\n            if N % i == 0:\n                return i\n        return answer[-1]"
    },
    {
        "number": 4326,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n  n = int(stdin.strip())\n  if n < 3:\n    return 'Error'\n  if n % 3!= 0:\n    return 'Error'\n  else:\n    return 'Error'\n\ndef"
    },
    {
        "number": 4326,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    student_list = []\n    for line in stdin:\n        tmp = line.split(' ')\n        if tmp[0] == 'G':\n            student_list.append(tmp[1])\n        else:\n            temp = []\n            temp.append(int(tmp[1]))\n            temp.append(int(tmp[2]))\n            student_list.append(temp)\n    students = len(student_list)\n    if students < 3:\n        return 1\n    groups = int(math.sqrt(students))\n    if groups < 3:\n        return groups\n    student_list.sort()\n    for group in student_list:\n        if group[1] - group[0] >= groups:\n            return groups\n        for i in range(group[0], group[1] + 1):\n            if i in student_list:\n                return groups\n    return 1\n\nfor _ in range(int(input())):\n    print(solution(input()))\n"
    },
    {
        "number": 4326,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n  n = int(stdin)\n  if n%3 == 0 or n%5 == 0:\n    return n\n  else:\n    return -1\n\n-----Sample Runtime-----\nimport sys; input = sys.stdin.readline\n\ndef"
    },
    {
        "number": 4326,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    if N < 3 or N % 3!= 0:\n        return 0\n    if N == 3:\n        return 2\n    for i in range(1, N//3+1):\n        for j in range(3):\n            if (N-i) % 3 == j:\n                return i\n    return N-1\nprint(solution(input()))\n\n(Variant of solution that can be done more efficiently)\n\ndef"
    },
    {
        "number": 4326,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def divide(N, M):\n        if N == 1:\n            return [0, 0]\n        elif M == 1:\n            return [1, 0]\n        elif N > M:\n            return divide(N//2, M//2)\n        else:\n            return divide(N, M//2) + divide(N//2, M)\n    def print_groups(groups):\n        print(\" \".join([str(g[0]) for g in groups]))\n        print(\" \".join([str(g[1]) for g in groups]))\n        print(\"\\n\")\n    N, M = map(int, stdin.split())\n    groups = divide(N, M)\n    print_groups(groups)\n    return groups[0][0]\n\nprint(solution(input()))"
    },
    {
        "number": 4326,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    student_list = []\n    for i in range(0, len(stdin)):\n        student_list.append(stdin[i].split())\n    \n    student_list.sort(key=lambda x:len(x[0]), reverse=True)\n    print(len(student_list))\n\n    for i in range(0, len(student_list)):\n        if len(student_list[i]) > len(student_list[i+1]):\n            student_list[i], student_list[i+1] = student_list[i+1], student_list[i]\n        \n    for i in range(0, len(student_list)):\n        for j in range(i+1, len(student_list)):\n            if len(student_list[i][0]) < len(student_list[j][0]):\n                student_list[i], student_list[j] = student_list[j], student_list[i]\n                \n    print(student_list)\n    return '\\n'.join(student_list[0])\n\n-----Sample Output-----\n3\n\n-----Sample Input-----\n8\n\n-----Sample Output-----\n2\n\nFor example, you can form a group of three students and another of five students.\ndef"
    },
    {
        "number": 4327,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, P = map(int, stdin.split())\n    return str(P * (A * (P-1) / 2))\n"
    },
    {
        "number": 4327,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    aprops = list(map(int, stdin.split()))\n    i, j = 0, 0\n    count = 0\n    while i < len(aprops) - 1:\n        if aprops[i] < aprops[i + 1]:\n            j += 1\n        elif aprops[i] > aprops[i + 1]:\n            i += 1\n            count += j + 1\n        else:\n            i += 1\n            j = 0\n    return str(count)\n\"\"\"\n\ndef"
    },
    {
        "number": 4327,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, P = map(int, stdin.split())\n    max_apple_pies = P*2 + 3\n    apple_pie = [0]*max_apple_pies\n    cubes = [0]*max_apple_pies\n    max_apple_pie = 0\n    for _ in range(P):\n        p_input = stdin.split()\n        if p_input[0] == 'a':\n            apple_pie[0] += 1\n        else:\n            apple_pie[1] += 1\n        cubes[0] = max(cubes[0], apple_pie[1]*2)\n        cubes[1] = max(cubes[1], apple_pie[0]*2)\n        if apple_pie[0] == P:\n            apple_pie[0] = 0\n        if apple_pie[1] == P:\n            apple_pie[1] = 0\n        max_apple_pie = max(max_apple_pie, cubes[0]+cubes[1])\n        if max_apple_pie > max_apple_pies:\n            max_apple_pie = max_apple_pies\n    return str(max_apple_pie)\n"
    },
    {
        "number": 4327,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, P = stdin.split()\n    A = int(A)\n    P = int(P)\n    \n    apple_pies = [i for i in range(A, P + 1)]\n    sims = []\n    \n    for i in range(2, len(apple_pies)):\n        sims.append(i)\n        sims.append(apple_pies[i - 2] - 2 * apple_pies[i - 1])\n        sims.append(apple_pies[i - 1] - 2 * apple_pies[i - 2])\n    \n    sims.append(apple_pies[len(apple_pies) - 1] - 2 * apple_pies[len(apple_pies) - 2])\n    \n    max_apple_pie = 0\n    for sim in sims:\n        if max_apple_pie < sim:\n            max_apple_pie = sim\n    \n    print(max_apple_pie)\n\n-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nclass Solution:\n    def solution(self, A: int, P: int) -> int:\n        if P == 0:\n            return A\n        \n        self.answer = 0\n        # \uc591\uc218\uc778 \uacbd\uc6b0\n        if (A % P) == 0:\n            self.answer = A / P\n            return self.answer\n        else:\n            # \uc74c\uc218\uc778 \uacbd\uc6b0\n            self.answer = (A / P) + 1\n            return self.answer\n\n\n-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n"
    },
    {
        "number": 4327,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n  A, P = stdin.split()\n  a_val, p_val = map(int, A.split())\n  print(max(a_val, p_val))\n\n-----Quick note-----\nWe use a queue to store the maximum apples we have and if we have that many, we will move one apple piece at a time. If we have fewer than that many, we will have to take all the pieces of apple.\nWe then check if the remaining pieces have more than the size we have. If so, we will move the rest of the pieces.\nWe then make all the remaining pieces of apple at a time, with the size of the remaining pieces we have, and the size of the remaining pieces we have\n"
    },
    {
        "number": 4327,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n  A, P = map(int, stdin.split())\n  \n  # Number of pieces\n  n = 2 ** A\n  \n  # Number of pieces per each iteration\n  P = [P // (2 ** i) for i in range(n+1)]\n  \n  # Number of pieces per iteration\n  P[0] += P[1]\n  P[1] += P[0]\n  \n  # Number of pieces per iteration\n  P[n-1] += P[n-2]\n  P[n-2] += P[n-1]\n  \n  # Number of pieces per iteration\n  P[n-3] += P[n-4]\n  P[n-4] += P[n-3]\n  \n  # Number of pieces per iteration\n  P[n-5] += P[n-6]\n  P[n-6] += P[n-5]\n  \n  # Number of pieces per iteration\n  P[n-7] += P[n-8]\n  P[n-8] += P[n-7]\n  \n  return ''.join(map(str, P))"
    },
    {
        "number": 4327,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, P = map(int, stdin.split())\n    \n    apple_pies = (A * P) // 2\n    \n    return str(max(apple_pies, max(apple_pies, apple_pies)))"
    },
    {
        "number": 4327,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, P = map(int, stdin.split())\n    apples_s = P // 3\n    apples = P % 3\n    apples_pie = 3\n    if P % 2!= 0:\n        apples_pie += 1\n    if P % 3 == 0:\n        apples_pie += 2\n    if 0 <= apples_s <= apples_pie:\n        return str(apples_pie)\n    if apples_s < apples_pie:\n        apples_pie = apples_s\n    if apples_s > 3:\n        apples_s -= 3\n        apples_pie -= 2\n    if 0 <= apples_s <= apples_pie:\n        return str(apples_pie)\n    if apples_s < 3:\n        apples_s += 3\n        apples_pie -= 2\n    if 0 <= apples_s <= apples_pie:\n        return str(apples_pie)\n    if apples_s > 3:\n        apples_s -= 3\n        apples_pie -= 2\n    return str(apples_pie)\n"
    },
    {
        "number": 4327,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, P, N = map(int, stdin.split())\n    A = sorted(set([x for x in range(A)]))\n    P = sorted(set([x for x in range(P)]))\n    # print(A, P)\n    s = 0\n    for p in P:\n        s += p\n    for a in A:\n        s -= a\n    # print(s)\n    return str(s)\n\n----Explanation----\nin case you have 3 apples.\nin case you have 3 apples and 3 P pieces.\nin case you have 1 apple pie.\nin case you have 2 pieces of apple.\nso, s = A + [sum(P)] + [a + (P - a) for a in A] + [a * 3 for a in A]\n\noutput will be:\n3\n\nto make one apple pie.\n\nwith 3 apples.\nwith 3 apples and 3 P pieces.\nwith 1 apple pie.\nwith 1 apple pie and 3 pieces of apple.\n\"\"\""
    },
    {
        "number": 4327,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, P = map(int, stdin.split())\n    A_pies = [int(i) for i in range(1, (A + 1) * P + 1)]\n    answer = max(A_pies)\n    return str(answer)\n"
    },
    {
        "number": 4328,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split()\n    a, b = int(lines[0]), int(lines[2])\n    if a % b == 0:\n        print(a + b)\n    else:\n        print(b - a)\n\n\nprint(solution(inp))\n"
    },
    {
        "number": 4328,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n  \n  n = int(stdin)\n  answer = []\n  for i in range(n):\n    a = int(input())\n    answer.append(a)\n  \n  if len(answer) % 2 == 0:\n    print(sum(answer[::2])//2)\n  else:\n    print(sum(answer[1::2])//2)\n  return answer\n\nprint(solution(input()))\n"
    },
    {
        "number": 4328,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    b = a[:]\n    for i in range(len(b)):\n        if a[i] % b[i]!= 0:\n            b[i] -= a[i]\n        else:\n            b[i] = 0\n    for i in range(len(a)):\n        if b[i] % a[i]!= 0:\n            a[i] -= b[i]\n        else:\n            a[i] = 0\n    return ''.join(str(x) for x in a)\n\nprint(solution(\"4 12\"))"
    },
    {
        "number": 4328,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a % b == 0:\n        return str(a//b)\n    else:\n        return str(b - a)"
    },
    {
        "number": 4328,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B = list(map(int, stdin.split()))\n    if A % B == 0:\n        return A - B\n    else:\n        return B - A\n"
    },
    {
        "number": 4328,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A % B == 0:\n        return str(A + B)\n    else:\n        return str(B - A)\n"
    },
    {
        "number": 4328,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    answer = ''\n    for line in stdin:\n        if '-' in line:\n            numbers = line.split('-')\n            first = int(numbers[0])\n            second = int(numbers[1])\n            if first > second:\n                answer += str(first - second) + '-'\n            else:\n                answer += str(second - first) + '-'\n        else:\n            answer += line +''\n    return answer\n"
    },
    {
        "number": 4328,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A % B == 0:\n        return str(A - B)\n    else:\n        return str(B - A)"
    },
    {
        "number": 4328,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.split()\n    A = int(line[0])\n    B = int(line[1])\n\n    if A % B == 0:\n        return str(A) +'+'+ str(B)\n    else:\n        return str(B) +'-'+ str(A)\n\n-----Sample Output-----\nSample Input:\n4 12\n\nSample Output:\n16\n"
    },
    {
        "number": 4328,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    for line in stdin:\n        line = line.strip()\n        temp = line.split(' ')\n        a = int(temp[0])\n        b = int(temp[1])\n        if a % b == 0:\n            print(a + b)\n        else:\n            print(b - a)"
    },
    {
        "number": 4329,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\ndef"
    },
    {
        "number": 4329,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def get_id(s):\n        return int(s.replace('chokudai','').replace('z','').replace(' ', ''))\n    s = input()\n    t = get_id(input())\n    print('Yes' if t == s else 'No')\n"
    },
    {
        "number": 4329,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    answer = ''\n    for _ in range(len(stdin)):\n        if stdin[-1] == 'z':\n            answer += 'Yes'\n            stdin = stdin[:-1]\n        else:\n            answer += 'No'\n    return answer\n"
    },
    {
        "number": 4329,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = ''.join(sorted(list(stdin), reverse=True))\n    if s == ''.join(sorted(list(set(s)))):\n        print('Yes')\n    else:\n        print('No')\n\"\"\"\n\ndef"
    },
    {
        "number": 4329,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    input_string = stdin.split()\n    S = input_string[0].lower()\n    T = input_string[1].lower()\n    for i in range(2, len(input_string)):\n        S = S + input_string[i].lower()\n    print(T == S)\n    return T\n\n-----Constraints-----\n - S and T are strings consisting of lowercase English letters.\n - 1 \\leq |S| \\leq 10\n - |T| = |S| + 1\n\n-----Input-----\nInput is given from Standard Input in the following format:\nS\nT\n\n-----Output-----\nIf T satisfies the property in Problem Statement, print Yes; otherwise, print No.\n\n-----Sample Input-----\nchokudai\nchokudaiz\n\n-----Sample Output-----\nYes\n\nchokudaiz can be obtained by appending z at the end of chokudai.\ndef"
    },
    {
        "number": 4329,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if ''.join(set(stdin)) == ''.join(set(stdin)) else 'No'\n"
    },
    {
        "number": 4329,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.split()\n    T = stdin.split()\n    \n    if len(S)!= len(T):\n        return 'No'\n    else:\n        for i in range(len(S)):\n            if S[i]!= T[i]:\n                return 'No'\n        else:\n            return 'Yes'\n\"\"\"\n\nimport collections\n\nclass Solution:\n    def solution(self, stdin):\n        S = stdin.split()\n        T = stdin.split()\n        N = len(S)\n        M = len(T)\n        table = [[0] * N for _ in range(N)]\n        for i in range(N):\n            table[i][i] = 1\n            for j in range(M):\n                if i == j:\n                    table[i][j] = 1\n                    continue\n                table[i][j] = table[i][j + 1] + table[i][j]\n        \n        for i in range(N):\n            for j in range(M):\n                if table[i][j] % 2 == 0:\n                    table[i][j] = table[i][j] - 1\n                \n        for i in range(N):\n            for j in range(M):\n                if S[i]!= T[j]:\n                    return 'No'\n        else:\n            return 'Yes'\n"
    },
    {
        "number": 4329,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def getString(str: str) -> str:\n        return str[1:-1]\n\n    S = stdin.split()\n    T = stdin.split()\n    for i in range(len(S)):\n        S[i] = getString(S[i])\n    for i in range(len(T)):\n        T[i] = getString(T[i])\n    if len(set(T)) == 1:\n        print('Yes')\n    else:\n        print('No')\n"
    },
    {
        "number": 4329,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return solution_str(stdin, solution_str_v1(stdin), solution_str_v2(stdin))\n\"\"\"\nfrom collections import defaultdict\n\nfrom random import randint\n\ndef"
    },
    {
        "number": 4329,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n    if s == t:\n        return \"Yes\"\n    elif s not in t:\n        return \"No\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4330,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n  A, B = map(int, stdin.split())\n  for i in range(2, min(A, B) + 1):\n    if A % i == 0:\n      if B % i == 0:\n        return str(i * 2 - 1)\n      else:\n        return str(i * 2)\n  return IMPOSSIBLE\n\"\"\"\nclass Solution:\n    def find_closest(self, arr, num):\n        n = len(arr)\n        diff = []\n        for i in range(n):\n            diff.append(abs(num - arr[i]))\n        return diff.index(min(diff))\n    \n    def linear_search(self, arr, target):\n        \"\"\"\n        return index of the target in arr\n        \"\"\"\n        for i in range(len(arr)):\n            if arr[i] == target:\n                return i\n        return -1\n    \n    def binary_search(self, arr, target, start, end):\n        while start <= end:\n            mid = start + (end - start) // 2\n            if arr[mid] == target:\n                return mid\n            elif arr[mid] > target:\n                end = mid - 1\n            else:\n                start = mid + 1\n        return -1\n"
    },
    {
        "number": 4330,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(' ')[0])\n    A = int(stdin.split(' ')[1])\n    B = int(stdin.split(' ')[2])\n    for i in range(1, n + 1):\n        if (i == A) or (i == B):\n            continue\n        if i - A <= B - i:\n            print(i)\n            return\n        print(i)\n    print(IMPOSSIBLE)\n\"\"\"\n\ndef"
    },
    {
        "number": 4330,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4330,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    numbers = [list(map(int, stdin.split())) for _ in range(2)]\n\n    # three variables\n    a = b = c = 0\n\n    for _ in range(2):\n        a, b, c = numbers[0]\n\n    # 3 variables\n    # for i in range(3):\n    #     a, b = numbers[i]\n    #     c = a\n    #\n    # # for i in range(3):\n    # #     a = numbers[i]\n    # #     b = numbers[(i + 1) % 3]\n    #\n    # # for i in range(2):\n    # #     a = numbers[i]\n    # #     b = numbers[(i + 1) % 2]\n    #\n    # for i in range(2):\n    #     a = numbers[i]\n    #     b = numbers[(i + 1) % 3]\n    #     c = a\n\n    def check(a, b, c, a_prev, b_prev, c_prev):\n        if a == a_prev:\n            return False\n        elif b == b_prev:\n            return False\n        elif c == c_prev:\n            return False\n        else:\n            return True\n\n    def backtracking(nums, result):\n        if len(result) == 3:\n            return result\n\n        # solve the three variables\n        # 1. check if we can get to the third variable\n        # 2. check if we can get to the last variable\n        # 3. check if we have three variables in the solution\n        for i in range(3):\n            if check(nums[0], nums[1], nums[2], numbers[i][0], numbers[i][1],\n                     numbers[i][2]):\n                nums[i] = numbers[i][0], numbers[i][1], numbers[i][2]\n                result.append(nums[i])\n                if backtracking(nums, result):\n                    return result\n                nums[i] = numbers[i][0], numbers[i][1], numbers[i][2]\n                result.pop()\n\n        return IMPOSSIBLE\n\n    return backtracking(numbers, [])\n"
    },
    {
        "number": 4330,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n  a, b = map(int, stdin.split())\n  if a == b:\n    return \"IMPOSSIBLE\"\n  if a*b > 10**9:\n    return \"IMPOSSIBLE\"\n  if a*b % 10**9!= 0:\n    return \"IMPOSSIBLE\"\n  return str(a*b - b)\n"
    },
    {
        "number": 4330,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    while a and b:\n        if a > b:\n            a, b = b, a\n        elif a < b:\n            a, b = b, a\n        elif a == b:\n            a, b = b, a\n    if a:\n        return str(a)\n    else:\n        return str(int(b))"
    },
    {
        "number": 4330,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A == B:\n        return 'IMPOSSIBLE'\n    else:\n        return solution(str(B - A)) + '=' + str(B - A)"
    },
    {
        "number": 4330,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    A, B = map(int, stdin.split())\n    answer = str(abs(B - A))\n    return answer\n"
    },
    {
        "number": 4330,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a > b:\n        return 'IMPOSSIBLE'\n    if a <= b:\n        return 'IMPOSSIBLE'\n    return str(b - a) +'' + str(a) +'' + str(b)\n"
    },
    {
        "number": 4330,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    k = 0\n    for line in stdin:\n        k += int(line) - (k % 10)\n    return str(k)\n"
    },
    {
        "number": 4331,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    if len(str(stdin)) > 3:\n        print('Yes')\n    else:\n        print('No')"
    },
    {
        "number": 4331,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    answer = True\n    for i in range(1000):\n        digit = str(i)\n        if digit == '7':\n            answer = answer and True\n        else:\n            answer = answer and False\n    if answer:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4331,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if str[-1] == \"7\" else \"No\""
    },
    {
        "number": 4331,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    for digit in range(100, 999):\n        if digit == 7:\n            print('Yes')\n            return\n    print('No')\n    return\n\nTime complexity: O(n)\nSpace Complexity: O(1)\n'''\ndef"
    },
    {
        "number": 4331,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def convert(n):\n        if n == \"7\":\n            return \"Yes\"\n        else:\n            return \"No\"\n\n    for _ in range(int(stdin)):\n        n = int(stdin)\n        if n % 10 == 7:\n            return convert(n)\n    return convert(n)\n    \"\"\"\n    list_digit = [int(d) for d in str(n)]\n    # print(list_digit)\n    for i in range(len(list_digit)-1, 0, -1):\n        if list_digit[i] == 7:\n            return \"Yes\"\n    return \"No\"\n\"\"\"\n\ndef"
    },
    {
        "number": 4331,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    digit = int(stdin[::-1])\n    if digit == 7:\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 4331,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    [n, k] = [int(x) for x in stdin.split(' ')]\n    if n % k!= 0:\n        return 'No'\n    return 'Yes'\n\"\"\""
    },
    {
        "number": 4331,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    digits = [i for i in range(10)]\n    count = [0, 0, 0]\n    answer = \"\"\n    for i in range(9, -1, -1):\n        if digits[i] == 7:\n            answer += \"Yes\"\n            count[0] += 1\n        else:\n            answer += \"No\"\n            count[1] += 1\n    for i in range(9, -1, -1):\n        answer += \" \"\n        if digits[i] == 7:\n            answer += \"Yes\"\n            count[0] += 1\n        else:\n            answer += \"No\"\n            count[1] += 1\n    for i in range(9, -1, -1):\n        answer += \" \"\n        answer += \" \"\n        answer += \" \"\n        answer += str(count[i])\n        if count[i] >= 2:\n            answer += \"Yes\"\n            count[i] -= 2\n        else:\n            answer += \"No\"\n            count[i] -= 1\n    if count[0] >= 2 and count[1] >= 2:\n        answer += \"Yes\"\n    else:\n        answer += \"No\"\n    return answer.rstrip()\n\n\"\"\"\ndef"
    },
    {
        "number": 4331,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    number = list(map(int,stdin.split()))\n\n    for idx,digit in enumerate(number):\n        if idx+1>=len(number):\n            break\n        if digit==7:\n            if number[idx+1]==7:\n                return \"Yes\"\n            else:\n                return \"No\"\n\n    return \"No\"\n\nConstraints\n1 <= N <= 10^3\n\nInput Format\nFirst and only argument is a three-digit integer N.\n\nOutput Format\nPrint Yes if N contains the digit 7, otherwise print No.\n\nSample Input\n121\n\nSample Output\nNo\n"
    },
    {
        "number": 4331,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n%7 == 0:\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 4332,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    print(N % N == 0 and N - N % N == 0)\n\n-----Sample Input-----\nInput: 4\n\n-----Output-----\nYes\n\nIn this input, 4 is not a valid integral number.\n\"\"\"\n\ndef"
    },
    {
        "number": 4332,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    sum = 0\n    for i in str(n):\n        sum += int(i)\n    return str(sum % n)\n    \n-----Expected Output-----\nYes\n\nInput\n22\n\nOutput\nYes\n\nExplanation\nn = 22.\nThe total number is 22, and the sum is 29.\nThus, sum = 22.\n\nSo, we have solved S(22) = 29 = 21.\n\"\"\"\n\nclass Solution:\n    def solution(self, n):\n        return str(int(n / 9))\n"
    },
    {
        "number": 4332,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 4332,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    if N % 10 == 0:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4332,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    if int(stdin) % 2!= 0:\n        return \"No\"\n    sum = 0\n    for digit in str(int(stdin)):\n        sum += int(digit)\n    if sum % 10 == 0:\n        return \"Yes\"\n    else:\n        return \"No\"\n\nprint(solution(12))\n"
    },
    {
        "number": 4332,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if int(stdin) % int(stdin[::-1]) == 0 else \"No\"\n"
    },
    {
        "number": 4332,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n    \n    \n    return \n\n-----Sample Output-----\nNo\n\nIn this input, N=12.\nAs S(12) = 1 + 2 = 3, S(N) does not divide N.\n"
    },
    {
        "number": 4332,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if int(stdin) % int(stdin.split(' ')[1]) == 0 else 'No'\n\nSample Input\nInput\n12\n\nOutput\nNo\n\nExplanation\n12\n2\n\nSample Output\nYes\n\nExplanation\n12\n2\n\"\"\"\nimport math\nfrom collections import deque"
    },
    {
        "number": 4332,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\"\n"
    },
    {
        "number": 4332,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, d = map(int, stdin.split())\n    \n    return \"Yes\" if (n % d) == 0 else \"No\"\n"
    },
    {
        "number": 4333,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n    '''\n    def solution(stdin: str) -> str:\n        \n        x1,y1,x2,y2 = map(int, stdin.split())\n        \n        if x2-x1>0 and y2-y1>0:\n            x = (x1+x2)/2\n            y = (y1+y2)/2\n            \n            if x>=x1 and y>=y1:\n                return \"-1,0,-1,0\"\n            elif x<=x2 and y<=y2:\n                return \"-1,0,0,0\"\n            else:\n                return str(x) + \",\" + str(y)\n        else:\n            return \"0,0\"\n    return solution(stdin)"
    },
    {
        "number": 4333,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x,y,x_2,y_2 = map(int,stdin.split())\n    \n    #base cases\n    if x_1 == x_2 and y_1 == y_2:\n        return '0'\n    \n    if x_1 == x_2 and y_2!= y_1:\n        return '0'\n    \n    if x_1!= x_2 and y_1!= y_2:\n        return '0'\n    \n    #backtrace recursion\n    #because of the non-constraints of the method, we can use a dfs, so that we can do the same thing with different values.\n    answer = ''\n    def backtrace(x,y,x_2,y_2):\n        nonlocal answer\n        if x==x_2 or y==y_2:\n            answer = answer + str(x) + str(y)\n            return\n        \n        #when only the first value is the last value, then we must have the non-constraint in the other cases\n        if x==x_2:\n            x = x_1\n            y = y_1\n            answer = answer + str(x) + str(y)\n            \n            backtrace(x,y,x_2,y_2)\n            \n        #when first value is the last value, then we must have the non-constraint in the other cases\n        if y==y_2:\n            x = x_1\n            y = y_1\n            answer = answer + str(x) + str(y)\n            \n            backtrace(x,y,x_2,y_2)\n        \n        #when first value is not the last value, then we must have the non-constraint in the other cases\n        else:\n            x = x_1\n            y = y_1\n            answer = answer + str(x) + str(y)\n            \n            backtrace(x,y,x_2,y_2)\n            \n        #after the last value, we must have the non-constraint in the other cases\n        if x==x_2 and y_2==y_1:\n            x = x_1\n            y = y_1\n            answer = answer + str(x) + str(y)\n            \n            backtrace(x,y,x_2,y_2)\n        \n        #the last two values are always the same value, so we just need to do the same thing with the other two values\n        if x_2==x_1 and y_2==y_1:\n            x = x_1\n            y = y_1\n            answer = answer + str(x) + str(y)\n            \n            backtrace(x,y,x_2,y_2)\n        \n        #the last two values are different, so we have to check the first two values and to do the same thing with the other two values\n        if x_2==x_1 and y_2==y_1:\n            x = x_1\n            y = y_1\n            answer = answer + str(x) + str(y)\n            \n            backtrace(x,y,x_2,y_2)\n        \n        #the last two values are different, so we have to check the first two values and to do the same thing with the other two values\n        if x_2==x_1 and y_2==y_1:\n            x = x_1\n            y = y_1\n            answer = answer + str(x) + str(y)\n            \n            backtrace(x,y,x_2,y_2)\n        \n    backtrace(x,y,x_2,y_2)\n    return answer\n\nFor example, given the following inputs:\n\nx_1 1 y_1\nx_2 1 y_2\nx_3 1 y_3\nx_4 1 y_4\n\nso the output should be\n\n0 1 -1\n0 -1 -1\n0 -1 1\n0 1 0\n0 0 0\n0 -1 -1\n\nNote that since x_1,y_1,x_2,y_2 are not equal, they must be equal to each other.\n\nConstraints:\n\n1 <= x_1,y_1 <= 100\n0 <= x_2,y_2 <= 100\n0 <= x_3,y_3 <= 100\n0 <= x_4,y_4 <= 100\n\n\"\"\"\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        x,y,x_2,y_2 = map(int,stdin.split())\n        \n        #base cases\n        if x_1 == x_2 and y_1 == y_2:\n            return '0'\n        \n        if x_1 == x_2 and y_2!= y_1:\n            return '0'\n        \n        if x_1!= x_2 and y_1!= y_2:\n            return '0'\n        \n        #backtrace recursion\n        #because of the non-constraints of the method, we can use a dfs, so that we can do the same thing with different values.\n        answer = ''\n        def backtrace(x,y,x_2,y_2):\n            nonlocal answer\n            if x==x_2 or y==y_2:\n                answer = answer + str(x) + str(y)\n                return\n            \n            #when only the first value is the last value, then we must have the non-constraint in the other cases\n            if x==x_2:\n                x = x_1\n                y = y_1\n                answer = answer + str(x) + str(y)\n                \n                backtrace(x,y,x_2,y_2)\n                \n            #when first value is the last value, then we must have the non-constraint in the other cases\n            if y==y_2:\n                x = x_1\n                y = y_1\n                answer = answer + str(x) + str(y)\n                \n                backtrace(x,y,x_2,y_2)\n            \n            #when first value is not the last value, then we must have the non-constraint in the other cases\n            else:\n                x = x_1\n                y = y_1\n                answer = answer + str(x) + str(y)\n                \n                backtrace(x,y,x_2,y_2)\n                \n            #after the last value, we must have the non-constraint in the other cases\n            if x==x_2 and y_2==y_1:\n                x = x_1\n                y = y_1\n                answer = answer + str(x) + str(y)\n                \n                backtrace(x,y,x_2,y_2)\n"
    },
    {
        "number": 4333,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x1,y1,x2,y2=map(int,stdin.split())\n    result=str(x1+x2+y1-y2)\n    return result\n"
    },
    {
        "number": 4333,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x_1,x_2,y_1,y_2,x_3,y_3,x_4,y_4 = map(int,stdin.split(\" \"))\n    answer = \"\"\n    # left\n    if x_1 < x_2 and y_1 < y_2:\n        answer = \"-\" + str(x_1 + y_1)\n    # right\n    elif x_2 > x_1 and y_2 > y_1:\n        answer = \"-\" + str(x_2 + y_2)\n    # bottom\n    elif x_3 > x_2 and y_3 < y_1:\n        answer = \"-\" + str(x_3 + y_3)\n    # top\n    elif x_4 > x_3 and y_4 > y_2:\n        answer = \"-\" + str(x_4 + y_4)\n    return answer\n\n(0,0),(0,1),(-1,1),(-1,0) is the four vertices of a square in counter-clockwise order.\nNote that (x_3,y_3)=(1,1),(x_4,y_4)=(1,0) is not accepted, as the vertices are in clockwise order.\n\"\"\"\n\ndef"
    },
    {
        "number": 4333,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x1,y1,x2,y2 = map(int, stdin.split())\n    x_1 = int(x1)\n    x_2 = int(x2)\n    y_1 = int(y1)\n    y_2 = int(y2)\n    answer = []\n    def solve(x_1, x_2, y_1, y_2):\n        if x_1 <= x_2 and y_1 <= y_2:\n            x_3 = x_2 - x_1\n            y_3 = y_2 - y_1\n            answer.append((x_1,y_1))\n            answer.append((x_1 + x_2 - 2*x_3,y_1 + y_2 - 2*y_3))\n            answer.append((x_1 + x_2 - 2*x_3,y_1 + y_2 + y_3 - 2*y_3))\n            answer.append((x_1 + x_2 + x_3,y_1 + y_2 + y_3 - 2*y_3))\n            answer.append((x_1 + x_2 + x_3,y_1 + y_2 - 2*y_3))\n            answer.append((x_1 + x_2 - 2*x_3,y_1 + y_2 - 2*y_3))\n            answer.append((x_1 - x_2,y_1 - y_2))\n            answer.append((x_1 - x_2,y_1 - y_2))\n            answer.append((x_1 - x_2,y_1 + y_2))\n            answer.append((x_1 - x_2,y_1 + y_2))\n            answer.append((x_1 - x_2,y_1 + y_2))\n            answer.append((x_1 - x_2,y_1 - y_2))\n            answer.append((x_1 + x_2,y_1 - y_2))\n            answer.append((x_1 + x_2,y_1 - y_2))\n            answer.append((x_1 + x_2,y_1 + y_2))\n            answer.append((x_1 + x_2,y_1 + y_2))\n        return answer\n    answer = solve(x_1,x_2,y_1,y_2)\n    print(f'[{\",\".join([str(x) for x in answer])}]')"
    },
    {
        "number": 4333,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x1,y1,x2,y2 = map(int,stdin.split())\n    def find(x1,y1):\n        if x1*y1 == 0:\n            return '.'\n        else:\n            return str(x1*y1)\n    def find(x2,y2):\n        if x2*y2 == 0:\n            return '.'\n        else:\n            return str(x2*y2)\n    x_1,x_2 = (x1,y1),(x2,y2)\n    ans = ''\n    for k in range(4):\n        for i in range(4):\n            for j in range(i+1,4):\n                ans += str(find(x_1[k],x_2[i])+find(x_1[k],x_2[j]))\n            ans += find(x_2[i],y_1)\n            ans += find(x_2[j],y_2)\n        ans += find(x_1[i],y_1)\n        ans += find(x_1[j],y_2)\n    return ans\n"
    },
    {
        "number": 4333,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x_1,y_1,x_2,y_2 = map(int,stdin.split())\n    x_3,y_3,x_4,y_4 = (x_1,y_1),(x_2,y_2),(x_3,y_3),(x_4,y_4)\n    x = (x_1,y_1)\n    y = (x_2,y_2)\n    z = (x_3,y_3)\n    for _ in range(n-1):\n        v = (x[0]+x[1],y[0]+x[1])\n        if v[0]==x[0] and v[1]==x[1]:\n            print(z[0],z[1],v[0],v[1])\n            z[1]+=1\n            continue\n        if v[0]==x[0] and v[1]==x[1]:\n            print(z[1],z[0],v[1],v[0])\n            z[1]+=1\n            continue\n        if v[1]==y[1] and v[0]==y[0]:\n            print(z[0],z[1],v[0],v[1])\n            z[0]+=1\n            continue\n        if v[1]==y[1] and v[0]==y[0]:\n            print(z[0],z[1],v[0],v[1])\n            z[0]+=1\n            continue\n        if v[0]==y[0] and v[1]==y[1]:\n            print(z[0],z[1],v[0],v[1])\n            z[0]+=1\n            continue\n        if v[0]==y[0] and v[1]==y[1]:\n            print(z[1],z[0],v[1],v[0])\n            z[1]+=1\n            continue\n        if v[1]==y[1] and v[0]==y[0]:\n            print(z[0],z[1],v[0],v[1])\n            z[0]+=1\n            continue\n    print(z[0],z[1])\n    print(z[0],z[1],z[0],z[1])\nsolution(\"0 0 0 1\")\n"
    },
    {
        "number": 4333,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n  x_1,y_1 = map(int, stdin.split())\n  x_2,y_2 = map(int, stdin.split())\n  x_3,y_3 = map(int, stdin.split())\n  x_4,y_4 = map(int, stdin.split())\n  return str(max(min(x_1,x_2),min(x_3,x_4))) + \" \" + str(max(min(y_1,y_2),min(y_3,y_4)))\n"
    },
    {
        "number": 4333,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = map(int, stdin.split(\" \"))\n    while True:\n        if (x1 + x2 + x1 == x2 + y2):\n            if (x1 + x2 == x1 + y2):\n                print(x1, y1)\n                print(x2, y2)\n                print(x1 + x2, y1 + y2)\n                return\n            else:\n                print(x1, y1)\n                print(x2, y2)\n                print(x1 + x2, y1 + y2)\n                return\n        x1, y1, x2, y2 = x1 + 1, y1 + 1, x2 - 1, y2 - 1\n"
    },
    {
        "number": 4333,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x,y = map(int, stdin.split())\n    if x<y:\n        x,y=y,x\n    y=y//2\n    if x+y<=100:\n        return str(x+y)\n    else:\n        return \"-\"\n\nprint(solution(\"0 0 0 1\"))\nprint(solution(\"1 1 0 1\"))\nprint(solution(\"0 0 0 1 2 2 2 2 2\"))\n"
    },
    {
        "number": 4334,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    S, T = map(str, stdin.split())\n    A, B = map(int, list(S))\n    U = list(T)\n    ans = 0\n    for i in range(1, A):\n        for j in range(i + 1, B + 1):\n            if A % i == 0 and B % j == 0:\n                ans += 1\n                break\n    print(ans)\nsolution(\"3 4\")\n"
    },
    {
        "number": 4334,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    cnt = 0\n    for _ in range(int(input())):\n        s, t = input().split()\n        s = list(s)\n        t = list(t)\n        i = 0\n        while i < len(s):\n            if s[i] == t[i]:\n                i += 1\n            else:\n                break\n        for _ in range(len(s)):\n            if s[i] == t[i]:\n                s[i] = '*'\n                cnt += 1\n            else:\n                break\n        s = ''.join(s)\n        print(s)\n    return str(cnt)"
    },
    {
        "number": 4334,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin) == 0 or stdin[0]!= 'S':\n        return '1'\n    \n    n = int(stdin[1])\n    if n < 1 or n > 10:\n        return '1'\n\n    s = list(stdin[2:].split())\n    u = list(stdin[1:].split())\n    if n >= len(s):\n        return '2'\n    \n    if n < len(s):\n        return '0'\n    \n    if u[0]!= 'U':\n        return '0'\n    \n    if len(u) < 3:\n        return '0'\n    \n    for i in range(len(s) - 2):\n        if s[i]!= u[i+1] and s[i]!= u[i+2]:\n            return '0'\n        else:\n            continue\n    \n    return '1'\n"
    },
    {
        "number": 4334,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A,B,U,S = map(int,stdin.split())\n    lst = []\n    for i in range(A+1):\n        lst.append([])\n    for i in range(B):\n        lst[i].append(stdin[i])\n    for i in range(A):\n        lst[i].append(stdin[S+i])\n    for i in range(B):\n        for j in range(A):\n            if lst[i][j] == U:\n                if i!= 0:\n                    lst[i][j] = lst[i-1][j]\n                else:\n                    lst[i][j] = U\n    answer = \"\"\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            answer += lst[i][j]\n    return answer\n\ndef"
    },
    {
        "number": 4334,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    s = list(map(lambda x: x.lower(), s))\n    a = [0] * 10\n    b = [0] * 10\n    for i in s:\n        if 'a' in i:\n            a[0] += 1\n        elif 'b' in i:\n            a[1] += 1\n        elif 'c' in i:\n            a[2] += 1\n        else:\n            a[3] += 1\n    for i in range(3, 10):\n        if a[i] > 0:\n            b[i] += 1\n    print(' '.join(list(map(str, a))))\n    print(' '.join(list(map(str, b))))\n\nTakahashi\n\n-----Sample Input-----\nred blue\n3 4\nred\n\n-----Sample Output-----\n2 4\n\nred\n\n-----Sample Input-----\nred blue\n3 4\nred\n\n-----Sample Output-----\n3 4\n\nred\n\n-----Sample Input-----\nred blue\n1 2\nred\n\n-----Sample Output-----\n1 2\n\nred\n\n-----Sample Input-----\nred blue\n2 1\nred\n\n-----Sample Output-----\n1 2\n\nTakahashi chose a ball with red written on it and threw it away.\nNow we have two balls with the string S and four balls with the string T.\ndef"
    },
    {
        "number": 4334,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin.split(\" \")\n    string = [string[0], string[1]]\n    string = \"\".join(string)\n    print(string)\n    for i in range(len(string)):\n        if string[i] == \"A\":\n            for j in range(len(string)):\n                if string[j] == \"B\":\n                    string[j] = \"C\"\n                    break\n                if string[j] == \"C\":\n                    string = \"\".join(string)\n                    break\n    print(string)\n    return string\n"
    },
    {
        "number": 4334,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n  a, b = stdin.split()\n  a, b = [int(i) for i in a.split()], [int(i) for i in b.split()]\n  U = a + b\n  S = list(set(a + b))\n  if len(S) == 1:\n    print(1)\n    return\n  if len(S) == 2:\n    print(S[0] + S[1])\n    return\n  for i in range(len(S)-1):\n    if S[i]!= S[i+1]:\n      print(S[i], S[i+1])\n      return\n  print(len(S) + 1)\n  return\n\nSolution\nInput\nred blue 3 4\nred\n\nOutput\n2 4\n\nTakahashi chose a ball with red written on it and threw it away.\nNow we have two balls with the string S and four balls with the string T.\ndef"
    },
    {
        "number": 4334,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split(\" \")\n    S = S.split(\" \")\n    T = T.split(\" \")\n    # print(S, T)\n\n    #T = T.replace('A', '0')\n    #T = T.replace('B', '1')\n\n    # print(T, S)\n\n    # if len(T) < len(S):\n    #     return \"2 4\"\n    if len(T) > len(S):\n        return \"2 4\"\n\n    if len(S) < len(T):\n        return \"2 4\"\n    \n    if len(T) == len(S):\n        return \"2 4\"\n\n    def toStr(S, T):\n        # print(S, T)\n        dic = {\n            'A': 0,\n            'B': 1,\n            'Z': 2,\n            'X': 3,\n            'C': 4,\n            'K': 5,\n            'J': 6,\n            'Q': 7,\n            'E': 8,\n            'R': 9\n        }\n        # print(dic)\n        return \" \".join([dic[x] for x in T])\n\n    def solve(S, T):\n        # print(S, T)\n        dic = {\n            'A': 0,\n            'B': 1,\n            'Z': 2,\n            'X': 3,\n            'C': 4,\n            'K': 5,\n            'J': 6,\n            'Q': 7,\n            'E': 8,\n            'R': 9\n        }\n\n        string = toStr(S, T)\n        # print(string)\n        index = len(string)\n        \n        for i in range(len(S)-1, -1, -1):\n            if string[i] == dic[S[i]]:\n                index = i\n                break\n        # print(index)\n        return index+1\n    \n    answer = solve(S, T)\n    return answer\n"
    },
    {
        "number": 4334,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin\n    answer = ''\n    # input = input.split()\n    # print(input)\n    # print(len(input))\n    # input.sort()\n    # print(input)\n    # input = input[::-1]\n    input = input.split()\n    for i in range(len(input)):\n        if input[i] == \"A\":\n            # input[i] = input[i].upper()\n            input[i] = input[i].upper()\n        if input[i] == \"B\":\n            input[i] = input[i].lower()\n        # print(input[i])\n    # print(input)\n\n    A = input[0]\n    B = input[1]\n    answer = A + B\n    # print(answer)\n    # print(input)\n    input.sort()\n    answer = input[0] + input[1]\n    # print(answer)\n    # print(input)\n    # print(input[0] + input[1])\n    # print(input[0] + input[1])\n    # input.sort()\n    # input[0] + input[1]\n    # input.sort()\n    # input[0] + input[1]\n\n    # input = input.split()\n    # print(input)\n    # print(len(input))\n    # input.sort()\n    # print(input)\n    # input = input[::-1]\n    # print(input)\n\n    return answer\n\ndef"
    },
    {
        "number": 4334,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, u = map(int, stdin.split())\n    c = (a + b + u) // 2\n    return str(c)\n\"\"\"\n\ndef"
    },
    {
        "number": 4335,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin) == 1:\n        return \"Yes\"\n    else:\n        x = stdin[0]\n        y = stdin[1]\n        if x!= y:\n            return \"No\"\n        else:\n            return \"Yes\"\n"
    },
    {
        "number": 4335,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    for s in stdin.split():\n        if s == T:\n            return \"Yes\"\n    return \"No\"\n\nThis is equivalent to finding the concatenation of two copies of a string.\nTime complexity of the above solution is O(N^2 * N), where N is the length of the string.\n\"\"\"\n\ndef"
    },
    {
        "number": 4335,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n  return 'Yes' if ''.join(sorted(stdin)) == stdin + ''.join(sorted(stdin)) else 'No'"
    },
    {
        "number": 4335,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Solution 1 - Python code\n    # print(str(len(stdin) - len(set(stdin))))\n    # print(len(set(stdin)))\n    # print(''.join(stdin))\n    # print(stdin[0]!= stdin[-1])\n    # print(len(set(stdin)) - len(set(stdin)))\n    # print(stdin[0] == stdin[-1])\n\n    # Solution 2 - Better Solution\n    if stdin == stdin[0] + stdin[-1]:\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 4335,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin) < 2:\n        return \"No\"\n    if len(stdin) == 2:\n        return stdin[0] + stdin[1]\n    else:\n        t = stdin[1]\n        for i in range(2,len(stdin)):\n            t = stdin[i] + t\n            if t in stdin:\n                return t\n    return \"No\"\n"
    },
    {
        "number": 4335,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nTime complexity: O(N)\nSpace Complexity: O(1)\n\n\"\"\"\nclass Solution:\n    def isValid(self, s: str, p: str, t: str) -> bool:\n        if p == s:\n            return True\n        if t == s:\n            return True\n        if p[0]!= t[0] or p[1]!= t[1]:\n            return False\n        return self.isValid(s[1:len(p)], p[1:len(p)], t[1:len(t)]) or \\\n               self.isValid(s[1:len(p)], p, t[1:len(t)]) or \\\n               self.isValid(s[1:len(p)], p[1:len(p)], t)\n\n\n    def isValid(self, s: str, p: str, t: str) -> bool:\n        if len(p)!= len(t) or len(t) == 0:\n            return False\n        # if p[0]!= t[0] or p[1]!= t[1]:\n        #     return False\n        # if p[0]!= t[0] or p[1]!= t[1] or p[2]!= t[2]:\n        #     return False\n        # return p[1] == t[1] and p[2] == t[2]\n        return self.isValid(s[1:len(p)], p[1:len(p)], t[1:len(t)]) \\\n               or self.isValid(s[1:len(p)], p, t[1:len(t)]) \\\n               or self.isValid(s[1:len(p)], p[1:len(p)], t)\n\nprint(Solution().isValid(stdin, \"abcabc\", \"abcabc\"))\nprint(Solution().isValid(stdin, \"a\", \"a\"))\nprint(Solution().isValid(stdin, \"ab\", \"ba\"))\nprint(Solution().isValid(stdin, \"aab\", \"aab\"))\nprint(Solution().isValid(stdin, \"abcabc\", \"abcabc\"))\n"
    },
    {
        "number": 4335,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def t_copy(string):\n        return string + string\n\n    def d_copy(string):\n        return string + string[::-1]\n\n    def count_copy(string):\n        count = 0\n        for i in range(len(string)):\n            if string[i]!= string[i + 1]:\n                count += 1\n        return count\n\n    def check(s, s_copy):\n        if len(s_copy) > len(s):\n            return False\n        if not s:\n            return True\n        return s[0] == s_copy[0] and check(s[1:], s_copy[1:])\n\n    n = int(stdin.strip())\n    s = list(stdin.strip())\n    for i in range(n):\n        s_copy = s[:]\n        s[0] = s[0] + s[1]\n        if not check(s[:], s[1:]):\n            print(\"No\")\n            return\n        s[1:] = s_copy[1:] + s_copy[:1]\n    print(\"Yes\")\n    return\n\nhttps://www.youtube.com/watch?v=HBppqVv8-vE\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4335,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A = list(stdin)\n    \n    while True:\n        if len(A) == 0:\n            break\n        if A[0] == A[-1]:\n            A.pop(0)\n            A.pop()\n            continue\n        if A[0] in A[1:-1] and A[-1] in A[1:-1]:\n            A.pop(0)\n            A.pop()\n            A.append(A[0])\n        if A[-1] == A[-2] and A[0] == A[1]:\n            A.pop(-2)\n            A.pop(-1)\n            A.pop(0)\n            continue\n        if len(A) >= 2:\n            A[-1] = A[-2]\n            A[-2] = A[-1]\n            A[-1] = A[0]\n            A[0] = A[-1]\n            A.pop()\n            A.pop()\n            A.pop()\n        else:\n            break\n    \n    if len(A) >= 2:\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 4335,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, S = map(int, stdin.split())\n    if N == 1:\n        return S == S\n    elif N == 2:\n        return S[0] == S[1] and S[1] == S[0]\n    elif N > 2:\n        return False"
    },
    {
        "number": 4335,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin[0])\n    S = stdin[1]\n    for i in range(1, N+1):\n        if S == S+S:\n            return \"Yes\"\n        else:\n            return \"No\"\n\nTime complexity: O(N)\nSpace Complexity: O(1)\nRuntime: 40 ms (88.71%)\nMemory Usage: 14.5 MB (87.08%)\n\n'''\n\n\nclass Solution:\n    def check(self, n: int, s: str) -> str:\n        dic = {'a': 0, 'b': 0, 'c': 0, 'd': 0, 'e': 0, 'f': 0, 'g': 0, 'h': 0, 'i': 0, 'j': 0, 'k': 0,\n               'l': 0,'m': 0, 'n': 0, 'o': 0, 'p': 0, 'q': 0, 'r': 0,'s': 0, 't': 0, 'u': 0, 'v': 0, 'w': 0,\n               'x': 0, 'y': 0, 'z': 0}\n        for i in s:\n            dic[i] += 1\n        for i in dic.values():\n            if i >= n:\n                return 'Yes'\n        return 'No'\n\n    def replace(self, st):\n        s = list(st)\n        count = 0\n        for i in range(len(s)):\n            if s[i] in {'c', 'e', 'i', 'k', 'l','m', 'p', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'}:\n                s[i] = 'a'\n                count += 1\n            elif s[i] in {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'}:\n                s[i] = 'z'\n                count += 1\n            else:\n                pass\n        return s\n"
    }
]