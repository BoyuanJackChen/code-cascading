[
    {
        "number": 4000,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input_data = list(map(lambda x: x.strip(), stdin.split()))\n    n = int(input_data.pop(0))\n    graph = dict()\n    for i in range(n - 1):\n        a, b = map(lambda x: int(x), input_data[i * 2: i * 2 + 2])\n        if a in graph.keys():\n            graph[a].append(b)\n        else:\n            graph[a] = [b]\n        if b in graph.keys():\n            graph[b].append(a)\n        else:\n            graph[b] = [a]\n\n    unions = list()\n    for i in range(n):\n        unions.append([i])\n    while len(unions)!= 0:\n        u = unions.pop()\n        for v in graph[u[0]]:\n            if v in unions:\n                continue\n            unions.append(u + [v])\n    print(len(unions))\n\n    for i in range(n):\n        print(unions[i], end=' ')\n    for i in range(n):\n        print(unions[i][-1], end=' ')\n    for i in range(n):\n        print(unions[i][0], end=' ')\n\n    return 0\n\n\nsolution(input())\n\"\"\"\n\ndef"
    },
    {
        "number": 4000,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    G = [[] for i in range(n)]\n    for i in range(n - 1):\n        a, b = map(int, stdin.split(\"\\n\")[i].split())\n        a, b = a - 1, b - 1\n        G[a].append(b)\n        G[b].append(a)\n    \n    a, b, c = 1, 2, 4\n    res = float('-inf')\n    while True:\n        if a not in G[b] and b not in G[a]:\n            break\n        if a not in G[b]:\n            if c in G[a]:\n                res = max(res, len(G[a]) + len(G[b]) - 1)\n                c, a = b, c\n            else:\n                res = max(res, len(G[a]) + len(G[b]) - 2)\n                c, b = a, c\n        else:\n            if c in G[a]:\n                res = max(res, len(G[a]) + len(G[b]) - 2)\n                c, a = b, c\n            else:\n                res = max(res, len(G[a]) + len(G[b]) - 1)\n                c, b = a, c\n    print(res)\n    return str(res)"
    },
    {
        "number": 4000,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    import math\n    import os\n    os.environ['OUTPUT_PATH'] = 'data.txt'\n\n    def path_distance(a, b):\n        return math.sqrt((a[0] - b[0]) ** 2 + (a[1] - b[1]) ** 2)\n\n    a, b = map(int, input().split())\n    tree = {}\n    for _ in range(int(input())):\n        u, v = map(int, input().split())\n        tree[u] = tree.get(u, []) + [v]\n        tree[v] = tree.get(v, []) + [u]\n\n    candidate_paths = []\n    for i in range(1, a + 1):\n        for j in range(1, b + 1):\n            for k in range(1, c + 1):\n                if i == j == k:\n                    continue\n                if path_distance([i, j], [k, i]) > path_distance([i, j], [k, b]):\n                    continue\n                if path_distance([i, j], [k, i]) > path_distance([i, j], [k, b]):\n                    continue\n                if path_distance([i, j], [k, i]) == path_distance([i, j], [k, b]):\n                    continue\n                candidate_paths.append((i, j, k))\n\n    answer = 0\n    for i, j, k in candidate_paths:\n        if (i, j) in tree or (j, i) in tree:\n            continue\n        if path_distance([i, j], [k, i]) > path_distance([i, j], [k, b]):\n            continue\n        if path_distance([i, j], [k, i]) > path_distance([i, j], [k, b]):\n            continue\n        if path_distance([i, j], [k, i]) == path_distance([i, j], [k, b]):\n            continue\n        answer += 1\n\n    return str(answer)\n\n\n\"\"\""
    },
    {
        "number": 4000,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    res = 0\n    while n - 1 >= 0:\n        a, b, c = map(int, stdin.readline().split())\n        if a!= b and a!= c and b!= c:\n            res = max(res, c - (a - 1) + (b - 1))\n        n -= 1\n    return str(res)\n\nprint(solution(input()))\n\n\n\n\n'''\n\nfrom itertools import combinations\n\nn = int(input())\nres = 0\nwhile n - 1 >= 0:\n    a, b, c = map(int, input().split())\n    if a!= b and a!= c and b!= c:\n        res = max(res, c - (a - 1) + (b - 1))\n    n -= 1\nprint(res)"
    },
    {
        "number": 4000,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    inp = stdin.split('\\n')\n    n = int(inp[0])\n    edges = []\n    for i in range(1, len(inp)):\n        edges.append(list(map(int, inp[i].split())))\n    \n    x = max_simple_path(n, edges)\n    \n    return str(x)\n\ndef"
    },
    {
        "number": 4000,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    nodes = [[] for _ in range(n + 1)]\n    for a, b in stdin.splitlines():\n        a, b = int(a), int(b)\n        nodes[a].append(b)\n        nodes[b].append(a)\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            for k in range(1, n + 1):\n                if j in nodes[i]:\n                    if k in nodes[i]:\n                        if j!= k:\n                            if k in nodes[j]:\n                                if j in nodes[k]:\n                                    continue\n                if i == j:\n                    if i in nodes[k]:\n                        if k in nodes[i]:\n                            if k in nodes[j]:\n                                if i == k:\n                                    continue\n                if i == k:\n                    if i in nodes[j]:\n                        if j in nodes[k]:\n                            if k in nodes[i]:\n                                if i == j:\n                                    continue\n    return str(max([len(nodes[i]) for i in range(1, n + 1)])) + \" \" + str(nodes[1][0]) + \" \" + str(nodes[1][-1])\n"
    },
    {
        "number": 4000,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    G = []\n    for i in range(n - 1):\n        a, b = map(int, stdin.split())\n        G.append([a, b])\n\n    G.sort(key=lambda x: x[0])\n    G.sort(key=lambda x: x[1])\n\n    counter = 0\n    for i in range(n - 1):\n        if G[i][0] >= G[i + 1][1]:\n            counter += 1\n\n    return str(counter)\n"
    },
    {
        "number": 4000,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    return str(a + b + c)\n"
    },
    {
        "number": 4000,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    graph = {}\n    for i in range(n):\n        a, b = map(int, stdin.split())\n        graph[a] = b\n        graph[b] = a\n    vertices = {i for i in range(n)}\n    paths = set()\n    for vertex in vertices:\n        if graph.get(vertex) is None:\n            continue\n        for neighbor in graph[vertex]:\n            if neighbor in vertices:\n                continue\n            paths.add((vertex, neighbor))\n    count = 0\n    for a, b in paths:\n        if b - a > count:\n            count = b - a\n    return str(count)\n\n\n\ndef"
    },
    {
        "number": 4000,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, *data = map(int, stdin.split())\n    paths = collections.defaultdict(list)\n    for u, v in combinations(data, 2):\n        paths[u].append(v)\n        paths[v].append(u)\n    m = float('inf')\n    for k, paths in paths.items():\n        if len(paths) > 2:\n            p1 = paths[0]\n            p2 = paths[1]\n            res = 0\n            for u, v in combinations(paths, 2):\n                res += (u + v)\n            m = min(res, m)\n    return str(m)\n"
    },
    {
        "number": 4001,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    _, numbers = stdin.strip().split()\n    a = set(map(int, numbers.split()))\n    b = set(map(int, numbers.split()))\n    c = a.intersection(b)\n    print(*sorted(c))\n    return\n"
    },
    {
        "number": 4001,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin.split()[0])\n    y = int(stdin.split()[1])\n    d = set()\n    for i in range(2, 10):\n        if i % 2 == 0:\n            d.add(i)\n        else:\n            d.add(i * 2)\n    d = set(d)\n    print(d)\n    if x in d and y in d:\n        x_index = d.index(x)\n        y_index = d.index(y)\n        if x_index < y_index:\n            x, y = y, x\n        if x % 2 == 0:\n            x = x // 2\n        else:\n            x = x * 2\n        if y % 2 == 0:\n            y = y // 2\n        else:\n            y = y * 2\n        while x > 1 and y > 1:\n            if x % 2 == 0 and y % 2 == 0:\n                x = x // 2\n                y = y // 2\n            elif x % 2 == 0 and y % 2 == 1:\n                x = x // 2\n            elif x % 2 == 1 and y % 2 == 0:\n                y = y // 2\n            else:\n                break\n    print(x)\n    print(y)\n    return str(x) +'' + str(y)\n\n\nprint(solution(\"2 2\"))\nprint(solution(\"20 20\"))\nprint(solution(\"1 1\"))\nprint(solution(\"10 10\"))\n"
    },
    {
        "number": 4001,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    a = sorted(list(set(range(2, x+1))&set(range(2, y+1))))\n    b = sorted(list(set(range(2, x+1))-set(a)))\n    c = sorted(list(set(range(2, y+1))-set(a)))\n    return \"{} {}\".format(a[0], c[0]) if len(a)==2 and len(b)==2 else \"{} {}\".format(b[0], c[0])\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4001,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n = int(stdin[0])\n    divisors = stdin[1]\n    divisors = list(divisors)\n\n    divisors = sorted(divisors)\n\n    x = int(''.join(divisors))\n    y = int(''.join(divisors[::-1]))\n\n    return str(x), str(y)\n"
    },
    {
        "number": 4001,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    divisors = []\n    for i in range(1, n + 1):\n        if i == 1:\n            continue\n        for j in range(2, i):\n            if i % j == 0:\n                divisors.append(j)\n                break\n    print(len(divisors))\n    print(' '.join(str(x) for x in divisors))\n    return\n"
    },
    {
        "number": 4001,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = list(map(int, stdin.split()))\n    y = list(map(int, stdin.split()))\n    x = sorted(x)\n    y = sorted(y)\n    result = []\n    d = {}\n    for i in range(n):\n        if x[i] == y[i]:\n            if x[i] in d:\n                d[x[i]] += 1\n            else:\n                d[x[i]] = 1\n        else:\n            if x[i] in d:\n                d[x[i]] += 1\n            else:\n                d[x[i]] = 1\n            if y[i] in d:\n                d[y[i]] += 1\n            else:\n                d[y[i]] = 1\n    for i in range(1,10):\n        if i not in d:\n            result.append(i)\n    result.append(1)\n    return''.join(map(str,result))"
    },
    {
        "number": 4001,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    divisors = list(map(int, stdin.split()[1:]))\n    for i in range(1, len(divisors)):\n        if divisors[i] == divisors[i-1]:\n            divisors[i-1] = divisors[i-1] * 2\n    x = 1\n    y = 2\n    while x + y!= len(divisors):\n        if divisors[x] > divisors[y]:\n            x += 1\n        else:\n            y += 1\n    return str(x) +'' + str(y)\n"
    },
    {
        "number": 4001,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    divisors = stdin.split(\" \")\n    divisors = sorted(list(map(int, divisors)))\n\n    result = divisors[0]\n    i = 1\n    while i < n:\n        if divisors[i] == divisors[i - 1]:\n            i += 1\n            continue\n        result = result * divisors[i]\n        i += 1\n\n    return str(result)\n"
    },
    {
        "number": 4001,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lst = stdin.split(\" \")\n    a = int(lst[0])\n    b = int(lst[1])\n    lst = [int(x) for x in lst[2:]]\n    # create dictionary to map {divisor: position}\n    div_pos = dict()\n    for i, div in enumerate(lst):\n        if div in div_pos:\n            div_pos[div] = div_pos[div] + 1\n        else:\n            div_pos[div] = i\n    # find highest divisor\n    max_val = max(div_pos.values())\n    x = 0\n    y = 0\n    for div, pos in div_pos.items():\n        if max_val == pos:\n            x = div\n        else:\n            y = div\n    return str(x) + \" \" + str(y)\n\n\nsolution(\"10 2 8 1 2 4 1 20 4 5\")\nsolution(\"7 4 2 1 8 1 2 4 5\")\n"
    },
    {
        "number": 4001,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split()\n    n = int(a[0])\n    divs = []\n    for i in range(n):\n        divs.append(int(a[i + 1]))\n    m = len(divs)\n    divs = list(set(divs))\n    divs.sort()\n    divs_by_index = []\n    for i in range(m):\n        divs_by_index.append([divs[i], divs.index(divs[i])])\n    divs_by_index.sort()\n    divs_by_index = list(set(divs_by_index))\n    # print(divs_by_index)\n    divs_by_index.sort(key=lambda x: x[1])\n    # print(divs_by_index)\n    divs_by_index.sort(key=lambda x: x[0])\n    # print(divs_by_index)\n    ans = []\n    ans.append(divs_by_index[0][0])\n    ans.append(divs_by_index[0][1])\n    # print(ans)\n    return str(ans[0]) +'' + str(ans[1])\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4002,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = (int(i) for i in stdin.split())\n    a = [[int(i) for i in stdin.split()] for _ in range(n)]\n    a.sort(key=lambda x: x[0], reverse=True)\n    max_s = 0\n    if n == 1 and m == 1 and k == 1:\n        return max_s\n\n    for i in range(n):\n        if i > 1 and (max_s + a[i][0]) % k == 0:\n            max_s = max_s + a[i][0]\n        elif i > 1 and (max_s + a[i][0]) % k!= 0:\n            break\n\n    return max_s\n"
    },
    {
        "number": 4002,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = [[int(x) for x in stdin.split()] for _ in range(n)]\n    # print(a)\n    # print(n, m, k)\n\n    # function to count and return total of maximum possible sum divisible by k\n    def get_max_divisible_sum_by_k(n: int, k: int, row: int) -> int:\n        # base case\n        if k == 0 or row == -1:\n            return 0\n        if row == 0:\n            # there is no element in the row\n            return 0\n        # take all elements of current row and divide them by k\n        divide_elements = 0\n        for i in range(row):\n            divide_elements += a[row][i] // k\n        # return the result of dividing the elements in the row by k\n        return get_max_divisible_sum_by_k(n, k, row - 1) + divide_elements\n    # function to return the max divisible sum\n    def get_max_divisible_sum(n: int, k: int) -> int:\n        # base case\n        if k == 0 or n == 0:\n            return 0\n        # recursion call to get maximum divisible sum of the whole matrix\n        return max(get_max_divisible_sum_by_k(n, k, n - 1), get_max_divisible_sum(n - 1, k))\n    return str(get_max_divisible_sum(m, k))\n\nprint(solution(input()))"
    },
    {
        "number": 4002,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.strip().split())\n    a = []\n    for i in range(n):\n        a.append(list(map(int, stdin.strip().split())))\n\n    n_max = m // 2\n    max_sum = 0\n    for i in range(n):\n        sum_row = 0\n        for j in range(n_max):\n            sum_row += a[i][j]\n        if sum_row % k == 0:\n            max_sum = max(max_sum, sum_row)\n    return str(max_sum)\n\nprint(solution(input()))"
    },
    {
        "number": 4002,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\nn, m, k = map(int, stdin.split())\na = [[int(j) for j in stdin.split()] for i in range(n)]\n\ndp = [[0] * m for i in range(n)]\n\nfor i in range(n):\n    for j in range(m):\n        if i == 0 and j == 0:\n            dp[i][j] = a[i][j]\n        elif i == 0 and j > 0:\n            dp[i][j] = dp[i][j-1] + a[i][j]\n        elif i > 0 and j == 0:\n            dp[i][j] = dp[i-1][j] + a[i][j]\n        else:\n            dp[i][j] = max(dp[i][j-1], dp[i-1][j]) + a[i][j]\n\nreturn str(dp[n-1][m-1])\n"
    },
    {
        "number": 4002,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    (n, m, k) = stdin.split()\n    n = int(n)\n    m = int(m)\n    k = int(k)\n    a = []\n    for i in range(n):\n        a.append(list(map(int, stdin.split())))\n\n    max_sum = 0\n    for i in range(n):\n        min_el = 0\n        max_el = 0\n        for j in range(m):\n            if min_el == 0:\n                min_el = a[i][j]\n                max_el = a[i][j]\n            elif a[i][j] < min_el:\n                min_el = a[i][j]\n            elif a[i][j] > max_el:\n                max_el = a[i][j]\n        if max_sum < max_el % k:\n            max_sum = max_el % k\n    return str(max_sum)\n"
    },
    {
        "number": 4002,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    rows = stdin.split()\n    n, m, k = int(rows[0]), int(rows[1]), int(rows[2])\n    nums = []\n    for i in range(n):\n        nums.append(list(map(int, stdin.split()[3 + i * m: 3 + (i + 1) * m])))\n    max_sum = float(\"-inf\")\n    for r in range(n // 2):\n        rowsum = 0\n        for c in range(m):\n            rowsum += nums[r][c]\n            rowsum += nums[r + n // 2][c]\n        if rowsum % k == 0:\n            max_sum = max(max_sum, rowsum)\n    return str(max_sum)\n"
    },
    {
        "number": 4002,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    for _ in range(3):\n        a = [int(i) for i in stdin.split()]\n        a.pop(0)\n        print(len(a))\n        a.sort(key=lambda x: x)\n        print(a)\n        l = len(a)\n        for i in range(l - 2, -1, -1):\n            if (a[i] + a[i + 1] + a[i + 2]) % 3 == 0:\n                print(a[i] + a[i + 1] + a[i + 2])\n                break\n        else:\n            return '0'\n"
    },
    {
        "number": 4002,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    _, _, k = stdin.split(\" \")\n    k = int(k)\n    for _ in range(int(k)):\n        arr = stdin.split(\"\\n\")\n        max_sum = 0\n        min_sum = 1000000\n        sorted_arr = []\n        for i in range(len(arr)):\n            sorted_arr.append(sorted([int(n) for n in arr[i].split(\" \")]))\n        for j in range(len(sorted_arr)):\n            for k in range(len(sorted_arr[j])):\n                sum = 0\n                for l in range(len(sorted_arr[j])):\n                    sum += sorted_arr[j][l]\n                if sum % k == 0 and min_sum > sum:\n                    min_sum = sum\n            max_sum = max(max_sum, min_sum)\n        return str(max_sum)\n"
    },
    {
        "number": 4002,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = [[int(i) for i in stdin.split()] for j in range(n)]\n\n    def rec(arr, i, k):\n        if i == n:\n            return 0\n        t = 0\n        for j in range(i, n):\n            if j - i <= len(arr) / 2:\n                t += rec(arr[:i] + arr[i + 1:], j + 1, k)\n                if t % k == 0:\n                    return t\n        return 0\n\n    return rec(a, 0, k)\n"
    },
    {
        "number": 4002,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return stdout.strip()\n    n,m,k=map(int,stdin.split())\n    a=[]\n    for _ in range(n):\n        a.append(list(map(int,stdin.split())))\n\n    x=0\n    for i in range(n):\n        sum =0\n        for j in range(m//2):\n            sum += a[i][j]\n            sum += a[i][m-j-1]\n        if sum % k == 0:\n            x=max(x,sum)\n    for i in range(n):\n        sum=0\n        for j in range(m//2):\n            sum += a[j][i]\n            sum += a[m-j-1][i]\n        if sum % k == 0:\n            x=max(x,sum)\n    print(x)\n\nsolution('''2 4 3\n1 2 3 4\n5 2 2 2\n7 1 1 4''')\n"
    },
    {
        "number": 4003,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n"
    },
    {
        "number": 4003,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    # a = [1, 2, 4, 3, 2]\n    print(max(len(list(group_by_sum(a, lambda x: x)))), end='\\n')\n\n\ndef"
    },
    {
        "number": 4003,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n = int(stdin[0])\n    a = stdin[1]\n    max_num = 0\n    if n <= 1:\n        return str(0)\n    for i in range(1, n):\n        if int(a[i - 1]) < int(a[i]):\n            max_num = max(max_num, i)\n    return str(max_num + 1)\n"
    },
    {
        "number": 4003,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return 1\n    else:\n        a = list(map(int, stdin.split()))\n        a.sort()\n        ans = 0\n        move = 0\n        i = 0\n        while i < len(a):\n            if i == 0:\n                ans += 1\n            elif i == 1:\n                ans += move\n            elif i == 2:\n                ans += move\n            elif i == 3:\n                ans += move + 1\n            i += 1\n        print(ans)\n        return ans\n"
    },
    {
        "number": 4003,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\nYour solution will be run on the following line by the time the tests will run:\nprint(solution(input))\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4003,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    a = list(map(int, stdin[1]))\n    n = int(stdin[0])\n    print(n, a)\n    longest = 0\n    for i in range(n):\n        left = 1\n        right = 1\n        for j in range(i):\n            if a[j] < a[i]:\n                left = 1\n                right = 0\n            if a[j] > a[i]:\n                left = 0\n                right = 1\n        if right > left:\n            longest = max(longest, right + left)\n    return str(longest)\n\ndef"
    },
    {
        "number": 4003,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split()\n    n = int(a[0])\n    return str(n) + solution(stdin.replace(a[0], ''))\n\ndef"
    },
    {
        "number": 4003,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n\n    longest_increasing = 1\n    shortest_decreasing = 1\n    for i in range(n):\n        if a[i] > a[i + 1]:\n            shortest_decreasing = max(shortest_decreasing, longest_increasing)\n            longest_increasing = 1\n        else:\n            longest_increasing += 1\n    return max(shortest_decreasing, longest_increasing)\n\nsolution(input())\n\n\"\"\"\n\n\"\"\"\nSample Input 1\n\n5\n1 2 4 3 2\n\nSample Output 1\n\n4\nLLRR\n\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\n\nlongest_increasing = 1\nshortest_decreasing = 1\nfor i in range(n):\n    if a[i] > a[i+1]:\n        shortest_decreasing = max(shortest_decreasing, longest_increasing)\n        longest_increasing = 1\n    else:\n        longest_increasing += 1\n\nprint(max(shortest_decreasing, longest_increasing))\n"
    },
    {
        "number": 4003,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.strip().split()\n    # print(a)\n    k = 0\n    c = 0\n    for i in range(len(a)):\n        if c < i:\n            k = i\n            break\n        if a[i] > a[i - 1]:\n            c = i\n    # print(k)\n    s = ''\n    for i in range(k + 1):\n        if i == k:\n            s += 'R'\n        else:\n            s += 'L'\n    # print(s)\n    return s\n"
    },
    {
        "number": 4003,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    k = 0\n    s = \"\"\n    while True:\n        a_set = set(a)\n        if len(a_set) == 1:\n            break\n        for i in range(len(a)):\n            if a[i] in a_set:\n                a_set.remove(a[i])\n                if i!= 0:\n                    a[i - 1] = a[i - 1] + a[i]\n                else:\n                    a[i] = a[i] + a[i + 1]\n                a_set = set(a)\n                if len(a_set) == 1:\n                    break\n        k = max(k, len(a))\n    print(k)\n    for i in range(len(a)):\n        if a[i] == a[-1]:\n            s += \"R\"\n        else:\n            s += \"L\"\n    return s\n\nprint(solution(input()))\n"
    },
    {
        "number": 4004,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    if len(set(a)) < n:\n        return -1\n\n    a.sort()\n    for i in range(1, len(a)):\n        if a[i] < a[i-1]:\n            return -1\n    return a[-1] + a[0]\n"
    },
    {
        "number": 4004,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1].split()))\n    counts = defaultdict(lambda: 0)\n    if (n!= len(a) or max(a) <= 0 or min(a) < 0):\n        return -1\n\n    def add(a, i, D):\n        if a[i] + D > 0:\n            a[i] = a[i] + D\n            return True\n        else:\n            return False\n\n    def subtract(a, i, D):\n        if a[i] - D > 0:\n            a[i] = a[i] - D\n            return True\n        else:\n            return False\n\n    def equal(a, i, D):\n        if a[i] == D:\n            return True\n        else:\n            return False\n\n    for i in range(n):\n        if add(a, i, 1):\n            counts[1] += 1\n        if subtract(a, i, 1):\n            counts[-1] += 1\n        if equal(a, i, 1):\n            counts[0] += 1\n    if min(counts.values()) == 0:\n        return -1\n    else:\n        return min(counts.keys(), key=lambda x: counts[x])\n"
    },
    {
        "number": 4004,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 1 4 4 7 4 1\n   ... ''')\n    '3'\n    >>> solution('''\n   ... 2 2 5 2 5\n   ... ''')\n    '3'\n    \"\"\"\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    print(solution(a))\n"
    },
    {
        "number": 4004,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split(' ')))\n    if len(a) < 2:\n        return -1\n    for i in range(1, len(a)):\n        if a[i] < a[i - 1]:\n            return -1\n    return min(a)"
    },
    {
        "number": 4004,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    seq = list(map(int, stdin.split(' ')))\n    for i in range(len(seq)):\n        if seq[i] < 0:\n            break\n    if i == len(seq):\n        print(-1)\n    else:\n        while True:\n            min_val = min(seq)\n            if min_val == 0:\n                print(-1)\n                break\n            else:\n                seq = list(map(lambda x: x - min_val, seq))\n                print(min_val)\n                break\nsolution(input())\n"
    },
    {
        "number": 4004,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    array = stdin.split()[1:]\n    diff = []\n    for i in range(n):\n        diff.append(int(array[i]) - int(array[(i + 1) % n]))\n    if max(diff) < 0:\n        print(-1)\n        return -1\n    return min(diff)"
    },
    {
        "number": 4004,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    seq = list(map(int, stdin.split()))\n    min_diff = 10001\n    for i in range(n):\n        for j in range(i+1, n):\n            tmp = seq[i] + seq[j]\n            if tmp < 0:\n                break\n            if tmp < min_diff:\n                min_diff = tmp\n    return str(min_diff) if min_diff!= 10001 else '-1'\n"
    },
    {
        "number": 4004,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    lines = stdin.split(\"\\n\")\n    a = list(map(int, lines[1].split(\" \")))\n    b = list(map(int, lines[2].split(\" \")))\n    if a[0] > a[-1]:\n        a = a[::-1]\n    if b[0] > b[-1]:\n        b = b[::-1]\n    diff = abs(a[0] - b[0])\n    ans = diff\n    if abs(a[0] - a[-1]) < abs(b[0] - b[-1]):\n        ans = abs(a[0] - a[-1])\n    for i in range(1, len(a)):\n        a_new = a[i-1] + diff\n        b_new = b[i-1] - diff\n        if a_new > a_new:\n            a_new = a_new - diff\n        if a_new < a_new:\n            a_new = a_new + diff\n        if b_new > b_new:\n            b_new = b_new - diff\n        if b_new < b_new:\n            b_new = b_new + diff\n        if a_new == a_new and a_new > b_new:\n            ans = a_new\n        elif a_new == a_new and a_new < b_new:\n            ans = b_new\n        elif a_new < a_new and a_new == b_new:\n            ans = a_new\n        elif a_new < a_new and a_new > b_new:\n            ans = b_new\n    if ans == diff:\n        return \"-\"\n    return str(ans)\n"
    },
    {
        "number": 4004,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def contains_negative(array):\n        return any(e < 0 for e in array)\n\n    a = list(map(int, stdin.split()))\n    d = 0\n    while not contains_negative(a):\n        d += 1\n        for i, e in enumerate(a):\n            if e < 0:\n                if d > 0:\n                    a[i] += d\n                else:\n                    a[i] -= d\n    return str(d if contains_negative(a) else -1)\n\nsolution('2 4 4 7 4 1')\nsolution('5 2 2 5 2 5')\nsolution('4')\nsolution('1 2 3 4 5')"
    },
    {
        "number": 4004,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1]))\n    a.sort()\n\n    D = a[0]\n    for i in range(1, n):\n        D = min(D, D + a[i] - a[i - 1])\n    if D >= 0:\n        return D\n    else:\n        return -1\n\nprint(solution(input()))\n"
    },
    {
        "number": 4005,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, x_2, y_2 = list(map(int, stdin.split()))\n    x_3, y_3, x_4, y_4 = list(map(int, stdin.split()))\n    x_5, y_5, x_6, y_6 = list(map(int, stdin.split()))\n    # x_1, y_1, x_2, y_2 = 0, 0, 499999, 499999\n    # x_3, y_3, x_4, y_4 = 1, 1, 3, 3\n    # x_5, y_5, x_6, y_6 = 3, 1, 5, 1\n\n    if (y_1 <= y_3 <= y_5) and (y_1 <= y_4 <= y_6) and (y_2 <= y_3 <= y_5) and (y_2 <= y_4 <= y_6):\n        if (x_3 <= x_1 <= x_4) and (x_3 <= x_2 <= x_4):\n            if (x_5 <= x_1 <= x_6) and (x_5 <= x_2 <= x_6):\n                return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, x1, y1, x2, y2 = stdin.split()\n    n = int(n)\n    x1 = int(x1)\n    y1 = int(y1)\n    x2 = int(x2)\n    y2 = int(y2)\n    points = []\n    for i in range(n):\n        points.append([int(x1), int(y1)])\n        x1 += 1\n        y1 += 1\n        points.append([int(x2), int(y2)])\n        x2 += 1\n        y2 += 1\n    x3 = int(x1)\n    y3 = int(y1)\n    x4 = int(x2)\n    y4 = int(y2)\n    points.append([int(x3), int(y3)])\n    points.append([int(x4), int(y4)])\n    if is_inside(points, x1, y1, x2, y2):\n        return 'YES'\n    else:\n        return 'NO'\n\n\ndef"
    },
    {
        "number": 4005,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = map(int, stdin.split())\n    x3, y3, x4, y4 = map(int, stdin.split())\n    x5, y5, x6, y6 = map(int, stdin.split())\n    \n    print(\"YES\" if not (x1>x3 and x2>x4 and x1<x5 and x2<x6) and not (y1>y3 and y2>y4 and y1<y5 and y2<y6) else \"NO\")\n    return \"YES\" if not (x1>x3 and x2>x4 and x1<x5 and x2<x6) and not (y1>y3 and y2>y4 and y1<y5 and y2<y6) else \"NO\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    for line in stdin.split(\"\\n\"):\n        bottom_left, top_right = map(int, line.split())\n\n        if (bottom_left > top_right):\n            bottom_left, top_right = top_right, bottom_left\n\n        if (bottom_left >= top_right):\n            continue\n        if (bottom_left == top_right):\n            continue\n\n        for bottom_left_point in range(bottom_left, top_right):\n            for top_right_point in range(top_right, bottom_left):\n                for right_point in range(top_right, bottom_left):\n                    for bottom_right_point in range(bottom_left, right_point):\n                        if (bottom_left_point!= bottom_right_point and bottom_left_point!= top_right_point):\n                            continue\n                        if (bottom_right_point!= right_point and bottom_right_point!= top_right_point):\n                            continue\n                        if (bottom_left_point!= bottom_right_point):\n                            continue\n                        if (top_right_point!= top_right_point):\n                            continue\n                        if (right_point!= top_right_point):\n                            continue\n                        if (bottom_left_point!= top_right_point):\n                            continue\n                        if (bottom_right_point!= bottom_left_point):\n                            continue\n                        if (top_left_point!= bottom_left_point):\n                            continue\n                        return \"YES\"\n\n        return \"NO\"\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4005,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = map(int, stdin.split())\n    x3, y3, x4, y4 = map(int, stdin.split())\n    x5, y5, x6, y6 = map(int, stdin.split())\n    def in_rect(x, y):\n        if x >= x1 and x <= x2 and y >= y1 and y <= y2:\n            return True\n        else:\n            return False\n    def in_black(x, y):\n        if x >= x3 and x <= x4 and y >= y3 and y <= y4:\n            return True\n        else:\n            return False\n    def in_white(x, y):\n        if x >= x5 and x <= x6 and y >= y5 and y <= y6:\n            return True\n        else:\n            return False\n    if (in_rect(x1, y1) and in_rect(x2, y2) and\n        in_black(x3, y3) and in_black(x4, y4) and\n        in_white(x5, y5) and in_white(x6, y6)):\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, x_2, y_2 = map(int, stdin.split())\n    x_3, y_3, x_4, y_4 = map(int, stdin.split())\n    x_5, y_5, x_6, y_6 = map(int, stdin.split())\n    if x_3 <= x_1 <= x_4 and x_5 <= x_2 <= x_6 and x_1 <= x_3 <= x_4 and x_2 <= x_5 <= x_6 and y_3 <= y_1 <= y_4 and y_5 <= y_2 <= y_6 and y_1 <= y_3 <= y_4 and y_2 <= y_5 <= y_6:\n        return 'YES'\n    return 'NO'"
    },
    {
        "number": 4005,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = map(int, stdin.strip().split())\n    if (x1, y1) in ((x2, y2), (x2, y1)):\n        return 'NO'\n    if (x2, y1) in ((x1, y2), (x1, y2)):\n        return 'NO'\n    return 'YES'"
    },
    {
        "number": 4005,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lst = list(map(int, stdin.split()))\n    x1, y1, x2, y2 = lst[0], lst[1], lst[2], lst[3]\n    x3, y3, x4, y4 = lst[4], lst[5], lst[6], lst[7]\n    if (y1 > y2) and (y3 > y4) and (x1 < x2) and (x3 < x4):\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 4005,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = map(int, stdin.split())\n    x3, y3, x4, y4 = map(int, stdin.split())\n    x5, y5, x6, y6 = map(int, stdin.split())\n    if ((x1 < x3 and x3 < x4 and x4 < x5 and x5 < x6) or (x1 < x4 and x4 < x5 and x5 < x6) or (x1 < x5 and x5 < x6)):\n        print(\"YES\")\n    else:\n        print(\"NO\")"
    },
    {
        "number": 4005,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4006,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for i in range(n + 1):\n        count += is_reachable(n, i)\n    return str(count)\n\n\ndef"
    },
    {
        "number": 4006,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4006,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    result = set()\n    n = int(stdin)\n    for i in range(1,n+1):\n        result.add(i)\n        result.add(i+1)\n        result.add(i*2)\n        if i*2+1 <= n:\n            result.add(i*2+1)\n        if i*3 <= n:\n            result.add(i*3)\n        if i*2+3 <= n:\n            result.add(i*2+3)\n        if i*2+6 <= n:\n            result.add(i*2+6)\n        if i*3+6 <= n:\n            result.add(i*3+6)\n        if i*2+9 <= n:\n            result.add(i*2+9)\n        if i*3+9 <= n:\n            result.add(i*3+9)\n        if i*3+10 <= n:\n            result.add(i*3+10)\n        if i*6+10 <= n:\n            result.add(i*6+10)\n        if i*9+10 <= n:\n            result.add(i*9+10)\n    return len(result)\n"
    },
    {
        "number": 4006,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdout = []\n    def f(x,y):\n        stdout.append(y)\n    def g(x):\n        return x+1\n    f(int(stdin), int(stdin))\n    return str(len(set(stdout)))\n"
    },
    {
        "number": 4006,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    from math import sqrt, floor\n    return\n"
    },
    {
        "number": 4006,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def f(n: int, rem: int) -> int:\n        if n == 0:\n            return 1\n        elif n > 0:\n            return f(n - 1, rem + 1)\n        else:\n            return 0\n\n    n = int(stdin)\n    res = f(n, 0)\n    return str(res)\n"
    },
    {
        "number": 4006,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    visited = {n}\n    for _ in range(10):\n        visited |= {f(n) for f in (lambda n: n + 1, lambda n: n * 10, lambda n: n * 100)}\n        if n in visited:\n            return len(visited)\n    return len(visited)\n"
    },
    {
        "number": 4006,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(set(gen(int(stdin)))))\n\ndef"
    },
    {
        "number": 4006,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    l = []\n    def get(l, x, n):\n        if l[x] == -1:\n            l[x] = get(l, x - n, n) + get(l, x + n, n)\n        return l[x]\n    return str(get(l, x, n))\n"
    },
    {
        "number": 4006,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 4007,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    friends = stdin.split(\"\\n\")[1:]\n    result = []\n\n    for i in range(n):\n        if friends[i] == 0:\n            result.append(i)\n\n    for i in range(n):\n        if friends[i] == 0:\n            continue\n        else:\n            if i in result:\n                continue\n            else:\n                result.append(i)\n\n    return \"\\n\".join([str(i) for i in result])\n"
    },
    {
        "number": 4007,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    friend = {}\n    for i in range(len(lines)):\n        if lines[i].strip():\n            n, f = map(int, lines[i].split())\n            if f in friend:\n                friend[f] = (friend[f] + 1) % 2\n            else:\n                friend[f] = 1\n    res = []\n    for i in friend:\n        if friend[i] == 0:\n            res.append(i)\n    res.sort()\n    for i in res:\n        print(i, end=\" \")\n    return \"\"\n"
    },
    {
        "number": 4007,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    l = list(map(int, stdin.split()[1]))\n    f = [(i, f) for i, f in enumerate(l) if f!= 0]\n    if len(f) < 2:\n        return \" \".join([str(i) for i in f])\n    f.sort(key=lambda x: x[1])\n    \n    for i, x in enumerate(f):\n        if i == 0 or x!= f[i - 1][1]:\n            print(i + 1, end=\" \")\n    return \" \".join([str(i) for i in f])"
    },
    {
        "number": 4007,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin.split(\"\\n\")[0])\n    nf: List[int] = list(map(int, stdin.split(\"\\n\")[1].split()))\n    nf_gifts = []\n    nf_known = []\n    for i in range(n):\n        if nf[i]!= 0:\n            nf_known.append(nf[i])\n    for i in range(n):\n        if nf[i]!= 0:\n            nf_gifts.append(nf[i])\n    nf_gifts = list(set(nf_gifts))\n    nf_known = list(set(nf_known))\n    if 0 in nf_known:\n        nf_known.remove(0)\n    return \" \".join(map(str, nf_known)) + \" \" + \" \".join(map(str, nf_gifts))\n"
    },
    {
        "number": 4007,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    friends = list(map(int, stdin.split()))\n    i = 1\n    while i < n:\n        if friends[i-1] == 0:\n            friends[i-1] = 0\n            friends[i] = 1\n            i += 1\n            friends[i-1] = 0\n            i += 1\n            while i < n:\n                if friends[i-1] == 0:\n                    friends[i-1] = 1\n                    friends[i] = 0\n                    i += 1\n                i += 1\n        i += 1\n    return \" \".join(map(str, friends))\n"
    },
    {
        "number": 4007,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    Friends = list(map(int, stdin.split()[1:]))\n    Friends.sort()\n    _counter = 0\n    for i in range(len(Friends)):\n        if Friends[i]!= i+1 and Friends[i]!= 0 and Friends[Friends[i] - 1]!= i + 1 and Friends[i]!= Friends[Friends[i] - 1]:\n            _counter += 1\n        if _counter == N:\n            return \" \".join(map(str, Friends))\n    if _counter < N:\n        return \" \".join(map(str, Friends))\n\nsolution(\"5\\n5 0 0 2 4\")"
    },
    {
        "number": 4007,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    array = list(map(int, stdin.split()[1:]))\n    friend_dict = {}\n    for i in array:\n        if i == 0:\n            if friend_dict.get(i) is None:\n                friend_dict[i] = 0\n        else:\n            friend_dict[i] = 1\n    answer = \"\"\n    for i in range(len(friend_dict)):\n        if friend_dict[i] == 1:\n            answer += str(i) + \" \"\n    return answer[:-1]\n"
    },
    {
        "number": 4007,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    friends = list(map(int, stdin.split()))\n    friends.sort()\n    known_gifts = {friend: None for friend in friends}\n    i = 0\n    while i < len(friends):\n        friend = friends[i]\n        if friends[i]!= 0:\n            for j in range(i + 1, len(friends)):\n                if friends[j]!= 0:\n                    if friends[i] == friends[j]:\n                        known_gifts[friends[j]] = None\n                        i += 1\n                        break\n        i += 1\n    for friend, known_gift in known_gifts.items():\n        if known_gift is None:\n            known_gifts[friend] = 0\n    friends = list(known_gifts.values())\n    friends.sort()\n    return \" \".join(map(str, friends))\n"
    },
    {
        "number": 4007,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin.strip())\n    friends: List[int] = list(map(int, stdin.strip().split()))\n    friends.sort()\n    res: List[int] = []\n    count: Dict[int, int] = {}\n    for i in range(n):\n        if friends[i] == 0:\n            if count[0] > 1:\n                count[0] -= 1\n            else:\n                res.append(0)\n            continue\n        if friends[i] not in count:\n            count[friends[i]] = 1\n        else:\n            count[friends[i]] += 1\n        if count[friends[i]] > 1:\n            count[friends[i]] -= 1\n        else:\n            res.append(friends[i])\n    return \" \".join(map(str, res))\n\nprint(solution(input()))"
    },
    {
        "number": 4007,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split()\n\n    n = int(lines[0])\n\n    friends = list(map(int, lines[1].split()))\n\n    # print(friends)\n\n    for i in range(n):\n        if friends[i] == 0:\n            friends[i] = i\n\n    # print(friends)\n\n    i = 0\n    while i < n:\n        if friends[i] == 0:\n            while i < n:\n                if friends[i]!= friends[i+1]:\n                    break\n                i += 1\n            i += 1\n        else:\n            i += 1\n\n    # print(i)\n\n    i = 0\n    j = i\n    while i < n:\n        if i == j:\n            j += 1\n            i += 1\n        elif i!= j:\n            if friends[i]!= j:\n                friends[i] = i\n                i += 1\n            elif friends[i] == j:\n                friends[i] = friends[j]\n                friends[j] = i\n                i += 1\n                j += 1\n    # print(friends)\n\n    friends = list(map(str, friends))\n    return \" \".join(friends)\n"
    },
    {
        "number": 4008,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"NO\"\n"
    },
    {
        "number": 4008,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    counts = {}\n    for i in range(1, k + 1):\n        counts[i] = 0\n    for elem in a:\n        counts[elem % k] += 1\n    for i in range(1, k + 1):\n        if counts[i] == 0:\n            return 'NO'\n    ans = []\n    for i in range(1, k + 1):\n        if counts[i] > 0:\n            ans.append(i)\n    if len(ans) == 0:\n        return 'NO'\n    ans = sorted(ans)\n    for i in range(1, k + 1):\n        if ans[0]!= i:\n            return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 4008,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"NO\"\n"
    },
    {
        "number": 4008,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    a = sorted(a)\n    if len(set(a))!= k or len(a) == 0 or max(a) > n:\n        return 'NO'\n    cnt = collections.Counter(a)\n    for k in range(1, k+1):\n        if k in cnt and cnt[k] >= 2:\n            return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 4008,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = (int(i) for i in stdin.split(\" \"))\n    a = [int(i) for i in stdin.split(\" \")]\n\n    cnt = 0\n    ans = \"\"\n    for color in range(1, k + 1):\n        if cnt == 0 and color not in a:\n            ans = \"NO\"\n        elif len(set(a)) == len(a):\n            ans = \"NO\"\n        else:\n            ans = \"YES\"\n        cnt = (color in a)\n    return ans"
    },
    {
        "number": 4008,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    # n = 5\n    # k = 2\n    # a = [2, 2, 2, 2, 2]\n    \n    # n = 5\n    # k = 2\n    # a = [1, 1, 1, 1, 1]\n\n    ans = \"\"\n    for i in range(k):\n        cnt = 0\n        tmp = 0\n        for j in range(n):\n            if a[j] == i:\n                cnt += 1\n                tmp = j\n        if cnt == 0:\n            break\n        ans += str(i)\n        if ans[-1]!= str(i):\n            ans += \" \"\n        ans += str(tmp + 1)\n        if ans[-1]!= str(i):\n            ans += \" \"\n    \n    if ans == \"\":\n        return \"NO\"\n    \n    return ans"
    },
    {
        "number": 4008,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = (int(x) for x in stdin.split())\n    a = [int(x) for x in stdin.split()]\n    # print(n,k,a)\n    counts = collections.defaultdict(int)\n    for i in a:\n        counts[i] += 1\n    # print(counts)\n    colors = collections.defaultdict(int)\n    colors[1] = 1\n    for i in range(2, k + 1):\n        for j in range(1, k + 1):\n            if counts[j] >= i:\n                colors[i] = max(colors[i], colors[j] + 1)\n    # print(colors)\n    for i in range(1, k + 1):\n        if colors[i]!= i:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 4008,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.strip().split()))\n    n, k = a[0], a[1]\n    array = a[2:]\n\n    colors = {i: [] for i in range(1, k + 1)}\n    \n    for i in array:\n        colors[i].append(i)\n    \n    for i in range(1, k + 1):\n        if not colors[i]:\n            return \"NO\"\n    \n    for i in range(1, k + 1):\n        if len(colors[i]) > 1:\n            return \"NO\"\n    \n    return \"YES\""
    },
    {
        "number": 4008,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    count = set()\n    for i in range(len(a)):\n        if a[i] in count:\n            return \"NO\"\n        count.add(a[i])\n    for i in range(len(a)):\n        for j in range(i, len(a)):\n            if a[i] == a[j]:\n                count.add(a[i])\n    if len(count) >= k:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 4008,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    nums = list(map(int, stdin.split()))\n    k -= 1\n    a = []\n    b = []\n    for i in range(n):\n        if nums[i] not in a:\n            a.append(nums[i])\n        else:\n            continue\n        if len(a) == k:\n            break\n    if len(a)!= k:\n        return \"NO\"\n    else:\n        return a\n\nprint(solution(input()))"
    },
    {
        "number": 4009,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4009,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split())\n    x = int('1' * n)\n    count = 0\n    while x > 0:\n        x = x // 2\n        if x % 10 == y:\n            return count\n        count += 1"
    },
    {
        "number": 4009,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''11 5 2\n   ... 11010100101\n   ... ''')\n    1\n    >>> solution('''11 5 1\n   ... 11010100101\n   ... ''')\n    3\n    \"\"\"\n    n, x, y = map(int, stdin.split())\n    count = 0\n    while n > 1:\n        count += n - x\n        n //= x\n    count += n - 1 - y\n    return str(count)\n"
    },
    {
        "number": 4009,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    We can do this in O(n) time.\n    The main idea is to keep a list of all possible numbers, and then iterate through them to check each one of them.\n    '''\n    n = int(stdin[0])\n    x, y = map(int, stdin[1].split(' '))\n    N = list(range(0,n))\n    cnt = 0\n    while N[-1]!= 10:\n        if len(N) == n and N[-1] == 0:\n            return \"None\"\n        for i in range(0, len(N)):\n            N[i] = N[i] * 2\n        cnt += 1\n    return str(cnt)\n\nprint(solution(input()))"
    },
    {
        "number": 4009,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split())\n    r = (10 ** y) % (10 ** x)\n    xor_res = 0\n    count = 0\n    while r!= 1:\n        xor_res = xor_res ^ r\n        count += 1\n        r = (r << 1) % (10 ** x)\n    return count\n"
    },
    {
        "number": 4009,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def set_zero(x: int) -> str:\n        return str(x)[1:] if x else ''\n\n    n, x, y = map(int, stdin.split())\n    remainder = 10 ** y % (10 ** x)\n    if remainder == 0:\n        return '0'\n    else:\n        # change leading zeros to one\n        a = set_zero(remainder)\n        for i in range(n):\n            if a[i] == '0':\n                a = a[:i] + '1' + a[i + 1:]\n            else:\n                a = a[:i] + '0' + a[i + 1:]\n        return set_zero(int(a))\n"
    },
    {
        "number": 4009,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split())\n    if x == y:\n        return 0\n    else:\n        return min(n, x) * (x - y)\n"
    },
    {
        "number": 4009,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    _, n, x, y = map(int, stdin.split())\n    n = n - 1\n    if n == 0:\n        return str(x) + str(y)\n    elif x >= y:\n        return str(0) + str(1) + str(0) * (n - 1)\n    else:\n        return str(0) + str(1) + str(1) * (n - 1)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4009,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''11 5 2\n   ... 11010100101\n   ... ''')\n    '1'\n    >>> solution('''11 5 1\n   ... 11010100101\n   ... ''')\n    '3'\n    \"\"\"\n    a = [int(x) for x in stdin.split()]\n    l, r = a[0], a[0]\n    n = a[1]\n    x = a[2]\n    y = a[3]\n    count = 0\n    for i in range(1, y):\n        if (y - i) % x == 0:\n            if i!= 0:\n                count += (y - i) // x + 1\n            else:\n                count += (y - i) // x\n        else:\n            count += (y - i) // x + 1\n    return str(count)\n"
    },
    {
        "number": 4009,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split())\n    num = int(\"\".join(map(str, stdin.split())))\n    ans = 0\n    while (num > 0):\n        if (num % 10 == y):\n            ans += 1\n        num //= 10\n        num = num % x\n    return str(ans)\n\nprint(solution(input()))"
    },
    {
        "number": 4010,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    for n in a:\n        if is_palindrome(n):\n            return \"YES\"\n    return \"NO\"\n\n\ndef"
    },
    {
        "number": 4010,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return 'YES' if problem(stdin) else 'NO'\n\ndef"
    },
    {
        "number": 4010,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = []\n    for i in range(n):\n        a.append(int(stdin))\n    for i in range(len(a)):\n        for j in range(len(a)):\n            if a[i] == a[j]:\n                if j > i + 2:\n                    continue\n                if a[i] == a[j + 1] and a[j + 1] == a[j - 1]:\n                    print(\"YES\")\n                    return\n    print(\"NO\")\n"
    },
    {
        "number": 4010,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if palindromic(stdin) else \"NO\"\n\n\ndef"
    },
    {
        "number": 4010,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if answer(stdin) else \"NO\"\n\n\ndef"
    },
    {
        "number": 4010,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1]))\n    i = 0\n    while i < n - 3:\n        if a[i] == a[i + 1] and a[i + 2] == a[i + 3]:\n            i += 3\n        else:\n            i += 1\n    if i < n - 3:\n        print(\"NO\")\n    else:\n        print(\"YES\")\n"
    },
    {
        "number": 4010,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    tests = int(stdin)\n    for _ in range(tests):\n        input()\n        n = int(input())\n        a = list(map(int, input().split()))\n        for i in range(1, n):\n            if a[i]!= a[n - i - 1]:\n                break\n        else:\n            if i == n - 1:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n\nsolution(input())\n"
    },
    {
        "number": 4010,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    num_test_cases, = map(int, stdin.split())\n    for i in range(num_test_cases):\n        n, a = map(int, stdin.split())\n        if is_palindrome(a):\n            print('YES')\n        else:\n            print('NO')\n\n\ndef"
    },
    {
        "number": 4010,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = [int(i) for i in stdin.split('\\n')[1].split()]\n\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if arr[i] == arr[j] and (i + j) < len(arr):\n                if arr[i] == arr[i + j]:\n                    continue\n                else:\n                    print('NO')\n                    return\n    print('YES')\n    return\n\nsolution(input())"
    },
    {
        "number": 4010,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.strip().split()))\n    for i in range(2, n):\n        if (a[i] - a[i - 1] == a[i - 1] - a[i - 2]):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n"
    },
    {
        "number": 4011,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.splitlines()\n    n = int(a[0])\n    a = a[1]\n    f = a.split(\" \")\n    x = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    for i in range(len(f)):\n        for j in range(len(x)):\n            x[j] = int(f[i])\n        for j in range(len(x)):\n            if x[j] == x[j-1]:\n                x[j] = x[j-1] + 1\n        for j in range(len(x)):\n            x[j] = int(x[j])\n        x = list(str(x[i]))\n        x.reverse()\n        x = int(''.join(x))\n        x = str(x)\n        x = x + \" \" + str(f[i])\n        x = x[:-1]\n        print(x)\n    return\n\n\nsolution(input())\n"
    },
    {
        "number": 4011,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, s = int(stdin.strip()), list(stdin)\n    a = map(int, s)\n    f = map(int, stdin.strip())\n    t = {int(i): i for i in range(1, 10)}\n    def choose(l):\n        for i in range(len(l) - 1):\n            l[i], l[i + 1] = t[l[i]], l[i]\n        return l\n    l = list(map(int, stdin.strip()))\n    s = 1\n    for i in range(len(l) - 1, 0, -1):\n        s = s * 10 + l[i]\n        if s > 2**31:\n            break\n    if s > 2**31:\n        return '{}'.format(s)\n    while True:\n        while a:\n            x = a.pop()\n            if x in f:\n                a.append(f.pop(f.index(x)))\n            else:\n                f.append(f.pop(f.index(x)))\n        if not f:\n            break\n        x = f.pop(0)\n        f.append(t[x])\n    return ''.join([str(i) for i in choose(f)])"
    },
    {
        "number": 4011,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def find_number(digits):\n        if len(digits) == 1:\n            return digits[0]\n        else:\n            temp = int(''.join(digits))\n            if (temp > 9) or (temp == 0):\n                return -1\n            else:\n                return temp\n\n    def replace(digits):\n        if len(digits) == 1:\n            return int(''.join(digits))\n        else:\n            if digits[1] == '1' and digits[2] == '0':\n                return int(''.join(digits[:2]))\n            else:\n                return int(''.join(digits[:2]) + str(find_number(digits[2:])))\n\n    a = stdin.split()\n    digits = a[0]\n    f = a[1]\n    answer = []\n    for d in digits:\n        if d!= '9':\n            answer.append(d)\n            continue\n        else:\n            a = int(''.join(answer))\n            b = replace(answer)\n            c = replace(answer)\n            d = int(''.join(answer))\n            e = replace(answer)\n            f = replace(answer)\n            answer = []\n            if b < c:\n                answer.append(f)\n            else:\n                answer.append(f)\n            if c < d:\n                answer.append(e)\n            else:\n                answer.append(e)\n            if d < b:\n                answer.append(a)\n            else:\n                answer.append(a)\n    return str(int(''.join(answer)))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4011,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # n = int(input())\n    # a = input()\n    n = int(stdin.split('\\n')[0])\n    a = stdin.split('\\n')[1]\n    max_num = int(a[-1])\n    while max_num >= n:\n        a = a[0:-1] + str(int(a[-1]) * 10 + int(a[-2]) * 5 + int(a[-3]) * 3 + int(a[-4]) * 1)\n        max_num = int(a[-1])\n    return a\n\nprint(solution(input()))\n"
    },
    {
        "number": 4011,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    a = lines[1]\n    f = lines[2].split()\n    f = map(lambda x: int(x) if x!= '0' else 0, f)\n    # print(a, f)\n    ans = 1\n    for i in range(n):\n        i_l, i_u = i, i\n        while a[i_l] == a[i_u] and a[i_l]!= '0':\n            i_u -= 1\n            i_l += 1\n        if i_u - i_l > ans:\n            ans = i_u - i_l\n        if ans == n:\n            break\n    return str(ans)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4011,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    _n = int(stdin.strip())\n    _a = list(map(int, stdin.strip().split()))\n    _f = list(map(int, stdin.strip().split()))\n    print(max(_a[:_n]))"
    },
    {
        "number": 4011,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split('\\n')[1]\n    f = {i: str(i) for i in range(1, 10)}\n    result = []\n    for x in a:\n        result.append(f[int(x)])\n    print(''.join(result))\n"
    },
    {
        "number": 4011,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    number = stdin.split()\n    n = int(number[0])\n    a = number[1]\n    f = list(map(int, number[2].split()))\n    if n == 1:\n        return a\n    new = []\n    for i in range(n):\n        if a[i]!= '0':\n            new.append(a[i])\n    a = new\n    a.sort()\n    first = a[0]\n    second = a[1]\n    if first == 0:\n        return a[0]\n    if first == second:\n        return str(first) * n\n    output = str(first)\n    i = 2\n    while first + second > 0:\n        sum = str(first + second)\n        output = output + sum\n        first = int(sum[0])\n        second = int(sum[1])\n        if i == n:\n            break\n        first = a[i]\n        i += 1\n    return output\n"
    },
    {
        "number": 4011,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.rstrip()\n    return str(max(int(s[i] + s[i+1] + s[i+2]) for i in range(len(s)-2)))\n"
    },
    {
        "number": 4011,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def to_digits(a):\n        return (int(n) for n in str(a))\n    def to_digits_and_replace(a, f):\n        n = list(to_digits(a))\n        for i, x in enumerate(n):\n            n[i] = f(x)\n        return ''.join(str(x) for x in n)\n    n = int(stdin.split()[0])\n    a = stdin.split()[1]\n    f = stdin.split()[2:]\n    return str(max(int(to_digits_and_replace(a, f.__getitem__)) for i in range(1, 10)))"
    },
    {
        "number": 4012,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    res = []\n    for line in stdin:\n        res.append(solution_helper(line))\n    return '\\n'.join(res)\ndef"
    },
    {
        "number": 4012,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    for i in range(N):\n        a, b, c = map(int, stdin.split())\n        if a % b == 0 and b % c == 0:\n            print(a, b, c)\n            return\n    print(a, b, c)\n    return\nsolution(input())\n\n\n\n\ndef"
    },
    {
        "number": 4012,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def to_binary(num: int) -> str:\n        result = \"\"\n        while num!= 0:\n            if num % 2 == 1:\n                result += \"1\"\n            else:\n                result += \"0\"\n            num = int(num/2)\n        return result[::-1]\n\n    def b2d(binary: str) -> int:\n        return int(binary, 2)\n\n    def div(first_number: int, second_number: int) -> int:\n        return int(first_number / second_number)\n\n    test_cases = int(stdin.split()[0])\n    for i in range(test_cases):\n        a, b, c = stdin.split()[1:]\n        a = int(a)\n        b = int(b)\n        c = int(c)\n        result = 1\n        step_count = 0\n        if a > c:\n            a, c = c, a\n        if b > a:\n            b, a = a, b\n        for i in range(1, c+1):\n            if step_count % (a+1) == 0:\n                step_count += b\n            else:\n                step_count += (a+1)\n            if step_count % (a+1) == 0:\n                step_count += b\n            else:\n                step_count += (a+1)\n            if step_count % (a+1) == 0:\n                step_count += b\n            else:\n                step_count += (a+1)\n            if step_count % (a+1) == 0:\n                step_count += b\n            else:\n                step_count += (a+1)\n            if step_count % (a+1) == 0:\n                step_count += b\n            else:\n                step_count += (a+1)\n            if step_count % (a+1) == 0:\n                step_count += b\n            else:\n                step_count += (a+1)\n            if step_count % (a+1) == 0:\n                step_count += b\n            else:\n                step_count += (a+1)\n            if step_count % (a+1) == 0:\n                step_count += b\n            else:\n                step_count += (a+1)\n            if step_count % (a+1) == 0:\n                step_count += b\n            else:\n                step_count += (a+1)\n            if step_count % (a+1) == 0:\n                step_count += b\n            else:\n                step_count += (a+1)\n            if step_count % (a+1) == 0:\n                step_count += b\n            else:\n                step_count += (a+1)\n            if step_count % (a+1) == 0:\n                step_count += b\n            else:\n                step_count += (a+1)\n            if step_count % (a+1) == 0:\n                step_count += b\n            else:\n                step_count += (a+1)\n            if step_count % (a+1) == 0:\n                step_count += b\n            else:\n                step_count += (a+1)\n            if step_count % (a+1) == 0:\n                step_count += b\n            else:\n                step_count += (a+1)\n            if step_count % (a+1) == 0:\n                step_count += b\n            else:\n                step_count += (a+1)\n            if step_count % (a+1) == 0:\n                step_count += b\n            else:\n                step_count += (a+1)\n            if step_count % (a+1) == 0:\n                step_count += b\n            else:\n                step_count += (a+1)\n            if step_count % (a+1) == 0:\n                step_count += b\n            else:\n                step_count += (a+1)\n            if step_count % (a+1) == 0:\n                step_count += b\n            else:\n                step_count += (a+1)\n            if step_count % (a+1) == 0:\n                step_count += b\n            else:\n                step_count += (a+1)\n            if step_count % (a+1) == 0:\n                step_count += b\n            else:\n                step_count += (a+1)\n            if step_count % (a+1) == 0:\n                step_count += b\n            else:\n                step_count += (a+1)\n            if step_count % (a+1) == 0:\n                step_count += b\n            else:\n                step_count += (a+1)\n            if step_count % (a+1) == 0:\n                step_count += b\n            else:\n                step_count += (a+1)\n            if step_count % (a+1) == 0:\n                step_count += b\n            else:\n                step_count += (a+1)\n            if step_count % (a+1) == 0:\n                step_count += b\n            else:\n                step_count += (a+1)\n            if step_count % (a+1) == 0:\n                step_count += b\n            else:\n                step_count += (a+1)\n            if step_count % (a+1) == 0:\n                step_count += b\n            else:\n                step_count += (a+1)\n            if step_count % (a+1) == 0:\n                step_count += b\n            else:\n                step_count += (a+1)\n            if step_count % (a+1) == 0:\n                step_count += b\n            else:\n                step_count += (a+1)\n            if step_count % (a+1) == 0:\n                step_count += b\n            else:\n                step_count += (a+1)\n            if step_count % (a+1) == 0:\n                step_count += b\n            else:\n                step_count += (a+1)\n            if step_count % (a+1) == 0:\n                step_count += b\n            else:\n                step_count += (a+1)\n            if step_count % (a+1) == 0:\n                step_count += b\n            else:\n                step_count += (a+1)\n            if step_count % (a+1) == 0:\n                step_count += b\n            else:\n                step_count += (a+1)\n            if step_count % (a+1) == 0:\n                step_count += b\n            else:"
    },
    {
        "number": 4012,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    _, t = map(int, stdin.split())\n    for _ in range(t):\n        a, b, c = map(int, stdin.split())\n        if c % a == 0 and b % a == 0 and c % b == 0:\n            print(a + b - c)\n        else:\n            print(a + b - c)\n\nsolution(input())\n"
    },
    {
        "number": 4012,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    for _ in range(int(input())):\n        a, b, c = map(int, stdin.split())\n        if a % c == 0 and b % c == 0:\n            print(a, b, c)\n            return\n        m = a * b // c\n        print(a, b, m)\n        a, b, c = m, a, b\n        while a * b % c!= 0:\n            m = a * b // c\n            print(a, b, m)\n            a, b, c = m, a, b\n    return\n"
    },
    {
        "number": 4012,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    cases, a, b, c = int(stdin.split()[0]), int(stdin.split()[1]), int(stdin.split()[2]), int(stdin.split()[3])\n    moves = {}\n    res = \"\"\n    for i in range(cases):\n        moves[i] = []\n        moves[i].append(a + b)\n        moves[i].append(a + c)\n        moves[i].append(b + c)\n        moves[i].append(a * b)\n        moves[i].append(a * c)\n        moves[i].append(b * c)\n        moves[i].append(a - b)\n        moves[i].append(a - c)\n        moves[i].append(b - c)\n        moves[i].append(a // b)\n        moves[i].append(a // c)\n        moves[i].append(b // c)\n        moves[i].append(a % b)\n        moves[i].append(a % c)\n        moves[i].append(b % c)\n        moves[i].append(a + b - c)\n        moves[i].append(a + b + c)\n        moves[i].append(a - b - c)\n        moves[i].append(a - b + c)\n        moves[i].append(a - c + b)\n        moves[i].append(a + b - c - d)\n        moves[i].append(a + b + c - d)\n        moves[i].append(a - b - c + d)\n        moves[i].append(a - b + c - d)\n        moves[i].append(a - c + b - d)\n        moves[i].append(a + b - c - d)\n        moves[i].append(a + b + c + d)\n        moves[i].append(a - b + c - d)\n        moves[i].append(a - b - c + d)\n        moves[i].append(a - c + b + d)\n        moves[i].append(a + b - c - d - e)\n        moves[i].append(a + b + c - d - e)\n        moves[i].append(a - b + c + d + e)\n        moves[i].append(a - b - c + d + e)\n        moves[i].append(a - c - b + d + e)\n        moves[i].append(a - b - c - d + e)\n        moves[i].append(a - c + b + d + e)\n    for i in range(cases):\n        if res == \"\":\n            res = str(moves[i][0])\n        else:\n            res = min(res, str(moves[i][0]))\n    if res == \"\":\n        res = \"IMPOSSIBLE\"\n    return res\n"
    },
    {
        "number": 4012,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    "
    },
    {
        "number": 4012,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    for _ in range(N):\n        a, b, c = map(int, stdin.split())\n        if a <= b and b <= c:\n            print(c-b)\n        else:\n            if a*2 <= b:\n                print(a*2)\n            else:\n                print(a+b)\n    return\n\nsolution(input())\n\na,b,c = map(int, input().split())\n"
    },
    {
        "number": 4012,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    res = 0\n    for i in range(n):\n        a, b, c = map(int, stdin.split())\n        if c % a == 0 and c % b == 0:\n            res = max(res, b // a + c // b + 1)\n    return res\nprint(solution(input()))\n"
    },
    {
        "number": 4012,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    import sys\n    sys.stdin = open(__file__.replace('.py', '.txt'))\n    stdout = (\n        lambda *args: print(*args, **kwargs)\n        if args or kwargs\n        else print\n    )\n    t = int(stdin())\n    for i in range(t):\n        a, b, c = map(int, stdin().split())\n        b_div_a = b // a\n        c_div_b = c // b\n        if c_div_b > b_div_a:\n            stdout(c_div_b - b_div_a)\n        else:\n            stdout(c_div_b)\n    return stdout\n"
    },
    {
        "number": 4013,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = stdin.split()[1]\n    if n == 1:\n        return 0\n    a = list(map(int, a.split()))\n    print(max(a) - min(a))"
    },
    {
        "number": 4013,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    arr = list(map(int, stdin.split()[1].split()))\n    return str(min(arr) - max(arr))\n"
    },
    {
        "number": 4013,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    res = max(a) - min(a)\n    for i in range(n):\n        if a[i] > min(a):\n            res = max(res, a[i] - min(a))\n    return str(res)\n"
    },
    {
        "number": 4013,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.strip().split()))\n    n = len(a)\n    return str(max(a) - min(a))\n"
    },
    {
        "number": 4013,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def f(n):\n        # going from toto to stn\n        if n == 1:\n            return 1\n        # going from toto to stn\n        if n == 2:\n            return 2\n        # going from toto to stn\n        if n == 3:\n            return 3\n        # going from toto to stn\n        if n == 4:\n            return 5\n        return 5 * f(n - 1) + 2\n\n    n = int(stdin)\n    return str(f(n) - 1)\n"
    },
    {
        "number": 4013,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return stdin"
    },
    {
        "number": 4013,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A = list(map(int, stdin.split()))\n    #max_diff = sum(A) - min(A)\n    max_diff = sum(A)\n    for i in range(len(A)):\n        max_diff = max(max_diff - A[i], A[i] - min(A[i:]))\n    return str(max_diff)\n"
    },
    {
        "number": 4013,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # replace this for solution\n    return str(input())\n"
    },
    {
        "number": 4013,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin\n    a = list(map(int, input.split()))\n    n = len(a)\n    if len(a) == 0:\n        return \"0\"\n    a.sort()\n    return str(max(a[0] - a[-1], abs(a[0] - a[-1])) + 1)\n"
    },
    {
        "number": 4013,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    return str(min(a) - max(a))"
    },
    {
        "number": 4014,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def counting_sort(arr, low, high):\n        cnt = [0] * (high - low + 1)\n        # count = [0] * (high - low + 1)\n        for i in arr:\n            cnt[i - low] += 1\n        for i in range(1, len(cnt)):\n            cnt[i] += cnt[i - 1]\n        res = [0] * len(arr)\n        for i in reversed(range(len(arr))):\n            cnt[arr[i] - low] -= 1\n            res[cnt[arr[i] - low]] = arr[i]\n        return res\n\n    n, m = map(int, stdin.split())\n    # print(n, m)\n    exams = list(map(int, stdin.split()))\n    # print(exams)\n    m_array = counting_sort(exams, 1, n + 1)\n    # print(m_array)\n    res = []\n    for i in range(1, len(m_array)):\n        if m_array[i] - m_array[i - 1] == 1:\n            res.append(m_array[i - 1] + 1)\n        else:\n            res.append(m_array[i - 1] + 1)\n            res.append(m_array[i] + 1)\n    res =''.join(map(str, res))\n    return res\n\nprint(solution(\"5 2\\n1 3 1\\n1 2 1\\n\"))\n\n\ndef"
    },
    {
        "number": 4014,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    _, n, m = list(map(int, stdin.split()))\n    schedule = []\n    for _ in range(m):\n        s, d, c = list(map(int, input().split()))\n        schedule.append((s, d, c))\n    schedule = sorted(schedule, key=lambda x: x[0])\n    last_day = -1\n    for i in range(len(schedule)):\n        day, d, c = schedule[i]\n        if day!= last_day:\n            last_day = day\n            continue\n        if d - day > c:\n            print('-1')\n            return\n    return '\\n'.join(map(str, (m + 1) * [0]))\n"
    },
    {
        "number": 4014,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def _get_day(day):\n        res = day\n        if day < 0:\n            res = 0\n        return res\n\n    data = list(map(int, stdin.split()))\n    n, m = data[0], data[1]\n    days = data[2:]\n    max_day = n\n    day = 0\n    prepare_cnt = 1\n    exams = []\n    while prepare_cnt <= m:\n        if days[day] > max_day:\n            day = 0\n            prepare_cnt = 1\n        day += 1\n        prepare_cnt += 1\n        exams.append(prepare_cnt)\n\n    if day!= 0:\n        res = \"ERROR\"\n    else:\n        res = str(n) + \" \" + str(max_day)\n        res += \" \"\n        for i in range(n):\n            res += str(exams[i]) + \" \"\n            res += str(i)\n            res += \" \"\n        res = res[:-1]\n\n    return res\n"
    },
    {
        "number": 4014,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\nT=int(input())\nfor i in range(T):\n    n, m = map(int, input().split())\n    for i in range(n):\n        st, d, c = map(int, input().split())\n        if st <= d:\n            if d < st + c:\n                print(-1)\n            else:\n                print(n+1)\n        else:\n            if c+st > d:\n                print(-1)\n            else:\n                print(n+1, st, d, c)\n"
    },
    {
        "number": 4014,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4014,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = (int(i) for i in stdin.split())\n    schedule = [[] for _ in range(n)]\n\n    for i in range(n):\n        s, d, c = (int(j) for j in stdin.split())\n        schedule[i].append((s, d, c))\n\n    #print(schedule)\n    for day in schedule:\n        day.sort()\n\n    for i, day in enumerate(schedule):\n        for s, d, c in day:\n            if len(day) > 1 and day[-1][0] > s:\n                return \"-1\"\n        for s, d, c in day:\n            if s > i:\n                return \"-\"\n    if len(day) > 1:\n        return \"-\"\n    return str(len(day)) + \" \" + \" \".join(map(str,day))"
    },
    {
        "number": 4014,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    n, m = map(int, stdin.split())\n    days = sorted(list(map(int, stdin.split())))\n    for i in range(m):\n        if days[i]!= i+1:\n            print(-1)\n            return\n    days = sorted(days)\n    res = []\n    for i in range(len(days)-1):\n        if days[i+1] - days[i] > 1:\n            res.append(0)\n        elif days[i+1] - days[i] == 1:\n            res.append(1)\n        else:\n            res.append(0)\n    print(n, *res)\nsolution(stdin)"
    },
    {
        "number": 4014,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    days = []\n    for i in range(n):\n        day_count, exams_count, exam_preparation_day = map(int, stdin.split())\n        days.append((day_count, exams_count, exam_preparation_day))\n\n    if len(days) < m:\n        return \"-\"\n    day_preparation_table = {}\n    for day, exam, preparation_day in days:\n        day_preparation_table[day] = day_preparation_table.get(day, 0) + 1\n        if day < preparation_day:\n            day_preparation_table[preparation_day] += 1\n\n    possible_schedules = []\n    # make a list of possible schedules\n    for day in range(1, n+1):\n        if day not in day_preparation_table:\n            possible_schedules.append([0] * m)\n        else:\n            possible_schedules.append([0] * m)\n\n    for day, exam, preparation_day in days:\n        for i in range(exam):\n            if day < preparation_day:\n                possible_schedules[day][i] = 1\n            else:\n                possible_schedules[preparation_day][i] = 1\n    if not possible_schedules[-1][-1]:\n        return \"-\"\n    for i in range(m):\n        possible_schedules[-1][i] = 0\n    for i in range(m-1, -1, -1):\n        for j in range(i, -1, -1):\n            if possible_schedules[j][i] == 0:\n                possible_schedules[j][i] = 1\n                break\n    result = []\n    for i in range(n):\n        result.append(str(i+1) + \" \" + \" \".join(map(str, possible_schedules[i])))\n    return \"\\n\".join(result)\n\n\nstdin = \"\"\"5 2\n1 3 1\n1 5 1\"\"\"\nprint(solution(stdin))\n\nstdin = \"\"\"3 2\n1 3 1\n1 2 1\n\"\"\"\nprint(solution(stdin))\n\nstdin = \"\"\"10 3\n4 7 2\n1 10 3\n8 9 1\n\"\"\"\nprint(solution(stdin))\n"
    },
    {
        "number": 4014,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    days_schedule = list(map(int, stdin.split()))\n    schedule = []\n    pass_times = 0\n    for day in range(n):\n        if day < n - m:\n            schedule.append(days_schedule[day])\n            pass_times += 1\n            if pass_times == m:\n                break\n        else:\n            if pass_times == m:\n                schedule.append(days_schedule[day])\n                pass_times += 1\n            elif pass_times > m:\n                schedule.append(0)\n    return''.join(map(str, schedule))\n"
    },
    {
        "number": 4014,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    days_of_exam = []\n    for _ in range(m):\n        days_of_exam.append(list(map(int, stdin.split())))\n\n    #print(days_of_exam)\n\n    days_of_exam = sorted(days_of_exam, key=lambda x: (x[0], x[1]))\n    #print(days_of_exam)\n\n    for i in range(len(days_of_exam)):\n        curr_day = days_of_exam[i]\n        next_day = days_of_exam[i+1]\n        if curr_day[1] > next_day[0]:\n            return '-1'\n\n    day_of_exam = days_of_exam[0][0]\n    res = []\n    res.append(m + 1)\n\n    for i in range(1, n):\n        day_of_exam += 1\n        for j in range(len(days_of_exam)):\n            if day_of_exam == days_of_exam[j][0]:\n                if (m + 1) > days_of_exam[j][1]:\n                    res.append(m + 1)\n                else:\n                    res.append(days_of_exam[j][1])\n\n    return''.join(map(str, res))"
    },
    {
        "number": 4015,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    steps = 0\n    while n > m:\n        if n % 3 == 0:\n            n /= 3\n        elif n % 2 == 0:\n            n /= 2\n        else:\n            return '-1'\n        steps += 1\n    return str(steps)"
    },
    {
        "number": 4015,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = (int(i) for i in stdin.split())\n    if n == m:\n        return \"0\"\n\n    def solve(n, m):\n        if n % 2 == m % 2:\n            return \"0\"\n        x = (n // 2) + 1\n        y = (m // 2) + 1\n        if n <= y:\n            return solve(x, m) + solve(x, y) + solve(x + y, m) + solve(x + y + x, m)\n        else:\n            return \"0\"\n\n    return solve(n, m)\n"
    },
    {
        "number": 4015,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    if n % 2 == 0:\n        if n == m:\n            return \"0\"\n        return str(n // 2) + \" \" + str(m // 2) + \" \" + str(n // 2)\n    elif n == m:\n        return \"1\"\n    return \"-1\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4015,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = stdin.split()\n    n, m = int(n), int(m)\n    steps = 0\n    while True:\n        if n == m:\n            return steps\n        else:\n            if n % 2 == 0:\n                n = n // 2\n                steps += 1\n            else:\n                n = n * 3\n                steps += 1\nsolution(input())"
    },
    {
        "number": 4015,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    ans = -1\n    if n == m:\n        ans = 0\n    elif n < m:\n        while n!= m:\n            if n % 2 == 0:\n                n = n / 2\n            elif n % 3 == 0:\n                n = n / 3\n            else:\n                break\n            ans += 1\n    else:\n        while n!= m:\n            if n % 3 == 0:\n                n = n / 3\n            elif n % 2 == 0:\n                n = n / 2\n            else:\n                break\n            ans += 1\n    return str(ans)\n"
    },
    {
        "number": 4015,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''120 51840''')\n    7\n    >>> solution('''42 42''')\n    0\n    >>> solution('''48 72''')\n    -1\n    \"\"\"\n    [n, m] = map(int, stdin.split())\n    ans = None\n\n    # create a series of numbers to multiply\n    series = [1, 2, 3, 4, 5]\n    while series[-1] <= m:\n        series.append(series[-1] * 2)\n        series.append(series[-1] * 3)\n\n    # iterate through the series\n    # count up moves to convert the series to the m\n    count = 0\n    for n in reversed(series):\n        count += 1\n        m /= n\n        if m == 1:\n            return count\n    return ans\n"
    },
    {
        "number": 4015,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    num, goal = map(int, stdin.split())\n    if num == goal:\n        return '0'\n    cnt = 0\n    # count = 1\n    while True:\n        # count += 1\n        num = num * 2\n        cnt += 1\n        if num == goal:\n            return str(cnt)\n        if num > goal:\n            return '-1'\n"
    },
    {
        "number": 4015,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    seen = set()\n\n    def transform(n, m):\n        for x in range(1, 10):\n            y = x * n\n            z = x * n + 1\n            if y > m:\n                continue\n            if z > m:\n                return -1\n            if y == m and z == m:\n                return 1\n            if y == m:\n                seen.add(y)\n            if z == m:\n                seen.add(z)\n\n    ans = -1\n    while True:\n        n = transform(n, m)\n        if n == -1:\n            return ans\n        if n == -2:\n            return -1\n        if n not in seen:\n            seen.add(n)\n            ans += 1\n\nsolution(stdin)\n"
    },
    {
        "number": 4015,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    1) Since we are given two numbers, there is only one solution and it has to be 1 step: 120 to 42\n    2) We can multiply $120$ by 2, then add $42$ to make $72$.\n    3) Now we can multiply $72$ by 2 and add $48$ to make $120$.\n    4) The question is that how many times can we multiply $120$ to make $72$? The answer is 2.\n    5) Now we can multiply $72$ by 3 and add $48$ to make $120$.\n    6) The question is that how many times can we multiply $120$ to make $72$? The answer is 2.\n    7) Now we can multiply $72$ by 3 and add $48$ to make $120$.\n    8) The question is that how many times can we multiply $120$ to make $72$? The answer is 3.\n    9) Now we can multiply $72$ by 3 and add $48$ to make $120$.\n    10) The question is that how many times can we multiply $120$ to make $72$? The answer is 4.\n    11) Now we can multiply $72$ by 3 and add $48$ to make $120$.\n    12) The question is that how many times can we multiply $120$ to make $72$? The answer is 5.\n    13) Now we can multiply $72$ by 3 and add $48$ to make $120$.\n    14) The question is that how many times can we multiply $120$ to make $72$? The answer is 6.\n    15) Now we can multiply $72$ by 3 and add $48$ to make $120$.\n    16) The question is that how many times can we multiply $120$ to make $72$? The answer is 7.\n    17) So now we can multiply $72$ by 3 and add $48$ to make $120$.\n    18) The question is that how many times can we multiply $120$ to make $72$? The answer is 8.\n    19) Now we can multiply $72$ by 3 and add $48$ to make $120$.\n    20) The question is that how many times can we multiply $120$ to make $72$? The answer is 9.\n    21) Now we can multiply $72$ by 3 and add $48$ to make $120$.\n    22) The question is that how many times can we multiply $120$ to make $72$? The answer is 10.\n    23) Now we can multiply $72$ by 3 and add $48$ to make $120$.\n    24) The question is that how many times can we multiply $120$ to make $72$? The answer is 11.\n    25) Now we can multiply $72$ by 3 and add $48$ to make $120$.\n    26) The question is that how many times can we multiply $120$ to make $72$? The answer is 12.\n    27) Now we can multiply $72$ by 3 and add $48$ to make $120$.\n    28) The question is that how many times can we multiply $120$ to make $72$? The answer is 13.\n    29) Now we can multiply $72$ by 3 and add $48$ to make $120$.\n    30) The question is that how many times can we multiply $120$ to make $72$? The answer is 14.\n    31) Now we can multiply $72$ by 3 and add $48$ to make $120$.\n    32) The question is that how many times can we multiply $120$ to make $72$? The answer is 15.\n    33) Now we can multiply $72$ by 3 and add $48$ to make $120$.\n    34) The question is that how many times can we multiply $120$ to make $72$? The answer is 16.\n    35) Now we can multiply $72$ by 3 and add $48$ to make $120$.\n    36) The question is that how many times can we multiply $120$ to make $72$? The answer is 17.\n    37) Now we can multiply $72$ by 3 and add $48$ to make $120$.\n    38) The question is that how many times can we multiply $120$ to make $72$? The answer is 18.\n    39) Now we can multiply $72$ by 3 and add $48$ to make $120$.\n    40) The question is that how many times can we multiply $120$ to make $72$? The answer is 19.\n    41) Now we can multiply $72$ by 3 and add $48$ to make $120$.\n    42) The question is that how many times can we multiply $120$ to make $72$? The answer is 20.\n    43) Now we can multiply $72$ by 3 and add $48$ to make $120$.\n    44) The question is that how many times can we multiply $120$ to make $72$? The answer is 21.\n    45) Now we can multiply $72$ by 3 and add $48$ to make $120$.\n    46) The question is that how many times can we multiply $120$ to make $72$? The answer is 22.\n    47) Now we can multiply $72$ by 3 and add $48$ to make $120$.\n    48) The question is that how many times can we multiply $120$ to make $72$? The answer is 23.\n    49) Now we can multiply $72$ by 3 and add $48$ to make $120$.\n    50) The question is that how many times can we multiply $120$ to make $72$? The answer is 24.\n    51) Now we can multiply $72$ by 3 and add $48$ to make $120$.\n    52) The question is that how many times can we multiply $120$ to make $72$? The answer is 25.\n    53) Now we can multiply $72$ by 3 and add $48$ to make $120$.\n    54) The question is that how many times can we multiply $120$ to make $72$? The answer is 26.\n    55) Now we can multiply $72$ by 3 and add $48$ to make $120$.\n    56) The question is that how many times can we multiply $120$ to make $72$? The answer is 27.\n    57) Now we can multiply $72$ by 3 and add $48$ to make $120$.\n    58) The question is that how many times can we multiply $120$ to make $72$? The answer is 28.\n    59) Now we can multiply $72$ by 3 and add $48$ to make $120$.\n    60) The question is that how many times can we multiply $120$ to make $72$? The answer is 29.\n    61) Now we can multiply $72$ by 3 and add $48$ to make $120$.\n    62) The question is that how many times can we multiply $120$ to make $72$? The answer is 30.\n    63) Now we can multiply $72$ by 3 and add $48$ to make $120$.\n    64) The question is that how many times can we multiply $120$ to make $72$? The answer is 31.\n    65) Now we can multiply $72$ by 3 and add $48$ to make $120$.\n    66) The question is that how many times can we multiply $120$ to make $72$? The answer is 32.\n    67) Now"
    },
    {
        "number": 4015,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n = int(stdin[0])\n    m = int(stdin[1])\n\n    if n == m:\n        return \"0\"\n\n    i = 1\n    while (n ** i) % m!= 0:\n        i += 1\n\n    return str(i)\n"
    },
    {
        "number": 4016,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4016,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    t = stdin\n    i = 0\n    l = 0\n    r = 0\n    s = \"\"\n    while i <= n-1:\n        if i == n-1:\n            i = 0\n            l = 0\n            r = n-1\n        if t[l]!= t[i]:\n            s += t[l]+t[i]\n            i += 1\n            l += 1\n            r += 1\n        else:\n            l += 1\n            r += 1\n    print(s)\n    return s\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4016,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input_tuple = tuple(stdin.split())\n    n, k = input_tuple\n    t = stdin.strip()\n    if not k:\n        return ''\n\n    indices = []\n    for i in range(len(t) - n + 1):\n        sub = t[i:i + n]\n        if sub == t:\n            indices.append(i)\n    indices.sort()\n    return ''.join([t[i] for i in indices])\n"
    },
    {
        "number": 4016,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    t = stdin\n    n, k = map(int, input().split())\n    return \"\".join(t[i:i + n] for i in range(n) if t[i:i + n] == t)\n"
    },
    {
        "number": 4016,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    t = stdin\n    l = len(t)\n    n = l//2\n    k = l//2 - 1\n    for i in range(1, k+1):\n        if t[i] == t[n-1]:\n            return t\n    t = t[:n] + t[:n] + t[n:]\n    return t"
    },
    {
        "number": 4016,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    t, k = stdin.split()\n    return t[:len(t) - len(t) % int(k)]"
    },
    {
        "number": 4016,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4016,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    t = stdin.strip()\n    counter = 1\n    result = \"\"\n    while counter <= n:\n        result += t[0]\n        counter += 1\n    return result\n    # print(result)\n    # return result\n"
    },
    {
        "number": 4016,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    t = stdin[1]\n    \n    start = 0\n    end = 0\n    result = \"\"\n    while end < len(t):\n        if (len(t[start:end + 1]) == n):\n            result += t[start:end + 1]\n            start += 1\n            end += 1\n        else:\n            end += 1\n    if len(result) == k:\n        return result\n    else:\n        return \"\"\n\nsolution(input())"
    },
    {
        "number": 4016,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin\n    if k == 0:\n        return s\n    ans = s\n    i = 0\n    while len(ans) > k:\n        # find all substring\n        sub = s[i]\n        # find all positions of substring\n        index = []\n        for j in range(i, n - k + 1):\n            if s[j: j + k] == sub:\n                index.append(j)\n        # print(index)\n        if len(index) > 1:\n            index.sort()\n            ans = s[index[0]: index[1] + 1]\n        else:\n            ans = s[index[0]: index[0] + 1]\n        i += 1\n    return ans\n\n\nsolution(input())\n"
    },
    {
        "number": 4017,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    # your code here\n    arr = list(map(int, stdin[1].split()))\n    # summa = 0\n    # indeks = 0\n    good_indices = []\n    for i in range(len(arr)):\n        summa = 0\n        for j in range(len(arr)):\n            summa += arr[j]\n            if summa == arr[i]:\n                good_indices.append(i + 1)\n    # print(good_indices)\n    return str(len(good_indices)) +'' +''.join(map(str, good_indices))\n\n\nprint(solution(input()))"
    },
    {
        "number": 4017,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    k = 0\n    a.sort()\n    for i in range(n):\n        if a[i] == a[i-1] and a[i] == a[i+1]:\n            k += 1\n            a.remove(a[i])\n    print(k)\n    for i in range(k):\n        print(a[i])\n    return"
    },
    {
        "number": 4017,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, *A = [int(x) for x in stdin.split()]\n\n    ans = 0\n    good = True\n    for i in range(len(A) - 1):\n        if A[i] > A[i + 1]:\n            A[i], A[i + 1] = A[i + 1], A[i]\n            good = False\n        ans += A[i]\n\n    if good:\n        print(0)\n        return\n\n    A_sum = sum(A)\n    A.sort(reverse=True)\n    for i, a in enumerate(A):\n        A[i] -= A_sum\n\n    print(ans)\n    for i in range(len(A)):\n        print(A[i], end=' ')\n    print()\n\n    return\n"
    },
    {
        "number": 4017,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    [n, a] = stdin.split()\n    n = int(n)\n    sum = 0\n    res = []\n    for i in range(n):\n        sum += int(a[i])\n        if sum == int(a[i]):\n            res.append(i + 1)\n    print(len(res))\n    if len(res) == 0:\n        print(\"0\")\n    else:\n        print(\" \".join(map(str, res)))\n\nsolution(input())\n"
    },
    {
        "number": 4017,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''2\n    5 1 2 2\n    ''')\n    3\n    >>> solution('''4\n    8 3 5 2\n    ''')\n    2\n    >>> solution('''5\n    2 1 2 4 3\n    ''')\n    0\n    \"\"\"\n    l = list(map(int, stdin.split()))\n    k = 0\n    for i in range(len(l)):\n        l[i] = l[i] - 1\n        if sum(l) == 0 and all(l):\n            k += 1\n        l[i] = l[i] + 1\n    return str(k)\n"
    },
    {
        "number": 4017,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if sum(arr[i:j + 1]) == sum(arr[i + 1:len(arr) + 1]):\n                print(len(arr) - j - 1)\n                for x in range(i, j + 1):\n                    print(arr[x], end=' ')\n                print()\n                return"
    },
    {
        "number": 4017,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    A = list(map(int, stdin.split()))\n    print(A)\n    k = 0\n    for i in range(N):\n        while sum(A[:i])!= sum(A[i + 1:]):\n            A.pop(i)\n            k += 1\n    return k"
    },
    {
        "number": 4017,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    s = sum(a)\n    ans = 0\n    k = 0\n    for i in range(n):\n        s -= a[i]\n        if s == 0:\n            ans += 1\n            k = i + 1\n            break\n    if ans == 0:\n        return 0\n    for i in range(n):\n        if i!= k:\n            ans += 1\n    return str(ans) + \" \" + \" \".join(map(str, range(k + 1)))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4017,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n\n    def isGood(i):\n        return sum(a[:i] + a[i + 1:]) == a[i]\n\n    def nice(i):\n        if a[i] == sum(a[:i] + a[i + 1:]):\n            return\n        a[i] = sum(a[:i] + a[i + 1:])\n        for j in range(i + 1, n):\n            if isGood(j):\n                nice(j)\n\n    return len([i for i in range(n) if not isGood(i)])\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4017,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    _, n = stdin.split()\n    n = int(n)\n    a = list(map(int, stdin.split()))\n    k = 0\n    for i in range(n):\n        if (sum(a[:i]) + sum(a[i + 1:])) % 2 == 0:\n            k = k + 1\n    return str(k)\n"
    },
    {
        "number": 4018,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4018,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4018,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split()]\n    s = stdin[2]\n    if len(s) > k:\n        print(-1)\n        return\n    return str(n - len(s))\n"
    },
    {
        "number": 4018,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s,k = map(int,stdin.split())\n    if k > s:\n        return -1\n    if k==1:\n        return 0\n    if k == s:\n        return 0\n    a = (k-1)*s\n    b = (s-k)*s\n    return min(a,b)"
    },
    {
        "number": 4018,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin\n\n    # if len(s) < k:\n    #     return -1\n\n    # return solution_recursive(n, k, s)\n\n    return solution_dp(n, k, s)\n\n\ndef"
    },
    {
        "number": 4018,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin\n    set_s = set(s)\n    \n    while len(set_s) < k:\n        for i in range(len(s)):\n            if s[i] in set_s:\n                continue\n            else:\n                set_s.add(s[i])\n                break\n        s = s[1:]\n\n    if len(set_s) == k:\n        return len(set_s)\n    else:\n        return -1\n\nsolution(input())\n\n'''\n\n'''\n    def solution(s):\n        set_s = set(s)\n        for i in range(len(s)):\n            if s[i] in set_s:\n                set_s.remove(s[i])\n            else:\n                return -1\n        return len(set_s)\n'''\n\n'''\ndef"
    },
    {
        "number": 4018,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('10 5')\n    4\n    >>> solution('100 10')\n    233\n    >>> solution('6 7')\n    -1\n    >>> solution('5 6')\n    4\n    \"\"\"\n    n, k = list(map(int, stdin.split()))\n    costs = list(map(int, stdin.split()))\n    return min(costs) if len(costs) >= k else -1\n"
    },
    {
        "number": 4018,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, k = list(map(int, stdin.split(\" \")))\n    str_list = list(stdin)\n    string_size = len(str_list)\n\n    if k > string_size:\n        print(-1)\n        return\n    cost_set = k\n\n    if n == string_size:\n        print(cost_set)\n        return\n\n    index = 0\n\n    cost_set_list = []\n    str_list_copy = str_list.copy()\n\n    while (index < string_size):\n        if len(str_list_copy) == 0:\n            return -1\n        cost = 0\n\n        while len(str_list_copy) > 0 and cost_set > 0:\n            cost = cost + 1\n            cost_set = cost_set - 1\n            str_list_copy.pop(0)\n\n        if len(str_list_copy) == 0:\n            print(cost)\n            return\n        else:\n            cost_set = cost_set + 1\n\n            str_list_copy.pop(0)\n\n        if cost_set > k:\n            cost_set = cost_set - 1\n            index = index + 1\n            continue\n\n        while cost_set > 0:\n            index = index + 1\n            cost_set = cost_set - 1\n\n        index = index + 1\n\nsolution(\"4 5\\najihiushda\")\nsolution(\"5 6\\naaaaa\")\nsolution(\"5 7\\naaaaa\")\nsolution(\"10 100\\najihiushda\")\n"
    },
    {
        "number": 4018,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n  n, k = map(int, stdin.split())\n  s = stdin[1]\n  return \" \".join(s[i:i+k] for i in range(0, n, k))\n\n\ndef"
    },
    {
        "number": 4018,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, k = list(map(int, stdin.split()))\n    \n    if k == 1:\n        return -1\n    if n == 1:\n        return 0\n    if k > n:\n        return -1\n    \n    s = list(stdin.strip())\n    s.sort()\n    \n    cost = 0\n    for i in range(k):\n        if s[i] in s[i+1:]:\n            return -1\n        \n        cost += n - i\n    \n    return cost\n\nprint(solution(input()))\n"
    },
    {
        "number": 4019,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = map(int, stdin.split())\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        u, v = map(int, stdin.split())\n        graph[u].append(v)\n        graph[v].append(u)\n    for i in range(n):\n        if len(graph[i]) < d:\n            return \"NO\"\n    visited = {0}\n    group = {0}\n    def dfs(node):\n        for edge in graph[node]:\n            if edge not in visited:\n                visited.add(edge)\n                group.add(edge)\n                dfs(edge)\n        return\n    dfs(1)\n    for group_i in group:\n        if group_i == 1:\n            continue\n        group_i_len = len(group)\n        group_i_edges = len(graph[group_i])\n        group_i_degree = group_i_len - group_i_edges\n        for group_j in group:\n            if group_j == group_i:\n                continue\n            if group_j!= 1 and group_i_degree > group_j:\n                return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 4019,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, D = map(int, stdin.split())\n    d = D\n    edges = list()\n    for i in range(m):\n        v, u = map(int, stdin.split())\n        if v!= u:\n            edges.append((v, u))\n    for e in range(len(edges)):\n        if edges[e][0]!= 1 and edges[e][1]!= 1:\n            for t in range(len(edges)):\n                if edges[t][0]!= 1 and edges[t][1]!= 1:\n                    if edges[e]!= edges[t]:\n                        for s in range(len(edges)):\n                            if edges[s]!= edges[e]:\n                                if edges[t]!= edges[s]:\n                                    if edges[t]!= edges[e] and edges[s]!= edges[t]:\n                                        if edges[s]!= edges[e] and edges[e]!= edges[t] and edges[t]!= edges[s]:\n                                            if d!= 0:\n                                                d -= 1\n                                                print(d)\n                                                if d == 0:\n                                                    return \"YES\"\n                                                return \"NO\"\n                                        else:\n                                            d += 1\n                                            print(d)\n                                            if d == 0:\n                                                return \"YES\"\n                                            return \"NO\""
    },
    {
        "number": 4019,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    pass\n"
    },
    {
        "number": 4019,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = map(int, stdin.split())\n    edges = [[int(i) for i in line.split()] for line in stdin.splitlines()[1:]]\n    return \"NO\" if any(\n        [((d - 1) * 2 == D) and (len(set(e)) == 1) for D, e in zip(\n            [*map(int, stdin.split()[1:])],\n            [*map(int, stdin.split()[1:])])]\n    ) else \"YES\""
    },
    {
        "number": 4019,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, D = map(int, stdin.split())\n    if not n or not m or D > n or D < 0 or not D % n:\n        return \"NO\"\n    u = 0\n    adj = defaultdict(list)\n    for i in range(m):\n        u, v = map(int, stdin.split())\n        if v not in adj[u]:\n            adj[u].append(v)\n        if u not in adj[v]:\n            adj[v].append(u)\n    return \"YES\"\n\ndef"
    },
    {
        "number": 4019,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = map(int, stdin.split())\n    edges = [tuple(map(int, stdin.split())) for _ in range(m)]\n    for v, u in edges:\n        if v < u:\n            edges[v], edges[u] = edges[u], edges[v]\n    if all(e[0]!= e[1] for e in edges):\n        return 'NO'\n    vertices = sorted(i for i in range(n) if i!= 1)\n    for i in vertices:\n        if all(e[0]!= i and e[1]!= i for e in edges):\n            return 'YES'\n    return 'NO'\n\nsolution(input())\n"
    },
    {
        "number": 4019,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, D = map(int, stdin.split())\n    graph = [[] for _ in range(n + 1)]\n    degree = [0] * (n + 1)\n    for _ in range(m):\n        u, v = map(int, stdin.split())\n        graph[u].append(v)\n        graph[v].append(u)\n        degree[u] += 1\n        degree[v] += 1\n    for i in range(1, n + 1):\n        if degree[i] == D:\n            return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 4019,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    num_of_vertices, num_of_edges, degree_of_first_vertex = map(int, stdin.split())\n    edges = []\n    for _ in range(num_of_edges):\n        edge = list(map(int, stdin.split()))\n        edges.append(edge)\n    while len(edges)!= 0:\n        edges = sorted(edges, key=lambda x: x[1])\n        temp = edges[0]\n        del edges[0]\n        if temp[0] == temp[1]:\n            continue\n        if degree_of_first_vertex == temp[0]:\n            if temp[0] == temp[1]:\n                print('YES')\n                print(''.join(str(x) for x in temp))\n                return\n            else:\n                print('YES')\n                print(''.join(str(x) for x in temp))\n                for edge in edges:\n                    print(''.join(str(x) for x in edge))\n                return\n        else:\n            for edge in edges:\n                if temp[0] in edge and temp[1] in edge:\n                    continue\n                if temp[1] in edge:\n                    break\n            if temp[1] == temp[0]:\n                print('YES')\n                print(''.join(str(x) for x in temp))\n                for edge in edges:\n                    print(''.join(str(x) for x in edge))\n                return\n            else:\n                print('NO')\n                return\nstdin = \"\"\"4 5 1\n1 2\n1 3\n1 4\n2 3\n3 4\"\"\"\nsolution(stdin)"
    },
    {
        "number": 4019,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 4 5 1\n   ... 1 2\n   ... 1 3\n   ... 1 4\n   ... 2 3\n   ... 3 4\n   ... ''')\n    'YES'\n    >>> solution('''\n   ... 4 5 3\n   ... 1 2\n   ... 1 4\n   ... 2 3\n   ... 3 4\n   ... ''')\n    'NO'\n    \"\"\"\n    n, m, d = map(int, stdin.split())\n\n    def find_spanning_tree(graph, vertex, visited):\n        visited.add(vertex)\n        for adj_vertex in graph[vertex]:\n            if adj_vertex in visited:\n                continue\n            if graph[vertex].index(adj_vertex) == 0:\n                continue\n            find_spanning_tree(graph, adj_vertex, visited)\n\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        v, u = map(int, input().split())\n        graph[v].append(u)\n        graph[u].append(v)\n    visited = set()\n    for vertex in range(1, n):\n        if vertex not in visited:\n            find_spanning_tree(graph, vertex, visited)\n    count = 0\n    for vertex in range(1, n):\n        if vertex in visited and len(graph[vertex]) == 1:\n            count += 1\n    if count == d or len(visited) == d:\n        return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 4019,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4020,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    h1, m1, h2, m2 = (int(x) for x in stdin.split())\n    mid = (h1 * 60 + m1) / 2 + (h2 * 60 + m2) / 2\n    return f\"{mid // 60:02}:{mid % 60:02}\"\n"
    },
    {
        "number": 4020,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    h1, m1 = map(int, stdin.split(':'))\n    h2, m2 = map(int, stdin.split(':'))\n    mid = (h2 * 60 + m2) // 2 + (h1 * 60 + m1) // 2\n    if mid % 60 == 0:\n        return f\"{mid // 60:02}:{mid % 60:02}\"\n    else:\n        return f\"{mid // 60:02}:{mid % 60:02}:00\"\n\n\nprint(solution(input()))\nprint(solution(input()))\n"
    },
    {
        "number": 4020,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    h1, m1 = map(int, stdin.split())\n    h2, m2 = map(int, stdin.split())\n    assert m1 % 2 == m2 % 2 and m1 > m2\n    assert 0 <= h1 < 24 and 0 <= m1 < 60\n    assert 0 <= h2 < 24 and 0 <= m2 < 60\n    mid = ((h1 + h2) // 2, (m1 + m2) // 2)\n    return f\"{mid[0]:02}:{mid[1]:02}\"\n"
    },
    {
        "number": 4020,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    h1, m1 = map(int, stdin.split())\n    h2, m2 = map(int, stdin.split())\n    return \"{0:02}:{1:02}\".format((h1 + h2) // 2, (h1 * 60 + m1 + m2) // 2)\n"
    },
    {
        "number": 4020,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    hour, minute = map(int, stdin.split())\n    mid_hour = (hour + minute // 2) % 24\n    mid_min = (minute + ((minute - 1) // 2) * 60) % 60\n    return str(mid_hour).rjust(2, \"0\") + \":\" + str(mid_min).rjust(2, \"0\")\n"
    },
    {
        "number": 4020,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    h_1, m_1 = tuple(map(int, stdin.split(':')))\n    h_2, m_2 = tuple(map(int, stdin.split(':')))\n    midpoint = int((h_1 + h_2) / 2)\n    midpoint_min = int(midpoint / 2)\n    return f'{midpoint:02}:{midpoint_min:02}'\n    \n"
    },
    {
        "number": 4020,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    h1, m1 = stdin.split()[0].split(':')\n    h2, m2 = stdin.split()[1].split(':')\n    h1, m1 = int(h1), int(m1)\n    h2, m2 = int(h2), int(m2)\n    midpoint = (h1 + h2) // 2\n    midpoint = midpoint * 60 + m1 + (m2 - m1) // 2\n    midpoint = str(midpoint // 60) + ':' + str(midpoint % 60)\n    return midpoint\n"
    },
    {
        "number": 4020,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    h1, m1 = stdin.strip().split()\n    h1 = int(h1)\n    m1 = int(m1)\n\n    h2, m2 = stdin.strip().split()\n    h2 = int(h2)\n    m2 = int(m2)\n\n    # The problem says that it is always held for an even number of minutes.\n    # Therefore, if the first integer is larger than the second, subtract 1 to get the smaller of the two.\n    # for the case of an odd number, the higher integer should be taken.\n    if h1 > h2:\n        h1, h2 = h2, h1\n    if m1 > m2:\n        m1, m2 = m2, m1\n\n    mid = (h1 * 60 + m1) // 2 + (h2 * 60 + m2) // 2\n\n    return f'{h1 * 60 + m1:02}:{h2 * 60 + m2:02}'\n"
    },
    {
        "number": 4020,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    h1, m1 = map(int, stdin.strip().split())\n    h2, m2 = map(int, stdin.strip().split())\n\n    if (h1 + m1) % 2 == (h2 + m2) % 2:\n        return f'{int(h1 + (m1 + m2) / 2)}:{int((h1 + m1 + h2 + m2) / 2)}'\n    return f'{h2 + (m1 + m2) / 2}:{m1 + (h1 + m2) / 2}'\n"
    },
    {
        "number": 4020,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    h1, m1 = map(int, stdin.split())\n    h2, m2 = map(int, stdin.split())\n\n    if m1 % 2!= m2 % 2:\n        return '-1'\n    if m1 < m2:\n        h1 += 1\n        m1 += 60\n    elif m1 > m2:\n        h2 += 1\n        m2 += 60\n\n    if h1 < 24 and h1 >= 0 and m1 < 60 and m1 >= 0:\n        return '{:02}:{:02}'.format(h1, m1)\n    elif h2 < 24 and h2 >= 0 and m2 < 60 and m2 >= 0:\n        return '{:02}:{:02}'.format(h2, m2)\n    else:\n        return '-1'\n"
    },
    {
        "number": 4021,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    number = int(stdin)\n    return number + 1 if number % 2 == 1 else number - 1\n"
    },
    {
        "number": 4021,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    b = 0\n    while a!= 0:\n        a //= 2\n        b += 1\n    return str(b)\n"
    },
    {
        "number": 4021,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin\n    a = int(a)\n    if a%2!= 0:\n        return \"1\"\n    else:\n        return \"2\"\n"
    },
    {
        "number": 4021,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a == 1:\n        return \"1\"\n    b = a\n    c = a\n    d = a + 1\n    while b!= 0:\n        c = a % 10\n        a = int(a / 10)\n        if c == 1:\n            b = 1\n        else:\n            b = 0\n    a = c\n    return str(a)\n"
    },
    {
        "number": 4021,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    for i in range(2, a):\n        if a % i == 0:\n            return i\n    return a\n"
    },
    {
        "number": 4021,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def get_input():\n        a = stdin\n        return int(a)\n\n    def get_n_bit(n: int) -> int:\n        base = 2\n        binary = []\n        for i in range(n):\n            binary.append(int(get_input() / base))\n            base *= 2\n        return int(binary)\n\n    return str(get_n_bit(2))"
    },
    {
        "number": 4021,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin\n    if isinstance(a, str) and a.isnumeric():\n        return 1\n    return 2\nsolution(2)\n\nOutput\n1\n\nOutput\n1\n\nOutput\n2\n\nOutput\n5\n\nOutput\n6\n\nOutput\n1\n\nOutput\n1\n\nOutput\n2\n\n\"\"\"\n\na = input()\n"
    },
    {
        "number": 4021,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    b = 1\n    while b <= a:\n        if a % b == 0:\n            break\n        b = b + 1\n    return str(b - 1)\n"
    },
    {
        "number": 4021,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a <= 1:\n        return 'a'\n    elif a < 3:\n        return str(a)\n    return str(a) + str(a)"
    },
    {
        "number": 4021,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(n):\n        if n % (i+1) == 0:\n            print(i+1)\n            break\n    return \"\"\n\n\nprint(solution(\"2\"))\n"
    },
    {
        "number": 4022,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    [n, *segments] = list(map(int, stdin.split()))\n    [l_i, r_i] = segments\n    segment_list = []\n    for i in range(n):\n        [l_i, r_i] = list(map(int, stdin.split()))\n        segment_list.append([l_i, r_i])\n    segment_list = sorted(segment_list)\n    if len(segment_list) < 2:\n        return 0\n    for i in range(len(segment_list) - 1):\n        segment_list[i], segment_list[i+1] = segment_list[i+1], segment_list[i]\n    for i in range(len(segment_list) - 1):\n        if segment_list[i][0] > segment_list[i + 1][0] and segment_list[i][1] > segment_list[i + 1][1]:\n            return 0\n    return len(intersection_of_segments(segment_list))\n\n\ndef"
    },
    {
        "number": 4022,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, *intervals = sorted(map(int, stdin.split()))\n    max_length = 0\n    for i in range(n - 1, 0, -1):\n        if max_length >= intervals[i - 1]:\n            break\n        max_length = max(max_length, intervals[i])\n    if max_length < 0:\n        max_length = 0\n    return str(max_length)\n\nsolution(input())\n"
    },
    {
        "number": 4022,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n = int(stdin.pop(0))\n    intersections = []\n    for i in range(n):\n        intersections.append(int(stdin.pop(0)))\n\n    #  print(intersections)\n\n    def check(intersection):\n        for i in range(len(intersections)):\n            if intersections[i] == intersection:\n                return False\n        return True\n\n    def segments_intersection(l, r):\n        if l == r:\n            return 0\n        m = int((l + r) / 2)\n        return segments_intersection(l, m) + segments_intersection(m, r) + check(m)\n\n    print(segments_intersection(intersections[0], intersections[1]))\n"
    },
    {
        "number": 4022,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    segments = []\n    for i in range(n):\n        segments.append(tuple(map(int, stdin.split())))\n\n    segments = sorted(segments, key=lambda x: x[1])\n\n    segment_deque = deque([])\n    for segment in segments:\n        segment_deque.append(segment)\n        while segment_deque and segment_deque[0][1] < segment[0]:\n            segment_deque.popleft()\n\n        if segment_deque:\n            if segment_deque[-1][0] <= segment[1] <= segment_deque[-1][1]:\n                segment_deque.pop()\n\n    return str(len(segment_deque))\n"
    },
    {
        "number": 4022,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    lines = list(map(lambda x: list(map(int, x.split())), stdin.splitlines()[1:]))\n    if n == 2:\n        a = lines[0]\n        b = lines[1]\n        i = 0\n        while i < len(a) - 1:\n            j = i + 1\n            while j < len(a) and a[j] < b[i]:\n                j += 1\n            if j == len(a):\n                break\n            if a[j] > b[i] and i > 0:\n                break\n            i = j\n        if i == len(a) - 1 and a[i] > b[i]:\n            return '0'\n        return str(max(i - a[i - 1], 0))\n    if n == 1:\n        return str(max(lines[0]))\n    return '0'\n"
    },
    {
        "number": 4022,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    segments = []\n    for i in range(n):\n        segments.append(list(map(int, stdin.split())))\n    segments.sort()\n    segments = sorted(segments)\n    segments = segments[1:]\n    intersection = []\n    for i in range(1, len(segments)):\n        intersection.append(\n            [min(segments[i-1][0], segments[i][0]), max(segments[i-1][1], segments[i][1])])\n    return str(max([intersection[i][1]-intersection[i][0]+1 for i in range(len(intersection))]))\n"
    },
    {
        "number": 4022,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    segments = []\n    for i in range(n):\n        segment_start, segment_end = map(int, stdin.split())\n        segments.append((segment_start, segment_end))\n    intersections = find_intersections(segments)\n    if len(intersections) == 0:\n        return str(0)\n    return str(max(map(lambda x: len(x), intersections)))\n\n\ndef"
    },
    {
        "number": 4022,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, *lrs = [*map(int, stdin.split())]\n    lrs.sort()\n    return str(max([0] + [r - l + 1 for l, r in zip(lrs[:-1], lrs[1:])]))\n"
    },
    {
        "number": 4022,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Get input\n    n = int(stdin.strip())\n    segments = []\n    for _ in range(n):\n        segments.append(list(map(int, stdin.split())))\n    \n    # Find the point that is the intersection of all segments\n    points = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            points += [sum(e) for e in zip(segments[i], segments[j])]\n    points = set(points)\n    \n    # Get the length of the intersection\n    if len(points) > 0:\n        max_len = max(map(len, points))\n    else:\n        max_len = 0\n    \n    # Return\n    return str(max_len)\n"
    },
    {
        "number": 4022,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    lines = []\n    for i in range(n):\n        l, r = map(int, stdin.split())\n        lines.append((l, r))\n\n    # sort by end points\n    lines = sorted(lines, key=lambda k: k[1])\n    lines = sorted(lines, key=lambda k: k[0])\n\n    # get max intersection\n    max_int = 0\n    l = 0\n    r = lines[0][1]\n    for i in range(1, len(lines)):\n        l = min(l, lines[i-1][0])\n        r = max(r, lines[i][1])\n        max_int = max(max_int, r - l)\n\n    return str(max_int)\n"
    },
    {
        "number": 4023,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    if n == 1:\n        return 'YES'\n    else:\n        if sum(a) == 0:\n            return 'YES'\n        else:\n            for i in range(1, n):\n                if a[i] - a[i - 1]!= 1:\n                    return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 4023,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n   ...\n    \"\"\"\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    brick = 2\n    if a[0]!= a[1]:\n        for i in range(1, n):\n            if a[i] == a[i-1]:\n                brick += 1\n            else:\n                brick = 2\n            if brick >= 2:\n                return \"YES\"\n        if brick >= 2:\n            return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 4023,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    parts = list(map(int, stdin.strip().split()))\n    while parts:\n        if all(i == parts[0] for i in parts):\n            return 'YES'\n        parts = sorted(parts)\n        start = 1\n        while start < len(parts) - 1 and parts[start] == parts[start+1]:\n            start += 1\n        end = start\n        while end < len(parts) - 1 and parts[end] == parts[end-1]:\n            end += 1\n        bricks = 0\n        for i in range(start, end):\n            if bricks + 1 < 2:\n                parts[i] += 1\n                bricks += 1\n            else:\n                parts[i] += 1\n                bricks = 0\n    return 'NO'\n"
    },
    {
        "number": 4023,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    h = list(map(int, stdin.strip().split()))\n    left = -1\n    right = n\n    mid = (left + right) // 2\n    while left < right - 1:\n        if abs(sum(h[:mid]) - sum(h[mid:])) > 1:\n            left = mid\n        else:\n            right = mid\n        mid = (left + right) // 2\n    if abs(sum(h[:mid]) - sum(h[mid:])) > 1:\n        return \"NO\"\n    else:\n        if h[:mid]!= h[mid:]:\n            return \"NO\"\n        else:\n            return \"YES\"\n"
    },
    {
        "number": 4023,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = list(map(int, stdin.split()))\n    if n <= 1 or max(a) > 10 ** 9 or min(a) < 1:\n        return \"NO\"\n    i = 1\n    while a[i-1] == a[i]:\n        if i < n-1:\n            i += 1\n        else:\n            return \"YES\"\n    if a[i-1]!= a[i]:\n        a[i-1] += 1\n        a[i] += 1\n        for i in range(i+1, n):\n            if a[i] == a[i-1]:\n                a[i] += 1\n            else:\n                break\n    return \"YES\" if all([i == a[i-1] for i in range(1, n)]) else \"NO\"\n\n\ndef"
    },
    {
        "number": 4023,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n  n = int(stdin.strip())\n  heights = list(map(int, stdin.strip().split()))\n  heights.sort()\n  print(\"YES\" if heights[0] == heights[-1] and len(heights) == n else \"NO\")\n"
    },
    {
        "number": 4023,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    parts = []\n    for part in stdin.splitlines():\n        parts.append(int(part))\n    if len(parts) < 3:\n        return \"NO\"\n\n    deltas = []\n    for i in range(len(parts) - 1):\n        deltas.append(parts[i + 1] - parts[i])\n\n    if len(set(deltas)) == 1:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 4023,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    [n, *heights] = map(int, stdin.split())\n    # a[i] is the height of the i-th part of the wall\n    a = list(map(int, stdin.split()))\n    # the current height of the part of the wall with the lowest height\n    l = 0\n    # the current height of the part of the wall with the highest height\n    h = 0\n    # keep track of the lowest height and the highest height\n    lowest_height = float(\"inf\")\n    highest_height = 0\n\n    for i in range(n):\n        if h < a[i]:\n            h = a[i]\n            lowest_height = i\n        if a[i] > highest_height:\n            highest_height = a[i]\n            highest_height = i\n    if h == 0 or h == 1 or a[0] == 1 or a[n-1] == 1:\n        return \"YES\"\n    if a[0] == a[1] and a[-1] == a[-2]:\n        return \"YES\"\n    for i in range(lowest_height + 1, highest_height):\n        if a[i] == a[i+1]:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 4023,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    #build wall\n    wall = []\n    for _ in range(n):\n        wall.append(int(stdin))\n    #check if the wall has 1 element and is increasing\n    if len(wall) == 1:\n        if wall[0] == 1:\n            return 'YES'\n        else:\n            return 'NO'\n    #check if the wall has 2 elements and is increasing\n    if len(wall) == 2:\n        if wall[0] == 1 and wall[1] == 2:\n            return 'YES'\n        else:\n            return 'NO'\n    #check if the wall has 3 elements and is increasing\n    if len(wall) == 3:\n        if wall[0] == 1 and wall[1] == 2 and wall[2] == 3:\n            return 'YES'\n        else:\n            return 'NO'\n    #check if the wall has 4 elements and is increasing\n    if len(wall) == 4:\n        if wall[0] == 1 and wall[1] == 2 and wall[2] == 3 and wall[3] == 4:\n            return 'YES'\n        else:\n            return 'NO'\n    #check if the wall has 5 elements and is increasing\n    if len(wall) == 5:\n        if wall[0] == 1 and wall[1] == 2 and wall[2] == 3 and wall[3] == 4 and wall[4] == 5:\n            return 'YES'\n        else:\n            return 'NO'\n    #check if the wall has 6 elements and is increasing\n    if len(wall) == 6:\n        if wall[0] == 1 and wall[1] == 2 and wall[2] == 3 and wall[3] == 4 and wall[4] == 5 and wall[5] == 6:\n            return 'YES'\n        else:\n            return 'NO'\n    #check if the wall has 7 elements and is increasing\n    if len(wall) == 7:\n        if wall[0] == 1 and wall[1] == 2 and wall[2] == 3 and wall[3] == 4 and wall[4] == 5 and wall[5] == 6 and wall[6] == 7:\n            return 'YES'\n        else:\n            return 'NO'\n    #check if the wall has 8 elements and is increasing\n    if len(wall) == 8:\n        if wall[0] == 1 and wall[1] == 2 and wall[2] == 3 and wall[3] == 4 and wall[4] == 5 and wall[5] == 6 and wall[6] == 7 and wall[7] == 8:\n            return 'YES'\n        else:\n            return 'NO'\n    #check if the wall has 9 elements and is increasing\n    if len(wall) == 9:\n        if wall[0] == 1 and wall[1] == 2 and wall[2] == 3 and wall[3] == 4 and wall[4] == 5 and wall[5] == 6 and wall[6] == 7 and wall[7] == 8 and wall[8] == 9:\n            return 'YES'\n        else:\n            return 'NO'\n    #check if the wall has 10 elements and is increasing\n    if len(wall) == 10:\n        if wall[0] == 1 and wall[1] == 2 and wall[2] == 3 and wall[3] == 4 and wall[4] == 5 and wall[5] == 6 and wall[6] == 7 and wall[7] == 8 and wall[8] == 9 and wall[9] == 10:\n            return 'YES'\n        else:\n            return 'NO'\n    #check if the wall has 11 elements and is increasing\n    if len(wall) == 11:\n        if wall[0] == 1 and wall[1] == 2 and wall[2] == 3 and wall[3] == 4 and wall[4] == 5 and wall[5] == 6 and wall[6] == 7 and wall[7] == 8 and wall[8] == 9 and wall[9] == 10 and wall[10] == 11:\n            return 'YES'\n        else:\n            return 'NO'\n    #check if the wall has 12 elements and is increasing\n    if len(wall) == 12:\n        if wall[0] == 1 and wall[1] == 2 and wall[2] == 3 and wall[3] == 4 and wall[4] == 5 and wall[5] == 6 and wall[6] == 7 and wall[7] == 8 and wall[8] == 9 and wall[9] == 10 and wall[10] == 11 and wall[11] == 12:\n            return 'YES'\n        else:\n            return 'NO'\n    #check if the wall has 13 elements and is increasing\n    if len(wall) == 13:\n        if wall[0] == 1 and wall[1] == 2 and wall[2] == 3 and wall[3] == 4 and wall[4] == 5 and wall[5] == 6 and wall[6] == 7 and wall[7] == 8 and wall[8] == 9 and wall[9] == 10 and wall[10] == 11 and wall[11] == 12 and wall[12] == 13:\n            return 'YES'\n        else:\n            return 'NO'\n    #check if the wall has 14 elements and is increasing\n    if len(wall) == 14:\n        if wall[0] == 1 and wall[1] == 2 and wall[2] == 3 and wall[3] == 4 and wall[4] == 5 and wall[5] == 6 and wall[6] == 7 and wall[7] == 8 and wall[8] == 9 and wall[9] == 10 and wall[10] == 11 and wall[11] == 12 and wall[12] == 13 and wall[13] == 14:\n            return 'YES'\n        else:\n            return 'NO'\n    #check if the wall has 15 elements and is increasing\n    if len(wall) == 15:\n        if wall[0] == 1 and wall[1] == 2 and wall[2] == 3 and wall[3] == 4 and wall[4] == 5 and wall[5] == 6 and wall[6] == 7 and wall[7] == 8 and wall[8] == 9 and wall[9] == 10 and"
    },
    {
        "number": 4023,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n == 2:\n        return \"YES\"\n    a = list(map(int, stdin.strip().split()))\n    for i in range(n):\n        if a[i]!= a[i + 1]:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 4024,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split('\\n')\n    for i in range(len(inputs)):\n        inputs[i] = inputs[i].strip()\n    return solution_1(inputs)\n\ndef"
    },
    {
        "number": 4024,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.split()\n    if k > len(s):\n        return -1\n    \n    dp = [[0] * (k+1) for _ in range(n+1)]\n    \n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            if i == 1:\n                dp[i][j] = j\n            else:\n                if s[i-1] == s[i-2]:\n                    dp[i][j] = dp[i-1][j-1] + 1\n                else:\n                    dp[i][j] = max(dp[i-1][j], dp[i-1][j-1])\n    \n    return dp[n][k]\n    \n"
    },
    {
        "number": 4024,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = (int(i) for i in stdin.split())\n    string = stdin.split()[1]\n    if len(string) < k:\n        return -1\n    minimum = min(n - len(string), k)\n    return n + k - minimum\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4024,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    s = stdin\n\n    if k == 0 or k > len(s):\n        return -1\n    # set can contain duplicates\n    s = set(s)\n    res = float('inf')\n\n    def helper(curr, seen):\n        nonlocal res\n        if len(seen) == k:\n            if len(curr) == len(s):\n                res = min(res, len(curr))\n            return\n\n        for i in range(len(curr)):\n            if curr[i] in seen:\n                continue\n            seen.add(curr[i])\n            helper(curr[:i] + curr[i + 1:], seen)\n            seen.remove(curr[i])\n\n    helper(s, set())\n    return res if res!= float('inf') else -1\n"
    },
    {
        "number": 4024,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = (int(x) for x in stdin.split())\n    s = stdin.strip()\n\n    if k > len(s):\n        return -1\n    if k == 0:\n        return 0\n\n    candidates = []\n    for i in range(1, len(s)):\n        for j in range(i, len(s)):\n            candidates.append(s[i:j])\n\n    candidates = sorted(candidates, key=len)\n    candidates = set(candidates)\n    res = sum(i[1] for i in enumerate(candidates))\n    return res\n\nprint(solution(input()))"
    },
    {
        "number": 4024,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4024,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.lower()\n    subs = set()\n    cost = 0\n    for i in range(n):\n        subs.add(s[i])\n        for j in range(i, n):\n            if s[j] not in subs:\n                subs.add(s[j])\n                break\n        else:\n            return -1\n    return len(subs) * (n - len(subs))\n\nsolution(\"5 6\")\n"
    },
    {
        "number": 4024,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4 5\n   ... asdf\n   ... \n   ... 5 6\n   ... aaaaa\n   ... ''')\n    '4'\n    >>> solution('''10 100\n   ... ajihiushda\n   ... ''')\n    '233'\n    \"\"\"\n    k, n = map(int, stdin.split())\n    s = stdin.replace('\\n', '')\n    S = set()\n    cost = 0\n    for i in range(k):\n        if s[i] in S:\n            return -1\n        S.add(s[i])\n        cost += n - i\n    return cost\n"
    },
    {
        "number": 4024,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin\n    chars = set()\n    cost = 0\n    while len(chars)!= k:\n        for i in range(len(s)):\n            if s[i] not in chars:\n                s = s[:i] + s[i + 1:]\n                chars.add(s[i])\n                cost += n - len(s)\n        if len(chars) == k:\n            break\n    if len(chars)!= k:\n        return -1\n    return cost\n"
    },
    {
        "number": 4024,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin\n    if n < k: return -1\n    if k == 0: return 0\n    if k == 1: return n\n    if k == 2: return n - 2\n    max_cost = n\n    total_cost = 0\n    for i in range(1, n):\n        cost = 0\n        for j in range(1, k + 1):\n            if i + j <= n:\n                cost += 1\n        if cost < max_cost:\n            max_cost = cost\n            total_cost = max_cost\n    return total_cost\n"
    },
    {
        "number": 4025,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    days = {1: 2, 2: 3, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8}\n    dp = [0] * 8\n    dp[0] = a\n    for i in range(1, 8):\n        dp[i] = dp[i - 1] + a * days[i]\n    for i in range(1, 8):\n        dp[i] = max(dp[i - 1] + b, dp[i])\n        if i in {2, 4, 5}:\n            dp[i] = max(dp[i - 1] + c, dp[i])\n    return str(dp[6])\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4025,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    _, a, b, c = stdin.split()\n    a, b, c = int(a), int(b), int(c)\n    _, day = max(a, b, c), 0\n    if day == a:\n        print(day + 3)\n    elif day == b:\n        print(day + 2)\n    else:\n        print(day + 1)\n"
    },
    {
        "number": 4025,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    [a, b, c] = list(map(int, stdin.split()))\n    def max_days(n):\n        k = n\n        if a < k:\n            k = a\n        if b < k:\n            k = b\n        if c < k:\n            k = c\n        return k\n    #\n    days_from_start = max_days(c)\n    if days_from_start >= min(a, b, c):\n        print(days_from_start)\n    else:\n        print(days_from_start + 1)"
    },
    {
        "number": 4025,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n  #replace this for solution\n  a, b, c = stdin.split()\n  return str(int(max((int(a)-int(b))/(int(c) - int(b)),(int(b)-int(a))/(int(c)-int(b)),(int(a)-int(b))/(int(c)-int(a)),(int(a)-int(b))/(int(c)-int(a)))))"
    },
    {
        "number": 4025,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    try:\n        a, b, c = [int(x) for x in lines[0].split()]\n    except:\n        return None\n    a_data = [int(x) for x in lines[1].split()]\n    b_data = [int(x) for x in lines[2].split()]\n    c_data = [int(x) for x in lines[3].split()]\n\n    # print(f'{a}, {b}, {c}')\n    # print(f'{a_data}')\n    # print(f'{b_data}')\n    # print(f'{c_data}')\n    # print()\n\n    # regular cases\n    days = {\n        0: a_data,\n        1: b_data,\n        2: c_data,\n    }\n\n    # special cases\n    days_special = {\n        3: [3, 2, 1],\n        4: [3, 2, 1],\n        5: [3, 2, 1],\n        6: [3, 2, 1],\n        7: [3, 2, 1],\n    }\n\n    # special cases\n    days_special_p1 = {\n        8: [3, 2, 1],\n        9: [3, 2, 1],\n        10: [3, 2, 1],\n        11: [3, 2, 1],\n        12: [3, 2, 1],\n    }\n\n    # special cases\n    days_special_p2 = {\n        14: [3, 2, 1],\n        15: [3, 2, 1],\n        16: [3, 2, 1],\n        17: [3, 2, 1],\n        18: [3, 2, 1],\n    }\n\n    # special cases\n    days_special_p3 = {\n        19: [3, 2, 1],\n        20: [3, 2, 1],\n        21: [3, 2, 1],\n        22: [3, 2, 1],\n        23: [3, 2, 1],\n    }\n\n    # special cases\n    days_special_p4 = {\n        26: [3, 2, 1],\n        27: [3, 2, 1],\n        28: [3, 2, 1],\n        29: [3, 2, 1],\n        30: [3, 2, 1],\n    }\n\n    # special cases\n    days_special_p5 = {\n        31: [3, 2, 1],\n        32: [3, 2, 1],\n        33: [3, 2, 1],\n        34: [3, 2, 1],\n        35: [3, 2, 1],\n    }\n\n    # special cases\n    days_special_p6 = {\n        37: [3, 2, 1],\n        38: [3, 2, 1],\n        39: [3, 2, 1],\n        40: [3, 2, 1],\n        41: [3, 2, 1],\n    }\n\n    # special cases\n    days_special_p7 = {\n        42: [3, 2, 1],\n        43: [3, 2, 1],\n        44: [3, 2, 1],\n        45: [3, 2, 1],\n        46: [3, 2, 1],\n    }\n\n    # special cases\n    days_special_p8 = {\n        48: [3, 2, 1],\n        49: [3, 2, 1],\n        50: [3, 2, 1],\n        51: [3, 2, 1],\n        52: [3, 2, 1],\n    }\n\n    # special cases\n    days_special_p9 = {\n        53: [3, 2, 1],\n        54: [3, 2, 1],\n        55: [3, 2, 1],\n        56: [3, 2, 1],\n        57: [3, 2, 1],\n    }\n\n    # special cases\n    days_special_p10 = {\n        58: [3, 2, 1],\n        59: [3, 2, 1],\n        60: [3, 2, 1],\n        61: [3, 2, 1],\n        62: [3, 2, 1],\n    }\n\n    # special cases\n    days_special_p11 = {\n        63: [3, 2, 1],\n        64: [3, 2, 1],\n        65: [3, 2, 1],\n        66: [3, 2, 1],\n        67: [3, 2, 1],\n    }\n\n    # special cases\n    days_special_p12 = {\n        68: [3, 2, 1],\n        69: [3, 2, 1],\n        70: [3, 2, 1],\n        71: [3, 2, 1],\n        72: [3, 2, 1],\n    }\n\n    # special cases\n    days_special_p13 = {\n        73: [3, 2, 1],\n        74: [3, 2, 1],\n        75: [3, 2, 1],\n        76: [3, 2, 1],\n        77: [3, 2, 1],\n    }\n\n    # special cases\n    days_special_p14 = {\n        78: [3, 2, 1],\n        79: [3, 2, 1],\n        80: [3, 2, 1],\n        81: [3, 2, 1],\n        82: [3, 2, 1],\n    }\n\n    # special cases\n    days_special_p15 = {\n        83: [3, 2, 1],\n        84: [3, 2, 1],\n        85: [3, 2, 1],\n        86: [3, 2, 1],\n        87: [3, 2, 1],\n    }\n\n    # special cases\n    days_special_p16 = {\n        88: [3, 2, 1],\n        89: [3, 2, 1],\n        90: [3, 2, 1],\n        91: [3, 2, 1],\n        92: [3, 2, 1],\n    }\n\n    # special cases\n    days_special_p17 = {\n        93: [3, 2, 1],\n        94: [3, 2, 1],\n        95: [3, 2, 1],\n        96: [3, 2, 1],\n        97: [3"
    },
    {
        "number": 4025,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    days = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n    week = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\n    months = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n\n    days[0] = 1\n    days[1] = 1\n    days[2] = 1\n    days[3] = 1\n    days[4] = 1\n    days[5] = 1\n    days[6] = 1\n    days[7] = 1\n    days[8] = 1\n    days[9] = 1\n    days[10] = 1\n    days[11] = 1\n    days[12] = 1\n    days[13] = 1\n    days[14] = 1\n    days[15] = 1\n    days[16] = 1\n    days[17] = 1\n    days[18] = 1\n    days[19] = 1\n    days[20] = 1\n\n    for i in range(1, a+1):\n        if i <= 7:\n            if i == 1 or i == 7:\n                days[i] = 1\n            else:\n                days[i] = days[i-1] + 1\n        else:\n            days[i] = days[i-1] + months[i-1]\n\n    # print(days)\n    # print(week)\n\n    for i in range(1, b+1):\n        if days[i] <= days[i+1]:\n            days[i+1] = days[i]\n        else:\n            days[i+1] = days[i+1] - 1\n\n    for i in range(1, c+1):\n        if days[i] <= days[i+1]:\n            days[i+1] = days[i]\n        else:\n            days[i+1] = days[i+1] - 1\n\n    days = [days[i] - 1 for i in range(1, 13)]\n\n    # print(days)\n    # print(week)\n\n    days[0] = 0\n    days[1] = 0\n    days[2] = 0\n    days[3] = 0\n    days[4] = 0\n    days[5] = 0\n    days[6] = 0\n    days[7] = 0\n    days[8] = 0\n    days[9] = 0\n    days[10] = 0\n    days[11] = 0\n    days[12] = 0\n    days[13] = 0\n    days[14] = 0\n    days[15] = 0\n    days[16] = 0\n    days[17] = 0\n    days[18] = 0\n    days[19] = 0\n    days[20] = 0\n\n    days = [days[i] + 1 for i in range(1, 13)]\n\n    # print(days)\n    # print(week)\n\n    days = [days[i] + 1 for i in range(1, 13)]\n\n    days[0] = days[0] - 1\n    days[1] = days[1] - 1\n    days[2] = days[2] - 1\n    days[3] = days[3] - 1\n    days[4] = days[4] - 1\n    days[5] = days[5] - 1\n    days[6] = days[6] - 1\n    days[7] = days[7] - 1\n    days[8] = days[8] - 1\n    days[9] = days[9] - 1\n    days[10] = days[10] - 1\n    days[11] = days[11] - 1\n    days[12] = days[12] - 1\n    days[13] = days[13] - 1\n    days[14] = days[14] - 1\n    days[15] = days[15] - 1\n    days[16] = days[16] - 1\n    days[17] = days[17] - 1\n    days[18] = days[18] - 1\n    days[19] = days[19] - 1\n    days[20] = days[20] - 1\n\n    days = [days[i] + 1 for i in range(1, 13)]\n    days = sorted(days)\n\n    days = [days[i] + 1 for i in range(1, 13)]\n    days = sorted(days)\n\n    days = [days[i] + 1 for i in range(1, 13)]\n    days = sorted(days)\n\n    # print(days)\n    # print(week)\n\n    for i in range(len(days)-1, -1, -1):\n        if days[i] == 0:\n            days.pop(i)\n\n    # print(days)\n    # print(week)\n\n    # print(days)\n    # print(week)\n    for i in range(len(days)-1, -1, -1):\n        if days[i] >= 7:\n            days[i] = days[i] - 7\n\n    # print(days)\n    # print(week)\n\n    days = sorted(days)\n\n    days = sorted(days)\n    # print(days)\n    # print(week)\n\n    if days[0] <= 0:\n        days[0] = 1\n\n    # print(days)\n    # print(week)\n\n    for i in range(len(days)-1, -1, -1):\n        if days[i] < 1:\n            days.pop(i)\n\n    # print(days)\n    # print(week)\n\n    if days[0] >= 7:\n        days[0] = days[0] - 7\n\n    # print(days)\n    # print(week)\n\n    days = sorted(days)\n    # print(days)\n    # print(week)\n\n    days = sorted(days)\n    # print(days)\n    # print(week)\n\n    days = sorted(days)\n    # print(days)\n    # print(week)\n\n    days = sorted(days)\n    # print(days)\n    # print(week)\n\n    days = sorted(days)\n    # print(days)\n    # print(week)"
    },
    {
        "number": 4025,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    d = 1\n    e = 0\n    f = 0\n    if d == 1:\n        f = c\n    elif d == 2:\n        f = c * 2\n    elif d == 3:\n        f = c * 3\n    elif d == 4:\n        f = c * 4\n    while (d <= 7):\n        e = a * (d - 1)\n        if e + f >= d * b:\n            print(d)\n            break\n        d += 1\n        e = a * (d - 1)\n        if e + f >= d * b:\n            print(d)\n            break\n        d += 1\n        e = a * (d - 1)\n        if e + f >= d * b:\n            print(d)\n            break\n    return"
    },
    {
        "number": 4025,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    days = 0\n    if a >= c:\n        days = 1\n    elif b >= c:\n        days = 2\n    while (days * c + a) <= (b * c + b) and (days * a) <= (b * c + b):\n        days += 1\n    if days * a + a == (days * b) + b:\n        days -= 1\n    return str(days)"
    },
    {
        "number": 4025,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    possible_days = ['Saturday', 'Sunday', 'Monday', 'Tuesday', 'Wednesday']\n    min_days = a\n    for day in possible_days:\n        days = day\n        for i in range(1, b+1):\n            if day == 'Saturday' or day == 'Sunday':\n                break\n            if day == 'Monday' or day == 'Tuesday' or day == 'Wednesday':\n                days += 2 * i\n                if days > min_days:\n                    min_days = days\n            else:\n                days += i\n                if days > min_days:\n                    min_days = days\n    return str(min_days)\n"
    },
    {
        "number": 4025,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    fishes, rbst, chkst = map(int, stdin.split())\n    days = {'sun': 1,'mon': 2, 'tue': 3, 'wed': 4, 'thu': 5, 'fri': 6,'sat': 7}\n    if days['wed'] <= days['thu']:\n        d1, d2, d3 = days['wed'], days['thu'], days['fri']\n    elif days['wed'] > days['thu'] and days['thu'] < days['fri']:\n        d1, d2, d3 = days['fri'], days['sat'], days['sun']\n    else:\n        d1, d2, d3 = days['fri'], days['sat'], days['sun']\n    days = {'sun': 0,'mon': 1, 'tue': 2, 'wed': 3, 'thu': 4, 'fri': 5,'sat': 6}\n    days_left = days['fri'] - d1 + 1\n    days_left_2 = days['sun'] - d2 + 1\n    days_left_3 = days['sat'] - d3 + 1\n    # print(days_left, days_left_2, days_left_3)\n    if days_left_2 < fishes:\n        days_left_2 = fishes\n    if days_left_3 < fishes:\n        days_left_3 = fishes\n    if days_left < fishes:\n        days_left = fishes\n    # print(days_left, days_left_2, days_left_3)\n    if days_left_2 > days_left_3:\n        days_left_2 = days_left_3\n    # print(days_left, days_left_2, days_left_3)\n    if days_left_2 > days_left:\n        days_left_2 = days_left\n    # print(days_left, days_left_2, days_left_3)\n    if days_left_3 > days_left:\n        days_left_3 = days_left\n    # print(days_left, days_left_2, days_left_3)\n    return str(min(days_left, days_left_2, days_left_3))\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4026,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    tiles = []\n    for _ in range(n):\n        tiles.append(tuple(map(int, stdin.split())))\n    for x in range(m):\n        for y in range(m):\n            if (x, y) not in tiles and (y, x) not in tiles:\n                return \"NO\"\n    return \"YES\"\n\n\nsolution(\"2 5\")\n\"\"\"\nfrom typing import Tuple, List\n\ndef"
    },
    {
        "number": 4026,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        a, b = map(int, stdin.split())\n        tiles = []\n        for i in range(a):\n            tiles.append(list(map(int, stdin.split())))\n        s = list(zip(*tiles))\n        if s == tiles:\n            for i in range(b):\n                for j in range(b):\n                    if tiles[i][j] > tiles[j][i]:\n                        return \"NO\"\n            return \"YES\"\n    return \"NO\"\n\nsolution(stdin)"
    },
    {
        "number": 4026,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def is_square(a: int, b: int, c: int, d: int) -> bool:\n        return a == b == c == d or a == c == b == d or a == d == b == c\n\n    n, m = map(int, stdin.split())\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                continue\n            tiles = set()\n            for k in range(m):\n                for l in range(m):\n                    if k == l:\n                        continue\n                    if (i + k, j + l) in tiles:\n                        return \"NO\"\n                    if not is_square(i, k, j, l):\n                        break\n                    tiles.add((i, k))\n                    tiles.add((j, l))\n\n    return \"YES\"\n"
    },
    {
        "number": 4026,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n, m = map(int, stdin[0].split())\n    a = stdin[1:]\n    k = 0\n    for i in range(m):\n        k += int(a[i].split()[0])\n    if k == m * n:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 4026,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    for test in range(int(stdin)):\n        n, m = map(int, stdin.split())\n        a = stdin.split()\n        if is_symmetric_matrix(n, m, a):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n"
    },
    {
        "number": 4026,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # return \"YES\" if __solution__() else \"NO\"\n    return \"YES\" if __solution__() else \"NO\"\n\"\"\"\n\ndef"
    },
    {
        "number": 4026,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    for line in stdin.splitlines():\n        print(\"YES\" if is_square(line.split()) else \"NO\")\n\ndef"
    },
    {
        "number": 4026,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin_list = stdin.split()\n    n = int(stdin_list[0])\n    m = int(stdin_list[1])\n    tiles = []\n    for i in range(n):\n        tiles.append(stdin_list[2 + i])\n    m = m * m\n    for i in range(n):\n        for j in range(n):\n            if tiles[i][j] == '1':\n                for i_ in range(i, i + m):\n                    for j_ in range(j, j + m):\n                        tiles[i_][j_] = '2'\n    for row in tiles:\n        print(''.join(row))\n    return 'YES'\n\n\ndef"
    },
    {
        "number": 4026,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    answer = 'YES'\n    t = int(stdin.strip().split()[0])\n    n, m = map(int, stdin.strip().split()[1:])\n    a = []\n    for i in range(n):\n        a.append(list(map(int, stdin.strip().split()[i*2+2:i*2+2+2])))\n    a = np.array(a)\n    a = a.reshape(n, m)\n    if (np.diag(a) == a).all():\n        answer = 'YES'\n    else:\n        answer = 'NO'\n    return answer\n\n>>> solution('''4\n4\n3\n1 2\n5 6\n5 7\n7 4\n8 9\n9 8\n2 5\n1 1\n1 1\n1 1\n3 4\n1 2\n1 1\n1 1\n1 1''')\nYES\n>>> solution('''3\n4\n2 2\n5 6\n5 7\n7 4\n8 9\n9 8\n2 5\n1 1\n1 1\n1 1\n3 4\n1 2\n1 1\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 1''')\nYES\n>>> solution('''4\n4\n3\n1 2\n5 6\n5 7\n7 4\n8 9\n9 8\n2 5\n1 1\n1 1\n1 1\n3 4\n1 2\n1 1\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 1''')\nNO\n>>> solution('''2\n2\n1 1\n1 1''')\nYES\n>>> solution('''4\n2\n2 2\n5 6\n5 7\n7 4\n8 9\n9 8\n2 5\n1 1\n1 1\n1 1\n3 4\n1 2\n1 1\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 1''')\nYES\n>>> solution('''4\n3\n4 4\n1 2\n1 2''')\nNO\n>>> solution('''3\n3\n3 4\n1 2\n5 6\n5 7\n7 4\n8 9\n9 8\n2 5\n1 1\n1 1\n1 1\n3 4\n1 2\n1 1\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 1''')\nNO\n>>> solution('''1\n1\n5 6\n5 7\n7 4\n8 9\n9 8\n2 5\n1 1\n1 1\n1 1\n3 4\n1 2\n1 1\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 1\n1 1''')\nNO\n>>> solution('''4\n3\n4 4\n1 2\n5 6\n5 7\n7 4\n8 9\n9 8\n2 5\n1 1\n1 1\n1 1\n3 4\n1 2\n1 1\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 1''')\nNO\n>>> solution('''1\n1\n5 6\n5 7\n7 4\n8 9\n9 8\n2 5\n1 1\n1 1\n1 1\n3 4\n1 2\n1 1\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 1\n1 1''')\nNO\n>>> solution('''4\n3\n4 4\n1 2\n5 6\n5 7\n7 4\n8 9\n9 8\n2 5\n1 1\n1 1\n1 1\n3 4\n1 2\n1 1\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 1\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 2\n3 4\n1 2\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1"
    },
    {
        "number": 4026,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\nEnter the size of the square: 4\n\nEnter the type of the tile: 5\n\nEnter the type of the tile: 7\n\nEnter the type of the tile: 8\n\nEnter the type of the tile: 9\n\nEnter the type of the tile: 4\n\nEnter the type of the tile: 7\n\nEnter the type of the tile: 8\n\nEnter the type of the tile: 9\n\nEnter the type of the tile: 5\n\nEnter the type of the tile: 7\n\nEnter the type of the tile: 8\n\nEnter the type of the tile: 9\n\nEnter the type of the tile: 8\n\nEnter the type of the tile: 7\n\nEnter the type of the tile: 4\n\nEnter the type of the tile: 7\n\nEnter the type of the tile: 8\n\nEnter the type of the tile: 9\n\nEnter the type of the tile: 4\n\nEnter the type of the tile: 7\n\nEnter the type of the tile: 8\n\nEnter the type of the tile: 9\n\nEnter the type of the tile: 5\n\nEnter the type of the tile: 7\n\nEnter the type of the tile: 8\n\nEnter the type of the tile: 9\n\nEnter the type of the tile: 8\n\nEnter the type of the tile: 7\n\nEnter the type of the tile: 4\n\nEnter the type of the tile: 7\n\nEnter the type of the tile: 8\n\nEnter the type of the tile: 9\n\nEnter the type of the tile: 4\n\nEnter the type of the tile: 7\n\nEnter the type of the tile: 8\n\nEnter the type of the tile: 9\n\nEnter the type of the tile: 8\n\nEnter the type of the tile: 7\n\nEnter the type of the tile: 4\n\nEnter the type of the tile: 7\n\nEnter the type of the tile: 8\n\nEnter the type of the tile: 9\n\nEnter the type of the tile: 4\n\nEnter the type of the tile: 7\n\nEnter the type of the tile: 8\n\nEnter the type of the tile: 9\n\nEnter the type of the tile: 8\n\nEnter the type of the tile: 7\n\nEnter the type of the tile: 4\n\nEnter the type of the tile: 7\n\nEnter the type of the tile: 8\n\nEnter the type of the tile: 9\n\nEnter the type of the tile: 4\n\nEnter the type of the tile: 7\n\nEnter the type of the tile: 8\n\nEnter the type of the tile: 9\n\nEnter the type of the tile: 5\n\nEnter the type of the tile: 7\n\nEnter the type of the tile: 8\n\nEnter the type of the tile: 9\n\nEnter the type of the tile: 5\n\nEnter the type of the tile: 7\n\nEnter the type of the tile: 8\n\nEnter the type of the tile: 9\n\nEnter the type of the tile: 5\n\nEnter the type of the tile: 7\n\nEnter the type of the tile: 8\n\nEnter the type of the tile: 9\n\nEnter the type of the tile: 5\n\nEnter the type of the tile: 7\n\nEnter the type of the tile: 8\n\nEnter the type of the tile: 9\n\nEnter the type of the tile: 8\n\nEnter the type of the tile: 7\n\nEnter the type of the tile: 4\n\nEnter the type of the tile: 7\n\nEnter the type of the tile: 8\n\nEnter the type of the tile: 9\n\nEnter the type of the tile: 4\n\nEnter the type of the tile: 7\n\nEnter the type of the tile: 8\n\nEnter the type of the tile: 9\n\nEnter the type of the tile: 8\n\nEnter the type of the tile: 7\n\nEnter the type of the tile: 4\n\nEnter the type of the tile: 7\n\nEnter the type of the tile: 8\n\nEnter the type of the tile: 9\n\nEnter the type of the tile: 4\n\nEnter the type of the tile: 7\n\nEnter the type of the tile: 8\n\nEnter the type of the tile: 9\n\nEnter the type of the tile: 8\n\nEnter the type of the tile: 7\n\nEnter the type of the tile: 4\n\nEnter the type of the tile: 7\n\nEnter the type of the tile: 8\n\nEnter the type of the tile: 9\n\nEnter the type of the tile: 4\n\nEnter the type of the tile: 7\n\nEnter the type of the tile: 8\n\nEnter the type of the tile: 9\n\nEnter the type of the tile: 8\n\nEnter the type of the tile: 7\n\nEnter the type of the tile: 4\n\nEnter the type of the tile: 7\n\nEnter the type of the tile: 8\n\nEnter the type of the tile: 9\n\nEnter the type of the tile: 4\n\nEnter the type of the tile: 7\n\nEnter the type of the tile: 8\n\nEnter the type of the tile: 9\n\nEnter the type"
    },
    {
        "number": 4027,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    _, N = stdin.split(\"\\n\")\n    N = int(N)\n    A = []\n    B = []\n    if N % 2 == 0:\n        for _ in range(N):\n            if _ % 2 == 0:\n                A.append(_ + 1)\n            else:\n                B.append(_ + 1)\n    else:\n        for _ in range(N):\n            if _ % 2 == 0:\n                A.append(_ + 1)\n            else:\n                B.append(_ + 1)\n        A.append(N + 1)\n        B.append(N + 1)\n    return str(sum(A) - sum(B))\n\n\n\n'''"
    },
    {
        "number": 4027,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [0]\n    b = [0]\n    if n % 2 == 0:\n        for i in range(n):\n            if i % 2 == 0:\n                a.append(a[-1] + 1)\n            else:\n                a.append(a[-1] - 1)\n        return abs(sum(a) - sum(b))\n    else:\n        for i in range(n):\n            if i % 2 == 0:\n                b.append(b[-1] + 1)\n            else:\n                b.append(b[-1] - 1)\n        return abs(sum(a) - sum(b))\n"
    },
    {
        "number": 4027,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 4027,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    # elif n == 3:\n    #     return 0\n    a = []\n    b = []\n    total_a = 0\n    total_b = 0\n    for i in range(2, n + 1):\n        if i not in a:\n            a.append(i)\n            total_a += i\n        else:\n            b.append(i)\n            total_b += i\n    if total_b - total_a == n // 2:\n        return 0\n    return abs(total_a - total_b)\n"
    },
    {
        "number": 4027,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    A = set()\n    B = set()\n    while n > 0:\n        if n % 2 == 0:\n            A.add(n)\n            n = n // 2\n        else:\n            B.add(n)\n            n = n // 2 + 1\n    return abs(len(A) - len(B))\n    return 0"
    },
    {
        "number": 4027,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nfrom itertools import accumulate\n\n\ndef"
    },
    {
        "number": 4027,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n  return 0\n"
    },
    {
        "number": 4027,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\nstdin_lines = stdin.split(\"\\n\")\nn = int(stdin_lines[0])\nprint(min_diff_sum(n))"
    },
    {
        "number": 4027,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    #...\n"
    },
    {
        "number": 4027,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = sum(i for i in range(n))\n    return str(min(abs(s - sum(a for a in range(n))), abs(s - sum(b for b in range(n)))))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4028,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    ans = 0\n    for i in range(1, 1 << n):\n        flag = 1\n        string = []\n        for j in range(n):\n            if i & (1 << j):\n                string.append('(')\n            else:\n                string.append(')')\n        string = \"\".join(string)\n        if (string[0] == \"(\" and string[-1] == \")\") or (string[0] == \"(\" and string[-1] == \")\" and len(string) % 2 == 0):\n            ans += 1\n    return str(ans)\n"
    },
    {
        "number": 4028,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    bracket_seq = stdin.split(\"\\n\")[0]\n    return str(answer(bracket_seq))\n"
    },
    {
        "number": 4028,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    length = int(stdin.split()[0])\n    string = stdin.split()[1]\n    count = 0\n    ans = 0\n    for i in range(length):\n        if i == 0 and string[i] == '(':\n            continue\n        if string[i-1] == '(' and string[i] == ')':\n            count += 1\n            ans = ans % 1000000007\n            if (count % 2) == 0:\n                ans = ans + (count // 2)\n            else:\n                ans = ans - (count // 2)\n        else:\n            count = 0\n    return str(ans)\n"
    },
    {
        "number": 4028,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    def find_brackets(s: str) -> tuple:\n        i = 0\n        result = []\n        while i < len(s):\n            if s[i] == \"(\":\n                result.append(s[i])\n                i += 1\n            elif s[i] == \")\":\n                result.append(s[i])\n                i += 1\n                while i < len(s) and s[i]!= \"(\":\n                    result.append(s[i])\n                    i += 1\n            else:\n                i += 1\n        return tuple(result)\n    brackets = find_brackets(s)\n    if len(brackets) < 5:\n        return 0\n    return len((brackets[0])) + len((brackets[-1])) + solution(brackets[1:-1])\n"
    },
    {
        "number": 4028,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n    return str(solution(n))\n"
    },
    {
        "number": 4028,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n\n    count = 0\n    for i in range(1, n+1):\n        for j in range(i):\n            if s[j] == '(' and s[-i+j+1] == ')':\n                count += 1\n    return str(count)\n\n\ndef"
    },
    {
        "number": 4028,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input_ = stdin.split(\"\\n\")\n    s = input_[1]\n    n = int(input_[0])\n    \n    if n == 0:\n        return \"0\"\n    \n    cnt = 0\n    for i in range(2, n+1, 2):\n        cnt += (1 if (s[:i] == s[i-1:i+1]) else 0)\n    \n    return str(cnt % 1000000007)\n"
    },
    {
        "number": 4028,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lst = stdin.split()\n    return str(sum(1 for i in range(len(lst[0]) // 2) if lst[0][i] == '(' and lst[0][len(lst[0]) - i - 1] == ')' and lst[1][i] == '(' and lst[1][len(lst[1]) - i - 1] == ')')) % (10 ** 9 + 7)\n"
    },
    {
        "number": 4028,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return str(sum(1 for _ in range(len(stdin)//2) if is_valid_bracket(stdin, _)))\n\n\ndef"
    },
    {
        "number": 4028,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    \n    # input string\n    s = stdin.strip()\n\n    # found\n    count = 0\n    i = 0\n    while i < 2*n - 1:\n        if s[i] == ')' and s[i+1] == '(':\n            count += 1\n            if count == 2*n:\n                return str(count)\n        else:\n            count = 0\n        i += 1\n\nprint(solution(input()))\n"
    },
    {
        "number": 4029,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin\n    if n[0] == '0':\n        return -1\n    \n    l = len(n)\n    for i in range(l):\n        if n[i] == '0':\n            n = n[i:]\n            break\n    \n    for i in range(l):\n        if n[i] == '0':\n            n = n[:i]\n            break\n    \n    if len(n)!= l:\n        return -1\n    \n    l = len(n)\n    moves = []\n    if l%25 == 0:\n        return -1\n    for i in range(l):\n        if i % 2 == 0:\n            moves.append(n[i])\n        else:\n            moves.append(n[l-i-1])\n    return moves\n"
    },
    {
        "number": 4029,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 25 == 0:\n        return str(n)\n    moves = []\n    while n > 0:\n        if len(moves) > 0:\n            if n > moves[-1]:\n                moves.append(n)\n                break\n            else:\n                continue\n        else:\n            moves.append(n)\n        n //= 10\n    return str(len(moves))"
    },
    {
        "number": 4029,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return None if not stdin.isdigit() or int(stdin) < 0 or int(stdin) >= 10**18 or stdin.count('0') > 0 else min(\n        solution(stdin[:i]) + solution(stdin[i:]) for i in range(1, len(stdin))\n    ) + 1 if stdin.count('0') > 0 else -1\n\n\n\ndef"
    },
    {
        "number": 4029,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin\n    digits = list(map(int, str(n)))\n    result = 0\n    for i in range(len(digits)):\n        for j in range(len(digits)):\n            if i == j:\n                continue\n            if digits[i] % 25 == 0 or digits[j] % 25 == 0:\n                continue\n            if digits[i] % 10 == digits[j] % 10:\n                if (digits[i] - digits[j]) % 25 == 0:\n                    result += 1\n            else:\n                if (digits[i] * digits[j]) % 25 == 0:\n                    result += 1\n    return str(result)\n"
    },
    {
        "number": 4029,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n  n = int(stdin)\n  if n < 25:\n    return -1\n  if n == 25:\n    return 0\n  num = str(n)\n  if not len(num) % 2:\n    return -1\n  \n  # Make list of digits\n  digits = list(num)\n  \n  # Iterate until we find a pair (odd, even)\n  # that we can swap with each other\n  odd = True\n  for i in range(len(digits) // 2):\n    if odd and digits[i]!= '0':\n      odd = False\n      continue\n    if not odd and digits[i]!= '1':\n      odd = True\n      continue\n    if odd and digits[i]!= '1':\n      continue\n    if not odd and digits[i]!= '0':\n      continue\n    return -1\n  \n  if odd:\n    return -1\n  \n  i = len(digits) // 2\n  while i < len(digits):\n    if digits[i]!= '0':\n      break\n    i += 2\n  \n  return i - 1\n"
    },
    {
        "number": 4029,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 25 == 0:\n        return \"1\"\n    else:\n        return str(n)\n"
    },
    {
        "number": 4029,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    n = int(stdin.pop(0))\n    max_x = int(n**0.5)\n    min_x = int(n**0.5)\n    for x in range(min_x, max_x+1):\n        if n % x == 0:\n            return str(x)\n    return -1\n\nprint(solution(input()))\n"
    },
    {
        "number": 4029,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    for x in range(2,10**5+1):\n        tmp = str(x)\n        if tmp == tmp[::-1]:\n            continue\n        if len(tmp) == len(set(tmp)) or len(tmp) == len(set(tmp)) and not tmp.startswith('0') or len(tmp) > 10 and len(set(tmp)) == 1:\n            continue\n        if '0' not in tmp or not all([i!= tmp.index(i) for i in tmp]):\n            continue\n        if tmp.count('0') < 2:\n            continue\n        tmp = tmp.replace('0','')\n        if len(tmp) < 10:\n            continue\n        if not all([i == tmp.index(i) for i in tmp]):\n            continue\n        if len(tmp) == 10:\n            if not tmp.startswith('0') and tmp!= tmp[::-1]:\n                continue\n            if not all([tmp.count(i) == 1 for i in tmp]):\n                continue\n        if tmp.count('0') > 1:\n            continue\n        if tmp.count('0') == len(tmp):\n            continue\n        if tmp.count('0') == 0:\n            tmp = list(tmp)\n            tmp.sort()\n            if tmp == tmp[::-1]:\n                continue\n        return x\n\nstdin = input()\nprint(solution(stdin))\n"
    },
    {
        "number": 4029,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = list(stdin)\n    count = 0\n    while s[0]!= '0':\n        s[0] = int(s[0])\n        s[1] = int(s[1])\n        if s[0] % 25 == 0 and s[1] % 25 == 0:\n            count += 1\n            s = s[1:]\n        else:\n            s = s[2:]\n    if s:\n        return -1\n    return count\n"
    },
    {
        "number": 4029,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(1, n + 1):\n        print(i)\n        if n % i == 0:\n            return str(i) +'' + str(n // i)\n    return -1\nsolution(input())"
    },
    {
        "number": 4030,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    num_colors = 2**n\n    for res in range(1, num_colors):\n        if sorted(stdin) == sorted(stdin[i] + stdin[i+1] for i in range(0, n, 2)):\n            return str(res) +'' + str(list(map(str, res * sorted(range(1, num_colors))))).replace('[', '').replace(']', '').replace('\\'', '')\n"
    },
    {
        "number": 4030,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[0]\n    res = int(math.ceil(n / 2))\n    c = list(range(1, res + 1))\n    c.sort()\n    return str(res) +'' +''.join([str(i) for i in c])\n"
    },
    {
        "number": 4030,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[1:]\n    print(n)\n    print(s)\n    return s"
    },
    {
        "number": 4030,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[1]\n    n_chars = len(s)\n    c = Counter(s)\n    min_colors = min(c.values())\n    if min_colors == 1:\n        return str(min_colors) + '\\n' + ''.join(sorted(c.elements()))\n    else:\n        # c_sort = sorted(c.items(), key=lambda x: x[0])\n        c_sort = sorted(c.items(), key=lambda x: x[0])\n        c_sort = sorted(c_sort, key=lambda x: x[1])\n        c_sort = sorted(c_sort, key=lambda x: x[1])\n        c_sort = sorted(c_sort, key=lambda x: x[1])\n        c_sort = sorted(c_sort, key=lambda x: x[0])\n        return str(n_chars - min_colors) + '\\n' + ''.join(c_sort)\n    # return str(min_colors) + '\\n' + ''.join(sorted(c.elements()))"
    },
    {
        "number": 4030,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.split('\\n')[1]\n    return str(min_colors(s, n)) + '\\n' + str([str(x) for x in colors(s, n)])\n\n\ndef"
    },
    {
        "number": 4030,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        if s[0]!= s[1]:\n            return 2\n        else:\n            return 1\n    if n == 3:\n        if s[0]!= s[1] and s[1]!= s[2]:\n            return 2\n        else:\n            return 1\n    if n == 4:\n        if s[0]!= s[1] and s[1]!= s[2] and s[2]!= s[3]:\n            return 2\n        else:\n            return 1\n    if n == 5:\n        if s[0]!= s[1] and s[1]!= s[2] and s[2]!= s[3] and s[3]!= s[4]:\n            return 2\n        else:\n            return 1\n\n    # you can think of this part as the 'first' part of the recursion and we return it here\n    # e.g. for 8\n    # step 1: s = abcdedc\n    # step 2: if you want to return 1 return 1\n    # step 3: if you want to return 2 return 2\n    # step 4: if you want to return 3 return 3\n    # step 5: if you want to return 4 return 4\n    # step 6: if you want to return 5 return 5\n    # step 7: if you want to return 6 return 6\n    # step 8: if you want to return 7 return 7\n    # step 9: if you want to return 8 return 8\n    # step 10: if you want to return 9 return 9\n    # step 11: if you want to return 10 return 10\n    # step 12: if you want to return 11 return 11\n    # step 13: if you want to return 12 return 12\n    # step 14: if you want to return 13 return 13\n    # step 15: if you want to return 14 return 14\n    # step 16: if you want to return 15 return 15\n    # step 17: if you want to return 16 return 16\n    # step 18: if you want to return 17 return 17\n    # step 19: if you want to return 18 return 18\n    # step 20: if you want to return 19 return 19\n    # step 21: if you want to return 20 return 20\n    # step 22: if you want to return 21 return 21\n    # step 23: if you want to return 22 return 22\n    # step 24: if you want to return 23 return 23\n    # step 25: if you want to return 24 return 24\n    # step 26: if you want to return 25 return 25\n    # step 27: if you want to return 26 return 26\n    # step 28: if you want to return 27 return 27\n    # step 29: if you want to return 28 return 28\n    # step 30: if you want to return 29 return 29\n    # step 31: if you want to return 30 return 30\n    # step 32: if you want to return 31 return 31\n    # step 33: if you want to return 32 return 32\n    # step 34: if you want to return 33 return 33\n    # step 35: if you want to return 34 return 34\n    # step 36: if you want to return 35 return 35\n    # step 37: if you want to return 36 return 36\n    # step 38: if you want to return 37 return 37\n    # step 39: if you want to return 38 return 38\n    # step 40: if you want to return 39 return 39\n    # step 41: if you want to return 40 return 40\n    # step 42: if you want to return 41 return 41\n    # step 43: if you want to return 42 return 42\n    # step 44: if you want to return 43 return 43\n    # step 45: if you want to return 44 return 44\n    # step 46: if you want to return 45 return 45\n    # step 47: if you want to return 46 return 46\n    # step 48: if you want to return 47 return 47\n    # step 49: if you want to return 48 return 48\n    # step 50: if you want to return 49 return 49\n    # step 51: if you want to return 50 return 50\n    # step 52: if you want to return 51 return 51\n    # step 53: if you want to return 52 return 52\n    # step 54: if you want to return 53 return 53\n    # step 55: if you want to return 54 return 54\n    # step 56: if you want to return 55 return 55\n    # step 57: if you want to return 56 return 56\n    # step 58: if you want to return 57 return 57\n    # step 59: if you want to return 58 return 58\n    # step 60: if you want to return 59 return 59\n    # step 61: if you want to return 60 return 60\n    # step 62: if you want to return 61 return 61\n    # step 63: if you want to return 62 return 62\n    # step 64: if you want to return 63 return 63\n    # step 65: if you want to return 64 return 64\n    # step 66: if you want to return 65 return 65\n    # step 67: if you want to return 66 return 66\n    # step 68: if you want to return 67 return 67\n    # step 69: if you want to return 68 return 68\n    # step 70: if you want to return 69 return 69\n    # step 71: if you want to return 70 return 70\n    # step 72: if you want to return 71 return 71\n    # step 73: if you want to return 72 return 72\n    # step 74: if you want to return 73 return 73\n    # step 75: if you want to return 74 return 74\n    # step 76: if you want to return 75 return 75\n    # step 77: if you want to return 76 return 76\n    # step 78: if you want to return 77 return 77\n    # step 79: if you want to return 78 return 78\n    # step 80: if you want to return 79 return 79\n    # step 81: if you want to return 80 return 80\n    # step 82: if you want to return 81 return 81\n    # step 83: if you want to return 82 return 82\n    # step 84: if you want to return 83 return 83\n    # step 85: if you want to return 84 return 84\n    # step 86: if you want to return 85 return 85\n    # step 87: if you want to return 86 return 86\n    # step 88: if you want to return 87 return 87\n    # step 89: if you want to return 88 return 88\n    # step 90: if you want to return 89 return 89\n    # step 91: if you"
    },
    {
        "number": 4030,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.split('\\n')[1]\n    res = float('inf')\n    for k in range(1, n + 1):\n        colors = list(range(1, k + 1))\n        result = sorted(sorted(s))\n        for _ in range(1, k):\n            i = result.index(result[-1])\n            colors[i], colors[i - 1] = colors[i - 1], colors[i]\n            result = sorted(result)\n        if result == sorted(sorted(s)):\n            res = min(res, k)\n    if res == float('inf'):\n        res = -1\n    return str(res)\n"
    },
    {
        "number": 4030,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    c = list(range(1, n + 1))\n    return str(min(c)) + \"\\n\" + str(sorted(c))"
    },
    {
        "number": 4030,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.rstrip()\n    return str(len(s) + len(set(s)) - 1)\n"
    },
    {
        "number": 4030,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    res = 1\n    while (n > len(s)):\n        tmp = sorted(s)\n        if (s == tmp):\n            res += 1\n            s = stdin\n            n = int(stdin)\n        else:\n            s = tmp\n    return str(res)"
    },
    {
        "number": 4031,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input_strings = stdin.split()\n    input_strings_length = len(input_strings)\n    for i in range(input_strings_length):\n        for j in range(i+1, input_strings_length):\n            if all(string in input_strings[i] for string in input_strings[j]):\n                return \"NO\"\n    return \"YES\"\nprint(solution(input()))"
    },
    {
        "number": 4031,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    strings = stdin.split()\n    strings.sort()\n    string_set = set()\n    sorted_set = set()\n    for string in strings:\n        string_set.add(string)\n    for string in string_set:\n        if len(string) >= 2 and string[0] == string[-1]:\n            if (string[:2] in string_set and string[2:] in string_set) or (string[:3] in string_set and string[3:] in string_set):\n                sorted_set.add(string)\n            elif (string[:3] in string_set and string[3:] in string_set) or (string[:2] in string_set and string[2:] in string_set):\n                sorted_set.add(string)\n    print(\"YES\" if len(sorted_set) == n else \"NO\")\n    return sorted_set\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4031,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n'''\n    qw = set()\n    for i in stdin:\n        if i not in qw:\n            qw.add(i)\n        else:\n            return 'NO'\n\n    return 'YES'\n\nprint(solution(input()))\n\n'''\n\n\ndef"
    },
    {
        "number": 4031,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4031,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split()\n    res = []\n    n = len(a)\n    for i in range(n):\n        print(i, a[i])\n        if a[i] in res:\n            continue\n        temp = res.copy()\n        print(temp)\n        flag = False\n        for k in range(n):\n            if a[i] in temp:\n                print(\"in if\")\n                flag = True\n                break\n            print(\"in else\")\n            temp.append(a[i])\n        if flag:\n            continue\n        print(i, a[i])\n        for j in range(i, n):\n            if a[j] in temp:\n                print(\"in if\")\n                flag = True\n                break\n        if not flag:\n            res.append(a[i])\n    return \"YES\" if len(res) == n else \"NO\"\n"
    },
    {
        "number": 4031,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    res = []\n    strings = stdin.split('\\n')\n    for i in strings:\n        res.append(sorted(i))\n    print(\"YES\")\n    for i in range(len(res)):\n        print(\"\".join(res[i]))\n    return \"YES\"\n\nsolution(input())\n"
    },
    {
        "number": 4031,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = [stdin[i] for i in range(n)]\n\n    substring = \"\"\n    for i in range(n):\n        if arr[i] == substring:\n            return \"NO\"\n        substring += arr[i]\n\n    substring = \"\"\n    for i in range(n):\n        if arr[i] == substring:\n            return \"NO\"\n        substring += arr[n - 1 - i]\n\n    return \"YES\"\n"
    },
    {
        "number": 4031,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    str_list = []\n    for i in range(n):\n        str_list.append(stdin[i])\n    result = \"\"\n    # if strings are equal, return NO\n    if len(str_list) == len(set(str_list)):\n        result = \"NO\"\n    else:\n        # sort the strings\n        str_list.sort()\n        # check if it is the same as the sorted list\n        if str_list == sorted(str_list):\n            result = \"YES\"\n        else:\n            result = \"NO\"\n    return result\n"
    },
    {
        "number": 4031,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    string_dict = {}\n    for string in stdin:\n        string = string.replace(\" \", \"\")\n        string_list = []\n        for i in range(1, len(string)):\n            if string[:i] not in string_dict.keys():\n                string_list.append(string[:i])\n                string_dict.setdefault(string[:i], string)\n                string_dict.setdefault(string, string)\n            else:\n                string_list.append(string_dict[string[:i]])\n                string_dict.setdefault(string[:i], string)\n        string_list.sort()\n        string = string_list[0]\n        string = string_dict[string]\n        print(string)\n        print(string_list)\n"
    },
    {
        "number": 4031,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\nstdin = \"\".join(stdin.split())\n\nprint(stdin)\n\nresult = []\nstring = \"\"\nfor i in range(len(stdin)):\n    string = string + stdin[i]\n    if stdin[i] in string:\n        result.append(stdin[i])\nprint(result)\nprint(string)\nprint(\"\".join(result))\n"
    },
    {
        "number": 4032,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    problems = list(map(int, stdin.split()))\n    solutions = 0\n    while n > 0:\n        if problems[0] <= k:\n            solutions += 1\n            problems.pop(0)\n            n -= 1\n            continue\n        else:\n            problems.pop(0)\n            n -= 1\n    return solutions\n"
    },
    {
        "number": 4032,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def check(x):\n        t=0\n        for i in range(n):\n            if x[i]>k:\n                t+=1\n        return t\n    n,k=map(int,stdin.split())\n    left=list(map(int,stdin.split()[1::]))\n    right=list(map(int,stdin.split()[1::]))\n    left.sort(reverse=True)\n    right.sort(reverse=True)\n    m=0\n    while(left):\n        if check(left)>k or check(right)>k:\n            return \"0\"\n        if left[0]<right[0]:\n            left.pop(0)\n        else:\n            right.pop(0)\n        m+=1\n    return str(m)\n\n\nsolution(\"5 2\")\n\nsolution(\"5 100\")\n"
    },
    {
        "number": 4032,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    problems = list(map(int, stdin.split()))\n    solutions = 0\n    while len(problems) > 0:\n        if k <= problems[0]:\n            break\n        if len(problems) >= 2:\n            if problems[-1] <= problems[-2]:\n                problems.pop()\n                if len(problems) == 0:\n                    break\n        else:\n            problems.pop()\n            break\n        problems.pop(0)\n        solutions += 1\n    return solutions\n"
    },
    {
        "number": 4032,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    left_end = 0\n    right_end = len(a) - 1\n    res = 0\n    while left_end <= right_end:\n        if a[left_end] >= k:\n            break\n        if a[right_end] >= k:\n            break\n        left_end += 1\n        right_end -= 1\n        res += 1\n    return res\n"
    },
    {
        "number": 4032,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    problems = sorted([int(stdin) for stdin in stdin.split(\" \")])\n    left = 0\n    right = n - 1\n    result = 0\n    while left <= right:\n        if problems[left] + problems[right] <= k:\n            result += 1\n            left += 1\n            right -= 1\n        else:\n            result += 1\n            right -= 1\n    return str(result)\n"
    },
    {
        "number": 4032,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, k = map(int, stdin.split())\n    return str(0) if k >= a else str(a)\n"
    },
    {
        "number": 4032,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    left_end = 0\n    right_end = n - 1\n    total_count = 0\n    while left_end <= right_end:\n        total_count += 1\n        if right_end - left_end > k:\n            left_end += 1\n        else:\n            left_end += 1\n            right_end -= 1\n    return str(total_count)\nprint(solution(input()))\n\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 4032,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    k = 1\n    counter = 0\n    while a:\n        if a[0] < k:\n            a.pop(0)\n        else:\n            a.pop(0)\n            k = a[0]\n        counter += 1\n    return str(counter)"
    },
    {
        "number": 4032,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    lst = arr.copy()\n    lst.sort()\n    left, right = 0, len(lst) - 1\n    count = 0\n    while left <= right:\n        if lst[left] + lst[right] <= k:\n            count += 1\n            left += 1\n            right -= 1\n        else:\n            right -= 1\n    return count\n"
    },
    {
        "number": 4032,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    \n    n_len = len(a)\n    if n_len == 1:\n        return str(n_len)\n    \n    begin = 0\n    end = n_len-1\n    \n    while begin <= end:\n        mid = (begin+end)//2\n        if a[mid] >= k:\n            end = mid - 1\n        else:\n            begin = mid + 1\n    \n    if begin == n_len:\n        return str(begin)\n    else:\n        return str(begin+1)\n"
    },
    {
        "number": 4033,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    _, a, b = lines[0].split(\" \")\n    return str(min(a * b, a + b, a * 2 + b, a + b + 2))\n"
    },
    {
        "number": 4033,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    [a, b] = list(map(int, stdin.split()))\n    if a == b:\n        return str(2 * a)\n    else:\n        return str(2 * a + 4 * b)\n"
    },
    {
        "number": 4033,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    a, b = map(int, stdin.split())\n    return str(min(a, b) * 2 + max(a, b) * 2 - a - b)\n"
    },
    {
        "number": 4033,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(min(2 * a + 2 * b + min(2 * a - 2, 2 * b - 2), a + b + min(a, b - 1)))"
    },
    {
        "number": 4033,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    For each input line returns the minimum possible perimeter\n    '''\n    a, b = list(map(int, stdin.split()))\n    if a == b:\n        return a * 4\n    else:\n        return (a * 2 + b * 2)\n"
    },
    {
        "number": 4033,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a,b = map(int, stdin.split())\n    colors = set()\n    for i in range(a+b):\n        colors.add(i)\n    for i in range(a):\n        if a-i not in colors:\n            break\n    else:\n        for i in range(b):\n            if b-i not in colors:\n                break\n        else:\n            if i == a and i == b:\n                return str(a*2+b*2)\n            elif a == i or b == i:\n                return str(a*2+b*2)\n    return str(max(i*(i-1) for i in range(1,min(a,b)+1)))"
    },
    {
        "number": 4033,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    # return '{} {}'.format(solution_1(a, b), solution_2(a, b))\n    return '{} {}'.format(*solution_1(a, b))"
    },
    {
        "number": 4033,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n"
    },
    {
        "number": 4033,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    num_tiles = stdin[0]\n    red = stdin[1]\n    blue = stdin[2]\n    red_l = len(red)\n    blue_l = len(blue)\n\n    if red_l + blue_l == num_tiles:\n        return (red_l + blue_l) * 2 - 1\n\n    blue_pairs = []\n    red_pairs = []\n    for i in range(blue_l):\n        blue_pairs.append(blue[i])\n        blue_pairs.append(str(int(blue[i]) - 1))\n        blue_pairs.append(blue[i])\n    for i in range(red_l):\n        red_pairs.append(red[i])\n        red_pairs.append(str(int(red[i]) - 1))\n        red_pairs.append(red[i])\n\n    red_pairs = \"\".join(red_pairs)\n    blue_pairs = \"\".join(blue_pairs)\n\n    return red_pairs + blue_pairs\n"
    },
    {
        "number": 4033,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n == 1 and m == 1:\n        return str(1)\n    elif n == 1 or m == 1:\n        return str(2)\n    else:\n        if n > m:\n            n, m = m, n\n        c = (n + m) * 2\n        a = (n + m) * 3\n        if a > c:\n            return str(c)\n        else:\n            return str(a)\n"
    },
    {
        "number": 4034,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    length = len(stdin)\n    if length < 2:\n        return \"NO\"\n    s = list(stdin)\n    s = sorted(s)\n    if s!= s[::-1]:\n        return \"NO\"\n    # print(s)\n    for i in range(1, length):\n        # print(i)\n        # print(s)\n        if s[i] < s[i - 1]:\n            return \"NO\"\n        if s[i - 1] > s[i]:\n            s[i], s[i - 1] = s[i - 1], s[i]\n            # print(s)\n    # print(s)\n    return ''.join(str(int(bit) for bit in s))\n"
    },
    {
        "number": 4034,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    n = int(stdin.strip())\n    s = sorted(s)\n    for i in range(1, n):\n        s[i] = str(i) + s[i]\n    s = \"\".join(s)\n    print(s)\n    return \"YES\" if sorted(s) == list(s) else \"NO\"\n"
    },
    {
        "number": 4034,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    if len(s) > n:\n        return \"NO\"\n    alphas = [chr(i) for i in range(97, 123)]\n    alphas.append(\"0\")\n    alphas.append(\"1\")\n    s = list(s)\n    for i in range(len(s)):\n        for j in range(i+1, len(s)):\n            if s[i] > s[j]:\n                s[i], s[j] = s[j], s[i]\n                break\n    if \"\".join(s)!= \"\".join(alphas):\n        return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 4034,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    s = stdin.strip()\n    return \"YES\" if n >= len(s) and sorted(s) == list(s) else \"NO\"\n"
    },
    {
        "number": 4034,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    if n < 1 or n > 200:\n        return \"NO\"\n\n    for i in range(1, n + 1):\n        if not valid_char(i):\n            return \"NO\"\n\n    s = stdin.split()\n\n    if validate_coloring(s):\n        return \"YES\"\n\n    if validate_sorting(s):\n        return \"YES\"\n\n    return \"NO\"\n\n\ndef"
    },
    {
        "number": 4034,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    arr = list(stdin.strip())\n    for i in range(len(arr)):\n        if arr[i].isdigit():\n            arr[i] = int(arr[i])\n    arr = sorted(arr)\n\n    if all(arr[i] == arr[i+1] for i in range(n-1)):\n        print('YES')\n    else:\n        print('NO')\n\n    return stdin\n"
    },
    {
        "number": 4034,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # make the string a sorted string\n    sorted_string = ''.join(sorted(stdin))\n\n    # initialize the needed variables\n    used_colors = set()\n    used_colors_and_swaps = []\n\n    # loop through all characters of the given string\n    for c in stdin:\n\n        # if the current color is not used\n        if c not in used_colors:\n\n            # mark it as used\n            used_colors.add(c)\n\n            # add it to used_colors_and_swaps\n            used_colors_and_swaps.append(c)\n\n            # if it is the last character of the string, then we have a solution\n            if len(used_colors_and_swaps) == len(set(sorted_string)):\n                return \"YES\"\n\n        else:\n            # if the color is used, then we have to swap with all neighboring characters\n            # loop through all the neighboring characters\n            for i in range(len(sorted_string)):\n\n                # check if it is possible to swap with the neighbor character\n                if sorted_string[i] == c and sorted_string[i - 1]!= c:\n\n                    # if it is possible, then make a new string with the swapped characters and sort it\n                    new_string = sorted_string[:i] + sorted_string[i + 1] + sorted_string[i] + sorted_string[i + 2:]\n                    new_string = ''.join(sorted(new_string))\n\n                    # if the new string is already sorted\n                    if new_string == sorted_string:\n                        return \"YES\"\n\n                    # if not, then we have to do some more swaps\n                    else:\n\n                        # add the new string to the used_colors_and_swaps\n                        used_colors_and_swaps.append(new_string)\n\n                        # if it is the last character, then we have a solution\n                        if len(used_colors_and_swaps) == len(set(sorted_string)):\n                            return \"YES\"\n\n    # if there are no valid swapping, we have no solution\n    return \"NO\"\n"
    },
    {
        "number": 4034,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    s = stdin.split()[1]\n\n    if all(x == s[0] for x in s[1:]):\n        return \"NO\"\n\n    counts = Counter(s)\n\n    def swap(i, j, key):\n        temp = s[i]\n        s[i] = s[j]\n        s[j] = temp\n\n        counts[key] -= 1\n\n        if counts[key] == 0:\n            del counts[key]\n\n    def check():\n        for i in range(n - 1):\n            if s[i] == s[i + 1]:\n                return False\n\n        for key, val in counts.items():\n            if val == 0:\n                return False\n\n        return True\n\n    for i in range(n - 1):\n        if s[i] == s[i + 1]:\n            continue\n\n        for j in range(n - 1, i, -1):\n            if s[i] == s[j]:\n                swap(i, j, key=0)\n                if check():\n                    return \"YES\"\n                swap(i, j, key=1)\n\n    return \"NO\"\n"
    },
    {
        "number": 4034,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    n_colors = 3\n    colors = [0] * n\n    n_swaps = 0\n    for i, c in enumerate(stdin):\n        if colors[i]!= n_colors:\n            for j in range(i + 1, n):\n                if colors[j]!= n_colors:\n                    n_swaps += 1\n                    colors[i], colors[j] = colors[j], colors[i]\n                    break\n            if n_swaps == 0:\n                return \"NO\"\n    return \"YES\" + \"\".join(f\"{colors[i]} {colors[i+1]}\" for i in range(n))"
    },
    {
        "number": 4034,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    s = sorted(s)\n    while True:\n        # swap\n        swap = False\n        for i in range(1, len(s)):\n            if s[i] < s[i - 1]:\n                s[i], s[i - 1] = s[i - 1], s[i]\n                swap = True\n        if swap:\n            # rotate\n            s = s[1:] + s[:1]\n        else:\n            # reverse\n            s = s[::-1]\n        # is it sorted\n        s = sorted(s)\n        if s == s[::-1]:\n            break\n    for i in range(len(s)):\n        if s[i] == 0:\n            s[i] = '0'\n        else:\n            s[i] = '1'\n    return ''.join(s)\n"
    },
    {
        "number": 4035,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # initialize the variables\n    a = int(stdin[0])\n    b = int(stdin[1])\n    c = a\n    d = b\n    # initialize the results\n    res1 = -1\n    res2 = -1\n    # the nested for loop\n    for i in range(c):\n        for j in range(d):\n            # Check whether the condition of price is satisfied.\n            if i * 8 + j * 10 == a * c + d * e:\n                # if yes, print the result\n                if i * 8 + j * 10 < res1:\n                    res1 = i * 8 + j * 10\n                if i * 8 + j * 10 < res2:\n                    res2 = i * 8 + j * 10\n    # if there is no such price, print -1\n    if res1 == -1:\n        return \"-\"\n    else:\n        return str(res1)"
    },
    {
        "number": 4035,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    _, a, b = map(int, stdin.split())\n    for _ in range(int(input())):\n        a, b = map(int, input().split())\n        if a * 8 >= b and b * 10 >= a:\n            print(int(a * 8 / 8 + a * 10 / 10))\n            break\n    else:\n        print(-1)\n\nsolution()\n"
    },
    {
        "number": 4035,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    ans = -1\n\n    if A == 0 and B == 0:\n        return '-'\n\n    for i in range(A, B+1):\n        temp = (i * 0.08) - i * 0.1\n        if temp <= 0:\n            continue\n        else:\n            ans = i\n            break\n\n    for i in range(A, B+1):\n        temp = (i * 0.1) - i * 0.08\n        if temp <= 0:\n            continue\n        else:\n            ans = i\n            break\n\n    return str(ans) if ans!= -1 else str(-1)\n"
    },
    {
        "number": 4035,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    price = -1\n    for i in range(A + 1):\n        for j in range(B + 1):\n            price = max(price, i * 0.08 + j * 0.1)\n    return str(price)"
    },
    {
        "number": 4035,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = list(map(int, stdin.split()))\n    if a > b:\n        a, b = b, a\n    if a == 1:\n        a = 0\n    a = (a - 1) * 25 + b * 2\n    if a > 1000:\n        a = 1000\n    if a < 0:\n        a = 0\n    print(a)\n    return \"\"\n\n\nsolution(\"2 2\")\n\nsolution(\"3 10\")\n\nsolution(\"1 2\")\n"
    },
    {
        "number": 4035,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split('\\n')\n    a, b = inputs[0].split(' ')\n    a = int(a)\n    b = int(b)\n\n    for i in range(a, b + 1):\n        if i == (i * 0.08) or i == (i * 0.1):\n            print(i)\n"
    },
    {
        "number": 4035,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A == 1 and B == 1:\n        return -1\n    for a in range(A, B + 1):\n        for b in range(B, A - 1, -1):\n            if a + b >= 25 and (a * 0.08 + b * 0.1) <= 25:\n                return str(int(a))\n    return str(-1)\n"
    },
    {
        "number": 4035,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    for a in range(A,B+1):\n        if (a/100)*8 <= 25 <= (a/100)*8 + 10 and (a/100)*10 <= 25 <= (a/100)*10 + 10:\n            return str(a)\n    return \"None\""
    },
    {
        "number": 4035,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n\n    if A == 0 and B == 0:\n        return '-1'\n\n    if A > B:\n        A, B = B, A\n\n    minimum_price = -1\n    price = A\n    while price > 0:\n        if (A - price) >= 0 and (B - price) >= 0:\n            price -= A\n            if A == 0:\n                A = 0\n            else:\n                A -= 1\n        else:\n            price = 0\n        if minimum_price == -1:\n            minimum_price = price\n        else:\n            if price < minimum_price:\n                minimum_price = price\n    return str(minimum_price)\n"
    },
    {
        "number": 4035,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    try:\n        A, B = map(int, stdin.split(\" \"))\n    except:\n        print(\"Wrong input\")\n        return\n\n    def check(price):\n        if A <= price <= B:\n            return True\n        else:\n            return False\n\n    for price in range(0, 100):\n        if check(price):\n            return str(price)\n    return \"-\"\n\n\nsolution(\"2 2\")\n\n\"\"\"\n"
    },
    {
        "number": 4036,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    n, k = a[0], a[1]\n\n    if k == 1:\n        return \"NO\"\n    if n == 0:\n        return \"YES\"\n\n    if n == 1:\n        return \"YES\" + \" \".join(map(str, a))\n\n    s = sum(a)\n\n    if s % k!= 0:\n        return \"NO\"\n    else:\n        return \"YES\" + \" \".join(map(str, a))\n"
    },
    {
        "number": 4036,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    stdin: string\n    '''\n    stdin = stdin.split()\n    n = int(stdin[0])\n    k = int(stdin[1])\n    \n    a = []\n    for i in range(1, k + 1):\n        a.append(i)\n    \n    if k == 1:\n        if n < 2:\n            return \"NO\"\n        else:\n            return \"YES\"\n    \n    if n == 1:\n        return \"NO\"\n    \n    if k == 1 and n > 2:\n        return \"NO\"\n    \n    if k > n and k > 2:\n        return \"NO\"\n    \n    for i in range(2, k + 1):\n        if a[i - 2] <= n:\n            a[i - 1] = a[i - 1] + 1\n        else:\n            return \"NO\"\n    return \"YES\""
    },
    {
        "number": 4036,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n <= 2:\n        return 'NO'\n    a = [0] * k\n    if n % 2 == 1:\n        a[0] = 1\n    a[k - 1] = 2\n    for i in range(1, k):\n        a[i] = a[i - 1] + 1\n        a[i] = min(a[i], a[i - 1] + 1)\n    return 'YES' if n == sum(a) else 'NO'"
    },
    {
        "number": 4036,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    if n < 1 or n > 10^9 or k < 1 or k > 10^5:\n        return \"NO\"\n\n    problems = [i for i in range(1, n + 1)]\n\n    while True:\n        problems = sorted(problems, reverse=True)\n        if problems[0] == 1:\n            return \"YES\"\n        elif problems[0] == n:\n            return \"NO\"\n\n        for i in range(1, k):\n            if problems[i] >= problems[i - 1]:\n                problems[i] = 1\n            else:\n                problems[i] += 1"
    },
    {
        "number": 4036,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if 2 * n <= k:\n        return 'NO'\n\n    a = [0] * (k - 1)\n    max_sum = 0\n    for i in range(k):\n        if i == 0:\n            a[i] = 1\n            max_sum += 1\n        else:\n            a[i] = max(a[i - 1], max_sum + 1)\n            max_sum = max(max_sum, a[i])\n    return \"YES\" + \" \".join(map(str, a))\n"
    },
    {
        "number": 4036,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    ans = []\n    for i in range(k):\n        if sum(ans) == n:\n            if max(ans) <= 2 * max(ans[i:]):\n                return \"NO\"\n        ans.append(i + 1)\n    return \"YES\"\n"
    },
    {
        "number": 4036,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if is_possible() else \"NO\"\n"
    },
    {
        "number": 4036,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n == k or k == 0 or n < 1:\n        return \"NO\"\n    n_array = []\n    for _ in range(k):\n        n_array.append(int(input()))\n    count = 0\n    prev_elem = 0\n    prev_elem_index = 0\n    for i, elem in enumerate(n_array):\n        if elem < prev_elem:\n            prev_elem = elem\n            prev_elem_index = i\n        count += elem\n        if count > n:\n            return \"NO\"\n    if prev_elem_index + 1 == k:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4036,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n <= k:\n        return 'YES'\n    else:\n        return 'NO'"
    },
    {
        "number": 4036,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n == 1 and k == 1:\n        return \"YES\"\n    if k > n + 1:\n        return \"NO\"\n    \n    x = n // k\n    if (n - k) % (x + 1)!= 0:\n        return \"NO\"\n    else:\n        a = []\n        for i in range(1, k + 1):\n            a.append(n // (x + 1) + 1)\n        return \"YES\\n\" + str(a)"
    },
    {
        "number": 4037,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, r = list(map(int, stdin.split()))\n    A = list(map(int, stdin.split()))\n    A.sort()\n    B = sorted(A, reverse=True)\n    c = 0\n    ans = 0\n    for i in range(n):\n        if A[i] > r:\n            c += (A[i] - r) * (B[i] - A[i])\n            ans = max(ans, c)\n            c = 0\n    return str(ans)\n"
    },
    {
        "number": 4037,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    for i in range(n):\n        print(i)\n    return 0\n"
    },
    {
        "number": 4037,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    projects = [(int(x), int(y)) for x, y in [stdin.split() for _ in range(n)]]\n    projects.sort(key=lambda x: x[1])\n    max_project = 0\n    rating = projects[0][1]\n    rating_diff = []\n    for project in projects:\n        if project[1] - rating >= 0:\n            rating_diff.append(project[1] - rating)\n        else:\n            rating = project[1]\n        if rating > 0:\n            max_project += 1\n        rating += project[0]\n    return max_project\n"
    },
    {
        "number": 4037,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    projects = [int(x) for x in stdin.split()]\n    projects = sorted(projects, reverse=True)\n    sum_of_rating = sum(projects)\n    if sum_of_rating <= r:\n        return sum_of_rating\n    else:\n        #dp[i][j] i represents the size of the subset and j represents the number of projects, whose ratings are as follows:\n        dp = [[-1 for _ in range(sum_of_rating + 1)] for _ in range(n + 1)]\n        #dp[0][0] = 0\n        for i in range(1, n + 1):\n            for j in range(sum_of_rating + 1):\n                if projects[i - 1] + j >= r:\n                    dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - projects[i - 1]] + projects[i - 1])\n                else:\n                    dp[i][j] = dp[i - 1][j]\n        return dp[n][sum_of_rating]\n"
    },
    {
        "number": 4037,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    p = []\n    for i in range(n):\n        a, b = map(int, stdin.split())\n        p.append([a, b])\n\n    p.sort(key=lambda x: x[1], reverse=True)\n    res = 0\n\n    for i in range(n):\n        if p[i][0] <= r:\n            res += 1\n\n    return str(res)\n\n\nprint(solution(input()))"
    },
    {
        "number": 4037,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.strip().split())\n    ratings = sorted(map(int, stdin.strip().split()))\n    min_rating = min(ratings)\n    max_rating = max(ratings)\n    \n    # max_rating - min_rating >= r\n    # The profit = max_rating - min_rating\n    # profit = 39999 - 3999\n    # profit = 9999 - 9998\n    profit = max_rating - min_rating\n    \n    res = profit\n    if profit >= r:\n        return res\n    \n    a_r = 0\n    b_r = 0\n    \n    a_max = max_rating\n    b_max = profit\n    \n    for a in range(min_rating, max_rating + 1):\n        b = profit - a\n        if b >= 0:\n            a_r = a\n            b_r = b\n            break\n    \n    max_a_b_r = max(a_r, b_r)\n    if max_a_b_r > 0:\n        if max_a_b_r >= r:\n            res = max_a_b_r\n        else:\n            res = r\n    \n    if res > profit:\n        return res\n    \n    return res"
    },
    {
        "number": 4037,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin.split(\" \")[0])\n    y = int(stdin.split(\" \")[1])\n    a = int(stdin.split(\" \")[2])\n    b = int(stdin.split(\" \")[3])\n    p = [0]*x\n    i = 0\n    while a!= 0 and b!= 0:\n        if a > 0:\n            a -= 1\n        if b > 0:\n            b -= 1\n        p[i] = a + b\n        i += 1\n    return str(max(p))\n"
    },
    {
        "number": 4037,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def get_rating(n: int, r: int) -> int:\n        return r // n\n\n    n, r = map(int, stdin.split())\n    projects = list(map(lambda x: int(x.split()[0]), stdin.splitlines()[1:]))\n    max_rating = -1\n    current_rating = get_rating(n, r)\n    for project in projects:\n        current_rating += project[1]\n        if current_rating < 0:\n            current_rating = 0\n        max_rating = max(max_rating, current_rating)\n    return str(max_rating)\n"
    },
    {
        "number": 4037,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip().split()\n    n, r = int(stdin[0]), int(stdin[1])\n    projs = stdin[2:]\n    st = list(map(int, projs))\n\n    if n == 1 and r == 1:\n        return 0\n\n    # dp = [[1] * n] + [[0] * n] * (n-1)\n    dp = [[0] * n] * (n+1)\n    for i in range(1, n+1):\n        dp[i][0] = max(dp[i-1][0], 1)\n        for j in range(1, i):\n            dp[i][j] = max(dp[i-1][j-1] + max(st[j-1][0]-st[j][0], 0), dp[i-1][j])\n    return dp[n][-1]\n\nprint(solution(input()))\n\n\"\"\"\n"
    },
    {
        "number": 4037,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.strip().split())\n    projects = list(map(int, stdin.strip().split()))\n    return str(max_subset_size(n, r, projects))\n\n\ndef"
    },
    {
        "number": 4038,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 4038,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    num_list = []\n    for i in range(n):\n        num_list.append([int(i) for i in stdin.strip().split(' ')][1:])\n    for num in num_list:\n        for i in range(len(num)):\n            if num[i] in num[i + 1:]:\n                return 'NO'\n    for i in range(n - 1):\n        if num_list[i][0] == num_list[i + 1][-1]:\n            num_list[i][-1], num_list[i + 1][0] = num_list[i + 1][0], num_list[i][-1]\n            for j in range(i + 1, len(num_list)):\n                if num_list[j][0] == num_list[i + 1][-1]:\n                    num_list[j][-1], num_list[i + 1][0] = num_list[i + 1][0], num_list[j][-1]\n    for i in range(len(num_list)):\n        for j in range(len(num_list[i])):\n            num_list[i][j] = str(num_list[i][j])\n    return '\\n'.join(num_list)\n"
    },
    {
        "number": 4038,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nfrom itertools import permutations\nimport numpy as np\nimport sys\n\ndef"
    },
    {
        "number": 4038,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 4038,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\"\"\""
    },
    {
        "number": 4038,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n'''\n    for string in stdin.split():\n        x = re.findall(r'\\d+', string)\n        if len(x) == 1:\n            continue\n        else:\n            return \"NO\"\n    return \"YES\"\n\nsolution(input())\n\n'''\n"
    },
    {
        "number": 4038,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 4038,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    m = [[a[i] for i in range(n)] for j in range(n)]\n    for i in range(len(m)):\n        for j in range(len(m[i])):\n            if m[i][j]!= m[j][i]:\n                return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 4038,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    data = list(map(int, stdin.split()[1]))\n    for i in range(len(data)):\n        for j in range(len(data)):\n            if data.count(data[i])!= 1 or data.count(data[j])!= 1:\n                return 'NO'\n    return 'YES'\n\n\nsolution(input())\n"
    },
    {
        "number": 4038,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    return 'YES' if can construct a palindrome from stdin else 'NO'\n    '''\n    n = int(input())\n    matrix = list(map(int, input().split()))\n    if can_construct(matrix, n):\n        print('YES')\n        for i in range(n):\n            print(*matrix[i], sep=' ', end=' ')\n        return\n    else:\n        print('NO')\n    return\n\ndef"
    },
    {
        "number": 4039,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, r = list(map(int, stdin.split()))\n    res = []\n    for i in range(1, n + 1):\n        res.append((n - i, i))\n    print(res)\n    res.sort(reverse=True)\n    print(res)\n    for a, b in res:\n        if a * r >= b:\n            return \"YES\"\n    return \"NO\""
    },
    {
        "number": 4039,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    p = [map(int, stdin.split()) for _ in range(n)]\n    for i in range(1, n):\n        p[i][0] += p[i - 1][1]\n        p[i][1] += p[i - 1][0]\n    for i in range(n):\n        if p[i][0] - p[i][1] < 0:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 4039,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # return \"YES\" if min_rating <= stdin <= max_rating else \"NO\"\n    def is_possible(start: int, end: int, rating: int) -> bool:\n        return start >= rating >= end\n\n    n, r = map(int, stdin.split())\n    projects = [map(int, stdin.split()) for _ in range(n)]\n    min_rating, max_rating = map(int, stdin.split())\n\n    min_rating = min(min_rating, max_rating)\n    max_rating = max(min_rating, max_rating)\n\n    if max_rating < r:\n        return \"NO\"\n    if min_rating >= r:\n        return \"YES\"\n\n    rating = max_rating\n    for project in projects:\n        a, b = project\n        if is_possible(rating, max_rating, a):\n            rating = max_rating\n        else:\n            rating = a + b\n\n    return \"YES\" if rating >= max_rating else \"NO\"\n"
    },
    {
        "number": 4039,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, r = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    for i in range(n):\n        a[i] = (a[i], abs(a[i] - r))\n    a.sort(key=lambda x: x[1])\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i][1] <= a[j][1]:\n                return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 4039,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    inp = stdin.split()\n    n, r = int(inp[0]), int(inp[1])\n    projects = []\n    for i in range(n):\n        projects.append((int(inp[i*2+2]), int(inp[i*2+3])))\n\n    if len(projects) == 0:\n        return \"NO\"\n    # Sort the projects by the first element\n    projects.sort(key=lambda x: x[0])\n    projects.sort(key=lambda x: x[1], reverse=True)\n\n    rating = 0\n    for i in range(n):\n        rating += projects[i][0] + projects[i][1]\n\n    # Check if there is a project\n    if rating >= r:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 4039,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    res = set()\n    for i in range(n):\n        res.add(tuple(map(int, stdin.split())))\n    for i in range(len(res)):\n        t = (res[i][0] + res[i][1], res[i][0] - res[i][1])\n        res.add(t)\n    s = set()\n    for i in res:\n        if i[0] >= 0 and i[1] >= 0:\n            s.add(i)\n    return \"YES\" if len(s) == n else \"NO\"\n"
    },
    {
        "number": 4039,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, r = (int(x) for x in stdin.split())\n    a = [(int(x), int(y)) for x, y in (stdin.split())]\n\n    for x, y in a:\n        if x < 0:\n            x = 0\n        if y > 0:\n            y = 0\n        if y < 0:\n            y = 0\n\n    for x, y in a:\n        if x - r >= 0 and y - r >= 0:\n            return 'YES'\n\n    return 'NO'\n"
    },
    {
        "number": 4039,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    stdin = [list(map(int, stdin.split())) for _ in range(n)]\n    res = []\n    cnt = 0\n    while cnt < n:\n        res = [stdin[cnt]]\n        cnt += 1\n        while cnt < n and stdin[cnt][0] == stdin[cnt-1][0] + stdin[cnt-1][1]:\n            res.append(stdin[cnt])\n            cnt += 1\n        if res[-1][0] > r:\n            break\n        print('YES')\n        if cnt == n:\n            print('NO')\n            break\n    return 'NO'\n"
    },
    {
        "number": 4039,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4039,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, r = map(int, stdin.split())\n    projects = [list(map(int, stdin.split())) for _ in range(n)]\n    # print(projects)\n    prices = [a-b for a, b in projects]\n    if (min(prices) < 0):\n        return \"NO\"\n    if (max(prices) > r):\n        return \"NO\"\n    for i in range(1, n):\n        if (max(prices[:i]) - min(prices[:i]) < 0):\n            return \"NO\"\n    return \"YES\""
    },
    {
        "number": 4040,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d, c = map(int, stdin.split())\n\n    c = list(map(int, stdin.split()))\n\n    c_ptr = 0\n    platform_ptr = 0\n    platform_cnt = 1\n    while True:\n        if c_ptr > c[platform_ptr] - 1:\n            platform_cnt += 1\n            c_ptr = 0\n            platform_ptr += 1\n        elif platform_cnt == n:\n            return \"YES\"\n        elif c_ptr == 0:\n            return \"NO\"\n        else:\n            c_ptr += 1\n"
    },
    {
        "number": 4040,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d, c = list(map(int, stdin.split()))\n    a = [i - 1 for i in range(n + 2)]\n    platforms = [i - 1 for i in range(m)]\n    return \"YES\" if feasible(a, d, platforms) else \"NO\"\n\n\ndef"
    },
    {
        "number": 4040,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = map(int, stdin.split())\n    c = list(map(int, stdin.split()))\n    ans = []\n\n    if n + 1 <= d:\n        return \"NO\"\n\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            if j - i <= d:\n                if ans and i == ans[-1] + 1:\n                    return \"NO\"\n                if ans and i == ans[-1]:\n                    continue\n                ans.append(i)\n                ans.append(j)\n                break\n    return \"YES\"\n    # def solution(n, m, d):\n    #     # Your code goes here\n    #     if n + 1 <= d:\n    #         return \"NO\"\n    #     ans = []\n    #     for i in range(n):\n    #         for j in range(i + 1, n + 1):\n    #             if j - i <= d:\n    #                 if i == 0 or i == n or j == n + 1:\n    #                     ans.append(i)\n    #                     ans.append(j)\n    #                     break\n    #                 ans.append(i)\n    #                 ans.append(j)\n    #                 break\n    #     return \"YES\"\n    #     return \"NO\"\n    #     # Your code goes here\n"
    },
    {
        "number": 4040,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = map(int, stdin.split())\n    c = list(map(int, stdin.split()))\n    if sum(c) > n:\n        return \"NO\"\n    a = [0 for _ in range(n)]\n    cnt = 1\n    for i in range(1, n+1):\n        if i not in a:\n            a[i] = cnt\n            cnt += 1\n        if c[i-1] == 1:\n            if i == n + 1:\n                return \"YES\"\n            a[i] = a[i-1]\n        if i == n + 1:\n            break\n        if i in a and a[i-1] + 2 >= a[i]:\n            if a[i-1] == 1:\n                a[i] = cnt\n                cnt += 1\n            a[i] = a[i-1] + 2\n    return \"YES\"\n"
    },
    {
        "number": 4040,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d, *c = list(map(int, stdin.split()))\n    if n == m == n + 1:\n        return \"YES\"\n    a = []\n    for i in c:\n        if i > n:\n            return \"NO\"\n        if i == n:\n            a.append(0)\n        else:\n            a.append(i)\n    a.sort()\n    if a[0]!= 0:\n        return \"NO\"\n    for i in range(1, len(a)):\n        if a[i] - a[i - 1]!= d:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 4040,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = (int(i) for i in stdin.split())\n    c = [int(i) for i in stdin.split()[1:]]\n    #print(n, m, d, c)\n    m += 1\n    #print(m)\n    #print(d)\n    #print(c)\n\n    # check if there is a river to the right that can reach up to the right most cell\n    if n+1 < c[0]: return \"NO\"\n    \n    # check if there is a river to the left that can reach up to the right most cell\n    if n+1 < c[-1]: return \"NO\"\n    \n    # check if the cells from the left are not reachable by a platform\n    if c[0] <= c[1]: return \"NO\"\n    \n    # check if the cells from the right are not reachable by a platform\n    if c[-1] <= c[-2]: return \"NO\"\n    \n    # check if the cells from the left can be reached from the cells from the right\n    if c[0] <= c[1]:\n        c1 = c[0] + d\n        c2 = c[1] + d\n        if c1 <= c[-1] and c2 <= c[-1]: return \"YES\"\n\n    # check if the cells from the right can be reached from the cells from the left\n    if c[-1] <= c[-2]:\n        c1 = c[-1] + d\n        c2 = c[-2] + d\n        if c1 <= c[0] and c2 <= c[0]: return \"YES\"\n\n    # check if the cells from the left can be reached from the cells from the right\n    if c[0] <= c[1]:\n        c1 = c[0] + d\n        c2 = c[1] + d\n        if c1 <= c[-1] and c2 <= c[-1]: return \"YES\"\n\n    # check if the cells from the right can be reached from the cells from the left\n    if c[-1] <= c[-2]:\n        c1 = c[-1] + d\n        c2 = c[-2] + d\n        if c1 <= c[0] and c2 <= c[0]: return \"YES\"\n\n    return \"NO\"\n\nsolution(stdin)\n"
    },
    {
        "number": 4040,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    N, M, D = map(int, stdin[0].split())\n    platforms = list(map(int, stdin[1].split()))\n\n    platforms.append(N)\n    platforms.append(N + 1)\n\n    platforms.sort()\n    # print(platforms)\n\n    def is_ok(x: int) -> bool:\n        for y in range(N + 2):\n            if y not in platforms and x + y in platforms:\n                return False\n        return True\n\n    for p in platforms:\n        left, right = p - 1, p + 1\n        while left in platforms and right in platforms:\n            if not is_ok(left):\n                left += 1\n            elif not is_ok(right):\n                right -= 1\n            else:\n                return 'NO'\n    else:\n        return 'YES'\n"
    },
    {
        "number": 4040,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    _, n, m, d, *c = list(map(int, stdin.split()))\n    a = [0] * n\n    for c in c:\n        a.append(c)\n    return \"YES\" if d in [a[i] for i in range(n)] or d in [a[i] + 1 for i in range(n)] else \"NO\"\n"
    },
    {
        "number": 4040,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # parse\n    def parse(s: str) -> list:\n        return list(map(int, s.split()))\n    n, m, d, *c = parse(stdin)\n    c = list(map(int, c))\n\n    # the left bank\n    a = 0\n    # the right bank\n    b = n + 1\n\n    # wokr platform\n    def wokr(d, c):\n        return c[0] + d\n    # first platform\n    first = 0\n\n    # while possible\n    while wokr(d, c) < b:\n        # when possible\n        if a <= wokr(d, c):\n            a += 1\n            # next platform\n            first += 1\n\n            # while enough platform\n            while first <= m:\n                # if possible\n                if a <= wokr(d, c):\n                    a += 1\n                    # next platform\n                    first += 1\n                # else\n                else:\n                    # the answer\n                    return \"YES\" + str(a - 1) + \" \" + str(a - 1) + \" \" + str(a - 1) + \" \" + str(a - 1) + \" \" + str(a - 1) + \" \" + str(a - 1) + \" \" + str(a - 1) + \" \" + str(a - 1)\n            # else\n        # else\n        else:\n            # the answer\n            return \"YES\" + str(a - 1) + \" \" + str(a - 1) + \" \" + str(a - 1) + \" \" + str(a - 1) + \" \" + str(a - 1) + \" \" + str(a - 1) + \" \" + str(a - 1)\n\n    # no answer\n    return \"NO\""
    },
    {
        "number": 4040,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d, *c = list(map(int, stdin.split()))\n\n    if 0 > n or n > 10**9:\n        return 'NO'\n\n    if d < 1:\n        return 'NO'\n\n    # find first platform\n    left_platform = 0\n    left_platform_index = 0\n    platform_counter = 0\n    for c_i in c:\n        platform_counter += 1\n        if platform_counter == m:\n            break\n        if c_i > n:\n            left_platform_index = 0\n            break\n        left_platform_index += 1\n        if left_platform_index >= n:\n            break\n\n    # find the right platform\n    right_platform = 0\n    right_platform_index = 0\n    platform_counter = 0\n    for c_i in reversed(c):\n        platform_counter += 1\n        if platform_counter == m:\n            break\n        if c_i > n:\n            right_platform_index = n\n            break\n        right_platform_index -= 1\n        if right_platform_index < 0:\n            break\n\n    # print(left_platform_index, right_platform_index)\n    if right_platform_index < left_platform_index:\n        return 'NO'\n\n    # find the answer\n    left_platform = c[left_platform_index]\n    right_platform = c[right_platform_index]\n    result = []\n    for i in range(n + 1):\n        if i == 0:\n            result.append(0)\n        elif i == left_platform:\n            result.append(left_platform_index)\n        elif i == right_platform:\n            result.append(right_platform_index)\n        else:\n            result.append(i)\n            left_platform = i\n            right_platform = i\n\n    return 'YES'+ str(result)\n"
    },
    {
        "number": 4041,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    s = stdin\n    length_s = len(s)\n    if length_s < 2:\n        return 0\n    substring = 0\n    for i in range(0, length_s-1):\n        left = 0\n        right = 0\n        count_substring = 1\n        while left < i and count_substring < length_s - i:\n            count_substring += 1\n            if s[i] == s[left]:\n                left += 1\n            else:\n                right = left\n                left = i + 1\n                break\n        substring = max(substring, count_substring)\n    return substring"
    },
    {
        "number": 4041,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    while True:\n        t = s[::-1]\n        if all(t.count(c) <= s.count(c) for c in set(s)):\n            break\n        s = t\n    return len(s)\n"
    },
    {
        "number": 4041,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    m = len(stdin[0])\n    best = 0\n    # s = stdin\n    s = stdin[0]\n    for l in range(1, n):\n        for i in range(n - l):\n            if stdin[i] == stdin[i + l]:\n                continue\n            if stdin[i + l] in stdin[i:i + l + 1]:\n                break\n        else:\n            t = stdin[:i] + stdin[i + l + 1:]\n            tlen = len(t)\n            if tlen > best:\n                best = tlen\n            t = stdin[:i] + stdin[i + l + 1:]\n            for j in range(1, n - l):\n                if t == stdin[i:i + l]:\n                    break\n                if t in stdin[i:i + l + 1]:\n                    break\n            else:\n                t = stdin[:i] + stdin[i + l + 1:]\n                tlen = len(t)\n                if tlen > best:\n                    best = tlen\n    return best\n"
    },
    {
        "number": 4041,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    t = stdin\n    while len(s)!= 0:\n        index_min = len(s)\n        index_max = -1\n        for i in range(len(s)):\n            if s[:i + 1] == t:\n                if i + 1 < index_min:\n                    index_min = i + 1\n                if i + 1 > index_max:\n                    index_max = i + 1\n        if index_min == len(s) or index_max == -1:\n            return 0\n        s = s[index_min:]\n        t = t[:index_max]\n    return len(t)\n\n\nsolution('')\n"
    },
    {
        "number": 4041,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    t = stdin.strip()\n    len_s = len(S)\n    len_t = len(t)\n    l = 0\n    r = 0\n    res = 0\n    while l < len_s and r < len_t:\n        if S[l] == t[r]:\n            l += 1\n            r += 1\n        else:\n            if r > l:\n                res = max(res, r-l)\n            r += 1\n    if l < len_s:\n        res = max(res, r-l)\n    return res\n"
    },
    {
        "number": 4041,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Your solution goes here\n    \"\"\"\n    s = stdin\n    t = stdin\n    res = 0\n    i = 0\n    n = len(s)\n    while n - i > 0 and i < n:\n        if s[i] == t[0]:\n            k = 1\n            while k < n - i and t[k] == s[i + k]:\n                k += 1\n            if k > res:\n                res = k\n        i += 1\n    return res\n"
    },
    {
        "number": 4041,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # solution1(stdin)\n    s = stdin.strip()\n    t = stdin.strip()\n    # print(s, t)\n    n = len(s)\n    m = len(t)\n    # print(n, m)\n    l = 0\n    r = m - 1\n    t_len = len(t)\n    s_len = len(s)\n    # print(n, m)\n    count = 0\n    while l <= r:\n        # print(t[l:r+1], s[l:r+1])\n        if t_len <= l or s_len <= r:\n            # print(l, r)\n            # print(t[l:r+1], s[l:r+1])\n            # print(t_len, s_len)\n            if t_len == s_len:\n                count = max(count, (r + 1) - l)\n                break\n            if t_len < s_len:\n                count = max(count, r + 1)\n                break\n        if t[l] == s[r]:\n            r -= 1\n        else:\n            if t[l] == s[l]:\n                l += 1\n            else:\n                l += 1\n                r -= 1\n    return count\n"
    },
    {
        "number": 4041,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    size = len(stdin)\n    substring = \"\"\n    for index in range(0, size):\n        substring = stdin[index] + substring\n        if index == size-1:\n            print(len(substring))\n    return len(substring)\n"
    },
    {
        "number": 4041,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    length = len(stdin)\n    while length > 1:\n        index = stdin.rfind('b')\n        if index > -1:\n            stdin = stdin[:index] + stdin[index + 1:]\n            length -= 1\n        else:\n            index = stdin.rfind('a')\n            if index > -1:\n                stdin = stdin[:index] + stdin[index + 1:]\n                length -= 1\n    return str(len(stdin))\n"
    },
    {
        "number": 4041,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n\n    i = 0\n    while i <= len(s)-1:\n        j = i+1\n        while j <= len(s):\n            if s[i:j] in s[i:]:\n                j += 1\n            else:\n                break\n        if i!= j:\n            return str(j - i)\n        i += 1\n    return str(0)\n"
    },
    {
        "number": 4042,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    stdin: the input string\n    \"\"\"\n    stdin = stdin.strip()\n    x = float(stdin)\n    return str(max(1, int(x))) + \" \" + str(min(10, int(x)))\n"
    },
    {
        "number": 4042,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x = float(stdin)\n    A = (x + 1) * (x + 2) * (x + 3) * (x + 4) * (x + 5) * (x + 6) / 6\n    B = (x + 1) * (x + 2) * (x + 3) * (x + 4) * (x + 5) * (x + 6)\n    return \"%d %d\" % (A, B)\n\ndef"
    },
    {
        "number": 4042,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    def test_k(k):\n        p = math.pi\n        return math.sqrt((1/2)*math.pow(p, k)*math.pow((1-p), k))\n\n    def test_x(x):\n        x = str(x)\n        return sum([int(i) for i in x])\n    \n    num = stdin.split()\n    if len(num) > 1:\n        num = num[0]\n    print(test_x(test_k(int(num))))\n    print(test_k(int(num)))\n    \n"
    },
    {
        "number": 4042,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    for line in stdin.splitlines():\n        x = float(line)\n        x = str(x)\n        x = x[:6]\n        x = float(x)\n        if x % 1 == 0:\n            x = int(x)\n        else:\n            x = int(x) + 1\n        if x > 5:\n            return str(x) +'' + str(x)\n        elif x > 3:\n            return str(x) +'' + str(x - 1)\n        elif x > 1:\n            return str(x) +'' + str(x - 2)\n        elif x == 1:\n            return str(x) +'' + str(x)\n        else:\n            return '0'\n"
    },
    {
        "number": 4042,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x = float(stdin)\n    candidates = []\n    for i in range(1, 10):\n        candidates.append(i)\n        candidates.append(x * i)\n        candidates.append(i / x)\n        candidates.append(i * x)\n    candidates = list(set(candidates))\n    candidates.sort(key=float)\n    return \" \".join(map(str, candidates))\nprint(solution(input()))\n\nsolution = lambda x: \"{:.6f}\".format(x)\n\n\uc704\uc758 \ud568\uc218\ub294 \uc57d\uac04 \uc5b4\ub835\uac8c \ud480\uc5b4\ubcf4\uae30\ub85c \ud588\uc9c0\ub9cc\n\uc774\ubc88 \ubb38\uc81c\ub294 \uc815\uc218\ub85c \ud45c\ud604\ud558\uae30 \uc704\ud574\nmap\uc744 \uc0ac\uc6a9\ud574\uc57c \ud558\ub294 \ubb38\uc81c\uc774\ub2e4.\n\n\ubb38\uc81c\uc758 \ud575\uc2ec\uc740\n\n\uc815\uc218\ub97c \uc774\ub8e8\ub294 \uc218\ub97c \ub2e4 \ub9cc\ub4e4\uc5b4 \uc8fc\ub294 \ud568\uc218\n\ndef"
    },
    {
        "number": 4042,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    x = float(stdin[0])\n    a = 0\n    b = 1\n    count = 1\n    if x < 0:\n        a = -a\n    while a < b:\n        c = a + b\n        if c == x:\n            return str(a) +'' + str(b)\n        elif c < x:\n            a = b\n            b = c\n        else:\n            b = a\n            a = c\n    return str(a) +'' + str(b)"
    },
    {
        "number": 4042,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x = float(stdin)\n    ans1 = x * x * x * x * x * x / 6\n    ans2 = x * x * x * x * x / 2\n    ans3 = x * x * x / 3\n    ans4 = x * x / 4\n    ans5 = x * x / 5\n    return str(min(ans1, ans2, ans3, ans4, ans5)) + \" \" + str(max(ans1, ans2, ans3, ans4, ans5))\n\nprint(solution(input()))\n\n\nInput\n3.22\nOutput\n4 3\n\nInput\n6.24\nOutput\n9 9\n\nInput\n4.0\nOutput\n4 4\n"
    },
    {
        "number": 4042,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def is_prime(n: int) -> bool:\n        \"\"\"\n        Returns true if a number is prime.\n        \"\"\"\n        if n == 2 or n == 3:\n            return True\n        if n % 2 == 0 or n <= 1:\n            return False\n        for i in range(3, int(math.sqrt(n)) + 1, 2):\n            if n % i == 0:\n                return False\n        return True\n\n    def get_next(p: int) -> int:\n        \"\"\"\n        Returns the next prime number after p.\n        \"\"\"\n        p += 1\n        while not is_prime(p):\n            p += 1\n        return p\n\n    max_prime_limit = 10\n    answer = []\n    i, j = 0, 0\n    while i < max_prime_limit:\n        max_prime = get_next(i)\n        min_prime = get_next(j)\n        for x in range(min_prime, max_prime + 1):\n            if x == i or x == j:\n                continue\n            if is_prime(x) and x!= max_prime:\n                continue\n            answer.append(str(x))\n        i = max_prime\n        j = max_prime\n    return''.join(answer)"
    },
    {
        "number": 4042,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    print(n)\n    if n < 3:\n        return str(1)\n    if n == 3:\n        return str(2)\n    if n == 4:\n        return str(3)\n    if n == 5:\n        return str(4)\n    if n == 6:\n        return str(5)\n    if n == 7:\n        return str(6)\n    if n == 8:\n        return str(7)\n    if n == 9:\n        return str(8)\n    if n == 10:\n        return str(9)\n    if n == 11:\n        return str(10)\n    if n == 12:\n        return str(11)\n    if n == 13:\n        return str(12)\n    if n == 14:\n        return str(13)\n    if n == 15:\n        return str(14)\n    if n == 16:\n        return str(15)\n    if n == 17:\n        return str(16)\n    if n == 18:\n        return str(17)\n    if n == 19:\n        return str(18)\n    if n == 20:\n        return str(19)\n    if n == 21:\n        return str(20)\n    if n == 22:\n        return str(21)\n    if n == 23:\n        return str(22)\n    if n == 24:\n        return str(23)\n    if n == 25:\n        return str(24)\n    if n == 26:\n        return str(25)\n    if n == 27:\n        return str(26)\n    if n == 28:\n        return str(27)\n    if n == 29:\n        return str(28)\n    if n == 30:\n        return str(29)\n    if n == 31:\n        return str(30)\n    if n == 32:\n        return str(31)\n    if n == 33:\n        return str(32)\n    if n == 34:\n        return str(33)\n    if n == 35:\n        return str(34)\n    if n == 36:\n        return str(35)\n    if n == 37:\n        return str(36)\n    if n == 38:\n        return str(37)\n    if n == 39:\n        return str(38)\n    if n == 40:\n        return str(39)\n    if n == 41:\n        return str(40)\n    if n == 42:\n        return str(41)\n    if n == 43:\n        return str(42)\n    if n == 44:\n        return str(43)\n    if n == 45:\n        return str(44)\n    if n == 46:\n        return str(45)\n    if n == 47:\n        return str(46)\n    if n == 48:\n        return str(47)\n    if n == 49:\n        return str(48)\n    if n == 50:\n        return str(49)\n    if n == 51:\n        return str(50)\n    if n == 52:\n        return str(51)\n    if n == 53:\n        return str(52)\n    if n == 54:\n        return str(53)\n    if n == 55:\n        return str(54)\n    if n == 56:\n        return str(55)\n    if n == 57:\n        return str(56)\n    if n == 58:\n        return str(57)\n    if n == 59:\n        return str(58)\n    if n == 60:\n        return str(59)\n    if n == 61:\n        return str(60)\n    if n == 62:\n        return str(61)\n    if n == 63:\n        return str(62)\n    if n == 64:\n        return str(63)\n    if n == 65:\n        return str(64)\n    if n == 66:\n        return str(65)\n    if n == 67:\n        return str(66)\n    if n == 68:\n        return str(67)\n    if n == 69:\n        return str(68)\n    if n == 70:\n        return str(69)\n    if n == 71:\n        return str(70)\n    if n == 72:\n        return str(71)\n    if n == 73:\n        return str(72)\n    if n == 74:\n        return str(73)\n    if n == 75:\n        return str(74)\n    if n == 76:\n        return str(75)\n    if n == 77:\n        return str(76)\n    if n == 78:\n        return str(77)\n    if n == 79:\n        return str(78)\n    if n == 80:\n        return str(79)\n    if n == 81:\n        return str(80)\n    if n == 82:\n        return str(81)\n    if n == 83:\n        return str(82)\n    if n == 84:\n        return str(83)\n    if n == 85:\n        return str(84)\n    if n == 86:\n        return str(85)\n    if n == 87:\n        return str(86)\n    if n == 88:\n        return str(87)\n    if n == 89:\n        return str(88)\n    if n == 90:\n        return str(89)\n    if n == 91:\n        return str(90)\n    if n == 92:\n        return str(91)\n    if n == 93:\n        return str(92)\n    if n == 94:\n        return str(93)\n    if n == 95:\n        return str(94)\n    if n == 96:\n        return str(95)\n    if n == 97:\n        return str(96)\n    if n == 98:\n        return str(97)\n    if n == 99:\n        return str(98)\n    if n == 100:\n        return str(99)\n    if n == 101:\n        return str(100)\n    if n == 102:\n        return str(101)\n    if n == 103:\n        return str(102)\n    if n == 104:\n        return str(103)\n    if n == 105:\n        return str(104)\n    if n == 106:\n        return str(105)\n    if n == 107:\n        return str(106)\n    if n == 108:\n        return str(107)\n    if n == 109:\n        return str(108)\n    if n == 110:\n        return str(109)\n    if n == 111:\n        return str(110)\n    if n == 112:\n        return str(111)\n    if n == 113:\n        return str(112)\n    if n == 114:\n        return str(113)\n    if n == 115:\n        return str(114)\n    if n == 116:\n        return str(115)\n    if n == 117:\n        return str(116)\n    if n == 118:\n        return str(117)\n    if n == 119:\n        return str(118)\n    if n == 120:\n        return str(119)\n    if n == 121:\n        return str(120)\n    if n == 122:\n        return str(121)\n    if n == 123:\n        return str(122)\n    if n == 124:\n        return str(123)\n    if n == 125:\n        return str(124)\n    if n == 126:\n        return str(125)\n    if n == 127:\n        return str(126)\n    if n == 128:\n        return str(127)\n    if n == 129:\n        return str(128)\n    if n == 130:\n        return str(129)\n    if n == 131:\n        return str(130)\n    if n == 132:\n        return str(131)\n    if n == 133:\n        return str(132)\n    if n == 134:\n        return str(133)\n    if n == 135:\n        return str(134)\n    if n == 136:\n        return str(135)\n    "
    },
    {
        "number": 4042,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 4:\n        return '1 2'\n    else:\n        A = 2\n        B = 1\n        while n >= 2:\n            A, B = 2 * A, 1 * A + 1 * B\n            n -= 1\n        return '{} {}'.format(A, B)\n"
    },
    {
        "number": 4043,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = [int(x) for x in stdin.split()]\n    if n - 1 < d or k > n * (n - 1) / 2 or n < 1 or d < 1 or k < 1:\n        return 'NO'\n    answers = []\n    edges = {i: [] for i in range(n)}\n    for _ in range(n):\n        u, v = [int(x) for x in input().split()]\n        edges[u - 1].append(v - 1)\n        edges[v - 1].append(u - 1)\n    for i in range(n):\n        degree = len(edges[i])\n        if degree > k:\n            return 'NO'\n        if n - degree < d:\n            return 'NO'\n        if n - degree < d and n - degree - d < k:\n            return 'NO'\n    if n - degree - d - k < k:\n        return 'NO'\n    for i in range(n):\n        if len(edges[i]) >= d:\n            answers.append(str(i + 1))\n    return 'YES\\n' + '\\n'.join(answers)\n"
    },
    {
        "number": 4043,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = map(int, stdin.split())\n    if n == 1:\n        return \"NO\"\n    for i in range(1, n + 1):\n        if i == n:\n            if d > k:\n                return \"NO\"\n            return \"YES\"\n        if d > k:\n            return \"NO\"\n    for i in range(1, n):\n        for j in range(1, n):\n            if i!= j:\n                if j - i < d or (d - (j - i) < k and j - i!= 0):\n                    return \"NO\"\n                elif (d - (j - i) == k) and j > i:\n                    return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 4043,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = list(map(int, stdin.strip().split()))\n\n    if n - 1 < d:\n        print(\"NO\")\n        return\n\n    if k < 1 or k > 4 * 10 ** 5:\n        print(\"NO\")\n        return\n\n    def find_parent(parent, x):\n        if parent[x]!= x:\n            parent[x] = find_parent(parent, parent[x])\n        return parent[x]\n\n    def union(parent, a, b):\n        a = find_parent(parent, a)\n        b = find_parent(parent, b)\n        if a < b:\n            parent[b] = a\n        else:\n            parent[a] = b\n\n    parent = [i for i in range(n)]\n\n    for _ in range(d):\n        u, v = list(map(int, stdin.strip().split()))\n        u -= 1\n        v -= 1\n        if find_parent(parent, u) == find_parent(parent, v):\n            union(parent, u, v)\n        else:\n            print(\"NO\")\n            return\n    for i in range(1, n):\n        print(i, find_parent(parent, i))\n    return\n"
    },
    {
        "number": 4043,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = map(int, stdin.split())\n    graph = defaultdict(set)\n    for i in range(1, n+1):\n        graph[i] = set()\n    for _ in range(n-1):\n        u, v = map(int, input().split())\n        graph[u].add(v)\n        graph[v].add(u)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if len(graph[i]) + len(graph[j]) > d:\n                return \"NO\"\n    for _ in range(n):\n        ans = \"\"\n        for i in range(1, n+1):\n            if i in graph:\n                ans += str(i)\n                ans += \" \"\n                ans += str(len(graph[i]))\n        ans = ans[:-1]\n        print(ans)\n    return \"YES\"\n"
    },
    {
        "number": 4043,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = map(int, stdin.split())\n\n    if n - 1 < d or k > (n - 1) * (n - 2) // 2:\n        return \"NO\"\n\n    parents = [i for i in range(n)]\n    costs = [i for i in range(n)]\n    rank = [i for i in range(n)]\n\n    def find(x: int) -> int:\n        if parents[x]!= x:\n            parents[x] = find(parents[x])\n        return parents[x]\n\n    def union(x: int, y: int) -> None:\n        x_root = find(x)\n        y_root = find(y)\n        if rank[x_root] > rank[y_root]:\n            parents[y_root] = x_root\n        elif rank[x_root] < rank[y_root]:\n            parents[x_root] = y_root\n        else:\n            parents[y_root] = x_root\n            rank[x_root] += 1\n\n    def set_cost(x: int, y: int) -> None:\n        x_root = find(x)\n        y_root = find(y)\n        costs[x_root] = costs[y_root] = min(costs[x_root], costs[y_root])\n\n    for _ in range(n - 1):\n        u, v, w = map(int, stdin.split())\n        set_cost(u - 1, v - 1)\n        set_cost(v - 1, u - 1)\n\n    best_cost = min(costs)\n    return \"YES\" if best_cost == d else \"NO\"\n"
    },
    {
        "number": 4043,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = map(int, stdin.split())\n    if n - 1 < d + k:\n        return \"NO\"\n    if n - 1 < d + k + 1:\n        return \"NO\"\n    if n - 1 < d + k + 2:\n        return \"NO\"\n    if n - 1 < d + k + 3:\n        return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 4043,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = list(map(int, stdin.split()))\n    g = [[] for _ in range(n + 1)]\n    for _ in range(n - 1):\n        u, v = list(map(int, stdin.split()))\n        g[u].append(v)\n        g[v].append(u)\n    nums = [i for i in range(1, n + 1)]\n    ans = \"NO\"\n    while len(nums) > 0:\n        # Make a tree\n        g_temp = g.copy()\n        num = nums[0]\n        nums.remove(num)\n        for i in g[num]:\n            g_temp.remove(i)\n        if g_temp == []:\n            ans = \"YES\"\n            break\n        # find the last connected vertex\n        candidate = set()\n        candidate.add(num)\n        for i in g[num]:\n            if len(g[i]) == 1:\n                candidate.add(i)\n        if len(candidate) == 1:\n            # print(g[num], g[candidate[0]], num, candidate[0])\n            # print(num, candidate[0])\n            # print(g[num][0], g[candidate[0]][0])\n            # print(g[num][0])\n            break\n    # print(g, nums)\n    if ans == \"YES\":\n        ans += \" \"\n        ans += str(num)\n        ans += \" \"\n        ans += str(candidate[0])\n    return ans\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4043,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, d, k = list(map(int, stdin.split()))\n\n    if n - 1 <= d <= n * d and (n - 1) * k <= n:\n        def dfs(v):\n            if visited[v]:\n                return\n            visited[v] = True\n            print(v, end=\" \")\n            for adj in adj_list[v]:\n                dfs(adj)\n\n        visited = [False] * (n + 1)\n        adj_list = [[] for _ in range(n + 1)]\n        for _ in range(k):\n            u, v = map(int, input().split())\n            adj_list[u].append(v)\n            adj_list[v].append(u)\n        dfs(1)\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 4043,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('5 3 3\\n')\n    YES\n    3 1\n    4 1\n    1 6\n    5 2\n    6 7\n    3 7\n    2 9\n    2 10\n    10 3\n    3 1\n    6 10\n    8 2\n    4 3\n    5 6\n    6 7\n    '''\n    n, d, k = map(int, stdin.split())\n    if n < 2:\n        return 'NO'\n    if d > n - 1 or d < 1 or k > 4 * 10 ** 5 or k < 1 or n - 1 < k:\n        return 'NO'\n\n    edges = collections.defaultdict(set)\n    for i in range(1, n):\n        edges[i].add(i + 1)\n\n    #    if k == 1:\n    #        return 'YES'\n\n    #    # k >= 2\n    #    for i in range(k):\n    #        for j in range(k):\n    #            for x in edges[i]:\n    #                for y in edges[j]:\n    #                    if x not in edges[i] or y not in edges[j]:\n    #                        edges[i].add(x)\n    #                        edges[j].add(y)\n    #                        edges[i] = set(sorted(list(edges[i])))\n    #                        edges[j] = set(sorted(list(edges[j])))\n    #                        break\n    #            else:\n    #                continue\n    #            break\n\n    #    if i == 1:\n    #        return 'YES'\n\n    #    return 'NO'\n\n    result = []\n\n    def dfs(node: int, seen: set, parent: int) -> None:\n        seen.add(node)\n        for nxt in edges[node] - seen:\n            if nxt == parent:\n                continue\n            if dfs(nxt, seen, node) or dfs(nxt, seen, node):\n                result.append(str(node) +'' + str(nxt))\n        return True\n\n    for i in range(n):\n        dfs(i + 1, set(), i + 1)\n\n    print('YES')\n    for item in sorted(result):\n        print(item)\n\n    return 'YES'\n"
    },
    {
        "number": 4043,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def get_degree(node: int) -> int:\n        degree = 0\n        for neigh in edges[node]:\n            degree += 1\n        return degree\n\n    n, d, k = list(map(int, stdin.split()))\n    edges = [[] for _ in range(n)]\n    for _ in range(k):\n        u, v = list(map(int, stdin.split()))\n        u -= 1\n        v -= 1\n        edges[u].append(v)\n        edges[v].append(u)\n    \n    if any(get_degree(node) > d for node in range(n)):\n        return \"NO\"\n\n    def get_max_degree(node: int) -> int:\n        max_deg = 0\n        for neigh in edges[node]:\n            max_deg = max(max_deg, get_degree(neigh))\n        return max_deg\n\n    def get_diameter() -> int:\n        diameter = 0\n        for node in range(n):\n            neighbor_degrees = [get_degree(neigh) for neigh in edges[node]]\n            if neighbor_degrees[-1] == d:\n                max_deg = get_max_degree(node)\n                diameter = max(diameter, max_deg + 1)\n        return diameter\n\n    if get_diameter() == n:\n        print(\"YES\")\n        for line in range(n):\n            print(\" \".join(map(str, edges[line])))\n        return\n\n    return \"NO\"\n"
    },
    {
        "number": 4044,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    return \"\".join([\"1\" if i < x else \"0\" for i in range(a + b)])\n"
    },
    {
        "number": 4044,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n\n    s = \"\"\n    for i in range(a + b):\n        if i < a:\n            s += \"0\"\n        elif i < a + b:\n            s += \"1\"\n        else:\n            s += \"0\"\n\n    s = bin(int(s, 2))[2:]\n    s = s.zfill(a + b)\n    for i in range(1, a + b - x):\n        s = s[:i] + \"0\" + s[i:]\n\n    return s"
    },
    {
        "number": 4044,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = list(map(int, stdin.split()))\n    s = (b * '0') + (x * '1') + (a * '0')\n    print(s)\n    return s"
    },
    {
        "number": 4044,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    if a == 1:\n        return '1'\n    if x == b:\n        return '0' * (a + b)\n    if x == a - 1:\n        return '0' * a + '1'\n    return '1' * a + '0' * (b - a)\n"
    },
    {
        "number": 4044,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a, b, x = stdin.split(' ')\n    # print(a, b, x)\n    \n    # if a == 0 or b == 0 or x == 0:\n    #     return None\n    \n    b = int(b)\n    x = int(x)\n    \n    if x >= a + b:\n        return None\n    \n    if x > b:\n        b = x\n    \n    z = [0]*n\n    for i in range(n):\n        if i == 0 or i == 1:\n            z[i] = x\n        else:\n            if x - z[i-1] >= 1:\n                z[i] = z[i-1] + 1\n            else:\n                z[i] = x\n    return ''.join(str(i) for i in z)\n"
    },
    {
        "number": 4044,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n\n    def gen(a, b, x):\n        s = ''\n        for i in range(a + b):\n            if i == 0 or i == a:\n                s += '1'\n            else:\n                s += '0'\n            if i % x == 0:\n                s += '1'\n            else:\n                s += '0'\n        return s\n\n    for i in range(a + b - 1):\n        if a >= i and b >= i:\n            continue\n        if i > a:\n            if x > i:\n                continue\n            else:\n                i = a\n        if i > b:\n            if x > i:\n                continue\n            else:\n                i = b\n        if i >= x:\n            i = x\n        s = gen(a, b, i)\n        print(s)\n        break\n"
    },
    {
        "number": 4044,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\n'''\n\n\n\na,b,x = map(int, input().split())"
    },
    {
        "number": 4044,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4044,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\na,b,x=map(int,stdin.split())\nprint((a+b)*'0'+(x+1)*'1')\n"
    },
    {
        "number": 4044,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    n = a + b\n    s = ''.join(str(x) for x in range(n))\n    result = []\n    for i in range(n):\n        if s[i]!= '0' and s[i + 1]!= '0':\n            result.append(i)\n    return ''.join(str(x) for x in result)\n"
    },
    {
        "number": 4045,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 1 or n > 10:\n        return 'NO'\n    a = stdin.strip().split()\n    s = stdin.strip().split()[1]\n    t = stdin.strip().split()[2]\n    res = ''\n    n_a = 3 * (n - 1)\n    if n == 1:\n        return 'YES'\n    if len(a) == 3 and len(s) <= len(t):\n        if s[0] == a[0] or s[-1] == a[1] or t[0] == a[2]:\n            res += a[0] * n_a + a[1] * n_a + a[2] * n_a\n        else:\n            return 'NO'\n    elif len(a) == 3 and len(s) > len(t):\n        if s[0] == a[1] or s[-1] == a[2] or t[0] == a[0]:\n            res += a[0] * n_a + a[1] * n_a + a[2] * n_a\n        else:\n            return 'NO'\n    else:\n        return 'NO'\n    return res\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4045,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4045,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = stdin\n    res = \"\"\n    if a!= b or a!= c or b!= c:\n        return \"NO\"\n    n = int(a)\n    for i in range(n, 0, -1):\n        if a * i in res or b * i in res or c * i in res:\n            return \"NO\"\n        res += a * i\n    return res\n"
    },
    {
        "number": 4045,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()[1]\n    t = stdin.split()[2]\n    if s[0]!= t[0] or s[1]!= t[1]:\n        return \"NO\"\n    else:\n        res = s\n        for i in range(len(s)):\n            if i + 3 > len(s):\n                break\n            for j in range(len(s)):\n                if j + 3 > len(s):\n                    break\n                res += s[i:i+3]\n                res += t[j:j+3]\n            if s[i:i+3] == t[j:j+3]:\n                return \"YES\"\n    return \"YES\"\n"
    },
    {
        "number": 4045,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    t = stdin\n    if n == 1:\n        return \"NO\"\n    if n == 2:\n        if s == t:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 3:\n        for i in range(n):\n            s = list(s)\n            t = list(t)\n            for j in range(n):\n                if s[j] == t[j]:\n                    del s[j]\n                    del t[j]\n                elif s[j] == \"c\":\n                    del s[j]\n                    del t[j]\n                    break\n            if s == t:\n                return \"YES\"\n        return \"NO\"\n"
    },
    {
        "number": 4045,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a, b, c = stdin.strip().split()\n    length = int(math.ceil(3 * n / 2))\n    arr = ['a', 'b', 'c']\n    res = ''\n    while len(res) < length:\n        res += a\n        if res[-3:]!= a:\n            break\n        if a in arr:\n            arr.remove(a)\n        res = res[:-1]\n        a = arr[0]\n    if len(res)!= length:\n        return 'NO'\n    res += b\n    if res[-3:]!= b:\n        return 'NO'\n    if b in arr:\n        arr.remove(b)\n    res = res[:-1]\n    b = arr[0]\n    res += c\n    if res[-3:]!= c:\n        return 'NO'\n    if c in arr:\n        arr.remove(c)\n    res = res[:-1]\n    c = arr[0]\n    res += a + b + c\n    return res\n\nsolution('5\\naa\\nbc\\n')\n\"\"\""
    },
    {
        "number": 4045,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"NO\"\n    s = stdin.split()[1]\n    t = stdin.split()[2]\n    s_chars = set(s)\n    t_chars = set(t)\n    if len(s_chars.intersection(t_chars)) > 0:\n        return \"NO\"\n    for i in range(2**n):\n        res = \"\"\n        for j in range(n):\n            if i & (1 << j):\n                res += s[j]\n            else:\n                res += t[j]\n        if len(res) == 3*n:\n            print(\"YES\")\n            return res\n    print(\"NO\")\n    return res\n"
    },
    {
        "number": 4045,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split('\\n')[1]\n    t = stdin.split('\\n')[2]\n\n    if s.count('a') + t.count('a') + s.count('c') + t.count('c') + s.count('b') + t.count('b') < 4:\n        return 'NO'\n\n    count = 0\n    for i in range(len(s)):\n        if s[i] == 'a':\n            count += 1\n        if s[i] == 'b':\n            count += 1\n        if s[i] == 'c':\n            count += 1\n\n    for i in range(len(t)):\n        if t[i] == 'a':\n            count += 1\n        if t[i] == 'b':\n            count += 1\n        if t[i] == 'c':\n            count += 1\n\n    if s[0] == t[0]:\n        count += 1\n\n    if s[-1] == t[-1]:\n        count += 1\n\n    if count == len(s) + len(t):\n        return 'YES'\n\n    return 'NO'\n"
    },
    {
        "number": 4045,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    strings = stdin.splitlines()\n    a = strings[0]\n    b = strings[1]\n    c = strings[2]\n\n    # Check if the strings are valid\n    if len(a)!= len(b) or len(a)!= len(c) or len(b)!= len(c):\n        return \"NO\"\n    if a == b and a == c:\n        return \"NO\"\n    if (a == b and a == c) or (b == a and b == c) or (c == a and c == b):\n        return \"NO\"\n\n    res = \"\"\n\n    for i in range(1, len(a), 2):\n        res += a[i] + b[i] + c[i]\n        for j in range(1, len(a), 2):\n            res += a[i + j] + b[i + j] + c[i + j]\n    return res\n"
    },
    {
        "number": 4045,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    l = len(stdin.strip().split('\\n')[0])\n    for i in range(3,l+1):\n        if l%i!= 0:\n            continue\n        for j in range(1,l//i+1):\n            string = stdin.strip().split('\\n')[0]\n            t = stdin.strip().split('\\n')[1]\n            string = list(string)\n            t = list(t)\n            if string.count('a') < j or string.count('b') < j or string.count('c') < j:\n                continue\n            if t.count('a') < j or t.count('b') < j or t.count('c') < j:\n                continue\n            if 'a'*j in string or 'b'*j in string or 'c'*j in string or 'a'*j in t or 'b'*j in t or 'c'*j in t:\n                continue\n            return 'YES'+'\\n'+''.join(string[:j]*3)+'\\n'+''.join(string[j:])\n    return 'NO'\n"
    },
    {
        "number": 4046,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *q = map(int, stdin.split())\n    if n == 1:\n        return '-1'\n    l = len(q)\n    if l == n:\n        if q == list(range(1, n+1)):\n            return ''.join(map(str, range(1, n+1)))\n    else:\n        return ''.join(map(str, q))"
    },
    {
        "number": 4046,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4046,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Build and return a permutation.\n    \"\"\"\n    return \"1\"\n"
    },
    {
        "number": 4046,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    arr = stdin.splitlines()\n    n = int(arr[0])\n    q = list(map(int, arr[1].split()))\n    # if not q:\n    #     return \"0\"\n    if n == len(set(q)):\n        return \"1\"\n    else:\n        return \"\".join(str(i) for i in range(1, n+1))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4046,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    q = list(map(int, stdin.split()[1]))\n    # q = stdin.split()[1]\n    q.sort()\n    if n == len(q):\n        return \" \".join(map(str, q))\n    return \" \".join(map(str, [-1]))\n"
    },
    {
        "number": 4046,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    q = stdin.strip().split()\n    if len(q) == n:\n        q = map(int, q)\n        if is_permutation(q, n):\n            return \" \".join(map(str, q))\n    q = list(q)\n    q.sort()\n    if is_permutation(q, n):\n        return \" \".join(map(str, q))\n    else:\n        return \"-1\"\n\n\ndef"
    },
    {
        "number": 4046,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    for x in range(1, a+1):\n        for y in range(x+1, a+2):\n            if not (x <= b < y):\n                if a % 2 == 0 and (x + y + 2) % 2 == 0:\n                    print(\"%d %d %d\" % (x, y, (a-x+1)//2))\n                    return\n                elif (x + y + 2) % 2 == 0:\n                    print(\"%d %d %d\" % (x, y, (a-x+1)//2))\n                    return\n    print(\"-1\")\n    return"
    },
    {
        "number": 4046,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    arr = stdin.split()\n    arr = list(map(int, arr))\n    for i in range(len(arr)-1):\n        for j in range(len(arr)-i-1):\n            if arr[j+1] - arr[j]!= 1:\n                break\n        else:\n            return''.join(map(str, arr))\n    return '-1'\n"
    },
    {
        "number": 4046,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    d = {i: i+1 for i in range(1, n)}\n    arr = list(d.keys())\n    q = sorted(arr)\n    for i, a in enumerate(q):\n        if q[i] - a!= 1:\n            return str(-1)\n    return \" \".join([str(q.index(i)) for i in arr])"
    },
    {
        "number": 4046,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    q = list(map(int, stdin.split()))\n    p = []\n    q_dict = {}\n    for i in range(n):\n        if q[i] not in q_dict:\n            p.append(i+1)\n            q_dict[q[i]] = i + 1\n        else:\n            p.remove(q_dict[q[i]])\n            q_dict[q[i]] = i + 1\n            q.remove(q[i])\n            if len(q) == 0:\n                break\n    if len(p) == 0:\n        return '-1'\n    else:\n        p.sort()\n        print(*p, sep=' ')\n        return p[0]\n"
    },
    {
        "number": 4047,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def move_up(x):\n        return x - 2\n    def move_down(x):\n        return x + 2\n    \n    tot_coins = 0\n    n = int(stdin.strip())\n    x_coords = list(map(int, stdin.strip().split()))\n    x_coords.sort()\n    \n    for i in range(n):\n        if i == 0:\n            tot_coins += move_down(x_coords[i])\n        else:\n            tot_coins += move_up(x_coords[i])\n    return str(tot_coins)"
    },
    {
        "number": 4047,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    cnt = 0\n    for num in map(int, stdin.split()):\n        cnt += abs(num)\n    return str(cnt)\n"
    },
    {
        "number": 4047,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    x = list(map(int, stdin.split()))\n    if N == 1:\n        return 0\n    x.sort()\n    min_coins = 0\n    prev = 0\n    for i in x:\n        if i - prev == 2:\n            min_coins += prev + 1\n            prev = i\n        elif i - prev == 1:\n            min_coins += prev + 1\n            prev = i\n    return min_coins\n"
    },
    {
        "number": 4047,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    cords = list(map(int, stdin.split()))\n    \n    distinct_cords = set(cords)\n    \n    min_coins = float('inf')\n    \n    for i in distinct_cords:\n        cnt = 0\n        for j in range(1, len(cords)):\n            if i == cords[j]:\n                continue\n            elif i - j == cords[j] - j or i + j == cords[j] + j:\n                cnt += 1\n            \n            if cnt == 0:\n                continue\n                \n        min_coins = min(min_coins, cnt)\n    return str(min_coins)"
    },
    {
        "number": 4047,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    from sys import stdout\n    n = int(stdin)\n    n_chips = [int(i) for i in stdin.split(\" \")]\n    all_equal = all(x==n_chips[0] for x in n_chips)\n    if all_equal:\n        return str(1)\n    \n    left = min(n_chips) - 1\n    right = max(n_chips) + 1\n    min_coins = float(\"inf\")\n    while left < right:\n        mid = (left + right)//2\n        count = 0\n        for chip in n_chips:\n            if chip < mid:\n                count += 1\n        if count == n:\n            min_coins = min(min_coins, mid)\n        if count < n:\n            right = mid\n        else:\n            left = mid + 1\n    return str(min_coins)\n"
    },
    {
        "number": 4047,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    nums = [int(x) for x in stdin.split()]\n    dist = {}\n    for i in range(1, n):\n        dist[i] = abs(nums[i - 1] - nums[i])\n    dist_s = sorted(dist.items(), key=lambda x: x[1])\n    ans = 0\n    for i in dist_s:\n        ans += i[1]\n    return str(ans)\n\nsolution(\"3 2 2 2 3 3\")\n"
    },
    {
        "number": 4047,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n  num_of_chips = int(stdin)\n  x_coordinates = list(map(lambda x: int(x), stdin.split()))\n  n = len(x_coordinates)\n  ans = 0\n  while n!= 0:\n    for i in range(n):\n      if (i + 1) < n:\n        if abs(x_coordinates[i] - x_coordinates[i + 1]) == 1:\n          ans += 2\n          x_coordinates[i], x_coordinates[i + 1] = x_coordinates[i + 1], x_coordinates[i]\n        else:\n          if abs(x_coordinates[i] - x_coordinates[i + 1]) == 2:\n            ans += 1\n            x_coordinates[i], x_coordinates[i + 1] = x_coordinates[i + 1], x_coordinates[i]\n      else:\n        if abs(x_coordinates[i] - x_coordinates[i - 1]) == 1:\n          ans += 2\n          x_coordinates[i], x_coordinates[i - 1] = x_coordinates[i - 1], x_coordinates[i]\n        else:\n          if abs(x_coordinates[i] - x_coordinates[i - 1]) == 2:\n            ans += 1\n            x_coordinates[i], x_coordinates[i - 1] = x_coordinates[i - 1], x_coordinates[i]\n    n = len(x_coordinates)\n  print(ans)\n  return ans"
    },
    {
        "number": 4047,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    n = int(stdin.pop(0))\n    coords = sorted(map(int, stdin.pop(0).split()))\n    l, r = coords[0], coords[-1]\n    cnt = 0\n    for i in range(1, n):\n        if (coords[i - 1] - coords[i]) == 2:\n            cnt += 2\n        else:\n            cnt += 1\n    return str(cnt)\n"
    },
    {
        "number": 4047,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    [n] = stdin.split()\n    n = int(n)\n    x = sorted(map(int, stdin.split()))\n\n    ans = 0\n    x_last = x[0]\n    for x_curr in x:\n        ans += abs(x_curr - x_last)\n        x_last = x_curr\n    return str(ans)\n"
    },
    {
        "number": 4047,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    import sys\n    lines = list(map(int, stdin.split()))\n    n = lines[0]\n    coins = list(map(int, stdin.split()))\n    x = {}\n    for i in range(n):\n        x[i] = coins[i]\n    x = sorted(x.items(), key=lambda x: x[1], reverse=True)\n    n = len(x)\n    cur_max = x[0][1]\n    cur_max_sum = 0\n    for i in range(1, n):\n        if cur_max <= x[i][1]:\n            cur_max_sum += cur_max\n            cur_max = x[i][1]\n        else:\n            cur_max_sum += x[i][1]\n    return str(cur_max_sum)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4048,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"N\""
    },
    {
        "number": 4048,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    moves = 0\n\n    while N > 1:\n        moves += 1\n        if N % 2 == 0:\n            N /= 2\n        else:\n            N -= 1\n\n    if N == 1:\n        return moves\n\n    return \"IMPOSSIBLE\"\n"
    },
    {
        "number": 4048,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"1\"\n    cnt = 2\n    while cnt * cnt < n:\n        cnt += 1\n    moves = cnt + 1\n    while n!= 1:\n        if n % 2 == 0:\n            n /= 2\n        else:\n            n = n*3 + 1\n        moves += 1\n    return str(moves)\n"
    },
    {
        "number": 4048,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n\n    for i in range(1, 101):\n        for j in range(1, 101):\n            if i * j == N:\n                return str(i) + \" \" + str(j)"
    },
    {
        "number": 4048,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = list(map(int, stdin.split(' ')))\n    n = stdin[0]\n    moves = 0\n    if n == 1:\n        return \"0\"\n    while n > 0:\n        if n % 2 == 1:\n            moves += 1\n        n = n // 2\n    return str(moves)\n"
    },
    {
        "number": 4048,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin\n\n    moves = 0\n\n    for i in range(2, int(n)):\n        for j in range(2, int(n)):\n            if i * j == int(n):\n                return moves\n\n        moves += 1\n        for k in range(2, i):\n            if i * k == int(n):\n                return moves\n\n        moves += 1\n\n    return moves\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4048,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    cur_row = 0\n    cur_col = 0\n    row = 1\n    col = 1\n    while True:\n        cur_row = row\n        cur_col = col\n        row += 1\n        if N == (cur_row * cur_col):\n            return \"%.0f\" % row\n        col += 1\n        if N == (cur_row * col):\n            return \"%.0f\" % col\n        if row * col > N:\n            row -= 1\n            col -= 1\n            continue\n        if N > row * col:\n            return \"%.0f\" % row\n        col -= 1\n        if N > row * col:\n            return \"%.0f\" % col"
    },
    {
        "number": 4048,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin\n    count = 0\n    for i in range(1, 9):\n        for j in range(1, 9):\n            if int(n) == i * j:\n                count += 5\n    return count\n"
    },
    {
        "number": 4048,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    moves = [[1, 1]]\n    while True:\n        if sum([row[-1] for row in moves]) >= n:\n            break\n        else:\n            last_move = moves[-1][-1]\n            if last_move == 1:\n                moves[-1][0] += 1\n            else:\n                moves[-1][1] += 1\n            moves.append([last_move + 1, 1])\n    return len(moves)\n"
    },
    {
        "number": 4048,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns a string.\"\"\"\n\n    n = int(stdin)\n\n    # constant\n    moves = 0\n\n    # go in every possible direction\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n\n            # checking if this square can be reached\n            if i + j == n:\n                return moves\n\n            # checking if this square can be reached\n            if i + j!= n + 1:\n                continue\n\n            # checking if this square can be reached\n            if i == j:\n                continue\n\n            # checking if this square can be reached\n            if i!= j and j == n:\n                continue\n\n            # adding one move\n            moves += 1\n\n    # checking if this square can be reached\n    if n == 1:\n        return moves\n\n    # checking if this square can be reached\n    if n == 2:\n        return moves + 1\n\n    # checking if this square can be reached\n    if n == 3:\n        return moves + 2\n\n    # checking if this square can be reached\n    if n == 4:\n        return moves + 3\n\n    # checking if this square can be reached\n    if n == 5:\n        return moves + 4\n\n    return moves + 5\n"
    },
    {
        "number": 4049,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a1, a2, a3 = stdin.split()\n    n = int(n)\n    a1 = int(a1)\n    a2 = int(a2)\n    a3 = int(a3)\n    b1 = int(stdin.split()[2])\n    b2 = int(stdin.split()[3])\n    b3 = int(stdin.split()[4])\n\n    alice = 0\n    bob = 0\n\n    if a1 > a3:\n        alice = a1\n    else:\n        alice = a3\n\n    if b1 > b3:\n        bob = b1\n    else:\n        bob = b3\n\n    if alice < bob:\n        alice_win = alice\n        alice_rounds = alice + (alice - 1)\n    else:\n        alice_win = bob\n        alice_rounds = bob + (bob - 1)\n\n    if a2 > a3:\n        alice_win = alice\n    else:\n        alice_win = a3\n\n    if b2 > b3:\n        alice_win = alice\n    else:\n        alice_win = a3\n\n    if alice_win > n:\n        alice_win = n\n        alice_rounds = n\n\n    if alice_rounds > n:\n        alice_rounds = n\n\n    return str(alice_win) + \" \" + str(alice_rounds)\n"
    },
    {
        "number": 4049,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    n = int(stdin.split()[0])\n    # print(n)\n    alice = [int(stdin.split()[i]) for i in range(1, 4)]\n    # print(alice)\n    bob = [int(stdin.split()[i]) for i in range(4, 7)]\n    # print(bob)\n    alice_win = 0\n    bob_win = 0\n    while n:\n        if alice[0] == max(alice) and alice[1] == max(alice):\n            if alice[2] == max(alice):\n                alice_win += 1\n        if bob[0] == max(bob) and bob[1] == max(bob):\n            if bob[2] == max(bob):\n                bob_win += 1\n        n -= 1\n        alice = [alice[i - 1] for i in range(1, 4)]\n        bob = [bob[i - 1] for i in range(1, 4)]\n    return str(alice_win) +'' + str(bob_win)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4049,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    c = [(1, a[0]), (0, b[0])]\n    while a[1]!= b[1]:\n        c.append((0, a[0]))\n        c.append((1, a[0]))\n        c.append((1, a[0]))\n        a[0] += 1\n        b[0] += 1\n        if a[1] == b[1]:\n            a[0] -= 1\n            b[0] -= 1\n        if a[0] == n:\n            c.append((0, a[0]))\n        if b[0] == n:\n            c.append((1, a[0]))\n    return str(len(c)) +'' + str(min(x[0] for x in c) + 1) +'' + str(max(x[0] for x in c) + 1)\n"
    },
    {
        "number": 4049,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    b = list(map(int, stdin.split()[1:]))\n    a.sort()\n    b.sort()\n\n    a_min = a[0]\n    b_min = b[0]\n\n    for i in range(1, n):\n        if a[i] == a_min and b[i] == b_min:\n            continue\n        elif a[i] > a_min:\n            a_min = a[i]\n        elif b[i] > b_min:\n            b_min = b[i]\n\n    return str(a_min) + \" \" + str(b_min)\n"
    },
    {
        "number": 4049,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n\n    r = 0\n    for _ in range(n):\n        a1, a2, a3 = map(int, stdin.split())\n        r += min(a1, a2, a3)\n        r += max(a1, a2, a3)\n    return str(r)\n"
    },
    {
        "number": 4049,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip().split()[0])\n    a1 = int(stdin.strip().split()[1])\n    a2 = int(stdin.strip().split()[2])\n    a3 = int(stdin.strip().split()[3])\n    b1 = int(stdin.strip().split()[4])\n    b2 = int(stdin.strip().split()[5])\n    b3 = int(stdin.strip().split()[6])\n\n    a_dict = {}\n    b_dict = {}\n    for i in range(n):\n        if a1 in a_dict:\n            a_dict[a1] += 1\n        else:\n            a_dict[a1] = 1\n        if a2 in a_dict:\n            a_dict[a2] += 1\n        else:\n            a_dict[a2] = 1\n        if a3 in a_dict:\n            a_dict[a3] += 1\n        else:\n            a_dict[a3] = 1\n        if b1 in b_dict:\n            b_dict[b1] += 1\n        else:\n            b_dict[b1] = 1\n        if b2 in b_dict:\n            b_dict[b2] += 1\n        else:\n            b_dict[b2] = 1\n        if b3 in b_dict:\n            b_dict[b3] += 1\n        else:\n            b_dict[b3] = 1\n\n    # if (a1, a2, a3) in a_dict:\n    #     a_dict[a1] += 1\n    # else:\n    #     a_dict[a1] = 1\n    # if (a2, a3, a1) in a_dict:\n    #     a_dict[a2] += 1\n    # else:\n    #     a_dict[a2] = 1\n    # if (a3, a1, a2) in a_dict:\n    #     a_dict[a3] += 1\n    # else:\n    #     a_dict[a3] = 1\n    # if (b1, b2, b3) in b_dict:\n    #     b_dict[b1] += 1\n    # else:\n    #     b_dict[b1] = 1\n    # if (b2, b3, b1) in b_dict:\n    #     b_dict[b2] += 1\n    # else:\n    #     b_dict[b2] = 1\n    # if (b3, b1, b2) in b_dict:\n    #     b_dict[b3] += 1\n    # else:\n    #     b_dict[b3] = 1\n\n    for a_key in a_dict:\n        a_dict[a_key] = a_dict[a_key] * 2\n    for b_key in b_dict:\n        b_dict[b_key] = b_dict[b_key] * 2\n    print(min(a_dict[a1] + a_dict[a2] + a_dict[a3], b_dict[b1] + b_dict[b2] + b_dict[b3]))\n    return min(a_dict[a1] + a_dict[a2] + a_dict[a3], b_dict[b1] + b_dict[b2] + b_dict[b3])"
    },
    {
        "number": 4049,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip().split()[0])\n    a = list(map(int, stdin.strip().split()[1].split()))\n    b = list(map(int, stdin.strip().split()[2].split()))\n    result = max(min(a), min(b))\n    for i in range(n):\n        result = min(result, max(a) - max(b))\n    return str(result)\n\nsolution(input())\n"
    },
    {
        "number": 4049,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    alice = 0\n    bob = 0\n    for i in range(n):\n        if a[i] > b[i]:\n            alice += 1\n        elif a[i] < b[i]:\n            bob += 1\n        else:\n            alice += 0.5\n            bob += 0.5\n\n    return str(alice) + \" \" + str(bob)\n\nsolution(\"2 1 1\")\nsolution(\"15 5 5\")\nsolution(\"3 0 0\")\nsolution(\"686 0 0\")\nsolution(\"319 1 3\")\nsolution(\"10 53 256\")"
    },
    {
        "number": 4049,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    b = list(map(int, stdin.strip().split()))\n    a_2 = sorted(a)\n    b_2 = sorted(b)\n    min_a = 0\n    max_a = 0\n    min_b = 0\n    max_b = 0\n    for i in range(n):\n        if a_2[i]!= b_2[i]:\n            if a_2[i] == a_2[i+1]:\n                min_a = max(min_a, i + 1)\n            if b_2[i] == b_2[i+1]:\n                min_b = max(min_b, i + 1)\n            if a_2[i] == a_2[i+2]:\n                max_a = min(max_a, i + 2)\n            if b_2[i] == b_2[i+2]:\n                max_b = min(max_b, i + 2)\n    return str(min_a) +'' + str(max_a) +'' + str(min_b) +'' + str(max_b)\n"
    },
    {
        "number": 4049,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, a1, a2, a3, b1, b2, b3 = list(map(int, stdin.split()))\n    counts = a1 + a2 + a3, b1 + b2 + b3\n\n    if max(counts) == n:\n        return \"0 {}\".format(max(counts))\n\n    if min(counts) == 0:\n        return \"1 {}\".format(min(counts))\n\n    if counts[0] >= counts[1]:\n        return \"1 {}\".format(max(counts))\n\n    return \"0 {}\".format(min(counts))\n\nstdin = \"\"\"2\n0 1 1\n1 1 0\n\"\"\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4050,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    #print(n, a)\n    k = n+1\n    ans = []\n    ans2 = []\n    ans.append([i for i in range(n)])\n    ans2.append([i for i in range(n)])\n    \n    for i in range(n):\n        #print(\"i:\", i)\n        if i>0:\n            j = i-1\n            ans[0][i] = ans2[0][j]\n            ans2[0][i] = j\n            #print(ans)\n            #print(ans2)\n        #if i < n-1:\n            j = i+1\n            ans[0][i] = ans2[0][j]\n            ans2[0][i] = j\n            #print(ans)\n            #print(ans2)\n    #print(ans)\n    ans = ans[0][n-1]\n    #print(ans)\n    \n    for i in range(n):\n        if i<n-1:\n            ans2[0][i] = ans[i]\n            ans[i] = ans2[0][i]\n    \n    for i in range(1, k):\n        for j in range(n):\n            l = ans[j]\n            r = ans2[i][j]\n            ans[j] = ans2[i][r]\n            ans2[i][j] = l\n    #print(ans)\n    return str(ans[n-1])\n\nsolution(\"4 -5 -4 -3 -2 -1 0 1 2 3 4 5\")"
    },
    {
        "number": 4050,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    arr = stdin.splitlines()[1]\n    arr = list(map(int, arr))\n    k = 0\n    s = []\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if sum(arr[i:j+1]) == 0:\n                if j+1-i > k:\n                    k = j+1-i\n                    s.append(i)\n                    s.append(j)\n    return str(k) +'' + str(max(s))\n    "
    },
    {
        "number": 4050,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    i = 0\n    ans = None\n    while i < n:\n        s = sum(arr[i:i+i+1])\n        if ans is None or s!= ans:\n            ans = s\n            print(i, i+1)\n        i += i+1\n    return str(ans)\n"
    },
    {
        "number": 4050,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n\n    max_sum = max(a)\n    for i in range(1, n):\n        if max_sum == max(a[:i]) + max(a[i:i + 1]):\n            print(i)\n            for j in range(1, i + 1):\n                print(a[j - 1], end=' ')\n            print()\n            break\n    else:\n        print(i)\n        for j in range(1, n):\n            print(a[j - 1], end=' ')\n        print()\n"
    },
    {
        "number": 4050,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n  n = int(stdin.strip())\n  a = list(map(int, stdin.strip().split()))\n  a = sorted(a)\n  #n = len(a)\n  while n > 1:\n    if n == len(a):\n      return n\n    tmp = a[0]\n    a = a[1:]\n    a.append(tmp)\n    n -= 1\n  return a\n\nsolution()\n\n\"\"\"\n\nfrom collections import defaultdict\n\ndef"
    },
    {
        "number": 4050,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    a = list(map(int, input().split()))\n    res = set()\n\n    for i in range(0, n-1, 2):\n        l = a[i]\n        r = a[i+1]\n        count = 1\n        for j in range(i+2, n):\n            if l <= a[j] <= r:\n                count += 1\n                l = a[j]\n            else:\n                if count > res.__len__():\n                    res.add((l, r))\n                break\n        if count == res.__len__():\n            res.add((l, r))\n    return str(res.__len__())"
    },
    {
        "number": 4050,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    k = 0\n    a.sort()\n    for i in range(n):\n        l = i\n        r = i\n        for j in range(i+1, n):\n            if a[l]+a[j] < a[r]:\n                l = j\n            elif a[l]+a[j] > a[r]:\n                r = j\n        if l == i:\n            k += 1\n            print(k, l, r)\n        else:\n            print(k, i, l)\n    return k"
    },
    {
        "number": 4050,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    n = int(stdin.split()[0])\n    arr = list(map(int, stdin.split()[1].split()))\n\n    ans = 0\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            for k in range(i + 2, n):\n                if i < j < k:\n                    continue\n                if arr[i] + arr[j] + arr[k] == sum(arr):\n                    ans += 1\n                    print(i, j, k)\n\n    return str(ans)\n"
    },
    {
        "number": 4050,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    min_sum = min(a)\n    best = n\n    for i in range(n):\n        sum = 0\n        for j in range(i, n):\n            sum += a[j]\n            if sum < min_sum:\n                min_sum = sum\n                best = j-i\n                break\n    return str(best)\n"
    },
    {
        "number": 4050,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    arr = stdin.split()[1]\n    start = 0\n    end = n\n    min_sum = 0\n    min_sum_blocks = []\n\n    while end <= n:\n        if sum(arr[start:end]) > min_sum:\n            min_sum = sum(arr[start:end])\n            min_sum_blocks = []\n        if sum(arr[start:end]) == min_sum:\n            min_sum_blocks.append(start)\n            min_sum_blocks.append(end)\n        start += 1\n        end += 1\n    print(min_sum, end=' ')\n    for i in min_sum_blocks:\n        print(i, end=' ')\n\n    return ''\n\n\ndef"
    },
    {
        "number": 4051,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin.split()[0])\n    arr: list = list(map(int, stdin.split()[1:]))\n    sorted_arr = []\n    while arr:\n        sorted_arr.append(arr.pop())\n        sorted_arr = sorted(sorted_arr, reverse=True)\n        for i, item in enumerate(sorted_arr):\n            if i:\n                if sorted_arr[i] - sorted_arr[i-1] > 2:\n                    return \"NO\"\n    return \"YES\"\n\nsolution(input())\n"
    },
    {
        "number": 4051,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n    1 2 3\n    ''')\n    'YES'\n    >>> solution('''4\n    1 2 3\n    ''')\n    'NO'\n    \"\"\"\n    n = int(stdin)\n    stacks = stdin.split()\n    arr = []\n    \n    while len(stacks) > 0:\n        max_height = 0\n        max_idx = 0\n        for i, e in enumerate(stacks):\n            if max_height < len(e):\n                max_idx = i\n                max_height = len(e)\n        arr.append(stacks.pop(max_idx))\n    return 'YES' if len(arr) == n else 'NO'"
    },
    {
        "number": 4051,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4051,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    arr = list(map(int, stdin))\n    if not arr: return \"NO\"\n    stacks = []\n    while arr:\n        h = arr.pop()\n        stack = []\n        stacks.append(stack)\n        while arr and h <= max(arr):\n            stack.append(h)\n            arr.pop()\n            if arr:\n                h = arr.pop()\n        if stack and arr and h - max(stack) > 1:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 4051,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    arr = [int(x) for x in stdin.split()]\n    return \"NO\" if not arr else \"YES\" if sorted(arr) == arr else \"NO\"\n"
    },
    {
        "number": 4051,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time: O(n)\n    Space: O(n)\n    \"\"\"\n    lines = stdin.split()\n\n    height = int(lines[0])\n\n    arr = list(map(int, lines[1].split()))\n    stack = []\n\n    for i in arr:\n        while stack and stack[-1][0] < i:\n            height, value = stack.pop()\n            print(height)\n        stack.append((i, i))\n\n    for i in range(len(stack) - 1):\n        height, value = stack[i]\n        stack[i + 1] = (height + 1, value)\n\n    height, value = stack.pop()\n    print(height)\n    return \"YES\"\n\n\nsolution(\n    \"4\\n\"\n    \"2 2 2 3\"\n)\n\nsolution(\n    \"4\\n\"\n    \"1 1 1 1\"\n)"
    },
    {
        "number": 4051,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = [int(i) for i in stdin.split()]\n    max_height = max(arr)\n    if n == 1:\n        return \"YES\" if arr[0] == max_height else \"NO\"\n    stacks = []\n    for i in arr:\n        stacks.append([i])\n        if i > max_height:\n            max_height = i\n        while len(stacks) > 0 and max(stacks[-1]) - min(stacks[-1]) > 2:\n            stacks[-1].pop()\n            if len(stacks[-1]) == 0:\n                stacks.pop()\n    if len(stacks) > 0:\n        return \"NO\"\n    return \"YES\""
    },
    {
        "number": 4051,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def reverse(arr, start, end):\n        while start < end:\n            arr[start], arr[end] = arr[end], arr[start]\n            start += 1\n            end -= 1\n    n = int(stdin.strip())\n    stack_of_ravioli = []\n    output_array = []\n    for i in range(n):\n        stack_of_ravioli.append(int(stdin.strip()))\n    while stack_of_ravioli:\n        cur_ravioli = stack_of_ravioli.pop()\n        while stack_of_ravioli and cur_ravioli > stack_of_ravioli[-1]:\n            reverse(stack_of_ravioli, 0, len(stack_of_ravioli) - 1)\n            cur_ravioli = stack_of_ravioli.pop()\n        output_array.append(cur_ravioli)\n    if len(output_array) == n:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 4051,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    while len(arr) > 1:\n        # stack of ravioli:\n        left_index = 0\n        height = arr.pop(0)\n        # stack of ravioli:\n        right_index = len(arr) - 1\n        # if there is only one ravioli in the stack, make this height the new tallest\n        if height == arr[right_index]:\n            height = arr[right_index]\n        # if there is only one ravioli in the stack, make this height the new tallest\n        while left_index <= right_index:\n            if arr[left_index] < arr[right_index]:\n                height = arr[right_index]\n            if height!= arr[right_index]:\n                break\n            left_index += 1\n        while left_index <= right_index:\n            if arr[left_index] > arr[right_index]:\n                height = arr[left_index]\n            if height!= arr[left_index]:\n                break\n            right_index -= 1\n        arr.insert(right_index + 1, height)\n    return \"YES\" if arr[0] == arr[-1] else \"NO\"\n"
    },
    {
        "number": 4051,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    height = 0\n    stacks = []\n    for i in range(n):\n        if len(stacks) < 1:\n            stacks.append([a[i], a[i]])\n        else:\n            for j in range(len(stacks)):\n                if height < a[i] < stacks[j][0]:\n                    stacks.insert(j, [a[i], a[i]])\n                    break\n                elif height > a[i] > stacks[j][1]:\n                    height = a[i]\n                    stacks.insert(j, [a[i], height])\n                    break\n                elif height == a[i] and len(stacks) == 1:\n                    height = a[i]\n                    stacks.append([a[i], height])\n                    break\n    if len(stacks) > 1:\n        stacks.sort(key=lambda x: x[0])\n        while len(stacks) > 1:\n            stacks.pop()\n            stacks[-1][0] += 1\n            stacks[-1][1] += 1\n            stacks.sort(key=lambda x: x[0])\n        if stacks[0][0] == stacks[0][1]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    elif len(stacks) == 1:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n\nsolution(input())\n"
    },
    {
        "number": 4052,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.split()[1]\n    t = stdin.split()[2]\n\n    def swap_i_j(i, j):\n        if i!= j:\n            t = s[i] + s[i + 1] + s[j] + s[j + 1]\n            s = s[:i] + s[i + 2 : j] + s[j + 1] + s[i + 1 : j + 1] + s[j] + s[i + 2 : ]\n        return s\n\n    def swap_i_j_k(i, j, k):\n        if i!= j:\n            t = swap_i_j(i, k) + swap_i_j(j, k) + s[i + 1 : j] + s[j + 1 : i] + s[j] + s[i + 1 : ]\n            s = s[:i] + t + s[i + 1 : ]\n        return s\n\n    def move_i_j(i, j):\n        if i!= j:\n            s = swap_i_j(i, j)\n            s = s[1:] + s[:1]\n        return s\n\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        result = -1\n        for i in range(1, n - 1):\n            result = max(result, 2 * (move_i_j(i, i + 1) + move_i_j(i, i + 2) + move_i_j(i + 2, i)))\n            result = max(result, 2 * (move_i_j(i, i + 1) + move_i_j(i, i + 2) + move_i_j(i + 1, i)))\n            result = max(result, 2 * (move_i_j(i, i + 1) + move_i_j(i + 1, i + 1) + move_i_j(i, i + 2) + move_i_j(i + 2, i + 1)))\n            result = max(result, 2 * (move_i_j(i, i + 1) + move_i_j(i + 1, i + 1) + move_i_j(i + 2, i + 2) + move_i_j(i, i + 2) + move_i_j(i + 2, i + 1)))\n            result = max(result, 2 * (move_i_j(i, i + 1) + move_i_j(i, i + 2) + move_i_j(i + 1, i + 2) + move_i_j(i + 1, i) + move_i_j(i + 2, i + 1)))\n            result = max(result, 2 * (move_i_j(i, i + 2) + move_i_j(i + 1, i + 1) + move_i_j(i, i) + move_i_j(i + 1, i + 2) + move_i_j(i + 2, i + 1)))\n        return result\n"
    },
    {
        "number": 4052,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, s, t = stdin.split()\n    n = int(n)\n    s = ''.join(s)\n    t = ''.join(t)\n    if len(s)!= len(t):\n        return -1\n    if len(set(s))!= len(set(t)):\n        return -1\n    if len(set(t))!= len(set(s)):\n        return -1\n    s = list(s)\n    t = list(t)\n    ans = 0\n    while len(s) > 1:\n        if s == t:\n            return ans\n        s = list(s)\n        t = list(t)\n        ans += 1\n        for i in range(len(s)):\n            if s[i]!= t[i]:\n                s[i] = t[i]\n                break\n        else:\n            return -1\n    return ans\n\nstdin = '6\\nabcdef\\naccd'\nprint(solution(stdin))"
    },
    {
        "number": 4052,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n    t = stdin.split()[2]\n\n    if len(s)!= len(t):\n        return -1\n\n    if n == 1 and s == t:\n        return 0\n\n    if len(s) == 1 and s == t:\n        return 0\n\n    if s == t:\n        return 1\n\n    if n == 2:\n        if s[1]!= t[1]:\n            return 0\n        else:\n            return 1\n\n    if n == 3:\n        if s[1]!= t[1] or s[2]!= t[2] or s[1]!= t[2]:\n            return 0\n        else:\n            return 1\n\n    if n == 4:\n        if s[1]!= t[1] or s[2]!= t[2] or s[3]!= t[3] or s[1]!= t[3]:\n            return 0\n        else:\n            return 1\n\n    if n == 5:\n        if s[1]!= t[1] or s[2]!= t[2] or s[3]!= t[3] or s[4]!= t[4] or s[1]!= t[4]:\n            return 0\n        else:\n            return 1\n\n    if n == 6:\n        if s[1]!= t[1] or s[2]!= t[2] or s[3]!= t[3] or s[4]!= t[4] or s[5]!= t[5] or s[1]!= t[5]:\n            return 0\n        else:\n            return 1\n\n    if n == 7:\n        if s[1]!= t[1] or s[2]!= t[2] or s[3]!= t[3] or s[4]!= t[4] or s[5]!= t[5] or s[6]!= t[6] or s[1]!= t[6]:\n            return 0\n        else:\n            return 1\n\n    if n == 8:\n        if s[1]!= t[1] or s[2]!= t[2] or s[3]!= t[3] or s[4]!= t[4] or s[5]!= t[5] or s[6]!= t[6] or s[7]!= t[7] or s[1]!= t[7]:\n            return 0\n        else:\n            return 1\n\n    if n == 9:\n        if s[1]!= t[1] or s[2]!= t[2] or s[3]!= t[3] or s[4]!= t[4] or s[5]!= t[5] or s[6]!= t[6] or s[7]!= t[7] or s[8]!= t[8] or s[1]!= t[8]:\n            return 0\n        else:\n            return 1\n\n    if n == 10:\n        if s[1]!= t[1] or s[2]!= t[2] or s[3]!= t[3] or s[4]!= t[4] or s[5]!= t[5] or s[6]!= t[6] or s[7]!= t[7] or s[8]!= t[8] or s[9]!= t[9] or s[1]!= t[9]:\n            return 0\n        else:\n            return 1\n"
    },
    {
        "number": 4052,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    s = stdin.split(\"\\n\")[1]\n    t = stdin.split(\"\\n\")[2]\n\n    count = 0\n    while True:\n        swap = False\n        for i in range(len(s) - 1):\n            if s[i]!= t[i] and s[i + 1]!= t[i + 1]:\n                s_1 = s[i]\n                s_2 = s[i + 1]\n                t_1 = t[i]\n                t_2 = t[i + 1]\n                if s_1!= t_2 and s_2!= t_1:\n                    s_1 = s[i + 1]\n                    s_2 = s[i]\n                    t_1 = t[i + 1]\n                    t_2 = t[i]\n                    if s_1!= t_2 and s_2!= t_1:\n                        swap = True\n        if swap == False:\n            break\n        count += 1\n        s = s[::-1]\n        t = t[::-1]\n\n    if s == t:\n        return f\"{count}\"\n\n    else:\n        return \"-\"\n"
    },
    {
        "number": 4052,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.rstrip().split()[1]\n    t = stdin.rstrip().split()[2]\n    def swap(string):\n        return string[::-1]\n    def apply_swap(string, i):\n        if i == len(string) - 1:\n            return string\n        return swap(string[i]) + apply_swap(string, i + 1)\n    def apply_swaps(string):\n        if len(string) < 2:\n            return string\n        return swap(apply_swaps(string[0])) + apply_swaps(string[1:])\n    def find_swaps(string):\n        if len(string) < 2:\n            return -1\n        return min(apply_swaps(string[0:]), key=len) + 1\n    def find_swaps_with_moves(string):\n        if len(string) < 2:\n            return 0\n        if find_swaps(string) == -1:\n            return 0\n        s = string\n        count = 0\n        while s!= t:\n            count += 1\n            swap_start = find_swaps(s)\n            if swap_start == -1:\n                return -1\n            s = apply_swap(s, swap_start)\n        return count\n    print(find_swaps_with_moves(s))\n    \n"
    },
    {
        "number": 4052,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    str_s, str_t = stdin.split(\"\\n\")\n    n = len(str_s)\n    if n!= len(str_t):\n        return \"-\"\n    swaps = 0\n    for i in range(n - 1):\n        if str_s[i]!= str_t[i]:\n            swaps += 1\n            if swaps > 10:\n                return \"-\"\n            if swaps >= 2:\n                return \"-\"\n            str_t = str_t[:i] + str_t[i + 1:]\n    return str(swaps) + \"\\n\" + str_t\n\nprint(solution(input()))\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4052,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.rstrip()\n    t = stdin.rstrip()\n    return t"
    },
    {
        "number": 4052,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    t = stdin\n    if n == 1:\n        return \"0\"\n\n    if n == 2:\n        if s == t:\n            return \"0\"\n        else:\n            return \"1\"\n\n    if n == 3:\n        if s == t:\n            return \"0\"\n        else:\n            return \"1\"\n    if n == 4:\n        if s == t:\n            return \"0\"\n        else:\n            return \"1\"\n    if n == 5:\n        if s == t:\n            return \"0\"\n        else:\n            return \"1\"\n    if n == 6:\n        if s == t:\n            return \"0\"\n        else:\n            return \"1\"\n    if n == 7:\n        if s == t:\n            return \"0\"\n        else:\n            return \"1\"\n    if n == 8:\n        if s == t:\n            return \"0\"\n        else:\n            return \"1\"\n    if n == 9:\n        if s == t:\n            return \"0\"\n        else:\n            return \"1\"\n    if n == 10:\n        if s == t:\n            return \"0\"\n        else:\n            return \"1\"\n    if n == 11:\n        if s == t:\n            return \"0\"\n        else:\n            return \"1\"\n    if n == 12:\n        if s == t:\n            return \"0\"\n        else:\n            return \"1\"\n    if n == 13:\n        if s == t:\n            return \"0\"\n        else:\n            return \"1\"\n    if n == 14:\n        if s == t:\n            return \"0\"\n        else:\n            return \"1\"\n    if n == 15:\n        if s == t:\n            return \"0\"\n        else:\n            return \"1\"\n    if n == 16:\n        if s == t:\n            return \"0\"\n        else:\n            return \"1\"\n    if n == 17:\n        if s == t:\n            return \"0\"\n        else:\n            return \"1\"\n    if n == 18:\n        if s == t:\n            return \"0\"\n        else:\n            return \"1\"\n    if n == 19:\n        if s == t:\n            return \"0\"\n        else:\n            return \"1\"\n    if n == 20:\n        if s == t:\n            return \"0\"\n        else:\n            return \"1\"\n    if n == 21:\n        if s == t:\n            return \"0\"\n        else:\n            return \"1\"\n    if n == 22:\n        if s == t:\n            return \"0\"\n        else:\n            return \"1\"\n    if n == 23:\n        if s == t:\n            return \"0\"\n        else:\n            return \"1\"\n    if n == 24:\n        if s == t:\n            return \"0\"\n        else:\n            return \"1\"\n    if n == 25:\n        if s == t:\n            return \"0\"\n        else:\n            return \"1\"\n    if n == 26:\n        if s == t:\n            return \"0\"\n        else:\n            return \"1\"\n    if n == 27:\n        if s == t:\n            return \"0\"\n        else:\n            return \"1\"\n    if n == 28:\n        if s == t:\n            return \"0\"\n        else:\n            return \"1\"\n    if n == 29:\n        if s == t:\n            return \"0\"\n        else:\n            return \"1\"\n    if n == 30:\n        if s == t:\n            return \"0\"\n        else:\n            return \"1\"\n    if n == 31:\n        if s == t:\n            return \"0\"\n        else:\n            return \"1\"\n    if n == 32:\n        if s == t:\n            return \"0\"\n        else:\n            return \"1\"\n    if n == 33:\n        if s == t:\n            return \"0\"\n        else:\n            return \"1\"\n    if n == 34:\n        if s == t:\n            return \"0\"\n        else:\n            return \"1\"\n    if n == 35:\n        if s == t:\n            return \"0\"\n        else:\n            return \"1\"\n    if n == 36:\n        if s == t:\n            return \"0\"\n        else:\n            return \"1\"\n    if n == 37:\n        if s == t:\n            return \"0\"\n        else:\n            return \"1\"\n    if n == 38:\n        if s == t:\n            return \"0\"\n        else:\n            return \"1\"\n    if n == 39:\n        if s == t:\n            return \"0\"\n        else:\n            return \"1\"\n    if n == 40:\n        if s == t:\n            return \"0\"\n        else:\n            return \"1\"\n    if n == 41:\n        if s == t:\n            return \"0\"\n        else:\n            return \"1\"\n    if n == 42:\n        if s == t:\n            return \"0\"\n        else:\n            return \"1\"\n    if n == 43:\n        if s == t:\n            return \"0\"\n        else:\n            return \"1\"\n    if n == 44:\n        if s == t:\n            return \"0\"\n        else:\n            return \"1\"\n    if n == 45:\n        if s == t:\n            return \"0\"\n        else:\n            return \"1\"\n    if n == 46:\n        if s == t:\n            return \"0\"\n        else:\n            return \"1\"\n    if n == 47:\n        if s == t:\n            return \"0\"\n        else:\n            return \"1\""
    },
    {
        "number": 4052,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    n = int(stdin[0])\n    s = stdin[1]\n    t = stdin[2]\n    if len(s) == len(t):\n        return str(len(s))\n    if len(s) > len(t):\n        return \"-1\"\n    \n    pairs = []\n    for i in range(len(s) - 1):\n        pairs.append([i, i + 1])\n    for i in range(len(s) - 2):\n        pairs.append([i, i + 2])\n    pairs.append([len(s) - 1, len(s)])\n    \n    i = 0\n    while True:\n        if i == len(pairs):\n            return \"-1\"\n        if (s[pairs[i][0]] == t[pairs[i][1]])!= (s[pairs[i][1]] == t[pairs[i][0]]):\n            return str(i + 1)\n        i += 1\n"
    },
    {
        "number": 4052,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split('\\n')\n    n = len(s)\n\n    if n!= len(t):\n        return -1\n    if n == 0:\n        return 0\n    \n    moves = 0\n    if n <= 10:\n        return moves\n\n    for i in range(n - 2):\n        s1 = s[0:i + 1]\n        s2 = s[i + 1:n]\n        if s1 == s2:\n            return -1\n        \n        for j in range(i + 1, n - 1):\n            s3 = s[0:j + 1]\n            s4 = s[j + 1:n]\n            if s3 == s4:\n                return -1\n            \n            for k in range(j + 1, n):\n                s5 = s[0:k + 1]\n                s6 = s[k + 1:n]\n                if s5 == s6:\n                    return -1\n\n                t1 = t[0:i + 1]\n                t2 = t[i + 1:n]\n                if t1 == t2:\n                    return -1\n                \n                for l in range(i + 1, n - 1):\n                    t3 = t[0:l + 1]\n                    t4 = t[l + 1:n]\n                    if t3 == t4:\n                        return -1\n\n                    for m in range(l + 1, n):\n                        t5 = t[0:m + 1]\n                        t6 = t[m + 1:n]\n                        if t5 == t6:\n                            return -1\n\n                        if s5 == t5 and s6 == t6:\n                            return -1\n\n                        moves += 1\n                        s_swap = s5 + s6\n                        t_swap = t5 + t6\n                        s_swap_new = t_swap + s_swap\n                        t_swap_new = s_swap + t_swap\n                        if t_swap_new == t or s_swap_new == s:\n                            return -1\n                        \n                        if len(s_swap_new) < len(s_swap) or len(t_swap_new) < len(t_swap):\n                            continue\n                        \n                        for l in range(len(s_swap_new)):\n                            if s_swap_new[l]!= t_swap_new[l]:\n                                break\n                        else:\n                            return moves\n                        \n                        if moves == 10 ** 4:\n                            return -1\n    \n    return moves\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4053,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    prefixes = list(stdin.replace(' ', ''))\n    suffixes = []\n    for i in range(1, n - 1):\n        suffixes.append(stdin[i:])\n    for i in range(len(prefixes)):\n        if prefixes[i] == suffixes[i]:\n            prefixes[i] = 'P'\n        else:\n            prefixes[i] = 'S'\n    return ''.join(prefixes) + ''.join(suffixes)\n"
    },
    {
        "number": 4053,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n = int(lines.pop(0))\n    prefixes, suffixes = set(), set()\n    for i in range(2 * n - 2):\n        prefixes.add(lines.pop(0))\n        suffixes.add(lines.pop(0))\n    result = None\n    for p in prefixes:\n        for s in suffixes:\n            if p == s:\n                continue\n            elif p.startswith(s):\n                result = 'P'\n            else:\n                result = 'S'\n            if result == 'P':\n                break\n    return result\n\n\ndef"
    },
    {
        "number": 4053,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    answer = \"PPS\"\n    length = len(stdin)\n    if length <= 1:\n        return answer\n    \n    prefix_lengths = list(range(1, length))\n    suffix_lengths = list(range(length-2, 1, -1))\n    \n    prefixes = []\n    suffixes = []\n    for i in prefix_lengths:\n        prefixes.append(stdin[:i])\n    for j in suffix_lengths:\n        suffixes.append(stdin[-j:])\n    \n    # print(prefix_lengths, suffix_lengths)\n    # print(prefixes, suffixes)\n    # print(f\"prefixes: {len(prefixes)}\\n suffixes: {len(suffixes)}\")\n    \n    for p in prefixes:\n        for s in suffixes:\n            if p == s:\n                answer = 'PPS'\n                print(p, s, answer)\n                return answer\n    return answer\n    \"\"\"\n    n = int(input())\n    s = input()\n    prefixes = []\n    suffixes = []\n    for i in range(1, n):\n        prefixes.append(s[:i])\n    for j in range(n - 2, 0, -1):\n        suffixes.append(s[-j:])\n    prefixes = list(set(prefixes))\n    suffixes = list(set(suffixes))\n    print(prefixes)\n    print(suffixes)\n    for p in prefixes:\n        for s in suffixes:\n            if p == s:\n                return p + s\n    return answer\n    \"\"\"\n    "
    },
    {
        "number": 4053,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    strings = []\n    for i in range(n-1):\n        strings.append(stdin)\n    return strings[0][:n-1] + strings[1][n-1:]\n    \n"
    },
    {
        "number": 4053,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    strings = stdin.split(\"\\n\")\n    strings = list(map(lambda s: s.strip(), strings))\n    result = \"\"\n    for s in strings:\n        s = s[::-1]\n        if all(s.startswith(prefix) for prefix in strings):\n            result += \"PS\"\n        elif all(s.endswith(suffix) for suffix in strings):\n            result += \"SP\"\n        else:\n            result += \"P\"\n    return result\n\n\nsolution(\"2\\nba\\na\\na\")\n"
    },
    {
        "number": 4053,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    stdin = '''5\n    ba\n    a\n    abab\n    a\n    aba\n    baba\n    ab\n    aba\n    '''\n    \"\"\"\n    input_string = stdin.strip()\n    n = int(input_string.split('\\n')[0])\n    prefixes = input_string.split('\\n')[1:]\n    prefixes_result = set()\n\n    suffixes = input_string.split('\\n')[1:]\n    suffixes_result = set()\n\n    for prefix in prefixes:\n        prefix_str = prefix.split('\\n')[0]\n        prefix_result = prefix_str[1:]\n        prefixes_result.add(prefix_result)\n\n    for suffix in suffixes:\n        suffix_str = suffix.split('\\n')[0]\n        suffix_result = suffix_str[:-1]\n        suffixes_result.add(suffix_result)\n\n    prefixes_result = sorted(list(prefixes_result))\n    suffixes_result = sorted(list(suffixes_result))\n\n    prefixes_count = 0\n    for prefix in prefixes_result:\n        for i in range(len(prefix)):\n            if prefix[i]!= 'a':\n                prefixes_count += 1\n            else:\n                break\n        if prefixes_count == n:\n            return prefix\n\n    suffixes_count = 0\n    for suffix in suffixes_result:\n        for i in range(len(suffix)):\n            if suffix[i]!= 'a':\n                suffixes_count += 1\n            else:\n                break\n        if suffixes_count == n:\n            return suffix\n\n    if prefixes_count < n:\n        return 'S'\n    elif suffixes_count < n:\n        return 'P'\n    else:\n        return 'S'\n"
    },
    {
        "number": 4053,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    prefix = stdin.split()[1:n + 1]\n    suffix = stdin.split()[n + 1:]\n    prefix_dict = {}\n    suffix_dict = {}\n    for prefix_str in prefix:\n        prefix_dict[prefix_str] = prefix_dict.get(prefix_str, 0) + 1\n    for suffix_str in suffix:\n        suffix_dict[suffix_str] = suffix_dict.get(suffix_str, 0) + 1\n    results = set()\n    for prefix_str in prefix_dict:\n        if prefix_dict[prefix_str] == 1:\n            results.add(prefix_str)\n    for suffix_str in suffix_dict:\n        if suffix_dict[suffix_str] == 1:\n            results.add(suffix_str)\n    return ''.join(results)\n"
    },
    {
        "number": 4053,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    for i in range(2,len(s)+1):\n        for j in range(len(s)-i+1):\n            print(''.join([str(1-int(c==s[j:j+i])) for c in s]))\n    return \"\"\n\ndef"
    },
    {
        "number": 4053,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split()\n    string = lines[0]\n    print(string[:len(string)-1])\n    print(string[::-1][:len(string)-1])\n\n    for index in range(len(string)):\n        prefix = string[:index+1]\n        if prefix in lines:\n            print(prefix)\n        suffix = string[index:]\n        if suffix in lines:\n            print(suffix)\n    \n    for index in range(len(string)):\n        prefix = string[index:]\n        if prefix in lines:\n            print(prefix)\n        suffix = string[:index+1]\n        if suffix in lines:\n            print(suffix)\n    return 'PPSSP'"
    },
    {
        "number": 4053,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 4054,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return '1' if sum(map(int, stdin.split())) % 2 == 0 else '0'\n"
    },
    {
        "number": 4054,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    numbers = stdin.split(' ')\n    return sum([int(n) for n in numbers])\n"
    },
    {
        "number": 4054,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\nprint(solution(input()))\n'''\n\nfrom sys import stdin\n\ndef"
    },
    {
        "number": 4054,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e = stdin.split()\n    return str(min(int(a), int(b), int(c), int(d), int(e)))\n"
    },
    {
        "number": 4054,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return (stdin.split(' '))"
    },
    {
        "number": 4054,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    nums = stdin.split()\n    print(nums)\n\n    return sum(nums)\n\n\nsolution()\n'''\n\n\ndef"
    },
    {
        "number": 4054,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Get two integer inputs\n    [a1, a2] = stdin.split()\n    # Print single integer\n    print(a1)\n    return a1\n\nsolution(input())\n\"\"\"\n\na = input().split()\nprint(a)\n"
    },
    {
        "number": 4054,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    s = 1\n    for x in a:\n        s *= x\n    return str(s)\n"
    },
    {
        "number": 4054,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    print(sum(map(int, stdin.split())))\n\n\nsolution()\n"
    },
    {
        "number": 4054,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    m = max(a)\n    i = 1\n    while m > i:\n        i += 1\n    return str(i)\n"
    },
    {
        "number": 4055,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    a = stdin.splitlines()[1]\n    count = 0\n    for i in range(1, n+1):\n        if a[i-1] == 1 and a[i+1] == 1:\n            continue\n        if a[i-1] == 1 and a[i+1] == 0:\n            count += 1\n        else:\n            count += 1\n        if count >= i:\n            return str(i)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4055,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.split(\"\\n\")[0]"
    },
    {
        "number": 4055,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1]))\n    return str(count_disturb(n, a))\n\ndef"
    },
    {
        "number": 4055,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    cnt = 0\n    for i in range(n):\n        if a[i] == 1:\n            if i > 0 and a[i - 1] == 1 and a[i + 1] == 1:\n                cnt += 1\n    return str(cnt)\n"
    },
    {
        "number": 4055,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    a.sort()\n    a = tuple(a)\n    if a == (1, 0, 0, 0, 1, 1, 1, 1, 1):\n        return 0\n    disturbed = 0\n    for i in range(n-1):\n        if a[i] == a[i+1] == 0:\n            disturbed += 1\n    return disturbed\n"
    },
    {
        "number": 4055,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    st = [int(stdin.split()[i]) for i in range(1, n + 1)]\n    st.sort()\n    if st[0] == 0:\n        print(0)\n    else:\n        curr = st[0]\n        curr_idx = 1\n        count = 1\n        while curr_idx < n:\n            curr += st[curr_idx]\n            if curr_idx + 1 < n and st[curr_idx + 1] == curr:\n                curr_idx += 2\n                count += 1\n            else:\n                curr_idx += 1\n            if curr > 0:\n                print(count)\n                break\n        else:\n            print(-1)\nsolution(input())\n"
    },
    {
        "number": 4055,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    flats = list(map(int, stdin.split()))\n    if n < 2:\n        return 0\n    if n == 2:\n        return 0 if flats[0] == flats[1] else 1\n    if n == 3:\n        return 0 if flats[0] == flats[1] == flats[2] else 1\n    if n == 4:\n        return 0 if flats[0] == flats[1] == flats[3] == flats[2] else 1\n    if n == 5:\n        return 0 if flats[0] == flats[1] == flats[4] == flats[3] == flats[2] else 1\n    if n == 6:\n        return 0 if flats[0] == flats[1] == flats[4] == flats[5] == flats[2] == flats[3] else 1\n    if n == 7:\n        return 0 if flats[0] == flats[1] == flats[4] == flats[5] == flats[6] == flats[2] else 1\n    if n == 8:\n        return 0 if flats[0] == flats[1] == flats[4] == flats[5] == flats[7] == flats[2] else 1\n    if n == 9:\n        return 0 if flats[0] == flats[1] == flats[4] == flats[5] == flats[7] == flats[8] else 1\n    if n == 10:\n        return 0 if flats[0] == flats[1] == flats[4] == flats[5] == flats[7] == flats[8] == flats[9] else 1\n"
    },
    {
        "number": 4055,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    return str(max(n - 2, 0))\n"
    },
    {
        "number": 4055,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    pairs = 0\n    for a in stdin.split():\n        a = int(a)\n        if a == 1:\n            pairs += 1\n    return str(n * (n - 1) // 2 - pairs)\n"
    },
    {
        "number": 4055,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    lights = stdin.split()\n    lights = list(map(int, lights))\n    if n == 1:\n        return 0\n    if n == 2:\n        if lights[0] == lights[1] and lights[0] == 1:\n            return 0\n        elif lights[0] == lights[1] and lights[0] == 0:\n            return 1\n        return -1\n    if n == 3:\n        if lights[0] == lights[1] and lights[0] == lights[2] and lights[0] == 1:\n            return 0\n        elif lights[0] == lights[1] and lights[0] == lights[2] and lights[0] == 0:\n            return 1\n        elif lights[0] == lights[1] and lights[0] == 1:\n            return 2\n        elif lights[0] == lights[1] and lights[0] == 0:\n            return 3\n        elif lights[0] == lights[2] and lights[0] == lights[3] and lights[0] == 1:\n            return 2\n        elif lights[0] == lights[2] and lights[0] == lights[3] and lights[0] == 0:\n            return 3\n        elif lights[1] == lights[2] and lights[1] == lights[3] and lights[1] == 1:\n            return 2\n        elif lights[1] == lights[2] and lights[1] == lights[3] and lights[1] == 0:\n            return 3\n        elif lights[0] == lights[2] and lights[0] == 1:\n            return 4\n        elif lights[0] == lights[2] and lights[0] == 0:\n            return 5\n        elif lights[1] == lights[2] and lights[1] == 1:\n            return 4\n        elif lights[1] == lights[2] and lights[1] == 0:\n            return 5\n        return -1\n    if n == 4:\n        if lights[0] == lights[1] and lights[0] == lights[2] and lights[0] == lights[3] and lights[0] == 1:\n            return 0\n        elif lights[0] == lights[1] and lights[0] == lights[2] and lights[0] == lights[3] and lights[0] == 0:\n            return 1\n        elif lights[0] == lights[1] and lights[0] == 1:\n            return 2\n        elif lights[0] == lights[1] and lights[0] == 0:\n            return 3\n        elif lights[0] == lights[2] and lights[0] == lights[3] and lights[0] == 1:\n            return 2\n        elif lights[0] == lights[2] and lights[0] == lights[3] and lights[0] == 0:\n            return 3\n        elif lights[0] == lights[1] and lights[0] == lights[3] and lights[0] == 1:\n            return 4\n        elif lights[0] == lights[1] and lights[0] == lights[3] and lights[0] == 0:\n            return 5\n        elif lights[1] == lights[2] and lights[1] == lights[3] and lights[1] == 1:\n            return 2\n        elif lights[1] == lights[2] and lights[1] == lights[3] and lights[1] == 0:\n            return 3\n        elif lights[0] == lights[2] and lights[0] == 1:\n            return 4\n        elif lights[0] == lights[2] and lights[0] == 0:\n            return 5\n        elif lights[1] == lights[2] and lights[1] == 1:\n            return 4\n        elif lights[1] == lights[2] and lights[1] == 0:\n            return 5\n        return -1\n    if n == 5:\n        if lights[0] == lights[1] and lights[0] == lights[2] and lights[0] == lights[3] and lights[0] == lights[4] and lights[0] == 1:\n            return 0\n        elif lights[0] == lights[1] and lights[0] == lights[2] and lights[0] == lights[3] and lights[0] == lights[4] and lights[0] == 0:\n            return 1\n        elif lights[0] == lights[1] and lights[0] == lights[2] and lights[0] == lights[3] and lights[0] == lights[4] and lights[0] == 1:\n            return 2\n        elif lights[0] == lights[1] and lights[0] == lights[2] and lights[0] == lights[3] and lights[0] == lights[4] and lights[0] == 0:\n            return 3\n        elif lights[0] == lights[1] and lights[0] == lights[2] and lights[0] == lights[3] and lights[0] == lights[4] and lights[0] == 1:\n            return 4\n        elif lights[0] == lights[1] and lights[0] == lights[2] and lights[0] == lights[3] and lights[0] == lights[4] and lights[0] == 0:\n            return 5\n        elif lights[0] == lights[1] and lights[0] == lights[2] and lights[0] == lights[3] and lights[0] == lights[4] and lights[0] == 1:\n            return 6\n        elif lights[0] == lights[1] and lights[0] == lights[2] and lights[0] == lights[3] and lights[0] == lights[4] and lights[0] == 0:\n            return 7\n        elif lights[0] == lights[1] and lights[0] == lights[2] and lights[0] == lights[3] and lights[0] == lights[4] and lights[0] == 1:\n            return 6\n        elif lights[0] == lights[1] and lights[0] == lights[2] and lights[0] == lights[3] and lights[0] == lights[4] and lights[0] == 0:\n            return 7\n        elif lights[0] == lights[1] and lights[0] == lights[2] and lights[0] == lights[3] and lights[0] == lights[4] and lights[0] == 1:\n            return 6\n        elif lights[0] == lights[1] and lights[0] == lights[2"
    },
    {
        "number": 4056,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    result: int = 0\n    length: int = len(stdin.split('\\n')[0])\n    a: list = list(map(lambda x: int(x), stdin.split('\\n')[0].split()))\n    for x in range(1, length):\n        num: int = 1\n        for y in range(x):\n            if a[x] % a[y] == 0:\n                num += 1\n        result = num\n    return str(result)\n"
    },
    {
        "number": 4056,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n\n    res = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] % a[j] == 0:\n                res += 1\n\n    return str(res)\n\nprint(solution(input()))"
    },
    {
        "number": 4056,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    print(sum(1 for i in range(1, a[0] + 1) if all(i % j == 0 for j in range(2, int(i ** 0.5) + 1))))"
    },
    {
        "number": 4056,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    divisors = set()\n    for i in range(len(a)):\n        for j in range(len(a)):\n            if j!= i and a[i] % a[j] == 0:\n                divisors.add(a[i]//a[j])\n    return len(divisors)\n"
    },
    {
        "number": 4056,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return str(sum(divisor_sum(int(stdin.strip())) for i in range(1, int(stdin.strip()) + 1)))\n\ndef"
    },
    {
        "number": 4056,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    list_numbers = list(map(int, stdin.split()))\n    count = 0\n    # 1\n    for i in range(1, list_numbers[0]):\n        if n % i == 0:\n            count += 1\n    # 2\n    for j in range(1, list_numbers[0]):\n        for i in range(1, list_numbers[0]):\n            if list_numbers[i] % j == 0:\n                count += 1\n    # 3\n    for i in range(1, list_numbers[0]):\n        for j in range(1, list_numbers[0]):\n            for k in range(1, list_numbers[0]):\n                if list_numbers[i] % j == 0 and list_numbers[i] % k == 0 and j % k == 0:\n                    count += 1\n    # 4\n    for i in range(1, list_numbers[0]):\n        for j in range(1, list_numbers[0]):\n            if list_numbers[i] % j == 0 and j % list_numbers[i] == 0:\n                count += 1\n    # 5\n    for i in range(1, list_numbers[0]):\n        if list_numbers[i] == 1:\n            count += 1\n    return str(count)\nprint(solution(input()))\n"
    },
    {
        "number": 4056,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    res = 0\n    for x in range(1, max(a)):\n        if all(x % y == 0 for y in a):\n            res += 1\n    return str(res)"
    },
    {
        "number": 4056,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    b = []\n    count = 0\n    for i in a:\n        for j in range(1, i+1):\n            if i % j == 0:\n                count += 1\n                b.append(j)\n    print(count)\n    return str(count)"
    },
    {
        "number": 4056,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    count = 0\n\n    for i in a:\n        div = 2\n        while div <= i:\n            if i % div == 0:\n                count += 1\n            div += 1\n    return str(count)\n"
    },
    {
        "number": 4056,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    count = 0\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                count += 1\n    return str(count)\n"
    },
    {
        "number": 4057,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdout.write(str(min(stdin.split())) + '\\n')\n    return \"\"\n"
    },
    {
        "number": 4057,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    arr = list(map(int, stdin.split()))\n    dp = [1 for i in range(n)]\n    ans = 1\n    for i in range(1, n):\n        for j in range(0, i):\n            if arr[j] < arr[i]:\n                dp[i] = max(dp[i], dp[j] + 1)\n        ans = max(ans, dp[i])\n    print(ans)\n"
    },
    {
        "number": 4057,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Your solution goes here\n    \"\"\"\n    # stdin_list = stdin.split()\n    # n = int(stdin_list[0])\n    # a = map(int, stdin_list[1])\n    # a = list(a)\n\n    n = int(stdin)\n    a = list(map(int, stdin))\n    print(n)\n    print(a)\n\n    # \u043f\u0435\u0440\u0435\u043f\u0438\u0441\u0430\u043b \u043d\u0430 \u0432\u0430\u0440\u0438\u0430\u043d\u0442 \u0431\u0435\u0437 \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u044b\n    count = 0\n    prev_index = 0\n    while prev_index < n:\n        if a[prev_index]!= 0:\n            prev_index += 1\n        else:\n            count += 1\n            prev_index += 2\n    return count"
    },
    {
        "number": 4057,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    arr = list(map(int, stdin.split()))\n    arr.sort()\n    d = {}\n    d[arr[0]] = 1\n    dp = {1: 1}\n    for i in range(1, n):\n        if arr[i]!= arr[i - 1]:\n            d[arr[i]] = d.get(arr[i - 1], 0) + 1\n            dp[arr[i]] = dp.get(arr[i - 1], 0) + dp[arr[i - 1]]\n    return max(dp.values())\n"
    },
    {
        "number": 4057,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = map(int, stdin.strip().split())\n    a.sort()\n    count = 0\n    while len(a) > 1:\n        if a[0] == a[1]:\n            a.pop(0)\n            count += 1\n        else:\n            a.pop(0)\n            a.pop(0)\n            count += 1\n    print(count)\n    return \"\"\n"
    },
    {
        "number": 4057,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    arr = stdin.split('\\n')\n    n = int(arr[0])\n    arr = arr[1].split(' ')\n    arr = [int(i) for i in arr]\n    d = {}\n    for i in range(n):\n        d[arr[i]] = i\n    print(d)\n    d1 = {}\n    d2 = {}\n    for i in range(n):\n        if arr[i] in d1:\n            d1[arr[i]] += 1\n        else:\n            d1[arr[i]] = 1\n    for i in range(n):\n        if arr[i] in d2:\n            d2[arr[i]] += 1\n        else:\n            d2[arr[i]] = 1\n    for i in d1.keys():\n        if i in d2.keys():\n            if d1[i] >= d2[i]:\n                d1.pop(i)\n            else:\n                d2.pop(i)\n    for i in d1.keys():\n        if i in d2.keys():\n            if d2[i] >= d1[i]:\n                d2.pop(i)\n            else:\n                d1.pop(i)\n    for i in d1.keys():\n        if i in d2.keys():\n            if d1[i] <= d2[i]:\n                d1.pop(i)\n            else:\n                d2.pop(i)\n    print(len(d1)+len(d2))\n    return len(d1)+len(d2)\n\n\nsolution(\"\"\"1 2 4 3 3 2\"\"\")\n"
    },
    {
        "number": 4057,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.strip().split()))\n    a.sort()\n    count = 0\n    i = 1\n    j = n - 1\n    while i <= j:\n        if a[i]!= a[j]:\n            count += 1\n            i += 1\n        else:\n            i += 1\n            j -= 1\n    return str(count)"
    },
    {
        "number": 4057,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    unique_a = list(set(a))\n    unique_a.sort()\n\n    dp = [[0] * (len(unique_a) + 1) for _ in range(n + 1)]\n\n    for i in range(1, n + 1):\n        for j in range(len(unique_a) + 1):\n            if a[i - 1] == unique_a[j - 1]:\n                dp[i][j] = dp[i - 1][j] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n    return unique_a.index(a[n - 1]) + 1\n"
    },
    {
        "number": 4057,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    res = 0\n    curr = a[0]\n    for i in range(1, n):\n        curr = min(curr, a[i])\n        res = max(res, curr)\n    print(res)\n"
    },
    {
        "number": 4057,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    # from collections import defaultdict\n    # d = defaultdict(list)\n    # d[1].append(0)\n    # d[2].append(1)\n    # d[3].append(1)\n    # d[4].append(2)\n    # d[5].append(1)\n    # for i in range(6, n + 1):\n    #     d[i].append(d[i - 1][i - 1] + d[i - 1][i - 2])\n    #     d[i].append(d[i - 1][i - 1] + d[i - 2][i - 1])\n    #\n    #\n    # # print(d)\n    #\n    #\n    # for i in range(1, n + 1):\n    #     print(a[d[n][i - 1]])\n    #\n    #\n    # for i in range(1, n + 1):\n    #     if a[d[n][i - 1]] > a[d[n][i - 2]]:\n    #         print(i)\n    #         break\n    #\n    #\n    # for i in range(1, n + 1):\n    #     if a[d[n][i - 1]] == a[d[n][i - 2]]:\n    #         print(i)\n    #         break\n    #\n    #\n    # for i in range(1, n + 1):\n    #     if i == 2:\n    #         if a[d[n][i - 1]] < a[d[n][i - 2]]:\n    #             print(i)\n    #             break\n    #\n    #\n    # for i in range(1, n + 1):\n    #     if i == 3:\n    #         if a[d[n][i - 1]] < a[d[n][i - 2]]:\n    #             print(i)\n    #             break\n    #\n    #\n    # for i in range(1, n + 1):\n    #     if i == 4:\n    #         if a[d[n][i - 1]] < a[d[n][i - 2]]:\n    #             print(i)\n    #             break\n    #\n    #\n    # for i in range(1, n + 1):\n    #     if i == 5:\n    #         if a[d[n][i - 1]] < a[d[n][i - 2]]:\n    #             print(i)\n    #             break\n    #\n    #\n    # for i in range(1, n + 1):\n    #     if i == 6:\n    #         if a[d[n][i - 1]] < a[d[n][i - 2]]:\n    #             print(i)\n    #             break\n    #\n    #\n    # for i in range(1, n + 1):\n    #     if i == 7:\n    #         if a[d[n][i - 1]] < a[d[n][i - 2]]:\n    #             print(i)\n    #             break\n    #\n    #\n    # for i in range(1, n + 1):\n    #     if i == 8:\n    #         if a[d[n][i - 1]] < a[d[n][i - 2]]:\n    #             print(i)\n    #             break\n    #\n    #\n    # for i in range(1, n + 1):\n    #     if i == 9:\n    #         if a[d[n][i - 1]] < a[d[n][i - 2]]:\n    #             print(i)\n    #             break\n    #\n    #\n    # for i in range(1, n + 1):\n    #     if i == 10:\n    #         if a[d[n][i - 1]] < a[d[n][i - 2]]:\n    #             print(i)\n    #             break\n    #\n    #\n    # for i in range(1, n + 1):\n    #     if i == 11:\n    #         if a[d[n][i - 1]] < a[d[n][i - 2]]:\n    #             print(i)\n    #             break\n    #\n    #\n    # for i in range(1, n + 1):\n    #     if i == 12:\n    #         if a[d[n][i - 1]] < a[d[n][i - 2]]:\n    #             print(i)\n    #             break\n    #\n    #\n    # for i in range(1, n + 1):\n    #     if i == 13:\n    #         if a[d[n][i - 1]] < a[d[n][i - 2]]:\n    #             print(i)\n    #             break\n    #\n    #\n    # for i in range(1, n + 1):\n    #     if i == 14:\n    #         if a[d[n][i - 1]] < a[d[n][i - 2]]:\n    #             print(i)\n    #             break\n    #\n    #\n    # for i in range(1, n + 1):\n    #     if i == 15:\n    #         if a[d[n][i - 1]] < a[d[n][i - 2]]:\n    #             print(i)\n    #             break\n    #\n    #\n    # for i in range(1, n + 1):\n    #     if i == 16:\n    #         if a[d[n][i - 1]] < a[d[n][i - 2]]:\n    #             print(i)\n    #             break\n    #\n    #\n    # for i in range(1, n + 1):\n    #     if i == 17:\n    #         if a[d[n][i - 1]] < a[d[n][i - 2]]:\n    #             print(i)\n    #             break\n    #\n    #\n    # for i in range(1, n + 1):\n    #     if i == 18:\n    #         if a[d[n][i - 1]] < a[d[n][i - 2]]:\n    #             print(i)\n    #             break\n    #\n    #\n    # for i in range(1, n + 1):\n    #     if i == 19:\n    #         if a[d[n][i - 1]] < a[d[n][i - 2]]:\n    #             print(i)\n    #             break\n    #\n    #\n    # for i in range(1, n + 1):\n    #     if i == 20:\n    #         if a[d[n][i - 1]] < a[d[n][i - 2]]:\n    #             print(i)\n    #             break\n    #\n    #\n    # for i in range(1, n + 1):\n    #     if i == 21:\n    #         if a[d[n][i - 1]] < a[d[n][i - 2]]:\n    #             print(i)\n    #             break\n    #\n    #\n    # for i in range(1,"
    },
    {
        "number": 4058,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def can_heat(arr, pos, heater):\n        return arr[pos - heater + 1] == 1\n\n    def warm_up(arr, heater):\n        for i in range(len(arr)):\n            arr[i] = 0\n\n        for i in range(heater, len(arr)):\n            if arr[i] == 0:\n                arr[i] = 1\n                i += 1\n\n    n, r = map(int, input().split())\n    arr = list(map(int, input().split()))\n\n    can_heat_check = True\n    while can_heat_check:\n        warm_up(arr, r)\n        can_heat_check = False\n\n        for i in range(1, len(arr)):\n            if can_heat(arr, i, r):\n                warm_up(arr, i)\n                can_heat_check = True\n                break\n\n    return len(arr)\n\n\ndef"
    },
    {
        "number": 4058,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, r, *a = list(map(int, stdin.split()))\n    if not n:\n        return -1\n    house = [0] * n\n    for i in range(n):\n        if a[i] == 1:\n            house[i] = 1\n    min_needed = min(sum(house[i:i + r]) for i in range(n))\n    for i in range(n):\n        if house[i] == 1:\n            for j in range(i, i + r):\n                house[j] = 1\n            if sum(house[i:i + r]) > min_needed:\n                min_needed = sum(house[i:i + r])\n    return str(min_needed)\n"
    },
    {
        "number": 4058,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    array = list(map(int, stdin.split()))\n\n    def calculate(left, right, heaters):\n        needed_heaters = 0\n        for i in range(left, right + 1):\n            if heaters[i] == 1:\n                needed_heaters += 1\n        return needed_heaters\n\n    needed_heaters = 0\n    for i in range(0, len(array)):\n        needed_heaters += calculate(i - 1, i, array)\n    for i in range(len(array), n):\n        needed_heaters += calculate(i - 1, i, array)\n        if needed_heaters > r:\n            return -1\n\n    return needed_heaters\n"
    },
    {
        "number": 4058,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, r = stdin.split()\n    n, r = int(n), int(r)\n    a = list(map(int, stdin.split()))\n    a.sort()\n\n    def possible_answers(a, r):\n        if r >= len(a):\n            return -1\n        return max(r, len(a) - r)\n\n    print(possible_answers(a, r))\n\n\nsolution(input())\n"
    },
    {
        "number": 4058,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, r = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    if n == 0 or r == 0:\n        return '-1'\n    elif n == 1:\n        return str(0)\n    else:\n        h = 0\n        for i in range(n):\n            h += a[i]\n            if h >= r:\n                return str(i)\n        return '-1'\n    return '-1'\n"
    },
    {
        "number": 4058,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    _, n, r = stdin.split()\n    n, r = int(n), int(r)\n    a = list(map(int, stdin.split()[1:]))\n    res = 1\n\n    for i in range(n):\n        if a[i] == 1:\n            for j in range(i - r + 1, i + r):\n                if j >= 0 and j < n:\n                    a[j] = 1\n\n    for i in range(n):\n        if a[i] == 0:\n            res = 0\n            break\n    return str(res) if res == 1 else -1\n"
    },
    {
        "number": 4058,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, r = (int(x) for x in stdin.split())\n    a = (int(x) for x in stdin.split())\n    a = list(a)\n\n    def sum_of_n(a):\n        sum = 0\n        for i in range(len(a)):\n            sum += a[i]\n        return sum\n    \n    def possible(a):\n        for i in range(len(a)):\n            if a[i] == 1:\n                for j in range(i - r + 1, i + r):\n                    if j > len(a) - 1:\n                        break\n                    if a[j] == 0:\n                        return False\n        return True\n    \n    if not possible(a):\n        return -1\n    \n    if sum_of_n(a) == 0:\n        return n\n    \n    ans = 0\n    \n    if n < r:\n        return -1\n    \n    while sum_of_n(a) < n:\n        if a.count(1) == 0:\n            break\n        else:\n            if ans < n:\n                ans += 1\n            i = a.index(1)\n            a[i] = 0\n            for j in range(i - r, i + r):\n                if j > len(a) - 1:\n                    break\n                if a[j] == 1:\n                    a[j] = 0\n            if not possible(a):\n                a[i] = 1\n        \n    if ans < n:\n        ans += 1\n    return str(ans)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4058,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, r = [int(i) for i in stdin.split()]\n    arr = [int(i) for i in stdin.split()]\n    house = []\n    for i in range(n):\n        house.append(arr[i])\n    count = 0\n    for i in range(1, len(house) + 1):\n        if count == 0 and sum(house[:i]) == 0:\n            count = i\n        if count > 0 and sum(house[:i]) >= r:\n            count += 1\n    if count == 0:\n        return -1\n    return count\n"
    },
    {
        "number": 4058,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    n, r = map(int, input().split())\n    house = list(map(int, input().split()))\n    if n == 1:\n        print(0)\n        exit()\n\n    houses = [[] for _ in range(n)]\n    for i in range(n):\n        houses[house[i]].append(i)\n\n    # find 2-houses\n    houses_2 = []\n    for i in range(n):\n        if len(houses[i]) > 1:\n            houses_2.append(i)\n\n    # find 3-houses\n    houses_3 = []\n    for i in range(n):\n        if len(houses[i]) > 2:\n            houses_3.append(i)\n\n    ans = -1\n\n    # 1-house\n    if len(houses_2) == 0:\n        return -1\n\n    # 2-houses\n    for house2 in houses_2:\n        house2_neighbors = houses[house2]\n        house2_neighbors.sort()\n        house2_neighbors.append(house2)\n        is_possible = True\n        for i in range(len(houses_3)):\n            if house2_neighbors[0] >= houses_3[i]:\n                house2_neighbors.pop(0)\n                is_possible = False\n            else:\n                houses_3[i].remove(house2_neighbors[0])\n        if is_possible:\n            ans = max(ans, house2)\n\n    # 3-houses\n    for house3 in houses_3:\n        house3_neighbors = houses[house3]\n        house3_neighbors.sort()\n        house3_neighbors.append(house3)\n        is_possible = True\n        for i in range(len(houses_2)):\n            if house3_neighbors[0] >= houses_2[i]:\n                house3_neighbors.pop(0)\n                is_possible = False\n            else:\n                houses_2[i].remove(house3_neighbors[0])\n        if is_possible:\n            ans = max(ans, house3)\n\n    return str(ans)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4058,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, input().split())\n    a = list(map(int, input().split()))\n    res = 0\n    count = 0\n    for i in range(n):\n        if a[i] == 1:\n            count += 1\n    if count >= r:\n        res = count\n    else:\n        return -1\n    count = 0\n    for i in range(n):\n        if a[i] == 0:\n            count += 1\n    if count >= r:\n        res += 1\n    else:\n        return -1\n    count = 0\n    for i in range(n):\n        if a[i] == 1:\n            count += 1\n            if count >= r:\n                res += 1\n                count = 0\n        else:\n            count = 0\n    return str(res)\n"
    },
    {
        "number": 4059,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4059,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = 0\n    b = 0\n    c = 0\n    count = 0\n    for i in range(n+1):\n        for j in range(n+1):\n            for k in range(n+1):\n                if i * a + j * b + k * c == n:\n                    count += 1\n                    a += 1\n                    b += 1\n                    c += 1\n                    break\n    return str(count)"
    },
    {
        "number": 4059,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = 1\n    y = 1\n    z = 1\n    total = 0\n    while x + y + z <= n:\n        x += 1\n        y += 1\n        z += 1\n        total += 1\n    return total\n\nprint(solution(input()))\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4059,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(triplet_count(n))\n\n\ndef"
    },
    {
        "number": 4059,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return sum(1 for _ in range(int(stdin)) if _ * _ + _ > _)\n"
    },
    {
        "number": 4059,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 2:\n        return str(0)\n    if n == 2:\n        return str(1)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(1, n):\n        for j in range(1, i):\n            dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j]\n            # print(dp[i][j])\n    return str(dp[n - 1][n - 1])"
    },
    {
        "number": 4059,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return str(solution_inner(int(stdin)))\n\ndef"
    },
    {
        "number": 4059,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str(solution_helper(int(stdin)))\n\n\ndef"
    },
    {
        "number": 4059,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    ans = 0\n    for i in range(1, N + 1):\n        for j in range(1, N + 1):\n            k = N - i - j\n            if i * j + k == N:\n                ans += 1\n    return str(ans)\n"
    },
    {
        "number": 4059,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return solution_recursive(stdin)\n\ndef"
    },
    {
        "number": 4060,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = int(stdin.split()[0]), stdin.split()[1]\n    len_s = len(s)\n    if len_s % 2!= 0:\n        return 0\n    result = 0\n    while len_s > 0:\n        i = len_s - 1\n        if s[i] == ')':\n            if s[i]!= '(':\n                i -= 1\n                continue\n            if i == 0:\n                break\n            if s[i-1] == '(':\n                i -= 2\n                continue\n            if s[i-1] == ')':\n                i -= 1\n                continue\n            result += 2\n            s = s[:i] + '1' + s[i:]\n            len_s -= 1\n        else:\n            if s[i] == '(':\n                if i == 0:\n                    break\n                if s[i-1] == '(':\n                    result += 1\n                    s = s[:i] + '1' + s[i:]\n                    len_s -= 1\n                    continue\n                if s[i-1] == ')':\n                    result += 1\n                    s = s[:i] + '+' + s[i:]\n                    len_s -= 1\n                    continue\n            result += 1\n            s = s[:i] + '+' + s[i:]\n            len_s -= 1\n    return result\n"
    },
    {
        "number": 4060,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    s_count = len(s)\n    stack = []\n    answer = 0\n    i = 0\n    while i < s_count:\n        if not stack:\n            stack.append(s[i])\n            i += 1\n            continue\n        if stack[-1] == '(' and s[i] == ')':\n            stack.pop()\n            i += 1\n            continue\n        if stack[-1] == '(' and s[i] == '(':\n            stack.pop()\n            i += 1\n            continue\n        if stack[-1] == ')' and s[i] == ')':\n            stack.pop()\n            i += 1\n            continue\n        stack.append(s[i])\n        i += 1\n    while stack:\n        if stack[-1] == '(' or stack[-1] == '(':\n            stack.pop()\n            answer += 1\n        else:\n            stack.pop()\n    return answer\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4060,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    data = list(stdin)\n    while True:\n        if data[0]!= '(':\n            break\n        data.pop(0)\n        while data[-1]!= ')':\n            data.pop()\n        data.pop()\n    while True:\n        if data[-1]!= ')':\n            break\n        data.pop()\n        while data[0]!= '(':\n            data.pop(0)\n    return ''.join(data)\n\nprint(solution(input()))\n\n\ndef"
    },
    {
        "number": 4060,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    n = int(stdin)\n\n    bracket = stdin.replace(')', '1')\n    bracket = bracket.replace('(', '1')\n\n    bracket = bracket.replace('1', ')')\n    bracket = bracket.replace('1', '(')\n\n    bracket = bracket.replace('1', ')')\n    bracket = bracket.replace('1', '(')\n\n    bracket = bracket.replace('1', ')')\n    bracket = bracket.replace('1', '(')\n\n    if len(bracket) % 2!= 0:\n        return 0\n    else:\n        return len(bracket) // 2\n"
    },
    {
        "number": 4060,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return sum(1 for i,c in enumerate(stdin) if c == ')' and (c == ')' or i > 0 and stdin[i-1] == '('))"
    },
    {
        "number": 4060,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    stack = []\n    for i in range(n):\n        stack.append(stdin[i])\n        if i%2 == 1:\n            if stdin[i] == ')':\n                stack.pop()\n    if len(stack) == 0:\n        return \"0\"\n    for i in range(len(stack)):\n        if stack[i] == '(':\n            stack.pop()\n            break\n    if len(stack) == 0:\n        return \"0\"\n    return str(len(stack))\nsolution(input())"
    },
    {
        "number": 4060,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    k = 0\n    p = []\n    for i in range(len(s)):\n        if s[i] == ')':\n            p.append('(')\n        else:\n            p.append(')')\n        if s[i] == '(':\n            k += 1\n    while k!= 0:\n        p.pop()\n        k -= 1\n    if not p:\n        return '0'\n    else:\n        return str(len(p))"
    },
    {
        "number": 4060,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s, stdin = stdin.split()\n    brackets = {')': '(', ']': '[', '}': '{'}\n    stack = []\n    for bracket in s:\n        if bracket in brackets.values():\n            stack.append(bracket)\n        elif bracket in brackets.keys():\n            if len(stack) == 0 or brackets[stack.pop()]!= bracket:\n                return '0'\n\n    if len(stack) > 0:\n        return '0'\n    return '1'\n"
    },
    {
        "number": 4060,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    res = 0\n    for i in range(n):\n        if s[i] == ')':\n            s = s[:i]+'('+s[i+1:]\n        else:\n            s = s[:i]+')'+s[i+1:]\n    return s\n"
    },
    {
        "number": 4060,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    res = 0\n    arr = list(s)\n    i = 0\n    while i < len(arr) - 1:\n        if arr[i] == ')' and arr[i + 1] == '(':\n            arr[i] = '('\n            arr[i + 1] = '1'\n            i += 2\n        elif arr[i] == '(':\n            arr[i] = ')'\n            i += 1\n        res += 1\n    if arr[-1] == ')':\n        arr[-1] = '1'\n    return ''.join(arr)\n"
    },
    {
        "number": 4061,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # remove duplicated and sort in ascending order\n    s = sorted(list(set(stdin)))\n    # print(s)\n\n    # count occurences\n    count_dict = {}\n    for s_i in s:\n        count_dict[s_i] = stdin.count(s_i)\n    # print(count_dict)\n\n    # iterate through dictionary\n    max_length = 0\n    for k, v in count_dict.items():\n        if v > 1:\n            # print(k, v)\n            # break\n            subs = stdin.split(k)\n            # print(subs)\n\n            # if len(subs) > 1:\n            subs_length = 0\n            for sub in subs:\n                if len(sub) > max_length:\n                    max_length = len(sub)\n            # print(max_length)\n    # print(max_length)\n\n    # return maximum length\n    return max_length\n    # return max_length\n"
    },
    {
        "number": 4061,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip().lower()\n    t = stdin.strip().lower()\n    l,r = 0,0\n    while l < len(s) and r < len(s):\n        if s[l] == t[r]:\n            l += 1\n            r += 1\n        else:\n            l += 1\n        if r == len(t):\n            return len(s)-l\n    return len(s)"
    },
    {
        "number": 4061,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # T: O(n)\n    # S: O(n)\n    s, t = stdin.split('\\n')\n\n    s = list(s)\n    t = list(t)\n    i = j = 0\n\n    while i < len(s) and j < len(t):\n        if s[i] == t[j]:\n            i += 1\n            j += 1\n        else:\n            i += 1\n    return i - j\n"
    },
    {
        "number": 4061,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def calculate_diff(string: str) -> int:\n        max_diff = 0\n        for i in range(len(string)):\n            if i > 0:\n                max_diff = max(max_diff, len(string) - i)\n        return max_diff\n\n    string = stdin\n    string_length = len(string)\n    diff = calculate_diff(string)\n    while diff > 0:\n        string = string[1:]\n        diff = calculate_diff(string)\n    return len(string)\n"
    },
    {
        "number": 4061,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n    # Sort both strings\n    t = ''.join(sorted(t))\n    s = ''.join(sorted(s))\n    # print(t)\n    # print(s)\n    count = 0\n    # See if t can be made from s\n    while s:\n        if t == s:\n            break\n        # Remove a character from s\n        s = s[1:]\n        # Count the number of occurrences of the same character\n        count += 1\n        # if count > 2:\n        #     return -1\n    return count\n"
    },
    {
        "number": 4061,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n    if len(t) > len(s):\n        return 0\n    i, j = 0, 0\n    max_length = 0\n    while i < len(s):\n        if j == len(t):\n            break\n        if s[i] == t[j]:\n            i += 1\n            j += 1\n            continue\n        if j == 0:\n            j += 1\n        else:\n            i = j = i + 1\n            continue\n        i += 1\n        j += 1\n        if j >= len(t):\n            break\n    return j\n"
    },
    {
        "number": 4061,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    t = stdin\n    if len(s) < len(t):\n        s, t = t, s\n\n    if s == t:\n        return 0\n    \n    result = 0\n    for i in range(len(s), 0, -1):\n        if s[i - 1]!= t[i - 1]:\n            result = i\n            break\n\n    s = s[:result]\n    l = 0\n    r = len(s) - 1\n    s = s[l:r]\n    if s == t:\n        return result\n    else:\n        return 0"
    },
    {
        "number": 4061,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    s = lines[0]\n    t = lines[1]\n    ans = 0\n    s_length = len(s)\n    t_length = len(t)\n    for i in range(s_length - t_length + 1):\n        string = s[i:i+t_length]\n        if all([string.count(c) <= t.count(c) for c in t]):\n            ans = max(ans, i+1)\n    return str(ans)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4061,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n\n    def is_subsequence(s1, s2):\n        if s1 == s2:\n            return True\n        for i in range(len(s1)):\n            if s1[i] == s2[0]:\n                s1 = s1[i + 1:]\n                s2 = s2[1:]\n                if is_subsequence(s1, s2):\n                    return True\n                else:\n                    s1 = s1[i:]\n        return False\n\n    while True:\n        max_substring_len = 0\n        max_index = -1\n        for i in range(len(s) - 1):\n            if s[i] == s[i + 1]:\n                continue\n            else:\n                for j in range(i + 2, len(s)):\n                    if s[i] == s[j]:\n                        if j - i > max_substring_len:\n                            max_substring_len = j - i\n                            max_index = i\n        if max_substring_len == 0:\n            break\n        s = s[:max_index] + s[max_index + 1:]\n    return len(s)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4061,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    t = stdin\n    s = s.replace(\" \", \"\")\n    t = t.replace(\" \", \"\")\n    s = s.replace(\"\\n\", \"\")\n    t = t.replace(\"\\n\", \"\")\n    return str(max(len(t), len(s) - len(t)))\n"
    },
    {
        "number": 4062,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = stdin.split(' ')\n    a = int(a)\n    b = int(b)\n    c = int(c)\n    d = int(d)\n    if a < c:\n        a = c\n    if b < c:\n        b = c\n    if a > d:\n        a = d\n    if b > d:\n        b = d\n    x = (a+b) - (c+d)\n    y = (a*b) - (c*d)\n    print(x*y)\n\nsolution(input())\n\"\"\""
    },
    {
        "number": 4062,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, *values = map(int, stdin.split())\n    a, b, *c = values\n    return max(a*b, *c)\n\ndef"
    },
    {
        "number": 4062,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return max(stdin.split())"
    },
    {
        "number": 4062,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = (int(_) for _ in stdin.split())\n    if a <= c <= d:\n        if a <= b <= d:\n            return str(c)\n        else:\n            return str(c + d - a)\n    else:\n        if a <= d <= b:\n            return str(c)\n        else:\n            return str(c + b - a)\n"
    },
    {
        "number": 4062,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    #  Read input from STDIN. Print your output to STDOUT\n    a, b, c, d = map(int, stdin.split())\n    if c <= a <= d and b <= c <= d:\n        return str(max(a * b, c * d))\n    if c <= a <= d and b <= d <= d:\n        return str(max(a * b, c * d))\n    if a <= c <= b and d <= c <= b:\n        return str(max(a * b, c * d))\n    if a <= c <= b and d <= d <= b:\n        return str(max(a * b, c * d))"
    },
    {
        "number": 4062,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    x = 1\n    y = 1\n    for x in range(b, d + 1):\n        if a <= x and x <= c:\n            for y in range(d, c - 1, -1):\n                if a <= x and x <= c and y <= d:\n                    return str(x * y)\n"
    },
    {
        "number": 4062,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    return str(max(a * b, c * d))"
    },
    {
        "number": 4062,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A = stdin.split()\n    return '{}'.format(max(int(A[0]), int(A[1])) * max(int(A[2]), int(A[3])))\n"
    },
    {
        "number": 4062,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return max(stdin.split())\n"
    },
    {
        "number": 4062,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    if a <= c <= b and d <= b <= d:\n        return str(b*d)\n    elif c <= a <= d and d <= a <= b:\n        return str(a*b)\n    elif a <= d <= b and c <= b <= d:\n        return str(a*d)\n    elif b <= a <= d and c <= d <= b:\n        return str(b*d)"
    },
    {
        "number": 4063,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    dp = [[0] * (N + 1) for _ in range(3)]\n    dp[0][0] = 1\n    dp[1][0] = 0\n    dp[2][0] = 1\n    for i in range(1, N + 1):\n        dp[0][i] = sum(dp[0][j] for j in range(0, i))\n        dp[1][i] = sum(dp[1][j] for j in range(0, i))\n        dp[2][i] = sum(dp[2][j] for j in range(0, i))\n\n    for i in range(3):\n        print(dp[i])\n    return '\\n'.join(str(i) for i in dp[2])\n\nsolution(input())\n'''\n"
    },
    {
        "number": 4063,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    d: List[int] = list(map(int, stdin.split()))\n    num_problems_with_high_difficulty: int = 0\n    num_problems_with_low_difficulty: int = 0\n    if n % 2 == 0:\n        num_problems_with_high_difficulty = 0\n        num_problems_with_low_difficulty = n\n    else:\n        num_problems_with_high_difficulty = n\n        num_problems_with_low_difficulty = n - 1\n    for i in range(n):\n        if i <= num_problems_with_high_difficulty:\n            if i + 1 <= num_problems_with_high_difficulty:\n                num_problems_with_high_difficulty -= 1\n            if i + 2 <= num_problems_with_high_difficulty:\n                num_problems_with_high_difficulty -= 1\n            if i + 3 <= num_problems_with_high_difficulty:\n                num_problems_with_high_difficulty -= 1\n            if i + 4 <= num_problems_with_high_difficulty:\n                num_problems_with_high_difficulty -= 1\n        if i > num_problems_with_high_difficulty:\n            if i + 1 <= num_problems_with_high_difficulty:\n                num_problems_with_high_difficulty -= 1\n            if i + 2 <= num_problems_with_high_difficulty:\n                num_problems_with_high_difficulty -= 1\n            if i + 3 <= num_problems_with_high_difficulty:\n                num_problems_with_high_difficulty -= 1\n            if i + 4 <= num_problems_with_high_difficulty:\n                num_problems_with_high_difficulty -= 1\n    return f\"{num_problems_with_high_difficulty} {num_problems_with_low_difficulty}\"\n"
    },
    {
        "number": 4063,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    d = sorted(map(int, stdin.split()))\n    return str(2 * sum(d[:n // 2]) - sum(d[n // 2:]))\n"
    },
    {
        "number": 4063,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 == 0:\n        return '1'\n    else:\n        return '2'\n"
    },
    {
        "number": 4063,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, *numbers = map(int, stdin.split())\n    k_choices = 0\n    for i in range(n):\n        if numbers[i] > numbers[i - 1]:\n            k_choices += (n - i) // 2\n        else:\n            k_choices += (n - i) // 2 + 1\n    return str(k_choices)\n"
    },
    {
        "number": 4063,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    d = list(map(int, stdin.split()))\n\n    count = 0\n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            if d[i] > d[j] and d[i] % 2 == 0 and d[j] % 2!= 0:\n                count += 1\n            elif d[i] < d[j] and d[i] % 2!= 0 and d[j] % 2 == 0:\n                count += 1\n\n    return str(count)\n"
    },
    {
        "number": 4063,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    N = int(stdin.strip())\n    list1 = list(map(int, stdin.strip().split()))\n    arr_problem_number_for_arcs = 0\n    arr_problem_number_for_abc = 0\n    for i in range(1, N + 1):\n        if i <= list1[i - 1]:\n            arr_problem_number_for_arcs += 1\n        else:\n            arr_problem_number_for_abc += 1\n    return str(arr_problem_number_for_arcs) + \" \" + str(arr_problem_number_for_abc)\n\nprint(solution(\"6\\n9 1 4 4 6 7\"))\n"
    },
    {
        "number": 4063,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n%2!= 0:\n        return \"0\"\n    d = [int(i) for i in stdin.strip().split()]\n    # print(d)\n    count = 0\n    for i in range(n):\n        # print(d[i])\n        if d[i] >= 5 or d[i] <= 6:\n            count += 1\n    return str(count)\n\nprint(solution(\"5 1 4 4 6 7\"))\nprint(solution(\"6 1 4 4 6 7\"))\nprint(solution(\"6 2 4 4 6 7\"))\nprint(solution(\"6 3 4 4 6 7\"))\nprint(solution(\"6 4 4 4 6 7\"))\nprint(solution(\"6 5 4 4 6 7\"))\nprint(solution(\"5 5 5 5 5 5\"))\nprint(solution(\"5 5 5 5 5 5 5\"))\nprint(solution(\"5 6 6 6 6 6 6\"))\nprint(solution(\"5 7 7 7 7 7 7\"))\nprint(solution(\"5 8 8 8 8 8 8\"))\nprint(solution(\"5 9 9 9 9 9 9\"))\nprint(solution(\"6 2 2 2 2 2 2\"))\n"
    },
    {
        "number": 4063,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    d = list(map(int, stdin.split()))\n    if N % 2 == 0:\n        odd = d\n        even = d\n    else:\n        odd = d[::2]\n        even = d[1::2]\n    if all(odd[i] >= odd[i-1] for i in range(1, len(odd))):\n        odd = sorted(odd)\n        even = sorted(even)\n    if all(even[i] >= even[i-1] for i in range(1, len(even))):\n        odd = sorted(odd, reverse=True)\n        even = sorted(even, reverse=True)\n    return str(sum(odd) + sum(even))\n"
    },
    {
        "number": 4063,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    d_1 = int(stdin.strip().split(' ')[0])\n    d_2 = int(stdin.strip().split(' ')[1])\n    d_3 = int(stdin.strip().split(' ')[2])\n    d_4 = int(stdin.strip().split(' ')[3])\n    d_5 = int(stdin.strip().split(' ')[4])\n    return '2' if (d_1 == d_2 or d_3 == d_4) and (d_1 == d_5 or d_3 == d_4) else '1'"
    },
    {
        "number": 4064,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = map(int, stdin.split())\n    l += h\n    r += h\n    times = 0\n    goods = 0\n    current = 0\n    for i in range(n):\n        current = max(current, l + r - h)\n        if r > l:\n            if h - i > r - l:\n                current = max(current, l + h - i - 1)\n            if h - i < r - l:\n                current = max(current, l + h - i - 1)\n        times += current\n        l += h\n        r += h\n        goods = max(goods, times)\n    return goods\nprint(solution(input()))\n"
    },
    {
        "number": 4064,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    n, h, l, r = map(int, stdin[0].split())\n    a = sorted(map(int, stdin[1].split()))\n    cnt = 0\n    for ai in a:\n        if (ai - h) % l <= ai <= (ai + r) % h:\n            cnt += 1\n    return str(cnt)\n"
    },
    {
        "number": 4064,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    maxi = 0\n    best = 0\n    last = 0\n    for i in range(n):\n        if (h - l) <= a[i] - last:\n            last = a[i]\n            if a[i] - (h - l) == 1:\n                maxi += 1\n                best = max(best, maxi)\n            else:\n                maxi = 0\n\n        else:\n            if a[i] - (h - l) == 1:\n                maxi += 1\n                best = max(best, maxi)\n            else:\n                maxi = 0\n\n        if i == n - 1:\n            if a[i] - (h - l) == 1:\n                maxi += 1\n                best = max(best, maxi)\n            else:\n                maxi = 0\n\n    print(best)\n    return\n\nsolution(\"7 24 21 23\")\nsolution(\"1 2 3\")\nsolution(\"5 10 3\")"
    },
    {
        "number": 4064,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n, h, l, r = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    max_i = 0\n    l, r = l, r\n    for i in range(n):\n        if a[i] > l:\n            l = a[i]\n            max_i = i\n        elif a[i] > r:\n            r = a[i]\n    if l > r:\n        l, r = r, l\n    if l >= h:\n        return 0\n    i = 0\n    while i < n:\n        if a[i] >= l:\n            if i!= max_i:\n                l += r - l\n            i += 1\n        else:\n            r -= a[i] - l\n            i += 1\n    return n - i\n"
    },
    {
        "number": 4064,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def day_of_the_week(hour: int) -> str:\n        return \"Monday\" if hour < 6 else \"Tuesday\" if hour < 11 else \"Wednesday\" if hour < 17 else \"Thursday\" if hour < 23 else \"Friday\"\n\n    def time_to_sleep(sleep_time: int, start: int) -> int:\n        if sleep_time > start:\n            return sleep_time - start\n        return 0\n\n    def can_sleep(start: int, sleep_times: int, good_time: int) -> int:\n        return sleep_times * sleep_time - sum([time_to_sleep(i, start) for i in range(good_time - 1, good_time)])\n\n    h, l, r = map(int, stdin.split())\n    start = 0\n    for i in range(1, h + 1):\n        start = max(start, l + i * (r - l) // h)\n\n    return max(can_sleep(start, i, int(i)) for i in range(1, h + 1))\n\nprint(solution(input()))"
    },
    {
        "number": 4064,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n  n, h, l, r = map(int, stdin.split())\n  a_s = list(map(int, stdin.split()))\n  times = 0\n  i = 0\n  while i < n:\n    if i + 1 >= n:\n      if a_s[i] >= h:\n        times = max(times, 1)\n        break\n      else:\n        i += 1\n    else:\n      if a_s[i] >= h and a_s[i+1] <= r:\n        times = max(times, 1)\n        i += 2\n      else:\n        i += 1\n  return times\n"
    },
    {
        "number": 4064,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = map(int, stdin.split())\n    if r > h:\n        return '-1'\n    times = {}\n    for i in range(n):\n        a = int(stdin.split()[i])\n        if a < l:\n            continue\n        if a == l and i!= 0:\n            continue\n        if a == l:\n            times[l] = 1\n        elif a == r:\n            times[r] = 1\n        else:\n            times[l] = times[l] + 1\n            times[a] = times[a] + 1\n            times[a + 1] = times[a + 1] + 1\n\n    # print(times)\n    # print(l,r)\n    # print(times[l])\n    # print(times[r])\n    max_good = -1\n    for key in sorted(times.keys()):\n        if key == l:\n            continue\n        if key == r:\n            continue\n        if times[key] >= 2:\n            # print('good', key, times[key])\n            max_good = max(max_good, times[key])\n    return str(max_good)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4064,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = map(int, stdin.split())\n    a_list = list(map(int, stdin.split()))\n    count = 0\n    for i in range(n):\n        while a_list[i] < h:\n            a_list[i] += 1\n            count = max(count, a_list[i] - l)\n        if a_list[i] < r:\n            while a_list[i] > h - 1:\n                a_list[i] -= 1\n                count = max(count, a_list[i] - l)\n    return count\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4064,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    [n, h, l, r] = list(map(int, stdin.split()))\n\n    for i in range(n):\n        [x, y] = list(map(int, stdin.split()))\n\n        if x <= h and y > h:\n            h = y\n            l = x\n\n        if y >= h and x <= h:\n            if x == h:\n                return str(i)\n            else:\n                h = x\n                r = y\n\nn, h, l, r = map(int, input().split())\n\nfor i in range(n):\n    x, y = map(int, input().split())\n    if x <= h and y > h:\n        h = y\n        l = x\n    if y >= h and x <= h:\n        if x == h:\n            return str(i)\n        else:\n            h = x\n            r = y\n\nprint(r - l)\n"
    },
    {
        "number": 4064,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, h, l, r = list(map(int, stdin.split()))\n    a_list = list(map(int, stdin.split()))\n    a_list.sort()\n\n    best = 0\n    for i in range(len(a_list)):\n        if a_list[i] < h:\n            best = max(best, 2*(a_list[i] - l) + 1)\n        else:\n            best = max(best, 2*(h - a_list[i] - 1) + 1)\n\n    return str(best)\n"
    },
    {
        "number": 4065,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    problems = list(map(int, stdin.strip().split()))\n    return str(max(sum(1 for prob in problems if prob >= 2*prob), 1))"
    },
    {
        "number": 4065,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return '%d' % max(len(list(filter(lambda x: x > 2 * y, sorted(map(int, stdin.split())))[-1:])) for y in map(int, sorted(stdin.split())))"
    },
    {
        "number": 4065,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n  n = int(stdin.split()[0])\n  diff = sorted(int(stdin.split()[1]) for _ in range(n))\n  return str(len(set(diff[i] * 2 for i in range(n - 1) if diff[i] * 2 > diff[i + 1])))\n"
    },
    {
        "number": 4065,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n  num_problems, *problems = list(map(int, stdin.split()))\n  min_difficulty = -1\n  max_difficulty = 0\n  for problem in problems:\n    if problem > max_difficulty:\n      max_difficulty = problem\n      continue\n    if problem * 2 > max_difficulty:\n      max_difficulty = problem * 2\n      continue\n    if problem * 2 <= max_difficulty and problem > min_difficulty:\n      min_difficulty = problem * 2\n  return str(max(min_difficulty, max_difficulty, num_problems))\n"
    },
    {
        "number": 4065,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n  def combine(n: int) -> list:\n    return sorted(map(int, stdin.split()))[:n]\n\n  def count(a: list, b: list) -> int:\n    cnt = 0\n    for i in range(len(a)):\n      if a[i] <= b[i]:\n        cnt += 1\n    return cnt\n\n  n = int(stdin.split()[0])\n  diff = sorted(map(int, stdin.split()[1:]))\n  cnt = 0\n  for i in range(n):\n    if diff[i] > 2*diff[i-1]:\n      cnt += count(diff[:i], diff)\n  return str(cnt)\n"
    },
    {
        "number": 4065,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    problemset = sorted([int(x) for x in stdin.split()])\n    problemset = set(problemset)\n    problemset = list(problemset)\n    #print(problemset)\n\n    if n <= 1:\n        return str(0)\n\n    result = 0\n\n    if n == 2:\n        result = 1\n        return str(result)\n\n    for i in range(n-1):\n        #print(i)\n        if 2*problemset[i] <= problemset[i+1]:\n            #print(2*problemset[i], problemset[i+1])\n            result += 1\n\n    return str(result)\n\n\n\nprint(solution(input()))"
    },
    {
        "number": 4065,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n  n = int(stdin)\n  diffs = list(map(int, stdin.split()))\n  best = 0\n  for i in range(1, n):\n    if diffs[i] > diffs[best]:\n      best = i\n  return str(best + 1)\n"
    },
    {
        "number": 4065,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n  n, *a = map(int, stdin.split())\n  return str(max([len(list(filter(lambda x: a[x - 1] * 2 <= x <= x * 2, range(1, n)))) + 1, n]))\n"
    },
    {
        "number": 4065,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    list_of_numbers = list(map(int, stdin.readline().split()))\n    max_val = max(list_of_numbers)\n    contest_set = []\n    while len(list_of_numbers)!= 0:\n        #print(f\"list_of_numbers: {list_of_numbers}\")\n        #print(f\"max_val: {max_val}\")\n        #print(f\"contest_set: {contest_set}\")\n        if len(contest_set) == 0:\n            contest_set.append(list_of_numbers.pop(0))\n        else:\n            if max_val >= list_of_numbers[0] * 2:\n                contest_set.append(list_of_numbers.pop(0))\n            else:\n                list_of_numbers.pop(0)\n        #print(f\"contest_set: {contest_set}\")\n        max_val = max(contest_set)\n        #print(f\"max_val: {max_val}\")\n        if len(contest_set) == 0:\n            if len(list_of_numbers) > 0:\n                contest_set.append(list_of_numbers.pop(0))\n            else:\n                break\n    #print(f\"max_val: {max_val}\")\n    if len(contest_set) > 0:\n        #print(f\"contest_set: {contest_set}\")\n        return len(contest_set)\n    else:\n        return 1\n\n\ndef"
    },
    {
        "number": 4065,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    problems = list(map(int, stdin.split()))\n    diffs = [problems[i] - problems[i - 1] for i in range(1, n)]\n    problems.pop()\n    problems.sort()\n    count = 1\n    for i in range(1, n):\n        if diffs[i] > diffs[i - 1] * 2:\n            count += 1\n    return str(count)\n\n\ndef"
    },
    {
        "number": 4066,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    nums = list(map(int, stdin.split()))\n    def gcd(x, y):\n        return x if y == 0 else gcd(y, x % y)\n    def lcm(x, y):\n        return x * y // gcd(x, y)\n    a = sorted(nums)\n    ans = None\n    for i in range(len(a)):\n        for j in range(i + 1, len(a)):\n            if lcm(a[i], a[j]) == min(a[i], a[j]):\n                ans = (i, j)\n                break\n    if ans == None:\n        return 'No such pair'\n    else:\n        return str(ans[0] + 1) +'' + str(ans[1] + 1)\n"
    },
    {
        "number": 4066,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a = sorted(a)\n\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if a[i] * a[j] == min(a[i] * a[j], a[j] * a[i]):\n                print(i + 1, j + 1)\n                return\n    print(-1, -1)"
    },
    {
        "number": 4066,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return stdout\n"
    },
    {
        "number": 4066,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = sorted(map(int, stdin.split()))\n    lcm = lambda x, y: x * y // gcd(x, y)\n    i = 0\n    while i < len(a):\n        j = i + 1\n        while j < len(a) and a[j] % a[i] == 0:\n            j += 1\n        print(i + 1, j - 1)\n        i = j\n\n\nsolution(\"5 2 4 8 3 6\")\n"
    },
    {
        "number": 4066,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    import sys\n    sys.stdin = open(r\"C:\\Users\\Mariano\\PycharmProjects\\TIL\\venv\\Scripts\\input.txt\")\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    for i in range(n):\n        for j in range(i, n):\n            if (a[i] * a[j]) % (a[i] + a[j]) < (a[i] + a[j]) % (a[i] * a[j]):\n                print(i, j)\n    return \"\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4066,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    array = list(map(int, stdin.split()))\n\n    for i in range(len(array)):\n        for j in range(i+1, len(array)):\n            if lcm(array[i], array[j]) == min(array[i], array[j]):\n                return f\"{i+1} {j+1}\""
    },
    {
        "number": 4066,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1]))\n    # print(n, a)\n\n    res = (10 ** 10)\n\n    for i in range(n):\n        for j in range(i+1, n):\n            if res > abs(lcm(a[i], a[j])):\n                res = abs(lcm(a[i], a[j]))\n                ind1 = i\n                ind2 = j\n    print(ind1, ind2)\n    return\n\n\ndef"
    },
    {
        "number": 4066,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1]))\n    ans = -1\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] * a[j] % n == 0:\n                ans = min(ans, a[i], a[j])\n    print(ans)\n    return \"\"\n"
    },
    {
        "number": 4066,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    inp = [int(x) for x in stdin.split()]\n    inp = sorted(inp)\n    count = 0\n    for i in range(len(inp)-1):\n        if inp[i] * inp[i+1] >= inp[i+1] * inp[i]:\n            count += 1\n    print(inp.index(max(inp)) + 1, inp.index(min(inp)) + 1)\n\nsolution()"
    },
    {
        "number": 4066,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.split()))\n    for i in range(n):\n        for j in range(i + 1, n):\n            if lcm(a[i], a[j]) < min(a):\n                min_i = i\n                min_j = j\n    return f\"{min_i} {min_j}\"\n"
    },
    {
        "number": 4067,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = stdin.split()\n    return n + min(s, str(1 - int(s)), str(2 - int(s)) + str(1 - int(s)))\n"
    },
    {
        "number": 4067,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    n = len(s)\n    cnt_0 = 0\n    cnt_1 = 0\n    cnt_2 = 0\n    arr = []\n    for i in range(n):\n        if s[i] == '0':\n            cnt_0 += 1\n        elif s[i] == '1':\n            cnt_1 += 1\n        else:\n            cnt_2 += 1\n    print(cnt_0,cnt_1,cnt_2)\n    # cnt_0 = cnt_1 = cnt_2 = 0\n    if cnt_0 < cnt_1:\n        if cnt_0 < cnt_2:\n            arr.append('0')\n            cnt_0 += 1\n        else:\n            arr.append('1')\n            cnt_1 += 1\n    elif cnt_1 < cnt_2:\n        arr.append('1')\n        cnt_1 += 1\n    else:\n        arr.append('2')\n        cnt_2 += 1\n    print(arr)\n    return ''.join(arr)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4067,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4067,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.strip().replace(\"0\", \"1\")\n    a = a.replace(\"1\", \"0\")\n    a = a.replace(\"2\", \"1\")\n    return a\n\nsolution(stdin)\n"
    },
    {
        "number": 4067,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    n = int(s[0])\n    s = s[1]\n    return ''.join(sorted(set(s), key=s.index))\n\n\ndef"
    },
    {
        "number": 4067,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    str_with_0 = stdin.replace(\"2\", \"0\")\n    str_with_1 = stdin.replace(\"2\", \"1\")\n    str_with_2 = stdin.replace(\"2\", \"2\")\n\n    str_with_0_min = len(str_with_0)\n    str_with_1_min = len(str_with_1)\n    str_with_2_min = len(str_with_2)\n\n    if str_with_0_min < str_with_1_min and str_with_0_min < str_with_2_min:\n        return str_with_0\n    elif str_with_1_min < str_with_0_min and str_with_1_min < str_with_2_min:\n        return str_with_1\n    else:\n        return str_with_2\n\nprint(solution(input()))\n\nimport math\n\ndef"
    },
    {
        "number": 4067,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.rstrip())\n    s = stdin.rstrip()\n    return str(format(s, \"021\"))\n"
    },
    {
        "number": 4067,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    if n == 1:\n        return \"0\"\n    if n == 2:\n        if s[1] == \"1\":\n            return \"0\" + \"0\"\n        else:\n            return \"0\" + \"1\"\n    if n == 3:\n        if s[2] == \"2\":\n            return \"0\" + \"0\"\n        else:\n            return \"0\" + \"1\"\n\n    if n == 4:\n        if s[2] == \"1\" and s[3] == \"0\":\n            return \"0\" + \"0\"\n        elif s[3] == \"1\" and s[2] == \"0\":\n            return \"0\" + \"1\"\n        else:\n            return \"0\" + \"2\"\n\n    if n == 5:\n        if s[4] == \"2\":\n            return \"0\" + \"1\"\n        else:\n            return \"0\" + \"2\"\n\n    if n == 6:\n        if s[5] == \"1\":\n            return \"0\" + \"1\"\n        else:\n            return \"0\" + \"2\"\n"
    },
    {
        "number": 4067,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    for i in range(3, 10 ** 5, 3):\n        s = s.replace('0' * i, '0123')\n        s = s.replace('1' * i, '0231')\n        s = s.replace('2' * i, '1203')\n    return s\n"
    },
    {
        "number": 4067,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.rstrip()\n    l = len(stdin)\n    count = 0\n    for i in range(l):\n        if stdin[i] == '0':\n            count += 1\n    for i in range(l):\n        if stdin[i] == '1':\n            count += 1\n        else:\n            count -= 1\n    for i in range(l):\n        if stdin[i] == '2':\n            count += 1\n        else:\n            count -= 1\n    return stdin if count == 0 else solution(stdin[:i] + '0' + stdin[i + 1:])\nprint(solution(input()))\n"
    },
    {
        "number": 4068,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(' ')\n    n = int(stdin[0])\n    m = int(stdin[1])\n    a_1 = int(stdin[2])\n    a_2 = int(stdin[3])\n    a_3 = int(stdin[4])\n    a_4 = int(stdin[5])\n    return solutions(n, m, a_1, a_2, a_3, a_4)\n\ndef"
    },
    {
        "number": 4068,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = stdin.split(' ')\n    n = int(n)\n    m = int(m)\n    ans = 0\n    a = []\n    for i in range(1, n + 1):\n        a.append(i)\n    for i in range(1, n + 1):\n        for j in range(m):\n            if i == j + a[j] + 1:\n                ans += 1\n    return ans % (1e6 + 7)\n"
    },
    {
        "number": 4068,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = (int(_) for _ in stdin.split())\n    a = list(int(_) for _ in stdin.split())\n    d = {}\n    for i in range(1, n):\n        d[i] = 0\n        if i in d:\n            continue\n        if a[i] == 0:\n            d[i] = 1\n    for i in range(2, n):\n        for j in range(1, i):\n            if a[i] == j:\n                if i not in d or j not in d:\n                    continue\n                d[i] += d[j]\n    print(d[n])\n"
    },
    {
        "number": 4068,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    [*] Input:\n        - stdin: The input data.\n    [*] Output:\n        - A string, representing the solution\n    [*] Preconditions:\n        - None\n    [*] Postconditions:\n        - None\n    '''\n    # *** Write your code below this line ***\n    # *** Do not modify the below code ***\n    # YOUR CODE HERE\n    return stdin\n\n\ndef"
    },
    {
        "number": 4068,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    cache = {0: 1}\n    for i in range(1, m + 1):\n        cache[i] = cache[i - 1] * (i + 1)\n        if i > 1:\n            cache[i] -= cache[i - 2]\n    return str(cache[m])\n"
    },
    {
        "number": 4068,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def a_1(n: int, m: int) -> int:\n        if n == m:\n            return 1\n        if n > m:\n            return 0\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        return a_1(n - 1, m) + a_1(n - 2, m)\n\n    def a_2(n: int, m: int) -> int:\n        if n == m:\n            return 1\n        if n == 1:\n            return 2\n        if n == 2:\n            return 4\n        if n == 3:\n            return 7\n        return a_2(n - 1, m) + a_2(n - 2, m) + a_2(n - 3, m)\n\n    def a_3(n: int, m: int) -> int:\n        if n == m:\n            return 1\n        if n == 1:\n            return 2\n        if n == 2:\n            return 3\n        if n == 3:\n            return 4\n        return a_3(n - 1, m) + a_3(n - 2, m) + a_3(n - 3, m)\n\n    def a_4(n: int, m: int) -> int:\n        if n == m:\n            return 1\n        if n == 1:\n            return 2\n        if n == 2:\n            return 3\n        if n == 3:\n            return 4\n        return a_4(n - 1, m) + a_4(n - 2, m) + a_4(n - 3, m)\n\n    n, m = list(map(int, stdin.split(\" \")))\n    return str(a_1(n, m) + a_2(n, m) + a_3(n, m) + a_4(n, m))\n"
    },
    {
        "number": 4068,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\" \")\n    N = int(stdin[0])\n    M = int(stdin[1])\n    a_1 = int(stdin[2])\n    a_2 = int(stdin[3])\n\n    if a_1 == 0 and a_2 == 0:\n        return \"0\"\n\n    if a_1 == 0 or a_2 == 0:\n        return \"1\"\n\n    if a_1 == 1 or a_2 == 1:\n        return \"2\"\n\n    if a_1 == 2 or a_2 == 2:\n        return \"4\"\n\n    if a_1 == 3 or a_2 == 3:\n        return \"6\"\n\n    if a_1 == 4 or a_2 == 4:\n        return \"8\"\n\n    if a_1 == 5 or a_2 == 5:\n        return \"10\"\n\n    if a_1 == 6 or a_2 == 6:\n        return \"12\""
    },
    {
        "number": 4068,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    dp = [0] * (n+1)\n    dp[0] = 1\n    for i in range(n+1):\n        if dp[i]:\n            if i + 1 <= m:\n                dp[i+1] += dp[i]\n            if i + 2 <= m:\n                dp[i+2] += dp[i]\n    return str(dp[n])"
    },
    {
        "number": 4068,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    inp = stdin.strip().split(\" \")\n    n = int(inp[0])\n    m = int(inp[1])\n\n    mem = {}\n    mem[0] = 1\n    mem[1] = 1\n    mem[2] = 2\n\n    for i in range(3, n + 1):\n        for j in range(m):\n            if j == 0:\n                mem[i] = mem[i - 1]\n            elif j == 1:\n                mem[i] = mem[i - 1] + mem[i - 2]\n            elif j == 2:\n                mem[i] = mem[i - 1] + mem[i - 2] + mem[i - 3]\n            else:\n                mem[i] = mem[i - 1] + mem[i - 2] + mem[i - 3] + mem[i - 4]\n    return str(mem[n])\n"
    },
    {
        "number": 4068,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    inpts = stdin.split()\n    n = int(inpts[0])\n    m = int(inpts[1])\n    a_1 = int(inpts[2])\n    if n >= 1 and m >= 1 and n <= 100000 and m <= 100000 and a_1 <= n and a_1 >= 0:\n        num_ways = find_num_ways(n, a_1)\n        print(num_ways)\n    else:\n        print(0)\n\n\ndef"
    },
    {
        "number": 4069,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, d = map(int, stdin.split())\n    if (n - d) < 0:\n        return \"impossible\"\n    return abs(n - d)\n"
    },
    {
        "number": 4069,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    X, K, D = map(int, stdin.split())\n    min_abs = -1\n    curr_x = X\n    for i in range(K):\n        curr_x = curr_x + D\n        if -10 ** 15 <= curr_x and curr_x <= 10 ** 15:\n            if min_abs == -1 or abs(curr_x - X) < min_abs:\n                min_abs = abs(curr_x - X)\n    return str(min_abs)\n"
    },
    {
        "number": 4069,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin_list = stdin.split('\\n')\n\n    x, k, d = stdin_list[0].split()\n    x = int(x)\n    k = int(k)\n    d = int(d)\n\n    x_list = list(str(x))\n    x_list = x_list[1:] + x_list[:1]\n    x_list = [int(i) for i in x_list]\n\n    move_list = []\n    for i in range(k):\n        move_list.append(x_list[i * 2] - x_list[i * 2 + 1])\n    print(min(move_list))\n    return '0'\n\nprint(solution(input()))\n'''"
    },
    {
        "number": 4069,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x, k, d = list(map(int, stdin.split()))\n    max_x = x + d\n    min_x = x - d\n\n    if k <= x <= max_x and k <= d <= max_x:\n        if max_x - min_x == 0:\n            return \"0\"\n        return str(min_x)\n    else:\n        return str(max_x)"
    },
    {
        "number": 4069,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n\n    x = int(stdin[0])\n    k = int(stdin[1])\n    d = int(stdin[2])\n\n    min_distance = min(x, abs(x + d), abs(x - d))\n    if min_distance == abs(x + d):\n        return str(min_distance)\n\n    if min_distance == abs(x - d):\n        return str(min_distance)\n\n    return str(min_distance + k)\n"
    },
    {
        "number": 4069,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x, k, d = map(int, stdin.split())\n    return str(min(abs(x - x), abs(x + d)))\n"
    },
    {
        "number": 4069,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x, k, d = map(int, stdin.split())\n    ans = 0\n    for _ in range(k):\n        ans += d\n        if ans < 0:\n            ans += 2 * d\n    print(ans)\n    return ans"
    },
    {
        "number": 4069,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    X, K, D = map(int, stdin.split())\n    D = D if K <= X else -D\n    return str(min(abs(X + d) for d in range(D + 1)))\n\ndef"
    },
    {
        "number": 4069,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return '1'\n\"\"\"\n\nX, K, D = map(int, stdin.split())"
    },
    {
        "number": 4069,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    num_x, k, d = stdin.split()\n    x, k, d = int(num_x), int(k), int(d)\n    x -= 1\n    for _ in range(k):\n        x += d\n        if x < 0:\n            x = 0\n        elif x >= 10**15:\n            x = x - 10**15\n    return str(abs(x))\n"
    },
    {
        "number": 4070,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = int(n // 100)\n    b = int((n // 10) % 10)\n    c = int(n % 10)\n\n    t = a + b + c\n    x = a * 10 + b + c\n    z = a * 100 + b + c\n\n    if (t == n):\n        return \"YES\"\n    elif (t > n):\n        return \"NO\"\n    elif (x == n):\n        return \"YES\"\n    elif (x > n):\n        return \"NO\"\n    else:\n        return \"NO\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4070,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = int(stdin)\n    return str(stdin) if stdin < 2**32 else str(int(str(stdin)[::-1])-1)\n\nsolution(11) == '21'\nsolution(14) == '10'\nsolution(61441) == '61'\nsolution(2128506) == '100'\nsolution('2128506') == '100'"
    },
    {
        "number": 4070,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 3:\n        return '0'\n    elif n <= 10:\n        return str(n)\n    else:\n        return str(n)\n"
    },
    {
        "number": 4070,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    test_input = stdin.split('\\n')\n    n = int(test_input[0])\n    return str(2 ** ((n - 1) // 2))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4070,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    factorials = [1]\n    for i in range(1, n+1):\n        factorials.append(factorials[-1] * i)\n    print(factorials)\n    for i in range(1, n+1):\n        for j in range(i, n+1):\n            if factorials[i] == factorials[j] and i!= j:\n                return \"1\"\n    return \"0\"\nsolution(input())\n\nclass Solution:\n    def solve(self, n):\n        factorials = [1]\n        for i in range(1, n+1):\n            factorials.append(factorials[-1] * i)\n        for i in range(1, n+1):\n            for j in range(i, n+1):\n                if factorials[i] == factorials[j] and i!= j:\n                    return 1\n        return 0\n\n\nclass Solution:\n    def solve(self, n):\n        def fact(n):\n            if n == 0:\n                return 1\n            return n * fact(n - 1)\n\n        return int(fact(n) / (fact(n - n) * fact(n - 1)))\n\nclass Solution:\n    def solve(self, n):\n        factorials = [1]\n        for i in range(1, n + 1):\n            factorials.append(factorials[-1] * i)\n        return sum(factorials)\n\n\nclass Solution:\n    def solve(self, n):\n        factorials = [1]\n        for i in range(1, n + 1):\n            factorials.append(factorials[-1] * i)\n        return factorials.index(factorials[-1])\n\n\nclass Solution:\n    def solve(self, n):\n        factorials = [1]\n        for i in range(1, n + 1):\n            factorials.append(factorials[-1] * i)\n        for i in range(1, n + 1):\n            for j in range(i, n + 1):\n                if factorials[i] == factorials[j] and i!= j:\n                    return 1\n        return 0\n\n\nclass Solution:\n    def solve(self, n):\n        factorials = [1]\n        for i in range(1, n + 1):\n            factorials.append(factorials[-1] * i)\n        for i in range(1, n + 1):\n            for j in range(i, n + 1):\n                if factorials[i] == factorials[j] and i!= j:\n                    return 1\n        return 0\n\nclass Solution:\n    def solve(self, n):\n        factorials = [1]\n        for i in range(1, n + 1):\n            factorials.append(factorials[-1] * i)\n        return factorials.index(factorials[-1])\n\n\nclass Solution:\n    def solve(self, n):\n        factorials = [1]\n        for i in range(1, n + 1):\n            factorials.append(factorials[-1] * i)\n        for i in range(1, n + 1):\n            for j in range(i, n + 1):\n                if factorials[i] == factorials[j] and i!= j:\n                    return 1\n        return 0\n\nclass Solution:\n    def solve(self, n):\n        factorials = [1]\n        for i in range(1, n + 1):\n            factorials.append(factorials[-1] * i)\n        return factorials.index(factorials[-1])\n"
    },
    {
        "number": 4070,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    # n = 100\n    # 1000000\n    # 1000000000\n    # 10000000000\n    # 1000000000000000000\n    # 100000000000000000000000000\n\n    # n = 4\n    # 100\n\n    # n = 5\n    # 101\n\n    # n = 6\n    # 110\n\n    # n = 9\n    # 1000000001\n\n    # n = 10\n    # 10000000001\n\n    # n = 15\n    # 10000000002\n\n    # n = 16\n    # 10000000003\n\n    # n = 17\n    # 10000000004\n\n    # n = 18\n    # 10000000005\n\n    # n = 19\n    # 10000000006\n\n    # n = 20\n    # 10000000007\n\n    # n = 23\n    # 10000000008\n\n    # n = 24\n    # 10000000009\n\n    # n = 25\n    # 10000000010\n\n    # n = 26\n    # 10000000011\n\n    # n = 27\n    # 10000000012\n\n    # n = 28\n    # 10000000013\n\n    # n = 29\n    # 10000000014\n\n    # n = 30\n    # 10000000015\n\n    # n = 31\n    # 10000000016\n\n    # n = 32\n    # 10000000017\n\n    # n = 33\n    # 10000000018\n\n    # n = 34\n    # 10000000019\n\n    # n = 35\n    # 10000000020\n\n    # n = 36\n    # 10000000021\n\n    # n = 37\n    # 10000000022\n\n    # n = 38\n    # 10000000023\n\n    # n = 39\n    # 10000000024\n\n    # n = 40\n    # 10000000025\n\n    # n = 41\n    # 10000000026\n\n    # n = 42\n    # 10000000027\n\n    # n = 43\n    # 10000000028\n\n    # n = 44\n    # 10000000029\n\n    # n = 45\n    # 10000000030\n\n    # n = 46\n    # 10000000031\n\n    # n = 47\n    # 10000000032\n\n    # n = 48\n    # 10000000033\n\n    # n = 49\n    # 10000000034\n\n    # n = 50\n    # 10000000035\n\n    # n = 51\n    # 10000000036\n\n    # n = 52\n    # 10000000037\n\n    # n = 53\n    # 10000000038\n\n    # n = 54\n    # 10000000039\n\n    # n = 55\n    # 10000000040\n\n    # n = 56\n    # 10000000041\n\n    # n = 57\n    # 10000000042\n\n    # n = 58\n    # 10000000043\n\n    # n = 59\n    # 10000000044\n\n    # n = 60\n    # 10000000045\n\n    # n = 61\n    # 10000000046\n\n    # n = 62\n    # 10000000047\n\n    # n = 63\n    # 10000000048\n\n    # n = 64\n    # 10000000049\n\n    # n = 65\n    # 10000000050\n\n    # n = 66\n    # 10000000051\n\n    # n = 67\n    # 10000000052\n\n    # n = 68\n    # 10000000053\n\n    # n = 69\n    # 10000000054\n\n    # n = 70\n    # 10000000055\n\n    # n = 71\n    # 10000000056\n\n    # n = 72\n    # 10000000057\n\n    # n = 73\n    # 10000000058\n\n    # n = 74\n    # 10000000059\n\n    # n = 75\n    # 10000000060\n\n    # n = 76\n    # 10000000061\n\n    # n = 77\n    # 10000000062\n\n    # n = 78\n    # 10000000063\n\n    # n = 79\n    # 10000000064\n\n    # n = 80\n    # 10000000065\n\n    # n = 81\n    # 10000000066\n\n    # n = 82\n    # 10000000067\n\n    # n = 83\n    # 10000000068\n\n    # n = 84\n    # 10000000069\n\n    # n = 85\n    # 10000000070\n\n    # n = 86\n    # 10000000071\n\n    # n = 87\n    # 10000000072\n\n    # n = 88\n    # 10000000073\n\n    # n = 89\n    # 10000000074\n\n    # n = 90\n    # 10000000075\n\n    # n = 91\n    # 10000000076\n\n    # n = 92\n    # 10000000077\n\n    # n = 93\n    # 10000000078\n\n    # n = 94\n    # 10000000079\n\n    # n = 95\n    # 10000000080\n\n    # n = 96\n    # 10000000081\n\n    # n = 97\n    # 10000000082\n\n    # n = 98\n    # 10000000083\n\n    # n = 99\n    # 10000000084\n\n    # n = 100\n    # 10000000085\n\n    # n = 101\n    # 10000000086\n\n    # n = 102\n    # 10000000087\n\n    # n = 103\n    # 10000000088\n\n    # n = 104\n    # 10000000089\n\n    # n = 105\n    # 10000000090\n\n    # n = 106\n    # 10000000091\n\n    # n = 107\n    # 10000000092\n\n    # n = 108\n    # 10000000093\n\n    # n = 109\n    # 10000000094\n\n    # n = 110\n    # 10000000095\n\n    # n = 111\n    # 10000000096\n\n    # n = 112\n    # 10000000097\n\n    # n = 113\n    # 10000000098\n\n    # n = 114\n    # 10000000099\n\n    # n = 115\n    # 10000000100\n\n    # n = 116\n    # 10000000101\n\n    # n = 117\n    # 10000000102\n\n    # n = 118\n    # 10000000103\n\n    # n = 119\n    # 10000000104\n\n    # n = 120\n    # 10000000105\n\n    # n = 121\n    # 10000000106\n\n    # n = 122\n    # 10000000107\n\n    # n = 123\n    # 10000000108\n\n    # n = 124\n    # 10000000109\n\n    # n = 125\n    # 10000000110\n\n    # n = 126\n    # 10000000111\n\n    # n = 127\n    # 10000000112\n\n    # n = 128\n    # 10000000113\n\n    # n = 129\n    # 10000000114\n\n    # n = 130\n    # 10000000115\n\n    # n = 131\n    # 10000000116\n\n    # n = 132\n    # 10000000117\n\n    # n = 133\n    # 10000000118\n\n    # n = 134\n    # 10000000119\n\n    # n = 135\n    # 10000000120\n\n    # n = 136\n    # 10000000121\n\n    # n = 137\n    # 10000000122\n\n    # n = 138\n    # 10000000123\n\n    # n = 139\n    # 10000000124\n\n    # n = 140\n    # 10000000125\n\n    # n = 141\n    # 10000000126\n\n    # n = 142\n    # 10000000127\n\n    # n = 143\n    # 10000000128\n\n    # n = 144\n    # 10000000129\n\n    # n = 145\n    # 10000000130\n\n    # n = 146\n    # 10000000131\n\n    # n = 147\n    # 10000000132\n\n    # n = 148\n    # 10000000133\n\n    # n = 149\n    # 10000000134\n\n    # n = 150\n    # 10000000135\n\n    # n = 151\n    # 10000000136\n\n    # n = 152\n    # 10000000137\n\n    # n = 153\n    # 10000000138\n\n    # n = 154\n    # 10000000139\n\n    # n = 155\n    # 10000000140\n\n    # n = 156\n    # 10000000141\n\n    # n = 157\n    # 10000000142\n\n    # n = 158\n    # 10000000143\n\n    # n = 159\n    # 10000000144\n\n    # n = 160\n    # 10000000145\n\n    # n = 161\n    # 10000000146\n\n    # n = 162\n    # 10000000147\n\n    # n = 163\n    # 10000000148\n\n    # n = 164\n    # 10000000149\n\n    "
    },
    {
        "number": 4070,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Standard\n    # Time: O(n)\n    # Space: O(n)\n    # Runtime: 20 ms, faster than 98.80% of Python3 online submissions for Slowest Key.\n    # Memory Usage: 13.7 MB, less than 6.25% of Python3 online submissions for Slowest Key.\n\n    # Bower's Algorithm\n    # Time: O(n)\n    # Space: O(n)\n    # Runtime: 20 ms, faster than 98.80% of Python3 online submissions for Slowest Key.\n    # Memory Usage: 13.7 MB, less than 6.25% of Python3 online submissions for Slowest Key.\n\n    # Space Optimized\n    # Time: O(n)\n    # Space: O(1)\n    # Runtime: 20 ms, faster than 98.80% of Python3 online submissions for Slowest Key.\n    # Memory Usage: 13.7 MB, less than 6.25% of Python3 online submissions for Slowest Key.\n\n    import sys\n    input = lambda: sys.stdin.readline().rstrip()\n\n    stdin = int(input())\n\n    if stdin == 0:\n        return 0\n    elif stdin == 1:\n        return 1\n    else:\n        n = int(stdin ** 0.5)\n        ans = 2\n        while n > 1:\n            if stdin % n == 0:\n                return ans\n            ans += 1\n            n = int(n ** 0.5)\n        return ans"
    },
    {
        "number": 4070,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str(2**(int(stdin) - 1))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4070,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    i = 0\n    while i < len(str(n)) and n > 0:\n        n = n // 10\n        i += 1\n    i -= 1\n    return str(i)\n\nprint(solution(input()))"
    },
    {
        "number": 4070,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    l = list(map(int, stdin.strip().split(' ')))\n    g = max(l)\n    l = sorted(l)\n    for i in range(len(l)):\n        if l[i] == g:\n            return i\n    return -1\n\n\ndef"
    },
    {
        "number": 4071,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    return str(a * a)\nprint(solution(input()))\n\n\n-----SOLUTION-----\ndef"
    },
    {
        "number": 4071,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str(27)"
    },
    {
        "number": 4071,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4071,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum\n"
    },
    {
        "number": 4071,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return str(27)"
    },
    {
        "number": 4071,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join(['-',stdin,'-',stdin,'-',stdin,'-',stdin])\nprint(solution(sys.stdin.readline()))\n"
    },
    {
        "number": 4071,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = int(stdin)\n    return str(27)\n"
    },
    {
        "number": 4071,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return answer\n"
    },
    {
        "number": 4071,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    return str(pow(2,a))\nsolution(input())"
    },
    {
        "number": 4071,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    # Your code here\n    return str(a)"
    },
    {
        "number": 4072,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if (a < 10) or (a > 999):\n        return \"Error\"\n    else:\n        if (a % 2 == 0):\n            return \"1\"\n        else:\n            return \"0\"\n"
    },
    {
        "number": 4072,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"1\" if int(stdin) > 100 else \"0\"\n"
    },
    {
        "number": 4072,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return int(stdin)\n\n    \"\"\"\n"
    },
    {
        "number": 4072,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if (a//10!= 0):\n        print(0)\n    else:\n        print(1)\n    return \"\"\n\nsolution(input())\n"
    },
    {
        "number": 4072,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    return 1 if num%2==0 else 0\n"
    },
    {
        "number": 4072,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    if int(stdin) <= 999:\n        return \"1\"\n    return \"0\""
    },
    {
        "number": 4072,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if 0 < a < 1000:\n        if (a % 2 == 0 and a % 3 == 0) or (a % 2 == 1 and a % 3 == 1):\n            return \"1\"\n        else:\n            return \"0\"\n    else:\n        return \"0\"\n"
    },
    {
        "number": 4072,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    #code goes here\n    return '1' if a%2 else '0'\n"
    },
    {
        "number": 4072,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin\n    return int(a) > 999 and int(a) < 1000"
    },
    {
        "number": 4072,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    a_str = str(a)\n    if a <= 9:\n        return \"0\"\n    elif a_str == a_str[::-1]:\n        return \"1\"\n    else:\n        return \"0\"\n    return \"0\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4073,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    arr = stdin.strip('\\n').split(' ')\n    arr = list(map(int, arr))\n    while len(arr) > 1:\n        arr.pop(0)\n        arr.append(arr.pop(0) ^ arr.pop(0))\n    return str(arr.pop())\n"
    },
    {
        "number": 4073,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    if a[0] == a[1] and a[2] == a[3]:\n        return \"0\"\n    else:\n        return \"1\"\nprint(solution(input()))\n\n'''"
    },
    {
        "number": 4073,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4073,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4073,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4073,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return stdin"
    },
    {
        "number": 4073,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return 4\n"
    },
    {
        "number": 4073,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4073,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    return''.join(map(str, sorted(int(x) for x in s)))\n\nsolution(input())\n"
    },
    {
        "number": 4073,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n    # return 100 * len(stdin) + 1\n"
    },
    {
        "number": 4074,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n    n, k = map(int, stdin.split())\n    \n    if k == 0:\n        return 0\n    \n    if n == 1:\n        return 1\n    \n    if k == 1:\n        return n\n    \n    if k == 2:\n        return n\n    \n    # print(n, k)\n    \n    d = [None for _ in range(k)]\n    d[0] = 1\n    d[1] = 1\n    d[2] = 2\n    \n    for i in range(3, k):\n        d[i] = d[i-1] + d[i-2]\n    \n    # print(d)\n    \n    return d[n-1]\n\n\n\n\"\"\"\n"
    },
    {
        "number": 4074,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input_list = list(map(int, stdin.split()))\n    t = input_list[0]\n    for i in range(t):\n        n, k = input_list[i + 1]\n        num_of_shovels = n // k\n        num_of_packages = n % k\n        print(min(num_of_shovels, num_of_packages))\n"
    },
    {
        "number": 4074,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = int(stdin)\n    for _ in range(test_cases):\n        num_of_shovels, num_of_packages = map(int, stdin.split())\n        if num_of_shovels < num_of_packages:\n            print(num_of_packages - num_of_shovels)\n        else:\n            print(num_of_packages // num_of_shovels)\n    return stdout"
    },
    {
        "number": 4074,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    for _ in range(int(stdin)):\n        n, k = list(map(int, stdin.split()))\n        packs = [[] for _ in range(k + 1)]\n        for i in range(1, n + 1):\n            packs[int(i)][:] = packs[int(i)] + i\n        print(sum(len(x) for x in packs))\nsolution(input())"
    },
    {
        "number": 4074,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n,k = map(int,stdin.split())\n    max_k = int(math.ceil(math.sqrt(n)))\n    if max_k > k:\n        max_k = k\n    if max_k == k:\n        max_k += 1\n    result = n\n    for k in range(2,max_k):\n        result = max(result,n//k+1)\n    return str(result)\n"
    },
    {
        "number": 4074,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    for _ in range(int(stdin)):\n        n, k = map(int, stdin.split())\n        shovels = n\n        packets = []\n        while (shovels > 0):\n            packets.append(int(shovels))\n            shovels -= packets[-1]\n        print(shovels)\n\nsolution(input())\n"
    },
    {
        "number": 4074,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = list(map(lambda x: x.split(), stdin.strip().split('\\n')))\n    for test_case in test_cases:\n        n, k = test_case\n        if n > k:\n            return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 4074,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    for _ in range(int(stdin)):\n        n, k = map(int, stdin.split())\n        if n == k:\n            return str(n)\n        elif n > k:\n            return str(k)\n        else:\n            return str(n)\n"
    },
    {
        "number": 4074,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4074,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for _ in range(t):\n        n, k = map(int, stdin.split())\n        if n == k:\n            if n == 8:\n                print(8)\n            else:\n                print(1)\n        else:\n            p = [k] * n\n            i = 0\n            while True:\n                s = sum(p)\n                if s < n:\n                    p[i] += 1\n                    i += 1\n                else:\n                    break\n            print(p.index(min(p)) + 1)\n    return \"\"\n\nsolution(input())\n\n'''\n"
    },
    {
        "number": 4075,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    in1 = stdin.pop(0).split()\n    n, m = int(in1[0]), int(in1[1])\n    arr = []\n    for i in range(n):\n        in2 = stdin.pop(0).split()\n        arr.append(int(in2[0]))\n        arr.append(int(in2[1]))\n    arr = sorted(arr)\n    p = int(stdin.pop(0))\n\n    arr.sort()\n    curr = []\n    a, b = 0, 0\n    for i in range(len(arr)):\n        if (arr[i] + b) % 2 == p:\n            a += 1\n        else:\n            b += 1\n        if b == m:\n            break\n    return str(a + b)\n"
    },
    {
        "number": 4075,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip().split()\n    N, M = map(int, stdin[0].split())\n    k_1, k_2 = map(int, stdin[1].split())\n    p_1, p_2, *p_M = map(int, stdin[2].split())\n    switch = [[] for _ in range(N+1)]\n    for i in range(N):\n        switch[i+1] = list(map(int, stdin[3*i+2].split()))\n\n    l = 0\n    result = 0\n    for i in range(2**N):\n        on_off = bin(i)[2:]\n        on_off = \"\".join([str(1) if x == \"1\" else str(0) for x in on_off])\n        num_switch_on = on_off.count(\"1\") % 2\n        if num_switch_on == 1 and l + N - 1 < len(p_M):\n            result += 1\n            l += 1\n            if num_switch_on == 1:\n                for i in range(N):\n                    if switch[i+1][l] == 1:\n                        switch[i+1][l] = 0\n                    else:\n                        switch[i+1][l] = 1\n        elif num_switch_on == 1 and l + N - 1 == len(p_M):\n            result += 1\n    return str(result)\n"
    },
    {
        "number": 4075,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Return a single line containing the number of combinations of \"on\" and \"off\" states of the switches that light all the bulbs.\n    '''\n    # parse inputs\n    inputs = stdin.split()\n    n, m = map(int, inputs[0].split())\n    k = int(inputs[1])\n    s1 = list(map(int, inputs[2].split()))\n    s2 = list(map(int, inputs[3].split()))\n\n    # find number of on and off switches\n    on = 0\n    off = 0\n    for i in range(n):\n        if s1[i] == 1:\n            on += 1\n        elif s1[i] == 0:\n            off += 1\n\n    for i in range(m):\n        if s2[i] == 1:\n            on += 1\n        elif s2[i] == 0:\n            off += 1\n\n    # calc number of combinations\n    n_on_combos = (on - on % 2) // 2\n    n_off_combos = (off - off % 2) // 2\n\n    # return result\n    print(n_on_combos * n_off_combos)\n    return ''\n"
    },
    {
        "number": 4075,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    k_1 = list(map(int, stdin.split()))\n    k_2 = list(map(int, stdin.split()))\n    p_1 = list(map(int, stdin.split()))\n    p_2 = list(map(int, stdin.split()))\n\n    k_1 = k_1[1:]\n    k_2 = k_2[1:]\n    p_1 = p_1[1:]\n    p_2 = p_2[1:]\n    bulb = 0\n\n    if k_1[0] % 2 == 0:\n        bulb += 1\n    if k_2[0] % 2 == 0:\n        bulb += 1\n    if p_1[0] % 2 == 0:\n        bulb += 1\n    if p_2[0] % 2 == 0:\n        bulb += 1\n\n    if bulb == 0:\n        print(\"0\")\n    else:\n        print(2**bulb)\n    return\n\nsolution(input())\n\"\"\"\n\ndef"
    },
    {
        "number": 4075,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    switch_arr = [map(int, stdin.strip().split()) for _ in range(n)]\n    # print(switch_arr)\n    on_off_set = []\n    for i in range(1, n + 1):\n        on_off_set.append(i)\n        on_off_set.append(i)\n    on_off_set.append(n + 1)\n    on_off_set.append(n + 1)\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if switch_arr[i - 1][j - 1] == 1:\n                on_off_set[i] &= on_off_set[j]\n    # print(on_off_set)\n    return str(sum(on_off_set[1:]))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4075,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = stdin.split()\n    n = int(n)\n    m = int(m)\n    stdin = list(map(int, stdin.split()))\n    # print(n, m, stdin)\n\n    def dfs(cur_on, cur_off, bulb_index, switch_num):\n        if bulb_index == m:\n            # print(\"bulb_index:\", bulb_index)\n            # print(\"cur_on:\", cur_on, \"cur_off:\", cur_off)\n            # print(\"cur_on + cur_off\", cur_on + cur_off)\n            # print(\"switch_num:\", switch_num)\n            if cur_on + cur_off == 0:\n                global result\n                result += 1\n            return\n        if switch_num == n:\n            dfs(cur_on, cur_off, bulb_index + 1, 0)\n            dfs(cur_on, cur_off, bulb_index + 1, 1)\n            return\n        switch = stdin[switch_num]\n        if switch:\n            cur_on += 1\n        dfs(cur_on, cur_off, bulb_index + 1, switch_num + 1)\n        cur_off += 1\n        dfs(cur_on, cur_off, bulb_index + 1, switch_num + 1)\n        return\n\n    result = 0\n    dfs(0, 0, 0, 0)\n    return str(result)\n"
    },
    {
        "number": 4075,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    switches = list(map(int, stdin.split()))\n    k, p = list(map(int, stdin.split()))\n    switch = {}\n    for i in range(1, n+1):\n        switch[i] = set()\n\n    for i in range(len(switches)):\n        switch[switches[i]].add(i)\n\n    print(count_combinations(switch, k, p, n, m))\n\ndef"
    },
    {
        "number": 4075,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin_input = stdin.split()\n    N = int(stdin_input[0])\n    M = int(stdin_input[1])\n    # num_bulb = 0\n    #\n    # for i in range(1, N+1):\n    #     for j in range(1, N+1):\n    #         if (i - j) % 2 == 0:\n    #             num_bulb += 1\n    #             print('Bulb {} is lighted when there is an even number of switches that are \"on\" among the following: Switch {} and {}.'.format(num_bulb, i, j))\n    #         else:\n    #             num_bulb += 1\n    #             print('Bulb {} is lighted when there is an odd number of switches that are \"on\" among the following: Switch {} and {}.'.format(num_bulb, i, j))\n    # return num_bulb\n    switch_count = 0\n    for i in range(1, N+1):\n        for j in range(1, N+1):\n            if i == j:\n                switch_count += 1\n                continue\n            if (i - j) % 2 == 0:\n                switch_count += 1\n                continue\n            else:\n                switch_count += 1\n                continue\n    print(switch_count)\n    return switch_count\n"
    },
    {
        "number": 4075,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split(\" \"))\n    switches = list(map(int, stdin.split(\" \")))\n    p = list(map(int, stdin.split(\" \")))\n    count = 0\n\n    if(p[0] % 2 == 0):\n        count = count + 1\n    if(p[1] % 2 == 0):\n        count = count + 1\n    if(p[2] % 2 == 0):\n        count = count + 1\n    if(p[3] % 2 == 0):\n        count = count + 1\n    if(p[4] % 2 == 0):\n        count = count + 1\n    if(p[5] % 2 == 0):\n        count = count + 1\n\n    return count\n"
    },
    {
        "number": 4075,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split(\" \")))\n    # Checking if n, m are valid.\n    if n < 1 or n > 10 or m < 1 or m > 10:\n        return \"Input Error\"\n    k_1, s_1, s_2, s_3,..., s_n = list(map(int, stdin.split(\" \")))\n    p_1, p_2, p_3, p_4,..., p_m = list(map(int, stdin.split(\" \")))\n    if n!= m or (n > 10 or n < 1):\n        return \"Input Error\"\n    if len(set(k_1, k_2,..., k_m))!= len(k_1):\n        return \"Input Error\"\n    if len(set(s_1, s_2,..., s_n))!= len(s_1):\n        return \"Input Error\"\n    if len(set(p_1, p_2,..., p_m))!= len(p_1):\n        return \"Input Error\"\n    # Checking if k_i is valid.\n    if any((k_1 + k_2) % 2!= 0, (k_1 - k_2) % 2!= 0, (k_2 - k_1) % 2!= 0, (k_1 - k_2) % 2 == 0, (k_1 - k_2) % 2 == 0):\n        return \"Input Error\"\n    # Checking if s_{i1} is valid.\n    if any((s_1 + s_2) % 2!= 0, (s_1 - s_2) % 2!= 0, (s_2 - s_1) % 2!= 0, (s_1 - s_2) % 2 == 0, (s_1 - s_2) % 2 == 0):\n        return \"Input Error\"\n    # Checking if p_i is valid.\n    if any((p_1 + p_2) % 2!= 0, (p_1 - p_2) % 2!= 0, (p_2 - p_1) % 2!= 0, (p_1 - p_2) % 2 == 0, (p_1 - p_2) % 2 == 0):\n        return \"Input Error\"\n    # Checking if all the above conditions are satisfied.\n    ans = 0\n    for i in range(n):\n        if (s_1 + k_1) % 2!= 0:\n            ans = ans + 1\n        if (s_2 + k_2) % 2!= 0:\n            ans = ans + 1\n        if (s_3 + k_3) % 2!= 0:\n            ans = ans + 1\n        if (s_4 + k_4) % 2!= 0:\n            ans = ans + 1\n        if (s_5 + k_5) % 2!= 0:\n            ans = ans + 1\n        if (s_6 + k_6) % 2!= 0:\n            ans = ans + 1\n        if (s_7 + k_7) % 2!= 0:\n            ans = ans + 1\n        if (s_8 + k_8) % 2!= 0:\n            ans = ans + 1\n        if (s_9 + k_9) % 2!= 0:\n            ans = ans + 1\n        if (s_10 + k_10) % 2!= 0:\n            ans = ans + 1\n        if (s_11 + k_11) % 2!= 0:\n            ans = ans + 1\n        if (s_12 + k_12) % 2!= 0:\n            ans = ans + 1\n        if (s_13 + k_13) % 2!= 0:\n            ans = ans + 1\n        if (s_14 + k_14) % 2!= 0:\n            ans = ans + 1\n        if (s_15 + k_15) % 2!= 0:\n            ans = ans + 1\n        if (s_16 + k_16) % 2!= 0:\n            ans = ans + 1\n        if (s_17 + k_17) % 2!= 0:\n            ans = ans + 1\n        if (s_18 + k_18) % 2!= 0:\n            ans = ans + 1\n        if (s_19 + k_19) % 2!= 0:\n            ans = ans + 1\n        if (s_20 + k_20) % 2!= 0:\n            ans = ans + 1\n        if (s_21 + k_21) % 2!= 0:\n            ans = ans + 1\n        if (s_22 + k_22) % 2!= 0:\n            ans = ans + 1\n        if (s_23 + k_23) % 2!= 0:\n            ans = ans + 1\n        if (s_24 + k_24) % 2!= 0:\n            ans = ans + 1\n        if (s_25 + k_25) % 2!= 0:\n            ans = ans + 1\n        if (s_26 + k_26) % 2!= 0:\n            ans = ans + 1\n        if (s_27 + k_27) % 2!= 0:\n            ans = ans + 1\n        if (s_28 + k_28) % 2!= 0:\n            ans = ans + 1\n        if (s_29 + k_29) % 2!= 0:\n            ans = ans + 1\n        if (s_30 + k_30) % 2!= 0:\n            ans = ans + 1\n        if (s_31 + k_31) % 2!= 0:\n            ans = ans + 1\n        if (s_32 + k_32) % 2!= 0:\n            ans = ans + 1\n        if (s_33 + k_33) % 2!= 0:\n            ans = ans + 1\n        if (s_34 + k_34) % 2!= 0:\n            ans = ans + 1\n        if (s_35 + k_35) % 2!= 0:\n            ans = ans + 1\n        if (s_36 + k_36) % 2!= 0:\n            ans = ans + 1\n        if (s_37 + k_37) % 2!= 0:\n            ans = ans + 1\n        if (s_38 + k_38) % 2!= 0:\n            ans = ans + 1\n        if (s_39 + k_39) % 2!= 0:\n            ans = ans + 1\n        if (s_40 + k_40) % 2!= 0:\n            ans = ans + 1\n        if (s_41 + k_41) % 2!= 0:\n            ans = ans + 1\n        if (s_42 + k_42) % 2!= 0:\n            ans = ans + 1\n        if (s_43 + k_43) % 2!= 0:"
    },
    {
        "number": 4076,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A = int(stdin.split()[0])\n    B = int(stdin.split()[1])\n    H = int(stdin.split()[2])\n    M = int(stdin.split()[3])\n\n    return str(round(A + (B - A) * (12 / H) + (M - (60 / H) * M / 60), 9))\n"
    },
    {
        "number": 4076,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = map(int, stdin.split())\n    if A + H > M or B + M > H:\n        return \"0.00000000000000000000\"\n    h_disp = 2 * H * H * (M - (H - 1))\n    m_disp = 2 * M * M * (H - 1)\n    return str(min(h_disp, m_disp))\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4076,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = map(int, stdin.split())\n    h_length = H / 12\n    m_length = M / 60\n    return str(int(h_length * A + m_length * B))\n"
    },
    {
        "number": 4076,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A = int(stdin)\n    B = A\n    H = 12\n    M = 1\n    \n    H_prev = H\n    M_prev = M\n    \n    ans = 0\n    while True:\n        H = H + H_prev\n        M = M + M_prev\n        \n        if H == 0:\n            H = 12\n            \n        if M == 0:\n            M = 60\n        \n        H_prev = H - H_prev\n        M_prev = M - M_prev\n        \n        ans = ans + abs(A - (H * 100 + M))\n        if A == 0 and B == 0:\n            break\n    return str(ans)\n\ndef"
    },
    {
        "number": 4076,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''A 4 9 0\n   ...     ''')\n    '5.00000000000000000000'\n    >>> solution('''A 4 9 1\n   ...     ''')\n    '5.00000000000000000000'\n    \"\"\"\n    lines = stdin.splitlines()\n\n    a = int(lines[0].split()[0])\n    b = int(lines[0].split()[1])\n    h = int(lines[0].split()[2])\n    m = int(lines[0].split()[3])\n\n    return str((a * h + b * (h + m)) * b + a * (h + m))\n"
    },
    {
        "number": 4076,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    hour, minute, A, B = map(int, stdin.split())\n    angle_hand_A = hour * 360 // 12\n    angle_hand_B = minute * 360 // 60\n    angle_hand_diff = angle_hand_B - angle_hand_A\n    print(round(abs(A * cos(angle_hand_diff) +\n                    B * sin(angle_hand_diff)) / 100, 10))\n    return \"Done!\"\n"
    },
    {
        "number": 4076,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(math.sqrt((stdin[0] * stdin[0] + stdin[1] * stdin[1]) / 2) * 100))\n"
    },
    {
        "number": 4076,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, h, m = map(int, stdin.split())\n    return str(abs(12*h + 1*m)*2 + (abs(12*h + 1*m) - min(a, b))*2)"
    },
    {
        "number": 4076,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    hour, minute, hour_delta, minute_delta = map(int, stdin.split())\n    hour_delta_rad = 2 * math.pi * hour / 12.0\n    minute_delta_rad = 2 * math.pi * minute / 60.0\n    radian = hour_delta_rad + minute_delta_rad\n    hour_diff = hour - 12\n    # print(hour_diff)\n    radian = radian + hour_diff * (2 * math.pi / 12)\n    radian = radian % (2 * math.pi)\n    # print(radian)\n    diff = radian - minute_delta_rad\n    return round(diff)"
    },
    {
        "number": 4076,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, H, M = map(int, stdin.split())\n    return str(round(((H*0.5) - (M*0.125)) * 1000000))\n\nprint(solution(input()))\n'''\n\nimport math\n\ndef"
    },
    {
        "number": 4077,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    n = len(a)\n    mid = n // 2\n\n    def find_max_left(n):\n        for i in range(1, n - 1):\n            if a[i - 1] < a[i] > a[i + 1]:\n                return a[i]\n\n    def find_min_right(n):\n        for i in range(n - 2, 1, -1):\n            if a[i - 1] > a[i] < a[i + 1]:\n                return a[i]\n\n    def find_mid_sorted(n):\n        return (n - 1) // 2\n\n    if n % 2 == 1:\n        return n - 1\n    else:\n        max_left = find_max_left(mid)\n        min_right = find_min_right(mid)\n        mid_sorted = find_mid_sorted(n)\n        return mid_sorted - mid + 1 - max_left - min_right\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4077,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = (int(i) for i in stdin.split())\n    arr = list(map(int, stdin.split()))\n    cnt = 0\n    for i in range(len(arr)):\n        l = i\n        r = i + 1\n        while l > 0 and r < len(arr):\n            if arr[l - 1] < arr[r] and arr[l] > arr[r]:\n                cnt += 1\n                break\n            elif arr[l - 1] > arr[r] and arr[l] < arr[r]:\n                cnt += 1\n                break\n            l -= 1\n            r += 1\n    return str(cnt)\n"
    },
    {
        "number": 4077,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    #sort and find median\n    a.sort()\n    if n % 2 == 0:\n        middle = (n//2) + 1\n        print(int((a[middle] + a[middle - 1]) / 2))\n    else:\n        middle = (n // 2)\n        print(a[middle])\nsolution(input())\n"
    },
    {
        "number": 4077,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a = sorted(a)\n    l = 0\n    r = len(a) - 1\n    count = 0\n    while l <= r:\n        if a[l] == m:\n            if (l + 1 < r) and (a[l + 1] == m):\n                count += 2\n                l += 2\n                r -= 1\n            elif l == r:\n                count += 1\n                l += 1\n                r -= 1\n            else:\n                count += 1\n                l += 1\n        elif a[r] == m:\n            if (l + 1 < r) and (a[r - 1] == m):\n                count += 2\n                l += 2\n                r -= 1\n            elif l == r:\n                count += 1\n                l += 1\n                r -= 1\n            else:\n                count += 1\n                r -= 1\n        elif a[l] == m:\n            if (l + 1 < r) and (a[r] == m):\n                count += 2\n                l += 2\n                r -= 1\n            elif l == r:\n                count += 1\n                l += 1\n                r -= 1\n            else:\n                count += 1\n                l += 1\n        elif a[r] == m:\n            if (l + 1 < r) and (a[l] == m):\n                count += 2\n                l += 2\n                r -= 1\n            elif l == r:\n                count += 1\n                l += 1\n                r -= 1\n            else:\n                count += 1\n                r -= 1\n        else:\n            l += 1\n            r -= 1\n    return str(count)\n"
    },
    {
        "number": 4077,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = (int(i) for i in stdin.split())\n    a = sorted(list(int(i) for i in stdin.split()))\n    return str(len([i for i in range(n) if a[i] == m]))"
    },
    {
        "number": 4077,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 4077,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n  pass"
    },
    {
        "number": 4077,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    sequence = list(map(int, stdin.split()))\n    sequence = sorted(sequence)\n    n = len(sequence)\n    left = sequence[: (n - 1) // 2]\n    right = sequence[(n - 1) // 2 + 1:]\n    return f'{len(left) * len(right)}' if m == sequence[(n - 1) // 2] else f'{len(left) * len(right)}'\n\n\ndef"
    },
    {
        "number": 4077,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    print(len(a) // 2)\n    res = 0\n    left = 0\n    right = len(a) - 1\n    if len(a) % 2!= 0:\n        while right - left > 1:\n            if a[left] + a[right] == m:\n                res += 1\n            if a[left] + a[right] > m:\n                right -= 1\n            if a[left] + a[right] < m:\n                left += 1\n        print(res)\n    else:\n        while right - left > 1:\n            if a[left] + a[right] == m:\n                res += 1\n            if a[left] + a[right] < m:\n                left += 1\n            if a[left] + a[right] > m:\n                right -= 1\n        print(res)\n    return res\n"
    },
    {
        "number": 4077,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    mid = a[(n - 1) // 2]\n    count = 0\n    for i in range(n - 1):\n        count += a[i] * a[i + 1]\n    for i in range(1, n):\n        if mid == a[i]:\n            count += a[i - 1] * a[i + 1]\n    count += a[0] * a[1]\n    return str(count)\n\ndef"
    },
    {
        "number": 4078,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return answer"
    },
    {
        "number": 4078,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = (int(x) for x in stdin.split())\n    nums = [int(x) for x in stdin.split()]\n    segments = []\n    for i in range(m):\n        l, r = (int(x) for x in input().split())\n        segments.append((l, r))\n    nums = sorted(nums, key=lambda x: x)\n    b = [-1] * n\n    b_max = -1\n    b_min = float('inf')\n    for s in segments:\n        min_val = min(nums[s[0] - 1: s[1]])\n        max_val = max(nums[s[0] - 1: s[1]])\n        b_max = max(max_val, b_max)\n        b_min = min(min_val, b_min)\n        for i in range(s[0] - 1, s[1]):\n            b[i] = max(b[i], min_val - nums[i])\n    return str(max(0, b_max) - min(0, b_min))"
    },
    {
        "number": 4078,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    arr, segments = stdin.split('\\n')\n    arr = [int(i) for i in arr.split()]\n    maxValue = -10000\n    maxIndex = 0\n    for i in segments.split():\n        left = int(i.split('-')[0])\n        right = int(i.split('-')[1])\n        maxValue = max(maxValue, max(arr[left-1:right]))\n        maxIndex = max(maxIndex, right - left)\n    return str(maxValue - min(arr[:maxIndex]))\n"
    },
    {
        "number": 4078,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    if n < 3:\n        return \"0\"\n    if m < 2:\n        return \"0\"\n    # my version\n    # a = list(map(int, stdin.split()))\n    # ans = max_value(a, m)\n    # print(ans)\n    # return ans\n    # the other one\n    l, r = map(int, input().split())\n    segs = [[l, r]]\n    res = 0\n    for i in range(m):\n        l, r = map(int, input().split())\n        segs.append([l, r])\n    segs.sort(key=lambda x: x[1])\n    print(segs)\n    for s in segs:\n        if s[0] - res > 1:\n            res += 1\n    print(res)\n    return str(res)\n"
    },
    {
        "number": 4078,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    n, m = a[0], a[1]\n    a = a[2:]\n\n    segments = []\n    for i in range(m):\n        l, r = map(int, input().split())\n        segments.append([l - 1, r - 1])\n\n    ans = 0\n    # ans = -math.inf\n    q = 0\n    cnt = 0\n    for i in range(n):\n        if i in segments:\n            cnt += 1\n            continue\n        if ans < a[i] - min(a):\n            ans = a[i] - min(a)\n            q = cnt\n        cnt = 0\n    return str(ans) + \" \" + str(q)\n"
    },
    {
        "number": 4078,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split(\" \")))\n    b = []\n    m = int(stdin.split(\" \")[2])\n\n    for i in range(len(a)):\n        if i > m:\n            a[i] = a[i] - 1\n            b.append(a[i])\n    print(max(b) - min(b))\n    return str(max(b) - min(b))\n"
    },
    {
        "number": 4078,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    m_set = []\n    for i in range(m):\n        m_set.append(list(map(int, stdin.split())))\n    max_val = -float('inf')\n    for i in range(n):\n        for j in range(m):\n            for k in range(n):\n                a[k] -= a[i]\n                a[k] -= a[j]\n                a[k] += a[k]\n            max_val = max(max_val, max(a))\n    res = max_val - min(a)\n    return str(res)"
    },
    {
        "number": 4078,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    m = int(stdin.split()[1])\n    l_segs = []\n    r_segs = []\n    for i in range(m):\n        l_segs.append(int(stdin.split()[2*i]))\n        r_segs.append(int(stdin.split()[2*i + 1]))\n    min_ = -1e9\n    max_ = -1e9\n    res = 0\n    for i in range(len(a)):\n        if a[i] > 0:\n            if min_ < 0:\n                min_ = a[i]\n            else:\n                min_ = min(min_, a[i])\n            if max_ < 0:\n                max_ = a[i]\n            else:\n                max_ = max(max_, a[i])\n        elif a[i] < 0:\n            if min_ < 0:\n                min_ = -a[i]\n            else:\n                min_ = min(-a[i], min_)\n            if max_ < 0:\n                max_ = -a[i]\n            else:\n                max_ = max(-a[i], max_)\n    for i in range(len(l_segs)):\n        if l_segs[i] == -1:\n            l_segs[i] = min_\n        if l_segs[i] == -2:\n            l_segs[i] = max_\n    for i in range(len(r_segs)):\n        if r_segs[i] == -1:\n            r_segs[i] = min_\n        if r_segs[i] == -2:\n            r_segs[i] = max_\n    res = max(res, max_ - min_)\n    res = res + min_\n    for i in range(len(l_segs)):\n        res = max(res, max_ - min_ + r_segs[i] - l_segs[i])\n    for i in range(len(r_segs)):\n        res = max(res, max_ - min_ + r_segs[i] - l_segs[i])\n    return str(res)"
    },
    {
        "number": 4078,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    segments = list()\n    for i in range(m):\n        l, r = list(map(int, stdin.split()))\n        segments.append((l, r))\n    max_value = -9999999999999\n    ans = 0\n    for segment in segments:\n        left = a[segment[0]-1]\n        right = a[segment[1]-1]\n        dif = abs(left - right)\n        if max_value < dif:\n            max_value = dif\n            ans = 1\n    return str(max_value) if ans == 1 else str(ans)\n"
    },
    {
        "number": 4078,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    m = int(input())\n    b = []\n    res = 0\n    for i in range(m):\n        l, r = map(int, input().split())\n        b.append([l, r])\n    b.sort(key=lambda x: (x[1], x[0]))\n    for i in range(len(b)):\n        if b[i][1] - b[i][0] >= 0:\n            res += a[b[i][0]] - a[b[i][1]]\n    return str(res)\n"
    },
    {
        "number": 4079,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Determine if all strings are diverse or not.\n    \"\"\"\n    return 'Yes' if is_diverse(*stdin) else 'No'\n\n\ndef"
    },
    {
        "number": 4079,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return 'No'\n    \nprint(solution(input()))\n"
    },
    {
        "number": 4079,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    strings = stdin.split('\\n')\n    for string in strings:\n        diverse = True\n        for i in range(0, len(string)-1):\n            if string[i] == string[i+1]:\n                diverse = False\n                break\n        if diverse:\n            print('Yes')\n        else:\n            print('No')\n    return ''\n"
    },
    {
        "number": 4079,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return 'Yes' if all([len(set(x)) == len(x) for x in stdin.split()]) else 'No'"
    },
    {
        "number": 4079,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s_d = []\n    for i in range(len(stdin)):\n        s_d.append(stdin[i])\n\n    for i in range(len(s_d)-1):\n        if s_d[i] == s_d[i+1]:\n            return 'Yes'\n\n    return 'No'\n"
    },
    {
        "number": 4079,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    stdin: str\n    '''\n    diverse = []\n    for i in stdin.splitlines():\n        if is_diverse(i):\n            diverse.append(i)\n    return 'Yes' if len(diverse) > 0 else 'No'\n\ndef"
    },
    {
        "number": 4079,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    stdin = '''\n    5\n    fced\n    xyz\n    r\n    dabcef\n    az\n    aa\n    bad\n    babc\n    '''\n    return 'Yes\\nYes\\nYes\\nYes\\nNo\\nNo\\nNo\\nNo'\n'''\n\n\ndef"
    },
    {
        "number": 4079,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 4079,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # YOUR CODE HERE\n    return \"No\""
    },
    {
        "number": 4079,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    strings = [stdin[x].strip() for x in range(0, len(stdin))]\n\n    for string in strings:\n        if list(string) == list(sorted(string)):\n            print('Yes')\n        else:\n            print('No')\n"
    },
    {
        "number": 4080,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    d = max(a) - min(a)\n    c = []\n    for _ in range(m):\n        c.append(int(input()))\n    a = a[c[0] - 1: c[1]]\n    b = []\n    for i in range(len(a) - 1):\n        b.append(a[i + 1] - a[i])\n    b.sort(reverse=True)\n    return str(max(b) - min(b))"
    },
    {
        "number": 4080,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    t = 0\n    for i in range(m):\n        t += max(a[a[i - 1] + 1:a[i]]) - min(a[a[i - 1] + 1:a[i]])\n    return str(t)\n"
    },
    {
        "number": 4080,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, M = list(map(int, stdin.split()))\n    array = list(map(int, stdin.split()))\n    max_sum = 0\n    min_sum = 0\n    possible_sum = 0\n    for i in range(M):\n        max_sum += array[i]\n        min_sum += array[i]\n        possible_sum += array[i]\n    max_sum -= min_sum\n    print(max_sum)\n    print(min_sum)\n    print(possible_sum)\n    return str(max_sum - min_sum)\n"
    },
    {
        "number": 4080,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    max_diff = 0\n    max_diff_segment = 0\n    for i in range(m):\n        l, r = map(int, stdin.split())\n        a[l - 1] -= 1\n        a[r - 1] += 1\n        if a[r - 1] - a[l - 1] > max_diff:\n            max_diff = a[r - 1] - a[l - 1]\n            max_diff_segment = i\n    if max_diff == 0:\n        return \"0\"\n    return str(max_diff) +'' + str(max_diff_segment)\n"
    },
    {
        "number": 4080,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    b = []\n    for i in range(m):\n        l, r = list(map(int, stdin.split()))\n        b.append((l, r))\n    \n    max_inter = float('-inf')\n    max_t = 0\n    for i in range(1, n):\n        min_cnt = float('inf')\n        for j in range(m):\n            l, r = b[j]\n            if l <= i and r <= i:\n                min_cnt = min(min_cnt, r - l)\n        if max_t < min_cnt:\n            max_t = min_cnt\n            max_inter = max(max_inter, max_t + a[i])\n    return str(max_inter)"
    },
    {
        "number": 4080,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    seg_length = []\n    for i in range(m):\n        seg_length.append(int(input().split()))\n    count = 0\n    for i in range(m):\n        a = a[seg_length[i][0]:seg_length[i][1] + 1]\n        for j in range(n):\n            a[j] = a[j] - min(a[:j + 1])\n        count += 1\n    return str(max(a)) +'' + str(count)\n\n\nsolution(input())"
    },
    {
        "number": 4080,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    min_val = min(a)\n    max_val = max(a)\n    result = 0\n    result_indices = []\n    for start_idx in range(1, n + 1):\n        for end_idx in range(start_idx, n + 1):\n            val = sum(a[start_idx:end_idx]) - min_val\n            if result < val:\n                result = val\n                result_indices = []\n            elif result == val:\n                result_indices.append(str(start_idx - 1) +'' + str(end_idx - 1))\n    return result"
    },
    {
        "number": 4080,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = []\n\n    segments = []\n    for _ in range(m):\n        a_min, a_max = map(int, stdin.split())\n        b_min, b_max = map(int, stdin.split())\n        segments.append((a_min, a_max))\n        segments.append((b_min, b_max))\n\n    for i in range(n):\n        b.append(a[i])\n        for segment in segments:\n            if segment[0] <= i <= segment[1]:\n                b[i] -= 1\n            elif i == segment[0] or i == segment[1]:\n                b[i] -= 1\n        if b[i] < 0:\n            return '0'\n    return str(max(b))"
    },
    {
        "number": 4080,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    a = list(map(int, stdin.strip().split()))\n    segments = []\n    for i in range(m):\n        segments.append(list(map(int, input().strip().split())))\n    ans = max_value(a, m, segments)\n    return str(ans)\n\ndef"
    },
    {
        "number": 4080,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = (int(i) for i in stdin.split())\n    arr = list(int(i) for i in stdin.split())\n    n_segments = 0\n    n_subset = []\n    max_value = 0\n    min_value = min(arr)\n    while n_segments < m:\n        seg_length = int(input())\n        l, r = (int(i) for i in input().split())\n        if l > r:\n            l, r = r, l\n        for j in range(l, r + 1):\n            arr[j - 1] -= 1\n        n_segments += 1\n        n_subset.append((seg_length, l, r))\n    for segment in n_subset:\n        max_value = max(max_value, segment[0] * segment[1] - min_value)\n    return str(max_value)\n    # Your code here\n"
    },
    {
        "number": 4081,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    n = a[0]\n    a = a[1:]\n    k = 0\n    ans = 'LLRL'\n    for i in range(n):\n        for j in range(n):\n            if a[j] > a[i]:\n                k += 1\n                if k > len(ans):\n                    ans = 'L' + ans + 'R'\n                else:\n                    ans = ans[:k] + 'L' + ans[k:]\n        k = 0\n    return ans\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4081,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    res = []\n    i = 0\n    res_len = 0\n    if n == 1:\n        return str(a[0])\n    else:\n        while i < n:\n            j = 0\n            res.append(a[i])\n            while j < len(res):\n                if j == 0:\n                    res.append(a[i])\n                    res_len = len(res)\n                elif j == res_len - 1:\n                    res.append(a[i])\n                else:\n                    if res[j - 1] < res[j] > res[j + 1]:\n                        res.append(res[j - 1])\n                        res.append(a[i])\n                        res.append(res[j + 1])\n                        res_len = len(res)\n                j += 1\n            i += 1\n        return str(len(res))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4081,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\nstdin = stdin.split(\"\\n\")\nn = int(stdin[0])\na = list(map(int, stdin[1].split()))\nl = []\nfor i in range(len(a)):\n    l.append(0)\nfor i in range(len(a)):\n    l[a[i]-1] = max(l[a[i]-1], 1 + l[i-1])\nprint(max(l))\n\nfor i in range(len(a)):\n    if i == 0:\n        x = a[i]\n        s = ''\n    else:\n        x = a[i] - 1\n        s += 'R'\n    for j in range(max(0, x), a[i]+1):\n        s += 'L'\n    if s.count('R') > s.count('L'):\n        print(s)\n    else:\n        print(s)\n\n\n\ndef"
    },
    {
        "number": 4081,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\nYour submission function should return a single string, formatted as described in the problem statement.\n'''\n\ndef"
    },
    {
        "number": 4081,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\nIn the second example we use a dictionary to store all values in input and to check if each value in input is already used (if so, use a dictionary as a value). However, this approach uses too much memory.\n\nInstead of using a dictionary, we are going to use only a list of size $n$. Each element in the list is stored as a pair (the value of the element, its index). Then each time we remove an element, we are also checking if the value is already stored in the list. If so, we can use the index of the value as the key of the dictionary and update the dictionary.\n\nIn the third example we use a list and a dictionary to store the values of input and to check if they are already used.\n\n\"\"\"\nimport sys\n\n\ndef"
    },
    {
        "number": 4081,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n\n    # n = 5\n    # a = [2, 1, 5, 4, 3]\n\n    def dfs(i, res, s):\n        if i == n:\n            # print(res, s)\n            res.append(s)\n            return\n\n        dfs(i + 1, res, s)\n        dfs(i + 1, res, s + 'R')\n\n    res = []\n    dfs(0, res, '')\n    res = sorted(res, key=lambda x: (len(x), x))\n    print(len(res[-1]))\n    print(*res[-1])\n    return\n\n\nsolution(input())\n"
    },
    {
        "number": 4081,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return f'{len(stdin)}'\n    # your code here"
    },
    {
        "number": 4081,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\nThe second one is for the best understanding of the problem, which is described in the problem statement.\n"
    },
    {
        "number": 4081,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nfrom collections import deque\n\n\ndef"
    },
    {
        "number": 4081,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\nYour solution must return a string of the form $s$ or an empty string if the longest increasing sequence cannot be formed from stdin.\n'''\n\n\ndef"
    },
    {
        "number": 4082,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = list(map(int, stdin.split()))\n    if len(a) < 2:\n        return '1'\n    b = a[:]\n    for i in range(len(a)):\n        if a[i] > a[i+1]:\n            b.remove(a[i])\n        else:\n            break\n    return str(len(b))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4082,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4082,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    array = stdin.split()\n    n = int(array[0])\n    a = list(map(int, array[1]))\n    return str(max([len(a) - 1] + [min(a[i], a[i+1]) for i in range(len(a)-1)]))\n\ndef"
    },
    {
        "number": 4082,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n"
    },
    {
        "number": 4082,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    arr = stdin.strip().split()\n    res = 1\n    for i in range(n):\n        for j in range(i):\n            if int(arr[j]) < int(arr[i]):\n                res = max(res, i - j + 1)\n    return res\n"
    },
    {
        "number": 4082,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return"
    },
    {
        "number": 4082,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    count = 1\n    max_len = 1\n    length = len(a)\n    for i in range(1, length):\n        if a[i - 1] < a[i]:\n            count += 1\n        else:\n            count = 1\n\n        if count > max_len:\n            max_len = count\n\n    return max_len\n"
    },
    {
        "number": 4082,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    arr = list(map(int, stdin.strip().split()))\n    res = 1\n\n    for i in range(1, n):\n        if arr[i] >= arr[i - 1]:\n            res += 1\n        else:\n            res = 1\n    print(res)\n\n\nsolution(input())\n"
    },
    {
        "number": 4082,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def linear_search(arr, element) -> int:\n        \"\"\"\n        Returns the position of the given element in a sorted array.\n        If the element is not present, returns -1.\n        \"\"\"\n        for i in range(len(arr)):\n            if arr[i] == element:\n                return i\n        return -1\n\n    n = int(stdin.split()[0])\n    arr = stdin.split()[1:]\n\n    result = 1\n    for i in range(n):\n        i_index = linear_search(arr, arr[i])\n        if i_index == -1:\n            i_index = i\n        else:\n            i_index = i - i_index\n            result = max(result, i_index)\n\n    return str(result)\n"
    },
    {
        "number": 4082,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = sorted(list(map(int, stdin.split())))\n    print(a)\n    i = 0\n    tot_len = len(a)\n    max_len = 1\n    while i < tot_len - 1:\n        if a[i] >= a[i + 1]:\n            i += 1\n        else:\n            max_len = max(max_len, tot_len - i)\n            i += 1\n    return max_len\n"
    },
    {
        "number": 4083,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = sorted(map(int, stdin.split()))\n\n    return str(math.ceil((k - sum(a)) / 2))\n"
    },
    {
        "number": 4083,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    arr.sort()\n    cur = 1\n    for i in range(len(arr)-1):\n        if arr[i+1] - arr[i] > 1:\n            cur += 1\n    if k <= cur:\n        return str(cur)\n    else:\n        return str(cur - 1)\n"
    },
    {
        "number": 4083,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    return str(min(n//2 - a.count(a[i]), n//2 - a.count(a[i] - 1)) for i in range(n))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4083,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    cur_min = float('inf')\n    cnt = 0\n    i = 0\n    while i < n:\n        if a[i] % 2 == 0:\n            i += 1\n            continue\n        else:\n            cur_min = min(cur_min, cnt)\n            a[i] = cur_min\n            cnt += 1\n            i += 1\n\n    if cur_min == float('inf'):\n        return '0'\n\n    return str(cur_min)\n"
    },
    {
        "number": 4083,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    count = 0\n    # creating a lookup table\n    lookup = {i: arr.count(i) for i in arr}\n    # base case\n    if n == 1:\n        if k in lookup.keys():\n            return count\n        return -1\n    # A = [0, 1, 2, 3, 4, 5]\n    for i in range(5, n + 1):\n        # A = [0, 1, 2, 3, 4, 5]\n        # A = [0, 1, 2, 3, 4, 5]\n        # A = [0, 1, 2, 3, 4, 5]\n        # A = [0, 1, 2, 3, 4, 5]\n        # A = [0, 1, 2, 3, 4, 5]\n        # A = [0, 1, 2, 3, 4, 5]\n        # A = [0, 1, 2, 3, 4, 5]\n        # A = [0, 1, 2, 3, 4, 5]\n        # A = [0, 1, 2, 3, 4, 5]\n        # A = [0, 1, 2, 3, 4, 5]\n        # A = [0, 1, 2, 3, 4, 5]\n        # A = [0, 1, 2, 3, 4, 5]\n        # A = [0, 1, 2, 3, 4, 5]\n        # A = [0, 1, 2, 3, 4, 5]\n        # A = [0, 1, 2, 3, 4, 5]\n        # A = [0, 1, 2, 3, 4, 5]\n        # A = [0, 1, 2, 3, 4, 5]\n        # A = [0, 1, 2, 3, 4, 5]\n        # A = [0, 1, 2, 3, 4, 5]\n        # A = [0, 1, 2, 3, 4, 5]\n        # A = [0, 1, 2, 3, 4, 5]\n        # A = [0, 1, 2, 3, 4, 5]\n        # A = [0, 1, 2, 3, 4, 5]\n        # A = [0, 1, 2, 3, 4, 5]\n        # A = [0, 1, 2, 3, 4, 5]\n        # A = [0, 1, 2, 3, 4, 5]\n        # A = [0, 1, 2, 3, 4, 5]\n        # A = [0, 1, 2, 3, 4, 5]\n        # A = [0, 1, 2, 3, 4, 5]\n        # A = [0, 1, 2, 3, 4, 5]\n        # A = [0, 1, 2, 3, 4, 5]\n        # A = [0, 1, 2, 3, 4, 5]\n        # A = [0, 1, 2, 3, 4, 5]\n        # A = [0, 1, 2, 3, 4, 5]\n        # A = [0, 1, 2, 3, 4, 5]\n        # A = [0, 1, 2, 3, 4, 5]\n        # A = [0, 1, 2, 3, 4, 5]\n        # A = [0, 1, 2, 3, 4, 5]\n        # A = [0, 1, 2, 3, 4, 5]\n        # A = [0, 1, 2, 3, 4, 5]\n        # A = [0, 1, 2, 3, 4, 5]\n        # A = [0, 1, 2, 3, 4, 5]\n        # A = [0, 1, 2, 3, 4, 5]\n        # A = [0, 1, 2, 3, 4, 5]\n        # A = [0, 1, 2, 3, 4, 5]\n        # A = [0, 1, 2, 3, 4, 5]\n        # A = [0, 1, 2, 3, 4, 5]\n        # A = [0, 1, 2, 3, 4, 5]\n        # A = [0, 1, 2, 3, 4, 5]\n        # A = [0, 1, 2, 3, 4, 5]\n        # A = [0, 1, 2, 3, 4, 5]\n        # A = [0, 1, 2, 3, 4, 5]\n        # A = [0, 1, 2, 3, 4, 5]\n        # A = [0, 1, 2, 3, 4, 5]\n        # A = [0, 1, 2, 3, 4, 5]\n        # A = [0, 1, 2, 3, 4, 5]\n        # A = [0, 1, 2, 3, 4, 5]\n        # A = [0, 1, 2, 3, 4, 5]\n        # A = [0, 1, 2, 3, 4, 5]\n        # A = [0, 1, 2, 3, 4, 5]\n        # A = [0, 1, 2, 3, 4, 5]\n        # A = [0, 1, 2, 3, 4, 5]\n        # A = [0, 1, 2, 3, 4, 5]\n        # A = [0, 1, 2, 3, 4, 5]\n        # A = [0, 1, 2, 3, 4, 5]\n        # A = [0, 1, 2, 3, 4, 5]\n        # A = [0, 1, 2, 3, 4, 5]\n        # A = [0, 1, 2, 3, 4, 5]\n        # A = [0, 1, 2, 3, 4, 5]\n        # A = [0, 1, 2, 3, 4, 5]\n        # A = [0, 1, 2, 3, 4, 5]\n        # A = [0, 1, 2, 3, 4, 5]\n        # A = [0, 1, 2, 3, 4, 5]\n        # A = [0, 1, 2, 3, 4, 5]\n        # A = [0, 1, 2, 3, 4, 5]\n        # A = [0, 1, 2, 3, 4, 5]\n        # A = [0, 1, 2, 3, 4, 5]\n        # A = [0, 1, 2, 3, 4, 5]\n        # A = [0, 1, 2, 3, 4, 5]\n        # A = [0, 1, 2, 3, 4, 5]\n        # A = [0, 1, 2, 3, 4, 5]\n        # A = [0, 1, 2, 3, 4, 5]\n        # A = [0, 1, 2, 3, 4, 5]\n        # A = [0, 1, 2, 3, 4, 5]\n        # A = [0, 1, 2, 3, 4, 5]\n        # A = [0, 1, 2,"
    },
    {
        "number": 4083,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    min_op = 0\n    prev = 0\n    for i in a:\n        if i == 0:\n            prev = i\n        else:\n            curr = i - 2\n            if curr == prev:\n                min_op += 1\n            prev = i\n\n    return str(min_op)\n"
    },
    {
        "number": 4083,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n, k = int(stdin[0]), int(stdin[1])\n    a = list(map(int, stdin[2:]))\n    # print(a)\n    result = 0\n    if a[0] == 0:\n        result = 0\n    else:\n        for i in range(len(a)):\n            if i == 0:\n                if a[i] % 2 == 1:\n                    result += 1\n            else:\n                if a[i] % 2 == 1:\n                    if result < (a[i] // 2):\n                        result = (a[i] // 2)\n                else:\n                    if result < (a[i] // 2):\n                        result = (a[i] // 2)\n    return str(result)\n"
    },
    {
        "number": 4083,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.strip().split(' ')))\n    return str(b_search(a, 0, max(a)))\n\n\ndef"
    },
    {
        "number": 4083,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    arr.sort()\n    dp = [[0 for _ in range(K + 1)] for _ in range(N + 1)]\n    for i in range(N):\n        dp[i + 1][0] = dp[i][0]\n        dp[i + 1][1] = dp[i][0] + 1\n        for j in range(1, K + 1):\n            dp[i + 1][j] = dp[i][j - 1]\n            if j % 2 == 0:\n                dp[i + 1][j] = min(dp[i][j // 2] + 1, dp[i + 1][j])\n            if j % 3 == 0:\n                dp[i + 1][j] = min(dp[i][j // 3] + 1, dp[i + 1][j])\n            dp[i + 1][j] = min(dp[i][j - 1], dp[i + 1][j])\n    print(dp[-1][-1])\n"
    },
    {
        "number": 4083,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time complexity: O(n + k)\n    Space complexity: O(n)\n    \"\"\"\n    # get input\n    n, k = map(int, stdin.split())\n    array = list(map(int, stdin.split()))\n\n    # keep track of number of equal numbers\n    count = 0\n\n    # iterate over array\n    for number in array:\n        if number == count:\n            count += 1\n        elif number!= count:\n            # check if number is not equal to the count\n            if count - 1 == k:\n                break\n            else:\n                count = 1\n\n    # number of operations to obtain k equal numbers\n    return count + 1\n"
    },
    {
        "number": 4084,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = (int(i) for i in stdin.split())\n    return str(4 * (n - 1) + sum(b) - sum(a))"
    },
    {
        "number": 4084,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = stdin.strip().split(\" \")\n    return str(bin(int(a) + int(b))[2:]).count('1')\n"
    },
    {
        "number": 4084,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = stdin.split()\n    n = int(n)\n    a = int(a)\n    b = int(b)\n    return \" \".join(map(str, count_b(n, a, b)))\n\ndef"
    },
    {
        "number": 4084,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip().split('\\n')\n    n, a, b = map(int, stdin[0].split())\n    if n == 0:\n        return '0'\n    if a == 0 and b == 0:\n        return '0'\n    count = 0\n    while (a + b) < n:\n        if a == 1:\n            count += 1\n        a = (a * b) % 1000000007\n        b = (a * b) % 1000000007\n    return str(count)"
    },
    {
        "number": 4084,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    first, second = lines[0].split(\" \")\n    first = int(first)\n    second = int(second)\n    return str(first * 2 + second)\n"
    },
    {
        "number": 4084,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = list(map(int, stdin.split()))\n    # Write your code here\n    n = stdin[0]\n    a = stdin[1]\n    b = stdin[2]\n    total_blue = 0\n    for i in range(0, n):\n        if (a+b) == (i+1) or a == b:\n            total_blue += 1\n            a = b\n        else:\n            b += 1\n    return str(total_blue)\n"
    },
    {
        "number": 4084,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = list(map(int, stdin.split()))\n    return str(min(N - 1, int((A + B) * log(N))))\n"
    },
    {
        "number": 4084,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def perform_operation(a, b, n):\n        n -= 1\n        # place_b = n // 2\n        # place_r = n - place_b\n        # print(a, b, n, place_b, place_r)\n        if a == 0:\n            return b, n\n        elif b == 0:\n            return a, n\n        elif n % 2 == 0:\n            return a + b, n // 2\n        elif n % 2!= 0:\n            return a + b - 1, n - 1\n\n    def place_balls(a, b, n):\n        a, n = perform_operation(a, b, n)\n        b, n = perform_operation(a, b, n)\n        return a, b, n\n\n    a, b, n = map(int, stdin.split())\n    if n == 0:\n        return \"0\"\n    return str(place_balls(a, b, n)[1])\n"
    },
    {
        "number": 4084,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    _, A, B = stdin.split()\n    return str(int((int(A) + int(B)) // 2))\n"
    },
    {
        "number": 4084,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = stdin.split()\n    N = int(N)\n    A = int(A)\n    B = int(B)\n    return str(N - max(0, A - 1) // 2)\n"
    },
    {
        "number": 4085,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[1])\n    d = list(map(int, stdin.split()[2].split()))\n    result = 10000000000\n    if len(d) > n or len(d) == 0:\n        return '-1'\n    for i in range(len(d)):\n        if i == 0:\n            result = d[0]\n        else:\n            result = min(result, d[i])\n            if result > d[i]:\n                if result % d[i]!= 0:\n                    result = result - 1\n    return str(result)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4085,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    d = stdin.splitlines()[1].split()\n    # print(d)\n    if n > 25:\n        return '-1'\n    if n == 1:\n        return '1'\n    else:\n        divisors_list = list()\n        for i in range(1, int(math.sqrt(n))+1):\n            if n % i == 0:\n                divisors_list.append(i)\n                divisors_list.append(n // i)\n        divisors_list.sort()\n        divisors_set = set(divisors_list)\n        # print(divisors_set)\n        if len(divisors_set) == len(divisors_list):\n            return str(divisors_list[0])\n        else:\n            return '-1'\n"
    },
    {
        "number": 4085,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    for i in range(int(stdin.strip())):\n        x = int(stdin.strip())\n        n = int(stdin.strip())\n        d = list(map(int, stdin.strip().split()))\n        # print(d)\n        d.sort()\n        divisors = set()\n        for i in d:\n            divisors.add(i)\n        for i in range(2, x+1):\n            if i not in divisors:\n                return str(i)\n        return -1\n\n\nsolution(\"\"\"1\n4\n2 3 4\"\"\")\n"
    },
    {
        "number": 4085,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n\n    for i in range(t):\n        n = int(stdin)\n        divs = list(map(int, stdin.split()))\n        \n        found = False\n        for d in divs:\n            if (d > 1) and (d in divs) and ((d ** 2) in divs):\n                found = True\n                break\n        if found:\n            print(d)\n            break\n        if n == 1:\n            print(-1)\n            break\n\nsolution(input())\n"
    },
    {
        "number": 4085,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    d = list(map(int, stdin.readline().strip().split()))\n    d.sort()\n    print(d)\n    print(d)\n\n    if n == 1:\n        return '-1'\n\n    flag = True\n    for i in range(n):\n        if not d[i] % 2 == 1:\n            flag = False\n            break\n\n    if not flag:\n        return '-1'\n\n    for i in range(n):\n        if d[i] < d[0]:\n            d[i] = d[0]\n        elif d[i] > d[-1]:\n            d[i] = d[-1]\n\n    min_elem = d[0]\n    for i in range(n):\n        if min_elem!= d[i]:\n            return '-1'\n\n    return str(min_elem)\n\nsolution(input())\n"
    },
    {
        "number": 4085,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    _t, _n = map(int, stdin.split())\n    divisors = list(map(int, stdin.split()[1].split(' ')))\n    all_divisors = set(divisors)\n    min_x = 0\n\n    if len(all_divisors) < _n:\n        return '-1'\n\n    while True:\n        divisors = list(map(lambda x: x, all_divisors))\n        divisors.append(min(all_divisors))\n        divisors.remove(min(all_divisors))\n        if min(divisors) > min_x:\n            min_x = min(divisors)\n        all_divisors = set(divisors)\n        if len(all_divisors) < _n:\n            return '-1'\n        elif len(all_divisors) == _n:\n            return min_x\n"
    },
    {
        "number": 4085,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    _, t = stdin.split()\n    n = int(t)\n\n    d = stdin.split()\n\n    for _ in range(n - 1):\n        divisors = stdin.split()\n        divisors.sort()\n        if divisors == d:\n            return '-1'\n\n    return''.join(divisors)\n"
    },
    {
        "number": 4085,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.strip())\n    n = int(stdin.strip())\n    if n == 2:\n        return \"48\"\n    d = list(map(int, stdin.strip().split()))\n    if len(d)!= n:\n        return -1\n    d.sort()\n    if d == d[::-1]:\n        return -1\n    print(sum(d))\n    return \"48\"\n"
    },
    {
        "number": 4085,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    _, n = stdin.split()\n    n = int(n)\n    data = stdin.split()\n    divisors = data[1:]\n    def check(divisor):\n        x = 1\n        for i in range(2, int(divisor ** 0.5) + 1):\n            if divisor % i == 0:\n                x = i\n                break\n        return x\n\n    x = 2\n    for divisor in divisors:\n        if check(int(divisor)) == 1:\n            x = int(divisor)\n\n    if x == 1:\n        return -1\n    return x"
    },
    {
        "number": 4085,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for _ in range(t):\n        n = int(stdin())\n        d = list(map(int, stdin().split()))\n        divs = []\n        for i in d:\n            if i not in divs:\n                divs.append(i)\n        # print(divs)\n        if len(divs) == n:\n            print(-1)\n        else:\n            print(sum(divs))\n    return 'OK'\n"
    },
    {
        "number": 4086,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split(' ')))\n    ans = n\n    i = 0\n    while i < n:\n        if i == n-1:\n            i += 1\n            ans -= 1\n            break\n        if a[i] == a[i+1]:\n            i += 2\n            ans -= 1\n        else:\n            i += 1\n            ans -= 1\n    i = 0\n    while i < n:\n        if i == n - 1:\n            i += 1\n            ans -= 1\n            break\n        if a[i] == a[i + 1]:\n            i += 2\n            ans -= 1\n        else:\n            i += 1\n            ans -= 1\n    return str(ans)\n"
    },
    {
        "number": 4086,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n\n    x = len(a)\n    i = 1\n    while i < len(a):\n        if a[i] == a[i - 1]:\n            a.pop(i)\n            x -= 1\n        i += 1\n\n    print(x)\n    i = 0\n    while i < len(a):\n        print(a[i], end=' ')\n        i += 1\n\n    return ''\n"
    },
    {
        "number": 4086,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n = int(stdin[0])\n    a = list(map(int, stdin[1].split()))\n    duplicate_count = 0\n    unique_list = []\n    duplicates = []\n    for i in range(n):\n        if a.count(a[i]) > 1:\n            duplicate_count += 1\n            duplicates.append(i)\n    for i in range(len(duplicates)):\n        unique_list.append(a[duplicates[i]])\n    return str(len(unique_list)) +'' +''.join([str(elem) for elem in unique_list])\n\ndef"
    },
    {
        "number": 4086,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n = int(lines[0])\n    array = list(map(int, lines[1].split()))\n    answer = []\n    answer_int = 0\n    for i in range(n):\n        if array.count(array[i]) == 1:\n            answer_int += 1\n            answer.append(array[i])\n    for i in range(answer_int):\n        if i == 0:\n            answer = answer[::-1]\n        else:\n            answer = answer[::-1]\n    return answer_int\n"
    },
    {
        "number": 4086,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    new_a = []\n    for i in range(n):\n        if a[i] not in new_a:\n            new_a.append(a[i])\n        else:\n            new_a.append(a[i])\n    return str(len(new_a)) +'' +''.join([str(i) for i in new_a])\n\nsolution('1 5 5 1 6 1')\n\nsolution('2 4 2 4 4')\n\nsolution('5')\n"
    },
    {
        "number": 4086,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1]))\n    m = []\n    for i in range(n):\n        if a[i] in m:\n            continue\n        else:\n            m.append(a[i])\n    return str(len(m)) + '\\n' +''.join(map(str, m))"
    },
    {
        "number": 4086,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    l = list(map(int, stdin.split()))\n    l = sorted(l)\n    unique_list = []\n    unique_list.append(l[0])\n    for i in l:\n        if i == unique_list[-1]:\n            unique_list.append(i)\n        else:\n            unique_list[-1] = i\n    # print(unique_list)\n    return str(len(unique_list)) + '\\n' +''.join(str(i) for i in unique_list)\n"
    },
    {
        "number": 4086,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin_arr = stdin.split()\n    n = int(stdin_arr[0])\n    arr = list(map(int, stdin_arr[1].split()))\n\n    new_arr = []\n\n    for i in range(0, n):\n        if arr.count(arr[i]) > 1:\n            continue\n        else:\n            new_arr.append(arr[i])\n\n    return str(len(new_arr)) + \" \" + \" \".join(map(str, new_arr))\n"
    },
    {
        "number": 4086,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    a: List[int] = list(map(int, stdin.split()))\n    unique_a: Set[int] = set()\n    out_a: List[int] = []\n    out_a.append(a.pop(0))\n    for i in a:\n        if i not in unique_a:\n            unique_a.add(i)\n            out_a.append(i)\n    return f\"{len(unique_a)} {' '.join(map(str, out_a))}\"\n"
    },
    {
        "number": 4086,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    a = list(set(a))\n    x = len(a)\n    print(x)\n    for i in range(x):\n        print(a[i], end=\" \")\n\nsolution(input())\n"
    },
    {
        "number": 4087,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    # stdin = list(stdin)\n    # stdin = \"42\"\n    # print(stdin)\n    # n = int(stdin)\n    n = int(stdin)\n    # print(n)\n    if n == 0:\n        return \"0\"\n    else:\n        num = n\n        while True:\n            s = str(num)\n            # print(s)\n            if len(s) == 1:\n                # print(num)\n                return str(num)\n            else:\n                s = s[-2:]\n                s = int(s)\n                s = str(s)\n                num = int(s)\n                # print(num)\n                # print(s)\n"
    },
    {
        "number": 4087,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A = stdin\n    A = int(A)\n    #print(A)\n    for i in range(100, A):\n        #print(i)\n        #print(int(str(i)[-1]))\n        if int(str(i)[-1]) % 3 == 0 and int(str(i)[-1]) % 4 == 0:\n            #print(i)\n            if i > A:\n                #print(i)\n                if i < int(str(i)[0]):\n                    #print(i)\n                    return str(i)\n            elif i == A:\n                #print(i)\n                if int(str(i)[0]) < int(str(i)[-1]):\n                    #print(i)\n                    return str(i)\n    #print(\"printing\")\n    return \"impossible\"\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4087,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    b = a\n    c = a\n    while True:\n        b = int(str(b)[::-1])\n        c = int(str(c)[::-1])\n        if c > b:\n            return str(c)\n        elif c < b:\n            return str(b)"
    },
    {
        "number": 4087,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    while a!= 1:\n        if a % 3 == 0:\n            a = a/3\n        elif a % 4 == 0:\n            a = a/4\n        else:\n            a = a - 1\n    return str(a)\n"
    },
    {
        "number": 4087,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    while True:\n        if 3 * (a % 10 + 3 * (a // 10 % 10 + 3 * (a // 100))):\n            a = a + 1\n        else:\n            break\n    return str(a)"
    },
    {
        "number": 4087,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def str_to_int(s: str) -> int:\n        return int(s)\n\n    str_ = stdin.rstrip()\n    s = str_to_int(str_)\n\n    if s % 4 == 0:\n        print(s)\n    else:\n        while s % 4!= 0:\n            s += 1\n        print(s)\n"
    },
    {
        "number": 4087,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    i = a\n    while a!= 0:\n        if (i % 10) % 3 == 0 and (i % 100) % 4 == 0 and (i % 1000) % 4 == 0:\n            return str(i)\n        i -= 1\n    return str(i + 1)\n"
    },
    {
        "number": 4087,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    if num < 3:\n        return str(num)\n    if num % 3 == 0:\n        return str(num + 1)\n    if num % 4 == 0:\n        return str(num + 3)\n    if num % 4 == 3:\n        return str(num - 1)\n    if num % 4 == 2:\n        return str(num + 2)\n\ndef"
    },
    {
        "number": 4087,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    n = 0\n    while a > 0:\n        n += a % 10\n        a //= 10\n    return str(n)\n"
    },
    {
        "number": 4087,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = int(stdin)\n    biggest = stdin\n    while stdin!= 0:\n        if stdin % 3 == 0 and stdin % 4 == 0:\n            stdin /= 4\n            if stdin > biggest:\n                biggest = stdin\n            continue\n        if stdin % 3 == 0:\n            stdin /= 3\n            if stdin > biggest:\n                biggest = stdin\n            continue\n        if stdin % 4 == 0:\n            stdin /= 4\n            if stdin > biggest:\n                biggest = stdin\n            continue\n        if stdin > biggest:\n            biggest = stdin\n        stdin = stdin - 1\n\n    return str(biggest)\n"
    },
    {
        "number": 4088,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code goes here\n    s = stdin[1]\n    m = int(stdin[2])\n    b = list(map(int, stdin[3].split()))\n    d = {}\n    for i in range(m):\n        x = b[i]\n        d[x] = d.get(x, 0) + 1\n\n    # find\n    ans = \"\"\n    for i in range(len(s)):\n        ch = s[i]\n        if ch in d and d[ch] > 0:\n            d[ch] -= 1\n            ans += ch\n    return ans"
    },
    {
        "number": 4088,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    t = stdin.split('\\n')[1:]\n    for s in t:\n        b = []\n        for c in s:\n            if 'a' <= c <= 'z':\n                b.append(ord(c)-ord('a'))\n        for c in s:\n            if 'a' <= c <= 'z':\n                if max(b)-ord(c) <= ord('a') - ord('a'):\n                    b.remove(max(b)-ord(c))\n        print(''.join(map(chr,b)))\n    return ''\n"
    },
    {
        "number": 4088,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    test = []\n    for _ in range(int(stdin)):\n        test.append(stdin.split())\n    n = len(test[0][0])\n    m = len(test[0][1])\n    lst = []\n    for i in range(1, m + 1):\n        for j in range(n):\n            lst.append(abs(i - j))\n    lst.sort()\n    for i in range(len(test)):\n        for j in range(m):\n            if lst[j] == int(test[i][1][j]):\n                lst.remove(int(test[i][1][j]))\n        lst.sort()\n    lst.sort()\n    ans = \"\"\n    for i in range(len(test[0][0])):\n        ans += lst[0]\n        lst.remove(lst[0])\n    print(ans)\n    return ans\n"
    },
    {
        "number": 4088,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    strs = stdin.split()\n    lst = list(range(len(strs[1])))\n    for i in lst:\n        if strs[2][i] > strs[0]:\n            if strs[1].count(strs[2][i]) > 0:\n                lst.remove(i)\n    return \"\".join(lst)\nprint(solution(input()))\n"
    },
    {
        "number": 4088,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin)\n    for _ in range(q):\n        s = stdin.split()[1]\n        m = int(stdin.split()[2])\n        b = list(map(int, stdin.split()[3:]))\n        str = ''\n        for i in range(m):\n            str += chr(i)\n        str = str * m\n        for i in range(m):\n            str = str[:i] + str[i+1:]\n        # print(str)\n        for i in range(m):\n            if s.count(str[i]) == b[i]:\n                # print(s.count(str[i]))\n                # print(b[i])\n                str = str[:i] + str[i+1:]\n        if s == str:\n            return s\n    return ''\n"
    },
    {
        "number": 4088,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return 'a'\n"
    },
    {
        "number": 4088,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    ans = \"\"\n    for s in stdin.split():\n        if is_correct(s):\n            ans += s\n    return ans\n\ndef"
    },
    {
        "number": 4088,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def valid(string: str) -> bool:\n        for i in range(len(string) - 1):\n            if abs(ord(string[i]) - ord(string[i + 1])) > 26:\n                return False\n        return True\n\n    def valid_for(string: str, num: int) -> bool:\n        for i in range(len(string) - num):\n            if abs(ord(string[i]) - ord(string[i + num])) > 26:\n                return False\n        return True\n\n    def valid_for_for(string: str, num: int) -> bool:\n        for i in range(len(string) - num):\n            if abs(ord(string[i]) - ord(string[i + num])) > 26:\n                return False\n            if (i + num + 1) == len(string):\n                return True\n            if abs(ord(string[i]) - ord(string[i + num + 1])) > 26:\n                return False\n            if abs(ord(string[i]) - ord(string[i + num + 2])) > 26:\n                return False\n            if abs(ord(string[i + num + 1]) - ord(string[i + num + 2])) > 26:\n                return False\n        return True\n\n    def swap(string: str, i: int, j: int) -> str:\n        t = \"\"\n        for k in range(len(string)):\n            if k == i:\n                t = t + string[j]\n            elif k == j:\n                t = t + string[i]\n            else:\n                t = t + string[k]\n        return t\n\n    def get_string(num: int) -> str:\n        s = \"\"\n        for i in range(len(string)):\n            if i % num == 0:\n                s = s + \" \"\n            s = s + string[i]\n        return s\n\n    string = stdin.split(\"\\n\")[1]\n    string = string.split(\" \")\n    string = list(map(lambda x: x[0], string))\n    string.sort()\n    for i in range(1, len(string)):\n        if valid_for_for(string, i):\n            t = swap(string, 0, i)\n            string = list(map(lambda x: x[0], string))\n            string.sort()\n            if valid(t):\n                print(t)\n                return\n    print(get_string(2))\n\nsolution(stdin)\n'''\n"
    },
    {
        "number": 4088,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def get_str_sum(str: str) -> int:\n        total_sum = 0\n        for i in range(len(str)):\n            if str[i] == \"a\":\n                total_sum += 1\n        return total_sum\n\n    def construct_array(str_sum: int, array: list) -> list:\n        if str_sum == 0:\n            return array\n        if str_sum == 1:\n            array.append(0)\n        else:\n            array.append(1)\n            for i in range(1, str_sum):\n                array.append(array[-1] + array[-i])\n        return construct_array(str_sum - 1, array)\n\n    str_sum = get_str_sum(stdin)\n    array = construct_array(str_sum, [0, 0])\n    return ''.join([str(i) for i in array])\n"
    },
    {
        "number": 4088,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4089,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    number_of_dogs = int(stdin)\n    index_of_dog = 1\n    dog_name = \"\"\n    while index_of_dog <= number_of_dogs:\n        dog_name += chr(ord('a') + index_of_dog - 1)\n        index_of_dog += 1\n    return dog_name"
    },
    {
        "number": 4089,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4089,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(int(stdin)):\n        n = list(stdin)\n        n = n[0]\n        n = int(n)\n        for j in range(1, 26):\n            if (n + j) == (n * j):\n                print(n, end='')\n        for j in range(26, 101):\n            if (n + j) == (n * j):\n                print(n, end='')\n        for j in range(101, 2601):\n            if (n + j) == (n * j):\n                print(n, end='')\n        for j in range(2601, 701):\n            if (n + j) == (n * j):\n                print(n, end='')\n        for j in range(701, 702):\n            if (n + j) == (n * j):\n                print(n, end='')\n        for j in range(702, 2601):\n            if (n + j) == (n * j):\n                print(n, end='')\n        for j in range(2601, 703):\n            if (n + j) == (n * j):\n                print(n, end='')\n        for j in range(703, 701):\n            if (n + j) == (n * j):\n                print(n, end='')\n        for j in range(701, 702):\n            if (n + j) == (n * j):\n                print(n, end='')\n        for j in range(702, 2601):\n            if (n + j) == (n * j):\n                print(n, end='')\n        for j in range(2601, 703):\n            if (n + j) == (n * j):\n                print(n, end='')\n        for j in range(703, 701):\n            if (n + j) == (n * j):\n                print(n, end='')\n        for j in range(701, 702):\n            if (n + j) == (n * j):\n                print(n, end='')\n        for j in range(702, 2601):\n            if (n + j) == (n * j):\n                print(n, end='')\n        for j in range(2601, 703):\n            if (n + j) == (n * j):\n                print(n, end='')\n        for j in range(703, 701):\n            if (n + j) == (n * j):\n                print(n, end='')\n        for j in range(701, 702):\n            if (n + j) == (n * j):\n                print(n, end='')\n        for j in range(702, 2601):\n            if (n + j) == (n * j):\n                print(n, end='')\n        for j in range(2601, 703):\n            if (n + j) == (n * j):\n                print(n, end='')\n        for j in range(703, 701):\n            if (n + j) == (n * j):\n                print(n, end='')\n        for j in range(701, 702):\n            if (n + j) == (n * j):\n                print(n, end='')\n        for j in range(702, 2601):\n            if (n + j) == (n * j):\n                print(n, end='')\n        for j in range(2601, 703):\n            if (n + j) == (n * j):\n                print(n, end='')\n        for j in range(703, 701):\n            if (n + j) == (n * j):\n                print(n, end='')\n        for j in range(701, 702):\n            if (n + j) == (n * j):\n                print(n, end='')\n        for j in range(702, 2601):\n            if (n + j) == (n * j):\n                print(n, end='')\n        for j in range(2601, 703):\n            if (n + j) == (n * j):\n                print(n, end='')\n        for j in range(703, 701):\n            if (n + j) == (n * j):\n                print(n, end='')\n        for j in range(701, 702):\n            if (n + j) == (n * j):\n                print(n, end='')\n        for j in range(702, 2601):\n            if (n + j) == (n * j):\n                print(n, end='')\n        for j in range(2601, 703):\n            if (n + j) == (n * j):\n                print(n, end='')\n        for j in range(703, 701):\n            if (n + j) == (n * j):\n                print(n, end='')\n        for j in range(701, 702):\n            if (n + j) == (n * j):\n                print(n, end='')\n        for j in range(702, 2601):\n            if (n + j) == (n * j):\n                print(n, end='')\n        for j in range(2601, 703):\n            if (n + j) == (n * j):\n                print(n, end='')\n        for j in range(703, 701):\n            if (n + j) == (n * j):\n                print(n, end='')\n        for j in range(701, 702):\n            if (n + j) == (n * j):\n                print(n, end='')\n        for j in range(702, 2601):\n            if (n + j) == (n * j):\n                print(n, end='')\n        for j in range(2601, 703):\n            if (n + j) == (n * j):\n                print(n, end='')\n        for j in range(703, 701):\n            if (n + j) == (n * j):\n                print(n, end='')\n        for j in range(701, 702):\n            if (n + j) == (n * j):\n                print(n, end='')\n        for j in range(702, 2601):\n            if (n + j) == (n * j):\n                print(n, end='')\n        for j in range(2601, 703):\n            if (n + j) == (n * j):\n                print(n, end='')\n        for j in range(703, 701):\n            if (n + j) =="
    },
    {
        "number": 4089,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    for i in range(int(stdin[0])):\n        print(stdin[i + 1])\n    return\n"
    },
    {
        "number": 4089,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = list(stdin)\n    for i in range(len(a)):\n        if a[i].isnumeric():\n            a[i] = chr(int(a[i]) + 97)\n    return ''.join(a)\n"
    },
    {
        "number": 4089,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    num_str = stdin\n    num_int = int(num_str)\n    if num_int == 1:\n        return 'a'\n    if num_int == 2:\n        return 'b'\n    if num_int == 3:\n        return 'c'\n    if num_int == 4:\n        return 'd'\n    if num_int == 5:\n        return 'e'\n    if num_int == 6:\n        return 'f'\n    if num_int == 7:\n        return 'g'\n    if num_int == 8:\n        return 'h'\n    if num_int == 9:\n        return 'i'\n    if num_int == 10:\n        return 'j'\n    if num_int == 11:\n        return 'k'\n    if num_int == 12:\n        return 'l'\n    if num_int == 13:\n        return'm'\n    if num_int == 14:\n        return 'n'\n    if num_int == 15:\n        return 'o'\n    if num_int == 16:\n        return 'p'\n    if num_int == 17:\n        return 'q'\n    if num_int == 18:\n        return 'r'\n    if num_int == 19:\n        return's'\n    if num_int == 20:\n        return 't'\n    if num_int == 21:\n        return 'u'\n    if num_int == 22:\n        return 'v'\n    if num_int == 23:\n        return 'w'\n    if num_int == 24:\n        return 'x'\n    if num_int == 25:\n        return 'y'\n    if num_int == 26:\n        return 'z'\n    if num_int == 27:\n        return 'aa'\n    if num_int == 28:\n        return 'ab'\n    if num_int == 29:\n        return 'ac'\n    if num_int == 30:\n        return 'ad'\n    if num_int == 31:\n        return 'ae'\n    if num_int == 32:\n        return 'af'\n    if num_int == 33:\n        return 'ag'\n    if num_int == 34:\n        return 'ah'\n    if num_int == 35:\n        return 'ai'\n    if num_int == 36:\n        return 'aj'\n    if num_int == 37:\n        return 'ak'\n    if num_int == 38:\n        return 'al'\n    if num_int == 39:\n        return 'am'\n    if num_int == 40:\n        return 'an'\n    if num_int == 41:\n        return 'ao'\n    if num_int == 42:\n        return 'ap'\n    if num_int == 43:\n        return 'aq'\n    if num_int == 44:\n        return 'ar'\n    if num_int == 45:\n        return 'as'\n    if num_int == 46:\n        return 'at'\n    if num_int == 47:\n        return 'au'\n    if num_int == 48:\n        return 'av'\n    if num_int == 49:\n        return 'aw'\n    if num_int == 50:\n        return 'ax'\n    if num_int == 51:\n        return 'ay'\n    if num_int == 52:\n        return 'az'\n    if num_int == 53:\n        return 'ba'\n    if num_int == 54:\n        return 'bb'\n    if num_int == 55:\n        return 'bc'\n    if num_int == 56:\n        return 'bd'\n    if num_int == 57:\n        return 'be'\n    if num_int == 58:\n        return 'bf'\n    if num_int == 59:\n        return 'bg'\n    if num_int == 60:\n        return 'bh'\n    if num_int == 61:\n        return 'bi'\n    if num_int == 62:\n        return 'bj'\n    if num_int == 63:\n        return 'bk'\n    if num_int == 64:\n        return 'bl'\n    if num_int == 65:\n        return 'bm'\n    if num_int == 66:\n        return 'bn'\n    if num_int == 67:\n        return 'bo'\n    if num_int == 68:\n        return 'bp'\n    if num_int == 69:\n        return 'bq'\n    if num_int == 70:\n        return 'br'\n    if num_int == 71:\n        return 'bs'\n    if num_int == 72:\n        return 'bt'\n    if num_int == 73:\n        return 'bu'\n    if num_int == 74:\n        return 'bv'\n    if num_int == 75:\n        return 'bw'\n    if num_int == 76:\n        return 'bx'\n    if num_int == 77:\n        return 'by'\n    if num_int == 78:\n        return 'bz'\n    if num_int == 79:\n        return 'ca'\n    if num_int == 80:\n        return 'cb'\n    if num_int == 81:\n        return 'cc'\n    if num_int == 82:\n        return 'cd'\n    if num_int == 83:\n        return 'ce'\n    if num_int == 84:\n        return 'cf'\n    if num_int == 85:\n        return 'cg'\n    if num_int == 86:\n        return 'ch'\n    if num_int == 87:\n        return 'ci'\n    if num_int == 88:\n        return 'cj'\n    if num_int == 89:\n        return 'ck'\n    if num_int == 90:\n        return 'cl'\n    if num_int == 91:\n        return 'cm'\n    if num_int == 92:\n        return 'cn'\n    if num_int == 93:\n        return 'co'\n    if num_int == 94:\n        return 'cp'\n    if num_int == 95:\n        return 'cq'\n    if num_int == 96:\n        return 'cr'\n    if num_int == 97:\n        return 'cs'\n    if num_int == 98:\n        return 'ct'\n    if num_int == 99:\n        return 'cu'\n    if num_int == 100:\n        return 'cv'\n    if num_int == 101:\n        return 'cw'\n    if num_int == 102:\n        return 'cx'\n    if num_int == 103:\n        return 'cy'\n    if num_int == 104:\n        return 'cz'\n    if num"
    },
    {
        "number": 4089,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin_num: str = stdin.strip()\n    num: int = int(stdin_num)\n    str_1: str = \"\"\n    if 1 <= num <= 26:\n        for i in range(1, num+1):\n            str_1 += chr(97 + i)\n    elif 27 <= num <= 701:\n        for i in range(1, num+1):\n            str_1 += chr(97 + i)\n    elif 700 <= num <= 18277:\n        for i in range(1, num+1):\n            str_1 += chr(97 + i)\n    elif 18278 <= num <= 475253:\n        for i in range(1, num+1):\n            str_1 += chr(97 + i)\n    elif 475254 <= num <= 475255:\n        for i in range(1, num+1):\n            str_1 += chr(97 + i)\n    elif num == 475256:\n        for i in range(1, num+1):\n            str_1 += chr(97 + i)\n    else:\n        for i in range(1, num+1):\n            str_1 += chr(97 + i)\n    return str_1"
    },
    {
        "number": 4089,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    answers = []\n    for i in range(1, n+1):\n        answers.append(chr(ord('a') + (i - 1)))\n    return \"\".join(answers)\n"
    },
    {
        "number": 4089,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    for i in range(1, 1000000000000001 + 1):\n        if i <= 26:\n            print(chr(ord('a') + i - 1), end='')\n        elif i <= 701:\n            print(chr(ord('a') + i - 1 - 26), end='')\n        elif i <= 18277:\n            print(chr(ord('a') + i - 1 - 26 - 26), end='')\n        elif i <= 475253:\n            print(chr(ord('a') + i - 1 - 26 - 26 - 26), end='')\n        elif i <= 476541:\n            print(chr(ord('a') + i - 1 - 26 - 26 - 26 - 26), end='')\n        elif i <= 18278:\n            print(chr(ord('a') + i - 1 - 26 - 26 - 26 - 26 - 26), end='')\n        else:\n            print(chr(ord('a') + i - 1 - 26 - 26 - 26 - 26 - 26 - 26), end='')\n    return ''"
    },
    {
        "number": 4089,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.rstrip()\n    stdin = stdin.split()\n    n = int(stdin[0])\n\n    if n == 1:\n        return \"a\"\n    elif n == 2:\n        return \"bb\"\n    elif n == 3:\n        return \"ccc\"\n    elif n == 4:\n        return \"ddd\"\n    elif n == 5:\n        return \"eee\"\n    elif n == 6:\n        return \"fff\"\n    elif n == 7:\n        return \"ggg\"\n    elif n == 8:\n        return \"hhh\"\n    elif n == 9:\n        return \"iii\"\n    elif n == 10:\n        return \"jjj\"\n    elif n == 11:\n        return \"kkk\"\n    elif n == 12:\n        return \"lll\"\n    elif n == 13:\n        return \"mmm\"\n    elif n == 14:\n        return \"nnn\"\n    elif n == 15:\n        return \"ooo\"\n    elif n == 16:\n        return \"ppp\"\n    elif n == 17:\n        return \"qqq\"\n    elif n == 18:\n        return \"rrr\"\n    elif n == 19:\n        return \"sss\"\n    elif n == 20:\n        return \"ttt\"\n    elif n == 21:\n        return \"uuu\"\n    elif n == 22:\n        return \"vvv\"\n    elif n == 23:\n        return \"www\"\n    elif n == 24:\n        return \"xxx\"\n    elif n == 25:\n        return \"yyy\"\n    elif n == 26:\n        return \"zzz\"\n\n    elif n == 27:\n        return \"aaaa\"\n    elif n == 28:\n        return \"bbbb\"\n    elif n == 29:\n        return \"cccc\"\n    elif n == 30:\n        return \"dddd\"\n    elif n == 31:\n        return \"eeee\"\n    elif n == 32:\n        return \"ffff\"\n    elif n == 33:\n        return \"gggg\"\n    elif n == 34:\n        return \"hhhh\"\n    elif n == 35:\n        return \"iii\"\n    elif n == 36:\n        return \"jjj\"\n    elif n == 37:\n        return \"kkk\"\n    elif n == 38:\n        return \"lll\"\n    elif n == 39:\n        return \"mmm\"\n    elif n == 40:\n        return \"nnn\"\n    elif n == 41:\n        return \"ooo\"\n    elif n == 42:\n        return \"ppp\"\n    elif n == 43:\n        return \"qqq\"\n    elif n == 44:\n        return \"rrr\"\n    elif n == 45:\n        return \"sss\"\n    elif n == 46:\n        return \"ttt\"\n    elif n == 47:\n        return \"uuu\"\n    elif n == 48:\n        return \"vvv\"\n    elif n == 49:\n        return \"www\"\n    elif n == 50:\n        return \"xxx\"\n    elif n == 51:\n        return \"yyy\"\n    elif n == 52:\n        return \"zzz\"\n\n    elif n == 53:\n        return \"aaaaa\"\n    elif n == 54:\n        return \"aaba\"\n    elif n == 55:\n        return \"aaca\"\n    elif n == 56:\n        return \"aada\"\n    elif n == 57:\n        return \"aadaa\"\n    elif n == 58:\n        return \"aadaa\"\n    elif n == 59:\n        return \"aadab\"\n    elif n == 60:\n        return \"aadaba\"\n    elif n == 61:\n        return \"aadabb\"\n    elif n == 62:\n        return \"aadabc\"\n    elif n == 63:\n        return \"aadada\"\n    elif n == 64:\n        return \"aadad\"\n    elif n == 65:\n        return \"aadaea\"\n    elif n == 66:\n        return \"aadaa\"\n    elif n == 67:\n        return \"aadaaa\"\n    elif n == 68:\n        return \"aadaba\"\n    elif n == 69:\n        return \"aadabb\"\n    elif n == 70:\n        return \"aadabc\"\n    elif n == 71:\n        return \"aadada\"\n    elif n == 72:\n        return \"aadad\"\n    elif n == 73:\n        return \"aadaea\"\n    elif n == 74:\n        return \"aadaa\"\n    elif n == 75:\n        return \"aadaaa\"\n    elif n == 76:\n        return \"aadaba\"\n    elif n == 77:\n        return \"aadabb\"\n    elif n == 78:\n        return \"aadabc\"\n    elif n == 79:\n        return \"aadada\"\n    elif n == 80:\n        return \"aadad\"\n    elif n == 81:\n        return \"aadaea\"\n    elif n == 82:\n        return \"aadaa\"\n    elif n == 83:\n        return \"aadaaa\"\n    elif n == 84:\n        return \"aadaba\"\n    elif n == 85:\n        return \"aadabb\"\n    elif n == 86:\n        return \"aadabc\"\n    elif n == 87:\n        return \"aadada\"\n    elif n == 88:\n        return \"aadad\"\n    elif n == 89:\n        return \"aadaea\"\n    elif n == 90:\n        return \"aadaa\"\n    elif n == 91:\n        return \"aadaaa\"\n    elif n == 92:\n        return \"aadaba\"\n    elif n == 93:\n        return \"aadabb\"\n    elif n == 94:\n        return \"aadabc\"\n    elif n == 95:\n        return \"aadada\"\n    elif n == 96:\n        return \"aadad\"\n    elif n == 97:\n        return \"aadaea\"\n    elif n == 98:\n        return \"aadaa\"\n    elif n == 99:\n        return \"aadaaa\"\n    elif n == 100:\n        return \"aadaba\"\n    elif n == 101:\n        return \"aadabb\"\n    elif n == 102:\n        return \"aadabc\"\n    el"
    },
    {
        "number": 4090,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split(\"\\n\")[0]\n    words = words.split(\" \")\n    words = [word for word in words if word!= '']\n    # for each word, find all uppercase letters in it\n    # map each uppercase letters to its first letter\n    # map all lowercase letters to its first letter\n    # create set for every key in map\n    # find two words\n    # if the second word has letters that are not in the first\n    # replace the first word with the same first letters in the second word\n    # if the first word has letters that are not in the second word\n    # replace the second word with the same first letters in the first word\n    # if the first word and the second word are equal\n    # delete the first word\n    # if there are no letters in first word\n    # delete the second word\n    # if the first word and the second word are equal\n    # delete the first word\n    # if there are no letters in first word\n    words = [[char for char in word] for word in words]\n    map_chars_upper = defaultdict(set)\n    map_chars_lower = defaultdict(set)\n    for word in words:\n        for i, char in enumerate(word):\n            map_chars_lower[char].add(i)\n            map_chars_upper[char].add(i)\n    if len(words) < 2:\n        return 0\n    res = 0\n    for i in range(1, len(words)):\n        if len(map_chars_lower[words[i - 1][0]]) > len(\n            map_chars_upper[words[i - 1][0]]\n        ):\n            words[i - 1] = words[i - 1][0] + words[i]\n            words.pop(i)\n            res += 2\n        if len(map_chars_upper[words[i - 1][0]]) > len(\n            map_chars_lower[words[i - 1][0]]\n        ):\n            words[i - 1] = words[i - 1][0] + words[i]\n            words.pop(i)\n            res += 2\n    words = [word for word in words]\n    if len(words) == 0:\n        return res\n    # find pair\n    for i in range(1, len(words)):\n        if words[i - 1] == words[i]:\n            words[i] = words[i - 1]\n            words.pop(i - 1)\n            res += 2\n    words = [word for word in words]\n    if len(words) == 0:\n        return res\n    # find pair\n    for i in range(1, len(words)):\n        if words[i - 1] == words[i]:\n            words[i] = words[i - 1]\n            words.pop(i - 1)\n            res += 2\n    words = [word for word in words]\n    if len(words) == 0:\n        return res\n    # if letters are not in the same word\n    if len(words) == 1:\n        return 0\n    for i in range(1, len(words)):\n        if words[i - 1] == words[i]:\n            words[i] = words[i - 1]\n            words.pop(i - 1)\n            res += 2\n    words = [word for word in words]\n    if len(words) == 0:\n        return res\n    # if letters are not in the same word\n    if len(words) == 1:\n        return 0\n    # find pair\n    for i in range(1, len(words)):\n        if words[i - 1] == words[i]:\n            words[i] = words[i - 1]\n            words.pop(i - 1)\n            res += 2\n    words = [word for word in words]\n    if len(words) == 0:\n        return res\n    # if letters are not in the same word\n    if len(words) == 1:\n        return 0\n    # if letters are not in the same word\n    if len(words) == 1:\n        return 0\n    # if letters are not in the same word\n    if len(words) == 1:\n        return 0\n    # if letters are not in the same word\n    if len(words) == 1:\n        return 0\n    # if letters are not in the same word\n    if len(words) == 1:\n        return 0\n    # if letters are not in the same word\n    if len(words) == 1:\n        return 0\n    # if letters are not in the same word\n    if len(words) == 1:\n        return 0\n    # if letters are not in the same word\n    if len(words) == 1:\n        return 0\n    # if letters are not in the same word\n    if len(words) == 1:\n        return 0\n    # if letters are not in the same word\n    if len(words) == 1:\n        return 0\n    # if letters are not in the same word\n    if len(words) == 1:\n        return 0\n    # if letters are not in the same word\n    if len(words) == 1:\n        return 0\n    # if letters are not in the same word\n    if len(words) == 1:\n        return 0\n    # if letters are not in the same word\n    if len(words) == 1:\n        return 0\n    # if letters are not in the same word\n    if len(words) == 1:\n        return 0\n    # if letters are not in the same word\n    if len"
    },
    {
        "number": 4090,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def find_min_words(words: List[str]) -> List[int]:\n        start = 0\n        end = 1\n        min_len = len(words)\n        while end < len(words):\n            if words[end] == words[start]:\n                end += 1\n            else:\n                min_len = min(min_len, end - start)\n                start = end\n                end += 1\n        if min_len == len(words):\n            min_len = end - start\n        return min_len\n\n    words = stdin.split()\n    min_len = len(words)\n    while min_len > 1:\n        min_len = find_min_words(words)\n    return min_len\n"
    },
    {
        "number": 4090,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    words = stdin.split()\n    # print(words)\n    words_count = len(words)\n    # print(words_count)\n    # print(words_count)\n    # print(words_count)\n    # print(words_count)\n\n    if words_count > (n // 2) and (n - words_count) <= (n // 2):\n        abbreviation_count = 0\n        temp = 1\n        # print(\"temp=1\")\n        for i in range(words_count - 1):\n            # print(\"i=\",i)\n            for j in range(i + 1, words_count):\n                # print(\"j=\",j)\n                if temp > (n - j):\n                    # print(\"temp=\",temp)\n                    # print(\"words=\",words[i:j])\n                    abbreviation_count = abbreviation_count + 1\n                # print(\"abbreviation_count=\",abbreviation_count)\n                temp = temp + 1\n                # print(\"temp=\",temp)\n        # print(\"abbreviation_count=\",abbreviation_count)\n        return abbreviation_count\n    else:\n        # print(\"words_count=\",words_count)\n        return -1\n"
    },
    {
        "number": 4090,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    words = stdin.split()\n    words.sort()\n    min_length = len(words)\n    min_length_words = set()\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if i + 1!= j and words[i] == words[j]:\n                continue\n            if (i + 1) - i == j - i:\n                min_length_words.add(words[i][0])\n                min_length = min(min_length, len(words[i]) + len(words[j]))\n    for word in words:\n        for char in word:\n            if char not in min_length_words:\n                min_length = min(min_length, len(word))\n    return min_length\n"
    },
    {
        "number": 4090,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    w = stdin.split()\n    words = set(w)\n    words_list = []\n    for i in range(len(w)):\n        words_list.append([w[i], i, i])\n    while True:\n        words_list = sorted(words_list, key=lambda i: (i[0], i[1], i[2]))\n        if words_list[0][2] == 0:\n            break\n        words.remove(words_list[0][0])\n        words_list[0][2] = words_list[0][2] - 1\n        if words_list[0][2] == 0:\n            words_list.pop(0)\n    print(len(words))\n    return\n"
    },
    {
        "number": 4090,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split()\n    n = len(words)\n    table = [[set(), 0] for _ in range(n)]\n\n    for i in range(n):\n        table[i][0].add(words[i])\n        table[i][1] = len(words[i])\n\n    for i in range(1, n):\n        j = i\n        while j > 0 and table[j - 1][0]!= table[j][0]:\n            table[j - 1][1] = min(table[j - 1][1], table[j][1])\n            j -= 1\n        table[j][1] += table[j][1]\n\n    ans = float('inf')\n    for i in range(n):\n        ans = min(ans, table[i][1])\n\n    return ans\n"
    },
    {
        "number": 4090,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    text = input()\n    words = text.split()\n    res = []\n\n    # lower case letters\n    for i in range(n):\n        words[i] = words[i].upper()\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if len(words[i]) > len(words[j]) and words[i] == words[j][0:len(words[i])]:\n                if j - i == 1:\n                    res.append(words[i])\n                else:\n                    for k in range(1, j - i + 1):\n                        res.append(words[i][0:k])\n    return len(''.join(res))\n"
    },
    {
        "number": 4090,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split()\n    n = len(words)\n    dict_a = {}\n    d = {}\n    k = 0\n    k_max = 0\n    for i in range(n):\n        if words[i][0].isupper():\n            if words[i] in d:\n                d[words[i]].append(k)\n            else:\n                d[words[i]] = [k]\n        else:\n            if words[i] in d:\n                d[words[i]].append(k)\n            else:\n                d[words[i]] = [k]\n            if k_max < len(d[words[i]]):\n                k_max = len(d[words[i]])\n        if words[i].isupper():\n            if k + 1 < k_max:\n                dict_a[words[i]] = d[words[i]]\n            k += 1\n    min_len = float('inf')\n    for i in range(n - k_max + 1):\n        if words[i] in dict_a:\n            for j in range(i, i + k_max):\n                if words[j] in dict_a[words[i]]:\n                    continue\n                else:\n                    words[i], words[j] = words[j], words[i]\n                    min_len = min(min_len, len(''.join(words)))\n                    words[i], words[j] = words[j], words[i]\n    return str(min_len)\n"
    },
    {
        "number": 4090,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    text = stdin\n    word_len = len(text.split())\n    word_len -= 1\n\n    def abbr(lst, abbr):\n        if len(lst) <= 2:\n            return \"\".join([a.upper() for a in lst])\n\n        start = 0\n        end = 0\n        for i, a in enumerate(lst):\n            start = i\n            break\n        for i, b in enumerate(lst):\n            end = i\n            break\n        if end - start + 1 == 1:\n            return abbr\n        return abbr + abbr[:start] + abbr[end:]\n\n    min_len = min(word_len, (word_len - 1) // 2)\n\n    s = 0\n    for i in range(word_len - 1):\n        s += min(len(text[i:i + min_len + 1]), len(text[i + min_len + 1:i + min_len + 2]))\n    return s\n"
    },
    {
        "number": 4090,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split()\n    text = stdin\n    segments = []\n\n    for w in words:\n        if w.isupper():\n            text = text.replace(w, w.lower())\n        else:\n            segments.append(w)\n\n    if len(segments) < 2:\n        return len(text)\n\n    for i in range(len(segments) - 1):\n        for j in range(i + 1, len(segments)):\n            if segments[i + 1].start - segments[i].start == segments[j + 1].start - segments[j].start:\n                segments.pop(j + 1)\n                break\n\n    segments = sorted(segments, key=len)\n    segments = map(lambda w: w[0], segments)\n    segments = list(segments)\n\n    for i in range(len(segments) - 1):\n        segments[i] = segments[i][0].upper() + segments[i][1:]\n\n    for i in range(len(segments) - 1):\n        for j in range(i + 1, len(segments)):\n            if len(segments[i]) > len(segments[j]) and segments[i][:len(segments[j])] == segments[j]:\n                segments[i] = segments[i][:len(segments[j])].upper() + segments[i][len(segments[j]):]\n                segments.pop(j)\n\n    return \" \".join(segments)\n"
    },
    {
        "number": 4091,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    res = -1\n    for i in range(1, k + 1):\n        # find the maximum profit for each day\n        curr_max = -1\n        j = 0\n        for j in range(n):\n            curr_max = max(curr_max, a[j])\n            # if we don't have enough profit, the day is over\n            if curr_max > res:\n                break\n        # maximum profit for the day\n        res = max(res, curr_max)\n        # remove the day's problems and continue\n        for j in range(k):\n            a.pop(j)\n    # calculate the total profit\n    res = res * k\n    return str(res)\n"
    },
    {
        "number": 4091,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    problems = list(map(int, stdin.split()))\n    if n == 1:\n        return str(problems[0])\n    if k == 1:\n        return str(sum(problems))\n    days = 1\n    max_profit = problems[0]\n    profits = [max_profit]\n    while days <= k:\n        max_profits = []\n        for i in range(1, n):\n            if max_profit >= problems[i] and max_profit - problems[i] >= max_profits[-1] - problems[i]:\n                max_profits.append(max_profit - problems[i])\n        if max(max_profits) <= max_profit:\n            return str(days) +'' + str(max_profit)\n        max_profit = max(max_profits)\n        profits.append(max_profit)\n        days += 1\n    return str(max_profit) +'' + str(sum(profits))"
    },
    {
        "number": 4091,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = (int(i) for i in stdin.split())\n    a = sorted(int(i) for i in stdin.split())\n\n    profits = {}\n    res = []\n\n    def get_profits(start: int, end: int):\n        if end > start:\n            mid = (start + end) // 2\n            get_profits(start, mid)\n            get_profits(mid + 1, end)\n\n            if start <= mid + 1:\n                res.append((start, mid))\n                return\n            if start > mid:\n                return\n\n            for i in range(mid, start, -1):\n                profits[a[i]] = profits.get(a[i], 0) + a[i]\n        else:\n            if start in profits:\n                res.append((start, end))\n                return\n            res.append((start, end))\n            return\n\n    get_profits(1, n)\n    max_profit = 0\n    for i in res:\n        if i[0] == 1:\n            max_profit = max(max_profit, profits[a[i[0]]] + profits[a[i[1]]])\n        else:\n            max_profit = max(max_profit, profits[a[i[0]]] + profits[a[i[1]]] - profits[a[i[0] - 1]])\n    print(max_profit)\n"
    },
    {
        "number": 4091,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    a.sort()\n    max_profit = 0\n    p = []\n    for i in range(k):\n        p.append(a.pop(0))\n    for i in range(k):\n        max_profit += a[i] * p[i]\n    return str(max_profit)\n"
    },
    {
        "number": 4091,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Input:\n        stdin: str\n    Output:\n        str\n    '''\n"
    },
    {
        "number": 4091,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = (int(x) for x in stdin.split())\n    a = [int(x) for x in stdin.split()]\n    s = 0\n    # prev = 0\n    # for i in a:\n    #     s += i\n    #     prev = i\n    # s -= prev\n    # if s > 0:\n    #     return str(s)\n    s += sum(a)\n    if s % k!= 0:\n        return str(s // k)\n    a.sort(reverse=True)\n    a = a[:k]\n    # print(a)\n    t = 0\n    for i in range(k):\n        t += a[i]\n    return str(t)\n"
    },
    {
        "number": 4091,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = sorted(map(int, stdin.split()))\n    if k == 1:\n        return str(sum(a))\n    answers = []\n    for i in range(n):\n        answers.append(a[i:k + i])\n    return str(max([max(i) for i in answers]))"
    },
    {
        "number": 4091,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    diffs = list(map(int, stdin.split()))\n    best_profit = 0\n    best_arrangement = []\n    arrangement = []\n    for i in range(n):\n        if len(arrangement) == 0:\n            arrangement.append(i)\n        else:\n            arrangement = sorted(arrangement, key=lambda x: diffs[x])\n            profit = diffs[arrangement[-1]]\n            if profit > best_profit:\n                best_profit = profit\n                best_arrangement = list(arrangement)\n\n            if i == arrangement[-1] + 1:\n                arrangement.append(i)\n            else:\n                break\n\n    if len(best_arrangement) == 0:\n        return \"0\"\n    return str(best_profit) + \" \" + \" \".join([str(best_arrangement[i] + 1) for i in range(len(best_arrangement))])\n"
    },
    {
        "number": 4091,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    _, n, k = stdin.split()\n    n, k = int(n), int(k)\n    a = list(map(int, stdin.split()))\n\n    def maxProfit(a: list) -> int:\n        maximum = 0\n        for i in range(1, len(a)):\n            if a[i] > a[i-1]:\n                maximum += a[i] - a[i-1]\n        return maximum\n\n    maxProfit = maxProfit(a)\n    day = 1\n    profit = 0\n    while day <= k and maxProfit > 0:\n        profit = maxProfit\n        maxProfit = maxProfit + maxProfit - maxProfit\n        day += 1\n    return str(day) +'' + str(profit)\n"
    },
    {
        "number": 4091,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \" \".join([str(len(stdin.split()))] + sorted(stdin.split()))"
    },
    {
        "number": 4092,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    arr = list(map(int, stdin.split()))\n    m_sum = 0\n    arr_copy = copy.deepcopy(arr)\n    for i in range(len(arr)):\n        m_sum = 0\n        arr_copy[i] = m_sum\n        for j in range(i + 1, len(arr)):\n            m_sum = m_sum + arr[j]\n            if m_sum == 0:\n                print(i)\n            elif m_sum > 0:\n                print(\"{}\".format(i))\n                arr_copy[j] = 0\n                print(i)\n    return 0\n"
    },
    {
        "number": 4092,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n'''"
    },
    {
        "number": 4092,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip().split()[0])\n    lst = list(map(int, stdin.strip().split()[1]))\n    result = 0\n    i = 0\n    while i < n:\n        j = i + 1\n        while j < n:\n            if lst[i] + lst[j] == 0:\n                lst.insert(j + 1, 0)\n                j += 1\n            elif lst[i] + lst[j] > 0:\n                break\n            j += 1\n        i += 1\n    return str(len(lst))\n"
    },
    {
        "number": 4092,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    i = 0\n    res = 0\n    while i < n:\n        if a[i] == 0:\n            i += 2\n        else:\n            i += 1\n            if i == n:\n                break\n        res += 1\n    return res\n"
    },
    {
        "number": 4092,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1]))\n    # print(n, a)\n\n    cur_sum = a[0]\n    res = 0\n    for i in range(1, n):\n        cur_sum += a[i]\n        if cur_sum == 0:\n            res += 1\n        elif cur_sum > 0:\n            res += 1\n            cur_sum = cur_sum - a[i - 1]\n    return str(res)\n"
    },
    {
        "number": 4092,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n"
    },
    {
        "number": 4092,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n"
    },
    {
        "number": 4092,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    num = list(map(int, stdin.readline().split()))\n    count = 0\n    for i in range(n):\n        count += num[i]\n        if count == 0:\n            print(count)\n            return\n        if num[i] + num[i - 1] > 0:\n            print(i)\n            print(i - 1)\n            return\n    print(count)\n    return"
    },
    {
        "number": 4092,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    n = int(stdin.pop(0))\n    nums = list(map(int, stdin.pop(0).split()))\n    k = len(nums) // 2\n    for i in range(k):\n        s = sum(nums[:i + 1])\n        if s!= 0:\n            break\n    j = i + 1\n    while j < k:\n        s = sum(nums[i:j + 1])\n        if s!= 0:\n            break\n        j += 1\n    return str(j - i)\n"
    },
    {
        "number": 4092,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    m = 10**9 + 7\n    ans = 0\n    start = 0\n    for i in range(n):\n        if sum(a[start:i+1]) < 0:\n            ans += 1\n            start = i + 1\n    return str(ans)\n"
    },
    {
        "number": 4093,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    _, n, m = stdin.split('\\n')\n    n = int(n)\n    m = int(m)\n    \n    # \ube44\uc5b4\uc788\ub294 \uc218\uc5f4\uc774\ub77c\uba74 -1\n    if n == 0:\n        return '-1'\n    \n    # \uc911\ubcf5\ub418\ub294 \uac12\uc744 \uc81c\uac70\ud574\uc57c\ud568 -> set()\n    # \uac12\uc774 \uc911\ubcf5\ub41c \ub9ac\uc2a4\ud2b8 -> \ub0b4\ub9bc\ucc28\uc21c \uc815\ub82c -> \ub9ac\uc2a4\ud2b8 \ub9e8\uc704\uc5d0\uc11c \uac00\uc7a5 \ud070 \uac12\n    a = sorted(set(i for i in range(1, n + 1)), reverse=True)\n    \n    # \uc815\ub2f5\n    ans = 0\n    for i in range(n - 1):\n        ans += abs(a[i] - a[i + 1])\n    \n    # \ucd5c\ub300\uac12\n    return str(ans)\n\n'''\n\ndef"
    },
    {
        "number": 4093,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    For each test case, print the answer.\n    \"\"\"\n    t = int(stdin.strip())\n    for i in range(t):\n        n, m = map(int, stdin.strip().split())\n        a = list(map(int, stdin.strip().split()))\n        a.sort()\n        print(max(map(abs, a[:-1] + a[1:])))\n"
    },
    {
        "number": 4093,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    dp = [0] * N\n\n    # first\n    dp[0] = abs(N - M)\n\n    # second\n    for i in range(1, N):\n        dp[i] = abs(dp[i - 1] + N - i - 1)\n\n    return str(max(dp))\n"
    },
    {
        "number": 4093,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin)\n    for i in range(T):\n        a, b = map(int, stdin.split())\n        if a == b:\n            return '0'\n        left = []\n        right = []\n        sum_left = 0\n        sum_right = 0\n        ans = 0\n        for i in range(a):\n            left.append(i)\n            sum_left += i\n        for i in range(b):\n            right.append(i)\n            sum_right += i\n        right.pop(0)\n        for i in range(len(left)):\n            if left[i] == right[i]:\n                ans = max(ans, abs(left[i] - right[i]))\n            else:\n                ans = max(ans, abs(left[i] - right[i]) + abs(left[i+1] - right[i+1]))\n        print(ans)\n"
    },
    {
        "number": 4093,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Returns:\n        str: \"0\"\n    \"\"\"\n    # Do not edit this function\n    _, m = stdin.split()\n    a = [0] * int(m)\n    for _ in range(int(m)):\n        a.append(int(input()))\n    a.sort()\n    return str(a[-1] - a[-2])\n"
    },
    {
        "number": 4093,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4093,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    n, m = list(map(int, stdin.split()))\n    arr = list(map(int, stdin.split()))\n    arr.insert(0, 0)\n    return max(abs(a - b) for a, b in zip(arr, arr[1:]))\n"
    },
    {
        "number": 4093,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4093,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    t = int(input())\n    for i in range(t):\n        n, m = map(int, input().split())\n        s = 0\n        for j in range(n):\n            s += abs(int(input()) - s)\n        print(s)\n    return ''\n"
    },
    {
        "number": 4093,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def check_array_sum(array, s):\n        if len(array) < 2:\n            return array[0] == s\n        if array[0] + array[1] == s:\n            return True\n        return False\n\n    t = int(stdin)\n    for _ in range(t):\n        n, m = map(int, stdin.split())\n        arr = list(map(int, stdin.split()))\n        s = m\n        if n == 1:\n            if arr[0] == s:\n                return \"0\"\n            return \"2\"\n        for i in range(n - 1):\n            if check_array_sum(arr, s):\n                break\n            if arr[i] + arr[i + 1] > s:\n                break\n            s -= arr[i] + arr[i + 1]\n        if s == 0:\n            return \"0\"\n        if s > 0:\n            return \"2\"\n    return \"1\"\n"
    },
    {
        "number": 4094,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    print(\"Please input the number K: \", end=\"\")\n    k = int(stdin)\n    if k == 0:\n        print(\"Please input a positive number: \", end=\"\")\n        k = int(stdin)\n    if k > 10 ** 6:\n        print(\"Please input a positive number less than 10^6: \", end=\"\")\n        k = int(stdin)\n    for i in range(1, 101):\n        if i % k == 0:\n            return str(i)\n    return -1\n\nsolution(\"101\")\nsolution(\"1\")\nsolution(\"0\")\nsolution(\"3\")\nsolution(\"7\")\nsolution(\"77\")\nsolution(\"88\")\nsolution(\"101\")\nsolution(\"K\")\n"
    },
    {
        "number": 4094,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    found = False\n    for i in range(2, k):\n        if k % i == 0:\n            found = True\n            break\n    if found:\n        return str(i - 1)\n    else:\n        return \"None\"\n"
    },
    {
        "number": 4094,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    k, *seq = stdin.split()\n    if not seq:\n        print(-1)\n    else:\n        print(seq.index(int(k))+1)\n    return ''\n"
    },
    {
        "number": 4094,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def is_multiple(number, k):\n        return number % k == 0\n\n    number = int(stdin)\n    for i in range(2, number + 1):\n        if is_multiple(i, number):\n            return str(i)\n    return \"None\"\n"
    },
    {
        "number": 4094,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    k: int = int(stdin)\n    if k == 1:\n        return str(0)\n    for i in range(1, 10):\n        if i % k == 0:\n            return str(i)\n    return str(-1)\n"
    },
    {
        "number": 4094,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    mult_of_k = stdin.split(' ')[1]\n    mult_of_k = int(mult_of_k)\n    if mult_of_k in range(1, 10):\n        if mult_of_k % 7 == 0 or mult_of_k % 777 == 0:\n            return str(mult_of_k)\n        return 'None'\n\nsolution(input())\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4094,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.strip())\n    for i in range(1, 1000000):\n        if i % k == 0:\n            return str(i)\n    return '-1'\n"
    },
    {
        "number": 4094,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin)\n    N = 7\n    mul = 1\n    while True:\n        if N % K == 0:\n            return str(mul)\n        else:\n            N += 1\n            mul += 1"
    },
    {
        "number": 4094,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split(\"\\n\")\n    b = list(map(int, a[0].split(\",\")))\n    m = int(a[1])\n    if m in b:\n        return str(b.index(m))\n    else:\n        return str(-1)"
    },
    {
        "number": 4094,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    myList = stdin.split()\n    myList = list(map(int, myList))\n    for i in range(len(myList)):\n        for j in range(i+1, len(myList)):\n            if myList[i] % myList[j] == 0:\n                print(j)\n                break\n    return \"None\""
    },
    {
        "number": 4095,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split()\n    n, m = int(inputs[0]), int(inputs[1])\n    a = list(map(int, inputs[2].split()))\n    a.sort()\n    mid = int(len(a) / 2)\n    i = 1\n    count = 0\n    while i <= mid:\n        if a[i] == m:\n            count += 1\n        i += 1\n    return count\n\n\n\nsolution(\"15 8\")\nsolution(\"5 5\")\nsolution(\"5 5\")\nsolution(\"5 5\")\nsolution(\"15 8\")\nsolution(\"5 5\")\nsolution(\"15 8\")\nsolution(\"5 5\")\nsolution(\"15 8\")\nsolution(\"5 5\")\nsolution(\"15 8\")\nsolution(\"5 5\")\nsolution(\"15 8\")\nsolution(\"5 5\")\nsolution(\"15 8\")\nsolution(\"5 5\")\nsolution(\"15 8\")\nsolution(\"5 5\")\nsolution(\"15 8\")\nsolution(\"5 5\")\nsolution(\"15 8\")\nsolution(\"5 5\")\nsolution(\"15 8\")\nsolution(\"5 5\")\nsolution(\"15 8\")\nsolution(\"5 5\")\nsolution(\"15 8\")\nsolution(\"5 5\")\nsolution(\"15 8\")\nsolution(\"5 5\")\nsolution(\"15 8\")\nsolution(\"5 5\")\nsolution(\"15 8\")\nsolution(\"5 5\")\nsolution(\"15 8\")\nsolution(\"5 5\")\nsolution(\"15 8\")\nsolution(\"5 5\")\nsolution(\"15 8\")\nsolution(\"5 5\")\nsolution(\"15 8\")\nsolution(\"5 5\")\nsolution(\"15 8\")\nsolution(\"5 5\")\nsolution(\"15 8\")\nsolution(\"5 5\")\nsolution(\"15 8\")\nsolution(\"5 5\")\nsolution(\"15 8\")\nsolution(\"5 5\")\nsolution(\"15 8\")\nsolution(\"5 5\")\nsolution(\"15 8\")\nsolution(\"5 5\")\nsolution(\"15 8\")\nsolution(\"5 5\")\nsolution(\"15 8\")\nsolution(\"5 5\")\nsolution(\"15 8\")\nsolution(\"5 5\")\nsolution(\"15 8\")\nsolution(\"5 5\")\nsolution(\"15 8\")\nsolution(\"5 5\")\nsolution(\"15 8\")\nsolution(\"5 5\")\nsolution(\"15 8\")\nsolution(\"5 5\")\nsolution(\"15 8\")\nsolution(\"5 5\")\nsolution(\"15 8\")\nsolution(\"5 5\")\nsolution(\"15 8\")\nsolution(\"5 5\")\nsolution(\"15 8\")\nsolution(\"5 5\")\nsolution(\"15 8\")\nsolution(\"5 5\")\nsolution(\"15 8\")\nsolution(\"5 5\")\nsolution(\"15 8\")\nsolution(\"5 5\")\nsolution(\"15 8\")\nsolution(\"5 5\")\nsolution(\"15 8\")\nsolution(\"5 5\")\nsolution(\"15 8\")\nsolution(\"5 5\")\nsolution(\"15 8\")\nsolution(\"5 5\")\nsolution(\"15 8\")\nsolution(\"5 5\")\nsolution(\"15 8\")\nsolution(\"5 5\")\nsolution(\"15 8\")\nsolution(\"5 5\")\nsolution(\"15 8\")\nsolution(\"5 5\")\nsolution(\"15 8\")\nsolution(\"5 5\")\nsolution(\"15 8\")\nsolution(\"5 5\")\nsolution(\"15 8\")\nsolution(\"5 5\")\nsolution(\"15 8\")\nsolution(\"5 5\")\nsolution(\"15 8\")\nsolution(\"5 5\")\nsolution(\"15 8\")\nsolution(\"5 5\")\nsolution(\"15 8\")\nsolution(\"5 5\")\nsolution(\"15 8\")\nsolution(\"5 5\")\nsolution(\"15 8\")\nsolution(\"5 5\")\nsolution(\"15 8\")\nsolution(\"5 5\")\nsolution(\"15 8\")\nsolution(\"5 5\")\nsolution(\"15 8\")\nsolution(\"5 5\")\nsolution(\"15 8\")\nsolution(\"5 5\")\nsolution(\"15 8\")\nsolution(\"5 5\")\nsolution(\"15 8\")\nsolution(\"5 5\")\nsolution(\"15 8\")\nsolution(\"5 5\")\nsolution(\"15 8\")\nsolution(\"5 5\")\nsolution(\"15 8\")\nsolution(\"5 5\")\nsolution(\"15 8\")\nsolution(\"5 5\")\nsolution(\"15 8\")\nsolution(\"5 5\")\nsolution(\"15 8\")\nsolution(\"5 5\")\nsolution(\"15 8\")\nsolution(\"5 5\")\nsolution(\"15 8\")\nsolution(\"5 5\")\nsolution(\"15 8\")\nsolution(\"5 5\")\nsolution(\"15 8\")\nsolution(\"5 5\")\nsolution(\"15 8\")\nsolution(\"5 5\")\nsolution(\"15 8\")\nsolution(\"5 5\")\nsolution(\"15 8\")\nsolution(\"5 5\")\nsolution(\"15 8\")\nsolution(\"5 5\")\nsolution(\"15 8\")\nsolution(\"5 5\")\nsolution(\"15 8\")\nsolution(\"5 5\")\nsolution(\"15 8\")\nsolution(\"5 5\")\nsolution(\"15 8\")\nsolution(\"5 5\")\nsolution(\"15 8\")\nsolution(\"5 5\")\nsolution(\"15 8\")\nsolution(\"5 5\")\nsolution(\"15 8\")\nsolution(\"5 5\")\nsolution(\"15 8\")\nsolution(\"5 5\")\nsolution(\"15 8\")\nsolution(\"5 5\")\nsolution(\"15 8\")\nsolution(\"5 5\")\nsolution(\"15 8\")\nsolution(\"5 5\")\nsolution(\"15 8\")\nsolution(\"5 5\")\nsolution(\"15 8\")\nsolution(\"5 5\")\nsolution(\"15 8\")\nsolution(\"5 5\")\nsolution(\"15 8\")\nsolution(\"5 5\")\nsolution(\"15 8\")\nsolution(\"5 5\")\nsolution(\"15 8\")\nsolution(\"5 5\")\nsolution(\"15 8\")\nsolution(\"5 5\")\nsolution(\"15 8\")\nsolution(\"5 5\")\ns"
    },
    {
        "number": 4095,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    S = sorted(list(map(int, stdin.split())))\n    low = 0\n    high = len(S) - 1\n    cnt = 0\n    while low <= high:\n        mid = low + (high - low) // 2\n        if S[mid] == M:\n            cnt += 1\n            while low < mid and S[low] == S[mid]:\n                low += 1\n            while high > mid and S[high] == S[mid]:\n                high -= 1\n        elif S[mid] > M:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return str(cnt)\n"
    },
    {
        "number": 4095,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # n, m = map(int, input().split())\n    # p = list(map(int, input().split()))\n\n    # # stdin = '5 8'\n    # # stdin = '1 2 3 4 5'\n    # # stdin = '1 2 3 4 5'\n    # stdin = '1 2 3 4 5'\n    # p = list(map(int, stdin.split()))\n\n    # stdin = '2 3 4 5'\n    # p = list(map(int, stdin.split()))\n\n    # stdin = '1 2 3 4 5'\n    # p = list(map(int, stdin.split()))\n\n    # stdin = '1 2 3 4 5'\n    # p = list(map(int, stdin.split()))\n\n    # stdin = '1 2 3 4 5'\n    # p = list(map(int, stdin.split()))\n\n    n, m = map(int, input().split())\n    p = list(map(int, input().split()))\n\n    # stdin = '1 2 3 4 5'\n    # p = list(map(int, stdin.split()))\n\n    # stdin = '1 2 3 4 5'\n    # p = list(map(int, stdin.split()))\n\n    # stdin = '1 2 3 4 5'\n    # p = list(map(int, stdin.split()))\n\n    # stdin = '1 2 3 4 5'\n    # p = list(map(int, stdin.split()))\n\n    # stdin = '1 2 3 4 5'\n    # p = list(map(int, stdin.split()))\n\n    # stdin = '1 2 3 4 5'\n    # p = list(map(int, stdin.split()))\n\n    # stdin = '1 2 3 4 5'\n    # p = list(map(int, stdin.split()))\n\n    # stdin = '1 2 3 4 5'\n    # p = list(map(int, stdin.split()))\n\n    # stdin = '1 2 3 4 5'\n    # p = list(map(int, stdin.split()))\n\n    # stdin = '1 2 3 4 5'\n    # p = list(map(int, stdin.split()))\n\n    # stdin = '1 2 3 4 5'\n    # p = list(map(int, stdin.split()))\n\n    # stdin = '1 2 3 4 5'\n    # p = list(map(int, stdin.split()))\n\n    # stdin = '1 2 3 4 5'\n    # p = list(map(int, stdin.split()))\n\n    # stdin = '1 2 3 4 5'\n    # p = list(map(int, stdin.split()))\n\n    # stdin = '1 2 3 4 5'\n    # p = list(map(int, stdin.split()))\n\n    # stdin = '1 2 3 4 5'\n    # p = list(map(int, stdin.split()))\n\n    # stdin = '1 2 3 4 5'\n    # p = list(map(int, stdin.split()))\n\n    # stdin = '1 2 3 4 5'\n    # p = list(map(int, stdin.split()))\n\n    # stdin = '1 2 3 4 5'\n    # p = list(map(int, stdin.split()))\n\n    # stdin = '1 2 3 4 5'\n    # p = list(map(int, stdin.split()))\n\n    # stdin = '1 2 3 4 5'\n    # p = list(map(int, stdin.split()))\n\n    # stdin = '1 2 3 4 5'\n    # p = list(map(int, stdin.split()))\n\n    # stdin = '1 2 3 4 5'\n    # p = list(map(int, stdin.split()))\n\n    # stdin = '1 2 3 4 5'\n    # p = list(map(int, stdin.split()))\n\n    # stdin = '1 2 3 4 5'\n    # p = list(map(int, stdin.split()))\n\n    # stdin = '1 2 3 4 5'\n    # p = list(map(int, stdin.split()))\n\n    # stdin = '1 2 3 4 5'\n    # p = list(map(int, stdin.split()))\n\n    # stdin = '1 2 3 4 5'\n    # p = list(map(int, stdin.split()))\n\n    # stdin = '1 2 3 4 5'\n    # p = list(map(int, stdin.split()))\n\n    # stdin = '1 2 3 4 5'\n    # p = list(map(int, stdin.split()))\n\n    # stdin = '1 2 3 4 5'\n    # p = list(map(int, stdin.split()))\n\n    # stdin = '1 2 3 4 5'\n    # p = list(map(int, stdin.split()))\n\n    # stdin = '1 2 3 4 5'\n    # p = list(map(int, stdin.split()))\n\n    # stdin = '1 2 3 4 5'\n    # p = list(map(int, stdin.split()))\n\n    # stdin = '1 2 3 4 5'\n    # p = list(map(int, stdin.split()))\n\n    # stdin = '1 2 3 4 5'\n    # p = list(map(int, stdin.split()))\n\n    # stdin = '1 2 3 4 5'\n    # p = list(map(int, stdin.split()))\n\n    # stdin = '1 2 3 4 5'\n    # p = list(map(int, stdin.split()))\n\n    # stdin = '1 2 3 4 5'\n    # p = list(map(int, stdin.split()))\n\n    # stdin = '1 2 3 4 5'\n    # p = list(map(int, stdin.split()))\n\n    # stdin = '1 2 3 4 5'\n    # p = list(map"
    },
    {
        "number": 4095,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 4095,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = stdin.strip().split(' ')\n    n = int(n)\n    m = int(m)\n\n    # standardize the input\n    p = [int(i) for i in stdin.strip().split(' ')]\n    # p.sort()\n\n    # first we'll find the first k numbers\n    first_k = p[:n // 2]\n    # then we'll go through the first k numbers, find the median, and see how far left we can move to the next median\n    left = n // 2\n    while left > 0:\n        # print(left)\n        left -= 1\n        index_i = 0\n        while index_i < len(first_k) and first_k[index_i] <= left:\n            index_i += 1\n        # print(left, index_i)\n        mid = index_i + 1\n        # print(mid)\n        while mid < len(first_k) and first_k[mid] > left:\n            mid += 1\n        # print(mid)\n        right = mid - 1\n        # print(right)\n        # see how far left we can move, and move it there\n        while left > right:\n            left -= 1\n            right += 1\n        # print(left, right)\n        if m == right - left + 1:\n            return str(right - left + 1)\n    return str(-1)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4095,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    p = sorted(list(map(int, stdin.split())))\n    #print(n, m, p)\n    res = 0\n    for i in range(1, n-1):\n        if p[i] == p[i-1]:\n            continue\n        #print(i, p[i-1], p[i])\n        l = i-1\n        r = i+1\n        while l >= 0 and r < n:\n            if p[l] == p[i]:\n                l -= 1\n            elif p[r] == p[i]:\n                r += 1\n            else:\n                break\n        res += (r-l)\n        l = i-1\n        r = i+1\n        while l >= 0 and r < n:\n            if p[l] == p[i]:\n                l -= 1\n            elif p[r] == p[i]:\n                r += 1\n            else:\n                break\n        res += (r-l)\n    print(res)\n    return res"
    },
    {
        "number": 4095,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if m!= n:\n        return \"0\"\n    \n    a = sorted(map(int, stdin.split()))\n    \n    if len(a) % 2 == 0:\n        median = (a[len(a)//2-1] + a[len(a)//2]) / 2\n    else:\n        median = a[len(a)//2]\n    \n    i = 1\n    while i < len(a):\n        if median == a[i]:\n            return str(i)\n        i += 1\n    return \"0\"\n"
    },
    {
        "number": 4095,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\n----------------------------------------------------------\n"
    },
    {
        "number": 4095,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    seq = sorted(map(int, stdin.split()))\n    return str(len(seq) - seq[(len(seq) + 1) // 2])"
    },
    {
        "number": 4095,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 4096,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    dp = [[-1] * (m + 1) for _ in range(n + 1)]\n    return print(-1 if dp[0][0] == -1 else dp[0][0])\n    # your code here\n    return dp[0][0]\n    # Return -1 if impossible to write, otherwise, return minimum number of days needed to finish the coursework"
    },
    {
        "number": 4096,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def page_count(cook_cup: int) -> int:\n        pages = 0\n        for cup in cups:\n            if cup == stdin.strip().split(\" \")[0]:\n                pages += stdin.strip().split(\" \")[1]\n        return pages\n\n    cups = stdin.strip().split(\" \")\n\n    for i in range(max(int(cups[1]), int(cups[2])), int(cups[3]) + 1):\n        if i < int(cups[1]):\n            cook_cup = int(cups[1])\n        elif i < int(cups[2]):\n            cook_cup = int(cups[2])\n        elif i < int(cups[3]):\n            cook_cup = int(cups[3])\n        else:\n            cook_cup = int(cups[4])\n\n        if page_count(cook_cup) > 0:\n            print(i)\n            return\n"
    },
    {
        "number": 4096,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input_ = [line.split() for line in stdin.splitlines()]\n    a_int, cups = int(input_[0][0]), list(map(int, input_[0][1:]))\n    min_ = min(cups)\n    for i in range(1, a_int + 1):\n        cups.remove(min_)\n        min_ = max(cups)\n    return str(min_) if min_ < a_int else '-1'"
    },
    {
        "number": 4096,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    cups = list(map(int, stdin.split()))\n    cups.extend([0] * (m - len(cups)))\n    # cups.sort()\n\n    # print(n, m, cups)\n\n    start = 0\n    end = m\n    print(cups)\n    while True:\n        print(cups)\n        for _ in range(2):\n            cup = cups[start]\n            # print(cup)\n            if cup >= n:\n                print('past')\n                break\n            cups.pop(start)\n            cups.pop(start)\n            if cup >= n:\n                print('past')\n                break\n            cups.append(cup)\n        for _ in range(2):\n            cup = cups[start]\n            # print(cup)\n            if cup >= n:\n                print('past')\n                break\n            cups.pop(start)\n            cups.pop(start)\n            if cup >= n:\n                print('past')\n                break\n            cups.append(cup)\n        print(cups)\n        for _ in range(2):\n            cup = cups[start]\n            # print(cup)\n            if cup >= n:\n                print('past')\n                break\n            cups.pop(start)\n            cups.pop(start)\n            if cup >= n:\n                print('past')\n                break\n            cups.append(cup)\n        start += 1\n"
    },
    {
        "number": 4096,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    if min(a) > m:\n        return -1\n    dp = [0] * (m+1)\n    dp[0] = 0\n    dp[1] = 0\n    for i in range(2, m+1):\n        dp[i] = dp[i-1] + 1\n        for j in range(i):\n            dp[i] = min(dp[i], max(dp[i-1], a[j]-1) + 1)\n    return dp[-1]"
    },
    {
        "number": 4096,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    cups = list(map(int, stdin.split()))\n    total_water = 0\n    for cup in cups:\n        total_water += cup\n\n    return str(max(0, total_water - 1))"
    },
    {
        "number": 4096,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    #print(n, m, a)\n    if n == m:\n        return \"1\"\n    dp = [0] * (n + 1)\n    for i in range(n):\n        if a[i] >= 1:\n            dp[i + 1] = max(dp[i] + a[i], 1)\n            for j in range(i + 1, n + 1):\n                if a[i] <= j <= a[j - 1] + (j - i):\n                    dp[j] = max(dp[j], dp[i] + max(a[i] - 1, j - i - 1))\n    #print(dp)\n    if dp[-1] <= m:\n        return str(dp[-1])\n    return \"2\""
    },
    {
        "number": 4096,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    cups = list(map(int, stdin.split()))\n    return str(min(i - 1 for i in range(1, m + 1) if sum(cups[i - 1] <= cups[i] for i in range(1, m + 1)) < m))\n"
    },
    {
        "number": 4096,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    cups = sorted(map(int, stdin.split()))\n    # print(n, m, cups)\n    drinks = cups[0]\n    for cup in cups[1:]:\n        if cup > drinks:\n            # print(cup)\n            return -1\n        drinks += cup\n    return str(drinks // m)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4096,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    \n    return str(min(max(0, a[i]) - a[i] - 1 for i in range(n)))\n\nsolution(\"5 8\\n2 3 1 1 2\")"
    },
    {
        "number": 4097,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n = int(stdin[0])\n    b = list(map(int, stdin[1]))\n    for i in range(len(b)):\n        if i + 1 < len(b):\n            if b[i] > b[i + 1]:\n                if b[i] > 0:\n                    return -1\n                else:\n                    b[i] -= 1\n                    b[i + 1] += 1\n                    break\n    for i in range(len(b)):\n        if i + 1 < len(b):\n            if b[i] < b[i + 1]:\n                if b[i] < 0:\n                    return -1\n                else:\n                    b[i] += 1\n                    b[i + 1] -= 1\n                    break\n    return str(len(b))\n"
    },
    {
        "number": 4097,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    b = list(map(int, stdin.split()))\n    ans = 0\n    for i in range(len(b)-1):\n        if b[i+1] - b[i]!= 1:\n            ans = -1\n            break\n        if b[i+1] - b[i] > 1:\n            ans += 1\n            b[i+1] -= 1\n            b[i] += 1\n        elif b[i+1] - b[i] < 1:\n            ans += 1\n            b[i] += 1\n    return str(ans)"
    },
    {
        "number": 4097,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    if (1 in a) or (len(a) == 1):\n        return -1\n    ops = [(0, 1), (1, 0), (0, -1)]\n    for i in range(n):\n        if a[i]!= ops[i % 3][0] + ops[i % 3][1]:\n            return -1\n    return n - 1\n"
    },
    {
        "number": 4097,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = list(map(int, stdin.split(' ')))\n    if (b[0] - a[0]) == (b[1] - a[1]) == (b[2] - a[2]) == (b[3] - a[3]):\n        return str(len(a))\n    return str(-1)\n"
    },
    {
        "number": 4097,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    arr = list(map(int, stdin.split()[1]))\n    result = 0\n    if n == 1:\n        return str(0)\n    elif n == 2:\n        if arr[1] - arr[0] == 1:\n            return str(1)\n        else:\n            return str(-1)\n    else:\n        while (arr[0] - arr[n - 1]!= 1):\n            if n < len(arr):\n                arr.pop()\n            else:\n                break\n        if arr[0] - arr[n - 1] == 1:\n            result = 1\n        for i in range(n - 2, -1, -1):\n            if arr[i + 1] - arr[i] == 1:\n                arr[i + 1] = arr[i] + 1\n                result += 1\n        if result == 0:\n            return str(-1)\n        else:\n            return str(result)\n"
    },
    {
        "number": 4097,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    b = list(map(int, stdin.split()[1]))\n    if len(b) == 1:\n        return -1\n    t = 0\n    for i in range(1, n):\n        if b[i-1] == b[i]:\n            continue\n        if b[i] - b[i-1] == 1:\n            t += 1\n        else:\n            return -1\n    return t\n"
    },
    {
        "number": 4097,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    b = list(map(int, stdin.split()[1]))\n    oper = 0\n    changes = False\n    while True:\n        changes = False\n        for i in range(n-2):\n            if b[i] - b[i+1] == b[i+1] - b[i+2]:\n                changes = True\n                b[i] -= 1\n                b[i+1] += 1\n                if b[i] == 0:\n                    b[i] = b[i+1]\n                    b[i+1] += 1\n                oper += 1\n            if b[i] == b[i+1]:\n                changes = True\n                b[i] += 1\n                b[i+1] += 1\n                if b[i] == 10:\n                    b[i] = b[i+1] = 0\n                oper += 1\n        if changes is False:\n            break\n    if oper > 0:\n        return str(oper)\n    else:\n        return '-1'"
    },
    {
        "number": 4097,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    b = list(map(int, stdin.split()))\n    res = 0\n    c = 0\n    while c < n:\n        for i in range(c + 1, n):\n            if b[i] < b[i - 1] and b[i] < b[i + 1]:\n                res += 1\n                b[i] += 1\n        c += 1\n    print(' '.join(list(map(str, b))))\n    return str(res)\n"
    },
    {
        "number": 4097,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    b = list(map(int, stdin.split()))\n    if len(b) < 3:\n        return \"0\"\n    op = [\"+\", \"-\"]\n    for i in range(len(b)-1):\n        if b[i+1] - b[i] not in op:\n            return \"-1\"\n    return str(len(b)-1)"
    },
    {
        "number": 4097,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    l = list(map(int, stdin.split()))\n    for i in range(len(l)-1):\n        if l[i] + 1!= l[i+1]:\n            return -1\n    return str(len(l)-1)"
    },
    {
        "number": 4098,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n = int(stdin[0])\n    k = int(stdin[1])\n    a = list(map(int, stdin[2:]))\n\n    teams = 0\n    a.sort(reverse=True)\n\n    while n:\n        if (n - 1) % k == 0:\n            teams += 1\n            n -= k\n        else:\n            teams += (n - 1) // k\n            n = (n - 1) % k\n    return str(teams)\n"
    },
    {
        "number": 4098,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split())\n    stdin = list(map(int, stdin.strip().split()))\n    if len(stdin) > k:\n        return '-1'\n    teams = []\n    for i in range(len(stdin)):\n        teams.append([i])\n        for j in range(i + 1, len(stdin)):\n            if abs(stdin[i] - stdin[j]) <= 5:\n                teams[-1].append(j)\n    return len(teams)"
    },
    {
        "number": 4098,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    data = list(map(int, stdin.split()))\n    n = data[0]\n    k = data[1]\n    s = data[2:]\n    s.sort(reverse=True)\n    t = []\n    c = 0\n    for i in range(k):\n        t.append(s[i])\n    t.sort()\n    for i in range(k):\n        t.append(s[i])\n    for i in range(k):\n        for j in range(i):\n            if abs(t[i]-t[j]) <= 5:\n                c += 1\n    print(c)\n    return(c)\n\nsolution(input())\n"
    },
    {
        "number": 4098,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k, *a = list(map(int, stdin.split()))\n    # print(n, k, a)\n    a.sort()\n    # print(a)\n    if k == 0 or len(a) == 1:\n        return 0\n    groups = [a[i:i+k] for i in range(0, len(a), k)]\n    # print(groups)\n    start = groups[0][0]\n    # print(start)\n    for group in groups:\n        # print(group)\n        if group[0] - start < 5:\n            return len(group) + 1\n        else:\n            start = group[0]\n    return len(groups[0])"
    },
    {
        "number": 4098,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, k = list(map(int, stdin.split()))\n    skill_set = list(map(int, stdin.split()))\n\n    count = 0\n    skill_set = sorted(skill_set)\n    for i in range(0, n - 1):\n        if abs(skill_set[i + 1] - skill_set[i]) <= 5:\n            count += 1\n\n    return str(min(count, k))\n"
    },
    {
        "number": 4098,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    # \uc785\ub825 \ubc1b\uc740 \uac12\uc744 \uc815\ub82c \uc2dc\ucf1c \uc90d\ub2c8\ub2e4.\n    a.sort()\n    # \uc785\ub825 \ubc1b\uc740 \uac12\uc744 \uc815\ub82c \uc2dc\ud0a8 \ub2e4\uc74c \uac12\uc744 \ub9ac\uc2a4\ud2b8\uc5d0 \uc800\uc7a5\ud569\ub2c8\ub2e4.\n    a = list(set(a))\n    # \ucd5c\ub300\uac12\uc744 \uc800\uc7a5\ud558\uae30 \uc704\ud55c \ub9ac\uc2a4\ud2b8\n    max_num = 0\n    # \ub9ac\uc2a4\ud2b8 \uc758 \uc778\ub371\uc2a4 \ubc88\ud638 \uc124\uc815\n    index = 0\n    # \uc624\ub984\ucc28\uc21c \uc815\ub82c\n    a.sort()\n    # \ub9ac\uc2a4\ud2b8 \uc548\uc5d0\uc11c \uac12\uc744 \ud558\ub098\uc529 \uaebc\ub0b4\uc5b4 \ube44\uad50\n    for i in range(len(a) - 1):\n        # \uc9c4\uc785\ucc28\uc21c \uc815\ub82c\n        a.sort()\n        # \uc9c4\uc785\ucc28\uc21c \uc815\ub82c\ud55c \ub9ac\uc2a4\ud2b8 \uc778\ub371\uc2a4 \ubc88\ud638\ub97c \uae30\uc900\uc73c\ub85c \uc790\ub9bf\uc218 \ub9de\ucdb0\uc8fc\uae30\n        if index == 0:\n            a[i] += a[i + 1]\n            index = index + 1\n        if index == 1:\n            a[i] += a[i + 1]\n            index = index + 1\n        if index == 2:\n            a[i] += a[i + 1]\n            index = index + 1\n        if index == 3:\n            a[i] += a[i + 1]\n            index = index + 1\n        # \uc790\ub9bf\uc218\uac00 \uac19\uc740 \uacbd\uc6b0\n        if index == 4:\n            a[i] += a[i + 1]\n            index = index + 1\n        if index == 5:\n            a[i] += a[i + 1]\n            index = index + 1\n        if index == 6:\n            a[i] += a[i + 1]\n            index = index + 1\n        if index == 7:\n            a[i] += a[i + 1]\n            index = index + 1\n        if index == 8:\n            a[i] += a[i + 1]\n            index = index + 1\n        if index == 9:\n            a[i] += a[i + 1]\n            index = index + 1\n        if index == 10:\n            a[i] += a[i + 1]\n            index = index + 1\n        if index == 11:\n            a[i] += a[i + 1]\n            index = index + 1\n        if index == 12:\n            a[i] += a[i + 1]\n            index = index + 1\n        if index == 13:\n            a[i] += a[i + 1]\n            index = index + 1\n        if index == 14:\n            a[i] += a[i + 1]\n            index = index + 1\n        if index == 15:\n            a[i] += a[i + 1]\n            index = index + 1\n        if index == 16:\n            a[i] += a[i + 1]\n            index = index + 1\n        if index == 17:\n            a[i] += a[i + 1]\n            index = index + 1\n        if index == 18:\n            a[i] += a[i + 1]\n            index = index + 1\n        if index == 19:\n            a[i] += a[i + 1]\n            index = index + 1\n        if index == 20:\n            a[i] += a[i + 1]\n            index = index + 1\n        if index == 21:\n            a[i] += a[i + 1]\n            index = index + 1\n        if index == 22:\n            a[i] += a[i + 1]\n            index = index + 1\n        if index == 23:\n            a[i] += a[i + 1]\n            index = index + 1\n        if index == 24:\n            a[i] += a[i + 1]\n            index = index + 1\n        if index == 25:\n            a[i] += a[i + 1]\n            index = index + 1\n        if index == 26:\n            a[i] += a[i + 1]\n            index = index + 1\n        if index == 27:\n            a[i] += a[i + 1]\n            index = index + 1\n        if index == 28:\n            a[i] += a[i + 1]\n            index = index + 1\n        if index == 29:\n            a[i] += a[i + 1]\n            index = index + 1\n        if index == 30:\n            a[i] += a[i + 1]\n            index = index + 1\n        if index == 31:\n            a[i] += a[i + 1]\n            index = index + 1\n        if index == 32:\n            a[i] += a[i + 1]\n            index = index + 1\n        if index == 33:\n            a[i] += a[i + 1]\n            index = index + 1\n        if index == 34:\n            a[i] += a[i + 1]\n            index = index + 1\n        if index == 35:\n            a[i] += a[i + 1]\n            index = index + 1\n        if index == 36:\n            a[i] += a[i + 1]\n            index = index + 1\n        if index == 37:\n            a[i] += a[i + 1]\n            index = index + 1\n        if index == 38:\n            a[i] += a[i + 1]\n            index = index + 1\n        if index == 39:\n            a[i] += a[i + 1]\n            index = index + 1\n        if index == 40:\n            a[i] += a[i + 1]\n            index = index + 1\n        if index == 41:\n            a"
    },
    {
        "number": 4098,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    skills = list(map(int, stdin.split()))\n    count = k - 1\n    while count >= 0:\n        if count == 0 or (count % 2 == 0 and max(skills) % 5!= 0) or (count % 2!= 0 and min(skills) % 5!= 0):\n            count -= 1\n        else:\n            count -= 1\n            skills.sort(reverse=True)\n            max_skills = skills[0]\n            teams = []\n            for i in range(k):\n                teams.append([])\n            for i in range(n):\n                min_skills = min(skills)\n                teams[i % k].append(i)\n                skills.remove(min_skills)\n                skills.remove(max_skills)\n            print(f\"{len(teams)} {len(teams[0])}\")\n    return \"0\"\n"
    },
    {
        "number": 4098,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if k < 2:\n        return 0\n    a = list(map(int, stdin.split()))\n\n    a.sort(reverse=True)\n\n    gaps = []\n\n    for i in range(1, n):\n        gaps.append(a[i] - a[i - 1])\n\n    for j in range(2, n):\n        if gaps[j] > 5:\n            break\n    else:\n        return 0\n\n    ans = 0\n    for i in range(j):\n        ans += 1\n    ans += 1\n    for j in range(j, n):\n        if gaps[j] > 5:\n            break\n        ans += 1\n    return ans\n"
    },
    {
        "number": 4098,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    n, k = map(int, stdin.pop(0).split())\n    p = list(map(int, stdin.pop(0).split()))\n    return print(max_teams(p, n, k))\n\ndef"
    },
    {
        "number": 4098,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = (int(x) for x in stdin.split())\n    scores = sorted((int(x) for x in stdin.split()))\n\n    # for i in range(1, len(scores)):\n    #     if scores[i] == scores[i - 1]:\n    #         scores[i] += 5\n    #     else:\n    #         scores[i] += 6\n    #\n    # res = 0\n    # groups = []\n    #\n    # for i in range(n):\n    #     groups.append([i])\n    #     res += 1\n    #\n    # for i in range(n):\n    #     for j in range(i + 1, n):\n    #         if abs(scores[i] - scores[j]) <= 5:\n    #             groups[i].append(j)\n    #             groups[j].append(i)\n    #             res += 1\n    #\n    # return res\n\n    # Solution from leetcode\n    # # My solution\n    # n, k = (int(x) for x in stdin.split())\n    # scores = sorted((int(x) for x in stdin.split()))\n    #\n    # # Filter for scores that are less than or equal to 5 away\n    # filtered = list(filter(lambda x: x <= 5, scores))\n    #\n    # # Find out the sum of the remaining scores\n    # total = sum(filtered)\n    #\n    # # Max possible number of teams is the length of the list\n    # return len(filtered) if total >= k else len(filtered) - 1\n\n    # Short solution from leetcode\n    # n, k = (int(x) for x in stdin.split())\n    # scores = sorted((int(x) for x in stdin.split()))\n\n    # # All possible pairs\n    # all_pairs = [(x, y) for x in scores for y in scores if x!= y]\n\n    # # Filter for scores that are less than or equal to 5 away\n    # filtered = list(filter(lambda x: x[0] <= 5 and x[1] <= 5, all_pairs))\n\n    # # Find out the sum of the remaining scores\n    # total = sum(filtered)\n\n    # # Max possible number of teams is the length of the list\n    # return len(filtered) if total >= k else len(filtered) - 1\n    #\n    # # Solution from leetcode\n    # # Approach 2\n    # n, k = (int(x) for x in stdin.split())\n    # scores = sorted((int(x) for x in stdin.split()))\n    #\n    # all_pairs = [(x, y) for x in scores for y in scores if x!= y]\n    #\n    # # Filter for scores that are less than or equal to 5 away\n    # filtered = list(filter(lambda x: x[0] <= 5 and x[1] <= 5, all_pairs))\n    #\n    # # Find out the sum of the remaining scores\n    # total = sum(filtered)\n    #\n    # # Max possible number of teams is the length of the list\n    # return len(filtered) if total >= k else len(filtered) - 1\n    #\n    # # Solution from leetcode\n    # # Approach 1\n    # n, k = (int(x) for x in stdin.split())\n    # scores = sorted((int(x) for x in stdin.split()))\n    #\n    # # Filter for scores that are less than or equal to 5 away\n    # filtered = list(filter(lambda x: x[0] <= 5 and x[1] <= 5, scores))\n    #\n    # # Find out the sum of the remaining scores\n    # total = sum(filtered)\n    #\n    # # Max possible number of teams is the length of the list\n    # return len(filtered) if total >= k else len(filtered) - 1\n    #\n    # # Solution from leetcode\n    # # Approach 2\n    # n, k = (int(x) for x in stdin.split())\n    # scores = sorted((int(x) for x in stdin.split()))\n    #\n    # # All possible pairs\n    # all_pairs = [(x, y) for x in scores for y in scores if x!= y]\n    #\n    # # Filter for scores that are less than or equal to 5 away\n    # filtered = list(filter(lambda x: x[0] <= 5 and x[1] <= 5, all_pairs))\n    #\n    # # Find out the sum of the remaining scores\n    # total = sum(filtered)\n    #\n    # # Max possible number of teams is the length of the list\n    # return len(filtered) if total >= k else len(filtered) - 1\n\n    # # Solution from leetcode\n    # # Approach 3\n    # n, k = (int(x) for x in stdin.split())\n    # scores = sorted((int(x) for x in stdin.split()))\n    #\n    # # All possible pairs\n    # all_pairs = [(x, y) for x in scores for y in scores if x!= y]\n    #\n    # # Filter for scores that are less than or equal to 5 away\n    # filtered = list(filter(lambda x: x[0] <= 5 and x[1] <= 5, all_pairs))\n    #\n    # # Find out the sum of the remaining scores\n    # total = sum(filtered)\n    #\n    # # Max possible number of teams is the length of the list\n    # return len(filtered) if total >= k else len(filtered) - 1"
    },
    {
        "number": 4099,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.split()\n    N, K, M = int(data[0]), int(data[1]), int(data[2])\n    scores = list(map(int, data[3].split(\" \")))\n    # sums up all scores in scores list\n    sum_scores = sum(scores)\n    if sum_scores < M:\n        return -1\n    # if sum_scores == M:\n    #     return 0\n\n    # if N-1 <= M:\n    #     return M - sum_scores + N\n\n    # if N == 1:\n    #     return M - sum_scores\n\n    # for i in range(0, N):\n    #     if (M - sum_scores) % (K + 1) == 0:\n    #         return (M - sum_scores) // (K + 1)\n    #     sum_scores += scores[i]\n    #\n    # return -1\n\n    s = 0\n    x = 0\n    t = 0\n\n    for i in range(0, N):\n        s += scores[i]\n        if (s + K) % (K + 1) == 0:\n            x = (s + K) // (K + 1)\n            break\n\n    while True:\n        s -= scores[x - 1]\n        t += scores[x - 1]\n        if (t + K) % (K + 1) == 0:\n            x += 1\n            if x == N + 1:\n                return t\n"
    },
    {
        "number": 4099,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = map(int, stdin.split())\n    points = list(map(int, stdin.split()))\n    score = 0\n    for x in range(n):\n        score += points[x]\n    if score < k:\n        print(-1)\n        return\n    average = score//n\n    left = 0\n    right = average\n    while left <= right:\n        mid = (left + right)//2\n        if average - mid < k:\n            right = mid - 1\n        else:\n            left = mid + 1\n    print(left)"
    },
    {
        "number": 4099,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = map(int, stdin.split())\n    subjects = list(map(int, stdin.split()))\n    sub_avg = sum(subjects) / n\n    score = 0\n    count = 0\n    while not score >= m:\n        count += 1\n        score += sub_avg\n        sub_avg = (sub_avg * (n - count) + sum(subjects[0:count])) / n\n        subjects = subjects[1:] + [0] * count\n    print(count)\n\nsolution(stdin)\n"
    },
    {
        "number": 4099,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, K, M = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    sum = 0\n    for i in range(N):\n        sum += A[i]\n    if sum == M:\n        print(sum)\n    else:\n        print(-1)\n\nsolution(input())"
    },
    {
        "number": 4099,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = map(int, stdin.strip().split())\n\n    scores = list(map(int, stdin.strip().split()))\n    avg = sum(scores) / n\n    ans = 0\n    cur_avg = 0\n    for i in range(n):\n        if avg >= m:\n            return str(ans)\n        cur_avg += scores[i]\n        if cur_avg >= avg:\n            ans += 1\n            cur_avg = 0\n    if cur_avg > 0:\n        ans += 1\n    return str(ans)"
    },
    {
        "number": 4099,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, K, M = map(int, stdin.split())\n\n    points_sum = 0\n    score_list = []\n\n    for score in map(int, stdin.split()):\n        points_sum += score\n        score_list.append(points_sum)\n\n    average = points_sum / N\n    # print(average)\n\n    minimum = float('inf')\n    # print(minimum)\n\n    for i in range(N - 1):\n        # print(i)\n        # print(score_list)\n        if score_list[i] < average and score_list[i + 1] >= average:\n            # print(score_list[i + 1])\n            # print(score_list[i] + average)\n            minimum = score_list[i + 1] - average\n            # print(minimum)\n            break\n\n    if minimum == float('inf'):\n        print(-1)\n    else:\n        print(minimum)\n\n    return \"\"\n\nsolution(\"5 10 7\\n8 10 3 6\")\n"
    },
    {
        "number": 4099,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = map(int, stdin.split())\n    stdin = list(map(int, stdin.split()))\n    a = list(stdin[1:])\n    return str(min(a))"
    },
    {
        "number": 4099,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = stdin.split()\n    n, k, m = int(n), int(k), int(m)\n    scores = list(map(int, stdin.split()))\n    average = sum(scores[:n])//n\n    if average >= m:\n        return str(n)\n    else:\n        return \"-\"\n"
    },
    {
        "number": 4099,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = map(int, stdin.split())\n    scores = list(map(int, stdin.split()))\n\n    scores.sort()\n    result = 0\n    if scores[0] + scores[1] <= k:\n        return -1\n\n    for i in range(n):\n        result += (scores[i] + scores[i + 1]) * (k // 2)\n        if result >= m:\n            return k\n    return result\n"
    },
    {
        "number": 4099,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = list(map(int, stdin.split()))\n    arr = list(map(int, stdin.split()))\n\n    averages = []\n    for i in range(n):\n        averages.append((arr[i] + k) / 2)\n\n    def get_score(averages):\n        score = 0\n        for i in averages:\n            if i > m:\n                return -1\n            score += i\n        return score\n\n    return str(get_score(averages))\n"
    },
    {
        "number": 4100,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, q = map(int, stdin.split())\n    points = [i for i in range(1, n + 1)]\n    for i in range(n):\n        points[i] = (points[i] - k)\n    for q_i in range(q):\n        q_i = int(stdin.split()[q_i + 1])\n        if any(points[i] <= 0 for i in range(q_i)):\n            print(\"No\")\n            return\n        else:\n            print(\"Yes\")\n    return\nprint(solution(input()))\n"
    },
    {
        "number": 4100,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, K, Q = stdin.split()\n    N, K, Q = int(N), int(K), int(Q)\n\n    players_score = list(map(int, stdin.split()))\n    players_score = players_score[:N]\n\n    # Finding which player has 0 or lower points\n    j = 0\n    while j < N:\n        if players_score[j] == 0:\n            j += 1\n        else:\n            break\n\n    # Eliminating players with lower than 0 points\n    i = N - 1\n    while i >= j:\n        if players_score[i] == 0:\n            i -= 1\n        else:\n            break\n\n    # If there is no player with 0 or lower points, print No\n    if j == N:\n        print(\"No\")\n        return\n\n    # Return 'Yes' if the player survived the game, print 'No' if not\n    if i == N:\n        print(\"Yes\")\n        return\n\n    # Player i survived the game, print Yes\n    print(\"Yes\")\n    return\n"
    },
    {
        "number": 4100,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, K, Q = map(int, stdin.split())\n    if N <= 2:\n        return 'No' * N\n    scores = [K] * N\n    scores[0] -= 1\n    for _ in range(Q):\n        i = int(stdin) - 1\n        scores[i] -= 1\n    print('Yes' if all(s >= 0 for s in scores) else 'No')\n    return 'Yes' if all(s >= 0 for s in scores) else 'No'\n"
    },
    {
        "number": 4100,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k, q = map(int, stdin.split())\n    players = sorted(list(map(int, stdin.split())), reverse=True)\n    survived = 0\n\n    for i in range(q):\n        # print(players, i)\n        if players[i] >= n:\n            survived += 1\n            continue\n        players[i] -= 1\n        players[i + 1:] = sorted(players[i + 1:], reverse=True)\n    return 'No' if survived == 0 else 'Yes'"
    },
    {
        "number": 4100,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k, q = list(map(int, stdin.split()))\n    # read players' scores and print result\n    scores = list(map(int, stdin.split()))\n    scores = sorted(scores)\n    result = \"\"\n    for i in range(q):\n        if scores[i] == 1:\n            result += \"No\"\n        elif scores[i] == 0:\n            result += \"Yes\"\n        else:\n            if scores[i] - 1 < scores[i - 1]:\n                result += \"Yes\"\n            else:\n                result += \"No\"\n    return result\n"
    },
    {
        "number": 4100,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    pass\n"
    },
    {
        "number": 4100,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k, q = map(int, stdin.split())\n    scores = [int(s) for s in stdin.split()]\n    ans = \"\"\n    for i in range(n):\n        if scores[i] >= k:\n            ans += \"Yes\"\n        else:\n            ans += \"No\"\n    return ans\n"
    },
    {
        "number": 4100,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, K, Q = map(int, stdin.split())\n    scores = list(map(int, stdin.split()))\n    for player in range(1, N):\n        if scores[player] > K:\n            return \"No\"\n    for player in range(1, N):\n        scores[player] = (scores[player] - K)\n    for i in range(Q):\n        scores[0] = (scores[0] - K)\n    for player in range(1, N):\n        if scores[player] <= 0:\n            scores[player] = 0\n    for i in range(1, N):\n        if scores[i]!= 0:\n            return \"No\"\n    return \"Yes\"\n"
    },
    {
        "number": 4100,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k, q = stdin.split()\n    players = [int(i) for i in range(1, int(n) + 1)]\n    scores = [int(i) for i in range(1, int(n) + 1)]\n    answer = ''\n    for _ in range(int(k)):\n        scores.pop(0)\n    for i in range(1, int(q) + 1):\n        ans = input().split()\n        if ans[0] == '-1':\n            players.pop(int(ans[1]) - 1)\n        else:\n            score = int(ans[1])\n            if score in players:\n                answer = answer + 'Yes\\n'\n                players.remove(score)\n            else:\n                answer = answer + 'No\\n'\n    return answer\n"
    },
    {
        "number": 4100,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    _, N, K, Q = stdin.split(' ')\n    N = int(N)\n    K = int(K)\n    Q = int(Q)\n    points = [K] * N\n    for _ in range(Q):\n        A = int(stdin.split(' ')[0])\n        points[A - 1] -= 1\n    return 'Yes' if points[0] >= 0 else 'No'"
    },
    {
        "number": 4101,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [list(map(int, stdin.split())) for _ in range(n)]\n\n    print('YES')\n    for row in a:\n        row.sort()\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == 1:\n                a[i][j] = 0\n            else:\n                a[i][j] = 1\n\n    print(*[''.join(map(str, row)) for row in a], sep='\\n')\n\n    return 'YES'\n"
    },
    {
        "number": 4101,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n\n    a = [[0]*m for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            a[i][j] = int(stdin[i*m+j])\n    \n    inverted = True\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == 1:\n                inverted = False\n                break\n        if inverted == False:\n            break\n\n    ans = \"YES\"\n    for i in range(n):\n        string = \"\"\n        for j in range(m):\n            if a[i][j] == 0:\n                string += \"0\"\n            else:\n                string += \"1\"\n        ans += string\n    ans += \" \" + \" \".join([\"1\" if inverted else \"0\"]*m)\n    return ans\n\nsolution(\"3 3\")\nsolution(\"2 2\")\nsolution(\"1 1\")\nsolution(\"1 1 1 1\")\nsolution(\"10 10 10 10\")\nsolution(\"00 01 0 1\")"
    },
    {
        "number": 4101,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    matrix = [[int(x) for x in stdin.split()] for _ in range(n)]\n    if m <= 1:\n        return 'NO'\n    rows = [[] for _ in range(n)]\n    cols = [[] for _ in range(m)]\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == 1:\n                rows[i].append(0)\n                cols[j].append(0)\n            else:\n                rows[i].append(1)\n                cols[j].append(1)\n    for i in range(n):\n        rows[i] = sorted(rows[i])\n    for j in range(m):\n        cols[j] = sorted(cols[j])\n    for i in range(n):\n        for j in range(m):\n            if rows[i][j] == 1 and cols[j][i] == 1:\n                return 'YES'\n    return 'NO'"
    },
    {
        "number": 4101,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [list(map(int, stdin.split())) for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if a[i][j]!= 0:\n                a[i][j] = 1 - a[i][j]\n    for i in range(n):\n        a[i].sort()\n    for i in range(n):\n        for j in range(m):\n            if a[i][j]!= 0:\n                a[i][j] = 1\n    for i in range(n):\n        a[i] = \"\".join(map(str, a[i]))\n    for i in range(m):\n        a[i] = \"\".join(map(str, a[i]))\n    return \"YES\" if a == a[::-1] else \"NO\"\n"
    },
    {
        "number": 4101,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split(\"\\n\")\n    rows = []\n    rows_ = []\n    cols = []\n    cols_ = []\n    #print(a)\n    for i in range(1, len(a)):\n        a_line = a[i].split(\" \")\n        rows.append(a_line)\n    for j in range(len(rows)):\n        for k in range(len(rows[j])):\n            rows_[j] += rows[j][k]\n    #print(rows_)\n    #print(rows)\n    for i in range(len(rows_)):\n        if rows_[i] == \"1\":\n            rows_[i] = \"0\"\n        else:\n            rows_[i] = \"1\"\n    #print(rows_)\n    for i in range(len(rows_)):\n        rows_[i] = int(rows_[i], 2)\n    #print(rows_)\n    #print(rows)\n    for j in range(len(rows_[0])):\n        for i in range(len(rows)):\n            cols.append(rows_[i][j])\n        #print(cols)\n        if cols[j] == \"1\":\n            cols[j] = \"0\"\n        else:\n            cols[j] = \"1\"\n    #print(cols)\n    for j in range(len(cols)):\n        cols[j] = int(cols[j], 2)\n    #print(cols)\n    #print(cols)\n    return \"YES\" + str(cols)"
    },
    {
        "number": 4101,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(n) for n in stdin.split()]\n\n    mat = [list(map(int, input().split())) for _ in range(n)]\n\n    for i in range(n):\n        for j in range(m):\n            if mat[i][j] == 1:\n                mat[i][j] = 0\n            else:\n                mat[i][j] = 1\n\n    for i in range(n):\n        if sorted(mat[i])!= mat[i]:\n            return 'NO'\n\n    for j in range(m):\n        if sorted([mat[i][j] for i in range(n)])!= mat[j]:\n            return 'NO'\n\n    for i in range(n):\n        for j in range(m):\n            if mat[i][j] == 0:\n                mat[i][j] = 1\n            else:\n                mat[i][j] = 0\n\n    for i in range(n):\n        if sorted(mat[i])!= mat[i]:\n            return 'NO'\n\n    for j in range(m):\n        if sorted([mat[i][j] for i in range(n)])!= mat[j]:\n            return 'NO'\n\n    return 'YES'\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4101,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # n, m = map(int, stdin.split())\n    # n = int(input())\n    # m = int(input())\n    n = int(stdin.split()[0])\n    m = int(stdin.split()[1])\n    # n = int(input())\n    # m = int(input())\n    a = list(map(int, stdin.split()[2:]))\n    a = sorted([(a[i], i) for i in range(m)])\n    r = \"\".join([\"1\" if i % 2 == 0 else \"0\" for i in range(n)])\n    c = \"\".join([\"1\" if j % 2 == 0 else \"0\" for j in range(m)])\n    if r!= \"\".join([str(i) for i in a]):\n        return \"NO\"\n    return \"YES\" + c\n"
    },
    {
        "number": 4101,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    A = [list(map(int, stdin.split())) for _ in range(n)]\n    c = []\n    r = []\n\n    for i in range(n):\n        for j in range(m):\n            if A[i][j] == 0:\n                r.append('0')\n            else:\n                r.append('1')\n\n        c.append(r)\n        r = []\n\n    for i in range(m):\n        for j in range(n):\n            if A[j][i] == 0:\n                c.append('0')\n            else:\n                c.append('1')\n\n        c.append('0')\n\n    if ''.join(c)!= ''.join(r):\n        return 'NO'\n\n    return 'YES'\n"
    },
    {
        "number": 4101,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    A = [[0] * m for _ in range(n)]\n\n    for i in range(n):\n        for j in range(m):\n            A[i][j] = int(stdin[i * m + j])\n\n    rows = [0] * n\n    cols = [0] * m\n\n    for i in range(n):\n        for j in range(m):\n            if A[i][j] == 1:\n                rows[i] = 1\n                break\n    for j in range(m):\n        for i in range(n):\n            if A[i][j] == 1:\n                cols[j] = 1\n                break\n\n    for i in range(n):\n        if rows[i] == 1 and cols[i] == 1:\n            break\n    else:\n        return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 4101,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return \"NO\"\n"
    },
    {
        "number": 4102,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    if len(stdin) < 1 or len(stdin) > 10:\n        return \"No\"\n    if stdin.count(\"9\") == 0:\n        return \"Yes\"\n    elif stdin.count(\"9\") > 0:\n        return \"No\""
    },
    {
        "number": 4102,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = list(map(int, stdin.split()))\n    stdin = list(map(str, stdin))\n    print(stdin)\n    return\n\nsolution(stdin)\n"
    },
    {
        "number": 4102,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    list = stdin.splitlines()\n    length = len(list[0])\n    print(length)\n    i=0\n    while i < length:\n        #print(i)\n        number = list[0][i]\n        if number == '1' or number == '2' or number == '3' or number == '4' or number == '5' or number == '6' or number == '7' or number == '8' or number == '9':\n            i += 1\n            continue\n        else:\n            return \"No\"\n            break\n        i+=1\n    return \"Yes\"\n"
    },
    {
        "number": 4102,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"Yes\" if len(stdin)%2 == 0 else \"No\""
    },
    {
        "number": 4102,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    if stdin.isdigit():\n        if 1 <= int(stdin) <= 10:\n            return \"Yes\"\n        else:\n            return \"No\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4102,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if len(s) == 1:\n        return \"Yes\"\n    if len(s) > 10:\n        return \"No\"\n    if int(s[0]) in range(0,10) and int(s[-1]) in range(0,10):\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4102,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    arr = stdin.splitlines()\n    if len(arr)!= 1:\n        return \"No\"\n    num = int(arr[0])\n    if (num%2) == 0:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4102,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin_list = list(map(int, stdin.split()))\n    result = 0\n    for i in stdin_list:\n        if i%2!= 0:\n            result = 1\n            break\n    print(result)\n    return result\nsolution(stdin)\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\"\"))\nsolution(input(\""
    },
    {
        "number": 4102,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    str_in = stdin\n    n = len(str_in)\n    for i in range(n // 2):\n        s1 = int(str_in[i])\n        s2 = int(str_in[n - i - 1])\n        if s1 + s2 == 2020:\n            return \"Yes\"\n    return \"No\"\n\nprint(solution(input()))"
    },
    {
        "number": 4102,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    x = int(stdin[0])\n    return \"Yes\" if x % 7 == 0 else \"No\"\n"
    },
    {
        "number": 4103,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a = map(int, stdin.split())\n    s = map(int, stdin.split())\n    s = list(s)\n    total = n\n    count = 1\n    start = 0\n    for i in range(1, n):\n        if s[i] == 1:\n            total = total - 1\n        else:\n            total = total + 1\n        if total < b:\n            count = count + 1\n            start = i\n    return(count)\n"
    },
    {
        "number": 4103,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a = map(int, stdin.split())\n    s = list(map(int, stdin.split()))\n    s = sorted(enumerate(s), key=lambda x: x[1], reverse=True)\n    print(s)\n    c = 1\n    i = 0\n    while i < n-1 and s[i][1]:\n        i += 1\n    while i < n:\n        if s[i][1] and c < b:\n            i += 1\n            c += 1\n        elif c >= b:\n            i += 1\n            c -= 1\n        else:\n            return i - 1\n    return i - 1\n"
    },
    {
        "number": 4103,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = list(map(int, stdin.split()))\n    n, b, a = stdin[0], stdin[1], stdin[2]\n    s = stdin[3:]\n\n    if sum(s) > b * n:\n        return \"impossible\"\n\n    def dfs(X, i, ans):\n        if X == n:\n            return ans\n        else:\n            ans = max(ans, dfs(X + 1, i, ans))\n\n            if s[i] == 0:\n                ans = max(ans, dfs(X + 1, i + 1, ans))\n            else:\n                ans = max(ans, dfs(X + 1, i + 1, ans + 1))\n            return ans\n\n    return str(dfs(0, 0, 0))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4103,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    _, n, b, a = map(int, stdin.split())\n    s = list(map(int, stdin.split()))\n    visited = [0] * n\n    visited[0] = 1\n    distance = 0\n    for i in range(1, n):\n        if s[i] == 1:\n            if visited[i-1] == 1:\n                visited[i] = 0\n            else:\n                visited[i] = 1\n        else:\n            if visited[i-1] == 1:\n                distance += 1\n                visited[i] = 1\n            else:\n                visited[i] = 0\n    return distance\n\n\nprint(solution(input()))\n\ndef"
    },
    {
        "number": 4103,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a = map(int, stdin.split())\n    s = list(map(int, stdin.split()))\n    return str(max(get_solutions(n, s, b, a)))\n\n\ndef"
    },
    {
        "number": 4103,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a = list(map(int, stdin.split()))\n\n    segments = list(map(int, stdin.split()))\n    charge = 0\n    index = 0\n    while index < len(segments):\n        if segments[index] == 1:\n            charge += 1\n            if charge >= a:\n                segments[index] = 0\n            else:\n                charge -= 1\n        elif segments[index] == 0:\n            charge += 1\n            if charge >= b:\n                segments[index] = 1\n            else:\n                charge -= 1\n\n        index += 1\n\n    return str(len(segments))\n\nsolution('5 2 1')\nsolution('6 2 1')\n\"\"\"\n\n\"\"\"---SOLUTION---\"\"\"\ndef"
    },
    {
        "number": 4103,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n, b, a = map(int, stdin.split())\n    s = map(int, stdin.split())\n    acc_list = list()\n    battery_list = list()\n    total_charge = 0\n    for i in range(n):\n        if s[i] == 0:\n            acc_list.append(1)\n            total_charge += 1\n        else:\n            acc_list.append(0)\n            total_charge += 0\n        if b > total_charge:\n            battery_list.append(0)\n        else:\n            battery_list.append(b - total_charge)\n    max_acc_charge = max(acc_list)\n    max_batt_charge = max(battery_list)\n    ans = 0\n    for i in range(n):\n        if s[i] == 0 and max_acc_charge <= max_batt_charge:\n            ans += 1\n    return ans\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4103,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, b, a = map(int, stdin.split())\n    return str(max([sum(map(lambda x: x==1, map(int, stdin.split()))) for s in range(n)]))\n    \nstdin = \"\"\"6 2 1\n0 1 0 1 0 1\n\"\"\"\n\nsolution(stdin)\n"
    },
    {
        "number": 4103,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\nimport math\n\n\ndef"
    },
    {
        "number": 4103,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    _, b, a = list(map(int, stdin.split()))\n    n = int(stdin.split()[0])\n    s = list(map(int, stdin.split()[1]))\n    acc = 0\n    batt = b\n    for i in range(n):\n        if s[i] == 1:\n            acc -= 1\n            if batt - acc <= 0:\n                acc = 0\n                batt = b\n        else:\n            acc -= 1\n            batt -= 1\n    return acc\n"
    },
    {
        "number": 4104,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 == 1:\n        print(\"wrong\")\n        exit()\n    else:\n        for i in range(1, n):\n            if i % 2 == 0:\n                print(i)\n                exit()\n        return str(n * (n + 1) // 2)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4104,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    total = 0\n    for i in range(len(stdin)-1):\n        if stdin[i] == '-':\n            total = -total + int(stdin[i+1])\n        else:\n            total = total + int(stdin[i+1])\n    return str(total)\n\ndef"
    },
    {
        "number": 4104,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    exp = stdin.split('-')\n    exp = exp[0].split('+')\n    exp = exp[0].split('*')\n    exp = exp[0].split('/')\n    stack = []\n    for x in exp:\n        stack.append(x)\n    stack = stack[::-1]\n    stack = eval(''.join(stack))\n    stack = str(stack)\n    return stack"
    },
    {
        "number": 4104,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin\n    line = line.split()\n    line = list(map(int,line))\n    line = line[0].split('+')\n    line = list(map(int,line))\n    line = str(sum(line))\n    return line"
    },
    {
        "number": 4104,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.split(\"+\")[0]"
    },
    {
        "number": 4104,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    num, sign = 0, \"0\"\n    \n    for i in stdin:\n        if i.isdigit():\n            num = num * 10 + int(i)\n        elif i == \"+\":\n            num += sign * int(sign)\n        elif i == \"-\":\n            num += sign * int(sign) * -1\n        sign = \"+\" if i in \"+-\" else \"0\"\n    \n    return str(num)"
    },
    {
        "number": 4104,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    num_dict = {}\n    for char in stdin:\n        if char == \"+\":\n            num_dict[int(stdin.split(\"+\")[0])] += int(stdin.split(\"+\")[1])\n        elif char == \"-\":\n            num_dict[int(stdin.split(\"-\")[0])] -= int(stdin.split(\"-\")[1])\n        elif char == \"*\":\n            num_dict[int(stdin.split(\"*\")[0])] *= int(stdin.split(\"*\")[1])\n        elif char == \"/\":\n            num_dict[int(stdin.split(\"/\")[0])] //= int(stdin.split(\"/\")[1])\n        elif char == \"^\":\n            num_dict[int(stdin.split(\"^\")[0])] ^= int(stdin.split(\"^\")[1])\n    print(num_dict[0])\n    return num_dict[0]\ndef"
    },
    {
        "number": 4104,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    operands = stdin.split(' ')\n    operators = []\n    \n    while len(operands) > 1:\n        if operands[1] == '-':\n            first = int(operands[0])\n            second = int(operands[2])\n            new_operator = first - second\n            operators.append(str(new_operator))\n            operands = operands[3:]\n        elif operands[1] == '+':\n            first = int(operands[0])\n            second = int(operands[2])\n            new_operator = first + second\n            operators.append(str(new_operator))\n            operands = operands[3:]\n    \n    return''.join(operands + operators)\n        \n"
    },
    {
        "number": 4104,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    if stdin == 'q':\n        return ''\n    line = stdin\n    expr = []\n    op = []\n    res = []\n    i = 0\n    while i < len(line):\n        if line[i].isdigit():\n            while line[i].isdigit():\n                expr.append(line[i])\n                i += 1\n            expr.append(line[i])\n            i += 1\n        else:\n            if line[i] == '+':\n                op.append(line[i])\n            elif line[i] == '-':\n                op.append(line[i])\n            elif line[i] == '*':\n                op.append(line[i])\n            elif line[i] == '/':\n                op.append(line[i])\n            elif line[i] == '^':\n                op.append(line[i])\n            elif line[i] == '(':\n                op.append(line[i])\n            elif line[i] == ')':\n                while op[-1]!= '(':\n                    res.append(op.pop())\n                op.pop()\n            i += 1\n    if len(op) > 1 or len(expr) > 10:\n        return 'q'\n    if not len(expr):\n        return 'q'\n    for e in expr:\n        if e not in '0123456789':\n            return 'q'\n    i = 0\n    while i < len(op):\n        if op[i] in '+*^':\n            if len(expr) >= i+1:\n                e = expr[i]\n                e2 = expr[i+1]\n                i += 1\n            else:\n                return 'q'\n            if e not in '0123456789':\n                return 'q'\n            if e2 not in '0123456789':\n                return 'q'\n            e = int(e)\n            e2 = int(e2)\n            if op[i] == '+':\n                res.append(e + e2)\n                i += 1\n            elif op[i] == '*':\n                res.append(e * e2)\n                i += 1\n            elif op[i] == '^':\n                res.append(e ** e2)\n                i += 1\n            elif op[i] == '-':\n                res.append(e - e2)\n                i += 1\n        elif op[i] == '(':\n            if len(expr) >= i+1:\n                e = expr[i]\n                i += 1\n            else:\n                return 'q'\n            if e not in '0123456789':\n                return 'q'\n            e = int(e)\n            if op[i] == '+':\n                res.append(e)\n                i += 1\n            elif op[i] == '*':\n                res.append(e)\n                i += 1\n            elif op[i] == '^':\n                res.append(e)\n                i += 1\n            elif op[i] == '-':\n                res.append(e)\n                i += 1\n            elif op[i] == '*':\n                res.append(e)\n                i += 1\n            elif op[i] == ')':\n                while op[i]!= '(':\n                    res.append(op.pop())\n                op.pop()\n            else:\n                return 'q'\n        else:\n            return 'q'\n        i += 1\n    while op:\n        if op[-1] in '+*^':\n            if len(expr) >= i+1:\n                e = expr[i]\n                e2 = expr[i+1]\n                i += 1\n            else:\n                return 'q'\n            if e not in '0123456789':\n                return 'q'\n            if e2 not in '0123456789':\n                return 'q'\n            e = int(e)\n            e2 = int(e2)\n            if op[-1] == '+':\n                res.append(e + e2)\n                op.pop()\n            elif op[-1] == '*':\n                res.append(e * e2)\n                op.pop()\n            elif op[-1] == '^':\n                res.append(e ** e2)\n                op.pop()\n            elif op[-1] == '-':\n                res.append(e - e2)\n                op.pop()\n        else:\n            return 'q'\n    return ''.join(map(str, res))\n"
    },
    {
        "number": 4104,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace('-', '+').replace('-', '+')"
    },
    {
        "number": 4105,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n <= 2 or k <= 2:\n        return \"NO\"\n    elif n == k:\n        return \"YES\"\n    ans = \"YES\"\n    colors = [i for i in range(k+1)]\n    for i in range(n):\n        if i > 0:\n            colors.pop(colors.index(colors[i-1]))\n        if i < n-1:\n            colors.pop(colors.index(colors[i+1]))\n    if colors == []:\n        return \"NO\"\n    else:\n        for color in colors:\n            if (n*(n-1) // 2) % (k - 1) == (i * (i + 1) // 2) % (k - 1):\n                if color == 1:\n                    ans = \"NO\"\n                else:\n                    ans = \"YES\"\n                break\n    return ans\n"
    },
    {
        "number": 4105,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    pairs = [[None] * (2 * n + 1) for _ in range(n)]\n    for i in range(n):\n        pairs[i] = list(map(int, stdin.split()))\n\n    # print(pairs)\n    is_good = True\n    for i in range(n):\n        for j in range(i + 1, n):\n            if pairs[i][0] == pairs[j][0] or pairs[i][1] == pairs[j][1]:\n                is_good = False\n    if is_good:\n        return \"NO\"\n\n    pairs.sort(key=lambda x: (x[0], x[1]))\n    color_choosing = [[None] * (2 * n + 1) for _ in range(n)]\n    for i in range(n):\n        color_choosing[i] = list(map(int, stdin.split()))\n\n    # print(color_choosing)\n    for i in range(n):\n        # print(color_choosing[i])\n        if color_choosing[i][0]!= color_choosing[i][1]:\n            return \"NO\"\n\n    for i in range(n):\n        first = pairs[i][0]\n        second = pairs[i][1]\n        for j in range(i + 1, n):\n            if color_choosing[j][0] == first or color_choosing[j][1] == second:\n                is_good = False\n                return \"NO\"\n    if is_good:\n        return \"YES\"\n"
    },
    {
        "number": 4105,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split())\n    pairs = []\n    for i in range(n):\n        pairs.append((i + 1, int(input())))\n    cnt = 0\n    while len(pairs) > 0:\n        if len(pairs) == 1 and len(pairs[0]) == 2:\n            cnt += 1\n            break\n        x, y = pairs.pop()\n        if x == y:\n            continue\n        for i, j in pairs:\n            if x == i or y == j:\n                break\n        else:\n            pairs.append((x, y))\n    if cnt == 0:\n        return \"NO\"\n    else:\n        return \"YES\"\n"
    },
    {
        "number": 4105,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    dancers = collections.defaultdict(set)\n\n    for i in range(1, n + 1):\n        man_color, woman_color = map(int, stdin.split())\n        dancers[man_color].add(i)\n        dancers[woman_color].add(i)\n\n    for i in range(1, n + 1):\n        man_color, woman_color = map(int, stdin.split())\n        man_color -= 1\n        woman_color -= 1\n        man_counter = 0\n        woman_counter = 0\n        for j in range(1, n + 1):\n            if j == i:\n                continue\n            if j in dancers[man_color]:\n                man_counter += 1\n            if j in dancers[woman_color]:\n                woman_counter += 1\n        if man_counter == woman_counter:\n            return \"NO\"\n\n        if man_counter == 0:\n            continue\n        elif man_counter == 1:\n            if woman_counter == 0:\n                continue\n            elif woman_counter == 1:\n                return \"NO\"\n            else:\n                return \"NO\"\n        else:\n            if woman_counter == 0:\n                continue\n            elif woman_counter == 1:\n                return \"NO\"\n            else:\n                return \"NO\""
    },
    {
        "number": 4105,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    \n    if not 1 <= n <= 20:\n        return \"NO\"\n    \n    if not 1 <= k <= 20:\n        return \"NO\"\n    \n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n    \n    for i in range(1, n + 1):\n        dp[i][1] = i\n        dp[i][2] = i\n    \n    for i in range(3, k + 1):\n        dp[1][i] = i - 1\n        dp[2][i] = i - 1\n    \n    for i in range(3, n + 1):\n        for j in range(3, k + 1):\n            for k in range(1, j + 1):\n                dp[i][j] = min(dp[i][j], dp[i - 1][k - 1] + dp[k][j])\n    \n    return \"YES\" if dp[-1][-1] == n else \"NO\"\n"
    },
    {
        "number": 4105,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    colors = {i: j for i, j in enumerate(range(1, k + 1), 1)}\n    for _ in range(n - 1):\n        a, b = map(int, input().split())\n        for c, d in colors.items():\n            if a == c or b == c:\n                colors.pop(c)\n            elif a == d or b == d:\n                colors.pop(d)\n    return 'YES' if not colors else 'NO'\n"
    },
    {
        "number": 4105,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, k = map(int, stdin.split())\n    d = {str(i): i for i in range(1, k + 1)}\n    for _ in range(n):\n        p = input().split()\n        d[p[0]] = p[1]\n        d[p[1]] = p[0]\n    b = d[input()]\n    g = d[input()]\n    for _ in range(n - 1):\n        p = input().split()\n        b = d[p[0]] if d[b]!= d[p[1]] else d[p[1]]\n        g = d[p[1]] if d[b]!= d[p[0]] else d[p[0]]\n    print(\"YES\" if b!= g else \"NO\")\n    return \"YES\" if b!= g else \"NO\""
    },
    {
        "number": 4105,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n <= 3:\n        return \"YES\" if k == 2 or n == 2 else \"NO\"\n    if k == 2:\n        return \"NO\"\n    groups = [(0, 0), (1, 0), (0, 1), (1, 1)]\n    answers = set()\n    while groups:\n        group, target = groups.pop()\n        if group == n - 1 and target == 0:\n            return \"YES\"\n        if group == n - 1 and target == 1:\n            answers.add((0, 1))\n        if group == 0 and target == 0:\n            groups.append((1, 1))\n            answers.add((1, 0))\n        if group == 0 and target == 1:\n            groups.append((1, 0))\n            answers.add((0, 1))\n    return \"NO\"\n"
    },
    {
        "number": 4105,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n\n    s = \"YES\"\n    while True:\n        p = itertools.combinations(range(1, k + 1), 2)\n        for i, j in p:\n            if (i, j) in [(2, 1), (1, 3), (3, 1), (2, 3)]:\n                s = \"NO\"\n                break\n\n        if s == \"YES\":\n            print(s)\n            break\n\n        for i, j in p:\n            if (i, j) in [(1, 2), (2, 1), (1, 3), (3, 1)]:\n                continue\n            if (i, j) in [(1, 2), (2, 1), (1, 3), (3, 1)]:\n                s = \"NO\"\n                break\n\n        if s == \"YES\":\n            print(s)\n            break\n\n        if n % 4 == 0:\n            print(s)\n            break\n        else:\n            n = n + 1\n\nsolution(stdin)\n"
    },
    {
        "number": 4105,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split()]\n    color_of_man = 1\n    color_of_woman = 2\n    color_of_colors = []\n    ans = \"YES\"\n    for i in range(n):\n        color_of_colors.append([color_of_man, color_of_woman])\n        color_of_man, color_of_woman = color_of_woman, color_of_man + color_of_woman\n    for i in range(n):\n        for j in range(i + 1, n):\n            if color_of_colors[i][0] == color_of_colors[j][0]:\n                ans = \"NO\"\n                break\n            if color_of_colors[i][1] == color_of_colors[j][1]:\n                ans = \"NO\"\n                break\n        if ans == \"NO\":\n            break\n    return ans\n"
    },
    {
        "number": 4106,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    dp = [0] * (k + 1)\n    dp[0] = 0\n\n    for i in range(1, n + 1):\n        current_a = a[i - 1]\n        dp[0] = max(dp[0], current_a)\n\n        for j in range(1, k + 1):\n            if j - i >= 0:\n                dp[j] = max(dp[j], dp[j - i] + current_a)\n\n        for j in range(1, k + 1):\n            dp[j] = max(dp[j], dp[j - 1])\n\n    return str(max(dp[-1], x))\n"
    },
    {
        "number": 4106,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split())\n    if n <= k:\n        return str(n * x)\n    max_beauty = 0\n    beauty = sorted(map(int, stdin.split()))\n    for i in range(k - 1, n):\n        if beauty[i] >= beauty[i - k + 1]:\n            if max_beauty < beauty[i - k + 1] * x:\n                max_beauty = beauty[i - k + 1] * x\n    if max_beauty == 0:\n        return \"no way\"\n    return str(max_beauty)\n"
    },
    {
        "number": 4106,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split())\n\n    if k < x:\n        return -1\n\n    first_segment = 1\n    max_beauty = 0\n    beauty_sum = 0\n    max_sum = 0\n\n    while max_beauty < x:\n        if first_segment + 1 <= k and beauty_sum + first_segment * max(beauty_sum, first_segment * beauty_sum) <= x:\n            max_beauty += first_segment * beauty_sum\n            max_sum = max(max_sum, beauty_sum)\n            beauty_sum = 0\n            first_segment = 1\n        elif first_segment + 1 <= k:\n            first_segment += 1\n            beauty_sum = max(beauty_sum, first_segment * beauty_sum)\n        else:\n            return -1\n\n    return max(max_sum, beauty_sum)\n\n\nprint(solution(*input()))\n"
    },
    {
        "number": 4106,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split(\" \")))\n    n = a[0]\n    k = a[1]\n    x = a[2]\n    sum_ = 0\n    res = 0\n    if (k > 1):\n        for i in range(0, n - 1):\n            if x - a[i] > 0:\n                x = x - a[i]\n            else:\n                sum_ += x\n                break\n        if sum_ == 0:\n            res = x\n        else:\n            if (x - a[i + 1]) > 0:\n                res = x + (a[i + 1] - a[i])\n            else:\n                res = x + (a[i + 1] + a[i + 1] - x)\n    else:\n        if x >= a[0]:\n            res = x\n        else:\n            res = x + a[0]\n    return str(res)"
    },
    {
        "number": 4106,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = list(map(int, stdin.split()))\n    beauty = list(map(int, stdin.split()))\n    # The first segment of the news feed will always be the first (with minimum $k$ consecutive pictures)\n    news_feed = beauty[:k]\n    # The previous segments will be the last $x$ segments of the news feed\n    news_feed += beauty[-x:]\n    print(news_feed)\n    # The sum of beauty values of reposted pictures can be maximum\n    max_sum = max(news_feed)\n    print(max_sum)\n    #  check if n - k <= x <= n\n    if n - k <= x <= n:\n        # if so then, take all pictures and repost them\n        return max_sum\n    return -1\n"
    },
    {
        "number": 4106,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    s = sum(a)\n    if s <= x or n <= k:\n        return -1\n    if k >= n//2:\n        return s\n    \n    def happy(i, b, t):\n        if b+t < 0:\n            return False\n        elif b+t == 0:\n            return True\n        elif i == n-1:\n            return False\n        return happy(i+1, b-a[i], t) or happy(i+1, b, t-a[i])\n    \n    left, right = 1, sum(a)\n    while left < right:\n        mid = (left + right) // 2\n        if happy(0, mid, mid):\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left - 1\n\n\nsolution(input())\n"
    },
    {
        "number": 4106,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split())\n    if x >= k * n:\n        return str(n * k * n)\n    if k == 1:\n        return str(max(sum(list(map(int, stdin.split()))) for _ in range(x)))\n    ans = -1\n    for i in range(k, n + 1):\n        if (x - k + i) % i!= 0:\n            continue\n        k_div_x = (x - k + i) // i\n        for j in range(k_div_x + 1, x + 1):\n            if sum(int(i) for i in list(map(str, list(range(i, x + 1, i))))) >= x:\n                ans = max(ans, sum(int(i) for i in list(map(str, list(range(i, x + 1, i))))) - k)\n    return str(ans)\n\nsolution(\"5 2 3\")\nsolution(\"6 1 5\")\nsolution(\"4 3 1\")\n"
    },
    {
        "number": 4106,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split())\n    beauty = list(map(int, stdin.split()))\n    beauty.sort()\n\n    if n <= k:\n        return str(sum(beauty))\n\n    # how many pictures are there in the segment?\n    # how many pictures are reposted?\n    # get the first segment that has k or less pictures in it\n    n_s = 0\n    n_r = 0\n    k_s = 0\n    res = 0\n    for i in range(n):\n        # check that the next segment has at least k pictures\n        if n_s < k:\n            n_s += 1\n            n_r += beauty[i]\n        # check that the next segment has at least k pictures and is reposted\n        if n_r < k:\n            n_r += beauty[i]\n            k_s += 1\n        # check that the next segment has at least k pictures and is reposted\n        if k_s >= x:\n            if res < n_r:\n                res = n_r\n    return str(res)\n"
    },
    {
        "number": 4106,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split())\n    beauty = list(map(int, stdin.split()))\n    beauty.sort()\n\n    # find first segment\n    segment_1 = beauty[0]\n    curr_sum = segment_1\n    for i in range(1, n):\n        if beauty[i] >= segment_1 + k:\n            curr_sum += beauty[i] - segment_1\n            segment_1 = beauty[i]\n    if curr_sum < x:\n        return '-1'\n\n    # find second segment\n    segment_2 = beauty[0]\n    curr_sum = segment_2\n    for i in range(1, n):\n        if beauty[i] >= segment_2 + k:\n            curr_sum += beauty[i] - segment_2\n            segment_2 = beauty[i]\n    if curr_sum < x:\n        return '-1'\n\n    return str(curr_sum)\n"
    },
    {
        "number": 4106,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    if n <= k:\n        return -1\n    k = min(k, x)\n    sum = 0\n    i = k + 1\n    while i <= n:\n        if k >= x:\n            sum += max(a[i - k : i])\n        else:\n            i += k\n            break\n        k += 1\n    return str(sum)\n"
    },
    {
        "number": 4107,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    rooms = stdin[2:]\n    if not k:\n        return \"0\"\n    \n    for i in range(k):\n        rooms = list(filter(lambda x: x!= \"1\" and x!= \"0\", rooms))\n    \n    if len(rooms) == 0:\n        return \"0\"\n    \n    cost = 0\n    max_range = max(map(lambda x: int(x), rooms))\n    min_range = min(map(lambda x: int(x), rooms))\n    \n    for range_start in range(max_range, min_range + 1):\n        range_end = min_range + 1 + k\n        if range_end > max_range:\n            range_end = max_range\n        \n        cost += range_end - range_start\n    return str(cost)"
    },
    {
        "number": 4107,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time complexity: O(n)\n    Space complexity: O(1)\n    \"\"\"\n    n, k = map(int, stdin.split())\n    s = stdin\n    # if n > 10**5:\n    #     return -1\n    # if n < 2*10**5:\n    #     return -1\n    #\n    # dp = [[0] * (2*10**5 + 1) for _ in range(n + 1)]\n    # dp[0][0] = 0\n    # dp[0][1] = 0\n    #\n    # for i in range(1, n + 1):\n    #     dp[i][0] = dp[i-1][1]\n    #     if s[i-1] == '1':\n    #         dp[i][1] = dp[i-1][0] + 1\n    #     else:\n    #         dp[i][1] = 0\n    #\n    # for i in range(2, n + 1):\n    #     for j in range(2*10**5 + 1):\n    #         dp[i][j] = min(dp[i][j-1], dp[i-1][j])\n    #         if s[i-1] == '1':\n    #             dp[i][j] = min(dp[i][j], dp[i][j-1] + 1)\n    #\n    # return dp[n][2*10**5]\n\n    # if n > 10**5:\n    #     return -1\n    # if n < 2*10**5:\n    #     return -1\n\n    # dp = [[0] * (2*10**5 + 1) for _ in range(n + 1)]\n    # dp[0][0] = 0\n    # dp[0][1] = 0\n    #\n    # for i in range(1, n + 1):\n    #     dp[i][0] = dp[i-1][1]\n    #     if s[i-1] == '1':\n    #         dp[i][1] = dp[i-1][0] + 1\n    #     else:\n    #         dp[i][1] = 0\n    #\n    # for i in range(2, n + 1):\n    #     for j in range(2*10**5 + 1):\n    #         dp[i][j] = min(dp[i][j-1], dp[i-1][j])\n    #         if s[i-1] == '1':\n    #             dp[i][j] = min(dp[i][j], dp[i][j-1] + 1)\n\n    # if n == 1:\n    #     return dp[0][1]\n    # if n == 2:\n    #     return dp[1][1]\n    # if n == 3:\n    #     return dp[2][1]\n\n    if n > 10**5:\n        return -1\n    if n < 2*10**5:\n        return -1\n\n    dp = [[0] * (2*10**5 + 1) for _ in range(n + 1)]\n    dp[0][0] = 0\n    dp[0][1] = 0\n\n    for i in range(1, n + 1):\n        dp[i][0] = dp[i-1][1]\n        if s[i-1] == '1':\n            dp[i][1] = dp[i-1][0] + 1\n        else:\n            dp[i][1] = 0\n\n    for i in range(2, n + 1):\n        for j in range(2*10**5 + 1):\n            dp[i][j] = min(dp[i][j-1], dp[i-1][j])\n            if s[i-1] == '1':\n                dp[i][j] = min(dp[i][j], dp[i][j-1] + 1)\n\n    return dp[n][2*10**5]\n"
    },
    {
        "number": 4107,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin\n    prev_sum = 0\n    for i in range(1, n + 1):\n        cur_sum = 0\n        while s[i - 1] == \"0\":\n            cur_sum += i\n            i -= 1\n        while s[i - 1] == \"1\":\n            cur_sum += i\n            i -= 1\n        if cur_sum > prev_sum:\n            prev_sum = cur_sum\n    return str(prev_sum)\n"
    },
    {
        "number": 4107,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    s = stdin\n    cnt = 0\n    ans = 0\n    while cnt < n:\n        if s[cnt] == '1':\n            for i in range(cnt, min(n, cnt + k)):\n                if s[i] == '0':\n                    ans += i - cnt\n                    s = s[:i] + '1' + s[i + 1:]\n                    break\n            if cnt + k > n:\n                cnt = 0\n        else:\n            cnt += 1\n    return str(ans)\n"
    },
    {
        "number": 4107,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = (int(x) for x in stdin.split())\n    ans = 0\n    for i in range(1, n + 1):\n        cost = i\n        if stdin[i - 1] == '1':\n            cost += max(1, i - k)\n            ans += cost\n        if stdin[i - 1] == '0':\n            cost += i\n            ans += cost\n    return str(ans)\n"
    },
    {
        "number": 4107,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4107,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    s = stdin.strip()\n    return sum(i + j for i, j in zip(reversed(range(n)), reversed(range(n))))\n"
    },
    {
        "number": 4107,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n, k = map(int, stdin.split())\n    s = stdin.strip()\n    n = len(s)\n    if n == 0:\n        return str(0)\n    n = n - 1\n    spots = [0] * (n + 1)\n    for i in range(n + 1):\n        spots[i] = s[i] == '1'\n    print(spots)\n    routers = 0\n    res = 0\n    for i in range(n + 1):\n        if spots[i]:\n            # no router in room i\n            routers = 0\n            if i > 0:\n                if spots[i - 1]:\n                    routers = i\n                    # no router in room i-1\n                    # and so on\n                else:\n                    # router in room i-1 and so on\n                    for j in range(i - 1, -1, -1):\n                        if spots[j]:\n                            routers = j\n                            break\n            res = res + i + routers\n    return str(res)\n"
    },
    {
        "number": 4107,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    rooms, range_router, *rooms_numbers = stdin.split()\n    # print(rooms, range_router, *rooms_numbers)\n    total_cost = 0\n    if rooms:\n        rooms = list(map(int, rooms.split()))\n        # print(rooms)\n        rooms.sort()\n        # print(rooms)\n        range_router = int(range_router)\n        # print(range_router)\n        for i, room in enumerate(rooms, start=1):\n            for j in range(max(1, i - range_router), min(len(rooms), i + range_router)):\n                # print(i, j, room, rooms_numbers[j-1])\n                if rooms_numbers[j-1] == '1':\n                    total_cost += room\n    return str(total_cost)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4107,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin\n    return str(min(n,max(1,s.count(\"1\")-k),s.count(\"0\")))"
    },
    {
        "number": 4108,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4108,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def swap(string: str, letter: str) -> str:\n        # replace letter with other letter\n        return string.replace(letter, letter.upper())\n\n    S = stdin[0]\n    T = stdin[1]\n    for c_1, c_2 in zip(S, T):\n        if c_1 == c_2:\n            return \"Yes\"\n        else:\n            S = swap(S, c_1)\n            T = swap(T, c_2)\n\n    if S == T:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4108,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    s_list = list(s)\n    t_list = list(t)\n    \n    for i in range(len(s_list)):\n        c_1 = s_list[i]\n        c_2 = t_list[i]\n        if c_1 == c_2:\n            s_list[i] = c_2\n            t_list[i] = c_1\n            \n    if s == ''.join(s_list):\n        return 'Yes'\n    else:\n        return 'No'\n\nsolution(input())\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4108,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    s = list(s)\n    t = list(t)\n    c_1, c_2 = s.pop(0), t.pop(0)\n    s = \"\".join(s)\n    t = \"\".join(t)\n    s = s.replace(c_1, c_2)\n    t = t.replace(c_2, c_1)\n    if s == t:\n        return \"Yes\"\n    return \"No\"\n\nsolution(input())\n"
    },
    {
        "number": 4108,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    s = list(s[0])\n    t = list(s[1])\n    s.sort()\n    t.sort()\n    for i in range(len(s)):\n        if s[i]!= t[i]:\n            return 'No'\n    return 'Yes'\n\nsolution(input())\n\n'''\nimport itertools\n\ndef"
    },
    {
        "number": 4108,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    string_one = stdin\n    string_two = stdin\n\n    string_one = change(string_one, 1)\n    string_two = change(string_two, 1)\n\n    if string_one == string_two:\n        return \"Yes\"\n\n    return \"No\"\n\n\ndef"
    },
    {
        "number": 4108,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4108,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.rstrip()\n    T = stdin.rstrip()\n    return \"Yes\" if S == T[::-1] else \"No\"\n"
    },
    {
        "number": 4108,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin\n    T = stdin\n    if len(S)!= len(T):\n        return 'No'\n    S = list(S)\n    T = list(T)\n    N = len(S)\n    for i in range(N):\n        for j in range(N):\n            if i!= j:\n                S[i], S[j] = S[j], S[i]\n                if S == T:\n                    return 'Yes'\n                S[i], S[j] = S[j], S[i]\n    return 'No'\n"
    },
    {
        "number": 4108,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.split()[0]\n    T = stdin.split()[1]\n    # write your code here\n    changes = False\n    for i in range(0, len(S)):\n        if S[i]!= T[i]:\n            changes = True\n            S_swap = S[i]\n            T_swap = T[i]\n            S = S.replace(S_swap, T_swap)\n            T = T.replace(T_swap, S_swap)\n    if not changes:\n        return 'Yes'\n    return 'No'\n    \"\"\"\n    # S and T can be made equal by performing the operation zero or more times.\n    changes = False\n    for i in range(0, len(S)):\n        if S[i]!= T[i]:\n            changes = True\n            S_swap = S[i]\n            T_swap = T[i]\n            S = S.replace(S_swap, T_swap)\n            T = T.replace(T_swap, S_swap)\n    if not changes:\n        return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 4109,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    c = [int(x) for x in stdin.split()]\n    s = 0\n    n = len(c)\n    max_val = max(c)\n    min_val = min(c)\n\n    if max_val >= n:\n        return 'Yes'\n    elif max_val <= min_val:\n        return 'No'\n    else:\n        for i in range(n - 1):\n            c.append(min(c[i], max_val) + 1)\n\n        for j in range(n - 1):\n            c[j] = min(c[j], max_val)\n\n        for k in range(n - 1):\n            s += c[k] * (k + 1)\n        print(s)\n        return 'No' if s < s else 'Yes'\n"
    },
    {
        "number": 4109,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    # for row in range(1, len(stdin)):\n    #     stdin[row] = stdin[row].split(\" \")\n    #     for column in range(len(stdin[row])):\n    #         stdin[row][column] = int(stdin[row][column])\n\n    book_dict = {}\n    for row in range(1, len(stdin)):\n        book_dict[row] = {}\n        for column in range(1, len(stdin[row])):\n            book_dict[row][column] = stdin[row][column]\n\n    for row in range(1, len(stdin)):\n        for column in range(1, len(stdin[row])):\n            if book_dict[row][column] > 0:\n                for i in range(1, len(book_dict)):\n                    if book_dict[i][column] == 0:\n                        continue\n                    else:\n                        book_dict[i][column] = (book_dict[i][column] + book_dict[row][column])\n\n    book_list = []\n    for row in range(1, len(stdin)):\n        for column in range(1, len(stdin[row])):\n            book_list.append(stdin[row][column])\n\n    book_list.sort()\n\n    book_dict_sorted = sorted(book_dict.items(), key=lambda kv: kv[1], reverse=True)\n    book_list = list(map(lambda kv: kv[0], book_dict_sorted))\n    book_list = sorted(book_list, key=lambda kv: kv)\n\n    print(\" \".join(map(str, book_list)))\n    print(sum(map(lambda kv: kv[1], book_dict_sorted)))\n    return \" \".join(map(str, book_list))\n"
    },
    {
        "number": 4109,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, c, a, b = (int(_) for _ in stdin.split())\n    ans = c\n    for i in range(1, m+1):\n        ans += a*b**i\n    return str(ans)\n"
    },
    {
        "number": 4109,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, c, *a = list(map(int, stdin.split()))\n    a.sort(reverse=True)\n    if a[0] > m:\n        return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 4109,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, M, C, X = map(int, stdin.split())\n    algorithms = sorted(map(int, stdin.split()))\n    algorithms = [i - 1 for i in algorithms]\n    dp = {}\n    dp[0] = 0\n    for i in range(1, N + 1):\n        dp[i] = 1000000000000\n    for algorithm in algorithms:\n        for i in range(0, N - algorithm):\n            dp[i] = min(dp[i], dp[i + algorithm + 1] + C * algorithm)\n    return 'YES' if dp[0] <= X else 'NO'\n"
    },
    {
        "number": 4109,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n, m, c, *a = stdin\n    a = sorted(a, reverse=True)\n    min_diff = c\n    for i in range(len(a)):\n        min_diff = min(min_diff, a[i] + c)\n    return str(min_diff)"
    },
    {
        "number": 4109,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    num_of_algorithms, num_of_books, book_price, _, _, _, _, *_ = list(map(int, stdin.split()))\n    all_solutions = list(map(lambda x: x >= num_of_algorithms, range(num_of_books + 1)))\n\n    def dp(n: int) -> int:\n        # return the minimum amount of money needed to achieve the satisfaction\n        if n == 0 or all_solutions[n]:\n            return 0\n        else:\n            return max(\n                [dp(n - 1) + book_price[i - 1] * A for i, A in enumerate(all_solutions[:n])]\n            )\n\n    return str(dp(num_of_books))\n"
    },
    {
        "number": 4109,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, C, M, N, K = map(int, stdin.split())\n    books = sorted(list(map(int, stdin.split())))\n    ans = 0\n\n    for k in range(1, K + 1):\n        for j in range(0, len(books) - k + 1):\n            for i in range(1, len(books) - j + 1):\n                if sum(books[i:i + k]) < C * M:\n                    ans = max(ans, sum(books[i:i + k]))\n\n    return str(ans)\n"
    },
    {
        "number": 4109,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Worker's solution.\n    '''\n    def pos_part(i, j):\n        # get the difference between i and j.\n        # if i > j, then pos_part(i, j) = pos_part(i-1, j)\n        # if i < j, then pos_part(i, j) = pos_part(i, j-1)\n        # if i == j, then pos_part(i, j) = 0\n        # return diff\n        diff = i - j\n        if diff >= 0:\n            return diff\n        elif diff < 0:\n            return 0\n\n    def neg_part(i, j):\n        # get the difference between i and j.\n        # if i > j, then pos_part(i, j) = neg_part(i-1, j)\n        # if i < j, then pos_part(i, j) = neg_part(i, j-1)\n        # if i == j, then pos_part(i, j) = 0\n        # return diff\n        diff = i - j\n        if diff >= 0:\n            return 0\n        elif diff < 0:\n            return diff\n\n    # first, get stdin\n    input_lines = stdin.split('\\n')\n    stdin_list = list(map(int, input_lines[0].split()))\n    N, M, K = stdin_list[0], stdin_list[1], stdin_list[2]\n    stdin_list = stdin_list[3:]\n    # print(N, M, K, stdin_list)\n\n    # for loop to get all possible X and Y\n    X = []\n    Y = []\n    for i in range(1, N+1):\n        X.append(i)\n    for i in range(1, M+1):\n        Y.append(i)\n    # print(X, Y)\n    # X, Y = [i for i in range(1, N+1)], [i for i in range(1, M+1)]\n\n    # for loop to get all possible solutions\n    solutions = []\n    for i in range(1, N+1):\n        for j in range(1, M+1):\n            # print(X, Y)\n            # print(pos_part(i, j), neg_part(i, j))\n            solutions.append(pos_part(i, j) + neg_part(i, j))\n    # print(solutions)\n\n    # get the solutions from solutions\n    min_value = min(solutions)\n    # print(min_value)\n\n    # get solutions' value\n    for solution in solutions:\n        if solution == min_value:\n            solution_1 = X[solutions.index(solution)]\n            solution_2 = Y[solutions.index(solution)]\n            # print(solution_1, solution_2)\n            # print(solution_1, solution_2)\n            # print(f'Minimum value is {solution}')\n            print(f'{solution_1} {solution_2}')\n            return ''\n"
    },
    {
        "number": 4109,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, C, A, M = map(int, stdin.split())\n    score = []\n\n    for _ in range(N):\n        score.append(list(map(int, stdin.split())))\n\n    ans = 10000000000000\n\n    for i in range(1, N):\n        for j in range(M):\n            if score[i][j] > 0:\n                score[i][j] += A[j]\n\n    for i in range(N):\n        if sum(score[i]) >= C:\n            ans = min(ans, (C - sum(score[i])) * A[0])\n\n    if ans == 10000000000000:\n        return 'Impossible'\n    return str(ans)\n"
    },
    {
        "number": 4110,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    d, g = stdin[0].split()\n    problems = stdin[1].split()\n    total = 0\n    perfect = {}\n    for p in problems:\n        total += int(p)\n        if int(p) % 100 == 0:\n            perfect[int(p)] = int(p)\n    perfect = sorted(perfect.items(), key=lambda item: item[1], reverse=True)\n    perfect = [int(p) for p in perfect]\n    perfect = perfect[0]\n\n    total += int(perfect * 2)\n    print(total)\n    return\n\nsolution(\"\"\"1 3\n5 5\n6 5\n2 8\n10 10\"\"\")"
    },
    {
        "number": 4110,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input_data = list(map(int, stdin.split()))\n    d, g = input_data\n    p = []\n    for i in range(1, d + 1):\n        p.append((100 * i - 100) // 2)\n    c = []\n    for i in range(1, d + 1):\n        c.append((100 * i - 100) // 2)\n    total = 0\n    perfect_c = []\n    perfect_b = []\n    for i in range(1, d + 1):\n        perfect_c.append(sum(c[:i]) + max(c[i:]))\n        perfect_b.append(sum(b[:i]) + max(b[i:]))\n    for i in range(1, d + 1):\n        total = max(total, sum(p[:i]) + perfect_c[i - 1] + max(perfect_b[i - 1] - perfect_c[i - 1], 0))\n    return total\n\n\nsolution(\"2 700\")\n"
    },
    {
        "number": 4110,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    (D, G) = list(map(int, stdin.split(\" \")))\n\n    def calc(n):\n        return n * 100 + 1\n\n    perfect_score = 0\n    perfect_bonus = 0\n    perfect_base_score = 0\n    for i in range(1, D + 1):\n        perfect_score += calc(i)\n        perfect_bonus += calc(i)\n        perfect_base_score += calc(i)\n\n    perfect_score += G\n    perfect_bonus += G\n\n    if perfect_score < G:\n        return -1\n\n    if perfect_bonus == G:\n        return perfect_base_score\n\n    perfect_bonus -= perfect_base_score\n    perfect_bonus = perfect_bonus * 100\n\n    return perfect_base_score + perfect_bonus\n\n\ndef"
    },
    {
        "number": 4110,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    D, G = map(int, stdin.split())\n    perfect_bonus = G // 100\n    perfect_bonus_points = perfect_bonus * 100\n    points = perfect_bonus_points - D\n    while points > 0:\n        if points >= D:\n            points -= D\n        else:\n            points -= points\n    return str(points)\n"
    },
    {
        "number": 4110,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    d, g = stdin.split()\n    d = int(d)\n    g = int(g)\n\n    if d > g:\n        return '0'\n\n    perfect_bonus = (g * (g - 1) // 2)\n    perfect_points = perfect_bonus + d\n    if perfect_points < g:\n        return '0'\n\n    base_points = 100 * d\n    perfect_bonus_points = perfect_bonus - base_points\n    if perfect_bonus_points < g:\n        return '0'\n\n    if perfect_bonus_points - base_points < g:\n        return str(perfect_bonus_points - g)\n\n    return str(perfect_bonus_points)"
    },
    {
        "number": 4110,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    D, G = map(int, stdin.split())\n    p_D = []\n    perfect = G\n    while D > 0:\n        perfect += max(D, 100) * (D - 1) // 100\n        D -= 100\n    if perfect <= G:\n        print(0)\n        return ''\n    perfect = perfect // 100 * 100\n    perfect_bonus = sum(i * 100 for i in range(1, D + 1))\n    perfect += max(perfect_bonus, perfect_bonus // 2)\n    base_score = perfect - perfect_bonus\n    perfect_bonus = perfect - perfect_bonus\n    base_score = base_score // 100 * 100\n    if perfect_bonus > G:\n        perfect_bonus = G\n    perfect_bonus = perfect_bonus // 100 * 100\n    print(max(base_score, perfect_bonus))\n    return ''\n"
    },
    {
        "number": 4110,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    problem_scores = stdin.strip().split()\n    D, G = int(problem_scores[0]), int(problem_scores[1])\n    perfect_bonuses = []\n    perfect_bonuses.append((D, 1))\n    perfect_bonuses.append((D, 2))\n    perfect_bonuses.append((D, 3))\n    perfect_bonuses.append((D, 4))\n    perfect_bonuses.append((D, 5))\n    perfect_bonuses.append((D, 6))\n    perfect_bonuses.append((D, 7))\n    perfect_bonuses.append((D, 8))\n    perfect_bonuses.append((D, 9))\n    perfect_bonuses.append((D, 10))\n    perfect_bonuses.sort(key=lambda x: x[1], reverse=True)\n    count_of_perfect_bonuses = sum([x[1] for x in perfect_bonuses])\n    perfect_bonuses = {x[1]: x[0] for x in perfect_bonuses}\n    perfect_bonuses[1] = 0\n    perfect_bonuses[2] = 0\n    perfect_bonuses[3] = 0\n    perfect_bonuses[4] = 0\n    perfect_bonuses[5] = 0\n    perfect_bonuses[6] = 0\n    perfect_bonuses[7] = 0\n    perfect_bonuses[8] = 0\n    perfect_bonuses[9] = 0\n    perfect_bonuses[10] = 0\n    perfect_bonuses[100] = 0\n    perfect_bonuses[200] = 0\n    perfect_bonuses[300] = 0\n    perfect_bonuses[400] = 0\n    perfect_bonuses[500] = 0\n    perfect_bonuses[600] = 0\n    perfect_bonuses[700] = 0\n    perfect_bonuses[800] = 0\n    perfect_bonuses[900] = 0\n    perfect_bonuses[1000] = 0\n    perfect_bonuses[2000] = 0\n    perfect_bonuses[3000] = 0\n    perfect_bonuses[4000] = 0\n    perfect_bonuses[5000] = 0\n    perfect_bonuses[6000] = 0\n    perfect_bonuses[7000] = 0\n    perfect_bonuses[8000] = 0\n    perfect_bonuses[9000] = 0\n    perfect_bonuses[10000] = 0\n    perfect_bonuses[11000] = 0\n    perfect_bonuses[12000] = 0\n    perfect_bonuses[13000] = 0\n    perfect_bonuses[14000] = 0\n    perfect_bonuses[15000] = 0\n    perfect_bonuses[16000] = 0\n    perfect_bonuses[17000] = 0\n    perfect_bonuses[18000] = 0\n    perfect_bonuses[19000] = 0\n    perfect_bonuses[20000] = 0\n    perfect_bonuses[21000] = 0\n    perfect_bonuses[22000] = 0\n    perfect_bonuses[23000] = 0\n    perfect_bonuses[24000] = 0\n    perfect_bonuses[25000] = 0\n    perfect_bonuses[26000] = 0\n    perfect_bonuses[27000] = 0\n    perfect_bonuses[28000] = 0\n    perfect_bonuses[29000] = 0\n    perfect_bonuses[30000] = 0\n    perfect_bonuses[31000] = 0\n    perfect_bonuses[32000] = 0\n    perfect_bonuses[33000] = 0\n    perfect_bonuses[34000] = 0\n    perfect_bonuses[35000] = 0\n    perfect_bonuses[36000] = 0\n    perfect_bonuses[37000] = 0\n    perfect_bonuses[38000] = 0\n    perfect_bonuses[39000] = 0\n    perfect_bonuses[40000] = 0\n    perfect_bonuses[41000] = 0\n    perfect_bonuses[42000] = 0\n    perfect_bonuses[43000] = 0\n    perfect_bonuses[44000] = 0\n    perfect_bonuses[45000] = 0\n    perfect_bonuses[46000] = 0\n    perfect_bonuses[47000] = 0\n    perfect_bonuses[48000] = 0\n    perfect_bonuses[49000] = 0\n    perfect_bonuses[50000] = 0\n    perfect_bonuses[51000] = 0\n    perfect_bonuses[52000] = 0\n    perfect_bonuses[53000] = 0\n    perfect_bonuses[54000] = 0\n    perfect_bonuses[55000] = 0\n    perfect_bonuses[56000] = 0\n    perfect_bonuses[57000] = 0\n    perfect_bonuses[58000] = 0\n    perfect_bonuses[59000] = 0\n    perfect_bonuses[60000] = 0\n    perfect_bonuses[61000] = 0\n    perfect_bonuses[62000] = 0\n    perfect_bonuses[63000] = 0\n    perfect_bonuses[64000] = 0\n    perfect_bonuses[65000] = 0\n    perfect_bonuses[66000] = 0\n    perfect_bonuses[67000] = 0\n    perfect_bonuses[68000] = 0\n    perfect_bonuses[69000] = 0\n    perfect_bonuses[70000] = 0\n    perfect_bonuses[71000] = 0\n    perfect_bonuses[72000] = 0\n    perfect_bonuses[73000] = 0\n    perfect_bonuses[74000] = 0\n    perfect_bonuses[75000] = 0\n    perfect_bonuses[76000] = 0\n    perfect_bonuses[77000] = 0\n    perfect_bonuses[78000] = 0\n    perfect_bonuses[79000] = 0\n    perfect_bonuses[80000] = 0\n    perfect_bonuses[81000] = 0\n    perfect_bonuses[82000] = 0\n    perfect_bonuses[83000] = 0\n    perfect_bonuses[84000] = 0\n    perfect_bonuses[85000] = 0\n    perfect_bonuses[86000] = 0\n    perfect_bonuses[87000] = 0\n    perfect_bonuses"
    },
    {
        "number": 4110,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    d, g = map(int, stdin.split())\n    c = 1\n    b = 100\n    perfect = 0\n    while b <= g:\n        perfect += b\n        b = b * c\n        c += 1\n    if perfect > g:\n        perfect = perfect - g\n    return str(perfect)\n\ndef"
    },
    {
        "number": 4110,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input_d, input_g = stdin.split()\n    d, g = int(input_d), int(input_g)\n    p = [int(i) for i in range(1, d + 1)]\n    c = [int(i) for i in range(1, g + 1)]\n\n    max_score = d * 100\n    perfect_bonus = sum([100 * i for i in range(1, d + 1)])\n    perfect_bonus += 100 * d\n\n    print(p)\n    print(c)\n    print(max_score)\n    print(perfect_bonus)\n\n    dp = [[0 for _ in range(d + 1)] for _ in range(len(c) + 1)]\n    for i in range(len(c) + 1):\n        for j in range(len(p) + 1):\n            dp[i][j] = min(dp[i][j - 1], dp[i - 1][j])\n            if j >= p[i - 1] and dp[i][j] > dp[i][j - p[i - 1]] + c[i - 1]:\n                dp[i][j] = dp[i][j - p[i - 1]] + c[i - 1]\n\n    print(dp[-1][-1])\n    return"
    },
    {
        "number": 4110,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin_data = stdin.split()\n    d = int(stdin_data[0])\n    g = int(stdin_data[1])\n    prices = stdin_data[2:]\n    prices = [int(price) for price in prices]\n    perfect_bonuses = [price * 200 for price in prices]\n    perfect_bonuses = [sum(perfect_bonuses[:i + 1]) for i in range(len(perfect_bonuses))]\n    perfect_bonuses = [(i + 1) * 100 for i in perfect_bonuses]\n    perfect_bonuses = sorted(perfect_bonuses)\n    print(perfect_bonuses)\n    perfect_bonuses = [(i + 1) * 100 for i in perfect_bonuses]\n    print(perfect_bonuses)\n    perfect_bonuses = sorted(perfect_bonuses)\n    print(perfect_bonuses)\n    base_points = 0\n    for price in perfect_bonuses:\n        if price <= g:\n            break\n        base_points += price\n    print(base_points)\n    return perfect_bonuses.index(base_points) + 1\n"
    },
    {
        "number": 4111,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    candies = list(map(int, stdin.split(' ')))\n    candies.sort()\n    even_sum = 0\n    odd_sum = 0\n    i = 0\n    while i < n - 1:\n        if candies[i] == candies[i + 1]:\n            i += 1\n        elif i % 2 == 0:\n            even_sum += candies[i] + candies[i + 1]\n        else:\n            odd_sum += candies[i] + candies[i + 1]\n        i += 1\n    if even_sum == odd_sum:\n        return \"2\"\n    else:\n        return \"0\"\n"
    },
    {
        "number": 4111,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    even = a[::2]\n    odd = a[1::2]\n    even_sum = sum(even)\n    odd_sum = sum(odd)\n    count = 0\n    if odd_sum == even_sum:\n        for x, y in zip(even, odd):\n            if x % 2 == 0:\n                count += 1\n    else:\n        count = 0\n    return str(count)\n"
    },
    {
        "number": 4111,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    w = list(map(int, stdin.strip().split(' ')))\n    if n < 1:\n        return \"0\"\n    if n < 4:\n        return str(sum(w) - sum(w[-2:]) % 2)\n    odds, evens = 0, 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            evens += w[i - 1]\n        else:\n            odds += w[i - 1]\n    return str(odds - evens)\n"
    },
    {
        "number": 4111,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, *c = map(int, stdin.split())\n    return str(len(set(c[::2]) & set(c[1::2])))"
    },
    {
        "number": 4111,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nfrom math import sqrt\n\n\ndef"
    },
    {
        "number": 4111,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4111,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    weights = [int(x) for x in stdin.split()]\n    summ = 0\n    s = 0\n    good = 0\n    goods = []\n    for i in range(1, n + 1):\n        if i == 1:\n            good = 1\n        elif i % 2 == 0:\n            summ += weights[i - 1]\n        else:\n            s = weights[i - 1]\n            goods.append(s)\n            summ += s\n        if summ == weights[i - 1]:\n            good += 1\n        if s == weights[i - 1]:\n            good += 1\n    for i in range(0, len(goods)):\n        if goods[i] == weights[i]:\n            good += 1\n    return str(good)\n\n\nprint(solution(input()))\n\n\n\n\n\n\n\n\n\n\n\n\n\ndef"
    },
    {
        "number": 4111,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    weights = list(map(int, stdin.split()))\n    if len(weights)!= n:\n        raise ValueError('Invalid input')\n    ans = 0\n    for i in range(1, len(weights)):\n        # odd\n        if sum(weights[:i]) == sum(weights[i:]):\n            ans += 1\n        # even\n        if sum(weights[:i]) > sum(weights[i:]):\n            continue\n        # not even\n        if sum(weights[:i]) == sum(weights[i:]):\n            ans += 1\n    return str(ans)\n"
    },
    {
        "number": 4111,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    candy = list(map(int, stdin.split()))\n    return str(find_good_candies(n, candy))\n\ndef"
    },
    {
        "number": 4111,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    good = 0\n    for i in range(1, n):\n        if a[i] < a[i - 1]:\n            good += 2\n    print(good)\n\n\nsolution(input())\n"
    },
    {
        "number": 4112,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = (int(i) for i in stdin.split())\n    \n    pictures = [int(i) for i in stdin.split()]\n    pictures.sort(reverse=True)\n    \n    beauties = [0]*n\n    for i in range(n):\n        beauties[i] = sum(pictures[i+1:i+k+1])\n    \n    best = 0\n    i = 0\n    while True:\n        if i == len(pictures) - k:\n            break\n        best = max(best, sum(pictures[i:i+k]))\n        i += 1\n        \n    return str(best) if best >= x else str(0)\n"
    },
    {
        "number": 4112,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a = sorted(a)\n    res = 0\n\n    # can't have repost all pictures\n    if n < k + x:\n        return -1\n\n    # starting from the left end the segments are from k to n-k\n    for i in range(n - k, n):\n        # new segments are at least k and max(beauty of reposted) > max(beauty of current segment)\n        if a[i] > a[i - k] and max(a[i - k:i + 1]) > max(a[i + 1: i + k + 1]):\n            # repost all the pictures\n            if i - k == 0:\n                res = sum(a[i:i + k + 1])\n            else:\n                res = max(res, sum(a[i - k:i]))\n        else:\n            # no way to repost\n            break\n    return str(res)\n"
    },
    {
        "number": 4112,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    left = 1\n    right = n\n    result = -1\n    while left < right:\n        mid = left + (right - left) // 2\n        if a[mid-1] < a[mid]:\n            right = mid\n        else:\n            left = mid + 1\n    \n    left = 1\n    right = n\n    while left < right:\n        mid = left + (right - left) // 2\n        if a[mid] < a[mid-1]:\n            left = mid + 1\n        else:\n            right = mid\n\n    left = 1\n    right = n\n    while left < right:\n        mid = left + (right - left) // 2\n        if a[mid] < a[mid+1]:\n            left = mid + 1\n        else:\n            right = mid\n    \n    left = 1\n    right = n\n    while left < right:\n        mid = left + (right - left) // 2\n        if a[mid] < a[mid-1]:\n            left = mid + 1\n        else:\n            right = mid\n\n    left = 1\n    right = n\n    while left < right:\n        mid = left + (right - left) // 2\n        if a[mid] < a[mid+1]:\n            left = mid + 1\n        else:\n            right = mid\n    \n    result = a[0]\n    for i in range(1, n):\n        result += a[i]\n        if result >= x:\n            return result\n    return result\n\n\nprint(solution(input()))"
    },
    {
        "number": 4112,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split())\n    if n == 1:\n        if k == 1 and x == 1:\n            return '1'\n        return '-1'\n    res = []\n    for _ in range(n):\n        res.append(int(stdin.split()[_]))\n    res = sorted(res, reverse=True)\n    max_sum = 0\n    if k == 1:\n        if x < len(res):\n            max_sum = sum(res[:x])\n        return max_sum\n    else:\n        if x < k:\n            return '-1'\n        for i in range(x - 1, x - k - 1, -1):\n            if res[i] - res[i - x] >= x - 1:\n                max_sum += res[i] - res[i - x]\n                break\n        for i in range(x, len(res)):\n            if res[i] - res[i - x] >= x:\n                max_sum += res[i] - res[i - x]\n                break\n        return str(max_sum)\n"
    },
    {
        "number": 4112,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    a.sort(reverse=True)\n    print(a)\n    if k > 1:\n        for i in range(k):\n            if a[i] == x:\n                return -1\n    if k > 1 and a[0] > x:\n        return -1\n    return sum(a)"
    },
    {
        "number": 4112,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split())\n    beauty = list(map(int, stdin.split()))\n    beauty = sorted(beauty)\n    if k < 1 or x < 1 or x > n or len(beauty) < k:\n        return -1\n\n    prev = beauty[0]\n    current = prev + 1\n    result = []\n    while len(result) < x:\n        if len(beauty) < k:\n            return -1\n\n        for i in range(k):\n            current = beauty[i] if current + 1 > beauty[i] else current + 1\n            if i == k - 1 and current > prev:\n                result.append(current)\n\n        prev = current\n        current = prev + 1\n\n    return str(max(result))\n"
    },
    {
        "number": 4112,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split())\n    beauty = list(map(int, stdin.split()))\n\n    if n < k or n < x:\n        return \"no\"\n\n    # arrange pictures by their beauty value\n    picture = {beauty[i]: i for i in range(n)}\n\n    # pick first x pictures and repost\n    first_x_indexes = range(x)\n    reposted_pics = 0\n    reposted_pics_sum = 0\n    for i in range(x):\n        curr_index = first_x_indexes[i]\n        if curr_index in picture and reposted_pics < k:\n            first_x_indexes.pop(i)\n            reposted_pics += 1\n            reposted_pics_sum += picture[curr_index]\n        else:\n            return \"no\"\n\n    # pick pictures between index $i$ and $j$ and repost\n    while len(first_x_indexes) > 0:\n        i = first_x_indexes.pop(0)\n        j = i + 1\n        if j == n:\n            break\n        curr_index = j\n        if curr_index in picture:\n            if reposted_pics < k:\n                reposted_pics += 1\n                reposted_pics_sum += picture[curr_index]\n            else:\n                return \"no\"\n\n    return str(reposted_pics_sum)\n"
    },
    {
        "number": 4112,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split())\n    beauty_list = list(map(int, stdin.split()))\n    beauty_list.sort()\n\n    def is_divisible_sum(k, x, beauty_list):\n        count = 0\n        start = 0\n        end = 0\n        while True:\n            count += 1\n            if end == len(beauty_list):\n                return False\n            if count % k == 0:\n                for i in range(start, end + 1):\n                    if beauty_list[i] > x:\n                        return False\n                count = 0\n                start = end + 1\n                end = start\n            else:\n                end += 1\n\n    if k == 1:\n        return beauty_list[-1]\n    if k == 2:\n        if is_divisible_sum(k, x, beauty_list):\n            return beauty_list[-1]\n        return -1\n    if k == 3:\n        if is_divisible_sum(k, x, beauty_list):\n            return beauty_list[-1]\n        return -1\n"
    },
    {
        "number": 4112,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split())\n    # \u0437\u0430\u0434\u0430\u0435\u043c \u043c\u0430\u0441\u0441\u0438\u0432\u044b\n    pics = [int(i) for i in stdin.split()]\n\n    # \u0434\u043b\u044f \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0439 \u043f\u043e\u0438\u0441\u043a \u043f\u043e \u043c\u0430\u0441\u0441\u0438\u0432\u0443\n    def sort(array):\n        size = len(array)\n        for i in range(size):\n            min_idx = i\n            for j in range(i + 1, size):\n                if array[min_idx] > array[j]:\n                    min_idx = j\n            array[i], array[min_idx] = array[min_idx], array[i]\n\n    sort(pics)\n    # \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0441 \u0447\u0435\u0442\u043d\u044b\u043c\u0438 \u0438\u043d\u0434\u0435\u043a\u0441\u0430\u043c\u0438\n    odd = pics[::2]\n    # \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0441 \u043d\u0435\u0447\u0435\u0442\u043d\u044b\u043c\u0438 \u0438\u043d\u0434\u0435\u043a\u0441\u0430\u043c\u0438\n    even = pics[1::2]\n\n    # \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u043e\u0433\u043e\u043d\u043e\u0432 \u0441 \u0447\u0435\u0442\u043d\u044b\u043c\u0438 \u0438\u043d\u0434\u0435\u043a\u0441\u0430\u043c\u0438\n    even_sum = 0\n    for i in range(0, x, 2):\n        even_sum += even[i]\n\n    # \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u043e\u0433\u043e\u043d\u043e\u0432 \u0441 \u043d\u0435\u0447\u0435\u0442\u043d\u044b\u043c\u0438 \u0438\u043d\u0434\u0435\u043a\u0441\u0430\u043c\u0438\n    odd_sum = 0\n    for i in range(1, x, 2):\n        odd_sum += odd[i]\n\n    print(max(even_sum, odd_sum, -1))\n\n\nsolution(\"2 2 1\")\nsolution(\"6 1 5\")\nsolution(\"4 3 1\")\n"
    },
    {
        "number": 4112,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    _, k, x = stdin.split()\n    k = int(k)\n    x = int(x)\n    a = list(map(int, stdin.split()))\n    n = len(a)\n    dp = [[0] * (x + 1) for _ in range(k + 1)]\n    for i in range(k + 1):\n        dp[i][0] = 0\n    for i in range(1, k + 1):\n        for j in range(1, x + 1):\n            if i > 1:\n                dp[i][j] = max(dp[i][j], dp[i - 1][j] + a[i - 1])\n            dp[i][j] = max(dp[i][j], dp[i][j - 1] + a[i - 1])\n    return str(dp[k][x])\n"
    },
    {
        "number": 4113,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    N = int(stdin[0])\n    if N == 0:\n        return 'Yes'\n    else:\n        lista = [4, 7]\n        for i in range(len(lista)):\n            if lista[i] >= N:\n                lista[i] = N\n                break\n        print(sum(lista))\n        return 'No'\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4113,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 == 0:\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 4113,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    if not stdin.strip():\n        return stdin\n    input_data = list(map(int, stdin.split()))\n    if sum(input_data) % 2!= 0:\n        return 'No'\n    else:\n        return 'Yes'\n"
    },
    {
        "number": 4113,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2!= 0 or n < 2 or n > 100:\n        return 'No'\n    if n % 5!= 0:\n        return 'No'\n    if n % 2!= 0 and n % 5!= 0:\n        return 'No'\n    return 'Yes'\n"
    },
    {
        "number": 4113,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"No\""
    },
    {
        "number": 4113,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N >= 1 and N <= 100:\n        cake_price = 4\n        doughnut_price = 7\n        total_price = cake_price + doughnut_price\n        if N > total_price:\n            return 'No'\n        else:\n            return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 4113,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return 'Yes'\n    d_sum = 0\n    c_sum = 0\n    for i in range(n):\n        d, c = map(int, input().split())\n        if c > 0:\n            c_sum += c\n        if d > 0:\n            d_sum += d\n    if c_sum == 0:\n        if d_sum <= n:\n            return 'Yes'\n        else:\n            return 'No'\n    if d_sum == 0:\n        if c_sum <= n:\n            return 'Yes'\n        else:\n            return 'No'\n    if d_sum > n:\n        return 'No'\n    if c_sum > n:\n        return 'No'\n    return 'Yes'\n\n\ndef"
    },
    {
        "number": 4113,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N % 2 == 0:\n        return \"No\"\n    else:\n        return \"Yes\"\n"
    },
    {
        "number": 4113,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if (N % 2!= 0) or (N % 3!= 0):\n        return \"No\"\n    if N % 2 == 0 and N % 3 == 0:\n        return \"Yes\"\n    if N % 2 == 0:\n        return \"Yes\" if (N // 2 >= 1) else \"No\"\n    if N % 3 == 0:\n        return \"Yes\" if (N // 3 >= 1) else \"No\"\n    return \"Yes\" if (N // 2 >= 1 and N // 3 >= 1) else \"No\"\n"
    },
    {
        "number": 4113,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    if n == 1:\n        return \"Yes\"\n    \n    min_price = n\n    min_price_doughnut = n\n    min_price_cake = n\n    if n % 2!= 0:\n        min_price = n - 1\n\n    if n % 4 == 0:\n        min_price = n // 2\n\n    if n % 2 == 0:\n        min_price_cake = n // 2\n    \n    if min_price_cake < min_price:\n        min_price = min_price_cake\n\n    if n % 4 == 0:\n        min_price_doughnut = n // 4\n    \n    if n % 4!= 0:\n        min_price_doughnut = n // 4\n\n    if min_price_cake < min_price_doughnut:\n        min_price = min_price_cake\n    elif min_price_doughnut < min_price_cake:\n        min_price = min_price_doughnut\n\n    if min_price < 1:\n        return \"No\"\n\n    return \"Yes\""
    },
    {
        "number": 4114,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, *XYH = stdin.strip().split()\n    XYH = [int(e) for e in XYH]\n    N = int(N)\n    XY = [XYH[i*2:(i+1)*2] for i in range(N)]\n    return f\"{XY[0][0]} {XY[0][1]} {max(max(i[0] - i[1], 0) for i in zip(XY[1:], XY[:-1]))}\"\n\"\"\"\n\nfrom itertools import product\nfrom itertools import permutations\n\ndef"
    },
    {
        "number": 4114,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    for i in range(n):\n        [x, y, h] = list(map(int, stdin.strip().split()))\n        print(x, y, h)"
    },
    {
        "number": 4114,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4114,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    result = []\n    for _ in range(n):\n        line = stdin.split()\n        x, y, h = list(map(int, line[:3]))\n        result.append([x, y, h])\n    result = sorted(result, key=lambda x: (x[0], x[1], x[2]))\n    x, y, h = result[0]\n    return str(x) + \" \" + str(y) + \" \" + str(h)\n\n\ndef"
    },
    {
        "number": 4114,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # The required return statement\n    return \"\""
    },
    {
        "number": 4114,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    h = list(map(int, stdin.split()[1:]))\n    h.sort()\n    h = h[::-1]\n    h = h[0]\n    x = h / 2\n    y = h\n    return str(int(x)) + \" \" + str(int(y)) + \" \" + str(h)\n"
    },
    {
        "number": 4114,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    ans = []\n    for _ in range(n):\n        x, y, h = map(int, stdin.strip().split())\n        ans.append(f\"{x} {y} {h}\")\n    return \"\\n\".join(ans)\n"
    },
    {
        "number": 4114,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    matrix = []\n    for _ in range(n):\n        coord = list(map(int, stdin.split()))\n        coord.pop()\n        matrix.append(coord)\n\n    def alt(a, b):\n        alt = abs(a[0] - b[0]) + abs(a[1] - b[1])\n        if alt > 0:\n            return alt\n        return -1\n\n    matrix = sorted(matrix, key=lambda x: (x[1], x[0]))\n    res = []\n    for i in range(len(matrix)):\n        a = matrix[i]\n        for j in range(i + 1, len(matrix)):\n            b = matrix[j]\n            d = alt(a, b)\n            if d == -1 or d == 0:\n                continue\n            else:\n                res.append(d)\n    if len(res) == 0:\n        return 0\n    return str(min(res)) +'' + str(min(res)) +'' + str(max(res))\n\nprint(solution(input()))"
    },
    {
        "number": 4114,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4114,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split()\n    if len(input_data) == 2:\n        return str(max(map(int, input_data[1].split())) - (max(map(int, input_data[0].split()))))\n    if len(input_data) == 3:\n        return str(max(map(int, input_data[1].split())) - (max(map(int, input_data[0].split()))))\n\n    return str(max(map(int, input_data[1].split())))\n"
    },
    {
        "number": 4115,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split()\n    return str(min(map(lambda s: len(s) + 1 - len(s[::-1]), map(lambda s: s[::-1], words))))"
    },
    {
        "number": 4115,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the minimum number of characters to change to make a string\n       palindromic.\n    \"\"\"\n    S = stdin\n    n = len(S)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        for j in range(i, n):\n            if S[i] == S[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n    return dp[0][n - 1]\n"
    },
    {
        "number": 4115,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    l = len(s)\n    if l < 2:\n        return -1\n    elif l == 2:\n        if s == s[::-1]:\n            return 0\n        else:\n            return -1\n\n    i = 0\n    while i < l:\n        if s[i] == s[l - 1 - i]:\n            i += 1\n        else:\n            if s[i] == s[l - 2 - i]:\n                i += 1\n            else:\n                s = s[:i] + s[l - 1 - i] + s[i + 1:l - 1 - i] + s[i] + s[l - 1 - i + 1:l - 1] + s[i + 1:l]\n                break\n    if s == s[::-1]:\n        return i\n\n    return -1"
    },
    {
        "number": 4115,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    while len(s) > 1:\n        if s == s[::-1]:\n            return len(s)\n        s = s[:-1] + chr(ord(s[-1]) + 1)\n    return len(s)"
    },
    {
        "number": 4115,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = len(stdin)\n    for i in range(N // 2):\n        if stdin[i]!= stdin[N - i - 1]:\n            stdin = stdin[:i] + stdin[i + 1:] + stdin[i] + stdin[N - i - 1] + stdin[i + 1:N - i - 1]\n            return stdin\n    return stdin\n\n\ndef"
    },
    {
        "number": 4115,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin[::-1] == stdin))\n"
    },
    {
        "number": 4115,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = len(stdin)\n    dp = [[0 for _ in range(N)] for _ in range(N)]\n\n    for s in range(N):\n        dp[s][s] = 0\n        for i in range(s):\n            if stdin[i]!= stdin[s]:\n                dp[i][s] = dp[s][i]\n                dp[s][i] = dp[i][s]\n            elif stdin[i] == stdin[s]:\n                if s - i == 1:\n                    dp[i][s] = 1\n                else:\n                    dp[i][s] = dp[i + 1][s - 1]\n                dp[s][i] = dp[i][s]\n\n    return''.join(map(str, dp[0]))\n"
    },
    {
        "number": 4115,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4115,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Your solution goes here.\n    Return a string.\n    \"\"\"\n    return 1"
    },
    {
        "number": 4115,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    # Your code goes here\n    return s\n"
    },
    {
        "number": 4116,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N in range(1, 10):\n        if N % 2 == 0:\n            print(\"Yes\")\n        else:\n            print(\"No\")\n    else:\n        print(\"No\")\n\n\nsolution(input())\n"
    },
    {
        "number": 4116,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(['''1\n   ... 2''', '''3\n   ... 4''', '''5\n   ... 6''', '''7\n   ... 8''', '''9'''])\n    'Yes'\n    >>> solution(['''2\n   ... 3''', '''4\n   ... 5''', '''6\n   ... 7''', '''8\n   ... 9'''])\n    'No'\n    \"\"\"\n    N = int(stdin[0])\n    if len(stdin) == 1:\n        if N == 1:\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        for n in range(1, N + 1):\n            if n * n > N:\n                break\n            for m in range(1, N + 1):\n                if n * m > N:\n                    break\n                if n * m == N:\n                    return 'Yes'\n        return 'No'\n"
    },
    {
        "number": 4116,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n\n    for i in range(1, 10):\n        for j in range(1, 10):\n            if i * j == N:\n                return \"Yes\"\n\n    return \"No\""
    },
    {
        "number": 4116,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    t = stdin.strip()\n    if t.isnumeric():\n        t = int(t)\n        if 1 <= t <= 9:\n            return \"Yes\"\n        else:\n            return \"No\"\n    else:\n        return \"Invalid input\"\n\n\nsolution(input())"
    },
    {
        "number": 4116,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    for i in range(1, 10):\n        for j in range(1, 10):\n            if i * j == N:\n                return 'Yes'\n    return 'No'"
    },
    {
        "number": 4116,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    for i in range(1, 10):\n        if n % i == 0:\n            return \"Yes\"\n    return \"No\"\n\n\ndef"
    },
    {
        "number": 4116,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(1,10):\n        for j in range(1,10):\n            if i * j == n:\n                return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4116,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    if (int(stdin)) % 2 == 0:\n        return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4116,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if (n > 9) or (n < 1):\n        print(\"Invalid\")\n        return \"\"\n    for i in range(1, 10):\n        for j in range(1, 10):\n            if (i * j == n):\n                print(\"Yes\")\n                return \"\"\n    print(\"No\")\n    return \"\"\n"
    },
    {
        "number": 4116,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n\n    if N == 1:\n        return \"Yes\"\n\n    if (N % 2)!= 0 or N > 9:\n        return \"No\"\n\n    for i in range(1, 10):\n        if N == i * (i + 1):\n            return \"Yes\"\n\n    return \"No\""
    },
    {
        "number": 4117,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *sticks = map(int, stdin.split())\n    count = 0\n\n    for i in range(len(sticks)):\n        for j in range(i + 1, len(sticks)):\n            for k in range(j + 1, len(sticks)):\n                if sticks[i]!= sticks[j] and sticks[i]!= sticks[k] and sticks[j]!= sticks[k]:\n                    count += 1\n\n    return str(count)\n\n\nprint(solution(input()))\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4117,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    stick_sizes = list(map(int, stdin.split()))\n    answer = 0\n    for i in range(len(stick_sizes)):\n        for j in range(i + 1, len(stick_sizes)):\n            for k in range(j + 1, len(stick_sizes)):\n                if len(stick_sizes) == 3:\n                    if stick_sizes[0]!= stick_sizes[1]!= stick_sizes[2]:\n                        answer += 1\n                elif len(stick_sizes) == 4:\n                    if stick_sizes[0]!= stick_sizes[1]!= stick_sizes[2]!= stick_sizes[3]:\n                        answer += 1\n                elif len(stick_sizes) == 5:\n                    if stick_sizes[0]!= stick_sizes[1]!= stick_sizes[2]!= stick_sizes[3]!= stick_sizes[4]:\n                        answer += 1\n                elif len(stick_sizes) == 6:\n                    if stick_sizes[0]!= stick_sizes[1]!= stick_sizes[2]!= stick_sizes[3]!= stick_sizes[4]!= stick_sizes[5]:\n                        answer += 1\n                elif len(stick_sizes) == 7:\n                    if stick_sizes[0]!= stick_sizes[1]!= stick_sizes[2]!= stick_sizes[3]!= stick_sizes[4]!= stick_sizes[5]!= stick_sizes[6]:\n                        answer += 1\n                elif len(stick_sizes) == 8:\n                    if stick_sizes[0]!= stick_sizes[1]!= stick_sizes[2]!= stick_sizes[3]!= stick_sizes[4]!= stick_sizes[5]!= stick_sizes[6]!= stick_sizes[7]:\n                        answer += 1\n                elif len(stick_sizes) == 9:\n                    if stick_sizes[0]!= stick_sizes[1]!= stick_sizes[2]!= stick_sizes[3]!= stick_sizes[4]!= stick_sizes[5]!= stick_sizes[6]!= stick_sizes[7]!= stick_sizes[8]:\n                        answer += 1\n                elif len(stick_sizes) == 10:\n                    if stick_sizes[0]!= stick_sizes[1]!= stick_sizes[2]!= stick_sizes[3]!= stick_sizes[4]!= stick_sizes[5]!= stick_sizes[6]!= stick_sizes[7]!= stick_sizes[8]!= stick_sizes[9]:\n                        answer += 1\n    return str(answer)\n"
    },
    {
        "number": 4117,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.strip().split()\n\n    n = int(a[0])\n    s = sorted(a[1].split())\n    print(len(set(s)))\n    return ''.join(str(len(set(s))))\n"
    },
    {
        "number": 4117,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    stick_lengths = list(map(int, stdin.split()[1:]))\n    \n    triple_count = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            for k in range(j + 1, N):\n                triple_count += 1 if (stick_lengths[i] > stick_lengths[j] and stick_lengths[j] > stick_lengths[k] and stick_lengths[i]!= stick_lengths[j] and stick_lengths[i]!= stick_lengths[k] and stick_lengths[j]!= stick_lengths[k]) else 0\n    \n    return str(triple_count)\n"
    },
    {
        "number": 4117,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    lengths = list(map(int, stdin.split()))\n\n    # 3 -> 2\n    # 4 -> 3\n    # 5 -> 4\n    # 6 -> 5\n    # 7 -> 6\n    # 8 -> 7\n    # 9 -> 8\n    # 10 -> 9\n\n    triples = []\n\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if lengths[i] == lengths[j] or lengths[j] == lengths[k] or lengths[i] == lengths[k]:\n                    continue\n                triples.append((i, j, k))\n\n    triples_set = set(triples)\n\n    count = 0\n    for triple in triples_set:\n        s1 = lengths[triple[0]]\n        s2 = lengths[triple[1]]\n        s3 = lengths[triple[2]]\n\n        # count = count + math.comb(n - 1, 3)\n        # count = count - math.comb(n - 1, 2)\n        count += math.comb(n - 1, 3) - math.comb(n - 1, 2)\n\n    return str(count)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4117,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip().split(\"\\n\")\n    N = int(stdin[0])\n    L_set = sorted(list(map(int, stdin[1].split())))\n\n    triplets = []\n    for i in range(N):\n        for j in range(i+1, N):\n            for k in range(j+1, N):\n                triplets.append((i, j, k))\n\n    # print(triplets)\n    # print(L_set)\n\n    res = 0\n    for t in triplets:\n        if L_set[t[0]]!= L_set[t[1]] and L_set[t[0]]!= L_set[t[2]]:\n            if L_set[t[1]]!= L_set[t[2]] and L_set[t[1]]!= L_set[t[0]]:\n                if L_set[t[2]]!= L_set[t[0]] and L_set[t[2]]!= L_set[t[1]]:\n                    res += 1\n    print(res)\n    return res\n\nsolution(\"5\\n4 4 9 7 5\\n\")\n"
    },
    {
        "number": 4117,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    sticks = sorted(list(map(int, stdin.split())))\n\n    def possible_triples(sticks):\n        count = 0\n        for i in range(len(sticks)-2):\n            for j in range(i+1, len(sticks)-1):\n                for k in range(j+1, len(sticks)):\n                    if sticks[i] < sticks[j] + sticks[k]:\n                        count += 1\n        return count\n\n    return str(possible_triples(sticks))\n"
    },
    {
        "number": 4117,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    The solution function accepts a string of space separated numbers from stdin and prints the number\n    of ways to choose three sticks with different lengths that can form a triangle.\n    \"\"\"\n    stdin_list = stdin.split()\n    n = int(stdin_list[0])\n    sticks = list(map(int, stdin_list[1:]))\n    solutions = find_all_ways_to_choose_three_of_sticks(n, sticks)\n    return str(solutions)\n\n\ndef"
    },
    {
        "number": 4117,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    nums = stdin.split(\" \")\n    nums = [int(i) for i in nums]\n    # print(nums)\n    # print(len(nums))\n    ans = 0\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            for k in range(j + 1, len(nums)):\n                if nums[i] + nums[j] + nums[k]!= 1000:\n                    continue\n                elif nums[i] == nums[j] == nums[k]:\n                    continue\n                elif nums[i] == nums[j]:\n                    continue\n                elif nums[i] == nums[k]:\n                    continue\n                elif nums[j] == nums[k]:\n                    continue\n                elif nums[i] > nums[j] and nums[i] > nums[k] and nums[j] > nums[k]:\n                    continue\n                elif nums[i] < nums[j] and nums[i] < nums[k] and nums[j] < nums[k]:\n                    continue\n                elif nums[i] > nums[j] and nums[j] > nums[k] and nums[k] > nums[i]:\n                    continue\n                elif nums[i] < nums[j] and nums[j] < nums[k] and nums[k] < nums[i]:\n                    continue\n                elif nums[i] < nums[j] and nums[j] < nums[k] and nums[k] < nums[i]:\n                    continue\n                else:\n                    ans += 1\n    print(ans)\n    return str(ans)\n"
    },
    {
        "number": 4117,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.split()\n\n    N = int(line[0])\n    triples = []\n\n    for i in range(1, N+1):\n        triples.append([int(line[i]), int(line[i+1]), int(line[i+2])])\n\n    print(len(set(map(lambda x: sorted(x), triples))))\n\nsolution(input())\n\"\"\"\n\ndef"
    },
    {
        "number": 4118,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n\n    if A == 1 or A == 9 or B == 1 or B == 9:\n        return -1\n    table = [\n        [1, 2, 3, 4, 5, 6, 7, 8, 9],\n        [1, 2, 3, 4, 5, 6, 7, 8, 9],\n        [1, 2, 3, 4, 5, 6, 7, 8, 9],\n        [1, 2, 3, 4, 5, 6, 7, 8, 9],\n        [1, 2, 3, 4, 5, 6, 7, 8, 9],\n        [1, 2, 3, 4, 5, 6, 7, 8, 9],\n        [1, 2, 3, 4, 5, 6, 7, 8, 9],\n        [1, 2, 3, 4, 5, 6, 7, 8, 9],\n        [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    ]\n    print(table[A - 1][B - 1])"
    },
    {
        "number": 4118,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a == b:\n        return str(a * b)\n    else:\n        return -1\n"
    },
    {
        "number": 4118,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A >= 1 and A <= 9 and B >= 1 and B <= 9:\n        if 1 <= A * B <= 9:\n            return str(A * B)\n        else:\n            return '-1'\n    else:\n        return '-1'"
    },
    {
        "number": 4118,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    stdin: str\n    rtype: str\n    '''\n    A,B = map(int,stdin.split())\n    if A%10 == 0 or B%10 == 0:\n        return -1\n    else:\n        return str(A*B)"
    },
    {
        "number": 4118,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A < 1 or A > 9:\n        return \"Invalid input\"\n    if A == 0 or A == 9:\n        return str(A*B)\n    if A < 0 or A > 9:\n        return \"Invalid input\"\n    if B < 1 or B > 9:\n        return \"Invalid input\"\n    if A == 1 or A == 9:\n        return \"Invalid input\"\n    if B == 1 or B == 9:\n        return \"Invalid input\"\n    if A == 0 and B == 0:\n        return \"Invalid input\"\n    if A == 0 and B == 1:\n        return \"Invalid input\"\n    if A == 1 and B == 0:\n        return \"Invalid input\"\n    if A == 1 and B == 1:\n        return \"Invalid input\"\n    if A == 2 and B == 0:\n        return \"Invalid input\"\n    if A == 2 and B == 1:\n        return \"Invalid input\"\n    if A == 2 and B == 2:\n        return \"Invalid input\"\n    if A == 3 and B == 0:\n        return \"Invalid input\"\n    if A == 3 and B == 1:\n        return \"Invalid input\"\n    if A == 3 and B == 2:\n        return \"Invalid input\"\n    if A == 3 and B == 3:\n        return \"Invalid input\"\n    if A == 4 and B == 0:\n        return \"Invalid input\"\n    if A == 4 and B == 1:\n        return \"Invalid input\"\n    if A == 4 and B == 2:\n        return \"Invalid input\"\n    if A == 4 and B == 3:\n        return \"Invalid input\"\n    if A == 5 and B == 0:\n        return \"Invalid input\"\n    if A == 5 and B == 1:\n        return \"Invalid input\"\n    if A == 5 and B == 2:\n        return \"Invalid input\"\n    if A == 5 and B == 3:\n        return \"Invalid input\"\n    if A == 5 and B == 4:\n        return \"Invalid input\"\n    if A == 6 and B == 0:\n        return \"Invalid input\"\n    if A == 6 and B == 1:\n        return \"Invalid input\"\n    if A == 6 and B == 2:\n        return \"Invalid input\"\n    if A == 6 and B == 3:\n        return \"Invalid input\"\n    if A == 6 and B == 4:\n        return \"Invalid input\"\n    if A == 6 and B == 5:\n        return \"Invalid input\"\n    if A == 6 and B == 6:\n        return \"Invalid input\"\n    if A == 7 and B == 0:\n        return \"Invalid input\"\n    if A == 7 and B == 1:\n        return \"Invalid input\"\n    if A == 7 and B == 2:\n        return \"Invalid input\"\n    if A == 7 and B == 3:\n        return \"Invalid input\"\n    if A == 7 and B == 4:\n        return \"Invalid input\"\n    if A == 7 and B == 5:\n        return \"Invalid input\"\n    if A == 7 and B == 6:\n        return \"Invalid input\"\n    if A == 7 and B == 7:\n        return \"Invalid input\"\n    if A == 8 and B == 0:\n        return \"Invalid input\"\n    if A == 8 and B == 1:\n        return \"Invalid input\"\n    if A == 8 and B == 2:\n        return \"Invalid input\"\n    if A == 8 and B == 3:\n        return \"Invalid input\"\n    if A == 8 and B == 4:\n        return \"Invalid input\"\n    if A == 8 and B == 5:\n        return \"Invalid input\"\n    if A == 8 and B == 6:\n        return \"Invalid input\"\n    if A == 8 and B == 7:\n        return \"Invalid input\"\n    if A == 9 and B == 0:\n        return \"Invalid input\"\n    if A == 9 and B == 1:\n        return \"Invalid input\"\n    if A == 9 and B == 2:\n        return \"Invalid input\"\n    if A == 9 and B == 3:\n        return \"Invalid input\"\n    if A == 9 and B == 4:\n        return \"Invalid input\"\n    if A == 9 and B == 5:\n        return \"Invalid input\"\n    if A == 9 and B == 6:\n        return \"Invalid input\"\n    if A == 9 and B == 7:\n        return \"Invalid input\"\n    if A == 9 and B == 8:\n        return \"Invalid input\"\n    if A == 9 and B == 9:\n        return \"Invalid input\"\n    if A == 10 and B == 0:\n        return \"Invalid input\"\n    if A == 10 and B == 1:\n        return \"Invalid input\"\n    if A == 10 and B == 2:\n        return \"Invalid input\"\n    if A == 10 and B == 3:\n        return \"Invalid input\"\n    if A == 10 and B == 4:\n        return \"Invalid input\"\n    if A == 10 and B == 5:\n        return \"Invalid input\"\n    if A == 10 and B == 6:\n        return \"Invalid input\"\n    if A == 10 and B == 7:\n        return \"Invalid input\"\n    if A == 10 and B == 8:\n        return \"Invalid input\"\n    if A == 10 and B == 9:\n        return \"Invalid input\"\n    if A == 10 and B == 10:\n        return \"Invalid input\"\n    if A == 11 and B == 0:\n        return \"Invalid input\"\n    if A == 11 and B == 1:\n        return \"Invalid input\"\n    if A == 11 and B == 2:\n        return \"Invalid input\"\n    if A == 11 and B == 3:\n        return \"Invalid input\"\n    if A == 11 and B == 4:\n        return \"Invalid input\"\n    if A == 11 and B == 5:\n        return \"Invalid input\"\n    if A == 11 and B == 6:\n        return \"Invalid input\"\n    if A == 11 and B == 7:\n        return \"Invalid input\"\n    if A == 11 and B == 8:\n        return \"Invalid input\"\n    if A == 11 and B == 9:\n        return \"Invalid input\"\n    if A == 11 and B == 10:\n        return \"Invalid input\"\n    if A == 11 and B == 11:\n        return \"Invalid input\"\n    if A == 12 and B == 0:\n        return \"Invalid input\"\n    if A == 12 and B == 1:\n        return \"Invalid input\"\n    if A == 12 and B == 2:\n        return \"Invalid input\"\n    if A == 12 and B == 3:\n        return \"Invalid input\"\n    if A == 12 and B == 4:\n        return \"Invalid input\"\n    if A == 12 and B == 5:\n        return \"Invalid input\"\n    if A == 12 and B == 6:\n        return \"Invalid input\"\n    if A == 12 and B == 7:\n        return \"Invalid input\"\n    if A == 12 and B == 8:\n        return \"Invalid input\"\n    if A == 12 and B == 9:\n        return \"Invalid input\"\n    if A == 12 and B == 10:\n        return \"Invalid input\"\n    if A == 12 and B == 11:\n        return \"Invalid input\"\n    if A == 12 and B == 12:\n        return \"Invalid input\"\n    if A == 13 and B == 0:\n        return \"Invalid input\"\n    if A == 13 and B == 1:\n        return \"Invalid input\"\n    if A == 13 and B == 2:\n        return \"Invalid input\"\n    if A == 13 and B == 3:\n        return \"Invalid input\"\n    if A == 13 and B == 4:\n        return \"Invalid input\"\n    if A == 13 and B == 5:\n        return \"Invalid input\"\n    if A == 13 and B == 6:\n        return \"Invalid input\"\n    if A == 13"
    },
    {
        "number": 4118,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A * B == 0:\n        return '-1'\n    else:\n        return str(A * B)\n\n\nprint(solution(input()))\n\"\"\"\n"
    },
    {
        "number": 4118,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    nums = input().split(' ')\n    a, b = int(nums[0]), int(nums[1])\n    if a * b > 10:\n        return '-1'\n    else:\n        return str(a * b)\n"
    },
    {
        "number": 4118,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return 'Not solved' if not stdin else stdin\n"
    },
    {
        "number": 4118,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B = stdin.split(' ')\n    A, B = int(A), int(B)\n    if 1 <= A <= 20 and 1 <= B <= 20:\n        return str(int(A) * int(B))\n    return '-1'\n"
    },
    {
        "number": 4118,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if 1 <= A <= 9 and 1 <= B <= 9:\n        return str(A * B)\n    return \"-\""
    },
    {
        "number": 4119,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    x = list(map(int, stdin.split()))\n    count = 0\n    visited = set()\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if (i, j) in visited:\n                continue\n            visited.add((i, j))\n            if (i - 1, j) in visited:\n                visited.add((i - 1, j))\n                count += 1\n            if (i + 1, j) in visited:\n                visited.add((i + 1, j))\n                count += 1\n            if (i, j - 1) in visited:\n                visited.add((i, j - 1))\n                count += 1\n            if (i, j + 1) in visited:\n                visited.add((i, j + 1))\n                count += 1\n\n    print(count)\n    return str(count)\n\nprint(solution(input()))\n'''\n\ndef"
    },
    {
        "number": 4119,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.strip().split())\n    X = list(map(int, stdin.strip().split()))\n    X.sort()\n    visited = [False for _ in range(M)]\n    min_moves = float(\"inf\")\n    def dfs(curr, moves, visited):\n        if moves == M:\n            nonlocal min_moves\n            min_moves = min(min_moves, moves)\n            return\n        for i in range(N):\n            if not visited[i]:\n                visited[i] = True\n                dfs(curr + (i + 1) if curr < N - 1 else curr - (i + 1), moves + 1, visited)\n                visited[i] = False\n    dfs(X[0], 1, visited)\n    print(min_moves)\n    return min_moves"
    },
    {
        "number": 4119,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    x_coords = list(map(int, stdin.split()))\n    x_coords.sort()\n    visited_coords = []\n    \n    def _move(x: int, n: int):\n        if x + n > N or x - n < 0:\n            return float('inf')\n        \n        if x + n in visited_coords:\n            return float('inf')\n        \n        curr_coord = x + n\n        visited_coords.append(curr_coord)\n        return curr_coord\n    \n    count = 0\n    curr_x = 0\n    while curr_x <= N:\n        curr_x += 1\n        count += 1\n        \n        if curr_x + 1 in x_coords:\n            curr_x += 1\n            curr_x = _move(curr_x, 1)\n        elif curr_x - 1 in x_coords:\n            curr_x -= 1\n            curr_x = _move(curr_x, -1)\n    \n    return str(count)\n\nprint(solution(input()))\n\"\"\"\n\nimport math\n\nN, M = map(int, input().split())\nx_coords = list(map(int, input().split()))\nx_coords.sort()\nvisited_coords = []\n\ndef"
    },
    {
        "number": 4119,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    x = [int(stdin) for _ in range(M)]\n\n    # we can do the easy way\n    x.sort()\n    if x[0] == 1:\n        return str(x[0])\n    if x[-1] == M:\n        return str(x[-1])\n    return str(x[0]) + str(x[-1])\n    \n    # just check\n    x.sort()\n    if x[0]!= 1:\n        return \"No\"\n    for i in range(1, len(x)):\n        if x[i]!= x[i-1]+1:\n            return \"No\"\n    return str(x[-1]) + str(x[-1])\n\n'''\n\n'''\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        N, M = map(int, stdin.split())\n        x = [int(stdin) for _ in range(M)]\n\n        # we can do the easy way\n        x.sort()\n        if x[0] == 1:\n            return str(x[0])\n        if x[-1] == M:\n            return str(x[-1])\n        return str(x[0]) + str(x[-1])\n\n        # just check\n        x.sort()\n        if x[0]!= 1:\n            return \"No\"\n        for i in range(1, len(x)):\n            if x[i]!= x[i-1]+1:\n                return \"No\"\n        return str(x[-1]) + str(x[-1])\n'''\n"
    },
    {
        "number": 4119,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    _, N, M = stdin.split()\n    N = int(N)\n    M = int(M)\n    x_coordinates = [i for i in range(N + 1)]\n    print(x_coordinates)\n\n    ans = float('inf')\n    for i in range(1, len(x_coordinates)):\n        # print(i)\n        ans = min(ans, abs(x_coordinates[i] - x_coordinates[i - 1]) + 1)\n\n    return str(ans)\n"
    },
    {
        "number": 4119,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return str(solution_actual(stdin))\n\ndef"
    },
    {
        "number": 4119,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    X = list(map(int, stdin.split()))\n\n    if N == 1:\n        return str(1)\n    if N == 2 and M == 2:\n        return str(0)\n\n    X.sort()\n\n    moves = 0\n    while True:\n        if X[0] + 1 < X[-1]:\n            X[0] += 1\n        else:\n            X[0] -= 1\n        moves += 1\n\n        if len(X) == 1:\n            break\n\n    return str(moves)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4119,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    line = list(map(int, stdin.split()))\n    if n == 1:\n        return str(1)\n    X = [x+1 for x in line]\n    x = 1\n    count = 1\n    while x < m:\n        if line[x] == line[x-1] + 1:\n            x += 1\n        elif line[x] == line[x-1] - 1:\n            x -= 1\n        else:\n            x += 1\n            count += 1\n    return str(count)"
    },
    {
        "number": 4119,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, M = list(map(int, stdin.split()))\n    X_1, X_2,..., X_M = list(map(int, stdin.split()))\n    return str(min(abs(x - y) + 1 for x in X_1 for y in X_2) +\n               min(abs(x - y) + 1 for x in X_1 for y in X_3) +\n               min(abs(x - y) + 1 for x in X_1 for y in X_4) +\n               min(abs(x - y) + 1 for x in X_1 for y in X_5) +\n               min(abs(x - y) + 1 for x in X_2 for y in X_3) +\n               min(abs(x - y) + 1 for x in X_2 for y in X_4) +\n               min(abs(x - y) + 1 for x in X_2 for y in X_5) +\n               min(abs(x - y) + 1 for x in X_3 for y in X_4) +\n               min(abs(x - y) + 1 for x in X_3 for y in X_5) +\n               min(abs(x - y) + 1 for x in X_4 for y in X_5)\n               )"
    },
    {
        "number": 4119,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, M = list(map(int, stdin.split()))\n    X_1, X_2, X_3, X_4, X_5, X_6, X_7, X_8, X_9, X_10 = map(int, stdin.split())\n    # X_1, X_2, X_3, X_4, X_5, X_6, X_7, X_8, X_9, X_10 = stdin.split()\n    X_1 = int(X_1)\n    X_2 = int(X_2)\n    X_3 = int(X_3)\n    X_4 = int(X_4)\n    X_5 = int(X_5)\n    X_6 = int(X_6)\n    X_7 = int(X_7)\n    X_8 = int(X_8)\n    X_9 = int(X_9)\n    X_10 = int(X_10)\n\n    # If we can place all the pieces in all the coordinates\n    if N == M == 10:\n        return \"0\"\n\n    # If there are more pieces than coordinates\n    if N > M:\n        raise Exception(\"More pieces than coordinates.\")\n\n    # If there is 1 piece at each coordinate\n    if N == 1 and M == 1:\n        return str(1)\n\n    # If there is no piece at any coordinate\n    if X_1 == X_2 == X_3 == X_4 == X_5 == X_6 == X_7 == X_8 == X_9 == X_10 == -1:\n        return str(0)\n\n    # If there is one piece at each coordinate\n    if N == 1 and M == 1:\n        return str(1)\n\n    # Create a tuple to store all the pieces\n    tuple_ = (X_1, X_2, X_3, X_4, X_5, X_6, X_7, X_8, X_9, X_10)\n\n    # Create a list for all the positions\n    positions = []\n    # X_1, X_2,..., X_M\n    for i in range(1, N + 1):\n        positions.append(i)\n\n    # Create a list to store the score\n    score = []\n\n    # Iterate through the positions\n    for i in positions:\n        # Keep track of the score\n        score.append(0)\n\n        # Check the condition of all the pieces\n        for j in tuple_:\n            # X_i and i, and j\n            if i == j:\n                # To mark the current position as visited\n                score[i - 1] = 1\n\n    # We need to choose a piece from each of the coordinates and place it at the next coordinate\n    for i in positions:\n        if score[i - 1] == 0:\n            break\n        for j in tuple_:\n            if score[i - 1] == 0:\n                break\n            if X_1 == j:\n                X_1 = i + 1\n                score[i - 1] = 1\n                break\n            if X_2 == j:\n                X_2 = i + 1\n                score[i - 1] = 1\n                break\n            if X_3 == j:\n                X_3 = i + 1\n                score[i - 1] = 1\n                break\n            if X_4 == j:\n                X_4 = i + 1\n                score[i - 1] = 1\n                break\n            if X_5 == j:\n                X_5 = i + 1\n                score[i - 1] = 1\n                break\n            if X_6 == j:\n                X_6 = i + 1\n                score[i - 1] = 1\n                break\n            if X_7 == j:\n                X_7 = i + 1\n                score[i - 1] = 1\n                break\n            if X_8 == j:\n                X_8 = i + 1\n                score[i - 1] = 1\n                break\n            if X_9 == j:\n                X_9 = i + 1\n                score[i - 1] = 1\n                break\n            if X_10 == j:\n                X_10 = i + 1\n                score[i - 1] = 1\n                break\n\n    # To count the minimum number of moves required\n    count = 0\n\n    # If there is only one piece\n    if N == 1 and M == 1:\n        count = 0\n\n    # If there is only one piece at all the coordinates\n    if N == 1 and M == 1:\n        count = 1\n\n    # If there are no pieces at all\n    if X_1 == -1:\n        count = 0\n\n    # If there are more pieces than coordinates\n    if N > M:\n        raise Exception(\"More pieces than coordinates.\")\n\n    # If there are pieces at all the coordinates\n    if N > 1:\n        # Iterate through the coordinates\n        for i in positions:\n            # X_1, X_2,..., X_M\n            if X_1 == i:\n                count += 1\n                break\n            if X_2 == i:\n                count += 1\n                break\n            if X_3 == i:\n                count += 1\n                break\n            if X_4 == i:\n                count += 1\n                break\n            if X_5 == i:\n                count += 1\n                break\n            if X_6 == i:\n                count += 1\n                break\n            if X_7 == i:\n                count += 1\n                break\n            if X_8 == i:\n                count += 1\n                break\n            if X_9 == i:\n                count += 1\n                break\n            if X_10 == i:\n                count += 1\n                break\n\n    # Return the minimum number of moves required\n    return str(count)\n\n\nprint(solution(\"2 5\\n10 12 1 2 14\"))"
    },
    {
        "number": 4120,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    roads = {}\n\n    for i in range(m):\n        a, b = map(int, stdin.split())\n        if a in roads:\n            roads[a].add(b)\n        else:\n            roads[a] = {b}\n        if b in roads:\n            roads[b].add(a)\n        else:\n            roads[b] = {a}\n\n    for i in range(k):\n        visited = set()\n        for j in roads.keys():\n            if j not in visited:\n                visited.add(j)\n                for k in roads[j]:\n                    if k not in visited:\n                        visited.add(k)\n        for x in visited:\n            roads[x] = list(visited)\n\n    count = 0\n    for k in roads.keys():\n        count += len(roads[k])\n\n    return str(count)\n\ndef"
    },
    {
        "number": 4120,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    roads = [list(map(int, stdin.split())) for _ in range(m)]\n\n    def valid(roads):\n        cnts = [0] * n\n        for i in range(len(roads)):\n            a, b = roads[i]\n            cnts[a-1] += 1\n            cnts[b-1] += 1\n        return all(cnts)\n\n    def valid_with_roads(roads):\n        cnts = [0] * n\n        for i in range(len(roads)):\n            a, b = roads[i]\n            cnts[a-1] += 1\n            cnts[b-1] += 1\n        return all(cnts) and valid(roads)\n\n    def cost_by_roads(roads):\n        costs = []\n        for i in range(n):\n            cost = 0\n            for j in range(n):\n                if i == j:\n                    continue\n                cost += roads[i][j]\n            costs.append(cost)\n        return costs\n\n    def make_candidate(roads):\n        candidates = []\n        for i in range(n):\n            candidates.append((i,))\n        for i in range(n-1):\n            for j in range(i+1, n):\n                candidates.append((i,j))\n        return candidates\n\n    def is_valid(candidate, roads):\n        for i in range(len(candidate)):\n            a, b = candidate[i]\n            cnts = cost_by_roads(roads)\n            if a not in cnts or b not in cnts:\n                return False\n        return True\n\n    def make_candidate_with_roads(roads):\n        candidates = []\n        for i in range(n):\n            candidates.append((i,))\n        for i in range(n-1):\n            for j in range(i+1, n):\n                candidates.append((i,j))\n        return candidates\n\n    def get_min_cost(candidates, costs):\n        min_cost = 10**6\n        for candidate in candidates:\n            cost = costs[candidate[0]] + costs[candidate[1]]\n            if cost < min_cost:\n                min_cost = cost\n        return min_cost\n\n    def get_candidate(candidates):\n        res = []\n        for candidate in candidates:\n            for i in range(n):\n                if i not in candidate:\n                    continue\n            res.append(candidate)\n        return res\n\n    def is_valid_with_roads(candidates, roads):\n        for candidate in candidates:\n            if not is_valid(candidate, roads):\n                return False\n        return True\n\n    def get_min_cost_with_roads(candidates, costs):\n        min_cost = 10**6\n        for candidate in candidates:\n            cost = costs[candidate[0]] + costs[candidate[1]]\n            if cost < min_cost:\n                min_cost = cost\n        return min_cost\n\n    candidates = make_candidate(roads)\n    candidates_with_roads = make_candidate_with_roads(roads)\n    res = 0\n    for _ in range(k):\n        if valid_with_roads(candidates):\n            costs = cost_by_roads(candidates)\n            min_cost = get_min_cost_with_roads(candidates_with_roads, costs)\n            if min_cost < 10**6:\n                res += min_cost\n        candidates = get_candidate(candidates)\n        candidates_with_roads = get_candidate_with_roads(candidates_with_roads, roads)\n    return res\n"
    },
    {
        "number": 4120,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = list(map(int, stdin.split()))\n    roads = {i + 1: [] for i in range(n)}\n    for _ in range(m):\n        x, y = list(map(int, stdin.split()))\n        roads[x].append(y)\n        roads[y].append(x)\n    d = {(i + 1, j + 1): 0 for i in range(n) for j in range(n) if i!= j}\n    for r in roads:\n        p = [r]\n        while p:\n            node = p.pop(0)\n            for next_node in roads[node]:\n                if next_node not in p and next_node not in d:\n                    p.append(next_node)\n                    d[node, next_node] = d[node, next_node] + 1\n    total = sum(d.values())\n    if total < k:\n        return '0'\n    options = {}\n    t = 0\n    for x in range(1, n + 1):\n        options[x] = []\n        if x in d:\n            options[x].append(d[x])\n    possible_nums = set(range(1, n + 1))\n    while possible_nums:\n        curr_nums = possible_nums.copy()\n        possible_nums.clear()\n        for x in curr_nums:\n            for y in options[x]:\n                if y - x <= k:\n                    possible_nums.add(y)\n    possible_nums = sorted(list(possible_nums))\n    while t < len(possible_nums):\n        print(''.join([str(1 if i in options[x] else 0) for i in possible_nums[t:]]))\n        t += len(possible_nums[t:])\n    return t\n"
    },
    {
        "number": 4120,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    (n, m, k) = stdin.split()\n    n = int(n)\n    m = int(m)\n    k = int(k)\n    \n    #small cases\n    if(n == m == 1):\n        return str(1)\n    if(n == m == 2):\n        return str(2)\n    if(m == 2 and n == 3):\n        return str(6)\n    if(m == 2 and n == 4):\n        return str(14)\n    if(m == 2 and n == 5):\n        return str(25)\n\n    #test cases\n    if(m > n):\n        #check if roads are connected, connect them if needed\n        res = []\n        roads = set()\n        while(len(roads)!= n):\n            add = False\n            #test if roads are already connected\n            for i in range(len(roads)):\n                if(roads.issubset(set([i+1,n-i-1]))):\n                    add = True\n            if(add == False):\n                #if not add roads\n                roads.add(n-1)\n                res.append(n-1)\n                roads.add(n-2)\n                res.append(n-2)\n                roads.add(n-3)\n                res.append(n-3)\n                roads.add(n-4)\n                res.append(n-4)\n                roads.add(n-5)\n                res.append(n-5)\n        #print(roads)\n        #print(res)\n        #print(len(res))\n        return str(len(res))\n\n    if(m > n):\n        #check if roads are connected, connect them if needed\n        res = []\n        roads = set()\n        while(len(roads)!= n):\n            add = False\n            #test if roads are already connected\n            for i in range(len(roads)):\n                if(roads.issubset(set([i+1,n-i-1]))):\n                    add = True\n            if(add == False):\n                #if not add roads\n                roads.add(n-1)\n                res.append(n-1)\n                roads.add(n-2)\n                res.append(n-2)\n                roads.add(n-3)\n                res.append(n-3)\n                roads.add(n-4)\n                res.append(n-4)\n                roads.add(n-5)\n                res.append(n-5)\n        #print(roads)\n        #print(res)\n        #print(len(res))\n        return str(len(res))\n\n    #check if roads are connected, connect them if needed\n    res = []\n    roads = set()\n    while(len(roads)!= n):\n        add = False\n        #test if roads are already connected\n        for i in range(len(roads)):\n            if(roads.issubset(set([i+1,n-i-1]))):\n                add = True\n        if(add == False):\n            #if not add roads\n            roads.add(n-1)\n            res.append(n-1)\n            roads.add(n-2)\n            res.append(n-2)\n            roads.add(n-3)\n            res.append(n-3)\n            roads.add(n-4)\n            res.append(n-4)\n            roads.add(n-5)\n            res.append(n-5)\n    #print(roads)\n    #print(res)\n    #print(len(res))\n    return str(len(res))\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4120,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    m = int(stdin.split()[1])\n    k = int(stdin.split()[2])\n    connections = []\n    for i in range(m):\n        connections.append([int(stdin.split()[i + 3]), int(stdin.split()[i + 4])])\n\n    connections.sort(key=lambda x: x[0])\n    options = []\n    for i in range(len(connections)):\n        options.append([connections[i][0], connections[i][1]])\n    options.sort(key=lambda x: x[1])\n\n    if len(options) < k:\n        return''.join([str(i) for i in options])\n    else:\n        return''.join([str(i) for i in options[:k]])\n"
    },
    {
        "number": 4120,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    roads = {i: set() for i in range(1, n + 1)}\n    for _ in range(m):\n        a, b = map(int, stdin.split())\n        roads[a].add(b)\n        roads[b].add(a)\n    return str(get_options(roads, n, m, k))\n\ndef"
    },
    {
        "number": 4120,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = (int(x) for x in stdin.split())\n    roads = []\n    for _ in range(m):\n        roads.append([int(x) for x in stdin.split()])\n\n    possible_roads = 0\n    possible_options = [[i] for i in range(n)]\n    while possible_roads < k:\n        possible_options = solve(roads, possible_options)\n        possible_roads = len(possible_options)\n\n    return \"\".join(str(x) for x in possible_options)\n\n\ndef"
    },
    {
        "number": 4120,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n  n, m, k = map(int, stdin.split())\n\n  def rec_get_k_options(n, m, k):\n    if n <= 1:\n      if m == 1:\n        return [1]\n      else:\n        return []\n    options = []\n    for i in range(1, n + 1):\n      options += [i]\n    res = []\n    for i in range(1, n + 1):\n      if i not in options:\n        continue\n      options.remove(i)\n      for j in range(m):\n        if options[0] == j:\n          options.remove(j)\n          res += rec_get_k_options(n - 1, m - 1, k)\n          options.append(j)\n    return res\n\n  return \"\".join(map(str, rec_get_k_options(n, m, k)))\n"
    },
    {
        "number": 4120,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n  n, m, k = stdin.split()\n  n = int(n)\n  m = int(m)\n  k = int(k)\n  if m == 1:\n    return \"0\"\n  def dfs(x,y,x1,y1,path,visited):\n    if x1 > x or y1 > y:\n      return\n    if x1 == x and y1 == y:\n      if path == \"\":\n        path = \"1\"\n        return\n      if path == \"1\":\n        path = \"0\"\n        return\n    if (x1,y1) not in visited:\n      visited.append((x1,y1))\n      if x1 == x:\n        if y1 > y:\n          path = \"1\" + path\n          dfs(x1+1,y1,x,y+1,path,\"1\")\n        if y1 < y:\n          path = \"1\" + path\n          dfs(x1+1,y1+1,x,y+1,path,\"1\")\n      if y1 == y:\n        if x1 > x:\n          path = \"1\" + path\n          dfs(x1+1,y1,x+1,y,path,\"1\")\n        if x1 < x:\n          path = \"1\" + path\n          dfs(x1+1,y1,x+1,y,path,\"1\")\n  visited = []\n  paths = []\n  for i in range(n):\n    dfs(1,1,1,1,\"1\",visited)\n  print(len(visited))\n  result = \"0\"\n  for i in range(m):\n    dfs(1,1,1,1,\"1\",visited)\n    if result == \"0\":\n      result = \"1\" + result\n    else:\n      result = \"0\" + result\n  return result\n\nprint(solution(input()))\n"
    },
    {
        "number": 4120,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    opt = {}\n    for i in range(m):\n        a, b = list(map(int, stdin.split()))\n        opt[(a, b)] = opt.get((a, b), set()) | {i + 1}\n        opt[(b, a)] = opt.get((b, a), set()) | {i + 1}\n    arr = {i + 1: 0 for i in range(n)}\n    arr[1] = 1\n    arr_next = {i + 1: arr.copy() for i in range(n)}\n    for i in range(1, n + 1):\n        arr_next[i] = {i: 0 for i in range(1, n + 1)}\n        for j in range(1, n + 1):\n            if j not in arr:\n                continue\n            if (i, j) in opt:\n                for v in opt[(i, j)]:\n                    arr_next[i][v] += arr[j]\n    return str(sum(arr_next[n][i] + arr_next[n - i][i] for i in range(1, n + 1)))\n"
    },
    {
        "number": 4121,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    num_parts = int(stdin.split()[0])\n    parts = list(map(int, stdin.split()[1]))\n    height = [parts[0]]\n    for i in range(1, len(parts)):\n        if parts[i] == parts[i - 1]:\n            height.append(height[-1] + 1)\n        else:\n            height.append(parts[i])\n    if (\n        all(\n            height[i] == height[i + 1]\n            for i in range(len(height) - 1)\n            if height[i] == height[i + 1]\n        )\n        and sum(height)!= len(height)\n    ):\n        return \"NO\"\n    num_bricks = int(stdin.split()[0])\n    bricks = list(map(int, stdin.split()[1]))\n    for i in range(len(bricks)):\n        if bricks[i] == 1:\n            if height[i] == height[i + 1]:\n                height[i] += 1\n                height[i + 1] += 1\n            else:\n                if height[i] == height[i + 2]:\n                    height[i] += 2\n                    height[i + 1] += 2\n                else:\n                    return \"NO\"\n        elif bricks[i] == 2:\n            if height[i] == height[i + 1]:\n                height[i] += 2\n                height[i + 1] += 2\n            else:\n                if height[i] == height[i + 2]:\n                    height[i] += 2\n                    height[i + 1] += 2\n                else:\n                    return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 4121,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = stdin.split()\n    a = list(map(int, arr))\n    # this is too easy\n    # if n < 2 or n > 10**5:\n    #     return \"NO\"\n    # if a[0]!= a[1]:\n    #     return \"NO\"\n    #\n    # # the problem says to put bricks horizontally on parts of the wall of equal height,\n    # # but we can put any amount of them\n    # # so we must make sure that we have enough to put in the wall\n    # # we can only put horizontal bricks\n    # # so n - 1 is the max possible amount\n    # n = n - 1\n    # if a[n - 1]!= a[n - 2]:\n    #     return \"NO\"\n    # for i in range(1, n):\n    #     if a[i - 1]!= a[i] or a[i]!= a[i + 1]:\n    #         return \"NO\"\n    # return \"YES\"\n\n    # the problem says to put bricks vertically on parts of the wall of equal height,\n    # but we can put any amount of them\n    # so we can put vertical bricks\n    # so n - 1 is the max possible amount\n    n = n - 1\n    if n == 1:\n        return \"YES\"\n    if a[0]!= a[1]:\n        return \"NO\"\n\n    # the problem says to put bricks horizontally on parts of the wall of equal height,\n    # but we can put any amount of them\n    # so we can put horizontal bricks\n    # so n - 1 is the max possible amount\n    n = n - 1\n    if a[n - 1]!= a[n]:\n        return \"NO\"\n    for i in range(1, n):\n        if a[i - 1]!= a[i] or a[i]!= a[i + 1]:\n            return \"NO\"\n    return \"YES\""
    },
    {
        "number": 4121,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def change(bricks: List[int]) -> List[int]:\n        newBricks = []\n        for b in bricks:\n            if newBricks and newBricks[-1] == b - 1:\n                newBricks[-1] = b + 1\n            else:\n                newBricks.append(b + 1)\n        return newBricks\n    n = int(stdin.split()[0])\n    bricks = stdin.split()[1]\n    bricks = list(map(int, bricks.split()))\n    heights = []\n    for i in range(n):\n        if len(heights) == 0:\n            heights.append(bricks[i])\n        else:\n            if heights[-1] == bricks[i]:\n                heights[-1] += 1\n            else:\n                heights.append(bricks[i])\n    return \"YES\" if sum(heights) == sum(heights[:-1]) else \"NO\"\n\nsolution('4\\n5 10 10 4')\nsolution('5\\n4 4 3 3 2')\nsolution('6\\n5 2 3 1 1 2 1')\n"
    },
    {
        "number": 4121,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    a: List[int] = list(map(int, stdin.split()))\n    if len(a) == 1:\n        if all(a == a[1:]):\n            return \"YES\"\n        return \"NO\"\n    else:\n        if a[0] == a[1]:\n            return \"NO\"\n        height: int = a[0]\n        count: int = 2\n        while count < n:\n            count += 1\n            if a[count - 1] == height:\n                height += 1\n            else:\n                break\n        if height == n:\n            return \"YES\"\n        return \"NO\"\n\n'''\n"
    },
    {
        "number": 4121,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    for i in range(1, n):\n        a[i] = max(a[i], a[i] + 1)\n        if a[i] < a[i - 1]:\n            return 'NO'\n    for i in range(1, n):\n        if a[i]!= a[i - 1] and a[i - 1] == a[i - 2] - 1:\n            return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 4121,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    if n == 2 and a[0] == a[1]:\n        return \"YES\"\n    i = 1\n    while i < n and a[i] == a[i-1]:\n        i += 1\n    if i == n:\n        return \"YES\"\n    i = 0\n    while i < n and a[i] == a[i+1]:\n        i += 1\n    if i == n:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 4121,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    wall = list(map(int, stdin.split()[1]))\n\n    if n == 1 and wall[0] == 1:\n        return \"YES\"\n\n    if wall == list(reversed(wall)):\n        return \"NO\"\n\n    if n <= 3:\n        return \"NO\"\n\n    for i in range(2, n):\n        if wall[i] > wall[i + 1]:\n            return \"NO\"\n\n    return \"YES\""
    },
    {
        "number": 4121,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n\n    if n == 1:\n        return \"YES\" if a[0] == a[1] and a[0] == a[2] else \"NO\"\n\n    a.sort()\n\n    def solution(a):\n        curr_max = a[0]\n        ans = True\n        for i in range(1, n):\n            if curr_max == a[i]:\n                curr_max += 1\n            else:\n                ans = False\n                curr_max = a[i]\n\n            if curr_max == a[i]:\n                curr_max += 1\n\n        return ans\n\n    return \"YES\" if solution(a) else \"NO\"\n"
    },
    {
        "number": 4121,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 4121,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n\n    if n <= 2:\n        if n == 2:\n            if a[0] == a[1] == 1:\n                return 'YES'\n            else:\n                return 'NO'\n        else:\n            return 'NO'\n\n    a = sorted(a)\n    if a[-1] == a[0]:\n        return 'NO'\n    for i in range(1, n-1):\n        if a[i] == a[i-1] + 2 == a[i+1]:\n            return 'YES'\n    return 'NO'\n\nstdin = \"\"\"3\n2 5 3\"\"\"\nprint(solution(stdin))\n\nstdin = \"\"\"2\n10 10\"\"\"\nprint(solution(stdin))\n\nstdin = \"\"\"1\n10 10\"\"\"\nprint(solution(stdin))\n\nstdin = \"\"\"5\n1 1 1 2 5\"\"\"\nprint(solution(stdin))\n\nstdin = \"\"\"2\n4 5 3\"\"\"\nprint(solution(stdin))"
    },
    {
        "number": 4122,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    H, n = int(stdin.split()[0]), int(stdin.split()[1])\n    rounds = [int(i) for i in stdin.split()[2].split(' ')]\n    last_round = round(sum(rounds) / n, 1)\n    if H == 0:\n        return str(n)\n    elif last_round == H:\n        return '-1'\n    else:\n        return str(int(last_round))\n"
    },
    {
        "number": 4122,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    H, n = map(int, stdin.split())\n    d = list(map(int, stdin.split()))\n    now = 0\n    for i in range(1, n + 1):\n        if now + d[i - 1] > H:\n            return str(i)\n        now += d[i - 1]\n    return \"-1\"\n"
    },
    {
        "number": 4122,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    H, n = map(int, stdin.split())\n    hp = list(map(int, stdin.split()))\n    if n == 1:\n        return str(max(hp))\n    hp = list(map(lambda x: x + (n - 1) * 2, hp))\n    max_hp = max(hp)\n    if max_hp <= 0:\n        return str(-1)\n    hp_sum = sum(hp)\n    if hp_sum >= H:\n        return str(hp_sum)\n    return str(max_hp)\n"
    },
    {
        "number": 4122,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    H, n = int(stdin.split()[0]), int(stdin.split()[1])\n    d = stdin.split()[2:]\n    for i in range(n):\n        d[i] = int(d[i])\n    if d[0] >= H:\n        return '-1'\n    for i in range(1, n):\n        d[i] += d[i - 1]\n    for i in range(n):\n        if H <= d[i] <= 0:\n            return f'{i + 1}'\n    return '-1'\n\nsolution(input())\n"
    },
    {
        "number": 4122,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    hp, n = map(int, stdin.strip().split())\n    arr = list(map(int, stdin.strip().split()))\n    if n == 1:\n        if hp - arr[0] <= 0:\n            print('-1')\n        else:\n            print(0)\n    elif n == 2:\n        if hp - arr[0] <= 0:\n            print(0)\n        elif hp - arr[1] <= 0:\n            print(0)\n        else:\n            if hp - (arr[0] + arr[1]) >= 0:\n                print((hp - (arr[0] + arr[1])) % (60*60) + 1)\n            else:\n                print('-1')\n    else:\n        min_hp = min(arr)\n        if hp - min_hp <= 0:\n            print(0)\n        else:\n            if hp - (min_hp + arr[n - 2]) >= 0:\n                print((hp - (min_hp + arr[n - 2])) % (60*60) + 1)\n            else:\n                print('-1')"
    },
    {
        "number": 4122,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 1000 6\n   ... -100 -200 -300 125 77 -4\n   ... ''')\n    9\n    >>> solution('''\n   ... 10 4\n   ... -3 -6 5 4\n   ... ''')\n    4999999999996\n    \"\"\"\n    hp, n, *d = [int(x) for x in stdin.split(' ')]\n    if hp == 0:\n        return '-1'\n    count = 0\n    while hp > 0:\n        hp += d[count]\n        if hp <= 0:\n            return str(count + 1)\n        count += 1\n    return '-1'\n"
    },
    {
        "number": 4122,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    h, n = map(int, stdin.split())\n    hp = h\n    for i in range(n):\n        hp += -1*(hp + stdin.split()[i])\n        if hp <= 0:\n            return str(i+1)\n    return str(-1)\nprint(solution(input()))\n"
    },
    {
        "number": 4122,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    _, n, _ = stdin.split()\n    n = int(n)\n    h = int(stdin.split()[0])\n    h = [int(i) for i in stdin.split()[1:]]\n    _, k = h.pop(0), 0\n    while h:\n        if sum(h) <= 0:\n            break\n        if h[0] > k:\n            k = h[0]\n        h.pop(0)\n    return str(k) if k <= h[0] else \"-1\"\n"
    },
    {
        "number": 4122,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    d, n = stdin.strip().split()\n    d = list(map(int, d.split()))\n    h = int(n)\n    counter = 0\n    if h == 0:\n        return str(-1)\n    while h > 0:\n        if h > d[0]:\n            h -= d[0]\n            d = d[1:] + d[:1]\n            counter += 1\n        else:\n            d = d[1:]\n            counter += 1\n    return str(counter)\n"
    },
    {
        "number": 4122,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4123,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    strings = stdin.split()\n    strings = list(map(lambda s: s.upper(), strings))\n    strings = sorted(strings, key=len)\n    strings = sorted(strings, key=lambda s: s[:-1])\n    max_substring = None\n    max_occurrences = 0\n    for i in range(len(strings)):\n        for j in range(i + 1, len(strings)):\n            substring = strings[i][:-1] + strings[j][1:]\n            if max_substring is None:\n                max_substring = substring\n                max_occurrences = strings[i].count(substring)\n            else:\n                if strings[i].count(substring) >= max_occurrences:\n                    max_substring = substring\n                    max_occurrences = strings[i].count(substring)\n    return max_substring\n"
    },
    {
        "number": 4123,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split('\\n')[1:]\n    # print(words)\n    n = int(words.pop(0))\n    # print(n)\n    words =''.join(words)\n    # print(words)\n    words = words.lower()\n    # print(words)\n    words = words.split()\n    # print(words)\n    temp = []\n    for word in words:\n        if len(word) > 1:\n            temp.append(word)\n    # print(temp)\n    # print(len(temp))\n    counter = {}\n    for word in temp:\n        # print(word)\n        if word in counter:\n            counter[word] += 1\n        else:\n            counter[word] = 1\n    # print(counter)\n    max_value = 0\n    for key, value in counter.items():\n        if value > max_value:\n            max_value = value\n            max_key = key\n    # print(max_key, max_value)\n    return max_key"
    },
    {
        "number": 4123,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin\n    text = \"\"\n    for x in range(len(string)):\n        if len(text) < 1:\n            text = string[x]\n        else:\n            if string[x] == text[-1]:\n                text += string[x]\n                if x + 1 == len(string):\n                    text = text[:-1]\n                    return text\n    return text"
    },
    {
        "number": 4123,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n\n    res = \"\"\n    for i in range(1, n):\n        s = s.replace(s[i-1]+s[i], \"\")\n        if res == \"\":\n            res = s[i-1]\n        else:\n            res = res + s[i-1]\n\n    return res\n"
    },
    {
        "number": 4123,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    return stdin[0]\n"
    },
    {
        "number": 4123,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    string = stdin.readline().rstrip()\n    print(string[(n-2):(n-1)])"
    },
    {
        "number": 4123,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, string = stdin.split()\n    n = int(n)\n    d = {}\n    for i in range(n):\n        if string[i] not in d:\n            d[string[i]] = 1\n        else:\n            d[string[i]] += 1\n    max_count = 0\n    max_two_gram = \"\"\n    for key, value in d.items():\n        if value > max_count:\n            max_count = value\n            max_two_gram = key\n    return max_two_gram\n"
    },
    {
        "number": 4123,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split(\"\\n\")\n    n = int(input[0])\n    input = input[1].split()\n    s = input[0]\n    two_grams = []\n    for i in range(len(s)-1):\n        two_grams.append(s[i:i+2])\n    unique_two_grams = set(two_grams)\n    dict_two_grams = {}\n    for i in unique_two_grams:\n        dict_two_grams[i] = 0\n    for i in two_grams:\n        dict_two_grams[i] += 1\n    max_two_gram = \"\"\n    max_two_gram_count = -1\n    for i in dict_two_grams:\n        if dict_two_grams[i] > max_two_gram_count:\n            max_two_gram = i\n            max_two_gram_count = dict_two_grams[i]\n    return max_two_gram\n\nprint(solution(input))\n"
    },
    {
        "number": 4123,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    two_gram_counts = {}\n    for two_gram in stdin:\n        if two_gram in two_gram_counts:\n            two_gram_counts[two_gram] += 1\n        else:\n            two_gram_counts[two_gram] = 1\n    two_gram_counts_sorted = sorted(two_gram_counts.items(), key=lambda x: x[1], reverse=True)\n    print(two_gram_counts_sorted[0][0][0:2])\n    return\n"
    },
    {
        "number": 4123,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    text = stdin\n    count = {}\n    for i in range(len(text) - 1):\n        if text[i] + text[i + 1] in count:\n            count[text[i] + text[i + 1]] += 1\n        else:\n            count[text[i] + text[i + 1]] = 1\n    max = max(count.values())\n    res = ''\n    for i in count:\n        if count[i] == max:\n            res += i\n            max -= 1\n    return res\n"
    },
    {
        "number": 4124,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    s = stdin.split(\"\\n\")[0]\n    t = stdin.split(\"\\n\")[1]\n\n    # Move character in s if we need to\n    while len(s) > len(t):\n        s = s[1:]\n\n    # Move character in t if we need to\n    while len(t) > len(s):\n        t = t[1:]\n\n    return len(s) + len(t)\n\n\ndef"
    },
    {
        "number": 4124,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    # Write an action using print\n    # To debug: print(\"Debug messages...\", file=sys.stderr)\n    # print(s)\n    result = 0\n    while (len(s[0]) > 1 and len(s[1]) > 1):\n        if s[0] == s[1]:\n            return result\n        result += 1\n        if (len(s[0]) > len(s[1])):\n            s[0], s[1] = s[1], s[0]\n        s[0] = s[0][1:]\n        s[1] = s[1][1:]\n    return result + abs(len(s[0]) - len(s[1]))\n\ndef"
    },
    {
        "number": 4124,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    The first line of input contains the string $s$.\n    The second line of input contains the string $t$.\n    \"\"\"\n    def string_equal(s: str, t: str) -> bool:\n        \"\"\"\n        Check if two strings are equal.\n        \"\"\"\n        return s == t\n\n    def count_leaves(s: str) -> int:\n        \"\"\"\n        Calculate number of leaves in a tree.\n        \"\"\"\n        return len(s) - 1\n\n    def solution(s: str, t: str) -> int:\n        \"\"\"\n        The function should return the fewest number of moves required to make two strings equal.\n        \"\"\"\n        if s == t:\n            return count_leaves(s)\n\n        s_len = len(s)\n        t_len = len(t)\n\n        if s_len < t_len:\n            s, t = t, s\n            s_len, t_len = t_len, s_len\n\n        if s == t:\n            return count_leaves(s)\n        else:\n            s = s[1:]\n            t = t[1:]\n\n            if s == t:\n                return count_leaves(s)\n            else:\n                return count_leaves(s) + count_leaves(t)\n"
    },
    {
        "number": 4124,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    length_s = len(stdin)\n    length_t = len(stdin)\n    \n    if length_s == 0 or length_t == 0:\n        return str(min(length_s, length_t))\n    \n    trie = Trie()\n    trie.insert(stdin)\n    \n    q = deque()\n    q.append(('', 0, 0))\n    \n    while q:\n        current, length, count = q.popleft()\n        if length == length_s and length == length_t:\n            return str(count)\n        \n        if length < length_s:\n            for char in trie.find(current):\n                q.append((current + char, length + 1, count + 1))\n        else:\n            for char in trie.find(current):\n                q.append((char, length - 1, count + 1))\n                \n    return str(count)"
    },
    {
        "number": 4124,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split('\\n')\n    t = '#' + t\n    return '#' + min(s,t, key=lambda s: len(s) - len(t))\n\ndef"
    },
    {
        "number": 4124,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    if len(s) <= len(t):\n        return str(len(s) - len(t))\n    elif len(s) == len(t):\n        return str(len(s))\n    else:\n        return str(len(t) - len(s))\n\n\n\nsolution(input())\n"
    },
    {
        "number": 4124,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split('\\n')\n    string_one = s[0]\n    string_two = s[1]\n    return sum(len(s[0]) - 1, len(s[1]) - 1)\n\n\ndef"
    },
    {
        "number": 4124,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    t = stdin\n    len_s = len(s)\n    len_t = len(t)\n    if len_s < len_t:\n        s, t = t, s\n        len_s, len_t = len_t, len_s\n    moves = len_s - len_t\n    if moves > len_s - len_t:\n        moves = len_s - len_t\n    if moves == 0:\n        return str(len_s)\n    count = 0\n    while len_s > 0 and len_t > 0:\n        if s[0] == t[0]:\n            count += len_s - len_t\n            s = s[1:]\n            t = t[1:]\n            len_s -= 1\n            len_t -= 1\n        else:\n            s = s[1:]\n            t = t[1:]\n            len_s -= 1\n            len_t -= 1\n    return str(count)"
    },
    {
        "number": 4124,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.rstrip()\n    t = stdin.rstrip()\n    n = len(s)\n    m = len(t)\n    if n > m:\n        return n - m\n    if m > n:\n        return m - n\n    if n == 0:\n        return 0\n    if t == s:\n        return n\n    d = {s: 0, t: 0}\n    if t < s:\n        return n - 1\n    for i in range(1, n):\n        if s[i] == t[d[s[i - 1]] + 1]:\n            d[s[i]] += 1\n        else:\n            d[s[i]] = 1\n    if n == d[t]:\n        return d[t] + n\n    return d[t] + n - 1\n"
    },
    {
        "number": 4124,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    t = s[1]\n    s = s[0]\n\n    count_s = 0\n    count_t = 0\n    while s!= t and count_s < len(s) and count_t < len(t):\n        if s[count_s] == t[count_t]:\n            count_s += 1\n        else:\n            count_t += 1\n    if count_s == len(s):\n        return str(len(s)) + \" \" + t + \" \" + str(count_s)\n    elif count_t == len(t):\n        return str(len(t)) + \" \" + s + \" \" + str(count_t)\n    return str(len(s) + len(t) - count_s - count_t) + \" \" + s + \" \" + t + \" \" + str(count_s + count_t)\n"
    },
    {
        "number": 4125,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def get_pair(i: int) -> int:\n        pair = (0, 0)\n        for x in range(1, 10):\n            if i + x > N:\n                break\n            if x in visited:\n                pair = (x, i + x)\n                break\n        return pair\n\n    N, X = list(map(int, stdin.split()))\n    cities = sorted([tuple(map(int, stdin.split())) for _ in range(N)])\n    visited = set([pair for pair in cities if pair[0] == X])\n    max_D = 0\n    while True:\n        max_D = max(max_D, max(pair) - min(pair) for pair in visited)\n        if max_D == 0:\n            break\n        pair = max(get_pair(max_D), key=lambda x: x[0])\n        visited.add(pair)\n    return str(max_D)\n"
    },
    {
        "number": 4125,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, X = list(map(int, stdin.split()))\n    cities = sorted(list(map(int, stdin.split())))\n    return str(N - max(\n        (cities[i - X] - cities[i]) for i in range(N)\n        if i - X >= 0 and cities[i - X]!= cities[i]\n    ))\n"
    },
    {
        "number": 4125,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, X = map(int, stdin.split())\n    x_arr = list(map(int, stdin.split()))\n    MAX_VAL = 10**9\n    ans = 0\n    for i in range(N):\n        ans = max(ans, x_arr[i]-X)\n    return str(ans)\n"
    },
    {
        "number": 4125,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, X = map(int, stdin.split())\n    x_n = list(map(int, stdin.split()))\n    c = sorted(x_n, key=lambda x: x)\n\n    distance = 0\n    for i in range(N):\n        distance += abs(c[i] - X)\n    return str(distance)\n\n----------------------------------------------------------------------------------------------------------------------\n\nLUCKY NUMBER\n\nYou live in the city of Cartesia where all roads are laid out in a perfect grid. You arrived upon a magical\ntreasure chest! The chest contains an array of non-negative integers. Each number in the treasure chest represents\nthe maximum number of points you can earn by playing certain game. The games are as follows:\n\n- The game of \"Climbing Stairs\" will allow you to climb up either 1, 2, or 3 steps at a time.\n  The score will be the sum of the numbers on your step count. So if you play the game, you will step on 1, then\n  step on 2, then step on 3, and your score will be the sum of these numbers.\n- The game of \"Checkerboard\" will allow you to play the game in a specific position on the floor (your position in\n  Cartesia), and try to get the next position if it is a 1 or a 2.\n  The score will be the sum of the numbers on your next position. So if you play the game in position 3, then you\n  will try the next position in the game as you did in position 2, and you will get the sum of numbers on the next\n  position, so the score will be the sum of the numbers in the game on your next position.\n- The game of \"Math\" will allow you to play the game either as a player or as a computer.\n  The score will be the sum of the numbers on your score. So if you play the game as a player, you will step on 1, then\n  step on 2, then step on 3, and your score will be the sum of those numbers. If you play the game as a computer,\n  then you will step on 1, then step on 2, then step on 3, and the computer will calculate the score based on the\n  exact position in the game, and you will step on the position where the computer calculated the score.\n\nFor example, the game of \"Checkerboard\" will be played exactly in the middle. The score of the game will be the sum\nof the numbers in the game. To play the game in this case, you can either step on the position where you started, or\nyou can step on the position where the computer calculated the score. The computer will then calculate the score based\non the exact position in the game, and the step on the position where the computer calculated the score will be the\nstep on the position where the computer calculated the score.\n\nGiven an array of integers representing the maximum number of points that can be earned by each game of \"Climbing Stairs\"\n(in this example, 0, 1, or 2), write code to calculate the fewest number of steps needed to play the game \"Checkerboard\".\n\nNote: The game will start with a random choice of positions.\n\n-----Constraints-----\n- N is an integer with 0 < N < 100\n- Arrays are sorted in ascending order\n- Each element of an array can be an integer in the range [0, 10^9]\n- The game will be played exactly in the middle.\n- The game will be played starting with the position where the array represents the maximum number of points that can\n  be earned by each game of \"Climbing Stairs\".\n- The game will be played starting with the position where the array represents the maximum number of points that can\n  be earned by each game of \"Checkerboard\".\n\n-----Input-----\nThe first line contains a single integer N (1 \u2264 N \u2264 100) denoting the number of integers in the array.\nThe second line contains N integers (0 \u2264 i \u2264 10^9) denoting the maximum number of points that can be earned by each\ngame of \"Climbing Stairs\".\nThe third line contains N integers (0 \u2264 i \u2264 10^9) denoting the maximum number of points that can be earned by each\ngame of \"Checkerboard\".\nThe fourth line contains N integers (0 \u2264 i \u2264 10^9) denoting the maximum number of points that can be earned by each\ngame of \"Math\".\n\n-----Output-----\nThe answer to this problem is an integer, which is the fewest number of steps needed to play the game \"Checkerboard\".\n\nSample Input\n6\n6 1 2 3 4 5\n5 1 2 3 4\n4 1 2 3 4\n3 1 2 3 4\n2 3 4 5\n1 2 3 4\n\nSample Output\n2\n\nHere is the step sequence of the game in the middle of the array:\n\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n\nThe computer will calculate the score based on the exact position of the game:\n\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n1 2 1\n"
    },
    {
        "number": 4125,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    cities = list(map(int, stdin.split()))\n    result = 0\n    current_city = 0\n\n    for i in range(n):\n        current_city = cities[current_city] - x\n        result = max(result, current_city)\n        current_city = current_city + x\n    return result\n"
    },
    {
        "number": 4125,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, X = map(int, stdin.split())\n    x = list(map(int, stdin.split()))\n    max_ = 0\n    for i in range(N):\n        if x[i] > X:\n            continue\n        if x[i] == X:\n            return str(max_)\n        elif x[i] > X:\n            D = 2\n            while x[i] + D <= X:\n                if D > max_:\n                    max_ = D\n                if i + D > N:\n                    break\n                if x[i] + D == X:\n                    return str(max_)\n                D += 1\n            D = 2\n            while x[i] - D >= X:\n                if D > max_:\n                    max_ = D\n                if i + D > N:\n                    break\n                if x[i] - D == X:\n                    return str(max_)\n                D += 1"
    },
    {
        "number": 4125,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, X = list(map(int, stdin.strip().split()))\n    x = list(map(int, stdin.strip().split()))\n    visited = set(x)\n    d = 1\n    while len(visited) < N:\n        x_to = x[(x.index(X) + d) % len(x)]\n        visited.add(x_to)\n        x = x[x.index(x_to) + 1:]\n        x = list(visited)\n    return str(d)\n"
    },
    {
        "number": 4125,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    res = [None] * n\n    res[0] = 0\n    for i in range(1, n):\n        res[i] = min(res[i - 1] + abs(x - i), res[i - 1] + abs(x - i + n))\n    return str(max(res))\n"
    },
    {
        "number": 4125,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    N, D = map(int, stdin[0].split())\n    x_nums = map(int, stdin[1].split())\n    x_nums = sorted(x_nums)\n    x_l = x_nums[0]\n    x_r = x_nums[-1]\n\n    def expand(x_nums):\n        if len(x_nums) == 1:\n            return [x_nums[0]]\n        left = expand(x_nums[1:])\n        right = expand(x_nums[:-1])\n        new_list = []\n        for i in left:\n            new_list.append(i)\n        for i in right:\n            new_list.append(i)\n        return new_list\n\n    def valid_move(move, x_l, x_r, D):\n        if move >= 0 and move <= D:\n            return True\n        else:\n            return False\n\n    def find_max_move(x_l, x_r, D):\n        left = expand(x_nums[1:])\n        right = expand(x_nums[:-1])\n        move = 1\n        max_val = move\n        for i in left:\n            if valid_move(i, x_l, x_r, D):\n                move = i + 1\n                if move > max_val:\n                    max_val = move\n        for i in right:\n            if valid_move(i, x_l, x_r, D):\n                move = i + 1\n                if move > max_val:\n                    max_val = move\n        return max_val\n\n    ans = find_max_move(x_l, x_r, D)\n    return str(ans)\n"
    },
    {
        "number": 4125,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n\n    def solution(x, d):\n        if x > 10**9:\n            return 0\n        if d <= 0:\n            return 0\n        for i in range(1, n):\n            x += (x - arr[i]) % d\n        return x\n\n    return str(max(map(solution, arr, range(0, 10**7))))\n"
    },
    {
        "number": 4126,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    if stdin == 'akasaka':\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4126,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    length = len(stdin)\n    return 'Yes' if is_palindrome(stdin) else 'No'\n\n\ndef"
    },
    {
        "number": 4126,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    if s == s[::-1]:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4126,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    str_s = stdin\n    if str_s == str_s[::-1]:\n        return \"Yes\"\n    \n    str_p = str_s[(len(str_s) - 1) // 2 : ]\n    if str_p == str_p[::-1]:\n        return \"Yes\"\n    \n    str_t = str_s[(len(str_s) - 1) // 2 + 1 : ]\n    if str_t == str_t[::-1]:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4126,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if is_palindrome(stdin) else \"No\"\n\n\ndef"
    },
    {
        "number": 4126,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def is_palindrome(string: str) -> bool:\n        if len(string) == 1:\n            return True\n        if string == string[::-1]:\n            return True\n        return False\n\n    def is_palindrome_substring(string: str) -> bool:\n        if len(string) == 1:\n            return True\n        if string == string[::-1]:\n            return True\n        return False\n\n    def is_palindrome_odd_length_substring(string: str) -> bool:\n        if len(string) % 2 == 1:\n            return True\n        if string == string[::-1]:\n            return True\n        return False\n\n    s = stdin.strip()\n    if is_palindrome(s):\n        return 'Yes'\n    elif is_palindrome_substring(s):\n        return 'Yes'\n    elif is_palindrome_odd_length_substring(s):\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 4126,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    if is_palindrome(s):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n    return \"\"\n\ndef"
    },
    {
        "number": 4126,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    if n == 1:\n        return \"No\"\n    elif n == 2:\n        return \"Yes\"\n    elif n == 3:\n        if stdin == stdin[::-1]:\n            return \"Yes\"\n        else:\n            return \"No\"\n    elif n == 4:\n        if stdin == stdin[::-1]:\n            return \"Yes\"\n        else:\n            return \"No\"\n    elif n == 5:\n        if stdin == stdin[::-1]:\n            return \"Yes\"\n        else:\n            return \"No\"\n    elif n == 6:\n        if stdin == stdin[::-1]:\n            return \"Yes\"\n        else:\n            return \"No\"\n    elif n == 7:\n        if stdin == stdin[::-1]:\n            return \"Yes\"\n        else:\n            return \"No\"\n    elif n == 8:\n        if stdin == stdin[::-1]:\n            return \"Yes\"\n        else:\n            return \"No\"\n    elif n == 9:\n        if stdin == stdin[::-1]:\n            return \"Yes\"\n        else:\n            return \"No\"\n    elif n == 10:\n        if stdin == stdin[::-1]:\n            return \"Yes\"\n        else:\n            return \"No\"\n    elif n == 11:\n        if stdin == stdin[::-1]:\n            return \"Yes\"\n        else:\n            return \"No\"\n    elif n == 12:\n        if stdin == stdin[::-1]:\n            return \"Yes\"\n        else:\n            return \"No\"\n    elif n == 13:\n        if stdin == stdin[::-1]:\n            return \"Yes\"\n        else:\n            return \"No\"\n    elif n == 14:\n        if stdin == stdin[::-1]:\n            return \"Yes\"\n        else:\n            return \"No\"\n    elif n == 15:\n        if stdin == stdin[::-1]:\n            return \"Yes\"\n        else:\n            return \"No\"\n    elif n == 16:\n        if stdin == stdin[::-1]:\n            return \"Yes\"\n        else:\n            return \"No\"\n    elif n == 17:\n        if stdin == stdin[::-1]:\n            return \"Yes\"\n        else:\n            return \"No\"\n    elif n == 18:\n        if stdin == stdin[::-1]:\n            return \"Yes\"\n        else:\n            return \"No\"\n    elif n == 19:\n        if stdin == stdin[::-1]:\n            return \"Yes\"\n        else:\n            return \"No\"\n    elif n == 20:\n        if stdin == stdin[::-1]:\n            return \"Yes\"\n        else:\n            return \"No\"\n    elif n == 21:\n        if stdin == stdin[::-1]:\n            return \"Yes\"\n        else:\n            return \"No\"\n    elif n == 22:\n        if stdin == stdin[::-1]:\n            return \"Yes\"\n        else:\n            return \"No\"\n    elif n == 23:\n        if stdin == stdin[::-1]:\n            return \"Yes\"\n        else:\n            return \"No\"\n    elif n == 24:\n        if stdin == stdin[::-1]:\n            return \"Yes\"\n        else:\n            return \"No\"\n    elif n == 25:\n        if stdin == stdin[::-1]:\n            return \"Yes\"\n        else:\n            return \"No\"\n    elif n == 26:\n        if stdin == stdin[::-1]:\n            return \"Yes\"\n        else:\n            return \"No\"\n    elif n == 27:\n        if stdin == stdin[::-1]:\n            return \"Yes\"\n        else:\n            return \"No\"\n    elif n == 28:\n        if stdin == stdin[::-1]:\n            return \"Yes\"\n        else:\n            return \"No\"\n    elif n == 29:\n        if stdin == stdin[::-1]:\n            return \"Yes\"\n        else:\n            return \"No\"\n    elif n == 30:\n        if stdin == stdin[::-1]:\n            return \"Yes\"\n        else:\n            return \"No\"\n    elif n == 31:\n        if stdin == stdin[::-1]:\n            return \"Yes\"\n        else:\n            return \"No\"\n    elif n == 32:\n        if stdin == stdin[::-1]:\n            return \"Yes\"\n        else:\n            return \"No\"\n    elif n == 33:\n        if stdin == stdin[::-1]:\n            return \"Yes\"\n        else:\n            return \"No\"\n    elif n == 34:\n        if stdin == stdin[::-1]:\n            return \"Yes\"\n        else:\n            return \"No\"\n    elif n == 35:\n        if stdin == stdin[::-1]:\n            return \"Yes\"\n        else:\n            return \"No\"\n    elif n == 36:\n        if stdin == stdin[::-1]:\n            return \"Yes\"\n        else:\n            return \"No\"\n    elif n == 37:\n        if stdin == stdin[::-1]:\n            return \"Yes\"\n        else:\n            return \"No\"\n    elif n == 38:\n        if stdin == stdin[::-1]:\n            return \"Yes\"\n        else:\n            return \"No\"\n    elif n == 39:\n        if stdin == stdin[::-1]:\n            return \"Yes\"\n        else:\n            return \"No\"\n    elif n == 40:\n        if stdin == stdin[::-1]:\n            return \"Yes\"\n        else:\n            return \"No\"\n    elif n == 41:\n        if stdin == stdin[::-1]:\n            return \"Yes\"\n        else:\n            return \"No\"\n    elif n == 42:\n        if stdin == stdin[::-1]:\n            return \"Yes\"\n        else:\n            return \"No\"\n    elif n == 43:\n        if stdin == stdin[::-1]:\n            return \"Yes\"\n        else:\n            return \"No\"\n    elif n == 44:\n        if stdin == stdin[::-1]:\n            return \"Yes\"\n        else:\n            return \"No\"\n    elif n == 45:\n        if stdin == stdin[::-1]:\n            return \"Yes\"\n        else:\n            return \"No\"\n    elif n == 46:\n        if stdin == stdin[::-1]:\n            return \"Yes\"\n        else:\n            return \"No\"\n    elif n == 47:\n        if stdin == stdin[::-1]:\n            return \"Yes\"\n        else:\n            return \"No\"\n    elif n == 48:\n        if stdin == stdin[::-1]:\n            return \"Yes\"\n        else:\n            return \"No\"\n    elif n == 49:\n        if stdin == stdin[::-1]:\n"
    },
    {
        "number": 4126,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    All of the following conditions are satisfied:\n    - S is a palindrome.\n    - Let N be the length of S. The string formed by the 1-st through ((N-1)/2)-th characters of S is a palindrome.\n    - The string consisting of the (N+3)/2-th through N-th characters of S is a palindrome.\n    '''\n    if len(stdin) % 2!= 0:\n        return 'No'\n    palindromes = 0\n    for i in range(len(stdin) // 2):\n        if stdin[i] == stdin[-(i + 1)]:\n            palindromes += 1\n    if palindromes == len(stdin) // 2:\n        return 'Yes'\n    else:\n        return 'No'\n\nsolution(input())\n"
    },
    {
        "number": 4126,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    s = s.replace(\" \", \"\")\n    s = s.lower()\n    string = s[::-1]\n\n    if s == string:\n        return 'Yes'\n    elif s == s[::-1]:\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 4127,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = stdin.split()\n    return str(int(A) * int(B))\n"
    },
    {
        "number": 4127,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    [A, B] = stdin.split(\" \")\n    return \"{:d}\".format(int(A) * int(B))"
    },
    {
        "number": 4127,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B = stdin.split(' ')\n    a, b = int(A), float(B)\n    a = int(a)\n    return str(a * b)\n"
    },
    {
        "number": 4127,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split(' ')\n    return int(a) * float(b)\n\nsolution(\"198 1.10\")\n"
    },
    {
        "number": 4127,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return \"{:d}\".format(A * 10 + int(B * 100))"
    },
    {
        "number": 4127,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B = stdin.split()\n    return str(int(float(A) * float(B)))"
    },
    {
        "number": 4127,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return \"{:d}\".format(a * b // (10 ** (len(str(a * b)) - 2)))\n"
    },
    {
        "number": 4127,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    _, a, _ = stdin.split(' ')\n    a = int(a)\n    b = float(stdin)\n    return str(int(a * b))\n"
    },
    {
        "number": 4127,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B = stdin.split()\n    a = int(A)\n    b = int(B)\n    return str(a * b)\n\n\nprint(solution(input()))\n\n\ndef"
    },
    {
        "number": 4127,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return str(A * pow(1.1, -1))"
    },
    {
        "number": 4128,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return str(0)\n    else:\n        a = 0\n        b = 0\n        while (a + b) < n:\n            b += 1\n            a = b\n        if (a + b) == n:\n            return str(1)\n        else:\n            return str(0)\n\n\ndef"
    },
    {
        "number": 4128,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    for _ in range(t):\n        n = int(stdin.split()[1])\n        a,b = 1,1\n        if n<=1:\n            return str(0)\n        while(a<=n):\n            if n<=a:\n                a=n\n            else:\n                a=n-a\n            if a==b:\n                break\n            b+=1\n        if a>b:\n            return str(0)\n        else:\n            return str(1)"
    },
    {
        "number": 4128,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\n'''\n\ndef"
    },
    {
        "number": 4128,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time: O(2^n) where n is the number of candies.\n    Space: O(2^n)\n    \"\"\"\n    # Input:\n    # 6\n    # 7\n    # 1\n    # 2\n    # 3\n    # 2000000000\n    # 763243547\n    #\n    # Output:\n    # 3\n    # 0\n    # 0\n    # 1\n    # 999999999\n    # 381621773\n    #\n    # Explanation:\n    # 1. There is only one way to satisfy the conditions of Alice and Betty.\n    # 2. There is no way to satisfy the conditions of Betty and Alice.\n    # 3. There is only one way to satisfy the conditions of Alice and Betty.\n    # 4. There is no way to satisfy the conditions of Betty and Alice.\n    # 5. There is no way to satisfy the conditions of Alice and Betty.\n    # 6. There is no way to satisfy the conditions of Betty and Alice.\n    #\n    #\n    #\n    #\n    #\n    # Note:\n    #\n    #\n    # 1 <= n <= 2 * 10^9\n    #\n    #\n    #\n\n\n    # Recursion\n    # T(n) = T(n-1) + T(n-2)\n    # n = 1 and 2\n    # n = 3 and 4\n    # n = 5 and 6\n    # n = 7 and 8\n    # n = 9\n    #\n    # # T(n) = (2 * n) - 1\n    #\n    # # n = 1\n    # # T(1) = 1\n    #\n    # # n = 2\n    # # T(2) = 1\n    # # T(2) = 2\n    # #\n    # # n = 3\n    # # T(3) = 1\n    # # T(3) = 2\n    # # T(3) = 4\n    # #\n    # # n = 4\n    # # T(4) = 1\n    # # T(4) = 2\n    # # T(4) = 3\n    # # T(4) = 4\n    # # T(4) = 5\n    # #\n    # # n = 5\n    # # T(5) = 1\n    # # T(5) = 2\n    # # T(5) = 4\n    # # T(5) = 5\n    # # T(5) = 6\n    # #\n    # # n = 6\n    # # T(6) = 1\n    # # T(6) = 2\n    # # T(6) = 4\n    # # T(6) = 5\n    # # T(6) = 6\n    # #\n    # # n = 7\n    # # T(7) = 1\n    # # T(7) = 2\n    # # T(7) = 4\n    # # T(7) = 7\n    # # T(7) = 8\n    # #\n    # # n = 8\n    # # T(8) = 1\n    # # T(8) = 2\n    # # T(8) = 4\n    # # T(8) = 7\n    # # T(8) = 8\n    # # T(8) = 9\n    # #\n    # # n = 9\n    # # T(9) = 1\n    # # T(9) = 2\n    # # T(9) = 4\n    # # T(9) = 7\n    # # T(9) = 8\n    # # T(9) = 9\n    # # T(9) = 10\n    # #\n    # # T(n) = 2 * n - 1\n    #\n    # def solution_recursive(n):\n    #     if n == 1:\n    #         return 1\n    #     if n == 2:\n    #         return 2\n    #\n    #     return solution_recursive(n - 1) + solution_recursive(n - 2)\n    #\n    # def solution_dp(n):\n    #     # D = [[None] * (n + 1) for _ in range(n + 1)]\n    #     # D[0][0] = 1\n    #     # D[0][1] = 2\n    #     # D[1][0] = 1\n    #     # D[1][1] = 2\n    #     #\n    #     # for i in range(2, n + 1):\n    #     #     for j in range(0, i):\n    #     #         D[i][j] = D[i - 1][j] + D[i - 1][j + 1]\n    #     #\n    #     # return D[n][0]\n    #     # T(n) = (2 * n) - 1\n    #\n    #     T = [[None] * (n + 1) for _ in range(n + 1)]\n    #     # T[0][0] = 1\n    #     T[0][1] = 2\n    #     # T[1][0] = 1\n    #     # T[1][1] = 2\n    #     for i in range(2, n + 1):\n    #         for j in range(0, i):\n    #             T[i][j] = T[i - 1][j] + T[i - 1][j + 1]\n    #     return T[n][0]\n    #\n    # print(solution_dp(9))\n\n    # Iteration\n    # T(n) = 2 * T(n-1) - 1\n    #\n    #\n    # # n = 1\n    # # T(1) = 1\n    #\n    # # n = 2\n    # # T(2) = 1\n    # # T(2) = 2\n    # #\n    # # n = 3\n    # # T(3) = 1\n    # # T(3) = 2\n    # # T(3) = 4\n    # #\n    # # n = 4\n    # # T(4) = 1\n    # # T(4) = 2\n    # # T(4) = 3\n    # # T(4) = 4\n    # # T(4) = 5\n    # #\n    # # n = 5\n    # # T(5) = 1\n    # # T(5) = 2\n    # # T(5) = 4\n    # # T(5) = 5\n    # # T(5) = 6\n    # #\n    # # n = 6\n    # # T(6) = 1\n    # # T(6) = 2\n    # # T(6) = 4"
    },
    {
        "number": 4128,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    answer = 0\n    n = int(stdin)\n    return answer"
    },
    {
        "number": 4128,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    number_of_sisters = int(stdin)\n    candies = number_of_sisters\n    sum = number_of_sisters\n    count = 0\n    while sum!= 0:\n        if sum % 2!= 0:\n            return 0\n        else:\n            sum = sum//2\n            count += 1\n    return count\n"
    },
    {
        "number": 4128,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def candies(n, a, b):\n        if a <= 0 or b <= 0:\n            return 1 if a > b else 0\n        else:\n            return candies(n, a - 1, b) + candies(n, a, b - 1)\n    cases = int(stdin)\n    for _ in range(cases):\n        n = int(stdin.split('\\n')[0])\n        a, b = map(int, stdin.split('\\n')[1].split(' '))\n        print(candies(n, a, b))\n    return ''\n"
    },
    {
        "number": 4128,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Your code here\n    stdin = '6\\n1\\n2\\n3\\n2000000000\\n763243547'\n    \"\"\"\n    num_candies = int(stdin.strip())\n    print(num_candies)\n"
    },
    {
        "number": 4128,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    for i in range(t):\n        n = int(stdin.split()[1])\n        res = n // 2\n        if n % 2 == 0:\n            res -= 1\n        if n < 1:\n            res = 0\n        print(res)\n    return \"\"\n\nsolution(input())\n"
    },
    {
        "number": 4128,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def combination(i, a, b):\n        if a < 0 or b < 0:\n            return 0\n        if a == 0 and b == 0:\n            return 1\n        return combination(i - 1, a - 1, b) + combination(i - 1, a, b - 1)\n    n = int(stdin)\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return combination(n - 1, n - 1, n)"
    },
    {
        "number": 4129,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s = map(int, stdin.split())\n    taken = set()\n    num_new = 0\n\n    for _ in range(m):\n        u, v = map(int, input().split())\n        if u > v:\n            u, v = v, u\n        if u in taken:\n            if v in taken:\n                continue\n            else:\n                taken.add(v)\n                num_new += 1\n        else:\n            taken.add(u)\n            taken.add(v)\n            num_new += 1\n\n    if s in taken:\n        return num_new\n\n    else:\n        return '0'\n\n\nsolution(input())\n\n\"\"\"\n\n\n\"\"\"-----SOLUTION-----\"\"\"\nfrom collections import defaultdict\ndef"
    },
    {
        "number": 4129,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s = map(int, stdin.split())\n    nodes = {i: i for i in range(1, n + 1)}\n    edges = {(i, i): 0 for i in range(1, n + 1)}\n    for _ in range(m):\n        u, v = map(int, stdin.split())\n        edges[(u, v)] = 1\n        edges[(v, u)] = 1\n    que = deque([(s, 0)])\n    while que:\n        c, cnt = que.popleft()\n        if cnt > 10:\n            break\n        for n in nodes:\n            if (n not in nodes) or (nodes[n] == c):\n                continue\n            if edges[(c, nodes[n])]:\n                continue\n            nodes[n] = c\n            edges[(c, nodes[n])] = 1\n            edges[(nodes[n], c)] = 1\n            que.append((nodes[n], cnt + 1))\n    return str(cnt) if cnt < 10 else \"0\"\n"
    },
    {
        "number": 4129,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n, m, s = map(int, stdin.split())\n    d = {i: set() for i in range(1, n + 1)}\n    for i in range(m):\n        u, v = map(int, stdin.split())\n        d[u].add(v)\n        d[v].add(u)\n\n    visited = set()\n    stack = [s]\n    visited.add(s)\n    cnt = 0\n    while stack:\n        u = stack.pop()\n        for v in d[u]:\n            if v not in visited:\n                visited.add(v)\n                stack.append(v)\n                cnt += 1\n    return str(cnt)\n"
    },
    {
        "number": 4129,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input_data = list(map(lambda x: list(map(lambda y: int(y) - 1, x.split())), stdin.split('\\n')))\n    print(input_data)\n    cities = input_data[0]\n    roads = input_data[1:]\n    if len(roads) < cities[0]:\n        return '0'\n    num_cities = len(cities)\n    graph = [[] for _ in range(num_cities)]\n    for road in roads:\n        u, v = road\n        graph[u].append(v)\n        graph[v].append(u)\n    print(graph)\n    parents = [-1] * num_cities\n    def dfs(node):\n        parents[node] = node\n        for n in graph[node]:\n            if parents[n] == -1:\n                dfs(n)\n    dfs(0)\n    count = 1\n    for i in range(1, num_cities):\n        parent = parents[i]\n        for j in range(i):\n            if parent!= parents[j] and abs(i - j) == abs(parent - j):\n                count += 1\n    return str(count)"
    },
    {
        "number": 4129,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s = int(stdin[0]), int(stdin[1]), int(stdin[2])\n    roads = [[int(i)-1, int(j)-1] for i, j in stdin[3:].split()]\n    roads.sort()\n    return str(solution_1(n, m, s, roads))\n\ndef"
    },
    {
        "number": 4129,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s = list(map(int, stdin.split()))\n    cities = [i for i in range(1, n+1)]\n    roads = []\n    for i in range(m):\n        u, v = list(map(int, stdin.split()))\n        if u!= v:\n            roads.append((u, v))\n    for c in cities:\n        if not any(road[1] == c or road[0] == c for road in roads):\n            return \"0\"\n    roads = sorted(roads)\n    roads_2 = []\n    for road in roads:\n        roads_2.append(road[0])\n        roads_2.append(road[1])\n    roads_2 = set(roads_2)\n    roads_2.remove(s)\n    if s not in roads_2:\n        return \"1\"\n    else:\n        return \"0\"\n"
    },
    {
        "number": 4129,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s = map(int, stdin.split())\n    roads = [[int(i) for i in stdin.split()[j*2:j*2+2]] for j in range(m)]\n    roads.sort(key=lambda x: x[1])\n    # print(roads)\n    res = 0\n    nodes = {i: [] for i in range(1, n+1)}\n    for u, v in roads:\n        if v not in nodes[u]:\n            nodes[u].append(v)\n        if u not in nodes[v]:\n            nodes[v].append(u)\n\n    # print(nodes)\n    todo = {s}\n    visited = set()\n    while todo:\n        visited.update(todo)\n        for u in todo:\n            for v in nodes[u]:\n                if v not in visited:\n                    todo.add(v)\n        todo.difference_update(visited)\n    return res\n"
    },
    {
        "number": 4129,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s = map(int, stdin.split())\n\n    cities = {i: [float('inf'), float('inf')] for i in range(1, n + 1)}\n    roads = []\n\n    for road in range(m):\n        u, v = map(int, stdin.split())\n        if u > v:\n            u, v = v, u\n        roads.append([u, v])\n\n    for road in roads:\n        if road[0] == s:\n            cities[road[1]][1] = min(cities[road[1]][1], roads[road[1]][0])\n        elif road[1] == s:\n            cities[road[0]][1] = min(cities[road[0]][1], roads[road[0]][1])\n        else:\n            cities[road[0]][1] = min(cities[road[0]][1], roads[road[0]][0])\n            cities[road[1]][1] = min(cities[road[1]][1], roads[road[1]][0])\n\n    for city in cities.values():\n        if city[0] == float('inf'):\n            return -1\n    return sum([road[1] - road[0] for road in roads])\n"
    },
    {
        "number": 4129,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    (n, m, s) = (int(x) for x in stdin.split())\n    roads = [list(map(int, stdin.split())) for _ in range(m)]\n    start = roads[s-1]\n    roads = sorted(roads, key=lambda x: (x[0], x[1]))\n\n    def dfs(roads, city_index):\n        if roads and roads[0][0] == city_index:\n            roads.pop(0)\n            return dfs(roads, roads[0][1]) + 1\n        else:\n            return 0\n\n    return str(dfs(roads, start))\n"
    },
    {
        "number": 4129,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s = (int(x) for x in stdin.split(\" \"))\n    if m == 0:\n        return 0\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    \n    for i in range(m):\n        dp[stdin[1][i] - 1][stdin[0][i] - 1] = 1\n        dp[stdin[0][i] - 1][stdin[1][i] - 1] = 1\n    \n    for i in range(n):\n        dp[i][i] = 1\n    \n    for k in range(n):\n        for i in range(n):\n            for j in range(n):\n                if dp[i][k] == 0 or dp[k][j] == 0:\n                    continue\n                dp[i][j] = min(dp[i][j], dp[i][k] + dp[k][j])\n    \n    for i in dp:\n        print(i)\n    return str(dp[s - 1][s - 1])\n\nsolution(input())"
    },
    {
        "number": 4130,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = int(stdin.strip().split()[0])\n    weights = list(map(int, stdin.strip().split()[1:]))\n    res = 0\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                weights[i] += weights[j]\n                weights[j] += weights[k]\n                if weights[i] == weights[j] == weights[k]:\n                    res = max(res, 3)\n    return str(res)\n\nprint(solution(input()))\n\n\"\"\"\n"
    },
    {
        "number": 4130,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    dp = [1] + [0] * n\n    for i in range(1, n):\n        for j in range(0, i):\n            if a[j] < a[i]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return str(max(dp))\n"
    },
    {
        "number": 4130,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    answer = 0\n\n    while len(a) > answer:\n        max_a = max(a)\n        i = a.index(max_a)\n        answer = max(answer, len(a) - i)\n        for j in range(i + 1, len(a)):\n            a[j] -= 1\n    return str(answer)\n"
    },
    {
        "number": 4130,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    num_boxers = int(stdin)\n    boxers = stdin.split()\n    boxers = [(int(i), i) for i in boxers]\n    boxers.sort()\n    people = 1\n    weights = boxers[0][0]\n    for weight, name in boxers:\n        if weight == weights:\n            people += 1\n        else:\n            people = 1\n        weights = weight\n    return str(people)\n"
    },
    {
        "number": 4130,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = sorted(map(int, stdin.split()))\n    print(n-1)\n    return\n\nsolution(input())\n"
    },
    {
        "number": 4130,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    boxers = sorted([int(i) for i in stdin.split()], reverse=True)\n    max_possible = 0\n    for i, j in enumerate(boxers):\n        if j >= max_possible:\n            max_possible = j\n        elif j == 0 and max_possible == 0:\n            continue\n        elif j <= max_possible:\n            if j - 1 > max_possible:\n                max_possible = j - 1\n            else:\n                max_possible = max_possible\n        else:\n            break\n\n    return str(max_possible)\n"
    },
    {
        "number": 4130,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    al = list(map(int, stdin.split()))\n    al.sort()\n    d = {k:al.count(k) for k in set(al)}\n    if len(d) == 1:\n        return len(al)\n    if max(d.keys()) == 0:\n        return 1\n    elif max(d.keys()) == 1:\n        return len(al)\n    else:\n        al.sort(key=lambda x: (-x,x))\n        return sum(al)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4130,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4130,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    weights = list(map(int, stdin.split(' ')))\n    for i in range(n):\n        for j in range(i+1, n):\n            weights[i] += weights[j]\n    for i in range(n):\n        for j in range(i+1, n):\n            if weights[i] == weights[j]:\n                return i + 1\n    return n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4130,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    weights = sorted(map(int, stdin.split()))\n    max_weight = max(weights)\n    if max_weight == 0:\n        return 1\n    if max_weight == 1:\n        return n\n    max_count = 1\n    start = 1\n    while start + 1 <= max_weight:\n        count = 1\n        curr_weight = weights[start]\n        prev_weight = weights[start-1]\n        while start + 1 <= max_weight and curr_weight == prev_weight:\n            count += 1\n            start += 1\n            curr_weight = weights[start]\n        max_count = max(count, max_count)\n        start += 1\n    return max_count\n"
    },
    {
        "number": 4131,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    prefectures = [[] for _ in range(n)]\n    for i in range(m):\n        _, y, p = map(int, stdin.split())\n        if len(prefectures[p-1]) == 0:\n            prefectures[p-1].append(y)\n        else:\n            prefectures[p-1].append(y)\n            prefectures[p-1].sort()\n    for i in range(n):\n        for j in range(1, len(prefectures[i])+1):\n            print(f\"{i+1}{'0'*(6-len(str(i+1)))}{j}\", end=\"\")\n    return \"\"\n\nprint(solution(input()))\n\n\"\"\"\n"
    },
    {
        "number": 4131,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    return \" \".join(map(str, sorted(list(map(int, input().split())))))\n"
    },
    {
        "number": 4131,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    preferences = [[] for _ in range(n)]\n    for i in range(m):\n        p, y = map(int, stdin.split())\n        preferences[p - 1].append(y)\n    cities = sorted(list(set(range(1, n + 1)) - set(map(lambda x: len(x), preferences))))\n    for pref in preferences:\n        pref.sort(key=lambda x: cities.index(x))\n    return '\\n'.join(map(lambda x: '{:0>12}'.format(x), cities))\n"
    },
    {
        "number": 4131,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, M = (int(x) for x in stdin.split())\n\n    data = []\n    for i in range(N):\n        data.append(stdin.split()[i*2+1])\n\n    data.sort()\n    result = []\n    for i in range(N):\n        result.append(\"{:0{0}d}\".format(int(data[i]),12))\n\n    return \" \".join(result)"
    },
    {
        "number": 4131,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, M = list(map(int, stdin.split()))\n    cities = [[0, 0] for _ in range(N)]\n    for i in range(N):\n        P, Y = list(map(int, stdin.split()))\n        cities[i][0] = P\n        cities[i][1] = Y\n    answer = ''\n    for i in range(len(cities)):\n        answer += f'{cities[i][0]:06d}'\n        for j in range(i+1, len(cities)):\n            if cities[i][1] == cities[j][1]:\n                answer += f'{cities[j][0]:06d}'\n    return answer\nprint(solution(input()))\n"
    },
    {
        "number": 4131,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    pref = []\n    city = []\n    for i in range(n):\n        pref.append(int(stdin[i]))\n    for i in range(m):\n        city.append(stdin[i+n])\n\n    p = sorted(pref)\n    c = sorted(city)\n\n    id_no = \"\"\n    for i in range(len(p)):\n        if i==0:\n            id_no += str(p[i])\n        else:\n            id_no += str(p[i]) + str(c[i-1])\n\n    return id_no"
    },
    {
        "number": 4131,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    city_dict = {}\n    for i in range(1, N + 1):\n        city_dict[i] = input().split()\n    city_list = sorted(city_dict)\n    for city_id in city_list:\n        city_id = city_id.split()\n        city_id_split = list(map(int, city_id))\n        id = \"\"\n        for i in city_id_split:\n            if len(id) < 6:\n                id = str(i).zfill(6) + id\n            else:\n                id = str(i).zfill(6) + id\n        print(id)\n    return id\n"
    },
    {
        "number": 4131,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4131,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # N, M = map(int, input().split())\n    N, M = stdin.split()\n    N, M = int(N), int(M)\n    num_prefectures = int(input())\n\n    pref_id = []\n    cities = []\n    for i in range(1, num_prefectures + 1):\n        pref_id.append(str(i))\n        cities.append([])\n\n    for i in range(M):\n        x, y = input().split()\n        x, y = int(x), int(y)\n        cities[x - 1].append(y)\n\n    pref_id_str = ''.join(pref_id)\n    cities_str =''.join(map(str, cities))\n    print(pref_id_str, cities_str)\n    return pref_id_str, cities_str\n\nsolution(\"2 3\\n1 32\\n2 63\\n1 12\")\n"
    },
    {
        "number": 4131,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.strip().split())\n    p_index = 0\n    c_index = 0\n    cities = []\n    while p_index < N and c_index < M:\n        p, y = map(int, stdin.strip().split())\n        if y == p_index:\n            cities.append(p)\n            p_index += 1\n        else:\n            c_index += 1\n    cities.sort()\n    for city in cities:\n        print(f\"{city} {''.join(str(city)[:6] + str(city)[6:].rjust(6, '0'))}\")\n    return \"\"\n"
    },
    {
        "number": 4132,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N: int = int(stdin)\n    alive_monsters: List[int] = []\n    for i in range(N):\n        alive_monsters.append(int(stdin))\n\n    heapq.heapify(alive_monsters)\n    while alive_monsters:\n        # print(alive_monsters)\n        monster = heapq.heappop(alive_monsters)\n        # print(f\"Monster: {monster}\")\n        monster_health = monster\n        # print(f\"Monster Health: {monster_health}\")\n        monsters_health = sum(alive_monsters)\n        # print(f\"Monster + Monsters Health: {monsters_health}\")\n\n        # Attack\n        monster_health -= monsters_health\n        if monster_health > 0:\n            # print(f\"Monster is still alive after attack. Health: {monster_health}\")\n            heapq.heappush(alive_monsters, monster_health)\n            # print(f\"Alive Monsters: {alive_monsters}\")\n        # Else: the monster is dead.\n        else:\n            # print(f\"Monster died after attack. Health: {monster_health}\")\n            break\n\n    return str(monster)"
    },
    {
        "number": 4132,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    alive = list(map(int, stdin.split()))\n    min_health = 2\n    for i in range(N):\n        if alive[i] <= 0:\n            continue\n        alive[i] -= 1\n        for j in range(N):\n            if alive[j] <= 0:\n                continue\n            alive[j] -= alive[i]\n        if alive[i] <= 0:\n            break\n        min_health = min(min_health, alive[i])\n    return str(min_health)"
    },
    {
        "number": 4132,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, *l = map(int, stdin.split())\n    min_health = 10**9\n    monsters = []\n    for i in range(n):\n        health = int(l[i])\n        min_health = min(min_health, health)\n        monsters.append(health)\n    while len(monsters) > 1:\n        monsters.sort()\n        if monsters[0] > monsters[1]:\n            monsters[0] -= monsters[1]\n            monsters.pop(1)\n        else:\n            monsters[0] -= monsters[0]\n            monsters.pop(0)\n    return str(min_health)\n"
    },
    {
        "number": 4132,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    n = int(stdin)\n    monsters = stdin.split()\n    monsters = [int(m) for m in monsters]\n    # print(monsters)\n    monsters.sort()\n    monsters.reverse()\n    # print(monsters)\n    max_health = max(monsters)\n    alive = 0\n    for m in monsters:\n        if alive < max_health - m:\n            alive += m\n        else:\n            break\n    # print(alive)\n    return alive"
    },
    {
        "number": 4132,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    alive_monsters = list(filter(lambda x: x >= 1, a))\n    i = 0\n    while alive_monsters:\n        if i == len(alive_monsters) - 1:\n            break\n        a = alive_monsters[i]\n        b = alive_monsters[i + 1]\n        a_to_b = min(a, b)\n        alive_monsters[i] -= a_to_b\n        alive_monsters[i + 1] -= a_to_b\n        i += 2\n    return str(alive_monsters[0])\n"
    },
    {
        "number": 4132,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, *alive = map(int, stdin.split())\n    for i in range(1, n):\n        alive[i] -= alive[i-1]\n    print(min(alive))\n    return ''\n\nsolution(input())\n"
    },
    {
        "number": 4132,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    hp = list(map(int, stdin.split()[1].split()))\n    best_health = 10 ** 10\n\n    def count_monsters(hp: list) -> int:\n        nonlocal best_health\n        if len(hp) == 1:\n            return 1\n\n        curr_monsters = 1\n        for i in range(1, len(hp)):\n            curr_health = hp[i] - hp[i - 1]\n            if curr_health < 0:\n                curr_health = 0\n\n            if curr_health > best_health:\n                best_health = curr_health\n            if curr_health == 0:\n                curr_monsters += 1\n\n        return curr_monsters\n\n    while True:\n        curr_monsters = count_monsters(hp)\n\n        if curr_monsters == 1:\n            print(best_health)\n            return\n\n        for i in range(len(hp)):\n            hp[i] = hp[i] - 1\n\n\nsolution(\"4\\n2 10 8 40\\n\")\n"
    },
    {
        "number": 4132,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    arr = list(map(int, stdin.strip().split()))\n    monsters = []\n    alive_monsters = []\n    for i in range(1, N+1):\n        if arr[i-1] >= 1:\n            monsters.append(arr[i-1])\n            alive_monsters.append(i)\n\n    for i in range(1, len(alive_monsters)):\n        for j in range(i+1, len(alive_monsters)):\n            monsters[alive_monsters[i]-1] -= max(1, monsters[alive_monsters[j]-1])\n    return alive_monsters[0]\n    # pass\n\ndef"
    },
    {
        "number": 4132,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, A_arr = stdin.split()\n    N = int(N)\n    A_arr = list(map(int, A_arr.split()))\n    if N == 1:\n        return str(A_arr[0])\n    for _ in range(N - 1):\n        for i in range(1, N):\n            if A_arr[i] > 0:\n                A_arr[i] -= 1\n            if A_arr[i] == 0:\n                A_arr[i] = min(A_arr[:i]) + 1\n    return str(max(A_arr))\n"
    },
    {
        "number": 4132,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    monsters = list(map(int, stdin.split()[1:]))\n    alive = []\n\n    for i in range(1, n + 1):\n        if monsters[i - 1] >= i:\n            alive.append(i)\n\n    while len(alive)!= 1:\n        monster_1 = random.choice(alive)\n        alive.remove(monster_1)\n\n        monster_2 = random.choice(alive)\n        alive.remove(monster_2)\n\n        monster_1_damage = monsters[monster_1 - 1] - monsters[monster_2 - 1]\n\n        monsters[monster_2 - 1] = max(0, monsters[monster_2 - 1] - monster_1_damage)\n\n    return str(monsters[0])"
    },
    {
        "number": 4133,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    all_vars = []\n    for i in range(len(stdin)):\n        all_vars.append(stdin[i][0])\n        all_vars.append(stdin[i][1])\n    all_vars = set(all_vars)\n    return '0' if len(all_vars) > 10 else '1'\n"
    },
    {
        "number": 4133,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid_diet(diet_name: str) -> bool:\n        diet_split = diet_name.split(\"|\")\n        if len(diet_split)!= 2:\n            return False\n        diet_type = diet_split[0]\n        diet_values = diet_split[1].split(\",\")\n        for val in diet_values:\n            if not val.isdigit():\n                return False\n        return True\n    diet_names = list()\n    stdin = stdin.split(\"\\n\")\n    for line in stdin:\n        if line!= \"\":\n            diet_names.append(line)\n    diet_names.sort()\n    answer = list()\n    for name in diet_names:\n        if is_valid_diet(name):\n            answer.append(name)\n        else:\n            answer.append(\"false\")\n    return \",\".join(answer)\n"
    },
    {
        "number": 4133,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Reads a line of inputs from stdin (according to the language's specification) and returns the closest sequence of variable values as a single string.\n    \n    >>> solution('')\n    '0000'\n    >>> solution('?(_-/___*__):-___>__.\\n')\n    '0010'\n    >>> solution('?(___-_+_/_____):-__>__,_____<__.\\n')\n    'false'\n    >>> solution('?(______________________/____+_______*__-_____*______-___):-__<___,___<____,____<_____,_____<______,______<_______.\\n')\n    '0250341'\n    >>> solution('?(__+___+__-___):-___>__.\\n')\n    '0101'\n    \"\"\"\n    pass\n"
    },
    {
        "number": 4133,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time complexity: O(N * M)\n    where N and M are the length of the longest name.\n    This complexity is dominated by the two nested loop that iterate over both the golorps' names and the variables.\n\n    Space complexity: O(N)\n    This complexity is dominated by the string with length of the longest name.\n    \"\"\"\n    max_len = max(len(stdin.split(':-')) for stdin in stdin.split('\\n'))\n    # max_len = max(len(stdin.split('_')) for stdin in stdin.split('\\n'))\n    # max_len = max(len(stdin.split('/')) for stdin in stdin.split('\\n'))\n    # max_len = max(len(stdin.split('-')) for stdin in stdin.split('\\n'))\n    # max_len = max(len(stdin.split('_')) for stdin in stdin.split('\\n'))\n    # max_len = max(len(stdin.split('+')) for stdin in stdin.split('\\n'))\n    # max_len = max(len(stdin.split('-')) for stdin in stdin.split('\\n'))\n    # max_len = max(len(stdin.split('_')) for stdin in stdin.split('\\n'))\n    # max_len = max(len(stdin.split('+')) for stdin in stdin.split('\\n'))\n    # max_len = max(len(stdin.split('_')) for stdin in stdin.split('\\n'))\n    # max_len = max(len(stdin.split('_')) for stdin in stdin.split('\\n'))\n    # max_len = max(len(stdin.split('_')) for stdin in stdin.split('\\n'))\n    # max_len = max(len(stdin.split('_')) for stdin in stdin.split('\\n'))\n    max_len = max(len(stdin.split('+')) for stdin in stdin.split('\\n'))\n    max_len = max(len(stdin.split('-')) for stdin in stdin.split('\\n'))\n    max_len = max(len(stdin.split('_')) for stdin in stdin.split('\\n'))\n    max_len = max(len(stdin.split('+')) for stdin in stdin.split('\\n'))\n    max_len = max(len(stdin.split('-')) for stdin in stdin.split('\\n'))\n    max_len = max(len(stdin.split('_')) for stdin in stdin.split('\\n'))\n    max_len = max(len(stdin.split('+')) for stdin in stdin.split('\\n'))\n    max_len = max(len(stdin.split('-')) for stdin in stdin.split('\\n'))\n    max_len = max(len(stdin.split('_')) for stdin in stdin.split('\\n'))\n    max_len = max(len(stdin.split('+')) for stdin in stdin.split('\\n'))\n    max_len = max(len(stdin.split('-')) for stdin in stdin.split('\\n'))\n    max_len = max(len(stdin.split('_')) for stdin in stdin.split('\\n'))\n    max_len = max(len(stdin.split('+')) for stdin in stdin.split('\\n'))\n    max_len = max(len(stdin.split('-')) for stdin in stdin.split('\\n'))\n    max_len = max(len(stdin.split('_')) for stdin in stdin.split('\\n'))\n    max_len = max(len(stdin.split('+')) for stdin in stdin.split('\\n'))\n    max_len = max(len(stdin.split('-')) for stdin in stdin.split('\\n'))\n    max_len = max(len(stdin.split('_')) for stdin in stdin.split('\\n'))\n    max_len = max(len(stdin.split('+')) for stdin in stdin.split('\\n'))\n    max_len = max(len(stdin.split('-')) for stdin in stdin.split('\\n'))\n    max_len = max(len(stdin.split('_')) for stdin in stdin.split('\\n'))\n    max_len = max(len(stdin.split('+')) for stdin in stdin.split('\\n'))\n    max_len = max(len(stdin.split('-')) for stdin in stdin.split('\\n'))\n    max_len = max(len(stdin.split('_')) for stdin in stdin.split('\\n'))\n    max_len = max(len(stdin.split('+')) for stdin in stdin.split('\\n'))\n    max_len = max(len(stdin.split('-')) for stdin in stdin.split('\\n'))\n    max_len = max(len(stdin.split('_')) for stdin in stdin.split('\\n'))\n    max_len = max(len(stdin.split('+')) for stdin in stdin.split('\\n'))\n    max_len = max(len(stdin.split('-')) for stdin in stdin.split('\\n'))\n    max_len = max(len(stdin.split('_')) for stdin in stdin.split('\\n'))\n    max_len = max(len(stdin.split('+')) for stdin in stdin.split('\\n'))\n    max_len = max(len(stdin.split('-')) for stdin in stdin.split('\\n'))\n    max_len = max(len(stdin.split('_')) for stdin in stdin.split('\\n'))\n    max_len = max(len(stdin.split('+')) for stdin in stdin.split('\\n'))\n    max_len = max(len(stdin.split('-')) for stdin in stdin.split('\\n'))\n    max_len = max(len(stdin.split('_')) for stdin in stdin"
    },
    {
        "number": 4133,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Given a string of golorps' daily diet, your task is to find the lexicographically smallest sequence of variable values that fulfill it. For any golorp, the number of variables is defined by the shape of its jaws. The number of variable values (1 to 9) should be lexicographically smallest among all possible sequences. Return \"false\" if there are no solutions.\n\n    Your task is not to use the string of golorps directly.\n    \"\"\"\n    s = stdin\n    count = 0\n    if s[0] == \"?(\":\n        return False\n    elif s[0] == \"(\":\n        return \"0101\"\n    elif s[0] == \",\":\n        return \"0101\"\n    elif s[0] == \")\":\n        return False\n    else:\n        for i in range(len(s)-1):\n            if s[i] == \")\":\n                break\n            elif s[i+1] == \",\":\n                return \"false\"\n    for i in range(len(s)-1):\n        if s[i] == \",\":\n            count += 1\n    return s[count:]\n"
    },
    {
        "number": 4133,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''The input is a single string. Return the lexicographically smallest sequence of variable values fit for feeding this golorp.'''\n    # pass\n"
    },
    {
        "number": 4133,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"*** YOUR CODE HERE ***\"\n    return \"wrong input\"\n"
    },
    {
        "number": 4133,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    all_variables = set(range(10))\n    all_digits = set(range(10))\n    for stdin_line in stdin.splitlines():\n        jaws, stomach = stdin_line.split('(', 1)\n        jaws = set(list(map(int, jaws.split('+'))))\n        stomach = set(list(map(int, stomach.split('*'))))\n        if (jaws - all_digits) or (stomach - all_digits):\n            return 'false'\n        jaws = jaws.union(all_digits)\n        stomach = stomach.union(all_digits)\n        if jaws.intersection(stomach):\n            jaws = jaws.intersection(stomach)\n            jaws = list(jaws)\n            jaws.sort()\n            return ''.join(map(str, jaws))\n    all_digits = all_digits.intersection(jaws, stomach)\n    all_digits = list(all_digits)\n    all_digits.sort()\n    return ''.join(map(str, all_digits))\n"
    },
    {
        "number": 4133,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.split(':-')[-1]"
    },
    {
        "number": 4133,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return None"
    },
    {
        "number": 4134,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = [[int(i) for i in stdin.split()] for _ in range(m)]\n\n    def xor(a, b):\n        return a ^ b\n\n    def solve(i, j):\n        if i == n and j == m:\n            return xor(xor(xor(a[n - 1][m - 1], a[n - 1][j]), a[n - 1][i]), xor(a[n - 1][j - 1], a[n - 1][i - 1]))\n        elif i == n or j == m:\n            return xor(xor(xor(xor(a[n - 1][m - 1], a[i][m - 1]), a[n - 1][j]), xor(a[n - 1][j - 1], a[i - 1][m - 1])), xor(a[n - 1][j - 1], a[i - 1][j]))\n        else:\n            return xor(xor(xor(xor(xor(xor(xor(xor(a[n - 1][j], a[i][m - 1]), xor(a[n - 1][j - 1], a[i - 1][m - 1])), xor(a[n - 1][j - 1], a[i - 1][j])), xor(a[n - 1][j - 1], a[i - 1][j - 1])), xor(a[n - 1][j - 1], a[i][j])), xor(a[n - 1][j - 1], a[i][j - 1])), xor(a[n - 1][j - 1], a[i - 1][j - 1]))\n\n    return str(solve(0, 0))\n"
    },
    {
        "number": 4134,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, input().split())\n    data = [list(map(int, input().split())) for _ in range(n)]\n    paths = 0\n    for i in range(n):\n        for j in range(m):\n            if (i + 1, j) in data[i]:\n                if (i + 1, j + 1) in data[i]:\n                    if (i, j) in data[i + 1]:\n                        if (i + 1, j + 1) in data[i + 1]:\n                            if (i, j) in data[i + 2]:\n                                if (i + 1, j) in data[i + 2]:\n                                    paths += 1\n    return str(paths)\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4134,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    (n, m, k) = list(map(int, stdin.split()))\n    grid = []\n    for _ in range(n):\n        row = list(map(int, stdin.split()))\n        grid.append(row)\n    result = count_paths(grid, 1, 1, k)\n    return str(result)\n\n\ndef"
    },
    {
        "number": 4134,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = stdin.split()\n    n, m, k = int(n), int(m), int(k)\n    grid = []\n    for i in range(n):\n        grid.append([])\n        for j in range(m):\n            grid[i].append(int(stdin.split()[i * m + j]))\n    ans = 0\n    for i in range(n):\n        for j in range(m):\n            if (i, j) == (1, 1):\n                ans += get_path(i, j, n, m, grid, k)\n    return str(ans)\n\n\ndef"
    },
    {
        "number": 4134,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n  n, m, k = map(int, stdin.split())\n  matrix = []\n  for i in range(n):\n    row = list(map(int, stdin.split()))\n    matrix.append(row)\n  \n  # rows = n\n  # columns = m\n  \n  # ans = 0\n  # for i in range(rows):\n  #   for j in range(columns):\n  #     x = xor(matrix[i][j], matrix[i][j+1])\n  #     if x == k:\n  #       ans += 1\n  \n  # return str(ans)\n\n  rows = n\n  columns = m\n  ans = 0\n  for i in range(rows):\n    for j in range(columns):\n      x = xor(matrix[i][j], matrix[i][j+1])\n      if x == k:\n        ans += 1\n  \n  return str(ans)\n"
    },
    {
        "number": 4134,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n  n, m, k = list(map(int, stdin.split()))\n  arr = [[int(x) for x in stdin.split()] for _ in range(n)]\n  q = deque()\n  for i in range(1, n+1):\n    for j in range(1, m+1):\n      q.append((i, j))\n\n  while q:\n    r, c = q.popleft()\n    if r == n and c == m:\n      return (r * c) ^ k\n    for i in range(1, n+1):\n      if 0 <= i-r <= n and 0 <= c-i <= m and arr[i-r][c-i] == 1:\n        q.append((i, c))\n        arr[i-r][c-i] = 0\n    for j in range(1, m+1):\n      if 0 <= i-j <= n and 0 <= c-i <= m and arr[i-j][c-i] == 1:\n        q.append((r, j))\n        arr[i-j][c-i] = 0\n  return \"0\"\n"
    },
    {
        "number": 4134,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n  _, _, k = stdin.split()\n  n, m, k = int(n), int(m), int(k)\n  paths = 0\n  for i in range(n):\n    for j in range(m):\n      if xor(i, j) == int(k):\n        paths += 1\n  return str(paths)\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4134,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n  stdin = stdin.split(\"\\n\")\n  n, m, k = map(int, stdin[0].split())\n  arr = list(map(int, stdin[1].split()))\n  dp = [[0 for i in range(m+1)] for j in range(n+1)]\n  dp[1][1] = 1\n  def dfs(i, j, k, l):\n    if i == n or j == m:\n      return dp[i][j]\n    if dp[i][j] > 0:\n      return dp[i][j]\n    if k == l:\n      return 1\n    if k == 0:\n      dp[i][j] = 0\n    else:\n      dp[i][j] = (dfs(i+1, j, k, l) + dfs(i, j+1, k, l)) % (10**9 + 7)\n    return dp[i][j]\n  return str(dfs(1, 1, k, arr[0]))\n\nsolution(\"\"\"\n3 3 11\n2 1 5\n7 10 0\n12 6 4\n\"\"\")\n\nsolution(\"\"\"\n3 4 2\n1 3 3 3\n0 3 3 2\n3 0 1 1\n\"\"\")\n\nsolution(\"\"\"\n3 4 1000000000000000000\n1 3 3 3\n0 3 3 2\n3 0 1 1\n\"\"\")\n"
    },
    {
        "number": 4134,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n  def xor_of_two_numbers(x, y):\n    return x ^ y\n  n, m, k = map(int, stdin.split())\n  if k == 0:\n    print(0)\n    return\n  count = 0\n  def calculate_paths(i, j):\n    nonlocal count\n    if i == n:\n      count += 1\n      return\n    if j == m:\n      return\n    if i > 0 and xor_of_two_numbers(a_grid[i - 1][j], a_grid[i][j]) == 0:\n      calculate_paths(i - 1, j)\n    if i < n - 1 and xor_of_two_numbers(a_grid[i + 1][j], a_grid[i][j]) == 0:\n      calculate_paths(i + 1, j)\n    if j > 0 and xor_of_two_numbers(a_grid[i][j - 1], a_grid[i][j]) == 0:\n      calculate_paths(i, j - 1)\n    if j < m - 1 and xor_of_two_numbers(a_grid[i][j + 1], a_grid[i][j]) == 0:\n      calculate_paths(i, j + 1)\n  a_grid = []\n  for i in range(n):\n    row = list(map(int, stdin.split()))\n    a_grid.append(row)\n  calculate_paths(0, 0)\n  print(count)\n  return\n\nsolution(input())\n\n'''"
    },
    {
        "number": 4134,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = list(map(int, stdin.split()))\n    grid = []\n    for _ in range(n):\n        grid.append(list(map(int, stdin.split())))\n    # print(grid)\n    return str(find(1, 1, n, m, grid, k))\n\n\ndef"
    },
    {
        "number": 4135,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return\n"
    },
    {
        "number": 4135,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    for i in range(n):\n        for j in range(i+1, n):\n            if j - i == 1 and s[i] == s[j]:\n                s = s[:i] + s[i:j][::-1] + s[j:]\n                break\n    return s\n\nstdin = input()\nprint(solution(stdin))\n"
    },
    {
        "number": 4135,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Brute force solution\n    \"\"\"\n    n = int(stdin)\n    s = stdin\n    for i in range(n):\n        if i == 0:\n            s = s[::-1]\n            continue\n        s = s[1:].join(s[0])[::-1]\n    return s\n"
    },
    {
        "number": 4135,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\n'''"
    },
    {
        "number": 4135,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4135,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # --- Your code goes here ---\n    t = stdin\n    while True:\n        n = len(t)\n        reversed_t = t[::-1]\n        for div in range(n, 0, -1):\n            reverse_substring = reversed_t[:div]\n            t = t.replace(reverse_substring, '', 1)\n        if len(t) == 0:\n            break\n    return t"
    },
    {
        "number": 4135,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    enc = stdin.strip()\n    if n <= 1:\n        return stdin\n    enc = enc[::-1]\n    return enc\n"
    },
    {
        "number": 4135,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('')\n    ''\n    >>> solution('h')\n    'h'\n    >>> solution('h')\n    'h'\n    >>> solution('abc')\n    'abc'\n    >>> solution('hello')\n    'hello'\n    >>> solution('hello')\n    'olleh'\n    >>> solution('hello')\n    'elolh'\n    \"\"\"\n    n = int(stdin)\n    s = stdin.upper()\n    print(s)\n    return s"
    },
    {
        "number": 4135,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # print(stdin)\n    t = stdin.split()\n    n = int(t[0])\n    s = t[1]\n    s = list(s)\n    #print(s)\n    div = []\n    for i in range(1, n+1):\n        if n%i == 0:\n            div.append(i)\n    div.sort(reverse=True)\n    for i in div:\n        s = s[:i] + s[i::-1]\n        #print(s)\n    return ''.join(s)\n"
    },
    {
        "number": 4135,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('')\n    ''\n    >>> solution('z')\n    'z'\n    >>> solution('t')\n    't'\n    >>> solution('aa')\n    'aa'\n    >>> solution('abcdefg')\n    'abcdefg'\n    >>> solution('12345')\n    '12345'\n    >>> solution('a12345')\n    'a12345'\n    >>> solution('a123456')\n    'a123456'\n    >>> solution('abcdefghijk')\n    'abcdefghijk'\n    >>> solution('kitten')\n    'kitit'\n    >>> solution('zxy')\n    'zyx'\n    >>> solution('iiiii')\n    'i'\n    >>> solution('abc')\n    'ab'\n    >>> solution('plmaetwoxesisiht')\n    'thisisexampletwo'\n    >>> solution('thisisexampletwo')\n    'thisisexampletwo'\n    >>> solution('hello')\n    'hello'\n    >>> solution('zhi')\n    'hi'\n    \"\"\"\n    n = int(stdin)\n    letters = stdin\n    total = 0\n    divisors = []\n    # this is for the number of divisors\n    for i in range(1, n + 1):\n        divisors.append(i)\n    while total < len(letters):\n        divisor_count = 0\n        for i in range(1, n + 1):\n            if (i == 1 or i == n) and letters[total:total + i]!= letters[total:total + i][::-1]:\n                divisor_count += 1\n            if divisor_count == len(divisors):\n                break\n            elif divisor_count < len(divisors):\n                divisors.remove(divisors[divisor_count])\n        total += i\n    return ''.join(letters[total:total + n])\n"
    },
    {
        "number": 4136,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(sum([a,b]))\n"
    },
    {
        "number": 4136,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(sum([a, b]))\nprint(solution(input()))"
    },
    {
        "number": 4136,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a + b)\n"
    },
    {
        "number": 4136,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(sum([int(n) for n in stdin.split()]))"
    },
    {
        "number": 4136,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a,b= map(int,stdin.split())\n    print(a+b)\n    return \"\"\n\nstdin= \"5 14\"\nsolution(stdin)\n"
    },
    {
        "number": 4136,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split(\" \")\n    a, b = int(a), int(b)\n    return str(a + b)\n"
    },
    {
        "number": 4136,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = list(map(int, stdin.split()))\n    return str(sum(range(a, b + 1)))"
    },
    {
        "number": 4136,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = list(map(int, stdin.split()))\n    return str(a + b)\n"
    },
    {
        "number": 4136,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(sum([a,b]))"
    },
    {
        "number": 4136,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return sum(map(int, stdin.split()))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4137,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    while stdin:\n        yield stdin[0]\n        stdin = stdin[1:] + stdin[:1]\n\n    while stdin:\n        x = stdin.pop(0)\n        if x == '>':\n            yield '+>'\n        elif x == '<':\n            yield '-<'\n        elif x == '+':\n            yield '<[->-'\n        elif x == '-':\n            yield '<[<+-'\n\n    yield ''\n"
    },
    {
        "number": 4137,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # read input from pipe\n    lines = stdin.splitlines()\n    # convert to an array\n    lines = map(lambda x: x.strip(), lines)\n    # strip out empty lines\n    lines = filter(lambda x: x, lines)\n    # split and convert each line to a list\n    lines = map(lambda x: list(map(lambda y: int(y), x.split('+'))), lines)\n    # filter out lines without two values\n    lines = filter(lambda x: len(x) == 2, lines)\n    # convert each number to an unsigned 8-bit number\n    lines = map(lambda x: list(map(lambda y: (y & 0xFF), x)), lines)\n    # convert to a generator\n    for line in lines:\n        yield ''.join(map(lambda x: x.encode(), line))\n"
    },
    {
        "number": 4137,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n  buffer = []\n  command_stack = []\n  brackets = 0\n  for i in stdin:\n    if i == \"[\":\n      brackets += 1\n      command_stack.append(i)\n    elif i == \"]\":\n      brackets -= 1\n      if brackets == 0:\n        command = command_stack.pop()\n        for j in range(brackets):\n          command = command + \"]\"\n        command = command + i\n        buffer.append(command)\n    elif brackets == 0:\n      buffer.append(i)\n  return \"\".join(buffer)\n\n\nInput\n2+3\n\nOutput\n++>\n+++>\n<[<+>-]<\n++++++++++++++++++++++++++++++++++++++++++++++++.\n\nInput\n9-7\n\nOutput\n+++++++++>\n+++++++>\n<[<->-]<\n++++++++++++++++++++++++++++++++++++++++++++++++.\n\n\n\"\"\""
    },
    {
        "number": 4137,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = 0\n    m = 0\n    \n    f = open(\"./data/brainfuck.txt\", 'r')\n    \n    code = f.read()\n    \n    while code[n]!= '>':\n        n += 1\n    \n    n += 1\n    \n    while code[n]!= '<':\n        n += 1\n    \n    n += 1\n    \n    while code[n]!= '+':\n        n += 1\n    \n    n += 1\n    \n    while code[n]!= '-':\n        n += 1\n    \n    n += 1\n    \n    while code[n]!= '<':\n        n += 1\n    \n    n += 1\n    \n    while code[n]!= '[' and code[n]!= ']':\n        n += 1\n    \n    n += 1\n    \n    while code[n]!= '[' and code[n]!= ']':\n        n += 1\n    \n    n += 1\n    \n    while code[n]!= '[' and code[n]!= ']':\n        n += 1\n    \n    n += 1\n    \n    while code[n]!= '<':\n        n += 1\n    \n    n += 1\n    \n    while code[n]!= '>':\n        n += 1\n    \n    n += 1\n    \n    while code[n]!= '+':\n        n += 1\n    \n    n += 1\n    \n    while code[n]!= '-':\n        n += 1\n    \n    n += 1\n    \n    while code[n]!= '<':\n        n += 1\n    \n    n += 1\n    \n    while code[n]!= '[' and code[n]!= ']':\n        n += 1\n    \n    n += 1\n    \n    while code[n]!= '[' and code[n]!= ']':\n        n += 1\n    \n    n += 1\n    \n    while code[n]!= '[' and code[n]!= ']':\n        n += 1\n    \n    n += 1\n    \n    while code[n]!= '[' and code[n]!= ']':\n        n += 1\n    \n    n += 1\n    \n    while code[n]!= '[' and code[n]!= ']':\n        n += 1\n    \n    n += 1\n    \n    while code[n]!= '<':\n        n += 1\n    \n    n += 1\n    \n    while code[n]!= '>':\n        n += 1\n    \n    n += 1\n    \n    while code[n]!= '+':\n        n += 1\n    \n    n += 1\n    \n    while code[n]!= '-':\n        n += 1\n    \n    n += 1\n    \n    while code[n]!= '<':\n        n += 1\n    \n    n += 1\n    \n    while code[n]!= '[' and code[n]!= ']':\n        n += 1\n    \n    n += 1\n    \n    while code[n]!= '<':\n        n += 1\n    \n    n += 1\n    \n    while code[n]!= '>':\n        n += 1\n    \n    n += 1\n    \n    while code[n]!= '+':\n        n += 1\n    \n    n += 1\n    \n    while code[n]!= '-':\n        n += 1\n    \n    n += 1\n    \n    while code[n]!= '<':\n        n += 1\n    \n    n += 1\n    \n    while code[n]!= '[' and code[n]!= ']':\n        n += 1\n    \n    n += 1\n    \n    while code[n]!= '<':\n        n += 1\n    \n    n += 1\n    \n    while code[n]!= '>':\n        n += 1\n    \n    n += 1\n    \n    while code[n]!= '+':\n        n += 1\n    \n    n += 1\n    \n    while code[n]!= '-':\n        n += 1\n    \n    n += 1\n    \n    while code[n]!= '<':\n        n += 1\n    \n    n += 1\n    \n    while code[n]!= '[' and code[n]!= ']':\n        n += 1\n    \n    n += 1\n    \n    while code[n]!= '<':\n        n += 1\n    \n    n += 1\n    \n    while code[n]!= '>':\n        n += 1\n    \n    n += 1\n    \n    while code[n]!= '+':\n        n += 1\n    \n    n += 1\n    \n    while code[n]!= '-':\n        n += 1\n    \n    n += 1\n    \n    while code[n]!= '<':\n        n += 1\n    \n    n += 1\n    \n    while code[n]!= '[' and code[n]!= ']':\n        n += 1\n    \n    n += 1\n    \n    while code[n]!= '<':\n        n += 1\n    \n    n += 1\n    \n    while code[n]!= '>':\n        n += 1\n    \n    n += 1\n    \n    while code[n]!= '+':\n        n += 1\n    \n    n += 1\n    \n    while code[n]!= '-':\n        n += 1\n    \n    n += 1\n    \n    while code[n]!= '<':\n        n += 1\n    \n    n += 1\n    \n    while code[n]!= '[' and code[n]!= ']':\n        n += 1\n    \n    n += 1\n    \n    while code[n]!= '<':\n        n += 1\n    \n    n += 1\n    \n    while code[n]!= '>':\n        n += 1\n    \n    n += 1\n    \n    while code[n]!= '+':\n        n += 1\n    \n    n += 1\n    \n    while code[n]!= '-':\n        n += 1\n    \n    n += 1\n    \n    while code[n]!= '<':\n        n += 1\n    \n    n += 1\n    \n    while code[n]!= '>':\n        n += 1\n    \n    n += 1\n    \n    while code[n]!= '+':\n        n += 1\n    \n    n += 1\n    \n    while code[n]!= '-':\n        n += 1\n    \n    n += 1\n    \n    while code[n]!= '<':\n        n += 1\n    \n    n += 1\n    \n    while code[n]!= '[' and code[n]!= ']':\n        n += 1\n    \n    n += 1\n    \n    while code[n]!= '<':\n        n += 1\n    \n    n += 1\n    \n    while code[n]!= '>':\n        n += 1\n    \n    "
    },
    {
        "number": 4137,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\nstdin = stdin.replace(\",\", \"++>\").replace(\"+\", \"+++>\").replace(\"-\", \"<<<\").replace(\"]\", \">[->\")\n\nprint(f\"+++>{stdin}<\")\n\nfor stdin in stdin.split(\"\\n\"):\n    if stdin == \"\":\n        print(\"++>\")\n        continue\n\n    stdin = stdin.replace(\"<\", \">\").replace(\"[\", \">\")\n    stdin = stdin.replace(\"]\", \"<\")\n    print(stdin)\n    tape = []\n    for c in stdin:\n        if c == \">\":\n            tape.append(c)\n            continue\n\n        if c == \"<\":\n            if tape:\n                tape.pop()\n                continue\n\n        if c == \"+\":\n            tape.append(\"++\")\n            continue\n\n        if c == \"-\":\n            tape.append(\"--\")\n            continue\n\n        if c == \"[\":\n            tape.append(\"[<\")\n            continue\n\n        if c == \"]\":\n            tape.append(\"]<\")\n            continue\n\n        tape.append(c)\n\n    tape = \"\".join(tape)\n    if tape:\n        print(tape)\n    print()\n"
    },
    {
        "number": 4137,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n\n    initial_memory = int(lines[0])\n    memory = initial_memory\n    output = \"\"\n    \n    for line in lines[1:]:\n        command, value = line.split()\n        value = int(value)\n        \n        if command == \"+\":\n            memory += value\n        elif command == \"-\":\n            memory -= value\n        elif command == \"<\":\n            memory -= value\n        elif command == \">\":\n            memory += value\n        elif command == \"[\":\n            if memory == value:\n                output += \"+>\"\n            else:\n                output += \"<+\"\n        elif command == \"]\":\n            if memory!= value:\n                output += \"<-\"\n            else:\n                output += \"]\"\n        else:\n            raise ValueError(\"Unknown command {}\".format(command))\n    \n    return output + \"\\n\"\n\n----TESTS----"
    },
    {
        "number": 4137,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def read_until_next(s, c):\n        x = \"\"\n        while True:\n            x += s.pop()\n            if x[-1] == c:\n                break\n        return x\n\n    def interpret_one(s):\n        if s[0] == \">\":\n            s.pop()\n            s.extend(\">-\")\n            s.pop()\n        elif s[0] == \"<\":\n            s.pop()\n            s.extend(\"<+\")\n            s.pop()\n        elif s[0] == \"+\":\n            s.pop()\n            s.extend(\"+>\")\n            s.pop()\n        elif s[0] == \"-\":\n            s.pop()\n            s.extend(\"-<\")\n            s.pop()\n\n    def interpret_two(s):\n        if s[0] == \"[\":\n            s.pop()\n            s.extend(\"<+>\")\n            s.pop()\n        elif s[0] == \"]\":\n            s.pop()\n            s.extend(\"<-\")\n            s.pop()\n\n    def interpret_three(s):\n        if s[0] == \".\":\n            s.pop()\n            s.extend(\"<+>\")\n            s.pop()\n        else:\n            s.pop()\n            s.extend(\"<-\")\n            s.pop()\n\n    def interpret_four(s):\n        if s[0] == \",\":\n            s.pop()\n            s.extend(\"<-\")\n            s.pop()\n        else:\n            s.pop()\n            s.extend(\"<+>\")\n            s.pop()\n\n    s = list(stdin)\n    while len(s) > 0:\n        interpret_one(s)\n        interpret_two(s)\n        interpret_three(s)\n        interpret_four(s)\n    return read_until_next(s, \">\")\n\n\nprint(interpret_one(\"a\"))\nprint(interpret_two(\"b\"))\nprint(interpret_three(\"c\"))\nprint(interpret_four(\"d\"))\nprint(interpret_one(\"a\"))\nprint(interpret_two(\"b\"))\nprint(interpret_three(\"c\"))\nprint(interpret_four(\"d\"))\n"
    },
    {
        "number": 4137,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    memory = [0] * 30000\n    ptr = 0\n    result = ''\n    while True:\n        if stdin[ptr] == '>':\n            ptr += 1\n            continue\n        if stdin[ptr] == '<':\n            ptr += 1\n            continue\n        if stdin[ptr] == '-':\n            memory[ptr] -= 1\n            ptr += 1\n            continue\n        if stdin[ptr] == '+':\n            memory[ptr] += 1\n            ptr += 1\n            continue\n        if stdin[ptr] == '[':\n            ptr += 1\n            while memory[ptr] == 0:\n                ptr += 1\n                if ptr == n:\n                    break\n            continue\n        if stdin[ptr] == ']':\n            ptr -= 1\n            while memory[ptr]!= 0:\n                ptr -= 1\n                if ptr == 0:\n                    break\n            continue\n\n        if ptr == n:\n            break\n        memory[ptr] = ord(stdin[ptr])\n        ptr += 1\n    while result == '' or result[-1]!= '\\n':\n        temp = memory[0]\n        memory[0] = memory[1]\n        memory[1] = memory[2]\n        memory[2] = temp\n        if memory[0] == memory[1] and memory[1] == memory[2]:\n            result = str(memory[0]) + '\\n' + result\n        else:\n            result += str(memory[0]) + '\\n'\n    return result\n\n-----Test Cases-----\nInput\n7+3\n\nOutput\n+++++++++>\n+>[>+<]<\n+++++++++>\n+>[>+<]<\n+++++++++>\n+>[>+<]<\n+++++++++>\n+>[>+<]<\n+++++++++>\n+>[>+<]<\n+++++++++>\n+>[>+<]<\n+++++++++>\n+>[>+<]<\n+++++++++>\n+>[>+<]<\n+++++++++>\n+>[>+<]<\n+++++++++>\n+>[>+<]<\n+++++++++>\n+>[>+<]<\n+++++++++>\n+>[>+<]<\n+++++++++>\n+>[>+<]<\n+++++++++>\n+>[>+<]<\n+++++++++>\n+>[>+<]<\n+++++++++>\n+>[>+<]<\n+++++++++>\n+>[>+<]<\n+++++++++>\n+>[>+<]<\n+++++++++>\n+>[>+<]<\n+++++++++>\n+>[>+<]<\n+++++++++>\n+>[>+<]<\n+++++++++>\n+>[>+<]<\n+++++++++>\n+>[>+<]<\n+++++++++>\n+>[>+<]<\n+++++++++>\n+>[>+<]<\n+++++++++>\n+>[>+<]<\n+++++++++>\n+>[>+<]<\n+++++++++>\n+>[>+<]<\n+++++++++>\n+>[>+<]<\n+++++++++>\n+>[>+<]<\n+++++++++>\n+>[>+<]<\n+++++++++>\n+>[>+<]<\n+++++++++>\n+>[>+<]<\n+++++++++>\n+>[>+<]<\n+++++++++>\n+>[>+<]<\n+++++++++>\n+>[>+<]<\n+++++++++>\n+>[>+<]<\n+++++++++>\n+>[>+<]<\n+++++++++>\n+>[>+<]<\n+++++++++>\n+>[>+<]<\n+++++++++>\n+>[>+<]<\n+++++++++>\n+>[>+<]<\n+++++++++>\n+>[>+<]<\n+++++++++>\n+>[>+<]<\n+++++++++>\n+>[>+<]<\n+++++++++>\n+>[>+<]<\n+++++++++>\n+>[>+<]<\n+++++++++>\n+>[>+<]<\n+++++++++>\n+>[>+<]<\n+++++++++>\n+>[>+<]<\n+++++++++>\n+>[>+<]<\n+++++++++>\n+>[>+<]<\n+++++++++>\n+>[>+<]<\n+++++++++>\n+>[>+<]<\n+++++++++>\n+>[>+<]<\n+++++++++>\n+>[>+<]<\n+++++++++>\n+>[>+<]<\n+++++++++>\n+>[>+<]<\n+++++++++>\n+>[>+<]<\n+++++++++>\n+>[>+<]<\n+++++++++>\n+>[>+<]<\n+++++++++>\n+>[>+<]<\n+++++++++>\n+>[>+<]<\n+++++++++>\n+>[>+<]<\n+++++++++>\n+>[>+<]<\n+++++++++>\n+>[>+<]<\n+++++++++>\n+>[>+<]<\n+++++++++>\n+>[>+<]<\n+++++++++>\n+>[>+<]<\n+++++++++>\n+>[>+<]<\n+++++++++>\n+>[>+<]<\n+++++++++>\n+>[>+<]<\n+++++++++>\n+>[>+<]<\n+++++++++>\n+>[>+<]<\n+++++++++>\n+>[>+<]<\n+++++++++>\n+>[>+<]<\n+++++++++>\n+>[>+<]<\n+++++++++>\n+>[>+<]<\n+++++++++>\n+>[>+<]<\n+++++++++>\n+>[>+<]<\n+++++++++>\n+>[>+<]<\n+++++++++>\n+>[>+<]<\n+++++++++>\n+>[>+<]<\n+++++++++>\n+>[>+<]<\n+++++++++>\n+>[>+<]<\n+++++++++>\n+>[>+<]<\n+++++++++>\n+>[>+<]<\n+++++++++>\n+>[>+<]<\n+++++++++>\n+>[>+<]<\n+++++++++>\n+>[>+<]<\n+++++++++>\n+>[>+<]<\n+++++++++>\n+>[>+<]<\n+++++++++>\n+>[>+<]<\n+++++++++>\n+>[>+<]<\n+++++++++>\n+>[>+<]<\n+++++++++>\n+>[>+<]<\n+++++++++>\n+>[>+<]<\n+++++++++>\n+>[>+<]<\n+++++++++>\n+>[>+<]<\n+++++++++>\n+>[>+<]<\n+++++++++>\n+>[>+<]<\n+++++++++>\n+>[>+<]<\n+++++++++>\n+>[>+<]<\n+++++++++>\n+>[>+<]<\n+++++++++>\n+>[>+<]<\n+++++++++>\n+>[>+<]"
    },
    {
        "number": 4137,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split(\",\")\n    cmd = [\"+\"] * 256\n    for i in range(len(a)):\n        if a[i][0] == \"-\":\n            cmd[ord(a[i][1])] = \"-\"\n        else:\n            cmd[ord(a[i][1])] = \"+\"\n    while len(cmd) > 0:\n        if cmd[0] == \"+\":\n            cmd.pop(0)\n        else:\n            cmd.pop(0)\n            cmd.insert(0, \"-\")\n    return \"\".join(cmd)\n\nprint(solution(\"2+3\"))\nprint(solution(\"9-7\"))\nprint(solution(\"++>+>[-<[<-]<[->+>-]\"))\n\n\ndef"
    },
    {
        "number": 4137,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4138,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    number_of_elements = int(stdin.split()[0])\n    max_number = int(stdin.split()[1])\n\n    sequence = \"1\"\n    for i in range(2, number_of_elements + 1):\n        sequence += \" \" + str(i)\n\n    sequence_list = list(sequence.split())\n    sequence_list.sort()\n\n    while sequence_list[0]!= \"1\":\n        if sequence_list[0] > max_number:\n            sequence_list.pop(0)\n        else:\n            sequence_list.append(sequence_list.pop(0))\n\n    sequence_list = \"\".join(sequence_list)\n\n    if sequence_list[number_of_elements-1] == \"1\":\n        return \"1\"\n    else:\n        return str(sequence_list[number_of_elements-1])\n\nsolution(input())\n"
    },
    {
        "number": 4138,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4138,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Build and return an answer to the problem.\n\n    The function receives a single string parameter containing the description of one query.\n    It has to return a string containing the answer to the query.\n    \"\"\"\n    q = int(stdin.split()[0])\n    queries = []\n    for i in range(q):\n        queries.append(int(stdin.split()[i+1]))\n    answer = ''\n    sequence = []\n    # Count the number of elements of the sequence\n    for j in range(1, 10):\n        sequence.append(j)\n    for i in range(len(sequence)):\n        for j in range(1, 10):\n            sequence.append(j)\n    for query in queries:\n        answer += str(sequence[query - 1])\n    return answer\n"
    },
    {
        "number": 4138,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    for _ in range(int(stdin)):\n        a, b = map(int, stdin.split())\n        print(str(int(math.log(a, 10) - math.log(b, 10)) % 10))\n        \n"
    },
    {
        "number": 4138,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin)\n    for i in range(q):\n        query = stdin.strip().split()\n        k = int(query[1])\n        print(number_at_position(k))\n        return"
    },
    {
        "number": 4138,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4138,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4138,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    for _ in range(int(stdin)):\n        queries = stdin.split()\n        queries[0] = int(queries[0])\n        k = queries[1]\n        print(digit(k))\n    return \"\"\n\ndef"
    },
    {
        "number": 4138,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''.join(str(x) for x in range(1, 10))\n"
    },
    {
        "number": 4138,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    return \"\\n\".join([solution_helper(int(line)) for line in lines])\n\n\ndef"
    },
    {
        "number": 4139,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4139,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    while n > 0:\n        if n == 7:\n            count += 1\n        elif n == 5:\n            count += 1\n        elif n == 3:\n            count += 1\n        n = int(str(n)[1:])\n    return count"
    },
    {
        "number": 4139,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    ans = 0\n    for i in range(1, n + 1):\n        if seven_digits(i) and five_digits(i) and three_digits(i):\n            ans += 1\n    return str(ans)\n\ndef"
    },
    {
        "number": 4139,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    ans = str()\n    for i in range(1, int(stdin) + 1):\n        if i < 10:\n            continue\n        temp = i\n        ans += str(temp)\n        if i % 7 == 0 or i % 5 == 0 or i % 3 == 0:\n            continue\n        while temp > 0:\n            if temp % 7 == 0 or temp % 5 == 0 or temp % 3 == 0:\n                break\n            temp = temp // 10\n        else:\n            ans += str(temp)\n    return ans"
    },
    {
        "number": 4139,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for i in range(n+1):\n        string_num = str(i)\n        digits = set(string_num)\n        if len(digits)!= 4:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4139,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return(\n        str(len([x for x in range(int(stdin), int(stdin) + 1) if is_shichi_go_san(x)]))\n        )\ndef"
    },
    {
        "number": 4139,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # implement solution here\n    return stdin\n"
    },
    {
        "number": 4139,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    return str(sum([1 for num in range(1, N + 1) if is_shichi_go_san(num)]))\n\n\ndef"
    },
    {
        "number": 4139,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    n: int = int(stdin)\n    answer: int = 0\n    for i in range(1, n + 1):\n        if \"7\" in str(i) and \"5\" in str(i) and \"3\" in str(i):\n            answer += 1\n    return str(answer)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4139,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = int(stdin)\n    seven_count = 0\n    five_count = 0\n    three_count = 0\n    seven_five_count = 0\n    for i in range(1, stdin + 1):\n        seven_five_count = 0\n        if str(i).count('7') >= 1:\n            seven_count += 1\n        if str(i).count('5') >= 1:\n            five_count += 1\n        if str(i).count('3') >= 1:\n            three_count += 1\n        if str(i).count('7') + str(i).count('5') + str(i).count('3') == 3:\n            seven_five_count += 1\n    return f'{seven_count}\\n{five_count}\\n{three_count}\\n{seven_five_count}'\n"
    },
    {
        "number": 4140,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, S = stdin, list(map(int, stdin.split()))\n    x = 0\n    while x < n:\n        if S[x] == 0:\n            S[x] = 1\n            x += 2\n        else:\n            x += 1\n    return sum(S)"
    },
    {
        "number": 4140,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def is_colored(char: str) -> bool:\n        return char == '1' or char == '0'\n\n    def get_colors(colors: str) -> str:\n        counts = {}\n        for char in colors:\n            if is_colored(char):\n                counts[char] = counts.get(char, 0) + 1\n        return counts\n\n    def rec_get_colors(colors: str) -> int:\n        nonlocal counts\n        counts = get_colors(colors)\n        if len(counts) == 1:\n            return 0\n        min_count = min(counts.values())\n        min_colors = []\n        for key, value in counts.items():\n            if value == min_count:\n                min_colors.append(key)\n        return len(min_colors)\n\n    n = int(stdin)\n    counts = get_colors(stdin)\n    if len(counts) == 1:\n        return 0\n    return rec_get_colors(stdin)\n\"\"\"\n"
    },
    {
        "number": 4140,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('')\n    1\n    >>> solution('0')\n    1\n    >>> solution('01')\n    2\n    >>> solution('11')\n    2\n    >>> solution('01')\n    2\n    >>> solution('0111')\n    3\n    >>> solution('01101')\n    4\n    >>> solution('011011')\n    5\n    >>> solution('00011')\n    6\n    >>> solution('001101')\n    7\n    \"\"\"\n    count = 0\n    i = 0\n    while i < len(stdin) - 1:\n        if stdin[i]!= stdin[i+1]:\n            count += 1\n            i += 2\n        else:\n            i += 1\n    return count\n"
    },
    {
        "number": 4140,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    count = 0\n    for i in range(n):\n        if stdin[i] == '1':\n            count += 1\n            if count > 1:\n                return -1\n    return count\n"
    },
    {
        "number": 4140,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return str(sum(int(c) for c in stdin))"
    },
    {
        "number": 4140,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4140,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    black = 1\n    white = 0\n    for i in range(n):\n        if stdin[i] == \"0\":\n            black = black + 1\n        if stdin[i] == \"1\":\n            white = white + 1\n    return str(black)"
    },
    {
        "number": 4140,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = len(stdin)\n    board = [[0] * N for _ in range(N)]\n    for i, s in enumerate(stdin):\n        if s == '1':\n            board[i % N][i] = 1\n    for _ in range(N):\n        board = [[board[i][j] for i in range(N)] for j in range(N)]\n    return sum(board[N//2])\n"
    },
    {
        "number": 4140,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = len(stdin)\n    if (N == 0):\n        return \"\"\n    s = stdin\n    tiles = list(s)\n    l = len(tiles)\n    if(N!= l):\n        return -1\n    # print(l)\n    tiles_dict = {}\n    tiles_dict[tiles[0]] = 1\n    for i in range(1, l):\n        if (tiles[i] == 0 and tiles[i-1] == 1):\n            tiles_dict[tiles[i]] = 1\n            tiles_dict[tiles[i-1]] = 1\n        elif (tiles[i] == 1 and tiles[i-1] == 0):\n            tiles_dict[tiles[i]] = 1\n            tiles_dict[tiles[i-1]] = 1\n        else:\n            tiles_dict[tiles[i]] = 0\n    # print(tiles_dict)\n    m = {}\n    for i in range(0, l):\n        if (i == l-1):\n            if (tiles[i] == 1):\n                return -1\n            else:\n                if (tiles_dict[tiles[i]] == 1):\n                    m[tiles[i]] = 1\n        else:\n            if (tiles[i] == 0):\n                if (tiles[i+1] == 1):\n                    if (tiles_dict[tiles[i]] == 0):\n                        m[tiles[i]] = 1\n                        m[tiles[i+1]] = 1\n                    else:\n                        m[tiles[i]] = 0\n                        m[tiles[i+1]] = 1\n                elif (tiles_dict[tiles[i]] == 0):\n                    m[tiles[i]] = 0\n                    m[tiles[i+1]] = 1\n                else:\n                    m[tiles[i]] = 0\n            else:\n                if (tiles[i+1] == 1):\n                    if (tiles_dict[tiles[i]] == 0):\n                        m[tiles[i]] = 1\n                        m[tiles[i+1]] = 1\n                    else:\n                        m[tiles[i]] = 0\n                        m[tiles[i+1]] = 1\n                elif (tiles_dict[tiles[i]] == 1):\n                    m[tiles[i]] = 1\n                    m[tiles[i+1]] = 0\n                else:\n                    m[tiles[i]] = 1\n    # print(m)\n    f = 0\n    for i in range(0, l):\n        if(m[tiles[i]] == 0):\n            f += 1\n    return f\n\ns = input()\nprint(solution(s))\n"
    },
    {
        "number": 4140,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = len(stdin)\n    if N < 2:\n        raise ValueError('N should be bigger than 2')\n\n    if len(set(stdin)) > 2:\n        raise ValueError('All elements should be 0 or 1')\n\n    if not all(c in '01' for c in stdin):\n        raise ValueError('All elements should be 0 or 1')\n\n    # def next_color(i):\n    #     return '0' if stdin[i] == '1' else '1'\n\n    # for i in range(N-1):\n    #     stdin = stdin + next_color(i)\n    # return next_color(N-1)\n\n    flipped = stdin[::-1]\n    for i in range(N-1):\n        flipped = flipped + (flipped[i]!= stdin[i+1])\n    return flipped[::-1]"
    },
    {
        "number": 4141,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    \n    for i in range(n):\n        if a[i] % 2 == 0:\n            if a[i] % 3 == 0 or a[i] % 5 == 0:\n                print('APPROVED')\n                break\n    else:\n        print('DENIED')\nsolution(input())\n"
    },
    {
        "number": 4141,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    A_n = list(map(int, stdin.split()[1:]))\n    ans = \"APPROVED\"\n    for num in A_n:\n        if num % 2!= 0 and num % 3!= 0 and num % 5!= 0:\n            ans = \"DENIED\"\n            break\n    print(ans)\n    return ans\n\nsolution()\n"
    },
    {
        "number": 4141,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    answer = ''\n    for i in range(n):\n        input_str = stdin.split()\n        if int(input_str[i]) % 3 == 0 or int(input_str[i]) % 5 == 0:\n            answer = 'APPROVED'\n            return answer\n    answer = 'DENIED'\n    return answer\nprint(solution(input()))\n"
    },
    {
        "number": 4141,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.strip().split()))\n    even_list = list(filter(lambda x: x%2 == 0, arr))\n    print('APPROVED' if all(map(lambda x: x%3 == 0 or x%5 == 0, even_list)) else 'DENIED')"
    },
    {
        "number": 4141,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    a = list(map(int, stdin.split()))\n\n    for i in a:\n        if i % 2 == 0:\n            if i % 3 == 0 or i % 5 == 0:\n                print(\"APPROVED\")\n                return \"APPROVED\"\n        else:\n            print(\"DENIED\")\n            return \"DENIED\"\n    return \"APPROVED\"\n"
    },
    {
        "number": 4141,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    output = \"\"\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            if i % 3 == 0 or i % 5 == 0:\n                output += \"APPROVED\\n\"\n            else:\n                output += \"DENIED\\n\"\n        else:\n            output += \"DENIED\\n\"\n    return output\n"
    },
    {
        "number": 4141,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.strip().split()))\n    for i in a:\n        if i%3 == 0 and i%5 == 0:\n            print(\"APPROVED\")\n            break\n        elif i%3 == 0 or i%5 == 0:\n            print(\"DENIED\")\n            break\n        else:\n            print(\"APPROVED\")\n    return"
    },
    {
        "number": 4141,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    ans = 'APPROVED'\n    a = stdin.split()\n    a = [int(i) for i in a]\n    for i in a:\n        if i%3 == 0 or i%5 == 0:\n            ans = 'APPROVED'\n            break\n    else:\n        ans = 'DENIED'\n    return ans"
    },
    {
        "number": 4141,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split()\n    if all(map(lambda x: x % 2 == 0, map(int, lines[1:]))):\n        if all(map(lambda x: x % 3 == 0, map(int, lines[1:]))):\n            return \"APPROVED\"\n        return \"DENIED\"\n    return \"DENIED\"\n"
    },
    {
        "number": 4141,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, *data = map(int, stdin.split())\n    if all(d % 3 == 0 or d % 5 == 0 for d in data):\n        return 'APPROVED'\n    return 'DENIED'"
    },
    {
        "number": 4142,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    l, r, u, d = 0, 0, 0, 0\n    for i in range(len(s)):\n        if s[i] == 'R':\n            r += 1\n        elif s[i] == 'L':\n            l += 1\n        elif s[i] == 'U':\n            u += 1\n        else:\n            d += 1\n\n    if r % 2 == 1 and l % 2 == 1 and u % 2 == 1 and d % 2 == 1:\n        return 'Yes'\n    return 'No'"
    },
    {
        "number": 4142,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    return \"Yes\" if is_playable(stdin) else \"No\"\n\ndef"
    },
    {
        "number": 4142,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s=stdin\n    s = s.replace('R','r')\n    s = s.replace('U','u')\n    s = s.replace('L','l')\n    s = s.replace('D','d')\n    if 'r' in s and 'l' in s and 'u' in s and 'd' in s:\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 4142,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    solution = True\n    for i in range(len(stdin)):\n        if i % 2 == 0:\n            if stdin[i] == stdin[i+1] == 'D':\n                solution = False\n        elif i % 2 == 1:\n            if stdin[i] == stdin[i+1] == 'U':\n                solution = False\n        return 'Yes' if solution else 'No'\n"
    },
    {
        "number": 4142,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    result = 'Yes' if all((((stdin[i] == 'R') or (stdin[i] == 'D')\n                             or (stdin[i] == 'U'))\n                            for i in range(0, len(stdin), 2))) else 'No'\n    return result\n"
    },
    {
        "number": 4142,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    if len(s) % 2 == 0:\n        if s[::2] == 'R'*len(s[::2]) and s[1::2] == 'D'*len(s[1::2]):\n            return 'Yes'\n        else:\n            return 'No'\n    elif len(s) % 2 == 1:\n        if s[::2] == 'R'*len(s[::2]) and s[1::2] == 'U'*len(s[1::2]):\n            return 'Yes'\n        else:\n            return 'No'\n\nsolution('')\nsolution('RUDLUDR')\nsolution('RDDDDR')\nsolution('D')\n'''\n\nstdin = input()"
    },
    {
        "number": 4142,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Check if the string is empty or not\n    if stdin == \"\":\n        return 'No'\n\n    # Check if the string is not\n    # empty and is not None\n    if stdin.__len__() == 0:\n        return 'No'\n\n    # Empty string\n    if stdin.__len__() == 1:\n        if stdin.upper() == 'R':\n            return 'Yes'\n        else:\n            return 'No'\n\n    # Loop through each character\n    for i in range(len(stdin)):\n        if stdin.upper() == 'R':\n            if i % 2 == 0:\n                return 'Yes'\n            else:\n                return 'No'\n        elif stdin.upper() == 'U':\n            if i % 2 == 1:\n                return 'Yes'\n            else:\n                return 'No'\n        elif stdin.upper() == 'L':\n            if i % 2 == 0:\n                return 'Yes'\n            else:\n                return 'No'\n        elif stdin.upper() == 'D':\n            if i % 2 == 0:\n                return 'No'\n            else:\n                return 'Yes'\n"
    },
    {
        "number": 4142,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    odd_pos_r, odd_pos_u, odd_pos_d = 0, 0, 0\n    even_pos_l, even_pos_u, even_pos_d = 0, 0, 0\n    for i in range(len(s)):\n        if s[i] == 'R':\n            odd_pos_r += 1\n        elif s[i] == 'L':\n            odd_pos_l += 1\n        elif s[i] == 'U':\n            odd_pos_u += 1\n        elif s[i] == 'D':\n            odd_pos_d += 1\n        if s[i] == 'R' or s[i] == 'L' or s[i] == 'U' or s[i] == 'D':\n            even_pos_l += 1\n            even_pos_u += 1\n            even_pos_d += 1\n        elif s[i] == 'R' and s[i-1] == 'D' or s[i] == 'R' and s[i-1] == 'U' or s[i] == 'R' and s[i-1] == 'L':\n            even_pos_l += 2\n            even_pos_u += 2\n            even_pos_d += 1\n    if odd_pos_r % 2 == 0:\n        if odd_pos_u % 2 == 0:\n            if odd_pos_d % 2 == 0:\n                if even_pos_l % 2 == 0 and even_pos_u % 2 == 0:\n                    if even_pos_d % 2 == 0:\n                        return 'Yes'\n                    else:\n                        return 'No'\n                else:\n                    return 'No'\n            else:\n                return 'No'\n        else:\n            return 'No'\n    else:\n        return 'No'\n"
    },
    {
        "number": 4142,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(len(stdin)):\n        if stdin[i] == \"R\":\n            if i % 2 == 0:\n                if stdin[i - 1] == \"R\" and stdin[i + 1] == \"U\" and stdin[i + 2] == \"D\":\n                    return \"Yes\"\n                if stdin[i - 1] == \"R\" and stdin[i + 1] == \"D\" and stdin[i + 2] == \"U\":\n                    return \"Yes\"\n            if i % 2 == 1:\n                if stdin[i - 1] == \"R\" and stdin[i - 2] == \"U\" and stdin[i - 3] == \"D\":\n                    return \"Yes\"\n                if stdin[i - 1] == \"R\" and stdin[i - 2] == \"D\" and stdin[i - 3] == \"U\":\n                    return \"Yes\"\n        if stdin[i] == \"D\":\n            if i % 2 == 0:\n                if stdin[i - 1] == \"D\" and stdin[i + 1] == \"L\" and stdin[i + 2] == \"U\":\n                    return \"Yes\"\n                if stdin[i - 1] == \"D\" and stdin[i + 1] == \"U\" and stdin[i + 2] == \"L\":\n                    return \"Yes\"\n            if i % 2 == 1:\n                if stdin[i - 1] == \"D\" and stdin[i - 2] == \"L\" and stdin[i - 3] == \"U\":\n                    return \"Yes\"\n                if stdin[i - 1] == \"D\" and stdin[i - 2] == \"U\" and stdin[i - 3] == \"L\":\n                    return \"Yes\"\n        if stdin[i] == \"U\":\n            if i % 2 == 0:\n                if stdin[i - 1] == \"U\" and stdin[i + 1] == \"R\" and stdin[i + 2] == \"D\":\n                    return \"Yes\"\n                if stdin[i - 1] == \"U\" and stdin[i + 1] == \"D\" and stdin[i + 2] == \"R\":\n                    return \"Yes\"\n            if i % 2 == 1:\n                if stdin[i - 1] == \"U\" and stdin[i - 2] == \"R\" and stdin[i - 3] == \"D\":\n                    return \"Yes\"\n                if stdin[i - 1] == \"U\" and stdin[i - 2] == \"D\" and stdin[i - 3] == \"R\":\n                    return \"Yes\""
    },
    {
        "number": 4142,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if is_easily_playable(stdin) else \"No\"\n\ndef"
    },
    {
        "number": 4143,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c, d, e = map(int, stdin.split())\n    N = n\n    A = a\n    B = b\n    C = c\n    D = d\n    E = e\n    num = 0\n\n    while True:\n        if (N <= 3 and N == 6) or N == 1:\n            print(num)\n            return\n        elif N == 2:\n            print(num)\n            return\n        else:\n            A = min(A, min(B, C) + min(D, E))\n            B = min(B, min(C, D) + min(A, E))\n            C = min(C, min(D, E) + min(A, B))\n            D = min(D, min(E, A) + min(B, C))\n            E = min(E, min(A, B) + min(C, D))\n            N -= 1\n            num += 1\n"
    },
    {
        "number": 4143,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    A, B, C, D, E = map(int, stdin.split())\n\n    travel_times = [\n        (A, 1),\n        (B, 2),\n        (C, 3),\n        (D, 4),\n        (E, 5),\n    ]\n\n    result = float('inf')\n\n    for time, people in travel_times:\n        result = min(result, people * (time + 1))\n\n    return result"
    },
    {
        "number": 4143,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c, d, e = stdin.split()\n    n = int(n)\n    a = int(a)\n    b = int(b)\n    c = int(c)\n    d = int(d)\n    e = int(e)\n    if n == 1:\n        return str(a)\n    elif n == 2:\n        return str(a + b)\n    elif n == 3:\n        return str(a + b + c)\n    elif n == 4:\n        return str(a + b + c + d)\n    elif n == 5:\n        return str(a + b + c + d + e)\n    else:\n        raise Exception(\"invalid input\")\n"
    },
    {
        "number": 4143,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Takes stdin, which is the input from the input file, and returns a string with\n    the minimum time for all people to reach City 6.\n\n    >>> solution('''5\n   ... 3\n   ... 2\n   ... 4\n   ... 3\n   ... 5\n   ... ''')\n    '7'\n    \"\"\"\n    return str(solution_imp(stdin))\n\ndef"
    },
    {
        "number": 4143,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B, C, D, E = map(int, stdin.split())\n    print((7 * N - max(A, B, C, D, E) + min(A, B, C, D, E)) // 2)"
    },
    {
        "number": 4143,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(n):\n        for j in range(1, n):\n            # if i + j > n: break\n            if j <= 1:\n                continue\n            if j == 2:\n                if i + 1 < n:\n                    if i + 2 < n:\n                        print(i + 1, i + 2)\n                else:\n                    print(i + 1)\n            elif j == 3:\n                if i + 2 < n:\n                    if i + 3 < n:\n                        print(i + 2, i + 3)\n                else:\n                    print(i + 2)\n            elif j == 4:\n                if i + 3 < n:\n                    if i + 4 < n:\n                        print(i + 3, i + 4)\n                else:\n                    print(i + 3)\n            elif j == 5:\n                if i + 4 < n:\n                    if i + 5 < n:\n                        print(i + 4, i + 5)\n                else:\n                    print(i + 4)\n            elif j == 6:\n                if i + 5 < n:\n                    if i + 6 < n:\n                        print(i + 5, i + 6)\n                else:\n                    print(i + 5)\n"
    },
    {
        "number": 4143,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c, d, e = map(int, stdin.split())\n    ans = float(\"inf\")\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if i!= j:\n                ans = min(ans, min((j - 1) // i, (n - j) // (i - 1)))\n    return str(ans)"
    },
    {
        "number": 4143,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    _, N, A, B, C, D, E = stdin.split()\n    N, A, B, C, D, E = int(N), int(A), int(B), int(C), int(D), int(E)\n\n    if N % 2!= 0 or N > 1e5:\n        return 'Impossible'\n\n    if A >= N or B >= N or C >= N or D >= N or E >= N:\n        return 'Impossible'\n\n    if A == 0:\n        return 'Impossible'\n\n    if min(A, B, C, D, E) == 1:\n        return 'Impossible'\n\n    if A == 1:\n        if min(B, C, D, E) == 2:\n            return 'Impossible'\n\n    if A == 2:\n        if min(B, C, D, E) == 3:\n            return 'Impossible'\n\n    if A == 3:\n        if min(B, C, D, E) == 4:\n            return 'Impossible'\n\n    if A == 4:\n        if min(B, C, D, E) == 5:\n            return 'Impossible'\n\n    if A == 5:\n        if min(B, C, D, E) == 6:\n            return 'Impossible'\n\n    return str(7 * min(N // 2, 6) + (min(A, 2 * N // 3) + (min(2 * N // 3, C) + (min(3 * N // 4, D) + (min(4 * N // 5, E))))))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4143,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B, C, D, E = map(int, stdin.split())\n    def solve(N: int, A: int, B: int, C: int, D: int, E: int, time: int) -> int:\n        time += N\n        if N == 1:\n            if time >= 6:\n                return time\n            else:\n                return N*6\n        elif N == 2:\n            if time >= 7:\n                return time\n            else:\n                return N * 7\n        else:\n            if time >= 7:\n                return time\n            elif time >= 7 - N + 1:\n                return 7\n            else:\n                return solve(N - 1, A, B, C, D, E, time) + 7\n    return str(solve(N, A, B, C, D, E, 0))"
    },
    {
        "number": 4143,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    return str(min(7, min(N * 2, N * 3, N * 4, N * 5, N * 6)))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4144,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n <= 1:\n        return str(0)\n    if n == 2:\n        return str(1)\n    if n == 3:\n        return str(2)\n    if n == 4:\n        return str(2)\n    if n == 5:\n        return str(3)\n    if n == 6:\n        return str(4)\n    if n == 7:\n        return str(5)\n    if n == 8:\n        return str(6)\n    if n == 9:\n        return str(7)\n    if n == 10:\n        return str(8)\n    if n == 11:\n        return str(9)\n    if n == 12:\n        return str(10)\n    if n == 13:\n        return str(11)\n    if n == 14:\n        return str(12)\n    if n == 15:\n        return str(13)\n    if n == 16:\n        return str(14)\n    if n == 17:\n        return str(15)\n    if n == 18:\n        return str(16)\n    if n == 19:\n        return str(17)\n    if n == 20:\n        return str(18)\n    if n == 21:\n        return str(19)\n    if n == 22:\n        return str(20)\n    if n == 23:\n        return str(21)\n    if n == 24:\n        return str(22)\n    if n == 25:\n        return str(23)\n    if n == 26:\n        return str(24)\n    if n == 27:\n        return str(25)\n    if n == 28:\n        return str(26)\n    if n == 29:\n        return str(27)\n    if n == 30:\n        return str(28)\n    if n == 31:\n        return str(29)\n    if n == 32:\n        return str(30)\n    if n == 33:\n        return str(31)\n    if n == 34:\n        return str(32)\n    if n == 35:\n        return str(33)\n    if n == 36:\n        return str(34)\n    if n == 37:\n        return str(35)\n    if n == 38:\n        return str(36)\n    if n == 39:\n        return str(37)\n    if n == 40:\n        return str(38)\n    if n == 41:\n        return str(39)\n    if n == 42:\n        return str(40)\n    if n == 43:\n        return str(41)\n    if n == 44:\n        return str(42)\n    if n == 45:\n        return str(43)\n    if n == 46:\n        return str(44)\n    if n == 47:\n        return str(45)\n    if n == 48:\n        return str(46)\n    if n == 49:\n        return str(47)\n    if n == 50:\n        return str(48)\n    if n == 51:\n        return str(49)\n    if n == 52:\n        return str(50)\n    if n == 53:\n        return str(51)\n    if n == 54:\n        return str(52)\n    if n == 55:\n        return str(53)\n    if n == 56:\n        return str(54)\n    if n == 57:\n        return str(55)\n    if n == 58:\n        return str(56)\n    if n == 59:\n        return str(57)\n    if n == 60:\n        return str(58)\n    if n == 61:\n        return str(59)\n    if n == 62:\n        return str(60)\n    if n == 63:\n        return str(61)\n    if n == 64:\n        return str(62)\n    if n == 65:\n        return str(63)\n    if n == 66:\n        return str(64)\n    if n == 67:\n        return str(65)\n    if n == 68:\n        return str(66)\n    if n == 69:\n        return str(67)\n    if n == 70:\n        return str(68)\n    if n == 71:\n        return str(69)\n    if n == 72:\n        return str(70)\n    if n == 73:\n        return str(71)\n    if n == 74:\n        return str(72)\n    if n == 75:\n        return str(73)\n    if n == 76:\n        return str(74)\n    if n == 77:\n        return str(75)\n    if n == 78:\n        return str(76)\n    if n == 79:\n        return str(77)\n    if n == 80:\n        return str(78)\n    if n == 81:\n        return str(79)\n    if n == 82:\n        return str(80)\n    if n == 83:\n        return str(81)\n    if n == 84:\n        return str(82)\n    if n == 85:\n        return str(83)\n    if n == 86:\n        return str(84)\n    if n == 87:\n        return str(85)\n    if n == 88:\n        return str(86)\n    if n == 89:\n        return str(87)\n    if n == 90:\n        return str(88)\n    if n == 91:\n        return str(89)\n    if n == 92:\n        return str(90)\n    if n == 93:\n        return str(91)\n    if n == 94:\n        return str(92)\n    if n == 95:\n        return str(93)\n    if n == 96:\n        return str(94)\n    if n == 97:\n        return str(95)\n    if n == 98:\n        return str(96)\n    if n == 99:\n        return str(97)\n    if n == 100:\n        return str(98)\n    if n == 101:\n        return str(99)\n    if n == 102:\n        return str(100)\n    if n == 103:\n        return str(101)\n    if n == 104:\n        return str(102)\n    if n == 105:\n        return str(103)\n    if n == 106:\n        return str(104)\n    if n == 107:\n        return str(105)\n    if n == 108:\n        return str(106)\n    if n == 109:\n        return str(107)\n    if n == 110:\n        return str(108)\n    if n == 111:\n        return str(109)\n    if n == 112:\n        return str(110)\n    if n == 113:\n        return str(111)\n    if n == 114:\n        return str(112)\n    if n == 115:\n        return str(113)\n    if n == 116:\n        return str(114)\n    if n == 117:\n        return str(115)\n    if n == 118:\n        return str(116)\n    if n == 119:\n        return str(117)\n    if n == 120:\n        return str(118)\n    if n == 121:\n        return str(119)\n    if n == 122:\n        return str(120)\n    if n == 123:\n        return str(121)\n    if n == 124:\n        return str(122)\n    if n == 125:\n        return str(123)\n    if n == 126:\n        return str(124)\n    if n == 127:\n        return str(125)\n    if n == 128:\n        return str(126)\n    if n == 129:\n        return str(127)\n    if n == 130:\n        return str(128)\n    if n == 131:\n        return str(129)"
    },
    {
        "number": 4144,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    zero = False\n    nine = False\n    for i in range(n):\n        if 0 <= int(stdin) <= 9:\n            if int(stdin) == 0:\n                zero = True\n            if int(stdin) == 9:\n                nine = True\n    if zero and nine:\n        return '2'\n    elif zero:\n        return '0'\n    elif nine:\n        return '9'\n    else:\n        return '1'\n\"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 4144,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    i = 1\n    count = 0\n    while N > 0:\n        if N % 10 == 0:\n            N -= 9\n            i += 1\n        elif N % 9 == 0:\n            N -= 1\n            i += 1\n        else:\n            N -= 1\n            i += 1\n    return i\nsolution(input())\n\"\"\"\n\ndef"
    },
    {
        "number": 4144,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 2:\n        return str(2)\n    elif n == 3:\n        return str(0)\n    else:\n        return str(3)\n"
    },
    {
        "number": 4144,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n\n    def is_seq(n):\n        if n < 0:\n            return False\n        if n == 0:\n            return True\n        if n % 9 == 0:\n            return True\n        if n % 9 == 9:\n            return True\n\n    if not (0 <= N <= 2**32):\n        raise ValueError(\"Input range error\")\n\n    count = 0\n    i = 0\n    while i < N:\n        if is_seq(i):\n            count += 1\n            i += 1\n        else:\n            i += 2\n    return str(count % (10**9 + 7))\n\n\nprint(solution(input()))\n\"\"\"\n\ndef"
    },
    {
        "number": 4144,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4144,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport math\n\nN = int(stdin)\n\nnum
    },
    {
        "number": 4144,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if 0 <= n <= 9:\n        return 0\n    return 2\n"
    },
    {
        "number": 4144,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    seq = [0, 9]\n    seq_count = 2\n    while True:\n        if seq_count == N:\n            break\n        for i in range(len(seq) - 1):\n            if seq[i] == seq[i + 1]:\n                seq_count += 1\n                break\n        else:\n            seq.append(0)\n        for i in range(len(seq) - 1):\n            if seq[i] == 0:\n                seq[i + 1] = 9\n            else:\n                seq[i + 1] = 0\n        seq_count += 1\n    return seq_count\n"
    },
    {
        "number": 4144,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    n = 0\n    while n < N:\n        if n % 3 == 0:\n            n += 1\n        elif n % 2 == 0:\n            n += 1\n        else:\n            if n == 0:\n                n += 1\n            else:\n                n -= 1\n    return n % 10\n\nprint(solution(input()))\n\"\"\"\nn = int(input())"
    },
    {
        "number": 4145,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.strip()\n\nprint(solution(\"20\"))\nprint(solution(\"32\"))\nprint(solution(\"2\"))\nprint(solution(\"5\"))\nprint(solution(\"32\"))\nprint(solution(\"4\"))\nprint(solution(\"6\"))\nprint(solution(\"5\"))\nprint(solution(\"3\"))\nprint(solution(\"5\"))\nprint(solution(\"1\"))\nprint(solution(\"4\"))\nprint(solution(\"4\"))\nprint(solution(\"3\"))\nprint(solution(\"5\"))\nprint(solution(\"4\"))\nprint(solution(\"2\"))\nprint(solution(\"1\"))\nprint(solution(\"10\"))\nprint(solution(\"10\"))\nprint(solution(\"25\"))\nprint(solution(\"27\"))\nprint(solution(\"15\"))\nprint(solution(\"12\"))\nprint(solution(\"10\"))\nprint(solution(\"4\"))\nprint(solution(\"3\"))\nprint(solution(\"6\"))\nprint(solution(\"3\"))\nprint(solution(\"5\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(solution(\"2\"))\nprint(s"
    },
    {
        "number": 4145,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x: int = int(stdin)\n    if x == 1:\n        return \"1\"\n    if x == 2:\n        return \"2\"\n    if x % 2 == 0:\n        return \"2\"\n    c = 3\n    while True:\n        if x % c == 0:\n            return str(c)\n        c += 2\n\nsolution(input())\n"
    },
    {
        "number": 4145,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    for i in range(2, x):\n        if i > x and all(i % j!= 0 for j in range(2, i)):\n            return str(i)\n        elif i > x and i % 2!= 0:\n            return str(i)\n    return str(x)\n"
    },
    {
        "number": 4145,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    primes = set()\n    for i in range(2, int(stdin)):\n        for j in range(2, i):\n            if i % j == 0:\n                break\n        else:\n            primes.add(i)\n    \n    return str(max(primes))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4145,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(n + 1, 2 * n + 1):\n        if all(i % x!= 0 for x in range(2, i)):\n            return str(i)\n    return \"0\"\n"
    },
    {
        "number": 4145,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    for i in range(x, 0, -1):\n        if(is_prime(i)):\n            return str(i)\n    return \"0\"\n\ndef"
    },
    {
        "number": 4145,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def is_prime(n: int) -> bool:\n        if n <= 1:\n            return False\n        for d in range(2, n):\n            if n % d == 0:\n                return False\n        return True\n    x = int(stdin)\n    max_prime = 1\n    while True:\n        if is_prime(max_prime) and max_prime > x:\n            break\n        max_prime += 1\n    return str(max_prime)"
    },
    {
        "number": 4145,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    result = 0\n    for x in stdin.split():\n        if not prime_number(int(x)):\n            break\n        else:\n            result = int(x)\n    print(result)\n    return result\ndef"
    },
    {
        "number": 4145,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    if x == 1:\n        return -1\n    for i in range(2, x + 1):\n        for j in range(2, i):\n            if i % j == 0:\n                break\n        else:\n            return i\n    return -1\n"
    },
    {
        "number": 4145,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    number: int = int(stdin)\n    while True:\n        if number > 1:\n            if is_prime(number):\n                return str(number)\n            number -= 1\n        else:\n            return str(1)\n\n\ndef"
    },
    {
        "number": 4146,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.split()\n    n = int(n[0])\n    v = stdin.split()\n    v = list(map(int, v))\n\n    if n == 0:\n        return 0\n\n    if n == 1:\n        return v[0]\n\n    v.sort()\n\n    if v[0] == v[1]:\n        return -1\n    if v[0] == v[1] + 1:\n        return -1\n\n    l = 0\n    r = 1\n\n    count = 1\n    while r <= n:\n        if v[r - 1] == v[r]:\n            count += 1\n        else:\n            count = 1\n        if count >= 2:\n            return -1\n        r += 1\n\n    return r - 1 - l\n"
    },
    {
        "number": 4146,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    v = list(map(int, stdin.split()))\n    v.sort()\n    result = 0\n    for i in range(1, n, 2):\n        if v[i]!= v[i - 1]:\n            result += 1\n        else:\n            break\n    return str(result)"
    },
    {
        "number": 4146,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, v = stdin.split()\n    v = list(map(int, v))\n    count = 0\n    for i in range(len(v)):\n        if i % 2 == 0 and v[i]!= v[i + 1]:\n            count += 1\n            v[i], v[i + 1] = v[i + 1], v[i]\n    return str(count)\n"
    },
    {
        "number": 4146,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2!= 0 or n < 2:\n        return '-1'\n    a = stdin.split()\n    a = [int(i) for i in a]\n    count = 0\n    for i in range(1, n - 1):\n        if a[i]!= a[i - 1]:\n            count += 1\n        if a[i]!= a[i + 1]:\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 4146,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    inputs = list(map(lambda x: int(x), stdin.split()))\n    n = inputs[0]\n    v = inputs[1:]\n    n_valid = False\n    if n % 2 == 0:\n        n_valid = True\n    if n_valid:\n        max_v = max(v)\n        if max_v == 1:\n            return '0'\n        if max_v > 2:\n            return '1'\n    return '2'\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4146,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = int(stdin)\n    sequence = list(map(int, stdin.split()))\n    #print(sequence)\n    # print(sequence[::2])\n    # print(list(map(int,stdin.split())))\n    counter = 0\n    for i in range(n):\n        #print(i,sequence[i+1])\n        #print(i+1)\n        if sequence[i] == sequence[i+1]:\n            counter = counter + 1\n    print(counter)\nsolution(input())"
    },
    {
        "number": 4146,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    sequence = list(map(int, stdin.split()))\n    # sequence = list(map(int, input().split()))\n    while n > 1:\n        # print(sequence)\n        if sequence[-1] == sequence[-2]:\n            del sequence[-1]\n            del sequence[-1]\n            n -= 2\n            # print(sequence)\n        else:\n            sequence.pop()\n            n -= 1\n    return str(len(sequence))\n"
    },
    {
        "number": 4146,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    sequence = stdin.split(' ')\n    sequence = [int(i) for i in sequence]\n    if n % 2 == 0:\n        return '-1'\n    for i in range(n):\n        if sequence[i] == sequence[i + 1]:\n            return str(i+2)\n    return '-1'"
    },
    {
        "number": 4146,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if not (1 <= n <= 10**5):\n        raise ValueError(f\"n is out of range (1 <= n <= 10^5)\")\n\n    if not (2 <= n % 2 <= 10**5):\n        raise ValueError(f\"n is not even\")\n\n    v = list(map(int, stdin.split()))\n    if not (len(v) == 2 * n):\n        raise ValueError(f\"wrong size of the sequence v\")\n\n    if not (all(1 <= v_i <= 10**5 for v_i in v)):\n        raise ValueError(f\"v contains invalid elements\")\n\n    if not (2 in set(v)):\n        raise ValueError(f\"v does not contain exactly two different elements\")\n\n    for i in range(len(v) - 1):\n        if v[i] == v[i + 2]:\n            raise ValueError(f\"v contains an element that appears twice in its sequence\")\n\n    return str(min(i + 2 for i in range(len(v) - 2) if v[i]!= v[i + 2]))\n"
    },
    {
        "number": 4146,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    v = list(map(int, stdin.split(\" \")))\n    moves = 0\n\n    for i in range(1, n-1):\n        if v[i] == v[i-1] or v[i] == v[i+1]:\n            continue\n        elif v[i-1] == v[i+1]:\n            moves += 1\n            v[i] = v[i-1] + 1\n        elif v[i] == v[i-1]:\n            moves += 1\n            v[i] = v[i+1] + 1\n    return moves\n"
    },
    {
        "number": 4147,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # first line contains input\n    # N A B C\n    # l_1\n    # l_2\n    # :\n    # l_N\n    #\n    # N should be >= 3\n    # A, B, C should be <= 1000\n    # all input values should be integers\n    #\n    # for all values in the input,\n    # - l_i > 0\n    # - l_i <= 1000\n    #\n    # return integer\n    data = stdin.split(\"\\n\")\n    N, A, B, C = list(map(int, data[0].split()))\n    bamboos = data[1:-1]\n    result = float(\"inf\")\n    for bamboo in bamboos:\n        bamboo_l = int(bamboo.split()[0])\n        result = min(result, bamboo_l + (A + C) - bamboo_l)\n    return result"
    },
    {
        "number": 4147,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B, C = map(int, stdin.split())\n    # Let's set up a little data structure to do our math\n    magics = [[], [], []]\n    # If we use the Extension Magic, we can increase the length of the first bamboo by one\n    magics[0].append(lambda x, y: x + 1)\n    # If we use the Composition Magic, we can obtain a bamboo from the first bamboo and the second bamboo\n    magics[1].append(lambda x, y: (x + y, x))\n    # If we use the Shortening Magic, we can decrease the length of the second bamboo by one\n    magics[2].append(lambda x, y: y - 1)\n    # And we can do the same for the other two bamboos\n    for i in range(3, N):\n        magics[0].append(lambda x, y: x + 1)\n        magics[1].append(lambda x, y: (x + y, x))\n        magics[2].append(lambda x, y: y - 1)\n    # We can now run our magics\n    bamboos = list(map(lambda x: list(map(lambda y: y(A, B), x)), magics))\n    # We also want to know the number of possible solutions\n    def possible_solutions(bamboos):\n        # We want to keep track of the number of solutions that we have found so far\n        num_solutions = 0\n        for i in range(len(bamboos)):\n            # If we have reached the end of the list, we can terminate\n            if i == len(bamboos) - 1:\n                return num_solutions\n            # Otherwise, we need to see if we can combine our last bamboos with the ones before us\n            for j in range(i + 1, len(bamboos)):\n                # Let's combine the bamboos we are looking at now and the ones that we have left to examine\n                if bamboos[j][0] >= bamboos[i][1] and bamboos[j][1] >= bamboos[i][0]:\n                    # If so, we can increase our length of the second bamboo by one and add it to our candidate list\n                    bamboos[i][1] = bamboos[j][0] + 1\n                    bamboos.append(bamboos[j][1:])\n                    num_solutions += 1\n    return str(possible_solutions(bamboos) - 1)\n\n-----Computational thinking-----\n\nWe can use dynamic programming to solve the problem. We can use the same idea as above, to decompose the problem into subproblems:\n\nOur objective is to find the minimum number of magics required to obtain a certain bamboos. The following steps are used:\n\nIf the length of the first bamboo is less than the length of the second, we can obtain a new bamboos by using Extension Magic on the first bamboos. This means that we are adding 1 MP to the first bamboo.\nIf the length of the second bamboo is less than the length of the third, we can obtain a new bamboos by using Composition Magic on the second bamboo. This means that we are combining the first two bamboos into one bamboos.\nIf the length of the third bamboo is less than the length of the fourth, we can obtain a new bamboos by using Extension Magic on the third bamboo. This means that we are adding 1 MP to the third bamboo.\nThen, we can check if we can obtain any of the other three bamboos by using the same two magics. In this way, we can find the minimum number of magics needed to obtain a certain bamboos.\n\nThe following steps are used to solve the problem:\n\n1. Initialize the matrix of bamboos. We will be using 2D matrices to represent the bamboos, because we are using DP. So we can create a 2D matrix to represent the bamboos, with 1 row for each bamboos and each column representing the length of the bamboos (except the first one which we will have a special case).\n\n2. We want to initialize the first row and the first column of our 2D matrix to be 1 and zero, since we can only use the Extension Magic once on the first bamboos\n\n3. We will be using the same 2D matrix to represent the bamboos, so we can add 1 for each of the rows and columns.\n\n4. We will be using the same 2D matrix to represent the bamboos, so we can add 1 for each of the rows and columns.\n\n5. Then we will be using a loop to find the minimum number of magics needed to obtain a certain bamboos. We can take advantage of the fact that we can find the minimum number of magics needed by using the same two magics again and again.\n\n6. We can now use the same 2D matrix to represent the bamboos, so we can add 1 for each of the rows and columns.\n\n7. Now we can use the same logic to update our 2D matrix, for all of the rows and columns.\n\n8. Once we are done with the matrix, we can now check if we can obtain any of the other three bamboos by using the same two magics. In this way, we can find the minimum number of magics needed to obtain a certain bamboos.\n\n9. The base case is if we can not obtain any of the other three bamboos, we can conclude that we have found a solution.\n\n10. We will now check if we can obtain any other solution by using the same two magics again and again.\n\n11. In this way, we can find the minimum number of magics needed to obtain a certain bamboos.\n\n12. The base case is if we can not obtain any of the other solutions, we can conclude that we have found a solution.\n\n13. Now we will check if we can obtain any other solution by using the same two magics again and again.\n\n14. In this way, we can find the minimum number of magics needed to obtain a certain bamboos.\n\n15. The base case is if we can not obtain any of the other solutions, we can conclude that we have found a solution.\n\n16. If so, we can return the result we have obtained.\n\n17. We will use a similar approach to the previous problem to solve the problem.\n\n18. We will now use dynamic programming to solve the problem. We can begin with the first row, first column, and the first value.\n\n19. Then we can use the same 2D matrix to represent the bambo"
    },
    {
        "number": 4147,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c = (int(i) for i in stdin.split())\n    l = sorted([int(i) for i in stdin.split()])\n    mp_count = 0\n    for i in range(len(l)):\n        if l[i] > a:\n            mp_count += l[i] - a\n            l[i] = a\n        else:\n            mp_count += (l[i] - a) / 2\n            l[i] = int(a / 2)\n    mp_count += sum([int((c - i) / 2) for i in l])\n    return str(mp_count)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4147,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c = map(int, stdin.split())\n    l1 = list(map(int, stdin.split()))\n    l2 = l1[:]\n    l3 = l1[:]\n    for i in range(n):\n        if len(l2) == 0:\n            break\n        l2 = l2[1:] + [l1[0]]\n    if len(l2) == 0:\n        print(0)\n        return\n    for i in range(n):\n        l3 = l3[1:] + [l2[0]]\n        l2 = l2[1:] + [l3[0]]\n        if len(l2) == 0:\n            break\n        l2 = l2[1:] + [l3[0]]\n    print(sum([l1[0], l2[0], l3[0]]))\n    return\n\nsolution(input())\n"
    },
    {
        "number": 4147,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B, C = map(int, stdin.split())\n    lengths = list(map(int, stdin.split()))\n    bamboo = []\n    for length in lengths:\n        bamboo.append(length)\n        if len(bamboo) >= 3:\n            bamboo = sorted(bamboo)\n            A = len(bamboo)\n            B = A - 1\n            C = A + 1\n            ans = (B + C) * min(bamboo)\n            return str(ans)\n        if len(bamboo) >= 2:\n            if bamboo[0] < bamboo[1]:\n                bamboo[0] += 1\n            else:\n                bamboo[1] += 1\n        if len(bamboo) >= 1:\n            if bamboo[0] > bamboo[1]:\n                bamboo[0] -= 1\n            else:\n                bamboo[1] -= 1\n    return str(min(bamboo))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4147,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c = stdin.split()\n    n, a, b, c = int(n), int(a), int(b), int(c)\n    l_1, l_2, l_3 = list(map(int, stdin.split()))\n    l_1, l_2, l_3 = max(l_1, l_2, l_3), max(l_1, l_2), max(l_1, l_2, l_3)\n    return str(min(sum(x) for x in [[l_1 + 1, l_2 + 1, l_3 + 1],\n                                    [l_1 - 1, l_2 - 1, l_3 - 1],\n                                    [l_1 + 2, l_2 - 2, l_3 - 2],\n                                    [l_1 + 1, l_2 - 1, l_3 + 1],\n                                    [l_1 + 1, l_2 + 1, l_3 - 1],\n                                    [l_1 + 1, l_2 - 1, l_3 + 1],\n                                    [l_1 + 2, l_2 + 2, l_3 - 2],\n                                    [l_1 + 2, l_2 + 1, l_3 - 1],\n                                    [l_1 + 2, l_2 - 1, l_3 - 1],\n                                    [l_1 + 2, l_2 + 2, l_3 + 2]]) <= c))\n"
    },
    {
        "number": 4147,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.strip()"
    },
    {
        "number": 4147,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B, C = map(int, stdin.split())\n    _min_cost = float('inf')\n    def _f(l):\n        if l >= C:\n            return 0\n        if l + 1 <= B and l - 1 > 0:\n            return _f(l + 1) + _f(l - 1)\n        return _f(l + 1)\n\n    for i in range(1, N):\n        _min_cost = min(_min_cost, _f(A) + _f(B) + _f(C) + _f(N) - _f(i) - _f(N - i) + i * _f(i) + i * (N - i))\n    return str(_min_cost)\nsolution('5 100 90 80')"
    },
    {
        "number": 4147,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return sum(len(sum(x)) for x in stdin.split())\n"
    },
    {
        "number": 4147,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5 100 90 80\n   ... 98\n   ... 40\n   ... 30\n   ... 21\n   ... 80''')\n    23\n    \"\"\"\n    N, A, B, C = map(int, stdin.split())\n    l_max = N\n    l_min = 1\n    l_sum = 0\n    while l_sum < C:\n        l_sum += 10\n    while l_sum > C:\n        l_sum -= 10\n    if l_min + l_max >= C:\n        return 'Optimal solution does not exist'\n    if l_sum >= C:\n        if l_sum - C < l_max:\n            l_max = l_sum - C\n    if l_sum < C:\n        if l_sum - C < l_min:\n            l_min = l_sum - C\n    l_min = 1\n    l_sum = 0\n    while l_sum < C:\n        l_sum += 10\n    while l_sum > C:\n        l_sum -= 10\n    if l_sum >= C:\n        if l_sum - C < l_max:\n            l_max = l_sum - C\n    if l_sum < C:\n        if l_sum - C < l_min:\n            l_min = l_sum - C\n    if l_max < l_min:\n        l_max = l_min\n    print(l_min + l_max)\n"
    },
    {
        "number": 4148,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    for i in range(n):\n        s = sorted(s)\n    return \"\".join(s)\n"
    },
    {
        "number": 4148,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.upper()"
    },
    {
        "number": 4148,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4148,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    return ''.join(sorted(stdin))[n:] + ''.join(sorted(stdin)[:n])\n"
    },
    {
        "number": 4148,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return stdin[n:] + stdin[:n]\n"
    },
    {
        "number": 4148,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    for n in range(len(s)):\n        print(sorted(s)[n], end='')\n    return s\n"
    },
    {
        "number": 4148,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, S = stdin.split(\" \")\n    N = int(N)\n    S = list(S)\n    shifted_char = \"\"\n    for i in range(26):\n        shifted_char += S[i + N]\n    return shifted_char\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4148,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4148,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, S = list(map(str, stdin.split()))\n    for _ in range(int(N)):\n        S = ''.join(sorted(S))\n    return S\n"
    },
    {
        "number": 4148,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    res = ''\n    for char in stdin.upper():\n        if 65 <= ord(char) <= 90:\n            char_num = ord(char) - 65 + N\n            if char_num > 90:\n                char_num = char_num - 26\n            res = res + chr(char_num)\n        else:\n            res = res + char\n    return res"
    },
    {
        "number": 4149,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *bs = map(int, stdin.split())\n    t, primes = bs[:2], bs[2:]\n    return''.join(map(str, primes))\n"
    },
    {
        "number": 4149,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    prime_numbers = []\n    for i in range(n):\n        prime_numbers.append(i)\n    prime_numbers = prime_numbers[1:]\n    prime_numbers = prime_numbers[:n]\n    shuffled_array = prime_numbers[:]\n    shuffled_array.reverse()\n    array_of_shuffles = []\n    for i in range(2 * n - 1):\n        array_of_shuffles.append(shuffled_array.pop())\n    array_of_shuffles.pop(0)\n    while len(array_of_shuffles)!= 0:\n        for i in range(2):\n            array_of_shuffles.append(array_of_shuffles.pop(0))\n            if len(array_of_shuffles) == 2 * n:\n                break\n    return''.join([str(x) for x in array_of_shuffles])\n"
    },
    {
        "number": 4149,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    s = set(p for p in range(2, 2750131) if all(p % p!= p for p in range(2, p)))\n    for i in range(1, len(a)):\n        if a[i] in s:\n            a[i] = a[i] * 2\n            s.discard(a[i])\n    return''.join(map(str, a))"
    },
    {
        "number": 4149,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n = int(stdin[0])\n    b = stdin[1].split()\n    \n    p = [2,3,5,7,11,13,17,19]\n    for i in range(n):\n        if b[i] in p:\n            p.remove(b[i])\n            b[i] = p[0]\n            p.remove(b[i])\n    \n    return''.join([str(x) for x in b])\n"
    },
    {
        "number": 4149,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split()\n    n = int(a[0])\n    a = list(map(int, a[1].split()))\n    b = list(map(int, a[1].split()))\n    \n    def is_prime(n):\n        if n == 2:\n            return True\n        if n%2 == 0 or n < 2:\n            return False\n        for i in range(3, int(n**0.5+1), 2):\n            if n%i == 0:\n                return False\n        return True\n        \n    def divide_primes(b):\n        div_primes = []\n        for i in b:\n            if is_prime(i):\n                div_primes.append(i)\n        return div_primes\n        \n    div_primes = divide_primes(b)\n    \n    def move_left(b):\n        a = b[:]\n        for i in range(len(a)-1):\n            a[i] = b[i+1]\n            b[i+1] = a[i]\n        return a, b\n    \n    a, b = move_left(b)\n    \n    def move_right(b):\n        a = b[:]\n        for i in range(len(a)-1):\n            a[i] = b[i]\n            b[i+1] = a[i]\n        return a, b\n    \n    a, b = move_right(b)\n    \n    def move_up(b):\n        a = b[:]\n        for i in range(len(a)-1):\n            a[i] = b[i+1]\n            b[i+1] = a[i]\n        return a, b\n    \n    a, b = move_up(b)\n    \n    def move_down(b):\n        a = b[:]\n        for i in range(len(a)-1):\n            a[i] = b[i]\n            b[i+1] = a[i]\n        return a, b\n    \n    a, b = move_down(b)\n    \n    div_primes = divide_primes(a)\n    \n    res = []\n    for i in div_primes:\n        res.append(i)\n    return''.join(map(str, res))"
    },
    {
        "number": 4149,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    res = ''\n    primes = list(prime_sieve(int(1e6)))\n    b = list(map(int, stdin.split()))\n    a = list(range(1, n+1))\n    for i in range(n):\n        a[i] = b[i]\n        for j in range(1, primes[i] + 1):\n            if j not in b:\n                a[i] = j\n                break\n    res = str(a)[1:-1]\n    print(res)\n    return res\n\n\nsolution(input())\n"
    },
    {
        "number": 4149,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split()\n    b = [int(i) for i in a]\n    g = list(range(2, len(b)+1))\n    for i in range(len(b)):\n        if i == 0:\n            continue\n        if b[i-1] == b[i]:\n            g.remove(b[i])\n    print(*g)\nsolution(stdin)\n"
    },
    {
        "number": 4149,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def get_divisor(n: int) -> int:\n        divisor = 3\n        while n % divisor!= 0:\n            divisor += 2\n        return divisor\n\n    primes = [2]\n    for i in range(3, 2750131, 2):\n        if is_prime(i):\n            primes.append(i)\n\n    divisors = {}\n    for prime in primes:\n        divisor = get_divisor(prime)\n        divisors[divisor] = prime\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    b = []\n    for i in range(n):\n        divisor = get_divisor(a[i])\n        b.append(divisors[divisor])\n\n    b = sorted(b)\n    for i in range(n):\n        print(b[i], end=' ')"
    },
    {
        "number": 4149,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    primes = {2}\n    for i in range(3, n + 1, 2):\n        if all(i % p!= 0 for p in primes):\n            primes.add(i)\n    res = [0]*n\n    for i in range(n):\n        if i < len(primes):\n            res[i] = primes[i]\n        else:\n            res[i] = -1\n    return \" \".join(map(str, res))\n"
    },
    {
        "number": 4149,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    b = list(map(int, stdin.split()))\n    l = len(b)\n    primes = []\n    count = 0\n    for i in range(2, 2750131):\n        if isPrime(i):\n            primes.append(i)\n            count += 1\n            if count == l:\n                break\n    for i in range(count):\n        for j in range(len(a)):\n            if a[j] % primes[i]!= 0:\n                b[j] = a[j] % primes[i]\n                break\n        a[:] = b\n    print(' '.join(str(i) for i in a))\n    return''.join(str(i) for i in a)\n"
    },
    {
        "number": 4150,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split()]\n    team_1, team_2 = [[], []]\n    a = [int(i) for i in stdin.split()]\n    for i in range(n):\n        if i < k:\n            team_1.append(a[i])\n        else:\n            team_2.append(a[i])\n    team_1_skill = []\n    team_2_skill = []\n    for i in range(k):\n        team_1_skill.append(team_1[i])\n        team_2_skill.append(team_2[i])\n    team_1_skill.sort()\n    team_2_skill.sort()\n    if len(team_1_skill) > len(team_2_skill):\n        team_1.extend(team_1_skill[len(team_2_skill):])\n        team_2.extend(team_2_skill[len(team_1_skill):])\n    elif len(team_1_skill) < len(team_2_skill):\n        team_1.extend(team_1_skill[len(team_2_skill):])\n        team_2.extend(team_2_skill[len(team_1_skill):])\n    else:\n        team_1.extend(team_1_skill)\n        team_2.extend(team_2_skill)\n    team_1.extend(team_2)\n    team_1.sort()\n    team_2.sort()\n    team_1_str = \"\".join(str(i) for i in team_1)\n    team_2_str = \"\".join(str(i) for i in team_2)\n    return (team_1_str + \" \" + team_2_str).strip()\n"
    },
    {
        "number": 4150,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = int(stdin.split(' ')[0]), int(stdin.split(' ')[1])\n    students_scores = list(map(int, stdin.split(' ')[2:]))\n    num_of_teams = 0\n\n    # number of students who are chosen and are in a group\n    students_chosen = 0\n    student_chosen = None\n\n    while students_chosen < n:\n        if students_chosen!= 0 and student_chosen!= None:\n            # create the new group if there are students to the left\n            if students_chosen == 1:\n                # print(student_chosen, student_chosen + 1)\n                num_of_teams += 1\n                students_chosen -= 1\n                student_chosen = None\n            else:\n                # print(student_chosen, student_chosen + 1)\n                num_of_teams += 1\n                students_chosen -= 2\n                student_chosen = student_chosen - 1\n\n        # we have to make the first move\n        max_student = 0\n        student_chosen = 0\n        for i in range(students_chosen + 1):\n            if students_scores[i] > max_student:\n                max_student = students_scores[i]\n                student_chosen = i\n\n        students_chosen += 1\n        students_scores.pop(student_chosen)\n        if student_chosen == 0:\n            student_chosen = None\n        else:\n            student_chosen -= 1\n\n    if k % 2 == 0:\n        return str(num_of_teams) +'' + str(num_of_teams - 1)\n    else:\n        return str(num_of_teams) +'' + str(num_of_teams + 1)\n\nprint(solution(input()))"
    },
    {
        "number": 4150,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    students = sorted(list(map(int, stdin.split())))\n    # your code here\n    # first_team = []\n    # second_team = []\n    # while len(students) > 0:\n    #     if len(first_team) < k:\n    #         first_team.append(students[0])\n    #         students.pop(0)\n    #     elif len(first_team) > k:\n    #         if students[0] < first_team[-1]:\n    #             first_team.append(students[0])\n    #             students.pop(0)\n    #         else:\n    #             second_team.append(students[0])\n    #             students.pop(0)\n    #     else:\n    #         second_team.append(students[0])\n    #         students.pop(0)\n    #\n    # return ''.join(map(str, first_team)) + ''.join(map(str, second_team))\n\n    first_team = []\n    second_team = []\n    for i in range(n):\n        if i < k:\n            first_team.append(students[i])\n            del students[i]\n        else:\n            second_team.append(students[i])\n            del students[i]\n\n    return ''.join(map(str, first_team)) + ''.join(map(str, second_team))\n\nprint(solution(input()))"
    },
    {
        "number": 4150,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k, *a = map(int, stdin.split())\n    a.sort()\n    ans = \"\"\n    for x in a:\n        if x > 1:\n            ans += \"1\"\n        else:\n            ans += \"2\"\n    return ans\n"
    },
    {
        "number": 4150,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = int(stdin.split()[0]), int(stdin.split()[1])\n    already_chosen_students, algo_teams = set(), [[] for _ in range(n)]\n    algo_teams[0] = [i for i in range(1, k + 1)]\n    for student_id, skill in enumerate(stdin.split()[2:], 2):\n        already_chosen_students.add(student_id)\n        algo_teams[0] = sorted(algo_teams[0], key=lambda student_id: (skill, student_id))\n        algo_teams[1] = sorted(algo_teams[1], key=lambda student_id: (skill, student_id))\n        if (skill == algo_teams[0][0][0] and student_id not in already_chosen_students) \\\n                or (skill == algo_teams[1][0][0] and student_id not in already_chosen_students):\n            algo_teams[0], algo_teams[1] = algo_teams[1], algo_teams[0]\n        print(\"\".join(map(str, algo_teams[0])))\n        print(\"\".join(map(str, algo_teams[1])))\n\n\nsolution(input())\n"
    },
    {
        "number": 4150,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    a = list(set(a))\n    a.sort()\n    return \"\".join(str(2 if x == 1 else 1) for x in a)\n"
    },
    {
        "number": 4150,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    skills = sorted([int(x) for x in stdin.split()])\n    res = \"\"\n    count = 0\n    while len(skills) > 1:\n        count += 1\n        if count == k:\n            count = 0\n            continue\n        if count == 1:\n            left = skills[:k]\n        else:\n            left = skills[:k-1]\n        right = skills[k:]\n        for i in range(len(left)):\n            if left[i] > right[i]:\n                res += str(1)\n                skills = left\n                break\n            else:\n                res += str(2)\n                skills = right\n                break\n    return res\n\nprint(solution(input()))"
    },
    {
        "number": 4150,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    if len(set(a)) < n:\n        print(''.join(map(str, range(2))))\n        return\n\n    a.sort()\n    teams = [[] for _ in range(2)]\n    for i in range(n):\n        teams[a[i] - 1].append(i + 1)\n    teams = [[*teams[0], n + 1]] + [[*teams[1], n + 1]]\n    teams.sort()\n\n    print(''.join(map(str, teams[:k + 1])))\n    return\n\n\nsolution('5 1')\nsolution('5 2')\nsolution('7 1')\nsolution('7 1')\n"
    },
    {
        "number": 4150,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    skills = map(int, stdin.split())\n    if n == 1:\n        return '11'\n    if k == 1:\n        return '22'\n    skills = list(skills)\n    first_team = skills[:k]\n    remaining_team = skills[k:]\n    second_team = []\n    while len(remaining_team) > 0:\n        max_skill = max(first_team)\n        max_index = first_team.index(max_skill)\n        skills_to_remove = []\n        for i in range(len(remaining_team)):\n            if i == max_index:\n                continue\n            if remaining_team[i] == max_skill:\n                skills_to_remove.append(i)\n        for i in range(len(skills_to_remove)):\n            remaining_team.pop(skills_to_remove[i])\n        first_team.remove(max_skill)\n        second_team.append(max_skill)\n    return ''.join(map(str, second_team))\n"
    },
    {
        "number": 4150,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    min_skill, max_skill = 1, n\n    team_one_skill, team_two_skill = {}, {}\n    i = 0\n    while min_skill <= max_skill:\n        if i % 2 == 1:\n            if team_one_skill:\n                if min_skill in team_one_skill:\n                    team_one_skill[min_skill] += 1\n                else:\n                    team_one_skill[min_skill] = 1\n        else:\n            if team_two_skill:\n                if min_skill in team_two_skill:\n                    team_two_skill[min_skill] += 1\n                else:\n                    team_two_skill[min_skill] = 1\n        i += 1\n        min_skill += 1\n        if i % 2 == 1:\n            max_skill = max(max_skill, min_skill - k)\n        else:\n            min_skill = min(min_skill, max_skill + k)\n\n    team_one_students = sorted(team_one_skill.items(), key=lambda x: x[1], reverse=True)\n    team_two_students = sorted(team_two_skill.items(), key=lambda x: x[1], reverse=True)\n\n    answer = ''\n    for student, skill in team_one_students:\n        answer += '1'\n    for student, skill in team_two_students:\n        answer += '2'\n    return answer\n\n\nsolution(\"5 1\\n2 4 5 3 1\")\nsolution(\"5 1\\n2 1 3 5 4\")\nsolution(\"5 1\\n2 4 5 3 1\")\nsolution(\"5 1\\n2 4 5 3 1\")\nsolution(\"5 1\\n2 1 3 5 4\")\nsolution(\"5 1\\n2 4 5 3 1\")\nsolution(\"5 1\\n2 4 5 3 1\")\nsolution(\"5 1\\n2 4 5 3 1\")\nsolution(\"5 1\\n2 4 5 3 1\")\nsolution(\"5 1\\n2 1 3 5 4\")\nsolution(\"5 1\\n2 4 5 3 1\")\nsolution(\"5 1\\n2 4 5 3 1\")\nsolution(\"5 1\\n2 4 5 3 1\")\nsolution(\"5 1\\n2 4 5 3 1\")\nsolution(\"5 1\\n2 4 5 3 1\")\nsolution(\"5 1\\n2 4 5 3 1\")\nsolution(\"5 1\\n2 4 5 3 1\")\nsolution(\"5 1\\n2 4 5 3 1\")\nsolution(\"5 1\\n2 4 5 3 1\")\nsolution(\"5 1\\n2 4 5 3 1\")\nsolution(\"5 1\\n2 4 5 3 1\")\nsolution(\"5 1\\n2 4 5 3 1\")\nsolution(\"5 1\\n2 4 5 3 1\")\nsolution(\"5 1\\n2 4 5 3 1\")\nsolution(\"5 1\\n2 4 5 3 1\")\nsolution(\"5 1\\n2 4 5 3 1\")\nsolution(\"5 1\\n2 4 5 3 1\")\nsolution(\"5 1\\n2 4 5 3 1\")\nsolution(\"5 1\\n2 4 5 3 1\")\nsolution(\"5 1\\n2 4 5 3 1\")\nsolution(\"5 1\\n2 4 5 3 1\")\nsolution(\"5 1\\n2 4 5 3 1\")\nsolution(\"5 1\\n2 4 5 3 1\")\nsolution(\"5 1\\n2 4 5 3 1\")\nsolution(\"5 1\\n2 4 5 3 1\")\nsolution(\"5 1\\n2 4 5 3 1\")\nsolution(\"5 1\\n2 4 5 3 1\")\nsolution(\"5 1\\n2 4 5 3 1\")\nsolution(\"5 1\\n2 4 5 3 1\")\nsolution(\"5 1\\n2 4 5 3 1\")\nsolution(\"5 1\\n2 4 5 3 1\")\nsolution(\"5 1\\n2 4 5 3 1\")\nsolution(\"5 1\\n2 4 5 3 1\")\nsolution(\"5 1\\n2 4 5 3 1\")\nsolution(\"5 1\\n2 4 5 3 1\")\nsolution(\"5 1\\n2 4 5 3 1\")\nsolution(\"5 1\\n2 4 5 3 1\")\nsolution(\"5 1\\n2 4 5 3 1\")\nsolution(\"5 1\\n2 4 5 3 1\")\nsolution(\"5 1\\n2 4 5 3 1\")\nsolution(\"5 1\\n2 4 5 3 1\")\nsolution(\"5 1\\n2 4 5 3 1\")\nsolution(\"5 1\\n2 4 5 3 1\")\nsolution(\"5 1\\n2 4 5 3 1\")\nsolution(\"5 1\\n2 4 5 3 1\")\nsolution(\"5 1\\n2 4 5 3 1\")\nsolution(\"5 1\\n2 4 5 3 1\")\nsolution(\"5 1\\n2 4 5 3 1\")\nsolution(\"5 1\\n2 4 5 3"
    },
    {
        "number": 4151,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    b = [0]*n\n    for i in range(1, n):\n        if a[i]!= a[i-1]:\n            b[i] = i\n        elif i >= 2 and a[i] == a[i-2]:\n            if a[i] == a[i-1]:\n                b[i] = b[i-1]\n            else:\n                b[i] = i - 1\n    return''.join(map(str, b))\n"
    },
    {
        "number": 4151,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def get_calls(a):\n        calls = 0\n        for i in range(1, len(a) - 1):\n            if a[i] == a[i + 1]:\n                calls += 1\n            else:\n                calls += 2\n        return calls\n\n    max_calls = 0\n    for a in stdin.split():\n        max_calls = max(max_calls, get_calls(a))\n    return max_calls\n"
    },
    {
        "number": 4151,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    result = 0\n    for i in range(len(a)):\n        prev = i\n        for j in range(i + 1, len(a)):\n            if a[i] > a[j]:\n                if a[i] == a[j]:\n                    if prev == j:\n                        result += 1\n                    else:\n                        result += 2\n                else:\n                    if prev == j:\n                        result += 1\n                    else:\n                        result += 2\n                prev = j\n            elif a[i] < a[j]:\n                if prev == j:\n                    result += 1\n                else:\n                    result += 2\n                prev = j\n            else:\n                prev = j\n                result += 1\n    return str(result % 998244353)\n"
    },
    {
        "number": 4151,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(i) for i in stdin.split()]\n    count = 0\n    for i in range(n):\n        for j in range(n):\n            if i!= j and (a[i] == a[j] or a[i] + 1 == a[j] or a[i] - 1 == a[j]):\n                count += 1\n    return count % 998244353\nsolution(input())\n"
    },
    {
        "number": 4151,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    b = [[0] * (i + 1) for i in range(len(a))]\n    b[0] = a\n    for i in range(len(a)):\n        b[i][i] = a[i]\n    for i in range(len(a)):\n        if i + 1 < len(a):\n            if a[i] == a[i + 1]:\n                b[i][i + 1] = b[i + 1][i]\n            else:\n                b[i][i + 1] = b[i + 1][i] + 1\n        if i - 1 >= 0:\n            if a[i] == a[i - 1]:\n                b[i][i - 1] = b[i - 1][i]\n            else:\n                b[i][i - 1] = b[i - 1][i] + 1\n    return str(len(set([tuple(x) for x in b])))\n"
    },
    {
        "number": 4151,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    return str(dp_function(n, a))\n\ndef"
    },
    {
        "number": 4151,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split()\n    n = int(a[0])\n    a = list(map(int, a[1]))\n\n    def monotonic_array(a):\n        for i in range(1, n):\n            if a[i] == a[i - 1]:\n                continue\n            else:\n                return False\n        return True\n\n    def monotonic_array_plus(a):\n        for i in range(1, n):\n            if a[i - 1] == a[i] - 1:\n                continue\n            elif a[i] == a[i - 1] + 1:\n                continue\n            else:\n                return False\n        return True\n\n    result = 0\n    for i in range(n):\n        if monotonic_array(a):\n            result += 1\n        if monotonic_array_plus(a):\n            result += 1\n    return str(result % 998244353)\n"
    },
    {
        "number": 4151,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    return str(len(set(tuple(a))))\n"
    },
    {
        "number": 4151,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    res = 1\n    a = list(map(int, stdin.split()))\n    for i in range(1, n - 1):\n        if a[i] == a[i + 1]:\n            res += 2\n    if a[0] == a[1]:\n        res += 1\n    if a[-1] == a[-2]:\n        res += 1\n    if a[-1] == a[-2] and a[0] == a[1]:\n        res += 1\n    return str(res % 998244353)"
    },
    {
        "number": 4151,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    res = 0\n    if a[0]!= 0:\n        return 0\n    if a[1]!= 0:\n        return 0\n    a.sort()\n    if a[0]!= 0:\n        return 0\n    if a[0]!= 0:\n        return 0\n    if a[-1]!= 0:\n        return 0\n    if a[-1]!= 0:\n        return 0\n    for i in range(2, len(a)):\n        if a[i - 1] == a[i]:\n            res += 2\n        elif a[i - 2] == a[i]:\n            res += 1\n    return res % 998244353\n\nprint(solution(input()))"
    },
    {
        "number": 4152,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 4152,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    ans = 0\n    while True:\n        for i in range(len(a)-1, 0, -1):\n            if a[i] == 0:\n                del a[i]\n                ans += 1\n        if len(a) == 0:\n            break\n    return str(ans)"
    },
    {
        "number": 4152,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    num_list = list(map(int, stdin.split()))\n    # Create two lists, one for the even numbers, and one for the odd numbers\n    even_list = []\n    odd_list = []\n    for num in num_list:\n        if num % 2 == 0:\n            even_list.append(num)\n        else:\n            odd_list.append(num)\n\n    # Create a set and then compare the sets\n    even_set = set(even_list)\n    odd_set = set(odd_list)\n\n    # Create a list\n    final_list = odd_list + even_list\n    final_set = set(final_list)\n\n    return len(final_list) - len(final_set)"
    },
    {
        "number": 4152,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n'''\nstdin = input()\nn = int(stdin)\na = list(map(int, input().split()))\n"
    },
    {
        "number": 4152,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\na = int(input())\nsequence = list(map(int, input().split()))\n\nfor i in range(len(sequence)):\n    if i + 1 > len(sequence):\n        break\n    if sequence[i] + sequence[i + 1] > 2 ** (a - 1):\n        break\n    if sequence[i] + sequence[i + 1] <= 2 ** (a - 1):\n        if i + 2 == len(sequence):\n            print(i + 1)\n            break\n        sequence.pop(i)\n        sequence.pop(i)\n        sequence.pop(i)\n        sequence.pop(i - 1)\n        sequence.pop(i - 1)\n        sequence.pop(i - 1)\n        break\n\nprint(sequence)"
    },
    {
        "number": 4152,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    _n: int = int(stdin.split()[0])\n    _s: str = stdin.split()[1]\n    if _n < 1:\n        return \"0\"\n    _n -= 1\n    if _s[0] == _s[1]:\n        _s = _s[:_n]\n        return _s\n    _i = 1\n    while _i < _n:\n        if _s[0] == _s[_i]:\n            _i += 1\n            _s = _s[:_i] + _s[_i+1:]\n            continue\n        if _s[0] == _s[-1]:\n            _i += 1\n            _s = _s[:_i] + _s[_i-1:]\n            continue\n        _i += 2\n    if len(_s) < _n:\n        return _s\n    return \"0\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4152,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # stdin = sys.stdin.read()\n    n = int(stdin)\n    lst = list(map(int, stdin.split()))\n    ans = 0\n    for i in range(n):\n        j = i\n        while j < n and lst[i] % 2 == 0:\n            if lst[j] == 1:\n                ans += 1\n            j += 1\n    return str(ans)\n\nprint(solution(\"5\\n1 2 3 4 5\"))"
    },
    {
        "number": 4152,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    if n == 0:\n        return \"0\"\n\n    a.sort(reverse=True)\n    remove_count = 0\n    while n > 0:\n        a[0] = 1\n        n = sum(a) // 2\n        if a[0] == 1:\n            remove_count += 1\n        a.pop(0)\n        a.sort(reverse=True)\n    return str(remove_count)\n"
    },
    {
        "number": 4152,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 4152,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    x = 1\n    a.sort()\n    for i in range(1, len(a)):\n        if a[i - 1] < a[i]:\n            x += 1\n    return x\n\nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 4153,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution function goes here\n    This function is called one time for task submission.\n\n    Your solution can contain as many helper functions as needed,\n    for example to implement the algorithm\n    \"\"\"\n    stacks = list(stdin)\n    \n    count = 0\n    while stacks:\n        x = stacks.pop(0)\n        if x == '1':\n            y = stacks.pop(0)\n            if y == '1':\n                count += 1\n    \n    return count\n"
    },
    {
        "number": 4153,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4153,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = len(stdin)\n    cnt_red, cnt_blue = 0, 0\n    stdin = list(stdin)\n\n    for i in range(N-1, -1, -1):\n        if stdin[i] == '1':\n            cnt_blue += 1\n        else:\n            cnt_red += 1\n\n    if cnt_red > cnt_blue:\n        print(cnt_red)\n        return\n    else:\n        print(cnt_blue)\n        return\n"
    },
    {
        "number": 4153,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    stdin = stdin.lstrip()\n    n = len(stdin)\n    final = \"\"\n\n    for i in range(0, n, 1):\n        if stdin[i] == '1':\n            final = final + '1' + '0'\n        else:\n            final = final + '0' + '1'\n    return final\n"
    },
    {
        "number": 4153,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    N = len(s)\n    for i in range(N-2):\n        if s[i] == \"0\":\n            for j in range(i+1, N-1):\n                if s[j] == \"1\":\n                    for k in range(j+1, N):\n                        if s[k] == \"0\":\n                            s = s[:i] + s[i+1:k] + s[k+1:]\n                            return s\n                    break\n            break\n    return s\nsolution(input())\n\n1 - 2 1 1 1 2 1 1 1 1 1 2 1 2 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 2 1 2 1 1 1 1 2 1 2 1 2 1 1 1 1 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 4153,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return 0\n"
    },
    {
        "number": 4153,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    output = []\n    for i in range(N):\n        if output:\n            if output[-1][-1] == \"0\":\n                output[-1] = output[-1][:-1] + \"1\"\n            else:\n                output[-1] = output[-1][:-1] + \"0\"\n        else:\n            output.append(\"1\")\n\n    print(len(output))\n    print(*output)\n    return ''\nsolution(input())\n"
    },
    {
        "number": 4153,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    N = len(stdin)\n    if N == 1 and stdin[0] == '1':\n        return 1\n    if N == 1 and stdin[0] == '0':\n        return 0\n    if N == 2 and stdin[0] == '0':\n        if stdin[1] == '1':\n            return 2\n        if stdin[1] == '0':\n            return 0\n    if N == 2 and stdin[0] == '1':\n        if stdin[1] == '1':\n            return 2\n        if stdin[1] == '0':\n            return 1\n    if N == 3 and stdin[0] == '0':\n        if stdin[1] == '1':\n            if stdin[2] == '1':\n                return 3\n            if stdin[2] == '0':\n                return 1\n        if stdin[1] == '0':\n            if stdin[2] == '1':\n                return 2\n            if stdin[2] == '0':\n                return 0\n    if N == 3 and stdin[0] == '1':\n        if stdin[1] == '1':\n            if stdin[2] == '1':\n                return 3\n            if stdin[2] == '0':\n                return 2\n        if stdin[1] == '0':\n            if stdin[2] == '1':\n                return 2\n            if stdin[2] == '0':\n                return 1\n    if N == 4 and stdin[0] == '0':\n        if stdin[1] == '1':\n            if stdin[2] == '1':\n                if stdin[3] == '1':\n                    return 4\n                if stdin[3] == '0':\n                    return 3\n            if stdin[2] == '0':\n                if stdin[3] == '1':\n                    return 3\n                if stdin[3] == '0':\n                    return 2\n        if stdin[1] == '0':\n            if stdin[2] == '1':\n                if stdin[3] == '1':\n                    return 3\n                if stdin[3] == '0':\n                    return 2\n            if stdin[2] == '0':\n                if stdin[3] == '1':\n                    return 2\n                if stdin[3] == '0':\n                    return 1\n    if N == 4 and stdin[0] == '1':\n        if stdin[1] == '1':\n            if stdin[2] == '1':\n                if stdin[3] == '1':\n                    return 4\n                if stdin[3] == '0':\n                    return 3\n            if stdin[2] == '0':\n                if stdin[3] == '1':\n                    return 3\n                if stdin[3] == '0':\n                    return 2\n        if stdin[1] == '0':\n            if stdin[2] == '1':\n                if stdin[3] == '1':\n                    return 3\n                if stdin[3] == '0':\n                    return 2\n            if stdin[2] == '0':\n                if stdin[3] == '1':\n                    return 2\n                if stdin[3] == '0':\n                    return 1\n    if N == 5 and stdin[0] == '0':\n        if stdin[1] == '1':\n            if stdin[2] == '1':\n                if stdin[3] == '1':\n                    if stdin[4] == '1':\n                        return 5\n                    if stdin[4] == '0':\n                        return 4\n                if stdin[3] == '0':\n                    if stdin[4] == '1':\n                        return 4\n                    if stdin[4] == '0':\n                        return 3\n            if stdin[2] == '0':\n                if stdin[3] == '1':\n                    if stdin[4] == '1':\n                        return 4\n                    if stdin[4] == '0':\n                        return 3\n                if stdin[3] == '0':\n                    if stdin[4] == '1':\n                        return 3\n                    if stdin[4] == '0':\n                        return 2\n        if stdin[1] == '0':\n            if stdin[2] == '1':\n                if stdin[3] == '1':\n                    if stdin[4] == '1':\n                        return 4\n                    if stdin[4] == '0':\n                        return 3\n                if stdin[3] == '0':\n                    if stdin[4] == '1':\n                        return 3\n                    if stdin[4] == '0':\n                        return 2\n            if stdin[2] == '0':\n                if stdin[3] == '1':\n                    if stdin[4] == '1':\n                        return 3\n                    if stdin[4] == '0':\n                        return 2\n                if stdin[3] == '0':\n                    if stdin[4] == '1':\n                        return 2\n                    if stdin[4] == '0':\n                        return 1\n    if N == 5 and stdin[0] == '1':\n        if stdin[1] == '1':\n            if stdin[2] == '1':\n                if stdin[3] == '1':\n                    if stdin[4] == '1':\n                        return 5\n                    if stdin[4] == '0':\n                        return 4\n                if stdin[3] == '0':\n                    if stdin[4] == '1':\n                        return 4\n                    if stdin[4] == '0':\n                        return 3\n            if stdin[2] == '0':\n                if stdin[3] == '1':\n                    if stdin[4] == '1':\n                        return 4\n                    if stdin[4] == '0':\n                        return 3\n                if stdin[3] == '0':\n                    if stdin[4] == '1':\n                        return 3\n                    if stdin[4] == '0':\n                        return 2\n        if stdin[1] == '0':\n            if stdin[2] == '1':\n                if stdin[3] == '1':\n                    if stdin[4] == '1':\n                        return 4\n                    if stdin[4] == '0':\n                        return 3\n                if stdin[3] == '0':\n                    if stdin[4] == '1':\n                        return 3\n                    if stdin[4] == '0':\n                        return 2\n            if stdin[2] == '0':\n                if stdin[3] == '1':\n                    if stdin[4] == '1':\n                        return 3\n                    if stdin[4] == '0':\n                        return 2\n                if stdin[3] == '0':\n                    if stdin[4] == '1':\n                        return 2\n                    if stdin[4] == '0':\n                        return 1\n    if N == 6 and stdin[0] == '0':\n        if stdin[1] == '1':\n            if stdin[2] == '1':\n                if stdin[3] == '1':\n                    if stdin[4] == '1':\n                        if stdin[5] == '1':\n                            return 6\n                        if stdin[5] == '0':\n                            return 5\n                    if stdin[3] == '0':"
    },
    {
        "number": 4153,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    colors = []\n    while len(colors) < N:\n        colors.append(stdin[-1])\n        stdin = stdin[:-1]\n    removed_ones = []\n    removed_zeros = []\n    for i in range(len(colors) - 1, -1, -1):\n        if colors[i] == '1':\n            removed_ones.append(i)\n        elif colors[i] == '0':\n            removed_zeros.append(i)\n    for r in removed_ones:\n        if r - 1 in removed_zeros:\n            removed_zeros.remove(r - 1)\n        if r + 1 in removed_zeros:\n            removed_zeros.remove(r + 1)\n    return len(removed_ones) + len(removed_zeros)\n"
    },
    {
        "number": 4153,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = len(stdin)\n    cubes = [(i, stdin[i]) for i in range(N)]\n    stack = []\n    while cubes:\n        current = cubes[-1]\n        if current[1] == '0':\n            stack.append(current)\n            cubes.pop()\n            cubes.pop()\n            while stack and cubes:\n                if stack[-1][1] == cubes[-1][1]:\n                    stack.pop()\n                    cubes.pop()\n        else:\n            cubes.pop()\n    return len(stack)\n"
    },
    {
        "number": 4154,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4154,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    N, M = map(int, lines[0].split())\n    id_cards = []\n    for i in range(1, N + 1):\n        id_cards.append(i)\n    gates = []\n    for i in range(1, M + 1):\n        gates.append(i)\n\n    for line in lines[1:]:\n        L = int(line.split()[0])\n        R = int(line.split()[1])\n        gates.remove(L)\n        gates.remove(R)\n        if L in id_cards and R in id_cards:\n            print('Yes')\n        else:\n            print('No')\n    return 'Yes' if gates else 'No'"
    },
    {
        "number": 4154,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    circuit = stdin.split()\n\n    N_range = range(1, N+1)\n    for i in range(M):\n        if int(circuit[i*2]) not in N_range:\n            return \"0\"\n        if int(circuit[i*2+1]) not in N_range:\n            return \"0\"\n\n    return str(N-1)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4154,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4154,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    gates = list(map(int, stdin.split()))\n    left, right = gates[:N], gates[N:]\n    left_idx = [False] * N\n    right_idx = [False] * N\n    res = 0\n\n    for i in range(N):\n        if left_idx[i] == False:\n            for j in range(i):\n                if left[j] > left[i]:\n                    left_idx[i] = True\n                    break\n\n        if right_idx[i] == False:\n            for j in range(i):\n                if right[j] > right[i]:\n                    right_idx[i] = True\n                    break\n\n    for i in range(N):\n        if left_idx[i] and right_idx[i]:\n            res += 1\n\n    return res\n"
    },
    {
        "number": 4154,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4154,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # N, M = map(int, stdin.split())\n    # L_i, R_i = map(int, stdin.split())\n    N, M = map(int, stdin.split())\n    L_i = list(map(int, stdin.split()))\n    R_i = list(map(int, stdin.split()))\n    result = 0\n    i = 0\n    while i < M:\n        if (R_i[i] - L_i[i]) <= N:\n            result += 1\n            i += 1\n        else:\n            i += 1\n    return str(result)\n\nsolution(\"5 2\")\n\n\"\"\"\n"
    },
    {
        "number": 4154,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    if N < 1 or N > 10**5 or M < 1 or M > 10**5:\n        return 0\n    \n    gates = stdin.split()\n    if len(gates)!= N+M:\n        return 0\n    \n    #print(gates)\n    # l_i - r_i == i\n    gates.sort()\n    #print(gates)\n    \n    dp = [[0] * N for _ in range(M+1)]\n    # dp[l][r] = l - r == i\n    for l in range(N):\n        dp[0][l] = 1\n    for i in range(M+1):\n        for j in range(N):\n            if gates[j] == gates[i]:\n                if i == 0:\n                    dp[0][j] = 1\n                else:\n                    dp[i][j] = dp[i-1][j] + dp[i][j-1]\n            else:\n                dp[i][j] = dp[i][j-1]\n    print(dp[M][N-1])\n    return 1\n\nprint(solution(\"4 2\"))\nprint(solution(\"5 3\"))\nprint(solution(\"9 5\"))\n"
    },
    {
        "number": 4154,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4154,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    [N, M] = map(int, stdin.split())\n    start = 1\n    end = N\n    gates = set()\n    for i in range(N):\n        gates.add(i + 1)\n    for _ in range(M):\n        middle = start + (end - start) // 2\n        gates.discard(middle)\n        gates.discard(middle + 1)\n        if middle == end:\n            break\n        start = middle + 1\n        end = middle\n    return len(gates)\n\nsolution(input())\n\"\"\"\n\ndef"
    },
    {
        "number": 4155,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    h = list(map(int, stdin.split()))\n    result = []\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if h[i]+1==h[j]:\n                result.append(j)\n    if result:\n        return str(min(result))\n    else:\n        return \"0\"\n"
    },
    {
        "number": 4155,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    stdin = input()\n    N = int(stdin)\n    h = list(map(int, stdin.split()))\n\n    l, r = 0, N-1\n    ans = N\n    while l <= r:\n        mid = l + (r - l) // 2\n        if all(h[mid] < h_i for h_i in h[l:mid]):\n            l = mid + 1\n        else:\n            r = mid - 1\n    l += 1\n    r += 1\n    while l <= r:\n        mid = l + (r - l) // 2\n        if all(h[mid] > h_i for h_i in h[l:mid]):\n            l = mid + 1\n        else:\n            r = mid - 1\n    l += 1\n    r += 1\n    print(r - l)\n    return r - l\n    \"\"\"\n    h = list(map(int, stdin.split()))\n    #l,r=0,N-1\n    #ans=N\n    #while l<=r:\n    #    mid=(l+r)//2\n    #    if all(h[mid]<h_i for h_i in h[l:mid]):\n    #        l=mid+1\n    #    else:\n    #        r=mid-1\n    #l,r=0,N-1\n    #while l<=r:\n    #    mid=(l+r)//2\n    #    if all(h[mid]>h_i for h_i in h[l:mid]):\n    #        r=mid-1\n    #    else:\n    #        l=mid+1\n    #l,r=0,N-1\n    #while l<=r:\n    #    mid=(l+r)//2\n    #    if all(h[mid]<h_i for h_i in h[l:mid]):\n    #        l=mid+1\n    #    else:\n    #        r=mid-1\n    #l,r=0,N-1\n    #while l<=r:\n    #    mid=(l+r)//2\n    #    if all(h[mid]>h_i for h_i in h[l:mid]):\n    #        r=mid-1\n    #    else:\n    #        l=mid+1\n    ans=N\n    l=0\n    r=N-1\n    while l<=r:\n        mid=(l+r)//2\n        if all(h[mid]<h_i for h_i in h[l:mid]):\n            ans=mid\n            l=mid+1\n        else:\n            r=mid-1\n    l,r=0,N-1\n    while l<=r:\n        mid=(l+r)//2\n        if all(h[mid]>h_i for h_i in h[l:mid]):\n            ans=mid\n            r=mid-1\n        else:\n            l=mid+1\n    print(r-l)\n    return r-l\n\nstdin=input()\nprint(solution(stdin))\n"
    },
    {
        "number": 4155,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    pass\n"
    },
    {
        "number": 4155,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    heights = list(map(int, stdin.split()))\n    l, r = 1, max(heights) + 1\n    count = 0\n    while l < r:\n        for i in range(1, n + 1):\n            if l <= heights[i - 1] <= r:\n                heights[i - 1] += 1\n                count += 1\n        l += 1\n        r = max(r, max(heights))\n    return str(count)\n"
    },
    {
        "number": 4155,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin.split()[0])\n    heights = list(map(int, stdin.split()[1:]))\n    l, r = 0, n\n    ans: int = 0\n    while l <= r:\n        mid = l + (r - l) // 2\n        if (mid + 1 <= n and heights[mid] < heights[mid + 1]) or heights[mid] == heights[mid + 1]:\n            l = mid + 1\n        else:\n            r = mid\n        ans += 1\n    return str(ans)\n\nsolution(\"3\")\n"
    },
    {
        "number": 4155,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return f'{2 + 2}'"
    },
    {
        "number": 4155,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    h = list(map(int, stdin.split(\" \")))\n    left, right = 1, n\n    while left < right:\n        mid = (left + right) // 2\n        if h[mid - 1] >= h[mid]:\n            left = mid + 1\n        else:\n            right = mid\n    return left\n\nsolution(input())\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(10 ** 6)\n\n\"\"\"\nRecursion\nGiven a function f(n) that returns the height of the nth flower, and a sequence of operations, e.g. f(1) = h1, f(2) = h2, f(3) = h3, \u2026, f(n) = hn, return the minimum number of operations required to satisfy the conditions of the flowerbed.\n\nConstraints\n1 \\leq N \\leq 100\n0 \\leq h_i \\leq 100\nAll values in input are integers.\n\nExample 1\nInput:\n5\n1 1 1 1 1\n\nOutput:\n2\n\nExplanation:\nFirst, we can water the first flower (i.e. h1=1). Then, we need to water the second and fourth flower. The minimum number of watering operations required is 2.\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4155,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4155,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    h = sorted(map(int, stdin.split()))\n\n    count = 0\n\n    for i in range(len(h) - 1):\n        if h[i + 1] - h[i] > 1:\n            count += 1\n\n    return str(count)"
    },
    {
        "number": 4155,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    h_seq = list(map(int, stdin.split()))\n    if len(h_seq) == N:\n        #watering operation\n        h_seq = sorted(h_seq)\n        l = 0\n        r = N - 1\n        curr_min_watering_operations = 0\n        while l < r:\n            if h_seq[l] < h_seq[r]:\n                curr_min_watering_operations += 1\n                l += 1\n            else:\n                r -= 1\n        print(curr_min_watering_operations)\n        return curr_min_watering_operations\n\nsolution(input())\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4156,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, w = map(int, stdin.split())\n    if n == 1:\n        return str(w)\n    a = list(map(int, stdin.split()))\n    a = list(sorted(a))\n    if a[0] == 0:\n        return str(w)\n    dp = [0] * (w + 1)\n    dp[0] = 1\n    for i in range(n):\n        for j in range(a[i], w + 1):\n            dp[j] += dp[j - a[i]]\n    return str(dp[-1])\n"
    },
    {
        "number": 4156,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3 5\n   ... 2 1 -3\n   ... ''')\n    '3'\n    >>> solution('''2 4\n   ... -1 1\n   ... ''')\n    '4'\n    >>> solution('''4 10\n   ... 2 4 1 2\n   ... ''')\n    '2'\n    \"\"\"\n    n, w = map(int, stdin.split())\n    passengers = tuple(map(int, stdin.split()))\n    result = []\n    for passenger in passengers:\n        if passenger > w:\n            result.append(0)\n        elif passenger + w <= 0:\n            result.append(0)\n        else:\n            result.append(passenger + w - 1)\n    return str(len(list(filter(lambda x: x == max(result), result))))\n"
    },
    {
        "number": 4156,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, w = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    return str(len(a))\n"
    },
    {
        "number": 4156,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return 0 if len(stdin) < 2 else str(solution(stdin[:-1]))\n"
    },
    {
        "number": 4156,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, w = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    return str(n - 1)\n    "
    },
    {
        "number": 4156,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, w = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    if n == 1:\n        if w == 0:\n            return 0\n        if w == 1:\n            if a[0] == 1:\n                return 1\n            else:\n                return 0\n        if w == 2:\n            if a[0] == 1:\n                return 2\n            else:\n                return 0\n        if w == 3:\n            if a[0] == 1:\n                return 3\n            else:\n                return 0\n        if w == 4:\n            if a[0] == 1:\n                return 4\n            else:\n                return 0\n    if n == 2:\n        if w == 0:\n            if a[0] == 1 and a[1] == 1:\n                return 1\n            if a[0] == 1 and a[1] == 2:\n                return 1\n            if a[0] == 2 and a[1] == 1:\n                return 2\n            if a[0] == 2 and a[1] == 2:\n                return 2\n        if w == 1:\n            if a[0] == 1 and a[1] == 1:\n                return 1\n            if a[0] == 1 and a[1] == 2:\n                return 1\n            if a[0] == 2 and a[1] == 1:\n                return 2\n            if a[0] == 2 and a[1] == 2:\n                return 2\n        if w == 2:\n            if a[0] == 1 and a[1] == 1:\n                return 1\n            if a[0] == 1 and a[1] == 2:\n                return 1\n            if a[0] == 2 and a[1] == 1:\n                return 2\n            if a[0] == 2 and a[1] == 2:\n                return 2\n        if w == 3:\n            if a[0] == 1 and a[1] == 1:\n                return 1\n            if a[0] == 1 and a[1] == 2:\n                return 1\n            if a[0] == 2 and a[1] == 1:\n                return 2\n            if a[0] == 2 and a[1] == 2:\n                return 2\n        if w == 4:\n            if a[0] == 1 and a[1] == 1:\n                return 1\n            if a[0] == 1 and a[1] == 2:\n                return 1\n            if a[0] == 2 and a[1] == 1:\n                return 2\n            if a[0] == 2 and a[1] == 2:\n                return 2\n        if w == 5:\n            if a[0] == 1 and a[1] == 1:\n                return 1\n            if a[0] == 1 and a[1] == 2:\n                return 1\n            if a[0] == 2 and a[1] == 1:\n                return 2\n            if a[0] == 2 and a[1] == 2:\n                return 2\n        if w == 6:\n            if a[0] == 1 and a[1] == 1:\n                return 1\n            if a[0] == 1 and a[1] == 2:\n                return 1\n            if a[0] == 2 and a[1] == 1:\n                return 2\n            if a[0] == 2 and a[1] == 2:\n                return 2\n        if w == 7:\n            if a[0] == 1 and a[1] == 1:\n                return 1\n            if a[0] == 1 and a[1] == 2:\n                return 1\n            if a[0] == 2 and a[1] == 1:\n                return 2\n            if a[0] == 2 and a[1] == 2:\n                return 2\n        if w == 8:\n            if a[0] == 1 and a[1] == 1:\n                return 1\n            if a[0] == 1 and a[1] == 2:\n                return 1\n            if a[0] == 2 and a[1] == 1:\n                return 2\n            if a[0] == 2 and a[1] == 2:\n                return 2\n        if w == 9:\n            if a[0] == 1 and a[1] == 1:\n                return 1\n            if a[0] == 1 and a[1] == 2:\n                return 1\n            if a[0] == 2 and a[1] == 1:\n                return 2\n            if a[0] == 2 and a[1] == 2:\n                return 2\n    if n == 3:\n        if w == 0:\n            if a[0] == 1 and a[1] == 1 and a[2] == 1:\n                return 1\n            if a[0] == 1 and a[1] == 1 and a[2] == 2:\n                return 1\n            if a[0] == 1 and a[1] == 2 and a[2] == 1:\n                return 1\n            if a[0] == 1 and a[1] == 2 and a[2] == 2:\n                return 1\n        if w == 1:\n            if a[0] == 1 and a[1] == 1 and a[2] == 1:\n                return 1\n            if a[0] == 1 and a[1] == 1 and a[2] == 2:\n                return 1\n            if a[0] == 1 and a[1] == 2 and a[2] == 1:\n                return 1\n            if a[0] == 1 and a[1] == 2 and a[2] == 2:\n                return 1\n        if w == 2:\n            if a[0] == 1 and a[1] == 1 and a[2] == 1:\n                return 1\n            if a[0] == 1 and a[1] == 1 and a[2] == 2:\n                return 1\n            if a[0] == 1 and a[1] == 2 and a[2] == 1:\n                return 1\n            if a[0] == 1 and a[1] == 2 and a[2] == 2:\n                return 1\n        if w == 3:\n            if a[0] == 1 and a[1] == 1 and a[2] == 1:\n                return"
    },
    {
        "number": 4156,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, w = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    if len(a) == 1:\n        if a[0] <= 0:\n            return '0'\n        else:\n            return '1'\n    else:\n        min_a = min(a)\n        max_a = max(a)\n        if min_a >= 0:\n            return '1'\n        else:\n            if max_a > w:\n                return '0'\n            else:\n                count = 0\n                for i in range(min_a, w + 1):\n                    count += int(i / (a[0] - i))\n                return str(count)\n"
    },
    {
        "number": 4156,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, w = map(int, stdin.split())\n    persons = list(map(int, stdin.split()))\n    dp = [0] * n\n    dp[0] = 1\n    for i in range(1, n):\n        dp[i] = dp[i - 1]\n        if i == 0 or persons[i - 1] > w:\n            dp[i] += dp[i - 1]\n        else:\n            dp[i] = 0\n    return str(dp[n - 1])\n"
    },
    {
        "number": 4156,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, w = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    return str(w_constraint(w, a))\n"
    },
    {
        "number": 4156,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, w = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    if a[0] == a[1]:\n        return 0\n    \n    num = 1\n    for i in range(1, n):\n        num *= (a[i]-a[i-1])\n    print(num % 1000000007)\n    return\n"
    },
    {
        "number": 4157,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = list(map(int, stdin.split()))\n    x.sort()\n    for i in range(n-1):\n        if x[i] % 3 == 0 and x[i+1] % 2 == 0:\n            x[i], x[i+1] = x[i+1], x[i]\n    return''.join(map(str, x))\n"
    },
    {
        "number": 4157,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    l = len(arr)\n    ans = list()\n    while len(arr) > 0:\n        a = arr.pop()\n        if a % 3 == 0:\n            ans.append(a // 3)\n        elif a % 2 == 0:\n            ans.append(a // 2)\n        else:\n            ans.append(a)\n    return \" \".join(map(str, ans))\n\nprint(solution(input()))\n\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4157,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\" \")[0])\n    numbers = stdin.split(\" \")[1]\n    numbers = list(map(int, numbers.split(\" \")))\n    answer = \"\"\n    while len(numbers) > 0:\n        answer += str(numbers[-1])\n        numbers.pop()\n    return answer\n"
    },
    {
        "number": 4157,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input_arr = stdin.split()\n    n = int(input_arr[0])\n    arr = list(map(int, input_arr[1]))\n    res = []\n    for i in range(n):\n        res.append(arr.pop(0))\n    for i in range(len(res)):\n        if i % 3 == 0 and i!= 0:\n            res.append(res.pop(0) * 3)\n        elif i % 2 == 0 and i!= 0:\n            res.append(res.pop(0) * 2)\n    return str(res)\n"
    },
    {
        "number": 4157,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, *nums = map(int, stdin.split())\n    # k = (a * b) / 3\n    # i = 1\n    # while i < n:\n    #     x = nums[i]\n    #     # if not k % 3 == 0:\n    #     #     i += 1\n    #     #     continue\n    #     if x % 3 == 0:\n    #         nums[i] = x * 2\n    #         i += 1\n    #         continue\n    #     else:\n    #         nums[i] = x // 3\n    #         i += 1\n\n    # return \" \".join(map(str, nums))\n    # x = int(stdin)\n    # while x!= 1:\n    #     if x % 3 == 0:\n    #         x = x / 3\n    #     else:\n    #         x = x * 2\n    # return str(x)\n    \n    #  c = 0\n    # for i in range(n-1):\n    #     print(c)\n    #     a = str(nums[i])\n    #     b = str(nums[i+1])\n    #     if (int(a) % 3 == 0):\n    #         c += int(b)\n    #     else:\n    #         c -= int(a)\n    # print(c)\n    # print(nums)\n    nums = sorted(nums)\n    ans = ''\n    for i in range(len(nums)):\n        ans += str(nums[i])\n    return ans"
    },
    {
        "number": 4157,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    A = list(map(int, stdin.split(' ')))\n    newA = []\n    for i in range(n):\n        newA.append((A[i] * 3) % 3 + 2 * A[i])\n    return''.join(map(str, newA))"
    },
    {
        "number": 4157,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n = int(lines[0])\n    numbers = lines[1]\n\n    result = []\n    for i in range(n):\n        if n - i >= 0:\n            for j in range(i):\n                result.append(numbers[j])\n            n = n - i\n            result.append(numbers[i])\n            for k in range(i, n):\n                result.append(numbers[k])\n            n = n + i\n        else:\n            result.append(numbers[0])\n            n = n + i\n            for k in range(i, n):\n                result.append(numbers[k])\n    return '\\n'.join(result)"
    },
    {
        "number": 4157,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n  a = list(map(int, stdin.split()))\n  if len(a) < 3:\n    return ''\n  l = len(a)\n  for i in range(l - 2):\n    a[i + 2] = a[i] * 2\n  for i in range(l - 1, 2, -2):\n    a[i - 1] = a[i - 1] * 3\n  for i in range(l - 1, 0, -2):\n    a[i - 1] = a[i - 1] * 2\n  return str(a[0]) +'' + str(a[1]) +'' + str(a[2])\n"
    },
    {
        "number": 4157,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    number_to_write, numbers_to_write = stdin.split()\n    numbers_to_write = list(map(int, numbers_to_write.split()))\n    n = len(numbers_to_write)\n    if n == 1:\n        return numbers_to_write[0]\n\n    # find the second number\n    second_number = int(numbers_to_write[1])\n    # if the second number is not divisible by 3\n    if second_number % 3!= 0:\n        second_number = second_number + (second_number % 3)\n    # if the second number is divisible by 3\n    else:\n        second_number = second_number - (second_number % 3)\n    # find the first number\n    first_number = int(numbers_to_write[0])\n    # if the first number is not divisible by 2\n    if first_number % 2!= 0:\n        first_number = first_number + (first_number % 2)\n    # if the first number is divisible by 2\n    else:\n        first_number = first_number - (first_number % 2)\n    # checking if the length of the sequence is correct\n    if len(numbers_to_write)!= n:\n        return \"Invalid input\"\n\n    # multiplying the numbers\n    first_number *= 2\n    # dividing the numbers\n    first_number = first_number // 3\n\n    # returning the result\n    return str(first_number) + \" \" + str(second_number)\n"
    },
    {
        "number": 4157,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\nsplit input into two lines:\n    1. list of numbers\n    2. sequence that Polycarp could write down on the board\n\nsorting input list and in-place reversing\n    1. split list into two parts: even and odd\n    2. sort even and odd\n    3. merge even and odd into one list and reverse it\n    4. return merged list and reversed list\n\nreversing even list and odd list\n    1. split even and odd into two parts\n    2. split even and odd into two parts\n    3. reverse even part\n    4. reverse odd part\n    5. merge two parts and return\n\n\"\"\""
    },
    {
        "number": 4158,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    x = list(map(int, stdin.split()[1].split()))\n    if n == 1:\n        print(1, x[0])\n        return\n    dp = [[0 for i in range(n)] for j in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for i in range(n):\n        for j in range(n):\n            if i!= j:\n                if j - i == 1:\n                    dp[i][j] = max(dp[i][j], max(abs(x[i] - x[j]), abs(x[i] - x[j] + 1)))\n                else:\n                    dp[i][j] = max(dp[i][j], max(abs(x[i] - x[j]), abs(x[i] - x[j] + 1), abs(x[i] - x[j] + 1)))\n    print(max([max(dp[i]) for i in range(n)]))\n    print(x)\n    res = []\n    for i in range(n):\n        if max(dp[i]) == dp[i][i]:\n            res.append(x[i])\n    return str(len(res)) + \" \" + str(res).replace('[', '').replace(']', '').replace(',', '').replace(' ', '')\n"
    },
    {
        "number": 4158,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    time complexity: O(n)\n    space complexity: O(1)\n    '''\n    N = int(stdin)\n    X = list(map(int, stdin.split()))\n    # X.sort()\n    X.sort(key=lambda x: x**2)\n    return str(len(X)//2) +'' + str(X[len(X)//2])\n\ndef"
    },
    {
        "number": 4158,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return \"{} {}\".format(max_points(int(stdin), int(stdin)), stdin)\n\n\ndef"
    },
    {
        "number": 4158,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    p = list(map(int, stdin.split()))\n    ans = 0\n    ans_set = set()\n    for i in range(n):\n        for j in range(i + 1, n):\n            if abs(p[i] - p[j]) == 1:\n                ans += 1\n                ans_set.add(p[i])\n                ans_set.add(p[j])\n    print(ans)\n    print(*sorted(ans_set), sep=\" \")\n"
    },
    {
        "number": 4158,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = list(map(int, stdin.split()))\n    d = 1\n    while True:\n        if 2 ** d >= n:\n            break\n        d += 1\n    res = []\n    for i in range(d):\n        if 2 ** i == d:\n            res.append(0)\n            continue\n        res.append(2 ** i - 1)\n    min_dis = pow(2, d) - 1\n    res = set(res)\n    for i in range(d - 1):\n        for j in range(i + 1, d):\n            dis = abs(x[res[i]] - x[res[j]])\n            if dis <= min_dis:\n                min_dis = dis\n    return str(len(res)) + '\\n' + str(list(res))\n"
    },
    {
        "number": 4158,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = list(map(int, stdin.split()))\n\n    points = set()\n    for xi in x:\n        points.add(xi)\n\n    max_count = 1\n    max_pair = ()\n\n    for i in range(n):\n        for j in range(i+1, n):\n            if (abs(x[i] - x[j])) % 2 == 0:\n                continue\n\n            pair = (x[i], x[j])\n            count = 0\n            for p in points:\n                if abs(p - pair[0]) <= 2**(pair[1] - p):\n                    count += 1\n\n            if count > max_count:\n                max_count = count\n                max_pair = pair\n\n    return f\"{max_count}\""
    },
    {
        "number": 4158,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    points = sorted(list(map(int, stdin.split())))\n\n    def factorize(n):\n        d = 2\n        while d * d <= n:\n            if n % d == 0:\n                yield d\n                n //= d\n            else:\n                d += 1\n\n        yield n\n\n    for i in range(1, 2**(n - 1) + 1):\n        d = factorize(i)\n        if len(set(points)) == len(d):\n            # print(points, d)\n            m = i\n            break\n\n    for i in range(1, m + 1):\n        print(*points[i - 1::i])\n\n    return m\n"
    },
    {
        "number": 4158,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    points = list(map(int, stdin.split()[1]))\n    k = 0\n    while k < 2 ** n - 1:\n        if all(abs(points[i] - points[j]) == k for i in range(n) for j in range(i + 1, n)):\n            return str(len(points)) + \" \" + \" \".join(map(str, points))\n        k += 1\n\nsolution(\"3 5 4 7 10 12\")\nsolution(\"2 5 4 7 10 12\")\n"
    },
    {
        "number": 4158,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    data = list(map(int, stdin.split()))\n    n = data[0]\n    points = sorted(data[1:])\n    max_possible_points = n ** 2\n    possible_points = []\n\n    for i in range(n):\n        if (points[i] - points[i-1]) % 2!= 0:\n            continue\n        if (points[i-1] - points[i]) % 2!= 0:\n            continue\n        if (points[i] - points[i-1]) == 2:\n            possible_points.append(points[i-1])\n\n    if not possible_points:\n        return str(0)\n    return str(len(possible_points)) + '\\n' +''.join(map(str, sorted(possible_points)))\n"
    },
    {
        "number": 4158,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    points = list(map(int, stdin.split()))\n    count = 0\n    for p in range(1, n):\n        for q in range(p):\n            if abs(points[p] - points[q]) == 1:\n                count += 1\n    return str(count)"
    },
    {
        "number": 4159,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return 0, 0\n"
    },
    {
        "number": 4159,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = map(int, stdin.split())\n    takahashi = 0\n    aoki = 0\n    for i in range(k):\n        if (takahashi + aoki) > 0:\n            takahashi -= 1\n        elif (takahashi + aoki) <= 0:\n            aoki += 1\n            takahashi += 1\n    print(takahashi, aoki)\n    return ''\n\nsolution('''2 3 3\n''')\n\nprint(solution(''''))"
    },
    {
        "number": 4159,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = stdin.split()\n    a = int(a)\n    b = int(b)\n    k = int(k)\n    takahashi_cookies = a\n    aoki_cookies = b\n    for i in range(k):\n        if takahashi_cookies > 0 and aoki_cookies > 0:\n            takahashi_cookies -= 1\n            aoki_cookies -= 1\n        elif takahashi_cookies > 0 and aoki_cookies == 0:\n            takahashi_cookies -= 1\n        elif takahashi_cookies == 0 and aoki_cookies > 0:\n            aoki_cookies -= 1\n    return str(takahashi_cookies) +'' + str(aoki_cookies)\n"
    },
    {
        "number": 4159,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = map(int, stdin.split())\n    if a == 1:\n        if b == 1:\n            return '1 0'\n        else:\n            return '1 1'\n    else:\n        if b == 1:\n            return '0 0'\n        else:\n            return '0 1'"
    },
    {
        "number": 4159,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def eat_first(cookies: list, num: int) -> str:\n        tmp = cookies.pop(0)\n        cookies.append(tmp)\n        return \" \".join(map(str, cookies))\n\n    aoki_cookies = list(map(int, stdin.split()))\n    takahashi_cookies = aoki_cookies.copy()\n    k = int(stdin.split()[2])\n    i = 0\n    while i < k:\n        if i % 2 == 0:\n            takahashi_cookies = eat_first(takahashi_cookies, 1)\n        else:\n            aoki_cookies = eat_first(aoki_cookies, 1)\n        i += 1\n    return f\"{takahashi_cookies}\\n{aoki_cookies}\"\n"
    },
    {
        "number": 4159,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    takahashi_cookies, aoki_cookies, k = map(int, stdin.split())\n    takahashi_cookies_eaten = 0\n    aoki_cookies_eaten = 0\n\n    while True:\n        takahashi_has_cookies = takahashi_cookies > 0\n        aoki_has_cookies = aoki_cookies > 0\n\n        if takahashi_has_cookies and aoki_has_cookies:\n            takahashi_cookies -= 1\n            aoki_cookies -= 1\n        elif takahashi_has_cookies:\n            takahashi_cookies -= 1\n            aoki_cookies_eaten += 1\n        elif aoki_has_cookies:\n            aoki_cookies -= 1\n            takahashi_cookies_eaten += 1\n\n        if (takahashi_cookies == 0 and aoki_cookies == 0) or (aoki_cookies_eaten == k):\n            break\n\n    print(takahashi_cookies_eaten, aoki_cookies_eaten)"
    },
    {
        "number": 4159,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = map(int, stdin.split())\n    takahashi = 0\n    aoki = 0\n\n    for _ in range(k):\n        if a > 0 and b > 0:\n            takahashi += 1\n            a -= 1\n            b -= 1\n        elif a > 0 and b == 0:\n            a -= 1\n        elif a == 0 and b > 0:\n            aoki += 1\n            b -= 1\n\n    return str(takahashi) +'' + str(aoki)\n\nstdin = input()\nprint(solution(stdin))\n"
    },
    {
        "number": 4159,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = (int(_) for _ in stdin.split())\n    takahashi_cookies = 0\n    aoki_cookies = 0\n    for _ in range(K):\n        if aoki_cookies > 0 and takahashi_cookies == 0:\n            aoki_cookies -= 1\n            takahashi_cookies += 1\n        elif aoki_cookies > 0 and takahashi_cookies > 0:\n            takahashi_cookies -= 1\n            aoki_cookies += 1\n        else:\n            aoki_cookies = 0\n            takahashi_cookies = 0\n    return str(takahashi_cookies) + \" \" + str(aoki_cookies)\n"
    },
    {
        "number": 4159,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = stdin.split()\n    A = int(A)\n    B = int(B)\n    K = int(K)\n\n    takahashi = A\n    aoki = B\n    while True:\n        if takahashi < K:\n            takahashi += aoki\n        else:\n            takahashi -= aoki\n        if aoki < K:\n            aoki += takahashi\n        else:\n            aoki -= takahashi\n        if takahashi == K and aoki == K:\n            break\n\n    return str(takahashi) +'' + str(aoki)\n"
    },
    {
        "number": 4159,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return '{0} {1} {2}'.format(\n        0 if not stdin[0].isdigit() else int(stdin[0]),\n        0 if not stdin[1].isdigit() else int(stdin[1]),\n        0 if not stdin[2].isdigit() else int(stdin[2])\n    )"
    },
    {
        "number": 4160,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Given the deposits and interest rates of Takahashi,\n    compute how long it takes for the balance to reach X.\n    \"\"\"\n    deposit = int(stdin)\n    X = int(stdin)\n    interest = 1.0 / 12\n    a = 1\n    while deposit < X:\n        a += 1\n        deposit += deposit * interest\n    return str(a)\n"
    },
    {
        "number": 4160,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    \n    if x < 101:\n        return \"0\"\n\n    a = 0\n    b = 100\n    c = x - 100\n    d = 1\n    e = 1\n    while e!= c:\n        a = b\n        b = b + (100 * d)\n        d = d + e\n        e = a + e\n    return str(e - 1)\n"
    },
    {
        "number": 4160,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    balance = int(stdin)\n    ans = 0\n    while balance < 100:\n        balance += balance * 0.01\n        ans += 1\n    return str(ans)"
    },
    {
        "number": 4160,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    balance = int(stdin)\n    i = 0\n    while balance <= X:\n        i += 1\n        balance = (balance + (i * (i + 1) * (2 * i + 1) // 6)) // 100\n    return str(i)\n"
    },
    {
        "number": 4160,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    while n > 100:\n        n = n * (1 + (1 / 100))\n    return str(n)"
    },
    {
        "number": 4160,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    balance = int(stdin)\n    a = balance\n    i = 0\n    while a > X:\n        a += balance * (1 + i * 0.01)\n        i += 1\n    return str(i)\n"
    },
    {
        "number": 4160,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    count = 0\n    while True:\n        if x <= 1:\n            break\n        x = x + x*(1-1/100)\n        count += 1\n    return str(count)\n"
    },
    {
        "number": 4160,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    i = 0\n    while x > 0:\n        x -= 100\n        i += 1\n        x = x + x * (1 + 1/100)\n    return i"
    },
    {
        "number": 4160,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    inp_x = int(stdin)\n\n    if inp_x < 101:\n        return \"1\"\n    elif inp_x == 101:\n        return \"0\"\n    else:\n        return str(math.ceil(((1 + (1/100)) ** (inp_x - 101)) - 1))\n"
    },
    {
        "number": 4160,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    count = 0\n    while(X >= 1):\n        X = X * 1.01 - 101\n        count += 1\n    return str(count)\n"
    },
    {
        "number": 4161,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    a = b = c = 1\n    res = 0\n    for i in range(1, k+1):\n        a, b, c = b, c, a % b + c % b\n        res += a\n    return str(res)"
    },
    {
        "number": 4161,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin.strip())\n    sum = 0\n    for i in range(1, K+1):\n        for j in range(1, K+1):\n            for k in range(1, K+1):\n                sum += max(i, j, k)\n    return str(sum)\n"
    },
    {
        "number": 4161,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    result = 0\n    for i in range(1,n+1):\n        for j in range(1,n+1):\n            for k in range(1,n+1):\n                if i<=j<=k:\n                    result += gcd(i,j,k)\n    return result\ndef"
    },
    {
        "number": 4161,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return sum(\n        [int(math.gcd(int(a), int(b), int(c))) for a, b, c in zip(\n            stdin.split(\" \"),\n            stdin.split(\" \"),\n            stdin.split(\" \")\n        )])\n"
    },
    {
        "number": 4161,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin)\n    if K == 1:\n        return '1'\n    return str(sum(sum(int(n) for n in str(d)) for d in range(1, K + 1)))\n"
    },
    {
        "number": 4161,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    import sys\n    sys.stdin = open(stdin)\n    k = int(sys.stdin.readline())\n    k = int(k)\n    s = sum(1 for i in range(1, k + 1) for j in range(1, k + 1) for z in range(1, k + 1) if i >= j and i >= z and j >= z)\n    return str(s)\n\nprint(solution(\"input.txt\"))"
    },
    {
        "number": 4161,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    return str(sum(1 for a in range(1, k+1) for b in range(1, k+1) for c in range(1, k+1) if gcd(a,b,c) == 1))"
    },
    {
        "number": 4161,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    inp = list(map(int, stdin.split()))\n    for i in range(1,inp[0]+1):\n        for j in range(1,inp[0]+1):\n            for k in range(1,inp[0]+1):\n                if i!=j and j!=k and i!=k:\n                    print(i+j+k,\"+\",end=\"\")\n    return print(i+j+k,\"+\",end=\"\")\nsolution(input())\n"
    },
    {
        "number": 4161,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    l=list(map(int,stdin.split(\" \")))\n    if l[0]<3:\n        return \"0\"\n    return str(sum([x*sum([y,z]) for x,y,z in zip(l,l,l) if x>=3]))\n"
    },
    {
        "number": 4161,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin)\n    return str(sum(\n        max(1, max(1, max(x, y, z))) for x, y, z in (\n            (1, 1, 1),\n            (1, 1, 2),\n            (1, 2, 1),\n            (1, 2, 2),\n            (2, 1, 1),\n            (2, 1, 2),\n            (2, 2, 1),\n            (2, 2, 2),\n        )\n    ))\n"
    },
    {
        "number": 4162,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    _, *nums = stdin.split()\n    return str(max(map(lambda x: x % nums[0] + x % nums[1] + x % nums[2], nums)))\n"
    },
    {
        "number": 4162,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = stdin.split()\n    max_num = -float('inf')\n    for i in range(n):\n        num = int(arr[i])\n        res = (num % int(arr[0])) + (num % int(arr[1])) + (num % int(arr[2]))\n        max_num = max(max_num, res)\n    print(max_num)\n    return max_num\n\nsolution(\"3\\n3 4 6\")\nsolution(\"2\\n2 2 2\")\nsolution(\"2\\n1 1\")\n"
    },
    {
        "number": 4162,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return"
    },
    {
        "number": 4162,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    f = sum([a[i % N] * (i % N) for i in range(N)])\n    print(f)\n    return f\n"
    },
    {
        "number": 4162,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    inputs = list(map(int, stdin.split()))\n    return str(max(inputs))\n\nprint(solution(input()))"
    },
    {
        "number": 4162,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, *nums = list(map(int, stdin.split()))\n    a = nums\n\n    ans = 0\n    for i in range(1, N):\n        ans = max(ans, a[i] % a[i-1] + a[i] % a[i+1])\n    \n    print(ans)\n    return ans"
    },
    {
        "number": 4162,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    What is the maximum value of f(m)?\n    '''\n    N = int(stdin.strip())\n    L = list(map(int, stdin.strip().split()))\n    m = max(L)\n    while m % L[0]!= 0:\n        m += 1\n    print(m)\n    return m\n"
    },
    {
        "number": 4162,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return max(map(lambda x: x % stdin, range(1, int(stdin) + 1)))"
    },
    {
        "number": 4162,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    ans = 0\n    for i in range(1, n + 1):\n        ans += i % int(stdin)\n    return str(ans)\n\nprint(solution(input()))"
    },
    {
        "number": 4162,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    [N, *a] = map(int, stdin.split())\n\n    return str(max(sum(map(lambda x: x % y, a)) for y in a))\n"
    },
    {
        "number": 4163,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    dice_1, dice_2 = [], []\n    # N = 3\n    for i in range(N):\n        dice_1.append(int(stdin))\n        dice_2.append(int(stdin))\n    for i in range(3, N):\n        dice_1.append(int(stdin))\n        if dice_1[i] == dice_2[i]:\n            if dice_1[i] == dice_1[i - 1]:\n                return \"Yes\"\n    return \"No\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4163,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, D1, D2 = map(int, stdin.split())\n    cnt = 0\n    lst = []\n\n    for i in range(1, N + 1):\n        d1, d2 = D1, D2\n        if i > 2:\n            if d1 == d2:\n                cnt += 1\n            d1, d2 = D2, D1\n\n        lst.append(d1)\n        lst.append(d2)\n\n    if cnt >= 3:\n        return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4163,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    D = stdin.split()\n    result = 0\n    d1 = 0\n    d2 = 0\n    for i in range(1, n+1):\n        d1 = int(D[i-1][0])\n        d2 = int(D[i-1][1])\n        if d1 == d2:\n            result += 1\n        if d1 == d2 and result >= 3:\n            return \"Yes\"\n        else:\n            result = 0\n    return \"No\"\n"
    },
    {
        "number": 4163,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    d1 = stdin.strip().split()\n    d2 = stdin.strip().split()\n    d3 = stdin.strip().split()\n    d4 = stdin.strip().split()\n    if d1[0] == d2[0] == d3[0] == d4[0]:\n        return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 4163,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    d = list(map(int, stdin.split(' ')))\n    count = 0\n    last_d1 = d[0]\n    last_d2 = d[0]\n    for i in range(1, N):\n        d1 = d[i]\n        d2 = d[i]\n        if d1 == d2:\n            count += 1\n        if d1!= last_d1 and d2!= last_d2:\n            count = 0\n        if count >= 3:\n            return 'Yes'\n        last_d1 = d1\n        last_d2 = d2\n    return 'No'\n"
    },
    {
        "number": 4163,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    _,_,_,*input = stdin.strip().split()\n    N = int(input[0])\n    D = list(map(int,input[1:N+1]))\n\n    doubles = 0\n\n    for i in range(N):\n        if D[i] == D[i+1]:\n            doubles += 1\n        if D[i] == D[i+2]:\n            doubles += 1\n    if doubles >= 3:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4163,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    dice_1, dice_2 = stdin.split()\n    dice_1 = int(dice_1)\n    dice_2 = int(dice_2)\n    dice_1_rolled = set()\n    dice_2_rolled = set()\n    counter = 1\n    for i in range(1, dice_1):\n        dice_1_rolled.add(i)\n    for i in range(1, dice_2):\n        dice_2_rolled.add(i)\n    while counter <= dice_1:\n        if dice_1_rolled.intersection(dice_2_rolled):\n            return 'Yes'\n        counter += 1\n        dice_1_rolled.add(counter)\n        dice_2_rolled.add(counter)\n    return 'No'"
    },
    {
        "number": 4163,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    d1 = int(stdin)\n    d2 = int(stdin)\n    if n <= 3:\n        return \"Yes\"\n    for i in range(3, n):\n        d1, d2 = d2, d1\n        d1, d2 = d2, d1\n        d1, d2 = d2, d1\n        if d1 == d2:\n            return \"Yes\"\n    return \"No\"\n\"\"\"\n\nfrom itertools import combinations\n\ndef"
    },
    {
        "number": 4163,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    result = stdin.splitlines()\n    first_row = list(map(int, result[0].split()))\n    second_row = list(map(int, result[1].split()))\n\n    # check if the number of doubles in a row matches\n    number_of_doubles_in_a_row = 0\n    for i in range(2, len(first_row)):\n        if first_row[i] == second_row[i-2]:\n            number_of_doubles_in_a_row += 1\n    if number_of_doubles_in_a_row >= 3:\n        return \"Yes\"\n    else:\n        return \"No\"\n\ndef"
    },
    {
        "number": 4163,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    d1 = int(stdin.strip().split()[0])\n    d2 = int(stdin.strip().split()[1])\n    d3 = d1\n    d4 = d2\n    for _ in range(n-2):\n        d3 = d4\n        d4 = int(stdin.strip().split()[2])\n        if d1 == d3 and d2 == d4:\n            return \"Yes\"\n    return \"No\"\n    \"\"\"\n    # Your code goes here\n    return \"No\"\n\ndef"
    },
    {
        "number": 4164,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    circles_area = 4 * r * r\n    circle_1_area = 2 * r * r\n    if circles_area > circle_1_area:\n        return \"4\"\n    return str(int(circle_1_area / circles_area))"
    },
    {
        "number": 4164,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    radius = int(stdin)\n    if radius > 1:\n        return 4 * radius\n    else:\n        return 0\nprint(solution(input()))\n"
    },
    {
        "number": 4164,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    total = 1\n    while r > 1:\n        r *= 2\n        total *= 2\n        if r > total:\n            total = r\n    return str(total)\n    # print(str(total))\n    # return total\n    # return str(r)\n    # return total//r\n    # return r*total\n"
    },
    {
        "number": 4164,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    r: int = int(stdin)\n    if r < 1 or r > 100:\n        return 'Invalid input'\n    else:\n        return (4 * (r * r))"
    },
    {
        "number": 4164,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    return str(int(r > 1))\n    \"\"\""
    },
    {
        "number": 4164,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Write a function that will take the input as an integer,\n    and output the area of a circle of radius that radius.\n    '''\n    r = int(stdin)\n\n    if r > 1:\n        return 4 * r * r\n    else:\n        return 1"
    },
    {
        "number": 4164,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    if r >= 1 and r < 100:\n        return str(int(4 * r ** 2 > int(r ** 2)))\n    else:\n        return \"Invalid Input\"\n"
    },
    {
        "number": 4164,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    cir1 = 4 * r * r\n    cir2 = 2 * r * r\n    return str(cir1 / cir2)"
    },
    {
        "number": 4164,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    print(4 * (n - 1))\n    return 4 * (n - 1)\n"
    },
    {
        "number": 4164,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    count = 0\n    while r > 1:\n        count += 1\n        r = r * 2\n    return str(count)"
    },
    {
        "number": 4165,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin.split()[0])\n    nums: List[int] = [int(s) for s in stdin.split()[1:]]\n    max_side: int = max(nums)\n    for i in range(1, n):\n        if max_side < sum(nums[:i]):\n            return \"No\"\n    return \"Yes\""
    },
    {
        "number": 4165,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    sides = list(map(int, stdin.split()))\n    if N == 1:\n        if sides[0] > sides[1]:\n            print('Yes')\n            return\n        else:\n            print('No')\n            return\n    if N == 2:\n        if sides[0] > sides[1] + sides[2]:\n            print('Yes')\n            return\n        else:\n            print('No')\n            return\n    if N == 3:\n        if sides[0] > sides[1] + sides[2]:\n            print('Yes')\n            return\n        else:\n            print('No')\n            return\n    if N == 4:\n        if sides[0] > sides[1] + sides[2] + sides[3]:\n            print('Yes')\n            return\n        else:\n            print('No')\n            return\n    if N == 5:\n        if sides[0] > sides[1] + sides[2] + sides[3] + sides[4]:\n            print('Yes')\n            return\n        else:\n            print('No')\n            return\n    if N == 6:\n        if sides[0] > sides[1] + sides[2] + sides[3] + sides[4] + sides[5]:\n            print('Yes')\n            return\n        else:\n            print('No')\n            return\n    if N == 7:\n        if sides[0] > sides[1] + sides[2] + sides[3] + sides[4] + sides[5] + sides[6]:\n            print('Yes')\n            return\n        else:\n            print('No')\n            return\n    if N == 8:\n        if sides[0] > sides[1] + sides[2] + sides[3] + sides[4] + sides[5] + sides[6] + sides[7]:\n            print('Yes')\n            return\n        else:\n            print('No')\n            return\n    if N == 9:\n        if sides[0] > sides[1] + sides[2] + sides[3] + sides[4] + sides[5] + sides[6] + sides[7] + sides[8]:\n            print('Yes')\n            return\n        else:\n            print('No')\n            return\n    if N == 10:\n        if sides[0] > sides[1] + sides[2] + sides[3] + sides[4] + sides[5] + sides[6] + sides[7] + sides[8] + sides[9]:\n            print('Yes')\n            return\n        else:\n            print('No')\n            return\n"
    },
    {
        "number": 4165,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    lines = stdin.split()\n    lines = sorted([int(x) for x in lines])\n    if n == 3:\n        if lines[1] < lines[0] + lines[2]:\n            return \"Yes\"\n        else:\n            return \"No\"\n    if n == 4:\n        if lines[2] < lines[1] + lines[3]:\n            return \"Yes\"\n        else:\n            return \"No\"\n    return \"No\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4165,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    nums = map(int, stdin.strip().split(' '))\n    max_side_length = sum(nums)\n    if N == 2:\n        return \"Yes\" if max_side_length <= max(nums) else \"No\"\n    if N == 3:\n        if nums[0] <= max_side_length and max_side_length <= max(nums[1:]) + nums[0]:\n            return \"Yes\"\n        return \"No\"\n    if N == 4:\n        if nums[0] <= max_side_length and max_side_length <= max(nums[1:]) + nums[0]:\n            return \"Yes\"\n        return \"No\"\n\n    def can_be_drawn(nums: List[int]) -> bool:\n        if sum(nums) % 2!= 0:\n            return False\n        if len(nums) == 2:\n            return True\n        if len(nums) == 3:\n            return (nums[1] < nums[2]) and (nums[0] < nums[2])\n        if len(nums) == 4:\n            if (nums[0] + nums[2]) * 2 == sum(nums) - nums[1]:\n                return True\n            else:\n                return False\n\n    for i in range(1, N):\n        nums_copy = nums.copy()\n        if can_be_drawn(nums_copy):\n            return \"Yes\"\n        nums_copy = nums_copy[::-1]\n        if can_be_drawn(nums_copy):\n            return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4165,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    data = list(map(int, stdin.split()))\n    return \"Yes\" if (sum(data[1:]) < max(data) - min(data) + 1) else \"No\""
    },
    {
        "number": 4165,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 3:\n        return \"No\"\n    sides = stdin.split(' ')\n    for i in range(len(sides)):\n        sides[i] = int(sides[i])\n    if sum(sides) / n < max(sides):\n        return \"Yes\"\n    else:\n        return \"No\"\n\n\ndef"
    },
    {
        "number": 4165,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    _, *polygon = stdin.split()\n    return \"Yes\" if max(polygon) < sum(polygon) - max(polygon) else \"No\""
    },
    {
        "number": 4165,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    l = [int(i) for i in stdin.split()]\n    if len(l) == n and n >= 3:\n        l_s = sum(l[1:])\n        l_s1 = max(l) - l[0]\n        l_s2 = max(l) - l[-1]\n        if l_s < l_s1 and l_s < l_s2:\n            return \"Yes\"\n        else:\n            return \"No\"\n    else:\n        return \"Invalid\"\n"
    },
    {
        "number": 4165,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.rstrip()\n    N = int(stdin.split()[0])\n    longest = max(stdin.split()[1:])\n    min_len = longest\n    count = 0\n    for i in range(1, N):\n        temp = longest\n        temp -= i\n        if temp < min_len:\n            count += 1\n            min_len = temp\n    return \"Yes\" if count == 0 else \"No\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4165,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    (n,) = map(int, stdin.split())\n\n    l_n = list(map(int, stdin.split()))\n    lengths = sorted(l_n)\n    differences = []\n    for i in range(1, len(lengths)):\n        differences.append(lengths[i] - lengths[i-1])\n    differences = sorted(differences)\n\n    if len(differences) == 0:\n        return 'Yes'\n\n    for i in range(len(differences)):\n        if differences[i] < sum(differences[:i]):\n            return 'No'\n\n    return 'Yes'"
    },
    {
        "number": 4166,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n\n    for i in range(1, n + 1):\n        s = str(i)\n        c = ''.join(sorted(s))\n        if int(c) >= 0 and len(s) == m and c[0]!= '0' and '1' not in c:\n            return c\n    return -1\n"
    },
    {
        "number": 4166,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    s = list(map(int, stdin.split()))\n    for i in range(n - 1):\n        if s[i] > 0 and s[i] < m:\n            for j in range(i + 1, n):\n                if s[i] == s[j]:\n                    return -1\n    for i in range(n - 1):\n        if s[i] > 0 and s[i] < 10:\n            for j in range(i + 1, n):\n                if s[i] == s[j]:\n                    return -1\n    for i in range(n - 1):\n        if s[i] > 0 and s[i] < 10:\n            if s[i] > 9:\n                for j in range(i + 1, n):\n                    if s[i] == s[j]:\n                        return -1\n    for i in range(n - 1):\n        if s[i] > 0 and s[i] < 10:\n            if s[i] > 9:\n                for j in range(i + 1, n):\n                    if s[i] == s[j]:\n                        return -1\n    return ''.join(map(str, s))\n\ndef"
    },
    {
        "number": 4166,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    strings = []\n    for _ in range(N):\n        strings.append(stdin.split()[_ + 1])\n\n    strings = sorted(strings)\n    ans = 0\n    for _ in range(N):\n        ans += int(strings[_][0]) * 10 ** (N - _ - 1) + int(strings[_][1])\n    return str(ans)\n"
    },
    {
        "number": 4166,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, M = list(map(int, stdin.strip().split()))\n    ans = ''\n    for i in range(M):\n        ans += str(int(stdin.strip().split()[i + 1][0]) - int(stdin.strip().split()[i][0]))\n    if int(ans) >= 0:\n        print(ans)\n    else:\n        print(-1)"
    },
    {
        "number": 4166,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    count = 0\n    if n > 3 or m > 5:\n        return \"NOT FOUND\"\n    for i in range(1, m + 1):\n        if int(stdin.split()[i][0]) >= int(stdin.split()[i][1]) and int(stdin.split()[i][1]) <= int(stdin.split()[i][2]):\n            count += 1\n    if count >= 1:\n        return str(min(int(\"\".join(stdin.split())), int(\"\".join(stdin.split()))))\n    else:\n        return \"NOT FOUND\"\nprint(solution(input()))\n"
    },
    {
        "number": 4166,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    if N > 1 and N < 10 and M > 1 and M < 10:\n        s = list(map(int, stdin.split()))\n        if 0 <= s[0] < 10 and 0 <= s[1] < 10 and 1 <= s[2] < 10 and 0 <= s[3] < 10 and 0 <= s[4] < 10 and 1 <= s[5] < 10 and 1 <= s[6] < 10:\n            if 1 <= s[1] <= N and 1 <= s[2] <= M and 1 <= s[6] <= N and 1 <= s[5] <= M:\n                if s[1] == 0 or s[1] == N:\n                    if s[2] == 0 or s[2] == M:\n                        if s[5] == 0 or s[5] == N:\n                            if s[6] == 0 or s[6] == M:\n                                return '{:0{}d}'.format(max(0, sum([i * j for i, j in zip([int(x) for x in str(i)], s)])), N)\n        return -1\n    return -1\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4166,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, M = stdin.split()\n    N, M = int(N), int(M)\n    digits = [int(i) for i in str(N)]\n    digits.sort()\n    \n    result = 1\n    for i in range(M):\n        result *= digits[i]\n    return result"
    },
    {
        "number": 4166,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Extracting input\n    n, m = map(int, stdin.split())\n    # Checking conditions\n    if n <= 0 or m <= 0 or m > 5 or n!= m:\n        return \"Invalid input\"\n    # Initializing list of digits of N to contain zero, since python does not support zero in variable list\n    n = [0] * n\n    # Extracting numbers in a list\n    numbers = list(map(int, stdin.split()))\n    # Initializing numbers from left to right\n    for i in range(m):\n        n[i] = numbers[i]\n    # Extracting numbers from right to left\n    for j in range(m - 1, -1, -1):\n        n[j] = numbers[j]\n    # Initializing digits of N to contain sum of digits of the integers of the list\n    sum = 0\n    for k in range(n[m - 1], n[0] - 1, -1):\n        sum += k\n    if sum > 0:\n        return str(sum)\n    else:\n        return \"Invalid input\"\n"
    },
    {
        "number": 4166,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = stdin.split()\n    n, m = int(n), int(m)\n    start = 1\n    end = m\n    if m > n:\n        start = m\n        end = n\n\n    for i in range(start, end + 1):\n        s = str(i)\n        if len(s)!= n:\n            continue\n\n        flag = True\n        for i in range(n):\n            if int(s[i]) > m or int(s[i]) < 0:\n                flag = False\n                break\n        if flag:\n            print(s)\n    return"
    },
    {
        "number": 4166,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    m = int(stdin.split()[1])\n    for i in range(1, n+1):\n        s = list(map(int, stdin.split()[i].split()))\n        s = s[::-1]\n        res = []\n        for j in range(len(s)):\n            res.append(s[j] * 10**j)\n        for j in range(1, m+1):\n            if all(elem < j for elem in res):\n                print(j)\n                return\n    print(-1)\n\nsolution(input())\n'''\n\ndef"
    },
    {
        "number": 4167,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    s = [False] * N\n\n    for i in range(1, N + 1):\n        for j in range(i, N + 1):\n            for k in range(j, N + 1):\n                if i * j * k == K:\n                    s[i - 1] = True\n                    s[j - 1] = True\n                    s[k - 1] = True\n                    break\n\n    ans = 0\n    for i in range(N):\n        if s[i]:\n            ans += 1\n\n    return str(ans)\n"
    },
    {
        "number": 4167,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.strip().split()\n    n = int(n)\n    k = int(k)\n    count = 0\n    for i in range(1,n+1):\n        for j in range(i,n+1):\n            for m in range(j,n+1):\n                if (i+j+m)%k == 0:\n                    print(i, j, m, end=' ')\n                    count += 1\n    print(count)\n\nsolution(input())\n"
    },
    {
        "number": 4167,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(input_from_stream_or_file())\n    9\n    \"\"\"\n    n, k = map(int, stdin.split())\n    a = k * (k + 1) // 2\n    b = k * (k + 1) // 2\n    c = k * (k + 1) // 2\n    d = (n - a + 1) * (n - b + 1) * (n - c + 1)\n    print(d)\n    return str(d)\n"
    },
    {
        "number": 4167,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    k = int(stdin.split()[1])\n\n    triples = []\n\n    for a in range(1, n + 1):\n        for b in range(1, n + 1):\n            for c in range(1, n + 1):\n                if a + b == c and a + c == b and c + a == b:\n                    if a % k == 0 and b % k == 0 and c % k == 0:\n                        triples.append((a, b, c))\n\n    print(len(triples))\n    return \"\".join(map(str, triples))\n"
    },
    {
        "number": 4167,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4167,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(len(set([(i, i + j, i + j + k) for i in range(n) for j in range(i, n) for k in range(j, n)])))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4167,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, K = list(map(int, stdin.split(' ')))\n    print(2*N//3 - (N-K)//3)\n    return ''\n"
    },
    {
        "number": 4167,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    _, n, k = stdin.split()\n    n = int(n)\n    k = int(k)\n    res = 0\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            for k in range(1, n + 1):\n                if (i + j) % k == 0 and (j + k) % i == 0 and (k + i) % j == 0:\n                    res += 1\n    return str(res)\n\ndef"
    },
    {
        "number": 4167,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n\n    return f\"{len(list(filter(lambda x: x[0]+x[1]%k == 0 and x[2]%k == 0, list(map(lambda x: (x[0], x[1], x[2]),\n                                                                                   [(x*k+x, x*k+x+x, x*k+x+x) for x in range(1, n+1)]))))}\"\n\n\ndef"
    },
    {
        "number": 4167,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, K = list(map(int, stdin.split()))\n    print(\n        sum(\n            map(\n                lambda x: (x + 1) * (x + 3) + (x + 2) * (x + 1) <= N and (x + 1) * (x + 3) + (x + 2) * (x + 1) % K == 0,\n                range(N + 1))\n        )\n    )\n    return \"\"\n"
    },
    {
        "number": 4168,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    res = \"\"\n    while n:\n        res = str(n % -2) + res\n        n //= -2\n    return res\n"
    },
    {
        "number": 4168,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    S = str(-(N + 1))\n    # Generating Base -2 representation of N\n    while len(S) < 2:\n        N = (N + 1) * (-2)\n        S = str(N)\n    return S"
    },
    {
        "number": 4168,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin\n    if N == \"0\":\n        return \"0\"\n    string = \"\"\n    while int(N)!= 0:\n        reminder = N % -2\n        N = int(N / -2)\n        if reminder == 0:\n            reminder = \"0\"\n        string += str(reminder)\n    return string[::-1]\n\"\"\""
    },
    {
        "number": 4168,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    base = 2\n    while base < 2**9:\n        if N == 0:\n            return str(0)\n        if N % base == 0:\n            N //= base\n        else:\n            base *= 2\n    return str(N)\n"
    },
    {
        "number": 4168,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    n = int(s)\n    k = 0\n    res = ''\n    while n > 0:\n        if n % (-2) == 0:\n            res += '0'\n            n = n // (-2)\n        else:\n            res += '1'\n            n = (n // (-2)) - 1\n        k += 1\n    if k < len(res):\n        res = res[0:k]\n    return res\n"
    },
    {
        "number": 4168,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join(map(str, map(int, stdin.split())))\n    \n"
    },
    {
        "number": 4168,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin\n    N = int(input)\n    zero = \"0\"\n    one = \"1\"\n    if N < 0:\n        N = -N\n        zero, one = one, zero\n    N_list = list(str(N))\n    count = 0\n    ans = \"\"\n    while len(N_list) > 0:\n        count = count + 1\n        if count % 2!= 0:\n            ans = zero + ans\n        else:\n            ans = one + ans\n        N_list.pop()\n        N = int(\"\".join(N_list))\n        N = N * (-2) ** count\n    return str(ans)\n"
    },
    {
        "number": 4168,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4168,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def encode(val: int) -> str:\n        if val < 0:\n            return '-' + encode(-val)\n        if val == 0:\n            return '0'\n        res = ''\n        while val > 0:\n            res = str(val % 2) + res\n            val //= 2\n        return res\n    return encode(int(stdin))"
    },
    {
        "number": 4168,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4169,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, m = map(int, stdin.split())\n    # print(n, m)\n    data = list(map(int, stdin.split()))\n    # print(data)\n    sorted_data = sorted(data)\n    # print(sorted_data)\n    \n    return ''.join(map(str, sorted_data[m - 1]))\n\nprint(solution(input()))\n\"\"\"\n\n\"\"\"\n-------SOLUTION-------"
    },
    {
        "number": 4169,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    [n, m] = list(map(int, stdin.split()))\n    d_a = list(map(int, stdin.split()))\n    [n_s, m_s] = divmod(m, n)\n    d_a = sorted(d_a)\n    d_s = []\n    for i in range(n_s):\n        d_s.append(d_a[i] * (n - i))\n    d_s = sorted(d_s)\n    min_money = n_s * min(d_a) + max(d_s)\n    return str(min_money)\n"
    },
    {
        "number": 4169,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    tokens = stdin.split()\n    n, m = int(tokens[0]), int(tokens[1])\n    a_store = sorted(map(int, tokens[2:]))\n    b_store = sorted(map(int, tokens[2:]))\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(m + 1):\n            if i == 1 and j == 0:\n                dp[i][j] = a_store[i - 1]\n            else:\n                dp[i][j] = max(a_store[i - 1] + dp[i - 1][j], b_store[i - 1] + dp[i - 1][j - 1])\n    return dp[n][m]\n"
    },
    {
        "number": 4169,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    _, n, m = stdin.split(\" \")\n    n, m = int(n), int(m)\n\n    stores = [[int(x) for x in stdin.split(\" \")] for _ in range(n)]\n\n    min_money = float(\"inf\")\n\n    for i in range(1 << n):\n        total_money = 0\n        for j in range(n):\n            if i & (1 << j):\n                total_money += stores[j][0]\n        if total_money >= m:\n            min_money = min(min_money, total_money)\n\n    return str(min_money)\n\nsolution(\"2 5\\n4 9\\n2 4\\n\")"
    },
    {
        "number": 4169,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    _, num_stores, num_drinks = stdin.split(' ')\n    num_stores, num_drinks = int(num_stores), int(num_drinks)\n    min_money, max_money = 10**9, 0\n\n    for i in range(num_stores):\n        _, current_money = stdin.split(' ')\n        current_money = int(current_money)\n        min_money = min(min_money, current_money)\n        max_money = max(max_money, current_money)\n\n    for i in range(num_drinks):\n        _, current_money = stdin.split(' ')\n        current_money = int(current_money)\n        if min_money <= current_money <= max_money:\n            min_money = min(min_money, current_money)\n\n    return str(min_money)\n"
    },
    {
        "number": 4169,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    s_list = []\n    for _ in range(n):\n        s_list.append(list(map(int, stdin.split())))\n    dp = [[float('inf') for _ in range(m + 1)] for _ in range(n + 1)]\n    # dp[i][j] is the minimum amount of money we can buy i different cans of energy drinks for j yen\n    for i in range(n + 1):\n        for j in range(m + 1):\n            if j < s_list[i - 1][0]:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = min(dp[i - 1][j], dp[i - 1][j - s_list[i - 1][0]] + s_list[i - 1][1])\n\n    return str(dp[n][m])\n"
    },
    {
        "number": 4169,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n, m = list(map(int, lines[0].split()))\n    stores = list(map(int, lines[1].split()))\n    stores = [(stores[i], stores[i + 1]) for i in range(0, n, 2)]\n    stores.sort(reverse=True)\n    curr = 0\n    ans = -1\n    for i in range(1, m + 1):\n        if curr >= stores[i][0]:\n            curr = max(curr, stores[i][0])\n            curr += stores[i][1]\n            ans = max(ans, curr)\n    return str(ans)\n"
    },
    {
        "number": 4169,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    [N, M] = stdin.split(' ')\n    N = int(N)\n    M = int(M)\n    a = sorted([int(x) for x in stdin.split(' ')], reverse=True)\n    a = a[:N]\n    print(sum(a[:M]))\n    return ''"
    },
    {
        "number": 4169,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    returns:\n        int: minimum amount of money that a user can buy\n    '''\n    # your code here\n    input = stdin.split(' ')\n    n = int(input[0])\n    m = int(input[1])\n\n    input1 = input[2:]\n\n    m_list = []\n\n    for i in range(len(input1)):\n        m_list.append(int(input1[i]))\n\n    final = min(m_list)\n\n    return final"
    },
    {
        "number": 4169,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    [N, M] = map(int, lines[0].split())\n    drinks = list(map(int, lines[1].split()))\n\n    ans = N*sum(drinks)\n    for i in range(1, len(drinks)):\n        ans = min(ans, N*drinks[i]+M-drinks[i-1])\n    return str(ans)\n\nprint(solution(input()))\n\n'''\n\n\n\n'''\n"
    },
    {
        "number": 4170,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    h = list(map(int, stdin.split()))\n    h.insert(0, 0)\n    res = 0\n    curr_max = h[1]\n    for i in range(2, N + 1):\n        if h[i] > curr_max:\n            res += 1\n            curr_max = h[i]\n    return str(res)\n\"\"\"\ndef"
    },
    {
        "number": 4170,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    lines = stdin.split()\n    h = list(map(int, lines))\n    res = 0\n    i = 0\n    while i < len(h) - 1:\n        if h[i] < h[i + 1]:\n            res += 1\n            i += 1\n        else:\n            i += 2\n    return res\n"
    },
    {
        "number": 4170,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    max_dist = -1\n    dist = 0\n    for line in lines:\n        dist += 1\n        max_dist = max(max_dist, int(line))\n        if dist % 2 == 0:\n            dist += 1\n    return str(max_dist)\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4170,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    h = list(map(int, stdin.split()))\n    if N == 1:\n        return str(0)\n    if N == 2:\n        return str(1)\n    # Find the max number of moves in the range [1, N-1]\n    max_move = 0\n    for i in range(1, N - 1):\n        if h[i + 1] > h[i]:\n            max_move += 1\n    return str(max_move)\n\n\nprint(solution(input()))\n\"\"\"\n"
    },
    {
        "number": 4170,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    h_arr = [int(x) for x in stdin.split()]\n    h_arr.sort()\n    if N % 2 == 1:\n        # Odd N\n        print(N - 1)\n    else:\n        print(N // 2)\n    return \"Case #{}: {}\".format(stdin, answer)"
    },
    {
        "number": 4170,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, *h = map(int, stdin.split())\n    max_steps = 0\n    current_h = max_h = h[0]\n    for i in range(1, n):\n        max_h = max(max_h, h[i])\n        if max_h > current_h:\n            current_h = max_h\n            max_steps += 1\n    return str(max_steps)\n"
    },
    {
        "number": 4170,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(n):\n        return n > 0 and n < 10\n\n    def get_board_height(h):\n        return h.split()\n\n    n = int(stdin)\n    if is_valid(n):\n        board_height = get_board_height(stdin)\n        return board_height[n - 1]\n    else:\n        print(\"invalid input\")\n        return \"\"\n\n\nprint(solution(\"5\"))\n\n\ndef"
    },
    {
        "number": 4170,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    heights = stdin.strip().split()\n    heights = [int(h) for h in heights]\n    left = 0\n    right = 0\n    max_steps = 0\n    while left < n and right < n:\n        left_height = heights[left]\n        right_height = heights[right]\n        if left_height <= right_height:\n            left += 1\n            max_steps = max(max_steps, left_height)\n        else:\n            right += 1\n            max_steps = max(max_steps, right_height)\n    return str(max_steps)\n\nsolution(\"5 10 4 8 7 3\")\nsolution(\"6 1 4 8 7 3\")"
    },
    {
        "number": 4170,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    h = list(map(int, stdin.split()))\n    dp = [[0 for _ in range(N + 1)] for _ in range(N + 1)]\n    for i in range(1, N + 1):\n        dp[1][i] = h[i - 1]\n    for i in range(2, N + 1):\n        for j in range(1, N + 1):\n            dp[i][j] = max(dp[i][j - 1], dp[i - 1][j]) + h[j - 1]\n    return str(dp[N][N])\n"
    },
    {
        "number": 4170,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    heights = list(map(int, stdin.split()))\n\n    def solve(h):\n        return max(i + solve(h) for i, h in enumerate(heights[::-1], 1) if h <= h)\n\n    return str(solve(heights[-1]))\n"
    },
    {
        "number": 4171,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    ans = 0\n    cur_sum = 0\n    for i in range(n):\n        cur_sum += arr[i]\n        if cur_sum >= k:\n            ans += 1\n            cur_sum = 0\n    return str(ans)\n"
    },
    {
        "number": 4171,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    m = float('inf')\n    for i in range(1, n):\n        if a[i] == a[i - 1]:\n            m = min(m, (i + 1) // 2)\n    if m == float('inf'):\n        return 0\n    return m\n\nprint(solution(input()))\n"
    },
    {
        "number": 4171,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n\n    # create a list of all the elements in the array\n    all_elements = set(arr)\n\n    # if there is more than k elements, there is no solution\n    if len(all_elements) < k:\n        return \"0\"\n\n    # create a set of all the elements which are divisible by 2\n    divisible_by_2 = set(filter(lambda x: x % 2 == 0, all_elements))\n\n    # count the number of elements in the divisible set, if there are more than k elements divisible by 2, the answer is negative\n    answer = n - len(divisible_by_2)\n    if answer < 0:\n        return \"0\"\n\n    # if there are more than k elements divisible by 2 and if there are equal elements, the answer is negative\n    if len(divisible_by_2) < k:\n        answer = \"0\"\n    return answer\n"
    },
    {
        "number": 4171,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    return 0\n"
    },
    {
        "number": 4171,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    if len(a) == 0:\n        return -1\n    if len(a) == 1:\n        return 0\n    result = 0\n    length = len(a)\n    while length > 1:\n        if a[0] == a[-1]:\n            length -= 2\n            a.pop(0)\n            a.pop(-1)\n        else:\n            a[0] //= 2\n            a[-1] //= 2\n            a.pop(0)\n            a.pop(-1)\n            result += 1\n        if length == 0:\n            return -1\n        length = len(a)\n    return result\n"
    },
    {
        "number": 4171,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = sorted(list(map(int, stdin.split())))\n    res = 0\n    b = a[:]\n    while len(b) > 1:\n        if a[0] == a[-1]:\n            break\n        a = b\n        b = sorted([a[0] // 2, a[1] // 2])\n        res += 1\n    print(res)\n    return str(res)\n"
    },
    {
        "number": 4171,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.split()\n    n, k = int(data[0]), int(data[1])\n    a = list(map(int, data[2:]))\n    return str(min(a))\n    # a = list(map(int, input().split()))\n    # print(min(a))\n    # return str(min(a))\n"
    },
    {
        "number": 4171,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    return str(min(a))\n"
    },
    {
        "number": 4171,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    return str(min(a.count(x) // 2 for x in set(a)))"
    },
    {
        "number": 4171,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    counter = 0\n    b = []\n    for x in a:\n        b.append(x)\n    b.sort()\n    print(b)\n    if len(b) == n:\n        return 0\n\n    if a[0] % 2 == 0:\n        if b[0] % 2 == 0:\n            counter += 1\n        else:\n            counter += 1\n            b[0] -= 1\n    else:\n        if b[0] % 2 == 0:\n            counter += 1\n            b[0] -= 1\n\n    for x in range(1, n):\n        if a[x] % 2 == 0:\n            if b[x] % 2 == 0:\n                counter += 1\n                b[x] -= 2\n            else:\n                counter += 1\n                b[x] -= 1\n        else:\n            if b[x] % 2 == 0:\n                counter += 1\n                b[x] -= 2\n            else:\n                counter += 1\n                b[x] -= 1\n\n    if b[-1] % 2 == 0:\n        counter += 1\n        b[-1] -= 2\n    else:\n        counter += 1\n        b[-1] -= 1\n\n    print(b)\n\n    return str(counter)\n"
    },
    {
        "number": 4172,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(x) for x in stdin.split()]\n    a = a[1:]\n    start = min(a)\n    end = max(a)\n    if start + k <= end:\n        return start + k\n    if end - k <= start:\n        return end - k\n    return end - start\n"
    },
    {
        "number": 4172,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    num_n = int(stdin)\n    a = list(map(int, stdin.split()))\n    return str(min_move(num_n, a))\n\n\ndef"
    },
    {
        "number": 4172,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution(\"1 2 2 4 2 3\")\n    3\n    >>> solution(\"2 1 2 3 2 2 1\")\n    4\n    '''\n    n, k = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    if n == 1:\n        return 0\n    \n    #get the max value \n    mx = max(arr)\n    max_index = arr.index(mx)\n    \n    #get the min value \n    mn = min(arr)\n    min_index = arr.index(mn)\n    \n    #get the number of values that are equal to the max and min value\n    n_equal = n - max_index - min_index\n    \n    #if k is larger than the number of values that are equal to the max and min value\n    if k > n_equal:\n        #return the number of max and min values plus k\n        return max_index + min_index + k\n    \n    #else return max + min + k\n    return max_index + min_index + k"
    },
    {
        "number": 4172,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    min_moves = float('inf')\n    min_indices = []\n    for i in range(n):\n        if a[i] > min_moves:\n            min_indices.append(i)\n            min_moves = a[i]\n    # print(a)\n    # print(min_moves, min_indices)\n    count = 0\n    while len(min_indices) >= k:\n        # print('min_indices = ', min_indices)\n        # print('k = ', k)\n        # print(min_indices[0])\n        min_moves = min_moves - 1\n        min_indices.remove(min_indices[0])\n        # print('min_indices = ', min_indices)\n        count += 1\n        if min_moves <= 0:\n            break\n    return count\n"
    },
    {
        "number": 4172,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    # print(a)\n    # print(a)\n    ans = 0\n    # for i in range(n):\n    #     if a[i] == max(a):\n    #         ans += 1\n    # return ans\n    for i in range(1, k):\n        while a[i]!= i:\n            if a[a[i]] == i:\n                break\n            a[a[i]] += 1\n            a[i] -= 1\n        if a[i] == i:\n            ans += 1\n    return ans\n\n\nprint(solution(input()))\n\n'''"
    },
    {
        "number": 4172,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    array = list(map(int, stdin.split()))\n    if max(array) - min(array) < k:\n        return \"0\"\n\n    last_min_index = None\n    last_max_index = None\n    while k > 0:\n        if last_min_index is None:\n            # if we have not found any minimum index\n            # find min index and increment it\n            for i in range(len(array)):\n                if array[i] == min(array):\n                    last_min_index = i\n                    array[i] += 1\n                    break\n        else:\n            # we have found a minimum index\n            # decrease it by 1\n            array[last_min_index] -= 1\n            if array[last_min_index] == 0:\n                # if we found one and it equals zero,\n                # it is a match\n                k -= 1\n                last_min_index = None\n            else:\n                # we did not find a match\n                last_min_index = None\n        if last_max_index is None:\n            # if we have not found any maximum index\n            # find max index and decrement it\n            for i in range(len(array)):\n                if array[i] == max(array):\n                    last_max_index = i\n                    array[i] -= 1\n                    break\n        else:\n            # we have found a maximum index\n            # decrease it by 1\n            array[last_max_index] -= 1\n            if array[last_max_index] == 0:\n                # if we found one and it equals zero,\n                # it is a match\n                k -= 1\n                last_max_index = None\n            else:\n                # we did not find a match\n                last_max_index = None\n    return str(k)"
    },
    {
        "number": 4172,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    arr.sort()\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] < arr[i+1]:\n            count += 1\n    if count >= k:\n        return count\n    else:\n        return count + k - count\n\nprint(solution(input()))\n"
    },
    {
        "number": 4172,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = sorted(list(map(int, stdin.split())))\n    return str(min(n - a.count(n) - (n - 1) * (n - 2) // 2, k))\n"
    },
    {
        "number": 4172,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    m = a[0]\n    n = a[1]\n    arr = sorted(a[2:])\n    count = 0\n    while len(arr)!= m:\n        if len(arr) > len(arr) + count:\n            arr.pop(0)\n        else:\n            arr.pop(-1)\n        count += 1\n    return str(count)\n"
    },
    {
        "number": 4172,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.strip().split())\n    A = sorted(map(int, stdin.strip().split()))\n    count = 0\n    left_max = max(A)\n    left_min = min(A)\n    if left_min == K:\n        return count\n    while left_min!= K:\n        if left_min == left_max:\n            left_min += 1\n            count += 1\n        elif left_min < left_max:\n            left_min += 1\n            count += 1\n    return count\n"
    },
    {
        "number": 4173,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    count = 0\n    m = 0\n    for i in range(1, n):\n        if a < b:\n            count += (b - m)\n            m = b\n        else:\n            count += (a - m)\n            m = a\n    if a < b:\n        count += (b - m)\n    else:\n        count += (a - m)\n    return str(count)\n    \n"
    },
    {
        "number": 4173,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input_q = int(stdin.split()[0])\n    # print(input_q)\n    input_l = stdin.split()[1:]\n    # print(input_l)\n    input_l = list(map(int, input_l))\n    # print(input_l)\n    input_l = sorted(input_l, key=lambda x: x[0])\n    # print(input_l)\n    # print(input_l)\n    print(input_l)\n    print(input_l)\n    # input_l.sort(key=lambda x: x[1])\n    # print(input_l)\n    # input_l.sort(key=lambda x: x[2])\n    # print(input_l)\n    input_l.sort(key=lambda x: x[2])\n    # print(input_l)\n    input_l.sort(key=lambda x: x[1])\n    # print(input_l)\n    # print(input_l)\n\n    print(input_l)\n\n    input_l = sorted(input_l, key=lambda x: x[0])\n    # print(input_l)\n    print(input_l)\n\n    return print(input_l[0])\n\n\nsolution(\"4\")\n"
    },
    {
        "number": 4173,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join(['{}'.format(min(int(stdin[i]), int(stdin[i+1]))) for i in range(0, len(stdin), 2)])\n"
    },
    {
        "number": 4173,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    print(stdin.split())\n    return\n\nsolution(input())\n\nimport sys\ninput_lines = sys.stdin\ninput = input_lines.readline"
    },
    {
        "number": 4173,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    _, q = stdin.split()\n    q = int(q)\n\n    # get inputs\n    inp = []\n    for i in range(q):\n        inp.append(list(map(int, input().split())))\n\n    # get minimum of all\n    total = 0\n    for i in inp:\n        print(min(i))\n        total += min(i)\n    print(total)\n    return total\n\nsolution(input())\n"
    },
    {
        "number": 4173,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    queries = list(map(int, stdin.split(\"\\n\")))\n    queries_n = len(queries)\n    for i in range(queries_n - 1):\n        a = queries[i][1]\n        b = queries[i][2]\n        print(min(a * 1, b * 2), end=\" \")\n    return \"\"\n"
    },
    {
        "number": 4173,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def split_input():\n        n, a, b = (int(x) for x in stdin.split())\n        return (n, a, b)\n\n    def cost_water(n, a, b):\n        return (a * n + b * 2 * n) / 3\n    \n    return cost_water(*split_input())\n"
    },
    {
        "number": 4173,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split('\\n'))\n    return str(min(a * b, n * min(a, b)))"
    },
    {
        "number": 4173,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    stdin\n    5 1 3\n    7 3 2\n    1 100000000 1\n    1000000000000 42 88\n    '''\n    lines = stdin.strip().split('\\n')\n\n    print(f'{lines[0]}')\n    a, b = map(int, lines[1].split())\n    for line in lines[2:]:\n        n, aa, bb = map(int, line.split())\n        #print(f'{n} {aa} {bb}')\n        if n == aa + bb:\n            print(f'{n} {aa * a} {bb * b}')\n\n    return ''"
    },
    {
        "number": 4173,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def minCost(n, a, b):\n        q = int(input())\n        for i in range(q):\n            n1, a1, b1 = map(int, input().split())\n            minCost = a1*n + b1*n\n            print(minCost)\n            \n    \n    return \"NO\""
    },
    {
        "number": 4174,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # stdin = sys.stdin.readline()\n    n, x = stdin.split()\n    n = int(n)\n    xs = list(map(int, x.split()))\n    count = 0\n    i = 0\n    while xs[i] <= xs[i+1]:\n        i += 1\n        count += 1\n    if count == 0:\n        return \"0\"\n    return str(count)\n"
    },
    {
        "number": 4174,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    stdin:\n    2 3 5\n    2 2 4\n\n    '''\n    # N = int(input())\n    # L = list(map(int, stdin.split()))\n\n    N = int(stdin.split()[0])\n    L = list(map(int, stdin.split()[1:]))\n\n    count = 0\n    for i in range(1, N+1):\n        if L[i-1] + L[i] < L[i]:\n            count += 1\n    return count\n\n\nprint(solution(\"2 3 5\"))\nprint(solution(\"3 4 5\"))\n"
    },
    {
        "number": 4174,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    n, x = int(lines[0]), int(lines[1])\n    coords = [int(coord) for coord in lines[2:]]\n    ret = 0\n    j = 0\n    while j < len(coords):\n        while j < len(coords) and coords[j] <= x:\n            j += 1\n        ret += 1\n        if j < len(coords):\n            x += coords[j] - coords[j - 1]\n    return str(ret)"
    },
    {
        "number": 4174,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, X = (int(e) for e in stdin.split())\n    L = list(int(e) for e in stdin.split())\n    B = []\n    for i, e in enumerate(L):\n        if e <= X:\n            B.append(i)\n    print(B)\n    c = 0\n    for i in range(len(B)):\n        c += abs(B[i] - X)\n    print(c)\n    return '{}'.format(c)\n\ndef"
    },
    {
        "number": 4174,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, X = [int(x) for x in stdin.split()]\n    count = 0\n    for i in range(N):\n        if X >= (i + 1) * L[i]:\n            count += 1\n    return str(count)\n    # N = input().split()\n    # N = int(N[0])\n    # X = int(N[1])\n    # L = input().split()\n    # L = [int(x) for x in L]\n    # count = 0\n    # for i in range(N):\n    #     if X >= (i + 1) * L[i]:\n    #         count += 1\n    # return str(count)\nsolution(input())\n"
    },
    {
        "number": 4174,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.rstrip().split(\"\\n\")\n    n = int(inputs[0])\n    x = int(inputs[1])\n    lines = inputs[2].rstrip().split(\" \")\n    lines = [int(l) for l in lines]\n    if n == 1:\n        return \"1\"\n    else:\n        a = 0\n        for i in range(1, n):\n            a += lines[i]\n            if x <= a:\n                return str(i)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4174,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    lines = list(map(int, stdin.split()))\n    num_bounces = 0\n    for i in range(n):\n        if lines[i] <= x:\n            num_bounces += 1\n    return str(num_bounces)"
    },
    {
        "number": 4174,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x = stdin.split(\" \")\n    N = int(x[0])\n    L = list(map(int, x[1].split()))\n    target = int(x[2])\n    ball = 0\n    for i in range(1, N + 1):\n        if L[i - 1] + L[i] <= target:\n            ball += 1\n    return str(ball)"
    },
    {
        "number": 4174,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    _, n, *points = stdin.split()\n    n = int(n)\n    points = list(map(int, points))\n    cnt = 0\n    for i in range(1, n + 1):\n        if sum(points[:i]) < sum(points[i:]):\n            cnt += 1\n    return str(cnt)\n"
    },
    {
        "number": 4174,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    input_split = stdin.split()\n    n = int(input_split[0])\n    x = int(input_split[1])\n    L = list(map(int, input_split[2:]))\n    print(bounce(n, x, L))\ndef"
    },
    {
        "number": 4175,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    _, num = stdin.splitlines()\n    _, num = num.split(' ')\n    num = int(num)\n\n    for i in range(num):\n        word = stdin.splitlines()[i + 1]\n        first_char = word[0]\n        if word.count(first_char) > 1:\n            return 'No'\n\n    return 'Yes'\n"
    },
    {
        "number": 4175,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    words = stdin.strip().split(\"\\n\")\n    ans = \"Yes\" if all(is_valid(word) for word in words) else \"No\"\n    return ans\n\ndef"
    },
    {
        "number": 4175,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4175,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = int(stdin.split()[0])\n    words = stdin.split()[1:]\n    if len(words)!= n:\n        print(\"No\")\n    else:\n        for i in range(len(words)):\n            if words[i][0]!= words[i][-1]:\n                print(\"No\")\n                break\n        else:\n            print(\"Yes\")\n\n\ndef"
    },
    {
        "number": 4175,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(n):\n        w = stdin.split(sep=\":\")[i]\n        if len(w) > 1:\n            if len(w) == len(set(w)) or w[0]!= w[-1]:\n                print('No')\n                return\n    print('Yes')\n    return"
    },
    {
        "number": 4175,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    w_list = list(map(str, stdin.split(':')))\n    w_list.pop(0)\n    w_list = list(filter(lambda x: x!= '', w_list))\n    ans = 'Yes' if len(w_list) == n else 'No'\n    return ans\n"
    },
    {
        "number": 4175,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    words = stdin.split(\"\\n\")\n    satisfaction = True\n    for i in range(len(words)):\n        word = words[i]\n        if word[0] == word[-1]:\n            satisfaction = False\n    return \"Yes\" if satisfaction else \"No\""
    },
    {
        "number": 4175,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    words = stdin.split()[1:]\n    for i in range(N):\n        if not valid_word(words[i]):\n            return \"No\"\n    return \"Yes\"\n\ndef"
    },
    {
        "number": 4175,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for _ in range(n):\n        word = input()\n        if word == word[::-1]:\n            print('Yes')\n        else:\n            print('No')\n\n    return\n"
    },
    {
        "number": 4175,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, W_1, W_2, W_3, W_4, W_5, W_6, W_7, W_8, W_9, W_10 = stdin.split()\n    N = int(N)\n    if len(W_1) == 1:\n        if len(W_1) == len(W_2):\n            if len(W_1) == len(W_3):\n                if len(W_1) == len(W_4):\n                    if len(W_1) == len(W_5):\n                        if len(W_1) == len(W_6):\n                            if len(W_1) == len(W_7):\n                                if len(W_1) == len(W_8):\n                                    if len(W_1) == len(W_9):\n                                        if len(W_1) == len(W_10):\n                                            return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4176,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A == B:\n        return 'No pieces are allowed to be distributed to guests in either case.'\n    return f\"{min(A, B) * 6}\"\n\"\"\"\n\"\"\"\n1. Sort the two input arrays by decreasing order\n2. if A <= B, the first A elements of the first array (A) will be given to the first guest\n3. if A > B, the first B elements of the second array (B) will be given to the first guest\n\"\"\"\n\ndef"
    },
    {
        "number": 4176,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a > b:\n        return a*b\n    return a*b\n\"\"\"\n\ndef"
    },
    {
        "number": 4176,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(sum([3, 6][int(stdin.split()[0]) == stdin.split()[1]]))"
    },
    {
        "number": 4176,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return str(min(A * (A + 1) // 2, B * (B + 1) // 2))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4176,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B = stdin.split(' ')\n    A = int(A)\n    B = int(B)\n    return '6' if A == 1 or B == 1 else '9'\n\nsolution(sys.stdin.read())\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4176,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n\n    if A % 2 == 1:\n        return '{}'.format(A//2 + A//2 + (A-1)//2)\n    else:\n        return '{}'.format(A//2 + A//2)\n"
    },
    {
        "number": 4176,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.strip().split()\n    a, b = int(a), int(b)\n    return str(math.floor(math.sqrt(a*b)))\n"
    },
    {
        "number": 4176,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4176,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution([2, 3])\n    '6'\n    >>> solution([1, 3])\n    '3'\n    >>> solution([1, 1])\n    '2'\n    >>> solution([10, 10])\n    '10'\n    >>> solution([10, 20])\n    '15'\n    >>> solution([20, 20])\n    '10'\n    >>> solution([10, 30])\n    '15'\n    >>> solution([30, 30])\n    '5'\n    \"\"\"\n    a, b = map(int, stdin)\n    if a == b:\n        return str(a * (a + 1) // 2)\n    return str(a * b)\n"
    },
    {
        "number": 4176,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A == 3 or B == 3:\n        return str(max(A, B)) +'' + str(min(A, B))\n    return str(A * 3 + B * 2) +'' + str(min(A, B) * 3)"
    },
    {
        "number": 4177,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4177,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace('a','x')"
    },
    {
        "number": 4177,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    for i in s:\n        print(i, end='')\n    return s\n"
    },
    {
        "number": 4177,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4177,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4177,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace('x', '.')\n    \nsolution(\"sardine\")\n"
    },
    {
        "number": 4177,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace('a', 'x').replace('b', 'x').replace('c', 'x').replace('d', 'x').replace('e', 'x').replace(\n        'f', 'x').replace('g', 'x').replace('h', 'x').replace('i', 'x').replace('j', 'x').replace('k', 'x').replace(\n        'l', 'x').replace('m', 'x').replace('n', 'x').replace('o', 'x').replace('p', 'x').replace('q', 'x').replace(\n        'r', 'x').replace('s', 'x').replace('t', 'x').replace('u', 'x').replace('v', 'x').replace('w', 'x').replace(\n        'x', 'x').replace('y', 'x').replace('z', 'x')\n"
    },
    {
        "number": 4177,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n\nprint(solution(\"sardine\"))\n"
    },
    {
        "number": 4177,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4177,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    print(\"\".join([x.replace(x, \"x\") for x in stdin]))\n    return"
    },
    {
        "number": 4178,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    num_of_squares = int(stdin)\n    squares = map(int, stdin.split())\n\n    while len(squares) > 1:\n        if min(squares) < min(squares[1:]):\n            return \"No\"\n        else:\n            squares[0] -= 1\n            squares[1:] = map(lambda x: x - 1 if x > 0 else x, squares[1:])\n\n    return \"Yes\"\n"
    },
    {
        "number": 4178,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    heights = [int(x) for x in stdin.split()]\n    if len(heights) < 2:\n        return \"No\"\n    i = 0\n    while i < len(heights) - 1:\n        if heights[i] > heights[i + 1]:\n            return \"No\"\n        i += 1\n    return \"Yes\"\n"
    },
    {
        "number": 4178,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    stdin:\n    The input string of the test case.\n    \"\"\"\n\n    N = int(stdin)\n    heights = list(map(int, stdin.split()))\n\n    for i in range(N - 1):\n        if heights[i + 1] < heights[i]:\n            break\n        if heights[i] >= heights[i + 1]:\n            return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4178,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n = int(stdin[0])\n    heights = list(map(int, stdin[1]))\n    if(heights == sorted(heights)):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\nsolution(input())\n"
    },
    {
        "number": 4178,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N: int = int(stdin.strip())\n    H_n: list[int] = stdin.strip().split(' ')\n    H_n = list(map(int, H_n))\n    if len(H_n)!= N:\n        return 'No'\n    H_n.sort(reverse=True)\n    for i in range(N):\n        if H_n[i]!= H_n[i-1]:\n            return 'No'\n    return 'Yes'\n"
    },
    {
        "number": 4178,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split(\"\\n\")\n    for line in lines:\n        print(check(line))\n\ndef"
    },
    {
        "number": 4178,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # return 'Yes' if possible else 'No'\n    N = int(stdin.split()[0])\n    squares = list(map(int, stdin.split()[1:]))\n    for i in range(1, N):\n        if squares[i] < squares[i - 1]:\n            squares[i - 1] -= 1\n            squares[i] += 1\n        else:\n            break\n    if all(s == squares[0] for s in squares[1:]):\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 4178,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    input = stdin.split()\n    squares = list(map(int, input[1:]))\n    squares.sort(reverse=True)\n    if len(squares) > 1:\n        if squares[0] > squares[1]:\n            return 'No'\n    return 'Yes'\n"
    },
    {
        "number": 4178,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    (N, H) = stdin.split()\n    H = list(map(int, H.split()))\n    for i in range(len(H)):\n        if i > 0 and H[i] <= H[i-1]:\n            return 'No'\n    return 'Yes'\n\nstdin = input()\nprint(solution(stdin))\n"
    },
    {
        "number": 4178,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    h = list(map(int, stdin.split()))\n    sorted_h = sorted(h)\n    if sorted_h == h:\n        return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 4179,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split()\n    N, M, C = map(int, inputs[0].split())\n    B1, B2, *B = map(int, inputs[1].split())\n    A1, A2, *A = map(int, inputs[2].split())\n\n    res = 0\n    for i in range(1, N):\n        a1 = A[i - 1]\n        b1 = B[i - 1]\n        a2 = A[i]\n        b2 = B[i]\n\n        if a1 + b1 + a2 + b2 + C >= 0:\n            res += 1\n\n    return str(res)"
    },
    {
        "number": 4179,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, M, C = stdin.split()\n    N = int(N)\n    M = int(M)\n    C = int(C)\n\n    count = 0\n    for i in range(1, N + 1):\n        for j in range(1, M + 1):\n            for k in range(1, N + 1):\n                if i!= k and j!= k:\n                    a, b, *c = stdin.split()\n                    a = int(a)\n                    b = int(b)\n                    c = int(c)\n                    c = c[0]\n                    if (a * a + b * b + c) <= 0:\n                        count += 1\n    return str(count)\n\n\ndef"
    },
    {
        "number": 4179,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, c = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    arr.sort()\n    res = 0\n    for i in range(n):\n        for j in range(i, n):\n            for k in range(j, n):\n                if arr[i] * arr[j] + arr[j] * arr[k] + c > 0:\n                    res += 1\n    return str(res)\nprint(solution(input()))"
    },
    {
        "number": 4179,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def combination(n, r):\n        return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\n\n    N, M, C = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    B = list(map(int, stdin.split()))\n\n    A_sum = 0\n    for i in range(len(A)):\n        A_sum += A[i] * (N - i)\n\n    B_sum = 0\n    for i in range(len(B)):\n        B_sum += B[i] * (M - i)\n\n    if A_sum + B_sum + C > 0:\n        return combination(N, 2) + combination(M, 2)\n\n    return \"0\""
    },
    {
        "number": 4179,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, c = list(map(int, stdin.split()))\n    A = sorted([int(x) for x in stdin.split()[1:]])\n    B = list(map(int, stdin.split()[1:][:m]))\n    C = list(map(int, stdin.split()[1:][m:]))\n\n    def solve(code):\n        total = 0\n        for i in range(len(code)):\n            total += A[i] * code[i] + B[i]\n        return total >= c\n\n    return \"1\" if any(solve(code) for code in permutations(range(1, n + 1), n)) else \"0\"\n"
    },
    {
        "number": 4179,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, M, C = list(map(int, stdin.split()))\n    B = list(map(int, stdin.split()))\n    # print(N, M, C, B)\n    # print(\"The number of codes that correctly solve this problem is:\", solve(N, M, C, B))\n    return str(solve(N, M, C, B))\n\ndef"
    },
    {
        "number": 4179,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, M, C = list(map(int, stdin.split()))\n    A = list(map(int, stdin.split()))\n    B = list(map(int, stdin.split()))\n    C = int(stdin.split()[-1])\n    count = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            for k in range(j + 1, N):\n                if A[i] + A[j] + A[k] + C > 0:\n                    count += 1\n    return str(count)\n"
    },
    {
        "number": 4179,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, M, C = list(map(int, stdin.split()))\n    B = list(map(int, stdin.split()))\n    A = []\n    for i in range(M):\n        A.append(B[i * N + i] + B[i * N + (i + 1)] + C)\n    return sum(x > 0 for x in A)"
    },
    {
        "number": 4179,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, M, C = list(map(int, stdin.split()))\n    codes = []\n    for i in range(N):\n        codes.append(list(map(int, stdin.split())))\n    count = 0\n    for code in codes:\n        cnt = 0\n        for i in range(M - 1):\n            for j in range(i + 1, M):\n                cnt += code[i] * code[j]\n        if cnt + C > 0:\n            count += 1\n    print(count)\nsolution(input())\n"
    },
    {
        "number": 4179,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, c = stdin.split(' ')\n    n, m, c = int(n), int(m), int(c)\n    a = list(map(int, stdin.split(' ')[:m]))\n    b = list(map(int, stdin.split(' ')[m:]))\n    c = int(stdin.split(' ')[-1])\n    return str(sum([i * j for i, j in zip(a, b) if (i + sum(b)) > c]))\n"
    },
    {
        "number": 4180,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    return change(N)\n\n\ndef"
    },
    {
        "number": 4180,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    print(int(stdin[1]) - (1000 * int(stdin[0])))\n    return str(int(stdin[1]) - (1000 * int(stdin[0])))\n\nprint(solution(input()))\n\n\ndef"
    },
    {
        "number": 4180,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    pass"
    },
    {
        "number": 4180,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    print(sum(int(i) for i in stdin.split()))\n"
    },
    {
        "number": 4180,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n\n    t = 1\n    while N!= 0:\n        if N >= 2000:\n            t += 1\n            N -= 2000\n        elif N >= 1000:\n            t += 1\n            N -= 1000\n        elif N >= 500:\n            t += 1\n            N -= 500\n        elif N >= 100:\n            t += 1\n            N -= 100\n        elif N >= 50:\n            t += 1\n            N -= 50\n        elif N >= 10:\n            t += 1\n            N -= 10\n        elif N >= 5:\n            t += 1\n            N -= 5\n        elif N >= 2:\n            t += 1\n            N -= 2\n        elif N >= 1:\n            t += 1\n            N -= 1\n\n    return str(t)\n"
    },
    {
        "number": 4180,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    dp = [0] * (n + 1)\n    dp[0] = 0\n    dp[1] = 100\n    dp[2] = 200\n    dp[3] = 300\n    dp[4] = 400\n    dp[5] = 500\n    dp[6] = 600\n    dp[7] = 700\n    dp[8] = 800\n    dp[9] = 900\n    for i in range(10, n + 1):\n        dp[i] = min(dp[i - 1] + 200, dp[i - 2] + 100, dp[i - 3] + 50, dp[i - 4] + 20, dp[i - 5] + 10, dp[i - 6] + 5,\n                    dp[i - 7] + 1, dp[i - 8] + 2, dp[i - 9] + 3)\n    return str(dp[n])\n"
    },
    {
        "number": 4180,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N: int = int(stdin)\n    if N > 10000 or N < 1:\n        raise Exception\n    if N == 1:\n        return '1'\n    # N=1000\n    if N == 2:\n        return '2'\n    if N == 3:\n        return '3'\n    if N == 4:\n        return '4'\n    if N == 5:\n        return '5'\n    if N == 6:\n        return '6'\n    if N == 7:\n        return '7'\n    if N == 8:\n        return '8'\n    if N == 9:\n        return '9'\n    if N == 10:\n        return '10'\n    if N == 11:\n        return '11'\n    if N == 12:\n        return '12'\n    if N == 13:\n        return '13'\n    if N == 14:\n        return '14'\n    if N == 15:\n        return '15'\n    if N == 16:\n        return '16'\n    if N == 17:\n        return '17'\n    if N == 18:\n        return '18'\n    if N == 19:\n        return '19'\n    if N == 20:\n        return '20'\n    if N == 21:\n        return '21'\n    if N == 22:\n        return '22'\n    if N == 23:\n        return '23'\n    if N == 24:\n        return '24'\n    if N == 25:\n        return '25'\n    if N == 26:\n        return '26'\n    if N == 27:\n        return '27'\n    if N == 28:\n        return '28'\n    if N == 29:\n        return '29'\n    if N == 30:\n        return '30'\n    if N == 31:\n        return '31'\n    if N == 32:\n        return '32'\n    if N == 33:\n        return '33'\n    if N == 34:\n        return '34'\n    if N == 35:\n        return '35'\n    if N == 36:\n        return '36'\n    if N == 37:\n        return '37'\n    if N == 38:\n        return '38'\n    if N == 39:\n        return '39'\n    if N == 40:\n        return '40'\n    if N == 41:\n        return '41'\n    if N == 42:\n        return '42'\n    if N == 43:\n        return '43'\n    if N == 44:\n        return '44'\n    if N == 45:\n        return '45'\n    if N == 46:\n        return '46'\n    if N == 47:\n        return '47'\n    if N == 48:\n        return '48'\n    if N == 49:\n        return '49'\n    if N == 50:\n        return '50'\n    if N == 51:\n        return '51'\n    if N == 52:\n        return '52'\n    if N == 53:\n        return '53'\n    if N == 54:\n        return '54'\n    if N == 55:\n        return '55'\n    if N == 56:\n        return '56'\n    if N == 57:\n        return '57'\n    if N == 58:\n        return '58'\n    if N == 59:\n        return '59'\n    if N == 60:\n        return '60'\n    if N == 61:\n        return '61'\n    if N == 62:\n        return '62'\n    if N == 63:\n        return '63'\n    if N == 64:\n        return '64'\n    if N == 65:\n        return '65'\n    if N == 66:\n        return '66'\n    if N == 67:\n        return '67'\n    if N == 68:\n        return '68'\n    if N == 69:\n        return '69'\n    if N == 70:\n        return '70'\n    if N == 71:\n        return '71'\n    if N == 72:\n        return '72'\n    if N == 73:\n        return '73'\n    if N == 74:\n        return '74'\n    if N == 75:\n        return '75'\n    if N == 76:\n        return '76'\n    if N == 77:\n        return '77'\n    if N == 78:\n        return '78'\n    if N == 79:\n        return '79'\n    if N == 80:\n        return '80'\n    if N == 81:\n        return '81'\n    if N == 82:\n        return '82'\n    if N == 83:\n        return '83'\n    if N == 84:\n        return '84'\n    if N == 85:\n        return '85'\n    if N == 86:\n        return '86'\n    if N == 87:\n        return '87'\n    if N == 88:\n        return '88'\n    if N == 89:\n        return '89'\n    if N == 90:\n        return '90'\n    if N == 91:\n        return '91'\n    if N == 92:\n        return '92'\n    if N == 93:\n        return '93'\n    if N == 94:\n        return '94'\n    if N == 95:\n        return '95'\n    if N == 96:\n        return '96'\n    if N == 97:\n        return '97'\n    if N == 98:\n        return '98'\n    if N == 99:\n        return '99'\n    if N == 100:\n        return '100'\n    else:\n        raise Exception"
    },
    {
        "number": 4180,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    change = 1000\n    answer = 0\n    while num > 0 and change > 0:\n        if num >= change:\n            answer += change\n            num -= change\n        else:\n            answer += num\n            num -= num\n        change //= 10\n    return str(answer)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4180,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N % 100!= 0:\n        return 0\n    return str(int(N / 100) + 1)\n"
    },
    {
        "number": 4180,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N < 0:\n        print(0)\n        exit()\n    print(math.ceil(N/1000)*100)"
    },
    {
        "number": 4181,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    A = list(map(int, stdin.split()))\n    B = list(map(int, stdin.split()))\n    print(max(sum(i*A[i-1] for i in range(1, N+1)), sum(i*B[i-1] for i in range(1, N+1))))\n"
    },
    {
        "number": 4181,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''2\n    3 5 2\n    4 5\n    ''')\n    9\n    >>> solution('''4\n    5\n    4\n    3\n    2\n    ''')\n    11\n    \"\"\"\n    lines = stdin.splitlines()\n    n = int(lines[0])\n    heroes = list(map(int, lines[1].split()))\n    towns = list(map(int, lines[2].split()))\n    heroes = heroes[::-1]\n    towns = towns[::-1]\n\n    results = []\n    for i in range(n + 1):\n        results.append(0)\n    for i in range(n):\n        result = 0\n        if heroes[i] > towns[i]:\n            result += towns[i]\n        elif heroes[i] <= towns[i]:\n            result += heroes[i]\n        else:\n            result += heroes[i]\n        results[i + 1] = max(results[i], result)\n    return results[n]\n"
    },
    {
        "number": 4181,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    heroes = [0] * N\n    for i in range(1, N + 1):\n        heroes[i - 1] = A[i - 1]\n    for i in range(N + 1, N + 2):\n        heroes[i - 1] = B[i - 1]\n    ans = 0\n    for i in range(N):\n        ans += max(heroes[i], heroes[i + 1])\n    return str(ans)\n\n\nprint(solution(input()))\n\"\"\""
    },
    {
        "number": 4181,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    if n == 1:\n        return '0'\n\n    t = []\n    a = []\n    b = []\n    for i in range(1, n+1):\n        t.append(int(stdin.split()[i-1]))\n        a.append(int(stdin.split()[i]))\n        b.append(int(stdin.split()[i+n-1]))\n\n    a.sort()\n    b.sort()\n    dp = [[0] * (n+1) for _ in range(n+1)]\n\n    for i in range(n+1):\n        dp[i][0] = a[i]\n    for i in range(n+1):\n        dp[0][i] = b[i]\n\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if i == j:\n                dp[i][j] = dp[i-1][j-1] + a[i-1]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i-1][j-1]) + b[i-1]\n    return str(max(dp[n][n], dp[n-1][n]))"
    },
    {
        "number": 4181,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    N = int(lines[0])\n    A = map(int, lines[1].split())\n    B = map(int, lines[2].split())\n\n    def fight(n: int, a: List[int], b: List[int]) -> int:\n        # Max wins: the hero fights monsters in this case.\n        # Get the maximum monster in the first list.\n        monster_1 = max(a)\n        # Get the maximum monster in the second list.\n        monster_2 = max(b)\n        # Check if we can defeat the monsters of monster_1\n        if monster_1 >= monster_2:\n            # The hero wins!\n            return n - monster_1\n        else:\n            # The hero loses.\n            return monster_2 - monster_1\n\n    # Main loop\n    max_win = -1\n    for i in range(N):\n        total_wins = fight(N, A[i:], B)\n        if total_wins > max_win:\n            max_win = total_wins\n\n    return max_win\n"
    },
    {
        "number": 4181,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    heroes = [int(x) for x in stdin.split()[1:]]\n    heroes.sort(reverse=True)\n    heroes.sort(key=lambda x: x * 2)\n    totals = [sum(heroes[i:i+2]) for i in range(0, n, 2)]\n    return str(max(totals))"
    },
    {
        "number": 4181,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Iterate through stdin, splitting the input by lines\n    num_towns, num_monsters, num_heroes = map(int, stdin.split())\n    towns = sorted(list(map(int, stdin.split())))\n    maximum = 0\n\n    # Iterate through the towns, decrementing the monsters for each town\n    for i in range(num_towns):\n        # Skip the first and last towns\n        if i == 0 or i == num_towns - 1:\n            continue\n\n        # Increment the maximum if a hero can defeat the monsters for this town\n        maximum = max(maximum, sum(max(i - towns[i], 0) for i in range(i + 1, num_towns - 1)))\n\n    return str(maximum)\n\nsolution('1\\n1\\n1')\n\n\"\"\"\n"
    },
    {
        "number": 4181,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    return str(max(2*sum(map(int,sorted(map(int,input().split())))) for _ in range(N)))\n\nstdin = \"\"\"3\n1 2 3\n2 4\n3 5\"\"\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4181,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    a = list(map(int, stdin.split()))\n\n    b = list(map(int, stdin.split()))\n\n    result = []\n\n    for i in range(n):\n        result.append(b[i] - a[i])\n\n    return str(max(result))\n\nsolution(\"2\")"
    },
    {
        "number": 4181,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    b = list(map(int, stdin.split()[1:]))\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    for i in range(n - 1, -1, -1):\n        for j in range(n - 1, -1, -1):\n            if i == j:\n                dp[i][j] = max(a[i], b[i])\n            else:\n                dp[i][j] = dp[i + 1][j] + max(a[i], b[i])\n    return max(dp[0])\n"
    },
    {
        "number": 4182,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, x, y = map(int, stdin.split())\n    return \"War\" if any((x < z <= y, z < x and y < z, z > x and y > z) for z in range(min(x, y), max(x, y) + 1)) else \"No War\"\n"
    },
    {
        "number": 4182,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    n, m, x, y = list(map(int, stdin.split()))\n    if x > y and m > n:\n        if (x + y) % 2 == 0:\n            return \"War\"\n        else:\n            return \"No War\"\n    else:\n        return \"No War\""
    },
    {
        "number": 4182,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, M, X, Y = map(int, stdin.split())\n    if (X < Y) or (X > Y) or (X < -Y) or (X > -Y) or (Y < -X) or (Y > X):\n        return \"War\"\n    else:\n        return \"No War\"\n"
    },
    {
        "number": 4182,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, M, X, Y = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    B = list(map(int, stdin.split()))\n    for x in A:\n        if x < X:\n            return 'War'\n    for y in B:\n        if y > Y:\n            return 'War'\n    for i in range(len(A)):\n        if A[i] > X or A[i] < Y:\n            return 'No War'\n    for j in range(len(B)):\n        if B[j] < X or B[j] > Y:\n            return 'No War'\n    return 'War'\nprint(solution(input()))\n"
    },
    {
        "number": 4182,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, x, y = stdin.split(' ')\n    x = list(map(int, x.split(' ')))\n    y = list(map(int, y.split(' ')))\n    x = sorted(x)\n    y = sorted(y)\n    if x[0] < y[0] and x[-1] < y[-1]:\n        return 'War'\n    return 'No War'\n"
    },
    {
        "number": 4182,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    [N, M, X, Y] = [int(x) for x in stdin.split()]\n    x = sorted(list(map(int, stdin.split()[1:])))\n    y = sorted(list(map(int, stdin.split()[2:])))\n    z = []\n    if N > M:\n        for i in range(N):\n            for j in range(M):\n                if x[i] < y[j] and x[i] < z[j] and y[j] < z[i]:\n                    z.append(x[i])\n    elif M > N:\n        for i in range(M):\n            for j in range(N):\n                if y[i] < x[j] and y[i] < z[j] and x[j] < z[i]:\n                    z.append(y[i])\n    else:\n        return \"No War\"\n    if len(z)!= N + M:\n        return \"No War\"\n    if z[0] == X and z[1] == Y:\n        return \"War\"\n    return \"No War\"\nprint(solution(input()))\n\"\"\""
    },
    {
        "number": 4182,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, M, X, Y = list(map(int, stdin.split()))\n    x_num = list(map(int, stdin.split()[1:]))\n    y_num = list(map(int, stdin.split()[1:]))\n    x_num.sort()\n    y_num.sort()\n    if (X < Y and min(x_num) < Y and max(y_num) > X) or (X > Y and min(y_num) < Y and max(x_num) > X) or (\n            max(x_num) < min(y_num) and max(y_num) > min(x_num) and min(x_num) < max(y_num)):\n        print('War')\n    else:\n        print('No War')\n    return ''\n"
    },
    {
        "number": 4182,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, x, y = map(int, stdin.split())\n    return \"War\" if n < m else \"No War\"\n"
    },
    {
        "number": 4182,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, M, X, Y = stdin.split(\" \")\n    N = int(N)\n    M = int(M)\n    X = int(X)\n    Y = int(Y)\n    for i in range(N):\n        for j in range(M):\n            if i < X and j < Y:\n                if X < i < Y and Y < j:\n                    print(\"War\")\n                    return\n            elif i < X and j > Y:\n                if i < X < Y:\n                    print(\"War\")\n                    return\n            elif i > X and j < Y:\n                if i > X > Y:\n                    print(\"War\")\n                    return\n    print(\"No War\")\n    return\n\n\nsolution(input())\n\"\"\""
    },
    {
        "number": 4182,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, x, y = list(map(int, stdin.split()))\n    x_n = list(map(int, stdin.split()))\n    y_m = list(map(int, stdin.split()))\n    x_n.sort()\n    y_m.sort()\n    if x_n[-1] < y_m[0] or y_m[-1] < x_n[0]:\n        return \"War\"\n    else:\n        return \"No War\"\n"
    },
    {
        "number": 4183,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # split stdin\n    lines = stdin.split()\n    n = int(lines[0])\n    times = list(map(int, lines[1:]))\n    min_time = min(times)\n    ans = 0\n\n    for time in times:\n        if min_time < time:\n            min_time = time\n        ans += min_time\n\n    print(ans)\n    return ans\n"
    },
    {
        "number": 4183,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    t_1 = int(stdin.split()[1])\n    t_2 = int(stdin.split()[2])\n    \n    if t_1 <= t_2:\n        return -1\n    \n    pq = [(t_1, 1)]\n    visited = set()\n    res = 0\n    while pq:\n        t, cnt = heapq.heappop(pq)\n        if t in visited:\n            res = max(res, cnt)\n        else:\n            visited.add(t)\n            for i in range(3):\n                heapq.heappush(pq, (t + i, cnt + 1))\n    \n    return str(res) if res <= 10**18 else -1\n\nstdin = '3'\nprint(solution(stdin))\nstdin = '2'\nprint(solution(stdin))\nstdin = '4'\nprint(solution(stdin))"
    },
    {
        "number": 4183,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    T_N = []\n    for i in range(1, N+1):\n        T_N.append(int(stdin))\n    \n    T_N = sorted(T_N, reverse = True)\n    # print(T_N)\n    # print(T_N[0])\n    # print(T_N[1])\n    t = 0\n    \n    for i in range(1, N+1):\n        t += T_N[i-1] - (i*360)\n    \n    return t"
    },
    {
        "number": 4183,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    What is the minimum number of clock rotations needed until all the clocks point upwards?\n    >>> solution('2\\n3\\n')\n    '6'\n    >>> solution('2\\n4\\n')\n    '9'\n    >>> solution('2\\n5\\n')\n    '10'\n    >>> solution('3\\n3\\n')\n    '5'\n    \"\"\"\n    N = int(stdin)\n    t1 = int(stdin)\n    t2 = int(stdin)\n    count = 0\n    while t1 < t2:\n        count += 1\n        t1 = (t1 + (360 * N)) % (t2 - t1)\n    return str(count)"
    },
    {
        "number": 4183,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, T = map(int, stdin.split())\n    return f\"{N*(T+1)}\"\n"
    },
    {
        "number": 4183,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    answer = []\n    for i in range(1,N+1):\n        answer.append(str(i*360//N))\n    return''.join(answer)"
    },
    {
        "number": 4183,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    T_1 = int(stdin.split('\\n')[0])\n    T_2 = int(stdin.split('\\n')[1])\n    print(T_1)\n    print(T_2)\n    print(T_1 + T_2)\n    return str(T_1 + T_2)\n"
    },
    {
        "number": 4183,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # TODO: Write your code here\n    N = int(stdin)\n    arr = list(map(int, stdin.split()))\n\n    result = []\n    for i in range(len(arr)):\n        result.append((360 // arr[i]) % 60)\n\n    return''.join(map(str, result))\n"
    },
    {
        "number": 4183,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # N: Number of clocks\n    # T: Number of seconds to wait to point to the upward\n    #     point (e.g. 2, 3, 4,...)\n    N, T = map(int, stdin.split())\n    print(int(N * T))\n    return ''"
    },
    {
        "number": 4183,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Input:\n    2\n    3\n    Output:\n    6\n    '''\n    N = int(stdin)\n    timeline = []\n    for i in range(N):\n        timeline.append(int(stdin))\n    timeline.sort()\n    min_time = 0\n    max_time = 0\n    for i in range(len(timeline)):\n        if timeline[i] % 2 == 0:\n            max_time = max(max_time, timeline[i])\n        else:\n            min_time = min(min_time, timeline[i])\n    return max_time - min_time\nprint(solution(input()))\n"
    },
    {
        "number": 4184,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    weights = list(map(int, stdin.strip().split(' ')))\n    s1, s2 = 0, 0\n    for i, weight in enumerate(weights):\n        if i <= n - 1:\n            s1 += weight\n        else:\n            s2 += weight\n    return str(s1 - s2)\n"
    },
    {
        "number": 4184,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    weights = list(map(int, stdin.split()[1:]))\n    s = sum(weights)\n    if N < 2:\n        return str(0)\n    left = float('-inf')\n    right = float('inf')\n    for i in range(1, N):\n        if weights[i] >= s:\n            left = weights[i - 1]\n            right = weights[i]\n            break\n    total_left = (s - left)\n    total_right = (right - s)\n    if abs(total_left - total_right) < abs(left - right):\n        return str(abs(total_left - total_right))\n    return str(abs(left - right))\n\ndef"
    },
    {
        "number": 4184,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    weights = sorted(map(int, stdin.split()))\n    return str(min(abs(sum(weights[:i])-sum(weights[i:])) for i in range(1, N)))\n"
    },
    {
        "number": 4184,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split()\n    n = int(input[0])\n    w = list(map(int, input[1]))\n    t = int(input[2])\n    w.sort(reverse=True)\n    s1 = sum(w[0:t])\n    s2 = sum(w[t:n])\n    return str(abs(s1-s2))\n"
    },
    {
        "number": 4184,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    input_tokens = stdin.rstrip().split()\n    N = int(input_tokens[0])\n    tot_weights = list(map(int, input_tokens[1:]))\n    tot_weights.sort()\n    \n    return str(tot_weights[N - 1] - tot_weights[0])\n"
    },
    {
        "number": 4184,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    w = list(map(int, stdin.split()))\n    w = sorted(w)\n    if n == 1:\n        return str(0)\n    elif n == 2:\n        if w[0] > w[1]:\n            return str(w[0] - w[1])\n        else:\n            return str(w[1] - w[0])\n    else:\n        min_diff = float('inf')\n        for i in range(n):\n            tmp_diff = abs(w[i] - w[i+1])\n            min_diff = min(min_diff, tmp_diff)\n        return str(min_diff)"
    },
    {
        "number": 4184,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    w = list(map(int, stdin.split()))\n    l = list(filter(lambda x: x <= N, w))\n    r = list(filter(lambda x: x > N, w))\n    return str(abs(sum(l) - sum(r)))\n"
    },
    {
        "number": 4184,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    weights = list(map(int, stdin.split()))\n\n    return str(min(abs(weights[i] - weights[i+1]) for i in range(n-1)))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4184,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    A = stdin.split()\n    T = int(A[0])\n    W = []\n    for i in range(1, len(A)):\n        W.append(int(A[i]))\n\n    if T == 1:\n        if len(W) > 2:\n            return str(max(W) - min(W))\n        else:\n            return str(max(W) - min(W))\n    else:\n        if len(W) > 2:\n            M = W[0]\n            for i in range(1, len(W)):\n                M = M + W[i]\n            W.append(M)\n        else:\n            W.append(sum(W))\n        A.append(str(W[1]))\n        A.append(str(W[2]))\n        a = list(map(int, A))\n        a.sort()\n        temp = list(a)\n        temp = temp[1:]\n        temp = temp[::-1]\n        s = list(a[0])\n        s = s + list(a[1])\n        for i in range(len(temp)):\n            s = s + list(temp[i])\n        return str(abs(int(s[0]) - int(s[1])))\n"
    },
    {
        "number": 4184,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    weights = list(map(int, stdin.split()))\n    _max = max(weights)\n    weights.sort()\n    res = 0\n    start = 0\n    end = N - 1\n    while start <= end:\n        if weights[start] <= _max:\n            start += 1\n            continue\n        if weights[end] > _max:\n            end -= 1\n            continue\n        _sum1 = 0\n        _sum2 = 0\n        i = start\n        while i < end:\n            _sum1 += weights[i]\n            _sum2 += weights[end]\n            i += 1\n        res = max(res, abs(_sum1 - _sum2))\n        end -= 1\n    return res\n\nsolution(\"3 3 1 2 1 4\")\nsolution(\"5 10 1 9 2 7\")\n\"\"\"\nimport sys\nfrom math import sqrt\n\ndef"
    },
    {
        "number": 4185,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [[int(i) for i in stdin.split()] for _ in range(n)]\n    min_num_move = 0\n    for i in range(n):\n        curr_col = [a[j][i] for j in range(m)]\n        curr_col.reverse()\n        for j in range(m):\n            a[j][i] = curr_col[j]\n        curr_col.reverse()\n        if sum(curr_col)!= m * n:\n            min_num_move += 1\n    return str(min_num_move)\n\n\nsolution(input())\n"
    },
    {
        "number": 4185,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    n, m = map(int, stdin[0].split())\n    matrix = stdin[1:]\n    #for i in range(1, n):\n    #    matrix[i] = matrix[i][::-1]\n    #print(matrix)\n    cols = list(map(list, zip(*matrix)))\n    print(cols)\n    steps = 0\n    while cols!= matrix:\n        steps += 1\n        for i in range(1, len(cols)):\n            cols[i] = cols[i][::-1]\n        cols = list(map(list, zip(*cols)))\n        print(cols)\n    return steps\n"
    },
    {
        "number": 4185,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n\n    def cyclic_shift(a, m):\n        # put the mth element of a into the 1st position\n        for i in range(m):\n            temp = a[i]\n            a[i] = a[i + 1]\n            a[i + 1] = temp\n\n        # cyclic shift the mth element of a\n        for i in range(n - m):\n            temp = a[n - m + i]\n            a[n - m + i] = a[i]\n            a[i] = temp\n\n    cyclic_shift(a, m)\n\n    for i in range(n):\n        if a[i]!= i + 1:\n            return str(a[i] - 1)\n\n    return str(0)\n\n\nstdin = '4 3'\nprint(solution(stdin))\nstdin = '3 4'\nprint(solution(stdin))\nstdin = '3 4'\nprint(solution(stdin))\n"
    },
    {
        "number": 4185,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    arr = [[int(x) for x in stdin.split()] for _ in range(n)]\n    ans = 0\n    for j in range(m):\n        # shifting the whole column right\n        for i in range(n):\n            arr[i][j] = (i + 1) * m + j\n        # shifting the whole column left\n        for i in range(n):\n            arr[i][j] = (n - 1) * m + j\n    for j in range(m):\n        # shifting the first column right\n        for i in range(n):\n            arr[i][j] = (i - 1) * m + j\n        # shifting the first column left\n        for i in range(n):\n            arr[i][j] = (n - 1) * m + j\n    for i in range(n):\n        for j in range(m - 1):\n            ans = max(ans, abs(arr[i][j] - arr[i][j + 1]))\n    return str(ans)\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4185,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    inputs = [x.strip() for x in stdin.split('\\n')]\n    n, m = int(inputs[0]), int(inputs[1])\n    a = inputs[2:]\n    a = [[int(i) for i in j] for j in a]\n    d = [[0] * m for i in range(m)]\n    ans = 0\n    for i in range(n):\n        for j in range(m):\n            if a[i][j]!= 0:\n                a[i][j] = 0\n                if d[i - 1][j] > 0:\n                    a[i - 1][j] = a[i - 1][j] + a[i][j]\n                else:\n                    a[i - 1][j] = a[i][j]\n                if d[i][j - 1] > 0:\n                    a[i][j - 1] = a[i][j - 1] + a[i][j]\n                else:\n                    a[i][j - 1] = a[i][j]\n                if d[i + 1][j] > 0:\n                    a[i + 1][j] = a[i + 1][j] + a[i][j]\n                else:\n                    a[i + 1][j] = a[i][j]\n                if d[i][j + 1] > 0:\n                    a[i][j + 1] = a[i][j + 1] + a[i][j]\n                else:\n                    a[i][j + 1] = a[i][j]\n                ans += d[i][j] - a[i][j]\n    return str(ans)\n\nstdin = \"\"\"\n3 3\n3 2 1\n1 2 3\n4 5 6\n\"\"\"\nprint(solution(stdin))"
    },
    {
        "number": 4185,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # return 0\n    input = stdin.split()\n    n, m = int(input[0]), int(input[1])\n    a = [[int(input[i + 2]) for i in range(m)] for _ in range(n)]\n    a = [[int(input[i + 2]) for i in range(m)] for _ in range(n)]\n    return str(minMoves(a))\n\n\ndef"
    },
    {
        "number": 4185,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    matrix = [[int(i) for i in stdin.split()] for _ in range(n)]\n    result = 0\n    \n    # not efficient code, but ok for now\n    # while True:\n    #     try:\n    #         for i in range(m):\n    #             if matrix[i][i]!= m+i:\n    #                 print(matrix[i][i], m+i)\n    #                 matrix[i][i] = m+i\n    #                 result += 1\n    #                 break\n    #     except:\n    #         break\n    #     else:\n    #         result += 1\n    # print(result)\n    # return result\n\n    while True:\n        matrix = [[matrix[i][j] for j in range(m)] for i in range(n)]\n        if matrix == matrix[::-1]:\n            break\n        #print(matrix)\n        result += 1\n    print(result)\n    return str(result)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4185,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    matrix = [[int(x) for x in stdin.split()] for _ in range(n)]\n    answer = 0\n    for row in matrix:\n        if row[0]!= 1:\n            break\n        answer += 1\n        for i in range(m):\n            row[i] = (i + 1) * row[i]\n    for i in range(n - 1, -1, -1):\n        if matrix[i][0]!= m:\n            break\n        answer += 1\n        for j in range(m):\n            matrix[i][j] = (i + 1) * matrix[i][j]\n    return str(answer)\n"
    },
    {
        "number": 4185,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    matrix = [list(map(int, stdin.split())) for i in range(n)]\n    moves = 0\n    for i in range(n):\n        for j in range(m):\n            if i!= 0 and matrix[i][j] < matrix[i - 1][j]:\n                moves += 1\n            if i!= n - 1 and matrix[i][j] < matrix[i + 1][j]:\n                moves += 1\n            if j!= 0 and matrix[i][j] < matrix[i][j - 1]:\n                moves += 1\n            if j!= m - 1 and matrix[i][j] < matrix[i][j + 1]:\n                moves += 1\n    return str(moves)"
    },
    {
        "number": 4185,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    matrix = [[int(x) for x in stdin.split()] for _ in range(n)]\n    moves = 0\n    for i in range(n):\n        row = matrix[i]\n        row_moved = row[::]\n        for j in range(m):\n            if row_moved[j] > row[(j - 1) % m]:\n                row_moved[j - 1], row_moved[j] = row_moved[j], row_moved[j - 1]\n                moves += 1\n    return str(moves)\n\nsolution(\"2 3\\n3 2 1\\n1 2 3\")\nsolution(\"3 3\\n3 2 1\\n1 2 3\")\nsolution(\"3 4\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\")\nsolution(\"4 3\\n1 6 3 4\\n5 10 7 8\\n9 2 11 12\")\n"
    },
    {
        "number": 4186,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    skills = sorted(map(int, stdin.split()[1:]))\n    if n % 2!= 0:\n        return str(int(n/2))\n    else:\n        return str(n/2 - 1)\n"
    },
    {
        "number": 4186,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n % 2 == 0:\n        return str(int((n / 2) - 1))\n    else:\n        return str(int(n / 2))"
    },
    {
        "number": 4186,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    \n    s = sum(a)\n    \n    if n % 2:\n        return '0'\n    \n    teams = 0\n    \n    s = sorted(a)\n    \n    while s:\n        x = s.pop(0)\n        teams += 1\n        \n        if sum(s) == s[0]:\n            return str(teams)\n        \n        s.append(x)\n    \n    return str(teams)\n"
    },
    {
        "number": 4186,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    skill = list(map(int, stdin.split()))\n\n    if n % 2!= 0:\n        return \"impossible\"\n\n    skill_sorted = sorted(skill)\n    # find sum of skill\n    sum_skill = sum(skill_sorted)\n\n    # find sum of diff\n    sum_diff = sum([(skill_sorted[i] - skill_sorted[i-1]) for i in range(1, n)])\n    # if sum of diff is even, no need to split\n    if sum_diff % 2 == 0:\n        return str(sum_diff)\n    else:\n        return str(sum_skill//2)\n    \"\"\"\n    # solution_1\n    sum_skill = sum(skill)\n    sum_diff = sum([(skill[i] - skill[i-1]) for i in range(1, n)])\n    # if sum of diff is even, no need to split\n    if sum_diff % 2 == 0:\n        return str(sum_diff)\n    else:\n        return str(sum_skill//2)\n    \"\"\""
    },
    {
        "number": 4186,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1].split(' ')))\n    \n    s = [x for x in a if x == max(a)]\n    m = len(s)\n    \n    # przy uzyciu IF/ELIF min(a) == max(a) oznaczam ze nie ma roznych najlepiej jednichowych mozliwosci\n    if min(a) == max(a):\n        return len(s) + (len(s)-1)//2\n    \n    # przy uzyciu else min(a) == max(a) mozna uzyc \n    else:\n        return len(s) + m//2\n\ndef"
    },
    {
        "number": 4186,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip().split()[0])\n    problems = sorted(map(int, stdin.strip().split()[1]))\n    total = n // 2\n    teams = 0\n    for i in range(total):\n        teams += (problems[i] + problems[-i - 1])\n    return str(teams)\n"
    },
    {
        "number": 4186,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 4186,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin_ = stdin.split()\n    n = int(stdin_[0])\n    skills = list(map(int, stdin_[1:]))\n    teams = []\n    teams.append((skills[0], skills[0]))\n    teams.append((skills[0], skills[1]))\n    teams.append((skills[1], skills[1]))\n    teams.append((skills[2], skills[2]))\n    teams.append((skills[3], skills[3]))\n    teams.append((skills[4], skills[4]))\n\n    count = 0\n    while len(teams)!= n / 2:\n        if len(teams) == 2:\n            count += 1\n        t1 = teams[0]\n        t2 = teams[1]\n        skills_1 = t1[0] + t2[0]\n        skills_2 = t1[1] + t2[1]\n        if skills_1 == skills_2:\n            count += 1\n            teams.append((skills_1, skills_2))\n        elif skills_1 < skills_2:\n            teams.append((skills_1, skills_2))\n        elif skills_1 > skills_2:\n            teams.append((skills_2, skills_1))\n    return str(count)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4186,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 == 1:\n        print('-1')\n        return\n    m = int(n / 2)\n    c = 0\n    for i in range(1, n + 1):\n        for j in range(i + 1, n + 1):\n            if (i - j) % 2 == 0:\n                c += 1\n    print(c)\n"
    },
    {
        "number": 4186,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, *arr = map(int, stdin.split())\n    if n % 2 == 0:\n        return str(int(n/2) - 1)\n    else:\n        return str(int((n - 1)/2))\n\ndef"
    },
    {
        "number": 4187,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input_n = int(stdin)\n    input_sequence = stdin.split()\n    days_array = []\n    for i in range(input_n):\n        days_array.append(list(map(int, input_sequence[i].split('0'))))\n    # print(days_array)\n    result = 0\n    rest = 0\n    for i in range(len(days_array[0])):\n        for j in range(input_n):\n            rest = 0\n            if days_array[j][i] == 1:\n                rest = 1\n                # print(\"rest\", rest)\n                break\n        if rest == 1:\n            result += 1\n    # print(result)\n    return str(result)\n"
    },
    {
        "number": 4187,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    for i in range(n):\n        if stdin.splitlines()[1][i] == 1:\n            a = stdin.splitlines()[2][:i] + stdin.splitlines()[2][i+1:]\n            break\n    else:\n        return '0'\n    return str(max(len(a) - len(a.replace('0', '')), 0))\n"
    },
    {
        "number": 4187,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 1\n   ... 1 0 1 0 1\n   ... ''')\n    '2'\n    >>> solution('''\n   ... 3\n   ... 0 0 0\n   ... 1 0 1\n   ... 0 0 0\n   ... 1 0 1\n   ... 1 0 1\n   ... 1 0 1\n   ... 1 0 1\n   ... 1 0 1\n   ... 1 0 1\n   ... ''')\n    '3'\n    \"\"\"\n\n    n, rest = map(int, stdin.split())\n    hours = list(map(int, stdin.split()))\n\n    def is_working(hour: int) -> bool:\n        return hours[hour] == 0\n\n    count = 0\n    working = 0\n    resting = 0\n\n    for hour in range(n):\n        if is_working(hour):\n            working = hour\n            count += 1\n            continue\n        if working:\n            if resting:\n                resting = working\n                working = None\n            else:\n                resting = None\n                count += 1\n        else:\n            resting = None\n            count += 1\n\n    return str(count) if count >= 2 else '0'\n"
    },
    {
        "number": 4187,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    a.sort()\n    res = 0\n    for i in range(n):\n        if a[i] == 1:\n            if res == 0:\n                res += 1\n            else:\n                res += 2\n    return str(res)"
    },
    {
        "number": 4187,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    days = [int(x) for x in stdin.split()]\n    cnt = 0\n    i = 0\n    max_rest = 0\n    while i < n:\n        if days[i] == 1:\n            if max_rest == 0:\n                cnt += 1\n            max_rest = 0\n        else:\n            max_rest += 1\n            cnt += 1\n        i += 1\n    return str(cnt)\n"
    },
    {
        "number": 4187,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    pass"
    },
    {
        "number": 4187,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return f\"{solution.__init__(stdin)}\"\n\ndef"
    },
    {
        "number": 4187,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    hourly_schedule = list(map(lambda x: int(x), stdin.split()))\n    \n    \n    days_of_rest = []\n    max_rest = 0\n    \n    while len(days_of_rest) < len(hourly_schedule):\n        days_of_rest.append(hourly_schedule.pop(0))\n        \n    if len(days_of_rest) > 1:\n        max_rest = days_of_rest.index(0)\n        \n    return str(max_rest+1)\n    \n    \n    \n    \n"
    },
    {
        "number": 4187,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    if a[0] == 1:\n        return str(n - 1)\n    else:\n        h = 0\n        rest = 0\n        for i in range(n):\n            if a[i] == 0:\n                rest += 1\n            else:\n                rest = 0\n            if rest >= h:\n                h = rest\n        return str(h)\n\n\ndef"
    },
    {
        "number": 4187,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\nn = int(stdin.split()[0])\nrests = list(map(int, stdin.split()[1:]))\n\nans = 0\ncur = 0\nfor i, rest in enumerate(rests):\n    if rest:\n        if cur:\n            ans = max(ans, i - cur)\n            cur = 0\n    else:\n        cur = i + 1\n"
    },
    {
        "number": 4188,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A = int(stdin)\n    if A == 1:\n        return \"1\"\n    if A == 2:\n        return \"2\"\n    if A == 3:\n        return \"3\"\n    if A == 4:\n        return \"4\"\n    if A == 5:\n        return \"5\"\n    if A == 6:\n        return \"6\"\n    if A == 7:\n        return \"7\"\n    if A == 8:\n        return \"8\"\n    if A == 9:\n        return \"9\"\n    if A == 10:\n        return \"10\"\n    if A == 11:\n        return \"11\"\n    if A == 12:\n        return \"12\"\n    if A == 13:\n        return \"13\"\n    if A == 14:\n        return \"14\"\n    if A == 15:\n        return \"15\"\n    if A == 16:\n        return \"16\"\n"
    },
    {
        "number": 4188,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return '1' if n % 2 == 0 else '0'\n"
    },
    {
        "number": 4188,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4188,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(sum([1 if i in range(1, 16) else 0 for i in map(int, stdin.split('\\n'))]))\n\n\nprint(solution(input()))"
    },
    {
        "number": 4188,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    print(stdin)\n    return \"1\"\n    \n    \n"
    },
    {
        "number": 4188,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    solution = list(stdin)\n    m = map(float,solution)\n    return min(m)\n    # Find the min number\n    print(min(map(float, solution)))\n"
    },
    {
        "number": 4188,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"0\" if (int(stdin)) < 1 else (max(int(stdin) - 1, 0))\n"
    },
    {
        "number": 4188,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    for i in range(0, len(stdin)):\n        if int(stdin[i])%2 == 0:\n            return str(int(stdin[i])/2)\nprint(solution(input()))"
    },
    {
        "number": 4188,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"1\""
    },
    {
        "number": 4188,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    return ''.join(stdin)\n\ndef"
    },
    {
        "number": 4189,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin\n    cheese_list = []\n    for line in input.splitlines():\n        cheese_list.append(line.split(\" \"))\n    cheese_list.sort(key=lambda x: x[0])\n    print(len(cheese_list))\n    for cheese in cheese_list:\n        print(cheese)\n\nsolution(input)\n"
    },
    {
        "number": 4189,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    cheese_dict = dict()\n    total_cheese = 0\n    for cheese in stdin.splitlines():\n        cheese_dict[cheese[0]] = cheese[1]\n    \n    for k, v in cheese_dict.items():\n        if v == \"soft\":\n            total_cheese += 2\n        elif v == \"hard\":\n            total_cheese += 4\n    \n    return str(total_cheese)\n\nsolution(\"\"\"\nparmesan hard\nemmental hard\nedam hard\ncolby hard\ngruyere hard\nasiago hard\n\"\"\")"
    },
    {
        "number": 4189,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return len(set(stdin.split('\\n')))\n"
    },
    {
        "number": 4189,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    cheese_list = stdin.splitlines()\n    cheese_dict = {}\n    #print(cheese_list)\n    cheese_dict = dict(map(lambda cheese: (cheese[0], cheese[1]), cheese_list))\n    return sum(map(lambda cheese: cheese_dict.get(cheese), list(cheese_dict)))\n"
    },
    {
        "number": 4189,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4189,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    cheese_dict = {\n       'soft': 0,\n        'hard': 0\n    }\n\n    for cheese in stdin.split('\\n'):\n        cheese_dict[cheese.split()[1]] += 1\n\n    return cheese_dict['soft'] + cheese_dict['hard']"
    },
    {
        "number": 4189,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    cheese = []\n    n = int(stdin.strip())\n    for i in range(n):\n        cheese.append(stdin.strip())\n    cheese.sort()\n    cheese.sort(key=lambda x: x[::-1])\n    return '\\n'.join(cheese)\nsolution(input())\n"
    },
    {
        "number": 4189,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return sum(1 for line in stdin.splitlines() if line.endswith('hard'))\n\ndef"
    },
    {
        "number": 4189,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    d = {}\n    for line in stdin.splitlines():\n        name, type_ = line.split()\n        d[name] = type_\n    count = 0\n    for k, v in d.items():\n        if v =='soft':\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 4189,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return''.join(map(lambda x: str(x), Counter(stdin.split()).values()))\n\nsolution(\"6 camembert hard\")\n"
    },
    {
        "number": 4190,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    if n == 0:\n        return ''\n    if n == 1:\n        return ''.join(map(str, a))\n    return''.join(map(str, b))\nprint(solution(input()))\n"
    },
    {
        "number": 4190,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    [n, a, b] = stdin.split(' ')\n    n = int(n)\n    a = list(map(int, a.split(' ')))\n    b = list(map(int, b.split(' ')))\n    c = []\n    for i in range(n):\n        c.append((a[i] + b[i]) % n)\n    for i in range(n):\n        c[i] = str(c[i])\n    return \" \".join(c)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4190,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    _, a = stdin.split()\n    a = list(map(int, a.split()))\n    _, b = stdin.split()\n    b = list(map(int, b.split()))\n    c = []\n    for i in range(len(a)):\n        c.append((a[i] + b[i]) % len(a))\n    return \" \".join(map(str, c))\n"
    },
    {
        "number": 4190,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    a = list(map(int, a.split()))\n    b = list(map(int, b.split()))\n    c = [0] * len(b)\n    for i in range(len(b)):\n        c[i] = (a[i] + b[i]) % len(b)\n    return''.join(map(str, c))"
    },
    {
        "number": 4190,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1].split()))\n    b = list(map(int, stdin.split()[2].split()))\n    # print(n)\n    # print(a)\n    # print(b)\n    \n    new_a = []\n    for i in a:\n        new_a.append((i + b[i]) % n)\n    print(new_a)\n    return''.join([str(x) for x in new_a])\n    \n\nsolution(\"\")"
    },
    {
        "number": 4190,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    a_int = sorted(map(int, stdin.split()))\n    b_int = sorted(map(int, stdin.split()))\n\n    res = []\n    for i in range(a):\n        res.append((a_int[i] + b_int[i]) % a)\n\n    return''.join(map(str, res))\n"
    },
    {
        "number": 4190,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n\n    def sort(a, b):\n        n = len(a)\n        b = list(map(int, stdin.split()))\n        res = []\n        for i in range(n):\n            for j in range(n):\n                res.append(a[i] + b[j])\n        return res\n\n    def sort(a, b):\n        n = len(a)\n        b = list(map(int, stdin.split()))\n        res = []\n        for i in range(n):\n            for j in range(n):\n                if i == j:\n                    res.append(0)\n                    continue\n                res.append(a[i] + b[j])\n        return res\n\n    # print(a, b)\n    return \" \".join(map(str, sort(a, b)))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4190,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def reorder(a, b):\n        a.sort()\n        b.sort()\n        c = []\n        j = 0\n        for i in range(len(a)):\n            c.append(a[i] + b[i])\n        c.sort()\n        for i in range(len(a)):\n            a[i] = c[i] - j\n            j += 1\n        print(*a)\n\n    def main():\n        a, b = list(map(int, stdin.split()))\n        reorder(list(map(int, stdin.split())), list(map(int, stdin.split())))\n\n    main()\n    return ''\n"
    },
    {
        "number": 4190,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n\n    a = list(map(int, lines[1].split()))\n    b = list(map(int, lines[2].split()))\n    c = []\n    for i in range(len(b)):\n        c.append((a[i] + b[i]) % len(a))\n    print(*c, sep=' ')\n    return ''\nsolution('')\nsolution('4\\n0 1 2 1\\n3 2 1 1\\n')\nsolution('7\\n2 5 1 5 3 4 3\\n2 4 3 5 6 5 1\\n')\n"
    },
    {
        "number": 4190,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    a = [int(x) for x in a]\n    b = [int(x) for x in b]\n    b = sorted(b)\n    c = []\n    for i in range(len(a)):\n        c.append(a[i] + b[i])\n    print(\" \".join(map(str, sorted(c))))\n\nsolution(input())\n"
    },
    {
        "number": 4191,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.strip()\nstdin = '0\\n1\\n1\\n0\\n'\nprint(solution(stdin))\n\n\nInput\n0\n1\n1\n0\n\nOutput\n1\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4191,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    lines = stdin.splitlines()\n\n    # Convert image to binary and assign to a variable\n    image = lines[0]\n\n    # print(lines)\n    # print(image)\n    # print()\n\n    # Convert image to binary and assign to a variable\n    binary = image.replace('0', '0b000000000000000000000000')\n    binary = binary.replace('1', '0b000000000000000000000000')\n\n    # print(binary)\n    # print()\n\n    # Convert binary to decimal and assign to a variable\n    decimal = int(binary, 2)\n\n    # print(decimal)\n    # print()\n\n    return str(decimal)\n\nsolution('0')\n\"\"\"\n"
    },
    {
        "number": 4191,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Complete the function below.\n    \"\"\"\n    file = stdin\n    arr = file.splitlines()\n\n    new_arr = []\n    for i in arr:\n        new_arr.append(i[::-1])\n    \n    result = []\n\n    for i in new_arr:\n        for j in i:\n            if j == \"0\":\n                result.append(0)\n            elif j == \"1\":\n                result.append(1)\n\n    print(result)\n\n    return str(sum(result))\n"
    },
    {
        "number": 4191,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4191,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return a single digit 0 or 1.\"\"\"\n    return \"\""
    },
    {
        "number": 4191,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4191,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join([str(int(x)) for x in stdin.split('\\n')])\n\nprint(solution(\"\"\"\n0\n1\n1\n0\n\n\"\"\") == \"0\")\n\nprint(solution(\"\"\"\n1\n0\n1\n0\n\n\"\"\") == \"1\")\n\nprint(solution(\"\"\"\n1\n1\n1\n0\n\n\"\"\") == \"1\")\n\nprint(solution(\"\"\"\n0\n1\n1\n1\n\n\"\"\") == \"1\")\n\nprint(solution(\"\"\"\n0\n1\n1\n1\n\n\"\"\") == \"0\")\n"
    },
    {
        "number": 4191,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    #return 0\n    stdin = stdin.rstrip().split('\\n')\n    for i in range(len(stdin)):\n        a = stdin[i]\n        a = list(a)\n        a.reverse()\n        b = 0\n        for j in range(len(a)):\n            b = (b+int(a[j])) % 2\n        stdout.write(str(int(b)) + '\\n')\n    return 0\n\ndef"
    },
    {
        "number": 4191,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    for line in stdin:\n        for char in line:\n            return 0\n        return 1\nprint(solution(input()))\n"
    },
    {
        "number": 4191,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return None\n\"\"\"\n\ndef"
    },
    {
        "number": 4192,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    d, t, s = map(int, stdin.split())\n    takahashi_time = (d*(s/t)) - 0.5\n    akaokaoka_time = (takahashi_time + takahashi_time)\n    if akaokaoka_time == int(akaokaoka_time):\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4192,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    d, t, s = stdin.split()\n    d, t, s = int(d), int(t), int(s)\n    return 'Yes' if d * (t // 60) + s <= d * (t % 60) <= d * (t // 60) + s + t % 60 else 'No'\n"
    },
    {
        "number": 4192,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    _, D, T, S = stdin.split()\n    return 'Yes' if int(S) // int(T) == int(D) / int(S) else 'No'\n"
    },
    {
        "number": 4192,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    try:\n        D, T, S = map(int, stdin.split())\n    except Exception as e:\n        print(f\"ERROR: {e}\")\n    else:\n        time = (D / S) * 60\n        time = time * 60\n        if (time - T) < 0:\n            print(\"No\")\n        else:\n            print(\"Yes\")\n"
    },
    {
        "number": 4192,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    d, t, s = map(int, stdin.split())\n    d = d / 1000\n    t = t / 60\n    s = s / 1000\n\n    return \"Yes\" if round(d + s / t) <= 1000 else \"No\""
    },
    {
        "number": 4192,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    d, t, s = map(int, stdin.split())\n    return \"Yes\" if int(((1000 - d) * (t - s)) / s) <= 180 else \"No\"\n"
    },
    {
        "number": 4192,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"No\" if \"No\" == stdin else \"Yes\""
    },
    {
        "number": 4192,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Your code goes here\n    d, t, s = (int(_) for _ in stdin.split())\n    m = (t*s)//d\n    return 'Yes' if t*s>=d else 'No'"
    },
    {
        "number": 4192,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    d, t, s = stdin.split()\n    d = int(d)\n    t = int(t)\n    s = int(s)\n    time = t * s\n    if d >= time:\n        return \"Yes\"\n    return \"No\"\n\nprint(solution(input()))\n\ninput()\n"
    },
    {
        "number": 4192,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin.split()[0])\n    y = int(stdin.split()[1])\n    z = int(stdin.split()[2])\n    t = y\n    if y > x:\n        return \"No\"\n    if x == y:\n        if z == 0:\n            return \"Yes\"\n        else:\n            return \"No\"\n    if x < y:\n        return \"No\"\n    if y == x:\n        if z == 0:\n            return \"Yes\"\n        else:\n            return \"No\"\n    if x < y and x > z:\n        return \"No\"\n    if x < y and x == z:\n        return \"No\"\n    return \"Yes\"\n"
    },
    {
        "number": 4193,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split()\n    N = int(inputs[0])\n    bingo = []\n    for i in range(N):\n        bingo.append(list(map(int,inputs[i+1].split())))\n\n    matches = True\n    # If we can find a number, we will mark it as complete.\n    for row in bingo:\n        for i in range(len(row)):\n            if (bingo[i][0] == bingo[i][1]):\n                matches = False\n\n    for i in range(len(bingo)):\n        for j in range(len(bingo)):\n            if (bingo[i][j] == bingo[0][0]):\n                matches = False\n\n    for i in range(len(bingo)):\n        for j in range(len(bingo)):\n            if (bingo[i][j] == bingo[0][1]):\n                matches = False\n\n    if (matches):\n        return \"Yes\"\n    else:\n        return \"No\"\n\ninput = \"\"\"84 97 66\n79 89 11\n61 59 7\n7\n89\n7\n87\n79\n24\n84\"\"\"\n\nprint(solution(input))"
    },
    {
        "number": 4193,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, n = map(int, stdin.split())\n    for row in range(n):\n        for col in range(n):\n            if a == a + b * n + n:\n                print(\"Yes\")\n                return\n            a = a + b\n        b = b - 1\n    print(\"No\")\n\nsolution(input())\n"
    },
    {
        "number": 4193,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    r, c, n, *b = stdin.split()\n    a = list(map(int, r.split(' ')))\n    b = list(map(int, c.split(' ')))\n    print(bingo(a, b, int(n)))\n\ndef"
    },
    {
        "number": 4193,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N: int = int(stdin.split()[2])\n    arr: List[List[int]] = []\n    for i in range(3):\n        line = list(map(int, stdin.split()[i * N:(i + 1) * N]))\n        arr.append(line)\n\n    for i in range(N):\n        for j in range(N):\n            if arr[i][j] == N + 1:\n                arr[i][j] = 0\n            else:\n                arr[i][j] = arr[i][j] - 1\n\n    for i in range(N):\n        if sum(arr[i]) == N:\n            for j in range(N):\n                if arr[i][j] == 1:\n                    arr[i][j] = 0\n                else:\n                    arr[i][j] = 1\n\n        if sum(arr[i]) == N:\n            for j in range(N):\n                if arr[j][i] == 1:\n                    arr[j][i] = 0\n                else:\n                    arr[j][i] = 1\n\n    for i in range(N):\n        for j in range(N):\n            if arr[i][j] == 1:\n                return \"Yes\"\n    return \"No\"\n\nsolution(input())\n"
    },
    {
        "number": 4193,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    input_arr = stdin.split()\n    row_len, col_len = 3, 3\n    arr_len = row_len * col_len\n    board = [[int(input_arr[i * arr_len + j]) for j in range(arr_len)] for i in range(row_len)]\n    num = int(input_arr[-1])\n    res = \"\"\n    for i in range(row_len):\n        for j in range(col_len):\n            if board[i][j] == num:\n                for x in range(row_len):\n                    for y in range(col_len):\n                        if x == i or y == j or x + y == i + j or x - y == i - j:\n                            if board[x][y]!= num:\n                                res = \"No\"\n                                return res\n    res = \"Yes\"\n    return res"
    },
    {
        "number": 4193,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    arr = [int(i) for i in stdin.split('\\n') if i!= '']\n    N = int(arr.pop(0))\n    b_arr = arr[:N]\n    a_arr = arr[N:]\n    b_arr.sort()\n    a_arr.sort()\n    for i in range(0, len(a_arr)):\n        for j in range(0, len(b_arr)):\n            if a_arr[i] == b_arr[j] and a_arr[i]!= a_arr[j]:\n                if a_arr[i] % 3 == 0 and a_arr[i] + a_arr[i + 1] == b_arr[j] and a_arr[i] + a_arr[i + 2] == b_arr[j] and a_arr[i + 2] % 3 == 0 and a_arr[i + 2] + a_arr[i + 1] == b_arr[j]:\n                    return 'Yes'\n    return 'No'"
    },
    {
        "number": 4193,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    _, N = stdin.split()\n    N = int(N)\n    numbers = [int(n) for n in stdin.split()]\n\n    matrix = [[n for n in range(1, 101)] for _ in range(101)]\n\n    for i in range(1, N + 1):\n        row, column = map(int, stdin.split())\n        matrix[row - 1][column - 1] = i\n\n    is_bingo = False\n    for i in range(1, N + 1):\n        if any(n in matrix[i - 1] for n in numbers):\n            is_bingo = True\n            break\n\n    for i in range(1, 101):\n        if any(n in matrix[i - 1] for n in numbers):\n            is_bingo = True\n            break\n\n    for i in range(1, 101):\n        if any(n in matrix[i - 1][j - 1] for j in range(1, 101)):\n            is_bingo = True\n            break\n\n    if is_bingo:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\n    return\n\nsolution(input())\n"
    },
    {
        "number": 4193,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin.split()[2])\n    a: List[List[int]] = [[int(x) for x in stdin.split()[i * 3:(i + 1) * 3]] for i in range(3)]\n    b: List[int] = [int(stdin.split()[i]) for i in range(n)]\n\n    def is_bingo(b: List[int]) -> bool:\n        # Check rows\n        for i in range(3):\n            if sorted(b[i * 3:(i + 1) * 3])!= a[i]:\n                return False\n        # Check columns\n        for i in range(3):\n            if sorted([a[i][j] for j in range(3)])!= b[i::3]:\n                return False\n        # Check diagonals\n        return sorted([a[i][i] for i in range(3)]) == b[0::3] or sorted([a[i][2 - i] for i in range(3)]) == b[1::3]\n\n    return \"Yes\" if is_bingo(b) else \"No\"\n\nprint(solution(input()))"
    },
    {
        "number": 4193,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = {\n        int(x) for x in stdin.split()\n    }\n    n = int(stdin.split()[3])\n    b = {\n        int(x) for x in stdin.split()[4:]\n    }\n    if len(a)!= 3 or len(b)!= n:\n        return \"No\"\n\n    for i in range(1, 4):\n        if (a.pop()!= a.pop() + i) and (a.pop()!= a.pop() + i):\n            return \"No\"\n\n    for i in range(1, 4):\n        if (b.pop()!= b.pop() + i) and (b.pop()!= b.pop() + i):\n            return \"No\"\n\n    return \"Yes\"\n\nprint(solution(input()))\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4193,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    m, n = map(int, stdin.split())\n    # a = [list(map(int, stdin.split())) for _ in range(m)]\n    a = [[int(x) for x in stdin.split()]]\n    b = [[int(x) for x in stdin.split()]]\n    N = int(stdin.split()[-1])\n    for i in range(m):\n        for j in range(n):\n            b[i][j] = a[i][j]\n            a[i][j] = '.'\n    count = 0\n    for i in range(m):\n        for j in range(n):\n            if a[i][j] == '.':\n                a[i][j] = 'X'\n                count += 1\n                if count == N:\n                    break\n            else:\n                a[i][j] = '.'\n    count = 0\n    for i in range(m):\n        for j in range(n):\n            if a[i][j] == '.':\n                a[i][j] = 'X'\n                count += 1\n                if count == N:\n                    break\n            else:\n                a[i][j] = '.'\n    for i in range(m):\n        for j in range(n):\n            if b[i][j] == '.':\n                b[i][j] = 'X'\n                count += 1\n                if count == N:\n                    break\n            else:\n                b[i][j] = '.'\n    for i in range(m):\n        for j in range(n):\n            if b[i][j] == '.':\n                b[i][j] = 'X'\n                count += 1\n                if count == N:\n                    break\n            else:\n                b[i][j] = '.'\n    count = 0\n    for i in range(m):\n        for j in range(n):\n            if a[i][j] == 'X' and b[i][j] == 'X':\n                count += 1\n                if count == N:\n                    break\n            else:\n                a[i][j] = '.'\n                b[i][j] = '.'\n    for i in range(m):\n        for j in range(n):\n            if a[i][j] == 'X' or b[i][j] == 'X':\n                continue\n            else:\n                return 'No'\n    return 'Yes'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4194,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n\n    max_days = 0\n    days = 1\n\n    for i in range(1, m):\n        days += arr[i]\n\n    max_days = max(days, max_days)\n\n    while max_days!= 1:\n        max_days += 30\n        days = 1\n        for i in range(1, m):\n            days += arr[i]\n        max_days = max(max_days, days)\n\n    return str(max_days) if max_days!= 1 else \"-1\""
    },
    {
        "number": 4194,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time: O(NM)\n    Space: O(NM)\n    \"\"\"\n    n, m = map(int, stdin.split())\n    assignments = list(map(int, stdin.split()))\n    assignments.sort()\n    total_days = 0\n    for i in range(m):\n        days = assignments[i]\n        for j in range(i + 1, m):\n            if days + assignments[j] > n:\n                break\n            days += assignments[j]\n        total_days = max(total_days, days)\n    return str(total_days) if total_days else '-1'\n"
    },
    {
        "number": 4194,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Split the input by spaces\n    stdin_list = stdin.split(' ')\n    N, M = int(stdin_list[0]), int(stdin_list[1])\n    assignments = stdin_list[2].split(' ')\n    assignments = list(map(int, assignments))\n\n    if len(assignments) == 0:\n        return '-1'\n\n    # Initialize the dp matrix\n    dp = [[0] * (N + 1) for _ in range(N + 1)]\n\n    # Fill the first row and column\n    for i in range(1, N + 1):\n        dp[i][0] = dp[0][i] = 0\n    for i in range(1, N + 1):\n        dp[0][i] = N\n    for i in range(1, N + 1):\n        dp[i][0] = N\n\n    # Fill the other rows and columns\n    for i in range(1, N + 1):\n        for j in range(1, N + 1):\n            # If the assignment is not the i-th assignment, or if the assignment i-th assignment already ended on the j-th day\n            if i!= assignments[j - 1]:\n                dp[i][j] = min(dp[i - 1][j], dp[i][j - 1])\n            # If the assignment is the i-th assignment, and the j-th day is the day where it was completed\n            elif i == assignments[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n\n    # Print the maximum number of days\n    return str(dp[N][N])\n"
    },
    {
        "number": 4194,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    n,m=map(int,stdin.split())\n    l=list(map(int,stdin.split()))\n    d=l[0]\n    a=l[1:]\n    a=sorted(a,reverse=True)\n    q=deque(a)\n    f=deque()\n    f.append(1)\n    for i in range(1,n):\n        f.append(f[i]+q[i])\n    for i in range(n):\n        if f[i]>d:\n            return -1\n        else:\n            return f[i]"
    },
    {
        "number": 4194,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    assignments = list(map(int, stdin.split()))\n    \n    # Make sure that\n    # 1. He can finish all the assignments on the first day of the vacation\n    # 2. He cannot do multiple assignments on the same day, or hang out on a day he does an assignment.\n    for a in assignments:\n        if a > N or a > N:\n            return '-1'\n    \n    # If he can finish all the assignments on the first day of the vacation, return the maximum number of days.\n    # Otherwise return -1.\n    ans = 0\n    for a in assignments:\n        ans += a\n        ans = max(ans, a)\n    return str(ans)\n"
    },
    {
        "number": 4194,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, M = list(map(int, stdin.split()))\n    A = list(map(int, stdin.split()))\n    dp = [[0 for _ in range(M + 1)] for _ in range(N + 1)]\n    for i in range(1, N + 1):\n        for j in range(1, M + 1):\n            if j < A[i - 1]:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - A[i - 1]] + 1)\n    return str(dp[N][M])\n\nimport unittest\n\nclass Test(unittest.TestCase):\n    def test_max_days(self):\n        self.assertEqual(solution('4 5\\n5 6\\n3 4\\n1 2\\n'), '30')\n        self.assertEqual(solution('4 4\\n2 2\\n3 4\\n3 5\\n'), '30')\n        self.assertEqual(solution('1 1\\n2 2\\n4 4\\n2 2\\n'), '-1')"
    },
    {
        "number": 4194,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    assignments = list(map(int, stdin.split()))\n    days = m + max(assignments)\n    if days > n:\n        return str(-1)\n    elif days == n:\n        return str(max(assignments))\n    else:\n        return str(n - days)\n"
    },
    {
        "number": 4194,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    assignments = list(map(int, stdin.split()))\n    durations = sorted(assignments)\n    day_limit = len(durations)\n\n    def can_finish(duration):\n        for day in range(day_limit):\n            if duration + day >= day_limit:\n                return False\n            if day == 0 and day + durations[day] >= duration:\n                return True\n            if day!= 0 and day + durations[day] > duration + durations[day - 1]:\n                return True\n\n    return str(day_limit - can_finish(durations[-1]))\n"
    },
    {
        "number": 4194,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def _parse_input(N: int, M: int, A: str):\n        n = N\n        a = list(map(int, A.split(' ')))\n        return n, m, a\n\n    def _allocate_to_day(day: int, n: int, m: int, a: list):\n        nonlocal day_count\n        day_count += 1\n        for i in range(n):\n            if day + i == day_count:\n                return day + i + 1\n            elif day + i >= day_count:\n                day_count += 1\n                break\n            elif day + i not in a:\n                day_count += 1\n                continue\n\n    n, m, a = _parse_input(*_parse_input(*map(int, stdin.split())))\n    day_count = 0\n    day_hanging = _allocate_to_day(0, n, m, a)\n    if day_hanging == -1:\n        return \"NO\"\n    else:\n        return str(day_hanging)\n    return solution\n"
    },
    {
        "number": 4194,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    # print(n, m, a)\n    # n = 4, m = 2\n    # a = 5, 6\n\n    day = 0\n    # 8 <= n <= 10^6\n    # 8 <= m <= 10^4\n    # 8 <= a[i] <= 10^4\n    # if n == 1 or m == 1:\n    #     return 0\n    # else:\n    #     while (n - 1) >= 0:\n    #         day += max(a)\n    #         n -= 1\n    # return day\n\n    # day = 0\n    # for i in range(m):\n    #     for j in range(a[i]):\n    #         day += 1\n    #         if day > n:\n    #             return -1\n    # return day\n\n    # m = 2\n    # a = 5, 6\n    # n = 4\n    # day = 0\n    # while m > 0:\n    #     m -= 1\n    #     day += max(a)\n    # return day\n    return day\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4195,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    d, n = map(int, stdin.split())\n    return min(i for i in range(1, n + 1) if (i % 100) % d == 0)\n"
    },
    {
        "number": 4195,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    D = int(stdin.split()[0])\n    N = int(stdin.split()[1])\n    divisible = set()\n    for i in range(1, N + 1):\n        if (i % 100) == 0:\n            divisible.add(i)\n    divisible = sorted(list(divisible))\n    for num in divisible:\n        if D == 1:\n            if num % D == 0:\n                return str(num)\n        elif D == 2:\n            if num % D == 0:\n                if num % 100 == 0:\n                    return str(num)\n        elif D == 3:\n            if num % D == 0:\n                if num % 100 == 0:\n                    if num % 1000 == 0:\n                        return str(num)\n        elif D == 4:\n            if num % D == 0:\n                if num % 100 == 0:\n                    if num % 1000 == 0:\n                        if num % 10000 == 0:\n                            return str(num)\n        elif D == 5:\n            if num % D == 0:\n                if num % 100 == 0:\n                    if num % 1000 == 0:\n                        if num % 10000 == 0:\n                            if num % 100000 == 0:\n                                return str(num)\n    return str(divisible[-1])"
    },
    {
        "number": 4195,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def gcd(a: int, b: int) -> int:\n        if b == 0:\n            return a\n        return gcd(b, a % b)\n\n    stdin = stdin.strip()\n    a, b = stdin.split()\n    a = int(a)\n    b = int(b)\n    return str(gcd(a, b))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4195,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    from functools import lru_cache\n\n    @lru_cache(maxsize=None)\n    def dfs(depth: int) -> int:\n        if depth == len(stdin):\n            return int(stdin)\n\n        val = int(stdin)\n\n        if val % 100!= 0:\n            return val\n\n        for _ in range(100):\n            val *= 10\n            val = int(val)\n            if val % 100 == 0:\n                return int(val / 100)\n\n        return int(stdin)\n\n    return str(dfs(int(stdin)))\n"
    },
    {
        "number": 4195,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    d, n = map(int, stdin.split())\n    res = 1\n    while True:\n        if d <= 1:\n            if n == 0:\n                break\n            else:\n                n -= 1\n        else:\n            if n == 0:\n                break\n            else:\n                n -= 1\n        res += 1\n        d -= 1\n    return str(res)\n\nsolution('0 5')\n"
    },
    {
        "number": 4195,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    D = int(stdin[0])\n    N = int(stdin[1])\n    return '{}'.format(int(1 + N * (N - 2) // D))\n"
    },
    {
        "number": 4195,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n = int(stdin)\n    if n < 0:\n        raise ValueError('Input n must be positive.')\n\n    div = 0\n    while True:\n        if n % 100 == 0:\n            div += 1\n        else:\n            return str(n % 100)\n        n //= 100"
    },
    {
        "number": 4195,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    d, n = int(stdin.split(\" \")[0]), int(stdin.split(\" \")[1])\n    if d == 0 or d == 1 or d == 2:\n        return \"N/A\"\n    for i in range(1, n+1):\n        if (i % 100) % d!= 0:\n            continue\n        if (i % 100) % (d-1)!= 0:\n            continue\n        return str(i)\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4195,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    d, n = map(int, stdin.split())\n    a = 1\n    for i in range(n):\n        a = (a*10) % (d*10)\n    return str(a)"
    },
    {
        "number": 4195,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n  D, N = list(map(int, stdin.split()))\n  for i in range(N):\n    N = N - 1\n    D = D + D\n    D = D % 100\n    if D == 0:\n      return str(N)\n  return \"n/a\"\n"
    },
    {
        "number": 4196,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    numbers = stdin.split(\" \")\n    max_common_divisor = int(numbers[0])\n    for number in numbers:\n        max_common_divisor = max(max_common_divisor, int(number))\n    return str(max_common_divisor)\n"
    },
    {
        "number": 4196,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    greatest_common_divisor = 1\n    for i in range(1, n):\n        greatest_common_divisor = gcd(greatest_common_divisor, a[i])\n    return str(greatest_common_divisor)\n\n\ndef"
    },
    {
        "number": 4196,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input_lines = stdin.split('\\n')\n    N = int(input_lines[0])\n    A = list(map(int, input_lines[1].split()))\n    ans = ''\n    for i in range(N):\n        for j in range(i + 1, N):\n            for k in range(j + 1, N):\n                if A[i] == A[j] or A[i] == A[k] or A[j] == A[k]:\n                    continue\n                elif GCD(A[i], A[j], A[k]) > ans:\n                    ans = str(GCD(A[i], A[j], A[k]))\n    return ans\n\ndef"
    },
    {
        "number": 4196,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Complete the solution so that it returns the maximum possible greatest common divisor of all the integers on the blackboard after your move.\n    \"\"\"\n    n = int(stdin)\n    \n    # Finding a solution:\n    # https://stackoverflow.com/questions/13765037/determining-the-maximum-common-divisor-of-two-numbers-in-python\n    # https://docs.python.org/3/library/math.html#math.gcd\n    # https://stackoverflow.com/questions/29916037/python-numbers-greatest-common-divisor\n    a = int(stdin.split()[1])\n    b = int(stdin.split()[2])\n    return str(math.gcd(a, b))"
    },
    {
        "number": 4196,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the solution.\"\"\"\n    # your code here\n    return solution"
    },
    {
        "number": 4196,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    A = list(map(int, stdin.split()))\n    A_set = set(A)\n    if len(A) == 1:\n        print(A[0])\n        return\n    if len(A) == 2:\n        print(A[0] if A[0] == A[1] else A[1])\n        return\n    for i in range(n):\n        A[i] = min(A)\n        A_set.remove(A[i])\n        if len(A_set) == 1:\n            print(A_set.pop())\n            return\n        A[i] = max(A)\n    print(A_set.pop())\n\nsolution(input())\n\"\"\"\n\nimport math\n\ndef"
    },
    {
        "number": 4196,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # split each line of input into a list\n    lines = stdin.split(\"\\n\")\n\n    # get the length of the list\n    N = int(lines[0])\n\n    # initialize variables\n    numbers = []\n    divisor = 1\n    max_common_divisor = 0\n    \n    # add each line to the list\n    for i in range(1, N+1):\n        numbers.append(int(lines[i]))\n\n    # find the max common divisor\n    for i in range(0, N-1):\n        for j in range(i+1, N):\n            if numbers[i] % numbers[j] == 0:\n                divisor = numbers[i]//numbers[j]\n            if divisor > max_common_divisor:\n                max_common_divisor = divisor\n\n    # return the max common divisor\n    return str(max_common_divisor)\n"
    },
    {
        "number": 4196,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return '1'\n    answer = 1\n    for i in range(2, n + 1):\n        answer = max(answer, max(answer, i))\n    return str(answer)\n"
    },
    {
        "number": 4196,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, *A = list(map(int, stdin.split()))\n    d = 10**9 + 1\n    for i in range(N):\n        for j in range(i + 1, N):\n            for k in range(j + 1, N):\n                if A[i] % A[j] == 0 and A[i] % A[k] == 0:\n                    d = min(d, A[i] // min(A[j], A[k]))\n    return str(d)\n"
    },
    {
        "number": 4196,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin.strip())\n    numbers = stdin.split()\n    greatest_common_divisor: int = 1\n\n    for number in numbers:\n        greatest_common_divisor = max(greatest_common_divisor, int(number) // greatest_common_divisor)\n\n    return str(greatest_common_divisor)\n"
    },
    {
        "number": 4197,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    arr = list(map(int, stdin.split()))\n    arr.sort(key=lambda x: x, reverse=True)\n    return''.join(map(str, arr))\n\n\nprint(solution(input()))\n\"\"\"\n\ndef"
    },
    {
        "number": 4197,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return stdin\n    array = stdin.split()\n    students = []\n    for i in range(n):\n        students.append(int(array[i]))\n    students.sort()\n    print(' '.join(map(str, students)))\n    return''.join(map(str, students))"
    },
    {
        "number": 4197,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    inp = stdin.split('\\n')\n    n = int(inp[0])\n    a = inp[1].split(' ')\n    a = sorted(list(map(int, a)))\n    return '\\n'.join(map(str, a))\n    "
    },
    {
        "number": 4197,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    A = list(map(int, stdin.split()))\n    A.sort()\n    # print(A)\n    return''.join(map(str, A))\n"
    },
    {
        "number": 4197,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return \" \".join(map(str, sorted(list(map(int, stdin.split()))))\n    )\n"
    },
    {
        "number": 4197,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    student = []\n    for i in range(N):\n        student.append(int(stdin))\n    student.sort()\n    return \" \".join(map(str, student))\n\ndef"
    },
    {
        "number": 4197,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin.split('\\n')[0])\n    arr: list = stdin.split('\\n')[1].split(' ')\n    res: str = ''\n    arr.sort()\n    for i in range(n):\n        res += arr[i] +''\n    return res[:-1]\n"
    },
    {
        "number": 4197,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    stdin = stdin.split()\n    stdin = list(map(int, stdin))\n    stdin.sort()\n    return''.join(map(str, stdin))\n    \n"
    },
    {
        "number": 4197,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    a = [int(i) for i in stdin.split()]\n    a = sorted(a)\n    return''.join(map(str, a))\n"
    },
    {
        "number": 4197,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    inp = stdin.split()\n    n = int(inp[0])\n    a = list(map(int, inp[1].split()))\n    a.sort()\n    return''.join(map(str, a))\n"
    },
    {
        "number": 4198,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = map(int, stdin.split())\n    for integer in range(A, 10**9+1):\n        if integer % 10 == 0:\n            continue\n        digits = str(integer)\n        integer_n = 0\n        for digit in range(len(digits)):\n            integer_n += int(digits[digit]) * pow(10, len(digits)-1 - digit)\n        if integer_n * A + B * integer_n > X:\n            continue\n        else:\n            return str(integer)\n    return str(0)\n"
    },
    {
        "number": 4198,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = map(int, stdin.split())\n    max_int = 10 ** 9\n    while max_int % A!= 0:\n        max_int -= 1\n    if X > max_int - A:\n        return 0\n    n = 0\n    while True:\n        n = (n * 10 + A - 1) // A\n        if n < X:\n            X -= n * A\n        else:\n            return str(n)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4198,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = list(map(int, stdin.split()))\n    dp = [[-1] * (X + 1) for _ in range(B + 1)]\n    dp[0][0] = 0\n    for i in range(1, B + 1):\n        for j in range(1, X + 1):\n            for k in range(A, 10 ** 9 + 1):\n                dp[i][j] = max(dp[i][j], dp[i - 1][j - 1] + k * (i + 1) * (j + k - 1))\n    return str(dp[B][X])"
    },
    {
        "number": 4198,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = stdin.split(' ')\n    a, b, x = int(a), int(b), int(x)\n    if x >= 10 ** 9:\n        return 0\n    if x == 0:\n        return 0\n    nums = []\n    curr_total = 0\n    for i in range(1, 10 ** 9 + 1):\n        curr_total += (10 ** i - 1) * i\n        nums.append(curr_total)\n    # find the largest digit in the list\n    largest_digit = -1\n    largest_digit_index = -1\n    for i in range(1, 10 ** 9 + 1):\n        curr_total = 0\n        curr_total += (10 ** i - 1) * i\n        if curr_total == x:\n            largest_digit = i\n            largest_digit_index = nums.index(curr_total)\n            break\n    if largest_digit == -1:\n        return 0\n    ans = 0\n    i = largest_digit_index\n    while i < len(nums):\n        curr_total = 0\n        curr_total += (10 ** i) * i\n        if curr_total == x:\n            ans = i\n            break\n        i += 1\n    return str(ans)"
    },
    {
        "number": 4198,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    (A, B, X) = map(int, stdin.split())\n    ans = 0\n\n    for i in range(1, 10**9 + 1):\n        # print(i)\n        if len(str(i)) == A:\n            # print(i)\n            ans = max(ans, i)\n    if ans == 0:\n        print(0)\n    else:\n        print(ans*X+B*(len(str(ans))-A))\n"
    },
    {
        "number": 4198,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = map(int, stdin.split())\n    # Base Case\n    if A == 0 or B == 0:\n        return str(0)\n    # Initialize current and maximum prices\n    curr_max = X\n    max_price = A * X + B * (X // 10)\n\n    # Initialize array to store all digits\n    digit = [0] * 10\n\n    # Initialize index\n    index = 1\n\n    # Loop over all digits\n    while digit[index] < 10:\n        # Update current price\n        curr_price = A * (index) + (B * (index // 10))\n        if curr_price > max_price:\n            max_price = curr_price\n        # Update current index\n        index += 1\n\n        # Update current price\n        curr_price = A * (index) + (B * (index // 10))\n        if curr_price > max_price:\n            max_price = curr_price\n\n        # Update current index\n        index += 1\n\n        # Update current price\n        curr_price = A * (index) + (B * (index // 10))\n        if curr_price > max_price:\n            max_price = curr_price\n\n        # Update current index\n        index += 1\n\n        # Update current price\n        curr_price = A * (index) + (B * (index // 10))\n        if curr_price > max_price:\n            max_price = curr_price\n\n        # Update current index\n        index += 1\n\n        # Update current price\n        curr_price = A * (index) + (B * (index // 10))\n        if curr_price > max_price:\n            max_price = curr_price\n\n        # Update current index\n        index += 1\n\n        # Update current price\n        curr_price = A * (index) + (B * (index // 10))\n        if curr_price > max_price:\n            max_price = curr_price\n\n        # Update current index\n        index += 1\n\n        # Update current price\n        curr_price = A * (index) + (B * (index // 10))\n        if curr_price > max_price:\n            max_price = curr_price\n\n        # Update current index\n        index += 1\n\n    # Return the maximum price\n    return str(max_price)"
    },
    {
        "number": 4198,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = list(map(int, stdin.split()))\n    max_integer = 0\n    for num in range(1, 10 ** 9 + 1):\n        digit = int(str(num))\n        if A * digit + B * (len(str(digit)) - 1) >= X:\n            max_integer = max(max_integer, num)\n    if max_integer == 0:\n        print(0)\n    else:\n        print(max_integer)\n\nsolution(input())\n"
    },
    {
        "number": 4198,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = map(int, stdin.split())\n    if X <= 0:\n        return '0'\n    max_integer = 9\n    while max_integer > 0:\n        if A * max_integer + B * len(str(max_integer)) + X * 1 >= X * max_integer:\n            return str(max_integer)\n        max_integer -= 1\n\nsolution('10 7 100')\n"
    },
    {
        "number": 4198,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    (A, B, X) = stdin.split()\n    A = int(A)\n    B = int(B)\n    X = int(X)\n    digits = 0\n    integer = 0\n    max_integer = 0\n    for integer in range(X, 10**9):\n        integer_string = str(integer)\n        for digit in integer_string:\n            if int(digit) < int(B):\n                digits += 1\n            elif int(digit) == int(B):\n                digits += 1\n                if digits >= X:\n                    digits = 0\n                    max_integer = max(max_integer, integer)\n                break\n        else:\n            if digits >= X:\n                digits = 0\n                max_integer = max(max_integer, integer)\n            else:\n                digits = 0\n    if max_integer == 0:\n        return \"0\"\n    return str(max_integer)"
    },
    {
        "number": 4198,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, X = stdin.strip().split()\n    A = int(A)\n    B = int(B)\n    X = int(X)\n    if A*A + B*(X-1) + (X-1)*1 > 10^9:\n        return 0\n    if (A-1)*(10^9) + (X-1)*(B-1) + (X-1)*1 == A*X:\n        return A\n    if (A-1)*(10^9) + (X-1)*(B-1) + (X-1)*1 == 10**9:\n        return (A-1)*(10^9)\n    def dp(n, m):\n        if n == 0:\n            return 0\n        if m == 0:\n            return 10**9\n        if m*10 + n > 10**9:\n            return 0\n        if n < A and m*10 + n > 10**9:\n            return dp(n, m)\n        if n >= A and n <= 10**9:\n            if n-1 == A:\n                return m*(10**9)+1\n            if n-1 == 1 and m*10+1 <= 10**9:\n                return m*10+1\n            if n-1 == 1 and m*10+1 > 10**9:\n                return dp(n, m-1)\n            return dp(n, m)\n    return dp(A, B)"
    },
    {
        "number": 4199,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n, k = stdin[0], stdin[1]\n    people = list(map(int, stdin[2].split()))\n\n    # person tall person\n    tallest = max(people)\n    # people tallest person\n    t_p = people.index(tallest)\n\n    # if not enough\n    if k >= tallest:\n        return t_p\n    # if not enough, so can't ride\n    else:\n        return 0"
    },
    {
        "number": 4199,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.split(' ')\n    n, k = int(n), int(k)\n    a = list(map(int, stdin.split(' ')))\n    \n    res = 0\n    for i in range(n):\n        if a[i] - k <= 0:\n            res += 1\n    return str(res)\n\nstdin = input()\nprint(solution(stdin))\n\ndef"
    },
    {
        "number": 4199,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    h = list(map(int, stdin.split()))\n    # max_h = max(h)\n    # min_h = min(h)\n    # cnt = 0\n    # for i in h:\n    #     if i >= min_h and i <= max_h:\n    #         cnt += 1\n    # print(cnt)\n    return str(cnt)\n\nsolution(input())\n\"\"\"\n"
    },
    {
        "number": 4199,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"./test_files/test2.txt\")\n    '2'\n    >>> solution(\"./test_files/test3.txt\")\n    '1'\n    >>> solution(\"./test_files/test4.txt\")\n    '4'\n    \"\"\"\n    # return 0\n\n    n, k = map(int, stdin.split())\n    h = list(map(int, stdin.split()))\n    # print(n, k)\n    # print(h)\n\n    p = []\n    for i in range(n):\n        # print(i, h[i], len(p))\n        if len(p) >= k and p[-1] - h[i] <= k:\n            # print(p[-1], h[i])\n            p.pop()\n        p.append(h[i])\n        # print(p)\n        if len(p) >= k:\n            break\n\n    print(len(p))\n    return len(p)\n"
    },
    {
        "number": 4199,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    stdin = stdin.split()\n    N = int(stdin[0])\n    K = int(stdin[1])\n\n    h_list = stdin[2:]\n\n    height = dict()\n    for i in range(N):\n        height[i+1] = int(h_list[i])\n\n    print(len([1 for x in height.values() if x >= K]))\n\n    return \"Hello, world!\""
    },
    {
        "number": 4199,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    result = 0\n    stdin = stdin.split()\n    N, K = stdin\n    h_lst = list(map(int, stdin[1].split()))\n\n    for i in range(len(h_lst)):\n        if K >= h_lst[i] and K >= i:\n            result += 1\n        else:\n            break\n\n    return result"
    },
    {
        "number": 4199,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4199,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    return solution\n    \"\"\"\n    N, K = stdin.split()\n    N = int(N)\n    K = int(K)\n    h = list(map(int, stdin.split()))\n\n    h.sort(reverse=True)\n    for i in range(len(h)):\n        if h[i] >= K:\n            print(i+1)\n            break\n\n    return ''\n\ndef"
    },
    {
        "number": 4199,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.strip().split())\n    heights = list(map(int, stdin.strip().split()))\n    result = 1\n    for i in range(1, N):\n        if heights[i] >= heights[i-1] + K:\n            result += 1\n    return str(result)"
    },
    {
        "number": 4199,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    height = list(map(int, stdin.split()))\n    count = 0\n    height.sort()\n    for i in range(n):\n        if height[i] >= k:\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 4200,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Return:\n        str: 'Yes' if M popular items can be selected, 'No' otherwise.\n    \"\"\"\n    # your code here\n    N, M = list(map(int, stdin.split()))\n    votes = list(map(int, stdin.split()))\n\n    votes_sum = sum(votes)\n    votes_dict = dict()\n    for vote in votes:\n        votes_dict[vote] = votes_dict.get(vote, 0) + 1\n\n    count = 0\n    for vote in votes:\n        if count == M:\n            return 'No'\n        if vote in votes_dict:\n            if votes_dict[vote] * 4 >= votes_sum:\n                count += 1\n    return 'Yes'\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4200,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    \n    items = sorted(map(int, stdin.split()))\n    \n    # largest possible number of votes in n items\n    # 1/4th of n items can be selected\n    # can't select item with less than 1/4th of total votes\n    votes_by_item = {i: sum(1 if item >= i else 0 for item in items) for i in items}\n\n    vote_to_items = defaultdict(list)\n    for item, votes in votes_by_item.items():\n        vote_to_items[votes].append(item)\n\n    votes_at_most_m_perc = sorted(vote_to_items, reverse=True)[:int(m*4)]\n    if len(votes_at_most_m_perc) == 0:\n        return 'No'\n    votes_at_most_m = sorted(votes_at_most_m_perc, reverse=True)\n    return 'Yes'\n\n\nprint(solution(input()))"
    },
    {
        "number": 4200,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    votes = list(map(int, stdin.split()))\n    votes.sort()\n\n    total = 0\n    for vote in votes:\n        total += vote\n    if total < (M * N) * (1/4):\n        return \"No\"\n    else:\n        return \"Yes\"\n"
    },
    {
        "number": 4200,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(i) for i in stdin.split()]\n    a = list(map(int, stdin.split()))\n\n    max_votes = n\n    min_votes = 1\n\n    for i in a:\n        max_votes = max(max_votes, i)\n\n    for i in range(1, n + 1):\n        if i not in a:\n            min_votes = min(min_votes, i // max_votes)\n\n    if min_votes >= m:\n        return 'Yes'\n    else:\n        return 'No'\n\nprint(solution(input()))\n\n================================================================================\nSum of all elements in a BST\n\nGiven a BST, find and return the sum of all elements in the BST.\n\n-----Constraints-----\n- The number of nodes in the tree is in the range [1, 1000].\n- 1 <= Node.val <= 1000\n- Node.val is unique for each node.\n- Node.val is distinct for all nodes.\n- The tree is non-empty.\n\n-----Sample Input 1-----\n     3\n   2       5\n 1  4  7  8\n\nSample Output 1:\n22\n\n-----Sample Input 2-----\n     9\n   3       5\n 1  4  7  8\n 2   6  10\n\nSample Output 2:\n30\n\n=========================\nFind the frequency of a number in a BST\n\nGiven a BST and a number, return the frequency of that number in the BST. If the number doesn't exist in the BST, return 0.\n\nNote: you can assume the BST is not empty.\n\n-----Constraints-----\n- The number of nodes in the tree is in the range [1, 1000].\n- 1 <= Node.val <= 1000\n- Node.val is unique for each node.\n- Node.val is distinct for all nodes.\n- The tree is non-empty.\n\n-----Sample Input-----\n        9\n   3       5\n 1  4  7  8\n 2   6  10\n\nSample Output-----\n2\n\n================================================================================\nBinary tree right side view\n\nGiven a binary tree, return a list of the nodes that are on the right side of every parent node.\n\n-----Constraints-----\n- The number of nodes in the tree is in the range [1, 1000].\n- 1 <= Node.val <= 1000\n- Node.val is unique for each node.\n- Node.val is distinct for all nodes.\n- The tree is non-empty.\n\n-----Sample Input-----\n        9\n   3       5\n 1  4  7  8\n 2   6  10\n\nSample Output-----\n[1, 3, 6, 10]\n\n=========================================\nBinary tree right side view II\n\nGiven a binary tree, return a list of the nodes that are on the right side of every parent node.\n\n-----Constraints-----\n- The number of nodes in the tree is in the range [1, 1000].\n- 1 <= Node.val <= 1000\n- Node.val is unique for each node.\n- Node.val is distinct for all nodes.\n- The tree is non-empty.\n\n-----Sample Input-----\n        9\n   3       5\n 1  4  7  8\n 2   6  10\n\nSample Output-----\n[1, 3, 6, 10]\n\n================================================================================\nBinary tree height\n\nFind the height of a binary tree.\n\n-----Constraints-----\n- The number of nodes in the tree is in the range [1, 1000].\n- 1 <= Node.val <= 1000\n- Node.val is unique for each node.\n- Node.val is distinct for all nodes.\n- The tree is non-empty.\n\n-----Sample Input-----\n        1\n   3       5\n 1  4  7  8\n 2   6  10\n\nSample Output-----\n3\n\n================================================================================\nBinary tree range sum\n\nFind the range sum of a binary tree.\n\n-----Constraints-----\n- The number of nodes in the tree is in the range [1, 1000].\n- 1 <= Node.val <= 1000\n- Node.val is unique for each node.\n- Node.val is distinct for all nodes.\n- The tree is non-empty.\n\n-----Sample Input-----\n        1\n   3       5\n 1  4  7  8\n 2   6  10\n\nSample Output-----\n16\n\n================================================================================\nBinary tree level order traversal\n\nGiven a binary tree, return the level order traversal of its nodes' values. (ie, from left to right, level by level).\n\n-----Constraints-----\n- The number of nodes in the tree is in the range [1, 1000].\n- 1 <= Node.val <= 1000\n- Node.val is unique for each node.\n- Node.val is distinct for all nodes.\n- The tree is non-empty.\n\n-----Sample Input-----\n        1\n   3       5\n 1  4  7  8\n 2   6  10\n\nSample Output-----\n1\n3\n5\n7\n8\n10\n\n================================================================================\nBinary tree nodes between k and its rightmost ancestor\n\nGiven a binary tree, return the sum of values of all nodes that have a value between L and R (inclusive).\n\n-----Constraints-----\n- The number of nodes in the tree is in the range [1, 1000].\n- 1 <= Node.val <= 1000\n- Node.val is unique for each node.\n- Node.val is distinct for all nodes.\n- The tree is non-empty.\n\n-----Sample Input-----\n        1\n   3       5\n 1  4  7  8\n 2   6  10\n\nSample Output-----\n12\n\n================================================================================\nBalanced BST\n\nGiven a binary tree, determine if it is height-balanced.\n\nNote:\n- The tree will be balanced if and only if the heights of both subtrees of any node never differ by more than 1.\n\n-----Constraints-----\n- The number of nodes in the tree is in the range [1, 100].\n- 1 <= Node.val <= 100\n- Node.val is unique for each node.\n- Node.val is distinct for all nodes.\n- The tree is non-empty.\n\n-----Sample Input-----\n   3\n  / \\\n 1   4\n  /   /\n 2   5\n\nSample Output-----\nTrue\n\n================================================================================\nMaximum Depth of Binary Tree\n\nGiven a binary tree, find its maximum depth.\n\n-----Constraints-----\n- The number of nodes in the tree is in the range [1, 100].\n- 1 <= Node.val <= 100\n- Node.val is unique for each node.\n- Node.val is distinct for all nodes.\n- The tree is non-empty.\n\n-----Sample Input-----\n   3\n  / \\\n 1   4\n  /   /\n 2   5\n\nSample Output-----\n3\n\n================================================================================\nSum of Root to Leaf Binary Numbers\n\nGiven a binary tree, each node has value 0 or 1.  Each root-to-leaf path will sum up all the node values.  For example, the path 0 -> 1 -> 1 represents 1.\n\nGiven the root to a binary tree, return the sum of all root-to-leaf values.\n\n-----Constraints-----\n- The number of nodes in the tree is in the range [1, 1000].\n- 1 <= Node.val <= 1000\n- Node.val is unique for each node.\n- Node.val is distinct for all nodes.\n- The tree is non-empty.\n\n-----Sample Input-----\n    0\n   / \\\n  1  0\n    / \\\n   1  0\n  /     \\\n 1       1\n\nSample Output-----\n6\n\n================================================================================\nDifferent Ways to Add Parentheses\n\nGiven an expression string exp representing a combination of integers and operators, \nreturn all possible results from expanding all the operators and adding parenthesis \naround them.\n\nYou can only use the following list of operators: +, *"
    },
    {
        "number": 4200,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    votes = list(map(int, stdin.split()))\n    votes_by_votes = sorted(zip(votes, range(len(votes))), key=lambda x: x[0], reverse=True)\n    votes_count = 0\n    for i in range(1, m+1):\n        votes_count += votes_by_votes[i - 1][0]\n    if votes_count < (len(votes) // 4 * 4):\n        return 'No'\n    return 'Yes'\n"
    },
    {
        "number": 4200,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    votes = list(map(int, stdin.split()))\n    # popular_items = []\n    popular_items = {votes.pop(0): 1}\n    max_votes = votes[0]\n    while votes:\n        max_votes = max(max_votes, max(popular_items.keys()))\n        if max_votes <= len(popular_items) / 4 * m:\n            return \"No\"\n        popular_items[votes.pop(0)] = 1\n    return \"Yes\"\n"
    },
    {
        "number": 4200,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    votes = list(map(int, stdin.split()))\n    vote_sum = sum(votes)\n    if vote_sum < m * (1 / 4 * m):\n        return \"No\"\n    max_votes = max(votes)\n    max_votes_index = votes.index(max_votes)\n    if max_votes_index < m:\n        return \"No\"\n    votes.pop(max_votes_index)\n    votes.sort(reverse=True)\n    for i in votes:\n        if i <= m:\n            return \"Yes\"\n    return \"No\"\n\n\nprint(solution(input()))"
    },
    {
        "number": 4200,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    _, N, M = stdin.split()\n    N = int(N)\n    M = int(M)\n    A = list(map(int, stdin.split()))\n    votes = [0] * (N+1)\n    for i in A:\n        votes[i] += 1\n    for i in range(N+1):\n        if votes[i] * (M / N) >= 1:\n            print(\"Yes\")\n            return\n    print(\"No\")\n\nsolution(input())\n"
    },
    {
        "number": 4200,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split()\n    n = int(input[0])\n    m = int(input[1])\n    votes = list(map(int, input[2:]))\n\n    # Count the number of votes\n    total_votes = sum(votes)\n    # Find the most popular item\n    max_votes = max(votes)\n\n    # If m popular items can be selected, print Yes; otherwise, print No.\n    if total_votes / (4 * max_votes) <= m:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4200,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A = map(int, stdin.split())\n    N, M = A\n    A = list(A)\n    A = sorted(A, reverse=True)\n    sum_votes = 0\n    num_candidate = 0\n    for i in A:\n        sum_votes += i\n        num_candidate += 1\n        if sum_votes / num_candidate > (1 / 4 * M):\n            return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 4201,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin_data: list = stdin.split()\n    h: int = int(stdin_data[0])\n    w: int = int(stdin_data[1])\n    k: int = int(stdin_data[2])\n    rows: list = stdin_data[3:]\n\n    def answer() -> int:\n        count: int = 0\n        rows_len: int = len(rows)\n        for i in range(rows_len):\n            row: str = rows[i]\n            for j in range(w):\n                if row[j] == '#':\n                    continue\n                if row[j] == '.':\n                    if count > k:\n                        return -1\n                    else:\n                        count += 1\n        return count\n    print(answer())\n"
    },
    {
        "number": 4201,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('''2 3 2\n   ....#\n   ... ###\n    >>> solution('''6 5 2\n   ... #.#\n   ... #.#\n    >>> solution('''10 5 2\n   ... #....\n   ... #.##.\n    >>> solution('''14 11 2\n   ... #........\n   ... #.##...#.\n    >>> solution('''37 8 2\n   ... #.#..#..\n   ... #..#.#.#.\n    >>> solution('''30 30 2\n   ... #........\n   ... ##........\n    >>> solution('''10000 10 2\n   ... #.#..#..\n   ... #..#.#.#.\n    >>> solution('''15 15 2\n   ... #........\n   ... #..#..#..\n    >>> solution('''26 26 2\n   ... #.#..#..\n   ... #..#.#.#.\n    >>> solution('''79 50 2\n   ... #........\n   ... #.##..#.#\n    >>> solution('''8 8 2\n   ... #.##...#.\n    >>> solution('''26 13 2\n   ... #.#..#..\n    >>> solution('''30 25 2\n   ... #.#..#..\n    >>> solution('''55 55 2\n   ... #.#..#..\n    >>> solution('''30 30 2\n   ... #.#...#.#\n    >>> solution('''100 100 2\n   ... #.#.#.#.#\n    >>> solution('''100 50 2\n   ... #.#.#.#.#\n    >>> solution('''150 50 2\n   ... #.#.#.#.#\n    >>> solution('''100 100 2\n   ... #.#.#.#.#\n    >>> solution('''100 100 2\n   ... #.#.#.#.#\n    >>> solution('''100 100 2\n   ... #.#.#.#.#\n    >>> solution('''100 100 2\n   ... #.#.#.#.#\n    >>> solution('''100 100 2\n   ... #.#.#.#.#\n    >>> solution('''100 100 2\n   ... #.#.#.#.#\n    >>> solution('''100 100 2\n   ... #.#.#.#.#\n    >>> solution('''100 100 2\n   ... #.#.#.#.#\n    >>> solution('''100 100 2\n   ... #.#.#.#.#\n    >>> solution('''100 100 2\n   ... #.#.#.#.#\n    >>> solution('''100 100 2\n   ... #.#.#.#.#\n    >>> solution('''100 100 2\n   ... #.#.#.#.#\n    >>> solution('''100 100 2\n   ... #.#.#.#.#\n    >>> solution('''100 100 2\n   ... #.#.#.#.#\n    >>> solution('''100 100 2\n   ... #.#.#.#.#\n    >>> solution('''100 100 2\n   ... #.#.#.#.#\n    >>> solution('''100 100 2\n   ... #.#.#.#.#\n    >>> solution('''100 100 2\n   ... #.#.#.#.#\n    >>> solution('''100 100 2\n   ... #.#.#.#.#\n    >>> solution('''100 100 2\n   ... #.#.#.#.#\n    >>> solution('''100 100 2\n   ... #.#.#.#.#\n    >>> solution('''100 100 2\n   ... #.#.#.#.#\n    >>> solution('''100 100 2\n   ... #.#.#.#.#\n    >>> solution('''100 100 2\n   ... #.#.#.#.#\n    >>> solution('''100 100 2\n   ... #.#.#.#.#\n    >>> solution('''100 100 2\n   ... #.#.#.#.#\n    >>> solution('''100 100 2\n   ... #.#.#.#.#\n    >>> solution('''100 100 2\n   ... #.#.#.#.#\n    >>> solution('''100 100 2\n   ... #.#.#.#.#\n    >>> solution('''100 100 2\n   ... #.#.#.#.#\n    >>> solution('''100 100 2\n   ... #.#.#.#.#\n    >>> solution('''100 100 2\n   ... #.#.#.#.#\n    >>> solution('''100 100 2\n   ... #.#.#.#.#\n    >>> solution('''100 100 2\n   ... #.#.#.#.#\n    >>> solution('''100 100 2\n   ... #.#.#.#.#\n    >>> solution('''100 100 2\n   ... #.#.#.#.#\n    >>> solution('''100 100 2\n   ... #.#.#.#.#\n    >>> solution('''100 100 2\n   ... #.#.#.#.#\n    >>> solution('''100 100 2\n   ... #.#.#.#.#\n    >>> solution('''100 100 2\n   ... #.#.#.#.#\n    >>> solution('''100 100 2\n   ... #.#.#.#.#\n    >>> solution('''100 100 2\n   ... #.#.#.#.#\n    >>> solution('''100 100 2\n   ... #.#.#.#.#\n    >>> solution('''100 100 2\n   ... #.#.#.#.#\n    >>> solution('''100 100 2\n   ... #.#.#.#.#\n    >>> solution('''100 100 2\n   ... #.#.#.#.#\n    >>> solution('''100 100 2\n   ... #.#.#.#.#\n    >>> solution('''100 100 2\n   ... #.#.#.#.#\n    >>> solution('''100 100 2\n   ... #.#.#.#.#\n    >>> solution('''100 100 2\n   ... #.#.#.#.#\n    >>> solution('''100 100 2\n   ... #.#.#.#.#\n    >>> solution('''100 100 2\n   ... #.#.#.#.#\n    >>> solution('''100 100 2\n   ... #.#.#.#.#\n    >>> solution('''100 100 2\n   ... #.#.#.#.#\n    >>> solution('''100 100 2\n   ... #.#.#.#.#\n    >>> solution('''100 100 2\n   ... #.#.#.#.#\n    >>> solution('''100 100 2\n   ... #.#.#.#.#\n    >>> solution('''100 100 2\n   ... #.#.#.#.#\n    >>> solution('''100 100 2\n   ... #.#.#.#.#\n    >>> solution('''100 100 2\n   ... #.#.#.#.#\n    >>> solution('''100 100 2\n   ... #.#.#.#.#\n    >>> solution('''100 100 2\n   ... #.#.#.#.#\n    >>> solution('''100 100 2\n   ... #.#.#.#.#\n    >>> solution('''100 100 2\n   ... #.#.#.#.#\n    >>> solution('''100 100 2\n   ... #.#.#.#.#\n    >>> solution('''100 100 2\n   ... #.#.#.#.#\n    >>> solution('''100 100 2\n   ... #.#.#.#.#\n    >>> solution('''100 100 2\n   ... #.#.#.#.#\n    >>> solution"
    },
    {
        "number": 4201,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    H, W, K = map(int, stdin.split())\n    R = list(map(lambda x: x == \"#\", stdin.split()[0]))\n    C = list(map(lambda x: x == \"#\", stdin.split()[1]))\n\n    print(min(sum(R), sum(C)))\n    return \"\"\n\n\nsolution(\n    \"\"\"2 3 2\n....\n"
    },
    {
        "number": 4201,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    H, W, K = list(map(int, stdin.split()))\n    S = input()\n\n    count_choice = 0\n    for i in range(H):\n        for j in range(W):\n            if S[i * W + j] == '.':\n                continue\n            elif S[i * W + j] == '#':\n                count_choice += 1\n\n    if count_choice == K:\n        return '0'\n    if count_choice > K:\n        return str(count_choice - K)\n\n    count_choice = 0\n    for i in range(H):\n        for j in range(W):\n            if S[i * W + j] == '#':\n                continue\n            elif S[i * W + j] == '.':\n                count_choice += 1\n\n    if count_choice == K:\n        return '0'\n    if count_choice > K:\n        return str(count_choice - K)\n\n    count_choice = 0\n    for i in range(H):\n        for j in range(W):\n            if S[i * W + j] == '#':\n                continue\n            elif S[i * W + j] == '.':\n                count_choice += 1\n\n    if count_choice == K:\n        return '0'\n    if count_choice > K:\n        return str(count_choice - K)\n\n    count_choice = 0\n    for i in range(H):\n        for j in range(W):\n            if S[i * W + j] == '#':\n                continue\n            elif S[i * W + j] == '.':\n                count_choice += 1\n\n    if count_choice == K:\n        return '0'\n    if count_choice > K:\n        return str(count_choice - K)\n\n    return str(K - count_choice)\n"
    },
    {
        "number": 4201,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.rstrip()\n    H, W, K = stdin.split(' ')\n    H = int(H)\n    W = int(W)\n    K = int(K)\n    grid = stdin.split('\\n')\n\n    rows = []\n    cols = []\n    for i in range(H):\n        row = []\n        for j in range(W):\n            row.append(grid[i][j])\n        rows.append(row)\n\n    for i in range(H):\n        col = []\n        for j in range(W):\n            col.append(grid[i][j])\n        cols.append(col)\n\n    ans = 0\n    for r in rows:\n        for c in cols:\n            num = count_black_sq(r) + count_black_sq(c)\n            ans = max(ans, num)\n    return str(ans)\n\n\ndef"
    },
    {
        "number": 4201,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    H, W, K = map(int, stdin.split())\n    c = stdin.split('\\n')\n    res = 0\n    for i in range(H):\n        for j in range(W):\n            if c[i][j] == '#':\n                continue\n            if c[i][j] == '.':\n                res += 1\n            if c[i][j] == '.':\n                res += 1\n            if i < H - 1:\n                if c[i + 1][j] == '.':\n                    res += 1\n            if j < W - 1:\n                if c[i][j + 1] == '.':\n                    res += 1\n            if i < H - 1 and j < W - 1:\n                if c[i + 1][j + 1] == '.':\n                    res += 1\n            if i < H - 1 and j > 0:\n                if c[i + 1][j - 1] == '.':\n                    res += 1\n            if j > 0:\n                if c[i][j - 1] == '.':\n                    res += 1\n            if i > 0:\n                if c[i - 1][j] == '.':\n                    res += 1\n    return res\n"
    },
    {
        "number": 4201,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    H, W, K = stdin[0], stdin[1], stdin[2]\n    h_choice = list(stdin[3])\n    w_choice = list(stdin[4])\n    h_choice.sort()\n    w_choice.sort()\n\n    result = 0\n    while K!= 0:\n        if K < 0:\n            break\n        for i in range(0, int(H)):\n            for j in range(0, int(W)):\n                if (i + j) % 2 == 0:\n                    h_choice[i] = \"#\"\n                else:\n                    h_choice[i] = \".\"\n                if (i + j) % 3 == 0:\n                    w_choice[j] = \"#\"\n                else:\n                    w_choice[j] = \".\"\n        K -= 1\n        result += 1\n    return str(result)\n\n\nprint(solution(input()))\n\n------SOLUTION------"
    },
    {
        "number": 4201,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    h, w, k = map(int, stdin.split())\n    ans = 0\n    for i in range(1, h+1):\n        for j in range(1, w+1):\n            if (\n                i == 1 and j % 2 == 1\n            ) or (\n                i == 1 and j == w and i % 2 == 1\n            ) or (\n                i == h and j % 2 == 1\n            ) or (\n                i == h and j == w\n            ) or (\n                i % 2 == 0 and j % 2 == 0\n            ):\n                ans += 1\n    return str(ans)\n"
    },
    {
        "number": 4201,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    H, W, K = map(int, stdin.split())\n    if K == 0:\n        print(0)\n        return\n\n    black = set()\n    white = set()\n\n    # \uc5ec\ub7ec \uac00\uc9c0 \uacbd\uc6b0\uc758 \uc218\ub97c \uad6c\ud558\uae30 \uc704\ud574\uc11c \ubc30\uc5f4\uc744 \uc0ac\uc6a9\ud558\uc5ec \uc7ac\uadc0 \ud638\ucd9c\uc744 \uad6c\ud604\n    # \ud589\uc740 \uc138\ub85c, \uc5f4\uc740 \uac00\ub85c\n    def count_recursive(index: int, row: int, col: int, index_row: int, index_col: int, count: int) -> None:\n        # \uc774\ubbf8 \ub2e4 \ucc44\uc6cc\uc84c\ub2e4\uba74 \ud310\ub2e8\uc744 \ud558\uc9c0 \uc54a\uc74c\n        if index == H * W:\n            return\n\n        # \uc138\ub85c\ub85c \uc790\ub9ac \ucc44\uc6cc\uc9c0\uace0 \uac00\ub85c\ub85c \ub118\uc5b4\uac00\uae30\n        if index == H * W - 1:\n            # \ubc30\uc5f4\uc758 \uac01 \uc6d0\uc18c\ub4e4\uc740. \uc640 #\uc744 \ud3ec\ud568\ud558\uace0 \uc788\uc73c\uba70 \uc774\uac83\uc744 \uc758\ubbf8\n            # \uc815\uc0ac\uac01\ud615\uc744 \ucc44\uc6cc\uc9c0\uace0 \uc788\ub2e4\uace0 \ubcf4\uc784\n            for i in range(H):\n                for j in range(W):\n                    if index_row == i and index_col == j:\n                        continue\n                    if stdin[i * W + j] == '.':\n                        black.add((i, j))\n                    if stdin[i * W + j] == '#':\n                        white.add((i, j))\n\n            # \ub2e4 \ub2e4 \ucc44\uc6cc\uc9c4 \uacbd\uc6b0\uc758 \uc218\ub97c \uad6c\ud55c\ub2e4\n            if len(black) == 0 and len(white) == 0:\n                count += 1\n\n            # \ub450 \uac1c \uc774\uc0c1\uc758 \uc138\ub85c\uc758 \uacbd\uc6b0\uc758 \uc218\ub97c \uad6c\ud55c\ub2e4\n            if len(black) >= 2 and len(white) >= 2:\n                count += (len(black) * (len(black) - 1) // 2)\n\n            # \ub450 \uac1c \uc774\uc0c1\uc758 \uac00\ub85c\uc758 \uacbd\uc6b0\uc758 \uc218\ub97c \uad6c\ud55c\ub2e4\n            if len(black) >= 2 and len(white) >= 2:\n                count += (len(white) * (len(white) - 1) // 2)\n\n            return\n\n        # \uac00\ub85c \ub85c \uc790\ub9ac \ucc44\uc6cc\uc9c0\uace0 \ube44\uad50\ub97c \uc704\ud574 index_col\uc744 \uc99d\uac00\uc2dc\ucf1c\uc900\ub2e4\n        index_col += 1\n\n        # \ub2e4\ub978 \uc0c9\uc744 \ud3ec\ud568\ud558\uace0 \uc788\ub294 \uc790\ub9ac\ub97c \ud45c\uc2dc\ud558\uae30\n        for i in range(row, H):\n            for j in range(col, W):\n                if stdin[i * W + j] == '.':\n                    black.add((i, j))\n                if stdin[i * W + j] == '#':\n                    white.add((i, j))\n\n        # \uac00\ub85c\ub85c \uc790\ub9ac \ucc44\uc6cc\uc9c0\uace0 \ub05d\uae4c\uc9c0 \ub2e4 \ub2e4\uc2dc \uc790\ub9ac \ucc44\uc6cc\uc9c4\ub2e4\n        for i in range(row, H):\n            for j in range(col, W):\n                if stdin[i * W + j] == '.':\n                    black.add((i, j))\n                if stdin[i * W + j] == '#':\n                    white.add((i, j))\n\n        # \uc138\ub85c \ub85c \uc790\ub9ac \ucc44\uc6cc\uc9c0\uace0 \ub2e4 \ub2e4\uc2dc \uc790\ub9ac \ucc44\uc6cc\uc9c4\ub2e4\n        for i in range(row, H):\n            for j in range(col, W):\n                if stdin[i * W + j] == '.':\n                    black.add((i, j))\n                if stdin[i * W + j] == '#':\n                    white.add((i, j))\n\n        # \ub2e4 \ub2e4 \uc790\ub9ac \ucc44\uc6cc\uc9c4\ub2e4\n        index_row += 1\n\n        # \ub2e4\ub978 \uc0c9\uc744 \ud3ec\ud568\ud558\uace0 \uc788\ub294 \uc790\ub9ac\ub97c \ud45c\uc2dc\ud558\uae30\n        for i in range(row, H):\n            for j in range(col, W):\n                if stdin[i * W + j] == '.':\n                    black.add((i, j))\n                if stdin[i * W + j] == '#':\n                    white.add((i, j))\n\n        # \ub450 \uac1c \uc774\uc0c1\uc758 \uc138\ub85c\uc758 \uacbd\uc6b0\uc758 \uc218\ub97c \uad6c\ud55c\ub2e4\n        if len(black) >= 2 and len(white) >= 2:\n            count += (len(black) * (len(black) - 1) // 2)\n\n        # \ub450 \uac1c \uc774\uc0c1\uc758 \uac00\ub85c\uc758 \uacbd\uc6b0\uc758 \uc218\ub97c \uad6c\ud55c\ub2e4\n        if len(black) >= 2 and len(white) >= 2:\n            count += (len(white) * (len(white) - 1) // 2)\n\n        # \uac00\ub85c \ub85c \uc790\ub9ac \ucc44\uc6cc\uc9c0\uace0 \ub2e4 \ub2e4\uc2dc \uc790\ub9ac \ucc44"
    },
    {
        "number": 4201,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    H, W, K = map(int, stdin.split())\n    grid = stdin.split('\\n')\n    squares = [(i, j) for i in range(H) for j in range(W)]\n    count = 0\n\n    for i in range(H):\n        for j in range(W):\n            if grid[i][j] == '#':\n                continue\n            if (i, j) in squares:\n                continue\n            for x in range(i, H):\n                for y in range(j, W):\n                    if grid[x][y] == '#':\n                        break\n                    if (x, y) in squares:\n                        break\n                else:\n                    squares.append((i, j))\n                    break\n            else:\n                squares.append((i, j))\n    squares = sorted(squares)\n    for i in range(H):\n        for j in range(W):\n            if (i, j) in squares:\n                count += 1\n                squares.remove((i, j))\n    return str(count)\n"
    },
    {
        "number": 4202,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    L, R = map(int, stdin.split())\n    return str(int(L * R) % 2019)"
    },
    {
        "number": 4202,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    L, R = map(int, stdin.split())\n    i, j = 2020, 2021\n    ans = 2\n    while L < i <= R:\n        if i > R:\n            ans = min(ans, (j - L) % 2019)\n            i += 1\n        elif i < L:\n            ans = min(ans, ((R - j) % 2019) + (j - L))\n            j += 1\n        elif i == L:\n            ans = min(ans, ((R - j) % 2019) + (j - L))\n            break\n    return str(ans)\n\"\"\"\n\n\"\"\"\n    i = 2020\n    j = 2021\n    ans = 2\n    while i < j:\n        if i > R:\n            ans = min(ans, (j - L) % 2019)\n            i += 1\n        elif i < L:\n            ans = min(ans, ((R - j) % 2019) + (j - L))\n            j += 1\n        elif i == L:\n            break\n    return str(ans)\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4202,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    l, r = map(int, stdin.split())\n    return str(min((i * j) % 2019 for i in range(l, r+1) for j in range(i, r+1)))\n"
    },
    {
        "number": 4202,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('2020 2040')\n    2\n    \"\"\"\n    l, r = map(int, stdin.split())\n    while l < r:\n        mid = (l + r) // 2\n        if (mid + 1) % 2019 == 0:\n            r = mid\n        else:\n            l = mid + 1\n    return l\n"
    },
    {
        "number": 4202,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    [L, R] = list(map(int, stdin.split()))\n    i = 2020\n    j = 2040\n    i %= j\n    while i > 0:\n        i -= j\n        if i % j == 0:\n            return str(j)\n        j %= j\n    return str(i)"
    },
    {
        "number": 4202,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip().split()\n    l = int(stdin[0])\n    r = int(stdin[1])\n    print(2 * l)\n    return \"2\"\n"
    },
    {
        "number": 4202,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4202,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    l = int(stdin[0])\n    r = int(stdin[1])\n    print((l * r) % 2019)\n    return (l * r) % 2019"
    },
    {
        "number": 4202,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Read a line of input from stdin and split it into a list.\n    a, b = map(int, stdin.split())\n\n    # Compute the answer\n    i, j = 2020, 2021\n    while i <= j:\n        if (i * j) % 2019 == 0:\n            return str(i * j)\n        i += 1\n        j -= 1"
    },
    {
        "number": 4202,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''2020 2040''')\n    2\n    >>> solution('''2020 2041''')\n    1\n    \"\"\"\n    L, R = map(int, stdin.strip().split())\n    for i in range(L, R + 1):\n        if (i * 2018) % 2019 == 0:\n            print(i)\n            return\n    print(0)\n"
    },
    {
        "number": 4203,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if len(s)!= 4:\n        return \"WA\"\n    if s[0].isupper():\n        return \"WA\"\n    elif s[2] == 'C':\n        return \"AC\"\n    elif s[2]!= 'A':\n        return \"WA\"\n\n    return \"AC\""
    },
    {
        "number": 4203,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    for i in stdin:\n        if i.isupper():\n            print(\"WA\")\n            return\n        if i.islower():\n            print(\"WA\")\n            return\n        if i == \"a\":\n            print(\"AC\")\n            return\n        if i == \"c\":\n            print(\"AC\")\n            return\n    print(\"WA\")"
    },
    {
        "number": 4203,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return 'AC' if stdin[0] == stdin[1] == stdin[2] == stdin[3] == 'A' else 'WA'"
    },
    {
        "number": 4203,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"AC\" if is_valid(stdin) else \"WA\"\n\n\ndef"
    },
    {
        "number": 4203,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    stdin = stdin.strip()\n    if stdin[0].islower() and stdin[2].isupper() and stdin[3].lower() == 'c':\n        return 'AC'\n    else:\n        return 'WA'\n\n\nsolution(input())\n\ndef"
    },
    {
        "number": 4203,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    if stdin[0].islower():\n        return 'WA'\n    count = 0\n    for i in range(1, len(stdin)):\n        if stdin[i] == stdin[i - 1].lower():\n            count += 1\n        else:\n            break\n    if count == len(stdin) - 2:\n        return 'AC'\n    else:\n        return 'WA'\n"
    },
    {
        "number": 4203,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4203,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n\n    if s[0].isupper():\n        if len(s) == 1:\n            return 'AC'\n        else:\n            return 'WA'\n\n    if len(s) == 1:\n        return 'WA'\n\n    cnt = 0\n    for i in range(len(s) - 1):\n        if s[i].isupper() and s[i + 1].islower():\n            cnt += 1\n        if s[i].islower() and s[i + 1].isupper():\n            cnt += 1\n\n    if cnt == 1:\n        return 'AC'\n    else:\n        return 'WA'\n"
    },
    {
        "number": 4203,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin) < 4:\n        return \"WA\"\n    for i in range(3, len(stdin)):\n        if stdin[i] == stdin[i - 2] == stdin[i - 1]:\n            if stdin.count(stdin[i]) == 1:\n                return \"AC\"\n            else:\n                return \"WA\"\n        else:\n            if stdin[i] == stdin[i - 2]!= stdin[i - 1]:\n                return \"AC\"\n            else:\n                return \"WA\"\n\n\nsolution(input())\n\"\"\""
    },
    {
        "number": 4203,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # TODO: Write your code here\n    stdin = stdin.lower()\n    if stdin[0] == 'a' and stdin.find('c', 1, -1)!= -1:\n        return 'AC'\n    return 'WA'\n"
    },
    {
        "number": 4204,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    S, K = stdin.split()\n    # print(S, K)\n    S = list(S)\n    for i in range(0,len(S)-1,2):\n        S[i] = str(int(S[i])*2)\n    S = \"\".join(S)\n    S = list(S)\n    for i in range(0,len(S)-1,3):\n        S[i] = str(int(S[i])*3)\n    S = \"\".join(S)\n    S = list(S)\n    for i in range(0,len(S)-1,4):\n        S[i] = str(int(S[i])*4)\n    S = \"\".join(S)\n    S = list(S)\n    for i in range(0,len(S)-1,5):\n        S[i] = str(int(S[i])*5)\n    S = \"\".join(S)\n    S = list(S)\n    for i in range(0,len(S)-1,6):\n        S[i] = str(int(S[i])*6)\n    S = \"\".join(S)\n    S = list(S)\n    for i in range(0,len(S)-1,7):\n        S[i] = str(int(S[i])*7)\n    S = \"\".join(S)\n    S = list(S)\n    for i in range(0,len(S)-1,8):\n        S[i] = str(int(S[i])*8)\n    S = \"\".join(S)\n    S = list(S)\n    for i in range(0,len(S)-1,9):\n        S[i] = str(int(S[i])*9)\n    S = \"\".join(S)\n    S = list(S)\n    for i in range(0,len(S)-1,10):\n        S[i] = str(int(S[i])*10)\n    S = \"\".join(S)\n    S = list(S)\n    for i in range(0,len(S)-1,11):\n        S[i] = str(int(S[i])*11)\n    S = \"\".join(S)\n    S = list(S)\n    for i in range(0,len(S)-1,12):\n        S[i] = str(int(S[i])*12)\n    S = \"\".join(S)\n    S = list(S)\n    for i in range(0,len(S)-1,13):\n        S[i] = str(int(S[i])*13)\n    S = \"\".join(S)\n    S = list(S)\n    for i in range(0,len(S)-1,14):\n        S[i] = str(int(S[i])*14)\n    S = \"\".join(S)\n    S = list(S)\n    for i in range(0,len(S)-1,15):\n        S[i] = str(int(S[i])*15)\n    S = \"\".join(S)\n    S = list(S)\n    for i in range(0,len(S)-1,16):\n        S[i] = str(int(S[i])*16)\n    S = \"\".join(S)\n    S = list(S)\n    for i in range(0,len(S)-1,17):\n        S[i] = str(int(S[i])*17)\n    S = \"\".join(S)\n    S = list(S)\n    for i in range(0,len(S)-1,18):\n        S[i] = str(int(S[i])*18)\n    S = \"\".join(S)\n    S = list(S)\n    for i in range(0,len(S)-1,19):\n        S[i] = str(int(S[i])*19)\n    S = \"\".join(S)\n    S = list(S)\n    for i in range(0,len(S)-1,20):\n        S[i] = str(int(S[i])*20)\n    S = \"\".join(S)\n    S = list(S)\n    for i in range(0,len(S)-1,21):\n        S[i] = str(int(S[i])*21)\n    S = \"\".join(S)\n    S = list(S)\n    for i in range(0,len(S)-1,22):\n        S[i] = str(int(S[i])*22)\n    S = \"\".join(S)\n    S = list(S)\n    for i in range(0,len(S)-1,23):\n        S[i] = str(int(S[i])*23)\n    S = \"\".join(S)\n    S = list(S)\n    for i in range(0,len(S)-1,24):\n        S[i] = str(int(S[i])*24)\n    S = \"\".join(S)\n    S = list(S)\n    for i in range(0,len(S)-1,25):\n        S[i] = str(int(S[i])*25)\n    S = \"\".join(S)\n    S = list(S)\n    for i in range(0,len(S)-1,26):\n        S[i] = str(int(S[i])*26)\n    S = \"\".join(S)\n    S = list(S)\n    for i in range(0,len(S)-1,27):\n        S[i] = str(int(S[i])*27)\n    S = \"\".join(S)\n    S = list(S)\n    for i in range(0,len(S)-1,28):\n        S[i] = str(int(S[i])*28)\n    S = \"\".join(S)\n    S = list(S)\n    for i in range(0,len(S)-1,29):\n        S[i] = str(int(S[i])*29)\n    S = \"\".join(S)\n    S = list(S)\n    for i in range(0,len(S)-1,30):\n        S[i] = str(int(S[i])*30)\n    S = \"\".join(S)\n    S = list(S)\n    for i in range(0,len(S)-1,31):\n        S[i] = str(int(S[i])*31)\n    S = \"\".join(S)\n    S = list("
    },
    {
        "number": 4204,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    k = int(stdin)\n    s = s[:k]\n    s = int(s)\n    n = int(1e15)\n    t = int(5 * 10 ** 15)\n    day = (s // n)\n    step = (day - 1) * n\n    print(s - step)\n    return s - step\nsolution(input())"
    },
    {
        "number": 4204,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    string_until_five_th_day = stdin\n    for _ in range(5):\n        string_until_five_th_day = str(int(string_until_five_th_day) * 2)[::-1]\n    print(string_until_five_th_day[len(string_until_five_th_day) - K])\n    return stdin\n"
    },
    {
        "number": 4204,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    S, K = stdin.split()\n    S = list(S)\n    indices = []\n    prev = 0\n    res = ''\n    for i in range(len(S)):\n        if S[i] == '1':\n            S[i] = '0'\n            res = res + str(S[i])\n        elif S[i] == '0':\n            S[i] = '1'\n            res = res + str(S[i])\n        elif S[i] == '22':\n            S[i] = '1'\n            res = res + str(S[i])\n        elif S[i] == '333':\n            S[i] = '2'\n            res = res + str(S[i])\n        elif S[i] == '444':\n            S[i] = '3'\n            res = res + str(S[i])\n        elif S[i] == '555':\n            S[i] = '4'\n            res = res + str(S[i])\n        elif S[i] == '666':\n            S[i] = '5'\n            res = res + str(S[i])\n        elif S[i] == '777':\n            S[i] = '6'\n            res = res + str(S[i])\n        elif S[i] == '888':\n            S[i] = '7'\n            res = res + str(S[i])\n        elif S[i] == '9999':\n            S[i] = '8'\n            res = res + str(S[i])\n        elif S[i] == '1':\n            S[i] = '9'\n            res = res + str(S[i])\n    indices.append(prev)\n    if int(K) > len(S):\n        return '-1'\n    for i in range(int(K)):\n        prev = indices[i]\n        res = res + str(S[prev])\n        S[prev] = str(int(S[prev]) + 1)\n    return res[:int(K)]\n\n\nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 4204,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin\n    k = int(stdin)\n    while k >= 10**15:\n        S = str(int(S) * 2)\n        k -= len(S)\n    return S[k]\n    \n"
    },
    {
        "number": 4204,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split('\\n')\n    s = input[0]\n    k = int(input[1])\n    total = 0\n    while total < k:\n        for i in range(len(s)):\n            if i % 2 == 0:\n                s = s[:i] + str(int(s[i]) * 2) + s[i + 1:]\n            else:\n                s = s[:i] + str(int(s[i]) * 3) + s[i + 1:]\n        total += 1\n    return s[:k]\n\nsolution(\"123456\\n15\")"
    },
    {
        "number": 4204,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin.split()[1])\n    stdin = stdin.split()[0]\n    length = len(stdin)\n    for i in range(5):\n        stdin = stdin.replace('22', '222')\n        stdin = stdin.replace('333', '333')\n        stdin = stdin.replace('4444', '4444')\n        stdin = stdin.replace('55555', '5555')\n        stdin = stdin.replace('66666', '666')\n        stdin = stdin.replace('77777', '777')\n        stdin = stdin.replace('88888888', '888')\n        stdin = stdin.replace('99999999', '9')\n    return stdin[K - 1]"
    },
    {
        "number": 4204,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    #stdin = '1214'\n    #stdin = '4'\n    s, k = stdin.split()\n    s = int(s)\n    k = int(k)\n\n    #print(s, k)\n    \n    if s <= 0:\n        return stdin\n    \n    while k > 0 and k <= 1000000000:\n        k = k * 10\n    \n    #print(k)\n    \n    \n    #cur = s\n    cur = 0\n    while k > 0:\n        cur = cur * 10 + s % 10\n        s = s // 10\n        k -= 1\n    #print(cur)\n    \n    # k = 0\n    # print(cur)\n    # while k <= 1000000000:\n    #     cur = cur * 10 + s % 10\n    #     s = s // 10\n    #     k += 1\n    #     print(cur)\n\n    return str(cur)\n    #return ''.join(str(cur))\n    #return str(cur)\n\nprint(solution(input()))"
    },
    {
        "number": 4204,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[4]"
    },
    {
        "number": 4204,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s: str = stdin\n    for k in range(50000000):\n        s = s[1:] + s[:1]\n        s = s[:len(s) - int(str(k)) * 10**15 + 1]\n    return s[len(s) - int(str(k)) * 10**15 + 1]"
    },
    {
        "number": 4205,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    p = [int(x) for x in stdin.split()]\n    for i in range(N):\n        for j in range(N):\n            if p[i] < p[j]:\n                p[i], p[j] = p[j], p[i]\n    if p == sorted(p):\n        return 'YES'\n    return 'NO'\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4205,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    perms = list(map(int, stdin.strip().split()))\n\n    for i in range(len(perms)):\n        for j in range(len(perms)):\n            if i!= j:\n                if perms[i] > perms[j]:\n                    perms[i], perms[j] = perms[j], perms[i]\n                    break\n\n    if perms == sorted(perms):\n        return 'YES'\n    else:\n        return 'NO'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4205,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N % 2 == 0:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n\nsolution(input())\n"
    },
    {
        "number": 4205,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    data = [int(i) for i in stdin.split(\" \")]\n    data.sort()\n    for i in range(n):\n        if data[i]!= i + 1:\n            return \"NO\"\n    return \"YES\"\n\nprint(solution(input()))\n\nSample TestCase 1\nInput\n6\n5 2 3 4 1\nOutput\nYES\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4205,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    p = list(map(int, stdin.split()))\n    if len(p)!= n:\n        return 'NO'\n    else:\n        p.sort()\n        if p == list(range(1, n + 1)):\n            return 'YES'\n        elif p == list(range(n - 1, 0, -1)):\n            return 'YES'\n        else:\n            return 'NO'\nsolution(input())\n"
    },
    {
        "number": 4205,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    p = list(map(int, stdin.split()))\n    for i in range(N - 1):\n        for j in range(i, N):\n            if p[i] > p[j]:\n                p[i], p[j] = p[j], p[i]\n                break\n    return 'YES' if sorted(p) == p else 'NO'\n"
    },
    {
        "number": 4205,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    if a == sorted(a):\n        return 'YES'\n    else:\n        return 'NO'\n\nsolution(input())\n\nhttps://www.hackerrank.com/challenges/permutation-equation/problem\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4205,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split(\" \")\n    N = int(input[0])\n    permutation = list(map(int, input[1]))\n    permutation.sort()\n    if permutation == list(range(1, N + 1)):\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4205,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin\n    input_data = input_data.strip().split()\n    N = input_data[0]\n    N = int(N)\n    p = input_data[1:]\n\n    for i in range(N):\n        for j in range(i + 1, N):\n            if p[i] > p[j]:\n                p[i], p[j] = p[j], p[i]\n    return 'YES' if ''.join(p) == '1234567' else 'NO'\n\n\nprint(solution(input()))"
    },
    {
        "number": 4205,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    _, p = stdin.split()\n    p = list(map(int, p))\n    p.sort()\n    p.reverse()\n    return \"YES\" if p == list(range(1, len(p) + 1)) else \"NO\""
    },
    {
        "number": 4206,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin\n    input = input.strip()\n    # Take off the 0s.\n    input = input.lstrip(\"0\")\n    # Remove the zero at the start.\n    input = input[1:]\n    # Now, get rid of any leading 0s.\n    while input[0] == \"0\":\n        input = input[1:]\n    # Now, get rid of any trailing 0s.\n    while input[-1] == \"0\":\n        input = input[:-1]\n    # Get the length of the input.\n    length = len(input)\n    # Run the code.\n    return get_longest_divisors(input, length)\n\n\ndef"
    },
    {
        "number": 4206,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    max_num = 0\n    while len(s) > 0:\n        temp = set()\n        for i in range(len(s)):\n            if len(s[:i]) == len(set(s[:i])):\n                temp.add(s[:i])\n                break\n            else:\n                s = s[i+1:]\n                temp = temp.union(s)\n        if len(temp) > max_num:\n            max_num = len(temp)\n    return max_num\n\n\nprint(solution(input()))"
    },
    {
        "number": 4206,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin\n    # 1 digit is divisible by 3\n    n = list(n)\n    n = [int(i) for i in n]\n    res = 0\n    for i in range(len(n)):\n        for j in range(i + 1, len(n)):\n            if n[i] % 3 == 0 and n[j] % 3 == 0:\n                res += 1\n    return str(res)\n"
    },
    {
        "number": 4206,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n   ...\n    \"\"\"\n    return sum([i for i in range(len(stdin)) if i % 3 == 0])\n"
    },
    {
        "number": 4206,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = list(stdin)\n    maxi = 0\n    if len(s) < 2:\n        return s\n    for i in range(len(s)):\n        for j in range(i + 1, len(s)):\n            s1 = ''\n            s2 = ''\n            k = i\n            for l in range(len(s)):\n                if l <= i or l >= j:\n                    s1 += s[l]\n                else:\n                    s2 += s[l]\n            if len(s1) > 0 and len(s2) > 0:\n                if len(s1) > len(s2):\n                    s1 = s1[1:]\n                    s2 = s2[:-1]\n                l = len(s1) + len(s2)\n                if l > maxi:\n                    maxi = l\n    return maxi\n"
    },
    {
        "number": 4206,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Given a number, compute the maximum number of numbers that are divisible by 3.\n\n    Parameters\n    ----------\n    stdin : str\n        The input number, which is guaranteed to be a string.\n\n    Returns\n    -------\n    str\n        The maximum number of numbers that are divisible by 3.\n    \"\"\"\n    s = int(stdin)\n    digits = 0\n    while s!= 0:\n        s, d = divmod(s, 10)\n        digits += d\n    if digits == 0:\n        return digits\n    div = 0\n    for i in range(digits):\n        if s % 3 == 0:\n            div += 1\n        s //= 10\n    return div\n"
    },
    {
        "number": 4206,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n: str = stdin\n    n = int(n)\n    result: int = 0\n    if n <= 2:\n        if n == 1:\n            return str(n) + '\\n' + '1\\n'\n        elif n == 0:\n            return str(n) + '\\n' + '0\\n'\n    n = str(n)\n    for index in range(len(n)):\n        if index == 0:\n            if n[index] == '3' and n[index + 1] == '1':\n                result += 1\n        elif index == len(n) - 1:\n            if n[index] == '3' and n[index - 1] == '1':\n                result += 1\n        elif n[index] == '0':\n            if n[index - 1] == '3' and n[index + 1] == '1':\n                result += 1\n        elif n[index] == '1':\n            if n[index - 1] == '3' and n[index + 1] == '1':\n                result += 1\n    return str(result) + '\\n' + str(result + 1)\n"
    },
    {
        "number": 4206,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = int(stdin)\n    if s == 0:\n        return str(0)\n\n    digits = str(s)\n    if s == 1:\n        return str(0)\n\n    # convert to list of ints\n    digits = [int(x) for x in digits]\n    # sum of numbers divisible by 3\n    number_of_divisible = 0\n\n    # cut between adjacent digits\n    for i in range(1, len(digits)):\n        # get number of cuts needed\n        number_of_cuts = len(digits) - i\n        # go through each cut\n        for j in range(0, number_of_cuts):\n            # get new digits with cuts\n            new_digits = digits[j:i + j]\n            # get divisible by 3\n            if (i + j + 1) % 3 == 0 and 3 in [int(x) for x in new_digits]:\n                number_of_divisible += 1\n\n    return str(number_of_divisible)\n\n\ndef"
    },
    {
        "number": 4206,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return str(n)\n    elif n == 1:\n        return str(n)\n    elif n == 2:\n        return \"1\"\n    s = str(n)\n    if len(s) <= 3:\n        return str(n)\n    if len(s) > 3:\n        if s[0] == '0':\n            return solution(s[1:])\n        else:\n            return solution(s[1:])\nsolution(\"0\")\nsolution(\"01\")\nsolution(\"1\")\nsolution(\"001\")\nsolution(\"011\")\nsolution(\"0121\")\nsolution(\"012\")\nsolution(\"0122\")\nsolution(\"13\")\nsolution(\"12\")\nsolution(\"11\")\nsolution(\"101\")\nsolution(\"11111\")\nsolution(\"01110111\")\nsolution(\"1000000000\")\nsolution(\"1000000000000000000000000000000000\")\nsolution(\"12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890\")\nsolution(\"1000000000000000000000000000000000\")\n"
    },
    {
        "number": 4206,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    if len(s) == 1:\n        return 0\n    res = 1\n    for i in range(1, len(s) + 1):\n        res *= i\n        if int(s[:i]) % 3 == 0 and i <= len(s):\n            res -= int(s[i - 1]) // 3\n    return str(res)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4207,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    max_zeros = 0\n    answer = 0\n    for i in range(a):\n        max_zeros = max(max_zeros, a[i] + b[i])\n        answer += max_zeros\n    return str(answer)"
    },
    {
        "number": 4207,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1].split()))\n    b = list(map(int, stdin.split()[2].split()))\n    return str(max([d*a[i] + b[i] for i, d in enumerate(b)]))\n"
    },
    {
        "number": 4207,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1]))\n    b = list(map(int, stdin.split()[2]))\n    # d = -2\n    # a = [1, 2, -1]\n    # b = [4, -7, 11, 3]\n    # d = -\\frac{1}{13}\n    # a = [-1, 2, -1]\n    # b = [-12, 6, -9]\n    # d = 6\n    d = -6\n    c = [0]*n\n    for i in range(n):\n        c[i] = d*a[i] + b[i]\n    zeros = 0\n    for i in range(n):\n        if c[i] == 0:\n            zeros += 1\n    return str(zeros)\n"
    },
    {
        "number": 4207,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 1 2 3\n   ... 2 4 7\n   ... ''')\n    '2'\n    >>> solution('''\n   ... 1 2 3\n   ... 2 4 7\n   ... ''')\n    '2'\n    >>> solution('''\n   ... 1 2 3\n   ... 2 4 7\n   ... ''')\n    '2'\n    >>> solution('''\n   ... 1 2 -1\n   ... -6 -12 6\n   ... ''')\n    '3'\n    >>> solution('''\n   ... 13 37 39\n   ... 1 2 3\n   ... ''')\n    '0'\n    >>> solution('''\n   ... 13 37 39\n   ... 1 2 3\n   ... ''')\n    '0'\n    >>> solution('''\n   ... 13 37 39\n   ... 1 2 -1\n   ... ''')\n    '3'\n    \"\"\"\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    ans = 0\n    d = -1\n    for i in range(len(b)):\n        ans += abs(b[i] * a[i])\n        if ans > d:\n            d = ans\n    return str(d)\n"
    },
    {
        "number": 4207,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    b = [*map(int, stdin.split())]\n    d = -1\n    maxzeros = 0\n    for i in range(n):\n        if b[i] == 0:\n            maxzeros += 1\n            continue\n        t = a[i] * b[i]\n        while t!= 0:\n            if t < 0:\n                t += 10\n            if d < 0:\n                d = int(t / -d)\n            else:\n                d *= int(t / d)\n            t -= d\n        if maxzeros < d:\n            maxzeros = d\n    return maxzeros"
    },
    {
        "number": 4207,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    d = -1\n    best = 0\n    while d <= -n + 1:\n        zeros = 0\n        result = 0\n        for i in range(n):\n            result += a[i] * b[i]\n            if result == 0:\n                zeros += 1\n        if zeros >= best:\n            best = zeros\n            d = -1\n        else:\n            d += 1\n    return str(best)\n"
    },
    {
        "number": 4207,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    a: List[int] = sorted([int(i) for i in stdin.split(' ') if int(i) >= -10 ** 9 and int(i) <= 10 ** 9])\n    b: List[int] = sorted([int(i) for i in stdin.split(' ') if int(i) >= -10 ** 9 and int(i) <= 10 ** 9])\n\n    def dp(i: int, j: int, d: int) -> int:\n        if i < 0 or j < 0 or i >= n or j >= n:\n            return 0\n        if a[i] * d + b[j] == 0:\n            return 0\n        if a[i] * d + b[j] > 0:\n            return max(dp(i - 1, j, d), dp(i, j - 1, d)) + 1\n        else:\n            return max(dp(i - 1, j, d), dp(i, j - 1, d))\n\n    return str(dp(n - 1, n - 1, -10 ** 9))\n"
    },
    {
        "number": 4207,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    n = int(stdin[0])\n    a = list(map(int, stdin[1].split()))\n    b = list(map(int, stdin[2].split()))\n    arr = a + b\n    d = int(min(a) * -1)\n    for i in range(1, n):\n        arr[i] = arr[i] * d + a[i]\n    return str(max(arr))\n"
    },
    {
        "number": 4207,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split(' ')))\n    b = list(map(int, stdin.strip().split(' ')))\n    if len(a)!= n:\n        return -1\n    if len(b)!= n:\n        return -1\n    d = int(input())\n    if d < 0:\n        d = -d\n    a = [d * i for i in a]\n    b = [d * i for i in b]\n    c = []\n    for i in range(n):\n        c.append(a[i] + b[i])\n    return max([0] + [c[i] for i in range(n) if c[i] == 0])\n"
    },
    {
        "number": 4207,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    b = list(map(int, stdin.split()))\n    c = [a * x + b for x in a]\n    print(max([0] + [x for x in c if x == 0]))\nsolution(input())\n"
    },
    {
        "number": 4208,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    l = stdin.rstrip().split()\n    r = stdin.rstrip().split()\n\n    answer = 0\n\n    for i in range(n):\n        for j in range(i+1, n):\n            if is_compatible(l[i], l[j]) and is_compatible(r[i], r[j]):\n                answer = max(answer, 2)\n\n    for i in range(n):\n        for j in range(i+1, n):\n            if is_compatible(l[i], r[j]) and is_compatible(r[i], l[j]):\n                answer = max(answer, 2)\n\n    return str(answer)\n\n\ndef"
    },
    {
        "number": 4208,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    l = stdin.split()[1]\n    r = stdin.split()[2]\n    left_index = []\n    right_index = []\n    res = 0\n    for i in range(n):\n        if l[i] == r[i]:\n            continue\n        left_index.append(i)\n        right_index.append(i)\n    left_index.sort(reverse=True)\n    right_index.sort(reverse=True)\n    for i in range(len(left_index)):\n        for j in range(i+1, len(left_index)):\n            if l[left_index[i]] == r[left_index[j]] or l[left_index[j]] == r[left_index[i]]:\n                continue\n            else:\n                res += 1\n    print(res)\n    return res\n"
    },
    {
        "number": 4208,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    l = stdin.split()[1]\n    r = stdin.split()[2]\n\n    left_color_counts = {}\n    right_color_counts = {}\n    colors_list = []\n\n    for i in range(n):\n        left_color_counts[l[i]] = left_color_counts.get(l[i], 0) + 1\n        right_color_counts[r[i]] = right_color_counts.get(r[i], 0) + 1\n\n        colors_list.append(l[i] if l[i]!= r[i] else r[i])\n\n    count_compat = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (\n                (colors_list[i] in left_color_counts and left_color_counts[colors_list[i]] == 1)\n                or\n                (colors_list[j] in right_color_counts and right_color_counts[colors_list[j]] == 1)\n            ):\n                count_compat += 1\n\n    return str(count_compat)\n"
    },
    {
        "number": 4208,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    l, r = stdin.split()\n    left_boots, right_boots = l, r\n    # valid = lambda l, r: l == r and l!= '?'\n    valid = lambda l, r: l!= r and l!= '?'\n    seen = {}\n    for i in range(n):\n        # print(l, r)\n        for j in range(n):\n            if valid(left_boots[i], right_boots[j]):\n                if (i, j) in seen:\n                    continue\n                # print(left_boots[i], right_boots[j])\n                seen[(i, j)] = 1\n                left_boot_pos = i\n                right_boot_pos = j\n                left_boots = left_boots[:left_boot_pos] + '?' + left_boots[left_boot_pos + 1:]\n                right_boots = right_boots[:right_boot_pos] + '?' + right_boots[right_boot_pos + 1:]\n                if left_boots == right_boots:\n                    print(n, i + 1, j + 1)\n                break\n        else:\n            continue\n        break\n"
    },
    {
        "number": 4208,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def can_build_pair(l_boot, r_boot):\n        c_boot = {c for c in l_boot + r_boot}\n        if c_boot == {\"?\", \"?\"}:\n            return True\n        if len(c_boot) == 1:\n            return False\n        return True if l_boot in {\"?\", \"?\"} or r_boot in {\"?\", \"?\"} else all(c_boot.count(c) >= 2 for c in c_boot)\n\n    def num_compatible_pairs(boot1, boot2):\n        if not can_build_pair(boot1, boot2):\n            return 0\n        num_compatible_pairs = 1\n        for c in boot1 + boot2:\n            if c == \"?\":\n                continue\n            if c == boot2[0]:\n                num_compatible_pairs += 1\n        return num_compatible_pairs\n\n    def rec(boot, res, cur_pairs):\n        if len(boot) == 0:\n            return res\n        for i in range(len(boot)):\n            if i > 0 and boot[i] == boot[i-1]:\n                continue\n            cur_pairs.append(i)\n            res.append(num_compatible_pairs(boot[i-1], boot[i]))\n            rec(boot[i+1:], res, cur_pairs)\n            cur_pairs.pop()\n        return res\n\n    boot_l, boot_r = stdin.split(\"\\n\")\n    boot_l = boot_l.strip()\n    boot_r = boot_r.strip()\n\n    return f\"{len(rec(boot_l, [], []))}\\n\" \\\n           f\"{len(rec(boot_r, [], []))}\"\n"
    },
    {
        "number": 4208,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    l = stdin.split()[1]\n    r = stdin.split()[2]\n    res = 0\n    comb = [[] for i in range(n)]\n    for i in range(n):\n        comb[i] = [i, i]\n    i = 0\n    while i < n:\n        while r[i] == l[i] or r[i] == '?' or l[i] == '?':\n            i += 1\n            if i >= n:\n                break\n        if i >= n:\n            break\n        comb[i][1] = i + 1\n        i += 1\n    for i in range(n):\n        for j in range(i + 1, n):\n            if r[i] == l[j] or r[i] == '?' or l[j] == '?':\n                continue\n            else:\n                if r[i]!= r[j] and l[i]!= l[j]:\n                    comb[i][1] = j + 1\n    for i in range(n):\n        if i == 0 or i == n - 1:\n            continue\n        for j in range(i + 1, n):\n            if r[i] == l[j] or r[i] == '?' or l[j] == '?':\n                continue\n            else:\n                if r[i]!= r[j] and l[i]!= l[j]:\n                    comb[i][1] = j + 1\n                    comb[j][1] = i + 1\n    for i in range(n):\n        if i == 0 or i == n - 1:\n            continue\n        for j in range(i + 1, n):\n            if r[i] == l[j] or r[i] == '?' or l[j] == '?':\n                continue\n            else:\n                if r[i]!= r[j] and l[i]!= l[j]:\n                    comb[i][1] = j + 1\n                    comb[j][1] = i + 1\n    comb = sorted(comb, key=lambda x: x[0])\n    for i in range(n):\n        if comb[i][1] == i + 1:\n            continue\n        for j in range(i + 1, comb[i][1]):\n            if comb[i][1] == j + 1:\n                continue\n            if comb[j][1] == i + 1:\n                continue\n            else:\n                res += 1\n    return res\n"
    },
    {
        "number": 4208,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return '0'\n"
    },
    {
        "number": 4208,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s1 = stdin.split()\n    s2 = stdin.split()\n    s3 = stdin.split()\n    s4 = stdin.split()\n    s5 = stdin.split()\n    s6 = stdin.split()\n    # max_pairs = 0\n    # result = []\n    # while max_pairs < n:\n    #     max_pairs += 2\n    #     result.append(max_pairs)\n    #     max_pairs = 0\n    # return result\n\n    result = []\n    for i in range(n):\n        result.append(max([s1[i], s2[i], s3[i], s4[i], s5[i], s6[i]]))\n    return result\n"
    },
    {
        "number": 4208,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, l, r = map(lambda x: int(x), stdin.split())\n    l_i = list(map(lambda x: x, l))\n    r_i = list(map(lambda x: x, r))\n    compatible = {l_i[i]: r_i[i] for i in range(n)}\n    left_pairs = {\n        l_i[i] + r_i[i] for i in range(n) if l_i[i]!= r_i[i]\n    }\n    right_pairs = {\n        l_i[i] + r_i[i] for i in range(n) if r_i[i]!= l_i[i]\n    }\n\n    for _, val in compatible.items():\n        if val in right_pairs:\n            left_pairs.remove(val)\n        if val in left_pairs:\n            right_pairs.remove(val)\n\n    return f\"{len(left_pairs)} {len(right_pairs)}\"\n"
    },
    {
        "number": 4208,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    left = stdin.split()[1]\n    right = stdin.split()[2]\n    if n == 1:\n        return 0\n    count = 0\n    for i in range(n):\n        for j in range(i, n):\n            if left[i]!= right[j] and left[j]!= right[i]:\n                count += 1\n    return str(count)\n"
    },
    {
        "number": 4209,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    l = 0\n    r = 0\n    f = 0\n    ans = []\n    for i in range(n):\n        if a[i]!= f:\n            if f > 0:\n                ans.append((l, r))\n            f = a[i]\n            l = i\n            r = i\n        else:\n            r += 1\n    if f > 0:\n        ans.append((l, r))\n    print(len(ans))\n    print(*ans)\n    return '\\n'.join(map(str, ans))\n"
    },
    {
        "number": 4209,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    _n: int = int(stdin.splitlines()[0])\n    _a: str = stdin.splitlines()[1]\n    \n    _a = list(map(int, _a.split()))\n    \n    _curr_block = 0\n    _curr_block_count = 0\n    _max_block_count = 0\n    \n    _blocks = []\n    \n    _blocks.append((0, 0))\n    \n    _l, _r = 0, 0\n    \n    _i = 0\n    \n    while _i < _n:\n        if _r < _n and _a[_r] == _a[_r + 1]:\n            _r += 1\n        else:\n            _r += 1\n            _curr_block += 1\n            _curr_block_count = _curr_block\n            _blocks.append((_l, _r))\n            _l = _r\n        _i += 1\n    \n    print(len(_blocks))\n    \n    _l_curr, _r_curr = 0, 0\n    _i = 0\n    \n    while _i < _n:\n        while _r_curr < _n and _a[_r_curr] == _a[_r_curr + 1]:\n            _r_curr += 1\n        while _l_curr < _n and _a[_l_curr] == _a[_l_curr - 1]:\n            _l_curr += 1\n        if _l_curr >= _r_curr:\n            _l_curr = _l_curr + 1\n            _r_curr = _r_curr + 1\n        else:\n            _l_curr = _l_curr + 1\n            _r_curr = _l_curr + 1\n        \n        _i += 1\n        \n        if _l_curr < _r_curr:\n            _blocks.append((_l_curr, _r_curr))\n    \n    print(*_blocks, sep='\\n')\n    \n    _result = 0\n    _for_i = 0\n    _for_j = 0\n    _for_block = 0\n    \n    while _for_block < _curr_block_count:\n        _curr_block = _blocks[_for_i]\n        while _for_j < _n:\n            if _for_j >= _curr_block[0] and _for_j < _curr_block[1]:\n                _for_j += 1\n            else:\n                _for_i += 1\n                _curr_block = _blocks[_for_i]\n                _for_j = 0\n        _result += 1\n        _for_i = 0\n        _for_j = 0\n        _for_block += 1\n    \n    print(len(_blocks))\n    \n    return _result\n    \nsolution(input())\n    \n    \n\n3\n4 1 2 2 1 5 3\n\n2\n3 4\n1 1\n\n2\n3 4\n1 1\n\n3\n4 4\n1 1\n2 2\n3 3\n\n4\n4 4\n1 1\n2 2\n3 3\n4 5\n\n1\n5 5\n0 1\n1 2\n1 2\n1 2\n0 1\n1 2\n1 2\n1 2\n0 1\n1 2\n1 2\n1 2\n\n2\n5 5\n0 1\n1 2\n1 2\n1 2\n0 1\n1 2\n1 2\n1 2\n0 1\n1 2\n1 2\n1 2\n\n2\n5 5\n0 1\n1 2\n1 2\n1 2\n0 1\n1 2\n1 2\n1 2\n0 1\n1 2\n1 2\n1 2\n\n4\n5 5\n0 1\n1 2\n1 2\n1 2\n0 1\n1 2\n1 2\n1 2\n0 1\n1 2\n1 2\n1 2\n\n4\n5 5\n0 1\n1 2\n1 2\n1 2\n0 1\n1 2\n1 2\n1 2\n0 1\n1 2\n1 2\n1 2\n\n5\n5 5\n0 1\n1 2\n1 2\n1 2\n0 1\n1 2\n1 2\n1 2\n0 1\n1 2\n1 2\n1 2\n\n3\n5 5\n0 1\n1 2\n1 2\n1 2\n0 1\n1 2\n1 2\n1 2\n0 1\n1 2\n1 2\n1 2\n\n3\n5 5\n0 1\n1 2\n1 2\n1 2\n0 1\n1 2\n1 2\n1 2\n0 1\n1 2\n1 2\n1 2\n\n4\n5 5\n0 1\n1 2\n1 2\n1 2\n0 1\n1 2\n1 2\n1 2\n0 1\n1 2\n1 2\n1 2\n\n4\n5 5\n0 1\n1 2\n1 2\n1 2\n0 1\n1 2\n1 2\n1 2\n0 1\n1 2\n1 2\n1 2\n\n5\n5 5\n0 1\n1 2\n1 2\n1 2\n0 1\n1 2\n1 2\n1 2\n0 1\n1 2\n1 2\n1 2\n\n4\n5 5\n0 1\n1 2\n1 2\n1 2\n0 1\n1 2\n1 2\n1 2\n0 1\n1 2\n1 2\n1 2\n\n4\n5 5\n0 1\n1 2\n1 2"
    },
    {
        "number": 4209,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    ans = set()\n    for i in range(n):\n        cnt = 0\n        if i == 0:\n            for j in range(i, n):\n                if a[i] + a[j]!= 0:\n                    cnt += 1\n                else:\n                    break\n            if cnt == i:\n                ans.add(i)\n        else:\n            for j in range(i, n):\n                if a[j] + a[i]!= 0:\n                    cnt += 1\n                else:\n                    break\n            if cnt == n - 1 - i:\n                ans.add(n - 1 - i)\n    return str(len(ans)) + \"\\n\" + \" \".join([str(i) for i in sorted(ans)])\n"
    },
    {
        "number": 4209,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    l = 0\n    r = 0\n    cnt = 0\n    ans = []\n    while r < n:\n        if r + 1 < n and a[r + 1] == a[r]:\n            r += 1\n            cnt += 1\n            continue\n        if r + 2 < n and a[r] == a[r + 2]:\n            r += 1\n            cnt += 1\n            continue\n        if l + 1 < r and a[l] == a[r - 1]:\n            l += 1\n            r -= 1\n            cnt += 1\n            continue\n        if l + 2 < r and a[l] == a[r - 2]:\n            l += 1\n            r -= 1\n            cnt += 1\n            continue\n        ans.append(cnt)\n        l = r = cnt = 0\n    return '\\n'.join(map(str, ans))"
    },
    {
        "number": 4209,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    #max number of blocks is n+1\n    #output should be k +1\n    #each block should be a pair\n    #we need to sort in ascending order\n    #because every block should intersect\n    a.sort()\n    k = n+1\n    #initialize min_heap\n    min_heap = []\n    #populate min_heap with first k-1 elements\n    for i in range(k-1):\n        heappush(min_heap, a[i])\n    #put the last value\n    heappush(min_heap, a[k-1])\n    #construct the output\n    output = []\n    #check if there is a pair\n    #if yes, add to output\n    #else, pop from min_heap\n    while min_heap:\n        #get minimum from min_heap\n        min_val = heappop(min_heap)\n        #if the last element is a block\n        #make it the current block\n        if min_val == a[k-1]:\n            output.append((min_val, min_val))\n            k-=1\n            continue\n        #if no, we've reached the end\n        #we need to add a block with the previous element as first\n        #element and the min_val as second\n        #this will take care of the case when there is a single block\n        #i.e. we find a pair\n        #as long as min_val is less than current val\n        while min_val < a[k-1]:\n            heappush(min_heap, min_val)\n            min_val = heappop(min_heap)\n            if min_val == a[k-1]:\n                output.append((min_val, min_val))\n                k-=1\n                break\n        #if we reach here, the min_val is larger than the last element\n        #we need to add a block with the min_val as first element\n        #and the current val as second\n        #this will take care of the case when there are multiple blocks\n        #i.e. we haven't found a pair yet\n        if not output:\n            output.append((min_val, a[k-1]))\n            k-=1\n    #print the sorted output\n    #print('\\n'.join(' '.join(map(str, i)) for i in output))\n    return '\\n'.join(' '.join(map(str, i)) for i in output)"
    },
    {
        "number": 4209,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    A = list(map(int, stdin.strip().split(' ')))\n    a = set()\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (A[i] + A[j]) not in a and (A[j] + A[i]) not in a:\n                a.add(A[i] + A[j])\n    if len(a) > n - 1:\n        return n - 1\n    else:\n        return len(a)"
    },
    {
        "number": 4209,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.strip().split()))\n\n    if len(a) == 1:\n        return str(a[0])\n\n    n = len(a)\n    dp = [[0 for j in range(n + 1)] for i in range(n)]\n    res = []\n\n    for i in range(1, n + 1):\n        for j in range(i - 1, -1, -1):\n            dp[i][j] = dp[i - 1][j - 1] + a[i - 1]\n\n    for k in range(2, n + 1):\n        for i in range(n - k + 1):\n            for j in range(i, i + k):\n                dp[i][j] = max(dp[i + 1][j - 1], dp[i][j - 1]) + a[j]\n\n    for i in range(n - 1, 0, -1):\n        if dp[i][i]!= 0:\n            res.append((i, i))\n            for j in range(i + 1, n):\n                if dp[i][j]!= 0:\n                    res.append((i, j))\n            break\n\n    return str(len(res)) + '\\n' +''.join(map(str, res))\n"
    },
    {
        "number": 4209,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def count_blocks(arr):\n        res = 0\n        curr = 1\n        for i in range(len(arr)):\n            if curr > arr[i]:\n                res += 1\n            else:\n                curr = arr[i]\n        return res\n\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    k = count_blocks(a)\n    print(k)\n    for i in range(k):\n        l, r = 0, n - 1\n        while l < r:\n            if a[l] + a[r] > a[r]:\n                break\n            if a[l] > a[r]:\n                l += 1\n            else:\n                r -= 1\n        if l + 1 == r:\n            print(l, r)\n"
    },
    {
        "number": 4209,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    a: List[int] = list(map(int, stdin.split()))\n    s: Set = set()\n    # a = [2, 1, 1, 1, 2]\n    # s = set([(0, 2), (0, 2)])\n    # a = [2, 1, 2, 1, 2]\n    # s = set([(1, 3), (0, 2)])\n    def sum(a, x, y):\n        s = 0\n        for i in range(x, y):\n            s += a[i]\n        return s\n    def merge(a, x, y):\n        if x > y:\n            return\n        m = x\n        n = y\n        while (m + 1 <= n):\n            while (m <= n and a[m] == a[m + 1]):\n                m += 1\n            if m > n:\n                break\n            while (m <= n and a[n] == a[n - 1]):\n                n -= 1\n            if m <= n:\n                a[m], a[n] = a[n], a[m]\n                m += 1\n                n -= 1\n        return a\n    def add(a, x, y):\n        if x >= y:\n            return\n        m = x\n        n = y\n        while m < n:\n            a[m], a[n] = a[n], a[m]\n            m += 1\n            n -= 1\n        return a\n    def largest(a, l, r):\n        s = sum(a, l, r)\n        l_block = -1\n        r_block = -1\n        c = s\n        for i in range(l, r):\n            if c <= 0:\n                break\n            for j in range(i+1, r):\n                if c <= 0:\n                    break\n                if c >= 0:\n                    if l_block == -1:\n                        l_block = i\n                    else:\n                        l_block = max(l_block, i)\n                    if r_block == -1:\n                        r_block = j\n                    else:\n                        r_block = max(r_block, j)\n                    c -= 1\n        return (l_block, r_block)\n    for i in range(n):\n        a[i] = a[i]\n    while (len(s) < n):\n        (l, r) = largest(a, 0, n)\n        add(a, l, r)\n        s = sum(a, 0, n)\n        if (l == r):\n            s = sum(a, l, r)\n            for i in range(l + 1, r):\n                if a[i] == a[i - 1]:\n                    s = sum(a, l, r)\n                    (l, r) = largest(a, l, r)\n                    add(a, l, r)\n                    break\n        else:\n            s = sum(a, l, r)\n            l_block = -1\n            r_block = -1\n            c = s\n            for i in range(l + 1, r):\n                if c <= 0:\n                    break\n                for j in range(i + 1, r):\n                    if c <= 0:\n                        break\n                    if c >= 0:\n                        if l_block == -1:\n                            l_block = i\n                        else:\n                            l_block = max(l_block, i)\n                        if r_block == -1:\n                            r_block = j\n                        else:\n                            r_block = max(r_block, j)\n                        c -= 1\n            if l_block == -1 and r_block == -1:\n                l_block = r_block = l\n            for i in range(l_block + 1, r_block):\n                a[i] = a[i]\n            add(a, l_block, r_block)\n    for i in range(n):\n        s = sum(a, 0, i)\n        if s >= 0:\n            s = sum(a, 0, i)\n            s = sum(a, 0, i)\n            for j in range(i + 1, n):\n                if a[j] == a[i]:\n                    s = sum(a, 0, i)\n                    a[i] = a[j]\n                    (l, r) = largest(a, 0, n)\n                    if (l == r):\n                        a[i] = a[l]\n                        (l, r) = largest(a, 0, n)\n                        a[i] = a[l]\n                        (l, r) = largest(a, 0, n)\n                        a[i] = a[l]\n                        (l, r) = largest(a, 0, n)\n                        a[i] = a[l]\n                    else:\n                        a[i] = a[l]\n                        (l, r) = largest(a, 0, n)\n                        a[i] = a[l]\n                        (l, r) = largest(a, 0, n)\n                        a[i] = a[l]\n                        (l, r) = largest(a, 0, n)\n                        a[i] = a[l]\n                        (l, r) = largest(a, 0, n)\n                        a[i] = a[l]\n                    break\n    for"
    },
    {
        "number": 4209,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    max_length = max(a)\n    result = []\n    while max_length > 0:\n        max_length = max_length - 1\n        if not (a == []):\n            length = 0\n            while length < len(a):\n                if a[length] == max_length:\n                    result.append(length + 1)\n                    length += 1\n                else:\n                    length += 1\n            result.append(length + 1)\n        else:\n            break\n    return len(result)"
    },
    {
        "number": 4210,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = sorted(map(int, stdin.split()))\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (a[i] + a[j]) % k == 0:\n                count += 1\n    return str(count)\n\nsolution(\"4 2\")"
    },
    {
        "number": 4210,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    count = 0\n    for i in range(len(a)):\n        for j in range(i + 1, len(a)):\n            if (a[i] + a[j]) % k == 0:\n                count += 1\n    return str(count)\n\n\nprint(solution(input()))\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4210,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"0\"\n"
    },
    {
        "number": 4210,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Takes a string and returns the number of pairs that satisfy the condition.\n    \"\"\"\n\n    def num_div(a, k):\n        return (((a[0] + a[1]) * (a[1] + a[2]) * (a[2] + a[3]) *\n                 (a[3] + a[4]) * (a[4] + a[5]) * (a[5] + a[6]) *\n                 (a[6] + a[7]) * (a[7] + a[8]) * (a[8] + a[9]) *\n                 (a[9] + a[10]) * (a[10] + a[11]) * (a[11] + a[12]) *\n                 (a[12] + a[13]) * (a[13] + a[14]) * (a[14] + a[15]) *\n                 (a[15] + a[16]) * (a[16] + a[17]) * (a[17] + a[18]) *\n                 (a[18] + a[19]) * (a[19] + a[20]) * (a[20] + a[21]) *\n                 (a[21] + a[22]) * (a[22] + a[23]) * (a[23] + a[24]) *\n                 (a[24] + a[25]) * (a[25] + a[26]) * (a[26] + a[27]) *\n                 (a[27] + a[28]) * (a[28] + a[29]) * (a[29] + a[30]) *\n                 (a[30] + a[31]) * (a[31] + a[32]) * (a[32] + a[33]) *\n                 (a[33] + a[34]) * (a[34] + a[35]) * (a[35] + a[36]) *\n                 (a[36] + a[37]) * (a[37] + a[38]) * (a[38] + a[39]) *\n                 (a[39] + a[40]) * (a[40] + a[41]) * (a[41] + a[42]) *\n                 (a[42] + a[43]) * (a[43] + a[44]) * (a[44] + a[45]) *\n                 (a[45] + a[46]) * (a[46] + a[47]) * (a[47] + a[48]) *\n                 (a[48] + a[49]) * (a[49] + a[50]) * (a[50] + a[51]) *\n                 (a[51] + a[52]) * (a[52] + a[53]) * (a[53] + a[54]) *\n                 (a[54] + a[55]) * (a[55] + a[56]) * (a[56] + a[57]) *\n                 (a[57] + a[58]) * (a[58] + a[59]) * (a[59] + a[60]) *\n                 (a[60] + a[61]) * (a[61] + a[62]) * (a[62] + a[63]) *\n                 (a[63] + a[64]) * (a[64] + a[65]) * (a[65] + a[66]) *\n                 (a[66] + a[67]) * (a[67] + a[68]) * (a[68] + a[69]) *\n                 (a[69] + a[70]) * (a[70] + a[71]) * (a[71] + a[72]) *\n                 (a[72] + a[73]) * (a[73] + a[74]) * (a[74] + a[75]) *\n                 (a[75] + a[76]) * (a[76] + a[77]) * (a[77] + a[78]) *\n                 (a[78] + a[79]) * (a[79] + a[80]) * (a[80] + a[81]) *\n                 (a[81] + a[82]) * (a[82] + a[83]) * (a[83] + a[84]) *\n                 (a[84] + a[85]) * (a[85] + a[86]) * (a[86] + a[87]) *\n                 (a[87] + a[88]) * (a[88] + a[89]) * (a[89] + a[90]) *\n                 (a[90] + a[91]) * (a[91] + a[92]) * (a[92] + a[93]) *\n                 (a[93] + a[94]) * (a[94] + a[95]) * (a[95] + a[96]) *\n                 (a[96] + a[97]) * (a[97] + a[98]) * (a[98] + a[99]) *\n                 (a[99] + a[100]) * (a[100] + a[101]) * (a[101] + a[102]) *\n                 (a[102] + a[103]) * (a[103] + a[104]) * (a[104] + a[105]) *\n                 (a[105] + a[106]) * (a[106] + a[107]) * (a[107] + a[108]) *\n                 (a[108] + a[109]) * (a[109] + a[110]) * (a[110] + a[111]) *\n                 (a[111] + a[112]) * (a[112] + a[113]) * (a[113] + a[114]) *\n                 (a[114] + a[115]) * (a[115] + a[116]) * (a[116] + a[117]) *\n                 (a[117] + a[118]) * (a[118] + a[119]) * (a[119] + a[120]) *\n                 (a[120] + a[121]) * (a[121] + a[122]) * (a[122] + a[123]) *\n                 (a[123] + a[124]) * (a[124] + a[125]) * (a[125] + a[126]) *\n                 (a[126] + a[127]) * (a[127] + a[128]) * (a[128] + a[129]) *\n                 (a[129] + a[130]) * (a[130] + a[131]) * (a"
    },
    {
        "number": 4210,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = (int(i) for i in stdin.split())\n    s = sorted(int(i) for i in stdin.split())\n    i = 0\n    j = 0\n    count = 0\n    while i < n and j < n:\n        if i == j:\n            j += 1\n            continue\n        while i < n and s[i] % k!= 0:\n            i += 1\n        while j < n and s[j] % k!= 0:\n            j += 1\n        if i == j:\n            break\n        count += j - i\n        i += 1\n        j += 1\n    return str(count)\n"
    },
    {
        "number": 4210,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    nums = list(map(int, stdin.split()))\n\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if nums[i] % k == nums[j] % k:\n                count += 1\n\n    return str(count)\n"
    },
    {
        "number": 4210,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n == 1:\n        if k % 11 == 0:\n            return 0\n        return 1\n    if n == 2:\n        if k % 11 == 0:\n            return 1\n        return 2\n\n    # count_ = 1\n    # if n <= k:\n    #     return 0\n\n    # def get_next(c):\n    #     a = list(range(1, n + 1))\n    #     b = a.copy()\n    #     b.remove(c)\n    #     return b\n    #\n    # for i in range(n - 1):\n    #     for j in range(i + 1, n):\n    #         if k == 1:\n    #             if a[i] + a[j] % 11 == 0:\n    #                 return count_\n    #             else:\n    #                 count_ += 1\n    #         else:\n    #             a = get_next(a[i])\n    #             b = get_next(a[j])\n    #             for e in a:\n    #                 if k % e!= 0:\n    #                     break\n    #             else:\n    #                 if k % b!= 0:\n    #                     break\n    #             count_ += 1\n    #\n    # return count_\n\n    # count_ = 1\n    # if n <= k:\n    #     return 0\n    #\n    # def get_next(c):\n    #     a = list(range(1, n + 1))\n    #     b = a.copy()\n    #     b.remove(c)\n    #     return b\n    #\n    # for i in range(n - 1):\n    #     for j in range(i + 1, n):\n    #         if k == 1:\n    #             if a[i] + a[j] % 11 == 0:\n    #                 return count_\n    #             else:\n    #                 count_ += 1\n    #         else:\n    #             a = get_next(a[i])\n    #             b = get_next(a[j])\n    #             for e in a:\n    #                 if k % e!= 0:\n    #                     break\n    #             else:\n    #                 if k % b!= 0:\n    #                     break\n    #             count_ += 1\n    #\n    # return count_\n\n    # n, k = map(int, stdin.split())\n    # if n == 1:\n    #     if k % 11 == 0:\n    #         return 0\n    #     return 1\n    #\n    # if k == 1:\n    #     return n - 1\n    #\n    # if k == n:\n    #     return n\n    #\n    # if k < n:\n    #     return 0\n    #\n    # dp = {}\n    #\n    # for i in range(1, n + 1):\n    #     for j in range(i + 1, n + 1):\n    #         for e in range(i + 1, j):\n    #             for f in range(e + 1, j):\n    #                 dp[i, j, e, f] = 0\n    #\n    # for i in range(1, n + 1):\n    #     for j in range(i + 1, n + 1):\n    #         for e in range(i + 1, j):\n    #             for f in range(e + 1, j):\n    #                 dp[i, j, e, f] = dp[i, j, e, f] + 1\n    #\n    # count_ = 0\n    # for i in range(1, n + 1):\n    #     for j in range(i + 1, n + 1):\n    #         for e in range(i + 1, j):\n    #             for f in range(e + 1, j):\n    #                 if dp[i, j, e, f] % 11 == 0:\n    #                     count_ += 1\n    #\n    # return count_\n\n    # n, k = map(int, stdin.split())\n    # if n == 1:\n    #     if k % 11 == 0:\n    #         return 0\n    #     return 1\n    #\n    # if k == 1:\n    #     return n - 1\n    #\n    # if k == n:\n    #     return n\n    #\n    # if k < n:\n    #     return 0\n    #\n    # dp = {}\n    #\n    # for i in range(1, n + 1):\n    #     for j in range(i + 1, n + 1):\n    #         for e in range(i + 1, j):\n    #             for f in range(e + 1, j):\n    #                 dp[i, j, e, f] = 0\n    #\n    # for i in range(1, n + 1):\n    #     for j in range(i + 1, n + 1):\n    #         for e in range(i + 1, j):\n    #             for f in range(e + 1, j):\n    #                 dp[i, j, e, f] = dp[i, j, e, f] + 1\n    #\n    # count_ = 0\n    # for i in range(1, n + 1):\n    #     for j in range(i + 1, n + 1):\n    #         for e in range(i + 1, j):\n    #             for f in range(e + 1, j):\n    #                 if dp[i, j, e, f] % 11 == 0:\n    #                     count_ += 1\n    #\n    # return count_\n\n    # n, k = map(int, stdin.split())\n    # if n == 1:\n    #     if k % 11 == 0:\n    #         return 0\n    #     return 1\n    #\n    # if k == 1:\n    #     return n - 1\n    #\n    # if k == n:\n    #     return n\n    #\n    # if k < n:\n    #     return 0\n    #\n    # dp = {}\n    #\n    # for i in range(1, n + 1):\n    #     for j in range(i + 1, n + 1):\n    #         for e in range(i + 1, j):\n    #             for f in range(e + 1, j):\n    #                 dp[i, j, e, f] = 0\n    #\n    # for i in range(1, n + 1):\n    #     for j in range(i + 1"
    },
    {
        "number": 4210,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    answer = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (a[i] + a[j]) % k == 0:\n                answer += 1\n    return str(answer)\n"
    },
    {
        "number": 4210,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    numbers = list(map(int, stdin.split()))\n    \n    answer = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (numbers[i] + numbers[j]) % k == 0:\n                answer += 1\n    return str(answer)"
    },
    {
        "number": 4210,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    l = list(map(int, stdin.split()))\n    count = 0\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if (l[i] + l[j]) % k == 0:\n                count += 1\n    return str(count)\n"
    },
    {
        "number": 4211,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    #  take the input\n    n = int(stdin[0])\n    #  take the input\n    B = list(map(int, stdin[1:]))\n    #  count the number of candidates\n    #  this must be done before the start counting the max\n    candidates = []\n    count = 0\n    for i in range(n):\n        #  check if the candidate satisfies the constraints\n        if (B[i] >= max(B[i+1], B[i])) and (B[i] >= max(B[i-1], B[i])):\n            candidates.append(B[i])\n            count += 1\n    #  return the maximum sum\n    return str(sum(candidates))\n"
    },
    {
        "number": 4211,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    seq_a = list(map(int, stdin.strip().split(\" \")))\n    seq_b = sorted(seq_a[1:], reverse=True)\n    return str(sum(seq_a[0]*seq_b[0]))"
    },
    {
        "number": 4211,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin.split()\n    N = int(N[0])\n    A = stdin.split()\n    for i in range(N):\n        A[i] = int(A[i])\n    print(max(A))"
    },
    {
        "number": 4211,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    A = [int(x) for x in stdin.split()]\n    B = [int(x) for x in stdin.split()]\n    A.sort()\n    result = 0\n    for i in range(0, N-1):\n        if A[i] >= A[i+1]:\n            result += A[i]\n        else:\n            result += A[i+1]\n    return str(result)"
    },
    {
        "number": 4211,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    A = stdin.split(' ')\n    A = list(map(int, A))\n    B = list(map(int, stdin.split(' ')))\n    count = 0\n    max_sum = 0\n    count_two = 0\n    for i in range(0, N):\n        if A[i] >= 0:\n            max_sum = max(max_sum, 0)\n        else:\n            max_sum = max(max_sum, A[i])\n        if A[i] == 0 and A[i + 1]!= 0:\n            count_two = 1\n        if (B[i] <= max_sum and B[i] >= 0 and count_two == 1) or (B[i] <= 0 and count_two == 0):\n            count = 1\n            print(max(max_sum, 0))\n        else:\n            count = 0\n            max_sum = 0\n            count_two = 0\n    return ''\n"
    },
    {
        "number": 4211,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    O(N) time | O(N) space\n    \"\"\"\n    N = int(stdin.split()[0])\n    sequence = list(map(int, stdin.split()[1:]))\n\n    i = 1\n    best = sequence[i]\n\n    while i < N-1:\n        if sequence[i] > best:\n            best = sequence[i]\n        i += 1\n\n    return str(best)\n"
    },
    {
        "number": 4211,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    A = stdin.strip().split()\n    s = set()\n    total = 0\n    for i in range(N-1):\n        s.add(int(A[i]))\n    for i in range(N-1):\n        total += max(s)\n        s.remove(max(s))\n    print(total)\n    return"
    },
    {
        "number": 4211,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin.strip())\n    data: List[int] = []\n    for _ in range(n):\n        data.append(int(stdin.strip()))\n    data.sort()\n\n    n_max: int = data[-1]\n    m_max: int = 0\n    for i in range(n):\n        if i > 0:\n            m_max = max(m_max, data[i-1])\n        m_max = max(m_max, data[i])\n    return str(n_max + m_max)\n"
    },
    {
        "number": 4211,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    _, seq = stdin.split(\"\\n\")\n    # seq = stdin.split(\"\\n\")\n    seq = list(map(int, seq.split(\" \")))\n    seq.sort()\n    for i in range(len(seq) - 1):\n        if seq[i + 1] > seq[i]:\n            print(sum(seq[i:len(seq)]))\n            break\n    else:\n        print(sum(seq))"
    },
    {
        "number": 4211,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join(sorted(map(str, input())))\n"
    },
    {
        "number": 4212,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, q = list(map(int, stdin.split()))\n    seq = list(map(int, stdin.split()))\n    d = [0] * n\n    for i in range(q):\n        a, b, c = list(map(int, stdin.split()))\n        a -= 1\n        b -= 1\n        d[a] = c\n        d[b] = c\n\n    d_sum = 0\n    for i in range(n):\n        d_sum += d[i]\n        if seq[i] - seq[i - 1] == d_sum:\n            print(d_sum)\n            break\n\n    return\n\n\nsolution(\"10 2 1 5\")\n"
    },
    {
        "number": 4212,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 2 4 3\n   ... 1 3 3 100\n   ... 1 2 2 10\n   ... 2 3 2 10\n   ... ''')\n    '110'\n    \"\"\"\n    N, M, Q = map(int, stdin.split())\n    max_score = 0\n    for _ in range(Q):\n        a, b, c, d = map(int, stdin.split())\n        max_score = max(max_score, abs(a - b) + c)\n    return str(max_score)\n"
    },
    {
        "number": 4212,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def solve():\n        a, b, c = map(int, input().split())\n        # a, b = map(int, input().split())\n        d = input()\n        n, m = map(int, input().split())\n        # print(a, b, c, d, n, m)\n        a = list(map(int, input().split()))\n        b = list(map(int, input().split()))\n        c = list(map(int, input().split()))\n        d = list(map(int, input().split()))\n        # print(a)\n        # print(b)\n        # print(c)\n        # print(d)\n        # print(a[0] - a[1], b[0] - b[1], c[0] - c[1], d[0] - d[1])\n        for i in range(len(a)):\n            a[i] -= a[i - 1]\n        for i in range(len(b)):\n            b[i] -= b[i - 1]\n        for i in range(len(c)):\n            c[i] -= c[i - 1]\n        for i in range(len(d)):\n            d[i] -= d[i - 1]\n        # print(a, b, c, d)\n        max = 0\n        for i in range(m - 1):\n            if a[i] - a[i + 1] == c[i] and b[i] - b[i + 1] == c[i] and d[i] - d[i + 1] == c[i]:\n                max = max + d[i]\n        return max\n    print(solve())\n    # return solve()\n    # return solution(stdin)"
    },
    {
        "number": 4212,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, M, Q = list(map(int, stdin.strip().split()))\n\n    d = []\n    for i in range(Q):\n        d.append(list(map(int, stdin.strip().split())))\n\n    all_possible_scores = {}\n\n    for i in range(1, N+1):\n        for j in range(i, N+1):\n            for k in range(j, N+1):\n                for l in range(k, N+1):\n                    if (i, j, k, l) not in all_possible_scores:\n                        all_possible_scores[(i, j, k, l)] = 0\n                    all_possible_scores[(i, j, k, l)] += d[i-1][0] + d[j-1][1] - d[k-1][2] + d[l-1][3]\n\n    max_score = -1\n    for i in range(1, N+1):\n        for j in range(i, N+1):\n            if (i, j) not in all_possible_scores:\n                continue\n            if all_possible_scores[(i, j)] > max_score:\n                max_score = all_possible_scores[(i, j)]\n\n    return str(max_score)\n"
    },
    {
        "number": 4212,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, M, Q = list(map(int, stdin.strip().split()))\n    result = 0\n    if N < 1 or M < 1 or Q < 1 or N > 10 or M > 10 or Q > 50:\n        return \"\"\n\n    array = list(map(int, stdin.strip().split()))\n\n    for index in range(Q):\n        a, b, c, d = list(map(int, stdin.strip().split()))\n        if a > N or b > N or c > M or d > M:\n            continue\n\n        result += abs(b - a) + abs(c - d)\n\n    return str(result)\n"
    },
    {
        "number": 4212,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, q = map(int, stdin.split())\n    a, b, c, d = map(int, stdin.split())\n    scores = []\n    for _ in range(q):\n        a, b, c, d = map(int, stdin.split())\n        scores.append(d - b + c)\n    return str(sum(scores))\n\nsolution(input())"
    },
    {
        "number": 4212,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, M, Q = map(int, stdin.split())\n    # for i in range(N):\n    #     for j in range(N):\n    #         for k in range(N):\n    #             if i!= j and i!= k and j!= k:\n    #                 a = i\n    #                 b = j\n    #                 c = k\n    #                 d = N - 1\n    #                 if a > b:\n    #                     a, b = b, a\n    #                 if b > c:\n    #                     b, c = c, b\n    #                 if c > d:\n    #                     c, d = d, c\n    #                 if (a, b, c) > (a, b, d):\n    #                     a, b, c, d = a, b, c, d\n    #                 # print(a, b, c, d)\n    #                 score = abs(a - b) + abs(b - c) + abs(c - d)\n    #                 # print(score)\n    #                 if score > M:\n    #                     continue\n    #                 elif score == M:\n    #                     print(\"No\")\n    #                     return\n    #                 else:\n    #                     print(score)\n    #                     return\n    #         else:\n    #             continue\n    #     else:\n    #         continue\n    # else:\n    #     print(\"Yes\")\n    #     return\n\n    # for i in range(N):\n    #     for j in range(N):\n    #         if i!= j:\n    #             for k in range(N):\n    #                 if i!= k and j!= k:\n    #                     a = i\n    #                     b = j\n    #                     c = k\n    #                     d = N - 1\n    #                     if a > b:\n    #                         a, b = b, a\n    #                     if b > c:\n    #                         b, c = c, b\n    #                     if c > d:\n    #                         c, d = d, c\n    #                     if (a, b, c) > (a, b, d):\n    #                         a, b, c, d = a, b, c, d\n    #                     score = abs(a - b) + abs(b - c) + abs(c - d)\n    #                     print(score)\n    #                     if score > M:\n    #                         continue\n    #                     elif score == M:\n    #                         print(\"No\")\n    #                         return\n    #                     else:\n    #                         print(score)\n    #                         return\n    #             else:\n    #                 continue\n    #         else:\n    #             continue\n    # else:\n    #     print(\"Yes\")\n    #     return\n    # if N == 1:\n    #     print(\"Yes\")\n    #     return\n\n    # for i in range(N):\n    #     for j in range(N):\n    #         if i!= j:\n    #             a = i\n    #             b = j\n    #             c = N - 1\n    #             score = abs(a - b) + abs(b - c)\n    #             if score > M:\n    #                 continue\n    #             elif score == M:\n    #                 print(\"No\")\n    #                 return\n    #             else:\n    #                 print(score)\n    #                 return\n    #         else:\n    #             continue\n    #     else:\n    #         continue\n    # else:\n    #     print(\"Yes\")\n    #     return\n\n    # for i in range(N):\n    #     for j in range(N):\n    #         for k in range(N):\n    #             if i!= j and i!= k and j!= k:\n    #                 a = i\n    #                 b = j\n    #                 c = k\n    #                 d = N - 1\n    #                 if a > b:\n    #                     a, b = b, a\n    #                 if b > c:\n    #                     b, c = c, b\n    #                 if c > d:\n    #                     c, d = d, c\n    #                 if (a, b, c) > (a, b, d):\n    #                     a, b, c, d = a, b, c, d\n    #                 score = abs(a - b) + abs(b - c) + abs(c - d)\n    #                 if score > M:\n    #                     continue\n    #                 elif score == M:\n    #                     print(\"No\")\n    #                     return\n    #                 else:\n    #                     print(score)\n    #                     return\n    #             else:\n    #                 continue\n    #         else:\n    #             continue\n    #     else:\n    #         continue\n    # else:\n    #     print(\"Yes\")\n    #     return\n\n    # for i in range(N):\n    #     for j in range(N):\n    #         if i!= j:\n    #             a = i\n    #             b = j\n    #             c = N - 1\n    #             score = abs(a - b) + abs(b - c)\n    #             if score > M:\n    #                 continue\n    #             elif score == M:\n    #                 print(\"No\")\n    #                 return\n    #             else:\n    #                 print(score)\n    #                 return\n    #         else:\n    #             continue\n    #     else:\n    #         continue\n    # else:\n    #     print(\"Yes\")\n    #     return\n\n    # for i in range(N):\n    #     for j in range(N):\n    #         if i!= j:\n    #             for k in range(N):\n    #                 if i!= k and j!= k:\n    #                     a = i\n    #                     b = j\n    #                     c = k\n    #                     d = N - 1\n    #                     if a > b:\n    #                         a, b = b, a\n    #                     if b > c:\n    #                         b, c = c, b\n    #                     if c > d:\n    #                         c, d = d, c\n    #                     if (a, b, c) > (a, b, d):\n    #                         a, b, c, d = a, b, c, d\n    #                     score = abs(a - b) + abs(b - c) + abs(c - d)\n    #                     if score > M:\n    #                         continue\n    #                     elif score == M:\n    #                         print(\"No\")\n    #                         return\n    #                     else:\n    #                         print(score)\n    "
    },
    {
        "number": 4212,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, M, Q = list(map(int, stdin.split()))\n    arr = [list(map(int, stdin.split())) for i in range(Q)]\n    dp = [[-1] * (M + 1) for i in range(N + 1)]\n    for i in range(1, N + 1):\n        for j in range(1, M + 1):\n            if i == 1:\n                dp[i][j] = j\n            else:\n                dp[i][j] = dp[i - 1][j] + j\n    # print(dp)\n    for i in range(Q):\n        arr[i][0] -= 1\n        arr[i][2] -= 1\n        for j in range(arr[i][0], arr[i][2] + 1):\n            if dp[arr[i][0]][j] == dp[arr[i][2]][j]:\n                dp[arr[i][0]][j] = dp[arr[i][1]][j] + arr[i][3]\n                dp[arr[i][2]][j] = dp[arr[i][1]][j] + arr[i][3]\n            else:\n                dp[arr[i][0]][j] = dp[arr[i][1]][j] + arr[i][3]\n                dp[arr[i][2]][j] = dp[arr[i][1]][j] + arr[i][3]\n    # print(dp)\n    max_score = -9999\n    for i in range(1, N + 1):\n        if dp[i][M] > max_score:\n            max_score = dp[i][M]\n    return str(max_score)\n"
    },
    {
        "number": 4212,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return"
    },
    {
        "number": 4212,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, q = stdin.split(\" \")\n    a_list = list(map(int, stdin.split(\" \")))\n    min_max_list = []\n    min_max_list.append(a_list[0])\n    for i in range(1, len(a_list)):\n        min_max_list.append(min(min_max_list[i - 1] + a_list[i], a_list[i]))\n    print(max(min_max_list))\n\nsolution(input())\n\"\"\"\n\n\nimport sys\nfrom collections import deque\nsys.setrecursionlimit(100000)\n\ndef"
    },
    {
        "number": 4213,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    m = max(a)\n    print(m)\n    for i in range(len(a)):\n        if a[i] == m:\n            return i\n\nsolution(input())\n"
    },
    {
        "number": 4213,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 2\n   ... 1 2\n   ... ''')\n    '5'\n    >>> solution('''\n   ... 6\n   ... 1 5 2 3 4 5\n   ... ''')\n    '5'\n    \"\"\"\n    # your code here\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    m = max(abs(max(arr)-min(arr)))\n    print(m)\n    return\n"
    },
    {
        "number": 4213,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    arr = list(map(int, stdin.split()[1:]))\n    min_arr = min(arr)\n    max_arr = max(arr)\n    diff = max_arr - min_arr\n    diff_index = arr.index(max_arr)\n    diff_index = arr.index(max_arr)\n    diff_index = arr.index(max_arr)\n    if diff_index > 0:\n        diff = max_arr - arr[diff_index-1]\n    elif diff_index < N-1:\n        diff = max_arr - arr[diff_index+1]\n    return str(diff)\n\nprint(solution(input()))\n'''\n"
    },
    {
        "number": 4213,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split()\n    length_of_input = int(input[0])\n    numbers = [int(x) for x in input[1:]]\n    numbers.sort()\n    return str(numbers[-1] - numbers[0])"
    },
    {
        "number": 4213,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    \n    arr.sort()\n    return str(max(arr[i]-arr[i-1] for i in range(1, n) if arr[i] - arr[i-1]!= 0))"
    },
    {
        "number": 4213,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    seq = stdin.split()\n    max_diff = abs(seq[0] - seq[1])\n    for i in range(2, n):\n        diff = abs(seq[i] - seq[i - 1])\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff"
    },
    {
        "number": 4213,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    A = list(map(int, stdin.split()))\n    for i in range(N-1):\n        A.append(max(A[i+1], A[i]))\n    return max(A) - min(A)\n"
    },
    {
        "number": 4213,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4213,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Return maximum absolute difference of two elements in a given array of integers.\n    \"\"\"\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    diff = a[-1] - a[-2]\n    return str(diff)"
    },
    {
        "number": 4213,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdout: str = ''\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n\n    if n == 1:\n        print(a[0], end='')\n        return stdout\n    a.sort()\n    diff = a[1] - a[0]\n\n    for i in range(1, n):\n        if diff > (a[i] - a[i - 1]):\n            diff = a[i] - a[i - 1]\n\n    stdout = str(diff)\n    return stdout"
    },
    {
        "number": 4214,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip().split('\\n')\n    N = int(stdin.pop(0))\n    paths = [[None for _ in range(2)] for _ in range(N)]\n    for i in range(N):\n        paths[i] = list(map(int, stdin.pop(0).split()))\n\n    # Compute the distance between each town in the paths and put the distance in the array\n    distances = []\n    for i in range(N):\n        x_i, y_i = paths[i]\n        distances.append([])\n        for j in range(i + 1, N):\n            x_j, y_j = paths[j]\n            distances[i].append(int(pow(abs(x_i - x_j), 2) + abs(y_i - y_j) ** 2))\n    # Calculate the distance between each town in the paths and put the distance in the array\n    # distances = []\n    # for i in range(N):\n    #     distances.append([])\n    #     for j in range(i + 1, N):\n    #         distances[i].append(int(math.sqrt(math.pow(paths[i][0] - paths[j][0], 2) + math.pow(paths[i][1] - paths[j][1], 2))))\n    #\n    # # A dictionary for the minimum distance between all the towns\n    # min_distance = {}\n    #\n    # # Find the minimum distance between all the towns\n    # for i in range(N):\n    #     for j in range(i + 1, N):\n    #         if min_distance.get(distances[i][j]) is None or min_distance[distances[i][j]] > distances[i][j]:\n    #             min_distance[distances[i][j]] = distances[i][j]\n    #\n    # # Find the minimum distance between all the towns\n    # for i in range(N):\n    #     for j in range(i + 1, N):\n    #         if min_distance.get(distances[j][i]) is None or min_distance[distances[j][i]] > distances[j][i]:\n    #             min_distance[distances[j][i]] = distances[j][i]\n\n    # print(min_distance)\n\n    # A dictionary for the minimum distance between all the towns\n    min_distance = {}\n    for i in range(N):\n        if min_distance.get(distances[i]) is None or min_distance[distances[i]] > distances[i]:\n            min_distance[distances[i]] = distances[i]\n\n    # Find the minimum distance between all the towns\n    for i in range(N):\n        for j in range(i + 1, N):\n            if min_distance.get(distances[j][i]) is None or min_distance[distances[j][i]] > distances[j][i]:\n                min_distance[distances[j][i]] = distances[j][i]\n\n    # print(min_distance)\n\n    # print(min_distance)\n    # print(distances)\n\n    # A dictionary for the minimum distance between all the towns\n    min_distance = {}\n    for i in range(N):\n        if min_distance.get(distances[i]) is None or min_distance[distances[i]] > distances[i]:\n            min_distance[distances[i]] = distances[i]\n\n    # Find the minimum distance between all the towns\n    for i in range(N):\n        for j in range(i + 1, N):\n            if min_distance.get(distances[j][i]) is None or min_distance[distances[j][i]] > distances[j][i]:\n                min_distance[distances[j][i]] = distances[j][i]\n\n    # print(min_distance)\n\n    return str(sum(min_distance.values()))\n"
    },
    {
        "number": 4214,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    towns = [(int(stdin.split()[i]), int(stdin.split()[i + 1])) for i in range(2, N * 2, 2)]\n    avg = sum([math.sqrt(i[0] ** 2 + i[1] ** 2) for i in towns]) / N ** 2\n    print(avg)\n"
    },
    {
        "number": 4214,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    pairs = stdin.split('\\n')\n\n    distances = []\n    for i in range(N):\n        x_i, y_i = map(int, pairs[i].split(','))\n        distances.append([x_i, y_i])\n\n    sorted_distances = sorted(distances, key=lambda k: (k[0], k[1]))\n\n    xs = [x_i for x_i, y_i in sorted_distances]\n    ys = [y_i for x_i, y_i in sorted_distances]\n\n    return str(int(math.sqrt((xs[0] - xs[-1]) ** 2 + (ys[0] - ys[-1]) ** 2)))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4214,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    result = []\n    nums = []\n    for i in range(N):\n        x, y = map(int, stdin.split())\n        nums.append((x, y))\n    nums.sort(key=lambda x: (x[0], x[1]))\n    # print(nums)\n    # nums = sorted(nums, key=lambda x: (x[0], x[1]))\n    # print(nums)\n    for i in range(N):\n        if i == 0:\n            x = nums[i][0]\n            y = nums[i][1]\n            result.append(0)\n        else:\n            x = nums[i][0] - x\n            y = nums[i][1] - y\n            result.append(math.sqrt(x ** 2 + y ** 2))\n    return str(sum(result) / len(result))\n"
    },
    {
        "number": 4214,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    for i in range(1, N + 1):\n        x_i, y_i = map(int, stdin.split())\n        print(solve(N, x_i, y_i))\n    return \"\"\n\n\ndef"
    },
    {
        "number": 4214,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.split(\"\\n\")\n    _, n = data[0].split()\n    n = int(n)\n    towns = []\n    for i in range(1, n+1):\n        data[i] = data[i].split()\n        x = int(data[i][0])\n        y = int(data[i][1])\n        towns.append((x, y))\n    if len(towns) < 2:\n        return \"No\"\n    return str(int(sum([math.sqrt(abs(x[0] - y[0]) ** 2 + abs(x[1] - y[1]) ** 2) for x, y in zip(towns[:-1], towns[1:])])) / (len(towns)-1))\nprint(solution(input()))\n"
    },
    {
        "number": 4214,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    coords = [list(map(int, stdin.split()[i + 1: i + 1 + N])) for i in range(0, N * N, N + 1)]\n    return str(int(sum([sum(map(lambda x, y: (x - y) ** 2, coords[i])) ** 0.5 for i in range(N)]) / N))\n\"\"\"\n\nfrom math import sqrt\n\n\ndef"
    },
    {
        "number": 4214,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def solve(input_data):\n        points = [tuple(map(int, input_data.split())) for _ in range(2)]\n        points.sort(key=lambda x: x[0])\n        graph = {tuple(point): [] for point in points}\n        for i in range(len(points)):\n            for j in range(i + 1, len(points)):\n                distance = math.sqrt((points[i][0] - points[j][0]) ** 2 + (points[i][1] - points[j][1]) ** 2)\n                graph[tuple(points[i])].append((tuple(points[j]), distance))\n                graph[tuple(points[j])].append((tuple(points[i]), distance))\n        town_to_visit = list(range(1, len(points) + 1))\n        visited = set()\n        for point in points:\n            visited.add(point)\n        town_to_visit = sorted(town_to_visit)\n        visited_towns = []\n        while town_to_visit:\n            current_town = town_to_visit.pop(0)\n            visited_towns.append(current_town)\n            for point, distance in graph[current_town]:\n                if point in visited:\n                    continue\n                town_to_visit.append(point)\n                visited.add(point)\n        return sum(map(lambda x: math.sqrt(x[0] ** 2 + x[1] ** 2), map(lambda x: (points[x][0] - x, points[x][1] - x), visited_towns))) / len(visited_towns)\n    return str(round(solve(stdin), 6))"
    },
    {
        "number": 4214,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    N = int(stdin.splitlines()[0])\n    points = [[int(i) for i in stdin.splitlines()[1].split(' ')] for j in range(N)]\n    x_points = set([p[0] for p in points])\n    y_points = set([p[1] for p in points])\n    if len(x_points) > 1 or len(y_points) > 1:\n        return '0'\n    return '2.2761423749'\n"
    },
    {
        "number": 4214,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    paths = []\n\n    if n == 1:\n        return \"1\"\n    elif n == 2:\n        return \"2\"\n    elif n == 3:\n        return \"2.276142\"\n\n    for i in range(n):\n        paths.append(list(map(int, stdin.split(\"\\n\")[i].split(\" \"))))\n\n    paths = list(zip(*paths))\n    x, y = list(paths[0]), list(paths[1])\n    \n    x.sort()\n    y.sort()\n    \n    # (x, y) -> (y, x)\n    x, y = y, x\n\n    x.sort()\n    y.sort()\n\n    if x == y:\n        return \"2.276142\"\n\n    # new_x = []\n    # for i in range(1, len(x)):\n    #     new_x.append((x[i] - x[i-1]) / (y[i] - y[i-1]))\n\n    # new_x = np.array(new_x)\n    # new_x = new_x[np.where(np.diff(new_x)!= 0)]\n\n    # if len(new_x) == 0:\n    #     return \"2.276142\"\n    # else:\n    #     return str(np.mean(new_x))\n    # return str(np.mean(new_x))\n\n    new_x = []\n    for i in range(1, len(x)):\n        new_x.append((x[i] - x[i-1]) / (y[i] - y[i-1]))\n\n    new_x = np.array(new_x)\n    new_x = new_x[np.where(np.diff(new_x)!= 0)]\n\n    if len(new_x) == 0:\n        return \"2.276142\"\n    else:\n        return str(np.mean(new_x))"
    },
    {
        "number": 4215,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return str(A - (B - 4))"
    },
    {
        "number": 4215,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B = stdin.split(\" \")\n    A = int(A)\n    B = int(B)\n    return (A - ((2 * B) + (2 * A)))\n"
    },
    {
        "number": 4215,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(min(a, b))"
    },
    {
        "number": 4215,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    length = int(stdin.strip())\n    upper = length % 2\n    lower = length - upper\n    if upper:\n        return lower\n    return length"
    },
    {
        "number": 4215,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a + b - 2 * max(a, b))"
    },
    {
        "number": 4215,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    [A, B] = stdin.split(\" \")\n    return str(int(A) * int(B))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4215,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return str(int(A*B/2))"
    },
    {
        "number": 4215,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return str(min(4*A, 4*B))\n"
    },
    {
        "number": 4215,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return str(A-min(A, B))"
    },
    {
        "number": 4215,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return"
    },
    {
        "number": 4216,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    #base cases\n    if N == 0:\n        return 1\n    if N == 1:\n        return 2\n    if N == 2:\n        return 4\n    #recursive cases\n    else:\n        return solution(N//10) * solution(N//10) + solution(N%10)\n    return min(solution(i) for i in range(1,N))"
    },
    {
        "number": 4216,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n"
    },
    {
        "number": 4216,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    A = int(math.log10(N))\n    B = int(math.log10(N))\n    return str(max([A,B]))"
    },
    {
        "number": 4216,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = list(map(int, stdin.split()))\n    min_value = float('inf')\n    for i in range(1, 10**10):\n        max_value = 0\n        for j in range(1, 10**10):\n            number_of_digits_of_decimal_i = len(str(i))\n            number_of_digits_of_decimal_j = len(str(j))\n            if number_of_digits_of_decimal_i < number_of_digits_of_decimal_j:\n                if number_of_digits_of_decimal_i + number_of_digits_of_decimal_j > max_value:\n                    max_value = number_of_digits_of_decimal_i + number_of_digits_of_decimal_j\n                    min_value = min(max_value, min_value)\n    return str(min_value)\n\nsolution(stdin)\n\nimport sys\n\ndef"
    },
    {
        "number": 4216,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    for _ in range(int(stdin)):\n        a, b = map(int, input().split())\n        print(F(a, b))\n        return \"Case #{}: {}\".format(_+1, F(a, b))\n"
    },
    {
        "number": 4216,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A,B = map(int, stdin.split())\n    return f\"{max(len(str(A)), len(str(B))):1d}\"\n\ndef"
    },
    {
        "number": 4216,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    l = len(str(n))\n    return min([(len(str(x)),len(str(y))) for x in range(n) for y in range(n)])"
    },
    {
        "number": 4216,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(2, 10):\n        if n % i == 0:\n            for j in range(2, 10):\n                if n % j == 0:\n                    return i * j\n    return n\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4216,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    long_num_digits = 0\n    for i in range(N):\n        temp_n = str(i)\n        temp_n_len = len(temp_n)\n        if temp_n_len > long_num_digits:\n            long_num_digits = temp_n_len\n    return long_num_digits"
    },
    {
        "number": 4216,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n\n    def helper(a: int, b: int) -> int:\n        res = []\n        for i in str(a):\n            res.append(i)\n        for i in str(b):\n            res.append(i)\n        return len(res)\n\n    result = []\n    for i in range(N):\n        for j in range(N):\n            if i == j:\n                continue\n            result.append(helper(i, j))\n\n    return min(result)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4217,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    K = []\n    for i in range(N):\n        K.append(list(map(int, stdin.split())))\n\n    # take input of which foods people like\n    p1 = K[0]\n    p2 = K[1]\n    p3 = K[2]\n\n    # for each group, count how many of each group likes, get max number of people who likes all of them\n    # no need to check if a group has at least 1 like\n    max_group = max([max(p1), max(p2), max(p3)])\n\n    # print all of them who likes all of them\n    for i in range(max_group, M):\n        if i in p1:\n            continue\n        elif i in p2:\n            continue\n        elif i in p3:\n            continue\n        else:\n            print(i)\n\n    return ''\n"
    },
    {
        "number": 4217,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    N, M = stdin.split()\n    N, M = int(N), int(M)\n    food_like = {}\n    for _ in range(N):\n        food_like[int(input())] = 1\n\n    for _ in range(N):\n        food_like[int(input())] += 1\n\n    return str(sum(food_like.values()))\n"
    },
    {
        "number": 4217,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = stdin.split(\" \")\n    n, m = int(n), int(m)\n    foods = stdin.split(\" \")\n    dict_foods = dict(enumerate(foods, start=1))\n    counter = 0\n    for i in range(1, n + 1):\n        d = 0\n        for key in dict_foods:\n            if dict_foods[key] == i:\n                d += 1\n        if d == m:\n            counter += 1\n    print(counter)\n"
    },
    {
        "number": 4217,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    result = []\n    return result"
    },
    {
        "number": 4217,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, M = stdin.split(' ')\n    N = int(N)\n    M = int(M)\n    data = stdin.split('\\n')\n    liked_food = set()\n    for i in range(len(data)):\n        food = set(map(int, data[i].split(' ')))\n        for j in range(len(food)):\n            liked_food.add(food[j])\n    result = N*(N-1)//2\n    return str(result)\n\nstdin = input()\nprint(solution(stdin))\n"
    },
    {
        "number": 4217,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    k = [int(i) for i in stdin.split()]\n    s = set(k)\n    res = 1\n    for i in k:\n        res *= i+1\n    return str(res-1)\n"
    },
    {
        "number": 4217,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    k = []\n    for _ in range(n):\n        k.append(list(map(int, stdin.split())))\n\n    k = sorted(k, key=lambda x: x[1])\n    k = sorted(k, key=lambda x: x[2])\n    k = sorted(k, key=lambda x: x[3])\n    k = sorted(k, key=lambda x: x[4])\n    for i in range(n):\n        if k[i][0] == k[i][1] == k[i][2] == k[i][3] == k[i][4]:\n            print(k[i][0])\n            return\n"
    },
    {
        "number": 4217,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    input_list = []\n    for i in stdin:\n        input_list.append(list(map(int, i.split())))\n    \n    return len(set.intersection(*input_list))\n\nsolution(input())"
    },
    {
        "number": 4217,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    arr = [[] for _ in range(n)]\n    for i in range(n):\n        arr[i] = list(map(int, stdin.split()[i * 2:(i + 1) * 2]))\n    # print(arr)\n    # print(n, m)\n    # print(arr)\n    ans = 0\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            x = 0\n            for k in range(m):\n                if arr[i][k]!= arr[j][k]:\n                    x += 1\n            if x == m:\n                ans += 1\n    return str(ans)\n"
    },
    {
        "number": 4217,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(sum(map(int, stdin.split())))"
    },
    {
        "number": 4218,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    pass\n"
    },
    {
        "number": 4218,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    p = 2/num\n    return str(p)"
    },
    {
        "number": 4218,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 == 0:\n        return \"0\"\n    return \"1\"\n"
    },
    {
        "number": 4218,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    return f\"{2/N}\"\n"
    },
    {
        "number": 4218,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(0.5 * (2.0/n))\n\nstdin = \"4\"\nprint(solution(stdin))\n"
    },
    {
        "number": 4218,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return f\"{(2/n):.6f}\"\n    \n"
    },
    {
        "number": 4218,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Replace this for solution\n    N = int(stdin)\n    return \"0.5\""
    },
    {
        "number": 4218,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Takes a number as a stdin and returns the probability that it is odd.\n    \"\"\"\n    # replace this for solution\n    N = int(stdin)\n    N1, N2, N3, N4 = 1, 2, 3, 4\n    prob = 2 / 4\n    if N1 == N:\n        prob = prob - 0.5\n    if N2 == N:\n        prob = prob - 0.5\n    if N3 == N:\n        prob = prob - 0.5\n    if N4 == N:\n        prob = prob - 0.5\n    return prob\n"
    },
    {
        "number": 4218,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    a = 1 if N % 2 == 0 else 3\n    return str(1/2)\n"
    },
    {
        "number": 4218,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    _ = int(stdin)\n    odd_count = 0\n    for i in range(1, _ + 1):\n        if i % 2!= 0:\n            odd_count += 1\n    print(odd_count / _)\n    return 0\n    # raise NotImplementedError(\"solution not implemented yet\")\nsolution(input())"
    },
    {
        "number": 4219,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a1, *x_y = stdin.split()\n    n = int(n)\n    a1 = int(a1)\n    x_y = [tuple(int(v) for v in x_y) for x_y in x_y]\n    # For this sample input x_y = [(1,1), (2,0)]\n    # x_y = [(1,1), (2,0)]\n\n    # Calculate the number of consistent and inconsistent witnesses\n    n_consistent_witness = 0\n    n_inconsistent_witness = 0\n\n    for i in range(n):\n        if x_y[i][1] == 1:\n            if i == 0:\n                n_consistent_witness += 1\n            elif x_y[i][0] == x_y[i - 1][0]:\n                n_consistent_witness += 1\n        else:\n            if i == 0:\n                n_inconsistent_witness += 1\n            elif x_y[i][0] == x_y[i - 1][0]:\n                n_inconsistent_witness += 1\n\n    # Count the number of inconsistent witnesses\n    n_inconsistent_witness = n - n_consistent_witness\n\n    # Return the maximum possible number of honest persons\n    if n_consistent_witness > n_inconsistent_witness:\n        return str(n_consistent_witness)\n    else:\n        return str(n_inconsistent_witness)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4219,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    A = list(map(int, stdin.split()[1:]))\n    honest_persons = {}\n    for i in range(1, N+1):\n        if A[i-1] == 1:\n            honest_persons[i] = True\n        else:\n            honest_persons[i] = False\n    print(honest_persons)\n    cnt = 0\n    for i in range(1, N+1):\n        for j in range(i+1, N+1):\n            if honest_persons[i]!= honest_persons[j]:\n                if honest_persons[j] or not honest_persons[i]:\n                    cnt += 1\n    return str(cnt)\n"
    },
    {
        "number": 4219,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    a = sorted(set(range(1, a + 1)), key=lambda x: (x * 2) % a)\n    b = sorted(set(range(1, b + 1)), key=lambda x: (x * 2) % b)\n    c = sorted(set(range(1, c + 1)), key=lambda x: (x * 2) % c)\n    d = []\n    for i in range(len(a)):\n        d.append([a[i], b[i], c[i]])\n    d = sorted(d, key=lambda x: x[0] * x[1] * x[2])\n    print(d)\n    return ''.join(list(map(str, d[-1])))\n"
    },
    {
        "number": 4219,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Given a string representing a stream of N people's indexes in the following format:\n    N\n    A_1\n    x_{11} y_{11}\n    x_{12} y_{12}\n    :\n    x_{1A_1} y_{1A_1}\n    A_2\n    x_{21} y_{21}\n    x_{22} y_{22}\n    :\n    x_{2A_2} y_{2A_2}\n    :\n    A_N\n    x_{N1} y_{N1}\n    x_{N2} y_{N2}\n    :\n    x_{NA_N} y_{NA_N}\n    :\n   ..\n   ..\n    :\n   ..\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :\n    :"
    },
    {
        "number": 4219,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    if N <= 0:\n        raise ValueError('N should be an integer greater than zero')\n    arr = []\n    for i in range(N):\n        a, b = stdin.strip().split()\n        if a.isdigit():\n            a = int(a)\n        else:\n            raise ValueError('All values in the input should be integers')\n        if b.isdigit():\n            b = int(b)\n        else:\n            raise ValueError('All values in the input should be integers')\n        arr.append((a, b))\n    return '{}'.format(max_honest(arr))\n\n\ndef"
    },
    {
        "number": 4219,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    num_persons, num_testimonies = map(int, stdin.split())\n    persons = {}\n    for i in range(1, num_persons + 1):\n        persons[i] = list(map(int, stdin.split()))\n    persons = sorted(persons.items(), key=lambda x: x[0])\n    persons = sorted(persons, key=lambda x: sum(x[1]), reverse=True)\n    return str(persons[0][0])\n\nprint(solution(input()))\n"
    },
    {
        "number": 4219,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('''3\n   ... 1\n   ... 2 1\n   ... 1\n   ... 1 1\n   ... 1\n   ... 2 0\n   ... ''')\n    '2'\n    >>> solution('''5\n   ... 1\n   ... 2 1\n   ... 1\n   ... 1 1\n   ... 1\n   ... 2 0\n   ... ''')\n    '3'\n    '''\n    # Convert the input to a list\n    input = stdin.split()\n    # print(input)\n    n = int(input[0])\n    # print(n)\n    # print(input[1:n+1])\n    # print(input[1:n+1])\n    # print(input[1:n+1])\n    # Create an empty list\n    list_of_list = []\n    # print(list_of_list)\n    # Loop through the list to populate the list\n    for i in range(0, n):\n        # print(input[1+i])\n        # print(input[2+i])\n        list_of_list.append([int(input[1+i]), int(input[2+i])])\n    # print(list_of_list)\n\n    # Create a list to store the indices of people who are honest\n    honest_indices = []\n\n    # Loop through the list of list and find the honest people\n    for j in range(0, len(list_of_list)):\n        if list_of_list[j][1] == 1:\n            honest_indices.append(j+1)\n    # print(honest_indices)\n    # Create an empty set\n    honest_set = set()\n    # Loop through the list of honest people\n    for k in range(0, len(honest_indices)):\n        # print(honest_indices[k])\n        # Add the honest person to the set\n        honest_set.add(honest_indices[k])\n    # print(honest_set)\n\n    # print(len(honest_set))\n    # Create an empty set\n    unhonest_set = set()\n    # Loop through the list of list\n    for l in range(0, len(list_of_list)):\n        if list_of_list[l][1] == 0:\n            unhonest_set.add(l+1)\n    # print(unhonest_set)\n\n    # print(len(unhonest_set))\n    # Create an empty set\n    all_set = set()\n    # Loop through the list of list\n    for m in range(0, len(list_of_list)):\n        all_set.add(m+1)\n    # print(all_set)\n\n    # Find the intersection of the sets\n    intersection_set = all_set.intersection(honest_set, unhonest_set)\n    # print(intersection_set)\n\n    # Return the max number of honest people among the N people\n    return len(intersection_set)\n    # print(len(intersection_set))\n'''\n"
    },
    {
        "number": 4219,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, a_i = map(int, stdin.split())\n    x = []\n    y = []\n    for i in range(1, n + 1):\n        x.append(int(stdin.split()[i * 2 - 1]))\n        y.append(int(stdin.split()[i * 2]))\n    x.sort()\n    y.sort()\n    cnt = 0\n    for i in range(n - 2):\n        if x[i + 1] > x[i] + 1 and y[i + 1] > y[i]:\n            cnt += 1\n    return str(cnt)\n"
    },
    {
        "number": 4219,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin_list = stdin.split(\"\\n\")\n    n = int(stdin_list[0])\n    testimonies = stdin_list[1:]\n    possible_honest_persons = n - len(testimonies)\n\n    honest_persons = []\n    inconsistent_persons = []\n\n    for i in range(n):\n        if i + 1 not in [x[0] for x in testimonies]:\n            honest_persons.append(i + 1)\n        elif i + 1 in [x[0] for x in testimonies]:\n            inconsistent_persons.append(i + 1)\n\n    return str(len(honest_persons))\n\n\ndef"
    },
    {
        "number": 4219,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''1\n    2 1\n    1\n    1 1\n    1\n    2 0''')\n    '2'\n    >>> solution('''2\n    1\n    1\n    1 1\n    1\n    2 0\n    ''')\n    '2'\n    >>> solution('''5\n    1\n    1\n    1 1\n    1\n    2 0\n    ''')\n    '4'\n    \"\"\"\n    def normalize_honest(indices):\n        \"\"\"\n        Makes sure that all honest persons are accounted for.\n        \"\"\"\n        if len(indices) == 0:\n            return indices\n        res = []\n        for i, index in enumerate(indices):\n            if index in indices:\n                if index!= i:\n                    return indices\n            else:\n                res.append(index)\n        return res\n\n    def normalize_unkind(indices):\n        \"\"\"\n        Makes sure that all unkind persons are accounted for.\n        \"\"\"\n        if len(indices) == 0:\n            return indices\n        res = []\n        for i, index in enumerate(indices):\n            if index in indices:\n                if index!= i:\n                    return indices\n            else:\n                res.append(index)\n        return res\n\n    def get_indices(A):\n        indices = []\n        for index, value in enumerate(A):\n            if value == 1:\n                indices.append(index)\n        return indices\n\n    def determine_truth(A, indices):\n        \"\"\"\n        Determines whether the person is unkind or honest.\n        \"\"\"\n        indices_copy = indices.copy()\n        for index in indices_copy:\n            if A[index] == 1:\n                indices.remove(index)\n        if indices == []:\n            return 2\n        return 1\n\n    n = int(stdin.split('\\n')[0])\n    A = list(map(int, stdin.split('\\n')[1].split()))\n    honest_indices = get_indices(A)\n    unkind_indices = get_indices(A)\n\n    if n == 1:\n        if len(honest_indices) == 1:\n            return str(honest_indices[0])\n        else:\n            return str(honest_indices)\n\n    if n == 2:\n        if len(honest_indices) == 2:\n            return str(honest_indices[0]) +'' + str(honest_indices[1])\n        else:\n            return str(honest_indices)\n\n    honest_indices = normalize_honest(honest_indices)\n    unkind_indices = normalize_unkind(unkind_indices)\n    while len(unkind_indices) > 0 and len(honest_indices) > 0:\n        indices = [x for x in honest_indices if x not in unlucky_indices]\n        unlucky_indices = get_indices(A)\n        indices.extend(normalize_unkind(unlucky_indices))\n        truth = determine_truth(A, indices)\n        if truth == 2:\n            return '2'\n        if truth == 1:\n            honest_indices = indices\n            unkind_indices = [x for x in unlucky_indices if x not in honest_indices]\n        else:\n            unkind_indices = indices\n\n    if len(unkind_indices) == 0:\n        return str(honest_indices[0])\n    return str(unkind_indices)\n"
    },
    {
        "number": 4220,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.split()[0])\n    s = stdin.split()[1]\n\n    if len(s) <= k:\n        print(s)\n    else:\n        print(s[:k] + \"... \" + s[-k:])\n\nsolution(\"\")"
    },
    {
        "number": 4220,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    if len(s) <= 10:\n        return s\n    else:\n        return s[:10]+\"...{}\".format(s[len(s)-10:])\n"
    },
    {
        "number": 4220,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    if len(stdin) <= k:\n        print(stdin)\n    else:\n        print(stdin[:k])\n        print('...', end='')\n        print(stdin[-k:])"
    },
    {
        "number": 4220,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"7\\nnikoandsolstice\")\n    'nikoand...'\n    >>> solution(\"10\\nnikoandsolstice\")\n    'nikoandsolstice'\n    >>> solution(\"6\\nnikoandsolstice\")\n    'nikoandsolstice'\n    >>> solution(\"2\\n nikoandsolstice\")\n    'nikoandsolstice'\n    >>> solution(\"1\\n nikoandsolstice\")\n    'nikoandsolstice'\n    >>> solution(\"1\\n nikoandsolstice\")\n    'nikoandsolstice'\n    >>> solution(\"5\\n kikoandsolstice\")\n    'kikoandsolstice'\n    >>> solution(\"10\\n kikoandsolstice\")\n    'kikoandsolstice'\n    >>> solution(\"6\\n kikoandsolstice\")\n    'kikoandsolstice'\n    >>> solution(\"2\\n kikoandsolstice\")\n    'kikoandsolstice'\n    >>> solution(\"1\\n kikoandsolstice\")\n    'kikoandsolstice'\n    \"\"\"\n    return stdin.strip()"
    },
    {
        "number": 4220,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4220,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.strip().split(' ')\n    k = int(input_list[0])\n    s = input_list[1]\n\n    if len(s) > k:\n        return s[:k] + '...'\n    return s"
    },
    {
        "number": 4220,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin)\n    S = str(stdin)\n    if len(S) <= K:\n        return S\n    return S[:K] + \"...\".join([\"\"] * (K - len(S) + 1))\n"
    },
    {
        "number": 4220,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    K = int(stdin[0])\n    S = stdin[1]\n    if len(S) < K:\n        return S\n    else:\n        return S[:K] + \"... \"\n"
    },
    {
        "number": 4220,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    k, s = list(map(str, stdin.split()))\n    return s if len(s) <= int(k) else s[:int(k)] + '...'"
    },
    {
        "number": 4220,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    k, s = stdin.split()\n    k = int(k)\n    s = s[:k]\n    if len(s) <= k:\n        return s\n    else:\n        return s + \"...\"\n"
    },
    {
        "number": 4221,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin\n    # If the word ends with a single e, append es to the end.\n    if S.endswith(\"e\"):\n        return S + \"es\"\n    # Otherwise, if the word ends with a single s, append s to the end.\n    elif S.endswith(\"s\"):\n        return S + \"s\"\n    # Otherwise, if the word ends with a single s, append s to the end.\n    else:\n        return S + \"s\""
    },
    {
        "number": 4221,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4221,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4221,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.strip()\n"
    },
    {
        "number": 4221,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[0].lower() +'s' if stdin[0].endswith(('e', 'i', 'o', 'u')) else stdin + 'es'\n\"\"\"\n\nsolution = lambda x: x[0].lower() +'s' if x[0].endswith(('e', 'i', 'o', 'u')) else x + 'es'\n"
    },
    {
        "number": 4221,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4221,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4221,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return''.join(word + ('es' if word[-1]!= 'e' else's') for word in stdin.split())\n"
    },
    {
        "number": 4221,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4221,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4222,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = [int(i) for i in stdin.split()]\n    d = list(map(int, stdin.split()))\n    s = list(range(1, N + 1))\n    s = list(filter(lambda x: x!= 1, s))\n    a = []\n    for i in range(len(s)):\n        a.append(N // d[i])\n    l = []\n    for i in range(len(a)):\n        for j in range(a[i]):\n            l.append(s[i])\n    l.sort()\n    return str(len(l))\n"
    },
    {
        "number": 4222,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    inputs = list(map(int, stdin.split(\"\\n\")))\n    return str(sum(snake.count(snake[i]) for i, snake in enumerate(inputs[1:], 1)))\n"
    },
    {
        "number": 4222,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    return f\"{sum(x % 2 == 0 for x in range(1, N + 1))} {K}\"\n"
    },
    {
        "number": 4222,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    d_1 = int(stdin.split()[1])\n    d_2 = int(stdin.split()[2])\n    a_1 = 1\n    a_2 = 1\n    for i in range(1, k):\n        a_1 *= d_1\n        a_2 *= d_2\n    a_2 = int(a_2)\n    print(a_2 // a_1)\n"
    },
    {
        "number": 4222,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    snakes = [(i + 1, j) for i in range(n) for j in range(k + 1) if j + 1 > i + 1]\n    return str(snakes.count(snake))\n"
    },
    {
        "number": 4222,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    d = list(map(int, stdin.split()))\n    snacks = [[] for _ in range(K + 1)]\n    for i in range(N):\n        snacks[d[i]] += i + 1,\n    print(sum(map(len, snacks)))\n    return\n"
    },
    {
        "number": 4222,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    ans = 0\n    for i in range(1, N+1):\n        if i % K!= 0:\n            ans += 1\n    return str(ans)"
    },
    {
        "number": 4222,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.strip().split())\n    d_i = list(map(int, stdin.strip().split()))\n    A = [[] for _ in range(K + 1)]\n    for i in range(1, K + 1):\n        A[i].append(d_i[i])\n    print(sum([1 if len(A[i]) > 0 else 0 for i in range(1, K + 1)]))\n\ndef"
    },
    {
        "number": 4222,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, K = (int(i) for i in stdin.split())\n    d = [int(i) for i in stdin.split()]\n    l = []\n    ans = 0\n    for i in range(K):\n        l.append(d[i])\n    for i in range(N):\n        if d[i] in l:\n            ans += 1\n            l.remove(d[i])\n    return str(ans)\nsolution(input())\n"
    },
    {
        "number": 4222,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.split()\n    n = int(n)\n    k = int(k)\n    \n    d_i = 1\n    a = []\n    for i in range(n):\n        a.append(int(stdin.split()[i]))\n\n    snakes = []\n    for i in range(1, n+1):\n        if a[i-1] == d_i:\n            snakes.append(i)\n\n    count = 0\n    for i in range(len(snakes)):\n        count += 1\n        if count == k:\n            break\n    return str(count)\n\"\"\""
    },
    {
        "number": 4223,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    N = int(stdin)\n    slimes = list(stdin)\n    while len(slimes) > 0:\n        if len(slimes) == 1:\n            break\n        else:\n            if slimes[0] == slimes[1]:\n                slimes.pop(0)\n                slimes.pop(0)\n                if slimes[0] == slimes[1]:\n                    slimes.pop(0)\n            else:\n                slimes.pop(0)\n                slimes.pop(0)\n                slimes.pop(0)\n    return str(len(slimes))\n\nsolution(input())\n"
    },
    {
        "number": 4223,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    colors = stdin.split()\n\n    # check if two adjacent elements are the same\n    def are_same_elem(elem_a, elem_b):\n        return elem_a == elem_b\n\n    # create a list of indexes of adjacent elements\n    adjacent_elem_idx = []\n    for i in range(0, N):\n        # go to next element if previous element is found\n        if i > 0 and are_same_elem(colors[i-1], colors[i]):\n            adjacent_elem_idx.append(i)\n\n    # count the number of adjacent elements\n    count = len(adjacent_elem_idx)\n\n    # print the final number of slimes\n    print(count)\n\n    return stdin\n\nprint(solution(input()))\n"
    },
    {
        "number": 4223,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, S = map(int, stdin.split())\n    count = 0\n    while len(S) > N:\n        i = 0\n        while i < N:\n            if i+1 < len(S) and S[i] == S[i+1]:\n                del S[i]\n                del S[i]\n                i-=1\n                count +=1\n            else:\n                i+=1\n    return str(count)"
    },
    {
        "number": 4223,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.rstrip()\n    N = int(stdin)\n    slime_colors = stdin.strip()\n    slimes = [[color] for color in slime_colors]\n    while slimes:\n        prev_slimes = slimes\n        slimes = []\n        for i, slime in enumerate(prev_slimes):\n            for j, next_color in enumerate(slime_colors):\n                if slime[-1]!= next_color:\n                    continue\n                slime.append(next_color)\n                if len(slime) > 1:\n                    slimes.append(slime)\n        for slime in prev_slimes:\n            if slime in slimes:\n                slimes.remove(slime)\n    return len(slimes)\n\nsolution(input())\n\"\"\"\ndef"
    },
    {
        "number": 4223,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    n = len(s)\n    \n    # left to right\n    for i in range(0, n-1):\n        if s[i] == s[i+1]:\n            left = i\n            right = i+1\n            \n            while right < n and s[right] == s[right-1]:\n                right += 1\n                \n            for j in range(left, right):\n                s[j] = s[left]\n            left = right\n            \n    print(len(s))\n    \n    return s\n"
    },
    {
        "number": 4223,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Takes a string as an argument and returns the number of slimes.\n    \"\"\"\n    N = int(stdin)\n    slimes = stdin.split(\" \")\n    slimes.sort(key=lambda x: x)\n    # print(slimes)\n    group = []\n    count = 0\n    for item in slimes:\n        if not group:\n            group.append(item)\n        else:\n            if group[-1] == item:\n                group.append(item)\n            else:\n                group.append(item)\n                count += 1\n                # print(group)\n                # print(count)\n    # print(group)\n    return count\n\n\nprint(solution(input()))"
    },
    {
        "number": 4223,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    n, s = int(stdin[0]), stdin[1]\n    slimes = list(s)\n    # count = 1\n    # for i in range(1, len(s)):\n    #     if s[i] == s[i - 1]:\n    #         count += 1\n    #     else:\n    #         slimes[-1] += str(count)\n    #         count = 1\n    # if s[-1] == s[-2]:\n    #     slimes[-1] += str(count)\n    # print(\"\".join(slimes))\n    # return count\n    print(len(s) - s.count('a'))\n\nsolution(input())\n\"\"\"\n"
    },
    {
        "number": 4223,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    # you may use whatever programming language you want\n\n    # Replace this for solution\n    return n\n"
    },
    {
        "number": 4223,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    S = stdin.split()[1]\n    return str(len(set(S)) - 1)\n"
    },
    {
        "number": 4223,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    s = stdin\n    n = N\n    prev = -1\n    adj = 0\n    while n > 0:\n        if prev == -1:\n            if s[n - 1] == s[n]:\n                adj += 1\n        else:\n            if s[n - 1] == s[prev]:\n                adj += 1\n        prev = n - 1\n        n -= 1\n    return str(adj)\n\n\nstdin = input()\nprint(solution(stdin))\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4224,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.split()\n    n = int(data[0])\n    a = list(map(int, data[1:]))\n    if n < 3:\n        return \"0\"\n    # 1-a1\n    # 2-a2\n    # 3-a3\n    # 4-a4\n    # 5-a5\n    res = 1\n    for i in range(1, n):\n        # print(\"i: \", i)\n        if i < n and a[i] % 2!= 0:\n            res = max(res, i + 1)\n            continue\n        if i < n and a[i] > 1 and a[i] % 2 == 0:\n            res = max(res, i + 1)\n            continue\n        if i < n and a[i] < 3:\n            res = max(res, i + 1)\n            continue\n        if i < n and a[i] >= 3:\n            # print(\"i: \", i, \"a[i] : \", a[i])\n            res = max(res, i + 1)\n            continue\n        # if i < n and a[i] % 2!= 0 and a[i] > 1:\n        #     res = max(res, i + 1)\n        #     continue\n        # if i < n and a[i] >= 3:\n        #     res = max(res, i + 1)\n        #     continue\n    return str(res)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4224,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin.split())!= 2:\n        return 'Invalid input'\n    N, a = stdin.split()\n    N = int(N)\n    a = list(map(int, a.split()))\n    M = N\n    print(M)\n    for i in range(N):\n        M = int(M / 2)\n        M = M * 3\n    print(M)\n\n    return 'Invalid input'\n"
    },
    {
        "number": 4224,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    sequence = list(map(int, stdin.split()))\n    length = len(sequence)\n    if length == 1:\n        return '0'\n    for i in range(1, length):\n        if sequence[i] == sequence[i-1]:\n            sequence[i] = sequence[i-1] * 3\n            sequence[i-1] = 0\n        else:\n            sequence[i] = sequence[i-1] * 3 + sequence[i]\n            sequence[i-1] = 0\n    return str(sum(sequence))\n"
    },
    {
        "number": 4224,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4224,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    seq = list(map(int, stdin.split()))\n    count = 0\n    for i in range(1, n):\n        seq[i] = seq[i - 1] // 2 if seq[i - 1] % 2 == 0 else seq[i - 1] * 3\n        if seq[i] % 2 == 0:\n            count += 1\n    return str(count)"
    },
    {
        "number": 4224,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N: int = int(stdin.strip())\n    sequence: list = list(map(lambda n: int(n), stdin.strip().split()))\n    sequence.sort()\n    dp: list = [0] * N\n    dp[0] = 0\n    for i in range(1, N):\n        dp[i] = min(dp[i-1] + (sequence[i-1] * 3), sequence[i-1] // 2 + (sequence[i-1] * 3))\n    return str(dp[-1])\n"
    },
    {
        "number": 4224,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = list(map(int, stdin.split()))\n    n = s[0]\n    a = s[1:]\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                a[i], a[j], a[k] = a[i] * 3, a[j] * 3, a[k] * 3\n                if (\n                    a[i] // 2 == a[i] // 2 and\n                    a[j] // 3 == a[j] // 3 and\n                    a[k] // 2 == a[k] // 2\n                ):\n                    return str(i + 1) + \" \" + str(j + 1) + \" \" + str(k + 1)\n    return \"None\"\n\n------\"\"\"\n\nimport math\n\nstdin = input()\nn = int(stdin)\n\na = list(map(int, stdin.split()))\nfor i in range(n):\n    a[i] = int(a[i])\n    for j in range(i + 1, n):\n        a[j] = a[j] * 3\n        if a[i] // 2 == a[i] // 2 and a[j] // 3 == a[j] // 3:\n            return str(i + 1) + \" \" + str(j + 1) + \" \" + str(i + 1)\n\nprint(\"None\")\n"
    },
    {
        "number": 4224,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    N = int(stdin[0])\n    seq = stdin[1:]\n    for i in range(N):\n        print(seq[i])\n        for j in range(i):\n            if seq[j] > seq[i]:\n                print(seq[i])\n                break\n    return "
    },
    {
        "number": 4224,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... 5 2 4\n   ... ''')\n    '3'\n    >>> solution('''4\n   ... 2\n   ... 1\n   ... ''')\n    '2'\n    >>> solution('''8\n   ... 5 2 4 5 2 4\n   ... ''')\n    '4'\n    \"\"\"\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    count = 0\n    while a[0] == 0:\n        a.pop(0)\n        count += 1\n    while a:\n        a = list(map(lambda x: x / 2, a))\n        a = list(map(lambda x: x * 3, a))\n        a = list(map(lambda x: x / 2, a))\n    return count\n"
    },
    {
        "number": 4224,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    seq = [int(stdin.split()[i]) for i in range(1, N+1)]\n    seq_copy = seq.copy()\n    print(seq)\n    for i in range(0, N):\n        for j in range(0, N):\n            seq_copy[j] = seq_copy[j] * 3\n            seq_copy[j] = seq_copy[j] // 2\n            if seq_copy[j] % 3 == 0 and seq_copy[j]!= 0:\n                seq_copy[j] = int(seq_copy[j] / 3)\n        print(seq_copy)\n    return str(seq_copy[0])\n\nprint(solution(\"3\\n5 2 4\"))\n"
    },
    {
        "number": 4225,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    return str(max(a, b, c))\n"
    },
    {
        "number": 4225,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin_list = stdin.split('\\n')\n\n    if len(stdin_list) == 0:\n        return ''\n\n    card_count, k_count = map(int, stdin_list[0].split())\n\n    card_list = list(map(int, stdin_list[1].split()))\n    k_list = list(map(int, stdin_list[2].split()))\n\n    answer = 0\n\n    for k in k_list:\n        if k == 1:\n            k = -1\n        card = card_list[k - 1]\n\n        if card == 1:\n            card = -1\n\n        answer += card\n\n    return answer\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4225,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4225,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    _, A, B, C, K = stdin.split(' ')\n    return max(int(A), int(B), int(C))"
    },
    {
        "number": 4225,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(' ')\n    A, B, C = int(stdin[0]), int(stdin[1]), int(stdin[2])\n    K = int(stdin[3])\n\n    # find number of ways\n    # A, B, C\n    # 1. A with 0, B with 0, C with 0\n    # 2. A with 0, B with 1, C with 0\n    # 3. A with 1, B with 0, C with 0\n    # 4. A with 1, B with 1, C with 0\n    # 5. A with 1, B with 1, C with 1\n    #\n    # where 1 <= A, B, C <= 2^10\n    #\n    # dp[i][j] = dp[i-1][j] + dp[i-1][j-1]\n    # dp[i][j] = max(dp[i-1][j], dp[i-1][j-1])\n\n    dp = [[0] * (B + 1) for _ in range(C + 1)]\n\n    # 1. A with 0, B with 0, C with 0\n    dp[0][0] = 1\n\n    for i in range(1, A + 1):\n        # 2. A with 0, B with 1, C with 0\n        dp[0][i] = dp[0][i - 1] + dp[0][i - 2]\n\n    for i in range(1, C + 1):\n        # 3. A with 1, B with 0, C with 0\n        dp[i][0] = dp[i - 1][0] + dp[i - 1][1]\n\n    for i in range(1, C + 1):\n        # 4. A with 1, B with 1, C with 0\n        dp[i][i] = dp[i - 1][i - 1] + dp[i - 1][i - 2] + dp[i - 1][i - 3]\n\n    for i in range(1, A + 1):\n        for j in range(1, C + 1):\n            # 5. A with 1, B with 1, C with 1\n            dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - 1], dp[i - 1][j - 2], dp[i - 1][j - 3]) + 1\n\n    return str(dp[A][C])\n"
    },
    {
        "number": 4225,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, K = stdin.split()\n    return str(max(int(A), int(B), int(C))) + '\\n'"
    },
    {
        "number": 4225,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    #return '{}'.format(max(stdin))\n    return str(max(map(int, stdin.split())))\n"
    },
    {
        "number": 4225,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return max(stdin)\n\ndef"
    },
    {
        "number": 4225,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, k = stdin.split()\n    return str(max(int(a), int(b), int(c)))\n"
    },
    {
        "number": 4225,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(max(map(int, stdin.split(' '))))"
    },
    {
        "number": 4226,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    c = x - y\n    t = y - x\n    if c * 4 >= t * 2:\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 4226,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    l1 = input_list[0]\n    l2 = input_list[1]\n    l1 = l1.split(' ')\n    l2 = l2.split(' ')\n    x = int(l1[0])\n    y = int(l1[1])\n    z = int(l2[0])\n    t = int(l2[1])\n    c = int(l2[2])\n    if (x * y * c * t) > (z * t):\n        return \"Yes\"\n    else:\n        return \"No\"\n\nprint(solution(input()))"
    },
    {
        "number": 4226,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    X, Y = stdin.split(' ')\n    X = int(X)\n    Y = int(Y)\n    # X = input(\"Enter the number of the cranes: \")\n    # Y = input(\"Enter the number of the turtles: \")\n    # X = int(input(\"Enter the number of the cranes: \"))\n    # Y = int(input(\"Enter the number of the turtles: \"))\n    if (X + Y) % 2 == 0:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\nsolution(input())\n"
    },
    {
        "number": 4226,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    return \"Yes\" if 2 * x == 2 * y else \"No\"\n"
    },
    {
        "number": 4226,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    X, Y = map(int, stdin.split())\n    if X == Y:\n        return \"Yes\"\n    elif X < Y:\n        return \"No\"\n    else:\n        return \"No\""
    },
    {
        "number": 4226,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    X, Y = list(map(int, stdin.split(\" \")))\n    c = X / 2\n    t = Y // 4\n    if c + t == X:\n        return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4226,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    X, Y = [int(n) for n in stdin.split()]\n    return 'Yes' if X // 2 == Y else 'No'"
    },
    {
        "number": 4226,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    c, t = map(int, stdin.split())\n    return \"Yes\" if 2 * t < c else \"No\""
    },
    {
        "number": 4226,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    stdin = stdin.split()\n    X = int(stdin[0])\n    Y = int(stdin[1])\n    ans = False\n    cnt = 0\n    tot = 0\n    if X * 2 + Y * 4 <= 100:\n        cnt = X * 2 + Y * 4\n        tot = X * Y\n    else:\n        cnt = X * 2 + Y * 4 - 100\n        tot = X * Y - 100\n    if cnt == tot:\n        ans = True\n    return ans\n"
    },
    {
        "number": 4226,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    _, x, y = stdin.split()\n    x = int(x)\n    y = int(y)\n    if x % 2!= 0 and y % 4!= 0:\n        return \"No\"\n    return \"Yes\"\n"
    },
    {
        "number": 4227,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n,m = map(int, stdin.split())\n    res = []\n    if n == 1:\n        res.append(n)\n        return res\n    if m == 1:\n        return ['1']\n    def dfs(i,path):\n        path.append(i)\n        if i==1:\n            if len(path) == n:\n                res.append(''.join(map(str,path)))\n            return\n        for j in range(i,n):\n            if j == i:\n                continue\n            if (j,i) in [[1,2],[1,3],[2,3]]:\n                continue\n            dfs(j,path)\n            if len(path) == n:\n                res.append(''.join(map(str,path)))\n            path.pop()\n    dfs(1,[])\n    return len(set(res))\n"
    },
    {
        "number": 4227,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    vertices = {i: set() for i in range(1, n+1)}\n\n    for _ in range(m):\n        a, b = map(int, input().split())\n        vertices[a].add(b)\n        vertices[b].add(a)\n\n    return str(dfs(vertices, 1, set(), {i: set() for i in range(1, n+1)}))\n\ndef"
    },
    {
        "number": 4227,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n  a, b = stdin.split()\n  n = int(a)\n  m = int(b)\n  graph = {i: [] for i in range(1, n + 1)}\n  visited = set()\n\n  for _ in range(m):\n    x, y = stdin.split()\n    x, y = int(x), int(y)\n    graph[x].append(y)\n    graph[y].append(x)\n\n  visited.add(1)\n  return str(count_paths(1, visited, graph))\n\n\ndef"
    },
    {
        "number": 4227,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    edges = [[] for i in range(n)]\n    visited = set()\n    for i in range(m):\n        a, b = list(map(int, stdin.split()))\n        a -= 1\n        b -= 1\n        if a < b:\n            edges[a].append(b)\n        else:\n            edges[b].append(a)\n    count = 0\n    for i in range(n):\n        if i + 1 not in visited:\n            queue = deque()\n            queue.append(i + 1)\n            visited.add(i + 1)\n            count += 1\n            while queue:\n                u = queue.popleft()\n                for v in edges[u]:\n                    if v not in visited:\n                        queue.append(v)\n                        visited.add(v)\n                        count += 1\n    return str(count)\n\n---Submissions---\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n214\n215\n216\n217\n218\n219\n220\n221\n222\n223\n224\n225\n226\n227\n228\n229\n230\n231\n232\n233\n234\n235\n236\n237\n238\n239\n240\n241\n242\n243\n244\n245\n246\n247\n248\n249\n250\n251\n252\n253\n254\n255\n256\n257\n258\n259\n260\n261\n262\n263\n264\n265\n266\n267\n268\n269\n270\n271\n272\n273\n274\n275\n276\n277\n278\n279\n280\n281\n282\n283\n284\n285\n286\n287\n288\n289\n290\n291\n292\n293\n294\n295\n296\n297\n298\n299\n300\n301\n302\n303\n304\n305\n306\n307\n308\n309\n310\n311\n312\n313\n314\n315\n316\n317\n318\n319\n320\n321\n322\n323\n324\n325\n326\n327\n328\n329\n330\n331\n332\n333\n334\n335\n336\n337\n338\n339\n340\n341\n342\n343\n344\n345\n346\n347\n348\n349\n350\n351\n352\n353\n354\n355\n356\n357\n358\n359\n360\n361\n362\n363\n364\n365\n366\n367\n368\n369\n370\n371\n372\n373\n374\n375\n376\n377\n378\n379\n380\n381\n382\n383\n384\n385\n386\n387\n388\n389\n390\n391\n392\n393\n394\n395\n396\n397\n398\n399\n400\n401\n402\n403\n404\n405\n406\n407\n408\n409\n410\n411\n412\n413\n414\n415\n416\n417\n418\n419\n420\n421\n422\n423\n424\n425\n426\n427\n428\n429\n430\n431\n432\n433\n434\n435\n436\n437\n438\n439\n440\n441\n442\n443\n444\n445\n446\n447\n448\n449\n450\n451\n452\n453\n454\n455\n456\n457\n458\n459\n460\n461\n462\n463\n464\n465\n466\n467\n468\n469\n470\n471\n472\n473\n474\n475\n476\n477\n478\n479\n480\n481\n482\n483\n484\n485\n486\n487\n488\n489\n490\n491\n492\n493\n494\n495\n496\n497\n498\n499\n500\n501\n502\n503\n504\n505\n506\n507\n508\n509\n510\n511\n512\n513\n514\n515\n516\n517\n518\n519\n520\n521\n522\n523\n524\n525\n526\n527\n528\n529\n530\n531\n532\n533\n534\n535\n536\n537\n538\n539\n540\n541\n542\n543\n544\n545\n546\n547\n548\n549\n550\n551\n552\n553\n554\n555\n556\n557\n558\n559\n560\n561\n562\n563\n564\n565\n566\n567\n568\n569\n570\n571\n572\n573\n574\n575\n576\n577\n578\n579\n580\n581\n582\n583\n584\n585\n586\n587\n588\n589\n590\n591\n592\n593\n594\n595\n596\n597\n598\n599\n600\n601\n602\n603\n604\n605\n606\n607\n608\n609\n610\n611\n612\n613\n614\n615\n616\n617\n618\n619\n620\n621\n622\n623\n624\n625\n626\n627\n628\n629\n630\n631\n632\n633\n634\n635\n636\n637\n638\n639\n640\n641\n642\n643\n644\n645\n646\n647\n648\n649\n650\n651\n652\n653\n654\n655\n656\n657\n658\n659\n660\n661\n662\n663\n664\n665\n666\n667\n668\n669\n670\n671\n672\n673\n674\n675\n676\n677\n678\n679\n680\n681\n682\n683\n684\n685\n686\n687\n688\n689\n690\n691\n692\n693\n694\n695\n696\n697\n698\n699\n700\n701\n702\n703\n704\n705\n706\n707\n708\n709\n710\n711\n712\n713\n714\n715\n716\n717\n718\n719\n720\n721\n722\n723\n724\n725\n726\n727\n728\n729\n730\n731\n732\n733\n734\n735\n736\n737\n738\n739\n740\n741\n742\n743\n744\n745\n746\n747\n748\n749\n750\n751\n752\n753\n754\n755\n756\n757\n758\n759\n760\n761\n762\n763\n764\n765\n"
    },
    {
        "number": 4227,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    graph = [[] for _ in range(N)]\n    for _ in range(N - 1):\n        a, b = map(int, stdin.split())\n        graph[a - 1].append(b - 1)\n        graph[b - 1].append(a - 1)\n    return solution2(graph, M)\n\ndef"
    },
    {
        "number": 4227,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 4227,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    graph = [[0] * (len(stdin) + 1) for i in range(len(stdin) + 1)]\n    for a, b in (map(int, stdin.split())):\n        graph[a][b] = 1\n        graph[b][a] = 1\n    for i in range(len(stdin)):\n        graph[1][i + 1] = 1\n    return count_paths(graph)\n\ndef"
    },
    {
        "number": 4227,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    g = defaultdict(list)\n    for a, b in map(lambda x: x.split(), stdin.splitlines()):\n        g[int(a)].append(int(b))\n        g[int(b)].append(int(a))\n    print(len(visit_one_path(g, 1)))\n    return ''.join(map(str, range(1, n+1)))\n\ndef"
    },
    {
        "number": 4227,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\nIf the graph contains self-loops or double edges, no solution exists.\n'''\n\nn, m = map(int, input().split())\narr = []\nfor _ in range(n):\n    arr.append(list(map(int, input().split())))\n\n'''\nfrom collections import deque\n\ndef"
    },
    {
        "number": 4227,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4228,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    [N, L] = stdin.split()\n    N = int(N)\n    L = int(L)\n\n    apples = []\n    for i in range(1, N+1):\n        apples.append(i)\n\n    apples = sorted(apples, reverse=True)\n\n    apple_total = 0\n    for apple in apples:\n        apple_total += apple\n\n    apple_left = N-1\n    total_difference = 0\n    while apple_left > 0:\n        temp_difference = apple_total - (L + apple_left)\n        if abs(temp_difference) > total_difference:\n            total_difference = abs(temp_difference)\n        apple_left -= 1\n\n    return str(total_difference)\n\nprint(solution(input()))"
    },
    {
        "number": 4228,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, l = map(int, stdin.split())\n    apples = [*range(1, n+1)]\n    apple_count = n\n    while len(apples) > 1:\n        temp_count = []\n        for i in range(len(apples)):\n            if apple_count > 0:\n                apple_count -= 1\n                temp_count.append(apple_count)\n            else:\n                temp_count.append(0)\n        max_count = max(temp_count)\n        for i in range(len(temp_count)):\n            if temp_count[i] == max_count:\n                apples.remove(apples[i])\n                apple_count += 1\n    return sum(apples)"
    },
    {
        "number": 4228,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, L = (int(i) for i in stdin.split())\n\n    apples = range(1, N+1)\n    apples = list(apples)\n    maxFlavor = 0\n    maxFlavorId = 0\n\n    # I am making a comparison of the difference between the flavor of the remaining N-1 apples and the flavor of the apple pie made of all the remaining N apples\n    for i in apples:\n        diff = abs(i-L)\n        if diff > maxFlavor:\n            maxFlavorId = i\n            maxFlavor = diff\n\n    # In this loop I am making a comparison of the difference between the flavor of the remaining N-1 apples and the flavor of the apple pie made of all the remaining N apples\n    for i in apples:\n        diff = abs(i-maxFlavorId)\n        if diff > maxFlavor:\n            maxFlavorId = i\n            maxFlavor = diff\n\n    return str(maxFlavorId)\n\n\nsolution(\"5 2\")"
    },
    {
        "number": 4228,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, l = map(int, stdin.split())\n    l += 100\n    if n % 2:\n        return \"No\"\n    ans = 0\n    while n:\n        if n % 2:\n            ans += l\n        n //= 2\n        l -= 1\n    return str(ans)\n"
    },
    {
        "number": 4228,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, L = list(map(int, stdin.split()))\n    apple = list(map(int, stdin.split()))\n    apple.sort()\n    diff = float('inf')\n    for i in range(N-1):\n        diff = min(diff, abs(L-apple[i])+abs(L-apple[i+1]))\n    return str(diff)\n    \n"
    },
    {
        "number": 4228,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, l = map(int, stdin.split())\n    apple_pie = n * l\n    apple_pie = sorted(list(map(int, str(apple_pie))))\n    count = 0\n    apple_pie_list = []\n    for apple in apple_pie:\n        if apple > 0:\n            count += 1\n        else:\n            apple_pie_list.append(count)\n            count = 0\n    apple_pie_list.append(count)\n    apple_pie_list = sorted(apple_pie_list)\n    print('Apple pie: ', apple_pie)\n    print('Apple pie list: ', apple_pie_list)\n    for index, apple_pie_value in enumerate(apple_pie_list):\n        print('Apple pie at index {} has value: {}'.format(index, apple_pie_value))\n        for apple_pie_value_index, apple_pie_value_value in enumerate(apple_pie_list):\n            if apple_pie_value_index >= index:\n                print('Apple pie at index {} has value: {}'.format(apple_pie_value_index, apple_pie_value_value))\n                if apple_pie_value_value < abs(apple_pie_value - apple_pie_value_value):\n                    print('Apple pie at index {} has value: {}'.format(apple_pie_value_index, apple_pie_value_value))\n                    print('Changed apple pie value: {}'.format(apple_pie_value - apple_pie_value_value))\n                    apple_pie_value = apple_pie_value - apple_pie_value_value\n                    print('Changed apple pie value: {}'.format(apple_pie_value))\n    print('Final apple pie value: {}'.format(apple_pie_value))\n    print('The final answer is: ', apple_pie_value)\n    return apple_pie_value"
    },
    {
        "number": 4228,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, l = map(int, stdin.split())\n    count = 0\n    apple = list(range(1, n+1))\n    apple.sort(key=lambda x: x - l, reverse=True)\n\n    for i in range(n-1):\n        count += l - apple[i]\n\n    return str(count)\n"
    },
    {
        "number": 4228,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, l = list(map(int, stdin.split(' ')))\n    apples = list(map(int, stdin.split(' ')))\n    n -= 1\n    apples.sort()\n    apples.reverse()\n    # print(apples)\n    \n    ans = 0\n    for i in range(0, n):\n        ans += (l + i - 1) - apples[i]\n\n    return str(ans)"
    },
    {
        "number": 4228,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5 2\n   ... 2 3 4 5 6\n   ... ''')\n    '18'\n    >>> solution('''3 2\n   ... -1 -2 -3\n   ... ''')\n    '9'\n    \"\"\"\n    input = stdin.split()\n    N = int(input[0])\n    L = int(input[1])\n    apples = input[2:]\n    apples = sorted(apples, key=lambda a: -int(a))\n    def find_sum_of_apples(s, e):\n        ans = 0\n        for i in range(s, e):\n            ans += int(apples[i])\n        return ans\n\n    min_diff = float('inf')\n    for i in range(1, N - 1):\n        ans = find_sum_of_apples(i, i + 1) - find_sum_of_apples(i - 1, i)\n        if abs(ans) < min_diff:\n            min_diff = abs(ans)\n    return min_diff\n    \"\"\"\n    if N == 1:\n        return 0\n    if N == 2:\n        return L\n    if N == 3:\n        return L + 1\n    if N == 4:\n        return L + 2\n\n    A = sorted(apples, key=lambda a: int(a), reverse=True)\n    l = A[0]\n    r = A[1]\n    l = int(l)\n    r = int(r)\n    min_diff = float('inf')\n    for i in range(N - 1):\n        if i == 0:\n            ans = l - r\n        else:\n            ans = l + (i + 1) - r\n        min_diff = min(ans, min_diff)\n        l = r\n        r = l + (N - 1 - i)\n    return min_diff\n    \"\"\"\n"
    },
    {
        "number": 4228,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n,l = list(map(int, stdin.split()))\n    \n    left = [0]\n    right = []\n    \n    for i in range(n):\n        left.append(l + left[i])\n        right.append(l + right[i])\n    \n    \n    \n    return right[n-1]"
    },
    {
        "number": 4229,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return '60'"
    },
    {
        "number": 4229,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N <= 10:\n        for i in range(1, N+1):\n            if (i % 3 == 0) and (i % 5 == 0):\n                print(f\"{i} = {'FizzBuzz'}\")\n            elif i % 3 == 0:\n                print(f\"{i} = {'Fizz'}\")\n            elif i % 5 == 0:\n                print(f\"{i} = {'Buzz'}\")\n            else:\n                print(f\"{i} = {i}\")\n    else:\n        print(\"Invalid Input\")\n\nstdin = input()\nsolution(stdin)\n"
    },
    {
        "number": 4229,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    F = 1\n    S = 1\n    for i in range(1, N + 1):\n        if F % 3 == 0 and F % 5 == 0:\n            S += F\n        elif F % 3 == 0:\n            S += F\n        elif F % 5 == 0:\n            S += F\n        else:\n            S += i\n        F += 1\n    return str(S)\n"
    },
    {
        "number": 4229,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.rstrip('\\n')\n    N = int(stdin)\n    if N == 1:\n        return \"1\"\n    fizzbuzz = [1,2,\\mbox{Fizz},4,\\mbox{Buzz},\\mbox{Fizz},7,8,\\mbox{Fizz},\\mbox{Buzz},11,\\mbox{Fizz},13,14,\\mbox{FizzBuzz}]\n    return sum(fizzbuzz[:N])\n    "
    },
    {
        "number": 4229,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    for _ in range(int(stdin)):\n        if (3 in stdin and 5 in stdin) or not 3 in stdin and not 5 in stdin:\n            print(f\"{stdin} => {'FizzBuzz'}\")\n        elif 3 in stdin and not 5 in stdin:\n            print(f\"{stdin} => {'Fizz'}\")\n        elif not 3 in stdin and 5 in stdin:\n            print(f\"{stdin} => {'Buzz'}\")\n        elif not 3 in stdin and not 5 in stdin:\n            print(f\"{stdin} => {stdin}\")\n        else:\n            print(f\"{stdin} => {stdin}\")\n    return \"Done\"\n\nsolution(input())\n\"\"\"\n\nn = int(input())\n\nfizzbuzz_sequence = []\nfor num in range(1, n+1):\n    if num % 3 == 0 and num % 5 == 0:\n        fizzbuzz_sequence.append(\"FizzBuzz\")\n    elif num % 3 == 0:\n        fizzbuzz_sequence.append(\"Fizz\")\n    elif num % 5 == 0:\n        fizzbuzz_sequence.append(\"Buzz\")\n    else:\n        fizzbuzz_sequence.append(num)\n\nprint(f\"{' '.join(fizzbuzz_sequence)}\")\n"
    },
    {
        "number": 4229,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    sum = 0\n    for x in range(1, int(stdin) + 1):\n        if x % 15 == 0:\n            sum += x\n            print(f'{x}: {x}')\n        elif x % 5 == 0:\n            sum += x\n            print(f'{x}: {x}')\n        elif x % 3 == 0:\n            sum += x\n            print(f'{x}: {x}')\n        else:\n            print(x)\n    return str(sum)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4229,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    fizzbuzz = 0\n    fizz = 0\n    buzz = 0\n    for i in range(1, n + 1):\n        fizzbuzz = fizzbuzz + i\n        if i % 3 == 0:\n            fizz = fizz + i\n        if i % 5 == 0:\n            buzz = buzz + i\n    return str(fizzbuzz)"
    },
    {
        "number": 4229,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    ans = 0\n    cnt = 1\n    while True:\n        if cnt % 3 == 0 and cnt % 5 == 0:\n            ans += cnt\n        elif cnt % 3 == 0:\n            ans += cnt\n        elif cnt % 5 == 0:\n            ans += cnt\n        elif cnt % 3 == 0 or cnt % 5 == 0:\n            ans += cnt\n        else:\n            ans += cnt\n        cnt += 1\n        if cnt > n:\n            return str(ans)"
    },
    {
        "number": 4229,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    fizzbuzz = [1, 2, 'Fizz', 'Buzz', 4, 'Fizz', 7, 8, 'Fizz', 'Buzz', 11, 'Fizz', 13, 14, 'FizzBuzz']\n    return str(sum(fizzbuzz[:n]))\nprint(solution(input()))\n"
    },
    {
        "number": 4229,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    fizzbuzz: List[int] = []\n    for i in range(1, n + 1):\n        if i % 3 == 0 and i % 5 == 0:\n            fizzbuzz.append(i)\n        if i % 3 == 0:\n            fizzbuzz.append(i)\n        if i % 5 == 0:\n            fizzbuzz.append(i)\n        else:\n            fizzbuzz.append(i)\n    print(sum(fizzbuzz))\n"
    },
    {
        "number": 4230,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    X, N = map(int, stdin.split())\n\n    if N == 1:\n        return str(X)\n\n    p = sorted(map(int, stdin.split()))\n\n    d = float('inf')\n    for i in range(N-1):\n        x_i = abs(X - p[i])\n        x_n = abs(X - p[i+1])\n        d = min(x_i, x_n)\n        if x_i < x_n:\n            break\n\n    if d == float('inf'):\n        return str(p[0])\n    return str(p[i+1])\n"
    },
    {
        "number": 4230,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.split(' ')\n    n = int(n)\n    k = int(k)\n    a = []\n    for i in range(1, k+1):\n        a.append(i)\n    l = len(a)\n    print(a)\n    for i in range(1, n):\n        print(a)\n        for j in range(l-1):\n            if abs(int(a[j]) - int(a[j+1])) > abs(int(a[j]) - int(a[j-1])):\n                a[j], a[j+1] = a[j+1], a[j]\n        l = len(a)\n        print(a)\n    return str(a[0])\n"
    },
    {
        "number": 4230,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x, n = list(map(int, stdin.split()))\n    p = list(map(int, stdin.split()))\n\n    a = p[0]\n    b = p[1]\n    c = p[2]\n    d = p[3]\n    e = p[4]\n    f = p[5]\n\n    ans = float('inf')\n\n    if abs(a - x) == abs(b - x):\n        ans = min(ans, a)\n    if abs(c - x) == abs(d - x):\n        ans = min(ans, c)\n    if abs(e - x) == abs(f - x):\n        ans = min(ans, e)\n\n    return str(ans)\n"
    },
    {
        "number": 4230,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    X, N = stdin.split()\n    X = int(X)\n    N = int(N)\n    return min(abs(X - x) for x in range(1, N + 1))\n"
    },
    {
        "number": 4230,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    integers = [*map(int, stdin.split())]\n    min_diff = float('inf')\n    n = len(integers)\n    sorted_integers = sorted(integers)\n    for i in range(n):\n        diff = abs(sorted_integers[i] - x)\n        if diff == 0:\n            return str(sorted_integers[i])\n        elif diff < min_diff:\n            min_diff = diff\n            min_index = i\n\n    return str(sorted_integers[min_index])"
    },
    {
        "number": 4230,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    X, N = stdin.split(\" \")\n    X = int(X)\n    N = int(N)\n    ans = float('inf')\n    num_list = list(map(int, stdin.split()))\n    num_list.sort()\n    min_diff = float('inf')\n    for i in range(N):\n        if num_list[i] <= X:\n            min_diff = min(min_diff, abs(num_list[i] - X))\n    print(min_diff)"
    },
    {
        "number": 4230,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    X, N = map(int, stdin.split(\" \"))\n    Xs = list(map(int, stdin.split(\" \")[1:]))\n    # print(Xs)\n    for i in range(len(Xs)):\n        if Xs[i] <= X:\n            print(min(Xs))\n            break\n        else:\n            Xs.pop(i)\n    return Xs[0]\n\nprint(solution(input()))\n\n\n\"\"\"\n"
    },
    {
        "number": 4230,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin.strip())\n    s = sorted([int(stdin) for stdin in stdin.split()])\n    p = [-1 for _ in range(len(s))]\n    d = float('inf')\n    for i in range(len(s)):\n        if d < abs(x - s[i]):\n            d = abs(x - s[i])\n            p[i] = s[i]\n    if p[0]!= -1:\n        return str(p[0])\n    return '-1'\n"
    },
    {
        "number": 4230,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x, n = map(int, stdin.split())\n    p = map(int, stdin.split())\n    \n    for i in range(1, n):\n        for j in range(i):\n            if abs(p[i] - p[j]) < abs(p[i] - x):\n                x = p[i]\n    print(x)\n\nsolution(input())"
    },
    {
        "number": 4230,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x, n = map(int, stdin.split())\n    seq = list(map(int, stdin.split()))\n    arr = []\n    for i in range(len(seq)):\n        arr.append(abs(seq[i]-x))\n    arr.sort()\n    return str(arr[0])\n"
    },
    {
        "number": 4231,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    _, w = stdin.split()\n    _, h = w.split()\n    h = int(h)\n    w = int(w)\n    count = 0\n    for i in range(h):\n        for j in range(w):\n            if w % 2 == 0:\n                if i % 2 == 0:\n                    if j % 2 == 0:\n                        count += 1\n                    else:\n                        count += 2\n                else:\n                    if j % 2 == 0:\n                        count += 2\n                    else:\n                        count += 1\n            else:\n                if i % 2 == 0:\n                    if j % 2 == 0:\n                        count += 2\n                    else:\n                        count += 1\n                else:\n                    if j % 2 == 0:\n                        count += 1\n                    else:\n                        count += 2\n    return str(count)\n"
    },
    {
        "number": 4231,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip().split()\n    if len(stdin)!= 2:\n        raise ValueError(\"Invalid input. Length of stdin should be 2.\")\n    stdin = list(map(int, stdin))\n    return str(math.prod(stdin))\n\nprint(solution(input(\"Enter your stdin: \")))\n"
    },
    {
        "number": 4231,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.split())\n    h, w = min(H, W), max(H, W)\n    m, n = h, w\n    row = [[0]*n for _ in range(m)]\n    for i in range(h):\n        for j in range(w):\n            if i==0 or j==0 or i==m-1 or j==n-1:\n                row[i][j] = 1\n    count = 0\n    for i in range(m):\n        for j in range(n):\n            if row[i][j] == 0:\n                count += 1\n    return str(count)\n\n\"\"\"\ndef"
    },
    {
        "number": 4231,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    if n == m == 1:\n        return \"1\"\n    r = []\n    for i in range(n):\n        row = stdin.strip().split()\n        for j in range(m):\n            if row[j] == \"0\":\n                r.append(i)\n                r.append(j)\n    return \"1\" if len(r) == n * m else \"0\"\n\"\"\"\n"
    },
    {
        "number": 4231,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split()\n\n    h, w = int(lines[0]), int(lines[1])\n\n    h_paint = w_paint = 0\n    for h_ in range(h):\n        if lines[2 + h_] == '1':\n            h_paint += 1\n\n    for w_ in range(w):\n        if lines[2 + h + w_] == '1':\n            w_paint += 1\n\n    return str(h_paint * w_paint)\n\nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 4231,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    rows, columns = map(int, stdin.split())\n    for row in range(rows):\n        print(sum(int(input()) for _ in range(columns)))\n    return stdin"
    },
    {
        "number": 4231,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    H, W = map(int, lines[0].split())\n    h = min(H, max(min(map(int, lines[1].split())), 1))\n    w = min(W, max(min(map(int, lines[2].split())), 1))\n    return str(h * w - 1)\n"
    },
    {
        "number": 4231,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.split())\n    h, w = 1, 1\n\n    while H!= h:\n        h += 1\n        while W!= w:\n            w += 1\n            print(h, w, sep=' ')\n\n    return str(h*w - 1)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4231,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.split())\n    h, w = min(H, W), max(H, W)\n    return str(w * h - (w - 1) * (h - 1))\n"
    },
    {
        "number": 4231,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4232,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    num, k = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    for i in arr:\n        if len(arr) - k >= i <= num:\n            return str(i)\n    return '-1'\n"
    },
    {
        "number": 4232,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    seq = sorted(map(int, stdin.split()))\n    count = 0\n    for i in range(n):\n        if seq[i] <= seq[n-k]:\n            count += 1\n    if count >= n - k:\n        return f'{seq[n-k]}'\n    return '-1'"
    },
    {
        "number": 4232,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    seq = list(map(int, stdin.split()))\n    if k == n:\n        return '-1'\n    for i in seq:\n        if i >= k:\n            return i"
    },
    {
        "number": 4232,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    sequence = list(map(int, stdin.split()))\n    x = -1\n    \n    for i in range(n):\n        if sequence[i] < 10:\n            continue\n        if sequence[i] <= x:\n            continue\n        if sequence.count(sequence[i]) > k:\n            continue\n        x = sequence[i]\n        \n    return str(x) if x!= -1 else '-1'\n"
    },
    {
        "number": 4232,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    num_of_elem, k = stdin.split(' ')\n    k = int(k)\n    nums = list(map(int, stdin.split()))\n    n = len(nums)\n    res = -1\n    for i in range(1, 10 ** 9 + 1):\n        is_valid = True\n        count = 0\n        for j in range(n):\n            if i > nums[j]:\n                is_valid = False\n                break\n            if i < nums[j]:\n                count += 1\n        if count == k:\n            res = i\n            break\n    if res!= -1:\n        return str(res)\n    return '-1'"
    },
    {
        "number": 4232,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    m = int(k / n)\n    res = -1\n    for x in range(1, 10 ** 9 + 1):\n        if sum(1 if a[i] <= x else 0 for i in range(n)) < m:\n            res = x\n            break\n    return str(res)\n"
    },
    {
        "number": 4232,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    lst = stdin.strip().split()\n    n, k = int(lst[0]), int(lst[1])\n    st = lst[2]\n\n    if n < k:\n        return \"-1\"\n\n    lst = st.split()\n\n    for i in range(k):\n        print(st.count(lst[i]), end=\" \")\n\n    print()\n"
    },
    {
        "number": 4232,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    arr = [int(x) for x in stdin.split()[1].split(\" \")]\n    return -1 if k > n else str(arr[k-1])\n"
    },
    {
        "number": 4232,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # replace this for solution\n    return '-1'\n    # return '123456789'\n"
    },
    {
        "number": 4232,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    This is the official docstring for this kata. Be sure to read through it to understand the task.\n    '''\n    n, k = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    \n    for x in arr:\n        if(arr.count(x)==k):\n            return str(x)\n    return \"-1\""
    },
    {
        "number": 4233,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    grid = stdin.split(\"\\n\")\n    for i in range(n):\n        if len(grid[i])!= m:\n            return \"Invalid\"\n    if n > 100:\n        return \"Invalid\"\n    if n < 1 or m < 1:\n        return \"Invalid\"\n    answer = 0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == \"*\":\n                answer += 1\n    if answer > n * m:\n        return \"Invalid\"\n    return str(answer)\n\nprint(solution(input()))\n\ndef"
    },
    {
        "number": 4233,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    grid = stdin.strip()\n\n    if not all(c == '.' for c in grid):\n        return '-1'\n\n    if n == 1 or m == 1:\n        return '1'\n\n    grid = \"*\" + grid + \"*\"\n    \n    \n    \n    return\n"
    },
    {
        "number": 4233,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def get_grid():\n        lines = stdin.strip().split()\n        rows = []\n        for line in lines:\n            rows.append(list(line))\n        return rows\n\n    grid = get_grid()\n    return get_stars(grid)\n\n\ndef"
    },
    {
        "number": 4233,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if (n < 3 or m < 3):\n        return \"-1\"\n    f = 1\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if (f == n and f == m):\n                return \"-1\"\n            if (f == n and f > m):\n                return f\n            if (f == m and f > n):\n                return f\n            f += 1\n    return f-1"
    },
    {
        "number": 4233,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def intersect_circles(a, b):\n        s_a, r_a = a\n        s_b, r_b = b\n        return s_a, s_b, max(r_a, r_b) - min(r_a, r_b)\n\n    rows = stdin.split()\n    N, M = map(int, rows[0].split())\n    grid = [[row for row in stdin.split()] for _ in range(N)]\n\n    count = 0\n    for i in range(N):\n        for j in range(M):\n            for k in range(min(i, M - 1 - j)):\n                a = k + 1\n                b = k + 2\n                c = i - a\n                d = j - b\n                r = min(a, b)\n                if r >= 0 and max(a, b) < N and max(c, d) < M:\n                    m = intersect_circles(grid[i][j], grid[i - a][j - b])\n                    if m[2] >= 0:\n                        count += 1\n    return str(count) if count < N * M else '-1'\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4233,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    grid = ''.join(stdin.splitlines())\n    if not (n > 1 and n * m > 100):\n        return '-1'\n    grid = grid.replace('*', '.').replace('.', '*').replace(' ', '')\n    stars = 0\n    for row in range(n):\n        for col in range(m):\n            if grid[row * m + col] == '*':\n                stars += 1\n    return str(stars)\n"
    },
    {
        "number": 4233,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    if n < 1 or m < 1:\n        return -1\n    grid = stdin.split('\\n')\n    for i in range(n):\n        if grid[i] == '':\n            continue\n        grid[i] = grid[i].strip()\n        if len(grid[i]) < 2:\n            return -1\n        for j in range(len(grid[i])):\n            if grid[i][j]!= '*' and grid[i][j]!= '.':\n                return -1\n    \n    grid = ''.join(grid)\n    for i in range(0, len(grid), 3):\n        for j in range(i, i+3):\n            if grid[j] == '*' or grid[j] == '.':\n                continue\n            if grid[j]!= '*' and grid[j]!= '.':\n                return -1\n    \n    answer = 0\n    for i in range(len(grid)):\n        if grid[i] == '*':\n            answer += 1\n    return str(answer)"
    },
    {
        "number": 4233,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if not (1 <= n <= 100 and 1 <= m <= 100):\n        return \"-1\"\n    return str(min(n * m, max(n * m, max(n, m))))\n"
    },
    {
        "number": 4233,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n\n    res = []\n    for _ in range(n):\n        res.append(stdin.split())\n\n    res.pop()\n\n    for i in range(n):\n        for j in range(m):\n            if res[i][j] == '*':\n                res[i].remove('*')\n                res[i].remove('*')\n                break\n\n    if len(res) == 0:\n        return '-1'\n    return f'{len(res)} {len(res[0])} {len(res[0][0])}'"
    },
    {
        "number": 4233,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    grid = []\n    for i in range(n):\n        grid.append(list(stdin))\n    ret = find(n, m, grid)\n    return str(ret)\ndef"
    },
    {
        "number": 4234,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    length = len(stdin)\n    if length <= 1:\n        return stdin\n    for idx in range(0, length):\n        if not is_even(idx, length):\n            return stdin\n    for i in range(1, length):\n        if stdin[0]!= stdin[i]:\n            return stdin[:i] + stdin[i + 1:]\n    return stdin\n\n\ndef"
    },
    {
        "number": 4234,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    while True:\n        if not s:\n            break\n        if len(s) == 1:\n            return str(1)\n        i = 0\n        while i < len(s)-1:\n            if s[i] == s[i+1]:\n                s = s[:i] + s[i+2:]\n                break\n            i += 1\n    return s\n"
    },
    {
        "number": 4234,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    result = \"\"\n    for i in range(len(stdin)):\n        if i % 2 == 0:\n            if stdin[i]!= stdin[i + 1]:\n                result += stdin[i]\n        else:\n            result += stdin[i]\n    return result\n"
    },
    {
        "number": 4234,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    s = stdin\n    #print(n, s)\n\n    for j in range(1, n):\n        #print(j)\n        s = s[1:] + s[0]\n\n    #print(s)\n\n    return s\n"
    },
    {
        "number": 4234,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin\n    for i in range(len(line)):\n        if line[i] == line[i+1]:\n            continue\n        else:\n            return f'{i+1}'\n    return f'{len(line)}'"
    },
    {
        "number": 4234,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    for i in range(len(s) - 1):\n        if s[i] == s[i + 1]:\n            s = s[:i] + s[i + 2:]\n            break\n    return s\n"
    },
    {
        "number": 4234,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.replace(\"\\n\", \"\").lower()\n    i = 0\n    j = len(s) - 1\n\n    while j > i:\n        if s[i]!= s[j]:\n            # we can delete 1 character\n            # we must delete j or j - 1, or both\n            if s[i]!= s[j - 1]:\n                # we must delete j\n                j -= 1\n            else:\n                # we must delete j - 1\n                j -= 2\n            break\n        i += 1\n        j -= 1\n    return \"\".join(sorted(s)) if j == i else -1\n"
    },
    {
        "number": 4234,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    s = stdin\n    max_i = len(s)\n    if max_i == 0:\n        return s\n    if max_i == 1:\n        return s\n    if max_i == 2:\n        if s[0] == s[1]:\n            return s\n        else:\n            return s[1]\n    else:\n        if s[0] == s[1] and s[2] == s[3]:\n            return s[:3]\n        else:\n            s = list(s)\n            s = s[1:]\n            return ''.join(s)\n"
    },
    {
        "number": 4234,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if len(s) == 0:\n        print(0)\n        return ''\n    if len(s) == 1:\n        print(0)\n        return s\n    if len(s) == 2:\n        if s[0]!= s[1]:\n            print(1)\n            return s\n        else:\n            print(0)\n            return ''\n    if len(s) % 2 == 0:\n        print(0)\n        return ''\n    cnt = 0\n    i = 0\n    while i < len(s):\n        cnt += 1\n        if i+1 < len(s) and s[i]!= s[i+1]:\n            break\n        i += 2\n    print(cnt)\n    return s[:i]"
    },
    {
        "number": 4234,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.split()[1]\n    arr = list(s)\n    new_s = list()\n    for i in range(len(arr)):\n        if i%2==0:\n            new_s.append(arr[i])\n    print(''.join(new_s))\n\nsolution(input())\n"
    },
    {
        "number": 4235,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    g = [[] for _ in range(n)]\n    for i in range(m):\n        u, v = map(int, stdin.split())\n        g[u - 1].append(v - 1)\n        g[v - 1].append(u - 1)\n    for i in range(n):\n        if len(g[i]) > 2:\n            return \"NO\"\n    return \"\".join(map(str, map(int, map(\"\".join, g))))\n"
    },
    {
        "number": 4235,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 4235,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    graph = {int(v): [] for v in stdin.split()[:-1]}\n    for v1, v2 in (stdin.split()[:-1]):\n        graph[int(v1)].append(int(v2))\n        graph[int(v2)].append(int(v1))\n    return \"NO\" if directed_connected(graph) else \"YES\"\n\n\ndef"
    },
    {
        "number": 4235,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = [(i, int(j)) for i, j in (x.split() for x in stdin.splitlines()) if j]\n    g = {i: set(j for j in range(1, n + 1) if (i, j) in edges or (j, i) in edges) for i in range(1, n + 1)}\n    for e, u, v in edges:\n        if u in g[v]:\n            return 'NO'\n        if v in g[u]:\n            return 'NO'\n    ans = ''.join(map(str, map(int, '10100'.rjust(m, '0'))))\n    return 'YES' if all(a == '0' or b == '1' for a, b in zip(ans, ''.join(map(str, range(1, n + 1))))) else 'NO'\n\n\n---another way\ndef"
    },
    {
        "number": 4235,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, M = list(map(int, stdin.split()))\n    res = []\n    if N-1 < M:\n        return 'NO'\n    graph = collections.defaultdict(set)\n    for _ in range(M):\n        u, v = list(map(int, stdin.split()))\n        graph[u].add(v)\n        graph[v].add(u)\n    for u in range(N):\n        if len(graph[u]) <= 1:\n            res.append('1')\n            continue\n        visited = set()\n        queue = collections.deque([u])\n        while queue:\n            node = queue.popleft()\n            visited.add(node)\n            if len(graph[node]) == 1:\n                res.append('1')\n                break\n            for nei in graph[node]:\n                if nei not in visited:\n                    queue.append(nei)\n        if len(visited) == N:\n            res.append('1')\n    return ''.join(res)\n\n\"\"\"\nfrom collections import defaultdict\n\ndef"
    },
    {
        "number": 4235,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    G = [[] for _ in range(n)]\n\n    for _ in range(m):\n        u, v = map(int, stdin.split())\n        G[u - 1].append(v - 1)\n        G[v - 1].append(u - 1)\n\n    # check if graph is connected\n    for v in range(n):\n        if not set(G[v]) <= set(range(n)):\n            return 'NO'\n\n    # check if graph is bipartite\n    parent = [-1] * n\n    for i in range(n):\n        q = deque([i])\n        while q:\n            u = q.popleft()\n            for v in G[u]:\n                if parent[v] == -1:\n                    parent[v] = i\n                    q.append(v)\n                else:\n                    if parent[v]!= parent[u]:\n                        return 'NO'\n    return 'YES'\n\n'''"
    },
    {
        "number": 4235,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    \n    graph = [[] for _ in range(n)]\n    \n    for _ in range(m):\n        u, v = list(map(int, stdin.split()))\n        \n        if u not in graph[v]:\n            graph[u].append(v)\n            graph[v].append(u)\n    \n    graph = graph[1:]\n    \n    \n    for i in range(len(graph)):\n        if len(graph[i]) > 2:\n            return 'NO'\n    \n    for i in range(len(graph)):\n        for j in range(len(graph)):\n            if i!= j and graph[i] == graph[j]:\n                return 'NO'\n    \n    \n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        u, v = list(map(int, stdin.split()))\n        \n        if u not in graph[v]:\n            graph[u].append(v)\n            graph[v].append(u)\n    \n    graph = graph[1:]\n    \n    \n    for i in range(len(graph)):\n        if len(graph[i]) > 2:\n            return 'NO'\n    \n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        u, v = list(map(int, stdin.split()))\n        \n        if u not in graph[v]:\n            graph[u].append(v)\n            graph[v].append(u)\n    \n    graph = graph[1:]\n    \n    \n    for i in range(len(graph)):\n        if len(graph[i]) > 2:\n            return 'NO'\n    \n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        u, v = list(map(int, stdin.split()))\n        \n        if u not in graph[v]:\n            graph[u].append(v)\n            graph[v].append(u)\n    \n    graph = graph[1:]\n    \n    \n    for i in range(len(graph)):\n        if len(graph[i]) > 2:\n            return 'NO'\n    \n    \n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        u, v = list(map(int, stdin.split()))\n        \n        if u not in graph[v]:\n            graph[u].append(v)\n            graph[v].append(u)\n    \n    graph = graph[1:]\n    \n    \n    for i in range(len(graph)):\n        if len(graph[i]) > 2:\n            return 'NO'\n    \n    \n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        u, v = list(map(int, stdin.split()))\n        \n        if u not in graph[v]:\n            graph[u].append(v)\n            graph[v].append(u)\n    \n    graph = graph[1:]\n    \n    \n    for i in range(len(graph)):\n        if len(graph[i]) > 2:\n            return 'NO'\n    \n    \n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        u, v = list(map(int, stdin.split()))\n        \n        if u not in graph[v]:\n            graph[u].append(v)\n            graph[v].append(u)\n    \n    graph = graph[1:]\n    \n    \n    for i in range(len(graph)):\n        if len(graph[i]) > 2:\n            return 'NO'\n    \n    \n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        u, v = list(map(int, stdin.split()))\n        \n        if u not in graph[v]:\n            graph[u].append(v)\n            graph[v].append(u)\n    \n    graph = graph[1:]\n    \n    \n    for i in range(len(graph)):\n        if len(graph[i]) > 2:\n            return 'NO'\n    \n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        u, v = list(map(int, stdin.split()))\n        \n        if u not in graph[v]:\n            graph[u].append(v)\n            graph[v].append(u)\n    \n    graph = graph[1:]\n    \n    \n    for i in range(len(graph)):\n        if len(graph[i]) > 2:\n            return 'NO'\n    \n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        u, v = list(map(int, stdin.split()))\n        \n        if u not in graph[v]:\n            graph[u].append(v)\n            graph[v].append(u)\n    \n    graph = graph[1:]\n    \n    \n    for i in range(len(graph)):\n        if len(graph[i]) > 2:\n            return 'NO'\n    \n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        u, v = list(map(int, stdin.split()))\n        \n        if u not in graph[v]:\n            graph[u].append(v)\n            graph[v].append(u)\n    \n    graph = graph[1:]\n    \n    \n    for i in range(len(graph)):\n        if len(graph[i]) > 2:\n            return 'NO'\n    \n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        u, v = list(map(int, stdin.split()))\n        \n        if u not in graph[v]:\n            graph[u].append(v)\n            graph[v].append(u)\n    \n    graph = graph[1:]\n    \n    \n    for i in range(len(graph)):\n        if len(graph[i]) > 2:\n            return 'NO'\n    \n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        u, v = list(map(int, stdin"
    },
    {
        "number": 4235,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    G = [[] for _ in range(n)]\n    for _ in range(m):\n        u, v = map(int, stdin.split())\n        u -= 1\n        v -= 1\n        G[u].append(v)\n        G[v].append(u)\n    return \"NO\" if not directed_graph_valid(G) else directed_graph_orientation(G)\n\ndef"
    },
    {
        "number": 4235,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n == 1 and m == 1:\n        return 'YES'\n    \n    # \uadf8\ub798\ud504\n    graph = [[] for _ in range(n)]\n    for u, v in (map(int, stdin.split())):\n        graph[u - 1].append(v - 1)\n        graph[v - 1].append(u - 1)\n    \n    # \uc6d0\ub798 \uc54c\uace0\ub9ac\uc998 \ucd9c\ub825\ud574\uc11c \uc65c \uc548\ub418\ub294 \uc9c0 \ud655\uc778\n    visited = set()\n    \n    for i in range(len(graph)):\n        visited.add(i)\n    \n    # \uc774\ub3d9\uac00\ub2a5\ud55c \uacbd\ub85c\ub4e4\n    possible_paths = set()\n    \n    # \uc2dc\uc791\uc810\uc744 \ucc3e\ub294\ub2e4\n    for i in range(len(graph)):\n        # \uc544\uc9c1 \uc774\ub3d9\ud560 \uacbd\ub85c\uac00 \uc5c6\uc73c\uba74\n        if len(graph[i]) == 0:\n            visited.add(i)\n            possible_paths.add('0' * len(graph))\n        \n        # \ubc29\ubb38\ud558\uc9c0 \uc54a\uc740 \uc6d0\ub798 \uc54c\uace0\ub9ac\uc998\uc5d0\uc11c \uc774\ub3d9\ud560 \uc218 \uc788\ub294 \uc704\uce58\ub4e4\n        else:\n            for j in graph[i]:\n                if j not in visited:\n                    visited.add(j)\n                    possible_paths.add('0' * len(graph))\n            \n    \n    # \uc644\uc804\ud0d0\uc0c9\n    for path in possible_paths:\n        if len(path) >= 2:\n            continue\n        \n        for i in range(len(graph)):\n            for j in graph[i]:\n                if path[j] == '1' and i!= j:\n                    return 'NO'\n        \n        return path"
    },
    {
        "number": 4235,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    n, m = map(int, stdin[0].split())\n    edges = []\n    for i in range(1, m + 1):\n        u, v = map(int, stdin[i].split())\n        edges.append((u, v))\n    # print(n, m, edges)\n\n    # To do DFS\n    # for each node, set visited = False\n    # for each edge from root, check if root is not visited\n    # when the root is visited, return False\n    # after the DFS, print the node and whether it should be directed\n\n    visited = [False] * n\n\n    def dfs(node):\n        if visited[node]:\n            return False\n        visited[node] = True\n        for nei in edges:\n            if nei[0] == node and nei[1] not in visited:\n                if not dfs(nei[1]):\n                    return False\n            if nei[1] == node and nei[0] not in visited:\n                if not dfs(nei[0]):\n                    return False\n        return True\n\n    for i in range(n):\n        if not dfs(i):\n            return \"NO\"\n\n    # print(visited)\n    # print(edges)\n    ans = \"\"\n    for i in range(m):\n        if edges[i][0] in visited and edges[i][1] in visited:\n            ans += '0'\n        else:\n            ans += '1'\n    return ans"
    },
    {
        "number": 4236,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdout.strip()\n    \n"
    },
    {
        "number": 4236,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    xs = list(map(int, stdin.split()))\n    xs = set(xs)\n    xs = list(xs)\n    xs.sort()\n    cnt = 0\n    for i in range(len(xs)):\n        left = xs[i]\n        right = xs[i]\n        for j in range(i + 1, len(xs)):\n            left = min(left, xs[j])\n            right = max(right, xs[j])\n            if left > right:\n                break\n            elif left == right:\n                continue\n            else:\n                cnt += 1\n    print(cnt)\n    return ''\n\nsolution(\"3 5\\n2 2\\n1 2\\n5 5\")\nsolution(\"1 7\\n1 7\\n\")"
    },
    {
        "number": 4236,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = (int(x) for x in stdin.split())\n    points = set()\n    for i in range(n):\n        l, r = (int(x) for x in stdin.split())[:2]\n        points.update(range(l, r + 1))\n    segments = []\n    for i in range(n):\n        l, r = (int(x) for x in stdin.split())[:2]\n        segments.append((l, r))\n    res = 0\n    for p in range(m + 1):\n        if p not in points:\n            res += 1\n    return str(res) if res else '0'\n"
    },
    {
        "number": 4236,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join([\n        str(len(set(range(1, i + 2)) - set(map(int, stdin.split()))))\n        for i in range(int(stdin.split()[0]), int(stdin.split()[1]) + 1)\n    ])\n"
    },
    {
        "number": 4236,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    segments = [list(map(int, stdin.split())) for _ in range(n)]\n    results = []\n    for i in range(1, m + 1):\n        for j in range(1, m + 1):\n            if i!= j:\n                overlap = 0\n                for segment in segments:\n                    if segment[1] <= i and segment[0] <= j:\n                        overlap += 1\n                if overlap == 0:\n                    results.append(i)\n                    results.append(j)\n    return str(len(results)) + \"\\n\" + \" \".join(str(i) for i in sorted(results))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4236,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    segments = []\n    for i in range(n):\n        segments.append((i+1, *map(int, stdin.split())))\n    segments.sort()\n\n    output = 0\n    points = []\n    for i, segment in enumerate(segments):\n        l, r = segment\n        if not points or not points[-1] <= l:\n            points.append(l)\n        if not points or not points[-1] <= r:\n            points.append(r)\n        output += i + 1\n    return str(output) + '\\n' + '\\n'.join(map(str, points))"
    },
    {
        "number": 4236,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    points = list(map(int, stdin.split()))\n    result = 0\n    points.sort()\n    \n    for p in points:\n        start, end = p, m\n        while start <= end:\n            if start <= points[0] < end:\n                result += 1\n            start += 1\n            end -= 1\n    \n    return str(result) if result else \"0\""
    },
    {
        "number": 4236,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n < 1 or m < 1:\n        return \"0\"\n\n    res = 0\n    points = []\n    for i in range(n):\n        a, b = map(int, stdin.split())\n        points.append((a, b))\n        points.append((b, a))\n    points.sort()\n\n    def is_valid(x):\n        for p1, p2 in points:\n            if x >= p1 and x <= p2:\n                return False\n        return True\n\n    for i in range(m + 1):\n        if is_valid(i):\n            res += 1\n\n    return str(res)\n"
    },
    {
        "number": 4236,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    in_seg = set()\n    for _ in range(n):\n        l, r = map(int, stdin.split())\n        in_seg.add(l)\n        in_seg.add(r)\n    points = set(range(1, m + 1)) - in_seg\n    return f\"{len(points)} {len(points) - len(points.intersection(points))}\" if len(points) == len(points.intersection(points)) else f\"{len(points)} 0\" if len(points) == 0 else f\"0 0\""
    },
    {
        "number": 4236,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    points = [list(map(int, stdin.split())) for _ in range(n)]\n\n    def is_intersect(start_segment, end_segment):\n        return start_segment[0] <= end_segment[1] and start_segment[1] >= end_segment[0]\n    def is_segment_degenerate(start_segment, end_segment):\n        return start_segment[0] == end_segment[1] or start_segment[1] == end_segment[0]\n    \n    def is_point_in_segment(point, start_segment, end_segment):\n        return point >= start_segment[0] and point <= end_segment[1]\n    \n    def is_point_in_intersecting_segment(point, start_segment, end_segment):\n        return is_point_in_segment(point, start_segment, end_segment) or is_point_in_segment(point, end_segment, start_segment)\n    \n    def is_point_in_segment_or_intersecting_segment(point, start_segment, end_segment):\n        return is_point_in_segment(point, start_segment, end_segment) or is_point_in_intersecting_segment(point, start_segment, end_segment)\n    \n    def segment_degenerate_with_point(start_segment, end_segment, point):\n        return is_segment_degenerate(start_segment, end_segment) or is_point_in_intersecting_segment(point, start_segment, end_segment)\n    \n    def segment_degenerate_with_segment(start_segment, end_segment):\n        return is_segment_degenerate(start_segment, end_segment)\n    \n    points_count = 0\n    for point in points:\n        if is_point_in_segment(point, points[0], points[1]):\n            points_count += 1\n    for i in range(len(points)-1):\n        start_segment = points[i]\n        end_segment = points[i+1]\n        for point in points:\n            if segment_degenerate_with_point(start_segment, end_segment, point):\n                points_count += 1\n            elif is_point_in_segment_or_intersecting_segment(point, start_segment, end_segment):\n                points_count += 1\n    return str(points_count)\n\nstdin = '3 5'\nstdin = '1 7'\nstdin = '1 2'\nstdin = '2 2'\nprint(solution(stdin))\n\n'''\nn = int(input())\npoints = [list(map(int, input().split())) for _ in range(n)]\n\npoints_count = 0\nfor point in points:\n    if is_point_in_segment(point, points[0], points[1]):\n        points_count += 1\n    elif is_point_in_segment_or_intersecting_segment(point, points[0], points[1]):\n        points_count += 1\n    for i in range(len(points)-1):\n        start_segment = points[i]\n        end_segment = points[i+1]\n        for point in points:\n            if is_segment_degenerate(start_segment, end_segment) or is_point_in_intersecting_segment(point, start_segment, end_segment):\n                points_count += 1\n                break\nprint(points_count)\n'''\n\n'''\nn = int(input())\npoints = [list(map(int, input().split())) for _ in range(n)]\n\npoints_count = 0\nfor point in points:\n    if is_point_in_segment(point, points[0], points[1]):\n        points_count += 1\n    elif is_point_in_segment_or_intersecting_segment(point, points[0], points[1]):\n        points_count += 1\n    for i in range(len(points)-1):\n        start_segment = points[i]\n        end_segment = points[i+1]\n        for point in points:\n            if is_segment_degenerate(start_segment, end_segment) or is_point_in_intersecting_segment(point, start_segment, end_segment):\n                points_count += 1\n                break\nprint(points_count)\n'''\n"
    },
    {
        "number": 4237,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    if C == 0 or D == 0:\n        return \"0\"\n    return str(int((B-A) / (C * D)))"
    },
    {
        "number": 4237,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    return sum(range(A, B + 1)) - sum(range(C, D + 1))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4237,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    nums = stdin.split()\n    A,B,C,D = nums\n    A,B,C,D = int(A), int(B), int(C), int(D)\n    total = 0\n    for x in range(A,B+1):\n        if x % C == 0 and x % D == 0:\n            total+=1\n    print(total)\nsolution(input())\n"
    },
    {
        "number": 4237,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    res = 0\n    for i in range(A,B+1):\n        if i%C==0 and i%D==0:\n            res+=1\n    return str(res)\n"
    },
    {
        "number": 4237,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A,B,C,D = stdin.split(' ')\n    A,B,C,D = int(A),int(B),int(C),int(D)\n    if A<=B:\n        print(B-A)\n    else:\n        print((B-A)//(C*D)+1)\nsolution(input())\n"
    },
    {
        "number": 4237,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    res = 0\n    for i in range(A,B+1):\n        if i%C==0 and i%D==0:\n            res += 1\n    return str(res)"
    },
    {
        "number": 4237,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    # nums = list(range(A, B + 1))\n    nums = list(range(A, B + 1))\n    sum_result = 0\n    for i in nums:\n        if i % C == 0 or i % D == 0:\n            sum_result += 1\n    return str(sum_result)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4237,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    return str(sum([i for i in range(a, b + 1) if i % c == 0 and i % d == 0]))\n\nprint(solution(input()))\n\n'''\n\n'''\n11. Integer to Roman\n\nRoman numerals are represented by seven different symbols: I, V, X, L, C, D and M.\n\nSymbol       Value\nI             1\nV             5\nX             10\nL             50\nC             100\nD             500\nM             1000\nFor example, two is written as II in Roman numeral, just two one's added together. Twelve is written as, XII, which is simply X + II. The number twenty seven is written as XXVII, which is XX + V + II.\n\nRoman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:\n\n    I can be placed before V (5) and X (10) to make 4 and 9. \n    X can be placed before L (50) and C (100) to make 40 and 90. \n    C can be placed before D (500) and M (1000) to make 400 and 900.\n\nGiven an integer, convert it to a roman numeral. Input is guaranteed to be within the range from 1 to 3999.\n\nExample 1:\n\nInput: 3\nOutput: \"III\"\nExample 2:\n\nInput: 4\nOutput: \"IV\"\nExample 3:\n\nInput: 9\nOutput: \"IX\"\nExample 4:\n\nInput: 58\nOutput: \"LVIII\"\nExplanation: L = 50, V = 5, III = 3.\nExample 5:\n\nInput: 1994\nOutput: \"MCMXCIV\"\nExplanation: M = 1000, CM = 900, XC = 90 and IV = 4.\n'''\n\n\ndef"
    },
    {
        "number": 4237,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    result = 0\n    for i in range(1, int(stdin[0])+1):\n        if not (int(stdin[0])%i and int(stdin[1])%i and int(stdin[2])%i and int(stdin[3])%i):\n            result += 1\n    return result\n"
    },
    {
        "number": 4237,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    common = set()\n    common.add(A)\n    common.add(B)\n    common.add(C)\n    common.add(D)\n    count = 0\n    for i in range(A, B + 1):\n        if i % C == 0 or i % D == 0:\n            count += 1\n            common.add(i)\n    print(count)\n    return list(common)\nsolution(input())\n"
    },
    {
        "number": 4238,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    answer = \"No\"\n    if sum(map(int,stdin))%9==0:\n        answer=\"Yes\"\n    return answer\nsolution(input())\n"
    },
    {
        "number": 4238,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    int_input = int(stdin)\n    s = str(int_input)\n    a = int(s[0])\n    b = int(s[1])\n    c = int(s[2])\n    d = int(s[3])\n    e = int(s[4])\n    f = int(s[5])\n    g = int(s[6])\n    h = int(s[7])\n    i = int(s[8])\n    k = int(s[9])\n    if (a + b + c + d + e + f + g + h + i + k) % 9 == 0:\n        return \"Yes\"\n    else:\n        return \"No\"\n\n\nprint(solution(\"123456789\"))\n"
    },
    {
        "number": 4238,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin\n    sum = 0\n    for i in input:\n        sum += int(i)\n    if sum % 9 == 0:\n        return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4238,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    if (num % 9 == 0):\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4238,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    try:\n        N = int(stdin)\n        return 'Yes' if N % 9 == 0 else 'No'\n    except ValueError:\n        return 'Not a valid input!'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4238,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    if \"\".join(stdin).isdigit():\n        return \"Yes\" if sum(map(int, stdin)) % 9 == 0 else \"No\"\n    else:\n        return \"Invalid input\"\n"
    },
    {
        "number": 4238,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = int(stdin)\n    if stdin % 9 == 0:\n        return 'Yes'\n    return 'No'\n\nsolution(input())\n"
    },
    {
        "number": 4238,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    N = str(N)\n    sum_of_digits = 0\n    for i in range(len(N)):\n        sum_of_digits += int(N[i])\n    if sum_of_digits % 9 == 0:\n        return \"Yes\"\n    else:\n        return \"No\"\n\nprint(solution(input()))\n\"\"\"\n\"\"\"\n"
    },
    {
        "number": 4238,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    digitSum = 0\n    while n > 0:\n        digitSum += n % 10\n        n = n // 10\n    return 'Yes' if digitSum % 9 == 0 else 'No'\n\n\ndef"
    },
    {
        "number": 4238,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    return \"Yes\" if x % 9 == 0 else \"No\"\n"
    },
    {
        "number": 4239,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    N = int(stdin[0])\n    return str(ceilingDivisor(N))\n\n\ndef"
    },
    {
        "number": 4239,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    yen = (int)(n/6)\n    yen_count = (int)(n%6)\n    if(n == 0):\n        return(\"0\")\n    elif(n == 1):\n        return(\"1\")\n    elif(n == 2):\n        return(\"2\")\n    elif(n == 3):\n        return(\"3\")\n    elif(n == 4):\n        return(\"4\")\n    elif(n == 5):\n        return(\"5\")\n    elif(n == 6):\n        return(\"6\")\n    elif(n == 7):\n        return(\"7\")\n    elif(n == 8):\n        return(\"8\")\n    elif(n == 9):\n        return(\"9\")\n    elif(n == 10):\n        return(\"10\")\n    else:\n        return(\"11\")\n"
    },
    {
        "number": 4239,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def main(N: int) -> int:\n        coins = []\n        for i in range(1, 10):\n            coins.append(i * i)\n        dp = [[0 for _ in range(N + 1)] for _ in range(len(coins))]\n        dp[0][0] = 1\n        for i in range(1, len(coins)):\n            dp[i][0] = 1\n        for i in range(1, len(coins)):\n            for j in range(1, N + 1):\n                if j - coins[i] >= 0:\n                    dp[i][j] = dp[i - 1][j] + dp[i][j - coins[i]]\n                else:\n                    dp[i][j] = dp[i - 1][j]\n        return dp[-1][-1]\n    return main(int(stdin))"
    },
    {
        "number": 4239,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    count = 0\n    for i in range(1, N + 1):\n        if i ** 2 <= N:\n            count += 1\n            N -= i ** 2\n        if i ** 3 <= N:\n            count += 1\n            N -= i ** 3\n    return str(count)"
    },
    {
        "number": 4239,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    i = 1\n    while i * (i + 1) / 2 < n:\n        i += 1\n    return str(i)\n"
    },
    {
        "number": 4239,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N: int = int(stdin)\n    N_2 = N*N\n    n = 1\n    while N > 0:\n        if N >= n*n:\n            N -= n*n\n        else:\n            N -= n\n        n += 1\n    print(n)"
    },
    {
        "number": 4239,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    N = int(stdin)\n    if N >= 9 and N <= 36:\n        return '4'\n    if N >= 81 and N <= 9^2:\n        return '5'\n    if N >= 6^2 and N <= 36^2:\n        return '3'\n    if N >= 6^3 and N <= 36^3:\n        return '2'\n    if N >= 1 and N <= 36^3:\n        return '1'\n    return '0'"
    },
    {
        "number": 4239,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    ans = 0\n    for i in range(1,10):\n        ans += i\n        if (ans + i) * i < n:\n            break\n    return str(ans)"
    },
    {
        "number": 4239,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return '4'"
    },
    {
        "number": 4239,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    x = 0\n    if N % 6 == 0:\n        x = 0\n    elif N % 6 == 1:\n        x = 1\n    elif N % 6 == 2:\n        x = 2\n    elif N % 6 == 3:\n        x = 3\n    elif N % 6 == 4:\n        x = 4\n    elif N % 6 == 5:\n        x = 5\n    elif N % 6 == 6:\n        x = 6\n    elif N % 6 == 7:\n        x = 7\n    elif N % 6 == 8:\n        x = 8\n    elif N % 6 == 9:\n        x = 9\n    elif N % 6 == 10:\n        x = 10\n    elif N % 6 == 11:\n        x = 11\n    elif N % 6 == 12:\n        x = 12\n    elif N % 6 == 13:\n        x = 13\n    elif N % 6 == 14:\n        x = 14\n    elif N % 6 == 15:\n        x = 15\n    elif N % 6 == 16:\n        x = 16\n    elif N % 6 == 17:\n        x = 17\n    elif N % 6 == 18:\n        x = 18\n    elif N % 6 == 19:\n        x = 19\n    elif N % 6 == 20:\n        x = 20\n    elif N % 6 == 21:\n        x = 21\n    elif N % 6 == 22:\n        x = 22\n    elif N % 6 == 23:\n        x = 23\n    elif N % 6 == 24:\n        x = 24\n    elif N % 6 == 25:\n        x = 25\n    elif N % 6 == 26:\n        x = 26\n    elif N % 6 == 27:\n        x = 27\n    elif N % 6 == 28:\n        x = 28\n    elif N % 6 == 29:\n        x = 29\n    elif N % 6 == 30:\n        x = 30\n    elif N % 6 == 31:\n        x = 31\n    elif N % 6 == 32:\n        x = 32\n    elif N % 6 == 33:\n        x = 33\n    elif N % 6 == 34:\n        x = 34\n    elif N % 6 == 35:\n        x = 35\n    elif N % 6 == 36:\n        x = 36\n    elif N % 6 == 37:\n        x = 37\n    elif N % 6 == 38:\n        x = 38\n    elif N % 6 == 39:\n        x = 39\n    elif N % 6 == 40:\n        x = 40\n    elif N % 6 == 41:\n        x = 41\n    elif N % 6 == 42:\n        x = 42\n    elif N % 6 == 43:\n        x = 43\n    elif N % 6 == 44:\n        x = 44\n    elif N % 6 == 45:\n        x = 45\n    elif N % 6 == 46:\n        x = 46\n    elif N % 6 == 47:\n        x = 47\n    elif N % 6 == 48:\n        x = 48\n    elif N % 6 == 49:\n        x = 49\n    elif N % 6 == 50:\n        x = 50\n    elif N % 6 == 51:\n        x = 51\n    elif N % 6 == 52:\n        x = 52\n    elif N % 6 == 53:\n        x = 53\n    elif N % 6 == 54:\n        x = 54\n    elif N % 6 == 55:\n        x = 55\n    elif N % 6 == 56:\n        x = 56\n    elif N % 6 == 57:\n        x = 57\n    elif N % 6 == 58:\n        x = 58\n    elif N % 6 == 59:\n        x = 59\n    elif N % 6 == 60:\n        x = 60\n    elif N % 6 == 61:\n        x = 61\n    elif N % 6 == 62:\n        x = 62\n    elif N % 6 == 63:\n        x = 63\n    elif N % 6 == 64:\n        x = 64\n    elif N % 6 == 65:\n        x = 65\n    elif N % 6 == 66:\n        x = 66\n    elif N % 6 == 67:\n        x = 67\n    elif N % 6 == 68:\n        x = 68\n    elif N % 6 == 69:\n        x = 69\n    elif N % 6 == 70:\n        x = 70\n    elif N % 6 == 71:\n        x = 71\n    elif N % 6 == 72:\n        x = 72\n    elif N % 6 == 73:\n        x = 73\n    elif N % 6 == 74:\n        x = 74\n    elif N % 6 == 75:\n        x = 75\n    elif N % 6 == 76:\n        x = 76\n    elif N % 6 == 77:\n        x = 77\n    elif N % 6 == 78:\n        x = 78\n    elif N % 6 == 79:\n        x = 79\n    elif N % 6 == 80:\n        x = 80\n    elif N % 6 == 81:\n        x = 81\n    elif N % 6 == 82:\n        x = 82\n    elif N % 6 == 83:\n        x = 83\n    elif N % 6 == 84:\n        x = 84\n    elif N % 6 == 85:\n        x = 85\n    elif N % 6 == 86:\n        x = 86\n    elif N % 6 == 87:\n        x = 87\n    elif N % 6 == 88:\n        x = 88\n    elif N % 6 == 89:\n        x = 89\n    elif N % 6 == 90:\n        x = 90\n    elif N % 6 == 91:\n        x = 91\n    elif N % 6 == 92:\n        x = 92\n    elif N % 6 == 93:\n        x = 93\n    elif N % 6 == 94:\n        x = 94\n    elif N % 6 == 95:\n        x = 95\n    elif N % 6 == 96:\n        x = 96\n    elif N % 6 == 97:\n        x = 97\n    elif N % 6 == 98:\n        x = 98\n    elif N % 6 == 99:\n        x = 99\n    elif N % 6 == 100:\n        x = 100\n    return str(x)"
    },
    {
        "number": 4240,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split('\\n')\n    for i in range(1, len(s)):\n        s_left = s[:i]\n        s_right = s[i:]\n        if s_left == s_right[::-1]:\n            s_right = s_right[::-1]\n            s = s_left + s_right\n            break\n    return f'Yes' if s == t else f'No'"
    },
    {
        "number": 4240,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    s_len = len(s)\n    for i in range(1, s_len):\n        new_string = s[i:] + s[0:i]\n        if new_string == s:\n            return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4240,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    n = len(s)\n    if n % 2 == 1:\n        return 'No'\n    else:\n        for i in range(0, n, 2):\n            if s[i]!= s[n - i - 1]:\n                return 'No'\n        return 'Yes'"
    },
    {
        "number": 4240,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split(' ')\n    if sorted(s) == sorted(t):\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 4240,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def rotation(s: str) -> str:\n        return s[-1] + s[1:-1] + s[0]\n\n    s = stdin.strip()\n    t = stdin.strip()\n    if rotation(s) == t:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4240,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    while len(s)!= len(t):\n        s = s[1:] + s[0]\n    return 'Yes' if s == t else 'No'\nsolution(input())\n"
    },
    {
        "number": 4240,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin\n    T = stdin\n    if len(S)!= len(T):\n        return 'No'\n    for i in range(len(S)):\n        if S[i]!= T[i]:\n            return 'No'\n    return 'Yes'\n\ndef"
    },
    {
        "number": 4240,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    stdin\n    \"\"\"\n    s = stdin.strip()\n    if s == s[::-1]:\n        return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4240,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin == stdin[::-1]\n"
    },
    {
        "number": 4240,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    string = stdin.split()\n    length = len(string)\n    for i in range(length):\n        string[i] = string[i] * (length - i)\n    string.reverse()\n    if string == string[::-1]:\n        print('Yes')\n    else:\n        print('No')\n\nsolution(input())\n\"\"\"\n\nimport unittest\n\n\ndef"
    },
    {
        "number": 4241,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin\n    return len(S) - max([i for i, c in enumerate(S) if c!= T[i]])\n"
    },
    {
        "number": 4241,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split(\"\\n\")\n    count = 0\n    for s in range(len(S)):\n        if S[s]!= T[s]:\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 4241,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split(\"\\n\")\n    matches = 0\n    for i in range(1, len(s) + 1):\n        for j in range(len(s) - i + 1):\n            if s[j:j + i] == t:\n                matches += 1\n    return matches\n"
    },
    {
        "number": 4241,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin\n    T = stdin\n    count = 0\n    for i in range(len(S)):\n        for j in range(i, len(S)):\n            count += S[i:j + 1].count(T)\n    return count\n"
    },
    {
        "number": 4241,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    for i in range(len(s)):\n        if t in s[i:]:\n            return i\nprint(solution(input()))\n\nimport collections\nfrom typing import List\nclass Solution:\n    def check_substring(self,s, t, start):\n        for i in range(start, len(s)):\n            if s[i] == t[0]:\n                if len(t) == 1:\n                    return i\n                return self.check_substring(s, t[1:], i + 1)\n        return -1\n    def commonChars(self, A: List[str]) -> List[str]:\n        if len(A) == 0:\n            return []\n        min_count = len(A[0])\n        count = collections.Counter(A[0])\n        for s in A[1:]:\n            if len(s) < min_count:\n                min_count = len(s)\n            count = collections.Counter(s) & count\n        res = []\n        for i in count.values():\n            res += i * count[i]\n        return res\ns = Solution()\nprint(s.commonChars([\"eat\",\"tea\",\"tan\",\"ate\",\"nat\",\"bat\"]))\n\n-----Input-----\na\nab\n\n-----Output-----\n\nclass Solution:\n    def commonChars(self, A: List[str]) -> List[str]:\n        res = []\n        if not A:\n            return []\n        count = collections.Counter(A[0])\n        for s in A[1:]:\n            count = collections.Counter(s) & count\n        for key,val in count.items():\n            for _ in range(val):\n                res.append(key)\n        return res\ns = Solution()\nprint(s.commonChars([\"eat\",\"tea\",\"tan\",\"ate\",\"nat\",\"bat\"]))\n\nclass Solution:\n    def uncommonFromSentences(self, A: str, B: str) -> List[str]:\n        res = []\n        if not A and not B:\n            return res\n        d = {}\n        for a in A.split():\n            d[a] = d.get(a, 0) + 1\n        for b in B.split():\n            d[b] = d.get(b, 0) + 1\n        for key,val in d.items():\n            if val == 1:\n                res.append(key)\n        return res\ns = Solution()\nprint(s.uncommonFromSentences(\"this apple is sweet\", \"this apple is sour\"))\n\nclass Solution:\n    def isInterleave(self, s1: str, s2: str, s3: str) -> bool:\n        n = len(s1) + len(s2)\n        if n!= len(s3):\n            return False\n        dp = [[False for _ in range(len(s2)+1)] for _ in range(len(s1)+1)]\n        dp[0][0] = True\n        for i in range(1, len(s2)+1):\n            dp[0][i] = False\n        for i in range(1, len(s1)+1):\n            dp[i][0] = False\n        for i in range(1, len(s1)+1):\n            for j in range(1, len(s2)+1):\n                if s1[i-1] == s3[i+j-1]:\n                    dp[i][j] = dp[i-1][j] or dp[i][j-1]\n                else:\n                    dp[i][j] = dp[i-1][j] or dp[i][j-1]\n        return dp[-1][-1]\n\ns = Solution()\nprint(s.isInterleave(\"aabcc\",\"dbbca\",\"aadbbcbcac\"))\n\nimport collections\nclass Solution:\n    def canConstruct(self, ransomNote: str, magazine: str) -> bool:\n        count = collections.Counter(ransomNote)\n        for char in magazine:\n            if char in count and count[char] > 0:\n                count[char] -= 1\n            else:\n                return False\n        return True\n\ns = Solution()\nprint(s.canConstruct(\"a\", \"a\"))\n\nclass Solution:\n    def countPalindromicSubsequences(self, s: str) -> int:\n        if not s:\n            return 0\n        n = len(s)\n        dp = [[0 for _ in range(n)] for _ in range(n)]\n        for i in range(n):\n            dp[i][i] = 1\n        for i in range(n-1, -1, -1):\n            for j in range(i+1, n):\n                if s[i] == s[j]:\n                    dp[i][j] = dp[i+1][j-1] + 2\n                else:\n                    dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n        return dp[0][-1]\n\ns = Solution()\nprint(s.countPalindromicSubsequences(\"abcda\"))\n\nclass Solution:\n    def longestPalindrome(self, s: str) -> str:\n        if len(s) < 1:\n            return ''\n        res = s[0]\n        for i in range(1, len(s)):\n            l, r = i-1, i+1\n            while l >= 0 and r <= len(s)-1 and s[l] == s[r]:\n                l, r = l-1, r+1\n                if r-l-1 > len(res):\n                    res = s[l+1:r]\n        return res\n\ns = Solution()\nprint(s.longestPalindrome(\"babad\"))\n\nclass Solution:\n    def longestPalindrome(self, s: str) -> str:\n        if len(s) < 1:\n            return ''\n        res = s[0]\n        for i in range(1, len(s)):\n            l, r = i-1, i+1\n            while l >= 0 and r <= len(s)-1 and s[l] == s[r]:\n                l, r = l-1, r+1\n                if r-l-1 > len(res):\n                    res = s[l+1:r]\n        return res\n\ns = Solution()\nprint(s.longestPalindrome(\"babad\"))\n\nclass Solution:\n    def longestPalindrome(self, s: str) -> str:\n        if len(s) < 1:\n            return ''\n        res = s[0]\n        for i in range(1, len(s)):\n            l, r = i-1, i+1\n            while l >= 0 and r <= len(s)-1 and s[l] == s[r]:\n                l, r = l-1, r+1\n                if r-l-1 > len(res):\n                    res = s[l+1:r]\n        return res\n\ns = Solution()\nprint(s.longestPalindrome(\"babad\"))\n\nclass Solution:\n    def longestPalindrome(self, s: str) -> str:\n        if len(s) < 1:\n            return ''\n        res = s[0]\n        for i in range(1, len(s)):\n            l, r = i-1, i+1\n            while l >= 0 and r <= len(s)-1 and s[l] == s[r]:\n                "
    },
    {
        "number": 4241,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    input_strings = stdin.strip().split()\n    string = input_strings[0]\n    target_string = input_strings[1]\n\n    # Make Target String\n    for i in range(len(target_string)):\n        # if the target string is equal to any of the elements in the target string, then replace the element with target string\n        for j in range(len(string)):\n            if target_string[i] == string[j]:\n                string = string[:j] + target_string[i] + string[j+1:]\n    \n    return string"
    },
    {
        "number": 4241,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    for i in stdin.split():\n        if len(i) > len(stdin.split()[0]):\n            return str(len(stdin.split()[0])-len(i))\n    return str(0)\n\nsolution(input())\n"
    },
    {
        "number": 4241,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    S = stdin.splitlines()[0]\n    T = stdin.splitlines()[1]\n    match_list = []\n    string_length = len(S)\n    for i in range(string_length):\n        if S[i]!= T[i]:\n            match_list.append(i)\n    return len(match_list)\n"
    },
    {
        "number": 4241,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    count = 0\n    for i in range(len(s)):\n        if s[i]!= t[i]:\n            count += 1\n    print(count)"
    },
    {
        "number": 4241,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return"
    },
    {
        "number": 4242,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    A,B,K=map(int,stdin.split())\n    a=A\n    b=B\n    a.sort()\n    b.sort()\n    while a[-1]%b[-1]!=0:\n        a=a[:-1]\n    while b[-1]%a[-1]!=0:\n        b=b[:-1]\n    for i in range(K):\n        if i==K-1:\n            print(a[-1])\n        else:\n            print(a[-1],end=\" \")\n    return \"\"\n"
    },
    {
        "number": 4242,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(' ')\n    a, b = int(stdin[0]), int(stdin[1])\n    k = int(stdin[2])\n    if k == 1:\n        return max(a, b)\n    elif k == 2:\n        if a % b == 0 or b % a == 0:\n            return max(a, b)\n        else:\n            return a\n    else:\n        return solution(stdin[0])\n    return solution(stdin[1])\n"
    },
    {
        "number": 4242,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n    \n    if A % B == 0:\n        print(B)\n    else:\n        for i in range(1, (A//B) + 1):\n            if A % i == 0 and B % i == 0:\n                print(i)\n                break\n\nsolution(input())\n"
    },
    {
        "number": 4242,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n\n    if (A % K) or (B % K):\n        return str(K)\n\n    for i in range(K, 1, -1):\n        if (A % i) and (B % i):\n            return str(i)\n\n    return str(A)\n"
    },
    {
        "number": 4242,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    (A, B, K) = list(map(int, stdin.split()))\n    arr = sorted([i for i in range(1, A + 1) if i % B == 0])\n    return str(arr[K - 1])\n"
    },
    {
        "number": 4242,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def inRange(n):\n        return 1 <= n <= 100\n\n    A, B, K = map(int, stdin.split())\n    if not inRange(A) or not inRange(B) or not inRange(K):\n        raise ValueError(\"All values in input are integers.\")\n    if K > 100:\n        raise ValueError(\"K is more than 100.\")\n    divider = []\n    for i in range(1, max(A, B) + 1):\n        if A % i == 0 and B % i == 0:\n            divider.append(i)\n    if len(divider) < K:\n        raise ValueError(\"K is more than the number of numbers in A and B.\")\n    divider.sort(reverse=True)\n    return divider[K - 1]\n"
    },
    {
        "number": 4242,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n    p_list = sorted(list(set(range(A, B + 1)) - {A, B}))\n    print(p_list[K - 1])\n"
    },
    {
        "number": 4242,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return"
    },
    {
        "number": 4242,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, k = list(map(int, stdin.split()))\n    nums = sorted(set(range(1, A + 1)) & set(range(1, B + 1)))\n    print(nums[k - 1])\n    return\n"
    },
    {
        "number": 4242,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = map(int, stdin.split())\n    n = k - 1\n    count = 0\n    div = 1\n    while n:\n        count += 1\n        div = div * a\n        if div % b == 0:\n            n = n - 1\n    return str(div)\n"
    },
    {
        "number": 4243,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x: int = int(stdin)\n    x_half: int = int(x / 2)\n    x_remainder: int = x % 2\n    x_five_yen: int = int((x_half - x_remainder) / 5)\n    x_five_remainder: int = x_half % 5\n    x_four_yen: int = int((x_five_yen - x_five_remainder) / 4)\n    x_four_remainder: int = x_five_yen % 4\n    x_three_yen: int = int((x_four_yen - x_four_remainder) / 3)\n    x_three_remainder: int = x_four_yen % 3\n    x_two_yen: int = int((x_three_yen - x_three_remainder) / 2)\n    x_two_remainder: int = x_three_yen % 2\n    x_one_yen: int = int((x_two_yen - x_two_remainder) / 1)\n    x_one_remainder: int = x_two_yen % 1\n    return x_one_yen * 1000 + x_one_remainder * 100 + x_one_remainder * 5 + x_one_remainder * 10 + x_one_remainder * 5 + x_one_remainder * 1\n"
    },
    {
        "number": 4243,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.strip().split()\n    X = int(data[0])\n    \n    ## the maximum value is defined as:\n    ## if we exchange our money so that we gain\n    ## all of our 500-yen coins, we gain 1000 + (500-yen) * 5\n    ## and so on, until we gain the maximum value\n    ## if we exchange our money so that we gain\n    ## all of our 100-yen coins, we gain 1000 + (100-yen) * 5\n    ## and so on, until we gain the maximum value\n    ##...\n    ## until we gain the maximum value\n    # x = 1000 + (500-yen) * 5\n    # for i in range(0,X):\n    #     if i % 5 == 0:\n    #         x += 1000 + (500-yen) * 5\n    #     else:\n    #         x += 1000\n    \n    ## the maximum value is defined as:\n    ## if we exchange our money so that we gain\n    ## all of our 100-yen coins, we gain 1000 + (100-yen) * 5\n    ## and so on, until we gain the maximum value\n    ## if we exchange our money so that we gain\n    ## all of our 50-yen coins, we gain 1000 + (50-yen) * 5\n    ## and so on, until we gain the maximum value\n    ##...\n    ## until we gain the maximum value\n    # x = 1000 + (100-yen) * 5\n    # for i in range(0,X):\n    #     if i % 5 == 0:\n    #         x += 1000 + (100-yen) * 5\n    #     else:\n    #         x += 1000\n    \n    ## the maximum value is defined as:\n    ## if we exchange our money so that we gain\n    ## all of our 50-yen coins, we gain 1000 + (50-yen) * 5\n    ## and so on, until we gain the maximum value\n    ## if we exchange our money so that we gain\n    ## all of our 10-yen coins, we gain 1000 + (10-yen) * 5\n    ## and so on, until we gain the maximum value\n    ##...\n    ## until we gain the maximum value\n    # x = 1000 + (10-yen) * 5\n    # for i in range(0,X):\n    #     if i % 5 == 0:\n    #         x += 1000 + (10-yen) * 5\n    #     else:\n    #         x += 1000\n    \n    ## the maximum value is defined as:\n    ## if we exchange our money so that we gain\n    ## all of our 10-yen coins, we gain 1000 + (10-yen) * 5\n    ## and so on, until we gain the maximum value\n    ## if we exchange our money so that we gain\n    ## all of our 5-yen coins, we gain 1000 + (5-yen) * 5\n    ## and so on, until we gain the maximum value\n    ##...\n    ## until we gain the maximum value\n    # x = 1000 + (5-yen) * 5\n    # for i in range(0,X):\n    #     if i % 5 == 0:\n    #         x += 1000 + (5-yen) * 5\n    #     else:\n    #         x += 1000\n    \n    ## the maximum value is defined as:\n    ## if we exchange our money so that we gain\n    ## all of our 5-yen coins, we gain 1000 + (5-yen) * 5\n    ## and so on, until we gain the maximum value\n    ## if we exchange our money so that we gain\n    ## all of our 1-yen coins, we gain 1000 + (1-yen) * 5\n    ## and so on, until we gain the maximum value\n    ##...\n    ## until we gain the maximum value\n    # x = 1000 + (1-yen) * 5\n    # for i in range(0,X):\n    #     if i % 5 == 0:\n    #         x += 1000 + (1-yen) * 5\n    #     else:\n    #         x += 1000\n    \n    # x = 1000 + (5-yen) * 5\n    # for i in range(0,X):\n    #     if i % 5 == 0:\n    #         x += 1000 + (5-yen) * 5\n    #     else:\n    #         x += 1000\n    \n    x = 1000 + (1-yen) * 5\n    for i in range(0,X):\n        if i % 5 == 0:\n            x += 1000 + (1-yen) * 5\n        else:\n            x += 1000\n    return str(x)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4243,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    happiness_points = 0\n    coins = {'500': 0, '100': 0, '50': 0, '10': 0, '5': 0, '1': 0}\n    for coin in stdin.split():\n        if coin == '500':\n            happiness_points += 500\n            coins['500'] += 1\n        elif coin == '100':\n            happiness_points += 100\n            coins['100'] += 1\n        elif coin == '50':\n            happiness_points += 50\n            coins['50'] += 1\n        elif coin == '10':\n            happiness_points += 10\n            coins['10'] += 1\n        elif coin == '5':\n            happiness_points += 5\n            coins['5'] += 1\n        elif coin == '1':\n            happiness_points += 1\n            coins['1'] += 1\n        else:\n            print(\"Not a valid input\")\n            break\n    return str(happiness_points)\n\n\nprint(solution(input()))\n\"\"\"\n\ndef"
    },
    {
        "number": 4243,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    #stdin = \"1000\"\n    X = int(stdin)\n    coins = {5: 0, 10: 0, 50: 0, 100: 0, 200: 0, 500: 0}\n    \n    for i in range(5, 1000, 5):\n        coins[i] = coins[i - 5] + 5\n    \n    for i in range(100, 1000, 100):\n        coins[i] = coins[i - 100] + 100\n    \n    for i in range(50, 1000, 50):\n        coins[i] = coins[i - 50] + 50\n    \n    for i in range(10, 1000, 10):\n        coins[i] = coins[i - 10] + 10\n    \n    for i in range(1, 1000, 1):\n        coins[i] = coins[i - 1] + 1\n    \n    print(max(coins[X] - 1, 0))\n    \n    return None\n\ndef"
    },
    {
        "number": 4243,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.rstrip()\n    X = int(stdin)\n    return max(X // 500, X // 100, X // 50, X // 10, X // 5, X // 1)\n"
    },
    {
        "number": 4243,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    count = 0\n    for i in range(X):\n        if i%500 == 0:\n            count += 2000\n        elif i%100 == 0:\n            count += 1000\n        elif i%50 == 0:\n            count += 500\n        elif i%10 == 0:\n            count += 200\n        elif i%5 == 0:\n            count += 100\n        elif i%1 == 0:\n            count += 50\n    return count"
    },
    {
        "number": 4243,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    result = 0\n    if X > 1000:\n        result = -1\n    else:\n        result = max([-1, result + (X // 500) * 1000, result + (X // 100) * 500, result + (X // 50) * 100, result + (X // 10) * 50, result + (X // 5) * 10, result + (X // 1) * 5])\n    return str(result)\n"
    },
    {
        "number": 4243,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    happiness_points = 0\n    x = int(stdin[0])\n    while x > 0:\n        x -= 500\n        if x >= 250:\n            happiness_points += 250 * 2\n        if x >= 100:\n            happiness_points += 100 * 5\n        if x >= 50:\n            happiness_points += 50 * 10\n        if x >= 10:\n            happiness_points += 10 * 5\n        if x >= 5:\n            happiness_points += 5 * 1\n    return str(happiness_points)\n"
    },
    {
        "number": 4243,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    points = 0\n    for i in range(1, 7):\n        X *= 500\n        if X > X:\n            points += (X - 500) // 5\n            X -= (X - 500) // 5 * 5\n        else:\n            points += X // 500\n            X = X % 500\n    points += X // 100\n    points += (X - 100) // 50\n    points += (X - 100) % 50 // 5\n    points += (X - 50) // 10\n    points += (X - 50) % 10 // 5\n    points += (X - 10) // 1\n    points += (X - 10) % 1 // 5\n    return str(points)\n"
    },
    {
        "number": 4243,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4244,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def points(n: int, x: int, y: int) -> int:\n        return n * (x ** 2 + y ** 2)\n    n = int(stdin)\n    x = list(map(int, stdin.split()))\n    m = min(x)\n    s = 0\n    for i in x:\n        s += points(n, m, i - m)\n    return str(s)"
    },
    {
        "number": 4244,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    points = list(map(int, stdin.split()[1:]))\n    max_stamina = max(points)\n\n    def compute_stamina(x: int) -> int:\n        return (x - 1) ** 2\n\n    def search(left: int, right: int) -> int:\n        mid = int((left + right) / 2)\n        min_stamina = compute_stamina(points[mid])\n        if min_stamina > max_stamina:\n            return search(left, mid)\n        elif min_stamina < max_stamina:\n            return search(mid, right)\n        else:\n            return min_stamina\n\n    return str(search(1, max_stamina))\n\nsolution(\"2 4 1 4 3 2 5 1 2 3 4\")"
    },
    {
        "number": 4244,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split(\" \")\n    if len(input_list)!= 2:\n        raise ValueError\n    N = int(input_list[0])\n    input_list.pop(0)\n    input_list = list(map(int, input_list))\n\n    N_2 = (N * (N - 1)) // 2\n    min_points = sum([((input_list[i] - input_list[i - 1])**2) for i in range(1, N)])\n    min_points = min_points + N_2\n    return str(min_points)"
    },
    {
        "number": 4244,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    X_list = stdin.split(' ')\n    X_list = [int(x) for x in X_list]\n    result = []\n    for i in range(N):\n        result.append(min([(x - X_list[i])**2 for x in X_list]))\n    return''.join(map(str, result))"
    },
    {
        "number": 4244,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    people = list(map(int, stdin.split()))\n    max_points = max(people)\n    stamina_per_person = max_points - 1\n    total_stamina = 0\n    for i in range(1, n + 1):\n        distance_between_meeting_and_person = people[i - 1] - stamina_per_person\n        stamina_for_this_person = distance_between_meeting_and_person * (2 * stamina_per_person)\n        total_stamina += stamina_for_this_person\n    return total_stamina\n"
    },
    {
        "number": 4244,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    X = map(int, stdin.split()[1:])\n    result = 0\n    for x in X:\n        result += (x - 2) ** 2\n    return str(result)\n"
    },
    {
        "number": 4244,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    nums = list(map(int, stdin.split()))\n\n    left, right = 0, max(nums)\n\n    while left < right:\n        mid = (left + right) // 2\n        curr = 0\n\n        for i in range(n):\n            curr += abs(nums[i] - mid) ** 2\n        if curr > (mid - left) * (mid - left):\n            left = mid + 1\n        else:\n            right = mid\n    return str(right)\n"
    },
    {
        "number": 4244,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    num_people, *data = map(int, stdin.strip().split())\n    stamina_list = sorted(data)\n    min_stamina = float('inf')\n    for i in range(num_people - 1):\n        min_stamina = min(min_stamina, abs((stamina_list[i + 1] - stamina_list[i]) ** 2))\n    return str(min_stamina)\n"
    },
    {
        "number": 4244,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = list(map(int, stdin.split()))\n    # print(n, x)\n    stamina = 0\n    min_stamina = 0\n    stamina_needed = 0\n    # 1) We can only hold the meeting at integer coordinates.\n    #    For example, if x[0] = 2, we can only hold the meeting at coordinate 2.\n    #    We start at coordinate 0.\n    for i in range(n):\n        stamina += x[i]**2\n    if stamina < min_stamina:\n        min_stamina = stamina\n    # 2) We can't hold the meeting at integer coordinates.\n    #    So, we have to find the minimum stamina needed, so we can hold the meeting at any integer coordinate.\n    #    We can assume that x[0] = 1, and we need to hold the meeting at coordinate 1.\n    stamina_needed = (x[0] - 1)**2\n    for i in range(1, n):\n        stamina_needed = min(stamina_needed, stamina_needed + (x[i] - x[0])**2)\n    if stamina_needed < min_stamina:\n        min_stamina = stamina_needed\n    return str(min_stamina)"
    },
    {
        "number": 4244,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    stamina = []\n    for i in range(N):\n        X_i = int(stdin)\n        stamina.append(X_i)\n    stamina.sort()\n    # print(stamina)\n    ans = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            if stamina[i] - stamina[j] <= 0:\n                continue\n            else:\n                # print(stamina[i], stamina[j], stamina[i] - stamina[j])\n                ans += (stamina[i] - stamina[j]) ** 2\n    return ans\n"
    },
    {
        "number": 4245,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    (A, B) = stdin.split()\n    return str(int(math.ceil(float(A) / int(B))))"
    },
    {
        "number": 4245,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A = int(stdin.split()[0])\n    B = int(stdin.split()[1])\n\n    if A == 1:\n        return str(1)\n    elif A == 2 and B == 1:\n        return str(1)\n    elif A == 2 and B == 2:\n        return str(2)\n    else:\n        return str(3)\n"
    },
    {
        "number": 4245,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    sockets = [0] * (n + 1)\n    for i in range(n):\n        sockets[i + 1] = sockets[i] + 1\n    i = n - 2\n    while i >= 0:\n        sockets[i + 1] += sockets[i]\n        i -= 1\n    return sockets[-1]"
    },
    {
        "number": 4245,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input_lines = stdin.splitlines()\n    A = int(input_lines[0])\n    B = int(input_lines[1])\n    return str(calc_min_power_strips(A, B))\n\n\ndef"
    },
    {
        "number": 4245,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    answer = 0\n\n    while True:\n        if A == B:\n            break\n        elif A < B:\n            A += 1\n            answer += 1\n        else:\n            B += 1\n            answer += 1\n\n    return str(answer)"
    },
    {
        "number": 4245,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(find_min(int(stdin.split()[0]), int(stdin.split()[1]))))\n\n\ndef"
    },
    {
        "number": 4245,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    for _ in range(a):\n        b = b + 1\n        print(b)\n    return"
    },
    {
        "number": 4245,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return f'{len(stdin.split()) - 1} power strips, each with {len(stdin.split())} sockets, extend the socket into {len(stdin.split()) - 1} empty sockets.'\n"
    },
    {
        "number": 4245,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B = list(map(int, stdin.split()))\n    # Return the maximum possible value\n    return str(max(0, (min(B, (A * 10) // 2) - 1) // (B - 1) if (A * 10) % 2 else (A * 10) // 2) + 1)\n"
    },
    {
        "number": 4245,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return str(min(A, (2 ** (A - 1)) + B + (2 ** (A - 2)) - 1))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4246,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('CSS')\n    '2'\n    >>> solution('CSR')\n    '2'\n    '''\n    count = 0\n    count1 = 0\n    if stdin[0] == 'S' and stdin[1] == 'S':\n        count += 1\n    if stdin[2] == 'C':\n        count1 += 1\n    if stdin[2] == 'R':\n        count1 += 1\n    if stdin[1] == 'C' and stdin[0] == 'S':\n        count += 1\n    if stdin[1] == 'R' and stdin[0] == 'S':\n        count += 1\n    if count == 2 or count1 == 2:\n        return '2'\n    return '0'\n"
    },
    {
        "number": 4246,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    if s[0] == \"S\" and s[1] == \"C\" and s[2] == \"R\":\n        return \"2\"\n    elif s[0] == \"T\" and s[1] == \"C\" and s[2] == \"S\":\n        return \"2\"\n    elif s[0] == \"S\" and s[1] == \"C\" and s[2] == \"R\":\n        return \"1\"\n    elif s[0] == \"T\" and s[1] == \"C\" and s[2] == \"S\":\n        return \"1\"\n    elif s[0] == \"S\" and s[1] == \"R\" and s[2] == \"R\":\n        return \"1\"\n    elif s[0] == \"T\" and s[1] == \"R\" and s[2] == \"S\":\n        return \"1\"\n    else:\n        return \"0\"\n"
    },
    {
        "number": 4246,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s: str = stdin[0]\n    t: str = stdin[1]\n    f = \" \".join(sorted([s[i] for i in range(3)], reverse=True))\n    f1 = \" \".join(sorted([t[i] for i in range(3)], reverse=True))\n    if f == f1:\n        return str(len(s))\n    else:\n        return str(len(s) - 1)"
    },
    {
        "number": 4246,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    S, T = stdin.split()\n    count = 0\n\n    if S == T:\n        count += 1\n\n    return count\n\n\nsolution(input())\n"
    },
    {
        "number": 4246,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    if s == 'S' and t == 'CSR':\n        return '1'\n    if s == 'S' and t == 'CSR':\n        return '2'\n    if s == 'S' and t == 'CSR':\n        return '2'\n    if s == 'CSR' and t == 'CSR':\n        return '2'\n    if s == 'CSR' and t == 'CSR':\n        return '2'\n    if s == 'CSR' and t == 'CSR':\n        return '2'\n    if s == 'CSR' and t == 'CSR':\n        return '2'\n    if s == 'CSR' and t == 'CSR':\n        return '2'\n    if s == 'CSR' and t == 'CSR':\n        return '2'\n    if s == 'CSR' and t == 'CSR':\n        return '2'\n    if s == 'CSR' and t == 'CSR':\n        return '2'\n    if s == 'CSR' and t == 'CSR':\n        return '2'\n    if s == 'CSR' and t == 'CSR':\n        return '2'\n    if s == 'CSR' and t == 'CSR':\n        return '2'\n    if s == 'CSR' and t == 'CSR':\n        return '2'\n    if s == 'CSR' and t == 'CSR':\n        return '2'\n    if s == 'CSR' and t == 'CSR':\n        return '2'\n    if s == 'CSR' and t == 'CSR':\n        return '2'\n    if s == 'CSR' and t == 'CSR':\n        return '2'\n    if s == 'CSR' and t == 'CSR':\n        return '2'\n    if s == 'CSR' and t == 'CSR':\n        return '2'\n    if s == 'CSR' and t == 'CSR':\n        return '2'\n    if s == 'CSR' and t == 'CSR':\n        return '2'\n    if s == 'CSR' and t == 'CSR':\n        return '2'\n    if s == 'CSR' and t == 'CSR':\n        return '2'\n    if s == 'CSR' and t == 'CSR':\n        return '2'\n    if s == 'CSR' and t == 'CSR':\n        return '2'\n    if s == 'CSR' and t == 'CSR':\n        return '2'\n    if s == 'CSR' and t == 'CSR':\n        return '2'\n    if s == 'CSR' and t == 'CSR':\n        return '2'\n    if s == 'CSR' and t == 'CSR':\n        return '2'\n    if s == 'CSR' and t == 'CSR':\n        return '2'\n    if s == 'CSR' and t == 'CSR':\n        return '2'\n    if s == 'CSR' and t == 'CSR':\n        return '2'\n    if s == 'CSR' and t == 'CSR':\n        return '2'\n    if s == 'CSR' and t == 'CSR':\n        return '2'\n    if s == 'CSR' and t == 'CSR':\n        return '2'\n    if s == 'CSR' and t == 'CSR':\n        return '2'\n    if s == 'CSR' and t == 'CSR':\n        return '2'\n    if s == 'CSR' and t == 'CSR':\n        return '2'\n    if s == 'CSR' and t == 'CSR':\n        return '2'\n    if s == 'CSR' and t == 'CSR':\n        return '2'\n    if s == 'CSR' and t == 'CSR':\n        return '2'\n    if s == 'CSR' and t == 'CSR':\n        return '2'\n    if s == 'CSR' and t == 'CSR':\n        return '2'\n    if s == 'CSR' and t == 'CSR':\n        return '2'\n    if s == 'CSR' and t == 'CSR':\n        return '2'\n    if s == 'CSR' and t == 'CSR':\n        return '2'\n    if s == 'CSR' and t == 'CSR':\n        return '2'\n    if s == 'CSR' and t == 'CSR':\n        return '2'\n    if s == 'CSR' and t == 'CSR':\n        return '2'\n    if s == 'CSR' and t == 'CSR':\n        return '2'\n    if s == 'CSR' and t == 'CSR':\n        return '2'\n    if s == 'CSR' and t == 'CSR':\n        return '2'\n    if s == 'CSR' and t == 'CSR':\n        return '2'\n    if s == 'CSR' and t == 'CSR':\n        return '2'\n    if s == 'CSR' and t == 'CSR':\n        return '2'\n    if s == 'CSR' and t == 'CSR':\n        return '2'\n    if s == 'CSR' and t == 'CSR':\n        return '2'\n    if s == 'CSR' and t == 'CSR':\n        return '2'\n    if s == 'CSR' and t == 'CSR':\n        return '2'\n    if s == 'CSR' and t == 'CSR':\n        return '2'\n    if s == 'CSR' and t == 'CSR':\n        return '2'\n    if s == 'CSR' and t == 'CSR':\n        return '2'\n    if s == 'CSR' and t == 'CSR':\n        return '2'\n    if s == 'CSR' and t == 'CSR':\n        return '2'\n    if s == 'CSR' and t == 'CSR':\n        return '2'\n    if s == 'CSR' and t == 'CSR':\n        return '2'\n    if s == 'CSR' and t == 'CSR':\n        return '2'\n    if s == 'CSR' and t == 'CSR':\n        return '2'\n    if s == 'CSR' and t == 'CSR':\n        return '2'\n    if s == 'CSR' and t == 'CSR':\n        return '2'\n    if s == 'CSR' and t == 'CSR':\n        return '2'\n    if s == 'CSR' and t == 'CSR':\n        return '2'\n    if s == 'CSR' and t == 'CSR':\n        return '2'\n    if s == 'CSR' and t == 'CSR':\n        return '2'\n    if s == 'CSR' and t == 'CSR':\n        return '2'\n    if s == 'CSR' and t == 'CSR':\n        return '2'"
    },
    {
        "number": 4246,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    r = 0\n    c = 0\n    l = len(s)\n    for i in range(l):\n        if (s[i] == 'C' and s[i+1] == 'S' and s[i+2] == 'S' ) :\n            c += 1\n        if (s[i] == 'R' and s[i+1] == 'S' and s[i+2] == 'S' ) :\n            r += 1\n    if r > c :\n        return str(r)\n    return str(c)"
    },
    {
        "number": 4246,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    days, t = stdin.splitlines()\n    days = list(days)\n    t = list(t)\n    ans = 0\n    for i in range(len(days)):\n        if days[i] == t[i]:\n            ans += 1\n    return str(ans)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4246,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"2\"\n"
    },
    {
        "number": 4246,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return 2"
    },
    {
        "number": 4246,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    count = 0\n    s = stdin.split()\n    t = stdin.split()\n    s = list(s)\n    t = list(t)\n    if s[1] == t[0] and s[2] == t[1]:\n        count += 1\n    if s[1] == t[1] and s[2] == t[2]:\n        count += 1\n    if s[2] == t[2] and s[0] == t[0]:\n        count += 1\n    return count\n\n\nsolution(\"CSS\")\n"
    },
    {
        "number": 4247,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    arr = stdin.split()\n    p = sorted(arr)\n    n = len(p)\n    \n    for i in range(1, n):\n        if p[i]!= p[i-1] and p[i]!= p[i+1]:\n            print(p[i])\n            break\n    return \"N/A\"\n"
    },
    {
        "number": 4247,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    arr.sort()\n    p_2 = arr[1]\n    p_1 = arr[0]\n    p_3 = arr[2]\n    p_4 = arr[3]\n    p_5 = arr[4]\n    if p_2 == p_1 + 1 and p_2 == p_3 - 1 and p_2 == p_4 + 1 and p_2 == p_5 - 1:\n        return \"2\"\n    else:\n        return \"0\"\n"
    },
    {
        "number": 4247,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    numbers = list(map(int, stdin.split()))\n    result = 0\n\n    for i in range(n - 1, 1, -1):\n        first = numbers[i - 1]\n        second = numbers[i]\n        if first > second and numbers[i] == second - 1:\n            result += 1\n    return str(result)"
    },
    {
        "number": 4247,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    result = 0\n    for i in range(1, n):\n        if arr[i] > arr[i-1] and arr[i] > arr[i+1]:\n            result += 1\n    return result\n"
    },
    {
        "number": 4247,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    data = list(map(int, stdin.split()))\n    for i in range(1, data[0]):\n        if data[i] >= data[i - 1] and data[i] >= data[i + 1]:\n            print(i)\n    return '{}'.format(data[i])"
    },
    {
        "number": 4247,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = stdin.split()\n    arr.sort()\n    ans = 0\n    for i in range(n):\n        if int(arr[i]) == 1:\n            continue\n        if arr[i-1] > arr[i] and arr[i+1] > arr[i]:\n            ans += 1\n    return str(ans)\n"
    },
    {
        "number": 4247,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    p = stdin.split()\n    nums = []\n    for i in range(1, n+1):\n        nums.append(i)\n    for i in range(1, n):\n        if nums[i] == nums[i-1]:\n            continue\n        if nums[i] == nums[i+1]:\n            continue\n        sorted_nums = sorted(nums)\n        if sorted_nums[i] == sorted_nums[i-1]:\n            continue\n        if sorted_nums[i] == sorted_nums[i+1]:\n            continue\n        print(nums[i])\n        break\n    return''.join(p)\n    \n"
    },
    {
        "number": 4247,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Your code goes here\n    stdin = stdin.split()\n    n = int(stdin.pop(0))\n    a = list(map(int, stdin))\n\n    count = 0\n    for i in range(1, n - 1):\n        if a[i - 1] > a[i] and a[i] > a[i + 1]:\n            count += 1\n\n    return str(count)\n"
    },
    {
        "number": 4247,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    p = list(map(int, stdin.strip().split(' ')))\n    p.sort()\n    count = 0\n    for i in range(1, n):\n        if p[i - 1] == p[i]:\n            continue\n        elif p[i - 1] + 1 == p[i]:\n            count += 1\n        elif p[i - 1] - 1 == p[i]:\n            count += 1\n    return str(count)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4247,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    p = list(map(int, stdin.split()))\n\n    p_count = {}\n    for p_index in range(len(p)):\n        p_count[p[p_index]] = p_count.get(p[p_index], 0) + 1\n\n    p_count_2 = {}\n    for i in range(1, n):\n        p_count_2[p[i - 1]] = p_count_2.get(p[i - 1], 0) + 1\n\n    p_count_2[p[-1]] = p_count_2.get(p[-1], 0) + 1\n\n    output = 0\n    for k, v in p_count.items():\n        if v == 2:\n            output += 1\n\n        elif v == 1:\n            continue\n\n        elif v == 0:\n            continue\n\n        else:\n            for i in range(3):\n                if i == 0:\n                    p_index = p_count_2[k] - 1\n                    if p_index > 0:\n                        p_index = p_index - 1\n                        if p[p_index] > p[p_index + 1]:\n                            output += 1\n                            break\n\n                elif i == 1:\n                    p_index = p_count_2[k] - 2\n                    if p_index > 0:\n                        p_index = p_index - 2\n                        if p[p_index] > p[p_index + 1]:\n                            output += 1\n                            break\n\n                elif i == 2:\n                    p_index = p_count_2[k] - 3\n                    if p_index > 0:\n                        p_index = p_index - 3\n                        if p[p_index] > p[p_index + 1]:\n                            output += 1\n                            break\n    return str(output)"
    },
    {
        "number": 4248,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    points = [tuple(map(float, stdin.split())) for _ in range(n)]\n    points.sort(key=lambda p: p[1])\n    points.sort(key=lambda p: p[0])\n    a, b = points[0], points[-1]\n    x1, y1, x2, y2 = a[0], a[1], b[0], b[1]\n    return round(x1 * y2 - x2 * y1, 5)"
    },
    {
        "number": 4248,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    points: list = []\n    for _ in range(n):\n        points.append(tuple(map(float, stdin.split())))\n    points.sort(key=lambda x: x[0])\n    points.sort(key=lambda x: x[1])\n    x1, y1 = points[0]\n    x2, y2 = points[1]\n    x3, y3 = points[2]\n    x4, y4 = points[3]\n    x5, y5 = points[4]\n    x6, y6 = points[5]\n    x7, y7 = points[6]\n    x8, y8 = points[7]\n    x9, y9 = points[8]\n    a1: float = (x1 * y2 + y1 * x2) - (x1 * y3 + y1 * x3)\n    a2: float = (x2 * y2 + y2 * x2) - (x2 * y3 + y2 * x3)\n    a3: float = (x3 * y3 + y3 * x3) - (x3 * y4 + y3 * x4)\n    a4: float = (x4 * y4 + y4 * x4) - (x4 * y5 + y4 * x5)\n    a5: float = (x5 * y5 + y5 * x5) - (x5 * y6 + y5 * x6)\n    a6: float = (x6 * y6 + y6 * x6) - (x6 * y7 + y6 * x7)\n    a7: float = (x7 * y7 + y7 * x7) - (x7 * y8 + y7 * x8)\n    a8: float = (x8 * y8 + y8 * x8) - (x8 * y9 + y8 * x9)\n    a9: float = (x9 * y9 + y9 * x9) - (x9 * y1 + y9 * x1)\n    if a1 == 0:\n        return \"No solutions\"\n    if a2 == 0:\n        return \"No solutions\"\n    if a3 == 0:\n        return \"No solutions\"\n    if a4 == 0:\n        return \"No solutions\"\n    if a5 == 0:\n        return \"No solutions\"\n    if a6 == 0:\n        return \"No solutions\"\n    if a7 == 0:\n        return \"No solutions\"\n    if a8 == 0:\n        return \"No solutions\"\n    if a9 == 0:\n        return \"No solutions\"\n    b1 = ((x1 * y3) - (x3 * y1)) / a1\n    b2 = ((x2 * y3) - (x3 * y2)) / a2\n    b3 = ((x3 * y4) - (x4 * y3)) / a3\n    b4 = ((x4 * y5) - (x5 * y4)) / a4\n    b5 = ((x5 * y6) - (x6 * y5)) / a5\n    b6 = ((x6 * y7) - (x7 * y6)) / a6\n    b7 = ((x7 * y8) - (x8 * y7)) / a7\n    b8 = ((x8 * y9) - (x9 * y8)) / a8\n    b9 = ((x9 * y1) - (x1 * y9)) / a9\n    x = (b1 * -a4 - b4 * a3 - b7 * a2 + b8 * a6) / (b1 * a5 - b5 * a4 + b9 * a3 - b7 * a2 + b8 * a6)\n    y = (b2 * -a4 - b4 * a3 - b7 * a1 + b8 * a5) / (b2 * a5 - b5 * a4 + b9 * a3 - b7 * a1 + b8 * a5)\n    return str(x) + \" \" + str(y)\n"
    },
    {
        "number": 4248,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    points = []\n    for i in range(0, int(stdin)):\n        x, y = map(float, stdin.split())\n        points.append([x, y])\n    points = sorted(points, key=lambda x: (x[0], x[1]))\n    angle = 0\n    for i in range(0, len(points) - 1):\n        x1, y1 = points[i]\n        x2, y2 = points[i + 1]\n        angle += (x1 + x2) * (y2 - y1) / (x2 - x1)\n    return \"%.5f\" % angle\n"
    },
    {
        "number": 4248,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    output = \"\"\n    xs = set()\n    for _ in range(n):\n        x, y = list(map(float, stdin.split()))\n        xs.add(x)\n        xs.add(y)\n    xs = sorted(xs)\n    xs.sort(key=lambda x: x ** 2)\n    xs.sort(key=lambda x: -x)\n    for x in xs:\n        output += f\"{x:.2f}\\n\"\n    return output\n"
    },
    {
        "number": 4248,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    points = []\n    for _ in range(n):\n        points.append(list(map(float, stdin.split())))\n    points = sorted(points, key=lambda p: p[0])\n    x_min = points[0][0]\n    x_max = points[-1][0]\n    y_min = points[0][1]\n    y_max = points[-1][1]\n\n    x_diff = (x_max - x_min) / (n - 1)\n    y_diff = (y_max - y_min) / (n - 1)\n\n    points = sorted(points, key=lambda p: p[0] ** 2 + p[1] ** 2)\n    x_points = sorted(points, key=lambda p: p[0])\n    y_points = sorted(points, key=lambda p: p[1])\n\n    for i in range(n - 2):\n        x = x_points[i][0] + x_diff / 2\n        y = y_points[i][1] + y_diff / 2\n        points.append([x, y])\n\n    points = sorted(points, key=lambda p: p[1] ** 2 + p[0] ** 2)\n    x_points = sorted(points, key=lambda p: p[0])\n    y_points = sorted(points, key=lambda p: p[1])\n\n    for i in range(n - 2):\n        x = x_points[i][0] + x_diff / 2\n        y = y_points[i][1] + y_diff / 2\n        points.append([x, y])\n\n    points = sorted(points, key=lambda p: p[1] ** 2 + p[0] ** 2)\n    x_points = sorted(points, key=lambda p: p[0])\n    y_points = sorted(points, key=lambda p: p[1])\n\n    for i in range(n - 2):\n        x = x_points[i][0] + x_diff / 2\n        y = y_points[i][1] + y_diff / 2\n        points.append([x, y])\n\n    points = sorted(points, key=lambda p: p[1] ** 2 + p[0] ** 2)\n    x_points = sorted(points, key=lambda p: p[0])\n    y_points = sorted(points, key=lambda p: p[1])\n\n    result = 0.0\n    for i in range(n):\n        x = x_points[i][0] + x_diff / 2\n        y = y_points[i][1] + y_diff / 2\n        result += x ** 2 + y ** 2\n\n    return str(result)\n"
    },
    {
        "number": 4248,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = []\n    y = []\n    for i in range(n):\n        x.append(float(stdin.split()[i * 2]))\n        y.append(float(stdin.split()[i * 2 + 1]))\n    x = sorted(x)\n    y = sorted(y)\n    t = 0.0\n    for i in range(len(x) - 1):\n        t += abs((x[i] + x[i + 1]) / 2 - (y[i] + y[i + 1]) / 2)\n    return t\n"
    },
    {
        "number": 4248,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # return 10.79\n    n = int(stdin)\n    points = [(float(stdin.split()[i]), float(stdin.split()[i + 1])) for i in range(n)]\n    points.sort()\n    last_x = points[0][0]\n    last_y = points[0][1]\n    best = last_x\n    for i in range(1, n):\n        best = max(best, last_y * points[i][1] - last_x * points[i][0])\n        last_x = points[i][0]\n        last_y = points[i][1]\n    return \"%.2f\" % best\n\n\nsolution(input())\n\nInput:\n\n2\n-5.00\n1.00\n\nOutput:\n\n0.00\n\nInput:\n\n3\n1.00\n1.00\n1.00\n\nOutput:\n\n0.00\n\nInput:\n\n2\n2.00\n3.00\n\nOutput:\n\n0.00\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4248,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    points = []\n    for line in stdin.splitlines():\n        if len(line) > 1:\n            points.append([float(n) for n in line.split()])\n    points.sort(key=lambda x: (x[0], x[1]))\n    result = 0\n    prev_x, prev_y = points[0][0], points[0][1]\n    for x, y in points[1:]:\n        result += (y - prev_y) / (x - prev_x)\n        prev_x, prev_y = x, y\n    return str(result)\n"
    },
    {
        "number": 4248,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    xs = stdin.split()\n    n = int(xs[0])\n    coords = []\n    for i in range(1, n + 1):\n        x, y = xs[i].split(' ')\n        coords.append(complex(float(x), float(y)))\n    coords.sort()\n    n = len(coords)\n    coords.sort(key=lambda x: x * x)\n    c = complex(coords[n // 2].real, coords[n // 2].imag)\n    # print(coords)\n    dists = []\n    for x in coords:\n        dists.append(abs(x - c))\n    # print(dists)\n    c_dist = sum(dists) / n\n    # print(c_dist)\n    return str(c_dist)\n"
    },
    {
        "number": 4248,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    points = []\n    for i in range(int(stdin)):\n        x, y = map(float, input().split())\n        points.append((x, y))\n    points.sort(key=lambda p: p[1])\n    points.sort(key=lambda p: p[0])\n    right = points[0][1]\n    left = points[0][0]\n    for i in range(1, len(points)):\n        right = max(right, points[i][1])\n        left = min(left, points[i][0])\n    return str(abs(right - left))\n"
    },
    {
        "number": 4249,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, *a = [int(i) for i in stdin.split()]\n    if max(a) > m:\n        return '-1'\n    a.sort()\n    if max(a) < n:\n        return '-1'\n    if len(a) == 1:\n        return str(1)\n    return str(max(a))\n"
    },
    {
        "number": 4249,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # N, M = map(int, stdin.split())\n    # cups = list(map(int, stdin.split()))\n    #\n    # days = -1\n    # while days < N:\n    #     days += 1\n    #     cups = cups[1:] + cups[:1]\n    #     new_cups = [cups.pop(0) for _ in range(4)]\n    #     for i, cup in enumerate(new_cups):\n    #         if cup == 1:\n    #             break\n    #     cups = new_cups + cups\n    #     if sum(cups) == 1:\n    #         break\n    #\n    # return str(days) if days >= N else -1\n\n    N, M = map(int, stdin.split())\n    cups = list(map(int, stdin.split()))\n\n    # Write your code here\n    i = 0\n    days = 0\n    while True:\n        if i == N:\n            break\n\n        i += 1\n        cup = cups[i]\n        if cup <= cups[0]:\n            days += 1\n        else:\n            cups = cups[1:] + cups[:1]\n    print(days)\n"
    },
    {
        "number": 4249,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    if n < m:\n        return '-1'\n\n    days = 0\n    for i in range(m):\n        days += max(0, a[i] - i)\n    return str(days)\n"
    },
    {
        "number": 4249,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    cups = list(map(int, stdin.split()))\n    # cups = [int(i) for i in stdin.split()]\n    print(n, m, cups)\n    print(solution_iterative(n, m, cups))\n\n\ndef"
    },
    {
        "number": 4249,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    return \"1\" if (1 in a) * (a[0] == 1) * (a[1] == 1) * (a[2] == 1) else \"2\"\n\nprint(solution(input()))"
    },
    {
        "number": 4249,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    cups = list(map(int, stdin.split()))\n\n    #n = 5\n    #m = 8\n    #cups = [2, 3, 1, 1, 2, 5, 1, 1, 1, 1]\n\n    last_cup = cups[-1]\n    last_cup_idx = 0\n\n    for cup in range(n):\n        if last_cup < cups[cup]:\n            #cups[cup] <= cups[last_cup_idx]\n            #first cup must be the last one\n            last_cup_idx = (last_cup_idx + 1) % len(cups)\n        cups[cup], cups[last_cup_idx] = cups[last_cup_idx], cups[cup]\n        last_cup = cups[cup]\n\n    #print(cups)\n    return str(cups.index(1) + 1)"
    },
    {
        "number": 4249,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4249,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    cups = tuple(map(int, stdin.split()))\n    n_cups = len(cups)\n    n_coffees = len(cups)\n    taken = cups[:n_coffees]\n    cups = cups[n_coffees:]\n    m = max(cups)\n    if m < 2:\n        return \"-\"\n    taken_m = len(set(taken))\n    if m < taken_m:\n        return \"-\"\n    # must be == m+1\n    cups = cups + (m,)\n    cups = sorted(cups)\n    n_cups = len(cups)\n    # print(cups)\n    for i in range(n_cups):\n        if cups[i]!= i + 1:\n            return \"-\"\n    while n_cups:\n        cups.pop()\n        n_cups -= 1\n    # print(cups)\n    return str(cups[0])\n"
    },
    {
        "number": 4249,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    c = min(a) - 1\n    l = m\n    days = 0\n    while l >= c:\n        if c + 1 in a:\n            c += 1\n            l -= 1\n        else:\n            c += 1\n            days += 1\n    return str(days) if days!= float('inf') else -1\n"
    },
    {
        "number": 4249,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    a = list(map(int, stdin.strip().split()))\n\n    cups = list(range(n))\n    cups = a + cups[:m]\n    min_day = n\n\n    while len(cups) > 1:\n        cups = cups[1:] + [cups[0]]\n        cups = cups[:n]\n\n        for i in range(len(cups) - 1):\n            cups[i] = cups[i + 1] - 1\n        cups[-1] += 1\n\n        for i in range(len(cups) - 1):\n            cups[i + 1] = cups[i]\n\n    print(min_day)\n"
    },
    {
        "number": 4250,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    nums = list(map(int, stdin.split()))\n    # print(nums)\n    visited = [False] * n\n    result = []\n    # print(visited)\n    def dfs(s):\n        if len(s) == k:\n            result.append(s)\n            return\n        for i in range(len(nums)):\n            if visited[i] or nums[i] > s[-1]:\n                continue\n            visited[i] = True\n            dfs(s + [nums[i]])\n            visited[i] = False\n    dfs([])\n    return str(result)\n    \n"
    },
    {
        "number": 4250,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = list(map(int, stdin.split()))\n    \n    def permutations(arr):\n        if len(arr) == k:\n            return arr\n        else:\n            res = []\n            for i, n in enumerate(arr):\n                if i > 0 and arr[i - 1] == n:\n                    continue\n                tmp = permutations(arr[:i] + arr[i+1:])\n                for t in tmp:\n                    res.append(n+t)\n            return res\n    return \" \".join(permutations(s))\n"
    },
    {
        "number": 4250,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = list(map(int, stdin.split()))\n    t = []\n    c = 0\n    for i in range(n):\n        if c < k:\n            c += 1\n            t.append(s[i])\n        else:\n            break\n    for i in range(n):\n        if c < k:\n            c += 1\n            t.append(s[i])\n    return \" \".join(map(str, t))\nprint(solution(input()))\n"
    },
    {
        "number": 4250,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = list(map(int, stdin.split()))\n    ans = []\n    for i in range(n):\n        if s[i] == i + 1:\n            ans.append(i + 1)\n    return str(len(ans))"
    },
    {
        "number": 4250,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    num_of_elemnts, k = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    return str([i for i in range(1, num_of_elemnts + 1)]) if k == 1 else (\n        str([i for i in range(1, num_of_elemnts + 1)]) + str(\n            [\n                min(i for i in range(1, num_of_elemnts + 1) if i!= elem)\n                for elem in arr\n            ]\n        )\n    )\n"
    },
    {
        "number": 4250,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = list(map(int, stdin.split()))\n    n, k = s[0], s[1]\n    if k > n:\n        return ''\n\n    # Now we have n >= k so we can take k-1 copies of k-1 elements and put them into the array\n    # and search through all permutations of k-1 elements\n    # and if one of them can reduce the number of copies in the array we can cut out the copy\n    def search_for_cut(arr, k):\n        for i in range(1, k + 1):\n            if can_cut_out(arr, i):\n                return i\n        return 0\n\n    # Can cut out some number of k elements\n    def can_cut_out(arr, k):\n        s = set(arr)\n        for i in range(1, k + 1):\n            if i not in s:\n                return False\n        return True\n\n    return''.join(map(str, [search_for_cut(s, k)]))\n\n\ndef"
    },
    {
        "number": 4250,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    from itertools import permutations\n    n, k = map(int, stdin.split())\n    array = list(map(int, stdin.split()))\n    n_perms = len(permutations(array))\n    print(f\"{n_perms}\")\n    res = []\n    for i in range(n_perms):\n        if n_perms == 1:\n            return str(array)\n        perm = list(permutations(array))\n        if n_perms > 1 and len(set(perm)) == n:\n            res.append(str(perm))\n        array = perm\n    return str(max(res, key=lambda x: len(x)))\n"
    },
    {
        "number": 4250,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.strip().split()))\n    nums = list(map(int, stdin.strip().split()))\n    ret = []\n    while len(nums) > 0:\n        nums = sorted(nums)\n        i = 0\n        while i < len(nums) and nums[i] <= k:\n            if i < len(nums) - 1:\n                nums[i] -= 1\n                nums[i + 1] += 1\n            else:\n                nums[i] -= 1\n            i += 1\n        ret.append(nums.pop())\n    return''.join(map(str, ret))"
    },
    {
        "number": 4250,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = list(map(int, stdin.split()))\n    t = list(range(1, n + 1))\n    return str(max(t[i] for i in range(k) if t[i] in s))"
    },
    {
        "number": 4250,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = list(map(int, stdin.split()))\n    m = min(s)\n    if m > k:\n        return ''\n    for i in range(n):\n        for j in range(k):\n            if s[i] == m:\n                s[i] += s[j]\n                break\n        else:\n            continue\n        break\n    return''.join(map(str, sorted(s)))\n"
    },
    {
        "number": 4251,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    matrix = [[int(x) for x in stdin.split()] for _ in range(n)]\n    k = 0\n    for i in range(n):\n        column_c = matrix[i]\n        for j in range(1, m):\n            column_c_next = matrix[i + j]\n            if max(column_c) - min(column_c) > k:\n                break\n            if column_c == column_c_next:\n                k = max(k, 0)\n    return str(k)\n"
    },
    {
        "number": 4251,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.strip()\n"
    },
    {
        "number": 4251,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    s = [[int(x) for x in stdin.split()] for _ in range(n)]\n    for i in range(n):\n        for j in range(m - 1):\n            if abs(s[i][j] - s[i][j + 1]) > 2:\n                return 0\n    return max(map(len, map(set, zip(*s))))\n"
    },
    {
        "number": 4251,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    matrix = [list(map(int, stdin.split())) for _ in range(n)]\n    \n    # Iterate over columns and find out if any row can be rearranged to get a valid traversal.\n    for i in range(m):\n        for j in range(n-1, 0, -1):\n            if abs(matrix[j][i] - matrix[j-1][i]) > n:\n                return \"0\"\n    # If the above loop completes without finding an invalid traversal, return the maximum integer greater than 1\n    return str(max([n for n in range(1, n+1)]))\n\nimport sys\nprint(solution(sys.stdin.read()))"
    },
    {
        "number": 4251,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin_list = stdin.split()\n    n, m = stdin_list[0], stdin_list[1]\n    a = stdin_list[2:]\n    return str(max_acceptable_traversal(n, m, a))\n\n\ndef"
    },
    {
        "number": 4251,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\nfrom sys import stdin\nfrom collections import deque\n\nn, m = map(int, stdin.readline().split())\n\nmatrix = []\nfor _ in range(n):\n    matrix.append(list(map(int, stdin.readline().split())))\n\n\ndef"
    },
    {
        "number": 4251,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [[int(i) for i in stdin.split()[j]] for j in range(n)]\n    s = 0\n    for j in range(1, m):\n        for i in range(n):\n            s = max(abs(a[i][j] - a[i][j - 1]), s)\n    return str(s)\n"
    },
    {
        "number": 4251,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    return str(find_answer(a, n, m))\n\ndef"
    },
    {
        "number": 4251,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [[int(i) for i in stdin.split()] for _ in range(n)]\n    k = 0\n    for i in range(n):\n        for j in range(1, m):\n            diff = abs(a[i][j] - a[i][j-1])\n            if diff > k:\n                k = diff\n    return k\n"
    },
    {
        "number": 4251,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [[int(x) for x in stdin.split()] for _ in range(n)]\n    max_dist = 0\n    for i in range(n):\n        max_dist = max(max_dist, find_max_dist(a, i))\n    for i in range(m):\n        max_dist = max(max_dist, find_max_dist(a, i))\n    return str(max_dist)\n\n\ndef"
    },
    {
        "number": 4252,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    l = len(stdin)\n    for i in range(l):\n        if stdin[i]==\"x\" and stdin[i+1]==\"x\" and stdin[i+2]==\"x\":\n            return str(l-3)\n    return str(0)\n"
    },
    {
        "number": 4252,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    file = stdin\n    for i in range(3, n):\n        if \"x\" in file[i]:\n            return 0\n    return n - 3\n\nprint(solution(input()))"
    },
    {
        "number": 4252,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    arr = list(stdin)\n    idx = 0\n    for i in range(1, len(arr)):\n        if arr[idx] == 'x':\n            if arr[idx - 1] == 'x':\n                break\n            else:\n                idx += 1\n    arr.pop(idx)\n    arr.pop(idx)\n    if arr[-1] == 'x':\n        arr.pop()\n    return ''.join(arr)\n"
    },
    {
        "number": 4252,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")[1]\n    forbidden = \"xxx\"\n    while forbidden in stdin:\n        for i in range(len(stdin)):\n            if stdin[i] == forbidden:\n                stdin = stdin[:i] + stdin[i + 1:]\n                break\n    return len(stdin)\n\"\"\"\nfrom math import ceil\nn = int(input())\nstdin = input()\nforbidden = \"xxx\"\nwhile forbidden in stdin:\n    for i in range(len(stdin)):\n        if stdin[i] == forbidden:\n            stdin = stdin[:i] + stdin[i + 1:]\n            break\nprint(ceil(n - len(stdin)))"
    },
    {
        "number": 4252,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    word = stdin\n    count = 0\n    for i in range(len(word)-1):\n        if word[i] == word[i+1]:\n            count += 1\n    if count >= 3:\n        return 0\n    else:\n        return len(word) - count\n\n\nsolution(\"xxoxx\")\n\n\ndef"
    },
    {
        "number": 4252,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    name_list = stdin.split()\n    count = 0\n    for name in name_list:\n        if ('x' in name) or ('X' in name):\n            name = name.replace('x','X')\n            count = count + 1\n            print(name)\n    return str(count)\nsolution(stdin)\n'''\n\ndef"
    },
    {
        "number": 4252,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(stdin.replace(\"x\", \"\")) - len(stdin))\n"
    },
    {
        "number": 4252,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    filename = stdin\n    count = 0\n    for i in range(n):\n        if filename.count(\"x\") >= 3:\n            count += 1\n            filename = filename.replace(\"x\", \"\", 1)\n    return str(count)\n"
    },
    {
        "number": 4252,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    file_name = stdin.replace('\\n', '')\n    x_count = 0\n    for i in range(n):\n        if file_name[i] == 'x':\n            x_count += 1\n    if x_count == 0:\n        return 0\n    else:\n        return n - x_count\n"
    },
    {
        "number": 4252,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    return '0' if not stdin else min(stdin.replace('x', ''), key=len)\n"
    },
    {
        "number": 4253,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r: int = int(stdin)\n    return str(3 * pow(r, 2))\n"
    },
    {
        "number": 4253,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    return f\"{3*(r**2):.2f}\""
    },
    {
        "number": 4253,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    r: int = int(stdin)\n    a: int = 3 * pow(r, 2)\n    return str(a)\n"
    },
    {
        "number": 4253,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    return 3 * (r ** 2)\n"
    },
    {
        "number": 4253,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4253,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    area = (3*(r**2))/2\n    return str(area)\n"
    },
    {
        "number": 4253,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    radius: int = int(stdin)\n    return str(pow(3, 2)*radius**2)\n"
    },
    {
        "number": 4253,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4253,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4253,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    print(3*r**2)\n    return 'done'"
    },
    {
        "number": 4254,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    sheep, wolf = list(map(int, stdin.split()))\n    if wolf > sheep:\n        return \"unsafe\"\n    else:\n        return \"safe\""
    },
    {
        "number": 4254,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return'safe' if (int(stdin.split()[0]) >= int(stdin.split()[1])) else 'unsafe'\n\n\ndef"
    },
    {
        "number": 4254,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    if stdin == \"S\" or stdin == \"W\":\n        return stdin\n    return \"unsafe\""
    },
    {
        "number": 4254,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the solution to the problem.\"\"\"\n    # Sample input\n    # S W\n    # Sample output\n    # unsafe\n    #\n    # There are four sheep and five wolves. The number of wolves is not less than that of sheep, so they will attack them.\n    #\n    # Notes\n    #     1. S = number of sheep, W = number of wolves\n    #     2. V = the smaller of S and W.\n    #     3. S > W, so W > V + 1.\n    #     4. W >= S, so V >= W - S + 1.\n    #     5. V - W = S - W - S + 1\n    #     6. V = S + W\n    #     7. V = S + W = n + m\n    #     8. V >= W, so (n + m) >= m - 1\n    #     9. (n + m) = n + m - 1\n    #     10. (n + m) = n - 1 + m\n    #     11. (n + m) = n - 1 + m - 1\n    #     12. (n + m) = n - 2\n    #     13. (n + m) = (n - 1) + m\n    #     14. (n + m) = (n - 1) + m - 1\n    #     15. (n + m) = (n - 1) + m - 2\n    #     16. (n + m) = (n - 1) + m - 3\n    #     17. (n + m) = (n - 1) + m + 1\n    #     18. (n + m) = (n - 1) + m + 2\n    #     19. (n + m) = (n - 1) + m + 3\n    #     20. (n + m) = (n - 2)\n    #     21. (n + m) = (n - 1) + m - 1\n    #     22. (n + m) = (n - 1) + m - 2\n    #     23. (n + m) = (n - 1) + m - 3\n    #     24. (n + m) = (n - 1) + m + 1\n    #     25. (n + m) = (n - 1) + m + 2\n    #     26. (n + m) = (n - 1) + m + 3\n    #     27. (n + m) = (n - 2)\n    #     28. (n + m) = (n - 1) + m - 1\n    #     29. (n + m) = (n - 1) + m - 2\n    #     30. (n + m) = (n - 1) + m - 3\n    #     31. (n + m) = (n - 1) + m + 1\n    #     32. (n + m) = (n - 1) + m + 2\n    #     33. (n + m) = (n - 1) + m + 3\n    #     34. (n + m) = (n - 2) + 1\n    #     35. (n + m) = (n - 1) + m - 1\n    #     36. (n + m) = (n - 1) + m - 2\n    #     37. (n + m) = (n - 1) + m - 3\n    #     38. (n + m) = (n - 1) + m + 1\n    #     39. (n + m) = (n - 1) + m + 2\n    #     40. (n + m) = (n - 1) + m + 3\n    #     41. (n + m) = (n - 2) + 1\n    #     42. (n + m) = (n - 1) + m - 1\n    #     43. (n + m) = (n - 1) + m - 2\n    #     44. (n + m) = (n - 1) + m - 3\n    #     45. (n + m) = (n - 1) + m + 1\n    #     46. (n + m) = (n - 1) + m + 2\n    #     47. (n + m) = (n - 1) + m + 3\n    #     48. (n + m) = (n - 2) + 1\n    #     49. (n + m) = (n - 1) + m - 1\n    #     50. (n + m) = (n - 1) + m - 2\n    #     51. (n + m) = (n - 1) + m - 3\n    #     52. (n + m) = (n - 1) + m + 1\n    #     53. (n + m) = (n - 1) + m + 2\n    #     54. (n + m) = (n - 1) + m + 3\n    #     55. (n + m) = (n - 2) + 1\n    #     56. (n + m) = (n - 1) + m - 1\n    #     57. (n + m) = (n - 1) + m - 2\n    #     58. (n + m) = (n - 1) + m - 3\n    #     59. (n + m) = (n - 1) + m + 1\n    #     60. (n + m) = (n - 1) + m + 2\n    #     61. (n + m) = (n - 1) + m + 3\n    #     62. (n + m) = (n - 2) + 1\n    #     63. (n + m) = (n - 1) + m - 1\n    #     64. (n + m) = (n - 1) + m - 2\n    #     65. (n + m) = (n - 1) + m - 3\n    #     66. (n + m) = (n - 1) + m + 1\n    #     67. (n + m) = (n - 1) + m + 2\n    #     68. (n + m) = (n - 1) + m + 3\n    #     69. (n + m) = (n - 2) + 1\n    #     70. (n + m) = (n - 1) + m - 1\n    #     71. (n + m) = (n - 1) + m - 2\n    #     72. (n + m) = (n - 1) + m - 3\n    #     73. (n + m) = (n - 1) + m + 1\n    #     74. (n + m) = (n - 1) + m + 2\n    #     75. (n + m) = (n - 1) + m + 3\n    #     76. (n + m) = (n - 2) + 1\n    #     77. (n + m) = (n - 1) + m - 1\n    #     78. (n + m) = (n - 1) + m - 2\n    #     79. (n + m) = (n - 1) + m - 3\n    #     80. (n + m) = (n - 1) + m + 1\n    #     81. (n + m) = (n - 1) + m + 2\n    #     82. (n + m) = (n - 1) + m + 3\n    #     83. (n + m) = (n - 2) + 1\n    #     84. (n + m) = (n - 1) + m - 1\n    #     85. (n + m) = (n - 1) + m - 2\n    #     86. (n + m) = (n - 1) + m - 3\n    #     87. (n + m) = (n - 1) + m + 1\n    #     88. (n + m) = (n - 1) + m + 2\n    #     89. (n + m) = (n - 1) + m + 3\n    #     90. (n + m) ="
    },
    {
        "number": 4254,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    S, W = stdin.strip().split(\" \")\n    if int(S) >= int(W):\n        return \"unsafe\"\n    else:\n        return \"safe\""
    },
    {
        "number": 4254,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return 'unsafe' if int(stdin.split()[1]) > int(stdin.split()[0]) else'safe'"
    },
    {
        "number": 4254,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    S, W = map(int, stdin.split())\n\n    if W > S:\n        return \"unsafe\"\n\n    return \"safe\"\n\ndef"
    },
    {
        "number": 4254,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s, w = stdin.split()\n    return \"unsafe\" if int(w) > int(s) else \"safe\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4254,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    _, wolves = stdin.split(' ')\n    if int(wolves) >= int(sheep):\n        return 'unsafe'\n    else:\n        return'safe'\n\nprint(solution(input()))"
    },
    {
        "number": 4254,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    stdin_list = stdin.split(' ')\n    s = int(stdin_list[0])\n    w = int(stdin_list[1])\n    if s < w:\n        print('unsafe')\n    else:\n        print('safe')\n    return stdin\n\nsolution('4 5')\n"
    },
    {
        "number": 4255,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    AB, BC, CA = map(int, stdin.split())\n    return str(int(AB * CA / 2))\n\nprint(solution(input()))"
    },
    {
        "number": 4255,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    AB, BC, CA = map(int, stdin.split(' '))\n    return str(math.sqrt(AB**2 + BC**2) * CA)\n"
    },
    {
        "number": 4255,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    return f\"{(a*c)/2:.1f}\"\n"
    },
    {
        "number": 4255,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the area of the triangle ABC.\n\n    Constraints:\n      1 \\leq |AB|,|BC|,|CA| \\leq 100\n      All values in input are integers.\n\n    [Expected Result]\n      The area of the triangle ABC is an integer.\n    \"\"\"\n    _, a, b, c = list(map(int, stdin.split()))\n    return f\"{int(a * b * (c / 2))}\"\n\n\nprint(solution(\"3 4 5\"))\nprint(solution(\"3 6 5\"))\n"
    },
    {
        "number": 4255,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    s = (a + b + c) / 2\n    s_sq = s * (s - a) * (s - b) * (s - c)\n    return f\"{int(s_sq)} {'is' if s_sq == int(s_sq) else 'is not'}\"\n"
    },
    {
        "number": 4255,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = stdin.split(' ')\n    a, b, c = [int(a) for a in (A, B, C)]\n    A = (a * (a + b) * (a + b + c) * (a + b + c + c)) // 4\n    print(A)\n    return A\n\n\nprint(solution(input()))"
    },
    {
        "number": 4255,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = stdin.split(\" \")\n    return str(int(A) * int(C) / 2)\n"
    },
    {
        "number": 4255,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    AB, BC, CA = map(int, stdin.split())\n    return str(int(((AB * BC) / 2) + (CA * AB) / 2))\n"
    },
    {
        "number": 4255,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('2 2 4')\n    '6'\n    >>> solution('5 5 1')\n    '6'\n    >>> solution('3 3 5')\n    '6'\n    \"\"\"\n    AB, BC, CA = map(int, stdin.split())\n    return f'{(AB * BC * CA) ** 0.5}'\n"
    },
    {
        "number": 4255,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    AB, BC, CA = map(int, stdin.split(\" \"))\n    return \"The area of the triangle ABC is {}\".format(AB * BC * (CA / 2))\n"
    },
    {
        "number": 4256,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    A, B, C = map(int, stdin.split())\n    return str(A + B * C)\n"
    },
    {
        "number": 4256,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    return str(min(A // (B * C), A // (B * C) - A // (B * C) + 1))\n"
    },
    {
        "number": 4256,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A,B,C = map(int, stdin.split())\n    if A+B>=C:\n        return A+B-C\n    else:\n        return 0\n"
    },
    {
        "number": 4256,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Split input\n    split_input = stdin.split()\n    # Check if values are valid\n    validate_input = validate_input(split_input)\n    # Check if all values are valid\n    if validate_input:\n        # Check if a condition is valid\n        validate_condition = validate_condition(split_input)\n        # Check if a condition is valid\n        if validate_condition:\n            # Get values\n            a, b, c = split_input\n            # Print result\n            return print_result(a, b, c)\n"
    },
    {
        "number": 4256,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = stdin.split(\" \")\n    A = int(A)\n    B = int(B)\n    C = int(C)\n    minA = A // min(B, C)\n    if (A % minA!= 0):\n        minA += 1\n    return str(minA)\n"
    },
    {
        "number": 4256,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if A == 1:\n        if B == 1:\n            if C == 0:\n                return \"0\"\n            return str(C)\n        return str(C)\n    if C >= A:\n        return str(C)\n    if C <= A:\n        return str(A)\n    return str(A + (C - A))"
    },
    {
        "number": 4256,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    print(min(a, b, c))\n    return\nsolution()"
    },
    {
        "number": 4256,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    A, B, C = map(int, stdin.split())\n    yen = 8\n    if A <= yen and B <= yen and C <= yen:\n        return A + B + C\n    else:\n        return '-1'\n"
    },
    {
        "number": 4256,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(' ')\n    a = int(stdin[0])\n    b = int(stdin[1])\n    c = int(stdin[2])\n    num_of_times = 0\n    yen = 0\n    while yen < a:\n        yen += b\n        num_of_times += 1\n        if yen > a:\n            yen = yen - a\n            num_of_times += 1\n    while yen < c:\n        yen += b\n        num_of_times += 1\n        if yen > c:\n            yen = yen - c\n            num_of_times += 1\n    return str(num_of_times)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4256,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A,B,C = map(int,stdin.split())\n    return str(A*B*C//C)\n\ndef"
    },
    {
        "number": 4257,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin.strip()) * int(stdin.strip()))\n"
    },
    {
        "number": 4257,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    print(a*b)\n"
    },
    {
        "number": 4257,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A,B= map(int,stdin.split())\n    return str(A*B)"
    },
    {
        "number": 4257,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B = list(map(int, stdin.split()))\n    return str(A * B)"
    },
    {
        "number": 4257,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B = list(map(int, stdin.split(\" \")))\n    return str(A*B)\n"
    },
    {
        "number": 4257,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    return f'{int(a) * int(b)}'\n"
    },
    {
        "number": 4257,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    stdin = stdin.split(' ')\n    stdin = list(map(int, stdin))\n    return str(stdin[0]*stdin[1])\n\nsolution('2 5')\nsolution('4 6')\nsolution('3 5')\nsolution('5 7')\n\ndef"
    },
    {
        "number": 4257,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(\" \"))\n    return str(a * b)\n"
    },
    {
        "number": 4257,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.split(' ')[0]"
    },
    {
        "number": 4257,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    A, B = map(int, stdin.split())\n    return str(A * B)\n"
    },
    {
        "number": 4258,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    num_seconds_of_biscuits = 0\n    seconds_of_biscuits = int(stdin)\n    while seconds_of_biscuits:\n        num_seconds_of_biscuits += seconds_of_biscuits\n        seconds_of_biscuits = int(stdin) - seconds_of_biscuits\n    return str(num_seconds_of_biscuits)"
    },
    {
        "number": 4258,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, T = map(int, stdin.split())\n    T_elapsed = 0\n    biscuit_produced = 0\n    while T_elapsed < T + 0.5:\n        T_elapsed += A\n        biscuit_produced += 1\n        if T_elapsed >= T:\n            break\n        T_elapsed += 2 * A\n        biscuit_produced += 1\n        if T_elapsed >= T:\n            break\n        T_elapsed += 3 * A\n        biscuit_produced += 1\n        if T_elapsed >= T:\n            break\n    return str(biscuit_produced)\n"
    },
    {
        "number": 4258,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, T = map(int, stdin.split())\n    return str(int(A * (B - 1) / (T + 0.5) + 1))\n"
    },
    {
        "number": 4258,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B, T = map(int, stdin.split(\" \"))\n    total_biscuits = 0\n\n    for i in range(0, int(T/A)):\n        total_biscuits += 5\n    for i in range(0, int(T/2)):\n        total_biscuits += 6\n    for i in range(0, int(T/3)):\n        total_biscuits += 7\n    for i in range(0, int((T-1)/A)):\n        total_biscuits += 8\n    for i in range(0, int((T-2)/A)):\n        total_biscuits += 9\n    total_biscuits += 10\n\n    return str(total_biscuits)\n"
    },
    {
        "number": 4258,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    (A, B, T) = map(int, stdin.split())\n    return str(int(T + 0.5) * (A + B))"
    },
    {
        "number": 4258,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, T = map(int, stdin.split())\n    Biscuit = []\n    for i in range(0,T+0.5,A):\n        Biscuit.append(B)\n    print(len(Biscuit))\n    return ''.join(map(str,Biscuit))"
    },
    {
        "number": 4258,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B, T = map(int, stdin.split(\" \"))\n    mul_of_A = 1\n    mul_of_B = 1\n    cur_time = 0\n    produced_biscuits = 0\n    while True:\n        if cur_time + A >= T:\n            mul_of_A *= 2\n            cur_time = T - A\n        elif cur_time + mul_of_A >= T:\n            produced_biscuits += 1\n            cur_time = T - mul_of_A\n        else:\n            cur_time += A\n            if cur_time + mul_of_B >= T:\n                produced_biscuits += 1\n                cur_time = T - mul_of_B\n            else:\n                cur_time += mul_of_B\n        mul_of_B *= 2\n        if cur_time + mul_of_B >= T:\n            mul_of_B *= 2\n            cur_time = T - mul_of_B\n            mul_of_B = 1\n        if mul_of_B == 1 and mul_of_A == 1:\n            break\n    return str(produced_biscuits)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4258,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B, T = list(map(int, stdin.strip().split()))\n    return str(A * (T + 0.5) + (B * (T + 0.5 + 0.5)) + (B * (T + 0.5 + 1.5)))\nprint(solution(input()))\n"
    },
    {
        "number": 4258,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, T = map(int, stdin.split())\n    # return str(A*(T+0.5) + (A*(2*T+0.5) + (A*(3*T+0.5)+A*(4*T+0.5))/4) + (A*(5*T+0.5) + (A*(6*T+0.5) + A*(7*T+0.5)+A*(8*T+0.5))/8) )\n    return str(int(A*((T+0.5)%T)*2 + (A*((2*T+0.5)%T)*3 + A*((3*T+0.5)%T)*4 + A*((4*T+0.5)%T)*5) + (A*((5*T+0.5)%T)*6 + A*((6*T+0.5)%T)*7 + A*((7*T+0.5)%T)*8) ) )"
    },
    {
        "number": 4258,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, T = map(int, stdin.split())\n    ans = 0\n    t = 0\n    while t < T + 0.5:\n        if t % A == 0:\n            ans += 1\n        t += 1\n    print(ans)\n    return ''\n"
    },
    {
        "number": 4259,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split())\n\n    if A % K == 0 or B % K == 0:\n        if A % K == 0 and B % K == 0:\n            print(f\"OK\")\n        elif A % K == 0:\n            print(f\"OK\")\n        else:\n            print(f\"NG\")\n    else:\n        print(f\"NG\")"
    },
    {
        "number": 4259,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    _, A, B = stdin.split()\n    A, B, K = int(A), int(B), int(K)\n\n    for k in range(K, 0, -1):\n        if A % k == 0 and B % k == 0:\n            if A * k + B * k == K:\n                print('OK')\n                break\n    else:\n        print('NG')"
    },
    {
        "number": 4259,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, K = map(int, stdin.split(\" \"))\n\n    if A % K == 0:\n        print(\"OK\")\n        return\n\n    if A % K!= 0 and B % K!= 0:\n        print(\"NG\")\n        return\n\n    for i in range(A, B + 1):\n        if (i % K == 0) or (i % K!= 0 and (i + K) % K == 0):\n            print(\"OK\")\n            return\n\n    print(\"NG\")\n    return\n"
    },
    {
        "number": 4259,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    _, a, b, k = stdin.split(' ')\n    k = int(k)\n    a, b = int(a), int(b)\n    if (a % k == 0 and b % k == 0) or (a % k == 0 and b % k!= 0) or (a % k!= 0 and b % k == 0):\n        print('OK')\n    else:\n        print('NG')\n\n\nsolution(input())\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4259,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Takes a string as input, stdin, and returns a string as output, stdout.\n    '''\n    # Your code here\n    \n    # parse input from STDIN\n    K, A, B = stdin.split()\n    K = int(K)\n    A = int(A)\n    B = int(B)\n\n    # test for carry distance\n    for i in range(A, B+1):\n        if i % K == 0:\n            print(\"OK\")\n            break\n    else:\n        print(\"NG\")"
    },
    {
        "number": 4259,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin.split()[0])\n    A, B = map(int, stdin.split()[1].split())\n    return(\"OK\" if (A % K == 0 and B % K == 0) else \"NG\")\n"
    },
    {
        "number": 4259,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    K, A, B = map(int, stdin.split())\n    A = A * (K // A)\n    B = B * (K // B)\n    diff = abs(A - B)\n    if A == B and diff % K == 0:\n        return \"OK\"\n    else:\n        return \"NG\""
    },
    {
        "number": 4259,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\" \")\n    k = int(stdin[0])\n    a, b = map(int, stdin[1].split(\" \"))\n    for i in range(a, b+1):\n        if i % k == 0:\n            print(\"OK\")\n            return \"OK\"\n    print(\"NG\")\n    return \"NG\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4259,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    from math import sqrt, floor\n    from decimal import Decimal\n    k, a, b = stdin.split(' ')\n    k, a, b = int(k), int(a), int(b)\n\n    if floor(sqrt(a)) == floor(sqrt(b)) and (a - 1) % k == (b - 1) % k:\n        print('OK')\n    else:\n        print('NG')\n    return 'OK' if floor(sqrt(a)) == floor(sqrt(b)) and (a - 1) % k == (b - 1) % k else 'NG'"
    },
    {
        "number": 4259,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def next_multiple(num: int) -> int:\n        \"\"\"Compute next multiple of num.\"\"\"\n        return num + num % next_multiple(num - 1)\n\n    def test_multiple(num: int) -> bool:\n        \"\"\"Check if num is multiple of K.\"\"\"\n        return num % K == 0\n\n    A, B = map(int, stdin.split())\n\n    # next_multiple(num) is used to find the next multiple of num\n    # If next_multiple(num) == A, it means A can be written as a multiple of num\n    # If next_multiple(num) == B, it means B can be written as a multiple of num\n    # If the latter is true, then A and B can be written as a multiple of K\n    # If the former is true, then A and B can be written as a multiple of K\n    # If A = next_multiple(num), and B = next_multiple(num) + K = next_multiple(num) + next_multiple(num)\n    # Then A and B can be written as a multiple of K\n    # If A = next_multiple(num) + K, and B = next_multiple(num)\n    # Then A and B can be written as a multiple of K\n    # If A = next_multiple(num) + next_multiple(num) + K, and B = next_multiple(num)\n    # Then A and B can be written as a multiple of K\n    # If A = next_multiple(num) + next_multiple(num) + K, and B = next_multiple(num) + next_multiple(num) + K\n    # Then A and B can be written as a multiple of K\n    # If A = next_multiple(num) + next_multiple(num) + K, and B = next_multiple(num) + next_multiple(num) + next_multiple(num) + K\n    # Then A and B can be written as a multiple of K\n    # If A = next_multiple(num) + next_multiple(num) + K, and B = next_multiple(num) + next_multiple(num) + next_multiple(num) + K\n    # Then A and B can be written as a multiple of K\n    # If A = next_multiple(num) + next_multiple(num) + K, and B = next_multiple(num) + next_multiple(num) + next_multiple(num) + K\n    # Then A and B can be written as a multiple of K\n    # If A = next_multiple(num) + next_multiple(num) + next_multiple(num) + K, and B = next_multiple(num) + next_multiple(num) + next_multiple(num) + K\n    # Then A and B can be written as a multiple of K\n    # If A = next_multiple(num) + next_multiple(num) + next_multiple(num) + K, and B = next_multiple(num) + next_multiple(num) + next_multiple(num) + next_multiple(num) + K\n    # Then A and B can be written as a multiple of K\n    # If A = next_multiple(num) + next_multiple(num) + next_multiple(num) + next_multiple(num) + K, and B = next_multiple(num) + next_multiple(num) + next_multiple(num) + next_multiple(num) + next_multiple(num) + K\n    # Then A and B can be written as a multiple of K\n    # If A = next_multiple(num) + next_multiple(num) + next_multiple(num) + next_multiple(num) + next_multiple(num) + next_multiple(num) + K, and B = next_multiple(num) + next_multiple(num) + next_multiple(num) + next_multiple(num) + next_multiple(num) + next_multiple(num) + next_multiple(num) + K\n    # Then A and B can be written as a multiple of K\n    # If A = next_multiple(num) + next_multiple(num) + next_multiple(num) + next_multiple(num) + next_multiple(num) + next_multiple(num) + next_multiple(num) + next_multiple(num) + K, and B = next_multiple(num) + next_multiple(num) + next_multiple(num) + next_multiple(num) + next_multiple(num) + next_multiple(num) + next_multiple(num) + next_multiple(num) + next_multiple(num) + K\n    # Then A and B can be written as a multiple of K\n    # If A = next_multiple(num) + next_multiple(num) + next_multiple(num) + next_multiple(num) + next_multiple(num) + next_multiple(num) + next_multiple(num) + next_multiple(num) + next_multiple(num) + next_multiple(num) + next_multiple(num) + next_multiple(num) + next_multiple(num) + K, and B = next_multiple(num) + next_multiple(num) + next_multiple(num) + next_multiple(num) + next_multiple(num) + next_multiple(num) + next_multiple(num) + next_multiple(num) + next_multiple(num) + next_multiple(num) + next_multiple(num) + next_multiple(num) + next_multiple(num) + next_multiple(num) + next_multiple(num) + next_multiple(num) + next_multiple(num) + next_multiple(num) + next_multiple(num) + next_multiple(num) + next_multiple(num) + next_multiple(num) + next_multiple(num) + next_multiple(num) + next_multiple(num) + next_multiple(num) + next_multiple(num) + next_multiple(num) + next_multiple(num) + next_multiple(num) + next_multiple(num) + next_multiple(num) + next_multiple(num) + next_multiple(num) + next_multiple(num) + next_multiple(num) + next_multiple(num) + next_multiple(num) + next_multiple(num) + next_multiple(num) + next_multiple(num) + next_multiple(num) + next_multiple(num) + next_multiple(num) + next_multiple(num) + next_multiple(num) + next_multiple(num) + next_multiple(num) + next_multiple(num) + next_multiple(num) + next_multiple(num) + next_multiple(num) + next_multiple(num) + next_multiple(num) + next_multiple(num) + next_multiple(num) + next_multiple(num) + next_multiple(num) + next_multiple(num) + next_multiple(num) + next_multiple(num) + next_multiple(num) + next_multiple(num) + next_multiple(num) + next_multiple(num) + next_multiple(num) + next_multiple(num) + next_multiple(num) + next_multiple(num) + next_multiple(num) + next_multiple(num) + next_multiple(num) + next_multiple(num) + next_multiple(num) + next_multiple(num) + next_multiple(num) + next_multiple(num) + next_multiple(num) + next_multiple(num) + next_multiple(num) + next_multiple(num) + next_multiple(num) + next_multiple(num) + next_multiple(num) + next_multiple(num) + next_multiple(num) + next_multiple(num) + next_multiple(num) + next_multiple(num) + next_multiple(num) + next_multiple(num) + next_multiple(num) + next_multiple(num) + next_multiple(num) + next_multiple(num) + next_multiple(num) +"
    },
    {
        "number": 4260,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t, x = map(int, stdin.split())\n    return f'{int(2 * t / (x * 3))}'\n"
    },
    {
        "number": 4260,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    hours, seconds = map(int, stdin.strip().split())\n    seconds = hours * 60 * 60 + seconds\n    return str(seconds // (60 * 60) + seconds % (60 * 60) // 60 + seconds % 60)\n"
    },
    {
        "number": 4260,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    T, X = map(int, stdin.split())\n    return \"{:.3f}\".format(((X + T) * 1.0) / 2)\n    \n"
    },
    {
        "number": 4260,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    t, x = map(int, stdin.split())\n    return '%.3f' % (t / x)"
    },
    {
        "number": 4260,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    T, X = map(int, stdin.strip().split(' '))\n    return str(int(X/T * 8))\n    return str(int(X/T * 8))\n"
    },
    {
        "number": 4260,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    T, X = stdin.split()\n    T = int(T)\n    X = int(X)\n    X = X*2\n    X = int(X)\n    X = X/3\n    return str(X)\n"
    },
    {
        "number": 4260,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    T, X = map(int, stdin.split())\n    t = X\n    while t < T:\n        t = t * 2\n    return str(t // 2)"
    },
    {
        "number": 4260,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    t, x = map(int, stdin.split())\n    t = t // (x * x)\n    return f'{t}'\n    return t\n"
    },
    {
        "number": 4260,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    t, x = list(map(int, stdin.split()))\n    return str(int(t / x))\n"
    },
    {
        "number": 4260,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    T, X = stdin.strip().split()\n    T = int(T)\n    X = int(X)\n    return str(float(T) / float(X) * 3)\n\ndef"
    },
    {
        "number": 4261,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n\n    if a == b or c == a or c == b:\n        return '1'\n\n    return str(min(a, b, c) - max(a, b, c))\n"
    },
    {
        "number": 4261,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    #your code here\n    a, b, c = map(int, stdin.split())\n    return str(min(b, c, a - (b + c)))"
    },
    {
        "number": 4261,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    [A, B, C] = stdin.split()\n    A, B, C = int(A), int(B), int(C)\n\n    return '1'\n"
    },
    {
        "number": 4261,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    return f\"{1} {2}\"\n"
    },
    {
        "number": 4261,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    _, A, B, C = stdin.split(' ')\n    A = int(A)\n    B = int(B)\n    C = int(C)\n    if A >= B and A >= C:\n        return \"1\"\n    elif A < B and A < C:\n        return \"2\"\n    elif A == B == C:\n        return \"3\"\n    elif A == B or A == C:\n        if A == B and C < A:\n            return \"1\"\n        elif A == C and B < A:\n            return \"1\"\n        elif A == C and B > A:\n            return \"1\"\n        elif A < C and B == A:\n            return \"2\"\n        elif A < C and B < A:\n            return \"2\"\n        elif A < C and B > A:\n            return \"2\"\n        elif A > B and C == A:\n            return \"3\"\n        elif A > B and C < A:\n            return \"3\"\n        elif A > B and C > A:\n            return \"3\"\n        elif A > C and B == A:\n            return \"3\"\n        elif A > C and B < A:\n            return \"3\"\n        elif A > C and B > A:\n            return \"3\"\n    else:\n        return \"0\"\n"
    },
    {
        "number": 4261,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    #if C < A and A > 0 and B > 0:\n    #    print(A - (A - C))\n    #else:\n    #    print(A + (C - A))\n    print(A + (C - A))"
    },
    {
        "number": 4261,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    [A, B, C] = list(map(int, stdin.split()))\n    result = abs(A - C)\n    if A >= B:\n        result = abs(A - (C + B))\n    return str(result)\n"
    },
    {
        "number": 4261,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    # Solution doesn't require changing any of the other bottles, so return 0\n    if a == b == c:\n        return '0'\n\n    # Calculate the amount of water that must be transferred\n    # Equation is (b - a) / (c - b)\n    # Solving equation\n    transfer = (b - a) / (c - b)\n    # print(f'Transfer is: {transfer}')\n\n    # Transfer water to Bottle 1\n    water_in_bottle1 = transfer * c\n    # print(f'Bottle 1 has {water_in_bottle1} milliliters of water')\n\n    # Add water to Bottle 2\n    water_in_bottle2 = transfer * (c - a)\n    # print(f'Bottle 2 has {water_in_bottle2} milliliters of water')\n\n    # Print the sum of the water that will remain in Bottle 1 and Bottle 2\n    return f'{water_in_bottle1 + water_in_bottle2}'\n"
    },
    {
        "number": 4261,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    [a, b, c] = list(map(int, stdin.split()))\n    return str(b // c if b > c else a // c)\n"
    },
    {
        "number": 4261,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    For your reference:\n    \n    If the amount of water is 0, we can't transfer it.\n    If the amount of water is equal or greater than A, we don't need to transfer anything.\n    If the amount of water is equal or less than A, we need to transfer all of it.\n    '''\n    \n    a,b,c = list(map(int, stdin.split(' ')))\n    \n    if c <= a:\n        return str(0)\n    if c >= b:\n        return str(a)\n    \n    return str(a) +'' + str(a) +'' + str(b) +'' + str(a) +'' + str(a) +'' + str(b) +'' + str(c) +'' + str(a) +'' + str(c) +'' + str(c)"
    },
    {
        "number": 4262,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    p = stdin.split()[1:]\n    q = stdin.split()[2:]\n    a, b = 0, 0\n    for i in range(n):\n        a = a * 10 + int(p[i])\n        b = b * 10 + int(q[i])\n    return abs(a - b)\n\nprint(solution(input()))\n\n=================================================================================================\n\ndef"
    },
    {
        "number": 4262,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    p = list(map(int, stdin.split()[1].split(' ')))\n    q = list(map(int, stdin.split()[2].split(' ')))\n    \n    if len(p)!= len(q):\n        return -1\n    \n    p.sort()\n    q.sort()\n    ans = 0\n    for i in range(n):\n        ans += abs(p[i] - q[i])\n    return str(ans)\n\nimport atexit\nimport io\nimport sys"
    },
    {
        "number": 4262,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split()\n    N = int(input[0])\n    P = list(map(int, input[1]))\n    Q = list(map(int, input[2]))\n    for P_i in range(1, N + 1):\n        if P_i in P:\n            P_i_index = P.index(P_i)\n            if P_i_index == 0:\n                P[0] = N + 1\n            else:\n                P[P_i_index - 1] = N + 1\n    for Q_i in range(1, N + 1):\n        if Q_i in Q:\n            Q_i_index = Q.index(Q_i)\n            if Q_i_index == 0:\n                Q[0] = N + 1\n            else:\n                Q[Q_i_index - 1] = N + 1\n    return str(abs(P[0] - Q[0]) )"
    },
    {
        "number": 4262,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    solution function\n    '''\n    N = int(stdin)\n    if N == 1:\n        return 0\n    if N == 2:\n        return 1\n    if N == 3:\n        return 2\n    if N == 4:\n        return 3\n    if N == 5:\n        return 4\n    if N == 6:\n        return 5\n    if N == 7:\n        return 6\n    if N == 8:\n        return 7\n    if N == 9:\n        return 8\n    if N == 10:\n        return 9\n\n    P, Q = stdin.split('\\n')\n    P = list(map(int, P.split()))\n    Q = list(map(int, Q.split()))\n    P.sort()\n    Q.sort()\n    if P[0] > Q[0]:\n        P, Q = Q, P\n    if P[-1] < Q[-1]:\n        P, Q = Q, P\n    total = 0\n    for i in range(1, N):\n        if P[i] < Q[i - 1]:\n            total += P[i] - Q[i - 1]\n    return total\n"
    },
    {
        "number": 4262,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def main(p, q):\n        n = len(p)\n        p = [i - 1 for i in p]\n        q = [i - 1 for i in q]\n        m = len(q)\n        dp = [[-1] * (n + 1) for _ in range(m + 1)]\n        dp[0][0] = 0\n        for i in range(m + 1):\n            dp[i][0] = i\n        for i in range(n + 1):\n            dp[0][i] = i\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if p[j - 1] < q[i - 1]:\n                    dp[i][j] = dp[i][j - 1]\n                else:\n                    dp[i][j] = min(dp[i - 1][j - 1], dp[i][j - 1]) + 1\n        return dp[m][n]\n    return str(main(stdin.split(), stdin.split()))\n"
    },
    {
        "number": 4262,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    pass\n"
    },
    {
        "number": 4262,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    p = list(map(int,stdin.split()))\n    q = list(map(int,stdin.split()))\n    if(n==0):\n        print(\"0\")\n        return\n    if(n==1):\n        print(\"0\")\n        return\n    \n    p.sort()\n    q.sort()\n    \n    print(abs(p[0]-q[0]))\n    return\n\nsolution(\"2\")\n"
    },
    {
        "number": 4262,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    p = stdin.split()[1].split(' ')\n    q = stdin.split()[2].split(' ')\n    result = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if p[i] > p[j]:\n                result += 1\n            if q[i] > q[j]:\n                result += 1\n    return str(result)"
    },
    {
        "number": 4262,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Your code goes here\n    N = int(stdin.strip())\n    A = [int(n) for n in stdin.strip().split(' ')]\n    a = set(A)\n    P = A[::-1]\n    for i in range(1,N):\n        P.append(P[i-1]*A[i-1])\n        P.append(P[i-1]*A[i])\n    Q = A[::-1]\n    for i in range(1,N):\n        Q.append(Q[i-1]*A[i-1])\n        Q.append(Q[i-1]*A[i])\n    print(P)\n    print(Q)\n    return abs(P[-1] - Q[-1])\n    # return abs(P[-1] - Q[-1])\n    # print(P)\n    # print(Q)\n    # print(P[-1] - Q[-1])\n    # return abs(P[-1] - Q[-1])\nsolution(input())\n"
    },
    {
        "number": 4262,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    P = list(map(int, stdin.split()))\n    Q = list(map(int, stdin.split()))\n    ans = 0\n    for i in range(N):\n        for j in range(N):\n            if i!= j:\n                if P[i] - P[j] < 0 and Q[i] - Q[j] < 0:\n                    ans = max(ans, abs(P[i] - P[j]) + abs(Q[i] - Q[j]))\n    return str(ans)\n"
    },
    {
        "number": 4263,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def _is_ACGT_substring(s: str) -> bool:\n        count_A, count_C, count_G, count_T = 0, 0, 0, 0\n        for c in s:\n            if c == 'A':\n                count_A += 1\n            elif c == 'C':\n                count_C += 1\n            elif c == 'G':\n                count_G += 1\n            elif c == 'T':\n                count_T += 1\n            else:\n                return False\n        return count_A == count_C == count_G == count_T\n    \n    max_count = 0\n    max_str = None\n    for s in stdin:\n        if _is_ACGT_substring(s):\n            if max_count < len(s):\n                max_str = s\n                max_count = len(s)\n    return max_str"
    },
    {
        "number": 4263,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N: int = len(stdin)\n    ACGT = \"ACGT\"\n\n    n: int = 1\n    max_len: int = 1\n    while n <= N:\n        for i in range(N - n + 1):\n            s = stdin[i:i + n]\n            if set(s) == set(ACGT):\n                if max_len < n:\n                    max_len = n\n\n        n += 1\n\n    return max_len\n"
    },
    {
        "number": 4263,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join(sorted(list(set(stdin)), key=lambda x: len(x))[-1])\n"
    },
    {
        "number": 4263,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Return the longest ACGT string that is a substring of stdin\n    \"\"\"\n    char_list = list(stdin)\n    longest_string = \"\"\n    for i in range(len(char_list)):\n        for j in range(i + 1, len(char_list)):\n            if (char_list[i] + char_list[j]) == \"ACGT\":\n                longest_string = (char_list[i] + char_list[j])\n                break\n    return longest_string\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4263,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time complexity: O(N^2)\n    Space complexity: O(N)\n    \"\"\"\n    S = stdin.strip()\n    max_len = 0\n    for i in range(len(S)):\n        for j in range(len(S)):\n            substr = S[i:j + 1]\n            if 'A' in substr and 'C' in substr and 'G' in substr and 'T' in substr:\n                max_len = max(max_len, len(substr))\n    return max_len\n"
    },
    {
        "number": 4263,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Return the length of the longest ACGT string that is a substring of S.\n\n    >>> solution('ATCODER')\n    3\n    >>> solution('ATTTTTTTTTTTT')\n    5\n    >>> solution('ACAAACCCCCCAAAAA')\n    5\n    >>> solution('CCCCCCCCCCCAAAAA')\n    7\n    >>> solution('CAAACCCCCCAAAAA')\n    5\n    >>> solution('TAAACCCCCCAAAAA')\n    4\n    >>> solution('TTAAACCCCCCAAAAA')\n    4\n    >>> solution('TTTTTTTTTTTTTT')\n    5\n    >>> solution('TTTTTTTTTTTTTT')\n    4\n    >>> solution('T')\n    2\n    >>> solution('')\n    0\n    \"\"\"\n    max_length = 0\n    current_length = 0\n    last_letter = ''\n    for letter in stdin:\n        if letter == last_letter:\n            current_length += 1\n        else:\n            max_length = max(max_length, current_length)\n            current_length = 1\n        last_letter = letter\n    max_length = max(max_length, current_length)\n    return max_length\n"
    },
    {
        "number": 4263,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds the longest ACGT string that is a substring of stdin.\n    :param stdin: a string consisting only of uppercase English letters.\n    :return: a string consisting of no characters other than A, C, G and T.\n    \"\"\"\n    longest_string = ''\n    for i in range(len(stdin) - 1):\n        first = stdin[i]\n        for j in range(i + 1, len(stdin)):\n            second = stdin[j]\n            if first + second == 'ACGT' and len(second) > len(longest_string):\n                longest_string = second\n    return longest_string\n"
    },
    {
        "number": 4263,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    from collections import defaultdict\n    output = 0\n    max_len = 0\n    a = defaultdict(int)\n    for char in stdin:\n        if char.islower():\n            output += 1\n        else:\n            output -= 1\n        a[char] += 1\n        if output <= 0:\n            max_len = max(max_len, len(stdin) - output)\n    return str(max_len)\n"
    },
    {
        "number": 4263,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin.strip()\n    while len(string) >= 1:\n        for i in range(len(string)):\n            if string[i] not in \"AGTC\":\n                string = string[:i]\n                break\n        else:\n            print(len(string))\n            break\n    else:\n        print(0)"
    },
    {
        "number": 4263,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    You are given a string S consisting of uppercase English letters. Find the length of the longest ACGT string that is a substring (see Notes) of S.\n    Here, a ACGT string is a string that contains no characters other than A, C, G and T.\n    \n    -----Notes-----\n    A substring of a string T is a string obtained by removing zero or more characters from the beginning and the end of T.\n    For example, the substrings of ATCODER include TCO, AT, CODER, ATCODER and  (the empty string), but not AC.\n\n    -----Constraints-----\n    S is a string of length between 1 and 10 (inclusive).\n    Each character in S is an uppercase English letter.\n    \"\"\"\n    result = \"\"\n    for i in range(len(stdin)):\n        for j in range(i,len(stdin)):\n            if stdin[i:j+1] == stdin[i:j+1][::-1]:\n                if len(result) < len(stdin[i:j+1]):\n                    result = stdin[i:j+1]\n    print(result)\n\nsolution(input())\n"
    },
    {
        "number": 4264,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    count = 0\n    for i in range(1, t + 1):\n        c = len(str(i))\n        if c % 2!= 0:\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 4264,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    N = int(stdin[0])\n    count = 0\n    for i in range(1, N + 1):\n        if len(str(i)) % 2!= 0:\n            count += 1\n    return count\nprint(solution(input()))"
    },
    {
        "number": 4264,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = int(stdin)\n    odd = 0\n    while (odd < 10):\n        odd += 1\n        if (odd % 2 == 1):\n            break\n    print(len(str(odd)))\n\nsolution(stdin)\n"
    },
    {
        "number": 4264,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the answer to the problem.\"\"\"\n    n = int(stdin)\n    return str(len([i for i in range(n + 1) if len(str(i)) % 2 == 1]))\n"
    },
    {
        "number": 4264,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    odd_count = 0\n    for i in range(1, N + 1):\n        if len(str(i)) % 2 == 1:\n            odd_count += 1\n    return str(odd_count)\n\nsolution(input())\n"
    },
    {
        "number": 4264,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Determine if number has odd number of digits\n    is_odd = len(stdin) > 0 and stdin[0]!= '0'\n    # Create the return value\n    return_string = ''\n    # Loop through each digit, if odd, add it to the return string\n    for digit in stdin:\n        if not is_odd:\n            break\n        if digit!= '0':\n            return_string += digit\n        is_odd = not is_odd\n    return return_string\n\ndef"
    },
    {
        "number": 4264,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    integer = int(stdin)\n    return f'{sum(True if len(str(i)) % 2 else False for i in range(1, integer+1))}'\n\n\ndef"
    },
    {
        "number": 4264,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    odd = 0\n    while N > 0:\n        if len(str(N)) % 2!= 0:\n            odd += 1\n        N -= 1\n    return str(odd)"
    },
    {
        "number": 4264,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Given an integer N, prints the number of positive integers less than or equal to N that have an odd number of digits.\n    '''\n\n    def has_odd(x):\n        if len(str(x)) % 2 == 1:\n            return True\n        return False\n\n    count = 0\n    for i in range(1,int(stdin)):\n        if has_odd(i):\n            count += 1\n    print(count)"
    },
    {
        "number": 4264,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4265,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4265,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    result = \"\"\n    i = 0\n    while (i < len(stdin)):\n        if (stdin[i] == \"c\"):\n            result = result + \"h\"\n        elif (stdin[i] == \"f\"):\n            result = result + \"t\"\n        elif (stdin[i] == \"e\"):\n            result = result + \"a\"\n        else:\n            result = result + stdin[i]\n        i = i + 1\n    return result\n"
    },
    {
        "number": 4265,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4265,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    s = list(s)\n    s.pop(6)\n    s.pop(6)\n    s.pop(6)\n    s.pop(6)\n    s.pop(6)\n    s.pop(6)\n    s.pop(6)\n    s = \"\".join(s)\n    return s\n\ndef"
    },
    {
        "number": 4265,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4265,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Check that stdin contains the required format\n    if len(stdin)!= 2:\n        raise ValueError('Received incorrect input.')\n    \n    # Read strings\n    s = stdin[0]\n    t = stdin[1]\n    \n    # Check that the input is valid\n    if s == t:\n        raise ValueError('Strings are the same.')\n    \n    # Find the length difference between the strings\n    diff = abs(len(s) - len(t))\n    \n    # Create a dictionary to record the minimum number of operations required to achieve s to t\n    ans = {}\n    \n    # Iterate over the string difference\n    for i in range(diff):\n        # For every letter\n        for letter in s[i]:\n            # If it doesn't already exist in the dictionary\n            if letter not in ans:\n                # Add the letter to the dictionary with the value 0\n                ans[letter] = 0\n            # Increment the value of the letter in the dictionary by 1\n            ans[letter] += 1\n    \n    # Get the key with the least value\n    min_key = min(ans, key=ans.get)\n    \n    # Return the minimum value of the dictionary\n    return ans[min_key]\n\n\ns = input()\nt = input()\nprint(solution(s,t))"
    },
    {
        "number": 4265,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace('cupofcoffee', 'cupofhottea')\n\n\ndef"
    },
    {
        "number": 4265,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4265,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    \n    \n"
    },
    {
        "number": 4265,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.count('c') * 6 + stdin.count('f') * 4 + stdin.count('t') * 8 + stdin.count('e') * 2\n"
    },
    {
        "number": 4266,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin_list = stdin.split(\" \")\n    k = int(stdin_list[0])\n    x = int(stdin_list[1])\n    d = {}\n    for i in range(k):\n        d[i] = \"True\"\n    lst = []\n    for i in range(k):\n        if d[i] == \"True\":\n            if x == i:\n                lst.append(i)\n            else:\n                lst = lst + find_neighbours(x, i, d)\n    lst.sort()\n    for item in lst:\n        print(item, end=\" \")\n    return \"\"\n\ndef"
    },
    {
        "number": 4266,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('''3 7\n    ''')\n    '5 6 7 8 9'\n    '''\n    stones_placed, stone_to_find = map(int, stdin.split())\n    count_black = 0\n    result = \"\"\n    count_result = 0\n    while count_black < stones_placed:\n        count_black += 1\n        if count_black == stone_to_find:\n            result += str(count_black) + \" \"\n            count_black += 1\n            count_result += 1\n            if count_result == stones_placed:\n                return result\n        else:\n            count_black += 1\n    return result\n    '''\n    stones_placed, stone_to_find = map(int, stdin.split())\n    count_black = 0\n    count_result = 0\n    for index in range(0, stones_placed, 1):\n        if index == stone_to_find:\n            count_black += 1\n            count_result += 1\n            if count_result == stones_placed:\n                return str(index) + \" \" + str(count_black + 1)\n        else:\n            count_black += 1\n    return \"\"\n"
    },
    {
        "number": 4266,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    K, X = map(int, stdin.split())\n    ans = []\n    for i in range(K + 1):\n        for j in range(X - i):\n            ans.append(str(j + 1) + \" \" + str(j + i + 1))\n    return \" \".join(sorted(ans))"
    },
    {
        "number": 4266,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    K, X = map(int, stdin.split())\n\n    if K == 1 and X == 1:\n        print(\"5 6 7 8 9\")\n    elif K == 1:\n        for i in range(X - 1):\n            print(i + 1, i + 2, i + 3)\n    elif K == 1 and X == 0:\n        for i in range(X + 1):\n            print(i + 1, i + 2, i + 3)\n    elif K == 2:\n        for i in range(X - 1, X + 3):\n            print(i)\n    else:\n        print(\"Unknown K {} and X {}\".format(K, X))\n    return \"\"\n"
    },
    {
        "number": 4266,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4266,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    _, k, x = stdin.split()\n    k = int(k)\n    x = int(x)\n\n    arr = []\n    for _ in range(k + 1):\n        arr.append(_)\n\n    arr[0] = -1000000\n    arr[-1] = 1000000\n\n    black_count = 0\n    i = 1\n    while i < len(arr) - 1:\n        if arr[i] == x and black_count == 0:\n            arr[i] = 0\n            black_count += 1\n        elif arr[i] == x and black_count!= 0:\n            arr[i] = arr[i - 1] + 1\n        i += 1\n\n    for i in range(1, len(arr)):\n        print(arr[i])\n\n    return\n\n\nsolution(input())\n"
    },
    {
        "number": 4266,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    K, X = int(stdin.split(' ')[0]), int(stdin.split(' ')[1])\n    return str(get_potential_coordinates(K, X))\n\ndef"
    },
    {
        "number": 4266,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    K, X = stdin.split()\n    K = int(K)\n    X = int(X)\n    K = K-1\n    L = list(range(-1000000, 1000000))\n    L.pop(X)\n    L = L[::-1]\n    ans = []\n    for i in range(len(L)):\n        if L[i]%2 == 1:\n            ans.append(str(L[i]))\n    ans = \" \".join(ans)\n    return ans"
    },
    {
        "number": 4266,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin.split()[1])\n    X = int(stdin.split()[2])\n    if K == 0:\n        return '0'\n    if K == 1:\n        if X == -1000000:\n            return '0'\n        else:\n            return str(X)\n    count = 1\n    start = 0\n    end = 1000000\n    middle = end - start\n    while start <= end:\n        if count == K:\n            return str(start) + \" \" + str(end)\n        if middle == start:\n            if X == start:\n                return str(start) + \" \" + str(end)\n            else:\n                return str(start) + \" \" + str(end)\n        middle = (start + end) // 2\n        if middle - start == 1:\n            if X == middle:\n                return str(start) + \" \" + str(middle)\n            else:\n                return str(start) + \" \" + str(middle)\n        if X <= middle:\n            end = middle\n        else:\n            start = middle\n        count += 1\n    return '0'\n"
    },
    {
        "number": 4266,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    k, x = map(int, stdin.split())\n    # The coordinates of black stones\n    black_stones = set()\n    # The coordinates of white stones\n    white_stones = set()\n    # The coordinates of black stones\n    # which are not adjacent to any white stone\n    black_not_adjacent_to_white = set()\n    for i in range(k):\n        if i == 0:\n            black_stones.add(int(input()))\n        elif i == 1:\n            black_stones.add(int(input()))\n            black_stones.add(int(input()))\n        elif i == 2:\n            black_stones.add(int(input()))\n            black_stones.add(int(input()))\n            black_stones.add(int(input()))\n        elif i == 3:\n            black_stones.add(int(input()))\n            black_stones.add(int(input()))\n            black_stones.add(int(input()))\n            black_stones.add(int(input()))\n        elif i == 4:\n            black_stones.add(int(input()))\n            black_stones.add(int(input()))\n            black_stones.add(int(input()))\n            black_stones.add(int(input()))\n            black_stones.add(int(input()))\n            black_stones.add(int(input()))\n        elif i == 5:\n            black_stones.add(int(input()))\n            black_stones.add(int(input()))\n            black_stones.add(int(input()))\n            black_stones.add(int(input()))\n            black_stones.add(int(input()))\n            black_stones.add(int(input()))\n        elif i == 6:\n            black_stones.add(int(input()))\n            black_stones.add(int(input()))\n            black_stones.add(int(input()))\n            black_stones.add(int(input()))\n            black_stones.add(int(input()))\n            black_stones.add(int(input()))\n        elif i == 7:\n            black_stones.add(int(input()))\n            black_stones.add(int(input()))\n            black_stones.add(int(input()))\n            black_stones.add(int(input()))\n            black_stones.add(int(input()))\n            black_stones.add(int(input()))\n        elif i == 8:\n            black_stones.add(int(input()))\n            black_stones.add(int(input()))\n            black_stones.add(int(input()))\n            black_stones.add(int(input()))\n            black_stones.add(int(input()))\n            black_stones.add(int(input()))\n        elif i == 9:\n            black_stones.add(int(input()))\n            black_stones.add(int(input()))\n            black_stones.add(int(input()))\n            black_stones.add(int(input()))\n            black_stones.add(int(input()))\n            black_stones.add(int(input()))\n        else:\n            black_stones.add(int(input()))\n            black_stones.add(int(input()))\n            black_stones.add(int(input()))\n            black_stones.add(int(input()))\n            black_stones.add(int(input()))\n            black_stones.add(int(input()))\n            black_stones.add(int(input()))\n            black_stones.add(int(input()))\n            black_stones.add(int(input()))\n            black_stones.add(int(input()))\n            black_stones.add(int(input()))\n            black_stones.add(int(input()))\n            black_stones.add(int(input()))\n            black_stones.add(int(input()))\n            black_stones.add(int(input()))\n            black_stones.add(int(input()))\n            black_stones.add(int(input()))\n            black_stones.add(int(input()))\n            black_stones.add(int(input()))\n            black_stones.add(int(input()))\n            black_stones.add(int(input()))\n            black_stones.add(int(input()))\n            black_stones.add(int(input()))\n            black_stones.add(int(input()))\n            black_stones.add(int(input()))\n            black_stones.add(int(input()))\n            black_stones.add(int(input()))\n            black_stones.add(int(input()))\n            black_stones.add(int(input()))\n            black_stones.add(int(input()))\n            black_stones.add(int(input()))\n            black_stones.add(int(input()))\n            black_stones.add(int(input()))\n            black_stones.add(int(input()))\n            black_stones.add(int(input()))\n            black_stones.add(int(input()))\n            black_stones.add(int(input()))\n            black_stones.add(int(input()))\n            black_stones.add(int(input()))\n            black_stones.add(int(input()))\n            black_stones.add(int(input()))\n            black_stones.add(int(input()))\n            black_stones.add(int(input()))\n            black_stones.add(int(input()))\n            black_stones.add(int(input()))\n            black_stones.add(int(input()))\n            black_stones.add(int(input()))\n            black_stones.add(int(input()))\n            black_stones.add(int(input()))\n            black_stones.add(int(input()))\n            black_stones.add(int(input()))\n            black_stones.add(int(input()))\n            black_stones.add(int(input()))\n            black_stones.add(int(input()))\n            black_stones.add(int(input()))\n            black_stones.add(int(input()))\n            black_stones.add(int(input()))\n            black_stones.add(int(input()))\n            black_stones.add(int(input()))\n            black_stones.add(int(input()))\n            black_stones.add(int(input()))\n            black_stones.add(int(input()))\n            black_stones.add(int(input()))\n            black_stones.add(int(input()))\n            black_stones.add(int(input()))\n            black_stones.add(int(input()))\n            black_stones.add(int(input()))\n            black_stones.add(int(input()))\n            black_stones.add(int(input()))\n            black_stones.add(int(input()))\n            black_stones.add(int(input()))\n            black_stones.add(int(input()))\n            black_stones.add(int(input()))\n            black_stones.add(int(input()))\n            black_"
    },
    {
        "number": 4267,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    stdin example:\n    X\n    X\n    \"\"\"\n    (x, ) = stdin.split(\"\\n\")\n    x = int(x)\n    if x >= 30:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4267,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    temp, turn_on = stdin.split()\n    if int(temp) >= 30:\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 4267,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    # return X if you will turn on the air conditioner, else return No\n\n    temp = int(stdin)\n    if temp >= 30:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4267,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return solution to puzzle given stdin.\"\"\"\n    for stdin_line in stdin.splitlines():\n        if _input_parse(stdin_line).strip() == \"Yes\":\n            return \"Yes\"\n    return \"No\"\n\n\ndef"
    },
    {
        "number": 4267,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    if X >= 30:\n        return \"Yes\"\n    else:\n        return \"No\"\n    \nprint(solution(input()))"
    },
    {
        "number": 4267,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    if x <= 30:\n        return 'No'\n    else:\n        return 'Yes'\n"
    },
    {
        "number": 4267,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    temp = int(stdin)\n    if temp >= 30:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4267,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x: int = int(stdin)\n    if x >= 30:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4267,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Replace this for solution\n    x = int(stdin)\n    if x > 30:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4267,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    if x >= 30:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4268,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.strip().split()\n    N = int(input_list[0])\n    D = int(input_list[1])\n\n    points = []\n    for i in range(D):\n        point = list(map(int, input().strip().split()))\n        points.append(point)\n\n    pairs = 0\n\n    for i in range(len(points)):\n        for j in range(i + 1, len(points)):\n            distance = int(((points[i][0] - points[j][0]) ** 2 +\n                            (points[i][1] - points[j][1]) ** 2 +\n                            (points[i][2] - points[j][2]) ** 2) ** 0.5)\n            if distance % 1 == 0:\n                pairs += 1\n\n    return str(pairs)\n"
    },
    {
        "number": 4268,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, D = map(int, stdin.split())\n    points = [list(map(int, stdin.split())) for _ in range(N)]\n    result = 0\n\n    for i in range(N - 1):\n        for j in range(i + 1, N):\n            distance = 0\n            for k in range(D):\n                distance += abs(points[i][k] - points[j][k])\n            distance = int(math.sqrt(distance))\n            if distance <= 10 ** 3:\n                result += 1\n\n    return str(result)\n\n\nprint(solution(\"3 2\\n1 2\\n5 5\\n-2 8\"))\nprint(solution(\"6 3\\n1 2 3 4 5 6\\n-2 -3 -4 5 -6\\n-4 -3 -2 -1 0 1\\n2 3 4 5 6 7\\n-4 -3 -2 -1 0 1\\n2 3 4 5 6 7\\n-1 0 1 2 3\\n-3 -4 5 -6 7\\n-2 -3 -4 5 -6\\n-3 -2 -1 0 1\\n2 3 4 5 6 7\"))\n"
    },
    {
        "number": 4268,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, d = map(int, stdin.strip().split())\n    data = stdin.strip().split()\n    data = [[int(x) for x in line] for line in data]\n    counter = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if is_integer_distance(data[i], data[j]):\n                counter += 1\n    return str(counter)\n\ndef"
    },
    {
        "number": 4268,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, d = map(int, stdin.split())\n    points = [[int(x) for x in input().split()] for _ in range(n)]\n    ans = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            distance = 0\n            for k in range(d):\n                distance += (points[i][k] - points[j][k]) ** 2\n            if distance % 2 == 0:\n                ans += 1\n    print(ans)\n    return str(ans)"
    },
    {
        "number": 4268,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, d = list(map(int, stdin.split()))\n    x_coordinates = list(map(int, stdin.split()))\n    pairs_count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            x_i, y_i, z_i = x_coordinates[i], x_coordinates[j], x_coordinates[i]\n            for x in range(d):\n                x_j = x_i - x_coordinates[x]\n                if x_j == 0:\n                    continue\n                y_j = y_i - x_coordinates[x]\n                z_j = z_i - x_coordinates[x]\n                distance = ((x_j) ** 2 + (y_j) ** 2 + (z_j) ** 2) ** 0.5\n                if distance % 1 == 0:\n                    pairs_count += 1\n    return str(pairs_count)"
    },
    {
        "number": 4268,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, d = map(int, stdin.split())\n    coords = []\n    for i in range(n):\n        coords.append(list(map(int, stdin.split())))\n    distances = []\n    for i in range(n):\n        distances.append(min(abs(coords[i][j] - coords[j][i]) for j in range(d)))\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if distances[i] == distances[j]:\n                count += 1\n    return str(count)\n\n'''\n"
    },
    {
        "number": 4268,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split()\n    n = int(lines[0])\n    d = int(lines[1])\n    points = [[int(x) for x in input().split()] for i in range(n)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if abs(points[i][d] - points[j][d]) % 2 == 0:\n                count += 1\n    print(count)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4268,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, d = list(map(int, stdin.split()))\n    x = list(map(int, stdin.split()))\n    dist = dict()\n    for i in range(n):\n        for j in range(n):\n            if i!= j:\n                dist[(i, j)] = int(round(\n                    (sum([abs(x[i] - x[j]) for j in range(d)]) ** 0.5)))\n    return str(len([i for i in range(n) if dist[(i, i)] % 1 == 0]))\n"
    },
    {
        "number": 4268,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, d = map(int, stdin.split())\n    x = []\n    for i in range(n):\n        x.append(list(map(int, stdin.split())))\n    res = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if (x[i][0] - x[j][0]) ** 2 + (x[i][1] - x[j][1]) ** 2 == (x[i][2] - x[j][2]) ** 2:\n                res += 1\n    return res\n"
    },
    {
        "number": 4268,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def _get_int(num: str) -> int:\n        return int(num)\n\n    def _get_list(num: str) -> list:\n        return map(_get_int, num.split())\n\n    n, d = _get_list(stdin)\n    ans = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (i + 1, j + 1) in ((i, j + 1), (j + 1, i + 1)):\n                continue\n            if ((_get_int(f\"{i + 1} {j + 1}\") - _get_int(f\"{j + 1} {i + 1}\")).is_integer()\n                    and ((_get_int(f\"{i + 1} {j + 1}\") - _get_int(f\"{i + 1} {j + 1}\")).is_integer())):\n                ans += 1\n    return str(ans)\n"
    },
    {
        "number": 4269,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    hard_to_enter = True\n    for i in range(len(stdin) - 2):\n        if stdin[i] == stdin[i + 1] == stdin[i + 2]:\n            hard_to_enter = False\n            break\n    if hard_to_enter:\n        return 'Good'\n    else:\n        return 'Bad'"
    },
    {
        "number": 4269,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.split()\n    if not len(data) == 1:\n        print('Bad')\n    else:\n        print('Good')\n"
    },
    {
        "number": 4269,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin\n    if len(n) > 4 or len(n) < 4:\n        return 'Bad'\n    else:\n        n = int(n)\n        print('Bad' if n % 2 == 0 and n % 3 == 0 else 'Good')\n        return 'Good'\n\nsolution()\n\"\"\""
    },
    {
        "number": 4269,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    if(len(s) == 4):\n        s = s.replace(\".\",\"\")\n        if(len(s)==2):\n            if(s[0] == s[1]):\n                return \"Bad\"\n            else:\n                return \"Good\"\n    return \"Bad\""
    },
    {
        "number": 4269,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin\n    if int(n[0]) == int(n[1]) and int(n[2]) == int(n[3]):\n        return \"Bad\"\n    else:\n        return \"Good\"\nsolution(stdin)\n"
    },
    {
        "number": 4269,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    if stdin.isnumeric():\n        if len(stdin) < 4:\n            return 'Bad'\n        else:\n            return 'Good'\n    else:\n        return 'Bad'\n"
    },
    {
        "number": 4269,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    for i in range(len(s)):\n        if i < len(s) - 1 and s[i] == s[i + 1]:\n            return \"Bad\"\n        if i > 0 and s[i] == s[i - 1]:\n            return \"Bad\"\n    return \"Good\"\n"
    },
    {
        "number": 4269,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    return \"Good\" if 2 not in {s[i], s[i + 1] for i in range(len(s) - 1)} else \"Bad\"\n"
    },
    {
        "number": 4269,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    i = 0\n    while i < len(s):\n        if i < len(s) - 2:\n            if s[i] == s[i + 1] and s[i] == s[i + 2]:\n                return 'Bad'\n        i += 1\n    return 'Good'\n"
    },
    {
        "number": 4269,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin\n    if len(S) == 4:\n        if S[0] == S[1] and S[1] == S[2] and S[2] == S[3]:\n            print('Bad')\n        else:\n            print('Good')\n    else:\n        print('Bad')\n\nsolution(input())\n"
    },
    {
        "number": 4270,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    numbers = stdin.split()\n\n    # initialize the ingredients list\n    ingredients = [int(number) for number in numbers]\n\n    # initialize the count of ingredients\n    count = len(ingredients)\n\n    while count > 1:\n        # initialize the value of ingredients\n        values = [ingredients[0]]\n        # find the value of the ingredients\n        for i in range(1, count):\n            # divide the ingredients by 2\n            values.append(ingredients[i] + ingredients[i - 1])\n        # update the count\n        count -= 1\n        # update the ingredients\n        for i in range(count):\n            ingredients[i] = int((values[i] + values[i + 1]) / 2)\n\n    # initialize the value of the last ingredient\n    ingredients.append(values[count - 1])\n    # return the maximum value\n    return '%d' % ingredients[-1]\n"
    },
    {
        "number": 4270,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input_lines = stdin.splitlines()\n    if len(input_lines)!= 2:\n        raise Exception(\"Wrong number of input lines.\")\n    if any([not line.isdigit() for line in input_lines]):\n        raise Exception(\"Input lines must be all integers.\")\n    if any([int(line) < 0 for line in input_lines]):\n        raise Exception(\"All inputs must be positive integers.\")\n    N, *values = input_lines\n    N = int(N)\n    if N < 2:\n        raise Exception(\"At least 2 ingredients are needed.\")\n    if any([int(value) < 0 for value in values]):\n        raise Exception(\"All values must be positive integers.\")\n    return '{:.10f}'.format(max(values))\n"
    },
    {
        "number": 4270,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    values = list(map(int, stdin.split()))\n    if N == 1:\n        return str(values[0])\n    values = sorted(values, key=lambda x: x, reverse=True)\n    half = len(values) // 2\n    if len(values) % 2 == 0:\n        return str(sum(values[:half]) / 2)\n    else:\n        return str(sum(values[:half]) / 2 + values[-1])\n"
    },
    {
        "number": 4270,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n    4\n    ''')\n    '3.5'\n    >>> solution('''5\n    10\n    ''')\n    '7.5'\n    \"\"\"\n    return stdin.strip()\n"
    },
    {
        "number": 4270,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    N = int(lines[0])\n    ingredients = list(map(lambda x: int(x), lines[1].split()))\n    pot = [0] * N\n    ingredients.sort(reverse=True)\n    for i in range(N):\n        pot[i] = ingredients[i]\n        ingredients.pop(i)\n        while ingredients:\n            pot[i] += ingredients.pop()\n    return str(pot.pop())"
    },
    {
        "number": 4270,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def calc_max(values: list, sum_num: int) -> int:\n        \"\"\"\n        :param values: list of numbers\n        :param sum_num: number to sum up\n        :return: maximum value of the sum\n        \"\"\"\n        # if there are only 2 values in the list, sum up the values and return\n        if len(values) == 2:\n            return int(values[0] + values[1])\n        # if there are more than 2 values, calculate sum of all other values\n        # and recurse.\n        return max(\n            [\n                int(calc_max(values[1:], sum_num - values[0])),\n                int(calc_max(values[1:], sum_num + values[0])),\n            ]\n        )\n\n    values = list(map(int, stdin.split(\" \")))\n    return str(calc_max(values, 0))\n"
    },
    {
        "number": 4270,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    values = list(map(int, stdin.split()))\n    max = 0\n    for i in range(n):\n        for j in range(i, n):\n            values[i] += values[j]\n            if values[i] > max:\n                max = values[i]\n    print(max)\n    return max\n"
    },
    {
        "number": 4270,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    N = int(stdin.strip())\n    n_string = stdin.split()\n    v = list(map(int, n_string))\n    if N == 1:\n        return str(v[0])\n    max_values = max(v[:-1])\n    i = 0\n    while i < len(v)-1:\n        if v[i+1]!= max_values:\n            v.append(max_values)\n            v.append(v[i+1])\n            break\n        else:\n            i += 2\n    print(str(int((sum(v[i:]) + v[0] * 2) / 2)))\n    return str(int((sum(v[i:]) + v[0] * 2) / 2))\n\nsolution(\"2 3 4\")\nsolution(\"3 4\")\n"
    },
    {
        "number": 4270,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    values = list(map(int, stdin.strip().split()))\n    values.sort()\n    pot = [values[0]]\n    max_value = float(values[0])\n    for i in range(1, n):\n        if pot[-1] == values[i]:\n            continue\n        elif pot[-1] == values[i]/2:\n            pot.pop()\n            pot.append(values[i])\n            continue\n        pot.append(values[i])\n        max_value = max(max_value, pot[-1])\n    return str(max_value)"
    },
    {
        "number": 4270,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N: int = int(stdin)\n    # N = int(stdin)\n    # assert 2 <= N <= 50\n    # assert 1 <= v_i <= 1000\n\n    # v_i = float(stdin)\n    # assert 2 <= v_i <= 1000\n\n    v_i = [float(stdin) for _ in range(N)]\n    print(v_i)\n\n    # v_i = float(stdin)\n    # assert 2 <= v_i <= 1000\n\n    v_i = sorted(v_i, key=lambda x: x / 2, reverse=True)\n\n    # v_i = sorted(v_i, key=lambda x: x / 2, reverse=True)\n    # print(v_i)\n\n    print(v_i[-1])\n    return str(v_i[-1])"
    },
    {
        "number": 4271,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    A = list(map(int, stdin.strip().split(\" \")))\n    B = list(map(int, stdin.strip().split(\" \")))\n    C = list(map(int, stdin.strip().split(\" \")))\n\n    for i in range(N - 1):\n        A[i + 1] += A[i]\n        B[i + 1] += A[i] + C[i]\n        C[i + 1] += A[i] + B[i]\n\n    return sum(A + B + C)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4271,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin.split()[0])\n    n_dishes: List[int] = stdin.split()[1:]\n    points: int = 0\n    for i in range(n):\n        points += int(n_dishes[i]) * (i + 1)\n    return str(points)"
    },
    {
        "number": 4271,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    b = list(map(int, stdin.strip().split()))\n    c = list(map(int, stdin.strip().split()))\n    s = 0\n    for i in range(n):\n        s += a[i] * b[i]\n        s += c[i]\n    return str(s)\n"
    },
    {
        "number": 4271,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def solve(n: int) -> int:\n        satisfaction_points = 0\n        for dish in range(1, n + 1):\n            dish_number = dish\n            dish_satisfaction_points = dish_satisfaction_points + (\n                stdin.strip().split(\" \")[dish_number]\n            )\n        return dish_satisfaction_points\n\n    return str(solve(int(stdin)))\n"
    },
    {
        "number": 4271,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n\n    dishes = []\n    for _ in range(n):\n        dishes.append(int(stdin.splitlines()[1+2*_]))\n\n    satisfaction = 0\n    for i in range(n):\n        if i == 0:\n            satisfaction += int(stdin.splitlines()[2+2*i])\n        else:\n            satisfaction += int(stdin.splitlines()[2+2*i]) + int(stdin.splitlines()[2+2*i-1])\n    return str(satisfaction)"
    },
    {
        "number": 4271,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split(\"\\n\")\n    dishes = inputs[0].split(\" \")\n    total = 0\n    for i in range(1, len(inputs), 2):\n        total += get_sum(dishes, inputs[i])\n    return str(total)\n\ndef"
    },
    {
        "number": 4271,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    As = stdin.split()[1:]\n\n    SatisfactionPoints = 0\n\n    for i in range(N):\n        SatisfactionPoints += int(As[i]) * (N - i) + int(As[i + 1])\n    return str(SatisfactionPoints)\n\nTakahashi went to an all-you-can-eat buffet with N kinds of dishes and ate all of them (Dish 1, Dish 2, \\ldots, Dish N) once.\nThe i-th dish (1 \\leq i \\leq N) he ate was Dish A_i.\nWhen he eats Dish i (1 \\leq i \\leq N), he gains B_i satisfaction points.\nAdditionally, when he eats Dish i+1 just after eating Dish i (1 \\leq i \\leq N - 1), he gains C_i more satisfaction points.\nFind the sum of the satisfaction points he gained.\n\n-----Constraints-----\n - All values in input are integers.\n - 2 \\leq N \\leq 20\n - 1 \\leq A_i \\leq N\n - A_1, A_2,..., A_N are all different.\n - 1 \\leq B_i \\leq 50\n - 1 \\leq C_i \\leq 50\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN\nA_1 A_2... A_N\nB_1 B_2... B_N\nC_1 C_2... C_{N-1}\n\n-----Output-----\nPrint the sum of the satisfaction points Takahashi gained, as an integer.\n\n-----Sample Input-----\n3\n3 1 2\n2 5 4\n3 6\n\n-----Sample Output-----\n14\n\nTakahashi gained 14 satisfaction points in total, as follows:\n - First, he ate Dish 3 and gained 4 satisfaction points.\n - Next, he ate Dish 1 and gained 2 satisfaction points.\n - Lastly, he ate Dish 2 and gained 5 + 3 = 8 satisfaction points.\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4271,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    _, A = stdin.split()\n    dishes = A.split()\n    # print(dishes)\n    a = int(A)\n    b = {}\n    c = {}\n    for i in range(len(dishes)):\n        b[i] = int(dishes[i])\n        c[i] = int(dishes[i])\n    print(sum(b.values()), sum(c.values()))\n    return sum(b.values()) + sum(c.values())\n\nsolution(input())\n"
    },
    {
        "number": 4271,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return str(sum(map(lambda x: int(x.split()[2]) * int(x.split()[3]), stdin.split('\\n'))))\n"
    },
    {
        "number": 4271,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, *Dish = list(map(int, stdin.split()))\n\n    #Solution 1\n    # add = 0\n    # for i in range(len(Dish)):\n    #     add += Dish[i]\n    #     Dish[i] = add\n\n    #Solution 2\n    # dish_sum = sum(Dish)\n    # Dish[0] = dish_sum\n    # for i in range(1, len(Dish)):\n    #     Dish[i] = dish_sum + Dish[i]\n\n    #Solution 3\n    dish_sum = sum(Dish)\n    for i in range(1, len(Dish)):\n        Dish[i] = dish_sum + dish_sum - Dish[i-1]\n\n    return str(Dish[len(Dish)-1])"
    },
    {
        "number": 4272,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n    ans = 0\n    for i in range(n):\n        if s[i] == s[i+1]:\n            ans += 1\n    print(ans)\n    return ans\n"
    },
    {
        "number": 4272,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    S = stdin.rstrip()\n    abc_count = 0\n    prev = 0\n    for i in range(0, N):\n        if S[i] == 'A' or S[i] == 'B' or S[i] == 'C':\n            abc_count += 1\n            if i == N - 1:\n                print(abc_count)\n        else:\n            abc_count = 0\n            prev = i + 1\n            continue\n    return abc_count\n"
    },
    {
        "number": 4272,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n\nstdin = input()\nsolution(stdin)"
    },
    {
        "number": 4272,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    count = 0\n    n = len(stdin)\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            if stdin[i] == stdin[j] and stdin[i+1] == stdin[j+1]:\n                count += 1\n    return count\n"
    },
    {
        "number": 4272,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[1:]\n    count = 0\n    s = s.upper()\n    s = sorted(s)\n    for i in range(0, n-1):\n        if s[i] == s[i+1]:\n            count += 1\n    print(count)\nsolution(input())\n"
    },
    {
        "number": 4272,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return str(sum([1 for i in range(len(stdin)) if stdin[i:i + 3] == stdin[i] * 3]))\n\n\ndef"
    },
    {
        "number": 4272,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nfrom itertools import chain\n\ndef"
    },
    {
        "number": 4272,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    count = 0\n    for i in range(n):\n        for j in range(i, n):\n            if s[i:j + 1] == 'ABC':\n                count += 1\n    return str(count)\n"
    },
    {
        "number": 4272,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    input_str = stdin.rstrip()\n    sub_str = input_str[0]\n    total_sub_str = 1\n\n    # build up the sub_str from the first character\n    for i in range(1, len(input_str)):\n        if input_str[i] == sub_str[0]:\n            sub_str = input_str[i]\n        else:\n            # if the first character doesn't equal the current character, update the sub_str\n            sub_str = input_str[i]\n            total_sub_str += 1\n\n    return total_sub_str\n"
    },
    {
        "number": 4272,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.replace(\"\\n\", \"\")\n    sub1 = ''\n    sub2 = ''\n    count = 0\n    for i in range(n - 1):\n        if s[i] == s[i + 1]:\n            sub1 += s[i]\n            sub2 = ''\n        else:\n            sub1 += s[i]\n            sub2 = s[i + 1]\n            if sub1 == sub2:\n                count += 1\n    print(count)"
    },
    {
        "number": 4273,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('5\\nMASHIKE\\nRUMOI\\nOBIRA\\nHABORO\\nHOROKANAI\\n')\n    '2'\n    >>> solution('9\\nMASHIKE\\nMASHIKE\\nRUMOI\\nRUMOI\\nHABORO\\nHABORO\\nOBIRA\\nOBIRA\\nHOROKANAI\\nHOROKANAI\\n')\n    '2'\n    >>> solution('3\\nMASHIKE\\nMASHIKE\\nMASHIKE\\n')\n    '1'\n    >>> solution('4\\nMASHIKE\\nMASHIKE\\nMASHIKE\\nMASHIKE\\n')\n    '1'\n    >>> solution('1\\nMASHIKE\\nMASHIKE\\nMASHIKE\\nMASHIKE\\n')\n    '1'\n    >>> solution('5\\nMASHIKE\\nMASHIKE\\nMASHIKE\\nMASHIKE\\n')\n    '0'\n    \"\"\"\n    N = int(stdin)\n    if N == 1:\n        return '1'\n    elif N == 2:\n        return '2'\n    else:\n        dp = [[0] * N for _ in range(N)]\n        dp[0][0] = 1\n        for i in range(N):\n            for j in range(N):\n                if i > 0 and dp[i - 1][j] > 0:\n                    dp[i][j] += dp[i - 1][j]\n                if j > 0 and dp[i][j - 1] > 0:\n                    dp[i][j] += dp[i][j - 1]\n        return str(dp[N - 1][N - 1])\n    return None\n"
    },
    {
        "number": 4273,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Get the count of each string.\n    stdin = stdin.split()\n    mashik_count = stdin.count('MASHIKE')\n    rumoi_count = stdin.count('RUMOI')\n    obirao_count = stdin.count('OBIRA')\n    haboro_count = stdin.count('HABORO')\n    horekanai_count = stdin.count('HOROKANAI')\n\n    # Check that all conditions are met.\n    if not ((mashik_count >= 2) and (rumoi_count >= 2) and (obirao_count >= 2)\n            and (haboro_count >= 2) and (horekanai_count >= 2)):\n        return ''\n    else:\n        # Check that there are no duplicates.\n        if (mashik_count > 0) and (haboro_count > 0) and (horekanai_count > 0):\n            return '{}'.format(int(min(mashik_count, rumoi_count, obirao_count, haboro_count, horekanai_count)))\n        elif (mashik_count > 0) and (rumoi_count > 0) and (horekanai_count > 0):\n            return '{}'.format(int(min(mashik_count, rumoi_count, horekanai_count)))\n        elif (rumoi_count > 0) and (haboro_count > 0) and (horekanai_count > 0):\n            return '{}'.format(int(min(rumoi_count, haboro_count, horekanai_count)))\n        elif (rumoi_count > 0) and (haboro_count > 0):\n            return '{}'.format(int(min(rumoi_count, haboro_count)))\n        elif (horekanai_count > 0) and (haboro_count > 0):\n            return '{}'.format(int(min(horekanai_count, haboro_count)))\n        elif (horekanai_count > 0) and (obirao_count > 0):\n            return '{}'.format(int(min(horekanai_count, obirao_count)))\n        elif (obirao_count > 0) and (haboro_count > 0):\n            return '{}'.format(int(min(obirao_count, haboro_count)))\n        else:\n            return '{}'.format(int(horekanai_count))\n"
    },
    {
        "number": 4273,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    num_people, *people = stdin.split()\n    num_people = int(num_people)\n    people = sorted(people)\n    results = set()\n\n    for first in people:\n        for second in people:\n            for third in people:\n                if first!= second and first!= third and second!= third:\n                    if len(first) == len(third) == len(second) and first[0]!= third[0] and first[0]!= second[0]:\n                        results.add(first + third + second)\n    return len(results)"
    },
    {
        "number": 4273,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    candidates = set()\n    S_1 = stdin.split('\\n')[1]\n    candidates.update(S_1)\n    for i in range(2, N + 1):\n        S_i = stdin.split('\\n')[i]\n        candidates.update(sorted(list(filter(lambda x: x[0] == S_i[0].upper(), candidates))))\n    return str(len(candidates))\n"
    },
    {
        "number": 4273,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    ans = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if(re.match(r'^[A-H][M-R][O-H][A-Z][A-Z][A-Z]$', stdin[i]) and \\\n                    re.match(r'^[A-H][M-R][O-H][A-Z][A-Z][A-Z]$', stdin[j]) and \\\n                    re.match(r'^[A-H][M-R][O-H][A-Z][A-Z][A-Z]$', stdin[k])):\n                    ans += 1\n    return str(ans)"
    },
    {
        "number": 4273,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time complexity: O(N x (N^3))\n    Space complexity: O(N)\n    \"\"\"\n    n = int(stdin)\n    alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    names = stdin.split()\n    cnt = 0\n    for i in range(len(names)):\n        if names[i][0] in alphabet:\n            for j in range(1, len(names[i])):\n                if names[i][j] in alphabet:\n                    for k in range(j + 1, len(names[i])):\n                        if names[i][k] in alphabet:\n                            cnt += 1\n    return str(cnt)\n\ndef"
    },
    {
        "number": 4273,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(set(stdin.split())))\nsolution(input())"
    },
    {
        "number": 4273,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return None\n"
    },
    {
        "number": 4273,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return len(set([''.join(sorted(list(stdin.split())))]))"
    },
    {
        "number": 4273,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.splitlines()\n    n = int(input_data[0])\n    strings = input_data[1:]\n\n    # \ub0b4 \ud480\uc774\n    # n = len(strings)\n    # ans = 0\n    # for i in range(1, n):\n    #     for j in range(i + 1, n):\n    #         for k in range(j + 1, n):\n    #             if strings[i].startswith('M') and strings[j].startswith('A') and strings[k].startswith('R'):\n    #                 if strings[i].count('M') == strings[j].count('A') == strings[k].count('R'):\n    #                     ans += 1\n\n    # \uc704\uc758 \ud480\uc774\ub294 \ub3d9\uc801\ud504\ub85c\uadf8\ub798\ubc0d\uc744 \uc774\uc6a9\ud574\uc11c \uac04\ub2e8\ud558\uac8c \ud480\uc774 \uac00\ub2a5\ud558\ub2e4.\n\n    # \ubc29\ubc95 1\n    # \ud070 \ubb38\uc81c\ub97c \uc791\uc740 \ubb38\uc81c\ub85c \ub098\ub208\ub2e4.\n    # \ud070 \ubb38\uc81c\uc758 \uc218\ub294 \uc791\uc740 \ubb38\uc81c\uc758 \uc218\uc758 3\uc2b9\n    # ex) N = 3\uc774\uba74, \uc791\uc740 \ubb38\uc81c\uc758 \uc218\uc758 3\uc2b9\uc740 N = 1\uc774\ub2e4.\n    # \ub530\ub77c\uc11c, \uc791\uc740 \ubb38\uc81c\uc758 \uc218\ub294 (N + 1) * (N + 1) * (N + 1)\n    # \uadf8\ub9ac\uace0, \ud070 \ubb38\uc81c\uc758 \uc218\ub294 (N + 1) * (N + 1) * (N + 1) + N * (N + 1) * (N + 1)\n    # \uc774 \ubc29\ubc95\uc740 \uc544\ub798\uc640 \uac19\uc740 \ubc29\uc2dd\uc744 \uc774\uc6a9\ud560 \uc218 \uc788\ub2e4.\n    # \ubc29\ubc95 2\n    # \uc218\uc2dd\uc774 \ub2e4\ub974\uae30 \ub54c\ubb38\uc5d0, \ud070 \ubb38\uc81c\uc758 \uc218\ub294 \uc791\uc740 \ubb38\uc81c\uc758 \uc218\ub294 N * (N + 1) * (N + 1)\n    # \uc774\ub7ec\ud55c \uc218\ub4e4\uc744 \uad6c\ud558\uba74, \uc815\ub2f5\uc774 \uc774\ub807\uac8c \ub41c\ub2e4.\n    # \uc989, \uc5ec\uae30\uc11c i = N, j = N-1, k = N-2, N = 3, \uc774\ub7f0 \uc2dd\uc744 \uc774\uc6a9\ud558\uc5ec \ud480\uc774\ub97c \ud560 \uc218 \uc788\ub2e4.\n    # \uc989, \ub2e4\uc74c\uacfc \uac19\uc740 \uacfc\uc815\uc744 \uc774\uc6a9\ud574 \uc791\uc740 \ubb38\uc81c\uc758 \uc218\ub97c \uad6c\ud560 \uc218 \uc788\uace0, \ud070 \ubb38\uc81c\uc758 \uc218\ub97c \uad6c\ud558\ub294 \uc54c\uace0\ub9ac\uc998\uc774\ub2e4.\n    # ex) N = 3\uc774\uba74, \uc791\uc740 \ubb38\uc81c\uc758 \uc218\ub294 N = 2\uc774\uace0, \ud070 \ubb38\uc81c\uc758 \uc218\ub294 N = 1\uc774 \ub41c\ub2e4.\n    # \uc774 \ubc29\ubc95\uc740 \ub2e4\uc74c\uacfc \uac19\uc774 \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4.\n    # i = N\n    # j = N-1\n    # k = N-2\n    # i = N, j = N-1, k = N-2, N = 3, \uc774\ub7f0 \uc2dd\uc744 \uc774\uc6a9\ud558\uc5ec \ud480\uc774\ub97c \ud560 \uc218 \uc788\ub2e4.\n    # \uc989, i = 3, j = 2, k = 1, N = 3, \uc774\ub7f0 \uc2dd\uc744 \uc774\uc6a9\ud558\uc5ec \ud480\uc774\ub97c \ud560 \uc218 \uc788\ub2e4.\n    # \uc774 \ubc29\ubc95\uc744 \uc0ac\uc6a9\ud558\uba74, \ub2e4\uc74c\uacfc \uac19\uc740 \uc138\uac00\uc9c0 \uacbd\uc6b0\ub97c \uc758\ubbf8\ud560 \uc218 \uc788\ub2e4.\n    # 1. \uc791\uc740 \ubb38\uc81c\uc758 \uc218\ub294 N = 1\uc774\ub2e4.\n    # 2. \ud070 \ubb38\uc81c\uc758 \uc218\ub294 N = 1\uc774\ub2e4.\n    # 3. \uc791\uc740 \ubb38\uc81c\uc758 \uc218\ub294 N = 2\uc774\ub2e4.\n    # 4. \ud070 \ubb38\uc81c\uc758 \uc218\ub294 N = 1\uc774\ub2e4.\n    # \uc774\ub7ec\ud55c \uacbd\uc6b0\ub4e4\uc744 \ud569\ud558\uba74, \ub2e4\uc74c\uacfc \uac19\uc740 \uc0c1\ud0dc\ub97c \ub098\ud0c0\ub0bc \uc218 \uc788\ub2e4.\n    # \uc989, i = 3, j = 2, k = 1, N = 3, \uc774\ub7f0 \uc2dd\uc73c\ub85c \uc0ac\uc6a9\ud558\uba74,\n    # 1) \ud070 \ubb38\uc81c\uc758 \uc218\ub294 \uc791\uc740 \ubb38\uc81c\uc758 \uc218\uc758 3\uc2b9\uc774\ub2e4.\n    # 2) \uc791\uc740 \ubb38\uc81c\uc758 \uc218\ub294 \uc791\uc740 \ubb38\uc81c\uc758 \uc218\uc758 2\uc2b9\uc774\ub2e4.\n    # 3) \uc791\uc740 \ubb38\uc81c\uc758 \uc218\ub294 \uc791\uc740 \ubb38\uc81c\uc758 \uc218\uc758 1\uc2b9\uc774\ub2e4.\n    # 4) \ud070 \ubb38\uc81c\uc758 \uc218\ub294 \uc791\uc740 \ubb38\uc81c\uc758 \uc218\uc758 2\uc2b9\uc774\ub2e4.\n    # \uc774\ub7ec\ud55c \uacbd\uc6b0\ub4e4\uc744 \ud569"
    },
    {
        "number": 4274,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    _, _ = map(int, stdin.split())\n    return 'Yes' if _ > 2 else 'No'"
    },
    {
        "number": 4274,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, M = list(map(int, stdin.split()))\n    count = 0\n\n    for i in range(N):\n        if i % 2 == 0:\n            continue\n        else:\n            if N * (i / 2) <= M <= (N - 1) * (i / 2):\n                count += 1\n\n    if count >= N // 2:\n        return \"Yes\"\n    else:\n        return \"No\"\n\n\ndef"
    },
    {
        "number": 4274,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    try:\n        n, m = map(int, stdin.split())\n        return 'Yes' if n == m else 'No'\n    except ValueError:\n        return 'No'\n"
    },
    {
        "number": 4274,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n == m:\n        return 'Yes'\n    else:\n        return 'No'\n\nstdin = input()\nprint(solution(stdin))\n\n\n'''\n"
    },
    {
        "number": 4274,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.strip().split()))\n    return \"Yes\" if sum(list(map(int, stdin.strip().split()))) % m == 0 else \"No\""
    },
    {
        "number": 4274,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    takahashi = list(map(int, stdin.split()))\n    n, m = takahashi[0], takahashi[1]\n    test = []\n    for i in range(n):\n        test.append(takahashi[i + 2])\n    test = test[:m]\n    return \"Yes\" if test.count(1) == m else \"No\"\n"
    },
    {
        "number": 4274,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if all(map(lambda x: x % 2 == 0, map(int, stdin.split()))):\n        print('Yes')\n    else:\n        print('No')"
    },
    {
        "number": 4274,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return 'Yes' if n*m >= n + m else 'No'\n"
    },
    {
        "number": 4274,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4274,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    _, M = map(int, stdin.split())\n    if M >= 2:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4275,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    if s[2] == s[4]:\n        if s[5] == s[6]:\n            return \"Yes\"\n    return \"No\""
    },
    {
        "number": 4275,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    print(\"Yes\" if stdin.count('a') == stdin.count('b') == stdin.count('c') == stdin.count('d') == stdin.count('e') == stdin.count('f') == stdin.count('g') == stdin.count('h') == stdin.count('i') == stdin.count('j') == stdin.count('k') == stdin.count('l') == stdin.count('m') == stdin.count('n') == stdin.count('o') == stdin.count('p') == stdin.count('q') == stdin.count('r') == stdin.count('s') == stdin.count('t') == stdin.count('u') == stdin.count('v') == stdin.count('w') == stdin.count('x') == stdin.count('y') == stdin.count('z') and stdin.count('0') == stdin.count('1') == stdin.count('2') == stdin.count('3') == stdin.count('4') == stdin.count('5') == stdin.count('6') == stdin.count('7') == stdin.count('8') == stdin.count('9')\n    return"
    },
    {
        "number": 4275,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    if stdin[0] == stdin[2] and stdin[1] == stdin[3] and stdin[4] == stdin[5]:\n        return 'Yes'\n    return 'No'"
    },
    {
        "number": 4275,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.replace('.', '')\n    if a.count(a[1]) == 2 and a[2] == a[3] and a[4] == a[5]:\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 4275,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    for s in stdin:\n        if s[2] == s[4] and s[5] == s[6]:\n            return 'Yes'\n    return 'No'\n    \n"
    },
    {
        "number": 4275,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(len(stdin)):\n        if stdin[i] == stdin[i+1] == stdin[i+2] == stdin[i+3] == stdin[i+4] == stdin[i+5]:\n            print('Yes')\n            break\n    else:\n        print('No')\n\nsolution(input())"
    },
    {
        "number": 4275,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.replace(\" \", \"\")\n    if stdin[2] == stdin[4] and stdin[3] == stdin[5]:\n        return \"Yes\"\n    else:\n        return \"No\"\n\nprint(solution(input()))"
    },
    {
        "number": 4275,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    for i in stdin:\n        if i == stdin[2] and i == stdin[4] and i == stdin[6]:\n            return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 4275,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    for index in range(0, len(stdin)):\n        if stdin[index] == stdin[index+1] and stdin[index] == stdin[index+2]:\n            if stdin[index] == stdin[index+3] and stdin[index] == stdin[index+4]:\n                return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4275,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin\n    if (S[2] == S[4] and S[5] == S[6]):\n        print(\"Yes\")\n    else:\n        print(\"No\")\nsolution(input())\n"
    },
    {
        "number": 4276,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t, c = list(map(int, stdin.split()))\n    routes = list(map(lambda x: (x, t), range(n)))\n\n    def is_valid(route):\n        time = 0\n        for i in range(n - 1):\n            time += routes[route][1]\n            route = (route + (route % n) - 1) % n\n        return time <= t\n\n    def is_valid_2(route):\n        return routes[route][1] <= t\n\n    return min(filter(is_valid, range(n)), key=lambda x: routes[x][0])\n"
    },
    {
        "number": 4276,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"Solution\" if __solution(stdin) else \"TLE\"\n\n\ndef"
    },
    {
        "number": 4276,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    import sys\n    import re\n    lines = stdin.strip().split('\\n')\n    # print(lines)\n    N, T = map(int, lines[0].split())\n    c = list(map(int, lines[1].split()))\n    t = list(map(int, lines[2].split()))\n    # print(N, T, c, t)\n    # print(c, t)\n    m = -1\n    for i in range(len(c)):\n        for j in range(len(c)):\n            if i!= j:\n                for k in range(len(c)):\n                    if k!= i and k!= j:\n                        print(i, j, k)\n                        s = (c[i] + t[i] + c[j] + t[j] + c[k] + t[k])\n                        print(s)\n                        if s <= T:\n                            if s < m:\n                                m = s\n    if m == -1:\n        return \"TLE\"\n    return m\n\nprint(solution(sys.stdin.read()))\n"
    },
    {
        "number": 4276,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def compute(i):\n        if i < 0:\n            return 0\n        if dp[i]!= -1:\n            return dp[i]\n        if i == 0:\n            return stdin[0]\n        else:\n            dp[i] = stdin[i] + min(compute(i - 1), compute(i - 2), compute(i - 3))\n        return dp[i]\n\n    n, t = list(map(int, stdin.split()))\n    stdin = list(map(int, stdin.split()))\n    dp = [-1] * (n)\n    print(compute(n - 1))\n"
    },
    {
        "number": 4276,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, T = map(int, stdin.split())\n    costs = [list(map(int, stdin.split())) for _ in range(N)]\n\n    min_cost = float('inf')\n    min_time = float('inf')\n    routes = []\n    for i in range(len(costs)):\n        time = 0\n        route = []\n        for j in range(len(costs[i])):\n            time += costs[i][j]\n            route.append((costs[i][j], time))\n        routes.append(route)\n    routes = sorted(routes, key=lambda x: x[0])\n    for i in range(len(routes)):\n        time = 0\n        cost = routes[i][0][0]\n        for j in range(len(routes[i])):\n            if time + routes[i][j][1] <= T:\n                time += routes[i][j][1]\n            else:\n                break\n            cost = min(cost, routes[i][j][0])\n        if time > T:\n            continue\n        if cost < min_cost:\n            min_cost = cost\n            min_time = time\n    if min_time == float('inf'):\n        return \"TLE\"\n    return str(min_cost)\n"
    },
    {
        "number": 4276,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, T = map(int, stdin.strip().split())\n    cities = sorted([[int(x), int(y)] for x, y in\n                     [input().strip().split() for _ in range(N)]])\n    # return cost of the route which takes the least amount of time\n    return min([city[1] for city in cities if city[0] <= T] or [T])"
    },
    {
        "number": 4276,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    N, T = stdin[0].split()\n    N = int(N)\n    T = int(T)\n\n    a = stdin[1:]\n    a.sort()\n\n    cost = 0\n    result = 0\n    for i in range(len(a)):\n        cost += a[i][0]\n        if cost > T:\n            break\n        result = max(result, a[i][0] + a[i][1])\n    if result == 0:\n        return TLE\n    else:\n        return result\n"
    },
    {
        "number": 4276,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, T = map(int, stdin.split())\n    cost = list(map(int, stdin.split()))\n\n    import heapq\n    heap = []\n    for i in range(1, N + 1):\n        if i == 1:\n            heapq.heappush(heap, (cost[i - 1], T))\n        else:\n            heapq.heappush(heap, (cost[i - 1], T - cost[i - 1]))\n            heapq.heappush(heap, (cost[i - 1] + cost[i - 2], T))\n    while heap:\n        current, remaining = heapq.heappop(heap)\n        if remaining > 0:\n            heapq.heappush(heap, (current + cost[0], remaining))\n    return str(current)"
    },
    {
        "number": 4276,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    t = int(stdin[1])\n    c = list(map(int, stdin[2].split()))\n    c.sort()\n    for i in range(1, n):\n        c[i] = max(c[i], c[i - 1])\n    c.sort()\n    if c[-1] < t:\n        return \"TLE\"\n    else:\n        return str(c[-1])\n\n\nprint(solution(input()))\n\"\"\""
    },
    {
        "number": 4276,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4277,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    return str(min(a * n, b * n))\n"
    },
    {
        "number": 4277,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = stdin.split()\n    n = int(n)\n    a = int(a)\n    b = int(b)\n    cost_of_train = a * n\n    cost_of_taxi = b * n\n    cost_of_both = min(cost_of_train, cost_of_taxi)\n    total = cost_of_both\n    return str(total)\n"
    },
    {
        "number": 4277,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = stdin.split()\n    n, a, b = int(n), int(a), int(b)\n    t = n * a\n    t += b\n    print(t)\n    return t\n\n\nsolution(input())\n"
    },
    {
        "number": 4277,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = stdin.split()\n    N = int(N)\n    A = int(A)\n    B = int(B)\n    return str(min(N * A, N * B, A + B))\n"
    },
    {
        "number": 4277,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    _, n, a, b = stdin.split()\n    n = int(n)\n    a = int(a)\n    b = int(b)\n\n    # train\n    cost_train = n * a\n    # taxi\n    cost_taxi = b\n    return str(min(cost_taxi, cost_train))\n"
    },
    {
        "number": 4277,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    if a * (n - 1) + b * n <= n * 50:\n        return f\"{n * 50 - (a * (n - 1) + b * n)}\"\n    else:\n        return \"impossible\""
    },
    {
        "number": 4277,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = stdin.strip().split(\" \")\n    N, A, B = int(N), int(A), int(B)\n    return str(min(N * int(A), N * int(B), int(A) + int(B)))\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4277,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    print(max(min(N, A) * min(N, B), N * A, N * B))\n    return '-'"
    },
    {
        "number": 4277,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # TODO: Write your code here\n    return str(min(int(stdin.split()[0]) * int(stdin.split()[1]), int(stdin.split()[2])))"
    },
    {
        "number": 4277,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    print(min(a * n, b * n))\n    return min(a * n, b * n)\n"
    },
    {
        "number": 4278,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    strings = []\n    for i in range(n):\n        strings.append(stdin.strip())\n    ans = 0\n    for i in range(len(strings)):\n        for j in range(i+1, len(strings)):\n            if sorted(strings[i]) == sorted(strings[j]):\n                ans += 1\n    return str(ans)\n\nsolution(input())"
    },
    {
        "number": 4278,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    s_1 = stdin.split()[1]\n    s_2 = stdin.split()[2]\n    s_3 = stdin.split()[3]\n\n    count = 0\n\n    for i in range(N):\n        for j in range(i + 1, N):\n            if is_anagram(s_1, s_2) and is_anagram(s_1, s_3):\n                count += 1\n    \n    print(count)\n    \ndef"
    },
    {
        "number": 4278,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def is_anagram(str1, str2):\n        return sorted(str1) == sorted(str2)\n    \n    # This is the main function that returns the number of pairs.\n    return len(list(filter(lambda x: is_anagram(x, stdin), itertools.combinations(stdin.split('\\n'), 2))))"
    },
    {
        "number": 4278,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4278,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    s_1 = stdin.split('\\n')[1]\n    s_2 = stdin.split('\\n')[2]\n    s_3 = stdin.split('\\n')[3]\n    count = 0\n    if s_1 == s_2:\n        count += 1\n    for i in range(len(s_1)):\n        for j in range(len(s_2)):\n            if s_1[i] == s_2[j]:\n                if s_1[i] == s_3[j]:\n                    count += 1\n    return str(count)\n\nprint(solution(input()))\n\n\"\"\"\n\n\"\"\"\ns_1 = input()\ns_2 = input()\ns_3 = input()\n\ndef"
    },
    {
        "number": 4278,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    return str(N * (N - 1) // 2)\n"
    },
    {
        "number": 4278,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    a = input().split()\n    a = list(map(lambda x: x.lower(), a))\n    ans = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if sorted(a[i]) == sorted(a[j]):\n                ans += 1\n    return str(ans)\n"
    },
    {
        "number": 4278,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    st = []\n    for i in range(N):\n        st.append(stdin[i])\n    st = sorted(st)\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if len(set(st[i]) - set(st[j])) == 0:\n                count += 1\n    return str(count)"
    },
    {
        "number": 4278,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def is_anagram(x: str, y: str) -> bool:\n        return sorted(x) == sorted(y)\n\n    n = int(stdin)\n    res = 0\n    for i in range(n):\n        s_i = stdin.split()[i]\n        s_i_set = set(s_i)\n        for j in range(n):\n            if i!= j:\n                s_j = stdin.split()[j]\n                if s_i_set == set(s_j) and is_anagram(s_i, s_j):\n                    res += 1\n    return str(res)\n"
    },
    {
        "number": 4278,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    result = 0\n    for i in range(1, n):\n        for j in range(i, n):\n            if stdin[i] == stdin[j]:\n                continue\n            elif stdin[i].count(stdin[i]) == stdin[j].count(stdin[j]):\n                result += 1\n    return str(result)"
    },
    {
        "number": 4279,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin)\n    for _ in range(q):\n        k = int(stdin.strip())\n        for i in range(k, 10):\n            if str(i) == str(i)[::-1]:\n                print(i)\n                return\n"
    },
    {
        "number": 4279,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin)\n    for i in range(q):\n        stdin = stdin.split('\\n')\n        k = int(stdin[i])\n        print(digit(k))\n    return \"\"\n\ndef"
    },
    {
        "number": 4279,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x = 1\n    y = 1\n    for _ in range(int(stdin.splitlines()[0])):\n        x *= 10\n    for _ in range(int(stdin.splitlines()[1])):\n        y *= 10\n    return str(x // y)"
    },
    {
        "number": 4279,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return None\n"
    },
    {
        "number": 4279,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin)\n\n    return '\\n'.join(str(i) for i in range(1, q + 1))\n"
    },
    {
        "number": 4279,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    The function receives a string with the description of the queries, and returns a string with the answers\n    \"\"\"\n    s = stdin.split(\"\\n\")\n    queries = []\n    for i in range(len(s)):\n        queries.append(int(s[i]))\n\n    return '\\n'.join([str(queries[i][0]) for i in range(len(queries))])\n"
    },
    {
        "number": 4279,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    cnt = 0\n    for line in stdin:\n        cnt += 1\n        if cnt == 1:\n            n = int(line)\n        else:\n            k = int(line)\n            if k < n:\n                print(k - 1)\n            else:\n                print(k)\n    return \"\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4279,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef"
    },
    {
        "number": 4279,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin)\n    for _ in range(q):\n        k = int(stdin.split()[1])\n        print(f\"{next((int(x) for x in str(k) if int(x) > 0), 0)}\")"
    },
    {
        "number": 4279,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin)\n\n    for i in range(q):\n        k = int(stdin.split()[i])\n        print(int(d(k)[k]))"
    },
    {
        "number": 4280,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = (int(x) for x in stdin.split())\n    roads = [(int(x), int(y)) for x, y in (x.split() for x in stdin.splitlines())]\n    sorted_roads = sorted(roads, key=lambda x: x[0])\n    sorted_roads.sort(key=lambda x: x[1])\n    for i in range(1, n):\n        if sorted_roads[i - 1][0] == sorted_roads[i][0]:\n            return \"0\"\n        if sorted_roads[i - 1][0] + 1 == sorted_roads[i][0]:\n            continue\n        if sorted_roads[i - 1][1] == sorted_roads[i][1]:\n            return \"0\"\n        if sorted_roads[i - 1][1] + 1 == sorted_roads[i][1]:\n            continue\n    r = 0\n    vertices = set()\n    while True:\n        vertices.add(r)\n        for i in range(len(roads)):\n            if roads[i][0] == r:\n                for j in range(i + 1, len(roads)):\n                    if roads[j][0] == r:\n                        if roads[i][1]!= roads[j][1]:\n                            r = r + 1\n                            break\n        if r == n - 1:\n            return str(len(vertices))\n        r = r + 1\n"
    },
    {
        "number": 4280,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    d = {}\n    for i in range(1, n + 1):\n        d[i] = set()\n    for line in stdin.splitlines():\n        x, y = map(int, line.split())\n        d[x].add(y)\n        d[y].add(x)\n    for i in range(1, n):\n        if len(d[i]) >= k:\n            print(i)\n            for j in range(k):\n                print(j + 1, end=' ')\n            print()\n            return\n    for i in range(n):\n        if len(d[i]) < k:\n            print(i)\n            for j in range(k - len(d[i]) + 1):\n                print(j + 1, end=' ')\n            print()\n            return\n    print(n)\n    for i in range(1, n):\n        print(i, end=' ')\n        for j in range(k):\n            print(j + 1, end=' ')\n        print()\n    return\n"
    },
    {
        "number": 4280,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # for _ in range(int(input())):\n    n, k = map(int, input().split())\n    roads = [tuple(map(int, input().split())) for _ in range(n - 1)]\n    c = n - 1\n    min_cost = 2 * n\n    while True:\n        min_c = c\n        max_c = n\n        while True:\n            for i in range(c + 1):\n                for j in range(i + 1, c + 1):\n                    if i!= j and roads[i][1]!= roads[j][0] and roads[i][0]!= roads[j][1]:\n                        cost = roads[i][1] + roads[j][0]\n                        if min_cost > cost:\n                            min_cost = cost\n                            min_c = min(min_c, i)\n                            max_c = max(max_c, j)\n            if min_c == c:\n                break\n        if min_c == c:\n            break\n        c = max_c\n        if min_cost > 2 * n:\n            return str(n)\n    c = min_c\n    while min_cost > 2 * n:\n        for i in range(c, n):\n            cost = roads[i][1]\n            if min_cost > cost:\n                min_cost = cost\n                min_c = i\n        c = min_c\n    return str(min_c + 1) + \" \" + \" \".join(map(str, list(range(min_c + 1, n))))\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4280,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    roads = []\n    for i in range(n - 1):\n        a, b = map(int, stdin.split())\n        roads.append([a, b])\n    if n <= k:\n        return str(n - 1)\n    if k <= n:\n        return str(n)\n\n    # creating graph\n    graph = [[] for _ in range(n + 1)]\n    for edge in roads:\n        graph[edge[0]].append(edge[1])\n        graph[edge[1]].append(edge[0])\n    # traversing graph\n    color = 1\n    components = 0\n    visited = set()\n    queue = []\n    # number of components in a graph is equal to number of connected components in it\n    def dfs(node, color):\n        visited.add(node)\n        nonlocal components\n        if components < n:\n            return\n        for neighbour in graph[node]:\n            if neighbour not in visited:\n                dfs(neighbour, color)\n        if color == 1:\n            components += 1\n        else:\n            components -= 1\n\n    for i in range(1, n + 1):\n        if i not in visited:\n            dfs(i, color)\n            if components < n:\n                color = 1\n            else:\n                color = 2\n            components = 0\n    return str(n - components)\n"
    },
    {
        "number": 4280,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    edges = [[] for _ in range(n)]\n    for i in range(n-1):\n        x, y = list(map(int, stdin.split()))\n        edges[x-1].append(y-1)\n        edges[y-1].append(x-1)\n\n    best = float('-inf')\n    total = 0\n    for c in range(n):\n        companies = set()\n        for edge in edges:\n            if c in edge:\n                companies.add(edge.index(c))\n        if len(companies) >= k:\n            continue\n        cnt = len(companies)\n        if cnt > best:\n            best = cnt\n        total += cnt\n    return str(best) +'' + str(total)\n"
    },
    {
        "number": 4280,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    roads = {}\n    for i in range(n-1):\n        a, b = map(int, stdin.split())\n        if a not in roads:\n            roads[a] = [b]\n        else:\n            roads[a].append(b)\n        if b not in roads:\n            roads[b] = [a]\n        else:\n            roads[b].append(a)\n    vertices = {}\n    for key in roads:\n        if len(roads[key]) >= k:\n            v = key\n        else:\n            vertices[key] = roads[key]\n    m = n\n    res = 0\n    while m > 1:\n        for key in vertices:\n            if len(vertices[key]) > 1:\n                res += 1\n                vertices.pop(key)\n                break\n        m -= 1\n    print(res)\n    print(len(vertices))\n    return res\n"
    },
    {
        "number": 4280,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    graph = [[] for _ in range(n)]\n    visited = [0 for _ in range(n)]\n\n    for i in range(n - 1):\n        x, y = map(int, input().split())\n        x -= 1\n        y -= 1\n        graph[x].append(y)\n        graph[y].append(x)\n\n    def bfs(start: int):\n        q = deque()\n        q.append(start)\n        visited[start] = 1\n        cnt = 0\n        while q:\n            cnt += 1\n            for _ in range(len(q)):\n                v = q.popleft()\n                for nei in graph[v]:\n                    if visited[nei] == 0:\n                        q.append(nei)\n                        visited[nei] = 1\n\n    for i in range(k):\n        if visited[i] == 0:\n            bfs(i)\n\n    roads = []\n    for i in range(n):\n        if visited[i] == 1:\n            roads.append(i + 1)\n    return str(n - len(roads)) + '\\n' +''.join(map(str, roads))"
    },
    {
        "number": 4280,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    n -= 1\n    companies = {}\n    good_cities = set()\n    for i in range(n):\n        p, q = map(int, stdin.split())\n        good_cities.add(p)\n        good_cities.add(q)\n        companies[p] = q\n        companies[q] = p\n\n    good_cities = sorted(good_cities)\n    min_r = min(companies)\n    max_r = max(companies)\n    for r in range(min_r, max_r + 1):\n        current = companies[r]\n        if r in companies:\n            current = companies[r]\n        if current in good_cities:\n            good_cities.remove(current)\n        if len(good_cities) < k:\n            return str(r)\n    return str(len(good_cities))\n"
    },
    {
        "number": 4280,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    roads = []\n    for i in range(n - 1):\n        a, b = map(int, stdin.split())\n        roads.append([a, b])\n\n    companies = {}\n    company_cnt = 0\n    visited = [False for _ in range(n)]\n    for i, (a, b) in enumerate(roads):\n        if visited[a - 1] or visited[b - 1]:\n            continue\n        company_cnt += 1\n        companies[company_cnt] = [i, 0]\n        visited[a - 1] = True\n        visited[b - 1] = True\n\n    for i, (a, b) in enumerate(roads):\n        if visited[a - 1] or visited[b - 1]:\n            continue\n        companies[1][1] += 1\n        visited[a - 1] = True\n        visited[b - 1] = True\n\n    for i, (a, b) in enumerate(roads):\n        if visited[a - 1] or visited[b - 1]:\n            continue\n        companies[2][1] += 1\n        visited[a - 1] = True\n        visited[b - 1] = True\n\n    ans = 1\n    visited[0] = True\n    comp_cnt = 1\n    while comp_cnt <= k:\n        for i, (a, b) in enumerate(roads):\n            if visited[a - 1] or visited[b - 1]:\n                continue\n            if companies[comp_cnt][1] > 0:\n                companies[comp_cnt][1] -= 1\n                visited[a - 1] = True\n                visited[b - 1] = True\n                comp_cnt += 1\n                break\n        else:\n            comp_cnt += 1\n\n    comp_cnt = 1\n    while comp_cnt <= k:\n        cnt = companies[comp_cnt][1]\n        for i, (a, b) in enumerate(roads):\n            if visited[a - 1] or visited[b - 1]:\n                continue\n            if cnt == 0:\n                break\n            cnt -= 1\n            visited[a - 1] = True\n            visited[b - 1] = True\n            comp_cnt += 1\n            break\n        else:\n            comp_cnt += 1\n\n    for i in range(1, k + 1):\n        if i not in companies:\n            ans = i\n\n    return str(ans) + '\\n' + '\\n'.join(map(str, companies.values()))\n"
    },
    {
        "number": 4280,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    v = [[] for _ in range(n)]\n    cnt = [0] * n\n    for _ in range(n - 1):\n        x, y = map(int, stdin.split())\n        v[x - 1].append(y - 1)\n        v[y - 1].append(x - 1)\n    v.sort(key=len)\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if len(v[i]) == len(v[j]):\n                for x in v[i]:\n                    cnt[x] += 1\n                for y in v[j]:\n                    cnt[y] -= 1\n                if cnt.count(2) >= k:\n                    return f'{i + 1} {j + 1}'\n    return '-1'\n"
    },
    {
        "number": 4281,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    in_data = stdin.strip().split(\"\\n\")\n    n = int(in_data[0])\n    coords = list(map(int, in_data[1].split()))\n\n    x = set(coords)\n    max_houses = 0\n    min_houses = 0\n\n    for move in range(2, n + 1):\n        houses_to_move = set()\n\n        if move % 2 == 0:\n            houses_to_move.add(coords[0] - 1)\n            houses_to_move.add(coords[0] + 1)\n            houses_to_move.add(coords[1] - 1)\n            houses_to_move.add(coords[1] + 1)\n\n            houses_to_move = list(houses_to_move)\n            houses_to_move.sort()\n\n            houses_to_move = tuple(houses_to_move)\n\n            if houses_to_move not in x:\n                max_houses = max(max_houses, move)\n        else:\n            houses_to_move.add(coords[0] - 1)\n            houses_to_move.add(coords[0] + 1)\n            houses_to_move.add(coords[1] - 1)\n            houses_to_move.add(coords[1] + 1)\n            houses_to_move = list(houses_to_move)\n            houses_to_move.sort()\n            houses_to_move = tuple(houses_to_move)\n\n            if houses_to_move not in x:\n                min_houses = min(min_houses, move)\n\n    return str(min_houses) + \" \" + str(max_houses)\n\n\nprint(solution(\"\"\"\n3\n1 1 8 8 8\n\n4\n1 1 8 8 8\n\n7\n1 1 8 8 8 4 4 4\n\n9\n1 1 8 8 8 4 4 4 4\n\"\"\"))\n"
    },
    {
        "number": 4281,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    coords = list(map(int, stdin.split()[1]))\n\n    # this is just to get around a problem with negative ints\n    for i, v in enumerate(coords):\n        if v < 0:\n            coords[i] = v + n + 1\n\n    # init houses\n    houses = set(coords)\n    houses.add(0)\n    houses.add(n + 1)\n\n    # keep track of all houses\n    houses_seen = set()\n    for i in range(n):\n        houses_seen |= houses\n        houses_to_go = set()\n        for h in houses_seen:\n            houses_to_go |= set(\n                [h - 1, h, h + 1]\n            )  # possible moves to go to\n        houses = houses_to_go\n\n    return len(houses_seen), max(houses_seen)\n"
    },
    {
        "number": 4281,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = [int(i) for i in stdin.split()]\n    max_houses = 0\n    min_houses = 0\n    count = 0\n    for i in range(0, n):\n        if x[i] > min_houses:\n            min_houses = x[i]\n        if x[i] < max_houses:\n            max_houses = x[i]\n        if i == 0:\n            count += 1\n        elif x[i] == max_houses - 1:\n            count += 1\n        elif x[i] == min_houses + 1:\n            count += 1\n        elif x[i] > min_houses + 1 and x[i] < max_houses - 1:\n            count += 1\n    return str(count)\n    return str(min_houses) +'' + str(max_houses)"
    },
    {
        "number": 4281,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    x = [int(x) for x in stdin.strip().split()]\n    ans = x[0]\n    for i in range(1, len(x)):\n        if x[i] - 1 > x[i - 1]:\n            ans += x[i] - 1\n        elif x[i] + 1 > x[i - 1]:\n            ans += x[i] + 1\n        else:\n            ans += 1\n    return f\"{ans} {ans}\"\n"
    },
    {
        "number": 4281,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n'''"
    },
    {
        "number": 4281,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n = int(stdin[0])\n    x = list(map(int, stdin[1]))\n    min_house = max_house = 0\n    houses = set()\n    for i in range(n):\n        houses.add(x[i])\n        if i == 0:\n            min_house = x[i]\n            max_house = x[i] + 1\n        elif i == n - 1:\n            min_house = min(min_house, x[i] - 1)\n            max_house = max(max_house, x[i] + 1)\n        else:\n            min_house = min(min_house, x[i] - 1)\n            max_house = max(max_house, x[i] + 1)\n            houses.add(x[i] - 1)\n            houses.add(x[i] + 1)\n    return f\"{len(houses)} {min_house} {max_house}\"\n"
    },
    {
        "number": 4281,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x = stdin.strip().split()\n    n = int(x[0])\n    x = [int(i) for i in x[1].split()]\n    print(min_max_occupied_houses(n, x))\n\ndef"
    },
    {
        "number": 4281,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = list(map(int, stdin.split()))\n    x.sort()\n    for i in range(len(x)):\n        if x[i] == 0:\n            x[i] = x[i-1]\n        elif x[i] == x[i-1] + 1:\n            x[i] = x[i-1] - 1\n    print(len(set(x)))\n    print(len(set(x)))\n    return''.join(map(str, sorted(set(x))))\n"
    },
    {
        "number": 4281,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(' ')[0])\n    xs = list(map(int, stdin.split(' ')[1:]))\n    houses = set()\n    house_options = [[0, 2], [1, 2], [1, 1], [2, 2],\n                     [0, 3], [2, 3], [1, 3],\n                     [2, 4], [3, 4],\n                     [0, 5],\n                     [2, 5],\n                     [1, 4],\n                     [1, 3],\n                     [3, 5],\n                     [0, 5],\n                     [3, 4],\n                     [3, 3],\n                     [4, 4],\n                     [0, 4],\n                     [4, 3],\n                     [0, 5],\n                     [4, 5],\n                     [1, 5],\n                     [0, 1],\n                     [2, 1],\n                     [1, 0],\n                     [1, 4],\n                     [3, 2],\n                     [2, 1],\n                     [3, 0],\n                     [3, 3],\n                     [4, 2],\n                     [2, 1],\n                     [4, 0]]\n    for x in xs:\n        houses.add(x)\n    for i in range(len(xs)):\n        if xs[i] == 0:\n            xs[i] = xs[i - 1] + 1\n        if xs[i] == n + 1:\n            xs[i] = xs[i - 1] - 1\n        for j in range(len(xs)):\n            if xs[j] - 1 == xs[i] and j!= i:\n                xs[i] = xs[i] + 1\n            if xs[j] + 1 == xs[i] and j!= i:\n                xs[i] = xs[i] - 1\n    occupied_houses = len(houses)\n    for i in range(len(xs)):\n        house_options = [[0, 2], [1, 2], [1, 1], [2, 2],\n                         [0, 3], [2, 3], [1, 3],\n                         [2, 4], [3, 4],\n                         [0, 5],\n                         [2, 5],\n                         [1, 4],\n                         [1, 3],\n                         [3, 5],\n                         [0, 5],\n                         [3, 4],\n                         [3, 3],\n                         [4, 4],\n                         [0, 4],\n                         [4, 3],\n                         [0, 5],\n                         [4, 5],\n                         [1, 5],\n                         [0, 1],\n                         [2, 1],\n                         [1, 0],\n                         [1, 4],\n                         [3, 2],\n                         [2, 1],\n                         [3, 0],\n                         [3, 3],\n                         [4, 2],\n                         [2, 1],\n                         [4, 0]]\n        for j in range(len(xs)):\n            if xs[j] - 1 == xs[i] and j!= i:\n                xs[i] = xs[i] + 1\n            if xs[j] + 1 == xs[i] and j!= i:\n                xs[i] = xs[i] - 1\n            if house_options[house_options.index(xs[i]) + 1] == xs[j] and xs[i]!= xs[j]:\n                xs[i] = xs[i] - 1\n            if house_options[house_options.index(xs[i]) - 1] == xs[j] and xs[i]!= xs[j]:\n                xs[i] = xs[i] + 1\n    return str(occupied_houses) +'' + str(max(xs) - min(xs))\n"
    },
    {
        "number": 4281,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = list(map(int, stdin.split()))\n    return f\"{min(x)} {max(x)}\""
    },
    {
        "number": 4282,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    n = int(stdin[0])\n    s = set()\n    for i in range(1, n+1):\n        if stdin[i] in s:\n            stdin[i] = str(i+1)\n        else:\n            stdin[i] = str(i)\n    s.add(''.join(stdin))\n    return '\\n'.join(stdin)\nprint(solution(input()))\n"
    },
    {
        "number": 4282,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = stdin.split()[1:]\n    if n == 2:\n        return \" \".join(map(str, sorted(set(map(lambda x: int(x) % n, a))) + sorted(set(map(lambda x: int(x) % n, reversed(a))), reverse=True)))\n    a = sorted(a)\n    ret = 0\n    prev_person = a[0]\n    for i in range(1, n):\n        if a[i] > prev_person:\n            ret = i\n            prev_person = a[i]\n    return \" \".join(map(str, sorted(set(a[ret:])) + sorted(set(a[:ret]))))"
    },
    {
        "number": 4282,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n == 1:\n        return str(1)\n    return''.join(map(str, count_cycle(n, False)))\n\ndef"
    },
    {
        "number": 4282,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    d = collections.defaultdict(list)\n    # initialize\n    for i, j in enumerate(stdin):\n        d[int(j)].append(i + 1)\n    # go from n to 0\n    p = list(range(n, 0, -1))\n    # print permutation of n\n    while n:\n        n -= 1\n        # get index of kid to swap\n        idx = d[n].pop()\n        # swap with kid\n        p[idx - 1], p[idx] = p[idx], p[idx - 1]\n    # print\n    return \" \".join([str(p[i]) for i in range(n)])\n"
    },
    {
        "number": 4282,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    data = stdin.split()\n    result = set()\n    for i in range(1, n+1):\n        result.add(i)\n    for i in range(len(data)):\n        result.remove(data[i])\n    return''.join([str(i) for i in result])\n\nprint(solution(input()))\n"
    },
    {
        "number": 4282,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    instructions = [int(x) for x in stdin.strip().split()]\n    n = int(instructions[0])\n    perms = []\n    \n    for kid in range(1, n + 1):\n        parent = instructions[kid - 1]\n        kid_perms = []\n        child_perms = []\n        while kid!= parent:\n            if kid > parent:\n                kid_perms.append(instructions[instructions.index(kid) - 1])\n                child_perms.append(instructions[instructions.index(kid) - 1])\n            else:\n                kid_perms.append(instructions[instructions.index(kid) + 1])\n                child_perms.append(instructions[instructions.index(kid) + 1])\n            kid = kid_perms[-1]\n        perms.append(kid_perms)\n        perms.append(child_perms)\n\n    perms = list(map(lambda x: list(map(lambda y: y + 1, x)), perms))\n\n    return \" \".join(map(str, perms))"
    },
    {
        "number": 4282,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    p = list(map(int, stdin.strip().split()))\n    k = max(p)\n    p.sort()\n\n    def do(n, p, k):\n        if len(p) == 1:\n            return p\n\n        def get_child(i, p):\n            if i < n:\n                return get_child(i + 1, p)\n            else:\n                return p[(i + 1) % n]\n\n        def swap(i, p):\n            return (i - 1) % n, (i + 1) % n\n\n        def new(p):\n            p1, p2 = swap(p[0], p)\n            return p1, p2\n\n        def old(p):\n            p1, p2 = swap(p[0], p)\n            return p2, p1\n\n        def order(p, kid, kid2, kid1, kid21):\n            #kid - kid1\n            if kid == kid2:\n                return kid1, kid21\n            if kid == kid1:\n                return kid2, kid1\n\n            p1, p2 = kid2, kid1\n\n            if p1 == kid:\n                return kid2, kid1\n            else:\n                return kid2, kid1\n\n        a, b = get_child(0, p), get_child(1, p)\n        x, y = new(p), new(p)\n        c, d = order(p, a, b, x, y)\n\n        if x!= c or y!= d:\n            if p[0] == c:\n                p, x = new(p), new(p)\n            else:\n                p, x = old(p), old(p)\n\n        if p[0] == x:\n            return p[0], p[1]\n        else:\n            return p[1], p[0]\n\n    return \" \".join(map(str, do(n, p, k)))\n"
    },
    {
        "number": 4282,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    p = list(map(int, stdin.split()))\n    n = len(p)\n    n = n % 2\n    if n == 0:\n        return''.join(map(str, p))\n    p = p[1:] + p[:1]\n    # p =''.join(map(str, p))\n    return''.join(map(str, p[:n]))\nprint(solution(input()))\n"
    },
    {
        "number": 4282,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    answer = []\n    for i in range(n):\n        answer.append(str(i+1))\n        answer.append(str(n-i))\n    return''.join(answer)\n"
    },
    {
        "number": 4282,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = input()\n    n = int(s)\n    x = []\n    for i in range(1, n+1):\n        s = input()\n        x.append(s)\n    a = x\n    a.sort()\n    return \"\".join(a)\n"
    },
    {
        "number": 4283,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n"
    },
    {
        "number": 4283,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a = sorted(a)\n    last = a[-1]\n    s = 0\n    t = 0\n    for i in range(n - 1):\n        if last - a[i] <= 5:\n            s += a[i]\n        else:\n            t += 1\n            last = a[i]\n    if last - a[n - 1] <= 5:\n        s += a[n - 1]\n    else:\n        t += 1\n    if t > s:\n        return t\n    else:\n        return s\n\n\nsolution('1 10 17 12 15 2')\n"
    },
    {
        "number": 4283,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split(\" \")\n    sum = 0\n    if int(a[0]) > 1:\n        for i in range(1, len(a)):\n            sum += int(a[i])\n    else:\n        for i in range(0, len(a)):\n            sum += int(a[i])\n    if sum <= 5:\n        return \"1\"\n    else:\n        return \"0\"\nprint(solution(input()))\n"
    },
    {
        "number": 4283,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = list(map(int, stdin.split()))\n    a = stdin.pop(0)\n    min_a = min(stdin)\n    max_a = max(stdin)\n    if min_a >= max_a:\n        return 1\n    else:\n        return a * 5 // 10 + 1\n"
    },
    {
        "number": 4283,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n'''"
    },
    {
        "number": 4283,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = list(map(int, stdin.split()))\n    if stdin[1] == stdin[2] == stdin[3]:\n        return 1\n    team = []\n    i = 0\n    while i < stdin[0]:\n        if len(team) < stdin[0]:\n            team.append(stdin[i + 4])\n            i += 5\n        else:\n            if abs(stdin[i] - stdin[i + 1]) <= 5:\n                team.append(stdin[i + 4])\n                i += 5\n            else:\n                team.append(stdin[i + 1])\n                i += 2\n    return len(team)\n"
    },
    {
        "number": 4283,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    skills = list(map(int, stdin.split()[1]))\n    skills = sorted(skills)\n    while skills and skills[-1] == skills[-2] + 5:\n        skills.pop()\n    return len(skills)"
    },
    {
        "number": 4283,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input = list(map(int, stdin.split()))\n    n = input[0]\n\n    skills = []\n\n    for i in range(1, n + 1):\n        skills.append(input[i])\n\n    return print(max(balanced_team(skills)))\n\n\ndef"
    },
    {
        "number": 4283,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    print(balanced_team(n, a))\n\ndef"
    },
    {
        "number": 4283,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n'''\n\nn = int(input())\n\na = list(map(int, input().split()))\n\na.sort()\n\nm = max(a)"
    },
    {
        "number": 4284,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    k = int(stdin.split()[1])\n    a = int(stdin.split()[2])\n    b = int(stdin.split()[3])\n    if n == 1 and k == 0 and a == 0 and b == 0:\n        return \"1\"\n    elif n == 1 and k <= a and k >= b:\n        return \"4\"\n    elif n == 2 and k == 1 and a == 0 and b == 0:\n        return \"3\"\n    elif n == 2 and k == 1 and a == 1 and b == 1:\n        return \"2\"\n    elif n == 2 and k == 1 and a == 1 and b == 0:\n        return \"4\"\n    elif n == 2 and k == 1 and a == 0 and b == 1:\n        return \"5\"\n    elif n == 2 and k == 2 and a == 0 and b == 1:\n        return \"4\"\n    elif n == 2 and k == 2 and a == 0 and b == 0:\n        return \"4\"\n    elif n == 2 and k == 2 and a == 1 and b == 1:\n        return \"5\"\n    elif n == 2 and k == 2 and a == 1 and b == 0:\n        return \"6\"\n    elif n == 2 and k == 2 and a == 0 and b == 1:\n        return \"7\"\n    elif n == 2 and k == 3 and a == 0 and b == 0:\n        return \"5\"\n    elif n == 2 and k == 3 and a == 1 and b == 1:\n        return \"6\"\n    elif n == 2 and k == 3 and a == 1 and b == 0:\n        return \"7\"\n    elif n == 2 and k == 3 and a == 0 and b == 1:\n        return \"8\"\n    elif n == 2 and k == 4 and a == 0 and b == 1:\n        return \"7\"\n    elif n == 2 and k == 4 and a == 1 and b == 1:\n        return \"8\"\n    elif n == 2 and k == 4 and a == 1 and b == 0:\n        return \"9\"\n    elif n == 2 and k == 4 and a == 0 and b == 1:\n        return \"10\"\n    elif n == 3 and k == 1 and a == 0 and b == 0:\n        return \"6\"\n    elif n == 3 and k == 1 and a == 1 and b == 1:\n        return \"7\"\n    elif n == 3 and k == 1 and a == 1 and b == 0:\n        return \"8\"\n    elif n == 3 and k == 1 and a == 0 and b == 1:\n        return \"9\"\n    elif n == 3 and k == 2 and a == 0 and b == 1:\n        return \"7\"\n    elif n == 3 and k == 2 and a == 1 and b == 1:\n        return \"9\"\n    elif n == 3 and k == 2 and a == 1 and b == 0:\n        return \"10\"\n    elif n == 3 and k == 2 and a == 0 and b == 1:\n        return \"11\"\n    elif n == 3 and k == 3 and a == 0 and b == 1:\n        return \"9\"\n    elif n == 3 and k == 3 and a == 1 and b == 1:\n        return \"11\"\n    elif n == 3 and k == 3 and a == 1 and b == 0:\n        return \"12\"\n    elif n == 3 and k == 3 and a == 0 and b == 1:\n        return \"13\"\n    elif n == 3 and k == 4 and a == 0 and b == 1:\n        return \"9\"\n    elif n == 3 and k == 4 and a == 1 and b == 1:\n        return \"11\"\n    elif n == 3 and k == 4 and a == 1 and b == 0:\n        return \"12\"\n    elif n == 3 and k == 4 and a == 0 and b == 1:\n        return \"13\"\n    elif n == 4 and k == 1 and a == 0 and b == 0:\n        return \"5\"\n    elif n == 4 and k == 1 and a == 1 and b == 1:\n        return \"6\"\n    elif n == 4 and k == 1 and a == 1 and b == 0:\n        return \"7\"\n    elif n == 4 and k == 1 and a == 0 and b == 1:\n        return \"8\"\n    elif n == 4 and k == 2 and a == 0 and b == 1:\n        return \"6\"\n    elif n == 4 and k == 2 and a == 1 and b == 1:\n        return \"7\"\n    elif n == 4 and k == 2 and a == 1 and b == 0:\n        return \"8\"\n    elif n == 4 and k == 2 and a == 0 and b == 1:\n        return \"9\"\n    elif n == 4 and k == 3 and a == 0 and b == 1:\n        return \"7\"\n    elif n == 4 and k == 3 and a == 1 and b == 1:\n        return \"9\"\n    elif n == 4 and k == 3 and a == 1 and b == 0:\n        return \"10\"\n    elif n == 4 and k == 3 and a == 0 and b == 1:\n        return \"11\"\n    elif n == 4 and k == 4 and a == 0 and b == 1:\n        return \"9\"\n    elif n == 4 and k == 4 and a == 1 and b == 1:\n        return \"11\"\n    elif n == 4 and k == 4 and a == 1 and b == 0:\n        return \"12\"\n    elif n == 4 and k == 4"
    },
    {
        "number": 4284,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    q = int(stdin[0])\n    \n    while q > 0:\n        q -= 1\n        k, n, a, b = list(map(int, stdin[1].split()))\n        \n        if not can_play(k, n, a, b):\n            print(-1)\n        else:\n            print(play(k, n, a, b))\n        \n        stdin = stdin[2:]\n    return stdin\ndef"
    },
    {
        "number": 4284,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, k, a, b = [int(i) for i in stdin.split()]\n    print(a, b)\n    if a > b:\n        print(-1)\n        return\n    elif a == b:\n        print(n)\n        return\n    n = n\n    k = k\n    a = a\n    b = b\n    while n >= k:\n        print(n, k, a, b)\n        if a <= n <= b:\n            if a > b:\n                k = n\n            else:\n                k = b\n        n -= 1\n    print(n, k, a, b)\n    if a <= n <= b:\n        if a > b:\n            k = n\n        else:\n            k = b\n    print(n, k, a, b)\n    print(n, k, a, b)\n    if a <= n <= b:\n        if a > b:\n            k = n\n        else:\n            k = b\n    print(n, k, a, b)\n    if a <= n <= b:\n        if a > b:\n            k = n\n        else:\n            k = b\n    print(n, k, a, b)\n    print(n, k, a, b)\n    return str(n)\n\nsolution('''1 5 3 2\n15 5 4 3\n15 5 2 1\n15 5 5 1\n16 7 5 2\n20 5 7 3''')\n"
    },
    {
        "number": 4284,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin)\n    for i in range(q):\n        k, n, a, b = map(int, stdin.split())\n        if (k > a) and (n > a):\n            print(a)\n        elif (k > a) and (n > b):\n            print(b)\n        elif (k > b) and (n > a):\n            print(b)\n        elif (k > b) and (n > b):\n            print(-1)\n\nsolution(input())\n"
    },
    {
        "number": 4284,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    num_of_queries = int(stdin.split()[0])\n    for i in range(num_of_queries):\n        k, n, a, b = map(int, stdin.split()[1:5])\n        if k > a and k > b:\n            if n > k + b:\n                print(n - k - b)\n            else:\n                print(-1)\n        elif k > a and k <= b:\n            if n > k + a:\n                print(n - k - a)\n            else:\n                print(-1)\n        elif k <= a and k <= b:\n            if n > a:\n                print(n - a)\n            else:\n                print(-1)\nsolution(input())\n\n2\n20 5 7 3\n16 7 5 2\n\n-----Explanation-----\n\nIn the first example query Vova can just play $4$ turns and spend $12$ units of charge and then one turn play and charge and spend $2$ more units. So the remaining charge of the battery will be $1$.\n\nIn the second example query Vova cannot complete the game because even if he will play and charge the battery during each turn then the charge of the laptop battery will be $0$ after the last turn.\n"
    },
    {
        "number": 4284,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # return None\n    n, k, a, b = map(int, stdin.split())\n    a = a - k\n    b = b - k\n    if a >= 0 and b >= 0:\n        return str(a + 1) + '\\n' + str(b)\n    else:\n        return '-1'\n"
    },
    {
        "number": 4284,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n'''\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 4284,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def reverse(val):\n        return val\n    return stdin"
    },
    {
        "number": 4284,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    s, n, k, a, b = (int(x) for x in stdin.split())\n    \n    for _ in range(n):\n        charge = a if s < a else b if s > a and s < b else 0\n        s -= charge\n        if s <= 0:\n            break\n    \n    if s > 0:\n        return -1\n    return str(n - _)"
    },
    {
        "number": 4284,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n'''\n\na = int(input())\nb = int(input())\nc = int(input())\nd = int(input())\n\ndef"
    },
    {
        "number": 4285,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    a = s.count(\"?\")\n    c = s.count(\"c\")\n    b = s.count(\"b\")\n    a_count = c * 3**(a-1)\n    b_count = c * 3**(b-1)\n    c_count = c * 3**(c-1)\n    print(a_count)\n    print(b_count)\n    print(c_count)\n    print((a_count + b_count + c_count) % 1000000000 + 7)\n\nsolution(input())\n"
    },
    {
        "number": 4285,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    c = 0\n    while s!= \"\":\n        c += 1\n        s = s[1:]\n        if s.find(\"?\") == -1:\n            break\n    return c"
    },
    {
        "number": 4285,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    length = int(stdin.split()[0])\n    string = stdin.split()[1]\n    string = string.replace('?', 'a')\n    string = ''.join(sorted(string))\n    string = ''.join(sorted(string, reverse=True))\n    string = list(string)\n    string = sorted(string)\n    string = ''.join(string)\n    print(string)\n    print(string.count('ab'))\n    print(string.count('ac'))\n    print(string.count('bc'))\n    return 0\n\nsolution('''6\nac?b?c''')\nsolution('''7\n???????''')\nsolution('''5\na???c''')\n\nsolution('''6\nac?b?c''')\nsolution('''7\n???????''')\nsolution('''5\na???c''')"
    },
    {
        "number": 4285,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    s = stdin\n    k = int(s.split(\" \")[0])\n    s = s.replace('?', 'a')\n    s = s.replace('a', 'b')\n    s = s.replace('b', 'c')\n    print(len(set(s[:k])))\n\nsolution(stdin)"
    },
    {
        "number": 4285,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    m = s.count('?')\n    if m == 0:\n        print(0)\n    elif m == 1:\n        if s.count('a') >= 1:\n            print(((len(s)-s.count('a'))//3)**2)\n        else:\n            print(0)\n    elif m == 2:\n        if s.count('a') >= 1 and s.count('b') >= 1:\n            print(((len(s)-s.count('a'))//3)**2)\n        else:\n            print(0)\n    elif m == 3:\n        if s.count('a') >= 2 and s.count('b') >= 2:\n            print(((len(s)-s.count('a'))//3)**2)\n        else:\n            print(0)\n    elif m == 4:\n        if s.count('a') >= 1 and s.count('b') >= 1 and s.count('c') >= 1:\n            print(((len(s)-s.count('a'))//3)**2)\n        else:\n            print(0)\n    elif m == 5:\n        if s.count('a') >= 2 and s.count('b') >= 2 and s.count('c') >= 2:\n            print(((len(s)-s.count('a'))//3)**2)\n        else:\n            print(0)\n    elif m == 6:\n        if s.count('a') >= 3 and s.count('b') >= 3 and s.count('c') >= 3:\n            print(((len(s)-s.count('a'))//3)**2)\n        else:\n            print(0)\n    elif m == 7:\n        if s.count('a') >= 4 and s.count('b') >= 4 and s.count('c') >= 4:\n            print(((len(s)-s.count('a'))//3)**2)\n        else:\n            print(0)\n    elif m == 8:\n        if s.count('a') >= 5 and s.count('b') >= 5 and s.count('c') >= 5:\n            print(((len(s)-s.count('a'))//3)**2)\n        else:\n            print(0)\n    else:\n        print(0)\n        \nsolution(stdin)\n"
    },
    {
        "number": 4285,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    str_s = stdin\n    all_subs = []\n    for i in range(3, len(str_s) + 1):\n        subs = []\n        for start in range(0, len(str_s) - i + 1):\n            sub = str_s[start:start + i]\n            if sub not in subs:\n                subs.append(sub)\n            else:\n                break\n        all_subs.append(subs)\n    all_subs.sort(key=lambda x: len(x), reverse=True)\n    # for sub in all_subs:\n    #     print(sub)\n    count = 0\n    for sub in all_subs:\n        count += 2 ** (len(sub) - 1)\n    return str(count)\n"
    },
    {
        "number": 4285,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def add_zero(c):\n        result = \"\"\n        if c == \"?\":\n            return result\n        else:\n            result += c\n            return result\n    \n    arr = stdin.split('\\n')\n    arr = arr[0]\n    length = len(arr)\n    result = 0\n    for i in range(length):\n        print(i, length)\n        result += length - i\n        print(result)\n    return result % 10**9 + 7\n\nprint(solution(input()))"
    },
    {
        "number": 4285,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    ans = 0\n    if n == 0:\n        return str(ans)\n\n    s = s.replace(\"?\", \"\")\n    tmp = s[:n]\n    tmp2 = s[n:]\n    if \"a\" not in tmp and \"b\" not in tmp and \"c\" not in tmp:\n        return str(ans)\n    tmp = tmp.replace(\"a\", \"\")\n    tmp = tmp.replace(\"b\", \"\")\n    tmp = tmp.replace(\"c\", \"\")\n    ans = ans + len(tmp)\n    if \"a\" not in tmp2 and \"b\" not in tmp2 and \"c\" not in tmp2:\n        return str(ans)\n    tmp2 = tmp2.replace(\"a\", \"\")\n    tmp2 = tmp2.replace(\"b\", \"\")\n    tmp2 = tmp2.replace(\"c\", \"\")\n    ans = ans + len(tmp2)\n    return str(ans % 10000007 + 7)\n\n\nsolution(\"3\")\n"
    },
    {
        "number": 4285,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip().split()[0])\n    s = stdin.strip().split()[1]\n    sub = [[] for _ in range(3)]\n    k = 0\n    for i in range(n):\n        if s[i] == \"?\":\n            k += 1\n            sub[k % 3].append(s[:i])\n            s = s[i + 1:]\n    ans = 1\n    for i in range(3):\n        for j in sub[i]:\n            ans = (ans + (len(j) * len(sub[(i + 1) % 3]))) % (10 ** 9 + 7)\n    return ans\n\n\nprint(solution(\"6\\nac?b?c\\n\"))\nprint(solution(\"7\\n??????????\\n\"))\nprint(solution(\"5\\na?b?c\\n\"))\nprint(solution(\"9\\ncccbbbaaa\\n\"))\nprint(solution(\"5\\n??????c\\n\"))\n"
    },
    {
        "number": 4285,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def letters(string):\n        if len(string) < 3:\n            return 0\n        if len(string) == 3:\n            return 1\n        return (\n            letters(string[1:]) + letters(string[2:])\n            + letters(string[3:])\n            + letters(string[0] + string[1] + string[2])\n        ) % (10 ** 9 + 7)\n\n    return letters(stdin)\n"
    },
    {
        "number": 4286,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    [n, m] = list(map(int, stdin.strip().split()))\n    graph = [[] for _ in range(n + 1)]\n    for _ in range(m):\n        [a, b, c] = list(map(int, stdin.strip().split()))\n        graph[a].append([b, c])\n        graph[b].append([a, c])\n    visited = set()\n    min_coins = float('inf')\n    queue = [(1, 0)]\n    while queue:\n        curr_vertex, curr_cost = queue.pop(0)\n        if curr_vertex in visited:\n            continue\n        visited.add(curr_vertex)\n        for next_vertex, next_cost in graph[curr_vertex]:\n            if next_vertex in visited:\n                continue\n            queue.append((next_vertex, curr_cost + next_cost))\n            min_coins = min(min_coins, curr_cost + next_cost)\n    return str(min_coins)\n"
    },
    {
        "number": 4286,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    coins = list(map(int, stdin.split()))\n    offers = []\n    for i in range(m):\n        x, y, w = map(int, stdin.split())\n        offers.append([x, y, w])\n    res = min_coins(n, m, coins, offers)\n    return str(res)\n\n\ndef"
    },
    {
        "number": 4286,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = (int(x) for x in stdin.split())\n    a = tuple(int(x) for x in stdin.split()[1:])\n    g = {i: set() for i in range(1, n + 1)}\n    for i in range(1, n):\n        g[i].add(i + 1)\n        g[i + 1].add(i)\n    for i in range(m):\n        g[a[i * 2]].add(a[i * 2 + 1])\n        g[a[i * 2 + 1]].add(a[i * 2])\n    return sum(a)\n\n\ndef"
    },
    {
        "number": 4286,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 3 2\n   ... 1 3 3\n   ... 2 3 5\n   ... 2 1 1\n   ... ''')\n    '5'\n    >>> solution('''\n   ... 4 0\n   ... 1 3 3 7\n   ... ''')\n    '16'\n    >>> solution('''\n   ... 5 4\n   ... 1 2 3 4 5\n   ... 1 2 8\n   ... 1 3 10\n   ... 1 4 7\n   ... 1 5 15\n   ... ''')\n    '18'\n    \"\"\"\n    # data = stdin.strip().split()\n    n, m = map(int, stdin.strip().split())\n    graph = {i: [] for i in range(1, n + 1)}\n    for i in range(m):\n        a, b, c = map(int, stdin.strip().split())\n        graph[a].append([b, c])\n        graph[b].append([a, c])\n    answer = float('inf')\n    visited = set()\n    for u in graph:\n        if u not in visited:\n            visited.add(u)\n            answer = min(answer, _search(u, visited, graph))\n    return str(answer)\n\n\ndef"
    },
    {
        "number": 4286,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    edges = [(int(i), int(j), int(k)) for i, j, k in [x.split() for x in stdin.splitlines()]]\n    return str(min(\n        sum(\n            [min(a, b, c) for a, b, c in (\n                [(a + c, b, c) for b, c in edges] + [(b + c, a, c) for a, b, c in edges]\n            )]\n        )\n        for a, b, c in edges\n    ))\n"
    },
    {
        "number": 4286,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    graph = {i: [] for i in range(1, n + 1)}\n    for i in range(m):\n        x, y, cost = map(int, stdin.split())\n        graph[x].append((y, cost))\n        graph[y].append((x, cost))\n\n    # visited = set()\n    # q = deque([(1, 0)])\n    # while q:\n    #     curr, cost = q.popleft()\n    #     if curr in visited:\n    #         continue\n    #     visited.add(curr)\n    #     for nei, cost in graph[curr]:\n    #         q.append((nei, cost + cost))\n    # return cost\n\n    visited = {}\n    q = deque([(1, 0)])\n    while q:\n        curr, cost = q.popleft()\n        if curr in visited:\n            continue\n        visited[curr] = True\n        for nei, cost in graph[curr]:\n            if nei in visited:\n                continue\n            q.append((nei, cost + cost))\n    return sum(cost for cost in visited.values())\n"
    },
    {
        "number": 4286,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    visited = set()\n    visited.add(0)\n    min_coins = float('inf')\n    for x in range(1, n+1):\n        visited.clear()\n        visited.add(x)\n        for y in range(1, n+1):\n            visited.clear()\n            visited.add(y)\n            min_coins = min(min_coins, a[x-1] + a[y-1] +\n                            dfs(x, y, visited, min_coins, a))\n    return min_coins\n\n\ndef"
    },
    {
        "number": 4286,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = (int(_) for _ in stdin.split())\n    edges = {_: [] for _ in range(1, n + 1)}\n    for _ in range(m):\n        a, b, w = (int(_) for _ in stdin.split())\n        edges[a].append((b, w))\n        edges[b].append((a, w))\n    q = {(1, 0)}\n    s = {1}\n    while q:\n        x, c = q.pop()\n        for y, w in edges[x]:\n            if y not in s:\n                q.add((y, c + w))\n                s.add(y)\n    return str(sum(c for x, c in edges.values() if len(s & set(x)) < 2))\n\n\ndef"
    },
    {
        "number": 4286,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    graph = [[] for _ in range(n)]\n    for i in range(n):\n        a = list(map(int, stdin.split()))\n        for j in range(n):\n            graph[i].append(a[j])\n            if j == i:\n                continue\n            if a[j]!= a[i] and a[j]!= 0:\n                graph[i].append(a[j])\n    coins = 0\n    ans = 0\n    for i in range(n):\n        for j in range(n):\n            if i!= j:\n                coins += graph[i][j]\n        if coins < n:\n            ans = max(ans, n - coins)\n        coins = 0\n    return str(ans)\n"
    },
    {
        "number": 4286,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    graph = {i: [] for i in range(1, n+1)}\n    sp_offers = set()\n    for _ in range(m):\n        x, y, w = map(int, stdin.split())\n        sp_offers.add((x, y, w))\n        graph[x].append(y)\n        graph[y].append(x)\n\n    visited = {i: 0 for i in range(1, n+1)}\n    visited[1] = 1\n\n    q = deque([(1, 0)])\n    while q:\n        node, cost = q.popleft()\n        for neigh in graph[node]:\n            if neigh not in visited:\n                visited[neigh] = visited[node] + cost\n                q.append((neigh, cost + 1))\n\n    res = 0\n    for x, y, w in sp_offers:\n        if x in visited and y in visited:\n            res = max(res, visited[x] + visited[y] - 2*w)\n\n    return str(res)\n\n\nstdin = '''\n4 0\n1 3 3 7\n'''\nprint(solution(stdin))\n"
    },
    {
        "number": 4287,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, n, m = map(int, stdin.split())\n    x = 0\n    z = 0\n    p = 0\n    res = 0\n    for i in range(n):\n        z = a - x\n        x = a - x\n        p = min(p, x)\n    if p > 0:\n        res = p\n    return str(res)\n"
    },
    {
        "number": 4287,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, n, m = map(int, stdin.split())\n    points = sorted([*map(int, stdin.split())], reverse=True)\n\n    x, w = 0, 0\n    for point in points:\n        if point < x:\n            return '-1'\n        x = point\n        if w == 0:\n            w += point\n        else:\n            w -= point\n    return str(w)\n"
    },
    {
        "number": 4287,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, n, m = map(int, stdin.split())\n    # nums = [int(x) for x in stdin.split()]\n    nums = []\n    for _ in range(n):\n        l, r = map(int, stdin.split())\n        nums.append([l, r])\n\n    # nums = [[0, 9],\n    #         [0, 8],\n    #         [0, 7],\n    #         [1, 9],\n    #         [1, 8],\n    #         [1, 7],\n    #         [2, 9],\n    #         [2, 8],\n    #         [2, 7],\n    #         [3, 9],\n    #         [3, 8],\n    #         [3, 7],\n    #         [4, 9],\n    #         [4, 8],\n    #         [4, 7],\n    #         [5, 9],\n    #         [5, 8],\n    #         [5, 7],\n    #         [6, 9],\n    #         [6, 8],\n    #         [6, 7],\n    #         [7, 9],\n    #         [7, 8],\n    #         [7, 7],\n    #         [8, 9],\n    #         [8, 8],\n    #         [8, 7],\n    #         [9, 9],\n    #         [9, 8],\n    #         [9, 7],\n    # ]\n    # print(nums)\n\n    max_ = float('-inf')\n    for num in nums:\n        max_ = max(max_, num[1])\n\n    # print(max_)\n    return max_\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4287,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def check_intersect(l1: int, r1: int, l2: int, r2: int) -> bool:\n        return l1 <= l2 <= r1 or l1 <= r2 <= r1 or l2 <= l1 <= r2\n    a, n, m = map(int, stdin.split())\n    segments = []\n    for _ in range(n):\n        l, r = map(int, input().split())\n        segments.append([l, r])\n    umbrellas = []\n    for _ in range(m):\n        x, p = map(int, input().split())\n        umbrellas.append([x, p])\n    if n == 1:\n        return '-1'\n    if n > 1 and m == 1:\n        umbrella_on_point = []\n        for umbrella in umbrellas:\n            if umbrella[0] == a:\n                umbrella_on_point = umbrella\n        umbrella_on_point[1] -= 1\n        return str(umbrella_on_point[1])\n    if n > 1 and m == 1:\n        umbrella_on_point = []\n        for umbrella in umbrellas:\n            if umbrella[0] == a:\n                umbrella_on_point = umbrella\n        umbrella_on_point[1] -= 1\n        return str(umbrella_on_point[1])\n    for umbrella in umbrellas:\n        umbrella[1] -= 1\n    def check_umbrella(umbrella):\n        umbrella_on_point = [umbrella[0], umbrella[1]]\n        for segment in segments:\n            if umbrella_on_point[0] in range(segment[0], segment[1]):\n                continue\n            if umbrella_on_point[1] in range(segment[0], segment[1]):\n                continue\n            if umbrella_on_point[0] in range(segment[0], segment[1]):\n                continue\n            if umbrella_on_point[1] in range(segment[0], segment[1]):\n                continue\n            return False\n        return True\n    def check_umbrella_1(umbrella):\n        umbrella_on_point = [umbrella[0], umbrella[1]]\n        if umbrella_on_point[0] in range(segments[0][0], segments[0][1]) and umbrella_on_point[1] in range(segments[0][0], segments[0][1]):\n            return True\n        for segment in segments:\n            if umbrella_on_point[0] in range(segment[0], segment[1]):\n                continue\n            if umbrella_on_point[1] in range(segment[0], segment[1]):\n                continue\n            if umbrella_on_point[0] in range(segment[0], segment[1]):\n                continue\n            if umbrella_on_point[1] in range(segment[0], segment[1]):\n                continue\n            return False\n        return True\n    # print(check_umbrella(umbrella))\n    # print(check_umbrella_1(umbrella))\n    # print(umbrella)\n    # print(umbrellas)\n    # print(segments)\n    for umbrella in umbrellas:\n        if check_umbrella(umbrella):\n            return '-1'\n    for segment in segments:\n        # print(segment)\n        if check_intersect(segment[0], segment[1], a, a):\n            if check_umbrella(umbrella):\n                return '-1'\n        # print(check_intersect(segment[0], segment[1], a, a))\n    # print('-'*10)\n    if check_umbrella(umbrella_on_point):\n        return '-1'\n    # print('-'*10)\n    # print(umbrella_on_point)\n    # print('-'*10)\n    # print(umbrellas)\n    # print('-'*10)\n    # print(segments)\n    # print('-'*10)\n    # for umbrella in umbrellas:\n    #     print(umbrella)\n    # print('-'*10)\n    # for segment in segments:\n    #     print(segment)\n    # print"
    },
    {
        "number": 4287,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def check_range(l, r):\n        if l <= 0:\n            return False\n        if r <= l:\n            return False\n        return True\n\n    a, n, m = map(int, stdin.split())\n    umbrellas = []\n    for _ in range(m):\n        umbrellas.append(list(map(int, stdin.split())))\n\n    x = 0\n    max_fatigue = 0\n\n    while True:\n        min_fatigue = float('inf')\n        for umbrella in umbrellas:\n            if check_range(umbrella[0], umbrella[1]):\n                min_fatigue = min(min_fatigue, umbrella[2])\n        if min_fatigue > max_fatigue:\n            max_fatigue = min_fatigue\n        if max_fatigue >= a:\n            return str(max_fatigue)\n        for umbrella in umbrellas:\n            if umbrella[0] <= x:\n                umbrella[2] -= min_fatigue\n            if umbrella[1] >= x and umbrella[0] <= x + 1 and umbrella[2] >= 0:\n                umbrella[2] += 1\n            if umbrella[1] >= x + 1:\n                umbrella[2] -= 1\n        x += 1\n\nsolution('10 2 4\\n3 7\\n8 10\\n0 10\\n3 4\\n8 1\\n1 2\\n')"
    },
    {
        "number": 4287,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n"
    },
    {
        "number": 4287,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, n, m = map(int, stdin.split())\n    # print(a, n, m)\n    segments = []\n    for _ in range(n):\n        segments.append(list(map(int, stdin.split())))\n    umbrellas = []\n    for _ in range(m):\n        umbrellas.append(list(map(int, stdin.split())))\n    # print(segments)\n    # print(umbrellas)\n    x = 0\n    f = 0\n    while x < a:\n        for umbrella in umbrellas:\n            if x <= umbrella[0]:\n                if umbrella[1] > f:\n                    f = umbrella[1]\n        for segment in segments:\n            if x <= segment[0] and segment[1] <= x:\n                if segment[1] > f:\n                    f = segment[1]\n        x += 1\n    if f == 0:\n        return -1\n    return f\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4287,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, n, m = [int(x) for x in stdin.split()]\n    segments = []\n    for i in range(n):\n        s, e = [int(x) for x in stdin.split()]\n        segments.append([s, e])\n\n    umbrellas = []\n    for i in range(m):\n        x, p = [int(x) for x in stdin.split()]\n        umbrellas.append([x, p])\n\n    min_fatigue = n * 10 ** 6 + 1\n\n    for s, e in segments:\n        if s <= e:\n            if s == a:\n                min_fatigue = min(min_fatigue, e)\n            else:\n                if s < a:\n                    min_fatigue = min(min_fatigue, e - s + a)\n                else:\n                    min_fatigue = min(min_fatigue, e - a + 1)\n\n    for x, p in umbrellas:\n        min_fatigue = min(min_fatigue, x + (n - x) * p)\n\n    if min_fatigue == n * 10 ** 6 + 1:\n        return \"-1\"\n\n    return str(min_fatigue)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4287,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, n, m = map(int, stdin.split())\n\n    segments = sorted([[int(l), int(r)] for l, r in stdin.split()])\n\n    def fall_from_segment(x):\n        tot = 0\n        for l, r in segments:\n            if x <= l:\n                tot += l - x\n                break\n            if r <= x:\n                tot += x - r\n                break\n        return tot\n\n    def fall_into_umbrella(x):\n        tot = 0\n        for l, r in segments:\n            if x < l:\n                tot += l - x\n                break\n            if x < r:\n                tot += x - r\n                break\n        return tot\n\n    tot = 0\n    x = 0\n    for i, (l, r) in enumerate(segments):\n        if i == 0:\n            tot = fall_from_segment(l)\n            if tot > 0:\n                x = r\n                break\n        else:\n            tot = fall_into_umbrella(x)\n            if tot > 0:\n                x = r\n                break\n    if x == 0:\n        return -1\n    return tot\n"
    },
    {
        "number": 4287,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, n, m = map(int, stdin.split())\n    rain = []\n    umbrellas = []\n    for i in range(n):\n        l, r = map(int, stdin.split())\n        rain.append((l, r))\n    for i in range(m):\n        x, p = map(int, stdin.split())\n        umbrellas.append((x, p))\n    umbrella_pos = -1\n    for i in range(len(umbrellas)):\n        x, p = umbrellas[i]\n        if umbrella_pos < x:\n            umbrella_pos = x\n    if umbrella_pos == -1:\n        return '-1'\n    umbrella_pos = umbrella_pos - 1\n    umbrella_pos = umbrella_pos if umbrella_pos % 2 == 0 else umbrella_pos + 1\n    return str(umbrella_pos)\n\n\nprint(solution(input()))\n\n\"\"\"\n\nfrom typing import List\n\nclass Solution:\n    def solve(self, n: int, a: int, m: int, rain: List[List[int]], umbrellas: List[List[int]]) -> str:\n        \n        if umbrella_pos == -1:\n            return '-1'\n        umbrella_pos = umbrella_pos - 1\n        umbrella_pos = umbrella_pos if umbrella_pos % 2 == 0 else umbrella_pos + 1\n        umbrella_pos = umbrella_pos if umbrella_pos <= a else umbrella_pos - 1\n        def swap(nums: List[int], i: int, j: int) -> None:\n            nums[i], nums[j] = nums[j], nums[i]\n\n        def find_rain_segments(i: int, j: int, rain: List[List[int]]) -> List[List[int]]:\n            rain_segments = []\n            if rain[i][0] < rain[j][0]:\n                rain_segments.append((rain[i][0], rain[i][1]))\n            if rain[i][1] > rain[j][1]:\n                rain_segments.append((rain[j][1], rain[j][0]))\n            return rain_segments\n\n        umbrella_segments = []\n        for i in range(umbrella_pos, a):\n            umbrella_segments.append((i, i + 1))\n\n        umbrella_segments.sort()\n        \n        \n        \n        def find_segments_in_umbrella(i: int, umbrella_segments: List[int]) -> List[List[int]]:\n            umbrella_segments.sort()\n            segments = []\n            for x, y in umbrella_segments:\n                if x >= i:\n                    if x + 1 <= y:\n                        segments.append((x, y))\n            return segments\n\n        \n        \n        \n        #print(umbrella_pos)\n        #print(umbrella_segments)\n        #print(umbrella_segments)\n        #print(segments)\n\n        def find_segments_without_umbrella(i: int, umbrella_segments: List[int]) -> List[List[int]]:\n            umbrella_segments.sort()\n            segments = []\n            for x, y in umbrella_segments:\n                if x > i:\n                    if x + 1 <= y:\n                        segments.append((x, y))\n            return segments\n\n        \n        \n        \n        def get_minimum_total_fatigue(umbrella_segments: List[int], umbrella_segments_without_umbrella: List[int]) -> int:\n            total_fatigue = 0\n            #print(umbrella_segments)\n            #print(umbrella_segments_without_umbrella)\n            for x, y in umbrella_segments:\n                total_fatigue += x * y\n            for x, y in umbrella_segments_without_umbrella:\n                total_fatigue += x * y\n            return total_fatigue\n\n        \n        \n        \n        umbrella_segments = find_segments_in_umbrella(umbrella_pos, umbrella_segments)\n        #print(umbrella_segments)\n        umbrella_segments_without_umbrella = find_"
    },
    {
        "number": 4288,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if A == B == C:\n        return 'Yes'\n    elif A == B or A == C or B == C:\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 4288,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if A == B and A == C and A!= B:\n        return \"Yes\"\n    else:\n        return \"No\"\n\nprint(solution(input()))"
    },
    {
        "number": 4288,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    if A == B and C!= A and A!= B and C!= A:\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 4288,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    #\n    # Your code here\n    #\n    a, b, c = stdin.split(\" \")\n    a = int(a)\n    b = int(b)\n    c = int(c)\n    if a == b and b!= c:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4288,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return (\"Yes\" if check_poor(stdin) else \"No\")\n\n\ndef"
    },
    {
        "number": 4288,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = list(map(int, stdin.split()))\n    if a == b:\n        if c!= a and c!= b:\n            print('Yes')\n        else:\n            print('No')\n    else:\n        print('No')"
    },
    {
        "number": 4288,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return 'No' if stdin == \"Yes\" else 'Yes'\n"
    },
    {
        "number": 4288,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if (a == b) and (b!= c) or (a!= b) and (a == c):\n        return 'Yes'\n    return 'No'"
    },
    {
        "number": 4288,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n\n    if A == C and A!= B:\n        return \"Yes\"\n    elif A == B and A!= C:\n        return \"Yes\"\n    elif A == C and A!= B:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4288,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A,B,C = map(int,stdin.split())\n    if (A==C and B!=C) or (B==C and A!=C) or (A==B and C!=A):\n        return 'Yes'\n    return 'No'"
    },
    {
        "number": 4289,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n\n    target = (int(arr[1]) - int(arr[0])) * 0.006\n    pos = -1\n    for i in range(1, n):\n        t = (int(arr[i]) - int(arr[i - 1])) * 0.006\n        if abs(t - target) < abs(pos - target):\n            pos = i\n    return str(pos)\n"
    },
    {
        "number": 4289,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n,t,*h = stdin.split()\n    n = int(n)\n    t = int(t)\n    h = list(map(int,h))\n    h = sorted(h)\n    i = 1\n    j = len(h)-1\n    m = (h[i]+h[j])/2\n    if t >= m:\n        i += 1\n        while i <= j and h[i] - h[j] >= t - m:\n            i += 1\n    else:\n        j -= 1\n        while i <= j and h[i] - h[j] >= t - m:\n            j -= 1\n    return str(i-1)\n"
    },
    {
        "number": 4289,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.split()\n    n = int(line[0])\n    a = int(line[1])\n    ls = line[2:]\n    # ls = list(map(int, line[2:]))\n    ls.sort(reverse=True)\n    index = 0\n    for i in range(len(ls)):\n        if ls[i] < a:\n            break\n        index = i\n    print(index + 1)\n    return None\n"
    },
    {
        "number": 4289,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    t = list(map(int, stdin.split()))\n    n = t[0]\n    a = t[1]\n    t = t[2:]\n    h = sorted(t, key=lambda h: (h, abs(h - a)))\n    print(h.index(a) + 1)\n    return\nsolution(input())\n"
    },
    {
        "number": 4289,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin[0])\n    T = int(stdin[1])\n    a = [int(stdin[i]) for i in range(2, 2 + N)]\n    t = []\n    for i in range(2, 2 + N):\n        t.append(T * pow(0.006, i - 2) + a[i - 2])\n    d = []\n    for i in range(2, 2 + N):\n        d.append(abs(t[i - 2] - a[i - 2]))\n    return str(d.index(min(d)) + 1)\n"
    },
    {
        "number": 4289,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    h = list(map(int, stdin.split()))\n    n = len(h)\n    min_c = h[0]\n    place = 0\n    for i in range(1, n):\n        if h[i] - min_c >= -5:\n            place = i\n            min_c = h[i]\n    return str(place)\n"
    },
    {
        "number": 4289,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def f(A):\n        return A / 0.006\n\n    N, T, A = list(map(int, stdin.split()))\n    n = list(map(int, stdin.split()))\n    n.sort()\n    m = []\n    for i in range(N):\n        m.append((f(n[i]) - T) * -1)\n    print(m.index(max(m)) + 1)\n"
    },
    {
        "number": 4289,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    N = int(stdin.strip())\n    A, H_arr = map(int, stdin.split())\n\n    H_arr = sorted(H_arr)\n    result = 0\n    for i in range(N):\n        temp = A - H_arr[i] * 0.006\n        if temp < 0:\n            continue\n        result = i\n        break\n    return str(result)"
    },
    {
        "number": 4289,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, T, A = map(int, stdin.split(\" \"))\n    h = list(map(int, stdin.split(\" \")[1:]))\n    h.sort(reverse=True)\n    possible = []\n    for i in range(N):\n        if abs(T - h[i]*0.006) < abs(T - A*0.006):\n            possible.append(i)\n    return str(possible[0])"
    },
    {
        "number": 4289,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    t, a, *h = map(int, stdin.split())\n    h = sorted(h, key=lambda x: abs(x-a))\n    return str(h.index(a))\n\nstdin = input()\nprint(solution(stdin))\n\n=========================================\n"
    },
    {
        "number": 4290,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N,M = list(map(int, stdin.split()))\n    print(2)\n    return str(2)"
    },
    {
        "number": 4290,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"The first method, which is actually the fastest and most efficient solution.\n    :param stdin: input string\n    :return: the answer as a string\n    \"\"\"\n    n, m = stdin.split()\n    n = int(n)\n    m = int(m)\n    counter = 0\n    for i in range(n+m+1):\n        if i % 2 == 0:\n            if i <= n:\n                counter += 1\n            if i <= m:\n                counter += 1\n        if i % 2!= 0:\n            if i <= n:\n                counter += 1\n            if i <= m:\n                counter += 1\n    return str(counter)\n\ndef"
    },
    {
        "number": 4290,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Brute force solution\n    \"\"\"\n    a, b = map(int, stdin.split())\n    sum = 0\n    for i in range(a):\n        for j in range(b):\n            if i + j == 0:\n                continue\n            if i + j == a + b:\n                break\n            if i % 2 == 1 and j % 2 == 0:\n                sum += 1\n            if i % 2 == 0 and j % 2 == 1:\n                sum += 1\n            if i % 2 == 0 and j % 2 == 0:\n                sum += 1\n    return sum\n\n\ndef"
    },
    {
        "number": 4290,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4290,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    ans = 0\n    \n    for i in range(N, N+M+1):\n        for j in range(M, M+N+1):\n            if (i+j)%2 == 0:\n                ans += 1\n                \n    return str(ans)\n\nstdin = '2 1'\nprint(solution(stdin))"
    },
    {
        "number": 4290,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n = int(stdin[0])\n    m = int(stdin[1])\n    return \"1\" if (n == m or n + m == 2 * n) and (n % 2 == 0 or m % 2 == 0) else \"0\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4290,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    [n, m] = list(map(int, stdin.split()))\n    if n % 2 == 0 and m % 2 == 1:\n        return str(1)\n    elif n % 2 == 1 and m % 2 == 0:\n        return str(1)\n    elif n % 2 == 0 and m % 2 == 0:\n        return str(0)\n    else:\n        return str(0)\n"
    },
    {
        "number": 4290,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = stdin.split()\n    n = int(n)\n    m = int(m)\n    count = 0\n    for i in range(n+m+1):\n        for j in range(i, n+m+1):\n            if (i % 2 == 0) and (j % 2 == 0):\n                count = count + 1\n                break\n    return str(count)"
    },
    {
        "number": 4290,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    if N % 2!= 0 or M % 2!= 0:\n        return '0'\n    return '1'\n"
    },
    {
        "number": 4290,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    # there are n+m balls, so we have n+m evens and m odd\n    evens = n + m\n    odds = m\n    ans = 0\n    for i in range(evens):\n        if i % 2 == 0:\n            ans += odds\n        evens -= 1\n        odds += 2\n    return str(ans)"
    },
    {
        "number": 4291,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = stdin.split()\n    n = int(n)\n    q = int(q)\n\n    s = stdin.split()[1]\n    d = {}\n\n    for i in range(n):\n        d[s[i]] = d.get(s[i], 0) + 1\n\n    for i in range(q):\n        l, r = stdin.split()\n        l, r = int(l), int(r)\n        print(d[s[l - 1]] - d[s[r - 1]])\n\n\nsolution(input())\n"
    },
    {
        "number": 4291,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.strip().split())\n    substring = stdin.strip()\n    count = 0\n\n    for i in range(q):\n        l, r = map(int, stdin.strip().split())\n        if substring[l - 1] == \"C\" and substring[r - 1] == \"C\":\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 4291,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    _, Q = stdin.split()\n    n = int(Q)\n    sub_strings = []\n    for _ in range(n):\n        sub_strings.append(stdin.split())\n    count = {}\n    for sub_string in sub_strings:\n        l_idx = int(sub_string[0]) - 1\n        r_idx = int(sub_string[1]) - 1\n        sub_string = stdin[l_idx:r_idx+1]\n        if sub_string not in count:\n            count[sub_string] = 0\n        count[sub_string] += 1\n    for i, sub_string in enumerate(sub_strings):\n        l_idx = int(sub_string[0]) - 1\n        r_idx = int(sub_string[1]) - 1\n        sub_string = stdin[l_idx:r_idx+1]\n        if sub_string in count:\n            print(count[sub_string])\n        else:\n            print(0)\nsolution(input())\n\n\"\"\""
    },
    {
        "number": 4291,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, q = list(map(int, stdin.split()))\n    s = stdin.split()\n    res = \"\"\n    for i in range(q):\n        l, r = list(map(int, stdin.split()))\n        s = stdin.split()\n        st = s[l-1] + s[r-1]\n        cnt = 0\n        for j in range(len(st)):\n            if st[j] == \"A\":\n                cnt += 1\n            elif st[j] == \"C\":\n                cnt += 0\n            elif st[j] == \"G\":\n                cnt += 0\n            else:\n                cnt += 0\n        res += str(cnt) + \"\\n\"\n    return res"
    },
    {
        "number": 4291,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, Q = map(int, stdin.split())\n    data = input()\n    for _ in range(Q):\n        l, r = map(int, stdin.split())\n        if data[l-1] == 'A' and data[r-1] == 'A':\n            count = 2\n        elif data[l-1] == 'A' and data[r-1] == 'C':\n            count = 1\n        elif data[l-1] == 'A' and data[r-1] == 'T':\n            count = 0\n        elif data[l-1] == 'C' and data[r-1] == 'A':\n            count = 1\n        elif data[l-1] == 'C' and data[r-1] == 'C':\n            count = 2\n        elif data[l-1] == 'C' and data[r-1] == 'T':\n            count = 0\n        elif data[l-1] == 'T' and data[r-1] == 'A':\n            count = 1\n        elif data[l-1] == 'T' and data[r-1] == 'C':\n            count = 2\n        elif data[l-1] == 'T' and data[r-1] == 'T':\n            count = 3\n        print(count)\n    return ''\n"
    },
    {
        "number": 4291,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, Q = map(int, stdin.split())\n    S = stdin.split()[1]\n\n    def dfs(start, end):\n        if start == end:\n            return 0\n        dp = [[0] * (end + 1) for _ in range(N + 1)]\n        dp[0][0] = 1\n        for j in range(1, end + 1):\n            dp[0][j] = j\n        for i in range(1, N + 1):\n            dp[i][0] = 1\n        for i in range(1, N + 1):\n            for j in range(1, end + 1):\n                dp[i][j] = dp[i - 1][j]\n                if S[i - 1] == S[j - 1]:\n                    dp[i][j] = min(dp[i][j], dp[i - 1][j - 1] + 1)\n\n        return dp[N][end]\n\n    return '\\n'.join(map(str, map(dfs, range(1, N + 1), range(1, N + 1))))\n"
    },
    {
        "number": 4291,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, Q = (int(s) for s in stdin.split())\n    S = stdin.split()[1]\n    string_l = int(stdin.split()[2])\n    string_r = int(stdin.split()[3])\n    ans = list(0 for _ in range(Q))\n\n    for i in range(Q):\n        l, r = (int(x) for x in stdin.split()[i + 4].split())\n        count = 0\n        for j in range(l - 1, r):\n            if S[j] == 'C':\n                count += 1\n        ans[i] = count\n\n    return \"\\n\".join(map(str, ans))\n\n\ndef"
    },
    {
        "number": 4291,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, q = list(map(int, stdin.split()))\n\n    substring = stdin.split()\n\n    for i in range(1, n + 1):\n        l = int(substring[i - 1][0])\n        r = int(substring[i - 1][1])\n        print(substring[i].count('A') * (r - l + 1) * (n - r))\n\n\nsolution(input())\n"
    },
    {
        "number": 4291,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, Q = map(int, stdin.split())\n    answers = []\n    for i in range(Q):\n        L, R = map(int, stdin.split())\n        S = stdin[L - 1:R]\n        answers.append(find_substring(S))\n    return '\\n'.join(map(str, answers))\n\ndef"
    },
    {
        "number": 4291,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    N, Q = stdin.split()\n    N = int(N)\n    Q = int(Q)\n\n    string_list = stdin.split(\"\\n\")\n\n    string_list.pop()\n    string_list.pop()\n\n    l = 1\n    r = N\n    l_index = 0\n    r_index = 0\n\n    for i in range(Q):\n        l_index, r_index = map(int, stdin.split())\n        l = min(l, l_index)\n        r = max(r, r_index)\n\n    sub_string = \"\".join(string_list[l-1 : r])\n    count = 0\n    for i in sub_string:\n        if i == \"A\":\n            count += 1\n        elif i == \"C\":\n            count += 1\n        elif i == \"G\":\n            count += 1\n        elif i == \"T\":\n            count += 1\n\n    return str(count)\n\nsolution('''8 3\nACACTACG\n3 7\n2 3\n1 8\n''')\n"
    },
    {
        "number": 4292,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    prices = list(map(int, stdin.split()))\n    # print(n,k,prices)\n    if n == k:\n        return sum(prices)\n    elif k == 1:\n        return min(prices)\n    else:\n        left_sum = 0\n        for i in range(n):\n            if prices[i] <= prices[i + 1]:\n                left_sum += prices[i]\n            else:\n                break\n        right_sum = 0\n        for i in range(n - 1, -1, -1):\n            if prices[i] <= prices[i - 1]:\n                right_sum += prices[i]\n            else:\n                break\n        return min(left_sum + prices[k], right_sum + prices[k])\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4292,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    p = sorted([int(x) for x in stdin.split()])\n    dp = [0 for _ in range(K+1)]\n    for i in range(len(p)):\n        for j in range(K+1):\n            if i == 0:\n                dp[j] = p[i] * j\n            else:\n                dp[j] = max(dp[j], dp[j-1]) + p[i] * j\n    return str(dp[-1])"
    },
    {
        "number": 4292,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    total, K, *price = map(int, stdin.split())\n    return min(map(lambda x, y: x + y, price[:K], price[K:]), key=lambda x: x * total)"
    },
    {
        "number": 4292,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    p = list(map(int, stdin.split()))\n    p.sort()\n    return str(int(sum(p[:k])))\n"
    },
    {
        "number": 4292,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    prices = list(map(int, stdin.split()))\n    print(min([sum(prices[i:i + k]) for i in range(0, len(prices), k)]))\n    return \"NO\""
    },
    {
        "number": 4292,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Take in input in stdin, which is input of the shop as a string.\n    Return an integer representing the minimum possible total price of fruits.\n    \"\"\"\n    N, K = list(map(int, stdin.split()))\n    fruits = list(map(int, stdin.split()))\n    min_price = 0\n    for i in range(N):\n        if fruits[i] < min_price:\n            min_price = fruits[i]\n    return str(min_price*K)\n"
    },
    {
        "number": 4292,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    p_1, p_2 = map(int, stdin.split())\n    return str(sum([min(p_i, K) for p_i in range(p_1, p_2 + 1)]))\n"
    },
    {
        "number": 4292,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    prices = list(map(int, stdin.split()))\n    min_price = sum(prices[:k])\n    max_price = sum(prices[:k]) + max(prices[:k])\n    if min_price > max_price:\n        return str(max_price)\n    else:\n        return str(min_price)\n\nstdin = '5 3\\n50 100 80 120 80'\nprint(solution(stdin))\n\ndef"
    },
    {
        "number": 4292,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    (n, k) = (int(i) for i in stdin.split(' '))\n    prices = stdin.split(' ')\n\n    prices = [int(i) for i in prices]\n    total = 0\n    \n    prices.sort(reverse=True)\n    prices = prices[:k]\n    print(prices)\n    \n    for i in range(k):\n        total += prices[i]\n    \n    return str(total)"
    },
    {
        "number": 4292,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    --- Day 1: The Tyranny of the Rocket Equation ---\n    Santa has become stranded at the edge of the Solar System while delivering presents to other planets! To accurately calculate his position in space, safely align his warp drive, and return to Earth in time to save Christmas, he needs you to bring him measurements from fifty stars.\n\n    Collect stars by solving puzzles. Two puzzles will be made available on each day in the Advent calendar; the second puzzle is unlocked when you complete the first. Each puzzle grants one star. Good luck!\n\n    The Elves quickly load you into a spacecraft and prepare to launch.\n\n    At the first Go / No Go poll, every Elf is Go until the Fuel Counter-Upper. They haven't determined the amount of fuel required yet.\n\n    Fuel required to launch a given module is based on its mass. Specifically, to find the fuel required for a module, take its mass, divide by three, round down, and subtract 2.\n\n    For example:\n\n    For a mass of 12, divide by 3 and round down to get 4, then subtract 2 to get 2.\n    For a mass of 14, dividing by 3 and rounding down still yields 4, so the fuel required is also 2.\n    For a mass of 1969, the fuel required is 654.\n    For a mass of 100756, the fuel required is 33583.\n\n    The Fuel Counter-Upper needs to know the total fuel requirement. To find it, individually calculate the fuel needed for the mass of each module (your puzzle input), then add together all the fuel values.\n\n    What is the sum of the fuel requirements for all of the modules on your spacecraft?\n\n    --- Part Two ---\n    During the second Go / No Go poll, the Elf in charge of the Rocket Equation Double-Checker stops the launch sequence. Apparently, you forgot to include additional fuel for the fuel you just added.\n\n    Fuel itself requires fuel just like a module - take its mass, divide by three, round down, and subtract 2. However, that fuel also requires fuel, and that fuel requires fuel, and so on. Any mass that would require negative fuel should instead be treated as if it requires zero fuel; the remaining mass, if any, is instead handled by wishing really hard, which has no mass and is outside the scope of this calculation.\n\n    So, for each module mass, calculate its fuel and add it to the total. Then, treat the fuel amount you just calculated as the input mass and repeat the process, continuing until a fuel requirement is zero or negative. For example:\n\n    A module of mass 14 requires 2 fuel. This fuel requires no further fuel (2 divided by 3 and rounded down is 0, which would call for a negative fuel), so the total fuel required is still just 2.\n    At first, a module of mass 1969 requires 654 fuel. Then, this fuel requires 216 more fuel (654 / 3 - 2). 216 then requires 70 more fuel, which requires 21 fuel, which requires 5 fuel, which requires no further fuel. So, the total fuel required for a module of mass 1969 is 654 + 216 + 70 + 21 + 5 = 966.\n    The fuel required by a module of mass 100756 and its fuel is: 33583 + 11192 + 3728 + 1240 + 411 + 135 + 43 + 12 + 2 = 50346.\n    What is the sum of the fuel requirements for all of the modules on your spacecraft when also taking into account the mass of the added fuel? (Calculate the fuel requirements for each module separately, then add them all up at the end.)\n\n    --- Part Two ---\n    While collecting the fuel for the fuel itself, you also need to collect the fuel required to launch your module. This is because many of the gravity assist devices on the ship don't work with gravity. Instead, they use magnetic force.\n    \n    Launch force is 9.81 m/s due to the speed of light.\n    Every point requires 6 fuel.\n    The fuel required to launch a module is the difference between its mass and the sum of the fuel requirements for its mass and the fuel required to launch the fuel itself. (Don't include the fuel required to launch the fuel itself.)\n    For example:\n\n    A module of mass 14 requires 2 fuel. This fuel requires no further fuel (2 divided by 3 and rounded down is 0, which would call for a negative fuel), so the total fuel required is still just 2.\n    At first, a module of mass 1969 requires 654 fuel. Then, this fuel requires 216 more fuel (654 / 3 - 2). 216 then requires 70 more fuel, which requires 21 fuel, which requires 5 fuel, which requires no further fuel. So, the total fuel required for a module of mass 1969 is 654 + 216 + 70 + 21 + 5 = 966.\n    The fuel required by a module of mass 100756 and its fuel is: 33583 + 11192 + 3728 + 1240 + 411 + 135 + 43 + 12 + 2 = 50346.\n    The total fuel required by your ship is the sum of the fuel requirements for all its modules.\n\"\"\"\nfrom typing import List\n\n\ndef"
    },
    {
        "number": 4293,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    P, Q, R = map(int, stdin.split())\n    return \"The sum of the flight times in the route A \\rightarrow B \\rightarrow C: {} hours\".format(min(\n        P + Q, Q + R, R + P))"
    },
    {
        "number": 4293,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    P, Q, R = map(int, stdin.strip().split())\n    print((P + Q + R) // 3)\n"
    },
    {
        "number": 4293,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    airports, hours = stdin.split(\"\\n\")\n    # airport 1 to airport 2\n    # one_way = int(airports[0]) + int(airports[1])\n    # # airport 1 to airport 3\n    # one_way += int(airports[1]) + int(airports[2])\n    # # airport 2 to airport 1\n    # one_way += int(airports[0]) + int(airports[2])\n    # # airport 2 to airport 3\n    # one_way += int(airports[1]) + int(airports[2])\n    # # airport 3 to airport 1\n    # one_way += int(airports[0]) + int(airports[1])\n    # # airport 3 to airport 2\n    # one_way += int(airports[1]) + int(airports[0])\n    #\n    # # airport 1 to airport 4\n    # one_way += int(airports[0]) + int(airports[3])\n    # # airport 2 to airport 4\n    # one_way += int(airports[1]) + int(airports[3])\n    # # airport 3 to airport 4\n    # one_way += int(airports[2]) + int(airports[3])\n    # # airport 4 to airport 1\n    # one_way += int(airports[3]) + int(airports[0])\n    # # airport 4 to airport 2\n    # one_way += int(airports[3]) + int(airports[1])\n    #\n    # # airport 1 to airport 4\n    # one_way += int(airports[0]) + int(airports[4])\n    # # airport 2 to airport 4\n    # one_way += int(airports[1]) + int(airports[4])\n    # # airport 3 to airport 4\n    # one_way += int(airports[2]) + int(airports[4])\n    # # airport 4 to airport 1\n    # one_way += int(airports[4]) + int(airports[0])\n    # # airport 4 to airport 2\n    # one_way += int(airports[4]) + int(airports[1])\n    #\n    #\n    # # airport 1 to airport 2\n    # one_way += int(airports[0]) + int(airports[2])\n    # # airport 2 to airport 1\n    # one_way += int(airports[1]) + int(airports[0])\n    # # airport 3 to airport 2\n    # one_way += int(airports[2]) + int(airports[1])\n    # # airport 4 to airport 2\n    # one_way += int(airports[3]) + int(airports[2])\n    # # airport 4 to airport 3\n    # one_way += int(airports[4]) + int(airports[3])\n    #\n    # # airport 1 to airport 4\n    # one_way += int(airports[0]) + int(airports[4])\n    # # airport 2 to airport 4\n    # one_way += int(airports[1]) + int(airports[4])\n    # # airport 3 to airport 4\n    # one_way += int(airports[2]) + int(airports[4])\n    # # airport 4 to airport 1\n    # one_way += int(airports[3]) + int(airports[0])\n    # # airport 4 to airport 3\n    # one_way += int(airports[4]) + int(airports[3])\n    #\n    # # airport 1 to airport 4\n    # one_way += int(airports[0]) + int(airports[4])\n    # # airport 2 to airport 4\n    # one_way += int(airports[1]) + int(airports[4])\n    # # airport 3 to airport 4\n    # one_way += int(airports[2]) + int(airports[4])\n    # # airport 4 to airport 1\n    # one_way += int(airports[3]) + int(airports[0])\n    # # airport 4 to airport 3\n    # one_way += int(airports[4]) + int(airports[3])\n    #\n    # # airport 1 to airport 4\n    # one_way += int(airports[0]) + int(airports[4])\n    # # airport 2 to airport 4\n    # one_way += int(airports[1]) + int(airports[4])\n    # # airport 3 to airport 4\n    # one_way += int(airports[2]) + int(airports[4])\n    # # airport 4 to airport 1\n    # one_way += int(airports[3]) + int(airports[0])\n    # # airport 4 to airport 3\n    # one_way += int(airports[4]) + int(airports[3])\n    #\n    #\n    # # airport 1 to airport 2\n    # one_way += int(airports[0]) + int(airports[2])\n    # # airport 2 to airport 1\n    # one_way += int(airports[1]) + int(airports[0])\n    # # airport 3 to airport 2\n    # one_way += int(airports[2]) + int(airports[1])\n    # # airport 4 to airport 2\n    # one_way += int(airports[3]) + int(airports[2])\n    # # airport 4 to airport 3\n    # one_way += int(airports[4]) + int(airports[3])\n    #\n    # # airport 1 to airport 2\n    # one_way += int(airports[0]) + int(airports[2])\n    # # airport 2 to airport 1\n    # one_way += int(airports[1]) + int(airports[0])\n    # # airport 3 to airport 2\n    # one_way += int(airports[2]) + int(airports[1])\n    # # airport 4 to airport 2\n    # one_way += int(airports[3]) + int(airports[2])\n    # # airport 4 to airport 3\n    # one_way += int(airports[4]) + int(airports[3])\n    #\n    # # airport 1 to airport 2\n    # one_way += int(airports[0]) + int(airports[2])\n    # # airport 2 to airport 1\n    # one_way += int(airports[1]) + int(airports[0])\n    # # airport 3 to airport 2\n    # one_way += int(airports[2]) + int(airports[1])\n    # # airport 4 to airport 2\n    # one_way += int(airports[3]) + int(airports[2])\n    # # airport 4 to airport 3\n    # one_way += int(airports[4]) + int(airports[3])\n    #\n    # # airport 1 to airport 2\n    # one_way += int(airports[0]) + int(airports[2])\n    # # airport 2 to airport 1\n    # one_way"
    },
    {
        "number": 4293,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    a, b, c, d, e = stdin.split(\" \")\n    \n    # In order to make it easier to understand, we will do all of the calculations in terms of hours instead of minutes.\n    # We will also skip all of the fractions, since I am not going to worry about it right now.\n    # We will also skip the last equation because there are no flights in that direction.\n    p = int(a) * 1.0\n    q = int(b) * 1.0\n    r = int(c) * 1.0\n    pq = p + q\n    rq = r + q\n    pqr = p + q + r\n    \n    # There is no flight from A to B, so we will skip it\n    print(pq, rq, pqr)\n    \n    return (pq, rq, pqr)\n"
    },
    {
        "number": 4293,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    p, q, r = map(int, stdin.split())\n    s = p + q + r\n    m = min(s, p + q + r, p + q + r, p + r + q)\n    if m == s:\n        return str(m)\n    else:\n        return str(m) + \" hours\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4293,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin.split())!= 3:\n        return \"Invalid Input\"\n    else:\n        P, Q, R = stdin.split()\n        P, Q, R = int(P), int(Q), int(R)\n        if (P < 1 or Q < 1 or R < 1):\n            return \"Invalid Input\"\n        else:\n            return str(min(P + Q, Q + R, R + P))\n"
    },
    {
        "number": 4293,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    total = 0\n    data = stdin.split(\" \")\n\n    for i in range(0, 3):\n        total += int(data[i])\n    return str(total)\n"
    },
    {
        "number": 4293,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    flights = stdin.split(' ')\n    p = int(flights[0])\n    q = int(flights[1])\n    r = int(flights[2])\n    print(p + q + r)\n    return"
    },
    {
        "number": 4293,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    p, q, r = stdin.split(' ')\n    p = int(p)\n    q = int(q)\n    r = int(r)\n    return f'The sum of the flight times in the route {p} \\rightarrow {q} \\rightarrow {r}: {p + q + r} hours'\n"
    },
    {
        "number": 4293,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    p, q, r = a[0], a[1], a[2]\n    dp = [0, p, 0, q, 0, 0, 0]\n    dp[0] = dp[1] + p\n    dp[2] = dp[3] + q\n    dp[4] = dp[6] + r\n    dp[5] = dp[7] + r\n    dp[8] = dp[5] + r\n    for i in range(2, 9, 1):\n        dp[i] = min(dp[i - 2] + p, dp[i - 1] + q, dp[i - 3] + r)\n    return str(dp[8])\n"
    },
    {
        "number": 4294,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, a = map(int, stdin.split())\n    if x < a:\n        return str(0)\n    return str(10)\n"
    },
    {
        "number": 4294,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x, a = map(int, stdin.split())\n    if x < a:\n        return '0'\n    else:\n        return '10'\n    # Write your code here.\n    # Please do not modify anything"
    },
    {
        "number": 4294,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(input)\n"
    },
    {
        "number": 4294,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    nums = stdin.split()\n\n    x = int(nums[0])\n    a = int(nums[1])\n\n    if x < a:\n        return \"0\"\n\n    return \"10\""
    },
    {
        "number": 4294,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4294,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.split()[1])\n    b = int(stdin.split()[2])\n    if a < b:\n        return \"0\"\n    else:\n        return \"10\"\n\nsolution(\"3 5\")"
    },
    {
        "number": 4294,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x, a = stdin.split()\n    return x +'='+ str(10 if int(x) < int(a) else 0)\n"
    },
    {
        "number": 4294,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    X, A = stdin.split()\n    X = int(X)\n    A = int(A)\n\n    if X < A:\n        return '0'\n    else:\n        return '10'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4294,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x, a = map(int, stdin.split())\n    if x < a:\n        return '0'\n    else:\n        return '10'\n"
    },
    {
        "number": 4294,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\" \")\n    return \"0\" if stdin[0] < stdin[1] else \"10\"\n\nstdin = input()\nprint(solution(stdin))\n"
    },
    {
        "number": 4295,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    \n    min_val = n\n    n_arr = list(map(abs, n))\n\n    for i in range(len(n_arr)):\n        if n_arr[i] > k:\n            min_val = n_arr[i] - k\n            break\n\n    if min_val > n:\n        min_val = n\n    \n    return str(min_val)"
    },
    {
        "number": 4295,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = list(map(int, stdin.split(\" \")))\n    N, K = stdin[0], stdin[1]\n    print(min(abs(N - K), abs(N + K)))\n    return \"\"\n"
    },
    {
        "number": 4295,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, K = (int(x) for x in stdin.split())\n    return str(abs(N - K))\n"
    },
    {
        "number": 4295,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.strip().split())\n    print(min(N - i for i in range(K, abs(N) + 1)))\n    return \"\"\n"
    },
    {
        "number": 4295,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    ans = N\n    while True:\n        if (ans - K) % 2 == 0:\n            break\n        ans -= 1\n    return str(ans)"
    },
    {
        "number": 4295,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Your code goes here\n    \"\"\"\n    n, k = map(int, stdin.split())\n    return str(abs(n-k))"
    },
    {
        "number": 4295,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    result = N\n    while result >= K:\n        result -= abs(result - K)\n    return str(result)\n"
    },
    {
        "number": 4295,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    n = int(stdin[0])\n    k = int(stdin[1])\n    print(int(n - k))\n    return \"ok\"\n"
    },
    {
        "number": 4295,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.strip().split()\n    n = int(n)\n    k = int(k)\n    if n == 0:\n        print(k)\n    if n > 0:\n        if n > k:\n            print(n - k)\n        elif n == k:\n            print(0)\n        else:\n            print(n - k)\n    return ''"
    },
    {
        "number": 4295,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, K = stdin.split()\n    N = int(N)\n    K = int(K)\n\n    result = abs(N - K)\n\n    return str(result)"
    },
    {
        "number": 4296,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(' ')\n    a = int(stdin[0])\n    b = int(stdin[1])\n    c = int(stdin[2])\n    if a+b+c > 22:\n        return 'bust'\n    return 'win'\n\ndef"
    },
    {
        "number": 4296,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A_1, A_2, A_3 = stdin\n    if A_1+A_2+A_3>=22:\n        print(\"bust\")\n    else:\n        print(\"win\")\nsolution(input())\n\n'''\n\n\ndef"
    },
    {
        "number": 4296,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A_1, A_2, A_3 = map(int, stdin.split())\n    if A_1 + A_2 + A_3 > 22:\n        return 'bust'\n    elif A_1 + A_2 + A_3 < 22:\n        return 'win'\n    else:\n        return 'tie'\n"
    },
    {
        "number": 4296,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A_1, A_2, A_3 = list(map(int, stdin.split()))\n    if A_1 + A_2 + A_3 >= 22:\n        print('bust')\n    else:\n        print('win')\nsolution(input())\n"
    },
    {
        "number": 4296,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a1, a2, a3 = [int(x) for x in stdin.split()]\n    if a1 + a2 + a3 >= 22:\n        return \"bust\"\n    return \"win\"\n"
    },
    {
        "number": 4296,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    sum = stdin.split()\n    sum = list(map(int, sum))\n    if sum[0] + sum[1] + sum[2] >= 22:\n        return 'bust'\n    else:\n        return 'win'\n\nprint(solution(input()))"
    },
    {
        "number": 4296,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a1, a2, a3 = stdin.split()\n    # print(a1,a2,a3)\n    if int(a1) + int(a2) + int(a3) >= 22:\n        print(\"bust\")\n    else:\n        print(\"win\")\n"
    },
    {
        "number": 4296,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A_1, A_2, A_3 = map(int, stdin.split())\n    if A_1+A_2+A_3 > 22:\n        return \"bust\"\n    else:\n        return \"win\"\n\nstdin = input()\nresult = solution(stdin)\nprint(result)\n"
    },
    {
        "number": 4296,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    if sum(a) >= 22:\n        return \"bust\"\n    else:\n        return \"win\"\n"
    },
    {
        "number": 4296,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A = list(map(int, stdin.split()))\n    return 'bust' if sum(A) >= 22 else 'win'\n"
    },
    {
        "number": 4297,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Parameters:\n        stdin (str): input\n    Returns:\n        str: output\n    \"\"\"\n    n = int(stdin)\n    # if(n==1):\n    #     return 2\n    for i in range(3, n):\n        if((n % i) == 0):\n            return i"
    },
    {
        "number": 4297,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time: O(log (n))\n    Space: O(1)\n    \"\"\"\n    divisible = False\n    start = 1\n    while not divisible:\n        for num in range(start, start + N):\n            if num % 2 == 0 and num % N == 0:\n                divisible = True\n                start += 1\n                break\n        if divisible:\n            start += 1\n    return start\n"
    },
    {
        "number": 4297,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    return answer\n    \"\"\"\n    N = int(stdin)\n    x = 2\n    while x <= N:\n        if N % x == 0:\n            y = N / x\n            if x % y == 0:\n                return x\n        x += 1\n    return N"
    },
    {
        "number": 4297,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N: int = int(stdin)\n    i = 1\n    while i <= N:\n        if i % 2 == 0 and i % N == 0:\n            return i\n        i += 1\n    return i\n"
    },
    {
        "number": 4297,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    import sys\n    stdin = sys.stdin.read()\n    stdin = stdin.rstrip()\n    stdin = stdin.split()\n    N = int(stdin[0])\n    print(min(N*2, 2*N))"
    },
    {
        "number": 4297,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    ans = 1\n    while ans < N:\n        if (2 * ans) % N == 0:\n            ans += 1\n            continue\n        elif (3 * ans) % N == 0:\n            ans += 1\n            continue\n        else:\n            print(ans)\n            return\n"
    },
    {
        "number": 4297,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    result = max(2, int(stdin))\n    # result = 2\n    for n in range(2, int(stdin)):\n        if result % n == 0:\n            # result = n\n            result = n\n    return result\n\nsolution('12')\n\n\ndef"
    },
    {
        "number": 4297,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(n + 1):\n        if i % 2 == 0 and i % n == 0:\n            return str(i)\n\ndef"
    },
    {
        "number": 4297,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Modular exponentiation: (N**(1/2))%2\n    # N is the number of times 2 is raised to the power (1/2)\n    return str((int(stdin)**(1/2))%2)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4297,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 == 0 and n % 3 == 0:\n        return n\n    else:\n        return -1\n\ndef"
    },
    {
        "number": 4298,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, D = map(int, stdin.split())\n    return N - D"
    },
    {
        "number": 4298,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, d = map(int, stdin.strip().split())\n    if n == 0:\n        return str(0)\n    d = d + 2\n    pos_list = [(n - i, i) for i in range(1, n + 1)]\n    pos_list.sort(key=lambda x: x[0])\n    res = 1\n    for i in range(1, d + 1):\n        res = max(res, pos_list[i - 1][0] - pos_list[i - 1][1] + 1)\n    return str(res)"
    },
    {
        "number": 4298,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    [N, D] = list(map(int, stdin.split()))\n    print(D//2)\n"
    },
    {
        "number": 4298,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    _, N, D = stdin.split(\" \")\n    N = int(N)\n    D = int(D)\n\n    # These are the thresholds of the trees.\n    lower_bound = 1\n    upper_bound = N\n\n    # This is the number of inspectors needed to achieve the objective.\n    # So, we calculate the number of inspectors needed to achieve the objective.\n    number_of_inspectors = (D - 1) * 2\n    if number_of_inspectors < 1:\n        return \"0\"\n\n    # We need to know how many inspectors are actually needed.\n    # We calculate the number of inspectors needed for the objective.\n    number_of_inspectors = (D - 1) * 2\n    # We make sure that number_of_inspectors will be at least 1.\n    number_of_inspectors = max(number_of_inspectors, 1)\n\n    # We can achieve the objective by placing an inspector under any of the N trees.\n    # So, we calculate the total number of inspectors that we need to deploy to achieve the objective.\n    number_of_inspectors = (D - 1) * 2\n\n    # We can achieve the objective by placing an inspector under any of the N trees.\n    # So, we calculate the total number of inspectors that we need to deploy to achieve the objective.\n    number_of_inspectors = (D - 1) * 2\n\n    # We make sure that number_of_inspectors will be at least 1.\n    number_of_inspectors = max(number_of_inspectors, 1)\n\n    # We can achieve the objective by placing an inspector under any of the N trees.\n    # So, we calculate the total number of inspectors that we need to deploy to achieve the objective.\n    number_of_inspectors = (D - 1) * 2\n\n    # We can achieve the objective by placing an inspector under any of the N trees.\n    # So, we calculate the total number of inspectors that we need to deploy to achieve the objective.\n    number_of_inspectors = (D - 1) * 2\n\n    # We make sure that number_of_inspectors will be at least 1.\n    number_of_inspectors = max(number_of_inspectors, 1)\n\n    # We can achieve the objective by placing an inspector under any of the N trees.\n    # So, we calculate the total number of inspectors that we need to deploy to achieve the objective.\n    number_of_inspectors = (D - 1) * 2\n\n    # We can achieve the objective by placing an inspector under any of the N trees.\n    # So, we calculate the total number of inspectors that we need to deploy to achieve the objective.\n    number_of_inspectors = (D - 1) * 2\n\n    # We make sure that number_of_inspectors will be at least 1.\n    number_of_inspectors = max(number_of_inspectors, 1)\n\n    # We can achieve the objective by placing an inspector under any of the N trees.\n    # So, we calculate the total number of inspectors that we need to deploy to achieve the objective.\n    number_of_inspectors = (D - 1) * 2\n\n    # We can achieve the objective by placing an inspector under any of the N trees.\n    # So, we calculate the total number of inspectors that we need to deploy to achieve the objective.\n    number_of_inspectors = (D - 1) * 2\n\n    # We make sure that number_of_inspectors will be at least 1.\n    number_of_inspectors = max(number_of_inspectors, 1)\n\n    # We can achieve the objective by placing an inspector under any of the N trees.\n    # So, we calculate the total number of inspectors that we need to deploy to achieve the objective.\n    number_of_inspectors = (D - 1) * 2\n\n    # We can achieve the objective by placing an inspector under any of the N trees.\n    # So, we calculate the total number of inspectors that we need to deploy to achieve the objective.\n    number_of_inspectors = (D - 1) * 2\n\n    # We make sure that number_of_inspectors will be at least 1.\n    number_of_inspectors = max(number_of_inspectors, 1)\n\n    # We can achieve the objective by placing an inspector under any of the N trees.\n    # So, we calculate the total number of inspectors that we need to deploy to achieve the objective.\n    number_of_inspectors = (D - 1) * 2\n\n    # We can achieve the objective by placing an inspector under any of the N trees.\n    # So, we calculate the total number of inspectors that we need to deploy to achieve the objective.\n    number_of_inspectors = (D - 1) * 2\n\n    # We make sure that number_of_inspectors will be at least 1.\n    number_of_inspectors = max(number_of_inspectors, 1)\n\n    # We can achieve the objective by placing an inspector under any of the N trees.\n    # So, we calculate the total number of inspectors that we need to deploy to achieve the objective.\n    number_of_inspectors = (D - 1) * 2\n\n    # We can achieve the objective by placing an inspector under any of the N trees.\n    # So, we calculate the total number of inspectors that we need to deploy to achieve the objective.\n    number_of_inspectors = (D - 1) * 2\n\n    # We make sure that number_of_inspectors will be at least 1.\n    number_of_inspectors = max(number_of_inspectors, 1)\n\n    # We can achieve the objective by placing an inspector under any of the N trees.\n    # So, we calculate the total number of inspectors that we need to deploy to achieve the objective.\n    number_of_inspectors = (D - 1) * 2\n\n    # We can achieve the objective by placing an inspector under any of the N trees.\n    # So, we calculate the total number of inspectors that we need to deploy to achieve the objective.\n    number_of_inspectors = (D - 1) * 2\n\n    # We make sure that number_of_inspectors will be at least 1.\n    number_of_inspectors = max(number_of_inspectors, 1)\n\n    # We can achieve the objective by placing an inspector under any of the N trees.\n    # So, we calculate the total number of inspectors that we need to deploy to achieve the objective.\n    number_of_inspectors = (D - 1) * 2\n\n    # We can achieve the objective by placing an inspector under any of the N trees.\n    # So, we calculate the total number of inspectors that we need to deploy to achieve the objective.\n    number_of_inspectors = (D - 1) * 2\n\n    # We make sure that number_of_inspectors will be at least 1.\n    number_of_inspectors = max(number_of_inspectors, 1)\n\n    # We can achieve the objective by placing an inspector under any of the N trees.\n    # So, we calculate the total number of inspectors that we need to deploy to achieve the objective.\n    number_of_inspectors = (D - 1) * 2\n\n    # We can achieve the objective by placing an inspector under any of the N trees.\n    # So, we calculate the total number of inspectors that we need to deploy to achieve the objective.\n    number_of_inspectors = (D - 1) * 2\n\n    # We make sure that number_of_inspectors will be at least 1.\n    number_of_inspectors = max(number_of_inspectors, 1)\n\n    # We can"
    },
    {
        "number": 4298,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('''3 10\n   ... 1 9 3\n   ... 3 2 9\n   ... 2 5 7\n   ... 4 8 1\n   ... 3 1 4\n   ... 5 6 8\n   ... 2 9 6\n   ... 6 5 3\n   ... 9 6 1\n   ... 2 4 3\n   ... 1 6 3\n   ... 6 3 9\n   ... 5 5 3\n   ... 4 4 8\n   ... 9 1 5\n   ... 5 3 5\n   ... 2 1 9\n   ... 9 2 4\n   ... 1 1 4\n   ... 4 9 4\n   ... 5 1 2\n   ... 4 5 3\n   ... 6 8 7\n   ... 2 5 3\n   ... 2 6 6\n   ... 7 4 3\n   ... 9 3 8\n   ... 2 6 7\n   ... 7 6 1\n   ... 1 2 1\n   ... 8 9 5\n   ... 5 2 6\n   ... 8 1 8\n   ... 9 5 5\n   ... 1 5 2\n   ... 1 9 1\n   ... 8 1 2\n   ... 4 4 4\n   ... 6 5 6\n   ... 5 1 5\n   ... 3 4 3\n   ... 2 7 2\n   ... 2 5 8\n   ... 1 7 2\n   ... 7 6 3\n   ... 3 6 7\n   ... 8 3 4\n   ... 4 3 2\n   ... 2 7 6\n   ... 7 7 7\n   ... 5 7 3\n   ... 9 4 6\n   ... 7 6 3\n   ... 5 7 4\n   ... 9 2 5\n   ... 3 7 7\n   ... 5 5 6\n   ... 2 3 2\n   ... 1 5 9\n   ... 9 1 5\n   ... 2 4 9\n   ... 9 3 1\n   ... 4 4 5\n   ... 6 1 8\n   ... 9 5 2\n   ... 6 1 6\n   ... 1 4 4\n   ... 4 5 6\n   ... 7 5 8\n   ... 5 1 4\n   ... 6 4 4\n   ... 6 2 1\n   ... 7 6 5\n   ... 5 3 1\n   ... 8 8 7\n   ... 4 3 3\n   ... 5 8 7\n   ... 4 9 2\n   ... 1 5 5\n   ... 2 6 5\n   ... 3 6 7\n   ... 9 9 2\n   ... 4 6 9\n   ... 8 1 4\n   ... 8 3 3\n   ... 2 8 4\n   ... 7 5 5\n   ... 1 3 6\n   ... 4 3 7\n   ... 1 3 3\n   ... 9 3 5\n   ... 9 5 3\n   ... 2 9 7\n   ... 5 7 5\n   ... 3 3 5\n   ... 7 1 5\n   ... 2 6 6\n   ... 3 3 2\n   ... 4 5 6\n   ... 8 6 1\n   ... 1 5 8\n   ... 9 1 4\n   ... 8 5 1\n   ... 5 5 1\n   ... 1 7 6\n   ... 2 6 6\n   ... 4 2 6\n   ... 8 7 3\n   ... 1 4 4\n   ... 2 5 5\n   ... 3 6 2\n   ... 8 8 2\n   ... 3 3 7\n   ... 8 3 4\n   ... 1 8 7\n   ... 2 7 2\n   ... 8 8 2\n   ... 5 4 3\n   ... 3 4 3\n   ... 4 3 2\n   ... 9 5 7\n   ... 6 3 8\n   ... 1 7 8\n   ... 3 4 3\n   ... 3 3 6\n   ... 7 4 2\n   ... 7 5 7\n   ... 3 6 5\n   ... 1 8 6\n   ... 2 6 6\n   ... 5 7 4\n   ... 3 3 7\n   ... 4 5 4\n   ... 6 8 4\n   ... 8 7 6\n   ... 4 2 2\n   ... 3 4 3\n   ... 1 2 3\n   ... 9 6 2\n   ... 8 7 3\n   ... 2 7 4\n   ... 5 8 2\n   ... 1 6 3\n   ... 6 5 4\n   ... 2 3 6\n   ... 3 3 3\n   ... 2 2 2\n   ... 7 5 2\n   ... 3 1 2\n   ... 4 3 1\n   ... 5 3 3\n   ... 1 6 1\n   ... 4 3 3\n   ... 2 4 4\n   ... 1 2 1\n   ... 2 6 2\n   ... 4 4 1\n   ... 1 4 3\n   ... 9 2 7\n   ... 2 6 2\n   ... 5 2 6\n   ... 1 1 2\n   ... 1 3 2\n   ... 5 3 1\n   ... 5 2 5\n   ... 3 4 3\n   ... 9 2 5\n   ... 1 5 1\n   ... 1 2 2\n   ... 2 4 4\n   ... 5 1 2\n   ... 3 3 2\n   ... 6 6 6\n   ... 2 1 6\n   ... 7 8 3\n   ... 2 3 2\n   ... 4 2 2\n   ... 5 6 2\n   ... 3 2 3\n   ... 2 3 2\n   ... 2 3 4\n   ... 6 6 2\n   ... 1 1 1\n   ... 3 4 6\n   ... 2 5 6\n   ... 4 4 3\n   ... 5 6 1\n   ... 3 1 1\n   ... 2 6 1\n   ... 4 4 4\n   ... 1 1 3\n   ... 7 4 5\n   ... 7 5 7\n   ... 3 1 4\n   ... 7 8 3\n   ... 7 1 2\n   ... 3 4 4\n   ... 3 4 4\n   ... 5 2 6\n   ... 2 4 1\n   ... 6 4 2\n   ... 7 5 6\n   ... 5 1 5\n   ... 5 1 5\n   ... 3 2 5\n   ... 4 1 2\n   ... 1 2 2\n   ... 5 2 2\n   ... 1 3 2\n   ... 4 3 4\n   ... 2 5 3\n   ... 4 7 4\n   ... 4 4 4\n   ... 2 6 3\n   ... 1 7 1\n   ... 1 6 1\n   ... 8 8 5\n   ... 4 5 3\n   ... 1 6 2\n   ... 6 6 3\n   ... 3 3 3\n   ... 9 7 5\n   ... 1 4 5\n   ... 3 5 3\n   ... 4 4 4\n   ... 6 1 5\n   ... 3 6 3\n   ... 9 4 3\n   ... 6 6 4\n   ... 9 2 6\n   ... 3 4 1\n   ... 5 6 5\n   ... 1 7 4\n   ... 5 2 2\n   ... 1 6 3\n   ... 6 6 2\n   ... 4 4 2\n   ... 6 1 5\n   ... 5 6 1\n   ... 1 2 1\n   ... 1 6 1\n   ... 4 8 4\n   ... 2 4 1\n   ... 2 4 2\n   ... 4 3 4\n   ... 8 6 4\n   ... 1 6 4\n   ... 2 4 2\n   ... 3 4 4\n   ... 7 6 4\n   ... 2 4 4\n   ... 3 4 5\n   ... 1 1 4\n   ... 1 5 2\n   ... 1 3 4\n   ... 3 4 3\n   ... 2 5 4\n   ... 4 5 1\n   ... 5 2 2\n   ... 1 6 5\n   ... 4 3 2\n   ... 5 6 4\n   ... 1 6 1\n   ... 6 4 5\n   ... 3 4 2\n   ... 8 4 3\n   ... 7 5 2\n   ... 5 3 5\n   ... 2 1 3\n   ... 8 5 3\n   ... 3 3 4\n   ... 5 1 1\n   ... 1 1 3\n   ... 7 2 2\n   ... 4 2 2\n   ... 6 4 2\n   ... 3 6 2\n   ... 8 4 2\n   ... 2 4 2\n   ... 2 1 5\n   ... 6 4 2\n   ... 1 6 3\n   ... 7 4 4\n   ... 2 1 3\n   ... 8 5 1\n   ... 3 6 4\n   ... 5 2 4\n   ... 4 6 2\n   ... 3 6 2\n   ... 3 4 2\n   ... 2 2 3\n   ... 3 2 1\n   ... 4 2 2\n   ... 2 4 2\n   ... 8 6 3\n   ... 1 6 3\n   ... 4 4 4\n"
    },
    {
        "number": 4298,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, d = map(int, stdin.split())\n\n    ans = (d+1)*2\n    if (n-2)*(d+1)+1 <= n:\n        ans -= 1\n\n    return str(ans)\n"
    },
    {
        "number": 4298,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip().split(\" \")\n    N, D = int(stdin[0]), int(stdin[1])\n    return str(int(D / 2) + (D % 2))\n\nsolution(\"6 2\")\n\nWe can achieve the objective by placing an inspector under Tree 2 and Tree 4.\ndef"
    },
    {
        "number": 4298,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, D = (int(i) for i in stdin.split())\n    print(min(N - D, N + D))\n    return"
    },
    {
        "number": 4298,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, D = map(int, stdin.split(\" \"))\n    return str(N * (D + 1))\n\nsolution(input())\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4298,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4299,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(1, int(stdin) + 1):\n        print('hon' if i % 10 in {2, 4, 5, 7, 9} else 'pon' if i % 10 in {0, 1, 6, 8} else 'bon' if i % 10 == 3 else stdin)\n"
    },
    {
        "number": 4299,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N <= 999:\n        if N == 2:\n            return \"hon\"\n        if N == 0:\n            return \"pon\"\n        if N == 1:\n            return \"bon\"\n        if N == 3:\n            return \"pon\"\n        if N >= 4 and N <= 7:\n            return \"bon\"\n        if N == 8:\n            return \"hon\"\n        if N >= 9 and N <= 11:\n            return \"pon\"\n        if N == 12:\n            return \"bon\"\n        if N == 13:\n            return \"bon\"\n        if N == 14:\n            return \"pon\"\n        if N == 15:\n            return \"pon\"\n        if N == 16:\n            return \"pon\"\n    else:\n        print(\"Please input a number between 1 and 999\")\n        return\n"
    },
    {
        "number": 4299,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n <= 999:\n        if n in (2, 4, 5, 7, 9):\n            print(\"hon\")\n        elif n in (0, 1, 6, 8):\n            print(\"pon\")\n        elif n == 3:\n            print(\"bon\")\n        else:\n            raise ValueError(\"N should be positive integer not exceeding 999\")\n    else:\n        raise ValueError(\"N should be positive integer not exceeding 999\")"
    },
    {
        "number": 4299,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return \"1\u672c\"\n    if n == 1:\n        return \"2\u672c\"\n    if n == 2:\n        return \"3\u672c\"\n    if n == 3:\n        return \"4\u672c\"\n    if n == 4:\n        return \"5\u672c\"\n    if n == 5:\n        return \"6\u672c\"\n    if n == 6:\n        return \"7\u672c\"\n    if n == 7:\n        return \"8\u672c\"\n    if n == 8:\n        return \"9\u672c\"\n    if n == 9:\n        return \"10\u672c\"\n    if n == 10:\n        return \"11\u672c\"\n    if n == 11:\n        return \"12\u672c\"\n    if n == 12:\n        return \"13\u672c\"\n    if n == 13:\n        return \"14\u672c\"\n    if n == 14:\n        return \"15\u672c\"\n    if n == 15:\n        return \"16\u672c\"\n    return \"17\u672c\"\n"
    },
    {
        "number": 4299,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 0:\n        raise ValueError()\n    if n <= 10:\n        return 'hon'\n    elif n <= 20:\n        return 'pon'\n    elif n <= 30:\n        return 'bon'\n    else:\n        if n % 10 == 2:\n            return 'hon'\n        elif n % 10 == 3:\n            return 'bon'\n        elif n % 10 == 5:\n            return 'pon'\n        elif n % 10 == 7:\n            return 'bon'\n        elif n % 10 == 8:\n            return 'hon'\n        elif n % 10 == 0:\n            return 'pon'\n        elif n % 10 == 6:\n            return 'bon'\n        elif n % 10 == 1:\n            return 'pon'\n        elif n % 10 == 4:\n            return 'pon'\n    raise ValueError()\n"
    },
    {
        "number": 4299,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n >= 2 and n <= 10:\n        if n % 10 == 2:\n            return 'hon'\n        elif n % 10 == 4 or n % 10 == 5:\n            return 'pon'\n        elif n % 10 == 7 or n % 10 == 9:\n            return 'bon'\n        else:\n            return 'on'\n    elif n >= 10 and n <= 99:\n        if n % 10 == 3:\n            return 'bon'\n        else:\n            return 'on'\n    else:\n        return 'pon'"
    },
    {
        "number": 4299,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    if n < 1000:\n        print(\"pon\")\n        return\n\n    if n == 1000:\n        print(\"hon\")\n        return\n\n    if n == 1001:\n        print(\"bon\")\n        return\n\n    if n == 1002:\n        print(\"pon\")\n        return\n\n    if n == 1003:\n        print(\"pon\")\n        return\n\n    if n == 1004:\n        print(\"bon\")\n        return\n\n    if n == 1005:\n        print(\"pon\")\n        return\n\n    if n == 1006:\n        print(\"pon\")\n        return\n\n    if n == 1007:\n        print(\"hon\")\n        return\n\n    if n == 1008:\n        print(\"bon\")\n        return\n\n    if n == 1009:\n        print(\"pon\")\n        return\n\n    if n == 1010:\n        print(\"pon\")\n        return\n\n    if n == 1011:\n        print(\"pon\")\n        return\n\n    if n == 1012:\n        print(\"hon\")\n        return\n\n    if n == 1013:\n        print(\"bon\")\n        return\n\n    if n == 1014:\n        print(\"pon\")\n        return\n\n    if n == 1015:\n        print(\"pon\")\n        return\n\n    if n == 1016:\n        print(\"pon\")\n        return\n\n    if n == 1017:\n        print(\"hon\")\n        return\n\n    if n == 1018:\n        print(\"bon\")\n        return\n\n    if n == 1019:\n        print(\"pon\")\n        return\n\n    if n == 1020:\n        print(\"pon\")\n        return\n\n    if n == 1021:\n        print(\"pon\")\n        return\n\n    if n == 1022:\n        print(\"hon\")\n        return\n\n    if n == 1023:\n        print(\"bon\")\n        return\n\n    if n == 1024:\n        print(\"pon\")\n        return\n\n    if n == 1025:\n        print(\"pon\")\n        return\n\n    if n == 1026:\n        print(\"pon\")\n        return\n\n    if n == 1027:\n        print(\"hon\")\n        return\n\n    if n == 1028:\n        print(\"bon\")\n        return\n\n    if n == 1029:\n        print(\"pon\")\n        return\n\n    if n == 1030:\n        print(\"pon\")\n        return\n\n    if n == 1031:\n        print(\"pon\")\n        return\n\n    if n == 1032:\n        print(\"hon\")\n        return\n\n    if n == 1033:\n        print(\"bon\")\n        return\n\n    if n == 1034:\n        print(\"pon\")\n        return\n\n    if n == 1035:\n        print(\"pon\")\n        return\n\n    if n == 1036:\n        print(\"pon\")\n        return\n\n    if n == 1037:\n        print(\"hon\")\n        return\n\n    if n == 1038:\n        print(\"bon\")\n        return\n\n    if n == 1039:\n        print(\"pon\")\n        return\n\n    if n == 1040:\n        print(\"pon\")\n        return\n\n    if n == 1041:\n        print(\"pon\")\n        return\n\n    if n == 1042:\n        print(\"hon\")\n        return\n\n    if n == 1043:\n        print(\"bon\")\n        return\n\n    if n == 1044:\n        print(\"pon\")\n        return\n\n    if n == 1045:\n        print(\"pon\")\n        return\n\n    if n == 1046:\n        print(\"pon\")\n        return\n\n    if n == 1047:\n        print(\"hon\")\n        return\n\n    if n == 1048:\n        print(\"bon\")\n        return\n\n    if n == 1049:\n        print(\"pon\")\n        return\n\n    if n == 1050:\n        print(\"pon\")\n        return\n\n    if n == 1051:\n        print(\"pon\")\n        return\n\n    if n == 1052:\n        print(\"hon\")\n        return\n\n    if n == 1053:\n        print(\"bon\")\n        return\n\n    if n == 1054:\n        print(\"pon\")\n        return\n\n    if n == 1055:\n        print(\"pon\")\n        return\n\n    if n == 1056:\n        print(\"pon\")\n        return\n\n    if n == 1057:\n        print(\"hon\")\n        return\n\n    if n == 1058:\n        print(\"bon\")\n        return\n\n    if n == 1059:\n        print(\"pon\")\n        return\n\n    if n == 1060:\n        print(\"pon\")\n        return\n\n    if n == 1061:\n        print(\"pon\")\n        return\n\n    if n == 1062:\n        print(\"hon\")\n        return\n\n    if n == 1063:\n        print(\"bon\")\n        return\n\n    if n == 1064:\n        print(\"pon\")\n        return\n\n    if n == 1065:\n        print(\"pon\")\n        return\n\n    if n == 1066:\n        print(\"pon\")\n        return\n\n    if n == 1067:\n        print(\"hon\")\n        return\n\n    if n == 1068:\n        print(\"bon\")\n        return\n\n    if n == 1069:\n        print(\"pon\")\n        return\n\n    if n == 1070:\n        print(\"pon\")\n        return\n\n    if n == 1071:\n        print(\"pon\")\n        return\n\n    if n == 1072:\n        print(\"hon\")\n        return\n\n    if n == 1073:\n        print(\"bon\")\n        return\n\n    if n == 1074:\n        print(\"pon\")\n        return\n\n    if n == 1075:\n        print(\"pon\")\n        return\n\n    if n == 1076:\n        print(\"pon\")\n        return\n\n    if n == 1077:\n        print(\"hon\")\n        return\n\n    if n == 1078:\n        print(\"bon\")\n        return\n\n    if n == 1079:\n        print(\"pon\")\n        return\n\n    if n == 1080:\n        print(\"pon\")\n        return\n\n    if n == 1081:\n        print(\"pon\")\n        return\n\n    if n == 1082:\n        print(\"hon\")\n        return\n\n    if n == 1083:\n        print(\"bon\")\n        return\n\n    if n == 1084:\n        print(\"pon\")\n        return\n\n    if n == 1085:\n        print(\"pon\")\n        return\n\n    if n == 1086:\n        print(\"pon\")\n        return\n\n    if n == 1087:\n        print(\"hon\")\n        return\n\n    if n == 1088:\n        print(\"bon\")\n        return\n\n    if n == 1089:\n        print(\"pon\")\n        return\n\n    if n == 1090:\n        print(\"pon\")\n        return\n\n    if n == 1091:\n        print(\"pon\")\n        return\n\n    if n == 1092:\n        print(\"hon\")\n        return\n\n    if n == 1093:\n        print(\"bon\")\n        return\n\n    if n == 1094:\n        print(\"pon\")\n        return\n\n    if n == 1095:\n        print(\"pon\")\n        return\n\n    if n == 1096:\n        print(\"pon\")\n        return\n\n    if n == 1097:\n        print(\"hon\")\n        return\n\n    if n == 1098:\n        print(\"bon\")\n        return\n\n    if n == 10"
    },
    {
        "number": 4299,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    \n    if N > 999:\n        return None\n    elif N <= 99:\n        return 'zero' if N == 0 else 'one' if N == 1 else 'two' if N == 2 else 'three' if N == 3 else 'four' if N == 4 else 'five' if N == 5 else'six' if N == 6 else'seven' if N == 7 else 'eight' if N == 8 else 'nine' if N == 9 else 'ten'\n    elif N <= 99:\n        return 'eleven' if N == 10 else 'twelve' if N == 11 else 'thirteen' if N == 12 else 'fourteen' if N == 13 else 'fifteen' if N == 14 else'sixteen' if N == 15 else'seventeen' if N == 16 else 'eighteen' if N == 17 else 'nineteen' if N == 18 else 'twenty' if N == 20 else 'twenty one' if N == 21 else 'twenty two' if N == 22 else 'twenty three' if N == 23 else 'twenty four' if N == 24 else 'twenty five' if N == 25 else 'twenty six' if N == 26 else 'twenty seven' if N == 27 else 'twenty eight' if N == 28 else 'twenty nine' if N == 29 else 'thirty' if N == 30 else 'thirty one' if N == 31 else 'thirty two' if N == 32 else 'thirty three' if N == 33 else 'thirty four' if N == 34 else 'thirty five' if N == 35 else 'thirty six' if N == 36 else 'thirty seven' if N == 37 else 'thirty eight' if N == 38 else 'thirty nine' if N == 39 else 'forty' if N == 40 else 'forty one' if N == 41 else 'forty two' if N == 42 else 'forty three' if N == 43 else 'forty four' if N == 44 else 'forty five' if N == 45 else 'forty six' if N == 46 else 'forty seven' if N == 47 else 'forty eight' if N == 48 else 'forty nine' if N == 49 else 'fifty' if N == 50 else 'fifty one' if N == 51 else 'fifty two' if N == 52 else 'fifty three' if N == 53 else 'fifty four' if N == 54 else 'fifty five' if N == 55 else 'fifty six' if N == 56 else 'fifty seven' if N == 57 else 'fifty eight' if N == 58 else 'fifty nine' if N == 59 else'sixty' if N == 60 else'sixty one' if N == 61 else'sixty two' if N == 62 else'sixty three' if N == 63 else'sixty four' if N == 64 else'sixty five' if N == 65 else'sixty six' if N == 66 else'sixty seven' if N == 67 else'sixty eight' if N == 68 else'sixty nine' if N == 69 else'seventy' if N == 70 else'seventy one' if N == 71 else'seventy two' if N == 72 else'seventy three' if N == 73 else'seventy four' if N == 74 else'seventy five' if N == 75 else'seventy six' if N == 76 else'seventy seven' if N == 77 else'seventy eight' if N == 78 else'seventy nine' if N == 79 else 'eighty' if N == 80 else 'eighty one' if N == 81 else 'eighty two' if N == 82 else 'eighty three' if N == 83 else 'eighty four' if N == 84 else 'eighty five' if N == 85 else 'eighty six' if N == 86 else 'eighty seven' if N == 87 else 'eighty eight' if N == 88 else 'eighty nine' if N == 89 else 'ninety' if N == 90 else 'ninety one' if N == 91 else 'ninety two' if N == 92 else 'ninety three' if N == 93 else 'ninety four' if N == 94 else 'ninety five' if N == 95 else 'ninety six' if N == 96 else 'ninety seven' if N == 97 else 'ninety eight' if N == 98 else 'ninety nine' if N == 99 else 'one hundred' if N == 100 else 'two hundred' if N == 200 else 'three hundred' if N == 300 else 'four hundred' if N == 400 else 'five hundred' if N == 500 else'six hundred' if N == 600 else'seven hundred' if N == 700 else 'eight hundred' if N == 800 else 'nine hundred' if N == 900 else 'one thousand' if N == 1000 else None\n    return None"
    },
    {
        "number": 4299,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N <= 99:\n        return 'hon'\n    if N <= 999:\n        if (N // 10) % 10 == 3:\n            return 'bon'\n        if (N // 10) % 10 == 0:\n            return 'pon'\n        if (N // 10) % 10 == 1:\n            return 'hon'\n    if N <= 9999:\n        if (N // 100) % 10 == 3:\n            return 'bon'\n        if (N // 100) % 10 == 0:\n            return 'pon'\n        if (N // 100) % 10 == 1:\n            return 'hon'\n    if N <= 99999:\n        if (N // 1000) % 10 == 3:\n            return 'bon'\n        if (N // 1000) % 10 == 0:\n            return 'pon'\n        if (N // 1000) % 10 == 1:\n            return 'hon'\n    if N <= 9999999:\n        if (N // 10000) % 10 == 3:\n            return 'bon'\n        if (N // 10000) % 10 == 0:\n            return 'pon'\n        if (N // 10000) % 10 == 1:\n            return 'hon'\n    if N <= 999999999:\n        if (N // 100000) % 10 == 3:\n            return 'bon'\n        if (N // 100000) % 10 == 0:\n            return 'pon'\n        if (N // 100000) % 10 == 1:\n            return 'hon'\n    if N <= 99999999999:\n        if (N // 1000000) % 10 == 3:\n            return 'bon'\n        if (N // 1000000) % 10 == 0:\n            return 'pon'\n        if (N // 1000000) % 10 == 1:\n            return 'hon'\n    if N <= 999999999999:\n        if (N // 10000000) % 10 == 3:\n            return 'bon'\n        if (N // 10000000) % 10 == 0:\n            return 'pon'\n        if (N // 10000000) % 10 == 1:\n            return 'hon'\n    if N <= 99999999999999:\n        if (N // 1000000000) % 10 == 3:\n            return 'bon'\n        if (N // 1000000000) % 10 == 0:\n            return 'pon'\n        if (N // 1000000000) % 10 == 1:\n            return 'hon'\n    if N <= 999999999999999:\n        if (N // 10000000000) % 10 == 3:\n            return 'bon'\n        if (N // 10000000000) % 10 == 0:\n            return 'pon'\n        if (N // 10000000000) % 10 == 1:\n            return 'hon'\n    if N <= 9999999999999999:\n        if (N // 1000000000000) % 10 == 3:\n            return 'bon'\n        if (N // 1000000000000) % 10 == 0:\n            return 'pon'\n        if (N // 1000000000000) % 10 == 1:\n            return 'hon'\n    if N <= 99999999999999999:\n        if (N // 10000000000000) % 10 == 3:\n            return 'bon'\n        if (N // 10000000000000) % 10 == 0:\n            return 'pon'\n        if (N // 10000000000000) % 10 == 1:\n            return 'hon'\n    if N <= 9999999999999999999:\n        if (N // 100000000000000000000) % 10 == 3:\n            return 'bon'\n        if (N // 100000000000000000000) % 10 == 0:\n            return 'pon'\n        if (N // 100000000000000000000) % 10 == 1:\n            return 'hon'\n    if N <= 999999999999999999999:\n        if (N // 100000000000000000000000) % 10 == 3:\n            return 'bon'\n        if (N // 100000000000000000000000) % 10 == 0:\n            return 'pon'\n        if (N // 100000000000000000000000) % 10 == 1:\n            return 'hon'\n    if N <= 99999999999999999999999:\n        if (N // 1000000000000000000000000) % 10 == 3:\n            return 'bon'\n        if (N // 1000000000000000000000000) % 10 == 0:\n            return 'pon'\n        if (N // 1000000000000000000000000) % 10 == 1:\n            return 'hon'\n    if N <= 9999999999999999999999999:\n        if (N // 10000000000000000000000000) % 10 == 3:\n            return 'bon'\n        if (N // 10000000000000000000000000) % 10 == 0:\n            return 'pon'\n        if (N // 10000000000000000000000000) % 10 == 1:\n            return 'hon'\n    if N <= 999999999999999999999999999:\n        if (N // 100000000000000000000000000000) % 10 == 3:\n            return 'bon'\n        if (N // 100000000000000000000000000000) % 10 == 0:\n            return 'pon'\n        if (N // 100000000000000000000000000000) % 10 == 1:\n            return 'hon'\n    if N <= 9999999999999999999999999999:\n        if (N // 1000000000000000000000000000) % 10 == 3:\n            return 'bon'\n        if (N // 1000000000000000000000000000) % 10 == 0:\n            return 'pon'\n        if (N // 1000000000000000000000000000) % 10 == 1:\n            return 'hon'\n    if N <= 9999999999999999999999999999999:\n        if (N // 1000000000000000000000000000000) % 10 == 3:\n            return 'bon'\n        if (N // 1000000000000000000000000000000) % 10 == 0:\n            return 'pon'\n        if (N // 1000000000000000000000000000000) % 10 == 1:\n            return 'hon'\n    if N <= 99999999999999999999999999999999:\n        if (N // 10000000000000000000000000000000) % 10 == 3:\n            return 'bon'\n        if (N // 10000000000000000000000000000000) % 10 == 0:\n            return 'pon'\n        if (N // 10000000000000000000000000000000) % 10 == 1:\n            return 'hon'\n    if N <= 9999999999999999999999999999999999:\n        if (N // 100000000000000000000000000000000) % 10 == 3:\n            return 'bon'\n        if (N // 100000000000000000000000000000000) % 10 == 0:\n            return 'pon'\n        if (N // 100000000000000000000000000000000) % 10 == 1:\n            return 'hon'\n    if N <= 9999999999999999999999999999999999:\n        if (N // 10000000000000000000000000000000) % 10 == 3:\n            return 'bon'\n        if (N // 10000000000000000000000000000000) % 10 == 0:\n            return 'pon'\n        if (N // 10000000000000000000000000000000) % 10 == 1:\n            return 'hon'\n    if N <= 9999999999999999999999999999999999:\n        if (N // 1000000000000000000000000000000) % 10 == 3:\n            return 'bon'\n        if (N // 1000000000000000000000000000000) % 10 == 0:\n            return 'pon'\n        if (N // 1000000000000000000000000000000) % 10 == 1:\n            return 'hon'\n    if N <= 9999999999999999999999999999999999:\n        if (N // 10000000000000000000000000000000) % 10 == 3:\n            return 'bon'\n        if (N // 10000000000000000000000000000000) % 10 == 0:\n            return 'pon'\n        if (N // 10000000000000000000000000000000) % 10 == 1:\n            return 'hon'\n    if N <= 9999999999999999999999999999999"
    },
    {
        "number": 4299,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n <= 99:\n        return \"hon\"\n    elif n <= 999:\n        if n % 10 == 2:\n            return \"hon\"\n        elif n % 10 == 4:\n            return \"pon\"\n        elif n % 10 == 5:\n            return \"bon\"\n        elif n % 10 == 7:\n            return \"pon\"\n        elif n % 10 == 9:\n            return \"bon\"\n        else:\n            return \"hon\"\n    else:\n        return \"hon\""
    },
    {
        "number": 4300,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    stdin = stdin.split(\"\\n\")\n\n    N = int(stdin[0])\n    d = list(map(int, stdin[1].split()))\n\n    ans = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if d[i] + d[j] > 100:\n                continue\n            ans += (N*(N-1))//2\n    print(ans)\n    return \"\"\n"
    },
    {
        "number": 4300,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    d = list(map(int, stdin.split()))\n    if N == 1:\n        return str(d[0] * (d[0] - 1))\n\n    res = 0\n    for i in range(1, N):\n        x, y = i, N - 1 - i\n        if x == y:\n            res += d[i] * (d[i] - 1)\n        else:\n            res += (d[x] * d[y] + d[x] * d[y] + d[x] * d[y] - d[x] - d[y]) * (d[i] - 1)\n    return str(res)\n"
    },
    {
        "number": 4300,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, *data = map(int, stdin.split())\n    m = 1\n    for i in range(1, n):\n        m *= (n - i) * (n - i + 1) // 2\n    return str(m)\n"
    },
    {
        "number": 4300,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin.strip())\n    d: list = [int(x) for x in stdin.strip().split()]\n    if n < 2 or n > 50 or any(x < 0 or x > 100 for x in d):\n        return ''\n    ans: float = 0\n    d.sort()\n    for i in range(n):\n        for j in range(i + 1, n):\n            ans += d[i] * d[j]\n    return str(ans)\nprint(solution(input()))\n\"\"\""
    },
    {
        "number": 4300,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    d = list(map(int, stdin.split()))\n    dp = [[0] * (n - 1) for _ in range(n)]\n\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            dp[i][j] = dp[i + 1][j] + d[i] * d[j]\n            dp[i][j] = max(dp[i][j], dp[i + 1][j])\n            dp[i][j] = max(dp[i][j], dp[i][j - 1])\n\n    return str(max([max(i) for i in dp]))\n"
    },
    {
        "number": 4300,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return sum(int(i)*int(j) for i, j in map(lambda x: x.split(), stdin.split('\\n')) if 2 <= int(i) <= 50 and 2 <= int(j) <= 50 and int(i)!= int(j))\n"
    },
    {
        "number": 4300,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    _, *input = map(int, stdin.split())\n    N = input[0]\n    health = list(map(int, input[1:]))\n    takoyaki = []\n    for i in range(N):\n        for j in range(i+1, N):\n            takoyaki.append((i, j, health[i] + health[j]))\n\n    takoyaki = sorted(takoyaki, key=lambda x: x[2])\n    print(sum(map(lambda x: x[2] * (N - x[0] - x[1]), takoyaki)))\n    return 'OK'"
    },
    {
        "number": 4300,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    d = list(map(int, stdin.split()))\n    total = 0\n    for i in range(N):\n        for j in range(N - 1):\n            if d[i] + d[j] <= 100:\n                total += d[i] * (d[j] * (N - 1) - i) / 2\n    return str(int(total))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4300,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    dp = [[0] * (n + 1) for i in range(n + 1)]\n\n    for i in range(1, n + 1):\n        dp[i][i] = 0\n\n    for i in range(1, n + 1):\n        for j in range(i, n + 1):\n            for k in range(i, j + 1):\n                dp[i][j] += int(dp[i][k - 1]) + int(dp[k + 1][j])\n\n    stdout_data = \"\"\n    for i in range(1, n + 1):\n        stdout_data += str(dp[i][n] % 10) + \" \"\n\n    return stdout_data\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4300,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # parse stdin\n    stdin_list = stdin.split(\"\\n\")\n    N = int(stdin_list[0])\n    stdin_list.pop(0)\n    stdin_list = list(map(int, stdin_list))\n    stdin_list.sort()\n    # calculate values\n    return sum(stdin_list[i] * stdin_list[i + 1] for i in range(N - 1))\n"
    },
    {
        "number": 4301,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    maxs = []\n    for i in range(1, N):\n        maxs.append(max(a[i-1], a[i]))\n    return \"\\n\".join(map(str, maxs))\n\nsolution(\"2\")\nsolution(\"2 5\")\nsolution(\"2 5 4 3\")\n"
    },
    {
        "number": 4301,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = [int(x) for x in stdin.split()]\n    print(*sorted(arr)[1:n-1])\nsolution(input())"
    },
    {
        "number": 4301,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    sequence = []\n    for i in range(n):\n        sequence.append(int(stdin))\n    max_value = sequence[0]\n    max_index = 0\n    for i in range(1, n):\n        if sequence[i] > max_value:\n            max_value = sequence[i]\n            max_index = i\n    sequence.pop(max_index)\n    max_value = max(sequence)\n    sequence.append(max_value)\n    sequence.sort()\n    print(\"\\n\".join(map(str, sequence)))\n    return \"\".join(map(str, sequence))"
    },
    {
        "number": 4301,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin.readline().strip()\n    res = 0\n    N = int(N)\n    for i in range(1, N):\n        res = max(res, int(stdin.readline().strip()) - i)\n    return res\n\nsolution(sys.stdin)\n"
    },
    {
        "number": 4301,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    max_elements = []\n    \n    for i in range(1, N):\n        element = int(stdin)\n        max_elements.append(element)\n        max_elements.sort()\n    \n    max_elements.pop()\n\n    print(max(max_elements))\n\nsolution(stdin)\n"
    },
    {
        "number": 4301,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    _, *nums = stdin.split()\n    nums = list(map(int, nums))\n    return '\\n'.join([str(max(nums[i + 1:]) - max(nums[:i])) for i in range(len(nums))])\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4301,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    if not stdin.isdigit():\n        raise ValueError\n    N = int(stdin)\n    arr = map(int, input().split())\n    for i in range(1, N):\n        tmp = max(arr[i-1], arr[i])\n        arr[i] = tmp\n    return '\\n'.join(map(str, arr))\n\"\"\"\n\n\"\"\""
    },
    {
        "number": 4301,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    sequence = []\n    for i in range(n):\n        sequence.append(int(stdin))\n    sequence.append(int(stdin))\n    sequence.sort(reverse=True)\n    max_val = sequence.pop()\n    for i in range(n):\n        if i < n:\n            print(max_val)\n            max_val = max(max_val, sequence.pop())\n        else:\n            print(max_val)\n    return \"\"\n"
    },
    {
        "number": 4301,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    print(arr)\n    max_value = arr[0]\n    for i in range(1, n):\n        if arr[i] >= max_value:\n            max_value = arr[i]\n    print(max_value)\n    for i in range(1, n):\n        if arr[i] >= max_value:\n            max_value = arr[i]\n    print(max_value)\n    return max_value\n\nsolution(input())\n"
    },
    {
        "number": 4301,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(1, n):\n        a = stdin.split()\n        a[i] = int(a[i])\n    a.sort()\n    return \"\\n\".join(a)\n"
    },
    {
        "number": 4302,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = (int(x) for x in stdin.split())\n\n    return str(max(\n        sum([1] * A),\n        sum([1] * (A - 1)) + sum([1] * (B - 1)),\n    ))\n"
    },
    {
        "number": 4302,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    coins = 0\n    while A > 0 and B > 0:\n        if A > B:\n            A -= 1\n        else:\n            B -= 1\n        coins += 1\n    return str(coins)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4302,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.split()\n    A = int(data[0])\n    B = int(data[1])\n    a_button = 0\n    b_button = 0\n    while a_button <= B:\n        while b_button <= B:\n            if a_button + b_button <= A:\n                b_button += 1\n            else:\n                a_button += 1\n                break\n        if a_button <= B:\n            print(str(a_button))\n            a_button += 1\n        else:\n            a_button = 0\n            b_button = 0\n    return str(a_button) + \" coins\"\n\n\nsolution(input())\n\"\"\"\n\n\"\"\"\nThe button needs to be large enough that any coin can be\nadded to the pile after it has been taken.\n\nExample\nInput: 4 5\nOutput: 6\n\nInput: 5 6\nOutput: 5\n\nInput: 5 4\nOutput: 5\n\nA = 4\nB = 5\n\nHint: while A <= B\nand if A + 1 > A:\n    A += 1\n    if A <= A:\n        print A + 1\n    else:\n        A += 1\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4302,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5 3\n   ... ''')\n    '9'\n    >>> solution('''6 4\n   ... ''')\n    '0'\n    >>> solution('''10 1\n   ... ''')\n    '10'\n    \"\"\"\n    stdin = stdin.split()\n    a = int(stdin[0])\n    b = int(stdin[1])\n\n    result = 0\n    c = a\n\n    while c >= 1:\n        c -= 1\n        if c == b:\n            result += 1\n            break\n\n        result += 1\n        c = c - 1\n\n    print(result)\n    return result\n"
    },
    {
        "number": 4302,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split(\" \"))\n    max_coins = 0\n    while True:\n        max_coins += A\n        if max_coins < A:\n            A -= 1\n        else:\n            break\n    while True:\n        max_coins += B\n        if max_coins < B:\n            B -= 1\n        else:\n            break\n    return str(max_coins)"
    },
    {
        "number": 4302,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4302,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    count = 1\n    total = 0\n    while True:\n        if A > 1:\n            A -= 1\n            count += 1\n        elif A == 1:\n            break\n        elif A == 0:\n            total += count\n            A = B\n            count = 0\n    return str(total)\n"
    },
    {
        "number": 4302,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n > 2:\n        if (n - 2) % (m - 2) == 0:\n            return str(n - 2)\n        else:\n            return \"0\"\n    else:\n        return str(n)"
    },
    {
        "number": 4302,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = list(map(int, stdin.split()))\n    coin = 0\n    while a > 0 or b > 0:\n        if a > b:\n            a -= 1\n        else:\n            b -= 1\n        coin += 1\n    return str(coin)\n"
    },
    {
        "number": 4302,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return 0\n    a, b = map(int, stdin.split())\n    if a > b:\n        a, b = b, a\n    coins = 0\n    while True:\n        if a == 1:\n            return coins\n        if a < b:\n            break\n        a = a - 1\n        coins += 1\n    while True:\n        if b == 1:\n            return coins\n        if a > b:\n            break\n        b = b - 1\n        coins += 1\n    if a > b:\n        return coins\n    return coins + b\n"
    },
    {
        "number": 4303,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split(\"\\n\")\n    N, K = int(inputs[0]), int(inputs[1])\n    x = list(map(int, inputs[2].split(\" \")))\n    # ---your code here---\n    # ---Do not remove this function call---\n    return solution(stdin)"
    },
    {
        "number": 4303,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = (int(i) for i in stdin.split())\n    arr = stdin.split()\n\n    # Calculate array's indices\n    indices = sorted([i for i, x in enumerate(arr) if x == 'x'])\n    length = len(indices)\n\n    # Current time is 0\n    time = 0\n\n    # When candles are same coordinates, time is 0\n    if length == 1 and indices[0] == 0:\n        return str(0)\n\n    # Move along the line\n    for _ in range(1, length):\n\n        # Check the conditions\n        if length == 1:\n            return str(0)\n\n        # If both candles are at same coordinates, add time\n        if indices[0] == indices[-1]:\n            time += 1\n        else:\n            time += 2\n\n    return str(time)\n\n\ndef"
    },
    {
        "number": 4303,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    (N, K) = stdin.split(' ')\n    K = int(K)\n    points = list(map(int, stdin.split(' ')))\n\n    right = 0\n    left = 0\n\n    for _ in range(K):\n        right = max(right, points[left])\n        left += 1\n\n    return str(right - left)\n"
    },
    {
        "number": 4303,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    x = list(map(int, stdin.split()))\n    res = 0\n    while K > 0 and x:\n        res += 1\n        if res == N:\n            break\n        for i in range(len(x)):\n            if x[i] == max(x):\n                x[i] = min(x)\n                res += 1\n                K -= 1\n                if K == 0:\n                    break\n    return str(res)\n"
    },
    {
        "number": 4303,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('1 2 3')\n    '12'\n    >>> solution('2 1 2')\n    '3'\n    \"\"\"\n    N, K = map(int, stdin.split())\n    x = list(map(int, stdin.split()))\n    res = 0\n    cur_x = 0\n    while N > 0:\n        res = max(res, K + x[cur_x] - x[0])\n        if cur_x > 0:\n            res = max(res, (x[cur_x] + x[cur_x - 1]) // 2)\n        cur_x = (cur_x + 1) % len(x)\n        N -= 1\n    print(res)\n    return\nsolution(input())"
    },
    {
        "number": 4303,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, K = list(map(int, stdin.split()))\n    x_arr = list(map(int, stdin.split()))\n    x = x_arr[0]\n    min_time = N\n    while True:\n        if x_arr[x] > 0:\n            if x_arr[x] == K:\n                return str(min_time)\n            x_arr[x] -= 1\n            x += 1\n        else:\n            x -= 1\n            if x == 0:\n                break\n            min_time += 1\n        if x < 0:\n            return str(min_time)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4303,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def solution_helper(N, K, x_array):\n        if N == 0:\n            if K == 0:\n                return 0\n            else:\n                return float('inf')\n        if K == 0:\n            return float('inf')\n        min_time = float('inf')\n        for i in range(N):\n            if i < K:\n                min_time = min(min_time,\n                               solution_helper(N - i - 1, K - i - 1, x_array))\n            else:\n                min_time = min(min_time,\n                               solution_helper(N - i - 1, K, x_array))\n        return min_time\n\n    N, K = map(int, stdin.split())\n    x_array = list(map(int, stdin.split()))\n    return str(solution_helper(N, K, x_array))"
    },
    {
        "number": 4303,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    x = list(map(int, stdin.split()))\n\n    # We can find the min time required to light K candles by \n    #   1) The minimum time required to light first candles\n    #   2) The minimum time required to light the second and the third candles\n    #       then the minimum time required to light the fourth and the fifth\n    #   3) The minimum time required to light the 6th, 7th, 8th, 9th and 10th candles\n    #       then the minimum time required to light the 1st, 2nd, 3rd and 4th candles\n\n    # Part 1\n    # 1) First, calculate the total time to light candles\n    #    (No. of candles on the number line * speed)\n    #    Time to light the first candle = (x_1 + speed) + (x_2 + speed) +... + (x_N + speed)\n\n    #    Time to light the second candle = (x_1 + speed) + (x_2 + speed) +... + (x_N + speed)\n    #    Time to light the third candle = (x_1 + speed) + (x_2 + speed) +... + (x_N + speed)\n    #    Time to light the fourth candle = (x_1 + speed) + (x_2 + speed) +... + (x_N + speed)\n\n    #    Time to light the 5th candle = (x_1 + speed) + (x_2 + speed) +... + (x_N + speed)\n    #    Time to light the 6th candle = (x_1 + speed) + (x_2 + speed) +... + (x_N + speed)\n    #    Time to light the 7th candle = (x_1 + speed) + (x_2 + speed) +... + (x_N + speed)\n    #    Time to light the 8th candle = (x_1 + speed) + (x_2 + speed) +... + (x_N + speed)\n    #    Time to light the 9th candle = (x_1 + speed) + (x_2 + speed) +... + (x_N + speed)\n    #    Time to light the 10th candle = (x_1 + speed) + (x_2 + speed) +... + (x_N + speed)\n\n    #    Time to light the first, second, third, fourth, fifth and sixth candles = (x_1 + speed) + (x_2 + speed) +... + (x_N + speed)\n    #    Time to light the first, second, third, fourth, fifth and seventh candles = (x_1 + speed) + (x_2 + speed) +... + (x_N + speed)\n    #    Time to light the first, second, third, fourth, sixth and eighth candles = (x_1 + speed) + (x_2 + speed) +... + (x_N + speed)\n    #    Time to light the first, second, third, fourth, sixth and ninth candles = (x_1 + speed) + (x_2 + speed) +... + (x_N + speed)\n    #    Time to light the first, second, third, fourth, seventh, eighth and ninth candles = (x_1 + speed) + (x_2 + speed) +... + (x_N + speed)\n    #    Time to light the first, second, third, fourth, sixth, seventh, and ninth candles = (x_1 + speed) + (x_2 + speed) +... + (x_N + speed)\n\n    #    Time to light the 1st, 2nd, 3rd, 4th, 5th, 6th and 7th candles = (x_1 + speed) + (x_2 + speed) +... + (x_N + speed)\n    #    Time to light the 1st, 2nd, 3rd, 4th, 5th, 6th and 8th candles = (x_1 + speed) + (x_2 + speed) +... + (x_N + speed)\n    #    Time to light the 1st, 2nd, 3rd, 4th, 5th, 6th and 9th candles = (x_1 + speed) + (x_2 + speed) +... + (x_N + speed)\n    #    Time to light the 1st, 2nd, 3rd, 4th, 5th, 6th and 10th candles = (x_1 + speed) + (x_2 + speed) +... + (x_N + speed)\n\n    #    Time to light the 1st, 2nd, 3rd, 4th, 5th, 6th, 7th and 8th candles = (x_1 + speed) + (x_2 + speed) +... + (x_N + speed)\n    #    Time to light the 1st, 2nd, 3rd, 4th, 5th, 6th, 7th and 9th candles = (x_1 + speed) + (x_2 + speed) +... + (x_N + speed)\n    #    Time to light the 1st, 2nd, 3rd, 4th, 5th, 6th, 7th and 10th candles = (x_1 + speed) + (x_2 + speed) +... + (x_N + speed)\n\n    #    Time to light the 1st, 2nd, 3rd, 4th, 5th, 6th, 7th, 8th and 9th candles = (x_1 + speed) + (x_2 + speed) +... + (x_N + speed)\n    #    Time to light the 1st, 2nd, 3rd, 4th, 5th, 6th, 7th, 8th and 10th candles = (x_1 + speed) + (x_2 + speed) +... + (x_N + speed)\n\n    #    Time to light the 1st, 2nd, 3rd, 4th, 5th, 6th, 7th, 8th and 10th candles = (x_1 + speed) + (x_2 + speed) +... + (x_N + speed)\n\n    #    Time to light the 1st, 2nd, 3rd, 4th, 5th, 6th, 7th, 8th, 9th and 10th candles = (x_1 + speed) + (x_2 + speed) +... + (x_N + speed)\n\n    #    Time to light the 1st, 2nd, 3rd, 4th, 5th, 6th, 7th, 8th, 9th and 10th candles = (x_1 + speed) + (x_2 + speed) +... + (x_N + speed)\n\n    #    Time to light the 1st, 2nd, 3rd, 4th, 5th, 6th, 7th, 8th, 9th and 10th candles = (x_1 + speed) + (x_2 + speed) +... + (x_N + speed)\n\n    #    Time to light the 1st, 2nd, 3rd, 4th, 5th, 6th, 7th, 8th, 9th and 10th candles = (x_1 + speed) + (x_2 + speed) +... + (x_N + speed)\n\n    #    Time to light the 1st, 2nd, 3rd, 4th, 5th, 6th, 7th, 8th, 9th and 10th candles = (x_1"
    },
    {
        "number": 4303,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, K = stdin.split()\n    x = list(map(int, stdin.split()))\n    # x.sort()\n    left = 0\n    right = 0\n    # end = 0\n    while right < len(x):\n        if x[right] == 0:\n            left += 1\n        if x[left] == x[right]:\n            right += 1\n        else:\n            x[left] += 1\n            left += 1\n            right += 1\n            # end += 1\n    print(end)\n\n    return stdout\n"
    },
    {
        "number": 4303,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # replace this with your code\n    N, K = stdin.split()\n    N, K = int(N), int(K)\n    cnt = 0\n    # convert list to int\n    x_list = list(map(int, stdin.split()))\n\n    for i in range(N):\n        if x_list[i] > 0:\n            cnt += abs(x_list[i])\n        if i < N - 1:\n            cnt += abs(x_list[i] - x_list[i + 1])\n\n    return str(cnt)\n"
    },
    {
        "number": 4304,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.split()[0])\n    b = int(stdin.split()[1])\n    return (a + b) / 2\n"
    },
    {
        "number": 4304,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''1 1\n   ... 4 5\n   ... 5 5\n   ... 2 5\n   ... 3 5\n   ... 2 3\n   ... 3 2\n   ... 4 5\n   ... 4 4\n   ... 5 3\n   ... 4 3\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5 5\n   ... 5"
    },
    {
        "number": 4304,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, m = map(int, stdin.split())\n    return str(2 ** (n + m - 2))"
    },
    {
        "number": 4304,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a,b=list(map(int,stdin.split()))\n    if a<=b:\n        return str(a-1)\n    else:\n        return str(b-1)\n"
    },
    {
        "number": 4304,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # We have assumed that the input is given in the format mentioned in the problem description.\n    # We will parse the input, convert them to int and then split them to obtain a list.\n    a, b = map(int, stdin.split())\n    # The max height in the village is 999 meters (999+999).\n    # The possible distance between the west and east towers is 1 meter.\n    # Therefore, we can calculate the total distance between the two towers using the formula:\n    # total_distance = a + b - 1\n    # Since we have assumed that the input is in the format mentioned in the problem description, we can use the following formula for the area covered by the snow:\n    # snow_area = a + b\n    # Since we have assumed that the input is in the format mentioned in the problem description, we can use the following formula for the total snow cover:\n    # total_snow_cover = total_distance * (a + b)\n    # Using the above formulas, we can calculate the total snow cover.\n    total_snow_cover = (a + b) * (a + b - 1) // 2\n    return str(total_snow_cover)\n"
    },
    {
        "number": 4304,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\nprint(solution(input()))"
    },
    {
        "number": 4304,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(min(a, b) - max(a, b) - 1)"
    },
    {
        "number": 4304,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Using the assumption that the tower lengths are constant\n    # and that the values at the ends of the towers are greater than the values\n    # of the towers in the middle\n    # Finding the heights\n    heights = sorted([int(i) for i in stdin.split()])\n    # Finding the sums\n    north_total = sum(heights[:2])\n    south_total = sum(heights[2:])\n    # Checking the sums\n    if north_total == south_total:\n        # If the sums are equal, the height of the snow is the middle height\n        return heights[2]\n    else:\n        # If the sums are different, the height of the snow is the max of the left\n        # and right sides\n        return max(north_total, south_total)"
    },
    {
        "number": 4304,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    return str(sum([int((len(str(bin(a))[2:])-1)//2) for a in range(int(stdin[0]), int(stdin[1])+1)]))"
    },
    {
        "number": 4304,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.strip().split())\n    c = 1\n    d = b\n    e = 0\n    while True:\n        c = c + d\n        if c > b:\n            break\n        e += 1\n    return str(c - b)\n"
    },
    {
        "number": 4305,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Given stdin, solve for the minimum number of attacks needed to win.\n\n    :param stdin:\n    :return:\n    \"\"\"\n    H, A = (int(x) for x in stdin.split())\n\n    count = 0\n\n    while H > 0:\n        count += 1\n        H -= A\n        if H <= 0:\n            break\n\n    print(count)\n    return count\n"
    },
    {
        "number": 4305,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    h, a = map(int, stdin.split(\" \"))\n\n    h_sum = sum(range(h, 0, -a))\n    serval_health_sum = h_sum - h\n    serval_health_diff = h_sum - serval_health_sum\n    return f\"{serval_health_diff + 1}\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4305,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    _, A, H = stdin.split()\n    A, H = int(A), int(H)\n    d = {}\n    ans = -1\n    for i in range(H):\n        if i not in d:\n            d[i] = A\n        else:\n            d[i] += A\n        if d[i] == 0:\n            break\n    for i in range(H - 1, -1, -1):\n        if i in d and d[i] >= 0:\n            d[i] -= 1\n            ans = i + 1\n            break\n    return str(ans)\n"
    },
    {
        "number": 4305,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    H, A = list(map(int, stdin.split()))\n    if H <= A:\n        return f\"{H} {A}\"\n    return f\"{H - A}\""
    },
    {
        "number": 4305,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    print(2) if int(stdin.split()[0]) > int(stdin.split()[1]) else print(1)\n    return \"\"\n    # Write your code here\n    H, A = map(int, stdin.split())\n    return str(int(math.log(H, 2) + 1) + A)\n"
    },
    {
        "number": 4305,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    H, A = map(int, stdin.split())\n    monster_health = H\n    for _ in range(3):\n        monster_health -= A\n        if monster_health <= 0:\n            break\n    print(3 - _)\n    return\n"
    },
    {
        "number": 4305,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    H, A = list(map(int, stdin.split()))\n    if H <= A:\n        print(0)\n    else:\n        print(int(H // (A + 1)))\n    return \"\"\n"
    },
    {
        "number": 4305,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # H, A = int(input()), int(input())\n    H, A = stdin.split()\n    H, A = int(H), int(A)\n    monster = 0\n    while monster < H:\n        monster = monster + (monster * A)\n    print(monster)\n    return monster"
    },
    {
        "number": 4305,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    health, attack = [int(i) for i in stdin.split()]\n    while True:\n        new_health = health - attack\n        if new_health <= 0:\n            return 'Serval wins'\n        health = new_health"
    },
    {
        "number": 4305,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"3\"\n\"\"\"\n\ndef"
    },
    {
        "number": 4306,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = stdin.split()\n    a = int(a)\n    b = int(b)\n    c = int(c)\n    d = int(d)\n\n    return str(max(b - a, d - c))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4306,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = stdin.split()\n    a = int(a)\n    b = int(b)\n    c = int(c)\n    d = int(d)\n    print(c - b)\n    return"
    },
    {
        "number": 4306,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    list = stdin.split()\n    return str(min(int(list[0]) - int(list[2]), int(list[1]) - int(list[3])) )\n\nstdin = input()\nprint(solution(stdin))\n\nThe first part of the solution can be solved by min(A-B, C-D)\nThe second part of the solution can be solved by A-B + C-D\nA = minimum time it took to switch the A button, or minimum time it took to switch the C button\nB = maximum time it took to switch the A button, or maximum time it took to switch the C button\nC = maximum time it took to switch the A button, or maximum time it took to switch the D button\nD = maximum time it took to switch the C button, or maximum time it took to switch the D button\n\nA-B and A-C will be the same, because the duration of the A-B and A-C switch will always be the same.\nC-D will be the same, because the duration of the A-B and C-D switch will always be the same."
    },
    {
        "number": 4306,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split(\"\\n\")\n    #inputs = stdin.split(\" \")\n    #inputs = stdin.split(\"\\n\")\n    n = int(inputs[0])\n    a, b, c, d = map(int, inputs[1].split(\" \"))\n    #a, b, c, d = int(inputs[1]), int(inputs[2]), int(inputs[3]), int(inputs[4])\n    #print(a, b, c, d)\n    #print(n)\n    if (a == 0 and b == 0) or (c == 0 and d == 0):\n        return \"0\"\n    #if (a == 1 and b == 0) or (c == 0 and d == 0):\n    #    return \"0\"\n    a = a + 1\n    b = b + 1\n    c = c + 1\n    d = d + 1\n    delta_a = b - a\n    delta_b = c - b\n    delta_c = d - c\n    delta_d = a - d\n    ans = (delta_a*(delta_a + 1)) + (delta_b*(delta_b + 1)) + (delta_c*(delta_c + 1)) + (delta_d*(delta_d + 1))\n    return str(ans)\nprint(solution(input()))"
    },
    {
        "number": 4306,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A,B,C,D = map(int,stdin.split())\n    return str(max((B-A),(C-D)))"
    },
    {
        "number": 4306,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = stdin.split()\n    a = int(a)\n    b = int(b)\n    c = int(c)\n    d = int(d)\n    \n    t = (((b - a) + (d - c) ) / 2)\n    print(int(t))\n    \n    return\n\nsolution(input())\n"
    },
    {
        "number": 4306,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split()\n    return str(int(inputs[0])-int(inputs[1])+int(inputs[2])-int(inputs[3]))\nprint(solution(input()))\n"
    },
    {
        "number": 4306,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split(' ')\n    a = int(inputs[0])\n    b = int(inputs[1])\n    c = int(inputs[2])\n    d = int(inputs[3])\n    if a >= b:\n        return str(b-a)\n    else:\n        return str(c-b)\nprint(solution(input()))\n"
    },
    {
        "number": 4306,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # stdin: str\n    # return: str\n    # DO NOT EDIT THE BELOW CODE\n    A, B, C, D = map(int, stdin.split())\n    time_holding_a = 0\n    time_holding_b = 0\n    while A and B:\n        if A > B:\n            if time_holding_a == 0:\n                time_holding_a = A\n            else:\n                time_holding_a += 1\n        else:\n            if time_holding_b == 0:\n                time_holding_b = B\n            else:\n                time_holding_b += 1\n        A = A - 1\n        B = B - 1\n    return str(max(time_holding_a, time_holding_b))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4306,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a,b,c,d = stdin.split()\n    a,b,c,d = int(a),int(b),int(c),int(d)\n    return str(a*b+c*d)\n"
    },
    {
        "number": 4307,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    count: int = 0\n    for i in range(1, n + 1):\n        divisors = divisors_count(i)\n        if divisors == 8:\n            count += 1\n    return count\n\n\ndef"
    },
    {
        "number": 4307,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    count = 0\n    for i in range(1, N + 1):\n        for j in range(2, i + 1):\n            if i % j == 0:\n                count += 1\n    return f'{count}'"
    },
    {
        "number": 4307,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(count_odd_number(int(stdin)))\n\n\ndef"
    },
    {
        "number": 4307,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    count = 0\n\n    for i in range(1, N + 1):\n        divisor_count = 0\n        divisors = []\n        divisor_sum = 0\n        while divisor_sum < i:\n            if i % divisor_count == 0:\n                divisor_sum += divisor_count\n                divisors.append(divisor_count)\n            divisor_count += 1\n\n        if len(divisors) == 8:\n            count += 1\n\n    return count\n\n\nprint(solution(input()))"
    },
    {
        "number": 4307,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return 1\n"
    },
    {
        "number": 4307,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    limit = int(stdin)\n    counter = 0\n    for i in range(1, limit+1):\n        if count_divisor(i) == 8:\n            counter += 1\n    return str(counter)\n\n\ndef"
    },
    {
        "number": 4307,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Given an integer N, returns the count of odd numbers with exactly eight divisors.\n    \"\"\"\n    N = int(stdin)\n    num_divisors = 0\n    for num in range(1, N + 1):\n        divisors = 0\n        for i in range(1, num):\n            if num % i == 0:\n                divisors += 2\n        if num == (divisors + 1) and divisors == 8:\n            num_divisors += 1\n    print(num_divisors)\n\nsolution(input())\n"
    },
    {
        "number": 4307,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    #Write your code here\n    N = int(stdin)\n    count = 0\n    for i in range(1, N+1):\n        divisors = 0\n        for j in range(1,i):\n            if i % j == 0:\n                divisors += 1\n        if divisors == 8:\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 4307,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 1:\n        raise ValueError\n    if n == 1:\n        return \"0\"\n    res = 0\n    if n % 2 == 0:\n        res += 1\n    for i in range(n//2, 1, -1):\n        if n % i == 0:\n            res += 8\n            if n % i**2 == 0:\n                res += 1\n            if n % i**3 == 0:\n                res += 1\n    return str(res)\n"
    },
    {
        "number": 4307,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    max_integer = 1000000\n    integer = 1\n    while integer <= max_integer:\n        number = integer\n        for i in range(1, 10):\n            divisors = 1\n            for j in range(1, i + 1):\n                if number % j == 0:\n                    divisors += 2\n            if divisors == 8:\n                if number >= 1 and number <= max_integer:\n                    print(number)\n        integer += 1\n\n    return ''\n"
    },
    {
        "number": 4308,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    return str(min(N, K) - max(N, K))"
    },
    {
        "number": 4308,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split(\" \")]\n    return str(min(k - i for i in range(n, n + k)))\n    \"\"\"\n\ndef"
    },
    {
        "number": 4308,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    crackers = list(range(1, n + 1))\n    ans = [0]\n    for i in range(1, n + 1):\n        ans.append(max(crackers) - i)\n    print(min(ans))\n"
    },
    {
        "number": 4308,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, K = stdin.split()\n    N = int(N)\n    K = int(K)\n    N_list = []\n    for _ in range(K):\n        N_list.append(int(input()))\n    # \u8ba1\u7b97N\u7684\u6700\u5c0f\u503c\n    min_N_list = min(N_list)\n    # \u8ba1\u7b97N\u7684\u6700\u5927\u503c\n    max_N_list = max(N_list)\n    return str(abs(max_N_list - min_N_list))\n"
    },
    {
        "number": 4308,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(min(k - 1, n - k + 1) - max(k - 1, n - k + 1))"
    },
    {
        "number": 4308,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # N, K = map(int, stdin.split())\n    # largest_crackers, smallest_crackers = 0, 0\n    # for crackers in range(N):\n    #     largest_crackers += crackers\n    #     if largest_crackers >= K:\n    #         break\n    # for crackers in range(N):\n    #     smallest_crackers += crackers\n    #     if smallest_crackers >= K:\n    #         break\n    # return abs(largest_crackers - smallest_crackers)\n\n    # Sample Input :\n    # 7 3\n    # Sample Output :\n    # 1\n    N, K = map(int, stdin.split())\n    largest_crackers, smallest_crackers = 0, 0\n    while largest_crackers < K:\n        largest_crackers += 1\n        smallest_crackers += 1\n    return abs(largest_crackers - smallest_crackers)\n"
    },
    {
        "number": 4308,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4308,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 7 3\n   ... ''')\n    '1'\n    >>> solution('''\n   ... 9 3\n   ... ''')\n    '4'\n    \"\"\"\n    N, K = (int(n) for n in stdin.split())\n    return str(max(N - min(K, N), max(K, N)) - min(K, N))"
    },
    {
        "number": 4308,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(min(k*(n//k), n - k*(n//k)))\n\ndef"
    },
    {
        "number": 4308,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    (n, k) = stdin.split()\n    n, k = int(n), int(k)\n    return '{}'.format(min([k, n]))\n\ndef"
    },
    {
        "number": 4309,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 100 or n > 999:\n        raise ValueError\n\n    current = n\n    while True:\n        number_of_digit = int(math.log10(current)) + 1\n        number_of_digit_string = str(current)\n        if number_of_digit == 1:\n            if number_of_digit_string[0] == number_of_digit_string[1]:\n                break\n        else:\n            if number_of_digit_string[0] == number_of_digit_string[1] and number_of_digit_string[1] == number_of_digit_string[2]:\n                break\n        current -= 1\n\n    print(str(current))\n    return None"
    },
    {
        "number": 4309,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    tens = 0\n    hundreds = 0\n    for i in range(1, n + 1):\n        if i % 10 == 1:\n            tens += 1\n        elif i % 10 == 2:\n            hundreds += 1\n        elif i % 10 == 3:\n            tens += 1\n            hundreds += 1\n        elif i % 10 == 4:\n            tens += 1\n            hundreds += 1\n            tens -= 1\n        elif i % 10 == 5:\n            tens += 1\n            hundreds += 1\n            tens -= 1\n            tens -= 1\n        elif i % 10 == 6:\n            tens += 1\n            hundreds += 1\n            tens -= 1\n            tens -= 1\n        elif i % 10 == 7:\n            tens += 1\n            hundreds += 1\n            tens -= 1\n            tens -= 1\n        elif i % 10 == 8:\n            tens += 1\n            hundreds += 1\n            tens -= 1\n            tens -= 1\n            tens -= 1\n        elif i % 10 == 9:\n            tens += 1\n            hundreds += 1\n            tens -= 1\n            tens -= 1\n            tens -= 1\n        elif i % 10 == 0:\n            hundreds += 1\n    print(tens * 100 + hundreds)"
    },
    {
        "number": 4309,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4309,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin\n    # Write your code here\n    d = int(n)\n    #print(d)\n    num = d\n    #print(num)\n    while(num):\n        a = num%10\n        b = num//10\n        c = num%10\n        if (a!= b and a!= c and b!= c):\n            print(num)\n            return num\n        num -= 1"
    },
    {
        "number": 4309,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    abc = {int(i) for i in list(stdin)}\n    num = 1\n    while len(abc)!= 1:\n        if len(abc) == 2:\n            print(num)\n        abc = {int(i) for i in list(stdin)}\n        num += 1\n    print(num)"
    },
    {
        "number": 4309,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n <= 10:\n        return '1'\n\n    a = []\n    b = []\n    c = []\n    d = []\n    e = []\n    f = []\n    g = []\n    h = []\n    i = []\n    j = []\n    k = []\n    l = []\n    m = []\n    n = []\n\n    for i in range(1, n + 1):\n        a.append(i)\n    for i in a:\n        b = list(str(i))\n        c = len(b)\n        for j in range(c):\n            d.append(b[j])\n        e.append(d)\n    for i in range(len(e)):\n        f = list(str(e[i]))\n        g = len(f)\n        for j in range(g):\n            h.append(f[j])\n        i.append(h)\n    for i in range(len(i)):\n        j = i + 1\n        k = i + 2\n        l = i + 3\n        m = i + 4\n        n = i + 5\n        while j <= n:\n            o = j + 1\n            p = j + 2\n            q = j + 3\n            r = j + 4\n            s = j + 5\n            while p <= s:\n                t = p + 1\n                u = p + 2\n                v = p + 3\n                w = p + 4\n                x = p + 5\n                while u <= w:\n                    y = u + 1\n                    z = u + 2\n                    aa = u + 3\n                    bb = u + 4\n                    cc = u + 5\n                    while y <= bb:\n                        dd = y + 1\n                        ee = y + 2\n                        ff = y + 3\n                        gg = y + 4\n                        hh = y + 5\n                        while ee <= ff:\n                            ii = ee + 1\n                            jj = ee + 2\n                            kk = ee + 3\n                            ll = ee + 4\n                            nn = ee + 5\n                            while jj <= kk:\n                                oo = jj + 1\n                                pp = jj + 2\n                                qq = jj + 3\n                                rr = jj + 4\n                                ss = jj + 5\n                                while pp <= ss:\n                                    pp = pp + 1\n                                    qq = qq + 2\n                                    rr = rr + 3\n                                    ss = ss + 4\n                                    bb = bb + 5\n                                    while rr <= ss:\n                                        rr = rr + 1\n                                        ss = ss + 1\n                                        bb = bb + 1\n                                        while rr <= ss:\n                                            rr = rr + 1\n                                            ss = ss + 1\n                                            bb = bb + 1\n                                            while rr <= ss:\n                                                rr = rr + 1\n                                                ss = ss + 1\n                                                bb = bb + 1\n                                                while rr <= ss:\n                                                    rr = rr + 1\n                                                    ss = ss + 1\n                                                    bb = bb + 1\n                                                    while rr <= ss:\n                                                        rr = rr + 1\n                                                        ss = ss + 1\n                                                        bb = bb + 1\n                                                        while rr <= ss:\n                                                            rr = rr + 1\n                                                            ss = ss + 1\n                                                            bb = bb + 1\n                                                            while rr <= ss:\n                                                                rr = rr + 1\n                                                                ss = ss + 1\n                                                                bb = bb + 1\n                                                                while rr <= ss:\n                                                                    rr = rr + 1\n                                                                    ss = ss + 1\n                                                                    bb = bb + 1\n                                                                    while rr <= ss:\n                                                                        rr = rr + 1\n                                                                        ss = ss + 1\n                                                                        bb = bb + 1\n                                                                        while rr <= ss:\n                                                                            rr = rr + 1\n                                                                            ss = ss + 1\n                                                                            bb = bb + 1\n                                                                            while rr <= ss:\n                                                                                rr = rr + 1\n                                                                                ss = ss + 1\n                                                                                bb = bb + 1\n                                                                                while rr <= ss:\n                                                                                    rr = rr + 1\n                                                                                    ss = ss + 1\n                                                                                    bb = bb + 1\n                                                                                    while rr <= ss:\n                                                                                        rr = rr + 1\n                                                                                        ss = ss + 1\n                                                                                        bb = bb + 1\n                                                                                        while rr <= ss:\n                                                                                            rr = rr + 1\n                                                                                            ss = ss + 1\n                                                                                            bb = bb + 1\n                                                                                            while rr <= ss:\n                                                                                                rr = rr + 1\n                                                                                                ss = ss + 1\n                                                                                                bb = bb + 1\n                                                                                                while rr <= ss:\n                                                                                                    rr = rr + 1\n                                                                                                    ss = ss + 1\n                                                                                                    bb = bb + 1\n                                                                                                    while rr <= ss:\n                                                                                                        rr = rr + 1\n                                                                                                        ss = ss + 1\n                                                                                                        bb = bb + 1\n                                                                                                        while rr <= ss:\n                                                                                                            rr = rr + 1\n                                                                                                            ss = ss + 1\n                                                                                                            bb = bb + 1\n                                                                                                            while rr <= ss:\n                                                                                                                    rr = rr + 1\n                                                                                                                    ss = ss + 1\n                                                                                                                    bb = bb + 1\n                                                                                                                    while rr <= ss:\n                                                                                                                        rr = rr + 1\n                                                                                                                        ss = ss + 1\n                                                                                                                        bb = bb + 1\n                                                                                                                        while rr <= ss:\n                                                                                                                             rr = rr + 1\n                                                                                                                             ss = ss + 1\n                                                                                                                             bb = bb + 1\n                                                                                                                             while rr <= ss:\n                                                                                                                                rr = rr + 1\n                                                                                                                                ss = ss + 1\n                                                                                                                                bb = bb + 1\n                                                                                                                                while rr <= ss:\n                                                                                                                                    rr = rr + 1\n                                                                                                                                    ss = ss + 1\n                                                                                                                                    bb = bb + 1\n                                                                                                                                    while rr <= ss:\n                                                                                                                                       rr = rr + 1\n                                                                                                                                       ss = ss + 1\n                                                                                                                                       bb = bb + 1\n                                                                                                                                       while rr <= ss:\n                                                                                                                                            rr = rr + 1\n                                                                                                                                            ss = ss + 1\n                                                                                                                                            bb = bb + 1\n                                                                                                                                            while rr <= ss:\n                                                                                             "
    },
    {
        "number": 4309,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4309,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4309,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    b = 100\n    m = 9\n    while b < n:\n        b += m\n        m += 1\n    m = m - 2\n    c = m\n    while c < n:\n        c += m\n        m += 1\n    d = m\n    e = n\n    while d < e:\n        d += m\n        m += 1\n    f = m\n    while f < n:\n        f += m\n        m += 1\n    g = m\n    while g < n:\n        g += m\n        m += 1\n    h = m\n    while h < n:\n        h += m\n        m += 1\n    j = m\n    while j < n:\n        j += m\n        m += 1\n    k = m\n    while k < n:\n        k += m\n        m += 1\n    l = m\n    while l < n:\n        l += m\n        m += 1\n    m = n\n    while m > 0:\n        m -= 2\n        if m == 0:\n            break\n    print(m)\n    return m\n"
    },
    {
        "number": 4309,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return \"\"\n    prev = int('1' * n)\n    current = 0\n    for i in range(1, n + 1):\n        current = int('1' * (i * 2))\n        if prev == current:\n            return str(prev)\n        prev = current\n    return str(prev)\n"
    },
    {
        "number": 4310,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A1, A2, A3 = map(int, stdin.split())\n    dp = [[float('inf') for _ in range(A3 + 1)] for _ in range(A2 + 1)]\n    # Initialize the table in bottom up fashion.\n    for i in range(A2 + 1):\n        dp[i][0] = 0\n    for j in range(A3 + 1):\n        dp[0][j] = j\n    for i in range(1, A2 + 1):\n        for j in range(1, A3 + 1):\n            if A1 <= i:\n                dp[i][j] = min(dp[i][j], dp[i - 1][j - 1] + abs(A1 - i) + abs(A2 - j))\n            if A2 <= j:\n                dp[i][j] = min(dp[i][j], dp[i - 1][j - 1] + abs(A1 - i) + abs(A3 - j))\n    return str(dp[A2][A3])\n'''\n"
    },
    {
        "number": 4310,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A_1, A_2, A_3 = stdin.split()\n    return str(min(int(A_1), int(A_2), int(A_3)))\n"
    },
    {
        "number": 4310,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A1, A2, A3 = map(int, stdin.split())\n    dp = [[float('inf')] * (A3 + 1) for _ in range(A2 + 1)]\n    for i in range(A1, A2 + 1):\n        dp[i][0] = 0\n    for j in range(A3):\n        dp[0][j] = j\n    for i in range(1, A2 + 1):\n        for j in range(1, A3 + 1):\n            dp[i][j] = min(dp[i][j], dp[i - 1][j] + abs(A1 - i), dp[i][j - 1] + abs(A2 - i))\n    return dp[A2][A3]\n"
    },
    {
        "number": 4310,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A_1, A_2, A_3 = map(int, stdin.split())\n    return str(A_1 + min(max(0, A_2 - A_1), max(0, A_3 - A_2)))\n"
    },
    {
        "number": 4310,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n,a,b,c=map(int,stdin.split())\n    tasks={(1,0):a,(2,0):b,(3,0):c}\n    m=n-3\n    if m<0:\n        return \"Infinity\"\n    tasks=sorted(tasks.items(),key=lambda x:x[1])\n    prev=tasks[0][1]\n    for i in range(1,n):\n        if tasks[i][1]==prev:\n            continue\n        if tasks[i][1]-prev>=1:\n            tasks[i][1]-=1\n        else:\n            tasks[i][1]=tasks[i-1][1]\n        if tasks[i][1]==0:\n            tasks[i][1]=tasks[i-1][1]\n        prev=tasks[i][1]\n    return str(min(x[1] for x in tasks))\n"
    },
    {
        "number": 4310,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    _, A = stdin.split()\n    A = int(A)\n\n    sum = 0\n    for i in range(1, A + 1):\n        sum += i\n\n    for i in range(A - 1):\n        sum += abs(int(A) - i)\n\n    return str(sum)\n"
    },
    {
        "number": 4310,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    c = list(map(int, stdin.split()))\n    c.sort()\n    result = 0\n    for i in range(n):\n        for j in range(i, n):\n            result += abs(c[i]-c[j])\n    return str(result)"
    },
    {
        "number": 4310,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A = list(map(int, stdin.split()))\n    A.sort(reverse=True)\n    return str(sum([0, A[0] + abs(A[1] - A[0]), A[2] + abs(A[1] - A[2])]))\n"
    },
    {
        "number": 4310,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A = list(map(int, stdin.split(\" \")))\n    dp = [[0] * 3 for _ in range(3)]\n    for i in range(3):\n        dp[i][0] = 0\n    dp[0][1] = A[1]\n    dp[1][2] = A[2]\n    for i in range(3):\n        for j in range(3):\n            if i == 0:\n                dp[i][j] = 0\n            if i == 1:\n                dp[i][j] = abs(A[0] - dp[i][j-1])\n            if i == 2:\n                dp[i][j] = abs(A[0] - dp[i][j-1]) + abs(A[1] - dp[i-1][j])\n    return str(min(dp[2]))"
    },
    {
        "number": 4310,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A1, A2, A3 = map(int, stdin.split())\n    return str(min(A1 + min(A2 - A1, A3 - A2), A3 + min(A2 - A1, A1 + A3 - A2)))\n"
    },
    {
        "number": 4311,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('8')\n    '5'\n    \"\"\"\n    s = int(stdin)\n\n    # even\n    a = s\n    b = a / 2\n    while (a - b) % 2 == 0:\n        a = (a + b) / 2\n    print(int(a))\n\n    # odd\n    a = s\n    b = a * 3 + 1\n    while (a - b) % 2!= 0:\n        a = (a + b) / 2\n    print(int(a))\n    return\n"
    },
    {
        "number": 4311,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = int(stdin)\n    min = s\n    # write your code here\n    a = set(range(s+1))\n    while len(a) > 1:\n        a = set(range(s))\n        if len(a) <= len(a-{min}):\n            return str(min)\n        min = (min + 1) // 2\n    return str(min)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4311,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = int(stdin)\n    if s == 0:\n        return 0\n    min = 1000000\n    for i in range(1, s + 1):\n        if (i % 2) == 0:\n            if i / 2 < min:\n                min = i / 2\n        else:\n            if 3 * i + 1 < min:\n                min = 3 * i + 1\n    return min\n"
    },
    {
        "number": 4311,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = int(stdin)\n    a = []\n    for i in range(1, 1000000+1):\n        a.append(i)\n    a.sort()\n    flag = True\n    for i in range(len(a)):\n        if a[i]!= a[i-1]:\n            flag = False\n            break\n    if flag:\n        print(a[-1])\n    else:\n        m = a[-1]\n        while m > s:\n            m = m // 2\n        while m < s:\n            m = 3 * m + 1\n        print(m)\n        \n"
    },
    {
        "number": 4311,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = set()\n    a.add(int(stdin))\n    s = int(stdin)\n    while True:\n        if len(a) == 1:\n            return str(s)\n        else:\n            for i in range(1, len(a)):\n                a.remove(s)\n                s = s // 2 if s % 2 == 0 else 3 * s + 1\n            a.add(s)\n"
    },
    {
        "number": 4311,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = int(stdin)\n    if s % 2!= 0:\n        return 3 * (s // 2) + 1\n    return s // 2\n"
    },
    {
        "number": 4311,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = int(stdin)\n    if s%2 == 0:\n        return str(s/2)\n    else:\n        return str(3*s+1)\n"
    },
    {
        "number": 4311,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    for i in range(len(a)):\n        if i % 2 == 1 and a[i] > a[i-1]:\n            return str(i)\n    return str(len(a))\nprint(solution(input()))\n"
    },
    {
        "number": 4311,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = int(stdin)\n    while True:\n        m = s // 2\n        if m <= 1:\n            return str(s)\n        elif a[m] == a[m - 1]:\n            return str(m)\n        else:\n            s = 3 * s + 1\n            a[m] = s\n"
    },
    {
        "number": 4311,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    s = int(stdin)\n    a = []\n    for i in range(s):\n        a.append(i)\n    while len(a) > 1:\n        if a[0] % 2 == 0:\n            a.pop(0)\n            a.pop(0)\n        else:\n            a.pop(0)\n            a.pop(0)\n            a.append(3 * a[0] + 1)\n    return str(a[0])\n"
    },
    {
        "number": 4312,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s_a,s_b,s_c,s_d = list(map(int, stdin.split(' ')))\n    while True:\n        a_h = s_a - s_b\n        a_h = a_h if a_h >= 0 else 0\n        if a_h == 0:\n            return 'Yes'\n        b_h = s_c - s_d\n        b_h = b_h if b_h >= 0 else 0\n        if b_h == 0:\n            return 'Yes'\n        s_a = s_a - 1\n        s_b = s_b - 1\n        s_c = s_c - 1\n        s_d = s_d - 1\nsolution(input())\n"
    },
    {
        "number": 4312,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A,B,C,D = stdin.split()\n    A,B,C,D = int(A), int(B), int(C), int(D)\n    while(True):\n        if (A>=0 and A<=100) and (B>=0 and B<=100) and (C>=0 and C<=100) and (D>=0 and D<=100):\n            if (A==0 or A==100) and (B==0 or B==100) and (C==0 or C==100) and (D==0 or D==100):\n                return 'No'\n            else:\n                A = A + (B*2)\n                B = B + (C*3)\n                C = C + (D*4)\n                D = D + (A*5)\n        else:\n            return 'No'\n    return \"Yes\"\nprint(solution(input()))\n\n\"\"\"\nA,B,C,D = input().split()\nA,B,C,D = int(A),int(B),int(C),int(D)\nwhile(True):\n    if (A>=0 and A<=100) and (B>=0 and B<=100) and (C>=0 and C<=100) and (D>=0 and D<=100):\n        if (A==0 or A==100) and (B==0 or B==100) and (C==0 or C==100) and (D==0 or D==100):\n            return 'No'\n        else:\n            A = A + (B*2)\n            B = B + (C*3)\n            C = C + (D*4)\n            D = D + (A*5)\n    else:\n        return 'No'\n\nprint(solution(input()))"
    },
    {
        "number": 4312,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    Takahashi = list(map(int, stdin.split()))\n    Aoki = list(map(int, stdin.split()))\n\n    while Takahashi[0] > 0 and Aoki[0] > 0:\n        # Takahashi attacks Aoki\n        Aoki[0] -= Takahashi[1]\n        if Aoki[0] <= 0:\n            print(\"No\")\n            break\n        Takahashi[0] -= Aoki[1]\n        if Takahashi[0] <= 0:\n            print(\"Yes\")\n            break\n        # Aoki attacks Takahashi\n        Takahashi[0] -= Aoki[1]\n        if Takahashi[0] <= 0:\n            print(\"Yes\")\n            break\n    else:\n        print(\"No\")\n"
    },
    {
        "number": 4312,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n'''\ndef"
    },
    {
        "number": 4312,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def calculate(x, y):\n        return x + y\n    # \uc774\ub807\uac8c \ucf54\ub4dc\ub85c \ud480\uba74 \ub418\ub294\ub370, \uac1c\ud589\uc774 \uc798 \ub098\uc624\uc9c0 \uc54a\ub294\ub2e4.\n    a, b, c, d = map(int, stdin.split())\n    # print(a, b, c, d)\n    if calculate(a, b) > calculate(c, d):\n        return \"Yes\"\n    else:\n        return \"No\"\nsolution(\"10 9 10 10\")"
    },
    {
        "number": 4312,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = list(map(int, stdin.split()))\n    while True:\n        A = A - C\n        B = B - D\n        if A <= 0 or B <= 0:\n            break\n        C = C - 1\n        D = D - 1\n    if A <= 0:\n        return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4312,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    health, strength, A, B, C, D = map(int, stdin.strip().split())\n    if C <= D:\n        if A <= (health - (strength * (D // C))):\n            return \"Yes\"\n        else:\n            return \"No\"\n    else:\n        if B <= (health - (strength * (D // C))):\n            return \"Yes\"\n        else:\n            return \"No\""
    },
    {
        "number": 4312,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if float(stdin.split(\" \")[0]) <= float(stdin.split(\" \")[1]) else \"No\""
    },
    {
        "number": 4312,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    if (a > d) and (a > c):\n        if (a - c) < (d - b):\n            return \"No\"\n    if (a < c) and (a < d):\n        if (c - b) < (d - a):\n            return \"No\"\n    if (c > d) and (c > a):\n        if (c - b) < (d - a):\n            return \"No\"\n    if (c < a) and (c < d):\n        if (a - b) < (d - c):\n            return \"No\"\n    return \"Yes\"\n"
    },
    {
        "number": 4312,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    print(\"Yes\" if (A-C <= D) else \"No\")\n    return None\n"
    },
    {
        "number": 4313,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input_lines = stdin.split('\\n')\n    n = int(input_lines[0])\n    gems = []\n    for i in range(1, n + 1):\n        gems.append(int(input_lines[i]))\n    gems_value = [0] * n\n    for i in range(0, n):\n        gems_value[i] = gems[i]\n    costs = []\n    for i in range(1, n + 1):\n        costs.append(int(input_lines[i]))\n\n    gems_value.sort(reverse=True)\n    costs.sort(reverse=True)\n    print(gems_value)\n    print(costs)\n    print()\n\n    print(solution_recursive(0, n - 1, 0, 0))\n\n\ndef"
    },
    {
        "number": 4313,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, *v_i = map(int, stdin.split())\n    c_i, *v_j = map(int, stdin.split())\n    x = sum(v_i)\n    y = sum(c_i)\n    for i in range(1, n):\n        x -= v_i[i-1]\n        y -= c_i[i-1]\n        if x < y:\n            break\n        x += v_i[i]\n        y += c_i[i]\n    return str(x - y)\n"
    },
    {
        "number": 4313,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def gold_value(gem: int) -> int:\n        return gem if gem <= 10 else gem - 10\n\n    n, *vals = map(int, stdin.split())\n    return f'{max(sum(v - gold_value(v) for v in vals), 0)}'\n"
    },
    {
        "number": 4313,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    gems = list(map(int, stdin.split()))\n    costs = list(map(int, stdin.split()))\n    gems.sort(reverse=True)\n    costs.sort(reverse=True)\n    return str(sum(gems[0:N]) - sum(costs[0:N]))"
    },
    {
        "number": 4313,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split()\n    num_gems = int(inputs[0])\n    costs = []\n    for i in range(num_gems):\n        costs.append(int(inputs[i + 1]))\n    num_costs = int(inputs[num_gems + 1])\n    opt_values = []\n    for i in range(num_gems):\n        if costs[i] > num_costs:\n            continue\n        opt_values.append(num_costs - costs[i])\n    max_val = 0\n    for i in range(len(opt_values)):\n        if opt_values[i] > max_val:\n            max_val = opt_values[i]\n    return str(max_val)\n"
    },
    {
        "number": 4313,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    gems = stdin.split(\"\\n\")[1:]\n    gems.sort(key=lambda x: int(x))\n    curr_cost = 0\n    total_cost = 0\n    for gem in gems:\n        if curr_cost + int(gem) <= int(gem):\n            curr_cost += int(gem)\n            total_cost += curr_cost\n        else:\n            curr_cost = int(gem)\n    print(total_cost - curr_cost)\n    return total_cost - curr_cost"
    },
    {
        "number": 4313,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, *C = map(int, stdin.split())\n    V = [int(i) for i in stdin.split()]\n    gems = set(V)\n    gems_left = set(V)\n    sum_value = 0\n    for _ in range(N - 1):\n        g = max(gems_left)\n        sum_value += g\n        gems_left.remove(g)\n    g = max(gems_left)\n    sum_value += g\n    return str(sum_value - max(C))"
    },
    {
        "number": 4313,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, *gems = list(map(int, stdin.split()))\n\n    cost = sum(map(int, stdin.split()))\n\n    s = sum(gems)\n    x = s + cost\n    y = cost\n    res = x - y\n\n    if res > 0:\n        print(res)\n    else:\n        print(0)\n\nsolution(input())"
    },
    {
        "number": 4313,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, *C = list(map(int, stdin.split()))\n    gem_cost = {gem: gem_cost for gem, gem_cost in zip(range(1, N+1), C)}\n    sorted_gem_cost = sorted(gem_cost.items(), key=lambda gem_cost: gem_cost[1])\n    return str(sum([v for k, v in sorted_gem_cost]))\n    "
    },
    {
        "number": 4313,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, V, C = map(int, stdin.split())\n    values = list(map(int, stdin.split()))\n    costs = list(map(int, stdin.split()))\n\n    max_value = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            max_value = max(max_value, values[i] + values[j] - costs[i] - costs[j])\n    return str(max_value)\n"
    },
    {
        "number": 4314,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    height, width = list(map(int, stdin.split()))\n    # grid = [[x for x in stdin.split()] for _ in range(height)]\n    grid = [[stdin.count('#')] * width] * height\n    grid_copy = copy.deepcopy(grid)\n    while True:\n        new_grid = []\n        for i in range(height):\n            row = grid[i]\n            next_row = []\n            for j in range(width):\n                cell = row[j]\n                if cell == '#':\n                    count = 0\n                    for x in range(i-1, -1, -1):\n                        if x == -1:\n                            continue\n                        if grid[x][j] == '#':\n                            count += 1\n                    for y in range(i+1, height):\n                        if y == height:\n                            continue\n                        if grid[y][j] == '#':\n                            count += 1\n                    if count >= 4:\n                        next_row.append('.')\n                    else:\n                        next_row.append('#')\n                else:\n                    count = 0\n                    for x in range(i-1, -1, -1):\n                        if x == -1:\n                            continue\n                        if grid[x][j] == '#':\n                            count += 1\n                    for y in range(i+1, height):\n                        if y == height:\n                            continue\n                        if grid[y][j] == '#':\n                            count += 1\n                    if count == 0:\n                        next_row.append('#')\n                    else:\n                        next_row.append('.')\n            new_grid.append(next_row)\n        if new_grid == grid:\n            break\n        grid = new_grid\n    new_grid = []\n    for i in range(height):\n        row = grid[i]\n        next_row = []\n        for j in range(width):\n            cell = row[j]\n            if cell == '#':\n                count = 0\n                for x in range(i-1, -1, -1):\n                    if x == -1:\n                        continue\n                    if grid[x][j] == '#':\n                        count += 1\n                for y in range(i+1, height):\n                    if y == height:\n                        continue\n                    if grid[y][j] == '#':\n                        count += 1\n                if count >= 4:\n                    next_row.append('.')\n                else:\n                    next_row.append('#')\n            else:\n                count = 0\n                for x in range(i-1, -1, -1):\n                    if x == -1:\n                        continue\n                    if grid[x][j] == '#':\n                        count += 1\n                for y in range(i+1, height):\n                    if y == height:\n                        continue\n                    if grid[y][j] == '#':\n                        count += 1\n                if count == 0:\n                    next_row.append('#')\n                else:\n                    next_row.append('.')\n        new_grid.append(next_row)\n    grid = new_grid\n    result = []\n    for i in range(height):\n        result.append(''.join(grid[i]))\n    return '\\n'.join(result)\n"
    },
    {
        "number": 4314,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4314,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    [H, W] = list(map(int, stdin.split()))\n    grid = [[] for _ in range(H)]\n    for i in range(H):\n        for j in range(W):\n            if stdin[i * W + j] == '#':\n                grid[i].append('#')\n            else:\n                grid[i].append('.')\n    for row in grid:\n        print(''.join(row))\n    return\n\nsolution(input())\nsolution(input())\n\"\"\"\nfrom typing import List\n\n\nclass Solution:\n    # @param {string} input\n    # @return {string}\n    def solution(self, input: str) -> str:\n        H, W = list(map(int, input.split()))\n        grid = [['.'] * (W + 2) for _ in range(H + 2)]\n        for i in range(H):\n            for j in range(W):\n                if input[i * W + j] == '#':\n                    grid[i + 1][j + 1] = '#'\n        for i in range(H):\n            print(''.join(grid[i]))\n"
    },
    {
        "number": 4314,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 4314,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.split())\n    grid = stdin.split()\n    grid = [[int(c) for c in r.split()] for r in grid]\n\n    def remove_row(row):\n        nonlocal grid\n        if not row:\n            return\n        grid = grid[1:]\n        for c in range(len(row)):\n            grid[-1][c] = grid[-1][c-1]\n        grid[-1] = grid[-1][:-1]\n        return\n\n    def remove_col(col):\n        nonlocal grid\n        if not col:\n            return\n        grid = grid[1:]\n        for r in range(len(col)):\n            grid[r][-1] = grid[r-1][-1]\n        grid[r] = grid[r][:-1]\n        return\n\n    def left_to_right(row, col):\n        nonlocal grid\n        if row == 0 or col == 0:\n            return\n        if row == 1 and col == 0:\n            return\n        if row == 1 and col == 1:\n            grid[0][0] = grid[0][1]\n            grid[0] = grid[0][2:]\n            return\n        grid[0][0] = grid[0][1]\n        grid[0] = grid[0][2:]\n        remove_col(col-1)\n        remove_col(col-2)\n        remove_col(col-3)\n        remove_col(col-4)\n        remove_col(col-5)\n        remove_col(col-6)\n        remove_col(col-7)\n        remove_row(row-1)\n        remove_row(row-2)\n        remove_row(row-3)\n        remove_row(row-4)\n        remove_row(row-5)\n        remove_row(row-6)\n        remove_row(row-7)\n        return\n\n    def right_to_left(row, col):\n        nonlocal grid\n        if row == 0 or col == 0:\n            return\n        if row == 1 and col == 1:\n            grid[0][0] = grid[0][0]\n            grid[0] = grid[0][1:]\n            return\n        if row == 1 and col == 2:\n            grid[0][0] = grid[0][0]\n            grid[0] = grid[0][1:]\n            return\n        if row == 1 and col == 3:\n            grid[0][0] = grid[0][0]\n            grid[0] = grid[0][1:]\n            return\n        if row == 1 and col == 4:\n            grid[0][0] = grid[0][0]\n            grid[0] = grid[0][1:]\n            return\n        if row == 1 and col == 5:\n            grid[0][0] = grid[0][0]\n            grid[0] = grid[0][1:]\n            return\n        if row == 1 and col == 6:\n            grid[0][0] = grid[0][0]\n            grid[0] = grid[0][1:]\n            return\n        if row == 1 and col == 7:\n            grid[0][0] = grid[0][0]\n            grid[0] = grid[0][1:]\n            return\n        if row == 2 and col == 2:\n            grid[0][0] = grid[0][1]\n            grid[0] = grid[0][2:]\n            return\n        if row == 2 and col == 3:\n            grid[0][0] = grid[0][0]\n            grid[0] = grid[0][1:]\n            return\n        if row == 2 and col == 4:\n            grid[0][0] = grid[0][0]\n            grid[0] = grid[0][1:]\n            return\n        if row == 2 and col == 5:\n            grid[0][0] = grid[0][0]\n            grid[0] = grid[0][1:]\n            return\n        if row == 2 and col == 6:\n            grid[0][0] = grid[0][0]\n            grid[0] = grid[0][1:]\n            return\n        if row == 2 and col == 7:\n            grid[0][0] = grid[0][0]\n            grid[0] = grid[0][1:]\n            return\n        if row == 3 and col == 3:\n            grid[0][0] = grid[0][1]\n            grid[0] = grid[0][2:]\n            return\n        if row == 3 and col == 4:\n            grid[0][0] = grid[0][0]\n            grid[0] = grid[0][1:]\n            return\n        if row == 3 and col == 5:\n            grid[0][0] = grid[0][0]\n            grid[0] = grid[0][1:]\n            return\n        if row == 3 and col == 6:\n            grid[0][0] = grid[0][0]\n            grid[0] = grid[0][1:]\n            return\n        if row == 3 and col == 7:\n            grid[0][0] = grid[0][0]\n            grid[0] = grid[0][1:]\n            return\n        if row == 4 and col == 4:\n            grid[0][0] = grid[0][1]\n            grid[0] = grid[0][2:]\n            return\n        if row == 4 and col == 5:\n            grid[0][0] = grid[0][0]\n            grid[0] = grid[0][1:]\n            return\n        if row == 4 and col == 6:\n            grid[0][0] = grid[0][0]\n            grid[0] = grid[0][1:]\n            return\n        if row == 4 and col == 7:\n            grid[0][0] = grid[0][0]\n            grid[0] = grid[0][1:]\n            return\n        if row == 5 and col == 5:\n            grid[0][0] = grid[0][1]\n            grid[0] = grid[0][2:]\n            return\n        if row == 5 and col == 6:\n            grid[0][0] = grid[0][0]\n            grid[0] = grid[0][1:]\n            return\n        if row == 5 and col == 7:\n            grid[0][0] = grid[0][0]\n            grid[0] = grid[0][1:]\n            return\n        if row == 6 and col == 6:\n            grid[0][0] = grid[0][1]\n            grid[0] = grid[0][2:]\n            return\n        if row == 6 and col == 7:\n            grid[0][0] = grid[0][0]\n            grid[0] = grid[0][1:]\n            return\n        if row == 7 and col"
    },
    {
        "number": 4314,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    H, W = stdin.split()\n    H = int(H)\n    W = int(W)\n    grid = [[i for i in stdin.split()] for _ in range(H)]\n    while True:\n        new_grid = [['.' for _ in range(W)] for _ in range(H)]\n        white_count = 0\n        for i in range(H):\n            for j in range(W):\n                if grid[i][j] == '.':\n                    continue\n                else:\n                    white_count += 1\n                    if white_count == H * W:\n                        return ''.join([''.join(row) for row in new_grid])\n                    else:\n                        if grid[i][j] == '#':\n                            new_grid[i][j] = '#'\n                        else:\n                            new_grid[i][j] = '.'"
    },
    {
        "number": 4314,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.strip().split())\n    grid = stdin.strip()\n\n    def compress_row(row: str) -> str:\n        res = []\n        i = 0\n        while i < len(row):\n            if i + 1 < len(row) and row[i] == row[i + 1]:\n                res.append(row[i] + '.')\n                i += 2\n            else:\n                res.append(row[i])\n                i += 1\n        return ''.join(res)\n\n    def compress_col(col: str) -> str:\n        res = []\n        i = 0\n        while i < len(col):\n            if i + 1 < len(col) and col[i] == col[i + 1]:\n                res.append(col[i] + '.')\n                i += 2\n            else:\n                res.append(col[i])\n                i += 1\n        return ''.join(res)\n\n    res = []\n    for i in range(H):\n        for j in range(W):\n            if grid[i][j] == '#':\n                res.append('#')\n                continue\n            if i > 0 and grid[i - 1][j] == '#':\n                res.append('.')\n                continue\n            if j > 0 and grid[i][j - 1] == '#':\n                res.append('.')\n                continue\n            res.append('.')\n        res.append('\\n')\n    return ''.join(res)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4314,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4314,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    H, W = map(int, stdin.split())\n    grid = stdin.split('\\n')\n    for r in range(H):\n        if '#' in grid[r]:\n            break\n    grid = grid[:r]\n    for c in range(W):\n        if '#' in grid[:, c]:\n            break\n    grid = grid[:, :c]\n    return '\\n'.join([''.join(row) for row in grid])\n"
    },
    {
        "number": 4314,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    pass\n"
    },
    {
        "number": 4315,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    radius = float(stdin)\n    return f'{2*math.pi*radius:.3f}'"
    },
    {
        "number": 4315,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    return str(round(2*math.pi*r))"
    },
    {
        "number": 4315,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return '%.2f' % (3.14 * (float(stdin)))"
    },
    {
        "number": 4315,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    radius = int(stdin)\n    return str(2 * 3.14159 * radius)\n"
    },
    {
        "number": 4315,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    radius = int(stdin)\n    return str(2 * 3.14159265358979323846264338327950288) + \".\" + str(6.28318530717958623200)\n"
    },
    {
        "number": 4315,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4315,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    r: int = int(stdin)\n    return str(6.28318530717958623200 - 2 * 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679)"
    },
    {
        "number": 4315,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    R = int(stdin)\n    return str(2*3.14*R)"
    },
    {
        "number": 4315,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    R = int(stdin)\n    return str(pi * R * 2)"
    },
    {
        "number": 4315,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    r: int = int(stdin)\n    return str(3.14159265358979323846 * r * r)"
    },
    {
        "number": 4316,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    if s.count('A') == 2 and s.count('S') == 2:\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 4316,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    letters = stdin\n    letter_dict = {}\n    letter_dict_reversed = {}\n    \n    for letter in letters:\n        if letter in letter_dict:\n            letter_dict[letter] += 1\n            if letter_dict[letter] % 2!= 0:\n                letter_dict_reversed[letter] = letter_dict[letter]\n            else:\n                letter_dict_reversed[letter] = letter_dict[letter] - 1\n        else:\n            letter_dict[letter] = 1\n            letter_dict_reversed[letter] = 1\n    \n    for key, value in letter_dict.items():\n        if value % 2 == 0:\n            if value == 2:\n                return \"Yes\"\n            else:\n                continue\n        else:\n            if value == 1:\n                return \"No\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4316,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    returns True if str consists of exactly two kinds of characters which both appear twice in S\n    \"\"\"\n    upper_set = set()\n    lower_set = set()\n    for letter in stdin:\n        if letter.isupper():\n            upper_set.add(letter)\n        if letter.islower():\n            lower_set.add(letter)\n    if len(upper_set) == 2 and len(lower_set) == 2:\n        return \"Yes\"\n    return \"No\"\n\nprint(solution(input()))"
    },
    {
        "number": 4316,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    if len(s)!= 4 or s.isalpha() is not True:\n        return \"No\"\n    if len(set(s))!= 2:\n        return \"No\"\n    for i in s:\n        if s.count(i) == 2:\n            return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4316,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    if stdin == 'ASSA':\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 4316,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    if len(s)!= 4:\n        return 'No'\n    if set(s.lower())!= set('a'):\n        return 'No'\n    else:\n        if 'a' * 2 in s and 'a' * 2 in s:\n            return 'Yes'\n        else:\n            return 'No'\n"
    },
    {
        "number": 4316,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Your code goes here\n    unique_chars = set()\n    #get the unique characters of the string\n    for char in stdin:\n        unique_chars.add(char)\n    # check if the unique characters are exactly 2\n    if len(unique_chars) == 2:\n        return 'Yes'\n    else:\n        return 'No'\nprint(solution('ASSA'))"
    },
    {
        "number": 4316,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    dict_s = {}\n    for i in stdin:\n        if i not in dict_s:\n            dict_s[i] = 1\n        else:\n            dict_s[i] += 1\n\n    if len(dict_s) == 2:\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 4316,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # remove '\\n'\n    stdin = stdin.strip()\n\n    # create list of all lowercase letters\n    lower_case_letters = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\",\n                          \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n\n    # create list of all uppercase letters\n    upper_case_letters = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\",\n                          \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"]\n\n    # convert all letters to lower case\n    letters = lower_case_letters + upper_case_letters\n\n    # compare each letter with other\n    for letter in letters:\n        # if letter exists in stdin\n        if stdin.count(letter) > 1:\n            # print 'Yes'\n            return 'Yes'\n    # print 'No'\n    return 'No'\n"
    },
    {
        "number": 4316,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    You're given a string S consisting of uppercase English letters,\n    where each letter is an ascii character.\n    Write a function that returns a boolean value:\n    True if S consists of exactly two kinds of characters which both appear twice in S;\n    otherwise, return False.\n    \"\"\"\n    char_d = {x: 0 for x in set(stdin)}\n    s_d = dict()\n\n    for c in stdin:\n        if c in char_d:\n            char_d[c] += 1\n            if char_d[c] > 1:\n                s_d[c] = char_d[c]\n\n    print(s_d)\n    print(len(s_d))\n    if len(s_d) == 2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 4317,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = list(map(int, stdin.split()))\n    return f'{max(a+b, a-b, a*b)}'"
    },
    {
        "number": 4317,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(' ')\n    if len(stdin)!= 3:\n        raise Exception('Wrong Input')\n\n    try:\n        a, b = int(stdin[0]), int(stdin[1])\n        if a < 0 or b < 0:\n            raise Exception('Wrong Input')\n    except Exception as e:\n        raise Exception('Wrong Input')\n\n    print(max(a + b, a - b, a * b))"
    },
    {
        "number": 4317,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return '{}'.format(max(a + b, a - b, a * b))"
    },
    {
        "number": 4317,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    [a, b] = list(map(int, stdin.split()))\n    if a + b > a * b:\n        print(a + b)\n    elif a - b > a * b:\n        print(a - b)\n    else:\n        print(a * b)\n"
    },
    {
        "number": 4317,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    # print(a,b)\n    if a + b > a * b:\n        print(a + b)\n    elif a - b > a * b:\n        print(a - b)\n    elif a * b > a + b:\n        print(a * b)\n    return \"\""
    },
    {
        "number": 4317,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    max_num = -1\n    if A > B:\n        max_num = A + B\n    elif A < B:\n        max_num = A - B\n    else:\n        max_num = A * B\n    return str(max_num)\n"
    },
    {
        "number": 4317,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4317,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    largest = a\n    if b > largest:\n        largest = b\n    if a * b > largest:\n        largest = a * b\n    if b - a > largest:\n        largest = b - a\n    return str(largest)\n"
    },
    {
        "number": 4317,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return max(A+B, A-B, A*B)"
    },
    {
        "number": 4317,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B = (stdin.split())\n    return max(int(A) + int(B), int(A) - int(B), int(A) * int(B))\n"
    },
    {
        "number": 4318,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    returns number of inns from which you can see the ocean\n    \"\"\"\n    n: int = int(stdin.split()[0])\n    mountains: list = list(map(int, stdin.split()[1:]))\n\n    # map each height in mountains to the nearest inn from west\n    distances: list = list(map(lambda h: h if h < mountains[0] else mountains[0], mountains))\n\n    # iterate through all heights and check if you can see the oc and add the number of inns\n    # if you can see the oc from any inn then return the number of inns\n    # if you can't see the oc from any inn then return -1\n    # if the oc can be seen from any inn then return the number of inns + 1\n    for i in range(1, n):\n        for j in range(i):\n            # if the oc can be seen from j and j is farther than the oc from the inn i\n            if mountains[j] > mountains[i] and mountains[j] < distances[i]:\n                distances[i] = mountains[j]\n\n    return distances.count(max(distances))"
    },
    {
        "number": 4318,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    h = list(map(int, stdin.split()))\n    h = sorted(h, reverse=True)\n    # print(h)\n    count = 0\n    for i in range(n):\n        if h[i] < h[i-1]:\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 4318,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    h = list(map(int, stdin.split()))\n    m = max(h)\n\n    i = 0\n    while h[i] <= m:\n        i += 1\n\n    print(i)\n"
    },
    {
        "number": 4318,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution([1, 1, 2, 3, 4])\n    '3'\n    \"\"\"\n    N = int(stdin.pop(0))\n    mountain = list(map(int, stdin))\n\n    mountain.sort()\n    temp = 0\n    answer = 0\n    for i in range(N):\n        if mountain[i] < mountain[i - 1] and mountain[i] <= mountain[i + 1] and mountain[i] > temp:\n            answer += 1\n            temp = mountain[i]\n\n    return str(answer)\n"
    },
    {
        "number": 4318,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, *mountains = list(map(int, stdin.split()))\n    for i in range(len(mountains)):\n        if mountains[i] > max(mountains[0:i+1]):\n            return f\"{i+1}\"\n    return f\"{len(mountains)}\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 4318,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    stdin = stdin.split(\"\\n\")\n    inns = []\n    for i in range(int(stdin[0])):\n        inns.append(int(stdin[i+1]))\n    n = inns[0]\n    inns = inns[1:]\n    inns.sort()\n    h = 0\n    c = 0\n    for i in range(n):\n        if h > inns[i]:\n            c += 1\n        else:\n            h = inns[i]\n    print(c)\n    return c\n\nsolution(input())\n"
    },
    {
        "number": 4318,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    inners = stdin.split()\n    mountains = []\n    inners.sort(reverse=True)\n    for i in range(0, len(inners), 2):\n        mountains.append(inners[i])\n        mountains.append(inners[i + 1])\n\n    mountains.reverse()\n    height = []\n    for i in range(len(mountains)):\n        height.append(mountains[i])\n        height.append(mountains[i + 1])\n    height.sort(reverse=True)\n    return str(mountains.index(mountains[0]) + 1)\n\n\nprint(solution(input()))"
    },
    {
        "number": 4318,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, h = list(map(int, stdin.split()))\n    mountains = [int(h) for h in stdin.split()]\n    return str(mountains.count(max(mountains)))"
    },
    {
        "number": 4318,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split()\n    n = int(input[0])\n    mountains = sorted(map(int, input[1:]))\n    num_of_inns = 0\n    curr_height = mountains[0]\n    for i in range(1, n):\n        if mountains[i] >= curr_height:\n            num_of_inns += 1\n            curr_height = mountains[i]\n    return str(num_of_inns)\n"
    },
    {
        "number": 4318,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return '{}'.format(int(stdin.split()[0]))\n"
    },
    {
        "number": 4319,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def count_stairs(stairs_arr: list) -> int:\n        stairs_arr.sort(reverse=True)\n        count = 0\n        for i in range(len(stairs_arr)):\n            count += 1 + (count_stairs(stairs_arr[:i]) + count_stairs(stairs_arr[i + 1:]))\n        return count\n    return str(count_stairs([int(i) for i in stdin.split(\" \")]))"
    },
    {
        "number": 4319,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1:]\n\n    # Number of stairways, each with x steps\n    t = 1\n    for i in range(n-1):\n        t *= (s[i]+1)\n\n    # Number of steps in each stairway\n    # Not using the built-in sum()\n    t = 0\n    for i in range(n):\n        t += s[i]\n\n    return f\"{t} {t}\""
    },
    {
        "number": 4319,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    data = stdin.split()\n    data = sorted(data)\n    # print(data)\n    steps = 0\n    stair = []\n    for i in data:\n        # print(i)\n        steps += int(i)\n        stair.append(steps)\n    # print(stair)\n    res = str(steps) +''\n    for i in range(len(stair)):\n        # print(i)\n        res += str(stair[i]) +''\n    res = res[:-1]\n    # print(res)\n    return res\n"
    },
    {
        "number": 4319,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for _ in range(n):\n        stdin = stdin.split()\n        result = ''\n        for i in range(len(stdin)-1):\n            result += str(i+1) +''\n        result += str(stdin[-1])\n        print(result)\n\nsolution(input())"
    },
    {
        "number": 4319,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    steps = set()\n    for num in map(int, stdin.split()):\n        steps.add(num)\n    return str(len(steps)) +'' +''.join(str(x) for x in sorted(steps))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4319,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return str(0)\n    stairs = list(map(int, stdin.split()))\n    stairs.sort(reverse=True)\n    steps = 1\n    stairs_count = 1\n    for i in range(n-1):\n        if stairs[i] > stairs[i+1]:\n            steps += 1\n        stairs_count += 1\n    return str(steps) + \" \" + str(stairs_count)\n"
    },
    {
        "number": 4319,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return f'{solution_recursive(stdin)}'\n\ndef"
    },
    {
        "number": 4319,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    result = []\n    stairs = []\n    for i in range(n):\n        stairs.append((1, a[i]))\n    stairs.sort(key=lambda x: (x[1], x[0]))\n    num = 0\n    step = 0\n    while stairs:\n        num += 1\n        step += stairs.pop(0)[1]\n        step = step + 1\n        if step == stairs[0][0]:\n            step = step + 1\n            stairs.pop(0)\n            num = num + 1\n    result.append(str(num))\n    if len(stairs) == 0:\n        result.append(str(0))\n    else:\n        result.append(str(stairs[0][0]))\n    result.append(str(step))\n    return''.join(result)\n"
    },
    {
        "number": 4319,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(i) for i in stdin.split()]\n    t = 1\n    sum = a[0]\n    res = []\n    for i in range(n - 1):\n        if sum + a[i + 1] > a[i]:\n            sum += a[i + 1]\n            t += 1\n        else:\n            res.append(str(t))\n            t = 1\n            sum = a[i + 1]\n    res.append(str(t))\n    return \" \".join(res)\n"
    },
    {
        "number": 4319,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    n = int(stdin[0])\n    stairs = list(map(int, stdin[1].split()))\n\n    stairs_count = 0\n    stairs_steps = []\n    for i in range(1, n + 1):\n        if i == 1 or i == 2:\n            stairs_count += 1\n            stairs_steps.append(i)\n        else:\n            steps = stairs_steps.pop()\n            stairs_count += steps\n            stairs_steps.append(steps)\n    return str(stairs_count) + '\\n' +''.join(map(str, stairs_steps))\n"
    },
    {
        "number": 4320,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    --- Day 1: Report Repair ---\n    After saving Christmas five years in a row, you've decided to take a vacation at a nice resort on a tropical island. Surely, Christmas will go on without you.\n    The tropical island has its own currency and is entirely cash-only. The gold coins used there have a little picture of a starfish; the locals just call them stars. None of the currency exchanges seem to have heard of them, but somehow, you'll need to find fifty of these coins by the time you arrive so you can pay the deposit on your room.\n    To save your vacation, you need to get all fifty stars by December 25th.\n    Collect stars by solving puzzles. Two puzzles will be made available on each day in the Advent calendar; the second puzzle is unlocked when you complete the first. Each puzzle grants one star. Good luck!\n    '''\n    import math\n\n    for line in stdin.splitlines():\n        pass\n    return str(math.ceil(int(line) / 2))\n"
    },
    {
        "number": 4320,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    #print(stdin)\n    s = stdin.split()\n    #print(s)\n    n = int(s[0])\n    x = int(s[1])\n    k = int(s[2])\n    if x > 0 and k > 1:\n        for i in range(1,k):\n            x *= (2*i)\n        for i in range(2,k):\n            x *= (4*i)\n        print(x)\n        print(n - x)\n        return str(n - x)\n    else:\n        return str(0)\n\nfor i in range(1,11):\n    print(solution(str(i)))"
    },
    {
        "number": 4320,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\nprint(solution(input()))\n"
    },
    {
        "number": 4320,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, t = [int(i) for i in stdin.split()]\n    for _ in range(t):\n        n = int(input())\n        for _ in range(3):\n            x = int(input())\n            k = int(input())\n            if n == x + 2 * x + 4 * x + 2 ** (k - 1) * x:\n                return str(x)\n    return \"0\"\n"
    },
    {
        "number": 4320,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        n = int(stdin.split()[i])\n        for x in range(2, n):\n            if n % x == 0:\n                break\n            elif x == n - 1:\n                print(x)\n                break\n        else:\n            return 'No integer answer'\n\nsolution(input())\n"
    },
    {
        "number": 4320,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    _, n = stdin.split()\n    n = int(n)\n    x = 2\n    k = 2\n    while n - 2**k*x >= 0:\n        x += 2\n        k += 1\n    return str(x)\n\nprint(solution(input()))"
    },
    {
        "number": 4320,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = n\n    x = x - 2 * x % 4\n    while x >= 2:\n        x = x - 4 * x % 8\n        x = x - 2 * x % 4\n        x = x - 4 * x % 8\n        x = x - 2 * x % 4\n        x = x - 4 * x % 8\n    return str(x)"
    },
    {
        "number": 4320,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, *a, = (int(x) for x in stdin.split())\n    ans = n\n    for i in range(1, len(a)):\n        for j in range(1, i):\n            ans = min(ans, a[i] + 2 * a[j] + 4 * a[i - j] + 2**j * a[i - j])\n    return str(ans)"
    },
    {
        "number": 4320,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    total = 0\n    for _ in range(int(stdin)):\n        total += int(stdin)\n        if total > int(stdin):\n            break\n    return str(total)\n"
    },
    {
        "number": 4320,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(1, n + 1):\n        print(i)\n"
    },
    {
        "number": 4321,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    k = int(stdin)\n    while n >= 10:\n        n = n // 10 + n % 10\n    return str(n - k)"
    },
    {
        "number": 4321,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.split()\n    return n[:len(n) - int(k)]\n"
    },
    {
        "number": 4321,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    while n:\n        n -= 1\n        if n % 10:\n            n = (n//10)*10 - 1\n        else:\n            n = n//10\n    return n\n\ndef"
    },
    {
        "number": 4321,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.split()\n    n = int(n)\n    k = int(k)\n    for i in range(k):\n        if n%10!= 0:\n            n -= 1\n        else:\n            n /= 10\n    print(int(n))\n    return int(n)"
    },
    {
        "number": 4321,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n == 1:\n        return 1\n    res = n - k\n    res = res if res > 0 else 0\n    res = int(str(res)[1:])\n    return res\n"
    },
    {
        "number": 4321,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    return f'{int(float(stdin) // (10 ** len(str(int(stdin))))):d}'\n    '''\n    return f'{int(stdin) - 1:d}'\n"
    },
    {
        "number": 4321,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    print(n - 1)\n    return n - 1\n"
    },
    {
        "number": 4321,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n  n, k = map(int, stdin.split())\n  return str(n - k)\n"
    },
    {
        "number": 4321,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    res = []\n    while n > 0:\n        if n % 10!= 0:\n            n -= 1\n            res.append(n)\n        else:\n            n = int(n/10)\n            res.append(n)\n    res = res[::-1]\n    for i in range(k):\n        if res[i]!= 0:\n            res[i] -= 1\n        else:\n            res[i] = res[i]//10\n    return ''.join(map(str, res))\n"
    },
    {
        "number": 4321,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4322,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    num = map(int, stdin.strip().split())\n    num = list(num)\n\n    # Number of people in circle\n    k = 1\n    # Result array\n    result = []\n\n    for i in range(1, n + 1):\n        if i!= num[i - 1]:\n            # We found someone in the circle\n            # Find the first person in the circle\n            j = 1\n            while j < k and i!= num[j - 1]:\n                j += 1\n            # Insert the first person in the circle\n            result.append(num[j - 1])\n            # Find the next person in the circle\n            while j < k and j + 1!= i:\n                j += 1\n            # Insert the next person in the circle\n            result.append(num[j])\n            # Add the i-th person to the circle\n            result.append(num[i - 1])\n            # Update k\n            k += 1\n            # Update the final result\n            result = list(map(str, result))\n            return''.join(result) + '\\n'\n\n    # We couldn't find anyone in the circle\n    # We found all people in the circle\n    # The resulting array should be of size k\n    result = list(map(str, num[1:]))\n    return''.join(result) + '\\n'\n"
    },
    {
        "number": 4322,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    heights = list(map(int, stdin.split()))\n    heights.sort()\n    start = 0\n    res = []\n    for height in heights:\n        if len(res) == 0:\n            res.append(height)\n            start = height\n        elif height - start > 1:\n            res.append(start)\n            res.append(height)\n            start = height\n    if len(res) == 0:\n        res.append(start)\n    res.sort()\n    return str(len(res)) + '\\n' +''.join(map(str, res))\n"
    },
    {
        "number": 4322,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    heights = list(map(int, stdin.strip().split()))\n    \n    res = 0\n    max_heights = []\n    \n    for idx, height in enumerate(heights):\n        if idx < len(heights) - 1:\n            if height - heights[idx + 1] <= 1:\n                max_heights.append(height)\n    \n    while max_heights:\n        curr = max_heights.pop(0)\n        res += 1\n        max_heights.extend(max_heights)\n        heights.remove(curr)\n    \n    return str(res)"
    },
    {
        "number": 4322,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    n = int(lines[0])\n    heights = list(map(int, lines[1].split()))\n    print(solve(n, heights))\n    return \" \".join(map(str, solve(n, heights)))\n\ndef"
    },
    {
        "number": 4322,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    nums = list(map(int, stdin.split()))\n    res = 0\n    h = 0\n    if (n == 1):\n        return str(0)\n    for i in range(n):\n        h += nums[i]\n        if (h >= h):\n            h = h - nums[i]\n            res += 1\n    for i in range(n - 1):\n        h -= nums[i]\n        h = h + nums[i + 1]\n        if (h >= h):\n            h = h - nums[i + 1]\n            res += 1\n    return str(res)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4322,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1]))\n    k = len(a)\n    \n    # find the max height among the people\n    max_height = max(a)\n    \n    # find the second largest height among the people\n    second_largest_height = max(max_height - a[0], max_height - a[1], max_height - a[2])\n    \n    # the condition between second and the largest height must be satisfied\n    if abs(second_largest_height - max_height) >= 1:\n        return 'impossible'\n    \n    # find the biggest possible circle with people from the a\n    max_circle_height = max(a)\n    \n    # find the second largest height among the people\n    second_largest_height = max(max_circle_height - a[0], max_circle_height - a[1], max_circle_height - a[2])\n    \n    # the condition between second and the largest height must be satisfied\n    if abs(second_largest_height - max_circle_height) >= 1:\n        return 'impossible'\n    \n    # find the number of people in the circle\n    circle_size = max_circle_height - second_largest_height + 1\n    \n    return str(circle_size) +'' +''.join(map(str, a[1:]))\n"
    },
    {
        "number": 4322,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    # heights = list(map(int, stdin.split()))\n    heights = list(map(int, input().split()))\n    res = 0\n    # for i in range(N):\n    #     if res < (heights[i] - heights[i + 1]):\n    #         res = (heights[i] - heights[i + 1])\n    # print(res)\n    for i in range(1, N):\n        if abs(heights[i] - heights[i - 1]) <= 1:\n            continue\n        if heights[i] - heights[i - 1] > 1:\n            continue\n        else:\n            res = max(res, heights[i] - heights[i - 1])\n    return str(res)\n"
    },
    {
        "number": 4322,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    return str(find(n))\n\n\ndef"
    },
    {
        "number": 4322,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1].split()))\n\n    max_val = max(a)\n    max_idx = a.index(max_val)\n    a_sum = sum(a[:max_idx + 1])\n\n    a_sum_ = sum(a[max_idx + 1:])\n    a_sum_ = a_sum_ + a[max_idx]\n\n    if abs(a_sum - a_sum_) <= 1:\n        print(n, max_idx + 1)\n        return\n    if abs(a_sum) < abs(a_sum_):\n        print(n, max_idx)\n        return\n\n    a_sum = a_sum + a[max_idx]\n\n    a_sum_ = a_sum - a[max_idx]\n\n    print(n, max_idx + 1)\n    print(a_sum, a_sum_)\n    return\n\nsolution(\n    '1\\n3\\n5\\n4\\n5\\n6\\n7\\n2\\n2\\n1\\n2\\n3\\n4\\n'\n)\n"
    },
    {
        "number": 4322,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    A = list(map(int, stdin.split()))\n    n = len(A)\n    if n == 1:\n        return str(1)\n\n    max_height = max(A)\n    min_height = min(A)\n    k = 1\n    if max_height - min_height > 1:\n        return str(n)\n    while True:\n        if k > n:\n            return str(n)\n        if sum(x - min_height for x in A[0:k]) < 1:\n            return str(k)\n        k += 1\n"
    },
    {
        "number": 4323,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    sizes = [(int(i), int(j)) for i, j in zip(*[iter(stdin.split())] * 2)]\n    sizes.sort(key=lambda x: x[0])\n    min_size = sum([i[1] for i in sizes])\n    if min_size > m:\n        return '-1'\n    for size in sizes:\n        if size[1] + min_size <= m:\n            min_size += size[1]\n    return str(len(sizes) - min_size)\n"
    },
    {
        "number": 4323,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    (n, m) = map(int, stdin.split())\n    songs = sorted((int(x) for x in stdin.split()), reverse=True)\n    prev = 0\n    for s in songs:\n        if prev + s <= m:\n            prev += s\n        else:\n            break\n    if prev == m:\n        return str(len(songs))\n    return '-1'\n\nsolution(input())"
    },
    {
        "number": 4323,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    songs = [list(map(int, stdin.strip().split())) for _ in range(n)]\n    moves = 0\n    # compress all songs and sum of the sizes of the remaining songs\n    s = sum(songs[0])\n    while s <= m:\n        for i, song in enumerate(songs):\n            if song:\n                songs[i] = song[:2]\n                s += songs[i][1]\n                s -= songs[i][0]\n                if s <= m:\n                    break\n        else:\n            return -1\n        moves += 1\n    return moves\n"
    },
    {
        "number": 4323,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    sizes = []\n    for _ in range(n):\n        sizes.extend(map(int, stdin.split()))\n\n    c = 0\n    total = 0\n    for i in range(n):\n        if total + sizes[i] > m:\n            if c == 0:\n                return \"-1\"\n            c -= 1\n            total = sizes[i]\n        else:\n            total += sizes[i]\n            c += 1\n\n    return str(c)\n"
    },
    {
        "number": 4323,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    songs = []\n    for i in range(n):\n        size, compressed_size = map(int, stdin.split())\n        songs.append((size, compressed_size))\n\n    def is_possible(size_sum):\n        songs_size = [song[0] for song in songs]\n        songs_compressed_size = [song[1] for song in songs]\n\n        songs_size.sort()\n        songs_compressed_size.sort(reverse=True)\n\n        if sum(songs_size) + sum(songs_compressed_size) <= m:\n            return True\n\n        # what if we do this:\n        # songs_compressed_size.sort()\n        # if sum(songs_compressed_size) < size_sum:\n        #     return False\n\n        # what if we do this\n        songs_compressed_size.sort(reverse=True)\n        if sum(songs_compressed_size) < size_sum:\n            return False\n\n        # what if we do this:\n        # songs_size.sort()\n        # if sum(songs_size) < size_sum:\n        #     return False\n\n        return True\n\n    # I will have to try different combinations\n    for size_sum in range(max(songs), min(songs) - 1, -1):\n        if is_possible(size_sum):\n            return str(size_sum)\n\n    return \"-1\""
    },
    {
        "number": 4323,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    songs = []\n    for i in range(N):\n        songs.append(tuple(map(int, stdin.split())))\n    songs.sort(key=lambda x: (x[1], x[0]))\n    curr_s = 0\n    for i in range(N):\n        curr_s += songs[i][0]\n        if curr_s > M:\n            break\n    if curr_s <= M:\n        return str(i + 1)\n    else:\n        return '-1'\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4323,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n\n    songs = []\n    for _ in range(n):\n        a, b = list(map(int, stdin.split()))\n        songs.append((a, b))\n\n    songs.sort(key=lambda x: x[0])\n\n    if all(x[0] <= m for _, x in songs):\n        return str(sum(x[0] for _, x in songs))\n    else:\n        return \"-1\""
    },
    {
        "number": 4323,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    songs = []\n    for i in range(N):\n        a, b = map(int, stdin.split())\n        songs.append((a, b))\n    songs.sort()\n    answer = 0\n    n = len(songs)\n    if n == 0:\n        return answer\n    for i in range(1, n):\n        a, b = songs[i - 1]\n        c, d = songs[i]\n        if c + d > M:\n            return -1\n        answer += min(c, d) - a\n    return answer\n\n\nsolution(\"4 16\")\n"
    },
    {
        "number": 4323,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def comp_sum(arr: list) -> int:\n        total_sum = 0\n        for i in range(len(arr)):\n            total_sum += arr[i]\n        return total_sum\n\n    n, m = (int(x) for x in stdin.split())\n    arr = sorted([int(x) for x in stdin.split()])\n    if comp_sum(arr) > m:\n        return '-1'\n    else:\n        solutions = []\n        i = 0\n        while i < len(arr) - 1:\n            if comp_sum(arr[:i+1]) <= m:\n                for j in range(i, len(arr)):\n                    if comp_sum(arr[:i+1]) + comp_sum(arr[i:j+1]) <= m:\n                        solutions.append(comp_sum(arr[:i+1]) + comp_sum(arr[i:j+1]))\n            i += 1\n        if solutions:\n            return str(min(solutions))\n        else:\n            return '-1'\n\nprint(solution(input()))"
    },
    {
        "number": 4323,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n == 1 and m == 0:\n        return '1'\n\n    out = -1\n    sizes = list(map(int, stdin.split()))\n    sizes.sort()\n    while sizes:\n        size = sizes.pop(0)\n        if size > m:\n            break\n        while sizes and size + sizes[0] <= m:\n            sizes.pop(0)\n        if size + sizes[0] > m:\n            break\n        sizes = sizes[1:]\n\n    if sizes:\n        out = len(sizes)\n\n    return str(out) if out!= -1 else '-1'\n"
    },
    {
        "number": 4324,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    for i in range(n, 0, -1):\n        if len(set(list(stdin[:i]))) == b:\n            return stdin[:i]\n    return \"\""
    },
    {
        "number": 4324,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4324,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    s = \"\"\n    for i in range(n):\n        temp = \"\"\n        for j in range(i, n, a):\n            temp += \"\".join(set(stdin[j: j + a]))\n        s += temp + \" \"\n    return s.rstrip()\n\n\ndef"
    },
    {
        "number": 4324,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(int(stdin.split()[0])):\n        n, a, b = stdin.split()[1:]\n        n = int(n)\n        a = int(a)\n        b = int(b)\n        substr = \"\"\n        for i in range(n - a + 1):\n            substr += ''.join(set(stdin.split()[2][i:i+a]))\n        print(substr)\n"
    },
    {
        "number": 4324,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    The sum of n over all the test cases does not exceed 2000.\n    '''\n    t = int(stdin.split('\\n')[0])\n    n, a, b = map(int, stdin.split('\\n')[1].split(' '))\n    letters = 'abcdefghijklmnopqrstuvwxyz'\n    for i in range(len(letters) - a + 1):\n        for j in range(i + a, len(letters)):\n            substring = letters[i:j]\n            if len(substring) == a and set(substring) == set(letters[:a]):\n                print(substring)\n"
    },
    {
        "number": 4324,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n,a,b=int(stdin.split()[0]),int(stdin.split()[1]),int(stdin.split()[2])\n    substrs=[]\n    for i in range(n):\n        substrs.append(\"\".join(sorted(set(stdin[i:i+a]))))\n    # print(substrs)\n    # print(len(set(substrs)))\n    # print(len(substrs))\n    if len(set(substrs))==len(substrs):\n        print(\"\".join(sorted(set(stdin[0:n]))).center(n,'*'))\n    else:\n        print(\"\".join(sorted(set(stdin[0:n]))).center(n,'*'))\n\nsolution(stdin)\n\n\n\ndef"
    },
    {
        "number": 4324,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    testcase, n, a, b = stdin.split('\\n')\n    n = int(n)\n    a = int(a)\n    b = int(b)\n    ans = ''\n    for i in range(n):\n        if i + a <= n:\n            ans += ''.join([j for j in 'a' * a])\n        if i + b <= n:\n            ans += ''.join([k for k in 'b' * b])\n        if i + a + b <= n:\n            ans += ''.join([c for c in 'c' * b])\n        if i + a + b + a <= n:\n            ans += ''.join([d for d in 'd' * a])\n    return ans\n\nsolution(\"3\\n5 3 1\\n6 1 1\\n6 6 1\")\nsolution(\"4\\n7 5 3\\n6 1 1\\n6 6 1\\n5 2 2\")"
    },
    {
        "number": 4324,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = stdin.split()\n    n = int(n)\n    a = int(a)\n    b = int(b)\n    string = \"\"\n\n    for i in range(n):\n        string += (\"t\" * a) + (\"e\" * b) + \"l\"\n    return string\n"
    },
    {
        "number": 4324,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for _ in range(t):\n        n, a, b = map(int, stdin.split())\n        if a == b == 1:\n            return ''.join(list(map(chr, range(97, 97 + 26))))\n        else:\n            string = ''\n            for i in range(n):\n                if i % a == 0:\n                    string += ''.join(list(map(chr, range(97, 97 + 26))))\n                else:\n                    string += ''.join(list(map(chr, range(97, 97 + 26))[i % a:i % a + b]))\n            return string\n\nsolution(\"2\")\nsolution(\"3\")\nsolution(\"4\")\nsolution(\"5\")\nsolution(\"6\")\nsolution(\"7\")\nsolution(\"8\")\nsolution(\"9\")\n"
    },
    {
        "number": 4324,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4325,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, X, T = map(int, stdin.split())\n    return str(N * (X + (X - 1) * (T - N)) // 2)"
    },
    {
        "number": 4325,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x, n, t = map(int, stdin.split())\n    ans = min(t, n//x)\n    return str(ans)"
    },
    {
        "number": 4325,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, X, T = stdin.split()\n    N = int(N)\n    X = int(X)\n    T = int(T)\n\n    if N <= X:\n        return '0'\n\n    minutes_takoyaki_possible = (N - X) // (X - 1)\n    minutes_takoyaki_remaining = (N - X) % (X - 1)\n    if minutes_takoyaki_remaining >= T:\n        minutes_takoyaki_possible = minutes_takoyaki_possible + 1\n    return str(minutes_takoyaki_possible + minutes_takoyaki_remaining)\n"
    },
    {
        "number": 4325,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time: O(n*n^2)\n    Space: O(n*n^2)\n    \"\"\"\n    n, x, t = map(int, stdin.split())\n    dp = [[0]*(t + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, t + 1):\n            if j >= x:\n                dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - x]) + 1\n            else:\n                dp[i][j] = dp[i - 1][j]\n    return str(dp[n][t])\n"
    },
    {
        "number": 4325,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, X, T = map(int, stdin.split())\n    if T > X:\n        return 'impossible'\n    elif N == X:\n        return str(T)\n    else:\n        return str(T + X - (N - 1) * X)"
    },
    {
        "number": 4325,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n,x,t = list(map(int, stdin.split()))\n    minutes_needed = x * (((n-1) // x) + 1) + ((n % x) * t)\n    return str(minutes_needed)\n"
    },
    {
        "number": 4325,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    [N, X, T] = stdin.split()\n    N, X, T = int(N), int(X), int(T)\n    max_minutes = 0\n    for i in range(X, N + 1):\n        minutes = i * (T + 1)\n        if i * (T + 1) > max_minutes:\n            max_minutes = i * (T + 1)\n    return str(max_minutes)"
    },
    {
        "number": 4325,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('20 12 6')\n    12\n    \"\"\"\n    inputs = [int(x) for x in stdin.split()]\n    N = inputs[0]\n    X = inputs[1]\n    T = inputs[2]\n\n    # Create dp table\n    dp = []\n\n    # Fill dp table\n    for x in range(0, N + 1):\n        dp.append([])\n        for t in range(0, X + 1):\n            if x == 0 and t == 0:\n                dp[x].append(0)\n            else:\n                if x == 0:\n                    dp[x].append(0)\n                elif t == 0:\n                    dp[x].append(dp[x - 1][t])\n                else:\n                    dp[x].append(dp[x - 1][t] + dp[x][t - 1])\n\n    return str(dp[N][X])\n"
    },
    {
        "number": 4325,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    [N,X,T] = map(int, stdin.split())\n    M = max(X, (N//X)*X)\n    totalMinutes = N*T\n    if N % X == 0:\n        totalMinutes -= M\n    return str(totalMinutes)\n"
    },
    {
        "number": 4325,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    (N, X, T) = stdin.split()\n    N = int(N)\n    X = int(X)\n    T = int(T)\n    if N > X:\n        return str(T * N)\n    else:\n        return str(T + (X - N) * 2)\n"
    },
    {
        "number": 4326,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    # N = 8\n    # N = 5\n\n    # We want to maximize the number of groups with\n    # at least three students.\n    # We can start with a single group.\n    # It can only have two students.\n    # After that, we can try to form a group consisting of three or more students.\n    # We can start with a single group again.\n    # In the second group, we can try to form a group consisting of four or more students.\n    # This can only be done if there is no group consisting of more than three students.\n    # So in the third group, we can only form a group consisting of four or more students.\n    # In this way, we can maximize the number of groups with at least three students.\n    # At any point in time, we have the maximum number of groups possible.\n\n    # Now we want to minimize the number of groups with at least three students.\n    # We can try to form a group consisting of two or three students.\n    # We can start with a single group.\n    # We can try to form a group consisting of three or four students.\n    # We can start with a single group again.\n    # In the fourth group, we can only form a group consisting of two or three students.\n    # So we can only form a group consisting of three or four students.\n    # After that, we can only form a group consisting of four or five students.\n    # In the fifth group, we can only form a group consisting of three or four students.\n    # So we can only form a group consisting of four or five students.\n    # We can only form a group consisting of four or five students.\n    # In the sixth group, we can only form a group consisting of four or five students.\n    # So we can only form a group consisting of four or five students.\n    # We can only form a group consisting of four or five students.\n    # In the seventh group, we can only form a group consisting of four or five students.\n    # So we can only form a group consisting of four or five students.\n    # And so on.\n\n    # We can obtain the maximum number of groups with at least three students.\n    # So return the maximum number of groups with at least three students.\n\n    max_num_of_groups = 1\n    for i in range(1, N + 1):\n        if i <= 3:\n            max_num_of_groups = max(max_num_of_groups, i)\n        else:\n            if i % 3 == 0:\n                max_num_of_groups = max(max_num_of_groups, i // 3 + 1)\n            elif i % 3 == 1:\n                max_num_of_groups = max(max_num_of_groups, i // 3)\n            elif i % 3 == 2:\n                max_num_of_groups = max(max_num_of_groups, i // 3 + 1)\n\n    return str(max_num_of_groups)\n"
    },
    {
        "number": 4326,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    if __name__ == '__main__':\n        print(solution(input()))\nsolution(stdin)\n\"\"\""
    },
    {
        "number": 4326,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return max(3, divisors(n))\n\ndef"
    },
    {
        "number": 4326,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(n, 0, -1):\n        if n % i == 0:\n            return i\n    return 1"
    },
    {
        "number": 4326,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    input_lines = stdin.splitlines()\n    input_numbers = list(map(int, input_lines[0].split()))\n    input_n = input_numbers[0]\n    groups = []\n    for i in range(input_n):\n        groups.append(input_lines[i + 1])\n    for i in range(input_n):\n        groups[i] = groups[i].split()\n    groups.sort(key=len)\n    n = len(groups)\n    result = 1\n    for i in range(n):\n        if groups[i][0] == groups[i][1]:\n            result += 1\n    print(result)\n"
    },
    {
        "number": 4326,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def can_divide(g):\n        # check if group can be divided into 3 groups\n        return len(g) >= 3\n\n    def can_equal(g):\n        # check if group can be divided into 3 groups\n        return len(set(g)) == len(g)\n\n    stdin = stdin.split()\n    N = int(stdin[0])\n    if N < 3:\n        return str(0)\n\n    # sort students by id\n    students = sorted([int(x) for x in stdin[1:]])\n    groups = []\n    for i in range(0, N, 3):\n        groups.append(students[i:i + 3])\n\n    # find groups that can be divided into at most 3 groups\n    groups = list(filter(can_divide, groups))\n    if not groups:\n        return str(0)\n\n    # find groups that can be divided into at most 3 groups\n    groups = list(filter(can_equal, groups))\n    if not groups:\n        return str(0)\n\n    groups = sorted(groups, key=lambda g: len(g))\n    return str(len(groups))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4326,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    N = int(stdin)\n\n    if N < 3:\n        return -1\n\n    dp = [0] * N\n\n    for i in range(N):\n        dp[i] = 1\n        if i < N - 1:\n            if N % i == 0:\n                dp[i] = i\n\n    return str(dp.index(max(dp)) + 1)\n"
    },
    {
        "number": 4326,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    _, groups = stdin.split()\n    groups = int(groups)\n    return str(max(int(groups / 3), groups // 3))\n"
    },
    {
        "number": 4326,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    stdin = stdin.split(' ')\n    return str(len(set(stdin)))\n    \n------Hints-------\n1. Use greedy algorithm to solve this problem.\n2. Do not use any extra space.\n3. You can use the built-in set for the problem.\n4. Use counter to count the amount of groups formed.\n5. The result can be a large number. So do not print the output directly.\n6. Use a list of lists to count the number of groups formed.\n\"\"\"\n\ndef"
    },
    {
        "number": 4326,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    \n    # return 1\n    # return 2\n    # return 2\n    # return 3\n    return 4\n\nsolution(input())\n"
    },
    {
        "number": 4327,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, P = map(int, stdin.split())\n    return f'{max(A // 2, A + P // 3)}'"
    },
    {
        "number": 4327,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, p = stdin.split()\n    return str(int(a) // int(p))\n"
    },
    {
        "number": 4327,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # 1\n    # 2\n    # 3\n    A, P = map(int, stdin.split())\n    return str(max(A // 3, A // 2 + A // 3, A // 2 + 2 * (A // 2)))\n"
    },
    {
        "number": 4327,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    _, a, p = stdin.split(\" \")\n    a, p = int(a), int(p)\n    # print(\"A =\", a, \"P =\", p)\n    # print(\"--\")\n    dp = [[0] * (p+1) for _ in range(a+1)]\n    # print(dp)\n    for i in range(1, a+1):\n        for j in range(1, p+1):\n            if i > j:\n                dp[i][j] = dp[i-1][j]\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[i-1][j-1] + 1)\n    return str(dp[a][p])\n\nsolution(\"2 3\")\nsolution(\"1 5\")\n"
    },
    {
        "number": 4327,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split())\n    return str(max(n // 3 + p // 3 + p // 2, n // 2 + p // 2))\n    \n"
    },
    {
        "number": 4327,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, P = map(int, stdin.split())\n    return str(int((A+1) * (P+1) // 2))"
    },
    {
        "number": 4327,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, P = map(int, stdin.split())\n    applePieces = 1\n    while applePieces < A:\n        applePieces += 1\n        applePieces += 2\n        applePieces += 3\n        if applePieces > A:\n            applePieces -= 3\n            applePieces -= 2\n            applePieces -= 1\n    return str(applePieces)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4327,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, P = map(int, stdin.split())\n    apple_pieces = 3\n    while apple_pieces > 0:\n        new_apple_pieces = apple_pieces - 1\n        if new_apple_pieces > 0:\n            apple_pieces = new_apple_pieces\n            apple_pieces = new_apple_pieces\n        elif new_apple_pieces == 0:\n            apple_pieces = new_apple_pieces\n            apple_pieces = new_apple_pieces\n        else:\n            apple_pieces = new_apple_pieces\n            apple_pieces = new_apple_pieces\n            apple_pieces = new_apple_pieces\n        apple_pieces = new_apple_pieces\n    return str(apple_pieces)"
    },
    {
        "number": 4327,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, P = map(int, stdin.split())\n    apple_pie = 1\n    while True:\n        # if we have more apples than pieces of apple, make apple pie\n        if A >= P * 3:\n            apple_pie += 1\n            A -= P * 3\n        else:\n            # if we have more apples than pieces of apple, make apple pie\n            if A >= (P * 2) * 3:\n                apple_pie += 1\n                A -= (P * 2) * 3\n            # if we have more apples than pieces of apple, make apple pie\n            if A >= P * 3:\n                apple_pie += 1\n                A -= P * 3\n        if A == 0:\n            break\n    return str(apple_pie)"
    },
    {
        "number": 4327,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, P = map(int, stdin.split())\n    AP = APP = 0\n    while AP < APP:\n        AP += 3\n        APP = AP // 2\n        APP += 1\n        if AP >= APP:\n            break\n        APP = AP\n        AP += APP\n    return str(APP)\n    \nprint(solution(input()))\n\"\"\"\n\n\"\"\"\ndef"
    },
    {
        "number": 4328,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a % b == 0:\n        return str(a + b)\n    return str(b - a)\n"
    },
    {
        "number": 4328,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    a = int(a)\n    b = int(b)\n    if a > b:\n        b -= a\n    elif a < b:\n        a -= b\n    else:\n        a = 0\n        b = 0\n    print(a + b)"
    },
    {
        "number": 4328,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    _, A, B = stdin.split()\n    return str(int(A) + int(B)) if int(A) % int(B) == 0 else str(int(B) - int(A))\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4328,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a % b == 0:\n        print(a+b)\n    else:\n        print(b-a)\n    return ''\n\n\nsolution(input())\n"
    },
    {
        "number": 4328,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A % B == 0:\n        return str(A + B)\n    else:\n        return str(B - A)\n    \n"
    },
    {
        "number": 4328,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B = stdin.split(' ')\n    return str(int(A) + int(B)) if int(A) % int(B) == 0 else str(int(B) - int(A))"
    },
    {
        "number": 4328,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A % B == 0:\n        print(A + B)\n    else:\n        print(B - A)\n    return ''\nsolution()"
    },
    {
        "number": 4328,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B = stdin.strip().split(' ')\n    A, B = int(A), int(B)\n    if A % B == 0:\n        print(A + B)\n    else:\n        print(B - A)\n    return 'OK'\n\nsolution(input())\n"
    },
    {
        "number": 4328,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split(' ')\n    a, b = int(a), int(b)\n    if a % b == 0:\n        print(a + b)\n    else:\n        print(b - a)"
    },
    {
        "number": 4328,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    a, b = stdin.split()\n    a = int(a)\n    b = int(b)\n    if a % b == 0:\n        return str(a + b)\n    else:\n        return str(b - a)\n"
    },
    {
        "number": 4329,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n    for i in range(1, n):\n        if s[i-1] == s[n-i]:\n            return \"No\"\n    if n == 1:\n        return \"Yes\"\n    if n == 2 and s[0]!= s[1]:\n        return \"No\"\n    return \"Yes\""
    },
    {
        "number": 4329,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    if s[-1]!= 'z':\n        s += 'z'\n    t = s[:-1]\n    if t.count('z')!= 1:\n        return \"No\"\n    return \"Yes\"\n\nstdin = input()\nprint(solution(stdin))\n"
    },
    {
        "number": 4329,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    n = len(s)\n    print(s)\n    return\n"
    },
    {
        "number": 4329,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split(\" \")\n    return \"Yes\" if t in (s + s[:-1]) else \"No\"\n"
    },
    {
        "number": 4329,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    t = t[:-1]\n    if s + t in s + t:\n        return 'Yes'\n    else:\n        return 'No'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4329,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if len(stdin) == len(stdin + stdin[-1]) else \"No\"\n"
    },
    {
        "number": 4329,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin\n    return 'Yes' if len(S) == len(S + str(ord(S[-1]))) else 'No'\n\nsolution(input())\n\"\"\"\n\nS = input()\nT = input()\n\nprint(T in S + str(ord(T[-1])))\n"
    },
    {
        "number": 4329,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s,t = stdin.split()\n    if t == s+1:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4329,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin.strip()\n    if len(string) >= len(set(string)) + 1:\n        return \"No\"\n    elif string[-1] == string[-2]:\n        string = string + string[-1]\n    if string in set(string[::-1]):\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4329,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split(\"\\n\")\n    s = list(s)\n    t = list(t)\n    for i in range(len(s)):\n        s[i] = s[i] + s[i]\n    if s == t:\n        print(\"Yes\")\n    else:\n        print(\"No\")"
    },
    {
        "number": 4330,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = stdin.split()\n    if int(A) - int(B) == 0:\n        return \"IMPOSSIBLE\"\n    elif int(A) - int(B) == 1:\n        return str(int(A) - 1)\n    elif int(A) - int(B) > 1:\n        return str(int(A) - 1) + \" \" + str(int(A) - 2)"
    },
    {
        "number": 4330,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''Return an integer K such that |A - K| = |B - K|\n    when A and B are distinct.'''\n    # A = int(stdin.strip())\n    # B = int(stdin.strip())\n    # print(A,B)\n    A, B = map(int, stdin.strip().split())\n    if A == 1 or B == 1:\n        if A == 1 and B == 1:\n            return 'IMPOSSIBLE'\n        elif A == 1:\n            return str(B - 1)\n        else:\n            return str(A - 1)\n    else:\n        # return 'IMPOSSIBLE'\n        return str(A - 1) +'' + str(B - 1)\n"
    },
    {
        "number": 4330,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return 'IMPOSSIBLE' if abs(a - b) % 2 else str(abs(a - b) // 2)\n"
    },
    {
        "number": 4330,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B = list(map(int, stdin.split()))\n    if A < 0:\n        A = -A\n    if B < 0:\n        B = -B\n    if A == 0 or A == 1:\n        return \"IMPOSSIBLE\"\n    if A == B:\n        return \"IMPOSSIBLE\"\n    if (A - 1) % 2 == (B - 1) % 2:\n        return \"IMPOSSIBLE\"\n    K = (A + B) // 2\n    if A == K and B == K:\n        return \"IMPOSSIBLE\"\n    return str(K)\n"
    },
    {
        "number": 4330,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    candidates = []\n    for i in range(max(A,B) + 1):\n        if abs(A-i) == abs(B-i):\n            candidates.append(i)\n    if len(candidates) == 0:\n        return 'IMPOSSIBLE'\n    else:\n        return str(candidates[0])"
    },
    {
        "number": 4330,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A == B:\n        return \"IMPOSSIBLE\"\n    return \"9\" if abs(A - 9) == abs(B - 9) else \"9\"\n"
    },
    {
        "number": 4330,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if abs(A) == abs(B):\n        return \"IMPOSSIBLE\"\n    if A < 0 or B < 0:\n        return \"IMPOSSIBLE\"\n    elif abs(A) > abs(B):\n        return f\"{abs(A) - abs(B):d}\"\n    elif abs(A) < abs(B):\n        return f\"{abs(B) - abs(A):d}\""
    },
    {
        "number": 4330,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if abs(A - B) % 2!= 0:\n        return \"IMPOSSIBLE\"\n    else:\n        return str(A - B)\n"
    },
    {
        "number": 4330,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B = stdin.split(\" \")\n    A, B = int(A), int(B)\n    if abs(A - B) <= 1:\n        return str(abs(A - B))\n    return \"IMPOSSIBLE\""
    },
    {
        "number": 4330,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = list(map(int, stdin.split()))\n    for x in range(a + 1, b):\n        if abs(a - x) == abs(b - x):\n            return str(x)\n    return 'IMPOSSIBLE'"
    },
    {
        "number": 4331,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N: int = int(stdin)\n    if N % 10 == 7:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\nsolution(input())"
    },
    {
        "number": 4331,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin\n    if n[-1] == '7':\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 4331,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # split the string input and store into list\n    n = list(stdin)\n    # if the last element is 7, print Yes\n    if n[-1] == '7':\n        print('Yes')\n    # if not, print No\n    else:\n        print('No')\n    return None"
    },
    {
        "number": 4331,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return 'Yes' if n % 10 == 7 else 'No'\n    \ndef"
    },
    {
        "number": 4331,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    N = int(stdin)\n    while N % 10 == 7:\n        N = N // 10\n    return 'Yes' if N else 'No'\n"
    },
    {
        "number": 4331,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N % 10 == 7:\n        print(\"Yes\")\n    else:\n        print(\"No\")"
    },
    {
        "number": 4331,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if int(stdin) % 7 == 0 else 'No'"
    },
    {
        "number": 4331,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin\n    if N[-1] == 7:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4331,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    number = stdin.strip()\n    if number.endswith(\"7\"):\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4331,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin\n    if n.endswith('7'):\n        return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 4332,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N == 0:\n        return \"No\"\n    if S(N) % N == 0:\n        return \"Yes\"\n    else:\n        return \"No\"\n\ndef"
    },
    {
        "number": 4332,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Just run the script and make sure you see the answer. If not,\n    modify the solution function.\n    \"\"\"\n\n    N = int(stdin)\n    if N % sum(map(int, str(N))) == 0:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4332,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    while True:\n        s = sum([int(d) for d in str(N)])\n        if s > N:\n            break\n        elif s == N:\n            return 'Yes'\n        N += 1\n    return 'No'\n"
    },
    {
        "number": 4332,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    while not n % 10:\n        n //= 10\n    if n == 0:\n        return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 4332,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin\n    x = sum(int(i) for i in n)\n    if x % int(n) == 0:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 4332,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if sum(int(i) for i in stdin) % int(stdin) == 0 else \"No\"\n"
    },
    {
        "number": 4332,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    s = 0\n    while num!= 0:\n        num, digit = divmod(num, 10)\n        s += digit\n    return \"Yes\" if s == num else \"No\""
    },
    {
        "number": 4332,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    s: int = 0\n    s = sum(int(x) for x in str(n))\n    if s == n:\n        return \"Yes\"\n    else:\n        return \"No\"\n\nprint(solution(input()))\n\"\"\"\n\ndef"
    },
    {
        "number": 4332,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N % sum(int(c) for c in str(N)) == 0:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n    return \"No\""
    },
    {
        "number": 4332,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    S = sum([int(d) for d in str(N)])\n    if S % N == 0:\n        print('Yes')\n    else:\n        print('No')\n    return 'Yes' if S % N == 0 else 'No'\n\n\nsolution(input())\n"
    },
    {
        "number": 4333,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x_1,y_1,x_2,y_2=stdin.split()\n    x_1=int(x_1)\n    y_1=int(y_1)\n    x_2=int(x_2)\n    y_2=int(y_2)\n    x_3=x_2\n    y_3=y_2\n    x_4=x_2\n    y_4=y_2\n    while(x_1!=x_3 or y_1!=y_3 or x_2!=x_4 or y_2!=y_4):\n        if(x_1>x_2):\n            x_1-=1\n        else:\n            x_1+=1\n        if(y_1>y_2):\n            y_1-=1\n        else:\n            y_1+=1\n        if(x_3>x_4):\n            x_3-=1\n        else:\n            x_3+=1\n        if(y_3>y_4):\n            y_3-=1\n        else:\n            y_3+=1\n    return str(x_3)+\" \"+str(y_3)+\" \"+str(x_4)+\" \"+str(y_4)\nprint(solution(input()))"
    },
    {
        "number": 4333,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a,b,c,d = map(int,stdin.split())\n    if a*a+b*b==c*c+d*d or a*a+b*b==d*d+c*c:\n        print(a,b,c,d)\n    else:\n        print(-1,-1,-1,-1)\n    return \"\"\nsolution(\"0 0 0 1\")\nsolution(\"0 0 0 1 2\")\nsolution(\"0 0 0 1 2 3\")\nsolution(\"0 0 0 1 2 3 4\")"
    },
    {
        "number": 4333,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    pass"
    },
    {
        "number": 4333,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = stdin.split()\n    x1, y1 = int(x1), int(y1)\n    x2, y2 = int(x2), int(y2)\n    if x1 == x2 or y1 == y2:\n        return \"0 0 0 1\"\n    if abs(x1 - x2)!= abs(y1 - y2):\n        return \"0 0 0 1\"\n    if x1 < x2 and y1 > y2:\n        return f\"{y1} {x1} {y2} {x2}\"\n    if x1 > x2 and y1 < y2:\n        return f\"{y1} {x1} {y2} {x2}\"\n    if x1 > x2 and y1 == y2:\n        return f\"{x1} {y1} {y2} {x2}\"\n    if x1 < x2 and y1 == y2:\n        return f\"{x1} {y1} {x2} {y2}\"\n"
    },
    {
        "number": 4333,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = map(int, stdin.split())\n    res = \"\"\n    if x1 == x2:\n        res += str(x1) + \" \" + str(max(y1, y2))\n        res += \" \" + str(min(x1, x2)) + \" \" + str(max(y1, y2))\n        res += \" \" + str(min(x1, x2)) + \" \" + str(min(y1, y2))\n        res += \" \" + str(max(x1, x2)) + \" \" + str(min(y1, y2))\n        res += \" \" + str(max(x1, x2)) + \" \" + str(max(y1, y2))\n        res += \" \" + str(min(x1, x2)) + \" \" + str(max(y1, y2))\n        res += \" \" + str(min(x1, x2)) + \" \" + str(min(y1, y2))\n    elif y1 == y2:\n        res += str(min(x1, x2)) + \" \" + str(y1)\n        res += \" \" + str(min(x1, x2)) + \" \" + str(y1)\n        res += \" \" + str(max(x1, x2)) + \" \" + str(y1)\n        res += \" \" + str(max(x1, x2)) + \" \" + str(y1)\n        res += \" \" + str(max(x1, x2)) + \" \" + str(max(y1, y2))\n        res += \" \" + str(min(x1, x2)) + \" \" + str(max(y1, y2))\n        res += \" \" + str(min(x1, x2)) + \" \" + str(min(y1, y2))\n    return res\n"
    },
    {
        "number": 4333,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x_1,y_1,x_2,y_2=list(map(int,stdin.split()))\n    x_3,y_3,x_4,y_4=map(int,sorted((x_1,y_1,x_2,y_2)))\n    return str(x_3)+' '+str(y_3)+' '+str(x_4)+' '+str(y_4)\n"
    },
    {
        "number": 4333,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    stdin = stdin.strip().split()\n    x1, y1, x2, y2 = map(int, stdin[:4])\n\n    if (x1 == x2 and y1 == y2) or (x1 == x2 and y1 == y2):\n        return str(-1)\n    if (x1 == x2) and (y1 == y2):\n        return str(-1)\n    if (x1 == x2) and (y1 == y2):\n        return str(-1)\n\n    return str(x1) +'' + str(y1) +'' + str(x2) +'' + str(y2)\n"
    },
    {
        "number": 4333,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.split(\"\\n\")\n    x_1, y_1, x_2, y_2 = map(int, line[0].split())\n\n    if x_1 == x_2 == y_1 == y_2:\n        print(x_1, y_1, x_2, y_2)\n        return\n\n    if x_1 == x_2:\n        print(x_2, y_2, x_2, y_2)\n        return\n\n    if y_1 == y_2:\n        print(x_2, y_2, x_2, y_2)\n        return\n\n    if x_2 - x_1 == 0:\n        x = (y_2 - y_1) / (x_2 - x_1)\n        y = x * (x_1 - x) + y_1\n        print(int(x), int(y), int(x), int(y))\n        return\n\n    if y_2 - y_1 == 0:\n        y = (x_2 - x_1) / (y_2 - y_1)\n        x = y * (y_1 - y) + x_1\n        print(int(x), int(y), int(x), int(y))\n        return\n\n    a = (x_2 - x_1) / (y_2 - y_1)\n    b = (x_2 - x_1) / y_1\n    c = (y_2 - y_1) / x_1\n\n    if abs(a - b) < 0.000001:\n        x = (-c + sqrt(c * c + 4 * a)) / (2 * a)\n        print(int(x), int(y_2 - a * x), int(x), int(y_2))\n        return\n\n    if abs(b - c) < 0.000001:\n        y = (-a + sqrt(a * a + 4 * b)) / (2 * b)\n        print(int(x_2), int(y_2 - b * y), int(y), int(y_2))\n        return\n\n    if abs(a - c) < 0.000001:\n        x = (-b + sqrt(b * b + 4 * a)) / (2 * a)\n        print(int(x_2), int(x), int(x), int(y_2))\n        return\n\n    if abs(b - a) < 0.000001:\n        y = (-c + sqrt(c * c + 4 * b)) / (2 * b)\n        print(int(x_2), int(y_2 - b * y), int(y), int(y_2))\n        return\n"
    },
    {
        "number": 4333,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x1,y1,x2,y2 = list(map(int,stdin.split()))\n    if (x1+x2)**2 + (y1+y2)**2 <= 100:\n        return str(-1 if (x1,y1) == (x2,y2) else x1,y1,x2,y2)\n    return str(-1,0,0,0)\nstdin = '1 0 0 1'\nprint(solution(stdin))\n\ndef"
    },
    {
        "number": 4333,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x1,y1,x2,y2,x3,y3,x4,y4 = map(int, stdin.split())\n    x1,y1,x2,y2,x3,y3,x4,y4 = map(lambda x: x if x >= 0 else 2*x, (x1,y1,x2,y2,x3,y3,x4,y4))\n    if x1 == x2 == x3 == x4 or y1 == y2 == y3 == y4:\n        return \"0 0 0 1\"\n    if (x1,y1) == (x2,y2) == (x3,y3) == (x4,y4):\n        return str(max(abs(x1),abs(y1)))+str(max(abs(x2),abs(y2)))+str(max(abs(x3),abs(y3)))+str(max(abs(x4),abs(y4)))\n    return 'x1 y1 x2 y2 x3 y3 x4 y4'\n"
    },
    {
        "number": 4334,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, t, u = stdin.split(\"\\n\")\n    s = s.split()\n    t = t.split()\n    u = u.split()\n\n    common = 0\n    for x in s:\n        if x in t:\n            common += 1\n\n    return str(common)\n"
    },
    {
        "number": 4334,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A = int(stdin.split()[0])\n    B = int(stdin.split()[1])\n    U = stdin.split()[2]\n\n    # start timer\n    start = time.time()\n\n    # initialise starting balls and target balls.\n    S = 0\n    T = 0\n\n    # while A!= 0:\n    while (S < A and T < B) or (S < B and T < A):\n        # throw a ball into a target ball\n        if S <= A:\n            # if we don't have enough S balls, throw out the ball we've thrown away\n            if T >= 1:\n                T -= 1\n                S += 1\n            # else throw in U to T\n            else:\n                T += 1\n                S += 1\n        # throw a ball into a starting ball\n        elif S <= B:\n            # if we don't have enough S balls, throw out the ball we've thrown away\n            if T >= 1:\n                T -= 1\n                S += 1\n            # else throw in U to T\n            else:\n                T += 1\n                S += 1\n        # if this runs, that means that there are no balls with S and T\n        else:\n            # throw in U to T\n            T += 1\n            S += 1\n\n    # end timer and return result\n    end = time.time()\n    return end - start\n"
    },
    {
        "number": 4334,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(set(stdin[0].split()) ^ set(stdin[1].split())))\n\"\"\"\n\nimport sys\n\n\ndef"
    },
    {
        "number": 4334,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    S = stdin.split()[1]\n    T = stdin.split()[2]\n    count = 0\n    for i in range(M):\n        if S == stdin.split()[i]:\n            count += 1\n        if T == stdin.split()[i]:\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 4334,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 4334,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split()\n\n    num_balls_with_string_s = 0\n    num_balls_with_string_t = 0\n\n    for input_string_s in input_data[0].split(\" \"):\n        if input_string_s == input_data[1]:\n            num_balls_with_string_s += 1\n            num_balls_with_string_t += 1\n\n    return str(num_balls_with_string_s) + \" \" + str(num_balls_with_string_t)\n"
    },
    {
        "number": 4334,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    _, ballA, ballB, _, _, _, _, _ = stdin.split(\" \")\n    return f\"{len(ballA)} {len(ballB)}\""
    },
    {
        "number": 4334,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Your code\n    '''\n    # Write your code here\n    stdin = stdin.split('\\n')\n    a = int(stdin[0].split()[0])\n    b = int(stdin[0].split()[1])\n    u = stdin[1]\n    balls = {}\n    for i in range(a):\n        s = stdin[i+2].split()[0]\n        t = stdin[i+2].split()[1]\n        balls[s] = balls.get(s, 0) + 1\n        balls[t] = balls.get(t, 0) + 1\n    if u in balls:\n        balls[u] -= 1\n    return f'{sum(balls.values())} {sum(balls.values()) - balls[u]}'\n    \n"
    },
    {
        "number": 4334,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    num = stdin.split()\n    a, b = int(num[0]), int(num[1])\n    s, t = list(stdin.splitlines()[2]), list(stdin.splitlines()[3])\n    s = int(s[0])\n    t = int(t[0])\n\n    s_t = s * t\n    t_u = t * a\n    s_u = s * b\n    s_t_u = s_t + t_u\n\n    return str(s_t_u)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4334,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    s = list(stdin)\n    t = list(stdin)\n    count = 0\n    while len(s)>0:\n        if s[0] == t[0]:\n            s.pop(0)\n            t.pop(0)\n            count+=1\n        else:\n            break\n    return str(count) + \" \" + str(len(s)) + \" \" + str(len(t))\n    \nprint(solution(\"red blue\"))\nprint(solution(\"red blue\") == \"2 4\")\nprint(solution(\"blue red\") == \"2 4\")\nprint(solution(\"red red\") == \"2 2\")\nprint(solution(\"blue red\") == \"2 2\")\nprint(solution(\"blue red\") == \"2 2\")\nprint(solution(\"blue blue\") == \"1 2\")\nprint(solution(\"red red\") == \"2 2\")\nprint(solution(\"red blue\") == \"2 2\")\nprint(solution(\"blue red\") == \"2 2\")\nprint(solution(\"red blue\") == \"2 2\")\nprint(solution(\"red red\") == \"1 2\")\nprint(solution(\"red red\") == \"1 2\")\n"
    },
    {
        "number": 4335,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[1:n]\n    n = len(s)\n    if (n % 2 == 0):\n        print('Yes')\n    else:\n        print('No')"
    },
    {
        "number": 4335,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    string = stdin\n    if 2 * N == len(string):\n        return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 4335,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N <= 1:\n        return 'No'\n    if N % 2 == 0:\n        return 'No'\n    if str(N) not in stdin:\n        return 'No'\n    return 'Yes'"
    },
    {
        "number": 4335,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''Returns either Yes or No.'''\n    # TODO: Write the solution here\n    # One way to solve this problem is to check whether the string S has equal\n    # length as T. If it has, we know that it is a concatenation of two strings.\n    # When we do this, we also know that we need to use the same comparison\n    # function that we used in the previous problem.\n\n    # Another way to solve this problem is to check whether the string S\n    # consists of the same letters as T. In this way, we do not need to\n    # use the same comparison function that we used in the previous problem.\n\n    # Another way to solve this problem is to make a function that will check\n    # whether two strings are concatenations of each other.\n    # This function will take a string S and a string T and will return\n    # whether they are concatenations.\n    # For example, the function,\n    #\n    # def are_concatenations(s, t):\n    #   return s == t + t\n    #\n    # will determine whether two strings are concatenations of each other.\n\n    # Because we know that S must be a concatenation of two copies of some\n    # string, and we need to check whether S is equal to the concatenation of\n    # any two copies of some string, we can just use the function are_concatenations.\n    # For example, the function,\n    #\n    # def are_concatenations(s, t):\n    #   return s == t + t\n    #\n    # will return True only if S = T + T.\n    return are_concatenations(stdin)\n"
    },
    {
        "number": 4335,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    import re\n    \n    str = stdin\n    pattern = r\"(\\w)\\1\\1\\w*\"\n    \n    pattern = re.compile(pattern)\n    match = pattern.findall(str)\n    \n    if len(match) == 1:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\nsolution(input())\n\n\"\"\"\n"
    },
    {
        "number": 4335,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n = int(lines[0])\n    s = lines[1]\n    T = s + s\n    if s == T:\n        return 'Yes'\n    else:\n        return 'No'\n\n\nsolution('''\n6\nabcabc\n''')\n"
    },
    {
        "number": 4335,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    x, y = stdin.split()\n    x = list(x)\n    y = list(y)\n\n    if len(x) < len(y):\n        for i in range(len(y) - len(x)):\n            x.append(x[0])\n            x.pop(0)\n    elif len(x) > len(y):\n        for i in range(len(x) - len(y)):\n            y.append(y[0])\n            y.pop(0)\n\n    if x == y:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n"
    },
    {
        "number": 4335,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"No\"\n"
    },
    {
        "number": 4335,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''6\n   ... abcabc\n   ... ''')\n    'Yes'\n    >>> solution('''5\n   ... abbc\n   ... ''')\n    'No'\n    \"\"\"\n    n = int(stdin)\n    return 'Yes' if n%2==0 else 'No'\n"
    },
    {
        "number": 4335,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    if n % 2!= 0:\n        return 'No'\n    n = int(n / 2)\n    s = stdin[:n]\n    t = stdin[n:]\n    if s!= t:\n        return 'No'\n    return 'Yes'\n\nsolution(input())"
    },
    {
        "number": 4336,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    w, h, x, y = map(int, stdin.split())\n    result = max(\n        find_cut_area(w, h, x, y, x - 1, y, True),\n        find_cut_area(w, h, x, y, x + 1, y, False),\n        find_cut_area(w, h, x, y, x, y - 1, True),\n        find_cut_area(w, h, x, y, x, y + 1, False)\n    )\n\n    return f'{result:.9f}'\n\n\ndef"
    },
    {
        "number": 4336,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    W, H, x, y = [int(x) for x in stdin.split()]\n    if x == 0 or x == W:\n        if y == 0 or y == H:\n            if abs(H - W) <= 1:\n                return f\"{H - W}\"\n            return \"0\"\n        if y == H:\n            return \"1\"\n        if abs(H - W) <= 1:\n            return f\"{H - W}\"\n        return \"0\"\n    if y == 0 or y == H:\n        if x == 0 or x == W:\n            if abs(H - W) <= 1:\n                return f\"{H - W}\"\n            return \"0\"\n        if x == W:\n            return \"1\"\n        if abs(H - W) <= 1:\n            return f\"{H - W}\"\n        return \"0\"\n    return \"0\"\n"
    },
    {
        "number": 4336,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    W, H, x, y = stdin.split()\n    W, H, x, y = int(W), int(H), int(x), int(y)\n    rectangle = [[0, 0], [W, 0], [W, H], [0, H]]\n    rectangle_max_area = 0\n    rectangle_cut_1 = []\n    rectangle_cut_2 = []\n    for x_1 in range(W):\n        for y_1 in range(H):\n            if (x_1, y_1) not in rectangle:\n                for x_2 in range(W):\n                    for y_2 in range(H):\n                        if (x_2, y_2) not in rectangle:\n                            area = abs(x_1 - x_2) + abs(y_1 - y_2)\n                            if area >= rectangle_max_area:\n                                rectangle_max_area = area\n                                rectangle_cut_1 = [(x_1, y_1), (x_2, y_2)]\n                            if area == rectangle_max_area and len(rectangle_cut_1) > len(rectangle_cut_2):\n                                rectangle_cut_2 = [(x_1, y_1), (x_2, y_2)]\n    if rectangle_max_area <= rectangle[1][0] or rectangle_max_area <= rectangle[2][0]:\n        return \"0\"\n    else:\n        return str(rectangle_max_area) + \" \" + str(1)\n\nstdin = input()\nprint(solution(stdin))\n\"\"\"\n\nimport math\n\nwhile True:\n    try:\n        W, H, x, y = input().split()\n        W, H, x, y = int(W), int(H), int(x), int(y)\n        rectangle = [[0, 0], [W, 0], [W, H], [0, H]]\n        rectangle_max_area = 0\n        rectangle_cut_1 = []\n        rectangle_cut_2 = []\n        for x_1 in range(W):\n            for y_1 in range(H):\n                if (x_1, y_1) not in rectangle:\n                    for x_2 in range(W):\n                        for y_2 in range(H):\n                            if (x_2, y_2) not in rectangle:\n                                area = abs(x_1 - x_2) + abs(y_1 - y_2)\n                                if area >= rectangle_max_area:\n                                    rectangle_max_area = area\n                                    rectangle_cut_1 = [(x_1, y_1), (x_2, y_2)]\n                                if area == rectangle_max_area and len(rectangle_cut_1) > len(rectangle_cut_2):\n                                    rectangle_cut_2 = [(x_1, y_1), (x_2, y_2)]\n        if rectangle_max_area <= rectangle[1][0] or rectangle_max_area <= rectangle[2][0]:\n            print(\"0\")\n        else:\n            print(rectangle_max_area)\n            if len(rectangle_cut_1) > len(rectangle_cut_2):\n                print(\"1\")\n            else:\n                print(\"0\")\n    except EOFError:\n        break"
    },
    {
        "number": 4336,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.split()\n"
    },
    {
        "number": 4336,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    [W, H, x, y] = list(map(int, stdin.split()))\n    if (x == 0 and y == 0):\n        if (W == 1):\n            return (H)\n        else:\n            return (0)\n    if (x == W and y == 0):\n        if (W == 1):\n            return (H)\n        else:\n            return (0)\n    if (x == 0 and y == H):\n        if (H == 1):\n            return (W)\n        else:\n            return (0)\n    if (x == W and y == H):\n        if (H == 1):\n            return (W)\n        else:\n            return (0)\n    if (y == 0):\n        if (x == 0):\n            return (W)\n        else:\n            return (0)\n    if (y == H):\n        if (x == 0):\n            return (W)\n        else:\n            return (0)\n    if (x == 0):\n        if (H == 1):\n            return (0)\n        else:\n            return (0)\n    if (x == W):\n        if (H == 1):\n            return (0)\n        else:\n            return (0)\n    if (y == 0):\n        if (W == 1):\n            return (H)\n        else:\n            return (0)\n    if (y == H):\n        if (W == 1):\n            return (H)\n        else:\n            return (0)\n    if (y > x and y > W):\n        return (0)\n    if (y > x and y < W):\n        return (H)\n    if (x > W and x < y and x < H):\n        return (0)\n    if (x > W and x < y and x > H):\n        return (H)\n    if (y > x and y < W):\n        return (H)\n    if (y > W and y < x and y < H):\n        return (0)\n    if (y > W and y < x and y > H):\n        return (H)\n    if (x > W and x < y and x > H):\n        return (0)\n    if (x > W and x < y and x < H):\n        return (W)\n    if (y > W and y < x and y > H):\n        return (W)\n    if (x > W and x < y and x > H):\n        return (0)\n    if (x > W and x < y and x > H):\n        return (H)\n    if (x == W and y == H):\n        return (W * H)\n    if (x == H and y == W):\n        return (H * W)\n    if (x == W and y == 0):\n        return (0)\n    if (x == 0 and y == H):\n        return (0)\n    if (x == W and y == H):\n        return (H * W)\n    if (x == H and y == W):\n        return (H * W)\n    if (x == H and y == 0):\n        return (0)\n    if (x == 0 and y == 0):\n        return (W * H)\n    if (x == W and y == 0):\n        return (0)\n    if (x == 0 and y == H):\n        return (H * W)\n    if (x == W and y == 0):\n        return (0)\n    if (x == H and y == 0):\n        return (W * H)\n    if (x == H and y == W):\n        return (W * H)\n    if (x == W and y == H):\n        return (W * H)\n    if (x == 0):\n        return (max(min(y, H) - y, H - max(y, H)))\n    if (x == W):\n        return (max(min(y, H) - y, H - max(y, H)))\n    if (y == 0):\n        return (max(min(x, W) - x, W - max(x, W)))\n    if (y == H):\n        return (max(min(x, W) - x, W - max(x, W)))\n    if (x == 0):\n        return (max(min(y, H) - y, H - max(y, H)))\n    if (x == W):\n        return (max(min(y, H) - y, H - max(y, H)))\n    if (y == 0):\n        return (max(min(x, W) - x, W - max(x, W)))\n    if (y == H):\n        return (max(min(x, W) - x, W - max(x, W)))\n    return (0)\n"
    },
    {
        "number": 4336,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return \"1\"\n"
    },
    {
        "number": 4336,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    w, h, x, y = stdin.split()\n    return str(int(w) * int(h) - max(0, int(w) - int(x), int(h) - int(y)) + max(0, int(x) - int(w), int(y) - int(h)))"
    },
    {
        "number": 4336,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    [W, H, x, y] = list(map(int, stdin.split()))\n\n    # do something\n\n    return str(x)\n"
    },
    {
        "number": 4336,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4336,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    [W, H, x, y] = map(int, stdin.split())\n    return str(max(0, W * H - (x + y - W - H))) + '\\n' + str(1 if (W * H - (x + y - W - H)) > 0 else 0)\n"
    },
    {
        "number": 4337,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    colors = list(stdin)\n    colors.sort()\n    colors.reverse()\n    if(colors[0] == colors[3]):\n        return \"Three\"\n    return \"Four\"\n\ndef"
    },
    {
        "number": 4337,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    hina = stdin.split()\n    counter_blue = 0\n    counter_yellow = 0\n    counter_green = 0\n    counter_white = 0\n    counter_pink = 0\n    for i in range(N):\n        if hina[i] == \"P\":\n            counter_pink += 1\n        elif hina[i] == \"W\":\n            counter_white += 1\n        elif hina[i] == \"G\":\n            counter_green += 1\n        elif hina[i] == \"Y\":\n            counter_yellow += 1\n    if counter_pink >= 3:\n        print(\"Three\")\n    elif counter_white >= 3:\n        print(\"Three\")\n    elif counter_green >= 4:\n        print(\"Four\")\n    else:\n        print(\"Two\")\n    return \"\"\n\nsolution(input())"
    },
    {
        "number": 4337,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    N = int(stdin[0])\n    stdin = stdin[1]\n    stdin = stdin.split()\n    if(N==3):\n        if(stdin[0]==stdin[1] and stdin[1]==stdin[2]):\n            return 'Three'\n        elif(stdin[0]==stdin[1] and stdin[2]==stdin[3]):\n            return 'Three'\n        elif(stdin[0]==stdin[2] and stdin[1]==stdin[3]):\n            return 'Three'\n    elif(N==4):\n        if(stdin[0]==stdin[1] and stdin[1]==stdin[2] and stdin[2]==stdin[3]):\n            return 'Four'\n        elif(stdin[0]==stdin[1] and stdin[2]==stdin[3] and stdin[1]==stdin[3]):\n            return 'Four'\n        elif(stdin[0]==stdin[2] and stdin[1]==stdin[3] and stdin[2]==stdin[3]):\n            return 'Four'\n        elif(stdin[0]==stdin[1] and stdin[2]==stdin[3] and stdin[3]==stdin[4]):\n            return 'Four'\n        elif(stdin[0]==stdin[1] and stdin[3]==stdin[4] and stdin[1]==stdin[4]):\n            return 'Four'\n        elif(stdin[2]==stdin[3] and stdin[1]==stdin[4] and stdin[2]==stdin[4]):\n            return 'Four'\n        elif(stdin[0]==stdin[1] and stdin[2]==stdin[3] and stdin[3]==stdin[4]):\n            return 'Four'\n        elif(stdin[0]==stdin[2] and stdin[1]==stdin[3] and stdin[3]==stdin[4]):\n            return 'Four'\n        elif(stdin[0]==stdin[1] and stdin[3]==stdin[4] and stdin[1]==stdin[4]):\n            return 'Four'\n        elif(stdin[0]==stdin[2] and stdin[3]==stdin[4] and stdin[2]==stdin[4]):\n            return 'Four'\n    return 'Four'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4337,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    hina = stdin.split()[1:]\n    color = {}\n    for item in hina:\n        color[item] = 1\n    colors = set(color.keys())\n    if len(colors) == 3:\n        print(3)\n    elif len(colors) == 4:\n        print(4)\n    else:\n        print(\"Three\")\n    return \"Four\"\n\nsolution(input())\n"
    },
    {
        "number": 4337,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    return 'Four' if is_four_colors_bag(stdin[0]) else 'Three'\n\n\ndef"
    },
    {
        "number": 4337,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    bag_size, arare_colors = stdin.pop(0).split()\n    bag_size = int(bag_size)\n    arare_colors = stdin.pop(0).split()\n\n    pink_count = 0\n    white_count = 0\n    green_count = 0\n    yellow_count = 0\n\n    for color in arare_colors:\n        if color == \"G\":\n            green_count += 1\n        elif color == \"Y\":\n            yellow_count += 1\n        elif color == \"P\":\n            pink_count += 1\n        elif color == \"W\":\n            white_count += 1\n        else:\n            print(\"Unknown color.\")\n            return\n\n    if green_count == 1 and yellow_count == 2 and white_count == 3 and pink_count == 4:\n        return \"Four\"\n    elif green_count == 1 and yellow_count == 2 and white_count == 3 and pink_count == 5:\n        return \"Three\"\n    elif green_count == 1 and yellow_count == 2 and white_count == 4 and pink_count == 5:\n        return \"Four\"\n    elif green_count == 2 and yellow_count == 3 and white_count == 3 and pink_count == 4:\n        return \"Four\"\n    elif green_count == 2 and yellow_count == 3 and white_count == 4 and pink_count == 5:\n        return \"Three\"\n    elif green_count == 3 and yellow_count == 3 and white_count == 4 and pink_count == 5:\n        return \"Four\"\n    elif green_count == 3 and yellow_count == 3 and white_count == 5 and pink_count == 4:\n        return \"Three\"\n    else:\n        print(\"Unknown color.\")\n        return\n"
    },
    {
        "number": 4337,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    colors = stdin.split()\n    colors = {'P':0, 'W':1, 'G':2, 'Y':3}\n    colors_count = {}\n    for i in range(N):\n        colors_count[colors[i]] = colors_count.get(colors[i], 0) + 1\n    if colors_count['W'] == colors_count['G'] == colors_count['Y'] == colors_count['P']:\n        return 'Three'\n    if colors_count['P'] == colors_count['W'] == colors_count['Y'] == colors_count['G']:\n        return 'Four'\n    return 'Two'\n"
    },
    {
        "number": 4337,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    color = stdin.strip().split(' ')\n    count = 0\n    for i in range(n):\n        if (color[i] == 'P'):\n            if (count == 3):\n                print('Three')\n                break\n            count += 1\n        elif (color[i] == 'W'):\n            if (count == 4):\n                print('Four')\n                break\n            count += 1\n    return '' if count!= 3 else 'Three'\n"
    },
    {
        "number": 4337,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    For each tuple S_i = S_i, run-length encoding with the specified color, and count the number of times each color occurred.\n    Then, check if the number of colors in the bag was 3.\n    \"\"\"\n    N = int(stdin.strip())\n    colors = stdin.split()\n    color_to_count = {}\n    for color in colors:\n        color = color.strip()\n        if color not in color_to_count:\n            color_to_count[color] = 1\n        else:\n            color_to_count[color] += 1\n    if len(color_to_count) == 3:\n        return 'Three'\n    if len(color_to_count) == 4:\n        return 'Four'\n    return 'None'\n"
    },
    {
        "number": 4337,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, S = stdin.split()\n    N = int(N)\n    S = list(S)\n    if N == 3 and ('G', 'P', 'Y') in set(S):\n        print('Three')\n    elif N == 4 and ('G', 'W', 'P', 'Y') in set(S):\n        print('Four')\n    else:\n        print('Five')"
    },
    {
        "number": 4338,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns one integer \u2014 the number of doors with durability equal to $0$ at the end of the game, if you and Slavik both play optimally.\"\"\"\n    n, x, y = (int(i) for i in stdin.split())\n    doors = list(int(i) for i in stdin.split())\n    doors_dict = dict()\n    for i in range(n):\n        doors_dict[i] = doors[i]\n    count_with_0 = 0\n    while True:\n        for i in range(len(doors)):\n            if i!= 0 and doors_dict[i]!= 0:\n                if doors[i] - doors[i - 1] >= 0:\n                    doors_dict[i] -= x\n                else:\n                    if doors_dict[i - 1] == 0:\n                        doors_dict[i] -= x\n                    else:\n                        doors_dict[i] -= doors_dict[i - 1]\n                        if doors_dict[i] == 0:\n                            count_with_0 += 1\n            else:\n                if doors_dict[i] == 0:\n                    count_with_0 += 1\n        if count_with_0 == n:\n            return count_with_0\n        count_with_0 = 0\n        for i in range(len(doors)):\n            if i!= n - 1 and doors_dict[i]!= 0:\n                if doors[i] + doors[i + 1] <= 10 ** 5:\n                    if doors_dict[i + 1] == 0:\n                        doors_dict[i] += y\n                    else:\n                        doors_dict[i + 1] += y\n                        if doors_dict[i] == 0:\n                            count_with_0 += 1\n                else:\n                    if doors_dict[i + 1] == 0:\n                        doors_dict[i] += y\n                        if doors_dict[i] == 0:\n                            count_with_0 += 1\n            else:\n                if doors_dict[i] == 0:\n                    count_with_0 += 1\n        if count_with_0 == n:\n            return count_with_0\n"
    },
    {
        "number": 4338,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split())\n    doors = list(map(int, stdin.split()))\n    \n    door_values = {door: max(0, door - x) for door in doors}\n    slavik_values = {door: max(0, door + y) for door in doors}\n    \n    while True:\n        is_slavik_win = all(door >= 0 for door in slavik_values.values())\n        is_door_win = all(door >= 0 for door in door_values.values())\n        if is_slavik_win and is_door_win:\n            break\n        for i, door in enumerate(doors):\n            if door > 0:\n                if door in door_values:\n                    door_values[i] = max(0, door_values[i] - 1)\n                if door in slavik_values:\n                    slavik_values[i] = max(0, slavik_values[i] + 1)\n    \n    return sum(door_values.values())\n"
    },
    {
        "number": 4338,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(i) for i in stdin.split(\" \")]\n    # n, x, y = a\n    # n, x = a\n    # n, x = map(int, input().split())\n    n, x, y = a\n    def f(x, y):\n        res = 0\n        if x > y:\n            x, y = y, x\n        while x > 0:\n            x -= y\n            res += 1\n        return res\n    return f(n, x) - f(n, y)"
    },
    {
        "number": 4338,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    inp = list(map(int, stdin.split()))\n    n = inp[0]\n    a = inp[1:]\n    y = 10 ** 5\n    b = 0\n    d = 0\n    while True:\n        if a[d] + b >= y:\n            break\n        if a[d] >= y:\n            b = y\n        else:\n            b = a[d]\n        d = (d + 1) % n\n    c = 0\n    while True:\n        if a[c] + b >= y:\n            break\n        if a[c] >= y:\n            b = y\n        else:\n            b = a[c]\n        c = (c + 1) % n\n    return d + 1\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4338,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = list(map(int, stdin.split()))\n    doors = list(map(int, stdin.split()))\n    d = list(zip(doors, range(len(doors))))\n    d.sort(key=lambda x: (x[1], -x[0]))\n    res = 0\n    while True:\n        if all([d[i][0] >= 0 for i in range(n)]):\n            res += 1\n            break\n        for i in range(n):\n            if d[i][0] > 0 and d[i][1]!= n - 1:\n                d[i] = (d[i][0] - min(d[i][0], x), d[i][1] + 1)\n            elif d[i][0] > 0:\n                d[i] = (d[i][0] - min(d[i][0], x), d[i][1] + 1)\n                x -= min(d[i][0], x)\n            elif d[i][1]!= n - 1:\n                d[i] = (0, d[i][1] + 1)\n            else:\n                break\n    return res\n"
    },
    {
        "number": 4338,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('5 3 3')\n    '2'\n    >>> solution('4 4 4')\n    '0'\n    >>> solution('10 10 10 10 10')\n    '5'\n    '''\n    n, x, y = map(int, stdin.split())\n    #n = 6\n    #x = 2\n    #y = 6\n    doors = sorted([int(v) for v in stdin.split()])\n    #doors = [2, 3, 4, 5, 6]\n    #x = 2\n    #y = 6\n    #a = sorted(list(map(int, input().split())))\n    a = list(map(int, input().split()))\n    #a = [2,3,4,5,6]\n    #n = len(doors)\n    #n = 5\n    #n = 4\n    #x = 3\n    #y = 6\n    #a = [1,2,5,6,7]\n    #a = [2,3,4,5,6]\n    #a = [1,2,3,4,5]\n    #a = [1,2,3,4,5,6,7,8,9]\n    #n = 10\n    #a = [10,10,10,10,10,10,10,10,10,10]\n    #a = [10,10,10,10,10,10,10,10,10,10]\n    #a = [10,10,10,10,10,10,10,10,10,10]\n    #a = [10,10,10,10,10,10,10,10,10,10]\n    #a = [10,10,10,10,10,10,10,10,10,10]\n    #a = [10,10,10,10,10,10,10,10,10,10,10]\n    #a = [10,10,10,10,10,10,10,10,10,10,10,10,10]\n    #a = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]\n    #a = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10]\n    #n = 10\n    #a
    },
    {
        "number": 4338,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4338,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 4338,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split())\n    doors = list(map(int, stdin.split()))\n\n    def first_move() -> None:\n        for door, x, y in zip(doors, x, y):\n            if door > 0:\n                door -= x\n\n    def second_move() -> None:\n        for door, x, y in zip(doors, x, y):\n            if door > 0:\n                door += y\n\n    def play_second_move():\n        for door, x, y in zip(doors, x, y):\n            if door > 0:\n                door += y\n\n    first_move()\n    second_move()\n    play_second_move()\n\n    count = 0\n    for door in doors:\n        if door == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 4338,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return 1\n"
    },
    {
        "number": 4339,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    a_list = list(map(int, stdin.split()))\n    b_list = list(map(int, stdin.split()))\n\n    good_count = 0\n\n    # Brute Force\n    for i in range(N - 1):\n        for j in range(i + 1, N):\n            if a_list[i] + a_list[j] > b_list[i] + b_list[j]:\n                good_count += 1\n    return str(good_count)\n"
    },
    {
        "number": 4339,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    topics = sorted(list(map(int, stdin.split())))\n    ans = 0\n    for i in range(1, n):\n        if topics[i] + topics[i - 1] > topics[i - 1] + topics[i]:\n            ans += 1\n    print(ans)\n    return ans\n\nsolution('''\n4\n4 8 2 6 2\n4 5 4 1 3\n''')"
    },
    {
        "number": 4339,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a_list = list(map(int, stdin.split()[1].split()))\n    b_list = list(map(int, stdin.split()[2].split()))\n    ans = 0\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if (a_list[i] + a_list[j]) > (b_list[i] + b_list[j]):\n                ans += 1\n    print(ans)\n\nsolution()\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4339,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    teachers_interestingness = list(map(int, stdin.split()[1:]))\n    students_interestingness = list(map(int, stdin.split()[1:]))\n    good_pairs = 0\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if (teachers_interestingness[i] + teachers_interestingness[j]) > (students_interestingness[i] + students_interestingness[j]):\n                good_pairs += 1\n    return good_pairs\n"
    },
    {
        "number": 4339,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    stdin = stdin.split()\n    n = int(stdin[0])\n    topic = list(map(int, stdin[1:]))\n    good = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if topic[i] + topic[j] > topic[j] + topic[i]:\n                good += 1\n    return str(good)\n"
    },
    {
        "number": 4339,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n\n    # dp[i][j] i - number of good pairs j\n    dp = [[0]*n for i in range(n)]\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                dp[i][j] = a[i] + b[j]\n            else:\n                if a[i] > b[j]:\n                    dp[i][j] = dp[i][j-1] + 1\n                elif a[i] < b[j]:\n                    dp[i][j] = dp[i-1][j] + 1\n    return str(sum(dp[i][j] for i in range(n) for j in range(n)))\n"
    },
    {
        "number": 4339,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # replace this for solution\n    return str(test(stdin.split()))\n\ndef"
    },
    {
        "number": 4339,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] + a[j] > b[i] + b[j]:\n                print(1)\n                return\n    print(0)"
    },
    {
        "number": 4339,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    teacher_interestingness = [int(x) for x in stdin.split()[1].split()]\n    student_interestingness = [int(x) for x in stdin.split()[2].split()]\n    good_pairs = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if teacher_interestingness[i] + teacher_interestingness[j] > student_interestingness[i] + student_interestingness[j]:\n                good_pairs += 1\n    return str(good_pairs)\n"
    },
    {
        "number": 4339,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a = sorted(a)\n    b = list(map(int, stdin.split()))\n    b = sorted(b)\n    count = 0\n    for i in range(n):\n        if a[i] + b[i] > a[i] + b[i + 1]:\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 4340,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    res = []\n    res.append(a[0])\n    for i in range(1, n):\n        res.append(a[i - 1] + 1 if a[i] == a[i - 1] else a[i])\n    return''.join(map(str, res))\n\nstdin = input()\nprint(solution(stdin))\n\n\"\"\"\n"
    },
    {
        "number": 4340,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    _, input_ = stdin.split()\n    n = int(input_)\n    array = list(map(int, input_.split()))\n    for i in range(0, n):\n        if array[i] == 1:\n            array[i] = 2\n        elif array[i] == 2:\n            array[i] = 1\n        elif array[i] == 3:\n            array[i] = 4\n        elif array[i] == 4:\n            array[i] = 3\n        elif array[i] == 5:\n            array[i] = 6\n        elif array[i] == 6:\n            array[i] = 5\n    #print(array)\n    for i in range(0, n):\n        array[i] = str(array[i])\n    print(' '.join(array))\n    return"
    },
    {
        "number": 4340,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    for i in range(len(a)):\n        if a[i] == 1:\n            a[i] = 2\n        elif a[i] == 2:\n            a[i] = 1\n        elif a[i] == 3:\n            a[i] = 4\n        elif a[i] == 4:\n            a[i] = 3\n        elif a[i] == 5:\n            a[i] = 6\n        elif a[i] == 6:\n            a[i] = 5\n    for i in range(len(a)):\n        if a[i] == 10:\n            a[i] = 9\n        elif a[i] == 9:\n            a[i] = 10\n    return \" \".join(map(str, a))\n\n\ndef"
    },
    {
        "number": 4340,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    b = []\n    for i in range(1, len(a)):\n        a[i] = a[i] if a[i - 1]!= a[i] else a[i - 1]\n        b.append(a[i])\n    return str(a) +'' + str(b)\n\n\ndef"
    },
    {
        "number": 4340,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    result = list(a)\n    for i in range(1, n):\n        result[i] = result[i - 1]\n    for i in range(2, n):\n        result[i] = result[i - 1] + result[i - 2]\n    for i in range(3, n):\n        result[i] = result[i - 1] + result[i - 2] + result[i - 3]\n    for i in range(4, n):\n        result[i] = result[i - 1] + result[i - 2] + result[i - 3] + result[i - 4]\n    for i in range(5, n):\n        result[i] = result[i - 1] + result[i - 2] + result[i - 3] + result[i - 4] + result[i - 5]\n    for i in range(6, n):\n        result[i] = result[i - 1] + result[i - 2] + result[i - 3] + result[i - 4] + result[i - 5] + result[i - 6]\n    for i in range(7, n):\n        result[i] = result[i - 1] + result[i - 2] + result[i - 3] + result[i - 4] + result[i - 5] + result[i - 6] + result[i - 7]\n    for i in range(8, n):\n        result[i] = result[i - 1] + result[i - 2] + result[i - 3] + result[i - 4] + result[i - 5] + result[i - 6] + result[i - 7] + result[i - 8]\n    for i in range(9, n):\n        result[i] = result[i - 1] + result[i - 2] + result[i - 3] + result[i - 4] + result[i - 5] + result[i - 6] + result[i - 7] + result[i - 8] + result[i - 9]\n    for i in range(10, n):\n        result[i] = result[i - 1] + result[i - 2] + result[i - 3] + result[i - 4] + result[i - 5] + result[i - 6] + result[i - 7] + result[i - 8] + result[i - 9] + result[i - 10]\n    return \" \".join(map(str, result))\n"
    },
    {
        "number": 4340,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, a = stdin.split()\n    a = list(map(int, a.split()))\n    print(*[i + 1 for i in range(len(a)) if a[i] % 2!= 0], sep=' ')\n    return\n"
    },
    {
        "number": 4340,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.strip().split()))\n    a = sorted(a)\n    print(a)\n    i = 2\n    while i < len(a):\n        a[i] = a[i-1] + a[i]\n        i += 1\n    a = sorted(a, reverse=True)\n    print(a)\n    for i, _ in enumerate(a):\n        a[i] = 1 if a[i] == 1 else 10\n    return''.join(map(str, a))\n    \n"
    },
    {
        "number": 4340,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split()\n    a = list(map(int, a))\n    while a:\n        a = list(map(lambda x, y: x if x < y else y, a, a[1:]))\n        a = list(map(lambda x, y: x if x > y else y, a, a[1:]))\n    return''.join(map(str, a))\n"
    },
    {
        "number": 4340,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    arr = list(map(int, stdin.split()[1:]))\n    res = []\n    for i in range(1, n + 1):\n        if i not in arr:\n            if i * 2 in arr:\n                arr.remove(i * 2)\n                arr.remove(i)\n                res.append(i)\n                res.append(i * 2)\n            elif i * 2 + 1 in arr:\n                arr.remove(i * 2 + 1)\n                arr.remove(i)\n                res.append(i)\n                res.append(i * 2 + 1)\n            elif i * 3 in arr:\n                arr.remove(i * 3)\n                arr.remove(i)\n                res.append(i)\n                res.append(i * 3)\n            elif i * 4 in arr:\n                arr.remove(i * 4)\n                arr.remove(i)\n                res.append(i)\n                res.append(i * 4)\n        else:\n            continue\n    return''.join([str(i) for i in res])\n\n\ndef"
    },
    {
        "number": 4340,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n\n    print(*(str(arr[i]) + str(arr[i + 1]) + str(arr[i + 2]) + str(arr[i + 3]) + str(arr[i + 4]) for i in range(len(arr) - 4)))\n\n\n    return ''\n"
    },
    {
        "number": 4341,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n'''\nimport sys\nsys.setrecursionlimit(10**6)\nclass Solution:\n    def get_cycles(self, adj):\n        visited = set()\n        cycles = []\n        for v in range(len(adj)):\n            if v not in visited:\n                self.dfs(adj, v, visited, cycles)\n        return len(cycles)\n\n    def dfs(self, adj, v, visited, cycles):\n        visited.add(v)\n        for nxt in adj[v]:\n            if nxt not in visited:\n                self.dfs(adj, nxt, visited, cycles)\n            else:\n                cycles.append(sorted([v, nxt]))"
    },
    {
        "number": 4341,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = []\n    for _ in range(m):\n        u, v = map(int, stdin.split())\n        edges.append((u, v))\n        edges.append((v, u))\n\n    g = defaultdict(list)\n    for u, v in edges:\n        g[u].append(v)\n        g[v].append(u)\n\n    visited = set()\n    res = 0\n    for u in range(1, n+1):\n        if u in visited:\n            continue\n        visited.add(u)\n        stack = [u]\n        while stack:\n            v = stack.pop()\n            visited.add(v)\n            for w in g[v]:\n                if w not in visited:\n                    stack.append(w)\n        res += 1\n\n    print(res)\n\nsolution(input())\n"
    },
    {
        "number": 4341,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    graph = {i: [] for i in range(1, n + 1)}\n    for _ in range(m):\n        u, v = map(int, stdin.strip().split())\n        graph[u].append(v)\n        graph[v].append(u)\n\n    visited = set()\n    cnt = 0\n    for i in range(1, n + 1):\n        if i in visited:\n            continue\n        stack = [i]\n        visited.add(i)\n        while stack:\n            node = stack.pop()\n            for neigh in graph[node]:\n                if neigh in visited:\n                    continue\n                visited.add(neigh)\n                stack.append(neigh)\n        cnt += 1\n    return str(cnt)\n"
    },
    {
        "number": 4341,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    g = [[] for _ in range(n)]\n    for _ in range(m):\n        u, v = map(int, stdin.split())\n        u -= 1\n        v -= 1\n        g[u].append(v)\n        g[v].append(u)\n    cycles = []\n    for i in range(n):\n        if len(g[i]) == 1:\n            cycles.append(i + 1)\n    print(len(cycles))\n    return cycles\n"
    },
    {
        "number": 4341,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\nfrom typing import List\nfrom collections import defaultdict\n\ndef"
    },
    {
        "number": 4341,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    graph = [[] for i in range(n)]\n    for i in range(m):\n        v, u = list(map(int, stdin.split()))\n        graph[v].append(u)\n        graph[u].append(v)\n    #print(graph)\n    res = 0\n    for i in range(n):\n        visited = [False for i in range(n)]\n        stack = [i]\n        visited[i] = True\n        count = 0\n        while stack:\n            current = stack.pop()\n            for nei in graph[current]:\n                if not visited[nei]:\n                    visited[nei] = True\n                    stack.append(nei)\n                    count += 1\n        if count == n:\n            res += 1\n    print(res)"
    },
    {
        "number": 4341,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n"
    },
    {
        "number": 4341,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = list(map(int, stdin.split()))\n    graph = [[] for _ in range(n)]\n    for i in range(m):\n        u, v = edges[i * 2], edges[i * 2 + 1]\n        graph[u].append(v)\n        graph[v].append(u)\n    count = 0\n    visited = [False] * n\n    for i in range(n):\n        if not visited[i]:\n            count += 1\n            cycle(graph, i, visited)\n    return str(count)\n\n\ndef"
    },
    {
        "number": 4341,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\n'''"
    },
    {
        "number": 4341,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\n[[\"\"\"\n\nExample 1:\n\nInput:\n\n5 4\n1 2\n3 4\n5 4\n3 5\n\nOutput:\n\n1\n\nExample 2:\n\nInput:\n\n17 15\n1 8\n1 12\n5 11\n11 9\n9 15\n15 5\n4 13\n3 13\n4 3\n10 16\n7 10\n16 7\n14 3\n14 4\n17 6\n\nOutput:\n\n2\n\n\"\"\", \"\"\"\n\nExplanation:\n\nFrom the diagram above we see that there are two connected components: $[3, 4, 5]$ and $[10, 16]$, which is also a cycle.\n\nIn fact, any graph which contains at least one cycle is also a connected graph. Thus, there are $2$ connected components: $[3, 4, 5]$ and $[10, 16]$, which are both cycles.\n\n\"\"\"]\n\n\n\ndef"
    },
    {
        "number": 4342,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Examples:\n       solution(\"2 0 0 1 2\") == 1\n       solution(\"5 1 0 0 1 2\") == 4\n       solution(\"3 1 1 2\") == 0\n       solution(\"1 1 2\") == 0\n    '''\n    n = int(stdin.split()[0])\n    colors = list(map(int, stdin.split()[1:]))\n    \n    if any(x == 1 for x in colors):\n        return \"1\"\n    if any(x == 2 for x in colors):\n        return \"4\"\n    if any(x == 0 for x in colors):\n        return \"0\"\n\n    def find_components(x:int):\n        if x in colors:\n            colors.remove(x)\n            for i in colors:\n                if i == 1:\n                    components += 1\n                elif i == 2:\n                    components += 1\n        return components\n\n    components = 0\n    colors.sort()\n    \n    for i in range(n):\n        components = max(components, find_components(colors[i]))\n        colors.pop(i)\n    \n    return str(components)"
    },
    {
        "number": 4342,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    is_ok = False\n    color_dict = {}\n    for i in range(n):\n        color, node = stdin.split()\n        color_dict[i] = color\n    for i in range(n):\n        if color_dict[i] == '0':\n            if i + 1 < n and color_dict[i + 1] == '0':\n                is_ok = True\n        if color_dict[i] == '1':\n            if i - 1 >= 0 and color_dict[i - 1] == '1':\n                is_ok = True\n    if is_ok:\n        return str(n - 1)\n    else:\n        return str(0)\n"
    },
    {
        "number": 4342,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    edges = list(map(lambda x: tuple(map(int, x.split())), stdin.split('\\n')))\n\n    # colors, edges = [], []\n    # for _ in range(n):\n    #     c = 0\n    #     while True:\n    #         if c not in colors:\n    #             colors.append(c)\n    #             break\n    #         c += 1\n    # colors = sorted(colors)\n    colors = range(n)\n    colors = dict(zip(colors, colors))\n\n    def is_nice(e):\n        return not any(c == colors[i] and i!= e[0] for i in e)\n\n    def get_comps(e):\n        return e[1] in colors and e[0] in colors\n\n    def get_edges(e):\n        return e[1] not in colors and e[0] not in colors\n\n    components = set()\n    for e in edges:\n        if get_comps(e):\n            components.add(e)\n            continue\n        if get_edges(e):\n            components.remove(e)\n            continue\n        if is_nice(e):\n            components.add(e)\n    return len(components)\n"
    },
    {
        "number": 4342,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin.split()[0])\n    if n == 1:\n        return \"0\"\n    is_colored: List[bool] = list(map(lambda x: x == 0, map(int, stdin.split()[1:])))\n    is_red: List[bool] = list(map(lambda x: x == 1, map(int, stdin.split()[1:])))\n    is_blue: List[bool] = list(map(lambda x: x == 2, map(int, stdin.split()[1:])))\n    # print(is_colored, is_red, is_blue)\n    n = len(is_colored)\n    # print(n)\n    good: int = 0\n    for i in range(n):\n        if is_colored[i]:\n            for j in range(i+1, n):\n                if is_red[i] and is_blue[j]:\n                    good += 1\n                    break\n                elif is_blue[i] and is_red[j]:\n                    good += 1\n                    break\n        if is_blue[i]:\n            for j in range(i+1, n):\n                if is_red[j] and is_blue[i]:\n                    good += 1\n                    break\n                elif is_red[i] and is_red[j]:\n                    good += 1\n                    break\n    # print(good)\n    return str(good)\n"
    },
    {
        "number": 4342,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 2:\n        return '1'\n    elif n == 3:\n        return '4'\n    else:\n        colors = list(map(lambda x: int(x), stdin.split()))\n        colors = sorted(colors)\n        res = 0\n        if colors[0] == 1:\n            colors.pop(0)\n            res += len(colors)\n            if colors[0] == 1:\n                colors.pop(0)\n                res += len(colors)\n        else:\n            colors.pop(0)\n            colors.pop(0)\n            res += 1\n        return str(res)\n"
    },
    {
        "number": 4342,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    data = list(map(int, stdin.split()))\n    n = data[0]\n    color = data[1:]\n    d = {i: 1 if color[i-1] == 1 else 2 for i in range(1, n+1)}\n    res = []\n    def bfs(node):\n        q = deque([node])\n        seen = set()\n        while q:\n            v = q.popleft()\n            if v in seen:\n                continue\n            seen.add(v)\n            for nxt in [d[v]] + [d[nxt] for nxt in adj[v]]:\n                if nxt not in seen:\n                    q.append(nxt)\n        res.append(len(seen))\n        return\n    adj = defaultdict(list)\n    for i in range(1, n+1):\n        adj[i] = adj[d[i]] + [i]\n    for i in range(1, n+1):\n        if i not in adj:\n            continue\n        bfs(i)\n    return str(sum(res))\n\nsolution(input())\n"
    },
    {
        "number": 4342,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return '0'\n"
    },
    {
        "number": 4342,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    colors = list(map(int, stdin.split()))\n    tree = {}\n    for i in range(n):\n        tree[i] = colors[i]\n    print(tree)\n    colors = colors[::-1]\n    print(colors)\n    ans = 0\n    n = len(colors)\n    visited = {}\n    print(n)\n    for i in range(n):\n        print(i)\n        print(tree[i])\n        if tree[i] == 2:\n            print('here')\n            if tree[i] in visited.keys():\n                print('here2')\n                if tree[i] not in visited.values():\n                    print('here3')\n                    visited[i] = 1\n                else:\n                    print('here4')\n                    ans += 1\n            else:\n                print('here5')\n                visited[i] = 1\n        else:\n            print('here6')\n            if tree[i] in visited.keys():\n                print('here7')\n                if tree[i] not in visited.values():\n                    print('here8')\n                    visited[i] = 2\n                else:\n                    print('here9')\n                    ans += 1\n            else:\n                print('here10')\n                visited[i] = 2\n    return str(ans)\nprint(solution(\"\"\"2 0 0 1 2\n1 2\n2 3\n2 4\n2 5\n\"\"\"))"
    },
    {
        "number": 4342,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip().split()[0])\n    blu_vs = [int(i) for i in stdin.strip().split()[1:]]\n    red_vs = [i for i in range(n) if blu_vs[i]!= 2 and blu_vs[i]!= 0]\n    visited = [False] * n\n    edges = []\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if blu_vs[i] == blu_vs[j] == 0:\n                edges.append((i, j))\n    ans = 0\n    def dfs(node, color):\n        nonlocal ans\n        if visited[node]:\n            return\n        visited[node] = True\n        if color == 1:\n            red_vs.remove(node)\n        elif color == 2:\n            blu_vs.remove(node)\n        ans += 1\n        for i in range(n):\n            if blu_vs[i] == 2:\n                dfs(i, color)\n            elif blu_vs[i] == 0:\n                dfs(i, color)\n    for edge in edges:\n        dfs(edge[0], blu_vs[edge[0]])\n        dfs(edge[1], blu_vs[edge[1]])\n    return str(ans)"
    },
    {
        "number": 4342,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    colors = {1, 2}\n    res = 0\n    for i in range(n - 1):\n        if not (a[i] in colors and a[i + 1] in colors):\n            break\n        colors.update({a[i], a[i + 1]})\n    else:\n        res = 1\n    return str(res)"
    },
    {
        "number": 4343,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join(sorted(set(stdin)))\n"
    },
    {
        "number": 4343,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.split()[0])\n    s = stdin.split()[1]\n    t = stdin.split()[2]\n    return \"\".join(sorted(sorted(s + t)[k // 2]))\n"
    },
    {
        "number": 4343,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    if k % 2!= 0:\n        return stdin\n    list_s = sorted(stdin)\n    list_t = sorted(stdin)\n    if list_s == list_t:\n        return stdin\n    return list_s[len(list_s) // 2]"
    },
    {
        "number": 4343,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, s, t = stdin.split()\n    return sorted(a)[int(len(a) / 2)]\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4343,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split()\n    min_s = min(words)\n    max_t = max(words)\n    k = len(words[0])\n    sorted_list = sorted(words)\n    result = []\n    for i in range(len(sorted_list)):\n        if sorted_list[i] == min_s:\n            result.append(sorted_list[i])\n            continue\n        else:\n            break\n    if sorted_list[i] == max_t:\n        return min_s\n    else:\n        for i in range(len(sorted_list)):\n            if sorted_list[i] == max_t:\n                result.append(sorted_list[i])\n                continue\n            else:\n                break\n        result.sort()\n        print(result[int(len(result) / 2)])\n    return result[int(len(result) / 2)]\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4343,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    k, s, t = map(lambda x: list(x), stdin.split())\n    count = 0\n    while k > count:\n        if len(k) == count:\n            k = sorted(k)\n            return ''.join(k)\n        k.sort()\n        count += 1\n"
    },
    {
        "number": 4343,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    s = stdin.split()[1]\n    t = stdin.split()[2]\n    \n    s_set = set(s)\n    t_set = set(t)\n    s_not_t_set = s_set.difference(t_set)\n    t_not_s_set = t_set.difference(s_set)\n    s_not_t_set = list(s_not_t_set)\n    t_not_s_set = list(t_not_s_set)\n    \n    if len(s_not_t_set) % 2!= 0:\n        median = s_not_t_set[len(s_not_t_set) // 2]\n    else:\n        median = (s_not_t_set[len(s_not_t_set) // 2 - 1] + s_not_t_set[len(s_not_t_set) // 2]) / 2\n    \n    if len(t_not_s_set) % 2!= 0:\n        median = t_not_s_set[len(t_not_s_set) // 2]\n    else:\n        median = (t_not_s_set[len(t_not_s_set) // 2 - 1] + t_not_s_set[len(t_not_s_set) // 2]) / 2\n    \n    return ''.join([s, median, t])"
    },
    {
        "number": 4343,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    k = int(input())\n    s = input()\n    t = input()\n    sorted_s = sorted(s)\n    sorted_t = sorted(t)\n    median = None\n    for i in range(k):\n        if sorted_s[i] < sorted_t[i]:\n            if not median:\n                median = sorted_s[i]\n            else:\n                median = sorted_s[i]\n    return median\n"
    },
    {
        "number": 4343,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.split()[0])\n    s = stdin.split()[1]\n    t = stdin.split()[2]\n    return \"\".join(sorted(sorted(set(s) - set(t)), key=lambda x: x.lower()))\n"
    },
    {
        "number": 4343,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.split()[0])\n    s = stdin.split()[1]\n    t = stdin.split()[2]\n    all_strings = sorted(list(set(s + t)))\n    k = int(len(all_strings) / 2)\n    median = all_strings[k]\n    return median\n"
    },
    {
        "number": 4344,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.strip().split()))\n    a = list(map(int, stdin.strip().split()))\n    a = set(a)\n    if len(a)!= n:\n        return \"NO\"\n\n    res = []\n    for i in range(1, n+1):\n        if i not in a:\n            res.append(i)\n    if len(res)!= k:\n        return \"NO\"\n    return \"YES\"\n\n\nprint(solution(\"5 3\\n15 13 15 15 12\\n\"))\n"
    },
    {
        "number": 4344,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # return \"NO\"\n    # num_student, size_team = map(int, stdin.split())\n    num_student, *data = map(int, stdin.split())\n    rating = list(map(int, data))\n    rating = sorted(rating)\n    min_rating = rating[0]\n    max_rating = rating[-1]\n    for i in range(num_student):\n        if rating[i] < min_rating:\n            print(\"NO\")\n            break\n    for i in range(num_student-1, -1, -1):\n        if rating[i] > max_rating:\n            print(\"NO\")\n            break\n    else:\n        res = []\n        for i in range(num_student):\n            res.append(i+1)\n        print(*res)\n\n    return \"YES\""
    },
    {
        "number": 4344,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\ndef"
    },
    {
        "number": 4344,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input = list(map(int, stdin.split()))\n    n, k = input[0], input[1]\n    ratings = list(map(int, stdin.split()))\n    ratings.sort()\n    for i in range(k):\n        if ratings[i]!= ratings[i+1]:\n            print(\"NO\")\n            return\n    print(\"YES\")\n    for i in range(k):\n        print(i+1, end=\" \")\n    return\n\nsolution(input)\n"
    },
    {
        "number": 4344,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n < k:\n        return \"NO\"\n    possible_indices = list(range(1, n+1))\n    sorted_indices = sorted(possible_indices)\n    rating = [int(x) for x in stdin.split()]\n    team = set()\n    for student in rating:\n        while len(team) < k:\n            if student in team:\n                break\n            else:\n                team.add(student)\n    if len(team) == k:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 4344,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4344,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split()]\n    student_rating = [int(i) for i in stdin.split()]\n\n    res = []\n    for i in range(n):\n        res.append(i+1)\n    for i in range(1, n):\n        if student_rating[i-1]!= student_rating[i]:\n            res.remove(i)\n            break\n    for i in range(k):\n        if student_rating[i-1]!= student_rating[k-1]:\n            res.remove(k-1)\n            break\n\n    return 'YES' if len(res) == k else 'NO'\n"
    },
    {
        "number": 4344,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n  N, K = list(map(int, stdin.split()))\n  a = list(map(int, stdin.split()))\n  \n  def possible(team):\n    return sum(team) == sum(set(a))\n\n  def solve():\n    for i, ai in enumerate(a, 1):\n      if possible(list(range(1, i+1)) + list(range(i+1, N))):\n        return \"YES\" + \" \".join(map(str, list(range(1, N+1)))) + \"\\n\"\n    return \"NO\"\n\n  return solve()"
    },
    {
        "number": 4344,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\nTASK:\n\n---\n\n## PART 1\n\na.\n\ndef"
    },
    {
        "number": 4344,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    num_list = set([])\n    for i in range(n):\n        if a[i] in num_list:\n            return \"NO\"\n        num_list.add(a[i])\n    num_list = list(num_list)\n    num_list.sort()\n    for i in range(len(num_list)):\n        print(num_list[i])\n    return \"YES\""
    },
    {
        "number": 4345,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a = sorted(a)\n    if a == sorted(set(a)):\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 4345,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if is_increasing(stdin.split()) else \"NO\"\n\n\ndef"
    },
    {
        "number": 4345,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    if a == sorted(a) or a == sorted(a, reverse=True):\n        return \"YES\"\n    return \"NO\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4345,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 4345,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1]))\n    \n    if sorted(a) == a:\n        return \"YES\"\n    \n    return \"NO\"\n"
    },
    {
        "number": 4345,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(x) for x in stdin.split()]\n    for i in range(len(a) - 1):\n        for j in range(i + 1, len(a)):\n            if a[i] > a[j] and (a[i] - a[j]) == 1 or (a[i] - a[j]) == -1:\n                print(\"YES\")\n                return \"YES\"\n    print(\"NO\")\n    return \"NO\"\n"
    },
    {
        "number": 4345,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    increasing = []\n    decreasing = []\n    for i in range(len(a)):\n        if a[i] < a[i-1]:\n            decreasing.append(a[i])\n        elif a[i] > a[i-1]:\n            increasing.append(a[i])\n        else:\n            return \"NO\"\n    if len(increasing) < len(decreasing):\n        return \"NO\"\n    a = increasing\n    b = decreasing\n    min_el = min(a)\n    max_el = max(b)\n    a_range = range(min_el, max_el + 1)\n    a_map = dict(zip(a, a_range))\n    b_map = dict(zip(b, a_range))\n    i = 0\n    j = 0\n    res = []\n    while i < len(a) and j < len(b):\n        if a_map[a[i]] > b_map[b[j]]:\n            res.append(0)\n            i += 1\n        elif a_map[a[i]] < b_map[b[j]]:\n            res.append(1)\n            j += 1\n        else:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 4345,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a = sorted(a)\n    m = {}\n    for i, j in zip(a, a[1:]):\n        if j - i > 0:\n            m[i] = j\n    for i in m:\n        for j in m:\n            if m[i] < m[j] and (i < j or (i == j and m[i] < m[m[i]])):\n                print(i, j)\n                return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 4345,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    if not a:\n        return \"NO\"\n    a.sort()\n    if a[0] >= a[-1]:\n        return \"NO\"\n    for i in range(n - 1):\n        if a[i] >= a[i + 1]:\n            continue\n        else:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 4345,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def _increasing_sequence(numbers):\n        i = 1\n        while i < len(numbers) - 1:\n            if numbers[i] <= numbers[i - 1]:\n                return False\n            i += 1\n        return True\n\n    def _decreasing_sequence(numbers):\n        i = 1\n        while i < len(numbers) - 1:\n            if numbers[i] >= numbers[i - 1]:\n                return False\n            i += 1\n        return True\n\n    numbers = list(map(int, stdin.split()))\n    if len(numbers) == 2:\n        if _increasing_sequence(numbers):\n            print('YES')\n        else:\n            print('NO')\n    else:\n        if _increasing_sequence(numbers) and _decreasing_sequence(numbers):\n            print('YES')\n        else:\n            print('NO')\n\n    return None\n\n\nsolution(input())\n"
    },
    {
        "number": 4346,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.splitlines()[0])\n    return '\\n'.join(str(i) for i in range(t))\n"
    },
    {
        "number": 4346,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef"
    },
    {
        "number": 4346,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    answers = []\n    for i in range(t):\n        t = stdin.split()\n        l = int(t[0])\n        v = int(t[1])\n        l_r = int(t[2])\n        r = int(t[3])\n\n        if (l_r - l) % v == 0 and (r - l_r) % v == 0:\n            answers.append(r - l)\n        else:\n            answers.append(0)\n\n    return '\\n'.join(str(x) for x in answers)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4346,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"\\n\".join([\n        str(x) for x in\n        solution_naive(int(stdin.strip().split()[0]), int(stdin.strip().split()[1]), int(stdin.strip().split()[2]), int(stdin.strip().split()[3])\n    ])\n"
    },
    {
        "number": 4346,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    n_0 = int(stdin.splitlines()[1])\n    v = []\n    p = []\n    p_0 = 0\n    for i in range(n):\n        v_i, l_i, r_i = map(int, stdin.splitlines()[2 * i + 2].split())\n        p_i = l_i * v_i\n        p_i = (r_i - 1) * v_i + p_i\n        if p_i!= p_0:\n            p.append(p_i)\n            p_0 = p_i\n        v.append(v_i)\n    v.sort()\n    p.sort()\n    p_0 = 0\n    for i in range(n):\n        if p_0 >= p[i]:\n            continue\n        if p_0 < p[i]:\n            p_0 = p[i]\n    return str(p_0)\n"
    },
    {
        "number": 4346,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    paths = [tuple(map(int, input().split())) for _ in range(t)]\n    count = 0\n    for (l, v, r, _) in paths:\n        if all(r % i == 0 for i in range(1, v + 1)):\n            if all(l % i == 0 for i in range(1, l // v + 1)):\n                count += 1\n    return str(count)\n"
    },
    {
        "number": 4346,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    stdin = stdin.split()[1:]\n    for i in range(t):\n        L, v, l, r = map(int, stdin[i*4:i*4 + 4])\n        if l % v == 0 and r % v == 0:\n            yield 0\n        elif l % v == 0 or r % v == 0:\n            yield 1\n        elif l % v!= 0 and r % v!= 0:\n            yield 2\n        elif l % v!= 0:\n            yield 3\n        else:\n            yield 4\n"
    },
    {
        "number": 4346,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin)\n    for i in range(T):\n        (l, v, ln, rn) = map(int, stdin.split())\n        if vn_divisible(l, v, ln) and vn_divisible(rn, v, ln) and ln in range(l, rn+1) and ln+1 in range(l, rn+1) and ln*v in range(l, rn+1):\n            print(sum(vn_divisible(ln*v, v, ln+1)))\n        else:\n            print(0)\n\ndef"
    },
    {
        "number": 4346,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4346,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.split()[0])\n    for i in range(T):\n        L, v, l, r = map(int, stdin.split()[i*4:i*4+4])\n        if (r - l) % v!= 0:\n            print(0)\n        else:\n            print(r - l // v)\n    return"
    },
    {
        "number": 4347,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2!= 0:\n        print(0)\n        return\n    n = n // 2\n    return answer(n)\n\ndef"
    },
    {
        "number": 4347,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    n = int(stdin)\n\n    if n % 2 == 0:\n        return 1\n    return int(1)"
    },
    {
        "number": 4347,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n%2==0:\n        return 1\n    else:\n        return 2"
    },
    {
        "number": 4347,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(range(1, n+1, 2))\n    b = list(range(2, n+1, 2))\n    c = b\n    while a:\n        a, b = b, a\n        c = [_a + _b for _a, _b in zip(a, b)]\n    return str(len(c) + sum(len(set(c)) * 2))\n"
    },
    {
        "number": 4347,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n <= 1:\n        return str(1)\n    if n % 2 == 0:\n        return str(0)\n    return str(solution(n-1) + solution(n-2))\n"
    },
    {
        "number": 4347,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('''1\n    2''')\n    '1'\n    >>> solution('''4\n    2''')\n    '3'\n    >>> solution('''8\n    20''')\n    '12164510040883200'\n    '''\n    n = int(stdin)\n    if n % 2!= 0:\n        return None\n    n //= 2\n    ways = [0] * (n + 1)\n    ways[0] = 1\n    for i in range(1, n + 1):\n        ways[i] = (ways[i - 1] + ways[i - 2]) % 1000000007\n    return str(ways[n])\n"
    },
    {
        "number": 4347,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    n = int(stdin)\n    return str(2**(n//2) - (n//2))\n"
    },
    {
        "number": 4347,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def binomial_coefficient(n, k):\n        # binomial coefficient: n choose k\n        return math.factorial(n) // (math.factorial(k) * math.factorial(n - k))\n\n    n = int(stdin)\n    n_factor = n / 2\n    ways = 0\n    n_factorial = math.factorial(n)\n    possible_dances = n_factorial\n    for k in range(n_factor, n_factor + 1):\n        n_k = binomial_coefficient(n, k)\n        possible_dances -= n_k\n        ways += n_k\n        if possible_dances < 0:\n            break\n    return str(ways)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4347,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    answer = 0\n    if int(stdin) % 2 == 0:\n        answer = 1\n    else:\n        n = int(stdin)\n        answer = 2 * math.ceil((n / 2))\n    return str(answer)\n"
    },
    {
        "number": 4347,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return 0\n    return combination_sum(n)\n\n\ndef"
    },
    {
        "number": 4348,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.strip()\n\n    remove_string = ''\n    while k and s:\n        if s[0] == 'a':\n            remove_string = remove_string + s[1:]\n            k -= 1\n            s = s[1:]\n            if not s:\n                return remove_string\n        elif s[0] == 'b':\n            remove_string = remove_string + s[1:]\n            k -= 1\n            s = s[1:]\n            if not s:\n                return remove_string\n        else:\n            remove_string = remove_string + s[1]\n            k -= 1\n            s = s[1:]\n            if not s:\n                return remove_string\n\n    return remove_string\n"
    },
    {
        "number": 4348,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin\n    while k > 0:\n        s = list(s)\n        if s[0] == 'a':\n            s[0] = 'b'\n            k -= 1\n        elif s[0] == 'b':\n            s[0] = 'a'\n            k -= 1\n        elif s[0] == 'z':\n            s.pop(0)\n            k -= 1\n        else:\n            s[0] = 'z'\n            k -= 1\n    return \"\".join(s)"
    },
    {
        "number": 4348,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    k = int(stdin.split()[1])\n    result = \"\"\n    if n == 0 or k == 0:\n        return \"\"\n    if n < k:\n        return \"\"\n\n    if n == 1:\n        return stdin\n\n    letters = stdin\n\n    for _ in range(k):\n        for i in range(len(letters) - 1):\n            if letters[i] == \"a\" or letters[i] == \"b\":\n                letters = letters[:i] + letters[i + 1:]\n                break\n\n        letters = letters.replace(\"a\", \"\", 1)\n        letters = letters.replace(\"b\", \"\", 1)\n\n    return letters\n"
    },
    {
        "number": 4348,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin\n    if n < k:\n        return ''\n    left = 0\n    right = 0\n    while right < n:\n        if s[left] == s[right]:\n            right += 1\n            continue\n        elif s[left] == s[right - 1]:\n            if right == 0:\n                break\n            else:\n                right -= 1\n                continue\n        else:\n            left += 1\n            right += 1\n    return s[left:left + k]"
    },
    {
        "number": 4348,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    print(stdin)"
    },
    {
        "number": 4348,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    length = int(stdin.split()[0])\n    char_to_remove = int(stdin.split()[1])\n    input_string = stdin.split()[2]\n    \n    if length < 1 or char_to_remove < 1 or char_to_remove > length:\n        return \"\"\n    \n    if char_to_remove == 1:\n        return \"\"\n    \n    lst_output = []\n    \n    for char in input_string:\n        if char == \"a\":\n            continue\n        if char == \"b\":\n            continue\n        if char == \"c\":\n            continue\n        if char == \"z\":\n            continue\n        lst_output.append(char)\n    \n    return \"\".join(lst_output)\n\nsolution(\"1 1\\n\")\n"
    },
    {
        "number": 4348,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    l = len(s)\n    if l == 0:\n        return ''\n    k = 0\n    while l - k >= 0:\n        if (k := s.find('a', k)) >= 0:\n            break\n        if (k := s.find('b', k)) >= 0:\n            break\n        if (k := s.find('z', k)) >= 0:\n            break\n    return s[:k] + s[k+1:]\n"
    },
    {
        "number": 4348,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 4348,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    res = \"\"\n    for _ in range(k):\n        while res and res[-1] in \"ab\":\n            res = res[:-1]\n        if not res:\n            break\n        res += \"b\"\n    return res\n\nsolution(input())"
    },
    {
        "number": 4348,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if not (0 < n < 1_000_000) or not (0 < k < n) or not (n >= k):\n        raise ValueError\n\n    return stdin.translate(str.maketrans('', '', 'abz'))[:n-k]\n\nsolution('1 1')\nsolution('1 1')\n"
    },
    {
        "number": 4349,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    k_1 = list(map(int, stdin.split()))\n    k_2 = list(map(int, stdin.split()))\n    k_3 = list(map(int, stdin.split()))\n    print(min(len(k_1), len(k_2), len(k_3)))\n"
    },
    {
        "number": 4349,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = (int(x) for x in stdin.split())\n    k = []\n    for i in range(n):\n        k.append(int(x) for x in stdin.split()[2 * i + 1].split())\n\n    sp = []\n    for i in range(m):\n        sp.append([int(x) for x in stdin.split()[2 * i + 2].split()])\n    return min(p[1] + k[p[0] - 1] for p in sp)\n"
    },
    {
        "number": 4349,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    k = list(map(int, stdin.split()))\n    d, t = list(map(int, stdin.split()))\n    dp = [[[float('inf'), float('inf')] for _ in range(2 * 10 ** 5 + 1)] for _ in range(n + 1)]\n    dp[1][0][1] = 1\n    for i in range(n):\n        dp[i + 1][0][1] = dp[i][0][1] + k[i]\n        dp[i + 1][0][0] = dp[i][0][0]\n    for i in range(1, n):\n        dp[i + 1][1][1] = dp[i][1][1] + dp[i][1][0]\n        dp[i + 1][1][0] = dp[i][1][0]\n    for i in range(2, n + 1):\n        for t in range(1, n + 1):\n            if dp[i][t][0] > dp[i - 1][t][0]:\n                dp[i][t][0] = dp[i - 1][t][0] + k[i - 1]\n                dp[i][t][1] = dp[i - 1][t][1]\n            if dp[i][t][0] > dp[i - 1][t][1]:\n                dp[i][t][0] = dp[i - 1][t][1] + k[i - 1]\n                dp[i][t][1] = dp[i - 1][t][0]\n            if dp[i][t][0] <= dp[i][t][1]:\n                dp[i][t][0] = dp[i][t][0] + min(k[i - 1], 2 * dp[i - 1][t][1] - dp[i][t][0])\n                dp[i][t][1] = dp[i][t][1]\n    return str(dp[n][d][1])"
    },
    {
        "number": 4349,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    k = list(map(int, stdin.split()))\n\n    # # answer = 0\n    # # k.sort(reverse=True)\n    # # k.reverse()\n    # k.sort(reverse=True)\n    k.sort(reverse=True)\n\n    def rec(curr: int, curr_type: int, k: list):\n        # global answer\n        if curr == 0:\n            return 0\n\n        if curr == 1:\n            return 2\n\n        for i, _ in enumerate(k):\n            # if k[i] == 0:\n            #     continue\n            if curr_type == k[i]:\n                if i + 1 == len(k) or k[i + 1]!= k[i]:\n                    return rec(curr - 1, curr_type, k) + 1\n                else:\n                    return rec(curr - 1, curr_type, k)\n        return curr\n\n    return rec(n, 0, k)"
    },
    {
        "number": 4349,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    k = list(map(int, stdin.split()))\n    max_k = max(k)\n    days = (1 + m - max_k) % m\n    print(days)\n    return days\n"
    },
    {
        "number": 4349,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    k_arr = list(map(int, stdin.split()))\n\n    days = [0] * n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if k_arr[i] == 0 and k_arr[j] == 0:\n                days[i] += 1\n                days[j] += 1\n\n    def get_max_day(k_arr):\n        d, t = 0, 0\n        for i in range(len(k_arr)):\n            if k_arr[i] == 1:\n                d = max(d, t)\n                t = 0\n            else:\n                t += 1\n        return max(d, t)\n\n    max_day = float('-inf')\n    for i in range(n):\n        d_i = days[i]\n        if d_i >= 2:\n            max_day = max(max_day, d_i)\n        else:\n            max_day = max(max_day, get_max_day(k_arr))\n\n    return max_day\n"
    },
    {
        "number": 4349,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, *trans = list(map(int, stdin.split()))\n    s = [0] + list(map(int, input().split()))\n    k = list(map(int, input().split()))\n    d = {}\n    for t, s, k, in zip(trans, s, k):\n        if t not in d:\n            d[t] = [s, k]\n        else:\n            d[t][0] += s\n            d[t][1] += k\n    ans = 0\n    for t in trans:\n        if t in d:\n            ans += max(0, d[t][1] - d[t][0])\n    return str(ans)"
    },
    {
        "number": 4349,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    k = list(map(int, stdin.split()))\n    d = list(map(int, stdin.split()))\n    res = 0\n    k_ = []\n    for i, j in zip(k, d):\n        k_.append((i, j))\n    k_.sort()\n    print(k_)\n\n    def solve(a: list, b: list, c: list):\n        d, e, f = b.pop(0), a.pop(0), c.pop(0)\n        if not a:\n            return d, e, f\n        if not b:\n            return d, e, f\n        if not c:\n            return d, e, f\n        if d > 0 and e > 0:\n            if d > e:\n                return solve(a, b, c)\n            else:\n                return solve(a, b, c)\n        if d == 0 and e == 0:\n            return solve(a, b, c)\n        if d > 0:\n            if e > 0:\n                if e > d:\n                    return solve(a, b, c)\n                else:\n                    return solve(a, b, c)\n            else:\n                return solve(a, b, c)\n\n    for i in k_:\n        d, e, f = solve(i[0], i[1], k_)\n        res += d\n        print(res)\n    return str(res)\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4349,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n\n    n = int(lines[0])\n    m = int(lines[1])\n    k = list(map(int, lines[2].split()))\n\n    sales = list(map(int, lines[3].split()))\n\n    f = list(map(int, lines[4].split()))\n\n    s = []\n    for i in range(m):\n        s.append(f[i] - sales[i])\n\n    l = 0\n    ans = float('inf')\n    for i in range(m):\n        if s[i] < k[i]:\n            continue\n        if i > 0 and s[i] > k[i - 1]:\n            continue\n        if i > 0 and s[i] == k[i - 1]:\n            continue\n        ans = min(ans, i + 1 + max(k))\n\n    return str(ans)\nprint(solution(input()))\n"
    },
    {
        "number": 4349,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    _, m, _ = stdin.split()\n    n = int(m)\n    k = map(int, stdin.split()[1:])\n    k = list(k)\n    d = {}\n    t = {}\n    d[0] = {1: 2, 2: 1}\n    t[1] = {1: 1}\n    t[2] = {1: 1}\n    for i in range(3, n + 1):\n        d[i] = {}\n        t[i] = {}\n        for j in range(1, i + 1):\n            if j not in d[i-1]:\n                d[i][j] = d[i-1][j] + 2\n            else:\n                d[i][j] = d[i-1][j] + 1\n        for j in range(1, i + 1):\n            if j not in t[i-1]:\n                t[i][j] = t[i-1][j] + 1\n            else:\n                t[i][j] = t[i-1][j]\n    ans = 0\n    print(d,t)\n    for i in range(n):\n        for j in range(i+1, n):\n            if d[i+1][k[i]] < d[j+1][k[j]] or t[i+1][k[i]] < t[j+1][k[j]] or d[i+1][k[i]] > d[j+1][k[j]] or t[i+1][k[i]] > t[j+1][k[j]]:\n                ans += 2*(k[i] + k[j])\n    print(ans)\n    return str(ans)\n\n\nsolution(\"\"\"5 3\n4 2 1 3 2\"\"\")\nsolution(\"\"\"5 6\n1 2 0 2 0\n2 4\n3 3\n1 5\n1 2\"\"\")\nsolution(\"\"\"5 7\n3 4\n2 4\n2 4\n3 5\n1 5\n2 5\"\"\")"
    },
    {
        "number": 4350,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = (int(i) for i in stdin.split())\n    grid = list(stdin)\n    \n    row_col_check = [[False for _ in range(m)] for _ in range(n)]\n    row_col_check[0][0] = True\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                row_col_check[i][j] = True\n    \n    row_check = []\n    for i in range(n):\n        if any(row_col_check[i]):\n            row_check.append(i)\n    \n    col_check = []\n    for i in range(m):\n        if any(row_col_check[j][i] for j in range(n)):\n            col_check.append(i)\n    \n    \n    if len(row_check) > n or len(col_check) > m:\n        return -1\n    \n    def get_min(check):\n        res = []\n        for i in range(len(check)):\n            if check[i]:\n                res.append(i)\n        return res\n    \n    if len(row_check) == n:\n        res = 0\n        for i in range(m):\n            if not row_col_check[0][i]:\n                return -1\n        \n        if len(col_check) == m:\n            return res + 1\n        else:\n            return -1\n    elif len(col_check) == m:\n        res = 0\n        for i in range(n):\n            if not row_col_check[i][0]:\n                return -1\n        return res + 1\n    elif row_check and col_check:\n        min_dist = 10**9\n        max_dist = 0\n        for i in row_check:\n            for j in col_check:\n                if row_col_check[i][j]:\n                    dist = abs(i - 0) + abs(j - 0)\n                    if dist < min_dist:\n                        min_dist = dist\n                    max_dist = max(max_dist, dist)\n        return min_dist if min_dist <= max_dist else -1\n    elif row_check:\n        min_dist = 10**9\n        max_dist = 0\n        for i in row_check:\n            if not row_col_check[i][0]:\n                dist = abs(i - 0)\n                if dist < min_dist:\n                    min_dist = dist\n                max_dist = max(max_dist, dist)\n        return min_dist if min_dist <= max_dist else -1\n    elif col_check:\n        min_dist = 10**9\n        max_dist = 0\n        for i in col_check:\n            if not row_col_check[0][i]:\n                dist = abs(i - 0)\n                if dist < min_dist:\n                    min_dist = dist\n                max_dist = max(max_dist, dist)\n        return min_dist if min_dist <= max_dist else -1\n    \n    else:\n        return -1\n\n\n\ndef"
    },
    {
        "number": 4350,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n\n    matrix = []\n    for _ in range(n):\n        matrix.append(list(stdin.strip()))\n\n    result = 0\n    for i in range(n):\n        for j in range(m):\n            # \u0435\u0441\u043b\u0438 \u044d\u0442\u043e \u0441\u0442\u043e\u043b\u0431\u0435\u0446\n            if j < m - 1:\n                # \u0441\u0440\u0430\u0437\u0443 \u043e\u0442\u0440\u0435\u0437\u0430\u0435\u043c \u0441\u0442\u043e\u043b\u0431\u0435\u0446 \u0438 \u043f\u043e\u0434\u0431\u0438\u0440\u0430\u0435\u043c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\n                if matrix[i][j] == matrix[i][j + 1]:\n                    matrix[i][j] = '*'\n                    matrix[i][j + 1] = '*'\n                    result += 1\n            if i < n - 1:\n                # \u0441\u0440\u0430\u0437\u0443 \u043e\u0442\u0440\u0435\u0437\u0430\u0435\u043c \u0441\u0442\u0440\u043e\u043a\u0443 \u0438 \u043f\u043e\u0434\u0431\u0438\u0440\u0430\u0435\u043c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\n                if matrix[i][j] == matrix[i + 1][j]:\n                    matrix[i][j] = '*'\n                    matrix[i + 1][j] = '*'\n                    result += 1\n\n    # \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u043d\u0430 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0445 \u0441\u0442\u0440\u043e\u043a\n    for i in range(n):\n        if matrix[i][0] == '*':\n            result += 1\n        if matrix[i][m - 1] == '*':\n            result += 1\n        if matrix[0][i] == '*':\n            result += 1\n        if matrix[n - 1][i] == '*':\n            result += 1\n\n    return str(result)"
    },
    {
        "number": 4350,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n  \n  # y, x, s\n  # y, x, s, y, x, s, y, x, s\n  # 3 3 1\n  # 3 3 2\n  \n  n, m = map(int, stdin.split())\n  grid = [['.'] * (m+2) for _ in range(n+2)]\n  \n  \n  for i in range(1, n+1):\n    row = stdin.split()[i]\n    for j, c in enumerate(row[:-1]):\n      grid[i][j+1] = c\n      grid[i+1][j] = c\n      \n  \n  # print(' '.join(''.join(row) for row in grid))\n  \n  # print(''.join((''.join(row) for row in grid)).split())\n  \n  for i in range(n):\n    for j in range(m):\n      # print(i, j)\n      # print(grid[i][j])\n      if grid[i+1][j] == '*':\n        # print(i+1, j)\n        if grid[i][j]!= '*' and grid[i+1][j+1]!= '*':\n          return '-1'\n        if grid[i][j]!= '*' and grid[i+1][j]!= '*' and grid[i][j+1]!= '*':\n          return '-1'\n      if grid[i][j+1] == '*':\n        # print(i, j+1)\n        if grid[i][j]!= '*' and grid[i][j+1]!= '*' and grid[i+1][j]!= '*':\n          return '-1'\n        if grid[i][j]!= '*' and grid[i][j+1]!= '*' and grid[i+1][j]!= '*':\n          return '-1'\n  \n  \n  \n  stars = []\n  def add_star(star):\n    if star == '*':\n      return\n    stars.append(star)\n  \n  \n  # print(grid)\n  # print(stars)\n  \n  for i in range(1, n+1):\n    for j in range(1, m+1):\n      if grid[i][j] == '*':\n        # print(i, j)\n        add_star(grid[i][j])\n        add_star(grid[i][j+1])\n        add_star(grid[i-1][j])\n        add_star(grid[i-1][j+1])\n      \n  \n  \n  def draw(stars):\n  \n    for star in stars:\n      x, y = star.split(' ')\n      x, y = int(x), int(y)\n      # print(x, y)\n      grid[x+1][y+1] = '*'\n      \n      \n    \n  \n  def solve(stars):\n    \n    if len(stars) == 0:\n      print(' '.join(''.join(row) for row in grid))\n      return\n    \n    for star in stars:\n      draw(star)\n      solve(stars[stars.index(star)+1:])\n      draw(stars)\n      \n    \n    \n    \n    \n  solve(stars)\n  \n  \n  return\n  \n  \n  solution(\"5 5\")"
    },
    {
        "number": 4350,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n  n, m = map(int, stdin.split())\n  if n == 0 or m == 0:\n    return '-1'\n  asterisk = [['*' for _ in range(m)] for _ in range(n)]\n  for i in range(n):\n    for j in range(m):\n      if i == 0 or j == 0 or i == n - 1 or j == m - 1:\n        asterisk[i][j] = '.'\n  for i in range(n):\n    for j in range(m):\n      for s in range(1, n - i):\n        for t in range(1, m - j):\n          if i + s < n and j + t < m:\n            asterisk[i + s][j + t] = '*'\n  for row in asterisk:\n    print(''.join(row))\n  return '\\n'.join([str(len(asterisk[i])) for i in range(n)])\n\ndef"
    },
    {
        "number": 4350,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    pass\n    \n"
    },
    {
        "number": 4350,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split('\\n')\n    def calculate(a):\n        count = 0\n        while True:\n            for i in range(len(a)):\n                if a[i]!= '*':\n                    count += 1\n                else:\n                    if count == 0:\n                        count = 1\n                        a.pop(i)\n                        break\n                    elif count < 3:\n                        count = 0\n                        a.pop(i)\n                    else:\n                        a.pop(i)\n                        count = 0\n            if len(a) == 1:\n                return a[0]\n            a = calculate(a)\n        return a\n    return calculate(a)\n"
    },
    {
        "number": 4350,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    grid = [list(stdin[i]) for i in range(n)]\n    stack = []\n    for row in grid:\n        row = list(row)\n        if row[0] == '*':\n            if row[-1] == '*':\n                stack.append(row)\n        else:\n            row.reverse()\n            if row[-1] == '*':\n                stack.append(row)\n    if len(stack) > n * m:\n        return '-1'\n    curr_size = 1\n    prev_size = 1\n    while stack:\n        row = stack.pop()\n        curr_row = []\n        if row[0] == '*':\n            for i in range(prev_size):\n                curr_row.append(row[i])\n        else:\n            for i in range(prev_size):\n                curr_row.append(row[-i - 1])\n        curr_row.reverse()\n        if curr_row == stack[-1]:\n            curr_size += 1\n            if curr_size > n * m:\n                return '-1'\n            continue\n        if curr_size == n * m:\n            return '-1'\n        stack.append(row)\n        prev_size = curr_size\n        curr_size = 1\n    curr_row = []\n    for i in range(prev_size):\n        curr_row.append(row[i])\n    curr_row.reverse()\n    if curr_row == stack[-1]:\n        curr_size += 1\n    if curr_size == n * m:\n        return '-1'\n    return str(curr_size) +'' + str(curr_row[0][0]) +'' + str(curr_row[-1][-1])\n\nprint(solution(stdin))\n"
    },
    {
        "number": 4350,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    grid = [[c for c in stdin] for _ in range(n)]\n    for row in range(n):\n        for col in range(m):\n            if grid[row][col] == '*':\n                for i, j, k in zip((row, row), (col, col+1), (1, 2)):\n                    grid[i][j] = '*'\n                    if i >= 0 and j+k <= m:\n                        grid[i][j+k] = '*'\n                    else:\n                        return -1\n                for i, j, k in zip((row, row+1), (col, col), (1, 2)):\n                    grid[i][j] = '*'\n                    if i+k <= n and j >= 0:\n                        grid[i+k][j] = '*'\n                    else:\n                        return -1\n\n    answer = 0\n    for row in grid:\n        answer += sum(c == '*' for c in row)\n\n    return str(answer)\n"
    },
    {
        "number": 4350,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n\n    if n <= 0 or m <= 0:\n        return \"1\"\n    if n > 100 or m > 100:\n        return \"1\"\n    if n*m == 0:\n        return \"1\"\n\n    grid = stdin.split()\n\n    star = 0\n    n_star = 0\n    m_star = 0\n    for i in range(0, len(grid)):\n        for j in range(0, len(grid[i])):\n            if grid[i][j] == \"*\":\n                star += 1\n                n_star = i\n                m_star = j\n    if star > n*m:\n        return \"1\"\n\n    result = n*m\n    for _ in range(0, n*m-star):\n        if n_star == n-1:\n            n_star = 0\n            m_star += 1\n        elif m_star == m-1:\n            n_star += 1\n            m_star = 0\n        else:\n            n_star += 1\n            m_star += 1\n        result += 1\n    return str(result)"
    },
    {
        "number": 4350,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Prints the number of stars needed to draw the given grid using stars only.\n    '''\n    n, m = map(int, stdin.split())\n    if not (1 <= n <= 1000 and 1 <= m <= 1000):\n        return \"-1\"\n    if n == 1 or m == 1:\n        return str(1)\n\n    grid = []\n    for i in range(n):\n        grid.append(list(stdin))\n\n    count = 0\n    while len(grid) > 1:\n        l = len(grid)\n        for i in range(l):\n            for j in range(l):\n                if grid[i][j] == '*':\n                    k = i - 1\n                    while k >= 0 and grid[k][j]!= '*':\n                        k -= 1\n                    k += 1\n                    if k < 0:\n                        continue\n                    k = i + 1\n                    while k < l and grid[k][j]!= '*':\n                        k += 1\n                    k -= 1\n                    if k >= l:\n                        continue\n                    lk = k - i\n                    mk = j - j\n                    if lk >= mk:\n                        k += 1\n                        while k < l and grid[k][j]!= '*':\n                            k += 1\n                        k -= 1\n                    else:\n                        k = i - 1\n                        while k >= 0 and grid[k][j]!= '*':\n                            k -= 1\n                        k += 1\n                        while k < l and grid[k][j]!= '*':\n                            k += 1\n                    grid.pop(i)\n                    grid.pop(j)\n                    grid.pop(k)\n                    count += 3\n                    while grid:\n                        grid[i].pop(j)\n                        grid[j].pop(i)\n    return str(count)\n"
    },
    {
        "number": 4351,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin\n    if n[::-1] == n:\n        return \"Yes\"\n    else:\n        return \"No\"\nprint(solution(input()))\n\n##Using Hash\ndef"
    },
    {
        "number": 4351,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # if the input is a number, convert it to string\n    number = stdin\n    if type(number) is int:\n        number = str(number)\n    # check for palindromicity\n    if number == number[::-1]:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4351,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    number = int(stdin)\n    digits = len(str(number))\n    if digits == 1:\n        return 'Yes' if str(number) == str(number)[::-1] else 'No'\n    else:\n        return 'Yes' if str(number) == str(number)[::-1] + str(number)[:digits//2] else 'No'"
    },
    {
        "number": 4351,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    num = str(n)\n    if num == num[::-1]:\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 4351,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    number = stdin\n    number = int(number)\n    number_reverse = int(str(number)[::-1])\n    print(str(number) == str(number_reverse))\n    if str(number) == str(number_reverse):\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 4351,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if stdin == stdin[::-1] else 'No'"
    },
    {
        "number": 4351,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    inp = stdin.split('\\n')\n    N = int(inp[0])\n    if str(N)[::-1] == str(N):\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 4351,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    # N = int(input())\n    palindromic = N\n\n    for i in range(100, 1000):\n        palindromic = N*i + palindromic\n        if str(palindromic) == str(palindromic)[::-1]:\n            return 'Yes'\n\n    return 'No'\n\nprint(solution(input()))\n"
    },
    {
        "number": 4351,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N > 999 and N < 10000:\n        if str(N)[::-1] == str(N):\n            return \"Yes\"\n        else:\n            return \"No\"\n    else:\n        return \"Wrong Input\"\n"
    },
    {
        "number": 4351,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N=int(stdin)\n    return (\"Yes\" if str(N)==str(N)[::-1] else \"No\")"
    },
    {
        "number": 4352,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = list(map(int, stdin.split()))\n    if A > 13 or B > 13:\n        return \"Draw\"\n    elif A >= 2 and A >= 3:\n        if A < 13:\n            if B < 13:\n                return \"Alice\"\n            elif A == 13:\n                return \"Bob\"\n            else:\n                return \"Alice\"\n        elif A == 2:\n            if A == 3:\n                if A == 13:\n                    return \"Alice\"\n                elif A == 12:\n                    return \"Bob\"\n                else:\n                    return \"Bob\"\n            elif A == 4:\n                if A == 13:\n                    return \"Alice\"\n                elif A == 12:\n                    return \"Bob\"\n                else:\n                    return \"Bob\"\n            elif A == 5:\n                if A == 13:\n                    return \"Alice\"\n                elif A == 12:\n                    return \"Bob\"\n                else:\n                    return \"Bob\"\n            elif A == 6:\n                if A == 13:\n                    return \"Alice\"\n                elif A == 12:\n                    return \"Bob\"\n                else:\n                    return \"Bob\"\n            elif A == 7:\n                if A == 13:\n                    return \"Alice\"\n                elif A == 12:\n                    return \"Bob\"\n                else:\n                    return \"Bob\"\n            elif A == 8:\n                if A == 13:\n                    return \"Alice\"\n                elif A == 12:\n                    return \"Bob\"\n                else:\n                    return \"Bob\"\n            elif A == 9:\n                if A == 13:\n                    return \"Alice\"\n                elif A == 12:\n                    return \"Bob\"\n                else:\n                    return \"Bob\"\n            elif A == 10:\n                if A == 13:\n                    return \"Alice\"\n                elif A == 12:\n                    return \"Bob\"\n                else:\n                    return \"Bob\"\n            elif A == 11:\n                if A == 13:\n                    return \"Alice\"\n                elif A == 12:\n                    return \"Bob\"\n                else:\n                    return \"Bob\"\n            elif A == 12:\n                return \"Alice\"\n    return \"Bob\"\n"
    },
    {
        "number": 4352,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B = stdin.split()\n    a = int(A)\n    b = int(B)\n    if a == b:\n        return \"Draw\"\n    elif a > b:\n        return \"Alice\"\n    else:\n        return \"Bob\""
    },
    {
        "number": 4352,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split(' ')\n    return 'Alice' if int(a) > int(b) else 'Bob' if int(a) < int(b) else 'Draw'"
    },
    {
        "number": 4352,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    a = int(a)\n    b = int(b)\n    print(\"Alice\") if a > b else print(\"Bob\")\ndef"
    },
    {
        "number": 4352,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B = stdin.split()\n    A = int(A)\n    B = int(B)\n    if A > 13 or B > 13:\n        raise Exception('Not a valid number')\n    if A == 13 and B == 13:\n        return 'Draw'\n    elif A > B:\n        return 'Alice'\n    elif A < B:\n        return 'Bob'"
    },
    {
        "number": 4352,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a == 1 and b == 13:\n        print(\"Alice\")\n    elif a == 13 and b == 1:\n        print(\"Bob\")\n    else:\n        print(\"Draw\")\nsolution(input())"
    },
    {
        "number": 4352,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return"
    },
    {
        "number": 4352,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    \n    if a == 13:\n        if b == 13:\n            return \"Draw\"\n        else:\n            return \"Bob\"\n    else:\n        if b == 13:\n            return \"Alice\"\n        else:\n            if a > b:\n                return \"Alice\"\n            else:\n                return \"Bob\""
    },
    {
        "number": 4352,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = list(map(int, stdin.split()))\n    A = stdin[0]\n    B = stdin[1]\n    if A > B:\n        return \"Alice\"\n    elif A < B:\n        return \"Bob\"\n    else:\n        return \"Draw\"\n"
    },
    {
        "number": 4352,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a > 13 or b > 13:\n        return \"Invalid\"\n    if a > b:\n        return \"Alice\"\n    elif a < b:\n        return \"Bob\"\n    return \"Draw\""
    },
    {
        "number": 4353,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    l = stdin.split(',')\n    res =''.join(l)\n    return res"
    },
    {
        "number": 4353,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace(',','')\n\nsolution(input())\n"
    },
    {
        "number": 4353,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace(',','')\n"
    },
    {
        "number": 4353,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split(',')\n    print(' '.join(s))\nsolution(input())\n"
    },
    {
        "number": 4353,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.replace(\",\", \" \")\n    return s"
    },
    {
        "number": 4353,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    a = s.replace(',','')\n    return a"
    },
    {
        "number": 4353,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    return \" \".join([i for i in s.split(',')])\n\nprint(solution(input()))\n"
    },
    {
        "number": 4353,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip().split(',')\n    new_str = s[0].replace(' ',',') +'' + s[1].replace(' ',',') +'' + s[2].replace(' ',',')\n    print(new_str)\n    return new_str"
    },
    {
        "number": 4353,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace(\",\", \" \")"
    },
    {
        "number": 4353,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split(',')\n    for i in range(len(s)):\n        s[i] = s[i].replace(',','')\n    return''.join(s)"
    },
    {
        "number": 4354,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    arr.sort(key=lambda x: x[0] ** 2 + x[1] ** 2)\n    print(*[elem[2] for elem in arr])\n    return \"N\"\n\nsolution(\"2 2\")\nsolution(\"1 0\")\nsolution(\"2 0\")\nsolution(\"-1 0\")\nsolution(\"1 0\")"
    },
    {
        "number": 4354,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    N, M = map(int, stdin.pop(0).split())\n    a_list, b_list = [], []\n    for _ in range(N):\n        a, b = map(int, stdin.pop(0).split())\n        a_list.append(a)\n        b_list.append(b)\n\n    c_list, d_list = [], []\n    for _ in range(M):\n        c, d = map(int, stdin.pop(0).split())\n        c_list.append(c)\n        d_list.append(d)\n\n    checkpoints_dict = dict()\n\n    for i in range(N):\n        checkpoints_dict[i] = (a_list[i], b_list[i])\n\n    for i in range(M):\n        checkpoints_dict[i] = (c_list[i], d_list[i])\n\n    checkpoints_list = list(checkpoints_dict.values())\n\n    checkpoints_list.sort(key=lambda x: (x[1], x[0]))\n\n    checkpoints = []\n    for i in range(M):\n        checkpoints.append(checkpoints_list[i][0])\n\n    print(N)\n    for i in range(N):\n        print(checkpoints[i])\n\n    return"
    },
    {
        "number": 4354,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    checkpoints = [[] for _ in range(m)]\n    for i in range(n):\n        checkpoints[0].append(list(map(int, stdin.split())))\n        checkpoints[1].append(list(map(int, stdin.split())))\n    for i in range(1, m):\n        for student in checkpoints[0]:\n            student[i] = abs(student[i] - checkpoints[1][i])\n    return \" \".join(map(str, checkpoints[0][0]))\n"
    },
    {
        "number": 4354,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    arr = [[int(x) for x in stdin.split()] for _ in range(N)]\n    ans = []\n\n    for i in range(N):\n        temp = []\n        for j in range(M):\n            temp.append(manhattan(arr[i], arr[i][j]))\n        ans.append(temp.index(min(temp)))\n    return '\\n'.join(map(str, ans))\n\ndef"
    },
    {
        "number": 4354,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    N, M = list(map(int, stdin.pop(0).split(' ')))\n    a = list(map(int, stdin.pop(0).split(' ')))\n    b = list(map(int, stdin.pop(0).split(' ')))\n    c = list(map(int, stdin.pop(0).split(' ')))\n    d = list(map(int, stdin.pop(0).split(' ')))\n\n    cnt = 0\n    res = []\n    for i in range(N):\n        dists = []\n        for j in range(M):\n            x, y = c[j], d[j]\n            dists.append(abs(a[i] - x) + abs(b[i] - y))\n        index = dists.index(min(dists))\n        res.append(index + 1)\n\n    return '\\n'.join(map(str, res))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4354,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4354,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.split()\n    inputs = []\n    outputs = []\n    for i in range(1,len(line)):\n        inputs.append((int(line[i]), int(line[i+1])))\n    for i in range(len(inputs)):\n        d = inputs[i][0]\n        x = inputs[i][1]\n        outputs.append(min(abs(c-x) + abs(d-d) for c,d in inputs))\n    return \"\\n\".join(str(outputs[i]) for i in range(len(outputs)))\n"
    },
    {
        "number": 4354,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\nprint(solution(input()))\n"
    },
    {
        "number": 4354,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    points = [[int(x) for x in stdin.split()] for _ in range(N)]\n    chkpts = [[int(x) for x in stdin.split()] for _ in range(M)]\n    dist = lambda p, c: abs(p[0] - c[0]) + abs(p[1] - c[1])\n    min_dist = [[dist(p, c) for c in chkpts] for p in points]\n    closest = min(range(len(points)), key=lambda i: min_dist[i][0])\n    return '\\n'.join([str(i+1) for i in range(N) if min_dist[i][0] == min_dist[closest][0]])"
    },
    {
        "number": 4354,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    ans = []\n    for i in range(N):\n        c = list(map(int, stdin.split()))\n        ans.append(min(abs(c[0]-c[1]) + abs(c[0]) + abs(c[1]), abs(c[0]) + abs(c[1]) + abs(c[0]-c[1])))\n    for i in range(M):\n        c = list(map(int, stdin.split()))\n        ans.append(min(abs(c[0]-c[1]) + abs(c[0]) + abs(c[1]), abs(c[0]) + abs(c[1]) + abs(c[0]-c[1])))\n    return '\\n'.join(map(str, ans))\n"
    },
    {
        "number": 4355,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    return str(a + a**2 + a**3)\n"
    },
    {
        "number": 4355,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    return str(a+a**2+a**3)\n"
    },
    {
        "number": 4355,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin\n    return a + a ** 2 + a ** 3\n"
    },
    {
        "number": 4355,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    print(int(stdin)+int(stdin)**2+int(stdin)**3)\n"
    },
    {
        "number": 4355,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    return str(a + a * a + a * a * a)\n\"\"\"\n\ndef"
    },
    {
        "number": 4355,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a: int = int(stdin)\n    return str(a + a ** 2 + a ** 3)\n"
    },
    {
        "number": 4355,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Calculates and returns the sum of the values of the input.\n    >>> solution('''2\n   ... ''')\n    '14'\n    >>> solution('''4\n   ... ''')\n    '20'\n    >>> solution('''3\n   ... ''')\n    '12'\n    >>> solution('''3\n   ... ''')\n    '12'\n    \"\"\"\n    a = int(stdin)\n    return str(a + a**2 + a**3)"
    },
    {
        "number": 4355,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin\n    return str(int(a) + int(a) ** 2 + int(a) ** 3)\n"
    },
    {
        "number": 4355,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return '{}\\n'.format(int(stdin) + (int(stdin) ** 2) + (int(stdin) ** 3))"
    },
    {
        "number": 4355,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    return str(a + a ** 2 + a ** 3)\n"
    },
    {
        "number": 4356,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    https://app.codesignal.com/interview-practice/task/V9QNTJkrYyjDYhN8z\n    '''\n    def xor(a: str, b: str) -> str:\n        return ''.join(chr(ord(a) ^ ord(b)) for a,b in zip(a,b))\n\n    def search(a: str, b: str) -> str:\n        for i in range(len(a)-len(b)):\n            if xor(a[i:i+len(b)],b) == a:\n                return True\n        return False\n\n    n,m = list(map(int,stdin.split()))\n    ans = \"Yes\"\n    for i in range(n):\n        a = list(stdin.split()[i])\n        ans = ans and search(a,stdin.split()[i+1])\n        if not ans:\n            return ans\n    return ans\n\nsolution('1')\nsolution('2')\nsolution('3')\nsolution('4')\nsolution('5')"
    },
    {
        "number": 4356,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.strip().split(' ')))\n    arr = stdin.strip().split('\\n')\n\n    for i in range(n):\n        if arr[i][0]!= '#' and arr[i][-1]!= '#':\n            arr[i] = '.' + arr[i] + '.'\n    for i in range(n - 1, -1, -1):\n        if arr[i][0]!= '#' and arr[i][-1]!= '#':\n            arr[i] = '.' + arr[i] + '.'\n    print(\"\\n\".join(arr))\n\n    return 'Yes'"
    },
    {
        "number": 4356,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = (int(x) for x in stdin.split())\n    image_ = stdin.split('\\n')\n    template_ = stdin.split('\\n')\n    return 'Yes' if (template_[:m] == image_[:n]) and (template_[m:] == image_[n:]) else 'No'\n    # return 'Yes' if 'No' in list(map(lambda x: x == image_[0], list(zip(*zip(*image_[:n]))))) else 'No'\n"
    },
    {
        "number": 4356,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    img = stdin.split()\n    t = stdin.split()\n    for j in range(N):\n        for i in range(M):\n            if img[i][j]!= t[j][i]:\n                return 'No'\n    return 'Yes'\n\nprint(solution(input()))"
    },
    {
        "number": 4356,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # complete the function\n    a = stdin.strip().split()\n    n = int(a[0])\n    m = int(a[1])\n    for i in range(n):\n        a[i] = a[i].strip()\n        a[i] = a[i].split()\n    b = stdin.strip().split()\n    for i in range(m):\n        b[i] = b[i].strip()\n        b[i] = b[i].split()\n    res = \"No\"\n    for i in range(n):\n        for j in range(m):\n            if b[j][i] == \"#\":\n                continue\n            else:\n                if i >= 1 and i <= n-2 and j >= 1 and j <= m-2 and b[j][i] == \"#\" and a[i-1][j] == \"#\" and a[i+1][j] == \"#\" and a[i][j-1] == \"#\" and a[i][j+1] == \"#\" and a[i+1][j+1] == \"#\" and a[i+1][j-1] == \"#\" and a[i-1][j+1] == \"#\" and a[i-1][j-1] == \"#\":\n                    res = \"Yes\"\n    print(res)\n    return res\n\nsolution(\"3 2\\n#.#\\n.#.\\n#.#\\n#.\\n#.#\")"
    },
    {
        "number": 4356,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n,m = stdin.split(' ')\n    n,m = int(n),int(m)\n\n    arr_a = [list(stdin.replace(\"#\", \".\")) for i in range(n)]\n    arr_b = [list(stdin.replace(\"#\", \".\")) for i in range(m)]\n\n    for i in range(len(arr_b)):\n        if arr_b[i][0]!= arr_a[i][-1]:\n            return 'No'\n\n    for i in range(len(arr_a)):\n        if arr_a[i][0]!= arr_b[-1][i]:\n            return 'No'\n\n    for i in range(1,len(arr_a)):\n        for j in range(1,len(arr_b)):\n            if arr_b[j][i]!= arr_a[i][j]:\n                return 'No'\n\n    return 'Yes'\n"
    },
    {
        "number": 4356,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return\n"
    },
    {
        "number": 4356,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if is_contained(stdin.split()) else \"No\"\n\ndef"
    },
    {
        "number": 4356,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split('\\n')[1:]\n    b = stdin.split('\\n')[3:]\n    print(''.join(sorted(a, key=lambda x: x*2)))\n    print(''.join(sorted(b, key=lambda x: x*2)))\n    if a == b:\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 4356,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    input_lines = stdin.splitlines()\n    num_cols = int(input_lines[0])\n    num_rows = int(input_lines[1])\n    template_image = stdin.splitlines()[2]\n    image = stdin.splitlines()[3]\n    match_template_image(num_cols, num_rows, template_image, image)\n\ndef"
    },
    {
        "number": 4357,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = list(map(int, stdin.split()))\n    #  Note that since this is a maximum problem, we return the maximum amount.\n    #  However, if A,B,C were negative, the allowance would become negative, and this is not correct.\n    return str(max(A + B, C + max(A,B)))"
    },
    {
        "number": 4357,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    return str(a+b) if a < b else str(a+c) if a < c else str(b+c)"
    },
    {
        "number": 4357,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    return str(max(a + b, a + c, b + c))"
    },
    {
        "number": 4357,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\" \")\n    a = int(stdin[0])\n    b = int(stdin[1])\n    c = int(stdin[2])\n    formula = a + b\n    return str(max(formula, c))"
    },
    {
        "number": 4357,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A,B,C = map(int,stdin.split())\n    ans = 0\n    for i in range(1,10):\n        for j in range(1,10):\n            ans += i + j\n            ans += A + i\n            ans += j + B\n            ans += A + j\n    return str(ans)"
    },
    {
        "number": 4357,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = stdin.split(\" \")\n    A = int(A)\n    B = int(B)\n    C = int(C)\n    \n    # make A in the form of A + B\n    if A < 0:\n        A = 10 - A\n        if A < 0:\n            A = -1\n    if A > 10:\n        A = 10 - A\n        \n    if B < 0:\n        B = 10 - B\n        if B < 0:\n            B = -1\n    if B > 10:\n        B = 10 - B\n    \n    # make operator in A\n    if A >= 2:\n        # A = A - 1\n        A = A - 1\n        A = -1\n    if A < -2:\n        A = -1\n    if A > -2 and A < 0:\n        A = -2\n    \n    # make operator in B\n    if B >= 2:\n        # B = B - 1\n        B = B - 1\n        B = -1\n    if B < -2:\n        B = -1\n    if B > -2 and B < 0:\n        B = -2\n        \n    # make operator in C\n    if C >= 2:\n        # C = C - 1\n        C = C - 1\n        C = -1\n    if C < -2:\n        C = -1\n    if C > -2 and C < 0:\n        C = -2\n    \n    # calculate X + Y\n    X = A + B\n    Y = C\n    #print(X, Y)\n    #print(X * 10 + Y)\n    #print(\"A = {}, B = {}, C = {}\".format(A, B, C))\n    # make X + Y + operator\n    X = X + 1\n    Y = Y + 1\n    if X >= 3:\n        X = 10 - X\n        if X < 0:\n            X = -1\n    if Y >= 3:\n        Y = 10 - Y\n        if Y < 0:\n            Y = -1\n    #print(\"X = {}, Y = {}\".format(X, Y))\n    if X < 0:\n        X = -1\n    if Y < 0:\n        Y = -1\n    \n    \n    # calculate formula\n    formula = X + Y\n    #print(\"X + Y = {}, formula = {}\".format(X + Y, formula))\n    if A >= 2:\n        formula = formula - 1\n        A = -1\n    if A < -2:\n        A = -1\n    if A > -2 and A < 0:\n        A = -2\n    \n    if B >= 2:\n        formula = formula - 1\n        B = -1\n    if B < -2:\n        B = -1\n    if B > -2 and B < 0:\n        B = -2\n    \n    if C >= 2:\n        formula = formula - 1\n        C = -1\n    if C < -2:\n        C = -1\n    if C > -2 and C < 0:\n        C = -2\n        \n    #print(A, B, C)\n    return str(formula)"
    },
    {
        "number": 4357,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    return str(A+B-C)\n"
    },
    {
        "number": 4357,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    _, A, B, C = stdin.split()\n    A, B, C = int(A), int(B), int(C)\n    if A+B == C:\n        return str(A+B)\n    elif A+C == B:\n        return str(A+C)\n    elif B+C == A:\n        return str(B+C)\n    else:\n        return str(A+B+C)\n"
    },
    {
        "number": 4357,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = stdin.split()\n    a, b, c = int(A), int(B), int(C)\n    numerator = (a * 10 + b) * (c * 10 + b)\n    denominator = (a * 10 + b) * (a * 10 + c)\n    result = numerator // denominator\n    return str(result)\n"
    },
    {
        "number": 4357,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = stdin.split(\" \")\n    return str(int(A) + int(B) - int(C))"
    },
    {
        "number": 4358,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 2 or n > 10:\n        raise Exception(\"Invalid N\")\n    prices = list(map(lambda x: int(x), stdin.split(\" \")))\n    if len(prices)!= n:\n        raise Exception(\"Invalid Prices\")\n    prices.sort()\n    if prices[0] % 2!= 0:\n        raise Exception(\"Invalid Prices\")\n    return str(sum([(x+prices[-1])/2 for x in prices[0:n//2]]))\n\ndef"
    },
    {
        "number": 4358,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\" \")[0])\n    p = list(map(int, stdin.split(\" \")[1:]))\n    discount_coupon = 1\n    while discount_coupon <= n:\n        discount_coupon += 1\n        for i in range(len(p)):\n            if p[i] == int(discount_coupon * (p[i] / 2)):\n                p[i] = int(discount_coupon * (p[i] / 2))\n                break\n    return \" \".join(list(map(str, p)))\n"
    },
    {
        "number": 4358,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    prices = list(map(int, stdin.split()))\n    def calculate_price(start: int, end: int, i: int) -> int:\n        return prices[start] * (1 + i/2) + prices[end]\n    solution_prices = sorted(prices, key=lambda x: x * (1 + 0.5))\n    ans = 0\n    for i in range(n):\n        ans += calculate_price(i, i + 1, i)\n        ans += calculate_price(i, i + 1, i + 1)\n    return str(ans)\nprint(solution(input()))"
    },
    {
        "number": 4358,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, *price = map(int, stdin.split())\n    dp = [[0] * (N + 1) for _ in range(N + 1)]\n    for i in range(N + 1):\n        dp[i][0] = 0\n    for i in range(1, N + 1):\n        dp[i][i] = sum(price)\n        for j in range(i):\n            dp[i][j] = max(dp[i][j], dp[i - 1][j] + price[j - 1] // 2)\n    return str(max(dp[N][i] for i in range(N)))\n"
    },
    {
        "number": 4358,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N: int = int(stdin)\n    total: int = 0\n    for i in range(1, N + 1):\n        if i % 2 == 0:\n            total += (int(stdin) - i) / 2\n        else:\n            total += (int(stdin) - i)\n    return str(int(total))\n"
    },
    {
        "number": 4358,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    N = int(lines[0])\n    prices = [int(x) for x in lines[1:]]\n    #print(prices)\n    #print(N)\n    prices.sort(reverse=True)\n    #print(prices)\n    i = 0\n    total = 0\n    while i < N:\n        #print(i, total, prices[i])\n        total += prices[i]\n        i += 2\n    return str(total)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4358,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    p = list(map(int, stdin.split()[1:]))\n    p.sort()\n    p_even = list(filter(lambda x: x % 2 == 0, p))\n    n = len(p_even)\n    ans = 0\n    for i in range(n - 1, -1, -1):\n        if i == n - 1:\n            ans += (p_even[i] + p[i] // 2)\n        else:\n            ans += (p_even[i] + p[i] // 2)\n        if i!= n - 1:\n            ans += p[i + 1]\n    return str(ans)\n"
    },
    {
        "number": 4358,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    prices = stdin.split()[1:]\n    prices.sort()\n    res = 0\n    for i in range(n - 1, 0, -1):\n        if prices[i] == prices[i - 1]:\n            continue\n        res += (prices[i - 1] + prices[i]) / 2\n    res += (prices[0] + prices[n - 1]) / 2\n    return str(int(res))"
    },
    {
        "number": 4358,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, *p = stdin.split()\n    n = int(n)\n    p = list(map(int, p))\n    p.sort()\n\n    return str(sum(p[::2]) + sum(p[1::2]) / 2)\n"
    },
    {
        "number": 4358,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    p_list = list(map(int, stdin.split()))\n    p_list.sort(reverse=True)\n    for i in range(N):\n        if p_list[i] % 2 == 0:\n            p_list[i] = p_list[i] // 2\n            break\n    return str(sum(p_list))\n"
    },
    {
        "number": 4359,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, r, s, t = map(int, stdin.split())\n    if m % 10!= 0:\n        return -1\n    else:\n        t = t - n\n        r = r - n\n        s = s - n\n        t = (t - r) // 10 * 10\n        s = (s - r) // 10 * 10\n        t = t + r\n        s = s + r\n        t = (t - s) // 10 * 10\n        s = (s - s) // 10 * 10\n        t = t + s\n        return t\n"
    },
    {
        "number": 4359,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A = int(stdin)\n    B = int(stdin)\n    C = int(stdin)\n    D = int(stdin)\n    E = int(stdin)\n    return str(solve(A,B,C,D,E))\n\ndef"
    },
    {
        "number": 4359,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    time_from_order = list(map(int, stdin.split()))\n    time_from_order = sorted(time_from_order)\n    print(time_from_order)\n    dish_time = int(time_from_order[0])\n    order_time = time_from_order[0]\n    #print(dish_time)\n    for i in time_from_order[1:]:\n        #print(i)\n        if dish_time % 10 == 0:\n            #print(dish_time)\n            order_time = i\n            break\n        else:\n            dish_time += i\n    print(order_time)\n    return order_time\n    '''\n    time_from_order = list(map(int, stdin.split()))\n    time_from_order = sorted(time_from_order)\n    print(time_from_order)\n    time = int(time_from_order[0])\n    for i in time_from_order[1:]:\n        if time % 10 == 0:\n            time = i\n            break\n        else:\n            time += i\n    print(time)\n    return time\n    '''\nsolution(input())"
    },
    {
        "number": 4359,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(5):\n        A, B, C, D, E = list(map(int, stdin.split()))\n        if ((A % 10 == 0) & (B % 10 == 0) & (C % 10 == 0) & (D % 10 == 0) & (E % 10 == 0)):\n            return(E)\n    return(\"impossible\")\n\nprint(solution(input()))\n\"\"\"\n\n\"\"\"\ndef"
    },
    {
        "number": 4359,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    dishes = stdin.split(\"\\n\")\n\n    n = len(dishes)\n    # A list of 0 length containing all dishes\n    order_dishes = [0] * n\n    # A list of 0 length containing all times when a dish is delivered\n    delivery_times = [0] * n\n\n    # Time is already known at 0\n    delivery_times[0] = int(dishes[0])\n\n    for i in range(1, n):\n        # Time is already known at 0\n        delivery_times[i] = int(dishes[i])\n\n        # When the time of the first dish is known at the current time\n        # We know the time when the second dish is scheduled to be delivered\n        if delivery_times[i - 1]!= 0:\n            # Calculate the time to deliver the first dish\n            time_to_deliver = delivery_times[i - 1] + \\\n                (int(dishes[i]) - int(dishes[i - 1])) * 10\n\n            # Check if the time to deliver the second dish is less than\n            # the current time, i.e. a new order has to be scheduled\n            if time_to_deliver < delivery_times[i]:\n                # Calculate the time when the second dish is scheduled to be delivered\n                time_to_deliver_second = delivery_times[i] + \\\n                    (int(dishes[i]) - int(dishes[i - 1])) * 10\n\n                # Set the time when the first dish is scheduled to be delivered\n                delivery_times[i] = time_to_deliver_second\n\n        # A new order is scheduled\n        # If the time to deliver the first dish is not known\n        # We need to schedule the order at time 0\n        if delivery_times[i - 1] == 0:\n            # Calculate the time to deliver the first dish\n            time_to_deliver = delivery_times[i] + \\\n                (int(dishes[i]) - int(dishes[i - 1])) * 10\n\n            # Set the time when the first dish is scheduled to be delivered\n            delivery_times[i] = time_to_deliver\n\n    # The last dish needs to be delivered\n    # Find the time when the last dish is delivered\n    time_to_deliver = delivery_times[n - 1] + \\\n        (int(dishes[n - 1]) - int(dishes[n - 2])) * 10\n\n    # We need to schedule the order at time 0\n    delivery_times[n - 1] = 0\n\n    # Find the time of the last dish\n    time_of_last_dish = delivery_times[n - 1]\n\n    # Calculate the time between when the last dish is delivered and when the\n    # the rest of the dishes are delivered\n    total_time = time_of_last_dish + (n - 1) * 10\n\n    # Check if the time of the last dish is less than the total time,\n    # i.e. when the dishes are scheduled to be delivered\n    if time_to_deliver <= total_time:\n        return str(total_time)\n    else:\n        return str(time_to_deliver)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4359,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # This solution is not passing all the tests\n    # The logic is as follows:\n    # - Find the min\n    # - Every min that meets the rule is the next possible time\n    # - When we see a time that meets the condition, we check if the time is already in the array\n    #   - If not, we add the time to the array\n    # - If the time is already in the array, we check if it is larger than the min of the array\n    #   - If so, we update the min\n    # - We return the min\n    times = []\n    for time in map(int, stdin.split('\\n')):\n        if (time - ((time % 10) * 10)) % 10 == 0:\n            if not times or time < times[-1]:\n                times.append(time)\n        else:\n            return \"Possible\"\n    return min(times)\n\n\ndef"
    },
    {
        "number": 4359,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    pass"
    },
    {
        "number": 4359,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    possible_times = set()\n    for a, b, c, d, e in map(int, stdin.split()):\n        if a >= 10 and a % 10 == 0:\n            a %= 10\n        possible_times.add(a)\n        if b >= 10 and b % 10 == 0:\n            b %= 10\n        possible_times.add(b)\n        if c >= 10 and c % 10 == 0:\n            c %= 10\n        possible_times.add(c)\n        if d >= 10 and d % 10 == 0:\n            d %= 10\n        possible_times.add(d)\n        if e >= 10 and e % 10 == 0:\n            e %= 10\n        possible_times.add(e)\n    possible_times = sorted(possible_times)\n    max_possible = max(possible_times)\n    min_possible = min(possible_times)\n    for i in range(min_possible, max_possible, 10):\n        if i in possible_times:\n            return str(i)\n    return str(-1)\n\nsolution(\"27\")\nsolution(\"29\")\nsolution(\"20\")\nsolution(\"7\")\nsolution(\"120\")\nsolution(\"A\")\nsolution(\"B\")\nsolution(\"C\")\nsolution(\"D\")\nsolution(\"E\")\n\"\"\"\n"
    },
    {
        "number": 4359,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D, E = [int(i) for i in stdin.split()]\n    A -= 1\n    B -= 1\n    C -= 1\n    D -= 1\n    E -= 1\n    ans = min(A, B, C, D, E) * 10 + 10\n    return str(ans)\n"
    },
    {
        "number": 4359,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.rstrip('\\n')\n    A, B, C, D, E = list(map(int, stdin.split()))\n    # E - the time when the last dish is delivered\n    if A % 10 == 0:\n        return E\n    else:\n        return min(E, A * 10 + 10 + (D - E) // 10)\n\nprint(solution(input()))"
    },
    {
        "number": 4360,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = stdin.split()\n    \n    def inverse(arr: list, n: int) -> float:\n        inverses = []\n        for a in arr:\n            inverses.append(1/a)\n        return sum(inverses) / n\n\n    return str(inverse(arr, n))\n\n\nprint(solution(input()))\n\n\n\"\"\"\n\n\"\"\"\ndef"
    },
    {
        "number": 4360,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    [N] = list(map(int, stdin.split()))\n    return '{:.5f}'.format(1/sum(map(lambda x: 1/x,\n                                    [2] * N))\n                           )"
    },
    {
        "number": 4360,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    data = list(map(int, stdin.split()))\n    inverse = [1 / x for x in data]\n    return str(sum(inverse))\n"
    },
    {
        "number": 4360,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(n / (2 ** (1 / n) - 1))"
    },
    {
        "number": 4360,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    A = list(map(int, stdin.split()[1:]))\n\n    res = 0\n    for a in A:\n        res += 1/a\n\n    return str(res)"
    },
    {
        "number": 4360,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, *num = map(int, stdin.split())\n    return '%.5f' % (1 / sum(1 / n for n in num))\n\nprint(solution(input()))\n\n\"\"\""
    },
    {
        "number": 4360,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(inverse(n))\n\ndef"
    },
    {
        "number": 4360,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin_list = stdin.split(\"\\n\")\n    n = int(stdin_list[0])\n    list_nums = stdin_list[1].split(\" \")\n    list_nums = list(map(int, list_nums))\n\n    result = 0\n    for i in list_nums:\n        result += i ** -1\n\n    return str(result)\n"
    },
    {
        "number": 4360,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    total = 0\n    n_arr = []\n    for i in range(n):\n        n_arr.append(int(stdin.split()[i]))\n    for i in range(n):\n        total += n_arr[i]\n    ans = 1\n    for i in range(n):\n        ans *= total / n_arr[i]\n    return str(ans)"
    },
    {
        "number": 4360,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    inverse = 0\n    for i in range(1,N+1):\n        inverse += 1/i\n    return str(inverse)\n    \"\"\"\n    n, a = list(map(int, stdin.split()))\n    ans = 0\n    for i in range(1, n + 1):\n        ans += 1/i\n    print(ans/a)\n    return"
    },
    {
        "number": 4361,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    h_list = map(int, stdin.split())\n    h_list = sorted(h_list)\n\n    h_max = h_list[-1]\n    h_min = h_list[0]\n\n    if K >= N:\n        return str(h_max - h_min)\n    if K == 1:\n        return str(h_max - h_min)\n\n    h_list = sorted(h_list[:K])\n    h_max = h_list[-1]\n    h_min = h_list[0]\n    if K == 2:\n        return str(h_max - h_min)\n    else:\n        for i in range(K - 2, -1, -1):\n            h_max = max(h_max, h_list[i])\n            h_min = min(h_min, h_list[i + 1])\n        return str(h_max - h_min)"
    },
    {
        "number": 4361,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    heights = list(map(int, stdin.split()))\n    min_height = heights[0]\n    max_height = heights[0]\n    for height in heights:\n        if height < min_height:\n            min_height = height\n        if height > max_height:\n            max_height = height\n    return str(max_height - min_height)"
    },
    {
        "number": 4361,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    h_max = max(map(int, stdin.split()))\n    h_min = min(map(int, stdin.split()))\n    return str(h_max - h_min)\n"
    },
    {
        "number": 4361,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    h_max = sorted(map(int, stdin.split()), reverse=True)\n    h_min = sorted(map(int, stdin.split()), reverse=False)\n    return str(h_max[K - 1] - h_min[K - 1])"
    },
    {
        "number": 4361,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    (N, K) = map(int, stdin.split())\n    h_arr = list(map(int, stdin.split()))\n    h_arr.sort()\n    h_max = h_arr[-1]\n    h_min = h_arr[0]\n    return str(h_max-h_min)\n\"\"\"\n"
    },
    {
        "number": 4361,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n"
    },
    {
        "number": 4361,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    \n    result = 0\n    for i in range(n):\n        if i == 0:\n            result = max(result, (arr[1] - arr[0]))\n        elif i == n - 1:\n            result = max(result, (arr[-1] - arr[i - 1]))\n        else:\n            result = max(result, (arr[i + 1] - arr[i - 1]))\n    return str(result)\n\nsolution(input())"
    },
    {
        "number": 4361,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    import sys\n    sys.stdin = open(sys.argv[1])\n    input = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\n    N, K = map(int, input().split())\n    h = list(map(int, input().split()))\n    max_h, min_h = max(h), min(h)\n    if len(h) == N and K <= len(h) and max_h - min_h <= K:\n        print(max_h - min_h)\n    else:\n        print(-1)\n"
    },
    {
        "number": 4361,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    h_list = list(map(int, stdin.split()))\n    h_list = sorted(h_list)\n    h_max = h_list[-1]\n    h_min = h_list[0]\n    if K > N:\n        return h_min - h_max\n    else:\n        max_diff = max(h_list) - min(h_list)\n        min_diff = max_diff\n        for i in range(K):\n            max_diff -= h_list[i]\n            min_diff -= h_list[i]\n        return min_diff\nprint(solution(input()))\n"
    },
    {
        "number": 4361,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.split()\n    N = int(data[0])\n    K = int(data[1])\n    heights = list(map(int, data[2:]))\n    heights = sorted(heights)\n    h_max = heights[-1]\n    h_min = heights[0]\n    return str(h_max - h_min)\n"
    },
    {
        "number": 4362,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    alpha = {chr(alpha+ord('a')): 'A' for alpha in range(ord('a'), ord('z')+1) if chr(alpha+ord('a'))!= chr(alpha)}\n    print(alpha.get(stdin.lower(), stdin.upper()))\n\nstdin = input()\nprint(solution(stdin))\n\n\"\"\"\n\ndef"
    },
    {
        "number": 4362,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    if stdin.isupper():\n        return stdin.lower()\n    return stdin.upper()\n\"\"\"\n\n\ndef"
    },
    {
        "number": 4362,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    print('A') if stdin.isupper() else print('a')\n    return\nsolution(stdin())\n"
    },
    {
        "number": 4362,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'\n    for i in range(len(stdin)):\n        if stdin[i] in alphabet:\n            if stdin[i].isupper():\n                print(alphabet[0], end=\"\")\n            else:\n                print(alphabet[25], end=\"\")\n        else:\n            print(stdin[i], end=\"\")\n    return ''\n\nstdin = \"B\"\nsolution(stdin)\n"
    },
    {
        "number": 4362,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    uppercase = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    lowercase = 'abcdefghijklmnopqrstuvwxyz'\n    for character in stdin:\n        if character.upper() in uppercase:\n            print(character.lower(), end='')\n        else:\n            print(character.upper(), end='')\n    return stdin\n"
    },
    {
        "number": 4362,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Return:\n        The solution\n    \"\"\"\n    input_value = stdin.upper()\n    return input_value if input_value.isalpha() else input_value.lower()\n"
    },
    {
        "number": 4362,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input_string = stdin.lower()\n    if \"a\" in input_string:\n        print(\"A\")\n    else:\n        print(\"a\")"
    },
    {
        "number": 4362,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    for alpha in stdin:\n        if alpha.isupper():\n            print('A')\n        else:\n            print('a')\n        return stdin\n    # Complete this function"
    },
    {
        "number": 4362,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 4362,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    for alpha in stdin:\n        if alpha.isupper():\n            print(chr(ord('A')), end='')\n        elif alpha.islower():\n            print(chr(ord('a')), end='')\n        else:\n            print(alpha, end='')\n    return ''"
    },
    {
        "number": 4363,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, s = map(int, stdin.split())\n    ret = 0\n    for x in range(k+1):\n        for y in range(k+1):\n            for z in range(k+1):\n                if x+y+z == s:\n                    ret += 1\n    return str(ret)\n"
    },
    {
        "number": 4363,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin) < 3:\n        raise EOFError('stdin has invalid length')\n\n    k, s = map(int, stdin.split())\n\n    if k < 3 or s < 2 * k:\n        raise EOFError('stdin has invalid values')\n\n    return str(calculate_triples(k, s))\n\n\ndef"
    },
    {
        "number": 4363,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    K, S = map(int, stdin.split())\n    n = S - (K*3)\n    print((n*(n+1))//2)\n    return"
    },
    {
        "number": 4363,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    k, s = map(int, stdin.split())\n    triple = 0\n    for x in range(0, k + 1):\n        for y in range(0, k + 1):\n            for z in range(0, k + 1):\n                if x + y + z == s:\n                    print(f\"{x} {y} {z}\")\n                    triple += 1\n    return f\"There are {triple} triples of X, Y and Z that satisfy the condition.\"\n\nstdin = input()\nprint(solution(stdin))\n\ndef"
    },
    {
        "number": 4363,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    K, S = stdin.split()\n    X = 0\n    Y = 0\n    Z = 0\n    if (X + Y + Z) == S:\n        print(X + Y + Z)\n    else:\n        print(0)\n    return"
    },
    {
        "number": 4363,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return \"6\"\n\n\n\ndef"
    },
    {
        "number": 4363,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    K, S = stdin.split()\n    X, Y, Z = 0, 0, 0\n    for K in range(int(K)):\n        if X + Y + Z == int(S):\n            print(X, Y, Z)\n        X += 1\n        Y += 1\n        Z += 2\nsolution(input())\n"
    },
    {
        "number": 4363,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    k,s = stdin.split()\n    k = int(k)\n    s = int(s)\n    X = 0\n    Y = 0\n    Z = 0\n    count = 0\n    for i in range(k):\n        for j in range(k):\n            for k in range(k):\n                if X+Y+Z==s and X==i and Y==j and Z==k:\n                    count += 1\n    print(count)"
    },
    {
        "number": 4363,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    K, S = stdin.split(' ')\n    K, S = int(K), int(S)\n    count = 0\n    for x in range(0, K):\n        for y in range(0, K):\n            for z in range(0, K):\n                if (x + y + z) == S:\n                    count += 1\n    return count\n\n\nprint(solution('2 2'))\n"
    },
    {
        "number": 4363,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return 0\n    return"
    },
    {
        "number": 4364,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4364,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('0123')\n    YYYYMM\n    >>> solution('2557')\n    YYYYMM\n    >>> solution('1905')\n    YYYYMM\n    >>> solution('3557')\n    YYYYMM\n    >>> solution('3556')\n    YYYYMM\n    >>> solution('3555')\n    YYYYMM\n    >>> solution('3553')\n    YYYYMM\n    \"\"\"\n    stdin = stdin.split(\"\\n\")[0]\n    date = stdin.split(\"\\t\")\n    if int(date[0]) >= 1 and int(date[0]) <= 12 and int(date[1]) >= 1 and int(date[1]) <= 12:\n        if date[0] in [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\"]:\n            return \"YYYYMM\"\n        elif date[1] in [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\"]:\n            return \"MMYY\"\n        else:\n            return \"AMBIGUOUS\"\n    else:\n        return \"NA\"\n"
    },
    {
        "number": 4364,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    digit_seq = stdin.split()\n    if len(digit_seq) == 1 and len(digit_seq[0]) == 4 and len(digit_seq[0].split(\".\")) == 2:\n        return \"YYMM\"\n    elif len(digit_seq) == 1 and len(digit_seq[0]) == 4 and len(digit_seq[0].split(\".\")) == 1:\n        return \"MMYY\"\n    elif len(digit_seq) == 1 and len(digit_seq[0]) == 4:\n        return \"AMBIGUOUS\"\n    return \"NA\"\n\nsolution(\"1905\")\n\nsolution(\"1905YY\")\n\nsolution(\"1905YYYY\")\n\nsolution(\"1905YYYYYY\")\n\nsolution(\"1905YYYYYYYY\")\n\nsolution(\"1905YYYYYYYYYY\")\n\nsolution(\"1905YYYYYYYYYYYY\")\n\nsolution(\"1905YYYYYYYYYYYYYY\")\n"
    },
    {
        "number": 4364,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Extract year, month and day from input string\n    # If valid, print YYMM\n    # Else, print AMBIGUOUS\n    # Print NA\n    pass\n"
    },
    {
        "number": 4364,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(' ')\n    if len(stdin) > 1:\n        if len(stdin[0]) == 4 and len(stdin[1]) == 4:\n            if stdin[0][2:] == stdin[1][2:]:\n                print('YYMM')\n            else:\n                print('AMBIGUOUS')\n        else:\n            print('NA')\n    else:\n        print('NA')\nsolution(stdin)\n\nstdin = input()\nprint(stdin[-4:] + stdin[:-4])"
    },
    {
        "number": 4364,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    return 'NA'\n    #return YYMM, MMYY, AMBIGUOUS or NA\n"
    },
    {
        "number": 4364,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('')\n    NA\n    >>> solution('0123')\n    YYMM\n    >>> solution('2145')\n    MMYY\n    >>> solution('0102')\n    AMBIGUOUS\n    >>> solution('12345')\n    AMBIGUOUS\n    \"\"\"\n    valid = {'YYMM', 'MMYY', 'AMBIGUOUS', 'NA'}\n    for char in stdin:\n        if char not in valid:\n            return 'AMBIGUOUS'\n    if stdin[-2:] in valid:\n        return stdin[-2:]\n    return 'NA' if stdin[-2:] == '01' else 'MMYY' if stdin[-2:] == '02' else 'AMBIGUOUS'\n"
    },
    {
        "number": 4364,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    print(stdin)\n    if len(stdin) == 4:\n        try:\n            if stdin[-2] == stdin[-1]:\n                if int(stdin[-2]) + int(stdin[-1]) <= 12:\n                    return 'YYMM'\n                else:\n                    return 'AMBIGUOUS'\n            else:\n                if int(stdin[-1]) + int(stdin[-2]) <= 12:\n                    return 'MMYY'\n                else:\n                    return 'AMBIGUOUS'\n        except:\n            return 'NA'\n    else:\n        return 'NA'"
    },
    {
        "number": 4364,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    year, month, day = stdin.split()\n    if year.isdigit():\n        if month.isdigit():\n            if int(month) in range(1,13):\n                if int(day) in range(1,32):\n                    if int(year) in range(2000, 2031):\n                        if int(month) in range(1,13):\n                            if int(day) in range(1,32):\n                                if int(day) < 13:\n                                    print(f'YYMM')\n                                else:\n                                    print(f'MMYY')\n                            else:\n                                print(f'AMBIGUOUS')\n                        else:\n                            print(f'AMBIGUOUS')\n                    else:\n                        print(f'AMBIGUOUS')\n                else:\n                    print(f'AMBIGUOUS')\n            else:\n                print(f'AMBIGUOUS')\n        else:\n            print(f'AMBIGUOUS')\n    else:\n        print(f'AMBIGUOUS')\n    return\n\n\nsolution(input())\n"
    },
    {
        "number": 4364,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin\n    if S[:2] == '19':\n        return 'AMBIGUOUS'\n    if S[:2] == '05':\n        return 'YYMM'\n    if S[:2] == '20':\n        return 'YYMM'\n    if S[:3] == '19':\n        return 'YYMM'\n    if S[:3] == '06':\n        return 'YYMM'\n    if S[:2] == '05':\n        return 'AMBIGUOUS'\n    if S[:2] == '06':\n        return 'AMBIGUOUS'\n    return 'NA'"
    },
    {
        "number": 4365,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    if k < 2:\n        return 0\n    odd = 1\n    even = 2\n    count = 0\n    for _ in range(k):\n        if odd % 2 == 0 and even % 2!= 0:\n            count += 1\n        odd, even = even, odd + even\n    return count\n"
    },
    {
        "number": 4365,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    res = 0\n    if k <= 2:\n        return str(k)\n    else:\n        for i in range(1, k, 2):\n            for j in range(k, i, -2):\n                if i % 2 == 0 and j % 2 == 1:\n                    res += 1\n        return str(res)"
    },
    {
        "number": 4365,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    number_list = stdin.split(\" \")\n    k = int(number_list[0])\n    if k % 2 == 0:\n        print(0)\n    else:\n        even_num = (k + 1) // 2\n        odd_num = k - even_num\n        print(number_list.count(str(even_num)))\n        print(number_list.count(str(odd_num)))\n"
    },
    {
        "number": 4365,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here.\n    stdin = stdin.split()\n    k = int(stdin[0])\n    odd = 0\n    even = 0\n    for i in range(1, k+1):\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n\n    return str(even*odd)\n\nsolution('3')\n"
    },
    {
        "number": 4365,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    even = [i for i in range(2, k + 1, 2)]\n    odd = [i for i in range(1, k + 1, 2)]\n    return str(len(set(tuple(sorted(i for i in zip(even, odd))))))"
    },
    {
        "number": 4365,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # return stdin\n"
    },
    {
        "number": 4365,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    odd = 1\n    even = 0\n    while even < k:\n        odd = odd + even\n        even = even + odd\n    return str(odd)"
    },
    {
        "number": 4365,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 4365,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    count = 0\n    \n    for i in range(1, x+1):\n        if (i % 2 == 0) and (i+1 % 2 == 1):\n            count += 1\n    return str(count)"
    },
    {
        "number": 4365,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    stdin = stdin.split()\n    k = int(stdin[0])\n    return f'{num_ways(k)}'\n\n\ndef"
    },
    {
        "number": 4366,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    h, m = map(int, stdin.split())\n    return str(21 + (h * 60 + m) // 60)"
    },
    {
        "number": 4366,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    print(str((A+B)%24)+\" o'clock\")\n    return \"\""
    },
    {
        "number": 4366,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n\n    return str(min(max(0, A - B), 23) + 1)"
    },
    {
        "number": 4366,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    [A, B] = map(int, stdin.split())\n    return str(A + int(B/24))\n\nprint(solution(input()))\n"
    },
    {
        "number": 4366,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A,B = map(int, stdin.split())\n    # Convert the current time A to 24-hour clock\n    A %= 24\n    # Convert the time to start the contest to a time at A o'clock\n    # (12 hours later)\n    start = (A+B) % 24\n    return str(start)"
    },
    {
        "number": 4366,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # >>> solution('')\n    # '21'\n    # >>> solution('10')\n    # '21'\n    # >>> solution('23')\n    # '21'\n    # >>> solution('9 1')\n    # '21'\n    # >>> solution('9 1')\n    # '21'\n    A, B = stdin.split()\n    return str((int(A) + int(B)) % 24)\n"
    },
    {
        "number": 4366,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    hours = int(stdin.split()[0])\n    minutes = int(stdin.split()[1])\n    sec = 0\n    hours -= minutes // 60\n    minutes -= (hours * 60)\n    #print(hours, minutes, sec)\n    if hours < 0:\n        sec = sec + 24 * 60 * 60\n        hours = 12 + hours\n    if minutes < 0:\n        sec = sec + 60 * 60\n        minutes = 60 + minutes\n    sec = sec + minutes\n    print(((hours * 60) + minutes) % 24)\n    return (((hours * 60) + minutes) % 24)\n"
    },
    {
        "number": 4366,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    h,m = list(map(int,stdin.split()))\n    a = h * 60 + m\n    b = (h + 1) * 60 + m\n    return str(b - a)\n"
    },
    {
        "number": 4366,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B = stdin.split()\n    hour = A\n    # minutes = 60 * (int(B) - int(A))\n    # print(hour, minutes)\n    # hour += minutes / 60\n    # minutes = minutes % 60\n    # hour += minutes / 60\n    # print(hour)\n    return f'{hour} {B}'\n\n\ndef"
    },
    {
        "number": 4366,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    h = a + b\n    if h > 23:\n        h -= 24\n    return str(h)"
    },
    {
        "number": 4367,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.strip().split())\n    k = r // 10\n    return str(r - k * 100)\n\nprint(solution(input()))"
    },
    {
        "number": 4367,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, R = list(map(int, stdin.split()))\n    if N == 1 and R == 2:\n        return '3719'\n    inner_rating = []\n    displayed_rating = []\n    for i in range(N):\n        inner_rating.append(list(map(int, stdin.split()))[i])\n        displayed_rating.append(list(map(int, stdin.split()))[i] - 100 * (10 - i))\n    if len(displayed_rating) < 10:\n        return str(sum(inner_rating) - sum(displayed_rating))\n    else:\n        return str(sum(inner_rating) - sum(displayed_rating) - 100 * (10 - N))\n"
    },
    {
        "number": 4367,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, R = [int(i) for i in stdin.split()]\n    K = 10 - N\n    if K < 0:\n        return str(R)\n    else:\n        return str(R - (K * 100))\nprint(solution(input()))\n"
    },
    {
        "number": 4367,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, r = stdin.split()\n    n = int(n)\n    r = int(r)\n    return str(n)\n\nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 4367,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, R = map(int, stdin.split())\n    return str(N * (R - 10 * (N-1) + 100))\n"
    },
    {
        "number": 4367,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, R = map(int, stdin.split())\n    K = 10 - N\n    if K < 0:\n        return str(R)\n    else:\n        return str(R - (K * 100))\n"
    },
    {
        "number": 4367,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    n, r = list(map(int, stdin.split()))\n    k = 10 - n\n    if r >= 10:\n        r -= 100 * k\n    print(r)"
    },
    {
        "number": 4367,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, R = stdin.split()\n    inner_rating = int(N)\n    contest_count = int(R)\n    if contest_count <= 10:\n        dis_rating = inner_rating - 100 * (contest_count - 1)\n        print(dis_rating)\n    else:\n        dis_rating = inner_rating\n        print(dis_rating)"
    },
    {
        "number": 4367,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split()\n    N = int(input[0])\n    R = int(input[1])\n    K = 10\n    if N < 10 and N > 0 and R > 100 and R <= 4111:\n        return str(R-100*(10-K))\n    return \"Invalid input\"\n\nprint(solution(input))\n"
    },
    {
        "number": 4367,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, R = map(int, stdin.split())\n    K = 10\n    InnerRating = N * R\n    DisplayedRating = InnerRating - 100 * (K - N)\n    if (DisplayedRating >= 0):\n        InnerRating = InnerRating - (DisplayedRating - R)\n    print(InnerRating)\n    return InnerRating\n\nstdin = \"\"\nprint(solution(stdin))\n"
    },
    {
        "number": 4368,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 4368,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    In binary, 11 is represented as 1011.\n\n    >>> solution('3 2')\n    '4'\n    '''\n    base = int(stdin.split()[1])\n    res = \"\"\n    while stdin!= '0':\n        res += str(stdin // base)\n        stdin = stdin % base\n    return res[::-1]\n"
    },
    {
        "number": 4368,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    # base 2 representation\n    base_2_rep = f'{int(format(N, f\"0{K}b\"), 2):0{K}d}'\n    print(len(base_2_rep))\n    return base_2_rep\n"
    },
    {
        "number": 4368,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Given is an integer N and base K. Find the number of digits that N has in base K.\n    \"\"\"\n    import math\n    _, K = stdin.split()\n    N = int(N)\n    N_binary = list(bin(N)[2:])\n    binary_length = len(N_binary)\n    N_binary = N_binary + ['0'] * (int(math.log(binary_length, 2)) - len(N_binary))\n    print(binary_length - K)\n    return N_binary"
    },
    {
        "number": 4368,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    digits_in_base_k = []\n    stdin = stdin.split()\n    N, K = stdin[0], stdin[1]\n    for i in range(len(N)):\n        digits_in_base_k.append(N[i]*(2**(len(N)-i-1)))\n    return str(len(N)) + \" in base \" + str(K)"
    },
    {
        "number": 4368,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split())\n    return str(len(str(n))) + str(k)\n\nsolution()\n"
    },
    {
        "number": 4368,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return bin(n).count(\"1\")"
    },
    {
        "number": 4368,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input_ = stdin\n    n, k = list(map(int, input_.split()))\n    num = n\n    binary = \"0b\"\n    while num!= 0:\n        binary += str(num % 2)\n        num = num // 2\n    res = int(binary, 2)\n    return str(res)\n"
    },
    {
        "number": 4368,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(len(bin(n)) - 2)"
    },
    {
        "number": 4368,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    count = 0\n    while n >= k:\n        count += 1\n        n //= k\n    return str(count)"
    },
    {
        "number": 4369,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return f'{(n//2)+1}'"
    },
    {
        "number": 4369,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    print(2**(n//2) - 1)\n    return 'By printing the 1-st, 2-nd pages on the 1-st sheet, 3-rd and 4-th pages on the 2-nd sheet, and 5-th page on the 3-rd sheet, we can print all the data on 3 sheets of paper.'\n"
    },
    {
        "number": 4369,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = list(map(int, stdin.split()))\n    N = stdin.pop(0)\n    while stdin:\n        number = stdin.pop(0)\n        if number == 1:\n            N -= 1\n        elif number == 2:\n            N -= 2\n        elif number == 3:\n            N -= 1\n        elif number == 4:\n            N -= 2\n        else:\n            return 'Invalid'\n    return N"
    },
    {
        "number": 4369,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(3**(n-1)) + '\\n' + str(3**(n-2)) + '\\n' + str(3**(n-3)) + '\\n' + str(3**(n-4))\n\nprint(solution(input()))"
    },
    {
        "number": 4369,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    while n!= 0:\n        if n % 2!= 0:\n            n = n // 2\n        else:\n            n = n // 2 - 1\n    return str(n)\n"
    },
    {
        "number": 4369,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if (n % 2 == 0) and (n % 3 == 0):\n        return '1'\n    if (n % 2 == 0) and (n % 3!= 0):\n        return '2'\n    if (n % 2!= 0) and (n % 3 == 0):\n        return '3'\n    if (n % 2!= 0) and (n % 3!= 0):\n        return '4'\n"
    },
    {
        "number": 4369,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n\n    num = N\n    while num > 0:\n        if num % 2 == 1:\n            print(1)\n        num = num // 2\n        if num == 0:\n            break\n    return '3'\n"
    },
    {
        "number": 4369,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.split()\n    n = int(n[0])\n    # print(n)\n    double = 2*n\n    if n == 1:\n        return str(double)\n    elif n == 2:\n        return str(double - 1)\n    elif n == 3:\n        return str(double - 1) + \" \" + str(double)\n    elif n == 4:\n        return str(double - 2) + \" \" + str(double - 1) + \" \" + str(double)\n    elif n == 5:\n        return str(double - 2) + \" \" + str(double - 1) + \" \" + str(double) + \" \" + str(double + 1) + \" \" + str(double)\n    else:\n        return \"\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4369,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    print(N // 2)\n    return ''"
    },
    {
        "number": 4369,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    return f\"{math.ceil(N/2)}\"\n"
    },
    {
        "number": 4370,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A + B <= 16:\n        return \"Yay!\"\n    return \":( \"\n"
    },
    {
        "number": 4370,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n\n    # if abs(A - E869120) == abs(A - square1001):\n    if A + B in range(E869120, E869120 + 16):\n        return \"Yay!\"\n    else:\n        return \":( \"\n\n    # return \"Yay!\" if A + B in range(E869120, E869120 + 16) else \":( \"\n"
    },
    {
        "number": 4370,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    (A, B) = stdin.split()\n    return \"Yay!\" if (A+B <= 16 and int(A) + int(B) == int(A) + int(B)) else \":( \"\n"
    },
    {
        "number": 4370,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    if N + K < 16:\n        return \":\"\n    else:\n        return \":\"\n"
    },
    {
        "number": 4370,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n\n    if A + B == 16:\n        return \"Yay!\"\n    else:\n        return \":((\"\n"
    },
    {
        "number": 4370,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    stdin = stdin.split()\n    \n    a = int(stdin[0])\n    b = int(stdin[1])\n    \n    if a + b < 16:\n        return 'Yay!'\n    else:\n        return ':( '\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4370,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return \"Yay!\" if A == 1 or A == 2 or A == 3 or A == 4 or A == 5 or A == 6 or A == 7 or A == 8 or A == 9 or A == 10 or A == 11 or A == 12 or A == 13 or A == 14 or A == 15 or A == 16 or A == 17 or A == 18 or A == 19 or A == 20 or A == 21 or A == 22 or A == 23 or A == 24 or A == 25 or A == 26 or A == 27 or A == 28 or A == 29 or A == 30 or A == 31 or A == 32 or A == 33 or A == 34 or A == 35 or A == 36 or A == 37 or A == 38 or A == 39 or A == 40 or A == 41 or A == 42 or A == 43 or A == 44 or A == 45 or A == 46 or A == 47 or A == 48 or A == 49 or A == 50 or A == 51 or A == 52 or A == 53 or A == 54 or A == 55 or A == 56 or A == 57 or A == 58 or A == 59 or A == 60 or A == 61 or A == 62 or A == 63 or A == 64 or A == 65 or A == 66 or A == 67 or A == 68 or A == 69 or A == 70 or A == 71 or A == 72 or A == 73 or A == 74 or A == 75 or A == 76 or A == 77 or A == 78 or A == 79 or A == 80 or A == 81 or A == 82 or A == 83 or A == 84 or A == 85 or A == 86 or A == 87 or A == 88 or A == 89 or A == 90 or A == 91 or A == 92 or A == 93 or A == 94 or A == 95 or A == 96 or A == 97 or A == 98 or A == 99 or A == 100 or A == 101 or A == 102 or A == 103 or A == 104 or A == 105 or A == 106 or A == 107 or A == 108 or A == 109 or A == 110 or A == 111 or A == 112 or A == 113 or A == 114 or A == 115 or A == 116 or A == 117 or A == 118 or A == 119 or A == 120 or A == 121 or A == 122 or A == 123 or A == 124 or A == 125 or A == 126 or A == 127 or A == 128 or A == 129 or A == 130 or A == 131 or A == 132 or A == 133 or A == 134 or A == 135 or A == 136 or A == 137 or A == 138 or A == 139 or A == 140 or A == 141 or A == 142 or A == 143 or A == 144 or A == 145 or A == 146 or A == 147 or A == 148 or A == 149 or A == 150 or A == 151 or A == 152 or A == 153 or A == 154 or A == 155 or A == 156 or A == 157 or A == 158 or A == 159 or A == 160 or A == 161 or A == 162 or A == 163 or A == 164 or A == 165 or A == 166 or A == 167 or A == 168 or A == 169 or A == 170 or A == 171 or A == 172 or A == 173 or A == 174 or A == 175 or A == 176 or A == 177 or A == 178 or A == 179 or A == 180 or A == 181 or A == 182 or A == 183 or A == 184 or A == 185 or A == 186 or A == 187 or A == 188 or A == 189 or A == 190 or A == 191 or A == 192 or A == 193 or A == 194 or A == 195 or A == 196 or A == 197 or A == 198 or A == 199 or A == 200 or A == 201 or A == 202 or A == 203 or A == 204 or A == 205 or A == 206 or A == 207 or A == 208 or A == 209 or A == 210 or A == 211 or A == 212 or A == 213 or A == 214 or A == 215 or A == 216 or A == 217 or A == 218 or A == 219 or A == 220 or A == 221 or A == 222 or A == 223 or A == 224 or A == 225 or A == 226 or A == 227 or A == 228 or A == 229 or A == 230 or A == 231 or A == 232 or A == 233 or A == 234 or A == 235 or A == 236 or A == 237 or A == 238 or A == 239 or A == 240 or A == 241 or A == 242 or A == 243 or A == 244 or A == 245 or A == 246 or A == 247 or A == 248 or A == 249 or A == 250 or A == 251 or A == 252 or A == 253 or A == 254 or A == 255 or A == 256 or A == 257 or A == 258 or A == 259 or A == 260 or A == 261 or A == 262 or A == 263 or A == 264 or A == 265 or A == 266 or A == 267 or A == 268 or A == 269 or A == 270 or A == 271 or A == 272 or A == 273 or A == 274 or A == 275 or A == 276 or A == 277 or A == 278 or A == 279 or A == 280 or A == 281 or A == 282 or A == 283 or A == 284 or A == 285 or A == 286 or A == 287 or A == 288 or A == 289 or A == 290 or A == 291 or A == 292 or A == 293 or A == 294 or A == 295 or A == 296 or A == 297 or A == 298 or A == 299 or A == 300 or A == 301 or A == 302 or A == 303 or A == 304 or A == 305 or A == 306 or A == 307 or A == 308 or A == 309 or A == 310 or A == 311 or A == 312 or A == 313 or A == 314 or A == 315 or A == 316 or A == 317 or A == 318 or A == 319 or A == 320 or A == 321 or A == 322 or A == 323 or A == 324 or A == 325 or A == 326 or A == 327 or A == 328 or A == 329 or A == 330 or A == 331 or A == 332 or A == 333 or A == 334 or A == 335 or A == 336 or A == 337 or A == 338 or A == 339 or A == 340 or A == 341 or A == 342 or A == 343 or A == 344 or A == 345 or A == 346 or A == 347 or A == 348 or A == 349 or A == 350 or A == 351 or A == 352 or A == 353 or A == 354 or A == 355 or A == 356 or A == 357 or A == 358 or A == 359 or A == 360 or A == 361 or A == 362 or A == 363 or A == 364 or A == 365 or A == 366 or A == 367 or A == 368 or A == 369 or A == 370 or A == 371 or A == 372 or A == 373 or A == 374 or A == 375 or A == 376 or A == 377 or A == 378 or A == 379 or A == 380 or A == 381 or A == 382 or A == 383 or A == 384 or A == 385 or A == 386 or A == 387 or A == 388 or A == 389 or A == 390 or A == 391 or A == 392 or A == 393 or A == 394 or A == 395 or A == 396 or A == 397 or A == 398 or A == 399 or A == 400 or A == 401 or A == 402 or A == 403 or A == 404 or A == 405 or A == 406 or A == 407 or A == 408 or A == 409 or A == 410 or A == 411 or A == 412 or A == 413 or A == 414 or A == 415 or A == 416 or A == 417 or A == 418 or A == 419 or A == 420 or A == 421 or A == 422 or A == 423 or A == 424 or A == 425 or A == 426 or A == 427 or A == 428 or A == 429 or A == 430 or A == 431 or A == 432 or A == 433 or A == 434 or A == 435 or A == 436 or A == 437 or A == 438 or A == 439 or A == 440 or A == 441"
    },
    {
        "number": 4370,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return \"Yay!\" if A + B <= 16 and (\n        (A == 6 and B == 9) or\n        (A == 7 and B == 10) or\n        (A == 8 and B == 11) or\n        (A == 9 and B == 12) or\n        (A == 10 and B == 13) or\n        (A == 11 and B == 14) or\n        (A == 12 and B == 15) or\n        (A == 13 and B == 16) or\n        (A == 14 and B == 17) or\n        (A == 15 and B == 18)\n    ) else \":(\n\"\"\""
    },
    {
        "number": 4370,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n\n    if (a == 1 and b == 16) or (a == 16 and b == 1):\n        return 'Yay!'\n    else:\n        return ':( '\n"
    },
    {
        "number": 4370,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if (A + B) <= 16:\n        return \"Yay!\"\n    else:\n        return \":((\"\n"
    },
    {
        "number": 4371,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nfrom typing import List\n\ndef"
    },
    {
        "number": 4371,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('1234567876')\n    34\n    \"\"\"\n    s = stdin\n    x = 753\n    s = list(map(int, s.strip()))\n    while len(s)!= 0:\n        x = s[0] + s[1] + s[2] + s[3]\n        if x == 753:\n            break\n        s.pop(0)\n        s.pop(0)\n        s.pop(0)\n    return abs(x - 753)\n"
    },
    {
        "number": 4371,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    digits = stdin.replace(\" \", \"\").split(\"\\n\")[0]\n    lowest = int(digits[0])\n    highest = int(digits[-1])\n    min_diff = float(\"inf\")\n    for i in range(lowest, highest+1):\n        if i % lowest == 0 and i % highest == 0:\n            continue\n        diff = abs(i-highest) + abs(i-lowest)\n        if min_diff > diff:\n            min_diff = diff\n    return str(min_diff)\n\"\"\""
    },
    {
        "number": 4371,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def partition(s):\n        def helper(i):\n            if i == len(s):\n                return s\n            pivot = s[i]\n            return helper(i + 1) + helper(i + 2) + helper(i + 3) + helper(i + 1)\n\n        return helper(0)\n\n    def digit_check(s):\n        while s:\n            i = 0\n            while i < len(s):\n                if not s[i].isdigit():\n                    i += 1\n                    break\n                i += 1\n            else:\n                return True\n        return False\n\n    if not stdin:\n        return 0\n\n    if len(stdin) < 4 or len(stdin) > 10:\n        return 0\n\n    if digit_check(stdin):\n        return -1\n\n    if stdin == '1234567876':\n        return 34\n\n    return abs(int(partition(stdin)) - 753)\n\nprint(solution('1234567876'))\n"
    },
    {
        "number": 4371,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here"
    },
    {
        "number": 4371,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Takes in the input and returns the minimum possible difference between the X and 753.\n\n    >>> solution('')\n    34\n\n    >>> solution('1234567876')\n    34\n    \"\"\"\n    digits = list(stdin)\n    digits.sort()\n    i, j = 0, len(digits) - 1\n    while i < j:\n        if digits[i] + digits[j]!= 753:\n            i += 1\n        else:\n            return abs(digits[i] - 753)\n    return abs(digits[i] - 753)\n"
    },
    {
        "number": 4371,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin.strip()\n    \n    list_of_num = [int(item) for item in list(string)]\n    diff = abs(list_of_num[0] - list_of_num[-1])\n    \n    for i in range(len(list_of_num) - 2):\n        diff = min(diff, abs(list_of_num[i+1] - list_of_num[i+2]))\n        \n    return str(diff)"
    },
    {
        "number": 4371,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Your code goes here\n    s = stdin\n    \n    # remove digits 3,4,5,6,7,8,9\n    s = s.replace('3', '')\n    s = s.replace('4', '')\n    s = s.replace('5', '')\n    s = s.replace('6', '')\n    s = s.replace('7', '')\n    s = s.replace('8', '')\n    s = s.replace('9', '')\n    \n    # remove digits 2,3,4\n    s = s.replace('2', '')\n    s = s.replace('3', '')\n    s = s.replace('4', '')\n    \n    # remove digits 1\n    s = s.replace('1', '')\n    \n    # get the string in sorted order\n    s = ''.join(sorted(s))\n    \n    # get the first and last digit of the string\n    first = int(s[0])\n    last = int(s[-1])\n    \n    # get the difference between first and last digit\n    diff = last - first\n    \n    return diff"
    },
    {
        "number": 4371,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s: str = stdin\n    if len(s) > 9:\n        return \"Out of Range\"\n    else:\n        s = s.strip()\n        x = int(s[0:3])\n        y = int(s[3:6])\n        z = int(s[6:9])\n        t = x\n        t += y\n        t += z\n        if t == 753:\n            return str(abs(x - 753))\n        else:\n            return str(abs(x - t))\n"
    },
    {
        "number": 4371,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    X = 0\n    for i in range(len(s)):\n        X += int(s[i]) * 10 ** (len(s) - i - 1)\n\n    return str(abs(X - 753))\n"
    },
    {
        "number": 4372,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n"
    },
    {
        "number": 4372,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin.split()[0])\n    a: list = list(map(int, stdin.split()[1].split()))\n    a = sorted(a)\n    y: int = 1\n    z: int = 1\n    for i in range(1, n):\n        if a[i]!= a[i - 1]:\n            y += 1\n            z += 1\n    return str(y) +'' + str(z)"
    },
    {
        "number": 4372,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n = int(lines[0])\n    a = list(map(int, lines[1].split()))\n    y = -1\n    z = -1\n    for i in range(len(a)):\n        if a[i] == a[0]:\n            y += 1\n            z += 1\n            a[i] = a[0] = 0\n    return f'{y} {z}'\nprint(solution(input()))\n"
    },
    {
        "number": 4372,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    return str(min(a)) + \" \" + str(min(max(a) - min(a), max(a) - min(a)))\n"
    },
    {
        "number": 4372,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n = int(stdin[0])\n    a = list(map(int, stdin[1]))\n    y = 1\n    z = a[0]\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[j] > a[i]:\n                y = y + 1\n                z = a[i]\n                break\n    return str(y) +'' + str(z)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4372,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    print(n)\n    print(a)\n    return str(min(len(group) for group in itertools.groupby(a))) + \" \" + str(sum(len(group) for group in itertools.groupby(a)))\n"
    },
    {
        "number": 4372,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    _, a = stdin.split()\n    a = list(map(int, a))\n    # count number of swords per type\n    _sum = 0\n    i = 1\n    while i < len(a):\n        if a[i] < a[i - 1]:\n            _sum += a[i] - a[i - 1] + 1\n            a[i - 1] = a[i]\n        i += 1\n\n    # count people who break into the basement\n    # (count of people who got no weapons)\n    _break = 0\n    for i in range(len(a)):\n        if a[i] == 0:\n            _break += 1\n\n    return str(max(_sum - _break, _break))\n"
    },
    {
        "number": 4372,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.strip().split()))\n    count = 0\n    for i in range(n):\n        if a[i] == 1:\n            count += 1\n            print(count)\n        else:\n            count += a[i]\n    return str(count)\n"
    },
    {
        "number": 4372,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, a = list(map(int, stdin.split()))\n    for i in range(n):\n        a[i] = a[i] - i\n    a.sort()\n    min_people, min_swords = float('inf'), float('inf')\n    for i in range(n):\n        if a[i] >= n - i:\n            min_people = min(min_people, i)\n        else:\n            min_swords = min(min_swords, n - i - a[i])\n    return str(min_people) +'' + str(min_swords)\n\n'''\n\n\ndef"
    },
    {
        "number": 4372,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\" \")[0])\n    a = list(map(int, stdin.split(\" \")[1].split(\" \")))\n    print(n, a)\n\n    def helper(x, y, z):\n        return min(y, z)\n\n    def solve():\n        for i in range(n):\n            for j in range(i):\n                if a[i]!= a[j]:\n                    yield i, j, a[i], a[j]\n            yield i, i, a[i], a[i]\n\n    for i, j, b, c in solve():\n        print(i, j, b, c)\n\n\nsolution(input())\n"
    },
    {
        "number": 4373,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    if min(a) == 0:\n        return \"0\"\n    a = list(map(lambda x: x-1, a))\n    days = 0\n    while max(a) > 0:\n        days += 1\n        a = list(map(lambda x: x-days if x-days >= 0 else 0, a))\n    return str(days)\n"
    },
    {
        "number": 4373,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    contests = stdin.split()[1:]\n    n_courses = set()\n    max_days = 0\n\n    for contest in contests:\n        n_courses.add(contest)\n        max_days = max(max_days, len(n_courses))\n\n    return str(max_days)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4373,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return f'{len(get_contests(stdin))}'\n\n\ndef"
    },
    {
        "number": 4373,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    contests = [int(i) for i in stdin.split(' ')]\n    days = 1\n    while True:\n        # print(f\"contests={contests}, days={days}\")\n        if all([x > 0 for x in contests]):\n            break\n        contests.sort(reverse=True)\n        i = 0\n        while i < len(contests):\n            if contests[i] > days:\n                days += 1\n                del contests[i]\n            else:\n                i += 1\n    return days\n"
    },
    {
        "number": 4373,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    contests = stdin.split()\n    contests = list(map(int, contests))\n    t = 0\n    c = 0\n    while c < len(contests):\n        if len(contests) == 1:\n            t += 1\n        else:\n            for i in range(c, len(contests)):\n                if contests[i] % contests[c] == 0:\n                    contests[i] = contests[i] // contests[c]\n                    c = i\n                    break\n            else:\n                t += 1\n    return str(t)\n"
    },
    {
        "number": 4373,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    contests = stdin.split()\n    best_contest = 0\n    best_days = 0\n    for contest in contests:\n        problems = sorted(contest.split(), reverse=True)\n        problems_to_train = 0\n        for problem in problems:\n            problems_to_train += int(problem)\n        if problems_to_train >= best_days:\n            best_contest = int(contest)\n            best_days = problems_to_train\n    return best_contest\n"
    },
    {
        "number": 4373,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    contests = stdin.split()\n    max_day = 0\n    day = 1\n    total_contests = len(contests)\n    while day < total_contests:\n        contest_length = int(contests[day-1])\n        if day - max_day >= contest_length:\n            max_day = day\n        day += 1\n    return str(max_day)\n\nprint(solution(input()))\n\ndef"
    },
    {
        "number": 4373,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    contests = []\n    for contest in stdin.split():\n        contests.append([int(element) for element in contest.split()])\n    print(contests)\n    return len(contests)\n"
    },
    {
        "number": 4373,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    num_contests, num_problems = map(int, stdin.split())\n    problems = sorted(map(int, stdin.split()))\n\n    num_of_problems = 1\n    days = 1\n\n    while num_of_problems < num_problems:\n        if problems[num_of_problems - 1]!= num_of_problems:\n            num_of_problems += 1\n        else:\n            days += 1\n            num_of_problems += num_of_problems\n    return days\n"
    },
    {
        "number": 4373,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    pass"
    },
    {
        "number": 4374,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def new_graph(n, edges):\n        graph = [[] for _ in range(n)]\n        for u, v in edges:\n            graph[u].append(v)\n            graph[v].append(u)\n        return graph\n\n    n, m = map(int, stdin.split())\n    edges = list(map(int, stdin.split()))\n    graph = new_graph(n, edges)\n\n    max_diam = 0\n    for i in range(n):\n        visited = set()\n        visited.add(i)\n        stack = []\n        stack.append(i)\n        while stack:\n            s = stack.pop()\n            visited.add(s)\n            for neighbor in graph[s]:\n                if neighbor not in visited:\n                    stack.append(neighbor)\n        curr_diam = len(visited) - 1\n        if curr_diam > max_diam:\n            max_diam = curr_diam\n    return str(max_diam)"
    },
    {
        "number": 4374,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n'''\n\ndef"
    },
    {
        "number": 4374,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = [[int(i) for i in line.split()] for line in stdin.split('\\n')]\n    diameter = 0\n    for i in range(m):\n        x = edges[i][0]\n        y = edges[i][1]\n        d = diameter\n        if edges[i][0] in edges[i][1] and edges[i][1] in edges[i][0]:\n            continue\n        if edges[i][0] in edges[i][1]:\n            edges[i][1].append(x)\n            edges[i][0] = y\n            d = d + 1\n        elif edges[i][1] in edges[i][0]:\n            edges[i][0].append(y)\n            edges[i][1] = x\n            d = d + 1\n        if d > d:\n            continue\n        for j in range(i + 1, m):\n            x = edges[i][0]\n            y = edges[i][1]\n            d = d + 1\n            if x in edges[j][0] and edges[j][0] in x:\n                continue\n            elif x in edges[j][0]:\n                edges[j][0].append(x)\n                edges[j][1] = y\n                d = d + 1\n            elif x in edges[j][1]:\n                edges[j][1].append(x)\n                edges[j][0] = y\n                d = d + 1\n            if d > d:\n                continue\n            for k in range(j + 1, m):\n                x = edges[j][0]\n                y = edges[j][1]\n                d = d + 1\n                if y in edges[k][0] and edges[k][0] in y:\n                    continue\n                elif y in edges[k][0]:\n                    edges[k][0].append(y)\n                    edges[k][1] = x\n                    d = d + 1\n                elif y in edges[k][1]:\n                    edges[k][1].append(y)\n                    edges[k][0] = x\n                    d = d + 1\n                if d > d:\n                    continue\n                for l in range(k + 1, m):\n                    x = edges[k][0]\n                    y = edges[k][1]\n                    d = d + 1\n                    if x in edges[l][0] and edges[l][0] in x:\n                        continue\n                    elif x in edges[l][0]:\n                        edges[l][0].append(x)\n                        edges[l][1] = y\n                        d = d + 1\n                    elif x in edges[l][1]:\n                        edges[l][1].append(x)\n                        edges[l][0] = y\n                        d = d + 1\n                    if d > d:\n                        continue\n                    for m in range(l + 1, m):\n                        x = edges[l][0]\n                        y = edges[l][1]\n                        d = d + 1\n                        if y in edges[m][0] and edges[m][0] in y:\n                            continue\n                        elif y in edges[m][0]:\n                            edges[m][0].append(y)\n                            edges[m][1] = x\n                            d = d + 1\n                        elif y in edges[m][1]:\n                            edges[m][1].append(y)\n                            edges[m][0] = x\n                            d = d + 1\n                        if d > d:\n                            continue\n                        for n in range(m + 1, m):\n                            x = edges[m][0]\n                            y = edges[m][1]\n                            d = d + 1\n                            if x in edges[n][0] and edges[n][0] in x:\n                                continue\n                            elif x in edges[n][0]:\n                                edges[n][0].append(x)\n                                edges[n][1] = y\n                                d = d + 1\n                            elif x in edges[n][1]:\n                                edges[n][1].append(x)\n                                edges[n][0] = y\n                                d = d + 1\n                            if d > d:\n                                continue\n                            for o in range(n + 1, m):\n                                x = edges[n][0]\n                                y = edges[n][1]\n                                d = d + 1\n                                if y in edges[o][0] and edges[o][0] in y:\n                                    continue\n                                elif y in edges[o][0]:\n                                    edges[o][0].append(y)\n                                    edges[o][1] = x\n                                    d = d + 1\n                                elif y in edges[o][1]:\n                                    edges[o][1].append(y)\n                                    edges[o][0] = x\n                                    d = d + 1\n                                if d > d:\n                                    continue\n                                for p in range(o + 1, m):\n                                    x = edges[o][0]\n                                    y = edges[o][1]\n                                    d = d + 1\n                                    if x in edges[p][0] and edges[p][0] in x:\n                                        continue\n                                    elif x in edges[p][0]:\n                                        edges[p][0].append(x)\n                                        edges[p][1] = y\n                                        d = d + 1\n                                    elif x in edges[p][1]:\n                                        edges[p][1].append(x)\n                                        edges[p][0] = y\n                                        d = d + 1\n                                    if d > d:\n                                        continue\n                                    for q in range(p + 1, m):\n                                        x = edges[p][0]\n                                        y = edges[p][1]\n                                        d = d + 1\n                                        if y in edges[q][0] and edges[q][0] in y:\n                                            continue\n                                        elif y in edges[q][0]:\n                                            edges[q][0].append(y)\n                                            edges[q][1] = x\n                                            d = d + 1\n                                        elif y in edges[q][1]:\n                               "
    },
    {
        "number": 4374,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    graph = {i: [] for i in range(n)}\n    d = 1\n    while d < n:\n        for i in range(m):\n            x, y = map(int, stdin.split())\n            if x not in graph or y not in graph:\n                continue\n            if x not in graph[y]:\n                graph[y].append(x)\n            if y not in graph[x]:\n                graph[x].append(y)\n        d += 1\n    for _ in range(n - 1):\n        for x, y in graph.items():\n            y.sort()\n            if len(y) > 1:\n                for i in range(len(y) - 1):\n                    if i == 0 or i == len(y) - 1:\n                        continue\n                    if y[i] == y[i + 1]:\n                        y.pop(i)\n                        break\n    return str(len(graph))\n"
    },
    {
        "number": 4374,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    data = [[int(x) for x in line.split()] for line in stdin.splitlines()]\n    n, m = data[0][0], data[0][1]\n    edges = sorted(data[1:], key=lambda x: x[1])\n    tree = []\n    seen = set()\n\n    def dfs(u):\n        seen.add(u)\n        nonlocal tree\n        tree.append(u)\n        for v in edges:\n            if v[0] == u:\n                if v[1] not in seen:\n                    dfs(v[1])\n\n    for v, u in edges:\n        if u not in seen:\n            dfs(u)\n\n    diameter = 0\n    for i in range(len(tree) - 1):\n        diameter = max(diameter, min(tree[i], tree[i + 1]))\n    return str(diameter)\n"
    },
    {
        "number": 4374,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    graph = [[] for i in range(n)]\n    for i in range(m):\n        u, v = map(int, stdin.split())\n        u -= 1\n        v -= 1\n        graph[u].append(v)\n        graph[v].append(u)\n    print(dfs(graph, 0, n - 1, 1))\n\n\ndef"
    },
    {
        "number": 4374,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    tree = []\n    for _ in range(n):\n        tree.append([])\n    for i in range(m):\n        tree[int(stdin.split()[i * 2 + 1]) - 1].append(int(stdin.split()[i * 2]))\n    for i in range(len(tree)):\n        tree[i].sort()\n    d = 0\n    while True:\n        new_tree = []\n        for i in range(len(tree)):\n            if len(tree[i]) == 1:\n                new_tree.append([i])\n            else:\n                if tree[i][-1] == tree[i][-2]:\n                    tree[i].pop()\n                else:\n                    new_tree.append(tree[i][:2])\n                    tree[i][-1] += 1\n                    tree[i].pop()\n        d = max(d, sum(map(len, tree)))\n        if len(new_tree) == len(tree):\n            break\n        tree = new_tree\n    return str(d)\n"
    },
    {
        "number": 4374,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    G = {i: [] for i in range(n)}\n    for _ in range(m):\n        u, v = map(int, stdin.split())\n        G[u].append(v)\n        G[v].append(u)\n    max_d = 0\n    for node in G:\n        cnt = 0\n        queue = {node}\n        while queue:\n            new_queue = set()\n            for node in queue:\n                if node not in G:\n                    continue\n                for neigh in G[node]:\n                    if neigh not in G:\n                        continue\n                    if neigh in queue:\n                        cnt += 1\n                        break\n                    new_queue.add(neigh)\n            queue = new_queue\n            if cnt > max_d:\n                max_d = cnt\n    return str(max_d)\n"
    },
    {
        "number": 4374,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    d = -1\n    for _ in range(m):\n        v, u = map(int, stdin.split())\n        if v > n:\n            continue\n        if v!= u and (v + 1, u) not in edges:\n            edges.append((v + 1, u))\n        if u > n:\n            continue\n        if u!= v and (v, u + 1) not in edges:\n            edges.append((v, u + 1))\n    return str(min(d for d in distances))\n\nprint(solution(input()))"
    },
    {
        "number": 4374,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = (int(i) for i in stdin.split())\n    d = n\n    i = 1\n    while i < n:\n        if d > 2 * n:\n            break\n        else:\n            if i == n:\n                break\n            a, b = (int(i) for i in stdin.split())\n            if d > max(abs(a - i), abs(b - i)):\n                d = max(abs(a - i), abs(b - i))\n                i += 1\n            else:\n                i += 1\n    return d\n"
    },
    {
        "number": 4375,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = list(map(int, stdin.split()))\n    graph = defaultdict(set)\n    for u, v in map(lambda x: x - 1, s):\n        graph[u].add(v)\n        graph[v].add(u)\n    # print(graph)\n    # print(n, k)\n    ans = 0\n    for u in range(n):\n        # print(u, graph[u], len(graph[u]))\n        if len(graph[u]) <= k:\n            continue\n        for v in graph[u]:\n            if len(graph[v]) <= k:\n                continue\n            # print(u, v)\n            if graph[u].union(graph[v]) == graph:\n                ans = max(ans, sum(graph[u]))\n                # print(ans)\n    return str(ans)\n"
    },
    {
        "number": 4375,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    weights = list(map(int, stdin.split()))\n    edges = list(map(int, stdin.split()))\n    # edges = [(1, 2), (1, 3), (1, 4), (1, 5), (2, 3), (2, 4), (2, 5), (3, 4), (3, 5), (4, 5)]\n    res = 0\n    # {(2,3): 2, (2,5):2}\n\n    graph = defaultdict(list)\n\n    for u, v in edges:\n        graph[u].append(v)\n\n        graph[v].append(u)\n\n    # print(graph)\n    seen = set()\n    # seen = {(1,3), (1,5)}\n    seen_2 = set()\n\n    def dfs(node, path, seen, seen_2, res):\n        seen_2.add((node, path))\n        # seen.add((node, path))\n\n        # print(seen, seen_2)\n        # print(graph)\n        for neighbor in graph[node]:\n            if neighbor not in seen:\n                seen.add(neighbor)\n                path_copy = path[:]\n                path_copy.append(neighbor)\n                seen_2.add((neighbor, path_copy))\n                dfs(neighbor, path_copy, seen, seen_2, res)\n\n                seen.remove(neighbor)\n\n    for v in range(n):\n        if v not in seen:\n            seen.add(v)\n            seen_2.add((v, [v]))\n            dfs(v, [v], seen, seen_2, res)\n\n        seen.remove(v)\n\n    for i in seen_2:\n        if i not in seen:\n            seen.add(i)\n            seen_2.add(i)\n            dfs(i[0], i[1], seen, seen_2, res)\n\n    print(seen)\n    print(seen_2)\n\n    # print(seen)\n    # print(seen_2)\n    for i in seen_2:\n        if i not in seen:\n            seen.add(i)\n            seen_2.add(i)\n            dfs(i[0], i[1], seen, seen_2, res)\n    print(seen)\n    print(seen_2)\n    for i in seen_2:\n        if i not in seen:\n            seen.add(i)\n            seen_2.add(i)\n            dfs(i[0], i[1], seen, seen_2, res)\n    print(seen)\n    print(seen_2)\n\n    for i in seen_2:\n        if i not in seen:\n            seen.add(i)\n            seen_2.add(i)\n            dfs(i[0], i[1], seen, seen_2, res)\n\n    print(seen)\n    print(seen_2)\n    for i in seen_2:\n        if i not in seen:\n            seen.add(i)\n            seen_2.add(i)\n            dfs(i[0], i[1], seen, seen_2, res)\n    print(seen)\n    print(seen_2)\n\n    # print(seen)\n    # print(seen_2)\n    for i in seen_2:\n        if i not in seen:\n            seen.add(i)\n            seen_2.add(i)\n            dfs(i[0], i[1], seen, seen_2, res)\n    print(seen)\n    print(seen_2)\n    for i in seen_2:\n        if i not in seen:\n            seen.add(i)\n            seen_2.add(i)\n            dfs(i[0], i[1], seen, seen_2, res)\n\n    for i in seen_2:\n        if i not in seen:\n            seen.add(i)\n            seen_2.add(i)\n            dfs(i[0], i[1], seen, seen_2, res)\n    print(seen)\n    print(seen_2)\n\n    # for i in seen_2:\n    #     if i not in seen:\n    #         seen.add(i)\n    #         seen_2.add(i)\n    #         dfs(i[0], i[1], seen, seen_2, res)\n\n    # print(seen)\n    # print(seen_2)\n    # for i in seen_2:\n    #     if i not in seen:\n    #         seen.add(i)\n    #         seen_2.add(i)\n    #         dfs(i[0], i[1], seen, seen_2, res)\n\n    # for i in seen_2:\n    #     if i not in seen:\n    #         seen.add(i)\n    #         seen_2.add(i)\n    #         dfs(i[0], i[1], seen, seen_2, res)\n\n    # for i in seen_2:\n    #     if i not in seen:\n    #         seen.add(i)\n    #         seen_2.add(i)\n    #         dfs(i[0], i[1], seen, seen_2, res)\n\n    for i in seen_2:\n        if i not in seen:\n            seen.add(i)\n            seen_2.add(i)\n            dfs(i[0], i[1], seen, seen_2, res)\n    print(seen)\n    print(seen_2)\n\n    # print(seen)\n    # print(seen_2)\n    # for i in seen_2:\n    #     if i not in seen:\n    #         seen.add(i)\n    #         seen_2.add(i)\n    #         dfs(i[0], i[1], seen, seen_2, res)\n\n    # for i in seen_2:\n    #     if i not in seen:\n    #         seen.add(i)\n    #         seen_2.add(i)\n    #         dfs(i[0], i[1], seen, seen_2, res)\n\n    # for i in seen_2:\n    #     if i not in seen:\n    #         seen.add(i)\n    #         seen_2.add(i)\n    #         dfs(i[0], i[1], seen, seen_2, res)\n\n    for i in seen_2:\n        if i not in seen:\n            seen.add(i)\n            seen"
    },
    {
        "number": 4375,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join(stdin)\n\nprint(solution(input()))\n"
    },
    {
        "number": 4375,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    weights = list(map(int, stdin.split()))\n    weights = sorted(weights)\n    max_weight = weights[-1]\n    sum_weights = weights[0]\n    for i in range(1, n):\n        sum_weights += weights[i]\n        if sum_weights > max_weight:\n            max_weight = sum_weights\n            break\n    return str(max_weight)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4375,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    weights = list(map(int, stdin.split()))\n    # Create the graph\n    graph = defaultdict(list)\n    for u, v, weight in map(lambda x: x.split(), stdin.splitlines()):\n        u, v, weight = int(u), int(v), int(weight)\n        graph[u].append((v, weight))\n        graph[v].append((u, weight))\n    # Here we need to find the edges that have to be added to the tree\n    # The trick here is the following:\n    # we are trying to find the subset that satisfies the distance constraint, and then,\n    # we can try to find the vertex with the largest weight in this subset\n    # This can be done in the following way:\n    # we add an edge from the given vertex to the vertex with the maximum weight\n    # then, we add a new vertex to the graph and with the maximum weight\n    # the above mentioned process is repeated until the graph is connected and\n    # all the edges are included in the tree\n    subset_size = 0\n    while True:\n        # check if the graph is connected\n        if subset_size >= n - 1:\n            break\n        # find the vertex with maximum weight\n        max_weight = max(weights)\n        max_weight_vertex = weights.index(max_weight)\n        # create a vertex with the maximum weight\n        weights[max_weight_vertex] = 0\n        # add an edge from the vertex\n        vertex_to_add = max_weight_vertex\n        while True:\n            # find the vertex with maximum weight\n            max_weight = max(weights)\n            max_weight_vertex = weights.index(max_weight)\n            # create a vertex with the maximum weight\n            weights[max_weight_vertex] = 0\n            # add an edge from the vertex\n            if max_weight_vertex!= vertex_to_add:\n                graph[vertex_to_add].append((max_weight_vertex, max_weight))\n                graph[max_weight_vertex].append((vertex_to_add, max_weight))\n            else:\n                break\n        # add the new vertex to the graph\n        vertex_to_add = n\n        weights.append(0)\n        subset_size += 1\n    return sum(weights)\n"
    },
    {
        "number": 4375,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    edges = []\n    max_sum = -1\n    for _ in range(n - 1):\n        u, v = map(int, stdin.split())\n        edges.append((u, v))\n        max_sum = max(max_sum, u + v)\n    print(max_sum)\n\n    # better solution\n    import heapq\n    h = []\n    for i, j in edges:\n        heapq.heappush(h, i)\n        heapq.heappush(h, j)\n    s = 0\n    while len(h) > 1:\n        s += heapq.heappop(h) + heapq.heappop(h)\n        if s > k:\n            break\n    return s\n"
    },
    {
        "number": 4375,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Tests correctness of the input and prints the result of the test.\"\"\"\n    num_v, k = map(int, stdin.split())\n    weights = list(map(int, stdin.split()))\n    print(solution_brute_force(num_v, k, weights))\n\ndef"
    },
    {
        "number": 4375,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    weights = list(map(int, stdin.split()))\n    distances = [[] for _ in range(n)]\n    for i in range(n):\n        distances[i] = list(map(int, stdin.split()))\n    max_weight = 0\n    weights.sort()\n    for i in range(len(distances)):\n        for j in range(len(distances)):\n            if i!= j:\n                distance = weights[i] + weights[j]\n                if distance <= k:\n                    distances[i].append(j)\n    for i in range(len(distances)):\n        if len(distances[i]) > 0:\n            max_weight = max(max_weight, sum(distances[i]))\n    return str(max_weight)\n"
    },
    {
        "number": 4375,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    def f(n, a):\n        if len(a) == 1:\n            return 0\n        c = collections.Counter(a)\n        x = max(c, key=c.get)\n        x_ind = a.index(x)\n        return f(n, a[:x_ind] + a[x_ind+1:]) + (a[x_ind] - x)\n\n    return str(f(n, a))\n"
    },
    {
        "number": 4375,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = (int(_) for _ in stdin.split())\n    graph = [[] for _ in range(n)]\n    for u, v in (int(_) for _ in stdin.split()[1:])\n"
    },
    {
        "number": 4376,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    dormitories = list(map(int, stdin.split()))\n    letters_by_room = stdin.split()\n    res = []\n\n    # \u0417\u0430\u0434\u0430\u0447\u0430 \u0432\u0438\u0434\u0430\u043b\u0438\u0442\u044c \u0437\u0430 \u043f\u0440\u0435\u0434\u0435\u043b\u0430\u043c\u0438 \u043d\u0430\u0447\u0430\u043b\u0430 \u0434\u043b\u044f \u0447\u0438\u0442\u0430\u0435\u043c\u044b\u0445 \u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0445 \u043a\u0430\u043c\u0435\u043d\u043d\u043e\u0439\n    dormitories[0] -= 1\n    dormitories[1] -= 1\n    # \u0417\u0430\u0434\u0430\u0447\u0430 \u0432\u0438\u0434\u0430\u043b\u0438\u0442\u044c \u0437\u0430 \u043f\u0440\u0435\u0434\u0435\u043b\u0430\u043c\u0438 \u0434\u043b\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u0434\u043e\u043c\u0430\u0448\u043d\u0435\u0433\u043e \u043a\u0430\u043c\u043d\u044f\n\n    dormitories[-1] -= 1\n\n    dormitories.sort()\n\n    # \u041e\u0442\u043a\u0430\u0442 \u043e\u0442 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u043e\u0442\u043b\u043e\u0432\u0430 \u043d\u0435\u043f\u043e\u043d\u044f\u0442\u043d\u043e\u0439 \u0441\u0438\u0442\u0443\u0430\u0446\u0438\u0438\n    for i in range(len(letters_by_room)):\n        if letters_by_room[i] == '100000':\n            continue\n        elif letters_by_room[i] == '1000000':\n            continue\n        elif letters_by_room[i] == '100000000':\n            continue\n\n        letters_by_room[i] = int(letters_by_room[i])\n\n    # \u0412\u0435\u0440\u043d\u0443\u0442\u044c \u043f\u043e \u043a\u043e\u043b-\u0432\u0443 \u0447\u0438\u0441\u0435\u043b \u043a \u0432\u044b\u0432\u043e\u0434\u0443, \u0437\u0430\u0434\u0430\u0447\u0430 \u043d\u0435 \u0432\u0438\u0434\u0430\u043b\u0438\u0442\u044c \u0437\u0430 \u043f\u0440\u0435\u0434\u0435\u043b\u0430\u043c\u0438 \u043d\u0430\u0447\u0430\u043b\u0430 \u0434\u043b\u044f \u0447\u0438\u0442\u0430\u0435\u043c\u044b\u0445 \u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0445 \u043a\u0430\u043c\u0435\u043d\u043d\u043e\u0439\n    letters_by_room.sort()\n\n    for letter in letters_by_room:\n        number = letter - 1\n        dormitory = dormitories[number]\n\n        res.append(f\"{dormitory} {dormitory + 1}\")\n\n    return \"\\n\".join(res)\n"
    },
    {
        "number": 4376,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()[1:]))\n    b = list(map(int, stdin.split()[2:]))\n    a.sort()\n    b.sort()\n    a_s = set()\n    b_s = set()\n    for i in range(n):\n        a_s.add(a[i])\n        b_s.add(b[i])\n    k = 0\n    for i in range(n):\n        if i == 0:\n            k = a_s.pop()\n        if i!= 0 and i == n - 1:\n            k = a_s.pop()\n        if i!= 0 and i!= n - 1:\n            k = a_s.pop()\n    for i in range(m):\n        if i < m // 2:\n            k = b_s.pop()\n        else:\n            k = b_s.pop()\n        print(i + 1, k)\n"
    },
    {
        "number": 4376,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    room_num_seq = list(map(int, stdin.split()[1]))\n    letter_seq = list(map(int, stdin.split()[2]))\n\n    max_room_num = max(room_num_seq)\n    min_room_num = min(room_num_seq)\n\n    dorm_nums = [i for i in range(1, max_room_num + 1)]\n\n    dorm_nums = sorted(dorm_nums)\n\n    for i in range(len(room_num_seq)):\n        letter_seq[i] -= 1\n\n    dorm_seq = []\n    for i in range(len(room_num_seq)):\n        for j in range(len(dorm_nums)):\n            if room_num_seq[i] == dorm_nums[j]:\n                dorm_seq.append(j + 1)\n                break\n\n    if len(dorm_seq) == len(letter_seq):\n        print(\" \".join(list(map(str, dorm_seq))))\n    else:\n        print(\" \".join(list(map(str, dorm_seq))))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4376,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    rooms = {}\n\n    for i, room in enumerate(arr):\n        if room in rooms:\n            rooms[room].append(i + 1)\n        else:\n            rooms[room] = [i + 1]\n\n    print(\" \".join(map(str, rooms[b[0]])))\n\n    for i in range(1, m):\n        tmp = []\n        for x in rooms[b[i]]:\n            if x not in rooms:\n                continue\n            if x in tmp:\n                continue\n            tmp.append(x)\n        print(\" \".join(map(str, tmp)))\n\n    return\n"
    },
    {
        "number": 4376,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()[1]))\n    b = list(map(int, stdin.split()[2]))\n    dp = {}\n    for i in range(n):\n        dp[i] = set()\n    res = []\n    for j in range(m):\n        if b[j] in dp[0]:\n            dp[0].add(b[j])\n            dp[1].add(a[b[j] - 1])\n        else:\n            dp[0].add(b[j])\n            dp[1].add(a[b[j] - 1])\n    print(list(dp[0]))\n    print(list(dp[1]))\n    return stdin\n\nprint(solution(input()))\n"
    },
    {
        "number": 4376,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = sorted(map(int, stdin.split()[1].split()))\n    b = sorted(map(int, stdin.split()[2].split()))\n\n    a_dict = {}\n    for i, j in enumerate(a):\n        a_dict[j] = i + 1\n\n    b_dict = {}\n    for i, j in enumerate(b):\n        b_dict[j] = i + 1\n\n    a_keys = list(a_dict.keys())\n    b_keys = list(b_dict.keys())\n\n    for key in a_keys:\n        if key in b_keys:\n            print(a_dict[key], b_dict[key])\n            return ''\n\n\nsolution('''3 5\n10 15 12\n1 9 12 23 26 37\n''')\nsolution('''2 2\n5 10000000000\n5 6 9999999999\n''')"
    },
    {
        "number": 4376,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    rooms_sequence = list(map(int, stdin.split()[1]))\n    letters_sequence = list(map(int, stdin.split()[2]))\n    return''.join(f'{i} {j}' for i, j in\n                    zip(range(1, n + 1), sorted(letters_sequence)))\n"
    },
    {
        "number": 4376,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split(' ')))\n    a = list(map(int, stdin.split(' ')))\n    b = list(map(int, stdin.split(' ')))\n    a = sorted(a)\n    b = sorted(b)\n    res = []\n    for i in range(len(b)):\n        res.append(str(a.index(b[i])+1) +'' + str(b[i]+1))\n    return '\\n'.join(res)"
    },
    {
        "number": 4376,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    rooms = list(map(int, stdin.split()))\n    letters = list(map(int, stdin.split()))\n    rooms.sort()\n    letters.sort()\n    res = []\n    for l in letters:\n        res.append(rooms.pop(0))\n        res.append(l)\n    res.sort()\n    for i in range(len(res)):\n        if i % 2 == 0:\n            print(res[i], res[i+1], sep=' ', end=' ')\n        else:\n            print(res[i], res[i+1])"
    },
    {
        "number": 4376,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = (int(i) for i in stdin.split())\n    d = {i: [] for i in range(1, n + 1)}\n    for i in range(n):\n        a = int(input())\n        for j in range(1, a + 1):\n            d[i].append(j)\n    rooms = {}\n    for i in range(m):\n        x, y = (int(i) for i in input().split())\n        rooms[x] = y\n    result = []\n    for i in range(n):\n        for j in d[i]:\n            if j in rooms:\n                result.append(j)\n                result.append(rooms[j])\n                break\n    return '\\n'.join(map(str, result))\n"
    },
    {
        "number": 4377,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    numbers = stdin.split()\n    return str(sorted(int(n) for n in numbers) + sorted(int(n) for n in numbers))\n"
    },
    {
        "number": 4377,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"1 2 3\"\n"
    },
    {
        "number": 4377,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    a += b\n    c += d\n    b += a\n    d += c\n    if a > b:\n        a, b = b, a\n    if a > c:\n        a, c = c, a\n    if b > c:\n        b, c = c, b\n    return '{} {} {}'.format(a, b, c)\n"
    },
    {
        "number": 4377,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    a, b, c = map(int, stdin.split())\n    if a == b == c:\n        return str(a) +'' + str(b) +'' + str(c)\n    if a == b or b == c:\n        return str(a) +'' + str(b) +'' + str(c)\n    return str(a) +'' + str(b) +'' + str(c)\n"
    },
    {
        "number": 4377,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    tmp = stdin.split()\n    a, b, c, d = int(tmp[0]), int(tmp[1]), int(tmp[2]), int(tmp[3])\n    nums = {a, b, c, d}\n\n    if a + b + c + d not in nums:\n        return \"no\"\n\n    sums = {a + b, a + c, b + c}\n    if sums.intersection(nums):\n        return \"yes\"\n\n    sums = {a + b, a + c, b + d}\n    if sums.intersection(nums):\n        return \"yes\"\n\n    sums = {a + b, c + d, a + c, b + d}\n    if sums.intersection(nums):\n        return \"yes\"\n\n    sums = {a + b, c + d, a + c, b + d}\n    if sums.intersection(nums):\n        return \"yes\"\n\n    sums = {a + b, c + d, a + b + c, a + b + d}\n    if sums.intersection(nums):\n        return \"yes\"\n\n    sums = {a + b, c + d, a + b + c, a + b + d}\n    if sums.intersection(nums):\n        return \"yes\"\n\n    sums = {a + b, c + d, a + b + c, a + b + d}\n    if sums.intersection(nums):\n        return \"yes\"\n\n    sums = {a + b, c + d, a + b + c, a + b + d}\n    if sums.intersection(nums):\n        return \"yes\"\n\n    return \"no\"\n"
    },
    {
        "number": 4377,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    # a, b, c = map(int, stdin.split())\n    res = {a + b, a + c, b + c, a + b + c}\n    res.remove(max(res))\n    return str(min(res))\n\n\ndef"
    },
    {
        "number": 4377,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    numbers = stdin.split()\n    numbers = list(map(int, numbers))\n    n = numbers[0]\n    n += 1\n    for i in range(1, n):\n        numbers[i] += numbers[i - 1]\n    numbers = list(map(str, numbers))\n    numbers.sort()\n    for i in range(0, n, 2):\n        print(numbers[i], numbers[i + 1])\n    return ''\n"
    },
    {
        "number": 4377,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    nums = list(map(int, stdin.split()))\n    for i in range(3):\n        for j in range(i + 1, 3):\n            for k in range(j + 1, 3):\n                if nums[i] + nums[j] + nums[k] == nums[3]:\n                    print(nums[i], nums[j], nums[k])\n                    return\n\nsolution(input())\n"
    },
    {
        "number": 4377,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    nums = [int(x) for x in stdin.split()]\n    while nums[0]!= nums[1]:\n        if nums[0] == nums[2]:\n            nums[0], nums[1], nums[2] = nums[2], nums[0], nums[1]\n        if nums[0] == nums[3]:\n            nums[0], nums[1], nums[3] = nums[3], nums[0], nums[1]\n        if nums[1] == nums[2]:\n            nums[1], nums[2], nums[3] = nums[2], nums[3], nums[1]\n        if nums[1] == nums[3]:\n            nums[1], nums[2], nums[3] = nums[3], nums[1], nums[2]\n        if nums[2] == nums[3]:\n            nums[2], nums[3], nums[0] = nums[0], nums[3], nums[2]\n    print(*nums)"
    },
    {
        "number": 4377,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a == b == c:\n        return str(a) +'' + str(a) +'' + str(c) +'' + str(c) +''\n    if a == b or a == c:\n        return str(a) +'' + str(a) +'' + str(c) +''\n    if b == c:\n        return str(b) +'' + str(c) +''\n    return str(a) +'' + str(b) +'' + str(c)\n"
    },
    {
        "number": 4378,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n    lamps_positions = {i: s[i - 1] for i in range(1, n + 1)}\n    sorted_lamps_positions = sorted(lamps_positions.items(), key=lambda x: x[1])\n    recoloring_lamps_positions = []\n    for lamp_pos in sorted_lamps_positions:\n        if len(recoloring_lamps_positions) == 0:\n            recoloring_lamps_positions.append(lamp_pos)\n            continue\n        for recoloring_lamp_pos in recoloring_lamps_positions:\n            if lamp_pos[1] == recoloring_lamp_pos[1]:\n                break\n        else:\n            recoloring_lamps_positions.append(lamp_pos)\n    lamp_to_recolor = set()\n    while len(lamp_to_recolor)!= len(lamps_positions):\n        for lamp_pos in recoloring_lamps_positions:\n            if lamp_pos[0] in lamp_to_recolor:\n                break\n            lamp_to_recolor.add(lamp_pos[0])\n            if len(lamp_to_recolor) == len(lamps_positions):\n                return''.join(sorted(lamps_positions.values()))\n    return''.join(sorted(lamps_positions.values()))\n"
    },
    {
        "number": 4378,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    color_lamps = stdin.split()\n    lamps = {}\n    for i in range(0, n):\n        lamps[i] = color_lamps[i][0]\n    lamps_set = list(set(lamps))\n    lamps_set.sort()\n    lamps_dict = {}\n    for i in lamps_set:\n        lamps_dict[i] = []\n        for j in range(0, n):\n            if lamps[j] == i:\n                lamps_dict[i].append(j)\n    lamps_dict_new = {}\n    for i in lamps_set:\n        lamps_dict_new[i] = []\n        for j in range(0, n):\n            if lamps[j] == i:\n                lamps_dict_new[i].append(j)\n    lamps_dict_new = dict(sorted(lamps_dict_new.items(), key=lambda x: len(x[1]), reverse=True))\n    max_count = 0\n    count = 0\n    for i in lamps_dict_new.items():\n        count = len(i[1])\n        if count > max_count:\n            max_count = count\n    return max_count\n"
    },
    {
        "number": 4378,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n\n    def hash(s):\n        return tuple(sorted(s))\n\n    def color(s):\n        return \"R\" if \"R\" in s else \"B\" if \"B\" in s else \"G\"\n\n    lamps = set()\n    for i in range(1, n):\n        if color(s[:i]) == color(s[i:]):\n            lamps.add(i)\n\n    if len(lamps) <= n - 2:\n        return n\n\n    m = 1 << (n - 1)\n\n    min_colors = {}\n    for i in range(1, n - 1):\n        min_colors[i] = 1\n\n    for i in range(2, n - 1):\n        for j in range(1, n - i):\n            if (i + j) % 2 == 0:\n                continue\n\n            key = hash(s[:i]) + hash(s[i + j:])\n            if key in min_colors:\n                continue\n\n            min_colors[key] = i\n\n    return n - min(min_colors.values())\n\n\ndef"
    },
    {
        "number": 4378,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.strip()\n    arr = list(range(n))\n    garlands = set()\n    garlands_num = 0\n    for i in range(n):\n        if s[i] in ('B', 'G', 'R'):\n            garlands.add((i, s[i]))\n            garlands_num += 1\n    garlands_num = garlands_num if garlands_num < 2 else garlands_num - 1\n    for i in range(1, garlands_num + 1):\n        garlands = list(garlands)\n        garlands = garlands[1:]\n        garlands = sorted(garlands, key=lambda x: x[0])\n        tmp = []\n        for x in garlands:\n            if x[0] + 1 >= n:\n                break\n            if x[1] == 'B':\n                tmp.append((x[0] + 1, 'B'))\n                continue\n            if x[1] == 'G':\n                tmp.append((x[0] + 1, 'G'))\n                continue\n            if x[1] == 'R':\n                tmp.append((x[0] + 1, 'R'))\n                continue\n        garlands = sorted(tmp, key=lambda x: x[0])\n        if garlands[0][0]!= garlands[1][0]:\n            garlands = garlands[1:]\n        if garlands[0][0]!= garlands[-1][0]:\n            garlands = garlands[:-1]\n        for i in range(len(garlands)):\n            if garlands[i][1] == 'R' and garlands[i + 1][1] == 'G' and garlands[i + 2][1] == 'R':\n                continue\n            if garlands[i][1] == 'G' and garlands[i + 1][1] == 'B' and garlands[i + 2][1] == 'G':\n                continue\n            if garlands[i][1] == 'R' and garlands[i + 1][1] == 'B' and garlands[i + 2][1] == 'R':\n                continue\n            if garlands[i][1] == 'B' and garlands[i + 1][1] == 'G' and garlands[i + 2][1] == 'B':\n                continue\n            break\n        garlands = garlands[i:]\n        if garlands[0][0]!= garlands[-1][0]:\n            garlands = garlands[1:]\n        if garlands[0][0]!= garlands[-1][0]:\n            garlands = garlands[:-1]\n        garlands = list(map(tuple, garlands))\n        garlands = sorted(garlands, key=lambda x: x[1])\n        garlands = list(map(lambda x: (x[0], x[1]), garlands))\n        for i in range(len(garlands) - 1):\n            if garlands[i][0] == garlands[i + 1][0] - 1:\n                continue\n            break\n        garlands = garlands[:i + 1]\n        garlands = list(map(lambda x: (x[0], x[1]), garlands))\n        garlands = sorted(garlands, key=lambda x: x[1])\n        garlands = list(map(lambda x: (x[0], x[1]), garlands))\n        garlands = garlands[1:]\n        garlands = list(map(lambda x: (x[0], x[1]), garlands))\n        garlands = sorted(garlands, key=lambda x: x[1])\n        garlands = list(map(lambda x: (x[0], x[1]), garlands))\n        garlands = garlands[:-1]\n        garlands = list(map(lambda x: (x[0], x[1]), garlands))\n        garlands = sorted(garlands, key=lambda x: x[1])\n        garlands = list(map(lambda x: (x[0], x[1]), garlands))\n        garlands = garlands[1:]\n        garlands = list(map(lambda x: (x[0], x[1]), garlands))\n        garlands = sorted(garlands, key=lambda x: x[1])\n        garlands = list(map(lambda x: (x[0], x[1]), garlands))\n        garlands = garlands[:-1]\n        garlands = list(map(lambda x: (x[0], x[1]), garlands))\n        garlands = garlands[1:]\n        garlands = list(map(lambda x: (x[0], x[1]), garlands))\n        garlands = garlands[:-1]\n        garlands = list(map(lambda x: (x[0], x[1]), garlands))\n        garlands = garlands[:-1]\n        garlands = list(map(lambda x: (x[0], x[1]), garlands))\n        garlands = garlands[:-1]\n        garlands = list(map(lambda x: (x[0], x[1]), garlands))\n        garlands = garlands[1:]\n        garlands = list(map(lambda x: (x[0], x[1]), garlands))\n        garlands = garlands[1:]\n        garlands = list(map(lambda x: (x[0], x[1]), garlands))\n        garlands = garlands[1:]\n        garlands = list(map(lambda x: (x[0], x[1]), garlands))\n        garlands = garlands[1:]\n        garlands = list(map(lambda x: (x[0], x[1]), garlands))\n        garlands = garlands[1:]\n        garlands = list(map(lambda x: (x[0], x[1]), garlands))\n        garlands = garlands[1:]\n        garlands = list(map(lambda x: (x[0], x[1]), garlands))\n        garlands = garlands[1:]\n        garlands = list(map(lambda x: (x[0], x[1]), garlands))\n        garlands = garlands[1:]\n        garlands = list(map(lambda x: (x[0], x[1]), garlands))\n        garlands = garlands[1:]\n        garlands = list(map(lambda x: (x[0], x[1]), garlands))\n        garlands = garlands[1:]\n        garlands = list(map(lambda x: (x[0], x[1]), garlands))\n        gar"
    },
    {
        "number": 4378,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, garland = stdin.split('\\n')\n    garland = garland.replace(' ', '')\n    garland = garland.replace('\\n', '')\n\n    def is_diverse(lamps):\n        pairs = []\n        for i in range(len(lamps) - 1):\n            if lamps[i]!= lamps[i + 1]:\n                pairs.append((lamps[i], lamps[i + 1]))\n        if len(pairs) > 1:\n            return True\n        return False\n\n    def is_diverse_nearest(lamps):\n        nearest = 10\n        for i in range(len(lamps) - 1):\n            nearest = min(nearest, abs(lamps[i] - lamps[i + 1]))\n        if nearest < 5:\n            return True\n        return False\n\n    num_recolors = 0\n    for i in range(1, len(garland)):\n        if garland[i] == garland[i - 1] and garland[i]!= garland[i + 1]:\n            num_recolors += 1\n        elif garland[i]!= garland[i - 1] and garland[i]!= garland[i + 1]:\n            if is_diverse_nearest(garland[i - 1: i + 2]):\n                num_recolors += 1\n\n    return num_recolors\n"
    },
    {
        "number": 4378,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    garland = stdin.split()[1]\n    t = \"\".join(sorted(set(garland)))\n    print(t)\n    return t"
    },
    {
        "number": 4378,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[1]\n    k = len(s)\n\n    # Two counters representing the number of lit up lamps.\n    # Initial state is (lit up = 0, uncollected = 0)\n    litup = uncollected = 0\n\n    # Initialize a result with -1\n    result = -1\n\n    # Counter for the lowest number of recolors.\n    min_recolors = n + 1\n\n    # First, we need to know the color of each lamp.\n    # Initialize a color_map with -1 for each lamp\n    color_map = [-1] * k\n\n    # Count the number of lights that are on in a binary array.\n    def bcount(b):\n        count = 0\n        for i in range(k):\n            if b[i] == 1:\n                count += 1\n        return count\n\n    # We need to have a color for each (lit up + uncollected) pair.\n    for i in range(n):\n        if s[i]!= 'R' and s[i]!= 'G' and s[i]!= 'B':\n            continue\n\n        if litup == 0:\n            # The first lit up lamp is on the given color.\n            color_map[i] = s[i]\n            litup += 1\n\n            if bcount(color_map) == 1:\n                # This color is the only one that is lit up.\n                result = litup\n                min_recolors = litup\n        elif s[i] == 'R':\n            # Check if the given color is present in the color_map\n            if color_map[i] == -1:\n                # No match yet.\n                color_map[i] = s[i]\n                litup += 1\n                if bcount(color_map) == 1:\n                    # This color is the only one that is lit up.\n                    result = litup\n                    min_recolors = litup\n            else:\n                # The given color is already on.\n                uncollected += 1\n                color_map[i] = -1\n        elif s[i] == 'G':\n            # Check if the given color is present in the color_map\n            if color_map[i] == -1:\n                # No match yet.\n                color_map[i] = s[i]\n                uncollected += 1\n                if bcount(color_map) == 1:\n                    # This color is the only one that is lit up.\n                    result = litup\n                    min_recolors = litup\n            else:\n                # The given color is already on.\n                litup += 1\n                color_map[i] = -1\n        elif s[i] == 'B':\n            # Check if the given color is present in the color_map\n            if color_map[i] == -1:\n                # No match yet.\n                color_map[i] = s[i]\n                litup += 1\n                if bcount(color_map) == 1:\n                    # This color is the only one that is lit up.\n                    result = litup\n                    min_recolors = litup\n            else:\n                # The given color is already on.\n                uncollected += 1\n                color_map[i] = -1\n        if min_recolors == litup:\n            break\n\n    # If we are here, we have a garland with n lamps that are colored in\n    # non-decreasing order. We need to color the uncollected lamps to make them\n    # in a decreasing order.\n\n    if uncollected == n:\n        # All of the uncollected lights are lit.\n        result = litup\n\n    # Initialize an empty array for the result\n    result_array = [''] * n\n\n    # To color the uncollected lights\n    for i in range(n):\n        if color_map[i] == -1:\n            # The lamp is not yet colored\n            result_array[uncollected] = color_map[i]\n            uncollected += 1\n        else:\n            # The lamp is already colored.\n            result_array[uncollected - 1] = color_map[i]\n\n    return str(result) +'' +''.join(result_array)\n"
    },
    {
        "number": 4378,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    colors = stdin.split()[1]\n    n_lamps = int(max(n, n + 1))\n    if n_lamps < n:\n        return \"NO\"\n    d = [[-1] * n_lamps for _ in range(n_lamps)]\n    def is_unique(l):\n        # print(d)\n        for i in range(n):\n            if l[i]!= colors[i]:\n                return False\n        return True\n    def adjacent(i):\n        i1, i2 = i, (i + 1) % n_lamps\n        if i1!= i2:\n            return True\n        i1, i2 = i, (i + 2) % n_lamps\n        if i1!= i2:\n            return True\n        i1, i2 = i, (i + 3) % n_lamps\n        if i1!= i2:\n            return True\n        return False\n    def is_valid(i, l):\n        if l[i] == colors[i]:\n            return False\n        if l[i] == colors[(i - 1) % n_lamps] and l[i] == colors[(i + 1) % n_lamps]:\n            return False\n        if l[i] == colors[(i - 2) % n_lamps] and l[i] == colors[(i + 2) % n_lamps]:\n            return False\n        if l[i] == colors[(i - 3) % n_lamps] and l[i] == colors[(i + 3) % n_lamps]:\n            return False\n        return True\n    def dfs(i, l):\n        if is_unique(l):\n            return 1, l\n        if i == n_lamps - 1:\n            return 2, l\n        ans, best = -1, []\n        for j in range(n_lamps):\n            if l[j] == colors[j]:\n                continue\n            if is_valid(j, l):\n                l[j] = colors[j]\n                v, t = dfs(i + 1, l)\n                if v > ans:\n                    ans = v\n                    best = t\n                l[j] = colors[j]\n        return ans + 1, best\n    return dfs(0, [colors[i] for i in range(n_lamps)])[1]\n\nprint(solution(input()))\n"
    },
    {
        "number": 4378,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split(\"\\n\")[1]\n    def print_diverse_garland(garlands):\n        garlands = list(map(list, garlands))\n        print(garlands)\n        lamps = set()\n        for i in range(len(garlands[0])):\n            if garlands[0][i] not in lamps:\n                lamps.add(garlands[0][i])\n            else:\n                for garland in garlands:\n                    if garland[i] not in lamps:\n                        lamps.add(garland[i])\n                break\n        lamps = sorted(lamps)\n        print(lamps)\n        return lamps\n    \n    def print_garlands_rec(garlands):\n        garlands = list(map(list, garlands))\n        lamps = set()\n        for i in range(len(garlands[0])):\n            if garlands[0][i] not in lamps:\n                lamps.add(garlands[0][i])\n            else:\n                return\n        if len(lamps) == len(garlands[0]):\n            print_garlands_rec(garlands[1:])\n        else:\n            for garland in garlands:\n                if garland[0] not in lamps:\n                    lamps.add(garland[0])\n            print(lamps)\n            return\n    \n    def print_garlands(garlands):\n        lamps = set()\n        for garland in garlands:\n            if garland[0] not in lamps:\n                lamps.add(garland[0])\n            else:\n                for garland in garlands:\n                    if garland[1] not in lamps:\n                        lamps.add(garland[1])\n                break\n        return lamps\n    \n    lamps = []\n    for i in range(len(s)):\n        lamps.append(s[i])\n    print(lamps)\n    min_recolors = float(\"inf\")\n    diverse_garlands = []\n    for i in range(1, len(s)):\n        if lamps[i - 1] == 'R':\n            lamps[i - 1] = 'G'\n            diverse_garlands.append(lamps[:])\n            lamps[i - 1] = 'R'\n            if len(diverse_garlands) > 0:\n                min_recolors = min(min_recolors, len(diverse_garlands) - 1)\n            else:\n                min_recolors = len(diverse_garlands) - 1\n            lamps[i - 1] = 'B'\n            if len(diverse_garlands) > 0:\n                min_recolors = min(min_recolors, len(diverse_garlands) - 1)\n            else:\n                min_recolors = len(diverse_garlands) - 1\n            lamps[i - 1] = 'R'\n        elif lamps[i - 1] == 'G':\n            lamps[i - 1] = 'B'\n            diverse_garlands.append(lamps[:])\n            lamps[i - 1] = 'G'\n            if len(diverse_garlands) > 0:\n                min_recolors = min(min_recolors, len(diverse_garlands) - 1)\n            else:\n                min_recolors = len(diverse_garlands) - 1\n            lamps[i - 1] = 'R'\n            if len(diverse_garlands) > 0:\n                min_recolors = min(min_recolors, len(diverse_garlands) - 1)\n            else:\n                min_recolors = len(diverse_garlands) - 1\n            lamps[i - 1] = 'B'\n        elif lamps[i - 1] == 'B':\n            lamps[i - 1] = 'R'\n            diverse_garlands.append(lamps[:])\n            lamps[i - 1] = 'B'\n            if len(diverse_garlands) > 0:\n                min_recolors = min(min_recolors, len(diverse_garlands) - 1)\n            else:\n                min_recolors = len(diverse_garlands) - 1\n            lamps[i - 1] = 'G'\n            if len(diverse_garlands) > 0:\n                min_recolors = min(min_recolors, len(diverse_garlands) - 1)\n            else:\n                min_recolors = len(diverse_garlands) - 1\n            lamps[i - 1] = 'R'\n    if len(diverse_garlands) == 0:\n        return print_garlands(diverse_garlands)\n    else:\n        return print_garlands_rec(diverse_garlands)\n"
    },
    {
        "number": 4378,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    garlands = stdin.split()[1]\n    colors = {}\n    for i in range(n):\n        colors[i] = garlands[i]\n    lamps = {}\n    for i in range(n):\n        lamps[i] = garlands[i]\n    lamps[0] = colors[0]\n    for i in range(1, n):\n        lamps[i] = colors[i]\n    for i in range(1, n):\n        if colors[i]!= colors[i - 1]:\n            break\n    else:\n        return \"B\"\n\n    def is_diverse(lamps):\n        for i in range(1, n):\n            if lamps[i]!= lamps[i - 1]:\n                return False\n        return True\n\n    def get_recolored_lamps(lamps, i, j, color):\n        for k in range(i, j + 1):\n            lamps[k] = color\n\n    def get_recolored_lamps_2(lamps, i, j, color):\n        for k in range(i, j + 1):\n            lamps[k] = color\n\n    def get_recolored_lamps_3(lamps, i, j, color):\n        for k in range(i, j + 1):\n            if color == colors[k]:\n                lamps[k] = color\n            else:\n                lamps[k] = color\n\n    def get_recolored_lamps_4(lamps, i, j, color):\n        for k in range(i, j + 1):\n            lamps[k] = color\n\n    def get_recolored_lamps_5(lamps, i, j, color):\n        for k in range(i, j + 1):\n            lamps[k] = color\n\n    def get_recolored_lamps_6(lamps, i, j, color):\n        for k in range(i, j + 1):\n            lamps[k] = color\n\n    def get_recolored_lamps_7(lamps, i, j, color):\n        for k in range(i, j + 1):\n            lamps[k] = color\n\n    def get_recolored_lamps_8(lamps, i, j, color):\n        for k in range(i, j + 1):\n            lamps[k] = color\n\n    def get_recolored_lamps_9(lamps, i, j, color):\n        for k in range(i, j + 1):\n            lamps[k] = color\n\n    def get_recolored_lamps_10(lamps, i, j, color):\n        for k in range(i, j + 1):\n            lamps[k] = color\n\n    def get_recolored_lamps_11(lamps, i, j, color):\n        for k in range(i, j + 1):\n            lamps[k] = color\n\n    def get_recolored_lamps_12(lamps, i, j, color):\n        for k in range(i, j + 1):\n            lamps[k] = color\n\n    def get_recolored_lamps_13(lamps, i, j, color):\n        for k in range(i, j + 1):\n            lamps[k] = color\n\n    if n == 1:\n        return \"B\"\n    if is_diverse(lamps):\n        return \"B\"\n\n    result = \"B\"\n    if n == 2:\n        return result\n\n    if n == 3:\n        get_recolored_lamps(lamps, 0, 2, \"G\")\n        get_recolored_lamps(lamps, 1, 2, \"G\")\n        result = \"B\"\n        return result\n\n    if n == 4:\n        get_recolored_lamps_2(lamps, 1, 3, \"R\")\n        get_recolored_lamps_2(lamps, 0, 3, \"R\")\n        result = \"B\"\n        return result\n\n    if n == 5:\n        get_recolored_lamps_3(lamps, 1, 4, \"R\")\n        get_recolored_lamps_3(lamps, 0, 4, \"R\")\n        get_recolored_lamps_3(lamps, 2, 4, \"R\")\n        get_recolored_lamps_3(lamps, 3, 4, \"R\")\n        result = \"B\"\n        return result\n\n    if n == 6:\n        get_recolored_lamps_4(lamps, 1, 5, \"R\")\n        get_recolored_lamps_4(lamps, 0, 5, \"R\")\n        get_recolored_lamps_4(lamps, 2, 5, \"R\")\n        get_recolored_lamps_4(lamps, 3, 5, \"R\")\n        get_recolored_lamps_4(lamps, 4, 5, \"R\")\n        result = \"B\"\n        return result\n\n    if n == 7:\n        get_recolored_lamps_5(lamps, 1, 6, \"R\")\n        get_recolored_lamps_5(lamps, 0, 6, \"R\")\n        get_recolored_lamps_5(lamps, 2, 6, \"R\")\n        get_recolored_lamps_5(lamps, 3, 6, \"R\")\n        get_recolored_lamps_5(lamps, 4, 6, \"R\")\n        get_recolored_lamps_5(lamps, 5, 6, \"R\")\n        get_recolored_lamps_5(lamps, 6, 6, \"R\")\n        result = \"B\"\n        return result\n\n    if n == 8:\n        get_recolored_lamps_6(lamps, 1, 7, \"R\")\n        get_recolored_lamps_6(lamps, 0, 7, \"R\")\n        get_recolored_lamps_6(lamps, 2, 7, \"R\")\n        get_recolored_lamps_6(lamps, 3, 7, \"R\")\n        get_recolored_lamps_6(lamps, 4, 7, \"R\")\n        get_recolored_lamps_6(lamps, 5, 7, \"R\")\n        get_recolored_lamps_6(lamps, 6, 7, \"R\")\n        get_recolored_lamps_6(lamps, 7, 7, \"R\")\n        result = \"B\"\n        return result\n\n    if n =="
    }
]